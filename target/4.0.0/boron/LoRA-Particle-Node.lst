
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009630  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd650  000bd650  0000d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd674  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  2003dd74  000bd678  0001dd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2003df38  2003df38  0002df38  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bd83c  000bd83c  0002d83c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bd868  000bd868  0002d868  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001f2dab  00000000  00000000  0002d86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00025041  00000000  00000000  00220617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004d799  00000000  00000000  00245658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000041b8  00000000  00000000  00292df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d990  00000000  00000000  00296fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00056de8  00000000  00000000  002a4939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00079ffb  00000000  00000000  002fb721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001462b5  00000000  00000000  0037571c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bc80  00000000  00000000  004bb9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 ff9b 	bl	bbf6c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 ffbd 	bl	bbfbc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd74 	.word	0x2003dd74
   b404c:	000bd678 	.word	0x000bd678
   b4050:	2003df38 	.word	0x2003df38
   b4054:	2003df38 	.word	0x2003df38
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 f8e3 	bl	bb22c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd60c 	.word	0x000bd60c
   b4080:	000bd648 	.word	0x000bd648

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b88a 	b.w	b419c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9b3 	bl	b43f4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 b883 	b.w	bb19c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bbcb 	b.w	b8830 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bbc9 	b.w	b8830 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bbcf 	b.w	b8840 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fa9c 	bl	b85e8 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8239 	.word	0x000b8239
   b40b8:	000bc374 	.word	0x000bc374

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z13userSwitchISRv>:
	oldState = state;
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  	userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z13userSwitchISRv+0x8>)
   b40ce:	2201      	movs	r2, #1
   b40d0:	701a      	strb	r2, [r3, #0]
}
   b40d2:	4770      	bx	lr
   b40d4:	2003df8b 	.word	0x2003df8b

000b40d8 <_Z9sensorISRv>:

void sensorISR()
{
   b40d8:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
   b40da:	4c08      	ldr	r4, [pc, #32]	; (b40fc <_Z9sensorISRv+0x24>)
   b40dc:	7823      	ldrb	r3, [r4, #0]
   b40de:	b12b      	cbz	r3, b40ec <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              // sets the sensor flag for the main loop
   b40e0:	4b07      	ldr	r3, [pc, #28]	; (b4100 <_Z9sensorISRv+0x28>)
   b40e2:	2201      	movs	r2, #1
   b40e4:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b40e6:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b40e8:	7023      	strb	r3, [r4, #0]
}
   b40ea:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
   b40ec:	f000 ffbc 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b40f0:	f001 f953 	bl	b539a <_ZNK13sysStatusData14get_sensorTypeEv>
   b40f4:	2800      	cmp	r0, #0
   b40f6:	d1f3      	bne.n	b40e0 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b40f8:	2301      	movs	r3, #1
   b40fa:	e7f5      	b.n	b40e8 <_Z9sensorISRv+0x10>
   b40fc:	2003df40 	.word	0x2003df40
   b4100:	2003df89 	.word	0x2003df89

000b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b4106:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4108:	4605      	mov	r5, r0
   b410a:	460f      	mov	r7, r1
   b410c:	4616      	mov	r6, r2
        if (valid_) {
   b410e:	b18b      	cbz	r3, b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4110:	6803      	ldr	r3, [r0, #0]
   b4112:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4114:	b183      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b4116:	889a      	ldrh	r2, [r3, #4]
   b4118:	2a01      	cmp	r2, #1
   b411a:	d006      	beq.n	b412a <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b411c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b411e:	e7f9      	b.n	b4114 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4120:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4122:	b14b      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b4124:	889a      	ldrh	r2, [r3, #4]
   b4126:	2a01      	cmp	r2, #1
   b4128:	d1fa      	bne.n	b4120 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b412a:	b12b      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b412c:	899a      	ldrh	r2, [r3, #12]
   b412e:	42ba      	cmp	r2, r7
   b4130:	d1f6      	bne.n	b4120 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b4132:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b4134:	4628      	mov	r0, r5
   b4136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4138:	490a      	ldr	r1, [pc, #40]	; (b4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b413a:	2010      	movs	r0, #16
   b413c:	f007 fa08 	bl	bb550 <_ZnwjRKSt9nothrow_t>
   b4140:	4604      	mov	r4, r0
   b4142:	b168      	cbz	r0, b4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b4144:	2210      	movs	r2, #16
   b4146:	2100      	movs	r1, #0
   b4148:	f007 ff38 	bl	bbfbc <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b414c:	4b06      	ldr	r3, [pc, #24]	; (b4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b414e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4150:	2301      	movs	r3, #1
   b4152:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4154:	692b      	ldr	r3, [r5, #16]
   b4156:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4158:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b415a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b415c:	612c      	str	r4, [r5, #16]
   b415e:	e7e9      	b.n	b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4160:	7528      	strb	r0, [r5, #20]
                return *this;
   b4162:	e7e7      	b.n	b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b4164:	000bd3e8 	.word	0x000bd3e8
   b4168:	00030010 	.word	0x00030010

000b416c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b416c:	b40e      	push	{r1, r2, r3}
   b416e:	b500      	push	{lr}
   b4170:	b08c      	sub	sp, #48	; 0x30
   b4172:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4174:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4178:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b417c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b417e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4182:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4184:	6801      	ldr	r1, [r0, #0]
   b4186:	aa04      	add	r2, sp, #16
   b4188:	201e      	movs	r0, #30
    attr.flags = 0;
   b418a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418e:	f004 fa3b 	bl	b8608 <log_message_v>
}
   b4192:	b00c      	add	sp, #48	; 0x30
   b4194:	f85d eb04 	ldr.w	lr, [sp], #4
   b4198:	b003      	add	sp, #12
   b419a:	4770      	bx	lr

000b419c <setup>:
void setup() {
   b419c:	b530      	push	{r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b419e:	2000      	movs	r0, #0
   b41a0:	b085      	sub	sp, #20
   b41a2:	f004 f861 	bl	b8268 <hal_timer_millis>
        while (_while() && !_condition()) {
   b41a6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b41aa:	4604      	mov	r4, r0
   b41ac:	2000      	movs	r0, #0
   b41ae:	f004 f85b 	bl	b8268 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b41b2:	1b00      	subs	r0, r0, r4
   b41b4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b41b8:	42a8      	cmp	r0, r5
   b41ba:	f171 0300 	sbcs.w	r3, r1, #0
   b41be:	d207      	bcs.n	b41d0 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b41c0:	f006 ffa4 	bl	bb10c <_Z16_fetch_usbserialv>
   b41c4:	f006 ff97 	bl	bb0f6 <_ZN9USBSerial11isConnectedEv>
   b41c8:	b910      	cbnz	r0, b41d0 <setup+0x34>
            spark_process();
   b41ca:	f004 faa9 	bl	b8720 <spark_process>
        while (_while() && !_condition()) {
   b41ce:	e7ed      	b.n	b41ac <setup+0x10>
   b41d0:	f006 ff9c 	bl	bb10c <_Z16_fetch_usbserialv>
   b41d4:	f006 ff8f 	bl	bb0f6 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b41d8:	f001 f9a8 	bl	b552c <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b41dc:	f001 f9d2 	bl	b5584 <_Z18initializePowerCfgv>
		current.setup();
   b41e0:	f000 ff92 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b41e4:	6803      	ldr	r3, [r0, #0]
   b41e6:	681b      	ldr	r3, [r3, #0]
   b41e8:	4798      	blx	r3
		sysStatus.setup();								// Initialize persistent storage
   b41ea:	f000 ff3d 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b41ee:	6803      	ldr	r3, [r0, #0]
   b41f0:	681b      	ldr	r3, [r3, #0]
   b41f2:	4798      	blx	r3
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b41f4:	4842      	ldr	r0, [pc, #264]	; (b4300 <setup+0x164>)
   b41f6:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b41f8:	2101      	movs	r1, #1
   b41fa:	8143      	strh	r3, [r0, #10]
   b41fc:	f002 fb10 	bl	b6820 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b4200:	217c      	movs	r1, #124	; 0x7c
   b4202:	483f      	ldr	r0, [pc, #252]	; (b4300 <setup+0x164>)
   b4204:	f001 fe7a 	bl	b5efc <_ZN6AB18056setWDTEi>
  	if (Time.day() != Time.day(current.get_lastCountTime())) {                 // Check to see if the device was last on in a different day
   b4208:	f006 feaa 	bl	baf60 <_ZN9TimeClass3dayEv>
   b420c:	4604      	mov	r4, r0
   b420e:	f000 ff7b 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4212:	f001 f907 	bl	b5424 <_ZNK17currentStatusData17get_lastCountTimeEv>
   b4216:	f006 fd71 	bl	bacfc <_ZN9TimeClass3dayEx>
   b421a:	4284      	cmp	r4, r0
   b421c:	d001      	beq.n	b4222 <setup+0x86>
    	resetEverything();                                               // Zero the counts for the new day
   b421e:	f001 f939 	bl	b5494 <_Z15resetEverythingv>
	if (! LoRA_Functions::instance().setup(false)) 	{	// Start the LoRA radio - Node
   b4222:	f000 fb2f 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b4226:	2100      	movs	r1, #0
   b4228:	f000 fb3e 	bl	b48a8 <_ZN14LoRA_Functions5setupEb>
   b422c:	2800      	cmp	r0, #0
   b422e:	d142      	bne.n	b42b6 <setup+0x11a>
		current.set_alertCodeNode(3);				// Initialization failure
   b4230:	f000 ff6a 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4234:	2103      	movs	r1, #3
   b4236:	f001 f893 	bl	b5360 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b423a:	f000 ff65 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b423e:	4604      	mov	r4, r0
   b4240:	f006 fe7d 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4244:	4602      	mov	r2, r0
   b4246:	17c3      	asrs	r3, r0, #31
   b4248:	4620      	mov	r0, r4
   b424a:	f001 f91e 	bl	b548a <_ZN17currentStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", current.get_alertCodeNode());
   b424e:	f000 ff5b 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4252:	f001 f84a 	bl	b52ea <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4256:	492b      	ldr	r1, [pc, #172]	; (b4304 <setup+0x168>)
   b4258:	4602      	mov	r2, r0
   b425a:	482b      	ldr	r0, [pc, #172]	; (b4308 <setup+0x16c>)
   b425c:	f7ff ff86 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b4260:	f001 fc90 	bl	b5b84 <_Z16takeMeasurementsv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// Pressure Sensor interrupt from low to high
   b4264:	4829      	ldr	r0, [pc, #164]	; (b430c <setup+0x170>)
   b4266:	492a      	ldr	r1, [pc, #168]	; (b4310 <setup+0x174>)
   b4268:	8800      	ldrh	r0, [r0, #0]
   b426a:	2400      	movs	r4, #0
   b426c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4270:	2201      	movs	r2, #1
   b4272:	9400      	str	r4, [sp, #0]
   b4274:	f004 fdd6 	bl	b8e24 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); 						// We may need to monitor the user switch to change behaviours / modes
   b4278:	4826      	ldr	r0, [pc, #152]	; (b4314 <setup+0x178>)
   b427a:	4927      	ldr	r1, [pc, #156]	; (b4318 <setup+0x17c>)
   b427c:	8800      	ldrh	r0, [r0, #0]
   b427e:	9400      	str	r4, [sp, #0]
   b4280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4284:	4622      	mov	r2, r4
   b4286:	f004 fdcd 	bl	b8e24 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;               	// IDLE unless otherwise from above code
   b428a:	4b24      	ldr	r3, [pc, #144]	; (b431c <setup+0x180>)
   b428c:	781a      	ldrb	r2, [r3, #0]
   b428e:	b90a      	cbnz	r2, b4294 <setup+0xf8>
   b4290:	2202      	movs	r2, #2
   b4292:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", current.get_alertCodeNode());
   b4294:	f000 ff38 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4298:	f001 f827 	bl	b52ea <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b429c:	4920      	ldr	r1, [pc, #128]	; (b4320 <setup+0x184>)
   b429e:	4602      	mov	r2, r0
   b42a0:	4819      	ldr	r0, [pc, #100]	; (b4308 <setup+0x16c>)
   b42a2:	f7ff ff63 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                          	 // Signal the end of startup
   b42a6:	4b1f      	ldr	r3, [pc, #124]	; (b4324 <setup+0x188>)
   b42a8:	8818      	ldrh	r0, [r3, #0]
   b42aa:	2100      	movs	r1, #0
}
   b42ac:	b005      	add	sp, #20
   b42ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	 // Signal the end of startup
   b42b2:	f007 b854 	b.w	bb35e <digitalWrite>
	else if (!Time.isValid()) {
   b42b6:	f006 fe25 	bl	baf04 <_ZN9TimeClass7isValidEv>
   b42ba:	b928      	cbnz	r0, b42c8 <setup+0x12c>
		current.set_alertCodeNode(2);
   b42bc:	f000 ff24 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b42c0:	2102      	movs	r1, #2
   b42c2:	f001 f84d 	bl	b5360 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b42c6:	e7cb      	b.n	b4260 <setup+0xc4>
	else if (sysStatus.get_nodeNumber() < 10) {			// If there is already a hardware alert - deal with that first
   b42c8:	f000 fece 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b42cc:	f000 ff92 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42d0:	2809      	cmp	r0, #9
   b42d2:	d8c5      	bhi.n	b4260 <setup+0xc4>
		current.set_alertCodeNode(1); // For testing
   b42d4:	f000 ff18 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b42d8:	2101      	movs	r1, #1
   b42da:	f001 f841 	bl	b5360 <_ZN17currentStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b42de:	f000 ff13 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b42e2:	f000 ff91 	bl	b5208 <_ZNK17currentStatusData14get_nodeNumberEv>
   b42e6:	9003      	str	r0, [sp, #12]
   b42e8:	f000 ff0e 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b42ec:	f000 fffd 	bl	b52ea <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b42f0:	9a03      	ldr	r2, [sp, #12]
   b42f2:	490d      	ldr	r1, [pc, #52]	; (b4328 <setup+0x18c>)
   b42f4:	4603      	mov	r3, r0
   b42f6:	4804      	ldr	r0, [pc, #16]	; (b4308 <setup+0x16c>)
   b42f8:	f7ff ff38 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b42fc:	e7b0      	b.n	b4260 <setup+0xc4>
   b42fe:	bf00      	nop
   b4300:	2003df44 	.word	0x2003df44
   b4304:	000bc389 	.word	0x000bc389
   b4308:	2003e658 	.word	0x2003e658
   b430c:	000bc9b0 	.word	0x000bc9b0
   b4310:	000b40d9 	.word	0x000b40d9
   b4314:	000bc9ae 	.word	0x000bc9ae
   b4318:	000b40cd 	.word	0x000b40cd
   b431c:	2003df8a 	.word	0x2003df8a
   b4320:	000bc40e 	.word	0x000bc40e
   b4324:	000bc9ac 	.word	0x000bc9ac
   b4328:	000bc3c7 	.word	0x000bc3c7

000b432c <_Z22publishStateTransitionv>:
{
   b432c:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b432e:	4e13      	ldr	r6, [pc, #76]	; (b437c <_Z22publishStateTransitionv+0x50>)
   b4330:	4c13      	ldr	r4, [pc, #76]	; (b4380 <_Z22publishStateTransitionv+0x54>)
   b4332:	7832      	ldrb	r2, [r6, #0]
   b4334:	4d13      	ldr	r5, [pc, #76]	; (b4384 <_Z22publishStateTransitionv+0x58>)
   b4336:	2a02      	cmp	r2, #2
{
   b4338:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b433a:	d117      	bne.n	b436c <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b433c:	f006 fde2 	bl	baf04 <_ZN9TimeClass7isValidEv>
   b4340:	7832      	ldrb	r2, [r6, #0]
   b4342:	782b      	ldrb	r3, [r5, #0]
   b4344:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4348:	9200      	str	r2, [sp, #0]
   b434a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b434e:	b998      	cbnz	r0, b4378 <_Z22publishStateTransitionv+0x4c>
   b4350:	4a0d      	ldr	r2, [pc, #52]	; (b4388 <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4352:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4356:	a802      	add	r0, sp, #8
   b4358:	f004 fa8a 	bl	b8870 <snprintf>
	oldState = state;
   b435c:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b435e:	480b      	ldr	r0, [pc, #44]	; (b438c <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b4360:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4362:	a902      	add	r1, sp, #8
   b4364:	f7ff ff02 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b4368:	b042      	add	sp, #264	; 0x108
   b436a:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b436c:	782b      	ldrb	r3, [r5, #0]
   b436e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4372:	9200      	str	r2, [sp, #0]
   b4374:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4378:	4a05      	ldr	r2, [pc, #20]	; (b4390 <_Z22publishStateTransitionv+0x64>)
   b437a:	e7ea      	b.n	b4352 <_Z22publishStateTransitionv+0x26>
   b437c:	2003df8a 	.word	0x2003df8a
   b4380:	2003dd74 	.word	0x2003dd74
   b4384:	2003df88 	.word	0x2003df88
   b4388:	000bc43f 	.word	0x000bc43f
   b438c:	2003e658 	.word	0x2003e658
   b4390:	000bc45f 	.word	0x000bc45f

000b4394 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b4394:	b530      	push	{r4, r5, lr}
   b4396:	b085      	sub	sp, #20
	unsigned long secondsToReturn = 0;
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b4398:	f000 fe66 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b439c:	f000 ff2f 	bl	b51fe <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b43a0:	4605      	mov	r5, r0
   	if (Time.isValid()) {
   b43a2:	f006 fdaf 	bl	baf04 <_ZN9TimeClass7isValidEv>
   b43a6:	4604      	mov	r4, r0
   b43a8:	b1d8      	cbz	r0, b43e2 <_Z21secondsUntilNextEventv+0x4e>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // Adding one second to reduce prospect of round tripping to IDLE
   b43aa:	f006 fdc8 	bl	baf3e <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b43ae:	243c      	movs	r4, #60	; 0x3c
   b43b0:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // Adding one second to reduce prospect of round tripping to IDLE
   b43b2:	fbb0 f4f5 	udiv	r4, r0, r5
   b43b6:	fb04 0015 	mls	r0, r4, r5, r0
   b43ba:	1a2c      	subs	r4, r5, r0
   b43bc:	42ac      	cmp	r4, r5
   b43be:	bf28      	it	cs
   b43c0:	462c      	movcs	r4, r5
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b43c2:	f006 fdbc 	bl	baf3e <_ZN9TimeClass3nowEv>
   b43c6:	4602      	mov	r2, r0
   b43c8:	17c3      	asrs	r3, r0, #31
   b43ca:	4668      	mov	r0, sp
   b43cc:	f006 fcb2 	bl	bad34 <_ZN9TimeClass7timeStrEx>
        Log.info("Time: %s and next event is %lu seconds away", Time.timeStr().c_str(), secondsToReturn);
   b43d0:	4806      	ldr	r0, [pc, #24]	; (b43ec <_Z21secondsUntilNextEventv+0x58>)
   b43d2:	9a00      	ldr	r2, [sp, #0]
   b43d4:	4906      	ldr	r1, [pc, #24]	; (b43f0 <_Z21secondsUntilNextEventv+0x5c>)
   b43d6:	4623      	mov	r3, r4
   b43d8:	f7ff fec8 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b43dc:	4668      	mov	r0, sp
   b43de:	f006 fab9 	bl	ba954 <_ZN6StringD1Ev>
    }
	return secondsToReturn + 10;		// Add an off-set - need to refine this later.
   b43e2:	f104 000a 	add.w	r0, r4, #10
   b43e6:	b005      	add	sp, #20
   b43e8:	bd30      	pop	{r4, r5, pc}
   b43ea:	bf00      	nop
   b43ec:	2003e658 	.word	0x2003e658
   b43f0:	000bc46d 	.word	0x000bc46d

000b43f4 <loop>:
void loop() {
   b43f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (state) {
   b43f8:	4db8      	ldr	r5, [pc, #736]	; (b46dc <loop+0x2e8>)
   b43fa:	782b      	ldrb	r3, [r5, #0]
   b43fc:	3b01      	subs	r3, #1
void loop() {
   b43fe:	b08a      	sub	sp, #40	; 0x28
   b4400:	2b03      	cmp	r3, #3
   b4402:	d812      	bhi.n	b442a <loop+0x36>
   b4404:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4408:	00040120 	.word	0x00040120
   b440c:	00df002a 	.word	0x00df002a
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4410:	4bb3      	ldr	r3, [pc, #716]	; (b46e0 <loop+0x2ec>)
   b4412:	781b      	ldrb	r3, [r3, #0]
   b4414:	2b02      	cmp	r3, #2
   b4416:	d001      	beq.n	b441c <loop+0x28>
   b4418:	f7ff ff88 	bl	b432c <_Z22publishStateTransitionv>
			if (current.get_alertCodeNode() != 0) state = ERROR_STATE;
   b441c:	f000 fe74 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4420:	f000 ff63 	bl	b52ea <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4424:	b1c0      	cbz	r0, b4458 <loop+0x64>
   b4426:	2301      	movs	r3, #1
			else state = LoRA_STATE;		   								// If time is valid - wake on the right minute of the hour
   b4428:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  							// Keeps the RTC synchronized with the Boron's clock
   b442a:	48ae      	ldr	r0, [pc, #696]	; (b46e4 <loop+0x2f0>)
   b442c:	f002 f912 	bl	b6654 <_ZN6AB18054loopEv>
	current.loop();
   b4430:	f000 fe6a 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4434:	f000 fe78 	bl	b5128 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4438:	f000 fe16 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b443c:	f000 fe3c 	bl	b50b8 <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {															// Count the pulse and reset for next
   b4440:	4ba9      	ldr	r3, [pc, #676]	; (b46e8 <loop+0x2f4>)
   b4442:	781a      	ldrb	r2, [r3, #0]
   b4444:	2a00      	cmp	r2, #0
   b4446:	f000 81d3 	beq.w	b47f0 <loop+0x3fc>
		sensorDetect = false;
   b444a:	2200      	movs	r2, #0
   b444c:	701a      	strb	r2, [r3, #0]
}
   b444e:	b00a      	add	sp, #40	; 0x28
   b4450:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		recordCount();
   b4454:	f001 ba84 	b.w	b5960 <_Z11recordCountv>
			else state = LoRA_STATE;		   								// If time is valid - wake on the right minute of the hour
   b4458:	2304      	movs	r3, #4
   b445a:	e7e5      	b.n	b4428 <loop+0x34>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b445c:	4ba0      	ldr	r3, [pc, #640]	; (b46e0 <loop+0x2ec>)
   b445e:	781b      	ldrb	r3, [r3, #0]
   b4460:	2b03      	cmp	r3, #3
   b4462:	d001      	beq.n	b4468 <loop+0x74>
   b4464:	f7ff ff62 	bl	b432c <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4468:	2100      	movs	r1, #0
   b446a:	489e      	ldr	r0, [pc, #632]	; (b46e4 <loop+0x2f0>)
   b446c:	f001 fd46 	bl	b5efc <_ZN6AB18056setWDTEi>
			wakeInSeconds = secondsUntilNextEvent();							// Figure out how long to sleep 
   b4470:	f7ff ff90 	bl	b4394 <_Z21secondsUntilNextEventv>
   b4474:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b4476:	f006 fd45 	bl	baf04 <_ZN9TimeClass7isValidEv>
   b447a:	4604      	mov	r4, r0
   b447c:	2800      	cmp	r0, #0
   b447e:	d035      	beq.n	b44ec <loop+0xf8>
   b4480:	f006 fd5d 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4484:	19c2      	adds	r2, r0, r7
   b4486:	17d3      	asrs	r3, r2, #31
   b4488:	a806      	add	r0, sp, #24
   b448a:	f006 fc53 	bl	bad34 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b448e:	9b06      	ldr	r3, [sp, #24]
   b4490:	4996      	ldr	r1, [pc, #600]	; (b46ec <loop+0x2f8>)
   b4492:	4897      	ldr	r0, [pc, #604]	; (b46f0 <loop+0x2fc>)
   b4494:	463a      	mov	r2, r7
   b4496:	f7ff fe69 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b449a:	b114      	cbz	r4, b44a2 <loop+0xae>
   b449c:	a806      	add	r0, sp, #24
   b449e:	f006 fa59 	bl	ba954 <_ZN6StringD1Ev>
        if (valid_) {
   b44a2:	4b94      	ldr	r3, [pc, #592]	; (b46f4 <loop+0x300>)
   b44a4:	7d19      	ldrb	r1, [r3, #20]
			state = IDLE_STATE;
   b44a6:	2202      	movs	r2, #2
   b44a8:	702a      	strb	r2, [r5, #0]
   b44aa:	b101      	cbz	r1, b44ae <loop+0xba>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b44ac:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b44ae:	4b92      	ldr	r3, [pc, #584]	; (b46f8 <loop+0x304>)
   b44b0:	4890      	ldr	r0, [pc, #576]	; (b46f4 <loop+0x300>)
   b44b2:	f8b3 9000 	ldrh.w	r9, [r3]
   b44b6:	2200      	movs	r2, #0
   b44b8:	4649      	mov	r1, r9
   b44ba:	f7ff fe23 	bl	b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b44be:	4b8f      	ldr	r3, [pc, #572]	; (b46fc <loop+0x308>)
   b44c0:	f8b3 a000 	ldrh.w	sl, [r3]
   b44c4:	2201      	movs	r2, #1
   b44c6:	4651      	mov	r1, sl
   b44c8:	f7ff fe1c 	bl	b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b44cc:	7d03      	ldrb	r3, [r0, #20]
   b44ce:	4606      	mov	r6, r0
   b44d0:	b313      	cbz	r3, b4518 <loop+0x124>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b44d2:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b44d4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b44d8:	68db      	ldr	r3, [r3, #12]
   b44da:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b44de:	b13b      	cbz	r3, b44f0 <loop+0xfc>
            if (start->type == type) {
   b44e0:	889a      	ldrh	r2, [r3, #4]
   b44e2:	2a04      	cmp	r2, #4
   b44e4:	f000 8181 	beq.w	b47ea <loop+0x3f6>
            start = start->next;
   b44e8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b44ea:	e7f8      	b.n	b44de <loop+0xea>
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b44ec:	4b84      	ldr	r3, [pc, #528]	; (b4700 <loop+0x30c>)
   b44ee:	e7cf      	b.n	b4490 <loop+0x9c>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b44f0:	4984      	ldr	r1, [pc, #528]	; (b4704 <loop+0x310>)
   b44f2:	2010      	movs	r0, #16
   b44f4:	f007 f82c 	bl	bb550 <_ZnwjRKSt9nothrow_t>
   b44f8:	4604      	mov	r4, r0
   b44fa:	2800      	cmp	r0, #0
   b44fc:	f000 8173 	beq.w	b47e6 <loop+0x3f2>
   b4500:	2210      	movs	r2, #16
   b4502:	2100      	movs	r1, #0
   b4504:	f007 fd5a 	bl	bbfbc <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4508:	4b7f      	ldr	r3, [pc, #508]	; (b4708 <loop+0x314>)
   b450a:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b450c:	2304      	movs	r3, #4
   b450e:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4510:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b4512:	e9c4 3802 	strd	r3, r8, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4516:	6134      	str	r4, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4518:	4976      	ldr	r1, [pc, #472]	; (b46f4 <loop+0x300>)
   b451a:	a803      	add	r0, sp, #12
   b451c:	f006 fb26 	bl	bab6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4524:	486f      	ldr	r0, [pc, #444]	; (b46e4 <loop+0x2f0>)
   b4526:	f001 fce9 	bl	b5efc <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b452a:	2000      	movs	r0, #0
   b452c:	f003 fe9c 	bl	b8268 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4530:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4534:	4604      	mov	r4, r0
   b4536:	2000      	movs	r0, #0
   b4538:	f003 fe96 	bl	b8268 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b453c:	1b00      	subs	r0, r0, r4
   b453e:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4542:	42b0      	cmp	r0, r6
   b4544:	f171 0300 	sbcs.w	r3, r1, #0
   b4548:	d207      	bcs.n	b455a <loop+0x166>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b454a:	f006 fddf 	bl	bb10c <_Z16_fetch_usbserialv>
   b454e:	f006 fdd2 	bl	bb0f6 <_ZN9USBSerial11isConnectedEv>
   b4552:	b910      	cbnz	r0, b455a <loop+0x166>
            spark_process();
   b4554:	f004 f8e4 	bl	b8720 <spark_process>
        while (_while() && !_condition()) {
   b4558:	e7ed      	b.n	b4536 <loop+0x142>
   b455a:	f006 fdd7 	bl	bb10c <_Z16_fetch_usbserialv>
   b455e:	f006 fdca 	bl	bb0f6 <_ZN9USBSerial11isConnectedEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4562:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b4564:	b333      	cbz	r3, b45b4 <loop+0x1c0>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4566:	889a      	ldrh	r2, [r3, #4]
   b4568:	2a01      	cmp	r2, #1
   b456a:	d123      	bne.n	b45b4 <loop+0x1c0>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b456c:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b456e:	4599      	cmp	r9, r3
   b4570:	d123      	bne.n	b45ba <loop+0x1c6>
				state = LoRA_STATE;
   b4572:	2304      	movs	r3, #4
				Log.info("Woke with user button - LoRA State");
   b4574:	4965      	ldr	r1, [pc, #404]	; (b470c <loop+0x318>)
   b4576:	485e      	ldr	r0, [pc, #376]	; (b46f0 <loop+0x2fc>)
				state = LoRA_STATE;
   b4578:	702b      	strb	r3, [r5, #0]
				Log.info("Woke with user button - LoRA State");
   b457a:	f7ff fdf7 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b457e:	f006 fcde 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4582:	19c2      	adds	r2, r0, r7
   b4584:	17d3      	asrs	r3, r2, #31
   b4586:	a806      	add	r0, sp, #24
   b4588:	f006 fbd4 	bl	bad34 <_ZN9TimeClass7timeStrEx>
   b458c:	9a06      	ldr	r2, [sp, #24]
   b458e:	9201      	str	r2, [sp, #4]
   b4590:	f006 fb4c 	bl	bac2c <_ZN11SystemClass10freeMemoryEv>
   b4594:	9a01      	ldr	r2, [sp, #4]
   b4596:	495e      	ldr	r1, [pc, #376]	; (b4710 <loop+0x31c>)
   b4598:	4603      	mov	r3, r0
   b459a:	4855      	ldr	r0, [pc, #340]	; (b46f0 <loop+0x2fc>)
   b459c:	f7ff fde6 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b45a0:	a806      	add	r0, sp, #24
   b45a2:	f006 f9d7 	bl	ba954 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b45a6:	9803      	ldr	r0, [sp, #12]
   b45a8:	2800      	cmp	r0, #0
   b45aa:	f43f af3e 	beq.w	b442a <loop+0x36>
            free(wakeupSource_);
   b45ae:	f004 f947 	bl	b8840 <free>
		} break;
   b45b2:	e73a      	b.n	b442a <loop+0x36>
            return std::numeric_limits<pin_t>::max();
   b45b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b45b8:	e7d9      	b.n	b456e <loop+0x17a>
			else if (result.wakeupPin() == INT_PIN) sensorDetect = true;
   b45ba:	459a      	cmp	sl, r3
   b45bc:	bf02      	ittt	eq
   b45be:	4b4a      	ldreq	r3, [pc, #296]	; (b46e8 <loop+0x2f4>)
   b45c0:	2201      	moveq	r2, #1
   b45c2:	701a      	strbeq	r2, [r3, #0]
   b45c4:	e7db      	b.n	b457e <loop+0x18a>
			if (state != oldState) {
   b45c6:	4b46      	ldr	r3, [pc, #280]	; (b46e0 <loop+0x2ec>)
   b45c8:	781b      	ldrb	r3, [r3, #0]
   b45ca:	2b04      	cmp	r3, #4
   b45cc:	d017      	beq.n	b45fe <loop+0x20a>
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b45ce:	f7ff fead 	bl	b432c <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();
   b45d2:	f000 f957 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b45d6:	f000 f9d7 	bl	b4988 <_ZN14LoRA_Functions11clearBufferEv>
				takeMeasurements();
   b45da:	f001 fad3 	bl	b5b84 <_Z16takeMeasurementsv>
				lastPublish = Time.now();
   b45de:	f006 fcae 	bl	baf3e <_ZN9TimeClass3nowEv>
   b45e2:	4b4c      	ldr	r3, [pc, #304]	; (b4714 <loop+0x320>)
   b45e4:	17c2      	asrs	r2, r0, #31
   b45e6:	e9c3 0200 	strd	r0, r2, [r3]
				if (!LoRA_Functions::instance().composeDataReportNode()) {
   b45ea:	f000 f94b 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b45ee:	f000 f9e1 	bl	b49b4 <_ZN14LoRA_Functions21composeDataReportNodeEv>
   b45f2:	b920      	cbnz	r0, b45fe <loop+0x20a>
					Log.info("Failed in data send");
   b45f4:	4948      	ldr	r1, [pc, #288]	; (b4718 <loop+0x324>)
				Log.info("Undefined Error State");
   b45f6:	483e      	ldr	r0, [pc, #248]	; (b46f0 <loop+0x2fc>)
   b45f8:	f7ff fdb8 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			break;
   b45fc:	e715      	b.n	b442a <loop+0x36>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b45fe:	f003 fe23 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
			while (millis() - startListening < 5000) {
   b4602:	f241 3687 	movw	r6, #4999	; 0x1387
   b4606:	4604      	mov	r4, r0
   b4608:	f003 fe1e 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b460c:	1b00      	subs	r0, r0, r4
   b460e:	42b0      	cmp	r0, r6
   b4610:	d814      	bhi.n	b463c <loop+0x248>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {		// Listen for acknowledgement
   b4612:	f000 f937 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b4616:	f000 fb7b 	bl	b4d10 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b461a:	2800      	cmp	r0, #0
   b461c:	d0f4      	beq.n	b4608 <loop+0x214>
					current.set_hourlyCount(0);										// Zero the hourly count
   b461e:	f000 fd73 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4622:	2100      	movs	r1, #0
   b4624:	f000 fe2f 	bl	b5286 <_ZN17currentStatusData15set_hourlyCountEt>
					sysStatus.set_lastConnection(Time.now());
   b4628:	f000 fd1e 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b462c:	4604      	mov	r4, r0
   b462e:	f006 fc86 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4632:	4602      	mov	r2, r0
   b4634:	17c3      	asrs	r3, r0, #31
   b4636:	4620      	mov	r0, r4
   b4638:	f000 ff1d 	bl	b5476 <_ZN13sysStatusData18set_lastConnectionEx>
			LoRA_Functions::instance().sleepLoRaRadio();						// Done with LoRA - put radio to sleep
   b463c:	f000 f922 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b4640:	f000 f9b2 	bl	b49a8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
			state = SLEEPING_STATE;
   b4644:	2303      	movs	r3, #3
   b4646:	e6ef      	b.n	b4428 <loop+0x34>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4648:	4b25      	ldr	r3, [pc, #148]	; (b46e0 <loop+0x2ec>)
   b464a:	781b      	ldrb	r3, [r3, #0]
   b464c:	2b01      	cmp	r3, #1
   b464e:	d001      	beq.n	b4654 <loop+0x260>
   b4650:	f7ff fe6c 	bl	b432c <_Z22publishStateTransitionv>
			switch (current.get_alertCodeNode())
   b4654:	f000 fd58 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4658:	f000 fe47 	bl	b52ea <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b465c:	2802      	cmp	r0, #2
   b465e:	d05d      	beq.n	b471c <loop+0x328>
   b4660:	2803      	cmp	r0, #3
   b4662:	f000 8096 	beq.w	b4792 <loop+0x39e>
   b4666:	2801      	cmp	r0, #1
   b4668:	f040 80bb 	bne.w	b47e2 <loop+0x3ee>
				if(LoRA_Functions::instance().composeJoinRequesttNode()) {
   b466c:	f000 f90a 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b4670:	f000 fabe 	bl	b4bf0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b4674:	2800      	cmp	r0, #0
   b4676:	f000 8086 	beq.w	b4786 <loop+0x392>
   b467a:	f003 fde5 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
							lastPublish = Time.now();
   b467e:	4f25      	ldr	r7, [pc, #148]	; (b4714 <loop+0x320>)
   b4680:	4606      	mov	r6, r0
					while (millis() - startListening < 3000) {
   b4682:	f640 38b7 	movw	r8, #2999	; 0xbb7
   b4686:	f003 fddf 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b468a:	1b80      	subs	r0, r0, r6
   b468c:	4540      	cmp	r0, r8
   b468e:	d87a      	bhi.n	b4786 <loop+0x392>
						if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b4690:	f000 f8f8 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b4694:	f000 fb3c 	bl	b4d10 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4698:	2800      	cmp	r0, #0
   b469a:	d0f4      	beq.n	b4686 <loop+0x292>
							lastPublish = Time.now();
   b469c:	f006 fc4f 	bl	baf3e <_ZN9TimeClass3nowEv>
   b46a0:	17c3      	asrs	r3, r0, #31
   b46a2:	e9c7 0300 	strd	r0, r3, [r7]
							sysStatus.set_lastConnection(Time.now());
   b46a6:	f000 fcdf 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b46aa:	4604      	mov	r4, r0
   b46ac:	f006 fc47 	bl	baf3e <_ZN9TimeClass3nowEv>
   b46b0:	4602      	mov	r2, r0
   b46b2:	17c3      	asrs	r3, r0, #31
   b46b4:	4620      	mov	r0, r4
   b46b6:	f000 fede 	bl	b5476 <_ZN13sysStatusData18set_lastConnectionEx>
							current.set_alertTimestampNode(Time.now());
   b46ba:	f000 fd25 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b46be:	4604      	mov	r4, r0
   b46c0:	f006 fc3d 	bl	baf3e <_ZN9TimeClass3nowEv>
   b46c4:	4602      	mov	r2, r0
   b46c6:	17c3      	asrs	r3, r0, #31
   b46c8:	4620      	mov	r0, r4
   b46ca:	f000 fede 	bl	b548a <_ZN17currentStatusData22set_alertTimestampNodeEx>
							current.set_alertCodeNode(0);
   b46ce:	f000 fd1b 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b46d2:	2100      	movs	r1, #0
   b46d4:	f000 fe44 	bl	b5360 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b46d8:	e7d5      	b.n	b4686 <loop+0x292>
   b46da:	bf00      	nop
   b46dc:	2003df8a 	.word	0x2003df8a
   b46e0:	2003df88 	.word	0x2003df88
   b46e4:	2003df44 	.word	0x2003df44
   b46e8:	2003df89 	.word	0x2003df89
   b46ec:	000bc499 	.word	0x000bc499
   b46f0:	2003e658 	.word	0x2003e658
   b46f4:	2003df64 	.word	0x2003df64
   b46f8:	000bc9ae 	.word	0x000bc9ae
   b46fc:	000bc9b0 	.word	0x000bc9b0
   b4700:	000bcab8 	.word	0x000bcab8
   b4704:	000bd3e8 	.word	0x000bd3e8
   b4708:	00030010 	.word	0x00030010
   b470c:	000bc4c2 	.word	0x000bc4c2
   b4710:	000bc4e5 	.word	0x000bc4e5
   b4714:	2003df80 	.word	0x2003df80
   b4718:	000bc506 	.word	0x000bc506
				if(LoRA_Functions::instance().composeAlertReportNode()) {
   b471c:	f000 f8b2 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b4720:	f000 fb82 	bl	b4e28 <_ZN14LoRA_Functions22composeAlertReportNodeEv>
   b4724:	b378      	cbz	r0, b4786 <loop+0x392>
   b4726:	f003 fd8f 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
							lastPublish = Time.now();
   b472a:	4f33      	ldr	r7, [pc, #204]	; (b47f8 <loop+0x404>)
   b472c:	4606      	mov	r6, r0
					while (millis() - startListening < 3000) {
   b472e:	f640 38b7 	movw	r8, #2999	; 0xbb7
   b4732:	f003 fd89 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b4736:	1b80      	subs	r0, r0, r6
   b4738:	4540      	cmp	r0, r8
   b473a:	d824      	bhi.n	b4786 <loop+0x392>
						if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b473c:	f000 f8a2 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b4740:	f000 fae6 	bl	b4d10 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4744:	2800      	cmp	r0, #0
   b4746:	d0f4      	beq.n	b4732 <loop+0x33e>
							lastPublish = Time.now();
   b4748:	f006 fbf9 	bl	baf3e <_ZN9TimeClass3nowEv>
   b474c:	17c3      	asrs	r3, r0, #31
   b474e:	e9c7 0300 	strd	r0, r3, [r7]
							sysStatus.set_lastConnection(Time.now());
   b4752:	f000 fc89 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4756:	4604      	mov	r4, r0
   b4758:	f006 fbf1 	bl	baf3e <_ZN9TimeClass3nowEv>
   b475c:	4602      	mov	r2, r0
   b475e:	17c3      	asrs	r3, r0, #31
   b4760:	4620      	mov	r0, r4
   b4762:	f000 fe88 	bl	b5476 <_ZN13sysStatusData18set_lastConnectionEx>
							current.set_alertTimestampNode(Time.now());
   b4766:	f000 fccf 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b476a:	4604      	mov	r4, r0
   b476c:	f006 fbe7 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4770:	4602      	mov	r2, r0
   b4772:	17c3      	asrs	r3, r0, #31
   b4774:	4620      	mov	r0, r4
   b4776:	f000 fe88 	bl	b548a <_ZN17currentStatusData22set_alertTimestampNodeEx>
							current.set_alertCodeNode(0);
   b477a:	f000 fcc5 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b477e:	2100      	movs	r1, #0
   b4780:	f000 fdee 	bl	b5360 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b4784:	e7d5      	b.n	b4732 <loop+0x33e>
				LoRA_Functions::instance().sleepLoRaRadio();					// Done for now, put radio to sleep
   b4786:	f000 f87d 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b478a:	f000 f90d 	bl	b49a8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				state = IDLE_STATE;
   b478e:	2302      	movs	r3, #2
   b4790:	e64a      	b.n	b4428 <loop+0x34>
				static system_tick_t enteredState = millis();
   b4792:	4c1a      	ldr	r4, [pc, #104]	; (b47fc <loop+0x408>)
   b4794:	4d1a      	ldr	r5, [pc, #104]	; (b4800 <loop+0x40c>)
   b4796:	7823      	ldrb	r3, [r4, #0]
   b4798:	f3bf 8f5b 	dmb	ish
   b479c:	f013 0f01 	tst.w	r3, #1
   b47a0:	d109      	bne.n	b47b6 <loop+0x3c2>
   b47a2:	4620      	mov	r0, r4
   b47a4:	f7ff fc8a 	bl	b40bc <__cxa_guard_acquire>
   b47a8:	b128      	cbz	r0, b47b6 <loop+0x3c2>
   b47aa:	f003 fd4d 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b47ae:	6028      	str	r0, [r5, #0]
   b47b0:	4620      	mov	r0, r4
   b47b2:	f7ff fc88 	bl	b40c6 <__cxa_guard_release>
   b47b6:	f003 fd47 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b47ba:	682b      	ldr	r3, [r5, #0]
   b47bc:	1ac0      	subs	r0, r0, r3
   b47be:	f247 5330 	movw	r3, #30000	; 0x7530
   b47c2:	4298      	cmp	r0, r3
   b47c4:	f67f ae31 	bls.w	b442a <loop+0x36>
					Log.info("Resetting device");
   b47c8:	490e      	ldr	r1, [pc, #56]	; (b4804 <loop+0x410>)
   b47ca:	480f      	ldr	r0, [pc, #60]	; (b4808 <loop+0x414>)
   b47cc:	f7ff fcce 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
					delay(2000);
   b47d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b47d4:	f004 f89c 	bl	b8910 <delay>
					ab1805.deepPowerDown();
   b47d8:	211e      	movs	r1, #30
   b47da:	480c      	ldr	r0, [pc, #48]	; (b480c <loop+0x418>)
   b47dc:	f001 fce8 	bl	b61b0 <_ZN6AB180513deepPowerDownEi>
   b47e0:	e623      	b.n	b442a <loop+0x36>
				Log.info("Undefined Error State");
   b47e2:	490b      	ldr	r1, [pc, #44]	; (b4810 <loop+0x41c>)
   b47e4:	e707      	b.n	b45f6 <loop+0x202>
                valid_ = false;
   b47e6:	7530      	strb	r0, [r6, #20]
                return *this;
   b47e8:	e696      	b.n	b4518 <loop+0x124>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b47ea:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b47ee:	e693      	b.n	b4518 <loop+0x124>
}
   b47f0:	b00a      	add	sp, #40	; 0x28
   b47f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b47f6:	bf00      	nop
   b47f8:	2003df80 	.word	0x2003df80
   b47fc:	2003df38 	.word	0x2003df38
   b4800:	2003df3c 	.word	0x2003df3c
   b4804:	000bc51a 	.word	0x000bc51a
   b4808:	2003e658 	.word	0x2003e658
   b480c:	2003df44 	.word	0x2003df44
   b4810:	000bc52b 	.word	0x000bc52b

000b4814 <_GLOBAL__sub_I___appProductVersion>:
   b4814:	b508      	push	{r3, lr}
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4816:	f006 fd3b 	bl	bb290 <spark_protocol_instance>
   b481a:	2300      	movs	r3, #0
   b481c:	461a      	mov	r2, r3
   b481e:	4619      	mov	r1, r3
   b4820:	f006 fd46 	bl	bb2b0 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4824:	f006 fd34 	bl	bb290 <spark_protocol_instance>
   b4828:	2300      	movs	r3, #0
   b482a:	461a      	mov	r2, r3
   b482c:	210d      	movs	r1, #13
   b482e:	f006 fd37 	bl	bb2a0 <spark_protocol_set_product_id>
        : config_(config) {
   b4832:	4b0c      	ldr	r3, [pc, #48]	; (b4864 <_GLOBAL__sub_I___appProductVersion+0x50>)
   b4834:	1d1a      	adds	r2, r3, #4
   b4836:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4838:	4a0b      	ldr	r2, [pc, #44]	; (b4868 <_GLOBAL__sub_I___appProductVersion+0x54>)
   b483a:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b483c:	2200      	movs	r2, #0
   b483e:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b4842:	611a      	str	r2, [r3, #16]
   b4844:	2201      	movs	r2, #1
   b4846:	751a      	strb	r2, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4848:	f006 fdfa 	bl	bb440 <_Z19__fetch_global_Wirev>
   b484c:	2269      	movs	r2, #105	; 0x69
   b484e:	4601      	mov	r1, r0
   b4850:	4806      	ldr	r0, [pc, #24]	; (b486c <_GLOBAL__sub_I___appProductVersion+0x58>)
   b4852:	f001 fa55 	bl	b5d00 <_ZN6AB1805C1ER7TwoWireh>
time_t lastPublish = Time.now();
   b4856:	f006 fb72 	bl	baf3e <_ZN9TimeClass3nowEv>
   b485a:	4b05      	ldr	r3, [pc, #20]	; (b4870 <_GLOBAL__sub_I___appProductVersion+0x5c>)
   b485c:	17c2      	asrs	r2, r0, #31
   b485e:	e9c3 0200 	strd	r0, r2, [r3]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	2003df64 	.word	0x2003df64
   b4868:	00030010 	.word	0x00030010
   b486c:	2003df44 	.word	0x2003df44
   b4870:	2003df80 	.word	0x2003df80

000b4874 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4874:	4770      	bx	lr

000b4876 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b4876:	b510      	push	{r4, lr}
}
   b4878:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b487a:	4604      	mov	r4, r0
}
   b487c:	f7ff fc0f 	bl	b409e <_ZdlPvj>
   b4880:	4620      	mov	r0, r4
   b4882:	bd10      	pop	{r4, pc}

000b4884 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4884:	b510      	push	{r4, lr}
    if (!_instance) {
   b4886:	4c06      	ldr	r4, [pc, #24]	; (b48a0 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4888:	6823      	ldr	r3, [r4, #0]
   b488a:	b933      	cbnz	r3, b489a <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b488c:	2004      	movs	r0, #4
   b488e:	f7ff fc02 	bl	b4096 <_Znwj>
   b4892:	b108      	cbz	r0, b4898 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4894:	4b03      	ldr	r3, [pc, #12]	; (b48a4 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4896:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4898:	6020      	str	r0, [r4, #0]
}
   b489a:	6820      	ldr	r0, [r4, #0]
   b489c:	bd10      	pop	{r4, pc}
   b489e:	bf00      	nop
   b48a0:	2003df90 	.word	0x2003df90
   b48a4:	000bc8d8 	.word	0x000bc8d8

000b48a8 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b48a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b48aa:	4830      	ldr	r0, [pc, #192]	; (b496c <_ZN14LoRA_Functions5setupEb+0xc4>)
bool LoRA_Functions::setup(bool gatewayID) {
   b48ac:	460d      	mov	r5, r1
	if (!manager.init()) {
   b48ae:	f002 fe3e 	bl	b752e <_ZN8RHRouter4initEv>
   b48b2:	4604      	mov	r4, r0
   b48b4:	b930      	cbnz	r0, b48c4 <_ZN14LoRA_Functions5setupEb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b48b6:	492e      	ldr	r1, [pc, #184]	; (b4970 <_ZN14LoRA_Functions5setupEb+0xc8>)
   b48b8:	482e      	ldr	r0, [pc, #184]	; (b4974 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b48ba:	f7ff fc57 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>

	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
	return true;
}
   b48be:	4620      	mov	r0, r4
   b48c0:	b004      	add	sp, #16
   b48c2:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b48c4:	ed9f 0a2c 	vldr	s0, [pc, #176]	; b4978 <_ZN14LoRA_Functions5setupEb+0xd0>
   b48c8:	482c      	ldr	r0, [pc, #176]	; (b497c <_ZN14LoRA_Functions5setupEb+0xd4>)
   b48ca:	f003 f931 	bl	b7b30 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b48ce:	2200      	movs	r2, #0
   b48d0:	2117      	movs	r1, #23
   b48d2:	482a      	ldr	r0, [pc, #168]	; (b497c <_ZN14LoRA_Functions5setupEb+0xd4>)
   b48d4:	f003 faa6 	bl	b7e24 <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.get_structuresVersion() == 128)) {    	// This will be our indication that the deviceID and nodeID has not yet been set
   b48d8:	f000 fbc6 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b48dc:	f000 fcf1 	bl	b52c2 <_ZNK13sysStatusData21get_structuresVersionEv>
   b48e0:	2880      	cmp	r0, #128	; 0x80
   b48e2:	d022      	beq.n	b492a <_ZN14LoRA_Functions5setupEb+0x82>
		randomSeed(sysStatus.get_lastConnection());			// 32-bit number for seed
   b48e4:	f000 fbc0 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b48e8:	f000 fd97 	bl	b541a <_ZNK13sysStatusData18get_lastConnectionEv>
   b48ec:	f005 ff63 	bl	ba7b6 <_Z10randomSeedj>
		sysStatus.set_deviceID(random(1,65535));			// 16-bit number for deviceID
   b48f0:	f000 fbba 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b48f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b48f8:	4606      	mov	r6, r0
   b48fa:	2001      	movs	r0, #1
   b48fc:	f005 ff51 	bl	ba7a2 <_Z6randomii>
   b4900:	b281      	uxth	r1, r0
   b4902:	4630      	mov	r0, r6
   b4904:	f000 fcad 	bl	b5262 <_ZN13sysStatusData12set_deviceIDEt>
		if (!gatewayID) sysStatus.set_nodeNumber(random(10,255));		// Random number in - unconfigured - range will trigger a Join request
   b4908:	bb65      	cbnz	r5, b4964 <_ZN14LoRA_Functions5setupEb+0xbc>
   b490a:	f000 fbad 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b490e:	21ff      	movs	r1, #255	; 0xff
   b4910:	4605      	mov	r5, r0
   b4912:	200a      	movs	r0, #10
   b4914:	f005 ff45 	bl	ba7a2 <_Z6randomii>
   b4918:	b281      	uxth	r1, r0
   b491a:	4628      	mov	r0, r5
		else sysStatus.set_nodeNumber(0);
   b491c:	f000 fca7 	bl	b526e <_ZN13sysStatusData14set_nodeNumberEt>
		sysStatus.set_structuresVersion(128);			// Set the structure to the magic number so we can have a stable deviceID
   b4920:	f000 fba2 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4924:	2180      	movs	r1, #128	; 0x80
   b4926:	f000 fd03 	bl	b5330 <_ZN13sysStatusData21set_structuresVersionEh>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
   b492a:	f000 fb9d 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b492e:	f000 fc61 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4932:	b2c1      	uxtb	r1, r0
   b4934:	4812      	ldr	r0, [pc, #72]	; (b4980 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4936:	f002 f926 	bl	b6b86 <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
   b493a:	4811      	ldr	r0, [pc, #68]	; (b4980 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b493c:	f002 f909 	bl	b6b52 <_ZN10RHDatagram11thisAddressEv>
   b4940:	9003      	str	r0, [sp, #12]
   b4942:	f000 fb91 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4946:	f000 fc50 	bl	b51ea <_ZNK13sysStatusData12get_deviceIDEv>
   b494a:	9002      	str	r0, [sp, #8]
   b494c:	f000 fb8c 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4950:	f000 fcb7 	bl	b52c2 <_ZNK13sysStatusData21get_structuresVersionEv>
   b4954:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b4958:	9000      	str	r0, [sp, #0]
   b495a:	490a      	ldr	r1, [pc, #40]	; (b4984 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b495c:	4805      	ldr	r0, [pc, #20]	; (b4974 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b495e:	f7ff fc05 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	return true;
   b4962:	e7ac      	b.n	b48be <_ZN14LoRA_Functions5setupEb+0x16>
		else sysStatus.set_nodeNumber(0);
   b4964:	f000 fb80 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4968:	2100      	movs	r1, #0
   b496a:	e7d7      	b.n	b491c <_ZN14LoRA_Functions5setupEb+0x74>
   b496c:	2003e1cc 	.word	0x2003e1cc
   b4970:	000bc541 	.word	0x000bc541
   b4974:	2003e658 	.word	0x2003e658
   b4978:	4464c000 	.word	0x4464c000
   b497c:	2003e09c 	.word	0x2003e09c
   b4980:	2003e1d0 	.word	0x2003e1d0
   b4984:	000bc54d 	.word	0x000bc54d

000b4988 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4988:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b498a:	4c06      	ldr	r4, [pc, #24]	; (b49a4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b498c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b498e:	f10d 0203 	add.w	r2, sp, #3
   b4992:	a901      	add	r1, sp, #4
   b4994:	4620      	mov	r0, r4
   b4996:	f003 f863 	bl	b7a60 <_ZN7RH_RF954recvEPhS0_>
   b499a:	2800      	cmp	r0, #0
   b499c:	d1f7      	bne.n	b498e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b499e:	b040      	add	sp, #256	; 0x100
   b49a0:	bd10      	pop	{r4, pc}
   b49a2:	bf00      	nop
   b49a4:	2003e09c 	.word	0x2003e09c

000b49a8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b49a8:	4801      	ldr	r0, [pc, #4]	; (b49b0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b49aa:	f003 b822 	b.w	b79f2 <_ZN7RH_RF955sleepEv>
   b49ae:	bf00      	nop
   b49b0:	2003e09c 	.word	0x2003e09c

000b49b4 <_ZN14LoRA_Functions21composeDataReportNodeEv>:
	static int attempts = 0;
	static int success = 0;
	static uint8_t msgCnt = 0;


	digitalWrite(BLUE_LED,HIGH);
   b49b4:	4b80      	ldr	r3, [pc, #512]	; (b4bb8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x204>)
bool LoRA_Functions::composeDataReportNode() {
   b49b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(BLUE_LED,HIGH);
   b49ba:	f8b3 a000 	ldrh.w	sl, [r3]
	attempts++;
	msgCnt++;
   b49be:	4f7f      	ldr	r7, [pc, #508]	; (b4bbc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x208>)
	attempts++;
   b49c0:	4e7f      	ldr	r6, [pc, #508]	; (b4bc0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x20c>)
	Log.info("Sending data %d report to Gateway",msgCnt);

	buf[0] = highByte(sysStatus.get_deviceID());					// Set for device
   b49c2:	4c80      	ldr	r4, [pc, #512]	; (b4bc4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x210>)
	digitalWrite(BLUE_LED,HIGH);
   b49c4:	2101      	movs	r1, #1
   b49c6:	4650      	mov	r0, sl
   b49c8:	f006 fcc9 	bl	bb35e <digitalWrite>
	msgCnt++;
   b49cc:	783a      	ldrb	r2, [r7, #0]
	attempts++;
   b49ce:	6833      	ldr	r3, [r6, #0]
	Log.info("Sending data %d report to Gateway",msgCnt);
   b49d0:	497d      	ldr	r1, [pc, #500]	; (b4bc8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x214>)
   b49d2:	487e      	ldr	r0, [pc, #504]	; (b4bcc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x218>)
	msgCnt++;
   b49d4:	3201      	adds	r2, #1
	attempts++;
   b49d6:	3301      	adds	r3, #1
	msgCnt++;
   b49d8:	b2d2      	uxtb	r2, r2
   b49da:	703a      	strb	r2, [r7, #0]
	attempts++;
   b49dc:	6033      	str	r3, [r6, #0]
	Log.info("Sending data %d report to Gateway",msgCnt);
   b49de:	f7ff fbc5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_deviceID());					// Set for device
   b49e2:	f000 fb41 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b49e6:	f000 fc00 	bl	b51ea <_ZNK13sysStatusData12get_deviceIDEv>
   b49ea:	0a00      	lsrs	r0, r0, #8
   b49ec:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b49ee:	f000 fb3b 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b49f2:	f000 fbfa 	bl	b51ea <_ZNK13sysStatusData12get_deviceIDEv>
   b49f6:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());				// NodeID for verification
   b49f8:	f000 fb36 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b49fc:	f000 fbfa 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4a00:	0a00      	lsrs	r0, r0, #8
   b4a02:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());				
   b4a04:	f000 fb30 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4a08:	f000 fbf4 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
	buf[4] = 1;						// Set for code release - fix later
   b4a0c:	2501      	movs	r5, #1
	buf[3] = lowByte(sysStatus.get_nodeNumber());				
   b4a0e:	70e0      	strb	r0, [r4, #3]
	buf[4] = 1;						// Set for code release - fix later
   b4a10:	7125      	strb	r5, [r4, #4]
	buf[5] = highByte(current.get_hourlyCount());
   b4a12:	f000 fb79 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4a16:	f000 fbfc 	bl	b5212 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4a1a:	0a00      	lsrs	r0, r0, #8
   b4a1c:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(current.get_hourlyCount()); 
   b4a1e:	f000 fb73 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4a22:	f000 fbf6 	bl	b5212 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4a26:	71a0      	strb	r0, [r4, #6]
	buf[7] = highByte(current.get_dailyCount());
   b4a28:	f000 fb6e 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4a2c:	f000 fbf6 	bl	b521c <_ZNK17currentStatusData14get_dailyCountEv>
   b4a30:	0a00      	lsrs	r0, r0, #8
   b4a32:	71e0      	strb	r0, [r4, #7]
	buf[8] = lowByte(current.get_dailyCount()); 
   b4a34:	f000 fb68 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4a38:	f000 fbf0 	bl	b521c <_ZNK17currentStatusData14get_dailyCountEv>
   b4a3c:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_internalTempC();
   b4a3e:	f000 fb63 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4a42:	f000 fc48 	bl	b52d6 <_ZNK17currentStatusData17get_internalTempCEv>
   b4a46:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_stateOfCharge();
   b4a48:	f000 fb5e 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4a4c:	f000 fb78 	bl	b5140 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4a50:	ec51 0b10 	vmov	r0, r1, d0
   b4a54:	f007 fa18 	bl	bbe88 <__aeabi_d2uiz>
   b4a58:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_batteryState();	
   b4a5a:	f000 fb55 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4a5e:	f000 fc3f 	bl	b52e0 <_ZNK17currentStatusData16get_batteryStateEv>
   b4a62:	72e0      	strb	r0, [r4, #11]
	buf[12] = sysStatus.get_resetCount();
   b4a64:	f000 fb00 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4a68:	f000 fc30 	bl	b52cc <_ZNK13sysStatusData14get_resetCountEv>
	buf[13] = 1;				// reserved for later
   b4a6c:	7365      	strb	r5, [r4, #13]
	buf[12] = sysStatus.get_resetCount();
   b4a6e:	7320      	strb	r0, [r4, #12]
	buf[14] = highByte(driver.lastRssi());
   b4a70:	4857      	ldr	r0, [pc, #348]	; (b4bd0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x21c>)
   b4a72:	f002 f906 	bl	b6c82 <_ZN15RHGenericDriver8lastRssiEv>
   b4a76:	1200      	asrs	r0, r0, #8
   b4a78:	73a0      	strb	r0, [r4, #14]
	buf[15] = lowByte(driver.lastRssi()); 
   b4a7a:	4855      	ldr	r0, [pc, #340]	; (b4bd0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x21c>)
   b4a7c:	f002 f901 	bl	b6c82 <_ZN15RHGenericDriver8lastRssiEv>
	buf[16] = msgCnt;
   b4a80:	783b      	ldrb	r3, [r7, #0]
   b4a82:	7423      	strb	r3, [r4, #16]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	unsigned char result = manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT);
   b4a84:	2303      	movs	r3, #3
	buf[15] = lowByte(driver.lastRssi()); 
   b4a86:	73e0      	strb	r0, [r4, #15]
	unsigned char result = manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT);
   b4a88:	4621      	mov	r1, r4
   b4a8a:	9300      	str	r3, [sp, #0]
   b4a8c:	4851      	ldr	r0, [pc, #324]	; (b4bd4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x220>)
   b4a8e:	4f52      	ldr	r7, [pc, #328]	; (b4bd8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x224>)
   b4a90:	2300      	movs	r3, #0
   b4a92:	2211      	movs	r2, #17
   b4a94:	f002 fb10 	bl	b70b8 <_ZN6RHMesh10sendtoWaitEPhhhh>
	
	if ( result == RH_ROUTER_ERROR_NONE) {
   b4a98:	4604      	mov	r4, r0
   b4a9a:	bb48      	cbnz	r0, b4af0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x13c>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		success++;
   b4a9c:	683b      	ldr	r3, [r7, #0]
   b4a9e:	442b      	add	r3, r5
   b4aa0:	603b      	str	r3, [r7, #0]
		Log.info("Node %d - Data report send to gateway %d successfully - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4aa2:	f000 fae1 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4aa6:	f000 fba5 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4aaa:	4683      	mov	fp, r0
   b4aac:	6838      	ldr	r0, [r7, #0]
   b4aae:	f006 fea9 	bl	bb804 <__aeabi_i2d>
   b4ab2:	4680      	mov	r8, r0
   b4ab4:	6830      	ldr	r0, [r6, #0]
   b4ab6:	4689      	mov	r9, r1
   b4ab8:	f006 fea4 	bl	bb804 <__aeabi_i2d>
   b4abc:	4602      	mov	r2, r0
   b4abe:	460b      	mov	r3, r1
   b4ac0:	4640      	mov	r0, r8
   b4ac2:	4649      	mov	r1, r9
   b4ac4:	f007 f832 	bl	bbb2c <__aeabi_ddiv>
   b4ac8:	4b44      	ldr	r3, [pc, #272]	; (b4bdc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x228>)
   b4aca:	2200      	movs	r2, #0
   b4acc:	f006 ff04 	bl	bb8d8 <__aeabi_dmul>
   b4ad0:	4623      	mov	r3, r4
   b4ad2:	e9cd 0100 	strd	r0, r1, [sp]
   b4ad6:	465a      	mov	r2, fp
   b4ad8:	4941      	ldr	r1, [pc, #260]	; (b4be0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x22c>)
   b4ada:	483c      	ldr	r0, [pc, #240]	; (b4bcc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x218>)
   b4adc:	f7ff fb46 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4ae0:	4650      	mov	r0, sl
   b4ae2:	4621      	mov	r1, r4
   b4ae4:	f006 fc3b 	bl	bb35e <digitalWrite>
		return true;
   b4ae8:	4628      	mov	r0, r5
	else  {
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}
   b4aea:	b003      	add	sp, #12
   b4aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b4af0:	2802      	cmp	r0, #2
   b4af2:	d124      	bne.n	b4b3e <_ZN14LoRA_Functions21composeDataReportNodeEv+0x18a>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4af4:	f000 fab8 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4af8:	f000 fb7c 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4afc:	4604      	mov	r4, r0
   b4afe:	6838      	ldr	r0, [r7, #0]
   b4b00:	f006 fe80 	bl	bb804 <__aeabi_i2d>
   b4b04:	4680      	mov	r8, r0
   b4b06:	6830      	ldr	r0, [r6, #0]
   b4b08:	4689      	mov	r9, r1
   b4b0a:	f006 fe7b 	bl	bb804 <__aeabi_i2d>
   b4b0e:	4602      	mov	r2, r0
   b4b10:	460b      	mov	r3, r1
   b4b12:	4640      	mov	r0, r8
   b4b14:	4649      	mov	r1, r9
   b4b16:	f007 f809 	bl	bbb2c <__aeabi_ddiv>
   b4b1a:	4b30      	ldr	r3, [pc, #192]	; (b4bdc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x228>)
   b4b1c:	2200      	movs	r2, #0
   b4b1e:	f006 fedb 	bl	bb8d8 <__aeabi_dmul>
   b4b22:	e9cd 0100 	strd	r0, r1, [sp]
   b4b26:	492f      	ldr	r1, [pc, #188]	; (b4be4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x230>)
   b4b28:	2300      	movs	r3, #0
   b4b2a:	4622      	mov	r2, r4
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4b2c:	4827      	ldr	r0, [pc, #156]	; (b4bcc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x218>)
   b4b2e:	f7ff fb1d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b4b32:	4650      	mov	r0, sl
   b4b34:	2100      	movs	r1, #0
   b4b36:	f006 fc12 	bl	bb35e <digitalWrite>
	return false;
   b4b3a:	2000      	movs	r0, #0
   b4b3c:	e7d5      	b.n	b4aea <_ZN14LoRA_Functions21composeDataReportNodeEv+0x136>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b4b3e:	2805      	cmp	r0, #5
   b4b40:	d11c      	bne.n	b4b7c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c8>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4b42:	f000 fa91 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4b46:	f000 fb55 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4b4a:	4604      	mov	r4, r0
   b4b4c:	6838      	ldr	r0, [r7, #0]
   b4b4e:	f006 fe59 	bl	bb804 <__aeabi_i2d>
   b4b52:	4680      	mov	r8, r0
   b4b54:	6830      	ldr	r0, [r6, #0]
   b4b56:	4689      	mov	r9, r1
   b4b58:	f006 fe54 	bl	bb804 <__aeabi_i2d>
   b4b5c:	4602      	mov	r2, r0
   b4b5e:	460b      	mov	r3, r1
   b4b60:	4640      	mov	r0, r8
   b4b62:	4649      	mov	r1, r9
   b4b64:	f006 ffe2 	bl	bbb2c <__aeabi_ddiv>
   b4b68:	4b1c      	ldr	r3, [pc, #112]	; (b4bdc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x228>)
   b4b6a:	2200      	movs	r2, #0
   b4b6c:	f006 feb4 	bl	bb8d8 <__aeabi_dmul>
   b4b70:	2300      	movs	r3, #0
   b4b72:	e9cd 0100 	strd	r0, r1, [sp]
   b4b76:	4622      	mov	r2, r4
   b4b78:	491b      	ldr	r1, [pc, #108]	; (b4be8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x234>)
   b4b7a:	e7d7      	b.n	b4b2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x178>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4b7c:	f000 fa74 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4b80:	f000 fb38 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4b84:	4604      	mov	r4, r0
   b4b86:	6838      	ldr	r0, [r7, #0]
   b4b88:	f006 fe3c 	bl	bb804 <__aeabi_i2d>
   b4b8c:	4680      	mov	r8, r0
   b4b8e:	6830      	ldr	r0, [r6, #0]
   b4b90:	4689      	mov	r9, r1
   b4b92:	f006 fe37 	bl	bb804 <__aeabi_i2d>
   b4b96:	4602      	mov	r2, r0
   b4b98:	460b      	mov	r3, r1
   b4b9a:	4640      	mov	r0, r8
   b4b9c:	4649      	mov	r1, r9
   b4b9e:	f006 ffc5 	bl	bbb2c <__aeabi_ddiv>
   b4ba2:	4b0e      	ldr	r3, [pc, #56]	; (b4bdc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x228>)
   b4ba4:	2200      	movs	r2, #0
   b4ba6:	f006 fe97 	bl	bb8d8 <__aeabi_dmul>
   b4baa:	2300      	movs	r3, #0
   b4bac:	e9cd 0100 	strd	r0, r1, [sp]
   b4bb0:	4622      	mov	r2, r4
   b4bb2:	490e      	ldr	r1, [pc, #56]	; (b4bec <_ZN14LoRA_Functions21composeDataReportNodeEv+0x238>)
   b4bb4:	e7ba      	b.n	b4b2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x178>
   b4bb6:	bf00      	nop
   b4bb8:	000bc9ac 	.word	0x000bc9ac
   b4bbc:	2003df94 	.word	0x2003df94
   b4bc0:	2003df9c 	.word	0x2003df9c
   b4bc4:	2003dfa0 	.word	0x2003dfa0
   b4bc8:	000bc5a4 	.word	0x000bc5a4
   b4bcc:	2003e658 	.word	0x2003e658
   b4bd0:	2003e09c 	.word	0x2003e09c
   b4bd4:	2003e1cc 	.word	0x2003e1cc
   b4bd8:	2003df98 	.word	0x2003df98
   b4bdc:	40590000 	.word	0x40590000
   b4be0:	000bc5c6 	.word	0x000bc5c6
   b4be4:	000bc611 	.word	0x000bc611
   b4be8:	000bc661 	.word	0x000bc661
   b4bec:	000bc6ba 	.word	0x000bc6ba

000b4bf0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:
	Log.info("Data report acknowledged");
	return true;
}

bool LoRA_Functions::composeJoinRequesttNode() {
	digitalWrite(BLUE_LED,HIGH);
   b4bf0:	4b2b      	ldr	r3, [pc, #172]	; (b4ca0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb0>)
bool LoRA_Functions::composeJoinRequesttNode() {
   b4bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	digitalWrite(BLUE_LED,HIGH);
   b4bf4:	881e      	ldrh	r6, [r3, #0]

	buf[0] = highByte(sysStatus.get_deviceID());                      // deviceID is unique to the device
   b4bf6:	4c2b      	ldr	r4, [pc, #172]	; (b4ca4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb4>)
	digitalWrite(BLUE_LED,HIGH);
   b4bf8:	2101      	movs	r1, #1
   b4bfa:	4630      	mov	r0, r6
   b4bfc:	f006 fbaf 	bl	bb35e <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());                      // deviceID is unique to the device
   b4c00:	f000 fa32 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4c04:	f000 faf1 	bl	b51ea <_ZNK13sysStatusData12get_deviceIDEv>
   b4c08:	0a00      	lsrs	r0, r0, #8
   b4c0a:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4c0c:	f000 fa2c 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4c10:	f000 faeb 	bl	b51ea <_ZNK13sysStatusData12get_deviceIDEv>
   b4c14:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());                  			// Node Number
   b4c16:	f000 fa27 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4c1a:	f000 faeb 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4c1e:	0a00      	lsrs	r0, r0, #8
   b4c20:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());
   b4c22:	f000 fa21 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4c26:	f000 fae5 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4c2a:	70e0      	strb	r0, [r4, #3]
	buf[4] = sysStatus.get_structuresVersion();						// Needs to equal 128
   b4c2c:	f000 fa1c 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4c30:	f000 fb47 	bl	b52c2 <_ZNK13sysStatusData21get_structuresVersionEv>
   b4c34:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(driver.lastRssi());				        // Signal strength
   b4c36:	481c      	ldr	r0, [pc, #112]	; (b4ca8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb8>)
   b4c38:	f002 f823 	bl	b6c82 <_ZN15RHGenericDriver8lastRssiEv>
   b4c3c:	1200      	asrs	r0, r0, #8
   b4c3e:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(driver.lastRssi()); 
   b4c40:	4819      	ldr	r0, [pc, #100]	; (b4ca8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb8>)
   b4c42:	f002 f81e 	bl	b6c82 <_ZN15RHGenericDriver8lastRssiEv>
   b4c46:	71a0      	strb	r0, [r4, #6]

	
	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4c48:	f000 fa0e 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4c4c:	f000 fad2 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4c50:	4916      	ldr	r1, [pc, #88]	; (b4cac <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbc>)
   b4c52:	4a17      	ldr	r2, [pc, #92]	; (b4cb0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc0>)
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4c54:	2501      	movs	r5, #1
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4c56:	2809      	cmp	r0, #9
   b4c58:	bf98      	it	ls
   b4c5a:	460a      	movls	r2, r1
   b4c5c:	4915      	ldr	r1, [pc, #84]	; (b4cb4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
   b4c5e:	4816      	ldr	r0, [pc, #88]	; (b4cb8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4c60:	f7ff fa84 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4c64:	4621      	mov	r1, r4
   b4c66:	4815      	ldr	r0, [pc, #84]	; (b4cbc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>)
   b4c68:	9500      	str	r5, [sp, #0]
   b4c6a:	2300      	movs	r3, #0
   b4c6c:	2207      	movs	r2, #7
   b4c6e:	f002 fa23 	bl	b70b8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4c72:	4604      	mov	r4, r0
   b4c74:	b950      	cbnz	r0, b4c8c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x9c>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   b4c76:	4912      	ldr	r1, [pc, #72]	; (b4cc0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>)
   b4c78:	480f      	ldr	r0, [pc, #60]	; (b4cb8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4c7a:	f7ff fa77 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4c7e:	4630      	mov	r0, r6
   b4c80:	4621      	mov	r1, r4
   b4c82:	f006 fb6c 	bl	bb35e <digitalWrite>
		return true;
   b4c86:	4628      	mov	r0, r5
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4c88:	b002      	add	sp, #8
   b4c8a:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   b4c8c:	490d      	ldr	r1, [pc, #52]	; (b4cc4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b4c8e:	480a      	ldr	r0, [pc, #40]	; (b4cb8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4c90:	f7ff fa6c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4c94:	4630      	mov	r0, r6
   b4c96:	2100      	movs	r1, #0
   b4c98:	f006 fb61 	bl	bb35e <digitalWrite>
		return false;
   b4c9c:	2000      	movs	r0, #0
   b4c9e:	e7f3      	b.n	b4c88 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x98>
   b4ca0:	000bc9ac 	.word	0x000bc9ac
   b4ca4:	2003dfa0 	.word	0x2003dfa0
   b4ca8:	2003e09c 	.word	0x2003e09c
   b4cac:	000bc723 	.word	0x000bc723
   b4cb0:	000bc73a 	.word	0x000bc73a
   b4cb4:	000bc74f 	.word	0x000bc74f
   b4cb8:	2003e658 	.word	0x2003e658
   b4cbc:	2003e1cc 	.word	0x2003e1cc
   b4cc0:	000bc76f 	.word	0x000bc76f
   b4cc4:	000bc798 	.word	0x000bc798

000b4cc8 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b4cc8:	b510      	push	{r4, lr}

	if (sysStatus.get_nodeNumber() < 10 && buf[0] == 128) sysStatus.set_nodeNumber((buf[7] << 8 | buf[8]));
   b4cca:	f000 f9cd 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4cce:	f000 fa91 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4cd2:	2809      	cmp	r0, #9
   b4cd4:	d80b      	bhi.n	b4cee <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x26>
   b4cd6:	4c0b      	ldr	r4, [pc, #44]	; (b4d04 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x3c>)
   b4cd8:	7823      	ldrb	r3, [r4, #0]
   b4cda:	2b80      	cmp	r3, #128	; 0x80
   b4cdc:	d107      	bne.n	b4cee <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x26>
   b4cde:	f000 f9c3 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4ce2:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b4ce6:	ba49      	rev16	r1, r1
   b4ce8:	b289      	uxth	r1, r1
   b4cea:	f000 fac0 	bl	b526e <_ZN13sysStatusData14set_nodeNumberEt>
	Log.info("Join request acknowledged and node ID set to %d", sysStatus.get_nodeNumber());
   b4cee:	f000 f9bb 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4cf2:	f000 fa7f 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4cf6:	4904      	ldr	r1, [pc, #16]	; (b4d08 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x40>)
   b4cf8:	4602      	mov	r2, r0
   b4cfa:	4804      	ldr	r0, [pc, #16]	; (b4d0c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x44>)
   b4cfc:	f7ff fa36 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	return true;
}
   b4d00:	2001      	movs	r0, #1
   b4d02:	bd10      	pop	{r4, pc}
   b4d04:	2003dfa0 	.word	0x2003dfa0
   b4d08:	000bc7bb 	.word	0x000bc7bb
   b4d0c:	2003e658 	.word	0x2003e658

000b4d10 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b4d10:	b570      	push	{r4, r5, r6, lr}
   b4d12:	b08c      	sub	sp, #48	; 0x30
	uint8_t len = sizeof(buf);
   b4d14:	23f9      	movs	r3, #249	; 0xf9
   b4d16:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b4d1a:	f10d 031f 	add.w	r3, sp, #31
   b4d1e:	9303      	str	r3, [sp, #12]
   b4d20:	f10d 031e 	add.w	r3, sp, #30
   b4d24:	9302      	str	r3, [sp, #8]
   b4d26:	4e36      	ldr	r6, [pc, #216]	; (b4e00 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf0>)
   b4d28:	4836      	ldr	r0, [pc, #216]	; (b4e04 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf4>)
   b4d2a:	f10d 031d 	add.w	r3, sp, #29
   b4d2e:	9301      	str	r3, [sp, #4]
   b4d30:	ab07      	add	r3, sp, #28
   b4d32:	9300      	str	r3, [sp, #0]
   b4d34:	f10d 021a 	add.w	r2, sp, #26
   b4d38:	f10d 031b 	add.w	r3, sp, #27
   b4d3c:	4631      	mov	r1, r6
   b4d3e:	f002 f9ef 	bl	b7120 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b4d42:	4604      	mov	r4, r0
   b4d44:	b918      	cbnz	r0, b4d4e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x3e>
	return false;
   b4d46:	2400      	movs	r4, #0
}
   b4d48:	4620      	mov	r0, r4
   b4d4a:	b00c      	add	sp, #48	; 0x30
   b4d4c:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4d4e:	f89d 301a 	ldrb.w	r3, [sp, #26]
		lora_state = (LoRA_State)messageFlag;
   b4d52:	4d2d      	ldr	r5, [pc, #180]	; (b4e08 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf8>)
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b4d54:	482d      	ldr	r0, [pc, #180]	; (b4e0c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xfc>)
		buf[len] = 0;
   b4d56:	2200      	movs	r2, #0
   b4d58:	54f2      	strb	r2, [r6, r3]
		lora_state = (LoRA_State)messageFlag;
   b4d5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b4d5e:	f89d 201b 	ldrb.w	r2, [sp, #27]
		lora_state = (LoRA_State)messageFlag;
   b4d62:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b4d64:	9205      	str	r2, [sp, #20]
   b4d66:	f001 ff8c 	bl	b6c82 <_ZN15RHGenericDriver8lastRssiEv>
   b4d6a:	4929      	ldr	r1, [pc, #164]	; (b4e10 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x100>)
   b4d6c:	9a05      	ldr	r2, [sp, #20]
   b4d6e:	4603      	mov	r3, r0
   b4d70:	7828      	ldrb	r0, [r5, #0]
   b4d72:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4d76:	9100      	str	r1, [sp, #0]
   b4d78:	4826      	ldr	r0, [pc, #152]	; (b4e14 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x104>)
   b4d7a:	4927      	ldr	r1, [pc, #156]	; (b4e18 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x108>)
   b4d7c:	f7ff f9f6 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]));  // Set time based on response from gateway
   b4d80:	f8d6 0001 	ldr.w	r0, [r6, #1]
   b4d84:	ba00      	rev	r0, r0
   b4d86:	17c1      	asrs	r1, r0, #31
   b4d88:	f005 ffc0 	bl	bad0c <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[5] << 8 | buf[6]));			// Frequency of reporting set by Gateway
   b4d8c:	f000 f96c 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4d90:	f8b6 1005 	ldrh.w	r1, [r6, #5]
   b4d94:	ba49      	rev16	r1, r1
   b4d96:	b289      	uxth	r1, r1
   b4d98:	f000 fa6f 	bl	b527a <_ZN13sysStatusData20set_frequencyMinutesEt>
   b4d9c:	f006 f8cf 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4da0:	17c3      	asrs	r3, r0, #31
   b4da2:	4602      	mov	r2, r0
   b4da4:	a808      	add	r0, sp, #32
   b4da6:	f005 ffc5 	bl	bad34 <_ZN9TimeClass7timeStrEx>
   b4daa:	9a08      	ldr	r2, [sp, #32]
   b4dac:	9205      	str	r2, [sp, #20]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b4dae:	f000 f95b 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4db2:	f000 fa24 	bl	b51fe <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4db6:	9a05      	ldr	r2, [sp, #20]
   b4db8:	4918      	ldr	r1, [pc, #96]	; (b4e1c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x10c>)
   b4dba:	4603      	mov	r3, r0
   b4dbc:	4815      	ldr	r0, [pc, #84]	; (b4e14 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x104>)
   b4dbe:	f7ff f9d5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4dc2:	a808      	add	r0, sp, #32
   b4dc4:	f005 fdc6 	bl	ba954 <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b4dc8:	782b      	ldrb	r3, [r5, #0]
   b4dca:	2b04      	cmp	r3, #4
   b4dcc:	d106      	bne.n	b4ddc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xcc>
   b4dce:	f7ff fd59 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
	Log.info("Data report acknowledged");
   b4dd2:	4913      	ldr	r1, [pc, #76]	; (b4e20 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x110>)
	}
}

bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {

	Log.info("Alert report acknowledged");
   b4dd4:	480f      	ldr	r0, [pc, #60]	; (b4e14 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x104>)
   b4dd6:	f7ff f9c9 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b4dda:	e7b5      	b.n	b4d48 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b4ddc:	2b02      	cmp	r3, #2
   b4dde:	d006      	beq.n	b4dee <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xde>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b4de0:	782b      	ldrb	r3, [r5, #0]
   b4de2:	2b06      	cmp	r3, #6
   b4de4:	d1af      	bne.n	b4d46 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
   b4de6:	f7ff fd4d 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
	Log.info("Alert report acknowledged");
   b4dea:	490e      	ldr	r1, [pc, #56]	; (b4e24 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x114>)
   b4dec:	e7f2      	b.n	b4dd4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xc4>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b4dee:	f7ff fd49 	bl	b4884 <_ZN14LoRA_Functions8instanceEv>
   b4df2:	f7ff ff69 	bl	b4cc8 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b4df6:	2800      	cmp	r0, #0
   b4df8:	d0f2      	beq.n	b4de0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xd0>
   b4dfa:	4604      	mov	r4, r0
   b4dfc:	e7a4      	b.n	b4d48 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
   b4dfe:	bf00      	nop
   b4e00:	2003dfa0 	.word	0x2003dfa0
   b4e04:	2003e1cc 	.word	0x2003e1cc
   b4e08:	2003df8c 	.word	0x2003df8c
   b4e0c:	2003e09c 	.word	0x2003e09c
   b4e10:	2003de04 	.word	0x2003de04
   b4e14:	2003e658 	.word	0x2003e658
   b4e18:	000bc7eb 	.word	0x000bc7eb
   b4e1c:	000bc81d 	.word	0x000bc81d
   b4e20:	000bc70a 	.word	0x000bc70a
   b4e24:	000bc850 	.word	0x000bc850

000b4e28 <_ZN14LoRA_Functions22composeAlertReportNodeEv>:
	digitalWrite(BLUE_LED,HIGH);
   b4e28:	4b30      	ldr	r3, [pc, #192]	; (b4eec <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xc4>)
bool LoRA_Functions::composeAlertReportNode() {
   b4e2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	digitalWrite(BLUE_LED,HIGH);
   b4e2c:	881e      	ldrh	r6, [r3, #0]
	buf[0] = highByte(sysStatus.get_deviceID());       // deviceID is unique to the device
   b4e2e:	4c30      	ldr	r4, [pc, #192]	; (b4ef0 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xc8>)
	digitalWrite(BLUE_LED,HIGH);
   b4e30:	2101      	movs	r1, #1
   b4e32:	4630      	mov	r0, r6
   b4e34:	f006 fa93 	bl	bb35e <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());       // deviceID is unique to the device
   b4e38:	f000 f916 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4e3c:	f000 f9d5 	bl	b51ea <_ZNK13sysStatusData12get_deviceIDEv>
   b4e40:	0a00      	lsrs	r0, r0, #8
   b4e42:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4e44:	f000 f910 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4e48:	f000 f9cf 	bl	b51ea <_ZNK13sysStatusData12get_deviceIDEv>
   b4e4c:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());     // Node Number
   b4e4e:	f000 f90b 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4e52:	f000 f9cf 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e56:	0a00      	lsrs	r0, r0, #8
   b4e58:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());
   b4e5a:	f000 f905 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b4e5e:	f000 f9c9 	bl	b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e62:	70e0      	strb	r0, [r4, #3]
	buf[4] = highByte(current.get_alertCodeNode());   // Node's Alert Code
   b4e64:	f000 f950 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4e68:	2500      	movs	r5, #0
   b4e6a:	f000 fa3e 	bl	b52ea <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4e6e:	7125      	strb	r5, [r4, #4]
	buf[5] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b4e70:	f006 f865 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4e74:	1600      	asrs	r0, r0, #24
   b4e76:	7160      	strb	r0, [r4, #5]
	buf[6] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b4e78:	f006 f861 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4e7c:	1400      	asrs	r0, r0, #16
   b4e7e:	71a0      	strb	r0, [r4, #6]
	buf[7] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b4e80:	f006 f85d 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4e84:	1200      	asrs	r0, r0, #8
   b4e86:	71e0      	strb	r0, [r4, #7]
	buf[8] = ((uint8_t) (Time.now()));		    // First byte			
   b4e88:	f006 f859 	bl	baf3e <_ZN9TimeClass3nowEv>
   b4e8c:	7220      	strb	r0, [r4, #8]
	buf[9] = highByte(driver.lastRssi());		// Signal strength
   b4e8e:	4819      	ldr	r0, [pc, #100]	; (b4ef4 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xcc>)
   b4e90:	f001 fef7 	bl	b6c82 <_ZN15RHGenericDriver8lastRssiEv>
   b4e94:	1200      	asrs	r0, r0, #8
   b4e96:	7260      	strb	r0, [r4, #9]
	buf[10] = lowByte(driver.lastRssi()); 
   b4e98:	4816      	ldr	r0, [pc, #88]	; (b4ef4 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xcc>)
   b4e9a:	f001 fef2 	bl	b6c82 <_ZN15RHGenericDriver8lastRssiEv>
	if (manager.sendtoWait(buf, 11, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b4e9e:	2305      	movs	r3, #5
	buf[10] = lowByte(driver.lastRssi()); 
   b4ea0:	72a0      	strb	r0, [r4, #10]
	if (manager.sendtoWait(buf, 11, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b4ea2:	4621      	mov	r1, r4
   b4ea4:	9300      	str	r3, [sp, #0]
   b4ea6:	4814      	ldr	r0, [pc, #80]	; (b4ef8 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd0>)
   b4ea8:	462b      	mov	r3, r5
   b4eaa:	220b      	movs	r2, #11
   b4eac:	f002 f904 	bl	b70b8 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4eb0:	4604      	mov	r4, r0
   b4eb2:	b980      	cbnz	r0, b4ed6 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xae>
		Log.info("Success sending Alert Report number %d to gateway at %d", current.get_alertCodeNode(), GATEWAY_ADDRESS);
   b4eb4:	f000 f928 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b4eb8:	f000 fa17 	bl	b52ea <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4ebc:	490f      	ldr	r1, [pc, #60]	; (b4efc <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd4>)
   b4ebe:	4602      	mov	r2, r0
   b4ec0:	4623      	mov	r3, r4
   b4ec2:	480f      	ldr	r0, [pc, #60]	; (b4f00 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd8>)
   b4ec4:	f7ff f952 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4ec8:	4630      	mov	r0, r6
   b4eca:	4621      	mov	r1, r4
   b4ecc:	f006 fa47 	bl	bb35e <digitalWrite>
		return true;
   b4ed0:	2001      	movs	r0, #1
}
   b4ed2:	b002      	add	sp, #8
   b4ed4:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b4ed6:	490b      	ldr	r1, [pc, #44]	; (b4f04 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xdc>)
   b4ed8:	4809      	ldr	r0, [pc, #36]	; (b4f00 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd8>)
   b4eda:	f7ff f947 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4ede:	4630      	mov	r0, r6
   b4ee0:	4629      	mov	r1, r5
   b4ee2:	f006 fa3c 	bl	bb35e <digitalWrite>
		return false;
   b4ee6:	4628      	mov	r0, r5
   b4ee8:	e7f3      	b.n	b4ed2 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xaa>
   b4eea:	bf00      	nop
   b4eec:	000bc9ac 	.word	0x000bc9ac
   b4ef0:	2003dfa0 	.word	0x2003dfa0
   b4ef4:	2003e09c 	.word	0x2003e09c
   b4ef8:	2003e1cc 	.word	0x2003e1cc
   b4efc:	000bc86a 	.word	0x000bc86a
   b4f00:	2003e658 	.word	0x2003e658
   b4f04:	000bc8a2 	.word	0x000bc8a2

000b4f08 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
	return true;
}
   b4f08:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4f0a:	4a08      	ldr	r2, [pc, #32]	; (b4f2c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b4f0c:	4c08      	ldr	r4, [pc, #32]	; (b4f30 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b4f0e:	4909      	ldr	r1, [pc, #36]	; (b4f34 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b4f10:	7812      	ldrb	r2, [r2, #0]
   b4f12:	7809      	ldrb	r1, [r1, #0]
   b4f14:	4b08      	ldr	r3, [pc, #32]	; (b4f38 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b4f16:	4620      	mov	r0, r4
   b4f18:	f002 fdcc 	bl	b7ab4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4f1c:	4621      	mov	r1, r4
   b4f1e:	4807      	ldr	r0, [pc, #28]	; (b4f3c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b4f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4f24:	2200      	movs	r2, #0
   b4f26:	f002 b8bd 	b.w	b70a4 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4f2a:	bf00      	nop
   b4f2c:	000bc9b4 	.word	0x000bc9b4
   b4f30:	2003e09c 	.word	0x2003e09c
   b4f34:	000bc9b2 	.word	0x000bc9b2
   b4f38:	2003e3f0 	.word	0x2003e3f0
   b4f3c:	2003e1cc 	.word	0x2003e1cc

000b4f40 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b4f40:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b4f42:	4b04      	ldr	r3, [pc, #16]	; (b4f54 <_ZN17currentStatusDataD1Ev+0x14>)
   b4f44:	6003      	str	r3, [r0, #0]
   b4f46:	4604      	mov	r4, r0
            if (handle_) {
   b4f48:	6840      	ldr	r0, [r0, #4]
   b4f4a:	b108      	cbz	r0, b4f50 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b4f4c:	f003 f944 	bl	b81d8 <os_mutex_recursive_destroy>
}
   b4f50:	4620      	mov	r0, r4
   b4f52:	bd10      	pop	{r4, pc}
   b4f54:	000bd0e8 	.word	0x000bd0e8

000b4f58 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b4f58:	b510      	push	{r4, lr}
   b4f5a:	4604      	mov	r4, r0
}
   b4f5c:	f7ff fff0 	bl	b4f40 <_ZN17currentStatusDataD1Ev>
   b4f60:	4620      	mov	r0, r4
   b4f62:	2178      	movs	r1, #120	; 0x78
   b4f64:	f7ff f89b 	bl	b409e <_ZdlPvj>
   b4f68:	4620      	mov	r0, r4
   b4f6a:	bd10      	pop	{r4, pc}

000b4f6c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b4f6c:	b510      	push	{r4, lr}
   b4f6e:	4b03      	ldr	r3, [pc, #12]	; (b4f7c <_ZN8MB85RC64D1Ev+0x10>)
   b4f70:	6003      	str	r3, [r0, #0]
   b4f72:	4604      	mov	r4, r0
   b4f74:	f001 fcda 	bl	b692c <_ZN6MB85RCD1Ev>
   b4f78:	4620      	mov	r0, r4
   b4f7a:	bd10      	pop	{r4, pc}
   b4f7c:	000bc90c 	.word	0x000bc90c

000b4f80 <_ZN8MB85RC64D0Ev>:
   b4f80:	b510      	push	{r4, lr}
   b4f82:	4604      	mov	r4, r0
   b4f84:	f7ff fff2 	bl	b4f6c <_ZN8MB85RC64D1Ev>
   b4f88:	4620      	mov	r0, r4
   b4f8a:	2110      	movs	r1, #16
   b4f8c:	f7ff f887 	bl	b409e <_ZdlPvj>
   b4f90:	4620      	mov	r0, r4
   b4f92:	bd10      	pop	{r4, pc}

000b4f94 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b4f94:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b4f96:	4b04      	ldr	r3, [pc, #16]	; (b4fa8 <_ZN13sysStatusDataD1Ev+0x14>)
   b4f98:	6003      	str	r3, [r0, #0]
   b4f9a:	4604      	mov	r4, r0
            if (handle_) {
   b4f9c:	6840      	ldr	r0, [r0, #4]
   b4f9e:	b108      	cbz	r0, b4fa4 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b4fa0:	f003 f91a 	bl	b81d8 <os_mutex_recursive_destroy>
}
   b4fa4:	4620      	mov	r0, r4
   b4fa6:	bd10      	pop	{r4, pc}
   b4fa8:	000bd0e8 	.word	0x000bd0e8

000b4fac <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b4fac:	b510      	push	{r4, lr}
   b4fae:	4604      	mov	r4, r0
}
   b4fb0:	f7ff fff0 	bl	b4f94 <_ZN13sysStatusDataD1Ev>
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	2170      	movs	r1, #112	; 0x70
   b4fb8:	f7ff f871 	bl	b409e <_ZdlPvj>
   b4fbc:	4620      	mov	r0, r4
   b4fbe:	bd10      	pop	{r4, pc}

000b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b4fc0:	b510      	push	{r4, lr}
            if (!handle_) {
   b4fc2:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b4fc4:	4604      	mov	r4, r0
            if (!handle_) {
   b4fc6:	b90b      	cbnz	r3, b4fcc <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b4fc8:	f003 f8fe 	bl	b81c8 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b4fcc:	6820      	ldr	r0, [r4, #0]
        }
   b4fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b4fd2:	f003 b909 	b.w	b81e8 <os_mutex_recursive_lock>

000b4fd6 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b4fd6:	b538      	push	{r3, r4, r5, lr}
   b4fd8:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b4fda:	3004      	adds	r0, #4
   b4fdc:	f7ff fff0 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b4fe0:	6a20      	ldr	r0, [r4, #32]
   b4fe2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b4fe4:	6803      	ldr	r3, [r0, #0]
   b4fe6:	68dd      	ldr	r5, [r3, #12]
   b4fe8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b4fec:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b4fee:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b4ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b4ff4:	f003 b900 	b.w	b81f8 <os_mutex_recursive_unlock>

000b4ff8 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b4ff8:	b538      	push	{r3, r4, r5, lr}
   b4ffa:	4604      	mov	r4, r0
   b4ffc:	3004      	adds	r0, #4
   b4ffe:	f7ff ffdf 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b5002:	6a20      	ldr	r0, [r4, #32]
   b5004:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5006:	6803      	ldr	r3, [r0, #0]
   b5008:	689d      	ldr	r5, [r3, #8]
   b500a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b500e:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5010:	68a2      	ldr	r2, [r4, #8]
   b5012:	6823      	ldr	r3, [r4, #0]
   b5014:	88d1      	ldrh	r1, [r2, #6]
   b5016:	695b      	ldr	r3, [r3, #20]
   b5018:	4620      	mov	r0, r4
   b501a:	4798      	blx	r3
   b501c:	b918      	cbnz	r0, b5026 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b501e:	6823      	ldr	r3, [r4, #0]
   b5020:	4620      	mov	r0, r4
   b5022:	699b      	ldr	r3, [r3, #24]
   b5024:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5026:	6860      	ldr	r0, [r4, #4]
   b5028:	f003 f8e6 	bl	b81f8 <os_mutex_recursive_unlock>
        }
   b502c:	2001      	movs	r0, #1
   b502e:	bd38      	pop	{r3, r4, r5, pc}

000b5030 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5030:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5034:	6081      	str	r1, [r0, #8]
   b5036:	4909      	ldr	r1, [pc, #36]	; (b505c <_ZN13sysStatusDataC1Ev+0x2c>)
   b5038:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b503c:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5040:	2101      	movs	r1, #1
   b5042:	8281      	strh	r1, [r0, #20]
   b5044:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5048:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b504a:	4905      	ldr	r1, [pc, #20]	; (b5060 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b504c:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b504e:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5052:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5054:	6182      	str	r2, [r0, #24]
   b5056:	4a03      	ldr	r2, [pc, #12]	; (b5064 <_ZN13sysStatusDataC1Ev+0x34>)
   b5058:	6002      	str	r2, [r0, #0]
};
   b505a:	4770      	bx	lr
   b505c:	20a99e73 	.word	0x20a99e73
   b5060:	2003e388 	.word	0x2003e388
   b5064:	000bc928 	.word	0x000bc928

000b5068 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5068:	b510      	push	{r4, lr}
    if (!_instance) {
   b506a:	4c06      	ldr	r4, [pc, #24]	; (b5084 <_ZN13sysStatusData8instanceEv+0x1c>)
   b506c:	6823      	ldr	r3, [r4, #0]
   b506e:	b93b      	cbnz	r3, b5080 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5070:	2070      	movs	r0, #112	; 0x70
   b5072:	f7ff f810 	bl	b4096 <_Znwj>
   b5076:	4603      	mov	r3, r0
   b5078:	b108      	cbz	r0, b507e <_ZN13sysStatusData8instanceEv+0x16>
   b507a:	f7ff ffd9 	bl	b5030 <_ZN13sysStatusDataC1Ev>
   b507e:	6023      	str	r3, [r4, #0]
}
   b5080:	6820      	ldr	r0, [r4, #0]
   b5082:	bd10      	pop	{r4, pc}
   b5084:	2003e380 	.word	0x2003e380

000b5088 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5088:	b508      	push	{r3, lr}
    fram.begin();
   b508a:	6a00      	ldr	r0, [r0, #32]
   b508c:	f001 fc64 	bl	b6958 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5090:	f7ff ffea 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b5094:	6803      	ldr	r3, [r0, #0]
   b5096:	685b      	ldr	r3, [r3, #4]
   b5098:	4798      	blx	r3
}
   b509a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setNodeConfiguration();                             // Here we will fix the settings specific to the node
   b509e:	f000 baa9 	b.w	b55f4 <_Z20setNodeConfigurationv>

000b50a2 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b50a2:	b510      	push	{r4, lr}
    fram.begin();
   b50a4:	6a00      	ldr	r0, [r0, #32]
   b50a6:	f001 fc57 	bl	b6958 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b50aa:	f7ff ffdd 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b50ae:	6803      	ldr	r3, [r0, #0]
}
   b50b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b50b4:	685b      	ldr	r3, [r3, #4]
   b50b6:	4718      	bx	r3

000b50b8 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b50b8:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b50ba:	f7ff ffd5 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b50be:	6803      	ldr	r3, [r0, #0]
}
   b50c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b50c4:	68db      	ldr	r3, [r3, #12]
   b50c6:	2100      	movs	r1, #0
   b50c8:	4718      	bx	r3
	...

000b50cc <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b50cc:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b50ce:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b50d2:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b50d4:	6182      	str	r2, [r0, #24]
   b50d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b50da:	6081      	str	r1, [r0, #8]
   b50dc:	61c2      	str	r2, [r0, #28]
   b50de:	4907      	ldr	r1, [pc, #28]	; (b50fc <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b50e0:	4a07      	ldr	r2, [pc, #28]	; (b5100 <_ZN17currentStatusDataC1Ev+0x34>)
   b50e2:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b50e4:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b50e8:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b50ea:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b50ee:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b50f0:	2101      	movs	r1, #1
   b50f2:	4a04      	ldr	r2, [pc, #16]	; (b5104 <_ZN17currentStatusDataC1Ev+0x38>)
   b50f4:	8281      	strh	r1, [r0, #20]
   b50f6:	6002      	str	r2, [r0, #0]
};
   b50f8:	4770      	bx	lr
   b50fa:	bf00      	nop
   b50fc:	20a99e73 	.word	0x20a99e73
   b5100:	2003e388 	.word	0x2003e388
   b5104:	000bc954 	.word	0x000bc954

000b5108 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5108:	b510      	push	{r4, lr}
    if (!_instance) {
   b510a:	4c06      	ldr	r4, [pc, #24]	; (b5124 <_ZN17currentStatusData8instanceEv+0x1c>)
   b510c:	6823      	ldr	r3, [r4, #0]
   b510e:	b93b      	cbnz	r3, b5120 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5110:	2078      	movs	r0, #120	; 0x78
   b5112:	f7fe ffc0 	bl	b4096 <_Znwj>
   b5116:	4603      	mov	r3, r0
   b5118:	b108      	cbz	r0, b511e <_ZN17currentStatusData8instanceEv+0x16>
   b511a:	f7ff ffd7 	bl	b50cc <_ZN17currentStatusDataC1Ev>
   b511e:	6023      	str	r3, [r4, #0]
}
   b5120:	6820      	ldr	r0, [r4, #0]
   b5122:	bd10      	pop	{r4, pc}
   b5124:	2003e384 	.word	0x2003e384

000b5128 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5128:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b512a:	f7ff ff9d 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b512e:	6803      	ldr	r3, [r0, #0]
}
   b5130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5134:	68db      	ldr	r3, [r3, #12]
   b5136:	2100      	movs	r1, #0
   b5138:	4718      	bx	r3
   b513a:	0000      	movs	r0, r0
   b513c:	0000      	movs	r0, r0
	...

000b5140 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5140:	b510      	push	{r4, lr}
   b5142:	4604      	mov	r4, r0
   b5144:	ed2d 8b02 	vpush	{d8}
   b5148:	3004      	adds	r0, #4
   b514a:	f7ff ff39 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b514e:	68e3      	ldr	r3, [r4, #12]
   b5150:	3b08      	subs	r3, #8
   b5152:	2b17      	cmp	r3, #23
   b5154:	d90c      	bls.n	b5170 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5156:	68a3      	ldr	r3, [r4, #8]
   b5158:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b515c:	6860      	ldr	r0, [r4, #4]
   b515e:	f003 f84b 	bl	b81f8 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b5162:	eeb0 0a48 	vmov.f32	s0, s16
   b5166:	eef0 0a68 	vmov.f32	s1, s17
   b516a:	ecbd 8b02 	vpop	{d8}
   b516e:	bd10      	pop	{r4, pc}
            T result = 0;
   b5170:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5178 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5174:	e7f2      	b.n	b515c <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5176:	bf00      	nop
	...

000b5180 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5182:	4604      	mov	r4, r0
   b5184:	3004      	adds	r0, #4
   b5186:	ec57 6b10 	vmov	r6, r7, d0
   b518a:	f7ff ff19 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b518e:	68e3      	ldr	r3, [r4, #12]
   b5190:	3b08      	subs	r3, #8
   b5192:	2b17      	cmp	r3, #23
   b5194:	d912      	bls.n	b51bc <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5196:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5198:	4630      	mov	r0, r6
   b519a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b519e:	4639      	mov	r1, r7
   b51a0:	f006 fe02 	bl	bbda8 <__aeabi_dcmpeq>
   b51a4:	b950      	cbnz	r0, b51bc <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b51a6:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b51aa:	4620      	mov	r0, r4
   b51ac:	68a5      	ldr	r5, [r4, #8]
   b51ae:	f002 ff89 	bl	b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b51b2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b51b4:	6823      	ldr	r3, [r4, #0]
   b51b6:	4620      	mov	r0, r4
   b51b8:	691b      	ldr	r3, [r3, #16]
   b51ba:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b51bc:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b51be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b51c2:	f003 b819 	b.w	b81f8 <os_mutex_recursive_unlock>

000b51c6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b51c6:	b538      	push	{r3, r4, r5, lr}
   b51c8:	4604      	mov	r4, r0
   b51ca:	3004      	adds	r0, #4
   b51cc:	460d      	mov	r5, r1
   b51ce:	f7ff fef7 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b51d2:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b51d4:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b51d6:	3b02      	subs	r3, #2
   b51d8:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b51da:	bf26      	itte	cs
   b51dc:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b51de:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b51e0:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b51e2:	f003 f809 	bl	b81f8 <os_mutex_recursive_unlock>
        }
   b51e6:	4628      	mov	r0, r5
   b51e8:	bd38      	pop	{r3, r4, r5, pc}

000b51ea <_ZNK13sysStatusData12get_deviceIDEv>:
uint16_t sysStatusData::get_deviceID() const {
   b51ea:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, deviceID));
   b51ec:	2110      	movs	r1, #16
   b51ee:	f7ff ffea 	bl	b51c6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b51f2:	bd08      	pop	{r3, pc}

000b51f4 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint16_t sysStatusData::get_nodeNumber() const {
   b51f4:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, nodeNumber));
   b51f6:	2112      	movs	r1, #18
   b51f8:	f7ff ffe5 	bl	b51c6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b51fc:	bd08      	pop	{r3, pc}

000b51fe <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b51fe:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5200:	2132      	movs	r1, #50	; 0x32
   b5202:	f7ff ffe0 	bl	b51c6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5206:	bd08      	pop	{r3, pc}

000b5208 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint16_t currentStatusData::get_nodeNumber() const {
   b5208:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeNumber));
   b520a:	2112      	movs	r1, #18
   b520c:	f7ff ffdb 	bl	b51c6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5210:	bd08      	pop	{r3, pc}

000b5212 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b5212:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5214:	2140      	movs	r1, #64	; 0x40
   b5216:	f7ff ffd6 	bl	b51c6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b521a:	bd08      	pop	{r3, pc}

000b521c <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b521c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b521e:	2142      	movs	r1, #66	; 0x42
   b5220:	f7ff ffd1 	bl	b51c6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5224:	bd08      	pop	{r3, pc}

000b5226 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5226:	b570      	push	{r4, r5, r6, lr}
   b5228:	4604      	mov	r4, r0
   b522a:	3004      	adds	r0, #4
   b522c:	460d      	mov	r5, r1
   b522e:	4616      	mov	r6, r2
   b5230:	f7ff fec6 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5234:	68e3      	ldr	r3, [r4, #12]
   b5236:	3b02      	subs	r3, #2
   b5238:	42ab      	cmp	r3, r5
   b523a:	d30d      	bcc.n	b5258 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b523c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b523e:	5b5a      	ldrh	r2, [r3, r5]
   b5240:	42b2      	cmp	r2, r6
   b5242:	d009      	beq.n	b5258 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b5244:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5246:	4620      	mov	r0, r4
   b5248:	68a5      	ldr	r5, [r4, #8]
   b524a:	f002 ff3b 	bl	b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b524e:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5250:	6823      	ldr	r3, [r4, #0]
   b5252:	4620      	mov	r0, r4
   b5254:	691b      	ldr	r3, [r3, #16]
   b5256:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5258:	6860      	ldr	r0, [r4, #4]
        }
   b525a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b525e:	f002 bfcb 	b.w	b81f8 <os_mutex_recursive_unlock>

000b5262 <_ZN13sysStatusData12set_deviceIDEt>:
void sysStatusData::set_deviceID(uint16_t value) {
   b5262:	b508      	push	{r3, lr}
   b5264:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, deviceID), value);
   b5266:	2110      	movs	r1, #16
   b5268:	f7ff ffdd 	bl	b5226 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b526c:	bd08      	pop	{r3, pc}

000b526e <_ZN13sysStatusData14set_nodeNumberEt>:
void sysStatusData::set_nodeNumber(uint16_t value) {
   b526e:	b508      	push	{r3, lr}
   b5270:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nodeNumber), value);
   b5272:	2112      	movs	r1, #18
   b5274:	f7ff ffd7 	bl	b5226 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5278:	bd08      	pop	{r3, pc}

000b527a <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b527a:	b508      	push	{r3, lr}
   b527c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b527e:	2132      	movs	r1, #50	; 0x32
   b5280:	f7ff ffd1 	bl	b5226 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5284:	bd08      	pop	{r3, pc}

000b5286 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5286:	b508      	push	{r3, lr}
   b5288:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b528a:	2140      	movs	r1, #64	; 0x40
   b528c:	f7ff ffcb 	bl	b5226 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5290:	bd08      	pop	{r3, pc}

000b5292 <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b5292:	b508      	push	{r3, lr}
   b5294:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5296:	2142      	movs	r1, #66	; 0x42
   b5298:	f7ff ffc5 	bl	b5226 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b529c:	bd08      	pop	{r3, pc}

000b529e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b529e:	b538      	push	{r3, r4, r5, lr}
   b52a0:	4604      	mov	r4, r0
   b52a2:	3004      	adds	r0, #4
   b52a4:	460d      	mov	r5, r1
   b52a6:	f7ff fe8b 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b52aa:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b52ac:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b52ae:	3b01      	subs	r3, #1
   b52b0:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b52b2:	bf26      	itte	cs
   b52b4:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b52b6:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b52b8:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b52ba:	f002 ff9d 	bl	b81f8 <os_mutex_recursive_unlock>
        }
   b52be:	4628      	mov	r0, r5
   b52c0:	bd38      	pop	{r3, r4, r5, pc}

000b52c2 <_ZNK13sysStatusData21get_structuresVersionEv>:
uint8_t sysStatusData::get_structuresVersion() const {
   b52c2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, structuresVersion));
   b52c4:	2114      	movs	r1, #20
   b52c6:	f7ff ffea 	bl	b529e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b52ca:	bd08      	pop	{r3, pc}

000b52cc <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b52cc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b52ce:	2118      	movs	r1, #24
   b52d0:	f7ff ffe5 	bl	b529e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b52d4:	bd08      	pop	{r3, pc}

000b52d6 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b52d6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b52d8:	2114      	movs	r1, #20
   b52da:	f7ff ffe0 	bl	b529e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b52de:	bd08      	pop	{r3, pc}

000b52e0 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b52e0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b52e2:	2120      	movs	r1, #32
   b52e4:	f7ff ffdb 	bl	b529e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b52e8:	bd08      	pop	{r3, pc}

000b52ea <_ZNK17currentStatusData17get_alertCodeNodeEv>:

uint8_t currentStatusData::get_alertCodeNode() const {
   b52ea:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b52ec:	2144      	movs	r1, #68	; 0x44
   b52ee:	f7ff ffd6 	bl	b529e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b52f2:	bd08      	pop	{r3, pc}

000b52f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b52f4:	b570      	push	{r4, r5, r6, lr}
   b52f6:	4604      	mov	r4, r0
   b52f8:	3004      	adds	r0, #4
   b52fa:	460d      	mov	r5, r1
   b52fc:	4616      	mov	r6, r2
   b52fe:	f7ff fe5f 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5302:	68e3      	ldr	r3, [r4, #12]
   b5304:	3b01      	subs	r3, #1
   b5306:	42ab      	cmp	r3, r5
   b5308:	d30d      	bcc.n	b5326 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b530a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b530c:	5d5a      	ldrb	r2, [r3, r5]
   b530e:	42b2      	cmp	r2, r6
   b5310:	d009      	beq.n	b5326 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5312:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5314:	4620      	mov	r0, r4
   b5316:	68a5      	ldr	r5, [r4, #8]
   b5318:	f002 fed4 	bl	b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b531c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b531e:	6823      	ldr	r3, [r4, #0]
   b5320:	4620      	mov	r0, r4
   b5322:	691b      	ldr	r3, [r3, #16]
   b5324:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5326:	6860      	ldr	r0, [r4, #4]
        }
   b5328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b532c:	f002 bf64 	b.w	b81f8 <os_mutex_recursive_unlock>

000b5330 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b5330:	b508      	push	{r3, lr}
   b5332:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b5334:	2114      	movs	r1, #20
   b5336:	f7ff ffdd 	bl	b52f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b533a:	bd08      	pop	{r3, pc}

000b533c <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b533c:	b508      	push	{r3, lr}
   b533e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5340:	2118      	movs	r1, #24
   b5342:	f7ff ffd7 	bl	b52f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5346:	bd08      	pop	{r3, pc}

000b5348 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5348:	b508      	push	{r3, lr}
   b534a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b534c:	2114      	movs	r1, #20
   b534e:	f7ff ffd1 	bl	b52f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5352:	bd08      	pop	{r3, pc}

000b5354 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5354:	b508      	push	{r3, lr}
   b5356:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5358:	2120      	movs	r1, #32
   b535a:	f7ff ffcb 	bl	b52f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b535e:	bd08      	pop	{r3, pc}

000b5360 <_ZN17currentStatusData17set_alertCodeNodeEh>:

void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5360:	b508      	push	{r3, lr}
   b5362:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5364:	2144      	movs	r1, #68	; 0x44
   b5366:	f7ff ffc5 	bl	b52f4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b536a:	bd08      	pop	{r3, pc}

000b536c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b536c:	b538      	push	{r3, r4, r5, lr}
   b536e:	4604      	mov	r4, r0
   b5370:	3004      	adds	r0, #4
   b5372:	460d      	mov	r5, r1
   b5374:	f7ff fe24 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5378:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b537a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b537c:	3b01      	subs	r3, #1
   b537e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5380:	bf26      	itte	cs
   b5382:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5384:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5386:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5388:	f002 ff36 	bl	b81f8 <os_mutex_recursive_unlock>
        }
   b538c:	4628      	mov	r0, r5
   b538e:	bd38      	pop	{r3, r4, r5, pc}

000b5390 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b5390:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b5392:	2117      	movs	r1, #23
   b5394:	f7ff ffea 	bl	b536c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5398:	bd08      	pop	{r3, pc}

000b539a <_ZNK13sysStatusData14get_sensorTypeEv>:
bool sysStatusData::get_sensorType() const {
   b539a:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, sensorType));
   b539c:	2140      	movs	r1, #64	; 0x40
   b539e:	f7ff ffe5 	bl	b536c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b53a2:	bd08      	pop	{r3, pc}

000b53a4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b53a4:	b570      	push	{r4, r5, r6, lr}
   b53a6:	4604      	mov	r4, r0
   b53a8:	3004      	adds	r0, #4
   b53aa:	460d      	mov	r5, r1
   b53ac:	4616      	mov	r6, r2
   b53ae:	f7ff fe07 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b53b2:	68e3      	ldr	r3, [r4, #12]
   b53b4:	3b01      	subs	r3, #1
   b53b6:	42ab      	cmp	r3, r5
   b53b8:	d30d      	bcc.n	b53d6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b53ba:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b53bc:	5d5a      	ldrb	r2, [r3, r5]
   b53be:	42b2      	cmp	r2, r6
   b53c0:	d009      	beq.n	b53d6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b53c2:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b53c4:	4620      	mov	r0, r4
   b53c6:	68a5      	ldr	r5, [r4, #8]
   b53c8:	f002 fe7c 	bl	b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b53cc:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b53ce:	6823      	ldr	r3, [r4, #0]
   b53d0:	4620      	mov	r0, r4
   b53d2:	691b      	ldr	r3, [r3, #16]
   b53d4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b53d6:	6860      	ldr	r0, [r4, #4]
        }
   b53d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b53dc:	f002 bf0c 	b.w	b81f8 <os_mutex_recursive_unlock>

000b53e0 <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b53e0:	b508      	push	{r3, lr}
   b53e2:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b53e4:	2140      	movs	r1, #64	; 0x40
   b53e6:	f7ff ffdd 	bl	b53a4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b53ea:	bd08      	pop	{r3, pc}

000b53ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b53ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53ee:	4604      	mov	r4, r0
   b53f0:	3004      	adds	r0, #4
   b53f2:	460d      	mov	r5, r1
   b53f4:	f7ff fde4 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b53f8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b53fa:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b53fc:	3b08      	subs	r3, #8
   b53fe:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5400:	bf23      	ittte	cs
   b5402:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5404:	1949      	addcs	r1, r1, r5
   b5406:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b540a:	2600      	movcc	r6, #0
   b540c:	bf38      	it	cc
   b540e:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5410:	f002 fef2 	bl	b81f8 <os_mutex_recursive_unlock>
        }
   b5414:	4630      	mov	r0, r6
   b5416:	4639      	mov	r1, r7
   b5418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b541a <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b541a:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b541c:	2128      	movs	r1, #40	; 0x28
   b541e:	f7ff ffe5 	bl	b53ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5422:	bd08      	pop	{r3, pc}

000b5424 <_ZNK17currentStatusData17get_lastCountTimeEv>:
time_t currentStatusData::get_lastCountTime() const {
   b5424:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(CurrentData, lastCountTime));
   b5426:	2138      	movs	r1, #56	; 0x38
   b5428:	f7ff ffe0 	bl	b53ec <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b542c:	bd08      	pop	{r3, pc}

000b542e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b542e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5430:	4604      	mov	r4, r0
   b5432:	3004      	adds	r0, #4
   b5434:	460d      	mov	r5, r1
   b5436:	461e      	mov	r6, r3
   b5438:	4617      	mov	r7, r2
   b543a:	f7ff fdc1 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b543e:	68e3      	ldr	r3, [r4, #12]
   b5440:	3b08      	subs	r3, #8
   b5442:	42ab      	cmp	r3, r5
   b5444:	d312      	bcc.n	b546c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5446:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5448:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b544a:	5958      	ldr	r0, [r3, r5]
   b544c:	6851      	ldr	r1, [r2, #4]
   b544e:	42b1      	cmp	r1, r6
   b5450:	bf08      	it	eq
   b5452:	42b8      	cmpeq	r0, r7
   b5454:	d00a      	beq.n	b546c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5456:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5458:	4620      	mov	r0, r4
                        *(T *)p = value;
   b545a:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b545c:	68a5      	ldr	r5, [r4, #8]
   b545e:	f002 fe31 	bl	b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5462:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5464:	6823      	ldr	r3, [r4, #0]
   b5466:	4620      	mov	r0, r4
   b5468:	691b      	ldr	r3, [r3, #16]
   b546a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b546c:	6860      	ldr	r0, [r4, #4]
        }
   b546e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5472:	f002 bec1 	b.w	b81f8 <os_mutex_recursive_unlock>

000b5476 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5476:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5478:	2128      	movs	r1, #40	; 0x28
   b547a:	f7ff ffd8 	bl	b542e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b547e:	bd08      	pop	{r3, pc}

000b5480 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5480:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5482:	2138      	movs	r1, #56	; 0x38
   b5484:	f7ff ffd3 	bl	b542e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5488:	bd08      	pop	{r3, pc}

000b548a <_ZN17currentStatusData22set_alertTimestampNodeEx>:

time_t currentStatusData::get_alertTimestampNode() const {
    return getValue<time_t>(offsetof(CurrentData, alertTimestampNode));
}

void currentStatusData::set_alertTimestampNode(time_t value) {
   b548a:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b548c:	2148      	movs	r1, #72	; 0x48
   b548e:	f7ff ffce 	bl	b542e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5492:	bd08      	pop	{r3, pc}

000b5494 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b5494:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b5496:	4917      	ldr	r1, [pc, #92]	; (b54f4 <_Z15resetEverythingv+0x60>)
   b5498:	4817      	ldr	r0, [pc, #92]	; (b54f8 <_Z15resetEverythingv+0x64>)
   b549a:	f7fe fe67 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b549e:	f7ff fe33 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b54a2:	2100      	movs	r1, #0
   b54a4:	f7ff fef5 	bl	b5292 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b54a8:	f7ff fe2e 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b54ac:	2100      	movs	r1, #0
   b54ae:	f7ff feea 	bl	b5286 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b54b2:	f7ff fe29 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b54b6:	4604      	mov	r4, r0
   b54b8:	f005 fd41 	bl	baf3e <_ZN9TimeClass3nowEv>
   b54bc:	4602      	mov	r2, r0
   b54be:	17c3      	asrs	r3, r0, #31
   b54c0:	4620      	mov	r0, r4
   b54c2:	f7ff ffdd 	bl	b5480 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_alertCodeNode(0);
   b54c6:	f7ff fe1f 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b54ca:	2100      	movs	r1, #0
   b54cc:	f7ff ff48 	bl	b5360 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(Time.now());
   b54d0:	f7ff fe1a 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b54d4:	4604      	mov	r4, r0
   b54d6:	f005 fd32 	bl	baf3e <_ZN9TimeClass3nowEv>
   b54da:	4602      	mov	r2, r0
   b54dc:	17c3      	asrs	r3, r0, #31
   b54de:	4620      	mov	r0, r4
   b54e0:	f7ff ffd3 	bl	b548a <_ZN17currentStatusData22set_alertTimestampNodeEx>
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b54e4:	f7ff fdc0 	bl	b5068 <_ZN13sysStatusData8instanceEv>
}
   b54e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b54ec:	2100      	movs	r1, #0
   b54ee:	f7ff bf25 	b.w	b533c <_ZN13sysStatusData14set_resetCountEh>
   b54f2:	bf00      	nop
   b54f4:	000bc8e0 	.word	0x000bc8e0
   b54f8:	2003e658 	.word	0x2003e658

000b54fc <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b54fc:	4b08      	ldr	r3, [pc, #32]	; (b5520 <_GLOBAL__sub_I_fram+0x24>)
   b54fe:	2201      	movs	r2, #1

void currentStatusData::logData(const char *msg) {
    Log.info("Current Structure values - %d, %d, %d, %4.2f", currentData.deviceID, currentData.nodeNumber, currentData.internalTempC, currentData.stateOfCharge);
}
   b5500:	b510      	push	{r4, lr}
   b5502:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b5504:	f005 ff9c 	bl	bb440 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5508:	4c06      	ldr	r4, [pc, #24]	; (b5524 <_GLOBAL__sub_I_fram+0x28>)
   b550a:	4601      	mov	r1, r0
   b550c:	2300      	movs	r3, #0
   b550e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5512:	4620      	mov	r0, r4
   b5514:	f001 fa16 	bl	b6944 <_ZN6MB85RCC1ER7TwoWireji>
   b5518:	4b03      	ldr	r3, [pc, #12]	; (b5528 <_GLOBAL__sub_I_fram+0x2c>)
   b551a:	6023      	str	r3, [r4, #0]
}
   b551c:	bd10      	pop	{r4, pc}
   b551e:	bf00      	nop
   b5520:	2003e37c 	.word	0x2003e37c
   b5524:	2003e388 	.word	0x2003e388
   b5528:	000bc90c 	.word	0x000bc90c

000b552c <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b552c:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b552e:	4913      	ldr	r1, [pc, #76]	; (b557c <_Z18initializePinModesv+0x50>)
   b5530:	4813      	ldr	r0, [pc, #76]	; (b5580 <_Z18initializePinModesv+0x54>)
   b5532:	f7fe fe1b 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5536:	2102      	movs	r1, #2
   b5538:	2004      	movs	r0, #4
   b553a:	f005 feff 	bl	bb33c <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b553e:	2100      	movs	r1, #0
   b5540:	2008      	movs	r0, #8
   b5542:	f005 fefb 	bl	bb33c <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5546:	2101      	movs	r1, #1
   b5548:	2007      	movs	r0, #7
   b554a:	f005 fef7 	bl	bb33c <pinMode>
    pinMode(INT_PIN, INPUT);
   b554e:	2100      	movs	r1, #0
   b5550:	2012      	movs	r0, #18
   b5552:	f005 fef3 	bl	bb33c <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b5556:	2101      	movs	r1, #1
   b5558:	2011      	movs	r0, #17
   b555a:	f005 feef 	bl	bb33c <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b555e:	2101      	movs	r1, #1
   b5560:	2010      	movs	r0, #16
   b5562:	f005 feeb 	bl	bb33c <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b5566:	2100      	movs	r1, #0
   b5568:	2010      	movs	r0, #16
   b556a:	f005 fef8 	bl	bb35e <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b556e:	2100      	movs	r1, #0
   b5570:	2011      	movs	r0, #17
   b5572:	f005 fef4 	bl	bb35e <digitalWrite>
    return true;
}
   b5576:	2001      	movs	r0, #1
   b5578:	bd08      	pop	{r3, pc}
   b557a:	bf00      	nop
   b557c:	000bc978 	.word	0x000bc978
   b5580:	2003e658 	.word	0x2003e658

000b5584 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b5584:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5586:	4918      	ldr	r1, [pc, #96]	; (b55e8 <_Z18initializePowerCfgv+0x64>)
   b5588:	4818      	ldr	r0, [pc, #96]	; (b55ec <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b558a:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b558c:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b558e:	f7fe fded 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5592:	4622      	mov	r2, r4
   b5594:	2100      	movs	r1, #0
   b5596:	4668      	mov	r0, sp
   b5598:	f006 fd10 	bl	bbfbc <memset>
   b559c:	4622      	mov	r2, r4
   b559e:	2100      	movs	r1, #0
   b55a0:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b55a4:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b55a8:	f006 fd08 	bl	bbfbc <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   b55ac:	2100      	movs	r1, #0
   b55ae:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b55b2:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b55b6:	f003 f895 	bl	b86e4 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b55ba:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b55be:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b55c2:	4b0b      	ldr	r3, [pc, #44]	; (b55f0 <_Z18initializePowerCfgv+0x6c>)
   b55c4:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b55c6:	f241 0370 	movw	r3, #4208	; 0x1070
   b55ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b55ce:	9b00      	ldr	r3, [sp, #0]
   b55d0:	2100      	movs	r1, #0
   b55d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b55d6:	4668      	mov	r0, sp
   b55d8:	9300      	str	r3, [sp, #0]
   b55da:	f003 f883 	bl	b86e4 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b55de:	3800      	subs	r0, #0
   b55e0:	bf18      	it	ne
   b55e2:	2001      	movne	r0, #1
   b55e4:	b010      	add	sp, #64	; 0x40
   b55e6:	bd10      	pop	{r4, pc}
   b55e8:	000bc991 	.word	0x000bc991
   b55ec:	2003e658 	.word	0x2003e658
   b55f0:	03840384 	.word	0x03840384

000b55f4 <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b55f4:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b55f6:	4905      	ldr	r1, [pc, #20]	; (b560c <_Z20setNodeConfigurationv+0x18>)
   b55f8:	4805      	ldr	r0, [pc, #20]	; (b5610 <_Z20setNodeConfigurationv+0x1c>)
   b55fa:	f7fe fdb7 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b55fe:	f7ff fd33 	bl	b5068 <_ZN13sysStatusData8instanceEv>
  // sysStatus.set_deviceID(32148);
  // sysStatus.set_structuresVersion(14);
   b5602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b5606:	2101      	movs	r1, #1
   b5608:	f7ff beea 	b.w	b53e0 <_ZN13sysStatusData14set_sensorTypeEb>
   b560c:	000bc9b8 	.word	0x000bc9b8
   b5610:	2003e658 	.word	0x2003e658

000b5614 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5614:	4770      	bx	lr

000b5616 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b5616:	6a00      	ldr	r0, [r0, #32]
   b5618:	6803      	ldr	r3, [r0, #0]
   b561a:	68db      	ldr	r3, [r3, #12]
   b561c:	4718      	bx	r3
	...

000b5620 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b5620:	4b0a      	ldr	r3, [pc, #40]	; (b564c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b5622:	b510      	push	{r4, lr}
   b5624:	4604      	mov	r4, r0
   b5626:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b5628:	f003 ffd2 	bl	b95d0 <_ZN5spark10LogManager8instanceEv>
   b562c:	4621      	mov	r1, r4
   b562e:	f004 fa0a 	bl	b9a46 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b5632:	f005 fd6b 	bl	bb10c <_Z16_fetch_usbserialv>
   b5636:	f005 fd5b 	bl	bb0f0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b563a:	4620      	mov	r0, r4
   b563c:	4b04      	ldr	r3, [pc, #16]	; (b5650 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b563e:	f840 3b04 	str.w	r3, [r0], #4
   b5642:	f004 f89b 	bl	b977c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b5646:	4620      	mov	r0, r4
   b5648:	bd10      	pop	{r4, pc}
   b564a:	bf00      	nop
   b564c:	000bc9f4 	.word	0x000bc9f4
   b5650:	000bc9dc 	.word	0x000bc9dc

000b5654 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b5654:	b510      	push	{r4, lr}
   b5656:	4604      	mov	r4, r0
    }
   b5658:	f7ff ffe2 	bl	b5620 <_ZN5spark16SerialLogHandlerD1Ev>
   b565c:	4620      	mov	r0, r4
   b565e:	2124      	movs	r1, #36	; 0x24
   b5660:	f7fe fd1d 	bl	b409e <_ZdlPvj>
   b5664:	4620      	mov	r0, r4
   b5666:	bd10      	pop	{r4, pc}

000b5668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5668:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b566a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b566c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b566e:	b17c      	cbz	r4, b5690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5670:	6863      	ldr	r3, [r4, #4]
   b5672:	3b01      	subs	r3, #1
   b5674:	6063      	str	r3, [r4, #4]
   b5676:	b95b      	cbnz	r3, b5690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5678:	6823      	ldr	r3, [r4, #0]
   b567a:	4620      	mov	r0, r4
   b567c:	689b      	ldr	r3, [r3, #8]
   b567e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5680:	68a3      	ldr	r3, [r4, #8]
   b5682:	3b01      	subs	r3, #1
   b5684:	60a3      	str	r3, [r4, #8]
   b5686:	b91b      	cbnz	r3, b5690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5688:	6823      	ldr	r3, [r4, #0]
   b568a:	4620      	mov	r0, r4
   b568c:	68db      	ldr	r3, [r3, #12]
   b568e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5690:	4628      	mov	r0, r5
   b5692:	bd38      	pop	{r3, r4, r5, pc}

000b5694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5694:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5696:	e9d0 5300 	ldrd	r5, r3, [r0]
   b569a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b569c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b569e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b56a2:	42ae      	cmp	r6, r5
   b56a4:	d004      	beq.n	b56b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b56a6:	4628      	mov	r0, r5
   b56a8:	f005 f954 	bl	ba954 <_ZN6StringD1Ev>
   b56ac:	3514      	adds	r5, #20
   b56ae:	e7f8      	b.n	b56a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b56b0:	6820      	ldr	r0, [r4, #0]
   b56b2:	f003 f8c5 	bl	b8840 <free>
    AllocatorT::free(data_);
}
   b56b6:	4620      	mov	r0, r4
   b56b8:	bd70      	pop	{r4, r5, r6, pc}

000b56ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b56ba:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b56bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56be:	4604      	mov	r4, r0
   b56c0:	460d      	mov	r5, r1
   b56c2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b56c4:	d916      	bls.n	b56f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b56c6:	4290      	cmp	r0, r2
   b56c8:	d215      	bcs.n	b56f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b56ca:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b56ce:	1a75      	subs	r5, r6, r1
   b56d0:	f1a1 0714 	sub.w	r7, r1, #20
   b56d4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b56d6:	42b7      	cmp	r7, r6
   b56d8:	d01c      	beq.n	b5714 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b56da:	b12c      	cbz	r4, b56e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b56dc:	4631      	mov	r1, r6
   b56de:	4620      	mov	r0, r4
   b56e0:	f005 f9b4 	bl	baa4c <_ZN6StringC1EOS_>
   b56e4:	7c33      	ldrb	r3, [r6, #16]
   b56e6:	7423      	strb	r3, [r4, #16]
   b56e8:	4630      	mov	r0, r6
   b56ea:	f005 f933 	bl	ba954 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b56ee:	3e14      	subs	r6, #20
   b56f0:	3c14      	subs	r4, #20
   b56f2:	e7f0      	b.n	b56d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b56f4:	d00e      	beq.n	b5714 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b56f6:	42b5      	cmp	r5, r6
   b56f8:	d00c      	beq.n	b5714 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b56fa:	b12c      	cbz	r4, b5708 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b56fc:	4629      	mov	r1, r5
   b56fe:	4620      	mov	r0, r4
   b5700:	f005 f9a4 	bl	baa4c <_ZN6StringC1EOS_>
   b5704:	7c2b      	ldrb	r3, [r5, #16]
   b5706:	7423      	strb	r3, [r4, #16]
   b5708:	4628      	mov	r0, r5
   b570a:	f005 f923 	bl	ba954 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b570e:	3514      	adds	r5, #20
   b5710:	3414      	adds	r4, #20
   b5712:	e7f0      	b.n	b56f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b571a:	2300      	movs	r3, #0
   b571c:	e9c0 3300 	strd	r3, r3, [r0]
   b5720:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5722:	684f      	ldr	r7, [r1, #4]
   b5724:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5726:	4604      	mov	r4, r0
   b5728:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b572a:	dd23      	ble.n	b5774 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b572c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5730:	fb08 f007 	mul.w	r0, r8, r7
   b5734:	f003 f87c 	bl	b8830 <malloc>
            if (!d) {
   b5738:	4605      	mov	r5, r0
   b573a:	b1d8      	cbz	r0, b5774 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b573c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5740:	fb08 1202 	mla	r2, r8, r2, r1
   b5744:	f7ff ffb9 	bl	b56ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5748:	6820      	ldr	r0, [r4, #0]
   b574a:	f003 f879 	bl	b8840 <free>
        data_ = d;
   b574e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5750:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5752:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5756:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b575a:	45b8      	cmp	r8, r7
   b575c:	d008      	beq.n	b5770 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b575e:	4639      	mov	r1, r7
   b5760:	4628      	mov	r0, r5
   b5762:	f005 f98d 	bl	baa80 <_ZN6StringC1ERKS_>
   b5766:	7c3b      	ldrb	r3, [r7, #16]
   b5768:	742b      	strb	r3, [r5, #16]
   b576a:	3714      	adds	r7, #20
   b576c:	3514      	adds	r5, #20
   b576e:	e7f4      	b.n	b575a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5770:	6873      	ldr	r3, [r6, #4]
   b5772:	6063      	str	r3, [r4, #4]
}
   b5774:	4620      	mov	r0, r4
   b5776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b577c <_GLOBAL__sub_I_SystemMode>:
   b577c:	b570      	push	{r4, r5, r6, lr}
   b577e:	4b27      	ldr	r3, [pc, #156]	; (b581c <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b5780:	4a27      	ldr	r2, [pc, #156]	; (b5820 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b5782:	2501      	movs	r5, #1
   b5784:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5786:	4b27      	ldr	r3, [pc, #156]	; (b5824 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5788:	2400      	movs	r4, #0
   b578a:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b578c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b578e:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5792:	2002      	movs	r0, #2
   b5794:	f002 ff62 	bl	b865c <set_system_mode>
   b5798:	4621      	mov	r1, r4
   b579a:	4628      	mov	r0, r5
   b579c:	f002 ff76 	bl	b868c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b57a0:	4629      	mov	r1, r5
   b57a2:	2004      	movs	r0, #4
   b57a4:	f002 fd38 	bl	b8218 <HAL_Feature_Set>
        capacity_(0) {
   b57a8:	e9cd 4400 	strd	r4, r4, [sp]
   b57ac:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b57ae:	f005 fcad 	bl	bb10c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b57b2:	4c1d      	ldr	r4, [pc, #116]	; (b5828 <_GLOBAL__sub_I_SystemMode+0xac>)
   b57b4:	4605      	mov	r5, r0
   b57b6:	4669      	mov	r1, sp
   b57b8:	a803      	add	r0, sp, #12
   b57ba:	f7ff ffac 	bl	b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b57be:	4626      	mov	r6, r4
        stream_(&stream) {
   b57c0:	a903      	add	r1, sp, #12
   b57c2:	a806      	add	r0, sp, #24
   b57c4:	f7ff ffa7 	bl	b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b57c8:	4b18      	ldr	r3, [pc, #96]	; (b582c <_GLOBAL__sub_I_SystemMode+0xb0>)
   b57ca:	f846 3b04 	str.w	r3, [r6], #4
   b57ce:	a906      	add	r1, sp, #24
   b57d0:	a809      	add	r0, sp, #36	; 0x24
   b57d2:	f7ff ffa0 	bl	b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b57d6:	aa09      	add	r2, sp, #36	; 0x24
   b57d8:	211e      	movs	r1, #30
   b57da:	4630      	mov	r0, r6
   b57dc:	f004 fa16 	bl	b9c0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b57e0:	a809      	add	r0, sp, #36	; 0x24
   b57e2:	f7ff ff57 	bl	b5694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b57e6:	a806      	add	r0, sp, #24
   b57e8:	f7ff ff54 	bl	b5694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b57ec:	4b10      	ldr	r3, [pc, #64]	; (b5830 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b57ee:	6023      	str	r3, [r4, #0]
   b57f0:	6225      	str	r5, [r4, #32]
   b57f2:	a803      	add	r0, sp, #12
   b57f4:	f7ff ff4e 	bl	b5694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b57f8:	4b0e      	ldr	r3, [pc, #56]	; (b5834 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b57fa:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b57fc:	f005 fc86 	bl	bb10c <_Z16_fetch_usbserialv>
   b5800:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5804:	f005 fc70 	bl	bb0e8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5808:	f003 fee2 	bl	b95d0 <_ZN5spark10LogManager8instanceEv>
   b580c:	4621      	mov	r1, r4
   b580e:	f004 f8d3 	bl	b99b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   b5812:	4668      	mov	r0, sp
   b5814:	f7ff ff3e 	bl	b5694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5818:	b00c      	add	sp, #48	; 0x30
   b581a:	bd70      	pop	{r4, r5, r6, pc}
   b581c:	2003e3a4 	.word	0x2003e3a4
   b5820:	ffff0000 	.word	0xffff0000
   b5824:	2003e398 	.word	0x2003e398
   b5828:	2003e3a8 	.word	0x2003e3a8
   b582c:	000bc9dc 	.word	0x000bc9dc
   b5830:	000bd288 	.word	0x000bd288
   b5834:	000bc9f4 	.word	0x000bc9f4

000b5838 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b5838:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b583a:	6803      	ldr	r3, [r0, #0]
   b583c:	2b2f      	cmp	r3, #47	; 0x2f
{
   b583e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5840:	d904      	bls.n	b584c <nrf_gpio_pin_port_decode+0x14>
   b5842:	4a07      	ldr	r2, [pc, #28]	; (b5860 <nrf_gpio_pin_port_decode+0x28>)
   b5844:	4907      	ldr	r1, [pc, #28]	; (b5864 <nrf_gpio_pin_port_decode+0x2c>)
   b5846:	200a      	movs	r0, #10
   b5848:	f002 fece 	bl	b85e8 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b584c:	6823      	ldr	r3, [r4, #0]
   b584e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5850:	bf83      	ittte	hi
   b5852:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b5856:	4804      	ldrhi	r0, [pc, #16]	; (b5868 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5858:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b585a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b585e:	bd10      	pop	{r4, pc}
   b5860:	000b8239 	.word	0x000b8239
   b5864:	000bca7d 	.word	0x000bca7d
   b5868:	50000300 	.word	0x50000300

000b586c <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b586c:	ee07 0a90 	vmov	s15, r0
   b5870:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5898 <_Z17tmp36TemperatureCi+0x2c>
   b5874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5878:	ee67 7a87 	vmul.f32	s15, s15, s14
   b587c:	ed9f 7a07 	vldr	s14, [pc, #28]	; b589c <_Z17tmp36TemperatureCi+0x30>
   b5880:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5884:	eddf 7a06 	vldr	s15, [pc, #24]	; b58a0 <_Z17tmp36TemperatureCi+0x34>
   b5888:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b588c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5890:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5894:	4770      	bx	lr
   b5896:	bf00      	nop
   b5898:	454e4000 	.word	0x454e4000
   b589c:	457ff000 	.word	0x457ff000
   b58a0:	43fa0000 	.word	0x43fa0000

000b58a4 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b58a4:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b58a6:	2101      	movs	r1, #1
   b58a8:	a801      	add	r0, sp, #4
   b58aa:	f004 fd62 	bl	ba372 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b58ae:	f7ff fc2b 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b58b2:	f7ff fd10 	bl	b52d6 <_ZNK17currentStatusData17get_internalTempCEv>
   b58b6:	f7ff fc27 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b58ba:	f7ff fd0c 	bl	b52d6 <_ZNK17currentStatusData17get_internalTempCEv>
   b58be:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b58c0:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b58c2:	d90d      	bls.n	b58e0 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b58c4:	f004 fde8 	bl	ba498 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b58c8:	f7ff fc1e 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b58cc:	2101      	movs	r1, #1
   b58ce:	f7ff fd41 	bl	b5354 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b58d2:	2400      	movs	r4, #0
  PMIC pmic(true);
   b58d4:	a801      	add	r0, sp, #4
   b58d6:	f004 fd5b 	bl	ba390 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b58da:	4620      	mov	r0, r4
   b58dc:	b002      	add	sp, #8
   b58de:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b58e0:	f004 fdbf 	bl	ba462 <_ZN4PMIC14enableChargingEv>
    return true;
   b58e4:	2401      	movs	r4, #1
   b58e6:	e7f5      	b.n	b58d4 <_Z16isItSafeToChargev+0x30>

000b58e8 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b58e8:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b58ea:	4d19      	ldr	r5, [pc, #100]	; (b5950 <_Z17getSignalStrengthv+0x68>)
   b58ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b58ee:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b58f0:	ac0c      	add	r4, sp, #48	; 0x30
   b58f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b58f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b58f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b58f8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b58fc:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b5900:	4914      	ldr	r1, [pc, #80]	; (b5954 <_Z17getSignalStrengthv+0x6c>)
   b5902:	a804      	add	r0, sp, #16
   b5904:	f003 f86a 	bl	b89dc <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b5908:	a804      	add	r0, sp, #16
   b590a:	f003 f8aa 	bl	b8a62 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b590e:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b5910:	a804      	add	r0, sp, #16
   b5912:	f003 f8df 	bl	b8ad4 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b5916:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b5918:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b591c:	f003 f90a 	bl	b8b34 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5920:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b5922:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5926:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b592a:	f005 ff7d 	bl	bb828 <__aeabi_f2d>
   b592e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5932:	4628      	mov	r0, r5
   b5934:	f005 ff78 	bl	bb828 <__aeabi_f2d>
   b5938:	e9cd 0100 	strd	r0, r1, [sp]
   b593c:	4a06      	ldr	r2, [pc, #24]	; (b5958 <_Z17getSignalStrengthv+0x70>)
   b593e:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b5942:	4806      	ldr	r0, [pc, #24]	; (b595c <_Z17getSignalStrengthv+0x74>)
   b5944:	2140      	movs	r1, #64	; 0x40
   b5946:	f002 ff93 	bl	b8870 <snprintf>
}
   b594a:	b017      	add	sp, #92	; 0x5c
   b594c:	bd30      	pop	{r4, r5, pc}
   b594e:	bf00      	nop
   b5950:	000bcb20 	.word	0x000bcb20
   b5954:	2003e614 	.word	0x2003e614
   b5958:	000bcaa1 	.word	0x000bcaa1
   b595c:	2003de84 	.word	0x2003de84

000b5960 <_Z11recordCountv>:
 * is the same regardless.  The sensor will trigger an interrupt, which will set a flag. In the main loop
 * that flag will call this function which will determine if this event should "count" as a visitor.
 * 
 */
void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b5960:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5962:	4e4e      	ldr	r6, [pc, #312]	; (b5a9c <_Z11recordCountv+0x13c>)
   b5964:	4c4e      	ldr	r4, [pc, #312]	; (b5aa0 <_Z11recordCountv+0x140>)
   b5966:	7833      	ldrb	r3, [r6, #0]
   b5968:	f3bf 8f5b 	dmb	ish
   b596c:	f013 0f01 	tst.w	r3, #1
   b5970:	b085      	sub	sp, #20
   b5972:	d109      	bne.n	b5988 <_Z11recordCountv+0x28>
   b5974:	4630      	mov	r0, r6
   b5976:	f7fe fba1 	bl	b40bc <__cxa_guard_acquire>
   b597a:	b128      	cbz	r0, b5988 <_Z11recordCountv+0x28>
   b597c:	f002 fc8c 	bl	b8298 <HAL_Pin_Map>
   b5980:	6020      	str	r0, [r4, #0]
   b5982:	4630      	mov	r0, r6
   b5984:	f7fe fb9f 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5988:	4b46      	ldr	r3, [pc, #280]	; (b5aa4 <_Z11recordCountv+0x144>)
   b598a:	881d      	ldrh	r5, [r3, #0]
   b598c:	6823      	ldr	r3, [r4, #0]
   b598e:	012d      	lsls	r5, r5, #4
   b5990:	5d5b      	ldrb	r3, [r3, r5]
   b5992:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5994:	7833      	ldrb	r3, [r6, #0]
   b5996:	f3bf 8f5b 	dmb	ish
   b599a:	07d9      	lsls	r1, r3, #31
   b599c:	d409      	bmi.n	b59b2 <_Z11recordCountv+0x52>
   b599e:	483f      	ldr	r0, [pc, #252]	; (b5a9c <_Z11recordCountv+0x13c>)
   b59a0:	f7fe fb8c 	bl	b40bc <__cxa_guard_acquire>
   b59a4:	b128      	cbz	r0, b59b2 <_Z11recordCountv+0x52>
   b59a6:	f002 fc77 	bl	b8298 <HAL_Pin_Map>
   b59aa:	6020      	str	r0, [r4, #0]
   b59ac:	483b      	ldr	r0, [pc, #236]	; (b5a9c <_Z11recordCountv+0x13c>)
   b59ae:	f7fe fb8a 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b59b2:	6823      	ldr	r3, [r4, #0]
   b59b4:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b59b6:	a803      	add	r0, sp, #12
   b59b8:	785b      	ldrb	r3, [r3, #1]
   b59ba:	f003 031f 	and.w	r3, r3, #31
   b59be:	433b      	orrs	r3, r7
   b59c0:	9303      	str	r3, [sp, #12]
   b59c2:	f7ff ff39 	bl	b5838 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b59c6:	9a03      	ldr	r2, [sp, #12]
   b59c8:	2301      	movs	r3, #1
   b59ca:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b59cc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b59d0:	f7ff fb9a 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b59d4:	4607      	mov	r7, r0
   b59d6:	f005 fab2 	bl	baf3e <_ZN9TimeClass3nowEv>
   b59da:	4602      	mov	r2, r0
   b59dc:	17c3      	asrs	r3, r0, #31
   b59de:	4638      	mov	r0, r7
   b59e0:	f7ff fd4e 	bl	b5480 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b59e4:	f7ff fb90 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b59e8:	4607      	mov	r7, r0
   b59ea:	f7ff fb8d 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b59ee:	f7ff fc10 	bl	b5212 <_ZNK17currentStatusData15get_hourlyCountEv>
   b59f2:	3001      	adds	r0, #1
   b59f4:	b281      	uxth	r1, r0
   b59f6:	4638      	mov	r0, r7
   b59f8:	f7ff fc45 	bl	b5286 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b59fc:	f7ff fb84 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b5a00:	4607      	mov	r7, r0
   b5a02:	f7ff fb81 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b5a06:	f7ff fc09 	bl	b521c <_ZNK17currentStatusData14get_dailyCountEv>
   b5a0a:	3001      	adds	r0, #1
   b5a0c:	b281      	uxth	r1, r0
   b5a0e:	4638      	mov	r0, r7
   b5a10:	f7ff fc3f 	bl	b5292 <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b5a14:	f7ff fb78 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b5a18:	f7ff fbfb 	bl	b5212 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5a1c:	9001      	str	r0, [sp, #4]
   b5a1e:	f7ff fb73 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b5a22:	f7ff fbfb 	bl	b521c <_ZNK17currentStatusData14get_dailyCountEv>
   b5a26:	9a01      	ldr	r2, [sp, #4]
   b5a28:	491f      	ldr	r1, [pc, #124]	; (b5aa8 <_Z11recordCountv+0x148>)
   b5a2a:	4603      	mov	r3, r0
   b5a2c:	481f      	ldr	r0, [pc, #124]	; (b5aac <_Z11recordCountv+0x14c>)
   b5a2e:	f7fe fb9d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b5a32:	20c8      	movs	r0, #200	; 0xc8
   b5a34:	f002 ff6c 	bl	b8910 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5a38:	7833      	ldrb	r3, [r6, #0]
   b5a3a:	f3bf 8f5b 	dmb	ish
   b5a3e:	07da      	lsls	r2, r3, #31
   b5a40:	d409      	bmi.n	b5a56 <_Z11recordCountv+0xf6>
   b5a42:	4816      	ldr	r0, [pc, #88]	; (b5a9c <_Z11recordCountv+0x13c>)
   b5a44:	f7fe fb3a 	bl	b40bc <__cxa_guard_acquire>
   b5a48:	b128      	cbz	r0, b5a56 <_Z11recordCountv+0xf6>
   b5a4a:	f002 fc25 	bl	b8298 <HAL_Pin_Map>
   b5a4e:	6020      	str	r0, [r4, #0]
   b5a50:	4812      	ldr	r0, [pc, #72]	; (b5a9c <_Z11recordCountv+0x13c>)
   b5a52:	f7fe fb38 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5a56:	6823      	ldr	r3, [r4, #0]
   b5a58:	5d5b      	ldrb	r3, [r3, r5]
   b5a5a:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5a5c:	7833      	ldrb	r3, [r6, #0]
   b5a5e:	f3bf 8f5b 	dmb	ish
   b5a62:	07db      	lsls	r3, r3, #31
   b5a64:	d409      	bmi.n	b5a7a <_Z11recordCountv+0x11a>
   b5a66:	480d      	ldr	r0, [pc, #52]	; (b5a9c <_Z11recordCountv+0x13c>)
   b5a68:	f7fe fb28 	bl	b40bc <__cxa_guard_acquire>
   b5a6c:	b128      	cbz	r0, b5a7a <_Z11recordCountv+0x11a>
   b5a6e:	f002 fc13 	bl	b8298 <HAL_Pin_Map>
   b5a72:	6020      	str	r0, [r4, #0]
   b5a74:	4809      	ldr	r0, [pc, #36]	; (b5a9c <_Z11recordCountv+0x13c>)
   b5a76:	f7fe fb26 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5a7a:	6823      	ldr	r3, [r4, #0]
   b5a7c:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5a7e:	a803      	add	r0, sp, #12
   b5a80:	786b      	ldrb	r3, [r5, #1]
   b5a82:	f003 031f 	and.w	r3, r3, #31
   b5a86:	433b      	orrs	r3, r7
   b5a88:	9303      	str	r3, [sp, #12]
   b5a8a:	f7ff fed5 	bl	b5838 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b5a8e:	9a03      	ldr	r2, [sp, #12]
   b5a90:	2301      	movs	r3, #1
   b5a92:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b5a94:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);
   b5a98:	b005      	add	sp, #20
   b5a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5a9c:	2003e3cc 	.word	0x2003e3cc
   b5aa0:	2003e3d0 	.word	0x2003e3d0
   b5aa4:	000bc9ac 	.word	0x000bc9ac
   b5aa8:	000bcaba 	.word	0x000bcaba
   b5aac:	2003e658 	.word	0x2003e658

000b5ab0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b5ab0:	b530      	push	{r4, r5, lr}
   b5ab2:	b085      	sub	sp, #20
   b5ab4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b5ab6:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5ab8:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b5aba:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b5abc:	f002 fdbc 	bl	b8638 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5ac0:	b990      	cbnz	r0, b5ae8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b5ac2:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b5ac4:	b10c      	cbz	r4, b5aca <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b5ac6:	6923      	ldr	r3, [r4, #16]
   b5ac8:	b923      	cbnz	r3, b5ad4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b5aca:	4a08      	ldr	r2, [pc, #32]	; (b5aec <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b5acc:	4908      	ldr	r1, [pc, #32]	; (b5af0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b5ace:	200a      	movs	r0, #10
   b5ad0:	f002 fd8a 	bl	b85e8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5ad4:	230c      	movs	r3, #12
   b5ad6:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b5ada:	2304      	movs	r3, #4
   b5adc:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5ade:	aa01      	add	r2, sp, #4
   b5ae0:	6923      	ldr	r3, [r4, #16]
   b5ae2:	2101      	movs	r1, #1
   b5ae4:	4620      	mov	r0, r4
   b5ae6:	4798      	blx	r3
}
   b5ae8:	b005      	add	sp, #20
   b5aea:	bd30      	pop	{r4, r5, pc}
   b5aec:	000b8239 	.word	0x000b8239
   b5af0:	000bcad7 	.word	0x000bcad7

000b5af4 <_Z12batteryStatev>:
bool batteryState() {
   b5af4:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b5af6:	f7ff fb07 	bl	b5108 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b5afa:	a901      	add	r1, sp, #4
   b5afc:	4604      	mov	r4, r0
   b5afe:	2007      	movs	r0, #7
   b5b00:	f7ff ffd6 	bl	b5ab0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   b5b04:	1e01      	subs	r1, r0, #0
            return r;
        }
        return val;
   b5b06:	bfa8      	it	ge
   b5b08:	9901      	ldrge	r1, [sp, #4]
   b5b0a:	4620      	mov	r0, r4
   b5b0c:	b2c9      	uxtb	r1, r1
   b5b0e:	f7ff fc21 	bl	b5354 <_ZN17currentStatusData16set_batteryStateEh>
  if (sysStatus.get_lowPowerMode()) {                                        // Need to take these steps if we are sleeping
   b5b12:	f7ff faa9 	bl	b5068 <_ZN13sysStatusData8instanceEv>
   b5b16:	f7ff fc3b 	bl	b5390 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5b1a:	b130      	cbz	r0, b5b2a <_Z12batteryStatev+0x36>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b5b1c:	4817      	ldr	r0, [pc, #92]	; (b5b7c <_Z12batteryStatev+0x88>)
   b5b1e:	f003 f8d3 	bl	b8cc8 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b5b22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5b26:	f002 fef3 	bl	b8910 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b5b2a:	f7ff faed 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b5b2e:	a901      	add	r1, sp, #4
   b5b30:	4604      	mov	r4, r0
   b5b32:	2003      	movs	r0, #3
   b5b34:	f7ff ffbc 	bl	b5ab0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b5b38:	b9e8      	cbnz	r0, b5b76 <_Z12batteryStatev+0x82>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b5b3a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b5b3e:	ee07 3a90 	vmov	s15, r3
   b5b42:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b5b46:	ee17 0a90 	vmov	r0, s15
   b5b4a:	f005 fe6d 	bl	bb828 <__aeabi_f2d>
   b5b4e:	ec41 0b10 	vmov	d0, r0, r1
   b5b52:	4620      	mov	r0, r4
   b5b54:	f7ff fb14 	bl	b5180 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b5b58:	f7ff fad6 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b5b5c:	f7ff faf0 	bl	b5140 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5b60:	4b07      	ldr	r3, [pc, #28]	; (b5b80 <_Z12batteryStatev+0x8c>)
   b5b62:	ec51 0b10 	vmov	r0, r1, d0
   b5b66:	2200      	movs	r2, #0
   b5b68:	f006 f946 	bl	bbdf8 <__aeabi_dcmpgt>
}
   b5b6c:	3800      	subs	r0, #0
   b5b6e:	bf18      	it	ne
   b5b70:	2001      	movne	r0, #1
   b5b72:	b002      	add	sp, #8
   b5b74:	bd10      	pop	{r4, pc}
            return -1.0f;
   b5b76:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5b7a:	e7e4      	b.n	b5b46 <_Z12batteryStatev+0x52>
   b5b7c:	2003e3d4 	.word	0x2003e3d4
   b5b80:	404e0000 	.word	0x404e0000

000b5b84 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b5b84:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b5b86:	f7ff fabf 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b5b8a:	4b14      	ldr	r3, [pc, #80]	; (b5bdc <_Z16takeMeasurementsv+0x58>)
   b5b8c:	4604      	mov	r4, r0
   b5b8e:	8818      	ldrh	r0, [r3, #0]
   b5b90:	f005 fc11 	bl	bb3b6 <analogRead>
   b5b94:	f7ff fe6a 	bl	b586c <_Z17tmp36TemperatureCi>
   b5b98:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b5b9c:	4620      	mov	r0, r4
   b5b9e:	edcd 7a01 	vstr	s15, [sp, #4]
   b5ba2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b5ba6:	4c0e      	ldr	r4, [pc, #56]	; (b5be0 <_Z16takeMeasurementsv+0x5c>)
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b5ba8:	f7ff fbce 	bl	b5348 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b5bac:	f7ff faac 	bl	b5108 <_ZN17currentStatusData8instanceEv>
   b5bb0:	f7ff fb91 	bl	b52d6 <_ZNK17currentStatusData17get_internalTempCEv>
   b5bb4:	4a0b      	ldr	r2, [pc, #44]	; (b5be4 <_Z16takeMeasurementsv+0x60>)
   b5bb6:	4603      	mov	r3, r0
   b5bb8:	2110      	movs	r1, #16
   b5bba:	4620      	mov	r0, r4
   b5bbc:	f002 fe58 	bl	b8870 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   b5bc0:	4909      	ldr	r1, [pc, #36]	; (b5be8 <_Z16takeMeasurementsv+0x64>)
   b5bc2:	480a      	ldr	r0, [pc, #40]	; (b5bec <_Z16takeMeasurementsv+0x68>)
   b5bc4:	4622      	mov	r2, r4
   b5bc6:	f7fe fad1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   b5bca:	f7ff ff93 	bl	b5af4 <_Z12batteryStatev>
    isItSafeToCharge();
   b5bce:	f7ff fe69 	bl	b58a4 <_Z16isItSafeToChargev>
    getSignalStrength();
   b5bd2:	f7ff fe89 	bl	b58e8 <_Z17getSignalStrengthv>
}
   b5bd6:	2001      	movs	r0, #1
   b5bd8:	b002      	add	sp, #8
   b5bda:	bd10      	pop	{r4, pc}
   b5bdc:	000bc9b6 	.word	0x000bc9b6
   b5be0:	2003de74 	.word	0x2003de74
   b5be4:	000bcafd 	.word	0x000bcafd
   b5be8:	000bcb02 	.word	0x000bcb02
   b5bec:	2003e658 	.word	0x2003e658

000b5bf0 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b5bf0:	4801      	ldr	r0, [pc, #4]	; (b5bf8 <_GLOBAL__sub_I_batteryContext+0x8>)
   b5bf2:	2100      	movs	r1, #0
   b5bf4:	f003 b824 	b.w	b8c40 <_ZN9FuelGaugeC1Eb>
   b5bf8:	2003e3d4 	.word	0x2003e3d4

000b5bfc <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b5bfc:	4770      	bx	lr

000b5bfe <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b5bfe:	b510      	push	{r4, lr}
}
   b5c00:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b5c02:	4604      	mov	r4, r0
}
   b5c04:	f7fe fa4b 	bl	b409e <_ZdlPvj>
   b5c08:	4620      	mov	r0, r4
   b5c0a:	bd10      	pop	{r4, pc}

000b5c0c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b5c0c:	b530      	push	{r4, r5, lr}
   b5c0e:	b085      	sub	sp, #20
   b5c10:	4604      	mov	r4, r0
   b5c12:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b5c14:	b160      	cbz	r0, b5c30 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b5c16:	6840      	ldr	r0, [r0, #4]
   b5c18:	b150      	cbz	r0, b5c30 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b5c1a:	6885      	ldr	r5, [r0, #8]
   b5c1c:	b145      	cbz	r5, b5c30 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b5c1e:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b5c22:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5c26:	68c4      	ldr	r4, [r0, #12]
   b5c28:	ab01      	add	r3, sp, #4
   b5c2a:	466a      	mov	r2, sp
   b5c2c:	a902      	add	r1, sp, #8
   b5c2e:	47a0      	blx	r4
    }
   b5c30:	b005      	add	sp, #20
   b5c32:	bd30      	pop	{r4, r5, pc}

000b5c34 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5c34:	b530      	push	{r4, r5, lr}
   b5c36:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b5c38:	6800      	ldr	r0, [r0, #0]
   b5c3a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b5c3c:	9301      	str	r3, [sp, #4]
   b5c3e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b5c42:	6883      	ldr	r3, [r0, #8]
   b5c44:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5c48:	b90b      	cbnz	r3, b5c4e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b5c4a:	f005 fc85 	bl	bb558 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5c4e:	68c3      	ldr	r3, [r0, #12]
   b5c50:	aa01      	add	r2, sp, #4
   b5c52:	a902      	add	r1, sp, #8
   b5c54:	4798      	blx	r3
      }
   b5c56:	b005      	add	sp, #20
   b5c58:	bd30      	pop	{r4, r5, pc}

000b5c5a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b5c5a:	2a01      	cmp	r2, #1
   b5c5c:	d102      	bne.n	b5c64 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5c5e:	6001      	str	r1, [r0, #0]
      }
   b5c60:	2000      	movs	r0, #0
   b5c62:	4770      	bx	lr
	  switch (__op)
   b5c64:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5c66:	bf04      	itt	eq
   b5c68:	680b      	ldreq	r3, [r1, #0]
   b5c6a:	6003      	streq	r3, [r0, #0]
	      break;
   b5c6c:	e7f8      	b.n	b5c60 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b5c6e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5c6e:	6803      	ldr	r3, [r0, #0]
   b5c70:	6812      	ldr	r2, [r2, #0]
   b5c72:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5c76:	4718      	bx	r3

000b5c78 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5c78:	b510      	push	{r4, lr}
      if (_M_manager)
   b5c7a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5c7c:	4604      	mov	r4, r0
      if (_M_manager)
   b5c7e:	b113      	cbz	r3, b5c86 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5c80:	2203      	movs	r2, #3
   b5c82:	4601      	mov	r1, r0
   b5c84:	4798      	blx	r3
    }
   b5c86:	4620      	mov	r0, r4
   b5c88:	bd10      	pop	{r4, pc}

000b5c8a <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b5c8a:	b510      	push	{r4, lr}
            delete callableWrapper;
   b5c8c:	4604      	mov	r4, r0
   b5c8e:	b138      	cbz	r0, b5ca0 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b5c90:	f7ff fff2 	bl	b5c78 <_ZNSt14_Function_baseD1Ev>
   b5c94:	4620      	mov	r0, r4
   b5c96:	2110      	movs	r1, #16
        };
   b5c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b5c9c:	f7fe b9ff 	b.w	b409e <_ZdlPvj>
        };
   b5ca0:	bd10      	pop	{r4, pc}

000b5ca2 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b5ca2:	b510      	push	{r4, lr}
   b5ca4:	4604      	mov	r4, r0
   b5ca6:	b08a      	sub	sp, #40	; 0x28
   b5ca8:	4608      	mov	r0, r1
    attr.flags = 0;
   b5caa:	f04f 0c20 	mov.w	ip, #32
   b5cae:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5cb0:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b5cb4:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5cb8:	460b      	mov	r3, r1
   b5cba:	aa02      	add	r2, sp, #8
   b5cbc:	6821      	ldr	r1, [r4, #0]
   b5cbe:	f002 fca3 	bl	b8608 <log_message_v>
}
   b5cc2:	b00a      	add	sp, #40	; 0x28
   b5cc4:	bd10      	pop	{r4, pc}

000b5cc6 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b5cc6:	b40e      	push	{r1, r2, r3}
   b5cc8:	b503      	push	{r0, r1, lr}
   b5cca:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b5ccc:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b5cce:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5cd2:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b5cd4:	f7ff ffe5 	bl	b5ca2 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5cd8:	b002      	add	sp, #8
   b5cda:	f85d eb04 	ldr.w	lr, [sp], #4
   b5cde:	b003      	add	sp, #12
   b5ce0:	4770      	bx	lr

000b5ce2 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5ce2:	b40e      	push	{r1, r2, r3}
   b5ce4:	b503      	push	{r0, r1, lr}
   b5ce6:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b5ce8:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5cea:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5cee:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b5cf0:	f7ff ffd7 	bl	b5ca2 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5cf4:	b002      	add	sp, #8
   b5cf6:	f85d eb04 	ldr.w	lr, [sp], #4
   b5cfa:	b003      	add	sp, #12
   b5cfc:	4770      	bx	lr
	...

000b5d00 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5d00:	b510      	push	{r4, lr}
   b5d02:	7202      	strb	r2, [r0, #8]
   b5d04:	22ff      	movs	r2, #255	; 0xff
   b5d06:	8142      	strh	r2, [r0, #10]
   b5d08:	2200      	movs	r2, #0
   b5d0a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b5d0e:	6142      	str	r2, [r0, #20]
   b5d10:	7602      	strb	r2, [r0, #24]
   b5d12:	61c2      	str	r2, [r0, #28]
    instance = this;
   b5d14:	4a02      	ldr	r2, [pc, #8]	; (b5d20 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5d16:	4c03      	ldr	r4, [pc, #12]	; (b5d24 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b5d18:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5d1a:	e9c0 4100 	strd	r4, r1, [r0]
}
   b5d1e:	bd10      	pop	{r4, pc}
   b5d20:	2003e3e0 	.word	0x2003e3e0
   b5d24:	000bcd98 	.word	0x000bcd98

000b5d28 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b5d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5d2c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b5d30:	4604      	mov	r4, r0
   b5d32:	4689      	mov	r9, r1
   b5d34:	4616      	mov	r6, r2
   b5d36:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b5d38:	f1b8 0f00 	cmp.w	r8, #0
   b5d3c:	d002      	beq.n	b5d44 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b5d3e:	6840      	ldr	r0, [r0, #4]
   b5d40:	f003 f85c 	bl	b8dfc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5d44:	7a21      	ldrb	r1, [r4, #8]
   b5d46:	6860      	ldr	r0, [r4, #4]
   b5d48:	f003 f835 	bl	b8db6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b5d4c:	6860      	ldr	r0, [r4, #4]
   b5d4e:	6803      	ldr	r3, [r0, #0]
   b5d50:	4649      	mov	r1, r9
   b5d52:	689b      	ldr	r3, [r3, #8]
   b5d54:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b5d56:	6860      	ldr	r0, [r4, #4]
   b5d58:	2100      	movs	r1, #0
   b5d5a:	f003 f84b 	bl	b8df4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b5d5e:	4605      	mov	r5, r0
   b5d60:	bb00      	cbnz	r0, b5da4 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5d62:	2301      	movs	r3, #1
   b5d64:	7a21      	ldrb	r1, [r4, #8]
   b5d66:	6860      	ldr	r0, [r4, #4]
   b5d68:	463a      	mov	r2, r7
   b5d6a:	f003 f812 	bl	b8d92 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b5d6e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5d70:	4603      	mov	r3, r0
        if (count == num) {
   b5d72:	d109      	bne.n	b5d88 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b5d74:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b5d76:	42be      	cmp	r6, r7
   b5d78:	d01c      	beq.n	b5db4 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b5d7a:	6860      	ldr	r0, [r4, #4]
   b5d7c:	6803      	ldr	r3, [r0, #0]
   b5d7e:	695b      	ldr	r3, [r3, #20]
   b5d80:	4798      	blx	r3
   b5d82:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b5d86:	e7f6      	b.n	b5d76 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b5d88:	490b      	ldr	r1, [pc, #44]	; (b5db8 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b5d8a:	480c      	ldr	r0, [pc, #48]	; (b5dbc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5d8c:	464a      	mov	r2, r9
   b5d8e:	f7ff ff9a 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b5d92:	f1b8 0f00 	cmp.w	r8, #0
   b5d96:	d002      	beq.n	b5d9e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b5d98:	6860      	ldr	r0, [r4, #4]
   b5d9a:	f003 f838 	bl	b8e0e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b5d9e:	4628      	mov	r0, r5
   b5da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b5da4:	4603      	mov	r3, r0
   b5da6:	4906      	ldr	r1, [pc, #24]	; (b5dc0 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b5da8:	4804      	ldr	r0, [pc, #16]	; (b5dbc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5daa:	464a      	mov	r2, r9
   b5dac:	f7ff ff8b 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b5db0:	2500      	movs	r5, #0
   b5db2:	e7ee      	b.n	b5d92 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b5db4:	2501      	movs	r5, #1
   b5db6:	e7ec      	b.n	b5d92 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b5db8:	000bcb48 	.word	0x000bcb48
   b5dbc:	2003e3dc 	.word	0x2003e3dc
   b5dc0:	000bcb6d 	.word	0x000bcb6d

000b5dc4 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b5dc4:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b5dc6:	9300      	str	r3, [sp, #0]
   b5dc8:	2301      	movs	r3, #1
   b5dca:	f7ff ffad 	bl	b5d28 <_ZN6AB180513readRegistersEhPhjb>
}
   b5dce:	b003      	add	sp, #12
   b5dd0:	f85d fb04 	ldr.w	pc, [sp], #4

000b5dd4 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b5dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b5dd6:	8943      	ldrh	r3, [r0, #10]
   b5dd8:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b5dda:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b5ddc:	d010      	beq.n	b5e00 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5dde:	4e19      	ldr	r6, [pc, #100]	; (b5e44 <_ZN6AB180510detectChipEv+0x70>)
   b5de0:	4d19      	ldr	r5, [pc, #100]	; (b5e48 <_ZN6AB180510detectChipEv+0x74>)
   b5de2:	f002 fa31 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b5de6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b5dea:	d209      	bcs.n	b5e00 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b5dec:	8960      	ldrh	r0, [r4, #10]
   b5dee:	f005 facf 	bl	bb390 <digitalRead>
   b5df2:	2801      	cmp	r0, #1
   b5df4:	d004      	beq.n	b5e00 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5df6:	4631      	mov	r1, r6
   b5df8:	4628      	mov	r0, r5
   b5dfa:	f7fe f9b7 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5dfe:	e7f0      	b.n	b5de2 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b5e00:	2301      	movs	r3, #1
   b5e02:	f10d 0207 	add.w	r2, sp, #7
   b5e06:	2128      	movs	r1, #40	; 0x28
   b5e08:	4620      	mov	r0, r4
   b5e0a:	f7ff ffdb 	bl	b5dc4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b5e0e:	b930      	cbnz	r0, b5e1e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b5e10:	480d      	ldr	r0, [pc, #52]	; (b5e48 <_ZN6AB180510detectChipEv+0x74>)
   b5e12:	490e      	ldr	r1, [pc, #56]	; (b5e4c <_ZN6AB180510detectChipEv+0x78>)
   b5e14:	f7fe f9aa 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5e18:	2000      	movs	r0, #0
}
   b5e1a:	b002      	add	sp, #8
   b5e1c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b5e1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5e22:	2b18      	cmp	r3, #24
   b5e24:	d1f4      	bne.n	b5e10 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b5e26:	2301      	movs	r3, #1
   b5e28:	f10d 0207 	add.w	r2, sp, #7
   b5e2c:	2129      	movs	r1, #41	; 0x29
   b5e2e:	4620      	mov	r0, r4
   b5e30:	f7ff ffc8 	bl	b5dc4 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b5e34:	2800      	cmp	r0, #0
   b5e36:	d0eb      	beq.n	b5e10 <_ZN6AB180510detectChipEv+0x3c>
   b5e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5e3c:	2b05      	cmp	r3, #5
   b5e3e:	d1e7      	bne.n	b5e10 <_ZN6AB180510detectChipEv+0x3c>
   b5e40:	e7eb      	b.n	b5e1a <_ZN6AB180510detectChipEv+0x46>
   b5e42:	bf00      	nop
   b5e44:	000bcb91 	.word	0x000bcb91
   b5e48:	2003e3dc 	.word	0x2003e3dc
   b5e4c:	000bcba6 	.word	0x000bcba6

000b5e50 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b5e50:	b507      	push	{r0, r1, r2, lr}
   b5e52:	4613      	mov	r3, r2
    uint8_t value = 0;
   b5e54:	2200      	movs	r2, #0
   b5e56:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b5e5a:	f10d 0207 	add.w	r2, sp, #7
   b5e5e:	f7ff ffb1 	bl	b5dc4 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b5e62:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b5e66:	b003      	add	sp, #12
   b5e68:	f85d fb04 	ldr.w	pc, [sp], #4

000b5e6c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b5e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e70:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b5e74:	4604      	mov	r4, r0
   b5e76:	460f      	mov	r7, r1
   b5e78:	4615      	mov	r5, r2
   b5e7a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b5e7c:	f1b8 0f00 	cmp.w	r8, #0
   b5e80:	d002      	beq.n	b5e88 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b5e82:	6840      	ldr	r0, [r0, #4]
   b5e84:	f002 ffba 	bl	b8dfc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5e88:	7a21      	ldrb	r1, [r4, #8]
   b5e8a:	6860      	ldr	r0, [r4, #4]
   b5e8c:	f002 ff93 	bl	b8db6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b5e90:	6860      	ldr	r0, [r4, #4]
   b5e92:	6803      	ldr	r3, [r0, #0]
   b5e94:	4639      	mov	r1, r7
   b5e96:	689b      	ldr	r3, [r3, #8]
   b5e98:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b5e9a:	442e      	add	r6, r5
   b5e9c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b5e9e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b5ea0:	d005      	beq.n	b5eae <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b5ea2:	6803      	ldr	r3, [r0, #0]
   b5ea4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ea8:	689b      	ldr	r3, [r3, #8]
   b5eaa:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b5eac:	e7f6      	b.n	b5e9c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b5eae:	2101      	movs	r1, #1
   b5eb0:	f002 ffa0 	bl	b8df4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b5eb4:	4603      	mov	r3, r0
   b5eb6:	b170      	cbz	r0, b5ed6 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b5eb8:	4908      	ldr	r1, [pc, #32]	; (b5edc <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b5eba:	4809      	ldr	r0, [pc, #36]	; (b5ee0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b5ebc:	463a      	mov	r2, r7
   b5ebe:	f7ff ff02 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b5ec2:	2500      	movs	r5, #0
    }

    if (lock) {
   b5ec4:	f1b8 0f00 	cmp.w	r8, #0
   b5ec8:	d002      	beq.n	b5ed0 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b5eca:	6860      	ldr	r0, [r4, #4]
   b5ecc:	f002 ff9f 	bl	b8e0e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b5ed0:	4628      	mov	r0, r5
   b5ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b5ed6:	2501      	movs	r5, #1
   b5ed8:	e7f4      	b.n	b5ec4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b5eda:	bf00      	nop
   b5edc:	000bcbb3 	.word	0x000bcbb3
   b5ee0:	2003e3dc 	.word	0x2003e3dc

000b5ee4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b5ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5ee6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b5eea:	9300      	str	r3, [sp, #0]
   b5eec:	f10d 020f 	add.w	r2, sp, #15
   b5ef0:	2301      	movs	r3, #1
   b5ef2:	f7ff ffbb 	bl	b5e6c <_ZN6AB180514writeRegistersEhPKhjb>
}
   b5ef6:	b005      	add	sp, #20
   b5ef8:	f85d fb04 	ldr.w	pc, [sp], #4

000b5efc <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b5efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b5efe:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b5f00:	460c      	mov	r4, r1
   b5f02:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b5f04:	491a      	ldr	r1, [pc, #104]	; (b5f70 <_ZN6AB18056setWDTEi+0x74>)
   b5f06:	481b      	ldr	r0, [pc, #108]	; (b5f74 <_ZN6AB18056setWDTEi+0x78>)
   b5f08:	f7fe f930 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b5f0c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b5f0e:	bfb8      	it	lt
   b5f10:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b5f12:	b97c      	cbnz	r4, b5f34 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b5f14:	2301      	movs	r3, #1
   b5f16:	4622      	mov	r2, r4
   b5f18:	211b      	movs	r1, #27
   b5f1a:	4628      	mov	r0, r5
   b5f1c:	f7ff ffe2 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b5f20:	4915      	ldr	r1, [pc, #84]	; (b5f78 <_ZN6AB18056setWDTEi+0x7c>)
   b5f22:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b5f24:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b5f26:	4813      	ldr	r0, [pc, #76]	; (b5f74 <_ZN6AB18056setWDTEi+0x78>)
   b5f28:	f7ff fedb 	bl	b5ce2 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b5f2c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b5f2e:	616c      	str	r4, [r5, #20]
}
   b5f30:	4630      	mov	r0, r6
   b5f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b5f34:	2c03      	cmp	r4, #3
   b5f36:	dd19      	ble.n	b5f6c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b5f38:	10a7      	asrs	r7, r4, #2
   b5f3a:	2f1f      	cmp	r7, #31
   b5f3c:	bfa8      	it	ge
   b5f3e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b5f40:	00ba      	lsls	r2, r7, #2
   b5f42:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b5f46:	2301      	movs	r3, #1
   b5f48:	b2d2      	uxtb	r2, r2
   b5f4a:	211b      	movs	r1, #27
   b5f4c:	4628      	mov	r0, r5
   b5f4e:	f7ff ffc9 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b5f52:	463a      	mov	r2, r7
   b5f54:	4603      	mov	r3, r0
   b5f56:	4909      	ldr	r1, [pc, #36]	; (b5f7c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b5f58:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b5f5a:	4806      	ldr	r0, [pc, #24]	; (b5f74 <_ZN6AB18056setWDTEi+0x78>)
   b5f5c:	f7ff fec1 	bl	b5ce2 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b5f60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5f64:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b5f66:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b5f68:	616f      	str	r7, [r5, #20]
   b5f6a:	e7e1      	b.n	b5f30 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b5f6c:	2701      	movs	r7, #1
   b5f6e:	e7e7      	b.n	b5f40 <_ZN6AB18056setWDTEi+0x44>
   b5f70:	000bcbd8 	.word	0x000bcbd8
   b5f74:	2003e3dc 	.word	0x2003e3dc
   b5f78:	000bcbe2 	.word	0x000bcbe2
   b5f7c:	000bcbfe 	.word	0x000bcbfe

000b5f80 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b5f80:	4b06      	ldr	r3, [pc, #24]	; (b5f9c <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b5f82:	681a      	ldr	r2, [r3, #0]
   b5f84:	b14a      	cbz	r2, b5f9a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b5f86:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b5f8a:	430b      	orrs	r3, r1
   b5f8c:	d105      	bne.n	b5f9a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b5f8e:	68d3      	ldr	r3, [r2, #12]
   b5f90:	b11b      	cbz	r3, b5f9a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b5f92:	2100      	movs	r1, #0
   b5f94:	4610      	mov	r0, r2
   b5f96:	f7ff bfb1 	b.w	b5efc <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b5f9a:	4770      	bx	lr
   b5f9c:	2003e3e0 	.word	0x2003e3e0

000b5fa0 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b5fa0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5fa4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5fa8:	4605      	mov	r5, r0
   b5faa:	4616      	mov	r6, r2
   b5fac:	461f      	mov	r7, r3
    if (lock) {
   b5fae:	f1b8 0f00 	cmp.w	r8, #0
   b5fb2:	d004      	beq.n	b5fbe <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b5fb4:	6840      	ldr	r0, [r0, #4]
   b5fb6:	9101      	str	r1, [sp, #4]
   b5fb8:	f002 ff20 	bl	b8dfc <_ZN7TwoWire4lockEv>
   b5fbc:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b5fbe:	9101      	str	r1, [sp, #4]
   b5fc0:	2300      	movs	r3, #0
   b5fc2:	f10d 020f 	add.w	r2, sp, #15
   b5fc6:	4628      	mov	r0, r5
   b5fc8:	f7ff fefc 	bl	b5dc4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b5fcc:	4604      	mov	r4, r0
   b5fce:	b160      	cbz	r0, b5fea <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b5fd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b5fd4:	ea03 0206 	and.w	r2, r3, r6
   b5fd8:	433a      	orrs	r2, r7
        if (newValue != value) {
   b5fda:	4293      	cmp	r3, r2
   b5fdc:	d005      	beq.n	b5fea <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b5fde:	9901      	ldr	r1, [sp, #4]
   b5fe0:	2300      	movs	r3, #0
   b5fe2:	4628      	mov	r0, r5
   b5fe4:	f7ff ff7e 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
   b5fe8:	4604      	mov	r4, r0
    if (lock) {
   b5fea:	f1b8 0f00 	cmp.w	r8, #0
   b5fee:	d002      	beq.n	b5ff6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b5ff0:	6868      	ldr	r0, [r5, #4]
   b5ff2:	f002 ff0c 	bl	b8e0e <_ZN7TwoWire6unlockEv>
}
   b5ff6:	4620      	mov	r0, r4
   b5ff8:	b004      	add	sp, #16
   b5ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5ffe <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b5ffe:	b513      	push	{r0, r1, r4, lr}
   b6000:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6002:	f10d 0207 	add.w	r2, sp, #7
   b6006:	f7ff fedd 	bl	b5dc4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b600a:	b128      	cbz	r0, b6018 <_ZN6AB180510isBitClearEhhb+0x1a>
   b600c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6010:	421c      	tst	r4, r3
   b6012:	bf0c      	ite	eq
   b6014:	2001      	moveq	r0, #1
   b6016:	2000      	movne	r0, #0
}
   b6018:	b002      	add	sp, #8
   b601a:	bd10      	pop	{r4, pc}

000b601c <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b601c:	b513      	push	{r0, r1, r4, lr}
   b601e:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6020:	f10d 0207 	add.w	r2, sp, #7
   b6024:	f7ff fece 	bl	b5dc4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6028:	b128      	cbz	r0, b6036 <_ZN6AB18058isBitSetEhhb+0x1a>
   b602a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b602e:	421c      	tst	r4, r3
   b6030:	bf14      	ite	ne
   b6032:	2001      	movne	r0, #1
   b6034:	2000      	moveq	r0, #0
}
   b6036:	b002      	add	sp, #8
   b6038:	bd10      	pop	{r4, pc}

000b603a <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b603a:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b603c:	43d2      	mvns	r2, r2
   b603e:	9300      	str	r3, [sp, #0]
   b6040:	b2d2      	uxtb	r2, r2
   b6042:	2300      	movs	r3, #0
   b6044:	f7ff ffac 	bl	b5fa0 <_ZN6AB180512maskRegisterEhhhb>
}
   b6048:	b003      	add	sp, #12
   b604a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6050 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6050:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6052:	2301      	movs	r3, #1
   b6054:	f10d 0207 	add.w	r2, sp, #7
   b6058:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b605a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b605c:	f7ff feb2 	bl	b5dc4 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6060:	4605      	mov	r5, r0
   b6062:	b938      	cbnz	r0, b6074 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6064:	491e      	ldr	r1, [pc, #120]	; (b60e0 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6066:	481f      	ldr	r0, [pc, #124]	; (b60e4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6068:	22ad      	movs	r2, #173	; 0xad
   b606a:	f7ff fe2c 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
}
   b606e:	4628      	mov	r0, r5
   b6070:	b003      	add	sp, #12
   b6072:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6074:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6078:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b607c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6080:	d00b      	beq.n	b609a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6082:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6084:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6086:	210f      	movs	r1, #15
   b6088:	4620      	mov	r0, r4
   b608a:	f7ff ffd6 	bl	b603a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b608e:	4a16      	ldr	r2, [pc, #88]	; (b60e8 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6090:	4916      	ldr	r1, [pc, #88]	; (b60ec <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6092:	4814      	ldr	r0, [pc, #80]	; (b60e4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6094:	f7fe f86a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6098:	e7e9      	b.n	b606e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b609a:	2208      	movs	r2, #8
   b609c:	2117      	movs	r1, #23
   b609e:	4620      	mov	r0, r4
   b60a0:	f7ff ffbc 	bl	b601c <_ZN6AB18058isBitSetEhhb>
   b60a4:	b118      	cbz	r0, b60ae <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b60a6:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b60a8:	4a11      	ldr	r2, [pc, #68]	; (b60f0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b60aa:	61e3      	str	r3, [r4, #28]
   b60ac:	e7f0      	b.n	b6090 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b60ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b60b2:	071a      	lsls	r2, r3, #28
   b60b4:	d509      	bpl.n	b60ca <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b60b6:	2303      	movs	r3, #3
   b60b8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b60ba:	2208      	movs	r2, #8
   b60bc:	2301      	movs	r3, #1
   b60be:	210f      	movs	r1, #15
   b60c0:	4620      	mov	r0, r4
   b60c2:	f7ff ffba 	bl	b603a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b60c6:	4a0b      	ldr	r2, [pc, #44]	; (b60f4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b60c8:	e7e2      	b.n	b6090 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b60ca:	075b      	lsls	r3, r3, #29
   b60cc:	d5cf      	bpl.n	b606e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b60ce:	2204      	movs	r2, #4
   b60d0:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b60d2:	2301      	movs	r3, #1
   b60d4:	210f      	movs	r1, #15
   b60d6:	4620      	mov	r0, r4
   b60d8:	f7ff ffaf 	bl	b603a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b60dc:	4a06      	ldr	r2, [pc, #24]	; (b60f8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b60de:	e7d7      	b.n	b6090 <_ZN6AB180516updateWakeReasonEv+0x40>
   b60e0:	000bcc51 	.word	0x000bcc51
   b60e4:	2003e3dc 	.word	0x2003e3dc
   b60e8:	000bcc22 	.word	0x000bcc22
   b60ec:	000bcc70 	.word	0x000bcc70
   b60f0:	000bcc2b 	.word	0x000bcc2b
   b60f4:	000bcc3b 	.word	0x000bcc3b
   b60f8:	000bcc4b 	.word	0x000bcc4b

000b60fc <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b60fc:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b60fe:	9300      	str	r3, [sp, #0]
   b6100:	4613      	mov	r3, r2
   b6102:	22ff      	movs	r2, #255	; 0xff
   b6104:	f7ff ff4c 	bl	b5fa0 <_ZN6AB180512maskRegisterEhhhb>
}
   b6108:	b003      	add	sp, #12
   b610a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6110 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6112:	460f      	mov	r7, r1
   b6114:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6116:	2301      	movs	r3, #1
   b6118:	2200      	movs	r2, #0
   b611a:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b611c:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b611e:	f7ff fee1 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6122:	4604      	mov	r4, r0
   b6124:	b938      	cbnz	r0, b6136 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b6126:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b612a:	491f      	ldr	r1, [pc, #124]	; (b61a8 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b612c:	481f      	ldr	r0, [pc, #124]	; (b61ac <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b612e:	f7ff fdca 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
}
   b6132:	4620      	mov	r0, r4
   b6134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6136:	2301      	movs	r3, #1
   b6138:	2223      	movs	r2, #35	; 0x23
   b613a:	2118      	movs	r1, #24
   b613c:	4628      	mov	r0, r5
   b613e:	f7ff fed1 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6142:	4604      	mov	r4, r0
   b6144:	b910      	cbnz	r0, b614c <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6146:	f240 229b 	movw	r2, #667	; 0x29b
   b614a:	e7ee      	b.n	b612a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b614c:	2fff      	cmp	r7, #255	; 0xff
   b614e:	bfa8      	it	ge
   b6150:	27ff      	movge	r7, #255	; 0xff
   b6152:	2f01      	cmp	r7, #1
   b6154:	bfb8      	it	lt
   b6156:	2701      	movlt	r7, #1
   b6158:	2301      	movs	r3, #1
   b615a:	b2fa      	uxtb	r2, r7
   b615c:	2119      	movs	r1, #25
   b615e:	4628      	mov	r0, r5
   b6160:	f7ff fec0 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6164:	4604      	mov	r4, r0
   b6166:	b910      	cbnz	r0, b616e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6168:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b616c:	e7dd      	b.n	b612a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b616e:	2301      	movs	r3, #1
   b6170:	2208      	movs	r2, #8
   b6172:	2112      	movs	r1, #18
   b6174:	4628      	mov	r0, r5
   b6176:	f7ff ffc1 	bl	b60fc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b617a:	4604      	mov	r4, r0
   b617c:	b910      	cbnz	r0, b6184 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b617e:	f240 22af 	movw	r2, #687	; 0x2af
   b6182:	e7d2      	b.n	b612a <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6184:	2e00      	cmp	r6, #0
   b6186:	bf14      	ite	ne
   b6188:	2203      	movne	r2, #3
   b618a:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b618c:	2301      	movs	r3, #1
   b618e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6192:	2118      	movs	r1, #24
   b6194:	4628      	mov	r0, r5
   b6196:	f7ff fea5 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b619a:	4604      	mov	r4, r0
   b619c:	2800      	cmp	r0, #0
   b619e:	d1c8      	bne.n	b6132 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b61a0:	f240 22b9 	movw	r2, #697	; 0x2b9
   b61a4:	e7c1      	b.n	b612a <_ZN6AB180517setCountdownTimerEib+0x1a>
   b61a6:	bf00      	nop
   b61a8:	000bcc81 	.word	0x000bcc81
   b61ac:	2003e3dc 	.word	0x2003e3dc

000b61b0 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b61b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b61b4:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b61b6:	4605      	mov	r5, r0
   b61b8:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b61ba:	484f      	ldr	r0, [pc, #316]	; (b62f8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b61bc:	494f      	ldr	r1, [pc, #316]	; (b62fc <_ZN6AB180513deepPowerDownEi+0x14c>)
   b61be:	f7fd ffd5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b61c2:	2100      	movs	r1, #0
   b61c4:	4628      	mov	r0, r5
   b61c6:	f7ff fe99 	bl	b5efc <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b61ca:	4604      	mov	r4, r0
   b61cc:	b948      	cbnz	r0, b61e2 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b61ce:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b61d2:	494b      	ldr	r1, [pc, #300]	; (b6300 <_ZN6AB180513deepPowerDownEi+0x150>)
   b61d4:	4848      	ldr	r0, [pc, #288]	; (b62f8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b61d6:	f7ff fd76 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
}
   b61da:	4620      	mov	r0, r4
   b61dc:	b003      	add	sp, #12
   b61de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b61e2:	2301      	movs	r3, #1
   b61e4:	461a      	mov	r2, r3
   b61e6:	2130      	movs	r1, #48	; 0x30
   b61e8:	4628      	mov	r0, r5
   b61ea:	f7ff ff87 	bl	b60fc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b61ee:	4604      	mov	r4, r0
   b61f0:	b910      	cbnz	r0, b61f8 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b61f2:	f240 2205 	movw	r2, #517	; 0x205
   b61f6:	e7ec      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b61f8:	2210      	movs	r2, #16
   b61fa:	2301      	movs	r3, #1
   b61fc:	4611      	mov	r1, r2
   b61fe:	4628      	mov	r0, r5
   b6200:	f7ff ff1b 	bl	b603a <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b6204:	4604      	mov	r4, r0
   b6206:	b910      	cbnz	r0, b620e <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6208:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b620c:	e7e1      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b620e:	2301      	movs	r3, #1
   b6210:	2226      	movs	r2, #38	; 0x26
   b6212:	2113      	movs	r1, #19
   b6214:	4628      	mov	r0, r5
   b6216:	f7ff fe65 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b621a:	4604      	mov	r4, r0
   b621c:	b910      	cbnz	r0, b6224 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b621e:	f240 2213 	movw	r2, #531	; 0x213
   b6222:	e7d6      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b6224:	2601      	movs	r6, #1
   b6226:	9600      	str	r6, [sp, #0]
   b6228:	4633      	mov	r3, r6
   b622a:	22fc      	movs	r2, #252	; 0xfc
   b622c:	2111      	movs	r1, #17
   b622e:	4628      	mov	r0, r5
   b6230:	f7ff feb6 	bl	b5fa0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6234:	4604      	mov	r4, r0
   b6236:	b910      	cbnz	r0, b623e <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6238:	f240 221b 	movw	r2, #539	; 0x21b
   b623c:	e7c9      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b623e:	2200      	movs	r2, #0
   b6240:	4639      	mov	r1, r7
   b6242:	4628      	mov	r0, r5
   b6244:	f7ff ff64 	bl	b6110 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6248:	4604      	mov	r4, r0
   b624a:	b910      	cbnz	r0, b6252 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b624c:	f240 2222 	movw	r2, #546	; 0x222
   b6250:	e7bf      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6252:	9600      	str	r6, [sp, #0]
   b6254:	2302      	movs	r3, #2
   b6256:	2277      	movs	r2, #119	; 0x77
   b6258:	2110      	movs	r1, #16
   b625a:	4628      	mov	r0, r5
   b625c:	f7ff fea0 	bl	b5fa0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6260:	4604      	mov	r4, r0
   b6262:	b910      	cbnz	r0, b626a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6264:	f240 222b 	movw	r2, #555	; 0x22b
   b6268:	e7b3      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b626a:	4633      	mov	r3, r6
   b626c:	2204      	movs	r2, #4
   b626e:	211c      	movs	r1, #28
   b6270:	4628      	mov	r0, r5
   b6272:	f7ff ff43 	bl	b60fc <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6276:	4604      	mov	r4, r0
   b6278:	b910      	cbnz	r0, b6280 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b627a:	f240 2232 	movw	r2, #562	; 0x232
   b627e:	e7a8      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6280:	9600      	str	r6, [sp, #0]
   b6282:	2318      	movs	r3, #24
   b6284:	22e3      	movs	r2, #227	; 0xe3
   b6286:	2111      	movs	r1, #17
   b6288:	4628      	mov	r0, r5
   b628a:	f7ff fe89 	bl	b5fa0 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b628e:	4604      	mov	r4, r0
   b6290:	b910      	cbnz	r0, b6298 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6292:	f240 2239 	movw	r2, #569	; 0x239
   b6296:	e79c      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6298:	4633      	mov	r3, r6
   b629a:	22c0      	movs	r2, #192	; 0xc0
   b629c:	2117      	movs	r1, #23
   b629e:	4628      	mov	r0, r5
   b62a0:	f7ff fe20 	bl	b5ee4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b62a4:	4604      	mov	r4, r0
   b62a6:	b910      	cbnz	r0, b62ae <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b62a8:	f44f 7210 	mov.w	r2, #576	; 0x240
   b62ac:	e791      	b.n	b61d2 <_ZN6AB180513deepPowerDownEi+0x22>
   b62ae:	f001 ffcb 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b62b2:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6308 <_ZN6AB180513deepPowerDownEi+0x158>
   b62b6:	f8df 8040 	ldr.w	r8, [pc, #64]	; b62f8 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b62ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b62be:	4606      	mov	r6, r0
   b62c0:	434f      	muls	r7, r1
   b62c2:	f001 ffc1 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b62c6:	1b80      	subs	r0, r0, r6
   b62c8:	42b8      	cmp	r0, r7
   b62ca:	d20e      	bcs.n	b62ea <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b62cc:	2201      	movs	r2, #1
   b62ce:	2117      	movs	r1, #23
   b62d0:	4628      	mov	r0, r5
   b62d2:	f7ff fdbd 	bl	b5e50 <_ZN6AB180512readRegisterEhb>
   b62d6:	4649      	mov	r1, r9
   b62d8:	4602      	mov	r2, r0
   b62da:	4640      	mov	r0, r8
   b62dc:	f7fd ff46 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b62e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b62e4:	f002 fb14 	bl	b8910 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b62e8:	e7eb      	b.n	b62c2 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b62ea:	4906      	ldr	r1, [pc, #24]	; (b6304 <_ZN6AB180513deepPowerDownEi+0x154>)
   b62ec:	4802      	ldr	r0, [pc, #8]	; (b62f8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b62ee:	f7ff fcea 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b62f2:	f004 fc38 	bl	bab66 <_ZN11SystemClass5resetEv>
    return true;
   b62f6:	e770      	b.n	b61da <_ZN6AB180513deepPowerDownEi+0x2a>
   b62f8:	2003e3dc 	.word	0x2003e3dc
   b62fc:	000bccac 	.word	0x000bccac
   b6300:	000bcca1 	.word	0x000bcca1
   b6304:	000bccd2 	.word	0x000bccd2
   b6308:	000bccbd 	.word	0x000bccbd

000b630c <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b630c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6310:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6314:	4605      	mov	r5, r0
   b6316:	460c      	mov	r4, r1
   b6318:	4691      	mov	r9, r2
   b631a:	461f      	mov	r7, r3
    if (lock) {
   b631c:	f1ba 0f00 	cmp.w	sl, #0
   b6320:	d002      	beq.n	b6328 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6322:	6840      	ldr	r0, [r0, #4]
   b6324:	f002 fd6a 	bl	b8dfc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6328:	b307      	cbz	r7, b636c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b632a:	2f20      	cmp	r7, #32
   b632c:	463e      	mov	r6, r7
   b632e:	bf28      	it	cs
   b6330:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6332:	2c7f      	cmp	r4, #127	; 0x7f
   b6334:	d826      	bhi.n	b6384 <_ZN6AB18057readRamEjPhjb+0x78>
   b6336:	1933      	adds	r3, r6, r4
   b6338:	2b80      	cmp	r3, #128	; 0x80
   b633a:	d901      	bls.n	b6340 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b633c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6340:	2301      	movs	r3, #1
   b6342:	2204      	movs	r2, #4
   b6344:	213f      	movs	r1, #63	; 0x3f
   b6346:	4628      	mov	r0, r5
   b6348:	f7ff fe77 	bl	b603a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b634c:	2300      	movs	r3, #0
   b634e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6352:	9300      	str	r3, [sp, #0]
   b6354:	464a      	mov	r2, r9
   b6356:	4633      	mov	r3, r6
   b6358:	b2c9      	uxtb	r1, r1
   b635a:	4628      	mov	r0, r5
   b635c:	f7ff fce4 	bl	b5d28 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6360:	4680      	mov	r8, r0
   b6362:	b128      	cbz	r0, b6370 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6364:	4434      	add	r4, r6
        dataLen -= count;
   b6366:	1bbf      	subs	r7, r7, r6
        data += count;
   b6368:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b636a:	e7dd      	b.n	b6328 <_ZN6AB18057readRamEjPhjb+0x1c>
   b636c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6370:	f1ba 0f00 	cmp.w	sl, #0
   b6374:	d002      	beq.n	b637c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6376:	6868      	ldr	r0, [r5, #4]
   b6378:	f002 fd49 	bl	b8e0e <_ZN7TwoWire6unlockEv>
}
   b637c:	4640      	mov	r0, r8
   b637e:	b002      	add	sp, #8
   b6380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6384:	2301      	movs	r3, #1
   b6386:	2204      	movs	r2, #4
   b6388:	213f      	movs	r1, #63	; 0x3f
   b638a:	4628      	mov	r0, r5
   b638c:	f7ff feb6 	bl	b60fc <_ZN6AB180514setRegisterBitEhhb>
   b6390:	e7dc      	b.n	b634c <_ZN6AB18057readRamEjPhjb+0x40>

000b6392 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6392:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6396:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b639a:	4605      	mov	r5, r0
   b639c:	460c      	mov	r4, r1
   b639e:	4691      	mov	r9, r2
   b63a0:	461f      	mov	r7, r3
    if (lock) {
   b63a2:	f1ba 0f00 	cmp.w	sl, #0
   b63a6:	d002      	beq.n	b63ae <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b63a8:	6840      	ldr	r0, [r0, #4]
   b63aa:	f002 fd27 	bl	b8dfc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b63ae:	b307      	cbz	r7, b63f2 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b63b0:	2f1f      	cmp	r7, #31
   b63b2:	463e      	mov	r6, r7
   b63b4:	bf28      	it	cs
   b63b6:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b63b8:	2c7f      	cmp	r4, #127	; 0x7f
   b63ba:	d826      	bhi.n	b640a <_ZN6AB18058writeRamEjPKhjb+0x78>
   b63bc:	1933      	adds	r3, r6, r4
   b63be:	2b80      	cmp	r3, #128	; 0x80
   b63c0:	d901      	bls.n	b63c6 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b63c2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b63c6:	2301      	movs	r3, #1
   b63c8:	2204      	movs	r2, #4
   b63ca:	213f      	movs	r1, #63	; 0x3f
   b63cc:	4628      	mov	r0, r5
   b63ce:	f7ff fe34 	bl	b603a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b63d2:	2300      	movs	r3, #0
   b63d4:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b63d8:	9300      	str	r3, [sp, #0]
   b63da:	464a      	mov	r2, r9
   b63dc:	4633      	mov	r3, r6
   b63de:	b2c9      	uxtb	r1, r1
   b63e0:	4628      	mov	r0, r5
   b63e2:	f7ff fd43 	bl	b5e6c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b63e6:	4680      	mov	r8, r0
   b63e8:	b128      	cbz	r0, b63f6 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b63ea:	4434      	add	r4, r6
        dataLen -= count;
   b63ec:	1bbf      	subs	r7, r7, r6
        data += count;
   b63ee:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b63f0:	e7dd      	b.n	b63ae <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b63f2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b63f6:	f1ba 0f00 	cmp.w	sl, #0
   b63fa:	d002      	beq.n	b6402 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b63fc:	6868      	ldr	r0, [r5, #4]
   b63fe:	f002 fd06 	bl	b8e0e <_ZN7TwoWire6unlockEv>
}
   b6402:	4640      	mov	r0, r8
   b6404:	b002      	add	sp, #8
   b6406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b640a:	2301      	movs	r3, #1
   b640c:	2204      	movs	r2, #4
   b640e:	213f      	movs	r1, #63	; 0x3f
   b6410:	4628      	mov	r0, r5
   b6412:	f7ff fe73 	bl	b60fc <_ZN6AB180514setRegisterBitEhhb>
   b6416:	e7dc      	b.n	b63d2 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6418 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6418:	b530      	push	{r4, r5, lr}
   b641a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b641c:	680d      	ldr	r5, [r1, #0]
   b641e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6422:	9503      	str	r5, [sp, #12]
   b6424:	684d      	ldr	r5, [r1, #4]
   b6426:	9502      	str	r5, [sp, #8]
   b6428:	688d      	ldr	r5, [r1, #8]
   b642a:	9501      	str	r5, [sp, #4]
   b642c:	68c9      	ldr	r1, [r1, #12]
   b642e:	9100      	str	r1, [sp, #0]
   b6430:	3301      	adds	r3, #1
   b6432:	4904      	ldr	r1, [pc, #16]	; (b6444 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6434:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6438:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b643a:	f004 fb2d 	bl	baa98 <_ZN6String6formatEPKcz>
}
   b643e:	4620      	mov	r0, r4
   b6440:	b005      	add	sp, #20
   b6442:	bd30      	pop	{r4, r5, pc}
   b6444:	000bcce4 	.word	0x000bcce4

000b6448 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6448:	0903      	lsrs	r3, r0, #4
}
   b644a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b644c:	f000 000f 	and.w	r0, r0, #15
}
   b6450:	fb02 0003 	mla	r0, r2, r3, r0
   b6454:	4770      	bx	lr

000b6456 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6456:	b538      	push	{r3, r4, r5, lr}
   b6458:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b645a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b645c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b645e:	f7ff fff3 	bl	b6448 <_ZN6AB180510bcdToValueEh>
   b6462:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6464:	7860      	ldrb	r0, [r4, #1]
   b6466:	f7ff ffef 	bl	b6448 <_ZN6AB180510bcdToValueEh>
   b646a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b646c:	78a0      	ldrb	r0, [r4, #2]
   b646e:	f7ff ffeb 	bl	b6448 <_ZN6AB180510bcdToValueEh>
   b6472:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6474:	78e0      	ldrb	r0, [r4, #3]
   b6476:	f7ff ffe7 	bl	b6448 <_ZN6AB180510bcdToValueEh>
   b647a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b647c:	7920      	ldrb	r0, [r4, #4]
   b647e:	f7ff ffe3 	bl	b6448 <_ZN6AB180510bcdToValueEh>
   b6482:	3801      	subs	r0, #1
   b6484:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6486:	b92d      	cbnz	r5, b6494 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6488:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b648a:	7828      	ldrb	r0, [r5, #0]
   b648c:	f7ff ffdc 	bl	b6448 <_ZN6AB180510bcdToValueEh>
   b6490:	6188      	str	r0, [r1, #24]
}
   b6492:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6494:	7960      	ldrb	r0, [r4, #5]
   b6496:	f7ff ffd7 	bl	b6448 <_ZN6AB180510bcdToValueEh>
   b649a:	3064      	adds	r0, #100	; 0x64
   b649c:	1da5      	adds	r5, r4, #6
   b649e:	6148      	str	r0, [r1, #20]
   b64a0:	e7f3      	b.n	b648a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b64a4 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b64a4:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b64a6:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b64a8:	b088      	sub	sp, #32
   b64aa:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b64ac:	461a      	mov	r2, r3
   b64ae:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b64b0:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b64b2:	f7ff fda4 	bl	b5ffe <_ZN6AB180510isBitClearEhhb>
   b64b6:	b1f0      	cbz	r0, b64f6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b64b8:	2308      	movs	r3, #8
   b64ba:	2601      	movs	r6, #1
   b64bc:	4620      	mov	r0, r4
   b64be:	9600      	str	r6, [sp, #0]
   b64c0:	eb0d 0203 	add.w	r2, sp, r3
   b64c4:	2100      	movs	r1, #0
   b64c6:	f7ff fc2f 	bl	b5d28 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b64ca:	4604      	mov	r4, r0
   b64cc:	b198      	cbz	r0, b64f6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b64ce:	4632      	mov	r2, r6
   b64d0:	4629      	mov	r1, r5
   b64d2:	f10d 0009 	add.w	r0, sp, #9
   b64d6:	f7ff ffbe 	bl	b6456 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b64da:	a804      	add	r0, sp, #16
   b64dc:	f7ff ff9c 	bl	b6418 <_ZN6AB180510tmToStringEPK2tm>
   b64e0:	4808      	ldr	r0, [pc, #32]	; (b6504 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b64e2:	9a04      	ldr	r2, [sp, #16]
   b64e4:	4908      	ldr	r1, [pc, #32]	; (b6508 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b64e6:	f7fd fe41 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b64ea:	a804      	add	r0, sp, #16
   b64ec:	f004 fa32 	bl	ba954 <_ZN6StringD1Ev>
}
   b64f0:	4620      	mov	r0, r4
   b64f2:	b008      	add	sp, #32
   b64f4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b64f6:	2224      	movs	r2, #36	; 0x24
   b64f8:	2100      	movs	r1, #0
   b64fa:	4628      	mov	r0, r5
   b64fc:	f005 fd5e 	bl	bbfbc <memset>
   b6500:	2400      	movs	r4, #0
   b6502:	e7f5      	b.n	b64f0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b6504:	2003e3dc 	.word	0x2003e3dc
   b6508:	000bcd02 	.word	0x000bcd02

000b650c <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b650c:	b530      	push	{r4, r5, lr}
   b650e:	b08b      	sub	sp, #44	; 0x2c
   b6510:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b6512:	a901      	add	r1, sp, #4
   b6514:	f7ff ffc6 	bl	b64a4 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b6518:	4604      	mov	r4, r0
   b651a:	b120      	cbz	r0, b6526 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b651c:	a801      	add	r0, sp, #4
   b651e:	f002 f9ef 	bl	b8900 <mktime>
   b6522:	e9c5 0100 	strd	r0, r1, [r5]
}
   b6526:	4620      	mov	r0, r4
   b6528:	b00b      	add	sp, #44	; 0x2c
   b652a:	bd30      	pop	{r4, r5, pc}

000b652c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b652c:	230a      	movs	r3, #10
   b652e:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b6532:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6536:	fb91 f2f3 	sdiv	r2, r1, r3
   b653a:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b653e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b6542:	b2c0      	uxtb	r0, r0
   b6544:	4770      	bx	lr

000b6546 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6546:	b570      	push	{r4, r5, r6, lr}
   b6548:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b654a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b654c:	460c      	mov	r4, r1
   b654e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6550:	f7ff ffec 	bl	b652c <_ZN6AB180510valueToBcdEi>
   b6554:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6556:	6868      	ldr	r0, [r5, #4]
   b6558:	f7ff ffe8 	bl	b652c <_ZN6AB180510valueToBcdEi>
   b655c:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b655e:	68a8      	ldr	r0, [r5, #8]
   b6560:	f7ff ffe4 	bl	b652c <_ZN6AB180510valueToBcdEi>
   b6564:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6566:	68e8      	ldr	r0, [r5, #12]
   b6568:	f7ff ffe0 	bl	b652c <_ZN6AB180510valueToBcdEi>
   b656c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b656e:	6928      	ldr	r0, [r5, #16]
   b6570:	3001      	adds	r0, #1
   b6572:	f7ff ffdb 	bl	b652c <_ZN6AB180510valueToBcdEi>
   b6576:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6578:	b92e      	cbnz	r6, b6586 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b657a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b657c:	69a8      	ldr	r0, [r5, #24]
   b657e:	f7ff ffd5 	bl	b652c <_ZN6AB180510valueToBcdEi>
   b6582:	7030      	strb	r0, [r6, #0]
}
   b6584:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6586:	696a      	ldr	r2, [r5, #20]
   b6588:	2364      	movs	r3, #100	; 0x64
   b658a:	fb92 f0f3 	sdiv	r0, r2, r3
   b658e:	fb03 2010 	mls	r0, r3, r0, r2
   b6592:	f7ff ffcb 	bl	b652c <_ZN6AB180510valueToBcdEi>
   b6596:	1da6      	adds	r6, r4, #6
   b6598:	7160      	strb	r0, [r4, #5]
   b659a:	e7ef      	b.n	b657c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b659c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b659c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b659e:	b087      	sub	sp, #28
   b65a0:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b65a2:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b65a4:	4616      	mov	r6, r2
   b65a6:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b65a8:	f7ff ff36 	bl	b6418 <_ZN6AB180510tmToStringEPK2tm>
   b65ac:	481e      	ldr	r0, [pc, #120]	; (b6628 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b65ae:	9a02      	ldr	r2, [sp, #8]
   b65b0:	491e      	ldr	r1, [pc, #120]	; (b662c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b65b2:	f7fd fddb 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b65b6:	a802      	add	r0, sp, #8
   b65b8:	f004 f9cc 	bl	ba954 <_ZN6StringD1Ev>
    if (lock) {
   b65bc:	b116      	cbz	r6, b65c4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b65be:	6868      	ldr	r0, [r5, #4]
   b65c0:	f002 fc1c 	bl	b8dfc <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b65c4:	4620      	mov	r0, r4
   b65c6:	2201      	movs	r2, #1
   b65c8:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b65cc:	2700      	movs	r7, #0
   b65ce:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b65d2:	f7ff ffb8 	bl	b6546 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b65d6:	2301      	movs	r3, #1
   b65d8:	461a      	mov	r2, r3
   b65da:	2110      	movs	r1, #16
   b65dc:	4628      	mov	r0, r5
   b65de:	f7ff fd8d 	bl	b60fc <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b65e2:	4604      	mov	r4, r0
   b65e4:	b1e8      	cbz	r0, b6622 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b65e6:	2308      	movs	r3, #8
   b65e8:	9700      	str	r7, [sp, #0]
   b65ea:	eb0d 0203 	add.w	r2, sp, r3
   b65ee:	4639      	mov	r1, r7
   b65f0:	4628      	mov	r0, r5
   b65f2:	f7ff fc3b 	bl	b5e6c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b65f6:	4604      	mov	r4, r0
   b65f8:	b160      	cbz	r0, b6614 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b65fa:	2301      	movs	r3, #1
   b65fc:	461a      	mov	r2, r3
   b65fe:	2110      	movs	r1, #16
   b6600:	4628      	mov	r0, r5
   b6602:	f7ff fd1a 	bl	b603a <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b6606:	b116      	cbz	r6, b660e <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b6608:	6868      	ldr	r0, [r5, #4]
   b660a:	f002 fc00 	bl	b8e0e <_ZN7TwoWire6unlockEv>
}
   b660e:	4620      	mov	r0, r4
   b6610:	b007      	add	sp, #28
   b6612:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b6614:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b6618:	4905      	ldr	r1, [pc, #20]	; (b6630 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b661a:	4803      	ldr	r0, [pc, #12]	; (b6628 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b661c:	f7ff fb53 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
   b6620:	e7f1      	b.n	b6606 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b6622:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b6626:	e7f7      	b.n	b6618 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b6628:	2003e3dc 	.word	0x2003e3dc
   b662c:	000bcd10 	.word	0x000bcd10
   b6630:	000bcd1e 	.word	0x000bcd1e

000b6634 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6634:	b513      	push	{r0, r1, r4, lr}
   b6636:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6638:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b663a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b663e:	f005 fc6f 	bl	bbf20 <gmtime>
    return setRtcFromTm(tm, lock);
   b6642:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6646:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6648:	4620      	mov	r0, r4
   b664a:	f7ff ffa7 	bl	b659c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b664e:	b002      	add	sp, #8
   b6650:	bd10      	pop	{r4, pc}
	...

000b6654 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6654:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6656:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6658:	b089      	sub	sp, #36	; 0x24
   b665a:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b665c:	bb75      	cbnz	r5, b66bc <_ZN6AB18054loopEv+0x68>
   b665e:	f004 fc51 	bl	baf04 <_ZN9TimeClass7isValidEv>
   b6662:	b358      	cbz	r0, b66bc <_ZN6AB18054loopEv+0x68>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   b6664:	2600      	movs	r6, #0
   b6666:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6668:	a904      	add	r1, sp, #16
   b666a:	4628      	mov	r0, r5
        tm = 0;
   b666c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6670:	f002 f86e 	bl	b8750 <spark_sync_time_last>
   b6674:	b310      	cbz	r0, b66bc <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6676:	2501      	movs	r5, #1
   b6678:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b667a:	f004 fc60 	bl	baf3e <_ZN9TimeClass3nowEv>
   b667e:	17c3      	asrs	r3, r0, #31
   b6680:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6684:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6686:	9500      	str	r5, [sp, #0]
   b6688:	4620      	mov	r0, r4
   b668a:	f7ff ffd3 	bl	b6634 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b668e:	a902      	add	r1, sp, #8
   b6690:	4620      	mov	r0, r4
        time = 0;
   b6692:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6696:	f7ff ff39 	bl	b650c <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b669a:	4b13      	ldr	r3, [pc, #76]	; (b66e8 <_ZN6AB18054loopEv+0x94>)
   b669c:	4913      	ldr	r1, [pc, #76]	; (b66ec <_ZN6AB18054loopEv+0x98>)
   b669e:	681b      	ldr	r3, [r3, #0]
   b66a0:	9300      	str	r3, [sp, #0]
   b66a2:	a804      	add	r0, sp, #16
   b66a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b66a8:	f004 fbea 	bl	bae80 <_ZN9TimeClass6formatExPKc>
   b66ac:	4810      	ldr	r0, [pc, #64]	; (b66f0 <_ZN6AB18054loopEv+0x9c>)
   b66ae:	9a04      	ldr	r2, [sp, #16]
   b66b0:	4910      	ldr	r1, [pc, #64]	; (b66f4 <_ZN6AB18054loopEv+0xa0>)
   b66b2:	f7fd fd5b 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b66b6:	a804      	add	r0, sp, #16
   b66b8:	f004 f94c 	bl	ba954 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b66bc:	6963      	ldr	r3, [r4, #20]
   b66be:	b18b      	cbz	r3, b66e4 <_ZN6AB18054loopEv+0x90>
   b66c0:	f001 fdc2 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b66c4:	6923      	ldr	r3, [r4, #16]
   b66c6:	1ac0      	subs	r0, r0, r3
   b66c8:	6963      	ldr	r3, [r4, #20]
   b66ca:	4298      	cmp	r0, r3
   b66cc:	d30a      	bcc.n	b66e4 <_ZN6AB18054loopEv+0x90>
   b66ce:	f001 fdbb 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b66d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b66d6:	6120      	str	r0, [r4, #16]
            setWDT();
   b66d8:	4620      	mov	r0, r4
}
   b66da:	b009      	add	sp, #36	; 0x24
   b66dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b66e0:	f7ff bc0c 	b.w	b5efc <_ZN6AB18056setWDTEi>
}
   b66e4:	b009      	add	sp, #36	; 0x24
   b66e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b66e8:	2003decc 	.word	0x2003decc
   b66ec:	2003e6ac 	.word	0x2003e6ac
   b66f0:	2003e3dc 	.word	0x2003e3dc
   b66f4:	000bcd39 	.word	0x000bcd39

000b66f8 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b66f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b66fa:	2300      	movs	r3, #0
   b66fc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b66fe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6700:	4604      	mov	r4, r0
   b6702:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6704:	b12b      	cbz	r3, b6712 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6706:	2202      	movs	r2, #2
   b6708:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b670a:	68eb      	ldr	r3, [r5, #12]
   b670c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b670e:	68ab      	ldr	r3, [r5, #8]
   b6710:	60a3      	str	r3, [r4, #8]
    }
   b6712:	4620      	mov	r0, r4
   b6714:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6718 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b6718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b671c:	b095      	sub	sp, #84	; 0x54
   b671e:	4605      	mov	r5, r0
        };
   b6720:	991c      	ldr	r1, [sp, #112]	; 0x70
   b6722:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b6724:	4690      	mov	r8, r2
   b6726:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b6728:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b672a:	f7ff ffe5 	bl	b66f8 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b672e:	a904      	add	r1, sp, #16
   b6730:	a808      	add	r0, sp, #32
   b6732:	f7ff ffe1 	bl	b66f8 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b6736:	a908      	add	r1, sp, #32
   b6738:	4630      	mov	r0, r6
   b673a:	f7ff ffdd 	bl	b66f8 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b673e:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6742:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b6744:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6748:	f7fd fca5 	bl	b4096 <_Znwj>
   b674c:	4604      	mov	r4, r0
   b674e:	b1a0      	cbz	r0, b677a <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6750:	e896 0003 	ldmia.w	r6, {r0, r1}
   b6754:	ab01      	add	r3, sp, #4
   b6756:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b675a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b675e:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6762:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b6768:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b676a:	60a3      	str	r3, [r4, #8]
   b676c:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b6772:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b6776:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b6778:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b677a:	4b24      	ldr	r3, [pc, #144]	; (b680c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b677c:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b677e:	4b24      	ldr	r3, [pc, #144]	; (b6810 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b6780:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b6782:	2200      	movs	r2, #0
   b6784:	2300      	movs	r3, #0
   b6786:	f04f 0900 	mov.w	r9, #0
   b678a:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b678e:	4b21      	ldr	r3, [pc, #132]	; (b6814 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b6790:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b6794:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6796:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b6798:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b679c:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b67a0:	f7fd fc79 	bl	b4096 <_Znwj>
   b67a4:	4604      	mov	r4, r0
   b67a6:	b1d8      	cbz	r0, b67e0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b67a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b67aa:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b67ae:	b133      	cbz	r3, b67be <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b67b0:	2202      	movs	r2, #2
   b67b2:	a910      	add	r1, sp, #64	; 0x40
   b67b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b67b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b67b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b67ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b67bc:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b67be:	4b16      	ldr	r3, [pc, #88]	; (b6818 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b67c0:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b67c2:	4a16      	ldr	r2, [pc, #88]	; (b681c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b67c4:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b67c6:	ab01      	add	r3, sp, #4
   b67c8:	4640      	mov	r0, r8
   b67ca:	4639      	mov	r1, r7
   b67cc:	f001 ff56 	bl	b867c <system_subscribe_event>
        if (r) {
   b67d0:	b1b0      	cbz	r0, b6800 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b67d2:	4620      	mov	r0, r4
   b67d4:	f7ff fa50 	bl	b5c78 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b67d8:	2110      	movs	r1, #16
   b67da:	4620      	mov	r0, r4
   b67dc:	f7fd fc5f 	bl	b409e <_ZdlPvj>
   b67e0:	a810      	add	r0, sp, #64	; 0x40
   b67e2:	f7ff fa49 	bl	b5c78 <_ZNSt14_Function_baseD1Ev>
   b67e6:	4630      	mov	r0, r6
   b67e8:	f7ff fa46 	bl	b5c78 <_ZNSt14_Function_baseD1Ev>
   b67ec:	a808      	add	r0, sp, #32
   b67ee:	f7ff fa43 	bl	b5c78 <_ZNSt14_Function_baseD1Ev>
   b67f2:	a804      	add	r0, sp, #16
   b67f4:	f7ff fa40 	bl	b5c78 <_ZNSt14_Function_baseD1Ev>
    }
   b67f8:	4628      	mov	r0, r5
   b67fa:	b015      	add	sp, #84	; 0x54
   b67fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b6800:	9b02      	ldr	r3, [sp, #8]
   b6802:	60ab      	str	r3, [r5, #8]
   b6804:	e9c5 8700 	strd	r8, r7, [r5]
   b6808:	e7ea      	b.n	b67e0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b680a:	bf00      	nop
   b680c:	000b5c35 	.word	0x000b5c35
   b6810:	000b68d5 	.word	0x000b68d5
   b6814:	000c0002 	.word	0x000c0002
   b6818:	000b5c8b 	.word	0x000b5c8b
   b681c:	000b5c0d 	.word	0x000b5c0d

000b6820 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6820:	b530      	push	{r4, r5, lr}
   b6822:	4604      	mov	r4, r0
   b6824:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b6826:	b111      	cbz	r1, b682e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6828:	6840      	ldr	r0, [r0, #4]
   b682a:	f002 fa95 	bl	b8d58 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b682e:	4620      	mov	r0, r4
   b6830:	f7ff fad0 	bl	b5dd4 <_ZN6AB180510detectChipEv>
   b6834:	ad06      	add	r5, sp, #24
   b6836:	2800      	cmp	r0, #0
   b6838:	d037      	beq.n	b68aa <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b683a:	4620      	mov	r0, r4
   b683c:	f7ff fc08 	bl	b6050 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6840:	2301      	movs	r3, #1
   b6842:	461a      	mov	r2, r3
   b6844:	2110      	movs	r1, #16
   b6846:	4620      	mov	r0, r4
   b6848:	f7ff fbd9 	bl	b5ffe <_ZN6AB180510isBitClearEhhb>
   b684c:	b1d8      	cbz	r0, b6886 <_ZN6AB18055setupEb+0x66>
   b684e:	f004 fb59 	bl	baf04 <_ZN9TimeClass7isValidEv>
   b6852:	b9c0      	cbnz	r0, b6886 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6854:	a902      	add	r1, sp, #8
   b6856:	4620      	mov	r0, r4
   b6858:	f7ff fe58 	bl	b650c <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b685c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6860:	f004 fa54 	bl	bad0c <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6864:	4b13      	ldr	r3, [pc, #76]	; (b68b4 <_ZN6AB18055setupEb+0x94>)
   b6866:	4914      	ldr	r1, [pc, #80]	; (b68b8 <_ZN6AB18055setupEb+0x98>)
   b6868:	681b      	ldr	r3, [r3, #0]
   b686a:	9300      	str	r3, [sp, #0]
   b686c:	4628      	mov	r0, r5
   b686e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6872:	f004 fb05 	bl	bae80 <_ZN9TimeClass6formatExPKc>
   b6876:	4811      	ldr	r0, [pc, #68]	; (b68bc <_ZN6AB18055setupEb+0x9c>)
   b6878:	9a06      	ldr	r2, [sp, #24]
   b687a:	4911      	ldr	r1, [pc, #68]	; (b68c0 <_ZN6AB18055setupEb+0xa0>)
   b687c:	f7fd fc76 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6880:	4628      	mov	r0, r5
   b6882:	f004 f867 	bl	ba954 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6886:	4b0f      	ldr	r3, [pc, #60]	; (b68c4 <_ZN6AB18055setupEb+0xa4>)
   b6888:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b688a:	4b0f      	ldr	r3, [pc, #60]	; (b68c8 <_ZN6AB18055setupEb+0xa8>)
   b688c:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b688e:	4b0f      	ldr	r3, [pc, #60]	; (b68cc <_ZN6AB18055setupEb+0xac>)
   b6890:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6892:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6896:	2300      	movs	r3, #0
   b6898:	a802      	add	r0, sp, #8
   b689a:	9500      	str	r5, [sp, #0]
   b689c:	f7ff ff3c 	bl	b6718 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b68a0:	4628      	mov	r0, r5
   b68a2:	f7ff f9e9 	bl	b5c78 <_ZNSt14_Function_baseD1Ev>
}
   b68a6:	b00b      	add	sp, #44	; 0x2c
   b68a8:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b68aa:	4909      	ldr	r1, [pc, #36]	; (b68d0 <_ZN6AB18055setupEb+0xb0>)
   b68ac:	4803      	ldr	r0, [pc, #12]	; (b68bc <_ZN6AB18055setupEb+0x9c>)
   b68ae:	f7ff fa0a 	bl	b5cc6 <_ZNK5spark6Logger5errorEPKcz>
   b68b2:	e7e8      	b.n	b6886 <_ZN6AB18055setupEb+0x66>
   b68b4:	2003decc 	.word	0x2003decc
   b68b8:	2003e6ac 	.word	0x2003e6ac
   b68bc:	2003e3dc 	.word	0x2003e3dc
   b68c0:	000bcd4f 	.word	0x000bcd4f
   b68c4:	000b5f81 	.word	0x000b5f81
   b68c8:	000b5c6f 	.word	0x000b5c6f
   b68cc:	000b5c5b 	.word	0x000b5c5b
   b68d0:	000bcd6c 	.word	0x000bcd6c

000b68d4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b68d4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b68d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b68d8:	4604      	mov	r4, r0
	switch (__op)
   b68da:	d104      	bne.n	b68e6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b68dc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b68de:	6003      	str	r3, [r0, #0]
      }
   b68e0:	2000      	movs	r0, #0
   b68e2:	b003      	add	sp, #12
   b68e4:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b68e6:	2a02      	cmp	r2, #2
   b68e8:	d00c      	beq.n	b6904 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b68ea:	2a03      	cmp	r2, #3
   b68ec:	d1f8      	bne.n	b68e0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b68ee:	6804      	ldr	r4, [r0, #0]
   b68f0:	2c00      	cmp	r4, #0
   b68f2:	d0f5      	beq.n	b68e0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b68f4:	4620      	mov	r0, r4
   b68f6:	f7ff f9bf 	bl	b5c78 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b68fa:	2110      	movs	r1, #16
   b68fc:	4620      	mov	r0, r4
   b68fe:	f7fd fbce 	bl	b409e <_ZdlPvj>
   b6902:	e7ed      	b.n	b68e0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b6904:	6809      	ldr	r1, [r1, #0]
   b6906:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6908:	2010      	movs	r0, #16
   b690a:	f7fd fbc4 	bl	b4096 <_Znwj>
   b690e:	4605      	mov	r5, r0
   b6910:	b110      	cbz	r0, b6918 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b6912:	9901      	ldr	r1, [sp, #4]
   b6914:	f7ff fef0 	bl	b66f8 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b6918:	6025      	str	r5, [r4, #0]
	}
   b691a:	e7e1      	b.n	b68e0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b691c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b691c:	4b01      	ldr	r3, [pc, #4]	; (b6924 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b691e:	4a02      	ldr	r2, [pc, #8]	; (b6928 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6920:	601a      	str	r2, [r3, #0]
}
   b6922:	4770      	bx	lr
   b6924:	2003e3dc 	.word	0x2003e3dc
   b6928:	000bcd84 	.word	0x000bcd84

000b692c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b692c:	4770      	bx	lr

000b692e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b692e:	b510      	push	{r4, lr}
}
   b6930:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b6932:	4604      	mov	r4, r0
}
   b6934:	f7fd fbb3 	bl	b409e <_ZdlPvj>
   b6938:	4620      	mov	r0, r4
   b693a:	bd10      	pop	{r4, pc}

000b693c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b693c:	6803      	ldr	r3, [r0, #0]
   b693e:	b2c9      	uxtb	r1, r1
   b6940:	689b      	ldr	r3, [r3, #8]
   b6942:	4718      	bx	r3

000b6944 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b6944:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b6946:	4d03      	ldr	r5, [pc, #12]	; (b6954 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6948:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b694c:	e9c0 5100 	strd	r5, r1, [r0]
}
   b6950:	bd30      	pop	{r4, r5, pc}
   b6952:	bf00      	nop
   b6954:	000bcdb0 	.word	0x000bcdb0

000b6958 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b6958:	6840      	ldr	r0, [r0, #4]
   b695a:	f002 b9fd 	b.w	b8d58 <_ZN7TwoWire5beginEv>

000b695e <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b695e:	b510      	push	{r4, lr}
   b6960:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b6962:	6800      	ldr	r0, [r0, #0]
   b6964:	f002 fa53 	bl	b8e0e <_ZN7TwoWire6unlockEv>
   b6968:	4620      	mov	r0, r4
   b696a:	bd10      	pop	{r4, pc}

000b696c <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b696c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6970:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6972:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6974:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6976:	460d      	mov	r5, r1
   b6978:	4616      	mov	r6, r2
   b697a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b697c:	f002 fa3e 	bl	b8dfc <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6980:	b1a7      	cbz	r7, b69ac <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6982:	68e1      	ldr	r1, [r4, #12]
   b6984:	6860      	ldr	r0, [r4, #4]
   b6986:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b698a:	f002 fa18 	bl	b8dbe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b698e:	0a29      	lsrs	r1, r5, #8
   b6990:	6860      	ldr	r0, [r4, #4]
   b6992:	f7ff ffd3 	bl	b693c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6996:	4629      	mov	r1, r5
   b6998:	6860      	ldr	r0, [r4, #4]
   b699a:	f7ff ffcf 	bl	b693c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b699e:	6860      	ldr	r0, [r4, #4]
   b69a0:	2100      	movs	r1, #0
   b69a2:	f002 fa27 	bl	b8df4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b69a6:	b148      	cbz	r0, b69bc <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b69a8:	2400      	movs	r4, #0
   b69aa:	e000      	b.n	b69ae <_ZN6MB85RC8readDataEjPhj+0x42>
   b69ac:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b69ae:	a801      	add	r0, sp, #4
   b69b0:	f7ff ffd5 	bl	b695e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b69b4:	4620      	mov	r0, r4
   b69b6:	b003      	add	sp, #12
   b69b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b69bc:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b69be:	7b21      	ldrb	r1, [r4, #12]
   b69c0:	6860      	ldr	r0, [r4, #4]
   b69c2:	46b8      	mov	r8, r7
   b69c4:	bf28      	it	cs
   b69c6:	f04f 0820 	movcs.w	r8, #32
   b69ca:	2301      	movs	r3, #1
   b69cc:	4642      	mov	r2, r8
   b69ce:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b69d2:	f002 f9de 	bl	b8d92 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b69d6:	f004 fd33 	bl	bb440 <_Z19__fetch_global_Wirev>
   b69da:	6803      	ldr	r3, [r0, #0]
   b69dc:	691b      	ldr	r3, [r3, #16]
   b69de:	4798      	blx	r3
   b69e0:	4540      	cmp	r0, r8
   b69e2:	dbe1      	blt.n	b69a8 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b69e4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b69e8:	f004 fd2a 	bl	bb440 <_Z19__fetch_global_Wirev>
   b69ec:	6803      	ldr	r3, [r0, #0]
   b69ee:	695b      	ldr	r3, [r3, #20]
   b69f0:	4798      	blx	r3
   b69f2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b69f6:	454e      	cmp	r6, r9
   b69f8:	d1f6      	bne.n	b69e8 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b69fa:	4445      	add	r5, r8
				dataLen--;
   b69fc:	eba7 0708 	sub.w	r7, r7, r8
   b6a00:	e7be      	b.n	b6980 <_ZN6MB85RC8readDataEjPhj+0x14>

000b6a02 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6a02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a06:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6a08:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6a0a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6a0c:	460e      	mov	r6, r1
   b6a0e:	4690      	mov	r8, r2
   b6a10:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6a12:	f002 f9f3 	bl	b8dfc <_ZN7TwoWire4lockEv>
   b6a16:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b6a1a:	f1b9 0f00 	cmp.w	r9, #0
   b6a1e:	d02a      	beq.n	b6a76 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6a20:	b34d      	cbz	r5, b6a76 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6a22:	68e1      	ldr	r1, [r4, #12]
   b6a24:	6860      	ldr	r0, [r4, #4]
   b6a26:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6a2a:	f002 f9c8 	bl	b8dbe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6a2e:	0a31      	lsrs	r1, r6, #8
   b6a30:	6860      	ldr	r0, [r4, #4]
   b6a32:	f7ff ff83 	bl	b693c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6a36:	6860      	ldr	r0, [r4, #4]
   b6a38:	4631      	mov	r1, r6
   b6a3a:	f7ff ff7f 	bl	b693c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6a3e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b6a42:	4647      	mov	r7, r8
   b6a44:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b6a48:	6860      	ldr	r0, [r4, #4]
   b6a4a:	f817 1b01 	ldrb.w	r1, [r7], #1
   b6a4e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b6a50:	3d01      	subs	r5, #1
				wire.write(*data);
   b6a52:	689b      	ldr	r3, [r3, #8]
   b6a54:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6a56:	4555      	cmp	r5, sl
   b6a58:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b6a5c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6a5e:	d001      	beq.n	b6a64 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b6a60:	2d00      	cmp	r5, #0
   b6a62:	d1f1      	bne.n	b6a48 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6a64:	6860      	ldr	r0, [r4, #4]
   b6a66:	2101      	movs	r1, #1
   b6a68:	f002 f9c4 	bl	b8df4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6a6c:	2800      	cmp	r0, #0
   b6a6e:	d0d7      	beq.n	b6a20 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6a70:	f04f 0900 	mov.w	r9, #0
   b6a74:	e7d1      	b.n	b6a1a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b6a76:	a801      	add	r0, sp, #4
   b6a78:	f7ff ff71 	bl	b695e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6a7c:	4648      	mov	r0, r9
   b6a7e:	b003      	add	sp, #12
   b6a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6a84 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a88:	b08b      	sub	sp, #44	; 0x2c
   b6a8a:	460e      	mov	r6, r1
   b6a8c:	4615      	mov	r5, r2
   b6a8e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6a90:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6a92:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6a94:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b6a96:	f002 f9b1 	bl	b8dfc <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b6a9a:	42ae      	cmp	r6, r5
   b6a9c:	d229      	bcs.n	b6af2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b6a9e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b6aa0:	4425      	add	r5, r4
			while(numBytes > 0) {
   b6aa2:	b18c      	cbz	r4, b6ac8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b6aa4:	2c1e      	cmp	r4, #30
   b6aa6:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6aa8:	f8d8 3000 	ldr.w	r3, [r8]
   b6aac:	bf28      	it	cs
   b6aae:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6ab0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b6ab2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6ab6:	aa02      	add	r2, sp, #8
   b6ab8:	463b      	mov	r3, r7
   b6aba:	4631      	mov	r1, r6
   b6abc:	4640      	mov	r0, r8
				framAddrTo -= count;
   b6abe:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6ac0:	47c8      	blx	r9
				if (!result) {
   b6ac2:	b948      	cbnz	r0, b6ad8 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6ac4:	2400      	movs	r4, #0
   b6ac6:	e000      	b.n	b6aca <_ZN6MB85RC8moveDataEjjj+0x46>
   b6ac8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6aca:	a801      	add	r0, sp, #4
   b6acc:	f7ff ff47 	bl	b695e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6ad0:	4620      	mov	r0, r4
   b6ad2:	b00b      	add	sp, #44	; 0x2c
   b6ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6ad8:	f8d8 3000 	ldr.w	r3, [r8]
   b6adc:	aa02      	add	r2, sp, #8
   b6ade:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6ae2:	4629      	mov	r1, r5
   b6ae4:	463b      	mov	r3, r7
   b6ae6:	4640      	mov	r0, r8
   b6ae8:	47c8      	blx	r9
				if (!result) {
   b6aea:	2800      	cmp	r0, #0
   b6aec:	d0ea      	beq.n	b6ac4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6aee:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6af0:	e7d7      	b.n	b6aa2 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b6af2:	d9e9      	bls.n	b6ac8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6af4:	2c00      	cmp	r4, #0
   b6af6:	d0e7      	beq.n	b6ac8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6af8:	f8d8 3000 	ldr.w	r3, [r8]
   b6afc:	2c1e      	cmp	r4, #30
   b6afe:	4627      	mov	r7, r4
   b6b00:	bf28      	it	cs
   b6b02:	271e      	movcs	r7, #30
   b6b04:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6b08:	aa02      	add	r2, sp, #8
   b6b0a:	463b      	mov	r3, r7
   b6b0c:	4631      	mov	r1, r6
   b6b0e:	4640      	mov	r0, r8
   b6b10:	47c8      	blx	r9
				if (!result) {
   b6b12:	2800      	cmp	r0, #0
   b6b14:	d0d6      	beq.n	b6ac4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6b16:	f8d8 3000 	ldr.w	r3, [r8]
   b6b1a:	aa02      	add	r2, sp, #8
   b6b1c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6b20:	4629      	mov	r1, r5
   b6b22:	463b      	mov	r3, r7
   b6b24:	4640      	mov	r0, r8
   b6b26:	47c8      	blx	r9
				if (!result) {
   b6b28:	2800      	cmp	r0, #0
   b6b2a:	d0cb      	beq.n	b6ac4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6b2c:	443e      	add	r6, r7
				framAddrTo += count;
   b6b2e:	443d      	add	r5, r7
				numBytes -= count;
   b6b30:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6b32:	e7df      	b.n	b6af4 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6b34 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b6b34:	6001      	str	r1, [r0, #0]
   b6b36:	7102      	strb	r2, [r0, #4]
{
}
   b6b38:	4770      	bx	lr

000b6b3a <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b6b3a:	6800      	ldr	r0, [r0, #0]
   b6b3c:	6803      	ldr	r3, [r0, #0]
   b6b3e:	68db      	ldr	r3, [r3, #12]
   b6b40:	4718      	bx	r3

000b6b42 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b6b42:	6800      	ldr	r0, [r0, #0]
   b6b44:	6803      	ldr	r3, [r0, #0]
   b6b46:	6a1b      	ldr	r3, [r3, #32]
   b6b48:	4718      	bx	r3

000b6b4a <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b6b4a:	6800      	ldr	r0, [r0, #0]
   b6b4c:	6803      	ldr	r3, [r0, #0]
   b6b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b50:	4718      	bx	r3

000b6b52 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b6b52:	7900      	ldrb	r0, [r0, #4]
   b6b54:	4770      	bx	lr

000b6b56 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b6b56:	6800      	ldr	r0, [r0, #0]
   b6b58:	6803      	ldr	r3, [r0, #0]
   b6b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6b5c:	4718      	bx	r3

000b6b5e <_ZN10RHDatagram6sendtoEPhhh>:
{
   b6b5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b60:	4605      	mov	r5, r0
   b6b62:	460c      	mov	r4, r1
    setHeaderTo(address);
   b6b64:	4619      	mov	r1, r3
{
   b6b66:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b6b68:	f7ff fff5 	bl	b6b56 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b6b6c:	6828      	ldr	r0, [r5, #0]
   b6b6e:	9a01      	ldr	r2, [sp, #4]
   b6b70:	6803      	ldr	r3, [r0, #0]
   b6b72:	695b      	ldr	r3, [r3, #20]
   b6b74:	4621      	mov	r1, r4
}
   b6b76:	b003      	add	sp, #12
   b6b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b6b7c:	4718      	bx	r3

000b6b7e <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b6b7e:	6800      	ldr	r0, [r0, #0]
   b6b80:	6803      	ldr	r3, [r0, #0]
   b6b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b84:	4718      	bx	r3

000b6b86 <_ZN10RHDatagram14setThisAddressEh>:
{
   b6b86:	b538      	push	{r3, r4, r5, lr}
   b6b88:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b6b8a:	6800      	ldr	r0, [r0, #0]
   b6b8c:	6803      	ldr	r3, [r0, #0]
{
   b6b8e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b6b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b92:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b6b94:	4629      	mov	r1, r5
   b6b96:	4620      	mov	r0, r4
   b6b98:	f7ff fff1 	bl	b6b7e <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b6b9c:	7125      	strb	r5, [r4, #4]
}
   b6b9e:	bd38      	pop	{r3, r4, r5, pc}

000b6ba0 <_ZN10RHDatagram4initEv>:
{
   b6ba0:	b538      	push	{r3, r4, r5, lr}
   b6ba2:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b6ba4:	6800      	ldr	r0, [r0, #0]
   b6ba6:	6803      	ldr	r3, [r0, #0]
   b6ba8:	689b      	ldr	r3, [r3, #8]
   b6baa:	4798      	blx	r3
    if (ret)
   b6bac:	4605      	mov	r5, r0
   b6bae:	b118      	cbz	r0, b6bb8 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b6bb0:	7921      	ldrb	r1, [r4, #4]
   b6bb2:	4620      	mov	r0, r4
   b6bb4:	f7ff ffe7 	bl	b6b86 <_ZN10RHDatagram14setThisAddressEh>
}
   b6bb8:	4628      	mov	r0, r5
   b6bba:	bd38      	pop	{r3, r4, r5, pc}

000b6bbc <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b6bbc:	6800      	ldr	r0, [r0, #0]
   b6bbe:	6803      	ldr	r3, [r0, #0]
   b6bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6bc2:	4718      	bx	r3

000b6bc4 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b6bc4:	6800      	ldr	r0, [r0, #0]
   b6bc6:	6803      	ldr	r3, [r0, #0]
   b6bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6bca:	4718      	bx	r3

000b6bcc <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b6bcc:	6800      	ldr	r0, [r0, #0]
   b6bce:	6803      	ldr	r3, [r0, #0]
   b6bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6bd2:	4718      	bx	r3

000b6bd4 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b6bd4:	6800      	ldr	r0, [r0, #0]
   b6bd6:	6803      	ldr	r3, [r0, #0]
   b6bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6bda:	4718      	bx	r3

000b6bdc <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b6bdc:	6800      	ldr	r0, [r0, #0]
   b6bde:	6803      	ldr	r3, [r0, #0]
   b6be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6be2:	4718      	bx	r3

000b6be4 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b6be4:	6800      	ldr	r0, [r0, #0]
   b6be6:	6803      	ldr	r3, [r0, #0]
   b6be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6bea:	4718      	bx	r3

000b6bec <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b6bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6bf0:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b6bf2:	6800      	ldr	r0, [r0, #0]
{
   b6bf4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b6bf6:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b6bf8:	6803      	ldr	r3, [r0, #0]
   b6bfa:	691b      	ldr	r3, [r3, #16]
{
   b6bfc:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b6c00:	4798      	blx	r3
   b6c02:	4605      	mov	r5, r0
   b6c04:	b1c8      	cbz	r0, b6c3a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b6c06:	b11e      	cbz	r6, b6c10 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b6c08:	4620      	mov	r0, r4
   b6c0a:	f7ff ffe3 	bl	b6bd4 <_ZN10RHDatagram10headerFromEv>
   b6c0e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b6c10:	f1b9 0f00 	cmp.w	r9, #0
   b6c14:	d004      	beq.n	b6c20 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b6c16:	4620      	mov	r0, r4
   b6c18:	f7ff ffd8 	bl	b6bcc <_ZN10RHDatagram8headerToEv>
   b6c1c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b6c20:	f1b8 0f00 	cmp.w	r8, #0
   b6c24:	d004      	beq.n	b6c30 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b6c26:	4620      	mov	r0, r4
   b6c28:	f7ff ffd8 	bl	b6bdc <_ZN10RHDatagram8headerIdEv>
   b6c2c:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b6c30:	b11f      	cbz	r7, b6c3a <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b6c32:	4620      	mov	r0, r4
   b6c34:	f7ff ffd6 	bl	b6be4 <_ZN10RHDatagram11headerFlagsEv>
   b6c38:	7038      	strb	r0, [r7, #0]
}
   b6c3a:	4628      	mov	r0, r5
   b6c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6c40 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b6c40:	2001      	movs	r0, #1
   b6c42:	4770      	bx	lr

000b6c44 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b6c44:	7903      	ldrb	r3, [r0, #4]
   b6c46:	2b03      	cmp	r3, #3
   b6c48:	d0fc      	beq.n	b6c44 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b6c4a:	2001      	movs	r0, #1
   b6c4c:	4770      	bx	lr

000b6c4e <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b6c4e:	2000      	movs	r0, #0
   b6c50:	4770      	bx	lr

000b6c52 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b6c52:	7181      	strb	r1, [r0, #6]
}
   b6c54:	4770      	bx	lr

000b6c56 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b6c56:	7141      	strb	r1, [r0, #5]
}
   b6c58:	4770      	bx	lr

000b6c5a <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b6c5a:	72c1      	strb	r1, [r0, #11]
}
   b6c5c:	4770      	bx	lr

000b6c5e <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b6c5e:	7301      	strb	r1, [r0, #12]
}
   b6c60:	4770      	bx	lr

000b6c62 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b6c62:	7341      	strb	r1, [r0, #13]
}
   b6c64:	4770      	bx	lr

000b6c66 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b6c66:	7b83      	ldrb	r3, [r0, #14]
   b6c68:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b6c6c:	4311      	orrs	r1, r2
   b6c6e:	7381      	strb	r1, [r0, #14]
}
   b6c70:	4770      	bx	lr

000b6c72 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b6c72:	79c0      	ldrb	r0, [r0, #7]
}
   b6c74:	4770      	bx	lr

000b6c76 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b6c76:	7a00      	ldrb	r0, [r0, #8]
}
   b6c78:	4770      	bx	lr

000b6c7a <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b6c7a:	7a40      	ldrb	r0, [r0, #9]
}
   b6c7c:	4770      	bx	lr

000b6c7e <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b6c7e:	7a80      	ldrb	r0, [r0, #10]
}
   b6c80:	4770      	bx	lr

000b6c82 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b6c82:	8a00      	ldrh	r0, [r0, #16]
}
   b6c84:	b200      	sxth	r0, r0
   b6c86:	4770      	bx	lr

000b6c88 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b6c88:	7900      	ldrb	r0, [r0, #4]
}
   b6c8a:	4770      	bx	lr

000b6c8c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b6c8c:	7101      	strb	r1, [r0, #4]
}
   b6c8e:	4770      	bx	lr

000b6c90 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b6c90:	8a40      	ldrh	r0, [r0, #18]
}
   b6c92:	b280      	uxth	r0, r0
   b6c94:	4770      	bx	lr

000b6c96 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b6c96:	8a80      	ldrh	r0, [r0, #20]
}
   b6c98:	b280      	uxth	r0, r0
   b6c9a:	4770      	bx	lr

000b6c9c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b6c9c:	8ac0      	ldrh	r0, [r0, #22]
}
   b6c9e:	b280      	uxth	r0, r0
   b6ca0:	4770      	bx	lr

000b6ca2 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b6ca2:	b538      	push	{r3, r4, r5, lr}
   b6ca4:	4605      	mov	r5, r0
   b6ca6:	460c      	mov	r4, r1
    while (!available())
   b6ca8:	682b      	ldr	r3, [r5, #0]
   b6caa:	4628      	mov	r0, r5
   b6cac:	68db      	ldr	r3, [r3, #12]
   b6cae:	4798      	blx	r3
   b6cb0:	b928      	cbnz	r0, b6cbe <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b6cb2:	2c00      	cmp	r4, #0
   b6cb4:	d0f8      	beq.n	b6ca8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b6cb6:	4620      	mov	r0, r4
   b6cb8:	f001 fe2a 	bl	b8910 <delay>
   b6cbc:	e7f4      	b.n	b6ca8 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b6cbe:	bd38      	pop	{r3, r4, r5, pc}

000b6cc0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b6cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cc2:	4605      	mov	r5, r0
   b6cc4:	460f      	mov	r7, r1
   b6cc6:	4614      	mov	r4, r2
   b6cc8:	f001 fabe 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b6ccc:	4606      	mov	r6, r0
   b6cce:	f001 fabb 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6cd2:	1b80      	subs	r0, r0, r6
   b6cd4:	42b8      	cmp	r0, r7
   b6cd6:	d20a      	bcs.n	b6cee <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b6cd8:	682b      	ldr	r3, [r5, #0]
   b6cda:	4628      	mov	r0, r5
   b6cdc:	68db      	ldr	r3, [r3, #12]
   b6cde:	4798      	blx	r3
   b6ce0:	b930      	cbnz	r0, b6cf0 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b6ce2:	2c00      	cmp	r4, #0
   b6ce4:	d0f3      	beq.n	b6cce <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	f001 fe12 	bl	b8910 <delay>
   b6cec:	e7ef      	b.n	b6cce <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b6cee:	2000      	movs	r0, #0
}
   b6cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6cf2 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b6cf2:	b570      	push	{r4, r5, r6, lr}
   b6cf4:	4604      	mov	r4, r0
   b6cf6:	460e      	mov	r6, r1
   b6cf8:	f001 faa6 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b6cfc:	4605      	mov	r5, r0
   b6cfe:	f001 faa3 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6d02:	1b40      	subs	r0, r0, r5
   b6d04:	42b0      	cmp	r0, r6
   b6d06:	d204      	bcs.n	b6d12 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b6d08:	7923      	ldrb	r3, [r4, #4]
   b6d0a:	2b03      	cmp	r3, #3
   b6d0c:	d0f7      	beq.n	b6cfe <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b6d0e:	2001      	movs	r0, #1
}
   b6d10:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b6d12:	2000      	movs	r0, #0
   b6d14:	e7fc      	b.n	b6d10 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b6d16 <_ZN15RHGenericDriver7waitCADEv>:
{
   b6d16:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b6d18:	69c3      	ldr	r3, [r0, #28]
{
   b6d1a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b6d1c:	b1b3      	cbz	r3, b6d4c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6d1e:	f001 fa93 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6d22:	2664      	movs	r6, #100	; 0x64
   b6d24:	4605      	mov	r5, r0
    while (isChannelActive())
   b6d26:	6823      	ldr	r3, [r4, #0]
   b6d28:	4620      	mov	r0, r4
   b6d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d2c:	4798      	blx	r3
   b6d2e:	b168      	cbz	r0, b6d4c <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6d30:	f001 fa8a 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b6d34:	69e3      	ldr	r3, [r4, #28]
   b6d36:	1b40      	subs	r0, r0, r5
   b6d38:	4298      	cmp	r0, r3
   b6d3a:	d809      	bhi.n	b6d50 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6d3c:	210a      	movs	r1, #10
   b6d3e:	2001      	movs	r0, #1
   b6d40:	f003 fd2f 	bl	ba7a2 <_Z6randomii>
   b6d44:	4370      	muls	r0, r6
   b6d46:	f001 fde3 	bl	b8910 <delay>
    while (isChannelActive())
   b6d4a:	e7ec      	b.n	b6d26 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b6d4c:	2001      	movs	r0, #1
}
   b6d4e:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b6d50:	2000      	movs	r0, #0
   b6d52:	e7fc      	b.n	b6d4e <_ZN15RHGenericDriver7waitCADEv+0x38>

000b6d54 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b6d54:	4a06      	ldr	r2, [pc, #24]	; (b6d70 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b6d56:	6002      	str	r2, [r0, #0]
   b6d58:	21ff      	movs	r1, #255	; 0xff
   b6d5a:	2200      	movs	r2, #0
   b6d5c:	7102      	strb	r2, [r0, #4]
   b6d5e:	7141      	strb	r1, [r0, #5]
   b6d60:	8242      	strh	r2, [r0, #18]
   b6d62:	72c1      	strb	r1, [r0, #11]
   b6d64:	8282      	strh	r2, [r0, #20]
   b6d66:	8181      	strh	r1, [r0, #12]
   b6d68:	7382      	strb	r2, [r0, #14]
   b6d6a:	82c2      	strh	r2, [r0, #22]
   b6d6c:	61c2      	str	r2, [r0, #28]
}
   b6d6e:	4770      	bx	lr
   b6d70:	000bcdcc 	.word	0x000bcdcc

000b6d74 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b6d74:	4770      	bx	lr

000b6d76 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b6d76:	4770      	bx	lr

000b6d78 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b6d78:	4770      	bx	lr

000b6d7a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b6d7a:	4770      	bx	lr

000b6d7c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b6d7c:	4770      	bx	lr

000b6d7e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b6d7e:	7141      	strb	r1, [r0, #5]
}
   b6d80:	4770      	bx	lr

000b6d82 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b6d82:	7181      	strb	r1, [r0, #6]
}
   b6d84:	4770      	bx	lr

000b6d86 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b6d86:	7101      	strb	r1, [r0, #4]
}
   b6d88:	4770      	bx	lr
	...

000b6d8c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6d8c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b6d8e:	4d03      	ldr	r5, [pc, #12]	; (b6d9c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b6d90:	6005      	str	r5, [r0, #0]
   b6d92:	7101      	strb	r1, [r0, #4]
   b6d94:	7142      	strb	r2, [r0, #5]
   b6d96:	7183      	strb	r3, [r0, #6]
}
   b6d98:	bd30      	pop	{r4, r5, pc}
   b6d9a:	bf00      	nop
   b6d9c:	000bce4c 	.word	0x000bce4c

000b6da0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6da0:	4770      	bx	lr

000b6da2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6da2:	b510      	push	{r4, lr}
  }
   b6da4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6da6:	4604      	mov	r4, r0
  }
   b6da8:	f7fd f979 	bl	b409e <_ZdlPvj>
   b6dac:	4620      	mov	r0, r4
   b6dae:	bd10      	pop	{r4, pc}

000b6db0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6db0:	b40e      	push	{r1, r2, r3}
   b6db2:	b503      	push	{r0, r1, lr}
   b6db4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b6db6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6db8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b6dbc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b6dbe:	f003 fcb4 	bl	ba72a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b6dc2:	b002      	add	sp, #8
   b6dc4:	f85d eb04 	ldr.w	lr, [sp], #4
   b6dc8:	b003      	add	sp, #12
   b6dca:	4770      	bx	lr

000b6dcc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6dce:	4604      	mov	r4, r0
   b6dd0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6dd2:	7922      	ldrb	r2, [r4, #4]
   b6dd4:	68a3      	ldr	r3, [r4, #8]
   b6dd6:	b132      	cbz	r2, b6de6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6dd8:	b9a3      	cbnz	r3, b6e04 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6dda:	490b      	ldr	r1, [pc, #44]	; (b6e08 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6ddc:	b002      	add	sp, #8
   b6dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6de2:	f003 bb99 	b.w	ba518 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6de6:	4a09      	ldr	r2, [pc, #36]	; (b6e0c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6de8:	7b26      	ldrb	r6, [r4, #12]
   b6dea:	4d09      	ldr	r5, [pc, #36]	; (b6e10 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6dec:	4909      	ldr	r1, [pc, #36]	; (b6e14 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6dee:	7b64      	ldrb	r4, [r4, #13]
   b6df0:	2e01      	cmp	r6, #1
   b6df2:	bf18      	it	ne
   b6df4:	4629      	movne	r1, r5
   b6df6:	e9cd 1400 	strd	r1, r4, [sp]
   b6dfa:	4907      	ldr	r1, [pc, #28]	; (b6e18 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6dfc:	f7ff ffd8 	bl	b6db0 <_ZN5Print6printfEPKcz>
  }
   b6e00:	b002      	add	sp, #8
   b6e02:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6e04:	4a05      	ldr	r2, [pc, #20]	; (b6e1c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6e06:	e7ef      	b.n	b6de8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6e08:	000bce89 	.word	0x000bce89
   b6e0c:	000bd251 	.word	0x000bd251
   b6e10:	000bce85 	.word	0x000bce85
   b6e14:	000bce81 	.word	0x000bce81
   b6e18:	000bce9f 	.word	0x000bce9f
   b6e1c:	000bce78 	.word	0x000bce78

000b6e20 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6e20:	b510      	push	{r4, lr}
   b6e22:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b6e24:	f7ff ffb2 	bl	b6d8c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b6e28:	4b05      	ldr	r3, [pc, #20]	; (b6e40 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b6e2a:	6023      	str	r3, [r4, #0]
  {
   b6e2c:	4b05      	ldr	r3, [pc, #20]	; (b6e44 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b6e2e:	60a3      	str	r3, [r4, #8]
   b6e30:	2301      	movs	r3, #1
   b6e32:	7323      	strb	r3, [r4, #12]
   b6e34:	2300      	movs	r3, #0
   b6e36:	6123      	str	r3, [r4, #16]
   b6e38:	82a3      	strh	r3, [r4, #20]
{
}
   b6e3a:	4620      	mov	r0, r4
   b6e3c:	bd10      	pop	{r4, pc}
   b6e3e:	bf00      	nop
   b6e40:	000bced8 	.word	0x000bced8
   b6e44:	000bcec4 	.word	0x000bcec4

000b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b6e48:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b6e4a:	4c0b      	ldr	r4, [pc, #44]	; (b6e78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6e4c:	7821      	ldrb	r1, [r4, #0]
   b6e4e:	f3bf 8f5b 	dmb	ish
   b6e52:	f011 0101 	ands.w	r1, r1, #1
   b6e56:	d10b      	bne.n	b6e70 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6e58:	4620      	mov	r0, r4
   b6e5a:	9101      	str	r1, [sp, #4]
   b6e5c:	f7fd f92e 	bl	b40bc <__cxa_guard_acquire>
   b6e60:	9901      	ldr	r1, [sp, #4]
   b6e62:	b128      	cbz	r0, b6e70 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6e64:	4805      	ldr	r0, [pc, #20]	; (b6e7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6e66:	f003 fcb5 	bl	ba7d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	f7fd f92b 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b6e70:	4802      	ldr	r0, [pc, #8]	; (b6e7c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6e72:	b002      	add	sp, #8
   b6e74:	bd10      	pop	{r4, pc}
   b6e76:	bf00      	nop
   b6e78:	2003e3e4 	.word	0x2003e3e4
   b6e7c:	2003e3e8 	.word	0x2003e3e8

000b6e80 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b6e80:	b507      	push	{r0, r1, r2, lr}
   b6e82:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b6e84:	f7ff ffe0 	bl	b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6e88:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b6e8a:	b003      	add	sp, #12
   b6e8c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6e90:	f003 bd58 	b.w	ba944 <_ZN8SPIClass8transferEh>

000b6e94 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b6e94:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b6e96:	f7ff ffd7 	bl	b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b6e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6e9e:	f003 bd57 	b.w	ba950 <_ZN8SPIClass15attachInterruptEv>

000b6ea2 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b6ea2:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b6ea4:	f7ff ffd0 	bl	b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b6ea8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6eac:	f003 bd51 	b.w	ba952 <_ZN8SPIClass15detachInterruptEv>

000b6eb0 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b6eb0:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b6eb2:	7903      	ldrb	r3, [r0, #4]
   b6eb4:	2b04      	cmp	r3, #4
   b6eb6:	d020      	beq.n	b6efa <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b6eb8:	2b03      	cmp	r3, #3
   b6eba:	d020      	beq.n	b6efe <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b6ebc:	2b02      	cmp	r3, #2
   b6ebe:	d020      	beq.n	b6f02 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b6ec0:	4a11      	ldr	r2, [pc, #68]	; (b6f08 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b6ec2:	4912      	ldr	r1, [pc, #72]	; (b6f0c <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b6ec4:	2b01      	cmp	r3, #1
   b6ec6:	bf18      	it	ne
   b6ec8:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b6eca:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b6ecc:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b6ece:	3901      	subs	r1, #1
   b6ed0:	bf18      	it	ne
   b6ed2:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b6ed4:	b133      	cbz	r3, b6ee4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b6ed6:	2b01      	cmp	r3, #1
   b6ed8:	d004      	beq.n	b6ee4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b6eda:	2b02      	cmp	r3, #2
   b6edc:	d002      	beq.n	b6ee4 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b6ede:	2b03      	cmp	r3, #3
   b6ee0:	bf18      	it	ne
   b6ee2:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b6ee4:	2400      	movs	r4, #0
   b6ee6:	7304      	strb	r4, [r0, #12]
   b6ee8:	6102      	str	r2, [r0, #16]
   b6eea:	7501      	strb	r1, [r0, #20]
   b6eec:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b6eee:	f7ff ffab 	bl	b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b6ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6ef6:	f003 bc77 	b.w	ba7e8 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b6efa:	4a05      	ldr	r2, [pc, #20]	; (b6f10 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b6efc:	e7e5      	b.n	b6eca <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b6efe:	4a05      	ldr	r2, [pc, #20]	; (b6f14 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b6f00:	e7e3      	b.n	b6eca <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b6f02:	4a05      	ldr	r2, [pc, #20]	; (b6f18 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b6f04:	e7e1      	b.n	b6eca <_ZN13RHHardwareSPI5beginEv+0x1a>
   b6f06:	bf00      	nop
   b6f08:	001e8480 	.word	0x001e8480
   b6f0c:	000f4240 	.word	0x000f4240
   b6f10:	00f42400 	.word	0x00f42400
   b6f14:	007a1200 	.word	0x007a1200
   b6f18:	003d0900 	.word	0x003d0900

000b6f1c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b6f1c:	b508      	push	{r3, lr}
        instance().end();
   b6f1e:	f7ff ff93 	bl	b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b6f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6f26:	f003 bc73 	b.w	ba810 <_ZN8SPIClass3endEv>

000b6f2a <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b6f2a:	b510      	push	{r4, lr}
   b6f2c:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b6f2e:	f7ff ff8b 	bl	b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6f32:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b6f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f3a:	f003 bc95 	b.w	ba868 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6f3e <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b6f3e:	b508      	push	{r3, lr}
        instance().endTransaction();
   b6f40:	f7ff ff82 	bl	b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b6f44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6f48:	f003 bc74 	b.w	ba834 <_ZN8SPIClass14endTransactionEv>

000b6f4c <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b6f4c:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b6f4e:	f7ff ff7b 	bl	b6e48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b6f52:	bd08      	pop	{r3, pc}

000b6f54 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b6f54:	2300      	movs	r3, #0
   b6f56:	4802      	ldr	r0, [pc, #8]	; (b6f60 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b6f58:	461a      	mov	r2, r3
   b6f5a:	4619      	mov	r1, r3
   b6f5c:	f7ff bf60 	b.w	b6e20 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b6f60:	2003e3f0 	.word	0x2003e3f0

000b6f64 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b6f64:	2a01      	cmp	r2, #1
   b6f66:	d105      	bne.n	b6f74 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b6f68:	7a00      	ldrb	r0, [r0, #8]
   b6f6a:	780b      	ldrb	r3, [r1, #0]
   b6f6c:	1a1b      	subs	r3, r3, r0
   b6f6e:	4258      	negs	r0, r3
   b6f70:	4158      	adcs	r0, r3
   b6f72:	4770      	bx	lr
   b6f74:	2000      	movs	r0, #0
}
   b6f76:	4770      	bx	lr

000b6f78 <_ZN6RHMesh5doArpEh>:
{
   b6f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6f7c:	4c25      	ldr	r4, [pc, #148]	; (b7014 <_ZN6RHMesh5doArpEh+0x9c>)
   b6f7e:	2301      	movs	r3, #1
{
   b6f80:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6f82:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b6f84:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6f86:	2300      	movs	r3, #0
{
   b6f88:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b6f8a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6f8c:	9300      	str	r3, [sp, #0]
   b6f8e:	2203      	movs	r2, #3
   b6f90:	23ff      	movs	r3, #255	; 0xff
   b6f92:	4621      	mov	r1, r4
{
   b6f94:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6f96:	f000 fbb7 	bl	b7708 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b6f9a:	b120      	cbz	r0, b6fa6 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b6f9c:	2500      	movs	r5, #0
}
   b6f9e:	4628      	mov	r0, r5
   b6fa0:	b006      	add	sp, #24
   b6fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b6fa6:	23fa      	movs	r3, #250	; 0xfa
   b6fa8:	f88d 3017 	strb.w	r3, [sp, #23]
   b6fac:	f001 f94c 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b6fb0:	f106 0904 	add.w	r9, r6, #4
   b6fb4:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b6fb6:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b6fba:	f001 f945 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b6fbe:	1a29      	subs	r1, r5, r0
   b6fc0:	2900      	cmp	r1, #0
   b6fc2:	ddeb      	ble.n	b6f9c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b6fc4:	2200      	movs	r2, #0
   b6fc6:	b289      	uxth	r1, r1
   b6fc8:	4648      	mov	r0, r9
   b6fca:	f7ff fdbe 	bl	b6b4a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b6fce:	2800      	cmp	r0, #0
   b6fd0:	d0f3      	beq.n	b6fba <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b6fd2:	2300      	movs	r3, #0
   b6fd4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6fd8:	e9cd 3300 	strd	r3, r3, [sp]
   b6fdc:	f10d 0217 	add.w	r2, sp, #23
   b6fe0:	4621      	mov	r1, r4
   b6fe2:	4630      	mov	r0, r6
   b6fe4:	f000 fb9a 	bl	b771c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b6fe8:	4605      	mov	r5, r0
   b6fea:	2800      	cmp	r0, #0
   b6fec:	d0e3      	beq.n	b6fb6 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b6fee:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b6ff2:	2b01      	cmp	r3, #1
   b6ff4:	d9df      	bls.n	b6fb6 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b6ff6:	f894 a000 	ldrb.w	sl, [r4]
   b6ffa:	f1ba 0f02 	cmp.w	sl, #2
   b6ffe:	d1da      	bne.n	b6fb6 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b7000:	4648      	mov	r0, r9
   b7002:	f7ff fde7 	bl	b6bd4 <_ZN10RHDatagram10headerFromEv>
   b7006:	4653      	mov	r3, sl
   b7008:	4602      	mov	r2, r0
   b700a:	4639      	mov	r1, r7
   b700c:	4630      	mov	r0, r6
   b700e:	f000 faf3 	bl	b75f8 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b7012:	e7c4      	b.n	b6f9e <_ZN6RHMesh5doArpEh+0x26>
   b7014:	2003e408 	.word	0x2003e408

000b7018 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b7018:	2a01      	cmp	r2, #1
{
   b701a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b701e:	4607      	mov	r7, r0
   b7020:	460e      	mov	r6, r1
   b7022:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b7024:	d93b      	bls.n	b709e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7026:	794d      	ldrb	r5, [r1, #5]
   b7028:	2d02      	cmp	r5, #2
   b702a:	d130      	bne.n	b708e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b702c:	f100 0804 	add.w	r8, r0, #4
   b7030:	79c9      	ldrb	r1, [r1, #7]
   b7032:	9101      	str	r1, [sp, #4]
   b7034:	4640      	mov	r0, r8
   b7036:	f7ff fdcd 	bl	b6bd4 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b703a:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b703c:	462b      	mov	r3, r5
   b703e:	4602      	mov	r2, r0
   b7040:	9901      	ldr	r1, [sp, #4]
   b7042:	4638      	mov	r0, r7
   b7044:	f000 fad8 	bl	b75f8 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7048:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b704a:	f106 0308 	add.w	r3, r6, #8
   b704e:	2400      	movs	r4, #0
   b7050:	4622      	mov	r2, r4
   b7052:	4295      	cmp	r5, r2
   b7054:	f104 0401 	add.w	r4, r4, #1
   b7058:	b2e4      	uxtb	r4, r4
   b705a:	d904      	bls.n	b7066 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b705c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7060:	7a39      	ldrb	r1, [r7, #8]
   b7062:	4291      	cmp	r1, r2
   b7064:	d1f4      	bne.n	b7050 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b7066:	f104 0108 	add.w	r1, r4, #8
   b706a:	440e      	add	r6, r1
	while (i < numRoutes)
   b706c:	42a5      	cmp	r5, r4
   b706e:	d916      	bls.n	b709e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b7070:	f816 1b01 	ldrb.w	r1, [r6], #1
   b7074:	9101      	str	r1, [sp, #4]
   b7076:	4640      	mov	r0, r8
   b7078:	f7ff fdac 	bl	b6bd4 <_ZN10RHDatagram10headerFromEv>
   b707c:	3401      	adds	r4, #1
   b707e:	4602      	mov	r2, r0
   b7080:	9901      	ldr	r1, [sp, #4]
   b7082:	2302      	movs	r3, #2
   b7084:	4638      	mov	r0, r7
   b7086:	b2e4      	uxtb	r4, r4
   b7088:	f000 fab6 	bl	b75f8 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b708c:	e7ee      	b.n	b706c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b708e:	2d03      	cmp	r5, #3
   b7090:	d105      	bne.n	b709e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b7092:	7989      	ldrb	r1, [r1, #6]
}
   b7094:	b002      	add	sp, #8
   b7096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b709a:	f000 ba96 	b.w	b75ca <_ZN8RHRouter13deleteRouteToEh>
}
   b709e:	b002      	add	sp, #8
   b70a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b70a4 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b70a4:	b510      	push	{r4, lr}
   b70a6:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b70a8:	f000 fae6 	bl	b7678 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b70ac:	4b01      	ldr	r3, [pc, #4]	; (b70b4 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b70ae:	6023      	str	r3, [r4, #0]
}
   b70b0:	4620      	mov	r0, r4
   b70b2:	bd10      	pop	{r4, pc}
   b70b4:	000bcf0c 	.word	0x000bcf0c

000b70b8 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b70b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b70bc:	2af9      	cmp	r2, #249	; 0xf9
{
   b70be:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b70c2:	4606      	mov	r6, r0
   b70c4:	460f      	mov	r7, r1
   b70c6:	4614      	mov	r4, r2
   b70c8:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b70ca:	d825      	bhi.n	b7118 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b70cc:	2bff      	cmp	r3, #255	; 0xff
   b70ce:	d114      	bne.n	b70fa <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b70d0:	f8df 8048 	ldr.w	r8, [pc, #72]	; b711c <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b70d4:	4640      	mov	r0, r8
   b70d6:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b70d8:	4622      	mov	r2, r4
   b70da:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b70dc:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b70e0:	f004 ff44 	bl	bbf6c <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b70e4:	1c62      	adds	r2, r4, #1
   b70e6:	f8cd 9020 	str.w	r9, [sp, #32]
   b70ea:	462b      	mov	r3, r5
   b70ec:	4641      	mov	r1, r8
   b70ee:	4630      	mov	r0, r6
   b70f0:	b2d2      	uxtb	r2, r2
}
   b70f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b70f6:	f000 bb07 	b.w	b7708 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b70fa:	4619      	mov	r1, r3
   b70fc:	f000 fa21 	bl	b7542 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b7100:	2800      	cmp	r0, #0
   b7102:	d1e5      	bne.n	b70d0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b7104:	6833      	ldr	r3, [r6, #0]
   b7106:	4629      	mov	r1, r5
   b7108:	689b      	ldr	r3, [r3, #8]
   b710a:	4630      	mov	r0, r6
   b710c:	4798      	blx	r3
   b710e:	2800      	cmp	r0, #0
   b7110:	d1de      	bne.n	b70d0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7112:	2002      	movs	r0, #2
}
   b7114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7118:	2001      	movs	r0, #1
   b711a:	e7fb      	b.n	b7114 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b711c:	2003e408 	.word	0x2003e408

000b7120 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b7120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7124:	b089      	sub	sp, #36	; 0x24
   b7126:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7128:	23fa      	movs	r3, #250	; 0xfa
   b712a:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b712e:	f10d 031f 	add.w	r3, sp, #31
   b7132:	9303      	str	r3, [sp, #12]
   b7134:	f10d 031e 	add.w	r3, sp, #30
   b7138:	9302      	str	r3, [sp, #8]
   b713a:	4e5d      	ldr	r6, [pc, #372]	; (b72b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b713c:	f10d 031d 	add.w	r3, sp, #29
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	ab07      	add	r3, sp, #28
   b7144:	9300      	str	r3, [sp, #0]
{     
   b7146:	4689      	mov	r9, r1
   b7148:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b714a:	f10d 031b 	add.w	r3, sp, #27
   b714e:	f10d 021a 	add.w	r2, sp, #26
   b7152:	4631      	mov	r1, r6
{     
   b7154:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b7158:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b715a:	f000 fadf 	bl	b771c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b715e:	4604      	mov	r4, r0
   b7160:	b920      	cbnz	r0, b716c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b7162:	2400      	movs	r4, #0
}
   b7164:	4620      	mov	r0, r4
   b7166:	b009      	add	sp, #36	; 0x24
   b7168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b716c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b7170:	b373      	cbz	r3, b71d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b7172:	7832      	ldrb	r2, [r6, #0]
   b7174:	bb62      	cbnz	r2, b71d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b7176:	f1b8 0f00 	cmp.w	r8, #0
   b717a:	d003      	beq.n	b7184 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b717c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b7180:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b7184:	f1bb 0f00 	cmp.w	fp, #0
   b7188:	d003      	beq.n	b7192 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b718a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b718e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b7192:	f1ba 0f00 	cmp.w	sl, #0
   b7196:	d003      	beq.n	b71a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b7198:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b719c:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b71a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b71a2:	b11a      	cbz	r2, b71ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b71a4:	9914      	ldr	r1, [sp, #80]	; 0x50
   b71a6:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b71aa:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b71ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b71ae:	b11a      	cbz	r2, b71b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b71b0:	9915      	ldr	r1, [sp, #84]	; 0x54
   b71b2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b71b6:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b71b8:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b71ba:	493e      	ldr	r1, [pc, #248]	; (b72b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b71bc:	3b01      	subs	r3, #1
   b71be:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b71c0:	429a      	cmp	r2, r3
		*len = msgLen;
   b71c2:	bf88      	it	hi
   b71c4:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b71c6:	783a      	ldrb	r2, [r7, #0]
   b71c8:	4648      	mov	r0, r9
   b71ca:	f004 fecf 	bl	bbf6c <memcpy>
	    return true;
   b71ce:	e7c9      	b.n	b7164 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b71d0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b71d4:	2aff      	cmp	r2, #255	; 0xff
   b71d6:	d1c4      	bne.n	b7162 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b71d8:	2b01      	cmp	r3, #1
   b71da:	d9c2      	bls.n	b7162 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b71dc:	7832      	ldrb	r2, [r6, #0]
   b71de:	2a01      	cmp	r2, #1
   b71e0:	d1bf      	bne.n	b7162 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b71e2:	7a2a      	ldrb	r2, [r5, #8]
   b71e4:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b71e8:	42a2      	cmp	r2, r4
   b71ea:	d0ba      	beq.n	b7162 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b71ec:	1edf      	subs	r7, r3, #3
   b71ee:	4932      	ldr	r1, [pc, #200]	; (b72b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b71f0:	b2ff      	uxtb	r7, r7
   b71f2:	2300      	movs	r3, #0
   b71f4:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b71f8:	4547      	cmp	r7, r8
   b71fa:	d906      	bls.n	b720a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b71fc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7200:	4282      	cmp	r2, r0
   b7202:	f103 0301 	add.w	r3, r3, #1
   b7206:	d1f5      	bne.n	b71f4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b7208:	e7ab      	b.n	b7162 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b720a:	f105 0904 	add.w	r9, r5, #4
   b720e:	4648      	mov	r0, r9
   b7210:	f7ff fce0 	bl	b6bd4 <_ZN10RHDatagram10headerFromEv>
   b7214:	2302      	movs	r3, #2
   b7216:	4602      	mov	r2, r0
   b7218:	4621      	mov	r1, r4
   b721a:	4628      	mov	r0, r5
   b721c:	f000 f9ec 	bl	b75f8 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b7220:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7224:	b193      	cbz	r3, b724c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b7226:	4c22      	ldr	r4, [pc, #136]	; (b72b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b7228:	1ba3      	subs	r3, r4, r6
   b722a:	b2db      	uxtb	r3, r3
   b722c:	429f      	cmp	r7, r3
   b722e:	d90c      	bls.n	b724a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b7230:	78e1      	ldrb	r1, [r4, #3]
   b7232:	9105      	str	r1, [sp, #20]
   b7234:	4648      	mov	r0, r9
   b7236:	f7ff fccd 	bl	b6bd4 <_ZN10RHDatagram10headerFromEv>
   b723a:	9905      	ldr	r1, [sp, #20]
   b723c:	4602      	mov	r2, r0
   b723e:	2302      	movs	r3, #2
   b7240:	4628      	mov	r0, r5
   b7242:	f000 f9d9 	bl	b75f8 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b7246:	3401      	adds	r4, #1
   b7248:	e7ee      	b.n	b7228 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b724a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b724c:	682b      	ldr	r3, [r5, #0]
   b724e:	7872      	ldrb	r2, [r6, #1]
   b7250:	68db      	ldr	r3, [r3, #12]
   b7252:	491a      	ldr	r1, [pc, #104]	; (b72bc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b7254:	4628      	mov	r0, r5
   b7256:	4798      	blx	r3
   b7258:	4604      	mov	r4, r0
   b725a:	b160      	cbz	r0, b7276 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b725c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b725e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b7260:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b7262:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b7266:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b726a:	4911      	ldr	r1, [pc, #68]	; (b72b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b726c:	9400      	str	r4, [sp, #0]
   b726e:	4628      	mov	r0, r5
   b7270:	f000 fa4a 	bl	b7708 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7274:	e776      	b.n	b7164 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b7276:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b727a:	4543      	cmp	r3, r8
   b727c:	f67f af71 	bls.w	b7162 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b7280:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7284:	2b00      	cmp	r3, #0
   b7286:	f43f af6c 	beq.w	b7162 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b728a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b728e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7290:	4907      	ldr	r1, [pc, #28]	; (b72b0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b7292:	443e      	add	r6, r7
		tmpMessageLen++;
   b7294:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b7296:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7298:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b729c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b729e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72a0:	9300      	str	r3, [sp, #0]
   b72a2:	4628      	mov	r0, r5
   b72a4:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b72a6:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72aa:	f000 f9f7 	bl	b769c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b72ae:	e759      	b.n	b7164 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b72b0:	2003e408 	.word	0x2003e408
   b72b4:	2003e409 	.word	0x2003e409
   b72b8:	2003e40b 	.word	0x2003e40b
   b72bc:	2003e40a 	.word	0x2003e40a

000b72c0 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b72c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72c2:	b085      	sub	sp, #20
   b72c4:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b72c6:	3004      	adds	r0, #4
{
   b72c8:	460e      	mov	r6, r1
   b72ca:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b72cc:	f7ff fc82 	bl	b6bd4 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b72d0:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b72d2:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b72d4:	4631      	mov	r1, r6
   b72d6:	4628      	mov	r0, r5
   b72d8:	f000 f94a 	bl	b7570 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b72dc:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b72de:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b72e0:	d001      	beq.n	b72e6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b72e2:	2805      	cmp	r0, #5
   b72e4:	d11b      	bne.n	b731e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b72e6:	7831      	ldrb	r1, [r6, #0]
   b72e8:	4628      	mov	r0, r5
   b72ea:	f000 f96e 	bl	b75ca <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b72ee:	7872      	ldrb	r2, [r6, #1]
   b72f0:	7a2b      	ldrb	r3, [r5, #8]
   b72f2:	429a      	cmp	r2, r3
   b72f4:	d013      	beq.n	b731e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b72f6:	4c0b      	ldr	r4, [pc, #44]	; (b7324 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b72f8:	2303      	movs	r3, #3
   b72fa:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b72fc:	7833      	ldrb	r3, [r6, #0]
   b72fe:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b7300:	7871      	ldrb	r1, [r6, #1]
   b7302:	2302      	movs	r3, #2
   b7304:	463a      	mov	r2, r7
   b7306:	4628      	mov	r0, r5
   b7308:	f000 f976 	bl	b75f8 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b730c:	2300      	movs	r3, #0
   b730e:	9300      	str	r3, [sp, #0]
   b7310:	4621      	mov	r1, r4
   b7312:	7873      	ldrb	r3, [r6, #1]
   b7314:	2202      	movs	r2, #2
   b7316:	4628      	mov	r0, r5
   b7318:	f000 f9f6 	bl	b7708 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b731c:	4604      	mov	r4, r0
}
   b731e:	4620      	mov	r0, r4
   b7320:	b005      	add	sp, #20
   b7322:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7324:	2003e408 	.word	0x2003e408

000b7328 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7328:	b510      	push	{r4, lr}
   b732a:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b732c:	f7ff fc02 	bl	b6b34 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7330:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b7332:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b7334:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b7336:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7338:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b733a:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b733c:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b733e:	f44f 7280 	mov.w	r2, #256	; 0x100
   b7342:	f104 0011 	add.w	r0, r4, #17
   b7346:	f004 fe39 	bl	bbfbc <memset>
}
   b734a:	4620      	mov	r0, r4
   b734c:	bd10      	pop	{r4, pc}

000b734e <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b734e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7350:	4604      	mov	r4, r0
   b7352:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b7354:	f7ff fc32 	bl	b6bbc <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b7358:	4620      	mov	r0, r4
   b735a:	2200      	movs	r2, #0
   b735c:	2180      	movs	r1, #128	; 0x80
   b735e:	f7ff fc31 	bl	b6bc4 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b7362:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b7364:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b7366:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b736a:	f10d 010f 	add.w	r1, sp, #15
   b736e:	2201      	movs	r2, #1
   b7370:	4620      	mov	r0, r4
   b7372:	f7ff fbf4 	bl	b6b5e <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b7376:	4620      	mov	r0, r4
   b7378:	f7ff fbe3 	bl	b6b42 <_ZN10RHDatagram14waitPacketSentEv>
}
   b737c:	b004      	add	sp, #16
   b737e:	bd10      	pop	{r4, pc}

000b7380 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b7380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7384:	7b05      	ldrb	r5, [r0, #12]
   b7386:	3501      	adds	r5, #1
   b7388:	b2ed      	uxtb	r5, r5
{
   b738a:	b087      	sub	sp, #28
   b738c:	4604      	mov	r4, r0
   b738e:	4689      	mov	r9, r1
   b7390:	4692      	mov	sl, r2
   b7392:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7394:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b7396:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b7398:	7c22      	ldrb	r2, [r4, #16]
   b739a:	463b      	mov	r3, r7
   b739c:	429a      	cmp	r2, r3
   b739e:	f107 0701 	add.w	r7, r7, #1
   b73a2:	b2ff      	uxtb	r7, r7
   b73a4:	d36b      	bcc.n	b747e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b73a6:	4629      	mov	r1, r5
   b73a8:	4620      	mov	r0, r4
   b73aa:	f7ff fc07 	bl	b6bbc <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b73ae:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b73b0:	bf0d      	iteet	eq
   b73b2:	22c0      	moveq	r2, #192	; 0xc0
   b73b4:	2280      	movne	r2, #128	; 0x80
   b73b6:	2140      	movne	r1, #64	; 0x40
   b73b8:	2100      	moveq	r1, #0
   b73ba:	4620      	mov	r0, r4
   b73bc:	f7ff fc02 	bl	b6bc4 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b73c0:	4643      	mov	r3, r8
   b73c2:	4652      	mov	r2, sl
   b73c4:	4649      	mov	r1, r9
   b73c6:	4620      	mov	r0, r4
   b73c8:	f7ff fbc9 	bl	b6b5e <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b73cc:	4620      	mov	r0, r4
   b73ce:	f7ff fbb8 	bl	b6b42 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b73d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b73d6:	d054      	beq.n	b7482 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b73d8:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b73da:	bf82      	ittt	hi
   b73dc:	68a3      	ldrhi	r3, [r4, #8]
   b73de:	3301      	addhi	r3, #1
   b73e0:	60a3      	strhi	r3, [r4, #8]
   b73e2:	f000 ff31 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b73e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b73ea:	4683      	mov	fp, r0
   b73ec:	2000      	movs	r0, #0
   b73ee:	89e6      	ldrh	r6, [r4, #14]
   b73f0:	f003 f9d7 	bl	ba7a2 <_Z6randomii>
   b73f4:	4370      	muls	r0, r6
   b73f6:	bf48      	it	mi
   b73f8:	30ff      	addmi	r0, #255	; 0xff
   b73fa:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b73fe:	fa1b f686 	uxtah	r6, fp, r6
   b7402:	f000 ff21 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
   b7406:	1a30      	subs	r0, r6, r0
   b7408:	2800      	cmp	r0, #0
   b740a:	ddc5      	ble.n	b7398 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b740c:	b281      	uxth	r1, r0
   b740e:	2200      	movs	r2, #0
   b7410:	4620      	mov	r0, r4
   b7412:	f7ff fb9a 	bl	b6b4a <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7416:	2800      	cmp	r0, #0
   b7418:	d0f3      	beq.n	b7402 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b741a:	f10d 0317 	add.w	r3, sp, #23
   b741e:	9302      	str	r3, [sp, #8]
   b7420:	f10d 0316 	add.w	r3, sp, #22
   b7424:	9301      	str	r3, [sp, #4]
   b7426:	2200      	movs	r2, #0
   b7428:	f10d 0315 	add.w	r3, sp, #21
   b742c:	9300      	str	r3, [sp, #0]
   b742e:	4611      	mov	r1, r2
   b7430:	ab05      	add	r3, sp, #20
   b7432:	4620      	mov	r0, r4
   b7434:	f7ff fbda 	bl	b6bec <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7438:	2800      	cmp	r0, #0
   b743a:	d0e2      	beq.n	b7402 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b743c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7440:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b7444:	4542      	cmp	r2, r8
   b7446:	d10e      	bne.n	b7466 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b7448:	f894 c004 	ldrb.w	ip, [r4, #4]
   b744c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7450:	458c      	cmp	ip, r1
   b7452:	d108      	bne.n	b7466 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b7454:	2b00      	cmp	r3, #0
   b7456:	da08      	bge.n	b746a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b7458:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b745c:	42ab      	cmp	r3, r5
   b745e:	d1d0      	bne.n	b7402 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b7460:	b007      	add	sp, #28
   b7462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b7466:	2b00      	cmp	r3, #0
   b7468:	dbcb      	blt.n	b7402 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b746a:	18a1      	adds	r1, r4, r2
   b746c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7470:	7c49      	ldrb	r1, [r1, #17]
   b7472:	4299      	cmp	r1, r3
   b7474:	d1c5      	bne.n	b7402 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b7476:	4620      	mov	r0, r4
   b7478:	f7ff ff69 	bl	b734e <_ZN18RHReliableDatagram11acknowledgeEhh>
   b747c:	e7c1      	b.n	b7402 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b747e:	2000      	movs	r0, #0
   b7480:	e7ee      	b.n	b7460 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b7482:	2001      	movs	r0, #1
   b7484:	e7ec      	b.n	b7460 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b7486 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b7486:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b748a:	b089      	sub	sp, #36	; 0x24
   b748c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7490:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b7494:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b7496:	4604      	mov	r4, r0
   b7498:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b749a:	f7ff fb4e 	bl	b6b3a <_ZN10RHDatagram9availableEv>
   b749e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b74a2:	b920      	cbnz	r0, b74ae <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b74a4:	2500      	movs	r5, #0
}
   b74a6:	4628      	mov	r0, r5
   b74a8:	b009      	add	sp, #36	; 0x24
   b74aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b74ae:	f10d 031f 	add.w	r3, sp, #31
   b74b2:	9302      	str	r3, [sp, #8]
   b74b4:	f10d 031e 	add.w	r3, sp, #30
   b74b8:	9301      	str	r3, [sp, #4]
   b74ba:	f10d 031d 	add.w	r3, sp, #29
   b74be:	9300      	str	r3, [sp, #0]
   b74c0:	4620      	mov	r0, r4
   b74c2:	ab07      	add	r3, sp, #28
   b74c4:	f7ff fb92 	bl	b6bec <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b74c8:	4605      	mov	r5, r0
   b74ca:	2800      	cmp	r0, #0
   b74cc:	d0ea      	beq.n	b74a4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b74ce:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b74d2:	2b00      	cmp	r3, #0
   b74d4:	dbe6      	blt.n	b74a4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b74d6:	7922      	ldrb	r2, [r4, #4]
   b74d8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b74dc:	429a      	cmp	r2, r3
   b74de:	d106      	bne.n	b74ee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b74e0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b74e4:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b74e8:	4620      	mov	r0, r4
   b74ea:	f7ff ff30 	bl	b734e <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b74ee:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b74f2:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b74f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b74fa:	f012 0f40 	tst.w	r2, #64	; 0x40
   b74fe:	440c      	add	r4, r1
   b7500:	d002      	beq.n	b7508 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b7502:	7c60      	ldrb	r0, [r4, #17]
   b7504:	4298      	cmp	r0, r3
   b7506:	d0cd      	beq.n	b74a4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7508:	b106      	cbz	r6, b750c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b750a:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b750c:	f1b9 0f00 	cmp.w	r9, #0
   b7510:	d003      	beq.n	b751a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b7512:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b7516:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b751a:	f1b8 0f00 	cmp.w	r8, #0
   b751e:	d001      	beq.n	b7524 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b7520:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b7524:	b107      	cbz	r7, b7528 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b7526:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b7528:	7463      	strb	r3, [r4, #17]
		return true;
   b752a:	e7bc      	b.n	b74a6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b752c <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b752c:	4770      	bx	lr

000b752e <_ZN8RHRouter4initEv>:
{
   b752e:	b510      	push	{r4, lr}
   b7530:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b7532:	3004      	adds	r0, #4
   b7534:	f7ff fb34 	bl	b6ba0 <_ZN10RHDatagram4initEv>
    if (ret)
   b7538:	b110      	cbz	r0, b7540 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b753a:	231e      	movs	r3, #30
   b753c:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b7540:	bd10      	pop	{r4, pc}

000b7542 <_ZN8RHRouter10getRouteToEh>:
{
   b7542:	b510      	push	{r4, lr}
   b7544:	4602      	mov	r2, r0
   b7546:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b7548:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b754c:	428c      	cmp	r4, r1
   b754e:	d108      	bne.n	b7562 <_ZN8RHRouter10getRouteToEh+0x20>
   b7550:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b7554:	b12c      	cbz	r4, b7562 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b7556:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b755a:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b755e:	4418      	add	r0, r3
}
   b7560:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7562:	3301      	adds	r3, #1
   b7564:	2b32      	cmp	r3, #50	; 0x32
   b7566:	f102 0203 	add.w	r2, r2, #3
   b756a:	d1ed      	bne.n	b7548 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b756c:	2000      	movs	r0, #0
   b756e:	e7f7      	b.n	b7560 <_ZN8RHRouter10getRouteToEh+0x1e>

000b7570 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b7570:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7572:	780b      	ldrb	r3, [r1, #0]
   b7574:	2bff      	cmp	r3, #255	; 0xff
{
   b7576:	4605      	mov	r5, r0
   b7578:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b757a:	d006      	beq.n	b758a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b757c:	4619      	mov	r1, r3
   b757e:	9201      	str	r2, [sp, #4]
   b7580:	f7ff ffdf 	bl	b7542 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b7584:	b158      	cbz	r0, b759e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b7586:	7843      	ldrb	r3, [r0, #1]
   b7588:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b758a:	4621      	mov	r1, r4
   b758c:	1d28      	adds	r0, r5, #4
   b758e:	f7ff fef7 	bl	b7380 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b7592:	2800      	cmp	r0, #0
   b7594:	bf14      	ite	ne
   b7596:	2000      	movne	r0, #0
   b7598:	2005      	moveq	r0, #5
}
   b759a:	b003      	add	sp, #12
   b759c:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b759e:	2002      	movs	r0, #2
   b75a0:	e7fb      	b.n	b759a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b75a2 <_ZN8RHRouter11deleteRouteEh>:
{
   b75a2:	b510      	push	{r4, lr}
   b75a4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b75a8:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b75aa:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b75ae:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b75b2:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b75b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b75ba:	4421      	add	r1, r4
   b75bc:	4420      	add	r0, r4
   b75be:	f004 fcd5 	bl	bbf6c <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b75c2:	2300      	movs	r3, #0
   b75c4:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b75c8:	bd10      	pop	{r4, pc}

000b75ca <_ZN8RHRouter13deleteRouteToEh>:
{
   b75ca:	b538      	push	{r3, r4, r5, lr}
   b75cc:	460a      	mov	r2, r1
   b75ce:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b75d0:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b75d4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b75d8:	b2d9      	uxtb	r1, r3
   b75da:	5d65      	ldrb	r5, [r4, r5]
   b75dc:	4295      	cmp	r5, r2
   b75de:	d103      	bne.n	b75e8 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b75e0:	f7ff ffdf 	bl	b75a2 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b75e4:	2001      	movs	r0, #1
}
   b75e6:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b75e8:	3301      	adds	r3, #1
   b75ea:	2b32      	cmp	r3, #50	; 0x32
   b75ec:	d1f2      	bne.n	b75d4 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b75ee:	2000      	movs	r0, #0
   b75f0:	e7f9      	b.n	b75e6 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b75f2 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b75f2:	2100      	movs	r1, #0
   b75f4:	f7ff bfd5 	b.w	b75a2 <_ZN8RHRouter11deleteRouteEh>

000b75f8 <_ZN8RHRouter10addRouteToEhhh>:
{
   b75f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75fa:	4616      	mov	r6, r2
   b75fc:	461f      	mov	r7, r3
   b75fe:	4604      	mov	r4, r0
   b7600:	460d      	mov	r5, r1
   b7602:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7604:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7608:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b760c:	5c11      	ldrb	r1, [r2, r0]
   b760e:	42a9      	cmp	r1, r5
   b7610:	d105      	bne.n	b761e <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b7612:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7614:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7618:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b761c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b761e:	3301      	adds	r3, #1
   b7620:	2b32      	cmp	r3, #50	; 0x32
   b7622:	d1f1      	bne.n	b7608 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b7624:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b7626:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b762a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b762e:	5c11      	ldrb	r1, [r2, r0]
   b7630:	b919      	cbnz	r1, b763a <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b7632:	4420      	add	r0, r4
   b7634:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b7638:	e7ec      	b.n	b7614 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b763a:	3301      	adds	r3, #1
   b763c:	2b32      	cmp	r3, #50	; 0x32
   b763e:	d1f4      	bne.n	b762a <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b7640:	4620      	mov	r0, r4
   b7642:	f7ff ffd6 	bl	b75f2 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7646:	4620      	mov	r0, r4
   b7648:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b764c:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b7650:	b92a      	cbnz	r2, b765e <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b7652:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b7656:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b765a:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b765e:	3003      	adds	r0, #3
   b7660:	4298      	cmp	r0, r3
   b7662:	d1f3      	bne.n	b764c <_ZN8RHRouter10addRouteToEhhh+0x54>
   b7664:	e7da      	b.n	b761c <_ZN8RHRouter10addRouteToEhhh+0x24>

000b7666 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7666:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b766a:	2200      	movs	r2, #0
   b766c:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7670:	3003      	adds	r0, #3
   b7672:	4298      	cmp	r0, r3
   b7674:	d1fa      	bne.n	b766c <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b7676:	4770      	bx	lr

000b7678 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b7678:	b510      	push	{r4, lr}
   b767a:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b767c:	3004      	adds	r0, #4
   b767e:	f7ff fe53 	bl	b7328 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b7682:	4b05      	ldr	r3, [pc, #20]	; (b7698 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b7684:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7686:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b768a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b768c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b7690:	f7ff ffe9 	bl	b7666 <_ZN8RHRouter17clearRoutingTableEv>
}
   b7694:	4620      	mov	r0, r4
   b7696:	bd10      	pop	{r4, pc}
   b7698:	000bcf24 	.word	0x000bcf24

000b769c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b769c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b76a0:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76a2:	6840      	ldr	r0, [r0, #4]
{
   b76a4:	9101      	str	r1, [sp, #4]
   b76a6:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76a8:	6803      	ldr	r3, [r0, #0]
{
   b76aa:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76ae:	699b      	ldr	r3, [r3, #24]
{
   b76b0:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b76b4:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76b6:	4798      	blx	r3
   b76b8:	f106 0805 	add.w	r8, r6, #5
   b76bc:	4580      	cmp	r8, r0
   b76be:	d81c      	bhi.n	b76fa <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b76c0:	4d10      	ldr	r5, [pc, #64]	; (b7704 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b76c2:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b76c4:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b76c8:	2300      	movs	r3, #0
   b76ca:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b76cc:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b76d0:	70eb      	strb	r3, [r5, #3]
   b76d2:	1c5a      	adds	r2, r3, #1
   b76d4:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b76d8:	1d68      	adds	r0, r5, #5
   b76da:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b76dc:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b76de:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b76e2:	f004 fc43 	bl	bbf6c <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b76e6:	6823      	ldr	r3, [r4, #0]
   b76e8:	685b      	ldr	r3, [r3, #4]
   b76ea:	fa5f f288 	uxtb.w	r2, r8
   b76ee:	4629      	mov	r1, r5
   b76f0:	4620      	mov	r0, r4
}
   b76f2:	b002      	add	sp, #8
   b76f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b76f8:	4718      	bx	r3
}
   b76fa:	2001      	movs	r0, #1
   b76fc:	b002      	add	sp, #8
   b76fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7702:	bf00      	nop
   b7704:	2003e502 	.word	0x2003e502

000b7708 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b7708:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b770a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b770e:	9401      	str	r4, [sp, #4]
   b7710:	7a04      	ldrb	r4, [r0, #8]
   b7712:	9400      	str	r4, [sp, #0]
   b7714:	f7ff ffc2 	bl	b769c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b7718:	b002      	add	sp, #8
   b771a:	bd10      	pop	{r4, pc}

000b771c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7720:	b087      	sub	sp, #28
   b7722:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7724:	23ff      	movs	r3, #255	; 0xff
   b7726:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b772a:	f10d 0317 	add.w	r3, sp, #23
   b772e:	9302      	str	r3, [sp, #8]
   b7730:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b7804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b7734:	f10d 0316 	add.w	r3, sp, #22
   b7738:	9301      	str	r3, [sp, #4]
   b773a:	f10d 0315 	add.w	r3, sp, #21
   b773e:	9300      	str	r3, [sp, #0]
{  
   b7740:	4604      	mov	r4, r0
   b7742:	4688      	mov	r8, r1
   b7744:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7746:	ab05      	add	r3, sp, #20
   b7748:	f10d 0213 	add.w	r2, sp, #19
   b774c:	4649      	mov	r1, r9
   b774e:	3004      	adds	r0, #4
{  
   b7750:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7754:	f7ff fe97 	bl	b7486 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b7758:	4605      	mov	r5, r0
   b775a:	b908      	cbnz	r0, b7760 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b775c:	2500      	movs	r5, #0
   b775e:	e038      	b.n	b77d2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b7760:	6823      	ldr	r3, [r4, #0]
   b7762:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7766:	681b      	ldr	r3, [r3, #0]
   b7768:	4649      	mov	r1, r9
   b776a:	4620      	mov	r0, r4
   b776c:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b776e:	f899 3000 	ldrb.w	r3, [r9]
   b7772:	7a22      	ldrb	r2, [r4, #8]
   b7774:	429a      	cmp	r2, r3
   b7776:	d001      	beq.n	b777c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b7778:	2bff      	cmp	r3, #255	; 0xff
   b777a:	d12e      	bne.n	b77da <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b777c:	b117      	cbz	r7, b7784 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b777e:	4b21      	ldr	r3, [pc, #132]	; (b7804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7780:	785b      	ldrb	r3, [r3, #1]
   b7782:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b7784:	f1bb 0f00 	cmp.w	fp, #0
   b7788:	d003      	beq.n	b7792 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b778a:	4b1e      	ldr	r3, [pc, #120]	; (b7804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b778c:	781b      	ldrb	r3, [r3, #0]
   b778e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b7792:	f1ba 0f00 	cmp.w	sl, #0
   b7796:	d003      	beq.n	b77a0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b7798:	4b1a      	ldr	r3, [pc, #104]	; (b7804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b779a:	78db      	ldrb	r3, [r3, #3]
   b779c:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b77a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b77a2:	b11b      	cbz	r3, b77ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b77a4:	4b17      	ldr	r3, [pc, #92]	; (b7804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b77a8:	791b      	ldrb	r3, [r3, #4]
   b77aa:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b77ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b77ae:	b11b      	cbz	r3, b77b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b77b0:	4b14      	ldr	r3, [pc, #80]	; (b7804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b77b4:	789b      	ldrb	r3, [r3, #2]
   b77b6:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b77b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b77bc:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b77be:	4912      	ldr	r1, [pc, #72]	; (b7808 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b77c0:	3b05      	subs	r3, #5
   b77c2:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b77c4:	429a      	cmp	r2, r3
		*len = msgLen;
   b77c6:	bf88      	it	hi
   b77c8:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b77ca:	7832      	ldrb	r2, [r6, #0]
   b77cc:	4640      	mov	r0, r8
   b77ce:	f004 fbcd 	bl	bbf6c <memcpy>
}
   b77d2:	4628      	mov	r0, r5
   b77d4:	b007      	add	sp, #28
   b77d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b77da:	f899 3002 	ldrb.w	r3, [r9, #2]
   b77de:	1c5a      	adds	r2, r3, #1
   b77e0:	f889 2002 	strb.w	r2, [r9, #2]
   b77e4:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b77e8:	429a      	cmp	r2, r3
   b77ea:	d9b7      	bls.n	b775c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b77ec:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b77f0:	2b00      	cmp	r3, #0
   b77f2:	d0b3      	beq.n	b775c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b77f4:	6823      	ldr	r3, [r4, #0]
   b77f6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b77fa:	685b      	ldr	r3, [r3, #4]
   b77fc:	4649      	mov	r1, r9
   b77fe:	4620      	mov	r0, r4
   b7800:	4798      	blx	r3
   b7802:	e7ab      	b.n	b775c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b7804:	2003e502 	.word	0x2003e502
   b7808:	2003e507 	.word	0x2003e507

000b780c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b780c:	b510      	push	{r4, lr}
   b780e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7810:	6a00      	ldr	r0, [r0, #32]
   b7812:	6803      	ldr	r3, [r0, #0]
   b7814:	68db      	ldr	r3, [r3, #12]
   b7816:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b7818:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b781c:	28ff      	cmp	r0, #255	; 0xff
   b781e:	d002      	beq.n	b7826 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7820:	2101      	movs	r1, #1
   b7822:	f003 fd8b 	bl	bb33c <pinMode>

    deselectSlave();
   b7826:	6823      	ldr	r3, [r4, #0]
   b7828:	4620      	mov	r0, r4
   b782a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b782c:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b782e:	2064      	movs	r0, #100	; 0x64
   b7830:	f001 f86e 	bl	b8910 <delay>
#endif
    
    return true;
}
   b7834:	2001      	movs	r0, #1
   b7836:	bd10      	pop	{r4, pc}

000b7838 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b7838:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b783c:	2100      	movs	r1, #0
   b783e:	f003 bd8e 	b.w	bb35e <digitalWrite>

000b7842 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b7842:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7846:	2101      	movs	r1, #1
   b7848:	f003 bd89 	b.w	bb35e <digitalWrite>

000b784c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b784c:	b570      	push	{r4, r5, r6, lr}
   b784e:	4604      	mov	r4, r0
   b7850:	460d      	mov	r5, r1
   b7852:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b7854:	f7ff fa7e 	bl	b6d54 <_ZN15RHGenericDriverC1Ev>
   b7858:	4b03      	ldr	r3, [pc, #12]	; (b7868 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b785a:	6023      	str	r3, [r4, #0]
   b785c:	6226      	str	r6, [r4, #32]
   b785e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b7862:	4620      	mov	r0, r4
   b7864:	bd70      	pop	{r4, r5, r6, pc}
   b7866:	bf00      	nop
   b7868:	000bcf34 	.word	0x000bcf34

000b786c <_ZN11RHSPIDriver7spiReadEh>:
{
   b786c:	b538      	push	{r3, r4, r5, lr}
   b786e:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7870:	6a00      	ldr	r0, [r0, #32]
   b7872:	6803      	ldr	r3, [r0, #0]
   b7874:	6a1b      	ldr	r3, [r3, #32]
{
   b7876:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7878:	4798      	blx	r3
    selectSlave();
   b787a:	6823      	ldr	r3, [r4, #0]
   b787c:	4620      	mov	r0, r4
   b787e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7880:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b7882:	6a20      	ldr	r0, [r4, #32]
   b7884:	6803      	ldr	r3, [r0, #0]
   b7886:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b788a:	681b      	ldr	r3, [r3, #0]
   b788c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b788e:	6a20      	ldr	r0, [r4, #32]
   b7890:	6803      	ldr	r3, [r0, #0]
   b7892:	2100      	movs	r1, #0
   b7894:	681b      	ldr	r3, [r3, #0]
   b7896:	4798      	blx	r3
    deselectSlave();
   b7898:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b789a:	4605      	mov	r5, r0
    deselectSlave();
   b789c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b789e:	4620      	mov	r0, r4
   b78a0:	4798      	blx	r3
    _spi.endTransaction();
   b78a2:	6a20      	ldr	r0, [r4, #32]
   b78a4:	6803      	ldr	r3, [r0, #0]
   b78a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b78a8:	4798      	blx	r3
}
   b78aa:	4628      	mov	r0, r5
   b78ac:	bd38      	pop	{r3, r4, r5, pc}

000b78ae <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b78ae:	b570      	push	{r4, r5, r6, lr}
   b78b0:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b78b2:	6a00      	ldr	r0, [r0, #32]
   b78b4:	6803      	ldr	r3, [r0, #0]
   b78b6:	6a1b      	ldr	r3, [r3, #32]
{
   b78b8:	4616      	mov	r6, r2
   b78ba:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b78bc:	4798      	blx	r3
    selectSlave();
   b78be:	6823      	ldr	r3, [r4, #0]
   b78c0:	4620      	mov	r0, r4
   b78c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b78c4:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b78c6:	6a20      	ldr	r0, [r4, #32]
   b78c8:	6803      	ldr	r3, [r0, #0]
   b78ca:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b78ce:	681b      	ldr	r3, [r3, #0]
   b78d0:	4798      	blx	r3
   b78d2:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b78d4:	6a20      	ldr	r0, [r4, #32]
   b78d6:	6803      	ldr	r3, [r0, #0]
   b78d8:	4631      	mov	r1, r6
   b78da:	681b      	ldr	r3, [r3, #0]
   b78dc:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b78de:	2001      	movs	r0, #1
   b78e0:	f000 fcaa 	bl	b8238 <HAL_Delay_Microseconds>
    deselectSlave();
   b78e4:	6823      	ldr	r3, [r4, #0]
   b78e6:	4620      	mov	r0, r4
   b78e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b78ea:	4798      	blx	r3
    _spi.endTransaction();
   b78ec:	6a20      	ldr	r0, [r4, #32]
   b78ee:	6803      	ldr	r3, [r0, #0]
   b78f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b78f2:	4798      	blx	r3
}
   b78f4:	4628      	mov	r0, r5
   b78f6:	bd70      	pop	{r4, r5, r6, pc}

000b78f8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b78f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78fa:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b78fc:	6a00      	ldr	r0, [r0, #32]
{
   b78fe:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7900:	6803      	ldr	r3, [r0, #0]
   b7902:	6a1b      	ldr	r3, [r3, #32]
{
   b7904:	460f      	mov	r7, r1
   b7906:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7908:	4798      	blx	r3
    selectSlave();
   b790a:	6823      	ldr	r3, [r4, #0]
   b790c:	4620      	mov	r0, r4
   b790e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7910:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b7912:	6a20      	ldr	r0, [r4, #32]
   b7914:	6803      	ldr	r3, [r0, #0]
   b7916:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b791a:	681b      	ldr	r3, [r3, #0]
   b791c:	4798      	blx	r3
   b791e:	442e      	add	r6, r5
   b7920:	4607      	mov	r7, r0
    while (len--)
   b7922:	42b5      	cmp	r5, r6
   b7924:	d007      	beq.n	b7936 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b7926:	6a20      	ldr	r0, [r4, #32]
   b7928:	6803      	ldr	r3, [r0, #0]
   b792a:	2100      	movs	r1, #0
   b792c:	681b      	ldr	r3, [r3, #0]
   b792e:	4798      	blx	r3
   b7930:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b7934:	e7f5      	b.n	b7922 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b7936:	6823      	ldr	r3, [r4, #0]
   b7938:	4620      	mov	r0, r4
   b793a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b793c:	4798      	blx	r3
    _spi.endTransaction();
   b793e:	6a20      	ldr	r0, [r4, #32]
   b7940:	6803      	ldr	r3, [r0, #0]
   b7942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7944:	4798      	blx	r3
}
   b7946:	4638      	mov	r0, r7
   b7948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b794a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b794a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b794c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b794e:	6a00      	ldr	r0, [r0, #32]
{
   b7950:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7952:	6803      	ldr	r3, [r0, #0]
   b7954:	6a1b      	ldr	r3, [r3, #32]
{
   b7956:	460f      	mov	r7, r1
   b7958:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b795a:	4798      	blx	r3
    selectSlave();
   b795c:	6823      	ldr	r3, [r4, #0]
   b795e:	4620      	mov	r0, r4
   b7960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7962:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b7964:	6a20      	ldr	r0, [r4, #32]
   b7966:	6803      	ldr	r3, [r0, #0]
   b7968:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b796c:	681b      	ldr	r3, [r3, #0]
   b796e:	4798      	blx	r3
   b7970:	442e      	add	r6, r5
   b7972:	4607      	mov	r7, r0
    while (len--)
   b7974:	42b5      	cmp	r5, r6
   b7976:	d006      	beq.n	b7986 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b7978:	6a20      	ldr	r0, [r4, #32]
   b797a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b797e:	6803      	ldr	r3, [r0, #0]
   b7980:	681b      	ldr	r3, [r3, #0]
   b7982:	4798      	blx	r3
    while (len--)
   b7984:	e7f6      	b.n	b7974 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b7986:	6823      	ldr	r3, [r4, #0]
   b7988:	4620      	mov	r0, r4
   b798a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b798c:	4798      	blx	r3
    _spi.endTransaction();
   b798e:	6a20      	ldr	r0, [r4, #32]
   b7990:	6803      	ldr	r3, [r0, #0]
   b7992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7994:	4798      	blx	r3
}
   b7996:	4638      	mov	r0, r7
   b7998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b799a <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b799a:	6a00      	ldr	r0, [r0, #32]
   b799c:	6803      	ldr	r3, [r0, #0]
   b799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b79a0:	4718      	bx	r3

000b79a2 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b79a2:	2001      	movs	r0, #1
   b79a4:	4770      	bx	lr

000b79a6 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b79a6:	20fb      	movs	r0, #251	; 0xfb
   b79a8:	4770      	bx	lr

000b79aa <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b79aa:	4770      	bx	lr

000b79ac <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b79ac:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b79ae:	7903      	ldrb	r3, [r0, #4]
   b79b0:	2b05      	cmp	r3, #5
{
   b79b2:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b79b4:	d010      	beq.n	b79d8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b79b6:	6803      	ldr	r3, [r0, #0]
   b79b8:	2105      	movs	r1, #5
   b79ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b79be:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b79c0:	2207      	movs	r2, #7
   b79c2:	2101      	movs	r1, #1
   b79c4:	4620      	mov	r0, r4
   b79c6:	f7ff ff72 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b79ca:	2280      	movs	r2, #128	; 0x80
   b79cc:	2140      	movs	r1, #64	; 0x40
   b79ce:	4620      	mov	r0, r4
   b79d0:	f7ff ff6d 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b79d4:	2305      	movs	r3, #5
   b79d6:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b79d8:	7923      	ldrb	r3, [r4, #4]
   b79da:	2b05      	cmp	r3, #5
   b79dc:	d0fc      	beq.n	b79d8 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b79de:	7e20      	ldrb	r0, [r4, #24]
}
   b79e0:	bd10      	pop	{r4, pc}

000b79e2 <_ZN7RH_RF95D0Ev>:
   b79e2:	b510      	push	{r4, lr}
   b79e4:	f44f 7198 	mov.w	r1, #304	; 0x130
   b79e8:	4604      	mov	r4, r0
   b79ea:	f7fc fb58 	bl	b409e <_ZdlPvj>
   b79ee:	4620      	mov	r0, r4
   b79f0:	bd10      	pop	{r4, pc}

000b79f2 <_ZN7RH_RF955sleepEv>:
{
   b79f2:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b79f4:	7903      	ldrb	r3, [r0, #4]
   b79f6:	2b01      	cmp	r3, #1
{
   b79f8:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b79fa:	d00b      	beq.n	b7a14 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b79fc:	6803      	ldr	r3, [r0, #0]
   b79fe:	2101      	movs	r1, #1
   b7a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7a04:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b7a06:	2200      	movs	r2, #0
   b7a08:	2101      	movs	r1, #1
   b7a0a:	4620      	mov	r0, r4
   b7a0c:	f7ff ff4f 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b7a10:	2301      	movs	r3, #1
   b7a12:	7123      	strb	r3, [r4, #4]
}
   b7a14:	2001      	movs	r0, #1
   b7a16:	bd10      	pop	{r4, pc}

000b7a18 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b7a18:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b7a1a:	b538      	push	{r3, r4, r5, lr}
   b7a1c:	4605      	mov	r5, r0
   b7a1e:	460c      	mov	r4, r1
	if (power > 20)
   b7a20:	dc14      	bgt.n	b7a4c <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b7a22:	2901      	cmp	r1, #1
   b7a24:	dd14      	ble.n	b7a50 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b7a26:	2911      	cmp	r1, #17
   b7a28:	dd13      	ble.n	b7a52 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b7a2a:	2207      	movs	r2, #7
   b7a2c:	214d      	movs	r1, #77	; 0x4d
   b7a2e:	4628      	mov	r0, r5
   b7a30:	f7ff ff3d 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b7a34:	3c03      	subs	r4, #3
   b7a36:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7a38:	1ea2      	subs	r2, r4, #2
   b7a3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b7a3e:	4628      	mov	r0, r5
   b7a40:	b2d2      	uxtb	r2, r2
}
   b7a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7a46:	2109      	movs	r1, #9
   b7a48:	f7ff bf31 	b.w	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b7a4c:	2414      	movs	r4, #20
   b7a4e:	e7ec      	b.n	b7a2a <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b7a50:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7a52:	2204      	movs	r2, #4
   b7a54:	214d      	movs	r1, #77	; 0x4d
   b7a56:	4628      	mov	r0, r5
   b7a58:	f7ff ff29 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
   b7a5c:	e7ec      	b.n	b7a38 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b7a60 <_ZN7RH_RF954recvEPhS0_>:
{
   b7a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b7a62:	6803      	ldr	r3, [r0, #0]
   b7a64:	68db      	ldr	r3, [r3, #12]
{
   b7a66:	4604      	mov	r4, r0
   b7a68:	460f      	mov	r7, r1
   b7a6a:	4615      	mov	r5, r2
    if (!available())
   b7a6c:	4798      	blx	r3
   b7a6e:	4606      	mov	r6, r0
   b7a70:	b1d0      	cbz	r0, b7aa8 <_ZN7RH_RF954recvEPhS0_+0x48>
    if (buf && len)
   b7a72:	b187      	cbz	r7, b7a96 <_ZN7RH_RF954recvEPhS0_+0x36>
   b7a74:	b17d      	cbz	r5, b7a96 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b7a76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b7a7a:	782a      	ldrb	r2, [r5, #0]
   b7a7c:	3b03      	subs	r3, #3
   b7a7e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b7a80:	bfde      	ittt	le
   b7a82:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b7a86:	3b04      	suble	r3, #4
   b7a88:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b7a8a:	782a      	ldrb	r2, [r5, #0]
   b7a8c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b7a90:	4638      	mov	r0, r7
   b7a92:	f004 fa6b 	bl	bbf6c <memcpy>
    _rxBufValid = false;
   b7a96:	2300      	movs	r3, #0
   b7a98:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    Log.info("Received something in the RH_RF95.cpp file");
   b7a9c:	4903      	ldr	r1, [pc, #12]	; (b7aac <_ZN7RH_RF954recvEPhS0_+0x4c>)
   b7a9e:	4804      	ldr	r0, [pc, #16]	; (b7ab0 <_ZN7RH_RF954recvEPhS0_+0x50>)
    _bufLen = 0;
   b7aa0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    Log.info("Received something in the RH_RF95.cpp file");
   b7aa4:	f7fc fb62 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b7aa8:	4630      	mov	r0, r6
   b7aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7aac:	000bcfb4 	.word	0x000bcfb4
   b7ab0:	2003e658 	.word	0x2003e658

000b7ab4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b7ab4:	b538      	push	{r3, r4, r5, lr}
   b7ab6:	4604      	mov	r4, r0
   b7ab8:	4615      	mov	r5, r2
    _rxBufValid(0)
   b7aba:	461a      	mov	r2, r3
   b7abc:	f7ff fec6 	bl	b784c <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b7ac0:	4b09      	ldr	r3, [pc, #36]	; (b7ae8 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b7ac2:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b7ac4:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b7ac6:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b7ac8:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b7acc:	2201      	movs	r2, #1
    _rxBufValid(0)
   b7ace:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b7ad2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b7ad6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b7ada:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b7ade:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b7ae2:	4620      	mov	r0, r4
   b7ae4:	bd38      	pop	{r3, r4, r5, pc}
   b7ae6:	bf00      	nop
   b7ae8:	000bcff8 	.word	0x000bcff8

000b7aec <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b7aec:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b7af0:	2b03      	cmp	r3, #3
   b7af2:	d91b      	bls.n	b7b2c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b7af4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b7af8:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b7afa:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b7afe:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b7b00:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b7b04:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b7b06:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b7b0a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b7b0c:	7983      	ldrb	r3, [r0, #6]
   b7b0e:	b933      	cbnz	r3, b7b1e <_ZN7RH_RF9513validateRxBufEv+0x32>
   b7b10:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b7b12:	7942      	ldrb	r2, [r0, #5]
   b7b14:	429a      	cmp	r2, r3
   b7b16:	d002      	beq.n	b7b1e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b7b18:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b7b1a:	2bff      	cmp	r3, #255	; 0xff
   b7b1c:	d106      	bne.n	b7b2c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b7b1e:	8a83      	ldrh	r3, [r0, #20]
   b7b20:	3301      	adds	r3, #1
   b7b22:	b29b      	uxth	r3, r3
   b7b24:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b7b26:	2301      	movs	r3, #1
   b7b28:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b7b2c:	4770      	bx	lr
	...

000b7b30 <_ZN7RH_RF9512setFrequencyEf>:
{
   b7b30:	b538      	push	{r3, r4, r5, lr}
   b7b32:	4604      	mov	r4, r0
   b7b34:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b38:	ee10 0a10 	vmov	r0, s0
{
   b7b3c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b40:	f003 fe72 	bl	bb828 <__aeabi_f2d>
   b7b44:	a317      	add	r3, pc, #92	; (adr r3, b7ba4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b7b46:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b4a:	f003 fec5 	bl	bb8d8 <__aeabi_dmul>
   b7b4e:	a317      	add	r3, pc, #92	; (adr r3, b7bac <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b7b50:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b54:	f003 ffea 	bl	bbb2c <__aeabi_ddiv>
   b7b58:	f004 f996 	bl	bbe88 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7b5c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b5e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7b60:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b7b64:	4620      	mov	r0, r4
   b7b66:	f7ff fea2 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b7b6a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b7b6e:	2107      	movs	r1, #7
   b7b70:	4620      	mov	r0, r4
   b7b72:	f7ff fe9c 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b7b76:	b2ea      	uxtb	r2, r5
   b7b78:	2108      	movs	r1, #8
   b7b7a:	4620      	mov	r0, r4
   b7b7c:	f7ff fe97 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b7b80:	eddf 7a07 	vldr	s15, [pc, #28]	; b7ba0 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b7b84:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b7b88:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b7b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b90:	bfac      	ite	ge
   b7b92:	2301      	movge	r3, #1
   b7b94:	2300      	movlt	r3, #0
}
   b7b96:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b7b98:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b7b9c:	bd38      	pop	{r3, r4, r5, pc}
   b7b9e:	bf00      	nop
   b7ba0:	4442c000 	.word	0x4442c000
   b7ba4:	00000000 	.word	0x00000000
   b7ba8:	412e8480 	.word	0x412e8480
   b7bac:	00000000 	.word	0x00000000
   b7bb0:	404e8480 	.word	0x404e8480

000b7bb4 <_ZN7RH_RF9511setModeIdleEv>:
{
   b7bb4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b7bb6:	7903      	ldrb	r3, [r0, #4]
   b7bb8:	2b02      	cmp	r3, #2
{
   b7bba:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b7bbc:	d00b      	beq.n	b7bd6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b7bbe:	6803      	ldr	r3, [r0, #0]
   b7bc0:	2102      	movs	r1, #2
   b7bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7bc6:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b7bc8:	2201      	movs	r2, #1
   b7bca:	4611      	mov	r1, r2
   b7bcc:	4620      	mov	r0, r4
   b7bce:	f7ff fe6e 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b7bd2:	2302      	movs	r3, #2
   b7bd4:	7123      	strb	r3, [r4, #4]
}
   b7bd6:	bd10      	pop	{r4, pc}

000b7bd8 <_ZN7RH_RF9515handleInterruptEv>:
{
   b7bd8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7bda:	2112      	movs	r1, #18
{
   b7bdc:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7bde:	f7ff fe45 	bl	b786c <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7be2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7be4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7be6:	4620      	mov	r0, r4
   b7be8:	f7ff fe40 	bl	b786c <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7bec:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7bee:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7bf0:	2112      	movs	r1, #18
   b7bf2:	4620      	mov	r0, r4
   b7bf4:	f7ff fe5b 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b7bf8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b7bfa:	2b04      	cmp	r3, #4
   b7bfc:	d107      	bne.n	b7c0e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7bfe:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b7c02:	d117      	bne.n	b7c34 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b7c04:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b7c08:	b10b      	cbz	r3, b7c0e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7c0a:	0670      	lsls	r0, r6, #25
   b7c0c:	d512      	bpl.n	b7c34 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b7c0e:	7923      	ldrb	r3, [r4, #4]
   b7c10:	2b04      	cmp	r3, #4
   b7c12:	d101      	bne.n	b7c18 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b7c14:	0669      	lsls	r1, r5, #25
   b7c16:	d422      	bmi.n	b7c5e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b7c18:	7923      	ldrb	r3, [r4, #4]
   b7c1a:	2b03      	cmp	r3, #3
   b7c1c:	d101      	bne.n	b7c22 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b7c1e:	072a      	lsls	r2, r5, #28
   b7c20:	d468      	bmi.n	b7cf4 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b7c22:	7923      	ldrb	r3, [r4, #4]
   b7c24:	2b05      	cmp	r3, #5
   b7c26:	d10e      	bne.n	b7c46 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b7c28:	076b      	lsls	r3, r5, #29
   b7c2a:	d50c      	bpl.n	b7c46 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b7c2c:	f005 0501 	and.w	r5, r5, #1
   b7c30:	7625      	strb	r5, [r4, #24]
   b7c32:	e063      	b.n	b7cfc <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b7c34:	8a63      	ldrh	r3, [r4, #18]
   b7c36:	3301      	adds	r3, #1
   b7c38:	b29b      	uxth	r3, r3
   b7c3a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b7c3c:	2300      	movs	r3, #0
   b7c3e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7c42:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c46:	22ff      	movs	r2, #255	; 0xff
   b7c48:	2112      	movs	r1, #18
   b7c4a:	4620      	mov	r0, r4
   b7c4c:	f7ff fe2f 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c50:	4620      	mov	r0, r4
   b7c52:	22ff      	movs	r2, #255	; 0xff
}
   b7c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c58:	2112      	movs	r1, #18
   b7c5a:	f7ff be28 	b.w	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7c5e:	2113      	movs	r1, #19
   b7c60:	4620      	mov	r0, r4
   b7c62:	f7ff fe03 	bl	b786c <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7c66:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7c68:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7c6a:	4620      	mov	r0, r4
   b7c6c:	f7ff fdfe 	bl	b786c <_ZN11RHSPIDriver7spiReadEh>
   b7c70:	210d      	movs	r1, #13
   b7c72:	4602      	mov	r2, r0
   b7c74:	4620      	mov	r0, r4
   b7c76:	f7ff fe1a 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b7c7a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b7c7e:	462b      	mov	r3, r5
   b7c80:	2100      	movs	r1, #0
   b7c82:	4620      	mov	r0, r4
   b7c84:	f7ff fe38 	bl	b78f8 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7c88:	2119      	movs	r1, #25
	_bufLen = len;
   b7c8a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7c8e:	4620      	mov	r0, r4
   b7c90:	f7ff fdec 	bl	b786c <_ZN11RHSPIDriver7spiReadEh>
   b7c94:	b240      	sxtb	r0, r0
   b7c96:	2800      	cmp	r0, #0
   b7c98:	bfb8      	it	lt
   b7c9a:	3003      	addlt	r0, #3
   b7c9c:	1080      	asrs	r0, r0, #2
   b7c9e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7ca2:	211a      	movs	r1, #26
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	f7ff fde1 	bl	b786c <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b7caa:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7cae:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b7cb0:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7cb2:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7cb4:	bfa9      	itett	ge
   b7cb6:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b7cb8:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7cba:	b21b      	sxthge	r3, r3
   b7cbc:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b7cbe:	bfb2      	itee	lt
   b7cc0:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7cc2:	220f      	movge	r2, #15
   b7cc4:	fb93 f3f2 	sdivge	r3, r3, r2
   b7cc8:	b21b      	sxth	r3, r3
   b7cca:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b7ccc:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b7cd0:	b16b      	cbz	r3, b7cee <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b7cd2:	8a23      	ldrh	r3, [r4, #16]
   b7cd4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b7cd6:	b21b      	sxth	r3, r3
   b7cd8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b7cda:	4620      	mov	r0, r4
   b7cdc:	f7ff ff06 	bl	b7aec <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b7ce0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b7ce4:	2b00      	cmp	r3, #0
   b7ce6:	d0ae      	beq.n	b7c46 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b7ce8:	f7ff ff64 	bl	b7bb4 <_ZN7RH_RF9511setModeIdleEv>
   b7cec:	e7ab      	b.n	b7c46 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b7cee:	8a23      	ldrh	r3, [r4, #16]
   b7cf0:	3ba4      	subs	r3, #164	; 0xa4
   b7cf2:	e7f0      	b.n	b7cd6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b7cf4:	8ae3      	ldrh	r3, [r4, #22]
   b7cf6:	3301      	adds	r3, #1
   b7cf8:	b29b      	uxth	r3, r3
   b7cfa:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b7cfc:	4620      	mov	r0, r4
   b7cfe:	e7f3      	b.n	b7ce8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b7d00 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b7d00:	4b02      	ldr	r3, [pc, #8]	; (b7d0c <_ZN7RH_RF954isr0Ev+0xc>)
   b7d02:	6818      	ldr	r0, [r3, #0]
   b7d04:	b108      	cbz	r0, b7d0a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b7d06:	f7ff bf67 	b.w	b7bd8 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d0a:	4770      	bx	lr
   b7d0c:	2003e604 	.word	0x2003e604

000b7d10 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b7d10:	4b02      	ldr	r3, [pc, #8]	; (b7d1c <_ZN7RH_RF954isr1Ev+0xc>)
   b7d12:	6858      	ldr	r0, [r3, #4]
   b7d14:	b108      	cbz	r0, b7d1a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b7d16:	f7ff bf5f 	b.w	b7bd8 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d1a:	4770      	bx	lr
   b7d1c:	2003e604 	.word	0x2003e604

000b7d20 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b7d20:	4b02      	ldr	r3, [pc, #8]	; (b7d2c <_ZN7RH_RF954isr2Ev+0xc>)
   b7d22:	6898      	ldr	r0, [r3, #8]
   b7d24:	b108      	cbz	r0, b7d2a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b7d26:	f7ff bf57 	b.w	b7bd8 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d2a:	4770      	bx	lr
   b7d2c:	2003e604 	.word	0x2003e604

000b7d30 <_ZN7RH_RF959setModeRxEv>:
{
   b7d30:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b7d32:	7903      	ldrb	r3, [r0, #4]
   b7d34:	2b04      	cmp	r3, #4
{
   b7d36:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b7d38:	d010      	beq.n	b7d5c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b7d3a:	6803      	ldr	r3, [r0, #0]
   b7d3c:	2104      	movs	r1, #4
   b7d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7d42:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b7d44:	2205      	movs	r2, #5
   b7d46:	2101      	movs	r1, #1
   b7d48:	4620      	mov	r0, r4
   b7d4a:	f7ff fdb0 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b7d4e:	2200      	movs	r2, #0
   b7d50:	2140      	movs	r1, #64	; 0x40
   b7d52:	4620      	mov	r0, r4
   b7d54:	f7ff fdab 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b7d58:	2304      	movs	r3, #4
   b7d5a:	7123      	strb	r3, [r4, #4]
}
   b7d5c:	bd10      	pop	{r4, pc}

000b7d5e <_ZN7RH_RF959availableEv>:
{
   b7d5e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b7d60:	7903      	ldrb	r3, [r0, #4]
   b7d62:	2b03      	cmp	r3, #3
{
   b7d64:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b7d66:	d005      	beq.n	b7d74 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b7d68:	f7ff ffe2 	bl	b7d30 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b7d6c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b7d70:	b2c0      	uxtb	r0, r0
}
   b7d72:	bd10      	pop	{r4, pc}
	return false;
   b7d74:	2000      	movs	r0, #0
   b7d76:	e7fc      	b.n	b7d72 <_ZN7RH_RF959availableEv+0x14>

000b7d78 <_ZN7RH_RF959setModeTxEv>:
{
   b7d78:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b7d7a:	7903      	ldrb	r3, [r0, #4]
   b7d7c:	2b03      	cmp	r3, #3
{
   b7d7e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b7d80:	d010      	beq.n	b7da4 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b7d82:	6803      	ldr	r3, [r0, #0]
   b7d84:	2103      	movs	r1, #3
   b7d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7d8a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b7d8c:	2203      	movs	r2, #3
   b7d8e:	2101      	movs	r1, #1
   b7d90:	4620      	mov	r0, r4
   b7d92:	f7ff fd8c 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b7d96:	2240      	movs	r2, #64	; 0x40
   b7d98:	4611      	mov	r1, r2
   b7d9a:	4620      	mov	r0, r4
   b7d9c:	f7ff fd87 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b7da0:	2303      	movs	r3, #3
   b7da2:	7123      	strb	r3, [r4, #4]
}
   b7da4:	bd10      	pop	{r4, pc}

000b7da6 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7da6:	2afb      	cmp	r2, #251	; 0xfb
{
   b7da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7daa:	4604      	mov	r4, r0
   b7dac:	460f      	mov	r7, r1
   b7dae:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7db0:	d902      	bls.n	b7db8 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b7db2:	2600      	movs	r6, #0
}
   b7db4:	4630      	mov	r0, r6
   b7db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b7db8:	6803      	ldr	r3, [r0, #0]
   b7dba:	6a1b      	ldr	r3, [r3, #32]
   b7dbc:	4798      	blx	r3
    setModeIdle();
   b7dbe:	4620      	mov	r0, r4
   b7dc0:	f7ff fef8 	bl	b7bb4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b7dc4:	6823      	ldr	r3, [r4, #0]
   b7dc6:	4620      	mov	r0, r4
   b7dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7dca:	4798      	blx	r3
   b7dcc:	4606      	mov	r6, r0
   b7dce:	2800      	cmp	r0, #0
   b7dd0:	d0ef      	beq.n	b7db2 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b7dd2:	2200      	movs	r2, #0
   b7dd4:	210d      	movs	r1, #13
   b7dd6:	4620      	mov	r0, r4
   b7dd8:	f7ff fd69 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b7ddc:	7ae2      	ldrb	r2, [r4, #11]
   b7dde:	2100      	movs	r1, #0
   b7de0:	4620      	mov	r0, r4
   b7de2:	f7ff fd64 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b7de6:	7b22      	ldrb	r2, [r4, #12]
   b7de8:	2100      	movs	r1, #0
   b7dea:	4620      	mov	r0, r4
   b7dec:	f7ff fd5f 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b7df0:	7b62      	ldrb	r2, [r4, #13]
   b7df2:	2100      	movs	r1, #0
   b7df4:	4620      	mov	r0, r4
   b7df6:	f7ff fd5a 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b7dfa:	7ba2      	ldrb	r2, [r4, #14]
   b7dfc:	2100      	movs	r1, #0
   b7dfe:	4620      	mov	r0, r4
   b7e00:	f7ff fd55 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b7e04:	462b      	mov	r3, r5
   b7e06:	463a      	mov	r2, r7
   b7e08:	2100      	movs	r1, #0
   b7e0a:	4620      	mov	r0, r4
   b7e0c:	f7ff fd9d 	bl	b794a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b7e10:	1d2a      	adds	r2, r5, #4
   b7e12:	b2d2      	uxtb	r2, r2
   b7e14:	2122      	movs	r1, #34	; 0x22
   b7e16:	4620      	mov	r0, r4
   b7e18:	f7ff fd49 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b7e1c:	4620      	mov	r0, r4
   b7e1e:	f7ff ffab 	bl	b7d78 <_ZN7RH_RF959setModeTxEv>
    return true;
   b7e22:	e7c7      	b.n	b7db4 <_ZN7RH_RF954sendEPKhh+0xe>

000b7e24 <_ZN7RH_RF9510setTxPowerEab>:
{
   b7e24:	b510      	push	{r4, lr}
   b7e26:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b7e28:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b7e2c:	b172      	cbz	r2, b7e4c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b7e2e:	f381 0204 	usat	r2, #4, r1
   b7e32:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b7e36:	b2d2      	uxtb	r2, r2
   b7e38:	2109      	movs	r1, #9
   b7e3a:	f7ff fd38 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7e3e:	4620      	mov	r0, r4
   b7e40:	2204      	movs	r2, #4
}
   b7e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7e46:	214d      	movs	r1, #77	; 0x4d
   b7e48:	f7ff bd31 	b.w	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
}
   b7e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7e50:	f7ff bde2 	b.w	b7a18 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b7e54 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b7e54:	b538      	push	{r3, r4, r5, lr}
   b7e56:	460c      	mov	r4, r1
   b7e58:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b7e5a:	780a      	ldrb	r2, [r1, #0]
   b7e5c:	211d      	movs	r1, #29
   b7e5e:	f7ff fd26 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b7e62:	7862      	ldrb	r2, [r4, #1]
   b7e64:	211e      	movs	r1, #30
   b7e66:	4628      	mov	r0, r5
   b7e68:	f7ff fd21 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7e6c:	78a2      	ldrb	r2, [r4, #2]
   b7e6e:	4628      	mov	r0, r5
   b7e70:	2126      	movs	r1, #38	; 0x26
}
   b7e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7e76:	f7ff bd1a 	b.w	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b7e7c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7e7c:	2905      	cmp	r1, #5
{
   b7e7e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7e80:	d80f      	bhi.n	b7ea2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b7e82:	4b09      	ldr	r3, [pc, #36]	; (b7ea8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b7e84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b7e88:	185c      	adds	r4, r3, r1
   b7e8a:	5a5a      	ldrh	r2, [r3, r1]
   b7e8c:	78a3      	ldrb	r3, [r4, #2]
   b7e8e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b7e92:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b7e94:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b7e98:	f7ff ffdc 	bl	b7e54 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b7e9c:	2001      	movs	r0, #1
}
   b7e9e:	b002      	add	sp, #8
   b7ea0:	bd10      	pop	{r4, pc}
        return false;
   b7ea2:	2000      	movs	r0, #0
   b7ea4:	e7fb      	b.n	b7e9e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b7ea6:	bf00      	nop
   b7ea8:	000bcfdf 	.word	0x000bcfdf

000b7eac <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b7eac:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7eae:	0a0a      	lsrs	r2, r1, #8
{
   b7eb0:	4605      	mov	r5, r0
   b7eb2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7eb4:	2120      	movs	r1, #32
   b7eb6:	f7ff fcfa 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b7eba:	b2e2      	uxtb	r2, r4
   b7ebc:	4628      	mov	r0, r5
   b7ebe:	2121      	movs	r1, #33	; 0x21
}
   b7ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b7ec4:	f7ff bcf3 	b.w	b78ae <_ZN11RHSPIDriver8spiWriteEhh>

000b7ec8 <_ZN7RH_RF954initEv>:
{
   b7ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7eca:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b7ecc:	f7ff fc9e 	bl	b780c <_ZN11RHSPIDriver4initEv>
   b7ed0:	4606      	mov	r6, r0
   b7ed2:	b918      	cbnz	r0, b7edc <_ZN7RH_RF954initEv+0x14>
	return false;
   b7ed4:	2600      	movs	r6, #0
}
   b7ed6:	4630      	mov	r0, r6
   b7ed8:	b002      	add	sp, #8
   b7eda:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b7edc:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b7ee0:	2dff      	cmp	r5, #255	; 0xff
   b7ee2:	d054      	beq.n	b7f8e <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b7ee4:	4629      	mov	r1, r5
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	f7ff fd57 	bl	b799a <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b7eec:	2280      	movs	r2, #128	; 0x80
   b7eee:	2101      	movs	r1, #1
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	f7ff fcdc 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b7ef6:	200a      	movs	r0, #10
   b7ef8:	f000 fd0a 	bl	b8910 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b7efc:	2101      	movs	r1, #1
   b7efe:	4620      	mov	r0, r4
   b7f00:	f7ff fcb4 	bl	b786c <_ZN11RHSPIDriver7spiReadEh>
   b7f04:	2880      	cmp	r0, #128	; 0x80
   b7f06:	d1e5      	bne.n	b7ed4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b7f08:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b7f0c:	28ff      	cmp	r0, #255	; 0xff
   b7f0e:	d01c      	beq.n	b7f4a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b7f10:	2100      	movs	r1, #0
   b7f12:	f003 fa13 	bl	bb33c <pinMode>
	if (_myInterruptIndex == 0xff)
   b7f16:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b7f1a:	2bff      	cmp	r3, #255	; 0xff
   b7f1c:	d107      	bne.n	b7f2e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b7f1e:	4a26      	ldr	r2, [pc, #152]	; (b7fb8 <_ZN7RH_RF954initEv+0xf0>)
   b7f20:	7813      	ldrb	r3, [r2, #0]
   b7f22:	2b03      	cmp	r3, #3
   b7f24:	d8d6      	bhi.n	b7ed4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b7f26:	1c59      	adds	r1, r3, #1
   b7f28:	7011      	strb	r1, [r2, #0]
   b7f2a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b7f2e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b7f32:	4b22      	ldr	r3, [pc, #136]	; (b7fbc <_ZN7RH_RF954initEv+0xf4>)
   b7f34:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b7f38:	bb62      	cbnz	r2, b7f94 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b7f3a:	4921      	ldr	r1, [pc, #132]	; (b7fc0 <_ZN7RH_RF954initEv+0xf8>)
   b7f3c:	9200      	str	r2, [sp, #0]
   b7f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7f42:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7f44:	b2a8      	uxth	r0, r5
   b7f46:	f000 ff6d 	bl	b8e24 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b7f4a:	2200      	movs	r2, #0
   b7f4c:	210e      	movs	r1, #14
   b7f4e:	4620      	mov	r0, r4
   b7f50:	f7ff fcad 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b7f54:	2200      	movs	r2, #0
   b7f56:	210f      	movs	r1, #15
   b7f58:	4620      	mov	r0, r4
   b7f5a:	f7ff fca8 	bl	b78ae <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b7f5e:	4620      	mov	r0, r4
   b7f60:	f7ff fe28 	bl	b7bb4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b7f64:	2100      	movs	r1, #0
   b7f66:	4620      	mov	r0, r4
   b7f68:	f7ff ff88 	bl	b7e7c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b7f6c:	2108      	movs	r1, #8
   b7f6e:	4620      	mov	r0, r4
   b7f70:	f7ff ff9c 	bl	b7eac <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b7f74:	ed9f 0a13 	vldr	s0, [pc, #76]	; b7fc4 <_ZN7RH_RF954initEv+0xfc>
   b7f78:	4620      	mov	r0, r4
   b7f7a:	f7ff fdd9 	bl	b7b30 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b7f7e:	2300      	movs	r3, #0
   b7f80:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b7f84:	210d      	movs	r1, #13
   b7f86:	4620      	mov	r0, r4
   b7f88:	f7ff fd46 	bl	b7a18 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b7f8c:	e7a3      	b.n	b7ed6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b7f8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b7f92:	e7ab      	b.n	b7eec <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b7f94:	2a01      	cmp	r2, #1
   b7f96:	f04f 0300 	mov.w	r3, #0
   b7f9a:	d104      	bne.n	b7fa6 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b7f9c:	9300      	str	r3, [sp, #0]
   b7f9e:	490a      	ldr	r1, [pc, #40]	; (b7fc8 <_ZN7RH_RF954initEv+0x100>)
   b7fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7fa4:	e7ce      	b.n	b7f44 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b7fa6:	2a02      	cmp	r2, #2
   b7fa8:	d194      	bne.n	b7ed4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7faa:	9300      	str	r3, [sp, #0]
   b7fac:	4907      	ldr	r1, [pc, #28]	; (b7fcc <_ZN7RH_RF954initEv+0x104>)
   b7fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7fb2:	2201      	movs	r2, #1
   b7fb4:	e7c6      	b.n	b7f44 <_ZN7RH_RF954initEv+0x7c>
   b7fb6:	bf00      	nop
   b7fb8:	2003e601 	.word	0x2003e601
   b7fbc:	2003e604 	.word	0x2003e604
   b7fc0:	000b7d01 	.word	0x000b7d01
   b7fc4:	43d90000 	.word	0x43d90000
   b7fc8:	000b7d11 	.word	0x000b7d11
   b7fcc:	000b7d21 	.word	0x000b7d21

000b7fd0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b7fd0:	4770      	bx	lr

000b7fd2 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b7fd2:	6803      	ldr	r3, [r0, #0]
   b7fd4:	685b      	ldr	r3, [r3, #4]
   b7fd6:	4718      	bx	r3

000b7fd8 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b7fd8:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b7fda:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b7fdc:	4604      	mov	r4, r0
    if (lastUpdate) {
   b7fde:	b133      	cbz	r3, b7fee <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b7fe0:	b131      	cbz	r1, b7ff0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b7fe2:	6823      	ldr	r3, [r4, #0]
   b7fe4:	4620      	mov	r0, r4
   b7fe6:	689b      	ldr	r3, [r3, #8]
   b7fe8:	4798      	blx	r3
            lastUpdate = 0;
   b7fea:	2300      	movs	r3, #0
   b7fec:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b7fee:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7ff0:	f000 f92a 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b7ff4:	69a3      	ldr	r3, [r4, #24]
   b7ff6:	1ac0      	subs	r0, r0, r3
   b7ff8:	69e3      	ldr	r3, [r4, #28]
   b7ffa:	4298      	cmp	r0, r3
   b7ffc:	d2f1      	bcs.n	b7fe2 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b7ffe:	e7f6      	b.n	b7fee <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b8000 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8000:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b8002:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8004:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b8006:	b11b      	cbz	r3, b8010 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8008:	f000 f91e 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b800c:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b800e:	bd10      	pop	{r4, pc}
        save();
   b8010:	6803      	ldr	r3, [r0, #0]
}
   b8012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b8016:	689b      	ldr	r3, [r3, #8]
   b8018:	4718      	bx	r3

000b801a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b801a:	f000 b8ed 	b.w	b81f8 <os_mutex_recursive_unlock>

000b801e <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b801e:	b510      	push	{r4, lr}
   b8020:	4604      	mov	r4, r0
   b8022:	3004      	adds	r0, #4
   b8024:	f7fc ffcc 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8028:	6823      	ldr	r3, [r4, #0]
   b802a:	68e1      	ldr	r1, [r4, #12]
   b802c:	695b      	ldr	r3, [r3, #20]
   b802e:	4620      	mov	r0, r4
   b8030:	4798      	blx	r3
   b8032:	b918      	cbnz	r0, b803c <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b8034:	6823      	ldr	r3, [r4, #0]
   b8036:	4620      	mov	r0, r4
   b8038:	699b      	ldr	r3, [r3, #24]
   b803a:	4798      	blx	r3
      { _M_device.unlock(); }
   b803c:	6860      	ldr	r0, [r4, #4]
   b803e:	f7ff ffec 	bl	b801a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8042:	2001      	movs	r0, #1
   b8044:	bd10      	pop	{r4, pc}
	...

000b8048 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8048:	b5f0      	push	{r4, r5, r6, r7, lr}
   b804a:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b804e:	4f18      	ldr	r7, [pc, #96]	; (b80b0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8050:	4e18      	ldr	r6, [pc, #96]	; (b80b4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b8052:	4d19      	ldr	r5, [pc, #100]	; (b80b8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b8054:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b8056:	42a0      	cmp	r0, r4
   b8058:	d00c      	beq.n	b8074 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b805a:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b805e:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b8060:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b8064:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b8066:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b8068:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b806c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b8070:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b8072:	e7f0      	b.n	b8056 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b8074:	f001 0403 	and.w	r4, r1, #3
   b8078:	4404      	add	r4, r0
    k = 0;
   b807a:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b807c:	42a0      	cmp	r0, r4
   b807e:	d004      	beq.n	b808a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b8080:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b8084:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b8088:	e7f8      	b.n	b807c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b808a:	4809      	ldr	r0, [pc, #36]	; (b80b0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b808c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b808e:	4809      	ldr	r0, [pc, #36]	; (b80b4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b8090:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b8094:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b8096:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8098:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b809a:	4b08      	ldr	r3, [pc, #32]	; (b80bc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b809c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b80a0:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b80a2:	4b07      	ldr	r3, [pc, #28]	; (b80c0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b80a4:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b80a8:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b80aa:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b80ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b80b0:	cc9e2d51 	.word	0xcc9e2d51
   b80b4:	1b873593 	.word	0x1b873593
   b80b8:	e6546b64 	.word	0xe6546b64
   b80bc:	85ebca6b 	.word	0x85ebca6b
   b80c0:	c2b2ae35 	.word	0xc2b2ae35

000b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b80c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80c6:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b80c8:	3004      	adds	r0, #4
   b80ca:	f7fc ff79 	bl	b4fc0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b80ce:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b80d0:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b80d2:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b80d4:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b80d6:	68a6      	ldr	r6, [r4, #8]
   b80d8:	4a05      	ldr	r2, [pc, #20]	; (b80f0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b80da:	88f1      	ldrh	r1, [r6, #6]
   b80dc:	4630      	mov	r0, r6
   b80de:	f7ff ffb3 	bl	b8048 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b80e2:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b80e4:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b80e6:	6860      	ldr	r0, [r4, #4]
   b80e8:	f7ff ff97 	bl	b801a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b80ec:	4628      	mov	r0, r5
   b80ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b80f0:	851c2a3f 	.word	0x851c2a3f

000b80f4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b80f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80f6:	460d      	mov	r5, r1
   b80f8:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b80fa:	f7ff ffe3 	bl	b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b80fe:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b8100:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b8102:	d923      	bls.n	b814c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b8104:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b8106:	6922      	ldr	r2, [r4, #16]
   b8108:	6819      	ldr	r1, [r3, #0]
   b810a:	4291      	cmp	r1, r2
   b810c:	d11f      	bne.n	b814e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b810e:	8899      	ldrh	r1, [r3, #4]
   b8110:	8aa2      	ldrh	r2, [r4, #20]
   b8112:	4291      	cmp	r1, r2
   b8114:	d11b      	bne.n	b814e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b8116:	88d9      	ldrh	r1, [r3, #6]
   b8118:	b2aa      	uxth	r2, r5
   b811a:	4291      	cmp	r1, r2
   b811c:	d817      	bhi.n	b814e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b811e:	689a      	ldr	r2, [r3, #8]
   b8120:	4282      	cmp	r2, r0
   b8122:	d114      	bne.n	b814e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b8124:	68e2      	ldr	r2, [r4, #12]
   b8126:	42aa      	cmp	r2, r5
   b8128:	d905      	bls.n	b8136 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b812a:	2100      	movs	r1, #0
   b812c:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b812e:	68e2      	ldr	r2, [r4, #12]
   b8130:	3501      	adds	r5, #1
   b8132:	42aa      	cmp	r2, r5
   b8134:	d8fa      	bhi.n	b812c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8136:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b813a:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b813c:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b813e:	68a5      	ldr	r5, [r4, #8]
   b8140:	f7ff ffc0 	bl	b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8144:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b8146:	2001      	movs	r0, #1
}
   b8148:	b002      	add	sp, #8
   b814a:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b814c:	b19d      	cbz	r5, b8176 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b814e:	68a1      	ldr	r1, [r4, #8]
   b8150:	680a      	ldr	r2, [r1, #0]
   b8152:	b192      	cbz	r2, b817a <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b8154:	6888      	ldr	r0, [r1, #8]
   b8156:	888b      	ldrh	r3, [r1, #4]
   b8158:	9001      	str	r0, [sp, #4]
   b815a:	88c9      	ldrh	r1, [r1, #6]
   b815c:	4808      	ldr	r0, [pc, #32]	; (b8180 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b815e:	9100      	str	r1, [sp, #0]
   b8160:	4908      	ldr	r1, [pc, #32]	; (b8184 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b8162:	f7fd fdbe 	bl	b5ce2 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b8166:	e9cd 5600 	strd	r5, r6, [sp]
   b816a:	8aa3      	ldrh	r3, [r4, #20]
   b816c:	6922      	ldr	r2, [r4, #16]
   b816e:	4906      	ldr	r1, [pc, #24]	; (b8188 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b8170:	4803      	ldr	r0, [pc, #12]	; (b8180 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b8172:	f7fd fdb6 	bl	b5ce2 <_ZNK5spark6Logger5traceEPKcz>
   b8176:	2000      	movs	r0, #0
   b8178:	e7e6      	b.n	b8148 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b817a:	4610      	mov	r0, r2
   b817c:	e7e4      	b.n	b8148 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b817e:	bf00      	nop
   b8180:	2003e658 	.word	0x2003e658
   b8184:	000bd07c 	.word	0x000bd07c
   b8188:	000bd0ad 	.word	0x000bd0ad

000b818c <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b818c:	b538      	push	{r3, r4, r5, lr}
   b818e:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8190:	68c2      	ldr	r2, [r0, #12]
   b8192:	6880      	ldr	r0, [r0, #8]
   b8194:	2100      	movs	r1, #0
   b8196:	f003 ff11 	bl	bbfbc <memset>
    savedDataHeader->magic = savedDataMagic;
   b819a:	68a3      	ldr	r3, [r4, #8]
   b819c:	6922      	ldr	r2, [r4, #16]
   b819e:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b81a0:	68a3      	ldr	r3, [r4, #8]
   b81a2:	8aa2      	ldrh	r2, [r4, #20]
   b81a4:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b81a6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b81aa:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b81ac:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b81ae:	68a5      	ldr	r5, [r4, #8]
   b81b0:	f7ff ff88 	bl	b80c4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b81b4:	60a8      	str	r0, [r5, #8]
}
   b81b6:	bd38      	pop	{r3, r4, r5, pc}

000b81b8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b81b8:	b508      	push	{r3, lr}
   b81ba:	4b02      	ldr	r3, [pc, #8]	; (b81c4 <cellular_signal+0xc>)
   b81bc:	681b      	ldr	r3, [r3, #0]
   b81be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b81c0:	9301      	str	r3, [sp, #4]
   b81c2:	bd08      	pop	{r3, pc}
   b81c4:	00030274 	.word	0x00030274

000b81c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b81c8:	b508      	push	{r3, lr}
   b81ca:	4b02      	ldr	r3, [pc, #8]	; (b81d4 <os_mutex_recursive_create+0xc>)
   b81cc:	681b      	ldr	r3, [r3, #0]
   b81ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b81d0:	9301      	str	r3, [sp, #4]
   b81d2:	bd08      	pop	{r3, pc}
   b81d4:	00030248 	.word	0x00030248

000b81d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b81d8:	b508      	push	{r3, lr}
   b81da:	4b02      	ldr	r3, [pc, #8]	; (b81e4 <os_mutex_recursive_destroy+0xc>)
   b81dc:	681b      	ldr	r3, [r3, #0]
   b81de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b81e0:	9301      	str	r3, [sp, #4]
   b81e2:	bd08      	pop	{r3, pc}
   b81e4:	00030248 	.word	0x00030248

000b81e8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b81e8:	b508      	push	{r3, lr}
   b81ea:	4b02      	ldr	r3, [pc, #8]	; (b81f4 <os_mutex_recursive_lock+0xc>)
   b81ec:	681b      	ldr	r3, [r3, #0]
   b81ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b81f0:	9301      	str	r3, [sp, #4]
   b81f2:	bd08      	pop	{r3, pc}
   b81f4:	00030248 	.word	0x00030248

000b81f8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b81f8:	b508      	push	{r3, lr}
   b81fa:	4b02      	ldr	r3, [pc, #8]	; (b8204 <os_mutex_recursive_unlock+0xc>)
   b81fc:	681b      	ldr	r3, [r3, #0]
   b81fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8200:	9301      	str	r3, [sp, #4]
   b8202:	bd08      	pop	{r3, pc}
   b8204:	00030248 	.word	0x00030248

000b8208 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8208:	b508      	push	{r3, lr}
   b820a:	4b02      	ldr	r3, [pc, #8]	; (b8214 <HAL_Core_Runtime_Info+0xc>)
   b820c:	681b      	ldr	r3, [r3, #0]
   b820e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8210:	9301      	str	r3, [sp, #4]
   b8212:	bd08      	pop	{r3, pc}
   b8214:	00030234 	.word	0x00030234

000b8218 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8218:	b508      	push	{r3, lr}
   b821a:	4b02      	ldr	r3, [pc, #8]	; (b8224 <HAL_Feature_Set+0xc>)
   b821c:	681b      	ldr	r3, [r3, #0]
   b821e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8220:	9301      	str	r3, [sp, #4]
   b8222:	bd08      	pop	{r3, pc}
   b8224:	00030234 	.word	0x00030234

000b8228 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8228:	b508      	push	{r3, lr}
   b822a:	4b02      	ldr	r3, [pc, #8]	; (b8234 <HAL_RNG_GetRandomNumber+0xc>)
   b822c:	681b      	ldr	r3, [r3, #0]
   b822e:	685b      	ldr	r3, [r3, #4]
   b8230:	9301      	str	r3, [sp, #4]
   b8232:	bd08      	pop	{r3, pc}
   b8234:	00030218 	.word	0x00030218

000b8238 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8238:	b508      	push	{r3, lr}
   b823a:	4b02      	ldr	r3, [pc, #8]	; (b8244 <HAL_Delay_Microseconds+0xc>)
   b823c:	681b      	ldr	r3, [r3, #0]
   b823e:	68db      	ldr	r3, [r3, #12]
   b8240:	9301      	str	r3, [sp, #4]
   b8242:	bd08      	pop	{r3, pc}
   b8244:	00030218 	.word	0x00030218

000b8248 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8248:	b508      	push	{r3, lr}
   b824a:	4b02      	ldr	r3, [pc, #8]	; (b8254 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b824c:	681b      	ldr	r3, [r3, #0]
   b824e:	695b      	ldr	r3, [r3, #20]
   b8250:	9301      	str	r3, [sp, #4]
   b8252:	bd08      	pop	{r3, pc}
   b8254:	00030218 	.word	0x00030218

000b8258 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8258:	b508      	push	{r3, lr}
   b825a:	4b02      	ldr	r3, [pc, #8]	; (b8264 <hal_rtc_time_is_valid+0xc>)
   b825c:	681b      	ldr	r3, [r3, #0]
   b825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8260:	9301      	str	r3, [sp, #4]
   b8262:	bd08      	pop	{r3, pc}
   b8264:	00030218 	.word	0x00030218

000b8268 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8268:	b508      	push	{r3, lr}
   b826a:	4b02      	ldr	r3, [pc, #8]	; (b8274 <hal_timer_millis+0xc>)
   b826c:	681b      	ldr	r3, [r3, #0]
   b826e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8270:	9301      	str	r3, [sp, #4]
   b8272:	bd08      	pop	{r3, pc}
   b8274:	00030218 	.word	0x00030218

000b8278 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8278:	b508      	push	{r3, lr}
   b827a:	4b02      	ldr	r3, [pc, #8]	; (b8284 <hal_rtc_get_time+0xc>)
   b827c:	681b      	ldr	r3, [r3, #0]
   b827e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8280:	9301      	str	r3, [sp, #4]
   b8282:	bd08      	pop	{r3, pc}
   b8284:	00030218 	.word	0x00030218

000b8288 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8288:	b508      	push	{r3, lr}
   b828a:	4b02      	ldr	r3, [pc, #8]	; (b8294 <hal_rtc_set_time+0xc>)
   b828c:	681b      	ldr	r3, [r3, #0]
   b828e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8290:	9301      	str	r3, [sp, #4]
   b8292:	bd08      	pop	{r3, pc}
   b8294:	00030218 	.word	0x00030218

000b8298 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8298:	b508      	push	{r3, lr}
   b829a:	4b02      	ldr	r3, [pc, #8]	; (b82a4 <HAL_Pin_Map+0xc>)
   b829c:	681b      	ldr	r3, [r3, #0]
   b829e:	681b      	ldr	r3, [r3, #0]
   b82a0:	9301      	str	r3, [sp, #4]
   b82a2:	bd08      	pop	{r3, pc}
   b82a4:	0003022c 	.word	0x0003022c

000b82a8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b82a8:	b508      	push	{r3, lr}
   b82aa:	4b02      	ldr	r3, [pc, #8]	; (b82b4 <HAL_Validate_Pin_Function+0xc>)
   b82ac:	681b      	ldr	r3, [r3, #0]
   b82ae:	685b      	ldr	r3, [r3, #4]
   b82b0:	9301      	str	r3, [sp, #4]
   b82b2:	bd08      	pop	{r3, pc}
   b82b4:	0003022c 	.word	0x0003022c

000b82b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b82b8:	b508      	push	{r3, lr}
   b82ba:	4b02      	ldr	r3, [pc, #8]	; (b82c4 <HAL_Pin_Mode+0xc>)
   b82bc:	681b      	ldr	r3, [r3, #0]
   b82be:	689b      	ldr	r3, [r3, #8]
   b82c0:	9301      	str	r3, [sp, #4]
   b82c2:	bd08      	pop	{r3, pc}
   b82c4:	0003022c 	.word	0x0003022c

000b82c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b82c8:	b508      	push	{r3, lr}
   b82ca:	4b02      	ldr	r3, [pc, #8]	; (b82d4 <HAL_Get_Pin_Mode+0xc>)
   b82cc:	681b      	ldr	r3, [r3, #0]
   b82ce:	68db      	ldr	r3, [r3, #12]
   b82d0:	9301      	str	r3, [sp, #4]
   b82d2:	bd08      	pop	{r3, pc}
   b82d4:	0003022c 	.word	0x0003022c

000b82d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b82d8:	b508      	push	{r3, lr}
   b82da:	4b02      	ldr	r3, [pc, #8]	; (b82e4 <HAL_GPIO_Write+0xc>)
   b82dc:	681b      	ldr	r3, [r3, #0]
   b82de:	691b      	ldr	r3, [r3, #16]
   b82e0:	9301      	str	r3, [sp, #4]
   b82e2:	bd08      	pop	{r3, pc}
   b82e4:	0003022c 	.word	0x0003022c

000b82e8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b82e8:	b508      	push	{r3, lr}
   b82ea:	4b02      	ldr	r3, [pc, #8]	; (b82f4 <HAL_GPIO_Read+0xc>)
   b82ec:	681b      	ldr	r3, [r3, #0]
   b82ee:	695b      	ldr	r3, [r3, #20]
   b82f0:	9301      	str	r3, [sp, #4]
   b82f2:	bd08      	pop	{r3, pc}
   b82f4:	0003022c 	.word	0x0003022c

000b82f8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b82f8:	b508      	push	{r3, lr}
   b82fa:	4b02      	ldr	r3, [pc, #8]	; (b8304 <HAL_Interrupts_Attach+0xc>)
   b82fc:	681b      	ldr	r3, [r3, #0]
   b82fe:	699b      	ldr	r3, [r3, #24]
   b8300:	9301      	str	r3, [sp, #4]
   b8302:	bd08      	pop	{r3, pc}
   b8304:	0003022c 	.word	0x0003022c

000b8308 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8308:	b508      	push	{r3, lr}
   b830a:	4b02      	ldr	r3, [pc, #8]	; (b8314 <HAL_Interrupts_Detach+0xc>)
   b830c:	681b      	ldr	r3, [r3, #0]
   b830e:	69db      	ldr	r3, [r3, #28]
   b8310:	9301      	str	r3, [sp, #4]
   b8312:	bd08      	pop	{r3, pc}
   b8314:	0003022c 	.word	0x0003022c

000b8318 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8318:	b508      	push	{r3, lr}
   b831a:	4b02      	ldr	r3, [pc, #8]	; (b8324 <hal_adc_read+0xc>)
   b831c:	681b      	ldr	r3, [r3, #0]
   b831e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8320:	9301      	str	r3, [sp, #4]
   b8322:	bd08      	pop	{r3, pc}
   b8324:	0003022c 	.word	0x0003022c

000b8328 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8328:	b508      	push	{r3, lr}
   b832a:	4b02      	ldr	r3, [pc, #8]	; (b8334 <hal_i2c_begin+0xc>)
   b832c:	681b      	ldr	r3, [r3, #0]
   b832e:	68db      	ldr	r3, [r3, #12]
   b8330:	9301      	str	r3, [sp, #4]
   b8332:	bd08      	pop	{r3, pc}
   b8334:	00030228 	.word	0x00030228

000b8338 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8338:	b508      	push	{r3, lr}
   b833a:	4b02      	ldr	r3, [pc, #8]	; (b8344 <hal_i2c_begin_transmission+0xc>)
   b833c:	681b      	ldr	r3, [r3, #0]
   b833e:	699b      	ldr	r3, [r3, #24]
   b8340:	9301      	str	r3, [sp, #4]
   b8342:	bd08      	pop	{r3, pc}
   b8344:	00030228 	.word	0x00030228

000b8348 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8348:	b508      	push	{r3, lr}
   b834a:	4b02      	ldr	r3, [pc, #8]	; (b8354 <hal_i2c_end_transmission+0xc>)
   b834c:	681b      	ldr	r3, [r3, #0]
   b834e:	69db      	ldr	r3, [r3, #28]
   b8350:	9301      	str	r3, [sp, #4]
   b8352:	bd08      	pop	{r3, pc}
   b8354:	00030228 	.word	0x00030228

000b8358 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8358:	b508      	push	{r3, lr}
   b835a:	4b02      	ldr	r3, [pc, #8]	; (b8364 <hal_i2c_write+0xc>)
   b835c:	681b      	ldr	r3, [r3, #0]
   b835e:	6a1b      	ldr	r3, [r3, #32]
   b8360:	9301      	str	r3, [sp, #4]
   b8362:	bd08      	pop	{r3, pc}
   b8364:	00030228 	.word	0x00030228

000b8368 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8368:	b508      	push	{r3, lr}
   b836a:	4b02      	ldr	r3, [pc, #8]	; (b8374 <hal_i2c_available+0xc>)
   b836c:	681b      	ldr	r3, [r3, #0]
   b836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8370:	9301      	str	r3, [sp, #4]
   b8372:	bd08      	pop	{r3, pc}
   b8374:	00030228 	.word	0x00030228

000b8378 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8378:	b508      	push	{r3, lr}
   b837a:	4b02      	ldr	r3, [pc, #8]	; (b8384 <hal_i2c_read+0xc>)
   b837c:	681b      	ldr	r3, [r3, #0]
   b837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8380:	9301      	str	r3, [sp, #4]
   b8382:	bd08      	pop	{r3, pc}
   b8384:	00030228 	.word	0x00030228

000b8388 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8388:	b508      	push	{r3, lr}
   b838a:	4b02      	ldr	r3, [pc, #8]	; (b8394 <hal_i2c_peek+0xc>)
   b838c:	681b      	ldr	r3, [r3, #0]
   b838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8390:	9301      	str	r3, [sp, #4]
   b8392:	bd08      	pop	{r3, pc}
   b8394:	00030228 	.word	0x00030228

000b8398 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8398:	b508      	push	{r3, lr}
   b839a:	4b02      	ldr	r3, [pc, #8]	; (b83a4 <hal_i2c_flush+0xc>)
   b839c:	681b      	ldr	r3, [r3, #0]
   b839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b83a0:	9301      	str	r3, [sp, #4]
   b83a2:	bd08      	pop	{r3, pc}
   b83a4:	00030228 	.word	0x00030228

000b83a8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b83a8:	b508      	push	{r3, lr}
   b83aa:	4b02      	ldr	r3, [pc, #8]	; (b83b4 <hal_i2c_is_enabled+0xc>)
   b83ac:	681b      	ldr	r3, [r3, #0]
   b83ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b83b0:	9301      	str	r3, [sp, #4]
   b83b2:	bd08      	pop	{r3, pc}
   b83b4:	00030228 	.word	0x00030228

000b83b8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b83b8:	b508      	push	{r3, lr}
   b83ba:	4b02      	ldr	r3, [pc, #8]	; (b83c4 <hal_i2c_init+0xc>)
   b83bc:	681b      	ldr	r3, [r3, #0]
   b83be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b83c0:	9301      	str	r3, [sp, #4]
   b83c2:	bd08      	pop	{r3, pc}
   b83c4:	00030228 	.word	0x00030228

000b83c8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b83c8:	b508      	push	{r3, lr}
   b83ca:	4b02      	ldr	r3, [pc, #8]	; (b83d4 <hal_i2c_lock+0xc>)
   b83cc:	681b      	ldr	r3, [r3, #0]
   b83ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b83d0:	9301      	str	r3, [sp, #4]
   b83d2:	bd08      	pop	{r3, pc}
   b83d4:	00030228 	.word	0x00030228

000b83d8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b83d8:	b508      	push	{r3, lr}
   b83da:	4b02      	ldr	r3, [pc, #8]	; (b83e4 <hal_i2c_unlock+0xc>)
   b83dc:	681b      	ldr	r3, [r3, #0]
   b83de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b83e0:	9301      	str	r3, [sp, #4]
   b83e2:	bd08      	pop	{r3, pc}
   b83e4:	00030228 	.word	0x00030228

000b83e8 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b83e8:	b508      	push	{r3, lr}
   b83ea:	4b02      	ldr	r3, [pc, #8]	; (b83f4 <hal_i2c_request_ex+0xc>)
   b83ec:	681b      	ldr	r3, [r3, #0]
   b83ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b83f0:	9301      	str	r3, [sp, #4]
   b83f2:	bd08      	pop	{r3, pc}
   b83f4:	00030228 	.word	0x00030228

000b83f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b83f8:	b508      	push	{r3, lr}
   b83fa:	4b02      	ldr	r3, [pc, #8]	; (b8404 <inet_inet_ntop+0xc>)
   b83fc:	681b      	ldr	r3, [r3, #0]
   b83fe:	695b      	ldr	r3, [r3, #20]
   b8400:	9301      	str	r3, [sp, #4]
   b8402:	bd08      	pop	{r3, pc}
   b8404:	00030264 	.word	0x00030264

000b8408 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8408:	b508      	push	{r3, lr}
   b840a:	4b02      	ldr	r3, [pc, #8]	; (b8414 <netdb_freeaddrinfo+0xc>)
   b840c:	681b      	ldr	r3, [r3, #0]
   b840e:	689b      	ldr	r3, [r3, #8]
   b8410:	9301      	str	r3, [sp, #4]
   b8412:	bd08      	pop	{r3, pc}
   b8414:	00030268 	.word	0x00030268

000b8418 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8418:	b508      	push	{r3, lr}
   b841a:	4b02      	ldr	r3, [pc, #8]	; (b8424 <netdb_getaddrinfo+0xc>)
   b841c:	681b      	ldr	r3, [r3, #0]
   b841e:	68db      	ldr	r3, [r3, #12]
   b8420:	9301      	str	r3, [sp, #4]
   b8422:	bd08      	pop	{r3, pc}
   b8424:	00030268 	.word	0x00030268

000b8428 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8428:	b508      	push	{r3, lr}
   b842a:	4b02      	ldr	r3, [pc, #8]	; (b8434 <hal_spi_begin+0xc>)
   b842c:	681b      	ldr	r3, [r3, #0]
   b842e:	681b      	ldr	r3, [r3, #0]
   b8430:	9301      	str	r3, [sp, #4]
   b8432:	bd08      	pop	{r3, pc}
   b8434:	00030230 	.word	0x00030230

000b8438 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8438:	b508      	push	{r3, lr}
   b843a:	4b02      	ldr	r3, [pc, #8]	; (b8444 <hal_spi_end+0xc>)
   b843c:	681b      	ldr	r3, [r3, #0]
   b843e:	685b      	ldr	r3, [r3, #4]
   b8440:	9301      	str	r3, [sp, #4]
   b8442:	bd08      	pop	{r3, pc}
   b8444:	00030230 	.word	0x00030230

000b8448 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8448:	b508      	push	{r3, lr}
   b844a:	4b02      	ldr	r3, [pc, #8]	; (b8454 <hal_spi_transfer+0xc>)
   b844c:	681b      	ldr	r3, [r3, #0]
   b844e:	695b      	ldr	r3, [r3, #20]
   b8450:	9301      	str	r3, [sp, #4]
   b8452:	bd08      	pop	{r3, pc}
   b8454:	00030230 	.word	0x00030230

000b8458 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8458:	b508      	push	{r3, lr}
   b845a:	4b02      	ldr	r3, [pc, #8]	; (b8464 <hal_spi_init+0xc>)
   b845c:	681b      	ldr	r3, [r3, #0]
   b845e:	69db      	ldr	r3, [r3, #28]
   b8460:	9301      	str	r3, [sp, #4]
   b8462:	bd08      	pop	{r3, pc}
   b8464:	00030230 	.word	0x00030230

000b8468 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8468:	b508      	push	{r3, lr}
   b846a:	4b02      	ldr	r3, [pc, #8]	; (b8474 <hal_spi_is_enabled+0xc>)
   b846c:	681b      	ldr	r3, [r3, #0]
   b846e:	6a1b      	ldr	r3, [r3, #32]
   b8470:	9301      	str	r3, [sp, #4]
   b8472:	bd08      	pop	{r3, pc}
   b8474:	00030230 	.word	0x00030230

000b8478 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8478:	b508      	push	{r3, lr}
   b847a:	4b02      	ldr	r3, [pc, #8]	; (b8484 <hal_spi_info+0xc>)
   b847c:	681b      	ldr	r3, [r3, #0]
   b847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8480:	9301      	str	r3, [sp, #4]
   b8482:	bd08      	pop	{r3, pc}
   b8484:	00030230 	.word	0x00030230

000b8488 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8488:	b508      	push	{r3, lr}
   b848a:	4b02      	ldr	r3, [pc, #8]	; (b8494 <hal_spi_set_settings+0xc>)
   b848c:	681b      	ldr	r3, [r3, #0]
   b848e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8490:	9301      	str	r3, [sp, #4]
   b8492:	bd08      	pop	{r3, pc}
   b8494:	00030230 	.word	0x00030230

000b8498 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8498:	b508      	push	{r3, lr}
   b849a:	4b02      	ldr	r3, [pc, #8]	; (b84a4 <hal_spi_acquire+0xc>)
   b849c:	681b      	ldr	r3, [r3, #0]
   b849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b84a0:	9301      	str	r3, [sp, #4]
   b84a2:	bd08      	pop	{r3, pc}
   b84a4:	00030230 	.word	0x00030230

000b84a8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b84a8:	b508      	push	{r3, lr}
   b84aa:	4b02      	ldr	r3, [pc, #8]	; (b84b4 <hal_spi_release+0xc>)
   b84ac:	681b      	ldr	r3, [r3, #0]
   b84ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b84b0:	9301      	str	r3, [sp, #4]
   b84b2:	bd08      	pop	{r3, pc}
   b84b4:	00030230 	.word	0x00030230

000b84b8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b84b8:	b508      	push	{r3, lr}
   b84ba:	4b02      	ldr	r3, [pc, #8]	; (b84c4 <hal_usart_end+0xc>)
   b84bc:	681b      	ldr	r3, [r3, #0]
   b84be:	689b      	ldr	r3, [r3, #8]
   b84c0:	9301      	str	r3, [sp, #4]
   b84c2:	bd08      	pop	{r3, pc}
   b84c4:	0003023c 	.word	0x0003023c

000b84c8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b84c8:	b508      	push	{r3, lr}
   b84ca:	4b02      	ldr	r3, [pc, #8]	; (b84d4 <hal_usart_write+0xc>)
   b84cc:	681b      	ldr	r3, [r3, #0]
   b84ce:	68db      	ldr	r3, [r3, #12]
   b84d0:	9301      	str	r3, [sp, #4]
   b84d2:	bd08      	pop	{r3, pc}
   b84d4:	0003023c 	.word	0x0003023c

000b84d8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b84d8:	b508      	push	{r3, lr}
   b84da:	4b02      	ldr	r3, [pc, #8]	; (b84e4 <hal_usart_available+0xc>)
   b84dc:	681b      	ldr	r3, [r3, #0]
   b84de:	691b      	ldr	r3, [r3, #16]
   b84e0:	9301      	str	r3, [sp, #4]
   b84e2:	bd08      	pop	{r3, pc}
   b84e4:	0003023c 	.word	0x0003023c

000b84e8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b84e8:	b508      	push	{r3, lr}
   b84ea:	4b02      	ldr	r3, [pc, #8]	; (b84f4 <hal_usart_read+0xc>)
   b84ec:	681b      	ldr	r3, [r3, #0]
   b84ee:	695b      	ldr	r3, [r3, #20]
   b84f0:	9301      	str	r3, [sp, #4]
   b84f2:	bd08      	pop	{r3, pc}
   b84f4:	0003023c 	.word	0x0003023c

000b84f8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b84f8:	b508      	push	{r3, lr}
   b84fa:	4b02      	ldr	r3, [pc, #8]	; (b8504 <hal_usart_peek+0xc>)
   b84fc:	681b      	ldr	r3, [r3, #0]
   b84fe:	699b      	ldr	r3, [r3, #24]
   b8500:	9301      	str	r3, [sp, #4]
   b8502:	bd08      	pop	{r3, pc}
   b8504:	0003023c 	.word	0x0003023c

000b8508 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8508:	b508      	push	{r3, lr}
   b850a:	4b02      	ldr	r3, [pc, #8]	; (b8514 <hal_usart_flush+0xc>)
   b850c:	681b      	ldr	r3, [r3, #0]
   b850e:	69db      	ldr	r3, [r3, #28]
   b8510:	9301      	str	r3, [sp, #4]
   b8512:	bd08      	pop	{r3, pc}
   b8514:	0003023c 	.word	0x0003023c

000b8518 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8518:	b508      	push	{r3, lr}
   b851a:	4b02      	ldr	r3, [pc, #8]	; (b8524 <hal_usart_is_enabled+0xc>)
   b851c:	681b      	ldr	r3, [r3, #0]
   b851e:	6a1b      	ldr	r3, [r3, #32]
   b8520:	9301      	str	r3, [sp, #4]
   b8522:	bd08      	pop	{r3, pc}
   b8524:	0003023c 	.word	0x0003023c

000b8528 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8528:	b508      	push	{r3, lr}
   b852a:	4b02      	ldr	r3, [pc, #8]	; (b8534 <hal_usart_available_data_for_write+0xc>)
   b852c:	681b      	ldr	r3, [r3, #0]
   b852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8530:	9301      	str	r3, [sp, #4]
   b8532:	bd08      	pop	{r3, pc}
   b8534:	0003023c 	.word	0x0003023c

000b8538 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8538:	b508      	push	{r3, lr}
   b853a:	4b02      	ldr	r3, [pc, #8]	; (b8544 <hal_usart_begin_config+0xc>)
   b853c:	681b      	ldr	r3, [r3, #0]
   b853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8540:	9301      	str	r3, [sp, #4]
   b8542:	bd08      	pop	{r3, pc}
   b8544:	0003023c 	.word	0x0003023c

000b8548 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8548:	b508      	push	{r3, lr}
   b854a:	4b02      	ldr	r3, [pc, #8]	; (b8554 <hal_usart_init_ex+0xc>)
   b854c:	681b      	ldr	r3, [r3, #0]
   b854e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8550:	9301      	str	r3, [sp, #4]
   b8552:	bd08      	pop	{r3, pc}
   b8554:	0003023c 	.word	0x0003023c

000b8558 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8558:	b508      	push	{r3, lr}
   b855a:	4b02      	ldr	r3, [pc, #8]	; (b8564 <HAL_USB_USART_Init+0xc>)
   b855c:	681b      	ldr	r3, [r3, #0]
   b855e:	681b      	ldr	r3, [r3, #0]
   b8560:	9301      	str	r3, [sp, #4]
   b8562:	bd08      	pop	{r3, pc}
   b8564:	0003024c 	.word	0x0003024c

000b8568 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8568:	b508      	push	{r3, lr}
   b856a:	4b02      	ldr	r3, [pc, #8]	; (b8574 <HAL_USB_USART_Begin+0xc>)
   b856c:	681b      	ldr	r3, [r3, #0]
   b856e:	685b      	ldr	r3, [r3, #4]
   b8570:	9301      	str	r3, [sp, #4]
   b8572:	bd08      	pop	{r3, pc}
   b8574:	0003024c 	.word	0x0003024c

000b8578 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b8578:	b508      	push	{r3, lr}
   b857a:	4b02      	ldr	r3, [pc, #8]	; (b8584 <HAL_USB_USART_End+0xc>)
   b857c:	681b      	ldr	r3, [r3, #0]
   b857e:	689b      	ldr	r3, [r3, #8]
   b8580:	9301      	str	r3, [sp, #4]
   b8582:	bd08      	pop	{r3, pc}
   b8584:	0003024c 	.word	0x0003024c

000b8588 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8588:	b508      	push	{r3, lr}
   b858a:	4b02      	ldr	r3, [pc, #8]	; (b8594 <HAL_USB_USART_Available_Data+0xc>)
   b858c:	681b      	ldr	r3, [r3, #0]
   b858e:	691b      	ldr	r3, [r3, #16]
   b8590:	9301      	str	r3, [sp, #4]
   b8592:	bd08      	pop	{r3, pc}
   b8594:	0003024c 	.word	0x0003024c

000b8598 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8598:	b508      	push	{r3, lr}
   b859a:	4b02      	ldr	r3, [pc, #8]	; (b85a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b859c:	681b      	ldr	r3, [r3, #0]
   b859e:	695b      	ldr	r3, [r3, #20]
   b85a0:	9301      	str	r3, [sp, #4]
   b85a2:	bd08      	pop	{r3, pc}
   b85a4:	0003024c 	.word	0x0003024c

000b85a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85a8:	b508      	push	{r3, lr}
   b85aa:	4b02      	ldr	r3, [pc, #8]	; (b85b4 <HAL_USB_USART_Receive_Data+0xc>)
   b85ac:	681b      	ldr	r3, [r3, #0]
   b85ae:	699b      	ldr	r3, [r3, #24]
   b85b0:	9301      	str	r3, [sp, #4]
   b85b2:	bd08      	pop	{r3, pc}
   b85b4:	0003024c 	.word	0x0003024c

000b85b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85b8:	b508      	push	{r3, lr}
   b85ba:	4b02      	ldr	r3, [pc, #8]	; (b85c4 <HAL_USB_USART_Send_Data+0xc>)
   b85bc:	681b      	ldr	r3, [r3, #0]
   b85be:	69db      	ldr	r3, [r3, #28]
   b85c0:	9301      	str	r3, [sp, #4]
   b85c2:	bd08      	pop	{r3, pc}
   b85c4:	0003024c 	.word	0x0003024c

000b85c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b85c8:	b508      	push	{r3, lr}
   b85ca:	4b02      	ldr	r3, [pc, #8]	; (b85d4 <HAL_USB_USART_Flush_Data+0xc>)
   b85cc:	681b      	ldr	r3, [r3, #0]
   b85ce:	6a1b      	ldr	r3, [r3, #32]
   b85d0:	9301      	str	r3, [sp, #4]
   b85d2:	bd08      	pop	{r3, pc}
   b85d4:	0003024c 	.word	0x0003024c

000b85d8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b85d8:	b508      	push	{r3, lr}
   b85da:	4b02      	ldr	r3, [pc, #8]	; (b85e4 <HAL_USB_USART_Is_Connected+0xc>)
   b85dc:	681b      	ldr	r3, [r3, #0]
   b85de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b85e0:	9301      	str	r3, [sp, #4]
   b85e2:	bd08      	pop	{r3, pc}
   b85e4:	0003024c 	.word	0x0003024c

000b85e8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b85e8:	b508      	push	{r3, lr}
   b85ea:	4b02      	ldr	r3, [pc, #8]	; (b85f4 <panic_+0xc>)
   b85ec:	681b      	ldr	r3, [r3, #0]
   b85ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b85f0:	9301      	str	r3, [sp, #4]
   b85f2:	bd08      	pop	{r3, pc}
   b85f4:	00030260 	.word	0x00030260

000b85f8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b85f8:	b508      	push	{r3, lr}
   b85fa:	4b02      	ldr	r3, [pc, #8]	; (b8604 <log_message+0xc>)
   b85fc:	681b      	ldr	r3, [r3, #0]
   b85fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8600:	9301      	str	r3, [sp, #4]
   b8602:	bd08      	pop	{r3, pc}
   b8604:	00030260 	.word	0x00030260

000b8608 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8608:	b508      	push	{r3, lr}
   b860a:	4b02      	ldr	r3, [pc, #8]	; (b8614 <log_message_v+0xc>)
   b860c:	681b      	ldr	r3, [r3, #0]
   b860e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8610:	9301      	str	r3, [sp, #4]
   b8612:	bd08      	pop	{r3, pc}
   b8614:	00030260 	.word	0x00030260

000b8618 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8618:	b508      	push	{r3, lr}
   b861a:	4b02      	ldr	r3, [pc, #8]	; (b8624 <log_level_name+0xc>)
   b861c:	681b      	ldr	r3, [r3, #0]
   b861e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8620:	9301      	str	r3, [sp, #4]
   b8622:	bd08      	pop	{r3, pc}
   b8624:	00030260 	.word	0x00030260

000b8628 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8628:	b508      	push	{r3, lr}
   b862a:	4b02      	ldr	r3, [pc, #8]	; (b8634 <log_set_callbacks+0xc>)
   b862c:	681b      	ldr	r3, [r3, #0]
   b862e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8630:	9301      	str	r3, [sp, #4]
   b8632:	bd08      	pop	{r3, pc}
   b8634:	00030260 	.word	0x00030260

000b8638 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8638:	b508      	push	{r3, lr}
   b863a:	4b03      	ldr	r3, [pc, #12]	; (b8648 <diag_get_source+0x10>)
   b863c:	681b      	ldr	r3, [r3, #0]
   b863e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8642:	9301      	str	r3, [sp, #4]
   b8644:	bd08      	pop	{r3, pc}
   b8646:	0000      	.short	0x0000
   b8648:	00030260 	.word	0x00030260

000b864c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b864c:	b508      	push	{r3, lr}
   b864e:	4b02      	ldr	r3, [pc, #8]	; (b8658 <system_mode+0xc>)
   b8650:	681b      	ldr	r3, [r3, #0]
   b8652:	681b      	ldr	r3, [r3, #0]
   b8654:	9301      	str	r3, [sp, #4]
   b8656:	bd08      	pop	{r3, pc}
   b8658:	00030220 	.word	0x00030220

000b865c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b865c:	b508      	push	{r3, lr}
   b865e:	4b02      	ldr	r3, [pc, #8]	; (b8668 <set_system_mode+0xc>)
   b8660:	681b      	ldr	r3, [r3, #0]
   b8662:	685b      	ldr	r3, [r3, #4]
   b8664:	9301      	str	r3, [sp, #4]
   b8666:	bd08      	pop	{r3, pc}
   b8668:	00030220 	.word	0x00030220

000b866c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b866c:	b508      	push	{r3, lr}
   b866e:	4b02      	ldr	r3, [pc, #8]	; (b8678 <system_delay_ms+0xc>)
   b8670:	681b      	ldr	r3, [r3, #0]
   b8672:	695b      	ldr	r3, [r3, #20]
   b8674:	9301      	str	r3, [sp, #4]
   b8676:	bd08      	pop	{r3, pc}
   b8678:	00030220 	.word	0x00030220

000b867c <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b867c:	b508      	push	{r3, lr}
   b867e:	4b02      	ldr	r3, [pc, #8]	; (b8688 <system_subscribe_event+0xc>)
   b8680:	681b      	ldr	r3, [r3, #0]
   b8682:	6a1b      	ldr	r3, [r3, #32]
   b8684:	9301      	str	r3, [sp, #4]
   b8686:	bd08      	pop	{r3, pc}
   b8688:	00030220 	.word	0x00030220

000b868c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b868c:	b508      	push	{r3, lr}
   b868e:	4b02      	ldr	r3, [pc, #8]	; (b8698 <system_thread_set_state+0xc>)
   b8690:	681b      	ldr	r3, [r3, #0]
   b8692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8694:	9301      	str	r3, [sp, #4]
   b8696:	bd08      	pop	{r3, pc}
   b8698:	00030220 	.word	0x00030220

000b869c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b869c:	b508      	push	{r3, lr}
   b869e:	4b02      	ldr	r3, [pc, #8]	; (b86a8 <system_thread_get_state+0xc>)
   b86a0:	681b      	ldr	r3, [r3, #0]
   b86a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b86a4:	9301      	str	r3, [sp, #4]
   b86a6:	bd08      	pop	{r3, pc}
   b86a8:	00030220 	.word	0x00030220

000b86ac <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b86ac:	b508      	push	{r3, lr}
   b86ae:	4b02      	ldr	r3, [pc, #8]	; (b86b8 <system_notify_time_changed+0xc>)
   b86b0:	681b      	ldr	r3, [r3, #0]
   b86b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b86b4:	9301      	str	r3, [sp, #4]
   b86b6:	bd08      	pop	{r3, pc}
   b86b8:	00030220 	.word	0x00030220

000b86bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b86bc:	b508      	push	{r3, lr}
   b86be:	4b03      	ldr	r3, [pc, #12]	; (b86cc <system_ctrl_set_app_request_handler+0x10>)
   b86c0:	681b      	ldr	r3, [r3, #0]
   b86c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b86c6:	9301      	str	r3, [sp, #4]
   b86c8:	bd08      	pop	{r3, pc}
   b86ca:	0000      	.short	0x0000
   b86cc:	00030220 	.word	0x00030220

000b86d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b86d0:	b508      	push	{r3, lr}
   b86d2:	4b03      	ldr	r3, [pc, #12]	; (b86e0 <system_ctrl_set_result+0x10>)
   b86d4:	681b      	ldr	r3, [r3, #0]
   b86d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b86da:	9301      	str	r3, [sp, #4]
   b86dc:	bd08      	pop	{r3, pc}
   b86de:	0000      	.short	0x0000
   b86e0:	00030220 	.word	0x00030220

000b86e4 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b86e4:	b508      	push	{r3, lr}
   b86e6:	4b03      	ldr	r3, [pc, #12]	; (b86f4 <system_power_management_set_config+0x10>)
   b86e8:	681b      	ldr	r3, [r3, #0]
   b86ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b86ee:	9301      	str	r3, [sp, #4]
   b86f0:	bd08      	pop	{r3, pc}
   b86f2:	0000      	.short	0x0000
   b86f4:	00030220 	.word	0x00030220

000b86f8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b86f8:	b508      	push	{r3, lr}
   b86fa:	4b03      	ldr	r3, [pc, #12]	; (b8708 <system_sleep_ext+0x10>)
   b86fc:	681b      	ldr	r3, [r3, #0]
   b86fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b8702:	9301      	str	r3, [sp, #4]
   b8704:	bd08      	pop	{r3, pc}
   b8706:	0000      	.short	0x0000
   b8708:	00030220 	.word	0x00030220

000b870c <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b870c:	b508      	push	{r3, lr}
   b870e:	4b03      	ldr	r3, [pc, #12]	; (b871c <system_reset+0x10>)
   b8710:	681b      	ldr	r3, [r3, #0]
   b8712:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b8716:	9301      	str	r3, [sp, #4]
   b8718:	bd08      	pop	{r3, pc}
   b871a:	0000      	.short	0x0000
   b871c:	00030220 	.word	0x00030220

000b8720 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8720:	b508      	push	{r3, lr}
   b8722:	4b02      	ldr	r3, [pc, #8]	; (b872c <spark_process+0xc>)
   b8724:	681b      	ldr	r3, [r3, #0]
   b8726:	689b      	ldr	r3, [r3, #8]
   b8728:	9301      	str	r3, [sp, #4]
   b872a:	bd08      	pop	{r3, pc}
   b872c:	00030244 	.word	0x00030244

000b8730 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8730:	b508      	push	{r3, lr}
   b8732:	4b02      	ldr	r3, [pc, #8]	; (b873c <spark_cloud_flag_connected+0xc>)
   b8734:	681b      	ldr	r3, [r3, #0]
   b8736:	695b      	ldr	r3, [r3, #20]
   b8738:	9301      	str	r3, [sp, #4]
   b873a:	bd08      	pop	{r3, pc}
   b873c:	00030244 	.word	0x00030244

000b8740 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8740:	b508      	push	{r3, lr}
   b8742:	4b02      	ldr	r3, [pc, #8]	; (b874c <spark_sync_time_pending+0xc>)
   b8744:	681b      	ldr	r3, [r3, #0]
   b8746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8748:	9301      	str	r3, [sp, #4]
   b874a:	bd08      	pop	{r3, pc}
   b874c:	00030244 	.word	0x00030244

000b8750 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b8750:	b508      	push	{r3, lr}
   b8752:	4b02      	ldr	r3, [pc, #8]	; (b875c <spark_sync_time_last+0xc>)
   b8754:	681b      	ldr	r3, [r3, #0]
   b8756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8758:	9301      	str	r3, [sp, #4]
   b875a:	bd08      	pop	{r3, pc}
   b875c:	00030244 	.word	0x00030244

000b8760 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8760:	b508      	push	{r3, lr}
   b8762:	4b02      	ldr	r3, [pc, #8]	; (b876c <spark_set_random_seed_from_cloud_handler+0xc>)
   b8764:	681b      	ldr	r3, [r3, #0]
   b8766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8768:	9301      	str	r3, [sp, #4]
   b876a:	bd08      	pop	{r3, pc}
   b876c:	00030244 	.word	0x00030244

000b8770 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8770:	b508      	push	{r3, lr}
   b8772:	4b02      	ldr	r3, [pc, #8]	; (b877c <network_connect+0xc>)
   b8774:	681b      	ldr	r3, [r3, #0]
   b8776:	685b      	ldr	r3, [r3, #4]
   b8778:	9301      	str	r3, [sp, #4]
   b877a:	bd08      	pop	{r3, pc}
   b877c:	00030240 	.word	0x00030240

000b8780 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8780:	b508      	push	{r3, lr}
   b8782:	4b02      	ldr	r3, [pc, #8]	; (b878c <network_connecting+0xc>)
   b8784:	681b      	ldr	r3, [r3, #0]
   b8786:	689b      	ldr	r3, [r3, #8]
   b8788:	9301      	str	r3, [sp, #4]
   b878a:	bd08      	pop	{r3, pc}
   b878c:	00030240 	.word	0x00030240

000b8790 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8790:	b508      	push	{r3, lr}
   b8792:	4b02      	ldr	r3, [pc, #8]	; (b879c <network_disconnect+0xc>)
   b8794:	681b      	ldr	r3, [r3, #0]
   b8796:	68db      	ldr	r3, [r3, #12]
   b8798:	9301      	str	r3, [sp, #4]
   b879a:	bd08      	pop	{r3, pc}
   b879c:	00030240 	.word	0x00030240

000b87a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b87a0:	b508      	push	{r3, lr}
   b87a2:	4b02      	ldr	r3, [pc, #8]	; (b87ac <network_ready+0xc>)
   b87a4:	681b      	ldr	r3, [r3, #0]
   b87a6:	691b      	ldr	r3, [r3, #16]
   b87a8:	9301      	str	r3, [sp, #4]
   b87aa:	bd08      	pop	{r3, pc}
   b87ac:	00030240 	.word	0x00030240

000b87b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b87b0:	b508      	push	{r3, lr}
   b87b2:	4b02      	ldr	r3, [pc, #8]	; (b87bc <network_on+0xc>)
   b87b4:	681b      	ldr	r3, [r3, #0]
   b87b6:	695b      	ldr	r3, [r3, #20]
   b87b8:	9301      	str	r3, [sp, #4]
   b87ba:	bd08      	pop	{r3, pc}
   b87bc:	00030240 	.word	0x00030240

000b87c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b87c0:	b508      	push	{r3, lr}
   b87c2:	4b02      	ldr	r3, [pc, #8]	; (b87cc <network_off+0xc>)
   b87c4:	681b      	ldr	r3, [r3, #0]
   b87c6:	699b      	ldr	r3, [r3, #24]
   b87c8:	9301      	str	r3, [sp, #4]
   b87ca:	bd08      	pop	{r3, pc}
   b87cc:	00030240 	.word	0x00030240

000b87d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b87d0:	b508      	push	{r3, lr}
   b87d2:	4b02      	ldr	r3, [pc, #8]	; (b87dc <network_listen+0xc>)
   b87d4:	681b      	ldr	r3, [r3, #0]
   b87d6:	69db      	ldr	r3, [r3, #28]
   b87d8:	9301      	str	r3, [sp, #4]
   b87da:	bd08      	pop	{r3, pc}
   b87dc:	00030240 	.word	0x00030240

000b87e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b87e0:	b508      	push	{r3, lr}
   b87e2:	4b02      	ldr	r3, [pc, #8]	; (b87ec <network_listening+0xc>)
   b87e4:	681b      	ldr	r3, [r3, #0]
   b87e6:	6a1b      	ldr	r3, [r3, #32]
   b87e8:	9301      	str	r3, [sp, #4]
   b87ea:	bd08      	pop	{r3, pc}
   b87ec:	00030240 	.word	0x00030240

000b87f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b87f0:	b508      	push	{r3, lr}
   b87f2:	4b02      	ldr	r3, [pc, #8]	; (b87fc <network_set_listen_timeout+0xc>)
   b87f4:	681b      	ldr	r3, [r3, #0]
   b87f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b87f8:	9301      	str	r3, [sp, #4]
   b87fa:	bd08      	pop	{r3, pc}
   b87fc:	00030240 	.word	0x00030240

000b8800 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8800:	b508      	push	{r3, lr}
   b8802:	4b02      	ldr	r3, [pc, #8]	; (b880c <network_get_listen_timeout+0xc>)
   b8804:	681b      	ldr	r3, [r3, #0]
   b8806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8808:	9301      	str	r3, [sp, #4]
   b880a:	bd08      	pop	{r3, pc}
   b880c:	00030240 	.word	0x00030240

000b8810 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8810:	b508      	push	{r3, lr}
   b8812:	4b02      	ldr	r3, [pc, #8]	; (b881c <network_is_on+0xc>)
   b8814:	681b      	ldr	r3, [r3, #0]
   b8816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8818:	9301      	str	r3, [sp, #4]
   b881a:	bd08      	pop	{r3, pc}
   b881c:	00030240 	.word	0x00030240

000b8820 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8820:	b508      	push	{r3, lr}
   b8822:	4b02      	ldr	r3, [pc, #8]	; (b882c <network_is_off+0xc>)
   b8824:	681b      	ldr	r3, [r3, #0]
   b8826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8828:	9301      	str	r3, [sp, #4]
   b882a:	bd08      	pop	{r3, pc}
   b882c:	00030240 	.word	0x00030240

000b8830 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8830:	b508      	push	{r3, lr}
   b8832:	4b02      	ldr	r3, [pc, #8]	; (b883c <malloc+0xc>)
   b8834:	681b      	ldr	r3, [r3, #0]
   b8836:	681b      	ldr	r3, [r3, #0]
   b8838:	9301      	str	r3, [sp, #4]
   b883a:	bd08      	pop	{r3, pc}
   b883c:	0003021c 	.word	0x0003021c

000b8840 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8840:	b508      	push	{r3, lr}
   b8842:	4b02      	ldr	r3, [pc, #8]	; (b884c <free+0xc>)
   b8844:	681b      	ldr	r3, [r3, #0]
   b8846:	685b      	ldr	r3, [r3, #4]
   b8848:	9301      	str	r3, [sp, #4]
   b884a:	bd08      	pop	{r3, pc}
   b884c:	0003021c 	.word	0x0003021c

000b8850 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8850:	b508      	push	{r3, lr}
   b8852:	4b02      	ldr	r3, [pc, #8]	; (b885c <realloc+0xc>)
   b8854:	681b      	ldr	r3, [r3, #0]
   b8856:	689b      	ldr	r3, [r3, #8]
   b8858:	9301      	str	r3, [sp, #4]
   b885a:	bd08      	pop	{r3, pc}
   b885c:	0003021c 	.word	0x0003021c

000b8860 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8860:	b508      	push	{r3, lr}
   b8862:	4b02      	ldr	r3, [pc, #8]	; (b886c <siprintf+0xc>)
   b8864:	681b      	ldr	r3, [r3, #0]
   b8866:	691b      	ldr	r3, [r3, #16]
   b8868:	9301      	str	r3, [sp, #4]
   b886a:	bd08      	pop	{r3, pc}
   b886c:	0003021c 	.word	0x0003021c

000b8870 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8870:	b508      	push	{r3, lr}
   b8872:	4b02      	ldr	r3, [pc, #8]	; (b887c <snprintf+0xc>)
   b8874:	681b      	ldr	r3, [r3, #0]
   b8876:	69db      	ldr	r3, [r3, #28]
   b8878:	9301      	str	r3, [sp, #4]
   b887a:	bd08      	pop	{r3, pc}
   b887c:	0003021c 	.word	0x0003021c

000b8880 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8880:	b508      	push	{r3, lr}
   b8882:	4b02      	ldr	r3, [pc, #8]	; (b888c <vsnprintf+0xc>)
   b8884:	681b      	ldr	r3, [r3, #0]
   b8886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8888:	9301      	str	r3, [sp, #4]
   b888a:	bd08      	pop	{r3, pc}
   b888c:	0003021c 	.word	0x0003021c

000b8890 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8890:	b508      	push	{r3, lr}
   b8892:	4b02      	ldr	r3, [pc, #8]	; (b889c <abort+0xc>)
   b8894:	681b      	ldr	r3, [r3, #0]
   b8896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8898:	9301      	str	r3, [sp, #4]
   b889a:	bd08      	pop	{r3, pc}
   b889c:	0003021c 	.word	0x0003021c

000b88a0 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b88a0:	b508      	push	{r3, lr}
   b88a2:	4b02      	ldr	r3, [pc, #8]	; (b88ac <__errno+0xc>)
   b88a4:	681b      	ldr	r3, [r3, #0]
   b88a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b88a8:	9301      	str	r3, [sp, #4]
   b88aa:	bd08      	pop	{r3, pc}
   b88ac:	0003021c 	.word	0x0003021c

000b88b0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b88b0:	b508      	push	{r3, lr}
   b88b2:	4b02      	ldr	r3, [pc, #8]	; (b88bc <__assert_func+0xc>)
   b88b4:	681b      	ldr	r3, [r3, #0]
   b88b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88b8:	9301      	str	r3, [sp, #4]
   b88ba:	bd08      	pop	{r3, pc}
   b88bc:	0003021c 	.word	0x0003021c

000b88c0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b88c0:	b508      	push	{r3, lr}
   b88c2:	4b02      	ldr	r3, [pc, #8]	; (b88cc <newlib_impure_ptr_callback+0xc>)
   b88c4:	681b      	ldr	r3, [r3, #0]
   b88c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b88c8:	9301      	str	r3, [sp, #4]
   b88ca:	bd08      	pop	{r3, pc}
   b88cc:	0003021c 	.word	0x0003021c

000b88d0 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b88d0:	b508      	push	{r3, lr}
   b88d2:	4b02      	ldr	r3, [pc, #8]	; (b88dc <strftime+0xc>)
   b88d4:	681b      	ldr	r3, [r3, #0]
   b88d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b88d8:	9301      	str	r3, [sp, #4]
   b88da:	bd08      	pop	{r3, pc}
   b88dc:	0003021c 	.word	0x0003021c

000b88e0 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b88e0:	b508      	push	{r3, lr}
   b88e2:	4b02      	ldr	r3, [pc, #8]	; (b88ec <localtime_r+0xc>)
   b88e4:	681b      	ldr	r3, [r3, #0]
   b88e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b88e8:	9301      	str	r3, [sp, #4]
   b88ea:	bd08      	pop	{r3, pc}
   b88ec:	0003021c 	.word	0x0003021c

000b88f0 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b88f0:	b508      	push	{r3, lr}
   b88f2:	4b02      	ldr	r3, [pc, #8]	; (b88fc <gmtime_r+0xc>)
   b88f4:	681b      	ldr	r3, [r3, #0]
   b88f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b88f8:	9301      	str	r3, [sp, #4]
   b88fa:	bd08      	pop	{r3, pc}
   b88fc:	0003021c 	.word	0x0003021c

000b8900 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8900:	b508      	push	{r3, lr}
   b8902:	4b02      	ldr	r3, [pc, #8]	; (b890c <mktime+0xc>)
   b8904:	681b      	ldr	r3, [r3, #0]
   b8906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8908:	9301      	str	r3, [sp, #4]
   b890a:	bd08      	pop	{r3, pc}
   b890c:	0003021c 	.word	0x0003021c

000b8910 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8910:	2100      	movs	r1, #0
   b8912:	f7ff beab 	b.w	b866c <system_delay_ms>

000b8916 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8916:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8918:	6843      	ldr	r3, [r0, #4]
   b891a:	3b01      	subs	r3, #1
    {
   b891c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b891e:	6043      	str	r3, [r0, #4]
   b8920:	b963      	cbnz	r3, b893c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8922:	6803      	ldr	r3, [r0, #0]
   b8924:	689b      	ldr	r3, [r3, #8]
   b8926:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8928:	68a3      	ldr	r3, [r4, #8]
   b892a:	3b01      	subs	r3, #1
   b892c:	60a3      	str	r3, [r4, #8]
   b892e:	b92b      	cbnz	r3, b893c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8930:	6823      	ldr	r3, [r4, #0]
   b8932:	4620      	mov	r0, r4
   b8934:	68db      	ldr	r3, [r3, #12]
    }
   b8936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b893a:	4718      	bx	r3
    }
   b893c:	bd10      	pop	{r4, pc}

000b893e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b893e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8940:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8944:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8946:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b894a:	42ae      	cmp	r6, r5
   b894c:	d004      	beq.n	b8958 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b894e:	4628      	mov	r0, r5
   b8950:	f002 f800 	bl	ba954 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8954:	3510      	adds	r5, #16
   b8956:	e7f8      	b.n	b894a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8958:	6820      	ldr	r0, [r4, #0]
   b895a:	f7ff ff71 	bl	b8840 <free>
    AllocatorT::free(data_);
}
   b895e:	4620      	mov	r0, r4
   b8960:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8964 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8964:	4802      	ldr	r0, [pc, #8]	; (b8970 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8966:	2300      	movs	r3, #0
   b8968:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b896a:	f7ff bc2d 	b.w	b81c8 <os_mutex_recursive_create>
   b896e:	bf00      	nop
   b8970:	2003e610 	.word	0x2003e610

000b8974 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b8974:	2200      	movs	r2, #0
   b8976:	6840      	ldr	r0, [r0, #4]
   b8978:	4611      	mov	r1, r2
   b897a:	f7ff bf11 	b.w	b87a0 <network_ready>

000b897e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b897e:	2200      	movs	r2, #0
   b8980:	6840      	ldr	r0, [r0, #4]
   b8982:	4611      	mov	r1, r2
   b8984:	f7ff bf2c 	b.w	b87e0 <network_listening>

000b8988 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8988:	2200      	movs	r2, #0
   b898a:	6840      	ldr	r0, [r0, #4]
   b898c:	4611      	mov	r1, r2
   b898e:	f7ff bf37 	b.w	b8800 <network_get_listen_timeout>

000b8992 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8992:	6840      	ldr	r0, [r0, #4]
   b8994:	2200      	movs	r2, #0
   b8996:	f7ff bf2b 	b.w	b87f0 <network_set_listen_timeout>

000b899a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b899a:	6840      	ldr	r0, [r0, #4]
   b899c:	2200      	movs	r2, #0
   b899e:	f081 0101 	eor.w	r1, r1, #1
   b89a2:	f7ff bf15 	b.w	b87d0 <network_listen>

000b89a6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b89a6:	2300      	movs	r3, #0
   b89a8:	6840      	ldr	r0, [r0, #4]
   b89aa:	461a      	mov	r2, r3
   b89ac:	4619      	mov	r1, r3
   b89ae:	f7ff bf07 	b.w	b87c0 <network_off>

000b89b2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b89b2:	2300      	movs	r3, #0
   b89b4:	6840      	ldr	r0, [r0, #4]
   b89b6:	461a      	mov	r2, r3
   b89b8:	4619      	mov	r1, r3
   b89ba:	f7ff bef9 	b.w	b87b0 <network_on>

000b89be <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b89be:	2200      	movs	r2, #0
   b89c0:	6840      	ldr	r0, [r0, #4]
   b89c2:	4611      	mov	r1, r2
   b89c4:	f7ff bedc 	b.w	b8780 <network_connecting>

000b89c8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b89c8:	6840      	ldr	r0, [r0, #4]
   b89ca:	2200      	movs	r2, #0
   b89cc:	2102      	movs	r1, #2
   b89ce:	f7ff bedf 	b.w	b8790 <network_disconnect>

000b89d2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b89d2:	2300      	movs	r3, #0
   b89d4:	6840      	ldr	r0, [r0, #4]
   b89d6:	461a      	mov	r2, r3
   b89d8:	f7ff beca 	b.w	b8770 <network_connect>

000b89dc <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b89dc:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b89de:	4b13      	ldr	r3, [pc, #76]	; (b8a2c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b89e0:	6003      	str	r3, [r0, #0]
   b89e2:	2518      	movs	r5, #24
   b89e4:	3330      	adds	r3, #48	; 0x30
   b89e6:	b086      	sub	sp, #24
   b89e8:	460e      	mov	r6, r1
   b89ea:	6043      	str	r3, [r0, #4]
   b89ec:	462a      	mov	r2, r5
   b89ee:	2100      	movs	r1, #0
   b89f0:	4604      	mov	r4, r0
   b89f2:	3008      	adds	r0, #8
   b89f4:	f003 fae2 	bl	bbfbc <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b89f8:	2200      	movs	r2, #0
   b89fa:	6870      	ldr	r0, [r6, #4]
   b89fc:	4611      	mov	r1, r2
   b89fe:	f7ff fecf 	bl	b87a0 <network_ready>
   b8a02:	b178      	cbz	r0, b8a24 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b8a04:	2100      	movs	r1, #0
   b8a06:	462a      	mov	r2, r5
   b8a08:	4668      	mov	r0, sp
   b8a0a:	f003 fad7 	bl	bbfbc <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8a0e:	4669      	mov	r1, sp
   b8a10:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b8a12:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8a16:	f7ff fbcf 	bl	b81b8 <cellular_signal>
   b8a1a:	b918      	cbnz	r0, b8a24 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b8a1c:	4669      	mov	r1, sp
   b8a1e:	4620      	mov	r0, r4
   b8a20:	f000 f8b8 	bl	b8b94 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b8a24:	4620      	mov	r0, r4
   b8a26:	b006      	add	sp, #24
   b8a28:	bd70      	pop	{r4, r5, r6, pc}
   b8a2a:	bf00      	nop
   b8a2c:	000bd148 	.word	0x000bd148

000b8a30 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8a30:	4b08      	ldr	r3, [pc, #32]	; (b8a54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8a32:	b510      	push	{r4, lr}
   b8a34:	2428      	movs	r4, #40	; 0x28
   b8a36:	4622      	mov	r2, r4
   b8a38:	4618      	mov	r0, r3
   b8a3a:	2100      	movs	r1, #0
   b8a3c:	f003 fabe 	bl	bbfbc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8a40:	4b05      	ldr	r3, [pc, #20]	; (b8a58 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8a42:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8a48:	6042      	str	r2, [r0, #4]
   b8a4a:	2204      	movs	r2, #4
   b8a4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8a4e:	4a03      	ldr	r2, [pc, #12]	; (b8a5c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8a50:	601a      	str	r2, [r3, #0]
   b8a52:	bd10      	pop	{r4, pc}
   b8a54:	2003e61c 	.word	0x2003e61c
   b8a58:	2003e614 	.word	0x2003e614
   b8a5c:	000bd10c 	.word	0x000bd10c

000b8a60 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b8a60:	4770      	bx	lr

000b8a62 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b8a62:	7b00      	ldrb	r0, [r0, #12]
   b8a64:	4770      	bx	lr

000b8a66 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8a66:	7b03      	ldrb	r3, [r0, #12]
   b8a68:	b14b      	cbz	r3, b8a7e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b8a6a:	6903      	ldr	r3, [r0, #16]
   b8a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8a70:	d005      	beq.n	b8a7e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8a72:	6980      	ldr	r0, [r0, #24]
   b8a74:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b8a78:	bf18      	it	ne
   b8a7a:	2001      	movne	r0, #1
   b8a7c:	4770      	bx	lr
   b8a7e:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b8a80:	4770      	bx	lr

000b8a82 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b8a82:	6803      	ldr	r3, [r0, #0]
   b8a84:	6a1b      	ldr	r3, [r3, #32]
   b8a86:	4718      	bx	r3

000b8a88 <_ZNK14CellularSignal7printToER5Print>:
{
   b8a88:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b8a8a:	6803      	ldr	r3, [r0, #0]
{
   b8a8c:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b8a8e:	691b      	ldr	r3, [r3, #16]
{
   b8a90:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b8a92:	4798      	blx	r3
   b8a94:	2102      	movs	r1, #2
   b8a96:	4628      	mov	r0, r5
   b8a98:	f001 fe38 	bl	ba70c <_ZN5Print5printEfi>
    n += p.print(',');
   b8a9c:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b8a9e:	4604      	mov	r4, r0
    n += p.print(',');
   b8aa0:	4628      	mov	r0, r5
   b8aa2:	f001 fd3d 	bl	ba520 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b8aa6:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b8aa8:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b8aaa:	699b      	ldr	r3, [r3, #24]
   b8aac:	4630      	mov	r0, r6
   b8aae:	4798      	blx	r3
   b8ab0:	2102      	movs	r1, #2
   b8ab2:	4628      	mov	r0, r5
   b8ab4:	f001 fe2a 	bl	ba70c <_ZN5Print5printEfi>
}
   b8ab8:	4420      	add	r0, r4
   b8aba:	bd70      	pop	{r4, r5, r6, pc}

000b8abc <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b8abc:	f1a0 0004 	sub.w	r0, r0, #4
   b8ac0:	f7ff bfe2 	b.w	b8a88 <_ZNK14CellularSignal7printToER5Print>

000b8ac4 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b8ac4:	b510      	push	{r4, lr}
   b8ac6:	2120      	movs	r1, #32
   b8ac8:	4604      	mov	r4, r0
   b8aca:	f7fb fae8 	bl	b409e <_ZdlPvj>
   b8ace:	4620      	mov	r0, r4
   b8ad0:	bd10      	pop	{r4, pc}
	...

000b8ad4 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b8ad4:	7b03      	ldrb	r3, [r0, #12]
   b8ad6:	b17b      	cbz	r3, b8af8 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b8ad8:	6943      	ldr	r3, [r0, #20]
   b8ada:	2b00      	cmp	r3, #0
   b8adc:	db0c      	blt.n	b8af8 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b8ade:	ee07 3a90 	vmov	s15, r3
   b8ae2:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8b00 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b8ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8aea:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8aee:	eddf 7a05 	vldr	s15, [pc, #20]	; b8b04 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b8af2:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8af6:	4770      	bx	lr
    return -1.0f;
   b8af8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8afc:	4770      	bx	lr
   b8afe:	bf00      	nop
   b8b00:	477fff00 	.word	0x477fff00
   b8b04:	42c80000 	.word	0x42c80000

000b8b08 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b8b08:	7b03      	ldrb	r3, [r0, #12]
   b8b0a:	b163      	cbz	r3, b8b26 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b8b0c:	6903      	ldr	r3, [r0, #16]
   b8b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8b12:	d008      	beq.n	b8b26 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b8b14:	ee07 3a90 	vmov	s15, r3
   b8b18:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8b2c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b8b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b20:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b24:	4770      	bx	lr
    return 0.0f;
   b8b26:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8b30 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b8b2a:	4770      	bx	lr
   b8b2c:	42c80000 	.word	0x42c80000
   b8b30:	00000000 	.word	0x00000000

000b8b34 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b8b34:	7b03      	ldrb	r3, [r0, #12]
   b8b36:	b17b      	cbz	r3, b8b58 <_ZNK14CellularSignal10getQualityEv+0x24>
   b8b38:	69c3      	ldr	r3, [r0, #28]
   b8b3a:	2b00      	cmp	r3, #0
   b8b3c:	db0c      	blt.n	b8b58 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b8b3e:	ee07 3a90 	vmov	s15, r3
   b8b42:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8b60 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b8b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b4a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b4e:	eddf 7a05 	vldr	s15, [pc, #20]	; b8b64 <_ZNK14CellularSignal10getQualityEv+0x30>
   b8b52:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8b56:	4770      	bx	lr
    return -1.0f;
   b8b58:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8b5c:	4770      	bx	lr
   b8b5e:	bf00      	nop
   b8b60:	477fff00 	.word	0x477fff00
   b8b64:	42c80000 	.word	0x42c80000

000b8b68 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b8b68:	7b03      	ldrb	r3, [r0, #12]
   b8b6a:	b163      	cbz	r3, b8b86 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b8b6c:	6983      	ldr	r3, [r0, #24]
   b8b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8b72:	d008      	beq.n	b8b86 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b8b74:	ee07 3a90 	vmov	s15, r3
   b8b78:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8b8c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b8b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b80:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b84:	4770      	bx	lr
    return 0.0f;
   b8b86:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8b90 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b8b8a:	4770      	bx	lr
   b8b8c:	42c80000 	.word	0x42c80000
   b8b90:	00000000 	.word	0x00000000

000b8b94 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b8b94:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b8b96:	460d      	mov	r5, r1
   b8b98:	f100 0408 	add.w	r4, r0, #8
   b8b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ba0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8ba4:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b8ba8:	2001      	movs	r0, #1
   b8baa:	bd30      	pop	{r4, r5, pc}

000b8bac <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8bac:	2200      	movs	r2, #0
   b8bae:	6840      	ldr	r0, [r0, #4]
   b8bb0:	4611      	mov	r1, r2
   b8bb2:	f7ff be15 	b.w	b87e0 <network_listening>

000b8bb6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8bb6:	2200      	movs	r2, #0
   b8bb8:	6840      	ldr	r0, [r0, #4]
   b8bba:	4611      	mov	r1, r2
   b8bbc:	f7ff be20 	b.w	b8800 <network_get_listen_timeout>

000b8bc0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8bc0:	6840      	ldr	r0, [r0, #4]
   b8bc2:	2200      	movs	r2, #0
   b8bc4:	f7ff be14 	b.w	b87f0 <network_set_listen_timeout>

000b8bc8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8bc8:	6840      	ldr	r0, [r0, #4]
   b8bca:	2200      	movs	r2, #0
   b8bcc:	f081 0101 	eor.w	r1, r1, #1
   b8bd0:	f7ff bdfe 	b.w	b87d0 <network_listen>

000b8bd4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8bd4:	2300      	movs	r3, #0
   b8bd6:	6840      	ldr	r0, [r0, #4]
   b8bd8:	461a      	mov	r2, r3
   b8bda:	4619      	mov	r1, r3
   b8bdc:	f7ff bdf0 	b.w	b87c0 <network_off>

000b8be0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8be0:	2300      	movs	r3, #0
   b8be2:	6840      	ldr	r0, [r0, #4]
   b8be4:	461a      	mov	r2, r3
   b8be6:	4619      	mov	r1, r3
   b8be8:	f7ff bde2 	b.w	b87b0 <network_on>

000b8bec <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8bec:	2200      	movs	r2, #0
   b8bee:	6840      	ldr	r0, [r0, #4]
   b8bf0:	4611      	mov	r1, r2
   b8bf2:	f7ff bdd5 	b.w	b87a0 <network_ready>

000b8bf6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8bf6:	2200      	movs	r2, #0
   b8bf8:	6840      	ldr	r0, [r0, #4]
   b8bfa:	4611      	mov	r1, r2
   b8bfc:	f7ff bdc0 	b.w	b8780 <network_connecting>

000b8c00 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8c00:	6840      	ldr	r0, [r0, #4]
   b8c02:	2200      	movs	r2, #0
   b8c04:	2102      	movs	r1, #2
   b8c06:	f7ff bdc3 	b.w	b8790 <network_disconnect>

000b8c0a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8c0a:	2300      	movs	r3, #0
   b8c0c:	6840      	ldr	r0, [r0, #4]
   b8c0e:	461a      	mov	r2, r3
   b8c10:	f7ff bdae 	b.w	b8770 <network_connect>

000b8c14 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b8c14:	4b02      	ldr	r3, [pc, #8]	; (b8c20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8c16:	2203      	movs	r2, #3
   b8c18:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8c1a:	4a02      	ldr	r2, [pc, #8]	; (b8c24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8c1c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8c1e:	4770      	bx	lr
   b8c20:	2003e644 	.word	0x2003e644
   b8c24:	000bd184 	.word	0x000bd184

000b8c28 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b8c28:	6800      	ldr	r0, [r0, #0]
   b8c2a:	f000 b8e7 	b.w	b8dfc <_ZN7TwoWire4lockEv>

000b8c2e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b8c2e:	b510      	push	{r4, lr}
   b8c30:	4604      	mov	r4, r0
      lock_(_lock) {
   b8c32:	6001      	str	r1, [r0, #0]
   b8c34:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b8c36:	b10a      	cbz	r2, b8c3c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b8c38:	f7ff fff6 	bl	b8c28 <_ZN9FuelGauge4lockEv>
}
   b8c3c:	4620      	mov	r0, r4
   b8c3e:	bd10      	pop	{r4, pc}

000b8c40 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b8c40:	b513      	push	{r0, r1, r4, lr}
   b8c42:	4604      	mov	r4, r0
   b8c44:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b8c46:	f002 fc1f 	bl	bb488 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8c4a:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b8c4c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b8c4e:	4620      	mov	r0, r4
   b8c50:	f7ff ffed 	bl	b8c2e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8c54:	4620      	mov	r0, r4
   b8c56:	b002      	add	sp, #8
   b8c58:	bd10      	pop	{r4, pc}

000b8c5a <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b8c5a:	6800      	ldr	r0, [r0, #0]
   b8c5c:	f000 b8d7 	b.w	b8e0e <_ZN7TwoWire6unlockEv>

000b8c60 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b8c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8c64:	4604      	mov	r4, r0
   b8c66:	461d      	mov	r5, r3
   b8c68:	460f      	mov	r7, r1
   b8c6a:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b8c6c:	f7ff ffdc 	bl	b8c28 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8c70:	2236      	movs	r2, #54	; 0x36
   b8c72:	2300      	movs	r3, #0
   b8c74:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b8c78:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b8c7a:	f04f 0801 	mov.w	r8, #1
   b8c7e:	230a      	movs	r3, #10
   b8c80:	4669      	mov	r1, sp
   b8c82:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8c86:	f000 f89d 	bl	b8dc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b8c8a:	6820      	ldr	r0, [r4, #0]
   b8c8c:	6803      	ldr	r3, [r0, #0]
   b8c8e:	4639      	mov	r1, r7
   b8c90:	689b      	ldr	r3, [r3, #8]
   b8c92:	4798      	blx	r3
    i2c_.write(MSB);
   b8c94:	6820      	ldr	r0, [r4, #0]
   b8c96:	6803      	ldr	r3, [r0, #0]
   b8c98:	4631      	mov	r1, r6
   b8c9a:	689b      	ldr	r3, [r3, #8]
   b8c9c:	4798      	blx	r3
    i2c_.write(LSB);
   b8c9e:	6820      	ldr	r0, [r4, #0]
   b8ca0:	6803      	ldr	r3, [r0, #0]
   b8ca2:	4629      	mov	r1, r5
   b8ca4:	689b      	ldr	r3, [r3, #8]
   b8ca6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b8ca8:	4641      	mov	r1, r8
   b8caa:	6820      	ldr	r0, [r4, #0]
   b8cac:	f000 f8a2 	bl	b8df4 <_ZN7TwoWire15endTransmissionEh>
   b8cb0:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b8cb2:	4620      	mov	r0, r4
   b8cb4:	bf0c      	ite	eq
   b8cb6:	2500      	moveq	r5, #0
   b8cb8:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b8cbc:	f7ff ffcd 	bl	b8c5a <_ZN9FuelGauge6unlockEv>
}
   b8cc0:	4628      	mov	r0, r5
   b8cc2:	b004      	add	sp, #16
   b8cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8cc8 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b8cc8:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b8cca:	2240      	movs	r2, #64	; 0x40
   b8ccc:	2300      	movs	r3, #0
   b8cce:	2106      	movs	r1, #6
   b8cd0:	f7ff ffc6 	bl	b8c60 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b8cd4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8cd8:	bd08      	pop	{r3, pc}

000b8cda <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8cda:	4770      	bx	lr

000b8cdc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8cde:	4606      	mov	r6, r0
   b8ce0:	4615      	mov	r5, r2
   b8ce2:	460c      	mov	r4, r1
   b8ce4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8ce6:	42bc      	cmp	r4, r7
   b8ce8:	d006      	beq.n	b8cf8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8cea:	6833      	ldr	r3, [r6, #0]
   b8cec:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8cf0:	689b      	ldr	r3, [r3, #8]
   b8cf2:	4630      	mov	r0, r6
   b8cf4:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8cf6:	e7f6      	b.n	b8ce6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8cf8:	4628      	mov	r0, r5
   b8cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8cfc <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8cfc:	7c00      	ldrb	r0, [r0, #16]
   b8cfe:	2200      	movs	r2, #0
   b8d00:	f7ff bb2a 	b.w	b8358 <hal_i2c_write>

000b8d04 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8d04:	7c00      	ldrb	r0, [r0, #16]
   b8d06:	2100      	movs	r1, #0
   b8d08:	f7ff bb2e 	b.w	b8368 <hal_i2c_available>

000b8d0c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8d0c:	7c00      	ldrb	r0, [r0, #16]
   b8d0e:	2100      	movs	r1, #0
   b8d10:	f7ff bb32 	b.w	b8378 <hal_i2c_read>

000b8d14 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8d14:	7c00      	ldrb	r0, [r0, #16]
   b8d16:	2100      	movs	r1, #0
   b8d18:	f7ff bb36 	b.w	b8388 <hal_i2c_peek>

000b8d1c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8d1c:	7c00      	ldrb	r0, [r0, #16]
   b8d1e:	2100      	movs	r1, #0
   b8d20:	f7ff bb3a 	b.w	b8398 <hal_i2c_flush>

000b8d24 <_ZN7TwoWireD0Ev>:
   b8d24:	b510      	push	{r4, lr}
   b8d26:	2114      	movs	r1, #20
   b8d28:	4604      	mov	r4, r0
   b8d2a:	f7fb f9b8 	bl	b409e <_ZdlPvj>
   b8d2e:	4620      	mov	r0, r4
   b8d30:	bd10      	pop	{r4, pc}
	...

000b8d34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8d34:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d3a:	4604      	mov	r4, r0
   b8d3c:	4608      	mov	r0, r1
   b8d3e:	2100      	movs	r1, #0
   b8d40:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8d44:	4b03      	ldr	r3, [pc, #12]	; (b8d54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8d46:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8d48:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8d4a:	4611      	mov	r1, r2
   b8d4c:	f7ff fb34 	bl	b83b8 <hal_i2c_init>
}
   b8d50:	4620      	mov	r0, r4
   b8d52:	bd10      	pop	{r4, pc}
   b8d54:	000bd1c0 	.word	0x000bd1c0

000b8d58 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8d58:	2300      	movs	r3, #0
   b8d5a:	7c00      	ldrb	r0, [r0, #16]
   b8d5c:	461a      	mov	r2, r3
   b8d5e:	4619      	mov	r1, r3
   b8d60:	f7ff bae2 	b.w	b8328 <hal_i2c_begin>

000b8d64 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8d64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8d66:	2200      	movs	r2, #0
   b8d68:	2314      	movs	r3, #20
   b8d6a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8d6e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8d72:	780b      	ldrb	r3, [r1, #0]
   b8d74:	f88d 3008 	strb.w	r3, [sp, #8]
   b8d78:	684b      	ldr	r3, [r1, #4]
   b8d7a:	9303      	str	r3, [sp, #12]
   b8d7c:	68cb      	ldr	r3, [r1, #12]
   b8d7e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8d80:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8d82:	7a0b      	ldrb	r3, [r1, #8]
   b8d84:	9305      	str	r3, [sp, #20]
   b8d86:	a901      	add	r1, sp, #4
   b8d88:	f7ff fb2e 	bl	b83e8 <hal_i2c_request_ex>
}
   b8d8c:	b007      	add	sp, #28
   b8d8e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8d92 <_ZN7TwoWire11requestFromEhjh>:
{
   b8d92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8d94:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8d96:	f88d 1000 	strb.w	r1, [sp]
   b8d9a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8d9e:	9103      	str	r1, [sp, #12]
   b8da0:	bf18      	it	ne
   b8da2:	2301      	movne	r3, #1
   b8da4:	4669      	mov	r1, sp
    size_ = size;
   b8da6:	9201      	str	r2, [sp, #4]
   b8da8:	f88d 3008 	strb.w	r3, [sp, #8]
   b8dac:	f7ff ffda 	bl	b8d64 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8db0:	b005      	add	sp, #20
   b8db2:	f85d fb04 	ldr.w	pc, [sp], #4

000b8db6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8db6:	7c00      	ldrb	r0, [r0, #16]
   b8db8:	2200      	movs	r2, #0
   b8dba:	f7ff babd 	b.w	b8338 <hal_i2c_begin_transmission>

000b8dbe <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8dbe:	b2c9      	uxtb	r1, r1
   b8dc0:	f7ff bff9 	b.w	b8db6 <_ZN7TwoWire17beginTransmissionEh>

000b8dc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b8dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8dc6:	2300      	movs	r3, #0
   b8dc8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b8dcc:	684a      	ldr	r2, [r1, #4]
   b8dce:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b8dd0:	2314      	movs	r3, #20
    };
   b8dd2:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b8dd4:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b8dd8:	780b      	ldrb	r3, [r1, #0]
    };
   b8dda:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8ddc:	7a0a      	ldrb	r2, [r1, #8]
   b8dde:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b8de0:	7c00      	ldrb	r0, [r0, #16]
    };
   b8de2:	f88d 3008 	strb.w	r3, [sp, #8]
   b8de6:	aa01      	add	r2, sp, #4
   b8de8:	4619      	mov	r1, r3
   b8dea:	f7ff faa5 	bl	b8338 <hal_i2c_begin_transmission>
}
   b8dee:	b007      	add	sp, #28
   b8df0:	f85d fb04 	ldr.w	pc, [sp], #4

000b8df4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8df4:	7c00      	ldrb	r0, [r0, #16]
   b8df6:	2200      	movs	r2, #0
   b8df8:	f7ff baa6 	b.w	b8348 <hal_i2c_end_transmission>

000b8dfc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b8dfc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b8dfe:	2100      	movs	r1, #0
   b8e00:	7c00      	ldrb	r0, [r0, #16]
   b8e02:	f7ff fae1 	bl	b83c8 <hal_i2c_lock>
}
   b8e06:	fab0 f080 	clz	r0, r0
   b8e0a:	0940      	lsrs	r0, r0, #5
   b8e0c:	bd08      	pop	{r3, pc}

000b8e0e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b8e0e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b8e10:	2100      	movs	r1, #0
   b8e12:	7c00      	ldrb	r0, [r0, #16]
   b8e14:	f7ff fae0 	bl	b83d8 <hal_i2c_unlock>
}
   b8e18:	fab0 f080 	clz	r0, r0
   b8e1c:	0940      	lsrs	r0, r0, #5
   b8e1e:	bd08      	pop	{r3, pc}

000b8e20 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8e20:	4700      	bx	r0
	...

000b8e24 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8e24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b8e28:	2400      	movs	r4, #0
{
   b8e2a:	461d      	mov	r5, r3
   b8e2c:	460f      	mov	r7, r1
   b8e2e:	4690      	mov	r8, r2
   b8e30:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b8e32:	f7ff fa69 	bl	b8308 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b8e36:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8e38:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b8e3c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8e40:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b8e44:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8e48:	bfa2      	ittt	ge
   b8e4a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b8e4e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b8e52:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8e54:	4907      	ldr	r1, [pc, #28]	; (b8e74 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8e56:	9400      	str	r4, [sp, #0]
   b8e58:	4643      	mov	r3, r8
   b8e5a:	463a      	mov	r2, r7
   b8e5c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8e5e:	bfa8      	it	ge
   b8e60:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8e64:	f7ff fa48 	bl	b82f8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b8e68:	fab0 f080 	clz	r0, r0
   b8e6c:	0940      	lsrs	r0, r0, #5
   b8e6e:	b004      	add	sp, #16
   b8e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8e74:	000b8e21 	.word	0x000b8e21

000b8e78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8e78:	4770      	bx	lr

000b8e7a <_ZN9IPAddressD0Ev>:
   b8e7a:	b510      	push	{r4, lr}
   b8e7c:	2118      	movs	r1, #24
   b8e7e:	4604      	mov	r4, r0
   b8e80:	f7fb f90d 	bl	b409e <_ZdlPvj>
   b8e84:	4620      	mov	r0, r4
   b8e86:	bd10      	pop	{r4, pc}

000b8e88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8e88:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8e8a:	7d03      	ldrb	r3, [r0, #20]
   b8e8c:	2b06      	cmp	r3, #6
{
   b8e8e:	b08d      	sub	sp, #52	; 0x34
   b8e90:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8e92:	f100 0704 	add.w	r7, r0, #4
   b8e96:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8e9a:	d012      	beq.n	b8ec2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8e9c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8ea0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8ea4:	220a      	movs	r2, #10
   b8ea6:	4630      	mov	r0, r6
   b8ea8:	f001 fb49 	bl	ba53e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8eac:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8eae:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8eb0:	d019      	beq.n	b8ee6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8eb2:	2c00      	cmp	r4, #0
   b8eb4:	d0f4      	beq.n	b8ea0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8eb6:	212e      	movs	r1, #46	; 0x2e
   b8eb8:	4630      	mov	r0, r6
   b8eba:	f001 fb31 	bl	ba520 <_ZN5Print5printEc>
   b8ebe:	4404      	add	r4, r0
   b8ec0:	e7ee      	b.n	b8ea0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8ec2:	232f      	movs	r3, #47	; 0x2f
   b8ec4:	466a      	mov	r2, sp
   b8ec6:	4639      	mov	r1, r7
   b8ec8:	200a      	movs	r0, #10
		buf[0] = 0;
   b8eca:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8ece:	f7ff fa93 	bl	b83f8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8ed2:	4668      	mov	r0, sp
   b8ed4:	f003 f90f 	bl	bc0f6 <strlen>
   b8ed8:	6833      	ldr	r3, [r6, #0]
   b8eda:	4602      	mov	r2, r0
   b8edc:	68db      	ldr	r3, [r3, #12]
   b8ede:	4669      	mov	r1, sp
   b8ee0:	4630      	mov	r0, r6
   b8ee2:	4798      	blx	r3
   b8ee4:	4604      	mov	r4, r0
    }
    return n;
}
   b8ee6:	4620      	mov	r0, r4
   b8ee8:	b00d      	add	sp, #52	; 0x34
   b8eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8eec <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8eec:	b510      	push	{r4, lr}
   b8eee:	4b05      	ldr	r3, [pc, #20]	; (b8f04 <_ZN9IPAddressC1Ev+0x18>)
   b8ef0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8ef2:	2211      	movs	r2, #17
   b8ef4:	f840 3b04 	str.w	r3, [r0], #4
   b8ef8:	2100      	movs	r1, #0
   b8efa:	f003 f85f 	bl	bbfbc <memset>
}
   b8efe:	4620      	mov	r0, r4
   b8f00:	bd10      	pop	{r4, pc}
   b8f02:	bf00      	nop
   b8f04:	000bd1e8 	.word	0x000bd1e8

000b8f08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8f08:	4603      	mov	r3, r0
   b8f0a:	4a07      	ldr	r2, [pc, #28]	; (b8f28 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8f0c:	b510      	push	{r4, lr}
   b8f0e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8f12:	f101 0210 	add.w	r2, r1, #16
   b8f16:	f851 4b04 	ldr.w	r4, [r1], #4
   b8f1a:	f843 4b04 	str.w	r4, [r3], #4
   b8f1e:	4291      	cmp	r1, r2
   b8f20:	d1f9      	bne.n	b8f16 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8f22:	780a      	ldrb	r2, [r1, #0]
   b8f24:	701a      	strb	r2, [r3, #0]
}
   b8f26:	bd10      	pop	{r4, pc}
   b8f28:	000bd1e8 	.word	0x000bd1e8

000b8f2c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8f2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8f2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8f32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8f36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8f3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8f3e:	2304      	movs	r3, #4
   b8f40:	6041      	str	r1, [r0, #4]
   b8f42:	7503      	strb	r3, [r0, #20]
}
   b8f44:	bd10      	pop	{r4, pc}
	...

000b8f48 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8f48:	b507      	push	{r0, r1, r2, lr}
   b8f4a:	4b06      	ldr	r3, [pc, #24]	; (b8f64 <_ZN9IPAddressC1EPKh+0x1c>)
   b8f4c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8f4e:	78cb      	ldrb	r3, [r1, #3]
   b8f50:	9300      	str	r3, [sp, #0]
   b8f52:	788b      	ldrb	r3, [r1, #2]
   b8f54:	784a      	ldrb	r2, [r1, #1]
   b8f56:	7809      	ldrb	r1, [r1, #0]
   b8f58:	f7ff ffe8 	bl	b8f2c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8f5c:	b003      	add	sp, #12
   b8f5e:	f85d fb04 	ldr.w	pc, [sp], #4
   b8f62:	bf00      	nop
   b8f64:	000bd1e8 	.word	0x000bd1e8

000b8f68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b8f68:	f100 0310 	add.w	r3, r0, #16
   b8f6c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b8f6e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b8f72:	2901      	cmp	r1, #1
   b8f74:	4618      	mov	r0, r3
   b8f76:	d108      	bne.n	b8f8a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b8f78:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b8f7c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b8f80:	3a01      	subs	r2, #1
   b8f82:	f103 0310 	add.w	r3, r3, #16
   b8f86:	d1f2      	bne.n	b8f6e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b8f88:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b8f8a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b8f8c:	bf04      	itt	eq
   b8f8e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b8f92:	1852      	addeq	r2, r2, r1
   b8f94:	e7f4      	b.n	b8f80 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b8f96 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b8f96:	b40e      	push	{r1, r2, r3}
   b8f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8f9a:	b088      	sub	sp, #32
   b8f9c:	af00      	add	r7, sp, #0
   b8f9e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fa2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8fa4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fa8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8faa:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fac:	462b      	mov	r3, r5
   b8fae:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b8fb0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fb2:	f7ff fc65 	bl	b8880 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b8fb6:	280f      	cmp	r0, #15
   b8fb8:	687a      	ldr	r2, [r7, #4]
   b8fba:	d91a      	bls.n	b8ff2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b8fbc:	f100 0308 	add.w	r3, r0, #8
   b8fc0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b8fc4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b8fc6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fca:	1c41      	adds	r1, r0, #1
   b8fcc:	462b      	mov	r3, r5
   b8fce:	4668      	mov	r0, sp
        va_start(args, fmt);
   b8fd0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fd2:	f7ff fc55 	bl	b8880 <vsnprintf>
        if (n > 0) {
   b8fd6:	1e02      	subs	r2, r0, #0
   b8fd8:	dd04      	ble.n	b8fe4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b8fda:	6823      	ldr	r3, [r4, #0]
   b8fdc:	4669      	mov	r1, sp
   b8fde:	689b      	ldr	r3, [r3, #8]
   b8fe0:	4620      	mov	r0, r4
   b8fe2:	4798      	blx	r3
   b8fe4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b8fe6:	3720      	adds	r7, #32
   b8fe8:	46bd      	mov	sp, r7
   b8fea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8fee:	b003      	add	sp, #12
   b8ff0:	4770      	bx	lr
    } else if (n > 0) {
   b8ff2:	2800      	cmp	r0, #0
   b8ff4:	d0f7      	beq.n	b8fe6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b8ff6:	6823      	ldr	r3, [r4, #0]
   b8ff8:	4602      	mov	r2, r0
   b8ffa:	689b      	ldr	r3, [r3, #8]
   b8ffc:	f107 0110 	add.w	r1, r7, #16
   b9000:	4620      	mov	r0, r4
   b9002:	4798      	blx	r3
}
   b9004:	e7ef      	b.n	b8fe6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b9006 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9006:	b538      	push	{r3, r4, r5, lr}
   b9008:	680b      	ldr	r3, [r1, #0]
   b900a:	6003      	str	r3, [r0, #0]
   b900c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b900e:	6843      	ldr	r3, [r0, #4]
   b9010:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9012:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b9014:	d008      	beq.n	b9028 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b9016:	b115      	cbz	r5, b901e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b9018:	686b      	ldr	r3, [r5, #4]
   b901a:	3301      	adds	r3, #1
   b901c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b901e:	6860      	ldr	r0, [r4, #4]
   b9020:	b108      	cbz	r0, b9026 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b9022:	f7ff fc78 	bl	b8916 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9026:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9028:	bd38      	pop	{r3, r4, r5, pc}

000b902a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b902a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b902c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b902e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9032:	689b      	ldr	r3, [r3, #8]
   b9034:	2201      	movs	r2, #1
   b9036:	f10d 0107 	add.w	r1, sp, #7
   b903a:	4798      	blx	r3
}
   b903c:	b003      	add	sp, #12
   b903e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9042 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9042:	460b      	mov	r3, r1
   b9044:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b9046:	2200      	movs	r2, #0
   b9048:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b904a:	e9c0 2200 	strd	r2, r2, [r0]
   b904e:	4604      	mov	r4, r0
        t_ = t;
   b9050:	6083      	str	r3, [r0, #8]
    if (t) {
   b9052:	b90b      	cbnz	r3, b9058 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b9054:	4620      	mov	r0, r4
   b9056:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b9058:	f7ff ffd5 	bl	b9006 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b905c:	e7fa      	b.n	b9054 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b905e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b905e:	6883      	ldr	r3, [r0, #8]
   b9060:	b1eb      	cbz	r3, b909e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b9062:	781a      	ldrb	r2, [r3, #0]
   b9064:	2a03      	cmp	r2, #3
   b9066:	d81a      	bhi.n	b909e <_ZNK5spark9JSONValue4typeEv+0x40>
   b9068:	e8df f002 	tbb	[pc, r2]
   b906c:	1b021704 	.word	0x1b021704
   b9070:	2005      	movs	r0, #5
   b9072:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b9074:	6802      	ldr	r2, [r0, #0]
   b9076:	685b      	ldr	r3, [r3, #4]
   b9078:	6852      	ldr	r2, [r2, #4]
   b907a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b907c:	282d      	cmp	r0, #45	; 0x2d
   b907e:	d012      	beq.n	b90a6 <_ZNK5spark9JSONValue4typeEv+0x48>
   b9080:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9084:	2b09      	cmp	r3, #9
   b9086:	d90e      	bls.n	b90a6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b9088:	2874      	cmp	r0, #116	; 0x74
   b908a:	d00e      	beq.n	b90aa <_ZNK5spark9JSONValue4typeEv+0x4c>
   b908c:	2866      	cmp	r0, #102	; 0x66
   b908e:	d00c      	beq.n	b90aa <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b9090:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b9094:	4258      	negs	r0, r3
   b9096:	4158      	adcs	r0, r3
   b9098:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b909a:	2006      	movs	r0, #6
   b909c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b909e:	2000      	movs	r0, #0
   b90a0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b90a2:	2004      	movs	r0, #4
   b90a4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b90a6:	2003      	movs	r0, #3
   b90a8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b90aa:	2002      	movs	r0, #2
}
   b90ac:	4770      	bx	lr

000b90ae <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b90ae:	b510      	push	{r4, lr}
   b90b0:	4604      	mov	r4, r0
    switch (type()) {
   b90b2:	f7ff ffd4 	bl	b905e <_ZNK5spark9JSONValue4typeEv>
   b90b6:	2802      	cmp	r0, #2
   b90b8:	d00e      	beq.n	b90d8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b90ba:	1ec3      	subs	r3, r0, #3
   b90bc:	b2db      	uxtb	r3, r3
   b90be:	2b01      	cmp	r3, #1
   b90c0:	d814      	bhi.n	b90ec <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b90c2:	6822      	ldr	r2, [r4, #0]
   b90c4:	68a3      	ldr	r3, [r4, #8]
   b90c6:	6850      	ldr	r0, [r2, #4]
   b90c8:	685b      	ldr	r3, [r3, #4]
}
   b90ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b90ce:	220a      	movs	r2, #10
   b90d0:	2100      	movs	r1, #0
   b90d2:	4418      	add	r0, r3
   b90d4:	f003 b8d4 	b.w	bc280 <strtol>
        const char* const s = d_->json + t_->start;
   b90d8:	6822      	ldr	r2, [r4, #0]
   b90da:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b90dc:	6852      	ldr	r2, [r2, #4]
   b90de:	685b      	ldr	r3, [r3, #4]
   b90e0:	5cd0      	ldrb	r0, [r2, r3]
   b90e2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b90e6:	4258      	negs	r0, r3
   b90e8:	4158      	adcs	r0, r3
}
   b90ea:	bd10      	pop	{r4, pc}
    switch (type()) {
   b90ec:	2000      	movs	r0, #0
   b90ee:	e7fc      	b.n	b90ea <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b90f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b90f0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b90f2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b90f4:	e9c0 3300 	strd	r3, r3, [r0]
   b90f8:	4604      	mov	r4, r0
        n_(0) {
   b90fa:	480e      	ldr	r0, [pc, #56]	; (b9134 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b90fc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9100:	b1a9      	cbz	r1, b912e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b9102:	780b      	ldrb	r3, [r1, #0]
   b9104:	2b03      	cmp	r3, #3
   b9106:	d006      	beq.n	b9116 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9108:	b98b      	cbnz	r3, b912e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b910a:	6813      	ldr	r3, [r2, #0]
   b910c:	6858      	ldr	r0, [r3, #4]
   b910e:	684b      	ldr	r3, [r1, #4]
   b9110:	5cc3      	ldrb	r3, [r0, r3]
   b9112:	2b6e      	cmp	r3, #110	; 0x6e
   b9114:	d007      	beq.n	b9126 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b9116:	6813      	ldr	r3, [r2, #0]
   b9118:	684d      	ldr	r5, [r1, #4]
   b911a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b911c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b911e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b9120:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b9122:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b9124:	60e3      	str	r3, [r4, #12]
   b9126:	4611      	mov	r1, r2
   b9128:	4620      	mov	r0, r4
   b912a:	f7ff ff6c 	bl	b9006 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b912e:	4620      	mov	r0, r4
   b9130:	bd38      	pop	{r3, r4, r5, pc}
   b9132:	bf00      	nop
   b9134:	000bd251 	.word	0x000bd251

000b9138 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9138:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b913a:	2500      	movs	r5, #0
   b913c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b913e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b9142:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b9146:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b914a:	4604      	mov	r4, r0
   b914c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b914e:	b14b      	cbz	r3, b9164 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b9150:	781a      	ldrb	r2, [r3, #0]
   b9152:	2a01      	cmp	r2, #1
   b9154:	d106      	bne.n	b9164 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b9156:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b915a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b915c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b915e:	6143      	str	r3, [r0, #20]
   b9160:	f7ff ff51 	bl	b9006 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9164:	4620      	mov	r0, r4
   b9166:	bd38      	pop	{r3, r4, r5, pc}

000b9168 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b9168:	b510      	push	{r4, lr}
    if (!n_) {
   b916a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b916c:	4604      	mov	r4, r0
    if (!n_) {
   b916e:	b163      	cbz	r3, b918a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9170:	6880      	ldr	r0, [r0, #8]
   b9172:	60e0      	str	r0, [r4, #12]
    --n_;
   b9174:	3b01      	subs	r3, #1
    ++t_;
   b9176:	3010      	adds	r0, #16
   b9178:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b917a:	6120      	str	r0, [r4, #16]
    --n_;
   b917c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b917e:	b113      	cbz	r3, b9186 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9180:	f7ff fef2 	bl	b8f68 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b9184:	60a0      	str	r0, [r4, #8]
    return true;
   b9186:	2001      	movs	r0, #1
   b9188:	e000      	b.n	b918c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b918a:	4618      	mov	r0, r3
}
   b918c:	bd10      	pop	{r4, pc}

000b918e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b918e:	b510      	push	{r4, lr}
    write('}');
   b9190:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9192:	4604      	mov	r4, r0
    write('}');
   b9194:	f7ff ff49 	bl	b902a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9198:	2301      	movs	r3, #1
   b919a:	7123      	strb	r3, [r4, #4]
}
   b919c:	4620      	mov	r0, r4
   b919e:	bd10      	pop	{r4, pc}

000b91a0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b91a0:	b508      	push	{r3, lr}
    switch (state_) {
   b91a2:	7903      	ldrb	r3, [r0, #4]
   b91a4:	2b01      	cmp	r3, #1
   b91a6:	d002      	beq.n	b91ae <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b91a8:	2b02      	cmp	r3, #2
   b91aa:	d004      	beq.n	b91b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b91ac:	bd08      	pop	{r3, pc}
        write(',');
   b91ae:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b91b0:	f7ff ff3b 	bl	b902a <_ZN5spark10JSONWriter5writeEc>
}
   b91b4:	e7fa      	b.n	b91ac <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b91b6:	213a      	movs	r1, #58	; 0x3a
   b91b8:	e7fa      	b.n	b91b0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b91ba <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b91ba:	b510      	push	{r4, lr}
   b91bc:	4604      	mov	r4, r0
    writeSeparator();
   b91be:	f7ff ffef 	bl	b91a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b91c2:	4620      	mov	r0, r4
   b91c4:	217b      	movs	r1, #123	; 0x7b
   b91c6:	f7ff ff30 	bl	b902a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b91ca:	2300      	movs	r3, #0
   b91cc:	7123      	strb	r3, [r4, #4]
}
   b91ce:	4620      	mov	r0, r4
   b91d0:	bd10      	pop	{r4, pc}
	...

000b91d4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b91d4:	b513      	push	{r0, r1, r4, lr}
   b91d6:	4604      	mov	r4, r0
   b91d8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b91da:	f7ff ffe1 	bl	b91a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b91de:	6823      	ldr	r3, [r4, #0]
   b91e0:	9a01      	ldr	r2, [sp, #4]
   b91e2:	68db      	ldr	r3, [r3, #12]
   b91e4:	4903      	ldr	r1, [pc, #12]	; (b91f4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b91e6:	4620      	mov	r0, r4
   b91e8:	4798      	blx	r3
    state_ = NEXT;
   b91ea:	2301      	movs	r3, #1
}
   b91ec:	4620      	mov	r0, r4
    state_ = NEXT;
   b91ee:	7123      	strb	r3, [r4, #4]
}
   b91f0:	b002      	add	sp, #8
   b91f2:	bd10      	pop	{r4, pc}
   b91f4:	000bcbdf 	.word	0x000bcbdf

000b91f8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b91f8:	b513      	push	{r0, r1, r4, lr}
   b91fa:	4604      	mov	r4, r0
   b91fc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b91fe:	f7ff ffcf 	bl	b91a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b9202:	6823      	ldr	r3, [r4, #0]
   b9204:	9a01      	ldr	r2, [sp, #4]
   b9206:	68db      	ldr	r3, [r3, #12]
   b9208:	4903      	ldr	r1, [pc, #12]	; (b9218 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b920a:	4620      	mov	r0, r4
   b920c:	4798      	blx	r3
    state_ = NEXT;
   b920e:	2301      	movs	r3, #1
}
   b9210:	4620      	mov	r0, r4
    state_ = NEXT;
   b9212:	7123      	strb	r3, [r4, #4]
}
   b9214:	b002      	add	sp, #8
   b9216:	bd10      	pop	{r4, pc}
   b9218:	000bcb6a 	.word	0x000bcb6a

000b921c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9220:	460d      	mov	r5, r1
    write('"');
   b9222:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9224:	4690      	mov	r8, r2
   b9226:	4604      	mov	r4, r0
    write('"');
   b9228:	f7ff feff 	bl	b902a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b922c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b92d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b9230:	44a8      	add	r8, r5
    const char *s = str;
   b9232:	462f      	mov	r7, r5
    while (s != end) {
   b9234:	4547      	cmp	r7, r8
   b9236:	46ba      	mov	sl, r7
   b9238:	d03d      	beq.n	b92b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b923a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b923e:	2e22      	cmp	r6, #34	; 0x22
   b9240:	d006      	beq.n	b9250 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9242:	2e5c      	cmp	r6, #92	; 0x5c
   b9244:	d004      	beq.n	b9250 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9246:	4630      	mov	r0, r6
   b9248:	f002 fe88 	bl	bbf5c <isprint>
   b924c:	2800      	cmp	r0, #0
   b924e:	d1f1      	bne.n	b9234 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b9250:	6823      	ldr	r3, [r4, #0]
   b9252:	ebaa 0205 	sub.w	r2, sl, r5
   b9256:	689b      	ldr	r3, [r3, #8]
   b9258:	4629      	mov	r1, r5
   b925a:	4620      	mov	r0, r4
   b925c:	4798      	blx	r3
            write('\\');
   b925e:	215c      	movs	r1, #92	; 0x5c
   b9260:	4620      	mov	r0, r4
   b9262:	f7ff fee2 	bl	b902a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b9266:	2e0d      	cmp	r6, #13
   b9268:	d80a      	bhi.n	b9280 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b926a:	2e07      	cmp	r6, #7
   b926c:	d91c      	bls.n	b92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b926e:	f1a6 0308 	sub.w	r3, r6, #8
   b9272:	2b05      	cmp	r3, #5
   b9274:	d818      	bhi.n	b92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9276:	e8df f003 	tbb	[pc, r3]
   b927a:	0f0d      	.short	0x0f0d
   b927c:	15131711 	.word	0x15131711
   b9280:	2e22      	cmp	r6, #34	; 0x22
   b9282:	d001      	beq.n	b9288 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b9284:	2e5c      	cmp	r6, #92	; 0x5c
   b9286:	d10f      	bne.n	b92a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b9288:	4631      	mov	r1, r6
                write('b');
   b928a:	4620      	mov	r0, r4
   b928c:	f7ff fecd 	bl	b902a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b9290:	463d      	mov	r5, r7
    while (s != end) {
   b9292:	e7cf      	b.n	b9234 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b9294:	2162      	movs	r1, #98	; 0x62
   b9296:	e7f8      	b.n	b928a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b9298:	2174      	movs	r1, #116	; 0x74
   b929a:	e7f6      	b.n	b928a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b929c:	216e      	movs	r1, #110	; 0x6e
   b929e:	e7f4      	b.n	b928a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b92a0:	2166      	movs	r1, #102	; 0x66
   b92a2:	e7f2      	b.n	b928a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b92a4:	2172      	movs	r1, #114	; 0x72
   b92a6:	e7f0      	b.n	b928a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b92a8:	6823      	ldr	r3, [r4, #0]
   b92aa:	4632      	mov	r2, r6
   b92ac:	68db      	ldr	r3, [r3, #12]
   b92ae:	4649      	mov	r1, r9
   b92b0:	4620      	mov	r0, r4
   b92b2:	4798      	blx	r3
                break;
   b92b4:	e7ec      	b.n	b9290 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b92b6:	42bd      	cmp	r5, r7
   b92b8:	d005      	beq.n	b92c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b92ba:	6823      	ldr	r3, [r4, #0]
   b92bc:	1b7a      	subs	r2, r7, r5
   b92be:	689b      	ldr	r3, [r3, #8]
   b92c0:	4629      	mov	r1, r5
   b92c2:	4620      	mov	r0, r4
   b92c4:	4798      	blx	r3
    }
    write('"');
   b92c6:	2122      	movs	r1, #34	; 0x22
   b92c8:	4620      	mov	r0, r4
   b92ca:	f7ff feae 	bl	b902a <_ZN5spark10JSONWriter5writeEc>
}
   b92ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b92d2:	bf00      	nop
   b92d4:	000bd1f4 	.word	0x000bd1f4

000b92d8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b92d8:	b513      	push	{r0, r1, r4, lr}
   b92da:	4604      	mov	r4, r0
   b92dc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b92e0:	f7ff ff5e 	bl	b91a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b92e4:	4620      	mov	r0, r4
   b92e6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b92ea:	f7ff ff97 	bl	b921c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b92ee:	2302      	movs	r3, #2
}
   b92f0:	4620      	mov	r0, r4
    state_ = VALUE;
   b92f2:	7123      	strb	r3, [r4, #4]
}
   b92f4:	b002      	add	sp, #8
   b92f6:	bd10      	pop	{r4, pc}

000b92f8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b92f8:	b513      	push	{r0, r1, r4, lr}
   b92fa:	4604      	mov	r4, r0
   b92fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9300:	f7ff ff4e 	bl	b91a0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b9304:	4620      	mov	r0, r4
   b9306:	e9dd 2100 	ldrd	r2, r1, [sp]
   b930a:	f7ff ff87 	bl	b921c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b930e:	2301      	movs	r3, #1
}
   b9310:	4620      	mov	r0, r4
    state_ = NEXT;
   b9312:	7123      	strb	r3, [r4, #4]
}
   b9314:	b002      	add	sp, #8
   b9316:	bd10      	pop	{r4, pc}

000b9318 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9318:	6880      	ldr	r0, [r0, #8]
   b931a:	6803      	ldr	r3, [r0, #0]
   b931c:	68db      	ldr	r3, [r3, #12]
   b931e:	4718      	bx	r3

000b9320 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9320:	4770      	bx	lr

000b9322 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b9322:	4608      	mov	r0, r1
   b9324:	b111      	cbz	r1, b932c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b9326:	680b      	ldr	r3, [r1, #0]
   b9328:	685b      	ldr	r3, [r3, #4]
   b932a:	4718      	bx	r3
}
   b932c:	4770      	bx	lr

000b932e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b932e:	4770      	bx	lr

000b9330 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9330:	4770      	bx	lr

000b9332 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b9332:	4770      	bx	lr

000b9334 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b9334:	4770      	bx	lr

000b9336 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b9336:	b538      	push	{r3, r4, r5, lr}
   b9338:	4604      	mov	r4, r0
   b933a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b933c:	6800      	ldr	r0, [r0, #0]
   b933e:	212e      	movs	r1, #46	; 0x2e
   b9340:	f002 febd 	bl	bc0be <strchrnul>
    size = s - category;
   b9344:	6823      	ldr	r3, [r4, #0]
   b9346:	1ac3      	subs	r3, r0, r3
   b9348:	602b      	str	r3, [r5, #0]
    if (size) {
   b934a:	b123      	cbz	r3, b9356 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b934c:	7803      	ldrb	r3, [r0, #0]
   b934e:	b103      	cbz	r3, b9352 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9350:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b9352:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9354:	6020      	str	r0, [r4, #0]
}
   b9356:	4618      	mov	r0, r3
   b9358:	bd38      	pop	{r3, r4, r5, pc}

000b935a <_ZN5spark16JSONStreamWriterD0Ev>:
   b935a:	b510      	push	{r4, lr}
   b935c:	210c      	movs	r1, #12
   b935e:	4604      	mov	r4, r0
   b9360:	f7fa fe9d 	bl	b409e <_ZdlPvj>
   b9364:	4620      	mov	r0, r4
   b9366:	bd10      	pop	{r4, pc}

000b9368 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9368:	b510      	push	{r4, lr}
   b936a:	2104      	movs	r1, #4
   b936c:	4604      	mov	r4, r0
   b936e:	f7fa fe96 	bl	b409e <_ZdlPvj>
   b9372:	4620      	mov	r0, r4
   b9374:	bd10      	pop	{r4, pc}

000b9376 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9376:	b510      	push	{r4, lr}
   b9378:	2104      	movs	r1, #4
   b937a:	4604      	mov	r4, r0
   b937c:	f7fa fe8f 	bl	b409e <_ZdlPvj>
   b9380:	4620      	mov	r0, r4
   b9382:	bd10      	pop	{r4, pc}

000b9384 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9384:	f7fe bf30 	b.w	b81e8 <os_mutex_recursive_lock>

000b9388 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9388:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b938a:	f002 fea2 	bl	bc0d2 <strcmp>
}
   b938e:	fab0 f080 	clz	r0, r0
   b9392:	0940      	lsrs	r0, r0, #5
   b9394:	bd08      	pop	{r3, pc}

000b9396 <__tcf_1>:
   b9396:	4770      	bx	lr

000b9398 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9398:	b510      	push	{r4, lr}
   b939a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b939c:	f001 feb6 	bl	bb10c <_Z16_fetch_usbserialv>
   b93a0:	4284      	cmp	r4, r0
   b93a2:	d010      	beq.n	b93c6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b93a4:	f002 f8b0 	bl	bb508 <_Z22__fetch_global_Serial1v>
   b93a8:	4284      	cmp	r4, r0
   b93aa:	d105      	bne.n	b93b8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b93ac:	f002 f8ac 	bl	bb508 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b93b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b93b4:	f001 be43 	b.w	bb03e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b93b8:	b12c      	cbz	r4, b93c6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b93ba:	6823      	ldr	r3, [r4, #0]
   b93bc:	4620      	mov	r0, r4
   b93be:	685b      	ldr	r3, [r3, #4]
}
   b93c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b93c4:	4718      	bx	r3
   b93c6:	bd10      	pop	{r4, pc}

000b93c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b93c8:	680b      	ldr	r3, [r1, #0]
   b93ca:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b93cc:	684b      	ldr	r3, [r1, #4]
   b93ce:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b93d0:	b113      	cbz	r3, b93d8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b93d2:	685a      	ldr	r2, [r3, #4]
   b93d4:	3201      	adds	r2, #1
   b93d6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b93d8:	4770      	bx	lr

000b93da <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b93da:	b513      	push	{r0, r1, r4, lr}
   b93dc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b93de:	4608      	mov	r0, r1
   b93e0:	9101      	str	r1, [sp, #4]
   b93e2:	f002 fe88 	bl	bc0f6 <strlen>
   b93e6:	9901      	ldr	r1, [sp, #4]
   b93e8:	4602      	mov	r2, r0
   b93ea:	4620      	mov	r0, r4
}
   b93ec:	b002      	add	sp, #8
   b93ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b93f2:	f7ff bf81 	b.w	b92f8 <_ZN5spark10JSONWriter5valueEPKcj>

000b93f6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b93f6:	b513      	push	{r0, r1, r4, lr}
   b93f8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b93fa:	4608      	mov	r0, r1
   b93fc:	9101      	str	r1, [sp, #4]
   b93fe:	f002 fe7a 	bl	bc0f6 <strlen>
   b9402:	6823      	ldr	r3, [r4, #0]
   b9404:	9901      	ldr	r1, [sp, #4]
   b9406:	68db      	ldr	r3, [r3, #12]
   b9408:	4602      	mov	r2, r0
   b940a:	4620      	mov	r0, r4
}
   b940c:	b002      	add	sp, #8
   b940e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b9412:	4718      	bx	r3

000b9414 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9414:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9416:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9418:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b941c:	68db      	ldr	r3, [r3, #12]
   b941e:	2201      	movs	r2, #1
   b9420:	f10d 0107 	add.w	r1, sp, #7
   b9424:	4798      	blx	r3
}
   b9426:	b003      	add	sp, #12
   b9428:	f85d fb04 	ldr.w	pc, [sp], #4

000b942c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b942c:	b40e      	push	{r1, r2, r3}
   b942e:	b503      	push	{r0, r1, lr}
   b9430:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b9432:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9434:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9438:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b943a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b943c:	f001 f975 	bl	ba72a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b9440:	b002      	add	sp, #8
   b9442:	f85d eb04 	ldr.w	lr, [sp], #4
   b9446:	b003      	add	sp, #12
   b9448:	4770      	bx	lr

000b944a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b944a:	680a      	ldr	r2, [r1, #0]
   b944c:	6002      	str	r2, [r0, #0]
   b944e:	684a      	ldr	r2, [r1, #4]
   b9450:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b9452:	2200      	movs	r2, #0
   b9454:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9458:	b510      	push	{r4, lr}
   b945a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b945c:	688c      	ldr	r4, [r1, #8]
   b945e:	6084      	str	r4, [r0, #8]
   b9460:	68cc      	ldr	r4, [r1, #12]
   b9462:	60c4      	str	r4, [r0, #12]
   b9464:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9466:	608a      	str	r2, [r1, #8]
   b9468:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b946a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b946c:	610a      	str	r2, [r1, #16]
   b946e:	bd10      	pop	{r4, pc}

000b9470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b9474:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9478:	f04f 0a14 	mov.w	sl, #20
   b947c:	9300      	str	r3, [sp, #0]
   b947e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9482:	4b18      	ldr	r3, [pc, #96]	; (b94e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9484:	10a4      	asrs	r4, r4, #2
   b9486:	4617      	mov	r7, r2
   b9488:	435c      	muls	r4, r3
   b948a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b948c:	2c00      	cmp	r4, #0
   b948e:	dd21      	ble.n	b94d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9490:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9492:	fb0a f006 	mul.w	r0, sl, r6
   b9496:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b949a:	463a      	mov	r2, r7
   b949c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b94a0:	5828      	ldr	r0, [r5, r0]
   b94a2:	9101      	str	r1, [sp, #4]
   b94a4:	455f      	cmp	r7, fp
   b94a6:	bf28      	it	cs
   b94a8:	465a      	movcs	r2, fp
   b94aa:	f002 fe2c 	bl	bc106 <strncmp>
                if (cmp == 0) {
   b94ae:	2800      	cmp	r0, #0
   b94b0:	9901      	ldr	r1, [sp, #4]
   b94b2:	f04f 0301 	mov.w	r3, #1
   b94b6:	d10b      	bne.n	b94d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b94b8:	455f      	cmp	r7, fp
   b94ba:	d103      	bne.n	b94c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b94bc:	9a00      	ldr	r2, [sp, #0]
   b94be:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b94c0:	4634      	mov	r4, r6
   b94c2:	e7e3      	b.n	b948c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b94c4:	d9fc      	bls.n	b94c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b94c6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b94c8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b94cc:	3e01      	subs	r6, #1
   b94ce:	e7f7      	b.n	b94c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b94d0:	dbf9      	blt.n	b94c6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b94d2:	e7f5      	b.n	b94c0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b94d4:	eba5 0508 	sub.w	r5, r5, r8
}
   b94d8:	4802      	ldr	r0, [pc, #8]	; (b94e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b94da:	10ad      	asrs	r5, r5, #2
   b94dc:	4368      	muls	r0, r5
   b94de:	b003      	add	sp, #12
   b94e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b94e4:	cccccccd 	.word	0xcccccccd

000b94e8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b94e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b94ea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b94ec:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b94ee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b94f0:	b303      	cbz	r3, b9534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b94f2:	b1f9      	cbz	r1, b9534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b94f4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b94f6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b94fa:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b94fc:	a903      	add	r1, sp, #12
   b94fe:	a801      	add	r0, sp, #4
   b9500:	f7ff ff19 	bl	b9336 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9504:	4601      	mov	r1, r0
   b9506:	b1a8      	cbz	r0, b9534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9508:	f10d 030b 	add.w	r3, sp, #11
   b950c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b950e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9512:	4620      	mov	r0, r4
   b9514:	f7ff ffac 	bl	b9470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9518:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b951c:	b153      	cbz	r3, b9534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b951e:	6823      	ldr	r3, [r4, #0]
   b9520:	2414      	movs	r4, #20
   b9522:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9526:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9528:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b952c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b952e:	bfa8      	it	ge
   b9530:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b9532:	e7e3      	b.n	b94fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9534:	4628      	mov	r0, r5
   b9536:	b004      	add	sp, #16
   b9538:	bd70      	pop	{r4, r5, r6, pc}
	...

000b953c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b953c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b953e:	4c09      	ldr	r4, [pc, #36]	; (b9564 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9540:	7823      	ldrb	r3, [r4, #0]
   b9542:	f3bf 8f5b 	dmb	ish
   b9546:	07db      	lsls	r3, r3, #31
   b9548:	d409      	bmi.n	b955e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b954a:	4620      	mov	r0, r4
   b954c:	f7fa fdb6 	bl	b40bc <__cxa_guard_acquire>
   b9550:	b128      	cbz	r0, b955e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9552:	4620      	mov	r0, r4
   b9554:	f7fa fdb7 	bl	b40c6 <__cxa_guard_release>
   b9558:	4803      	ldr	r0, [pc, #12]	; (b9568 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b955a:	f002 fcdb 	bl	bbf14 <atexit>
}
   b955e:	4803      	ldr	r0, [pc, #12]	; (b956c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9560:	bd10      	pop	{r4, pc}
   b9562:	bf00      	nop
   b9564:	2003e650 	.word	0x2003e650
   b9568:	000b932f 	.word	0x000b932f
   b956c:	2003dec4 	.word	0x2003dec4

000b9570 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9570:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9572:	4c09      	ldr	r4, [pc, #36]	; (b9598 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9574:	7823      	ldrb	r3, [r4, #0]
   b9576:	f3bf 8f5b 	dmb	ish
   b957a:	07db      	lsls	r3, r3, #31
   b957c:	d409      	bmi.n	b9592 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b957e:	4620      	mov	r0, r4
   b9580:	f7fa fd9c 	bl	b40bc <__cxa_guard_acquire>
   b9584:	b128      	cbz	r0, b9592 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9586:	4620      	mov	r0, r4
   b9588:	f7fa fd9d 	bl	b40c6 <__cxa_guard_release>
   b958c:	4803      	ldr	r0, [pc, #12]	; (b959c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b958e:	f002 fcc1 	bl	bbf14 <atexit>
    return &factory;
}
   b9592:	4803      	ldr	r0, [pc, #12]	; (b95a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9594:	bd10      	pop	{r4, pc}
   b9596:	bf00      	nop
   b9598:	2003e654 	.word	0x2003e654
   b959c:	000b9397 	.word	0x000b9397
   b95a0:	2003dec8 	.word	0x2003dec8

000b95a4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b95a4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b95a6:	2500      	movs	r5, #0
   b95a8:	4604      	mov	r4, r0
   b95aa:	e9c0 5500 	strd	r5, r5, [r0]
   b95ae:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b95b2:	6085      	str	r5, [r0, #8]
   b95b4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b95b6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b95ba:	f7fe fe05 	bl	b81c8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b95be:	f7ff ffbd 	bl	b953c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b95c2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b95c4:	f7ff ffd4 	bl	b9570 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b95c8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b95ca:	6220      	str	r0, [r4, #32]
}
   b95cc:	4620      	mov	r0, r4
   b95ce:	bd38      	pop	{r3, r4, r5, pc}

000b95d0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b95d0:	b510      	push	{r4, lr}
    static LogManager mgr;
   b95d2:	4c0a      	ldr	r4, [pc, #40]	; (b95fc <_ZN5spark10LogManager8instanceEv+0x2c>)
   b95d4:	7823      	ldrb	r3, [r4, #0]
   b95d6:	f3bf 8f5b 	dmb	ish
   b95da:	07db      	lsls	r3, r3, #31
   b95dc:	d40c      	bmi.n	b95f8 <_ZN5spark10LogManager8instanceEv+0x28>
   b95de:	4620      	mov	r0, r4
   b95e0:	f7fa fd6c 	bl	b40bc <__cxa_guard_acquire>
   b95e4:	b140      	cbz	r0, b95f8 <_ZN5spark10LogManager8instanceEv+0x28>
   b95e6:	4806      	ldr	r0, [pc, #24]	; (b9600 <_ZN5spark10LogManager8instanceEv+0x30>)
   b95e8:	f7ff ffdc 	bl	b95a4 <_ZN5spark10LogManagerC1Ev>
   b95ec:	4620      	mov	r0, r4
   b95ee:	f7fa fd6a 	bl	b40c6 <__cxa_guard_release>
   b95f2:	4804      	ldr	r0, [pc, #16]	; (b9604 <_ZN5spark10LogManager8instanceEv+0x34>)
   b95f4:	f002 fc8e 	bl	bbf14 <atexit>
    return &mgr;
}
   b95f8:	4801      	ldr	r0, [pc, #4]	; (b9600 <_ZN5spark10LogManager8instanceEv+0x30>)
   b95fa:	bd10      	pop	{r4, pc}
   b95fc:	2003e64c 	.word	0x2003e64c
   b9600:	2003e65c 	.word	0x2003e65c
   b9604:	000b9b25 	.word	0x000b9b25

000b9608 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9608:	4a02      	ldr	r2, [pc, #8]	; (b9614 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b960a:	4903      	ldr	r1, [pc, #12]	; (b9618 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b960c:	4803      	ldr	r0, [pc, #12]	; (b961c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b960e:	2300      	movs	r3, #0
   b9610:	f7ff b80a 	b.w	b8628 <log_set_callbacks>
   b9614:	000b9909 	.word	0x000b9909
   b9618:	000b9895 	.word	0x000b9895
   b961c:	000b9815 	.word	0x000b9815

000b9620 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9620:	2300      	movs	r3, #0
   b9622:	461a      	mov	r2, r3
   b9624:	4619      	mov	r1, r3
   b9626:	4618      	mov	r0, r3
   b9628:	f7fe bffe 	b.w	b8628 <log_set_callbacks>

000b962c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b962c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b962e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9630:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9632:	4668      	mov	r0, sp
   b9634:	f7ff fec8 	bl	b93c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9638:	466a      	mov	r2, sp
   b963a:	4629      	mov	r1, r5
   b963c:	4620      	mov	r0, r4
   b963e:	f7ff fd7b 	bl	b9138 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9642:	a801      	add	r0, sp, #4
   b9644:	f7fc f810 	bl	b5668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9648:	4620      	mov	r0, r4
   b964a:	b003      	add	sp, #12
   b964c:	bd30      	pop	{r4, r5, pc}

000b964e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b964e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9650:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9652:	4604      	mov	r4, r0
   b9654:	4668      	mov	r0, sp
   b9656:	f7ff feb7 	bl	b93c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b965a:	466a      	mov	r2, sp
   b965c:	4629      	mov	r1, r5
   b965e:	4620      	mov	r0, r4
   b9660:	f7ff fd46 	bl	b90f0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9664:	a801      	add	r0, sp, #4
   b9666:	f7fb ffff 	bl	b5668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b966a:	4620      	mov	r0, r4
   b966c:	b003      	add	sp, #12
   b966e:	bd30      	pop	{r4, r5, pc}

000b9670 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9670:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9672:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9674:	4604      	mov	r4, r0
   b9676:	4668      	mov	r0, sp
   b9678:	f7ff fea6 	bl	b93c8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b967c:	466a      	mov	r2, sp
   b967e:	4629      	mov	r1, r5
   b9680:	4620      	mov	r0, r4
   b9682:	f7ff fcde 	bl	b9042 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9686:	a801      	add	r0, sp, #4
   b9688:	f7fb ffee 	bl	b5668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b968c:	4620      	mov	r0, r4
   b968e:	b003      	add	sp, #12
   b9690:	bd30      	pop	{r4, r5, pc}
	...

000b9694 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9694:	b570      	push	{r4, r5, r6, lr}
   b9696:	b08a      	sub	sp, #40	; 0x28
   b9698:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b969a:	4601      	mov	r1, r0
   b969c:	a804      	add	r0, sp, #16
   b969e:	f7ff ffc5 	bl	b962c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b96a2:	4e14      	ldr	r6, [pc, #80]	; (b96f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b96a4:	a804      	add	r0, sp, #16
   b96a6:	f7ff fd5f 	bl	b9168 <_ZN5spark18JSONObjectIterator4nextEv>
   b96aa:	b1e8      	cbz	r0, b96e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b96ac:	a904      	add	r1, sp, #16
   b96ae:	4668      	mov	r0, sp
   b96b0:	f7ff ffcd 	bl	b964e <_ZNK5spark18JSONObjectIterator4nameEv>
   b96b4:	9802      	ldr	r0, [sp, #8]
   b96b6:	4631      	mov	r1, r6
   b96b8:	f7ff fe66 	bl	b9388 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b96bc:	4604      	mov	r4, r0
   b96be:	b110      	cbz	r0, b96c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b96c0:	1e2c      	subs	r4, r5, #0
   b96c2:	bf18      	it	ne
   b96c4:	2401      	movne	r4, #1
   b96c6:	a801      	add	r0, sp, #4
   b96c8:	f7fb ffce 	bl	b5668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b96cc:	2c00      	cmp	r4, #0
   b96ce:	d0e9      	beq.n	b96a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b96d0:	a904      	add	r1, sp, #16
   b96d2:	4668      	mov	r0, sp
   b96d4:	f7ff ffcc 	bl	b9670 <_ZNK5spark18JSONObjectIterator5valueEv>
   b96d8:	4668      	mov	r0, sp
   b96da:	f7ff fce8 	bl	b90ae <_ZNK5spark9JSONValue5toIntEv>
   b96de:	6028      	str	r0, [r5, #0]
   b96e0:	a801      	add	r0, sp, #4
   b96e2:	f7fb ffc1 	bl	b5668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b96e6:	e7dd      	b.n	b96a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b96e8:	a805      	add	r0, sp, #20
   b96ea:	f7fb ffbd 	bl	b5668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b96ee:	b00a      	add	sp, #40	; 0x28
   b96f0:	bd70      	pop	{r4, r5, r6, pc}
   b96f2:	bf00      	nop
   b96f4:	000bd1fa 	.word	0x000bd1fa

000b96f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b96f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b96fa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b96fc:	4620      	mov	r0, r4
   b96fe:	4913      	ldr	r1, [pc, #76]	; (b974c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9700:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9702:	f002 fce6 	bl	bc0d2 <strcmp>
   b9706:	b950      	cbnz	r0, b971e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9708:	f001 fd00 	bl	bb10c <_Z16_fetch_usbserialv>
   b970c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9710:	f001 fcea 	bl	bb0e8 <_ZN9USBSerial5beginEl>
}
   b9714:	b003      	add	sp, #12
   b9716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b971a:	f001 bcf7 	b.w	bb10c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b971e:	490c      	ldr	r1, [pc, #48]	; (b9750 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9720:	4620      	mov	r0, r4
   b9722:	f002 fcd6 	bl	bc0d2 <strcmp>
   b9726:	b978      	cbnz	r0, b9748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9728:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b972c:	a901      	add	r1, sp, #4
   b972e:	4628      	mov	r0, r5
        int baud = 9600;
   b9730:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9732:	f7ff ffaf 	bl	b9694 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9736:	f001 fee7 	bl	bb508 <_Z22__fetch_global_Serial1v>
   b973a:	9901      	ldr	r1, [sp, #4]
   b973c:	f001 fc7c 	bl	bb038 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9740:	f001 fee2 	bl	bb508 <_Z22__fetch_global_Serial1v>
}
   b9744:	b003      	add	sp, #12
   b9746:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9748:	2000      	movs	r0, #0
   b974a:	e7fb      	b.n	b9744 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b974c:	000bd1ff 	.word	0x000bd1ff
   b9750:	000bd206 	.word	0x000bd206

000b9754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9754:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9756:	e9d0 5300 	ldrd	r5, r3, [r0]
   b975a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b975c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b975e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9762:	42ae      	cmp	r6, r5
   b9764:	d005      	beq.n	b9772 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b9766:	f105 0008 	add.w	r0, r5, #8
   b976a:	f7ff fff3 	bl	b9754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b976e:	3514      	adds	r5, #20
   b9770:	e7f7      	b.n	b9762 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b9772:	6820      	ldr	r0, [r4, #0]
   b9774:	f7ff f864 	bl	b8840 <free>
}
   b9778:	4620      	mov	r0, r4
   b977a:	bd70      	pop	{r4, r5, r6, pc}

000b977c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b977c:	b510      	push	{r4, lr}
   b977e:	4604      	mov	r4, r0
   b9780:	300c      	adds	r0, #12
   b9782:	f7ff ffe7 	bl	b9754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9786:	4620      	mov	r0, r4
   b9788:	f7ff f8d9 	bl	b893e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b978c:	4620      	mov	r0, r4
   b978e:	bd10      	pop	{r4, pc}

000b9790 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9790:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b9792:	4b04      	ldr	r3, [pc, #16]	; (b97a4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b9794:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b9796:	f840 3b04 	str.w	r3, [r0], #4
   b979a:	f7ff ffef 	bl	b977c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b979e:	4620      	mov	r0, r4
   b97a0:	bd10      	pop	{r4, pc}
   b97a2:	bf00      	nop
   b97a4:	000bc9dc 	.word	0x000bc9dc

000b97a8 <_ZN5spark16StreamLogHandlerD0Ev>:
   b97a8:	b510      	push	{r4, lr}
   b97aa:	4604      	mov	r4, r0
   b97ac:	f7ff fff0 	bl	b9790 <_ZN5spark16StreamLogHandlerD1Ev>
   b97b0:	4620      	mov	r0, r4
   b97b2:	2124      	movs	r1, #36	; 0x24
   b97b4:	f7fa fc73 	bl	b409e <_ZdlPvj>
   b97b8:	4620      	mov	r0, r4
   b97ba:	bd10      	pop	{r4, pc}

000b97bc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b97bc:	b510      	push	{r4, lr}
   b97be:	4b03      	ldr	r3, [pc, #12]	; (b97cc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b97c0:	6003      	str	r3, [r0, #0]
   b97c2:	4604      	mov	r4, r0
   b97c4:	f7ff ffe4 	bl	b9790 <_ZN5spark16StreamLogHandlerD1Ev>
   b97c8:	4620      	mov	r0, r4
   b97ca:	bd10      	pop	{r4, pc}
   b97cc:	000bd2a0 	.word	0x000bd2a0

000b97d0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b97d0:	b510      	push	{r4, lr}
   b97d2:	4604      	mov	r4, r0
   b97d4:	f7ff fff2 	bl	b97bc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b97d8:	4620      	mov	r0, r4
   b97da:	2124      	movs	r1, #36	; 0x24
   b97dc:	f7fa fc5f 	bl	b409e <_ZdlPvj>
   b97e0:	4620      	mov	r0, r4
   b97e2:	bd10      	pop	{r4, pc}

000b97e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b97e4:	2200      	movs	r2, #0
   b97e6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b97ea:	b510      	push	{r4, lr}
        capacity_(0) {
   b97ec:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b97ee:	680c      	ldr	r4, [r1, #0]
   b97f0:	6004      	str	r4, [r0, #0]
   b97f2:	684c      	ldr	r4, [r1, #4]
   b97f4:	6044      	str	r4, [r0, #4]
   b97f6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b97f8:	600a      	str	r2, [r1, #0]
   b97fa:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b97fc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b97fe:	608a      	str	r2, [r1, #8]
}
   b9800:	bd10      	pop	{r4, pc}

000b9802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b9802:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9804:	6803      	ldr	r3, [r0, #0]
   b9806:	4604      	mov	r4, r0
   b9808:	6818      	ldr	r0, [r3, #0]
   b980a:	f7fe fcf5 	bl	b81f8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b980e:	4620      	mov	r0, r4
   b9810:	bd10      	pop	{r4, pc}
	...

000b9814 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9818:	b087      	sub	sp, #28
   b981a:	4680      	mov	r8, r0
   b981c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b981e:	4b1c      	ldr	r3, [pc, #112]	; (b9890 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9820:	685b      	ldr	r3, [r3, #4]
   b9822:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9826:	4689      	mov	r9, r1
   b9828:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b982a:	b96b      	cbnz	r3, b9848 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b982c:	f7ff fed0 	bl	b95d0 <_ZN5spark10LogManager8instanceEv>
   b9830:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9832:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9836:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9838:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b983a:	f7ff fda3 	bl	b9384 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b983e:	7b23      	ldrb	r3, [r4, #12]
   b9840:	b12b      	cbz	r3, b984e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b9842:	a805      	add	r0, sp, #20
   b9844:	f7ff ffdd 	bl	b9802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9848:	b007      	add	sp, #28
   b984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b984e:	2301      	movs	r3, #1
   b9850:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b9852:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b9856:	fa5f f989 	uxtb.w	r9, r9
   b985a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b985e:	45aa      	cmp	sl, r5
   b9860:	d012      	beq.n	b9888 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b9862:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b9866:	4631      	mov	r1, r6
   b9868:	1d38      	adds	r0, r7, #4
   b986a:	f7ff fe3d 	bl	b94e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b986e:	4581      	cmp	r9, r0
   b9870:	d3f5      	bcc.n	b985e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b9872:	683b      	ldr	r3, [r7, #0]
   b9874:	9a03      	ldr	r2, [sp, #12]
   b9876:	9200      	str	r2, [sp, #0]
   b9878:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b987c:	464a      	mov	r2, r9
   b987e:	4633      	mov	r3, r6
   b9880:	4641      	mov	r1, r8
   b9882:	4638      	mov	r0, r7
   b9884:	47d8      	blx	fp
   b9886:	e7ea      	b.n	b985e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9888:	2300      	movs	r3, #0
   b988a:	7323      	strb	r3, [r4, #12]
   b988c:	e7d9      	b.n	b9842 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b988e:	bf00      	nop
   b9890:	e000ed00 	.word	0xe000ed00

000b9894 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b9894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9898:	469b      	mov	fp, r3
   b989a:	4b1a      	ldr	r3, [pc, #104]	; (b9904 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b989c:	685b      	ldr	r3, [r3, #4]
   b989e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b98a2:	4680      	mov	r8, r0
   b98a4:	4689      	mov	r9, r1
   b98a6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b98a8:	b96b      	cbnz	r3, b98c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b98aa:	f7ff fe91 	bl	b95d0 <_ZN5spark10LogManager8instanceEv>
   b98ae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b98b0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b98b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b98b6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b98b8:	f7ff fd64 	bl	b9384 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b98bc:	7b23      	ldrb	r3, [r4, #12]
   b98be:	b12b      	cbz	r3, b98cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b98c0:	a801      	add	r0, sp, #4
   b98c2:	f7ff ff9e 	bl	b9802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b98c6:	b003      	add	sp, #12
   b98c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b98cc:	2301      	movs	r3, #1
   b98ce:	7323      	strb	r3, [r4, #12]
   b98d0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b98d4:	b2f6      	uxtb	r6, r6
   b98d6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b98da:	4555      	cmp	r5, sl
   b98dc:	d00e      	beq.n	b98fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b98de:	f855 7b04 	ldr.w	r7, [r5], #4
   b98e2:	4659      	mov	r1, fp
   b98e4:	1d38      	adds	r0, r7, #4
   b98e6:	f7ff fdff 	bl	b94e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b98ea:	4286      	cmp	r6, r0
   b98ec:	d3f5      	bcc.n	b98da <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b98ee:	683b      	ldr	r3, [r7, #0]
   b98f0:	464a      	mov	r2, r9
   b98f2:	68db      	ldr	r3, [r3, #12]
   b98f4:	4641      	mov	r1, r8
   b98f6:	4638      	mov	r0, r7
   b98f8:	4798      	blx	r3
   b98fa:	e7ee      	b.n	b98da <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b98fc:	2300      	movs	r3, #0
   b98fe:	7323      	strb	r3, [r4, #12]
   b9900:	e7de      	b.n	b98c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b9902:	bf00      	nop
   b9904:	e000ed00 	.word	0xe000ed00

000b9908 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b990c:	4b16      	ldr	r3, [pc, #88]	; (b9968 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b990e:	685b      	ldr	r3, [r3, #4]
   b9910:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9914:	4605      	mov	r5, r0
   b9916:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9918:	bb1b      	cbnz	r3, b9962 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b991a:	f7ff fe59 	bl	b95d0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b991e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b9922:	4604      	mov	r4, r0
   b9924:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9926:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9928:	f7ff fd2c 	bl	b9384 <_ZN14RecursiveMutex4lockEv.isra.0>
   b992c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9930:	2446      	movs	r4, #70	; 0x46
   b9932:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9936:	45b0      	cmp	r8, r6
   b9938:	d109      	bne.n	b994e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b993a:	a801      	add	r0, sp, #4
   b993c:	f7ff ff61 	bl	b9802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b9940:	42a5      	cmp	r5, r4
   b9942:	bfb4      	ite	lt
   b9944:	2000      	movlt	r0, #0
   b9946:	2001      	movge	r0, #1
}
   b9948:	b002      	add	sp, #8
   b994a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b994e:	f856 0b04 	ldr.w	r0, [r6], #4
   b9952:	4639      	mov	r1, r7
   b9954:	3004      	adds	r0, #4
   b9956:	f7ff fdc7 	bl	b94e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b995a:	4284      	cmp	r4, r0
   b995c:	bfa8      	it	ge
   b995e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b9960:	e7e9      	b.n	b9936 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b9962:	2000      	movs	r0, #0
   b9964:	e7f0      	b.n	b9948 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b9966:	bf00      	nop
   b9968:	e000ed00 	.word	0xe000ed00

000b996c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b996c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b996e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b9972:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9974:	4604      	mov	r4, r0
   b9976:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9978:	db0d      	blt.n	b9996 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b997a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b997c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b997e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9980:	dd04      	ble.n	b998c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b9982:	00b9      	lsls	r1, r7, #2
   b9984:	f7fe ff64 	bl	b8850 <realloc>
            if (!d) {
   b9988:	b918      	cbnz	r0, b9992 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b998a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b998c:	f7fe ff58 	bl	b8840 <free>
        T* d = nullptr;
   b9990:	2000      	movs	r0, #0
        data_ = d;
   b9992:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9994:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b9996:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9998:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b999a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b999e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b99a0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b99a4:	1d08      	adds	r0, r1, #4
   b99a6:	f002 faef 	bl	bbf88 <memmove>
    new(p) T(std::move(value));
   b99aa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b99ae:	6863      	ldr	r3, [r4, #4]
   b99b0:	3301      	adds	r3, #1
   b99b2:	6063      	str	r3, [r4, #4]
    return true;
   b99b4:	2001      	movs	r0, #1
   b99b6:	e7e8      	b.n	b998a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b99b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b99b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b99ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b99be:	4604      	mov	r4, r0
   b99c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b99c2:	9301      	str	r3, [sp, #4]
   b99c4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b99c6:	f7ff fcdd 	bl	b9384 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b99ca:	e9d4 3200 	ldrd	r3, r2, [r4]
   b99ce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b99d2:	4293      	cmp	r3, r2
   b99d4:	4619      	mov	r1, r3
   b99d6:	d00b      	beq.n	b99f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b99d8:	6809      	ldr	r1, [r1, #0]
   b99da:	42a9      	cmp	r1, r5
   b99dc:	f103 0304 	add.w	r3, r3, #4
   b99e0:	d1f7      	bne.n	b99d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b99e2:	a801      	add	r0, sp, #4
   b99e4:	f7ff ff0d 	bl	b9802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b99e8:	2500      	movs	r5, #0
}
   b99ea:	4628      	mov	r0, r5
   b99ec:	b003      	add	sp, #12
   b99ee:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b99f0:	4629      	mov	r1, r5
   b99f2:	4620      	mov	r0, r4
   b99f4:	f7ff ffba 	bl	b996c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b99f8:	4605      	mov	r5, r0
   b99fa:	2800      	cmp	r0, #0
   b99fc:	d0f1      	beq.n	b99e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b99fe:	6863      	ldr	r3, [r4, #4]
   b9a00:	2b01      	cmp	r3, #1
   b9a02:	d101      	bne.n	b9a08 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b9a04:	f7ff fe00 	bl	b9608 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9a08:	a801      	add	r0, sp, #4
   b9a0a:	f7ff fefa 	bl	b9802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9a0e:	e7ec      	b.n	b99ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9a10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9a10:	b570      	push	{r4, r5, r6, lr}
   b9a12:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9a14:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9a18:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b9a1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9a1e:	4282      	cmp	r2, r0
   b9a20:	d00f      	beq.n	b9a42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9a22:	4601      	mov	r1, r0
            if (*p == value) {
   b9a24:	681d      	ldr	r5, [r3, #0]
   b9a26:	f851 6b04 	ldr.w	r6, [r1], #4
   b9a2a:	42ae      	cmp	r6, r5
   b9a2c:	d107      	bne.n	b9a3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9a2e:	1a52      	subs	r2, r2, r1
   b9a30:	f002 faaa 	bl	bbf88 <memmove>
    --size_;
   b9a34:	6863      	ldr	r3, [r4, #4]
   b9a36:	3b01      	subs	r3, #1
   b9a38:	6063      	str	r3, [r4, #4]
    return true;
   b9a3a:	2001      	movs	r0, #1
}
   b9a3c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9a3e:	4608      	mov	r0, r1
   b9a40:	e7ed      	b.n	b9a1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9a42:	2000      	movs	r0, #0
   b9a44:	e7fa      	b.n	b9a3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b9a46 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9a46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b9a48:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9a4c:	4604      	mov	r4, r0
   b9a4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9a50:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9a52:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9a54:	f7ff fc96 	bl	b9384 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b9a58:	a901      	add	r1, sp, #4
   b9a5a:	4620      	mov	r0, r4
   b9a5c:	f7ff ffd8 	bl	b9a10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9a60:	b118      	cbz	r0, b9a6a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9a62:	6863      	ldr	r3, [r4, #4]
   b9a64:	b90b      	cbnz	r3, b9a6a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b9a66:	f7ff fddb 	bl	b9620 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9a6a:	a803      	add	r0, sp, #12
   b9a6c:	f7ff fec9 	bl	b9802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9a70:	b004      	add	sp, #16
   b9a72:	bd10      	pop	{r4, pc}

000b9a74 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9a74:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b9a76:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b9a7a:	2318      	movs	r3, #24
   b9a7c:	4604      	mov	r4, r0
   b9a7e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9a82:	42ae      	cmp	r6, r5
   b9a84:	d015      	beq.n	b9ab2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b9a86:	f105 0110 	add.w	r1, r5, #16
   b9a8a:	4620      	mov	r0, r4
   b9a8c:	f7ff ffc0 	bl	b9a10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9a90:	6863      	ldr	r3, [r4, #4]
   b9a92:	b90b      	cbnz	r3, b9a98 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9a94:	f7ff fdc4 	bl	b9620 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b9a98:	69e0      	ldr	r0, [r4, #28]
   b9a9a:	6929      	ldr	r1, [r5, #16]
   b9a9c:	6803      	ldr	r3, [r0, #0]
   b9a9e:	68db      	ldr	r3, [r3, #12]
   b9aa0:	4798      	blx	r3
        if (h.stream) {
   b9aa2:	6969      	ldr	r1, [r5, #20]
   b9aa4:	b119      	cbz	r1, b9aae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b9aa6:	6a20      	ldr	r0, [r4, #32]
   b9aa8:	6803      	ldr	r3, [r0, #0]
   b9aaa:	68db      	ldr	r3, [r3, #12]
   b9aac:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9aae:	3518      	adds	r5, #24
   b9ab0:	e7e7      	b.n	b9a82 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b9ab2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9ab6:	2618      	movs	r6, #24
   b9ab8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9abc:	42ae      	cmp	r6, r5
   b9abe:	d004      	beq.n	b9aca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9ac0:	4628      	mov	r0, r5
   b9ac2:	f000 ff47 	bl	ba954 <_ZN6StringD1Ev>
   b9ac6:	3518      	adds	r5, #24
   b9ac8:	e7f8      	b.n	b9abc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b9aca:	2300      	movs	r3, #0
   b9acc:	6163      	str	r3, [r4, #20]
}
   b9ace:	bd70      	pop	{r4, r5, r6, pc}

000b9ad0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b9ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9ad2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b9ad4:	f7ff fda4 	bl	b9620 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9ad8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b9adc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ade:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9ae0:	f7ff fc50 	bl	b9384 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b9ae4:	4620      	mov	r0, r4
   b9ae6:	f7ff ffc5 	bl	b9a74 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b9aea:	a801      	add	r0, sp, #4
   b9aec:	f7ff fe89 	bl	b9802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b9af0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9af2:	b108      	cbz	r0, b9af8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b9af4:	f7fe fb70 	bl	b81d8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b9af8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9afc:	2618      	movs	r6, #24
   b9afe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9b02:	42ae      	cmp	r6, r5
   b9b04:	d004      	beq.n	b9b10 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b9b06:	4628      	mov	r0, r5
   b9b08:	f000 ff24 	bl	ba954 <_ZN6StringD1Ev>
   b9b0c:	3518      	adds	r5, #24
   b9b0e:	e7f8      	b.n	b9b02 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b9b10:	6920      	ldr	r0, [r4, #16]
   b9b12:	f7fe fe95 	bl	b8840 <free>
   b9b16:	6820      	ldr	r0, [r4, #0]
   b9b18:	f7fe fe92 	bl	b8840 <free>
}
   b9b1c:	4620      	mov	r0, r4
   b9b1e:	b002      	add	sp, #8
   b9b20:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9b24 <__tcf_2>:
    static LogManager mgr;
   b9b24:	4801      	ldr	r0, [pc, #4]	; (b9b2c <__tcf_2+0x8>)
   b9b26:	f7ff bfd3 	b.w	b9ad0 <_ZN5spark10LogManagerD1Ev>
   b9b2a:	bf00      	nop
   b9b2c:	2003e65c 	.word	0x2003e65c

000b9b30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9b30:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9b34:	4604      	mov	r4, r0
   b9b36:	460d      	mov	r5, r1
   b9b38:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9b3a:	d915      	bls.n	b9b68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9b3c:	4290      	cmp	r0, r2
   b9b3e:	d214      	bcs.n	b9b6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9b40:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9b44:	1a75      	subs	r5, r6, r1
   b9b46:	f1a1 0714 	sub.w	r7, r1, #20
   b9b4a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9b4c:	42b7      	cmp	r7, r6
   b9b4e:	d01a      	beq.n	b9b86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9b50:	b11c      	cbz	r4, b9b5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9b52:	4631      	mov	r1, r6
   b9b54:	4620      	mov	r0, r4
   b9b56:	f7ff fc78 	bl	b944a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b9b5a:	f106 0008 	add.w	r0, r6, #8
   b9b5e:	f7ff fdf9 	bl	b9754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9b62:	3e14      	subs	r6, #20
   b9b64:	3c14      	subs	r4, #20
   b9b66:	e7f1      	b.n	b9b4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b9b68:	d00d      	beq.n	b9b86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b9b6a:	42b5      	cmp	r5, r6
   b9b6c:	d00b      	beq.n	b9b86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9b6e:	b11c      	cbz	r4, b9b78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9b70:	4629      	mov	r1, r5
   b9b72:	4620      	mov	r0, r4
   b9b74:	f7ff fc69 	bl	b944a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b9b78:	f105 0008 	add.w	r0, r5, #8
   b9b7c:	f7ff fdea 	bl	b9754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9b80:	3514      	adds	r5, #20
   b9b82:	3414      	adds	r4, #20
   b9b84:	e7f1      	b.n	b9b6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b9b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9b88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b9b88:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9b8c:	4604      	mov	r4, r0
   b9b8e:	460d      	mov	r5, r1
   b9b90:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9b92:	d914      	bls.n	b9bbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9b94:	4290      	cmp	r0, r2
   b9b96:	d213      	bcs.n	b9bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b9b98:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9b9c:	1a75      	subs	r5, r6, r1
   b9b9e:	f1a1 0710 	sub.w	r7, r1, #16
   b9ba2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9ba4:	42b7      	cmp	r7, r6
   b9ba6:	d018      	beq.n	b9bda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b9ba8:	b11c      	cbz	r4, b9bb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b9baa:	4631      	mov	r1, r6
   b9bac:	4620      	mov	r0, r4
   b9bae:	f000 ff4d 	bl	baa4c <_ZN6StringC1EOS_>
                end->~T();
   b9bb2:	4630      	mov	r0, r6
   b9bb4:	f000 fece 	bl	ba954 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9bb8:	3e10      	subs	r6, #16
   b9bba:	3c10      	subs	r4, #16
   b9bbc:	e7f2      	b.n	b9ba4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9bbe:	d00c      	beq.n	b9bda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9bc0:	42b5      	cmp	r5, r6
   b9bc2:	d00a      	beq.n	b9bda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9bc4:	b11c      	cbz	r4, b9bce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b9bc6:	4629      	mov	r1, r5
   b9bc8:	4620      	mov	r0, r4
   b9bca:	f000 ff3f 	bl	baa4c <_ZN6StringC1EOS_>
                p->~T();
   b9bce:	4628      	mov	r0, r5
   b9bd0:	f000 fec0 	bl	ba954 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9bd4:	3510      	adds	r5, #16
   b9bd6:	3410      	adds	r4, #16
   b9bd8:	e7f2      	b.n	b9bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b9bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9bdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b9bdc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9bde:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9be0:	4605      	mov	r5, r0
        if (n > 0) {
   b9be2:	dd11      	ble.n	b9c08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9be4:	0130      	lsls	r0, r6, #4
   b9be6:	f7fe fe23 	bl	b8830 <malloc>
            if (!d) {
   b9bea:	4604      	mov	r4, r0
   b9bec:	b158      	cbz	r0, b9c06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9bee:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9bf2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b9bf6:	f7ff ffc7 	bl	b9b88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b9bfa:	6828      	ldr	r0, [r5, #0]
   b9bfc:	f7fe fe20 	bl	b8840 <free>
        data_ = d;
   b9c00:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9c02:	60ae      	str	r6, [r5, #8]
        return true;
   b9c04:	2001      	movs	r0, #1
    }
   b9c06:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9c08:	2400      	movs	r4, #0
   b9c0a:	e7f6      	b.n	b9bfa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b9c0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c10:	4690      	mov	r8, r2
   b9c12:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b9c14:	2300      	movs	r3, #0
   b9c16:	9103      	str	r1, [sp, #12]
    return size_;
   b9c18:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b9c1c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9c1e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b9c20:	4299      	cmp	r1, r3
        capacity_(0) {
   b9c22:	e9c0 3300 	strd	r3, r3, [r0]
   b9c26:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9c2e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9c32:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9c34:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b9c36:	dc23      	bgt.n	b9c80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b9c38:	e9d8 5700 	ldrd	r5, r7, [r8]
   b9c3c:	2314      	movs	r3, #20
   b9c3e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b9c42:	42af      	cmp	r7, r5
   b9c44:	d03b      	beq.n	b9cbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b9c46:	4629      	mov	r1, r5
   b9c48:	a80b      	add	r0, sp, #44	; 0x2c
   b9c4a:	f000 feff 	bl	baa4c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b9c4e:	a90b      	add	r1, sp, #44	; 0x2c
   b9c50:	a80f      	add	r0, sp, #60	; 0x3c
   b9c52:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b9c54:	f000 fefa 	bl	baa4c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9c58:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b9c5c:	4299      	cmp	r1, r3
   b9c5e:	da1b      	bge.n	b9c98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b9c60:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b9c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b9c64:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b9c68:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b9c6c:	4631      	mov	r1, r6
   b9c6e:	f106 0010 	add.w	r0, r6, #16
   b9c72:	f7ff ff89 	bl	b9b88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b9c76:	b9ee      	cbnz	r6, b9cb4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b9c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9c7a:	3301      	adds	r3, #1
   b9c7c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b9c7e:	e011      	b.n	b9ca4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b9c80:	a808      	add	r0, sp, #32
   b9c82:	f7ff ffab 	bl	b9bdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9c86:	2800      	cmp	r0, #0
   b9c88:	d1d6      	bne.n	b9c38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b9c8a:	a808      	add	r0, sp, #32
   b9c8c:	f7fe fe57 	bl	b893e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9c90:	4620      	mov	r0, r4
   b9c92:	b015      	add	sp, #84	; 0x54
   b9c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9c98:	3101      	adds	r1, #1
   b9c9a:	a808      	add	r0, sp, #32
   b9c9c:	f7ff ff9e 	bl	b9bdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9ca0:	2800      	cmp	r0, #0
   b9ca2:	d1dd      	bne.n	b9c60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9ca4:	a80f      	add	r0, sp, #60	; 0x3c
   b9ca6:	f000 fe55 	bl	ba954 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b9caa:	a80b      	add	r0, sp, #44	; 0x2c
   b9cac:	f000 fe52 	bl	ba954 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9cb0:	3514      	adds	r5, #20
   b9cb2:	e7c6      	b.n	b9c42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9cb4:	a90f      	add	r1, sp, #60	; 0x3c
   b9cb6:	4630      	mov	r0, r6
   b9cb8:	f000 fec8 	bl	baa4c <_ZN6StringC1EOS_>
   b9cbc:	e7dc      	b.n	b9c78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b9cbe:	2600      	movs	r6, #0
   b9cc0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9cc4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b9cc6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b9cca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b9cce:	429e      	cmp	r6, r3
   b9cd0:	da7c      	bge.n	b9dcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b9cd2:	0133      	lsls	r3, r6, #4
   b9cd4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b9cd6:	9306      	str	r3, [sp, #24]
        if (!category) {
   b9cd8:	b90b      	cbnz	r3, b9cde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b9cda:	3601      	adds	r6, #1
   b9cdc:	e7f5      	b.n	b9cca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b9cde:	2300      	movs	r3, #0
   b9ce0:	9307      	str	r3, [sp, #28]
   b9ce2:	fb09 f306 	mul.w	r3, r9, r6
   b9ce6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b9ce8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b9cea:	a907      	add	r1, sp, #28
   b9cec:	a806      	add	r0, sp, #24
   b9cee:	f7ff fb22 	bl	b9336 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9cf2:	4682      	mov	sl, r0
   b9cf4:	2800      	cmp	r0, #0
   b9cf6:	d0f0      	beq.n	b9cda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b9cf8:	f04f 0300 	mov.w	r3, #0
   b9cfc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d00:	4601      	mov	r1, r0
   b9d02:	9a07      	ldr	r2, [sp, #28]
   b9d04:	f10d 0317 	add.w	r3, sp, #23
   b9d08:	4628      	mov	r0, r5
   b9d0a:	f7ff fbb1 	bl	b9470 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9d0e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d12:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9d14:	2f00      	cmp	r7, #0
   b9d16:	d14a      	bne.n	b9dae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b9d18:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b9d1c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b9d20:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b9d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9d28:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b9d2c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b9d30:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9d32:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b9d36:	4293      	cmp	r3, r2
   b9d38:	db17      	blt.n	b9d6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b9d3a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b9d3e:	f1ba 0f00 	cmp.w	sl, #0
   b9d42:	dd30      	ble.n	b9da6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b9d44:	fb09 f00a 	mul.w	r0, r9, sl
   b9d48:	f7fe fd72 	bl	b8830 <malloc>
            if (!d) {
   b9d4c:	4683      	mov	fp, r0
   b9d4e:	b360      	cbz	r0, b9daa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b9d50:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9d54:	fb09 1202 	mla	r2, r9, r2, r1
   b9d58:	f7ff feea 	bl	b9b30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b9d5c:	6828      	ldr	r0, [r5, #0]
   b9d5e:	f7fe fd6f 	bl	b8840 <free>
        data_ = d;
   b9d62:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b9d66:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b9d6a:	682b      	ldr	r3, [r5, #0]
   b9d6c:	9a01      	ldr	r2, [sp, #4]
   b9d6e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b9d72:	686a      	ldr	r2, [r5, #4]
   b9d74:	4651      	mov	r1, sl
   b9d76:	fb09 3202 	mla	r2, r9, r2, r3
   b9d7a:	f10a 0014 	add.w	r0, sl, #20
   b9d7e:	f7ff fed7 	bl	b9b30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b9d82:	f1ba 0f00 	cmp.w	sl, #0
   b9d86:	d003      	beq.n	b9d90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b9d88:	a90f      	add	r1, sp, #60	; 0x3c
   b9d8a:	4650      	mov	r0, sl
   b9d8c:	f7ff fb5d 	bl	b944a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b9d90:	686b      	ldr	r3, [r5, #4]
   b9d92:	3301      	adds	r3, #1
   b9d94:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b9d96:	a811      	add	r0, sp, #68	; 0x44
   b9d98:	f7ff fcdc 	bl	b9754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9d9c:	b13f      	cbz	r7, b9dae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b9d9e:	a80b      	add	r0, sp, #44	; 0x2c
   b9da0:	f7ff fcd8 	bl	b9754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9da4:	e771      	b.n	b9c8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b9da6:	46bb      	mov	fp, r7
   b9da8:	e7d8      	b.n	b9d5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9daa:	2701      	movs	r7, #1
   b9dac:	e7f3      	b.n	b9d96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b9dae:	9b01      	ldr	r3, [sp, #4]
   b9db0:	682d      	ldr	r5, [r5, #0]
   b9db2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b9db6:	9b06      	ldr	r3, [sp, #24]
   b9db8:	781b      	ldrb	r3, [r3, #0]
   b9dba:	b92b      	cbnz	r3, b9dc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b9dbc:	f8d8 3000 	ldr.w	r3, [r8]
   b9dc0:	9a02      	ldr	r2, [sp, #8]
   b9dc2:	4413      	add	r3, r2
   b9dc4:	7c1b      	ldrb	r3, [r3, #16]
   b9dc6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b9dc8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b9dca:	e78e      	b.n	b9cea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dcc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b9dce:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dd0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9dd2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dd4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9dd6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b9dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b9dda:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9ddc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9dde:	60a2      	str	r2, [r4, #8]
   b9de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b9de2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9de4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9de6:	60e2      	str	r2, [r4, #12]
   b9de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b9dea:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dec:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9dee:	6122      	str	r2, [r4, #16]
   b9df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b9df2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b9df4:	9b03      	ldr	r3, [sp, #12]
   b9df6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b9df8:	6162      	str	r2, [r4, #20]
   b9dfa:	7623      	strb	r3, [r4, #24]
   b9dfc:	e7cf      	b.n	b9d9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b9e00 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e02:	4604      	mov	r4, r0
   b9e04:	b087      	sub	sp, #28
   b9e06:	460d      	mov	r5, r1
        filter_(level, filters) {
   b9e08:	4626      	mov	r6, r4
        stream_(&stream) {
   b9e0a:	4619      	mov	r1, r3
   b9e0c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9e0e:	4617      	mov	r7, r2
        stream_(&stream) {
   b9e10:	f7fb fc81 	bl	b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b9e14:	4b0b      	ldr	r3, [pc, #44]	; (b9e44 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b9e16:	f846 3b04 	str.w	r3, [r6], #4
   b9e1a:	4669      	mov	r1, sp
   b9e1c:	a803      	add	r0, sp, #12
   b9e1e:	f7fb fc7a 	bl	b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b9e22:	aa03      	add	r2, sp, #12
   b9e24:	4639      	mov	r1, r7
   b9e26:	4630      	mov	r0, r6
   b9e28:	f7ff fef0 	bl	b9c0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9e2c:	a803      	add	r0, sp, #12
   b9e2e:	f7fb fc31 	bl	b5694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b9e32:	4668      	mov	r0, sp
   b9e34:	f7fb fc2e 	bl	b5694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9e38:	4b03      	ldr	r3, [pc, #12]	; (b9e48 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b9e3a:	6023      	str	r3, [r4, #0]
}
   b9e3c:	4620      	mov	r0, r4
        stream_(&stream) {
   b9e3e:	6225      	str	r5, [r4, #32]
}
   b9e40:	b007      	add	sp, #28
   b9e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9e44:	000bc9dc 	.word	0x000bc9dc
   b9e48:	000bd288 	.word	0x000bd288

000b9e4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b9e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e4e:	460f      	mov	r7, r1
   b9e50:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9e52:	491d      	ldr	r1, [pc, #116]	; (b9ec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b9e54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9e56:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b9e58:	4616      	mov	r6, r2
   b9e5a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9e5c:	f002 f939 	bl	bc0d2 <strcmp>
   b9e60:	b9c0      	cbnz	r0, b9e94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b9e62:	b1a4      	cbz	r4, b9e8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b9e64:	4629      	mov	r1, r5
   b9e66:	a801      	add	r0, sp, #4
   b9e68:	f7ff fcbc 	bl	b97e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9e6c:	4917      	ldr	r1, [pc, #92]	; (b9ecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9e6e:	2024      	movs	r0, #36	; 0x24
   b9e70:	f001 fb6e 	bl	bb550 <_ZnwjRKSt9nothrow_t>
   b9e74:	4605      	mov	r5, r0
   b9e76:	b130      	cbz	r0, b9e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b9e78:	ab01      	add	r3, sp, #4
   b9e7a:	4632      	mov	r2, r6
   b9e7c:	4621      	mov	r1, r4
   b9e7e:	f7ff ffbf 	bl	b9e00 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9e82:	4b13      	ldr	r3, [pc, #76]	; (b9ed0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b9e84:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9e86:	a801      	add	r0, sp, #4
   b9e88:	f7fb fc04 	bl	b5694 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9e8c:	462c      	mov	r4, r5
}
   b9e8e:	4620      	mov	r0, r4
   b9e90:	b005      	add	sp, #20
   b9e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b9e94:	490f      	ldr	r1, [pc, #60]	; (b9ed4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b9e96:	4638      	mov	r0, r7
   b9e98:	f002 f91b 	bl	bc0d2 <strcmp>
   b9e9c:	b990      	cbnz	r0, b9ec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b9e9e:	2c00      	cmp	r4, #0
   b9ea0:	d0f5      	beq.n	b9e8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9ea2:	4629      	mov	r1, r5
   b9ea4:	a801      	add	r0, sp, #4
   b9ea6:	f7ff fc9d 	bl	b97e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9eaa:	4908      	ldr	r1, [pc, #32]	; (b9ecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9eac:	2024      	movs	r0, #36	; 0x24
   b9eae:	f001 fb4f 	bl	bb550 <_ZnwjRKSt9nothrow_t>
   b9eb2:	4605      	mov	r5, r0
   b9eb4:	2800      	cmp	r0, #0
   b9eb6:	d0e6      	beq.n	b9e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b9eb8:	ab01      	add	r3, sp, #4
   b9eba:	4632      	mov	r2, r6
   b9ebc:	4621      	mov	r1, r4
   b9ebe:	f7ff ff9f 	bl	b9e00 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9ec2:	e7e0      	b.n	b9e86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b9ec4:	2400      	movs	r4, #0
   b9ec6:	e7e2      	b.n	b9e8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b9ec8:	000bd20e 	.word	0x000bd20e
   b9ecc:	000bd3e8 	.word	0x000bd3e8
   b9ed0:	000bd2a0 	.word	0x000bd2a0
   b9ed4:	000bd212 	.word	0x000bd212

000b9ed8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b9ed8:	4b01      	ldr	r3, [pc, #4]	; (b9ee0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9eda:	4a02      	ldr	r2, [pc, #8]	; (b9ee4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9edc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9ede:	4770      	bx	lr
   b9ee0:	2003e658 	.word	0x2003e658
   b9ee4:	000bd223 	.word	0x000bd223

000b9ee8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9eec:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b9eee:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9ef2:	4604      	mov	r4, r0
   b9ef4:	460e      	mov	r6, r1
   b9ef6:	4617      	mov	r7, r2
   b9ef8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b9efa:	f001 f907 	bl	bb10c <_Z16_fetch_usbserialv>
   b9efe:	4581      	cmp	r9, r0
   b9f00:	d04c      	beq.n	b9f9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b9f02:	792b      	ldrb	r3, [r5, #4]
   b9f04:	0719      	lsls	r1, r3, #28
   b9f06:	d504      	bpl.n	b9f12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b9f08:	696a      	ldr	r2, [r5, #20]
   b9f0a:	4954      	ldr	r1, [pc, #336]	; (ba05c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b9f0c:	4620      	mov	r0, r4
   b9f0e:	f7ff fa8d 	bl	b942c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b9f12:	f1b8 0f00 	cmp.w	r8, #0
   b9f16:	d00d      	beq.n	b9f34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b9f18:	215b      	movs	r1, #91	; 0x5b
   b9f1a:	4620      	mov	r0, r4
   b9f1c:	f7ff fa7a 	bl	b9414 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b9f20:	4641      	mov	r1, r8
   b9f22:	4620      	mov	r0, r4
   b9f24:	f7ff fa67 	bl	b93f6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b9f28:	6823      	ldr	r3, [r4, #0]
   b9f2a:	494d      	ldr	r1, [pc, #308]	; (ba060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b9f2c:	68db      	ldr	r3, [r3, #12]
   b9f2e:	2202      	movs	r2, #2
   b9f30:	4620      	mov	r0, r4
   b9f32:	4798      	blx	r3
    if (attr.has_file) {
   b9f34:	792b      	ldrb	r3, [r5, #4]
   b9f36:	07da      	lsls	r2, r3, #31
   b9f38:	d523      	bpl.n	b9f82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b9f3a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b9f3e:	212f      	movs	r1, #47	; 0x2f
   b9f40:	4640      	mov	r0, r8
   b9f42:	f002 f907 	bl	bc154 <strrchr>
    if (s1) {
   b9f46:	b108      	cbz	r0, b9f4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b9f48:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b9f4c:	4641      	mov	r1, r8
   b9f4e:	4620      	mov	r0, r4
   b9f50:	f7ff fa51 	bl	b93f6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b9f54:	792b      	ldrb	r3, [r5, #4]
   b9f56:	079b      	lsls	r3, r3, #30
   b9f58:	d508      	bpl.n	b9f6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b9f5a:	213a      	movs	r1, #58	; 0x3a
   b9f5c:	4620      	mov	r0, r4
   b9f5e:	f7ff fa59 	bl	b9414 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b9f62:	68ea      	ldr	r2, [r5, #12]
   b9f64:	493f      	ldr	r1, [pc, #252]	; (ba064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b9f66:	4620      	mov	r0, r4
   b9f68:	f7ff fa60 	bl	b942c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b9f6c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b9f6e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b9f70:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b9f74:	68db      	ldr	r3, [r3, #12]
   b9f76:	bf14      	ite	ne
   b9f78:	493b      	ldrne	r1, [pc, #236]	; (ba068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b9f7a:	493c      	ldreq	r1, [pc, #240]	; (ba06c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b9f7c:	2202      	movs	r2, #2
            write(": ", 2);
   b9f7e:	4620      	mov	r0, r4
   b9f80:	4798      	blx	r3
    if (attr.has_function) {
   b9f82:	792b      	ldrb	r3, [r5, #4]
   b9f84:	0758      	lsls	r0, r3, #29
   b9f86:	d51d      	bpl.n	b9fc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b9f88:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b9f8a:	460b      	mov	r3, r1
   b9f8c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b9f8e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9f92:	b160      	cbz	r0, b9fae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b9f94:	2820      	cmp	r0, #32
   b9f96:	d108      	bne.n	b9faa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b9f98:	4619      	mov	r1, r3
   b9f9a:	e7f7      	b.n	b9f8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b9f9c:	4834      	ldr	r0, [pc, #208]	; (ba070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b9f9e:	f000 f966 	bl	ba26e <_ZN5spark12NetworkClass9listeningEv>
   b9fa2:	2800      	cmp	r0, #0
   b9fa4:	d0ad      	beq.n	b9f02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b9fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b9faa:	2828      	cmp	r0, #40	; 0x28
   b9fac:	d1ee      	bne.n	b9f8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b9fae:	6823      	ldr	r3, [r4, #0]
   b9fb0:	1a52      	subs	r2, r2, r1
   b9fb2:	68db      	ldr	r3, [r3, #12]
   b9fb4:	4620      	mov	r0, r4
   b9fb6:	4798      	blx	r3
        write("(): ", 4);
   b9fb8:	6823      	ldr	r3, [r4, #0]
   b9fba:	492e      	ldr	r1, [pc, #184]	; (ba074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b9fbc:	68db      	ldr	r3, [r3, #12]
   b9fbe:	2204      	movs	r2, #4
   b9fc0:	4620      	mov	r0, r4
   b9fc2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b9fc4:	2100      	movs	r1, #0
   b9fc6:	4638      	mov	r0, r7
   b9fc8:	f7fe fb26 	bl	b8618 <log_level_name>
   b9fcc:	4601      	mov	r1, r0
    write(s);
   b9fce:	4620      	mov	r0, r4
   b9fd0:	f7ff fa11 	bl	b93f6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b9fd4:	6823      	ldr	r3, [r4, #0]
   b9fd6:	4925      	ldr	r1, [pc, #148]	; (ba06c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b9fd8:	68db      	ldr	r3, [r3, #12]
   b9fda:	2202      	movs	r2, #2
   b9fdc:	4620      	mov	r0, r4
   b9fde:	4798      	blx	r3
    if (msg) {
   b9fe0:	b11e      	cbz	r6, b9fea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b9fe2:	4631      	mov	r1, r6
   b9fe4:	4620      	mov	r0, r4
   b9fe6:	f7ff fa06 	bl	b93f6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b9fea:	792b      	ldrb	r3, [r5, #4]
   b9fec:	f013 0f30 	tst.w	r3, #48	; 0x30
   b9ff0:	d02c      	beq.n	ba04c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b9ff2:	6823      	ldr	r3, [r4, #0]
   b9ff4:	4920      	ldr	r1, [pc, #128]	; (ba078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b9ff6:	68db      	ldr	r3, [r3, #12]
   b9ff8:	2202      	movs	r2, #2
   b9ffa:	4620      	mov	r0, r4
   b9ffc:	4798      	blx	r3
        if (attr.has_code) {
   b9ffe:	792b      	ldrb	r3, [r5, #4]
   ba000:	06d9      	lsls	r1, r3, #27
   ba002:	d50a      	bpl.n	ba01a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba004:	6823      	ldr	r3, [r4, #0]
   ba006:	491d      	ldr	r1, [pc, #116]	; (ba07c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba008:	68db      	ldr	r3, [r3, #12]
   ba00a:	2207      	movs	r2, #7
   ba00c:	4620      	mov	r0, r4
   ba00e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba010:	69aa      	ldr	r2, [r5, #24]
   ba012:	491b      	ldr	r1, [pc, #108]	; (ba080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba014:	4620      	mov	r0, r4
   ba016:	f7ff fa09 	bl	b942c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba01a:	792b      	ldrb	r3, [r5, #4]
   ba01c:	069a      	lsls	r2, r3, #26
   ba01e:	d511      	bpl.n	ba044 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba020:	06db      	lsls	r3, r3, #27
   ba022:	d505      	bpl.n	ba030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba024:	6823      	ldr	r3, [r4, #0]
   ba026:	4910      	ldr	r1, [pc, #64]	; (ba068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba028:	68db      	ldr	r3, [r3, #12]
   ba02a:	2202      	movs	r2, #2
   ba02c:	4620      	mov	r0, r4
   ba02e:	4798      	blx	r3
            write("details = ", 10);
   ba030:	6823      	ldr	r3, [r4, #0]
   ba032:	4914      	ldr	r1, [pc, #80]	; (ba084 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba034:	68db      	ldr	r3, [r3, #12]
   ba036:	4620      	mov	r0, r4
   ba038:	220a      	movs	r2, #10
   ba03a:	4798      	blx	r3
            write(attr.details);
   ba03c:	69e9      	ldr	r1, [r5, #28]
   ba03e:	4620      	mov	r0, r4
   ba040:	f7ff f9d9 	bl	b93f6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba044:	215d      	movs	r1, #93	; 0x5d
   ba046:	4620      	mov	r0, r4
   ba048:	f7ff f9e4 	bl	b9414 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba04c:	6823      	ldr	r3, [r4, #0]
   ba04e:	490e      	ldr	r1, [pc, #56]	; (ba088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba050:	68db      	ldr	r3, [r3, #12]
   ba052:	4620      	mov	r0, r4
   ba054:	2202      	movs	r2, #2
}
   ba056:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba05a:	4718      	bx	r3
   ba05c:	000bd227 	.word	0x000bd227
   ba060:	000bd22e 	.word	0x000bd22e
   ba064:	000bcbdf 	.word	0x000bcbdf
   ba068:	000bd231 	.word	0x000bd231
   ba06c:	000bd236 	.word	0x000bd236
   ba070:	2003e684 	.word	0x2003e684
   ba074:	000bd234 	.word	0x000bd234
   ba078:	000bd239 	.word	0x000bd239
   ba07c:	000bd23c 	.word	0x000bd23c
   ba080:	000bcad4 	.word	0x000bcad4
   ba084:	000bd244 	.word	0x000bd244
   ba088:	000bd24f 	.word	0x000bd24f

000ba08c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba090:	b085      	sub	sp, #20
    return stream_;
   ba092:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba096:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba098:	4605      	mov	r5, r0
   ba09a:	460f      	mov	r7, r1
   ba09c:	4690      	mov	r8, r2
   ba09e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba0a0:	f001 f834 	bl	bb10c <_Z16_fetch_usbserialv>
   ba0a4:	4581      	cmp	r9, r0
   ba0a6:	d105      	bne.n	ba0b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba0a8:	4849      	ldr	r0, [pc, #292]	; (ba1d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba0aa:	f000 f8e0 	bl	ba26e <_ZN5spark12NetworkClass9listeningEv>
   ba0ae:	2800      	cmp	r0, #0
   ba0b0:	f040 808a 	bne.w	ba1c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba0b4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba0b6:	4a47      	ldr	r2, [pc, #284]	; (ba1d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba0b8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba0ba:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba0be:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba0c0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba0c2:	f88d 9008 	strb.w	r9, [sp, #8]
   ba0c6:	f7ff f878 	bl	b91ba <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba0ca:	4649      	mov	r1, r9
   ba0cc:	4640      	mov	r0, r8
   ba0ce:	f7fe faa3 	bl	b8618 <log_level_name>
    json.name("l", 1).value(s);
   ba0d2:	4941      	ldr	r1, [pc, #260]	; (ba1d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba0d4:	4680      	mov	r8, r0
   ba0d6:	2201      	movs	r2, #1
   ba0d8:	a801      	add	r0, sp, #4
   ba0da:	f7ff f8fd 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba0de:	4641      	mov	r1, r8
   ba0e0:	f7ff f97b 	bl	b93da <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba0e4:	b13f      	cbz	r7, ba0f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba0e6:	493d      	ldr	r1, [pc, #244]	; (ba1dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba0e8:	2201      	movs	r2, #1
   ba0ea:	a801      	add	r0, sp, #4
   ba0ec:	f7ff f8f4 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba0f0:	4639      	mov	r1, r7
   ba0f2:	f7ff f972 	bl	b93da <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba0f6:	b13e      	cbz	r6, ba108 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba0f8:	4939      	ldr	r1, [pc, #228]	; (ba1e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba0fa:	2201      	movs	r2, #1
   ba0fc:	a801      	add	r0, sp, #4
   ba0fe:	f7ff f8eb 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba102:	4631      	mov	r1, r6
   ba104:	f7ff f969 	bl	b93da <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba108:	7923      	ldrb	r3, [r4, #4]
   ba10a:	07df      	lsls	r7, r3, #31
   ba10c:	d50e      	bpl.n	ba12c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba10e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba110:	212f      	movs	r1, #47	; 0x2f
   ba112:	4630      	mov	r0, r6
   ba114:	f002 f81e 	bl	bc154 <strrchr>
    if (s1) {
   ba118:	b100      	cbz	r0, ba11c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba11a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba11c:	4931      	ldr	r1, [pc, #196]	; (ba1e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba11e:	2201      	movs	r2, #1
   ba120:	a801      	add	r0, sp, #4
   ba122:	f7ff f8d9 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba126:	4631      	mov	r1, r6
   ba128:	f7ff f957 	bl	b93da <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba12c:	7923      	ldrb	r3, [r4, #4]
   ba12e:	079e      	lsls	r6, r3, #30
   ba130:	d507      	bpl.n	ba142 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba132:	492d      	ldr	r1, [pc, #180]	; (ba1e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba134:	2202      	movs	r2, #2
   ba136:	a801      	add	r0, sp, #4
   ba138:	f7ff f8ce 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba13c:	68e1      	ldr	r1, [r4, #12]
   ba13e:	f7ff f849 	bl	b91d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba142:	7923      	ldrb	r3, [r4, #4]
   ba144:	0758      	lsls	r0, r3, #29
   ba146:	d514      	bpl.n	ba172 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba148:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba14a:	4633      	mov	r3, r6
   ba14c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba14e:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba152:	b12a      	cbz	r2, ba160 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba154:	2a20      	cmp	r2, #32
   ba156:	d101      	bne.n	ba15c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba158:	461e      	mov	r6, r3
   ba15a:	e7f7      	b.n	ba14c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba15c:	2a28      	cmp	r2, #40	; 0x28
   ba15e:	d1f5      	bne.n	ba14c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba160:	4922      	ldr	r1, [pc, #136]	; (ba1ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba162:	2202      	movs	r2, #2
   ba164:	a801      	add	r0, sp, #4
   ba166:	f7ff f8b7 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba16a:	1bba      	subs	r2, r7, r6
   ba16c:	4631      	mov	r1, r6
   ba16e:	f7ff f8c3 	bl	b92f8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba172:	7923      	ldrb	r3, [r4, #4]
   ba174:	0719      	lsls	r1, r3, #28
   ba176:	d507      	bpl.n	ba188 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba178:	491d      	ldr	r1, [pc, #116]	; (ba1f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba17a:	2201      	movs	r2, #1
   ba17c:	a801      	add	r0, sp, #4
   ba17e:	f7ff f8ab 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba182:	6961      	ldr	r1, [r4, #20]
   ba184:	f7ff f838 	bl	b91f8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba188:	7923      	ldrb	r3, [r4, #4]
   ba18a:	06da      	lsls	r2, r3, #27
   ba18c:	d508      	bpl.n	ba1a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba18e:	2204      	movs	r2, #4
   ba190:	4918      	ldr	r1, [pc, #96]	; (ba1f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba192:	eb0d 0002 	add.w	r0, sp, r2
   ba196:	f7ff f89f 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba19a:	69a1      	ldr	r1, [r4, #24]
   ba19c:	f7ff f81a 	bl	b91d4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba1a0:	7923      	ldrb	r3, [r4, #4]
   ba1a2:	069b      	lsls	r3, r3, #26
   ba1a4:	d507      	bpl.n	ba1b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba1a6:	4914      	ldr	r1, [pc, #80]	; (ba1f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba1a8:	2206      	movs	r2, #6
   ba1aa:	a801      	add	r0, sp, #4
   ba1ac:	f7ff f894 	bl	b92d8 <_ZN5spark10JSONWriter4nameEPKcj>
   ba1b0:	69e1      	ldr	r1, [r4, #28]
   ba1b2:	f7ff f912 	bl	b93da <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba1b6:	a801      	add	r0, sp, #4
   ba1b8:	f7fe ffe9 	bl	b918e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba1bc:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba1be:	490f      	ldr	r1, [pc, #60]	; (ba1fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba1c0:	6803      	ldr	r3, [r0, #0]
   ba1c2:	2202      	movs	r2, #2
   ba1c4:	68db      	ldr	r3, [r3, #12]
   ba1c6:	4798      	blx	r3
}
   ba1c8:	b005      	add	sp, #20
   ba1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba1ce:	bf00      	nop
   ba1d0:	2003e684 	.word	0x2003e684
   ba1d4:	000bd270 	.word	0x000bd270
   ba1d8:	000bd204 	.word	0x000bd204
   ba1dc:	000bd252 	.word	0x000bd252
   ba1e0:	000bd509 	.word	0x000bd509
   ba1e4:	000bc65f 	.word	0x000bc65f
   ba1e8:	000bd254 	.word	0x000bd254
   ba1ec:	000bd257 	.word	0x000bd257
   ba1f0:	000bc74d 	.word	0x000bc74d
   ba1f4:	000bd25a 	.word	0x000bd25a
   ba1f8:	000bd25f 	.word	0x000bd25f
   ba1fc:	000bd24f 	.word	0x000bd24f

000ba200 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba200:	2300      	movs	r3, #0
   ba202:	6840      	ldr	r0, [r0, #4]
   ba204:	461a      	mov	r2, r3
   ba206:	f7fe bab3 	b.w	b8770 <network_connect>

000ba20a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba20a:	6840      	ldr	r0, [r0, #4]
   ba20c:	2200      	movs	r2, #0
   ba20e:	2102      	movs	r1, #2
   ba210:	f7fe babe 	b.w	b8790 <network_disconnect>

000ba214 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba214:	2200      	movs	r2, #0
   ba216:	6840      	ldr	r0, [r0, #4]
   ba218:	4611      	mov	r1, r2
   ba21a:	f7fe bab1 	b.w	b8780 <network_connecting>

000ba21e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba21e:	2200      	movs	r2, #0
   ba220:	6840      	ldr	r0, [r0, #4]
   ba222:	4611      	mov	r1, r2
   ba224:	f7fe babc 	b.w	b87a0 <network_ready>

000ba228 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba228:	2300      	movs	r3, #0
   ba22a:	6840      	ldr	r0, [r0, #4]
   ba22c:	461a      	mov	r2, r3
   ba22e:	4619      	mov	r1, r3
   ba230:	f7fe babe 	b.w	b87b0 <network_on>

000ba234 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba234:	2300      	movs	r3, #0
   ba236:	6840      	ldr	r0, [r0, #4]
   ba238:	461a      	mov	r2, r3
   ba23a:	4619      	mov	r1, r3
   ba23c:	f7fe bac0 	b.w	b87c0 <network_off>

000ba240 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba240:	6840      	ldr	r0, [r0, #4]
   ba242:	2100      	movs	r1, #0
   ba244:	f7fe bae4 	b.w	b8810 <network_is_on>

000ba248 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba248:	6840      	ldr	r0, [r0, #4]
   ba24a:	2100      	movs	r1, #0
   ba24c:	f7fe bae8 	b.w	b8820 <network_is_off>

000ba250 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba250:	6840      	ldr	r0, [r0, #4]
   ba252:	2200      	movs	r2, #0
   ba254:	f081 0101 	eor.w	r1, r1, #1
   ba258:	f7fe baba 	b.w	b87d0 <network_listen>

000ba25c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba25c:	6840      	ldr	r0, [r0, #4]
   ba25e:	2200      	movs	r2, #0
   ba260:	f7fe bac6 	b.w	b87f0 <network_set_listen_timeout>

000ba264 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba264:	2200      	movs	r2, #0
   ba266:	6840      	ldr	r0, [r0, #4]
   ba268:	4611      	mov	r1, r2
   ba26a:	f7fe bac9 	b.w	b8800 <network_get_listen_timeout>

000ba26e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba26e:	2200      	movs	r2, #0
   ba270:	6840      	ldr	r0, [r0, #4]
   ba272:	4611      	mov	r1, r2
   ba274:	f7fe bab4 	b.w	b87e0 <network_listening>

000ba278 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba27c:	b095      	sub	sp, #84	; 0x54
   ba27e:	4614      	mov	r4, r2
   ba280:	460d      	mov	r5, r1
   ba282:	4607      	mov	r7, r0
    IPAddress addr;
   ba284:	f7fe fe32 	bl	b8eec <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba288:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba28a:	221c      	movs	r2, #28
   ba28c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba28e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba290:	f001 fe94 	bl	bbfbc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba294:	2340      	movs	r3, #64	; 0x40
   ba296:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba298:	4620      	mov	r0, r4
   ba29a:	466b      	mov	r3, sp
   ba29c:	aa0c      	add	r2, sp, #48	; 0x30
   ba29e:	2100      	movs	r1, #0
   ba2a0:	f7fe f8ba 	bl	b8418 <netdb_getaddrinfo>
    if (!r) {
   ba2a4:	4604      	mov	r4, r0
   ba2a6:	2800      	cmp	r0, #0
   ba2a8:	d14b      	bne.n	ba342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba2aa:	4602      	mov	r2, r0
   ba2ac:	2101      	movs	r1, #1
   ba2ae:	6868      	ldr	r0, [r5, #4]
   ba2b0:	f7fe fa76 	bl	b87a0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2b4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba2b6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2b8:	4622      	mov	r2, r4
   ba2ba:	6868      	ldr	r0, [r5, #4]
   ba2bc:	f7fe fa70 	bl	b87a0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2c0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2c2:	4681      	mov	r9, r0
        bool ok = false;
   ba2c4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2c6:	2e00      	cmp	r6, #0
   ba2c8:	d03b      	beq.n	ba342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba2ca:	2900      	cmp	r1, #0
   ba2cc:	d139      	bne.n	ba342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba2ce:	6873      	ldr	r3, [r6, #4]
   ba2d0:	2b02      	cmp	r3, #2
   ba2d2:	d003      	beq.n	ba2dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba2d4:	2b0a      	cmp	r3, #10
   ba2d6:	d011      	beq.n	ba2fc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2d8:	69f6      	ldr	r6, [r6, #28]
   ba2da:	e7f4      	b.n	ba2c6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba2dc:	f1b8 0f00 	cmp.w	r8, #0
   ba2e0:	d0fa      	beq.n	ba2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba2e2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba2e4:	a806      	add	r0, sp, #24
   ba2e6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba2e8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba2ea:	f7fe fe2d 	bl	b8f48 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba2ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba2f0:	1d3c      	adds	r4, r7, #4
   ba2f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba2f4:	682b      	ldr	r3, [r5, #0]
   ba2f6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba2f8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba2fa:	e7ed      	b.n	ba2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba2fc:	f1b9 0f00 	cmp.w	r9, #0
   ba300:	d0ea      	beq.n	ba2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba302:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba304:	2210      	movs	r2, #16
   ba306:	a801      	add	r0, sp, #4
   ba308:	f001 fe58 	bl	bbfbc <memset>
                    a.v = 6;
   ba30c:	2306      	movs	r3, #6
   ba30e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba312:	ad01      	add	r5, sp, #4
   ba314:	f104 0308 	add.w	r3, r4, #8
   ba318:	3418      	adds	r4, #24
   ba31a:	6818      	ldr	r0, [r3, #0]
   ba31c:	6859      	ldr	r1, [r3, #4]
   ba31e:	462a      	mov	r2, r5
   ba320:	c203      	stmia	r2!, {r0, r1}
   ba322:	3308      	adds	r3, #8
   ba324:	42a3      	cmp	r3, r4
   ba326:	4615      	mov	r5, r2
   ba328:	d1f7      	bne.n	ba31a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba32a:	a901      	add	r1, sp, #4
   ba32c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba32e:	ad07      	add	r5, sp, #28
   ba330:	f7fe fdea 	bl	b8f08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba336:	1d3c      	adds	r4, r7, #4
   ba338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba33a:	682b      	ldr	r3, [r5, #0]
   ba33c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba33e:	4649      	mov	r1, r9
   ba340:	e7ca      	b.n	ba2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba342:	9800      	ldr	r0, [sp, #0]
   ba344:	f7fe f860 	bl	b8408 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba348:	4638      	mov	r0, r7
   ba34a:	b015      	add	sp, #84	; 0x54
   ba34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba350 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba350:	4b02      	ldr	r3, [pc, #8]	; (ba35c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba352:	4a03      	ldr	r2, [pc, #12]	; (ba360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba354:	601a      	str	r2, [r3, #0]
   ba356:	2200      	movs	r2, #0
   ba358:	605a      	str	r2, [r3, #4]

} // spark
   ba35a:	4770      	bx	lr
   ba35c:	2003e684 	.word	0x2003e684
   ba360:	000bd2e8 	.word	0x000bd2e8

000ba364 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   ba364:	b508      	push	{r3, lr}
            return &Wire1;
   ba366:	f001 f88f 	bl	bb488 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   ba36a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   ba36e:	f7fe bd45 	b.w	b8dfc <_ZN7TwoWire4lockEv>

000ba372 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   ba372:	b510      	push	{r4, lr}
   ba374:	4604      	mov	r4, r0
    lock_(_lock)
   ba376:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   ba378:	b109      	cbz	r1, ba37e <_ZN4PMICC1Eb+0xc>
        lock();
   ba37a:	f7ff fff3 	bl	ba364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   ba37e:	4620      	mov	r0, r4
   ba380:	bd10      	pop	{r4, pc}

000ba382 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   ba382:	b508      	push	{r3, lr}
            return &Wire1;
   ba384:	f001 f880 	bl	bb488 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   ba388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   ba38c:	f7fe bd3f 	b.w	b8e0e <_ZN7TwoWire6unlockEv>

000ba390 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   ba390:	b510      	push	{r4, lr}
    if (lock_) {
   ba392:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   ba394:	4604      	mov	r4, r0
    if (lock_) {
   ba396:	b10b      	cbz	r3, ba39c <_ZN4PMICD1Ev+0xc>
        unlock();
   ba398:	f7ff fff3 	bl	ba382 <_ZN4PMIC6unlockEv>
}
   ba39c:	4620      	mov	r0, r4
   ba39e:	bd10      	pop	{r4, pc}

000ba3a0 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   ba3a0:	b510      	push	{r4, lr}
   ba3a2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   ba3a4:	6800      	ldr	r0, [r0, #0]
   ba3a6:	f7ff ffec 	bl	ba382 <_ZN4PMIC6unlockEv>
   ba3aa:	4620      	mov	r0, r4
   ba3ac:	bd10      	pop	{r4, pc}

000ba3ae <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   ba3ae:	b530      	push	{r4, r5, lr}
   ba3b0:	b087      	sub	sp, #28
   ba3b2:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba3b4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba3b6:	f7ff ffd5 	bl	ba364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba3ba:	226b      	movs	r2, #107	; 0x6b
   ba3bc:	2300      	movs	r3, #0
   ba3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba3c2:	2401      	movs	r4, #1
   ba3c4:	230a      	movs	r3, #10
   ba3c6:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   ba3ca:	f001 f85d 	bl	bb488 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba3ce:	a902      	add	r1, sp, #8
   ba3d0:	f7fe fcf8 	bl	b8dc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba3d4:	f001 f858 	bl	bb488 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   ba3d8:	6803      	ldr	r3, [r0, #0]
   ba3da:	4629      	mov	r1, r5
   ba3dc:	689b      	ldr	r3, [r3, #8]
   ba3de:	4798      	blx	r3
            return &Wire1;
   ba3e0:	f001 f852 	bl	bb488 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba3e4:	4621      	mov	r1, r4
   ba3e6:	f7fe fd05 	bl	b8df4 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   ba3ea:	9403      	str	r4, [sp, #12]
            return &Wire1;
   ba3ec:	f001 f84c 	bl	bb488 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   ba3f0:	a902      	add	r1, sp, #8
   ba3f2:	f7fe fcb7 	bl	b8d64 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   ba3f6:	f001 f847 	bl	bb488 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   ba3fa:	6803      	ldr	r3, [r0, #0]
   ba3fc:	695b      	ldr	r3, [r3, #20]
   ba3fe:	4798      	blx	r3
   ba400:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   ba402:	a801      	add	r0, sp, #4
   ba404:	f7ff ffcc 	bl	ba3a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba408:	b2e0      	uxtb	r0, r4
   ba40a:	b007      	add	sp, #28
   ba40c:	bd30      	pop	{r4, r5, pc}

000ba40e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   ba40e:	b570      	push	{r4, r5, r6, lr}
   ba410:	b086      	sub	sp, #24
   ba412:	460d      	mov	r5, r1
   ba414:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba416:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba418:	f7ff ffa4 	bl	ba364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba41c:	226b      	movs	r2, #107	; 0x6b
   ba41e:	2300      	movs	r3, #0
   ba420:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba424:	2601      	movs	r6, #1
   ba426:	230a      	movs	r3, #10
   ba428:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   ba42c:	f001 f82c 	bl	bb488 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba430:	a902      	add	r1, sp, #8
   ba432:	f7fe fcc7 	bl	b8dc4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba436:	f001 f827 	bl	bb488 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   ba43a:	6803      	ldr	r3, [r0, #0]
   ba43c:	4629      	mov	r1, r5
   ba43e:	689b      	ldr	r3, [r3, #8]
   ba440:	4798      	blx	r3
            return &Wire1;
   ba442:	f001 f821 	bl	bb488 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   ba446:	6803      	ldr	r3, [r0, #0]
   ba448:	4621      	mov	r1, r4
   ba44a:	689b      	ldr	r3, [r3, #8]
   ba44c:	4798      	blx	r3
            return &Wire1;
   ba44e:	f001 f81b 	bl	bb488 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba452:	4631      	mov	r1, r6
   ba454:	f7fe fcce 	bl	b8df4 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   ba458:	a801      	add	r0, sp, #4
   ba45a:	f7ff ffa1 	bl	ba3a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba45e:	b006      	add	sp, #24
   ba460:	bd70      	pop	{r4, r5, r6, pc}

000ba462 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   ba462:	b513      	push	{r0, r1, r4, lr}
   ba464:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba466:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba468:	f7ff ff7c 	bl	ba364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba46c:	2101      	movs	r1, #1
   ba46e:	4620      	mov	r0, r4
   ba470:	f7ff ff9d 	bl	ba3ae <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   ba474:	f000 0330 	and.w	r3, r0, #48	; 0x30
   ba478:	2b10      	cmp	r3, #16
   ba47a:	d007      	beq.n	ba48c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   ba47c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   ba480:	f042 0210 	orr.w	r2, r2, #16
   ba484:	2101      	movs	r1, #1
   ba486:	4620      	mov	r0, r4
   ba488:	f7ff ffc1 	bl	ba40e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba48c:	a801      	add	r0, sp, #4
   ba48e:	f7ff ff87 	bl	ba3a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba492:	2001      	movs	r0, #1
   ba494:	b002      	add	sp, #8
   ba496:	bd10      	pop	{r4, pc}

000ba498 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   ba498:	b513      	push	{r0, r1, r4, lr}
   ba49a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba49c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba49e:	f7ff ff61 	bl	ba364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba4a2:	2101      	movs	r1, #1
   ba4a4:	4620      	mov	r0, r4
   ba4a6:	f7ff ff82 	bl	ba3ae <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   ba4aa:	f010 0f30 	tst.w	r0, #48	; 0x30
   ba4ae:	d005      	beq.n	ba4bc <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   ba4b0:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   ba4b4:	2101      	movs	r1, #1
   ba4b6:	4620      	mov	r0, r4
   ba4b8:	f7ff ffa9 	bl	ba40e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba4bc:	a801      	add	r0, sp, #4
   ba4be:	f7ff ff6f 	bl	ba3a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba4c2:	2001      	movs	r0, #1
   ba4c4:	b002      	add	sp, #8
   ba4c6:	bd10      	pop	{r4, pc}

000ba4c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba4ca:	4606      	mov	r6, r0
   ba4cc:	460d      	mov	r5, r1
  size_t n = 0;
   ba4ce:	188f      	adds	r7, r1, r2
   ba4d0:	2400      	movs	r4, #0
  while (size--) {
   ba4d2:	42bd      	cmp	r5, r7
   ba4d4:	d00c      	beq.n	ba4f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba4d6:	6833      	ldr	r3, [r6, #0]
   ba4d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba4dc:	689b      	ldr	r3, [r3, #8]
   ba4de:	4630      	mov	r0, r6
   ba4e0:	4798      	blx	r3
     if (chunk>=0)
   ba4e2:	1e03      	subs	r3, r0, #0
   ba4e4:	db01      	blt.n	ba4ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba4e6:	441c      	add	r4, r3
  while (size--) {
   ba4e8:	e7f3      	b.n	ba4d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba4ea:	2c00      	cmp	r4, #0
   ba4ec:	bf08      	it	eq
   ba4ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba4f0:	4620      	mov	r0, r4
   ba4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba4f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba4f4:	b513      	push	{r0, r1, r4, lr}
   ba4f6:	4604      	mov	r4, r0
    }
   ba4f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba4fa:	b159      	cbz	r1, ba514 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba4fc:	9101      	str	r1, [sp, #4]
   ba4fe:	f001 fdfa 	bl	bc0f6 <strlen>
   ba502:	6823      	ldr	r3, [r4, #0]
   ba504:	9901      	ldr	r1, [sp, #4]
   ba506:	68db      	ldr	r3, [r3, #12]
   ba508:	4602      	mov	r2, r0
   ba50a:	4620      	mov	r0, r4
    }
   ba50c:	b002      	add	sp, #8
   ba50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba512:	4718      	bx	r3
    }
   ba514:	b002      	add	sp, #8
   ba516:	bd10      	pop	{r4, pc}

000ba518 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba518:	b508      	push	{r3, lr}
  return write(str);
   ba51a:	f7ff ffeb 	bl	ba4f4 <_ZN5Print5writeEPKc>
}
   ba51e:	bd08      	pop	{r3, pc}

000ba520 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba520:	6803      	ldr	r3, [r0, #0]
   ba522:	689b      	ldr	r3, [r3, #8]
   ba524:	4718      	bx	r3

000ba526 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba526:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba528:	210d      	movs	r1, #13
{
   ba52a:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba52c:	f7ff fff8 	bl	ba520 <_ZN5Print5printEc>
  n += print('\n');
   ba530:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba532:	4604      	mov	r4, r0
  n += print('\n');
   ba534:	4628      	mov	r0, r5
   ba536:	f7ff fff3 	bl	ba520 <_ZN5Print5printEc>
  return n;
}
   ba53a:	4420      	add	r0, r4
   ba53c:	bd38      	pop	{r3, r4, r5, pc}

000ba53e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba53e:	b530      	push	{r4, r5, lr}
   ba540:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba542:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba544:	2a01      	cmp	r2, #1
  *str = '\0';
   ba546:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba54a:	bf98      	it	ls
   ba54c:	220a      	movls	r2, #10
   ba54e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba550:	460d      	mov	r5, r1
   ba552:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba556:	fb01 5312 	mls	r3, r1, r2, r5
   ba55a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba55e:	2b09      	cmp	r3, #9
   ba560:	bf94      	ite	ls
   ba562:	3330      	addls	r3, #48	; 0x30
   ba564:	3337      	addhi	r3, #55	; 0x37
   ba566:	b2db      	uxtb	r3, r3
  } while(n);
   ba568:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba56a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba56e:	d9ef      	bls.n	ba550 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba570:	4621      	mov	r1, r4
   ba572:	f7ff ffbf 	bl	ba4f4 <_ZN5Print5writeEPKc>
}
   ba576:	b00b      	add	sp, #44	; 0x2c
   ba578:	bd30      	pop	{r4, r5, pc}
	...

000ba57c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   ba57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba580:	ec55 4b10 	vmov	r4, r5, d0
   ba584:	4606      	mov	r6, r0
   ba586:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   ba588:	ee10 2a10 	vmov	r2, s0
   ba58c:	ee10 0a10 	vmov	r0, s0
   ba590:	462b      	mov	r3, r5
   ba592:	4629      	mov	r1, r5
   ba594:	f001 fc3a 	bl	bbe0c <__aeabi_dcmpun>
   ba598:	b140      	cbz	r0, ba5ac <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   ba59a:	4953      	ldr	r1, [pc, #332]	; (ba6e8 <_ZN5Print10printFloatEdh+0x16c>)
   ba59c:	4630      	mov	r0, r6
   ba59e:	f7ff ffa9 	bl	ba4f4 <_ZN5Print5writeEPKc>
   ba5a2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   ba5a4:	4650      	mov	r0, sl
   ba5a6:	b003      	add	sp, #12
   ba5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   ba5ac:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   ba5b0:	4b4e      	ldr	r3, [pc, #312]	; (ba6ec <_ZN5Print10printFloatEdh+0x170>)
   ba5b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5b6:	4620      	mov	r0, r4
   ba5b8:	4649      	mov	r1, r9
   ba5ba:	f001 fc27 	bl	bbe0c <__aeabi_dcmpun>
   ba5be:	b948      	cbnz	r0, ba5d4 <_ZN5Print10printFloatEdh+0x58>
   ba5c0:	4b4a      	ldr	r3, [pc, #296]	; (ba6ec <_ZN5Print10printFloatEdh+0x170>)
   ba5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5c6:	4620      	mov	r0, r4
   ba5c8:	4649      	mov	r1, r9
   ba5ca:	f001 fc01 	bl	bbdd0 <__aeabi_dcmple>
   ba5ce:	b908      	cbnz	r0, ba5d4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   ba5d0:	4947      	ldr	r1, [pc, #284]	; (ba6f0 <_ZN5Print10printFloatEdh+0x174>)
   ba5d2:	e7e3      	b.n	ba59c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   ba5d4:	4b47      	ldr	r3, [pc, #284]	; (ba6f4 <_ZN5Print10printFloatEdh+0x178>)
   ba5d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba5da:	4620      	mov	r0, r4
   ba5dc:	4629      	mov	r1, r5
   ba5de:	f001 fc0b 	bl	bbdf8 <__aeabi_dcmpgt>
   ba5e2:	b108      	cbz	r0, ba5e8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   ba5e4:	4944      	ldr	r1, [pc, #272]	; (ba6f8 <_ZN5Print10printFloatEdh+0x17c>)
   ba5e6:	e7d9      	b.n	ba59c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   ba5e8:	4b44      	ldr	r3, [pc, #272]	; (ba6fc <_ZN5Print10printFloatEdh+0x180>)
   ba5ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba5ee:	4620      	mov	r0, r4
   ba5f0:	4629      	mov	r1, r5
   ba5f2:	f001 fbe3 	bl	bbdbc <__aeabi_dcmplt>
   ba5f6:	2800      	cmp	r0, #0
   ba5f8:	d1f4      	bne.n	ba5e4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   ba5fa:	2200      	movs	r2, #0
   ba5fc:	2300      	movs	r3, #0
   ba5fe:	4620      	mov	r0, r4
   ba600:	4629      	mov	r1, r5
   ba602:	f001 fbdb 	bl	bbdbc <__aeabi_dcmplt>
   ba606:	b1d0      	cbz	r0, ba63e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   ba608:	212d      	movs	r1, #45	; 0x2d
   ba60a:	4630      	mov	r0, r6
   ba60c:	f7ff ff88 	bl	ba520 <_ZN5Print5printEc>
     number = -number;
   ba610:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   ba614:	4682      	mov	sl, r0
     number = -number;
   ba616:	461d      	mov	r5, r3
  double rounding = 0.5;
   ba618:	4939      	ldr	r1, [pc, #228]	; (ba700 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   ba61a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; ba708 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   ba61e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   ba622:	2000      	movs	r0, #0
    rounding /= 10.0;
   ba624:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   ba628:	fa5f f38b 	uxtb.w	r3, fp
   ba62c:	429f      	cmp	r7, r3
   ba62e:	d908      	bls.n	ba642 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   ba630:	4642      	mov	r2, r8
   ba632:	464b      	mov	r3, r9
   ba634:	f001 fa7a 	bl	bbb2c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   ba638:	f10b 0b01 	add.w	fp, fp, #1
   ba63c:	e7f4      	b.n	ba628 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   ba63e:	4682      	mov	sl, r0
   ba640:	e7ea      	b.n	ba618 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   ba642:	4622      	mov	r2, r4
   ba644:	462b      	mov	r3, r5
   ba646:	f000 ff91 	bl	bb56c <__adddf3>
   ba64a:	460d      	mov	r5, r1
   ba64c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   ba64e:	f001 fc1b 	bl	bbe88 <__aeabi_d2uiz>
   ba652:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   ba654:	f001 f8c6 	bl	bb7e4 <__aeabi_ui2d>
   ba658:	4602      	mov	r2, r0
   ba65a:	460b      	mov	r3, r1
   ba65c:	4620      	mov	r0, r4
   ba65e:	4629      	mov	r1, r5
   ba660:	f000 ff82 	bl	bb568 <__aeabi_dsub>
        return printNumber(val, base) + t;
   ba664:	220a      	movs	r2, #10
   ba666:	4604      	mov	r4, r0
   ba668:	460d      	mov	r5, r1
   ba66a:	4630      	mov	r0, r6
   ba66c:	4641      	mov	r1, r8
   ba66e:	f7ff ff66 	bl	ba53e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   ba672:	4482      	add	sl, r0
  if (digits > 0) {
   ba674:	2f00      	cmp	r7, #0
   ba676:	d095      	beq.n	ba5a4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   ba678:	4922      	ldr	r1, [pc, #136]	; (ba704 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   ba67a:	f8df 908c 	ldr.w	r9, [pc, #140]	; ba708 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   ba67e:	4630      	mov	r0, r6
   ba680:	f7ff ff38 	bl	ba4f4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   ba684:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   ba688:	4482      	add	sl, r0
  while (digits-- > 0)
   ba68a:	2f00      	cmp	r7, #0
   ba68c:	d08a      	beq.n	ba5a4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   ba68e:	4642      	mov	r2, r8
   ba690:	464b      	mov	r3, r9
   ba692:	4620      	mov	r0, r4
   ba694:	4629      	mov	r1, r5
   ba696:	f001 f91f 	bl	bb8d8 <__aeabi_dmul>
   ba69a:	4604      	mov	r4, r0
   ba69c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   ba69e:	f001 fbcb 	bl	bbe38 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   ba6a2:	f1b0 0b00 	subs.w	fp, r0, #0
   ba6a6:	da1c      	bge.n	ba6e2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   ba6a8:	212d      	movs	r1, #45	; 0x2d
   ba6aa:	4630      	mov	r0, r6
   ba6ac:	f7ff ff38 	bl	ba520 <_ZN5Print5printEc>
            val = -n;
   ba6b0:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   ba6b4:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   ba6b6:	220a      	movs	r2, #10
   ba6b8:	4630      	mov	r0, r6
   ba6ba:	9301      	str	r3, [sp, #4]
   ba6bc:	f7ff ff3f 	bl	ba53e <_ZN5Print11printNumberEmh>
   ba6c0:	9b01      	ldr	r3, [sp, #4]
   ba6c2:	4418      	add	r0, r3
    n += print(toPrint);
   ba6c4:	4482      	add	sl, r0
    remainder -= toPrint;
   ba6c6:	4658      	mov	r0, fp
   ba6c8:	f001 f89c 	bl	bb804 <__aeabi_i2d>
   ba6cc:	4602      	mov	r2, r0
   ba6ce:	460b      	mov	r3, r1
   ba6d0:	4620      	mov	r0, r4
   ba6d2:	4629      	mov	r1, r5
   ba6d4:	f000 ff48 	bl	bb568 <__aeabi_dsub>
   ba6d8:	3f01      	subs	r7, #1
   ba6da:	4604      	mov	r4, r0
   ba6dc:	460d      	mov	r5, r1
   ba6de:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   ba6e0:	e7d3      	b.n	ba68a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   ba6e2:	4659      	mov	r1, fp
        size_t t = 0;
   ba6e4:	2300      	movs	r3, #0
   ba6e6:	e7e6      	b.n	ba6b6 <_ZN5Print10printFloatEdh+0x13a>
   ba6e8:	000bd31c 	.word	0x000bd31c
   ba6ec:	7fefffff 	.word	0x7fefffff
   ba6f0:	000bd320 	.word	0x000bd320
   ba6f4:	41efffff 	.word	0x41efffff
   ba6f8:	000bd324 	.word	0x000bd324
   ba6fc:	c1efffff 	.word	0xc1efffff
   ba700:	3fe00000 	.word	0x3fe00000
   ba704:	000bd35c 	.word	0x000bd35c
   ba708:	40240000 	.word	0x40240000

000ba70c <_ZN5Print5printEfi>:
{
   ba70c:	b538      	push	{r3, r4, r5, lr}
   ba70e:	4604      	mov	r4, r0
   ba710:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   ba714:	b2cd      	uxtb	r5, r1
   ba716:	f001 f887 	bl	bb828 <__aeabi_f2d>
   ba71a:	ec41 0b10 	vmov	d0, r0, r1
   ba71e:	4629      	mov	r1, r5
   ba720:	4620      	mov	r0, r4
}
   ba722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   ba726:	f7ff bf29 	b.w	ba57c <_ZN5Print10printFloatEdh>

000ba72a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba72e:	b086      	sub	sp, #24
   ba730:	af00      	add	r7, sp, #0
   ba732:	4605      	mov	r5, r0
   ba734:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba736:	1d38      	adds	r0, r7, #4
   ba738:	2114      	movs	r1, #20
{
   ba73a:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba73c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba73e:	f7fe f89f 	bl	b8880 <vsnprintf>

    if (n<bufsize)
   ba742:	2813      	cmp	r0, #19
   ba744:	d80e      	bhi.n	ba764 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba746:	1d39      	adds	r1, r7, #4
   ba748:	4628      	mov	r0, r5
   ba74a:	f7ff fed3 	bl	ba4f4 <_ZN5Print5writeEPKc>
   ba74e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba750:	b11e      	cbz	r6, ba75a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba752:	4628      	mov	r0, r5
   ba754:	f7ff fee7 	bl	ba526 <_ZN5Print7printlnEv>
   ba758:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba75a:	4620      	mov	r0, r4
   ba75c:	3718      	adds	r7, #24
   ba75e:	46bd      	mov	sp, r7
   ba760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba764:	f100 0308 	add.w	r3, r0, #8
   ba768:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba76c:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba76e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba772:	4622      	mov	r2, r4
   ba774:	1c41      	adds	r1, r0, #1
   ba776:	683b      	ldr	r3, [r7, #0]
   ba778:	4668      	mov	r0, sp
   ba77a:	f7fe f881 	bl	b8880 <vsnprintf>
  return write(str);
   ba77e:	4669      	mov	r1, sp
   ba780:	4628      	mov	r0, r5
   ba782:	f7ff feb7 	bl	ba4f4 <_ZN5Print5writeEPKc>
   ba786:	4604      	mov	r4, r0
   ba788:	46c5      	mov	sp, r8
   ba78a:	e7e1      	b.n	ba750 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba78c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   ba78c:	b510      	push	{r4, lr}
  if (0 == max) {
   ba78e:	4604      	mov	r4, r0
   ba790:	b128      	cbz	r0, ba79e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   ba792:	f001 fc49 	bl	bc028 <rand>
   ba796:	fb90 f3f4 	sdiv	r3, r0, r4
   ba79a:	fb03 0414 	mls	r4, r3, r4, r0
}
   ba79e:	4620      	mov	r0, r4
   ba7a0:	bd10      	pop	{r4, pc}

000ba7a2 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   ba7a2:	4288      	cmp	r0, r1
{
   ba7a4:	b510      	push	{r4, lr}
   ba7a6:	4604      	mov	r4, r0
  if (min >= max) {
   ba7a8:	da03      	bge.n	ba7b2 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   ba7aa:	1a08      	subs	r0, r1, r0
   ba7ac:	f7ff ffee 	bl	ba78c <_Z6randomi>
   ba7b0:	4404      	add	r4, r0
}
   ba7b2:	4620      	mov	r0, r4
   ba7b4:	bd10      	pop	{r4, pc}

000ba7b6 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   ba7b6:	f001 bc09 	b.w	bbfcc <srand>
	...

000ba7bc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba7bc:	4b01      	ldr	r3, [pc, #4]	; (ba7c4 <_GLOBAL__sub_I_RGB+0x8>)
   ba7be:	2200      	movs	r2, #0
   ba7c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba7c2:	4770      	bx	lr
   ba7c4:	2003e68c 	.word	0x2003e68c

000ba7c8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba7c8:	2100      	movs	r1, #0
   ba7ca:	f7fd be6d 	b.w	b84a8 <hal_spi_release>

000ba7ce <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba7ce:	2100      	movs	r1, #0
   ba7d0:	f7fd be62 	b.w	b8498 <hal_spi_acquire>

000ba7d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba7d4:	b510      	push	{r4, lr}
   ba7d6:	4604      	mov	r4, r0
   ba7d8:	4608      	mov	r0, r1
{
    _spi = spi;
   ba7da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba7dc:	f7fd fe3c 	bl	b8458 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba7e0:	2300      	movs	r3, #0
   ba7e2:	6063      	str	r3, [r4, #4]
}
   ba7e4:	4620      	mov	r0, r4
   ba7e6:	bd10      	pop	{r4, pc}

000ba7e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba7e8:	b513      	push	{r0, r1, r4, lr}
   ba7ea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba7ec:	7800      	ldrb	r0, [r0, #0]
   ba7ee:	f7ff ffee 	bl	ba7ce <_ZN8SPIClass4lockEv.isra.0>
   ba7f2:	b958      	cbnz	r0, ba80c <_ZN8SPIClass5beginEv+0x24>
   ba7f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba7f6:	9001      	str	r0, [sp, #4]
   ba7f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba7fc:	f7fd fe14 	bl	b8428 <hal_spi_begin>
        unlock();
   ba800:	9801      	ldr	r0, [sp, #4]
    }
}
   ba802:	b002      	add	sp, #8
   ba804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba808:	f7ff bfde 	b.w	ba7c8 <_ZN8SPIClass6unlockEv.isra.0>
   ba80c:	b002      	add	sp, #8
   ba80e:	bd10      	pop	{r4, pc}

000ba810 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   ba810:	b513      	push	{r0, r1, r4, lr}
   ba812:	4604      	mov	r4, r0
    if (!lock())
   ba814:	7800      	ldrb	r0, [r0, #0]
   ba816:	f7ff ffda 	bl	ba7ce <_ZN8SPIClass4lockEv.isra.0>
   ba81a:	b948      	cbnz	r0, ba830 <_ZN8SPIClass3endEv+0x20>
   ba81c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   ba81e:	9001      	str	r0, [sp, #4]
   ba820:	f7fd fe0a 	bl	b8438 <hal_spi_end>
        unlock();
   ba824:	9801      	ldr	r0, [sp, #4]
    }
}
   ba826:	b002      	add	sp, #8
   ba828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba82c:	f7ff bfcc 	b.w	ba7c8 <_ZN8SPIClass6unlockEv.isra.0>
   ba830:	b002      	add	sp, #8
   ba832:	bd10      	pop	{r4, pc}

000ba834 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba834:	7800      	ldrb	r0, [r0, #0]
   ba836:	f7ff bfc7 	b.w	ba7c8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba83c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba83c:	0840      	lsrs	r0, r0, #1
{
   ba83e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba840:	6018      	str	r0, [r3, #0]
   ba842:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba844:	6818      	ldr	r0, [r3, #0]
   ba846:	4288      	cmp	r0, r1
   ba848:	b2e5      	uxtb	r5, r4
   ba84a:	d906      	bls.n	ba85a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba84c:	3401      	adds	r4, #1
   ba84e:	2c08      	cmp	r4, #8
   ba850:	d002      	beq.n	ba858 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba852:	0840      	lsrs	r0, r0, #1
   ba854:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba856:	e7f5      	b.n	ba844 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba858:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba85a:	4b02      	ldr	r3, [pc, #8]	; (ba864 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba85c:	5d5b      	ldrb	r3, [r3, r5]
   ba85e:	7013      	strb	r3, [r2, #0]
}
   ba860:	bd30      	pop	{r4, r5, pc}
   ba862:	bf00      	nop
   ba864:	000bd328 	.word	0x000bd328

000ba868 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba86c:	4606      	mov	r6, r0
   ba86e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba870:	7800      	ldrb	r0, [r0, #0]
{
   ba872:	460c      	mov	r4, r1
    CHECK(lock());
   ba874:	f7ff ffab 	bl	ba7ce <_ZN8SPIClass4lockEv.isra.0>
   ba878:	2800      	cmp	r0, #0
   ba87a:	db1b      	blt.n	ba8b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba87c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba87e:	2214      	movs	r2, #20
   ba880:	2100      	movs	r1, #0
   ba882:	a809      	add	r0, sp, #36	; 0x24
   ba884:	f001 fb9a 	bl	bbfbc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba888:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba88a:	2200      	movs	r2, #0
   ba88c:	a909      	add	r1, sp, #36	; 0x24
   ba88e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba890:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba894:	f7fd fdf0 	bl	b8478 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba898:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba89c:	b113      	cbz	r3, ba8a4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba89e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba8a2:	b155      	cbz	r5, ba8ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba8a4:	2700      	movs	r7, #0
   ba8a6:	46b9      	mov	r9, r7
   ba8a8:	46b8      	mov	r8, r7
   ba8aa:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba8ac:	7923      	ldrb	r3, [r4, #4]
   ba8ae:	b15d      	cbz	r5, ba8c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba8b0:	b1c3      	cbz	r3, ba8e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba8b2:	2000      	movs	r0, #0
}
   ba8b4:	b00f      	add	sp, #60	; 0x3c
   ba8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba8ba:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba8be:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba8c2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba8c6:	e7f1      	b.n	ba8ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba8c8:	2b00      	cmp	r3, #0
   ba8ca:	d135      	bne.n	ba938 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba8cc:	68a3      	ldr	r3, [r4, #8]
   ba8ce:	4543      	cmp	r3, r8
   ba8d0:	d108      	bne.n	ba8e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba8d2:	f88d 9020 	strb.w	r9, [sp, #32]
   ba8d6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba8da:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba8de:	89a3      	ldrh	r3, [r4, #12]
   ba8e0:	429a      	cmp	r2, r3
   ba8e2:	d0e6      	beq.n	ba8b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba8e4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba8e6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba8e8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba8ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba8ee:	ab04      	add	r3, sp, #16
   ba8f0:	f10d 020f 	add.w	r2, sp, #15
   ba8f4:	f7ff ffa2 	bl	ba83c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba8f8:	7921      	ldrb	r1, [r4, #4]
   ba8fa:	b985      	cbnz	r5, ba91e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba8fc:	b989      	cbnz	r1, ba922 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba8fe:	68a3      	ldr	r3, [r4, #8]
   ba900:	4543      	cmp	r3, r8
   ba902:	d30e      	bcc.n	ba922 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba904:	f88d 9020 	strb.w	r9, [sp, #32]
   ba908:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba90c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba910:	89a3      	ldrh	r3, [r4, #12]
   ba912:	429a      	cmp	r2, r3
   ba914:	d105      	bne.n	ba922 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba916:	9b04      	ldr	r3, [sp, #16]
   ba918:	4543      	cmp	r3, r8
   ba91a:	d102      	bne.n	ba922 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba91c:	e7c9      	b.n	ba8b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba91e:	2900      	cmp	r1, #0
   ba920:	d1f9      	bne.n	ba916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba922:	2300      	movs	r3, #0
   ba924:	9301      	str	r3, [sp, #4]
   ba926:	7b63      	ldrb	r3, [r4, #13]
   ba928:	9300      	str	r3, [sp, #0]
   ba92a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba92e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba930:	7830      	ldrb	r0, [r6, #0]
   ba932:	f7fd fda9 	bl	b8488 <hal_spi_set_settings>
   ba936:	e7bc      	b.n	ba8b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba938:	e9cd 5500 	strd	r5, r5, [sp]
   ba93c:	462b      	mov	r3, r5
   ba93e:	462a      	mov	r2, r5
   ba940:	2101      	movs	r1, #1
   ba942:	e7f5      	b.n	ba930 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba944 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba944:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba946:	7800      	ldrb	r0, [r0, #0]
   ba948:	f7fd fd7e 	bl	b8448 <hal_spi_transfer>
}
   ba94c:	b2c0      	uxtb	r0, r0
   ba94e:	bd08      	pop	{r3, pc}

000ba950 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   ba950:	4770      	bx	lr

000ba952 <_ZN8SPIClass15detachInterruptEv>:
   ba952:	4770      	bx	lr

000ba954 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba954:	b510      	push	{r4, lr}
   ba956:	4604      	mov	r4, r0
{
	free(buffer);
   ba958:	6800      	ldr	r0, [r0, #0]
   ba95a:	f7fd ff71 	bl	b8840 <free>
}
   ba95e:	4620      	mov	r0, r4
   ba960:	bd10      	pop	{r4, pc}

000ba962 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba962:	b510      	push	{r4, lr}
   ba964:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba966:	6800      	ldr	r0, [r0, #0]
   ba968:	b108      	cbz	r0, ba96e <_ZN6String10invalidateEv+0xc>
   ba96a:	f7fd ff69 	bl	b8840 <free>
	buffer = NULL;
   ba96e:	2300      	movs	r3, #0
	capacity = len = 0;
   ba970:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba974:	6023      	str	r3, [r4, #0]
}
   ba976:	bd10      	pop	{r4, pc}

000ba978 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba978:	b538      	push	{r3, r4, r5, lr}
   ba97a:	4604      	mov	r4, r0
   ba97c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba97e:	6800      	ldr	r0, [r0, #0]
   ba980:	3101      	adds	r1, #1
   ba982:	f7fd ff65 	bl	b8850 <realloc>
	if (newbuffer) {
   ba986:	b110      	cbz	r0, ba98e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba988:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba98c:	2001      	movs	r0, #1
	}
	return 0;
}
   ba98e:	bd38      	pop	{r3, r4, r5, pc}

000ba990 <_ZN6String7reserveEj>:
{
   ba990:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba992:	6803      	ldr	r3, [r0, #0]
{
   ba994:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba996:	b123      	cbz	r3, ba9a2 <_ZN6String7reserveEj+0x12>
   ba998:	6843      	ldr	r3, [r0, #4]
   ba99a:	428b      	cmp	r3, r1
   ba99c:	d301      	bcc.n	ba9a2 <_ZN6String7reserveEj+0x12>
   ba99e:	2001      	movs	r0, #1
}
   ba9a0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba9a2:	4620      	mov	r0, r4
   ba9a4:	f7ff ffe8 	bl	ba978 <_ZN6String12changeBufferEj>
   ba9a8:	2800      	cmp	r0, #0
   ba9aa:	d0f9      	beq.n	ba9a0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba9ac:	68a3      	ldr	r3, [r4, #8]
   ba9ae:	2b00      	cmp	r3, #0
   ba9b0:	d1f5      	bne.n	ba99e <_ZN6String7reserveEj+0xe>
   ba9b2:	6822      	ldr	r2, [r4, #0]
   ba9b4:	7013      	strb	r3, [r2, #0]
   ba9b6:	e7f2      	b.n	ba99e <_ZN6String7reserveEj+0xe>

000ba9b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba9ba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba9bc:	4611      	mov	r1, r2
   ba9be:	9201      	str	r2, [sp, #4]
{
   ba9c0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba9c2:	f7ff ffe5 	bl	ba990 <_ZN6String7reserveEj>
   ba9c6:	9a01      	ldr	r2, [sp, #4]
   ba9c8:	b928      	cbnz	r0, ba9d6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba9ca:	4620      	mov	r0, r4
   ba9cc:	f7ff ffc9 	bl	ba962 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba9d0:	4620      	mov	r0, r4
   ba9d2:	b003      	add	sp, #12
   ba9d4:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba9d6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba9d8:	4629      	mov	r1, r5
   ba9da:	6820      	ldr	r0, [r4, #0]
   ba9dc:	f001 fac6 	bl	bbf6c <memcpy>
	buffer[len] = 0;
   ba9e0:	6822      	ldr	r2, [r4, #0]
   ba9e2:	68a3      	ldr	r3, [r4, #8]
   ba9e4:	2100      	movs	r1, #0
   ba9e6:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba9e8:	e7f2      	b.n	ba9d0 <_ZN6String4copyEPKcj+0x18>

000ba9ea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba9ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba9ec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba9ee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba9f2:	4604      	mov	r4, r0
	len = 0;
   ba9f4:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba9f6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba9f8:	b141      	cbz	r1, baa0c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba9fa:	4608      	mov	r0, r1
   ba9fc:	9101      	str	r1, [sp, #4]
   ba9fe:	f001 fb7a 	bl	bc0f6 <strlen>
   baa02:	9901      	ldr	r1, [sp, #4]
   baa04:	4602      	mov	r2, r0
   baa06:	4620      	mov	r0, r4
   baa08:	f7ff ffd6 	bl	ba9b8 <_ZN6String4copyEPKcj>
}
   baa0c:	4620      	mov	r0, r4
   baa0e:	b002      	add	sp, #8
   baa10:	bd10      	pop	{r4, pc}

000baa12 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   baa12:	b538      	push	{r3, r4, r5, lr}
   baa14:	4605      	mov	r5, r0
	if (buffer) {
   baa16:	6800      	ldr	r0, [r0, #0]
{
   baa18:	460c      	mov	r4, r1
	if (buffer) {
   baa1a:	b168      	cbz	r0, baa38 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   baa1c:	686a      	ldr	r2, [r5, #4]
   baa1e:	688b      	ldr	r3, [r1, #8]
   baa20:	429a      	cmp	r2, r3
   baa22:	d307      	bcc.n	baa34 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   baa24:	6809      	ldr	r1, [r1, #0]
   baa26:	f001 fb5e 	bl	bc0e6 <strcpy>
			len = rhs.len;
   baa2a:	68a3      	ldr	r3, [r4, #8]
   baa2c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   baa2e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   baa30:	60a3      	str	r3, [r4, #8]
}
   baa32:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   baa34:	f7fd ff04 	bl	b8840 <free>
	buffer = rhs.buffer;
   baa38:	6823      	ldr	r3, [r4, #0]
   baa3a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   baa3c:	6863      	ldr	r3, [r4, #4]
   baa3e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   baa40:	68a3      	ldr	r3, [r4, #8]
   baa42:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   baa44:	2300      	movs	r3, #0
	rhs.capacity = 0;
   baa46:	e9c4 3300 	strd	r3, r3, [r4]
   baa4a:	e7f1      	b.n	baa30 <_ZN6String4moveERS_+0x1e>

000baa4c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   baa4c:	b510      	push	{r4, lr}
	buffer = NULL;
   baa4e:	2300      	movs	r3, #0
	capacity = 0;
   baa50:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   baa54:	4604      	mov	r4, r0
	len = 0;
   baa56:	6083      	str	r3, [r0, #8]
	flags = 0;
   baa58:	7303      	strb	r3, [r0, #12]
	move(rval);
   baa5a:	f7ff ffda 	bl	baa12 <_ZN6String4moveERS_>
}
   baa5e:	4620      	mov	r0, r4
   baa60:	bd10      	pop	{r4, pc}

000baa62 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   baa62:	4288      	cmp	r0, r1
{
   baa64:	b510      	push	{r4, lr}
   baa66:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   baa68:	d005      	beq.n	baa76 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   baa6a:	680b      	ldr	r3, [r1, #0]
   baa6c:	b12b      	cbz	r3, baa7a <_ZN6StringaSERKS_+0x18>
   baa6e:	688a      	ldr	r2, [r1, #8]
   baa70:	4619      	mov	r1, r3
   baa72:	f7ff ffa1 	bl	ba9b8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   baa76:	4620      	mov	r0, r4
   baa78:	bd10      	pop	{r4, pc}
	else invalidate();
   baa7a:	f7ff ff72 	bl	ba962 <_ZN6String10invalidateEv>
   baa7e:	e7fa      	b.n	baa76 <_ZN6StringaSERKS_+0x14>

000baa80 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   baa80:	b510      	push	{r4, lr}
	buffer = NULL;
   baa82:	2300      	movs	r3, #0
String::String(const String &value)
   baa84:	4604      	mov	r4, r0
	capacity = 0;
   baa86:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   baa8a:	6083      	str	r3, [r0, #8]
	flags = 0;
   baa8c:	7303      	strb	r3, [r0, #12]
	*this = value;
   baa8e:	f7ff ffe8 	bl	baa62 <_ZN6StringaSERKS_>
}
   baa92:	4620      	mov	r0, r4
   baa94:	bd10      	pop	{r4, pc}
	...

000baa98 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   baa98:	b40e      	push	{r1, r2, r3}
   baa9a:	b570      	push	{r4, r5, r6, lr}
   baa9c:	b087      	sub	sp, #28
   baa9e:	ad0b      	add	r5, sp, #44	; 0x2c
   baaa0:	4604      	mov	r4, r0
   baaa2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   baaa6:	9201      	str	r2, [sp, #4]
   baaa8:	462b      	mov	r3, r5
   baaaa:	2105      	movs	r1, #5
   baaac:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   baaae:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   baab0:	f7fd fee6 	bl	b8880 <vsnprintf>
    va_end(marker);

    String result;
   baab4:	490b      	ldr	r1, [pc, #44]	; (baae4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   baab6:	4606      	mov	r6, r0
    String result;
   baab8:	4620      	mov	r0, r4
   baaba:	f7ff ff96 	bl	ba9ea <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   baabe:	4631      	mov	r1, r6
   baac0:	4620      	mov	r0, r4
   baac2:	f7ff ff65 	bl	ba990 <_ZN6String7reserveEj>
    if (result.buffer) {
   baac6:	6820      	ldr	r0, [r4, #0]
   baac8:	b130      	cbz	r0, baad8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   baaca:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   baacc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   baace:	462b      	mov	r3, r5
   baad0:	1c71      	adds	r1, r6, #1
   baad2:	f7fd fed5 	bl	b8880 <vsnprintf>
        va_end(marker);
        result.len = n;
   baad6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   baad8:	4620      	mov	r0, r4
   baada:	b007      	add	sp, #28
   baadc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   baae0:	b003      	add	sp, #12
   baae2:	4770      	bx	lr
   baae4:	000bd251 	.word	0x000bd251

000baae8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   baae8:	b510      	push	{r4, lr}
   baaea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   baaec:	6800      	ldr	r0, [r0, #0]
   baaee:	b118      	cbz	r0, baaf8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   baaf0:	f7fd fea6 	bl	b8840 <free>
            wakeupSource_ = nullptr;
   baaf4:	2300      	movs	r3, #0
   baaf6:	6023      	str	r3, [r4, #0]
        }
    }
   baaf8:	bd10      	pop	{r4, pc}

000baafa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   baafa:	b538      	push	{r3, r4, r5, lr}
   baafc:	460c      	mov	r4, r1
   baafe:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bab00:	f7ff fff2 	bl	baae8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bab04:	b154      	cbz	r4, bab1c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bab06:	8820      	ldrh	r0, [r4, #0]
   bab08:	f7fd fe92 	bl	b8830 <malloc>
   bab0c:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bab0e:	b128      	cbz	r0, bab1c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bab10:	8822      	ldrh	r2, [r4, #0]
   bab12:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bab14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bab18:	f001 ba28 	b.w	bbf6c <memcpy>
    }
   bab1c:	bd38      	pop	{r3, r4, r5, pc}

000bab1e <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bab1e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bab20:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bab24:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bab26:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bab2a:	f8c0 3006 	str.w	r3, [r0, #6]
   bab2e:	894b      	ldrh	r3, [r1, #10]
   bab30:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bab32:	460c      	mov	r4, r1
   bab34:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bab36:	f7ff ffd7 	bl	baae8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bab3a:	6823      	ldr	r3, [r4, #0]
   bab3c:	b113      	cbz	r3, bab44 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bab3e:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bab40:	2300      	movs	r3, #0
   bab42:	6023      	str	r3, [r4, #0]
    }
   bab44:	bd38      	pop	{r3, r4, r5, pc}

000bab46 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bab46:	b507      	push	{r0, r1, r2, lr}
   bab48:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bab4a:	2100      	movs	r1, #0
{
   bab4c:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bab4e:	9100      	str	r1, [sp, #0]
   bab50:	2001      	movs	r0, #1
   bab52:	218c      	movs	r1, #140	; 0x8c
   bab54:	f7fd fdda 	bl	b870c <system_reset>
}
   bab58:	b003      	add	sp, #12
   bab5a:	f85d fb04 	ldr.w	pc, [sp], #4

000bab5e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bab5e:	4601      	mov	r1, r0
    reset(0, flags);
   bab60:	2000      	movs	r0, #0
   bab62:	f7ff bff0 	b.w	bab46 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bab66 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bab66:	2000      	movs	r0, #0
   bab68:	f7ff bff9 	b.w	bab5e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bab6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bab6e:	4d2b      	ldr	r5, [pc, #172]	; (bac1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bab70:	7d0b      	ldrb	r3, [r1, #20]
   bab72:	4604      	mov	r4, r0
   bab74:	b08b      	sub	sp, #44	; 0x2c
   bab76:	4608      	mov	r0, r1
   bab78:	1daf      	adds	r7, r5, #6
   bab7a:	2b00      	cmp	r3, #0
   bab7c:	d036      	beq.n	babec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bab7e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bab80:	791b      	ldrb	r3, [r3, #4]
   bab82:	2b00      	cmp	r3, #0
   bab84:	d032      	beq.n	babec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bab86:	4b26      	ldr	r3, [pc, #152]	; (bac20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bab88:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bab8a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bab8c:	a902      	add	r1, sp, #8
   bab8e:	3004      	adds	r0, #4
   bab90:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bab94:	f7fd fdb0 	bl	b86f8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bab98:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bab9c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   baba0:	b200      	sxth	r0, r0
   baba2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   baba6:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   babaa:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   babac:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   babae:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   babb0:	4628      	mov	r0, r5
   babb2:	f7ff ffa2 	bl	baafa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   babb6:	a802      	add	r0, sp, #8
   babb8:	f7ff ff96 	bl	baae8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   babbc:	2300      	movs	r3, #0
   babbe:	6023      	str	r3, [r4, #0]
   babc0:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   babc2:	71a3      	strb	r3, [r4, #6]
   babc4:	8123      	strh	r3, [r4, #8]
   babc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   babca:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   babcc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   babd0:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   babd2:	f8d5 3006 	ldr.w	r3, [r5, #6]
   babd6:	f8c4 3006 	str.w	r3, [r4, #6]
   babda:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   babdc:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   babde:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   babe0:	4620      	mov	r0, r4
   babe2:	f7ff ff8a 	bl	baafa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   babe6:	4620      	mov	r0, r4
   babe8:	b00b      	add	sp, #44	; 0x2c
   babea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   babec:	2600      	movs	r6, #0
   babee:	2320      	movs	r3, #32
   babf0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   babf4:	4b0b      	ldr	r3, [pc, #44]	; (bac24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   babf6:	9300      	str	r3, [sp, #0]
   babf8:	aa02      	add	r2, sp, #8
   babfa:	4633      	mov	r3, r6
   babfc:	490a      	ldr	r1, [pc, #40]	; (bac28 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   babfe:	2032      	movs	r0, #50	; 0x32
   bac00:	f7fd fcfa 	bl	b85f8 <log_message>
            : wakeupSource_(nullptr),
   bac04:	4b06      	ldr	r3, [pc, #24]	; (bac20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bac06:	4805      	ldr	r0, [pc, #20]	; (bac1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bac08:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bac0a:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bac0e:	a902      	add	r1, sp, #8
   bac10:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bac14:	f7ff ff83 	bl	bab1e <_ZN17SystemSleepResultaSEOS_.isra.0>
   bac18:	e7cd      	b.n	babb6 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bac1a:	bf00      	nop
   bac1c:	2003e69c 	.word	0x2003e69c
   bac20:	ffff0000 	.word	0xffff0000
   bac24:	000bd337 	.word	0x000bd337
   bac28:	000bd330 	.word	0x000bd330

000bac2c <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bac2c:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bac2e:	2420      	movs	r4, #32
{
   bac30:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bac32:	4622      	mov	r2, r4
   bac34:	2100      	movs	r1, #0
   bac36:	4668      	mov	r0, sp
   bac38:	f001 f9c0 	bl	bbfbc <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bac3c:	2100      	movs	r1, #0
   bac3e:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bac40:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bac44:	f7fd fae0 	bl	b8208 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bac48:	9801      	ldr	r0, [sp, #4]
   bac4a:	b008      	add	sp, #32
   bac4c:	bd10      	pop	{r4, pc}
	...

000bac50 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bac50:	4b05      	ldr	r3, [pc, #20]	; (bac68 <_GLOBAL__sub_I_System+0x18>)
   bac52:	2202      	movs	r2, #2
   bac54:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bac56:	4b05      	ldr	r3, [pc, #20]	; (bac6c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bac58:	4a05      	ldr	r2, [pc, #20]	; (bac70 <_GLOBAL__sub_I_System+0x20>)
   bac5a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bac5c:	2000      	movs	r0, #0
   bac5e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bac62:	f7fd bcfb 	b.w	b865c <set_system_mode>
   bac66:	bf00      	nop
   bac68:	2003e6a8 	.word	0x2003e6a8
   bac6c:	2003e69c 	.word	0x2003e69c
   bac70:	ffff0000 	.word	0xffff0000

000bac74 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bac74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bac78:	4a15      	ldr	r2, [pc, #84]	; (bacd0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bac7a:	f8df 8060 	ldr.w	r8, [pc, #96]	; bacdc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bac7e:	e9d2 6300 	ldrd	r6, r3, [r2]
   bac82:	1980      	adds	r0, r0, r6
   bac84:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bac88:	4b12      	ldr	r3, [pc, #72]	; (bacd4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bac8a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bac8e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bac92:	1986      	adds	r6, r0, r6
   bac94:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bac98:	42bb      	cmp	r3, r7
   bac9a:	bf08      	it	eq
   bac9c:	42b2      	cmpeq	r2, r6
{
   bac9e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   baca0:	d013      	beq.n	bacca <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   baca2:	a903      	add	r1, sp, #12
   baca4:	4668      	mov	r0, sp
   baca6:	e9cd 6700 	strd	r6, r7, [sp]
   bacaa:	f7fd fe19 	bl	b88e0 <localtime_r>
	calendar_time.tm_year += 1900;
   bacae:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bacb0:	4d09      	ldr	r5, [pc, #36]	; (bacd8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bacb2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bacb6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bacb8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bacba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bacbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bacbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bacc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bacc2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bacc6:	6823      	ldr	r3, [r4, #0]
   bacc8:	602b      	str	r3, [r5, #0]
    }
}
   bacca:	b00c      	add	sp, #48	; 0x30
   baccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bacd0:	2003e6e0 	.word	0x2003e6e0
   bacd4:	2003e6d8 	.word	0x2003e6d8
   bacd8:	2003e6b4 	.word	0x2003e6b4
   bacdc:	2003e6e8 	.word	0x2003e6e8

000bace0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bace0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bace2:	2000      	movs	r0, #0
   bace4:	f7fd fd2c 	bl	b8740 <spark_sync_time_pending>
   bace8:	b128      	cbz	r0, bacf6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bacea:	f7fd fd21 	bl	b8730 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bacee:	f080 0001 	eor.w	r0, r0, #1
   bacf2:	b2c0      	uxtb	r0, r0
    }
   bacf4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bacf6:	2001      	movs	r0, #1
   bacf8:	e7fc      	b.n	bacf4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bacfc <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bacfc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bacfe:	f7ff ffb9 	bl	bac74 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bad02:	4b01      	ldr	r3, [pc, #4]	; (bad08 <_ZN9TimeClass3dayEx+0xc>)
   bad04:	68d8      	ldr	r0, [r3, #12]
   bad06:	bd08      	pop	{r3, pc}
   bad08:	2003e6b4 	.word	0x2003e6b4

000bad0c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bad0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bad0e:	4602      	mov	r2, r0
   bad10:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bad12:	4668      	mov	r0, sp
    struct timeval tv = {
   bad14:	2100      	movs	r1, #0
    };
   bad16:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bad1a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bad1e:	f7fd fab3 	bl	b8288 <hal_rtc_set_time>
   bad22:	4602      	mov	r2, r0
   bad24:	b910      	cbnz	r0, bad2c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bad26:	4601      	mov	r1, r0
   bad28:	f7fd fcc0 	bl	b86ac <system_notify_time_changed>
    }
}
   bad2c:	b005      	add	sp, #20
   bad2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bad34 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bad34:	b530      	push	{r4, r5, lr}
   bad36:	b093      	sub	sp, #76	; 0x4c
   bad38:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bad3c:	4b19      	ldr	r3, [pc, #100]	; (bada4 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bad3e:	4604      	mov	r4, r0
    t += time_zone_cache;
   bad40:	e9d3 1000 	ldrd	r1, r0, [r3]
   bad44:	9b01      	ldr	r3, [sp, #4]
   bad46:	1852      	adds	r2, r2, r1
   bad48:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bad4c:	4816      	ldr	r0, [pc, #88]	; (bada8 <_ZN9TimeClass7timeStrEx+0x74>)
   bad4e:	e9d0 1000 	ldrd	r1, r0, [r0]
   bad52:	1852      	adds	r2, r2, r1
   bad54:	eb43 0300 	adc.w	r3, r3, r0
   bad58:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bad5c:	2224      	movs	r2, #36	; 0x24
   bad5e:	eb0d 0002 	add.w	r0, sp, r2
   bad62:	2100      	movs	r1, #0
   bad64:	f001 f92a 	bl	bbfbc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bad68:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bad6a:	a909      	add	r1, sp, #36	; 0x24
   bad6c:	4668      	mov	r0, sp
   bad6e:	f7fd fdb7 	bl	b88e0 <localtime_r>
    char ascstr[26] = {};
   bad72:	2216      	movs	r2, #22
   bad74:	4629      	mov	r1, r5
   bad76:	a803      	add	r0, sp, #12
   bad78:	9502      	str	r5, [sp, #8]
   bad7a:	f001 f91f 	bl	bbfbc <memset>
    asctime_r(&calendar_time, ascstr);
   bad7e:	a902      	add	r1, sp, #8
   bad80:	a809      	add	r0, sp, #36	; 0x24
   bad82:	f001 f8a1 	bl	bbec8 <asctime_r>
    int len = strlen(ascstr);
   bad86:	a802      	add	r0, sp, #8
   bad88:	f001 f9b5 	bl	bc0f6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bad8c:	ab12      	add	r3, sp, #72	; 0x48
   bad8e:	4418      	add	r0, r3
    return String(ascstr);
   bad90:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bad92:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bad96:	4620      	mov	r0, r4
   bad98:	f7ff fe27 	bl	ba9ea <_ZN6StringC1EPK19__FlashStringHelper>
}
   bad9c:	4620      	mov	r0, r4
   bad9e:	b013      	add	sp, #76	; 0x4c
   bada0:	bd30      	pop	{r4, r5, pc}
   bada2:	bf00      	nop
   bada4:	2003e6e0 	.word	0x2003e6e0
   bada8:	2003e6d8 	.word	0x2003e6d8

000badac <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   badac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   badb0:	b0a4      	sub	sp, #144	; 0x90
   badb2:	4607      	mov	r7, r0
   badb4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   badb6:	a814      	add	r0, sp, #80	; 0x50
{
   badb8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   badba:	223f      	movs	r2, #63	; 0x3f
{
   badbc:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   badbe:	f001 f9b6 	bl	bc12e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   badc2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   badc4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   badc6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   badca:	f001 f994 	bl	bc0f6 <strlen>
   badce:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   badd0:	bb4c      	cbnz	r4, bae26 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   badd2:	4929      	ldr	r1, [pc, #164]	; (bae78 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   badd4:	a803      	add	r0, sp, #12
   badd6:	f001 f986 	bl	bc0e6 <strcpy>
   badda:	ac14      	add	r4, sp, #80	; 0x50
{
   baddc:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   badde:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bade2:	45b1      	cmp	r9, r6
   bade4:	d934      	bls.n	bae50 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bade6:	7823      	ldrb	r3, [r4, #0]
   bade8:	2b25      	cmp	r3, #37	; 0x25
   badea:	f106 0a01 	add.w	sl, r6, #1
   badee:	d117      	bne.n	bae20 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   badf0:	7863      	ldrb	r3, [r4, #1]
   badf2:	2b7a      	cmp	r3, #122	; 0x7a
   badf4:	d114      	bne.n	bae20 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   badf6:	a803      	add	r0, sp, #12
   badf8:	f001 f97d 	bl	bc0f6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   badfc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   badfe:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bae00:	1830      	adds	r0, r6, r0
   bae02:	4418      	add	r0, r3
   bae04:	eba9 0206 	sub.w	r2, r9, r6
   bae08:	1ca1      	adds	r1, r4, #2
   bae0a:	f001 f8af 	bl	bbf6c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bae0e:	462a      	mov	r2, r5
   bae10:	a903      	add	r1, sp, #12
   bae12:	4620      	mov	r0, r4
   bae14:	f001 f8aa 	bl	bbf6c <memcpy>
            len = strlen(format_str);
   bae18:	a814      	add	r0, sp, #80	; 0x50
   bae1a:	f001 f96c 	bl	bc0f6 <strlen>
   bae1e:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bae20:	3401      	adds	r4, #1
   bae22:	4656      	mov	r6, sl
   bae24:	e7db      	b.n	badde <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bae26:	233c      	movs	r3, #60	; 0x3c
   bae28:	fb94 f2f3 	sdiv	r2, r4, r3
   bae2c:	2a00      	cmp	r2, #0
   bae2e:	bfb8      	it	lt
   bae30:	4252      	neglt	r2, r2
   bae32:	fbb2 f1f3 	udiv	r1, r2, r3
   bae36:	fb03 2211 	mls	r2, r3, r1, r2
   bae3a:	9200      	str	r2, [sp, #0]
   bae3c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bae40:	4a0e      	ldr	r2, [pc, #56]	; (bae7c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bae42:	fb94 f3f3 	sdiv	r3, r4, r3
   bae46:	2110      	movs	r1, #16
   bae48:	a803      	add	r0, sp, #12
   bae4a:	f7fd fd11 	bl	b8870 <snprintf>
   bae4e:	e7c4      	b.n	badda <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bae50:	2100      	movs	r1, #0
   bae52:	222e      	movs	r2, #46	; 0x2e
   bae54:	a808      	add	r0, sp, #32
   bae56:	9107      	str	r1, [sp, #28]
   bae58:	f001 f8b0 	bl	bbfbc <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bae5c:	4643      	mov	r3, r8
   bae5e:	aa14      	add	r2, sp, #80	; 0x50
   bae60:	2132      	movs	r1, #50	; 0x32
   bae62:	a807      	add	r0, sp, #28
   bae64:	f7fd fd34 	bl	b88d0 <strftime>
    return String(buf);
   bae68:	a907      	add	r1, sp, #28
   bae6a:	4638      	mov	r0, r7
   bae6c:	f7ff fdbd 	bl	ba9ea <_ZN6StringC1EPK19__FlashStringHelper>
}
   bae70:	4638      	mov	r0, r7
   bae72:	b024      	add	sp, #144	; 0x90
   bae74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bae78:	000bd35e 	.word	0x000bd35e
   bae7c:	000bd360 	.word	0x000bd360

000bae80 <_ZN9TimeClass6formatExPKc>:
{
   bae80:	b5f0      	push	{r4, r5, r6, r7, lr}
   bae82:	b08d      	sub	sp, #52	; 0x34
   bae84:	e9cd 2300 	strd	r2, r3, [sp]
   bae88:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bae8a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bae8c:	b915      	cbnz	r5, bae94 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bae8e:	4b19      	ldr	r3, [pc, #100]	; (baef4 <_ZN9TimeClass6formatExPKc+0x74>)
   bae90:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bae92:	b12d      	cbz	r5, baea0 <_ZN9TimeClass6formatExPKc+0x20>
   bae94:	4b18      	ldr	r3, [pc, #96]	; (baef8 <_ZN9TimeClass6formatExPKc+0x78>)
   bae96:	4628      	mov	r0, r5
   bae98:	6819      	ldr	r1, [r3, #0]
   bae9a:	f001 f91a 	bl	bc0d2 <strcmp>
   bae9e:	b938      	cbnz	r0, baeb0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   baea0:	e9dd 2300 	ldrd	r2, r3, [sp]
   baea4:	4620      	mov	r0, r4
   baea6:	f7ff ff45 	bl	bad34 <_ZN9TimeClass7timeStrEx>
}
   baeaa:	4620      	mov	r0, r4
   baeac:	b00d      	add	sp, #52	; 0x34
   baeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   baeb0:	4e12      	ldr	r6, [pc, #72]	; (baefc <_ZN9TimeClass6formatExPKc+0x7c>)
   baeb2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   baeb4:	4f12      	ldr	r7, [pc, #72]	; (baf00 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   baeb6:	e9d6 3200 	ldrd	r3, r2, [r6]
   baeba:	185b      	adds	r3, r3, r1
   baebc:	9901      	ldr	r1, [sp, #4]
   baebe:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   baec2:	e9d7 0100 	ldrd	r0, r1, [r7]
   baec6:	181b      	adds	r3, r3, r0
   baec8:	eb42 0201 	adc.w	r2, r2, r1
   baecc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   baed0:	2100      	movs	r1, #0
   baed2:	2224      	movs	r2, #36	; 0x24
   baed4:	a803      	add	r0, sp, #12
   baed6:	f001 f871 	bl	bbfbc <memset>
    localtime_r(&t, &calendar_time);
   baeda:	a903      	add	r1, sp, #12
   baedc:	4668      	mov	r0, sp
   baede:	f7fd fcff 	bl	b88e0 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   baee2:	6832      	ldr	r2, [r6, #0]
   baee4:	683b      	ldr	r3, [r7, #0]
   baee6:	a903      	add	r1, sp, #12
   baee8:	4413      	add	r3, r2
   baeea:	4620      	mov	r0, r4
   baeec:	462a      	mov	r2, r5
   baeee:	f7ff ff5d 	bl	badac <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   baef2:	e7da      	b.n	baeaa <_ZN9TimeClass6formatExPKc+0x2a>
   baef4:	2003e6b0 	.word	0x2003e6b0
   baef8:	2003decc 	.word	0x2003decc
   baefc:	2003e6e0 	.word	0x2003e6e0
   baf00:	2003e6d8 	.word	0x2003e6d8

000baf04 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   baf04:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   baf06:	2000      	movs	r0, #0
   baf08:	f7fd f9a6 	bl	b8258 <hal_rtc_time_is_valid>
    if (rtcstate)
   baf0c:	4604      	mov	r4, r0
   baf0e:	b9a0      	cbnz	r0, baf3a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   baf10:	f7fd fb9c 	bl	b864c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   baf14:	2801      	cmp	r0, #1
   baf16:	d110      	bne.n	baf3a <_ZN9TimeClass7isValidEv+0x36>
   baf18:	4620      	mov	r0, r4
   baf1a:	f7fd fbbf 	bl	b869c <system_thread_get_state>
   baf1e:	b960      	cbnz	r0, baf3a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   baf20:	f7ff fede 	bl	bace0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   baf24:	b910      	cbnz	r0, baf2c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   baf26:	f7fd fbfb 	bl	b8720 <spark_process>
        while (_while() && !_condition()) {
   baf2a:	e7f9      	b.n	baf20 <_ZN9TimeClass7isValidEv+0x1c>
   baf2c:	f7ff fed8 	bl	bace0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   baf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   baf34:	2000      	movs	r0, #0
   baf36:	f7fd b98f 	b.w	b8258 <hal_rtc_time_is_valid>
}
   baf3a:	4620      	mov	r0, r4
   baf3c:	bd10      	pop	{r4, pc}

000baf3e <_ZN9TimeClass3nowEv>:
{
   baf3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   baf40:	f7ff ffe0 	bl	baf04 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   baf44:	2210      	movs	r2, #16
   baf46:	2100      	movs	r1, #0
   baf48:	4668      	mov	r0, sp
   baf4a:	f001 f837 	bl	bbfbc <memset>
    hal_rtc_get_time(&tv, nullptr);
   baf4e:	2100      	movs	r1, #0
   baf50:	4668      	mov	r0, sp
   baf52:	f7fd f991 	bl	b8278 <hal_rtc_get_time>
}
   baf56:	9800      	ldr	r0, [sp, #0]
   baf58:	b005      	add	sp, #20
   baf5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baf60 <_ZN9TimeClass3dayEv>:
{
   baf60:	b508      	push	{r3, lr}
	return day(now());
   baf62:	f7ff ffec 	bl	baf3e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baf66:	17c1      	asrs	r1, r0, #31
   baf68:	f7ff fe84 	bl	bac74 <_ZL22Refresh_UnixTime_Cachex>
}
   baf6c:	4b01      	ldr	r3, [pc, #4]	; (baf74 <_ZN9TimeClass3dayEv+0x14>)
   baf6e:	68d8      	ldr	r0, [r3, #12]
   baf70:	bd08      	pop	{r3, pc}
   baf72:	bf00      	nop
   baf74:	2003e6b4 	.word	0x2003e6b4

000baf78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   baf78:	4b02      	ldr	r3, [pc, #8]	; (baf84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   baf7a:	681a      	ldr	r2, [r3, #0]
   baf7c:	4b02      	ldr	r3, [pc, #8]	; (baf88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   baf7e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   baf80:	4770      	bx	lr
   baf82:	bf00      	nop
   baf84:	2003decc 	.word	0x2003decc
   baf88:	2003e6b0 	.word	0x2003e6b0

000baf8c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   baf8c:	4770      	bx	lr

000baf8e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baf8e:	7441      	strb	r1, [r0, #17]
}
   baf90:	4770      	bx	lr

000baf92 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   baf92:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   baf94:	7c00      	ldrb	r0, [r0, #16]
   baf96:	f7fd fac7 	bl	b8528 <hal_usart_available_data_for_write>
}
   baf9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baf9e:	bd08      	pop	{r3, pc}

000bafa0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bafa0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bafa2:	7c00      	ldrb	r0, [r0, #16]
   bafa4:	f7fd fa98 	bl	b84d8 <hal_usart_available>
}
   bafa8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bafac:	bd08      	pop	{r3, pc}

000bafae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bafae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bafb0:	7c00      	ldrb	r0, [r0, #16]
   bafb2:	f7fd faa1 	bl	b84f8 <hal_usart_peek>
}
   bafb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bafba:	bd08      	pop	{r3, pc}

000bafbc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bafbc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bafbe:	7c00      	ldrb	r0, [r0, #16]
   bafc0:	f7fd fa92 	bl	b84e8 <hal_usart_read>
}
   bafc4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bafc8:	bd08      	pop	{r3, pc}

000bafca <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bafca:	7c00      	ldrb	r0, [r0, #16]
   bafcc:	f7fd ba9c 	b.w	b8508 <hal_usart_flush>

000bafd0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bafd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bafd2:	7c45      	ldrb	r5, [r0, #17]
{
   bafd4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bafd6:	b12d      	cbz	r5, bafe4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bafd8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bafda:	b003      	add	sp, #12
   bafdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bafe0:	f7fd ba72 	b.w	b84c8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bafe4:	7c00      	ldrb	r0, [r0, #16]
   bafe6:	9101      	str	r1, [sp, #4]
   bafe8:	f7fd fa9e 	bl	b8528 <hal_usart_available_data_for_write>
   bafec:	2800      	cmp	r0, #0
   bafee:	9901      	ldr	r1, [sp, #4]
   baff0:	dcf2      	bgt.n	bafd8 <_ZN11USARTSerial5writeEh+0x8>
}
   baff2:	4628      	mov	r0, r5
   baff4:	b003      	add	sp, #12
   baff6:	bd30      	pop	{r4, r5, pc}

000baff8 <_ZN11USARTSerialD0Ev>:
   baff8:	b510      	push	{r4, lr}
   baffa:	2114      	movs	r1, #20
   baffc:	4604      	mov	r4, r0
   baffe:	f7f9 f84e 	bl	b409e <_ZdlPvj>
   bb002:	4620      	mov	r0, r4
   bb004:	bd10      	pop	{r4, pc}
	...

000bb008 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb008:	b510      	push	{r4, lr}
   bb00a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb00e:	4604      	mov	r4, r0
   bb010:	4608      	mov	r0, r1
   bb012:	4611      	mov	r1, r2
   bb014:	2200      	movs	r2, #0
   bb016:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb01a:	4b04      	ldr	r3, [pc, #16]	; (bb02c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb01c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb01e:	2301      	movs	r3, #1
  _serial = serial;
   bb020:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb022:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb024:	f7fd fa90 	bl	b8548 <hal_usart_init_ex>
}
   bb028:	4620      	mov	r0, r4
   bb02a:	bd10      	pop	{r4, pc}
   bb02c:	000bd390 	.word	0x000bd390

000bb030 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb030:	7c00      	ldrb	r0, [r0, #16]
   bb032:	2300      	movs	r3, #0
   bb034:	f7fd ba80 	b.w	b8538 <hal_usart_begin_config>

000bb038 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb038:	2200      	movs	r2, #0
   bb03a:	f7ff bff9 	b.w	bb030 <_ZN11USARTSerial5beginEmm>

000bb03e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb03e:	7c00      	ldrb	r0, [r0, #16]
   bb040:	f7fd ba3a 	b.w	b84b8 <hal_usart_end>

000bb044 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb044:	7441      	strb	r1, [r0, #17]
}
   bb046:	4770      	bx	lr

000bb048 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb048:	4770      	bx	lr

000bb04a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb04a:	4770      	bx	lr

000bb04c <_ZN9USBSerial4readEv>:
{
   bb04c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb04e:	2100      	movs	r1, #0
   bb050:	7c00      	ldrb	r0, [r0, #16]
   bb052:	f7fd faa9 	bl	b85a8 <HAL_USB_USART_Receive_Data>
}
   bb056:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb05a:	bd08      	pop	{r3, pc}

000bb05c <_ZN9USBSerial4peekEv>:
{
   bb05c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb05e:	2101      	movs	r1, #1
   bb060:	7c00      	ldrb	r0, [r0, #16]
   bb062:	f7fd faa1 	bl	b85a8 <HAL_USB_USART_Receive_Data>
}
   bb066:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb06a:	bd08      	pop	{r3, pc}

000bb06c <_ZN9USBSerial17availableForWriteEv>:
{
   bb06c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb06e:	7c00      	ldrb	r0, [r0, #16]
   bb070:	f7fd fa92 	bl	b8598 <HAL_USB_USART_Available_Data_For_Write>
}
   bb074:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb078:	bd08      	pop	{r3, pc}

000bb07a <_ZN9USBSerial9availableEv>:
{
   bb07a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb07c:	7c00      	ldrb	r0, [r0, #16]
   bb07e:	f7fd fa83 	bl	b8588 <HAL_USB_USART_Available_Data>
}
   bb082:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb086:	bd08      	pop	{r3, pc}

000bb088 <_ZN9USBSerial5writeEh>:
{
   bb088:	b513      	push	{r0, r1, r4, lr}
   bb08a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb08c:	7c00      	ldrb	r0, [r0, #16]
{
   bb08e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb090:	f7fd fa82 	bl	b8598 <HAL_USB_USART_Available_Data_For_Write>
   bb094:	2800      	cmp	r0, #0
   bb096:	9901      	ldr	r1, [sp, #4]
   bb098:	dc01      	bgt.n	bb09e <_ZN9USBSerial5writeEh+0x16>
   bb09a:	7c60      	ldrb	r0, [r4, #17]
   bb09c:	b120      	cbz	r0, bb0a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb09e:	7c20      	ldrb	r0, [r4, #16]
   bb0a0:	f7fd fa8a 	bl	b85b8 <HAL_USB_USART_Send_Data>
   bb0a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb0a8:	b002      	add	sp, #8
   bb0aa:	bd10      	pop	{r4, pc}

000bb0ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb0ac:	7c00      	ldrb	r0, [r0, #16]
   bb0ae:	f7fd ba8b 	b.w	b85c8 <HAL_USB_USART_Flush_Data>

000bb0b2 <_ZN9USBSerialD0Ev>:
   bb0b2:	b510      	push	{r4, lr}
   bb0b4:	2114      	movs	r1, #20
   bb0b6:	4604      	mov	r4, r0
   bb0b8:	f7f8 fff1 	bl	b409e <_ZdlPvj>
   bb0bc:	4620      	mov	r0, r4
   bb0be:	bd10      	pop	{r4, pc}

000bb0c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb0c0:	b510      	push	{r4, lr}
   bb0c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb0c6:	4604      	mov	r4, r0
   bb0c8:	4608      	mov	r0, r1
   bb0ca:	2100      	movs	r1, #0
   bb0cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb0d0:	4b04      	ldr	r3, [pc, #16]	; (bb0e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb0d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb0d4:	2301      	movs	r3, #1
  _serial = serial;
   bb0d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb0d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb0da:	4611      	mov	r1, r2
   bb0dc:	f7fd fa3c 	bl	b8558 <HAL_USB_USART_Init>
}
   bb0e0:	4620      	mov	r0, r4
   bb0e2:	bd10      	pop	{r4, pc}
   bb0e4:	000bd3c0 	.word	0x000bd3c0

000bb0e8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb0e8:	7c00      	ldrb	r0, [r0, #16]
   bb0ea:	2200      	movs	r2, #0
   bb0ec:	f7fd ba3c 	b.w	b8568 <HAL_USB_USART_Begin>

000bb0f0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bb0f0:	7c00      	ldrb	r0, [r0, #16]
   bb0f2:	f7fd ba41 	b.w	b8578 <HAL_USB_USART_End>

000bb0f6 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bb0f6:	7c00      	ldrb	r0, [r0, #16]
   bb0f8:	f7fd ba6e 	b.w	b85d8 <HAL_USB_USART_Is_Connected>

000bb0fc <_Z19acquireSerialBufferv>:
{
   bb0fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb0fe:	2214      	movs	r2, #20
{
   bb100:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb102:	2100      	movs	r1, #0
   bb104:	f000 ff5a 	bl	bbfbc <memset>
}
   bb108:	4620      	mov	r0, r4
   bb10a:	bd10      	pop	{r4, pc}

000bb10c <_Z16_fetch_usbserialv>:
{
   bb10c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb10e:	4c0f      	ldr	r4, [pc, #60]	; (bb14c <_Z16_fetch_usbserialv+0x40>)
{
   bb110:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb112:	a803      	add	r0, sp, #12
   bb114:	f7ff fff2 	bl	bb0fc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb118:	7821      	ldrb	r1, [r4, #0]
   bb11a:	f3bf 8f5b 	dmb	ish
   bb11e:	f011 0101 	ands.w	r1, r1, #1
   bb122:	d10f      	bne.n	bb144 <_Z16_fetch_usbserialv+0x38>
   bb124:	4620      	mov	r0, r4
   bb126:	9101      	str	r1, [sp, #4]
   bb128:	f7f8 ffc8 	bl	b40bc <__cxa_guard_acquire>
   bb12c:	9901      	ldr	r1, [sp, #4]
   bb12e:	b148      	cbz	r0, bb144 <_Z16_fetch_usbserialv+0x38>
   bb130:	aa03      	add	r2, sp, #12
   bb132:	4807      	ldr	r0, [pc, #28]	; (bb150 <_Z16_fetch_usbserialv+0x44>)
   bb134:	f7ff ffc4 	bl	bb0c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb138:	4620      	mov	r0, r4
   bb13a:	f7f8 ffc4 	bl	b40c6 <__cxa_guard_release>
   bb13e:	4805      	ldr	r0, [pc, #20]	; (bb154 <_Z16_fetch_usbserialv+0x48>)
   bb140:	f000 fee8 	bl	bbf14 <atexit>
	return _usbserial;
}
   bb144:	4802      	ldr	r0, [pc, #8]	; (bb150 <_Z16_fetch_usbserialv+0x44>)
   bb146:	b008      	add	sp, #32
   bb148:	bd10      	pop	{r4, pc}
   bb14a:	bf00      	nop
   bb14c:	2003e6f0 	.word	0x2003e6f0
   bb150:	2003e6f4 	.word	0x2003e6f4
   bb154:	000bb049 	.word	0x000bb049

000bb158 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb158:	4b01      	ldr	r3, [pc, #4]	; (bb160 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb15a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb15c:	4770      	bx	lr
   bb15e:	bf00      	nop
   bb160:	2003ded0 	.word	0x2003ded0

000bb164 <serialEventRun>:
{
   bb164:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb166:	4b0b      	ldr	r3, [pc, #44]	; (bb194 <serialEventRun+0x30>)
   bb168:	b143      	cbz	r3, bb17c <serialEventRun+0x18>
   bb16a:	f7ff ffcf 	bl	bb10c <_Z16_fetch_usbserialv>
   bb16e:	6803      	ldr	r3, [r0, #0]
   bb170:	691b      	ldr	r3, [r3, #16]
   bb172:	4798      	blx	r3
   bb174:	2800      	cmp	r0, #0
   bb176:	dd01      	ble.n	bb17c <serialEventRun+0x18>
        serialEvent();
   bb178:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb17c:	4b06      	ldr	r3, [pc, #24]	; (bb198 <serialEventRun+0x34>)
   bb17e:	b143      	cbz	r3, bb192 <serialEventRun+0x2e>
   bb180:	f000 f9c2 	bl	bb508 <_Z22__fetch_global_Serial1v>
   bb184:	6803      	ldr	r3, [r0, #0]
   bb186:	691b      	ldr	r3, [r3, #16]
   bb188:	4798      	blx	r3
   bb18a:	2800      	cmp	r0, #0
   bb18c:	dd01      	ble.n	bb192 <serialEventRun+0x2e>
        serialEvent1();
   bb18e:	f3af 8000 	nop.w
}
   bb192:	bd08      	pop	{r3, pc}
	...

000bb19c <_post_loop>:
{
   bb19c:	b508      	push	{r3, lr}
	serialEventRun();
   bb19e:	f7ff ffe1 	bl	bb164 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb1a2:	f7fd f851 	bl	b8248 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb1a6:	4b01      	ldr	r3, [pc, #4]	; (bb1ac <_post_loop+0x10>)
   bb1a8:	6018      	str	r0, [r3, #0]
}
   bb1aa:	bd08      	pop	{r3, pc}
   bb1ac:	2003e710 	.word	0x2003e710

000bb1b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb1b0:	4805      	ldr	r0, [pc, #20]	; (bb1c8 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb1b2:	4a06      	ldr	r2, [pc, #24]	; (bb1cc <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb1b4:	4906      	ldr	r1, [pc, #24]	; (bb1d0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb1b6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb1b8:	1a12      	subs	r2, r2, r0
   bb1ba:	f000 fed7 	bl	bbf6c <memcpy>
    __backup_sram_signature = signature;
   bb1be:	4b05      	ldr	r3, [pc, #20]	; (bb1d4 <_Z33system_initialize_user_backup_ramv+0x24>)
   bb1c0:	4a05      	ldr	r2, [pc, #20]	; (bb1d8 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb1c2:	601a      	str	r2, [r3, #0]
}
   bb1c4:	bd08      	pop	{r3, pc}
   bb1c6:	bf00      	nop
   bb1c8:	2003f400 	.word	0x2003f400
   bb1cc:	2003f404 	.word	0x2003f404
   bb1d0:	000bd674 	.word	0x000bd674
   bb1d4:	2003f400 	.word	0x2003f400
   bb1d8:	9a271c1e 	.word	0x9a271c1e

000bb1dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb1dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb1de:	2300      	movs	r3, #0
   bb1e0:	9300      	str	r3, [sp, #0]
   bb1e2:	461a      	mov	r2, r3
   bb1e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb1e8:	f7fd fa72 	bl	b86d0 <system_ctrl_set_result>
}
   bb1ec:	b003      	add	sp, #12
   bb1ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb1f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb1f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb1f6:	8843      	ldrh	r3, [r0, #2]
   bb1f8:	2b0a      	cmp	r3, #10
   bb1fa:	d008      	beq.n	bb20e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb1fc:	2b50      	cmp	r3, #80	; 0x50
   bb1fe:	d10b      	bne.n	bb218 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb200:	4b09      	ldr	r3, [pc, #36]	; (bb228 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb202:	681b      	ldr	r3, [r3, #0]
   bb204:	b14b      	cbz	r3, bb21a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb206:	b003      	add	sp, #12
   bb208:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb20c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb20e:	f7ff ffe5 	bl	bb1dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb212:	b003      	add	sp, #12
   bb214:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb218:	2300      	movs	r3, #0
   bb21a:	9300      	str	r3, [sp, #0]
   bb21c:	461a      	mov	r2, r3
   bb21e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb222:	f7fd fa55 	bl	b86d0 <system_ctrl_set_result>
}
   bb226:	e7f4      	b.n	bb212 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb228:	2003e70c 	.word	0x2003e70c

000bb22c <module_user_init_hook>:
{
   bb22c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb22e:	4812      	ldr	r0, [pc, #72]	; (bb278 <module_user_init_hook+0x4c>)
   bb230:	2100      	movs	r1, #0
   bb232:	f7fd fb45 	bl	b88c0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb236:	4b11      	ldr	r3, [pc, #68]	; (bb27c <module_user_init_hook+0x50>)
   bb238:	681a      	ldr	r2, [r3, #0]
   bb23a:	4b11      	ldr	r3, [pc, #68]	; (bb280 <module_user_init_hook+0x54>)
   bb23c:	429a      	cmp	r2, r3
   bb23e:	4b11      	ldr	r3, [pc, #68]	; (bb284 <module_user_init_hook+0x58>)
   bb240:	bf0c      	ite	eq
   bb242:	2201      	moveq	r2, #1
   bb244:	2200      	movne	r2, #0
   bb246:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb248:	d001      	beq.n	bb24e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb24a:	f7ff ffb1 	bl	bb1b0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb24e:	f7fc ffeb 	bl	b8228 <HAL_RNG_GetRandomNumber>
   bb252:	4604      	mov	r4, r0
    srand(seed);
   bb254:	f000 feba 	bl	bbfcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb258:	4b0b      	ldr	r3, [pc, #44]	; (bb288 <module_user_init_hook+0x5c>)
   bb25a:	b113      	cbz	r3, bb262 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb25c:	4620      	mov	r0, r4
   bb25e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb262:	2100      	movs	r1, #0
   bb264:	4808      	ldr	r0, [pc, #32]	; (bb288 <module_user_init_hook+0x5c>)
   bb266:	f7fd fa7b 	bl	b8760 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb26e:	4807      	ldr	r0, [pc, #28]	; (bb28c <module_user_init_hook+0x60>)
   bb270:	2100      	movs	r1, #0
   bb272:	f7fd ba23 	b.w	b86bc <system_ctrl_set_app_request_handler>
   bb276:	bf00      	nop
   bb278:	000bb159 	.word	0x000bb159
   bb27c:	2003f400 	.word	0x2003f400
   bb280:	9a271c1e 	.word	0x9a271c1e
   bb284:	2003e708 	.word	0x2003e708
   bb288:	00000000 	.word	0x00000000
   bb28c:	000bb1f5 	.word	0x000bb1f5

000bb290 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bb290:	b508      	push	{r3, lr}
   bb292:	4b02      	ldr	r3, [pc, #8]	; (bb29c <spark_protocol_instance+0xc>)
   bb294:	681b      	ldr	r3, [r3, #0]
   bb296:	681b      	ldr	r3, [r3, #0]
   bb298:	9301      	str	r3, [sp, #4]
   bb29a:	bd08      	pop	{r3, pc}
   bb29c:	0003025c 	.word	0x0003025c

000bb2a0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bb2a0:	b508      	push	{r3, lr}
   bb2a2:	4b02      	ldr	r3, [pc, #8]	; (bb2ac <spark_protocol_set_product_id+0xc>)
   bb2a4:	681b      	ldr	r3, [r3, #0]
   bb2a6:	685b      	ldr	r3, [r3, #4]
   bb2a8:	9301      	str	r3, [sp, #4]
   bb2aa:	bd08      	pop	{r3, pc}
   bb2ac:	0003025c 	.word	0x0003025c

000bb2b0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bb2b0:	b508      	push	{r3, lr}
   bb2b2:	4b02      	ldr	r3, [pc, #8]	; (bb2bc <spark_protocol_set_product_firmware_version+0xc>)
   bb2b4:	681b      	ldr	r3, [r3, #0]
   bb2b6:	689b      	ldr	r3, [r3, #8]
   bb2b8:	9301      	str	r3, [sp, #4]
   bb2ba:	bd08      	pop	{r3, pc}
   bb2bc:	0003025c 	.word	0x0003025c

000bb2c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb2c0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb2c2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb2c4:	d902      	bls.n	bb2cc <pinAvailable+0xc>
    return false;
   bb2c6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb2c8:	b002      	add	sp, #8
   bb2ca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb2cc:	f1a0 030b 	sub.w	r3, r0, #11
   bb2d0:	2b02      	cmp	r3, #2
   bb2d2:	d81a      	bhi.n	bb30a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb2d4:	4c17      	ldr	r4, [pc, #92]	; (bb334 <pinAvailable+0x74>)
   bb2d6:	7821      	ldrb	r1, [r4, #0]
   bb2d8:	f3bf 8f5b 	dmb	ish
   bb2dc:	f011 0101 	ands.w	r1, r1, #1
   bb2e0:	d10b      	bne.n	bb2fa <pinAvailable+0x3a>
   bb2e2:	4620      	mov	r0, r4
   bb2e4:	9101      	str	r1, [sp, #4]
   bb2e6:	f7f8 fee9 	bl	b40bc <__cxa_guard_acquire>
   bb2ea:	9901      	ldr	r1, [sp, #4]
   bb2ec:	b128      	cbz	r0, bb2fa <pinAvailable+0x3a>
   bb2ee:	4812      	ldr	r0, [pc, #72]	; (bb338 <pinAvailable+0x78>)
   bb2f0:	f7ff fa70 	bl	ba7d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb2f4:	4620      	mov	r0, r4
   bb2f6:	f7f8 fee6 	bl	b40c6 <__cxa_guard_release>
   bb2fa:	4b0f      	ldr	r3, [pc, #60]	; (bb338 <pinAvailable+0x78>)
   bb2fc:	7818      	ldrb	r0, [r3, #0]
   bb2fe:	f7fd f8b3 	bl	b8468 <hal_spi_is_enabled>
   bb302:	2800      	cmp	r0, #0
   bb304:	d1df      	bne.n	bb2c6 <pinAvailable+0x6>
  return true; // 'pin' is available
   bb306:	2001      	movs	r0, #1
   bb308:	e7de      	b.n	bb2c8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb30a:	2801      	cmp	r0, #1
   bb30c:	d809      	bhi.n	bb322 <pinAvailable+0x62>
   bb30e:	f000 f897 	bl	bb440 <_Z19__fetch_global_Wirev>
   bb312:	2100      	movs	r1, #0
   bb314:	7c00      	ldrb	r0, [r0, #16]
   bb316:	f7fd f847 	bl	b83a8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb31a:	f080 0001 	eor.w	r0, r0, #1
   bb31e:	b2c0      	uxtb	r0, r0
   bb320:	e7d2      	b.n	bb2c8 <pinAvailable+0x8>
   bb322:	3809      	subs	r0, #9
   bb324:	2801      	cmp	r0, #1
   bb326:	d8ee      	bhi.n	bb306 <pinAvailable+0x46>
   bb328:	f000 f8ee 	bl	bb508 <_Z22__fetch_global_Serial1v>
   bb32c:	7c00      	ldrb	r0, [r0, #16]
   bb32e:	f7fd f8f3 	bl	b8518 <hal_usart_is_enabled>
   bb332:	e7f2      	b.n	bb31a <pinAvailable+0x5a>
   bb334:	2003e3e4 	.word	0x2003e3e4
   bb338:	2003e3e8 	.word	0x2003e3e8

000bb33c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb33c:	2823      	cmp	r0, #35	; 0x23
{
   bb33e:	b538      	push	{r3, r4, r5, lr}
   bb340:	4604      	mov	r4, r0
   bb342:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb344:	d80a      	bhi.n	bb35c <pinMode+0x20>
   bb346:	29ff      	cmp	r1, #255	; 0xff
   bb348:	d008      	beq.n	bb35c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb34a:	f7ff ffb9 	bl	bb2c0 <pinAvailable>
   bb34e:	b128      	cbz	r0, bb35c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb350:	4629      	mov	r1, r5
   bb352:	4620      	mov	r0, r4
}
   bb354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb358:	f7fc bfae 	b.w	b82b8 <HAL_Pin_Mode>
}
   bb35c:	bd38      	pop	{r3, r4, r5, pc}

000bb35e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb35e:	b538      	push	{r3, r4, r5, lr}
   bb360:	4604      	mov	r4, r0
   bb362:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb364:	f7fc ffb0 	bl	b82c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb368:	28ff      	cmp	r0, #255	; 0xff
   bb36a:	d010      	beq.n	bb38e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb36c:	2806      	cmp	r0, #6
   bb36e:	d804      	bhi.n	bb37a <digitalWrite+0x1c>
   bb370:	234d      	movs	r3, #77	; 0x4d
   bb372:	fa23 f000 	lsr.w	r0, r3, r0
   bb376:	07c3      	lsls	r3, r0, #31
   bb378:	d409      	bmi.n	bb38e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb37a:	4620      	mov	r0, r4
   bb37c:	f7ff ffa0 	bl	bb2c0 <pinAvailable>
   bb380:	b128      	cbz	r0, bb38e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb382:	4629      	mov	r1, r5
   bb384:	4620      	mov	r0, r4
}
   bb386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb38a:	f7fc bfa5 	b.w	b82d8 <HAL_GPIO_Write>
}
   bb38e:	bd38      	pop	{r3, r4, r5, pc}

000bb390 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bb390:	b510      	push	{r4, lr}
   bb392:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb394:	f7fc ff98 	bl	b82c8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb398:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb39a:	b2db      	uxtb	r3, r3
   bb39c:	2b01      	cmp	r3, #1
   bb39e:	d908      	bls.n	bb3b2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb3a0:	4620      	mov	r0, r4
   bb3a2:	f7ff ff8d 	bl	bb2c0 <pinAvailable>
   bb3a6:	b120      	cbz	r0, bb3b2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bb3a8:	4620      	mov	r0, r4
}
   bb3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bb3ae:	f7fc bf9b 	b.w	b82e8 <HAL_GPIO_Read>
}
   bb3b2:	2000      	movs	r0, #0
   bb3b4:	bd10      	pop	{r4, pc}

000bb3b6 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb3b6:	280d      	cmp	r0, #13
{
   bb3b8:	b510      	push	{r4, lr}
   bb3ba:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb3bc:	bf9c      	itt	ls
   bb3be:	340e      	addls	r4, #14
   bb3c0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bb3c2:	4620      	mov	r0, r4
   bb3c4:	f7ff ff7c 	bl	bb2c0 <pinAvailable>
   bb3c8:	b150      	cbz	r0, bb3e0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bb3ca:	2103      	movs	r1, #3
   bb3cc:	4620      	mov	r0, r4
   bb3ce:	f7fc ff6b 	bl	b82a8 <HAL_Validate_Pin_Function>
   bb3d2:	2803      	cmp	r0, #3
   bb3d4:	d104      	bne.n	bb3e0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb3d6:	4620      	mov	r0, r4
}
   bb3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb3dc:	f7fc bf9c 	b.w	b8318 <hal_adc_read>
}
   bb3e0:	2000      	movs	r0, #0
   bb3e2:	bd10      	pop	{r4, pc}

000bb3e4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb3e4:	4770      	bx	lr

000bb3e6 <__tcf_1>:
   bb3e6:	4770      	bx	lr

000bb3e8 <_Z17acquireWireBufferv>:
{
   bb3e8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb3ea:	2520      	movs	r5, #32
   bb3ec:	2314      	movs	r3, #20
{
   bb3ee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb3f0:	6003      	str	r3, [r0, #0]
   bb3f2:	6085      	str	r5, [r0, #8]
   bb3f4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb3f6:	4906      	ldr	r1, [pc, #24]	; (bb410 <_Z17acquireWireBufferv+0x28>)
   bb3f8:	4628      	mov	r0, r5
   bb3fa:	f000 f8ab 	bl	bb554 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb3fe:	4904      	ldr	r1, [pc, #16]	; (bb410 <_Z17acquireWireBufferv+0x28>)
	};
   bb400:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb402:	4628      	mov	r0, r5
   bb404:	f000 f8a6 	bl	bb554 <_ZnajRKSt9nothrow_t>
	};
   bb408:	60e0      	str	r0, [r4, #12]
}
   bb40a:	4620      	mov	r0, r4
   bb40c:	bd38      	pop	{r3, r4, r5, pc}
   bb40e:	bf00      	nop
   bb410:	000bd3e8 	.word	0x000bd3e8

000bb414 <_Z18acquireWire1Bufferv>:
   bb414:	b538      	push	{r3, r4, r5, lr}
   bb416:	2520      	movs	r5, #32
   bb418:	2314      	movs	r3, #20
   bb41a:	4604      	mov	r4, r0
   bb41c:	6003      	str	r3, [r0, #0]
   bb41e:	6085      	str	r5, [r0, #8]
   bb420:	6105      	str	r5, [r0, #16]
   bb422:	4906      	ldr	r1, [pc, #24]	; (bb43c <_Z18acquireWire1Bufferv+0x28>)
   bb424:	4628      	mov	r0, r5
   bb426:	f000 f895 	bl	bb554 <_ZnajRKSt9nothrow_t>
   bb42a:	4904      	ldr	r1, [pc, #16]	; (bb43c <_Z18acquireWire1Bufferv+0x28>)
   bb42c:	6060      	str	r0, [r4, #4]
   bb42e:	4628      	mov	r0, r5
   bb430:	f000 f890 	bl	bb554 <_ZnajRKSt9nothrow_t>
   bb434:	60e0      	str	r0, [r4, #12]
   bb436:	4620      	mov	r0, r4
   bb438:	bd38      	pop	{r3, r4, r5, pc}
   bb43a:	bf00      	nop
   bb43c:	000bd3e8 	.word	0x000bd3e8

000bb440 <_Z19__fetch_global_Wirev>:
{
   bb440:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb442:	4d0e      	ldr	r5, [pc, #56]	; (bb47c <_Z19__fetch_global_Wirev+0x3c>)
   bb444:	7829      	ldrb	r1, [r5, #0]
   bb446:	f3bf 8f5b 	dmb	ish
   bb44a:	f011 0401 	ands.w	r4, r1, #1
{
   bb44e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb450:	d111      	bne.n	bb476 <_Z19__fetch_global_Wirev+0x36>
   bb452:	4628      	mov	r0, r5
   bb454:	f7f8 fe32 	bl	b40bc <__cxa_guard_acquire>
   bb458:	b168      	cbz	r0, bb476 <_Z19__fetch_global_Wirev+0x36>
   bb45a:	a801      	add	r0, sp, #4
   bb45c:	f7ff ffc4 	bl	bb3e8 <_Z17acquireWireBufferv>
   bb460:	aa01      	add	r2, sp, #4
   bb462:	4621      	mov	r1, r4
   bb464:	4806      	ldr	r0, [pc, #24]	; (bb480 <_Z19__fetch_global_Wirev+0x40>)
   bb466:	f7fd fc65 	bl	b8d34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb46a:	4628      	mov	r0, r5
   bb46c:	f7f8 fe2b 	bl	b40c6 <__cxa_guard_release>
   bb470:	4804      	ldr	r0, [pc, #16]	; (bb484 <_Z19__fetch_global_Wirev+0x44>)
   bb472:	f000 fd4f 	bl	bbf14 <atexit>
	return wire;
}
   bb476:	4802      	ldr	r0, [pc, #8]	; (bb480 <_Z19__fetch_global_Wirev+0x40>)
   bb478:	b007      	add	sp, #28
   bb47a:	bd30      	pop	{r4, r5, pc}
   bb47c:	2003e714 	.word	0x2003e714
   bb480:	2003e71c 	.word	0x2003e71c
   bb484:	000bb3e5 	.word	0x000bb3e5

000bb488 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bb488:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb48a:	4c0e      	ldr	r4, [pc, #56]	; (bb4c4 <_Z20__fetch_global_Wire1v+0x3c>)
   bb48c:	7823      	ldrb	r3, [r4, #0]
   bb48e:	f3bf 8f5b 	dmb	ish
   bb492:	07db      	lsls	r3, r3, #31
{
   bb494:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb496:	d411      	bmi.n	bb4bc <_Z20__fetch_global_Wire1v+0x34>
   bb498:	4620      	mov	r0, r4
   bb49a:	f7f8 fe0f 	bl	b40bc <__cxa_guard_acquire>
   bb49e:	b168      	cbz	r0, bb4bc <_Z20__fetch_global_Wire1v+0x34>
   bb4a0:	a801      	add	r0, sp, #4
   bb4a2:	f7ff ffb7 	bl	bb414 <_Z18acquireWire1Bufferv>
   bb4a6:	aa01      	add	r2, sp, #4
   bb4a8:	2101      	movs	r1, #1
   bb4aa:	4807      	ldr	r0, [pc, #28]	; (bb4c8 <_Z20__fetch_global_Wire1v+0x40>)
   bb4ac:	f7fd fc42 	bl	b8d34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb4b0:	4620      	mov	r0, r4
   bb4b2:	f7f8 fe08 	bl	b40c6 <__cxa_guard_release>
   bb4b6:	4805      	ldr	r0, [pc, #20]	; (bb4cc <_Z20__fetch_global_Wire1v+0x44>)
   bb4b8:	f000 fd2c 	bl	bbf14 <atexit>
	return wire;
}
   bb4bc:	4802      	ldr	r0, [pc, #8]	; (bb4c8 <_Z20__fetch_global_Wire1v+0x40>)
   bb4be:	b006      	add	sp, #24
   bb4c0:	bd10      	pop	{r4, pc}
   bb4c2:	bf00      	nop
   bb4c4:	2003e718 	.word	0x2003e718
   bb4c8:	2003e730 	.word	0x2003e730
   bb4cc:	000bb3e7 	.word	0x000bb3e7

000bb4d0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb4d0:	4770      	bx	lr
	...

000bb4d4 <_Z20acquireSerial1Bufferv>:
{
   bb4d4:	b538      	push	{r3, r4, r5, lr}
   bb4d6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb4d8:	2514      	movs	r5, #20
   bb4da:	462a      	mov	r2, r5
   bb4dc:	2100      	movs	r1, #0
   bb4de:	f000 fd6d 	bl	bbfbc <memset>
   bb4e2:	8025      	strh	r5, [r4, #0]
   bb4e4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb4e6:	4907      	ldr	r1, [pc, #28]	; (bb504 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb4e8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb4ea:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb4ec:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb4ee:	f000 f831 	bl	bb554 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb4f2:	4904      	ldr	r1, [pc, #16]	; (bb504 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb4f4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb4f6:	4628      	mov	r0, r5
   bb4f8:	f000 f82c 	bl	bb554 <_ZnajRKSt9nothrow_t>
    };
   bb4fc:	60e0      	str	r0, [r4, #12]
}
   bb4fe:	4620      	mov	r0, r4
   bb500:	bd38      	pop	{r3, r4, r5, pc}
   bb502:	bf00      	nop
   bb504:	000bd3e8 	.word	0x000bd3e8

000bb508 <_Z22__fetch_global_Serial1v>:
{
   bb508:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb50a:	4d0e      	ldr	r5, [pc, #56]	; (bb544 <_Z22__fetch_global_Serial1v+0x3c>)
   bb50c:	7829      	ldrb	r1, [r5, #0]
   bb50e:	f3bf 8f5b 	dmb	ish
   bb512:	f011 0401 	ands.w	r4, r1, #1
{
   bb516:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb518:	d111      	bne.n	bb53e <_Z22__fetch_global_Serial1v+0x36>
   bb51a:	4628      	mov	r0, r5
   bb51c:	f7f8 fdce 	bl	b40bc <__cxa_guard_acquire>
   bb520:	b168      	cbz	r0, bb53e <_Z22__fetch_global_Serial1v+0x36>
   bb522:	a801      	add	r0, sp, #4
   bb524:	f7ff ffd6 	bl	bb4d4 <_Z20acquireSerial1Bufferv>
   bb528:	aa01      	add	r2, sp, #4
   bb52a:	4621      	mov	r1, r4
   bb52c:	4806      	ldr	r0, [pc, #24]	; (bb548 <_Z22__fetch_global_Serial1v+0x40>)
   bb52e:	f7ff fd6b 	bl	bb008 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb532:	4628      	mov	r0, r5
   bb534:	f7f8 fdc7 	bl	b40c6 <__cxa_guard_release>
   bb538:	4804      	ldr	r0, [pc, #16]	; (bb54c <_Z22__fetch_global_Serial1v+0x44>)
   bb53a:	f000 fceb 	bl	bbf14 <atexit>
    return serial1;
}
   bb53e:	4802      	ldr	r0, [pc, #8]	; (bb548 <_Z22__fetch_global_Serial1v+0x40>)
   bb540:	b007      	add	sp, #28
   bb542:	bd30      	pop	{r4, r5, pc}
   bb544:	2003e744 	.word	0x2003e744
   bb548:	2003e748 	.word	0x2003e748
   bb54c:	000bb4d1 	.word	0x000bb4d1

000bb550 <_ZnwjRKSt9nothrow_t>:
   bb550:	f7f8 bda1 	b.w	b4096 <_Znwj>

000bb554 <_ZnajRKSt9nothrow_t>:
   bb554:	f7f8 bda1 	b.w	b409a <_Znaj>

000bb558 <_ZSt25__throw_bad_function_callv>:
   bb558:	b508      	push	{r3, lr}
   bb55a:	f7fd f999 	bl	b8890 <abort>
	...

000bb560 <__aeabi_drsub>:
   bb560:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb564:	e002      	b.n	bb56c <__adddf3>
   bb566:	bf00      	nop

000bb568 <__aeabi_dsub>:
   bb568:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb56c <__adddf3>:
   bb56c:	b530      	push	{r4, r5, lr}
   bb56e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb572:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb576:	ea94 0f05 	teq	r4, r5
   bb57a:	bf08      	it	eq
   bb57c:	ea90 0f02 	teqeq	r0, r2
   bb580:	bf1f      	itttt	ne
   bb582:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb586:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb58a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb58e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb592:	f000 80e2 	beq.w	bb75a <__adddf3+0x1ee>
   bb596:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb59a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb59e:	bfb8      	it	lt
   bb5a0:	426d      	neglt	r5, r5
   bb5a2:	dd0c      	ble.n	bb5be <__adddf3+0x52>
   bb5a4:	442c      	add	r4, r5
   bb5a6:	ea80 0202 	eor.w	r2, r0, r2
   bb5aa:	ea81 0303 	eor.w	r3, r1, r3
   bb5ae:	ea82 0000 	eor.w	r0, r2, r0
   bb5b2:	ea83 0101 	eor.w	r1, r3, r1
   bb5b6:	ea80 0202 	eor.w	r2, r0, r2
   bb5ba:	ea81 0303 	eor.w	r3, r1, r3
   bb5be:	2d36      	cmp	r5, #54	; 0x36
   bb5c0:	bf88      	it	hi
   bb5c2:	bd30      	pophi	{r4, r5, pc}
   bb5c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb5c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb5cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb5d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb5d4:	d002      	beq.n	bb5dc <__adddf3+0x70>
   bb5d6:	4240      	negs	r0, r0
   bb5d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb5dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb5e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb5e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb5e8:	d002      	beq.n	bb5f0 <__adddf3+0x84>
   bb5ea:	4252      	negs	r2, r2
   bb5ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb5f0:	ea94 0f05 	teq	r4, r5
   bb5f4:	f000 80a7 	beq.w	bb746 <__adddf3+0x1da>
   bb5f8:	f1a4 0401 	sub.w	r4, r4, #1
   bb5fc:	f1d5 0e20 	rsbs	lr, r5, #32
   bb600:	db0d      	blt.n	bb61e <__adddf3+0xb2>
   bb602:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb606:	fa22 f205 	lsr.w	r2, r2, r5
   bb60a:	1880      	adds	r0, r0, r2
   bb60c:	f141 0100 	adc.w	r1, r1, #0
   bb610:	fa03 f20e 	lsl.w	r2, r3, lr
   bb614:	1880      	adds	r0, r0, r2
   bb616:	fa43 f305 	asr.w	r3, r3, r5
   bb61a:	4159      	adcs	r1, r3
   bb61c:	e00e      	b.n	bb63c <__adddf3+0xd0>
   bb61e:	f1a5 0520 	sub.w	r5, r5, #32
   bb622:	f10e 0e20 	add.w	lr, lr, #32
   bb626:	2a01      	cmp	r2, #1
   bb628:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb62c:	bf28      	it	cs
   bb62e:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb632:	fa43 f305 	asr.w	r3, r3, r5
   bb636:	18c0      	adds	r0, r0, r3
   bb638:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb63c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb640:	d507      	bpl.n	bb652 <__adddf3+0xe6>
   bb642:	f04f 0e00 	mov.w	lr, #0
   bb646:	f1dc 0c00 	rsbs	ip, ip, #0
   bb64a:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb64e:	eb6e 0101 	sbc.w	r1, lr, r1
   bb652:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb656:	d31b      	bcc.n	bb690 <__adddf3+0x124>
   bb658:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb65c:	d30c      	bcc.n	bb678 <__adddf3+0x10c>
   bb65e:	0849      	lsrs	r1, r1, #1
   bb660:	ea5f 0030 	movs.w	r0, r0, rrx
   bb664:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb668:	f104 0401 	add.w	r4, r4, #1
   bb66c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb670:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb674:	f080 809a 	bcs.w	bb7ac <__adddf3+0x240>
   bb678:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb67c:	bf08      	it	eq
   bb67e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb682:	f150 0000 	adcs.w	r0, r0, #0
   bb686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb68a:	ea41 0105 	orr.w	r1, r1, r5
   bb68e:	bd30      	pop	{r4, r5, pc}
   bb690:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb694:	4140      	adcs	r0, r0
   bb696:	eb41 0101 	adc.w	r1, r1, r1
   bb69a:	3c01      	subs	r4, #1
   bb69c:	bf28      	it	cs
   bb69e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb6a2:	d2e9      	bcs.n	bb678 <__adddf3+0x10c>
   bb6a4:	f091 0f00 	teq	r1, #0
   bb6a8:	bf04      	itt	eq
   bb6aa:	4601      	moveq	r1, r0
   bb6ac:	2000      	moveq	r0, #0
   bb6ae:	fab1 f381 	clz	r3, r1
   bb6b2:	bf08      	it	eq
   bb6b4:	3320      	addeq	r3, #32
   bb6b6:	f1a3 030b 	sub.w	r3, r3, #11
   bb6ba:	f1b3 0220 	subs.w	r2, r3, #32
   bb6be:	da0c      	bge.n	bb6da <__adddf3+0x16e>
   bb6c0:	320c      	adds	r2, #12
   bb6c2:	dd08      	ble.n	bb6d6 <__adddf3+0x16a>
   bb6c4:	f102 0c14 	add.w	ip, r2, #20
   bb6c8:	f1c2 020c 	rsb	r2, r2, #12
   bb6cc:	fa01 f00c 	lsl.w	r0, r1, ip
   bb6d0:	fa21 f102 	lsr.w	r1, r1, r2
   bb6d4:	e00c      	b.n	bb6f0 <__adddf3+0x184>
   bb6d6:	f102 0214 	add.w	r2, r2, #20
   bb6da:	bfd8      	it	le
   bb6dc:	f1c2 0c20 	rsble	ip, r2, #32
   bb6e0:	fa01 f102 	lsl.w	r1, r1, r2
   bb6e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb6e8:	bfdc      	itt	le
   bb6ea:	ea41 010c 	orrle.w	r1, r1, ip
   bb6ee:	4090      	lslle	r0, r2
   bb6f0:	1ae4      	subs	r4, r4, r3
   bb6f2:	bfa2      	ittt	ge
   bb6f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb6f8:	4329      	orrge	r1, r5
   bb6fa:	bd30      	popge	{r4, r5, pc}
   bb6fc:	ea6f 0404 	mvn.w	r4, r4
   bb700:	3c1f      	subs	r4, #31
   bb702:	da1c      	bge.n	bb73e <__adddf3+0x1d2>
   bb704:	340c      	adds	r4, #12
   bb706:	dc0e      	bgt.n	bb726 <__adddf3+0x1ba>
   bb708:	f104 0414 	add.w	r4, r4, #20
   bb70c:	f1c4 0220 	rsb	r2, r4, #32
   bb710:	fa20 f004 	lsr.w	r0, r0, r4
   bb714:	fa01 f302 	lsl.w	r3, r1, r2
   bb718:	ea40 0003 	orr.w	r0, r0, r3
   bb71c:	fa21 f304 	lsr.w	r3, r1, r4
   bb720:	ea45 0103 	orr.w	r1, r5, r3
   bb724:	bd30      	pop	{r4, r5, pc}
   bb726:	f1c4 040c 	rsb	r4, r4, #12
   bb72a:	f1c4 0220 	rsb	r2, r4, #32
   bb72e:	fa20 f002 	lsr.w	r0, r0, r2
   bb732:	fa01 f304 	lsl.w	r3, r1, r4
   bb736:	ea40 0003 	orr.w	r0, r0, r3
   bb73a:	4629      	mov	r1, r5
   bb73c:	bd30      	pop	{r4, r5, pc}
   bb73e:	fa21 f004 	lsr.w	r0, r1, r4
   bb742:	4629      	mov	r1, r5
   bb744:	bd30      	pop	{r4, r5, pc}
   bb746:	f094 0f00 	teq	r4, #0
   bb74a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb74e:	bf06      	itte	eq
   bb750:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb754:	3401      	addeq	r4, #1
   bb756:	3d01      	subne	r5, #1
   bb758:	e74e      	b.n	bb5f8 <__adddf3+0x8c>
   bb75a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb75e:	bf18      	it	ne
   bb760:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb764:	d029      	beq.n	bb7ba <__adddf3+0x24e>
   bb766:	ea94 0f05 	teq	r4, r5
   bb76a:	bf08      	it	eq
   bb76c:	ea90 0f02 	teqeq	r0, r2
   bb770:	d005      	beq.n	bb77e <__adddf3+0x212>
   bb772:	ea54 0c00 	orrs.w	ip, r4, r0
   bb776:	bf04      	itt	eq
   bb778:	4619      	moveq	r1, r3
   bb77a:	4610      	moveq	r0, r2
   bb77c:	bd30      	pop	{r4, r5, pc}
   bb77e:	ea91 0f03 	teq	r1, r3
   bb782:	bf1e      	ittt	ne
   bb784:	2100      	movne	r1, #0
   bb786:	2000      	movne	r0, #0
   bb788:	bd30      	popne	{r4, r5, pc}
   bb78a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb78e:	d105      	bne.n	bb79c <__adddf3+0x230>
   bb790:	0040      	lsls	r0, r0, #1
   bb792:	4149      	adcs	r1, r1
   bb794:	bf28      	it	cs
   bb796:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb79a:	bd30      	pop	{r4, r5, pc}
   bb79c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb7a0:	bf3c      	itt	cc
   bb7a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb7a6:	bd30      	popcc	{r4, r5, pc}
   bb7a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb7ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb7b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb7b4:	f04f 0000 	mov.w	r0, #0
   bb7b8:	bd30      	pop	{r4, r5, pc}
   bb7ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb7be:	bf1a      	itte	ne
   bb7c0:	4619      	movne	r1, r3
   bb7c2:	4610      	movne	r0, r2
   bb7c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb7c8:	bf1c      	itt	ne
   bb7ca:	460b      	movne	r3, r1
   bb7cc:	4602      	movne	r2, r0
   bb7ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb7d2:	bf06      	itte	eq
   bb7d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb7d8:	ea91 0f03 	teqeq	r1, r3
   bb7dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb7e0:	bd30      	pop	{r4, r5, pc}
   bb7e2:	bf00      	nop

000bb7e4 <__aeabi_ui2d>:
   bb7e4:	f090 0f00 	teq	r0, #0
   bb7e8:	bf04      	itt	eq
   bb7ea:	2100      	moveq	r1, #0
   bb7ec:	4770      	bxeq	lr
   bb7ee:	b530      	push	{r4, r5, lr}
   bb7f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb7f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb7f8:	f04f 0500 	mov.w	r5, #0
   bb7fc:	f04f 0100 	mov.w	r1, #0
   bb800:	e750      	b.n	bb6a4 <__adddf3+0x138>
   bb802:	bf00      	nop

000bb804 <__aeabi_i2d>:
   bb804:	f090 0f00 	teq	r0, #0
   bb808:	bf04      	itt	eq
   bb80a:	2100      	moveq	r1, #0
   bb80c:	4770      	bxeq	lr
   bb80e:	b530      	push	{r4, r5, lr}
   bb810:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb814:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb818:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb81c:	bf48      	it	mi
   bb81e:	4240      	negmi	r0, r0
   bb820:	f04f 0100 	mov.w	r1, #0
   bb824:	e73e      	b.n	bb6a4 <__adddf3+0x138>
   bb826:	bf00      	nop

000bb828 <__aeabi_f2d>:
   bb828:	0042      	lsls	r2, r0, #1
   bb82a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb82e:	ea4f 0131 	mov.w	r1, r1, rrx
   bb832:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb836:	bf1f      	itttt	ne
   bb838:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb83c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb840:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb844:	4770      	bxne	lr
   bb846:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb84a:	bf08      	it	eq
   bb84c:	4770      	bxeq	lr
   bb84e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb852:	bf04      	itt	eq
   bb854:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb858:	4770      	bxeq	lr
   bb85a:	b530      	push	{r4, r5, lr}
   bb85c:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb868:	e71c      	b.n	bb6a4 <__adddf3+0x138>
   bb86a:	bf00      	nop

000bb86c <__aeabi_ul2d>:
   bb86c:	ea50 0201 	orrs.w	r2, r0, r1
   bb870:	bf08      	it	eq
   bb872:	4770      	bxeq	lr
   bb874:	b530      	push	{r4, r5, lr}
   bb876:	f04f 0500 	mov.w	r5, #0
   bb87a:	e00a      	b.n	bb892 <__aeabi_l2d+0x16>

000bb87c <__aeabi_l2d>:
   bb87c:	ea50 0201 	orrs.w	r2, r0, r1
   bb880:	bf08      	it	eq
   bb882:	4770      	bxeq	lr
   bb884:	b530      	push	{r4, r5, lr}
   bb886:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb88a:	d502      	bpl.n	bb892 <__aeabi_l2d+0x16>
   bb88c:	4240      	negs	r0, r0
   bb88e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb892:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb896:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb89a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb89e:	f43f aed8 	beq.w	bb652 <__adddf3+0xe6>
   bb8a2:	f04f 0203 	mov.w	r2, #3
   bb8a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb8aa:	bf18      	it	ne
   bb8ac:	3203      	addne	r2, #3
   bb8ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb8b2:	bf18      	it	ne
   bb8b4:	3203      	addne	r2, #3
   bb8b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb8ba:	f1c2 0320 	rsb	r3, r2, #32
   bb8be:	fa00 fc03 	lsl.w	ip, r0, r3
   bb8c2:	fa20 f002 	lsr.w	r0, r0, r2
   bb8c6:	fa01 fe03 	lsl.w	lr, r1, r3
   bb8ca:	ea40 000e 	orr.w	r0, r0, lr
   bb8ce:	fa21 f102 	lsr.w	r1, r1, r2
   bb8d2:	4414      	add	r4, r2
   bb8d4:	e6bd      	b.n	bb652 <__adddf3+0xe6>
   bb8d6:	bf00      	nop

000bb8d8 <__aeabi_dmul>:
   bb8d8:	b570      	push	{r4, r5, r6, lr}
   bb8da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb8de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb8e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb8e6:	bf1d      	ittte	ne
   bb8e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb8ec:	ea94 0f0c 	teqne	r4, ip
   bb8f0:	ea95 0f0c 	teqne	r5, ip
   bb8f4:	f000 f8de 	bleq	bbab4 <__aeabi_dmul+0x1dc>
   bb8f8:	442c      	add	r4, r5
   bb8fa:	ea81 0603 	eor.w	r6, r1, r3
   bb8fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb902:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb906:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb90a:	bf18      	it	ne
   bb90c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb918:	d038      	beq.n	bb98c <__aeabi_dmul+0xb4>
   bb91a:	fba0 ce02 	umull	ip, lr, r0, r2
   bb91e:	f04f 0500 	mov.w	r5, #0
   bb922:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb926:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb92a:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb92e:	f04f 0600 	mov.w	r6, #0
   bb932:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb936:	f09c 0f00 	teq	ip, #0
   bb93a:	bf18      	it	ne
   bb93c:	f04e 0e01 	orrne.w	lr, lr, #1
   bb940:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb944:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb948:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb94c:	d204      	bcs.n	bb958 <__aeabi_dmul+0x80>
   bb94e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb952:	416d      	adcs	r5, r5
   bb954:	eb46 0606 	adc.w	r6, r6, r6
   bb958:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb95c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb960:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb964:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb968:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb96c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb970:	bf88      	it	hi
   bb972:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb976:	d81e      	bhi.n	bb9b6 <__aeabi_dmul+0xde>
   bb978:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb97c:	bf08      	it	eq
   bb97e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb982:	f150 0000 	adcs.w	r0, r0, #0
   bb986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb98a:	bd70      	pop	{r4, r5, r6, pc}
   bb98c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb990:	ea46 0101 	orr.w	r1, r6, r1
   bb994:	ea40 0002 	orr.w	r0, r0, r2
   bb998:	ea81 0103 	eor.w	r1, r1, r3
   bb99c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb9a0:	bfc2      	ittt	gt
   bb9a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb9a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb9aa:	bd70      	popgt	{r4, r5, r6, pc}
   bb9ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb9b0:	f04f 0e00 	mov.w	lr, #0
   bb9b4:	3c01      	subs	r4, #1
   bb9b6:	f300 80ab 	bgt.w	bbb10 <__aeabi_dmul+0x238>
   bb9ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb9be:	bfde      	ittt	le
   bb9c0:	2000      	movle	r0, #0
   bb9c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb9c6:	bd70      	pople	{r4, r5, r6, pc}
   bb9c8:	f1c4 0400 	rsb	r4, r4, #0
   bb9cc:	3c20      	subs	r4, #32
   bb9ce:	da35      	bge.n	bba3c <__aeabi_dmul+0x164>
   bb9d0:	340c      	adds	r4, #12
   bb9d2:	dc1b      	bgt.n	bba0c <__aeabi_dmul+0x134>
   bb9d4:	f104 0414 	add.w	r4, r4, #20
   bb9d8:	f1c4 0520 	rsb	r5, r4, #32
   bb9dc:	fa00 f305 	lsl.w	r3, r0, r5
   bb9e0:	fa20 f004 	lsr.w	r0, r0, r4
   bb9e4:	fa01 f205 	lsl.w	r2, r1, r5
   bb9e8:	ea40 0002 	orr.w	r0, r0, r2
   bb9ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb9f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb9f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb9f8:	fa21 f604 	lsr.w	r6, r1, r4
   bb9fc:	eb42 0106 	adc.w	r1, r2, r6
   bba00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bba04:	bf08      	it	eq
   bba06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bba0a:	bd70      	pop	{r4, r5, r6, pc}
   bba0c:	f1c4 040c 	rsb	r4, r4, #12
   bba10:	f1c4 0520 	rsb	r5, r4, #32
   bba14:	fa00 f304 	lsl.w	r3, r0, r4
   bba18:	fa20 f005 	lsr.w	r0, r0, r5
   bba1c:	fa01 f204 	lsl.w	r2, r1, r4
   bba20:	ea40 0002 	orr.w	r0, r0, r2
   bba24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bba28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bba2c:	f141 0100 	adc.w	r1, r1, #0
   bba30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bba34:	bf08      	it	eq
   bba36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bba3a:	bd70      	pop	{r4, r5, r6, pc}
   bba3c:	f1c4 0520 	rsb	r5, r4, #32
   bba40:	fa00 f205 	lsl.w	r2, r0, r5
   bba44:	ea4e 0e02 	orr.w	lr, lr, r2
   bba48:	fa20 f304 	lsr.w	r3, r0, r4
   bba4c:	fa01 f205 	lsl.w	r2, r1, r5
   bba50:	ea43 0302 	orr.w	r3, r3, r2
   bba54:	fa21 f004 	lsr.w	r0, r1, r4
   bba58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bba5c:	fa21 f204 	lsr.w	r2, r1, r4
   bba60:	ea20 0002 	bic.w	r0, r0, r2
   bba64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bba68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bba6c:	bf08      	it	eq
   bba6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bba72:	bd70      	pop	{r4, r5, r6, pc}
   bba74:	f094 0f00 	teq	r4, #0
   bba78:	d10f      	bne.n	bba9a <__aeabi_dmul+0x1c2>
   bba7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bba7e:	0040      	lsls	r0, r0, #1
   bba80:	eb41 0101 	adc.w	r1, r1, r1
   bba84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bba88:	bf08      	it	eq
   bba8a:	3c01      	subeq	r4, #1
   bba8c:	d0f7      	beq.n	bba7e <__aeabi_dmul+0x1a6>
   bba8e:	ea41 0106 	orr.w	r1, r1, r6
   bba92:	f095 0f00 	teq	r5, #0
   bba96:	bf18      	it	ne
   bba98:	4770      	bxne	lr
   bba9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bba9e:	0052      	lsls	r2, r2, #1
   bbaa0:	eb43 0303 	adc.w	r3, r3, r3
   bbaa4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bbaa8:	bf08      	it	eq
   bbaaa:	3d01      	subeq	r5, #1
   bbaac:	d0f7      	beq.n	bba9e <__aeabi_dmul+0x1c6>
   bbaae:	ea43 0306 	orr.w	r3, r3, r6
   bbab2:	4770      	bx	lr
   bbab4:	ea94 0f0c 	teq	r4, ip
   bbab8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbabc:	bf18      	it	ne
   bbabe:	ea95 0f0c 	teqne	r5, ip
   bbac2:	d00c      	beq.n	bbade <__aeabi_dmul+0x206>
   bbac4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbac8:	bf18      	it	ne
   bbaca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbace:	d1d1      	bne.n	bba74 <__aeabi_dmul+0x19c>
   bbad0:	ea81 0103 	eor.w	r1, r1, r3
   bbad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbad8:	f04f 0000 	mov.w	r0, #0
   bbadc:	bd70      	pop	{r4, r5, r6, pc}
   bbade:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbae2:	bf06      	itte	eq
   bbae4:	4610      	moveq	r0, r2
   bbae6:	4619      	moveq	r1, r3
   bbae8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbaec:	d019      	beq.n	bbb22 <__aeabi_dmul+0x24a>
   bbaee:	ea94 0f0c 	teq	r4, ip
   bbaf2:	d102      	bne.n	bbafa <__aeabi_dmul+0x222>
   bbaf4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bbaf8:	d113      	bne.n	bbb22 <__aeabi_dmul+0x24a>
   bbafa:	ea95 0f0c 	teq	r5, ip
   bbafe:	d105      	bne.n	bbb0c <__aeabi_dmul+0x234>
   bbb00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bbb04:	bf1c      	itt	ne
   bbb06:	4610      	movne	r0, r2
   bbb08:	4619      	movne	r1, r3
   bbb0a:	d10a      	bne.n	bbb22 <__aeabi_dmul+0x24a>
   bbb0c:	ea81 0103 	eor.w	r1, r1, r3
   bbb10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbb14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbb18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbb1c:	f04f 0000 	mov.w	r0, #0
   bbb20:	bd70      	pop	{r4, r5, r6, pc}
   bbb22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbb26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bbb2a:	bd70      	pop	{r4, r5, r6, pc}

000bbb2c <__aeabi_ddiv>:
   bbb2c:	b570      	push	{r4, r5, r6, lr}
   bbb2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbb32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbb36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbb3a:	bf1d      	ittte	ne
   bbb3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbb40:	ea94 0f0c 	teqne	r4, ip
   bbb44:	ea95 0f0c 	teqne	r5, ip
   bbb48:	f000 f8a7 	bleq	bbc9a <__aeabi_ddiv+0x16e>
   bbb4c:	eba4 0405 	sub.w	r4, r4, r5
   bbb50:	ea81 0e03 	eor.w	lr, r1, r3
   bbb54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbb58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbb5c:	f000 8088 	beq.w	bbc70 <__aeabi_ddiv+0x144>
   bbb60:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbb64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bbb68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bbb6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bbb70:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bbb74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bbb78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bbb7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bbb80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bbb84:	429d      	cmp	r5, r3
   bbb86:	bf08      	it	eq
   bbb88:	4296      	cmpeq	r6, r2
   bbb8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bbb8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bbb92:	d202      	bcs.n	bbb9a <__aeabi_ddiv+0x6e>
   bbb94:	085b      	lsrs	r3, r3, #1
   bbb96:	ea4f 0232 	mov.w	r2, r2, rrx
   bbb9a:	1ab6      	subs	r6, r6, r2
   bbb9c:	eb65 0503 	sbc.w	r5, r5, r3
   bbba0:	085b      	lsrs	r3, r3, #1
   bbba2:	ea4f 0232 	mov.w	r2, r2, rrx
   bbba6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bbbaa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bbbae:	ebb6 0e02 	subs.w	lr, r6, r2
   bbbb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbbb6:	bf22      	ittt	cs
   bbbb8:	1ab6      	subcs	r6, r6, r2
   bbbba:	4675      	movcs	r5, lr
   bbbbc:	ea40 000c 	orrcs.w	r0, r0, ip
   bbbc0:	085b      	lsrs	r3, r3, #1
   bbbc2:	ea4f 0232 	mov.w	r2, r2, rrx
   bbbc6:	ebb6 0e02 	subs.w	lr, r6, r2
   bbbca:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbbce:	bf22      	ittt	cs
   bbbd0:	1ab6      	subcs	r6, r6, r2
   bbbd2:	4675      	movcs	r5, lr
   bbbd4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bbbd8:	085b      	lsrs	r3, r3, #1
   bbbda:	ea4f 0232 	mov.w	r2, r2, rrx
   bbbde:	ebb6 0e02 	subs.w	lr, r6, r2
   bbbe2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbbe6:	bf22      	ittt	cs
   bbbe8:	1ab6      	subcs	r6, r6, r2
   bbbea:	4675      	movcs	r5, lr
   bbbec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bbbf0:	085b      	lsrs	r3, r3, #1
   bbbf2:	ea4f 0232 	mov.w	r2, r2, rrx
   bbbf6:	ebb6 0e02 	subs.w	lr, r6, r2
   bbbfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbbfe:	bf22      	ittt	cs
   bbc00:	1ab6      	subcs	r6, r6, r2
   bbc02:	4675      	movcs	r5, lr
   bbc04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bbc08:	ea55 0e06 	orrs.w	lr, r5, r6
   bbc0c:	d018      	beq.n	bbc40 <__aeabi_ddiv+0x114>
   bbc0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bbc12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbc16:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbc1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbc1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbc22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbc26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbc2a:	d1c0      	bne.n	bbbae <__aeabi_ddiv+0x82>
   bbc2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbc30:	d10b      	bne.n	bbc4a <__aeabi_ddiv+0x11e>
   bbc32:	ea41 0100 	orr.w	r1, r1, r0
   bbc36:	f04f 0000 	mov.w	r0, #0
   bbc3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbc3e:	e7b6      	b.n	bbbae <__aeabi_ddiv+0x82>
   bbc40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbc44:	bf04      	itt	eq
   bbc46:	4301      	orreq	r1, r0
   bbc48:	2000      	moveq	r0, #0
   bbc4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbc4e:	bf88      	it	hi
   bbc50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbc54:	f63f aeaf 	bhi.w	bb9b6 <__aeabi_dmul+0xde>
   bbc58:	ebb5 0c03 	subs.w	ip, r5, r3
   bbc5c:	bf04      	itt	eq
   bbc5e:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbc62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbc66:	f150 0000 	adcs.w	r0, r0, #0
   bbc6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbc6e:	bd70      	pop	{r4, r5, r6, pc}
   bbc70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbc74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbc78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbc7c:	bfc2      	ittt	gt
   bbc7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbc82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbc86:	bd70      	popgt	{r4, r5, r6, pc}
   bbc88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbc8c:	f04f 0e00 	mov.w	lr, #0
   bbc90:	3c01      	subs	r4, #1
   bbc92:	e690      	b.n	bb9b6 <__aeabi_dmul+0xde>
   bbc94:	ea45 0e06 	orr.w	lr, r5, r6
   bbc98:	e68d      	b.n	bb9b6 <__aeabi_dmul+0xde>
   bbc9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbc9e:	ea94 0f0c 	teq	r4, ip
   bbca2:	bf08      	it	eq
   bbca4:	ea95 0f0c 	teqeq	r5, ip
   bbca8:	f43f af3b 	beq.w	bbb22 <__aeabi_dmul+0x24a>
   bbcac:	ea94 0f0c 	teq	r4, ip
   bbcb0:	d10a      	bne.n	bbcc8 <__aeabi_ddiv+0x19c>
   bbcb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbcb6:	f47f af34 	bne.w	bbb22 <__aeabi_dmul+0x24a>
   bbcba:	ea95 0f0c 	teq	r5, ip
   bbcbe:	f47f af25 	bne.w	bbb0c <__aeabi_dmul+0x234>
   bbcc2:	4610      	mov	r0, r2
   bbcc4:	4619      	mov	r1, r3
   bbcc6:	e72c      	b.n	bbb22 <__aeabi_dmul+0x24a>
   bbcc8:	ea95 0f0c 	teq	r5, ip
   bbccc:	d106      	bne.n	bbcdc <__aeabi_ddiv+0x1b0>
   bbcce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbcd2:	f43f aefd 	beq.w	bbad0 <__aeabi_dmul+0x1f8>
   bbcd6:	4610      	mov	r0, r2
   bbcd8:	4619      	mov	r1, r3
   bbcda:	e722      	b.n	bbb22 <__aeabi_dmul+0x24a>
   bbcdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbce0:	bf18      	it	ne
   bbce2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbce6:	f47f aec5 	bne.w	bba74 <__aeabi_dmul+0x19c>
   bbcea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbcee:	f47f af0d 	bne.w	bbb0c <__aeabi_dmul+0x234>
   bbcf2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbcf6:	f47f aeeb 	bne.w	bbad0 <__aeabi_dmul+0x1f8>
   bbcfa:	e712      	b.n	bbb22 <__aeabi_dmul+0x24a>

000bbcfc <__gedf2>:
   bbcfc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbd00:	e006      	b.n	bbd10 <__cmpdf2+0x4>
   bbd02:	bf00      	nop

000bbd04 <__ledf2>:
   bbd04:	f04f 0c01 	mov.w	ip, #1
   bbd08:	e002      	b.n	bbd10 <__cmpdf2+0x4>
   bbd0a:	bf00      	nop

000bbd0c <__cmpdf2>:
   bbd0c:	f04f 0c01 	mov.w	ip, #1
   bbd10:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbd14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbd18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbd1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbd20:	bf18      	it	ne
   bbd22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbd26:	d01b      	beq.n	bbd60 <__cmpdf2+0x54>
   bbd28:	b001      	add	sp, #4
   bbd2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbd2e:	bf0c      	ite	eq
   bbd30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbd34:	ea91 0f03 	teqne	r1, r3
   bbd38:	bf02      	ittt	eq
   bbd3a:	ea90 0f02 	teqeq	r0, r2
   bbd3e:	2000      	moveq	r0, #0
   bbd40:	4770      	bxeq	lr
   bbd42:	f110 0f00 	cmn.w	r0, #0
   bbd46:	ea91 0f03 	teq	r1, r3
   bbd4a:	bf58      	it	pl
   bbd4c:	4299      	cmppl	r1, r3
   bbd4e:	bf08      	it	eq
   bbd50:	4290      	cmpeq	r0, r2
   bbd52:	bf2c      	ite	cs
   bbd54:	17d8      	asrcs	r0, r3, #31
   bbd56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbd5a:	f040 0001 	orr.w	r0, r0, #1
   bbd5e:	4770      	bx	lr
   bbd60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbd64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbd68:	d102      	bne.n	bbd70 <__cmpdf2+0x64>
   bbd6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbd6e:	d107      	bne.n	bbd80 <__cmpdf2+0x74>
   bbd70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbd74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbd78:	d1d6      	bne.n	bbd28 <__cmpdf2+0x1c>
   bbd7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbd7e:	d0d3      	beq.n	bbd28 <__cmpdf2+0x1c>
   bbd80:	f85d 0b04 	ldr.w	r0, [sp], #4
   bbd84:	4770      	bx	lr
   bbd86:	bf00      	nop

000bbd88 <__aeabi_cdrcmple>:
   bbd88:	4684      	mov	ip, r0
   bbd8a:	4610      	mov	r0, r2
   bbd8c:	4662      	mov	r2, ip
   bbd8e:	468c      	mov	ip, r1
   bbd90:	4619      	mov	r1, r3
   bbd92:	4663      	mov	r3, ip
   bbd94:	e000      	b.n	bbd98 <__aeabi_cdcmpeq>
   bbd96:	bf00      	nop

000bbd98 <__aeabi_cdcmpeq>:
   bbd98:	b501      	push	{r0, lr}
   bbd9a:	f7ff ffb7 	bl	bbd0c <__cmpdf2>
   bbd9e:	2800      	cmp	r0, #0
   bbda0:	bf48      	it	mi
   bbda2:	f110 0f00 	cmnmi.w	r0, #0
   bbda6:	bd01      	pop	{r0, pc}

000bbda8 <__aeabi_dcmpeq>:
   bbda8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbdac:	f7ff fff4 	bl	bbd98 <__aeabi_cdcmpeq>
   bbdb0:	bf0c      	ite	eq
   bbdb2:	2001      	moveq	r0, #1
   bbdb4:	2000      	movne	r0, #0
   bbdb6:	f85d fb08 	ldr.w	pc, [sp], #8
   bbdba:	bf00      	nop

000bbdbc <__aeabi_dcmplt>:
   bbdbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbdc0:	f7ff ffea 	bl	bbd98 <__aeabi_cdcmpeq>
   bbdc4:	bf34      	ite	cc
   bbdc6:	2001      	movcc	r0, #1
   bbdc8:	2000      	movcs	r0, #0
   bbdca:	f85d fb08 	ldr.w	pc, [sp], #8
   bbdce:	bf00      	nop

000bbdd0 <__aeabi_dcmple>:
   bbdd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbdd4:	f7ff ffe0 	bl	bbd98 <__aeabi_cdcmpeq>
   bbdd8:	bf94      	ite	ls
   bbdda:	2001      	movls	r0, #1
   bbddc:	2000      	movhi	r0, #0
   bbdde:	f85d fb08 	ldr.w	pc, [sp], #8
   bbde2:	bf00      	nop

000bbde4 <__aeabi_dcmpge>:
   bbde4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbde8:	f7ff ffce 	bl	bbd88 <__aeabi_cdrcmple>
   bbdec:	bf94      	ite	ls
   bbdee:	2001      	movls	r0, #1
   bbdf0:	2000      	movhi	r0, #0
   bbdf2:	f85d fb08 	ldr.w	pc, [sp], #8
   bbdf6:	bf00      	nop

000bbdf8 <__aeabi_dcmpgt>:
   bbdf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbdfc:	f7ff ffc4 	bl	bbd88 <__aeabi_cdrcmple>
   bbe00:	bf34      	ite	cc
   bbe02:	2001      	movcc	r0, #1
   bbe04:	2000      	movcs	r0, #0
   bbe06:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe0a:	bf00      	nop

000bbe0c <__aeabi_dcmpun>:
   bbe0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbe10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbe14:	d102      	bne.n	bbe1c <__aeabi_dcmpun+0x10>
   bbe16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbe1a:	d10a      	bne.n	bbe32 <__aeabi_dcmpun+0x26>
   bbe1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbe20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbe24:	d102      	bne.n	bbe2c <__aeabi_dcmpun+0x20>
   bbe26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbe2a:	d102      	bne.n	bbe32 <__aeabi_dcmpun+0x26>
   bbe2c:	f04f 0000 	mov.w	r0, #0
   bbe30:	4770      	bx	lr
   bbe32:	f04f 0001 	mov.w	r0, #1
   bbe36:	4770      	bx	lr

000bbe38 <__aeabi_d2iz>:
   bbe38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbe3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbe40:	d215      	bcs.n	bbe6e <__aeabi_d2iz+0x36>
   bbe42:	d511      	bpl.n	bbe68 <__aeabi_d2iz+0x30>
   bbe44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbe48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbe4c:	d912      	bls.n	bbe74 <__aeabi_d2iz+0x3c>
   bbe4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbe52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbe56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbe5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbe5e:	fa23 f002 	lsr.w	r0, r3, r2
   bbe62:	bf18      	it	ne
   bbe64:	4240      	negne	r0, r0
   bbe66:	4770      	bx	lr
   bbe68:	f04f 0000 	mov.w	r0, #0
   bbe6c:	4770      	bx	lr
   bbe6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbe72:	d105      	bne.n	bbe80 <__aeabi_d2iz+0x48>
   bbe74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bbe78:	bf08      	it	eq
   bbe7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bbe7e:	4770      	bx	lr
   bbe80:	f04f 0000 	mov.w	r0, #0
   bbe84:	4770      	bx	lr
   bbe86:	bf00      	nop

000bbe88 <__aeabi_d2uiz>:
   bbe88:	004a      	lsls	r2, r1, #1
   bbe8a:	d211      	bcs.n	bbeb0 <__aeabi_d2uiz+0x28>
   bbe8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbe90:	d211      	bcs.n	bbeb6 <__aeabi_d2uiz+0x2e>
   bbe92:	d50d      	bpl.n	bbeb0 <__aeabi_d2uiz+0x28>
   bbe94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbe98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbe9c:	d40e      	bmi.n	bbebc <__aeabi_d2uiz+0x34>
   bbe9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbea6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbeaa:	fa23 f002 	lsr.w	r0, r3, r2
   bbeae:	4770      	bx	lr
   bbeb0:	f04f 0000 	mov.w	r0, #0
   bbeb4:	4770      	bx	lr
   bbeb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbeba:	d102      	bne.n	bbec2 <__aeabi_d2uiz+0x3a>
   bbebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbec0:	4770      	bx	lr
   bbec2:	f04f 0000 	mov.w	r0, #0
   bbec6:	4770      	bx	lr

000bbec8 <asctime_r>:
   bbec8:	b510      	push	{r4, lr}
   bbeca:	460c      	mov	r4, r1
   bbecc:	6941      	ldr	r1, [r0, #20]
   bbece:	6903      	ldr	r3, [r0, #16]
   bbed0:	6982      	ldr	r2, [r0, #24]
   bbed2:	b086      	sub	sp, #24
   bbed4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bbed8:	9104      	str	r1, [sp, #16]
   bbeda:	6801      	ldr	r1, [r0, #0]
   bbedc:	9103      	str	r1, [sp, #12]
   bbede:	6841      	ldr	r1, [r0, #4]
   bbee0:	9102      	str	r1, [sp, #8]
   bbee2:	6881      	ldr	r1, [r0, #8]
   bbee4:	9101      	str	r1, [sp, #4]
   bbee6:	68c1      	ldr	r1, [r0, #12]
   bbee8:	9100      	str	r1, [sp, #0]
   bbeea:	4907      	ldr	r1, [pc, #28]	; (bbf08 <asctime_r+0x40>)
   bbeec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bbef0:	440b      	add	r3, r1
   bbef2:	4906      	ldr	r1, [pc, #24]	; (bbf0c <asctime_r+0x44>)
   bbef4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bbef8:	440a      	add	r2, r1
   bbefa:	4620      	mov	r0, r4
   bbefc:	4904      	ldr	r1, [pc, #16]	; (bbf10 <asctime_r+0x48>)
   bbefe:	f7fc fcaf 	bl	b8860 <siprintf>
   bbf02:	4620      	mov	r0, r4
   bbf04:	b006      	add	sp, #24
   bbf06:	bd10      	pop	{r4, pc}
   bbf08:	000bd41e 	.word	0x000bd41e
   bbf0c:	000bd409 	.word	0x000bd409
   bbf10:	000bd3e9 	.word	0x000bd3e9

000bbf14 <atexit>:
   bbf14:	2300      	movs	r3, #0
   bbf16:	4601      	mov	r1, r0
   bbf18:	461a      	mov	r2, r3
   bbf1a:	4618      	mov	r0, r3
   bbf1c:	f000 b9ba 	b.w	bc294 <__register_exitproc>

000bbf20 <gmtime>:
   bbf20:	b538      	push	{r3, r4, r5, lr}
   bbf22:	4b0b      	ldr	r3, [pc, #44]	; (bbf50 <gmtime+0x30>)
   bbf24:	681d      	ldr	r5, [r3, #0]
   bbf26:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bbf28:	4604      	mov	r4, r0
   bbf2a:	b953      	cbnz	r3, bbf42 <gmtime+0x22>
   bbf2c:	2024      	movs	r0, #36	; 0x24
   bbf2e:	f7fc fc7f 	bl	b8830 <malloc>
   bbf32:	4602      	mov	r2, r0
   bbf34:	63e8      	str	r0, [r5, #60]	; 0x3c
   bbf36:	b920      	cbnz	r0, bbf42 <gmtime+0x22>
   bbf38:	4b06      	ldr	r3, [pc, #24]	; (bbf54 <gmtime+0x34>)
   bbf3a:	4807      	ldr	r0, [pc, #28]	; (bbf58 <gmtime+0x38>)
   bbf3c:	2139      	movs	r1, #57	; 0x39
   bbf3e:	f7fc fcb7 	bl	b88b0 <__assert_func>
   bbf42:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bbf44:	4620      	mov	r0, r4
   bbf46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbf4a:	f7fc bcd1 	b.w	b88f0 <gmtime_r>
   bbf4e:	bf00      	nop
   bbf50:	2003ded0 	.word	0x2003ded0
   bbf54:	000bd442 	.word	0x000bd442
   bbf58:	000bd459 	.word	0x000bd459

000bbf5c <isprint>:
   bbf5c:	4b02      	ldr	r3, [pc, #8]	; (bbf68 <isprint+0xc>)
   bbf5e:	4418      	add	r0, r3
   bbf60:	7840      	ldrb	r0, [r0, #1]
   bbf62:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbf66:	4770      	bx	lr
   bbf68:	000bd50b 	.word	0x000bd50b

000bbf6c <memcpy>:
   bbf6c:	440a      	add	r2, r1
   bbf6e:	4291      	cmp	r1, r2
   bbf70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbf74:	d100      	bne.n	bbf78 <memcpy+0xc>
   bbf76:	4770      	bx	lr
   bbf78:	b510      	push	{r4, lr}
   bbf7a:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbf7e:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbf82:	4291      	cmp	r1, r2
   bbf84:	d1f9      	bne.n	bbf7a <memcpy+0xe>
   bbf86:	bd10      	pop	{r4, pc}

000bbf88 <memmove>:
   bbf88:	4288      	cmp	r0, r1
   bbf8a:	b510      	push	{r4, lr}
   bbf8c:	eb01 0402 	add.w	r4, r1, r2
   bbf90:	d902      	bls.n	bbf98 <memmove+0x10>
   bbf92:	4284      	cmp	r4, r0
   bbf94:	4623      	mov	r3, r4
   bbf96:	d807      	bhi.n	bbfa8 <memmove+0x20>
   bbf98:	1e43      	subs	r3, r0, #1
   bbf9a:	42a1      	cmp	r1, r4
   bbf9c:	d008      	beq.n	bbfb0 <memmove+0x28>
   bbf9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbfa2:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbfa6:	e7f8      	b.n	bbf9a <memmove+0x12>
   bbfa8:	4402      	add	r2, r0
   bbfaa:	4601      	mov	r1, r0
   bbfac:	428a      	cmp	r2, r1
   bbfae:	d100      	bne.n	bbfb2 <memmove+0x2a>
   bbfb0:	bd10      	pop	{r4, pc}
   bbfb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbfb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbfba:	e7f7      	b.n	bbfac <memmove+0x24>

000bbfbc <memset>:
   bbfbc:	4402      	add	r2, r0
   bbfbe:	4603      	mov	r3, r0
   bbfc0:	4293      	cmp	r3, r2
   bbfc2:	d100      	bne.n	bbfc6 <memset+0xa>
   bbfc4:	4770      	bx	lr
   bbfc6:	f803 1b01 	strb.w	r1, [r3], #1
   bbfca:	e7f9      	b.n	bbfc0 <memset+0x4>

000bbfcc <srand>:
   bbfcc:	b538      	push	{r3, r4, r5, lr}
   bbfce:	4b10      	ldr	r3, [pc, #64]	; (bc010 <srand+0x44>)
   bbfd0:	681d      	ldr	r5, [r3, #0]
   bbfd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbfd4:	4604      	mov	r4, r0
   bbfd6:	b9b3      	cbnz	r3, bc006 <srand+0x3a>
   bbfd8:	2018      	movs	r0, #24
   bbfda:	f7fc fc29 	bl	b8830 <malloc>
   bbfde:	4602      	mov	r2, r0
   bbfe0:	63a8      	str	r0, [r5, #56]	; 0x38
   bbfe2:	b920      	cbnz	r0, bbfee <srand+0x22>
   bbfe4:	4b0b      	ldr	r3, [pc, #44]	; (bc014 <srand+0x48>)
   bbfe6:	480c      	ldr	r0, [pc, #48]	; (bc018 <srand+0x4c>)
   bbfe8:	2142      	movs	r1, #66	; 0x42
   bbfea:	f7fc fc61 	bl	b88b0 <__assert_func>
   bbfee:	490b      	ldr	r1, [pc, #44]	; (bc01c <srand+0x50>)
   bbff0:	4b0b      	ldr	r3, [pc, #44]	; (bc020 <srand+0x54>)
   bbff2:	e9c0 1300 	strd	r1, r3, [r0]
   bbff6:	4b0b      	ldr	r3, [pc, #44]	; (bc024 <srand+0x58>)
   bbff8:	6083      	str	r3, [r0, #8]
   bbffa:	230b      	movs	r3, #11
   bbffc:	8183      	strh	r3, [r0, #12]
   bbffe:	2100      	movs	r1, #0
   bc000:	2001      	movs	r0, #1
   bc002:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc006:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc008:	2200      	movs	r2, #0
   bc00a:	611c      	str	r4, [r3, #16]
   bc00c:	615a      	str	r2, [r3, #20]
   bc00e:	bd38      	pop	{r3, r4, r5, pc}
   bc010:	2003ded0 	.word	0x2003ded0
   bc014:	000bd442 	.word	0x000bd442
   bc018:	000bd4b2 	.word	0x000bd4b2
   bc01c:	abcd330e 	.word	0xabcd330e
   bc020:	e66d1234 	.word	0xe66d1234
   bc024:	0005deec 	.word	0x0005deec

000bc028 <rand>:
   bc028:	4b16      	ldr	r3, [pc, #88]	; (bc084 <rand+0x5c>)
   bc02a:	b510      	push	{r4, lr}
   bc02c:	681c      	ldr	r4, [r3, #0]
   bc02e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc030:	b9b3      	cbnz	r3, bc060 <rand+0x38>
   bc032:	2018      	movs	r0, #24
   bc034:	f7fc fbfc 	bl	b8830 <malloc>
   bc038:	63a0      	str	r0, [r4, #56]	; 0x38
   bc03a:	b928      	cbnz	r0, bc048 <rand+0x20>
   bc03c:	4602      	mov	r2, r0
   bc03e:	4b12      	ldr	r3, [pc, #72]	; (bc088 <rand+0x60>)
   bc040:	4812      	ldr	r0, [pc, #72]	; (bc08c <rand+0x64>)
   bc042:	214e      	movs	r1, #78	; 0x4e
   bc044:	f7fc fc34 	bl	b88b0 <__assert_func>
   bc048:	4a11      	ldr	r2, [pc, #68]	; (bc090 <rand+0x68>)
   bc04a:	4b12      	ldr	r3, [pc, #72]	; (bc094 <rand+0x6c>)
   bc04c:	e9c0 2300 	strd	r2, r3, [r0]
   bc050:	4b11      	ldr	r3, [pc, #68]	; (bc098 <rand+0x70>)
   bc052:	6083      	str	r3, [r0, #8]
   bc054:	230b      	movs	r3, #11
   bc056:	8183      	strh	r3, [r0, #12]
   bc058:	2201      	movs	r2, #1
   bc05a:	2300      	movs	r3, #0
   bc05c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bc060:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bc062:	4a0e      	ldr	r2, [pc, #56]	; (bc09c <rand+0x74>)
   bc064:	6920      	ldr	r0, [r4, #16]
   bc066:	6963      	ldr	r3, [r4, #20]
   bc068:	490d      	ldr	r1, [pc, #52]	; (bc0a0 <rand+0x78>)
   bc06a:	4342      	muls	r2, r0
   bc06c:	fb01 2203 	mla	r2, r1, r3, r2
   bc070:	fba0 0101 	umull	r0, r1, r0, r1
   bc074:	1c43      	adds	r3, r0, #1
   bc076:	eb42 0001 	adc.w	r0, r2, r1
   bc07a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bc07e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bc082:	bd10      	pop	{r4, pc}
   bc084:	2003ded0 	.word	0x2003ded0
   bc088:	000bd442 	.word	0x000bd442
   bc08c:	000bd4b2 	.word	0x000bd4b2
   bc090:	abcd330e 	.word	0xabcd330e
   bc094:	e66d1234 	.word	0xe66d1234
   bc098:	0005deec 	.word	0x0005deec
   bc09c:	5851f42d 	.word	0x5851f42d
   bc0a0:	4c957f2d 	.word	0x4c957f2d

000bc0a4 <strchr>:
   bc0a4:	b2c9      	uxtb	r1, r1
   bc0a6:	4603      	mov	r3, r0
   bc0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc0ac:	b11a      	cbz	r2, bc0b6 <strchr+0x12>
   bc0ae:	428a      	cmp	r2, r1
   bc0b0:	d1f9      	bne.n	bc0a6 <strchr+0x2>
   bc0b2:	4618      	mov	r0, r3
   bc0b4:	4770      	bx	lr
   bc0b6:	2900      	cmp	r1, #0
   bc0b8:	bf18      	it	ne
   bc0ba:	2300      	movne	r3, #0
   bc0bc:	e7f9      	b.n	bc0b2 <strchr+0xe>

000bc0be <strchrnul>:
   bc0be:	b510      	push	{r4, lr}
   bc0c0:	4604      	mov	r4, r0
   bc0c2:	f7ff ffef 	bl	bc0a4 <strchr>
   bc0c6:	b918      	cbnz	r0, bc0d0 <strchrnul+0x12>
   bc0c8:	4620      	mov	r0, r4
   bc0ca:	f000 f814 	bl	bc0f6 <strlen>
   bc0ce:	4420      	add	r0, r4
   bc0d0:	bd10      	pop	{r4, pc}

000bc0d2 <strcmp>:
   bc0d2:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc0d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc0da:	2a01      	cmp	r2, #1
   bc0dc:	bf28      	it	cs
   bc0de:	429a      	cmpcs	r2, r3
   bc0e0:	d0f7      	beq.n	bc0d2 <strcmp>
   bc0e2:	1ad0      	subs	r0, r2, r3
   bc0e4:	4770      	bx	lr

000bc0e6 <strcpy>:
   bc0e6:	4603      	mov	r3, r0
   bc0e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc0ec:	f803 2b01 	strb.w	r2, [r3], #1
   bc0f0:	2a00      	cmp	r2, #0
   bc0f2:	d1f9      	bne.n	bc0e8 <strcpy+0x2>
   bc0f4:	4770      	bx	lr

000bc0f6 <strlen>:
   bc0f6:	4603      	mov	r3, r0
   bc0f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc0fc:	2a00      	cmp	r2, #0
   bc0fe:	d1fb      	bne.n	bc0f8 <strlen+0x2>
   bc100:	1a18      	subs	r0, r3, r0
   bc102:	3801      	subs	r0, #1
   bc104:	4770      	bx	lr

000bc106 <strncmp>:
   bc106:	b510      	push	{r4, lr}
   bc108:	b17a      	cbz	r2, bc12a <strncmp+0x24>
   bc10a:	4603      	mov	r3, r0
   bc10c:	3901      	subs	r1, #1
   bc10e:	1884      	adds	r4, r0, r2
   bc110:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc114:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc118:	4290      	cmp	r0, r2
   bc11a:	d101      	bne.n	bc120 <strncmp+0x1a>
   bc11c:	42a3      	cmp	r3, r4
   bc11e:	d101      	bne.n	bc124 <strncmp+0x1e>
   bc120:	1a80      	subs	r0, r0, r2
   bc122:	bd10      	pop	{r4, pc}
   bc124:	2800      	cmp	r0, #0
   bc126:	d1f3      	bne.n	bc110 <strncmp+0xa>
   bc128:	e7fa      	b.n	bc120 <strncmp+0x1a>
   bc12a:	4610      	mov	r0, r2
   bc12c:	e7f9      	b.n	bc122 <strncmp+0x1c>

000bc12e <strncpy>:
   bc12e:	b510      	push	{r4, lr}
   bc130:	3901      	subs	r1, #1
   bc132:	4603      	mov	r3, r0
   bc134:	b132      	cbz	r2, bc144 <strncpy+0x16>
   bc136:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc13a:	f803 4b01 	strb.w	r4, [r3], #1
   bc13e:	3a01      	subs	r2, #1
   bc140:	2c00      	cmp	r4, #0
   bc142:	d1f7      	bne.n	bc134 <strncpy+0x6>
   bc144:	441a      	add	r2, r3
   bc146:	2100      	movs	r1, #0
   bc148:	4293      	cmp	r3, r2
   bc14a:	d100      	bne.n	bc14e <strncpy+0x20>
   bc14c:	bd10      	pop	{r4, pc}
   bc14e:	f803 1b01 	strb.w	r1, [r3], #1
   bc152:	e7f9      	b.n	bc148 <strncpy+0x1a>

000bc154 <strrchr>:
   bc154:	b538      	push	{r3, r4, r5, lr}
   bc156:	4603      	mov	r3, r0
   bc158:	460c      	mov	r4, r1
   bc15a:	b969      	cbnz	r1, bc178 <strrchr+0x24>
   bc15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc160:	f7ff bfa0 	b.w	bc0a4 <strchr>
   bc164:	1c43      	adds	r3, r0, #1
   bc166:	4605      	mov	r5, r0
   bc168:	4621      	mov	r1, r4
   bc16a:	4618      	mov	r0, r3
   bc16c:	f7ff ff9a 	bl	bc0a4 <strchr>
   bc170:	2800      	cmp	r0, #0
   bc172:	d1f7      	bne.n	bc164 <strrchr+0x10>
   bc174:	4628      	mov	r0, r5
   bc176:	bd38      	pop	{r3, r4, r5, pc}
   bc178:	2500      	movs	r5, #0
   bc17a:	e7f5      	b.n	bc168 <strrchr+0x14>

000bc17c <_strtol_l.constprop.0>:
   bc17c:	2b01      	cmp	r3, #1
   bc17e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc182:	d001      	beq.n	bc188 <_strtol_l.constprop.0+0xc>
   bc184:	2b24      	cmp	r3, #36	; 0x24
   bc186:	d906      	bls.n	bc196 <_strtol_l.constprop.0+0x1a>
   bc188:	f7fc fb8a 	bl	b88a0 <__errno>
   bc18c:	2316      	movs	r3, #22
   bc18e:	6003      	str	r3, [r0, #0]
   bc190:	2000      	movs	r0, #0
   bc192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc196:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc27c <_strtol_l.constprop.0+0x100>
   bc19a:	460d      	mov	r5, r1
   bc19c:	462e      	mov	r6, r5
   bc19e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc1a2:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc1a6:	f017 0708 	ands.w	r7, r7, #8
   bc1aa:	d1f7      	bne.n	bc19c <_strtol_l.constprop.0+0x20>
   bc1ac:	2c2d      	cmp	r4, #45	; 0x2d
   bc1ae:	d132      	bne.n	bc216 <_strtol_l.constprop.0+0x9a>
   bc1b0:	782c      	ldrb	r4, [r5, #0]
   bc1b2:	2701      	movs	r7, #1
   bc1b4:	1cb5      	adds	r5, r6, #2
   bc1b6:	2b00      	cmp	r3, #0
   bc1b8:	d05b      	beq.n	bc272 <_strtol_l.constprop.0+0xf6>
   bc1ba:	2b10      	cmp	r3, #16
   bc1bc:	d109      	bne.n	bc1d2 <_strtol_l.constprop.0+0x56>
   bc1be:	2c30      	cmp	r4, #48	; 0x30
   bc1c0:	d107      	bne.n	bc1d2 <_strtol_l.constprop.0+0x56>
   bc1c2:	782c      	ldrb	r4, [r5, #0]
   bc1c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc1c8:	2c58      	cmp	r4, #88	; 0x58
   bc1ca:	d14d      	bne.n	bc268 <_strtol_l.constprop.0+0xec>
   bc1cc:	786c      	ldrb	r4, [r5, #1]
   bc1ce:	2310      	movs	r3, #16
   bc1d0:	3502      	adds	r5, #2
   bc1d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc1d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc1da:	f04f 0c00 	mov.w	ip, #0
   bc1de:	fbb8 f9f3 	udiv	r9, r8, r3
   bc1e2:	4666      	mov	r6, ip
   bc1e4:	fb03 8a19 	mls	sl, r3, r9, r8
   bc1e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc1ec:	f1be 0f09 	cmp.w	lr, #9
   bc1f0:	d816      	bhi.n	bc220 <_strtol_l.constprop.0+0xa4>
   bc1f2:	4674      	mov	r4, lr
   bc1f4:	42a3      	cmp	r3, r4
   bc1f6:	dd24      	ble.n	bc242 <_strtol_l.constprop.0+0xc6>
   bc1f8:	f1bc 0f00 	cmp.w	ip, #0
   bc1fc:	db1e      	blt.n	bc23c <_strtol_l.constprop.0+0xc0>
   bc1fe:	45b1      	cmp	r9, r6
   bc200:	d31c      	bcc.n	bc23c <_strtol_l.constprop.0+0xc0>
   bc202:	d101      	bne.n	bc208 <_strtol_l.constprop.0+0x8c>
   bc204:	45a2      	cmp	sl, r4
   bc206:	db19      	blt.n	bc23c <_strtol_l.constprop.0+0xc0>
   bc208:	fb06 4603 	mla	r6, r6, r3, r4
   bc20c:	f04f 0c01 	mov.w	ip, #1
   bc210:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc214:	e7e8      	b.n	bc1e8 <_strtol_l.constprop.0+0x6c>
   bc216:	2c2b      	cmp	r4, #43	; 0x2b
   bc218:	bf04      	itt	eq
   bc21a:	782c      	ldrbeq	r4, [r5, #0]
   bc21c:	1cb5      	addeq	r5, r6, #2
   bc21e:	e7ca      	b.n	bc1b6 <_strtol_l.constprop.0+0x3a>
   bc220:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc224:	f1be 0f19 	cmp.w	lr, #25
   bc228:	d801      	bhi.n	bc22e <_strtol_l.constprop.0+0xb2>
   bc22a:	3c37      	subs	r4, #55	; 0x37
   bc22c:	e7e2      	b.n	bc1f4 <_strtol_l.constprop.0+0x78>
   bc22e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc232:	f1be 0f19 	cmp.w	lr, #25
   bc236:	d804      	bhi.n	bc242 <_strtol_l.constprop.0+0xc6>
   bc238:	3c57      	subs	r4, #87	; 0x57
   bc23a:	e7db      	b.n	bc1f4 <_strtol_l.constprop.0+0x78>
   bc23c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc240:	e7e6      	b.n	bc210 <_strtol_l.constprop.0+0x94>
   bc242:	f1bc 0f00 	cmp.w	ip, #0
   bc246:	da05      	bge.n	bc254 <_strtol_l.constprop.0+0xd8>
   bc248:	2322      	movs	r3, #34	; 0x22
   bc24a:	6003      	str	r3, [r0, #0]
   bc24c:	4646      	mov	r6, r8
   bc24e:	b942      	cbnz	r2, bc262 <_strtol_l.constprop.0+0xe6>
   bc250:	4630      	mov	r0, r6
   bc252:	e79e      	b.n	bc192 <_strtol_l.constprop.0+0x16>
   bc254:	b107      	cbz	r7, bc258 <_strtol_l.constprop.0+0xdc>
   bc256:	4276      	negs	r6, r6
   bc258:	2a00      	cmp	r2, #0
   bc25a:	d0f9      	beq.n	bc250 <_strtol_l.constprop.0+0xd4>
   bc25c:	f1bc 0f00 	cmp.w	ip, #0
   bc260:	d000      	beq.n	bc264 <_strtol_l.constprop.0+0xe8>
   bc262:	1e69      	subs	r1, r5, #1
   bc264:	6011      	str	r1, [r2, #0]
   bc266:	e7f3      	b.n	bc250 <_strtol_l.constprop.0+0xd4>
   bc268:	2430      	movs	r4, #48	; 0x30
   bc26a:	2b00      	cmp	r3, #0
   bc26c:	d1b1      	bne.n	bc1d2 <_strtol_l.constprop.0+0x56>
   bc26e:	2308      	movs	r3, #8
   bc270:	e7af      	b.n	bc1d2 <_strtol_l.constprop.0+0x56>
   bc272:	2c30      	cmp	r4, #48	; 0x30
   bc274:	d0a5      	beq.n	bc1c2 <_strtol_l.constprop.0+0x46>
   bc276:	230a      	movs	r3, #10
   bc278:	e7ab      	b.n	bc1d2 <_strtol_l.constprop.0+0x56>
   bc27a:	bf00      	nop
   bc27c:	000bd50c 	.word	0x000bd50c

000bc280 <strtol>:
   bc280:	4613      	mov	r3, r2
   bc282:	460a      	mov	r2, r1
   bc284:	4601      	mov	r1, r0
   bc286:	4802      	ldr	r0, [pc, #8]	; (bc290 <strtol+0x10>)
   bc288:	6800      	ldr	r0, [r0, #0]
   bc28a:	f7ff bf77 	b.w	bc17c <_strtol_l.constprop.0>
   bc28e:	bf00      	nop
   bc290:	2003ded0 	.word	0x2003ded0

000bc294 <__register_exitproc>:
   bc294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc298:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc354 <__register_exitproc+0xc0>
   bc29c:	4606      	mov	r6, r0
   bc29e:	f8d8 0000 	ldr.w	r0, [r8]
   bc2a2:	461f      	mov	r7, r3
   bc2a4:	460d      	mov	r5, r1
   bc2a6:	4691      	mov	r9, r2
   bc2a8:	f000 f856 	bl	bc358 <__retarget_lock_acquire_recursive>
   bc2ac:	4b25      	ldr	r3, [pc, #148]	; (bc344 <__register_exitproc+0xb0>)
   bc2ae:	681c      	ldr	r4, [r3, #0]
   bc2b0:	b934      	cbnz	r4, bc2c0 <__register_exitproc+0x2c>
   bc2b2:	4c25      	ldr	r4, [pc, #148]	; (bc348 <__register_exitproc+0xb4>)
   bc2b4:	601c      	str	r4, [r3, #0]
   bc2b6:	4b25      	ldr	r3, [pc, #148]	; (bc34c <__register_exitproc+0xb8>)
   bc2b8:	b113      	cbz	r3, bc2c0 <__register_exitproc+0x2c>
   bc2ba:	681b      	ldr	r3, [r3, #0]
   bc2bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc2c0:	6863      	ldr	r3, [r4, #4]
   bc2c2:	2b1f      	cmp	r3, #31
   bc2c4:	dd07      	ble.n	bc2d6 <__register_exitproc+0x42>
   bc2c6:	f8d8 0000 	ldr.w	r0, [r8]
   bc2ca:	f000 f847 	bl	bc35c <__retarget_lock_release_recursive>
   bc2ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc2d6:	b34e      	cbz	r6, bc32c <__register_exitproc+0x98>
   bc2d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc2dc:	b988      	cbnz	r0, bc302 <__register_exitproc+0x6e>
   bc2de:	4b1c      	ldr	r3, [pc, #112]	; (bc350 <__register_exitproc+0xbc>)
   bc2e0:	b923      	cbnz	r3, bc2ec <__register_exitproc+0x58>
   bc2e2:	f8d8 0000 	ldr.w	r0, [r8]
   bc2e6:	f000 f838 	bl	bc35a <__retarget_lock_release>
   bc2ea:	e7f0      	b.n	bc2ce <__register_exitproc+0x3a>
   bc2ec:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc2f0:	f7fc fa9e 	bl	b8830 <malloc>
   bc2f4:	2800      	cmp	r0, #0
   bc2f6:	d0f4      	beq.n	bc2e2 <__register_exitproc+0x4e>
   bc2f8:	2300      	movs	r3, #0
   bc2fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc2fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc302:	6863      	ldr	r3, [r4, #4]
   bc304:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc308:	2201      	movs	r2, #1
   bc30a:	409a      	lsls	r2, r3
   bc30c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc310:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc314:	4313      	orrs	r3, r2
   bc316:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc31a:	2e02      	cmp	r6, #2
   bc31c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc320:	bf02      	ittt	eq
   bc322:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc326:	4313      	orreq	r3, r2
   bc328:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc32c:	6863      	ldr	r3, [r4, #4]
   bc32e:	f8d8 0000 	ldr.w	r0, [r8]
   bc332:	1c5a      	adds	r2, r3, #1
   bc334:	3302      	adds	r3, #2
   bc336:	6062      	str	r2, [r4, #4]
   bc338:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc33c:	f000 f80e 	bl	bc35c <__retarget_lock_release_recursive>
   bc340:	2000      	movs	r0, #0
   bc342:	e7c6      	b.n	bc2d2 <__register_exitproc+0x3e>
   bc344:	2003e7e8 	.word	0x2003e7e8
   bc348:	2003e75c 	.word	0x2003e75c
   bc34c:	00000000 	.word	0x00000000
   bc350:	000b8831 	.word	0x000b8831
   bc354:	2003df34 	.word	0x2003df34

000bc358 <__retarget_lock_acquire_recursive>:
   bc358:	4770      	bx	lr

000bc35a <__retarget_lock_release>:
   bc35a:	4770      	bx	lr

000bc35c <__retarget_lock_release_recursive>:
   bc35c:	4770      	bx	lr

000bc35e <link_code_end>:
	...

000bc360 <dynalib_user>:
   bc360:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc370:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bc380:	7620 7269 7574 6c61 4c00 526f 2041 6e49      virtual.LoRA In
   bc390:	7469 6169 696c 617a 6974 6e6f 6620 6961     itialization fai
   bc3a0:	756c 6572 6120 656c 7472 6320 646f 2065     lure alert code 
   bc3b0:	6425 2d20 7020 776f 7265 6320 6379 656c     %d - power cycle
   bc3c0:	6920 206e 3033 4e00 646f 2065 756e 626d      in 30.Node numb
   bc3d0:	7265 6920 646e 6369 7461 6465 7520 636e     er indicated unc
   bc3e0:	6e6f 6966 7567 6572 2064 6f6e 6564 6f20     onfigured node o
   bc3f0:	2066 6425 7320 7465 6974 676e 6120 656c     f %d setting ale
   bc400:	7472 6320 646f 2065 6f74 2520 0064 7453     rt code to %d.St
   bc410:	7261 7574 2070 6f63 706d 656c 6574 6620     artup complete f
   bc420:	726f 7420 6568 4e20 646f 2065 6977 6874     or the Node with
   bc430:	6120 656c 7472 6320 646f 2065 6425 4600      alert code %d.F
   bc440:	6f72 206d 7325 7420 206f 7325 7720 7469     rom %s to %s wit
   bc450:	2068 6e69 6176 696c 2064 6974 656d 4600     h invalid time.F
   bc460:	6f72 206d 7325 7420 206f 7325 5400 6d69     rom %s to %s.Tim
   bc470:	3a65 2520 2073 6e61 2064 656e 7478 6520     e: %s and next e
   bc480:	6576 746e 6920 2073 6c25 2075 6573 6f63     vent is %lu seco
   bc490:	646e 2073 7761 7961 5300 656c 7065 6620     nds away.Sleep f
   bc4a0:	726f 2520 2069 6573 6f63 646e 2073 6e75     or %i seconds un
   bc4b0:	6974 206c 656e 7478 6520 6576 746e 2520     til next event %
   bc4c0:	0073 6f57 656b 7720 7469 2068 7375 7265     s.Woke with user
   bc4d0:	6220 7475 6f74 206e 202d 6f4c 4152 5320      button - LoRA S
   bc4e0:	6174 6574 4100 6f77 656b 6120 2074 7325     tate.Awoke at %s
   bc4f0:	7720 7469 2068 6c25 2069 7266 6565 6d20      with %li free m
   bc500:	6d65 726f 0079 6146 6c69 6465 6920 206e     emory.Failed in 
   bc510:	6164 6174 7320 6e65 0064 6552 6573 7474     data send.Resett
   bc520:	6e69 2067 6564 6976 6563 5500 646e 6665     ing device.Undef
   bc530:	6e69 6465 4520 7272 726f 5320 6174 6574     ined Error State
   bc540:	6900 696e 2074 6166 6c69 6465 4c00 526f     .init failed.LoR
   bc550:	2041 6152 6964 206f 6e69 7469 6169 696c     A Radio initiali
   bc560:	657a 2064 7361 4e20 646f 4e65 6d75 6562     zed as NodeNumbe
   bc570:	2072 666f 2520 2069 6e61 2064 6544 6976     r of %i and Devi
   bc580:	6563 4449 6f20 2066 6925 6120 646e 6120     ceID of %i and a
   bc590:	6d20 6761 6369 6e20 6d75 6562 2072 666f      magic number of
   bc5a0:	2520 0069 6553 646e 6e69 2067 6164 6174      %i.Sending data
   bc5b0:	2520 2064 6572 6f70 7472 7420 206f 6147      %d report to Ga
   bc5c0:	6574 6177 0079 6f4e 6564 2520 2064 202d     teway.Node %d - 
   bc5d0:	6144 6174 7220 7065 726f 2074 6573 646e     Data report send
   bc5e0:	7420 206f 6167 6574 6177 2079 6425 7320      to gateway %d s
   bc5f0:	6375 6563 7373 7566 6c6c 2079 202d 7573     uccessfully - su
   bc600:	6363 7365 2073 6172 6574 2520 2e34 6632     ccess rate %4.2f
   bc610:	4e00 646f 2065 6425 2d20 4420 7461 2061     .Node %d - Data 
   bc620:	6572 6f70 7472 7320 6e65 2064 6f74 6720     report send to g
   bc630:	7461 7765 7961 2520 2064 6166 6c69 6465     ateway %d failed
   bc640:	2d20 4e20 206f 6f52 7475 2065 202d 7573      - No Route - su
   bc650:	6363 7365 2073 6172 6574 2520 2e34 6632     ccess rate %4.2f
   bc660:	4e00 646f 2065 6425 2d20 4420 7461 2061     .Node %d - Data 
   bc670:	6572 6f70 7472 7320 6e65 2064 6f74 6720     report send to g
   bc680:	7461 7765 7961 2520 2064 6166 6c69 6465     ateway %d failed
   bc690:	2d20 5520 616e 6c62 2065 6f74 4420 6c65      - Unable to Del
   bc6a0:	7669 7265 2d20 7320 6375 6563 7373 7220     iver - success r
   bc6b0:	7461 2065 3425 322e 0066 6f4e 6564 2520     ate %4.2f.Node %
   bc6c0:	2064 202d 6144 6174 7220 7065 726f 2074     d - Data report 
   bc6d0:	6573 646e 7420 206f 6167 6574 6177 2079     send to gateway 
   bc6e0:	6425 6620 6961 656c 2064 2d20 5520 6b6e     %d failed  - Unk
   bc6f0:	6f6e 6e77 2d20 7320 6375 6563 7373 7220     nown - success r
   bc700:	7461 2065 3425 322e 0066 6144 6174 7220     ate %4.2f.Data r
   bc710:	7065 726f 2074 6361 6e6b 776f 656c 6764     eport acknowledg
   bc720:	6465 6100 4e20 646f 4e65 6d75 6562 2072     ed.a NodeNumber 
   bc730:	7369 6e20 6565 6564 0064 6874 2065 6c63     is needed.the cl
   bc740:	636f 206b 7369 6e20 746f 7320 7465 5300     ock is not set.S
   bc750:	6e65 6964 676e 6a20 696f 206e 6572 7571     ending join requ
   bc760:	7365 2074 6562 6163 7375 2065 7325 4400     est because %s.D
   bc770:	7461 2061 6572 6f70 7472 7320 6e65 2064     ata report send 
   bc780:	6f74 6720 7461 7765 7961 7320 6375 6563     to gateway succe
   bc790:	7373 7566 6c6c 0079 6144 6174 7220 7065     ssfully.Data rep
   bc7a0:	726f 2074 6573 646e 7420 206f 6147 6574     ort send to Gate
   bc7b0:	6177 2079 6166 6c69 6465 4a00 696f 206e     way failed.Join 
   bc7c0:	6572 7571 7365 2074 6361 6e6b 776f 656c     request acknowle
   bc7d0:	6764 6465 6120 646e 6e20 646f 2065 4449     dged and node ID
   bc7e0:	7320 7465 7420 206f 6425 5200 6365 6965      set to %d.Recei
   bc7f0:	6576 2064 7266 6d6f 6e20 646f 2065 6425     ved from node %d
   bc800:	7720 7469 2068 7372 6973 253d 2064 202d      with rssi=%d - 
   bc810:	2061 7325 6d20 7365 6173 6567 5300 7465     a %s message.Set
   bc820:	6320 6f6c 6b63 7420 206f 7325 6120 646e      clock to %s and
   bc830:	7220 7065 726f 2074 7266 7165 6575 636e      report frequenc
   bc840:	2079 6f74 2520 2064 696d 756e 6574 0073     y to %d minutes.
   bc850:	6c41 7265 2074 6572 6f70 7472 6120 6b63     Alert report ack
   bc860:	6f6e 6c77 6465 6567 0064 7553 6363 7365     nowledged.Succes
   bc870:	2073 6573 646e 6e69 2067 6c41 7265 2074     s sending Alert 
   bc880:	6552 6f70 7472 6e20 6d75 6562 2072 6425     Report number %d
   bc890:	7420 206f 6167 6574 6177 2079 7461 2520      to gateway at %
   bc8a0:	0064 6f4e 6564 2d20 4120 656c 7472 5220     d.Node - Alert R
   bc8b0:	7065 726f 2074 6573 646e 7420 206f 6147     eport send to Ga
   bc8c0:	6574 6177 2079 6166 6c69 6465 0000 0000     teway failed....

000bc8d0 <_ZTV14LoRA_Functions>:
	...
   bc8d8:	4875 000b 4877 000b 2041 656e 2077 6164     uH..wH..A new da
   bc8e8:	2079 202d 6572 6573 7474 6e69 2067 7665     y - resetting ev
   bc8f8:	7265 7479 6968 676e 0000 0000               erything....

000bc904 <_ZTV8MB85RC64>:
	...
   bc90c:	4f6d 000b 4f81 000b 696d 000b 6a03 000b     mO...O..mi...j..
   bc91c:	6a85 000b                                   .j..

000bc920 <_ZTV13sysStatusData>:
	...
   bc928:	5089 000b 4ff9 000b 4fd7 000b 7fd9 000b     .P...O...O......
   bc938:	8001 000b 80f5 000b 818d 000b 4f95 000b     .............O..
   bc948:	4fad 000b                                   .O..

000bc94c <_ZTV17currentStatusData>:
	...
   bc954:	50a3 000b 4ff9 000b 4fd7 000b 7fd9 000b     .P...O...O......
   bc964:	8001 000b 80f5 000b 818d 000b 4f41 000b     ............AO..
   bc974:	4f59 000b 6e49 7469 6c61 7a69 6e69 2067     YO..Initalizing 
   bc984:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   bc994:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   bc9a4:	6f43 666e 6769 0000                         Config..

000bc9ac <BLUE_LED>:
   bc9ac:	0007                                        ..

000bc9ae <BUTTON_PIN>:
   bc9ae:	0004                                        ..

000bc9b0 <INT_PIN>:
   bc9b0:	0012                                        ..

000bc9b2 <RFM95_CS>:
   bc9b2:	0005                                        ..

000bc9b4 <RFM95_INT>:
   bc9b4:	0002                                        ..

000bc9b6 <TMP36_SENSE_PIN>:
   bc9b6:	000f 6553 7474 6e69 2067 6176 756c 7365     ..Setting values
   bc9c6:	6620 726f 7420 6568 6e20 646f 0065           for the node.

000bc9d4 <_ZTVN5spark10LogHandlerE>:
	...
   bc9e4:	40a5 000b 5615 000b                         .@...V..

000bc9ec <_ZTVN5spark16SerialLogHandlerE>:
	...
   bc9f4:	5621 000b 5655 000b 9ee9 000b 5617 000b     !V..UV.......V..
   bca04:	6e55 6e6b 776f 006e 6f4e 656e 5700 4669     Unknown.None.WiF
   bca14:	0069 5347 004d 4d55 5354 4300 4d44 0041     i.GSM.UMTS.CDMA.
   bca24:	544c 0045 4549 4545 3038 3132 3435 4c00     LTE.IEEE802154.L
   bca34:	4554 435f 5441 4d5f 0031 544c 5f45 4143     TE_CAT_M1.LTE_CA
   bca44:	5f54 424e 0031 6f4e 2074 6843 7261 6967     T_NB1.Not Chargi
   bca54:	676e 4300 6168 6772 6465 4400 7369 6863     ng.Charged.Disch
   bca64:	7261 6967 676e 4600 7561 746c 4400 6369     arging.Fault.Dic
   bca74:	6e6f 656e 7463 6465 4100 7373 7265 6974     onnected.Asserti
   bca84:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   bca94:	3c20 2820 3233 2b20 3120 2936 2500 2073      < (32 + 16).%s 
   bcaa4:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   bcab4:	6630 2525 0020 6f43 6e75 2c74 6820 756f     0f%% .Count, hou
   bcac4:	6c72 3a79 2520 2e69 6420 6961 796c 203a     rly: %i. daily: 
   bcad4:	6925 4100 7373 7265 6974 6e6f 6146 6c69     %i.AssertionFail
   bcae4:	7275 2065 7273 2063 2626 7320 6372 3e2d     ure src && src->
   bcaf4:	6163 6c6c 6162 6b63 2500 2069 0043 6e49     callback.%i C.In
   bcb04:	6574 6e72 6c61 5420 6d65 6570 6172 7574     ternal Temperatu
   bcb14:	6572 6920 2073 7325 0000 0000 ca04 000b     re is %s........
   bcb24:	ca0c 000b ca11 000b ca16 000b ca1a 000b     ................
   bcb34:	ca1f 000b ca24 000b ca28 000b ca33 000b     ....$...(...3...
   bcb44:	ca3e 000b 6166 6c69 6465 7420 206f 6572     >...failed to re
   bcb54:	6461 7220 6765 6441 7264 253d 3230 2078     ad regAddr=%02x 
   bcb64:	6f63 6e75 3d74 7525 6600 6961 656c 2064     count=%u.failed 
   bcb74:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   bcb84:	3025 7832 7320 6174 3d74 6425 4600 554f     %02x stat=%d.FOU
   bcb94:	2054 6964 2064 6f6e 2074 6f67 4820 4749     T did not go HIG
   bcba4:	0048 6f6e 2074 6564 6574 7463 6465 6600     H.not detected.f
   bcbb4:	6961 656c 2064 6f74 7720 6972 6574 7220     ailed to write r
   bcbc4:	6765 6441 7264 253d 3230 2078 7473 7461     egAddr=%02x stat
   bcbd4:	253d 0064 6573 5774 5444 2520 0064 6177     =%d.setWDT %d.wa
   bcbe4:	6374 6468 676f 6320 656c 7261 6465 6220     tchdog cleared b
   bcbf4:	6552 7573 746c 253d 0064 6177 6374 6468     Result=%d.watchd
   bcc04:	676f 7320 7465 6620 756f 5372 6365 3d73     og set fourSecs=
   bcc14:	6425 6220 6552 7573 746c 253d 0064 4157     %d bResult=%d.WA
   bcc24:	4354 4448 474f 4400 4545 5f50 4f50 4557     TCHDOG.DEEP_POWE
   bcc34:	5f52 4f44 4e57 4300 554f 544e 4f44 4e57     R_DOWN.COUNTDOWN
   bcc44:	545f 4d49 5245 4100 414c 4d52 6600 6961     _TIMER.ALARM.fai
   bcc54:	756c 6572 6920 206e 7075 6164 6574 6157     lure in updateWa
   bcc64:	656b 6552 7361 6e6f 2520 0064 6177 656b     keReason %d.wake
   bcc74:	7220 6165 6f73 206e 203d 7325 6600 6961      reason = %s.fai
   bcc84:	756c 6572 6920 206e 6573 4374 756f 746e     lure in setCount
   bcc94:	6f64 6e77 6954 656d 2072 6425 6600 6961     downTimer %d.fai
   bcca4:	756c 6572 6920 206e 6564 7065 6f50 6577     lure in deepPowe
   bccb4:	4472 776f 206e 6425 5200 4745 535f 454c     rDown %d.REG_SLE
   bccc4:	5045 435f 5254 3d4c 7830 3225 0078 6964     EP_CTRL=0x%2x.di
   bccd4:	6e64 7427 7020 776f 7265 6420 776f 006e     dn't power down.
   bcce4:	3025 6434 252d 3230 2d64 3025 6432 2520     %04d-%02d-%02d %
   bccf4:	3230 3a64 3025 6432 253a 3230 0064 6567     02d:%02d:%02d.ge
   bcd04:	5274 6374 7341 6d54 2520 0073 6573 5274     tRtcAsTm %s.setR
   bcd14:	6374 7341 6d54 2520 0073 6166 6c69 7275     tcAsTm %s.failur
   bcd24:	2065 6e69 7320 7465 7452 4663 6f72 546d     e in setRtcFromT
   bcd34:	206d 6425 7300 7465 5220 4354 6620 6f72     m %d.set RTC fro
   bcd44:	206d 6c63 756f 2064 7325 7300 7465 7320     m cloud %s.set s
   bcd54:	7379 6574 206d 6c63 636f 206b 7266 6d6f     ystem clock from
   bcd64:	5220 4354 2520 0073 6166 6c69 6465 7420      RTC %s.failed t
   bcd74:	206f 6564 6574 7463 4120 3142 3038 0035     o detect AB1805.
   bcd84:	7061 2e70 6261 3831 3530 0000               app.ab1805..

000bcd90 <_ZTV6AB1805>:
	...
   bcd98:	5bfd 000b 5bff 000b 630d 000b 6393 000b     .[...[...c...c..

000bcda8 <_ZTV6MB85RC>:
	...
   bcdb0:	692d 000b 692f 000b 696d 000b 6a03 000b     -i../i..mi...j..
   bcdc0:	6a85 000b                                   .j..

000bcdc4 <_ZTV15RHGenericDriver>:
	...
   bcdd4:	6c41 000b 40a5 000b 40a5 000b 40a5 000b     Al...@...@...@..
   bcde4:	40a5 000b 6ca3 000b 6c45 000b 6cf3 000b     .@...l..El...l..
   bcdf4:	6cc1 000b 6d17 000b 6c4f 000b 6c57 000b     .l...m..Ol..Wl..
   bce04:	6c5b 000b 6c5f 000b 6c63 000b 6c67 000b     [l.._l..cl..gl..
   bce14:	6c53 000b 6c73 000b 6c77 000b 6c7b 000b     Sl..sl..wl..{l..
   bce24:	6c7f 000b 6c83 000b 6c89 000b 6c8d 000b     .l...l...l...l..
   bce34:	6c4f 000b 6c91 000b 6c97 000b 6c9d 000b     Ol...l...l...l..

000bce44 <_ZTV12RHGenericSPI>:
	...
   bce4c:	40a5 000b 6d75 000b 6d77 000b 40a5 000b     .@..um..wm...@..
   bce5c:	40a5 000b 6d7f 000b 6d83 000b 6d87 000b     .@...m...m...m..
   bce6c:	6d79 000b 6d7b 000b 6d7d 000b 6564 6166     ym..{m..}m..defa
   bce7c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bce8c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bce9c:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bceac:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bcebc <_ZTVN8particle11SPISettingsE>:
	...
   bcec4:	6dcd 000b 6da1 000b 6da3 000b               .m...m...m..

000bced0 <_ZTV13RHHardwareSPI>:
	...
   bced8:	6e81 000b 6e95 000b 6ea3 000b 6eb1 000b     .n...n...n...n..
   bcee8:	6f1d 000b 6d7f 000b 6d83 000b 6d87 000b     .o...m...m...m..
   bcef8:	6f2b 000b 6f3f 000b 6f4d 000b               +o..?o..Mo..

000bcf04 <_ZTV6RHMesh>:
	...
   bcf0c:	7019 000b 72c1 000b 6f79 000b 6f65 000b     .p...r..yo..eo..

000bcf1c <_ZTV8RHRouter>:
	...
   bcf24:	752d 000b 7571 000b                         -u..qu..

000bcf2c <_ZTV11RHSPIDriver>:
	...
   bcf3c:	780d 000b 40a5 000b 40a5 000b 40a5 000b     .x...@...@...@..
   bcf4c:	40a5 000b 6ca3 000b 6c45 000b 6cf3 000b     .@...l..El...l..
   bcf5c:	6cc1 000b 6d17 000b 6c4f 000b 6c57 000b     .l...m..Ol..Wl..
   bcf6c:	6c5b 000b 6c5f 000b 6c63 000b 6c67 000b     [l.._l..cl..gl..
   bcf7c:	6c53 000b 6c73 000b 6c77 000b 6c7b 000b     Sl..sl..wl..{l..
   bcf8c:	6c7f 000b 6c83 000b 6c89 000b 6c8d 000b     .l...l...l...l..
   bcf9c:	6c4f 000b 6c91 000b 6c97 000b 6c9d 000b     Ol...l...l...l..
   bcfac:	7839 000b 7843 000b 6552 6563 7669 6465     9x..Cx..Received
   bcfbc:	7320 6d6f 7465 6968 676e 6920 206e 6874      something in th
   bcfcc:	2065 4852 525f 3946 2e35 7063 2070 6966     e RH_RF95.cpp fi
   bcfdc:	656c                                         le.

000bcfdf <_ZL18MODEM_CONFIG_TABLE>:
   bcfdf:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...
	...

000bcff0 <_ZTV7RH_RF95>:
	...
   bcff8:	79ab 000b 79e3 000b 7ec9 000b 7d5f 000b     .y...y...~.._}..
   bd008:	7a61 000b 7da7 000b 79a7 000b 6ca3 000b     az...}...y...l..
   bd018:	6c45 000b 6cf3 000b 6cc1 000b 6d17 000b     El...l...l...m..
   bd028:	79ad 000b 6c57 000b 6c5b 000b 6c5f 000b     .y..Wl..[l.._l..
   bd038:	6c63 000b 6c67 000b 6c53 000b 6c73 000b     cl..gl..Sl..sl..
   bd048:	6c77 000b 6c7b 000b 6c7f 000b 6c83 000b     wl..{l...l...l..
   bd058:	6c89 000b 6c8d 000b 79f3 000b 6c91 000b     .l...l...y...l..
   bd068:	6c97 000b 6c9d 000b 7839 000b 7843 000b     .l...l..9x..Cx..
   bd078:	79a3 000b 6f67 3a74 6d20 6761 6369 253d     .y..got: magic=%
   bd088:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   bd098:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   bd0a8:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   bd0b8:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   bd0c8:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   bd0d8:	253d 3830 0078 0000                         =%08x...

000bd0e0 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bd0e8:	7fd3 000b 801f 000b 7fd1 000b 7fd9 000b     ................
   bd0f8:	8001 000b 80f5 000b 818d 000b               ............

000bd104 <_ZTVN5spark13CellularClassE>:
	...
   bd10c:	89d3 000b 89c9 000b 89bf 000b 8975 000b     ............u...
   bd11c:	89b3 000b 89a7 000b a241 000b a249 000b     ........A...I...
   bd12c:	899b 000b 8993 000b 8989 000b 897f 000b     ................
   bd13c:	a279 000b                                   y...

000bd140 <_ZTV14CellularSignal>:
	...
   bd148:	8a61 000b 8ac5 000b 8a63 000b 8ad5 000b     a.......c.......
   bd158:	8b09 000b 8b35 000b 8b69 000b 8a89 000b     ....5...i.......
   bd168:	8a67 000b 8a83 000b fffc ffff 0000 0000     g...............
   bd178:	8abd 000b                                   ....

000bd17c <_ZTVN5spark13EthernetClassE>:
	...
   bd184:	8c0b 000b 8c01 000b 8bf7 000b 8bed 000b     ................
   bd194:	8be1 000b 8bd5 000b a241 000b a249 000b     ........A...I...
   bd1a4:	8bc9 000b 8bc1 000b 8bb7 000b 8bad 000b     ................
   bd1b4:	a279 000b                                   y...

000bd1b8 <_ZTV7TwoWire>:
	...
   bd1c0:	8cdb 000b 8d25 000b 8cfd 000b 8cdd 000b     ....%...........
   bd1d0:	8d05 000b 8d0d 000b 8d15 000b 8d1d 000b     ................

000bd1e0 <_ZTV9IPAddress>:
	...
   bd1e8:	8e89 000b 8e79 000b 8e7b 000b 2575 3430     ....y...{...u%04
   bd1f8:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bd208:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bd218:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bd228:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bd238:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bd248:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bd258:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000bd268 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bd270:	9335 000b 935b 000b 9319 000b 8f97 000b     5...[...........

000bd280 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bd288:	9791 000b 97a9 000b 9ee9 000b 5617 000b     .............V..

000bd298 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bd2a0:	97bd 000b 97d1 000b a08d 000b 9321 000b     ............!...

000bd2b0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bd2b8:	9333 000b 9369 000b 9e4d 000b 9323 000b     3...i...M...#...

000bd2c8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bd2d0:	9331 000b 9377 000b 96f9 000b 9399 000b     1...w...........

000bd2e0 <_ZTVN5spark12NetworkClassE>:
	...
   bd2e8:	a201 000b a20b 000b a215 000b a21f 000b     ................
   bd2f8:	a229 000b a235 000b a241 000b a249 000b     )...5...A...I...
   bd308:	a251 000b a25d 000b a265 000b a26f 000b     Q...]...e...o...
   bd318:	a279 000b 616e 006e 6e69 0066 766f 0066     y...nan.inf.ovf.

000bd328 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd328:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bd338:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bd348:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bd358:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bd368:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bd378:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bd388 <_ZTV11USARTSerial>:
	...
   bd390:	af8d 000b aff9 000b afd1 000b a4c9 000b     ................
   bd3a0:	afa1 000b afbd 000b afaf 000b afcb 000b     ................
   bd3b0:	af8f 000b af93 000b                         ........

000bd3b8 <_ZTV9USBSerial>:
	...
   bd3c0:	b04b 000b b0b3 000b b089 000b a4c9 000b     K...............
   bd3d0:	b07b 000b b04d 000b b05d 000b b0ad 000b     {...M...].......
   bd3e0:	b06d 000b b045 000b                         m...E...

000bd3e8 <_ZSt7nothrow>:
   bd3e8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   bd3f8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000bd409 <day_name.1>:
   bd409:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bd419:	6972 6153                                    riSat

000bd41e <mon_name.0>:
   bd41e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bd42e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bd43e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bd44e:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bd45e:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bd46e:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bd47e:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bd48e:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bd49e:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bd4ae:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bd4be:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd4ce:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd4de:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd4ee:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd4fe:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bd50b <_ctype_>:
   bd50b:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd51b:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd52b:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd53b:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd54b:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd55b:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd56b:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd57b:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd58b:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bd60c <link_const_variable_data_end>:
   bd60c:	000b4815 	.word	0x000b4815
   bd610:	000b4f09 	.word	0x000b4f09
   bd614:	000b54fd 	.word	0x000b54fd
   bd618:	000b577d 	.word	0x000b577d
   bd61c:	000b5bf1 	.word	0x000b5bf1
   bd620:	000b691d 	.word	0x000b691d
   bd624:	000b6f55 	.word	0x000b6f55
   bd628:	000b8965 	.word	0x000b8965
   bd62c:	000b8a31 	.word	0x000b8a31
   bd630:	000b8c15 	.word	0x000b8c15
   bd634:	000b9ed9 	.word	0x000b9ed9
   bd638:	000ba351 	.word	0x000ba351
   bd63c:	000ba7bd 	.word	0x000ba7bd
   bd640:	000bac51 	.word	0x000bac51
   bd644:	000baf79 	.word	0x000baf79

000bd648 <link_constructors_end>:
	...
