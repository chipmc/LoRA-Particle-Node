
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009760  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd780  000bd780  0000d780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd7a4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  2003dd70  000bd7a8  0001dd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2003df38  2003df38  0002df38  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bd970  000bd970  0002d970  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bd99c  000bd99c  0002d99c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001fa2c3  00000000  00000000  0002d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00025269  00000000  00000000  00227c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004e687  00000000  00000000  0024cecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000041e0  00000000  00000000  0029b553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000dcb0  00000000  00000000  0029f733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00056c45  00000000  00000000  002ad3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0007a1a6  00000000  00000000  00304028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00146201  00000000  00000000  0037e1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bd00  00000000  00000000  004c43d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 ffe1 	bl	bbff8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 f803 	bl	bc048 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd70 	.word	0x2003dd70
   b404c:	000bd7a8 	.word	0x000bd7a8
   b4050:	2003df38 	.word	0x2003df38
   b4054:	2003df38 	.word	0x2003df38
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 f929 	bl	bb2b8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd738 	.word	0x000bd738
   b4080:	000bd774 	.word	0x000bd774

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc38 	b.w	b48f8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f931 	bl	b42f0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 b8c9 	b.w	bb228 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bbfb 	b.w	b8890 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bbf9 	b.w	b8890 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bbff 	b.w	b88a0 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fac4 	bl	b8638 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8289 	.word	0x000b8289
   b40b8:	000bc400 	.word	0x000bc400

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z18outOfMemoryHandleryi+0x8>)
   b40ce:	601a      	str	r2, [r3, #0]
}
   b40d0:	4770      	bx	lr
   b40d2:	bf00      	nop
   b40d4:	2003dd70 	.word	0x2003dd70

000b40d8 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z13userSwitchISRv+0x8>)
   b40da:	2201      	movs	r2, #1
   b40dc:	701a      	strb	r2, [r3, #0]
}
   b40de:	4770      	bx	lr
   b40e0:	2003df8b 	.word	0x2003df8b

000b40e4 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40e4:	b530      	push	{r4, r5, lr}
   b40e6:	b085      	sub	sp, #20
   b40e8:	4604      	mov	r4, r0
   b40ea:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40ec:	b160      	cbz	r0, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40ee:	6840      	ldr	r0, [r0, #4]
   b40f0:	b150      	cbz	r0, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40f2:	6885      	ldr	r5, [r0, #8]
   b40f4:	b145      	cbz	r5, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b40f6:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b40fa:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40fe:	68c4      	ldr	r4, [r0, #12]
   b4100:	ab01      	add	r3, sp, #4
   b4102:	466a      	mov	r2, sp
   b4104:	a902      	add	r1, sp, #8
   b4106:	47a0      	blx	r4
    }
   b4108:	b005      	add	sp, #20
   b410a:	bd30      	pop	{r4, r5, pc}

000b410c <_Z9sensorISRv>:

void sensorISR()
{
   b410c:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b410e:	4c08      	ldr	r4, [pc, #32]	; (b4130 <_Z9sensorISRv+0x24>)
   b4110:	7823      	ldrb	r3, [r4, #0]
   b4112:	b12b      	cbz	r3, b4120 <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              		// sets the sensor flag for the main loop
   b4114:	4b07      	ldr	r3, [pc, #28]	; (b4134 <_Z9sensorISRv+0x28>)
   b4116:	2201      	movs	r2, #1
   b4118:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b411a:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b411c:	7023      	strb	r3, [r4, #0]
}
   b411e:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b4120:	f001 f90c 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4124:	f001 fa87 	bl	b5636 <_ZNK13sysStatusData14get_sensorTypeEv>
   b4128:	2800      	cmp	r0, #0
   b412a:	d1f3      	bne.n	b4114 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b412c:	2301      	movs	r3, #1
   b412e:	e7f5      	b.n	b411c <_Z9sensorISRv+0x10>
   b4130:	2003df40 	.word	0x2003df40
   b4134:	2003df89 	.word	0x2003df89

000b4138 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4138:	b530      	push	{r4, r5, lr}
   b413a:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b413c:	6800      	ldr	r0, [r0, #0]
   b413e:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4140:	9301      	str	r3, [sp, #4]
   b4142:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4146:	6883      	ldr	r3, [r0, #8]
   b4148:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b414c:	b90b      	cbnz	r3, b4152 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b414e:	f007 fa49 	bl	bb5e4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4152:	68c3      	ldr	r3, [r0, #12]
   b4154:	aa01      	add	r2, sp, #4
   b4156:	a902      	add	r1, sp, #8
   b4158:	4798      	blx	r3
      }
   b415a:	b005      	add	sp, #20
   b415c:	bd30      	pop	{r4, r5, pc}

000b415e <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b415e:	2a01      	cmp	r2, #1
   b4160:	d102      	bne.n	b4168 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4162:	6001      	str	r1, [r0, #0]
      }
   b4164:	2000      	movs	r0, #0
   b4166:	4770      	bx	lr
	  switch (__op)
   b4168:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b416a:	bf04      	itt	eq
   b416c:	680b      	ldreq	r3, [r1, #0]
   b416e:	6003      	streq	r3, [r0, #0]
	      break;
   b4170:	e7f8      	b.n	b4164 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4172 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4172:	6803      	ldr	r3, [r0, #0]
   b4174:	6812      	ldr	r2, [r2, #0]
   b4176:	e9d1 0100 	ldrd	r0, r1, [r1]
   b417a:	4718      	bx	r3

000b417c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b417c:	b510      	push	{r4, lr}
      if (_M_manager)
   b417e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4180:	4604      	mov	r4, r0
      if (_M_manager)
   b4182:	b113      	cbz	r3, b418a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4184:	2203      	movs	r2, #3
   b4186:	4601      	mov	r1, r0
   b4188:	4798      	blx	r3
    }
   b418a:	4620      	mov	r0, r4
   b418c:	bd10      	pop	{r4, pc}

000b418e <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b418e:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4190:	4604      	mov	r4, r0
   b4192:	b138      	cbz	r0, b41a4 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4194:	f7ff fff2 	bl	b417c <_ZNSt14_Function_baseD1Ev>
   b4198:	4620      	mov	r0, r4
   b419a:	2110      	movs	r1, #16
        };
   b419c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b41a0:	f7ff bf7d 	b.w	b409e <_ZdlPvj>
        };
   b41a4:	bd10      	pop	{r4, pc}
	...

000b41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b41aa:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41ac:	4605      	mov	r5, r0
   b41ae:	460f      	mov	r7, r1
   b41b0:	4616      	mov	r6, r2
        if (valid_) {
   b41b2:	b18b      	cbz	r3, b41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b41b4:	6803      	ldr	r3, [r0, #0]
   b41b6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b41b8:	b183      	cbz	r3, b41dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b41ba:	889a      	ldrh	r2, [r3, #4]
   b41bc:	2a01      	cmp	r2, #1
   b41be:	d006      	beq.n	b41ce <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b41c0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b41c2:	e7f9      	b.n	b41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b41c4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b41c6:	b14b      	cbz	r3, b41dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b41c8:	889a      	ldrh	r2, [r3, #4]
   b41ca:	2a01      	cmp	r2, #1
   b41cc:	d1fa      	bne.n	b41c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b41ce:	b12b      	cbz	r3, b41dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b41d0:	899a      	ldrh	r2, [r3, #12]
   b41d2:	42ba      	cmp	r2, r7
   b41d4:	d1f6      	bne.n	b41c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b41d6:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b41d8:	4628      	mov	r0, r5
   b41da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b41dc:	490a      	ldr	r1, [pc, #40]	; (b4208 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b41de:	2010      	movs	r0, #16
   b41e0:	f007 f9fc 	bl	bb5dc <_ZnwjRKSt9nothrow_t>
   b41e4:	4604      	mov	r4, r0
   b41e6:	b168      	cbz	r0, b4204 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b41e8:	2210      	movs	r2, #16
   b41ea:	2100      	movs	r1, #0
   b41ec:	f007 ff2c 	bl	bc048 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b41f0:	4b06      	ldr	r3, [pc, #24]	; (b420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b41f2:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b41f4:	2301      	movs	r3, #1
   b41f6:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b41f8:	692b      	ldr	r3, [r5, #16]
   b41fa:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b41fc:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b41fe:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4200:	612c      	str	r4, [r5, #16]
   b4202:	e7e9      	b.n	b41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4204:	7528      	strb	r0, [r5, #20]
                return *this;
   b4206:	e7e7      	b.n	b41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b4208:	000bd514 	.word	0x000bd514
   b420c:	00030010 	.word	0x00030010

000b4210 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4210:	b40e      	push	{r1, r2, r3}
   b4212:	b500      	push	{lr}
   b4214:	b08c      	sub	sp, #48	; 0x30
   b4216:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4218:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b421c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4220:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4222:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4226:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4228:	6801      	ldr	r1, [r0, #0]
   b422a:	aa04      	add	r2, sp, #16
   b422c:	201e      	movs	r0, #30
    attr.flags = 0;
   b422e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4232:	f004 fa11 	bl	b8658 <log_message_v>
}
   b4236:	b00c      	add	sp, #48	; 0x30
   b4238:	f85d eb04 	ldr.w	lr, [sp], #4
   b423c:	b003      	add	sp, #12
   b423e:	4770      	bx	lr

000b4240 <_Z22publishStateTransitionv>:
{
   b4240:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4242:	4e13      	ldr	r6, [pc, #76]	; (b4290 <_Z22publishStateTransitionv+0x50>)
   b4244:	4c13      	ldr	r4, [pc, #76]	; (b4294 <_Z22publishStateTransitionv+0x54>)
   b4246:	7832      	ldrb	r2, [r6, #0]
   b4248:	4d13      	ldr	r5, [pc, #76]	; (b4298 <_Z22publishStateTransitionv+0x58>)
   b424a:	2a02      	cmp	r2, #2
{
   b424c:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b424e:	d117      	bne.n	b4280 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4250:	f006 fe9e 	bl	baf90 <_ZN9TimeClass7isValidEv>
   b4254:	7832      	ldrb	r2, [r6, #0]
   b4256:	782b      	ldrb	r3, [r5, #0]
   b4258:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b425c:	9200      	str	r2, [sp, #0]
   b425e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4262:	b998      	cbnz	r0, b428c <_Z22publishStateTransitionv+0x4c>
   b4264:	4a0d      	ldr	r2, [pc, #52]	; (b429c <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4266:	f44f 7180 	mov.w	r1, #256	; 0x100
   b426a:	a802      	add	r0, sp, #8
   b426c:	f004 fb30 	bl	b88d0 <snprintf>
	oldState = state;
   b4270:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4272:	480b      	ldr	r0, [pc, #44]	; (b42a0 <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b4274:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4276:	a902      	add	r1, sp, #8
   b4278:	f7ff ffca 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
}
   b427c:	b042      	add	sp, #264	; 0x108
   b427e:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4280:	782b      	ldrb	r3, [r5, #0]
   b4282:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4286:	9200      	str	r2, [sp, #0]
   b4288:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b428c:	4a05      	ldr	r2, [pc, #20]	; (b42a4 <_Z22publishStateTransitionv+0x64>)
   b428e:	e7ea      	b.n	b4266 <_Z22publishStateTransitionv+0x26>
   b4290:	2003df8a 	.word	0x2003df8a
   b4294:	2003dd74 	.word	0x2003dd74
   b4298:	2003df88 	.word	0x2003df88
   b429c:	000bc415 	.word	0x000bc415
   b42a0:	2003e658 	.word	0x2003e658
   b42a4:	000bc435 	.word	0x000bc435

000b42a8 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {												// Time till next scheduled event
   b42a8:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 0;
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b42aa:	f001 f847 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b42ae:	f001 f96c 	bl	b558a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b42b2:	4605      	mov	r5, r0
   	if (Time.isValid()) {
   b42b4:	f006 fe6c 	bl	baf90 <_ZN9TimeClass7isValidEv>
   b42b8:	243c      	movs	r4, #60	; 0x3c
   b42ba:	b1b8      	cbz	r0, b42ec <_Z21secondsUntilNextEventv+0x44>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window
   b42bc:	f006 fe85 	bl	bafca <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b42c0:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window
   b42c2:	fbb0 f4f5 	udiv	r4, r0, r5
   b42c6:	fb04 0015 	mls	r0, r4, r5, r0
   b42ca:	1a2c      	subs	r4, r5, r0
   b42cc:	42ac      	cmp	r4, r5
   b42ce:	bf28      	it	cs
   b42d0:	462c      	movcs	r4, r5
		if (sysStatus.get_nodeNumber() < 10) secondsToReturn += 10UL * sysStatus.get_nodeNumber();	// If the node is configured - add an offset to sequence node send windows - unconfigured nodes go first
   b42d2:	f001 f833 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b42d6:	f001 f8ec 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42da:	2809      	cmp	r0, #9
   b42dc:	d806      	bhi.n	b42ec <_Z21secondsUntilNextEventv+0x44>
   b42de:	f001 f82d 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b42e2:	f001 f8e6 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42e6:	230a      	movs	r3, #10
   b42e8:	fb13 4400 	smlabb	r4, r3, r0, r4
		return secondsToReturn;
    }
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b42ec:	4620      	mov	r0, r4
   b42ee:	bd38      	pop	{r3, r4, r5, pc}

000b42f0 <loop>:
void loop() {
   b42f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (state) {
   b42f4:	4caa      	ldr	r4, [pc, #680]	; (b45a0 <loop+0x2b0>)
   b42f6:	7823      	ldrb	r3, [r4, #0]
   b42f8:	3b01      	subs	r3, #1
void loop() {
   b42fa:	b08c      	sub	sp, #48	; 0x30
   b42fc:	2b03      	cmp	r3, #3
   b42fe:	f200 80c1 	bhi.w	b4484 <loop+0x194>
   b4302:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4306:	0171      	.short	0x0171
   b4308:	00240004 	.word	0x00240004
   b430c:	0103      	.short	0x0103
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b430e:	4ba5      	ldr	r3, [pc, #660]	; (b45a4 <loop+0x2b4>)
   b4310:	781b      	ldrb	r3, [r3, #0]
   b4312:	2b02      	cmp	r3, #2
   b4314:	d001      	beq.n	b431a <loop+0x2a>
   b4316:	f7ff ff93 	bl	b4240 <_Z22publishStateTransitionv>
  			if (Time.isValid() && Time.day() != Time.day(current.get_lastCountTime())) resetEverything();           // Check to see if the device was last on in a different day
   b431a:	f006 fe39 	bl	baf90 <_ZN9TimeClass7isValidEv>
   b431e:	b160      	cbz	r0, b433a <loop+0x4a>
   b4320:	f006 fe64 	bl	bafec <_ZN9TimeClass3dayEv>
   b4324:	4605      	mov	r5, r0
   b4326:	f001 f84b 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b432a:	f001 f9c4 	bl	b56b6 <_ZNK17currentStatusData17get_lastCountTimeEv>
   b432e:	f006 fd2b 	bl	bad88 <_ZN9TimeClass3dayEx>
   b4332:	4285      	cmp	r5, r0
   b4334:	d001      	beq.n	b433a <loop+0x4a>
   b4336:	f001 f9f1 	bl	b571c <_Z15resetEverythingv>
			if (current.get_alertCodeNode() != 0) state = ERROR_STATE;
   b433a:	f001 f841 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b433e:	f001 f8cc 	bl	b54da <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4342:	b110      	cbz	r0, b434a <loop+0x5a>
   b4344:	2301      	movs	r3, #1
				state = IDLE_STATE;
   b4346:	7023      	strb	r3, [r4, #0]
			break;
   b4348:	e09c      	b.n	b4484 <loop+0x194>
			else state = LoRA_STATE;		   								// If time is valid - wake on the right minute of the hour
   b434a:	2304      	movs	r3, #4
   b434c:	e7fb      	b.n	b4346 <loop+0x56>
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b434e:	4b95      	ldr	r3, [pc, #596]	; (b45a4 <loop+0x2b4>)
   b4350:	781b      	ldrb	r3, [r3, #0]
   b4352:	2b03      	cmp	r3, #3
   b4354:	d001      	beq.n	b435a <loop+0x6a>
   b4356:	f7ff ff73 	bl	b4240 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b435a:	2100      	movs	r1, #0
   b435c:	4892      	ldr	r0, [pc, #584]	; (b45a8 <loop+0x2b8>)
   b435e:	f001 feb3 	bl	b60c8 <_ZN6AB18056setWDTEi>
			wakeInSeconds = secondsUntilNextEvent();						// Figure out how long to sleep 
   b4362:	f7ff ffa1 	bl	b42a8 <_Z21secondsUntilNextEventv>
   b4366:	4607      	mov	r7, r0
			Log.info("Report frequency of %d minutes.  Sleep for %i seconds until next event at %s", sysStatus.get_frequencyMinutes(), wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b4368:	f000 ffe8 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b436c:	f001 f90d 	bl	b558a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4370:	4606      	mov	r6, r0
   b4372:	f006 fe0d 	bl	baf90 <_ZN9TimeClass7isValidEv>
   b4376:	4605      	mov	r5, r0
   b4378:	2800      	cmp	r0, #0
   b437a:	d036      	beq.n	b43ea <loop+0xfa>
   b437c:	f006 fe25 	bl	bafca <_ZN9TimeClass3nowEv>
   b4380:	19c2      	adds	r2, r0, r7
   b4382:	17d3      	asrs	r3, r2, #31
   b4384:	a808      	add	r0, sp, #32
   b4386:	f006 fd1b 	bl	badc0 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b438a:	9b08      	ldr	r3, [sp, #32]
   b438c:	9300      	str	r3, [sp, #0]
   b438e:	4987      	ldr	r1, [pc, #540]	; (b45ac <loop+0x2bc>)
   b4390:	4887      	ldr	r0, [pc, #540]	; (b45b0 <loop+0x2c0>)
   b4392:	463b      	mov	r3, r7
   b4394:	4632      	mov	r2, r6
   b4396:	f7ff ff3b 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b439a:	b115      	cbz	r5, b43a2 <loop+0xb2>
   b439c:	a808      	add	r0, sp, #32
   b439e:	f006 fb07 	bl	ba9b0 <_ZN6StringD1Ev>
        if (valid_) {
   b43a2:	4b84      	ldr	r3, [pc, #528]	; (b45b4 <loop+0x2c4>)
   b43a4:	7d1a      	ldrb	r2, [r3, #20]
   b43a6:	b10a      	cbz	r2, b43ac <loop+0xbc>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b43a8:	2202      	movs	r2, #2
   b43aa:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b43ac:	4b82      	ldr	r3, [pc, #520]	; (b45b8 <loop+0x2c8>)
   b43ae:	4881      	ldr	r0, [pc, #516]	; (b45b4 <loop+0x2c4>)
   b43b0:	f8b3 9000 	ldrh.w	r9, [r3]
   b43b4:	2200      	movs	r2, #0
   b43b6:	4649      	mov	r1, r9
   b43b8:	f7ff fef6 	bl	b41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b43bc:	4b7f      	ldr	r3, [pc, #508]	; (b45bc <loop+0x2cc>)
   b43be:	f8b3 a000 	ldrh.w	sl, [r3]
   b43c2:	2201      	movs	r2, #1
   b43c4:	4651      	mov	r1, sl
   b43c6:	f7ff feef 	bl	b41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b43ca:	7d03      	ldrb	r3, [r0, #20]
   b43cc:	4606      	mov	r6, r0
   b43ce:	b313      	cbz	r3, b4416 <loop+0x126>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b43d0:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b43d2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b43d6:	68d9      	ldr	r1, [r3, #12]
   b43d8:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b43dc:	b139      	cbz	r1, b43ee <loop+0xfe>
            if (start->type == type) {
   b43de:	888b      	ldrh	r3, [r1, #4]
   b43e0:	2b04      	cmp	r3, #4
   b43e2:	f000 81da 	beq.w	b479a <loop+0x4aa>
            start = start->next;
   b43e6:	6889      	ldr	r1, [r1, #8]
        while (start) {
   b43e8:	e7f8      	b.n	b43dc <loop+0xec>
			Log.info("Report frequency of %d minutes.  Sleep for %i seconds until next event at %s", sysStatus.get_frequencyMinutes(), wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b43ea:	4b75      	ldr	r3, [pc, #468]	; (b45c0 <loop+0x2d0>)
   b43ec:	e7ce      	b.n	b438c <loop+0x9c>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b43ee:	4975      	ldr	r1, [pc, #468]	; (b45c4 <loop+0x2d4>)
   b43f0:	2010      	movs	r0, #16
   b43f2:	f007 f8f3 	bl	bb5dc <_ZnwjRKSt9nothrow_t>
   b43f6:	4605      	mov	r5, r0
   b43f8:	2800      	cmp	r0, #0
   b43fa:	f000 81cc 	beq.w	b4796 <loop+0x4a6>
   b43fe:	2210      	movs	r2, #16
   b4400:	2100      	movs	r1, #0
   b4402:	f007 fe21 	bl	bc048 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4406:	4b70      	ldr	r3, [pc, #448]	; (b45c8 <loop+0x2d8>)
   b4408:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b440a:	2304      	movs	r3, #4
   b440c:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b440e:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b4410:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4414:	6135      	str	r5, [r6, #16]
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b4416:	4967      	ldr	r1, [pc, #412]	; (b45b4 <loop+0x2c4>)
   b4418:	a805      	add	r0, sp, #20
   b441a:	f006 fbed 	bl	babf8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return hal_timer_millis(nullptr);
   b441e:	2000      	movs	r0, #0
   b4420:	f003 ff4a 	bl	b82b8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4424:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4428:	4605      	mov	r5, r0
   b442a:	2000      	movs	r0, #0
   b442c:	f003 ff44 	bl	b82b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4430:	1b40      	subs	r0, r0, r5
   b4432:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4436:	42b0      	cmp	r0, r6
   b4438:	f171 0300 	sbcs.w	r3, r1, #0
   b443c:	d207      	bcs.n	b444e <loop+0x15e>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b443e:	f006 feab 	bl	bb198 <_Z16_fetch_usbserialv>
   b4442:	f006 fe9e 	bl	bb182 <_ZN9USBSerial11isConnectedEv>
   b4446:	b910      	cbnz	r0, b444e <loop+0x15e>
            spark_process();
   b4448:	f004 f992 	bl	b8770 <spark_process>
        while (_while() && !_condition()) {
   b444c:	e7ed      	b.n	b442a <loop+0x13a>
   b444e:	f006 fea3 	bl	bb198 <_Z16_fetch_usbserialv>
   b4452:	f006 fe96 	bl	bb182 <_ZN9USBSerial11isConnectedEv>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4456:	4854      	ldr	r0, [pc, #336]	; (b45a8 <loop+0x2b8>)
   b4458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b445c:	f001 fe34 	bl	b60c8 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4460:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b4462:	b363      	cbz	r3, b44be <loop+0x1ce>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4464:	889a      	ldrh	r2, [r3, #4]
   b4466:	2a01      	cmp	r2, #1
   b4468:	d129      	bne.n	b44be <loop+0x1ce>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b446a:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b446c:	4599      	cmp	r9, r3
   b446e:	d129      	bne.n	b44c4 <loop+0x1d4>
				Log.info("Woke with user button - LoRA State");
   b4470:	4956      	ldr	r1, [pc, #344]	; (b45cc <loop+0x2dc>)
   b4472:	484f      	ldr	r0, [pc, #316]	; (b45b0 <loop+0x2c0>)
   b4474:	f7ff fecc 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_STATE;
   b4478:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b447a:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b447c:	7023      	strb	r3, [r4, #0]
   b447e:	b108      	cbz	r0, b4484 <loop+0x194>
            free(wakeupSource_);
   b4480:	f004 fa0e 	bl	b88a0 <free>
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4484:	4848      	ldr	r0, [pc, #288]	; (b45a8 <loop+0x2b8>)
	if (sensorDetect) {														// Count the pulse and reset for next
   b4486:	4c52      	ldr	r4, [pc, #328]	; (b45d0 <loop+0x2e0>)
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4488:	f002 f9ca 	bl	b6820 <_ZN6AB18054loopEv>
	current.loop();
   b448c:	f000 ff98 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4490:	f000 ffb1 	bl	b53f6 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4494:	f000 ff52 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4498:	f000 ff6b 	bl	b5372 <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {														// Count the pulse and reset for next
   b449c:	7823      	ldrb	r3, [r4, #0]
   b449e:	b123      	cbz	r3, b44aa <loop+0x1ba>
		if (recordCount()) sensorDetect = false;
   b44a0:	f001 fb98 	bl	b5bd4 <_Z11recordCountv>
   b44a4:	b108      	cbz	r0, b44aa <loop+0x1ba>
   b44a6:	2300      	movs	r3, #0
   b44a8:	7023      	strb	r3, [r4, #0]
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b44aa:	4b4a      	ldr	r3, [pc, #296]	; (b45d4 <loop+0x2e4>)
   b44ac:	681b      	ldr	r3, [r3, #0]
   b44ae:	2b00      	cmp	r3, #0
   b44b0:	f2c0 8176 	blt.w	b47a0 <loop+0x4b0>
}
   b44b4:	b00c      	add	sp, #48	; 0x30
   b44b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		System.reset();
   b44ba:	f006 bb9a 	b.w	babf2 <_ZN11SystemClass5resetEv>
            return std::numeric_limits<pin_t>::max();
   b44be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b44c2:	e7d3      	b.n	b446c <loop+0x17c>
			else if (result.wakeupPin() == INT_PIN) {
   b44c4:	459a      	cmp	sl, r3
   b44c6:	d10b      	bne.n	b44e0 <loop+0x1f0>
				Log.info("Woke with sensor interrupt - Record count then sleep");
   b44c8:	4943      	ldr	r1, [pc, #268]	; (b45d8 <loop+0x2e8>)
   b44ca:	4839      	ldr	r0, [pc, #228]	; (b45b0 <loop+0x2c0>)
   b44cc:	f7ff fea0 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
				if (recordCount()) sensorDetect = false;					// Record count and reset flag
   b44d0:	f001 fb80 	bl	b5bd4 <_Z11recordCountv>
   b44d4:	b110      	cbz	r0, b44dc <loop+0x1ec>
   b44d6:	4b3e      	ldr	r3, [pc, #248]	; (b45d0 <loop+0x2e0>)
   b44d8:	2200      	movs	r2, #0
   b44da:	701a      	strb	r2, [r3, #0]
				state = SLEEPING_STATE;
   b44dc:	2303      	movs	r3, #3
   b44de:	e7cc      	b.n	b447a <loop+0x18a>
				Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b44e0:	f006 fd73 	bl	bafca <_ZN9TimeClass3nowEv>
   b44e4:	19c2      	adds	r2, r0, r7
   b44e6:	17d3      	asrs	r3, r2, #31
   b44e8:	a808      	add	r0, sp, #32
   b44ea:	f006 fc69 	bl	badc0 <_ZN9TimeClass7timeStrEx>
   b44ee:	9a08      	ldr	r2, [sp, #32]
   b44f0:	9203      	str	r2, [sp, #12]
   b44f2:	f006 fbe1 	bl	bacb8 <_ZN11SystemClass10freeMemoryEv>
   b44f6:	9a03      	ldr	r2, [sp, #12]
   b44f8:	4938      	ldr	r1, [pc, #224]	; (b45dc <loop+0x2ec>)
   b44fa:	4603      	mov	r3, r0
   b44fc:	482c      	ldr	r0, [pc, #176]	; (b45b0 <loop+0x2c0>)
   b44fe:	f7ff fe87 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4502:	a808      	add	r0, sp, #32
   b4504:	f006 fa54 	bl	ba9b0 <_ZN6StringD1Ev>
				state = IDLE_STATE;
   b4508:	2302      	movs	r3, #2
   b450a:	e7b6      	b.n	b447a <loop+0x18a>
			if (state != oldState) {
   b450c:	4b25      	ldr	r3, [pc, #148]	; (b45a4 <loop+0x2b4>)
   b450e:	781b      	ldrb	r3, [r3, #0]
   b4510:	2b04      	cmp	r3, #4
   b4512:	d017      	beq.n	b4544 <loop+0x254>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4514:	f7ff fe94 	bl	b4240 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();
   b4518:	f000 fb1a 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b451c:	f000 fba0 	bl	b4c60 <_ZN14LoRA_Functions11clearBufferEv>
				takeMeasurements();
   b4520:	f001 fc6c 	bl	b5dfc <_Z16takeMeasurementsv>
				lastPublish = Time.now();
   b4524:	f006 fd51 	bl	bafca <_ZN9TimeClass3nowEv>
   b4528:	4b2d      	ldr	r3, [pc, #180]	; (b45e0 <loop+0x2f0>)
   b452a:	17c2      	asrs	r2, r0, #31
   b452c:	e9c3 0200 	strd	r0, r2, [r3]
				if (!LoRA_Functions::instance().composeDataReportNode()) {
   b4530:	f000 fb0e 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b4534:	f000 fbaa 	bl	b4c8c <_ZN14LoRA_Functions21composeDataReportNodeEv>
   b4538:	b920      	cbnz	r0, b4544 <loop+0x254>
					Log.info("Failed in data send");
   b453a:	492a      	ldr	r1, [pc, #168]	; (b45e4 <loop+0x2f4>)
   b453c:	481c      	ldr	r0, [pc, #112]	; (b45b0 <loop+0x2c0>)
   b453e:	f7ff fe67 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
					break;
   b4542:	e79f      	b.n	b4484 <loop+0x194>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4544:	f003 fea8 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
			while (millis() - startListening < 5000) {
   b4548:	f241 3687 	movw	r6, #4999	; 0x1387
   b454c:	4605      	mov	r5, r0
   b454e:	f003 fea3 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
   b4552:	1b40      	subs	r0, r0, r5
   b4554:	42b0      	cmp	r0, r6
   b4556:	d81d      	bhi.n	b4594 <loop+0x2a4>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {// Listen for acknowledgement
   b4558:	f000 fafa 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b455c:	f000 fda6 	bl	b50ac <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4560:	2800      	cmp	r0, #0
   b4562:	d0f4      	beq.n	b454e <loop+0x25e>
					current.set_hourlyCount(0);								// Zero the hourly count
   b4564:	f000 ff2c 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4568:	2100      	movs	r1, #0
   b456a:	f001 f841 	bl	b55f0 <_ZN17currentStatusData15set_hourlyCountEt>
					sysStatus.set_lastConnection(Time.now());
   b456e:	f000 fee5 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4572:	4605      	mov	r5, r0
   b4574:	f006 fd29 	bl	bafca <_ZN9TimeClass3nowEv>
   b4578:	4602      	mov	r2, r0
   b457a:	17c3      	asrs	r3, r0, #31
   b457c:	4628      	mov	r0, r5
   b457e:	f001 f8c3 	bl	b5708 <_ZN13sysStatusData18set_lastConnectionEx>
					ab1805.setRtcFromTime(Time.now());
   b4582:	f006 fd22 	bl	bafca <_ZN9TimeClass3nowEv>
   b4586:	2301      	movs	r3, #1
   b4588:	4602      	mov	r2, r0
   b458a:	9300      	str	r3, [sp, #0]
   b458c:	17c3      	asrs	r3, r0, #31
   b458e:	4806      	ldr	r0, [pc, #24]	; (b45a8 <loop+0x2b8>)
   b4590:	f002 f936 	bl	b6800 <_ZN6AB180514setRtcFromTimeExb>
			LoRA_Functions::instance().sleepLoRaRadio();					// Done with LoRA - put radio to sleep
   b4594:	f000 fadc 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b4598:	f000 fb72 	bl	b4c80 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
			state = SLEEPING_STATE;
   b459c:	2303      	movs	r3, #3
   b459e:	e6d2      	b.n	b4346 <loop+0x56>
   b45a0:	2003df8a 	.word	0x2003df8a
   b45a4:	2003df88 	.word	0x2003df88
   b45a8:	2003df44 	.word	0x2003df44
   b45ac:	000bc443 	.word	0x000bc443
   b45b0:	2003e658 	.word	0x2003e658
   b45b4:	2003df64 	.word	0x2003df64
   b45b8:	000bcb22 	.word	0x000bcb22
   b45bc:	000bcb24 	.word	0x000bcb24
   b45c0:	000bcc2c 	.word	0x000bcc2c
   b45c4:	000bd514 	.word	0x000bd514
   b45c8:	00030010 	.word	0x00030010
   b45cc:	000bc490 	.word	0x000bc490
   b45d0:	2003df89 	.word	0x2003df89
   b45d4:	2003dd70 	.word	0x2003dd70
   b45d8:	000bc4b3 	.word	0x000bc4b3
   b45dc:	000bc4e8 	.word	0x000bc4e8
   b45e0:	2003df80 	.word	0x2003df80
   b45e4:	000bc509 	.word	0x000bc509
			if (state != oldState) publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b45e8:	4b6f      	ldr	r3, [pc, #444]	; (b47a8 <loop+0x4b8>)
   b45ea:	781b      	ldrb	r3, [r3, #0]
   b45ec:	2b01      	cmp	r3, #1
   b45ee:	d001      	beq.n	b45f4 <loop+0x304>
   b45f0:	f7ff fe26 	bl	b4240 <_Z22publishStateTransitionv>
			switch (current.get_alertCodeNode())
   b45f4:	f000 fee4 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b45f8:	f000 ff6f 	bl	b54da <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b45fc:	2802      	cmp	r0, #2
   b45fe:	d04c      	beq.n	b469a <loop+0x3aa>
   b4600:	2803      	cmp	r0, #3
   b4602:	f000 8096 	beq.w	b4732 <loop+0x442>
   b4606:	2801      	cmp	r0, #1
   b4608:	f040 80bb 	bne.w	b4782 <loop+0x492>
				if(LoRA_Functions::instance().composeJoinRequesttNode()) {
   b460c:	f000 faa0 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b4610:	f000 fc54 	bl	b4ebc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b4614:	2800      	cmp	r0, #0
   b4616:	f000 8086 	beq.w	b4726 <loop+0x436>
   b461a:	f003 fe3d 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
							Log.info("Ack received - updating");
   b461e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; b47c8 <loop+0x4d8>
   b4622:	4f62      	ldr	r7, [pc, #392]	; (b47ac <loop+0x4bc>)
							lastPublish = Time.now();
   b4624:	4e62      	ldr	r6, [pc, #392]	; (b47b0 <loop+0x4c0>)
   b4626:	4605      	mov	r5, r0
					while (millis() - startListening < 3000) {
   b4628:	f640 39b7 	movw	r9, #2999	; 0xbb7
   b462c:	f003 fe34 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
   b4630:	1b40      	subs	r0, r0, r5
   b4632:	4548      	cmp	r0, r9
   b4634:	d877      	bhi.n	b4726 <loop+0x436>
						if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b4636:	f000 fa8b 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b463a:	f000 fd37 	bl	b50ac <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b463e:	2800      	cmp	r0, #0
   b4640:	d0f4      	beq.n	b462c <loop+0x33c>
							Log.info("Ack received - updating");
   b4642:	4641      	mov	r1, r8
   b4644:	4638      	mov	r0, r7
   b4646:	f7ff fde3 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
							lastPublish = Time.now();
   b464a:	f006 fcbe 	bl	bafca <_ZN9TimeClass3nowEv>
   b464e:	17c3      	asrs	r3, r0, #31
   b4650:	e9c6 0300 	strd	r0, r3, [r6]
							sysStatus.set_lastConnection(Time.now());
   b4654:	f000 fe72 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4658:	4681      	mov	r9, r0
   b465a:	f006 fcb6 	bl	bafca <_ZN9TimeClass3nowEv>
   b465e:	4602      	mov	r2, r0
   b4660:	17c3      	asrs	r3, r0, #31
   b4662:	4648      	mov	r0, r9
   b4664:	f001 f850 	bl	b5708 <_ZN13sysStatusData18set_lastConnectionEx>
							current.set_alertTimestampNode(Time.now());
   b4668:	f000 feaa 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b466c:	4681      	mov	r9, r0
   b466e:	f006 fcac 	bl	bafca <_ZN9TimeClass3nowEv>
   b4672:	4602      	mov	r2, r0
   b4674:	17c3      	asrs	r3, r0, #31
   b4676:	4648      	mov	r0, r9
   b4678:	f001 f874 	bl	b5764 <_ZN17currentStatusData22set_alertTimestampNodeEx>
							current.set_alertCodeNode(0);
   b467c:	f000 fea0 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4680:	2100      	movs	r1, #0
   b4682:	f000 ff65 	bl	b5550 <_ZN17currentStatusData17set_alertCodeNodeEh>
							ab1805.setRtcFromTime(Time.now());
   b4686:	f006 fca0 	bl	bafca <_ZN9TimeClass3nowEv>
   b468a:	2301      	movs	r3, #1
   b468c:	4602      	mov	r2, r0
   b468e:	9300      	str	r3, [sp, #0]
   b4690:	17c3      	asrs	r3, r0, #31
   b4692:	4848      	ldr	r0, [pc, #288]	; (b47b4 <loop+0x4c4>)
   b4694:	f002 f8b4 	bl	b6800 <_ZN6AB180514setRtcFromTimeExb>
   b4698:	e7c6      	b.n	b4628 <loop+0x338>
				if(LoRA_Functions::instance().composeAlertReportNode()) {
   b469a:	f000 fa59 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b469e:	f000 fca7 	bl	b4ff0 <_ZN14LoRA_Functions22composeAlertReportNodeEv>
   b46a2:	2800      	cmp	r0, #0
   b46a4:	d03f      	beq.n	b4726 <loop+0x436>
   b46a6:	f003 fdf7 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
						else Log.info("No join ack received");
   b46aa:	f8df 8120 	ldr.w	r8, [pc, #288]	; b47cc <loop+0x4dc>
   b46ae:	4f3f      	ldr	r7, [pc, #252]	; (b47ac <loop+0x4bc>)
							lastPublish = Time.now();
   b46b0:	4e3f      	ldr	r6, [pc, #252]	; (b47b0 <loop+0x4c0>)
   b46b2:	4605      	mov	r5, r0
   b46b4:	f003 fdf0 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
					while (millis() - startListening < 3000) {
   b46b8:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b46bc:	1b40      	subs	r0, r0, r5
   b46be:	4298      	cmp	r0, r3
   b46c0:	d831      	bhi.n	b4726 <loop+0x436>
						if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b46c2:	f000 fa45 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b46c6:	f000 fcf1 	bl	b50ac <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b46ca:	b338      	cbz	r0, b471c <loop+0x42c>
							lastPublish = Time.now();
   b46cc:	f006 fc7d 	bl	bafca <_ZN9TimeClass3nowEv>
   b46d0:	17c3      	asrs	r3, r0, #31
   b46d2:	e9c6 0300 	strd	r0, r3, [r6]
							sysStatus.set_lastConnection(Time.now());
   b46d6:	f000 fe31 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b46da:	4681      	mov	r9, r0
   b46dc:	f006 fc75 	bl	bafca <_ZN9TimeClass3nowEv>
   b46e0:	4602      	mov	r2, r0
   b46e2:	17c3      	asrs	r3, r0, #31
   b46e4:	4648      	mov	r0, r9
   b46e6:	f001 f80f 	bl	b5708 <_ZN13sysStatusData18set_lastConnectionEx>
							current.set_alertTimestampNode(Time.now());
   b46ea:	f000 fe69 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b46ee:	4681      	mov	r9, r0
   b46f0:	f006 fc6b 	bl	bafca <_ZN9TimeClass3nowEv>
   b46f4:	4602      	mov	r2, r0
   b46f6:	17c3      	asrs	r3, r0, #31
   b46f8:	4648      	mov	r0, r9
   b46fa:	f001 f833 	bl	b5764 <_ZN17currentStatusData22set_alertTimestampNodeEx>
							current.set_alertCodeNode(0);
   b46fe:	f000 fe5f 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4702:	2100      	movs	r1, #0
   b4704:	f000 ff24 	bl	b5550 <_ZN17currentStatusData17set_alertCodeNodeEh>
							ab1805.setRtcFromTime(Time.now());
   b4708:	f006 fc5f 	bl	bafca <_ZN9TimeClass3nowEv>
   b470c:	2301      	movs	r3, #1
   b470e:	4602      	mov	r2, r0
   b4710:	9300      	str	r3, [sp, #0]
   b4712:	17c3      	asrs	r3, r0, #31
   b4714:	4827      	ldr	r0, [pc, #156]	; (b47b4 <loop+0x4c4>)
   b4716:	f002 f873 	bl	b6800 <_ZN6AB180514setRtcFromTimeExb>
   b471a:	e7cb      	b.n	b46b4 <loop+0x3c4>
						else Log.info("No join ack received");
   b471c:	4641      	mov	r1, r8
   b471e:	4638      	mov	r0, r7
   b4720:	f7ff fd76 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4724:	e7c6      	b.n	b46b4 <loop+0x3c4>
				LoRA_Functions::instance().sleepLoRaRadio();				// Done for now, put radio to sleep
   b4726:	f000 fa13 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b472a:	f000 faa9 	bl	b4c80 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				state = IDLE_STATE;
   b472e:	2302      	movs	r3, #2
   b4730:	e609      	b.n	b4346 <loop+0x56>
				static system_tick_t enteredState = millis();
   b4732:	4c21      	ldr	r4, [pc, #132]	; (b47b8 <loop+0x4c8>)
   b4734:	4d21      	ldr	r5, [pc, #132]	; (b47bc <loop+0x4cc>)
   b4736:	7823      	ldrb	r3, [r4, #0]
   b4738:	f3bf 8f5b 	dmb	ish
   b473c:	f013 0f01 	tst.w	r3, #1
   b4740:	d109      	bne.n	b4756 <loop+0x466>
   b4742:	4620      	mov	r0, r4
   b4744:	f7ff fcba 	bl	b40bc <__cxa_guard_acquire>
   b4748:	b128      	cbz	r0, b4756 <loop+0x466>
   b474a:	f003 fda5 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
   b474e:	6028      	str	r0, [r5, #0]
   b4750:	4620      	mov	r0, r4
   b4752:	f7ff fcb8 	bl	b40c6 <__cxa_guard_release>
   b4756:	f003 fd9f 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b475a:	682b      	ldr	r3, [r5, #0]
   b475c:	1ac0      	subs	r0, r0, r3
   b475e:	f247 5330 	movw	r3, #30000	; 0x7530
   b4762:	4298      	cmp	r0, r3
   b4764:	f67f ae8e 	bls.w	b4484 <loop+0x194>
					Log.info("Resetting device");
   b4768:	4915      	ldr	r1, [pc, #84]	; (b47c0 <loop+0x4d0>)
   b476a:	4810      	ldr	r0, [pc, #64]	; (b47ac <loop+0x4bc>)
   b476c:	f7ff fd50 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
					delay(2000);
   b4770:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4774:	f004 f8fc 	bl	b8970 <delay>
					ab1805.deepPowerDown();
   b4778:	211e      	movs	r1, #30
   b477a:	480e      	ldr	r0, [pc, #56]	; (b47b4 <loop+0x4c4>)
   b477c:	f001 fdfe 	bl	b637c <_ZN6AB180513deepPowerDownEi>
   b4780:	e680      	b.n	b4484 <loop+0x194>
				Log.info("Undefined Error State");
   b4782:	4910      	ldr	r1, [pc, #64]	; (b47c4 <loop+0x4d4>)
   b4784:	4809      	ldr	r0, [pc, #36]	; (b47ac <loop+0x4bc>)
   b4786:	f7ff fd43 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
				current.set_alertCodeNode(0);
   b478a:	f000 fe19 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b478e:	2100      	movs	r1, #0
   b4790:	f000 fede 	bl	b5550 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b4794:	e7cb      	b.n	b472e <loop+0x43e>
                valid_ = false;
   b4796:	7530      	strb	r0, [r6, #20]
                return *this;
   b4798:	e63d      	b.n	b4416 <loop+0x126>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b479a:	f8c1 800c 	str.w	r8, [r1, #12]
                return *this;
   b479e:	e63a      	b.n	b4416 <loop+0x126>
}
   b47a0:	b00c      	add	sp, #48	; 0x30
   b47a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b47a6:	bf00      	nop
   b47a8:	2003df88 	.word	0x2003df88
   b47ac:	2003e658 	.word	0x2003e658
   b47b0:	2003df80 	.word	0x2003df80
   b47b4:	2003df44 	.word	0x2003df44
   b47b8:	2003df38 	.word	0x2003df38
   b47bc:	2003df3c 	.word	0x2003df3c
   b47c0:	000bc54a 	.word	0x000bc54a
   b47c4:	000bc55b 	.word	0x000bc55b
   b47c8:	000bc51d 	.word	0x000bc51d
   b47cc:	000bc535 	.word	0x000bc535

000b47d0 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b47d0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b47d2:	2300      	movs	r3, #0
   b47d4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b47d6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b47d8:	4604      	mov	r4, r0
   b47da:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b47dc:	b12b      	cbz	r3, b47ea <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b47de:	2202      	movs	r2, #2
   b47e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b47e2:	68eb      	ldr	r3, [r5, #12]
   b47e4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b47e6:	68ab      	ldr	r3, [r5, #8]
   b47e8:	60a3      	str	r3, [r4, #8]
    }
   b47ea:	4620      	mov	r0, r4
   b47ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b47f0 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b47f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b47f4:	b095      	sub	sp, #84	; 0x54
   b47f6:	4605      	mov	r5, r0
        };
   b47f8:	991c      	ldr	r1, [sp, #112]	; 0x70
   b47fa:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b47fc:	4690      	mov	r8, r2
   b47fe:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4800:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4802:	f7ff ffe5 	bl	b47d0 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4806:	a904      	add	r1, sp, #16
   b4808:	a808      	add	r0, sp, #32
   b480a:	f7ff ffe1 	bl	b47d0 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b480e:	a908      	add	r1, sp, #32
   b4810:	4630      	mov	r0, r6
   b4812:	f7ff ffdd 	bl	b47d0 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4816:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b481a:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b481c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4820:	f7ff fc39 	bl	b4096 <_Znwj>
   b4824:	4604      	mov	r4, r0
   b4826:	b1a0      	cbz	r0, b4852 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4828:	e896 0003 	ldmia.w	r6, {r0, r1}
   b482c:	ab01      	add	r3, sp, #4
   b482e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4832:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4836:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b483a:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b483e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4840:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4842:	60a3      	str	r3, [r4, #8]
   b4844:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b484a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b484e:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4850:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4852:	4b24      	ldr	r3, [pc, #144]	; (b48e4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4854:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4856:	4b24      	ldr	r3, [pc, #144]	; (b48e8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4858:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b485a:	2200      	movs	r2, #0
   b485c:	2300      	movs	r3, #0
   b485e:	f04f 0900 	mov.w	r9, #0
   b4862:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4866:	4b21      	ldr	r3, [pc, #132]	; (b48ec <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4868:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b486c:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b486e:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4870:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4874:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4878:	f7ff fc0d 	bl	b4096 <_Znwj>
   b487c:	4604      	mov	r4, r0
   b487e:	b1d8      	cbz	r0, b48b8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4880:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4882:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4886:	b133      	cbz	r3, b4896 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4888:	2202      	movs	r2, #2
   b488a:	a910      	add	r1, sp, #64	; 0x40
   b488c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b488e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4890:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4892:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4894:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4896:	4b16      	ldr	r3, [pc, #88]	; (b48f0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4898:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b489a:	4a16      	ldr	r2, [pc, #88]	; (b48f4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b489c:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b489e:	ab01      	add	r3, sp, #4
   b48a0:	4640      	mov	r0, r8
   b48a2:	4639      	mov	r1, r7
   b48a4:	f003 ff12 	bl	b86cc <system_subscribe_event>
        if (r) {
   b48a8:	b1b0      	cbz	r0, b48d8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b48aa:	4620      	mov	r0, r4
   b48ac:	f7ff fc66 	bl	b417c <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b48b0:	2110      	movs	r1, #16
   b48b2:	4620      	mov	r0, r4
   b48b4:	f7ff fbf3 	bl	b409e <_ZdlPvj>
   b48b8:	a810      	add	r0, sp, #64	; 0x40
   b48ba:	f7ff fc5f 	bl	b417c <_ZNSt14_Function_baseD1Ev>
   b48be:	4630      	mov	r0, r6
   b48c0:	f7ff fc5c 	bl	b417c <_ZNSt14_Function_baseD1Ev>
   b48c4:	a808      	add	r0, sp, #32
   b48c6:	f7ff fc59 	bl	b417c <_ZNSt14_Function_baseD1Ev>
   b48ca:	a804      	add	r0, sp, #16
   b48cc:	f7ff fc56 	bl	b417c <_ZNSt14_Function_baseD1Ev>
    }
   b48d0:	4628      	mov	r0, r5
   b48d2:	b015      	add	sp, #84	; 0x54
   b48d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b48d8:	9b02      	ldr	r3, [sp, #8]
   b48da:	60ab      	str	r3, [r5, #8]
   b48dc:	e9c5 8700 	strd	r8, r7, [r5]
   b48e0:	e7ea      	b.n	b48b8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b48e2:	bf00      	nop
   b48e4:	000b4139 	.word	0x000b4139
   b48e8:	000b4a99 	.word	0x000b4a99
   b48ec:	000c0002 	.word	0x000c0002
   b48f0:	000b418f 	.word	0x000b418f
   b48f4:	000b40e5 	.word	0x000b40e5

000b48f8 <setup>:
void setup() {
   b48f8:	b530      	push	{r4, r5, lr}
        return hal_timer_millis(nullptr);
   b48fa:	2000      	movs	r0, #0
   b48fc:	b08d      	sub	sp, #52	; 0x34
   b48fe:	f003 fcdb 	bl	b82b8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4902:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4906:	4604      	mov	r4, r0
   b4908:	2000      	movs	r0, #0
   b490a:	f003 fcd5 	bl	b82b8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b490e:	1b00      	subs	r0, r0, r4
   b4910:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4914:	42a8      	cmp	r0, r5
   b4916:	f171 0300 	sbcs.w	r3, r1, #0
   b491a:	d207      	bcs.n	b492c <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b491c:	f006 fc3c 	bl	bb198 <_Z16_fetch_usbserialv>
   b4920:	f006 fc2f 	bl	bb182 <_ZN9USBSerial11isConnectedEv>
   b4924:	b910      	cbnz	r0, b492c <setup+0x34>
            spark_process();
   b4926:	f003 ff23 	bl	b8770 <spark_process>
        while (_while() && !_condition()) {
   b492a:	e7ed      	b.n	b4908 <setup+0x10>
   b492c:	f006 fc34 	bl	bb198 <_Z16_fetch_usbserialv>
   b4930:	f006 fc27 	bl	bb182 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b4934:	f000 ff34 	bl	b57a0 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4938:	f000 ff5e 	bl	b57f8 <_Z18initializePowerCfgv>
		current.setup();
   b493c:	f000 fd40 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4940:	6803      	ldr	r3, [r0, #0]
   b4942:	681b      	ldr	r3, [r3, #0]
   b4944:	4798      	blx	r3
		sysStatus.setup();							// Initialize persistent storage
   b4946:	f000 fcf9 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b494a:	6803      	ldr	r3, [r0, #0]
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	4798      	blx	r3
	setNodeConfiguration();                         // This is a function for development - allows us to over-ride stored system values
   b4950:	f000 ff8a 	bl	b5868 <_Z20setNodeConfigurationv>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b4954:	4842      	ldr	r0, [pc, #264]	; (b4a60 <setup+0x168>)
   b4956:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b4958:	2101      	movs	r1, #1
   b495a:	8143      	strh	r3, [r0, #10]
   b495c:	f001 ffb2 	bl	b68c4 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b4960:	217c      	movs	r1, #124	; 0x7c
   b4962:	483f      	ldr	r0, [pc, #252]	; (b4a60 <setup+0x168>)
   b4964:	f001 fbb0 	bl	b60c8 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4968:	4b3e      	ldr	r3, [pc, #248]	; (b4a64 <setup+0x16c>)
   b496a:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b496c:	4b3e      	ldr	r3, [pc, #248]	; (b4a68 <setup+0x170>)
   b496e:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4970:	ac08      	add	r4, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b4972:	4b3e      	ldr	r3, [pc, #248]	; (b4a6c <setup+0x174>)
   b4974:	930a      	str	r3, [sp, #40]	; 0x28
   b4976:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b497a:	2300      	movs	r3, #0
   b497c:	a804      	add	r0, sp, #16
   b497e:	9400      	str	r4, [sp, #0]
   b4980:	f7ff ff36 	bl	b47f0 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4984:	4620      	mov	r0, r4
   b4986:	f7ff fbf9 	bl	b417c <_ZNSt14_Function_baseD1Ev>
	if (! LoRA_Functions::instance().setup(false)) 	{						// Start the LoRA radio - Node
   b498a:	f000 f8e1 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b498e:	2100      	movs	r1, #0
   b4990:	f000 f8f0 	bl	b4b74 <_ZN14LoRA_Functions5setupEb>
   b4994:	2800      	cmp	r0, #0
   b4996:	d142      	bne.n	b4a1e <setup+0x126>
		current.set_alertCodeNode(3);										// Initialization failure
   b4998:	f000 fd12 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b499c:	2103      	movs	r1, #3
   b499e:	f000 fdd7 	bl	b5550 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b49a2:	f000 fd0d 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b49a6:	4604      	mov	r4, r0
   b49a8:	f006 fb0f 	bl	bafca <_ZN9TimeClass3nowEv>
   b49ac:	4602      	mov	r2, r0
   b49ae:	17c3      	asrs	r3, r0, #31
   b49b0:	4620      	mov	r0, r4
   b49b2:	f000 fed7 	bl	b5764 <_ZN17currentStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", current.get_alertCodeNode());
   b49b6:	f000 fd03 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b49ba:	f000 fd8e 	bl	b54da <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b49be:	492c      	ldr	r1, [pc, #176]	; (b4a70 <setup+0x178>)
   b49c0:	4602      	mov	r2, r0
   b49c2:	482c      	ldr	r0, [pc, #176]	; (b4a74 <setup+0x17c>)
   b49c4:	f7ff fc24 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b49c8:	f001 fa18 	bl	b5dfc <_Z16takeMeasurementsv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// PIR or Pressure Sensor interrupt from low to high
   b49cc:	482a      	ldr	r0, [pc, #168]	; (b4a78 <setup+0x180>)
   b49ce:	492b      	ldr	r1, [pc, #172]	; (b4a7c <setup+0x184>)
   b49d0:	8800      	ldrh	r0, [r0, #0]
   b49d2:	2400      	movs	r4, #0
   b49d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b49d8:	2201      	movs	r2, #1
   b49da:	9400      	str	r4, [sp, #0]
   b49dc:	f004 fa52 	bl	b8e84 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); 						// We may need to monitor the user switch to change behaviours / modes
   b49e0:	4827      	ldr	r0, [pc, #156]	; (b4a80 <setup+0x188>)
   b49e2:	4928      	ldr	r1, [pc, #160]	; (b4a84 <setup+0x18c>)
   b49e4:	8800      	ldrh	r0, [r0, #0]
   b49e6:	9400      	str	r4, [sp, #0]
   b49e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b49ec:	4622      	mov	r2, r4
   b49ee:	f004 fa49 	bl	b8e84 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b49f2:	4b25      	ldr	r3, [pc, #148]	; (b4a88 <setup+0x190>)
   b49f4:	781a      	ldrb	r2, [r3, #0]
   b49f6:	b90a      	cbnz	r2, b49fc <setup+0x104>
   b49f8:	2203      	movs	r2, #3
   b49fa:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", current.get_alertCodeNode());
   b49fc:	f000 fce0 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4a00:	f000 fd6b 	bl	b54da <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4a04:	4921      	ldr	r1, [pc, #132]	; (b4a8c <setup+0x194>)
   b4a06:	4602      	mov	r2, r0
   b4a08:	481a      	ldr	r0, [pc, #104]	; (b4a74 <setup+0x17c>)
   b4a0a:	f7ff fc01 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4a0e:	4b20      	ldr	r3, [pc, #128]	; (b4a90 <setup+0x198>)
   b4a10:	8818      	ldrh	r0, [r3, #0]
   b4a12:	2100      	movs	r1, #0
}
   b4a14:	b00d      	add	sp, #52	; 0x34
   b4a16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4a1a:	f006 bce6 	b.w	bb3ea <digitalWrite>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4a1e:	f000 fc8d 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4a22:	f000 fd46 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4a26:	280a      	cmp	r0, #10
   b4a28:	d914      	bls.n	b4a54 <setup+0x15c>
		current.set_alertCodeNode(1); 					// Will initiate a join request
   b4a2a:	f000 fcc9 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4a2e:	2101      	movs	r1, #1
   b4a30:	f000 fd8e 	bl	b5550 <_ZN17currentStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", sysStatus.get_nodeNumber(), current.get_alertCodeNode());
   b4a34:	f000 fc82 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4a38:	f000 fd3b 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4a3c:	9003      	str	r0, [sp, #12]
   b4a3e:	f000 fcbf 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4a42:	f000 fd4a 	bl	b54da <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4a46:	9a03      	ldr	r2, [sp, #12]
   b4a48:	4912      	ldr	r1, [pc, #72]	; (b4a94 <setup+0x19c>)
   b4a4a:	4603      	mov	r3, r0
   b4a4c:	4809      	ldr	r0, [pc, #36]	; (b4a74 <setup+0x17c>)
   b4a4e:	f7ff fbdf 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4a52:	e7b9      	b.n	b49c8 <setup+0xd0>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4a54:	f006 fa9c 	bl	baf90 <_ZN9TimeClass7isValidEv>
   b4a58:	2800      	cmp	r0, #0
   b4a5a:	d0e6      	beq.n	b4a2a <setup+0x132>
   b4a5c:	e7b4      	b.n	b49c8 <setup+0xd0>
   b4a5e:	bf00      	nop
   b4a60:	2003df44 	.word	0x2003df44
   b4a64:	000b40cd 	.word	0x000b40cd
   b4a68:	000b4173 	.word	0x000b4173
   b4a6c:	000b415f 	.word	0x000b415f
   b4a70:	000bc571 	.word	0x000bc571
   b4a74:	2003e658 	.word	0x2003e658
   b4a78:	000bcb24 	.word	0x000bcb24
   b4a7c:	000b410d 	.word	0x000b410d
   b4a80:	000bcb22 	.word	0x000bcb22
   b4a84:	000b40d9 	.word	0x000b40d9
   b4a88:	2003df8a 	.word	0x2003df8a
   b4a8c:	000bc5f6 	.word	0x000bc5f6
   b4a90:	000bcb20 	.word	0x000bcb20
   b4a94:	000bc5af 	.word	0x000bc5af

000b4a98 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4a98:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4a9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4a9c:	4604      	mov	r4, r0
	switch (__op)
   b4a9e:	d104      	bne.n	b4aaa <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4aa0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4aa2:	6003      	str	r3, [r0, #0]
      }
   b4aa4:	2000      	movs	r0, #0
   b4aa6:	b003      	add	sp, #12
   b4aa8:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4aaa:	2a02      	cmp	r2, #2
   b4aac:	d00c      	beq.n	b4ac8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4aae:	2a03      	cmp	r2, #3
   b4ab0:	d1f8      	bne.n	b4aa4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4ab2:	6804      	ldr	r4, [r0, #0]
   b4ab4:	2c00      	cmp	r4, #0
   b4ab6:	d0f5      	beq.n	b4aa4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4ab8:	4620      	mov	r0, r4
   b4aba:	f7ff fb5f 	bl	b417c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4abe:	2110      	movs	r1, #16
   b4ac0:	4620      	mov	r0, r4
   b4ac2:	f7ff faec 	bl	b409e <_ZdlPvj>
   b4ac6:	e7ed      	b.n	b4aa4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4ac8:	6809      	ldr	r1, [r1, #0]
   b4aca:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4acc:	2010      	movs	r0, #16
   b4ace:	f7ff fae2 	bl	b4096 <_Znwj>
   b4ad2:	4605      	mov	r5, r0
   b4ad4:	b110      	cbz	r0, b4adc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4ad6:	9901      	ldr	r1, [sp, #4]
   b4ad8:	f7ff fe7a 	bl	b47d0 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4adc:	6025      	str	r5, [r4, #0]
	}
   b4ade:	e7e1      	b.n	b4aa4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4ae0 <_GLOBAL__sub_I___appProductVersion>:
   b4ae0:	b508      	push	{r3, lr}
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4ae2:	f006 fc1b 	bl	bb31c <spark_protocol_instance>
   b4ae6:	2300      	movs	r3, #0
   b4ae8:	461a      	mov	r2, r3
   b4aea:	4619      	mov	r1, r3
   b4aec:	f006 fc26 	bl	bb33c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4af0:	f006 fc14 	bl	bb31c <spark_protocol_instance>
   b4af4:	2300      	movs	r3, #0
   b4af6:	461a      	mov	r2, r3
   b4af8:	210d      	movs	r1, #13
   b4afa:	f006 fc17 	bl	bb32c <spark_protocol_set_product_id>
        : config_(config) {
   b4afe:	4b0c      	ldr	r3, [pc, #48]	; (b4b30 <_GLOBAL__sub_I___appProductVersion+0x50>)
   b4b00:	1d1a      	adds	r2, r3, #4
   b4b02:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4b04:	4a0b      	ldr	r2, [pc, #44]	; (b4b34 <_GLOBAL__sub_I___appProductVersion+0x54>)
   b4b06:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4b08:	2200      	movs	r2, #0
   b4b0a:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b4b0e:	611a      	str	r2, [r3, #16]
   b4b10:	2201      	movs	r2, #1
   b4b12:	751a      	strb	r2, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4b14:	f006 fcda 	bl	bb4cc <_Z19__fetch_global_Wirev>
   b4b18:	2269      	movs	r2, #105	; 0x69
   b4b1a:	4601      	mov	r1, r0
   b4b1c:	4806      	ldr	r0, [pc, #24]	; (b4b38 <_GLOBAL__sub_I___appProductVersion+0x58>)
   b4b1e:	f001 f9d5 	bl	b5ecc <_ZN6AB1805C1ER7TwoWireh>
time_t lastPublish = Time.now();
   b4b22:	f006 fa52 	bl	bafca <_ZN9TimeClass3nowEv>
   b4b26:	4b05      	ldr	r3, [pc, #20]	; (b4b3c <_GLOBAL__sub_I___appProductVersion+0x5c>)
   b4b28:	17c2      	asrs	r2, r0, #31
   b4b2a:	e9c3 0200 	strd	r0, r2, [r3]
   b4b2e:	bd08      	pop	{r3, pc}
   b4b30:	2003df64 	.word	0x2003df64
   b4b34:	00030010 	.word	0x00030010
   b4b38:	2003df44 	.word	0x2003df44
   b4b3c:	2003df80 	.word	0x2003df80

000b4b40 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4b40:	4770      	bx	lr

000b4b42 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b4b42:	b510      	push	{r4, lr}
}
   b4b44:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b4b46:	4604      	mov	r4, r0
}
   b4b48:	f7ff faa9 	bl	b409e <_ZdlPvj>
   b4b4c:	4620      	mov	r0, r4
   b4b4e:	bd10      	pop	{r4, pc}

000b4b50 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4b50:	b510      	push	{r4, lr}
    if (!_instance) {
   b4b52:	4c06      	ldr	r4, [pc, #24]	; (b4b6c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4b54:	6823      	ldr	r3, [r4, #0]
   b4b56:	b933      	cbnz	r3, b4b66 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4b58:	2004      	movs	r0, #4
   b4b5a:	f7ff fa9c 	bl	b4096 <_Znwj>
   b4b5e:	b108      	cbz	r0, b4b64 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4b60:	4b03      	ldr	r3, [pc, #12]	; (b4b70 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4b62:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4b64:	6020      	str	r0, [r4, #0]
}
   b4b66:	6820      	ldr	r0, [r4, #0]
   b4b68:	bd10      	pop	{r4, pc}
   b4b6a:	bf00      	nop
   b4b6c:	2003df90 	.word	0x2003df90
   b4b70:	000bca4c 	.word	0x000bca4c

000b4b74 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4b74:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4b76:	4831      	ldr	r0, [pc, #196]	; (b4c3c <_ZN14LoRA_Functions5setupEb+0xc8>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4b78:	b087      	sub	sp, #28
   b4b7a:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4b7c:	f002 fd05 	bl	b758a <_ZN8RHRouter4initEv>
   b4b80:	4604      	mov	r4, r0
   b4b82:	b930      	cbnz	r0, b4b92 <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b4b84:	492e      	ldr	r1, [pc, #184]	; (b4c40 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b4b86:	482f      	ldr	r0, [pc, #188]	; (b4c44 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4b88:	f7ff fb42 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		manager.setThisAddress(11);
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	}

	return true;
}
   b4b8c:	4620      	mov	r0, r4
   b4b8e:	b007      	add	sp, #28
   b4b90:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4b92:	ed9f 0a2d 	vldr	s0, [pc, #180]	; b4c48 <_ZN14LoRA_Functions5setupEb+0xd4>
   b4b96:	482d      	ldr	r0, [pc, #180]	; (b4c4c <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4b98:	f002 fff2 	bl	b7b80 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4b9c:	482b      	ldr	r0, [pc, #172]	; (b4c4c <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4b9e:	2200      	movs	r2, #0
   b4ba0:	2117      	movs	r1, #23
   b4ba2:	f003 f967 	bl	b7e74 <_ZN7RH_RF9510setTxPowerEab>
	if (gatewayID == true) {
   b4ba6:	b18d      	cbz	r5, b4bcc <_ZN14LoRA_Functions5setupEb+0x58>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4ba8:	f000 fbc8 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4bac:	2100      	movs	r1, #0
   b4bae:	f000 fcb7 	bl	b5520 <_ZN13sysStatusData14set_nodeNumberEh>
        return spark_deviceID();
   b4bb2:	a802      	add	r0, sp, #8
   b4bb4:	f003 fdec 	bl	b8790 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b4bb8:	9a02      	ldr	r2, [sp, #8]
   b4bba:	4925      	ldr	r1, [pc, #148]	; (b4c50 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4bbc:	4821      	ldr	r0, [pc, #132]	; (b4c44 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4bbe:	f7ff fb27 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4bc2:	a802      	add	r0, sp, #8
   b4bc4:	f005 fef4 	bl	ba9b0 <_ZN6StringD1Ev>
   b4bc8:	462c      	mov	r4, r5
   b4bca:	e7df      	b.n	b4b8c <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b4bcc:	f000 fbb6 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4bd0:	f000 fc6f 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4bd4:	b1f0      	cbz	r0, b4c14 <_ZN14LoRA_Functions5setupEb+0xa0>
   b4bd6:	f000 fbb1 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4bda:	f000 fc6a 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4bde:	280a      	cmp	r0, #10
   b4be0:	d818      	bhi.n	b4c14 <_ZN14LoRA_Functions5setupEb+0xa0>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b4be2:	f000 fbab 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4be6:	f000 fc64 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4bea:	4601      	mov	r1, r0
   b4bec:	4819      	ldr	r0, [pc, #100]	; (b4c54 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4bee:	f001 fff8 	bl	b6be2 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4bf2:	4818      	ldr	r0, [pc, #96]	; (b4c54 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4bf4:	f001 ffdb 	bl	b6bae <_ZN10RHDatagram11thisAddressEv>
   b4bf8:	9001      	str	r0, [sp, #4]
   b4bfa:	a802      	add	r0, sp, #8
   b4bfc:	f003 fdc8 	bl	b8790 <spark_deviceID>
   b4c00:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4c04:	4914      	ldr	r1, [pc, #80]	; (b4c58 <_ZN14LoRA_Functions5setupEb+0xe4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4c06:	480f      	ldr	r0, [pc, #60]	; (b4c44 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4c08:	f7ff fb02 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4c0c:	a802      	add	r0, sp, #8
   b4c0e:	f005 fecf 	bl	ba9b0 <_ZN6StringD1Ev>
   b4c12:	e7bb      	b.n	b4b8c <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b4c14:	f000 fb92 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4c18:	210b      	movs	r1, #11
   b4c1a:	f000 fc81 	bl	b5520 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b4c1e:	210b      	movs	r1, #11
   b4c20:	480c      	ldr	r0, [pc, #48]	; (b4c54 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4c22:	f001 ffde 	bl	b6be2 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4c26:	480b      	ldr	r0, [pc, #44]	; (b4c54 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4c28:	f001 ffc1 	bl	b6bae <_ZN10RHDatagram11thisAddressEv>
   b4c2c:	9001      	str	r0, [sp, #4]
   b4c2e:	a802      	add	r0, sp, #8
   b4c30:	f003 fdae 	bl	b8790 <spark_deviceID>
   b4c34:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4c38:	4908      	ldr	r1, [pc, #32]	; (b4c5c <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4c3a:	e7e4      	b.n	b4c06 <_ZN14LoRA_Functions5setupEb+0x92>
   b4c3c:	2003e1cc 	.word	0x2003e1cc
   b4c40:	000bc627 	.word	0x000bc627
   b4c44:	2003e658 	.word	0x2003e658
   b4c48:	4464c000 	.word	0x4464c000
   b4c4c:	2003e09c 	.word	0x2003e09c
   b4c50:	000bc633 	.word	0x000bc633
   b4c54:	2003e1d0 	.word	0x2003e1d0
   b4c58:	000bc66d 	.word	0x000bc66d
   b4c5c:	000bc6a4 	.word	0x000bc6a4

000b4c60 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4c60:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b4c62:	4c06      	ldr	r4, [pc, #24]	; (b4c7c <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4c64:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b4c66:	f10d 0203 	add.w	r2, sp, #3
   b4c6a:	a901      	add	r1, sp, #4
   b4c6c:	4620      	mov	r0, r4
   b4c6e:	f002 ff01 	bl	b7a74 <_ZN7RH_RF954recvEPhS0_>
   b4c72:	2800      	cmp	r0, #0
   b4c74:	d1f7      	bne.n	b4c66 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b4c76:	b040      	add	sp, #256	; 0x100
   b4c78:	bd10      	pop	{r4, pc}
   b4c7a:	bf00      	nop
   b4c7c:	2003e09c 	.word	0x2003e09c

000b4c80 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4c80:	4801      	ldr	r0, [pc, #4]	; (b4c88 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b4c82:	f002 bee4 	b.w	b7a4e <_ZN7RH_RF955sleepEv>
   b4c86:	bf00      	nop
   b4c88:	2003e09c 	.word	0x2003e09c

000b4c8c <_ZN14LoRA_Functions21composeDataReportNodeEv>:
	static int attempts = 0;
	static int success = 0;
	static uint8_t msgCnt = 0;


	digitalWrite(BLUE_LED,HIGH);
   b4c8c:	4b76      	ldr	r3, [pc, #472]	; (b4e68 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1dc>)
bool LoRA_Functions::composeDataReportNode() {
   b4c8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	digitalWrite(BLUE_LED,HIGH);
   b4c92:	881e      	ldrh	r6, [r3, #0]
	attempts++;
	msgCnt++;
   b4c94:	f8df 81fc 	ldr.w	r8, [pc, #508]	; b4e94 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x208>
	attempts++;
   b4c98:	4d74      	ldr	r5, [pc, #464]	; (b4e6c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1e0>)
	Log.info("Sending data report number %d",msgCnt);

	buf[0] = highByte(sysStatus.get_magicNumber());
   b4c9a:	4c75      	ldr	r4, [pc, #468]	; (b4e70 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1e4>)
	digitalWrite(BLUE_LED,HIGH);
   b4c9c:	2101      	movs	r1, #1
   b4c9e:	4630      	mov	r0, r6
   b4ca0:	f006 fba3 	bl	bb3ea <digitalWrite>
	msgCnt++;
   b4ca4:	f898 2000 	ldrb.w	r2, [r8]
	attempts++;
   b4ca8:	682b      	ldr	r3, [r5, #0]
	Log.info("Sending data report number %d",msgCnt);
   b4caa:	4972      	ldr	r1, [pc, #456]	; (b4e74 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1e8>)
   b4cac:	4872      	ldr	r0, [pc, #456]	; (b4e78 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ec>)
	msgCnt++;
   b4cae:	3201      	adds	r2, #1
	attempts++;
   b4cb0:	3301      	adds	r3, #1
	msgCnt++;
   b4cb2:	b2d2      	uxtb	r2, r2
   b4cb4:	f888 2000 	strb.w	r2, [r8]
	attempts++;
   b4cb8:	602b      	str	r3, [r5, #0]
	Log.info("Sending data report number %d",msgCnt);
   b4cba:	f7ff faa9 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());
   b4cbe:	f000 fb3d 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4cc2:	f000 fc5d 	bl	b5580 <_ZNK13sysStatusData15get_magicNumberEv>
   b4cc6:	0a00      	lsrs	r0, r0, #8
   b4cc8:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b4cca:	f000 fb37 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4cce:	f000 fc57 	bl	b5580 <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = 1;						// Set for code release - fix later
   b4cd2:	2701      	movs	r7, #1
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b4cd4:	7060      	strb	r0, [r4, #1]
	buf[2] = 1;						// Set for code release - fix later
   b4cd6:	70a7      	strb	r7, [r4, #2]
	buf[3] = highByte(current.get_hourlyCount());
   b4cd8:	f000 fb72 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4cdc:	f000 fc5a 	bl	b5594 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4ce0:	0a00      	lsrs	r0, r0, #8
   b4ce2:	70e0      	strb	r0, [r4, #3]
	buf[4] = lowByte(current.get_hourlyCount()); 
   b4ce4:	f000 fb6c 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4ce8:	f000 fc54 	bl	b5594 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4cec:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(current.get_dailyCount());
   b4cee:	f000 fb67 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4cf2:	f000 fc54 	bl	b559e <_ZNK17currentStatusData14get_dailyCountEv>
   b4cf6:	0a00      	lsrs	r0, r0, #8
   b4cf8:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(current.get_dailyCount()); 
   b4cfa:	f000 fb61 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4cfe:	f000 fc4e 	bl	b559e <_ZNK17currentStatusData14get_dailyCountEv>
   b4d02:	71a0      	strb	r0, [r4, #6]
	buf[7] = current.get_internalTempC();
   b4d04:	f000 fb5c 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4d08:	f000 fbdd 	bl	b54c6 <_ZNK17currentStatusData17get_internalTempCEv>
   b4d0c:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_stateOfCharge();
   b4d0e:	f000 fb57 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4d12:	f000 fb79 	bl	b5408 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4d16:	ec51 0b10 	vmov	r0, r1, d0
   b4d1a:	f007 f8fb 	bl	bbf14 <__aeabi_d2uiz>
   b4d1e:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_batteryState();	
   b4d20:	f000 fb4e 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b4d24:	f000 fbd4 	bl	b54d0 <_ZNK17currentStatusData16get_batteryStateEv>
   b4d28:	7260      	strb	r0, [r4, #9]
	buf[10] = sysStatus.get_resetCount();
   b4d2a:	f000 fb07 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4d2e:	f000 fbc5 	bl	b54bc <_ZNK13sysStatusData14get_resetCountEv>
	buf[11] = msgCnt;
   b4d32:	f898 3000 	ldrb.w	r3, [r8]
   b4d36:	72e3      	strb	r3, [r4, #11]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	unsigned char result = manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT);
   b4d38:	2303      	movs	r3, #3
	buf[10] = sysStatus.get_resetCount();
   b4d3a:	72a0      	strb	r0, [r4, #10]
	unsigned char result = manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT);
   b4d3c:	4621      	mov	r1, r4
   b4d3e:	9300      	str	r3, [sp, #0]
   b4d40:	484e      	ldr	r0, [pc, #312]	; (b4e7c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1f0>)
   b4d42:	f8df 8154 	ldr.w	r8, [pc, #340]	; b4e98 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x20c>
   b4d46:	2300      	movs	r3, #0
   b4d48:	2211      	movs	r2, #17
   b4d4a:	f002 f9e3 	bl	b7114 <_ZN6RHMesh10sendtoWaitEPhhhh>
	
	if ( result == RH_ROUTER_ERROR_NONE) {
   b4d4e:	4604      	mov	r4, r0
   b4d50:	bb18      	cbnz	r0, b4d9a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x10e>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		success++;
   b4d52:	f8d8 0000 	ldr.w	r0, [r8]
   b4d56:	4438      	add	r0, r7
   b4d58:	f8c8 0000 	str.w	r0, [r8]
		Log.info("Data report delivered - success rate %4.2f",((success * 1.0)/ attempts)*100.0);
   b4d5c:	f006 fd98 	bl	bb890 <__aeabi_i2d>
   b4d60:	4680      	mov	r8, r0
   b4d62:	6828      	ldr	r0, [r5, #0]
   b4d64:	4689      	mov	r9, r1
   b4d66:	f006 fd93 	bl	bb890 <__aeabi_i2d>
   b4d6a:	4602      	mov	r2, r0
   b4d6c:	460b      	mov	r3, r1
   b4d6e:	4640      	mov	r0, r8
   b4d70:	4649      	mov	r1, r9
   b4d72:	f006 ff21 	bl	bbbb8 <__aeabi_ddiv>
   b4d76:	4b42      	ldr	r3, [pc, #264]	; (b4e80 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1f4>)
   b4d78:	2200      	movs	r2, #0
   b4d7a:	f006 fdf3 	bl	bb964 <__aeabi_dmul>
   b4d7e:	4602      	mov	r2, r0
   b4d80:	460b      	mov	r3, r1
   b4d82:	483d      	ldr	r0, [pc, #244]	; (b4e78 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ec>)
   b4d84:	493f      	ldr	r1, [pc, #252]	; (b4e84 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1f8>)
   b4d86:	f7ff fa43 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4d8a:	4630      	mov	r0, r6
   b4d8c:	4621      	mov	r1, r4
   b4d8e:	f006 fb2c 	bl	bb3ea <digitalWrite>
		return true;
   b4d92:	4638      	mov	r0, r7
	else  {
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}
   b4d94:	b003      	add	sp, #12
   b4d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b4d9a:	2802      	cmp	r0, #2
   b4d9c:	d125      	bne.n	b4dea <_ZN14LoRA_Functions21composeDataReportNodeEv+0x15e>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4d9e:	f000 facd 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4da2:	f000 fb86 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4da6:	4604      	mov	r4, r0
   b4da8:	f8d8 0000 	ldr.w	r0, [r8]
   b4dac:	f006 fd70 	bl	bb890 <__aeabi_i2d>
   b4db0:	4680      	mov	r8, r0
   b4db2:	6828      	ldr	r0, [r5, #0]
   b4db4:	4689      	mov	r9, r1
   b4db6:	f006 fd6b 	bl	bb890 <__aeabi_i2d>
   b4dba:	4602      	mov	r2, r0
   b4dbc:	460b      	mov	r3, r1
   b4dbe:	4640      	mov	r0, r8
   b4dc0:	4649      	mov	r1, r9
   b4dc2:	f006 fef9 	bl	bbbb8 <__aeabi_ddiv>
   b4dc6:	4b2e      	ldr	r3, [pc, #184]	; (b4e80 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1f4>)
   b4dc8:	2200      	movs	r2, #0
   b4dca:	f006 fdcb 	bl	bb964 <__aeabi_dmul>
   b4dce:	e9cd 0100 	strd	r0, r1, [sp]
   b4dd2:	492d      	ldr	r1, [pc, #180]	; (b4e88 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1fc>)
   b4dd4:	2300      	movs	r3, #0
   b4dd6:	4622      	mov	r2, r4
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4dd8:	4827      	ldr	r0, [pc, #156]	; (b4e78 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ec>)
   b4dda:	f7ff fa19 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b4dde:	4630      	mov	r0, r6
   b4de0:	2100      	movs	r1, #0
   b4de2:	f006 fb02 	bl	bb3ea <digitalWrite>
	return false;
   b4de6:	2000      	movs	r0, #0
   b4de8:	e7d4      	b.n	b4d94 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x108>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b4dea:	2805      	cmp	r0, #5
   b4dec:	d11d      	bne.n	b4e2a <_ZN14LoRA_Functions21composeDataReportNodeEv+0x19e>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4dee:	f000 faa5 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4df2:	f000 fb5e 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4df6:	4604      	mov	r4, r0
   b4df8:	f8d8 0000 	ldr.w	r0, [r8]
   b4dfc:	f006 fd48 	bl	bb890 <__aeabi_i2d>
   b4e00:	4680      	mov	r8, r0
   b4e02:	6828      	ldr	r0, [r5, #0]
   b4e04:	4689      	mov	r9, r1
   b4e06:	f006 fd43 	bl	bb890 <__aeabi_i2d>
   b4e0a:	4602      	mov	r2, r0
   b4e0c:	460b      	mov	r3, r1
   b4e0e:	4640      	mov	r0, r8
   b4e10:	4649      	mov	r1, r9
   b4e12:	f006 fed1 	bl	bbbb8 <__aeabi_ddiv>
   b4e16:	4b1a      	ldr	r3, [pc, #104]	; (b4e80 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1f4>)
   b4e18:	2200      	movs	r2, #0
   b4e1a:	f006 fda3 	bl	bb964 <__aeabi_dmul>
   b4e1e:	2300      	movs	r3, #0
   b4e20:	e9cd 0100 	strd	r0, r1, [sp]
   b4e24:	4622      	mov	r2, r4
   b4e26:	4919      	ldr	r1, [pc, #100]	; (b4e8c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x200>)
   b4e28:	e7d6      	b.n	b4dd8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x14c>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4e2a:	f000 fa87 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4e2e:	f000 fb40 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e32:	4604      	mov	r4, r0
   b4e34:	f8d8 0000 	ldr.w	r0, [r8]
   b4e38:	f006 fd2a 	bl	bb890 <__aeabi_i2d>
   b4e3c:	4680      	mov	r8, r0
   b4e3e:	6828      	ldr	r0, [r5, #0]
   b4e40:	4689      	mov	r9, r1
   b4e42:	f006 fd25 	bl	bb890 <__aeabi_i2d>
   b4e46:	4602      	mov	r2, r0
   b4e48:	460b      	mov	r3, r1
   b4e4a:	4640      	mov	r0, r8
   b4e4c:	4649      	mov	r1, r9
   b4e4e:	f006 feb3 	bl	bbbb8 <__aeabi_ddiv>
   b4e52:	4b0b      	ldr	r3, [pc, #44]	; (b4e80 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1f4>)
   b4e54:	2200      	movs	r2, #0
   b4e56:	f006 fd85 	bl	bb964 <__aeabi_dmul>
   b4e5a:	2300      	movs	r3, #0
   b4e5c:	e9cd 0100 	strd	r0, r1, [sp]
   b4e60:	4622      	mov	r2, r4
   b4e62:	490b      	ldr	r1, [pc, #44]	; (b4e90 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x204>)
   b4e64:	e7b8      	b.n	b4dd8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x14c>
   b4e66:	bf00      	nop
   b4e68:	000bcb20 	.word	0x000bcb20
   b4e6c:	2003df9c 	.word	0x2003df9c
   b4e70:	2003dfa0 	.word	0x2003dfa0
   b4e74:	000bc6eb 	.word	0x000bc6eb
   b4e78:	2003e658 	.word	0x2003e658
   b4e7c:	2003e1cc 	.word	0x2003e1cc
   b4e80:	40590000 	.word	0x40590000
   b4e84:	000bc709 	.word	0x000bc709
   b4e88:	000bc734 	.word	0x000bc734
   b4e8c:	000bc784 	.word	0x000bc784
   b4e90:	000bc7dd 	.word	0x000bc7dd
   b4e94:	2003df94 	.word	0x2003df94
   b4e98:	2003df98 	.word	0x2003df98

000b4e9c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b4e9c:	b508      	push	{r3, lr}
		
	Log.info("Data report acknowledged for message %d", buf[8]);
   b4e9e:	4b04      	ldr	r3, [pc, #16]	; (b4eb0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x14>)
   b4ea0:	4904      	ldr	r1, [pc, #16]	; (b4eb4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x18>)
   b4ea2:	7a1a      	ldrb	r2, [r3, #8]
   b4ea4:	4804      	ldr	r0, [pc, #16]	; (b4eb8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x1c>)
   b4ea6:	f7ff f9b3 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	return true;
}
   b4eaa:	2001      	movs	r0, #1
   b4eac:	bd08      	pop	{r3, pc}
   b4eae:	bf00      	nop
   b4eb0:	2003dfa0 	.word	0x2003dfa0
   b4eb4:	000bc82d 	.word	0x000bc82d
   b4eb8:	2003e658 	.word	0x2003e658

000b4ebc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:

bool LoRA_Functions::composeJoinRequesttNode() {
   b4ebc:	b570      	push	{r4, r5, r6, lr}

	digitalWrite(BLUE_LED,HIGH);
   b4ebe:	4b2c      	ldr	r3, [pc, #176]	; (b4f70 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb4>)

	char deviceID[25];
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long

	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b4ec0:	4c2c      	ldr	r4, [pc, #176]	; (b4f74 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb8>)
	digitalWrite(BLUE_LED,HIGH);
   b4ec2:	881e      	ldrh	r6, [r3, #0]
bool LoRA_Functions::composeJoinRequesttNode() {
   b4ec4:	b08e      	sub	sp, #56	; 0x38
	digitalWrite(BLUE_LED,HIGH);
   b4ec6:	2101      	movs	r1, #1
   b4ec8:	4630      	mov	r0, r6
   b4eca:	f006 fa8e 	bl	bb3ea <digitalWrite>
   b4ece:	a803      	add	r0, sp, #12
   b4ed0:	f003 fc5e 	bl	b8790 <spark_deviceID>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b4ed4:	2300      	movs	r3, #0
   b4ed6:	2219      	movs	r2, #25
   b4ed8:	a907      	add	r1, sp, #28
   b4eda:	a803      	add	r0, sp, #12
   b4edc:	f005 fe09 	bl	baaf2 <_ZNK6String8getBytesEPhjj>
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long
   b4ee0:	a803      	add	r0, sp, #12
   b4ee2:	f005 fd65 	bl	ba9b0 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b4ee6:	f000 fa29 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4eea:	f000 fb49 	bl	b5580 <_ZNK13sysStatusData15get_magicNumberEv>
   b4eee:	0a00      	lsrs	r0, r0, #8
   b4ef0:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b4ef2:	f000 fa23 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4ef6:	f000 fb43 	bl	b5580 <_ZNK13sysStatusData15get_magicNumberEv>
	for (uint8_t i=0; i < sizeof(deviceID); i++) {
		buf[i+2] = deviceID[i];
   b4efa:	ad0d      	add	r5, sp, #52	; 0x34
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b4efc:	7060      	strb	r0, [r4, #1]
		buf[i+2] = deviceID[i];
   b4efe:	aa07      	add	r2, sp, #28
   b4f00:	1ca3      	adds	r3, r4, #2
   b4f02:	4614      	mov	r4, r2
   b4f04:	cc03      	ldmia	r4!, {r0, r1}
   b4f06:	42ac      	cmp	r4, r5
   b4f08:	6018      	str	r0, [r3, #0]
   b4f0a:	6059      	str	r1, [r3, #4]
   b4f0c:	4622      	mov	r2, r4
   b4f0e:	f103 0308 	add.w	r3, r3, #8
   b4f12:	d1f6      	bne.n	b4f02 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x46>
   b4f14:	7822      	ldrb	r2, [r4, #0]
   b4f16:	701a      	strb	r2, [r3, #0]
	}

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() > 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4f18:	f000 fa10 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4f1c:	f000 fac9 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4f20:	4915      	ldr	r1, [pc, #84]	; (b4f78 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbc>)
   b4f22:	4a16      	ldr	r2, [pc, #88]	; (b4f7c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc0>)
	if (manager.sendtoWait(buf, 27, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4f24:	2401      	movs	r4, #1
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() > 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4f26:	280a      	cmp	r0, #10
   b4f28:	bf88      	it	hi
   b4f2a:	460a      	movhi	r2, r1
   b4f2c:	4914      	ldr	r1, [pc, #80]	; (b4f80 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
   b4f2e:	4815      	ldr	r0, [pc, #84]	; (b4f84 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4f30:	f7ff f96e 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 27, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4f34:	490f      	ldr	r1, [pc, #60]	; (b4f74 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb8>)
   b4f36:	4814      	ldr	r0, [pc, #80]	; (b4f88 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>)
   b4f38:	9400      	str	r4, [sp, #0]
   b4f3a:	2300      	movs	r3, #0
   b4f3c:	221b      	movs	r2, #27
   b4f3e:	f002 f8e9 	bl	b7114 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4f42:	4605      	mov	r5, r0
   b4f44:	b950      	cbnz	r0, b4f5c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xa0>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   b4f46:	4911      	ldr	r1, [pc, #68]	; (b4f8c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>)
   b4f48:	480e      	ldr	r0, [pc, #56]	; (b4f84 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4f4a:	f7ff f961 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4f4e:	4630      	mov	r0, r6
   b4f50:	4629      	mov	r1, r5
   b4f52:	f006 fa4a 	bl	bb3ea <digitalWrite>
		return true;
   b4f56:	4620      	mov	r0, r4
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4f58:	b00e      	add	sp, #56	; 0x38
   b4f5a:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   b4f5c:	490c      	ldr	r1, [pc, #48]	; (b4f90 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b4f5e:	4809      	ldr	r0, [pc, #36]	; (b4f84 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4f60:	f7ff f956 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4f64:	4630      	mov	r0, r6
   b4f66:	2100      	movs	r1, #0
   b4f68:	f006 fa3f 	bl	bb3ea <digitalWrite>
		return false;
   b4f6c:	2000      	movs	r0, #0
   b4f6e:	e7f3      	b.n	b4f58 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x9c>
   b4f70:	000bcb20 	.word	0x000bcb20
   b4f74:	2003dfa0 	.word	0x2003dfa0
   b4f78:	000bc855 	.word	0x000bc855
   b4f7c:	000bc86c 	.word	0x000bc86c
   b4f80:	000bc881 	.word	0x000bc881
   b4f84:	2003e658 	.word	0x2003e658
   b4f88:	2003e1cc 	.word	0x2003e1cc
   b4f8c:	000bc8a1 	.word	0x000bc8a1
   b4f90:	000bc8ca 	.word	0x000bc8ca

000b4f94 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b4f94:	b508      	push	{r3, lr}

	Log.info("In receive Join Acknowledge");
   b4f96:	4911      	ldr	r1, [pc, #68]	; (b4fdc <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x48>)
   b4f98:	4811      	ldr	r0, [pc, #68]	; (b4fe0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x4c>)
   b4f9a:	f7ff f939 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>

	if (sysStatus.get_nodeNumber() > 10) sysStatus.set_nodeNumber(buf[8]);
   b4f9e:	f000 f9cd 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4fa2:	f000 fa86 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4fa6:	280a      	cmp	r0, #10
   b4fa8:	d905      	bls.n	b4fb6 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x22>
   b4faa:	f000 f9c7 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4fae:	4b0d      	ldr	r3, [pc, #52]	; (b4fe4 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x50>)
   b4fb0:	7a19      	ldrb	r1, [r3, #8]
   b4fb2:	f000 fab5 	bl	b5520 <_ZN13sysStatusData14set_nodeNumberEh>
	Log.info("Join request acknowledged and node ID set to %d", sysStatus.get_nodeNumber());
   b4fb6:	f000 f9c1 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4fba:	f000 fa7a 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4fbe:	490a      	ldr	r1, [pc, #40]	; (b4fe8 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x54>)
   b4fc0:	4602      	mov	r2, r0
   b4fc2:	4807      	ldr	r0, [pc, #28]	; (b4fe0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x4c>)
   b4fc4:	f7ff f924 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());
   b4fc8:	f000 f9b8 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b4fcc:	f000 fa71 	bl	b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4fd0:	4601      	mov	r1, r0
   b4fd2:	4806      	ldr	r0, [pc, #24]	; (b4fec <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x58>)
   b4fd4:	f001 fe05 	bl	b6be2 <_ZN10RHDatagram14setThisAddressEh>
	return true;
}
   b4fd8:	2001      	movs	r0, #1
   b4fda:	bd08      	pop	{r3, pc}
   b4fdc:	000bc8ed 	.word	0x000bc8ed
   b4fe0:	2003e658 	.word	0x2003e658
   b4fe4:	2003dfa0 	.word	0x2003dfa0
   b4fe8:	000bc909 	.word	0x000bc909
   b4fec:	2003e1d0 	.word	0x2003e1d0

000b4ff0 <_ZN14LoRA_Functions22composeAlertReportNodeEv>:

bool LoRA_Functions::composeAlertReportNode() {
	digitalWrite(BLUE_LED,HIGH);
   b4ff0:	4b1e      	ldr	r3, [pc, #120]	; (b506c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x7c>)
bool LoRA_Functions::composeAlertReportNode() {
   b4ff2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	digitalWrite(BLUE_LED,HIGH);
   b4ff4:	881d      	ldrh	r5, [r3, #0]

	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic Number
   b4ff6:	4c1e      	ldr	r4, [pc, #120]	; (b5070 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x80>)
	digitalWrite(BLUE_LED,HIGH);
   b4ff8:	2101      	movs	r1, #1
   b4ffa:	4628      	mov	r0, r5
   b4ffc:	f006 f9f5 	bl	bb3ea <digitalWrite>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic Number
   b5000:	f000 f99c 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b5004:	f000 fabc 	bl	b5580 <_ZNK13sysStatusData15get_magicNumberEv>
   b5008:	0a00      	lsrs	r0, r0, #8
   b500a:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					
   b500c:	f000 f996 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b5010:	f000 fab6 	bl	b5580 <_ZNK13sysStatusData15get_magicNumberEv>
   b5014:	7060      	strb	r0, [r4, #1]
	buf[2] = current.get_alertCodeNode();   						// Node's Alert Code
   b5016:	f000 f9d3 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b501a:	f000 fa5e 	bl	b54da <_ZNK17currentStatusData17get_alertCodeNodeEv>


	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	if (manager.sendtoWait(buf, 3, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b501e:	2305      	movs	r3, #5
	buf[2] = current.get_alertCodeNode();   						// Node's Alert Code
   b5020:	70a0      	strb	r0, [r4, #2]
	if (manager.sendtoWait(buf, 3, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b5022:	4621      	mov	r1, r4
   b5024:	9300      	str	r3, [sp, #0]
   b5026:	4813      	ldr	r0, [pc, #76]	; (b5074 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x84>)
   b5028:	2300      	movs	r3, #0
   b502a:	2203      	movs	r2, #3
   b502c:	f002 f872 	bl	b7114 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5030:	4604      	mov	r4, r0
   b5032:	b980      	cbnz	r0, b5056 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x66>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Success sending Alert Report number %d to gateway at %d", current.get_alertCodeNode(), GATEWAY_ADDRESS);
   b5034:	f000 f9c4 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5038:	f000 fa4f 	bl	b54da <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b503c:	490e      	ldr	r1, [pc, #56]	; (b5078 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x88>)
   b503e:	4602      	mov	r2, r0
   b5040:	4623      	mov	r3, r4
   b5042:	480e      	ldr	r0, [pc, #56]	; (b507c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x8c>)
   b5044:	f7ff f8e4 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5048:	4628      	mov	r0, r5
   b504a:	4621      	mov	r1, r4
   b504c:	f006 f9cd 	bl	bb3ea <digitalWrite>
		return true;
   b5050:	2001      	movs	r0, #1
	else {
		Log.info("Node - Alert Report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b5052:	b003      	add	sp, #12
   b5054:	bd30      	pop	{r4, r5, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b5056:	490a      	ldr	r1, [pc, #40]	; (b5080 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x90>)
   b5058:	4808      	ldr	r0, [pc, #32]	; (b507c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x8c>)
   b505a:	f7ff f8d9 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b505e:	4628      	mov	r0, r5
   b5060:	2100      	movs	r1, #0
   b5062:	f006 f9c2 	bl	bb3ea <digitalWrite>
		return false;
   b5066:	2000      	movs	r0, #0
   b5068:	e7f3      	b.n	b5052 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x62>
   b506a:	bf00      	nop
   b506c:	000bcb20 	.word	0x000bcb20
   b5070:	2003dfa0 	.word	0x2003dfa0
   b5074:	2003e1cc 	.word	0x2003e1cc
   b5078:	000bc939 	.word	0x000bc939
   b507c:	2003e658 	.word	0x2003e658
   b5080:	000bc971 	.word	0x000bc971

000b5084 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {
   b5084:	b508      	push	{r3, lr}

	current.set_alertCodeNode(buf[2]);
   b5086:	f000 f99b 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b508a:	4b05      	ldr	r3, [pc, #20]	; (b50a0 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x1c>)
   b508c:	7899      	ldrb	r1, [r3, #2]
   b508e:	f000 fa5f 	bl	b5550 <_ZN17currentStatusData17set_alertCodeNodeEh>
	Log.info("Alert report acknowledged");
   b5092:	4904      	ldr	r1, [pc, #16]	; (b50a4 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x20>)
   b5094:	4804      	ldr	r0, [pc, #16]	; (b50a8 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x24>)
   b5096:	f7ff f8bb 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	return true;
}
   b509a:	2001      	movs	r0, #1
   b509c:	bd08      	pop	{r3, pc}
   b509e:	bf00      	nop
   b50a0:	2003dfa0 	.word	0x2003dfa0
   b50a4:	000bc99c 	.word	0x000bc99c
   b50a8:	2003e658 	.word	0x2003e658

000b50ac <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b50ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b50ae:	b08d      	sub	sp, #52	; 0x34
	uint8_t len = sizeof(buf);
   b50b0:	23f9      	movs	r3, #249	; 0xf9
   b50b2:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b50b6:	f10d 031f 	add.w	r3, sp, #31
   b50ba:	9303      	str	r3, [sp, #12]
   b50bc:	f10d 031e 	add.w	r3, sp, #30
   b50c0:	9302      	str	r3, [sp, #8]
   b50c2:	4e3d      	ldr	r6, [pc, #244]	; (b51b8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x10c>)
   b50c4:	483d      	ldr	r0, [pc, #244]	; (b51bc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x110>)
   b50c6:	f10d 031d 	add.w	r3, sp, #29
   b50ca:	9301      	str	r3, [sp, #4]
   b50cc:	ab07      	add	r3, sp, #28
   b50ce:	9300      	str	r3, [sp, #0]
   b50d0:	f10d 021a 	add.w	r2, sp, #26
   b50d4:	f10d 031b 	add.w	r3, sp, #27
   b50d8:	4631      	mov	r1, r6
   b50da:	f002 f84f 	bl	b717c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b50de:	4604      	mov	r4, r0
   b50e0:	b918      	cbnz	r0, b50ea <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x3e>
	return false;
   b50e2:	2400      	movs	r4, #0
}
   b50e4:	4620      	mov	r0, r4
   b50e6:	b00d      	add	sp, #52	; 0x34
   b50e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[len] = 0;
   b50ea:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b50ee:	2700      	movs	r7, #0
   b50f0:	54f7      	strb	r7, [r6, r3]
		if ((buf[0] << 8 | buf[1]) != sysStatus.get_magicNumber()) {
   b50f2:	8835      	ldrh	r5, [r6, #0]
   b50f4:	f000 f922 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b50f8:	f000 fa42 	bl	b5580 <_ZNK13sysStatusData15get_magicNumberEv>
   b50fc:	ba6d      	rev16	r5, r5
   b50fe:	b2ad      	uxth	r5, r5
   b5100:	42a8      	cmp	r0, r5
   b5102:	d004      	beq.n	b510e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x62>
			Log.info("Magic Number mismatch - ignoring message");
   b5104:	492e      	ldr	r1, [pc, #184]	; (b51c0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x114>)
   b5106:	482f      	ldr	r0, [pc, #188]	; (b51c4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x118>)
   b5108:	f7ff f882 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b510c:	e7e9      	b.n	b50e2 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
		lora_state = (LoRA_State)messageFlag;
   b510e:	4d2e      	ldr	r5, [pc, #184]	; (b51c8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x11c>)
   b5110:	f89d 301e 	ldrb.w	r3, [sp, #30]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5114:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b5118:	482c      	ldr	r0, [pc, #176]	; (b51cc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x120>)
		lora_state = (LoRA_State)messageFlag;
   b511a:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b511c:	9205      	str	r2, [sp, #20]
   b511e:	f001 fdde 	bl	b6cde <_ZN15RHGenericDriver8lastRssiEv>
   b5122:	492b      	ldr	r1, [pc, #172]	; (b51d0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x124>)
   b5124:	9a05      	ldr	r2, [sp, #20]
   b5126:	4603      	mov	r3, r0
   b5128:	7828      	ldrb	r0, [r5, #0]
   b512a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b512e:	9100      	str	r1, [sp, #0]
   b5130:	4824      	ldr	r0, [pc, #144]	; (b51c4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x118>)
   b5132:	4928      	ldr	r1, [pc, #160]	; (b51d4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x128>)
   b5134:	f7ff f86c 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[2] << 24) | (buf[3] << 16) | (buf[4] << 8) | buf[5]));  // Set time based on response from gateway
   b5138:	f8d6 0002 	ldr.w	r0, [r6, #2]
   b513c:	ba00      	rev	r0, r0
   b513e:	17c1      	asrs	r1, r0, #31
   b5140:	f005 fe2a 	bl	bad98 <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[6] << 8 | buf[7]));			// Frequency of reporting set by Gateway
   b5144:	f000 f8fa 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b5148:	88f1      	ldrh	r1, [r6, #6]
   b514a:	ba49      	rev16	r1, r1
   b514c:	b289      	uxth	r1, r1
   b514e:	f000 fa49 	bl	b55e4 <_ZN13sysStatusData20set_frequencyMinutesEt>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b5152:	f005 ff3a 	bl	bafca <_ZN9TimeClass3nowEv>
   b5156:	17c3      	asrs	r3, r0, #31
   b5158:	4602      	mov	r2, r0
   b515a:	a808      	add	r0, sp, #32
   b515c:	f005 fe30 	bl	badc0 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b5160:	9a08      	ldr	r2, [sp, #32]
   b5162:	9205      	str	r2, [sp, #20]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b5164:	f000 f8ea 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b5168:	f000 fa0f 	bl	b558a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b516c:	9a05      	ldr	r2, [sp, #20]
   b516e:	491a      	ldr	r1, [pc, #104]	; (b51d8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x12c>)
   b5170:	4603      	mov	r3, r0
   b5172:	4814      	ldr	r0, [pc, #80]	; (b51c4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x118>)
   b5174:	f7ff f84c 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b5178:	a808      	add	r0, sp, #32
   b517a:	f005 fc19 	bl	ba9b0 <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b517e:	782b      	ldrb	r3, [r5, #0]
   b5180:	2b04      	cmp	r3, #4
   b5182:	d011      	beq.n	b51a8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xfc>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b5184:	782b      	ldrb	r3, [r5, #0]
   b5186:	2b02      	cmp	r3, #2
   b5188:	d105      	bne.n	b5196 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xea>
   b518a:	f7ff fce1 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b518e:	f7ff ff01 	bl	b4f94 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b5192:	2800      	cmp	r0, #0
   b5194:	d1a6      	bne.n	b50e4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b5196:	782b      	ldrb	r3, [r5, #0]
   b5198:	2b06      	cmp	r3, #6
   b519a:	d1a2      	bne.n	b50e2 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
   b519c:	f7ff fcd8 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b51a0:	f7ff ff70 	bl	b5084 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>
   b51a4:	4604      	mov	r4, r0
   b51a6:	e79d      	b.n	b50e4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b51a8:	f7ff fcd2 	bl	b4b50 <_ZN14LoRA_Functions8instanceEv>
   b51ac:	f7ff fe76 	bl	b4e9c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
   b51b0:	2800      	cmp	r0, #0
   b51b2:	d0e7      	beq.n	b5184 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xd8>
   b51b4:	e796      	b.n	b50e4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
   b51b6:	bf00      	nop
   b51b8:	2003dfa0 	.word	0x2003dfa0
   b51bc:	2003e1cc 	.word	0x2003e1cc
   b51c0:	000bc9b6 	.word	0x000bc9b6
   b51c4:	2003e658 	.word	0x2003e658
   b51c8:	2003df8c 	.word	0x2003df8c
   b51cc:	2003e09c 	.word	0x2003e09c
   b51d0:	2003de04 	.word	0x2003de04
   b51d4:	000bc9df 	.word	0x000bc9df
   b51d8:	000bca11 	.word	0x000bca11

000b51dc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b51dc:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b51de:	4a08      	ldr	r2, [pc, #32]	; (b5200 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b51e0:	4c08      	ldr	r4, [pc, #32]	; (b5204 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b51e2:	4909      	ldr	r1, [pc, #36]	; (b5208 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b51e4:	7812      	ldrb	r2, [r2, #0]
   b51e6:	7809      	ldrb	r1, [r1, #0]
   b51e8:	4b08      	ldr	r3, [pc, #32]	; (b520c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b51ea:	4620      	mov	r0, r4
   b51ec:	f002 fc88 	bl	b7b00 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b51f0:	4621      	mov	r1, r4
   b51f2:	4807      	ldr	r0, [pc, #28]	; (b5210 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b51f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b51f8:	2200      	movs	r2, #0
   b51fa:	f001 bf81 	b.w	b7100 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b51fe:	bf00      	nop
   b5200:	000bcb28 	.word	0x000bcb28
   b5204:	2003e09c 	.word	0x2003e09c
   b5208:	000bcb26 	.word	0x000bcb26
   b520c:	2003e3f0 	.word	0x2003e3f0
   b5210:	2003e1cc 	.word	0x2003e1cc

000b5214 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5214:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b5216:	4b04      	ldr	r3, [pc, #16]	; (b5228 <_ZN17currentStatusDataD1Ev+0x14>)
   b5218:	6003      	str	r3, [r0, #0]
   b521a:	4604      	mov	r4, r0
            if (handle_) {
   b521c:	6840      	ldr	r0, [r0, #4]
   b521e:	b108      	cbz	r0, b5224 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5220:	f003 f802 	bl	b8228 <os_mutex_recursive_destroy>
}
   b5224:	4620      	mov	r0, r4
   b5226:	bd10      	pop	{r4, pc}
   b5228:	000bd214 	.word	0x000bd214

000b522c <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b522c:	b510      	push	{r4, lr}
   b522e:	4604      	mov	r4, r0
}
   b5230:	f7ff fff0 	bl	b5214 <_ZN17currentStatusDataD1Ev>
   b5234:	4620      	mov	r0, r4
   b5236:	2178      	movs	r1, #120	; 0x78
   b5238:	f7fe ff31 	bl	b409e <_ZdlPvj>
   b523c:	4620      	mov	r0, r4
   b523e:	bd10      	pop	{r4, pc}

000b5240 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5240:	b510      	push	{r4, lr}
   b5242:	4b03      	ldr	r3, [pc, #12]	; (b5250 <_ZN8MB85RC64D1Ev+0x10>)
   b5244:	6003      	str	r3, [r0, #0]
   b5246:	4604      	mov	r4, r0
   b5248:	f001 fb9e 	bl	b6988 <_ZN6MB85RCD1Ev>
   b524c:	4620      	mov	r0, r4
   b524e:	bd10      	pop	{r4, pc}
   b5250:	000bca80 	.word	0x000bca80

000b5254 <_ZN8MB85RC64D0Ev>:
   b5254:	b510      	push	{r4, lr}
   b5256:	4604      	mov	r4, r0
   b5258:	f7ff fff2 	bl	b5240 <_ZN8MB85RC64D1Ev>
   b525c:	4620      	mov	r0, r4
   b525e:	2110      	movs	r1, #16
   b5260:	f7fe ff1d 	bl	b409e <_ZdlPvj>
   b5264:	4620      	mov	r0, r4
   b5266:	bd10      	pop	{r4, pc}

000b5268 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b5268:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b526a:	4b04      	ldr	r3, [pc, #16]	; (b527c <_ZN13sysStatusDataD1Ev+0x14>)
   b526c:	6003      	str	r3, [r0, #0]
   b526e:	4604      	mov	r4, r0
            if (handle_) {
   b5270:	6840      	ldr	r0, [r0, #4]
   b5272:	b108      	cbz	r0, b5278 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5274:	f002 ffd8 	bl	b8228 <os_mutex_recursive_destroy>
}
   b5278:	4620      	mov	r0, r4
   b527a:	bd10      	pop	{r4, pc}
   b527c:	000bd214 	.word	0x000bd214

000b5280 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5280:	b510      	push	{r4, lr}
   b5282:	4604      	mov	r4, r0
}
   b5284:	f7ff fff0 	bl	b5268 <_ZN13sysStatusDataD1Ev>
   b5288:	4620      	mov	r0, r4
   b528a:	2170      	movs	r1, #112	; 0x70
   b528c:	f7fe ff07 	bl	b409e <_ZdlPvj>
   b5290:	4620      	mov	r0, r4
   b5292:	bd10      	pop	{r4, pc}

000b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b5294:	b510      	push	{r4, lr}
            if (!handle_) {
   b5296:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5298:	4604      	mov	r4, r0
            if (!handle_) {
   b529a:	b90b      	cbnz	r3, b52a0 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b529c:	f002 ffbc 	bl	b8218 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b52a0:	6820      	ldr	r0, [r4, #0]
        }
   b52a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b52a6:	f002 bfc7 	b.w	b8238 <os_mutex_recursive_lock>

000b52aa <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b52aa:	b538      	push	{r3, r4, r5, lr}
   b52ac:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b52ae:	3004      	adds	r0, #4
   b52b0:	f7ff fff0 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b52b4:	6a20      	ldr	r0, [r4, #32]
   b52b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b52b8:	6803      	ldr	r3, [r0, #0]
   b52ba:	68dd      	ldr	r5, [r3, #12]
   b52bc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b52c0:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b52c2:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b52c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b52c8:	f002 bfbe 	b.w	b8248 <os_mutex_recursive_unlock>

000b52cc <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b52cc:	b538      	push	{r3, r4, r5, lr}
   b52ce:	4604      	mov	r4, r0
   b52d0:	3004      	adds	r0, #4
   b52d2:	f7ff ffdf 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b52d6:	6a20      	ldr	r0, [r4, #32]
   b52d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b52da:	6803      	ldr	r3, [r0, #0]
   b52dc:	689d      	ldr	r5, [r3, #8]
   b52de:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b52e2:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b52e4:	68a2      	ldr	r2, [r4, #8]
   b52e6:	6823      	ldr	r3, [r4, #0]
   b52e8:	88d1      	ldrh	r1, [r2, #6]
   b52ea:	695b      	ldr	r3, [r3, #20]
   b52ec:	4620      	mov	r0, r4
   b52ee:	4798      	blx	r3
   b52f0:	b918      	cbnz	r0, b52fa <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b52f2:	6823      	ldr	r3, [r4, #0]
   b52f4:	4620      	mov	r0, r4
   b52f6:	699b      	ldr	r3, [r3, #24]
   b52f8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b52fa:	6860      	ldr	r0, [r4, #4]
   b52fc:	f002 ffa4 	bl	b8248 <os_mutex_recursive_unlock>
        }
   b5300:	2001      	movs	r0, #1
   b5302:	bd38      	pop	{r3, r4, r5, pc}

000b5304 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5304:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5308:	6081      	str	r1, [r0, #8]
   b530a:	4909      	ldr	r1, [pc, #36]	; (b5330 <_ZN13sysStatusDataC1Ev+0x2c>)
   b530c:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b5310:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5314:	2101      	movs	r1, #1
   b5316:	8281      	strh	r1, [r0, #20]
   b5318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b531c:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b531e:	4905      	ldr	r1, [pc, #20]	; (b5334 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5320:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5322:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b5326:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5328:	6182      	str	r2, [r0, #24]
   b532a:	4a03      	ldr	r2, [pc, #12]	; (b5338 <_ZN13sysStatusDataC1Ev+0x34>)
   b532c:	6002      	str	r2, [r0, #0]
};
   b532e:	4770      	bx	lr
   b5330:	20a99e73 	.word	0x20a99e73
   b5334:	2003e388 	.word	0x2003e388
   b5338:	000bca9c 	.word	0x000bca9c

000b533c <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b533c:	b510      	push	{r4, lr}
    if (!_instance) {
   b533e:	4c06      	ldr	r4, [pc, #24]	; (b5358 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5340:	6823      	ldr	r3, [r4, #0]
   b5342:	b93b      	cbnz	r3, b5354 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5344:	2070      	movs	r0, #112	; 0x70
   b5346:	f7fe fea6 	bl	b4096 <_Znwj>
   b534a:	4603      	mov	r3, r0
   b534c:	b108      	cbz	r0, b5352 <_ZN13sysStatusData8instanceEv+0x16>
   b534e:	f7ff ffd9 	bl	b5304 <_ZN13sysStatusDataC1Ev>
   b5352:	6023      	str	r3, [r4, #0]
}
   b5354:	6820      	ldr	r0, [r4, #0]
   b5356:	bd10      	pop	{r4, pc}
   b5358:	2003e380 	.word	0x2003e380

000b535c <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b535c:	b510      	push	{r4, lr}
    fram.begin();
   b535e:	6a00      	ldr	r0, [r0, #32]
   b5360:	f001 fb28 	bl	b69b4 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5364:	f7ff ffea 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b5368:	6803      	ldr	r3, [r0, #0]
}
   b536a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b536e:	685b      	ldr	r3, [r3, #4]
   b5370:	4718      	bx	r3

000b5372 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5372:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5374:	f7ff ffe2 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b5378:	6803      	ldr	r3, [r0, #0]
}
   b537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b537e:	68db      	ldr	r3, [r3, #12]
   b5380:	2100      	movs	r1, #0
   b5382:	4718      	bx	r3

000b5384 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5384:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5386:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b538a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b538c:	6182      	str	r2, [r0, #24]
   b538e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5392:	6081      	str	r1, [r0, #8]
   b5394:	61c2      	str	r2, [r0, #28]
   b5396:	4907      	ldr	r1, [pc, #28]	; (b53b4 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5398:	4a07      	ldr	r2, [pc, #28]	; (b53b8 <_ZN17currentStatusDataC1Ev+0x34>)
   b539a:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b539c:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b53a0:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b53a2:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b53a6:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b53a8:	2101      	movs	r1, #1
   b53aa:	4a04      	ldr	r2, [pc, #16]	; (b53bc <_ZN17currentStatusDataC1Ev+0x38>)
   b53ac:	8281      	strh	r1, [r0, #20]
   b53ae:	6002      	str	r2, [r0, #0]
};
   b53b0:	4770      	bx	lr
   b53b2:	bf00      	nop
   b53b4:	20a99e73 	.word	0x20a99e73
   b53b8:	2003e388 	.word	0x2003e388
   b53bc:	000bcac8 	.word	0x000bcac8

000b53c0 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b53c0:	b510      	push	{r4, lr}
    if (!_instance) {
   b53c2:	4c06      	ldr	r4, [pc, #24]	; (b53dc <_ZN17currentStatusData8instanceEv+0x1c>)
   b53c4:	6823      	ldr	r3, [r4, #0]
   b53c6:	b93b      	cbnz	r3, b53d8 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b53c8:	2078      	movs	r0, #120	; 0x78
   b53ca:	f7fe fe64 	bl	b4096 <_Znwj>
   b53ce:	4603      	mov	r3, r0
   b53d0:	b108      	cbz	r0, b53d6 <_ZN17currentStatusData8instanceEv+0x16>
   b53d2:	f7ff ffd7 	bl	b5384 <_ZN17currentStatusDataC1Ev>
   b53d6:	6023      	str	r3, [r4, #0]
}
   b53d8:	6820      	ldr	r0, [r4, #0]
   b53da:	bd10      	pop	{r4, pc}
   b53dc:	2003e384 	.word	0x2003e384

000b53e0 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b53e0:	b510      	push	{r4, lr}
    fram.begin();
   b53e2:	6a00      	ldr	r0, [r0, #32]
   b53e4:	f001 fae6 	bl	b69b4 <_ZN6MB85RC5beginEv>
    current.load();
   b53e8:	f7ff ffea 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b53ec:	6803      	ldr	r3, [r0, #0]
}
   b53ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.load();
   b53f2:	685b      	ldr	r3, [r3, #4]
   b53f4:	4718      	bx	r3

000b53f6 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b53f6:	b510      	push	{r4, lr}
    current.flush(false);
   b53f8:	f7ff ffe2 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b53fc:	6803      	ldr	r3, [r0, #0]
}
   b53fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b5402:	68db      	ldr	r3, [r3, #12]
   b5404:	2100      	movs	r1, #0
   b5406:	4718      	bx	r3

000b5408 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5408:	b510      	push	{r4, lr}
   b540a:	4604      	mov	r4, r0
   b540c:	ed2d 8b02 	vpush	{d8}
   b5410:	3004      	adds	r0, #4
   b5412:	f7ff ff3f 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5416:	68e3      	ldr	r3, [r4, #12]
   b5418:	3b08      	subs	r3, #8
   b541a:	2b17      	cmp	r3, #23
   b541c:	d90c      	bls.n	b5438 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b541e:	68a3      	ldr	r3, [r4, #8]
   b5420:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5424:	6860      	ldr	r0, [r4, #4]
   b5426:	f002 ff0f 	bl	b8248 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b542a:	eeb0 0a48 	vmov.f32	s0, s16
   b542e:	eef0 0a68 	vmov.f32	s1, s17
   b5432:	ecbd 8b02 	vpop	{d8}
   b5436:	bd10      	pop	{r4, pc}
            T result = 0;
   b5438:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5440 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b543c:	e7f2      	b.n	b5424 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b543e:	bf00      	nop
	...

000b5448 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b544a:	4604      	mov	r4, r0
   b544c:	3004      	adds	r0, #4
   b544e:	ec57 6b10 	vmov	r6, r7, d0
   b5452:	f7ff ff1f 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5456:	68e3      	ldr	r3, [r4, #12]
   b5458:	3b08      	subs	r3, #8
   b545a:	2b17      	cmp	r3, #23
   b545c:	d912      	bls.n	b5484 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b545e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5460:	4630      	mov	r0, r6
   b5462:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5466:	4639      	mov	r1, r7
   b5468:	f006 fce4 	bl	bbe34 <__aeabi_dcmpeq>
   b546c:	b950      	cbnz	r0, b5484 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b546e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5472:	4620      	mov	r0, r4
   b5474:	68a5      	ldr	r5, [r4, #8]
   b5476:	f002 fe4d 	bl	b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b547a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b547c:	6823      	ldr	r3, [r4, #0]
   b547e:	4620      	mov	r0, r4
   b5480:	691b      	ldr	r3, [r3, #16]
   b5482:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5484:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b5486:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b548a:	f002 bedd 	b.w	b8248 <os_mutex_recursive_unlock>

000b548e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b548e:	b538      	push	{r3, r4, r5, lr}
   b5490:	4604      	mov	r4, r0
   b5492:	3004      	adds	r0, #4
   b5494:	460d      	mov	r5, r1
   b5496:	f7ff fefd 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b549a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b549c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b549e:	3b01      	subs	r3, #1
   b54a0:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b54a2:	bf26      	itte	cs
   b54a4:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b54a6:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b54a8:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b54aa:	f002 fecd 	bl	b8248 <os_mutex_recursive_unlock>
        }
   b54ae:	4628      	mov	r0, r5
   b54b0:	bd38      	pop	{r3, r4, r5, pc}

000b54b2 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b54b2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b54b4:	2110      	movs	r1, #16
   b54b6:	f7ff ffea 	bl	b548e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b54ba:	bd08      	pop	{r3, pc}

000b54bc <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b54bc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b54be:	2119      	movs	r1, #25
   b54c0:	f7ff ffe5 	bl	b548e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b54c4:	bd08      	pop	{r3, pc}

000b54c6 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b54c6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b54c8:	2110      	movs	r1, #16
   b54ca:	f7ff ffe0 	bl	b548e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b54ce:	bd08      	pop	{r3, pc}

000b54d0 <_ZNK17currentStatusData16get_batteryStateEv>:

uint8_t currentStatusData::get_batteryState() const {
   b54d0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b54d2:	2120      	movs	r1, #32
   b54d4:	f7ff ffdb 	bl	b548e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b54d8:	bd08      	pop	{r3, pc}

000b54da <_ZNK17currentStatusData17get_alertCodeNodeEv>:

void currentStatusData::set_dailyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
}

uint8_t currentStatusData::get_alertCodeNode() const {
   b54da:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b54dc:	2144      	movs	r1, #68	; 0x44
   b54de:	f7ff ffd6 	bl	b548e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b54e2:	bd08      	pop	{r3, pc}

000b54e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b54e4:	b570      	push	{r4, r5, r6, lr}
   b54e6:	4604      	mov	r4, r0
   b54e8:	3004      	adds	r0, #4
   b54ea:	460d      	mov	r5, r1
   b54ec:	4616      	mov	r6, r2
   b54ee:	f7ff fed1 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b54f2:	68e3      	ldr	r3, [r4, #12]
   b54f4:	3b01      	subs	r3, #1
   b54f6:	42ab      	cmp	r3, r5
   b54f8:	d30d      	bcc.n	b5516 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b54fa:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b54fc:	5d5a      	ldrb	r2, [r3, r5]
   b54fe:	42b2      	cmp	r2, r6
   b5500:	d009      	beq.n	b5516 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5502:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5504:	4620      	mov	r0, r4
   b5506:	68a5      	ldr	r5, [r4, #8]
   b5508:	f002 fe04 	bl	b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b550c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b550e:	6823      	ldr	r3, [r4, #0]
   b5510:	4620      	mov	r0, r4
   b5512:	691b      	ldr	r3, [r3, #16]
   b5514:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5516:	6860      	ldr	r0, [r4, #4]
        }
   b5518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b551c:	f002 be94 	b.w	b8248 <os_mutex_recursive_unlock>

000b5520 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b5520:	b508      	push	{r3, lr}
   b5522:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b5524:	2110      	movs	r1, #16
   b5526:	f7ff ffdd 	bl	b54e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b552a:	bd08      	pop	{r3, pc}

000b552c <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b552c:	b508      	push	{r3, lr}
   b552e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5530:	2119      	movs	r1, #25
   b5532:	f7ff ffd7 	bl	b54e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5536:	bd08      	pop	{r3, pc}

000b5538 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5538:	b508      	push	{r3, lr}
   b553a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b553c:	2110      	movs	r1, #16
   b553e:	f7ff ffd1 	bl	b54e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5542:	bd08      	pop	{r3, pc}

000b5544 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5544:	b508      	push	{r3, lr}
   b5546:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5548:	2120      	movs	r1, #32
   b554a:	f7ff ffcb 	bl	b54e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b554e:	bd08      	pop	{r3, pc}

000b5550 <_ZN17currentStatusData17set_alertCodeNodeEh>:

void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5550:	b508      	push	{r3, lr}
   b5552:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5554:	2144      	movs	r1, #68	; 0x44
   b5556:	f7ff ffc5 	bl	b54e4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b555a:	bd08      	pop	{r3, pc}

000b555c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b555c:	b538      	push	{r3, r4, r5, lr}
   b555e:	4604      	mov	r4, r0
   b5560:	3004      	adds	r0, #4
   b5562:	460d      	mov	r5, r1
   b5564:	f7ff fe96 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5568:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b556a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b556c:	3b02      	subs	r3, #2
   b556e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5570:	bf26      	itte	cs
   b5572:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5574:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5576:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5578:	f002 fe66 	bl	b8248 <os_mutex_recursive_unlock>
        }
   b557c:	4628      	mov	r0, r5
   b557e:	bd38      	pop	{r3, r4, r5, pc}

000b5580 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5580:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5582:	2114      	movs	r1, #20
   b5584:	f7ff ffea 	bl	b555c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5588:	bd08      	pop	{r3, pc}

000b558a <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b558a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b558c:	2132      	movs	r1, #50	; 0x32
   b558e:	f7ff ffe5 	bl	b555c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5592:	bd08      	pop	{r3, pc}

000b5594 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b5594:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5596:	2140      	movs	r1, #64	; 0x40
   b5598:	f7ff ffe0 	bl	b555c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b559c:	bd08      	pop	{r3, pc}

000b559e <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b559e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b55a0:	2142      	movs	r1, #66	; 0x42
   b55a2:	f7ff ffdb 	bl	b555c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b55a6:	bd08      	pop	{r3, pc}

000b55a8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b55a8:	b570      	push	{r4, r5, r6, lr}
   b55aa:	4604      	mov	r4, r0
   b55ac:	3004      	adds	r0, #4
   b55ae:	460d      	mov	r5, r1
   b55b0:	4616      	mov	r6, r2
   b55b2:	f7ff fe6f 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b55b6:	68e3      	ldr	r3, [r4, #12]
   b55b8:	3b02      	subs	r3, #2
   b55ba:	42ab      	cmp	r3, r5
   b55bc:	d30d      	bcc.n	b55da <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b55be:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b55c0:	5b5a      	ldrh	r2, [r3, r5]
   b55c2:	42b2      	cmp	r2, r6
   b55c4:	d009      	beq.n	b55da <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b55c6:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b55c8:	4620      	mov	r0, r4
   b55ca:	68a5      	ldr	r5, [r4, #8]
   b55cc:	f002 fda2 	bl	b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b55d0:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b55d2:	6823      	ldr	r3, [r4, #0]
   b55d4:	4620      	mov	r0, r4
   b55d6:	691b      	ldr	r3, [r3, #16]
   b55d8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b55da:	6860      	ldr	r0, [r4, #4]
        }
   b55dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b55e0:	f002 be32 	b.w	b8248 <os_mutex_recursive_unlock>

000b55e4 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b55e4:	b508      	push	{r3, lr}
   b55e6:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b55e8:	2132      	movs	r1, #50	; 0x32
   b55ea:	f7ff ffdd 	bl	b55a8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b55ee:	bd08      	pop	{r3, pc}

000b55f0 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b55f0:	b508      	push	{r3, lr}
   b55f2:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b55f4:	2140      	movs	r1, #64	; 0x40
   b55f6:	f7ff ffd7 	bl	b55a8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b55fa:	bd08      	pop	{r3, pc}

000b55fc <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b55fc:	b508      	push	{r3, lr}
   b55fe:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5600:	2142      	movs	r1, #66	; 0x42
   b5602:	f7ff ffd1 	bl	b55a8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5606:	bd08      	pop	{r3, pc}

000b5608 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b5608:	b538      	push	{r3, r4, r5, lr}
   b560a:	4604      	mov	r4, r0
   b560c:	3004      	adds	r0, #4
   b560e:	460d      	mov	r5, r1
   b5610:	f7ff fe40 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5614:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5616:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5618:	3b01      	subs	r3, #1
   b561a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b561c:	bf26      	itte	cs
   b561e:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5620:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5622:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5624:	f002 fe10 	bl	b8248 <os_mutex_recursive_unlock>
        }
   b5628:	4628      	mov	r0, r5
   b562a:	bd38      	pop	{r3, r4, r5, pc}

000b562c <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b562c:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b562e:	2118      	movs	r1, #24
   b5630:	f7ff ffea 	bl	b5608 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5634:	bd08      	pop	{r3, pc}

000b5636 <_ZNK13sysStatusData14get_sensorTypeEv>:
bool sysStatusData::get_sensorType() const {
   b5636:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, sensorType));
   b5638:	2140      	movs	r1, #64	; 0x40
   b563a:	f7ff ffe5 	bl	b5608 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b563e:	bd08      	pop	{r3, pc}

000b5640 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5640:	b570      	push	{r4, r5, r6, lr}
   b5642:	4604      	mov	r4, r0
   b5644:	3004      	adds	r0, #4
   b5646:	460d      	mov	r5, r1
   b5648:	4616      	mov	r6, r2
   b564a:	f7ff fe23 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b564e:	68e3      	ldr	r3, [r4, #12]
   b5650:	3b01      	subs	r3, #1
   b5652:	42ab      	cmp	r3, r5
   b5654:	d30d      	bcc.n	b5672 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5656:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5658:	5d5a      	ldrb	r2, [r3, r5]
   b565a:	42b2      	cmp	r2, r6
   b565c:	d009      	beq.n	b5672 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b565e:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5660:	4620      	mov	r0, r4
   b5662:	68a5      	ldr	r5, [r4, #8]
   b5664:	f002 fd56 	bl	b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5668:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b566a:	6823      	ldr	r3, [r4, #0]
   b566c:	4620      	mov	r0, r4
   b566e:	691b      	ldr	r3, [r3, #16]
   b5670:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5672:	6860      	ldr	r0, [r4, #4]
        }
   b5674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5678:	f002 bde6 	b.w	b8248 <os_mutex_recursive_unlock>

000b567c <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b567c:	b508      	push	{r3, lr}
   b567e:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b5680:	2140      	movs	r1, #64	; 0x40
   b5682:	f7ff ffdd 	bl	b5640 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5686:	bd08      	pop	{r3, pc}

000b5688 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b568a:	4604      	mov	r4, r0
   b568c:	3004      	adds	r0, #4
   b568e:	460d      	mov	r5, r1
   b5690:	f7ff fe00 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5694:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5696:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5698:	3b08      	subs	r3, #8
   b569a:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b569c:	bf23      	ittte	cs
   b569e:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b56a0:	1949      	addcs	r1, r1, r5
   b56a2:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b56a6:	2600      	movcc	r6, #0
   b56a8:	bf38      	it	cc
   b56aa:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b56ac:	f002 fdcc 	bl	b8248 <os_mutex_recursive_unlock>
        }
   b56b0:	4630      	mov	r0, r6
   b56b2:	4639      	mov	r1, r7
   b56b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b56b6 <_ZNK17currentStatusData17get_lastCountTimeEv>:
time_t currentStatusData::get_lastCountTime() const {
   b56b6:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(CurrentData, lastCountTime));
   b56b8:	2138      	movs	r1, #56	; 0x38
   b56ba:	f7ff ffe5 	bl	b5688 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b56be:	bd08      	pop	{r3, pc}

000b56c0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b56c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56c2:	4604      	mov	r4, r0
   b56c4:	3004      	adds	r0, #4
   b56c6:	460d      	mov	r5, r1
   b56c8:	461e      	mov	r6, r3
   b56ca:	4617      	mov	r7, r2
   b56cc:	f7ff fde2 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b56d0:	68e3      	ldr	r3, [r4, #12]
   b56d2:	3b08      	subs	r3, #8
   b56d4:	42ab      	cmp	r3, r5
   b56d6:	d312      	bcc.n	b56fe <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b56d8:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b56da:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b56dc:	5958      	ldr	r0, [r3, r5]
   b56de:	6851      	ldr	r1, [r2, #4]
   b56e0:	42b1      	cmp	r1, r6
   b56e2:	bf08      	it	eq
   b56e4:	42b8      	cmpeq	r0, r7
   b56e6:	d00a      	beq.n	b56fe <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b56e8:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b56ea:	4620      	mov	r0, r4
                        *(T *)p = value;
   b56ec:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b56ee:	68a5      	ldr	r5, [r4, #8]
   b56f0:	f002 fd10 	bl	b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b56f4:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b56f6:	6823      	ldr	r3, [r4, #0]
   b56f8:	4620      	mov	r0, r4
   b56fa:	691b      	ldr	r3, [r3, #16]
   b56fc:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b56fe:	6860      	ldr	r0, [r4, #4]
        }
   b5700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5704:	f002 bda0 	b.w	b8248 <os_mutex_recursive_unlock>

000b5708 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5708:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b570a:	2128      	movs	r1, #40	; 0x28
   b570c:	f7ff ffd8 	bl	b56c0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5710:	bd08      	pop	{r3, pc}

000b5712 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5712:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5714:	2138      	movs	r1, #56	; 0x38
   b5716:	f7ff ffd3 	bl	b56c0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b571a:	bd08      	pop	{r3, pc}

000b571c <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b571c:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b571e:	490f      	ldr	r1, [pc, #60]	; (b575c <_Z15resetEverythingv+0x40>)
   b5720:	480f      	ldr	r0, [pc, #60]	; (b5760 <_Z15resetEverythingv+0x44>)
   b5722:	f7fe fd75 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b5726:	f7ff fe4b 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b572a:	2100      	movs	r1, #0
   b572c:	f7ff ff66 	bl	b55fc <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5730:	f7ff fe46 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5734:	2100      	movs	r1, #0
   b5736:	f7ff ff5b 	bl	b55f0 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b573a:	f7ff fe41 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b573e:	4604      	mov	r4, r0
   b5740:	f005 fc43 	bl	bafca <_ZN9TimeClass3nowEv>
   b5744:	4602      	mov	r2, r0
   b5746:	17c3      	asrs	r3, r0, #31
   b5748:	4620      	mov	r0, r4
   b574a:	f7ff ffe2 	bl	b5712 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b574e:	f7ff fdf5 	bl	b533c <_ZN13sysStatusData8instanceEv>
}
   b5752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b5756:	2100      	movs	r1, #0
   b5758:	f7ff bee8 	b.w	b552c <_ZN13sysStatusData14set_resetCountEh>
   b575c:	000bca54 	.word	0x000bca54
   b5760:	2003e658 	.word	0x2003e658

000b5764 <_ZN17currentStatusData22set_alertTimestampNodeEx>:

time_t currentStatusData::get_alertTimestampNode() const {
    return getValue<time_t>(offsetof(CurrentData, alertTimestampNode));
}

void currentStatusData::set_alertTimestampNode(time_t value) {
   b5764:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b5766:	2148      	movs	r1, #72	; 0x48
   b5768:	f7ff ffaa 	bl	b56c0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b576c:	bd08      	pop	{r3, pc}
	...

000b5770 <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5770:	4b08      	ldr	r3, [pc, #32]	; (b5794 <_GLOBAL__sub_I_fram+0x24>)
   b5772:	2201      	movs	r2, #1

void currentStatusData::logData(const char *msg) {
    Log.info("Current Structure values - %d, %4.2f", currentData.internalTempC, currentData.stateOfCharge);
}
   b5774:	b510      	push	{r4, lr}
   b5776:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b5778:	f005 fea8 	bl	bb4cc <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b577c:	4c06      	ldr	r4, [pc, #24]	; (b5798 <_GLOBAL__sub_I_fram+0x28>)
   b577e:	4601      	mov	r1, r0
   b5780:	2300      	movs	r3, #0
   b5782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5786:	4620      	mov	r0, r4
   b5788:	f001 f90a 	bl	b69a0 <_ZN6MB85RCC1ER7TwoWireji>
   b578c:	4b03      	ldr	r3, [pc, #12]	; (b579c <_GLOBAL__sub_I_fram+0x2c>)
   b578e:	6023      	str	r3, [r4, #0]
}
   b5790:	bd10      	pop	{r4, pc}
   b5792:	bf00      	nop
   b5794:	2003e37c 	.word	0x2003e37c
   b5798:	2003e388 	.word	0x2003e388
   b579c:	000bca80 	.word	0x000bca80

000b57a0 <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b57a0:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b57a2:	4913      	ldr	r1, [pc, #76]	; (b57f0 <_Z18initializePinModesv+0x50>)
   b57a4:	4813      	ldr	r0, [pc, #76]	; (b57f4 <_Z18initializePinModesv+0x54>)
   b57a6:	f7fe fd33 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b57aa:	2102      	movs	r1, #2
   b57ac:	2004      	movs	r0, #4
   b57ae:	f005 fe0b 	bl	bb3c8 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b57b2:	2100      	movs	r1, #0
   b57b4:	2008      	movs	r0, #8
   b57b6:	f005 fe07 	bl	bb3c8 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b57ba:	2101      	movs	r1, #1
   b57bc:	2007      	movs	r0, #7
   b57be:	f005 fe03 	bl	bb3c8 <pinMode>
    pinMode(INT_PIN, INPUT);
   b57c2:	2100      	movs	r1, #0
   b57c4:	2012      	movs	r0, #18
   b57c6:	f005 fdff 	bl	bb3c8 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b57ca:	2101      	movs	r1, #1
   b57cc:	2011      	movs	r0, #17
   b57ce:	f005 fdfb 	bl	bb3c8 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b57d2:	2101      	movs	r1, #1
   b57d4:	2010      	movs	r0, #16
   b57d6:	f005 fdf7 	bl	bb3c8 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b57da:	2100      	movs	r1, #0
   b57dc:	2010      	movs	r0, #16
   b57de:	f005 fe04 	bl	bb3ea <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b57e2:	2100      	movs	r1, #0
   b57e4:	2011      	movs	r0, #17
   b57e6:	f005 fe00 	bl	bb3ea <digitalWrite>
    return true;
}
   b57ea:	2001      	movs	r0, #1
   b57ec:	bd08      	pop	{r3, pc}
   b57ee:	bf00      	nop
   b57f0:	000bcaec 	.word	0x000bcaec
   b57f4:	2003e658 	.word	0x2003e658

000b57f8 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b57f8:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b57fa:	4918      	ldr	r1, [pc, #96]	; (b585c <_Z18initializePowerCfgv+0x64>)
   b57fc:	4818      	ldr	r0, [pc, #96]	; (b5860 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b57fe:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b5800:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b5802:	f7fe fd05 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b5806:	4622      	mov	r2, r4
   b5808:	2100      	movs	r1, #0
   b580a:	4668      	mov	r0, sp
   b580c:	f006 fc1c 	bl	bc048 <memset>
   b5810:	4622      	mov	r2, r4
   b5812:	2100      	movs	r1, #0
   b5814:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5818:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b581c:	f006 fc14 	bl	bc048 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b5820:	2100      	movs	r1, #0
   b5822:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5826:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b582a:	f002 ff83 	bl	b8734 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b582e:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b5832:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5836:	4b0b      	ldr	r3, [pc, #44]	; (b5864 <_Z18initializePowerCfgv+0x6c>)
   b5838:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b583a:	f241 0370 	movw	r3, #4208	; 0x1070
   b583e:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b5842:	9b00      	ldr	r3, [sp, #0]
   b5844:	2100      	movs	r1, #0
   b5846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b584a:	4668      	mov	r0, sp
   b584c:	9300      	str	r3, [sp, #0]
   b584e:	f002 ff71 	bl	b8734 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b5852:	3800      	subs	r0, #0
   b5854:	bf18      	it	ne
   b5856:	2001      	movne	r0, #1
   b5858:	b010      	add	sp, #64	; 0x40
   b585a:	bd10      	pop	{r4, pc}
   b585c:	000bcb05 	.word	0x000bcb05
   b5860:	2003e658 	.word	0x2003e658
   b5864:	03840384 	.word	0x03840384

000b5868 <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b5868:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b586a:	4905      	ldr	r1, [pc, #20]	; (b5880 <_Z20setNodeConfigurationv+0x18>)
   b586c:	4805      	ldr	r0, [pc, #20]	; (b5884 <_Z20setNodeConfigurationv+0x1c>)
   b586e:	f7fe fccf 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b5872:	f7ff fd63 	bl	b533c <_ZN13sysStatusData8instanceEv>
  // sysStatus.set_deviceID(32148);
  // sysStatus.set_structuresVersion(14);
  // sysStatus.set_nodeNumber(11);

  // sysStatus.flush(true);
   b5876:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b587a:	2101      	movs	r1, #1
   b587c:	f7ff befe 	b.w	b567c <_ZN13sysStatusData14set_sensorTypeEb>
   b5880:	000bcb2c 	.word	0x000bcb2c
   b5884:	2003e658 	.word	0x2003e658

000b5888 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5888:	4770      	bx	lr

000b588a <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b588a:	6a00      	ldr	r0, [r0, #32]
   b588c:	6803      	ldr	r3, [r0, #0]
   b588e:	68db      	ldr	r3, [r3, #12]
   b5890:	4718      	bx	r3
	...

000b5894 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b5894:	4b0a      	ldr	r3, [pc, #40]	; (b58c0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b5896:	b510      	push	{r4, lr}
   b5898:	4604      	mov	r4, r0
   b589a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b589c:	f003 fec8 	bl	b9630 <_ZN5spark10LogManager8instanceEv>
   b58a0:	4621      	mov	r1, r4
   b58a2:	f004 f900 	bl	b9aa6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b58a6:	f005 fc77 	bl	bb198 <_Z16_fetch_usbserialv>
   b58aa:	f005 fc67 	bl	bb17c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b58ae:	4620      	mov	r0, r4
   b58b0:	4b04      	ldr	r3, [pc, #16]	; (b58c4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b58b2:	f840 3b04 	str.w	r3, [r0], #4
   b58b6:	f003 ff91 	bl	b97dc <_ZN5spark6detail9LogFilterD1Ev>
    }
   b58ba:	4620      	mov	r0, r4
   b58bc:	bd10      	pop	{r4, pc}
   b58be:	bf00      	nop
   b58c0:	000bcb68 	.word	0x000bcb68
   b58c4:	000bcb50 	.word	0x000bcb50

000b58c8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b58c8:	b510      	push	{r4, lr}
   b58ca:	4604      	mov	r4, r0
    }
   b58cc:	f7ff ffe2 	bl	b5894 <_ZN5spark16SerialLogHandlerD1Ev>
   b58d0:	4620      	mov	r0, r4
   b58d2:	2124      	movs	r1, #36	; 0x24
   b58d4:	f7fe fbe3 	bl	b409e <_ZdlPvj>
   b58d8:	4620      	mov	r0, r4
   b58da:	bd10      	pop	{r4, pc}

000b58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b58dc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b58de:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b58e0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b58e2:	b17c      	cbz	r4, b5904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b58e4:	6863      	ldr	r3, [r4, #4]
   b58e6:	3b01      	subs	r3, #1
   b58e8:	6063      	str	r3, [r4, #4]
   b58ea:	b95b      	cbnz	r3, b5904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b58ec:	6823      	ldr	r3, [r4, #0]
   b58ee:	4620      	mov	r0, r4
   b58f0:	689b      	ldr	r3, [r3, #8]
   b58f2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b58f4:	68a3      	ldr	r3, [r4, #8]
   b58f6:	3b01      	subs	r3, #1
   b58f8:	60a3      	str	r3, [r4, #8]
   b58fa:	b91b      	cbnz	r3, b5904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b58fc:	6823      	ldr	r3, [r4, #0]
   b58fe:	4620      	mov	r0, r4
   b5900:	68db      	ldr	r3, [r3, #12]
   b5902:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b5904:	4628      	mov	r0, r5
   b5906:	bd38      	pop	{r3, r4, r5, pc}

000b5908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5908:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b590a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b590e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5910:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5912:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5916:	42ae      	cmp	r6, r5
   b5918:	d004      	beq.n	b5924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b591a:	4628      	mov	r0, r5
   b591c:	f005 f848 	bl	ba9b0 <_ZN6StringD1Ev>
   b5920:	3514      	adds	r5, #20
   b5922:	e7f8      	b.n	b5916 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5924:	6820      	ldr	r0, [r4, #0]
   b5926:	f002 ffbb 	bl	b88a0 <free>
    AllocatorT::free(data_);
}
   b592a:	4620      	mov	r0, r4
   b592c:	bd70      	pop	{r4, r5, r6, pc}

000b592e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b592e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5932:	4604      	mov	r4, r0
   b5934:	460d      	mov	r5, r1
   b5936:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5938:	d916      	bls.n	b5968 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b593a:	4290      	cmp	r0, r2
   b593c:	d215      	bcs.n	b596a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b593e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5942:	1a75      	subs	r5, r6, r1
   b5944:	f1a1 0714 	sub.w	r7, r1, #20
   b5948:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b594a:	42b7      	cmp	r7, r6
   b594c:	d01c      	beq.n	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b594e:	b12c      	cbz	r4, b595c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5950:	4631      	mov	r1, r6
   b5952:	4620      	mov	r0, r4
   b5954:	f005 f8a8 	bl	baaa8 <_ZN6StringC1EOS_>
   b5958:	7c33      	ldrb	r3, [r6, #16]
   b595a:	7423      	strb	r3, [r4, #16]
   b595c:	4630      	mov	r0, r6
   b595e:	f005 f827 	bl	ba9b0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5962:	3e14      	subs	r6, #20
   b5964:	3c14      	subs	r4, #20
   b5966:	e7f0      	b.n	b594a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5968:	d00e      	beq.n	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b596a:	42b5      	cmp	r5, r6
   b596c:	d00c      	beq.n	b5988 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b596e:	b12c      	cbz	r4, b597c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5970:	4629      	mov	r1, r5
   b5972:	4620      	mov	r0, r4
   b5974:	f005 f898 	bl	baaa8 <_ZN6StringC1EOS_>
   b5978:	7c2b      	ldrb	r3, [r5, #16]
   b597a:	7423      	strb	r3, [r4, #16]
   b597c:	4628      	mov	r0, r5
   b597e:	f005 f817 	bl	ba9b0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5982:	3514      	adds	r5, #20
   b5984:	3414      	adds	r4, #20
   b5986:	e7f0      	b.n	b596a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b598a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b598a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b598e:	2300      	movs	r3, #0
   b5990:	e9c0 3300 	strd	r3, r3, [r0]
   b5994:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5996:	684f      	ldr	r7, [r1, #4]
   b5998:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b599a:	4604      	mov	r4, r0
   b599c:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b599e:	dd23      	ble.n	b59e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b59a0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b59a4:	fb08 f007 	mul.w	r0, r8, r7
   b59a8:	f002 ff72 	bl	b8890 <malloc>
            if (!d) {
   b59ac:	4605      	mov	r5, r0
   b59ae:	b1d8      	cbz	r0, b59e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b59b0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b59b4:	fb08 1202 	mla	r2, r8, r2, r1
   b59b8:	f7ff ffb9 	bl	b592e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b59bc:	6820      	ldr	r0, [r4, #0]
   b59be:	f002 ff6f 	bl	b88a0 <free>
        data_ = d;
   b59c2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b59c4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b59c6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b59ca:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b59ce:	45b8      	cmp	r8, r7
   b59d0:	d008      	beq.n	b59e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b59d2:	4639      	mov	r1, r7
   b59d4:	4628      	mov	r0, r5
   b59d6:	f005 f881 	bl	baadc <_ZN6StringC1ERKS_>
   b59da:	7c3b      	ldrb	r3, [r7, #16]
   b59dc:	742b      	strb	r3, [r5, #16]
   b59de:	3714      	adds	r7, #20
   b59e0:	3514      	adds	r5, #20
   b59e2:	e7f4      	b.n	b59ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b59e4:	6873      	ldr	r3, [r6, #4]
   b59e6:	6063      	str	r3, [r4, #4]
}
   b59e8:	4620      	mov	r0, r4
   b59ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b59f0 <_GLOBAL__sub_I_SystemMode>:
   b59f0:	b570      	push	{r4, r5, r6, lr}
   b59f2:	4b27      	ldr	r3, [pc, #156]	; (b5a90 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b59f4:	4a27      	ldr	r2, [pc, #156]	; (b5a94 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b59f6:	2501      	movs	r5, #1
   b59f8:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b59fa:	4b27      	ldr	r3, [pc, #156]	; (b5a98 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b59fc:	2400      	movs	r4, #0
   b59fe:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b5a00:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5a02:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5a06:	2002      	movs	r0, #2
   b5a08:	f002 fe50 	bl	b86ac <set_system_mode>
   b5a0c:	4621      	mov	r1, r4
   b5a0e:	4628      	mov	r0, r5
   b5a10:	f002 fe64 	bl	b86dc <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5a14:	4629      	mov	r1, r5
   b5a16:	2004      	movs	r0, #4
   b5a18:	f002 fc26 	bl	b8268 <HAL_Feature_Set>
        capacity_(0) {
   b5a1c:	e9cd 4400 	strd	r4, r4, [sp]
   b5a20:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5a22:	f005 fbb9 	bl	bb198 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5a26:	4c1d      	ldr	r4, [pc, #116]	; (b5a9c <_GLOBAL__sub_I_SystemMode+0xac>)
   b5a28:	4605      	mov	r5, r0
   b5a2a:	4669      	mov	r1, sp
   b5a2c:	a803      	add	r0, sp, #12
   b5a2e:	f7ff ffac 	bl	b598a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5a32:	4626      	mov	r6, r4
        stream_(&stream) {
   b5a34:	a903      	add	r1, sp, #12
   b5a36:	a806      	add	r0, sp, #24
   b5a38:	f7ff ffa7 	bl	b598a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5a3c:	4b18      	ldr	r3, [pc, #96]	; (b5aa0 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5a3e:	f846 3b04 	str.w	r3, [r6], #4
   b5a42:	a906      	add	r1, sp, #24
   b5a44:	a809      	add	r0, sp, #36	; 0x24
   b5a46:	f7ff ffa0 	bl	b598a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5a4a:	aa09      	add	r2, sp, #36	; 0x24
   b5a4c:	211e      	movs	r1, #30
   b5a4e:	4630      	mov	r0, r6
   b5a50:	f004 f90c 	bl	b9c6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5a54:	a809      	add	r0, sp, #36	; 0x24
   b5a56:	f7ff ff57 	bl	b5908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5a5a:	a806      	add	r0, sp, #24
   b5a5c:	f7ff ff54 	bl	b5908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a60:	4b10      	ldr	r3, [pc, #64]	; (b5aa4 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b5a62:	6023      	str	r3, [r4, #0]
   b5a64:	6225      	str	r5, [r4, #32]
   b5a66:	a803      	add	r0, sp, #12
   b5a68:	f7ff ff4e 	bl	b5908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a6c:	4b0e      	ldr	r3, [pc, #56]	; (b5aa8 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b5a6e:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5a70:	f005 fb92 	bl	bb198 <_Z16_fetch_usbserialv>
   b5a74:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5a78:	f005 fb7c 	bl	bb174 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5a7c:	f003 fdd8 	bl	b9630 <_ZN5spark10LogManager8instanceEv>
   b5a80:	4621      	mov	r1, r4
   b5a82:	f003 ffc9 	bl	b9a18 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   b5a86:	4668      	mov	r0, sp
   b5a88:	f7ff ff3e 	bl	b5908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a8c:	b00c      	add	sp, #48	; 0x30
   b5a8e:	bd70      	pop	{r4, r5, r6, pc}
   b5a90:	2003e3a4 	.word	0x2003e3a4
   b5a94:	ffff0000 	.word	0xffff0000
   b5a98:	2003e398 	.word	0x2003e398
   b5a9c:	2003e3a8 	.word	0x2003e3a8
   b5aa0:	000bcb50 	.word	0x000bcb50
   b5aa4:	000bd3b4 	.word	0x000bd3b4
   b5aa8:	000bcb68 	.word	0x000bcb68

000b5aac <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b5aac:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5aae:	6803      	ldr	r3, [r0, #0]
   b5ab0:	2b2f      	cmp	r3, #47	; 0x2f
{
   b5ab2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5ab4:	d904      	bls.n	b5ac0 <nrf_gpio_pin_port_decode+0x14>
   b5ab6:	4a07      	ldr	r2, [pc, #28]	; (b5ad4 <nrf_gpio_pin_port_decode+0x28>)
   b5ab8:	4907      	ldr	r1, [pc, #28]	; (b5ad8 <nrf_gpio_pin_port_decode+0x2c>)
   b5aba:	200a      	movs	r0, #10
   b5abc:	f002 fdbc 	bl	b8638 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b5ac0:	6823      	ldr	r3, [r4, #0]
   b5ac2:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5ac4:	bf83      	ittte	hi
   b5ac6:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b5aca:	4804      	ldrhi	r0, [pc, #16]	; (b5adc <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5acc:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b5ace:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b5ad2:	bd10      	pop	{r4, pc}
   b5ad4:	000b8289 	.word	0x000b8289
   b5ad8:	000bcbf1 	.word	0x000bcbf1
   b5adc:	50000300 	.word	0x50000300

000b5ae0 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b5ae0:	ee07 0a90 	vmov	s15, r0
   b5ae4:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5b0c <_Z17tmp36TemperatureCi+0x2c>
   b5ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5aec:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5af0:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5b10 <_Z17tmp36TemperatureCi+0x30>
   b5af4:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5af8:	eddf 7a06 	vldr	s15, [pc, #24]	; b5b14 <_Z17tmp36TemperatureCi+0x34>
   b5afc:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b5b00:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5b04:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5b08:	4770      	bx	lr
   b5b0a:	bf00      	nop
   b5b0c:	454e4000 	.word	0x454e4000
   b5b10:	457ff000 	.word	0x457ff000
   b5b14:	43fa0000 	.word	0x43fa0000

000b5b18 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b5b18:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b5b1a:	2101      	movs	r1, #1
   b5b1c:	a801      	add	r0, sp, #4
   b5b1e:	f004 fc58 	bl	ba3d2 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5b22:	f7ff fc4d 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5b26:	f7ff fcce 	bl	b54c6 <_ZNK17currentStatusData17get_internalTempCEv>
   b5b2a:	f7ff fc49 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5b2e:	f7ff fcca 	bl	b54c6 <_ZNK17currentStatusData17get_internalTempCEv>
   b5b32:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5b34:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5b36:	d90d      	bls.n	b5b54 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5b38:	f004 fcde 	bl	ba4f8 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b5b3c:	f7ff fc40 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5b40:	2101      	movs	r1, #1
   b5b42:	f7ff fcff 	bl	b5544 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b5b46:	2400      	movs	r4, #0
  PMIC pmic(true);
   b5b48:	a801      	add	r0, sp, #4
   b5b4a:	f004 fc51 	bl	ba3f0 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b5b4e:	4620      	mov	r0, r4
   b5b50:	b002      	add	sp, #8
   b5b52:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b5b54:	f004 fcb5 	bl	ba4c2 <_ZN4PMIC14enableChargingEv>
    return true;
   b5b58:	2401      	movs	r4, #1
   b5b5a:	e7f5      	b.n	b5b48 <_Z16isItSafeToChargev+0x30>

000b5b5c <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b5b5c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5b5e:	4d19      	ldr	r5, [pc, #100]	; (b5bc4 <_Z17getSignalStrengthv+0x68>)
   b5b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b5b62:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5b64:	ac0c      	add	r4, sp, #48	; 0x30
   b5b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b6c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5b70:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b5b74:	4914      	ldr	r1, [pc, #80]	; (b5bc8 <_Z17getSignalStrengthv+0x6c>)
   b5b76:	a804      	add	r0, sp, #16
   b5b78:	f002 ff60 	bl	b8a3c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b5b7c:	a804      	add	r0, sp, #16
   b5b7e:	f002 ffa0 	bl	b8ac2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b5b82:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b5b84:	a804      	add	r0, sp, #16
   b5b86:	f002 ffd5 	bl	b8b34 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b5b8a:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b5b8c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b5b90:	f003 f800 	bl	b8b94 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5b94:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b5b96:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5b9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b5b9e:	f005 fe89 	bl	bb8b4 <__aeabi_f2d>
   b5ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5ba6:	4628      	mov	r0, r5
   b5ba8:	f005 fe84 	bl	bb8b4 <__aeabi_f2d>
   b5bac:	e9cd 0100 	strd	r0, r1, [sp]
   b5bb0:	4a06      	ldr	r2, [pc, #24]	; (b5bcc <_Z17getSignalStrengthv+0x70>)
   b5bb2:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b5bb6:	4806      	ldr	r0, [pc, #24]	; (b5bd0 <_Z17getSignalStrengthv+0x74>)
   b5bb8:	2140      	movs	r1, #64	; 0x40
   b5bba:	f002 fe89 	bl	b88d0 <snprintf>
}
   b5bbe:	b017      	add	sp, #92	; 0x5c
   b5bc0:	bd30      	pop	{r4, r5, pc}
   b5bc2:	bf00      	nop
   b5bc4:	000bcc78 	.word	0x000bcc78
   b5bc8:	2003e614 	.word	0x2003e614
   b5bcc:	000bcc15 	.word	0x000bcc15
   b5bd0:	2003de84 	.word	0x2003de84

000b5bd4 <_Z11recordCountv>:


bool recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b5bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5bd6:	4e4f      	ldr	r6, [pc, #316]	; (b5d14 <_Z11recordCountv+0x140>)
   b5bd8:	4c4f      	ldr	r4, [pc, #316]	; (b5d18 <_Z11recordCountv+0x144>)
   b5bda:	7833      	ldrb	r3, [r6, #0]
   b5bdc:	f3bf 8f5b 	dmb	ish
   b5be0:	f013 0f01 	tst.w	r3, #1
   b5be4:	b085      	sub	sp, #20
   b5be6:	d109      	bne.n	b5bfc <_Z11recordCountv+0x28>
   b5be8:	4630      	mov	r0, r6
   b5bea:	f7fe fa67 	bl	b40bc <__cxa_guard_acquire>
   b5bee:	b128      	cbz	r0, b5bfc <_Z11recordCountv+0x28>
   b5bf0:	f002 fb7a 	bl	b82e8 <HAL_Pin_Map>
   b5bf4:	6020      	str	r0, [r4, #0]
   b5bf6:	4630      	mov	r0, r6
   b5bf8:	f7fe fa65 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5bfc:	4b47      	ldr	r3, [pc, #284]	; (b5d1c <_Z11recordCountv+0x148>)
   b5bfe:	881d      	ldrh	r5, [r3, #0]
   b5c00:	6823      	ldr	r3, [r4, #0]
   b5c02:	012d      	lsls	r5, r5, #4
   b5c04:	5d5b      	ldrb	r3, [r3, r5]
   b5c06:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5c08:	7833      	ldrb	r3, [r6, #0]
   b5c0a:	f3bf 8f5b 	dmb	ish
   b5c0e:	07d9      	lsls	r1, r3, #31
   b5c10:	d409      	bmi.n	b5c26 <_Z11recordCountv+0x52>
   b5c12:	4840      	ldr	r0, [pc, #256]	; (b5d14 <_Z11recordCountv+0x140>)
   b5c14:	f7fe fa52 	bl	b40bc <__cxa_guard_acquire>
   b5c18:	b128      	cbz	r0, b5c26 <_Z11recordCountv+0x52>
   b5c1a:	f002 fb65 	bl	b82e8 <HAL_Pin_Map>
   b5c1e:	6020      	str	r0, [r4, #0]
   b5c20:	483c      	ldr	r0, [pc, #240]	; (b5d14 <_Z11recordCountv+0x140>)
   b5c22:	f7fe fa50 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5c26:	6823      	ldr	r3, [r4, #0]
   b5c28:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5c2a:	a803      	add	r0, sp, #12
   b5c2c:	785b      	ldrb	r3, [r3, #1]
   b5c2e:	f003 031f 	and.w	r3, r3, #31
   b5c32:	433b      	orrs	r3, r7
   b5c34:	9303      	str	r3, [sp, #12]
   b5c36:	f7ff ff39 	bl	b5aac <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b5c3a:	9a03      	ldr	r2, [sp, #12]
   b5c3c:	2301      	movs	r3, #1
   b5c3e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b5c40:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b5c44:	f7ff fbbc 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5c48:	4607      	mov	r7, r0
   b5c4a:	f005 f9be 	bl	bafca <_ZN9TimeClass3nowEv>
   b5c4e:	4602      	mov	r2, r0
   b5c50:	17c3      	asrs	r3, r0, #31
   b5c52:	4638      	mov	r0, r7
   b5c54:	f7ff fd5d 	bl	b5712 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b5c58:	f7ff fbb2 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5c5c:	4607      	mov	r7, r0
   b5c5e:	f7ff fbaf 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5c62:	f7ff fc97 	bl	b5594 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5c66:	3001      	adds	r0, #1
   b5c68:	b281      	uxth	r1, r0
   b5c6a:	4638      	mov	r0, r7
   b5c6c:	f7ff fcc0 	bl	b55f0 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b5c70:	f7ff fba6 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5c74:	4607      	mov	r7, r0
   b5c76:	f7ff fba3 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5c7a:	f7ff fc90 	bl	b559e <_ZNK17currentStatusData14get_dailyCountEv>
   b5c7e:	3001      	adds	r0, #1
   b5c80:	b281      	uxth	r1, r0
   b5c82:	4638      	mov	r0, r7
   b5c84:	f7ff fcba 	bl	b55fc <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b5c88:	f7ff fb9a 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5c8c:	f7ff fc82 	bl	b5594 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5c90:	9001      	str	r0, [sp, #4]
   b5c92:	f7ff fb95 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5c96:	f7ff fc82 	bl	b559e <_ZNK17currentStatusData14get_dailyCountEv>
   b5c9a:	9a01      	ldr	r2, [sp, #4]
   b5c9c:	4920      	ldr	r1, [pc, #128]	; (b5d20 <_Z11recordCountv+0x14c>)
   b5c9e:	4603      	mov	r3, r0
   b5ca0:	4820      	ldr	r0, [pc, #128]	; (b5d24 <_Z11recordCountv+0x150>)
   b5ca2:	f7fe fab5 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b5ca6:	20c8      	movs	r0, #200	; 0xc8
   b5ca8:	f002 fe62 	bl	b8970 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5cac:	7833      	ldrb	r3, [r6, #0]
   b5cae:	f3bf 8f5b 	dmb	ish
   b5cb2:	07da      	lsls	r2, r3, #31
   b5cb4:	d409      	bmi.n	b5cca <_Z11recordCountv+0xf6>
   b5cb6:	4817      	ldr	r0, [pc, #92]	; (b5d14 <_Z11recordCountv+0x140>)
   b5cb8:	f7fe fa00 	bl	b40bc <__cxa_guard_acquire>
   b5cbc:	b128      	cbz	r0, b5cca <_Z11recordCountv+0xf6>
   b5cbe:	f002 fb13 	bl	b82e8 <HAL_Pin_Map>
   b5cc2:	6020      	str	r0, [r4, #0]
   b5cc4:	4813      	ldr	r0, [pc, #76]	; (b5d14 <_Z11recordCountv+0x140>)
   b5cc6:	f7fe f9fe 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5cca:	6823      	ldr	r3, [r4, #0]
   b5ccc:	5d5b      	ldrb	r3, [r3, r5]
   b5cce:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5cd0:	7833      	ldrb	r3, [r6, #0]
   b5cd2:	f3bf 8f5b 	dmb	ish
   b5cd6:	07db      	lsls	r3, r3, #31
   b5cd8:	d409      	bmi.n	b5cee <_Z11recordCountv+0x11a>
   b5cda:	480e      	ldr	r0, [pc, #56]	; (b5d14 <_Z11recordCountv+0x140>)
   b5cdc:	f7fe f9ee 	bl	b40bc <__cxa_guard_acquire>
   b5ce0:	b128      	cbz	r0, b5cee <_Z11recordCountv+0x11a>
   b5ce2:	f002 fb01 	bl	b82e8 <HAL_Pin_Map>
   b5ce6:	6020      	str	r0, [r4, #0]
   b5ce8:	480a      	ldr	r0, [pc, #40]	; (b5d14 <_Z11recordCountv+0x140>)
   b5cea:	f7fe f9ec 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5cee:	6823      	ldr	r3, [r4, #0]
   b5cf0:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5cf2:	a803      	add	r0, sp, #12
   b5cf4:	786b      	ldrb	r3, [r5, #1]
   b5cf6:	f003 031f 	and.w	r3, r3, #31
   b5cfa:	433b      	orrs	r3, r7
   b5cfc:	9303      	str	r3, [sp, #12]
   b5cfe:	f7ff fed5 	bl	b5aac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b5d02:	9b03      	ldr	r3, [sp, #12]
   b5d04:	2201      	movs	r2, #1
   b5d06:	fa02 f303 	lsl.w	r3, r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b5d0a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);

  return true;
   b5d0e:	4610      	mov	r0, r2
   b5d10:	b005      	add	sp, #20
   b5d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5d14:	2003e3cc 	.word	0x2003e3cc
   b5d18:	2003e3d0 	.word	0x2003e3d0
   b5d1c:	000bcb20 	.word	0x000bcb20
   b5d20:	000bcc2e 	.word	0x000bcc2e
   b5d24:	2003e658 	.word	0x2003e658

000b5d28 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b5d28:	b530      	push	{r4, r5, lr}
   b5d2a:	b085      	sub	sp, #20
   b5d2c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b5d2e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5d30:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b5d32:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b5d34:	f002 fca8 	bl	b8688 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5d38:	b990      	cbnz	r0, b5d60 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b5d3a:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b5d3c:	b10c      	cbz	r4, b5d42 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b5d3e:	6923      	ldr	r3, [r4, #16]
   b5d40:	b923      	cbnz	r3, b5d4c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b5d42:	4a08      	ldr	r2, [pc, #32]	; (b5d64 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b5d44:	4908      	ldr	r1, [pc, #32]	; (b5d68 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b5d46:	200a      	movs	r0, #10
   b5d48:	f002 fc76 	bl	b8638 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5d4c:	230c      	movs	r3, #12
   b5d4e:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b5d52:	2304      	movs	r3, #4
   b5d54:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5d56:	aa01      	add	r2, sp, #4
   b5d58:	6923      	ldr	r3, [r4, #16]
   b5d5a:	2101      	movs	r1, #1
   b5d5c:	4620      	mov	r0, r4
   b5d5e:	4798      	blx	r3
}
   b5d60:	b005      	add	sp, #20
   b5d62:	bd30      	pop	{r4, r5, pc}
   b5d64:	000b8289 	.word	0x000b8289
   b5d68:	000bcc4b 	.word	0x000bcc4b

000b5d6c <_Z12batteryStatev>:
bool batteryState() {
   b5d6c:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b5d6e:	f7ff fb27 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b5d72:	a901      	add	r1, sp, #4
   b5d74:	4604      	mov	r4, r0
   b5d76:	2007      	movs	r0, #7
   b5d78:	f7ff ffd6 	bl	b5d28 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b5d7c:	1e01      	subs	r1, r0, #0
        return val;
   b5d7e:	bfa8      	it	ge
   b5d80:	9901      	ldrge	r1, [sp, #4]
   b5d82:	4620      	mov	r0, r4
   b5d84:	b2c9      	uxtb	r1, r1
   b5d86:	f7ff fbdd 	bl	b5544 <_ZN17currentStatusData16set_batteryStateEh>
  if (sysStatus.get_lowPowerMode()) {                                        // Need to take these steps if we are sleeping
   b5d8a:	f7ff fad7 	bl	b533c <_ZN13sysStatusData8instanceEv>
   b5d8e:	f7ff fc4d 	bl	b562c <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5d92:	b130      	cbz	r0, b5da2 <_Z12batteryStatev+0x36>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b5d94:	4817      	ldr	r0, [pc, #92]	; (b5df4 <_Z12batteryStatev+0x88>)
   b5d96:	f002 ffc7 	bl	b8d28 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b5d9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5d9e:	f002 fde7 	bl	b8970 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b5da2:	f7ff fb0d 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5da6:	a901      	add	r1, sp, #4
   b5da8:	4604      	mov	r4, r0
   b5daa:	2003      	movs	r0, #3
   b5dac:	f7ff ffbc 	bl	b5d28 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b5db0:	b9e8      	cbnz	r0, b5dee <_Z12batteryStatev+0x82>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b5db2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b5db6:	ee07 3a90 	vmov	s15, r3
   b5dba:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b5dbe:	ee17 0a90 	vmov	r0, s15
   b5dc2:	f005 fd77 	bl	bb8b4 <__aeabi_f2d>
   b5dc6:	ec41 0b10 	vmov	d0, r0, r1
   b5dca:	4620      	mov	r0, r4
   b5dcc:	f7ff fb3c 	bl	b5448 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b5dd0:	f7ff faf6 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5dd4:	f7ff fb18 	bl	b5408 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5dd8:	4b07      	ldr	r3, [pc, #28]	; (b5df8 <_Z12batteryStatev+0x8c>)
   b5dda:	ec51 0b10 	vmov	r0, r1, d0
   b5dde:	2200      	movs	r2, #0
   b5de0:	f006 f850 	bl	bbe84 <__aeabi_dcmpgt>
}
   b5de4:	3800      	subs	r0, #0
   b5de6:	bf18      	it	ne
   b5de8:	2001      	movne	r0, #1
   b5dea:	b002      	add	sp, #8
   b5dec:	bd10      	pop	{r4, pc}
            return -1.0f;
   b5dee:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5df2:	e7e4      	b.n	b5dbe <_Z12batteryStatev+0x52>
   b5df4:	2003e3d4 	.word	0x2003e3d4
   b5df8:	404e0000 	.word	0x404e0000

000b5dfc <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b5dfc:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b5dfe:	f7ff fadf 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5e02:	4b11      	ldr	r3, [pc, #68]	; (b5e48 <_Z16takeMeasurementsv+0x4c>)
   b5e04:	4604      	mov	r4, r0
   b5e06:	8818      	ldrh	r0, [r3, #0]
   b5e08:	f005 fb1b 	bl	bb442 <analogRead>
   b5e0c:	f7ff fe68 	bl	b5ae0 <_Z17tmp36TemperatureCi>
   b5e10:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b5e14:	4620      	mov	r0, r4
   b5e16:	edcd 7a01 	vstr	s15, [sp, #4]
   b5e1a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b5e1e:	f7ff fb8b 	bl	b5538 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b5e22:	f7ff facd 	bl	b53c0 <_ZN17currentStatusData8instanceEv>
   b5e26:	f7ff fb4e 	bl	b54c6 <_ZNK17currentStatusData17get_internalTempCEv>
   b5e2a:	4a08      	ldr	r2, [pc, #32]	; (b5e4c <_Z16takeMeasurementsv+0x50>)
   b5e2c:	4603      	mov	r3, r0
   b5e2e:	2110      	movs	r1, #16
   b5e30:	4807      	ldr	r0, [pc, #28]	; (b5e50 <_Z16takeMeasurementsv+0x54>)
   b5e32:	f002 fd4d 	bl	b88d0 <snprintf>
    batteryState();
   b5e36:	f7ff ff99 	bl	b5d6c <_Z12batteryStatev>
    isItSafeToCharge();
   b5e3a:	f7ff fe6d 	bl	b5b18 <_Z16isItSafeToChargev>
    getSignalStrength();
   b5e3e:	f7ff fe8d 	bl	b5b5c <_Z17getSignalStrengthv>
}
   b5e42:	2001      	movs	r0, #1
   b5e44:	b002      	add	sp, #8
   b5e46:	bd10      	pop	{r4, pc}
   b5e48:	000bcb2a 	.word	0x000bcb2a
   b5e4c:	000bcc71 	.word	0x000bcc71
   b5e50:	2003de74 	.word	0x2003de74

000b5e54 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b5e54:	4801      	ldr	r0, [pc, #4]	; (b5e5c <_GLOBAL__sub_I_batteryContext+0x8>)
   b5e56:	2100      	movs	r1, #0
   b5e58:	f002 bf22 	b.w	b8ca0 <_ZN9FuelGaugeC1Eb>
   b5e5c:	2003e3d4 	.word	0x2003e3d4

000b5e60 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b5e60:	4770      	bx	lr

000b5e62 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b5e62:	b510      	push	{r4, lr}
}
   b5e64:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b5e66:	4604      	mov	r4, r0
}
   b5e68:	f7fe f919 	bl	b409e <_ZdlPvj>
   b5e6c:	4620      	mov	r0, r4
   b5e6e:	bd10      	pop	{r4, pc}

000b5e70 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b5e70:	b510      	push	{r4, lr}
   b5e72:	4604      	mov	r4, r0
   b5e74:	b08a      	sub	sp, #40	; 0x28
   b5e76:	4608      	mov	r0, r1
    attr.flags = 0;
   b5e78:	f04f 0c20 	mov.w	ip, #32
   b5e7c:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5e7e:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b5e82:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5e86:	460b      	mov	r3, r1
   b5e88:	aa02      	add	r2, sp, #8
   b5e8a:	6821      	ldr	r1, [r4, #0]
   b5e8c:	f002 fbe4 	bl	b8658 <log_message_v>
}
   b5e90:	b00a      	add	sp, #40	; 0x28
   b5e92:	bd10      	pop	{r4, pc}

000b5e94 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b5e94:	b40e      	push	{r1, r2, r3}
   b5e96:	b503      	push	{r0, r1, lr}
   b5e98:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b5e9a:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b5e9c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5ea0:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b5ea2:	f7ff ffe5 	bl	b5e70 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5ea6:	b002      	add	sp, #8
   b5ea8:	f85d eb04 	ldr.w	lr, [sp], #4
   b5eac:	b003      	add	sp, #12
   b5eae:	4770      	bx	lr

000b5eb0 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5eb0:	b40e      	push	{r1, r2, r3}
   b5eb2:	b503      	push	{r0, r1, lr}
   b5eb4:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b5eb6:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5eb8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5ebc:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b5ebe:	f7ff ffd7 	bl	b5e70 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5ec2:	b002      	add	sp, #8
   b5ec4:	f85d eb04 	ldr.w	lr, [sp], #4
   b5ec8:	b003      	add	sp, #12
   b5eca:	4770      	bx	lr

000b5ecc <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5ecc:	b510      	push	{r4, lr}
   b5ece:	7202      	strb	r2, [r0, #8]
   b5ed0:	22ff      	movs	r2, #255	; 0xff
   b5ed2:	8142      	strh	r2, [r0, #10]
   b5ed4:	2200      	movs	r2, #0
   b5ed6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b5eda:	6142      	str	r2, [r0, #20]
   b5edc:	7602      	strb	r2, [r0, #24]
   b5ede:	61c2      	str	r2, [r0, #28]
    instance = this;
   b5ee0:	4a02      	ldr	r2, [pc, #8]	; (b5eec <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5ee2:	4c03      	ldr	r4, [pc, #12]	; (b5ef0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b5ee4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5ee6:	e9c0 4100 	strd	r4, r1, [r0]
}
   b5eea:	bd10      	pop	{r4, pc}
   b5eec:	2003e3e0 	.word	0x2003e3e0
   b5ef0:	000bcef0 	.word	0x000bcef0

000b5ef4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b5ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ef8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b5efc:	4604      	mov	r4, r0
   b5efe:	4689      	mov	r9, r1
   b5f00:	4616      	mov	r6, r2
   b5f02:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b5f04:	f1b8 0f00 	cmp.w	r8, #0
   b5f08:	d002      	beq.n	b5f10 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b5f0a:	6840      	ldr	r0, [r0, #4]
   b5f0c:	f002 ffa6 	bl	b8e5c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5f10:	7a21      	ldrb	r1, [r4, #8]
   b5f12:	6860      	ldr	r0, [r4, #4]
   b5f14:	f002 ff7f 	bl	b8e16 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b5f18:	6860      	ldr	r0, [r4, #4]
   b5f1a:	6803      	ldr	r3, [r0, #0]
   b5f1c:	4649      	mov	r1, r9
   b5f1e:	689b      	ldr	r3, [r3, #8]
   b5f20:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b5f22:	6860      	ldr	r0, [r4, #4]
   b5f24:	2100      	movs	r1, #0
   b5f26:	f002 ff95 	bl	b8e54 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b5f2a:	4605      	mov	r5, r0
   b5f2c:	bb00      	cbnz	r0, b5f70 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5f2e:	2301      	movs	r3, #1
   b5f30:	7a21      	ldrb	r1, [r4, #8]
   b5f32:	6860      	ldr	r0, [r4, #4]
   b5f34:	463a      	mov	r2, r7
   b5f36:	f002 ff5c 	bl	b8df2 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b5f3a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5f3c:	4603      	mov	r3, r0
        if (count == num) {
   b5f3e:	d109      	bne.n	b5f54 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b5f40:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b5f42:	42be      	cmp	r6, r7
   b5f44:	d01c      	beq.n	b5f80 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b5f46:	6860      	ldr	r0, [r4, #4]
   b5f48:	6803      	ldr	r3, [r0, #0]
   b5f4a:	695b      	ldr	r3, [r3, #20]
   b5f4c:	4798      	blx	r3
   b5f4e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b5f52:	e7f6      	b.n	b5f42 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b5f54:	490b      	ldr	r1, [pc, #44]	; (b5f84 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b5f56:	480c      	ldr	r0, [pc, #48]	; (b5f88 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5f58:	464a      	mov	r2, r9
   b5f5a:	f7ff ff9b 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b5f5e:	f1b8 0f00 	cmp.w	r8, #0
   b5f62:	d002      	beq.n	b5f6a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b5f64:	6860      	ldr	r0, [r4, #4]
   b5f66:	f002 ff82 	bl	b8e6e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b5f6a:	4628      	mov	r0, r5
   b5f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b5f70:	4603      	mov	r3, r0
   b5f72:	4906      	ldr	r1, [pc, #24]	; (b5f8c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b5f74:	4804      	ldr	r0, [pc, #16]	; (b5f88 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5f76:	464a      	mov	r2, r9
   b5f78:	f7ff ff8c 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b5f7c:	2500      	movs	r5, #0
   b5f7e:	e7ee      	b.n	b5f5e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b5f80:	2501      	movs	r5, #1
   b5f82:	e7ec      	b.n	b5f5e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b5f84:	000bcca0 	.word	0x000bcca0
   b5f88:	2003e3dc 	.word	0x2003e3dc
   b5f8c:	000bccc5 	.word	0x000bccc5

000b5f90 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b5f90:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b5f92:	9300      	str	r3, [sp, #0]
   b5f94:	2301      	movs	r3, #1
   b5f96:	f7ff ffad 	bl	b5ef4 <_ZN6AB180513readRegistersEhPhjb>
}
   b5f9a:	b003      	add	sp, #12
   b5f9c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5fa0 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b5fa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b5fa2:	8943      	ldrh	r3, [r0, #10]
   b5fa4:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b5fa6:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b5fa8:	d010      	beq.n	b5fcc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5faa:	4e19      	ldr	r6, [pc, #100]	; (b6010 <_ZN6AB180510detectChipEv+0x70>)
   b5fac:	4d19      	ldr	r5, [pc, #100]	; (b6014 <_ZN6AB180510detectChipEv+0x74>)
   b5fae:	f002 f973 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b5fb2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b5fb6:	d209      	bcs.n	b5fcc <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b5fb8:	8960      	ldrh	r0, [r4, #10]
   b5fba:	f005 fa2f 	bl	bb41c <digitalRead>
   b5fbe:	2801      	cmp	r0, #1
   b5fc0:	d004      	beq.n	b5fcc <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5fc2:	4631      	mov	r1, r6
   b5fc4:	4628      	mov	r0, r5
   b5fc6:	f7fe f923 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b5fca:	e7f0      	b.n	b5fae <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b5fcc:	2301      	movs	r3, #1
   b5fce:	f10d 0207 	add.w	r2, sp, #7
   b5fd2:	2128      	movs	r1, #40	; 0x28
   b5fd4:	4620      	mov	r0, r4
   b5fd6:	f7ff ffdb 	bl	b5f90 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b5fda:	b930      	cbnz	r0, b5fea <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b5fdc:	480d      	ldr	r0, [pc, #52]	; (b6014 <_ZN6AB180510detectChipEv+0x74>)
   b5fde:	490e      	ldr	r1, [pc, #56]	; (b6018 <_ZN6AB180510detectChipEv+0x78>)
   b5fe0:	f7fe f916 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b5fe4:	2000      	movs	r0, #0
}
   b5fe6:	b002      	add	sp, #8
   b5fe8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b5fea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5fee:	2b18      	cmp	r3, #24
   b5ff0:	d1f4      	bne.n	b5fdc <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b5ff2:	2301      	movs	r3, #1
   b5ff4:	f10d 0207 	add.w	r2, sp, #7
   b5ff8:	2129      	movs	r1, #41	; 0x29
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	f7ff ffc8 	bl	b5f90 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6000:	2800      	cmp	r0, #0
   b6002:	d0eb      	beq.n	b5fdc <_ZN6AB180510detectChipEv+0x3c>
   b6004:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6008:	2b05      	cmp	r3, #5
   b600a:	d1e7      	bne.n	b5fdc <_ZN6AB180510detectChipEv+0x3c>
   b600c:	e7eb      	b.n	b5fe6 <_ZN6AB180510detectChipEv+0x46>
   b600e:	bf00      	nop
   b6010:	000bcce9 	.word	0x000bcce9
   b6014:	2003e3dc 	.word	0x2003e3dc
   b6018:	000bccfe 	.word	0x000bccfe

000b601c <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b601c:	b507      	push	{r0, r1, r2, lr}
   b601e:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6020:	2200      	movs	r2, #0
   b6022:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6026:	f10d 0207 	add.w	r2, sp, #7
   b602a:	f7ff ffb1 	bl	b5f90 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b602e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6032:	b003      	add	sp, #12
   b6034:	f85d fb04 	ldr.w	pc, [sp], #4

000b6038 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b603c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6040:	4604      	mov	r4, r0
   b6042:	460f      	mov	r7, r1
   b6044:	4615      	mov	r5, r2
   b6046:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6048:	f1b8 0f00 	cmp.w	r8, #0
   b604c:	d002      	beq.n	b6054 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b604e:	6840      	ldr	r0, [r0, #4]
   b6050:	f002 ff04 	bl	b8e5c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6054:	7a21      	ldrb	r1, [r4, #8]
   b6056:	6860      	ldr	r0, [r4, #4]
   b6058:	f002 fedd 	bl	b8e16 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b605c:	6860      	ldr	r0, [r4, #4]
   b605e:	6803      	ldr	r3, [r0, #0]
   b6060:	4639      	mov	r1, r7
   b6062:	689b      	ldr	r3, [r3, #8]
   b6064:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6066:	442e      	add	r6, r5
   b6068:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b606a:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b606c:	d005      	beq.n	b607a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b606e:	6803      	ldr	r3, [r0, #0]
   b6070:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6074:	689b      	ldr	r3, [r3, #8]
   b6076:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6078:	e7f6      	b.n	b6068 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b607a:	2101      	movs	r1, #1
   b607c:	f002 feea 	bl	b8e54 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6080:	4603      	mov	r3, r0
   b6082:	b170      	cbz	r0, b60a2 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6084:	4908      	ldr	r1, [pc, #32]	; (b60a8 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6086:	4809      	ldr	r0, [pc, #36]	; (b60ac <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6088:	463a      	mov	r2, r7
   b608a:	f7ff ff03 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b608e:	2500      	movs	r5, #0
    }

    if (lock) {
   b6090:	f1b8 0f00 	cmp.w	r8, #0
   b6094:	d002      	beq.n	b609c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6096:	6860      	ldr	r0, [r4, #4]
   b6098:	f002 fee9 	bl	b8e6e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b609c:	4628      	mov	r0, r5
   b609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b60a2:	2501      	movs	r5, #1
   b60a4:	e7f4      	b.n	b6090 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b60a6:	bf00      	nop
   b60a8:	000bcd0b 	.word	0x000bcd0b
   b60ac:	2003e3dc 	.word	0x2003e3dc

000b60b0 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b60b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b60b2:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b60b6:	9300      	str	r3, [sp, #0]
   b60b8:	f10d 020f 	add.w	r2, sp, #15
   b60bc:	2301      	movs	r3, #1
   b60be:	f7ff ffbb 	bl	b6038 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b60c2:	b005      	add	sp, #20
   b60c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b60c8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b60c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b60ca:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b60cc:	460c      	mov	r4, r1
   b60ce:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b60d0:	491a      	ldr	r1, [pc, #104]	; (b613c <_ZN6AB18056setWDTEi+0x74>)
   b60d2:	481b      	ldr	r0, [pc, #108]	; (b6140 <_ZN6AB18056setWDTEi+0x78>)
   b60d4:	f7fe f89c 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b60d8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b60da:	bfb8      	it	lt
   b60dc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b60de:	b97c      	cbnz	r4, b6100 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b60e0:	2301      	movs	r3, #1
   b60e2:	4622      	mov	r2, r4
   b60e4:	211b      	movs	r1, #27
   b60e6:	4628      	mov	r0, r5
   b60e8:	f7ff ffe2 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b60ec:	4915      	ldr	r1, [pc, #84]	; (b6144 <_ZN6AB18056setWDTEi+0x7c>)
   b60ee:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b60f0:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b60f2:	4813      	ldr	r0, [pc, #76]	; (b6140 <_ZN6AB18056setWDTEi+0x78>)
   b60f4:	f7ff fedc 	bl	b5eb0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b60f8:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b60fa:	616c      	str	r4, [r5, #20]
}
   b60fc:	4630      	mov	r0, r6
   b60fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6100:	2c03      	cmp	r4, #3
   b6102:	dd19      	ble.n	b6138 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6104:	10a7      	asrs	r7, r4, #2
   b6106:	2f1f      	cmp	r7, #31
   b6108:	bfa8      	it	ge
   b610a:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b610c:	00ba      	lsls	r2, r7, #2
   b610e:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6112:	2301      	movs	r3, #1
   b6114:	b2d2      	uxtb	r2, r2
   b6116:	211b      	movs	r1, #27
   b6118:	4628      	mov	r0, r5
   b611a:	f7ff ffc9 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b611e:	463a      	mov	r2, r7
   b6120:	4603      	mov	r3, r0
   b6122:	4909      	ldr	r1, [pc, #36]	; (b6148 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6124:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6126:	4806      	ldr	r0, [pc, #24]	; (b6140 <_ZN6AB18056setWDTEi+0x78>)
   b6128:	f7ff fec2 	bl	b5eb0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b612c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6130:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6132:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6134:	616f      	str	r7, [r5, #20]
   b6136:	e7e1      	b.n	b60fc <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6138:	2701      	movs	r7, #1
   b613a:	e7e7      	b.n	b610c <_ZN6AB18056setWDTEi+0x44>
   b613c:	000bcd30 	.word	0x000bcd30
   b6140:	2003e3dc 	.word	0x2003e3dc
   b6144:	000bcd3a 	.word	0x000bcd3a
   b6148:	000bcd56 	.word	0x000bcd56

000b614c <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b614c:	4b06      	ldr	r3, [pc, #24]	; (b6168 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b614e:	681a      	ldr	r2, [r3, #0]
   b6150:	b14a      	cbz	r2, b6166 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6152:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6156:	430b      	orrs	r3, r1
   b6158:	d105      	bne.n	b6166 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b615a:	68d3      	ldr	r3, [r2, #12]
   b615c:	b11b      	cbz	r3, b6166 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b615e:	2100      	movs	r1, #0
   b6160:	4610      	mov	r0, r2
   b6162:	f7ff bfb1 	b.w	b60c8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6166:	4770      	bx	lr
   b6168:	2003e3e0 	.word	0x2003e3e0

000b616c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b616c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6170:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6174:	4605      	mov	r5, r0
   b6176:	4616      	mov	r6, r2
   b6178:	461f      	mov	r7, r3
    if (lock) {
   b617a:	f1b8 0f00 	cmp.w	r8, #0
   b617e:	d004      	beq.n	b618a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6180:	6840      	ldr	r0, [r0, #4]
   b6182:	9101      	str	r1, [sp, #4]
   b6184:	f002 fe6a 	bl	b8e5c <_ZN7TwoWire4lockEv>
   b6188:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b618a:	9101      	str	r1, [sp, #4]
   b618c:	2300      	movs	r3, #0
   b618e:	f10d 020f 	add.w	r2, sp, #15
   b6192:	4628      	mov	r0, r5
   b6194:	f7ff fefc 	bl	b5f90 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6198:	4604      	mov	r4, r0
   b619a:	b160      	cbz	r0, b61b6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b619c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b61a0:	ea03 0206 	and.w	r2, r3, r6
   b61a4:	433a      	orrs	r2, r7
        if (newValue != value) {
   b61a6:	4293      	cmp	r3, r2
   b61a8:	d005      	beq.n	b61b6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b61aa:	9901      	ldr	r1, [sp, #4]
   b61ac:	2300      	movs	r3, #0
   b61ae:	4628      	mov	r0, r5
   b61b0:	f7ff ff7e 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
   b61b4:	4604      	mov	r4, r0
    if (lock) {
   b61b6:	f1b8 0f00 	cmp.w	r8, #0
   b61ba:	d002      	beq.n	b61c2 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b61bc:	6868      	ldr	r0, [r5, #4]
   b61be:	f002 fe56 	bl	b8e6e <_ZN7TwoWire6unlockEv>
}
   b61c2:	4620      	mov	r0, r4
   b61c4:	b004      	add	sp, #16
   b61c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b61ca <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61ca:	b513      	push	{r0, r1, r4, lr}
   b61cc:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b61ce:	f10d 0207 	add.w	r2, sp, #7
   b61d2:	f7ff fedd 	bl	b5f90 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b61d6:	b128      	cbz	r0, b61e4 <_ZN6AB180510isBitClearEhhb+0x1a>
   b61d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b61dc:	421c      	tst	r4, r3
   b61de:	bf0c      	ite	eq
   b61e0:	2001      	moveq	r0, #1
   b61e2:	2000      	movne	r0, #0
}
   b61e4:	b002      	add	sp, #8
   b61e6:	bd10      	pop	{r4, pc}

000b61e8 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61e8:	b513      	push	{r0, r1, r4, lr}
   b61ea:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b61ec:	f10d 0207 	add.w	r2, sp, #7
   b61f0:	f7ff fece 	bl	b5f90 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b61f4:	b128      	cbz	r0, b6202 <_ZN6AB18058isBitSetEhhb+0x1a>
   b61f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b61fa:	421c      	tst	r4, r3
   b61fc:	bf14      	ite	ne
   b61fe:	2001      	movne	r0, #1
   b6200:	2000      	moveq	r0, #0
}
   b6202:	b002      	add	sp, #8
   b6204:	bd10      	pop	{r4, pc}

000b6206 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6206:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6208:	43d2      	mvns	r2, r2
   b620a:	9300      	str	r3, [sp, #0]
   b620c:	b2d2      	uxtb	r2, r2
   b620e:	2300      	movs	r3, #0
   b6210:	f7ff ffac 	bl	b616c <_ZN6AB180512maskRegisterEhhhb>
}
   b6214:	b003      	add	sp, #12
   b6216:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b621c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b621c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b621e:	2301      	movs	r3, #1
   b6220:	f10d 0207 	add.w	r2, sp, #7
   b6224:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6226:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6228:	f7ff feb2 	bl	b5f90 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b622c:	4605      	mov	r5, r0
   b622e:	b938      	cbnz	r0, b6240 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6230:	491e      	ldr	r1, [pc, #120]	; (b62ac <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6232:	481f      	ldr	r0, [pc, #124]	; (b62b0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6234:	22ad      	movs	r2, #173	; 0xad
   b6236:	f7ff fe2d 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
}
   b623a:	4628      	mov	r0, r5
   b623c:	b003      	add	sp, #12
   b623e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6240:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6244:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6248:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b624c:	d00b      	beq.n	b6266 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b624e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6250:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6252:	210f      	movs	r1, #15
   b6254:	4620      	mov	r0, r4
   b6256:	f7ff ffd6 	bl	b6206 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b625a:	4a16      	ldr	r2, [pc, #88]	; (b62b4 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b625c:	4916      	ldr	r1, [pc, #88]	; (b62b8 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b625e:	4814      	ldr	r0, [pc, #80]	; (b62b0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6260:	f7fd ffd6 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b6264:	e7e9      	b.n	b623a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6266:	2208      	movs	r2, #8
   b6268:	2117      	movs	r1, #23
   b626a:	4620      	mov	r0, r4
   b626c:	f7ff ffbc 	bl	b61e8 <_ZN6AB18058isBitSetEhhb>
   b6270:	b118      	cbz	r0, b627a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6272:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6274:	4a11      	ldr	r2, [pc, #68]	; (b62bc <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6276:	61e3      	str	r3, [r4, #28]
   b6278:	e7f0      	b.n	b625c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b627a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b627e:	071a      	lsls	r2, r3, #28
   b6280:	d509      	bpl.n	b6296 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6282:	2303      	movs	r3, #3
   b6284:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6286:	2208      	movs	r2, #8
   b6288:	2301      	movs	r3, #1
   b628a:	210f      	movs	r1, #15
   b628c:	4620      	mov	r0, r4
   b628e:	f7ff ffba 	bl	b6206 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6292:	4a0b      	ldr	r2, [pc, #44]	; (b62c0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6294:	e7e2      	b.n	b625c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6296:	075b      	lsls	r3, r3, #29
   b6298:	d5cf      	bpl.n	b623a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b629a:	2204      	movs	r2, #4
   b629c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b629e:	2301      	movs	r3, #1
   b62a0:	210f      	movs	r1, #15
   b62a2:	4620      	mov	r0, r4
   b62a4:	f7ff ffaf 	bl	b6206 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b62a8:	4a06      	ldr	r2, [pc, #24]	; (b62c4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b62aa:	e7d7      	b.n	b625c <_ZN6AB180516updateWakeReasonEv+0x40>
   b62ac:	000bcda9 	.word	0x000bcda9
   b62b0:	2003e3dc 	.word	0x2003e3dc
   b62b4:	000bcd7a 	.word	0x000bcd7a
   b62b8:	000bcdc8 	.word	0x000bcdc8
   b62bc:	000bcd83 	.word	0x000bcd83
   b62c0:	000bcd93 	.word	0x000bcd93
   b62c4:	000bcda3 	.word	0x000bcda3

000b62c8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b62c8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b62ca:	9300      	str	r3, [sp, #0]
   b62cc:	4613      	mov	r3, r2
   b62ce:	22ff      	movs	r2, #255	; 0xff
   b62d0:	f7ff ff4c 	bl	b616c <_ZN6AB180512maskRegisterEhhhb>
}
   b62d4:	b003      	add	sp, #12
   b62d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b62dc <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b62dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62de:	460f      	mov	r7, r1
   b62e0:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b62e2:	2301      	movs	r3, #1
   b62e4:	2200      	movs	r2, #0
   b62e6:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b62e8:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b62ea:	f7ff fee1 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b62ee:	4604      	mov	r4, r0
   b62f0:	b938      	cbnz	r0, b6302 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b62f2:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b62f6:	491f      	ldr	r1, [pc, #124]	; (b6374 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b62f8:	481f      	ldr	r0, [pc, #124]	; (b6378 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b62fa:	f7ff fdcb 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
}
   b62fe:	4620      	mov	r0, r4
   b6300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6302:	2301      	movs	r3, #1
   b6304:	2223      	movs	r2, #35	; 0x23
   b6306:	2118      	movs	r1, #24
   b6308:	4628      	mov	r0, r5
   b630a:	f7ff fed1 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b630e:	4604      	mov	r4, r0
   b6310:	b910      	cbnz	r0, b6318 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6312:	f240 229b 	movw	r2, #667	; 0x29b
   b6316:	e7ee      	b.n	b62f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6318:	2fff      	cmp	r7, #255	; 0xff
   b631a:	bfa8      	it	ge
   b631c:	27ff      	movge	r7, #255	; 0xff
   b631e:	2f01      	cmp	r7, #1
   b6320:	bfb8      	it	lt
   b6322:	2701      	movlt	r7, #1
   b6324:	2301      	movs	r3, #1
   b6326:	b2fa      	uxtb	r2, r7
   b6328:	2119      	movs	r1, #25
   b632a:	4628      	mov	r0, r5
   b632c:	f7ff fec0 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6330:	4604      	mov	r4, r0
   b6332:	b910      	cbnz	r0, b633a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6334:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6338:	e7dd      	b.n	b62f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b633a:	2301      	movs	r3, #1
   b633c:	2208      	movs	r2, #8
   b633e:	2112      	movs	r1, #18
   b6340:	4628      	mov	r0, r5
   b6342:	f7ff ffc1 	bl	b62c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6346:	4604      	mov	r4, r0
   b6348:	b910      	cbnz	r0, b6350 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b634a:	f240 22af 	movw	r2, #687	; 0x2af
   b634e:	e7d2      	b.n	b62f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6350:	2e00      	cmp	r6, #0
   b6352:	bf14      	ite	ne
   b6354:	2203      	movne	r2, #3
   b6356:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b6358:	2301      	movs	r3, #1
   b635a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b635e:	2118      	movs	r1, #24
   b6360:	4628      	mov	r0, r5
   b6362:	f7ff fea5 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6366:	4604      	mov	r4, r0
   b6368:	2800      	cmp	r0, #0
   b636a:	d1c8      	bne.n	b62fe <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b636c:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6370:	e7c1      	b.n	b62f6 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6372:	bf00      	nop
   b6374:	000bcdd9 	.word	0x000bcdd9
   b6378:	2003e3dc 	.word	0x2003e3dc

000b637c <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b637c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6380:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6382:	4605      	mov	r5, r0
   b6384:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6386:	484f      	ldr	r0, [pc, #316]	; (b64c4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6388:	494f      	ldr	r1, [pc, #316]	; (b64c8 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b638a:	f7fd ff41 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b638e:	2100      	movs	r1, #0
   b6390:	4628      	mov	r0, r5
   b6392:	f7ff fe99 	bl	b60c8 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6396:	4604      	mov	r4, r0
   b6398:	b948      	cbnz	r0, b63ae <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b639a:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b639e:	494b      	ldr	r1, [pc, #300]	; (b64cc <_ZN6AB180513deepPowerDownEi+0x150>)
   b63a0:	4848      	ldr	r0, [pc, #288]	; (b64c4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b63a2:	f7ff fd77 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
}
   b63a6:	4620      	mov	r0, r4
   b63a8:	b003      	add	sp, #12
   b63aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b63ae:	2301      	movs	r3, #1
   b63b0:	461a      	mov	r2, r3
   b63b2:	2130      	movs	r1, #48	; 0x30
   b63b4:	4628      	mov	r0, r5
   b63b6:	f7ff ff87 	bl	b62c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b63ba:	4604      	mov	r4, r0
   b63bc:	b910      	cbnz	r0, b63c4 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b63be:	f240 2205 	movw	r2, #517	; 0x205
   b63c2:	e7ec      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b63c4:	2210      	movs	r2, #16
   b63c6:	2301      	movs	r3, #1
   b63c8:	4611      	mov	r1, r2
   b63ca:	4628      	mov	r0, r5
   b63cc:	f7ff ff1b 	bl	b6206 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b63d0:	4604      	mov	r4, r0
   b63d2:	b910      	cbnz	r0, b63da <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b63d4:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b63d8:	e7e1      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b63da:	2301      	movs	r3, #1
   b63dc:	2226      	movs	r2, #38	; 0x26
   b63de:	2113      	movs	r1, #19
   b63e0:	4628      	mov	r0, r5
   b63e2:	f7ff fe65 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b63e6:	4604      	mov	r4, r0
   b63e8:	b910      	cbnz	r0, b63f0 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b63ea:	f240 2213 	movw	r2, #531	; 0x213
   b63ee:	e7d6      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b63f0:	2601      	movs	r6, #1
   b63f2:	9600      	str	r6, [sp, #0]
   b63f4:	4633      	mov	r3, r6
   b63f6:	22fc      	movs	r2, #252	; 0xfc
   b63f8:	2111      	movs	r1, #17
   b63fa:	4628      	mov	r0, r5
   b63fc:	f7ff feb6 	bl	b616c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6400:	4604      	mov	r4, r0
   b6402:	b910      	cbnz	r0, b640a <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6404:	f240 221b 	movw	r2, #539	; 0x21b
   b6408:	e7c9      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b640a:	2200      	movs	r2, #0
   b640c:	4639      	mov	r1, r7
   b640e:	4628      	mov	r0, r5
   b6410:	f7ff ff64 	bl	b62dc <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6414:	4604      	mov	r4, r0
   b6416:	b910      	cbnz	r0, b641e <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6418:	f240 2222 	movw	r2, #546	; 0x222
   b641c:	e7bf      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b641e:	9600      	str	r6, [sp, #0]
   b6420:	2302      	movs	r3, #2
   b6422:	2277      	movs	r2, #119	; 0x77
   b6424:	2110      	movs	r1, #16
   b6426:	4628      	mov	r0, r5
   b6428:	f7ff fea0 	bl	b616c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b642c:	4604      	mov	r4, r0
   b642e:	b910      	cbnz	r0, b6436 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6430:	f240 222b 	movw	r2, #555	; 0x22b
   b6434:	e7b3      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6436:	4633      	mov	r3, r6
   b6438:	2204      	movs	r2, #4
   b643a:	211c      	movs	r1, #28
   b643c:	4628      	mov	r0, r5
   b643e:	f7ff ff43 	bl	b62c8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6442:	4604      	mov	r4, r0
   b6444:	b910      	cbnz	r0, b644c <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6446:	f240 2232 	movw	r2, #562	; 0x232
   b644a:	e7a8      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b644c:	9600      	str	r6, [sp, #0]
   b644e:	2318      	movs	r3, #24
   b6450:	22e3      	movs	r2, #227	; 0xe3
   b6452:	2111      	movs	r1, #17
   b6454:	4628      	mov	r0, r5
   b6456:	f7ff fe89 	bl	b616c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b645a:	4604      	mov	r4, r0
   b645c:	b910      	cbnz	r0, b6464 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b645e:	f240 2239 	movw	r2, #569	; 0x239
   b6462:	e79c      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6464:	4633      	mov	r3, r6
   b6466:	22c0      	movs	r2, #192	; 0xc0
   b6468:	2117      	movs	r1, #23
   b646a:	4628      	mov	r0, r5
   b646c:	f7ff fe20 	bl	b60b0 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6470:	4604      	mov	r4, r0
   b6472:	b910      	cbnz	r0, b647a <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6474:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6478:	e791      	b.n	b639e <_ZN6AB180513deepPowerDownEi+0x22>
   b647a:	f001 ff0d 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b647e:	f8df 9054 	ldr.w	r9, [pc, #84]	; b64d4 <_ZN6AB180513deepPowerDownEi+0x158>
   b6482:	f8df 8040 	ldr.w	r8, [pc, #64]	; b64c4 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6486:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b648a:	4606      	mov	r6, r0
   b648c:	434f      	muls	r7, r1
   b648e:	f001 ff03 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
   b6492:	1b80      	subs	r0, r0, r6
   b6494:	42b8      	cmp	r0, r7
   b6496:	d20e      	bcs.n	b64b6 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6498:	2201      	movs	r2, #1
   b649a:	2117      	movs	r1, #23
   b649c:	4628      	mov	r0, r5
   b649e:	f7ff fdbd 	bl	b601c <_ZN6AB180512readRegisterEhb>
   b64a2:	4649      	mov	r1, r9
   b64a4:	4602      	mov	r2, r0
   b64a6:	4640      	mov	r0, r8
   b64a8:	f7fd feb2 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b64ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b64b0:	f002 fa5e 	bl	b8970 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b64b4:	e7eb      	b.n	b648e <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b64b6:	4906      	ldr	r1, [pc, #24]	; (b64d0 <_ZN6AB180513deepPowerDownEi+0x154>)
   b64b8:	4802      	ldr	r0, [pc, #8]	; (b64c4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b64ba:	f7ff fceb 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b64be:	f004 fb98 	bl	babf2 <_ZN11SystemClass5resetEv>
    return true;
   b64c2:	e770      	b.n	b63a6 <_ZN6AB180513deepPowerDownEi+0x2a>
   b64c4:	2003e3dc 	.word	0x2003e3dc
   b64c8:	000bce04 	.word	0x000bce04
   b64cc:	000bcdf9 	.word	0x000bcdf9
   b64d0:	000bce2a 	.word	0x000bce2a
   b64d4:	000bce15 	.word	0x000bce15

000b64d8 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b64d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b64dc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b64e0:	4605      	mov	r5, r0
   b64e2:	460c      	mov	r4, r1
   b64e4:	4691      	mov	r9, r2
   b64e6:	461f      	mov	r7, r3
    if (lock) {
   b64e8:	f1ba 0f00 	cmp.w	sl, #0
   b64ec:	d002      	beq.n	b64f4 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b64ee:	6840      	ldr	r0, [r0, #4]
   b64f0:	f002 fcb4 	bl	b8e5c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b64f4:	b307      	cbz	r7, b6538 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b64f6:	2f20      	cmp	r7, #32
   b64f8:	463e      	mov	r6, r7
   b64fa:	bf28      	it	cs
   b64fc:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b64fe:	2c7f      	cmp	r4, #127	; 0x7f
   b6500:	d826      	bhi.n	b6550 <_ZN6AB18057readRamEjPhjb+0x78>
   b6502:	1933      	adds	r3, r6, r4
   b6504:	2b80      	cmp	r3, #128	; 0x80
   b6506:	d901      	bls.n	b650c <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6508:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b650c:	2301      	movs	r3, #1
   b650e:	2204      	movs	r2, #4
   b6510:	213f      	movs	r1, #63	; 0x3f
   b6512:	4628      	mov	r0, r5
   b6514:	f7ff fe77 	bl	b6206 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6518:	2300      	movs	r3, #0
   b651a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b651e:	9300      	str	r3, [sp, #0]
   b6520:	464a      	mov	r2, r9
   b6522:	4633      	mov	r3, r6
   b6524:	b2c9      	uxtb	r1, r1
   b6526:	4628      	mov	r0, r5
   b6528:	f7ff fce4 	bl	b5ef4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b652c:	4680      	mov	r8, r0
   b652e:	b128      	cbz	r0, b653c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6530:	4434      	add	r4, r6
        dataLen -= count;
   b6532:	1bbf      	subs	r7, r7, r6
        data += count;
   b6534:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6536:	e7dd      	b.n	b64f4 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6538:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b653c:	f1ba 0f00 	cmp.w	sl, #0
   b6540:	d002      	beq.n	b6548 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6542:	6868      	ldr	r0, [r5, #4]
   b6544:	f002 fc93 	bl	b8e6e <_ZN7TwoWire6unlockEv>
}
   b6548:	4640      	mov	r0, r8
   b654a:	b002      	add	sp, #8
   b654c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6550:	2301      	movs	r3, #1
   b6552:	2204      	movs	r2, #4
   b6554:	213f      	movs	r1, #63	; 0x3f
   b6556:	4628      	mov	r0, r5
   b6558:	f7ff feb6 	bl	b62c8 <_ZN6AB180514setRegisterBitEhhb>
   b655c:	e7dc      	b.n	b6518 <_ZN6AB18057readRamEjPhjb+0x40>

000b655e <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b655e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6562:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6566:	4605      	mov	r5, r0
   b6568:	460c      	mov	r4, r1
   b656a:	4691      	mov	r9, r2
   b656c:	461f      	mov	r7, r3
    if (lock) {
   b656e:	f1ba 0f00 	cmp.w	sl, #0
   b6572:	d002      	beq.n	b657a <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6574:	6840      	ldr	r0, [r0, #4]
   b6576:	f002 fc71 	bl	b8e5c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b657a:	b307      	cbz	r7, b65be <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b657c:	2f1f      	cmp	r7, #31
   b657e:	463e      	mov	r6, r7
   b6580:	bf28      	it	cs
   b6582:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6584:	2c7f      	cmp	r4, #127	; 0x7f
   b6586:	d826      	bhi.n	b65d6 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6588:	1933      	adds	r3, r6, r4
   b658a:	2b80      	cmp	r3, #128	; 0x80
   b658c:	d901      	bls.n	b6592 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b658e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6592:	2301      	movs	r3, #1
   b6594:	2204      	movs	r2, #4
   b6596:	213f      	movs	r1, #63	; 0x3f
   b6598:	4628      	mov	r0, r5
   b659a:	f7ff fe34 	bl	b6206 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b659e:	2300      	movs	r3, #0
   b65a0:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b65a4:	9300      	str	r3, [sp, #0]
   b65a6:	464a      	mov	r2, r9
   b65a8:	4633      	mov	r3, r6
   b65aa:	b2c9      	uxtb	r1, r1
   b65ac:	4628      	mov	r0, r5
   b65ae:	f7ff fd43 	bl	b6038 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b65b2:	4680      	mov	r8, r0
   b65b4:	b128      	cbz	r0, b65c2 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b65b6:	4434      	add	r4, r6
        dataLen -= count;
   b65b8:	1bbf      	subs	r7, r7, r6
        data += count;
   b65ba:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b65bc:	e7dd      	b.n	b657a <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b65be:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b65c2:	f1ba 0f00 	cmp.w	sl, #0
   b65c6:	d002      	beq.n	b65ce <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b65c8:	6868      	ldr	r0, [r5, #4]
   b65ca:	f002 fc50 	bl	b8e6e <_ZN7TwoWire6unlockEv>
}
   b65ce:	4640      	mov	r0, r8
   b65d0:	b002      	add	sp, #8
   b65d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b65d6:	2301      	movs	r3, #1
   b65d8:	2204      	movs	r2, #4
   b65da:	213f      	movs	r1, #63	; 0x3f
   b65dc:	4628      	mov	r0, r5
   b65de:	f7ff fe73 	bl	b62c8 <_ZN6AB180514setRegisterBitEhhb>
   b65e2:	e7dc      	b.n	b659e <_ZN6AB18058writeRamEjPKhjb+0x40>

000b65e4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b65e4:	b530      	push	{r4, r5, lr}
   b65e6:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b65e8:	680d      	ldr	r5, [r1, #0]
   b65ea:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b65ee:	9503      	str	r5, [sp, #12]
   b65f0:	684d      	ldr	r5, [r1, #4]
   b65f2:	9502      	str	r5, [sp, #8]
   b65f4:	688d      	ldr	r5, [r1, #8]
   b65f6:	9501      	str	r5, [sp, #4]
   b65f8:	68c9      	ldr	r1, [r1, #12]
   b65fa:	9100      	str	r1, [sp, #0]
   b65fc:	3301      	adds	r3, #1
   b65fe:	4904      	ldr	r1, [pc, #16]	; (b6610 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6600:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6604:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6606:	f004 fa8d 	bl	bab24 <_ZN6String6formatEPKcz>
}
   b660a:	4620      	mov	r0, r4
   b660c:	b005      	add	sp, #20
   b660e:	bd30      	pop	{r4, r5, pc}
   b6610:	000bce3c 	.word	0x000bce3c

000b6614 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6614:	0903      	lsrs	r3, r0, #4
}
   b6616:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6618:	f000 000f 	and.w	r0, r0, #15
}
   b661c:	fb02 0003 	mla	r0, r2, r3, r0
   b6620:	4770      	bx	lr

000b6622 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6622:	b538      	push	{r3, r4, r5, lr}
   b6624:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6626:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6628:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b662a:	f7ff fff3 	bl	b6614 <_ZN6AB180510bcdToValueEh>
   b662e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6630:	7860      	ldrb	r0, [r4, #1]
   b6632:	f7ff ffef 	bl	b6614 <_ZN6AB180510bcdToValueEh>
   b6636:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6638:	78a0      	ldrb	r0, [r4, #2]
   b663a:	f7ff ffeb 	bl	b6614 <_ZN6AB180510bcdToValueEh>
   b663e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6640:	78e0      	ldrb	r0, [r4, #3]
   b6642:	f7ff ffe7 	bl	b6614 <_ZN6AB180510bcdToValueEh>
   b6646:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6648:	7920      	ldrb	r0, [r4, #4]
   b664a:	f7ff ffe3 	bl	b6614 <_ZN6AB180510bcdToValueEh>
   b664e:	3801      	subs	r0, #1
   b6650:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6652:	b92d      	cbnz	r5, b6660 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6654:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6656:	7828      	ldrb	r0, [r5, #0]
   b6658:	f7ff ffdc 	bl	b6614 <_ZN6AB180510bcdToValueEh>
   b665c:	6188      	str	r0, [r1, #24]
}
   b665e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6660:	7960      	ldrb	r0, [r4, #5]
   b6662:	f7ff ffd7 	bl	b6614 <_ZN6AB180510bcdToValueEh>
   b6666:	3064      	adds	r0, #100	; 0x64
   b6668:	1da5      	adds	r5, r4, #6
   b666a:	6148      	str	r0, [r1, #20]
   b666c:	e7f3      	b.n	b6656 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6670 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6670:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6672:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6674:	b088      	sub	sp, #32
   b6676:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6678:	461a      	mov	r2, r3
   b667a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b667c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b667e:	f7ff fda4 	bl	b61ca <_ZN6AB180510isBitClearEhhb>
   b6682:	b1f0      	cbz	r0, b66c2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6684:	2308      	movs	r3, #8
   b6686:	2601      	movs	r6, #1
   b6688:	4620      	mov	r0, r4
   b668a:	9600      	str	r6, [sp, #0]
   b668c:	eb0d 0203 	add.w	r2, sp, r3
   b6690:	2100      	movs	r1, #0
   b6692:	f7ff fc2f 	bl	b5ef4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6696:	4604      	mov	r4, r0
   b6698:	b198      	cbz	r0, b66c2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b669a:	4632      	mov	r2, r6
   b669c:	4629      	mov	r1, r5
   b669e:	f10d 0009 	add.w	r0, sp, #9
   b66a2:	f7ff ffbe 	bl	b6622 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b66a6:	a804      	add	r0, sp, #16
   b66a8:	f7ff ff9c 	bl	b65e4 <_ZN6AB180510tmToStringEPK2tm>
   b66ac:	4808      	ldr	r0, [pc, #32]	; (b66d0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b66ae:	9a04      	ldr	r2, [sp, #16]
   b66b0:	4908      	ldr	r1, [pc, #32]	; (b66d4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b66b2:	f7fd fdad 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b66b6:	a804      	add	r0, sp, #16
   b66b8:	f004 f97a 	bl	ba9b0 <_ZN6StringD1Ev>
}
   b66bc:	4620      	mov	r0, r4
   b66be:	b008      	add	sp, #32
   b66c0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b66c2:	2224      	movs	r2, #36	; 0x24
   b66c4:	2100      	movs	r1, #0
   b66c6:	4628      	mov	r0, r5
   b66c8:	f005 fcbe 	bl	bc048 <memset>
   b66cc:	2400      	movs	r4, #0
   b66ce:	e7f5      	b.n	b66bc <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b66d0:	2003e3dc 	.word	0x2003e3dc
   b66d4:	000bce5a 	.word	0x000bce5a

000b66d8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b66d8:	b530      	push	{r4, r5, lr}
   b66da:	b08b      	sub	sp, #44	; 0x2c
   b66dc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b66de:	a901      	add	r1, sp, #4
   b66e0:	f7ff ffc6 	bl	b6670 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b66e4:	4604      	mov	r4, r0
   b66e6:	b120      	cbz	r0, b66f2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b66e8:	a801      	add	r0, sp, #4
   b66ea:	f002 f939 	bl	b8960 <mktime>
   b66ee:	e9c5 0100 	strd	r0, r1, [r5]
}
   b66f2:	4620      	mov	r0, r4
   b66f4:	b00b      	add	sp, #44	; 0x2c
   b66f6:	bd30      	pop	{r4, r5, pc}

000b66f8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b66f8:	230a      	movs	r3, #10
   b66fa:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b66fe:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6702:	fb91 f2f3 	sdiv	r2, r1, r3
   b6706:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b670a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b670e:	b2c0      	uxtb	r0, r0
   b6710:	4770      	bx	lr

000b6712 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6712:	b570      	push	{r4, r5, r6, lr}
   b6714:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b6716:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6718:	460c      	mov	r4, r1
   b671a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b671c:	f7ff ffec 	bl	b66f8 <_ZN6AB180510valueToBcdEi>
   b6720:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6722:	6868      	ldr	r0, [r5, #4]
   b6724:	f7ff ffe8 	bl	b66f8 <_ZN6AB180510valueToBcdEi>
   b6728:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b672a:	68a8      	ldr	r0, [r5, #8]
   b672c:	f7ff ffe4 	bl	b66f8 <_ZN6AB180510valueToBcdEi>
   b6730:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6732:	68e8      	ldr	r0, [r5, #12]
   b6734:	f7ff ffe0 	bl	b66f8 <_ZN6AB180510valueToBcdEi>
   b6738:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b673a:	6928      	ldr	r0, [r5, #16]
   b673c:	3001      	adds	r0, #1
   b673e:	f7ff ffdb 	bl	b66f8 <_ZN6AB180510valueToBcdEi>
   b6742:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6744:	b92e      	cbnz	r6, b6752 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6746:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6748:	69a8      	ldr	r0, [r5, #24]
   b674a:	f7ff ffd5 	bl	b66f8 <_ZN6AB180510valueToBcdEi>
   b674e:	7030      	strb	r0, [r6, #0]
}
   b6750:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6752:	696a      	ldr	r2, [r5, #20]
   b6754:	2364      	movs	r3, #100	; 0x64
   b6756:	fb92 f0f3 	sdiv	r0, r2, r3
   b675a:	fb03 2010 	mls	r0, r3, r0, r2
   b675e:	f7ff ffcb 	bl	b66f8 <_ZN6AB180510valueToBcdEi>
   b6762:	1da6      	adds	r6, r4, #6
   b6764:	7160      	strb	r0, [r4, #5]
   b6766:	e7ef      	b.n	b6748 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6768 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6768:	b5f0      	push	{r4, r5, r6, r7, lr}
   b676a:	b087      	sub	sp, #28
   b676c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b676e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6770:	4616      	mov	r6, r2
   b6772:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6774:	f7ff ff36 	bl	b65e4 <_ZN6AB180510tmToStringEPK2tm>
   b6778:	481e      	ldr	r0, [pc, #120]	; (b67f4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b677a:	9a02      	ldr	r2, [sp, #8]
   b677c:	491e      	ldr	r1, [pc, #120]	; (b67f8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b677e:	f7fd fd47 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b6782:	a802      	add	r0, sp, #8
   b6784:	f004 f914 	bl	ba9b0 <_ZN6StringD1Ev>
    if (lock) {
   b6788:	b116      	cbz	r6, b6790 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b678a:	6868      	ldr	r0, [r5, #4]
   b678c:	f002 fb66 	bl	b8e5c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6790:	4620      	mov	r0, r4
   b6792:	2201      	movs	r2, #1
   b6794:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6798:	2700      	movs	r7, #0
   b679a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b679e:	f7ff ffb8 	bl	b6712 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b67a2:	2301      	movs	r3, #1
   b67a4:	461a      	mov	r2, r3
   b67a6:	2110      	movs	r1, #16
   b67a8:	4628      	mov	r0, r5
   b67aa:	f7ff fd8d 	bl	b62c8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b67ae:	4604      	mov	r4, r0
   b67b0:	b1e8      	cbz	r0, b67ee <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b67b2:	2308      	movs	r3, #8
   b67b4:	9700      	str	r7, [sp, #0]
   b67b6:	eb0d 0203 	add.w	r2, sp, r3
   b67ba:	4639      	mov	r1, r7
   b67bc:	4628      	mov	r0, r5
   b67be:	f7ff fc3b 	bl	b6038 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b67c2:	4604      	mov	r4, r0
   b67c4:	b160      	cbz	r0, b67e0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b67c6:	2301      	movs	r3, #1
   b67c8:	461a      	mov	r2, r3
   b67ca:	2110      	movs	r1, #16
   b67cc:	4628      	mov	r0, r5
   b67ce:	f7ff fd1a 	bl	b6206 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b67d2:	b116      	cbz	r6, b67da <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b67d4:	6868      	ldr	r0, [r5, #4]
   b67d6:	f002 fb4a 	bl	b8e6e <_ZN7TwoWire6unlockEv>
}
   b67da:	4620      	mov	r0, r4
   b67dc:	b007      	add	sp, #28
   b67de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b67e0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b67e4:	4905      	ldr	r1, [pc, #20]	; (b67fc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b67e6:	4803      	ldr	r0, [pc, #12]	; (b67f4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b67e8:	f7ff fb54 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
   b67ec:	e7f1      	b.n	b67d2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b67ee:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b67f2:	e7f7      	b.n	b67e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b67f4:	2003e3dc 	.word	0x2003e3dc
   b67f8:	000bce68 	.word	0x000bce68
   b67fc:	000bce76 	.word	0x000bce76

000b6800 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6800:	b513      	push	{r0, r1, r4, lr}
   b6802:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6804:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6806:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b680a:	f005 fbcf 	bl	bbfac <gmtime>
    return setRtcFromTm(tm, lock);
   b680e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6812:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6814:	4620      	mov	r0, r4
   b6816:	f7ff ffa7 	bl	b6768 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b681a:	b002      	add	sp, #8
   b681c:	bd10      	pop	{r4, pc}
	...

000b6820 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6820:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6822:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6824:	b089      	sub	sp, #36	; 0x24
   b6826:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6828:	bb75      	cbnz	r5, b6888 <_ZN6AB18054loopEv+0x68>
   b682a:	f004 fbb1 	bl	baf90 <_ZN9TimeClass7isValidEv>
   b682e:	b358      	cbz	r0, b6888 <_ZN6AB18054loopEv+0x68>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   b6830:	2600      	movs	r6, #0
   b6832:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6834:	a904      	add	r1, sp, #16
   b6836:	4628      	mov	r0, r5
        tm = 0;
   b6838:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b683c:	f001 ffb8 	bl	b87b0 <spark_sync_time_last>
   b6840:	b310      	cbz	r0, b6888 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6842:	2501      	movs	r5, #1
   b6844:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6846:	f004 fbc0 	bl	bafca <_ZN9TimeClass3nowEv>
   b684a:	17c3      	asrs	r3, r0, #31
   b684c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6850:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6852:	9500      	str	r5, [sp, #0]
   b6854:	4620      	mov	r0, r4
   b6856:	f7ff ffd3 	bl	b6800 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b685a:	a902      	add	r1, sp, #8
   b685c:	4620      	mov	r0, r4
        time = 0;
   b685e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6862:	f7ff ff39 	bl	b66d8 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6866:	4b13      	ldr	r3, [pc, #76]	; (b68b4 <_ZN6AB18054loopEv+0x94>)
   b6868:	4913      	ldr	r1, [pc, #76]	; (b68b8 <_ZN6AB18054loopEv+0x98>)
   b686a:	681b      	ldr	r3, [r3, #0]
   b686c:	9300      	str	r3, [sp, #0]
   b686e:	a804      	add	r0, sp, #16
   b6870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6874:	f004 fb4a 	bl	baf0c <_ZN9TimeClass6formatExPKc>
   b6878:	4810      	ldr	r0, [pc, #64]	; (b68bc <_ZN6AB18054loopEv+0x9c>)
   b687a:	9a04      	ldr	r2, [sp, #16]
   b687c:	4910      	ldr	r1, [pc, #64]	; (b68c0 <_ZN6AB18054loopEv+0xa0>)
   b687e:	f7fd fcc7 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b6882:	a804      	add	r0, sp, #16
   b6884:	f004 f894 	bl	ba9b0 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6888:	6963      	ldr	r3, [r4, #20]
   b688a:	b18b      	cbz	r3, b68b0 <_ZN6AB18054loopEv+0x90>
   b688c:	f001 fd04 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6890:	6923      	ldr	r3, [r4, #16]
   b6892:	1ac0      	subs	r0, r0, r3
   b6894:	6963      	ldr	r3, [r4, #20]
   b6896:	4298      	cmp	r0, r3
   b6898:	d30a      	bcc.n	b68b0 <_ZN6AB18054loopEv+0x90>
   b689a:	f001 fcfd 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b689e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b68a2:	6120      	str	r0, [r4, #16]
            setWDT();
   b68a4:	4620      	mov	r0, r4
}
   b68a6:	b009      	add	sp, #36	; 0x24
   b68a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b68ac:	f7ff bc0c 	b.w	b60c8 <_ZN6AB18056setWDTEi>
}
   b68b0:	b009      	add	sp, #36	; 0x24
   b68b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b68b4:	2003decc 	.word	0x2003decc
   b68b8:	2003e6ac 	.word	0x2003e6ac
   b68bc:	2003e3dc 	.word	0x2003e3dc
   b68c0:	000bce91 	.word	0x000bce91

000b68c4 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b68c4:	b530      	push	{r4, r5, lr}
   b68c6:	4604      	mov	r4, r0
   b68c8:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b68ca:	b111      	cbz	r1, b68d2 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b68cc:	6840      	ldr	r0, [r0, #4]
   b68ce:	f002 fa73 	bl	b8db8 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b68d2:	4620      	mov	r0, r4
   b68d4:	f7ff fb64 	bl	b5fa0 <_ZN6AB180510detectChipEv>
   b68d8:	ad06      	add	r5, sp, #24
   b68da:	2800      	cmp	r0, #0
   b68dc:	d037      	beq.n	b694e <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b68de:	4620      	mov	r0, r4
   b68e0:	f7ff fc9c 	bl	b621c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b68e4:	2301      	movs	r3, #1
   b68e6:	461a      	mov	r2, r3
   b68e8:	2110      	movs	r1, #16
   b68ea:	4620      	mov	r0, r4
   b68ec:	f7ff fc6d 	bl	b61ca <_ZN6AB180510isBitClearEhhb>
   b68f0:	b1d8      	cbz	r0, b692a <_ZN6AB18055setupEb+0x66>
   b68f2:	f004 fb4d 	bl	baf90 <_ZN9TimeClass7isValidEv>
   b68f6:	b9c0      	cbnz	r0, b692a <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b68f8:	a902      	add	r1, sp, #8
   b68fa:	4620      	mov	r0, r4
   b68fc:	f7ff feec 	bl	b66d8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6904:	f004 fa48 	bl	bad98 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6908:	4b13      	ldr	r3, [pc, #76]	; (b6958 <_ZN6AB18055setupEb+0x94>)
   b690a:	4914      	ldr	r1, [pc, #80]	; (b695c <_ZN6AB18055setupEb+0x98>)
   b690c:	681b      	ldr	r3, [r3, #0]
   b690e:	9300      	str	r3, [sp, #0]
   b6910:	4628      	mov	r0, r5
   b6912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6916:	f004 faf9 	bl	baf0c <_ZN9TimeClass6formatExPKc>
   b691a:	4811      	ldr	r0, [pc, #68]	; (b6960 <_ZN6AB18055setupEb+0x9c>)
   b691c:	9a06      	ldr	r2, [sp, #24]
   b691e:	4911      	ldr	r1, [pc, #68]	; (b6964 <_ZN6AB18055setupEb+0xa0>)
   b6920:	f7fd fc76 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b6924:	4628      	mov	r0, r5
   b6926:	f004 f843 	bl	ba9b0 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b692a:	4b0f      	ldr	r3, [pc, #60]	; (b6968 <_ZN6AB18055setupEb+0xa4>)
   b692c:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b692e:	4b0f      	ldr	r3, [pc, #60]	; (b696c <_ZN6AB18055setupEb+0xa8>)
   b6930:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6932:	4b0f      	ldr	r3, [pc, #60]	; (b6970 <_ZN6AB18055setupEb+0xac>)
   b6934:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6936:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b693a:	2300      	movs	r3, #0
   b693c:	a802      	add	r0, sp, #8
   b693e:	9500      	str	r5, [sp, #0]
   b6940:	f7fd ff56 	bl	b47f0 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6944:	4628      	mov	r0, r5
   b6946:	f7fd fc19 	bl	b417c <_ZNSt14_Function_baseD1Ev>
}
   b694a:	b00b      	add	sp, #44	; 0x2c
   b694c:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b694e:	4909      	ldr	r1, [pc, #36]	; (b6974 <_ZN6AB18055setupEb+0xb0>)
   b6950:	4803      	ldr	r0, [pc, #12]	; (b6960 <_ZN6AB18055setupEb+0x9c>)
   b6952:	f7ff fa9f 	bl	b5e94 <_ZNK5spark6Logger5errorEPKcz>
   b6956:	e7e8      	b.n	b692a <_ZN6AB18055setupEb+0x66>
   b6958:	2003decc 	.word	0x2003decc
   b695c:	2003e6ac 	.word	0x2003e6ac
   b6960:	2003e3dc 	.word	0x2003e3dc
   b6964:	000bcea7 	.word	0x000bcea7
   b6968:	000b614d 	.word	0x000b614d
   b696c:	000b4173 	.word	0x000b4173
   b6970:	000b415f 	.word	0x000b415f
   b6974:	000bcec4 	.word	0x000bcec4

000b6978 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6978:	4b01      	ldr	r3, [pc, #4]	; (b6980 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b697a:	4a02      	ldr	r2, [pc, #8]	; (b6984 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b697c:	601a      	str	r2, [r3, #0]
}
   b697e:	4770      	bx	lr
   b6980:	2003e3dc 	.word	0x2003e3dc
   b6984:	000bcedc 	.word	0x000bcedc

000b6988 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b6988:	4770      	bx	lr

000b698a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b698a:	b510      	push	{r4, lr}
}
   b698c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b698e:	4604      	mov	r4, r0
}
   b6990:	f7fd fb85 	bl	b409e <_ZdlPvj>
   b6994:	4620      	mov	r0, r4
   b6996:	bd10      	pop	{r4, pc}

000b6998 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b6998:	6803      	ldr	r3, [r0, #0]
   b699a:	b2c9      	uxtb	r1, r1
   b699c:	689b      	ldr	r3, [r3, #8]
   b699e:	4718      	bx	r3

000b69a0 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b69a0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b69a2:	4d03      	ldr	r5, [pc, #12]	; (b69b0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b69a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b69a8:	e9c0 5100 	strd	r5, r1, [r0]
}
   b69ac:	bd30      	pop	{r4, r5, pc}
   b69ae:	bf00      	nop
   b69b0:	000bcf08 	.word	0x000bcf08

000b69b4 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b69b4:	6840      	ldr	r0, [r0, #4]
   b69b6:	f002 b9ff 	b.w	b8db8 <_ZN7TwoWire5beginEv>

000b69ba <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b69ba:	b510      	push	{r4, lr}
   b69bc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b69be:	6800      	ldr	r0, [r0, #0]
   b69c0:	f002 fa55 	bl	b8e6e <_ZN7TwoWire6unlockEv>
   b69c4:	4620      	mov	r0, r4
   b69c6:	bd10      	pop	{r4, pc}

000b69c8 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b69c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b69cc:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b69ce:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b69d0:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b69d2:	460d      	mov	r5, r1
   b69d4:	4616      	mov	r6, r2
   b69d6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b69d8:	f002 fa40 	bl	b8e5c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b69dc:	b1a7      	cbz	r7, b6a08 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b69de:	68e1      	ldr	r1, [r4, #12]
   b69e0:	6860      	ldr	r0, [r4, #4]
   b69e2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b69e6:	f002 fa1a 	bl	b8e1e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b69ea:	0a29      	lsrs	r1, r5, #8
   b69ec:	6860      	ldr	r0, [r4, #4]
   b69ee:	f7ff ffd3 	bl	b6998 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b69f2:	4629      	mov	r1, r5
   b69f4:	6860      	ldr	r0, [r4, #4]
   b69f6:	f7ff ffcf 	bl	b6998 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b69fa:	6860      	ldr	r0, [r4, #4]
   b69fc:	2100      	movs	r1, #0
   b69fe:	f002 fa29 	bl	b8e54 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6a02:	b148      	cbz	r0, b6a18 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6a04:	2400      	movs	r4, #0
   b6a06:	e000      	b.n	b6a0a <_ZN6MB85RC8readDataEjPhj+0x42>
   b6a08:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6a0a:	a801      	add	r0, sp, #4
   b6a0c:	f7ff ffd5 	bl	b69ba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b6a10:	4620      	mov	r0, r4
   b6a12:	b003      	add	sp, #12
   b6a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b6a18:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b6a1a:	7b21      	ldrb	r1, [r4, #12]
   b6a1c:	6860      	ldr	r0, [r4, #4]
   b6a1e:	46b8      	mov	r8, r7
   b6a20:	bf28      	it	cs
   b6a22:	f04f 0820 	movcs.w	r8, #32
   b6a26:	2301      	movs	r3, #1
   b6a28:	4642      	mov	r2, r8
   b6a2a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6a2e:	f002 f9e0 	bl	b8df2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b6a32:	f004 fd4b 	bl	bb4cc <_Z19__fetch_global_Wirev>
   b6a36:	6803      	ldr	r3, [r0, #0]
   b6a38:	691b      	ldr	r3, [r3, #16]
   b6a3a:	4798      	blx	r3
   b6a3c:	4540      	cmp	r0, r8
   b6a3e:	dbe1      	blt.n	b6a04 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b6a40:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6a44:	f004 fd42 	bl	bb4cc <_Z19__fetch_global_Wirev>
   b6a48:	6803      	ldr	r3, [r0, #0]
   b6a4a:	695b      	ldr	r3, [r3, #20]
   b6a4c:	4798      	blx	r3
   b6a4e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b6a52:	454e      	cmp	r6, r9
   b6a54:	d1f6      	bne.n	b6a44 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6a56:	4445      	add	r5, r8
				dataLen--;
   b6a58:	eba7 0708 	sub.w	r7, r7, r8
   b6a5c:	e7be      	b.n	b69dc <_ZN6MB85RC8readDataEjPhj+0x14>

000b6a5e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6a5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a62:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6a64:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6a66:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6a68:	460e      	mov	r6, r1
   b6a6a:	4690      	mov	r8, r2
   b6a6c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6a6e:	f002 f9f5 	bl	b8e5c <_ZN7TwoWire4lockEv>
   b6a72:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b6a76:	f1b9 0f00 	cmp.w	r9, #0
   b6a7a:	d02a      	beq.n	b6ad2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6a7c:	b34d      	cbz	r5, b6ad2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6a7e:	68e1      	ldr	r1, [r4, #12]
   b6a80:	6860      	ldr	r0, [r4, #4]
   b6a82:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6a86:	f002 f9ca 	bl	b8e1e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6a8a:	0a31      	lsrs	r1, r6, #8
   b6a8c:	6860      	ldr	r0, [r4, #4]
   b6a8e:	f7ff ff83 	bl	b6998 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6a92:	6860      	ldr	r0, [r4, #4]
   b6a94:	4631      	mov	r1, r6
   b6a96:	f7ff ff7f 	bl	b6998 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6a9a:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b6a9e:	4647      	mov	r7, r8
   b6aa0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b6aa4:	6860      	ldr	r0, [r4, #4]
   b6aa6:	f817 1b01 	ldrb.w	r1, [r7], #1
   b6aaa:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b6aac:	3d01      	subs	r5, #1
				wire.write(*data);
   b6aae:	689b      	ldr	r3, [r3, #8]
   b6ab0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6ab2:	4555      	cmp	r5, sl
   b6ab4:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b6ab8:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6aba:	d001      	beq.n	b6ac0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b6abc:	2d00      	cmp	r5, #0
   b6abe:	d1f1      	bne.n	b6aa4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6ac0:	6860      	ldr	r0, [r4, #4]
   b6ac2:	2101      	movs	r1, #1
   b6ac4:	f002 f9c6 	bl	b8e54 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6ac8:	2800      	cmp	r0, #0
   b6aca:	d0d7      	beq.n	b6a7c <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6acc:	f04f 0900 	mov.w	r9, #0
   b6ad0:	e7d1      	b.n	b6a76 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b6ad2:	a801      	add	r0, sp, #4
   b6ad4:	f7ff ff71 	bl	b69ba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6ad8:	4648      	mov	r0, r9
   b6ada:	b003      	add	sp, #12
   b6adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6ae0 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ae4:	b08b      	sub	sp, #44	; 0x2c
   b6ae6:	460e      	mov	r6, r1
   b6ae8:	4615      	mov	r5, r2
   b6aea:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6aec:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6aee:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6af0:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b6af2:	f002 f9b3 	bl	b8e5c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b6af6:	42ae      	cmp	r6, r5
   b6af8:	d229      	bcs.n	b6b4e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b6afa:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b6afc:	4425      	add	r5, r4
			while(numBytes > 0) {
   b6afe:	b18c      	cbz	r4, b6b24 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b6b00:	2c1e      	cmp	r4, #30
   b6b02:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6b04:	f8d8 3000 	ldr.w	r3, [r8]
   b6b08:	bf28      	it	cs
   b6b0a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6b0c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b6b0e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6b12:	aa02      	add	r2, sp, #8
   b6b14:	463b      	mov	r3, r7
   b6b16:	4631      	mov	r1, r6
   b6b18:	4640      	mov	r0, r8
				framAddrTo -= count;
   b6b1a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6b1c:	47c8      	blx	r9
				if (!result) {
   b6b1e:	b948      	cbnz	r0, b6b34 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6b20:	2400      	movs	r4, #0
   b6b22:	e000      	b.n	b6b26 <_ZN6MB85RC8moveDataEjjj+0x46>
   b6b24:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6b26:	a801      	add	r0, sp, #4
   b6b28:	f7ff ff47 	bl	b69ba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	b00b      	add	sp, #44	; 0x2c
   b6b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6b34:	f8d8 3000 	ldr.w	r3, [r8]
   b6b38:	aa02      	add	r2, sp, #8
   b6b3a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6b3e:	4629      	mov	r1, r5
   b6b40:	463b      	mov	r3, r7
   b6b42:	4640      	mov	r0, r8
   b6b44:	47c8      	blx	r9
				if (!result) {
   b6b46:	2800      	cmp	r0, #0
   b6b48:	d0ea      	beq.n	b6b20 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6b4a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6b4c:	e7d7      	b.n	b6afe <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b6b4e:	d9e9      	bls.n	b6b24 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6b50:	2c00      	cmp	r4, #0
   b6b52:	d0e7      	beq.n	b6b24 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6b54:	f8d8 3000 	ldr.w	r3, [r8]
   b6b58:	2c1e      	cmp	r4, #30
   b6b5a:	4627      	mov	r7, r4
   b6b5c:	bf28      	it	cs
   b6b5e:	271e      	movcs	r7, #30
   b6b60:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6b64:	aa02      	add	r2, sp, #8
   b6b66:	463b      	mov	r3, r7
   b6b68:	4631      	mov	r1, r6
   b6b6a:	4640      	mov	r0, r8
   b6b6c:	47c8      	blx	r9
				if (!result) {
   b6b6e:	2800      	cmp	r0, #0
   b6b70:	d0d6      	beq.n	b6b20 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6b72:	f8d8 3000 	ldr.w	r3, [r8]
   b6b76:	aa02      	add	r2, sp, #8
   b6b78:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6b7c:	4629      	mov	r1, r5
   b6b7e:	463b      	mov	r3, r7
   b6b80:	4640      	mov	r0, r8
   b6b82:	47c8      	blx	r9
				if (!result) {
   b6b84:	2800      	cmp	r0, #0
   b6b86:	d0cb      	beq.n	b6b20 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6b88:	443e      	add	r6, r7
				framAddrTo += count;
   b6b8a:	443d      	add	r5, r7
				numBytes -= count;
   b6b8c:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6b8e:	e7df      	b.n	b6b50 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6b90 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b6b90:	6001      	str	r1, [r0, #0]
   b6b92:	7102      	strb	r2, [r0, #4]
{
}
   b6b94:	4770      	bx	lr

000b6b96 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b6b96:	6800      	ldr	r0, [r0, #0]
   b6b98:	6803      	ldr	r3, [r0, #0]
   b6b9a:	68db      	ldr	r3, [r3, #12]
   b6b9c:	4718      	bx	r3

000b6b9e <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b6b9e:	6800      	ldr	r0, [r0, #0]
   b6ba0:	6803      	ldr	r3, [r0, #0]
   b6ba2:	6a1b      	ldr	r3, [r3, #32]
   b6ba4:	4718      	bx	r3

000b6ba6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b6ba6:	6800      	ldr	r0, [r0, #0]
   b6ba8:	6803      	ldr	r3, [r0, #0]
   b6baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6bac:	4718      	bx	r3

000b6bae <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b6bae:	7900      	ldrb	r0, [r0, #4]
   b6bb0:	4770      	bx	lr

000b6bb2 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b6bb2:	6800      	ldr	r0, [r0, #0]
   b6bb4:	6803      	ldr	r3, [r0, #0]
   b6bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6bb8:	4718      	bx	r3

000b6bba <_ZN10RHDatagram6sendtoEPhhh>:
{
   b6bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6bbc:	4605      	mov	r5, r0
   b6bbe:	460c      	mov	r4, r1
    setHeaderTo(address);
   b6bc0:	4619      	mov	r1, r3
{
   b6bc2:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b6bc4:	f7ff fff5 	bl	b6bb2 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b6bc8:	6828      	ldr	r0, [r5, #0]
   b6bca:	9a01      	ldr	r2, [sp, #4]
   b6bcc:	6803      	ldr	r3, [r0, #0]
   b6bce:	695b      	ldr	r3, [r3, #20]
   b6bd0:	4621      	mov	r1, r4
}
   b6bd2:	b003      	add	sp, #12
   b6bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b6bd8:	4718      	bx	r3

000b6bda <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b6bda:	6800      	ldr	r0, [r0, #0]
   b6bdc:	6803      	ldr	r3, [r0, #0]
   b6bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6be0:	4718      	bx	r3

000b6be2 <_ZN10RHDatagram14setThisAddressEh>:
{
   b6be2:	b538      	push	{r3, r4, r5, lr}
   b6be4:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b6be6:	6800      	ldr	r0, [r0, #0]
   b6be8:	6803      	ldr	r3, [r0, #0]
{
   b6bea:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b6bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6bee:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b6bf0:	4629      	mov	r1, r5
   b6bf2:	4620      	mov	r0, r4
   b6bf4:	f7ff fff1 	bl	b6bda <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b6bf8:	7125      	strb	r5, [r4, #4]
}
   b6bfa:	bd38      	pop	{r3, r4, r5, pc}

000b6bfc <_ZN10RHDatagram4initEv>:
{
   b6bfc:	b538      	push	{r3, r4, r5, lr}
   b6bfe:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b6c00:	6800      	ldr	r0, [r0, #0]
   b6c02:	6803      	ldr	r3, [r0, #0]
   b6c04:	689b      	ldr	r3, [r3, #8]
   b6c06:	4798      	blx	r3
    if (ret)
   b6c08:	4605      	mov	r5, r0
   b6c0a:	b118      	cbz	r0, b6c14 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b6c0c:	7921      	ldrb	r1, [r4, #4]
   b6c0e:	4620      	mov	r0, r4
   b6c10:	f7ff ffe7 	bl	b6be2 <_ZN10RHDatagram14setThisAddressEh>
}
   b6c14:	4628      	mov	r0, r5
   b6c16:	bd38      	pop	{r3, r4, r5, pc}

000b6c18 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b6c18:	6800      	ldr	r0, [r0, #0]
   b6c1a:	6803      	ldr	r3, [r0, #0]
   b6c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c1e:	4718      	bx	r3

000b6c20 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b6c20:	6800      	ldr	r0, [r0, #0]
   b6c22:	6803      	ldr	r3, [r0, #0]
   b6c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c26:	4718      	bx	r3

000b6c28 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b6c28:	6800      	ldr	r0, [r0, #0]
   b6c2a:	6803      	ldr	r3, [r0, #0]
   b6c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6c2e:	4718      	bx	r3

000b6c30 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b6c30:	6800      	ldr	r0, [r0, #0]
   b6c32:	6803      	ldr	r3, [r0, #0]
   b6c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6c36:	4718      	bx	r3

000b6c38 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b6c38:	6800      	ldr	r0, [r0, #0]
   b6c3a:	6803      	ldr	r3, [r0, #0]
   b6c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6c3e:	4718      	bx	r3

000b6c40 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b6c40:	6800      	ldr	r0, [r0, #0]
   b6c42:	6803      	ldr	r3, [r0, #0]
   b6c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6c46:	4718      	bx	r3

000b6c48 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b6c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6c4c:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b6c4e:	6800      	ldr	r0, [r0, #0]
{
   b6c50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b6c52:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b6c54:	6803      	ldr	r3, [r0, #0]
   b6c56:	691b      	ldr	r3, [r3, #16]
{
   b6c58:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b6c5c:	4798      	blx	r3
   b6c5e:	4605      	mov	r5, r0
   b6c60:	b1c8      	cbz	r0, b6c96 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b6c62:	b11e      	cbz	r6, b6c6c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b6c64:	4620      	mov	r0, r4
   b6c66:	f7ff ffe3 	bl	b6c30 <_ZN10RHDatagram10headerFromEv>
   b6c6a:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b6c6c:	f1b9 0f00 	cmp.w	r9, #0
   b6c70:	d004      	beq.n	b6c7c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b6c72:	4620      	mov	r0, r4
   b6c74:	f7ff ffd8 	bl	b6c28 <_ZN10RHDatagram8headerToEv>
   b6c78:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b6c7c:	f1b8 0f00 	cmp.w	r8, #0
   b6c80:	d004      	beq.n	b6c8c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b6c82:	4620      	mov	r0, r4
   b6c84:	f7ff ffd8 	bl	b6c38 <_ZN10RHDatagram8headerIdEv>
   b6c88:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b6c8c:	b11f      	cbz	r7, b6c96 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b6c8e:	4620      	mov	r0, r4
   b6c90:	f7ff ffd6 	bl	b6c40 <_ZN10RHDatagram11headerFlagsEv>
   b6c94:	7038      	strb	r0, [r7, #0]
}
   b6c96:	4628      	mov	r0, r5
   b6c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6c9c <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b6c9c:	2001      	movs	r0, #1
   b6c9e:	4770      	bx	lr

000b6ca0 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b6ca0:	7903      	ldrb	r3, [r0, #4]
   b6ca2:	2b03      	cmp	r3, #3
   b6ca4:	d0fc      	beq.n	b6ca0 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b6ca6:	2001      	movs	r0, #1
   b6ca8:	4770      	bx	lr

000b6caa <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b6caa:	2000      	movs	r0, #0
   b6cac:	4770      	bx	lr

000b6cae <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b6cae:	7181      	strb	r1, [r0, #6]
}
   b6cb0:	4770      	bx	lr

000b6cb2 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b6cb2:	7141      	strb	r1, [r0, #5]
}
   b6cb4:	4770      	bx	lr

000b6cb6 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b6cb6:	72c1      	strb	r1, [r0, #11]
}
   b6cb8:	4770      	bx	lr

000b6cba <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b6cba:	7301      	strb	r1, [r0, #12]
}
   b6cbc:	4770      	bx	lr

000b6cbe <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b6cbe:	7341      	strb	r1, [r0, #13]
}
   b6cc0:	4770      	bx	lr

000b6cc2 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b6cc2:	7b83      	ldrb	r3, [r0, #14]
   b6cc4:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b6cc8:	4311      	orrs	r1, r2
   b6cca:	7381      	strb	r1, [r0, #14]
}
   b6ccc:	4770      	bx	lr

000b6cce <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b6cce:	79c0      	ldrb	r0, [r0, #7]
}
   b6cd0:	4770      	bx	lr

000b6cd2 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b6cd2:	7a00      	ldrb	r0, [r0, #8]
}
   b6cd4:	4770      	bx	lr

000b6cd6 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b6cd6:	7a40      	ldrb	r0, [r0, #9]
}
   b6cd8:	4770      	bx	lr

000b6cda <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b6cda:	7a80      	ldrb	r0, [r0, #10]
}
   b6cdc:	4770      	bx	lr

000b6cde <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b6cde:	8a00      	ldrh	r0, [r0, #16]
}
   b6ce0:	b200      	sxth	r0, r0
   b6ce2:	4770      	bx	lr

000b6ce4 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b6ce4:	7900      	ldrb	r0, [r0, #4]
}
   b6ce6:	4770      	bx	lr

000b6ce8 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b6ce8:	7101      	strb	r1, [r0, #4]
}
   b6cea:	4770      	bx	lr

000b6cec <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b6cec:	8a40      	ldrh	r0, [r0, #18]
}
   b6cee:	b280      	uxth	r0, r0
   b6cf0:	4770      	bx	lr

000b6cf2 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b6cf2:	8a80      	ldrh	r0, [r0, #20]
}
   b6cf4:	b280      	uxth	r0, r0
   b6cf6:	4770      	bx	lr

000b6cf8 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b6cf8:	8ac0      	ldrh	r0, [r0, #22]
}
   b6cfa:	b280      	uxth	r0, r0
   b6cfc:	4770      	bx	lr

000b6cfe <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b6cfe:	b538      	push	{r3, r4, r5, lr}
   b6d00:	4605      	mov	r5, r0
   b6d02:	460c      	mov	r4, r1
    while (!available())
   b6d04:	682b      	ldr	r3, [r5, #0]
   b6d06:	4628      	mov	r0, r5
   b6d08:	68db      	ldr	r3, [r3, #12]
   b6d0a:	4798      	blx	r3
   b6d0c:	b928      	cbnz	r0, b6d1a <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b6d0e:	2c00      	cmp	r4, #0
   b6d10:	d0f8      	beq.n	b6d04 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b6d12:	4620      	mov	r0, r4
   b6d14:	f001 fe2c 	bl	b8970 <delay>
   b6d18:	e7f4      	b.n	b6d04 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b6d1a:	bd38      	pop	{r3, r4, r5, pc}

000b6d1c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b6d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d1e:	4605      	mov	r5, r0
   b6d20:	460f      	mov	r7, r1
   b6d22:	4614      	mov	r4, r2
   b6d24:	f001 fab8 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
   b6d28:	4606      	mov	r6, r0
   b6d2a:	f001 fab5 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6d2e:	1b80      	subs	r0, r0, r6
   b6d30:	42b8      	cmp	r0, r7
   b6d32:	d20a      	bcs.n	b6d4a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b6d34:	682b      	ldr	r3, [r5, #0]
   b6d36:	4628      	mov	r0, r5
   b6d38:	68db      	ldr	r3, [r3, #12]
   b6d3a:	4798      	blx	r3
   b6d3c:	b930      	cbnz	r0, b6d4c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b6d3e:	2c00      	cmp	r4, #0
   b6d40:	d0f3      	beq.n	b6d2a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b6d42:	4620      	mov	r0, r4
   b6d44:	f001 fe14 	bl	b8970 <delay>
   b6d48:	e7ef      	b.n	b6d2a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b6d4a:	2000      	movs	r0, #0
}
   b6d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d4e <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b6d4e:	b570      	push	{r4, r5, r6, lr}
   b6d50:	4604      	mov	r4, r0
   b6d52:	460e      	mov	r6, r1
   b6d54:	f001 faa0 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
   b6d58:	4605      	mov	r5, r0
   b6d5a:	f001 fa9d 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6d5e:	1b40      	subs	r0, r0, r5
   b6d60:	42b0      	cmp	r0, r6
   b6d62:	d204      	bcs.n	b6d6e <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b6d64:	7923      	ldrb	r3, [r4, #4]
   b6d66:	2b03      	cmp	r3, #3
   b6d68:	d0f7      	beq.n	b6d5a <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b6d6a:	2001      	movs	r0, #1
}
   b6d6c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b6d6e:	2000      	movs	r0, #0
   b6d70:	e7fc      	b.n	b6d6c <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b6d72 <_ZN15RHGenericDriver7waitCADEv>:
{
   b6d72:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b6d74:	69c3      	ldr	r3, [r0, #28]
{
   b6d76:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b6d78:	b1b3      	cbz	r3, b6da8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6d7a:	f001 fa8d 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6d7e:	2664      	movs	r6, #100	; 0x64
   b6d80:	4605      	mov	r5, r0
    while (isChannelActive())
   b6d82:	6823      	ldr	r3, [r4, #0]
   b6d84:	4620      	mov	r0, r4
   b6d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d88:	4798      	blx	r3
   b6d8a:	b168      	cbz	r0, b6da8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6d8c:	f001 fa84 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b6d90:	69e3      	ldr	r3, [r4, #28]
   b6d92:	1b40      	subs	r0, r0, r5
   b6d94:	4298      	cmp	r0, r3
   b6d96:	d809      	bhi.n	b6dac <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6d98:	210a      	movs	r1, #10
   b6d9a:	2001      	movs	r0, #1
   b6d9c:	f003 fd31 	bl	ba802 <_Z6randomii>
   b6da0:	4370      	muls	r0, r6
   b6da2:	f001 fde5 	bl	b8970 <delay>
    while (isChannelActive())
   b6da6:	e7ec      	b.n	b6d82 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b6da8:	2001      	movs	r0, #1
}
   b6daa:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b6dac:	2000      	movs	r0, #0
   b6dae:	e7fc      	b.n	b6daa <_ZN15RHGenericDriver7waitCADEv+0x38>

000b6db0 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b6db0:	4a06      	ldr	r2, [pc, #24]	; (b6dcc <_ZN15RHGenericDriverC1Ev+0x1c>)
   b6db2:	6002      	str	r2, [r0, #0]
   b6db4:	21ff      	movs	r1, #255	; 0xff
   b6db6:	2200      	movs	r2, #0
   b6db8:	7102      	strb	r2, [r0, #4]
   b6dba:	7141      	strb	r1, [r0, #5]
   b6dbc:	8242      	strh	r2, [r0, #18]
   b6dbe:	72c1      	strb	r1, [r0, #11]
   b6dc0:	8282      	strh	r2, [r0, #20]
   b6dc2:	8181      	strh	r1, [r0, #12]
   b6dc4:	7382      	strb	r2, [r0, #14]
   b6dc6:	82c2      	strh	r2, [r0, #22]
   b6dc8:	61c2      	str	r2, [r0, #28]
}
   b6dca:	4770      	bx	lr
   b6dcc:	000bcf24 	.word	0x000bcf24

000b6dd0 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b6dd0:	4770      	bx	lr

000b6dd2 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b6dd2:	4770      	bx	lr

000b6dd4 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b6dd4:	4770      	bx	lr

000b6dd6 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b6dd6:	4770      	bx	lr

000b6dd8 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b6dd8:	4770      	bx	lr

000b6dda <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b6dda:	7141      	strb	r1, [r0, #5]
}
   b6ddc:	4770      	bx	lr

000b6dde <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b6dde:	7181      	strb	r1, [r0, #6]
}
   b6de0:	4770      	bx	lr

000b6de2 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b6de2:	7101      	strb	r1, [r0, #4]
}
   b6de4:	4770      	bx	lr
	...

000b6de8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6de8:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b6dea:	4d03      	ldr	r5, [pc, #12]	; (b6df8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b6dec:	6005      	str	r5, [r0, #0]
   b6dee:	7101      	strb	r1, [r0, #4]
   b6df0:	7142      	strb	r2, [r0, #5]
   b6df2:	7183      	strb	r3, [r0, #6]
}
   b6df4:	bd30      	pop	{r4, r5, pc}
   b6df6:	bf00      	nop
   b6df8:	000bcfa4 	.word	0x000bcfa4

000b6dfc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6dfc:	4770      	bx	lr

000b6dfe <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6dfe:	b510      	push	{r4, lr}
  }
   b6e00:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6e02:	4604      	mov	r4, r0
  }
   b6e04:	f7fd f94b 	bl	b409e <_ZdlPvj>
   b6e08:	4620      	mov	r0, r4
   b6e0a:	bd10      	pop	{r4, pc}

000b6e0c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6e0c:	b40e      	push	{r1, r2, r3}
   b6e0e:	b503      	push	{r0, r1, lr}
   b6e10:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b6e12:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6e14:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b6e18:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b6e1a:	f003 fcb6 	bl	ba78a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b6e1e:	b002      	add	sp, #8
   b6e20:	f85d eb04 	ldr.w	lr, [sp], #4
   b6e24:	b003      	add	sp, #12
   b6e26:	4770      	bx	lr

000b6e28 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6e2a:	4604      	mov	r4, r0
   b6e2c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6e2e:	7922      	ldrb	r2, [r4, #4]
   b6e30:	68a3      	ldr	r3, [r4, #8]
   b6e32:	b132      	cbz	r2, b6e42 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6e34:	b9a3      	cbnz	r3, b6e60 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6e36:	490b      	ldr	r1, [pc, #44]	; (b6e64 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6e38:	b002      	add	sp, #8
   b6e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6e3e:	f003 bb9b 	b.w	ba578 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6e42:	4a09      	ldr	r2, [pc, #36]	; (b6e68 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6e44:	7b26      	ldrb	r6, [r4, #12]
   b6e46:	4d09      	ldr	r5, [pc, #36]	; (b6e6c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6e48:	4909      	ldr	r1, [pc, #36]	; (b6e70 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6e4a:	7b64      	ldrb	r4, [r4, #13]
   b6e4c:	2e01      	cmp	r6, #1
   b6e4e:	bf18      	it	ne
   b6e50:	4629      	movne	r1, r5
   b6e52:	e9cd 1400 	strd	r1, r4, [sp]
   b6e56:	4907      	ldr	r1, [pc, #28]	; (b6e74 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6e58:	f7ff ffd8 	bl	b6e0c <_ZN5Print6printfEPKcz>
  }
   b6e5c:	b002      	add	sp, #8
   b6e5e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6e60:	4a05      	ldr	r2, [pc, #20]	; (b6e78 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6e62:	e7ef      	b.n	b6e44 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6e64:	000bcfe1 	.word	0x000bcfe1
   b6e68:	000bd37d 	.word	0x000bd37d
   b6e6c:	000bcfdd 	.word	0x000bcfdd
   b6e70:	000bcfd9 	.word	0x000bcfd9
   b6e74:	000bcff7 	.word	0x000bcff7
   b6e78:	000bcfd0 	.word	0x000bcfd0

000b6e7c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6e7c:	b510      	push	{r4, lr}
   b6e7e:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b6e80:	f7ff ffb2 	bl	b6de8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b6e84:	4b05      	ldr	r3, [pc, #20]	; (b6e9c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b6e86:	6023      	str	r3, [r4, #0]
  {
   b6e88:	4b05      	ldr	r3, [pc, #20]	; (b6ea0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b6e8a:	60a3      	str	r3, [r4, #8]
   b6e8c:	2301      	movs	r3, #1
   b6e8e:	7323      	strb	r3, [r4, #12]
   b6e90:	2300      	movs	r3, #0
   b6e92:	6123      	str	r3, [r4, #16]
   b6e94:	82a3      	strh	r3, [r4, #20]
{
}
   b6e96:	4620      	mov	r0, r4
   b6e98:	bd10      	pop	{r4, pc}
   b6e9a:	bf00      	nop
   b6e9c:	000bd030 	.word	0x000bd030
   b6ea0:	000bd01c 	.word	0x000bd01c

000b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b6ea4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b6ea6:	4c0b      	ldr	r4, [pc, #44]	; (b6ed4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6ea8:	7821      	ldrb	r1, [r4, #0]
   b6eaa:	f3bf 8f5b 	dmb	ish
   b6eae:	f011 0101 	ands.w	r1, r1, #1
   b6eb2:	d10b      	bne.n	b6ecc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6eb4:	4620      	mov	r0, r4
   b6eb6:	9101      	str	r1, [sp, #4]
   b6eb8:	f7fd f900 	bl	b40bc <__cxa_guard_acquire>
   b6ebc:	9901      	ldr	r1, [sp, #4]
   b6ebe:	b128      	cbz	r0, b6ecc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6ec0:	4805      	ldr	r0, [pc, #20]	; (b6ed8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6ec2:	f003 fcb5 	bl	ba830 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6ec6:	4620      	mov	r0, r4
   b6ec8:	f7fd f8fd 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b6ecc:	4802      	ldr	r0, [pc, #8]	; (b6ed8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6ece:	b002      	add	sp, #8
   b6ed0:	bd10      	pop	{r4, pc}
   b6ed2:	bf00      	nop
   b6ed4:	2003e3e4 	.word	0x2003e3e4
   b6ed8:	2003e3e8 	.word	0x2003e3e8

000b6edc <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b6edc:	b507      	push	{r0, r1, r2, lr}
   b6ede:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b6ee0:	f7ff ffe0 	bl	b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6ee4:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b6ee6:	b003      	add	sp, #12
   b6ee8:	f85d eb04 	ldr.w	lr, [sp], #4
   b6eec:	f003 bd58 	b.w	ba9a0 <_ZN8SPIClass8transferEh>

000b6ef0 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b6ef0:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b6ef2:	f7ff ffd7 	bl	b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b6ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6efa:	f003 bd57 	b.w	ba9ac <_ZN8SPIClass15attachInterruptEv>

000b6efe <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b6efe:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b6f00:	f7ff ffd0 	bl	b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b6f04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6f08:	f003 bd51 	b.w	ba9ae <_ZN8SPIClass15detachInterruptEv>

000b6f0c <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b6f0c:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b6f0e:	7903      	ldrb	r3, [r0, #4]
   b6f10:	2b04      	cmp	r3, #4
   b6f12:	d020      	beq.n	b6f56 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b6f14:	2b03      	cmp	r3, #3
   b6f16:	d020      	beq.n	b6f5a <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b6f18:	2b02      	cmp	r3, #2
   b6f1a:	d020      	beq.n	b6f5e <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b6f1c:	4a11      	ldr	r2, [pc, #68]	; (b6f64 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b6f1e:	4912      	ldr	r1, [pc, #72]	; (b6f68 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b6f20:	2b01      	cmp	r3, #1
   b6f22:	bf18      	it	ne
   b6f24:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b6f26:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b6f28:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b6f2a:	3901      	subs	r1, #1
   b6f2c:	bf18      	it	ne
   b6f2e:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b6f30:	b133      	cbz	r3, b6f40 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b6f32:	2b01      	cmp	r3, #1
   b6f34:	d004      	beq.n	b6f40 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b6f36:	2b02      	cmp	r3, #2
   b6f38:	d002      	beq.n	b6f40 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b6f3a:	2b03      	cmp	r3, #3
   b6f3c:	bf18      	it	ne
   b6f3e:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b6f40:	2400      	movs	r4, #0
   b6f42:	7304      	strb	r4, [r0, #12]
   b6f44:	6102      	str	r2, [r0, #16]
   b6f46:	7501      	strb	r1, [r0, #20]
   b6f48:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b6f4a:	f7ff ffab 	bl	b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b6f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f52:	f003 bc77 	b.w	ba844 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b6f56:	4a05      	ldr	r2, [pc, #20]	; (b6f6c <_ZN13RHHardwareSPI5beginEv+0x60>)
   b6f58:	e7e5      	b.n	b6f26 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b6f5a:	4a05      	ldr	r2, [pc, #20]	; (b6f70 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b6f5c:	e7e3      	b.n	b6f26 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b6f5e:	4a05      	ldr	r2, [pc, #20]	; (b6f74 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b6f60:	e7e1      	b.n	b6f26 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b6f62:	bf00      	nop
   b6f64:	001e8480 	.word	0x001e8480
   b6f68:	000f4240 	.word	0x000f4240
   b6f6c:	00f42400 	.word	0x00f42400
   b6f70:	007a1200 	.word	0x007a1200
   b6f74:	003d0900 	.word	0x003d0900

000b6f78 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b6f78:	b508      	push	{r3, lr}
        instance().end();
   b6f7a:	f7ff ff93 	bl	b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b6f7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6f82:	f003 bc73 	b.w	ba86c <_ZN8SPIClass3endEv>

000b6f86 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b6f86:	b510      	push	{r4, lr}
   b6f88:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b6f8a:	f7ff ff8b 	bl	b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6f8e:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b6f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f96:	f003 bc95 	b.w	ba8c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6f9a <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b6f9a:	b508      	push	{r3, lr}
        instance().endTransaction();
   b6f9c:	f7ff ff82 	bl	b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b6fa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6fa4:	f003 bc74 	b.w	ba890 <_ZN8SPIClass14endTransactionEv>

000b6fa8 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b6fa8:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b6faa:	f7ff ff7b 	bl	b6ea4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b6fae:	bd08      	pop	{r3, pc}

000b6fb0 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b6fb0:	2300      	movs	r3, #0
   b6fb2:	4802      	ldr	r0, [pc, #8]	; (b6fbc <_GLOBAL__sub_I_hardware_spi+0xc>)
   b6fb4:	461a      	mov	r2, r3
   b6fb6:	4619      	mov	r1, r3
   b6fb8:	f7ff bf60 	b.w	b6e7c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b6fbc:	2003e3f0 	.word	0x2003e3f0

000b6fc0 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b6fc0:	2a01      	cmp	r2, #1
   b6fc2:	d105      	bne.n	b6fd0 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b6fc4:	7a00      	ldrb	r0, [r0, #8]
   b6fc6:	780b      	ldrb	r3, [r1, #0]
   b6fc8:	1a1b      	subs	r3, r3, r0
   b6fca:	4258      	negs	r0, r3
   b6fcc:	4158      	adcs	r0, r3
   b6fce:	4770      	bx	lr
   b6fd0:	2000      	movs	r0, #0
}
   b6fd2:	4770      	bx	lr

000b6fd4 <_ZN6RHMesh5doArpEh>:
{
   b6fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6fd8:	4c25      	ldr	r4, [pc, #148]	; (b7070 <_ZN6RHMesh5doArpEh+0x9c>)
   b6fda:	2301      	movs	r3, #1
{
   b6fdc:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6fde:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b6fe0:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6fe2:	2300      	movs	r3, #0
{
   b6fe4:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b6fe6:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6fe8:	9300      	str	r3, [sp, #0]
   b6fea:	2203      	movs	r2, #3
   b6fec:	23ff      	movs	r3, #255	; 0xff
   b6fee:	4621      	mov	r1, r4
{
   b6ff0:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6ff2:	f000 fbb7 	bl	b7764 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b6ff6:	b120      	cbz	r0, b7002 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b6ff8:	2500      	movs	r5, #0
}
   b6ffa:	4628      	mov	r0, r5
   b6ffc:	b006      	add	sp, #24
   b6ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b7002:	23fa      	movs	r3, #250	; 0xfa
   b7004:	f88d 3017 	strb.w	r3, [sp, #23]
   b7008:	f001 f946 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b700c:	f106 0904 	add.w	r9, r6, #4
   b7010:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b7012:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b7016:	f001 f93f 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
   b701a:	1a29      	subs	r1, r5, r0
   b701c:	2900      	cmp	r1, #0
   b701e:	ddeb      	ble.n	b6ff8 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b7020:	2200      	movs	r2, #0
   b7022:	b289      	uxth	r1, r1
   b7024:	4648      	mov	r0, r9
   b7026:	f7ff fdbe 	bl	b6ba6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b702a:	2800      	cmp	r0, #0
   b702c:	d0f3      	beq.n	b7016 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b702e:	2300      	movs	r3, #0
   b7030:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7034:	e9cd 3300 	strd	r3, r3, [sp]
   b7038:	f10d 0217 	add.w	r2, sp, #23
   b703c:	4621      	mov	r1, r4
   b703e:	4630      	mov	r0, r6
   b7040:	f000 fb9a 	bl	b7778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7044:	4605      	mov	r5, r0
   b7046:	2800      	cmp	r0, #0
   b7048:	d0e3      	beq.n	b7012 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b704a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b704e:	2b01      	cmp	r3, #1
   b7050:	d9df      	bls.n	b7012 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7052:	f894 a000 	ldrb.w	sl, [r4]
   b7056:	f1ba 0f02 	cmp.w	sl, #2
   b705a:	d1da      	bne.n	b7012 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b705c:	4648      	mov	r0, r9
   b705e:	f7ff fde7 	bl	b6c30 <_ZN10RHDatagram10headerFromEv>
   b7062:	4653      	mov	r3, sl
   b7064:	4602      	mov	r2, r0
   b7066:	4639      	mov	r1, r7
   b7068:	4630      	mov	r0, r6
   b706a:	f000 faf3 	bl	b7654 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b706e:	e7c4      	b.n	b6ffa <_ZN6RHMesh5doArpEh+0x26>
   b7070:	2003e408 	.word	0x2003e408

000b7074 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b7074:	2a01      	cmp	r2, #1
{
   b7076:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b707a:	4607      	mov	r7, r0
   b707c:	460e      	mov	r6, r1
   b707e:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b7080:	d93b      	bls.n	b70fa <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7082:	794d      	ldrb	r5, [r1, #5]
   b7084:	2d02      	cmp	r5, #2
   b7086:	d130      	bne.n	b70ea <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b7088:	f100 0804 	add.w	r8, r0, #4
   b708c:	79c9      	ldrb	r1, [r1, #7]
   b708e:	9101      	str	r1, [sp, #4]
   b7090:	4640      	mov	r0, r8
   b7092:	f7ff fdcd 	bl	b6c30 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7096:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b7098:	462b      	mov	r3, r5
   b709a:	4602      	mov	r2, r0
   b709c:	9901      	ldr	r1, [sp, #4]
   b709e:	4638      	mov	r0, r7
   b70a0:	f000 fad8 	bl	b7654 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b70a4:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b70a6:	f106 0308 	add.w	r3, r6, #8
   b70aa:	2400      	movs	r4, #0
   b70ac:	4622      	mov	r2, r4
   b70ae:	4295      	cmp	r5, r2
   b70b0:	f104 0401 	add.w	r4, r4, #1
   b70b4:	b2e4      	uxtb	r4, r4
   b70b6:	d904      	bls.n	b70c2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b70b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b70bc:	7a39      	ldrb	r1, [r7, #8]
   b70be:	4291      	cmp	r1, r2
   b70c0:	d1f4      	bne.n	b70ac <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b70c2:	f104 0108 	add.w	r1, r4, #8
   b70c6:	440e      	add	r6, r1
	while (i < numRoutes)
   b70c8:	42a5      	cmp	r5, r4
   b70ca:	d916      	bls.n	b70fa <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b70cc:	f816 1b01 	ldrb.w	r1, [r6], #1
   b70d0:	9101      	str	r1, [sp, #4]
   b70d2:	4640      	mov	r0, r8
   b70d4:	f7ff fdac 	bl	b6c30 <_ZN10RHDatagram10headerFromEv>
   b70d8:	3401      	adds	r4, #1
   b70da:	4602      	mov	r2, r0
   b70dc:	9901      	ldr	r1, [sp, #4]
   b70de:	2302      	movs	r3, #2
   b70e0:	4638      	mov	r0, r7
   b70e2:	b2e4      	uxtb	r4, r4
   b70e4:	f000 fab6 	bl	b7654 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b70e8:	e7ee      	b.n	b70c8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b70ea:	2d03      	cmp	r5, #3
   b70ec:	d105      	bne.n	b70fa <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b70ee:	7989      	ldrb	r1, [r1, #6]
}
   b70f0:	b002      	add	sp, #8
   b70f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b70f6:	f000 ba96 	b.w	b7626 <_ZN8RHRouter13deleteRouteToEh>
}
   b70fa:	b002      	add	sp, #8
   b70fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7100 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b7100:	b510      	push	{r4, lr}
   b7102:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b7104:	f000 fae6 	bl	b76d4 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b7108:	4b01      	ldr	r3, [pc, #4]	; (b7110 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b710a:	6023      	str	r3, [r4, #0]
}
   b710c:	4620      	mov	r0, r4
   b710e:	bd10      	pop	{r4, pc}
   b7110:	000bd064 	.word	0x000bd064

000b7114 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7118:	2af9      	cmp	r2, #249	; 0xf9
{
   b711a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b711e:	4606      	mov	r6, r0
   b7120:	460f      	mov	r7, r1
   b7122:	4614      	mov	r4, r2
   b7124:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7126:	d825      	bhi.n	b7174 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b7128:	2bff      	cmp	r3, #255	; 0xff
   b712a:	d114      	bne.n	b7156 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b712c:	f8df 8048 	ldr.w	r8, [pc, #72]	; b7178 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b7130:	4640      	mov	r0, r8
   b7132:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7134:	4622      	mov	r2, r4
   b7136:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7138:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b713c:	f004 ff5c 	bl	bbff8 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7140:	1c62      	adds	r2, r4, #1
   b7142:	f8cd 9020 	str.w	r9, [sp, #32]
   b7146:	462b      	mov	r3, r5
   b7148:	4641      	mov	r1, r8
   b714a:	4630      	mov	r0, r6
   b714c:	b2d2      	uxtb	r2, r2
}
   b714e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7152:	f000 bb07 	b.w	b7764 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b7156:	4619      	mov	r1, r3
   b7158:	f000 fa21 	bl	b759e <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b715c:	2800      	cmp	r0, #0
   b715e:	d1e5      	bne.n	b712c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b7160:	6833      	ldr	r3, [r6, #0]
   b7162:	4629      	mov	r1, r5
   b7164:	689b      	ldr	r3, [r3, #8]
   b7166:	4630      	mov	r0, r6
   b7168:	4798      	blx	r3
   b716a:	2800      	cmp	r0, #0
   b716c:	d1de      	bne.n	b712c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b716e:	2002      	movs	r0, #2
}
   b7170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7174:	2001      	movs	r0, #1
   b7176:	e7fb      	b.n	b7170 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b7178:	2003e408 	.word	0x2003e408

000b717c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7180:	b089      	sub	sp, #36	; 0x24
   b7182:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7184:	23fa      	movs	r3, #250	; 0xfa
   b7186:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b718a:	f10d 031f 	add.w	r3, sp, #31
   b718e:	9303      	str	r3, [sp, #12]
   b7190:	f10d 031e 	add.w	r3, sp, #30
   b7194:	9302      	str	r3, [sp, #8]
   b7196:	4e5d      	ldr	r6, [pc, #372]	; (b730c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7198:	f10d 031d 	add.w	r3, sp, #29
   b719c:	9301      	str	r3, [sp, #4]
   b719e:	ab07      	add	r3, sp, #28
   b71a0:	9300      	str	r3, [sp, #0]
{     
   b71a2:	4689      	mov	r9, r1
   b71a4:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b71a6:	f10d 031b 	add.w	r3, sp, #27
   b71aa:	f10d 021a 	add.w	r2, sp, #26
   b71ae:	4631      	mov	r1, r6
{     
   b71b0:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b71b4:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b71b6:	f000 fadf 	bl	b7778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b71ba:	4604      	mov	r4, r0
   b71bc:	b920      	cbnz	r0, b71c8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b71be:	2400      	movs	r4, #0
}
   b71c0:	4620      	mov	r0, r4
   b71c2:	b009      	add	sp, #36	; 0x24
   b71c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b71c8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b71cc:	b373      	cbz	r3, b722c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b71ce:	7832      	ldrb	r2, [r6, #0]
   b71d0:	bb62      	cbnz	r2, b722c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b71d2:	f1b8 0f00 	cmp.w	r8, #0
   b71d6:	d003      	beq.n	b71e0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b71d8:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b71dc:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b71e0:	f1bb 0f00 	cmp.w	fp, #0
   b71e4:	d003      	beq.n	b71ee <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b71e6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b71ea:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b71ee:	f1ba 0f00 	cmp.w	sl, #0
   b71f2:	d003      	beq.n	b71fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b71f4:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b71f8:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b71fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b71fe:	b11a      	cbz	r2, b7208 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b7200:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7202:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7206:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b7208:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b720a:	b11a      	cbz	r2, b7214 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b720c:	9915      	ldr	r1, [sp, #84]	; 0x54
   b720e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7212:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7214:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7216:	493e      	ldr	r1, [pc, #248]	; (b7310 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b7218:	3b01      	subs	r3, #1
   b721a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b721c:	429a      	cmp	r2, r3
		*len = msgLen;
   b721e:	bf88      	it	hi
   b7220:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7222:	783a      	ldrb	r2, [r7, #0]
   b7224:	4648      	mov	r0, r9
   b7226:	f004 fee7 	bl	bbff8 <memcpy>
	    return true;
   b722a:	e7c9      	b.n	b71c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b722c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7230:	2aff      	cmp	r2, #255	; 0xff
   b7232:	d1c4      	bne.n	b71be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7234:	2b01      	cmp	r3, #1
   b7236:	d9c2      	bls.n	b71be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b7238:	7832      	ldrb	r2, [r6, #0]
   b723a:	2a01      	cmp	r2, #1
   b723c:	d1bf      	bne.n	b71be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b723e:	7a2a      	ldrb	r2, [r5, #8]
   b7240:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7244:	42a2      	cmp	r2, r4
   b7246:	d0ba      	beq.n	b71be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b7248:	1edf      	subs	r7, r3, #3
   b724a:	4932      	ldr	r1, [pc, #200]	; (b7314 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b724c:	b2ff      	uxtb	r7, r7
   b724e:	2300      	movs	r3, #0
   b7250:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b7254:	4547      	cmp	r7, r8
   b7256:	d906      	bls.n	b7266 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b7258:	f811 0b01 	ldrb.w	r0, [r1], #1
   b725c:	4282      	cmp	r2, r0
   b725e:	f103 0301 	add.w	r3, r3, #1
   b7262:	d1f5      	bne.n	b7250 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b7264:	e7ab      	b.n	b71be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b7266:	f105 0904 	add.w	r9, r5, #4
   b726a:	4648      	mov	r0, r9
   b726c:	f7ff fce0 	bl	b6c30 <_ZN10RHDatagram10headerFromEv>
   b7270:	2302      	movs	r3, #2
   b7272:	4602      	mov	r2, r0
   b7274:	4621      	mov	r1, r4
   b7276:	4628      	mov	r0, r5
   b7278:	f000 f9ec 	bl	b7654 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b727c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7280:	b193      	cbz	r3, b72a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b7282:	4c22      	ldr	r4, [pc, #136]	; (b730c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b7284:	1ba3      	subs	r3, r4, r6
   b7286:	b2db      	uxtb	r3, r3
   b7288:	429f      	cmp	r7, r3
   b728a:	d90c      	bls.n	b72a6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b728c:	78e1      	ldrb	r1, [r4, #3]
   b728e:	9105      	str	r1, [sp, #20]
   b7290:	4648      	mov	r0, r9
   b7292:	f7ff fccd 	bl	b6c30 <_ZN10RHDatagram10headerFromEv>
   b7296:	9905      	ldr	r1, [sp, #20]
   b7298:	4602      	mov	r2, r0
   b729a:	2302      	movs	r3, #2
   b729c:	4628      	mov	r0, r5
   b729e:	f000 f9d9 	bl	b7654 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b72a2:	3401      	adds	r4, #1
   b72a4:	e7ee      	b.n	b7284 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b72a6:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b72a8:	682b      	ldr	r3, [r5, #0]
   b72aa:	7872      	ldrb	r2, [r6, #1]
   b72ac:	68db      	ldr	r3, [r3, #12]
   b72ae:	491a      	ldr	r1, [pc, #104]	; (b7318 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b72b0:	4628      	mov	r0, r5
   b72b2:	4798      	blx	r3
   b72b4:	4604      	mov	r4, r0
   b72b6:	b160      	cbz	r0, b72d2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b72b8:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b72ba:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b72bc:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b72be:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b72c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b72c6:	4911      	ldr	r1, [pc, #68]	; (b730c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b72c8:	9400      	str	r4, [sp, #0]
   b72ca:	4628      	mov	r0, r5
   b72cc:	f000 fa4a 	bl	b7764 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b72d0:	e776      	b.n	b71c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b72d2:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b72d6:	4543      	cmp	r3, r8
   b72d8:	f67f af71 	bls.w	b71be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b72dc:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b72e0:	2b00      	cmp	r3, #0
   b72e2:	f43f af6c 	beq.w	b71be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b72e6:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b72ea:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72ec:	4907      	ldr	r1, [pc, #28]	; (b730c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b72ee:	443e      	add	r6, r7
		tmpMessageLen++;
   b72f0:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b72f2:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b72f8:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b72fa:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72fc:	9300      	str	r3, [sp, #0]
   b72fe:	4628      	mov	r0, r5
   b7300:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b7302:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7306:	f000 f9f7 	bl	b76f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b730a:	e759      	b.n	b71c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b730c:	2003e408 	.word	0x2003e408
   b7310:	2003e409 	.word	0x2003e409
   b7314:	2003e40b 	.word	0x2003e40b
   b7318:	2003e40a 	.word	0x2003e40a

000b731c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b731c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b731e:	b085      	sub	sp, #20
   b7320:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7322:	3004      	adds	r0, #4
{
   b7324:	460e      	mov	r6, r1
   b7326:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7328:	f7ff fc82 	bl	b6c30 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b732c:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b732e:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b7330:	4631      	mov	r1, r6
   b7332:	4628      	mov	r0, r5
   b7334:	f000 f94a 	bl	b75cc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7338:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b733a:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b733c:	d001      	beq.n	b7342 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b733e:	2805      	cmp	r0, #5
   b7340:	d11b      	bne.n	b737a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b7342:	7831      	ldrb	r1, [r6, #0]
   b7344:	4628      	mov	r0, r5
   b7346:	f000 f96e 	bl	b7626 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b734a:	7872      	ldrb	r2, [r6, #1]
   b734c:	7a2b      	ldrb	r3, [r5, #8]
   b734e:	429a      	cmp	r2, r3
   b7350:	d013      	beq.n	b737a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b7352:	4c0b      	ldr	r4, [pc, #44]	; (b7380 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b7354:	2303      	movs	r3, #3
   b7356:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b7358:	7833      	ldrb	r3, [r6, #0]
   b735a:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b735c:	7871      	ldrb	r1, [r6, #1]
   b735e:	2302      	movs	r3, #2
   b7360:	463a      	mov	r2, r7
   b7362:	4628      	mov	r0, r5
   b7364:	f000 f976 	bl	b7654 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b7368:	2300      	movs	r3, #0
   b736a:	9300      	str	r3, [sp, #0]
   b736c:	4621      	mov	r1, r4
   b736e:	7873      	ldrb	r3, [r6, #1]
   b7370:	2202      	movs	r2, #2
   b7372:	4628      	mov	r0, r5
   b7374:	f000 f9f6 	bl	b7764 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7378:	4604      	mov	r4, r0
}
   b737a:	4620      	mov	r0, r4
   b737c:	b005      	add	sp, #20
   b737e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7380:	2003e408 	.word	0x2003e408

000b7384 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7384:	b510      	push	{r4, lr}
   b7386:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b7388:	f7ff fc02 	bl	b6b90 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b738c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b738e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b7390:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b7392:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7394:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b7396:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b7398:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b739a:	f44f 7280 	mov.w	r2, #256	; 0x100
   b739e:	f104 0011 	add.w	r0, r4, #17
   b73a2:	f004 fe51 	bl	bc048 <memset>
}
   b73a6:	4620      	mov	r0, r4
   b73a8:	bd10      	pop	{r4, pc}

000b73aa <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b73aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b73ac:	4604      	mov	r4, r0
   b73ae:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b73b0:	f7ff fc32 	bl	b6c18 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b73b4:	4620      	mov	r0, r4
   b73b6:	2200      	movs	r2, #0
   b73b8:	2180      	movs	r1, #128	; 0x80
   b73ba:	f7ff fc31 	bl	b6c20 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b73be:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b73c0:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b73c2:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b73c6:	f10d 010f 	add.w	r1, sp, #15
   b73ca:	2201      	movs	r2, #1
   b73cc:	4620      	mov	r0, r4
   b73ce:	f7ff fbf4 	bl	b6bba <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b73d2:	4620      	mov	r0, r4
   b73d4:	f7ff fbe3 	bl	b6b9e <_ZN10RHDatagram14waitPacketSentEv>
}
   b73d8:	b004      	add	sp, #16
   b73da:	bd10      	pop	{r4, pc}

000b73dc <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b73dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b73e0:	7b05      	ldrb	r5, [r0, #12]
   b73e2:	3501      	adds	r5, #1
   b73e4:	b2ed      	uxtb	r5, r5
{
   b73e6:	b087      	sub	sp, #28
   b73e8:	4604      	mov	r4, r0
   b73ea:	4689      	mov	r9, r1
   b73ec:	4692      	mov	sl, r2
   b73ee:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b73f0:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b73f2:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b73f4:	7c22      	ldrb	r2, [r4, #16]
   b73f6:	463b      	mov	r3, r7
   b73f8:	429a      	cmp	r2, r3
   b73fa:	f107 0701 	add.w	r7, r7, #1
   b73fe:	b2ff      	uxtb	r7, r7
   b7400:	d36b      	bcc.n	b74da <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b7402:	4629      	mov	r1, r5
   b7404:	4620      	mov	r0, r4
   b7406:	f7ff fc07 	bl	b6c18 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b740a:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b740c:	bf0d      	iteet	eq
   b740e:	22c0      	moveq	r2, #192	; 0xc0
   b7410:	2280      	movne	r2, #128	; 0x80
   b7412:	2140      	movne	r1, #64	; 0x40
   b7414:	2100      	moveq	r1, #0
   b7416:	4620      	mov	r0, r4
   b7418:	f7ff fc02 	bl	b6c20 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b741c:	4643      	mov	r3, r8
   b741e:	4652      	mov	r2, sl
   b7420:	4649      	mov	r1, r9
   b7422:	4620      	mov	r0, r4
   b7424:	f7ff fbc9 	bl	b6bba <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b7428:	4620      	mov	r0, r4
   b742a:	f7ff fbb8 	bl	b6b9e <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b742e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7432:	d054      	beq.n	b74de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b7434:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b7436:	bf82      	ittt	hi
   b7438:	68a3      	ldrhi	r3, [r4, #8]
   b743a:	3301      	addhi	r3, #1
   b743c:	60a3      	strhi	r3, [r4, #8]
   b743e:	f000 ff2b 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b7442:	f44f 7180 	mov.w	r1, #256	; 0x100
   b7446:	4683      	mov	fp, r0
   b7448:	2000      	movs	r0, #0
   b744a:	89e6      	ldrh	r6, [r4, #14]
   b744c:	f003 f9d9 	bl	ba802 <_Z6randomii>
   b7450:	4370      	muls	r0, r6
   b7452:	bf48      	it	mi
   b7454:	30ff      	addmi	r0, #255	; 0xff
   b7456:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b745a:	fa1b f686 	uxtah	r6, fp, r6
   b745e:	f000 ff1b 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
   b7462:	1a30      	subs	r0, r6, r0
   b7464:	2800      	cmp	r0, #0
   b7466:	ddc5      	ble.n	b73f4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b7468:	b281      	uxth	r1, r0
   b746a:	2200      	movs	r2, #0
   b746c:	4620      	mov	r0, r4
   b746e:	f7ff fb9a 	bl	b6ba6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7472:	2800      	cmp	r0, #0
   b7474:	d0f3      	beq.n	b745e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b7476:	f10d 0317 	add.w	r3, sp, #23
   b747a:	9302      	str	r3, [sp, #8]
   b747c:	f10d 0316 	add.w	r3, sp, #22
   b7480:	9301      	str	r3, [sp, #4]
   b7482:	2200      	movs	r2, #0
   b7484:	f10d 0315 	add.w	r3, sp, #21
   b7488:	9300      	str	r3, [sp, #0]
   b748a:	4611      	mov	r1, r2
   b748c:	ab05      	add	r3, sp, #20
   b748e:	4620      	mov	r0, r4
   b7490:	f7ff fbda 	bl	b6c48 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7494:	2800      	cmp	r0, #0
   b7496:	d0e2      	beq.n	b745e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7498:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b749c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b74a0:	4542      	cmp	r2, r8
   b74a2:	d10e      	bne.n	b74c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b74a4:	f894 c004 	ldrb.w	ip, [r4, #4]
   b74a8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b74ac:	458c      	cmp	ip, r1
   b74ae:	d108      	bne.n	b74c2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b74b0:	2b00      	cmp	r3, #0
   b74b2:	da08      	bge.n	b74c6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b74b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b74b8:	42ab      	cmp	r3, r5
   b74ba:	d1d0      	bne.n	b745e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b74bc:	b007      	add	sp, #28
   b74be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b74c2:	2b00      	cmp	r3, #0
   b74c4:	dbcb      	blt.n	b745e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b74c6:	18a1      	adds	r1, r4, r2
   b74c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b74cc:	7c49      	ldrb	r1, [r1, #17]
   b74ce:	4299      	cmp	r1, r3
   b74d0:	d1c5      	bne.n	b745e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b74d2:	4620      	mov	r0, r4
   b74d4:	f7ff ff69 	bl	b73aa <_ZN18RHReliableDatagram11acknowledgeEhh>
   b74d8:	e7c1      	b.n	b745e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b74da:	2000      	movs	r0, #0
   b74dc:	e7ee      	b.n	b74bc <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b74de:	2001      	movs	r0, #1
   b74e0:	e7ec      	b.n	b74bc <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b74e2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b74e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74e6:	b089      	sub	sp, #36	; 0x24
   b74e8:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b74ec:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b74f0:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b74f2:	4604      	mov	r4, r0
   b74f4:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b74f6:	f7ff fb4e 	bl	b6b96 <_ZN10RHDatagram9availableEv>
   b74fa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b74fe:	b920      	cbnz	r0, b750a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b7500:	2500      	movs	r5, #0
}
   b7502:	4628      	mov	r0, r5
   b7504:	b009      	add	sp, #36	; 0x24
   b7506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b750a:	f10d 031f 	add.w	r3, sp, #31
   b750e:	9302      	str	r3, [sp, #8]
   b7510:	f10d 031e 	add.w	r3, sp, #30
   b7514:	9301      	str	r3, [sp, #4]
   b7516:	f10d 031d 	add.w	r3, sp, #29
   b751a:	9300      	str	r3, [sp, #0]
   b751c:	4620      	mov	r0, r4
   b751e:	ab07      	add	r3, sp, #28
   b7520:	f7ff fb92 	bl	b6c48 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7524:	4605      	mov	r5, r0
   b7526:	2800      	cmp	r0, #0
   b7528:	d0ea      	beq.n	b7500 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b752a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b752e:	2b00      	cmp	r3, #0
   b7530:	dbe6      	blt.n	b7500 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b7532:	7922      	ldrb	r2, [r4, #4]
   b7534:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7538:	429a      	cmp	r2, r3
   b753a:	d106      	bne.n	b754a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b753c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7540:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b7544:	4620      	mov	r0, r4
   b7546:	f7ff ff30 	bl	b73aa <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b754a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b754e:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b7552:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7556:	f012 0f40 	tst.w	r2, #64	; 0x40
   b755a:	440c      	add	r4, r1
   b755c:	d002      	beq.n	b7564 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b755e:	7c60      	ldrb	r0, [r4, #17]
   b7560:	4298      	cmp	r0, r3
   b7562:	d0cd      	beq.n	b7500 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7564:	b106      	cbz	r6, b7568 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b7566:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b7568:	f1b9 0f00 	cmp.w	r9, #0
   b756c:	d003      	beq.n	b7576 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b756e:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b7572:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b7576:	f1b8 0f00 	cmp.w	r8, #0
   b757a:	d001      	beq.n	b7580 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b757c:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b7580:	b107      	cbz	r7, b7584 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b7582:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b7584:	7463      	strb	r3, [r4, #17]
		return true;
   b7586:	e7bc      	b.n	b7502 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b7588 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b7588:	4770      	bx	lr

000b758a <_ZN8RHRouter4initEv>:
{
   b758a:	b510      	push	{r4, lr}
   b758c:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b758e:	3004      	adds	r0, #4
   b7590:	f7ff fb34 	bl	b6bfc <_ZN10RHDatagram4initEv>
    if (ret)
   b7594:	b110      	cbz	r0, b759c <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b7596:	231e      	movs	r3, #30
   b7598:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b759c:	bd10      	pop	{r4, pc}

000b759e <_ZN8RHRouter10getRouteToEh>:
{
   b759e:	b510      	push	{r4, lr}
   b75a0:	4602      	mov	r2, r0
   b75a2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b75a4:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b75a8:	428c      	cmp	r4, r1
   b75aa:	d108      	bne.n	b75be <_ZN8RHRouter10getRouteToEh+0x20>
   b75ac:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b75b0:	b12c      	cbz	r4, b75be <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b75b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b75b6:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b75ba:	4418      	add	r0, r3
}
   b75bc:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b75be:	3301      	adds	r3, #1
   b75c0:	2b32      	cmp	r3, #50	; 0x32
   b75c2:	f102 0203 	add.w	r2, r2, #3
   b75c6:	d1ed      	bne.n	b75a4 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b75c8:	2000      	movs	r0, #0
   b75ca:	e7f7      	b.n	b75bc <_ZN8RHRouter10getRouteToEh+0x1e>

000b75cc <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b75cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b75ce:	780b      	ldrb	r3, [r1, #0]
   b75d0:	2bff      	cmp	r3, #255	; 0xff
{
   b75d2:	4605      	mov	r5, r0
   b75d4:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b75d6:	d006      	beq.n	b75e6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b75d8:	4619      	mov	r1, r3
   b75da:	9201      	str	r2, [sp, #4]
   b75dc:	f7ff ffdf 	bl	b759e <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b75e0:	b158      	cbz	r0, b75fa <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b75e2:	7843      	ldrb	r3, [r0, #1]
   b75e4:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b75e6:	4621      	mov	r1, r4
   b75e8:	1d28      	adds	r0, r5, #4
   b75ea:	f7ff fef7 	bl	b73dc <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b75ee:	2800      	cmp	r0, #0
   b75f0:	bf14      	ite	ne
   b75f2:	2000      	movne	r0, #0
   b75f4:	2005      	moveq	r0, #5
}
   b75f6:	b003      	add	sp, #12
   b75f8:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b75fa:	2002      	movs	r0, #2
   b75fc:	e7fb      	b.n	b75f6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b75fe <_ZN8RHRouter11deleteRouteEh>:
{
   b75fe:	b510      	push	{r4, lr}
   b7600:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b7604:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b7606:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b760a:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b760e:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b7612:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7616:	4421      	add	r1, r4
   b7618:	4420      	add	r0, r4
   b761a:	f004 fced 	bl	bbff8 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b761e:	2300      	movs	r3, #0
   b7620:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b7624:	bd10      	pop	{r4, pc}

000b7626 <_ZN8RHRouter13deleteRouteToEh>:
{
   b7626:	b538      	push	{r3, r4, r5, lr}
   b7628:	460a      	mov	r2, r1
   b762a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b762c:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b7630:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b7634:	b2d9      	uxtb	r1, r3
   b7636:	5d65      	ldrb	r5, [r4, r5]
   b7638:	4295      	cmp	r5, r2
   b763a:	d103      	bne.n	b7644 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b763c:	f7ff ffdf 	bl	b75fe <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b7640:	2001      	movs	r0, #1
}
   b7642:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7644:	3301      	adds	r3, #1
   b7646:	2b32      	cmp	r3, #50	; 0x32
   b7648:	d1f2      	bne.n	b7630 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b764a:	2000      	movs	r0, #0
   b764c:	e7f9      	b.n	b7642 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b764e <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b764e:	2100      	movs	r1, #0
   b7650:	f7ff bfd5 	b.w	b75fe <_ZN8RHRouter11deleteRouteEh>

000b7654 <_ZN8RHRouter10addRouteToEhhh>:
{
   b7654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7656:	4616      	mov	r6, r2
   b7658:	461f      	mov	r7, r3
   b765a:	4604      	mov	r4, r0
   b765c:	460d      	mov	r5, r1
   b765e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7660:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7664:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7668:	5c11      	ldrb	r1, [r2, r0]
   b766a:	42a9      	cmp	r1, r5
   b766c:	d105      	bne.n	b767a <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b766e:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7670:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7674:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b767a:	3301      	adds	r3, #1
   b767c:	2b32      	cmp	r3, #50	; 0x32
   b767e:	d1f1      	bne.n	b7664 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b7680:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b7682:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b7686:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b768a:	5c11      	ldrb	r1, [r2, r0]
   b768c:	b919      	cbnz	r1, b7696 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b768e:	4420      	add	r0, r4
   b7690:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b7694:	e7ec      	b.n	b7670 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7696:	3301      	adds	r3, #1
   b7698:	2b32      	cmp	r3, #50	; 0x32
   b769a:	d1f4      	bne.n	b7686 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b769c:	4620      	mov	r0, r4
   b769e:	f7ff ffd6 	bl	b764e <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b76a2:	4620      	mov	r0, r4
   b76a4:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b76a8:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b76ac:	b92a      	cbnz	r2, b76ba <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b76ae:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b76b2:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b76b6:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b76ba:	3003      	adds	r0, #3
   b76bc:	4298      	cmp	r0, r3
   b76be:	d1f3      	bne.n	b76a8 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b76c0:	e7da      	b.n	b7678 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b76c2 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b76c2:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b76c6:	2200      	movs	r2, #0
   b76c8:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b76cc:	3003      	adds	r0, #3
   b76ce:	4298      	cmp	r0, r3
   b76d0:	d1fa      	bne.n	b76c8 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b76d2:	4770      	bx	lr

000b76d4 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b76d4:	b510      	push	{r4, lr}
   b76d6:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b76d8:	3004      	adds	r0, #4
   b76da:	f7ff fe53 	bl	b7384 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b76de:	4b05      	ldr	r3, [pc, #20]	; (b76f4 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b76e0:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b76e2:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b76e6:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b76e8:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b76ec:	f7ff ffe9 	bl	b76c2 <_ZN8RHRouter17clearRoutingTableEv>
}
   b76f0:	4620      	mov	r0, r4
   b76f2:	bd10      	pop	{r4, pc}
   b76f4:	000bd07c 	.word	0x000bd07c

000b76f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b76f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b76fc:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76fe:	6840      	ldr	r0, [r0, #4]
{
   b7700:	9101      	str	r1, [sp, #4]
   b7702:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7704:	6803      	ldr	r3, [r0, #0]
{
   b7706:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b770a:	699b      	ldr	r3, [r3, #24]
{
   b770c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b7710:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7712:	4798      	blx	r3
   b7714:	f106 0805 	add.w	r8, r6, #5
   b7718:	4580      	cmp	r8, r0
   b771a:	d81c      	bhi.n	b7756 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b771c:	4d10      	ldr	r5, [pc, #64]	; (b7760 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b771e:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b7720:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b7724:	2300      	movs	r3, #0
   b7726:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b7728:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b772c:	70eb      	strb	r3, [r5, #3]
   b772e:	1c5a      	adds	r2, r3, #1
   b7730:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b7734:	1d68      	adds	r0, r5, #5
   b7736:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b7738:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b773a:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b773e:	f004 fc5b 	bl	bbff8 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7742:	6823      	ldr	r3, [r4, #0]
   b7744:	685b      	ldr	r3, [r3, #4]
   b7746:	fa5f f288 	uxtb.w	r2, r8
   b774a:	4629      	mov	r1, r5
   b774c:	4620      	mov	r0, r4
}
   b774e:	b002      	add	sp, #8
   b7750:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7754:	4718      	bx	r3
}
   b7756:	2001      	movs	r0, #1
   b7758:	b002      	add	sp, #8
   b775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b775e:	bf00      	nop
   b7760:	2003e502 	.word	0x2003e502

000b7764 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b7764:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b7766:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b776a:	9401      	str	r4, [sp, #4]
   b776c:	7a04      	ldrb	r4, [r0, #8]
   b776e:	9400      	str	r4, [sp, #0]
   b7770:	f7ff ffc2 	bl	b76f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b7774:	b002      	add	sp, #8
   b7776:	bd10      	pop	{r4, pc}

000b7778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b777c:	b087      	sub	sp, #28
   b777e:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7780:	23ff      	movs	r3, #255	; 0xff
   b7782:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7786:	f10d 0317 	add.w	r3, sp, #23
   b778a:	9302      	str	r3, [sp, #8]
   b778c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b7860 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b7790:	f10d 0316 	add.w	r3, sp, #22
   b7794:	9301      	str	r3, [sp, #4]
   b7796:	f10d 0315 	add.w	r3, sp, #21
   b779a:	9300      	str	r3, [sp, #0]
{  
   b779c:	4604      	mov	r4, r0
   b779e:	4688      	mov	r8, r1
   b77a0:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b77a2:	ab05      	add	r3, sp, #20
   b77a4:	f10d 0213 	add.w	r2, sp, #19
   b77a8:	4649      	mov	r1, r9
   b77aa:	3004      	adds	r0, #4
{  
   b77ac:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b77b0:	f7ff fe97 	bl	b74e2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b77b4:	4605      	mov	r5, r0
   b77b6:	b908      	cbnz	r0, b77bc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b77b8:	2500      	movs	r5, #0
   b77ba:	e038      	b.n	b782e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b77bc:	6823      	ldr	r3, [r4, #0]
   b77be:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b77c2:	681b      	ldr	r3, [r3, #0]
   b77c4:	4649      	mov	r1, r9
   b77c6:	4620      	mov	r0, r4
   b77c8:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b77ca:	f899 3000 	ldrb.w	r3, [r9]
   b77ce:	7a22      	ldrb	r2, [r4, #8]
   b77d0:	429a      	cmp	r2, r3
   b77d2:	d001      	beq.n	b77d8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b77d4:	2bff      	cmp	r3, #255	; 0xff
   b77d6:	d12e      	bne.n	b7836 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b77d8:	b117      	cbz	r7, b77e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b77da:	4b21      	ldr	r3, [pc, #132]	; (b7860 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77dc:	785b      	ldrb	r3, [r3, #1]
   b77de:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b77e0:	f1bb 0f00 	cmp.w	fp, #0
   b77e4:	d003      	beq.n	b77ee <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b77e6:	4b1e      	ldr	r3, [pc, #120]	; (b7860 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77e8:	781b      	ldrb	r3, [r3, #0]
   b77ea:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b77ee:	f1ba 0f00 	cmp.w	sl, #0
   b77f2:	d003      	beq.n	b77fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b77f4:	4b1a      	ldr	r3, [pc, #104]	; (b7860 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77f6:	78db      	ldrb	r3, [r3, #3]
   b77f8:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b77fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b77fe:	b11b      	cbz	r3, b7808 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b7800:	4b17      	ldr	r3, [pc, #92]	; (b7860 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7802:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b7804:	791b      	ldrb	r3, [r3, #4]
   b7806:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b7808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b780a:	b11b      	cbz	r3, b7814 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b780c:	4b14      	ldr	r3, [pc, #80]	; (b7860 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b780e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7810:	789b      	ldrb	r3, [r3, #2]
   b7812:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7814:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b7818:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b781a:	4912      	ldr	r1, [pc, #72]	; (b7864 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b781c:	3b05      	subs	r3, #5
   b781e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7820:	429a      	cmp	r2, r3
		*len = msgLen;
   b7822:	bf88      	it	hi
   b7824:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7826:	7832      	ldrb	r2, [r6, #0]
   b7828:	4640      	mov	r0, r8
   b782a:	f004 fbe5 	bl	bbff8 <memcpy>
}
   b782e:	4628      	mov	r0, r5
   b7830:	b007      	add	sp, #28
   b7832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b7836:	f899 3002 	ldrb.w	r3, [r9, #2]
   b783a:	1c5a      	adds	r2, r3, #1
   b783c:	f889 2002 	strb.w	r2, [r9, #2]
   b7840:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b7844:	429a      	cmp	r2, r3
   b7846:	d9b7      	bls.n	b77b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b7848:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b784c:	2b00      	cmp	r3, #0
   b784e:	d0b3      	beq.n	b77b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b7850:	6823      	ldr	r3, [r4, #0]
   b7852:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7856:	685b      	ldr	r3, [r3, #4]
   b7858:	4649      	mov	r1, r9
   b785a:	4620      	mov	r0, r4
   b785c:	4798      	blx	r3
   b785e:	e7ab      	b.n	b77b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b7860:	2003e502 	.word	0x2003e502
   b7864:	2003e507 	.word	0x2003e507

000b7868 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7868:	b510      	push	{r4, lr}
   b786a:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b786c:	6a00      	ldr	r0, [r0, #32]
   b786e:	6803      	ldr	r3, [r0, #0]
   b7870:	68db      	ldr	r3, [r3, #12]
   b7872:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b7874:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7878:	28ff      	cmp	r0, #255	; 0xff
   b787a:	d002      	beq.n	b7882 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b787c:	2101      	movs	r1, #1
   b787e:	f003 fda3 	bl	bb3c8 <pinMode>

    deselectSlave();
   b7882:	6823      	ldr	r3, [r4, #0]
   b7884:	4620      	mov	r0, r4
   b7886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7888:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b788a:	2064      	movs	r0, #100	; 0x64
   b788c:	f001 f870 	bl	b8970 <delay>
#endif
    
    return true;
}
   b7890:	2001      	movs	r0, #1
   b7892:	bd10      	pop	{r4, pc}

000b7894 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b7894:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7898:	2100      	movs	r1, #0
   b789a:	f003 bda6 	b.w	bb3ea <digitalWrite>

000b789e <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b789e:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b78a2:	2101      	movs	r1, #1
   b78a4:	f003 bda1 	b.w	bb3ea <digitalWrite>

000b78a8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b78a8:	b570      	push	{r4, r5, r6, lr}
   b78aa:	4604      	mov	r4, r0
   b78ac:	460d      	mov	r5, r1
   b78ae:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b78b0:	f7ff fa7e 	bl	b6db0 <_ZN15RHGenericDriverC1Ev>
   b78b4:	4b03      	ldr	r3, [pc, #12]	; (b78c4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b78b6:	6023      	str	r3, [r4, #0]
   b78b8:	6226      	str	r6, [r4, #32]
   b78ba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b78be:	4620      	mov	r0, r4
   b78c0:	bd70      	pop	{r4, r5, r6, pc}
   b78c2:	bf00      	nop
   b78c4:	000bd08c 	.word	0x000bd08c

000b78c8 <_ZN11RHSPIDriver7spiReadEh>:
{
   b78c8:	b538      	push	{r3, r4, r5, lr}
   b78ca:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b78cc:	6a00      	ldr	r0, [r0, #32]
   b78ce:	6803      	ldr	r3, [r0, #0]
   b78d0:	6a1b      	ldr	r3, [r3, #32]
{
   b78d2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b78d4:	4798      	blx	r3
    selectSlave();
   b78d6:	6823      	ldr	r3, [r4, #0]
   b78d8:	4620      	mov	r0, r4
   b78da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b78dc:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b78de:	6a20      	ldr	r0, [r4, #32]
   b78e0:	6803      	ldr	r3, [r0, #0]
   b78e2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b78e6:	681b      	ldr	r3, [r3, #0]
   b78e8:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b78ea:	6a20      	ldr	r0, [r4, #32]
   b78ec:	6803      	ldr	r3, [r0, #0]
   b78ee:	2100      	movs	r1, #0
   b78f0:	681b      	ldr	r3, [r3, #0]
   b78f2:	4798      	blx	r3
    deselectSlave();
   b78f4:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b78f6:	4605      	mov	r5, r0
    deselectSlave();
   b78f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b78fa:	4620      	mov	r0, r4
   b78fc:	4798      	blx	r3
    _spi.endTransaction();
   b78fe:	6a20      	ldr	r0, [r4, #32]
   b7900:	6803      	ldr	r3, [r0, #0]
   b7902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7904:	4798      	blx	r3
}
   b7906:	4628      	mov	r0, r5
   b7908:	bd38      	pop	{r3, r4, r5, pc}

000b790a <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b790a:	b570      	push	{r4, r5, r6, lr}
   b790c:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b790e:	6a00      	ldr	r0, [r0, #32]
   b7910:	6803      	ldr	r3, [r0, #0]
   b7912:	6a1b      	ldr	r3, [r3, #32]
{
   b7914:	4616      	mov	r6, r2
   b7916:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7918:	4798      	blx	r3
    selectSlave();
   b791a:	6823      	ldr	r3, [r4, #0]
   b791c:	4620      	mov	r0, r4
   b791e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7920:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b7922:	6a20      	ldr	r0, [r4, #32]
   b7924:	6803      	ldr	r3, [r0, #0]
   b7926:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b792a:	681b      	ldr	r3, [r3, #0]
   b792c:	4798      	blx	r3
   b792e:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b7930:	6a20      	ldr	r0, [r4, #32]
   b7932:	6803      	ldr	r3, [r0, #0]
   b7934:	4631      	mov	r1, r6
   b7936:	681b      	ldr	r3, [r3, #0]
   b7938:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b793a:	2001      	movs	r0, #1
   b793c:	f000 fca4 	bl	b8288 <HAL_Delay_Microseconds>
    deselectSlave();
   b7940:	6823      	ldr	r3, [r4, #0]
   b7942:	4620      	mov	r0, r4
   b7944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7946:	4798      	blx	r3
    _spi.endTransaction();
   b7948:	6a20      	ldr	r0, [r4, #32]
   b794a:	6803      	ldr	r3, [r0, #0]
   b794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b794e:	4798      	blx	r3
}
   b7950:	4628      	mov	r0, r5
   b7952:	bd70      	pop	{r4, r5, r6, pc}

000b7954 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b7954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7956:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7958:	6a00      	ldr	r0, [r0, #32]
{
   b795a:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b795c:	6803      	ldr	r3, [r0, #0]
   b795e:	6a1b      	ldr	r3, [r3, #32]
{
   b7960:	460f      	mov	r7, r1
   b7962:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7964:	4798      	blx	r3
    selectSlave();
   b7966:	6823      	ldr	r3, [r4, #0]
   b7968:	4620      	mov	r0, r4
   b796a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b796c:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b796e:	6a20      	ldr	r0, [r4, #32]
   b7970:	6803      	ldr	r3, [r0, #0]
   b7972:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b7976:	681b      	ldr	r3, [r3, #0]
   b7978:	4798      	blx	r3
   b797a:	442e      	add	r6, r5
   b797c:	4607      	mov	r7, r0
    while (len--)
   b797e:	42b5      	cmp	r5, r6
   b7980:	d007      	beq.n	b7992 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b7982:	6a20      	ldr	r0, [r4, #32]
   b7984:	6803      	ldr	r3, [r0, #0]
   b7986:	2100      	movs	r1, #0
   b7988:	681b      	ldr	r3, [r3, #0]
   b798a:	4798      	blx	r3
   b798c:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b7990:	e7f5      	b.n	b797e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b7992:	6823      	ldr	r3, [r4, #0]
   b7994:	4620      	mov	r0, r4
   b7996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7998:	4798      	blx	r3
    _spi.endTransaction();
   b799a:	6a20      	ldr	r0, [r4, #32]
   b799c:	6803      	ldr	r3, [r0, #0]
   b799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b79a0:	4798      	blx	r3
}
   b79a2:	4638      	mov	r0, r7
   b79a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79a6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b79a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79a8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b79aa:	6a00      	ldr	r0, [r0, #32]
{
   b79ac:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b79ae:	6803      	ldr	r3, [r0, #0]
   b79b0:	6a1b      	ldr	r3, [r3, #32]
{
   b79b2:	460f      	mov	r7, r1
   b79b4:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b79b6:	4798      	blx	r3
    selectSlave();
   b79b8:	6823      	ldr	r3, [r4, #0]
   b79ba:	4620      	mov	r0, r4
   b79bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b79be:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b79c0:	6a20      	ldr	r0, [r4, #32]
   b79c2:	6803      	ldr	r3, [r0, #0]
   b79c4:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b79c8:	681b      	ldr	r3, [r3, #0]
   b79ca:	4798      	blx	r3
   b79cc:	442e      	add	r6, r5
   b79ce:	4607      	mov	r7, r0
    while (len--)
   b79d0:	42b5      	cmp	r5, r6
   b79d2:	d006      	beq.n	b79e2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b79d4:	6a20      	ldr	r0, [r4, #32]
   b79d6:	f815 1b01 	ldrb.w	r1, [r5], #1
   b79da:	6803      	ldr	r3, [r0, #0]
   b79dc:	681b      	ldr	r3, [r3, #0]
   b79de:	4798      	blx	r3
    while (len--)
   b79e0:	e7f6      	b.n	b79d0 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b79e2:	6823      	ldr	r3, [r4, #0]
   b79e4:	4620      	mov	r0, r4
   b79e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b79e8:	4798      	blx	r3
    _spi.endTransaction();
   b79ea:	6a20      	ldr	r0, [r4, #32]
   b79ec:	6803      	ldr	r3, [r0, #0]
   b79ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b79f0:	4798      	blx	r3
}
   b79f2:	4638      	mov	r0, r7
   b79f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79f6 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b79f6:	6a00      	ldr	r0, [r0, #32]
   b79f8:	6803      	ldr	r3, [r0, #0]
   b79fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b79fc:	4718      	bx	r3

000b79fe <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b79fe:	2001      	movs	r0, #1
   b7a00:	4770      	bx	lr

000b7a02 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b7a02:	20fb      	movs	r0, #251	; 0xfb
   b7a04:	4770      	bx	lr

000b7a06 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b7a06:	4770      	bx	lr

000b7a08 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b7a08:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b7a0a:	7903      	ldrb	r3, [r0, #4]
   b7a0c:	2b05      	cmp	r3, #5
{
   b7a0e:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b7a10:	d010      	beq.n	b7a34 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b7a12:	6803      	ldr	r3, [r0, #0]
   b7a14:	2105      	movs	r1, #5
   b7a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7a1a:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b7a1c:	2207      	movs	r2, #7
   b7a1e:	2101      	movs	r1, #1
   b7a20:	4620      	mov	r0, r4
   b7a22:	f7ff ff72 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b7a26:	2280      	movs	r2, #128	; 0x80
   b7a28:	2140      	movs	r1, #64	; 0x40
   b7a2a:	4620      	mov	r0, r4
   b7a2c:	f7ff ff6d 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b7a30:	2305      	movs	r3, #5
   b7a32:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b7a34:	7923      	ldrb	r3, [r4, #4]
   b7a36:	2b05      	cmp	r3, #5
   b7a38:	d0fc      	beq.n	b7a34 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b7a3a:	7e20      	ldrb	r0, [r4, #24]
}
   b7a3c:	bd10      	pop	{r4, pc}

000b7a3e <_ZN7RH_RF95D0Ev>:
   b7a3e:	b510      	push	{r4, lr}
   b7a40:	f44f 7198 	mov.w	r1, #304	; 0x130
   b7a44:	4604      	mov	r4, r0
   b7a46:	f7fc fb2a 	bl	b409e <_ZdlPvj>
   b7a4a:	4620      	mov	r0, r4
   b7a4c:	bd10      	pop	{r4, pc}

000b7a4e <_ZN7RH_RF955sleepEv>:
{
   b7a4e:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b7a50:	7903      	ldrb	r3, [r0, #4]
   b7a52:	2b01      	cmp	r3, #1
{
   b7a54:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b7a56:	d00b      	beq.n	b7a70 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b7a58:	6803      	ldr	r3, [r0, #0]
   b7a5a:	2101      	movs	r1, #1
   b7a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7a60:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b7a62:	2200      	movs	r2, #0
   b7a64:	2101      	movs	r1, #1
   b7a66:	4620      	mov	r0, r4
   b7a68:	f7ff ff4f 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b7a6c:	2301      	movs	r3, #1
   b7a6e:	7123      	strb	r3, [r4, #4]
}
   b7a70:	2001      	movs	r0, #1
   b7a72:	bd10      	pop	{r4, pc}

000b7a74 <_ZN7RH_RF954recvEPhS0_>:
{
   b7a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b7a76:	6803      	ldr	r3, [r0, #0]
   b7a78:	68db      	ldr	r3, [r3, #12]
{
   b7a7a:	4604      	mov	r4, r0
   b7a7c:	460f      	mov	r7, r1
   b7a7e:	4615      	mov	r5, r2
    if (!available())
   b7a80:	4798      	blx	r3
   b7a82:	4606      	mov	r6, r0
   b7a84:	b1b0      	cbz	r0, b7ab4 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b7a86:	b187      	cbz	r7, b7aaa <_ZN7RH_RF954recvEPhS0_+0x36>
   b7a88:	b17d      	cbz	r5, b7aaa <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b7a8a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b7a8e:	782a      	ldrb	r2, [r5, #0]
   b7a90:	3b03      	subs	r3, #3
   b7a92:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b7a94:	bfde      	ittt	le
   b7a96:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b7a9a:	3b04      	suble	r3, #4
   b7a9c:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b7a9e:	782a      	ldrb	r2, [r5, #0]
   b7aa0:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b7aa4:	4638      	mov	r0, r7
   b7aa6:	f004 faa7 	bl	bbff8 <memcpy>
    _rxBufValid = false;
   b7aaa:	2300      	movs	r3, #0
   b7aac:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7ab0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b7ab4:	4630      	mov	r0, r6
   b7ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ab8 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b7ab8:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b7aba:	b538      	push	{r3, r4, r5, lr}
   b7abc:	4605      	mov	r5, r0
   b7abe:	460c      	mov	r4, r1
	if (power > 20)
   b7ac0:	dc14      	bgt.n	b7aec <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b7ac2:	2901      	cmp	r1, #1
   b7ac4:	dd14      	ble.n	b7af0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b7ac6:	2911      	cmp	r1, #17
   b7ac8:	dd13      	ble.n	b7af2 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b7aca:	2207      	movs	r2, #7
   b7acc:	214d      	movs	r1, #77	; 0x4d
   b7ace:	4628      	mov	r0, r5
   b7ad0:	f7ff ff1b 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b7ad4:	3c03      	subs	r4, #3
   b7ad6:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7ad8:	1ea2      	subs	r2, r4, #2
   b7ada:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b7ade:	4628      	mov	r0, r5
   b7ae0:	b2d2      	uxtb	r2, r2
}
   b7ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7ae6:	2109      	movs	r1, #9
   b7ae8:	f7ff bf0f 	b.w	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b7aec:	2414      	movs	r4, #20
   b7aee:	e7ec      	b.n	b7aca <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b7af0:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7af2:	2204      	movs	r2, #4
   b7af4:	214d      	movs	r1, #77	; 0x4d
   b7af6:	4628      	mov	r0, r5
   b7af8:	f7ff ff07 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
   b7afc:	e7ec      	b.n	b7ad8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b7b00 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b7b00:	b538      	push	{r3, r4, r5, lr}
   b7b02:	4604      	mov	r4, r0
   b7b04:	4615      	mov	r5, r2
    _rxBufValid(0)
   b7b06:	461a      	mov	r2, r3
   b7b08:	f7ff fece 	bl	b78a8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b7b0c:	4b09      	ldr	r3, [pc, #36]	; (b7b34 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b7b0e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b7b10:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b7b12:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b7b14:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b7b18:	2201      	movs	r2, #1
    _rxBufValid(0)
   b7b1a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b7b1e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b7b22:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b7b26:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b7b2a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b7b2e:	4620      	mov	r0, r4
   b7b30:	bd38      	pop	{r3, r4, r5, pc}
   b7b32:	bf00      	nop
   b7b34:	000bd124 	.word	0x000bd124

000b7b38 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b7b38:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b7b3c:	2b03      	cmp	r3, #3
   b7b3e:	d91b      	bls.n	b7b78 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b7b40:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b7b44:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b7b46:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b7b4a:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b7b4c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b7b50:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b7b52:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b7b56:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b7b58:	7983      	ldrb	r3, [r0, #6]
   b7b5a:	b933      	cbnz	r3, b7b6a <_ZN7RH_RF9513validateRxBufEv+0x32>
   b7b5c:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b7b5e:	7942      	ldrb	r2, [r0, #5]
   b7b60:	429a      	cmp	r2, r3
   b7b62:	d002      	beq.n	b7b6a <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b7b64:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b7b66:	2bff      	cmp	r3, #255	; 0xff
   b7b68:	d106      	bne.n	b7b78 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b7b6a:	8a83      	ldrh	r3, [r0, #20]
   b7b6c:	3301      	adds	r3, #1
   b7b6e:	b29b      	uxth	r3, r3
   b7b70:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b7b72:	2301      	movs	r3, #1
   b7b74:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b7b78:	4770      	bx	lr
   b7b7a:	0000      	movs	r0, r0
   b7b7c:	0000      	movs	r0, r0
	...

000b7b80 <_ZN7RH_RF9512setFrequencyEf>:
{
   b7b80:	b538      	push	{r3, r4, r5, lr}
   b7b82:	4604      	mov	r4, r0
   b7b84:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b88:	ee10 0a10 	vmov	r0, s0
{
   b7b8c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b90:	f003 fe90 	bl	bb8b4 <__aeabi_f2d>
   b7b94:	a317      	add	r3, pc, #92	; (adr r3, b7bf4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b7b96:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b9a:	f003 fee3 	bl	bb964 <__aeabi_dmul>
   b7b9e:	a317      	add	r3, pc, #92	; (adr r3, b7bfc <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b7ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7ba4:	f004 f808 	bl	bbbb8 <__aeabi_ddiv>
   b7ba8:	f004 f9b4 	bl	bbf14 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7bac:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7bae:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7bb0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b7bb4:	4620      	mov	r0, r4
   b7bb6:	f7ff fea8 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b7bba:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b7bbe:	2107      	movs	r1, #7
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	f7ff fea2 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b7bc6:	b2ea      	uxtb	r2, r5
   b7bc8:	2108      	movs	r1, #8
   b7bca:	4620      	mov	r0, r4
   b7bcc:	f7ff fe9d 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b7bd0:	eddf 7a07 	vldr	s15, [pc, #28]	; b7bf0 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b7bd4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b7bd8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b7bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7be0:	bfac      	ite	ge
   b7be2:	2301      	movge	r3, #1
   b7be4:	2300      	movlt	r3, #0
}
   b7be6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b7be8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b7bec:	bd38      	pop	{r3, r4, r5, pc}
   b7bee:	bf00      	nop
   b7bf0:	4442c000 	.word	0x4442c000
   b7bf4:	00000000 	.word	0x00000000
   b7bf8:	412e8480 	.word	0x412e8480
   b7bfc:	00000000 	.word	0x00000000
   b7c00:	404e8480 	.word	0x404e8480

000b7c04 <_ZN7RH_RF9511setModeIdleEv>:
{
   b7c04:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b7c06:	7903      	ldrb	r3, [r0, #4]
   b7c08:	2b02      	cmp	r3, #2
{
   b7c0a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b7c0c:	d00b      	beq.n	b7c26 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b7c0e:	6803      	ldr	r3, [r0, #0]
   b7c10:	2102      	movs	r1, #2
   b7c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7c16:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b7c18:	2201      	movs	r2, #1
   b7c1a:	4611      	mov	r1, r2
   b7c1c:	4620      	mov	r0, r4
   b7c1e:	f7ff fe74 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b7c22:	2302      	movs	r3, #2
   b7c24:	7123      	strb	r3, [r4, #4]
}
   b7c26:	bd10      	pop	{r4, pc}

000b7c28 <_ZN7RH_RF9515handleInterruptEv>:
{
   b7c28:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7c2a:	2112      	movs	r1, #18
{
   b7c2c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7c2e:	f7ff fe4b 	bl	b78c8 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7c32:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7c34:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7c36:	4620      	mov	r0, r4
   b7c38:	f7ff fe46 	bl	b78c8 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c3c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7c3e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c40:	2112      	movs	r1, #18
   b7c42:	4620      	mov	r0, r4
   b7c44:	f7ff fe61 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b7c48:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b7c4a:	2b04      	cmp	r3, #4
   b7c4c:	d107      	bne.n	b7c5e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7c4e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b7c52:	d117      	bne.n	b7c84 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b7c54:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b7c58:	b10b      	cbz	r3, b7c5e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7c5a:	0670      	lsls	r0, r6, #25
   b7c5c:	d512      	bpl.n	b7c84 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b7c5e:	7923      	ldrb	r3, [r4, #4]
   b7c60:	2b04      	cmp	r3, #4
   b7c62:	d101      	bne.n	b7c68 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b7c64:	0669      	lsls	r1, r5, #25
   b7c66:	d422      	bmi.n	b7cae <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b7c68:	7923      	ldrb	r3, [r4, #4]
   b7c6a:	2b03      	cmp	r3, #3
   b7c6c:	d101      	bne.n	b7c72 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b7c6e:	072a      	lsls	r2, r5, #28
   b7c70:	d468      	bmi.n	b7d44 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b7c72:	7923      	ldrb	r3, [r4, #4]
   b7c74:	2b05      	cmp	r3, #5
   b7c76:	d10e      	bne.n	b7c96 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b7c78:	076b      	lsls	r3, r5, #29
   b7c7a:	d50c      	bpl.n	b7c96 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b7c7c:	f005 0501 	and.w	r5, r5, #1
   b7c80:	7625      	strb	r5, [r4, #24]
   b7c82:	e063      	b.n	b7d4c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b7c84:	8a63      	ldrh	r3, [r4, #18]
   b7c86:	3301      	adds	r3, #1
   b7c88:	b29b      	uxth	r3, r3
   b7c8a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b7c8c:	2300      	movs	r3, #0
   b7c8e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7c92:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c96:	22ff      	movs	r2, #255	; 0xff
   b7c98:	2112      	movs	r1, #18
   b7c9a:	4620      	mov	r0, r4
   b7c9c:	f7ff fe35 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7ca0:	4620      	mov	r0, r4
   b7ca2:	22ff      	movs	r2, #255	; 0xff
}
   b7ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7ca8:	2112      	movs	r1, #18
   b7caa:	f7ff be2e 	b.w	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7cae:	2113      	movs	r1, #19
   b7cb0:	4620      	mov	r0, r4
   b7cb2:	f7ff fe09 	bl	b78c8 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7cb6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7cb8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7cba:	4620      	mov	r0, r4
   b7cbc:	f7ff fe04 	bl	b78c8 <_ZN11RHSPIDriver7spiReadEh>
   b7cc0:	210d      	movs	r1, #13
   b7cc2:	4602      	mov	r2, r0
   b7cc4:	4620      	mov	r0, r4
   b7cc6:	f7ff fe20 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b7cca:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b7cce:	462b      	mov	r3, r5
   b7cd0:	2100      	movs	r1, #0
   b7cd2:	4620      	mov	r0, r4
   b7cd4:	f7ff fe3e 	bl	b7954 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7cd8:	2119      	movs	r1, #25
	_bufLen = len;
   b7cda:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7cde:	4620      	mov	r0, r4
   b7ce0:	f7ff fdf2 	bl	b78c8 <_ZN11RHSPIDriver7spiReadEh>
   b7ce4:	b240      	sxtb	r0, r0
   b7ce6:	2800      	cmp	r0, #0
   b7ce8:	bfb8      	it	lt
   b7cea:	3003      	addlt	r0, #3
   b7cec:	1080      	asrs	r0, r0, #2
   b7cee:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7cf2:	211a      	movs	r1, #26
   b7cf4:	4620      	mov	r0, r4
   b7cf6:	f7ff fde7 	bl	b78c8 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b7cfa:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7cfe:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b7d00:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7d02:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7d04:	bfa9      	itett	ge
   b7d06:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b7d08:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7d0a:	b21b      	sxthge	r3, r3
   b7d0c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b7d0e:	bfb2      	itee	lt
   b7d10:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7d12:	220f      	movge	r2, #15
   b7d14:	fb93 f3f2 	sdivge	r3, r3, r2
   b7d18:	b21b      	sxth	r3, r3
   b7d1a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b7d1c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b7d20:	b16b      	cbz	r3, b7d3e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b7d22:	8a23      	ldrh	r3, [r4, #16]
   b7d24:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b7d26:	b21b      	sxth	r3, r3
   b7d28:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b7d2a:	4620      	mov	r0, r4
   b7d2c:	f7ff ff04 	bl	b7b38 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b7d30:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b7d34:	2b00      	cmp	r3, #0
   b7d36:	d0ae      	beq.n	b7c96 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b7d38:	f7ff ff64 	bl	b7c04 <_ZN7RH_RF9511setModeIdleEv>
   b7d3c:	e7ab      	b.n	b7c96 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b7d3e:	8a23      	ldrh	r3, [r4, #16]
   b7d40:	3ba4      	subs	r3, #164	; 0xa4
   b7d42:	e7f0      	b.n	b7d26 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b7d44:	8ae3      	ldrh	r3, [r4, #22]
   b7d46:	3301      	adds	r3, #1
   b7d48:	b29b      	uxth	r3, r3
   b7d4a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	e7f3      	b.n	b7d38 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b7d50 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b7d50:	4b02      	ldr	r3, [pc, #8]	; (b7d5c <_ZN7RH_RF954isr0Ev+0xc>)
   b7d52:	6818      	ldr	r0, [r3, #0]
   b7d54:	b108      	cbz	r0, b7d5a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b7d56:	f7ff bf67 	b.w	b7c28 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d5a:	4770      	bx	lr
   b7d5c:	2003e604 	.word	0x2003e604

000b7d60 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b7d60:	4b02      	ldr	r3, [pc, #8]	; (b7d6c <_ZN7RH_RF954isr1Ev+0xc>)
   b7d62:	6858      	ldr	r0, [r3, #4]
   b7d64:	b108      	cbz	r0, b7d6a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b7d66:	f7ff bf5f 	b.w	b7c28 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d6a:	4770      	bx	lr
   b7d6c:	2003e604 	.word	0x2003e604

000b7d70 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b7d70:	4b02      	ldr	r3, [pc, #8]	; (b7d7c <_ZN7RH_RF954isr2Ev+0xc>)
   b7d72:	6898      	ldr	r0, [r3, #8]
   b7d74:	b108      	cbz	r0, b7d7a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b7d76:	f7ff bf57 	b.w	b7c28 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d7a:	4770      	bx	lr
   b7d7c:	2003e604 	.word	0x2003e604

000b7d80 <_ZN7RH_RF959setModeRxEv>:
{
   b7d80:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b7d82:	7903      	ldrb	r3, [r0, #4]
   b7d84:	2b04      	cmp	r3, #4
{
   b7d86:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b7d88:	d010      	beq.n	b7dac <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b7d8a:	6803      	ldr	r3, [r0, #0]
   b7d8c:	2104      	movs	r1, #4
   b7d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7d92:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b7d94:	2205      	movs	r2, #5
   b7d96:	2101      	movs	r1, #1
   b7d98:	4620      	mov	r0, r4
   b7d9a:	f7ff fdb6 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b7d9e:	2200      	movs	r2, #0
   b7da0:	2140      	movs	r1, #64	; 0x40
   b7da2:	4620      	mov	r0, r4
   b7da4:	f7ff fdb1 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b7da8:	2304      	movs	r3, #4
   b7daa:	7123      	strb	r3, [r4, #4]
}
   b7dac:	bd10      	pop	{r4, pc}

000b7dae <_ZN7RH_RF959availableEv>:
{
   b7dae:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b7db0:	7903      	ldrb	r3, [r0, #4]
   b7db2:	2b03      	cmp	r3, #3
{
   b7db4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b7db6:	d005      	beq.n	b7dc4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b7db8:	f7ff ffe2 	bl	b7d80 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b7dbc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b7dc0:	b2c0      	uxtb	r0, r0
}
   b7dc2:	bd10      	pop	{r4, pc}
	return false;
   b7dc4:	2000      	movs	r0, #0
   b7dc6:	e7fc      	b.n	b7dc2 <_ZN7RH_RF959availableEv+0x14>

000b7dc8 <_ZN7RH_RF959setModeTxEv>:
{
   b7dc8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b7dca:	7903      	ldrb	r3, [r0, #4]
   b7dcc:	2b03      	cmp	r3, #3
{
   b7dce:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b7dd0:	d010      	beq.n	b7df4 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b7dd2:	6803      	ldr	r3, [r0, #0]
   b7dd4:	2103      	movs	r1, #3
   b7dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7dda:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b7ddc:	2203      	movs	r2, #3
   b7dde:	2101      	movs	r1, #1
   b7de0:	4620      	mov	r0, r4
   b7de2:	f7ff fd92 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b7de6:	2240      	movs	r2, #64	; 0x40
   b7de8:	4611      	mov	r1, r2
   b7dea:	4620      	mov	r0, r4
   b7dec:	f7ff fd8d 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b7df0:	2303      	movs	r3, #3
   b7df2:	7123      	strb	r3, [r4, #4]
}
   b7df4:	bd10      	pop	{r4, pc}

000b7df6 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7df6:	2afb      	cmp	r2, #251	; 0xfb
{
   b7df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dfa:	4604      	mov	r4, r0
   b7dfc:	460f      	mov	r7, r1
   b7dfe:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7e00:	d902      	bls.n	b7e08 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b7e02:	2600      	movs	r6, #0
}
   b7e04:	4630      	mov	r0, r6
   b7e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b7e08:	6803      	ldr	r3, [r0, #0]
   b7e0a:	6a1b      	ldr	r3, [r3, #32]
   b7e0c:	4798      	blx	r3
    setModeIdle();
   b7e0e:	4620      	mov	r0, r4
   b7e10:	f7ff fef8 	bl	b7c04 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b7e14:	6823      	ldr	r3, [r4, #0]
   b7e16:	4620      	mov	r0, r4
   b7e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e1a:	4798      	blx	r3
   b7e1c:	4606      	mov	r6, r0
   b7e1e:	2800      	cmp	r0, #0
   b7e20:	d0ef      	beq.n	b7e02 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b7e22:	2200      	movs	r2, #0
   b7e24:	210d      	movs	r1, #13
   b7e26:	4620      	mov	r0, r4
   b7e28:	f7ff fd6f 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b7e2c:	7ae2      	ldrb	r2, [r4, #11]
   b7e2e:	2100      	movs	r1, #0
   b7e30:	4620      	mov	r0, r4
   b7e32:	f7ff fd6a 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b7e36:	7b22      	ldrb	r2, [r4, #12]
   b7e38:	2100      	movs	r1, #0
   b7e3a:	4620      	mov	r0, r4
   b7e3c:	f7ff fd65 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b7e40:	7b62      	ldrb	r2, [r4, #13]
   b7e42:	2100      	movs	r1, #0
   b7e44:	4620      	mov	r0, r4
   b7e46:	f7ff fd60 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b7e4a:	7ba2      	ldrb	r2, [r4, #14]
   b7e4c:	2100      	movs	r1, #0
   b7e4e:	4620      	mov	r0, r4
   b7e50:	f7ff fd5b 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b7e54:	462b      	mov	r3, r5
   b7e56:	463a      	mov	r2, r7
   b7e58:	2100      	movs	r1, #0
   b7e5a:	4620      	mov	r0, r4
   b7e5c:	f7ff fda3 	bl	b79a6 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b7e60:	1d2a      	adds	r2, r5, #4
   b7e62:	b2d2      	uxtb	r2, r2
   b7e64:	2122      	movs	r1, #34	; 0x22
   b7e66:	4620      	mov	r0, r4
   b7e68:	f7ff fd4f 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b7e6c:	4620      	mov	r0, r4
   b7e6e:	f7ff ffab 	bl	b7dc8 <_ZN7RH_RF959setModeTxEv>
    return true;
   b7e72:	e7c7      	b.n	b7e04 <_ZN7RH_RF954sendEPKhh+0xe>

000b7e74 <_ZN7RH_RF9510setTxPowerEab>:
{
   b7e74:	b510      	push	{r4, lr}
   b7e76:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b7e78:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b7e7c:	b172      	cbz	r2, b7e9c <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b7e7e:	f381 0204 	usat	r2, #4, r1
   b7e82:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b7e86:	b2d2      	uxtb	r2, r2
   b7e88:	2109      	movs	r1, #9
   b7e8a:	f7ff fd3e 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7e8e:	4620      	mov	r0, r4
   b7e90:	2204      	movs	r2, #4
}
   b7e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7e96:	214d      	movs	r1, #77	; 0x4d
   b7e98:	f7ff bd37 	b.w	b790a <_ZN11RHSPIDriver8spiWriteEhh>
}
   b7e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7ea0:	f7ff be0a 	b.w	b7ab8 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b7ea4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b7ea4:	b538      	push	{r3, r4, r5, lr}
   b7ea6:	460c      	mov	r4, r1
   b7ea8:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b7eaa:	780a      	ldrb	r2, [r1, #0]
   b7eac:	211d      	movs	r1, #29
   b7eae:	f7ff fd2c 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b7eb2:	7862      	ldrb	r2, [r4, #1]
   b7eb4:	211e      	movs	r1, #30
   b7eb6:	4628      	mov	r0, r5
   b7eb8:	f7ff fd27 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7ebc:	78a2      	ldrb	r2, [r4, #2]
   b7ebe:	4628      	mov	r0, r5
   b7ec0:	2126      	movs	r1, #38	; 0x26
}
   b7ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7ec6:	f7ff bd20 	b.w	b790a <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b7ecc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7ecc:	2905      	cmp	r1, #5
{
   b7ece:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7ed0:	d80f      	bhi.n	b7ef2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b7ed2:	4b09      	ldr	r3, [pc, #36]	; (b7ef8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b7ed4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b7ed8:	185c      	adds	r4, r3, r1
   b7eda:	5a5a      	ldrh	r2, [r3, r1]
   b7edc:	78a3      	ldrb	r3, [r4, #2]
   b7ede:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b7ee2:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b7ee4:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b7ee8:	f7ff ffdc 	bl	b7ea4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b7eec:	2001      	movs	r0, #1
}
   b7eee:	b002      	add	sp, #8
   b7ef0:	bd10      	pop	{r4, pc}
        return false;
   b7ef2:	2000      	movs	r0, #0
   b7ef4:	e7fb      	b.n	b7eee <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b7ef6:	bf00      	nop
   b7ef8:	000bd10c 	.word	0x000bd10c

000b7efc <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b7efc:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7efe:	0a0a      	lsrs	r2, r1, #8
{
   b7f00:	4605      	mov	r5, r0
   b7f02:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7f04:	2120      	movs	r1, #32
   b7f06:	f7ff fd00 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b7f0a:	b2e2      	uxtb	r2, r4
   b7f0c:	4628      	mov	r0, r5
   b7f0e:	2121      	movs	r1, #33	; 0x21
}
   b7f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b7f14:	f7ff bcf9 	b.w	b790a <_ZN11RHSPIDriver8spiWriteEhh>

000b7f18 <_ZN7RH_RF954initEv>:
{
   b7f18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f1a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b7f1c:	f7ff fca4 	bl	b7868 <_ZN11RHSPIDriver4initEv>
   b7f20:	4606      	mov	r6, r0
   b7f22:	b918      	cbnz	r0, b7f2c <_ZN7RH_RF954initEv+0x14>
	return false;
   b7f24:	2600      	movs	r6, #0
}
   b7f26:	4630      	mov	r0, r6
   b7f28:	b002      	add	sp, #8
   b7f2a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b7f2c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b7f30:	2dff      	cmp	r5, #255	; 0xff
   b7f32:	d054      	beq.n	b7fde <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b7f34:	4629      	mov	r1, r5
   b7f36:	4620      	mov	r0, r4
   b7f38:	f7ff fd5d 	bl	b79f6 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b7f3c:	2280      	movs	r2, #128	; 0x80
   b7f3e:	2101      	movs	r1, #1
   b7f40:	4620      	mov	r0, r4
   b7f42:	f7ff fce2 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b7f46:	200a      	movs	r0, #10
   b7f48:	f000 fd12 	bl	b8970 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b7f4c:	2101      	movs	r1, #1
   b7f4e:	4620      	mov	r0, r4
   b7f50:	f7ff fcba 	bl	b78c8 <_ZN11RHSPIDriver7spiReadEh>
   b7f54:	2880      	cmp	r0, #128	; 0x80
   b7f56:	d1e5      	bne.n	b7f24 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b7f58:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b7f5c:	28ff      	cmp	r0, #255	; 0xff
   b7f5e:	d01c      	beq.n	b7f9a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b7f60:	2100      	movs	r1, #0
   b7f62:	f003 fa31 	bl	bb3c8 <pinMode>
	if (_myInterruptIndex == 0xff)
   b7f66:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b7f6a:	2bff      	cmp	r3, #255	; 0xff
   b7f6c:	d107      	bne.n	b7f7e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b7f6e:	4a26      	ldr	r2, [pc, #152]	; (b8008 <_ZN7RH_RF954initEv+0xf0>)
   b7f70:	7813      	ldrb	r3, [r2, #0]
   b7f72:	2b03      	cmp	r3, #3
   b7f74:	d8d6      	bhi.n	b7f24 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b7f76:	1c59      	adds	r1, r3, #1
   b7f78:	7011      	strb	r1, [r2, #0]
   b7f7a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b7f7e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b7f82:	4b22      	ldr	r3, [pc, #136]	; (b800c <_ZN7RH_RF954initEv+0xf4>)
   b7f84:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b7f88:	bb62      	cbnz	r2, b7fe4 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b7f8a:	4921      	ldr	r1, [pc, #132]	; (b8010 <_ZN7RH_RF954initEv+0xf8>)
   b7f8c:	9200      	str	r2, [sp, #0]
   b7f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7f92:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7f94:	b2a8      	uxth	r0, r5
   b7f96:	f000 ff75 	bl	b8e84 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b7f9a:	2200      	movs	r2, #0
   b7f9c:	210e      	movs	r1, #14
   b7f9e:	4620      	mov	r0, r4
   b7fa0:	f7ff fcb3 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b7fa4:	2200      	movs	r2, #0
   b7fa6:	210f      	movs	r1, #15
   b7fa8:	4620      	mov	r0, r4
   b7faa:	f7ff fcae 	bl	b790a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b7fae:	4620      	mov	r0, r4
   b7fb0:	f7ff fe28 	bl	b7c04 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b7fb4:	2100      	movs	r1, #0
   b7fb6:	4620      	mov	r0, r4
   b7fb8:	f7ff ff88 	bl	b7ecc <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b7fbc:	2108      	movs	r1, #8
   b7fbe:	4620      	mov	r0, r4
   b7fc0:	f7ff ff9c 	bl	b7efc <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b7fc4:	ed9f 0a13 	vldr	s0, [pc, #76]	; b8014 <_ZN7RH_RF954initEv+0xfc>
   b7fc8:	4620      	mov	r0, r4
   b7fca:	f7ff fdd9 	bl	b7b80 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b7fce:	2300      	movs	r3, #0
   b7fd0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b7fd4:	210d      	movs	r1, #13
   b7fd6:	4620      	mov	r0, r4
   b7fd8:	f7ff fd6e 	bl	b7ab8 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b7fdc:	e7a3      	b.n	b7f26 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b7fde:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b7fe2:	e7ab      	b.n	b7f3c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b7fe4:	2a01      	cmp	r2, #1
   b7fe6:	f04f 0300 	mov.w	r3, #0
   b7fea:	d104      	bne.n	b7ff6 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b7fec:	9300      	str	r3, [sp, #0]
   b7fee:	490a      	ldr	r1, [pc, #40]	; (b8018 <_ZN7RH_RF954initEv+0x100>)
   b7ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7ff4:	e7ce      	b.n	b7f94 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b7ff6:	2a02      	cmp	r2, #2
   b7ff8:	d194      	bne.n	b7f24 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7ffa:	9300      	str	r3, [sp, #0]
   b7ffc:	4907      	ldr	r1, [pc, #28]	; (b801c <_ZN7RH_RF954initEv+0x104>)
   b7ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8002:	2201      	movs	r2, #1
   b8004:	e7c6      	b.n	b7f94 <_ZN7RH_RF954initEv+0x7c>
   b8006:	bf00      	nop
   b8008:	2003e601 	.word	0x2003e601
   b800c:	2003e604 	.word	0x2003e604
   b8010:	000b7d51 	.word	0x000b7d51
   b8014:	43d90000 	.word	0x43d90000
   b8018:	000b7d61 	.word	0x000b7d61
   b801c:	000b7d71 	.word	0x000b7d71

000b8020 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b8020:	4770      	bx	lr

000b8022 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b8022:	6803      	ldr	r3, [r0, #0]
   b8024:	685b      	ldr	r3, [r3, #4]
   b8026:	4718      	bx	r3

000b8028 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b8028:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b802a:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b802c:	4604      	mov	r4, r0
    if (lastUpdate) {
   b802e:	b133      	cbz	r3, b803e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8030:	b131      	cbz	r1, b8040 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b8032:	6823      	ldr	r3, [r4, #0]
   b8034:	4620      	mov	r0, r4
   b8036:	689b      	ldr	r3, [r3, #8]
   b8038:	4798      	blx	r3
            lastUpdate = 0;
   b803a:	2300      	movs	r3, #0
   b803c:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b803e:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8040:	f000 f92a 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8044:	69a3      	ldr	r3, [r4, #24]
   b8046:	1ac0      	subs	r0, r0, r3
   b8048:	69e3      	ldr	r3, [r4, #28]
   b804a:	4298      	cmp	r0, r3
   b804c:	d2f1      	bcs.n	b8032 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b804e:	e7f6      	b.n	b803e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b8050 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8050:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b8052:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8054:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b8056:	b11b      	cbz	r3, b8060 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8058:	f000 f91e 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b805c:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b805e:	bd10      	pop	{r4, pc}
        save();
   b8060:	6803      	ldr	r3, [r0, #0]
}
   b8062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b8066:	689b      	ldr	r3, [r3, #8]
   b8068:	4718      	bx	r3

000b806a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b806a:	f000 b8ed 	b.w	b8248 <os_mutex_recursive_unlock>

000b806e <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b806e:	b510      	push	{r4, lr}
   b8070:	4604      	mov	r4, r0
   b8072:	3004      	adds	r0, #4
   b8074:	f7fd f90e 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8078:	6823      	ldr	r3, [r4, #0]
   b807a:	68e1      	ldr	r1, [r4, #12]
   b807c:	695b      	ldr	r3, [r3, #20]
   b807e:	4620      	mov	r0, r4
   b8080:	4798      	blx	r3
   b8082:	b918      	cbnz	r0, b808c <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b8084:	6823      	ldr	r3, [r4, #0]
   b8086:	4620      	mov	r0, r4
   b8088:	699b      	ldr	r3, [r3, #24]
   b808a:	4798      	blx	r3
      { _M_device.unlock(); }
   b808c:	6860      	ldr	r0, [r4, #4]
   b808e:	f7ff ffec 	bl	b806a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8092:	2001      	movs	r0, #1
   b8094:	bd10      	pop	{r4, pc}
	...

000b8098 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8098:	b5f0      	push	{r4, r5, r6, r7, lr}
   b809a:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b809e:	4f18      	ldr	r7, [pc, #96]	; (b8100 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b80a0:	4e18      	ldr	r6, [pc, #96]	; (b8104 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b80a2:	4d19      	ldr	r5, [pc, #100]	; (b8108 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b80a4:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b80a6:	42a0      	cmp	r0, r4
   b80a8:	d00c      	beq.n	b80c4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b80aa:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b80ae:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b80b0:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b80b4:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b80b6:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b80b8:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b80bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b80c0:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b80c2:	e7f0      	b.n	b80a6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b80c4:	f001 0403 	and.w	r4, r1, #3
   b80c8:	4404      	add	r4, r0
    k = 0;
   b80ca:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b80cc:	42a0      	cmp	r0, r4
   b80ce:	d004      	beq.n	b80da <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b80d0:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b80d4:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b80d8:	e7f8      	b.n	b80cc <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b80da:	4809      	ldr	r0, [pc, #36]	; (b8100 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b80dc:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b80de:	4809      	ldr	r0, [pc, #36]	; (b8104 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b80e0:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b80e4:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b80e6:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b80e8:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b80ea:	4b08      	ldr	r3, [pc, #32]	; (b810c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b80ec:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b80f0:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b80f2:	4b07      	ldr	r3, [pc, #28]	; (b8110 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b80f4:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b80f8:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b80fa:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b80fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8100:	cc9e2d51 	.word	0xcc9e2d51
   b8104:	1b873593 	.word	0x1b873593
   b8108:	e6546b64 	.word	0xe6546b64
   b810c:	85ebca6b 	.word	0x85ebca6b
   b8110:	c2b2ae35 	.word	0xc2b2ae35

000b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b8114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8116:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8118:	3004      	adds	r0, #4
   b811a:	f7fd f8bb 	bl	b5294 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b811e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b8120:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b8122:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b8124:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8126:	68a6      	ldr	r6, [r4, #8]
   b8128:	4a05      	ldr	r2, [pc, #20]	; (b8140 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b812a:	88f1      	ldrh	r1, [r6, #6]
   b812c:	4630      	mov	r0, r6
   b812e:	f7ff ffb3 	bl	b8098 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b8132:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8134:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b8136:	6860      	ldr	r0, [r4, #4]
   b8138:	f7ff ff97 	bl	b806a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b813c:	4628      	mov	r0, r5
   b813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8140:	851c2a3f 	.word	0x851c2a3f

000b8144 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b8144:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8146:	460d      	mov	r5, r1
   b8148:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b814a:	f7ff ffe3 	bl	b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b814e:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b8150:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b8152:	d923      	bls.n	b819c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b8154:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b8156:	6922      	ldr	r2, [r4, #16]
   b8158:	6819      	ldr	r1, [r3, #0]
   b815a:	4291      	cmp	r1, r2
   b815c:	d11f      	bne.n	b819e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b815e:	8899      	ldrh	r1, [r3, #4]
   b8160:	8aa2      	ldrh	r2, [r4, #20]
   b8162:	4291      	cmp	r1, r2
   b8164:	d11b      	bne.n	b819e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b8166:	88d9      	ldrh	r1, [r3, #6]
   b8168:	b2aa      	uxth	r2, r5
   b816a:	4291      	cmp	r1, r2
   b816c:	d817      	bhi.n	b819e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b816e:	689a      	ldr	r2, [r3, #8]
   b8170:	4282      	cmp	r2, r0
   b8172:	d114      	bne.n	b819e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b8174:	68e2      	ldr	r2, [r4, #12]
   b8176:	42aa      	cmp	r2, r5
   b8178:	d905      	bls.n	b8186 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b817a:	2100      	movs	r1, #0
   b817c:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b817e:	68e2      	ldr	r2, [r4, #12]
   b8180:	3501      	adds	r5, #1
   b8182:	42aa      	cmp	r2, r5
   b8184:	d8fa      	bhi.n	b817c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8186:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b818a:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b818c:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b818e:	68a5      	ldr	r5, [r4, #8]
   b8190:	f7ff ffc0 	bl	b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8194:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b8196:	2001      	movs	r0, #1
}
   b8198:	b002      	add	sp, #8
   b819a:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b819c:	b19d      	cbz	r5, b81c6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b819e:	68a1      	ldr	r1, [r4, #8]
   b81a0:	680a      	ldr	r2, [r1, #0]
   b81a2:	b192      	cbz	r2, b81ca <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b81a4:	6888      	ldr	r0, [r1, #8]
   b81a6:	888b      	ldrh	r3, [r1, #4]
   b81a8:	9001      	str	r0, [sp, #4]
   b81aa:	88c9      	ldrh	r1, [r1, #6]
   b81ac:	4808      	ldr	r0, [pc, #32]	; (b81d0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b81ae:	9100      	str	r1, [sp, #0]
   b81b0:	4908      	ldr	r1, [pc, #32]	; (b81d4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b81b2:	f7fd fe7d 	bl	b5eb0 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b81b6:	e9cd 5600 	strd	r5, r6, [sp]
   b81ba:	8aa3      	ldrh	r3, [r4, #20]
   b81bc:	6922      	ldr	r2, [r4, #16]
   b81be:	4906      	ldr	r1, [pc, #24]	; (b81d8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b81c0:	4803      	ldr	r0, [pc, #12]	; (b81d0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b81c2:	f7fd fe75 	bl	b5eb0 <_ZNK5spark6Logger5traceEPKcz>
   b81c6:	2000      	movs	r0, #0
   b81c8:	e7e6      	b.n	b8198 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b81ca:	4610      	mov	r0, r2
   b81cc:	e7e4      	b.n	b8198 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b81ce:	bf00      	nop
   b81d0:	2003e658 	.word	0x2003e658
   b81d4:	000bd1a8 	.word	0x000bd1a8
   b81d8:	000bd1d9 	.word	0x000bd1d9

000b81dc <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b81dc:	b538      	push	{r3, r4, r5, lr}
   b81de:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b81e0:	68c2      	ldr	r2, [r0, #12]
   b81e2:	6880      	ldr	r0, [r0, #8]
   b81e4:	2100      	movs	r1, #0
   b81e6:	f003 ff2f 	bl	bc048 <memset>
    savedDataHeader->magic = savedDataMagic;
   b81ea:	68a3      	ldr	r3, [r4, #8]
   b81ec:	6922      	ldr	r2, [r4, #16]
   b81ee:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b81f0:	68a3      	ldr	r3, [r4, #8]
   b81f2:	8aa2      	ldrh	r2, [r4, #20]
   b81f4:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b81f6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b81fa:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b81fc:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b81fe:	68a5      	ldr	r5, [r4, #8]
   b8200:	f7ff ff88 	bl	b8114 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8204:	60a8      	str	r0, [r5, #8]
}
   b8206:	bd38      	pop	{r3, r4, r5, pc}

000b8208 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b8208:	b508      	push	{r3, lr}
   b820a:	4b02      	ldr	r3, [pc, #8]	; (b8214 <cellular_signal+0xc>)
   b820c:	681b      	ldr	r3, [r3, #0]
   b820e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8210:	9301      	str	r3, [sp, #4]
   b8212:	bd08      	pop	{r3, pc}
   b8214:	00030274 	.word	0x00030274

000b8218 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8218:	b508      	push	{r3, lr}
   b821a:	4b02      	ldr	r3, [pc, #8]	; (b8224 <os_mutex_recursive_create+0xc>)
   b821c:	681b      	ldr	r3, [r3, #0]
   b821e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8220:	9301      	str	r3, [sp, #4]
   b8222:	bd08      	pop	{r3, pc}
   b8224:	00030248 	.word	0x00030248

000b8228 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b8228:	b508      	push	{r3, lr}
   b822a:	4b02      	ldr	r3, [pc, #8]	; (b8234 <os_mutex_recursive_destroy+0xc>)
   b822c:	681b      	ldr	r3, [r3, #0]
   b822e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8230:	9301      	str	r3, [sp, #4]
   b8232:	bd08      	pop	{r3, pc}
   b8234:	00030248 	.word	0x00030248

000b8238 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8238:	b508      	push	{r3, lr}
   b823a:	4b02      	ldr	r3, [pc, #8]	; (b8244 <os_mutex_recursive_lock+0xc>)
   b823c:	681b      	ldr	r3, [r3, #0]
   b823e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8240:	9301      	str	r3, [sp, #4]
   b8242:	bd08      	pop	{r3, pc}
   b8244:	00030248 	.word	0x00030248

000b8248 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8248:	b508      	push	{r3, lr}
   b824a:	4b02      	ldr	r3, [pc, #8]	; (b8254 <os_mutex_recursive_unlock+0xc>)
   b824c:	681b      	ldr	r3, [r3, #0]
   b824e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8250:	9301      	str	r3, [sp, #4]
   b8252:	bd08      	pop	{r3, pc}
   b8254:	00030248 	.word	0x00030248

000b8258 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8258:	b508      	push	{r3, lr}
   b825a:	4b02      	ldr	r3, [pc, #8]	; (b8264 <HAL_Core_Runtime_Info+0xc>)
   b825c:	681b      	ldr	r3, [r3, #0]
   b825e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8260:	9301      	str	r3, [sp, #4]
   b8262:	bd08      	pop	{r3, pc}
   b8264:	00030234 	.word	0x00030234

000b8268 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8268:	b508      	push	{r3, lr}
   b826a:	4b02      	ldr	r3, [pc, #8]	; (b8274 <HAL_Feature_Set+0xc>)
   b826c:	681b      	ldr	r3, [r3, #0]
   b826e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8270:	9301      	str	r3, [sp, #4]
   b8272:	bd08      	pop	{r3, pc}
   b8274:	00030234 	.word	0x00030234

000b8278 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8278:	b508      	push	{r3, lr}
   b827a:	4b02      	ldr	r3, [pc, #8]	; (b8284 <HAL_RNG_GetRandomNumber+0xc>)
   b827c:	681b      	ldr	r3, [r3, #0]
   b827e:	685b      	ldr	r3, [r3, #4]
   b8280:	9301      	str	r3, [sp, #4]
   b8282:	bd08      	pop	{r3, pc}
   b8284:	00030218 	.word	0x00030218

000b8288 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8288:	b508      	push	{r3, lr}
   b828a:	4b02      	ldr	r3, [pc, #8]	; (b8294 <HAL_Delay_Microseconds+0xc>)
   b828c:	681b      	ldr	r3, [r3, #0]
   b828e:	68db      	ldr	r3, [r3, #12]
   b8290:	9301      	str	r3, [sp, #4]
   b8292:	bd08      	pop	{r3, pc}
   b8294:	00030218 	.word	0x00030218

000b8298 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8298:	b508      	push	{r3, lr}
   b829a:	4b02      	ldr	r3, [pc, #8]	; (b82a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b829c:	681b      	ldr	r3, [r3, #0]
   b829e:	695b      	ldr	r3, [r3, #20]
   b82a0:	9301      	str	r3, [sp, #4]
   b82a2:	bd08      	pop	{r3, pc}
   b82a4:	00030218 	.word	0x00030218

000b82a8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b82a8:	b508      	push	{r3, lr}
   b82aa:	4b02      	ldr	r3, [pc, #8]	; (b82b4 <hal_rtc_time_is_valid+0xc>)
   b82ac:	681b      	ldr	r3, [r3, #0]
   b82ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b82b0:	9301      	str	r3, [sp, #4]
   b82b2:	bd08      	pop	{r3, pc}
   b82b4:	00030218 	.word	0x00030218

000b82b8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b82b8:	b508      	push	{r3, lr}
   b82ba:	4b02      	ldr	r3, [pc, #8]	; (b82c4 <hal_timer_millis+0xc>)
   b82bc:	681b      	ldr	r3, [r3, #0]
   b82be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b82c0:	9301      	str	r3, [sp, #4]
   b82c2:	bd08      	pop	{r3, pc}
   b82c4:	00030218 	.word	0x00030218

000b82c8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b82c8:	b508      	push	{r3, lr}
   b82ca:	4b02      	ldr	r3, [pc, #8]	; (b82d4 <hal_rtc_get_time+0xc>)
   b82cc:	681b      	ldr	r3, [r3, #0]
   b82ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b82d0:	9301      	str	r3, [sp, #4]
   b82d2:	bd08      	pop	{r3, pc}
   b82d4:	00030218 	.word	0x00030218

000b82d8 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b82d8:	b508      	push	{r3, lr}
   b82da:	4b02      	ldr	r3, [pc, #8]	; (b82e4 <hal_rtc_set_time+0xc>)
   b82dc:	681b      	ldr	r3, [r3, #0]
   b82de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b82e0:	9301      	str	r3, [sp, #4]
   b82e2:	bd08      	pop	{r3, pc}
   b82e4:	00030218 	.word	0x00030218

000b82e8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b82e8:	b508      	push	{r3, lr}
   b82ea:	4b02      	ldr	r3, [pc, #8]	; (b82f4 <HAL_Pin_Map+0xc>)
   b82ec:	681b      	ldr	r3, [r3, #0]
   b82ee:	681b      	ldr	r3, [r3, #0]
   b82f0:	9301      	str	r3, [sp, #4]
   b82f2:	bd08      	pop	{r3, pc}
   b82f4:	0003022c 	.word	0x0003022c

000b82f8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b82f8:	b508      	push	{r3, lr}
   b82fa:	4b02      	ldr	r3, [pc, #8]	; (b8304 <HAL_Validate_Pin_Function+0xc>)
   b82fc:	681b      	ldr	r3, [r3, #0]
   b82fe:	685b      	ldr	r3, [r3, #4]
   b8300:	9301      	str	r3, [sp, #4]
   b8302:	bd08      	pop	{r3, pc}
   b8304:	0003022c 	.word	0x0003022c

000b8308 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8308:	b508      	push	{r3, lr}
   b830a:	4b02      	ldr	r3, [pc, #8]	; (b8314 <HAL_Pin_Mode+0xc>)
   b830c:	681b      	ldr	r3, [r3, #0]
   b830e:	689b      	ldr	r3, [r3, #8]
   b8310:	9301      	str	r3, [sp, #4]
   b8312:	bd08      	pop	{r3, pc}
   b8314:	0003022c 	.word	0x0003022c

000b8318 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8318:	b508      	push	{r3, lr}
   b831a:	4b02      	ldr	r3, [pc, #8]	; (b8324 <HAL_Get_Pin_Mode+0xc>)
   b831c:	681b      	ldr	r3, [r3, #0]
   b831e:	68db      	ldr	r3, [r3, #12]
   b8320:	9301      	str	r3, [sp, #4]
   b8322:	bd08      	pop	{r3, pc}
   b8324:	0003022c 	.word	0x0003022c

000b8328 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8328:	b508      	push	{r3, lr}
   b832a:	4b02      	ldr	r3, [pc, #8]	; (b8334 <HAL_GPIO_Write+0xc>)
   b832c:	681b      	ldr	r3, [r3, #0]
   b832e:	691b      	ldr	r3, [r3, #16]
   b8330:	9301      	str	r3, [sp, #4]
   b8332:	bd08      	pop	{r3, pc}
   b8334:	0003022c 	.word	0x0003022c

000b8338 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8338:	b508      	push	{r3, lr}
   b833a:	4b02      	ldr	r3, [pc, #8]	; (b8344 <HAL_GPIO_Read+0xc>)
   b833c:	681b      	ldr	r3, [r3, #0]
   b833e:	695b      	ldr	r3, [r3, #20]
   b8340:	9301      	str	r3, [sp, #4]
   b8342:	bd08      	pop	{r3, pc}
   b8344:	0003022c 	.word	0x0003022c

000b8348 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8348:	b508      	push	{r3, lr}
   b834a:	4b02      	ldr	r3, [pc, #8]	; (b8354 <HAL_Interrupts_Attach+0xc>)
   b834c:	681b      	ldr	r3, [r3, #0]
   b834e:	699b      	ldr	r3, [r3, #24]
   b8350:	9301      	str	r3, [sp, #4]
   b8352:	bd08      	pop	{r3, pc}
   b8354:	0003022c 	.word	0x0003022c

000b8358 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8358:	b508      	push	{r3, lr}
   b835a:	4b02      	ldr	r3, [pc, #8]	; (b8364 <HAL_Interrupts_Detach+0xc>)
   b835c:	681b      	ldr	r3, [r3, #0]
   b835e:	69db      	ldr	r3, [r3, #28]
   b8360:	9301      	str	r3, [sp, #4]
   b8362:	bd08      	pop	{r3, pc}
   b8364:	0003022c 	.word	0x0003022c

000b8368 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8368:	b508      	push	{r3, lr}
   b836a:	4b02      	ldr	r3, [pc, #8]	; (b8374 <hal_adc_read+0xc>)
   b836c:	681b      	ldr	r3, [r3, #0]
   b836e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8370:	9301      	str	r3, [sp, #4]
   b8372:	bd08      	pop	{r3, pc}
   b8374:	0003022c 	.word	0x0003022c

000b8378 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8378:	b508      	push	{r3, lr}
   b837a:	4b02      	ldr	r3, [pc, #8]	; (b8384 <hal_i2c_begin+0xc>)
   b837c:	681b      	ldr	r3, [r3, #0]
   b837e:	68db      	ldr	r3, [r3, #12]
   b8380:	9301      	str	r3, [sp, #4]
   b8382:	bd08      	pop	{r3, pc}
   b8384:	00030228 	.word	0x00030228

000b8388 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8388:	b508      	push	{r3, lr}
   b838a:	4b02      	ldr	r3, [pc, #8]	; (b8394 <hal_i2c_begin_transmission+0xc>)
   b838c:	681b      	ldr	r3, [r3, #0]
   b838e:	699b      	ldr	r3, [r3, #24]
   b8390:	9301      	str	r3, [sp, #4]
   b8392:	bd08      	pop	{r3, pc}
   b8394:	00030228 	.word	0x00030228

000b8398 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8398:	b508      	push	{r3, lr}
   b839a:	4b02      	ldr	r3, [pc, #8]	; (b83a4 <hal_i2c_end_transmission+0xc>)
   b839c:	681b      	ldr	r3, [r3, #0]
   b839e:	69db      	ldr	r3, [r3, #28]
   b83a0:	9301      	str	r3, [sp, #4]
   b83a2:	bd08      	pop	{r3, pc}
   b83a4:	00030228 	.word	0x00030228

000b83a8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b83a8:	b508      	push	{r3, lr}
   b83aa:	4b02      	ldr	r3, [pc, #8]	; (b83b4 <hal_i2c_write+0xc>)
   b83ac:	681b      	ldr	r3, [r3, #0]
   b83ae:	6a1b      	ldr	r3, [r3, #32]
   b83b0:	9301      	str	r3, [sp, #4]
   b83b2:	bd08      	pop	{r3, pc}
   b83b4:	00030228 	.word	0x00030228

000b83b8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b83b8:	b508      	push	{r3, lr}
   b83ba:	4b02      	ldr	r3, [pc, #8]	; (b83c4 <hal_i2c_available+0xc>)
   b83bc:	681b      	ldr	r3, [r3, #0]
   b83be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b83c0:	9301      	str	r3, [sp, #4]
   b83c2:	bd08      	pop	{r3, pc}
   b83c4:	00030228 	.word	0x00030228

000b83c8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b83c8:	b508      	push	{r3, lr}
   b83ca:	4b02      	ldr	r3, [pc, #8]	; (b83d4 <hal_i2c_read+0xc>)
   b83cc:	681b      	ldr	r3, [r3, #0]
   b83ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b83d0:	9301      	str	r3, [sp, #4]
   b83d2:	bd08      	pop	{r3, pc}
   b83d4:	00030228 	.word	0x00030228

000b83d8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b83d8:	b508      	push	{r3, lr}
   b83da:	4b02      	ldr	r3, [pc, #8]	; (b83e4 <hal_i2c_peek+0xc>)
   b83dc:	681b      	ldr	r3, [r3, #0]
   b83de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b83e0:	9301      	str	r3, [sp, #4]
   b83e2:	bd08      	pop	{r3, pc}
   b83e4:	00030228 	.word	0x00030228

000b83e8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b83e8:	b508      	push	{r3, lr}
   b83ea:	4b02      	ldr	r3, [pc, #8]	; (b83f4 <hal_i2c_flush+0xc>)
   b83ec:	681b      	ldr	r3, [r3, #0]
   b83ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b83f0:	9301      	str	r3, [sp, #4]
   b83f2:	bd08      	pop	{r3, pc}
   b83f4:	00030228 	.word	0x00030228

000b83f8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b83f8:	b508      	push	{r3, lr}
   b83fa:	4b02      	ldr	r3, [pc, #8]	; (b8404 <hal_i2c_is_enabled+0xc>)
   b83fc:	681b      	ldr	r3, [r3, #0]
   b83fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8400:	9301      	str	r3, [sp, #4]
   b8402:	bd08      	pop	{r3, pc}
   b8404:	00030228 	.word	0x00030228

000b8408 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8408:	b508      	push	{r3, lr}
   b840a:	4b02      	ldr	r3, [pc, #8]	; (b8414 <hal_i2c_init+0xc>)
   b840c:	681b      	ldr	r3, [r3, #0]
   b840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8410:	9301      	str	r3, [sp, #4]
   b8412:	bd08      	pop	{r3, pc}
   b8414:	00030228 	.word	0x00030228

000b8418 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b8418:	b508      	push	{r3, lr}
   b841a:	4b02      	ldr	r3, [pc, #8]	; (b8424 <hal_i2c_lock+0xc>)
   b841c:	681b      	ldr	r3, [r3, #0]
   b841e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8420:	9301      	str	r3, [sp, #4]
   b8422:	bd08      	pop	{r3, pc}
   b8424:	00030228 	.word	0x00030228

000b8428 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b8428:	b508      	push	{r3, lr}
   b842a:	4b02      	ldr	r3, [pc, #8]	; (b8434 <hal_i2c_unlock+0xc>)
   b842c:	681b      	ldr	r3, [r3, #0]
   b842e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8430:	9301      	str	r3, [sp, #4]
   b8432:	bd08      	pop	{r3, pc}
   b8434:	00030228 	.word	0x00030228

000b8438 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8438:	b508      	push	{r3, lr}
   b843a:	4b02      	ldr	r3, [pc, #8]	; (b8444 <hal_i2c_request_ex+0xc>)
   b843c:	681b      	ldr	r3, [r3, #0]
   b843e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8440:	9301      	str	r3, [sp, #4]
   b8442:	bd08      	pop	{r3, pc}
   b8444:	00030228 	.word	0x00030228

000b8448 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8448:	b508      	push	{r3, lr}
   b844a:	4b02      	ldr	r3, [pc, #8]	; (b8454 <inet_inet_ntop+0xc>)
   b844c:	681b      	ldr	r3, [r3, #0]
   b844e:	695b      	ldr	r3, [r3, #20]
   b8450:	9301      	str	r3, [sp, #4]
   b8452:	bd08      	pop	{r3, pc}
   b8454:	00030264 	.word	0x00030264

000b8458 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8458:	b508      	push	{r3, lr}
   b845a:	4b02      	ldr	r3, [pc, #8]	; (b8464 <netdb_freeaddrinfo+0xc>)
   b845c:	681b      	ldr	r3, [r3, #0]
   b845e:	689b      	ldr	r3, [r3, #8]
   b8460:	9301      	str	r3, [sp, #4]
   b8462:	bd08      	pop	{r3, pc}
   b8464:	00030268 	.word	0x00030268

000b8468 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8468:	b508      	push	{r3, lr}
   b846a:	4b02      	ldr	r3, [pc, #8]	; (b8474 <netdb_getaddrinfo+0xc>)
   b846c:	681b      	ldr	r3, [r3, #0]
   b846e:	68db      	ldr	r3, [r3, #12]
   b8470:	9301      	str	r3, [sp, #4]
   b8472:	bd08      	pop	{r3, pc}
   b8474:	00030268 	.word	0x00030268

000b8478 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8478:	b508      	push	{r3, lr}
   b847a:	4b02      	ldr	r3, [pc, #8]	; (b8484 <hal_spi_begin+0xc>)
   b847c:	681b      	ldr	r3, [r3, #0]
   b847e:	681b      	ldr	r3, [r3, #0]
   b8480:	9301      	str	r3, [sp, #4]
   b8482:	bd08      	pop	{r3, pc}
   b8484:	00030230 	.word	0x00030230

000b8488 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8488:	b508      	push	{r3, lr}
   b848a:	4b02      	ldr	r3, [pc, #8]	; (b8494 <hal_spi_end+0xc>)
   b848c:	681b      	ldr	r3, [r3, #0]
   b848e:	685b      	ldr	r3, [r3, #4]
   b8490:	9301      	str	r3, [sp, #4]
   b8492:	bd08      	pop	{r3, pc}
   b8494:	00030230 	.word	0x00030230

000b8498 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8498:	b508      	push	{r3, lr}
   b849a:	4b02      	ldr	r3, [pc, #8]	; (b84a4 <hal_spi_transfer+0xc>)
   b849c:	681b      	ldr	r3, [r3, #0]
   b849e:	695b      	ldr	r3, [r3, #20]
   b84a0:	9301      	str	r3, [sp, #4]
   b84a2:	bd08      	pop	{r3, pc}
   b84a4:	00030230 	.word	0x00030230

000b84a8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b84a8:	b508      	push	{r3, lr}
   b84aa:	4b02      	ldr	r3, [pc, #8]	; (b84b4 <hal_spi_init+0xc>)
   b84ac:	681b      	ldr	r3, [r3, #0]
   b84ae:	69db      	ldr	r3, [r3, #28]
   b84b0:	9301      	str	r3, [sp, #4]
   b84b2:	bd08      	pop	{r3, pc}
   b84b4:	00030230 	.word	0x00030230

000b84b8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b84b8:	b508      	push	{r3, lr}
   b84ba:	4b02      	ldr	r3, [pc, #8]	; (b84c4 <hal_spi_is_enabled+0xc>)
   b84bc:	681b      	ldr	r3, [r3, #0]
   b84be:	6a1b      	ldr	r3, [r3, #32]
   b84c0:	9301      	str	r3, [sp, #4]
   b84c2:	bd08      	pop	{r3, pc}
   b84c4:	00030230 	.word	0x00030230

000b84c8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b84c8:	b508      	push	{r3, lr}
   b84ca:	4b02      	ldr	r3, [pc, #8]	; (b84d4 <hal_spi_info+0xc>)
   b84cc:	681b      	ldr	r3, [r3, #0]
   b84ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b84d0:	9301      	str	r3, [sp, #4]
   b84d2:	bd08      	pop	{r3, pc}
   b84d4:	00030230 	.word	0x00030230

000b84d8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b84d8:	b508      	push	{r3, lr}
   b84da:	4b02      	ldr	r3, [pc, #8]	; (b84e4 <hal_spi_set_settings+0xc>)
   b84dc:	681b      	ldr	r3, [r3, #0]
   b84de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b84e0:	9301      	str	r3, [sp, #4]
   b84e2:	bd08      	pop	{r3, pc}
   b84e4:	00030230 	.word	0x00030230

000b84e8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b84e8:	b508      	push	{r3, lr}
   b84ea:	4b02      	ldr	r3, [pc, #8]	; (b84f4 <hal_spi_acquire+0xc>)
   b84ec:	681b      	ldr	r3, [r3, #0]
   b84ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b84f0:	9301      	str	r3, [sp, #4]
   b84f2:	bd08      	pop	{r3, pc}
   b84f4:	00030230 	.word	0x00030230

000b84f8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b84f8:	b508      	push	{r3, lr}
   b84fa:	4b02      	ldr	r3, [pc, #8]	; (b8504 <hal_spi_release+0xc>)
   b84fc:	681b      	ldr	r3, [r3, #0]
   b84fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8500:	9301      	str	r3, [sp, #4]
   b8502:	bd08      	pop	{r3, pc}
   b8504:	00030230 	.word	0x00030230

000b8508 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b8508:	b508      	push	{r3, lr}
   b850a:	4b02      	ldr	r3, [pc, #8]	; (b8514 <hal_usart_end+0xc>)
   b850c:	681b      	ldr	r3, [r3, #0]
   b850e:	689b      	ldr	r3, [r3, #8]
   b8510:	9301      	str	r3, [sp, #4]
   b8512:	bd08      	pop	{r3, pc}
   b8514:	0003023c 	.word	0x0003023c

000b8518 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8518:	b508      	push	{r3, lr}
   b851a:	4b02      	ldr	r3, [pc, #8]	; (b8524 <hal_usart_write+0xc>)
   b851c:	681b      	ldr	r3, [r3, #0]
   b851e:	68db      	ldr	r3, [r3, #12]
   b8520:	9301      	str	r3, [sp, #4]
   b8522:	bd08      	pop	{r3, pc}
   b8524:	0003023c 	.word	0x0003023c

000b8528 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8528:	b508      	push	{r3, lr}
   b852a:	4b02      	ldr	r3, [pc, #8]	; (b8534 <hal_usart_available+0xc>)
   b852c:	681b      	ldr	r3, [r3, #0]
   b852e:	691b      	ldr	r3, [r3, #16]
   b8530:	9301      	str	r3, [sp, #4]
   b8532:	bd08      	pop	{r3, pc}
   b8534:	0003023c 	.word	0x0003023c

000b8538 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8538:	b508      	push	{r3, lr}
   b853a:	4b02      	ldr	r3, [pc, #8]	; (b8544 <hal_usart_read+0xc>)
   b853c:	681b      	ldr	r3, [r3, #0]
   b853e:	695b      	ldr	r3, [r3, #20]
   b8540:	9301      	str	r3, [sp, #4]
   b8542:	bd08      	pop	{r3, pc}
   b8544:	0003023c 	.word	0x0003023c

000b8548 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8548:	b508      	push	{r3, lr}
   b854a:	4b02      	ldr	r3, [pc, #8]	; (b8554 <hal_usart_peek+0xc>)
   b854c:	681b      	ldr	r3, [r3, #0]
   b854e:	699b      	ldr	r3, [r3, #24]
   b8550:	9301      	str	r3, [sp, #4]
   b8552:	bd08      	pop	{r3, pc}
   b8554:	0003023c 	.word	0x0003023c

000b8558 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8558:	b508      	push	{r3, lr}
   b855a:	4b02      	ldr	r3, [pc, #8]	; (b8564 <hal_usart_flush+0xc>)
   b855c:	681b      	ldr	r3, [r3, #0]
   b855e:	69db      	ldr	r3, [r3, #28]
   b8560:	9301      	str	r3, [sp, #4]
   b8562:	bd08      	pop	{r3, pc}
   b8564:	0003023c 	.word	0x0003023c

000b8568 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8568:	b508      	push	{r3, lr}
   b856a:	4b02      	ldr	r3, [pc, #8]	; (b8574 <hal_usart_is_enabled+0xc>)
   b856c:	681b      	ldr	r3, [r3, #0]
   b856e:	6a1b      	ldr	r3, [r3, #32]
   b8570:	9301      	str	r3, [sp, #4]
   b8572:	bd08      	pop	{r3, pc}
   b8574:	0003023c 	.word	0x0003023c

000b8578 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8578:	b508      	push	{r3, lr}
   b857a:	4b02      	ldr	r3, [pc, #8]	; (b8584 <hal_usart_available_data_for_write+0xc>)
   b857c:	681b      	ldr	r3, [r3, #0]
   b857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8580:	9301      	str	r3, [sp, #4]
   b8582:	bd08      	pop	{r3, pc}
   b8584:	0003023c 	.word	0x0003023c

000b8588 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8588:	b508      	push	{r3, lr}
   b858a:	4b02      	ldr	r3, [pc, #8]	; (b8594 <hal_usart_begin_config+0xc>)
   b858c:	681b      	ldr	r3, [r3, #0]
   b858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8590:	9301      	str	r3, [sp, #4]
   b8592:	bd08      	pop	{r3, pc}
   b8594:	0003023c 	.word	0x0003023c

000b8598 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8598:	b508      	push	{r3, lr}
   b859a:	4b02      	ldr	r3, [pc, #8]	; (b85a4 <hal_usart_init_ex+0xc>)
   b859c:	681b      	ldr	r3, [r3, #0]
   b859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b85a0:	9301      	str	r3, [sp, #4]
   b85a2:	bd08      	pop	{r3, pc}
   b85a4:	0003023c 	.word	0x0003023c

000b85a8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b85a8:	b508      	push	{r3, lr}
   b85aa:	4b02      	ldr	r3, [pc, #8]	; (b85b4 <HAL_USB_USART_Init+0xc>)
   b85ac:	681b      	ldr	r3, [r3, #0]
   b85ae:	681b      	ldr	r3, [r3, #0]
   b85b0:	9301      	str	r3, [sp, #4]
   b85b2:	bd08      	pop	{r3, pc}
   b85b4:	0003024c 	.word	0x0003024c

000b85b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b85b8:	b508      	push	{r3, lr}
   b85ba:	4b02      	ldr	r3, [pc, #8]	; (b85c4 <HAL_USB_USART_Begin+0xc>)
   b85bc:	681b      	ldr	r3, [r3, #0]
   b85be:	685b      	ldr	r3, [r3, #4]
   b85c0:	9301      	str	r3, [sp, #4]
   b85c2:	bd08      	pop	{r3, pc}
   b85c4:	0003024c 	.word	0x0003024c

000b85c8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b85c8:	b508      	push	{r3, lr}
   b85ca:	4b02      	ldr	r3, [pc, #8]	; (b85d4 <HAL_USB_USART_End+0xc>)
   b85cc:	681b      	ldr	r3, [r3, #0]
   b85ce:	689b      	ldr	r3, [r3, #8]
   b85d0:	9301      	str	r3, [sp, #4]
   b85d2:	bd08      	pop	{r3, pc}
   b85d4:	0003024c 	.word	0x0003024c

000b85d8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b85d8:	b508      	push	{r3, lr}
   b85da:	4b02      	ldr	r3, [pc, #8]	; (b85e4 <HAL_USB_USART_Available_Data+0xc>)
   b85dc:	681b      	ldr	r3, [r3, #0]
   b85de:	691b      	ldr	r3, [r3, #16]
   b85e0:	9301      	str	r3, [sp, #4]
   b85e2:	bd08      	pop	{r3, pc}
   b85e4:	0003024c 	.word	0x0003024c

000b85e8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b85e8:	b508      	push	{r3, lr}
   b85ea:	4b02      	ldr	r3, [pc, #8]	; (b85f4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b85ec:	681b      	ldr	r3, [r3, #0]
   b85ee:	695b      	ldr	r3, [r3, #20]
   b85f0:	9301      	str	r3, [sp, #4]
   b85f2:	bd08      	pop	{r3, pc}
   b85f4:	0003024c 	.word	0x0003024c

000b85f8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85f8:	b508      	push	{r3, lr}
   b85fa:	4b02      	ldr	r3, [pc, #8]	; (b8604 <HAL_USB_USART_Receive_Data+0xc>)
   b85fc:	681b      	ldr	r3, [r3, #0]
   b85fe:	699b      	ldr	r3, [r3, #24]
   b8600:	9301      	str	r3, [sp, #4]
   b8602:	bd08      	pop	{r3, pc}
   b8604:	0003024c 	.word	0x0003024c

000b8608 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8608:	b508      	push	{r3, lr}
   b860a:	4b02      	ldr	r3, [pc, #8]	; (b8614 <HAL_USB_USART_Send_Data+0xc>)
   b860c:	681b      	ldr	r3, [r3, #0]
   b860e:	69db      	ldr	r3, [r3, #28]
   b8610:	9301      	str	r3, [sp, #4]
   b8612:	bd08      	pop	{r3, pc}
   b8614:	0003024c 	.word	0x0003024c

000b8618 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8618:	b508      	push	{r3, lr}
   b861a:	4b02      	ldr	r3, [pc, #8]	; (b8624 <HAL_USB_USART_Flush_Data+0xc>)
   b861c:	681b      	ldr	r3, [r3, #0]
   b861e:	6a1b      	ldr	r3, [r3, #32]
   b8620:	9301      	str	r3, [sp, #4]
   b8622:	bd08      	pop	{r3, pc}
   b8624:	0003024c 	.word	0x0003024c

000b8628 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b8628:	b508      	push	{r3, lr}
   b862a:	4b02      	ldr	r3, [pc, #8]	; (b8634 <HAL_USB_USART_Is_Connected+0xc>)
   b862c:	681b      	ldr	r3, [r3, #0]
   b862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8630:	9301      	str	r3, [sp, #4]
   b8632:	bd08      	pop	{r3, pc}
   b8634:	0003024c 	.word	0x0003024c

000b8638 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8638:	b508      	push	{r3, lr}
   b863a:	4b02      	ldr	r3, [pc, #8]	; (b8644 <panic_+0xc>)
   b863c:	681b      	ldr	r3, [r3, #0]
   b863e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8640:	9301      	str	r3, [sp, #4]
   b8642:	bd08      	pop	{r3, pc}
   b8644:	00030260 	.word	0x00030260

000b8648 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8648:	b508      	push	{r3, lr}
   b864a:	4b02      	ldr	r3, [pc, #8]	; (b8654 <log_message+0xc>)
   b864c:	681b      	ldr	r3, [r3, #0]
   b864e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8650:	9301      	str	r3, [sp, #4]
   b8652:	bd08      	pop	{r3, pc}
   b8654:	00030260 	.word	0x00030260

000b8658 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8658:	b508      	push	{r3, lr}
   b865a:	4b02      	ldr	r3, [pc, #8]	; (b8664 <log_message_v+0xc>)
   b865c:	681b      	ldr	r3, [r3, #0]
   b865e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8660:	9301      	str	r3, [sp, #4]
   b8662:	bd08      	pop	{r3, pc}
   b8664:	00030260 	.word	0x00030260

000b8668 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8668:	b508      	push	{r3, lr}
   b866a:	4b02      	ldr	r3, [pc, #8]	; (b8674 <log_level_name+0xc>)
   b866c:	681b      	ldr	r3, [r3, #0]
   b866e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8670:	9301      	str	r3, [sp, #4]
   b8672:	bd08      	pop	{r3, pc}
   b8674:	00030260 	.word	0x00030260

000b8678 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8678:	b508      	push	{r3, lr}
   b867a:	4b02      	ldr	r3, [pc, #8]	; (b8684 <log_set_callbacks+0xc>)
   b867c:	681b      	ldr	r3, [r3, #0]
   b867e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8680:	9301      	str	r3, [sp, #4]
   b8682:	bd08      	pop	{r3, pc}
   b8684:	00030260 	.word	0x00030260

000b8688 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8688:	b508      	push	{r3, lr}
   b868a:	4b03      	ldr	r3, [pc, #12]	; (b8698 <diag_get_source+0x10>)
   b868c:	681b      	ldr	r3, [r3, #0]
   b868e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8692:	9301      	str	r3, [sp, #4]
   b8694:	bd08      	pop	{r3, pc}
   b8696:	0000      	.short	0x0000
   b8698:	00030260 	.word	0x00030260

000b869c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b869c:	b508      	push	{r3, lr}
   b869e:	4b02      	ldr	r3, [pc, #8]	; (b86a8 <system_mode+0xc>)
   b86a0:	681b      	ldr	r3, [r3, #0]
   b86a2:	681b      	ldr	r3, [r3, #0]
   b86a4:	9301      	str	r3, [sp, #4]
   b86a6:	bd08      	pop	{r3, pc}
   b86a8:	00030220 	.word	0x00030220

000b86ac <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b86ac:	b508      	push	{r3, lr}
   b86ae:	4b02      	ldr	r3, [pc, #8]	; (b86b8 <set_system_mode+0xc>)
   b86b0:	681b      	ldr	r3, [r3, #0]
   b86b2:	685b      	ldr	r3, [r3, #4]
   b86b4:	9301      	str	r3, [sp, #4]
   b86b6:	bd08      	pop	{r3, pc}
   b86b8:	00030220 	.word	0x00030220

000b86bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b86bc:	b508      	push	{r3, lr}
   b86be:	4b02      	ldr	r3, [pc, #8]	; (b86c8 <system_delay_ms+0xc>)
   b86c0:	681b      	ldr	r3, [r3, #0]
   b86c2:	695b      	ldr	r3, [r3, #20]
   b86c4:	9301      	str	r3, [sp, #4]
   b86c6:	bd08      	pop	{r3, pc}
   b86c8:	00030220 	.word	0x00030220

000b86cc <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b86cc:	b508      	push	{r3, lr}
   b86ce:	4b02      	ldr	r3, [pc, #8]	; (b86d8 <system_subscribe_event+0xc>)
   b86d0:	681b      	ldr	r3, [r3, #0]
   b86d2:	6a1b      	ldr	r3, [r3, #32]
   b86d4:	9301      	str	r3, [sp, #4]
   b86d6:	bd08      	pop	{r3, pc}
   b86d8:	00030220 	.word	0x00030220

000b86dc <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b86dc:	b508      	push	{r3, lr}
   b86de:	4b02      	ldr	r3, [pc, #8]	; (b86e8 <system_thread_set_state+0xc>)
   b86e0:	681b      	ldr	r3, [r3, #0]
   b86e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b86e4:	9301      	str	r3, [sp, #4]
   b86e6:	bd08      	pop	{r3, pc}
   b86e8:	00030220 	.word	0x00030220

000b86ec <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b86ec:	b508      	push	{r3, lr}
   b86ee:	4b02      	ldr	r3, [pc, #8]	; (b86f8 <system_thread_get_state+0xc>)
   b86f0:	681b      	ldr	r3, [r3, #0]
   b86f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b86f4:	9301      	str	r3, [sp, #4]
   b86f6:	bd08      	pop	{r3, pc}
   b86f8:	00030220 	.word	0x00030220

000b86fc <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b86fc:	b508      	push	{r3, lr}
   b86fe:	4b02      	ldr	r3, [pc, #8]	; (b8708 <system_notify_time_changed+0xc>)
   b8700:	681b      	ldr	r3, [r3, #0]
   b8702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8704:	9301      	str	r3, [sp, #4]
   b8706:	bd08      	pop	{r3, pc}
   b8708:	00030220 	.word	0x00030220

000b870c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b870c:	b508      	push	{r3, lr}
   b870e:	4b03      	ldr	r3, [pc, #12]	; (b871c <system_ctrl_set_app_request_handler+0x10>)
   b8710:	681b      	ldr	r3, [r3, #0]
   b8712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8716:	9301      	str	r3, [sp, #4]
   b8718:	bd08      	pop	{r3, pc}
   b871a:	0000      	.short	0x0000
   b871c:	00030220 	.word	0x00030220

000b8720 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8720:	b508      	push	{r3, lr}
   b8722:	4b03      	ldr	r3, [pc, #12]	; (b8730 <system_ctrl_set_result+0x10>)
   b8724:	681b      	ldr	r3, [r3, #0]
   b8726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b872a:	9301      	str	r3, [sp, #4]
   b872c:	bd08      	pop	{r3, pc}
   b872e:	0000      	.short	0x0000
   b8730:	00030220 	.word	0x00030220

000b8734 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b8734:	b508      	push	{r3, lr}
   b8736:	4b03      	ldr	r3, [pc, #12]	; (b8744 <system_power_management_set_config+0x10>)
   b8738:	681b      	ldr	r3, [r3, #0]
   b873a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b873e:	9301      	str	r3, [sp, #4]
   b8740:	bd08      	pop	{r3, pc}
   b8742:	0000      	.short	0x0000
   b8744:	00030220 	.word	0x00030220

000b8748 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8748:	b508      	push	{r3, lr}
   b874a:	4b03      	ldr	r3, [pc, #12]	; (b8758 <system_sleep_ext+0x10>)
   b874c:	681b      	ldr	r3, [r3, #0]
   b874e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b8752:	9301      	str	r3, [sp, #4]
   b8754:	bd08      	pop	{r3, pc}
   b8756:	0000      	.short	0x0000
   b8758:	00030220 	.word	0x00030220

000b875c <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b875c:	b508      	push	{r3, lr}
   b875e:	4b03      	ldr	r3, [pc, #12]	; (b876c <system_reset+0x10>)
   b8760:	681b      	ldr	r3, [r3, #0]
   b8762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b8766:	9301      	str	r3, [sp, #4]
   b8768:	bd08      	pop	{r3, pc}
   b876a:	0000      	.short	0x0000
   b876c:	00030220 	.word	0x00030220

000b8770 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8770:	b508      	push	{r3, lr}
   b8772:	4b02      	ldr	r3, [pc, #8]	; (b877c <spark_process+0xc>)
   b8774:	681b      	ldr	r3, [r3, #0]
   b8776:	689b      	ldr	r3, [r3, #8]
   b8778:	9301      	str	r3, [sp, #4]
   b877a:	bd08      	pop	{r3, pc}
   b877c:	00030244 	.word	0x00030244

000b8780 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8780:	b508      	push	{r3, lr}
   b8782:	4b02      	ldr	r3, [pc, #8]	; (b878c <spark_cloud_flag_connected+0xc>)
   b8784:	681b      	ldr	r3, [r3, #0]
   b8786:	695b      	ldr	r3, [r3, #20]
   b8788:	9301      	str	r3, [sp, #4]
   b878a:	bd08      	pop	{r3, pc}
   b878c:	00030244 	.word	0x00030244

000b8790 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b8790:	b508      	push	{r3, lr}
   b8792:	4b02      	ldr	r3, [pc, #8]	; (b879c <spark_deviceID+0xc>)
   b8794:	681b      	ldr	r3, [r3, #0]
   b8796:	69db      	ldr	r3, [r3, #28]
   b8798:	9301      	str	r3, [sp, #4]
   b879a:	bd08      	pop	{r3, pc}
   b879c:	00030244 	.word	0x00030244

000b87a0 <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b87a0:	b508      	push	{r3, lr}
   b87a2:	4b02      	ldr	r3, [pc, #8]	; (b87ac <spark_sync_time_pending+0xc>)
   b87a4:	681b      	ldr	r3, [r3, #0]
   b87a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b87a8:	9301      	str	r3, [sp, #4]
   b87aa:	bd08      	pop	{r3, pc}
   b87ac:	00030244 	.word	0x00030244

000b87b0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b87b0:	b508      	push	{r3, lr}
   b87b2:	4b02      	ldr	r3, [pc, #8]	; (b87bc <spark_sync_time_last+0xc>)
   b87b4:	681b      	ldr	r3, [r3, #0]
   b87b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b87b8:	9301      	str	r3, [sp, #4]
   b87ba:	bd08      	pop	{r3, pc}
   b87bc:	00030244 	.word	0x00030244

000b87c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b87c0:	b508      	push	{r3, lr}
   b87c2:	4b02      	ldr	r3, [pc, #8]	; (b87cc <spark_set_random_seed_from_cloud_handler+0xc>)
   b87c4:	681b      	ldr	r3, [r3, #0]
   b87c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b87c8:	9301      	str	r3, [sp, #4]
   b87ca:	bd08      	pop	{r3, pc}
   b87cc:	00030244 	.word	0x00030244

000b87d0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b87d0:	b508      	push	{r3, lr}
   b87d2:	4b02      	ldr	r3, [pc, #8]	; (b87dc <network_connect+0xc>)
   b87d4:	681b      	ldr	r3, [r3, #0]
   b87d6:	685b      	ldr	r3, [r3, #4]
   b87d8:	9301      	str	r3, [sp, #4]
   b87da:	bd08      	pop	{r3, pc}
   b87dc:	00030240 	.word	0x00030240

000b87e0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b87e0:	b508      	push	{r3, lr}
   b87e2:	4b02      	ldr	r3, [pc, #8]	; (b87ec <network_connecting+0xc>)
   b87e4:	681b      	ldr	r3, [r3, #0]
   b87e6:	689b      	ldr	r3, [r3, #8]
   b87e8:	9301      	str	r3, [sp, #4]
   b87ea:	bd08      	pop	{r3, pc}
   b87ec:	00030240 	.word	0x00030240

000b87f0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b87f0:	b508      	push	{r3, lr}
   b87f2:	4b02      	ldr	r3, [pc, #8]	; (b87fc <network_disconnect+0xc>)
   b87f4:	681b      	ldr	r3, [r3, #0]
   b87f6:	68db      	ldr	r3, [r3, #12]
   b87f8:	9301      	str	r3, [sp, #4]
   b87fa:	bd08      	pop	{r3, pc}
   b87fc:	00030240 	.word	0x00030240

000b8800 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8800:	b508      	push	{r3, lr}
   b8802:	4b02      	ldr	r3, [pc, #8]	; (b880c <network_ready+0xc>)
   b8804:	681b      	ldr	r3, [r3, #0]
   b8806:	691b      	ldr	r3, [r3, #16]
   b8808:	9301      	str	r3, [sp, #4]
   b880a:	bd08      	pop	{r3, pc}
   b880c:	00030240 	.word	0x00030240

000b8810 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8810:	b508      	push	{r3, lr}
   b8812:	4b02      	ldr	r3, [pc, #8]	; (b881c <network_on+0xc>)
   b8814:	681b      	ldr	r3, [r3, #0]
   b8816:	695b      	ldr	r3, [r3, #20]
   b8818:	9301      	str	r3, [sp, #4]
   b881a:	bd08      	pop	{r3, pc}
   b881c:	00030240 	.word	0x00030240

000b8820 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8820:	b508      	push	{r3, lr}
   b8822:	4b02      	ldr	r3, [pc, #8]	; (b882c <network_off+0xc>)
   b8824:	681b      	ldr	r3, [r3, #0]
   b8826:	699b      	ldr	r3, [r3, #24]
   b8828:	9301      	str	r3, [sp, #4]
   b882a:	bd08      	pop	{r3, pc}
   b882c:	00030240 	.word	0x00030240

000b8830 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8830:	b508      	push	{r3, lr}
   b8832:	4b02      	ldr	r3, [pc, #8]	; (b883c <network_listen+0xc>)
   b8834:	681b      	ldr	r3, [r3, #0]
   b8836:	69db      	ldr	r3, [r3, #28]
   b8838:	9301      	str	r3, [sp, #4]
   b883a:	bd08      	pop	{r3, pc}
   b883c:	00030240 	.word	0x00030240

000b8840 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8840:	b508      	push	{r3, lr}
   b8842:	4b02      	ldr	r3, [pc, #8]	; (b884c <network_listening+0xc>)
   b8844:	681b      	ldr	r3, [r3, #0]
   b8846:	6a1b      	ldr	r3, [r3, #32]
   b8848:	9301      	str	r3, [sp, #4]
   b884a:	bd08      	pop	{r3, pc}
   b884c:	00030240 	.word	0x00030240

000b8850 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8850:	b508      	push	{r3, lr}
   b8852:	4b02      	ldr	r3, [pc, #8]	; (b885c <network_set_listen_timeout+0xc>)
   b8854:	681b      	ldr	r3, [r3, #0]
   b8856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8858:	9301      	str	r3, [sp, #4]
   b885a:	bd08      	pop	{r3, pc}
   b885c:	00030240 	.word	0x00030240

000b8860 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8860:	b508      	push	{r3, lr}
   b8862:	4b02      	ldr	r3, [pc, #8]	; (b886c <network_get_listen_timeout+0xc>)
   b8864:	681b      	ldr	r3, [r3, #0]
   b8866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8868:	9301      	str	r3, [sp, #4]
   b886a:	bd08      	pop	{r3, pc}
   b886c:	00030240 	.word	0x00030240

000b8870 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8870:	b508      	push	{r3, lr}
   b8872:	4b02      	ldr	r3, [pc, #8]	; (b887c <network_is_on+0xc>)
   b8874:	681b      	ldr	r3, [r3, #0]
   b8876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8878:	9301      	str	r3, [sp, #4]
   b887a:	bd08      	pop	{r3, pc}
   b887c:	00030240 	.word	0x00030240

000b8880 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8880:	b508      	push	{r3, lr}
   b8882:	4b02      	ldr	r3, [pc, #8]	; (b888c <network_is_off+0xc>)
   b8884:	681b      	ldr	r3, [r3, #0]
   b8886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8888:	9301      	str	r3, [sp, #4]
   b888a:	bd08      	pop	{r3, pc}
   b888c:	00030240 	.word	0x00030240

000b8890 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8890:	b508      	push	{r3, lr}
   b8892:	4b02      	ldr	r3, [pc, #8]	; (b889c <malloc+0xc>)
   b8894:	681b      	ldr	r3, [r3, #0]
   b8896:	681b      	ldr	r3, [r3, #0]
   b8898:	9301      	str	r3, [sp, #4]
   b889a:	bd08      	pop	{r3, pc}
   b889c:	0003021c 	.word	0x0003021c

000b88a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b88a0:	b508      	push	{r3, lr}
   b88a2:	4b02      	ldr	r3, [pc, #8]	; (b88ac <free+0xc>)
   b88a4:	681b      	ldr	r3, [r3, #0]
   b88a6:	685b      	ldr	r3, [r3, #4]
   b88a8:	9301      	str	r3, [sp, #4]
   b88aa:	bd08      	pop	{r3, pc}
   b88ac:	0003021c 	.word	0x0003021c

000b88b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b88b0:	b508      	push	{r3, lr}
   b88b2:	4b02      	ldr	r3, [pc, #8]	; (b88bc <realloc+0xc>)
   b88b4:	681b      	ldr	r3, [r3, #0]
   b88b6:	689b      	ldr	r3, [r3, #8]
   b88b8:	9301      	str	r3, [sp, #4]
   b88ba:	bd08      	pop	{r3, pc}
   b88bc:	0003021c 	.word	0x0003021c

000b88c0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b88c0:	b508      	push	{r3, lr}
   b88c2:	4b02      	ldr	r3, [pc, #8]	; (b88cc <siprintf+0xc>)
   b88c4:	681b      	ldr	r3, [r3, #0]
   b88c6:	691b      	ldr	r3, [r3, #16]
   b88c8:	9301      	str	r3, [sp, #4]
   b88ca:	bd08      	pop	{r3, pc}
   b88cc:	0003021c 	.word	0x0003021c

000b88d0 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b88d0:	b508      	push	{r3, lr}
   b88d2:	4b02      	ldr	r3, [pc, #8]	; (b88dc <snprintf+0xc>)
   b88d4:	681b      	ldr	r3, [r3, #0]
   b88d6:	69db      	ldr	r3, [r3, #28]
   b88d8:	9301      	str	r3, [sp, #4]
   b88da:	bd08      	pop	{r3, pc}
   b88dc:	0003021c 	.word	0x0003021c

000b88e0 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b88e0:	b508      	push	{r3, lr}
   b88e2:	4b02      	ldr	r3, [pc, #8]	; (b88ec <vsnprintf+0xc>)
   b88e4:	681b      	ldr	r3, [r3, #0]
   b88e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b88e8:	9301      	str	r3, [sp, #4]
   b88ea:	bd08      	pop	{r3, pc}
   b88ec:	0003021c 	.word	0x0003021c

000b88f0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b88f0:	b508      	push	{r3, lr}
   b88f2:	4b02      	ldr	r3, [pc, #8]	; (b88fc <abort+0xc>)
   b88f4:	681b      	ldr	r3, [r3, #0]
   b88f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b88f8:	9301      	str	r3, [sp, #4]
   b88fa:	bd08      	pop	{r3, pc}
   b88fc:	0003021c 	.word	0x0003021c

000b8900 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8900:	b508      	push	{r3, lr}
   b8902:	4b02      	ldr	r3, [pc, #8]	; (b890c <__errno+0xc>)
   b8904:	681b      	ldr	r3, [r3, #0]
   b8906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8908:	9301      	str	r3, [sp, #4]
   b890a:	bd08      	pop	{r3, pc}
   b890c:	0003021c 	.word	0x0003021c

000b8910 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8910:	b508      	push	{r3, lr}
   b8912:	4b02      	ldr	r3, [pc, #8]	; (b891c <__assert_func+0xc>)
   b8914:	681b      	ldr	r3, [r3, #0]
   b8916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8918:	9301      	str	r3, [sp, #4]
   b891a:	bd08      	pop	{r3, pc}
   b891c:	0003021c 	.word	0x0003021c

000b8920 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8920:	b508      	push	{r3, lr}
   b8922:	4b02      	ldr	r3, [pc, #8]	; (b892c <newlib_impure_ptr_callback+0xc>)
   b8924:	681b      	ldr	r3, [r3, #0]
   b8926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8928:	9301      	str	r3, [sp, #4]
   b892a:	bd08      	pop	{r3, pc}
   b892c:	0003021c 	.word	0x0003021c

000b8930 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b8930:	b508      	push	{r3, lr}
   b8932:	4b02      	ldr	r3, [pc, #8]	; (b893c <strftime+0xc>)
   b8934:	681b      	ldr	r3, [r3, #0]
   b8936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8938:	9301      	str	r3, [sp, #4]
   b893a:	bd08      	pop	{r3, pc}
   b893c:	0003021c 	.word	0x0003021c

000b8940 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8940:	b508      	push	{r3, lr}
   b8942:	4b02      	ldr	r3, [pc, #8]	; (b894c <localtime_r+0xc>)
   b8944:	681b      	ldr	r3, [r3, #0]
   b8946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8948:	9301      	str	r3, [sp, #4]
   b894a:	bd08      	pop	{r3, pc}
   b894c:	0003021c 	.word	0x0003021c

000b8950 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8950:	b508      	push	{r3, lr}
   b8952:	4b02      	ldr	r3, [pc, #8]	; (b895c <gmtime_r+0xc>)
   b8954:	681b      	ldr	r3, [r3, #0]
   b8956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8958:	9301      	str	r3, [sp, #4]
   b895a:	bd08      	pop	{r3, pc}
   b895c:	0003021c 	.word	0x0003021c

000b8960 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8960:	b508      	push	{r3, lr}
   b8962:	4b02      	ldr	r3, [pc, #8]	; (b896c <mktime+0xc>)
   b8964:	681b      	ldr	r3, [r3, #0]
   b8966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8968:	9301      	str	r3, [sp, #4]
   b896a:	bd08      	pop	{r3, pc}
   b896c:	0003021c 	.word	0x0003021c

000b8970 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8970:	2100      	movs	r1, #0
   b8972:	f7ff bea3 	b.w	b86bc <system_delay_ms>

000b8976 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8976:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8978:	6843      	ldr	r3, [r0, #4]
   b897a:	3b01      	subs	r3, #1
    {
   b897c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b897e:	6043      	str	r3, [r0, #4]
   b8980:	b963      	cbnz	r3, b899c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8982:	6803      	ldr	r3, [r0, #0]
   b8984:	689b      	ldr	r3, [r3, #8]
   b8986:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8988:	68a3      	ldr	r3, [r4, #8]
   b898a:	3b01      	subs	r3, #1
   b898c:	60a3      	str	r3, [r4, #8]
   b898e:	b92b      	cbnz	r3, b899c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8990:	6823      	ldr	r3, [r4, #0]
   b8992:	4620      	mov	r0, r4
   b8994:	68db      	ldr	r3, [r3, #12]
    }
   b8996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b899a:	4718      	bx	r3
    }
   b899c:	bd10      	pop	{r4, pc}

000b899e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b899e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b89a0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b89a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b89a6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b89aa:	42ae      	cmp	r6, r5
   b89ac:	d004      	beq.n	b89b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b89ae:	4628      	mov	r0, r5
   b89b0:	f001 fffe 	bl	ba9b0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b89b4:	3510      	adds	r5, #16
   b89b6:	e7f8      	b.n	b89aa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b89b8:	6820      	ldr	r0, [r4, #0]
   b89ba:	f7ff ff71 	bl	b88a0 <free>
    AllocatorT::free(data_);
}
   b89be:	4620      	mov	r0, r4
   b89c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b89c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b89c4:	4802      	ldr	r0, [pc, #8]	; (b89d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b89c6:	2300      	movs	r3, #0
   b89c8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b89ca:	f7ff bc25 	b.w	b8218 <os_mutex_recursive_create>
   b89ce:	bf00      	nop
   b89d0:	2003e610 	.word	0x2003e610

000b89d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b89d4:	2200      	movs	r2, #0
   b89d6:	6840      	ldr	r0, [r0, #4]
   b89d8:	4611      	mov	r1, r2
   b89da:	f7ff bf11 	b.w	b8800 <network_ready>

000b89de <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b89de:	2200      	movs	r2, #0
   b89e0:	6840      	ldr	r0, [r0, #4]
   b89e2:	4611      	mov	r1, r2
   b89e4:	f7ff bf2c 	b.w	b8840 <network_listening>

000b89e8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b89e8:	2200      	movs	r2, #0
   b89ea:	6840      	ldr	r0, [r0, #4]
   b89ec:	4611      	mov	r1, r2
   b89ee:	f7ff bf37 	b.w	b8860 <network_get_listen_timeout>

000b89f2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b89f2:	6840      	ldr	r0, [r0, #4]
   b89f4:	2200      	movs	r2, #0
   b89f6:	f7ff bf2b 	b.w	b8850 <network_set_listen_timeout>

000b89fa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b89fa:	6840      	ldr	r0, [r0, #4]
   b89fc:	2200      	movs	r2, #0
   b89fe:	f081 0101 	eor.w	r1, r1, #1
   b8a02:	f7ff bf15 	b.w	b8830 <network_listen>

000b8a06 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8a06:	2300      	movs	r3, #0
   b8a08:	6840      	ldr	r0, [r0, #4]
   b8a0a:	461a      	mov	r2, r3
   b8a0c:	4619      	mov	r1, r3
   b8a0e:	f7ff bf07 	b.w	b8820 <network_off>

000b8a12 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8a12:	2300      	movs	r3, #0
   b8a14:	6840      	ldr	r0, [r0, #4]
   b8a16:	461a      	mov	r2, r3
   b8a18:	4619      	mov	r1, r3
   b8a1a:	f7ff bef9 	b.w	b8810 <network_on>

000b8a1e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8a1e:	2200      	movs	r2, #0
   b8a20:	6840      	ldr	r0, [r0, #4]
   b8a22:	4611      	mov	r1, r2
   b8a24:	f7ff bedc 	b.w	b87e0 <network_connecting>

000b8a28 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8a28:	6840      	ldr	r0, [r0, #4]
   b8a2a:	2200      	movs	r2, #0
   b8a2c:	2102      	movs	r1, #2
   b8a2e:	f7ff bedf 	b.w	b87f0 <network_disconnect>

000b8a32 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8a32:	2300      	movs	r3, #0
   b8a34:	6840      	ldr	r0, [r0, #4]
   b8a36:	461a      	mov	r2, r3
   b8a38:	f7ff beca 	b.w	b87d0 <network_connect>

000b8a3c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b8a3c:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b8a3e:	4b13      	ldr	r3, [pc, #76]	; (b8a8c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b8a40:	6003      	str	r3, [r0, #0]
   b8a42:	2518      	movs	r5, #24
   b8a44:	3330      	adds	r3, #48	; 0x30
   b8a46:	b086      	sub	sp, #24
   b8a48:	460e      	mov	r6, r1
   b8a4a:	6043      	str	r3, [r0, #4]
   b8a4c:	462a      	mov	r2, r5
   b8a4e:	2100      	movs	r1, #0
   b8a50:	4604      	mov	r4, r0
   b8a52:	3008      	adds	r0, #8
   b8a54:	f003 faf8 	bl	bc048 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b8a58:	2200      	movs	r2, #0
   b8a5a:	6870      	ldr	r0, [r6, #4]
   b8a5c:	4611      	mov	r1, r2
   b8a5e:	f7ff fecf 	bl	b8800 <network_ready>
   b8a62:	b178      	cbz	r0, b8a84 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b8a64:	2100      	movs	r1, #0
   b8a66:	462a      	mov	r2, r5
   b8a68:	4668      	mov	r0, sp
   b8a6a:	f003 faed 	bl	bc048 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8a6e:	4669      	mov	r1, sp
   b8a70:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b8a72:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8a76:	f7ff fbc7 	bl	b8208 <cellular_signal>
   b8a7a:	b918      	cbnz	r0, b8a84 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b8a7c:	4669      	mov	r1, sp
   b8a7e:	4620      	mov	r0, r4
   b8a80:	f000 f8b8 	bl	b8bf4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b8a84:	4620      	mov	r0, r4
   b8a86:	b006      	add	sp, #24
   b8a88:	bd70      	pop	{r4, r5, r6, pc}
   b8a8a:	bf00      	nop
   b8a8c:	000bd274 	.word	0x000bd274

000b8a90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8a90:	4b08      	ldr	r3, [pc, #32]	; (b8ab4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8a92:	b510      	push	{r4, lr}
   b8a94:	2428      	movs	r4, #40	; 0x28
   b8a96:	4622      	mov	r2, r4
   b8a98:	4618      	mov	r0, r3
   b8a9a:	2100      	movs	r1, #0
   b8a9c:	f003 fad4 	bl	bc048 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8aa0:	4b05      	ldr	r3, [pc, #20]	; (b8ab8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8aa2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8aa8:	6042      	str	r2, [r0, #4]
   b8aaa:	2204      	movs	r2, #4
   b8aac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8aae:	4a03      	ldr	r2, [pc, #12]	; (b8abc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8ab0:	601a      	str	r2, [r3, #0]
   b8ab2:	bd10      	pop	{r4, pc}
   b8ab4:	2003e61c 	.word	0x2003e61c
   b8ab8:	2003e614 	.word	0x2003e614
   b8abc:	000bd238 	.word	0x000bd238

000b8ac0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b8ac0:	4770      	bx	lr

000b8ac2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b8ac2:	7b00      	ldrb	r0, [r0, #12]
   b8ac4:	4770      	bx	lr

000b8ac6 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8ac6:	7b03      	ldrb	r3, [r0, #12]
   b8ac8:	b14b      	cbz	r3, b8ade <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b8aca:	6903      	ldr	r3, [r0, #16]
   b8acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8ad0:	d005      	beq.n	b8ade <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8ad2:	6980      	ldr	r0, [r0, #24]
   b8ad4:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b8ad8:	bf18      	it	ne
   b8ada:	2001      	movne	r0, #1
   b8adc:	4770      	bx	lr
   b8ade:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b8ae0:	4770      	bx	lr

000b8ae2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b8ae2:	6803      	ldr	r3, [r0, #0]
   b8ae4:	6a1b      	ldr	r3, [r3, #32]
   b8ae6:	4718      	bx	r3

000b8ae8 <_ZNK14CellularSignal7printToER5Print>:
{
   b8ae8:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b8aea:	6803      	ldr	r3, [r0, #0]
{
   b8aec:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b8aee:	691b      	ldr	r3, [r3, #16]
{
   b8af0:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b8af2:	4798      	blx	r3
   b8af4:	2102      	movs	r1, #2
   b8af6:	4628      	mov	r0, r5
   b8af8:	f001 fe38 	bl	ba76c <_ZN5Print5printEfi>
    n += p.print(',');
   b8afc:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b8afe:	4604      	mov	r4, r0
    n += p.print(',');
   b8b00:	4628      	mov	r0, r5
   b8b02:	f001 fd3d 	bl	ba580 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b8b06:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b8b08:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b8b0a:	699b      	ldr	r3, [r3, #24]
   b8b0c:	4630      	mov	r0, r6
   b8b0e:	4798      	blx	r3
   b8b10:	2102      	movs	r1, #2
   b8b12:	4628      	mov	r0, r5
   b8b14:	f001 fe2a 	bl	ba76c <_ZN5Print5printEfi>
}
   b8b18:	4420      	add	r0, r4
   b8b1a:	bd70      	pop	{r4, r5, r6, pc}

000b8b1c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b8b1c:	f1a0 0004 	sub.w	r0, r0, #4
   b8b20:	f7ff bfe2 	b.w	b8ae8 <_ZNK14CellularSignal7printToER5Print>

000b8b24 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b8b24:	b510      	push	{r4, lr}
   b8b26:	2120      	movs	r1, #32
   b8b28:	4604      	mov	r4, r0
   b8b2a:	f7fb fab8 	bl	b409e <_ZdlPvj>
   b8b2e:	4620      	mov	r0, r4
   b8b30:	bd10      	pop	{r4, pc}
	...

000b8b34 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b8b34:	7b03      	ldrb	r3, [r0, #12]
   b8b36:	b17b      	cbz	r3, b8b58 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b8b38:	6943      	ldr	r3, [r0, #20]
   b8b3a:	2b00      	cmp	r3, #0
   b8b3c:	db0c      	blt.n	b8b58 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b8b3e:	ee07 3a90 	vmov	s15, r3
   b8b42:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8b60 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b8b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b4a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b4e:	eddf 7a05 	vldr	s15, [pc, #20]	; b8b64 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b8b52:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8b56:	4770      	bx	lr
    return -1.0f;
   b8b58:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8b5c:	4770      	bx	lr
   b8b5e:	bf00      	nop
   b8b60:	477fff00 	.word	0x477fff00
   b8b64:	42c80000 	.word	0x42c80000

000b8b68 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b8b68:	7b03      	ldrb	r3, [r0, #12]
   b8b6a:	b163      	cbz	r3, b8b86 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b8b6c:	6903      	ldr	r3, [r0, #16]
   b8b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8b72:	d008      	beq.n	b8b86 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b8b74:	ee07 3a90 	vmov	s15, r3
   b8b78:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8b8c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b8b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b80:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b84:	4770      	bx	lr
    return 0.0f;
   b8b86:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8b90 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b8b8a:	4770      	bx	lr
   b8b8c:	42c80000 	.word	0x42c80000
   b8b90:	00000000 	.word	0x00000000

000b8b94 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b8b94:	7b03      	ldrb	r3, [r0, #12]
   b8b96:	b17b      	cbz	r3, b8bb8 <_ZNK14CellularSignal10getQualityEv+0x24>
   b8b98:	69c3      	ldr	r3, [r0, #28]
   b8b9a:	2b00      	cmp	r3, #0
   b8b9c:	db0c      	blt.n	b8bb8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b8b9e:	ee07 3a90 	vmov	s15, r3
   b8ba2:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8bc0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b8ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8baa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8bae:	eddf 7a05 	vldr	s15, [pc, #20]	; b8bc4 <_ZNK14CellularSignal10getQualityEv+0x30>
   b8bb2:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8bb6:	4770      	bx	lr
    return -1.0f;
   b8bb8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8bbc:	4770      	bx	lr
   b8bbe:	bf00      	nop
   b8bc0:	477fff00 	.word	0x477fff00
   b8bc4:	42c80000 	.word	0x42c80000

000b8bc8 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b8bc8:	7b03      	ldrb	r3, [r0, #12]
   b8bca:	b163      	cbz	r3, b8be6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b8bcc:	6983      	ldr	r3, [r0, #24]
   b8bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8bd2:	d008      	beq.n	b8be6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b8bd4:	ee07 3a90 	vmov	s15, r3
   b8bd8:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8bec <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b8bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8be0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8be4:	4770      	bx	lr
    return 0.0f;
   b8be6:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8bf0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b8bea:	4770      	bx	lr
   b8bec:	42c80000 	.word	0x42c80000
   b8bf0:	00000000 	.word	0x00000000

000b8bf4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b8bf4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b8bf6:	460d      	mov	r5, r1
   b8bf8:	f100 0408 	add.w	r4, r0, #8
   b8bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8c00:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8c04:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b8c08:	2001      	movs	r0, #1
   b8c0a:	bd30      	pop	{r4, r5, pc}

000b8c0c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8c0c:	2200      	movs	r2, #0
   b8c0e:	6840      	ldr	r0, [r0, #4]
   b8c10:	4611      	mov	r1, r2
   b8c12:	f7ff be15 	b.w	b8840 <network_listening>

000b8c16 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8c16:	2200      	movs	r2, #0
   b8c18:	6840      	ldr	r0, [r0, #4]
   b8c1a:	4611      	mov	r1, r2
   b8c1c:	f7ff be20 	b.w	b8860 <network_get_listen_timeout>

000b8c20 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8c20:	6840      	ldr	r0, [r0, #4]
   b8c22:	2200      	movs	r2, #0
   b8c24:	f7ff be14 	b.w	b8850 <network_set_listen_timeout>

000b8c28 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8c28:	6840      	ldr	r0, [r0, #4]
   b8c2a:	2200      	movs	r2, #0
   b8c2c:	f081 0101 	eor.w	r1, r1, #1
   b8c30:	f7ff bdfe 	b.w	b8830 <network_listen>

000b8c34 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8c34:	2300      	movs	r3, #0
   b8c36:	6840      	ldr	r0, [r0, #4]
   b8c38:	461a      	mov	r2, r3
   b8c3a:	4619      	mov	r1, r3
   b8c3c:	f7ff bdf0 	b.w	b8820 <network_off>

000b8c40 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8c40:	2300      	movs	r3, #0
   b8c42:	6840      	ldr	r0, [r0, #4]
   b8c44:	461a      	mov	r2, r3
   b8c46:	4619      	mov	r1, r3
   b8c48:	f7ff bde2 	b.w	b8810 <network_on>

000b8c4c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8c4c:	2200      	movs	r2, #0
   b8c4e:	6840      	ldr	r0, [r0, #4]
   b8c50:	4611      	mov	r1, r2
   b8c52:	f7ff bdd5 	b.w	b8800 <network_ready>

000b8c56 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8c56:	2200      	movs	r2, #0
   b8c58:	6840      	ldr	r0, [r0, #4]
   b8c5a:	4611      	mov	r1, r2
   b8c5c:	f7ff bdc0 	b.w	b87e0 <network_connecting>

000b8c60 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8c60:	6840      	ldr	r0, [r0, #4]
   b8c62:	2200      	movs	r2, #0
   b8c64:	2102      	movs	r1, #2
   b8c66:	f7ff bdc3 	b.w	b87f0 <network_disconnect>

000b8c6a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8c6a:	2300      	movs	r3, #0
   b8c6c:	6840      	ldr	r0, [r0, #4]
   b8c6e:	461a      	mov	r2, r3
   b8c70:	f7ff bdae 	b.w	b87d0 <network_connect>

000b8c74 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b8c74:	4b02      	ldr	r3, [pc, #8]	; (b8c80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8c76:	2203      	movs	r2, #3
   b8c78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8c7a:	4a02      	ldr	r2, [pc, #8]	; (b8c84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8c7c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8c7e:	4770      	bx	lr
   b8c80:	2003e644 	.word	0x2003e644
   b8c84:	000bd2b0 	.word	0x000bd2b0

000b8c88 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b8c88:	6800      	ldr	r0, [r0, #0]
   b8c8a:	f000 b8e7 	b.w	b8e5c <_ZN7TwoWire4lockEv>

000b8c8e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b8c8e:	b510      	push	{r4, lr}
   b8c90:	4604      	mov	r4, r0
      lock_(_lock) {
   b8c92:	6001      	str	r1, [r0, #0]
   b8c94:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b8c96:	b10a      	cbz	r2, b8c9c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b8c98:	f7ff fff6 	bl	b8c88 <_ZN9FuelGauge4lockEv>
}
   b8c9c:	4620      	mov	r0, r4
   b8c9e:	bd10      	pop	{r4, pc}

000b8ca0 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b8ca0:	b513      	push	{r0, r1, r4, lr}
   b8ca2:	4604      	mov	r4, r0
   b8ca4:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b8ca6:	f002 fc35 	bl	bb514 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8caa:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b8cac:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b8cae:	4620      	mov	r0, r4
   b8cb0:	f7ff ffed 	bl	b8c8e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8cb4:	4620      	mov	r0, r4
   b8cb6:	b002      	add	sp, #8
   b8cb8:	bd10      	pop	{r4, pc}

000b8cba <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b8cba:	6800      	ldr	r0, [r0, #0]
   b8cbc:	f000 b8d7 	b.w	b8e6e <_ZN7TwoWire6unlockEv>

000b8cc0 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b8cc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8cc4:	4604      	mov	r4, r0
   b8cc6:	461d      	mov	r5, r3
   b8cc8:	460f      	mov	r7, r1
   b8cca:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b8ccc:	f7ff ffdc 	bl	b8c88 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8cd0:	2236      	movs	r2, #54	; 0x36
   b8cd2:	2300      	movs	r3, #0
   b8cd4:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b8cd8:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b8cda:	f04f 0801 	mov.w	r8, #1
   b8cde:	230a      	movs	r3, #10
   b8ce0:	4669      	mov	r1, sp
   b8ce2:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8ce6:	f000 f89d 	bl	b8e24 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b8cea:	6820      	ldr	r0, [r4, #0]
   b8cec:	6803      	ldr	r3, [r0, #0]
   b8cee:	4639      	mov	r1, r7
   b8cf0:	689b      	ldr	r3, [r3, #8]
   b8cf2:	4798      	blx	r3
    i2c_.write(MSB);
   b8cf4:	6820      	ldr	r0, [r4, #0]
   b8cf6:	6803      	ldr	r3, [r0, #0]
   b8cf8:	4631      	mov	r1, r6
   b8cfa:	689b      	ldr	r3, [r3, #8]
   b8cfc:	4798      	blx	r3
    i2c_.write(LSB);
   b8cfe:	6820      	ldr	r0, [r4, #0]
   b8d00:	6803      	ldr	r3, [r0, #0]
   b8d02:	4629      	mov	r1, r5
   b8d04:	689b      	ldr	r3, [r3, #8]
   b8d06:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b8d08:	4641      	mov	r1, r8
   b8d0a:	6820      	ldr	r0, [r4, #0]
   b8d0c:	f000 f8a2 	bl	b8e54 <_ZN7TwoWire15endTransmissionEh>
   b8d10:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b8d12:	4620      	mov	r0, r4
   b8d14:	bf0c      	ite	eq
   b8d16:	2500      	moveq	r5, #0
   b8d18:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b8d1c:	f7ff ffcd 	bl	b8cba <_ZN9FuelGauge6unlockEv>
}
   b8d20:	4628      	mov	r0, r5
   b8d22:	b004      	add	sp, #16
   b8d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8d28 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b8d28:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b8d2a:	2240      	movs	r2, #64	; 0x40
   b8d2c:	2300      	movs	r3, #0
   b8d2e:	2106      	movs	r1, #6
   b8d30:	f7ff ffc6 	bl	b8cc0 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b8d34:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8d38:	bd08      	pop	{r3, pc}

000b8d3a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8d3a:	4770      	bx	lr

000b8d3c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d3e:	4606      	mov	r6, r0
   b8d40:	4615      	mov	r5, r2
   b8d42:	460c      	mov	r4, r1
   b8d44:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8d46:	42bc      	cmp	r4, r7
   b8d48:	d006      	beq.n	b8d58 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8d4a:	6833      	ldr	r3, [r6, #0]
   b8d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8d50:	689b      	ldr	r3, [r3, #8]
   b8d52:	4630      	mov	r0, r6
   b8d54:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8d56:	e7f6      	b.n	b8d46 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8d58:	4628      	mov	r0, r5
   b8d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8d5c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8d5c:	7c00      	ldrb	r0, [r0, #16]
   b8d5e:	2200      	movs	r2, #0
   b8d60:	f7ff bb22 	b.w	b83a8 <hal_i2c_write>

000b8d64 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8d64:	7c00      	ldrb	r0, [r0, #16]
   b8d66:	2100      	movs	r1, #0
   b8d68:	f7ff bb26 	b.w	b83b8 <hal_i2c_available>

000b8d6c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8d6c:	7c00      	ldrb	r0, [r0, #16]
   b8d6e:	2100      	movs	r1, #0
   b8d70:	f7ff bb2a 	b.w	b83c8 <hal_i2c_read>

000b8d74 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8d74:	7c00      	ldrb	r0, [r0, #16]
   b8d76:	2100      	movs	r1, #0
   b8d78:	f7ff bb2e 	b.w	b83d8 <hal_i2c_peek>

000b8d7c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8d7c:	7c00      	ldrb	r0, [r0, #16]
   b8d7e:	2100      	movs	r1, #0
   b8d80:	f7ff bb32 	b.w	b83e8 <hal_i2c_flush>

000b8d84 <_ZN7TwoWireD0Ev>:
   b8d84:	b510      	push	{r4, lr}
   b8d86:	2114      	movs	r1, #20
   b8d88:	4604      	mov	r4, r0
   b8d8a:	f7fb f988 	bl	b409e <_ZdlPvj>
   b8d8e:	4620      	mov	r0, r4
   b8d90:	bd10      	pop	{r4, pc}
	...

000b8d94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8d94:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d9a:	4604      	mov	r4, r0
   b8d9c:	4608      	mov	r0, r1
   b8d9e:	2100      	movs	r1, #0
   b8da0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8da4:	4b03      	ldr	r3, [pc, #12]	; (b8db4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8da6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8da8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8daa:	4611      	mov	r1, r2
   b8dac:	f7ff fb2c 	bl	b8408 <hal_i2c_init>
}
   b8db0:	4620      	mov	r0, r4
   b8db2:	bd10      	pop	{r4, pc}
   b8db4:	000bd2ec 	.word	0x000bd2ec

000b8db8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8db8:	2300      	movs	r3, #0
   b8dba:	7c00      	ldrb	r0, [r0, #16]
   b8dbc:	461a      	mov	r2, r3
   b8dbe:	4619      	mov	r1, r3
   b8dc0:	f7ff bada 	b.w	b8378 <hal_i2c_begin>

000b8dc4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8dc6:	2200      	movs	r2, #0
   b8dc8:	2314      	movs	r3, #20
   b8dca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8dce:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8dd2:	780b      	ldrb	r3, [r1, #0]
   b8dd4:	f88d 3008 	strb.w	r3, [sp, #8]
   b8dd8:	684b      	ldr	r3, [r1, #4]
   b8dda:	9303      	str	r3, [sp, #12]
   b8ddc:	68cb      	ldr	r3, [r1, #12]
   b8dde:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8de0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8de2:	7a0b      	ldrb	r3, [r1, #8]
   b8de4:	9305      	str	r3, [sp, #20]
   b8de6:	a901      	add	r1, sp, #4
   b8de8:	f7ff fb26 	bl	b8438 <hal_i2c_request_ex>
}
   b8dec:	b007      	add	sp, #28
   b8dee:	f85d fb04 	ldr.w	pc, [sp], #4

000b8df2 <_ZN7TwoWire11requestFromEhjh>:
{
   b8df2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8df4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8df6:	f88d 1000 	strb.w	r1, [sp]
   b8dfa:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8dfe:	9103      	str	r1, [sp, #12]
   b8e00:	bf18      	it	ne
   b8e02:	2301      	movne	r3, #1
   b8e04:	4669      	mov	r1, sp
    size_ = size;
   b8e06:	9201      	str	r2, [sp, #4]
   b8e08:	f88d 3008 	strb.w	r3, [sp, #8]
   b8e0c:	f7ff ffda 	bl	b8dc4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8e10:	b005      	add	sp, #20
   b8e12:	f85d fb04 	ldr.w	pc, [sp], #4

000b8e16 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8e16:	7c00      	ldrb	r0, [r0, #16]
   b8e18:	2200      	movs	r2, #0
   b8e1a:	f7ff bab5 	b.w	b8388 <hal_i2c_begin_transmission>

000b8e1e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8e1e:	b2c9      	uxtb	r1, r1
   b8e20:	f7ff bff9 	b.w	b8e16 <_ZN7TwoWire17beginTransmissionEh>

000b8e24 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b8e24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8e26:	2300      	movs	r3, #0
   b8e28:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b8e2c:	684a      	ldr	r2, [r1, #4]
   b8e2e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b8e30:	2314      	movs	r3, #20
    };
   b8e32:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b8e34:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b8e38:	780b      	ldrb	r3, [r1, #0]
    };
   b8e3a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8e3c:	7a0a      	ldrb	r2, [r1, #8]
   b8e3e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b8e40:	7c00      	ldrb	r0, [r0, #16]
    };
   b8e42:	f88d 3008 	strb.w	r3, [sp, #8]
   b8e46:	aa01      	add	r2, sp, #4
   b8e48:	4619      	mov	r1, r3
   b8e4a:	f7ff fa9d 	bl	b8388 <hal_i2c_begin_transmission>
}
   b8e4e:	b007      	add	sp, #28
   b8e50:	f85d fb04 	ldr.w	pc, [sp], #4

000b8e54 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8e54:	7c00      	ldrb	r0, [r0, #16]
   b8e56:	2200      	movs	r2, #0
   b8e58:	f7ff ba9e 	b.w	b8398 <hal_i2c_end_transmission>

000b8e5c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b8e5c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b8e5e:	2100      	movs	r1, #0
   b8e60:	7c00      	ldrb	r0, [r0, #16]
   b8e62:	f7ff fad9 	bl	b8418 <hal_i2c_lock>
}
   b8e66:	fab0 f080 	clz	r0, r0
   b8e6a:	0940      	lsrs	r0, r0, #5
   b8e6c:	bd08      	pop	{r3, pc}

000b8e6e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b8e6e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b8e70:	2100      	movs	r1, #0
   b8e72:	7c00      	ldrb	r0, [r0, #16]
   b8e74:	f7ff fad8 	bl	b8428 <hal_i2c_unlock>
}
   b8e78:	fab0 f080 	clz	r0, r0
   b8e7c:	0940      	lsrs	r0, r0, #5
   b8e7e:	bd08      	pop	{r3, pc}

000b8e80 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8e80:	4700      	bx	r0
	...

000b8e84 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8e84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b8e88:	2400      	movs	r4, #0
{
   b8e8a:	461d      	mov	r5, r3
   b8e8c:	460f      	mov	r7, r1
   b8e8e:	4690      	mov	r8, r2
   b8e90:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b8e92:	f7ff fa61 	bl	b8358 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b8e96:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8e98:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b8e9c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8ea0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b8ea4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8ea8:	bfa2      	ittt	ge
   b8eaa:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b8eae:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b8eb2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8eb4:	4907      	ldr	r1, [pc, #28]	; (b8ed4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8eb6:	9400      	str	r4, [sp, #0]
   b8eb8:	4643      	mov	r3, r8
   b8eba:	463a      	mov	r2, r7
   b8ebc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8ebe:	bfa8      	it	ge
   b8ec0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8ec4:	f7ff fa40 	bl	b8348 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b8ec8:	fab0 f080 	clz	r0, r0
   b8ecc:	0940      	lsrs	r0, r0, #5
   b8ece:	b004      	add	sp, #16
   b8ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8ed4:	000b8e81 	.word	0x000b8e81

000b8ed8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8ed8:	4770      	bx	lr

000b8eda <_ZN9IPAddressD0Ev>:
   b8eda:	b510      	push	{r4, lr}
   b8edc:	2118      	movs	r1, #24
   b8ede:	4604      	mov	r4, r0
   b8ee0:	f7fb f8dd 	bl	b409e <_ZdlPvj>
   b8ee4:	4620      	mov	r0, r4
   b8ee6:	bd10      	pop	{r4, pc}

000b8ee8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8eea:	7d03      	ldrb	r3, [r0, #20]
   b8eec:	2b06      	cmp	r3, #6
{
   b8eee:	b08d      	sub	sp, #52	; 0x34
   b8ef0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8ef2:	f100 0704 	add.w	r7, r0, #4
   b8ef6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8efa:	d012      	beq.n	b8f22 <_ZNK9IPAddress7printToER5Print+0x3a>
   b8efc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8f00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8f04:	220a      	movs	r2, #10
   b8f06:	4630      	mov	r0, r6
   b8f08:	f001 fb49 	bl	ba59e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8f0c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8f0e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8f10:	d019      	beq.n	b8f46 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8f12:	2c00      	cmp	r4, #0
   b8f14:	d0f4      	beq.n	b8f00 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8f16:	212e      	movs	r1, #46	; 0x2e
   b8f18:	4630      	mov	r0, r6
   b8f1a:	f001 fb31 	bl	ba580 <_ZN5Print5printEc>
   b8f1e:	4404      	add	r4, r0
   b8f20:	e7ee      	b.n	b8f00 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8f22:	232f      	movs	r3, #47	; 0x2f
   b8f24:	466a      	mov	r2, sp
   b8f26:	4639      	mov	r1, r7
   b8f28:	200a      	movs	r0, #10
		buf[0] = 0;
   b8f2a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8f2e:	f7ff fa8b 	bl	b8448 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8f32:	4668      	mov	r0, sp
   b8f34:	f003 f925 	bl	bc182 <strlen>
   b8f38:	6833      	ldr	r3, [r6, #0]
   b8f3a:	4602      	mov	r2, r0
   b8f3c:	68db      	ldr	r3, [r3, #12]
   b8f3e:	4669      	mov	r1, sp
   b8f40:	4630      	mov	r0, r6
   b8f42:	4798      	blx	r3
   b8f44:	4604      	mov	r4, r0
    }
    return n;
}
   b8f46:	4620      	mov	r0, r4
   b8f48:	b00d      	add	sp, #52	; 0x34
   b8f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8f4c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8f4c:	b510      	push	{r4, lr}
   b8f4e:	4b05      	ldr	r3, [pc, #20]	; (b8f64 <_ZN9IPAddressC1Ev+0x18>)
   b8f50:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8f52:	2211      	movs	r2, #17
   b8f54:	f840 3b04 	str.w	r3, [r0], #4
   b8f58:	2100      	movs	r1, #0
   b8f5a:	f003 f875 	bl	bc048 <memset>
}
   b8f5e:	4620      	mov	r0, r4
   b8f60:	bd10      	pop	{r4, pc}
   b8f62:	bf00      	nop
   b8f64:	000bd314 	.word	0x000bd314

000b8f68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8f68:	4603      	mov	r3, r0
   b8f6a:	4a07      	ldr	r2, [pc, #28]	; (b8f88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8f6c:	b510      	push	{r4, lr}
   b8f6e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8f72:	f101 0210 	add.w	r2, r1, #16
   b8f76:	f851 4b04 	ldr.w	r4, [r1], #4
   b8f7a:	f843 4b04 	str.w	r4, [r3], #4
   b8f7e:	4291      	cmp	r1, r2
   b8f80:	d1f9      	bne.n	b8f76 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8f82:	780a      	ldrb	r2, [r1, #0]
   b8f84:	701a      	strb	r2, [r3, #0]
}
   b8f86:	bd10      	pop	{r4, pc}
   b8f88:	000bd314 	.word	0x000bd314

000b8f8c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8f8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8f8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8f92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8f96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8f9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8f9e:	2304      	movs	r3, #4
   b8fa0:	6041      	str	r1, [r0, #4]
   b8fa2:	7503      	strb	r3, [r0, #20]
}
   b8fa4:	bd10      	pop	{r4, pc}
	...

000b8fa8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8fa8:	b507      	push	{r0, r1, r2, lr}
   b8faa:	4b06      	ldr	r3, [pc, #24]	; (b8fc4 <_ZN9IPAddressC1EPKh+0x1c>)
   b8fac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8fae:	78cb      	ldrb	r3, [r1, #3]
   b8fb0:	9300      	str	r3, [sp, #0]
   b8fb2:	788b      	ldrb	r3, [r1, #2]
   b8fb4:	784a      	ldrb	r2, [r1, #1]
   b8fb6:	7809      	ldrb	r1, [r1, #0]
   b8fb8:	f7ff ffe8 	bl	b8f8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8fbc:	b003      	add	sp, #12
   b8fbe:	f85d fb04 	ldr.w	pc, [sp], #4
   b8fc2:	bf00      	nop
   b8fc4:	000bd314 	.word	0x000bd314

000b8fc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b8fc8:	f100 0310 	add.w	r3, r0, #16
   b8fcc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b8fce:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b8fd2:	2901      	cmp	r1, #1
   b8fd4:	4618      	mov	r0, r3
   b8fd6:	d108      	bne.n	b8fea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b8fd8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b8fdc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b8fe0:	3a01      	subs	r2, #1
   b8fe2:	f103 0310 	add.w	r3, r3, #16
   b8fe6:	d1f2      	bne.n	b8fce <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b8fe8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b8fea:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b8fec:	bf04      	itt	eq
   b8fee:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b8ff2:	1852      	addeq	r2, r2, r1
   b8ff4:	e7f4      	b.n	b8fe0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b8ff6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b8ff6:	b40e      	push	{r1, r2, r3}
   b8ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8ffa:	b088      	sub	sp, #32
   b8ffc:	af00      	add	r7, sp, #0
   b8ffe:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9002:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9004:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9008:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b900a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b900c:	462b      	mov	r3, r5
   b900e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b9010:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9012:	f7ff fc65 	bl	b88e0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b9016:	280f      	cmp	r0, #15
   b9018:	687a      	ldr	r2, [r7, #4]
   b901a:	d91a      	bls.n	b9052 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b901c:	f100 0308 	add.w	r3, r0, #8
   b9020:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9024:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b9026:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b902a:	1c41      	adds	r1, r0, #1
   b902c:	462b      	mov	r3, r5
   b902e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9030:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9032:	f7ff fc55 	bl	b88e0 <vsnprintf>
        if (n > 0) {
   b9036:	1e02      	subs	r2, r0, #0
   b9038:	dd04      	ble.n	b9044 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b903a:	6823      	ldr	r3, [r4, #0]
   b903c:	4669      	mov	r1, sp
   b903e:	689b      	ldr	r3, [r3, #8]
   b9040:	4620      	mov	r0, r4
   b9042:	4798      	blx	r3
   b9044:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b9046:	3720      	adds	r7, #32
   b9048:	46bd      	mov	sp, r7
   b904a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b904e:	b003      	add	sp, #12
   b9050:	4770      	bx	lr
    } else if (n > 0) {
   b9052:	2800      	cmp	r0, #0
   b9054:	d0f7      	beq.n	b9046 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b9056:	6823      	ldr	r3, [r4, #0]
   b9058:	4602      	mov	r2, r0
   b905a:	689b      	ldr	r3, [r3, #8]
   b905c:	f107 0110 	add.w	r1, r7, #16
   b9060:	4620      	mov	r0, r4
   b9062:	4798      	blx	r3
}
   b9064:	e7ef      	b.n	b9046 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b9066 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9066:	b538      	push	{r3, r4, r5, lr}
   b9068:	680b      	ldr	r3, [r1, #0]
   b906a:	6003      	str	r3, [r0, #0]
   b906c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b906e:	6843      	ldr	r3, [r0, #4]
   b9070:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9072:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b9074:	d008      	beq.n	b9088 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b9076:	b115      	cbz	r5, b907e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b9078:	686b      	ldr	r3, [r5, #4]
   b907a:	3301      	adds	r3, #1
   b907c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b907e:	6860      	ldr	r0, [r4, #4]
   b9080:	b108      	cbz	r0, b9086 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b9082:	f7ff fc78 	bl	b8976 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9086:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9088:	bd38      	pop	{r3, r4, r5, pc}

000b908a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b908a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b908c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b908e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9092:	689b      	ldr	r3, [r3, #8]
   b9094:	2201      	movs	r2, #1
   b9096:	f10d 0107 	add.w	r1, sp, #7
   b909a:	4798      	blx	r3
}
   b909c:	b003      	add	sp, #12
   b909e:	f85d fb04 	ldr.w	pc, [sp], #4

000b90a2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b90a2:	460b      	mov	r3, r1
   b90a4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b90a6:	2200      	movs	r2, #0
   b90a8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b90aa:	e9c0 2200 	strd	r2, r2, [r0]
   b90ae:	4604      	mov	r4, r0
        t_ = t;
   b90b0:	6083      	str	r3, [r0, #8]
    if (t) {
   b90b2:	b90b      	cbnz	r3, b90b8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b90b4:	4620      	mov	r0, r4
   b90b6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b90b8:	f7ff ffd5 	bl	b9066 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b90bc:	e7fa      	b.n	b90b4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b90be <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b90be:	6883      	ldr	r3, [r0, #8]
   b90c0:	b1eb      	cbz	r3, b90fe <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b90c2:	781a      	ldrb	r2, [r3, #0]
   b90c4:	2a03      	cmp	r2, #3
   b90c6:	d81a      	bhi.n	b90fe <_ZNK5spark9JSONValue4typeEv+0x40>
   b90c8:	e8df f002 	tbb	[pc, r2]
   b90cc:	1b021704 	.word	0x1b021704
   b90d0:	2005      	movs	r0, #5
   b90d2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b90d4:	6802      	ldr	r2, [r0, #0]
   b90d6:	685b      	ldr	r3, [r3, #4]
   b90d8:	6852      	ldr	r2, [r2, #4]
   b90da:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b90dc:	282d      	cmp	r0, #45	; 0x2d
   b90de:	d012      	beq.n	b9106 <_ZNK5spark9JSONValue4typeEv+0x48>
   b90e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b90e4:	2b09      	cmp	r3, #9
   b90e6:	d90e      	bls.n	b9106 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b90e8:	2874      	cmp	r0, #116	; 0x74
   b90ea:	d00e      	beq.n	b910a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b90ec:	2866      	cmp	r0, #102	; 0x66
   b90ee:	d00c      	beq.n	b910a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b90f0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b90f4:	4258      	negs	r0, r3
   b90f6:	4158      	adcs	r0, r3
   b90f8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b90fa:	2006      	movs	r0, #6
   b90fc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b90fe:	2000      	movs	r0, #0
   b9100:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b9102:	2004      	movs	r0, #4
   b9104:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b9106:	2003      	movs	r0, #3
   b9108:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b910a:	2002      	movs	r0, #2
}
   b910c:	4770      	bx	lr

000b910e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b910e:	b510      	push	{r4, lr}
   b9110:	4604      	mov	r4, r0
    switch (type()) {
   b9112:	f7ff ffd4 	bl	b90be <_ZNK5spark9JSONValue4typeEv>
   b9116:	2802      	cmp	r0, #2
   b9118:	d00e      	beq.n	b9138 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b911a:	1ec3      	subs	r3, r0, #3
   b911c:	b2db      	uxtb	r3, r3
   b911e:	2b01      	cmp	r3, #1
   b9120:	d814      	bhi.n	b914c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b9122:	6822      	ldr	r2, [r4, #0]
   b9124:	68a3      	ldr	r3, [r4, #8]
   b9126:	6850      	ldr	r0, [r2, #4]
   b9128:	685b      	ldr	r3, [r3, #4]
}
   b912a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b912e:	220a      	movs	r2, #10
   b9130:	2100      	movs	r1, #0
   b9132:	4418      	add	r0, r3
   b9134:	f003 b8ea 	b.w	bc30c <strtol>
        const char* const s = d_->json + t_->start;
   b9138:	6822      	ldr	r2, [r4, #0]
   b913a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b913c:	6852      	ldr	r2, [r2, #4]
   b913e:	685b      	ldr	r3, [r3, #4]
   b9140:	5cd0      	ldrb	r0, [r2, r3]
   b9142:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b9146:	4258      	negs	r0, r3
   b9148:	4158      	adcs	r0, r3
}
   b914a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b914c:	2000      	movs	r0, #0
   b914e:	e7fc      	b.n	b914a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b9150 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9150:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9152:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9154:	e9c0 3300 	strd	r3, r3, [r0]
   b9158:	4604      	mov	r4, r0
        n_(0) {
   b915a:	480e      	ldr	r0, [pc, #56]	; (b9194 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b915c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9160:	b1a9      	cbz	r1, b918e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b9162:	780b      	ldrb	r3, [r1, #0]
   b9164:	2b03      	cmp	r3, #3
   b9166:	d006      	beq.n	b9176 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9168:	b98b      	cbnz	r3, b918e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b916a:	6813      	ldr	r3, [r2, #0]
   b916c:	6858      	ldr	r0, [r3, #4]
   b916e:	684b      	ldr	r3, [r1, #4]
   b9170:	5cc3      	ldrb	r3, [r0, r3]
   b9172:	2b6e      	cmp	r3, #110	; 0x6e
   b9174:	d007      	beq.n	b9186 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b9176:	6813      	ldr	r3, [r2, #0]
   b9178:	684d      	ldr	r5, [r1, #4]
   b917a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b917c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b917e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b9180:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b9182:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b9184:	60e3      	str	r3, [r4, #12]
   b9186:	4611      	mov	r1, r2
   b9188:	4620      	mov	r0, r4
   b918a:	f7ff ff6c 	bl	b9066 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b918e:	4620      	mov	r0, r4
   b9190:	bd38      	pop	{r3, r4, r5, pc}
   b9192:	bf00      	nop
   b9194:	000bd37d 	.word	0x000bd37d

000b9198 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9198:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b919a:	2500      	movs	r5, #0
   b919c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b919e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b91a2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b91a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b91aa:	4604      	mov	r4, r0
   b91ac:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b91ae:	b14b      	cbz	r3, b91c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b91b0:	781a      	ldrb	r2, [r3, #0]
   b91b2:	2a01      	cmp	r2, #1
   b91b4:	d106      	bne.n	b91c4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b91b6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b91ba:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b91bc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b91be:	6143      	str	r3, [r0, #20]
   b91c0:	f7ff ff51 	bl	b9066 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b91c4:	4620      	mov	r0, r4
   b91c6:	bd38      	pop	{r3, r4, r5, pc}

000b91c8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b91c8:	b510      	push	{r4, lr}
    if (!n_) {
   b91ca:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b91cc:	4604      	mov	r4, r0
    if (!n_) {
   b91ce:	b163      	cbz	r3, b91ea <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b91d0:	6880      	ldr	r0, [r0, #8]
   b91d2:	60e0      	str	r0, [r4, #12]
    --n_;
   b91d4:	3b01      	subs	r3, #1
    ++t_;
   b91d6:	3010      	adds	r0, #16
   b91d8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b91da:	6120      	str	r0, [r4, #16]
    --n_;
   b91dc:	6163      	str	r3, [r4, #20]
    if (n_) {
   b91de:	b113      	cbz	r3, b91e6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b91e0:	f7ff fef2 	bl	b8fc8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b91e4:	60a0      	str	r0, [r4, #8]
    return true;
   b91e6:	2001      	movs	r0, #1
   b91e8:	e000      	b.n	b91ec <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b91ea:	4618      	mov	r0, r3
}
   b91ec:	bd10      	pop	{r4, pc}

000b91ee <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b91ee:	b510      	push	{r4, lr}
    write('}');
   b91f0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b91f2:	4604      	mov	r4, r0
    write('}');
   b91f4:	f7ff ff49 	bl	b908a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b91f8:	2301      	movs	r3, #1
   b91fa:	7123      	strb	r3, [r4, #4]
}
   b91fc:	4620      	mov	r0, r4
   b91fe:	bd10      	pop	{r4, pc}

000b9200 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9200:	b508      	push	{r3, lr}
    switch (state_) {
   b9202:	7903      	ldrb	r3, [r0, #4]
   b9204:	2b01      	cmp	r3, #1
   b9206:	d002      	beq.n	b920e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b9208:	2b02      	cmp	r3, #2
   b920a:	d004      	beq.n	b9216 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b920c:	bd08      	pop	{r3, pc}
        write(',');
   b920e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9210:	f7ff ff3b 	bl	b908a <_ZN5spark10JSONWriter5writeEc>
}
   b9214:	e7fa      	b.n	b920c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b9216:	213a      	movs	r1, #58	; 0x3a
   b9218:	e7fa      	b.n	b9210 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b921a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b921a:	b510      	push	{r4, lr}
   b921c:	4604      	mov	r4, r0
    writeSeparator();
   b921e:	f7ff ffef 	bl	b9200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9222:	4620      	mov	r0, r4
   b9224:	217b      	movs	r1, #123	; 0x7b
   b9226:	f7ff ff30 	bl	b908a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b922a:	2300      	movs	r3, #0
   b922c:	7123      	strb	r3, [r4, #4]
}
   b922e:	4620      	mov	r0, r4
   b9230:	bd10      	pop	{r4, pc}
	...

000b9234 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9234:	b513      	push	{r0, r1, r4, lr}
   b9236:	4604      	mov	r4, r0
   b9238:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b923a:	f7ff ffe1 	bl	b9200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b923e:	6823      	ldr	r3, [r4, #0]
   b9240:	9a01      	ldr	r2, [sp, #4]
   b9242:	68db      	ldr	r3, [r3, #12]
   b9244:	4903      	ldr	r1, [pc, #12]	; (b9254 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b9246:	4620      	mov	r0, r4
   b9248:	4798      	blx	r3
    state_ = NEXT;
   b924a:	2301      	movs	r3, #1
}
   b924c:	4620      	mov	r0, r4
    state_ = NEXT;
   b924e:	7123      	strb	r3, [r4, #4]
}
   b9250:	b002      	add	sp, #8
   b9252:	bd10      	pop	{r4, pc}
   b9254:	000bcd37 	.word	0x000bcd37

000b9258 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9258:	b513      	push	{r0, r1, r4, lr}
   b925a:	4604      	mov	r4, r0
   b925c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b925e:	f7ff ffcf 	bl	b9200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b9262:	6823      	ldr	r3, [r4, #0]
   b9264:	9a01      	ldr	r2, [sp, #4]
   b9266:	68db      	ldr	r3, [r3, #12]
   b9268:	4903      	ldr	r1, [pc, #12]	; (b9278 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b926a:	4620      	mov	r0, r4
   b926c:	4798      	blx	r3
    state_ = NEXT;
   b926e:	2301      	movs	r3, #1
}
   b9270:	4620      	mov	r0, r4
    state_ = NEXT;
   b9272:	7123      	strb	r3, [r4, #4]
}
   b9274:	b002      	add	sp, #8
   b9276:	bd10      	pop	{r4, pc}
   b9278:	000bccc2 	.word	0x000bccc2

000b927c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b927c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9280:	460d      	mov	r5, r1
    write('"');
   b9282:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9284:	4690      	mov	r8, r2
   b9286:	4604      	mov	r4, r0
    write('"');
   b9288:	f7ff feff 	bl	b908a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b928c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9334 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b9290:	44a8      	add	r8, r5
    const char *s = str;
   b9292:	462f      	mov	r7, r5
    while (s != end) {
   b9294:	4547      	cmp	r7, r8
   b9296:	46ba      	mov	sl, r7
   b9298:	d03d      	beq.n	b9316 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b929a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b929e:	2e22      	cmp	r6, #34	; 0x22
   b92a0:	d006      	beq.n	b92b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b92a2:	2e5c      	cmp	r6, #92	; 0x5c
   b92a4:	d004      	beq.n	b92b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b92a6:	4630      	mov	r0, r6
   b92a8:	f002 fe9e 	bl	bbfe8 <isprint>
   b92ac:	2800      	cmp	r0, #0
   b92ae:	d1f1      	bne.n	b9294 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b92b0:	6823      	ldr	r3, [r4, #0]
   b92b2:	ebaa 0205 	sub.w	r2, sl, r5
   b92b6:	689b      	ldr	r3, [r3, #8]
   b92b8:	4629      	mov	r1, r5
   b92ba:	4620      	mov	r0, r4
   b92bc:	4798      	blx	r3
            write('\\');
   b92be:	215c      	movs	r1, #92	; 0x5c
   b92c0:	4620      	mov	r0, r4
   b92c2:	f7ff fee2 	bl	b908a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b92c6:	2e0d      	cmp	r6, #13
   b92c8:	d80a      	bhi.n	b92e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b92ca:	2e07      	cmp	r6, #7
   b92cc:	d91c      	bls.n	b9308 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b92ce:	f1a6 0308 	sub.w	r3, r6, #8
   b92d2:	2b05      	cmp	r3, #5
   b92d4:	d818      	bhi.n	b9308 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b92d6:	e8df f003 	tbb	[pc, r3]
   b92da:	0f0d      	.short	0x0f0d
   b92dc:	15131711 	.word	0x15131711
   b92e0:	2e22      	cmp	r6, #34	; 0x22
   b92e2:	d001      	beq.n	b92e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b92e4:	2e5c      	cmp	r6, #92	; 0x5c
   b92e6:	d10f      	bne.n	b9308 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b92e8:	4631      	mov	r1, r6
                write('b');
   b92ea:	4620      	mov	r0, r4
   b92ec:	f7ff fecd 	bl	b908a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b92f0:	463d      	mov	r5, r7
    while (s != end) {
   b92f2:	e7cf      	b.n	b9294 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b92f4:	2162      	movs	r1, #98	; 0x62
   b92f6:	e7f8      	b.n	b92ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b92f8:	2174      	movs	r1, #116	; 0x74
   b92fa:	e7f6      	b.n	b92ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b92fc:	216e      	movs	r1, #110	; 0x6e
   b92fe:	e7f4      	b.n	b92ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9300:	2166      	movs	r1, #102	; 0x66
   b9302:	e7f2      	b.n	b92ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b9304:	2172      	movs	r1, #114	; 0x72
   b9306:	e7f0      	b.n	b92ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b9308:	6823      	ldr	r3, [r4, #0]
   b930a:	4632      	mov	r2, r6
   b930c:	68db      	ldr	r3, [r3, #12]
   b930e:	4649      	mov	r1, r9
   b9310:	4620      	mov	r0, r4
   b9312:	4798      	blx	r3
                break;
   b9314:	e7ec      	b.n	b92f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b9316:	42bd      	cmp	r5, r7
   b9318:	d005      	beq.n	b9326 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b931a:	6823      	ldr	r3, [r4, #0]
   b931c:	1b7a      	subs	r2, r7, r5
   b931e:	689b      	ldr	r3, [r3, #8]
   b9320:	4629      	mov	r1, r5
   b9322:	4620      	mov	r0, r4
   b9324:	4798      	blx	r3
    }
    write('"');
   b9326:	2122      	movs	r1, #34	; 0x22
   b9328:	4620      	mov	r0, r4
   b932a:	f7ff feae 	bl	b908a <_ZN5spark10JSONWriter5writeEc>
}
   b932e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9332:	bf00      	nop
   b9334:	000bd320 	.word	0x000bd320

000b9338 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b9338:	b513      	push	{r0, r1, r4, lr}
   b933a:	4604      	mov	r4, r0
   b933c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9340:	f7ff ff5e 	bl	b9200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b9344:	4620      	mov	r0, r4
   b9346:	e9dd 2100 	ldrd	r2, r1, [sp]
   b934a:	f7ff ff97 	bl	b927c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b934e:	2302      	movs	r3, #2
}
   b9350:	4620      	mov	r0, r4
    state_ = VALUE;
   b9352:	7123      	strb	r3, [r4, #4]
}
   b9354:	b002      	add	sp, #8
   b9356:	bd10      	pop	{r4, pc}

000b9358 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b9358:	b513      	push	{r0, r1, r4, lr}
   b935a:	4604      	mov	r4, r0
   b935c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9360:	f7ff ff4e 	bl	b9200 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b9364:	4620      	mov	r0, r4
   b9366:	e9dd 2100 	ldrd	r2, r1, [sp]
   b936a:	f7ff ff87 	bl	b927c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b936e:	2301      	movs	r3, #1
}
   b9370:	4620      	mov	r0, r4
    state_ = NEXT;
   b9372:	7123      	strb	r3, [r4, #4]
}
   b9374:	b002      	add	sp, #8
   b9376:	bd10      	pop	{r4, pc}

000b9378 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9378:	6880      	ldr	r0, [r0, #8]
   b937a:	6803      	ldr	r3, [r0, #0]
   b937c:	68db      	ldr	r3, [r3, #12]
   b937e:	4718      	bx	r3

000b9380 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9380:	4770      	bx	lr

000b9382 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b9382:	4608      	mov	r0, r1
   b9384:	b111      	cbz	r1, b938c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b9386:	680b      	ldr	r3, [r1, #0]
   b9388:	685b      	ldr	r3, [r3, #4]
   b938a:	4718      	bx	r3
}
   b938c:	4770      	bx	lr

000b938e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b938e:	4770      	bx	lr

000b9390 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9390:	4770      	bx	lr

000b9392 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b9392:	4770      	bx	lr

000b9394 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b9394:	4770      	bx	lr

000b9396 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b9396:	b538      	push	{r3, r4, r5, lr}
   b9398:	4604      	mov	r4, r0
   b939a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b939c:	6800      	ldr	r0, [r0, #0]
   b939e:	212e      	movs	r1, #46	; 0x2e
   b93a0:	f002 fed3 	bl	bc14a <strchrnul>
    size = s - category;
   b93a4:	6823      	ldr	r3, [r4, #0]
   b93a6:	1ac3      	subs	r3, r0, r3
   b93a8:	602b      	str	r3, [r5, #0]
    if (size) {
   b93aa:	b123      	cbz	r3, b93b6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b93ac:	7803      	ldrb	r3, [r0, #0]
   b93ae:	b103      	cbz	r3, b93b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b93b0:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b93b2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b93b4:	6020      	str	r0, [r4, #0]
}
   b93b6:	4618      	mov	r0, r3
   b93b8:	bd38      	pop	{r3, r4, r5, pc}

000b93ba <_ZN5spark16JSONStreamWriterD0Ev>:
   b93ba:	b510      	push	{r4, lr}
   b93bc:	210c      	movs	r1, #12
   b93be:	4604      	mov	r4, r0
   b93c0:	f7fa fe6d 	bl	b409e <_ZdlPvj>
   b93c4:	4620      	mov	r0, r4
   b93c6:	bd10      	pop	{r4, pc}

000b93c8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b93c8:	b510      	push	{r4, lr}
   b93ca:	2104      	movs	r1, #4
   b93cc:	4604      	mov	r4, r0
   b93ce:	f7fa fe66 	bl	b409e <_ZdlPvj>
   b93d2:	4620      	mov	r0, r4
   b93d4:	bd10      	pop	{r4, pc}

000b93d6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b93d6:	b510      	push	{r4, lr}
   b93d8:	2104      	movs	r1, #4
   b93da:	4604      	mov	r4, r0
   b93dc:	f7fa fe5f 	bl	b409e <_ZdlPvj>
   b93e0:	4620      	mov	r0, r4
   b93e2:	bd10      	pop	{r4, pc}

000b93e4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b93e4:	f7fe bf28 	b.w	b8238 <os_mutex_recursive_lock>

000b93e8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b93e8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b93ea:	f002 feb8 	bl	bc15e <strcmp>
}
   b93ee:	fab0 f080 	clz	r0, r0
   b93f2:	0940      	lsrs	r0, r0, #5
   b93f4:	bd08      	pop	{r3, pc}

000b93f6 <__tcf_1>:
   b93f6:	4770      	bx	lr

000b93f8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b93f8:	b510      	push	{r4, lr}
   b93fa:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b93fc:	f001 fecc 	bl	bb198 <_Z16_fetch_usbserialv>
   b9400:	4284      	cmp	r4, r0
   b9402:	d010      	beq.n	b9426 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9404:	f002 f8c6 	bl	bb594 <_Z22__fetch_global_Serial1v>
   b9408:	4284      	cmp	r4, r0
   b940a:	d105      	bne.n	b9418 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b940c:	f002 f8c2 	bl	bb594 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9414:	f001 be59 	b.w	bb0ca <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9418:	b12c      	cbz	r4, b9426 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b941a:	6823      	ldr	r3, [r4, #0]
   b941c:	4620      	mov	r0, r4
   b941e:	685b      	ldr	r3, [r3, #4]
}
   b9420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9424:	4718      	bx	r3
   b9426:	bd10      	pop	{r4, pc}

000b9428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9428:	680b      	ldr	r3, [r1, #0]
   b942a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b942c:	684b      	ldr	r3, [r1, #4]
   b942e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9430:	b113      	cbz	r3, b9438 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9432:	685a      	ldr	r2, [r3, #4]
   b9434:	3201      	adds	r2, #1
   b9436:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9438:	4770      	bx	lr

000b943a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b943a:	b513      	push	{r0, r1, r4, lr}
   b943c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b943e:	4608      	mov	r0, r1
   b9440:	9101      	str	r1, [sp, #4]
   b9442:	f002 fe9e 	bl	bc182 <strlen>
   b9446:	9901      	ldr	r1, [sp, #4]
   b9448:	4602      	mov	r2, r0
   b944a:	4620      	mov	r0, r4
}
   b944c:	b002      	add	sp, #8
   b944e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9452:	f7ff bf81 	b.w	b9358 <_ZN5spark10JSONWriter5valueEPKcj>

000b9456 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9456:	b513      	push	{r0, r1, r4, lr}
   b9458:	4604      	mov	r4, r0
    write(str, strlen(str));
   b945a:	4608      	mov	r0, r1
   b945c:	9101      	str	r1, [sp, #4]
   b945e:	f002 fe90 	bl	bc182 <strlen>
   b9462:	6823      	ldr	r3, [r4, #0]
   b9464:	9901      	ldr	r1, [sp, #4]
   b9466:	68db      	ldr	r3, [r3, #12]
   b9468:	4602      	mov	r2, r0
   b946a:	4620      	mov	r0, r4
}
   b946c:	b002      	add	sp, #8
   b946e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b9472:	4718      	bx	r3

000b9474 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9474:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9476:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9478:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b947c:	68db      	ldr	r3, [r3, #12]
   b947e:	2201      	movs	r2, #1
   b9480:	f10d 0107 	add.w	r1, sp, #7
   b9484:	4798      	blx	r3
}
   b9486:	b003      	add	sp, #12
   b9488:	f85d fb04 	ldr.w	pc, [sp], #4

000b948c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b948c:	b40e      	push	{r1, r2, r3}
   b948e:	b503      	push	{r0, r1, lr}
   b9490:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b9492:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9494:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9498:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b949a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b949c:	f001 f975 	bl	ba78a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b94a0:	b002      	add	sp, #8
   b94a2:	f85d eb04 	ldr.w	lr, [sp], #4
   b94a6:	b003      	add	sp, #12
   b94a8:	4770      	bx	lr

000b94aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b94aa:	680a      	ldr	r2, [r1, #0]
   b94ac:	6002      	str	r2, [r0, #0]
   b94ae:	684a      	ldr	r2, [r1, #4]
   b94b0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b94b2:	2200      	movs	r2, #0
   b94b4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b94b8:	b510      	push	{r4, lr}
   b94ba:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b94bc:	688c      	ldr	r4, [r1, #8]
   b94be:	6084      	str	r4, [r0, #8]
   b94c0:	68cc      	ldr	r4, [r1, #12]
   b94c2:	60c4      	str	r4, [r0, #12]
   b94c4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b94c6:	608a      	str	r2, [r1, #8]
   b94c8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b94ca:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b94cc:	610a      	str	r2, [r1, #16]
   b94ce:	bd10      	pop	{r4, pc}

000b94d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b94d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b94d4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b94d8:	f04f 0a14 	mov.w	sl, #20
   b94dc:	9300      	str	r3, [sp, #0]
   b94de:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b94e2:	4b18      	ldr	r3, [pc, #96]	; (b9544 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b94e4:	10a4      	asrs	r4, r4, #2
   b94e6:	4617      	mov	r7, r2
   b94e8:	435c      	muls	r4, r3
   b94ea:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b94ec:	2c00      	cmp	r4, #0
   b94ee:	dd21      	ble.n	b9534 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b94f0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b94f2:	fb0a f006 	mul.w	r0, sl, r6
   b94f6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b94fa:	463a      	mov	r2, r7
   b94fc:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9500:	5828      	ldr	r0, [r5, r0]
   b9502:	9101      	str	r1, [sp, #4]
   b9504:	455f      	cmp	r7, fp
   b9506:	bf28      	it	cs
   b9508:	465a      	movcs	r2, fp
   b950a:	f002 fe42 	bl	bc192 <strncmp>
                if (cmp == 0) {
   b950e:	2800      	cmp	r0, #0
   b9510:	9901      	ldr	r1, [sp, #4]
   b9512:	f04f 0301 	mov.w	r3, #1
   b9516:	d10b      	bne.n	b9530 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9518:	455f      	cmp	r7, fp
   b951a:	d103      	bne.n	b9524 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b951c:	9a00      	ldr	r2, [sp, #0]
   b951e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9520:	4634      	mov	r4, r6
   b9522:	e7e3      	b.n	b94ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9524:	d9fc      	bls.n	b9520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9526:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9528:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b952c:	3e01      	subs	r6, #1
   b952e:	e7f7      	b.n	b9520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9530:	dbf9      	blt.n	b9526 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9532:	e7f5      	b.n	b9520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9534:	eba5 0508 	sub.w	r5, r5, r8
}
   b9538:	4802      	ldr	r0, [pc, #8]	; (b9544 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b953a:	10ad      	asrs	r5, r5, #2
   b953c:	4368      	muls	r0, r5
   b953e:	b003      	add	sp, #12
   b9540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9544:	cccccccd 	.word	0xcccccccd

000b9548 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b954a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b954c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b954e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9550:	b303      	cbz	r3, b9594 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b9552:	b1f9      	cbz	r1, b9594 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b9554:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b9556:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b955a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b955c:	a903      	add	r1, sp, #12
   b955e:	a801      	add	r0, sp, #4
   b9560:	f7ff ff19 	bl	b9396 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9564:	4601      	mov	r1, r0
   b9566:	b1a8      	cbz	r0, b9594 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9568:	f10d 030b 	add.w	r3, sp, #11
   b956c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b956e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9572:	4620      	mov	r0, r4
   b9574:	f7ff ffac 	bl	b94d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9578:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b957c:	b153      	cbz	r3, b9594 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b957e:	6823      	ldr	r3, [r4, #0]
   b9580:	2414      	movs	r4, #20
   b9582:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9586:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9588:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b958c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b958e:	bfa8      	it	ge
   b9590:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b9592:	e7e3      	b.n	b955c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9594:	4628      	mov	r0, r5
   b9596:	b004      	add	sp, #16
   b9598:	bd70      	pop	{r4, r5, r6, pc}
	...

000b959c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b959c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b959e:	4c09      	ldr	r4, [pc, #36]	; (b95c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b95a0:	7823      	ldrb	r3, [r4, #0]
   b95a2:	f3bf 8f5b 	dmb	ish
   b95a6:	07db      	lsls	r3, r3, #31
   b95a8:	d409      	bmi.n	b95be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b95aa:	4620      	mov	r0, r4
   b95ac:	f7fa fd86 	bl	b40bc <__cxa_guard_acquire>
   b95b0:	b128      	cbz	r0, b95be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b95b2:	4620      	mov	r0, r4
   b95b4:	f7fa fd87 	bl	b40c6 <__cxa_guard_release>
   b95b8:	4803      	ldr	r0, [pc, #12]	; (b95c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b95ba:	f002 fcf1 	bl	bbfa0 <atexit>
}
   b95be:	4803      	ldr	r0, [pc, #12]	; (b95cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b95c0:	bd10      	pop	{r4, pc}
   b95c2:	bf00      	nop
   b95c4:	2003e650 	.word	0x2003e650
   b95c8:	000b938f 	.word	0x000b938f
   b95cc:	2003dec4 	.word	0x2003dec4

000b95d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b95d0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b95d2:	4c09      	ldr	r4, [pc, #36]	; (b95f8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b95d4:	7823      	ldrb	r3, [r4, #0]
   b95d6:	f3bf 8f5b 	dmb	ish
   b95da:	07db      	lsls	r3, r3, #31
   b95dc:	d409      	bmi.n	b95f2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b95de:	4620      	mov	r0, r4
   b95e0:	f7fa fd6c 	bl	b40bc <__cxa_guard_acquire>
   b95e4:	b128      	cbz	r0, b95f2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b95e6:	4620      	mov	r0, r4
   b95e8:	f7fa fd6d 	bl	b40c6 <__cxa_guard_release>
   b95ec:	4803      	ldr	r0, [pc, #12]	; (b95fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b95ee:	f002 fcd7 	bl	bbfa0 <atexit>
    return &factory;
}
   b95f2:	4803      	ldr	r0, [pc, #12]	; (b9600 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b95f4:	bd10      	pop	{r4, pc}
   b95f6:	bf00      	nop
   b95f8:	2003e654 	.word	0x2003e654
   b95fc:	000b93f7 	.word	0x000b93f7
   b9600:	2003dec8 	.word	0x2003dec8

000b9604 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9604:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9606:	2500      	movs	r5, #0
   b9608:	4604      	mov	r4, r0
   b960a:	e9c0 5500 	strd	r5, r5, [r0]
   b960e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9612:	6085      	str	r5, [r0, #8]
   b9614:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9616:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b961a:	f7fe fdfd 	bl	b8218 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b961e:	f7ff ffbd 	bl	b959c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9622:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9624:	f7ff ffd4 	bl	b95d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9628:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b962a:	6220      	str	r0, [r4, #32]
}
   b962c:	4620      	mov	r0, r4
   b962e:	bd38      	pop	{r3, r4, r5, pc}

000b9630 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9630:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9632:	4c0a      	ldr	r4, [pc, #40]	; (b965c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9634:	7823      	ldrb	r3, [r4, #0]
   b9636:	f3bf 8f5b 	dmb	ish
   b963a:	07db      	lsls	r3, r3, #31
   b963c:	d40c      	bmi.n	b9658 <_ZN5spark10LogManager8instanceEv+0x28>
   b963e:	4620      	mov	r0, r4
   b9640:	f7fa fd3c 	bl	b40bc <__cxa_guard_acquire>
   b9644:	b140      	cbz	r0, b9658 <_ZN5spark10LogManager8instanceEv+0x28>
   b9646:	4806      	ldr	r0, [pc, #24]	; (b9660 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9648:	f7ff ffdc 	bl	b9604 <_ZN5spark10LogManagerC1Ev>
   b964c:	4620      	mov	r0, r4
   b964e:	f7fa fd3a 	bl	b40c6 <__cxa_guard_release>
   b9652:	4804      	ldr	r0, [pc, #16]	; (b9664 <_ZN5spark10LogManager8instanceEv+0x34>)
   b9654:	f002 fca4 	bl	bbfa0 <atexit>
    return &mgr;
}
   b9658:	4801      	ldr	r0, [pc, #4]	; (b9660 <_ZN5spark10LogManager8instanceEv+0x30>)
   b965a:	bd10      	pop	{r4, pc}
   b965c:	2003e64c 	.word	0x2003e64c
   b9660:	2003e65c 	.word	0x2003e65c
   b9664:	000b9b85 	.word	0x000b9b85

000b9668 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9668:	4a02      	ldr	r2, [pc, #8]	; (b9674 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b966a:	4903      	ldr	r1, [pc, #12]	; (b9678 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b966c:	4803      	ldr	r0, [pc, #12]	; (b967c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b966e:	2300      	movs	r3, #0
   b9670:	f7ff b802 	b.w	b8678 <log_set_callbacks>
   b9674:	000b9969 	.word	0x000b9969
   b9678:	000b98f5 	.word	0x000b98f5
   b967c:	000b9875 	.word	0x000b9875

000b9680 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9680:	2300      	movs	r3, #0
   b9682:	461a      	mov	r2, r3
   b9684:	4619      	mov	r1, r3
   b9686:	4618      	mov	r0, r3
   b9688:	f7fe bff6 	b.w	b8678 <log_set_callbacks>

000b968c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b968c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b968e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9690:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9692:	4668      	mov	r0, sp
   b9694:	f7ff fec8 	bl	b9428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9698:	466a      	mov	r2, sp
   b969a:	4629      	mov	r1, r5
   b969c:	4620      	mov	r0, r4
   b969e:	f7ff fd7b 	bl	b9198 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b96a2:	a801      	add	r0, sp, #4
   b96a4:	f7fc f91a 	bl	b58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b96a8:	4620      	mov	r0, r4
   b96aa:	b003      	add	sp, #12
   b96ac:	bd30      	pop	{r4, r5, pc}

000b96ae <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b96ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b96b0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b96b2:	4604      	mov	r4, r0
   b96b4:	4668      	mov	r0, sp
   b96b6:	f7ff feb7 	bl	b9428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b96ba:	466a      	mov	r2, sp
   b96bc:	4629      	mov	r1, r5
   b96be:	4620      	mov	r0, r4
   b96c0:	f7ff fd46 	bl	b9150 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b96c4:	a801      	add	r0, sp, #4
   b96c6:	f7fc f909 	bl	b58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b96ca:	4620      	mov	r0, r4
   b96cc:	b003      	add	sp, #12
   b96ce:	bd30      	pop	{r4, r5, pc}

000b96d0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b96d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b96d2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b96d4:	4604      	mov	r4, r0
   b96d6:	4668      	mov	r0, sp
   b96d8:	f7ff fea6 	bl	b9428 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b96dc:	466a      	mov	r2, sp
   b96de:	4629      	mov	r1, r5
   b96e0:	4620      	mov	r0, r4
   b96e2:	f7ff fcde 	bl	b90a2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b96e6:	a801      	add	r0, sp, #4
   b96e8:	f7fc f8f8 	bl	b58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b96ec:	4620      	mov	r0, r4
   b96ee:	b003      	add	sp, #12
   b96f0:	bd30      	pop	{r4, r5, pc}
	...

000b96f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b96f4:	b570      	push	{r4, r5, r6, lr}
   b96f6:	b08a      	sub	sp, #40	; 0x28
   b96f8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b96fa:	4601      	mov	r1, r0
   b96fc:	a804      	add	r0, sp, #16
   b96fe:	f7ff ffc5 	bl	b968c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9702:	4e14      	ldr	r6, [pc, #80]	; (b9754 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9704:	a804      	add	r0, sp, #16
   b9706:	f7ff fd5f 	bl	b91c8 <_ZN5spark18JSONObjectIterator4nextEv>
   b970a:	b1e8      	cbz	r0, b9748 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b970c:	a904      	add	r1, sp, #16
   b970e:	4668      	mov	r0, sp
   b9710:	f7ff ffcd 	bl	b96ae <_ZNK5spark18JSONObjectIterator4nameEv>
   b9714:	9802      	ldr	r0, [sp, #8]
   b9716:	4631      	mov	r1, r6
   b9718:	f7ff fe66 	bl	b93e8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b971c:	4604      	mov	r4, r0
   b971e:	b110      	cbz	r0, b9726 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9720:	1e2c      	subs	r4, r5, #0
   b9722:	bf18      	it	ne
   b9724:	2401      	movne	r4, #1
   b9726:	a801      	add	r0, sp, #4
   b9728:	f7fc f8d8 	bl	b58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b972c:	2c00      	cmp	r4, #0
   b972e:	d0e9      	beq.n	b9704 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9730:	a904      	add	r1, sp, #16
   b9732:	4668      	mov	r0, sp
   b9734:	f7ff ffcc 	bl	b96d0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9738:	4668      	mov	r0, sp
   b973a:	f7ff fce8 	bl	b910e <_ZNK5spark9JSONValue5toIntEv>
   b973e:	6028      	str	r0, [r5, #0]
   b9740:	a801      	add	r0, sp, #4
   b9742:	f7fc f8cb 	bl	b58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9746:	e7dd      	b.n	b9704 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9748:	a805      	add	r0, sp, #20
   b974a:	f7fc f8c7 	bl	b58dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b974e:	b00a      	add	sp, #40	; 0x28
   b9750:	bd70      	pop	{r4, r5, r6, pc}
   b9752:	bf00      	nop
   b9754:	000bd326 	.word	0x000bd326

000b9758 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9758:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b975a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b975c:	4620      	mov	r0, r4
   b975e:	4913      	ldr	r1, [pc, #76]	; (b97ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9760:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9762:	f002 fcfc 	bl	bc15e <strcmp>
   b9766:	b950      	cbnz	r0, b977e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9768:	f001 fd16 	bl	bb198 <_Z16_fetch_usbserialv>
   b976c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9770:	f001 fd00 	bl	bb174 <_ZN9USBSerial5beginEl>
}
   b9774:	b003      	add	sp, #12
   b9776:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b977a:	f001 bd0d 	b.w	bb198 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b977e:	490c      	ldr	r1, [pc, #48]	; (b97b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9780:	4620      	mov	r0, r4
   b9782:	f002 fcec 	bl	bc15e <strcmp>
   b9786:	b978      	cbnz	r0, b97a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9788:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b978c:	a901      	add	r1, sp, #4
   b978e:	4628      	mov	r0, r5
        int baud = 9600;
   b9790:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9792:	f7ff ffaf 	bl	b96f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9796:	f001 fefd 	bl	bb594 <_Z22__fetch_global_Serial1v>
   b979a:	9901      	ldr	r1, [sp, #4]
   b979c:	f001 fc92 	bl	bb0c4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b97a0:	f001 fef8 	bl	bb594 <_Z22__fetch_global_Serial1v>
}
   b97a4:	b003      	add	sp, #12
   b97a6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b97a8:	2000      	movs	r0, #0
   b97aa:	e7fb      	b.n	b97a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b97ac:	000bd32b 	.word	0x000bd32b
   b97b0:	000bd332 	.word	0x000bd332

000b97b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b97b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b97b6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b97ba:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b97bc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b97be:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b97c2:	42ae      	cmp	r6, r5
   b97c4:	d005      	beq.n	b97d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b97c6:	f105 0008 	add.w	r0, r5, #8
   b97ca:	f7ff fff3 	bl	b97b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b97ce:	3514      	adds	r5, #20
   b97d0:	e7f7      	b.n	b97c2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b97d2:	6820      	ldr	r0, [r4, #0]
   b97d4:	f7ff f864 	bl	b88a0 <free>
}
   b97d8:	4620      	mov	r0, r4
   b97da:	bd70      	pop	{r4, r5, r6, pc}

000b97dc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b97dc:	b510      	push	{r4, lr}
   b97de:	4604      	mov	r4, r0
   b97e0:	300c      	adds	r0, #12
   b97e2:	f7ff ffe7 	bl	b97b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b97e6:	4620      	mov	r0, r4
   b97e8:	f7ff f8d9 	bl	b899e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b97ec:	4620      	mov	r0, r4
   b97ee:	bd10      	pop	{r4, pc}

000b97f0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b97f0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b97f2:	4b04      	ldr	r3, [pc, #16]	; (b9804 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b97f4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b97f6:	f840 3b04 	str.w	r3, [r0], #4
   b97fa:	f7ff ffef 	bl	b97dc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b97fe:	4620      	mov	r0, r4
   b9800:	bd10      	pop	{r4, pc}
   b9802:	bf00      	nop
   b9804:	000bcb50 	.word	0x000bcb50

000b9808 <_ZN5spark16StreamLogHandlerD0Ev>:
   b9808:	b510      	push	{r4, lr}
   b980a:	4604      	mov	r4, r0
   b980c:	f7ff fff0 	bl	b97f0 <_ZN5spark16StreamLogHandlerD1Ev>
   b9810:	4620      	mov	r0, r4
   b9812:	2124      	movs	r1, #36	; 0x24
   b9814:	f7fa fc43 	bl	b409e <_ZdlPvj>
   b9818:	4620      	mov	r0, r4
   b981a:	bd10      	pop	{r4, pc}

000b981c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b981c:	b510      	push	{r4, lr}
   b981e:	4b03      	ldr	r3, [pc, #12]	; (b982c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b9820:	6003      	str	r3, [r0, #0]
   b9822:	4604      	mov	r4, r0
   b9824:	f7ff ffe4 	bl	b97f0 <_ZN5spark16StreamLogHandlerD1Ev>
   b9828:	4620      	mov	r0, r4
   b982a:	bd10      	pop	{r4, pc}
   b982c:	000bd3cc 	.word	0x000bd3cc

000b9830 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9830:	b510      	push	{r4, lr}
   b9832:	4604      	mov	r4, r0
   b9834:	f7ff fff2 	bl	b981c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9838:	4620      	mov	r0, r4
   b983a:	2124      	movs	r1, #36	; 0x24
   b983c:	f7fa fc2f 	bl	b409e <_ZdlPvj>
   b9840:	4620      	mov	r0, r4
   b9842:	bd10      	pop	{r4, pc}

000b9844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b9844:	2200      	movs	r2, #0
   b9846:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b984a:	b510      	push	{r4, lr}
        capacity_(0) {
   b984c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b984e:	680c      	ldr	r4, [r1, #0]
   b9850:	6004      	str	r4, [r0, #0]
   b9852:	684c      	ldr	r4, [r1, #4]
   b9854:	6044      	str	r4, [r0, #4]
   b9856:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9858:	600a      	str	r2, [r1, #0]
   b985a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b985c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b985e:	608a      	str	r2, [r1, #8]
}
   b9860:	bd10      	pop	{r4, pc}

000b9862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b9862:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9864:	6803      	ldr	r3, [r0, #0]
   b9866:	4604      	mov	r4, r0
   b9868:	6818      	ldr	r0, [r3, #0]
   b986a:	f7fe fced 	bl	b8248 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b986e:	4620      	mov	r0, r4
   b9870:	bd10      	pop	{r4, pc}
	...

000b9874 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9878:	b087      	sub	sp, #28
   b987a:	4680      	mov	r8, r0
   b987c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b987e:	4b1c      	ldr	r3, [pc, #112]	; (b98f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9880:	685b      	ldr	r3, [r3, #4]
   b9882:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9886:	4689      	mov	r9, r1
   b9888:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b988a:	b96b      	cbnz	r3, b98a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b988c:	f7ff fed0 	bl	b9630 <_ZN5spark10LogManager8instanceEv>
   b9890:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9892:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9896:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9898:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b989a:	f7ff fda3 	bl	b93e4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b989e:	7b23      	ldrb	r3, [r4, #12]
   b98a0:	b12b      	cbz	r3, b98ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b98a2:	a805      	add	r0, sp, #20
   b98a4:	f7ff ffdd 	bl	b9862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b98a8:	b007      	add	sp, #28
   b98aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b98ae:	2301      	movs	r3, #1
   b98b0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b98b2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b98b6:	fa5f f989 	uxtb.w	r9, r9
   b98ba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b98be:	45aa      	cmp	sl, r5
   b98c0:	d012      	beq.n	b98e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b98c2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b98c6:	4631      	mov	r1, r6
   b98c8:	1d38      	adds	r0, r7, #4
   b98ca:	f7ff fe3d 	bl	b9548 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b98ce:	4581      	cmp	r9, r0
   b98d0:	d3f5      	bcc.n	b98be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b98d2:	683b      	ldr	r3, [r7, #0]
   b98d4:	9a03      	ldr	r2, [sp, #12]
   b98d6:	9200      	str	r2, [sp, #0]
   b98d8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b98dc:	464a      	mov	r2, r9
   b98de:	4633      	mov	r3, r6
   b98e0:	4641      	mov	r1, r8
   b98e2:	4638      	mov	r0, r7
   b98e4:	47d8      	blx	fp
   b98e6:	e7ea      	b.n	b98be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b98e8:	2300      	movs	r3, #0
   b98ea:	7323      	strb	r3, [r4, #12]
   b98ec:	e7d9      	b.n	b98a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b98ee:	bf00      	nop
   b98f0:	e000ed00 	.word	0xe000ed00

000b98f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b98f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98f8:	469b      	mov	fp, r3
   b98fa:	4b1a      	ldr	r3, [pc, #104]	; (b9964 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b98fc:	685b      	ldr	r3, [r3, #4]
   b98fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9902:	4680      	mov	r8, r0
   b9904:	4689      	mov	r9, r1
   b9906:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9908:	b96b      	cbnz	r3, b9926 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b990a:	f7ff fe91 	bl	b9630 <_ZN5spark10LogManager8instanceEv>
   b990e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9910:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b9914:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9916:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9918:	f7ff fd64 	bl	b93e4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b991c:	7b23      	ldrb	r3, [r4, #12]
   b991e:	b12b      	cbz	r3, b992c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9920:	a801      	add	r0, sp, #4
   b9922:	f7ff ff9e 	bl	b9862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9926:	b003      	add	sp, #12
   b9928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b992c:	2301      	movs	r3, #1
   b992e:	7323      	strb	r3, [r4, #12]
   b9930:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b9934:	b2f6      	uxtb	r6, r6
   b9936:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b993a:	4555      	cmp	r5, sl
   b993c:	d00e      	beq.n	b995c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b993e:	f855 7b04 	ldr.w	r7, [r5], #4
   b9942:	4659      	mov	r1, fp
   b9944:	1d38      	adds	r0, r7, #4
   b9946:	f7ff fdff 	bl	b9548 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b994a:	4286      	cmp	r6, r0
   b994c:	d3f5      	bcc.n	b993a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b994e:	683b      	ldr	r3, [r7, #0]
   b9950:	464a      	mov	r2, r9
   b9952:	68db      	ldr	r3, [r3, #12]
   b9954:	4641      	mov	r1, r8
   b9956:	4638      	mov	r0, r7
   b9958:	4798      	blx	r3
   b995a:	e7ee      	b.n	b993a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b995c:	2300      	movs	r3, #0
   b995e:	7323      	strb	r3, [r4, #12]
   b9960:	e7de      	b.n	b9920 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b9962:	bf00      	nop
   b9964:	e000ed00 	.word	0xe000ed00

000b9968 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9968:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b996c:	4b16      	ldr	r3, [pc, #88]	; (b99c8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b996e:	685b      	ldr	r3, [r3, #4]
   b9970:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9974:	4605      	mov	r5, r0
   b9976:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9978:	bb1b      	cbnz	r3, b99c2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b997a:	f7ff fe59 	bl	b9630 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b997e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b9982:	4604      	mov	r4, r0
   b9984:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9986:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9988:	f7ff fd2c 	bl	b93e4 <_ZN14RecursiveMutex4lockEv.isra.0>
   b998c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9990:	2446      	movs	r4, #70	; 0x46
   b9992:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9996:	45b0      	cmp	r8, r6
   b9998:	d109      	bne.n	b99ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b999a:	a801      	add	r0, sp, #4
   b999c:	f7ff ff61 	bl	b9862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b99a0:	42a5      	cmp	r5, r4
   b99a2:	bfb4      	ite	lt
   b99a4:	2000      	movlt	r0, #0
   b99a6:	2001      	movge	r0, #1
}
   b99a8:	b002      	add	sp, #8
   b99aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b99ae:	f856 0b04 	ldr.w	r0, [r6], #4
   b99b2:	4639      	mov	r1, r7
   b99b4:	3004      	adds	r0, #4
   b99b6:	f7ff fdc7 	bl	b9548 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b99ba:	4284      	cmp	r4, r0
   b99bc:	bfa8      	it	ge
   b99be:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b99c0:	e7e9      	b.n	b9996 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b99c2:	2000      	movs	r0, #0
   b99c4:	e7f0      	b.n	b99a8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b99c6:	bf00      	nop
   b99c8:	e000ed00 	.word	0xe000ed00

000b99cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b99cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b99ce:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b99d2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b99d4:	4604      	mov	r4, r0
   b99d6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b99d8:	db0d      	blt.n	b99f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b99da:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b99dc:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b99de:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b99e0:	dd04      	ble.n	b99ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b99e2:	00b9      	lsls	r1, r7, #2
   b99e4:	f7fe ff64 	bl	b88b0 <realloc>
            if (!d) {
   b99e8:	b918      	cbnz	r0, b99f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b99ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b99ec:	f7fe ff58 	bl	b88a0 <free>
        T* d = nullptr;
   b99f0:	2000      	movs	r0, #0
        data_ = d;
   b99f2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b99f4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b99f6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b99f8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b99fa:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b99fe:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9a00:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b9a04:	1d08      	adds	r0, r1, #4
   b9a06:	f002 fb05 	bl	bc014 <memmove>
    new(p) T(std::move(value));
   b9a0a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b9a0e:	6863      	ldr	r3, [r4, #4]
   b9a10:	3301      	adds	r3, #1
   b9a12:	6063      	str	r3, [r4, #4]
    return true;
   b9a14:	2001      	movs	r0, #1
   b9a16:	e7e8      	b.n	b99ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b9a18 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b9a1a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9a1e:	4604      	mov	r4, r0
   b9a20:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9a22:	9301      	str	r3, [sp, #4]
   b9a24:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b9a26:	f7ff fcdd 	bl	b93e4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b9a2a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b9a2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b9a32:	4293      	cmp	r3, r2
   b9a34:	4619      	mov	r1, r3
   b9a36:	d00b      	beq.n	b9a50 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b9a38:	6809      	ldr	r1, [r1, #0]
   b9a3a:	42a9      	cmp	r1, r5
   b9a3c:	f103 0304 	add.w	r3, r3, #4
   b9a40:	d1f7      	bne.n	b9a32 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b9a42:	a801      	add	r0, sp, #4
   b9a44:	f7ff ff0d 	bl	b9862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9a48:	2500      	movs	r5, #0
}
   b9a4a:	4628      	mov	r0, r5
   b9a4c:	b003      	add	sp, #12
   b9a4e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b9a50:	4629      	mov	r1, r5
   b9a52:	4620      	mov	r0, r4
   b9a54:	f7ff ffba 	bl	b99cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b9a58:	4605      	mov	r5, r0
   b9a5a:	2800      	cmp	r0, #0
   b9a5c:	d0f1      	beq.n	b9a42 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b9a5e:	6863      	ldr	r3, [r4, #4]
   b9a60:	2b01      	cmp	r3, #1
   b9a62:	d101      	bne.n	b9a68 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b9a64:	f7ff fe00 	bl	b9668 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9a68:	a801      	add	r0, sp, #4
   b9a6a:	f7ff fefa 	bl	b9862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9a6e:	e7ec      	b.n	b9a4a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9a70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9a70:	b570      	push	{r4, r5, r6, lr}
   b9a72:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9a74:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9a78:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b9a7a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9a7e:	4282      	cmp	r2, r0
   b9a80:	d00f      	beq.n	b9aa2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9a82:	4601      	mov	r1, r0
            if (*p == value) {
   b9a84:	681d      	ldr	r5, [r3, #0]
   b9a86:	f851 6b04 	ldr.w	r6, [r1], #4
   b9a8a:	42ae      	cmp	r6, r5
   b9a8c:	d107      	bne.n	b9a9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9a8e:	1a52      	subs	r2, r2, r1
   b9a90:	f002 fac0 	bl	bc014 <memmove>
    --size_;
   b9a94:	6863      	ldr	r3, [r4, #4]
   b9a96:	3b01      	subs	r3, #1
   b9a98:	6063      	str	r3, [r4, #4]
    return true;
   b9a9a:	2001      	movs	r0, #1
}
   b9a9c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9a9e:	4608      	mov	r0, r1
   b9aa0:	e7ed      	b.n	b9a7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9aa2:	2000      	movs	r0, #0
   b9aa4:	e7fa      	b.n	b9a9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b9aa6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9aa6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b9aa8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9aac:	4604      	mov	r4, r0
   b9aae:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9ab0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ab2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9ab4:	f7ff fc96 	bl	b93e4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b9ab8:	a901      	add	r1, sp, #4
   b9aba:	4620      	mov	r0, r4
   b9abc:	f7ff ffd8 	bl	b9a70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9ac0:	b118      	cbz	r0, b9aca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9ac2:	6863      	ldr	r3, [r4, #4]
   b9ac4:	b90b      	cbnz	r3, b9aca <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b9ac6:	f7ff fddb 	bl	b9680 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9aca:	a803      	add	r0, sp, #12
   b9acc:	f7ff fec9 	bl	b9862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9ad0:	b004      	add	sp, #16
   b9ad2:	bd10      	pop	{r4, pc}

000b9ad4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9ad4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b9ad6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b9ada:	2318      	movs	r3, #24
   b9adc:	4604      	mov	r4, r0
   b9ade:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9ae2:	42ae      	cmp	r6, r5
   b9ae4:	d015      	beq.n	b9b12 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b9ae6:	f105 0110 	add.w	r1, r5, #16
   b9aea:	4620      	mov	r0, r4
   b9aec:	f7ff ffc0 	bl	b9a70 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9af0:	6863      	ldr	r3, [r4, #4]
   b9af2:	b90b      	cbnz	r3, b9af8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9af4:	f7ff fdc4 	bl	b9680 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b9af8:	69e0      	ldr	r0, [r4, #28]
   b9afa:	6929      	ldr	r1, [r5, #16]
   b9afc:	6803      	ldr	r3, [r0, #0]
   b9afe:	68db      	ldr	r3, [r3, #12]
   b9b00:	4798      	blx	r3
        if (h.stream) {
   b9b02:	6969      	ldr	r1, [r5, #20]
   b9b04:	b119      	cbz	r1, b9b0e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b9b06:	6a20      	ldr	r0, [r4, #32]
   b9b08:	6803      	ldr	r3, [r0, #0]
   b9b0a:	68db      	ldr	r3, [r3, #12]
   b9b0c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9b0e:	3518      	adds	r5, #24
   b9b10:	e7e7      	b.n	b9ae2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b9b12:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9b16:	2618      	movs	r6, #24
   b9b18:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9b1c:	42ae      	cmp	r6, r5
   b9b1e:	d004      	beq.n	b9b2a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9b20:	4628      	mov	r0, r5
   b9b22:	f000 ff45 	bl	ba9b0 <_ZN6StringD1Ev>
   b9b26:	3518      	adds	r5, #24
   b9b28:	e7f8      	b.n	b9b1c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b9b2a:	2300      	movs	r3, #0
   b9b2c:	6163      	str	r3, [r4, #20]
}
   b9b2e:	bd70      	pop	{r4, r5, r6, pc}

000b9b30 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b9b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9b32:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b9b34:	f7ff fda4 	bl	b9680 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9b38:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b9b3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9b3e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9b40:	f7ff fc50 	bl	b93e4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b9b44:	4620      	mov	r0, r4
   b9b46:	f7ff ffc5 	bl	b9ad4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b9b4a:	a801      	add	r0, sp, #4
   b9b4c:	f7ff fe89 	bl	b9862 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b9b50:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9b52:	b108      	cbz	r0, b9b58 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b9b54:	f7fe fb68 	bl	b8228 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b9b58:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9b5c:	2618      	movs	r6, #24
   b9b5e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9b62:	42ae      	cmp	r6, r5
   b9b64:	d004      	beq.n	b9b70 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b9b66:	4628      	mov	r0, r5
   b9b68:	f000 ff22 	bl	ba9b0 <_ZN6StringD1Ev>
   b9b6c:	3518      	adds	r5, #24
   b9b6e:	e7f8      	b.n	b9b62 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b9b70:	6920      	ldr	r0, [r4, #16]
   b9b72:	f7fe fe95 	bl	b88a0 <free>
   b9b76:	6820      	ldr	r0, [r4, #0]
   b9b78:	f7fe fe92 	bl	b88a0 <free>
}
   b9b7c:	4620      	mov	r0, r4
   b9b7e:	b002      	add	sp, #8
   b9b80:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9b84 <__tcf_2>:
    static LogManager mgr;
   b9b84:	4801      	ldr	r0, [pc, #4]	; (b9b8c <__tcf_2+0x8>)
   b9b86:	f7ff bfd3 	b.w	b9b30 <_ZN5spark10LogManagerD1Ev>
   b9b8a:	bf00      	nop
   b9b8c:	2003e65c 	.word	0x2003e65c

000b9b90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9b90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9b94:	4604      	mov	r4, r0
   b9b96:	460d      	mov	r5, r1
   b9b98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9b9a:	d915      	bls.n	b9bc8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9b9c:	4290      	cmp	r0, r2
   b9b9e:	d214      	bcs.n	b9bca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9ba0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9ba4:	1a75      	subs	r5, r6, r1
   b9ba6:	f1a1 0714 	sub.w	r7, r1, #20
   b9baa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9bac:	42b7      	cmp	r7, r6
   b9bae:	d01a      	beq.n	b9be6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9bb0:	b11c      	cbz	r4, b9bba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9bb2:	4631      	mov	r1, r6
   b9bb4:	4620      	mov	r0, r4
   b9bb6:	f7ff fc78 	bl	b94aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b9bba:	f106 0008 	add.w	r0, r6, #8
   b9bbe:	f7ff fdf9 	bl	b97b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9bc2:	3e14      	subs	r6, #20
   b9bc4:	3c14      	subs	r4, #20
   b9bc6:	e7f1      	b.n	b9bac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b9bc8:	d00d      	beq.n	b9be6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b9bca:	42b5      	cmp	r5, r6
   b9bcc:	d00b      	beq.n	b9be6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9bce:	b11c      	cbz	r4, b9bd8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9bd0:	4629      	mov	r1, r5
   b9bd2:	4620      	mov	r0, r4
   b9bd4:	f7ff fc69 	bl	b94aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b9bd8:	f105 0008 	add.w	r0, r5, #8
   b9bdc:	f7ff fdea 	bl	b97b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9be0:	3514      	adds	r5, #20
   b9be2:	3414      	adds	r4, #20
   b9be4:	e7f1      	b.n	b9bca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b9be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9be8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b9be8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9bec:	4604      	mov	r4, r0
   b9bee:	460d      	mov	r5, r1
   b9bf0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9bf2:	d914      	bls.n	b9c1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9bf4:	4290      	cmp	r0, r2
   b9bf6:	d213      	bcs.n	b9c20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b9bf8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9bfc:	1a75      	subs	r5, r6, r1
   b9bfe:	f1a1 0710 	sub.w	r7, r1, #16
   b9c02:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9c04:	42b7      	cmp	r7, r6
   b9c06:	d018      	beq.n	b9c3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b9c08:	b11c      	cbz	r4, b9c12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b9c0a:	4631      	mov	r1, r6
   b9c0c:	4620      	mov	r0, r4
   b9c0e:	f000 ff4b 	bl	baaa8 <_ZN6StringC1EOS_>
                end->~T();
   b9c12:	4630      	mov	r0, r6
   b9c14:	f000 fecc 	bl	ba9b0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9c18:	3e10      	subs	r6, #16
   b9c1a:	3c10      	subs	r4, #16
   b9c1c:	e7f2      	b.n	b9c04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9c1e:	d00c      	beq.n	b9c3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9c20:	42b5      	cmp	r5, r6
   b9c22:	d00a      	beq.n	b9c3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9c24:	b11c      	cbz	r4, b9c2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b9c26:	4629      	mov	r1, r5
   b9c28:	4620      	mov	r0, r4
   b9c2a:	f000 ff3d 	bl	baaa8 <_ZN6StringC1EOS_>
                p->~T();
   b9c2e:	4628      	mov	r0, r5
   b9c30:	f000 febe 	bl	ba9b0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9c34:	3510      	adds	r5, #16
   b9c36:	3410      	adds	r4, #16
   b9c38:	e7f2      	b.n	b9c20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b9c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b9c3c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9c3e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9c40:	4605      	mov	r5, r0
        if (n > 0) {
   b9c42:	dd11      	ble.n	b9c68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9c44:	0130      	lsls	r0, r6, #4
   b9c46:	f7fe fe23 	bl	b8890 <malloc>
            if (!d) {
   b9c4a:	4604      	mov	r4, r0
   b9c4c:	b158      	cbz	r0, b9c66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9c4e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9c52:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b9c56:	f7ff ffc7 	bl	b9be8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b9c5a:	6828      	ldr	r0, [r5, #0]
   b9c5c:	f7fe fe20 	bl	b88a0 <free>
        data_ = d;
   b9c60:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9c62:	60ae      	str	r6, [r5, #8]
        return true;
   b9c64:	2001      	movs	r0, #1
    }
   b9c66:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9c68:	2400      	movs	r4, #0
   b9c6a:	e7f6      	b.n	b9c5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b9c6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c70:	4690      	mov	r8, r2
   b9c72:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b9c74:	2300      	movs	r3, #0
   b9c76:	9103      	str	r1, [sp, #12]
    return size_;
   b9c78:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b9c7c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9c7e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b9c80:	4299      	cmp	r1, r3
        capacity_(0) {
   b9c82:	e9c0 3300 	strd	r3, r3, [r0]
   b9c86:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9c8e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9c92:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9c94:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b9c96:	dc23      	bgt.n	b9ce0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b9c98:	e9d8 5700 	ldrd	r5, r7, [r8]
   b9c9c:	2314      	movs	r3, #20
   b9c9e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b9ca2:	42af      	cmp	r7, r5
   b9ca4:	d03b      	beq.n	b9d1e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b9ca6:	4629      	mov	r1, r5
   b9ca8:	a80b      	add	r0, sp, #44	; 0x2c
   b9caa:	f000 fefd 	bl	baaa8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b9cae:	a90b      	add	r1, sp, #44	; 0x2c
   b9cb0:	a80f      	add	r0, sp, #60	; 0x3c
   b9cb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b9cb4:	f000 fef8 	bl	baaa8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9cb8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b9cbc:	4299      	cmp	r1, r3
   b9cbe:	da1b      	bge.n	b9cf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b9cc0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b9cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b9cc4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b9cc8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b9ccc:	4631      	mov	r1, r6
   b9cce:	f106 0010 	add.w	r0, r6, #16
   b9cd2:	f7ff ff89 	bl	b9be8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b9cd6:	b9ee      	cbnz	r6, b9d14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b9cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9cda:	3301      	adds	r3, #1
   b9cdc:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b9cde:	e011      	b.n	b9d04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b9ce0:	a808      	add	r0, sp, #32
   b9ce2:	f7ff ffab 	bl	b9c3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9ce6:	2800      	cmp	r0, #0
   b9ce8:	d1d6      	bne.n	b9c98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b9cea:	a808      	add	r0, sp, #32
   b9cec:	f7fe fe57 	bl	b899e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9cf0:	4620      	mov	r0, r4
   b9cf2:	b015      	add	sp, #84	; 0x54
   b9cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9cf8:	3101      	adds	r1, #1
   b9cfa:	a808      	add	r0, sp, #32
   b9cfc:	f7ff ff9e 	bl	b9c3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9d00:	2800      	cmp	r0, #0
   b9d02:	d1dd      	bne.n	b9cc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9d04:	a80f      	add	r0, sp, #60	; 0x3c
   b9d06:	f000 fe53 	bl	ba9b0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b9d0a:	a80b      	add	r0, sp, #44	; 0x2c
   b9d0c:	f000 fe50 	bl	ba9b0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9d10:	3514      	adds	r5, #20
   b9d12:	e7c6      	b.n	b9ca2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9d14:	a90f      	add	r1, sp, #60	; 0x3c
   b9d16:	4630      	mov	r0, r6
   b9d18:	f000 fec6 	bl	baaa8 <_ZN6StringC1EOS_>
   b9d1c:	e7dc      	b.n	b9cd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b9d1e:	2600      	movs	r6, #0
   b9d20:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9d24:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b9d26:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b9d2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b9d2e:	429e      	cmp	r6, r3
   b9d30:	da7c      	bge.n	b9e2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b9d32:	0133      	lsls	r3, r6, #4
   b9d34:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b9d36:	9306      	str	r3, [sp, #24]
        if (!category) {
   b9d38:	b90b      	cbnz	r3, b9d3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b9d3a:	3601      	adds	r6, #1
   b9d3c:	e7f5      	b.n	b9d2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b9d3e:	2300      	movs	r3, #0
   b9d40:	9307      	str	r3, [sp, #28]
   b9d42:	fb09 f306 	mul.w	r3, r9, r6
   b9d46:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b9d48:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b9d4a:	a907      	add	r1, sp, #28
   b9d4c:	a806      	add	r0, sp, #24
   b9d4e:	f7ff fb22 	bl	b9396 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9d52:	4682      	mov	sl, r0
   b9d54:	2800      	cmp	r0, #0
   b9d56:	d0f0      	beq.n	b9d3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b9d58:	f04f 0300 	mov.w	r3, #0
   b9d5c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d60:	4601      	mov	r1, r0
   b9d62:	9a07      	ldr	r2, [sp, #28]
   b9d64:	f10d 0317 	add.w	r3, sp, #23
   b9d68:	4628      	mov	r0, r5
   b9d6a:	f7ff fbb1 	bl	b94d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9d6e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d72:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9d74:	2f00      	cmp	r7, #0
   b9d76:	d14a      	bne.n	b9e0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b9d78:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b9d7c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b9d80:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b9d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9d88:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b9d8c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b9d90:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9d92:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b9d96:	4293      	cmp	r3, r2
   b9d98:	db17      	blt.n	b9dca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b9d9a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b9d9e:	f1ba 0f00 	cmp.w	sl, #0
   b9da2:	dd30      	ble.n	b9e06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b9da4:	fb09 f00a 	mul.w	r0, r9, sl
   b9da8:	f7fe fd72 	bl	b8890 <malloc>
            if (!d) {
   b9dac:	4683      	mov	fp, r0
   b9dae:	b360      	cbz	r0, b9e0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b9db0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9db4:	fb09 1202 	mla	r2, r9, r2, r1
   b9db8:	f7ff feea 	bl	b9b90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b9dbc:	6828      	ldr	r0, [r5, #0]
   b9dbe:	f7fe fd6f 	bl	b88a0 <free>
        data_ = d;
   b9dc2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b9dc6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b9dca:	682b      	ldr	r3, [r5, #0]
   b9dcc:	9a01      	ldr	r2, [sp, #4]
   b9dce:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b9dd2:	686a      	ldr	r2, [r5, #4]
   b9dd4:	4651      	mov	r1, sl
   b9dd6:	fb09 3202 	mla	r2, r9, r2, r3
   b9dda:	f10a 0014 	add.w	r0, sl, #20
   b9dde:	f7ff fed7 	bl	b9b90 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b9de2:	f1ba 0f00 	cmp.w	sl, #0
   b9de6:	d003      	beq.n	b9df0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b9de8:	a90f      	add	r1, sp, #60	; 0x3c
   b9dea:	4650      	mov	r0, sl
   b9dec:	f7ff fb5d 	bl	b94aa <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b9df0:	686b      	ldr	r3, [r5, #4]
   b9df2:	3301      	adds	r3, #1
   b9df4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b9df6:	a811      	add	r0, sp, #68	; 0x44
   b9df8:	f7ff fcdc 	bl	b97b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9dfc:	b13f      	cbz	r7, b9e0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b9dfe:	a80b      	add	r0, sp, #44	; 0x2c
   b9e00:	f7ff fcd8 	bl	b97b4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9e04:	e771      	b.n	b9cea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b9e06:	46bb      	mov	fp, r7
   b9e08:	e7d8      	b.n	b9dbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9e0a:	2701      	movs	r7, #1
   b9e0c:	e7f3      	b.n	b9df6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b9e0e:	9b01      	ldr	r3, [sp, #4]
   b9e10:	682d      	ldr	r5, [r5, #0]
   b9e12:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b9e16:	9b06      	ldr	r3, [sp, #24]
   b9e18:	781b      	ldrb	r3, [r3, #0]
   b9e1a:	b92b      	cbnz	r3, b9e28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b9e1c:	f8d8 3000 	ldr.w	r3, [r8]
   b9e20:	9a02      	ldr	r2, [sp, #8]
   b9e22:	4413      	add	r3, r2
   b9e24:	7c1b      	ldrb	r3, [r3, #16]
   b9e26:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b9e28:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b9e2a:	e78e      	b.n	b9d4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e2c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b9e2e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e30:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9e32:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e34:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9e36:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b9e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b9e3a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e3c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9e3e:	60a2      	str	r2, [r4, #8]
   b9e40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b9e42:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e44:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9e46:	60e2      	str	r2, [r4, #12]
   b9e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b9e4a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e4c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9e4e:	6122      	str	r2, [r4, #16]
   b9e50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b9e52:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b9e54:	9b03      	ldr	r3, [sp, #12]
   b9e56:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b9e58:	6162      	str	r2, [r4, #20]
   b9e5a:	7623      	strb	r3, [r4, #24]
   b9e5c:	e7cf      	b.n	b9dfe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b9e60 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9e60:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e62:	4604      	mov	r4, r0
   b9e64:	b087      	sub	sp, #28
   b9e66:	460d      	mov	r5, r1
        filter_(level, filters) {
   b9e68:	4626      	mov	r6, r4
        stream_(&stream) {
   b9e6a:	4619      	mov	r1, r3
   b9e6c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9e6e:	4617      	mov	r7, r2
        stream_(&stream) {
   b9e70:	f7fb fd8b 	bl	b598a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b9e74:	4b0b      	ldr	r3, [pc, #44]	; (b9ea4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b9e76:	f846 3b04 	str.w	r3, [r6], #4
   b9e7a:	4669      	mov	r1, sp
   b9e7c:	a803      	add	r0, sp, #12
   b9e7e:	f7fb fd84 	bl	b598a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b9e82:	aa03      	add	r2, sp, #12
   b9e84:	4639      	mov	r1, r7
   b9e86:	4630      	mov	r0, r6
   b9e88:	f7ff fef0 	bl	b9c6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9e8c:	a803      	add	r0, sp, #12
   b9e8e:	f7fb fd3b 	bl	b5908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b9e92:	4668      	mov	r0, sp
   b9e94:	f7fb fd38 	bl	b5908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9e98:	4b03      	ldr	r3, [pc, #12]	; (b9ea8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b9e9a:	6023      	str	r3, [r4, #0]
}
   b9e9c:	4620      	mov	r0, r4
        stream_(&stream) {
   b9e9e:	6225      	str	r5, [r4, #32]
}
   b9ea0:	b007      	add	sp, #28
   b9ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9ea4:	000bcb50 	.word	0x000bcb50
   b9ea8:	000bd3b4 	.word	0x000bd3b4

000b9eac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b9eac:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9eae:	460f      	mov	r7, r1
   b9eb0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9eb2:	491d      	ldr	r1, [pc, #116]	; (b9f28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b9eb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9eb6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b9eb8:	4616      	mov	r6, r2
   b9eba:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9ebc:	f002 f94f 	bl	bc15e <strcmp>
   b9ec0:	b9c0      	cbnz	r0, b9ef4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b9ec2:	b1a4      	cbz	r4, b9eee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b9ec4:	4629      	mov	r1, r5
   b9ec6:	a801      	add	r0, sp, #4
   b9ec8:	f7ff fcbc 	bl	b9844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9ecc:	4917      	ldr	r1, [pc, #92]	; (b9f2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9ece:	2024      	movs	r0, #36	; 0x24
   b9ed0:	f001 fb84 	bl	bb5dc <_ZnwjRKSt9nothrow_t>
   b9ed4:	4605      	mov	r5, r0
   b9ed6:	b130      	cbz	r0, b9ee6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b9ed8:	ab01      	add	r3, sp, #4
   b9eda:	4632      	mov	r2, r6
   b9edc:	4621      	mov	r1, r4
   b9ede:	f7ff ffbf 	bl	b9e60 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9ee2:	4b13      	ldr	r3, [pc, #76]	; (b9f30 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b9ee4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9ee6:	a801      	add	r0, sp, #4
   b9ee8:	f7fb fd0e 	bl	b5908 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9eec:	462c      	mov	r4, r5
}
   b9eee:	4620      	mov	r0, r4
   b9ef0:	b005      	add	sp, #20
   b9ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b9ef4:	490f      	ldr	r1, [pc, #60]	; (b9f34 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b9ef6:	4638      	mov	r0, r7
   b9ef8:	f002 f931 	bl	bc15e <strcmp>
   b9efc:	b990      	cbnz	r0, b9f24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b9efe:	2c00      	cmp	r4, #0
   b9f00:	d0f5      	beq.n	b9eee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9f02:	4629      	mov	r1, r5
   b9f04:	a801      	add	r0, sp, #4
   b9f06:	f7ff fc9d 	bl	b9844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9f0a:	4908      	ldr	r1, [pc, #32]	; (b9f2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9f0c:	2024      	movs	r0, #36	; 0x24
   b9f0e:	f001 fb65 	bl	bb5dc <_ZnwjRKSt9nothrow_t>
   b9f12:	4605      	mov	r5, r0
   b9f14:	2800      	cmp	r0, #0
   b9f16:	d0e6      	beq.n	b9ee6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b9f18:	ab01      	add	r3, sp, #4
   b9f1a:	4632      	mov	r2, r6
   b9f1c:	4621      	mov	r1, r4
   b9f1e:	f7ff ff9f 	bl	b9e60 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9f22:	e7e0      	b.n	b9ee6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b9f24:	2400      	movs	r4, #0
   b9f26:	e7e2      	b.n	b9eee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b9f28:	000bd33a 	.word	0x000bd33a
   b9f2c:	000bd514 	.word	0x000bd514
   b9f30:	000bd3cc 	.word	0x000bd3cc
   b9f34:	000bd33e 	.word	0x000bd33e

000b9f38 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b9f38:	4b01      	ldr	r3, [pc, #4]	; (b9f40 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9f3a:	4a02      	ldr	r2, [pc, #8]	; (b9f44 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9f3c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9f3e:	4770      	bx	lr
   b9f40:	2003e658 	.word	0x2003e658
   b9f44:	000bd34f 	.word	0x000bd34f

000b9f48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9f4c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b9f4e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9f52:	4604      	mov	r4, r0
   b9f54:	460e      	mov	r6, r1
   b9f56:	4617      	mov	r7, r2
   b9f58:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b9f5a:	f001 f91d 	bl	bb198 <_Z16_fetch_usbserialv>
   b9f5e:	4581      	cmp	r9, r0
   b9f60:	d04c      	beq.n	b9ffc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b9f62:	792b      	ldrb	r3, [r5, #4]
   b9f64:	0719      	lsls	r1, r3, #28
   b9f66:	d504      	bpl.n	b9f72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b9f68:	696a      	ldr	r2, [r5, #20]
   b9f6a:	4954      	ldr	r1, [pc, #336]	; (ba0bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b9f6c:	4620      	mov	r0, r4
   b9f6e:	f7ff fa8d 	bl	b948c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b9f72:	f1b8 0f00 	cmp.w	r8, #0
   b9f76:	d00d      	beq.n	b9f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b9f78:	215b      	movs	r1, #91	; 0x5b
   b9f7a:	4620      	mov	r0, r4
   b9f7c:	f7ff fa7a 	bl	b9474 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b9f80:	4641      	mov	r1, r8
   b9f82:	4620      	mov	r0, r4
   b9f84:	f7ff fa67 	bl	b9456 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b9f88:	6823      	ldr	r3, [r4, #0]
   b9f8a:	494d      	ldr	r1, [pc, #308]	; (ba0c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b9f8c:	68db      	ldr	r3, [r3, #12]
   b9f8e:	2202      	movs	r2, #2
   b9f90:	4620      	mov	r0, r4
   b9f92:	4798      	blx	r3
    if (attr.has_file) {
   b9f94:	792b      	ldrb	r3, [r5, #4]
   b9f96:	07da      	lsls	r2, r3, #31
   b9f98:	d523      	bpl.n	b9fe2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b9f9a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b9f9e:	212f      	movs	r1, #47	; 0x2f
   b9fa0:	4640      	mov	r0, r8
   b9fa2:	f002 f91d 	bl	bc1e0 <strrchr>
    if (s1) {
   b9fa6:	b108      	cbz	r0, b9fac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b9fa8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b9fac:	4641      	mov	r1, r8
   b9fae:	4620      	mov	r0, r4
   b9fb0:	f7ff fa51 	bl	b9456 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b9fb4:	792b      	ldrb	r3, [r5, #4]
   b9fb6:	079b      	lsls	r3, r3, #30
   b9fb8:	d508      	bpl.n	b9fcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b9fba:	213a      	movs	r1, #58	; 0x3a
   b9fbc:	4620      	mov	r0, r4
   b9fbe:	f7ff fa59 	bl	b9474 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b9fc2:	68ea      	ldr	r2, [r5, #12]
   b9fc4:	493f      	ldr	r1, [pc, #252]	; (ba0c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b9fc6:	4620      	mov	r0, r4
   b9fc8:	f7ff fa60 	bl	b948c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b9fcc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b9fce:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b9fd0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b9fd4:	68db      	ldr	r3, [r3, #12]
   b9fd6:	bf14      	ite	ne
   b9fd8:	493b      	ldrne	r1, [pc, #236]	; (ba0c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b9fda:	493c      	ldreq	r1, [pc, #240]	; (ba0cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b9fdc:	2202      	movs	r2, #2
            write(": ", 2);
   b9fde:	4620      	mov	r0, r4
   b9fe0:	4798      	blx	r3
    if (attr.has_function) {
   b9fe2:	792b      	ldrb	r3, [r5, #4]
   b9fe4:	0758      	lsls	r0, r3, #29
   b9fe6:	d51d      	bpl.n	ba024 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b9fe8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b9fea:	460b      	mov	r3, r1
   b9fec:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b9fee:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9ff2:	b160      	cbz	r0, ba00e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b9ff4:	2820      	cmp	r0, #32
   b9ff6:	d108      	bne.n	ba00a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b9ff8:	4619      	mov	r1, r3
   b9ffa:	e7f7      	b.n	b9fec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b9ffc:	4834      	ldr	r0, [pc, #208]	; (ba0d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b9ffe:	f000 f966 	bl	ba2ce <_ZN5spark12NetworkClass9listeningEv>
   ba002:	2800      	cmp	r0, #0
   ba004:	d0ad      	beq.n	b9f62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba00a:	2828      	cmp	r0, #40	; 0x28
   ba00c:	d1ee      	bne.n	b9fec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba00e:	6823      	ldr	r3, [r4, #0]
   ba010:	1a52      	subs	r2, r2, r1
   ba012:	68db      	ldr	r3, [r3, #12]
   ba014:	4620      	mov	r0, r4
   ba016:	4798      	blx	r3
        write("(): ", 4);
   ba018:	6823      	ldr	r3, [r4, #0]
   ba01a:	492e      	ldr	r1, [pc, #184]	; (ba0d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba01c:	68db      	ldr	r3, [r3, #12]
   ba01e:	2204      	movs	r2, #4
   ba020:	4620      	mov	r0, r4
   ba022:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba024:	2100      	movs	r1, #0
   ba026:	4638      	mov	r0, r7
   ba028:	f7fe fb1e 	bl	b8668 <log_level_name>
   ba02c:	4601      	mov	r1, r0
    write(s);
   ba02e:	4620      	mov	r0, r4
   ba030:	f7ff fa11 	bl	b9456 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba034:	6823      	ldr	r3, [r4, #0]
   ba036:	4925      	ldr	r1, [pc, #148]	; (ba0cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba038:	68db      	ldr	r3, [r3, #12]
   ba03a:	2202      	movs	r2, #2
   ba03c:	4620      	mov	r0, r4
   ba03e:	4798      	blx	r3
    if (msg) {
   ba040:	b11e      	cbz	r6, ba04a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba042:	4631      	mov	r1, r6
   ba044:	4620      	mov	r0, r4
   ba046:	f7ff fa06 	bl	b9456 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba04a:	792b      	ldrb	r3, [r5, #4]
   ba04c:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba050:	d02c      	beq.n	ba0ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba052:	6823      	ldr	r3, [r4, #0]
   ba054:	4920      	ldr	r1, [pc, #128]	; (ba0d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba056:	68db      	ldr	r3, [r3, #12]
   ba058:	2202      	movs	r2, #2
   ba05a:	4620      	mov	r0, r4
   ba05c:	4798      	blx	r3
        if (attr.has_code) {
   ba05e:	792b      	ldrb	r3, [r5, #4]
   ba060:	06d9      	lsls	r1, r3, #27
   ba062:	d50a      	bpl.n	ba07a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba064:	6823      	ldr	r3, [r4, #0]
   ba066:	491d      	ldr	r1, [pc, #116]	; (ba0dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba068:	68db      	ldr	r3, [r3, #12]
   ba06a:	2207      	movs	r2, #7
   ba06c:	4620      	mov	r0, r4
   ba06e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba070:	69aa      	ldr	r2, [r5, #24]
   ba072:	491b      	ldr	r1, [pc, #108]	; (ba0e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba074:	4620      	mov	r0, r4
   ba076:	f7ff fa09 	bl	b948c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba07a:	792b      	ldrb	r3, [r5, #4]
   ba07c:	069a      	lsls	r2, r3, #26
   ba07e:	d511      	bpl.n	ba0a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba080:	06db      	lsls	r3, r3, #27
   ba082:	d505      	bpl.n	ba090 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba084:	6823      	ldr	r3, [r4, #0]
   ba086:	4910      	ldr	r1, [pc, #64]	; (ba0c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba088:	68db      	ldr	r3, [r3, #12]
   ba08a:	2202      	movs	r2, #2
   ba08c:	4620      	mov	r0, r4
   ba08e:	4798      	blx	r3
            write("details = ", 10);
   ba090:	6823      	ldr	r3, [r4, #0]
   ba092:	4914      	ldr	r1, [pc, #80]	; (ba0e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba094:	68db      	ldr	r3, [r3, #12]
   ba096:	4620      	mov	r0, r4
   ba098:	220a      	movs	r2, #10
   ba09a:	4798      	blx	r3
            write(attr.details);
   ba09c:	69e9      	ldr	r1, [r5, #28]
   ba09e:	4620      	mov	r0, r4
   ba0a0:	f7ff f9d9 	bl	b9456 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba0a4:	215d      	movs	r1, #93	; 0x5d
   ba0a6:	4620      	mov	r0, r4
   ba0a8:	f7ff f9e4 	bl	b9474 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba0ac:	6823      	ldr	r3, [r4, #0]
   ba0ae:	490e      	ldr	r1, [pc, #56]	; (ba0e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba0b0:	68db      	ldr	r3, [r3, #12]
   ba0b2:	4620      	mov	r0, r4
   ba0b4:	2202      	movs	r2, #2
}
   ba0b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba0ba:	4718      	bx	r3
   ba0bc:	000bd353 	.word	0x000bd353
   ba0c0:	000bd35a 	.word	0x000bd35a
   ba0c4:	000bcd37 	.word	0x000bcd37
   ba0c8:	000bd35d 	.word	0x000bd35d
   ba0cc:	000bd362 	.word	0x000bd362
   ba0d0:	2003e684 	.word	0x2003e684
   ba0d4:	000bd360 	.word	0x000bd360
   ba0d8:	000bd365 	.word	0x000bd365
   ba0dc:	000bd368 	.word	0x000bd368
   ba0e0:	000bcc48 	.word	0x000bcc48
   ba0e4:	000bd370 	.word	0x000bd370
   ba0e8:	000bd37b 	.word	0x000bd37b

000ba0ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba0f0:	b085      	sub	sp, #20
    return stream_;
   ba0f2:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba0f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba0f8:	4605      	mov	r5, r0
   ba0fa:	460f      	mov	r7, r1
   ba0fc:	4690      	mov	r8, r2
   ba0fe:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba100:	f001 f84a 	bl	bb198 <_Z16_fetch_usbserialv>
   ba104:	4581      	cmp	r9, r0
   ba106:	d105      	bne.n	ba114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba108:	4849      	ldr	r0, [pc, #292]	; (ba230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba10a:	f000 f8e0 	bl	ba2ce <_ZN5spark12NetworkClass9listeningEv>
   ba10e:	2800      	cmp	r0, #0
   ba110:	f040 808a 	bne.w	ba228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba114:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba116:	4a47      	ldr	r2, [pc, #284]	; (ba234 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba118:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba11a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba11e:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba120:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba122:	f88d 9008 	strb.w	r9, [sp, #8]
   ba126:	f7ff f878 	bl	b921a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba12a:	4649      	mov	r1, r9
   ba12c:	4640      	mov	r0, r8
   ba12e:	f7fe fa9b 	bl	b8668 <log_level_name>
    json.name("l", 1).value(s);
   ba132:	4941      	ldr	r1, [pc, #260]	; (ba238 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba134:	4680      	mov	r8, r0
   ba136:	2201      	movs	r2, #1
   ba138:	a801      	add	r0, sp, #4
   ba13a:	f7ff f8fd 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba13e:	4641      	mov	r1, r8
   ba140:	f7ff f97b 	bl	b943a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba144:	b13f      	cbz	r7, ba156 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba146:	493d      	ldr	r1, [pc, #244]	; (ba23c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba148:	2201      	movs	r2, #1
   ba14a:	a801      	add	r0, sp, #4
   ba14c:	f7ff f8f4 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba150:	4639      	mov	r1, r7
   ba152:	f7ff f972 	bl	b943a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba156:	b13e      	cbz	r6, ba168 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba158:	4939      	ldr	r1, [pc, #228]	; (ba240 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba15a:	2201      	movs	r2, #1
   ba15c:	a801      	add	r0, sp, #4
   ba15e:	f7ff f8eb 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba162:	4631      	mov	r1, r6
   ba164:	f7ff f969 	bl	b943a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba168:	7923      	ldrb	r3, [r4, #4]
   ba16a:	07df      	lsls	r7, r3, #31
   ba16c:	d50e      	bpl.n	ba18c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba16e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba170:	212f      	movs	r1, #47	; 0x2f
   ba172:	4630      	mov	r0, r6
   ba174:	f002 f834 	bl	bc1e0 <strrchr>
    if (s1) {
   ba178:	b100      	cbz	r0, ba17c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba17a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba17c:	4931      	ldr	r1, [pc, #196]	; (ba244 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba17e:	2201      	movs	r2, #1
   ba180:	a801      	add	r0, sp, #4
   ba182:	f7ff f8d9 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba186:	4631      	mov	r1, r6
   ba188:	f7ff f957 	bl	b943a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba18c:	7923      	ldrb	r3, [r4, #4]
   ba18e:	079e      	lsls	r6, r3, #30
   ba190:	d507      	bpl.n	ba1a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba192:	492d      	ldr	r1, [pc, #180]	; (ba248 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba194:	2202      	movs	r2, #2
   ba196:	a801      	add	r0, sp, #4
   ba198:	f7ff f8ce 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba19c:	68e1      	ldr	r1, [r4, #12]
   ba19e:	f7ff f849 	bl	b9234 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba1a2:	7923      	ldrb	r3, [r4, #4]
   ba1a4:	0758      	lsls	r0, r3, #29
   ba1a6:	d514      	bpl.n	ba1d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba1a8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba1aa:	4633      	mov	r3, r6
   ba1ac:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba1ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba1b2:	b12a      	cbz	r2, ba1c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba1b4:	2a20      	cmp	r2, #32
   ba1b6:	d101      	bne.n	ba1bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba1b8:	461e      	mov	r6, r3
   ba1ba:	e7f7      	b.n	ba1ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba1bc:	2a28      	cmp	r2, #40	; 0x28
   ba1be:	d1f5      	bne.n	ba1ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba1c0:	4922      	ldr	r1, [pc, #136]	; (ba24c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba1c2:	2202      	movs	r2, #2
   ba1c4:	a801      	add	r0, sp, #4
   ba1c6:	f7ff f8b7 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba1ca:	1bba      	subs	r2, r7, r6
   ba1cc:	4631      	mov	r1, r6
   ba1ce:	f7ff f8c3 	bl	b9358 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba1d2:	7923      	ldrb	r3, [r4, #4]
   ba1d4:	0719      	lsls	r1, r3, #28
   ba1d6:	d507      	bpl.n	ba1e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba1d8:	491d      	ldr	r1, [pc, #116]	; (ba250 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba1da:	2201      	movs	r2, #1
   ba1dc:	a801      	add	r0, sp, #4
   ba1de:	f7ff f8ab 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba1e2:	6961      	ldr	r1, [r4, #20]
   ba1e4:	f7ff f838 	bl	b9258 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba1e8:	7923      	ldrb	r3, [r4, #4]
   ba1ea:	06da      	lsls	r2, r3, #27
   ba1ec:	d508      	bpl.n	ba200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba1ee:	2204      	movs	r2, #4
   ba1f0:	4918      	ldr	r1, [pc, #96]	; (ba254 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba1f2:	eb0d 0002 	add.w	r0, sp, r2
   ba1f6:	f7ff f89f 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba1fa:	69a1      	ldr	r1, [r4, #24]
   ba1fc:	f7ff f81a 	bl	b9234 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba200:	7923      	ldrb	r3, [r4, #4]
   ba202:	069b      	lsls	r3, r3, #26
   ba204:	d507      	bpl.n	ba216 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba206:	4914      	ldr	r1, [pc, #80]	; (ba258 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba208:	2206      	movs	r2, #6
   ba20a:	a801      	add	r0, sp, #4
   ba20c:	f7ff f894 	bl	b9338 <_ZN5spark10JSONWriter4nameEPKcj>
   ba210:	69e1      	ldr	r1, [r4, #28]
   ba212:	f7ff f912 	bl	b943a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba216:	a801      	add	r0, sp, #4
   ba218:	f7fe ffe9 	bl	b91ee <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba21c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba21e:	490f      	ldr	r1, [pc, #60]	; (ba25c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba220:	6803      	ldr	r3, [r0, #0]
   ba222:	2202      	movs	r2, #2
   ba224:	68db      	ldr	r3, [r3, #12]
   ba226:	4798      	blx	r3
}
   ba228:	b005      	add	sp, #20
   ba22a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba22e:	bf00      	nop
   ba230:	2003e684 	.word	0x2003e684
   ba234:	000bd39c 	.word	0x000bd39c
   ba238:	000bd330 	.word	0x000bd330
   ba23c:	000bd37e 	.word	0x000bd37e
   ba240:	000bd635 	.word	0x000bd635
   ba244:	000bc732 	.word	0x000bc732
   ba248:	000bd380 	.word	0x000bd380
   ba24c:	000bd383 	.word	0x000bd383
   ba250:	000bc87f 	.word	0x000bc87f
   ba254:	000bd386 	.word	0x000bd386
   ba258:	000bd38b 	.word	0x000bd38b
   ba25c:	000bd37b 	.word	0x000bd37b

000ba260 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba260:	2300      	movs	r3, #0
   ba262:	6840      	ldr	r0, [r0, #4]
   ba264:	461a      	mov	r2, r3
   ba266:	f7fe bab3 	b.w	b87d0 <network_connect>

000ba26a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba26a:	6840      	ldr	r0, [r0, #4]
   ba26c:	2200      	movs	r2, #0
   ba26e:	2102      	movs	r1, #2
   ba270:	f7fe babe 	b.w	b87f0 <network_disconnect>

000ba274 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba274:	2200      	movs	r2, #0
   ba276:	6840      	ldr	r0, [r0, #4]
   ba278:	4611      	mov	r1, r2
   ba27a:	f7fe bab1 	b.w	b87e0 <network_connecting>

000ba27e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba27e:	2200      	movs	r2, #0
   ba280:	6840      	ldr	r0, [r0, #4]
   ba282:	4611      	mov	r1, r2
   ba284:	f7fe babc 	b.w	b8800 <network_ready>

000ba288 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba288:	2300      	movs	r3, #0
   ba28a:	6840      	ldr	r0, [r0, #4]
   ba28c:	461a      	mov	r2, r3
   ba28e:	4619      	mov	r1, r3
   ba290:	f7fe babe 	b.w	b8810 <network_on>

000ba294 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba294:	2300      	movs	r3, #0
   ba296:	6840      	ldr	r0, [r0, #4]
   ba298:	461a      	mov	r2, r3
   ba29a:	4619      	mov	r1, r3
   ba29c:	f7fe bac0 	b.w	b8820 <network_off>

000ba2a0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba2a0:	6840      	ldr	r0, [r0, #4]
   ba2a2:	2100      	movs	r1, #0
   ba2a4:	f7fe bae4 	b.w	b8870 <network_is_on>

000ba2a8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba2a8:	6840      	ldr	r0, [r0, #4]
   ba2aa:	2100      	movs	r1, #0
   ba2ac:	f7fe bae8 	b.w	b8880 <network_is_off>

000ba2b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba2b0:	6840      	ldr	r0, [r0, #4]
   ba2b2:	2200      	movs	r2, #0
   ba2b4:	f081 0101 	eor.w	r1, r1, #1
   ba2b8:	f7fe baba 	b.w	b8830 <network_listen>

000ba2bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba2bc:	6840      	ldr	r0, [r0, #4]
   ba2be:	2200      	movs	r2, #0
   ba2c0:	f7fe bac6 	b.w	b8850 <network_set_listen_timeout>

000ba2c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba2c4:	2200      	movs	r2, #0
   ba2c6:	6840      	ldr	r0, [r0, #4]
   ba2c8:	4611      	mov	r1, r2
   ba2ca:	f7fe bac9 	b.w	b8860 <network_get_listen_timeout>

000ba2ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba2ce:	2200      	movs	r2, #0
   ba2d0:	6840      	ldr	r0, [r0, #4]
   ba2d2:	4611      	mov	r1, r2
   ba2d4:	f7fe bab4 	b.w	b8840 <network_listening>

000ba2d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba2dc:	b095      	sub	sp, #84	; 0x54
   ba2de:	4614      	mov	r4, r2
   ba2e0:	460d      	mov	r5, r1
   ba2e2:	4607      	mov	r7, r0
    IPAddress addr;
   ba2e4:	f7fe fe32 	bl	b8f4c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba2e8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba2ea:	221c      	movs	r2, #28
   ba2ec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba2ee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba2f0:	f001 feaa 	bl	bc048 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba2f4:	2340      	movs	r3, #64	; 0x40
   ba2f6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba2f8:	4620      	mov	r0, r4
   ba2fa:	466b      	mov	r3, sp
   ba2fc:	aa0c      	add	r2, sp, #48	; 0x30
   ba2fe:	2100      	movs	r1, #0
   ba300:	f7fe f8b2 	bl	b8468 <netdb_getaddrinfo>
    if (!r) {
   ba304:	4604      	mov	r4, r0
   ba306:	2800      	cmp	r0, #0
   ba308:	d14b      	bne.n	ba3a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba30a:	4602      	mov	r2, r0
   ba30c:	2101      	movs	r1, #1
   ba30e:	6868      	ldr	r0, [r5, #4]
   ba310:	f7fe fa76 	bl	b8800 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba314:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba316:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba318:	4622      	mov	r2, r4
   ba31a:	6868      	ldr	r0, [r5, #4]
   ba31c:	f7fe fa70 	bl	b8800 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba320:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba322:	4681      	mov	r9, r0
        bool ok = false;
   ba324:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba326:	2e00      	cmp	r6, #0
   ba328:	d03b      	beq.n	ba3a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba32a:	2900      	cmp	r1, #0
   ba32c:	d139      	bne.n	ba3a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba32e:	6873      	ldr	r3, [r6, #4]
   ba330:	2b02      	cmp	r3, #2
   ba332:	d003      	beq.n	ba33c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba334:	2b0a      	cmp	r3, #10
   ba336:	d011      	beq.n	ba35c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba338:	69f6      	ldr	r6, [r6, #28]
   ba33a:	e7f4      	b.n	ba326 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba33c:	f1b8 0f00 	cmp.w	r8, #0
   ba340:	d0fa      	beq.n	ba338 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba342:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba344:	a806      	add	r0, sp, #24
   ba346:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba348:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba34a:	f7fe fe2d 	bl	b8fa8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba34e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba350:	1d3c      	adds	r4, r7, #4
   ba352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba354:	682b      	ldr	r3, [r5, #0]
   ba356:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba358:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba35a:	e7ed      	b.n	ba338 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba35c:	f1b9 0f00 	cmp.w	r9, #0
   ba360:	d0ea      	beq.n	ba338 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba362:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba364:	2210      	movs	r2, #16
   ba366:	a801      	add	r0, sp, #4
   ba368:	f001 fe6e 	bl	bc048 <memset>
                    a.v = 6;
   ba36c:	2306      	movs	r3, #6
   ba36e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba372:	ad01      	add	r5, sp, #4
   ba374:	f104 0308 	add.w	r3, r4, #8
   ba378:	3418      	adds	r4, #24
   ba37a:	6818      	ldr	r0, [r3, #0]
   ba37c:	6859      	ldr	r1, [r3, #4]
   ba37e:	462a      	mov	r2, r5
   ba380:	c203      	stmia	r2!, {r0, r1}
   ba382:	3308      	adds	r3, #8
   ba384:	42a3      	cmp	r3, r4
   ba386:	4615      	mov	r5, r2
   ba388:	d1f7      	bne.n	ba37a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba38a:	a901      	add	r1, sp, #4
   ba38c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba38e:	ad07      	add	r5, sp, #28
   ba390:	f7fe fdea 	bl	b8f68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba396:	1d3c      	adds	r4, r7, #4
   ba398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba39a:	682b      	ldr	r3, [r5, #0]
   ba39c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba39e:	4649      	mov	r1, r9
   ba3a0:	e7ca      	b.n	ba338 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba3a2:	9800      	ldr	r0, [sp, #0]
   ba3a4:	f7fe f858 	bl	b8458 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba3a8:	4638      	mov	r0, r7
   ba3aa:	b015      	add	sp, #84	; 0x54
   ba3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba3b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba3b0:	4b02      	ldr	r3, [pc, #8]	; (ba3bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba3b2:	4a03      	ldr	r2, [pc, #12]	; (ba3c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba3b4:	601a      	str	r2, [r3, #0]
   ba3b6:	2200      	movs	r2, #0
   ba3b8:	605a      	str	r2, [r3, #4]

} // spark
   ba3ba:	4770      	bx	lr
   ba3bc:	2003e684 	.word	0x2003e684
   ba3c0:	000bd414 	.word	0x000bd414

000ba3c4 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   ba3c4:	b508      	push	{r3, lr}
            return &Wire1;
   ba3c6:	f001 f8a5 	bl	bb514 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   ba3ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   ba3ce:	f7fe bd45 	b.w	b8e5c <_ZN7TwoWire4lockEv>

000ba3d2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   ba3d2:	b510      	push	{r4, lr}
   ba3d4:	4604      	mov	r4, r0
    lock_(_lock)
   ba3d6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   ba3d8:	b109      	cbz	r1, ba3de <_ZN4PMICC1Eb+0xc>
        lock();
   ba3da:	f7ff fff3 	bl	ba3c4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   ba3de:	4620      	mov	r0, r4
   ba3e0:	bd10      	pop	{r4, pc}

000ba3e2 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   ba3e2:	b508      	push	{r3, lr}
            return &Wire1;
   ba3e4:	f001 f896 	bl	bb514 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   ba3e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   ba3ec:	f7fe bd3f 	b.w	b8e6e <_ZN7TwoWire6unlockEv>

000ba3f0 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   ba3f0:	b510      	push	{r4, lr}
    if (lock_) {
   ba3f2:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   ba3f4:	4604      	mov	r4, r0
    if (lock_) {
   ba3f6:	b10b      	cbz	r3, ba3fc <_ZN4PMICD1Ev+0xc>
        unlock();
   ba3f8:	f7ff fff3 	bl	ba3e2 <_ZN4PMIC6unlockEv>
}
   ba3fc:	4620      	mov	r0, r4
   ba3fe:	bd10      	pop	{r4, pc}

000ba400 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   ba400:	b510      	push	{r4, lr}
   ba402:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   ba404:	6800      	ldr	r0, [r0, #0]
   ba406:	f7ff ffec 	bl	ba3e2 <_ZN4PMIC6unlockEv>
   ba40a:	4620      	mov	r0, r4
   ba40c:	bd10      	pop	{r4, pc}

000ba40e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   ba40e:	b530      	push	{r4, r5, lr}
   ba410:	b087      	sub	sp, #28
   ba412:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba414:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba416:	f7ff ffd5 	bl	ba3c4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba41a:	226b      	movs	r2, #107	; 0x6b
   ba41c:	2300      	movs	r3, #0
   ba41e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba422:	2401      	movs	r4, #1
   ba424:	230a      	movs	r3, #10
   ba426:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   ba42a:	f001 f873 	bl	bb514 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba42e:	a902      	add	r1, sp, #8
   ba430:	f7fe fcf8 	bl	b8e24 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba434:	f001 f86e 	bl	bb514 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   ba438:	6803      	ldr	r3, [r0, #0]
   ba43a:	4629      	mov	r1, r5
   ba43c:	689b      	ldr	r3, [r3, #8]
   ba43e:	4798      	blx	r3
            return &Wire1;
   ba440:	f001 f868 	bl	bb514 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba444:	4621      	mov	r1, r4
   ba446:	f7fe fd05 	bl	b8e54 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   ba44a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   ba44c:	f001 f862 	bl	bb514 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   ba450:	a902      	add	r1, sp, #8
   ba452:	f7fe fcb7 	bl	b8dc4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   ba456:	f001 f85d 	bl	bb514 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   ba45a:	6803      	ldr	r3, [r0, #0]
   ba45c:	695b      	ldr	r3, [r3, #20]
   ba45e:	4798      	blx	r3
   ba460:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   ba462:	a801      	add	r0, sp, #4
   ba464:	f7ff ffcc 	bl	ba400 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba468:	b2e0      	uxtb	r0, r4
   ba46a:	b007      	add	sp, #28
   ba46c:	bd30      	pop	{r4, r5, pc}

000ba46e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   ba46e:	b570      	push	{r4, r5, r6, lr}
   ba470:	b086      	sub	sp, #24
   ba472:	460d      	mov	r5, r1
   ba474:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba476:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba478:	f7ff ffa4 	bl	ba3c4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba47c:	226b      	movs	r2, #107	; 0x6b
   ba47e:	2300      	movs	r3, #0
   ba480:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba484:	2601      	movs	r6, #1
   ba486:	230a      	movs	r3, #10
   ba488:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   ba48c:	f001 f842 	bl	bb514 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba490:	a902      	add	r1, sp, #8
   ba492:	f7fe fcc7 	bl	b8e24 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba496:	f001 f83d 	bl	bb514 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   ba49a:	6803      	ldr	r3, [r0, #0]
   ba49c:	4629      	mov	r1, r5
   ba49e:	689b      	ldr	r3, [r3, #8]
   ba4a0:	4798      	blx	r3
            return &Wire1;
   ba4a2:	f001 f837 	bl	bb514 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   ba4a6:	6803      	ldr	r3, [r0, #0]
   ba4a8:	4621      	mov	r1, r4
   ba4aa:	689b      	ldr	r3, [r3, #8]
   ba4ac:	4798      	blx	r3
            return &Wire1;
   ba4ae:	f001 f831 	bl	bb514 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba4b2:	4631      	mov	r1, r6
   ba4b4:	f7fe fcce 	bl	b8e54 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   ba4b8:	a801      	add	r0, sp, #4
   ba4ba:	f7ff ffa1 	bl	ba400 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba4be:	b006      	add	sp, #24
   ba4c0:	bd70      	pop	{r4, r5, r6, pc}

000ba4c2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   ba4c2:	b513      	push	{r0, r1, r4, lr}
   ba4c4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba4c6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba4c8:	f7ff ff7c 	bl	ba3c4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba4cc:	2101      	movs	r1, #1
   ba4ce:	4620      	mov	r0, r4
   ba4d0:	f7ff ff9d 	bl	ba40e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   ba4d4:	f000 0330 	and.w	r3, r0, #48	; 0x30
   ba4d8:	2b10      	cmp	r3, #16
   ba4da:	d007      	beq.n	ba4ec <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   ba4dc:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   ba4e0:	f042 0210 	orr.w	r2, r2, #16
   ba4e4:	2101      	movs	r1, #1
   ba4e6:	4620      	mov	r0, r4
   ba4e8:	f7ff ffc1 	bl	ba46e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba4ec:	a801      	add	r0, sp, #4
   ba4ee:	f7ff ff87 	bl	ba400 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba4f2:	2001      	movs	r0, #1
   ba4f4:	b002      	add	sp, #8
   ba4f6:	bd10      	pop	{r4, pc}

000ba4f8 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   ba4f8:	b513      	push	{r0, r1, r4, lr}
   ba4fa:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba4fc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba4fe:	f7ff ff61 	bl	ba3c4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba502:	2101      	movs	r1, #1
   ba504:	4620      	mov	r0, r4
   ba506:	f7ff ff82 	bl	ba40e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   ba50a:	f010 0f30 	tst.w	r0, #48	; 0x30
   ba50e:	d005      	beq.n	ba51c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   ba510:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   ba514:	2101      	movs	r1, #1
   ba516:	4620      	mov	r0, r4
   ba518:	f7ff ffa9 	bl	ba46e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba51c:	a801      	add	r0, sp, #4
   ba51e:	f7ff ff6f 	bl	ba400 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba522:	2001      	movs	r0, #1
   ba524:	b002      	add	sp, #8
   ba526:	bd10      	pop	{r4, pc}

000ba528 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba52a:	4606      	mov	r6, r0
   ba52c:	460d      	mov	r5, r1
  size_t n = 0;
   ba52e:	188f      	adds	r7, r1, r2
   ba530:	2400      	movs	r4, #0
  while (size--) {
   ba532:	42bd      	cmp	r5, r7
   ba534:	d00c      	beq.n	ba550 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba536:	6833      	ldr	r3, [r6, #0]
   ba538:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba53c:	689b      	ldr	r3, [r3, #8]
   ba53e:	4630      	mov	r0, r6
   ba540:	4798      	blx	r3
     if (chunk>=0)
   ba542:	1e03      	subs	r3, r0, #0
   ba544:	db01      	blt.n	ba54a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba546:	441c      	add	r4, r3
  while (size--) {
   ba548:	e7f3      	b.n	ba532 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba54a:	2c00      	cmp	r4, #0
   ba54c:	bf08      	it	eq
   ba54e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba550:	4620      	mov	r0, r4
   ba552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba554 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba554:	b513      	push	{r0, r1, r4, lr}
   ba556:	4604      	mov	r4, r0
    }
   ba558:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba55a:	b159      	cbz	r1, ba574 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba55c:	9101      	str	r1, [sp, #4]
   ba55e:	f001 fe10 	bl	bc182 <strlen>
   ba562:	6823      	ldr	r3, [r4, #0]
   ba564:	9901      	ldr	r1, [sp, #4]
   ba566:	68db      	ldr	r3, [r3, #12]
   ba568:	4602      	mov	r2, r0
   ba56a:	4620      	mov	r0, r4
    }
   ba56c:	b002      	add	sp, #8
   ba56e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba572:	4718      	bx	r3
    }
   ba574:	b002      	add	sp, #8
   ba576:	bd10      	pop	{r4, pc}

000ba578 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba578:	b508      	push	{r3, lr}
  return write(str);
   ba57a:	f7ff ffeb 	bl	ba554 <_ZN5Print5writeEPKc>
}
   ba57e:	bd08      	pop	{r3, pc}

000ba580 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba580:	6803      	ldr	r3, [r0, #0]
   ba582:	689b      	ldr	r3, [r3, #8]
   ba584:	4718      	bx	r3

000ba586 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba586:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba588:	210d      	movs	r1, #13
{
   ba58a:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba58c:	f7ff fff8 	bl	ba580 <_ZN5Print5printEc>
  n += print('\n');
   ba590:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba592:	4604      	mov	r4, r0
  n += print('\n');
   ba594:	4628      	mov	r0, r5
   ba596:	f7ff fff3 	bl	ba580 <_ZN5Print5printEc>
  return n;
}
   ba59a:	4420      	add	r0, r4
   ba59c:	bd38      	pop	{r3, r4, r5, pc}

000ba59e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba59e:	b530      	push	{r4, r5, lr}
   ba5a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba5a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba5a4:	2a01      	cmp	r2, #1
  *str = '\0';
   ba5a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba5aa:	bf98      	it	ls
   ba5ac:	220a      	movls	r2, #10
   ba5ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba5b0:	460d      	mov	r5, r1
   ba5b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba5b6:	fb01 5312 	mls	r3, r1, r2, r5
   ba5ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba5be:	2b09      	cmp	r3, #9
   ba5c0:	bf94      	ite	ls
   ba5c2:	3330      	addls	r3, #48	; 0x30
   ba5c4:	3337      	addhi	r3, #55	; 0x37
   ba5c6:	b2db      	uxtb	r3, r3
  } while(n);
   ba5c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba5ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba5ce:	d9ef      	bls.n	ba5b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba5d0:	4621      	mov	r1, r4
   ba5d2:	f7ff ffbf 	bl	ba554 <_ZN5Print5writeEPKc>
}
   ba5d6:	b00b      	add	sp, #44	; 0x2c
   ba5d8:	bd30      	pop	{r4, r5, pc}
	...

000ba5dc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   ba5dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba5e0:	ec55 4b10 	vmov	r4, r5, d0
   ba5e4:	4606      	mov	r6, r0
   ba5e6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   ba5e8:	ee10 2a10 	vmov	r2, s0
   ba5ec:	ee10 0a10 	vmov	r0, s0
   ba5f0:	462b      	mov	r3, r5
   ba5f2:	4629      	mov	r1, r5
   ba5f4:	f001 fc50 	bl	bbe98 <__aeabi_dcmpun>
   ba5f8:	b140      	cbz	r0, ba60c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   ba5fa:	4953      	ldr	r1, [pc, #332]	; (ba748 <_ZN5Print10printFloatEdh+0x16c>)
   ba5fc:	4630      	mov	r0, r6
   ba5fe:	f7ff ffa9 	bl	ba554 <_ZN5Print5writeEPKc>
   ba602:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   ba604:	4650      	mov	r0, sl
   ba606:	b003      	add	sp, #12
   ba608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   ba60c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   ba610:	4b4e      	ldr	r3, [pc, #312]	; (ba74c <_ZN5Print10printFloatEdh+0x170>)
   ba612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba616:	4620      	mov	r0, r4
   ba618:	4649      	mov	r1, r9
   ba61a:	f001 fc3d 	bl	bbe98 <__aeabi_dcmpun>
   ba61e:	b948      	cbnz	r0, ba634 <_ZN5Print10printFloatEdh+0x58>
   ba620:	4b4a      	ldr	r3, [pc, #296]	; (ba74c <_ZN5Print10printFloatEdh+0x170>)
   ba622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba626:	4620      	mov	r0, r4
   ba628:	4649      	mov	r1, r9
   ba62a:	f001 fc17 	bl	bbe5c <__aeabi_dcmple>
   ba62e:	b908      	cbnz	r0, ba634 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   ba630:	4947      	ldr	r1, [pc, #284]	; (ba750 <_ZN5Print10printFloatEdh+0x174>)
   ba632:	e7e3      	b.n	ba5fc <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   ba634:	4b47      	ldr	r3, [pc, #284]	; (ba754 <_ZN5Print10printFloatEdh+0x178>)
   ba636:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba63a:	4620      	mov	r0, r4
   ba63c:	4629      	mov	r1, r5
   ba63e:	f001 fc21 	bl	bbe84 <__aeabi_dcmpgt>
   ba642:	b108      	cbz	r0, ba648 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   ba644:	4944      	ldr	r1, [pc, #272]	; (ba758 <_ZN5Print10printFloatEdh+0x17c>)
   ba646:	e7d9      	b.n	ba5fc <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   ba648:	4b44      	ldr	r3, [pc, #272]	; (ba75c <_ZN5Print10printFloatEdh+0x180>)
   ba64a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba64e:	4620      	mov	r0, r4
   ba650:	4629      	mov	r1, r5
   ba652:	f001 fbf9 	bl	bbe48 <__aeabi_dcmplt>
   ba656:	2800      	cmp	r0, #0
   ba658:	d1f4      	bne.n	ba644 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   ba65a:	2200      	movs	r2, #0
   ba65c:	2300      	movs	r3, #0
   ba65e:	4620      	mov	r0, r4
   ba660:	4629      	mov	r1, r5
   ba662:	f001 fbf1 	bl	bbe48 <__aeabi_dcmplt>
   ba666:	b1d0      	cbz	r0, ba69e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   ba668:	212d      	movs	r1, #45	; 0x2d
   ba66a:	4630      	mov	r0, r6
   ba66c:	f7ff ff88 	bl	ba580 <_ZN5Print5printEc>
     number = -number;
   ba670:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   ba674:	4682      	mov	sl, r0
     number = -number;
   ba676:	461d      	mov	r5, r3
  double rounding = 0.5;
   ba678:	4939      	ldr	r1, [pc, #228]	; (ba760 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   ba67a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; ba768 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   ba67e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   ba682:	2000      	movs	r0, #0
    rounding /= 10.0;
   ba684:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   ba688:	fa5f f38b 	uxtb.w	r3, fp
   ba68c:	429f      	cmp	r7, r3
   ba68e:	d908      	bls.n	ba6a2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   ba690:	4642      	mov	r2, r8
   ba692:	464b      	mov	r3, r9
   ba694:	f001 fa90 	bl	bbbb8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   ba698:	f10b 0b01 	add.w	fp, fp, #1
   ba69c:	e7f4      	b.n	ba688 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   ba69e:	4682      	mov	sl, r0
   ba6a0:	e7ea      	b.n	ba678 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   ba6a2:	4622      	mov	r2, r4
   ba6a4:	462b      	mov	r3, r5
   ba6a6:	f000 ffa7 	bl	bb5f8 <__adddf3>
   ba6aa:	460d      	mov	r5, r1
   ba6ac:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   ba6ae:	f001 fc31 	bl	bbf14 <__aeabi_d2uiz>
   ba6b2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   ba6b4:	f001 f8dc 	bl	bb870 <__aeabi_ui2d>
   ba6b8:	4602      	mov	r2, r0
   ba6ba:	460b      	mov	r3, r1
   ba6bc:	4620      	mov	r0, r4
   ba6be:	4629      	mov	r1, r5
   ba6c0:	f000 ff98 	bl	bb5f4 <__aeabi_dsub>
        return printNumber(val, base) + t;
   ba6c4:	220a      	movs	r2, #10
   ba6c6:	4604      	mov	r4, r0
   ba6c8:	460d      	mov	r5, r1
   ba6ca:	4630      	mov	r0, r6
   ba6cc:	4641      	mov	r1, r8
   ba6ce:	f7ff ff66 	bl	ba59e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   ba6d2:	4482      	add	sl, r0
  if (digits > 0) {
   ba6d4:	2f00      	cmp	r7, #0
   ba6d6:	d095      	beq.n	ba604 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   ba6d8:	4922      	ldr	r1, [pc, #136]	; (ba764 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   ba6da:	f8df 908c 	ldr.w	r9, [pc, #140]	; ba768 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   ba6de:	4630      	mov	r0, r6
   ba6e0:	f7ff ff38 	bl	ba554 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   ba6e4:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   ba6e8:	4482      	add	sl, r0
  while (digits-- > 0)
   ba6ea:	2f00      	cmp	r7, #0
   ba6ec:	d08a      	beq.n	ba604 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   ba6ee:	4642      	mov	r2, r8
   ba6f0:	464b      	mov	r3, r9
   ba6f2:	4620      	mov	r0, r4
   ba6f4:	4629      	mov	r1, r5
   ba6f6:	f001 f935 	bl	bb964 <__aeabi_dmul>
   ba6fa:	4604      	mov	r4, r0
   ba6fc:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   ba6fe:	f001 fbe1 	bl	bbec4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   ba702:	f1b0 0b00 	subs.w	fp, r0, #0
   ba706:	da1c      	bge.n	ba742 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   ba708:	212d      	movs	r1, #45	; 0x2d
   ba70a:	4630      	mov	r0, r6
   ba70c:	f7ff ff38 	bl	ba580 <_ZN5Print5printEc>
            val = -n;
   ba710:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   ba714:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   ba716:	220a      	movs	r2, #10
   ba718:	4630      	mov	r0, r6
   ba71a:	9301      	str	r3, [sp, #4]
   ba71c:	f7ff ff3f 	bl	ba59e <_ZN5Print11printNumberEmh>
   ba720:	9b01      	ldr	r3, [sp, #4]
   ba722:	4418      	add	r0, r3
    n += print(toPrint);
   ba724:	4482      	add	sl, r0
    remainder -= toPrint;
   ba726:	4658      	mov	r0, fp
   ba728:	f001 f8b2 	bl	bb890 <__aeabi_i2d>
   ba72c:	4602      	mov	r2, r0
   ba72e:	460b      	mov	r3, r1
   ba730:	4620      	mov	r0, r4
   ba732:	4629      	mov	r1, r5
   ba734:	f000 ff5e 	bl	bb5f4 <__aeabi_dsub>
   ba738:	3f01      	subs	r7, #1
   ba73a:	4604      	mov	r4, r0
   ba73c:	460d      	mov	r5, r1
   ba73e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   ba740:	e7d3      	b.n	ba6ea <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   ba742:	4659      	mov	r1, fp
        size_t t = 0;
   ba744:	2300      	movs	r3, #0
   ba746:	e7e6      	b.n	ba716 <_ZN5Print10printFloatEdh+0x13a>
   ba748:	000bd448 	.word	0x000bd448
   ba74c:	7fefffff 	.word	0x7fefffff
   ba750:	000bd44c 	.word	0x000bd44c
   ba754:	41efffff 	.word	0x41efffff
   ba758:	000bd450 	.word	0x000bd450
   ba75c:	c1efffff 	.word	0xc1efffff
   ba760:	3fe00000 	.word	0x3fe00000
   ba764:	000bd488 	.word	0x000bd488
   ba768:	40240000 	.word	0x40240000

000ba76c <_ZN5Print5printEfi>:
{
   ba76c:	b538      	push	{r3, r4, r5, lr}
   ba76e:	4604      	mov	r4, r0
   ba770:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   ba774:	b2cd      	uxtb	r5, r1
   ba776:	f001 f89d 	bl	bb8b4 <__aeabi_f2d>
   ba77a:	ec41 0b10 	vmov	d0, r0, r1
   ba77e:	4629      	mov	r1, r5
   ba780:	4620      	mov	r0, r4
}
   ba782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   ba786:	f7ff bf29 	b.w	ba5dc <_ZN5Print10printFloatEdh>

000ba78a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba78a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba78e:	b086      	sub	sp, #24
   ba790:	af00      	add	r7, sp, #0
   ba792:	4605      	mov	r5, r0
   ba794:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba796:	1d38      	adds	r0, r7, #4
   ba798:	2114      	movs	r1, #20
{
   ba79a:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba79c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba79e:	f7fe f89f 	bl	b88e0 <vsnprintf>

    if (n<bufsize)
   ba7a2:	2813      	cmp	r0, #19
   ba7a4:	d80e      	bhi.n	ba7c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba7a6:	1d39      	adds	r1, r7, #4
   ba7a8:	4628      	mov	r0, r5
   ba7aa:	f7ff fed3 	bl	ba554 <_ZN5Print5writeEPKc>
   ba7ae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba7b0:	b11e      	cbz	r6, ba7ba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba7b2:	4628      	mov	r0, r5
   ba7b4:	f7ff fee7 	bl	ba586 <_ZN5Print7printlnEv>
   ba7b8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba7ba:	4620      	mov	r0, r4
   ba7bc:	3718      	adds	r7, #24
   ba7be:	46bd      	mov	sp, r7
   ba7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba7c4:	f100 0308 	add.w	r3, r0, #8
   ba7c8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba7cc:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba7ce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba7d2:	4622      	mov	r2, r4
   ba7d4:	1c41      	adds	r1, r0, #1
   ba7d6:	683b      	ldr	r3, [r7, #0]
   ba7d8:	4668      	mov	r0, sp
   ba7da:	f7fe f881 	bl	b88e0 <vsnprintf>
  return write(str);
   ba7de:	4669      	mov	r1, sp
   ba7e0:	4628      	mov	r0, r5
   ba7e2:	f7ff feb7 	bl	ba554 <_ZN5Print5writeEPKc>
   ba7e6:	4604      	mov	r4, r0
   ba7e8:	46c5      	mov	sp, r8
   ba7ea:	e7e1      	b.n	ba7b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba7ec <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   ba7ec:	b510      	push	{r4, lr}
  if (0 == max) {
   ba7ee:	4604      	mov	r4, r0
   ba7f0:	b128      	cbz	r0, ba7fe <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   ba7f2:	f001 fc5f 	bl	bc0b4 <rand>
   ba7f6:	fb90 f3f4 	sdiv	r3, r0, r4
   ba7fa:	fb03 0414 	mls	r4, r3, r4, r0
}
   ba7fe:	4620      	mov	r0, r4
   ba800:	bd10      	pop	{r4, pc}

000ba802 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   ba802:	4288      	cmp	r0, r1
{
   ba804:	b510      	push	{r4, lr}
   ba806:	4604      	mov	r4, r0
  if (min >= max) {
   ba808:	da03      	bge.n	ba812 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   ba80a:	1a08      	subs	r0, r1, r0
   ba80c:	f7ff ffee 	bl	ba7ec <_Z6randomi>
   ba810:	4404      	add	r4, r0
}
   ba812:	4620      	mov	r0, r4
   ba814:	bd10      	pop	{r4, pc}
	...

000ba818 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba818:	4b01      	ldr	r3, [pc, #4]	; (ba820 <_GLOBAL__sub_I_RGB+0x8>)
   ba81a:	2200      	movs	r2, #0
   ba81c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba81e:	4770      	bx	lr
   ba820:	2003e68c 	.word	0x2003e68c

000ba824 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba824:	2100      	movs	r1, #0
   ba826:	f7fd be67 	b.w	b84f8 <hal_spi_release>

000ba82a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba82a:	2100      	movs	r1, #0
   ba82c:	f7fd be5c 	b.w	b84e8 <hal_spi_acquire>

000ba830 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba830:	b510      	push	{r4, lr}
   ba832:	4604      	mov	r4, r0
   ba834:	4608      	mov	r0, r1
{
    _spi = spi;
   ba836:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba838:	f7fd fe36 	bl	b84a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba83c:	2300      	movs	r3, #0
   ba83e:	6063      	str	r3, [r4, #4]
}
   ba840:	4620      	mov	r0, r4
   ba842:	bd10      	pop	{r4, pc}

000ba844 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba844:	b513      	push	{r0, r1, r4, lr}
   ba846:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba848:	7800      	ldrb	r0, [r0, #0]
   ba84a:	f7ff ffee 	bl	ba82a <_ZN8SPIClass4lockEv.isra.0>
   ba84e:	b958      	cbnz	r0, ba868 <_ZN8SPIClass5beginEv+0x24>
   ba850:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba852:	9001      	str	r0, [sp, #4]
   ba854:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba858:	f7fd fe0e 	bl	b8478 <hal_spi_begin>
        unlock();
   ba85c:	9801      	ldr	r0, [sp, #4]
    }
}
   ba85e:	b002      	add	sp, #8
   ba860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba864:	f7ff bfde 	b.w	ba824 <_ZN8SPIClass6unlockEv.isra.0>
   ba868:	b002      	add	sp, #8
   ba86a:	bd10      	pop	{r4, pc}

000ba86c <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   ba86c:	b513      	push	{r0, r1, r4, lr}
   ba86e:	4604      	mov	r4, r0
    if (!lock())
   ba870:	7800      	ldrb	r0, [r0, #0]
   ba872:	f7ff ffda 	bl	ba82a <_ZN8SPIClass4lockEv.isra.0>
   ba876:	b948      	cbnz	r0, ba88c <_ZN8SPIClass3endEv+0x20>
   ba878:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   ba87a:	9001      	str	r0, [sp, #4]
   ba87c:	f7fd fe04 	bl	b8488 <hal_spi_end>
        unlock();
   ba880:	9801      	ldr	r0, [sp, #4]
    }
}
   ba882:	b002      	add	sp, #8
   ba884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba888:	f7ff bfcc 	b.w	ba824 <_ZN8SPIClass6unlockEv.isra.0>
   ba88c:	b002      	add	sp, #8
   ba88e:	bd10      	pop	{r4, pc}

000ba890 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba890:	7800      	ldrb	r0, [r0, #0]
   ba892:	f7ff bfc7 	b.w	ba824 <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba898 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba898:	0840      	lsrs	r0, r0, #1
{
   ba89a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba89c:	6018      	str	r0, [r3, #0]
   ba89e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba8a0:	6818      	ldr	r0, [r3, #0]
   ba8a2:	4288      	cmp	r0, r1
   ba8a4:	b2e5      	uxtb	r5, r4
   ba8a6:	d906      	bls.n	ba8b6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba8a8:	3401      	adds	r4, #1
   ba8aa:	2c08      	cmp	r4, #8
   ba8ac:	d002      	beq.n	ba8b4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba8ae:	0840      	lsrs	r0, r0, #1
   ba8b0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba8b2:	e7f5      	b.n	ba8a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba8b4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba8b6:	4b02      	ldr	r3, [pc, #8]	; (ba8c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba8b8:	5d5b      	ldrb	r3, [r3, r5]
   ba8ba:	7013      	strb	r3, [r2, #0]
}
   ba8bc:	bd30      	pop	{r4, r5, pc}
   ba8be:	bf00      	nop
   ba8c0:	000bd454 	.word	0x000bd454

000ba8c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba8c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba8c8:	4606      	mov	r6, r0
   ba8ca:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba8cc:	7800      	ldrb	r0, [r0, #0]
{
   ba8ce:	460c      	mov	r4, r1
    CHECK(lock());
   ba8d0:	f7ff ffab 	bl	ba82a <_ZN8SPIClass4lockEv.isra.0>
   ba8d4:	2800      	cmp	r0, #0
   ba8d6:	db1b      	blt.n	ba910 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba8d8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba8da:	2214      	movs	r2, #20
   ba8dc:	2100      	movs	r1, #0
   ba8de:	a809      	add	r0, sp, #36	; 0x24
   ba8e0:	f001 fbb2 	bl	bc048 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba8e4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba8e6:	2200      	movs	r2, #0
   ba8e8:	a909      	add	r1, sp, #36	; 0x24
   ba8ea:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba8ec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba8f0:	f7fd fdea 	bl	b84c8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba8f4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba8f8:	b113      	cbz	r3, ba900 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba8fa:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba8fe:	b155      	cbz	r5, ba916 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba900:	2700      	movs	r7, #0
   ba902:	46b9      	mov	r9, r7
   ba904:	46b8      	mov	r8, r7
   ba906:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba908:	7923      	ldrb	r3, [r4, #4]
   ba90a:	b15d      	cbz	r5, ba924 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba90c:	b1c3      	cbz	r3, ba940 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba90e:	2000      	movs	r0, #0
}
   ba910:	b00f      	add	sp, #60	; 0x3c
   ba912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba916:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba91a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba91e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba922:	e7f1      	b.n	ba908 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba924:	2b00      	cmp	r3, #0
   ba926:	d135      	bne.n	ba994 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba928:	68a3      	ldr	r3, [r4, #8]
   ba92a:	4543      	cmp	r3, r8
   ba92c:	d108      	bne.n	ba940 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba92e:	f88d 9020 	strb.w	r9, [sp, #32]
   ba932:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba936:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba93a:	89a3      	ldrh	r3, [r4, #12]
   ba93c:	429a      	cmp	r2, r3
   ba93e:	d0e6      	beq.n	ba90e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba940:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba942:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba944:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba948:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba94a:	ab04      	add	r3, sp, #16
   ba94c:	f10d 020f 	add.w	r2, sp, #15
   ba950:	f7ff ffa2 	bl	ba898 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba954:	7921      	ldrb	r1, [r4, #4]
   ba956:	b985      	cbnz	r5, ba97a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba958:	b989      	cbnz	r1, ba97e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba95a:	68a3      	ldr	r3, [r4, #8]
   ba95c:	4543      	cmp	r3, r8
   ba95e:	d30e      	bcc.n	ba97e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba960:	f88d 9020 	strb.w	r9, [sp, #32]
   ba964:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba968:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba96c:	89a3      	ldrh	r3, [r4, #12]
   ba96e:	429a      	cmp	r2, r3
   ba970:	d105      	bne.n	ba97e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba972:	9b04      	ldr	r3, [sp, #16]
   ba974:	4543      	cmp	r3, r8
   ba976:	d102      	bne.n	ba97e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba978:	e7c9      	b.n	ba90e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba97a:	2900      	cmp	r1, #0
   ba97c:	d1f9      	bne.n	ba972 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba97e:	2300      	movs	r3, #0
   ba980:	9301      	str	r3, [sp, #4]
   ba982:	7b63      	ldrb	r3, [r4, #13]
   ba984:	9300      	str	r3, [sp, #0]
   ba986:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba98a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba98c:	7830      	ldrb	r0, [r6, #0]
   ba98e:	f7fd fda3 	bl	b84d8 <hal_spi_set_settings>
   ba992:	e7bc      	b.n	ba90e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba994:	e9cd 5500 	strd	r5, r5, [sp]
   ba998:	462b      	mov	r3, r5
   ba99a:	462a      	mov	r2, r5
   ba99c:	2101      	movs	r1, #1
   ba99e:	e7f5      	b.n	ba98c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba9a0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba9a0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba9a2:	7800      	ldrb	r0, [r0, #0]
   ba9a4:	f7fd fd78 	bl	b8498 <hal_spi_transfer>
}
   ba9a8:	b2c0      	uxtb	r0, r0
   ba9aa:	bd08      	pop	{r3, pc}

000ba9ac <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   ba9ac:	4770      	bx	lr

000ba9ae <_ZN8SPIClass15detachInterruptEv>:
   ba9ae:	4770      	bx	lr

000ba9b0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba9b0:	b510      	push	{r4, lr}
   ba9b2:	4604      	mov	r4, r0
{
	free(buffer);
   ba9b4:	6800      	ldr	r0, [r0, #0]
   ba9b6:	f7fd ff73 	bl	b88a0 <free>
}
   ba9ba:	4620      	mov	r0, r4
   ba9bc:	bd10      	pop	{r4, pc}

000ba9be <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba9be:	b510      	push	{r4, lr}
   ba9c0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba9c2:	6800      	ldr	r0, [r0, #0]
   ba9c4:	b108      	cbz	r0, ba9ca <_ZN6String10invalidateEv+0xc>
   ba9c6:	f7fd ff6b 	bl	b88a0 <free>
	buffer = NULL;
   ba9ca:	2300      	movs	r3, #0
	capacity = len = 0;
   ba9cc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba9d0:	6023      	str	r3, [r4, #0]
}
   ba9d2:	bd10      	pop	{r4, pc}

000ba9d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba9d4:	b538      	push	{r3, r4, r5, lr}
   ba9d6:	4604      	mov	r4, r0
   ba9d8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba9da:	6800      	ldr	r0, [r0, #0]
   ba9dc:	3101      	adds	r1, #1
   ba9de:	f7fd ff67 	bl	b88b0 <realloc>
	if (newbuffer) {
   ba9e2:	b110      	cbz	r0, ba9ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba9e4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba9e8:	2001      	movs	r0, #1
	}
	return 0;
}
   ba9ea:	bd38      	pop	{r3, r4, r5, pc}

000ba9ec <_ZN6String7reserveEj>:
{
   ba9ec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba9ee:	6803      	ldr	r3, [r0, #0]
{
   ba9f0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba9f2:	b123      	cbz	r3, ba9fe <_ZN6String7reserveEj+0x12>
   ba9f4:	6843      	ldr	r3, [r0, #4]
   ba9f6:	428b      	cmp	r3, r1
   ba9f8:	d301      	bcc.n	ba9fe <_ZN6String7reserveEj+0x12>
   ba9fa:	2001      	movs	r0, #1
}
   ba9fc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba9fe:	4620      	mov	r0, r4
   baa00:	f7ff ffe8 	bl	ba9d4 <_ZN6String12changeBufferEj>
   baa04:	2800      	cmp	r0, #0
   baa06:	d0f9      	beq.n	ba9fc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   baa08:	68a3      	ldr	r3, [r4, #8]
   baa0a:	2b00      	cmp	r3, #0
   baa0c:	d1f5      	bne.n	ba9fa <_ZN6String7reserveEj+0xe>
   baa0e:	6822      	ldr	r2, [r4, #0]
   baa10:	7013      	strb	r3, [r2, #0]
   baa12:	e7f2      	b.n	ba9fa <_ZN6String7reserveEj+0xe>

000baa14 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   baa14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baa16:	460d      	mov	r5, r1
	if (!reserve(length)) {
   baa18:	4611      	mov	r1, r2
   baa1a:	9201      	str	r2, [sp, #4]
{
   baa1c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   baa1e:	f7ff ffe5 	bl	ba9ec <_ZN6String7reserveEj>
   baa22:	9a01      	ldr	r2, [sp, #4]
   baa24:	b928      	cbnz	r0, baa32 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   baa26:	4620      	mov	r0, r4
   baa28:	f7ff ffc9 	bl	ba9be <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   baa2c:	4620      	mov	r0, r4
   baa2e:	b003      	add	sp, #12
   baa30:	bd30      	pop	{r4, r5, pc}
	len = length;
   baa32:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   baa34:	4629      	mov	r1, r5
   baa36:	6820      	ldr	r0, [r4, #0]
   baa38:	f001 fade 	bl	bbff8 <memcpy>
	buffer[len] = 0;
   baa3c:	6822      	ldr	r2, [r4, #0]
   baa3e:	68a3      	ldr	r3, [r4, #8]
   baa40:	2100      	movs	r1, #0
   baa42:	54d1      	strb	r1, [r2, r3]
	return *this;
   baa44:	e7f2      	b.n	baa2c <_ZN6String4copyEPKcj+0x18>

000baa46 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   baa46:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   baa48:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   baa4a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   baa4e:	4604      	mov	r4, r0
	len = 0;
   baa50:	6083      	str	r3, [r0, #8]
	flags = 0;
   baa52:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   baa54:	b141      	cbz	r1, baa68 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   baa56:	4608      	mov	r0, r1
   baa58:	9101      	str	r1, [sp, #4]
   baa5a:	f001 fb92 	bl	bc182 <strlen>
   baa5e:	9901      	ldr	r1, [sp, #4]
   baa60:	4602      	mov	r2, r0
   baa62:	4620      	mov	r0, r4
   baa64:	f7ff ffd6 	bl	baa14 <_ZN6String4copyEPKcj>
}
   baa68:	4620      	mov	r0, r4
   baa6a:	b002      	add	sp, #8
   baa6c:	bd10      	pop	{r4, pc}

000baa6e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   baa6e:	b538      	push	{r3, r4, r5, lr}
   baa70:	4605      	mov	r5, r0
	if (buffer) {
   baa72:	6800      	ldr	r0, [r0, #0]
{
   baa74:	460c      	mov	r4, r1
	if (buffer) {
   baa76:	b168      	cbz	r0, baa94 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   baa78:	686a      	ldr	r2, [r5, #4]
   baa7a:	688b      	ldr	r3, [r1, #8]
   baa7c:	429a      	cmp	r2, r3
   baa7e:	d307      	bcc.n	baa90 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   baa80:	6809      	ldr	r1, [r1, #0]
   baa82:	f001 fb76 	bl	bc172 <strcpy>
			len = rhs.len;
   baa86:	68a3      	ldr	r3, [r4, #8]
   baa88:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   baa8a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   baa8c:	60a3      	str	r3, [r4, #8]
}
   baa8e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   baa90:	f7fd ff06 	bl	b88a0 <free>
	buffer = rhs.buffer;
   baa94:	6823      	ldr	r3, [r4, #0]
   baa96:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   baa98:	6863      	ldr	r3, [r4, #4]
   baa9a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   baa9c:	68a3      	ldr	r3, [r4, #8]
   baa9e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   baaa0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   baaa2:	e9c4 3300 	strd	r3, r3, [r4]
   baaa6:	e7f1      	b.n	baa8c <_ZN6String4moveERS_+0x1e>

000baaa8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   baaa8:	b510      	push	{r4, lr}
	buffer = NULL;
   baaaa:	2300      	movs	r3, #0
	capacity = 0;
   baaac:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   baab0:	4604      	mov	r4, r0
	len = 0;
   baab2:	6083      	str	r3, [r0, #8]
	flags = 0;
   baab4:	7303      	strb	r3, [r0, #12]
	move(rval);
   baab6:	f7ff ffda 	bl	baa6e <_ZN6String4moveERS_>
}
   baaba:	4620      	mov	r0, r4
   baabc:	bd10      	pop	{r4, pc}

000baabe <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   baabe:	4288      	cmp	r0, r1
{
   baac0:	b510      	push	{r4, lr}
   baac2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   baac4:	d005      	beq.n	baad2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   baac6:	680b      	ldr	r3, [r1, #0]
   baac8:	b12b      	cbz	r3, baad6 <_ZN6StringaSERKS_+0x18>
   baaca:	688a      	ldr	r2, [r1, #8]
   baacc:	4619      	mov	r1, r3
   baace:	f7ff ffa1 	bl	baa14 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   baad2:	4620      	mov	r0, r4
   baad4:	bd10      	pop	{r4, pc}
	else invalidate();
   baad6:	f7ff ff72 	bl	ba9be <_ZN6String10invalidateEv>
   baada:	e7fa      	b.n	baad2 <_ZN6StringaSERKS_+0x14>

000baadc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   baadc:	b510      	push	{r4, lr}
	buffer = NULL;
   baade:	2300      	movs	r3, #0
String::String(const String &value)
   baae0:	4604      	mov	r4, r0
	capacity = 0;
   baae2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   baae6:	6083      	str	r3, [r0, #8]
	flags = 0;
   baae8:	7303      	strb	r3, [r0, #12]
	*this = value;
   baaea:	f7ff ffe8 	bl	baabe <_ZN6StringaSERKS_>
}
   baaee:	4620      	mov	r0, r4
   baaf0:	bd10      	pop	{r4, pc}

000baaf2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   baaf2:	b558      	push	{r3, r4, r6, lr}
   baaf4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   baaf6:	b12a      	cbz	r2, bab04 <_ZNK6String8getBytesEPhjj+0x12>
   baaf8:	b121      	cbz	r1, bab04 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   baafa:	6884      	ldr	r4, [r0, #8]
   baafc:	42a3      	cmp	r3, r4
   baafe:	d302      	bcc.n	bab06 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bab00:	2300      	movs	r3, #0
   bab02:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bab04:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bab06:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bab08:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bab0a:	6801      	ldr	r1, [r0, #0]
   bab0c:	4294      	cmp	r4, r2
   bab0e:	bf28      	it	cs
   bab10:	4614      	movcs	r4, r2
   bab12:	4419      	add	r1, r3
   bab14:	4622      	mov	r2, r4
   bab16:	4630      	mov	r0, r6
   bab18:	f001 fb4f 	bl	bc1ba <strncpy>
	buf[n] = 0;
   bab1c:	2300      	movs	r3, #0
   bab1e:	5533      	strb	r3, [r6, r4]
   bab20:	e7f0      	b.n	bab04 <_ZNK6String8getBytesEPhjj+0x12>
	...

000bab24 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bab24:	b40e      	push	{r1, r2, r3}
   bab26:	b570      	push	{r4, r5, r6, lr}
   bab28:	b087      	sub	sp, #28
   bab2a:	ad0b      	add	r5, sp, #44	; 0x2c
   bab2c:	4604      	mov	r4, r0
   bab2e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bab32:	9201      	str	r2, [sp, #4]
   bab34:	462b      	mov	r3, r5
   bab36:	2105      	movs	r1, #5
   bab38:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bab3a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bab3c:	f7fd fed0 	bl	b88e0 <vsnprintf>
    va_end(marker);

    String result;
   bab40:	490b      	ldr	r1, [pc, #44]	; (bab70 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bab42:	4606      	mov	r6, r0
    String result;
   bab44:	4620      	mov	r0, r4
   bab46:	f7ff ff7e 	bl	baa46 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bab4a:	4631      	mov	r1, r6
   bab4c:	4620      	mov	r0, r4
   bab4e:	f7ff ff4d 	bl	ba9ec <_ZN6String7reserveEj>
    if (result.buffer) {
   bab52:	6820      	ldr	r0, [r4, #0]
   bab54:	b130      	cbz	r0, bab64 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bab56:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bab58:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bab5a:	462b      	mov	r3, r5
   bab5c:	1c71      	adds	r1, r6, #1
   bab5e:	f7fd febf 	bl	b88e0 <vsnprintf>
        va_end(marker);
        result.len = n;
   bab62:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bab64:	4620      	mov	r0, r4
   bab66:	b007      	add	sp, #28
   bab68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bab6c:	b003      	add	sp, #12
   bab6e:	4770      	bx	lr
   bab70:	000bd37d 	.word	0x000bd37d

000bab74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bab74:	b510      	push	{r4, lr}
   bab76:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bab78:	6800      	ldr	r0, [r0, #0]
   bab7a:	b118      	cbz	r0, bab84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bab7c:	f7fd fe90 	bl	b88a0 <free>
            wakeupSource_ = nullptr;
   bab80:	2300      	movs	r3, #0
   bab82:	6023      	str	r3, [r4, #0]
        }
    }
   bab84:	bd10      	pop	{r4, pc}

000bab86 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bab86:	b538      	push	{r3, r4, r5, lr}
   bab88:	460c      	mov	r4, r1
   bab8a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bab8c:	f7ff fff2 	bl	bab74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bab90:	b154      	cbz	r4, baba8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bab92:	8820      	ldrh	r0, [r4, #0]
   bab94:	f7fd fe7c 	bl	b8890 <malloc>
   bab98:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bab9a:	b128      	cbz	r0, baba8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bab9c:	8822      	ldrh	r2, [r4, #0]
   bab9e:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   baba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   baba4:	f001 ba28 	b.w	bbff8 <memcpy>
    }
   baba8:	bd38      	pop	{r3, r4, r5, pc}

000babaa <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   babaa:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   babac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   babb0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   babb2:	f8d1 3006 	ldr.w	r3, [r1, #6]
   babb6:	f8c0 3006 	str.w	r3, [r0, #6]
   babba:	894b      	ldrh	r3, [r1, #10]
   babbc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   babbe:	460c      	mov	r4, r1
   babc0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   babc2:	f7ff ffd7 	bl	bab74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   babc6:	6823      	ldr	r3, [r4, #0]
   babc8:	b113      	cbz	r3, babd0 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   babca:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   babcc:	2300      	movs	r3, #0
   babce:	6023      	str	r3, [r4, #0]
    }
   babd0:	bd38      	pop	{r3, r4, r5, pc}

000babd2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   babd2:	b507      	push	{r0, r1, r2, lr}
   babd4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   babd6:	2100      	movs	r1, #0
{
   babd8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   babda:	9100      	str	r1, [sp, #0]
   babdc:	2001      	movs	r0, #1
   babde:	218c      	movs	r1, #140	; 0x8c
   babe0:	f7fd fdbc 	bl	b875c <system_reset>
}
   babe4:	b003      	add	sp, #12
   babe6:	f85d fb04 	ldr.w	pc, [sp], #4

000babea <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   babea:	4601      	mov	r1, r0
    reset(0, flags);
   babec:	2000      	movs	r0, #0
   babee:	f7ff bff0 	b.w	babd2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000babf2 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   babf2:	2000      	movs	r0, #0
   babf4:	f7ff bff9 	b.w	babea <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000babf8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   babf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   babfa:	4d2b      	ldr	r5, [pc, #172]	; (baca8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   babfc:	7d0b      	ldrb	r3, [r1, #20]
   babfe:	4604      	mov	r4, r0
   bac00:	b08b      	sub	sp, #44	; 0x2c
   bac02:	4608      	mov	r0, r1
   bac04:	1daf      	adds	r7, r5, #6
   bac06:	2b00      	cmp	r3, #0
   bac08:	d036      	beq.n	bac78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bac0a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bac0c:	791b      	ldrb	r3, [r3, #4]
   bac0e:	2b00      	cmp	r3, #0
   bac10:	d032      	beq.n	bac78 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bac12:	4b26      	ldr	r3, [pc, #152]	; (bacac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bac14:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bac16:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bac18:	a902      	add	r1, sp, #8
   bac1a:	3004      	adds	r0, #4
   bac1c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bac20:	f7fd fd92 	bl	b8748 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bac24:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bac28:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bac2c:	b200      	sxth	r0, r0
   bac2e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bac32:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bac36:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bac38:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bac3a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bac3c:	4628      	mov	r0, r5
   bac3e:	f7ff ffa2 	bl	bab86 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bac42:	a802      	add	r0, sp, #8
   bac44:	f7ff ff96 	bl	bab74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bac48:	2300      	movs	r3, #0
   bac4a:	6023      	str	r3, [r4, #0]
   bac4c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bac4e:	71a3      	strb	r3, [r4, #6]
   bac50:	8123      	strh	r3, [r4, #8]
   bac52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bac56:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bac58:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bac5c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bac5e:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bac62:	f8c4 3006 	str.w	r3, [r4, #6]
   bac66:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bac68:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bac6a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bac6c:	4620      	mov	r0, r4
   bac6e:	f7ff ff8a 	bl	bab86 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bac72:	4620      	mov	r0, r4
   bac74:	b00b      	add	sp, #44	; 0x2c
   bac76:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bac78:	2600      	movs	r6, #0
   bac7a:	2320      	movs	r3, #32
   bac7c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bac80:	4b0b      	ldr	r3, [pc, #44]	; (bacb0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bac82:	9300      	str	r3, [sp, #0]
   bac84:	aa02      	add	r2, sp, #8
   bac86:	4633      	mov	r3, r6
   bac88:	490a      	ldr	r1, [pc, #40]	; (bacb4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bac8a:	2032      	movs	r0, #50	; 0x32
   bac8c:	f7fd fcdc 	bl	b8648 <log_message>
            : wakeupSource_(nullptr),
   bac90:	4b06      	ldr	r3, [pc, #24]	; (bacac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bac92:	4805      	ldr	r0, [pc, #20]	; (baca8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bac94:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bac96:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bac9a:	a902      	add	r1, sp, #8
   bac9c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   baca0:	f7ff ff83 	bl	babaa <_ZN17SystemSleepResultaSEOS_.isra.0>
   baca4:	e7cd      	b.n	bac42 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   baca6:	bf00      	nop
   baca8:	2003e69c 	.word	0x2003e69c
   bacac:	ffff0000 	.word	0xffff0000
   bacb0:	000bd463 	.word	0x000bd463
   bacb4:	000bd45c 	.word	0x000bd45c

000bacb8 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bacb8:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bacba:	2420      	movs	r4, #32
{
   bacbc:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bacbe:	4622      	mov	r2, r4
   bacc0:	2100      	movs	r1, #0
   bacc2:	4668      	mov	r0, sp
   bacc4:	f001 f9c0 	bl	bc048 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bacc8:	2100      	movs	r1, #0
   bacca:	4668      	mov	r0, sp
    info.size = sizeof(info);
   baccc:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bacd0:	f7fd fac2 	bl	b8258 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bacd4:	9801      	ldr	r0, [sp, #4]
   bacd6:	b008      	add	sp, #32
   bacd8:	bd10      	pop	{r4, pc}
	...

000bacdc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bacdc:	4b05      	ldr	r3, [pc, #20]	; (bacf4 <_GLOBAL__sub_I_System+0x18>)
   bacde:	2202      	movs	r2, #2
   bace0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bace2:	4b05      	ldr	r3, [pc, #20]	; (bacf8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bace4:	4a05      	ldr	r2, [pc, #20]	; (bacfc <_GLOBAL__sub_I_System+0x20>)
   bace6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bace8:	2000      	movs	r0, #0
   bacea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bacee:	f7fd bcdd 	b.w	b86ac <set_system_mode>
   bacf2:	bf00      	nop
   bacf4:	2003e6a8 	.word	0x2003e6a8
   bacf8:	2003e69c 	.word	0x2003e69c
   bacfc:	ffff0000 	.word	0xffff0000

000bad00 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bad04:	4a15      	ldr	r2, [pc, #84]	; (bad5c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bad06:	f8df 8060 	ldr.w	r8, [pc, #96]	; bad68 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bad0a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bad0e:	1980      	adds	r0, r0, r6
   bad10:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bad14:	4b12      	ldr	r3, [pc, #72]	; (bad60 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bad16:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bad1a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bad1e:	1986      	adds	r6, r0, r6
   bad20:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bad24:	42bb      	cmp	r3, r7
   bad26:	bf08      	it	eq
   bad28:	42b2      	cmpeq	r2, r6
{
   bad2a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bad2c:	d013      	beq.n	bad56 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bad2e:	a903      	add	r1, sp, #12
   bad30:	4668      	mov	r0, sp
   bad32:	e9cd 6700 	strd	r6, r7, [sp]
   bad36:	f7fd fe03 	bl	b8940 <localtime_r>
	calendar_time.tm_year += 1900;
   bad3a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bad3c:	4d09      	ldr	r5, [pc, #36]	; (bad64 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bad3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bad42:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bad44:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bad46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bad48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bad4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bad4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bad4e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bad52:	6823      	ldr	r3, [r4, #0]
   bad54:	602b      	str	r3, [r5, #0]
    }
}
   bad56:	b00c      	add	sp, #48	; 0x30
   bad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bad5c:	2003e6e0 	.word	0x2003e6e0
   bad60:	2003e6d8 	.word	0x2003e6d8
   bad64:	2003e6b4 	.word	0x2003e6b4
   bad68:	2003e6e8 	.word	0x2003e6e8

000bad6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bad6c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bad6e:	2000      	movs	r0, #0
   bad70:	f7fd fd16 	bl	b87a0 <spark_sync_time_pending>
   bad74:	b128      	cbz	r0, bad82 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bad76:	f7fd fd03 	bl	b8780 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bad7a:	f080 0001 	eor.w	r0, r0, #1
   bad7e:	b2c0      	uxtb	r0, r0
    }
   bad80:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bad82:	2001      	movs	r0, #1
   bad84:	e7fc      	b.n	bad80 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bad88 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bad88:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bad8a:	f7ff ffb9 	bl	bad00 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bad8e:	4b01      	ldr	r3, [pc, #4]	; (bad94 <_ZN9TimeClass3dayEx+0xc>)
   bad90:	68d8      	ldr	r0, [r3, #12]
   bad92:	bd08      	pop	{r3, pc}
   bad94:	2003e6b4 	.word	0x2003e6b4

000bad98 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bad98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bad9a:	4602      	mov	r2, r0
   bad9c:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bad9e:	4668      	mov	r0, sp
    struct timeval tv = {
   bada0:	2100      	movs	r1, #0
    };
   bada2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bada6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   badaa:	f7fd fa95 	bl	b82d8 <hal_rtc_set_time>
   badae:	4602      	mov	r2, r0
   badb0:	b910      	cbnz	r0, badb8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   badb2:	4601      	mov	r1, r0
   badb4:	f7fd fca2 	bl	b86fc <system_notify_time_changed>
    }
}
   badb8:	b005      	add	sp, #20
   badba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000badc0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   badc0:	b530      	push	{r4, r5, lr}
   badc2:	b093      	sub	sp, #76	; 0x4c
   badc4:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   badc8:	4b19      	ldr	r3, [pc, #100]	; (bae30 <_ZN9TimeClass7timeStrEx+0x70>)
{
   badca:	4604      	mov	r4, r0
    t += time_zone_cache;
   badcc:	e9d3 1000 	ldrd	r1, r0, [r3]
   badd0:	9b01      	ldr	r3, [sp, #4]
   badd2:	1852      	adds	r2, r2, r1
   badd4:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   badd8:	4816      	ldr	r0, [pc, #88]	; (bae34 <_ZN9TimeClass7timeStrEx+0x74>)
   badda:	e9d0 1000 	ldrd	r1, r0, [r0]
   badde:	1852      	adds	r2, r2, r1
   bade0:	eb43 0300 	adc.w	r3, r3, r0
   bade4:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bade8:	2224      	movs	r2, #36	; 0x24
   badea:	eb0d 0002 	add.w	r0, sp, r2
   badee:	2100      	movs	r1, #0
   badf0:	f001 f92a 	bl	bc048 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   badf4:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   badf6:	a909      	add	r1, sp, #36	; 0x24
   badf8:	4668      	mov	r0, sp
   badfa:	f7fd fda1 	bl	b8940 <localtime_r>
    char ascstr[26] = {};
   badfe:	2216      	movs	r2, #22
   bae00:	4629      	mov	r1, r5
   bae02:	a803      	add	r0, sp, #12
   bae04:	9502      	str	r5, [sp, #8]
   bae06:	f001 f91f 	bl	bc048 <memset>
    asctime_r(&calendar_time, ascstr);
   bae0a:	a902      	add	r1, sp, #8
   bae0c:	a809      	add	r0, sp, #36	; 0x24
   bae0e:	f001 f8a1 	bl	bbf54 <asctime_r>
    int len = strlen(ascstr);
   bae12:	a802      	add	r0, sp, #8
   bae14:	f001 f9b5 	bl	bc182 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bae18:	ab12      	add	r3, sp, #72	; 0x48
   bae1a:	4418      	add	r0, r3
    return String(ascstr);
   bae1c:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bae1e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bae22:	4620      	mov	r0, r4
   bae24:	f7ff fe0f 	bl	baa46 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bae28:	4620      	mov	r0, r4
   bae2a:	b013      	add	sp, #76	; 0x4c
   bae2c:	bd30      	pop	{r4, r5, pc}
   bae2e:	bf00      	nop
   bae30:	2003e6e0 	.word	0x2003e6e0
   bae34:	2003e6d8 	.word	0x2003e6d8

000bae38 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bae3c:	b0a4      	sub	sp, #144	; 0x90
   bae3e:	4607      	mov	r7, r0
   bae40:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bae42:	a814      	add	r0, sp, #80	; 0x50
{
   bae44:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bae46:	223f      	movs	r2, #63	; 0x3f
{
   bae48:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bae4a:	f001 f9b6 	bl	bc1ba <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bae4e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bae50:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bae52:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bae56:	f001 f994 	bl	bc182 <strlen>
   bae5a:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bae5c:	bb4c      	cbnz	r4, baeb2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bae5e:	4929      	ldr	r1, [pc, #164]	; (baf04 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bae60:	a803      	add	r0, sp, #12
   bae62:	f001 f986 	bl	bc172 <strcpy>
   bae66:	ac14      	add	r4, sp, #80	; 0x50
{
   bae68:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bae6a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bae6e:	45b1      	cmp	r9, r6
   bae70:	d934      	bls.n	baedc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bae72:	7823      	ldrb	r3, [r4, #0]
   bae74:	2b25      	cmp	r3, #37	; 0x25
   bae76:	f106 0a01 	add.w	sl, r6, #1
   bae7a:	d117      	bne.n	baeac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bae7c:	7863      	ldrb	r3, [r4, #1]
   bae7e:	2b7a      	cmp	r3, #122	; 0x7a
   bae80:	d114      	bne.n	baeac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bae82:	a803      	add	r0, sp, #12
   bae84:	f001 f97d 	bl	bc182 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bae88:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bae8a:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bae8c:	1830      	adds	r0, r6, r0
   bae8e:	4418      	add	r0, r3
   bae90:	eba9 0206 	sub.w	r2, r9, r6
   bae94:	1ca1      	adds	r1, r4, #2
   bae96:	f001 f8af 	bl	bbff8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bae9a:	462a      	mov	r2, r5
   bae9c:	a903      	add	r1, sp, #12
   bae9e:	4620      	mov	r0, r4
   baea0:	f001 f8aa 	bl	bbff8 <memcpy>
            len = strlen(format_str);
   baea4:	a814      	add	r0, sp, #80	; 0x50
   baea6:	f001 f96c 	bl	bc182 <strlen>
   baeaa:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   baeac:	3401      	adds	r4, #1
   baeae:	4656      	mov	r6, sl
   baeb0:	e7db      	b.n	bae6a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   baeb2:	233c      	movs	r3, #60	; 0x3c
   baeb4:	fb94 f2f3 	sdiv	r2, r4, r3
   baeb8:	2a00      	cmp	r2, #0
   baeba:	bfb8      	it	lt
   baebc:	4252      	neglt	r2, r2
   baebe:	fbb2 f1f3 	udiv	r1, r2, r3
   baec2:	fb03 2211 	mls	r2, r3, r1, r2
   baec6:	9200      	str	r2, [sp, #0]
   baec8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   baecc:	4a0e      	ldr	r2, [pc, #56]	; (baf08 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   baece:	fb94 f3f3 	sdiv	r3, r4, r3
   baed2:	2110      	movs	r1, #16
   baed4:	a803      	add	r0, sp, #12
   baed6:	f7fd fcfb 	bl	b88d0 <snprintf>
   baeda:	e7c4      	b.n	bae66 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   baedc:	2100      	movs	r1, #0
   baede:	222e      	movs	r2, #46	; 0x2e
   baee0:	a808      	add	r0, sp, #32
   baee2:	9107      	str	r1, [sp, #28]
   baee4:	f001 f8b0 	bl	bc048 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   baee8:	4643      	mov	r3, r8
   baeea:	aa14      	add	r2, sp, #80	; 0x50
   baeec:	2132      	movs	r1, #50	; 0x32
   baeee:	a807      	add	r0, sp, #28
   baef0:	f7fd fd1e 	bl	b8930 <strftime>
    return String(buf);
   baef4:	a907      	add	r1, sp, #28
   baef6:	4638      	mov	r0, r7
   baef8:	f7ff fda5 	bl	baa46 <_ZN6StringC1EPK19__FlashStringHelper>
}
   baefc:	4638      	mov	r0, r7
   baefe:	b024      	add	sp, #144	; 0x90
   baf00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   baf04:	000bd48a 	.word	0x000bd48a
   baf08:	000bd48c 	.word	0x000bd48c

000baf0c <_ZN9TimeClass6formatExPKc>:
{
   baf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   baf0e:	b08d      	sub	sp, #52	; 0x34
   baf10:	e9cd 2300 	strd	r2, r3, [sp]
   baf14:	9d12      	ldr	r5, [sp, #72]	; 0x48
   baf16:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   baf18:	b915      	cbnz	r5, baf20 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   baf1a:	4b19      	ldr	r3, [pc, #100]	; (baf80 <_ZN9TimeClass6formatExPKc+0x74>)
   baf1c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   baf1e:	b12d      	cbz	r5, baf2c <_ZN9TimeClass6formatExPKc+0x20>
   baf20:	4b18      	ldr	r3, [pc, #96]	; (baf84 <_ZN9TimeClass6formatExPKc+0x78>)
   baf22:	4628      	mov	r0, r5
   baf24:	6819      	ldr	r1, [r3, #0]
   baf26:	f001 f91a 	bl	bc15e <strcmp>
   baf2a:	b938      	cbnz	r0, baf3c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   baf2c:	e9dd 2300 	ldrd	r2, r3, [sp]
   baf30:	4620      	mov	r0, r4
   baf32:	f7ff ff45 	bl	badc0 <_ZN9TimeClass7timeStrEx>
}
   baf36:	4620      	mov	r0, r4
   baf38:	b00d      	add	sp, #52	; 0x34
   baf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   baf3c:	4e12      	ldr	r6, [pc, #72]	; (baf88 <_ZN9TimeClass6formatExPKc+0x7c>)
   baf3e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   baf40:	4f12      	ldr	r7, [pc, #72]	; (baf8c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   baf42:	e9d6 3200 	ldrd	r3, r2, [r6]
   baf46:	185b      	adds	r3, r3, r1
   baf48:	9901      	ldr	r1, [sp, #4]
   baf4a:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   baf4e:	e9d7 0100 	ldrd	r0, r1, [r7]
   baf52:	181b      	adds	r3, r3, r0
   baf54:	eb42 0201 	adc.w	r2, r2, r1
   baf58:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   baf5c:	2100      	movs	r1, #0
   baf5e:	2224      	movs	r2, #36	; 0x24
   baf60:	a803      	add	r0, sp, #12
   baf62:	f001 f871 	bl	bc048 <memset>
    localtime_r(&t, &calendar_time);
   baf66:	a903      	add	r1, sp, #12
   baf68:	4668      	mov	r0, sp
   baf6a:	f7fd fce9 	bl	b8940 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   baf6e:	6832      	ldr	r2, [r6, #0]
   baf70:	683b      	ldr	r3, [r7, #0]
   baf72:	a903      	add	r1, sp, #12
   baf74:	4413      	add	r3, r2
   baf76:	4620      	mov	r0, r4
   baf78:	462a      	mov	r2, r5
   baf7a:	f7ff ff5d 	bl	bae38 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   baf7e:	e7da      	b.n	baf36 <_ZN9TimeClass6formatExPKc+0x2a>
   baf80:	2003e6b0 	.word	0x2003e6b0
   baf84:	2003decc 	.word	0x2003decc
   baf88:	2003e6e0 	.word	0x2003e6e0
   baf8c:	2003e6d8 	.word	0x2003e6d8

000baf90 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   baf90:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   baf92:	2000      	movs	r0, #0
   baf94:	f7fd f988 	bl	b82a8 <hal_rtc_time_is_valid>
    if (rtcstate)
   baf98:	4604      	mov	r4, r0
   baf9a:	b9a0      	cbnz	r0, bafc6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   baf9c:	f7fd fb7e 	bl	b869c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bafa0:	2801      	cmp	r0, #1
   bafa2:	d110      	bne.n	bafc6 <_ZN9TimeClass7isValidEv+0x36>
   bafa4:	4620      	mov	r0, r4
   bafa6:	f7fd fba1 	bl	b86ec <system_thread_get_state>
   bafaa:	b960      	cbnz	r0, bafc6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bafac:	f7ff fede 	bl	bad6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bafb0:	b910      	cbnz	r0, bafb8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bafb2:	f7fd fbdd 	bl	b8770 <spark_process>
        while (_while() && !_condition()) {
   bafb6:	e7f9      	b.n	bafac <_ZN9TimeClass7isValidEv+0x1c>
   bafb8:	f7ff fed8 	bl	bad6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bafbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bafc0:	2000      	movs	r0, #0
   bafc2:	f7fd b971 	b.w	b82a8 <hal_rtc_time_is_valid>
}
   bafc6:	4620      	mov	r0, r4
   bafc8:	bd10      	pop	{r4, pc}

000bafca <_ZN9TimeClass3nowEv>:
{
   bafca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bafcc:	f7ff ffe0 	bl	baf90 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bafd0:	2210      	movs	r2, #16
   bafd2:	2100      	movs	r1, #0
   bafd4:	4668      	mov	r0, sp
   bafd6:	f001 f837 	bl	bc048 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bafda:	2100      	movs	r1, #0
   bafdc:	4668      	mov	r0, sp
   bafde:	f7fd f973 	bl	b82c8 <hal_rtc_get_time>
}
   bafe2:	9800      	ldr	r0, [sp, #0]
   bafe4:	b005      	add	sp, #20
   bafe6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bafec <_ZN9TimeClass3dayEv>:
{
   bafec:	b508      	push	{r3, lr}
	return day(now());
   bafee:	f7ff ffec 	bl	bafca <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baff2:	17c1      	asrs	r1, r0, #31
   baff4:	f7ff fe84 	bl	bad00 <_ZL22Refresh_UnixTime_Cachex>
}
   baff8:	4b01      	ldr	r3, [pc, #4]	; (bb000 <_ZN9TimeClass3dayEv+0x14>)
   baffa:	68d8      	ldr	r0, [r3, #12]
   baffc:	bd08      	pop	{r3, pc}
   baffe:	bf00      	nop
   bb000:	2003e6b4 	.word	0x2003e6b4

000bb004 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb004:	4b02      	ldr	r3, [pc, #8]	; (bb010 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb006:	681a      	ldr	r2, [r3, #0]
   bb008:	4b02      	ldr	r3, [pc, #8]	; (bb014 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb00a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb00c:	4770      	bx	lr
   bb00e:	bf00      	nop
   bb010:	2003decc 	.word	0x2003decc
   bb014:	2003e6b0 	.word	0x2003e6b0

000bb018 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb018:	4770      	bx	lr

000bb01a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb01a:	7441      	strb	r1, [r0, #17]
}
   bb01c:	4770      	bx	lr

000bb01e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb01e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb020:	7c00      	ldrb	r0, [r0, #16]
   bb022:	f7fd faa9 	bl	b8578 <hal_usart_available_data_for_write>
}
   bb026:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb02a:	bd08      	pop	{r3, pc}

000bb02c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb02c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb02e:	7c00      	ldrb	r0, [r0, #16]
   bb030:	f7fd fa7a 	bl	b8528 <hal_usart_available>
}
   bb034:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb038:	bd08      	pop	{r3, pc}

000bb03a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb03a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb03c:	7c00      	ldrb	r0, [r0, #16]
   bb03e:	f7fd fa83 	bl	b8548 <hal_usart_peek>
}
   bb042:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb046:	bd08      	pop	{r3, pc}

000bb048 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb048:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb04a:	7c00      	ldrb	r0, [r0, #16]
   bb04c:	f7fd fa74 	bl	b8538 <hal_usart_read>
}
   bb050:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb054:	bd08      	pop	{r3, pc}

000bb056 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb056:	7c00      	ldrb	r0, [r0, #16]
   bb058:	f7fd ba7e 	b.w	b8558 <hal_usart_flush>

000bb05c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb05e:	7c45      	ldrb	r5, [r0, #17]
{
   bb060:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb062:	b12d      	cbz	r5, bb070 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb064:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb066:	b003      	add	sp, #12
   bb068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb06c:	f7fd ba54 	b.w	b8518 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb070:	7c00      	ldrb	r0, [r0, #16]
   bb072:	9101      	str	r1, [sp, #4]
   bb074:	f7fd fa80 	bl	b8578 <hal_usart_available_data_for_write>
   bb078:	2800      	cmp	r0, #0
   bb07a:	9901      	ldr	r1, [sp, #4]
   bb07c:	dcf2      	bgt.n	bb064 <_ZN11USARTSerial5writeEh+0x8>
}
   bb07e:	4628      	mov	r0, r5
   bb080:	b003      	add	sp, #12
   bb082:	bd30      	pop	{r4, r5, pc}

000bb084 <_ZN11USARTSerialD0Ev>:
   bb084:	b510      	push	{r4, lr}
   bb086:	2114      	movs	r1, #20
   bb088:	4604      	mov	r4, r0
   bb08a:	f7f9 f808 	bl	b409e <_ZdlPvj>
   bb08e:	4620      	mov	r0, r4
   bb090:	bd10      	pop	{r4, pc}
	...

000bb094 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb094:	b510      	push	{r4, lr}
   bb096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb09a:	4604      	mov	r4, r0
   bb09c:	4608      	mov	r0, r1
   bb09e:	4611      	mov	r1, r2
   bb0a0:	2200      	movs	r2, #0
   bb0a2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb0a6:	4b04      	ldr	r3, [pc, #16]	; (bb0b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb0a8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb0aa:	2301      	movs	r3, #1
  _serial = serial;
   bb0ac:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb0ae:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb0b0:	f7fd fa72 	bl	b8598 <hal_usart_init_ex>
}
   bb0b4:	4620      	mov	r0, r4
   bb0b6:	bd10      	pop	{r4, pc}
   bb0b8:	000bd4bc 	.word	0x000bd4bc

000bb0bc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb0bc:	7c00      	ldrb	r0, [r0, #16]
   bb0be:	2300      	movs	r3, #0
   bb0c0:	f7fd ba62 	b.w	b8588 <hal_usart_begin_config>

000bb0c4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb0c4:	2200      	movs	r2, #0
   bb0c6:	f7ff bff9 	b.w	bb0bc <_ZN11USARTSerial5beginEmm>

000bb0ca <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb0ca:	7c00      	ldrb	r0, [r0, #16]
   bb0cc:	f7fd ba1c 	b.w	b8508 <hal_usart_end>

000bb0d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb0d0:	7441      	strb	r1, [r0, #17]
}
   bb0d2:	4770      	bx	lr

000bb0d4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb0d4:	4770      	bx	lr

000bb0d6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb0d6:	4770      	bx	lr

000bb0d8 <_ZN9USBSerial4readEv>:
{
   bb0d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb0da:	2100      	movs	r1, #0
   bb0dc:	7c00      	ldrb	r0, [r0, #16]
   bb0de:	f7fd fa8b 	bl	b85f8 <HAL_USB_USART_Receive_Data>
}
   bb0e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb0e6:	bd08      	pop	{r3, pc}

000bb0e8 <_ZN9USBSerial4peekEv>:
{
   bb0e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb0ea:	2101      	movs	r1, #1
   bb0ec:	7c00      	ldrb	r0, [r0, #16]
   bb0ee:	f7fd fa83 	bl	b85f8 <HAL_USB_USART_Receive_Data>
}
   bb0f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb0f6:	bd08      	pop	{r3, pc}

000bb0f8 <_ZN9USBSerial17availableForWriteEv>:
{
   bb0f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb0fa:	7c00      	ldrb	r0, [r0, #16]
   bb0fc:	f7fd fa74 	bl	b85e8 <HAL_USB_USART_Available_Data_For_Write>
}
   bb100:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb104:	bd08      	pop	{r3, pc}

000bb106 <_ZN9USBSerial9availableEv>:
{
   bb106:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb108:	7c00      	ldrb	r0, [r0, #16]
   bb10a:	f7fd fa65 	bl	b85d8 <HAL_USB_USART_Available_Data>
}
   bb10e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb112:	bd08      	pop	{r3, pc}

000bb114 <_ZN9USBSerial5writeEh>:
{
   bb114:	b513      	push	{r0, r1, r4, lr}
   bb116:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb118:	7c00      	ldrb	r0, [r0, #16]
{
   bb11a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb11c:	f7fd fa64 	bl	b85e8 <HAL_USB_USART_Available_Data_For_Write>
   bb120:	2800      	cmp	r0, #0
   bb122:	9901      	ldr	r1, [sp, #4]
   bb124:	dc01      	bgt.n	bb12a <_ZN9USBSerial5writeEh+0x16>
   bb126:	7c60      	ldrb	r0, [r4, #17]
   bb128:	b120      	cbz	r0, bb134 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb12a:	7c20      	ldrb	r0, [r4, #16]
   bb12c:	f7fd fa6c 	bl	b8608 <HAL_USB_USART_Send_Data>
   bb130:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb134:	b002      	add	sp, #8
   bb136:	bd10      	pop	{r4, pc}

000bb138 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb138:	7c00      	ldrb	r0, [r0, #16]
   bb13a:	f7fd ba6d 	b.w	b8618 <HAL_USB_USART_Flush_Data>

000bb13e <_ZN9USBSerialD0Ev>:
   bb13e:	b510      	push	{r4, lr}
   bb140:	2114      	movs	r1, #20
   bb142:	4604      	mov	r4, r0
   bb144:	f7f8 ffab 	bl	b409e <_ZdlPvj>
   bb148:	4620      	mov	r0, r4
   bb14a:	bd10      	pop	{r4, pc}

000bb14c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb14c:	b510      	push	{r4, lr}
   bb14e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb152:	4604      	mov	r4, r0
   bb154:	4608      	mov	r0, r1
   bb156:	2100      	movs	r1, #0
   bb158:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb15c:	4b04      	ldr	r3, [pc, #16]	; (bb170 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb15e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb160:	2301      	movs	r3, #1
  _serial = serial;
   bb162:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb164:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb166:	4611      	mov	r1, r2
   bb168:	f7fd fa1e 	bl	b85a8 <HAL_USB_USART_Init>
}
   bb16c:	4620      	mov	r0, r4
   bb16e:	bd10      	pop	{r4, pc}
   bb170:	000bd4ec 	.word	0x000bd4ec

000bb174 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb174:	7c00      	ldrb	r0, [r0, #16]
   bb176:	2200      	movs	r2, #0
   bb178:	f7fd ba1e 	b.w	b85b8 <HAL_USB_USART_Begin>

000bb17c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bb17c:	7c00      	ldrb	r0, [r0, #16]
   bb17e:	f7fd ba23 	b.w	b85c8 <HAL_USB_USART_End>

000bb182 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bb182:	7c00      	ldrb	r0, [r0, #16]
   bb184:	f7fd ba50 	b.w	b8628 <HAL_USB_USART_Is_Connected>

000bb188 <_Z19acquireSerialBufferv>:
{
   bb188:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb18a:	2214      	movs	r2, #20
{
   bb18c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb18e:	2100      	movs	r1, #0
   bb190:	f000 ff5a 	bl	bc048 <memset>
}
   bb194:	4620      	mov	r0, r4
   bb196:	bd10      	pop	{r4, pc}

000bb198 <_Z16_fetch_usbserialv>:
{
   bb198:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb19a:	4c0f      	ldr	r4, [pc, #60]	; (bb1d8 <_Z16_fetch_usbserialv+0x40>)
{
   bb19c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb19e:	a803      	add	r0, sp, #12
   bb1a0:	f7ff fff2 	bl	bb188 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb1a4:	7821      	ldrb	r1, [r4, #0]
   bb1a6:	f3bf 8f5b 	dmb	ish
   bb1aa:	f011 0101 	ands.w	r1, r1, #1
   bb1ae:	d10f      	bne.n	bb1d0 <_Z16_fetch_usbserialv+0x38>
   bb1b0:	4620      	mov	r0, r4
   bb1b2:	9101      	str	r1, [sp, #4]
   bb1b4:	f7f8 ff82 	bl	b40bc <__cxa_guard_acquire>
   bb1b8:	9901      	ldr	r1, [sp, #4]
   bb1ba:	b148      	cbz	r0, bb1d0 <_Z16_fetch_usbserialv+0x38>
   bb1bc:	aa03      	add	r2, sp, #12
   bb1be:	4807      	ldr	r0, [pc, #28]	; (bb1dc <_Z16_fetch_usbserialv+0x44>)
   bb1c0:	f7ff ffc4 	bl	bb14c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb1c4:	4620      	mov	r0, r4
   bb1c6:	f7f8 ff7e 	bl	b40c6 <__cxa_guard_release>
   bb1ca:	4805      	ldr	r0, [pc, #20]	; (bb1e0 <_Z16_fetch_usbserialv+0x48>)
   bb1cc:	f000 fee8 	bl	bbfa0 <atexit>
	return _usbserial;
}
   bb1d0:	4802      	ldr	r0, [pc, #8]	; (bb1dc <_Z16_fetch_usbserialv+0x44>)
   bb1d2:	b008      	add	sp, #32
   bb1d4:	bd10      	pop	{r4, pc}
   bb1d6:	bf00      	nop
   bb1d8:	2003e6f0 	.word	0x2003e6f0
   bb1dc:	2003e6f4 	.word	0x2003e6f4
   bb1e0:	000bb0d5 	.word	0x000bb0d5

000bb1e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb1e4:	4b01      	ldr	r3, [pc, #4]	; (bb1ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb1e6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb1e8:	4770      	bx	lr
   bb1ea:	bf00      	nop
   bb1ec:	2003ded0 	.word	0x2003ded0

000bb1f0 <serialEventRun>:
{
   bb1f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb1f2:	4b0b      	ldr	r3, [pc, #44]	; (bb220 <serialEventRun+0x30>)
   bb1f4:	b143      	cbz	r3, bb208 <serialEventRun+0x18>
   bb1f6:	f7ff ffcf 	bl	bb198 <_Z16_fetch_usbserialv>
   bb1fa:	6803      	ldr	r3, [r0, #0]
   bb1fc:	691b      	ldr	r3, [r3, #16]
   bb1fe:	4798      	blx	r3
   bb200:	2800      	cmp	r0, #0
   bb202:	dd01      	ble.n	bb208 <serialEventRun+0x18>
        serialEvent();
   bb204:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb208:	4b06      	ldr	r3, [pc, #24]	; (bb224 <serialEventRun+0x34>)
   bb20a:	b143      	cbz	r3, bb21e <serialEventRun+0x2e>
   bb20c:	f000 f9c2 	bl	bb594 <_Z22__fetch_global_Serial1v>
   bb210:	6803      	ldr	r3, [r0, #0]
   bb212:	691b      	ldr	r3, [r3, #16]
   bb214:	4798      	blx	r3
   bb216:	2800      	cmp	r0, #0
   bb218:	dd01      	ble.n	bb21e <serialEventRun+0x2e>
        serialEvent1();
   bb21a:	f3af 8000 	nop.w
}
   bb21e:	bd08      	pop	{r3, pc}
	...

000bb228 <_post_loop>:
{
   bb228:	b508      	push	{r3, lr}
	serialEventRun();
   bb22a:	f7ff ffe1 	bl	bb1f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb22e:	f7fd f833 	bl	b8298 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb232:	4b01      	ldr	r3, [pc, #4]	; (bb238 <_post_loop+0x10>)
   bb234:	6018      	str	r0, [r3, #0]
}
   bb236:	bd08      	pop	{r3, pc}
   bb238:	2003e710 	.word	0x2003e710

000bb23c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb23c:	4805      	ldr	r0, [pc, #20]	; (bb254 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb23e:	4a06      	ldr	r2, [pc, #24]	; (bb258 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb240:	4906      	ldr	r1, [pc, #24]	; (bb25c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb242:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb244:	1a12      	subs	r2, r2, r0
   bb246:	f000 fed7 	bl	bbff8 <memcpy>
    __backup_sram_signature = signature;
   bb24a:	4b05      	ldr	r3, [pc, #20]	; (bb260 <_Z33system_initialize_user_backup_ramv+0x24>)
   bb24c:	4a05      	ldr	r2, [pc, #20]	; (bb264 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb24e:	601a      	str	r2, [r3, #0]
}
   bb250:	bd08      	pop	{r3, pc}
   bb252:	bf00      	nop
   bb254:	2003f400 	.word	0x2003f400
   bb258:	2003f404 	.word	0x2003f404
   bb25c:	000bd7a4 	.word	0x000bd7a4
   bb260:	2003f400 	.word	0x2003f400
   bb264:	9a271c1e 	.word	0x9a271c1e

000bb268 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb268:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb26a:	2300      	movs	r3, #0
   bb26c:	9300      	str	r3, [sp, #0]
   bb26e:	461a      	mov	r2, r3
   bb270:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb274:	f7fd fa54 	bl	b8720 <system_ctrl_set_result>
}
   bb278:	b003      	add	sp, #12
   bb27a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb280 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb280:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb282:	8843      	ldrh	r3, [r0, #2]
   bb284:	2b0a      	cmp	r3, #10
   bb286:	d008      	beq.n	bb29a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb288:	2b50      	cmp	r3, #80	; 0x50
   bb28a:	d10b      	bne.n	bb2a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb28c:	4b09      	ldr	r3, [pc, #36]	; (bb2b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb28e:	681b      	ldr	r3, [r3, #0]
   bb290:	b14b      	cbz	r3, bb2a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb292:	b003      	add	sp, #12
   bb294:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb298:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb29a:	f7ff ffe5 	bl	bb268 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb29e:	b003      	add	sp, #12
   bb2a0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb2a4:	2300      	movs	r3, #0
   bb2a6:	9300      	str	r3, [sp, #0]
   bb2a8:	461a      	mov	r2, r3
   bb2aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb2ae:	f7fd fa37 	bl	b8720 <system_ctrl_set_result>
}
   bb2b2:	e7f4      	b.n	bb29e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb2b4:	2003e70c 	.word	0x2003e70c

000bb2b8 <module_user_init_hook>:
{
   bb2b8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb2ba:	4812      	ldr	r0, [pc, #72]	; (bb304 <module_user_init_hook+0x4c>)
   bb2bc:	2100      	movs	r1, #0
   bb2be:	f7fd fb2f 	bl	b8920 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb2c2:	4b11      	ldr	r3, [pc, #68]	; (bb308 <module_user_init_hook+0x50>)
   bb2c4:	681a      	ldr	r2, [r3, #0]
   bb2c6:	4b11      	ldr	r3, [pc, #68]	; (bb30c <module_user_init_hook+0x54>)
   bb2c8:	429a      	cmp	r2, r3
   bb2ca:	4b11      	ldr	r3, [pc, #68]	; (bb310 <module_user_init_hook+0x58>)
   bb2cc:	bf0c      	ite	eq
   bb2ce:	2201      	moveq	r2, #1
   bb2d0:	2200      	movne	r2, #0
   bb2d2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb2d4:	d001      	beq.n	bb2da <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb2d6:	f7ff ffb1 	bl	bb23c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb2da:	f7fc ffcd 	bl	b8278 <HAL_RNG_GetRandomNumber>
   bb2de:	4604      	mov	r4, r0
    srand(seed);
   bb2e0:	f000 feba 	bl	bc058 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb2e4:	4b0b      	ldr	r3, [pc, #44]	; (bb314 <module_user_init_hook+0x5c>)
   bb2e6:	b113      	cbz	r3, bb2ee <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb2e8:	4620      	mov	r0, r4
   bb2ea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb2ee:	2100      	movs	r1, #0
   bb2f0:	4808      	ldr	r0, [pc, #32]	; (bb314 <module_user_init_hook+0x5c>)
   bb2f2:	f7fd fa65 	bl	b87c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb2fa:	4807      	ldr	r0, [pc, #28]	; (bb318 <module_user_init_hook+0x60>)
   bb2fc:	2100      	movs	r1, #0
   bb2fe:	f7fd ba05 	b.w	b870c <system_ctrl_set_app_request_handler>
   bb302:	bf00      	nop
   bb304:	000bb1e5 	.word	0x000bb1e5
   bb308:	2003f400 	.word	0x2003f400
   bb30c:	9a271c1e 	.word	0x9a271c1e
   bb310:	2003e708 	.word	0x2003e708
   bb314:	00000000 	.word	0x00000000
   bb318:	000bb281 	.word	0x000bb281

000bb31c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bb31c:	b508      	push	{r3, lr}
   bb31e:	4b02      	ldr	r3, [pc, #8]	; (bb328 <spark_protocol_instance+0xc>)
   bb320:	681b      	ldr	r3, [r3, #0]
   bb322:	681b      	ldr	r3, [r3, #0]
   bb324:	9301      	str	r3, [sp, #4]
   bb326:	bd08      	pop	{r3, pc}
   bb328:	0003025c 	.word	0x0003025c

000bb32c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bb32c:	b508      	push	{r3, lr}
   bb32e:	4b02      	ldr	r3, [pc, #8]	; (bb338 <spark_protocol_set_product_id+0xc>)
   bb330:	681b      	ldr	r3, [r3, #0]
   bb332:	685b      	ldr	r3, [r3, #4]
   bb334:	9301      	str	r3, [sp, #4]
   bb336:	bd08      	pop	{r3, pc}
   bb338:	0003025c 	.word	0x0003025c

000bb33c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bb33c:	b508      	push	{r3, lr}
   bb33e:	4b02      	ldr	r3, [pc, #8]	; (bb348 <spark_protocol_set_product_firmware_version+0xc>)
   bb340:	681b      	ldr	r3, [r3, #0]
   bb342:	689b      	ldr	r3, [r3, #8]
   bb344:	9301      	str	r3, [sp, #4]
   bb346:	bd08      	pop	{r3, pc}
   bb348:	0003025c 	.word	0x0003025c

000bb34c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb34c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb34e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb350:	d902      	bls.n	bb358 <pinAvailable+0xc>
    return false;
   bb352:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb354:	b002      	add	sp, #8
   bb356:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb358:	f1a0 030b 	sub.w	r3, r0, #11
   bb35c:	2b02      	cmp	r3, #2
   bb35e:	d81a      	bhi.n	bb396 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb360:	4c17      	ldr	r4, [pc, #92]	; (bb3c0 <pinAvailable+0x74>)
   bb362:	7821      	ldrb	r1, [r4, #0]
   bb364:	f3bf 8f5b 	dmb	ish
   bb368:	f011 0101 	ands.w	r1, r1, #1
   bb36c:	d10b      	bne.n	bb386 <pinAvailable+0x3a>
   bb36e:	4620      	mov	r0, r4
   bb370:	9101      	str	r1, [sp, #4]
   bb372:	f7f8 fea3 	bl	b40bc <__cxa_guard_acquire>
   bb376:	9901      	ldr	r1, [sp, #4]
   bb378:	b128      	cbz	r0, bb386 <pinAvailable+0x3a>
   bb37a:	4812      	ldr	r0, [pc, #72]	; (bb3c4 <pinAvailable+0x78>)
   bb37c:	f7ff fa58 	bl	ba830 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb380:	4620      	mov	r0, r4
   bb382:	f7f8 fea0 	bl	b40c6 <__cxa_guard_release>
   bb386:	4b0f      	ldr	r3, [pc, #60]	; (bb3c4 <pinAvailable+0x78>)
   bb388:	7818      	ldrb	r0, [r3, #0]
   bb38a:	f7fd f895 	bl	b84b8 <hal_spi_is_enabled>
   bb38e:	2800      	cmp	r0, #0
   bb390:	d1df      	bne.n	bb352 <pinAvailable+0x6>
  return true; // 'pin' is available
   bb392:	2001      	movs	r0, #1
   bb394:	e7de      	b.n	bb354 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb396:	2801      	cmp	r0, #1
   bb398:	d809      	bhi.n	bb3ae <pinAvailable+0x62>
   bb39a:	f000 f897 	bl	bb4cc <_Z19__fetch_global_Wirev>
   bb39e:	2100      	movs	r1, #0
   bb3a0:	7c00      	ldrb	r0, [r0, #16]
   bb3a2:	f7fd f829 	bl	b83f8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb3a6:	f080 0001 	eor.w	r0, r0, #1
   bb3aa:	b2c0      	uxtb	r0, r0
   bb3ac:	e7d2      	b.n	bb354 <pinAvailable+0x8>
   bb3ae:	3809      	subs	r0, #9
   bb3b0:	2801      	cmp	r0, #1
   bb3b2:	d8ee      	bhi.n	bb392 <pinAvailable+0x46>
   bb3b4:	f000 f8ee 	bl	bb594 <_Z22__fetch_global_Serial1v>
   bb3b8:	7c00      	ldrb	r0, [r0, #16]
   bb3ba:	f7fd f8d5 	bl	b8568 <hal_usart_is_enabled>
   bb3be:	e7f2      	b.n	bb3a6 <pinAvailable+0x5a>
   bb3c0:	2003e3e4 	.word	0x2003e3e4
   bb3c4:	2003e3e8 	.word	0x2003e3e8

000bb3c8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb3c8:	2823      	cmp	r0, #35	; 0x23
{
   bb3ca:	b538      	push	{r3, r4, r5, lr}
   bb3cc:	4604      	mov	r4, r0
   bb3ce:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb3d0:	d80a      	bhi.n	bb3e8 <pinMode+0x20>
   bb3d2:	29ff      	cmp	r1, #255	; 0xff
   bb3d4:	d008      	beq.n	bb3e8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb3d6:	f7ff ffb9 	bl	bb34c <pinAvailable>
   bb3da:	b128      	cbz	r0, bb3e8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb3dc:	4629      	mov	r1, r5
   bb3de:	4620      	mov	r0, r4
}
   bb3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb3e4:	f7fc bf90 	b.w	b8308 <HAL_Pin_Mode>
}
   bb3e8:	bd38      	pop	{r3, r4, r5, pc}

000bb3ea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb3ea:	b538      	push	{r3, r4, r5, lr}
   bb3ec:	4604      	mov	r4, r0
   bb3ee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb3f0:	f7fc ff92 	bl	b8318 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb3f4:	28ff      	cmp	r0, #255	; 0xff
   bb3f6:	d010      	beq.n	bb41a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb3f8:	2806      	cmp	r0, #6
   bb3fa:	d804      	bhi.n	bb406 <digitalWrite+0x1c>
   bb3fc:	234d      	movs	r3, #77	; 0x4d
   bb3fe:	fa23 f000 	lsr.w	r0, r3, r0
   bb402:	07c3      	lsls	r3, r0, #31
   bb404:	d409      	bmi.n	bb41a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb406:	4620      	mov	r0, r4
   bb408:	f7ff ffa0 	bl	bb34c <pinAvailable>
   bb40c:	b128      	cbz	r0, bb41a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb40e:	4629      	mov	r1, r5
   bb410:	4620      	mov	r0, r4
}
   bb412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb416:	f7fc bf87 	b.w	b8328 <HAL_GPIO_Write>
}
   bb41a:	bd38      	pop	{r3, r4, r5, pc}

000bb41c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bb41c:	b510      	push	{r4, lr}
   bb41e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb420:	f7fc ff7a 	bl	b8318 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb424:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb426:	b2db      	uxtb	r3, r3
   bb428:	2b01      	cmp	r3, #1
   bb42a:	d908      	bls.n	bb43e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb42c:	4620      	mov	r0, r4
   bb42e:	f7ff ff8d 	bl	bb34c <pinAvailable>
   bb432:	b120      	cbz	r0, bb43e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bb434:	4620      	mov	r0, r4
}
   bb436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bb43a:	f7fc bf7d 	b.w	b8338 <HAL_GPIO_Read>
}
   bb43e:	2000      	movs	r0, #0
   bb440:	bd10      	pop	{r4, pc}

000bb442 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb442:	280d      	cmp	r0, #13
{
   bb444:	b510      	push	{r4, lr}
   bb446:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb448:	bf9c      	itt	ls
   bb44a:	340e      	addls	r4, #14
   bb44c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bb44e:	4620      	mov	r0, r4
   bb450:	f7ff ff7c 	bl	bb34c <pinAvailable>
   bb454:	b150      	cbz	r0, bb46c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bb456:	2103      	movs	r1, #3
   bb458:	4620      	mov	r0, r4
   bb45a:	f7fc ff4d 	bl	b82f8 <HAL_Validate_Pin_Function>
   bb45e:	2803      	cmp	r0, #3
   bb460:	d104      	bne.n	bb46c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb462:	4620      	mov	r0, r4
}
   bb464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb468:	f7fc bf7e 	b.w	b8368 <hal_adc_read>
}
   bb46c:	2000      	movs	r0, #0
   bb46e:	bd10      	pop	{r4, pc}

000bb470 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb470:	4770      	bx	lr

000bb472 <__tcf_1>:
   bb472:	4770      	bx	lr

000bb474 <_Z17acquireWireBufferv>:
{
   bb474:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb476:	2520      	movs	r5, #32
   bb478:	2314      	movs	r3, #20
{
   bb47a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb47c:	6003      	str	r3, [r0, #0]
   bb47e:	6085      	str	r5, [r0, #8]
   bb480:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb482:	4906      	ldr	r1, [pc, #24]	; (bb49c <_Z17acquireWireBufferv+0x28>)
   bb484:	4628      	mov	r0, r5
   bb486:	f000 f8ab 	bl	bb5e0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb48a:	4904      	ldr	r1, [pc, #16]	; (bb49c <_Z17acquireWireBufferv+0x28>)
	};
   bb48c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb48e:	4628      	mov	r0, r5
   bb490:	f000 f8a6 	bl	bb5e0 <_ZnajRKSt9nothrow_t>
	};
   bb494:	60e0      	str	r0, [r4, #12]
}
   bb496:	4620      	mov	r0, r4
   bb498:	bd38      	pop	{r3, r4, r5, pc}
   bb49a:	bf00      	nop
   bb49c:	000bd514 	.word	0x000bd514

000bb4a0 <_Z18acquireWire1Bufferv>:
   bb4a0:	b538      	push	{r3, r4, r5, lr}
   bb4a2:	2520      	movs	r5, #32
   bb4a4:	2314      	movs	r3, #20
   bb4a6:	4604      	mov	r4, r0
   bb4a8:	6003      	str	r3, [r0, #0]
   bb4aa:	6085      	str	r5, [r0, #8]
   bb4ac:	6105      	str	r5, [r0, #16]
   bb4ae:	4906      	ldr	r1, [pc, #24]	; (bb4c8 <_Z18acquireWire1Bufferv+0x28>)
   bb4b0:	4628      	mov	r0, r5
   bb4b2:	f000 f895 	bl	bb5e0 <_ZnajRKSt9nothrow_t>
   bb4b6:	4904      	ldr	r1, [pc, #16]	; (bb4c8 <_Z18acquireWire1Bufferv+0x28>)
   bb4b8:	6060      	str	r0, [r4, #4]
   bb4ba:	4628      	mov	r0, r5
   bb4bc:	f000 f890 	bl	bb5e0 <_ZnajRKSt9nothrow_t>
   bb4c0:	60e0      	str	r0, [r4, #12]
   bb4c2:	4620      	mov	r0, r4
   bb4c4:	bd38      	pop	{r3, r4, r5, pc}
   bb4c6:	bf00      	nop
   bb4c8:	000bd514 	.word	0x000bd514

000bb4cc <_Z19__fetch_global_Wirev>:
{
   bb4cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb4ce:	4d0e      	ldr	r5, [pc, #56]	; (bb508 <_Z19__fetch_global_Wirev+0x3c>)
   bb4d0:	7829      	ldrb	r1, [r5, #0]
   bb4d2:	f3bf 8f5b 	dmb	ish
   bb4d6:	f011 0401 	ands.w	r4, r1, #1
{
   bb4da:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb4dc:	d111      	bne.n	bb502 <_Z19__fetch_global_Wirev+0x36>
   bb4de:	4628      	mov	r0, r5
   bb4e0:	f7f8 fdec 	bl	b40bc <__cxa_guard_acquire>
   bb4e4:	b168      	cbz	r0, bb502 <_Z19__fetch_global_Wirev+0x36>
   bb4e6:	a801      	add	r0, sp, #4
   bb4e8:	f7ff ffc4 	bl	bb474 <_Z17acquireWireBufferv>
   bb4ec:	aa01      	add	r2, sp, #4
   bb4ee:	4621      	mov	r1, r4
   bb4f0:	4806      	ldr	r0, [pc, #24]	; (bb50c <_Z19__fetch_global_Wirev+0x40>)
   bb4f2:	f7fd fc4f 	bl	b8d94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb4f6:	4628      	mov	r0, r5
   bb4f8:	f7f8 fde5 	bl	b40c6 <__cxa_guard_release>
   bb4fc:	4804      	ldr	r0, [pc, #16]	; (bb510 <_Z19__fetch_global_Wirev+0x44>)
   bb4fe:	f000 fd4f 	bl	bbfa0 <atexit>
	return wire;
}
   bb502:	4802      	ldr	r0, [pc, #8]	; (bb50c <_Z19__fetch_global_Wirev+0x40>)
   bb504:	b007      	add	sp, #28
   bb506:	bd30      	pop	{r4, r5, pc}
   bb508:	2003e714 	.word	0x2003e714
   bb50c:	2003e71c 	.word	0x2003e71c
   bb510:	000bb471 	.word	0x000bb471

000bb514 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bb514:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb516:	4c0e      	ldr	r4, [pc, #56]	; (bb550 <_Z20__fetch_global_Wire1v+0x3c>)
   bb518:	7823      	ldrb	r3, [r4, #0]
   bb51a:	f3bf 8f5b 	dmb	ish
   bb51e:	07db      	lsls	r3, r3, #31
{
   bb520:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb522:	d411      	bmi.n	bb548 <_Z20__fetch_global_Wire1v+0x34>
   bb524:	4620      	mov	r0, r4
   bb526:	f7f8 fdc9 	bl	b40bc <__cxa_guard_acquire>
   bb52a:	b168      	cbz	r0, bb548 <_Z20__fetch_global_Wire1v+0x34>
   bb52c:	a801      	add	r0, sp, #4
   bb52e:	f7ff ffb7 	bl	bb4a0 <_Z18acquireWire1Bufferv>
   bb532:	aa01      	add	r2, sp, #4
   bb534:	2101      	movs	r1, #1
   bb536:	4807      	ldr	r0, [pc, #28]	; (bb554 <_Z20__fetch_global_Wire1v+0x40>)
   bb538:	f7fd fc2c 	bl	b8d94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb53c:	4620      	mov	r0, r4
   bb53e:	f7f8 fdc2 	bl	b40c6 <__cxa_guard_release>
   bb542:	4805      	ldr	r0, [pc, #20]	; (bb558 <_Z20__fetch_global_Wire1v+0x44>)
   bb544:	f000 fd2c 	bl	bbfa0 <atexit>
	return wire;
}
   bb548:	4802      	ldr	r0, [pc, #8]	; (bb554 <_Z20__fetch_global_Wire1v+0x40>)
   bb54a:	b006      	add	sp, #24
   bb54c:	bd10      	pop	{r4, pc}
   bb54e:	bf00      	nop
   bb550:	2003e718 	.word	0x2003e718
   bb554:	2003e730 	.word	0x2003e730
   bb558:	000bb473 	.word	0x000bb473

000bb55c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb55c:	4770      	bx	lr
	...

000bb560 <_Z20acquireSerial1Bufferv>:
{
   bb560:	b538      	push	{r3, r4, r5, lr}
   bb562:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb564:	2514      	movs	r5, #20
   bb566:	462a      	mov	r2, r5
   bb568:	2100      	movs	r1, #0
   bb56a:	f000 fd6d 	bl	bc048 <memset>
   bb56e:	8025      	strh	r5, [r4, #0]
   bb570:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb572:	4907      	ldr	r1, [pc, #28]	; (bb590 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb574:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb576:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb578:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb57a:	f000 f831 	bl	bb5e0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb57e:	4904      	ldr	r1, [pc, #16]	; (bb590 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb580:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb582:	4628      	mov	r0, r5
   bb584:	f000 f82c 	bl	bb5e0 <_ZnajRKSt9nothrow_t>
    };
   bb588:	60e0      	str	r0, [r4, #12]
}
   bb58a:	4620      	mov	r0, r4
   bb58c:	bd38      	pop	{r3, r4, r5, pc}
   bb58e:	bf00      	nop
   bb590:	000bd514 	.word	0x000bd514

000bb594 <_Z22__fetch_global_Serial1v>:
{
   bb594:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb596:	4d0e      	ldr	r5, [pc, #56]	; (bb5d0 <_Z22__fetch_global_Serial1v+0x3c>)
   bb598:	7829      	ldrb	r1, [r5, #0]
   bb59a:	f3bf 8f5b 	dmb	ish
   bb59e:	f011 0401 	ands.w	r4, r1, #1
{
   bb5a2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb5a4:	d111      	bne.n	bb5ca <_Z22__fetch_global_Serial1v+0x36>
   bb5a6:	4628      	mov	r0, r5
   bb5a8:	f7f8 fd88 	bl	b40bc <__cxa_guard_acquire>
   bb5ac:	b168      	cbz	r0, bb5ca <_Z22__fetch_global_Serial1v+0x36>
   bb5ae:	a801      	add	r0, sp, #4
   bb5b0:	f7ff ffd6 	bl	bb560 <_Z20acquireSerial1Bufferv>
   bb5b4:	aa01      	add	r2, sp, #4
   bb5b6:	4621      	mov	r1, r4
   bb5b8:	4806      	ldr	r0, [pc, #24]	; (bb5d4 <_Z22__fetch_global_Serial1v+0x40>)
   bb5ba:	f7ff fd6b 	bl	bb094 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb5be:	4628      	mov	r0, r5
   bb5c0:	f7f8 fd81 	bl	b40c6 <__cxa_guard_release>
   bb5c4:	4804      	ldr	r0, [pc, #16]	; (bb5d8 <_Z22__fetch_global_Serial1v+0x44>)
   bb5c6:	f000 fceb 	bl	bbfa0 <atexit>
    return serial1;
}
   bb5ca:	4802      	ldr	r0, [pc, #8]	; (bb5d4 <_Z22__fetch_global_Serial1v+0x40>)
   bb5cc:	b007      	add	sp, #28
   bb5ce:	bd30      	pop	{r4, r5, pc}
   bb5d0:	2003e744 	.word	0x2003e744
   bb5d4:	2003e748 	.word	0x2003e748
   bb5d8:	000bb55d 	.word	0x000bb55d

000bb5dc <_ZnwjRKSt9nothrow_t>:
   bb5dc:	f7f8 bd5b 	b.w	b4096 <_Znwj>

000bb5e0 <_ZnajRKSt9nothrow_t>:
   bb5e0:	f7f8 bd5b 	b.w	b409a <_Znaj>

000bb5e4 <_ZSt25__throw_bad_function_callv>:
   bb5e4:	b508      	push	{r3, lr}
   bb5e6:	f7fd f983 	bl	b88f0 <abort>
	...

000bb5ec <__aeabi_drsub>:
   bb5ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb5f0:	e002      	b.n	bb5f8 <__adddf3>
   bb5f2:	bf00      	nop

000bb5f4 <__aeabi_dsub>:
   bb5f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb5f8 <__adddf3>:
   bb5f8:	b530      	push	{r4, r5, lr}
   bb5fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb5fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb602:	ea94 0f05 	teq	r4, r5
   bb606:	bf08      	it	eq
   bb608:	ea90 0f02 	teqeq	r0, r2
   bb60c:	bf1f      	itttt	ne
   bb60e:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb612:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb616:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb61a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb61e:	f000 80e2 	beq.w	bb7e6 <__adddf3+0x1ee>
   bb622:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb626:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb62a:	bfb8      	it	lt
   bb62c:	426d      	neglt	r5, r5
   bb62e:	dd0c      	ble.n	bb64a <__adddf3+0x52>
   bb630:	442c      	add	r4, r5
   bb632:	ea80 0202 	eor.w	r2, r0, r2
   bb636:	ea81 0303 	eor.w	r3, r1, r3
   bb63a:	ea82 0000 	eor.w	r0, r2, r0
   bb63e:	ea83 0101 	eor.w	r1, r3, r1
   bb642:	ea80 0202 	eor.w	r2, r0, r2
   bb646:	ea81 0303 	eor.w	r3, r1, r3
   bb64a:	2d36      	cmp	r5, #54	; 0x36
   bb64c:	bf88      	it	hi
   bb64e:	bd30      	pophi	{r4, r5, pc}
   bb650:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb654:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb658:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb65c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb660:	d002      	beq.n	bb668 <__adddf3+0x70>
   bb662:	4240      	negs	r0, r0
   bb664:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb668:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb66c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb670:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb674:	d002      	beq.n	bb67c <__adddf3+0x84>
   bb676:	4252      	negs	r2, r2
   bb678:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb67c:	ea94 0f05 	teq	r4, r5
   bb680:	f000 80a7 	beq.w	bb7d2 <__adddf3+0x1da>
   bb684:	f1a4 0401 	sub.w	r4, r4, #1
   bb688:	f1d5 0e20 	rsbs	lr, r5, #32
   bb68c:	db0d      	blt.n	bb6aa <__adddf3+0xb2>
   bb68e:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb692:	fa22 f205 	lsr.w	r2, r2, r5
   bb696:	1880      	adds	r0, r0, r2
   bb698:	f141 0100 	adc.w	r1, r1, #0
   bb69c:	fa03 f20e 	lsl.w	r2, r3, lr
   bb6a0:	1880      	adds	r0, r0, r2
   bb6a2:	fa43 f305 	asr.w	r3, r3, r5
   bb6a6:	4159      	adcs	r1, r3
   bb6a8:	e00e      	b.n	bb6c8 <__adddf3+0xd0>
   bb6aa:	f1a5 0520 	sub.w	r5, r5, #32
   bb6ae:	f10e 0e20 	add.w	lr, lr, #32
   bb6b2:	2a01      	cmp	r2, #1
   bb6b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb6b8:	bf28      	it	cs
   bb6ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb6be:	fa43 f305 	asr.w	r3, r3, r5
   bb6c2:	18c0      	adds	r0, r0, r3
   bb6c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb6c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb6cc:	d507      	bpl.n	bb6de <__adddf3+0xe6>
   bb6ce:	f04f 0e00 	mov.w	lr, #0
   bb6d2:	f1dc 0c00 	rsbs	ip, ip, #0
   bb6d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb6da:	eb6e 0101 	sbc.w	r1, lr, r1
   bb6de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb6e2:	d31b      	bcc.n	bb71c <__adddf3+0x124>
   bb6e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb6e8:	d30c      	bcc.n	bb704 <__adddf3+0x10c>
   bb6ea:	0849      	lsrs	r1, r1, #1
   bb6ec:	ea5f 0030 	movs.w	r0, r0, rrx
   bb6f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb6f4:	f104 0401 	add.w	r4, r4, #1
   bb6f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb6fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb700:	f080 809a 	bcs.w	bb838 <__adddf3+0x240>
   bb704:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb708:	bf08      	it	eq
   bb70a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb70e:	f150 0000 	adcs.w	r0, r0, #0
   bb712:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb716:	ea41 0105 	orr.w	r1, r1, r5
   bb71a:	bd30      	pop	{r4, r5, pc}
   bb71c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb720:	4140      	adcs	r0, r0
   bb722:	eb41 0101 	adc.w	r1, r1, r1
   bb726:	3c01      	subs	r4, #1
   bb728:	bf28      	it	cs
   bb72a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb72e:	d2e9      	bcs.n	bb704 <__adddf3+0x10c>
   bb730:	f091 0f00 	teq	r1, #0
   bb734:	bf04      	itt	eq
   bb736:	4601      	moveq	r1, r0
   bb738:	2000      	moveq	r0, #0
   bb73a:	fab1 f381 	clz	r3, r1
   bb73e:	bf08      	it	eq
   bb740:	3320      	addeq	r3, #32
   bb742:	f1a3 030b 	sub.w	r3, r3, #11
   bb746:	f1b3 0220 	subs.w	r2, r3, #32
   bb74a:	da0c      	bge.n	bb766 <__adddf3+0x16e>
   bb74c:	320c      	adds	r2, #12
   bb74e:	dd08      	ble.n	bb762 <__adddf3+0x16a>
   bb750:	f102 0c14 	add.w	ip, r2, #20
   bb754:	f1c2 020c 	rsb	r2, r2, #12
   bb758:	fa01 f00c 	lsl.w	r0, r1, ip
   bb75c:	fa21 f102 	lsr.w	r1, r1, r2
   bb760:	e00c      	b.n	bb77c <__adddf3+0x184>
   bb762:	f102 0214 	add.w	r2, r2, #20
   bb766:	bfd8      	it	le
   bb768:	f1c2 0c20 	rsble	ip, r2, #32
   bb76c:	fa01 f102 	lsl.w	r1, r1, r2
   bb770:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb774:	bfdc      	itt	le
   bb776:	ea41 010c 	orrle.w	r1, r1, ip
   bb77a:	4090      	lslle	r0, r2
   bb77c:	1ae4      	subs	r4, r4, r3
   bb77e:	bfa2      	ittt	ge
   bb780:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb784:	4329      	orrge	r1, r5
   bb786:	bd30      	popge	{r4, r5, pc}
   bb788:	ea6f 0404 	mvn.w	r4, r4
   bb78c:	3c1f      	subs	r4, #31
   bb78e:	da1c      	bge.n	bb7ca <__adddf3+0x1d2>
   bb790:	340c      	adds	r4, #12
   bb792:	dc0e      	bgt.n	bb7b2 <__adddf3+0x1ba>
   bb794:	f104 0414 	add.w	r4, r4, #20
   bb798:	f1c4 0220 	rsb	r2, r4, #32
   bb79c:	fa20 f004 	lsr.w	r0, r0, r4
   bb7a0:	fa01 f302 	lsl.w	r3, r1, r2
   bb7a4:	ea40 0003 	orr.w	r0, r0, r3
   bb7a8:	fa21 f304 	lsr.w	r3, r1, r4
   bb7ac:	ea45 0103 	orr.w	r1, r5, r3
   bb7b0:	bd30      	pop	{r4, r5, pc}
   bb7b2:	f1c4 040c 	rsb	r4, r4, #12
   bb7b6:	f1c4 0220 	rsb	r2, r4, #32
   bb7ba:	fa20 f002 	lsr.w	r0, r0, r2
   bb7be:	fa01 f304 	lsl.w	r3, r1, r4
   bb7c2:	ea40 0003 	orr.w	r0, r0, r3
   bb7c6:	4629      	mov	r1, r5
   bb7c8:	bd30      	pop	{r4, r5, pc}
   bb7ca:	fa21 f004 	lsr.w	r0, r1, r4
   bb7ce:	4629      	mov	r1, r5
   bb7d0:	bd30      	pop	{r4, r5, pc}
   bb7d2:	f094 0f00 	teq	r4, #0
   bb7d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb7da:	bf06      	itte	eq
   bb7dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb7e0:	3401      	addeq	r4, #1
   bb7e2:	3d01      	subne	r5, #1
   bb7e4:	e74e      	b.n	bb684 <__adddf3+0x8c>
   bb7e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb7ea:	bf18      	it	ne
   bb7ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb7f0:	d029      	beq.n	bb846 <__adddf3+0x24e>
   bb7f2:	ea94 0f05 	teq	r4, r5
   bb7f6:	bf08      	it	eq
   bb7f8:	ea90 0f02 	teqeq	r0, r2
   bb7fc:	d005      	beq.n	bb80a <__adddf3+0x212>
   bb7fe:	ea54 0c00 	orrs.w	ip, r4, r0
   bb802:	bf04      	itt	eq
   bb804:	4619      	moveq	r1, r3
   bb806:	4610      	moveq	r0, r2
   bb808:	bd30      	pop	{r4, r5, pc}
   bb80a:	ea91 0f03 	teq	r1, r3
   bb80e:	bf1e      	ittt	ne
   bb810:	2100      	movne	r1, #0
   bb812:	2000      	movne	r0, #0
   bb814:	bd30      	popne	{r4, r5, pc}
   bb816:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb81a:	d105      	bne.n	bb828 <__adddf3+0x230>
   bb81c:	0040      	lsls	r0, r0, #1
   bb81e:	4149      	adcs	r1, r1
   bb820:	bf28      	it	cs
   bb822:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb826:	bd30      	pop	{r4, r5, pc}
   bb828:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb82c:	bf3c      	itt	cc
   bb82e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb832:	bd30      	popcc	{r4, r5, pc}
   bb834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb838:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb83c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb840:	f04f 0000 	mov.w	r0, #0
   bb844:	bd30      	pop	{r4, r5, pc}
   bb846:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb84a:	bf1a      	itte	ne
   bb84c:	4619      	movne	r1, r3
   bb84e:	4610      	movne	r0, r2
   bb850:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb854:	bf1c      	itt	ne
   bb856:	460b      	movne	r3, r1
   bb858:	4602      	movne	r2, r0
   bb85a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb85e:	bf06      	itte	eq
   bb860:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb864:	ea91 0f03 	teqeq	r1, r3
   bb868:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb86c:	bd30      	pop	{r4, r5, pc}
   bb86e:	bf00      	nop

000bb870 <__aeabi_ui2d>:
   bb870:	f090 0f00 	teq	r0, #0
   bb874:	bf04      	itt	eq
   bb876:	2100      	moveq	r1, #0
   bb878:	4770      	bxeq	lr
   bb87a:	b530      	push	{r4, r5, lr}
   bb87c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb880:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb884:	f04f 0500 	mov.w	r5, #0
   bb888:	f04f 0100 	mov.w	r1, #0
   bb88c:	e750      	b.n	bb730 <__adddf3+0x138>
   bb88e:	bf00      	nop

000bb890 <__aeabi_i2d>:
   bb890:	f090 0f00 	teq	r0, #0
   bb894:	bf04      	itt	eq
   bb896:	2100      	moveq	r1, #0
   bb898:	4770      	bxeq	lr
   bb89a:	b530      	push	{r4, r5, lr}
   bb89c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb8a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb8a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb8a8:	bf48      	it	mi
   bb8aa:	4240      	negmi	r0, r0
   bb8ac:	f04f 0100 	mov.w	r1, #0
   bb8b0:	e73e      	b.n	bb730 <__adddf3+0x138>
   bb8b2:	bf00      	nop

000bb8b4 <__aeabi_f2d>:
   bb8b4:	0042      	lsls	r2, r0, #1
   bb8b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb8ba:	ea4f 0131 	mov.w	r1, r1, rrx
   bb8be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb8c2:	bf1f      	itttt	ne
   bb8c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb8c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb8cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb8d0:	4770      	bxne	lr
   bb8d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb8d6:	bf08      	it	eq
   bb8d8:	4770      	bxeq	lr
   bb8da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb8de:	bf04      	itt	eq
   bb8e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb8e4:	4770      	bxeq	lr
   bb8e6:	b530      	push	{r4, r5, lr}
   bb8e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb8ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb8f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb8f4:	e71c      	b.n	bb730 <__adddf3+0x138>
   bb8f6:	bf00      	nop

000bb8f8 <__aeabi_ul2d>:
   bb8f8:	ea50 0201 	orrs.w	r2, r0, r1
   bb8fc:	bf08      	it	eq
   bb8fe:	4770      	bxeq	lr
   bb900:	b530      	push	{r4, r5, lr}
   bb902:	f04f 0500 	mov.w	r5, #0
   bb906:	e00a      	b.n	bb91e <__aeabi_l2d+0x16>

000bb908 <__aeabi_l2d>:
   bb908:	ea50 0201 	orrs.w	r2, r0, r1
   bb90c:	bf08      	it	eq
   bb90e:	4770      	bxeq	lr
   bb910:	b530      	push	{r4, r5, lr}
   bb912:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb916:	d502      	bpl.n	bb91e <__aeabi_l2d+0x16>
   bb918:	4240      	negs	r0, r0
   bb91a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb91e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb922:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb926:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb92a:	f43f aed8 	beq.w	bb6de <__adddf3+0xe6>
   bb92e:	f04f 0203 	mov.w	r2, #3
   bb932:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb936:	bf18      	it	ne
   bb938:	3203      	addne	r2, #3
   bb93a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb93e:	bf18      	it	ne
   bb940:	3203      	addne	r2, #3
   bb942:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb946:	f1c2 0320 	rsb	r3, r2, #32
   bb94a:	fa00 fc03 	lsl.w	ip, r0, r3
   bb94e:	fa20 f002 	lsr.w	r0, r0, r2
   bb952:	fa01 fe03 	lsl.w	lr, r1, r3
   bb956:	ea40 000e 	orr.w	r0, r0, lr
   bb95a:	fa21 f102 	lsr.w	r1, r1, r2
   bb95e:	4414      	add	r4, r2
   bb960:	e6bd      	b.n	bb6de <__adddf3+0xe6>
   bb962:	bf00      	nop

000bb964 <__aeabi_dmul>:
   bb964:	b570      	push	{r4, r5, r6, lr}
   bb966:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb96a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb96e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb972:	bf1d      	ittte	ne
   bb974:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb978:	ea94 0f0c 	teqne	r4, ip
   bb97c:	ea95 0f0c 	teqne	r5, ip
   bb980:	f000 f8de 	bleq	bbb40 <__aeabi_dmul+0x1dc>
   bb984:	442c      	add	r4, r5
   bb986:	ea81 0603 	eor.w	r6, r1, r3
   bb98a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb98e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb992:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb996:	bf18      	it	ne
   bb998:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb99c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb9a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb9a4:	d038      	beq.n	bba18 <__aeabi_dmul+0xb4>
   bb9a6:	fba0 ce02 	umull	ip, lr, r0, r2
   bb9aa:	f04f 0500 	mov.w	r5, #0
   bb9ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb9b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb9b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb9ba:	f04f 0600 	mov.w	r6, #0
   bb9be:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb9c2:	f09c 0f00 	teq	ip, #0
   bb9c6:	bf18      	it	ne
   bb9c8:	f04e 0e01 	orrne.w	lr, lr, #1
   bb9cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb9d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb9d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb9d8:	d204      	bcs.n	bb9e4 <__aeabi_dmul+0x80>
   bb9da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb9de:	416d      	adcs	r5, r5
   bb9e0:	eb46 0606 	adc.w	r6, r6, r6
   bb9e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb9e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb9ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb9f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb9f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb9f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb9fc:	bf88      	it	hi
   bb9fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bba02:	d81e      	bhi.n	bba42 <__aeabi_dmul+0xde>
   bba04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bba08:	bf08      	it	eq
   bba0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bba0e:	f150 0000 	adcs.w	r0, r0, #0
   bba12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bba16:	bd70      	pop	{r4, r5, r6, pc}
   bba18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bba1c:	ea46 0101 	orr.w	r1, r6, r1
   bba20:	ea40 0002 	orr.w	r0, r0, r2
   bba24:	ea81 0103 	eor.w	r1, r1, r3
   bba28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bba2c:	bfc2      	ittt	gt
   bba2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bba32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bba36:	bd70      	popgt	{r4, r5, r6, pc}
   bba38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bba3c:	f04f 0e00 	mov.w	lr, #0
   bba40:	3c01      	subs	r4, #1
   bba42:	f300 80ab 	bgt.w	bbb9c <__aeabi_dmul+0x238>
   bba46:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bba4a:	bfde      	ittt	le
   bba4c:	2000      	movle	r0, #0
   bba4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bba52:	bd70      	pople	{r4, r5, r6, pc}
   bba54:	f1c4 0400 	rsb	r4, r4, #0
   bba58:	3c20      	subs	r4, #32
   bba5a:	da35      	bge.n	bbac8 <__aeabi_dmul+0x164>
   bba5c:	340c      	adds	r4, #12
   bba5e:	dc1b      	bgt.n	bba98 <__aeabi_dmul+0x134>
   bba60:	f104 0414 	add.w	r4, r4, #20
   bba64:	f1c4 0520 	rsb	r5, r4, #32
   bba68:	fa00 f305 	lsl.w	r3, r0, r5
   bba6c:	fa20 f004 	lsr.w	r0, r0, r4
   bba70:	fa01 f205 	lsl.w	r2, r1, r5
   bba74:	ea40 0002 	orr.w	r0, r0, r2
   bba78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bba7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bba80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bba84:	fa21 f604 	lsr.w	r6, r1, r4
   bba88:	eb42 0106 	adc.w	r1, r2, r6
   bba8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bba90:	bf08      	it	eq
   bba92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bba96:	bd70      	pop	{r4, r5, r6, pc}
   bba98:	f1c4 040c 	rsb	r4, r4, #12
   bba9c:	f1c4 0520 	rsb	r5, r4, #32
   bbaa0:	fa00 f304 	lsl.w	r3, r0, r4
   bbaa4:	fa20 f005 	lsr.w	r0, r0, r5
   bbaa8:	fa01 f204 	lsl.w	r2, r1, r4
   bbaac:	ea40 0002 	orr.w	r0, r0, r2
   bbab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbab4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbab8:	f141 0100 	adc.w	r1, r1, #0
   bbabc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbac0:	bf08      	it	eq
   bbac2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbac6:	bd70      	pop	{r4, r5, r6, pc}
   bbac8:	f1c4 0520 	rsb	r5, r4, #32
   bbacc:	fa00 f205 	lsl.w	r2, r0, r5
   bbad0:	ea4e 0e02 	orr.w	lr, lr, r2
   bbad4:	fa20 f304 	lsr.w	r3, r0, r4
   bbad8:	fa01 f205 	lsl.w	r2, r1, r5
   bbadc:	ea43 0302 	orr.w	r3, r3, r2
   bbae0:	fa21 f004 	lsr.w	r0, r1, r4
   bbae4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbae8:	fa21 f204 	lsr.w	r2, r1, r4
   bbaec:	ea20 0002 	bic.w	r0, r0, r2
   bbaf0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bbaf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbaf8:	bf08      	it	eq
   bbafa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbafe:	bd70      	pop	{r4, r5, r6, pc}
   bbb00:	f094 0f00 	teq	r4, #0
   bbb04:	d10f      	bne.n	bbb26 <__aeabi_dmul+0x1c2>
   bbb06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bbb0a:	0040      	lsls	r0, r0, #1
   bbb0c:	eb41 0101 	adc.w	r1, r1, r1
   bbb10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbb14:	bf08      	it	eq
   bbb16:	3c01      	subeq	r4, #1
   bbb18:	d0f7      	beq.n	bbb0a <__aeabi_dmul+0x1a6>
   bbb1a:	ea41 0106 	orr.w	r1, r1, r6
   bbb1e:	f095 0f00 	teq	r5, #0
   bbb22:	bf18      	it	ne
   bbb24:	4770      	bxne	lr
   bbb26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bbb2a:	0052      	lsls	r2, r2, #1
   bbb2c:	eb43 0303 	adc.w	r3, r3, r3
   bbb30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bbb34:	bf08      	it	eq
   bbb36:	3d01      	subeq	r5, #1
   bbb38:	d0f7      	beq.n	bbb2a <__aeabi_dmul+0x1c6>
   bbb3a:	ea43 0306 	orr.w	r3, r3, r6
   bbb3e:	4770      	bx	lr
   bbb40:	ea94 0f0c 	teq	r4, ip
   bbb44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbb48:	bf18      	it	ne
   bbb4a:	ea95 0f0c 	teqne	r5, ip
   bbb4e:	d00c      	beq.n	bbb6a <__aeabi_dmul+0x206>
   bbb50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbb54:	bf18      	it	ne
   bbb56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbb5a:	d1d1      	bne.n	bbb00 <__aeabi_dmul+0x19c>
   bbb5c:	ea81 0103 	eor.w	r1, r1, r3
   bbb60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbb64:	f04f 0000 	mov.w	r0, #0
   bbb68:	bd70      	pop	{r4, r5, r6, pc}
   bbb6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbb6e:	bf06      	itte	eq
   bbb70:	4610      	moveq	r0, r2
   bbb72:	4619      	moveq	r1, r3
   bbb74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbb78:	d019      	beq.n	bbbae <__aeabi_dmul+0x24a>
   bbb7a:	ea94 0f0c 	teq	r4, ip
   bbb7e:	d102      	bne.n	bbb86 <__aeabi_dmul+0x222>
   bbb80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bbb84:	d113      	bne.n	bbbae <__aeabi_dmul+0x24a>
   bbb86:	ea95 0f0c 	teq	r5, ip
   bbb8a:	d105      	bne.n	bbb98 <__aeabi_dmul+0x234>
   bbb8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bbb90:	bf1c      	itt	ne
   bbb92:	4610      	movne	r0, r2
   bbb94:	4619      	movne	r1, r3
   bbb96:	d10a      	bne.n	bbbae <__aeabi_dmul+0x24a>
   bbb98:	ea81 0103 	eor.w	r1, r1, r3
   bbb9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbba0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbba4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbba8:	f04f 0000 	mov.w	r0, #0
   bbbac:	bd70      	pop	{r4, r5, r6, pc}
   bbbae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbbb2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bbbb6:	bd70      	pop	{r4, r5, r6, pc}

000bbbb8 <__aeabi_ddiv>:
   bbbb8:	b570      	push	{r4, r5, r6, lr}
   bbbba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbbbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbbc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbbc6:	bf1d      	ittte	ne
   bbbc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbbcc:	ea94 0f0c 	teqne	r4, ip
   bbbd0:	ea95 0f0c 	teqne	r5, ip
   bbbd4:	f000 f8a7 	bleq	bbd26 <__aeabi_ddiv+0x16e>
   bbbd8:	eba4 0405 	sub.w	r4, r4, r5
   bbbdc:	ea81 0e03 	eor.w	lr, r1, r3
   bbbe0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbbe4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbbe8:	f000 8088 	beq.w	bbcfc <__aeabi_ddiv+0x144>
   bbbec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbbf0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bbbf4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bbbf8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bbbfc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bbc00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bbc04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bbc08:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bbc0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bbc10:	429d      	cmp	r5, r3
   bbc12:	bf08      	it	eq
   bbc14:	4296      	cmpeq	r6, r2
   bbc16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bbc1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bbc1e:	d202      	bcs.n	bbc26 <__aeabi_ddiv+0x6e>
   bbc20:	085b      	lsrs	r3, r3, #1
   bbc22:	ea4f 0232 	mov.w	r2, r2, rrx
   bbc26:	1ab6      	subs	r6, r6, r2
   bbc28:	eb65 0503 	sbc.w	r5, r5, r3
   bbc2c:	085b      	lsrs	r3, r3, #1
   bbc2e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbc32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bbc36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bbc3a:	ebb6 0e02 	subs.w	lr, r6, r2
   bbc3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbc42:	bf22      	ittt	cs
   bbc44:	1ab6      	subcs	r6, r6, r2
   bbc46:	4675      	movcs	r5, lr
   bbc48:	ea40 000c 	orrcs.w	r0, r0, ip
   bbc4c:	085b      	lsrs	r3, r3, #1
   bbc4e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbc52:	ebb6 0e02 	subs.w	lr, r6, r2
   bbc56:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbc5a:	bf22      	ittt	cs
   bbc5c:	1ab6      	subcs	r6, r6, r2
   bbc5e:	4675      	movcs	r5, lr
   bbc60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bbc64:	085b      	lsrs	r3, r3, #1
   bbc66:	ea4f 0232 	mov.w	r2, r2, rrx
   bbc6a:	ebb6 0e02 	subs.w	lr, r6, r2
   bbc6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbc72:	bf22      	ittt	cs
   bbc74:	1ab6      	subcs	r6, r6, r2
   bbc76:	4675      	movcs	r5, lr
   bbc78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bbc7c:	085b      	lsrs	r3, r3, #1
   bbc7e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbc82:	ebb6 0e02 	subs.w	lr, r6, r2
   bbc86:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbc8a:	bf22      	ittt	cs
   bbc8c:	1ab6      	subcs	r6, r6, r2
   bbc8e:	4675      	movcs	r5, lr
   bbc90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bbc94:	ea55 0e06 	orrs.w	lr, r5, r6
   bbc98:	d018      	beq.n	bbccc <__aeabi_ddiv+0x114>
   bbc9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bbc9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbca2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbca6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbcaa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbcae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbcb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbcb6:	d1c0      	bne.n	bbc3a <__aeabi_ddiv+0x82>
   bbcb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbcbc:	d10b      	bne.n	bbcd6 <__aeabi_ddiv+0x11e>
   bbcbe:	ea41 0100 	orr.w	r1, r1, r0
   bbcc2:	f04f 0000 	mov.w	r0, #0
   bbcc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbcca:	e7b6      	b.n	bbc3a <__aeabi_ddiv+0x82>
   bbccc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbcd0:	bf04      	itt	eq
   bbcd2:	4301      	orreq	r1, r0
   bbcd4:	2000      	moveq	r0, #0
   bbcd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbcda:	bf88      	it	hi
   bbcdc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbce0:	f63f aeaf 	bhi.w	bba42 <__aeabi_dmul+0xde>
   bbce4:	ebb5 0c03 	subs.w	ip, r5, r3
   bbce8:	bf04      	itt	eq
   bbcea:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbcee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbcf2:	f150 0000 	adcs.w	r0, r0, #0
   bbcf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbcfa:	bd70      	pop	{r4, r5, r6, pc}
   bbcfc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbd00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbd04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbd08:	bfc2      	ittt	gt
   bbd0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbd0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbd12:	bd70      	popgt	{r4, r5, r6, pc}
   bbd14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbd18:	f04f 0e00 	mov.w	lr, #0
   bbd1c:	3c01      	subs	r4, #1
   bbd1e:	e690      	b.n	bba42 <__aeabi_dmul+0xde>
   bbd20:	ea45 0e06 	orr.w	lr, r5, r6
   bbd24:	e68d      	b.n	bba42 <__aeabi_dmul+0xde>
   bbd26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbd2a:	ea94 0f0c 	teq	r4, ip
   bbd2e:	bf08      	it	eq
   bbd30:	ea95 0f0c 	teqeq	r5, ip
   bbd34:	f43f af3b 	beq.w	bbbae <__aeabi_dmul+0x24a>
   bbd38:	ea94 0f0c 	teq	r4, ip
   bbd3c:	d10a      	bne.n	bbd54 <__aeabi_ddiv+0x19c>
   bbd3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbd42:	f47f af34 	bne.w	bbbae <__aeabi_dmul+0x24a>
   bbd46:	ea95 0f0c 	teq	r5, ip
   bbd4a:	f47f af25 	bne.w	bbb98 <__aeabi_dmul+0x234>
   bbd4e:	4610      	mov	r0, r2
   bbd50:	4619      	mov	r1, r3
   bbd52:	e72c      	b.n	bbbae <__aeabi_dmul+0x24a>
   bbd54:	ea95 0f0c 	teq	r5, ip
   bbd58:	d106      	bne.n	bbd68 <__aeabi_ddiv+0x1b0>
   bbd5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbd5e:	f43f aefd 	beq.w	bbb5c <__aeabi_dmul+0x1f8>
   bbd62:	4610      	mov	r0, r2
   bbd64:	4619      	mov	r1, r3
   bbd66:	e722      	b.n	bbbae <__aeabi_dmul+0x24a>
   bbd68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbd6c:	bf18      	it	ne
   bbd6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbd72:	f47f aec5 	bne.w	bbb00 <__aeabi_dmul+0x19c>
   bbd76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbd7a:	f47f af0d 	bne.w	bbb98 <__aeabi_dmul+0x234>
   bbd7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbd82:	f47f aeeb 	bne.w	bbb5c <__aeabi_dmul+0x1f8>
   bbd86:	e712      	b.n	bbbae <__aeabi_dmul+0x24a>

000bbd88 <__gedf2>:
   bbd88:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbd8c:	e006      	b.n	bbd9c <__cmpdf2+0x4>
   bbd8e:	bf00      	nop

000bbd90 <__ledf2>:
   bbd90:	f04f 0c01 	mov.w	ip, #1
   bbd94:	e002      	b.n	bbd9c <__cmpdf2+0x4>
   bbd96:	bf00      	nop

000bbd98 <__cmpdf2>:
   bbd98:	f04f 0c01 	mov.w	ip, #1
   bbd9c:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbda0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbda4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbda8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbdac:	bf18      	it	ne
   bbdae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbdb2:	d01b      	beq.n	bbdec <__cmpdf2+0x54>
   bbdb4:	b001      	add	sp, #4
   bbdb6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbdba:	bf0c      	ite	eq
   bbdbc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbdc0:	ea91 0f03 	teqne	r1, r3
   bbdc4:	bf02      	ittt	eq
   bbdc6:	ea90 0f02 	teqeq	r0, r2
   bbdca:	2000      	moveq	r0, #0
   bbdcc:	4770      	bxeq	lr
   bbdce:	f110 0f00 	cmn.w	r0, #0
   bbdd2:	ea91 0f03 	teq	r1, r3
   bbdd6:	bf58      	it	pl
   bbdd8:	4299      	cmppl	r1, r3
   bbdda:	bf08      	it	eq
   bbddc:	4290      	cmpeq	r0, r2
   bbdde:	bf2c      	ite	cs
   bbde0:	17d8      	asrcs	r0, r3, #31
   bbde2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbde6:	f040 0001 	orr.w	r0, r0, #1
   bbdea:	4770      	bx	lr
   bbdec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbdf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbdf4:	d102      	bne.n	bbdfc <__cmpdf2+0x64>
   bbdf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbdfa:	d107      	bne.n	bbe0c <__cmpdf2+0x74>
   bbdfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbe00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbe04:	d1d6      	bne.n	bbdb4 <__cmpdf2+0x1c>
   bbe06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbe0a:	d0d3      	beq.n	bbdb4 <__cmpdf2+0x1c>
   bbe0c:	f85d 0b04 	ldr.w	r0, [sp], #4
   bbe10:	4770      	bx	lr
   bbe12:	bf00      	nop

000bbe14 <__aeabi_cdrcmple>:
   bbe14:	4684      	mov	ip, r0
   bbe16:	4610      	mov	r0, r2
   bbe18:	4662      	mov	r2, ip
   bbe1a:	468c      	mov	ip, r1
   bbe1c:	4619      	mov	r1, r3
   bbe1e:	4663      	mov	r3, ip
   bbe20:	e000      	b.n	bbe24 <__aeabi_cdcmpeq>
   bbe22:	bf00      	nop

000bbe24 <__aeabi_cdcmpeq>:
   bbe24:	b501      	push	{r0, lr}
   bbe26:	f7ff ffb7 	bl	bbd98 <__cmpdf2>
   bbe2a:	2800      	cmp	r0, #0
   bbe2c:	bf48      	it	mi
   bbe2e:	f110 0f00 	cmnmi.w	r0, #0
   bbe32:	bd01      	pop	{r0, pc}

000bbe34 <__aeabi_dcmpeq>:
   bbe34:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbe38:	f7ff fff4 	bl	bbe24 <__aeabi_cdcmpeq>
   bbe3c:	bf0c      	ite	eq
   bbe3e:	2001      	moveq	r0, #1
   bbe40:	2000      	movne	r0, #0
   bbe42:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe46:	bf00      	nop

000bbe48 <__aeabi_dcmplt>:
   bbe48:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbe4c:	f7ff ffea 	bl	bbe24 <__aeabi_cdcmpeq>
   bbe50:	bf34      	ite	cc
   bbe52:	2001      	movcc	r0, #1
   bbe54:	2000      	movcs	r0, #0
   bbe56:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe5a:	bf00      	nop

000bbe5c <__aeabi_dcmple>:
   bbe5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbe60:	f7ff ffe0 	bl	bbe24 <__aeabi_cdcmpeq>
   bbe64:	bf94      	ite	ls
   bbe66:	2001      	movls	r0, #1
   bbe68:	2000      	movhi	r0, #0
   bbe6a:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe6e:	bf00      	nop

000bbe70 <__aeabi_dcmpge>:
   bbe70:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbe74:	f7ff ffce 	bl	bbe14 <__aeabi_cdrcmple>
   bbe78:	bf94      	ite	ls
   bbe7a:	2001      	movls	r0, #1
   bbe7c:	2000      	movhi	r0, #0
   bbe7e:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe82:	bf00      	nop

000bbe84 <__aeabi_dcmpgt>:
   bbe84:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbe88:	f7ff ffc4 	bl	bbe14 <__aeabi_cdrcmple>
   bbe8c:	bf34      	ite	cc
   bbe8e:	2001      	movcc	r0, #1
   bbe90:	2000      	movcs	r0, #0
   bbe92:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe96:	bf00      	nop

000bbe98 <__aeabi_dcmpun>:
   bbe98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbe9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbea0:	d102      	bne.n	bbea8 <__aeabi_dcmpun+0x10>
   bbea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbea6:	d10a      	bne.n	bbebe <__aeabi_dcmpun+0x26>
   bbea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbeac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbeb0:	d102      	bne.n	bbeb8 <__aeabi_dcmpun+0x20>
   bbeb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbeb6:	d102      	bne.n	bbebe <__aeabi_dcmpun+0x26>
   bbeb8:	f04f 0000 	mov.w	r0, #0
   bbebc:	4770      	bx	lr
   bbebe:	f04f 0001 	mov.w	r0, #1
   bbec2:	4770      	bx	lr

000bbec4 <__aeabi_d2iz>:
   bbec4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbec8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbecc:	d215      	bcs.n	bbefa <__aeabi_d2iz+0x36>
   bbece:	d511      	bpl.n	bbef4 <__aeabi_d2iz+0x30>
   bbed0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbed4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbed8:	d912      	bls.n	bbf00 <__aeabi_d2iz+0x3c>
   bbeda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbede:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbee2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbee6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbeea:	fa23 f002 	lsr.w	r0, r3, r2
   bbeee:	bf18      	it	ne
   bbef0:	4240      	negne	r0, r0
   bbef2:	4770      	bx	lr
   bbef4:	f04f 0000 	mov.w	r0, #0
   bbef8:	4770      	bx	lr
   bbefa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbefe:	d105      	bne.n	bbf0c <__aeabi_d2iz+0x48>
   bbf00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bbf04:	bf08      	it	eq
   bbf06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bbf0a:	4770      	bx	lr
   bbf0c:	f04f 0000 	mov.w	r0, #0
   bbf10:	4770      	bx	lr
   bbf12:	bf00      	nop

000bbf14 <__aeabi_d2uiz>:
   bbf14:	004a      	lsls	r2, r1, #1
   bbf16:	d211      	bcs.n	bbf3c <__aeabi_d2uiz+0x28>
   bbf18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbf1c:	d211      	bcs.n	bbf42 <__aeabi_d2uiz+0x2e>
   bbf1e:	d50d      	bpl.n	bbf3c <__aeabi_d2uiz+0x28>
   bbf20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbf24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbf28:	d40e      	bmi.n	bbf48 <__aeabi_d2uiz+0x34>
   bbf2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbf2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbf32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbf36:	fa23 f002 	lsr.w	r0, r3, r2
   bbf3a:	4770      	bx	lr
   bbf3c:	f04f 0000 	mov.w	r0, #0
   bbf40:	4770      	bx	lr
   bbf42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbf46:	d102      	bne.n	bbf4e <__aeabi_d2uiz+0x3a>
   bbf48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbf4c:	4770      	bx	lr
   bbf4e:	f04f 0000 	mov.w	r0, #0
   bbf52:	4770      	bx	lr

000bbf54 <asctime_r>:
   bbf54:	b510      	push	{r4, lr}
   bbf56:	460c      	mov	r4, r1
   bbf58:	6941      	ldr	r1, [r0, #20]
   bbf5a:	6903      	ldr	r3, [r0, #16]
   bbf5c:	6982      	ldr	r2, [r0, #24]
   bbf5e:	b086      	sub	sp, #24
   bbf60:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bbf64:	9104      	str	r1, [sp, #16]
   bbf66:	6801      	ldr	r1, [r0, #0]
   bbf68:	9103      	str	r1, [sp, #12]
   bbf6a:	6841      	ldr	r1, [r0, #4]
   bbf6c:	9102      	str	r1, [sp, #8]
   bbf6e:	6881      	ldr	r1, [r0, #8]
   bbf70:	9101      	str	r1, [sp, #4]
   bbf72:	68c1      	ldr	r1, [r0, #12]
   bbf74:	9100      	str	r1, [sp, #0]
   bbf76:	4907      	ldr	r1, [pc, #28]	; (bbf94 <asctime_r+0x40>)
   bbf78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bbf7c:	440b      	add	r3, r1
   bbf7e:	4906      	ldr	r1, [pc, #24]	; (bbf98 <asctime_r+0x44>)
   bbf80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bbf84:	440a      	add	r2, r1
   bbf86:	4620      	mov	r0, r4
   bbf88:	4904      	ldr	r1, [pc, #16]	; (bbf9c <asctime_r+0x48>)
   bbf8a:	f7fc fc99 	bl	b88c0 <siprintf>
   bbf8e:	4620      	mov	r0, r4
   bbf90:	b006      	add	sp, #24
   bbf92:	bd10      	pop	{r4, pc}
   bbf94:	000bd54a 	.word	0x000bd54a
   bbf98:	000bd535 	.word	0x000bd535
   bbf9c:	000bd515 	.word	0x000bd515

000bbfa0 <atexit>:
   bbfa0:	2300      	movs	r3, #0
   bbfa2:	4601      	mov	r1, r0
   bbfa4:	461a      	mov	r2, r3
   bbfa6:	4618      	mov	r0, r3
   bbfa8:	f000 b9ba 	b.w	bc320 <__register_exitproc>

000bbfac <gmtime>:
   bbfac:	b538      	push	{r3, r4, r5, lr}
   bbfae:	4b0b      	ldr	r3, [pc, #44]	; (bbfdc <gmtime+0x30>)
   bbfb0:	681d      	ldr	r5, [r3, #0]
   bbfb2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bbfb4:	4604      	mov	r4, r0
   bbfb6:	b953      	cbnz	r3, bbfce <gmtime+0x22>
   bbfb8:	2024      	movs	r0, #36	; 0x24
   bbfba:	f7fc fc69 	bl	b8890 <malloc>
   bbfbe:	4602      	mov	r2, r0
   bbfc0:	63e8      	str	r0, [r5, #60]	; 0x3c
   bbfc2:	b920      	cbnz	r0, bbfce <gmtime+0x22>
   bbfc4:	4b06      	ldr	r3, [pc, #24]	; (bbfe0 <gmtime+0x34>)
   bbfc6:	4807      	ldr	r0, [pc, #28]	; (bbfe4 <gmtime+0x38>)
   bbfc8:	2139      	movs	r1, #57	; 0x39
   bbfca:	f7fc fca1 	bl	b8910 <__assert_func>
   bbfce:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bbfd0:	4620      	mov	r0, r4
   bbfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbfd6:	f7fc bcbb 	b.w	b8950 <gmtime_r>
   bbfda:	bf00      	nop
   bbfdc:	2003ded0 	.word	0x2003ded0
   bbfe0:	000bd56e 	.word	0x000bd56e
   bbfe4:	000bd585 	.word	0x000bd585

000bbfe8 <isprint>:
   bbfe8:	4b02      	ldr	r3, [pc, #8]	; (bbff4 <isprint+0xc>)
   bbfea:	4418      	add	r0, r3
   bbfec:	7840      	ldrb	r0, [r0, #1]
   bbfee:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbff2:	4770      	bx	lr
   bbff4:	000bd637 	.word	0x000bd637

000bbff8 <memcpy>:
   bbff8:	440a      	add	r2, r1
   bbffa:	4291      	cmp	r1, r2
   bbffc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bc000:	d100      	bne.n	bc004 <memcpy+0xc>
   bc002:	4770      	bx	lr
   bc004:	b510      	push	{r4, lr}
   bc006:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc00a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc00e:	4291      	cmp	r1, r2
   bc010:	d1f9      	bne.n	bc006 <memcpy+0xe>
   bc012:	bd10      	pop	{r4, pc}

000bc014 <memmove>:
   bc014:	4288      	cmp	r0, r1
   bc016:	b510      	push	{r4, lr}
   bc018:	eb01 0402 	add.w	r4, r1, r2
   bc01c:	d902      	bls.n	bc024 <memmove+0x10>
   bc01e:	4284      	cmp	r4, r0
   bc020:	4623      	mov	r3, r4
   bc022:	d807      	bhi.n	bc034 <memmove+0x20>
   bc024:	1e43      	subs	r3, r0, #1
   bc026:	42a1      	cmp	r1, r4
   bc028:	d008      	beq.n	bc03c <memmove+0x28>
   bc02a:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc02e:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc032:	e7f8      	b.n	bc026 <memmove+0x12>
   bc034:	4402      	add	r2, r0
   bc036:	4601      	mov	r1, r0
   bc038:	428a      	cmp	r2, r1
   bc03a:	d100      	bne.n	bc03e <memmove+0x2a>
   bc03c:	bd10      	pop	{r4, pc}
   bc03e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc042:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc046:	e7f7      	b.n	bc038 <memmove+0x24>

000bc048 <memset>:
   bc048:	4402      	add	r2, r0
   bc04a:	4603      	mov	r3, r0
   bc04c:	4293      	cmp	r3, r2
   bc04e:	d100      	bne.n	bc052 <memset+0xa>
   bc050:	4770      	bx	lr
   bc052:	f803 1b01 	strb.w	r1, [r3], #1
   bc056:	e7f9      	b.n	bc04c <memset+0x4>

000bc058 <srand>:
   bc058:	b538      	push	{r3, r4, r5, lr}
   bc05a:	4b10      	ldr	r3, [pc, #64]	; (bc09c <srand+0x44>)
   bc05c:	681d      	ldr	r5, [r3, #0]
   bc05e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc060:	4604      	mov	r4, r0
   bc062:	b9b3      	cbnz	r3, bc092 <srand+0x3a>
   bc064:	2018      	movs	r0, #24
   bc066:	f7fc fc13 	bl	b8890 <malloc>
   bc06a:	4602      	mov	r2, r0
   bc06c:	63a8      	str	r0, [r5, #56]	; 0x38
   bc06e:	b920      	cbnz	r0, bc07a <srand+0x22>
   bc070:	4b0b      	ldr	r3, [pc, #44]	; (bc0a0 <srand+0x48>)
   bc072:	480c      	ldr	r0, [pc, #48]	; (bc0a4 <srand+0x4c>)
   bc074:	2142      	movs	r1, #66	; 0x42
   bc076:	f7fc fc4b 	bl	b8910 <__assert_func>
   bc07a:	490b      	ldr	r1, [pc, #44]	; (bc0a8 <srand+0x50>)
   bc07c:	4b0b      	ldr	r3, [pc, #44]	; (bc0ac <srand+0x54>)
   bc07e:	e9c0 1300 	strd	r1, r3, [r0]
   bc082:	4b0b      	ldr	r3, [pc, #44]	; (bc0b0 <srand+0x58>)
   bc084:	6083      	str	r3, [r0, #8]
   bc086:	230b      	movs	r3, #11
   bc088:	8183      	strh	r3, [r0, #12]
   bc08a:	2100      	movs	r1, #0
   bc08c:	2001      	movs	r0, #1
   bc08e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc092:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc094:	2200      	movs	r2, #0
   bc096:	611c      	str	r4, [r3, #16]
   bc098:	615a      	str	r2, [r3, #20]
   bc09a:	bd38      	pop	{r3, r4, r5, pc}
   bc09c:	2003ded0 	.word	0x2003ded0
   bc0a0:	000bd56e 	.word	0x000bd56e
   bc0a4:	000bd5de 	.word	0x000bd5de
   bc0a8:	abcd330e 	.word	0xabcd330e
   bc0ac:	e66d1234 	.word	0xe66d1234
   bc0b0:	0005deec 	.word	0x0005deec

000bc0b4 <rand>:
   bc0b4:	4b16      	ldr	r3, [pc, #88]	; (bc110 <rand+0x5c>)
   bc0b6:	b510      	push	{r4, lr}
   bc0b8:	681c      	ldr	r4, [r3, #0]
   bc0ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc0bc:	b9b3      	cbnz	r3, bc0ec <rand+0x38>
   bc0be:	2018      	movs	r0, #24
   bc0c0:	f7fc fbe6 	bl	b8890 <malloc>
   bc0c4:	63a0      	str	r0, [r4, #56]	; 0x38
   bc0c6:	b928      	cbnz	r0, bc0d4 <rand+0x20>
   bc0c8:	4602      	mov	r2, r0
   bc0ca:	4b12      	ldr	r3, [pc, #72]	; (bc114 <rand+0x60>)
   bc0cc:	4812      	ldr	r0, [pc, #72]	; (bc118 <rand+0x64>)
   bc0ce:	214e      	movs	r1, #78	; 0x4e
   bc0d0:	f7fc fc1e 	bl	b8910 <__assert_func>
   bc0d4:	4a11      	ldr	r2, [pc, #68]	; (bc11c <rand+0x68>)
   bc0d6:	4b12      	ldr	r3, [pc, #72]	; (bc120 <rand+0x6c>)
   bc0d8:	e9c0 2300 	strd	r2, r3, [r0]
   bc0dc:	4b11      	ldr	r3, [pc, #68]	; (bc124 <rand+0x70>)
   bc0de:	6083      	str	r3, [r0, #8]
   bc0e0:	230b      	movs	r3, #11
   bc0e2:	8183      	strh	r3, [r0, #12]
   bc0e4:	2201      	movs	r2, #1
   bc0e6:	2300      	movs	r3, #0
   bc0e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bc0ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bc0ee:	4a0e      	ldr	r2, [pc, #56]	; (bc128 <rand+0x74>)
   bc0f0:	6920      	ldr	r0, [r4, #16]
   bc0f2:	6963      	ldr	r3, [r4, #20]
   bc0f4:	490d      	ldr	r1, [pc, #52]	; (bc12c <rand+0x78>)
   bc0f6:	4342      	muls	r2, r0
   bc0f8:	fb01 2203 	mla	r2, r1, r3, r2
   bc0fc:	fba0 0101 	umull	r0, r1, r0, r1
   bc100:	1c43      	adds	r3, r0, #1
   bc102:	eb42 0001 	adc.w	r0, r2, r1
   bc106:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bc10a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bc10e:	bd10      	pop	{r4, pc}
   bc110:	2003ded0 	.word	0x2003ded0
   bc114:	000bd56e 	.word	0x000bd56e
   bc118:	000bd5de 	.word	0x000bd5de
   bc11c:	abcd330e 	.word	0xabcd330e
   bc120:	e66d1234 	.word	0xe66d1234
   bc124:	0005deec 	.word	0x0005deec
   bc128:	5851f42d 	.word	0x5851f42d
   bc12c:	4c957f2d 	.word	0x4c957f2d

000bc130 <strchr>:
   bc130:	b2c9      	uxtb	r1, r1
   bc132:	4603      	mov	r3, r0
   bc134:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc138:	b11a      	cbz	r2, bc142 <strchr+0x12>
   bc13a:	428a      	cmp	r2, r1
   bc13c:	d1f9      	bne.n	bc132 <strchr+0x2>
   bc13e:	4618      	mov	r0, r3
   bc140:	4770      	bx	lr
   bc142:	2900      	cmp	r1, #0
   bc144:	bf18      	it	ne
   bc146:	2300      	movne	r3, #0
   bc148:	e7f9      	b.n	bc13e <strchr+0xe>

000bc14a <strchrnul>:
   bc14a:	b510      	push	{r4, lr}
   bc14c:	4604      	mov	r4, r0
   bc14e:	f7ff ffef 	bl	bc130 <strchr>
   bc152:	b918      	cbnz	r0, bc15c <strchrnul+0x12>
   bc154:	4620      	mov	r0, r4
   bc156:	f000 f814 	bl	bc182 <strlen>
   bc15a:	4420      	add	r0, r4
   bc15c:	bd10      	pop	{r4, pc}

000bc15e <strcmp>:
   bc15e:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc162:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc166:	2a01      	cmp	r2, #1
   bc168:	bf28      	it	cs
   bc16a:	429a      	cmpcs	r2, r3
   bc16c:	d0f7      	beq.n	bc15e <strcmp>
   bc16e:	1ad0      	subs	r0, r2, r3
   bc170:	4770      	bx	lr

000bc172 <strcpy>:
   bc172:	4603      	mov	r3, r0
   bc174:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc178:	f803 2b01 	strb.w	r2, [r3], #1
   bc17c:	2a00      	cmp	r2, #0
   bc17e:	d1f9      	bne.n	bc174 <strcpy+0x2>
   bc180:	4770      	bx	lr

000bc182 <strlen>:
   bc182:	4603      	mov	r3, r0
   bc184:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc188:	2a00      	cmp	r2, #0
   bc18a:	d1fb      	bne.n	bc184 <strlen+0x2>
   bc18c:	1a18      	subs	r0, r3, r0
   bc18e:	3801      	subs	r0, #1
   bc190:	4770      	bx	lr

000bc192 <strncmp>:
   bc192:	b510      	push	{r4, lr}
   bc194:	b17a      	cbz	r2, bc1b6 <strncmp+0x24>
   bc196:	4603      	mov	r3, r0
   bc198:	3901      	subs	r1, #1
   bc19a:	1884      	adds	r4, r0, r2
   bc19c:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc1a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc1a4:	4290      	cmp	r0, r2
   bc1a6:	d101      	bne.n	bc1ac <strncmp+0x1a>
   bc1a8:	42a3      	cmp	r3, r4
   bc1aa:	d101      	bne.n	bc1b0 <strncmp+0x1e>
   bc1ac:	1a80      	subs	r0, r0, r2
   bc1ae:	bd10      	pop	{r4, pc}
   bc1b0:	2800      	cmp	r0, #0
   bc1b2:	d1f3      	bne.n	bc19c <strncmp+0xa>
   bc1b4:	e7fa      	b.n	bc1ac <strncmp+0x1a>
   bc1b6:	4610      	mov	r0, r2
   bc1b8:	e7f9      	b.n	bc1ae <strncmp+0x1c>

000bc1ba <strncpy>:
   bc1ba:	b510      	push	{r4, lr}
   bc1bc:	3901      	subs	r1, #1
   bc1be:	4603      	mov	r3, r0
   bc1c0:	b132      	cbz	r2, bc1d0 <strncpy+0x16>
   bc1c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc1c6:	f803 4b01 	strb.w	r4, [r3], #1
   bc1ca:	3a01      	subs	r2, #1
   bc1cc:	2c00      	cmp	r4, #0
   bc1ce:	d1f7      	bne.n	bc1c0 <strncpy+0x6>
   bc1d0:	441a      	add	r2, r3
   bc1d2:	2100      	movs	r1, #0
   bc1d4:	4293      	cmp	r3, r2
   bc1d6:	d100      	bne.n	bc1da <strncpy+0x20>
   bc1d8:	bd10      	pop	{r4, pc}
   bc1da:	f803 1b01 	strb.w	r1, [r3], #1
   bc1de:	e7f9      	b.n	bc1d4 <strncpy+0x1a>

000bc1e0 <strrchr>:
   bc1e0:	b538      	push	{r3, r4, r5, lr}
   bc1e2:	4603      	mov	r3, r0
   bc1e4:	460c      	mov	r4, r1
   bc1e6:	b969      	cbnz	r1, bc204 <strrchr+0x24>
   bc1e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc1ec:	f7ff bfa0 	b.w	bc130 <strchr>
   bc1f0:	1c43      	adds	r3, r0, #1
   bc1f2:	4605      	mov	r5, r0
   bc1f4:	4621      	mov	r1, r4
   bc1f6:	4618      	mov	r0, r3
   bc1f8:	f7ff ff9a 	bl	bc130 <strchr>
   bc1fc:	2800      	cmp	r0, #0
   bc1fe:	d1f7      	bne.n	bc1f0 <strrchr+0x10>
   bc200:	4628      	mov	r0, r5
   bc202:	bd38      	pop	{r3, r4, r5, pc}
   bc204:	2500      	movs	r5, #0
   bc206:	e7f5      	b.n	bc1f4 <strrchr+0x14>

000bc208 <_strtol_l.constprop.0>:
   bc208:	2b01      	cmp	r3, #1
   bc20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc20e:	d001      	beq.n	bc214 <_strtol_l.constprop.0+0xc>
   bc210:	2b24      	cmp	r3, #36	; 0x24
   bc212:	d906      	bls.n	bc222 <_strtol_l.constprop.0+0x1a>
   bc214:	f7fc fb74 	bl	b8900 <__errno>
   bc218:	2316      	movs	r3, #22
   bc21a:	6003      	str	r3, [r0, #0]
   bc21c:	2000      	movs	r0, #0
   bc21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc222:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc308 <_strtol_l.constprop.0+0x100>
   bc226:	460d      	mov	r5, r1
   bc228:	462e      	mov	r6, r5
   bc22a:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc22e:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc232:	f017 0708 	ands.w	r7, r7, #8
   bc236:	d1f7      	bne.n	bc228 <_strtol_l.constprop.0+0x20>
   bc238:	2c2d      	cmp	r4, #45	; 0x2d
   bc23a:	d132      	bne.n	bc2a2 <_strtol_l.constprop.0+0x9a>
   bc23c:	782c      	ldrb	r4, [r5, #0]
   bc23e:	2701      	movs	r7, #1
   bc240:	1cb5      	adds	r5, r6, #2
   bc242:	2b00      	cmp	r3, #0
   bc244:	d05b      	beq.n	bc2fe <_strtol_l.constprop.0+0xf6>
   bc246:	2b10      	cmp	r3, #16
   bc248:	d109      	bne.n	bc25e <_strtol_l.constprop.0+0x56>
   bc24a:	2c30      	cmp	r4, #48	; 0x30
   bc24c:	d107      	bne.n	bc25e <_strtol_l.constprop.0+0x56>
   bc24e:	782c      	ldrb	r4, [r5, #0]
   bc250:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc254:	2c58      	cmp	r4, #88	; 0x58
   bc256:	d14d      	bne.n	bc2f4 <_strtol_l.constprop.0+0xec>
   bc258:	786c      	ldrb	r4, [r5, #1]
   bc25a:	2310      	movs	r3, #16
   bc25c:	3502      	adds	r5, #2
   bc25e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc262:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc266:	f04f 0c00 	mov.w	ip, #0
   bc26a:	fbb8 f9f3 	udiv	r9, r8, r3
   bc26e:	4666      	mov	r6, ip
   bc270:	fb03 8a19 	mls	sl, r3, r9, r8
   bc274:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc278:	f1be 0f09 	cmp.w	lr, #9
   bc27c:	d816      	bhi.n	bc2ac <_strtol_l.constprop.0+0xa4>
   bc27e:	4674      	mov	r4, lr
   bc280:	42a3      	cmp	r3, r4
   bc282:	dd24      	ble.n	bc2ce <_strtol_l.constprop.0+0xc6>
   bc284:	f1bc 0f00 	cmp.w	ip, #0
   bc288:	db1e      	blt.n	bc2c8 <_strtol_l.constprop.0+0xc0>
   bc28a:	45b1      	cmp	r9, r6
   bc28c:	d31c      	bcc.n	bc2c8 <_strtol_l.constprop.0+0xc0>
   bc28e:	d101      	bne.n	bc294 <_strtol_l.constprop.0+0x8c>
   bc290:	45a2      	cmp	sl, r4
   bc292:	db19      	blt.n	bc2c8 <_strtol_l.constprop.0+0xc0>
   bc294:	fb06 4603 	mla	r6, r6, r3, r4
   bc298:	f04f 0c01 	mov.w	ip, #1
   bc29c:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc2a0:	e7e8      	b.n	bc274 <_strtol_l.constprop.0+0x6c>
   bc2a2:	2c2b      	cmp	r4, #43	; 0x2b
   bc2a4:	bf04      	itt	eq
   bc2a6:	782c      	ldrbeq	r4, [r5, #0]
   bc2a8:	1cb5      	addeq	r5, r6, #2
   bc2aa:	e7ca      	b.n	bc242 <_strtol_l.constprop.0+0x3a>
   bc2ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc2b0:	f1be 0f19 	cmp.w	lr, #25
   bc2b4:	d801      	bhi.n	bc2ba <_strtol_l.constprop.0+0xb2>
   bc2b6:	3c37      	subs	r4, #55	; 0x37
   bc2b8:	e7e2      	b.n	bc280 <_strtol_l.constprop.0+0x78>
   bc2ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc2be:	f1be 0f19 	cmp.w	lr, #25
   bc2c2:	d804      	bhi.n	bc2ce <_strtol_l.constprop.0+0xc6>
   bc2c4:	3c57      	subs	r4, #87	; 0x57
   bc2c6:	e7db      	b.n	bc280 <_strtol_l.constprop.0+0x78>
   bc2c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc2cc:	e7e6      	b.n	bc29c <_strtol_l.constprop.0+0x94>
   bc2ce:	f1bc 0f00 	cmp.w	ip, #0
   bc2d2:	da05      	bge.n	bc2e0 <_strtol_l.constprop.0+0xd8>
   bc2d4:	2322      	movs	r3, #34	; 0x22
   bc2d6:	6003      	str	r3, [r0, #0]
   bc2d8:	4646      	mov	r6, r8
   bc2da:	b942      	cbnz	r2, bc2ee <_strtol_l.constprop.0+0xe6>
   bc2dc:	4630      	mov	r0, r6
   bc2de:	e79e      	b.n	bc21e <_strtol_l.constprop.0+0x16>
   bc2e0:	b107      	cbz	r7, bc2e4 <_strtol_l.constprop.0+0xdc>
   bc2e2:	4276      	negs	r6, r6
   bc2e4:	2a00      	cmp	r2, #0
   bc2e6:	d0f9      	beq.n	bc2dc <_strtol_l.constprop.0+0xd4>
   bc2e8:	f1bc 0f00 	cmp.w	ip, #0
   bc2ec:	d000      	beq.n	bc2f0 <_strtol_l.constprop.0+0xe8>
   bc2ee:	1e69      	subs	r1, r5, #1
   bc2f0:	6011      	str	r1, [r2, #0]
   bc2f2:	e7f3      	b.n	bc2dc <_strtol_l.constprop.0+0xd4>
   bc2f4:	2430      	movs	r4, #48	; 0x30
   bc2f6:	2b00      	cmp	r3, #0
   bc2f8:	d1b1      	bne.n	bc25e <_strtol_l.constprop.0+0x56>
   bc2fa:	2308      	movs	r3, #8
   bc2fc:	e7af      	b.n	bc25e <_strtol_l.constprop.0+0x56>
   bc2fe:	2c30      	cmp	r4, #48	; 0x30
   bc300:	d0a5      	beq.n	bc24e <_strtol_l.constprop.0+0x46>
   bc302:	230a      	movs	r3, #10
   bc304:	e7ab      	b.n	bc25e <_strtol_l.constprop.0+0x56>
   bc306:	bf00      	nop
   bc308:	000bd638 	.word	0x000bd638

000bc30c <strtol>:
   bc30c:	4613      	mov	r3, r2
   bc30e:	460a      	mov	r2, r1
   bc310:	4601      	mov	r1, r0
   bc312:	4802      	ldr	r0, [pc, #8]	; (bc31c <strtol+0x10>)
   bc314:	6800      	ldr	r0, [r0, #0]
   bc316:	f7ff bf77 	b.w	bc208 <_strtol_l.constprop.0>
   bc31a:	bf00      	nop
   bc31c:	2003ded0 	.word	0x2003ded0

000bc320 <__register_exitproc>:
   bc320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc324:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc3e0 <__register_exitproc+0xc0>
   bc328:	4606      	mov	r6, r0
   bc32a:	f8d8 0000 	ldr.w	r0, [r8]
   bc32e:	461f      	mov	r7, r3
   bc330:	460d      	mov	r5, r1
   bc332:	4691      	mov	r9, r2
   bc334:	f000 f856 	bl	bc3e4 <__retarget_lock_acquire_recursive>
   bc338:	4b25      	ldr	r3, [pc, #148]	; (bc3d0 <__register_exitproc+0xb0>)
   bc33a:	681c      	ldr	r4, [r3, #0]
   bc33c:	b934      	cbnz	r4, bc34c <__register_exitproc+0x2c>
   bc33e:	4c25      	ldr	r4, [pc, #148]	; (bc3d4 <__register_exitproc+0xb4>)
   bc340:	601c      	str	r4, [r3, #0]
   bc342:	4b25      	ldr	r3, [pc, #148]	; (bc3d8 <__register_exitproc+0xb8>)
   bc344:	b113      	cbz	r3, bc34c <__register_exitproc+0x2c>
   bc346:	681b      	ldr	r3, [r3, #0]
   bc348:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc34c:	6863      	ldr	r3, [r4, #4]
   bc34e:	2b1f      	cmp	r3, #31
   bc350:	dd07      	ble.n	bc362 <__register_exitproc+0x42>
   bc352:	f8d8 0000 	ldr.w	r0, [r8]
   bc356:	f000 f847 	bl	bc3e8 <__retarget_lock_release_recursive>
   bc35a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc362:	b34e      	cbz	r6, bc3b8 <__register_exitproc+0x98>
   bc364:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc368:	b988      	cbnz	r0, bc38e <__register_exitproc+0x6e>
   bc36a:	4b1c      	ldr	r3, [pc, #112]	; (bc3dc <__register_exitproc+0xbc>)
   bc36c:	b923      	cbnz	r3, bc378 <__register_exitproc+0x58>
   bc36e:	f8d8 0000 	ldr.w	r0, [r8]
   bc372:	f000 f838 	bl	bc3e6 <__retarget_lock_release>
   bc376:	e7f0      	b.n	bc35a <__register_exitproc+0x3a>
   bc378:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc37c:	f7fc fa88 	bl	b8890 <malloc>
   bc380:	2800      	cmp	r0, #0
   bc382:	d0f4      	beq.n	bc36e <__register_exitproc+0x4e>
   bc384:	2300      	movs	r3, #0
   bc386:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc38a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc38e:	6863      	ldr	r3, [r4, #4]
   bc390:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc394:	2201      	movs	r2, #1
   bc396:	409a      	lsls	r2, r3
   bc398:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc39c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc3a0:	4313      	orrs	r3, r2
   bc3a2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc3a6:	2e02      	cmp	r6, #2
   bc3a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc3ac:	bf02      	ittt	eq
   bc3ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc3b2:	4313      	orreq	r3, r2
   bc3b4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc3b8:	6863      	ldr	r3, [r4, #4]
   bc3ba:	f8d8 0000 	ldr.w	r0, [r8]
   bc3be:	1c5a      	adds	r2, r3, #1
   bc3c0:	3302      	adds	r3, #2
   bc3c2:	6062      	str	r2, [r4, #4]
   bc3c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc3c8:	f000 f80e 	bl	bc3e8 <__retarget_lock_release_recursive>
   bc3cc:	2000      	movs	r0, #0
   bc3ce:	e7c6      	b.n	bc35e <__register_exitproc+0x3e>
   bc3d0:	2003e7e8 	.word	0x2003e7e8
   bc3d4:	2003e75c 	.word	0x2003e75c
   bc3d8:	00000000 	.word	0x00000000
   bc3dc:	000b8891 	.word	0x000b8891
   bc3e0:	2003df34 	.word	0x2003df34

000bc3e4 <__retarget_lock_acquire_recursive>:
   bc3e4:	4770      	bx	lr

000bc3e6 <__retarget_lock_release>:
   bc3e6:	4770      	bx	lr

000bc3e8 <__retarget_lock_release_recursive>:
   bc3e8:	4770      	bx	lr

000bc3ea <link_code_end>:
	...

000bc3ec <dynalib_user>:
   bc3ec:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc3fc:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bc40c:	7620 7269 7574 6c61 4600 6f72 206d 7325      virtual.From %s
   bc41c:	7420 206f 7325 7720 7469 2068 6e69 6176      to %s with inva
   bc42c:	696c 2064 6974 656d 4600 6f72 206d 7325     lid time.From %s
   bc43c:	7420 206f 7325 5200 7065 726f 2074 7266      to %s.Report fr
   bc44c:	7165 6575 636e 2079 666f 2520 2064 696d     equency of %d mi
   bc45c:	756e 6574 2e73 2020 6c53 6565 2070 6f66     nutes.  Sleep fo
   bc46c:	2072 6925 7320 6365 6e6f 7364 7520 746e     r %i seconds unt
   bc47c:	6c69 6e20 7865 2074 7665 6e65 2074 7461     il next event at
   bc48c:	2520 0073 6f57 656b 7720 7469 2068 7375      %s.Woke with us
   bc49c:	7265 6220 7475 6f74 206e 202d 6f4c 4152     er button - LoRA
   bc4ac:	5320 6174 6574 5700 6b6f 2065 6977 6874      State.Woke with
   bc4bc:	7320 6e65 6f73 2072 6e69 6574 7272 7075      sensor interrup
   bc4cc:	2074 202d 6552 6f63 6472 6320 756f 746e     t - Record count
   bc4dc:	7420 6568 206e 6c73 6565 0070 7741 6b6f      then sleep.Awok
   bc4ec:	2065 7461 2520 2073 6977 6874 2520 696c     e at %s with %li
   bc4fc:	6620 6572 2065 656d 6f6d 7972 4600 6961      free memory.Fai
   bc50c:	656c 2064 6e69 6420 7461 2061 6573 646e     led in data send
   bc51c:	4100 6b63 7220 6365 6965 6576 2064 202d     .Ack received - 
   bc52c:	7075 6164 6974 676e 4e00 206f 6f6a 6e69     updating.No join
   bc53c:	6120 6b63 7220 6365 6965 6576 0064 6552      ack received.Re
   bc54c:	6573 7474 6e69 2067 6564 6976 6563 5500     setting device.U
   bc55c:	646e 6665 6e69 6465 4520 7272 726f 5320     ndefined Error S
   bc56c:	6174 6574 4c00 526f 2041 6e49 7469 6169     tate.LoRA Initia
   bc57c:	696c 617a 6974 6e6f 6620 6961 756c 6572     lization failure
   bc58c:	6120 656c 7472 6320 646f 2065 6425 2d20      alert code %d -
   bc59c:	7020 776f 7265 6320 6379 656c 6920 206e      power cycle in 
   bc5ac:	3033 4e00 646f 2065 756e 626d 7265 6920     30.Node number i
   bc5bc:	646e 6369 7461 6465 7520 636e 6e6f 6966     ndicated unconfi
   bc5cc:	7567 6572 2064 6f6e 6564 6f20 2066 6425     gured node of %d
   bc5dc:	7320 7465 6974 676e 6120 656c 7472 6320      setting alert c
   bc5ec:	646f 2065 6f74 2520 0064 7453 7261 7574     ode to %d.Startu
   bc5fc:	2070 6f63 706d 656c 6574 6620 726f 7420     p complete for t
   bc60c:	6568 4e20 646f 2065 6977 6874 6120 656c     he Node with ale
   bc61c:	7472 6320 646f 2065 6425 6900 696e 2074     rt code %d.init 
   bc62c:	6166 6c69 6465 4c00 526f 2041 6152 6964     failed.LoRA Radi
   bc63c:	206f 6e69 7469 6169 696c 657a 2064 7361     o initialized as
   bc64c:	6120 6720 7461 7765 7961 7720 7469 2068      a gateway with 
   bc65c:	2061 6564 6976 6563 4449 6f20 2066 7325     a deviceID of %s
   bc66c:	4c00 526f 2041 6152 6964 206f 6e69 7469     .LoRA Radio init
   bc67c:	6169 696c 657a 2064 7361 6e20 646f 2065     ialized as node 
   bc68c:	6925 6120 646e 6120 6420 7665 6369 4965     %i and a deviceI
   bc69c:	2044 666f 2520 0073 6f4c 4152 5220 6461     D of %s.LoRA Rad
   bc6ac:	6f69 6920 696e 6974 6c61 7a69 6465 6120     io initialized a
   bc6bc:	2073 6e61 7520 636e 6e6f 6966 7567 6572     s an unconfigure
   bc6cc:	2064 6f6e 6564 2520 2069 6e61 2064 2061     d node %i and a 
   bc6dc:	6564 6976 6563 4449 6f20 2066 7325 5300     deviceID of %s.S
   bc6ec:	6e65 6964 676e 6420 7461 2061 6572 6f70     ending data repo
   bc6fc:	7472 6e20 6d75 6562 2072 6425 4400 7461     rt number %d.Dat
   bc70c:	2061 6572 6f70 7472 6420 6c65 7669 7265     a report deliver
   bc71c:	6465 2d20 7320 6375 6563 7373 7220 7461     ed - success rat
   bc72c:	2065 3425 322e 0066 6f4e 6564 2520 2064     e %4.2f.Node %d 
   bc73c:	202d 6144 6174 7220 7065 726f 2074 6573     - Data report se
   bc74c:	646e 7420 206f 6167 6574 6177 2079 6425     nd to gateway %d
   bc75c:	6620 6961 656c 2064 202d 6f4e 5220 756f      failed - No Rou
   bc76c:	6574 2d20 7320 6375 6563 7373 7220 7461     te - success rat
   bc77c:	2065 3425 322e 0066 6f4e 6564 2520 2064     e %4.2f.Node %d 
   bc78c:	202d 6144 6174 7220 7065 726f 2074 6573     - Data report se
   bc79c:	646e 7420 206f 6167 6574 6177 2079 6425     nd to gateway %d
   bc7ac:	6620 6961 656c 2064 202d 6e55 6261 656c      failed - Unable
   bc7bc:	7420 206f 6544 696c 6576 2072 202d 7573      to Deliver - su
   bc7cc:	6363 7365 2073 6172 6574 2520 2e34 6632     ccess rate %4.2f
   bc7dc:	4e00 646f 2065 6425 2d20 4420 7461 2061     .Node %d - Data 
   bc7ec:	6572 6f70 7472 7320 6e65 2064 6f74 6720     report send to g
   bc7fc:	7461 7765 7961 2520 2064 6166 6c69 6465     ateway %d failed
   bc80c:	2020 202d 6e55 6e6b 776f 206e 202d 7573       - Unknown - su
   bc81c:	6363 7365 2073 6172 6574 2520 2e34 6632     ccess rate %4.2f
   bc82c:	4400 7461 2061 6572 6f70 7472 6120 6b63     .Data report ack
   bc83c:	6f6e 6c77 6465 6567 2064 6f66 2072 656d     nowledged for me
   bc84c:	7373 6761 2065 6425 6100 4e20 646f 4e65     ssage %d.a NodeN
   bc85c:	6d75 6562 2072 7369 6e20 6565 6564 0064     umber is needed.
   bc86c:	6874 2065 6c63 636f 206b 7369 6e20 746f     the clock is not
   bc87c:	7320 7465 5300 6e65 6964 676e 6a20 696f      set.Sending joi
   bc88c:	206e 6572 7571 7365 2074 6562 6163 7375     n request becaus
   bc89c:	2065 7325 4400 7461 2061 6572 6f70 7472     e %s.Data report
   bc8ac:	7320 6e65 2064 6f74 6720 7461 7765 7961      send to gateway
   bc8bc:	7320 6375 6563 7373 7566 6c6c 0079 6144      successfully.Da
   bc8cc:	6174 7220 7065 726f 2074 6573 646e 7420     ta report send t
   bc8dc:	206f 6147 6574 6177 2079 6166 6c69 6465     o Gateway failed
   bc8ec:	4900 206e 6572 6563 7669 2065 6f4a 6e69     .In receive Join
   bc8fc:	4120 6b63 6f6e 6c77 6465 6567 4a00 696f      Acknowledge.Joi
   bc90c:	206e 6572 7571 7365 2074 6361 6e6b 776f     n request acknow
   bc91c:	656c 6764 6465 6120 646e 6e20 646f 2065     ledged and node 
   bc92c:	4449 7320 7465 7420 206f 6425 5300 6375     ID set to %d.Suc
   bc93c:	6563 7373 7320 6e65 6964 676e 4120 656c     cess sending Ale
   bc94c:	7472 5220 7065 726f 2074 756e 626d 7265     rt Report number
   bc95c:	2520 2064 6f74 6720 7461 7765 7961 6120      %d to gateway a
   bc96c:	2074 6425 4e00 646f 2065 202d 6c41 7265     t %d.Node - Aler
   bc97c:	2074 6552 6f70 7472 7320 6e65 2064 6f74     t Report send to
   bc98c:	4720 7461 7765 7961 6620 6961 656c 0064      Gateway failed.
   bc99c:	6c41 7265 2074 6572 6f70 7472 6120 6b63     Alert report ack
   bc9ac:	6f6e 6c77 6465 6567 0064 614d 6967 2063     nowledged.Magic 
   bc9bc:	754e 626d 7265 6d20 7369 616d 6374 2068     Number mismatch 
   bc9cc:	202d 6769 6f6e 6972 676e 6d20 7365 6173     - ignoring messa
   bc9dc:	6567 5200 6365 6965 6576 2064 7266 6d6f     ge.Received from
   bc9ec:	6e20 646f 2065 6425 7720 7469 2068 7372      node %d with rs
   bc9fc:	6973 253d 2064 202d 2061 7325 6d20 7365     si=%d - a %s mes
   bca0c:	6173 6567 5300 7465 6320 6f6c 6b63 7420     sage.Set clock t
   bca1c:	206f 7325 6120 646e 7220 7065 726f 2074     o %s and report 
   bca2c:	7266 7165 6575 636e 2079 6f74 2520 2064     frequency to %d 
   bca3c:	696d 756e 6574 0073                         minutes.

000bca44 <_ZTV14LoRA_Functions>:
	...
   bca4c:	4b41 000b 4b43 000b 2041 656e 2077 6164     AK..CK..A new da
   bca5c:	2079 202d 6572 6573 7474 6e69 2067 7665     y - resetting ev
   bca6c:	7265 7479 6968 676e 0000 0000               erything....

000bca78 <_ZTV8MB85RC64>:
	...
   bca80:	5241 000b 5255 000b 69c9 000b 6a5f 000b     AR..UR...i.._j..
   bca90:	6ae1 000b                                   .j..

000bca94 <_ZTV13sysStatusData>:
	...
   bca9c:	535d 000b 52cd 000b 52ab 000b 8029 000b     ]S...R...R..)...
   bcaac:	8051 000b 8145 000b 81dd 000b 5269 000b     Q...E.......iR..
   bcabc:	5281 000b                                   .R..

000bcac0 <_ZTV17currentStatusData>:
	...
   bcac8:	53e1 000b 52cd 000b 52ab 000b 8029 000b     .S...R...R..)...
   bcad8:	8051 000b 8145 000b 81dd 000b 5215 000b     Q...E........R..
   bcae8:	522d 000b 6e49 7469 6c61 7a69 6e69 2067     -R..Initalizing 
   bcaf8:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   bcb08:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   bcb18:	6f43 666e 6769 0000                         Config..

000bcb20 <BLUE_LED>:
   bcb20:	0007                                        ..

000bcb22 <BUTTON_PIN>:
   bcb22:	0004                                        ..

000bcb24 <INT_PIN>:
   bcb24:	0012                                        ..

000bcb26 <RFM95_CS>:
   bcb26:	0005                                        ..

000bcb28 <RFM95_INT>:
   bcb28:	0002                                        ..

000bcb2a <TMP36_SENSE_PIN>:
   bcb2a:	000f 6553 7474 6e69 2067 6176 756c 7365     ..Setting values
   bcb3a:	6620 726f 7420 6568 6e20 646f 0065           for the node.

000bcb48 <_ZTVN5spark10LogHandlerE>:
	...
   bcb58:	40a5 000b 5889 000b                         .@...X..

000bcb60 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bcb68:	5895 000b 58c9 000b 9f49 000b 588b 000b     .X...X..I....X..
   bcb78:	6e55 6e6b 776f 006e 6f4e 656e 5700 4669     Unknown.None.WiF
   bcb88:	0069 5347 004d 4d55 5354 4300 4d44 0041     i.GSM.UMTS.CDMA.
   bcb98:	544c 0045 4549 4545 3038 3132 3435 4c00     LTE.IEEE802154.L
   bcba8:	4554 435f 5441 4d5f 0031 544c 5f45 4143     TE_CAT_M1.LTE_CA
   bcbb8:	5f54 424e 0031 6f4e 2074 6843 7261 6967     T_NB1.Not Chargi
   bcbc8:	676e 4300 6168 6772 6465 4400 7369 6863     ng.Charged.Disch
   bcbd8:	7261 6967 676e 4600 7561 746c 4400 6369     arging.Fault.Dic
   bcbe8:	6e6f 656e 7463 6465 4100 7373 7265 6974     onnected.Asserti
   bcbf8:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   bcc08:	3c20 2820 3233 2b20 3120 2936 2500 2073      < (32 + 16).%s 
   bcc18:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   bcc28:	6630 2525 0020 6f43 6e75 2c74 6820 756f     0f%% .Count, hou
   bcc38:	6c72 3a79 2520 2e69 6420 6961 796c 203a     rly: %i. daily: 
   bcc48:	6925 4100 7373 7265 6974 6e6f 6146 6c69     %i.AssertionFail
   bcc58:	7275 2065 7273 2063 2626 7320 6372 3e2d     ure src && src->
   bcc68:	6163 6c6c 6162 6b63 2500 2069 0043 0000     callback.%i C...
   bcc78:	cb78 000b cb80 000b cb85 000b cb8a 000b     x...............
   bcc88:	cb8e 000b cb93 000b cb98 000b cb9c 000b     ................
   bcc98:	cba7 000b cbb2 000b 6166 6c69 6465 7420     ........failed t
   bcca8:	206f 6572 6461 7220 6765 6441 7264 253d     o read regAddr=%
   bccb8:	3230 2078 6f63 6e75 3d74 7525 6600 6961     02x count=%u.fai
   bccc8:	656c 2064 6f74 7220 6165 2064 6572 4167     led to read regA
   bccd8:	6464 3d72 3025 7832 7320 6174 3d74 6425     ddr=%02x stat=%d
   bcce8:	4600 554f 2054 6964 2064 6f6e 2074 6f67     .FOUT did not go
   bccf8:	4820 4749 0048 6f6e 2074 6564 6574 7463      HIGH.not detect
   bcd08:	6465 6600 6961 656c 2064 6f74 7720 6972     ed.failed to wri
   bcd18:	6574 7220 6765 6441 7264 253d 3230 2078     te regAddr=%02x 
   bcd28:	7473 7461 253d 0064 6573 5774 5444 2520     stat=%d.setWDT %
   bcd38:	0064 6177 6374 6468 676f 6320 656c 7261     d.watchdog clear
   bcd48:	6465 6220 6552 7573 746c 253d 0064 6177     ed bResult=%d.wa
   bcd58:	6374 6468 676f 7320 7465 6620 756f 5372     tchdog set fourS
   bcd68:	6365 3d73 6425 6220 6552 7573 746c 253d     ecs=%d bResult=%
   bcd78:	0064 4157 4354 4448 474f 4400 4545 5f50     d.WATCHDOG.DEEP_
   bcd88:	4f50 4557 5f52 4f44 4e57 4300 554f 544e     POWER_DOWN.COUNT
   bcd98:	4f44 4e57 545f 4d49 5245 4100 414c 4d52     DOWN_TIMER.ALARM
   bcda8:	6600 6961 756c 6572 6920 206e 7075 6164     .failure in upda
   bcdb8:	6574 6157 656b 6552 7361 6e6f 2520 0064     teWakeReason %d.
   bcdc8:	6177 656b 7220 6165 6f73 206e 203d 7325     wake reason = %s
   bcdd8:	6600 6961 756c 6572 6920 206e 6573 4374     .failure in setC
   bcde8:	756f 746e 6f64 6e77 6954 656d 2072 6425     ountdownTimer %d
   bcdf8:	6600 6961 756c 6572 6920 206e 6564 7065     .failure in deep
   bce08:	6f50 6577 4472 776f 206e 6425 5200 4745     PowerDown %d.REG
   bce18:	535f 454c 5045 435f 5254 3d4c 7830 3225     _SLEEP_CTRL=0x%2
   bce28:	0078 6964 6e64 7427 7020 776f 7265 6420     x.didn't power d
   bce38:	776f 006e 3025 6434 252d 3230 2d64 3025     own.%04d-%02d-%0
   bce48:	6432 2520 3230 3a64 3025 6432 253a 3230     2d %02d:%02d:%02
   bce58:	0064 6567 5274 6374 7341 6d54 2520 0073     d.getRtcAsTm %s.
   bce68:	6573 5274 6374 7341 6d54 2520 0073 6166     setRtcAsTm %s.fa
   bce78:	6c69 7275 2065 6e69 7320 7465 7452 4663     ilure in setRtcF
   bce88:	6f72 546d 206d 6425 7300 7465 5220 4354     romTm %d.set RTC
   bce98:	6620 6f72 206d 6c63 756f 2064 7325 7300      from cloud %s.s
   bcea8:	7465 7320 7379 6574 206d 6c63 636f 206b     et system clock 
   bceb8:	7266 6d6f 5220 4354 2520 0073 6166 6c69     from RTC %s.fail
   bcec8:	6465 7420 206f 6564 6574 7463 4120 3142     ed to detect AB1
   bced8:	3038 0035 7061 2e70 6261 3831 3530 0000     805.app.ab1805..

000bcee8 <_ZTV6AB1805>:
	...
   bcef0:	5e61 000b 5e63 000b 64d9 000b 655f 000b     a^..c^...d.._e..

000bcf00 <_ZTV6MB85RC>:
	...
   bcf08:	6989 000b 698b 000b 69c9 000b 6a5f 000b     .i...i...i.._j..
   bcf18:	6ae1 000b                                   .j..

000bcf1c <_ZTV15RHGenericDriver>:
	...
   bcf2c:	6c9d 000b 40a5 000b 40a5 000b 40a5 000b     .l...@...@...@..
   bcf3c:	40a5 000b 6cff 000b 6ca1 000b 6d4f 000b     .@...l...l..Om..
   bcf4c:	6d1d 000b 6d73 000b 6cab 000b 6cb3 000b     .m..sm...l...l..
   bcf5c:	6cb7 000b 6cbb 000b 6cbf 000b 6cc3 000b     .l...l...l...l..
   bcf6c:	6caf 000b 6ccf 000b 6cd3 000b 6cd7 000b     .l...l...l...l..
   bcf7c:	6cdb 000b 6cdf 000b 6ce5 000b 6ce9 000b     .l...l...l...l..
   bcf8c:	6cab 000b 6ced 000b 6cf3 000b 6cf9 000b     .l...l...l...l..

000bcf9c <_ZTV12RHGenericSPI>:
	...
   bcfa4:	40a5 000b 6dd1 000b 6dd3 000b 40a5 000b     .@...m...m...@..
   bcfb4:	40a5 000b 6ddb 000b 6ddf 000b 6de3 000b     .@...m...m...m..
   bcfc4:	6dd5 000b 6dd7 000b 6dd9 000b 6564 6166     .m...m...m..defa
   bcfd4:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bcfe4:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bcff4:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bd004:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bd014 <_ZTVN8particle11SPISettingsE>:
	...
   bd01c:	6e29 000b 6dfd 000b 6dff 000b               )n...m...m..

000bd028 <_ZTV13RHHardwareSPI>:
	...
   bd030:	6edd 000b 6ef1 000b 6eff 000b 6f0d 000b     .n...n...n...o..
   bd040:	6f79 000b 6ddb 000b 6ddf 000b 6de3 000b     yo...m...m...m..
   bd050:	6f87 000b 6f9b 000b 6fa9 000b               .o...o...o..

000bd05c <_ZTV6RHMesh>:
	...
   bd064:	7075 000b 731d 000b 6fd5 000b 6fc1 000b     up...s...o...o..

000bd074 <_ZTV8RHRouter>:
	...
   bd07c:	7589 000b 75cd 000b                         .u...u..

000bd084 <_ZTV11RHSPIDriver>:
	...
   bd094:	7869 000b 40a5 000b 40a5 000b 40a5 000b     ix...@...@...@..
   bd0a4:	40a5 000b 6cff 000b 6ca1 000b 6d4f 000b     .@...l...l..Om..
   bd0b4:	6d1d 000b 6d73 000b 6cab 000b 6cb3 000b     .m..sm...l...l..
   bd0c4:	6cb7 000b 6cbb 000b 6cbf 000b 6cc3 000b     .l...l...l...l..
   bd0d4:	6caf 000b 6ccf 000b 6cd3 000b 6cd7 000b     .l...l...l...l..
   bd0e4:	6cdb 000b 6cdf 000b 6ce5 000b 6ce9 000b     .l...l...l...l..
   bd0f4:	6cab 000b 6ced 000b 6cf3 000b 6cf9 000b     .l...l...l...l..
   bd104:	7895 000b 789f 000b                         .x...x..

000bd10c <_ZL18MODEM_CONFIG_TABLE>:
   bd10c:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bd11c <_ZTV7RH_RF95>:
	...
   bd124:	7a07 000b 7a3f 000b 7f19 000b 7daf 000b     .z..?z.......}..
   bd134:	7a75 000b 7df7 000b 7a03 000b 6cff 000b     uz...}...z...l..
   bd144:	6ca1 000b 6d4f 000b 6d1d 000b 6d73 000b     .l..Om...m..sm..
   bd154:	7a09 000b 6cb3 000b 6cb7 000b 6cbb 000b     .z...l...l...l..
   bd164:	6cbf 000b 6cc3 000b 6caf 000b 6ccf 000b     .l...l...l...l..
   bd174:	6cd3 000b 6cd7 000b 6cdb 000b 6cdf 000b     .l...l...l...l..
   bd184:	6ce5 000b 6ce9 000b 7a4f 000b 6ced 000b     .l...l..Oz...l..
   bd194:	6cf3 000b 6cf9 000b 7895 000b 789f 000b     .l...l...x...x..
   bd1a4:	79ff 000b 6f67 3a74 6d20 6761 6369 253d     .y..got: magic=%
   bd1b4:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   bd1c4:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   bd1d4:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   bd1e4:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   bd1f4:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   bd204:	253d 3830 0078 0000                         =%08x...

000bd20c <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bd214:	8023 000b 806f 000b 8021 000b 8029 000b     #...o...!...)...
   bd224:	8051 000b 8145 000b 81dd 000b               Q...E.......

000bd230 <_ZTVN5spark13CellularClassE>:
	...
   bd238:	8a33 000b 8a29 000b 8a1f 000b 89d5 000b     3...)...........
   bd248:	8a13 000b 8a07 000b a2a1 000b a2a9 000b     ................
   bd258:	89fb 000b 89f3 000b 89e9 000b 89df 000b     ................
   bd268:	a2d9 000b                                   ....

000bd26c <_ZTV14CellularSignal>:
	...
   bd274:	8ac1 000b 8b25 000b 8ac3 000b 8b35 000b     ....%.......5...
   bd284:	8b69 000b 8b95 000b 8bc9 000b 8ae9 000b     i...............
   bd294:	8ac7 000b 8ae3 000b fffc ffff 0000 0000     ................
   bd2a4:	8b1d 000b                                   ....

000bd2a8 <_ZTVN5spark13EthernetClassE>:
	...
   bd2b0:	8c6b 000b 8c61 000b 8c57 000b 8c4d 000b     k...a...W...M...
   bd2c0:	8c41 000b 8c35 000b a2a1 000b a2a9 000b     A...5...........
   bd2d0:	8c29 000b 8c21 000b 8c17 000b 8c0d 000b     )...!...........
   bd2e0:	a2d9 000b                                   ....

000bd2e4 <_ZTV7TwoWire>:
	...
   bd2ec:	8d3b 000b 8d85 000b 8d5d 000b 8d3d 000b     ;.......]...=...
   bd2fc:	8d65 000b 8d6d 000b 8d75 000b 8d7d 000b     e...m...u...}...

000bd30c <_ZTV9IPAddress>:
	...
   bd314:	8ee9 000b 8ed9 000b 8edb 000b 2575 3430     ............u%04
   bd324:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bd334:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bd344:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bd354:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bd364:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bd374:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bd384:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000bd394 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bd39c:	9395 000b 93bb 000b 9379 000b 8ff7 000b     ........y.......

000bd3ac <_ZTVN5spark16StreamLogHandlerE>:
	...
   bd3b4:	97f1 000b 9809 000b 9f49 000b 588b 000b     ........I....X..

000bd3c4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bd3cc:	981d 000b 9831 000b a0ed 000b 9381 000b     ....1...........

000bd3dc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bd3e4:	9393 000b 93c9 000b 9ead 000b 9383 000b     ................

000bd3f4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bd3fc:	9391 000b 93d7 000b 9759 000b 93f9 000b     ........Y.......

000bd40c <_ZTVN5spark12NetworkClassE>:
	...
   bd414:	a261 000b a26b 000b a275 000b a27f 000b     a...k...u.......
   bd424:	a289 000b a295 000b a2a1 000b a2a9 000b     ................
   bd434:	a2b1 000b a2bd 000b a2c5 000b a2cf 000b     ................
   bd444:	a2d9 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000bd454 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd454:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bd464:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bd474:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bd484:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bd494:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bd4a4:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bd4b4 <_ZTV11USARTSerial>:
	...
   bd4bc:	b019 000b b085 000b b05d 000b a529 000b     ........]...)...
   bd4cc:	b02d 000b b049 000b b03b 000b b057 000b     -...I...;...W...
   bd4dc:	b01b 000b b01f 000b                         ........

000bd4e4 <_ZTV9USBSerial>:
	...
   bd4ec:	b0d7 000b b13f 000b b115 000b a529 000b     ....?.......)...
   bd4fc:	b107 000b b0d9 000b b0e9 000b b139 000b     ............9...
   bd50c:	b0f9 000b b0d1 000b                         ........

000bd514 <_ZSt7nothrow>:
   bd514:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   bd524:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000bd535 <day_name.1>:
   bd535:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bd545:	6972 6153                                    riSat

000bd54a <mon_name.0>:
   bd54a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bd55a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bd56a:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bd57a:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bd58a:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bd59a:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bd5aa:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bd5ba:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bd5ca:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bd5da:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bd5ea:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd5fa:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd60a:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd61a:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd62a:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bd637 <_ctype_>:
   bd637:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd647:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd657:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd667:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd677:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd687:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd697:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd6a7:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd6b7:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bd738 <link_const_variable_data_end>:
   bd738:	000b4ae1 	.word	0x000b4ae1
   bd73c:	000b51dd 	.word	0x000b51dd
   bd740:	000b5771 	.word	0x000b5771
   bd744:	000b59f1 	.word	0x000b59f1
   bd748:	000b5e55 	.word	0x000b5e55
   bd74c:	000b6979 	.word	0x000b6979
   bd750:	000b6fb1 	.word	0x000b6fb1
   bd754:	000b89c5 	.word	0x000b89c5
   bd758:	000b8a91 	.word	0x000b8a91
   bd75c:	000b8c75 	.word	0x000b8c75
   bd760:	000b9f39 	.word	0x000b9f39
   bd764:	000ba3b1 	.word	0x000ba3b1
   bd768:	000ba819 	.word	0x000ba819
   bd76c:	000bacdd 	.word	0x000bacdd
   bd770:	000bb005 	.word	0x000bb005

000bd774 <link_constructors_end>:
	...
