
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b170  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bf190  000bf190  0000f190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bf1b4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  2003dd6c  000bf1b8  0001dd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2003df38  2003df38  0002df38  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bf384  000bf384  0001f384  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bf3ac  000bf3ac  0001f3ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001e291d  00000000  00000000  0001f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000240b8  00000000  00000000  00201ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004d186  00000000  00000000  00225d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004050  00000000  00000000  00272f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d7b8  00000000  00000000  00276f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000549b1  00000000  00000000  00284713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00076c96  00000000  00000000  002d90c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001454e1  00000000  00000000  0034fd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bb7c  00000000  00000000  0049523c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 fba5 	bl	bd780 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 fbc7 	bl	bd7d0 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd6c 	.word	0x2003dd6c
   b404c:	000bf1b8 	.word	0x000bf1b8
   b4050:	2003df38 	.word	0x2003df38
   b4054:	2003df38 	.word	0x2003df38
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 fc2f 	bl	bb8c4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bf154 	.word	0x000bf154
   b4080:	000bf18c 	.word	0x000bf18c

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bd8a 	b.w	b4b9c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fa09 	bl	b44a0 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 bbcf 	b.w	bb834 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bed9 	b.w	b8e4c <malloc>

000b409a <_Znaj>:
   b409a:	f004 bed7 	b.w	b8e4c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bedd 	b.w	b8e5c <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fd88 	bl	b8bc0 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8811 	.word	0x000b8811
   b40b8:	000bdb88 	.word	0x000bdb88

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z18outOfMemoryHandleryi+0x8>)
   b40da:	601a      	str	r2, [r3, #0]
}
   b40dc:	4770      	bx	lr
   b40de:	bf00      	nop
   b40e0:	2003dd6c 	.word	0x2003dd6c

000b40e4 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b40e4:	4b01      	ldr	r3, [pc, #4]	; (b40ec <_Z13userSwitchISRv+0x8>)
   b40e6:	2201      	movs	r2, #1
   b40e8:	701a      	strb	r2, [r3, #0]
}
   b40ea:	4770      	bx	lr
   b40ec:	2003dfce 	.word	0x2003dfce

000b40f0 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40f0:	b530      	push	{r4, r5, lr}
   b40f2:	b085      	sub	sp, #20
   b40f4:	4604      	mov	r4, r0
   b40f6:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40f8:	b160      	cbz	r0, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40fa:	6840      	ldr	r0, [r0, #4]
   b40fc:	b150      	cbz	r0, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40fe:	6885      	ldr	r5, [r0, #8]
   b4100:	b145      	cbz	r5, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4102:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4106:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b410a:	68c4      	ldr	r4, [r0, #12]
   b410c:	ab01      	add	r3, sp, #4
   b410e:	466a      	mov	r2, sp
   b4110:	a902      	add	r1, sp, #8
   b4112:	47a0      	blx	r4
    }
   b4114:	b005      	add	sp, #20
   b4116:	bd30      	pop	{r4, r5, pc}

000b4118 <_Z9sensorISRv>:

void sensorISR()
{
   b4118:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b411a:	4c08      	ldr	r4, [pc, #32]	; (b413c <_Z9sensorISRv+0x24>)
   b411c:	7823      	ldrb	r3, [r4, #0]
   b411e:	b12b      	cbz	r3, b412c <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              		// sets the sensor flag for the main loop
   b4120:	4b07      	ldr	r3, [pc, #28]	; (b4140 <_Z9sensorISRv+0x28>)
   b4122:	2201      	movs	r2, #1
   b4124:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b4126:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b4128:	7023      	strb	r3, [r4, #0]
}
   b412a:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b412c:	f001 fc50 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4130:	f001 fd4a 	bl	b5bc8 <_ZNK13sysStatusData14get_sensorTypeEv>
   b4134:	2801      	cmp	r0, #1
   b4136:	d0f3      	beq.n	b4120 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b4138:	2301      	movs	r3, #1
   b413a:	e7f5      	b.n	b4128 <_Z9sensorISRv+0x10>
   b413c:	2003df64 	.word	0x2003df64
   b4140:	2003dfcc 	.word	0x2003dfcc

000b4144 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4144:	b530      	push	{r4, r5, lr}
   b4146:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4148:	6800      	ldr	r0, [r0, #0]
   b414a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b414c:	9301      	str	r3, [sp, #4]
   b414e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4152:	6883      	ldr	r3, [r0, #8]
   b4154:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4158:	b90b      	cbnz	r3, b415e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b415a:	f007 fd31 	bl	bbbc0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b415e:	68c3      	ldr	r3, [r0, #12]
   b4160:	aa01      	add	r2, sp, #4
   b4162:	a902      	add	r1, sp, #8
   b4164:	4798      	blx	r3
      }
   b4166:	b005      	add	sp, #20
   b4168:	bd30      	pop	{r4, r5, pc}

000b416a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b416a:	2a01      	cmp	r2, #1
   b416c:	d102      	bne.n	b4174 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416e:	6001      	str	r1, [r0, #0]
      }
   b4170:	2000      	movs	r0, #0
   b4172:	4770      	bx	lr
	  switch (__op)
   b4174:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4176:	bf04      	itt	eq
   b4178:	680b      	ldreq	r3, [r1, #0]
   b417a:	6003      	streq	r3, [r0, #0]
	      break;
   b417c:	e7f8      	b.n	b4170 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417e:	6803      	ldr	r3, [r0, #0]
   b4180:	6812      	ldr	r2, [r2, #0]
   b4182:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4186:	4718      	bx	r3

000b4188 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4188:	4b0a      	ldr	r3, [pc, #40]	; (b41b4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b418a:	b510      	push	{r4, lr}
   b418c:	4604      	mov	r4, r0
   b418e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4190:	f005 fd5c 	bl	b9c4c <_ZN5spark10LogManager8instanceEv>
   b4194:	4621      	mov	r1, r4
   b4196:	f005 ff94 	bl	ba0c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b419a:	f007 fb03 	bl	bb7a4 <_Z16_fetch_usbserialv>
   b419e:	f007 faf3 	bl	bb788 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b41a2:	4620      	mov	r0, r4
   b41a4:	4b04      	ldr	r3, [pc, #16]	; (b41b8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b41a6:	f840 3b04 	str.w	r3, [r0], #4
   b41aa:	f005 fe25 	bl	b9df8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b41ae:	4620      	mov	r0, r4
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	000bdfc4 	.word	0x000bdfc4
   b41b8:	000bdfac 	.word	0x000bdfac

000b41bc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b41bc:	b510      	push	{r4, lr}
   b41be:	4604      	mov	r4, r0
    }
   b41c0:	f7ff ffe2 	bl	b4188 <_ZN5spark16SerialLogHandlerD1Ev>
   b41c4:	4620      	mov	r0, r4
   b41c6:	2124      	movs	r1, #36	; 0x24
   b41c8:	f7ff ff69 	bl	b409e <_ZdlPvj>
   b41cc:	4620      	mov	r0, r4
   b41ce:	bd10      	pop	{r4, pc}

000b41d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b41d0:	b510      	push	{r4, lr}
      if (_M_manager)
   b41d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b41d4:	4604      	mov	r4, r0
      if (_M_manager)
   b41d6:	b113      	cbz	r3, b41de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b41d8:	2203      	movs	r2, #3
   b41da:	4601      	mov	r1, r0
   b41dc:	4798      	blx	r3
    }
   b41de:	4620      	mov	r0, r4
   b41e0:	bd10      	pop	{r4, pc}

000b41e2 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b41e2:	b510      	push	{r4, lr}
            delete callableWrapper;
   b41e4:	4604      	mov	r4, r0
   b41e6:	b138      	cbz	r0, b41f8 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b41e8:	f7ff fff2 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b41ec:	4620      	mov	r0, r4
   b41ee:	2110      	movs	r1, #16
        };
   b41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b41f4:	f7ff bf53 	b.w	b409e <_ZdlPvj>
        };
   b41f8:	bd10      	pop	{r4, pc}
	...

000b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b41fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4200:	4605      	mov	r5, r0
   b4202:	460f      	mov	r7, r1
   b4204:	4616      	mov	r6, r2
        if (valid_) {
   b4206:	b18b      	cbz	r3, b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4208:	6803      	ldr	r3, [r0, #0]
   b420a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b420c:	b183      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b420e:	889a      	ldrh	r2, [r3, #4]
   b4210:	2a01      	cmp	r2, #1
   b4212:	d006      	beq.n	b4222 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b4214:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4216:	e7f9      	b.n	b420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4218:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b421a:	b14b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b421c:	889a      	ldrh	r2, [r3, #4]
   b421e:	2a01      	cmp	r2, #1
   b4220:	d1fa      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b4222:	b12b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b4224:	899a      	ldrh	r2, [r3, #12]
   b4226:	42ba      	cmp	r2, r7
   b4228:	d1f6      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b422a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b422c:	4628      	mov	r0, r5
   b422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4230:	490a      	ldr	r1, [pc, #40]	; (b425c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b4232:	2010      	movs	r0, #16
   b4234:	f007 fcc0 	bl	bbbb8 <_ZnwjRKSt9nothrow_t>
   b4238:	4604      	mov	r4, r0
   b423a:	b168      	cbz	r0, b4258 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b423c:	2210      	movs	r2, #16
   b423e:	2100      	movs	r1, #0
   b4240:	f009 fac6 	bl	bd7d0 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4244:	4b06      	ldr	r3, [pc, #24]	; (b4260 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b4246:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4248:	2301      	movs	r3, #1
   b424a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b424c:	692b      	ldr	r3, [r5, #16]
   b424e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4250:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b4252:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4254:	612c      	str	r4, [r5, #16]
   b4256:	e7e9      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4258:	7528      	strb	r0, [r5, #20]
                return *this;
   b425a:	e7e7      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b425c:	000bef18 	.word	0x000bef18
   b4260:	00030010 	.word	0x00030010

000b4264 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4264:	b40e      	push	{r1, r2, r3}
   b4266:	b500      	push	{lr}
   b4268:	b08c      	sub	sp, #48	; 0x30
   b426a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b426c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4270:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4274:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4276:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b427a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b427c:	6801      	ldr	r1, [r0, #0]
   b427e:	aa04      	add	r2, sp, #16
   b4280:	201e      	movs	r0, #30
    attr.flags = 0;
   b4282:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4286:	f004 fcab 	bl	b8be0 <log_message_v>
}
   b428a:	b00c      	add	sp, #48	; 0x30
   b428c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4290:	b003      	add	sp, #12
   b4292:	4770      	bx	lr

000b4294 <_Z22publishStateTransitionv>:
{
   b4294:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4296:	4e13      	ldr	r6, [pc, #76]	; (b42e4 <_Z22publishStateTransitionv+0x50>)
   b4298:	4c13      	ldr	r4, [pc, #76]	; (b42e8 <_Z22publishStateTransitionv+0x54>)
   b429a:	7832      	ldrb	r2, [r6, #0]
   b429c:	4d13      	ldr	r5, [pc, #76]	; (b42ec <_Z22publishStateTransitionv+0x58>)
   b429e:	2a02      	cmp	r2, #2
{
   b42a0:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b42a2:	d117      	bne.n	b42d4 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b42a4:	f007 f97a 	bl	bb59c <_ZN9TimeClass7isValidEv>
   b42a8:	7832      	ldrb	r2, [r6, #0]
   b42aa:	782b      	ldrb	r3, [r5, #0]
   b42ac:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42b0:	9200      	str	r2, [sp, #0]
   b42b2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42b6:	b998      	cbnz	r0, b42e0 <_Z22publishStateTransitionv+0x4c>
   b42b8:	4a0d      	ldr	r2, [pc, #52]	; (b42f0 <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   b42be:	a802      	add	r0, sp, #8
   b42c0:	f004 fde4 	bl	b8e8c <snprintf>
	oldState = state;
   b42c4:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b42c6:	480b      	ldr	r0, [pc, #44]	; (b42f4 <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b42c8:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b42ca:	a902      	add	r1, sp, #8
   b42cc:	f7ff ffca 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b42d0:	b042      	add	sp, #264	; 0x108
   b42d2:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42d4:	782b      	ldrb	r3, [r5, #0]
   b42d6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42da:	9200      	str	r2, [sp, #0]
   b42dc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42e0:	4a05      	ldr	r2, [pc, #20]	; (b42f8 <_Z22publishStateTransitionv+0x64>)
   b42e2:	e7ea      	b.n	b42ba <_Z22publishStateTransitionv+0x26>
   b42e4:	2003dfcd 	.word	0x2003dfcd
   b42e8:	2003dd70 	.word	0x2003dd70
   b42ec:	2003dfc4 	.word	0x2003dfc4
   b42f0:	000bdb9d 	.word	0x000bdb9d
   b42f4:	2003e654 	.word	0x2003e654
   b42f8:	000bdbbd 	.word	0x000bdbbd
   b42fc:	00000000 	.word	0x00000000

000b4300 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	static time_t nextPeriodBegins = 0;
	// First we will calculate the adjustment to the wakeboundary due to node number and retries
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b4304:	4d5c      	ldr	r5, [pc, #368]	; (b4478 <_Z21secondsUntilNextEventv+0x178>)
   b4306:	682e      	ldr	r6, [r5, #0]
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4308:	b087      	sub	sp, #28
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b430a:	2e00      	cmp	r6, #0
   b430c:	d042      	beq.n	b4394 <_Z21secondsUntilNextEventv+0x94>
		int fiftyFifty = random(2);											// Flip a coin - seed in Setup()
   b430e:	2002      	movs	r0, #2
   b4310:	f006 fd7a 	bl	bae08 <_Z6randomi>
   b4314:	4606      	mov	r6, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4316:	6828      	ldr	r0, [r5, #0]
   b4318:	f008 fe2e 	bl	bcf78 <__aeabi_i2d>
   b431c:	ed9f 0b54 	vldr	d0, [pc, #336]	; b4470 <_Z21secondsUntilNextEventv+0x170>
   b4320:	ec41 0b11 	vmov	d1, r0, r1
   b4324:	f007 fc50 	bl	bbbc8 <pow>
		unsigned long offset = 10UL + NODENUMBEROFFSET * fiftyFifty * pow(2, retryState); // This is an exponential back-off - adding 10 seconds to increase odds
   b4328:	200a      	movs	r0, #10
   b432a:	ec59 8b10 	vmov	r8, r9, d0
   b432e:	4370      	muls	r0, r6
   b4330:	f008 fe12 	bl	bcf58 <__aeabi_ui2d>
   b4334:	4642      	mov	r2, r8
   b4336:	464b      	mov	r3, r9
   b4338:	f008 fe88 	bl	bd04c <__aeabi_dmul>
   b433c:	4b4f      	ldr	r3, [pc, #316]	; (b447c <_Z21secondsUntilNextEventv+0x17c>)
   b433e:	2200      	movs	r2, #0
   b4340:	f008 fcce 	bl	bcce0 <__adddf3>
   b4344:	f009 f95a 	bl	bd5fc <__aeabi_d2uiz>
   b4348:	4604      	mov	r4, r0
		Log.info("Node %d retry state %d dice of %d retry in %lu seconds", sysStatus.get_nodeNumber(), retryState, fiftyFifty, offset);
   b434a:	f001 fb41 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b434e:	f001 fc2c 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b4352:	e9cd 6400 	strd	r6, r4, [sp]
   b4356:	4602      	mov	r2, r0
   b4358:	682b      	ldr	r3, [r5, #0]
   b435a:	4949      	ldr	r1, [pc, #292]	; (b4480 <_Z21secondsUntilNextEventv+0x180>)
   b435c:	4849      	ldr	r0, [pc, #292]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b435e:	f7ff ff81 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		if (retryState >= 3) {
   b4362:	682b      	ldr	r3, [r5, #0]
   b4364:	2b02      	cmp	r3, #2
   b4366:	dd11      	ble.n	b438c <_Z21secondsUntilNextEventv+0x8c>
			retryState = -1;							    				// Going to stop re-trying and wait until the next period
   b4368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b436c:	602b      	str	r3, [r5, #0]
			sysStatus.set_alertCodeNode(4);									// This will trigger a reinitialization of the radio
   b436e:	f001 fb2f 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4372:	2104      	movs	r1, #4
   b4374:	f001 fc77 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
			sysStatus.set_alertTimestampNode(Time.now());					// Alert Time stamp
   b4378:	f001 fb2a 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b437c:	4605      	mov	r5, r0
   b437e:	f007 f92a 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b4382:	4602      	mov	r2, r0
   b4384:	17c3      	asrs	r3, r0, #31
   b4386:	4628      	mov	r0, r5
   b4388:	f001 fd32 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
			// Log.info("In current period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
		}
		return secondsToReturn;
    }
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b438c:	4620      	mov	r0, r4
   b438e:	b007      	add	sp, #28
   b4390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (Time.isValid()) {												// The general case - has to handle node-number specific timing
   b4394:	f007 f902 	bl	bb59c <_ZN9TimeClass7isValidEv>
   b4398:	2800      	cmp	r0, #0
   b439a:	d065      	beq.n	b4468 <_Z21secondsUntilNextEventv+0x168>
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b439c:	f001 fb18 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b43a0:	f001 fc03 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b43a4:	4605      	mov	r5, r0
		unsigned long wakeBoundary = (sysStatus.get_frequencyMinutes() * 60UL);
   b43a6:	f001 fb13 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b43aa:	f001 fc97 	bl	b5cdc <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b43ae:	243c      	movs	r4, #60	; 0x3c
   b43b0:	fb04 f700 	mul.w	r7, r4, r0
		unsigned long secondsToReturn = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
   b43b4:	f007 f90f 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b43b8:	fbb0 f4f7 	udiv	r4, r0, r7
   b43bc:	fb04 0417 	mls	r4, r4, r7, r0
   b43c0:	1b3c      	subs	r4, r7, r4
   b43c2:	42bc      	cmp	r4, r7
   b43c4:	bf28      	it	cs
   b43c6:	463c      	movcs	r4, r7
		if (sysStatus.get_nodeNumber() >= 11)  {							// We need to test here as the off-set can cause missed reporting if awoken by the sensor at the period boundary
   b43c8:	f001 fb02 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b43cc:	f001 fbed 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b43d0:	280a      	cmp	r0, #10
   b43d2:	d905      	bls.n	b43e0 <_Z21secondsUntilNextEventv+0xe0>
			Log.info("Unconfigured node - no offset and %lu seconds till next period",secondsToReturn);
   b43d4:	492c      	ldr	r1, [pc, #176]	; (b4488 <_Z21secondsUntilNextEventv+0x188>)
   b43d6:	482b      	ldr	r0, [pc, #172]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b43d8:	4622      	mov	r2, r4
   b43da:	f7ff ff43 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			return secondsToReturn;
   b43de:	e7d5      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43e0:	4f2a      	ldr	r7, [pc, #168]	; (b448c <_Z21secondsUntilNextEventv+0x18c>)
   b43e2:	f007 f8f8 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b43e6:	e9d7 8900 	ldrd	r8, r9, [r7]
   b43ea:	17c3      	asrs	r3, r0, #31
   b43ec:	ebb0 0008 	subs.w	r0, r0, r8
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43f0:	b22d      	sxth	r5, r5
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43f2:	eb63 0309 	sbc.w	r3, r3, r9
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b43fa:	2b00      	cmp	r3, #0
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43fc:	ea4f 0545 	mov.w	r5, r5, lsl #1
		if (Time.now() - nextPeriodBegins >= 0) {							// We are in a new period
   b4400:	db16      	blt.n	b4430 <_Z21secondsUntilNextEventv+0x130>
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b4402:	f007 f8e8 	bl	bb5d6 <_ZN9TimeClass3nowEv>
			secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b4406:	442c      	add	r4, r5
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b4408:	1902      	adds	r2, r0, r4
			Log.info("Starting a new period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
   b440a:	4b21      	ldr	r3, [pc, #132]	; (b4490 <_Z21secondsUntilNextEventv+0x190>)
   b440c:	4921      	ldr	r1, [pc, #132]	; (b4494 <_Z21secondsUntilNextEventv+0x194>)
			nextPeriodBegins = Time.now() + secondsToReturn;	
   b440e:	e9c7 2600 	strd	r2, r6, [r7]
			Log.info("Starting a new period %lu sec till %s", secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str());
   b4412:	a802      	add	r0, sp, #8
   b4414:	9300      	str	r3, [sp, #0]
   b4416:	4633      	mov	r3, r6
   b4418:	f007 f87e 	bl	bb518 <_ZN9TimeClass6formatExPKc>
   b441c:	9b02      	ldr	r3, [sp, #8]
   b441e:	491e      	ldr	r1, [pc, #120]	; (b4498 <_Z21secondsUntilNextEventv+0x198>)
   b4420:	4622      	mov	r2, r4
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b4422:	4818      	ldr	r0, [pc, #96]	; (b4484 <_Z21secondsUntilNextEventv+0x184>)
   b4424:	f7ff ff1e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4428:	a802      	add	r0, sp, #8
   b442a:	f006 fdd1 	bl	bafd0 <_ZN6StringD1Ev>
   b442e:	e7ad      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
		else if (nextPeriodBegins - Time.now() <= nodeSpecificOffset) {		// Not at new period yet but within the node offset
   b4430:	f007 f8d1 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b4434:	ebb8 0800 	subs.w	r8, r8, r0
   b4438:	eb69 70e0 	sbc.w	r0, r9, r0, asr #31
   b443c:	4545      	cmp	r5, r8
   b443e:	eb76 0300 	sbcs.w	r3, r6, r0
   b4442:	db0f      	blt.n	b4464 <_Z21secondsUntilNextEventv+0x164>
			secondsToReturn = nextPeriodBegins - Time.now();
   b4444:	683c      	ldr	r4, [r7, #0]
   b4446:	f007 f8c6 	bl	bb5d6 <_ZN9TimeClass3nowEv>
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b444a:	4b11      	ldr	r3, [pc, #68]	; (b4490 <_Z21secondsUntilNextEventv+0x190>)
   b444c:	9300      	str	r3, [sp, #0]
   b444e:	e9d7 2300 	ldrd	r2, r3, [r7]
   b4452:	4910      	ldr	r1, [pc, #64]	; (b4494 <_Z21secondsUntilNextEventv+0x194>)
			secondsToReturn = nextPeriodBegins - Time.now();
   b4454:	1a24      	subs	r4, r4, r0
			Log.info("In terminal phase %lu seconds till %s",secondsToReturn, Time.format(nextPeriodBegins, "%T").c_str() );
   b4456:	a802      	add	r0, sp, #8
   b4458:	f007 f85e 	bl	bb518 <_ZN9TimeClass6formatExPKc>
   b445c:	9b02      	ldr	r3, [sp, #8]
   b445e:	490f      	ldr	r1, [pc, #60]	; (b449c <_Z21secondsUntilNextEventv+0x19c>)
   b4460:	4622      	mov	r2, r4
   b4462:	e7de      	b.n	b4422 <_Z21secondsUntilNextEventv+0x122>
			secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b4464:	442c      	add	r4, r5
		return secondsToReturn;
   b4466:	e791      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b4468:	243c      	movs	r4, #60	; 0x3c
   b446a:	e78f      	b.n	b438c <_Z21secondsUntilNextEventv+0x8c>
   b446c:	f3af 8000 	nop.w
   b4470:	00000000 	.word	0x00000000
   b4474:	40000000 	.word	0x40000000
   b4478:	2003dfc8 	.word	0x2003dfc8
   b447c:	40240000 	.word	0x40240000
   b4480:	000bdbcb 	.word	0x000bdbcb
   b4484:	2003e654 	.word	0x2003e654
   b4488:	000bdc02 	.word	0x000bdc02
   b448c:	2003df50 	.word	0x2003df50
   b4490:	000bdc41 	.word	0x000bdc41
   b4494:	2003e6a8 	.word	0x2003e6a8
   b4498:	000bdc44 	.word	0x000bdc44
   b449c:	000bdc6a 	.word	0x000bdc6a

000b44a0 <loop>:
void loop() {
   b44a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b44a4:	4ca2      	ldr	r4, [pc, #648]	; (b4730 <loop+0x290>)
   b44a6:	7823      	ldrb	r3, [r4, #0]
   b44a8:	3b01      	subs	r3, #1
void loop() {
   b44aa:	b08d      	sub	sp, #52	; 0x34
   b44ac:	2b04      	cmp	r3, #4
   b44ae:	f200 80eb 	bhi.w	b4688 <loop+0x1e8>
   b44b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   b44b6:	020f      	.short	0x020f
   b44b8:	004d0005 	.word	0x004d0005
   b44bc:	01a7016b 	.word	0x01a7016b
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b44c0:	4b9c      	ldr	r3, [pc, #624]	; (b4734 <loop+0x294>)
   b44c2:	781b      	ldrb	r3, [r3, #0]
   b44c4:	2b02      	cmp	r3, #2
   b44c6:	d001      	beq.n	b44cc <loop+0x2c>
   b44c8:	f7ff fee4 	bl	b4294 <_Z22publishStateTransitionv>
			if ((Time.now() - sysStatus.get_lastConnection() > 2 * sysStatus.get_frequencyMinutes() * 60UL) && sysStatus.get_openHours()) { // Park is open but no connect for over two hours
   b44cc:	f007 f883 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b44d0:	4605      	mov	r5, r0
   b44d2:	f001 fa7d 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b44d6:	f001 fc5d 	bl	b5d94 <_ZNK13sysStatusData18get_lastConnectionEv>
   b44da:	17eb      	asrs	r3, r5, #31
   b44dc:	1a2d      	subs	r5, r5, r0
   b44de:	eb63 0601 	sbc.w	r6, r3, r1
   b44e2:	f001 fa75 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b44e6:	f001 fbf9 	bl	b5cdc <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b44ea:	2378      	movs	r3, #120	; 0x78
   b44ec:	4358      	muls	r0, r3
   b44ee:	42a8      	cmp	r0, r5
   b44f0:	f04f 0300 	mov.w	r3, #0
   b44f4:	41b3      	sbcs	r3, r6
   b44f6:	da21      	bge.n	b453c <loop+0x9c>
   b44f8:	f001 fa6a 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b44fc:	f001 fa8c 	bl	b5a18 <_ZNK13sysStatusData13get_openHoursEv>
   b4500:	b1e0      	cbz	r0, b453c <loop+0x9c>
				Log.info("Park is open but we have not connected for over two reporting periods - need to reset");
   b4502:	498d      	ldr	r1, [pc, #564]	; (b4738 <loop+0x298>)
   b4504:	488d      	ldr	r0, [pc, #564]	; (b473c <loop+0x29c>)
   b4506:	f7ff fead 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				sysStatus.set_alertCodeNode(3);								// This will trigger a power cycle reset
   b450a:	f001 fa61 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b450e:	2103      	movs	r1, #3
   b4510:	f001 fba9 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());				
   b4514:	f001 fa5c 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4518:	4605      	mov	r5, r0
   b451a:	f007 f85c 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b451e:	4602      	mov	r2, r0
   b4520:	17c3      	asrs	r3, r0, #31
   b4522:	4628      	mov	r0, r5
   b4524:	f001 fc64 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				sysStatus.set_lastConnection(Time.now());					// Prevents cyclical resets
   b4528:	f001 fa52 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b452c:	4605      	mov	r5, r0
   b452e:	f007 f852 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b4532:	4602      	mov	r2, r0
   b4534:	17c3      	asrs	r3, r0, #31
   b4536:	4628      	mov	r0, r5
   b4538:	f001 fc55 	bl	b5de6 <_ZN13sysStatusData18set_lastConnectionEx>
			if (sysStatus.get_alertCodeNode() != 0) state = ERROR_STATE;
   b453c:	f001 fa48 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4540:	f001 fb3d 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4544:	2800      	cmp	r0, #0
   b4546:	f000 81dc 	beq.w	b4902 <loop+0x462>
   b454a:	2301      	movs	r3, #1
				state = IDLE_STATE;
   b454c:	7023      	strb	r3, [r4, #0]
			break;
   b454e:	e09b      	b.n	b4688 <loop+0x1e8>
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4550:	4b78      	ldr	r3, [pc, #480]	; (b4734 <loop+0x294>)
   b4552:	781b      	ldrb	r3, [r3, #0]
   b4554:	2b03      	cmp	r3, #3
   b4556:	d001      	beq.n	b455c <loop+0xbc>
   b4558:	f7ff fe9c 	bl	b4294 <_Z22publishStateTransitionv>
			int wakeInSeconds = secondsUntilNextEvent();					// Figure out how long to sleep 
   b455c:	f7ff fed0 	bl	b4300 <_Z21secondsUntilNextEventv>
   b4560:	4607      	mov	r7, r0
			time_t time = Time.now() + wakeInSeconds;
   b4562:	f007 f838 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b4566:	4605      	mov	r5, r0
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():" ", (sysStatus.get_openHours()) ? "on" : "off");
   b4568:	f007 f818 	bl	bb59c <_ZN9TimeClass7isValidEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b456c:	4606      	mov	r6, r0
   b456e:	2800      	cmp	r0, #0
   b4570:	d04c      	beq.n	b460c <loop+0x16c>
			time_t time = Time.now() + wakeInSeconds;
   b4572:	19ea      	adds	r2, r5, r7
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():" ", (sysStatus.get_openHours()) ? "on" : "off");
   b4574:	4b72      	ldr	r3, [pc, #456]	; (b4740 <loop+0x2a0>)
   b4576:	9300      	str	r3, [sp, #0]
   b4578:	4972      	ldr	r1, [pc, #456]	; (b4744 <loop+0x2a4>)
   b457a:	17d3      	asrs	r3, r2, #31
   b457c:	a808      	add	r0, sp, #32
   b457e:	f006 ffcb 	bl	bb518 <_ZN9TimeClass6formatExPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4582:	9d08      	ldr	r5, [sp, #32]
   b4584:	f001 fa24 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4588:	f001 fa46 	bl	b5a18 <_ZNK13sysStatusData13get_openHoursEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b458c:	4b6e      	ldr	r3, [pc, #440]	; (b4748 <loop+0x2a8>)
   b458e:	4a6f      	ldr	r2, [pc, #444]	; (b474c <loop+0x2ac>)
   b4590:	496f      	ldr	r1, [pc, #444]	; (b4750 <loop+0x2b0>)
   b4592:	2800      	cmp	r0, #0
   b4594:	bf08      	it	eq
   b4596:	461a      	moveq	r2, r3
   b4598:	9200      	str	r2, [sp, #0]
   b459a:	4868      	ldr	r0, [pc, #416]	; (b473c <loop+0x29c>)
   b459c:	462b      	mov	r3, r5
   b459e:	463a      	mov	r2, r7
   b45a0:	f7ff fe60 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():" ", (sysStatus.get_openHours()) ? "on" : "off");
   b45a4:	b116      	cbz	r6, b45ac <loop+0x10c>
   b45a6:	a808      	add	r0, sp, #32
   b45a8:	f006 fd12 	bl	bafd0 <_ZN6StringD1Ev>
			if (!sysStatus.get_openHours()) digitalWrite(MODULE_POWER_PIN,HIGH);  // disable (HIGH) the sensor
   b45ac:	f001 fa10 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b45b0:	f001 fa32 	bl	b5a18 <_ZNK13sysStatusData13get_openHoursEv>
   b45b4:	4b67      	ldr	r3, [pc, #412]	; (b4754 <loop+0x2b4>)
   b45b6:	f8b3 b000 	ldrh.w	fp, [r3]
   b45ba:	b918      	cbnz	r0, b45c4 <loop+0x124>
   b45bc:	2101      	movs	r1, #1
   b45be:	4658      	mov	r0, fp
   b45c0:	f007 fa01 	bl	bb9c6 <digitalWrite>
        if (valid_) {
   b45c4:	4b64      	ldr	r3, [pc, #400]	; (b4758 <loop+0x2b8>)
   b45c6:	7d1a      	ldrb	r2, [r3, #20]
   b45c8:	b10a      	cbz	r2, b45ce <loop+0x12e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b45ca:	2202      	movs	r2, #2
   b45cc:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b45ce:	4b63      	ldr	r3, [pc, #396]	; (b475c <loop+0x2bc>)
   b45d0:	4861      	ldr	r0, [pc, #388]	; (b4758 <loop+0x2b8>)
   b45d2:	f8b3 9000 	ldrh.w	r9, [r3]
   b45d6:	2200      	movs	r2, #0
   b45d8:	4649      	mov	r1, r9
   b45da:	f7ff fe0f 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b45de:	4b60      	ldr	r3, [pc, #384]	; (b4760 <loop+0x2c0>)
   b45e0:	f8b3 a000 	ldrh.w	sl, [r3]
   b45e4:	2201      	movs	r2, #1
   b45e6:	4651      	mov	r1, sl
   b45e8:	f7ff fe08 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b45ec:	7d03      	ldrb	r3, [r0, #20]
   b45ee:	4606      	mov	r6, r0
   b45f0:	b313      	cbz	r3, b4638 <loop+0x198>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b45f2:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b45f4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b45f8:	68db      	ldr	r3, [r3, #12]
   b45fa:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b45fe:	b13b      	cbz	r3, b4610 <loop+0x170>
            if (start->type == type) {
   b4600:	889a      	ldrh	r2, [r3, #4]
   b4602:	2a04      	cmp	r2, #4
   b4604:	f000 820c 	beq.w	b4a20 <loop+0x580>
            start = start->next;
   b4608:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b460a:	e7f8      	b.n	b45fe <loop+0x15e>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b460c:	4d55      	ldr	r5, [pc, #340]	; (b4764 <loop+0x2c4>)
   b460e:	e7b9      	b.n	b4584 <loop+0xe4>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4610:	4955      	ldr	r1, [pc, #340]	; (b4768 <loop+0x2c8>)
   b4612:	2010      	movs	r0, #16
   b4614:	f007 fad0 	bl	bbbb8 <_ZnwjRKSt9nothrow_t>
   b4618:	4605      	mov	r5, r0
   b461a:	2800      	cmp	r0, #0
   b461c:	f000 81fe 	beq.w	b4a1c <loop+0x57c>
   b4620:	2210      	movs	r2, #16
   b4622:	2100      	movs	r1, #0
   b4624:	f009 f8d4 	bl	bd7d0 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4628:	4b50      	ldr	r3, [pc, #320]	; (b476c <loop+0x2cc>)
   b462a:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b462c:	2304      	movs	r3, #4
   b462e:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4630:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b4632:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4636:	6135      	str	r5, [r6, #16]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4638:	2100      	movs	r1, #0
   b463a:	484d      	ldr	r0, [pc, #308]	; (b4770 <loop+0x2d0>)
   b463c:	f002 f80a 	bl	b6654 <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b4640:	4945      	ldr	r1, [pc, #276]	; (b4758 <loop+0x2b8>)
   b4642:	a805      	add	r0, sp, #20
   b4644:	f006 fde8 	bl	bb218 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
			delay(2000);			// For Testing
   b4648:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b464c:	f004 fc6e 	bl	b8f2c <delay>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4650:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4654:	4846      	ldr	r0, [pc, #280]	; (b4770 <loop+0x2d0>)
   b4656:	f001 fffd 	bl	b6654 <_ZN6AB18056setWDTEi>
			digitalWrite(MODULE_POWER_PIN,LOW);             				// Enable (LOW) the sensor
   b465a:	2100      	movs	r1, #0
   b465c:	4658      	mov	r0, fp
   b465e:	f007 f9b2 	bl	bb9c6 <digitalWrite>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4662:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b4664:	2b00      	cmp	r3, #0
   b4666:	d034      	beq.n	b46d2 <loop+0x232>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4668:	889a      	ldrh	r2, [r3, #4]
   b466a:	2a01      	cmp	r2, #1
   b466c:	d131      	bne.n	b46d2 <loop+0x232>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b466e:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b4670:	4599      	cmp	r9, r3
   b4672:	d131      	bne.n	b46d8 <loop+0x238>
				Log.info("Woke with user button - LoRA State");
   b4674:	493f      	ldr	r1, [pc, #252]	; (b4774 <loop+0x2d4>)
   b4676:	4831      	ldr	r0, [pc, #196]	; (b473c <loop+0x29c>)
   b4678:	f7ff fdf4 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;
   b467c:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b467e:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b4680:	7023      	strb	r3, [r4, #0]
   b4682:	b108      	cbz	r0, b4688 <loop+0x1e8>
            free(wakeupSource_);
   b4684:	f004 fbea 	bl	b8e5c <free>
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4688:	4839      	ldr	r0, [pc, #228]	; (b4770 <loop+0x2d0>)
	if (sensorDetect) {														// Count the pulse and reset for next
   b468a:	4c3b      	ldr	r4, [pc, #236]	; (b4778 <loop+0x2d8>)
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b468c:	f002 fb8e 	bl	b6dac <_ZN6AB18054loopEv>
	current.loop();
   b4690:	f001 fa12 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b4694:	f001 fa2b 	bl	b5aee <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4698:	f001 f99a 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b469c:	f001 f9b3 	bl	b5a06 <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {														// Count the pulse and reset for next
   b46a0:	7823      	ldrb	r3, [r4, #0]
   b46a2:	b123      	cbz	r3, b46ae <loop+0x20e>
		if (recordCount()) sensorDetect = false;
   b46a4:	f001 fd60 	bl	b6168 <_Z11recordCountv>
   b46a8:	b108      	cbz	r0, b46ae <loop+0x20e>
   b46aa:	2300      	movs	r3, #0
   b46ac:	7023      	strb	r3, [r4, #0]
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b46ae:	4b33      	ldr	r3, [pc, #204]	; (b477c <loop+0x2dc>)
   b46b0:	681b      	ldr	r3, [r3, #0]
   b46b2:	2b00      	cmp	r3, #0
   b46b4:	f2c0 81b7 	blt.w	b4a26 <loop+0x586>
		Log.info("Resetting due to low memory");
   b46b8:	4931      	ldr	r1, [pc, #196]	; (b4780 <loop+0x2e0>)
   b46ba:	4820      	ldr	r0, [pc, #128]	; (b473c <loop+0x29c>)
   b46bc:	f7ff fdd2 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b46c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b46c4:	f004 fc32 	bl	b8f2c <delay>
}
   b46c8:	b00d      	add	sp, #52	; 0x34
   b46ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b46ce:	f006 bda0 	b.w	bb212 <_ZN11SystemClass5resetEv>
            return std::numeric_limits<pin_t>::max();
   b46d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b46d6:	e7cb      	b.n	b4670 <loop+0x1d0>
			else if (result.wakeupPin() == INT_PIN) {
   b46d8:	459a      	cmp	sl, r3
   b46da:	d10f      	bne.n	b46fc <loop+0x25c>
				Log.info("Woke with sensor interrupt");						// Will count at the bottom of the main loop
   b46dc:	4929      	ldr	r1, [pc, #164]	; (b4784 <loop+0x2e4>)
   b46de:	4817      	ldr	r0, [pc, #92]	; (b473c <loop+0x29c>)
   b46e0:	f7ff fdc0 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				if (secondsUntilNextEvent() <= 2 || secondsUntilNextEvent() >= 598) state = IDLE_STATE;		// If more or less than 2 seconds we may miss reporting
   b46e4:	f7ff fe0c 	bl	b4300 <_Z21secondsUntilNextEventv>
   b46e8:	2802      	cmp	r0, #2
   b46ea:	dd1e      	ble.n	b472a <loop+0x28a>
   b46ec:	f7ff fe08 	bl	b4300 <_Z21secondsUntilNextEventv>
   b46f0:	f240 2355 	movw	r3, #597	; 0x255
   b46f4:	4298      	cmp	r0, r3
   b46f6:	dc18      	bgt.n	b472a <loop+0x28a>
				else state = SLEEPING_STATE;								// This is the normal behavioud
   b46f8:	2303      	movs	r3, #3
   b46fa:	e7c0      	b.n	b467e <loop+0x1de>
				Log.info("Time is up at %s with %li free memory", Time.format((Time.now()+wakeInSeconds), "%T").c_str(), System.freeMemory());
   b46fc:	f006 ff6b 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b4700:	4b0f      	ldr	r3, [pc, #60]	; (b4740 <loop+0x2a0>)
   b4702:	4910      	ldr	r1, [pc, #64]	; (b4744 <loop+0x2a4>)
   b4704:	9300      	str	r3, [sp, #0]
   b4706:	19c2      	adds	r2, r0, r7
   b4708:	17d3      	asrs	r3, r2, #31
   b470a:	a808      	add	r0, sp, #32
   b470c:	f006 ff04 	bl	bb518 <_ZN9TimeClass6formatExPKc>
   b4710:	9a08      	ldr	r2, [sp, #32]
   b4712:	9203      	str	r2, [sp, #12]
   b4714:	f006 fde0 	bl	bb2d8 <_ZN11SystemClass10freeMemoryEv>
   b4718:	9a03      	ldr	r2, [sp, #12]
   b471a:	491b      	ldr	r1, [pc, #108]	; (b4788 <loop+0x2e8>)
   b471c:	4603      	mov	r3, r0
   b471e:	4807      	ldr	r0, [pc, #28]	; (b473c <loop+0x29c>)
   b4720:	f7ff fda0 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4724:	a808      	add	r0, sp, #32
   b4726:	f006 fc53 	bl	bafd0 <_ZN6StringD1Ev>
				state = IDLE_STATE;
   b472a:	2302      	movs	r3, #2
   b472c:	e7a7      	b.n	b467e <loop+0x1de>
   b472e:	bf00      	nop
   b4730:	2003dfcd 	.word	0x2003dfcd
   b4734:	2003dfc4 	.word	0x2003dfc4
   b4738:	000bdc97 	.word	0x000bdc97
   b473c:	2003e654 	.word	0x2003e654
   b4740:	000bdc41 	.word	0x000bdc41
   b4744:	2003e6a8 	.word	0x2003e6a8
   b4748:	000bdc93 	.word	0x000bdc93
   b474c:	000bdc90 	.word	0x000bdc90
   b4750:	000bdced 	.word	0x000bdced
   b4754:	000be556 	.word	0x000be556
   b4758:	2003df88 	.word	0x2003df88
   b475c:	000be552 	.word	0x000be552
   b4760:	000be554 	.word	0x000be554
   b4764:	000be630 	.word	0x000be630
   b4768:	000bef18 	.word	0x000bef18
   b476c:	00030010 	.word	0x00030010
   b4770:	2003df68 	.word	0x2003df68
   b4774:	000bdd28 	.word	0x000bdd28
   b4778:	2003dfcc 	.word	0x2003dfcc
   b477c:	2003dd6c 	.word	0x2003dd6c
   b4780:	000bde99 	.word	0x000bde99
   b4784:	000bdd4b 	.word	0x000bdd4b
   b4788:	000bdd66 	.word	0x000bdd66
			if (state != oldState) {
   b478c:	4ba7      	ldr	r3, [pc, #668]	; (b4a2c <loop+0x58c>)
   b478e:	781b      	ldrb	r3, [r3, #0]
   b4790:	2b04      	cmp	r3, #4
   b4792:	f43f af79 	beq.w	b4688 <loop+0x1e8>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4796:	f7ff fd7d 	bl	b4294 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();
   b479a:	f000 fc19 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b479e:	f000 fc9f 	bl	b50e0 <_ZN14LoRA_Functions11clearBufferEv>
				takeMeasurements();
   b47a2:	f001 fdf1 	bl	b6388 <_Z16takeMeasurementsv>
				if (sysStatus.get_alertCodeNode() == 0) result = LoRA_Functions::instance().composeDataReportNode();
   b47a6:	f001 f913 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b47aa:	f001 fa08 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b47ae:	b978      	cbnz	r0, b47d0 <loop+0x330>
   b47b0:	f000 fc0e 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b47b4:	f000 fcde 	bl	b5174 <_ZN14LoRA_Functions21composeDataReportNodeEv>
   b47b8:	4605      	mov	r5, r0
				if (!result) {
   b47ba:	4b9d      	ldr	r3, [pc, #628]	; (b4a30 <loop+0x590>)
   b47bc:	b9f5      	cbnz	r5, b47fc <loop+0x35c>
					retryState++;
   b47be:	681a      	ldr	r2, [r3, #0]
					Log.info("Failed in data send, retryState = %d",retryState);
   b47c0:	499c      	ldr	r1, [pc, #624]	; (b4a34 <loop+0x594>)
   b47c2:	489d      	ldr	r0, [pc, #628]	; (b4a38 <loop+0x598>)
					retryState++;
   b47c4:	3201      	adds	r2, #1
   b47c6:	601a      	str	r2, [r3, #0]
					Log.info("Failed in data send, retryState = %d",retryState);
   b47c8:	f7ff fd4c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					state = SLEEPING_STATE;
   b47cc:	2303      	movs	r3, #3
   b47ce:	e6bd      	b.n	b454c <loop+0xac>
				else if (sysStatus.get_alertCodeNode() == 1) {
   b47d0:	f001 f8fe 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b47d4:	f001 f9f3 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b47d8:	2801      	cmp	r0, #1
   b47da:	d10a      	bne.n	b47f2 <loop+0x352>
					result = LoRA_Functions::instance().composeJoinRequesttNode();
   b47dc:	f000 fbf8 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b47e0:	f000 fe7e 	bl	b54e0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
					result = LoRA_Functions::instance().composeAlertReportNode();	// Sent the alert - clear the flag
   b47e4:	4605      	mov	r5, r0
					sysStatus.set_alertCodeNode(0);
   b47e6:	f001 f8f3 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b47ea:	2100      	movs	r1, #0
   b47ec:	f001 fa3b 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
   b47f0:	e7e3      	b.n	b47ba <loop+0x31a>
					result = LoRA_Functions::instance().composeAlertReportNode();	// Sent the alert - clear the flag
   b47f2:	f000 fbed 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b47f6:	f000 ff3b 	bl	b5670 <_ZN14LoRA_Functions22composeAlertReportNodeEv>
   b47fa:	e7f3      	b.n	b47e4 <loop+0x344>
					retryState = 0;
   b47fc:	2200      	movs	r2, #0
   b47fe:	601a      	str	r2, [r3, #0]
					state = LoRA_LISTENING_STATE;
   b4800:	2305      	movs	r3, #5
   b4802:	e6a3      	b.n	b454c <loop+0xac>
			if (state != oldState) {
   b4804:	4b89      	ldr	r3, [pc, #548]	; (b4a2c <loop+0x58c>)
   b4806:	4d8d      	ldr	r5, [pc, #564]	; (b4a3c <loop+0x59c>)
   b4808:	781b      	ldrb	r3, [r3, #0]
   b480a:	2b05      	cmp	r3, #5
   b480c:	d006      	beq.n	b481c <loop+0x37c>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b480e:	f7ff fd41 	bl	b4294 <_Z22publishStateTransitionv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4812:	f004 f805 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
				state = SLEEPING_STATE;
   b4816:	2303      	movs	r3, #3
				startListening = millis();
   b4818:	6028      	str	r0, [r5, #0]
				state = SLEEPING_STATE;
   b481a:	7023      	strb	r3, [r4, #0]
			while (millis() - startListening < 5000) {
   b481c:	f241 3687 	movw	r6, #4999	; 0x1387
   b4820:	f003 fffe 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
   b4824:	682b      	ldr	r3, [r5, #0]
   b4826:	1ac0      	subs	r0, r0, r3
   b4828:	42b0      	cmp	r0, r6
   b482a:	f63f af2d 	bhi.w	b4688 <loop+0x1e8>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {// Listen for acknowledgement
   b482e:	f000 fbcf 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b4832:	f000 ff77 	bl	b5724 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4836:	2800      	cmp	r0, #0
   b4838:	d0f2      	beq.n	b4820 <loop+0x380>
					sysStatus.set_lastConnection(Time.now());
   b483a:	f001 f8c9 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b483e:	4605      	mov	r5, r0
   b4840:	f006 fec9 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b4844:	4602      	mov	r2, r0
   b4846:	17c3      	asrs	r3, r0, #31
   b4848:	4628      	mov	r0, r5
   b484a:	f001 facc 	bl	b5de6 <_ZN13sysStatusData18set_lastConnectionEx>
					randomSeed(sysStatus.get_lastConnection());				// Done so we can genrate rando numbers later
   b484e:	f001 f8bf 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4852:	f001 fa9f 	bl	b5d94 <_ZNK13sysStatusData18get_lastConnectionEv>
   b4856:	f006 faec 	bl	bae32 <_Z10randomSeedj>
					ab1805.setRtcFromTime(Time.now());
   b485a:	f006 febc 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b485e:	2301      	movs	r3, #1
   b4860:	4602      	mov	r2, r0
   b4862:	9300      	str	r3, [sp, #0]
   b4864:	17c3      	asrs	r3, r0, #31
   b4866:	4876      	ldr	r0, [pc, #472]	; (b4a40 <loop+0x5a0>)
   b4868:	f002 fa90 	bl	b6d8c <_ZN6AB180514setRtcFromTimeExb>
					Log.info("Here we are with alert code %d",sysStatus.get_alertCodeNode());
   b486c:	f001 f8b0 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4870:	f001 f9a5 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4874:	4973      	ldr	r1, [pc, #460]	; (b4a44 <loop+0x5a4>)
   b4876:	4602      	mov	r2, r0
   b4878:	486f      	ldr	r0, [pc, #444]	; (b4a38 <loop+0x598>)
   b487a:	f7ff fcf3 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					if (sysStatus.get_alertCodeNode() > 0) {				// If we are reporting an alert we will also report data
   b487e:	f001 f8a7 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4882:	f001 f99c 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4886:	b108      	cbz	r0, b488c <loop+0x3ec>
				state = IDLE_STATE;
   b4888:	2302      	movs	r3, #2
   b488a:	e65f      	b.n	b454c <loop+0xac>
						static int lastReportingHour = Time.hour();
   b488c:	4d6e      	ldr	r5, [pc, #440]	; (b4a48 <loop+0x5a8>)
   b488e:	4c6f      	ldr	r4, [pc, #444]	; (b4a4c <loop+0x5ac>)
   b4890:	782b      	ldrb	r3, [r5, #0]
   b4892:	f3bf 8f5b 	dmb	ish
   b4896:	f013 0f01 	tst.w	r3, #1
   b489a:	d109      	bne.n	b48b0 <loop+0x410>
   b489c:	4628      	mov	r0, r5
   b489e:	f7ff fc0d 	bl	b40bc <__cxa_guard_acquire>
   b48a2:	b128      	cbz	r0, b48b0 <loop+0x410>
   b48a4:	f006 fea8 	bl	bb5f8 <_ZN9TimeClass4hourEv>
   b48a8:	6020      	str	r0, [r4, #0]
   b48aa:	4628      	mov	r0, r5
   b48ac:	f7ff fc0b 	bl	b40c6 <__cxa_guard_release>
						if (Time.hour() != lastReportingHour) {
   b48b0:	f006 fea2 	bl	bb5f8 <_ZN9TimeClass4hourEv>
   b48b4:	6823      	ldr	r3, [r4, #0]
   b48b6:	4298      	cmp	r0, r3
   b48b8:	d007      	beq.n	b48ca <loop+0x42a>
							current.set_hourlyCount(0);					    // Zero the hourly count
   b48ba:	f001 f8fd 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b48be:	2100      	movs	r1, #0
   b48c0:	f001 fa45 	bl	b5d4e <_ZN17currentStatusData15set_hourlyCountEt>
							lastReportingHour = Time.hour();
   b48c4:	f006 fe98 	bl	bb5f8 <_ZN9TimeClass4hourEv>
   b48c8:	6020      	str	r0, [r4, #0]
						LoRA_Functions::instance().sleepLoRaRadio();		// Done with LoRA - put radio to sleep
   b48ca:	f000 fb81 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b48ce:	f000 fc17 	bl	b5100 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
   b48d2:	e6d9      	b.n	b4688 <loop+0x1e8>
			if (state != oldState) publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b48d4:	4b55      	ldr	r3, [pc, #340]	; (b4a2c <loop+0x58c>)
   b48d6:	781b      	ldrb	r3, [r3, #0]
   b48d8:	2b01      	cmp	r3, #1
   b48da:	d001      	beq.n	b48e0 <loop+0x440>
   b48dc:	f7ff fcda 	bl	b4294 <_Z22publishStateTransitionv>
			switch (sysStatus.get_alertCodeNode())
   b48e0:	f001 f876 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b48e4:	f001 f96b 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b48e8:	3801      	subs	r0, #1
   b48ea:	2805      	cmp	r0, #5
   b48ec:	f200 8091 	bhi.w	b4a12 <loop+0x572>
   b48f0:	e8df f000 	tbb	[pc, r0]
   b48f4:	480b0903 	.word	0x480b0903
   b48f8:	8579      	.short	0x8579
				Log.info("Alert 1 - Join Request Required");
   b48fa:	4955      	ldr	r1, [pc, #340]	; (b4a50 <loop+0x5b0>)
   b48fc:	484e      	ldr	r0, [pc, #312]	; (b4a38 <loop+0x598>)
   b48fe:	f7ff fcb1 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;							// Sends the alert and clears alert code
   b4902:	2304      	movs	r3, #4
   b4904:	e622      	b.n	b454c <loop+0xac>
				Log.info("Alert 2- Time Sync Required");
   b4906:	4953      	ldr	r1, [pc, #332]	; (b4a54 <loop+0x5b4>)
   b4908:	e7f8      	b.n	b48fc <loop+0x45c>
				static system_tick_t enteredState = millis();
   b490a:	4c53      	ldr	r4, [pc, #332]	; (b4a58 <loop+0x5b8>)
   b490c:	4d53      	ldr	r5, [pc, #332]	; (b4a5c <loop+0x5bc>)
   b490e:	7823      	ldrb	r3, [r4, #0]
   b4910:	f3bf 8f5b 	dmb	ish
   b4914:	f013 0f01 	tst.w	r3, #1
   b4918:	d109      	bne.n	b492e <loop+0x48e>
   b491a:	4620      	mov	r0, r4
   b491c:	f7ff fbce 	bl	b40bc <__cxa_guard_acquire>
   b4920:	b128      	cbz	r0, b492e <loop+0x48e>
   b4922:	f003 ff7d 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
   b4926:	6028      	str	r0, [r5, #0]
   b4928:	4620      	mov	r0, r4
   b492a:	f7ff fbcc 	bl	b40c6 <__cxa_guard_release>
   b492e:	f003 ff77 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b4932:	682b      	ldr	r3, [r5, #0]
   b4934:	1ac0      	subs	r0, r0, r3
   b4936:	f247 5330 	movw	r3, #30000	; 0x7530
   b493a:	4298      	cmp	r0, r3
   b493c:	f67f aea4 	bls.w	b4688 <loop+0x1e8>
					Log.info("Alert 3 - Resetting device");
   b4940:	4947      	ldr	r1, [pc, #284]	; (b4a60 <loop+0x5c0>)
   b4942:	483d      	ldr	r0, [pc, #244]	; (b4a38 <loop+0x598>)
   b4944:	f7ff fc8e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(0);							// Need to clear so we don't get in a retry cycle
   b4948:	f001 f842 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b494c:	2100      	movs	r1, #0
   b494e:	f001 f98a 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());
   b4952:	f001 f83d 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4956:	4604      	mov	r4, r0
   b4958:	f006 fe3d 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b495c:	4602      	mov	r2, r0
   b495e:	17c3      	asrs	r3, r0, #31
   b4960:	4620      	mov	r0, r4
   b4962:	f001 fa45 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
					sysStatus.flush(false);									// All this is required as we are done trainsiting loop
   b4966:	f001 f833 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b496a:	6803      	ldr	r3, [r0, #0]
   b496c:	2100      	movs	r1, #0
   b496e:	68db      	ldr	r3, [r3, #12]
   b4970:	4798      	blx	r3
					delay(2000);
   b4972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4976:	f004 fad9 	bl	b8f2c <delay>
					ab1805.deepPowerDown();
   b497a:	211e      	movs	r1, #30
   b497c:	4830      	ldr	r0, [pc, #192]	; (b4a40 <loop+0x5a0>)
   b497e:	f001 ffc3 	bl	b6908 <_ZN6AB180513deepPowerDownEi>
   b4982:	e681      	b.n	b4688 <loop+0x1e8>
				Log.info("Initialize LoRA radio");
   b4984:	4937      	ldr	r1, [pc, #220]	; (b4a64 <loop+0x5c4>)
   b4986:	482c      	ldr	r0, [pc, #176]	; (b4a38 <loop+0x598>)
   b4988:	f7ff fc6c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				if(LoRA_Functions::instance().initializeRadio()) {
   b498c:	f000 fb20 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b4990:	f000 fbbc 	bl	b510c <_ZN14LoRA_Functions15initializeRadioEv>
   b4994:	b198      	cbz	r0, b49be <loop+0x51e>
					Log.info("Initialization successful");
   b4996:	4934      	ldr	r1, [pc, #208]	; (b4a68 <loop+0x5c8>)
   b4998:	4827      	ldr	r0, [pc, #156]	; (b4a38 <loop+0x598>)
   b499a:	f7ff fc63 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(1);							// Send a join request as node is unconfigured
   b499e:	f001 f817 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b49a2:	2101      	movs	r1, #1
   b49a4:	f001 f95f 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
					sysStatus.set_alertTimestampNode(Time.now());	
   b49a8:	f001 f812 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b49ac:	4605      	mov	r5, r0
   b49ae:	f006 fe12 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b49b2:	4602      	mov	r2, r0
   b49b4:	17c3      	asrs	r3, r0, #31
   b49b6:	4628      	mov	r0, r5
   b49b8:	f001 fa1a 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
					state = LoRA_TRANSMISSION_STATE;						// Sends the alert and clears alert code
   b49bc:	e7a1      	b.n	b4902 <loop+0x462>
					Log.info(("Initialization not successful - power cycle"));
   b49be:	492b      	ldr	r1, [pc, #172]	; (b4a6c <loop+0x5cc>)
   b49c0:	481d      	ldr	r0, [pc, #116]	; (b4a38 <loop+0x598>)
   b49c2:	f7ff fc4f 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					sysStatus.set_alertCodeNode(3);							// Next time through - will transition to power cycle
   b49c6:	f001 f803 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b49ca:	2103      	movs	r1, #3
				sysStatus.set_alertCodeNode(1);								// Resetting system values requires we re-join the network
   b49cc:	f001 f94b 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
				sysStatus.set_alertTimestampNode(Time.now());			
   b49d0:	f000 fffe 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b49d4:	4605      	mov	r5, r0
   b49d6:	f006 fdfe 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b49da:	4602      	mov	r2, r0
   b49dc:	17c3      	asrs	r3, r0, #31
   b49de:	4628      	mov	r0, r5
   b49e0:	f001 fa06 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
				state = IDLE_STATE;	
   b49e4:	e750      	b.n	b4888 <loop+0x3e8>
				sysStatus.loadSystemDefaults();								// Resets the sysStatus values to factory default
   b49e6:	f000 fff3 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b49ea:	f001 fa07 	bl	b5dfc <_ZN13sysStatusData18loadSystemDefaultsEv>
				current.resetEverything();									// Resets the node counts
   b49ee:	f001 f863 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b49f2:	f001 fa6d 	bl	b5ed0 <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(1);								// Resetting system values requires we re-join the network
   b49f6:	f000 ffeb 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b49fa:	2101      	movs	r1, #1
   b49fc:	e7e6      	b.n	b49cc <loop+0x52c>
				current.resetEverything();
   b49fe:	f001 f85b 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b4a02:	f001 fa65 	bl	b5ed0 <_ZN17currentStatusData15resetEverythingEv>
				sysStatus.set_alertCodeNode(0);
   b4a06:	f000 ffe3 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4a0a:	2100      	movs	r1, #0
   b4a0c:	f001 f92b 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4a10:	e73a      	b.n	b4888 <loop+0x3e8>
				Log.info("Undefined Error State");
   b4a12:	4917      	ldr	r1, [pc, #92]	; (b4a70 <loop+0x5d0>)
   b4a14:	4808      	ldr	r0, [pc, #32]	; (b4a38 <loop+0x598>)
   b4a16:	f7ff fc25 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4a1a:	e7f4      	b.n	b4a06 <loop+0x566>
                valid_ = false;
   b4a1c:	7530      	strb	r0, [r6, #20]
                return *this;
   b4a1e:	e60b      	b.n	b4638 <loop+0x198>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4a20:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4a24:	e608      	b.n	b4638 <loop+0x198>
}
   b4a26:	b00d      	add	sp, #52	; 0x34
   b4a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4a2c:	2003dfc4 	.word	0x2003dfc4
   b4a30:	2003dfc8 	.word	0x2003dfc8
   b4a34:	000bdd8c 	.word	0x000bdd8c
   b4a38:	2003e654 	.word	0x2003e654
   b4a3c:	2003df5c 	.word	0x2003df5c
   b4a40:	2003df68 	.word	0x2003df68
   b4a44:	000bddb1 	.word	0x000bddb1
   b4a48:	2003df48 	.word	0x2003df48
   b4a4c:	2003df60 	.word	0x2003df60
   b4a50:	000bddd0 	.word	0x000bddd0
   b4a54:	000bddf0 	.word	0x000bddf0
   b4a58:	2003df44 	.word	0x2003df44
   b4a5c:	2003df58 	.word	0x2003df58
   b4a60:	000bde0c 	.word	0x000bde0c
   b4a64:	000bde27 	.word	0x000bde27
   b4a68:	000bde3d 	.word	0x000bde3d
   b4a6c:	000bde57 	.word	0x000bde57
   b4a70:	000bde83 	.word	0x000bde83

000b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4a74:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4a76:	2300      	movs	r3, #0
   b4a78:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4a7a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4a7c:	4604      	mov	r4, r0
   b4a7e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4a80:	b12b      	cbz	r3, b4a8e <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4a82:	2202      	movs	r2, #2
   b4a84:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4a86:	68eb      	ldr	r3, [r5, #12]
   b4a88:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4a8a:	68ab      	ldr	r3, [r5, #8]
   b4a8c:	60a3      	str	r3, [r4, #8]
    }
   b4a8e:	4620      	mov	r0, r4
   b4a90:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4a94 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a98:	b095      	sub	sp, #84	; 0x54
   b4a9a:	4605      	mov	r5, r0
        };
   b4a9c:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4a9e:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4aa0:	4690      	mov	r8, r2
   b4aa2:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4aa4:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b4aa6:	f7ff ffe5 	bl	b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4aaa:	a904      	add	r1, sp, #16
   b4aac:	a808      	add	r0, sp, #32
   b4aae:	f7ff ffe1 	bl	b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b4ab2:	a908      	add	r1, sp, #32
   b4ab4:	4630      	mov	r0, r6
   b4ab6:	f7ff ffdd 	bl	b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b4aba:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4abe:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b4ac0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4ac4:	f7ff fae7 	bl	b4096 <_Znwj>
   b4ac8:	4604      	mov	r4, r0
   b4aca:	b1a0      	cbz	r0, b4af6 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4acc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4ad0:	ab01      	add	r3, sp, #4
   b4ad2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4ada:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4ade:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4ae4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ae6:	60a3      	str	r3, [r4, #8]
   b4ae8:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b4aee:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4af2:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4af4:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4af6:	4b24      	ldr	r3, [pc, #144]	; (b4b88 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4af8:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b4afa:	4b24      	ldr	r3, [pc, #144]	; (b4b8c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b4afc:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b4afe:	2200      	movs	r2, #0
   b4b00:	2300      	movs	r3, #0
   b4b02:	f04f 0900 	mov.w	r9, #0
   b4b06:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b4b0a:	4b21      	ldr	r3, [pc, #132]	; (b4b90 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4b0c:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4b10:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b12:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4b14:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4b18:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4b1c:	f7ff fabb 	bl	b4096 <_Znwj>
   b4b20:	4604      	mov	r4, r0
   b4b22:	b1d8      	cbz	r0, b4b5c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4b26:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b4b2a:	b133      	cbz	r3, b4b3a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4b2c:	2202      	movs	r2, #2
   b4b2e:	a910      	add	r1, sp, #64	; 0x40
   b4b30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4b32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4b34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4b36:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4b38:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b4b3a:	4b16      	ldr	r3, [pc, #88]	; (b4b94 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4b3c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4b3e:	4a16      	ldr	r2, [pc, #88]	; (b4b98 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4b40:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4b42:	ab01      	add	r3, sp, #4
   b4b44:	4640      	mov	r0, r8
   b4b46:	4639      	mov	r1, r7
   b4b48:	f004 f88e 	bl	b8c68 <system_subscribe_event>
        if (r) {
   b4b4c:	b1b0      	cbz	r0, b4b7c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4b4e:	4620      	mov	r0, r4
   b4b50:	f7ff fb3e 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4b54:	2110      	movs	r1, #16
   b4b56:	4620      	mov	r0, r4
   b4b58:	f7ff faa1 	bl	b409e <_ZdlPvj>
   b4b5c:	a810      	add	r0, sp, #64	; 0x40
   b4b5e:	f7ff fb37 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b62:	4630      	mov	r0, r6
   b4b64:	f7ff fb34 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b68:	a808      	add	r0, sp, #32
   b4b6a:	f7ff fb31 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4b6e:	a804      	add	r0, sp, #16
   b4b70:	f7ff fb2e 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
    }
   b4b74:	4628      	mov	r0, r5
   b4b76:	b015      	add	sp, #84	; 0x54
   b4b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4b7c:	9b02      	ldr	r3, [sp, #8]
   b4b7e:	60ab      	str	r3, [r5, #8]
   b4b80:	e9c5 8700 	strd	r8, r7, [r5]
   b4b84:	e7ea      	b.n	b4b5c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b4b86:	bf00      	nop
   b4b88:	000b4145 	.word	0x000b4145
   b4b8c:	000b4d79 	.word	0x000b4d79
   b4b90:	000c0002 	.word	0x000c0002
   b4b94:	000b41e3 	.word	0x000b41e3
   b4b98:	000b40f1 	.word	0x000b40f1

000b4b9c <setup>:
void setup() {
   b4b9c:	b570      	push	{r4, r5, r6, lr}
        return hal_timer_millis(nullptr);
   b4b9e:	2000      	movs	r0, #0
   b4ba0:	b08c      	sub	sp, #48	; 0x30
   b4ba2:	f003 fe4d 	bl	b8840 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4ba6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4baa:	4604      	mov	r4, r0
   b4bac:	2000      	movs	r0, #0
   b4bae:	f003 fe47 	bl	b8840 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4bb2:	1b00      	subs	r0, r0, r4
   b4bb4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4bb8:	42a8      	cmp	r0, r5
   b4bba:	f171 0300 	sbcs.w	r3, r1, #0
   b4bbe:	d207      	bcs.n	b4bd0 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4bc0:	f006 fdf0 	bl	bb7a4 <_Z16_fetch_usbserialv>
   b4bc4:	f006 fde3 	bl	bb78e <_ZN9USBSerial11isConnectedEv>
   b4bc8:	b910      	cbnz	r0, b4bd0 <setup+0x34>
            spark_process();
   b4bca:	f004 f8a7 	bl	b8d1c <spark_process>
        while (_while() && !_condition()) {
   b4bce:	e7ed      	b.n	b4bac <setup+0x10>
   b4bd0:	f006 fde8 	bl	bb7a4 <_Z16_fetch_usbserialv>
   b4bd4:	f006 fddb 	bl	bb78e <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b4bd8:	f001 f9b2 	bl	b5f40 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b4bdc:	f001 f9dc 	bl	b5f98 <_Z18initializePowerCfgv>
		current.setup();
   b4be0:	f000 ff6a 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b4be4:	6803      	ldr	r3, [r0, #0]
   b4be6:	681b      	ldr	r3, [r3, #0]
   b4be8:	4798      	blx	r3
		sysStatus.setup();							// Initialize persistent storage
   b4bea:	f000 fef1 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4bee:	6803      	ldr	r3, [r0, #0]
   b4bf0:	681b      	ldr	r3, [r3, #0]
   b4bf2:	4798      	blx	r3
	sysStatus.checkSystemValues();					// Make sure system values are in bounds for normal operation
   b4bf4:	f000 feec 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4bf8:	f001 f93a 	bl	b5e70 <_ZN13sysStatusData17checkSystemValuesEv>
	setNodeConfiguration();                         // This is a function for development - allows us to over-ride stored system values
   b4bfc:	f001 fa04 	bl	b6008 <_Z20setNodeConfigurationv>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b4c00:	484e      	ldr	r0, [pc, #312]	; (b4d3c <setup+0x1a0>)
   b4c02:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b4c04:	2101      	movs	r1, #1
   b4c06:	8143      	strh	r3, [r0, #10]
   b4c08:	f002 f922 	bl	b6e50 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b4c0c:	217c      	movs	r1, #124	; 0x7c
   b4c0e:	484b      	ldr	r0, [pc, #300]	; (b4d3c <setup+0x1a0>)
   b4c10:	f001 fd20 	bl	b6654 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4c14:	4b4a      	ldr	r3, [pc, #296]	; (b4d40 <setup+0x1a4>)
   b4c16:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b4c18:	4b4a      	ldr	r3, [pc, #296]	; (b4d44 <setup+0x1a8>)
   b4c1a:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4c1c:	ac08      	add	r4, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b4c1e:	4b4a      	ldr	r3, [pc, #296]	; (b4d48 <setup+0x1ac>)
   b4c20:	930a      	str	r3, [sp, #40]	; 0x28
   b4c22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4c26:	2300      	movs	r3, #0
   b4c28:	a804      	add	r0, sp, #16
   b4c2a:	9400      	str	r4, [sp, #0]
   b4c2c:	f7ff ff32 	bl	b4a94 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4c30:	4620      	mov	r0, r4
   b4c32:	f7ff facd 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	if (! LoRA_Functions::instance().setup(false)) 	{						// Start the LoRA radio - Node
   b4c36:	f000 f9cb 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b4c3a:	2100      	movs	r1, #0
   b4c3c:	f000 f9da 	bl	b4ff4 <_ZN14LoRA_Functions5setupEb>
   b4c40:	2800      	cmp	r0, #0
   b4c42:	d15b      	bne.n	b4cfc <setup+0x160>
		sysStatus.set_alertCodeNode(3);										// Initialization failure
   b4c44:	f000 fec4 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4c48:	2103      	movs	r1, #3
   b4c4a:	f001 f80c 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b4c4e:	f000 febf 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4c52:	4604      	mov	r4, r0
   b4c54:	f006 fcbf 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b4c58:	4602      	mov	r2, r0
   b4c5a:	17c3      	asrs	r3, r0, #31
   b4c5c:	4620      	mov	r0, r4
   b4c5e:	f001 f8c7 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", sysStatus.get_alertCodeNode());
   b4c62:	f000 feb5 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4c66:	f000 ffaa 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4c6a:	4938      	ldr	r1, [pc, #224]	; (b4d4c <setup+0x1b0>)
   b4c6c:	4602      	mov	r2, r0
   b4c6e:	4838      	ldr	r0, [pc, #224]	; (b4d50 <setup+0x1b4>)
   b4c70:	f7ff faf8 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b4c74:	f001 fb88 	bl	b6388 <_Z16takeMeasurementsv>
	if (!digitalRead(BUTTON_PIN)) {
   b4c78:	4b36      	ldr	r3, [pc, #216]	; (b4d54 <setup+0x1b8>)
   b4c7a:	881e      	ldrh	r6, [r3, #0]
   b4c7c:	4630      	mov	r0, r6
   b4c7e:	f006 febb 	bl	bb9f8 <digitalRead>
		digitalWrite(BLUE_LED,HIGH);
   b4c82:	4b35      	ldr	r3, [pc, #212]	; (b4d58 <setup+0x1bc>)
	if (!digitalRead(BUTTON_PIN)) {
   b4c84:	4604      	mov	r4, r0
		digitalWrite(BLUE_LED,HIGH);
   b4c86:	881d      	ldrh	r5, [r3, #0]
	if (!digitalRead(BUTTON_PIN)) {
   b4c88:	b988      	cbnz	r0, b4cae <setup+0x112>
		Log.info("User button pressed, will force connection to Particle");
   b4c8a:	4934      	ldr	r1, [pc, #208]	; (b4d5c <setup+0x1c0>)
   b4c8c:	4830      	ldr	r0, [pc, #192]	; (b4d50 <setup+0x1b4>)
   b4c8e:	f7ff fae9 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,HIGH);
   b4c92:	2101      	movs	r1, #1
   b4c94:	4628      	mov	r0, r5
   b4c96:	f006 fe96 	bl	bb9c6 <digitalWrite>
		delay(2000);
   b4c9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4c9e:	f004 f945 	bl	b8f2c <delay>
		digitalWrite(BLUE_LED,LOW);
   b4ca2:	4621      	mov	r1, r4
   b4ca4:	4628      	mov	r0, r5
   b4ca6:	f006 fe8e 	bl	bb9c6 <digitalWrite>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4caa:	f004 f83f 	bl	b8d2c <spark_cloud_flag_connect>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// PIR or Pressure Sensor interrupt from low to high
   b4cae:	482c      	ldr	r0, [pc, #176]	; (b4d60 <setup+0x1c4>)
   b4cb0:	492c      	ldr	r1, [pc, #176]	; (b4d64 <setup+0x1c8>)
   b4cb2:	8800      	ldrh	r0, [r0, #0]
   b4cb4:	2400      	movs	r4, #0
   b4cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4cba:	2201      	movs	r2, #1
   b4cbc:	9400      	str	r4, [sp, #0]
   b4cbe:	f004 fbc7 	bl	b9450 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); 						// We may need to monitor the user switch to change behaviours / modes
   b4cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4cc6:	4622      	mov	r2, r4
   b4cc8:	4927      	ldr	r1, [pc, #156]	; (b4d68 <setup+0x1cc>)
   b4cca:	9400      	str	r4, [sp, #0]
   b4ccc:	4630      	mov	r0, r6
   b4cce:	f004 fbbf 	bl	b9450 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b4cd2:	4b26      	ldr	r3, [pc, #152]	; (b4d6c <setup+0x1d0>)
   b4cd4:	781a      	ldrb	r2, [r3, #0]
   b4cd6:	b90a      	cbnz	r2, b4cdc <setup+0x140>
   b4cd8:	2203      	movs	r2, #3
   b4cda:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", sysStatus.get_alertCodeNode());
   b4cdc:	f000 fe78 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4ce0:	f000 ff6d 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4ce4:	4922      	ldr	r1, [pc, #136]	; (b4d70 <setup+0x1d4>)
   b4ce6:	4602      	mov	r2, r0
   b4ce8:	4819      	ldr	r0, [pc, #100]	; (b4d50 <setup+0x1b4>)
   b4cea:	f7ff fabb 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4cee:	2100      	movs	r1, #0
   b4cf0:	4628      	mov	r0, r5
}
   b4cf2:	b00c      	add	sp, #48	; 0x30
   b4cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4cf8:	f006 be65 	b.w	bb9c6 <digitalWrite>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4cfc:	f000 fe68 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4d00:	f000 ff53 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d04:	280a      	cmp	r0, #10
   b4d06:	d914      	bls.n	b4d32 <setup+0x196>
		sysStatus.set_alertCodeNode(1); 					// Will initiate a join request
   b4d08:	f000 fe62 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4d0c:	2101      	movs	r1, #1
   b4d0e:	f000 ffaa 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", sysStatus.get_nodeNumber(), sysStatus.get_alertCodeNode());
   b4d12:	f000 fe5d 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4d16:	f000 ff48 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d1a:	9003      	str	r0, [sp, #12]
   b4d1c:	f000 fe58 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b4d20:	f000 ff4d 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4d24:	9a03      	ldr	r2, [sp, #12]
   b4d26:	4913      	ldr	r1, [pc, #76]	; (b4d74 <setup+0x1d8>)
   b4d28:	4603      	mov	r3, r0
   b4d2a:	4809      	ldr	r0, [pc, #36]	; (b4d50 <setup+0x1b4>)
   b4d2c:	f7ff fa9a 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4d30:	e7a0      	b.n	b4c74 <setup+0xd8>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4d32:	f006 fc33 	bl	bb59c <_ZN9TimeClass7isValidEv>
   b4d36:	2800      	cmp	r0, #0
   b4d38:	d0e6      	beq.n	b4d08 <setup+0x16c>
   b4d3a:	e79b      	b.n	b4c74 <setup+0xd8>
   b4d3c:	2003df68 	.word	0x2003df68
   b4d40:	000b40d9 	.word	0x000b40d9
   b4d44:	000b417f 	.word	0x000b417f
   b4d48:	000b416b 	.word	0x000b416b
   b4d4c:	000bdeb5 	.word	0x000bdeb5
   b4d50:	2003e654 	.word	0x2003e654
   b4d54:	000be552 	.word	0x000be552
   b4d58:	000be550 	.word	0x000be550
   b4d5c:	000bdf3a 	.word	0x000bdf3a
   b4d60:	000be554 	.word	0x000be554
   b4d64:	000b4119 	.word	0x000b4119
   b4d68:	000b40e5 	.word	0x000b40e5
   b4d6c:	2003dfcd 	.word	0x2003dfcd
   b4d70:	000bdf71 	.word	0x000bdf71
   b4d74:	000bdef3 	.word	0x000bdef3

000b4d78 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4d78:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4d7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4d7c:	4604      	mov	r4, r0
	switch (__op)
   b4d7e:	d104      	bne.n	b4d8a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4d80:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4d82:	6003      	str	r3, [r0, #0]
      }
   b4d84:	2000      	movs	r0, #0
   b4d86:	b003      	add	sp, #12
   b4d88:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4d8a:	2a02      	cmp	r2, #2
   b4d8c:	d00c      	beq.n	b4da8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4d8e:	2a03      	cmp	r2, #3
   b4d90:	d1f8      	bne.n	b4d84 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4d92:	6804      	ldr	r4, [r0, #0]
   b4d94:	2c00      	cmp	r4, #0
   b4d96:	d0f5      	beq.n	b4d84 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4d98:	4620      	mov	r0, r4
   b4d9a:	f7ff fa19 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4d9e:	2110      	movs	r1, #16
   b4da0:	4620      	mov	r0, r4
   b4da2:	f7ff f97c 	bl	b409e <_ZdlPvj>
   b4da6:	e7ed      	b.n	b4d84 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4da8:	6809      	ldr	r1, [r1, #0]
   b4daa:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4dac:	2010      	movs	r0, #16
   b4dae:	f7ff f972 	bl	b4096 <_Znwj>
   b4db2:	4605      	mov	r5, r0
   b4db4:	b110      	cbz	r0, b4dbc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4db6:	9901      	ldr	r1, [sp, #4]
   b4db8:	f7ff fe5c 	bl	b4a74 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4dbc:	6025      	str	r5, [r4, #0]
	}
   b4dbe:	e7e1      	b.n	b4d84 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4dc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4dc0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4dc2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4dc6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4dc8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4dca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4dce:	42ae      	cmp	r6, r5
   b4dd0:	d004      	beq.n	b4ddc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4dd2:	4628      	mov	r0, r5
   b4dd4:	f006 f8fc 	bl	bafd0 <_ZN6StringD1Ev>
   b4dd8:	3514      	adds	r5, #20
   b4dda:	e7f8      	b.n	b4dce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4ddc:	6820      	ldr	r0, [r4, #0]
   b4dde:	f004 f83d 	bl	b8e5c <free>
    AllocatorT::free(data_);
}
   b4de2:	4620      	mov	r0, r4
   b4de4:	bd70      	pop	{r4, r5, r6, pc}

000b4de6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4de6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dea:	4604      	mov	r4, r0
   b4dec:	460d      	mov	r5, r1
   b4dee:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4df0:	d916      	bls.n	b4e20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4df2:	4290      	cmp	r0, r2
   b4df4:	d215      	bcs.n	b4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4df6:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4dfa:	1a75      	subs	r5, r6, r1
   b4dfc:	f1a1 0714 	sub.w	r7, r1, #20
   b4e00:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4e02:	42b7      	cmp	r7, r6
   b4e04:	d01c      	beq.n	b4e40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4e06:	b12c      	cbz	r4, b4e14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4e08:	4631      	mov	r1, r6
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	f006 f95c 	bl	bb0c8 <_ZN6StringC1EOS_>
   b4e10:	7c33      	ldrb	r3, [r6, #16]
   b4e12:	7423      	strb	r3, [r4, #16]
   b4e14:	4630      	mov	r0, r6
   b4e16:	f006 f8db 	bl	bafd0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4e1a:	3e14      	subs	r6, #20
   b4e1c:	3c14      	subs	r4, #20
   b4e1e:	e7f0      	b.n	b4e02 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e20:	d00e      	beq.n	b4e40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4e22:	42b5      	cmp	r5, r6
   b4e24:	d00c      	beq.n	b4e40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4e26:	b12c      	cbz	r4, b4e34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4e28:	4629      	mov	r1, r5
   b4e2a:	4620      	mov	r0, r4
   b4e2c:	f006 f94c 	bl	bb0c8 <_ZN6StringC1EOS_>
   b4e30:	7c2b      	ldrb	r3, [r5, #16]
   b4e32:	7423      	strb	r3, [r4, #16]
   b4e34:	4628      	mov	r0, r5
   b4e36:	f006 f8cb 	bl	bafd0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4e3a:	3514      	adds	r5, #20
   b4e3c:	3414      	adds	r4, #20
   b4e3e:	e7f0      	b.n	b4e22 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4e46:	2300      	movs	r3, #0
   b4e48:	e9c0 3300 	strd	r3, r3, [r0]
   b4e4c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e4e:	684f      	ldr	r7, [r1, #4]
   b4e50:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4e52:	4604      	mov	r4, r0
   b4e54:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4e56:	dd23      	ble.n	b4ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4e58:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4e5c:	fb08 f007 	mul.w	r0, r8, r7
   b4e60:	f003 fff4 	bl	b8e4c <malloc>
            if (!d) {
   b4e64:	4605      	mov	r5, r0
   b4e66:	b1d8      	cbz	r0, b4ea0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4e68:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4e6c:	fb08 1202 	mla	r2, r8, r2, r1
   b4e70:	f7ff ffb9 	bl	b4de6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4e74:	6820      	ldr	r0, [r4, #0]
   b4e76:	f003 fff1 	bl	b8e5c <free>
        data_ = d;
   b4e7a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4e7c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4e7e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4e82:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4e86:	45b8      	cmp	r8, r7
   b4e88:	d008      	beq.n	b4e9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4e8a:	4639      	mov	r1, r7
   b4e8c:	4628      	mov	r0, r5
   b4e8e:	f006 f935 	bl	bb0fc <_ZN6StringC1ERKS_>
   b4e92:	7c3b      	ldrb	r3, [r7, #16]
   b4e94:	742b      	strb	r3, [r5, #16]
   b4e96:	3714      	adds	r7, #20
   b4e98:	3514      	adds	r5, #20
   b4e9a:	e7f4      	b.n	b4e86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4e9c:	6873      	ldr	r3, [r6, #4]
   b4e9e:	6063      	str	r3, [r4, #4]
}
   b4ea0:	4620      	mov	r0, r4
   b4ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4ea8 <_GLOBAL__sub_I_SystemMode>:
   b4ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4eaa:	4b2f      	ldr	r3, [pc, #188]	; (b4f68 <_GLOBAL__sub_I_SystemMode+0xc0>)
    SleepResult() {}
   b4eac:	4a2f      	ldr	r2, [pc, #188]	; (b4f6c <_GLOBAL__sub_I_SystemMode+0xc4>)
   b4eae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4eb0:	2400      	movs	r4, #0
   b4eb2:	b08d      	sub	sp, #52	; 0x34
   b4eb4:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4eb8:	2002      	movs	r0, #2
   b4eba:	f003 fec5 	bl	b8c48 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b4ebe:	4621      	mov	r1, r4
   b4ec0:	2001      	movs	r0, #1
   b4ec2:	f003 fed9 	bl	b8c78 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b4ec6:	2101      	movs	r1, #1
   b4ec8:	2004      	movs	r0, #4
   b4eca:	f003 fc91 	bl	b87f0 <HAL_Feature_Set>
        capacity_(0) {
   b4ece:	e9cd 4400 	strd	r4, r4, [sp]
   b4ed2:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4ed4:	f006 fc66 	bl	bb7a4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4ed8:	4d25      	ldr	r5, [pc, #148]	; (b4f70 <_GLOBAL__sub_I_SystemMode+0xc8>)
   b4eda:	4606      	mov	r6, r0
   b4edc:	4669      	mov	r1, sp
   b4ede:	a803      	add	r0, sp, #12
   b4ee0:	f7ff ffaf 	bl	b4e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4ee4:	462f      	mov	r7, r5
        stream_(&stream) {
   b4ee6:	a903      	add	r1, sp, #12
   b4ee8:	a806      	add	r0, sp, #24
   b4eea:	f7ff ffaa 	bl	b4e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4eee:	4b21      	ldr	r3, [pc, #132]	; (b4f74 <_GLOBAL__sub_I_SystemMode+0xcc>)
   b4ef0:	f847 3b04 	str.w	r3, [r7], #4
   b4ef4:	a906      	add	r1, sp, #24
   b4ef6:	a809      	add	r0, sp, #36	; 0x24
   b4ef8:	f7ff ffa3 	bl	b4e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4efc:	aa09      	add	r2, sp, #36	; 0x24
   b4efe:	211e      	movs	r1, #30
   b4f00:	4638      	mov	r0, r7
   b4f02:	f005 f9c1 	bl	ba288 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4f06:	a809      	add	r0, sp, #36	; 0x24
   b4f08:	f7ff ff5a 	bl	b4dc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4f0c:	a806      	add	r0, sp, #24
   b4f0e:	f7ff ff57 	bl	b4dc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f12:	4b19      	ldr	r3, [pc, #100]	; (b4f78 <_GLOBAL__sub_I_SystemMode+0xd0>)
   b4f14:	602b      	str	r3, [r5, #0]
   b4f16:	a803      	add	r0, sp, #12
   b4f18:	622e      	str	r6, [r5, #32]
   b4f1a:	f7ff ff51 	bl	b4dc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4f1e:	4b17      	ldr	r3, [pc, #92]	; (b4f7c <_GLOBAL__sub_I_SystemMode+0xd4>)
   b4f20:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4f22:	f006 fc3f 	bl	bb7a4 <_Z16_fetch_usbserialv>
   b4f26:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4f2a:	f006 fc29 	bl	bb780 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4f2e:	f004 fe8d 	bl	b9c4c <_ZN5spark10LogManager8instanceEv>
   b4f32:	4629      	mov	r1, r5
   b4f34:	f005 f87e 	bl	ba034 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b4f38:	4668      	mov	r0, sp
   b4f3a:	f7ff ff41 	bl	b4dc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   b4f3e:	4b10      	ldr	r3, [pc, #64]	; (b4f80 <_GLOBAL__sub_I_SystemMode+0xd8>)
   b4f40:	1d1a      	adds	r2, r3, #4
   b4f42:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4f44:	4a0f      	ldr	r2, [pc, #60]	; (b4f84 <_GLOBAL__sub_I_SystemMode+0xdc>)
   b4f46:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4f48:	2201      	movs	r2, #1
   b4f4a:	751a      	strb	r2, [r3, #20]
   b4f4c:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4f50:	611c      	str	r4, [r3, #16]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f52:	f006 fda9 	bl	bbaa8 <_Z19__fetch_global_Wirev>
   b4f56:	4601      	mov	r1, r0
   b4f58:	480b      	ldr	r0, [pc, #44]	; (b4f88 <_GLOBAL__sub_I_SystemMode+0xe0>)
   b4f5a:	2269      	movs	r2, #105	; 0x69
   b4f5c:	b00d      	add	sp, #52	; 0x34
   b4f5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4f62:	f001 ba79 	b.w	b6458 <_ZN6AB1805C1ER7TwoWireh>
   b4f66:	bf00      	nop
   b4f68:	2003df38 	.word	0x2003df38
   b4f6c:	ffff0000 	.word	0xffff0000
   b4f70:	2003dfa0 	.word	0x2003dfa0
   b4f74:	000bdfac 	.word	0x000bdfac
   b4f78:	000bedb8 	.word	0x000bedb8
   b4f7c:	000bdfc4 	.word	0x000bdfc4
   b4f80:	2003df88 	.word	0x2003df88
   b4f84:	00030010 	.word	0x00030010
   b4f88:	2003df68 	.word	0x2003df68

000b4f8c <_ZN8particle9LEDStatus6updateEm>:
    return d_.flags & LED_STATUS_FLAG_ACTIVE;
}

inline void particle::LEDStatus::update(system_tick_t ticks) {
    // Default implementation does nothing
}
   b4f8c:	4770      	bx	lr

000b4f8e <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4f8e:	4770      	bx	lr

000b4f90 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b4f90:	b510      	push	{r4, lr}
}
   b4f92:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b4f94:	4604      	mov	r4, r0
}
   b4f96:	f7ff f882 	bl	b409e <_ZdlPvj>
   b4f9a:	4620      	mov	r0, r4
   b4f9c:	bd10      	pop	{r4, pc}
	...

000b4fa0 <_ZN8particle9LEDStatusD1Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4fa0:	b510      	push	{r4, lr}
   b4fa2:	4b05      	ldr	r3, [pc, #20]	; (b4fb8 <_ZN8particle9LEDStatusD1Ev+0x18>)
    led_set_status_active(&d_, active, nullptr);
   b4fa4:	2200      	movs	r2, #0
inline particle::LEDStatus::~LEDStatus() {
   b4fa6:	4604      	mov	r4, r0
    led_set_status_active(&d_, active, nullptr);
   b4fa8:	4611      	mov	r1, r2
inline particle::LEDStatus::~LEDStatus() {
   b4faa:	f840 3b04 	str.w	r3, [r0], #4
    led_set_status_active(&d_, active, nullptr);
   b4fae:	f003 fe2f 	bl	b8c10 <led_set_status_active>
}
   b4fb2:	4620      	mov	r0, r4
   b4fb4:	bd10      	pop	{r4, pc}
   b4fb6:	bf00      	nop
   b4fb8:	000be474 	.word	0x000be474

000b4fbc <_ZN8particle9LEDStatusD0Ev>:
inline particle::LEDStatus::~LEDStatus() {
   b4fbc:	b510      	push	{r4, lr}
   b4fbe:	4604      	mov	r4, r0
}
   b4fc0:	f7ff ffee 	bl	b4fa0 <_ZN8particle9LEDStatusD1Ev>
   b4fc4:	4620      	mov	r0, r4
   b4fc6:	2120      	movs	r1, #32
   b4fc8:	f7ff f869 	bl	b409e <_ZdlPvj>
   b4fcc:	4620      	mov	r0, r4
   b4fce:	bd10      	pop	{r4, pc}

000b4fd0 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4fd0:	b510      	push	{r4, lr}
    if (!_instance) {
   b4fd2:	4c06      	ldr	r4, [pc, #24]	; (b4fec <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4fd4:	6823      	ldr	r3, [r4, #0]
   b4fd6:	b933      	cbnz	r3, b4fe6 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4fd8:	2004      	movs	r0, #4
   b4fda:	f7ff f85c 	bl	b4096 <_Znwj>
   b4fde:	b108      	cbz	r0, b4fe4 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4fe0:	4b03      	ldr	r3, [pc, #12]	; (b4ff0 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4fe2:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4fe4:	6020      	str	r0, [r4, #0]
}
   b4fe6:	6820      	ldr	r0, [r4, #0]
   b4fe8:	bd10      	pop	{r4, pc}
   b4fea:	bf00      	nop
   b4fec:	2003dfd0 	.word	0x2003dfd0
   b4ff0:	000be488 	.word	0x000be488

000b4ff4 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4ff4:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4ff6:	4831      	ldr	r0, [pc, #196]	; (b50bc <_ZN14LoRA_Functions5setupEb+0xc8>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4ff8:	b087      	sub	sp, #28
   b4ffa:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4ffc:	f002 fd8b 	bl	b7b16 <_ZN8RHRouter4initEv>
   b5000:	4604      	mov	r4, r0
   b5002:	b930      	cbnz	r0, b5012 <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b5004:	492e      	ldr	r1, [pc, #184]	; (b50c0 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b5006:	482f      	ldr	r0, [pc, #188]	; (b50c4 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b5008:	f7ff f92c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		manager.setThisAddress(11);
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	}

	return true;
}
   b500c:	4620      	mov	r0, r4
   b500e:	b007      	add	sp, #28
   b5010:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b5012:	ed9f 0a2d 	vldr	s0, [pc, #180]	; b50c8 <_ZN14LoRA_Functions5setupEb+0xd4>
   b5016:	482d      	ldr	r0, [pc, #180]	; (b50cc <_ZN14LoRA_Functions5setupEb+0xd8>)
   b5018:	f003 f876 	bl	b8108 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b501c:	482b      	ldr	r0, [pc, #172]	; (b50cc <_ZN14LoRA_Functions5setupEb+0xd8>)
   b501e:	2200      	movs	r2, #0
   b5020:	2117      	movs	r1, #23
   b5022:	f003 f9eb 	bl	b83fc <_ZN7RH_RF9510setTxPowerEab>
	if (gatewayID == true) {
   b5026:	b18d      	cbz	r5, b504c <_ZN14LoRA_Functions5setupEb+0x58>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b5028:	f000 fcd2 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b502c:	2100      	movs	r1, #0
   b502e:	f000 fe02 	bl	b5c36 <_ZN13sysStatusData14set_nodeNumberEh>
        return spark_deviceID();
   b5032:	a802      	add	r0, sp, #8
   b5034:	f003 fe8a 	bl	b8d4c <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b5038:	9a02      	ldr	r2, [sp, #8]
   b503a:	4925      	ldr	r1, [pc, #148]	; (b50d0 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b503c:	4821      	ldr	r0, [pc, #132]	; (b50c4 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b503e:	f7ff f911 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b5042:	a802      	add	r0, sp, #8
   b5044:	f005 ffc4 	bl	bafd0 <_ZN6StringD1Ev>
   b5048:	462c      	mov	r4, r5
   b504a:	e7df      	b.n	b500c <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b504c:	f000 fcc0 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5050:	f000 fdab 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b5054:	b1f0      	cbz	r0, b5094 <_ZN14LoRA_Functions5setupEb+0xa0>
   b5056:	f000 fcbb 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b505a:	f000 fda6 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b505e:	280a      	cmp	r0, #10
   b5060:	d818      	bhi.n	b5094 <_ZN14LoRA_Functions5setupEb+0xa0>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b5062:	f000 fcb5 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5066:	f000 fda0 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b506a:	4601      	mov	r1, r0
   b506c:	4819      	ldr	r0, [pc, #100]	; (b50d4 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b506e:	f002 f87e 	bl	b716e <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5072:	4818      	ldr	r0, [pc, #96]	; (b50d4 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b5074:	f002 f861 	bl	b713a <_ZN10RHDatagram11thisAddressEv>
   b5078:	9001      	str	r0, [sp, #4]
   b507a:	a802      	add	r0, sp, #8
   b507c:	f003 fe66 	bl	b8d4c <spark_deviceID>
   b5080:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b5084:	4914      	ldr	r1, [pc, #80]	; (b50d8 <_ZN14LoRA_Functions5setupEb+0xe4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5086:	480f      	ldr	r0, [pc, #60]	; (b50c4 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b5088:	f7ff f8ec 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b508c:	a802      	add	r0, sp, #8
   b508e:	f005 ff9f 	bl	bafd0 <_ZN6StringD1Ev>
   b5092:	e7bb      	b.n	b500c <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b5094:	f000 fc9c 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5098:	210b      	movs	r1, #11
   b509a:	f000 fdcc 	bl	b5c36 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b509e:	210b      	movs	r1, #11
   b50a0:	480c      	ldr	r0, [pc, #48]	; (b50d4 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b50a2:	f002 f864 	bl	b716e <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b50a6:	480b      	ldr	r0, [pc, #44]	; (b50d4 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b50a8:	f002 f847 	bl	b713a <_ZN10RHDatagram11thisAddressEv>
   b50ac:	9001      	str	r0, [sp, #4]
   b50ae:	a802      	add	r0, sp, #8
   b50b0:	f003 fe4c 	bl	b8d4c <spark_deviceID>
   b50b4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b50b8:	4908      	ldr	r1, [pc, #32]	; (b50dc <_ZN14LoRA_Functions5setupEb+0xe8>)
   b50ba:	e7e4      	b.n	b5086 <_ZN14LoRA_Functions5setupEb+0x92>
   b50bc:	2003e200 	.word	0x2003e200
   b50c0:	000bdfd4 	.word	0x000bdfd4
   b50c4:	2003e654 	.word	0x2003e654
   b50c8:	4464c000 	.word	0x4464c000
   b50cc:	2003e0d0 	.word	0x2003e0d0
   b50d0:	000bdfe0 	.word	0x000bdfe0
   b50d4:	2003e204 	.word	0x2003e204
   b50d8:	000be01a 	.word	0x000be01a
   b50dc:	000be051 	.word	0x000be051

000b50e0 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b50e0:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b50e2:	4c06      	ldr	r4, [pc, #24]	; (b50fc <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b50e4:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b50e6:	f10d 0203 	add.w	r2, sp, #3
   b50ea:	a901      	add	r1, sp, #4
   b50ec:	4620      	mov	r0, r4
   b50ee:	f002 ff87 	bl	b8000 <_ZN7RH_RF954recvEPhS0_>
   b50f2:	2800      	cmp	r0, #0
   b50f4:	d1f7      	bne.n	b50e6 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b50f6:	b040      	add	sp, #256	; 0x100
   b50f8:	bd10      	pop	{r4, pc}
   b50fa:	bf00      	nop
   b50fc:	2003e0d0 	.word	0x2003e0d0

000b5100 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b5100:	4801      	ldr	r0, [pc, #4]	; (b5108 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b5102:	f002 bf6a 	b.w	b7fda <_ZN7RH_RF955sleepEv>
   b5106:	bf00      	nop
   b5108:	2003e0d0 	.word	0x2003e0d0

000b510c <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b510c:	4b13      	ldr	r3, [pc, #76]	; (b515c <_ZN14LoRA_Functions15initializeRadioEv+0x50>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b510e:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b5110:	881c      	ldrh	r4, [r3, #0]
   b5112:	2100      	movs	r1, #0
   b5114:	4620      	mov	r0, r4
   b5116:	f006 fc56 	bl	bb9c6 <digitalWrite>
	delay(10);
   b511a:	200a      	movs	r0, #10
   b511c:	f003 ff06 	bl	b8f2c <delay>
	digitalWrite(RFM95_RST,HIGH);
   b5120:	2101      	movs	r1, #1
   b5122:	4620      	mov	r0, r4
   b5124:	f006 fc4f 	bl	bb9c6 <digitalWrite>
	delay(10);
   b5128:	200a      	movs	r0, #10
   b512a:	f003 feff 	bl	b8f2c <delay>

	if (!manager.init()) {
   b512e:	480c      	ldr	r0, [pc, #48]	; (b5160 <_ZN14LoRA_Functions15initializeRadioEv+0x54>)
   b5130:	f002 fcf1 	bl	b7b16 <_ZN8RHRouter4initEv>
   b5134:	4604      	mov	r4, r0
   b5136:	b928      	cbnz	r0, b5144 <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b5138:	490a      	ldr	r1, [pc, #40]	; (b5164 <_ZN14LoRA_Functions15initializeRadioEv+0x58>)
   b513a:	480b      	ldr	r0, [pc, #44]	; (b5168 <_ZN14LoRA_Functions15initializeRadioEv+0x5c>)
   b513c:	f7ff f892 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b5140:	4620      	mov	r0, r4
   b5142:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b5144:	ed9f 0a09 	vldr	s0, [pc, #36]	; b516c <_ZN14LoRA_Functions15initializeRadioEv+0x60>
   b5148:	4809      	ldr	r0, [pc, #36]	; (b5170 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b514a:	f002 ffdd 	bl	b8108 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b514e:	4808      	ldr	r0, [pc, #32]	; (b5170 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b5150:	2200      	movs	r2, #0
   b5152:	2117      	movs	r1, #23
   b5154:	f003 f952 	bl	b83fc <_ZN7RH_RF9510setTxPowerEab>
return true;
   b5158:	e7f2      	b.n	b5140 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b515a:	bf00      	nop
   b515c:	000be55c 	.word	0x000be55c
   b5160:	2003e200 	.word	0x2003e200
   b5164:	000bdfd4 	.word	0x000bdfd4
   b5168:	2003e654 	.word	0x2003e654
   b516c:	4464c000 	.word	0x4464c000
   b5170:	2003e0d0 	.word	0x2003e0d0

000b5174 <_ZN14LoRA_Functions21composeDataReportNodeEv>:
	}
	return false;
}


bool LoRA_Functions::composeDataReportNode() {
   b5174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5178:	b085      	sub	sp, #20

	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b517a:	f000 fc9d 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b517e:	f000 fd37 	bl	b5bf0 <_ZNK17currentStatusData16get_successCountEv>
   b5182:	4604      	mov	r4, r0
   b5184:	f000 fc98 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5188:	f000 fd2d 	bl	b5be6 <_ZNK17currentStatusData16get_messageCountEv>
   b518c:	4606      	mov	r6, r0
   b518e:	4620      	mov	r0, r4
   b5190:	f007 fef2 	bl	bcf78 <__aeabi_i2d>
   b5194:	4604      	mov	r4, r0
   b5196:	4630      	mov	r0, r6
   b5198:	460d      	mov	r5, r1
   b519a:	f007 feed 	bl	bcf78 <__aeabi_i2d>
   b519e:	4602      	mov	r2, r0
   b51a0:	460b      	mov	r3, r1
   b51a2:	4620      	mov	r0, r4
   b51a4:	4629      	mov	r1, r5
   b51a6:	f008 f87b 	bl	bd2a0 <__aeabi_ddiv>
   b51aa:	2200      	movs	r2, #0
   b51ac:	4b7c      	ldr	r3, [pc, #496]	; (b53a0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x22c>)
   b51ae:	f007 ff4d 	bl	bd04c <__aeabi_dmul>
   b51b2:	f008 fa43 	bl	bd63c <__aeabi_d2f>

	digitalWrite(BLUE_LED,HIGH);
   b51b6:	4b7b      	ldr	r3, [pc, #492]	; (b53a4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x230>)
   b51b8:	881f      	ldrh	r7, [r3, #0]
   b51ba:	2101      	movs	r1, #1
	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b51bc:	4606      	mov	r6, r0
	digitalWrite(BLUE_LED,HIGH);
   b51be:	4638      	mov	r0, r7
   b51c0:	f006 fc01 	bl	bb9c6 <digitalWrite>
	if (current.get_messageCount() == 255) {		// This should not happen in a day unless we pick a very small reporting freq
   b51c4:	f000 fc78 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b51c8:	f000 fd0d 	bl	b5be6 <_ZNK17currentStatusData16get_messageCountEv>
   b51cc:	28ff      	cmp	r0, #255	; 0xff
   b51ce:	f040 80a3 	bne.w	b5318 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1a4>
		current.set_messageCount(0);				// Prevent divide by zero
   b51d2:	f000 fc71 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b51d6:	2100      	movs	r1, #0
   b51d8:	f000 fd5d 	bl	b5c96 <_ZN17currentStatusData16set_messageCountEh>
		current.set_successCount(0);				// Zero as well
   b51dc:	f000 fc6c 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b51e0:	2100      	movs	r1, #0
   b51e2:	f000 fd5e 	bl	b5ca2 <_ZN17currentStatusData16set_successCountEh>
	}
	else current.set_messageCount(current.get_messageCount()+1);
	Log.info("Sending data report number %d",current.get_messageCount());
   b51e6:	f000 fc67 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b51ea:	f000 fcfc 	bl	b5be6 <_ZNK17currentStatusData16get_messageCountEv>
   b51ee:	496e      	ldr	r1, [pc, #440]	; (b53a8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x234>)

	buf[0] = highByte(sysStatus.get_magicNumber());
   b51f0:	4c6e      	ldr	r4, [pc, #440]	; (b53ac <_ZN14LoRA_Functions21composeDataReportNodeEv+0x238>)
	Log.info("Sending data report number %d",current.get_messageCount());
   b51f2:	4602      	mov	r2, r0
   b51f4:	486e      	ldr	r0, [pc, #440]	; (b53b0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b51f6:	f7ff f835 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());
   b51fa:	f000 fbe9 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b51fe:	f000 fd68 	bl	b5cd2 <_ZNK13sysStatusData15get_magicNumberEv>
   b5202:	0a00      	lsrs	r0, r0, #8
   b5204:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b5206:	f000 fbe3 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b520a:	f000 fd62 	bl	b5cd2 <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = 1;						// Set for code release - fix later
   b520e:	2501      	movs	r5, #1
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b5210:	7060      	strb	r0, [r4, #1]
	buf[2] = 1;						// Set for code release - fix later
   b5212:	70a5      	strb	r5, [r4, #2]
	buf[3] = highByte(current.get_hourlyCount());
   b5214:	f000 fc50 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5218:	f000 fd65 	bl	b5ce6 <_ZNK17currentStatusData15get_hourlyCountEv>
   b521c:	0a00      	lsrs	r0, r0, #8
   b521e:	70e0      	strb	r0, [r4, #3]
	buf[4] = lowByte(current.get_hourlyCount()); 
   b5220:	f000 fc4a 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5224:	f000 fd5f 	bl	b5ce6 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5228:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(current.get_dailyCount());
   b522a:	f000 fc45 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b522e:	f000 fd5f 	bl	b5cf0 <_ZNK17currentStatusData14get_dailyCountEv>
   b5232:	0a00      	lsrs	r0, r0, #8
   b5234:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(current.get_dailyCount()); 
   b5236:	f000 fc3f 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b523a:	f000 fd59 	bl	b5cf0 <_ZNK17currentStatusData14get_dailyCountEv>
   b523e:	71a0      	strb	r0, [r4, #6]
	buf[7] = sysStatus.get_sensorType();
   b5240:	f000 fbc6 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5244:	f000 fcc0 	bl	b5bc8 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5248:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_internalTempC();
   b524a:	f000 fc35 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b524e:	f000 fcc0 	bl	b5bd2 <_ZNK17currentStatusData17get_internalTempCEv>
   b5252:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_stateOfCharge();
   b5254:	f000 fc30 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5258:	f000 fc52 	bl	b5b00 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b525c:	ec51 0b10 	vmov	r0, r1, d0
   b5260:	f008 f9cc 	bl	bd5fc <__aeabi_d2uiz>
   b5264:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_batteryState();	
   b5266:	f000 fc27 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b526a:	f000 fcb7 	bl	b5bdc <_ZNK17currentStatusData16get_batteryStateEv>
   b526e:	72a0      	strb	r0, [r4, #10]
	buf[11] = sysStatus.get_resetCount();
   b5270:	f000 fbae 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5274:	f000 fc9e 	bl	b5bb4 <_ZNK13sysStatusData14get_resetCountEv>
   b5278:	72e0      	strb	r0, [r4, #11]
	buf[12] = current.get_messageCount();
   b527a:	f000 fc1d 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b527e:	f000 fcb2 	bl	b5be6 <_ZNK17currentStatusData16get_messageCountEv>
   b5282:	7320      	strb	r0, [r4, #12]
	buf[13] = current.get_successCount();
   b5284:	f000 fc18 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5288:	f000 fcb2 	bl	b5bf0 <_ZNK17currentStatusData16get_successCountEv>

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	unsigned char result = manager.sendtoWait(buf, 14, GATEWAY_ADDRESS, DATA_RPT);
   b528c:	2303      	movs	r3, #3
	buf[13] = current.get_successCount();
   b528e:	7360      	strb	r0, [r4, #13]
	unsigned char result = manager.sendtoWait(buf, 14, GATEWAY_ADDRESS, DATA_RPT);
   b5290:	4621      	mov	r1, r4
   b5292:	9300      	str	r3, [sp, #0]
   b5294:	4847      	ldr	r0, [pc, #284]	; (b53b4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x240>)
   b5296:	2300      	movs	r3, #0
   b5298:	220e      	movs	r2, #14
   b529a:	f002 fa01 	bl	b76a0 <_ZN6RHMesh10sendtoWaitEPhhhh>
	
	if ( result == RH_ROUTER_ERROR_NONE) {
   b529e:	4604      	mov	r4, r0
   b52a0:	2800      	cmp	r0, #0
   b52a2:	d146      	bne.n	b5332 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1be>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		current.set_successCount(current.get_successCount()+1);
   b52a4:	f000 fc08 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b52a8:	4606      	mov	r6, r0
   b52aa:	f000 fc05 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b52ae:	f000 fc9f 	bl	b5bf0 <_ZNK17currentStatusData16get_successCountEv>
   b52b2:	4428      	add	r0, r5
   b52b4:	b2c1      	uxtb	r1, r0
   b52b6:	4630      	mov	r0, r6
   b52b8:	f000 fcf3 	bl	b5ca2 <_ZN17currentStatusData16set_successCountEh>
		percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b52bc:	f000 fbfc 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b52c0:	f000 fc96 	bl	b5bf0 <_ZNK17currentStatusData16get_successCountEv>
   b52c4:	4680      	mov	r8, r0
   b52c6:	f000 fbf7 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b52ca:	f000 fc8c 	bl	b5be6 <_ZNK17currentStatusData16get_messageCountEv>
   b52ce:	4606      	mov	r6, r0
   b52d0:	4640      	mov	r0, r8
   b52d2:	f007 fe51 	bl	bcf78 <__aeabi_i2d>
   b52d6:	4680      	mov	r8, r0
   b52d8:	4630      	mov	r0, r6
   b52da:	4689      	mov	r9, r1
   b52dc:	f007 fe4c 	bl	bcf78 <__aeabi_i2d>
   b52e0:	4602      	mov	r2, r0
   b52e2:	460b      	mov	r3, r1
   b52e4:	4640      	mov	r0, r8
   b52e6:	4649      	mov	r1, r9
   b52e8:	f007 ffda 	bl	bd2a0 <__aeabi_ddiv>
   b52ec:	4b2c      	ldr	r3, [pc, #176]	; (b53a0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x22c>)
   b52ee:	2200      	movs	r2, #0
   b52f0:	f007 feac 	bl	bd04c <__aeabi_dmul>
   b52f4:	f008 f9a2 	bl	bd63c <__aeabi_d2f>
		Log.info("Data report delivered - success rate %4.2f",percentSuccess);
   b52f8:	f007 fe50 	bl	bcf9c <__aeabi_f2d>
   b52fc:	4602      	mov	r2, r0
   b52fe:	460b      	mov	r3, r1
   b5300:	482b      	ldr	r0, [pc, #172]	; (b53b0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b5302:	492d      	ldr	r1, [pc, #180]	; (b53b8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x244>)
   b5304:	f7fe ffae 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5308:	4638      	mov	r0, r7
   b530a:	4621      	mov	r1, r4
   b530c:	f006 fb5b 	bl	bb9c6 <digitalWrite>
		return true;
   b5310:	4628      	mov	r0, r5
	else  {
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}
   b5312:	b005      	add	sp, #20
   b5314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else current.set_messageCount(current.get_messageCount()+1);
   b5318:	f000 fbce 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b531c:	4604      	mov	r4, r0
   b531e:	f000 fbcb 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5322:	f000 fc60 	bl	b5be6 <_ZNK17currentStatusData16get_messageCountEv>
   b5326:	3001      	adds	r0, #1
   b5328:	b2c1      	uxtb	r1, r0
   b532a:	4620      	mov	r0, r4
   b532c:	f000 fcb3 	bl	b5c96 <_ZN17currentStatusData16set_messageCountEh>
   b5330:	e759      	b.n	b51e6 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x72>
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b5332:	2802      	cmp	r0, #2
   b5334:	d115      	bne.n	b5362 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ee>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, percentSuccess);
   b5336:	f000 fb4b 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b533a:	f000 fc36 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b533e:	9003      	str	r0, [sp, #12]
   b5340:	4630      	mov	r0, r6
   b5342:	f007 fe2b 	bl	bcf9c <__aeabi_f2d>
   b5346:	9a03      	ldr	r2, [sp, #12]
   b5348:	e9cd 0100 	strd	r0, r1, [sp]
   b534c:	491b      	ldr	r1, [pc, #108]	; (b53bc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x248>)
   b534e:	2300      	movs	r3, #0
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b5350:	4817      	ldr	r0, [pc, #92]	; (b53b0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b5352:	f7fe ff87 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b5356:	4638      	mov	r0, r7
   b5358:	2100      	movs	r1, #0
   b535a:	f006 fb34 	bl	bb9c6 <digitalWrite>
	return false;
   b535e:	2000      	movs	r0, #0
   b5360:	e7d7      	b.n	b5312 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x19e>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b5362:	2805      	cmp	r0, #5
   b5364:	d10d      	bne.n	b5382 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x20e>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b5366:	f000 fb33 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b536a:	f000 fc1e 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b536e:	9003      	str	r0, [sp, #12]
   b5370:	4630      	mov	r0, r6
   b5372:	f007 fe13 	bl	bcf9c <__aeabi_f2d>
   b5376:	9a03      	ldr	r2, [sp, #12]
   b5378:	e9cd 0100 	strd	r0, r1, [sp]
   b537c:	2300      	movs	r3, #0
   b537e:	4910      	ldr	r1, [pc, #64]	; (b53c0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x24c>)
   b5380:	e7e6      	b.n	b5350 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1dc>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b5382:	f000 fb25 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5386:	f000 fc10 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b538a:	9003      	str	r0, [sp, #12]
   b538c:	4630      	mov	r0, r6
   b538e:	f007 fe05 	bl	bcf9c <__aeabi_f2d>
   b5392:	9a03      	ldr	r2, [sp, #12]
   b5394:	e9cd 0100 	strd	r0, r1, [sp]
   b5398:	2300      	movs	r3, #0
   b539a:	490a      	ldr	r1, [pc, #40]	; (b53c4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x250>)
   b539c:	e7d8      	b.n	b5350 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1dc>
   b539e:	bf00      	nop
   b53a0:	40590000 	.word	0x40590000
   b53a4:	000be550 	.word	0x000be550
   b53a8:	000be098 	.word	0x000be098
   b53ac:	2003dfd4 	.word	0x2003dfd4
   b53b0:	2003e654 	.word	0x2003e654
   b53b4:	2003e200 	.word	0x2003e200
   b53b8:	000be0b6 	.word	0x000be0b6
   b53bc:	000be0e1 	.word	0x000be0e1
   b53c0:	000be131 	.word	0x000be131
   b53c4:	000be18a 	.word	0x000be18a

000b53c8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b53c8:	b570      	push	{r4, r5, r6, lr}
	if (buf[8] == 1) {								// Gateway did not recognize our node number, need to re-join
   b53ca:	4c3a      	ldr	r4, [pc, #232]	; (b54b4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xec>)
   b53cc:	7a22      	ldrb	r2, [r4, #8]
   b53ce:	2a01      	cmp	r2, #1
bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b53d0:	b088      	sub	sp, #32
	if (buf[8] == 1) {								// Gateway did not recognize our node number, need to re-join
   b53d2:	d151      	bne.n	b5478 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xb0>
		sysStatus.set_nodeNumber(11);
   b53d4:	f000 fafc 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b53d8:	210b      	movs	r1, #11
   b53da:	f000 fc2c 	bl	b5c36 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b53de:	210b      	movs	r1, #11
   b53e0:	4835      	ldr	r0, [pc, #212]	; (b54b8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xf0>)
   b53e2:	f001 fec4 	bl	b716e <_ZN10RHDatagram14setThisAddressEh>
		sysStatus.set_alertCodeNode(buf[8]);	
   b53e6:	f000 faf3 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b53ea:	7a21      	ldrb	r1, [r4, #8]
   b53ec:	f000 fc3b 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());	
   b53f0:	f000 faee 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b53f4:	4605      	mov	r5, r0
   b53f6:	f006 f8ee 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b53fa:	4602      	mov	r2, r0
   b53fc:	17c3      	asrs	r3, r0, #31
   b53fe:	4628      	mov	r0, r5
   b5400:	f000 fcf6 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b5404:	482c      	ldr	r0, [pc, #176]	; (b54b8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xf0>)
   b5406:	f001 fe98 	bl	b713a <_ZN10RHDatagram11thisAddressEv>
   b540a:	9003      	str	r0, [sp, #12]
   b540c:	a804      	add	r0, sp, #16
   b540e:	f003 fc9d 	bl	b8d4c <spark_deviceID>
   b5412:	482a      	ldr	r0, [pc, #168]	; (b54bc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xf4>)
   b5414:	492a      	ldr	r1, [pc, #168]	; (b54c0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xf8>)
   b5416:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   b541a:	f7fe ff23 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b541e:	a804      	add	r0, sp, #16
   b5420:	f005 fdd6 	bl	bafd0 <_ZN6StringD1Ev>
		Log.info("The gateway set an alert %d", buf[8]);
		sysStatus.set_alertCodeNode(buf[8]);	
		sysStatus.set_alertTimestampNode(Time.now());			
	}

	Log.info("Data report acknowledged %s alert for message %d park is %s and alert code is %d", (buf[8] > 0) ? "with":"without", buf[10], (buf[9] ==1) ? "open":"closed", sysStatus.get_alertCodeNode());
   b5424:	7a23      	ldrb	r3, [r4, #8]
   b5426:	2b00      	cmp	r3, #0
   b5428:	d13c      	bne.n	b54a4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xdc>
   b542a:	4e26      	ldr	r6, [pc, #152]	; (b54c4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xfc>)
   b542c:	7a61      	ldrb	r1, [r4, #9]
   b542e:	4a26      	ldr	r2, [pc, #152]	; (b54c8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x100>)
   b5430:	4d26      	ldr	r5, [pc, #152]	; (b54cc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x104>)
   b5432:	7aa3      	ldrb	r3, [r4, #10]
   b5434:	9303      	str	r3, [sp, #12]
   b5436:	2901      	cmp	r1, #1
   b5438:	bf18      	it	ne
   b543a:	4615      	movne	r5, r2
   b543c:	f000 fac8 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5440:	f000 fbbd 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5444:	9b03      	ldr	r3, [sp, #12]
   b5446:	4922      	ldr	r1, [pc, #136]	; (b54d0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x108>)
   b5448:	e9cd 5000 	strd	r5, r0, [sp]
   b544c:	4632      	mov	r2, r6
   b544e:	481b      	ldr	r0, [pc, #108]	; (b54bc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xf4>)
   b5450:	f7fe ff08 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	
	if (buf[9] == 0) {
   b5454:	7a64      	ldrb	r4, [r4, #9]
   b5456:	bb3c      	cbnz	r4, b54a8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xe0>
		sysStatus.set_openHours(false);					// Open hours or not - impacts whether we power down the sensor for sleep
   b5458:	f000 faba 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b545c:	4621      	mov	r1, r4
   b545e:	f000 faed 	bl	b5a3c <_ZN13sysStatusData13set_openHoursEb>
		Log.info("Park is closed - reset everything");
   b5462:	491c      	ldr	r1, [pc, #112]	; (b54d4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x10c>)
   b5464:	4815      	ldr	r0, [pc, #84]	; (b54bc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xf4>)
   b5466:	f7fe fefd 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		current.resetEverything();
   b546a:	f000 fb25 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b546e:	f000 fd2f 	bl	b5ed0 <_ZN17currentStatusData15resetEverythingEv>
	}
	else sysStatus.set_openHours(true);
	return true;
}
   b5472:	2001      	movs	r0, #1
   b5474:	b008      	add	sp, #32
   b5476:	bd70      	pop	{r4, r5, r6, pc}
	else if (buf[8] > 0) {									// the Gateway set an alert
   b5478:	2a00      	cmp	r2, #0
   b547a:	d0d6      	beq.n	b542a <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x62>
		Log.info("The gateway set an alert %d", buf[8]);
   b547c:	4916      	ldr	r1, [pc, #88]	; (b54d8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x110>)
   b547e:	480f      	ldr	r0, [pc, #60]	; (b54bc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xf4>)
   b5480:	f7fe fef0 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_alertCodeNode(buf[8]);	
   b5484:	f000 faa4 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5488:	7a21      	ldrb	r1, [r4, #8]
   b548a:	f000 fbec 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());			
   b548e:	f000 fa9f 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5492:	4605      	mov	r5, r0
   b5494:	f006 f89f 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b5498:	4602      	mov	r2, r0
   b549a:	17c3      	asrs	r3, r0, #31
   b549c:	4628      	mov	r0, r5
   b549e:	f000 fca7 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
   b54a2:	e7bf      	b.n	b5424 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x5c>
	Log.info("Data report acknowledged %s alert for message %d park is %s and alert code is %d", (buf[8] > 0) ? "with":"without", buf[10], (buf[9] ==1) ? "open":"closed", sysStatus.get_alertCodeNode());
   b54a4:	4e0d      	ldr	r6, [pc, #52]	; (b54dc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x114>)
   b54a6:	e7c1      	b.n	b542c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x64>
	else sysStatus.set_openHours(true);
   b54a8:	f000 fa92 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b54ac:	2101      	movs	r1, #1
   b54ae:	f000 fac5 	bl	b5a3c <_ZN13sysStatusData13set_openHoursEb>
   b54b2:	e7de      	b.n	b5472 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0xaa>
   b54b4:	2003dfd4 	.word	0x2003dfd4
   b54b8:	2003e204 	.word	0x2003e204
   b54bc:	2003e654 	.word	0x2003e654
   b54c0:	000be051 	.word	0x000be051
   b54c4:	000be1da 	.word	0x000be1da
   b54c8:	000be1ec 	.word	0x000be1ec
   b54cc:	000be1e7 	.word	0x000be1e7
   b54d0:	000be20f 	.word	0x000be20f
   b54d4:	000be260 	.word	0x000be260
   b54d8:	000be1f3 	.word	0x000be1f3
   b54dc:	000be1e2 	.word	0x000be1e2

000b54e0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:

bool LoRA_Functions::composeJoinRequesttNode() {
   b54e0:	b5f0      	push	{r4, r5, r6, r7, lr}

	digitalWrite(BLUE_LED,HIGH);
   b54e2:	4b2f      	ldr	r3, [pc, #188]	; (b55a0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc0>)

	char deviceID[25];
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long

	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b54e4:	4d2f      	ldr	r5, [pc, #188]	; (b55a4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
	digitalWrite(BLUE_LED,HIGH);
   b54e6:	881e      	ldrh	r6, [r3, #0]
bool LoRA_Functions::composeJoinRequesttNode() {
   b54e8:	b08f      	sub	sp, #60	; 0x3c
	digitalWrite(BLUE_LED,HIGH);
   b54ea:	2101      	movs	r1, #1
   b54ec:	4630      	mov	r0, r6
   b54ee:	f006 fa6a 	bl	bb9c6 <digitalWrite>
   b54f2:	a803      	add	r0, sp, #12
   b54f4:	f003 fc2a 	bl	b8d4c <spark_deviceID>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b54f8:	2300      	movs	r3, #0
   b54fa:	2219      	movs	r2, #25
   b54fc:	a907      	add	r1, sp, #28
   b54fe:	a803      	add	r0, sp, #12
   b5500:	f005 fe07 	bl	bb112 <_ZNK6String8getBytesEPhjj>
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long
   b5504:	a803      	add	r0, sp, #12
   b5506:	f005 fd63 	bl	bafd0 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b550a:	f000 fa61 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b550e:	f000 fbe0 	bl	b5cd2 <_ZNK13sysStatusData15get_magicNumberEv>
   b5512:	0a00      	lsrs	r0, r0, #8
   b5514:	7028      	strb	r0, [r5, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5516:	f000 fa5b 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b551a:	f000 fbda 	bl	b5cd2 <_ZNK13sysStatusData15get_magicNumberEv>
	for (uint8_t i=0; i < sizeof(deviceID); i++) {
		buf[i+2] = deviceID[i];
   b551e:	af0d      	add	r7, sp, #52	; 0x34
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b5520:	7068      	strb	r0, [r5, #1]
		buf[i+2] = deviceID[i];
   b5522:	ab07      	add	r3, sp, #28
   b5524:	1caa      	adds	r2, r5, #2
   b5526:	461c      	mov	r4, r3
   b5528:	cc03      	ldmia	r4!, {r0, r1}
   b552a:	42bc      	cmp	r4, r7
   b552c:	6010      	str	r0, [r2, #0]
   b552e:	6051      	str	r1, [r2, #4]
   b5530:	4623      	mov	r3, r4
   b5532:	f102 0208 	add.w	r2, r2, #8
   b5536:	d1f6      	bne.n	b5526 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x46>
   b5538:	7823      	ldrb	r3, [r4, #0]
   b553a:	7013      	strb	r3, [r2, #0]
	}
	buf[27] = sysStatus.get_sensorType();
   b553c:	f000 fa48 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5540:	f000 fb42 	bl	b5bc8 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5544:	76e8      	strb	r0, [r5, #27]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() > 10) ? "a NodeNumber is needed" : "the clock is not set");
   b5546:	f000 fa43 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b554a:	f000 fb2e 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b554e:	4916      	ldr	r1, [pc, #88]	; (b55a8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b5550:	4a16      	ldr	r2, [pc, #88]	; (b55ac <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>)
	if (manager.sendtoWait(buf, 28, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b5552:	2401      	movs	r4, #1
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() > 10) ? "a NodeNumber is needed" : "the clock is not set");
   b5554:	280a      	cmp	r0, #10
   b5556:	bf88      	it	hi
   b5558:	460a      	movhi	r2, r1
   b555a:	4915      	ldr	r1, [pc, #84]	; (b55b0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>)
   b555c:	4815      	ldr	r0, [pc, #84]	; (b55b4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b555e:	f7fe fe81 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 28, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b5562:	4910      	ldr	r1, [pc, #64]	; (b55a4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
   b5564:	4814      	ldr	r0, [pc, #80]	; (b55b8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd8>)
   b5566:	9400      	str	r4, [sp, #0]
   b5568:	2300      	movs	r3, #0
   b556a:	221c      	movs	r2, #28
   b556c:	f002 f898 	bl	b76a0 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5570:	4605      	mov	r5, r0
   b5572:	b950      	cbnz	r0, b558a <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xaa>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Join request sent to gateway successfully");
   b5574:	4911      	ldr	r1, [pc, #68]	; (b55bc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xdc>)
   b5576:	480f      	ldr	r0, [pc, #60]	; (b55b4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b5578:	f7fe fe74 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b557c:	4630      	mov	r0, r6
   b557e:	4629      	mov	r1, r5
   b5580:	f006 fa21 	bl	bb9c6 <digitalWrite>
		return true;
   b5584:	4620      	mov	r0, r4
	else {
		Log.info("Join request to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b5586:	b00f      	add	sp, #60	; 0x3c
   b5588:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Join request to Gateway failed");
   b558a:	490d      	ldr	r1, [pc, #52]	; (b55c0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe0>)
   b558c:	4809      	ldr	r0, [pc, #36]	; (b55b4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b558e:	f7fe fe69 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5592:	4630      	mov	r0, r6
   b5594:	2100      	movs	r1, #0
   b5596:	f006 fa16 	bl	bb9c6 <digitalWrite>
		return false;
   b559a:	2000      	movs	r0, #0
   b559c:	e7f3      	b.n	b5586 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xa6>
   b559e:	bf00      	nop
   b55a0:	000be550 	.word	0x000be550
   b55a4:	2003dfd4 	.word	0x2003dfd4
   b55a8:	000be282 	.word	0x000be282
   b55ac:	000be299 	.word	0x000be299
   b55b0:	000be2ae 	.word	0x000be2ae
   b55b4:	2003e654 	.word	0x2003e654
   b55b8:	2003e200 	.word	0x2003e200
   b55bc:	000be2ce 	.word	0x000be2ce
   b55c0:	000be2f8 	.word	0x000be2f8

000b55c4 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b55c4:	b510      	push	{r4, lr}
        LEDStatus(color, pattern, led_pattern_period(pattern, speed, nullptr), priority, source) { // Get pattern period for a predefined speed value
   b55c6:	2200      	movs	r2, #0
   b55c8:	b08c      	sub	sp, #48	; 0x30
   b55ca:	2114      	movs	r1, #20
   b55cc:	2002      	movs	r0, #2
   b55ce:	f003 fb6b 	bl	b8ca8 <led_pattern_period>
   b55d2:	221e      	movs	r2, #30
   b55d4:	2101      	movs	r1, #1
   b55d6:	4603      	mov	r3, r0
   b55d8:	e9cd 2100 	strd	r2, r1, [sp]
   b55dc:	a804      	add	r0, sp, #16
   b55de:	2202      	movs	r2, #2
   b55e0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   b55e4:	f004 f9b4 	bl	b9950 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>

	LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);

	if (sysStatus.get_nodeNumber() > 10) sysStatus.set_nodeNumber(buf[9]);
   b55e8:	f000 f9f2 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b55ec:	f000 fadd 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b55f0:	280a      	cmp	r0, #10
   b55f2:	4c1b      	ldr	r4, [pc, #108]	; (b5660 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x9c>)
   b55f4:	d904      	bls.n	b5600 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x3c>
   b55f6:	f000 f9eb 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b55fa:	7a61      	ldrb	r1, [r4, #9]
   b55fc:	f000 fb1b 	bl	b5c36 <_ZN13sysStatusData14set_nodeNumberEh>
	sysStatus.set_sensorType(buf[10]);
   b5600:	f000 f9e6 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5604:	7aa1      	ldrb	r1, [r4, #10]
   b5606:	f000 fb34 	bl	b5c72 <_ZN13sysStatusData14set_sensorTypeEh>
	Log.info("Node %d Join request acknowledged and sensor set to %d", sysStatus.get_nodeNumber(), sysStatus.get_sensorType());
   b560a:	f000 f9e1 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b560e:	f000 facc 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b5612:	9003      	str	r0, [sp, #12]
   b5614:	f000 f9dc 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5618:	f000 fad6 	bl	b5bc8 <_ZNK13sysStatusData14get_sensorTypeEv>
   b561c:	9a03      	ldr	r2, [sp, #12]
   b561e:	4911      	ldr	r1, [pc, #68]	; (b5664 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xa0>)
   b5620:	4603      	mov	r3, r0
   b5622:	4811      	ldr	r0, [pc, #68]	; (b5668 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xa4>)
   b5624:	f7fe fe1e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());
   b5628:	f000 f9d2 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b562c:	f000 fabd 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b5630:	4601      	mov	r1, r0
   b5632:	480e      	ldr	r0, [pc, #56]	; (b566c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0xa8>)
   b5634:	f001 fd9b 	bl	b716e <_ZN10RHDatagram14setThisAddressEh>
    led_set_status_active(&d_, active, nullptr);
   b5638:	2200      	movs	r2, #0
   b563a:	2101      	movs	r1, #1
   b563c:	a805      	add	r0, sp, #20
   b563e:	f003 fae7 	bl	b8c10 <led_set_status_active>

    blinkRed.setActive(true);
    delay(3000);
   b5642:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5646:	f003 fc71 	bl	b8f2c <delay>
   b564a:	2200      	movs	r2, #0
   b564c:	4611      	mov	r1, r2
   b564e:	a805      	add	r0, sp, #20
   b5650:	f003 fade 	bl	b8c10 <led_set_status_active>
	LEDStatus blinkRed(RGB_COLOR_RED, LED_PATTERN_BLINK, LED_SPEED_NORMAL, LED_PRIORITY_IMPORTANT);
   b5654:	a804      	add	r0, sp, #16
   b5656:	f7ff fca3 	bl	b4fa0 <_ZN8particle9LEDStatusD1Ev>
    blinkRed.setActive(false);

	return true;
}
   b565a:	2001      	movs	r0, #1
   b565c:	b00c      	add	sp, #48	; 0x30
   b565e:	bd10      	pop	{r4, pc}
   b5660:	2003dfd4 	.word	0x2003dfd4
   b5664:	000be317 	.word	0x000be317
   b5668:	2003e654 	.word	0x2003e654
   b566c:	2003e204 	.word	0x2003e204

000b5670 <_ZN14LoRA_Functions22composeAlertReportNodeEv>:

bool LoRA_Functions::composeAlertReportNode() {
	digitalWrite(BLUE_LED,HIGH);
   b5670:	4b1e      	ldr	r3, [pc, #120]	; (b56ec <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x7c>)
bool LoRA_Functions::composeAlertReportNode() {
   b5672:	b537      	push	{r0, r1, r2, r4, r5, lr}
	digitalWrite(BLUE_LED,HIGH);
   b5674:	881d      	ldrh	r5, [r3, #0]

	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic Number
   b5676:	4c1e      	ldr	r4, [pc, #120]	; (b56f0 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x80>)
	digitalWrite(BLUE_LED,HIGH);
   b5678:	2101      	movs	r1, #1
   b567a:	4628      	mov	r0, r5
   b567c:	f006 f9a3 	bl	bb9c6 <digitalWrite>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic Number
   b5680:	f000 f9a6 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5684:	f000 fb25 	bl	b5cd2 <_ZNK13sysStatusData15get_magicNumberEv>
   b5688:	0a00      	lsrs	r0, r0, #8
   b568a:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					
   b568c:	f000 f9a0 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5690:	f000 fb1f 	bl	b5cd2 <_ZNK13sysStatusData15get_magicNumberEv>
   b5694:	7060      	strb	r0, [r4, #1]
	buf[2] = sysStatus.get_alertCodeNode();   						// Node's Alert Code
   b5696:	f000 f99b 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b569a:	f000 fa90 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>


	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	if (manager.sendtoWait(buf, 3, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b569e:	2305      	movs	r3, #5
	buf[2] = sysStatus.get_alertCodeNode();   						// Node's Alert Code
   b56a0:	70a0      	strb	r0, [r4, #2]
	if (manager.sendtoWait(buf, 3, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b56a2:	4621      	mov	r1, r4
   b56a4:	9300      	str	r3, [sp, #0]
   b56a6:	4813      	ldr	r0, [pc, #76]	; (b56f4 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x84>)
   b56a8:	2300      	movs	r3, #0
   b56aa:	2203      	movs	r2, #3
   b56ac:	f001 fff8 	bl	b76a0 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b56b0:	4604      	mov	r4, r0
   b56b2:	b980      	cbnz	r0, b56d6 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x66>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Success sending Alert Report number %d to gateway at %d", sysStatus.get_alertCodeNode(), GATEWAY_ADDRESS);
   b56b4:	f000 f98c 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b56b8:	f000 fa81 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b56bc:	490e      	ldr	r1, [pc, #56]	; (b56f8 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x88>)
   b56be:	4602      	mov	r2, r0
   b56c0:	4623      	mov	r3, r4
   b56c2:	480e      	ldr	r0, [pc, #56]	; (b56fc <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x8c>)
   b56c4:	f7fe fdce 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b56c8:	4628      	mov	r0, r5
   b56ca:	4621      	mov	r1, r4
   b56cc:	f006 f97b 	bl	bb9c6 <digitalWrite>
		return true;
   b56d0:	2001      	movs	r0, #1
	else {
		Log.info("Node - Alert Report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b56d2:	b003      	add	sp, #12
   b56d4:	bd30      	pop	{r4, r5, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b56d6:	490a      	ldr	r1, [pc, #40]	; (b5700 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x90>)
   b56d8:	4808      	ldr	r0, [pc, #32]	; (b56fc <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x8c>)
   b56da:	f7fe fdc3 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b56de:	4628      	mov	r0, r5
   b56e0:	2100      	movs	r1, #0
   b56e2:	f006 f970 	bl	bb9c6 <digitalWrite>
		return false;
   b56e6:	2000      	movs	r0, #0
   b56e8:	e7f3      	b.n	b56d2 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x62>
   b56ea:	bf00      	nop
   b56ec:	000be550 	.word	0x000be550
   b56f0:	2003dfd4 	.word	0x2003dfd4
   b56f4:	2003e200 	.word	0x2003e200
   b56f8:	000be34e 	.word	0x000be34e
   b56fc:	2003e654 	.word	0x2003e654
   b5700:	000be386 	.word	0x000be386

000b5704 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {
   b5704:	b508      	push	{r3, lr}

	Log.info("Alert report acknowledged with alert code %d", sysStatus.get_alertCodeNode());
   b5706:	f000 f963 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b570a:	f000 fa58 	bl	b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b570e:	4903      	ldr	r1, [pc, #12]	; (b571c <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x18>)
   b5710:	4602      	mov	r2, r0
   b5712:	4803      	ldr	r0, [pc, #12]	; (b5720 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x1c>)
   b5714:	f7fe fda6 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	return true;
}
   b5718:	2001      	movs	r0, #1
   b571a:	bd08      	pop	{r3, pc}
   b571c:	000be3b1 	.word	0x000be3b1
   b5720:	2003e654 	.word	0x2003e654

000b5724 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b5724:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5726:	b08d      	sub	sp, #52	; 0x34
	uint8_t len = sizeof(buf);
   b5728:	23f9      	movs	r3, #249	; 0xf9
   b572a:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b572e:	f10d 031f 	add.w	r3, sp, #31
   b5732:	9303      	str	r3, [sp, #12]
   b5734:	f10d 031e 	add.w	r3, sp, #30
   b5738:	9302      	str	r3, [sp, #8]
   b573a:	4d44      	ldr	r5, [pc, #272]	; (b584c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x128>)
   b573c:	4844      	ldr	r0, [pc, #272]	; (b5850 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x12c>)
   b573e:	f10d 031d 	add.w	r3, sp, #29
   b5742:	9301      	str	r3, [sp, #4]
   b5744:	ab07      	add	r3, sp, #28
   b5746:	9300      	str	r3, [sp, #0]
   b5748:	f10d 021a 	add.w	r2, sp, #26
   b574c:	f10d 031b 	add.w	r3, sp, #27
   b5750:	4629      	mov	r1, r5
   b5752:	f001 ffd9 	bl	b7708 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b5756:	4604      	mov	r4, r0
   b5758:	b918      	cbnz	r0, b5762 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x3e>
	return false;
   b575a:	2400      	movs	r4, #0
}
   b575c:	4620      	mov	r0, r4
   b575e:	b00d      	add	sp, #52	; 0x34
   b5760:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[len] = 0;
   b5762:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b5766:	2700      	movs	r7, #0
   b5768:	54ef      	strb	r7, [r5, r3]
		if ((buf[0] << 8 | buf[1]) != sysStatus.get_magicNumber()) {
   b576a:	882e      	ldrh	r6, [r5, #0]
   b576c:	f000 f930 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5770:	f000 faaf 	bl	b5cd2 <_ZNK13sysStatusData15get_magicNumberEv>
   b5774:	ba76      	rev16	r6, r6
   b5776:	b2b6      	uxth	r6, r6
   b5778:	42b0      	cmp	r0, r6
   b577a:	d004      	beq.n	b5786 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x62>
			Log.info("Magic Number mismatch - ignoring message");
   b577c:	4935      	ldr	r1, [pc, #212]	; (b5854 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x130>)
   b577e:	4836      	ldr	r0, [pc, #216]	; (b5858 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
   b5780:	f7fe fd70 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b5784:	e7e9      	b.n	b575a <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
		lora_state = (LoRA_State)messageFlag;
   b5786:	4e35      	ldr	r6, [pc, #212]	; (b585c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x138>)
   b5788:	f89d 301e 	ldrb.w	r3, [sp, #30]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b578c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b5790:	4833      	ldr	r0, [pc, #204]	; (b5860 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x13c>)
		lora_state = (LoRA_State)messageFlag;
   b5792:	7033      	strb	r3, [r6, #0]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5794:	9205      	str	r2, [sp, #20]
   b5796:	f001 fd68 	bl	b726a <_ZN15RHGenericDriver8lastRssiEv>
   b579a:	4932      	ldr	r1, [pc, #200]	; (b5864 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x140>)
   b579c:	9a05      	ldr	r2, [sp, #20]
   b579e:	4603      	mov	r3, r0
   b57a0:	7830      	ldrb	r0, [r6, #0]
   b57a2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b57a6:	9100      	str	r1, [sp, #0]
   b57a8:	482b      	ldr	r0, [pc, #172]	; (b5858 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
   b57aa:	492f      	ldr	r1, [pc, #188]	; (b5868 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x144>)
   b57ac:	f7fe fd5a 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[2] << 24) | (buf[3] << 16) | (buf[4] << 8) | buf[5]));  // Set time based on response from gateway
   b57b0:	f8d5 0002 	ldr.w	r0, [r5, #2]
   b57b4:	ba00      	rev	r0, r0
   b57b6:	17c1      	asrs	r1, r0, #31
   b57b8:	f005 fdf5 	bl	bb3a6 <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[6] << 8 | buf[7]));			// Frequency of reporting set by Gateway
   b57bc:	f000 f908 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b57c0:	88e9      	ldrh	r1, [r5, #6]
   b57c2:	ba49      	rev16	r1, r1
   b57c4:	b289      	uxth	r1, r1
   b57c6:	f000 fabc 	bl	b5d42 <_ZN13sysStatusData20set_frequencyMinutesEt>
		sysStatus.set_alertCodeNode(buf[8]);
   b57ca:	f000 f901 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b57ce:	7a29      	ldrb	r1, [r5, #8]
   b57d0:	f000 fa49 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b57d4:	f000 f8fc 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b57d8:	4605      	mov	r5, r0
   b57da:	f005 fefc 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b57de:	4602      	mov	r2, r0
   b57e0:	17c3      	asrs	r3, r0, #31
   b57e2:	4628      	mov	r0, r5
   b57e4:	f000 fb04 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b57e8:	f005 fef5 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b57ec:	17c3      	asrs	r3, r0, #31
   b57ee:	4602      	mov	r2, r0
   b57f0:	a808      	add	r0, sp, #32
   b57f2:	f005 fdeb 	bl	bb3cc <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b57f6:	9a08      	ldr	r2, [sp, #32]
   b57f8:	9205      	str	r2, [sp, #20]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b57fa:	f000 f8e9 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b57fe:	f000 fa6d 	bl	b5cdc <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5802:	9a05      	ldr	r2, [sp, #20]
   b5804:	4919      	ldr	r1, [pc, #100]	; (b586c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x148>)
   b5806:	4603      	mov	r3, r0
   b5808:	4813      	ldr	r0, [pc, #76]	; (b5858 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x134>)
   b580a:	f7fe fd2b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b580e:	a808      	add	r0, sp, #32
   b5810:	f005 fbde 	bl	bafd0 <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b5814:	7833      	ldrb	r3, [r6, #0]
   b5816:	2b04      	cmp	r3, #4
   b5818:	d011      	beq.n	b583e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x11a>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b581a:	7833      	ldrb	r3, [r6, #0]
   b581c:	2b02      	cmp	r3, #2
   b581e:	d105      	bne.n	b582c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x108>
   b5820:	f7ff fbd6 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b5824:	f7ff fece 	bl	b55c4 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b5828:	2800      	cmp	r0, #0
   b582a:	d197      	bne.n	b575c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b582c:	7833      	ldrb	r3, [r6, #0]
   b582e:	2b06      	cmp	r3, #6
   b5830:	d193      	bne.n	b575a <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
   b5832:	f7ff fbcd 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b5836:	f7ff ff65 	bl	b5704 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>
   b583a:	4604      	mov	r4, r0
   b583c:	e78e      	b.n	b575c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b583e:	f7ff fbc7 	bl	b4fd0 <_ZN14LoRA_Functions8instanceEv>
   b5842:	f7ff fdc1 	bl	b53c8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
   b5846:	2800      	cmp	r0, #0
   b5848:	d0e7      	beq.n	b581a <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf6>
   b584a:	e787      	b.n	b575c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
   b584c:	2003dfd4 	.word	0x2003dfd4
   b5850:	2003e200 	.word	0x2003e200
   b5854:	000be3de 	.word	0x000be3de
   b5858:	2003e654 	.word	0x2003e654
   b585c:	2003dfcf 	.word	0x2003dfcf
   b5860:	2003e0d0 	.word	0x2003e0d0
   b5864:	2003de00 	.word	0x2003de00
   b5868:	000be407 	.word	0x000be407
   b586c:	000be439 	.word	0x000be439

000b5870 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b5870:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b5872:	4a08      	ldr	r2, [pc, #32]	; (b5894 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b5874:	4c08      	ldr	r4, [pc, #32]	; (b5898 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b5876:	4909      	ldr	r1, [pc, #36]	; (b589c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b5878:	7812      	ldrb	r2, [r2, #0]
   b587a:	7809      	ldrb	r1, [r1, #0]
   b587c:	4b08      	ldr	r3, [pc, #32]	; (b58a0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b587e:	4620      	mov	r0, r4
   b5880:	f002 fc04 	bl	b808c <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5884:	4621      	mov	r1, r4
   b5886:	4807      	ldr	r0, [pc, #28]	; (b58a4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b5888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b588c:	2200      	movs	r2, #0
   b588e:	f001 befd 	b.w	b768c <_ZN6RHMeshC1ER15RHGenericDriverh>
   b5892:	bf00      	nop
   b5894:	000be55a 	.word	0x000be55a
   b5898:	2003e0d0 	.word	0x2003e0d0
   b589c:	000be558 	.word	0x000be558
   b58a0:	2003e3ec 	.word	0x2003e3ec
   b58a4:	2003e200 	.word	0x2003e200

000b58a8 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b58a8:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b58aa:	4b04      	ldr	r3, [pc, #16]	; (b58bc <_ZN17currentStatusDataD1Ev+0x14>)
   b58ac:	6003      	str	r3, [r0, #0]
   b58ae:	4604      	mov	r4, r0
            if (handle_) {
   b58b0:	6840      	ldr	r0, [r0, #4]
   b58b2:	b108      	cbz	r0, b58b8 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b58b4:	f002 ff7c 	bl	b87b0 <os_mutex_recursive_destroy>
}
   b58b8:	4620      	mov	r0, r4
   b58ba:	bd10      	pop	{r4, pc}
   b58bc:	000bec18 	.word	0x000bec18

000b58c0 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b58c0:	b510      	push	{r4, lr}
   b58c2:	4604      	mov	r4, r0
}
   b58c4:	f7ff fff0 	bl	b58a8 <_ZN17currentStatusDataD1Ev>
   b58c8:	4620      	mov	r0, r4
   b58ca:	2170      	movs	r1, #112	; 0x70
   b58cc:	f7fe fbe7 	bl	b409e <_ZdlPvj>
   b58d0:	4620      	mov	r0, r4
   b58d2:	bd10      	pop	{r4, pc}

000b58d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b58d4:	b510      	push	{r4, lr}
   b58d6:	4b03      	ldr	r3, [pc, #12]	; (b58e4 <_ZN8MB85RC64D1Ev+0x10>)
   b58d8:	6003      	str	r3, [r0, #0]
   b58da:	4604      	mov	r4, r0
   b58dc:	f001 fb1a 	bl	b6f14 <_ZN6MB85RCD1Ev>
   b58e0:	4620      	mov	r0, r4
   b58e2:	bd10      	pop	{r4, pc}
   b58e4:	000be4b0 	.word	0x000be4b0

000b58e8 <_ZN8MB85RC64D0Ev>:
   b58e8:	b510      	push	{r4, lr}
   b58ea:	4604      	mov	r4, r0
   b58ec:	f7ff fff2 	bl	b58d4 <_ZN8MB85RC64D1Ev>
   b58f0:	4620      	mov	r0, r4
   b58f2:	2110      	movs	r1, #16
   b58f4:	f7fe fbd3 	bl	b409e <_ZdlPvj>
   b58f8:	4620      	mov	r0, r4
   b58fa:	bd10      	pop	{r4, pc}

000b58fc <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b58fc:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b58fe:	4b04      	ldr	r3, [pc, #16]	; (b5910 <_ZN13sysStatusDataD1Ev+0x14>)
   b5900:	6003      	str	r3, [r0, #0]
   b5902:	4604      	mov	r4, r0
            if (handle_) {
   b5904:	6840      	ldr	r0, [r0, #4]
   b5906:	b108      	cbz	r0, b590c <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5908:	f002 ff52 	bl	b87b0 <os_mutex_recursive_destroy>
}
   b590c:	4620      	mov	r0, r4
   b590e:	bd10      	pop	{r4, pc}
   b5910:	000bec18 	.word	0x000bec18

000b5914 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5914:	b510      	push	{r4, lr}
   b5916:	4604      	mov	r4, r0
}
   b5918:	f7ff fff0 	bl	b58fc <_ZN13sysStatusDataD1Ev>
   b591c:	4620      	mov	r0, r4
   b591e:	2160      	movs	r1, #96	; 0x60
   b5920:	f7fe fbbd 	bl	b409e <_ZdlPvj>
   b5924:	4620      	mov	r0, r4
   b5926:	bd10      	pop	{r4, pc}

000b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b5928:	b510      	push	{r4, lr}
            if (!handle_) {
   b592a:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b592c:	4604      	mov	r4, r0
            if (!handle_) {
   b592e:	b90b      	cbnz	r3, b5934 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5930:	f002 ff36 	bl	b87a0 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b5934:	6820      	ldr	r0, [r4, #0]
        }
   b5936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b593a:	f002 bf41 	b.w	b87c0 <os_mutex_recursive_lock>

000b593e <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b593e:	b538      	push	{r3, r4, r5, lr}
   b5940:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5942:	3004      	adds	r0, #4
   b5944:	f7ff fff0 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5948:	6a20      	ldr	r0, [r4, #32]
   b594a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b594c:	6803      	ldr	r3, [r0, #0]
   b594e:	68dd      	ldr	r5, [r3, #12]
   b5950:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5954:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5956:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b595c:	f002 bf38 	b.w	b87d0 <os_mutex_recursive_unlock>

000b5960 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5960:	b538      	push	{r3, r4, r5, lr}
   b5962:	4604      	mov	r4, r0
   b5964:	3004      	adds	r0, #4
   b5966:	f7ff ffdf 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b596a:	6a20      	ldr	r0, [r4, #32]
   b596c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b596e:	6803      	ldr	r3, [r0, #0]
   b5970:	689d      	ldr	r5, [r3, #8]
   b5972:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5976:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5978:	68a2      	ldr	r2, [r4, #8]
   b597a:	6823      	ldr	r3, [r4, #0]
   b597c:	88d1      	ldrh	r1, [r2, #6]
   b597e:	695b      	ldr	r3, [r3, #20]
   b5980:	4620      	mov	r0, r4
   b5982:	4798      	blx	r3
   b5984:	b918      	cbnz	r0, b598e <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5986:	6823      	ldr	r3, [r4, #0]
   b5988:	4620      	mov	r0, r4
   b598a:	699b      	ldr	r3, [r3, #24]
   b598c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b598e:	6860      	ldr	r0, [r4, #4]
   b5990:	f002 ff1e 	bl	b87d0 <os_mutex_recursive_unlock>
        }
   b5994:	2001      	movs	r0, #1
   b5996:	bd38      	pop	{r3, r4, r5, pc}

000b5998 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5998:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b599c:	6081      	str	r1, [r0, #8]
   b599e:	4909      	ldr	r1, [pc, #36]	; (b59c4 <_ZN13sysStatusDataC1Ev+0x2c>)
   b59a0:	f04f 0c38 	mov.w	ip, #56	; 0x38
   b59a4:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b59a8:	2101      	movs	r1, #1
   b59aa:	8281      	strh	r1, [r0, #20]
   b59ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b59b0:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b59b2:	4905      	ldr	r1, [pc, #20]	; (b59c8 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b59b4:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b59b6:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b59ba:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b59bc:	6182      	str	r2, [r0, #24]
   b59be:	4a03      	ldr	r2, [pc, #12]	; (b59cc <_ZN13sysStatusDataC1Ev+0x34>)
   b59c0:	6002      	str	r2, [r0, #0]
};
   b59c2:	4770      	bx	lr
   b59c4:	20a99e75 	.word	0x20a99e75
   b59c8:	2003e3b8 	.word	0x2003e3b8
   b59cc:	000be4cc 	.word	0x000be4cc

000b59d0 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b59d0:	b510      	push	{r4, lr}
    if (!_instance) {
   b59d2:	4c06      	ldr	r4, [pc, #24]	; (b59ec <_ZN13sysStatusData8instanceEv+0x1c>)
   b59d4:	6823      	ldr	r3, [r4, #0]
   b59d6:	b93b      	cbnz	r3, b59e8 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b59d8:	2060      	movs	r0, #96	; 0x60
   b59da:	f7fe fb5c 	bl	b4096 <_Znwj>
   b59de:	4603      	mov	r3, r0
   b59e0:	b108      	cbz	r0, b59e6 <_ZN13sysStatusData8instanceEv+0x16>
   b59e2:	f7ff ffd9 	bl	b5998 <_ZN13sysStatusDataC1Ev>
   b59e6:	6023      	str	r3, [r4, #0]
}
   b59e8:	6820      	ldr	r0, [r4, #0]
   b59ea:	bd10      	pop	{r4, pc}
   b59ec:	2003e3b0 	.word	0x2003e3b0

000b59f0 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b59f0:	b510      	push	{r4, lr}
    fram.begin();
   b59f2:	6a00      	ldr	r0, [r0, #32]
   b59f4:	f001 faa4 	bl	b6f40 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b59f8:	f7ff ffea 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b59fc:	6803      	ldr	r3, [r0, #0]
}
   b59fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5a02:	685b      	ldr	r3, [r3, #4]
   b5a04:	4718      	bx	r3

000b5a06 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5a06:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5a08:	f7ff ffe2 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5a0c:	6803      	ldr	r3, [r0, #0]
}
   b5a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5a12:	68db      	ldr	r3, [r3, #12]
   b5a14:	2100      	movs	r1, #0
   b5a16:	4718      	bx	r3

000b5a18 <_ZNK13sysStatusData13get_openHoursEv>:
bool sysStatusData::get_openHours() const {
   b5a18:	b538      	push	{r3, r4, r5, lr}
   b5a1a:	4604      	mov	r4, r0
   b5a1c:	3004      	adds	r0, #4
   b5a1e:	f7ff ff83 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a22:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5a24:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a26:	3b01      	subs	r3, #1
   b5a28:	2b30      	cmp	r3, #48	; 0x30
                    result = *(const T *)p;
   b5a2a:	bf86      	itte	hi
   b5a2c:	68a3      	ldrhi	r3, [r4, #8]
   b5a2e:	f893 5031 	ldrbhi.w	r5, [r3, #49]	; 0x31
            T result = 0;
   b5a32:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5a34:	f002 fecc 	bl	b87d0 <os_mutex_recursive_unlock>
}
   b5a38:	4628      	mov	r0, r5
   b5a3a:	bd38      	pop	{r3, r4, r5, pc}

000b5a3c <_ZN13sysStatusData13set_openHoursEb>:
void sysStatusData::set_openHours(bool value) {
   b5a3c:	b538      	push	{r3, r4, r5, lr}
   b5a3e:	4604      	mov	r4, r0
   b5a40:	3004      	adds	r0, #4
   b5a42:	460d      	mov	r5, r1
   b5a44:	f7ff ff70 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a48:	68e3      	ldr	r3, [r4, #12]
   b5a4a:	3b01      	subs	r3, #1
   b5a4c:	2b30      	cmp	r3, #48	; 0x30
   b5a4e:	d90f      	bls.n	b5a70 <_ZN13sysStatusData13set_openHoursEb+0x34>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5a50:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5a52:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
   b5a56:	42aa      	cmp	r2, r5
   b5a58:	d00a      	beq.n	b5a70 <_ZN13sysStatusData13set_openHoursEb+0x34>
                        *(T *)p = value;
   b5a5a:	f883 5031 	strb.w	r5, [r3, #49]	; 0x31
                        savedDataHeader->hash = getHash();
   b5a5e:	4620      	mov	r0, r4
   b5a60:	68a5      	ldr	r5, [r4, #8]
   b5a62:	f002 fe1b 	bl	b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5a66:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5a68:	6823      	ldr	r3, [r4, #0]
   b5a6a:	4620      	mov	r0, r4
   b5a6c:	691b      	ldr	r3, [r3, #16]
   b5a6e:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5a70:	6860      	ldr	r0, [r4, #4]
}
   b5a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5a76:	f002 beab 	b.w	b87d0 <os_mutex_recursive_unlock>
	...

000b5a7c <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5a7c:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b5a7e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5a82:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a84:	6182      	str	r2, [r0, #24]
   b5a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5a8a:	6081      	str	r1, [r0, #8]
   b5a8c:	61c2      	str	r2, [r0, #28]
   b5a8e:	4907      	ldr	r1, [pc, #28]	; (b5aac <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a90:	4a07      	ldr	r2, [pc, #28]	; (b5ab0 <_ZN17currentStatusDataC1Ev+0x34>)
   b5a92:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a94:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a98:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5a9a:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5a9e:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5aa0:	2101      	movs	r1, #1
   b5aa2:	4a04      	ldr	r2, [pc, #16]	; (b5ab4 <_ZN17currentStatusDataC1Ev+0x38>)
   b5aa4:	8281      	strh	r1, [r0, #20]
   b5aa6:	6002      	str	r2, [r0, #0]
};
   b5aa8:	4770      	bx	lr
   b5aaa:	bf00      	nop
   b5aac:	20a99e74 	.word	0x20a99e74
   b5ab0:	2003e3b8 	.word	0x2003e3b8
   b5ab4:	000be4f8 	.word	0x000be4f8

000b5ab8 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5ab8:	b510      	push	{r4, lr}
    if (!_instance) {
   b5aba:	4c06      	ldr	r4, [pc, #24]	; (b5ad4 <_ZN17currentStatusData8instanceEv+0x1c>)
   b5abc:	6823      	ldr	r3, [r4, #0]
   b5abe:	b93b      	cbnz	r3, b5ad0 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5ac0:	2070      	movs	r0, #112	; 0x70
   b5ac2:	f7fe fae8 	bl	b4096 <_Znwj>
   b5ac6:	4603      	mov	r3, r0
   b5ac8:	b108      	cbz	r0, b5ace <_ZN17currentStatusData8instanceEv+0x16>
   b5aca:	f7ff ffd7 	bl	b5a7c <_ZN17currentStatusDataC1Ev>
   b5ace:	6023      	str	r3, [r4, #0]
}
   b5ad0:	6820      	ldr	r0, [r4, #0]
   b5ad2:	bd10      	pop	{r4, pc}
   b5ad4:	2003e3b4 	.word	0x2003e3b4

000b5ad8 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5ad8:	b510      	push	{r4, lr}
    fram.begin();
   b5ada:	6a00      	ldr	r0, [r0, #32]
   b5adc:	f001 fa30 	bl	b6f40 <_ZN6MB85RC5beginEv>
    current.load();
   b5ae0:	f7ff ffea 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5ae4:	6803      	ldr	r3, [r0, #0]
}
   b5ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.load();
   b5aea:	685b      	ldr	r3, [r3, #4]
   b5aec:	4718      	bx	r3

000b5aee <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b5aee:	b510      	push	{r4, lr}
    current.flush(false);
   b5af0:	f7ff ffe2 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5af4:	6803      	ldr	r3, [r0, #0]
}
   b5af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b5afa:	68db      	ldr	r3, [r3, #12]
   b5afc:	2100      	movs	r1, #0
   b5afe:	4718      	bx	r3

000b5b00 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5b00:	b510      	push	{r4, lr}
   b5b02:	4604      	mov	r4, r0
   b5b04:	ed2d 8b02 	vpush	{d8}
   b5b08:	3004      	adds	r0, #4
   b5b0a:	f7ff ff0d 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b0e:	68e3      	ldr	r3, [r4, #12]
   b5b10:	3b08      	subs	r3, #8
   b5b12:	2b17      	cmp	r3, #23
   b5b14:	d90c      	bls.n	b5b30 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5b16:	68a3      	ldr	r3, [r4, #8]
   b5b18:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5b1c:	6860      	ldr	r0, [r4, #4]
   b5b1e:	f002 fe57 	bl	b87d0 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b5b22:	eeb0 0a48 	vmov.f32	s0, s16
   b5b26:	eef0 0a68 	vmov.f32	s1, s17
   b5b2a:	ecbd 8b02 	vpop	{d8}
   b5b2e:	bd10      	pop	{r4, pc}
            T result = 0;
   b5b30:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5b38 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5b34:	e7f2      	b.n	b5b1c <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5b36:	bf00      	nop
	...

000b5b40 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b42:	4604      	mov	r4, r0
   b5b44:	3004      	adds	r0, #4
   b5b46:	ec57 6b10 	vmov	r6, r7, d0
   b5b4a:	f7ff feed 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b4e:	68e3      	ldr	r3, [r4, #12]
   b5b50:	3b08      	subs	r3, #8
   b5b52:	2b17      	cmp	r3, #23
   b5b54:	d912      	bls.n	b5b7c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5b56:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5b58:	4630      	mov	r0, r6
   b5b5a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5b5e:	4639      	mov	r1, r7
   b5b60:	f007 fcdc 	bl	bd51c <__aeabi_dcmpeq>
   b5b64:	b950      	cbnz	r0, b5b7c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5b66:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5b6a:	4620      	mov	r0, r4
   b5b6c:	68a5      	ldr	r5, [r4, #8]
   b5b6e:	f002 fd95 	bl	b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5b72:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5b74:	6823      	ldr	r3, [r4, #0]
   b5b76:	4620      	mov	r0, r4
   b5b78:	691b      	ldr	r3, [r3, #16]
   b5b7a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5b7c:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b5b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5b82:	f002 be25 	b.w	b87d0 <os_mutex_recursive_unlock>

000b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5b86:	b538      	push	{r3, r4, r5, lr}
   b5b88:	4604      	mov	r4, r0
   b5b8a:	3004      	adds	r0, #4
   b5b8c:	460d      	mov	r5, r1
   b5b8e:	f7ff fecb 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b92:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5b94:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5b96:	3b01      	subs	r3, #1
   b5b98:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5b9a:	bf26      	itte	cs
   b5b9c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5b9e:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5ba0:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5ba2:	f002 fe15 	bl	b87d0 <os_mutex_recursive_unlock>
        }
   b5ba6:	4628      	mov	r0, r5
   b5ba8:	bd38      	pop	{r3, r4, r5, pc}

000b5baa <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b5baa:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b5bac:	2110      	movs	r1, #16
   b5bae:	f7ff ffea 	bl	b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5bb2:	bd08      	pop	{r3, pc}

000b5bb4 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5bb4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5bb6:	2117      	movs	r1, #23
   b5bb8:	f7ff ffe5 	bl	b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5bbc:	bd08      	pop	{r3, pc}

000b5bbe <_ZNK13sysStatusData17get_alertCodeNodeEv>:
uint8_t sysStatusData::get_alertCodeNode() const {
   b5bbe:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeNode));
   b5bc0:	2122      	movs	r1, #34	; 0x22
   b5bc2:	f7ff ffe0 	bl	b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5bc6:	bd08      	pop	{r3, pc}

000b5bc8 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b5bc8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b5bca:	2130      	movs	r1, #48	; 0x30
   b5bcc:	f7ff ffdb 	bl	b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5bd0:	bd08      	pop	{r3, pc}

000b5bd2 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5bd2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5bd4:	2110      	movs	r1, #16
   b5bd6:	f7ff ffd6 	bl	b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5bda:	bd08      	pop	{r3, pc}

000b5bdc <_ZNK17currentStatusData16get_batteryStateEv>:

uint8_t currentStatusData::get_batteryState() const {
   b5bdc:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5bde:	2120      	movs	r1, #32
   b5be0:	f7ff ffd1 	bl	b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5be4:	bd08      	pop	{r3, pc}

000b5be6 <_ZNK17currentStatusData16get_messageCountEv>:

void currentStatusData::set_RSSI(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
}

uint8_t currentStatusData::get_messageCount() const {
   b5be6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b5be8:	2132      	movs	r1, #50	; 0x32
   b5bea:	f7ff ffcc 	bl	b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5bee:	bd08      	pop	{r3, pc}

000b5bf0 <_ZNK17currentStatusData16get_successCountEv>:

void currentStatusData::set_messageCount(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
}

uint8_t currentStatusData::get_successCount() const {
   b5bf0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b5bf2:	2133      	movs	r1, #51	; 0x33
   b5bf4:	f7ff ffc7 	bl	b5b86 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5bf8:	bd08      	pop	{r3, pc}

000b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5bfa:	b570      	push	{r4, r5, r6, lr}
   b5bfc:	4604      	mov	r4, r0
   b5bfe:	3004      	adds	r0, #4
   b5c00:	460d      	mov	r5, r1
   b5c02:	4616      	mov	r6, r2
   b5c04:	f7ff fe90 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5c08:	68e3      	ldr	r3, [r4, #12]
   b5c0a:	3b01      	subs	r3, #1
   b5c0c:	42ab      	cmp	r3, r5
   b5c0e:	d30d      	bcc.n	b5c2c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5c10:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5c12:	5d5a      	ldrb	r2, [r3, r5]
   b5c14:	42b2      	cmp	r2, r6
   b5c16:	d009      	beq.n	b5c2c <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5c18:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5c1a:	4620      	mov	r0, r4
   b5c1c:	68a5      	ldr	r5, [r4, #8]
   b5c1e:	f002 fd3d 	bl	b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5c22:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5c24:	6823      	ldr	r3, [r4, #0]
   b5c26:	4620      	mov	r0, r4
   b5c28:	691b      	ldr	r3, [r3, #16]
   b5c2a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5c2c:	6860      	ldr	r0, [r4, #4]
        }
   b5c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5c32:	f002 bdcd 	b.w	b87d0 <os_mutex_recursive_unlock>

000b5c36 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b5c36:	b508      	push	{r3, lr}
   b5c38:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b5c3a:	2110      	movs	r1, #16
   b5c3c:	f7ff ffdd 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5c40:	bd08      	pop	{r3, pc}

000b5c42 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b5c42:	b508      	push	{r3, lr}
   b5c44:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b5c46:	2112      	movs	r1, #18
   b5c48:	f7ff ffd7 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5c4c:	bd08      	pop	{r3, pc}

000b5c4e <_ZN13sysStatusData19set_firmwareReleaseEh>:
void sysStatusData::set_firmwareRelease(uint8_t value) {
   b5c4e:	b508      	push	{r3, lr}
   b5c50:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, firmwareRelease), value);
   b5c52:	2116      	movs	r1, #22
   b5c54:	f7ff ffd1 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5c58:	bd08      	pop	{r3, pc}

000b5c5a <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5c5a:	b508      	push	{r3, lr}
   b5c5c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5c5e:	2117      	movs	r1, #23
   b5c60:	f7ff ffcb 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5c64:	bd08      	pop	{r3, pc}

000b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>:
void sysStatusData::set_alertCodeNode(uint8_t value) {
   b5c66:	b508      	push	{r3, lr}
   b5c68:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeNode), value);
   b5c6a:	2122      	movs	r1, #34	; 0x22
   b5c6c:	f7ff ffc5 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5c70:	bd08      	pop	{r3, pc}

000b5c72 <_ZN13sysStatusData14set_sensorTypeEh>:
void sysStatusData::set_sensorType(uint8_t value) {
   b5c72:	b508      	push	{r3, lr}
   b5c74:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, sensorType), value);
   b5c76:	2130      	movs	r1, #48	; 0x30
   b5c78:	f7ff ffbf 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5c7c:	bd08      	pop	{r3, pc}

000b5c7e <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b5c7e:	b508      	push	{r3, lr}
   b5c80:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5c82:	2110      	movs	r1, #16
   b5c84:	f7ff ffb9 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5c88:	bd08      	pop	{r3, pc}

000b5c8a <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5c8a:	b508      	push	{r3, lr}
   b5c8c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b5c8e:	2120      	movs	r1, #32
   b5c90:	f7ff ffb3 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5c94:	bd08      	pop	{r3, pc}

000b5c96 <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b5c96:	b508      	push	{r3, lr}
   b5c98:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b5c9a:	2132      	movs	r1, #50	; 0x32
   b5c9c:	f7ff ffad 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5ca0:	bd08      	pop	{r3, pc}

000b5ca2 <_ZN17currentStatusData16set_successCountEh>:

void currentStatusData::set_successCount(uint8_t value) {
   b5ca2:	b508      	push	{r3, lr}
   b5ca4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b5ca6:	2133      	movs	r1, #51	; 0x33
   b5ca8:	f7ff ffa7 	bl	b5bfa <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5cac:	bd08      	pop	{r3, pc}

000b5cae <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5cae:	b538      	push	{r3, r4, r5, lr}
   b5cb0:	4604      	mov	r4, r0
   b5cb2:	3004      	adds	r0, #4
   b5cb4:	460d      	mov	r5, r1
   b5cb6:	f7ff fe37 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5cba:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5cbc:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5cbe:	3b02      	subs	r3, #2
   b5cc0:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5cc2:	bf26      	itte	cs
   b5cc4:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5cc6:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5cc8:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5cca:	f002 fd81 	bl	b87d0 <os_mutex_recursive_unlock>
        }
   b5cce:	4628      	mov	r0, r5
   b5cd0:	bd38      	pop	{r3, r4, r5, pc}

000b5cd2 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5cd2:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5cd4:	2114      	movs	r1, #20
   b5cd6:	f7ff ffea 	bl	b5cae <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5cda:	bd08      	pop	{r3, pc}

000b5cdc <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b5cdc:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5cde:	2120      	movs	r1, #32
   b5ce0:	f7ff ffe5 	bl	b5cae <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5ce4:	bd08      	pop	{r3, pc}

000b5ce6 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b5ce6:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5ce8:	2140      	movs	r1, #64	; 0x40
   b5cea:	f7ff ffe0 	bl	b5cae <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5cee:	bd08      	pop	{r3, pc}

000b5cf0 <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b5cf0:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5cf2:	2142      	movs	r1, #66	; 0x42
   b5cf4:	f7ff ffdb 	bl	b5cae <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5cf8:	bd08      	pop	{r3, pc}

000b5cfa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5cfa:	b570      	push	{r4, r5, r6, lr}
   b5cfc:	4604      	mov	r4, r0
   b5cfe:	3004      	adds	r0, #4
   b5d00:	460d      	mov	r5, r1
   b5d02:	4616      	mov	r6, r2
   b5d04:	f7ff fe10 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d08:	68e3      	ldr	r3, [r4, #12]
   b5d0a:	3b02      	subs	r3, #2
   b5d0c:	42ab      	cmp	r3, r5
   b5d0e:	d30d      	bcc.n	b5d2c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5d10:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5d12:	5b5a      	ldrh	r2, [r3, r5]
   b5d14:	42b2      	cmp	r2, r6
   b5d16:	d009      	beq.n	b5d2c <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b5d18:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	68a5      	ldr	r5, [r4, #8]
   b5d1e:	f002 fcbd 	bl	b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5d22:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5d24:	6823      	ldr	r3, [r4, #0]
   b5d26:	4620      	mov	r0, r4
   b5d28:	691b      	ldr	r3, [r3, #16]
   b5d2a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5d2c:	6860      	ldr	r0, [r4, #4]
        }
   b5d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5d32:	f002 bd4d 	b.w	b87d0 <os_mutex_recursive_unlock>

000b5d36 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b5d36:	b508      	push	{r3, lr}
   b5d38:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b5d3a:	2114      	movs	r1, #20
   b5d3c:	f7ff ffdd 	bl	b5cfa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5d40:	bd08      	pop	{r3, pc}

000b5d42 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b5d42:	b508      	push	{r3, lr}
   b5d44:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b5d46:	2120      	movs	r1, #32
   b5d48:	f7ff ffd7 	bl	b5cfa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5d4c:	bd08      	pop	{r3, pc}

000b5d4e <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5d4e:	b508      	push	{r3, lr}
   b5d50:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b5d52:	2140      	movs	r1, #64	; 0x40
   b5d54:	f7ff ffd1 	bl	b5cfa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5d58:	bd08      	pop	{r3, pc}

000b5d5a <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b5d5a:	b508      	push	{r3, lr}
   b5d5c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5d5e:	2142      	movs	r1, #66	; 0x42
   b5d60:	f7ff ffcb 	bl	b5cfa <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5d64:	bd08      	pop	{r3, pc}

000b5d66 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d68:	4604      	mov	r4, r0
   b5d6a:	3004      	adds	r0, #4
   b5d6c:	460d      	mov	r5, r1
   b5d6e:	f7ff fddb 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d72:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5d74:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5d76:	3b08      	subs	r3, #8
   b5d78:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5d7a:	bf23      	ittte	cs
   b5d7c:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5d7e:	1949      	addcs	r1, r1, r5
   b5d80:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b5d84:	2600      	movcc	r6, #0
   b5d86:	bf38      	it	cc
   b5d88:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5d8a:	f002 fd21 	bl	b87d0 <os_mutex_recursive_unlock>
        }
   b5d8e:	4630      	mov	r0, r6
   b5d90:	4639      	mov	r1, r7
   b5d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d94 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b5d94:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b5d96:	2118      	movs	r1, #24
   b5d98:	f7ff ffe5 	bl	b5d66 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5d9c:	bd08      	pop	{r3, pc}

000b5d9e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5d9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5da0:	4604      	mov	r4, r0
   b5da2:	3004      	adds	r0, #4
   b5da4:	460d      	mov	r5, r1
   b5da6:	461e      	mov	r6, r3
   b5da8:	4617      	mov	r7, r2
   b5daa:	f7ff fdbd 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5dae:	68e3      	ldr	r3, [r4, #12]
   b5db0:	3b08      	subs	r3, #8
   b5db2:	42ab      	cmp	r3, r5
   b5db4:	d312      	bcc.n	b5ddc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5db6:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5db8:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5dba:	5958      	ldr	r0, [r3, r5]
   b5dbc:	6851      	ldr	r1, [r2, #4]
   b5dbe:	42b1      	cmp	r1, r6
   b5dc0:	bf08      	it	eq
   b5dc2:	42b8      	cmpeq	r0, r7
   b5dc4:	d00a      	beq.n	b5ddc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5dc6:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5dc8:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5dca:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b5dcc:	68a5      	ldr	r5, [r4, #8]
   b5dce:	f002 fc65 	bl	b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5dd2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5dd4:	6823      	ldr	r3, [r4, #0]
   b5dd6:	4620      	mov	r0, r4
   b5dd8:	691b      	ldr	r3, [r3, #16]
   b5dda:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5ddc:	6860      	ldr	r0, [r4, #4]
        }
   b5dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5de2:	f002 bcf5 	b.w	b87d0 <os_mutex_recursive_unlock>

000b5de6 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5de6:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5de8:	2118      	movs	r1, #24
   b5dea:	f7ff ffd8 	bl	b5d9e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5dee:	bd08      	pop	{r3, pc}

000b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>:
void sysStatusData::set_alertTimestampNode(time_t value) {
   b5df0:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampNode), value);
   b5df2:	2128      	movs	r1, #40	; 0x28
   b5df4:	f7ff ffd3 	bl	b5d9e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5df8:	bd08      	pop	{r3, pc}
	...

000b5dfc <_ZN13sysStatusData18loadSystemDefaultsEv>:
void sysStatusData::loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   b5dfc:	b508      	push	{r3, lr}
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b5dfe:	491a      	ldr	r1, [pc, #104]	; (b5e68 <_ZN13sysStatusData18loadSystemDefaultsEv+0x6c>)
   b5e00:	481a      	ldr	r0, [pc, #104]	; (b5e6c <_ZN13sysStatusData18loadSystemDefaultsEv+0x70>)
   b5e02:	f7fe fa2f 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_nodeNumber(11);
   b5e06:	f7ff fde3 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e0a:	210b      	movs	r1, #11
   b5e0c:	f7ff ff13 	bl	b5c36 <_ZN13sysStatusData14set_nodeNumberEh>
  sysStatus.set_structuresVersion(1);
   b5e10:	f7ff fdde 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e14:	2101      	movs	r1, #1
   b5e16:	f7ff ff14 	bl	b5c42 <_ZN13sysStatusData21set_structuresVersionEh>
  sysStatus.set_magicNumber(27617);
   b5e1a:	f7ff fdd9 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e1e:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b5e22:	f7ff ff88 	bl	b5d36 <_ZN13sysStatusData15set_magicNumberEt>
  sysStatus.set_firmwareRelease(1);
   b5e26:	f7ff fdd3 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e2a:	2101      	movs	r1, #1
   b5e2c:	f7ff ff0f 	bl	b5c4e <_ZN13sysStatusData19set_firmwareReleaseEh>
  sysStatus.set_resetCount(0);
   b5e30:	f7ff fdce 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e34:	2100      	movs	r1, #0
   b5e36:	f7ff ff10 	bl	b5c5a <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_frequencyMinutes(10);
   b5e3a:	f7ff fdc9 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e3e:	210a      	movs	r1, #10
   b5e40:	f7ff ff7f 	bl	b5d42 <_ZN13sysStatusData20set_frequencyMinutesEt>
  sysStatus.set_alertCodeNode(0);
   b5e44:	f7ff fdc4 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e48:	2100      	movs	r1, #0
   b5e4a:	f7ff ff0c 	bl	b5c66 <_ZN13sysStatusData17set_alertCodeNodeEh>
  sysStatus.set_alertTimestampNode(0);
   b5e4e:	f7ff fdbf 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e52:	2300      	movs	r3, #0
   b5e54:	2200      	movs	r2, #0
   b5e56:	f7ff ffcb 	bl	b5df0 <_ZN13sysStatusData22set_alertTimestampNodeEx>
  sysStatus.set_openHours(true);
   b5e5a:	f7ff fdb9 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
}
   b5e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_openHours(true);
   b5e62:	2101      	movs	r1, #1
   b5e64:	f7ff bdea 	b.w	b5a3c <_ZN13sysStatusData13set_openHoursEb>
   b5e68:	000be490 	.word	0x000be490
   b5e6c:	2003e654 	.word	0x2003e654

000b5e70 <_ZN13sysStatusData17checkSystemValuesEv>:
void sysStatusData::checkSystemValues() {               // Values out of bounds indicates an initialization error - will reload defaults
   b5e70:	b538      	push	{r3, r4, r5, lr}
   b5e72:	4605      	mov	r5, r0
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b5e74:	f7ff fdac 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e78:	f7ff ff30 	bl	b5cdc <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5e7c:	b1c8      	cbz	r0, b5eb2 <_ZN13sysStatusData17checkSystemValuesEv+0x42>
   b5e7e:	f7ff fda7 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e82:	f7ff ff2b 	bl	b5cdc <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5e86:	283c      	cmp	r0, #60	; 0x3c
   b5e88:	bf94      	ite	ls
   b5e8a:	2400      	movls	r4, #0
   b5e8c:	2401      	movhi	r4, #1
    if (sysStatus.get_sensorType() <= 0 || sysStatus.get_sensorType() >2) reset = true;
   b5e8e:	f7ff fd9f 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e92:	f7ff fe99 	bl	b5bc8 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5e96:	b970      	cbnz	r0, b5eb6 <_ZN13sysStatusData17checkSystemValuesEv+0x46>
   b5e98:	2401      	movs	r4, #1
    if (sysStatus.get_nodeNumber() > 11) reset = true;
   b5e9a:	f7ff fd99 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5e9e:	f7ff fe84 	bl	b5baa <_ZNK13sysStatusData14get_nodeNumberEv>
   b5ea2:	280b      	cmp	r0, #11
   b5ea4:	d800      	bhi.n	b5ea8 <_ZN13sysStatusData17checkSystemValuesEv+0x38>
    if (reset) sysStatusData::loadSystemDefaults();
   b5ea6:	b16c      	cbz	r4, b5ec4 <_ZN13sysStatusData17checkSystemValuesEv+0x54>
   b5ea8:	4628      	mov	r0, r5
}
   b5eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (reset) sysStatusData::loadSystemDefaults();
   b5eae:	f7ff bfa5 	b.w	b5dfc <_ZN13sysStatusData18loadSystemDefaultsEv>
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b5eb2:	2401      	movs	r4, #1
   b5eb4:	e7eb      	b.n	b5e8e <_ZN13sysStatusData17checkSystemValuesEv+0x1e>
    if (sysStatus.get_sensorType() <= 0 || sysStatus.get_sensorType() >2) reset = true;
   b5eb6:	f7ff fd8b 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5eba:	f7ff fe85 	bl	b5bc8 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5ebe:	2802      	cmp	r0, #2
   b5ec0:	d8ea      	bhi.n	b5e98 <_ZN13sysStatusData17checkSystemValuesEv+0x28>
   b5ec2:	e7ea      	b.n	b5e9a <_ZN13sysStatusData17checkSystemValuesEv+0x2a>
}
   b5ec4:	bd38      	pop	{r3, r4, r5, pc}

000b5ec6 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5ec6:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5ec8:	2138      	movs	r1, #56	; 0x38
   b5eca:	f7ff ff68 	bl	b5d9e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5ece:	bd08      	pop	{r3, pc}

000b5ed0 <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b5ed0:	b510      	push	{r4, lr}
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b5ed2:	f7ff fdf1 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5ed6:	2100      	movs	r1, #0
   b5ed8:	f7ff ff3f 	bl	b5d5a <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5edc:	f7ff fdec 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5ee0:	2100      	movs	r1, #0
   b5ee2:	f7ff ff34 	bl	b5d4e <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b5ee6:	f7ff fde7 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5eea:	4604      	mov	r4, r0
   b5eec:	f005 fb73 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b5ef0:	4602      	mov	r2, r0
   b5ef2:	17c3      	asrs	r3, r0, #31
   b5ef4:	4620      	mov	r0, r4
   b5ef6:	f7ff ffe6 	bl	b5ec6 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b5efa:	f7ff fd69 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b5efe:	2100      	movs	r1, #0
   b5f00:	f7ff feab 	bl	b5c5a <_ZN13sysStatusData14set_resetCountEh>
  current.set_messageCount(0);
   b5f04:	f7ff fdd8 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b5f08:	2100      	movs	r1, #0
   b5f0a:	f7ff fec4 	bl	b5c96 <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b5f0e:	f7ff fdd3 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
}
   b5f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  current.set_successCount(0);
   b5f16:	2100      	movs	r1, #0
   b5f18:	f7ff bec3 	b.w	b5ca2 <_ZN17currentStatusData16set_successCountEh>

000b5f1c <_GLOBAL__sub_I_fram>:
}
   b5f1c:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);  
   b5f1e:	f005 fdc3 	bl	bbaa8 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5f22:	4c05      	ldr	r4, [pc, #20]	; (b5f38 <_GLOBAL__sub_I_fram+0x1c>)
   b5f24:	4601      	mov	r1, r0
   b5f26:	2300      	movs	r3, #0
   b5f28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	f000 fffd 	bl	b6f2c <_ZN6MB85RCC1ER7TwoWireji>
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <_GLOBAL__sub_I_fram+0x20>)
   b5f34:	6023      	str	r3, [r4, #0]
}
   b5f36:	bd10      	pop	{r4, pc}
   b5f38:	2003e3b8 	.word	0x2003e3b8
   b5f3c:	000be4b0 	.word	0x000be4b0

000b5f40 <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b5f40:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b5f42:	4913      	ldr	r1, [pc, #76]	; (b5f90 <_Z18initializePinModesv+0x50>)
   b5f44:	4813      	ldr	r0, [pc, #76]	; (b5f94 <_Z18initializePinModesv+0x54>)
   b5f46:	f7fe f98d 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5f4a:	2102      	movs	r1, #2
   b5f4c:	2004      	movs	r0, #4
   b5f4e:	f005 fd29 	bl	bb9a4 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b5f52:	2100      	movs	r1, #0
   b5f54:	2008      	movs	r0, #8
   b5f56:	f005 fd25 	bl	bb9a4 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5f5a:	2101      	movs	r1, #1
   b5f5c:	2007      	movs	r0, #7
   b5f5e:	f005 fd21 	bl	bb9a4 <pinMode>
    pinMode(INT_PIN, INPUT);
   b5f62:	2100      	movs	r1, #0
   b5f64:	2012      	movs	r0, #18
   b5f66:	f005 fd1d 	bl	bb9a4 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b5f6a:	2101      	movs	r1, #1
   b5f6c:	2011      	movs	r0, #17
   b5f6e:	f005 fd19 	bl	bb9a4 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b5f72:	2101      	movs	r1, #1
   b5f74:	2010      	movs	r0, #16
   b5f76:	f005 fd15 	bl	bb9a4 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b5f7a:	2100      	movs	r1, #0
   b5f7c:	2010      	movs	r0, #16
   b5f7e:	f005 fd22 	bl	bb9c6 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b5f82:	2100      	movs	r1, #0
   b5f84:	2011      	movs	r0, #17
   b5f86:	f005 fd1e 	bl	bb9c6 <digitalWrite>
    return true;
}
   b5f8a:	2001      	movs	r0, #1
   b5f8c:	bd08      	pop	{r3, pc}
   b5f8e:	bf00      	nop
   b5f90:	000be51c 	.word	0x000be51c
   b5f94:	2003e654 	.word	0x2003e654

000b5f98 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b5f98:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5f9a:	4918      	ldr	r1, [pc, #96]	; (b5ffc <_Z18initializePowerCfgv+0x64>)
   b5f9c:	4818      	ldr	r0, [pc, #96]	; (b6000 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b5f9e:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b5fa0:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b5fa2:	f7fe f95f 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b5fa6:	4622      	mov	r2, r4
   b5fa8:	2100      	movs	r1, #0
   b5faa:	4668      	mov	r0, sp
   b5fac:	f007 fc10 	bl	bd7d0 <memset>
   b5fb0:	4622      	mov	r2, r4
   b5fb2:	2100      	movs	r1, #0
   b5fb4:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5fb8:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b5fbc:	f007 fc08 	bl	bd7d0 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b5fc0:	2100      	movs	r1, #0
   b5fc2:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5fc6:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5fca:	f002 fe89 	bl	b8ce0 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b5fce:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b5fd2:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5fd6:	4b0b      	ldr	r3, [pc, #44]	; (b6004 <_Z18initializePowerCfgv+0x6c>)
   b5fd8:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5fda:	f241 0370 	movw	r3, #4208	; 0x1070
   b5fde:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b5fe2:	9b00      	ldr	r3, [sp, #0]
   b5fe4:	2100      	movs	r1, #0
   b5fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b5fea:	4668      	mov	r0, sp
   b5fec:	9300      	str	r3, [sp, #0]
   b5fee:	f002 fe77 	bl	b8ce0 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b5ff2:	3800      	subs	r0, #0
   b5ff4:	bf18      	it	ne
   b5ff6:	2001      	movne	r0, #1
   b5ff8:	b010      	add	sp, #64	; 0x40
   b5ffa:	bd10      	pop	{r4, pc}
   b5ffc:	000be535 	.word	0x000be535
   b6000:	2003e654 	.word	0x2003e654
   b6004:	03840384 	.word	0x03840384

000b6008 <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b6008:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b600a:	490b      	ldr	r1, [pc, #44]	; (b6038 <_Z20setNodeConfigurationv+0x30>)
   b600c:	480b      	ldr	r0, [pc, #44]	; (b603c <_Z20setNodeConfigurationv+0x34>)
   b600e:	f7fe f929 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b6012:	f7ff fcdd 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b6016:	2101      	movs	r1, #1
   b6018:	f7ff fe2b 	bl	b5c72 <_ZN13sysStatusData14set_sensorTypeEh>
  // sysStatus.set_deviceID(32148);
  // sysStatus.set_structuresVersion(14);
 sysStatus.set_nodeNumber(11);
   b601c:	f7ff fcd8 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
   b6020:	210b      	movs	r1, #11
   b6022:	f7ff fe08 	bl	b5c36 <_ZN13sysStatusData14set_nodeNumberEh>
 sysStatus.set_magicNumber(27617);
   b6026:	f7ff fcd3 	bl	b59d0 <_ZN13sysStatusData8instanceEv>
  // sysStatus.flush(true);
   b602a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 sysStatus.set_magicNumber(27617);
   b602e:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6032:	f7ff be80 	b.w	b5d36 <_ZN13sysStatusData15set_magicNumberEt>
   b6036:	bf00      	nop
   b6038:	000be560 	.word	0x000be560
   b603c:	2003e654 	.word	0x2003e654

000b6040 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b6040:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b6042:	6803      	ldr	r3, [r0, #0]
   b6044:	2b2f      	cmp	r3, #47	; 0x2f
{
   b6046:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b6048:	d904      	bls.n	b6054 <nrf_gpio_pin_port_decode+0x14>
   b604a:	4a07      	ldr	r2, [pc, #28]	; (b6068 <nrf_gpio_pin_port_decode+0x28>)
   b604c:	4907      	ldr	r1, [pc, #28]	; (b606c <nrf_gpio_pin_port_decode+0x2c>)
   b604e:	200a      	movs	r0, #10
   b6050:	f002 fdb6 	bl	b8bc0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b6054:	6823      	ldr	r3, [r4, #0]
   b6056:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b6058:	bf83      	ittte	hi
   b605a:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b605e:	4804      	ldrhi	r0, [pc, #16]	; (b6070 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b6060:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b6062:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b6066:	bd10      	pop	{r4, pc}
   b6068:	000b8811 	.word	0x000b8811
   b606c:	000be5f5 	.word	0x000be5f5
   b6070:	50000300 	.word	0x50000300

000b6074 <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b6074:	ee07 0a90 	vmov	s15, r0
   b6078:	ed9f 7a09 	vldr	s14, [pc, #36]	; b60a0 <_Z17tmp36TemperatureCi+0x2c>
   b607c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b6080:	ee67 7a87 	vmul.f32	s15, s15, s14
   b6084:	ed9f 7a07 	vldr	s14, [pc, #28]	; b60a4 <_Z17tmp36TemperatureCi+0x30>
   b6088:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b608c:	eddf 7a06 	vldr	s15, [pc, #24]	; b60a8 <_Z17tmp36TemperatureCi+0x34>
   b6090:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b6094:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b6098:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b609c:	4770      	bx	lr
   b609e:	bf00      	nop
   b60a0:	454e4000 	.word	0x454e4000
   b60a4:	457ff000 	.word	0x457ff000
   b60a8:	43fa0000 	.word	0x43fa0000

000b60ac <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b60ac:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b60ae:	2101      	movs	r1, #1
   b60b0:	a801      	add	r0, sp, #4
   b60b2:	f004 fc9c 	bl	ba9ee <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b60b6:	f7ff fcff 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b60ba:	f7ff fd8a 	bl	b5bd2 <_ZNK17currentStatusData17get_internalTempCEv>
   b60be:	f7ff fcfb 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b60c2:	f7ff fd86 	bl	b5bd2 <_ZNK17currentStatusData17get_internalTempCEv>
   b60c6:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b60c8:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b60ca:	d90d      	bls.n	b60e8 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b60cc:	f004 fd22 	bl	bab14 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b60d0:	f7ff fcf2 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b60d4:	2101      	movs	r1, #1
   b60d6:	f7ff fdd8 	bl	b5c8a <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b60da:	2400      	movs	r4, #0
  PMIC pmic(true);
   b60dc:	a801      	add	r0, sp, #4
   b60de:	f004 fc95 	bl	baa0c <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b60e2:	4620      	mov	r0, r4
   b60e4:	b002      	add	sp, #8
   b60e6:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b60e8:	f004 fcf9 	bl	baade <_ZN4PMIC14enableChargingEv>
    return true;
   b60ec:	2401      	movs	r4, #1
   b60ee:	e7f5      	b.n	b60dc <_Z16isItSafeToChargev+0x30>

000b60f0 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b60f0:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b60f2:	4d19      	ldr	r5, [pc, #100]	; (b6158 <_Z17getSignalStrengthv+0x68>)
   b60f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b60f6:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b60f8:	ac0c      	add	r4, sp, #48	; 0x30
   b60fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b60fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6100:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6104:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b6108:	4914      	ldr	r1, [pc, #80]	; (b615c <_Z17getSignalStrengthv+0x6c>)
   b610a:	a804      	add	r0, sp, #16
   b610c:	f002 ff7c 	bl	b9008 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b6110:	a804      	add	r0, sp, #16
   b6112:	f002 ffbc 	bl	b908e <_ZNK14CellularSignal19getAccessTechnologyEv>
   b6116:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b6118:	a804      	add	r0, sp, #16
   b611a:	f002 fff1 	bl	b9100 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b611e:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b6120:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b6124:	f003 f81c 	bl	b9160 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b6128:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b612a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b612e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b6132:	f006 ff33 	bl	bcf9c <__aeabi_f2d>
   b6136:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b613a:	4628      	mov	r0, r5
   b613c:	f006 ff2e 	bl	bcf9c <__aeabi_f2d>
   b6140:	e9cd 0100 	strd	r0, r1, [sp]
   b6144:	4a06      	ldr	r2, [pc, #24]	; (b6160 <_Z17getSignalStrengthv+0x70>)
   b6146:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b614a:	4806      	ldr	r0, [pc, #24]	; (b6164 <_Z17getSignalStrengthv+0x74>)
   b614c:	2140      	movs	r1, #64	; 0x40
   b614e:	f002 fe9d 	bl	b8e8c <snprintf>
}
   b6152:	b017      	add	sp, #92	; 0x5c
   b6154:	bd30      	pop	{r4, r5, pc}
   b6156:	bf00      	nop
   b6158:	000be67c 	.word	0x000be67c
   b615c:	2003e610 	.word	0x2003e610
   b6160:	000be619 	.word	0x000be619
   b6164:	2003de80 	.word	0x2003de80

000b6168 <_Z11recordCountv>:


bool recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b6168:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b616a:	4e4f      	ldr	r6, [pc, #316]	; (b62a8 <_Z11recordCountv+0x140>)
   b616c:	4c4f      	ldr	r4, [pc, #316]	; (b62ac <_Z11recordCountv+0x144>)
   b616e:	7833      	ldrb	r3, [r6, #0]
   b6170:	f3bf 8f5b 	dmb	ish
   b6174:	f013 0f01 	tst.w	r3, #1
   b6178:	b085      	sub	sp, #20
   b617a:	d109      	bne.n	b6190 <_Z11recordCountv+0x28>
   b617c:	4630      	mov	r0, r6
   b617e:	f7fd ff9d 	bl	b40bc <__cxa_guard_acquire>
   b6182:	b128      	cbz	r0, b6190 <_Z11recordCountv+0x28>
   b6184:	f002 fb74 	bl	b8870 <HAL_Pin_Map>
   b6188:	6020      	str	r0, [r4, #0]
   b618a:	4630      	mov	r0, r6
   b618c:	f7fd ff9b 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6190:	4b47      	ldr	r3, [pc, #284]	; (b62b0 <_Z11recordCountv+0x148>)
   b6192:	881d      	ldrh	r5, [r3, #0]
   b6194:	6823      	ldr	r3, [r4, #0]
   b6196:	012d      	lsls	r5, r5, #4
   b6198:	5d5b      	ldrb	r3, [r3, r5]
   b619a:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b619c:	7833      	ldrb	r3, [r6, #0]
   b619e:	f3bf 8f5b 	dmb	ish
   b61a2:	07d9      	lsls	r1, r3, #31
   b61a4:	d409      	bmi.n	b61ba <_Z11recordCountv+0x52>
   b61a6:	4840      	ldr	r0, [pc, #256]	; (b62a8 <_Z11recordCountv+0x140>)
   b61a8:	f7fd ff88 	bl	b40bc <__cxa_guard_acquire>
   b61ac:	b128      	cbz	r0, b61ba <_Z11recordCountv+0x52>
   b61ae:	f002 fb5f 	bl	b8870 <HAL_Pin_Map>
   b61b2:	6020      	str	r0, [r4, #0]
   b61b4:	483c      	ldr	r0, [pc, #240]	; (b62a8 <_Z11recordCountv+0x140>)
   b61b6:	f7fd ff86 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b61ba:	6823      	ldr	r3, [r4, #0]
   b61bc:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b61be:	a803      	add	r0, sp, #12
   b61c0:	785b      	ldrb	r3, [r3, #1]
   b61c2:	f003 031f 	and.w	r3, r3, #31
   b61c6:	433b      	orrs	r3, r7
   b61c8:	9303      	str	r3, [sp, #12]
   b61ca:	f7ff ff39 	bl	b6040 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b61ce:	9a03      	ldr	r2, [sp, #12]
   b61d0:	2301      	movs	r3, #1
   b61d2:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b61d4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b61d8:	f7ff fc6e 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b61dc:	4607      	mov	r7, r0
   b61de:	f005 f9fa 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b61e2:	4602      	mov	r2, r0
   b61e4:	17c3      	asrs	r3, r0, #31
   b61e6:	4638      	mov	r0, r7
   b61e8:	f7ff fe6d 	bl	b5ec6 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b61ec:	f7ff fc64 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b61f0:	4607      	mov	r7, r0
   b61f2:	f7ff fc61 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b61f6:	f7ff fd76 	bl	b5ce6 <_ZNK17currentStatusData15get_hourlyCountEv>
   b61fa:	3001      	adds	r0, #1
   b61fc:	b281      	uxth	r1, r0
   b61fe:	4638      	mov	r0, r7
   b6200:	f7ff fda5 	bl	b5d4e <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b6204:	f7ff fc58 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b6208:	4607      	mov	r7, r0
   b620a:	f7ff fc55 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b620e:	f7ff fd6f 	bl	b5cf0 <_ZNK17currentStatusData14get_dailyCountEv>
   b6212:	3001      	adds	r0, #1
   b6214:	b281      	uxth	r1, r0
   b6216:	4638      	mov	r0, r7
   b6218:	f7ff fd9f 	bl	b5d5a <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b621c:	f7ff fc4c 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b6220:	f7ff fd61 	bl	b5ce6 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6224:	9001      	str	r0, [sp, #4]
   b6226:	f7ff fc47 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b622a:	f7ff fd61 	bl	b5cf0 <_ZNK17currentStatusData14get_dailyCountEv>
   b622e:	9a01      	ldr	r2, [sp, #4]
   b6230:	4920      	ldr	r1, [pc, #128]	; (b62b4 <_Z11recordCountv+0x14c>)
   b6232:	4603      	mov	r3, r0
   b6234:	4820      	ldr	r0, [pc, #128]	; (b62b8 <_Z11recordCountv+0x150>)
   b6236:	f7fe f815 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b623a:	20c8      	movs	r0, #200	; 0xc8
   b623c:	f002 fe76 	bl	b8f2c <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b6240:	7833      	ldrb	r3, [r6, #0]
   b6242:	f3bf 8f5b 	dmb	ish
   b6246:	07da      	lsls	r2, r3, #31
   b6248:	d409      	bmi.n	b625e <_Z11recordCountv+0xf6>
   b624a:	4817      	ldr	r0, [pc, #92]	; (b62a8 <_Z11recordCountv+0x140>)
   b624c:	f7fd ff36 	bl	b40bc <__cxa_guard_acquire>
   b6250:	b128      	cbz	r0, b625e <_Z11recordCountv+0xf6>
   b6252:	f002 fb0d 	bl	b8870 <HAL_Pin_Map>
   b6256:	6020      	str	r0, [r4, #0]
   b6258:	4813      	ldr	r0, [pc, #76]	; (b62a8 <_Z11recordCountv+0x140>)
   b625a:	f7fd ff34 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b625e:	6823      	ldr	r3, [r4, #0]
   b6260:	5d5b      	ldrb	r3, [r3, r5]
   b6262:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b6264:	7833      	ldrb	r3, [r6, #0]
   b6266:	f3bf 8f5b 	dmb	ish
   b626a:	07db      	lsls	r3, r3, #31
   b626c:	d409      	bmi.n	b6282 <_Z11recordCountv+0x11a>
   b626e:	480e      	ldr	r0, [pc, #56]	; (b62a8 <_Z11recordCountv+0x140>)
   b6270:	f7fd ff24 	bl	b40bc <__cxa_guard_acquire>
   b6274:	b128      	cbz	r0, b6282 <_Z11recordCountv+0x11a>
   b6276:	f002 fafb 	bl	b8870 <HAL_Pin_Map>
   b627a:	6020      	str	r0, [r4, #0]
   b627c:	480a      	ldr	r0, [pc, #40]	; (b62a8 <_Z11recordCountv+0x140>)
   b627e:	f7fd ff22 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b6282:	6823      	ldr	r3, [r4, #0]
   b6284:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b6286:	a803      	add	r0, sp, #12
   b6288:	786b      	ldrb	r3, [r5, #1]
   b628a:	f003 031f 	and.w	r3, r3, #31
   b628e:	433b      	orrs	r3, r7
   b6290:	9303      	str	r3, [sp, #12]
   b6292:	f7ff fed5 	bl	b6040 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b6296:	9b03      	ldr	r3, [sp, #12]
   b6298:	2201      	movs	r2, #1
   b629a:	fa02 f303 	lsl.w	r3, r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b629e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);

  return true;
   b62a2:	4610      	mov	r0, r2
   b62a4:	b005      	add	sp, #20
   b62a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b62a8:	2003e3c8 	.word	0x2003e3c8
   b62ac:	2003e3cc 	.word	0x2003e3cc
   b62b0:	000be550 	.word	0x000be550
   b62b4:	000be632 	.word	0x000be632
   b62b8:	2003e654 	.word	0x2003e654

000b62bc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b62bc:	b530      	push	{r4, r5, lr}
   b62be:	b085      	sub	sp, #20
   b62c0:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b62c2:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b62c4:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b62c6:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b62c8:	f002 fcac 	bl	b8c24 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b62cc:	b990      	cbnz	r0, b62f4 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b62ce:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b62d0:	b10c      	cbz	r4, b62d6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b62d2:	6923      	ldr	r3, [r4, #16]
   b62d4:	b923      	cbnz	r3, b62e0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b62d6:	4a08      	ldr	r2, [pc, #32]	; (b62f8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b62d8:	4908      	ldr	r1, [pc, #32]	; (b62fc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b62da:	200a      	movs	r0, #10
   b62dc:	f002 fc70 	bl	b8bc0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b62e0:	230c      	movs	r3, #12
   b62e2:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b62e6:	2304      	movs	r3, #4
   b62e8:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b62ea:	aa01      	add	r2, sp, #4
   b62ec:	6923      	ldr	r3, [r4, #16]
   b62ee:	2101      	movs	r1, #1
   b62f0:	4620      	mov	r0, r4
   b62f2:	4798      	blx	r3
}
   b62f4:	b005      	add	sp, #20
   b62f6:	bd30      	pop	{r4, r5, pc}
   b62f8:	000b8811 	.word	0x000b8811
   b62fc:	000be64f 	.word	0x000be64f

000b6300 <_Z12batteryStatev>:
bool batteryState() {
   b6300:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b6302:	f7ff fbd9 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b6306:	a901      	add	r1, sp, #4
   b6308:	4604      	mov	r4, r0
   b630a:	2007      	movs	r0, #7
   b630c:	f7ff ffd6 	bl	b62bc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b6310:	1e01      	subs	r1, r0, #0
        return val;
   b6312:	bfa8      	it	ge
   b6314:	9901      	ldrge	r1, [sp, #4]
   b6316:	4620      	mov	r0, r4
   b6318:	b2c9      	uxtb	r1, r1
   b631a:	f7ff fcb6 	bl	b5c8a <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b631e:	4818      	ldr	r0, [pc, #96]	; (b6380 <_Z12batteryStatev+0x80>)
   b6320:	f002 ffe8 	bl	b92f4 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b6324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b6328:	f002 fe00 	bl	b8f2c <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b632c:	f7ff fbc4 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b6330:	a901      	add	r1, sp, #4
   b6332:	4604      	mov	r4, r0
   b6334:	2003      	movs	r0, #3
   b6336:	f7ff ffc1 	bl	b62bc <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b633a:	b9e8      	cbnz	r0, b6378 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b633c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6340:	ee07 3a90 	vmov	s15, r3
   b6344:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b6348:	ee17 0a90 	vmov	r0, s15
   b634c:	f006 fe26 	bl	bcf9c <__aeabi_f2d>
   b6350:	ec41 0b10 	vmov	d0, r0, r1
   b6354:	4620      	mov	r0, r4
   b6356:	f7ff fbf3 	bl	b5b40 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b635a:	f7ff fbad 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b635e:	f7ff fbcf 	bl	b5b00 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b6362:	4b08      	ldr	r3, [pc, #32]	; (b6384 <_Z12batteryStatev+0x84>)
   b6364:	ec51 0b10 	vmov	r0, r1, d0
   b6368:	2200      	movs	r2, #0
   b636a:	f007 f8ff 	bl	bd56c <__aeabi_dcmpgt>
}
   b636e:	3800      	subs	r0, #0
   b6370:	bf18      	it	ne
   b6372:	2001      	movne	r0, #1
   b6374:	b002      	add	sp, #8
   b6376:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6378:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b637c:	e7e4      	b.n	b6348 <_Z12batteryStatev+0x48>
   b637e:	bf00      	nop
   b6380:	2003e3d0 	.word	0x2003e3d0
   b6384:	404e0000 	.word	0x404e0000

000b6388 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6388:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b638a:	f7ff fb95 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b638e:	4b11      	ldr	r3, [pc, #68]	; (b63d4 <_Z16takeMeasurementsv+0x4c>)
   b6390:	4604      	mov	r4, r0
   b6392:	8818      	ldrh	r0, [r3, #0]
   b6394:	f005 fb43 	bl	bba1e <analogRead>
   b6398:	f7ff fe6c 	bl	b6074 <_Z17tmp36TemperatureCi>
   b639c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b63a0:	4620      	mov	r0, r4
   b63a2:	edcd 7a01 	vstr	s15, [sp, #4]
   b63a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b63aa:	f7ff fc68 	bl	b5c7e <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b63ae:	f7ff fb83 	bl	b5ab8 <_ZN17currentStatusData8instanceEv>
   b63b2:	f7ff fc0e 	bl	b5bd2 <_ZNK17currentStatusData17get_internalTempCEv>
   b63b6:	4a08      	ldr	r2, [pc, #32]	; (b63d8 <_Z16takeMeasurementsv+0x50>)
   b63b8:	4603      	mov	r3, r0
   b63ba:	2110      	movs	r1, #16
   b63bc:	4807      	ldr	r0, [pc, #28]	; (b63dc <_Z16takeMeasurementsv+0x54>)
   b63be:	f002 fd65 	bl	b8e8c <snprintf>
    batteryState();
   b63c2:	f7ff ff9d 	bl	b6300 <_Z12batteryStatev>
    isItSafeToCharge();
   b63c6:	f7ff fe71 	bl	b60ac <_Z16isItSafeToChargev>
    getSignalStrength();
   b63ca:	f7ff fe91 	bl	b60f0 <_Z17getSignalStrengthv>
}
   b63ce:	2001      	movs	r0, #1
   b63d0:	b002      	add	sp, #8
   b63d2:	bd10      	pop	{r4, pc}
   b63d4:	000be55e 	.word	0x000be55e
   b63d8:	000be675 	.word	0x000be675
   b63dc:	2003de70 	.word	0x2003de70

000b63e0 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b63e0:	4801      	ldr	r0, [pc, #4]	; (b63e8 <_GLOBAL__sub_I_batteryContext+0x8>)
   b63e2:	2100      	movs	r1, #0
   b63e4:	f002 bf42 	b.w	b926c <_ZN9FuelGaugeC1Eb>
   b63e8:	2003e3d0 	.word	0x2003e3d0

000b63ec <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b63ec:	4770      	bx	lr

000b63ee <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b63ee:	b510      	push	{r4, lr}
}
   b63f0:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b63f2:	4604      	mov	r4, r0
}
   b63f4:	f7fd fe53 	bl	b409e <_ZdlPvj>
   b63f8:	4620      	mov	r0, r4
   b63fa:	bd10      	pop	{r4, pc}

000b63fc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b63fc:	b510      	push	{r4, lr}
   b63fe:	4604      	mov	r4, r0
   b6400:	b08a      	sub	sp, #40	; 0x28
   b6402:	4608      	mov	r0, r1
    attr.flags = 0;
   b6404:	f04f 0c20 	mov.w	ip, #32
   b6408:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b640a:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b640e:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b6412:	460b      	mov	r3, r1
   b6414:	aa02      	add	r2, sp, #8
   b6416:	6821      	ldr	r1, [r4, #0]
   b6418:	f002 fbe2 	bl	b8be0 <log_message_v>
}
   b641c:	b00a      	add	sp, #40	; 0x28
   b641e:	bd10      	pop	{r4, pc}

000b6420 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b6420:	b40e      	push	{r1, r2, r3}
   b6422:	b503      	push	{r0, r1, lr}
   b6424:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b6426:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b6428:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b642c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b642e:	f7ff ffe5 	bl	b63fc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b6432:	b002      	add	sp, #8
   b6434:	f85d eb04 	ldr.w	lr, [sp], #4
   b6438:	b003      	add	sp, #12
   b643a:	4770      	bx	lr

000b643c <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b643c:	b40e      	push	{r1, r2, r3}
   b643e:	b503      	push	{r0, r1, lr}
   b6440:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b6442:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b6444:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b6448:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b644a:	f7ff ffd7 	bl	b63fc <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b644e:	b002      	add	sp, #8
   b6450:	f85d eb04 	ldr.w	lr, [sp], #4
   b6454:	b003      	add	sp, #12
   b6456:	4770      	bx	lr

000b6458 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6458:	b510      	push	{r4, lr}
   b645a:	7202      	strb	r2, [r0, #8]
   b645c:	22ff      	movs	r2, #255	; 0xff
   b645e:	8142      	strh	r2, [r0, #10]
   b6460:	2200      	movs	r2, #0
   b6462:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b6466:	6142      	str	r2, [r0, #20]
   b6468:	7602      	strb	r2, [r0, #24]
   b646a:	61c2      	str	r2, [r0, #28]
    instance = this;
   b646c:	4a02      	ldr	r2, [pc, #8]	; (b6478 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b646e:	4c03      	ldr	r4, [pc, #12]	; (b647c <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6470:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6472:	e9c0 4100 	strd	r4, r1, [r0]
}
   b6476:	bd10      	pop	{r4, pc}
   b6478:	2003e3dc 	.word	0x2003e3dc
   b647c:	000be8f4 	.word	0x000be8f4

000b6480 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6484:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6488:	4604      	mov	r4, r0
   b648a:	4689      	mov	r9, r1
   b648c:	4616      	mov	r6, r2
   b648e:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6490:	f1b8 0f00 	cmp.w	r8, #0
   b6494:	d002      	beq.n	b649c <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b6496:	6840      	ldr	r0, [r0, #4]
   b6498:	f002 ffc6 	bl	b9428 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b649c:	7a21      	ldrb	r1, [r4, #8]
   b649e:	6860      	ldr	r0, [r4, #4]
   b64a0:	f002 ff9f 	bl	b93e2 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b64a4:	6860      	ldr	r0, [r4, #4]
   b64a6:	6803      	ldr	r3, [r0, #0]
   b64a8:	4649      	mov	r1, r9
   b64aa:	689b      	ldr	r3, [r3, #8]
   b64ac:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b64ae:	6860      	ldr	r0, [r4, #4]
   b64b0:	2100      	movs	r1, #0
   b64b2:	f002 ffb5 	bl	b9420 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b64b6:	4605      	mov	r5, r0
   b64b8:	bb00      	cbnz	r0, b64fc <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b64ba:	2301      	movs	r3, #1
   b64bc:	7a21      	ldrb	r1, [r4, #8]
   b64be:	6860      	ldr	r0, [r4, #4]
   b64c0:	463a      	mov	r2, r7
   b64c2:	f002 ff7c 	bl	b93be <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b64c6:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b64c8:	4603      	mov	r3, r0
        if (count == num) {
   b64ca:	d109      	bne.n	b64e0 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b64cc:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b64ce:	42be      	cmp	r6, r7
   b64d0:	d01c      	beq.n	b650c <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b64d2:	6860      	ldr	r0, [r4, #4]
   b64d4:	6803      	ldr	r3, [r0, #0]
   b64d6:	695b      	ldr	r3, [r3, #20]
   b64d8:	4798      	blx	r3
   b64da:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b64de:	e7f6      	b.n	b64ce <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b64e0:	490b      	ldr	r1, [pc, #44]	; (b6510 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b64e2:	480c      	ldr	r0, [pc, #48]	; (b6514 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b64e4:	464a      	mov	r2, r9
   b64e6:	f7ff ff9b 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b64ea:	f1b8 0f00 	cmp.w	r8, #0
   b64ee:	d002      	beq.n	b64f6 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b64f0:	6860      	ldr	r0, [r4, #4]
   b64f2:	f002 ffa2 	bl	b943a <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b64f6:	4628      	mov	r0, r5
   b64f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b64fc:	4603      	mov	r3, r0
   b64fe:	4906      	ldr	r1, [pc, #24]	; (b6518 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6500:	4804      	ldr	r0, [pc, #16]	; (b6514 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b6502:	464a      	mov	r2, r9
   b6504:	f7ff ff8c 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6508:	2500      	movs	r5, #0
   b650a:	e7ee      	b.n	b64ea <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b650c:	2501      	movs	r5, #1
   b650e:	e7ec      	b.n	b64ea <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b6510:	000be6a4 	.word	0x000be6a4
   b6514:	2003e3d8 	.word	0x2003e3d8
   b6518:	000be6c9 	.word	0x000be6c9

000b651c <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b651c:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b651e:	9300      	str	r3, [sp, #0]
   b6520:	2301      	movs	r3, #1
   b6522:	f7ff ffad 	bl	b6480 <_ZN6AB180513readRegistersEhPhjb>
}
   b6526:	b003      	add	sp, #12
   b6528:	f85d fb04 	ldr.w	pc, [sp], #4

000b652c <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b652c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b652e:	8943      	ldrh	r3, [r0, #10]
   b6530:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b6532:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b6534:	d010      	beq.n	b6558 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b6536:	4e19      	ldr	r6, [pc, #100]	; (b659c <_ZN6AB180510detectChipEv+0x70>)
   b6538:	4d19      	ldr	r5, [pc, #100]	; (b65a0 <_ZN6AB180510detectChipEv+0x74>)
   b653a:	f002 f971 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b653e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b6542:	d209      	bcs.n	b6558 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b6544:	8960      	ldrh	r0, [r4, #10]
   b6546:	f005 fa57 	bl	bb9f8 <digitalRead>
   b654a:	2801      	cmp	r0, #1
   b654c:	d004      	beq.n	b6558 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b654e:	4631      	mov	r1, r6
   b6550:	4628      	mov	r0, r5
   b6552:	f7fd fe87 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6556:	e7f0      	b.n	b653a <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b6558:	2301      	movs	r3, #1
   b655a:	f10d 0207 	add.w	r2, sp, #7
   b655e:	2128      	movs	r1, #40	; 0x28
   b6560:	4620      	mov	r0, r4
   b6562:	f7ff ffdb 	bl	b651c <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b6566:	b930      	cbnz	r0, b6576 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6568:	480d      	ldr	r0, [pc, #52]	; (b65a0 <_ZN6AB180510detectChipEv+0x74>)
   b656a:	490e      	ldr	r1, [pc, #56]	; (b65a4 <_ZN6AB180510detectChipEv+0x78>)
   b656c:	f7fd fe7a 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6570:	2000      	movs	r0, #0
}
   b6572:	b002      	add	sp, #8
   b6574:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b6576:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b657a:	2b18      	cmp	r3, #24
   b657c:	d1f4      	bne.n	b6568 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b657e:	2301      	movs	r3, #1
   b6580:	f10d 0207 	add.w	r2, sp, #7
   b6584:	2129      	movs	r1, #41	; 0x29
   b6586:	4620      	mov	r0, r4
   b6588:	f7ff ffc8 	bl	b651c <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b658c:	2800      	cmp	r0, #0
   b658e:	d0eb      	beq.n	b6568 <_ZN6AB180510detectChipEv+0x3c>
   b6590:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6594:	2b05      	cmp	r3, #5
   b6596:	d1e7      	bne.n	b6568 <_ZN6AB180510detectChipEv+0x3c>
   b6598:	e7eb      	b.n	b6572 <_ZN6AB180510detectChipEv+0x46>
   b659a:	bf00      	nop
   b659c:	000be6ed 	.word	0x000be6ed
   b65a0:	2003e3d8 	.word	0x2003e3d8
   b65a4:	000be702 	.word	0x000be702

000b65a8 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b65a8:	b507      	push	{r0, r1, r2, lr}
   b65aa:	4613      	mov	r3, r2
    uint8_t value = 0;
   b65ac:	2200      	movs	r2, #0
   b65ae:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b65b2:	f10d 0207 	add.w	r2, sp, #7
   b65b6:	f7ff ffb1 	bl	b651c <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b65ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b65be:	b003      	add	sp, #12
   b65c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b65c4 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b65c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b65c8:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b65cc:	4604      	mov	r4, r0
   b65ce:	460f      	mov	r7, r1
   b65d0:	4615      	mov	r5, r2
   b65d2:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b65d4:	f1b8 0f00 	cmp.w	r8, #0
   b65d8:	d002      	beq.n	b65e0 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b65da:	6840      	ldr	r0, [r0, #4]
   b65dc:	f002 ff24 	bl	b9428 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b65e0:	7a21      	ldrb	r1, [r4, #8]
   b65e2:	6860      	ldr	r0, [r4, #4]
   b65e4:	f002 fefd 	bl	b93e2 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b65e8:	6860      	ldr	r0, [r4, #4]
   b65ea:	6803      	ldr	r3, [r0, #0]
   b65ec:	4639      	mov	r1, r7
   b65ee:	689b      	ldr	r3, [r3, #8]
   b65f0:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b65f2:	442e      	add	r6, r5
   b65f4:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b65f6:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b65f8:	d005      	beq.n	b6606 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b65fa:	6803      	ldr	r3, [r0, #0]
   b65fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6600:	689b      	ldr	r3, [r3, #8]
   b6602:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6604:	e7f6      	b.n	b65f4 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6606:	2101      	movs	r1, #1
   b6608:	f002 ff0a 	bl	b9420 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b660c:	4603      	mov	r3, r0
   b660e:	b170      	cbz	r0, b662e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6610:	4908      	ldr	r1, [pc, #32]	; (b6634 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6612:	4809      	ldr	r0, [pc, #36]	; (b6638 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6614:	463a      	mov	r2, r7
   b6616:	f7ff ff03 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b661a:	2500      	movs	r5, #0
    }

    if (lock) {
   b661c:	f1b8 0f00 	cmp.w	r8, #0
   b6620:	d002      	beq.n	b6628 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6622:	6860      	ldr	r0, [r4, #4]
   b6624:	f002 ff09 	bl	b943a <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6628:	4628      	mov	r0, r5
   b662a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b662e:	2501      	movs	r5, #1
   b6630:	e7f4      	b.n	b661c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6632:	bf00      	nop
   b6634:	000be70f 	.word	0x000be70f
   b6638:	2003e3d8 	.word	0x2003e3d8

000b663c <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b663c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b663e:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6642:	9300      	str	r3, [sp, #0]
   b6644:	f10d 020f 	add.w	r2, sp, #15
   b6648:	2301      	movs	r3, #1
   b664a:	f7ff ffbb 	bl	b65c4 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b664e:	b005      	add	sp, #20
   b6650:	f85d fb04 	ldr.w	pc, [sp], #4

000b6654 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6656:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6658:	460c      	mov	r4, r1
   b665a:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b665c:	491a      	ldr	r1, [pc, #104]	; (b66c8 <_ZN6AB18056setWDTEi+0x74>)
   b665e:	481b      	ldr	r0, [pc, #108]	; (b66cc <_ZN6AB18056setWDTEi+0x78>)
   b6660:	f7fd fe00 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b6664:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b6666:	bfb8      	it	lt
   b6668:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b666a:	b97c      	cbnz	r4, b668c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b666c:	2301      	movs	r3, #1
   b666e:	4622      	mov	r2, r4
   b6670:	211b      	movs	r1, #27
   b6672:	4628      	mov	r0, r5
   b6674:	f7ff ffe2 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6678:	4915      	ldr	r1, [pc, #84]	; (b66d0 <_ZN6AB18056setWDTEi+0x7c>)
   b667a:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b667c:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b667e:	4813      	ldr	r0, [pc, #76]	; (b66cc <_ZN6AB18056setWDTEi+0x78>)
   b6680:	f7ff fedc 	bl	b643c <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b6684:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b6686:	616c      	str	r4, [r5, #20]
}
   b6688:	4630      	mov	r0, r6
   b668a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b668c:	2c03      	cmp	r4, #3
   b668e:	dd19      	ble.n	b66c4 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6690:	10a7      	asrs	r7, r4, #2
   b6692:	2f1f      	cmp	r7, #31
   b6694:	bfa8      	it	ge
   b6696:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6698:	00ba      	lsls	r2, r7, #2
   b669a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b669e:	2301      	movs	r3, #1
   b66a0:	b2d2      	uxtb	r2, r2
   b66a2:	211b      	movs	r1, #27
   b66a4:	4628      	mov	r0, r5
   b66a6:	f7ff ffc9 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b66aa:	463a      	mov	r2, r7
   b66ac:	4603      	mov	r3, r0
   b66ae:	4909      	ldr	r1, [pc, #36]	; (b66d4 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b66b0:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b66b2:	4806      	ldr	r0, [pc, #24]	; (b66cc <_ZN6AB18056setWDTEi+0x78>)
   b66b4:	f7ff fec2 	bl	b643c <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b66b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b66bc:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b66be:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b66c0:	616f      	str	r7, [r5, #20]
   b66c2:	e7e1      	b.n	b6688 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b66c4:	2701      	movs	r7, #1
   b66c6:	e7e7      	b.n	b6698 <_ZN6AB18056setWDTEi+0x44>
   b66c8:	000be734 	.word	0x000be734
   b66cc:	2003e3d8 	.word	0x2003e3d8
   b66d0:	000be73e 	.word	0x000be73e
   b66d4:	000be75a 	.word	0x000be75a

000b66d8 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b66d8:	4b06      	ldr	r3, [pc, #24]	; (b66f4 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b66da:	681a      	ldr	r2, [r3, #0]
   b66dc:	b14a      	cbz	r2, b66f2 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b66de:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b66e2:	430b      	orrs	r3, r1
   b66e4:	d105      	bne.n	b66f2 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b66e6:	68d3      	ldr	r3, [r2, #12]
   b66e8:	b11b      	cbz	r3, b66f2 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b66ea:	2100      	movs	r1, #0
   b66ec:	4610      	mov	r0, r2
   b66ee:	f7ff bfb1 	b.w	b6654 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b66f2:	4770      	bx	lr
   b66f4:	2003e3dc 	.word	0x2003e3dc

000b66f8 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b66f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b66fc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6700:	4605      	mov	r5, r0
   b6702:	4616      	mov	r6, r2
   b6704:	461f      	mov	r7, r3
    if (lock) {
   b6706:	f1b8 0f00 	cmp.w	r8, #0
   b670a:	d004      	beq.n	b6716 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b670c:	6840      	ldr	r0, [r0, #4]
   b670e:	9101      	str	r1, [sp, #4]
   b6710:	f002 fe8a 	bl	b9428 <_ZN7TwoWire4lockEv>
   b6714:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6716:	9101      	str	r1, [sp, #4]
   b6718:	2300      	movs	r3, #0
   b671a:	f10d 020f 	add.w	r2, sp, #15
   b671e:	4628      	mov	r0, r5
   b6720:	f7ff fefc 	bl	b651c <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6724:	4604      	mov	r4, r0
   b6726:	b160      	cbz	r0, b6742 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6728:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b672c:	ea03 0206 	and.w	r2, r3, r6
   b6730:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6732:	4293      	cmp	r3, r2
   b6734:	d005      	beq.n	b6742 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6736:	9901      	ldr	r1, [sp, #4]
   b6738:	2300      	movs	r3, #0
   b673a:	4628      	mov	r0, r5
   b673c:	f7ff ff7e 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
   b6740:	4604      	mov	r4, r0
    if (lock) {
   b6742:	f1b8 0f00 	cmp.w	r8, #0
   b6746:	d002      	beq.n	b674e <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6748:	6868      	ldr	r0, [r5, #4]
   b674a:	f002 fe76 	bl	b943a <_ZN7TwoWire6unlockEv>
}
   b674e:	4620      	mov	r0, r4
   b6750:	b004      	add	sp, #16
   b6752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6756 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6756:	b513      	push	{r0, r1, r4, lr}
   b6758:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b675a:	f10d 0207 	add.w	r2, sp, #7
   b675e:	f7ff fedd 	bl	b651c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b6762:	b128      	cbz	r0, b6770 <_ZN6AB180510isBitClearEhhb+0x1a>
   b6764:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6768:	421c      	tst	r4, r3
   b676a:	bf0c      	ite	eq
   b676c:	2001      	moveq	r0, #1
   b676e:	2000      	movne	r0, #0
}
   b6770:	b002      	add	sp, #8
   b6772:	bd10      	pop	{r4, pc}

000b6774 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6774:	b513      	push	{r0, r1, r4, lr}
   b6776:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6778:	f10d 0207 	add.w	r2, sp, #7
   b677c:	f7ff fece 	bl	b651c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6780:	b128      	cbz	r0, b678e <_ZN6AB18058isBitSetEhhb+0x1a>
   b6782:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6786:	421c      	tst	r4, r3
   b6788:	bf14      	ite	ne
   b678a:	2001      	movne	r0, #1
   b678c:	2000      	moveq	r0, #0
}
   b678e:	b002      	add	sp, #8
   b6790:	bd10      	pop	{r4, pc}

000b6792 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6792:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b6794:	43d2      	mvns	r2, r2
   b6796:	9300      	str	r3, [sp, #0]
   b6798:	b2d2      	uxtb	r2, r2
   b679a:	2300      	movs	r3, #0
   b679c:	f7ff ffac 	bl	b66f8 <_ZN6AB180512maskRegisterEhhhb>
}
   b67a0:	b003      	add	sp, #12
   b67a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b67a8 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b67a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b67aa:	2301      	movs	r3, #1
   b67ac:	f10d 0207 	add.w	r2, sp, #7
   b67b0:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b67b2:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b67b4:	f7ff feb2 	bl	b651c <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b67b8:	4605      	mov	r5, r0
   b67ba:	b938      	cbnz	r0, b67cc <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b67bc:	491e      	ldr	r1, [pc, #120]	; (b6838 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b67be:	481f      	ldr	r0, [pc, #124]	; (b683c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b67c0:	22ad      	movs	r2, #173	; 0xad
   b67c2:	f7ff fe2d 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
}
   b67c6:	4628      	mov	r0, r5
   b67c8:	b003      	add	sp, #12
   b67ca:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b67cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b67d0:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b67d4:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b67d8:	d00b      	beq.n	b67f2 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b67da:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b67dc:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b67de:	210f      	movs	r1, #15
   b67e0:	4620      	mov	r0, r4
   b67e2:	f7ff ffd6 	bl	b6792 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b67e6:	4a16      	ldr	r2, [pc, #88]	; (b6840 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b67e8:	4916      	ldr	r1, [pc, #88]	; (b6844 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b67ea:	4814      	ldr	r0, [pc, #80]	; (b683c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b67ec:	f7fd fd3a 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b67f0:	e7e9      	b.n	b67c6 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b67f2:	2208      	movs	r2, #8
   b67f4:	2117      	movs	r1, #23
   b67f6:	4620      	mov	r0, r4
   b67f8:	f7ff ffbc 	bl	b6774 <_ZN6AB18058isBitSetEhhb>
   b67fc:	b118      	cbz	r0, b6806 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b67fe:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6800:	4a11      	ldr	r2, [pc, #68]	; (b6848 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6802:	61e3      	str	r3, [r4, #28]
   b6804:	e7f0      	b.n	b67e8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6806:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b680a:	071a      	lsls	r2, r3, #28
   b680c:	d509      	bpl.n	b6822 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b680e:	2303      	movs	r3, #3
   b6810:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6812:	2208      	movs	r2, #8
   b6814:	2301      	movs	r3, #1
   b6816:	210f      	movs	r1, #15
   b6818:	4620      	mov	r0, r4
   b681a:	f7ff ffba 	bl	b6792 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b681e:	4a0b      	ldr	r2, [pc, #44]	; (b684c <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6820:	e7e2      	b.n	b67e8 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6822:	075b      	lsls	r3, r3, #29
   b6824:	d5cf      	bpl.n	b67c6 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6826:	2204      	movs	r2, #4
   b6828:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b682a:	2301      	movs	r3, #1
   b682c:	210f      	movs	r1, #15
   b682e:	4620      	mov	r0, r4
   b6830:	f7ff ffaf 	bl	b6792 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6834:	4a06      	ldr	r2, [pc, #24]	; (b6850 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6836:	e7d7      	b.n	b67e8 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6838:	000be7ad 	.word	0x000be7ad
   b683c:	2003e3d8 	.word	0x2003e3d8
   b6840:	000be77e 	.word	0x000be77e
   b6844:	000be7cc 	.word	0x000be7cc
   b6848:	000be787 	.word	0x000be787
   b684c:	000be797 	.word	0x000be797
   b6850:	000be7a7 	.word	0x000be7a7

000b6854 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6854:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6856:	9300      	str	r3, [sp, #0]
   b6858:	4613      	mov	r3, r2
   b685a:	22ff      	movs	r2, #255	; 0xff
   b685c:	f7ff ff4c 	bl	b66f8 <_ZN6AB180512maskRegisterEhhhb>
}
   b6860:	b003      	add	sp, #12
   b6862:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6868 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b686a:	460f      	mov	r7, r1
   b686c:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b686e:	2301      	movs	r3, #1
   b6870:	2200      	movs	r2, #0
   b6872:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6874:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6876:	f7ff fee1 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b687a:	4604      	mov	r4, r0
   b687c:	b938      	cbnz	r0, b688e <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b687e:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b6882:	491f      	ldr	r1, [pc, #124]	; (b6900 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b6884:	481f      	ldr	r0, [pc, #124]	; (b6904 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b6886:	f7ff fdcb 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
}
   b688a:	4620      	mov	r0, r4
   b688c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b688e:	2301      	movs	r3, #1
   b6890:	2223      	movs	r2, #35	; 0x23
   b6892:	2118      	movs	r1, #24
   b6894:	4628      	mov	r0, r5
   b6896:	f7ff fed1 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b689a:	4604      	mov	r4, r0
   b689c:	b910      	cbnz	r0, b68a4 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b689e:	f240 229b 	movw	r2, #667	; 0x29b
   b68a2:	e7ee      	b.n	b6882 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b68a4:	2fff      	cmp	r7, #255	; 0xff
   b68a6:	bfa8      	it	ge
   b68a8:	27ff      	movge	r7, #255	; 0xff
   b68aa:	2f01      	cmp	r7, #1
   b68ac:	bfb8      	it	lt
   b68ae:	2701      	movlt	r7, #1
   b68b0:	2301      	movs	r3, #1
   b68b2:	b2fa      	uxtb	r2, r7
   b68b4:	2119      	movs	r1, #25
   b68b6:	4628      	mov	r0, r5
   b68b8:	f7ff fec0 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b68bc:	4604      	mov	r4, r0
   b68be:	b910      	cbnz	r0, b68c6 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b68c0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b68c4:	e7dd      	b.n	b6882 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b68c6:	2301      	movs	r3, #1
   b68c8:	2208      	movs	r2, #8
   b68ca:	2112      	movs	r1, #18
   b68cc:	4628      	mov	r0, r5
   b68ce:	f7ff ffc1 	bl	b6854 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b68d2:	4604      	mov	r4, r0
   b68d4:	b910      	cbnz	r0, b68dc <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b68d6:	f240 22af 	movw	r2, #687	; 0x2af
   b68da:	e7d2      	b.n	b6882 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b68dc:	2e00      	cmp	r6, #0
   b68de:	bf14      	ite	ne
   b68e0:	2203      	movne	r2, #3
   b68e2:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b68e4:	2301      	movs	r3, #1
   b68e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b68ea:	2118      	movs	r1, #24
   b68ec:	4628      	mov	r0, r5
   b68ee:	f7ff fea5 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b68f2:	4604      	mov	r4, r0
   b68f4:	2800      	cmp	r0, #0
   b68f6:	d1c8      	bne.n	b688a <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b68f8:	f240 22b9 	movw	r2, #697	; 0x2b9
   b68fc:	e7c1      	b.n	b6882 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b68fe:	bf00      	nop
   b6900:	000be7dd 	.word	0x000be7dd
   b6904:	2003e3d8 	.word	0x2003e3d8

000b6908 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b690c:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b690e:	4605      	mov	r5, r0
   b6910:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6912:	484f      	ldr	r0, [pc, #316]	; (b6a50 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6914:	494f      	ldr	r1, [pc, #316]	; (b6a54 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b6916:	f7fd fca5 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b691a:	2100      	movs	r1, #0
   b691c:	4628      	mov	r0, r5
   b691e:	f7ff fe99 	bl	b6654 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6922:	4604      	mov	r4, r0
   b6924:	b948      	cbnz	r0, b693a <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b6926:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b692a:	494b      	ldr	r1, [pc, #300]	; (b6a58 <_ZN6AB180513deepPowerDownEi+0x150>)
   b692c:	4848      	ldr	r0, [pc, #288]	; (b6a50 <_ZN6AB180513deepPowerDownEi+0x148>)
   b692e:	f7ff fd77 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
}
   b6932:	4620      	mov	r0, r4
   b6934:	b003      	add	sp, #12
   b6936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b693a:	2301      	movs	r3, #1
   b693c:	461a      	mov	r2, r3
   b693e:	2130      	movs	r1, #48	; 0x30
   b6940:	4628      	mov	r0, r5
   b6942:	f7ff ff87 	bl	b6854 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6946:	4604      	mov	r4, r0
   b6948:	b910      	cbnz	r0, b6950 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b694a:	f240 2205 	movw	r2, #517	; 0x205
   b694e:	e7ec      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b6950:	2210      	movs	r2, #16
   b6952:	2301      	movs	r3, #1
   b6954:	4611      	mov	r1, r2
   b6956:	4628      	mov	r0, r5
   b6958:	f7ff ff1b 	bl	b6792 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b695c:	4604      	mov	r4, r0
   b695e:	b910      	cbnz	r0, b6966 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b6960:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b6964:	e7e1      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b6966:	2301      	movs	r3, #1
   b6968:	2226      	movs	r2, #38	; 0x26
   b696a:	2113      	movs	r1, #19
   b696c:	4628      	mov	r0, r5
   b696e:	f7ff fe65 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6972:	4604      	mov	r4, r0
   b6974:	b910      	cbnz	r0, b697c <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b6976:	f240 2213 	movw	r2, #531	; 0x213
   b697a:	e7d6      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b697c:	2601      	movs	r6, #1
   b697e:	9600      	str	r6, [sp, #0]
   b6980:	4633      	mov	r3, r6
   b6982:	22fc      	movs	r2, #252	; 0xfc
   b6984:	2111      	movs	r1, #17
   b6986:	4628      	mov	r0, r5
   b6988:	f7ff feb6 	bl	b66f8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b698c:	4604      	mov	r4, r0
   b698e:	b910      	cbnz	r0, b6996 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6990:	f240 221b 	movw	r2, #539	; 0x21b
   b6994:	e7c9      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b6996:	2200      	movs	r2, #0
   b6998:	4639      	mov	r1, r7
   b699a:	4628      	mov	r0, r5
   b699c:	f7ff ff64 	bl	b6868 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b69a0:	4604      	mov	r4, r0
   b69a2:	b910      	cbnz	r0, b69aa <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b69a4:	f240 2222 	movw	r2, #546	; 0x222
   b69a8:	e7bf      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b69aa:	9600      	str	r6, [sp, #0]
   b69ac:	2302      	movs	r3, #2
   b69ae:	2277      	movs	r2, #119	; 0x77
   b69b0:	2110      	movs	r1, #16
   b69b2:	4628      	mov	r0, r5
   b69b4:	f7ff fea0 	bl	b66f8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b69b8:	4604      	mov	r4, r0
   b69ba:	b910      	cbnz	r0, b69c2 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b69bc:	f240 222b 	movw	r2, #555	; 0x22b
   b69c0:	e7b3      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b69c2:	4633      	mov	r3, r6
   b69c4:	2204      	movs	r2, #4
   b69c6:	211c      	movs	r1, #28
   b69c8:	4628      	mov	r0, r5
   b69ca:	f7ff ff43 	bl	b6854 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b69ce:	4604      	mov	r4, r0
   b69d0:	b910      	cbnz	r0, b69d8 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b69d2:	f240 2232 	movw	r2, #562	; 0x232
   b69d6:	e7a8      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b69d8:	9600      	str	r6, [sp, #0]
   b69da:	2318      	movs	r3, #24
   b69dc:	22e3      	movs	r2, #227	; 0xe3
   b69de:	2111      	movs	r1, #17
   b69e0:	4628      	mov	r0, r5
   b69e2:	f7ff fe89 	bl	b66f8 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b69e6:	4604      	mov	r4, r0
   b69e8:	b910      	cbnz	r0, b69f0 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b69ea:	f240 2239 	movw	r2, #569	; 0x239
   b69ee:	e79c      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b69f0:	4633      	mov	r3, r6
   b69f2:	22c0      	movs	r2, #192	; 0xc0
   b69f4:	2117      	movs	r1, #23
   b69f6:	4628      	mov	r0, r5
   b69f8:	f7ff fe20 	bl	b663c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b69fc:	4604      	mov	r4, r0
   b69fe:	b910      	cbnz	r0, b6a06 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6a00:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6a04:	e791      	b.n	b692a <_ZN6AB180513deepPowerDownEi+0x22>
   b6a06:	f001 ff0b 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6a0a:	f8df 9054 	ldr.w	r9, [pc, #84]	; b6a60 <_ZN6AB180513deepPowerDownEi+0x158>
   b6a0e:	f8df 8040 	ldr.w	r8, [pc, #64]	; b6a50 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6a12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6a16:	4606      	mov	r6, r0
   b6a18:	434f      	muls	r7, r1
   b6a1a:	f001 ff01 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
   b6a1e:	1b80      	subs	r0, r0, r6
   b6a20:	42b8      	cmp	r0, r7
   b6a22:	d20e      	bcs.n	b6a42 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6a24:	2201      	movs	r2, #1
   b6a26:	2117      	movs	r1, #23
   b6a28:	4628      	mov	r0, r5
   b6a2a:	f7ff fdbd 	bl	b65a8 <_ZN6AB180512readRegisterEhb>
   b6a2e:	4649      	mov	r1, r9
   b6a30:	4602      	mov	r2, r0
   b6a32:	4640      	mov	r0, r8
   b6a34:	f7fd fc16 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6a3c:	f002 fa76 	bl	b8f2c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6a40:	e7eb      	b.n	b6a1a <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6a42:	4906      	ldr	r1, [pc, #24]	; (b6a5c <_ZN6AB180513deepPowerDownEi+0x154>)
   b6a44:	4802      	ldr	r0, [pc, #8]	; (b6a50 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6a46:	f7ff fceb 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b6a4a:	f004 fbe2 	bl	bb212 <_ZN11SystemClass5resetEv>
    return true;
   b6a4e:	e770      	b.n	b6932 <_ZN6AB180513deepPowerDownEi+0x2a>
   b6a50:	2003e3d8 	.word	0x2003e3d8
   b6a54:	000be808 	.word	0x000be808
   b6a58:	000be7fd 	.word	0x000be7fd
   b6a5c:	000be82e 	.word	0x000be82e
   b6a60:	000be819 	.word	0x000be819

000b6a64 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b6a64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6a68:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6a6c:	4605      	mov	r5, r0
   b6a6e:	460c      	mov	r4, r1
   b6a70:	4691      	mov	r9, r2
   b6a72:	461f      	mov	r7, r3
    if (lock) {
   b6a74:	f1ba 0f00 	cmp.w	sl, #0
   b6a78:	d002      	beq.n	b6a80 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6a7a:	6840      	ldr	r0, [r0, #4]
   b6a7c:	f002 fcd4 	bl	b9428 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6a80:	b307      	cbz	r7, b6ac4 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b6a82:	2f20      	cmp	r7, #32
   b6a84:	463e      	mov	r6, r7
   b6a86:	bf28      	it	cs
   b6a88:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6a8a:	2c7f      	cmp	r4, #127	; 0x7f
   b6a8c:	d826      	bhi.n	b6adc <_ZN6AB18057readRamEjPhjb+0x78>
   b6a8e:	1933      	adds	r3, r6, r4
   b6a90:	2b80      	cmp	r3, #128	; 0x80
   b6a92:	d901      	bls.n	b6a98 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b6a94:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6a98:	2301      	movs	r3, #1
   b6a9a:	2204      	movs	r2, #4
   b6a9c:	213f      	movs	r1, #63	; 0x3f
   b6a9e:	4628      	mov	r0, r5
   b6aa0:	f7ff fe77 	bl	b6792 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6aa4:	2300      	movs	r3, #0
   b6aa6:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6aaa:	9300      	str	r3, [sp, #0]
   b6aac:	464a      	mov	r2, r9
   b6aae:	4633      	mov	r3, r6
   b6ab0:	b2c9      	uxtb	r1, r1
   b6ab2:	4628      	mov	r0, r5
   b6ab4:	f7ff fce4 	bl	b6480 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6ab8:	4680      	mov	r8, r0
   b6aba:	b128      	cbz	r0, b6ac8 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6abc:	4434      	add	r4, r6
        dataLen -= count;
   b6abe:	1bbf      	subs	r7, r7, r6
        data += count;
   b6ac0:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6ac2:	e7dd      	b.n	b6a80 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6ac4:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6ac8:	f1ba 0f00 	cmp.w	sl, #0
   b6acc:	d002      	beq.n	b6ad4 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6ace:	6868      	ldr	r0, [r5, #4]
   b6ad0:	f002 fcb3 	bl	b943a <_ZN7TwoWire6unlockEv>
}
   b6ad4:	4640      	mov	r0, r8
   b6ad6:	b002      	add	sp, #8
   b6ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6adc:	2301      	movs	r3, #1
   b6ade:	2204      	movs	r2, #4
   b6ae0:	213f      	movs	r1, #63	; 0x3f
   b6ae2:	4628      	mov	r0, r5
   b6ae4:	f7ff feb6 	bl	b6854 <_ZN6AB180514setRegisterBitEhhb>
   b6ae8:	e7dc      	b.n	b6aa4 <_ZN6AB18057readRamEjPhjb+0x40>

000b6aea <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6aea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6aee:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6af2:	4605      	mov	r5, r0
   b6af4:	460c      	mov	r4, r1
   b6af6:	4691      	mov	r9, r2
   b6af8:	461f      	mov	r7, r3
    if (lock) {
   b6afa:	f1ba 0f00 	cmp.w	sl, #0
   b6afe:	d002      	beq.n	b6b06 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6b00:	6840      	ldr	r0, [r0, #4]
   b6b02:	f002 fc91 	bl	b9428 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6b06:	b307      	cbz	r7, b6b4a <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6b08:	2f1f      	cmp	r7, #31
   b6b0a:	463e      	mov	r6, r7
   b6b0c:	bf28      	it	cs
   b6b0e:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6b10:	2c7f      	cmp	r4, #127	; 0x7f
   b6b12:	d826      	bhi.n	b6b62 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6b14:	1933      	adds	r3, r6, r4
   b6b16:	2b80      	cmp	r3, #128	; 0x80
   b6b18:	d901      	bls.n	b6b1e <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b6b1a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6b1e:	2301      	movs	r3, #1
   b6b20:	2204      	movs	r2, #4
   b6b22:	213f      	movs	r1, #63	; 0x3f
   b6b24:	4628      	mov	r0, r5
   b6b26:	f7ff fe34 	bl	b6792 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6b2a:	2300      	movs	r3, #0
   b6b2c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6b30:	9300      	str	r3, [sp, #0]
   b6b32:	464a      	mov	r2, r9
   b6b34:	4633      	mov	r3, r6
   b6b36:	b2c9      	uxtb	r1, r1
   b6b38:	4628      	mov	r0, r5
   b6b3a:	f7ff fd43 	bl	b65c4 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6b3e:	4680      	mov	r8, r0
   b6b40:	b128      	cbz	r0, b6b4e <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6b42:	4434      	add	r4, r6
        dataLen -= count;
   b6b44:	1bbf      	subs	r7, r7, r6
        data += count;
   b6b46:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6b48:	e7dd      	b.n	b6b06 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6b4a:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6b4e:	f1ba 0f00 	cmp.w	sl, #0
   b6b52:	d002      	beq.n	b6b5a <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b6b54:	6868      	ldr	r0, [r5, #4]
   b6b56:	f002 fc70 	bl	b943a <_ZN7TwoWire6unlockEv>
}
   b6b5a:	4640      	mov	r0, r8
   b6b5c:	b002      	add	sp, #8
   b6b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6b62:	2301      	movs	r3, #1
   b6b64:	2204      	movs	r2, #4
   b6b66:	213f      	movs	r1, #63	; 0x3f
   b6b68:	4628      	mov	r0, r5
   b6b6a:	f7ff fe73 	bl	b6854 <_ZN6AB180514setRegisterBitEhhb>
   b6b6e:	e7dc      	b.n	b6b2a <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6b70 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6b70:	b530      	push	{r4, r5, lr}
   b6b72:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6b74:	680d      	ldr	r5, [r1, #0]
   b6b76:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6b7a:	9503      	str	r5, [sp, #12]
   b6b7c:	684d      	ldr	r5, [r1, #4]
   b6b7e:	9502      	str	r5, [sp, #8]
   b6b80:	688d      	ldr	r5, [r1, #8]
   b6b82:	9501      	str	r5, [sp, #4]
   b6b84:	68c9      	ldr	r1, [r1, #12]
   b6b86:	9100      	str	r1, [sp, #0]
   b6b88:	3301      	adds	r3, #1
   b6b8a:	4904      	ldr	r1, [pc, #16]	; (b6b9c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6b8c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6b90:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b6b92:	f004 fad7 	bl	bb144 <_ZN6String6formatEPKcz>
}
   b6b96:	4620      	mov	r0, r4
   b6b98:	b005      	add	sp, #20
   b6b9a:	bd30      	pop	{r4, r5, pc}
   b6b9c:	000be840 	.word	0x000be840

000b6ba0 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6ba0:	0903      	lsrs	r3, r0, #4
}
   b6ba2:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6ba4:	f000 000f 	and.w	r0, r0, #15
}
   b6ba8:	fb02 0003 	mla	r0, r2, r3, r0
   b6bac:	4770      	bx	lr

000b6bae <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6bae:	b538      	push	{r3, r4, r5, lr}
   b6bb0:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6bb2:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6bb4:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b6bb6:	f7ff fff3 	bl	b6ba0 <_ZN6AB180510bcdToValueEh>
   b6bba:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6bbc:	7860      	ldrb	r0, [r4, #1]
   b6bbe:	f7ff ffef 	bl	b6ba0 <_ZN6AB180510bcdToValueEh>
   b6bc2:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6bc4:	78a0      	ldrb	r0, [r4, #2]
   b6bc6:	f7ff ffeb 	bl	b6ba0 <_ZN6AB180510bcdToValueEh>
   b6bca:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6bcc:	78e0      	ldrb	r0, [r4, #3]
   b6bce:	f7ff ffe7 	bl	b6ba0 <_ZN6AB180510bcdToValueEh>
   b6bd2:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6bd4:	7920      	ldrb	r0, [r4, #4]
   b6bd6:	f7ff ffe3 	bl	b6ba0 <_ZN6AB180510bcdToValueEh>
   b6bda:	3801      	subs	r0, #1
   b6bdc:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6bde:	b92d      	cbnz	r5, b6bec <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6be0:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6be2:	7828      	ldrb	r0, [r5, #0]
   b6be4:	f7ff ffdc 	bl	b6ba0 <_ZN6AB180510bcdToValueEh>
   b6be8:	6188      	str	r0, [r1, #24]
}
   b6bea:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6bec:	7960      	ldrb	r0, [r4, #5]
   b6bee:	f7ff ffd7 	bl	b6ba0 <_ZN6AB180510bcdToValueEh>
   b6bf2:	3064      	adds	r0, #100	; 0x64
   b6bf4:	1da5      	adds	r5, r4, #6
   b6bf6:	6148      	str	r0, [r1, #20]
   b6bf8:	e7f3      	b.n	b6be2 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6bfc <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6bfc:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6bfe:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6c00:	b088      	sub	sp, #32
   b6c02:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6c04:	461a      	mov	r2, r3
   b6c06:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6c08:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6c0a:	f7ff fda4 	bl	b6756 <_ZN6AB180510isBitClearEhhb>
   b6c0e:	b1f0      	cbz	r0, b6c4e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6c10:	2308      	movs	r3, #8
   b6c12:	2601      	movs	r6, #1
   b6c14:	4620      	mov	r0, r4
   b6c16:	9600      	str	r6, [sp, #0]
   b6c18:	eb0d 0203 	add.w	r2, sp, r3
   b6c1c:	2100      	movs	r1, #0
   b6c1e:	f7ff fc2f 	bl	b6480 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6c22:	4604      	mov	r4, r0
   b6c24:	b198      	cbz	r0, b6c4e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b6c26:	4632      	mov	r2, r6
   b6c28:	4629      	mov	r1, r5
   b6c2a:	f10d 0009 	add.w	r0, sp, #9
   b6c2e:	f7ff ffbe 	bl	b6bae <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6c32:	a804      	add	r0, sp, #16
   b6c34:	f7ff ff9c 	bl	b6b70 <_ZN6AB180510tmToStringEPK2tm>
   b6c38:	4808      	ldr	r0, [pc, #32]	; (b6c5c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b6c3a:	9a04      	ldr	r2, [sp, #16]
   b6c3c:	4908      	ldr	r1, [pc, #32]	; (b6c60 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b6c3e:	f7fd fb11 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6c42:	a804      	add	r0, sp, #16
   b6c44:	f004 f9c4 	bl	bafd0 <_ZN6StringD1Ev>
}
   b6c48:	4620      	mov	r0, r4
   b6c4a:	b008      	add	sp, #32
   b6c4c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b6c4e:	2224      	movs	r2, #36	; 0x24
   b6c50:	2100      	movs	r1, #0
   b6c52:	4628      	mov	r0, r5
   b6c54:	f006 fdbc 	bl	bd7d0 <memset>
   b6c58:	2400      	movs	r4, #0
   b6c5a:	e7f5      	b.n	b6c48 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b6c5c:	2003e3d8 	.word	0x2003e3d8
   b6c60:	000be85e 	.word	0x000be85e

000b6c64 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b6c64:	b530      	push	{r4, r5, lr}
   b6c66:	b08b      	sub	sp, #44	; 0x2c
   b6c68:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b6c6a:	a901      	add	r1, sp, #4
   b6c6c:	f7ff ffc6 	bl	b6bfc <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b6c70:	4604      	mov	r4, r0
   b6c72:	b120      	cbz	r0, b6c7e <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b6c74:	a801      	add	r0, sp, #4
   b6c76:	f002 f951 	bl	b8f1c <mktime>
   b6c7a:	e9c5 0100 	strd	r0, r1, [r5]
}
   b6c7e:	4620      	mov	r0, r4
   b6c80:	b00b      	add	sp, #44	; 0x2c
   b6c82:	bd30      	pop	{r4, r5, pc}

000b6c84 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b6c84:	230a      	movs	r3, #10
   b6c86:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b6c8a:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6c8e:	fb91 f2f3 	sdiv	r2, r1, r3
   b6c92:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b6c96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b6c9a:	b2c0      	uxtb	r0, r0
   b6c9c:	4770      	bx	lr

000b6c9e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6c9e:	b570      	push	{r4, r5, r6, lr}
   b6ca0:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b6ca2:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6ca4:	460c      	mov	r4, r1
   b6ca6:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6ca8:	f7ff ffec 	bl	b6c84 <_ZN6AB180510valueToBcdEi>
   b6cac:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6cae:	6868      	ldr	r0, [r5, #4]
   b6cb0:	f7ff ffe8 	bl	b6c84 <_ZN6AB180510valueToBcdEi>
   b6cb4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b6cb6:	68a8      	ldr	r0, [r5, #8]
   b6cb8:	f7ff ffe4 	bl	b6c84 <_ZN6AB180510valueToBcdEi>
   b6cbc:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6cbe:	68e8      	ldr	r0, [r5, #12]
   b6cc0:	f7ff ffe0 	bl	b6c84 <_ZN6AB180510valueToBcdEi>
   b6cc4:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6cc6:	6928      	ldr	r0, [r5, #16]
   b6cc8:	3001      	adds	r0, #1
   b6cca:	f7ff ffdb 	bl	b6c84 <_ZN6AB180510valueToBcdEi>
   b6cce:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6cd0:	b92e      	cbnz	r6, b6cde <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6cd2:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6cd4:	69a8      	ldr	r0, [r5, #24]
   b6cd6:	f7ff ffd5 	bl	b6c84 <_ZN6AB180510valueToBcdEi>
   b6cda:	7030      	strb	r0, [r6, #0]
}
   b6cdc:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6cde:	696a      	ldr	r2, [r5, #20]
   b6ce0:	2364      	movs	r3, #100	; 0x64
   b6ce2:	fb92 f0f3 	sdiv	r0, r2, r3
   b6ce6:	fb03 2010 	mls	r0, r3, r0, r2
   b6cea:	f7ff ffcb 	bl	b6c84 <_ZN6AB180510valueToBcdEi>
   b6cee:	1da6      	adds	r6, r4, #6
   b6cf0:	7160      	strb	r0, [r4, #5]
   b6cf2:	e7ef      	b.n	b6cd4 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6cf4 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6cf6:	b087      	sub	sp, #28
   b6cf8:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6cfa:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6cfc:	4616      	mov	r6, r2
   b6cfe:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6d00:	f7ff ff36 	bl	b6b70 <_ZN6AB180510tmToStringEPK2tm>
   b6d04:	481e      	ldr	r0, [pc, #120]	; (b6d80 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6d06:	9a02      	ldr	r2, [sp, #8]
   b6d08:	491e      	ldr	r1, [pc, #120]	; (b6d84 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b6d0a:	f7fd faab 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6d0e:	a802      	add	r0, sp, #8
   b6d10:	f004 f95e 	bl	bafd0 <_ZN6StringD1Ev>
    if (lock) {
   b6d14:	b116      	cbz	r6, b6d1c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b6d16:	6868      	ldr	r0, [r5, #4]
   b6d18:	f002 fb86 	bl	b9428 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6d1c:	4620      	mov	r0, r4
   b6d1e:	2201      	movs	r2, #1
   b6d20:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6d24:	2700      	movs	r7, #0
   b6d26:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b6d2a:	f7ff ffb8 	bl	b6c9e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6d2e:	2301      	movs	r3, #1
   b6d30:	461a      	mov	r2, r3
   b6d32:	2110      	movs	r1, #16
   b6d34:	4628      	mov	r0, r5
   b6d36:	f7ff fd8d 	bl	b6854 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b6d3a:	4604      	mov	r4, r0
   b6d3c:	b1e8      	cbz	r0, b6d7a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b6d3e:	2308      	movs	r3, #8
   b6d40:	9700      	str	r7, [sp, #0]
   b6d42:	eb0d 0203 	add.w	r2, sp, r3
   b6d46:	4639      	mov	r1, r7
   b6d48:	4628      	mov	r0, r5
   b6d4a:	f7ff fc3b 	bl	b65c4 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b6d4e:	4604      	mov	r4, r0
   b6d50:	b160      	cbz	r0, b6d6c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6d52:	2301      	movs	r3, #1
   b6d54:	461a      	mov	r2, r3
   b6d56:	2110      	movs	r1, #16
   b6d58:	4628      	mov	r0, r5
   b6d5a:	f7ff fd1a 	bl	b6792 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b6d5e:	b116      	cbz	r6, b6d66 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b6d60:	6868      	ldr	r0, [r5, #4]
   b6d62:	f002 fb6a 	bl	b943a <_ZN7TwoWire6unlockEv>
}
   b6d66:	4620      	mov	r0, r4
   b6d68:	b007      	add	sp, #28
   b6d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b6d6c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b6d70:	4905      	ldr	r1, [pc, #20]	; (b6d88 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b6d72:	4803      	ldr	r0, [pc, #12]	; (b6d80 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6d74:	f7ff fb54 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
   b6d78:	e7f1      	b.n	b6d5e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b6d7a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b6d7e:	e7f7      	b.n	b6d70 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b6d80:	2003e3d8 	.word	0x2003e3d8
   b6d84:	000be86c 	.word	0x000be86c
   b6d88:	000be87a 	.word	0x000be87a

000b6d8c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6d8c:	b513      	push	{r0, r1, r4, lr}
   b6d8e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6d90:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6d92:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b6d96:	f006 fccd 	bl	bd734 <gmtime>
    return setRtcFromTm(tm, lock);
   b6d9a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6d9e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6da0:	4620      	mov	r0, r4
   b6da2:	f7ff ffa7 	bl	b6cf4 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b6da6:	b002      	add	sp, #8
   b6da8:	bd10      	pop	{r4, pc}
	...

000b6dac <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6dae:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6db0:	b089      	sub	sp, #36	; 0x24
   b6db2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6db4:	bb75      	cbnz	r5, b6e14 <_ZN6AB18054loopEv+0x68>
   b6db6:	f004 fbf1 	bl	bb59c <_ZN9TimeClass7isValidEv>
   b6dba:	b358      	cbz	r0, b6e14 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b6dbc:	2600      	movs	r6, #0
   b6dbe:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6dc0:	a904      	add	r1, sp, #16
   b6dc2:	4628      	mov	r0, r5
        tm = 0;
   b6dc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6dc8:	f001 ffd0 	bl	b8d6c <spark_sync_time_last>
   b6dcc:	b310      	cbz	r0, b6e14 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6dce:	2501      	movs	r5, #1
   b6dd0:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6dd2:	f004 fc00 	bl	bb5d6 <_ZN9TimeClass3nowEv>
   b6dd6:	17c3      	asrs	r3, r0, #31
   b6dd8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6ddc:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6dde:	9500      	str	r5, [sp, #0]
   b6de0:	4620      	mov	r0, r4
   b6de2:	f7ff ffd3 	bl	b6d8c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6de6:	a902      	add	r1, sp, #8
   b6de8:	4620      	mov	r0, r4
        time = 0;
   b6dea:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6dee:	f7ff ff39 	bl	b6c64 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6df2:	4b13      	ldr	r3, [pc, #76]	; (b6e40 <_ZN6AB18054loopEv+0x94>)
   b6df4:	4913      	ldr	r1, [pc, #76]	; (b6e44 <_ZN6AB18054loopEv+0x98>)
   b6df6:	681b      	ldr	r3, [r3, #0]
   b6df8:	9300      	str	r3, [sp, #0]
   b6dfa:	a804      	add	r0, sp, #16
   b6dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6e00:	f004 fb8a 	bl	bb518 <_ZN9TimeClass6formatExPKc>
   b6e04:	4810      	ldr	r0, [pc, #64]	; (b6e48 <_ZN6AB18054loopEv+0x9c>)
   b6e06:	9a04      	ldr	r2, [sp, #16]
   b6e08:	4910      	ldr	r1, [pc, #64]	; (b6e4c <_ZN6AB18054loopEv+0xa0>)
   b6e0a:	f7fd fa2b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6e0e:	a804      	add	r0, sp, #16
   b6e10:	f004 f8de 	bl	bafd0 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6e14:	6963      	ldr	r3, [r4, #20]
   b6e16:	b18b      	cbz	r3, b6e3c <_ZN6AB18054loopEv+0x90>
   b6e18:	f001 fd02 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6e1c:	6923      	ldr	r3, [r4, #16]
   b6e1e:	1ac0      	subs	r0, r0, r3
   b6e20:	6963      	ldr	r3, [r4, #20]
   b6e22:	4298      	cmp	r0, r3
   b6e24:	d30a      	bcc.n	b6e3c <_ZN6AB18054loopEv+0x90>
   b6e26:	f001 fcfb 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b6e2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6e2e:	6120      	str	r0, [r4, #16]
            setWDT();
   b6e30:	4620      	mov	r0, r4
}
   b6e32:	b009      	add	sp, #36	; 0x24
   b6e34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6e38:	f7ff bc0c 	b.w	b6654 <_ZN6AB18056setWDTEi>
}
   b6e3c:	b009      	add	sp, #36	; 0x24
   b6e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6e40:	2003dec8 	.word	0x2003dec8
   b6e44:	2003e6a8 	.word	0x2003e6a8
   b6e48:	2003e3d8 	.word	0x2003e3d8
   b6e4c:	000be895 	.word	0x000be895

000b6e50 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6e50:	b530      	push	{r4, r5, lr}
   b6e52:	4604      	mov	r4, r0
   b6e54:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b6e56:	b111      	cbz	r1, b6e5e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6e58:	6840      	ldr	r0, [r0, #4]
   b6e5a:	f002 fa93 	bl	b9384 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b6e5e:	4620      	mov	r0, r4
   b6e60:	f7ff fb64 	bl	b652c <_ZN6AB180510detectChipEv>
   b6e64:	ad06      	add	r5, sp, #24
   b6e66:	2800      	cmp	r0, #0
   b6e68:	d037      	beq.n	b6eda <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	f7ff fc9c 	bl	b67a8 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6e70:	2301      	movs	r3, #1
   b6e72:	461a      	mov	r2, r3
   b6e74:	2110      	movs	r1, #16
   b6e76:	4620      	mov	r0, r4
   b6e78:	f7ff fc6d 	bl	b6756 <_ZN6AB180510isBitClearEhhb>
   b6e7c:	b1d8      	cbz	r0, b6eb6 <_ZN6AB18055setupEb+0x66>
   b6e7e:	f004 fb8d 	bl	bb59c <_ZN9TimeClass7isValidEv>
   b6e82:	b9c0      	cbnz	r0, b6eb6 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6e84:	a902      	add	r1, sp, #8
   b6e86:	4620      	mov	r0, r4
   b6e88:	f7ff feec 	bl	b6c64 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6e90:	f004 fa89 	bl	bb3a6 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6e94:	4b13      	ldr	r3, [pc, #76]	; (b6ee4 <_ZN6AB18055setupEb+0x94>)
   b6e96:	4914      	ldr	r1, [pc, #80]	; (b6ee8 <_ZN6AB18055setupEb+0x98>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	9300      	str	r3, [sp, #0]
   b6e9c:	4628      	mov	r0, r5
   b6e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6ea2:	f004 fb39 	bl	bb518 <_ZN9TimeClass6formatExPKc>
   b6ea6:	4811      	ldr	r0, [pc, #68]	; (b6eec <_ZN6AB18055setupEb+0x9c>)
   b6ea8:	9a06      	ldr	r2, [sp, #24]
   b6eaa:	4911      	ldr	r1, [pc, #68]	; (b6ef0 <_ZN6AB18055setupEb+0xa0>)
   b6eac:	f7fd f9da 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6eb0:	4628      	mov	r0, r5
   b6eb2:	f004 f88d 	bl	bafd0 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6eb6:	4b0f      	ldr	r3, [pc, #60]	; (b6ef4 <_ZN6AB18055setupEb+0xa4>)
   b6eb8:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6eba:	4b0f      	ldr	r3, [pc, #60]	; (b6ef8 <_ZN6AB18055setupEb+0xa8>)
   b6ebc:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6ebe:	4b0f      	ldr	r3, [pc, #60]	; (b6efc <_ZN6AB18055setupEb+0xac>)
   b6ec0:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6ec2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6ec6:	2300      	movs	r3, #0
   b6ec8:	a802      	add	r0, sp, #8
   b6eca:	9500      	str	r5, [sp, #0]
   b6ecc:	f7fd fde2 	bl	b4a94 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6ed0:	4628      	mov	r0, r5
   b6ed2:	f7fd f97d 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
}
   b6ed6:	b00b      	add	sp, #44	; 0x2c
   b6ed8:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6eda:	4909      	ldr	r1, [pc, #36]	; (b6f00 <_ZN6AB18055setupEb+0xb0>)
   b6edc:	4803      	ldr	r0, [pc, #12]	; (b6eec <_ZN6AB18055setupEb+0x9c>)
   b6ede:	f7ff fa9f 	bl	b6420 <_ZNK5spark6Logger5errorEPKcz>
   b6ee2:	e7e8      	b.n	b6eb6 <_ZN6AB18055setupEb+0x66>
   b6ee4:	2003dec8 	.word	0x2003dec8
   b6ee8:	2003e6a8 	.word	0x2003e6a8
   b6eec:	2003e3d8 	.word	0x2003e3d8
   b6ef0:	000be8ab 	.word	0x000be8ab
   b6ef4:	000b66d9 	.word	0x000b66d9
   b6ef8:	000b417f 	.word	0x000b417f
   b6efc:	000b416b 	.word	0x000b416b
   b6f00:	000be8c8 	.word	0x000be8c8

000b6f04 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6f04:	4b01      	ldr	r3, [pc, #4]	; (b6f0c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6f06:	4a02      	ldr	r2, [pc, #8]	; (b6f10 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6f08:	601a      	str	r2, [r3, #0]
}
   b6f0a:	4770      	bx	lr
   b6f0c:	2003e3d8 	.word	0x2003e3d8
   b6f10:	000be8e0 	.word	0x000be8e0

000b6f14 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b6f14:	4770      	bx	lr

000b6f16 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b6f16:	b510      	push	{r4, lr}
}
   b6f18:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b6f1a:	4604      	mov	r4, r0
}
   b6f1c:	f7fd f8bf 	bl	b409e <_ZdlPvj>
   b6f20:	4620      	mov	r0, r4
   b6f22:	bd10      	pop	{r4, pc}

000b6f24 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b6f24:	6803      	ldr	r3, [r0, #0]
   b6f26:	b2c9      	uxtb	r1, r1
   b6f28:	689b      	ldr	r3, [r3, #8]
   b6f2a:	4718      	bx	r3

000b6f2c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b6f2c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b6f2e:	4d03      	ldr	r5, [pc, #12]	; (b6f3c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6f30:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b6f34:	e9c0 5100 	strd	r5, r1, [r0]
}
   b6f38:	bd30      	pop	{r4, r5, pc}
   b6f3a:	bf00      	nop
   b6f3c:	000be90c 	.word	0x000be90c

000b6f40 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b6f40:	6840      	ldr	r0, [r0, #4]
   b6f42:	f002 ba1f 	b.w	b9384 <_ZN7TwoWire5beginEv>

000b6f46 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6f46:	b510      	push	{r4, lr}
   b6f48:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b6f4a:	6800      	ldr	r0, [r0, #0]
   b6f4c:	f002 fa75 	bl	b943a <_ZN7TwoWire6unlockEv>
   b6f50:	4620      	mov	r0, r4
   b6f52:	bd10      	pop	{r4, pc}

000b6f54 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6f54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6f58:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6f5a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6f5c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6f5e:	460d      	mov	r5, r1
   b6f60:	4616      	mov	r6, r2
   b6f62:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b6f64:	f002 fa60 	bl	b9428 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6f68:	b1a7      	cbz	r7, b6f94 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6f6a:	68e1      	ldr	r1, [r4, #12]
   b6f6c:	6860      	ldr	r0, [r4, #4]
   b6f6e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6f72:	f002 fa3a 	bl	b93ea <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6f76:	0a29      	lsrs	r1, r5, #8
   b6f78:	6860      	ldr	r0, [r4, #4]
   b6f7a:	f7ff ffd3 	bl	b6f24 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6f7e:	4629      	mov	r1, r5
   b6f80:	6860      	ldr	r0, [r4, #4]
   b6f82:	f7ff ffcf 	bl	b6f24 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b6f86:	6860      	ldr	r0, [r4, #4]
   b6f88:	2100      	movs	r1, #0
   b6f8a:	f002 fa49 	bl	b9420 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6f8e:	b148      	cbz	r0, b6fa4 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6f90:	2400      	movs	r4, #0
   b6f92:	e000      	b.n	b6f96 <_ZN6MB85RC8readDataEjPhj+0x42>
   b6f94:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6f96:	a801      	add	r0, sp, #4
   b6f98:	f7ff ffd5 	bl	b6f46 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b6f9c:	4620      	mov	r0, r4
   b6f9e:	b003      	add	sp, #12
   b6fa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b6fa4:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b6fa6:	7b21      	ldrb	r1, [r4, #12]
   b6fa8:	6860      	ldr	r0, [r4, #4]
   b6faa:	46b8      	mov	r8, r7
   b6fac:	bf28      	it	cs
   b6fae:	f04f 0820 	movcs.w	r8, #32
   b6fb2:	2301      	movs	r3, #1
   b6fb4:	4642      	mov	r2, r8
   b6fb6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6fba:	f002 fa00 	bl	b93be <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b6fbe:	f004 fd73 	bl	bbaa8 <_Z19__fetch_global_Wirev>
   b6fc2:	6803      	ldr	r3, [r0, #0]
   b6fc4:	691b      	ldr	r3, [r3, #16]
   b6fc6:	4798      	blx	r3
   b6fc8:	4540      	cmp	r0, r8
   b6fca:	dbe1      	blt.n	b6f90 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b6fcc:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6fd0:	f004 fd6a 	bl	bbaa8 <_Z19__fetch_global_Wirev>
   b6fd4:	6803      	ldr	r3, [r0, #0]
   b6fd6:	695b      	ldr	r3, [r3, #20]
   b6fd8:	4798      	blx	r3
   b6fda:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b6fde:	454e      	cmp	r6, r9
   b6fe0:	d1f6      	bne.n	b6fd0 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6fe2:	4445      	add	r5, r8
				dataLen--;
   b6fe4:	eba7 0708 	sub.w	r7, r7, r8
   b6fe8:	e7be      	b.n	b6f68 <_ZN6MB85RC8readDataEjPhj+0x14>

000b6fea <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6fea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6fee:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6ff0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6ff2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6ff4:	460e      	mov	r6, r1
   b6ff6:	4690      	mov	r8, r2
   b6ff8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6ffa:	f002 fa15 	bl	b9428 <_ZN7TwoWire4lockEv>
   b6ffe:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b7002:	f1b9 0f00 	cmp.w	r9, #0
   b7006:	d02a      	beq.n	b705e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b7008:	b34d      	cbz	r5, b705e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b700a:	68e1      	ldr	r1, [r4, #12]
   b700c:	6860      	ldr	r0, [r4, #4]
   b700e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b7012:	f002 f9ea 	bl	b93ea <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b7016:	0a31      	lsrs	r1, r6, #8
   b7018:	6860      	ldr	r0, [r4, #4]
   b701a:	f7ff ff83 	bl	b6f24 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b701e:	6860      	ldr	r0, [r4, #4]
   b7020:	4631      	mov	r1, r6
   b7022:	f7ff ff7f 	bl	b6f24 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7026:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b702a:	4647      	mov	r7, r8
   b702c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b7030:	6860      	ldr	r0, [r4, #4]
   b7032:	f817 1b01 	ldrb.w	r1, [r7], #1
   b7036:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b7038:	3d01      	subs	r5, #1
				wire.write(*data);
   b703a:	689b      	ldr	r3, [r3, #8]
   b703c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b703e:	4555      	cmp	r5, sl
   b7040:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b7044:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b7046:	d001      	beq.n	b704c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b7048:	2d00      	cmp	r5, #0
   b704a:	d1f1      	bne.n	b7030 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b704c:	6860      	ldr	r0, [r4, #4]
   b704e:	2101      	movs	r1, #1
   b7050:	f002 f9e6 	bl	b9420 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b7054:	2800      	cmp	r0, #0
   b7056:	d0d7      	beq.n	b7008 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b7058:	f04f 0900 	mov.w	r9, #0
   b705c:	e7d1      	b.n	b7002 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b705e:	a801      	add	r0, sp, #4
   b7060:	f7ff ff71 	bl	b6f46 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b7064:	4648      	mov	r0, r9
   b7066:	b003      	add	sp, #12
   b7068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b706c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b706c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7070:	b08b      	sub	sp, #44	; 0x2c
   b7072:	460e      	mov	r6, r1
   b7074:	4615      	mov	r5, r2
   b7076:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b7078:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b707a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b707c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b707e:	f002 f9d3 	bl	b9428 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b7082:	42ae      	cmp	r6, r5
   b7084:	d229      	bcs.n	b70da <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b7086:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b7088:	4425      	add	r5, r4
			while(numBytes > 0) {
   b708a:	b18c      	cbz	r4, b70b0 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b708c:	2c1e      	cmp	r4, #30
   b708e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b7090:	f8d8 3000 	ldr.w	r3, [r8]
   b7094:	bf28      	it	cs
   b7096:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b7098:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b709a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b709e:	aa02      	add	r2, sp, #8
   b70a0:	463b      	mov	r3, r7
   b70a2:	4631      	mov	r1, r6
   b70a4:	4640      	mov	r0, r8
				framAddrTo -= count;
   b70a6:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b70a8:	47c8      	blx	r9
				if (!result) {
   b70aa:	b948      	cbnz	r0, b70c0 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b70ac:	2400      	movs	r4, #0
   b70ae:	e000      	b.n	b70b2 <_ZN6MB85RC8moveDataEjjj+0x46>
   b70b0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b70b2:	a801      	add	r0, sp, #4
   b70b4:	f7ff ff47 	bl	b6f46 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b70b8:	4620      	mov	r0, r4
   b70ba:	b00b      	add	sp, #44	; 0x2c
   b70bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b70c0:	f8d8 3000 	ldr.w	r3, [r8]
   b70c4:	aa02      	add	r2, sp, #8
   b70c6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b70ca:	4629      	mov	r1, r5
   b70cc:	463b      	mov	r3, r7
   b70ce:	4640      	mov	r0, r8
   b70d0:	47c8      	blx	r9
				if (!result) {
   b70d2:	2800      	cmp	r0, #0
   b70d4:	d0ea      	beq.n	b70ac <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b70d6:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b70d8:	e7d7      	b.n	b708a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b70da:	d9e9      	bls.n	b70b0 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b70dc:	2c00      	cmp	r4, #0
   b70de:	d0e7      	beq.n	b70b0 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b70e0:	f8d8 3000 	ldr.w	r3, [r8]
   b70e4:	2c1e      	cmp	r4, #30
   b70e6:	4627      	mov	r7, r4
   b70e8:	bf28      	it	cs
   b70ea:	271e      	movcs	r7, #30
   b70ec:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b70f0:	aa02      	add	r2, sp, #8
   b70f2:	463b      	mov	r3, r7
   b70f4:	4631      	mov	r1, r6
   b70f6:	4640      	mov	r0, r8
   b70f8:	47c8      	blx	r9
				if (!result) {
   b70fa:	2800      	cmp	r0, #0
   b70fc:	d0d6      	beq.n	b70ac <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b70fe:	f8d8 3000 	ldr.w	r3, [r8]
   b7102:	aa02      	add	r2, sp, #8
   b7104:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b7108:	4629      	mov	r1, r5
   b710a:	463b      	mov	r3, r7
   b710c:	4640      	mov	r0, r8
   b710e:	47c8      	blx	r9
				if (!result) {
   b7110:	2800      	cmp	r0, #0
   b7112:	d0cb      	beq.n	b70ac <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b7114:	443e      	add	r6, r7
				framAddrTo += count;
   b7116:	443d      	add	r5, r7
				numBytes -= count;
   b7118:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b711a:	e7df      	b.n	b70dc <_ZN6MB85RC8moveDataEjjj+0x70>

000b711c <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b711c:	6001      	str	r1, [r0, #0]
   b711e:	7102      	strb	r2, [r0, #4]
{
}
   b7120:	4770      	bx	lr

000b7122 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b7122:	6800      	ldr	r0, [r0, #0]
   b7124:	6803      	ldr	r3, [r0, #0]
   b7126:	68db      	ldr	r3, [r3, #12]
   b7128:	4718      	bx	r3

000b712a <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b712a:	6800      	ldr	r0, [r0, #0]
   b712c:	6803      	ldr	r3, [r0, #0]
   b712e:	6a1b      	ldr	r3, [r3, #32]
   b7130:	4718      	bx	r3

000b7132 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b7132:	6800      	ldr	r0, [r0, #0]
   b7134:	6803      	ldr	r3, [r0, #0]
   b7136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7138:	4718      	bx	r3

000b713a <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b713a:	7900      	ldrb	r0, [r0, #4]
   b713c:	4770      	bx	lr

000b713e <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b713e:	6800      	ldr	r0, [r0, #0]
   b7140:	6803      	ldr	r3, [r0, #0]
   b7142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7144:	4718      	bx	r3

000b7146 <_ZN10RHDatagram6sendtoEPhhh>:
{
   b7146:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7148:	4605      	mov	r5, r0
   b714a:	460c      	mov	r4, r1
    setHeaderTo(address);
   b714c:	4619      	mov	r1, r3
{
   b714e:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b7150:	f7ff fff5 	bl	b713e <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b7154:	6828      	ldr	r0, [r5, #0]
   b7156:	9a01      	ldr	r2, [sp, #4]
   b7158:	6803      	ldr	r3, [r0, #0]
   b715a:	695b      	ldr	r3, [r3, #20]
   b715c:	4621      	mov	r1, r4
}
   b715e:	b003      	add	sp, #12
   b7160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b7164:	4718      	bx	r3

000b7166 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b7166:	6800      	ldr	r0, [r0, #0]
   b7168:	6803      	ldr	r3, [r0, #0]
   b716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b716c:	4718      	bx	r3

000b716e <_ZN10RHDatagram14setThisAddressEh>:
{
   b716e:	b538      	push	{r3, r4, r5, lr}
   b7170:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b7172:	6800      	ldr	r0, [r0, #0]
   b7174:	6803      	ldr	r3, [r0, #0]
{
   b7176:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b7178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b717a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b717c:	4629      	mov	r1, r5
   b717e:	4620      	mov	r0, r4
   b7180:	f7ff fff1 	bl	b7166 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b7184:	7125      	strb	r5, [r4, #4]
}
   b7186:	bd38      	pop	{r3, r4, r5, pc}

000b7188 <_ZN10RHDatagram4initEv>:
{
   b7188:	b538      	push	{r3, r4, r5, lr}
   b718a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b718c:	6800      	ldr	r0, [r0, #0]
   b718e:	6803      	ldr	r3, [r0, #0]
   b7190:	689b      	ldr	r3, [r3, #8]
   b7192:	4798      	blx	r3
    if (ret)
   b7194:	4605      	mov	r5, r0
   b7196:	b118      	cbz	r0, b71a0 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b7198:	7921      	ldrb	r1, [r4, #4]
   b719a:	4620      	mov	r0, r4
   b719c:	f7ff ffe7 	bl	b716e <_ZN10RHDatagram14setThisAddressEh>
}
   b71a0:	4628      	mov	r0, r5
   b71a2:	bd38      	pop	{r3, r4, r5, pc}

000b71a4 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b71a4:	6800      	ldr	r0, [r0, #0]
   b71a6:	6803      	ldr	r3, [r0, #0]
   b71a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71aa:	4718      	bx	r3

000b71ac <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b71ac:	6800      	ldr	r0, [r0, #0]
   b71ae:	6803      	ldr	r3, [r0, #0]
   b71b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b71b2:	4718      	bx	r3

000b71b4 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b71b4:	6800      	ldr	r0, [r0, #0]
   b71b6:	6803      	ldr	r3, [r0, #0]
   b71b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b71ba:	4718      	bx	r3

000b71bc <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b71bc:	6800      	ldr	r0, [r0, #0]
   b71be:	6803      	ldr	r3, [r0, #0]
   b71c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b71c2:	4718      	bx	r3

000b71c4 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b71c4:	6800      	ldr	r0, [r0, #0]
   b71c6:	6803      	ldr	r3, [r0, #0]
   b71c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b71ca:	4718      	bx	r3

000b71cc <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b71cc:	6800      	ldr	r0, [r0, #0]
   b71ce:	6803      	ldr	r3, [r0, #0]
   b71d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b71d2:	4718      	bx	r3

000b71d4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b71d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b71d8:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b71da:	6800      	ldr	r0, [r0, #0]
{
   b71dc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b71de:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b71e0:	6803      	ldr	r3, [r0, #0]
   b71e2:	691b      	ldr	r3, [r3, #16]
{
   b71e4:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b71e8:	4798      	blx	r3
   b71ea:	4605      	mov	r5, r0
   b71ec:	b1c8      	cbz	r0, b7222 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b71ee:	b11e      	cbz	r6, b71f8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b71f0:	4620      	mov	r0, r4
   b71f2:	f7ff ffe3 	bl	b71bc <_ZN10RHDatagram10headerFromEv>
   b71f6:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b71f8:	f1b9 0f00 	cmp.w	r9, #0
   b71fc:	d004      	beq.n	b7208 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b71fe:	4620      	mov	r0, r4
   b7200:	f7ff ffd8 	bl	b71b4 <_ZN10RHDatagram8headerToEv>
   b7204:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b7208:	f1b8 0f00 	cmp.w	r8, #0
   b720c:	d004      	beq.n	b7218 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b720e:	4620      	mov	r0, r4
   b7210:	f7ff ffd8 	bl	b71c4 <_ZN10RHDatagram8headerIdEv>
   b7214:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b7218:	b11f      	cbz	r7, b7222 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b721a:	4620      	mov	r0, r4
   b721c:	f7ff ffd6 	bl	b71cc <_ZN10RHDatagram11headerFlagsEv>
   b7220:	7038      	strb	r0, [r7, #0]
}
   b7222:	4628      	mov	r0, r5
   b7224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b7228 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b7228:	2001      	movs	r0, #1
   b722a:	4770      	bx	lr

000b722c <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b722c:	7903      	ldrb	r3, [r0, #4]
   b722e:	2b03      	cmp	r3, #3
   b7230:	d0fc      	beq.n	b722c <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b7232:	2001      	movs	r0, #1
   b7234:	4770      	bx	lr

000b7236 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b7236:	2000      	movs	r0, #0
   b7238:	4770      	bx	lr

000b723a <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b723a:	7181      	strb	r1, [r0, #6]
}
   b723c:	4770      	bx	lr

000b723e <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b723e:	7141      	strb	r1, [r0, #5]
}
   b7240:	4770      	bx	lr

000b7242 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b7242:	72c1      	strb	r1, [r0, #11]
}
   b7244:	4770      	bx	lr

000b7246 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b7246:	7301      	strb	r1, [r0, #12]
}
   b7248:	4770      	bx	lr

000b724a <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b724a:	7341      	strb	r1, [r0, #13]
}
   b724c:	4770      	bx	lr

000b724e <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b724e:	7b83      	ldrb	r3, [r0, #14]
   b7250:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b7254:	4311      	orrs	r1, r2
   b7256:	7381      	strb	r1, [r0, #14]
}
   b7258:	4770      	bx	lr

000b725a <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b725a:	79c0      	ldrb	r0, [r0, #7]
}
   b725c:	4770      	bx	lr

000b725e <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b725e:	7a00      	ldrb	r0, [r0, #8]
}
   b7260:	4770      	bx	lr

000b7262 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b7262:	7a40      	ldrb	r0, [r0, #9]
}
   b7264:	4770      	bx	lr

000b7266 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b7266:	7a80      	ldrb	r0, [r0, #10]
}
   b7268:	4770      	bx	lr

000b726a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b726a:	8a00      	ldrh	r0, [r0, #16]
}
   b726c:	b200      	sxth	r0, r0
   b726e:	4770      	bx	lr

000b7270 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b7270:	7900      	ldrb	r0, [r0, #4]
}
   b7272:	4770      	bx	lr

000b7274 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b7274:	7101      	strb	r1, [r0, #4]
}
   b7276:	4770      	bx	lr

000b7278 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b7278:	8a40      	ldrh	r0, [r0, #18]
}
   b727a:	b280      	uxth	r0, r0
   b727c:	4770      	bx	lr

000b727e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b727e:	8a80      	ldrh	r0, [r0, #20]
}
   b7280:	b280      	uxth	r0, r0
   b7282:	4770      	bx	lr

000b7284 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b7284:	8ac0      	ldrh	r0, [r0, #22]
}
   b7286:	b280      	uxth	r0, r0
   b7288:	4770      	bx	lr

000b728a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b728a:	b538      	push	{r3, r4, r5, lr}
   b728c:	4605      	mov	r5, r0
   b728e:	460c      	mov	r4, r1
    while (!available())
   b7290:	682b      	ldr	r3, [r5, #0]
   b7292:	4628      	mov	r0, r5
   b7294:	68db      	ldr	r3, [r3, #12]
   b7296:	4798      	blx	r3
   b7298:	b928      	cbnz	r0, b72a6 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b729a:	2c00      	cmp	r4, #0
   b729c:	d0f8      	beq.n	b7290 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b729e:	4620      	mov	r0, r4
   b72a0:	f001 fe44 	bl	b8f2c <delay>
   b72a4:	e7f4      	b.n	b7290 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b72a6:	bd38      	pop	{r3, r4, r5, pc}

000b72a8 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b72a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72aa:	4605      	mov	r5, r0
   b72ac:	460f      	mov	r7, r1
   b72ae:	4614      	mov	r4, r2
   b72b0:	f001 fab6 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
   b72b4:	4606      	mov	r6, r0
   b72b6:	f001 fab3 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b72ba:	1b80      	subs	r0, r0, r6
   b72bc:	42b8      	cmp	r0, r7
   b72be:	d20a      	bcs.n	b72d6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b72c0:	682b      	ldr	r3, [r5, #0]
   b72c2:	4628      	mov	r0, r5
   b72c4:	68db      	ldr	r3, [r3, #12]
   b72c6:	4798      	blx	r3
   b72c8:	b930      	cbnz	r0, b72d8 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b72ca:	2c00      	cmp	r4, #0
   b72cc:	d0f3      	beq.n	b72b6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b72ce:	4620      	mov	r0, r4
   b72d0:	f001 fe2c 	bl	b8f2c <delay>
   b72d4:	e7ef      	b.n	b72b6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b72d6:	2000      	movs	r0, #0
}
   b72d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72da <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b72da:	b570      	push	{r4, r5, r6, lr}
   b72dc:	4604      	mov	r4, r0
   b72de:	460e      	mov	r6, r1
   b72e0:	f001 fa9e 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
   b72e4:	4605      	mov	r5, r0
   b72e6:	f001 fa9b 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b72ea:	1b40      	subs	r0, r0, r5
   b72ec:	42b0      	cmp	r0, r6
   b72ee:	d204      	bcs.n	b72fa <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b72f0:	7923      	ldrb	r3, [r4, #4]
   b72f2:	2b03      	cmp	r3, #3
   b72f4:	d0f7      	beq.n	b72e6 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b72f6:	2001      	movs	r0, #1
}
   b72f8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b72fa:	2000      	movs	r0, #0
   b72fc:	e7fc      	b.n	b72f8 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b72fe <_ZN15RHGenericDriver7waitCADEv>:
{
   b72fe:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b7300:	69c3      	ldr	r3, [r0, #28]
{
   b7302:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b7304:	b1b3      	cbz	r3, b7334 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b7306:	f001 fa8b 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b730a:	2664      	movs	r6, #100	; 0x64
   b730c:	4605      	mov	r5, r0
    while (isChannelActive())
   b730e:	6823      	ldr	r3, [r4, #0]
   b7310:	4620      	mov	r0, r4
   b7312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7314:	4798      	blx	r3
   b7316:	b168      	cbz	r0, b7334 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b7318:	f001 fa82 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b731c:	69e3      	ldr	r3, [r4, #28]
   b731e:	1b40      	subs	r0, r0, r5
   b7320:	4298      	cmp	r0, r3
   b7322:	d809      	bhi.n	b7338 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b7324:	210a      	movs	r1, #10
   b7326:	2001      	movs	r0, #1
   b7328:	f003 fd79 	bl	bae1e <_Z6randomii>
   b732c:	4370      	muls	r0, r6
   b732e:	f001 fdfd 	bl	b8f2c <delay>
    while (isChannelActive())
   b7332:	e7ec      	b.n	b730e <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b7334:	2001      	movs	r0, #1
}
   b7336:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b7338:	2000      	movs	r0, #0
   b733a:	e7fc      	b.n	b7336 <_ZN15RHGenericDriver7waitCADEv+0x38>

000b733c <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b733c:	4a06      	ldr	r2, [pc, #24]	; (b7358 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b733e:	6002      	str	r2, [r0, #0]
   b7340:	21ff      	movs	r1, #255	; 0xff
   b7342:	2200      	movs	r2, #0
   b7344:	7102      	strb	r2, [r0, #4]
   b7346:	7141      	strb	r1, [r0, #5]
   b7348:	8242      	strh	r2, [r0, #18]
   b734a:	72c1      	strb	r1, [r0, #11]
   b734c:	8282      	strh	r2, [r0, #20]
   b734e:	8181      	strh	r1, [r0, #12]
   b7350:	7382      	strb	r2, [r0, #14]
   b7352:	82c2      	strh	r2, [r0, #22]
   b7354:	61c2      	str	r2, [r0, #28]
}
   b7356:	4770      	bx	lr
   b7358:	000be928 	.word	0x000be928

000b735c <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b735c:	4770      	bx	lr

000b735e <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b735e:	4770      	bx	lr

000b7360 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b7360:	4770      	bx	lr

000b7362 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b7362:	4770      	bx	lr

000b7364 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b7364:	4770      	bx	lr

000b7366 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b7366:	7141      	strb	r1, [r0, #5]
}
   b7368:	4770      	bx	lr

000b736a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b736a:	7181      	strb	r1, [r0, #6]
}
   b736c:	4770      	bx	lr

000b736e <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b736e:	7101      	strb	r1, [r0, #4]
}
   b7370:	4770      	bx	lr
	...

000b7374 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b7374:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b7376:	4d03      	ldr	r5, [pc, #12]	; (b7384 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b7378:	6005      	str	r5, [r0, #0]
   b737a:	7101      	strb	r1, [r0, #4]
   b737c:	7142      	strb	r2, [r0, #5]
   b737e:	7183      	strb	r3, [r0, #6]
}
   b7380:	bd30      	pop	{r4, r5, pc}
   b7382:	bf00      	nop
   b7384:	000be9a8 	.word	0x000be9a8

000b7388 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b7388:	4770      	bx	lr

000b738a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b738a:	b510      	push	{r4, lr}
  }
   b738c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b738e:	4604      	mov	r4, r0
  }
   b7390:	f7fc fe85 	bl	b409e <_ZdlPvj>
   b7394:	4620      	mov	r0, r4
   b7396:	bd10      	pop	{r4, pc}

000b7398 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b7398:	b40e      	push	{r1, r2, r3}
   b739a:	b503      	push	{r0, r1, lr}
   b739c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b739e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b73a0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b73a4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b73a6:	f003 fcfe 	bl	bada6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b73aa:	b002      	add	sp, #8
   b73ac:	f85d eb04 	ldr.w	lr, [sp], #4
   b73b0:	b003      	add	sp, #12
   b73b2:	4770      	bx	lr

000b73b4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b73b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b73b6:	4604      	mov	r4, r0
   b73b8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b73ba:	7922      	ldrb	r2, [r4, #4]
   b73bc:	68a3      	ldr	r3, [r4, #8]
   b73be:	b132      	cbz	r2, b73ce <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b73c0:	b9a3      	cbnz	r3, b73ec <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b73c2:	490b      	ldr	r1, [pc, #44]	; (b73f0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b73c4:	b002      	add	sp, #8
   b73c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b73ca:	f003 bbe3 	b.w	bab94 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b73ce:	4a09      	ldr	r2, [pc, #36]	; (b73f4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b73d0:	7b26      	ldrb	r6, [r4, #12]
   b73d2:	4d09      	ldr	r5, [pc, #36]	; (b73f8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b73d4:	4909      	ldr	r1, [pc, #36]	; (b73fc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b73d6:	7b64      	ldrb	r4, [r4, #13]
   b73d8:	2e01      	cmp	r6, #1
   b73da:	bf18      	it	ne
   b73dc:	4629      	movne	r1, r5
   b73de:	e9cd 1400 	strd	r1, r4, [sp]
   b73e2:	4907      	ldr	r1, [pc, #28]	; (b7400 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b73e4:	f7ff ffd8 	bl	b7398 <_ZN5Print6printfEPKcz>
  }
   b73e8:	b002      	add	sp, #8
   b73ea:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b73ec:	4a05      	ldr	r2, [pc, #20]	; (b7404 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b73ee:	e7ef      	b.n	b73d0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b73f0:	000be9e5 	.word	0x000be9e5
   b73f4:	000bed81 	.word	0x000bed81
   b73f8:	000be9e1 	.word	0x000be9e1
   b73fc:	000be9dd 	.word	0x000be9dd
   b7400:	000be9fb 	.word	0x000be9fb
   b7404:	000be9d4 	.word	0x000be9d4

000b7408 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b7408:	b510      	push	{r4, lr}
   b740a:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b740c:	f7ff ffb2 	bl	b7374 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b7410:	4b05      	ldr	r3, [pc, #20]	; (b7428 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b7412:	6023      	str	r3, [r4, #0]
  {
   b7414:	4b05      	ldr	r3, [pc, #20]	; (b742c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b7416:	60a3      	str	r3, [r4, #8]
   b7418:	2301      	movs	r3, #1
   b741a:	7323      	strb	r3, [r4, #12]
   b741c:	2300      	movs	r3, #0
   b741e:	6123      	str	r3, [r4, #16]
   b7420:	82a3      	strh	r3, [r4, #20]
{
}
   b7422:	4620      	mov	r0, r4
   b7424:	bd10      	pop	{r4, pc}
   b7426:	bf00      	nop
   b7428:	000bea34 	.word	0x000bea34
   b742c:	000bea20 	.word	0x000bea20

000b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b7430:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b7432:	4c0b      	ldr	r4, [pc, #44]	; (b7460 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b7434:	7821      	ldrb	r1, [r4, #0]
   b7436:	f3bf 8f5b 	dmb	ish
   b743a:	f011 0101 	ands.w	r1, r1, #1
   b743e:	d10b      	bne.n	b7458 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7440:	4620      	mov	r0, r4
   b7442:	9101      	str	r1, [sp, #4]
   b7444:	f7fc fe3a 	bl	b40bc <__cxa_guard_acquire>
   b7448:	9901      	ldr	r1, [sp, #4]
   b744a:	b128      	cbz	r0, b7458 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b744c:	4805      	ldr	r0, [pc, #20]	; (b7464 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b744e:	f003 fcff 	bl	bae50 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7452:	4620      	mov	r0, r4
   b7454:	f7fc fe37 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b7458:	4802      	ldr	r0, [pc, #8]	; (b7464 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b745a:	b002      	add	sp, #8
   b745c:	bd10      	pop	{r4, pc}
   b745e:	bf00      	nop
   b7460:	2003e3e0 	.word	0x2003e3e0
   b7464:	2003e3e4 	.word	0x2003e3e4

000b7468 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b7468:	b507      	push	{r0, r1, r2, lr}
   b746a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b746c:	f7ff ffe0 	bl	b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7470:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b7472:	b003      	add	sp, #12
   b7474:	f85d eb04 	ldr.w	lr, [sp], #4
   b7478:	f003 bda2 	b.w	bafc0 <_ZN8SPIClass8transferEh>

000b747c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b747c:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b747e:	f7ff ffd7 	bl	b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b7482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7486:	f003 bda1 	b.w	bafcc <_ZN8SPIClass15attachInterruptEv>

000b748a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b748a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b748c:	f7ff ffd0 	bl	b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b7490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7494:	f003 bd9b 	b.w	bafce <_ZN8SPIClass15detachInterruptEv>

000b7498 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b7498:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b749a:	7903      	ldrb	r3, [r0, #4]
   b749c:	2b04      	cmp	r3, #4
   b749e:	d020      	beq.n	b74e2 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b74a0:	2b03      	cmp	r3, #3
   b74a2:	d020      	beq.n	b74e6 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b74a4:	2b02      	cmp	r3, #2
   b74a6:	d020      	beq.n	b74ea <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b74a8:	4a11      	ldr	r2, [pc, #68]	; (b74f0 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b74aa:	4912      	ldr	r1, [pc, #72]	; (b74f4 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b74ac:	2b01      	cmp	r3, #1
   b74ae:	bf18      	it	ne
   b74b0:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b74b2:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b74b4:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b74b6:	3901      	subs	r1, #1
   b74b8:	bf18      	it	ne
   b74ba:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b74bc:	b133      	cbz	r3, b74cc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b74be:	2b01      	cmp	r3, #1
   b74c0:	d004      	beq.n	b74cc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b74c2:	2b02      	cmp	r3, #2
   b74c4:	d002      	beq.n	b74cc <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b74c6:	2b03      	cmp	r3, #3
   b74c8:	bf18      	it	ne
   b74ca:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b74cc:	2400      	movs	r4, #0
   b74ce:	7304      	strb	r4, [r0, #12]
   b74d0:	6102      	str	r2, [r0, #16]
   b74d2:	7501      	strb	r1, [r0, #20]
   b74d4:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b74d6:	f7ff ffab 	bl	b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b74da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b74de:	f003 bcc1 	b.w	bae64 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b74e2:	4a05      	ldr	r2, [pc, #20]	; (b74f8 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b74e4:	e7e5      	b.n	b74b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b74e6:	4a05      	ldr	r2, [pc, #20]	; (b74fc <_ZN13RHHardwareSPI5beginEv+0x64>)
   b74e8:	e7e3      	b.n	b74b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b74ea:	4a05      	ldr	r2, [pc, #20]	; (b7500 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b74ec:	e7e1      	b.n	b74b2 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b74ee:	bf00      	nop
   b74f0:	001e8480 	.word	0x001e8480
   b74f4:	000f4240 	.word	0x000f4240
   b74f8:	00f42400 	.word	0x00f42400
   b74fc:	007a1200 	.word	0x007a1200
   b7500:	003d0900 	.word	0x003d0900

000b7504 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b7504:	b508      	push	{r3, lr}
        instance().end();
   b7506:	f7ff ff93 	bl	b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b750a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b750e:	f003 bcbd 	b.w	bae8c <_ZN8SPIClass3endEv>

000b7512 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b7512:	b510      	push	{r4, lr}
   b7514:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b7516:	f7ff ff8b 	bl	b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b751a:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b751e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7522:	f003 bcdf 	b.w	baee4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7526 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b7526:	b508      	push	{r3, lr}
        instance().endTransaction();
   b7528:	f7ff ff82 	bl	b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b752c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7530:	f003 bcbe 	b.w	baeb0 <_ZN8SPIClass14endTransactionEv>

000b7534 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b7534:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b7536:	f7ff ff7b 	bl	b7430 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b753a:	bd08      	pop	{r3, pc}

000b753c <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b753c:	2300      	movs	r3, #0
   b753e:	4802      	ldr	r0, [pc, #8]	; (b7548 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b7540:	461a      	mov	r2, r3
   b7542:	4619      	mov	r1, r3
   b7544:	f7ff bf60 	b.w	b7408 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b7548:	2003e3ec 	.word	0x2003e3ec

000b754c <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b754c:	2a01      	cmp	r2, #1
   b754e:	d105      	bne.n	b755c <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b7550:	7a00      	ldrb	r0, [r0, #8]
   b7552:	780b      	ldrb	r3, [r1, #0]
   b7554:	1a1b      	subs	r3, r3, r0
   b7556:	4258      	negs	r0, r3
   b7558:	4158      	adcs	r0, r3
   b755a:	4770      	bx	lr
   b755c:	2000      	movs	r0, #0
}
   b755e:	4770      	bx	lr

000b7560 <_ZN6RHMesh5doArpEh>:
{
   b7560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b7564:	4c25      	ldr	r4, [pc, #148]	; (b75fc <_ZN6RHMesh5doArpEh+0x9c>)
   b7566:	2301      	movs	r3, #1
{
   b7568:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b756a:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b756c:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b756e:	2300      	movs	r3, #0
{
   b7570:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b7572:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7574:	9300      	str	r3, [sp, #0]
   b7576:	2203      	movs	r2, #3
   b7578:	23ff      	movs	r3, #255	; 0xff
   b757a:	4621      	mov	r1, r4
{
   b757c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b757e:	f000 fbb7 	bl	b7cf0 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b7582:	b120      	cbz	r0, b758e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b7584:	2500      	movs	r5, #0
}
   b7586:	4628      	mov	r0, r5
   b7588:	b006      	add	sp, #24
   b758a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b758e:	23fa      	movs	r3, #250	; 0xfa
   b7590:	f88d 3017 	strb.w	r3, [sp, #23]
   b7594:	f001 f944 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b7598:	f106 0904 	add.w	r9, r6, #4
   b759c:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b759e:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b75a2:	f001 f93d 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
   b75a6:	1a29      	subs	r1, r5, r0
   b75a8:	2900      	cmp	r1, #0
   b75aa:	ddeb      	ble.n	b7584 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b75ac:	2200      	movs	r2, #0
   b75ae:	b289      	uxth	r1, r1
   b75b0:	4648      	mov	r0, r9
   b75b2:	f7ff fdbe 	bl	b7132 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b75b6:	2800      	cmp	r0, #0
   b75b8:	d0f3      	beq.n	b75a2 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b75ba:	2300      	movs	r3, #0
   b75bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b75c0:	e9cd 3300 	strd	r3, r3, [sp]
   b75c4:	f10d 0217 	add.w	r2, sp, #23
   b75c8:	4621      	mov	r1, r4
   b75ca:	4630      	mov	r0, r6
   b75cc:	f000 fb9a 	bl	b7d04 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b75d0:	4605      	mov	r5, r0
   b75d2:	2800      	cmp	r0, #0
   b75d4:	d0e3      	beq.n	b759e <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b75d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b75da:	2b01      	cmp	r3, #1
   b75dc:	d9df      	bls.n	b759e <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b75de:	f894 a000 	ldrb.w	sl, [r4]
   b75e2:	f1ba 0f02 	cmp.w	sl, #2
   b75e6:	d1da      	bne.n	b759e <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b75e8:	4648      	mov	r0, r9
   b75ea:	f7ff fde7 	bl	b71bc <_ZN10RHDatagram10headerFromEv>
   b75ee:	4653      	mov	r3, sl
   b75f0:	4602      	mov	r2, r0
   b75f2:	4639      	mov	r1, r7
   b75f4:	4630      	mov	r0, r6
   b75f6:	f000 faf3 	bl	b7be0 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b75fa:	e7c4      	b.n	b7586 <_ZN6RHMesh5doArpEh+0x26>
   b75fc:	2003e404 	.word	0x2003e404

000b7600 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b7600:	2a01      	cmp	r2, #1
{
   b7602:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7606:	4607      	mov	r7, r0
   b7608:	460e      	mov	r6, r1
   b760a:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b760c:	d93b      	bls.n	b7686 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b760e:	794d      	ldrb	r5, [r1, #5]
   b7610:	2d02      	cmp	r5, #2
   b7612:	d130      	bne.n	b7676 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b7614:	f100 0804 	add.w	r8, r0, #4
   b7618:	79c9      	ldrb	r1, [r1, #7]
   b761a:	9101      	str	r1, [sp, #4]
   b761c:	4640      	mov	r0, r8
   b761e:	f7ff fdcd 	bl	b71bc <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7622:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b7624:	462b      	mov	r3, r5
   b7626:	4602      	mov	r2, r0
   b7628:	9901      	ldr	r1, [sp, #4]
   b762a:	4638      	mov	r0, r7
   b762c:	f000 fad8 	bl	b7be0 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7630:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b7632:	f106 0308 	add.w	r3, r6, #8
   b7636:	2400      	movs	r4, #0
   b7638:	4622      	mov	r2, r4
   b763a:	4295      	cmp	r5, r2
   b763c:	f104 0401 	add.w	r4, r4, #1
   b7640:	b2e4      	uxtb	r4, r4
   b7642:	d904      	bls.n	b764e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b7644:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7648:	7a39      	ldrb	r1, [r7, #8]
   b764a:	4291      	cmp	r1, r2
   b764c:	d1f4      	bne.n	b7638 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b764e:	f104 0108 	add.w	r1, r4, #8
   b7652:	440e      	add	r6, r1
	while (i < numRoutes)
   b7654:	42a5      	cmp	r5, r4
   b7656:	d916      	bls.n	b7686 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b7658:	f816 1b01 	ldrb.w	r1, [r6], #1
   b765c:	9101      	str	r1, [sp, #4]
   b765e:	4640      	mov	r0, r8
   b7660:	f7ff fdac 	bl	b71bc <_ZN10RHDatagram10headerFromEv>
   b7664:	3401      	adds	r4, #1
   b7666:	4602      	mov	r2, r0
   b7668:	9901      	ldr	r1, [sp, #4]
   b766a:	2302      	movs	r3, #2
   b766c:	4638      	mov	r0, r7
   b766e:	b2e4      	uxtb	r4, r4
   b7670:	f000 fab6 	bl	b7be0 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b7674:	e7ee      	b.n	b7654 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b7676:	2d03      	cmp	r5, #3
   b7678:	d105      	bne.n	b7686 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b767a:	7989      	ldrb	r1, [r1, #6]
}
   b767c:	b002      	add	sp, #8
   b767e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b7682:	f000 ba96 	b.w	b7bb2 <_ZN8RHRouter13deleteRouteToEh>
}
   b7686:	b002      	add	sp, #8
   b7688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b768c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b768c:	b510      	push	{r4, lr}
   b768e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b7690:	f000 fae6 	bl	b7c60 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b7694:	4b01      	ldr	r3, [pc, #4]	; (b769c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b7696:	6023      	str	r3, [r4, #0]
}
   b7698:	4620      	mov	r0, r4
   b769a:	bd10      	pop	{r4, pc}
   b769c:	000bea68 	.word	0x000bea68

000b76a0 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b76a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b76a4:	2af9      	cmp	r2, #249	; 0xf9
{
   b76a6:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b76aa:	4606      	mov	r6, r0
   b76ac:	460f      	mov	r7, r1
   b76ae:	4614      	mov	r4, r2
   b76b0:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b76b2:	d825      	bhi.n	b7700 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b76b4:	2bff      	cmp	r3, #255	; 0xff
   b76b6:	d114      	bne.n	b76e2 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b76b8:	f8df 8048 	ldr.w	r8, [pc, #72]	; b7704 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b76bc:	4640      	mov	r0, r8
   b76be:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b76c0:	4622      	mov	r2, r4
   b76c2:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b76c4:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b76c8:	f006 f85a 	bl	bd780 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b76cc:	1c62      	adds	r2, r4, #1
   b76ce:	f8cd 9020 	str.w	r9, [sp, #32]
   b76d2:	462b      	mov	r3, r5
   b76d4:	4641      	mov	r1, r8
   b76d6:	4630      	mov	r0, r6
   b76d8:	b2d2      	uxtb	r2, r2
}
   b76da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b76de:	f000 bb07 	b.w	b7cf0 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b76e2:	4619      	mov	r1, r3
   b76e4:	f000 fa21 	bl	b7b2a <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b76e8:	2800      	cmp	r0, #0
   b76ea:	d1e5      	bne.n	b76b8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b76ec:	6833      	ldr	r3, [r6, #0]
   b76ee:	4629      	mov	r1, r5
   b76f0:	689b      	ldr	r3, [r3, #8]
   b76f2:	4630      	mov	r0, r6
   b76f4:	4798      	blx	r3
   b76f6:	2800      	cmp	r0, #0
   b76f8:	d1de      	bne.n	b76b8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b76fa:	2002      	movs	r0, #2
}
   b76fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7700:	2001      	movs	r0, #1
   b7702:	e7fb      	b.n	b76fc <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b7704:	2003e404 	.word	0x2003e404

000b7708 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b7708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b770c:	b089      	sub	sp, #36	; 0x24
   b770e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7710:	23fa      	movs	r3, #250	; 0xfa
   b7712:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7716:	f10d 031f 	add.w	r3, sp, #31
   b771a:	9303      	str	r3, [sp, #12]
   b771c:	f10d 031e 	add.w	r3, sp, #30
   b7720:	9302      	str	r3, [sp, #8]
   b7722:	4e5d      	ldr	r6, [pc, #372]	; (b7898 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7724:	f10d 031d 	add.w	r3, sp, #29
   b7728:	9301      	str	r3, [sp, #4]
   b772a:	ab07      	add	r3, sp, #28
   b772c:	9300      	str	r3, [sp, #0]
{     
   b772e:	4689      	mov	r9, r1
   b7730:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7732:	f10d 031b 	add.w	r3, sp, #27
   b7736:	f10d 021a 	add.w	r2, sp, #26
   b773a:	4631      	mov	r1, r6
{     
   b773c:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b7740:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7742:	f000 fadf 	bl	b7d04 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7746:	4604      	mov	r4, r0
   b7748:	b920      	cbnz	r0, b7754 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b774a:	2400      	movs	r4, #0
}
   b774c:	4620      	mov	r0, r4
   b774e:	b009      	add	sp, #36	; 0x24
   b7750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b7754:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b7758:	b373      	cbz	r3, b77b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b775a:	7832      	ldrb	r2, [r6, #0]
   b775c:	bb62      	cbnz	r2, b77b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b775e:	f1b8 0f00 	cmp.w	r8, #0
   b7762:	d003      	beq.n	b776c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b7764:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b7768:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b776c:	f1bb 0f00 	cmp.w	fp, #0
   b7770:	d003      	beq.n	b777a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b7772:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7776:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b777a:	f1ba 0f00 	cmp.w	sl, #0
   b777e:	d003      	beq.n	b7788 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b7780:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b7784:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b7788:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b778a:	b11a      	cbz	r2, b7794 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b778c:	9914      	ldr	r1, [sp, #80]	; 0x50
   b778e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7792:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b7794:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b7796:	b11a      	cbz	r2, b77a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b7798:	9915      	ldr	r1, [sp, #84]	; 0x54
   b779a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b779e:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b77a0:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b77a2:	493e      	ldr	r1, [pc, #248]	; (b789c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b77a4:	3b01      	subs	r3, #1
   b77a6:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b77a8:	429a      	cmp	r2, r3
		*len = msgLen;
   b77aa:	bf88      	it	hi
   b77ac:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b77ae:	783a      	ldrb	r2, [r7, #0]
   b77b0:	4648      	mov	r0, r9
   b77b2:	f005 ffe5 	bl	bd780 <memcpy>
	    return true;
   b77b6:	e7c9      	b.n	b774c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b77b8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b77bc:	2aff      	cmp	r2, #255	; 0xff
   b77be:	d1c4      	bne.n	b774a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b77c0:	2b01      	cmp	r3, #1
   b77c2:	d9c2      	bls.n	b774a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b77c4:	7832      	ldrb	r2, [r6, #0]
   b77c6:	2a01      	cmp	r2, #1
   b77c8:	d1bf      	bne.n	b774a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b77ca:	7a2a      	ldrb	r2, [r5, #8]
   b77cc:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b77d0:	42a2      	cmp	r2, r4
   b77d2:	d0ba      	beq.n	b774a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b77d4:	1edf      	subs	r7, r3, #3
   b77d6:	4932      	ldr	r1, [pc, #200]	; (b78a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b77d8:	b2ff      	uxtb	r7, r7
   b77da:	2300      	movs	r3, #0
   b77dc:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b77e0:	4547      	cmp	r7, r8
   b77e2:	d906      	bls.n	b77f2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b77e4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b77e8:	4282      	cmp	r2, r0
   b77ea:	f103 0301 	add.w	r3, r3, #1
   b77ee:	d1f5      	bne.n	b77dc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b77f0:	e7ab      	b.n	b774a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b77f2:	f105 0904 	add.w	r9, r5, #4
   b77f6:	4648      	mov	r0, r9
   b77f8:	f7ff fce0 	bl	b71bc <_ZN10RHDatagram10headerFromEv>
   b77fc:	2302      	movs	r3, #2
   b77fe:	4602      	mov	r2, r0
   b7800:	4621      	mov	r1, r4
   b7802:	4628      	mov	r0, r5
   b7804:	f000 f9ec 	bl	b7be0 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b7808:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b780c:	b193      	cbz	r3, b7834 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b780e:	4c22      	ldr	r4, [pc, #136]	; (b7898 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b7810:	1ba3      	subs	r3, r4, r6
   b7812:	b2db      	uxtb	r3, r3
   b7814:	429f      	cmp	r7, r3
   b7816:	d90c      	bls.n	b7832 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b7818:	78e1      	ldrb	r1, [r4, #3]
   b781a:	9105      	str	r1, [sp, #20]
   b781c:	4648      	mov	r0, r9
   b781e:	f7ff fccd 	bl	b71bc <_ZN10RHDatagram10headerFromEv>
   b7822:	9905      	ldr	r1, [sp, #20]
   b7824:	4602      	mov	r2, r0
   b7826:	2302      	movs	r3, #2
   b7828:	4628      	mov	r0, r5
   b782a:	f000 f9d9 	bl	b7be0 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b782e:	3401      	adds	r4, #1
   b7830:	e7ee      	b.n	b7810 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b7832:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b7834:	682b      	ldr	r3, [r5, #0]
   b7836:	7872      	ldrb	r2, [r6, #1]
   b7838:	68db      	ldr	r3, [r3, #12]
   b783a:	491a      	ldr	r1, [pc, #104]	; (b78a4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b783c:	4628      	mov	r0, r5
   b783e:	4798      	blx	r3
   b7840:	4604      	mov	r4, r0
   b7842:	b160      	cbz	r0, b785e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b7844:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b7846:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b7848:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b784a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b784e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7852:	4911      	ldr	r1, [pc, #68]	; (b7898 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7854:	9400      	str	r4, [sp, #0]
   b7856:	4628      	mov	r0, r5
   b7858:	f000 fa4a 	bl	b7cf0 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b785c:	e776      	b.n	b774c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b785e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b7862:	4543      	cmp	r3, r8
   b7864:	f67f af71 	bls.w	b774a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b7868:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b786c:	2b00      	cmp	r3, #0
   b786e:	f43f af6c 	beq.w	b774a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b7872:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b7876:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7878:	4907      	ldr	r1, [pc, #28]	; (b7898 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b787a:	443e      	add	r6, r7
		tmpMessageLen++;
   b787c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b787e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7880:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7884:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b7886:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7888:	9300      	str	r3, [sp, #0]
   b788a:	4628      	mov	r0, r5
   b788c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b788e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7892:	f000 f9f7 	bl	b7c84 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b7896:	e759      	b.n	b774c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b7898:	2003e404 	.word	0x2003e404
   b789c:	2003e405 	.word	0x2003e405
   b78a0:	2003e407 	.word	0x2003e407
   b78a4:	2003e406 	.word	0x2003e406

000b78a8 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b78a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b78aa:	b085      	sub	sp, #20
   b78ac:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b78ae:	3004      	adds	r0, #4
{
   b78b0:	460e      	mov	r6, r1
   b78b2:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b78b4:	f7ff fc82 	bl	b71bc <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b78b8:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b78ba:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b78bc:	4631      	mov	r1, r6
   b78be:	4628      	mov	r0, r5
   b78c0:	f000 f94a 	bl	b7b58 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b78c4:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b78c6:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b78c8:	d001      	beq.n	b78ce <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b78ca:	2805      	cmp	r0, #5
   b78cc:	d11b      	bne.n	b7906 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b78ce:	7831      	ldrb	r1, [r6, #0]
   b78d0:	4628      	mov	r0, r5
   b78d2:	f000 f96e 	bl	b7bb2 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b78d6:	7872      	ldrb	r2, [r6, #1]
   b78d8:	7a2b      	ldrb	r3, [r5, #8]
   b78da:	429a      	cmp	r2, r3
   b78dc:	d013      	beq.n	b7906 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b78de:	4c0b      	ldr	r4, [pc, #44]	; (b790c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b78e0:	2303      	movs	r3, #3
   b78e2:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b78e4:	7833      	ldrb	r3, [r6, #0]
   b78e6:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b78e8:	7871      	ldrb	r1, [r6, #1]
   b78ea:	2302      	movs	r3, #2
   b78ec:	463a      	mov	r2, r7
   b78ee:	4628      	mov	r0, r5
   b78f0:	f000 f976 	bl	b7be0 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b78f4:	2300      	movs	r3, #0
   b78f6:	9300      	str	r3, [sp, #0]
   b78f8:	4621      	mov	r1, r4
   b78fa:	7873      	ldrb	r3, [r6, #1]
   b78fc:	2202      	movs	r2, #2
   b78fe:	4628      	mov	r0, r5
   b7900:	f000 f9f6 	bl	b7cf0 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7904:	4604      	mov	r4, r0
}
   b7906:	4620      	mov	r0, r4
   b7908:	b005      	add	sp, #20
   b790a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b790c:	2003e404 	.word	0x2003e404

000b7910 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7910:	b510      	push	{r4, lr}
   b7912:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b7914:	f7ff fc02 	bl	b711c <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7918:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b791a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b791c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b791e:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7920:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b7922:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b7924:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b7926:	f44f 7280 	mov.w	r2, #256	; 0x100
   b792a:	f104 0011 	add.w	r0, r4, #17
   b792e:	f005 ff4f 	bl	bd7d0 <memset>
}
   b7932:	4620      	mov	r0, r4
   b7934:	bd10      	pop	{r4, pc}

000b7936 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b7936:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7938:	4604      	mov	r4, r0
   b793a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b793c:	f7ff fc32 	bl	b71a4 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b7940:	4620      	mov	r0, r4
   b7942:	2200      	movs	r2, #0
   b7944:	2180      	movs	r1, #128	; 0x80
   b7946:	f7ff fc31 	bl	b71ac <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b794a:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b794c:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b794e:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b7952:	f10d 010f 	add.w	r1, sp, #15
   b7956:	2201      	movs	r2, #1
   b7958:	4620      	mov	r0, r4
   b795a:	f7ff fbf4 	bl	b7146 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b795e:	4620      	mov	r0, r4
   b7960:	f7ff fbe3 	bl	b712a <_ZN10RHDatagram14waitPacketSentEv>
}
   b7964:	b004      	add	sp, #16
   b7966:	bd10      	pop	{r4, pc}

000b7968 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b7968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b796c:	7b05      	ldrb	r5, [r0, #12]
   b796e:	3501      	adds	r5, #1
   b7970:	b2ed      	uxtb	r5, r5
{
   b7972:	b087      	sub	sp, #28
   b7974:	4604      	mov	r4, r0
   b7976:	4689      	mov	r9, r1
   b7978:	4692      	mov	sl, r2
   b797a:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b797c:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b797e:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b7980:	7c22      	ldrb	r2, [r4, #16]
   b7982:	463b      	mov	r3, r7
   b7984:	429a      	cmp	r2, r3
   b7986:	f107 0701 	add.w	r7, r7, #1
   b798a:	b2ff      	uxtb	r7, r7
   b798c:	d36b      	bcc.n	b7a66 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b798e:	4629      	mov	r1, r5
   b7990:	4620      	mov	r0, r4
   b7992:	f7ff fc07 	bl	b71a4 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b7996:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b7998:	bf0d      	iteet	eq
   b799a:	22c0      	moveq	r2, #192	; 0xc0
   b799c:	2280      	movne	r2, #128	; 0x80
   b799e:	2140      	movne	r1, #64	; 0x40
   b79a0:	2100      	moveq	r1, #0
   b79a2:	4620      	mov	r0, r4
   b79a4:	f7ff fc02 	bl	b71ac <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b79a8:	4643      	mov	r3, r8
   b79aa:	4652      	mov	r2, sl
   b79ac:	4649      	mov	r1, r9
   b79ae:	4620      	mov	r0, r4
   b79b0:	f7ff fbc9 	bl	b7146 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b79b4:	4620      	mov	r0, r4
   b79b6:	f7ff fbb8 	bl	b712a <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b79ba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b79be:	d054      	beq.n	b7a6a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b79c0:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b79c2:	bf82      	ittt	hi
   b79c4:	68a3      	ldrhi	r3, [r4, #8]
   b79c6:	3301      	addhi	r3, #1
   b79c8:	60a3      	strhi	r3, [r4, #8]
   b79ca:	f000 ff29 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b79ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   b79d2:	4683      	mov	fp, r0
   b79d4:	2000      	movs	r0, #0
   b79d6:	89e6      	ldrh	r6, [r4, #14]
   b79d8:	f003 fa21 	bl	bae1e <_Z6randomii>
   b79dc:	4370      	muls	r0, r6
   b79de:	bf48      	it	mi
   b79e0:	30ff      	addmi	r0, #255	; 0xff
   b79e2:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b79e6:	fa1b f686 	uxtah	r6, fp, r6
   b79ea:	f000 ff19 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
   b79ee:	1a30      	subs	r0, r6, r0
   b79f0:	2800      	cmp	r0, #0
   b79f2:	ddc5      	ble.n	b7980 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b79f4:	b281      	uxth	r1, r0
   b79f6:	2200      	movs	r2, #0
   b79f8:	4620      	mov	r0, r4
   b79fa:	f7ff fb9a 	bl	b7132 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b79fe:	2800      	cmp	r0, #0
   b7a00:	d0f3      	beq.n	b79ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b7a02:	f10d 0317 	add.w	r3, sp, #23
   b7a06:	9302      	str	r3, [sp, #8]
   b7a08:	f10d 0316 	add.w	r3, sp, #22
   b7a0c:	9301      	str	r3, [sp, #4]
   b7a0e:	2200      	movs	r2, #0
   b7a10:	f10d 0315 	add.w	r3, sp, #21
   b7a14:	9300      	str	r3, [sp, #0]
   b7a16:	4611      	mov	r1, r2
   b7a18:	ab05      	add	r3, sp, #20
   b7a1a:	4620      	mov	r0, r4
   b7a1c:	f7ff fbda 	bl	b71d4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7a20:	2800      	cmp	r0, #0
   b7a22:	d0e2      	beq.n	b79ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7a24:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7a28:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b7a2c:	4542      	cmp	r2, r8
   b7a2e:	d10e      	bne.n	b7a4e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b7a30:	f894 c004 	ldrb.w	ip, [r4, #4]
   b7a34:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7a38:	458c      	cmp	ip, r1
   b7a3a:	d108      	bne.n	b7a4e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b7a3c:	2b00      	cmp	r3, #0
   b7a3e:	da08      	bge.n	b7a52 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b7a40:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7a44:	42ab      	cmp	r3, r5
   b7a46:	d1d0      	bne.n	b79ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b7a48:	b007      	add	sp, #28
   b7a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b7a4e:	2b00      	cmp	r3, #0
   b7a50:	dbcb      	blt.n	b79ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b7a52:	18a1      	adds	r1, r4, r2
   b7a54:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7a58:	7c49      	ldrb	r1, [r1, #17]
   b7a5a:	4299      	cmp	r1, r3
   b7a5c:	d1c5      	bne.n	b79ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b7a5e:	4620      	mov	r0, r4
   b7a60:	f7ff ff69 	bl	b7936 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b7a64:	e7c1      	b.n	b79ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b7a66:	2000      	movs	r0, #0
   b7a68:	e7ee      	b.n	b7a48 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b7a6a:	2001      	movs	r0, #1
   b7a6c:	e7ec      	b.n	b7a48 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b7a6e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b7a6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7a72:	b089      	sub	sp, #36	; 0x24
   b7a74:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7a78:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b7a7c:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b7a7e:	4604      	mov	r4, r0
   b7a80:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7a82:	f7ff fb4e 	bl	b7122 <_ZN10RHDatagram9availableEv>
   b7a86:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b7a8a:	b920      	cbnz	r0, b7a96 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b7a8c:	2500      	movs	r5, #0
}
   b7a8e:	4628      	mov	r0, r5
   b7a90:	b009      	add	sp, #36	; 0x24
   b7a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b7a96:	f10d 031f 	add.w	r3, sp, #31
   b7a9a:	9302      	str	r3, [sp, #8]
   b7a9c:	f10d 031e 	add.w	r3, sp, #30
   b7aa0:	9301      	str	r3, [sp, #4]
   b7aa2:	f10d 031d 	add.w	r3, sp, #29
   b7aa6:	9300      	str	r3, [sp, #0]
   b7aa8:	4620      	mov	r0, r4
   b7aaa:	ab07      	add	r3, sp, #28
   b7aac:	f7ff fb92 	bl	b71d4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7ab0:	4605      	mov	r5, r0
   b7ab2:	2800      	cmp	r0, #0
   b7ab4:	d0ea      	beq.n	b7a8c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b7ab6:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b7aba:	2b00      	cmp	r3, #0
   b7abc:	dbe6      	blt.n	b7a8c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b7abe:	7922      	ldrb	r2, [r4, #4]
   b7ac0:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7ac4:	429a      	cmp	r2, r3
   b7ac6:	d106      	bne.n	b7ad6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b7ac8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7acc:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b7ad0:	4620      	mov	r0, r4
   b7ad2:	f7ff ff30 	bl	b7936 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b7ad6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7ada:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b7ade:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7ae2:	f012 0f40 	tst.w	r2, #64	; 0x40
   b7ae6:	440c      	add	r4, r1
   b7ae8:	d002      	beq.n	b7af0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b7aea:	7c60      	ldrb	r0, [r4, #17]
   b7aec:	4298      	cmp	r0, r3
   b7aee:	d0cd      	beq.n	b7a8c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7af0:	b106      	cbz	r6, b7af4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b7af2:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b7af4:	f1b9 0f00 	cmp.w	r9, #0
   b7af8:	d003      	beq.n	b7b02 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b7afa:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b7afe:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b7b02:	f1b8 0f00 	cmp.w	r8, #0
   b7b06:	d001      	beq.n	b7b0c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b7b08:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b7b0c:	b107      	cbz	r7, b7b10 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b7b0e:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b7b10:	7463      	strb	r3, [r4, #17]
		return true;
   b7b12:	e7bc      	b.n	b7a8e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b7b14 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b7b14:	4770      	bx	lr

000b7b16 <_ZN8RHRouter4initEv>:
{
   b7b16:	b510      	push	{r4, lr}
   b7b18:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b7b1a:	3004      	adds	r0, #4
   b7b1c:	f7ff fb34 	bl	b7188 <_ZN10RHDatagram4initEv>
    if (ret)
   b7b20:	b110      	cbz	r0, b7b28 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b7b22:	231e      	movs	r3, #30
   b7b24:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b7b28:	bd10      	pop	{r4, pc}

000b7b2a <_ZN8RHRouter10getRouteToEh>:
{
   b7b2a:	b510      	push	{r4, lr}
   b7b2c:	4602      	mov	r2, r0
   b7b2e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b7b30:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b7b34:	428c      	cmp	r4, r1
   b7b36:	d108      	bne.n	b7b4a <_ZN8RHRouter10getRouteToEh+0x20>
   b7b38:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b7b3c:	b12c      	cbz	r4, b7b4a <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b7b3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7b42:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b7b46:	4418      	add	r0, r3
}
   b7b48:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7b4a:	3301      	adds	r3, #1
   b7b4c:	2b32      	cmp	r3, #50	; 0x32
   b7b4e:	f102 0203 	add.w	r2, r2, #3
   b7b52:	d1ed      	bne.n	b7b30 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b7b54:	2000      	movs	r0, #0
   b7b56:	e7f7      	b.n	b7b48 <_ZN8RHRouter10getRouteToEh+0x1e>

000b7b58 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b7b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7b5a:	780b      	ldrb	r3, [r1, #0]
   b7b5c:	2bff      	cmp	r3, #255	; 0xff
{
   b7b5e:	4605      	mov	r5, r0
   b7b60:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7b62:	d006      	beq.n	b7b72 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b7b64:	4619      	mov	r1, r3
   b7b66:	9201      	str	r2, [sp, #4]
   b7b68:	f7ff ffdf 	bl	b7b2a <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b7b6c:	b158      	cbz	r0, b7b86 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b7b6e:	7843      	ldrb	r3, [r0, #1]
   b7b70:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b7b72:	4621      	mov	r1, r4
   b7b74:	1d28      	adds	r0, r5, #4
   b7b76:	f7ff fef7 	bl	b7968 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b7b7a:	2800      	cmp	r0, #0
   b7b7c:	bf14      	ite	ne
   b7b7e:	2000      	movne	r0, #0
   b7b80:	2005      	moveq	r0, #5
}
   b7b82:	b003      	add	sp, #12
   b7b84:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7b86:	2002      	movs	r0, #2
   b7b88:	e7fb      	b.n	b7b82 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b7b8a <_ZN8RHRouter11deleteRouteEh>:
{
   b7b8a:	b510      	push	{r4, lr}
   b7b8c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b7b90:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b7b92:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b7b96:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b7b9a:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b7b9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7ba2:	4421      	add	r1, r4
   b7ba4:	4420      	add	r0, r4
   b7ba6:	f005 fdeb 	bl	bd780 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b7baa:	2300      	movs	r3, #0
   b7bac:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b7bb0:	bd10      	pop	{r4, pc}

000b7bb2 <_ZN8RHRouter13deleteRouteToEh>:
{
   b7bb2:	b538      	push	{r3, r4, r5, lr}
   b7bb4:	460a      	mov	r2, r1
   b7bb6:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7bb8:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b7bbc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b7bc0:	b2d9      	uxtb	r1, r3
   b7bc2:	5d65      	ldrb	r5, [r4, r5]
   b7bc4:	4295      	cmp	r5, r2
   b7bc6:	d103      	bne.n	b7bd0 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b7bc8:	f7ff ffdf 	bl	b7b8a <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b7bcc:	2001      	movs	r0, #1
}
   b7bce:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7bd0:	3301      	adds	r3, #1
   b7bd2:	2b32      	cmp	r3, #50	; 0x32
   b7bd4:	d1f2      	bne.n	b7bbc <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b7bd6:	2000      	movs	r0, #0
   b7bd8:	e7f9      	b.n	b7bce <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b7bda <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b7bda:	2100      	movs	r1, #0
   b7bdc:	f7ff bfd5 	b.w	b7b8a <_ZN8RHRouter11deleteRouteEh>

000b7be0 <_ZN8RHRouter10addRouteToEhhh>:
{
   b7be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7be2:	4616      	mov	r6, r2
   b7be4:	461f      	mov	r7, r3
   b7be6:	4604      	mov	r4, r0
   b7be8:	460d      	mov	r5, r1
   b7bea:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7bec:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7bf0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7bf4:	5c11      	ldrb	r1, [r2, r0]
   b7bf6:	42a9      	cmp	r1, r5
   b7bf8:	d105      	bne.n	b7c06 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b7bfa:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7bfc:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7c00:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c06:	3301      	adds	r3, #1
   b7c08:	2b32      	cmp	r3, #50	; 0x32
   b7c0a:	d1f1      	bne.n	b7bf0 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b7c0c:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b7c0e:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b7c12:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7c16:	5c11      	ldrb	r1, [r2, r0]
   b7c18:	b919      	cbnz	r1, b7c22 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b7c1a:	4420      	add	r0, r4
   b7c1c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b7c20:	e7ec      	b.n	b7bfc <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c22:	3301      	adds	r3, #1
   b7c24:	2b32      	cmp	r3, #50	; 0x32
   b7c26:	d1f4      	bne.n	b7c12 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b7c28:	4620      	mov	r0, r4
   b7c2a:	f7ff ffd6 	bl	b7bda <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c2e:	4620      	mov	r0, r4
   b7c30:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b7c34:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b7c38:	b92a      	cbnz	r2, b7c46 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b7c3a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b7c3e:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7c42:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c46:	3003      	adds	r0, #3
   b7c48:	4298      	cmp	r0, r3
   b7c4a:	d1f3      	bne.n	b7c34 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b7c4c:	e7da      	b.n	b7c04 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b7c4e <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c4e:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b7c52:	2200      	movs	r2, #0
   b7c54:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7c58:	3003      	adds	r0, #3
   b7c5a:	4298      	cmp	r0, r3
   b7c5c:	d1fa      	bne.n	b7c54 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b7c5e:	4770      	bx	lr

000b7c60 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b7c60:	b510      	push	{r4, lr}
   b7c62:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b7c64:	3004      	adds	r0, #4
   b7c66:	f7ff fe53 	bl	b7910 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b7c6a:	4b05      	ldr	r3, [pc, #20]	; (b7c80 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b7c6c:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7c6e:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b7c72:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7c74:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b7c78:	f7ff ffe9 	bl	b7c4e <_ZN8RHRouter17clearRoutingTableEv>
}
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	bd10      	pop	{r4, pc}
   b7c80:	000bea80 	.word	0x000bea80

000b7c84 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b7c84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7c88:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7c8a:	6840      	ldr	r0, [r0, #4]
{
   b7c8c:	9101      	str	r1, [sp, #4]
   b7c8e:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7c90:	6803      	ldr	r3, [r0, #0]
{
   b7c92:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7c96:	699b      	ldr	r3, [r3, #24]
{
   b7c98:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b7c9c:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7c9e:	4798      	blx	r3
   b7ca0:	f106 0805 	add.w	r8, r6, #5
   b7ca4:	4580      	cmp	r8, r0
   b7ca6:	d81c      	bhi.n	b7ce2 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b7ca8:	4d10      	ldr	r5, [pc, #64]	; (b7cec <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b7caa:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b7cac:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b7cb0:	2300      	movs	r3, #0
   b7cb2:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b7cb4:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b7cb8:	70eb      	strb	r3, [r5, #3]
   b7cba:	1c5a      	adds	r2, r3, #1
   b7cbc:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b7cc0:	1d68      	adds	r0, r5, #5
   b7cc2:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b7cc4:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b7cc6:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b7cca:	f005 fd59 	bl	bd780 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7cce:	6823      	ldr	r3, [r4, #0]
   b7cd0:	685b      	ldr	r3, [r3, #4]
   b7cd2:	fa5f f288 	uxtb.w	r2, r8
   b7cd6:	4629      	mov	r1, r5
   b7cd8:	4620      	mov	r0, r4
}
   b7cda:	b002      	add	sp, #8
   b7cdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7ce0:	4718      	bx	r3
}
   b7ce2:	2001      	movs	r0, #1
   b7ce4:	b002      	add	sp, #8
   b7ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7cea:	bf00      	nop
   b7cec:	2003e4fe 	.word	0x2003e4fe

000b7cf0 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b7cf0:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b7cf2:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7cf6:	9401      	str	r4, [sp, #4]
   b7cf8:	7a04      	ldrb	r4, [r0, #8]
   b7cfa:	9400      	str	r4, [sp, #0]
   b7cfc:	f7ff ffc2 	bl	b7c84 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b7d00:	b002      	add	sp, #8
   b7d02:	bd10      	pop	{r4, pc}

000b7d04 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d08:	b087      	sub	sp, #28
   b7d0a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7d0c:	23ff      	movs	r3, #255	; 0xff
   b7d0e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7d12:	f10d 0317 	add.w	r3, sp, #23
   b7d16:	9302      	str	r3, [sp, #8]
   b7d18:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b7dec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b7d1c:	f10d 0316 	add.w	r3, sp, #22
   b7d20:	9301      	str	r3, [sp, #4]
   b7d22:	f10d 0315 	add.w	r3, sp, #21
   b7d26:	9300      	str	r3, [sp, #0]
{  
   b7d28:	4604      	mov	r4, r0
   b7d2a:	4688      	mov	r8, r1
   b7d2c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7d2e:	ab05      	add	r3, sp, #20
   b7d30:	f10d 0213 	add.w	r2, sp, #19
   b7d34:	4649      	mov	r1, r9
   b7d36:	3004      	adds	r0, #4
{  
   b7d38:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7d3c:	f7ff fe97 	bl	b7a6e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b7d40:	4605      	mov	r5, r0
   b7d42:	b908      	cbnz	r0, b7d48 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b7d44:	2500      	movs	r5, #0
   b7d46:	e038      	b.n	b7dba <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b7d48:	6823      	ldr	r3, [r4, #0]
   b7d4a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7d4e:	681b      	ldr	r3, [r3, #0]
   b7d50:	4649      	mov	r1, r9
   b7d52:	4620      	mov	r0, r4
   b7d54:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b7d56:	f899 3000 	ldrb.w	r3, [r9]
   b7d5a:	7a22      	ldrb	r2, [r4, #8]
   b7d5c:	429a      	cmp	r2, r3
   b7d5e:	d001      	beq.n	b7d64 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b7d60:	2bff      	cmp	r3, #255	; 0xff
   b7d62:	d12e      	bne.n	b7dc2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b7d64:	b117      	cbz	r7, b7d6c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b7d66:	4b21      	ldr	r3, [pc, #132]	; (b7dec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7d68:	785b      	ldrb	r3, [r3, #1]
   b7d6a:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b7d6c:	f1bb 0f00 	cmp.w	fp, #0
   b7d70:	d003      	beq.n	b7d7a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b7d72:	4b1e      	ldr	r3, [pc, #120]	; (b7dec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7d74:	781b      	ldrb	r3, [r3, #0]
   b7d76:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b7d7a:	f1ba 0f00 	cmp.w	sl, #0
   b7d7e:	d003      	beq.n	b7d88 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b7d80:	4b1a      	ldr	r3, [pc, #104]	; (b7dec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7d82:	78db      	ldrb	r3, [r3, #3]
   b7d84:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b7d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b7d8a:	b11b      	cbz	r3, b7d94 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b7d8c:	4b17      	ldr	r3, [pc, #92]	; (b7dec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7d8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b7d90:	791b      	ldrb	r3, [r3, #4]
   b7d92:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b7d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7d96:	b11b      	cbz	r3, b7da0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b7d98:	4b14      	ldr	r3, [pc, #80]	; (b7dec <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7d9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7d9c:	789b      	ldrb	r3, [r3, #2]
   b7d9e:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7da0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b7da4:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7da6:	4912      	ldr	r1, [pc, #72]	; (b7df0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7da8:	3b05      	subs	r3, #5
   b7daa:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7dac:	429a      	cmp	r2, r3
		*len = msgLen;
   b7dae:	bf88      	it	hi
   b7db0:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7db2:	7832      	ldrb	r2, [r6, #0]
   b7db4:	4640      	mov	r0, r8
   b7db6:	f005 fce3 	bl	bd780 <memcpy>
}
   b7dba:	4628      	mov	r0, r5
   b7dbc:	b007      	add	sp, #28
   b7dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b7dc2:	f899 3002 	ldrb.w	r3, [r9, #2]
   b7dc6:	1c5a      	adds	r2, r3, #1
   b7dc8:	f889 2002 	strb.w	r2, [r9, #2]
   b7dcc:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b7dd0:	429a      	cmp	r2, r3
   b7dd2:	d9b7      	bls.n	b7d44 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b7dd4:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b7dd8:	2b00      	cmp	r3, #0
   b7dda:	d0b3      	beq.n	b7d44 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b7ddc:	6823      	ldr	r3, [r4, #0]
   b7dde:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7de2:	685b      	ldr	r3, [r3, #4]
   b7de4:	4649      	mov	r1, r9
   b7de6:	4620      	mov	r0, r4
   b7de8:	4798      	blx	r3
   b7dea:	e7ab      	b.n	b7d44 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b7dec:	2003e4fe 	.word	0x2003e4fe
   b7df0:	2003e503 	.word	0x2003e503

000b7df4 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7df4:	b510      	push	{r4, lr}
   b7df6:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7df8:	6a00      	ldr	r0, [r0, #32]
   b7dfa:	6803      	ldr	r3, [r0, #0]
   b7dfc:	68db      	ldr	r3, [r3, #12]
   b7dfe:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b7e00:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7e04:	28ff      	cmp	r0, #255	; 0xff
   b7e06:	d002      	beq.n	b7e0e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7e08:	2101      	movs	r1, #1
   b7e0a:	f003 fdcb 	bl	bb9a4 <pinMode>

    deselectSlave();
   b7e0e:	6823      	ldr	r3, [r4, #0]
   b7e10:	4620      	mov	r0, r4
   b7e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7e14:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b7e16:	2064      	movs	r0, #100	; 0x64
   b7e18:	f001 f888 	bl	b8f2c <delay>
#endif
    
    return true;
}
   b7e1c:	2001      	movs	r0, #1
   b7e1e:	bd10      	pop	{r4, pc}

000b7e20 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b7e20:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7e24:	2100      	movs	r1, #0
   b7e26:	f003 bdce 	b.w	bb9c6 <digitalWrite>

000b7e2a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b7e2a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7e2e:	2101      	movs	r1, #1
   b7e30:	f003 bdc9 	b.w	bb9c6 <digitalWrite>

000b7e34 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b7e34:	b570      	push	{r4, r5, r6, lr}
   b7e36:	4604      	mov	r4, r0
   b7e38:	460d      	mov	r5, r1
   b7e3a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b7e3c:	f7ff fa7e 	bl	b733c <_ZN15RHGenericDriverC1Ev>
   b7e40:	4b03      	ldr	r3, [pc, #12]	; (b7e50 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b7e42:	6023      	str	r3, [r4, #0]
   b7e44:	6226      	str	r6, [r4, #32]
   b7e46:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b7e4a:	4620      	mov	r0, r4
   b7e4c:	bd70      	pop	{r4, r5, r6, pc}
   b7e4e:	bf00      	nop
   b7e50:	000bea90 	.word	0x000bea90

000b7e54 <_ZN11RHSPIDriver7spiReadEh>:
{
   b7e54:	b538      	push	{r3, r4, r5, lr}
   b7e56:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7e58:	6a00      	ldr	r0, [r0, #32]
   b7e5a:	6803      	ldr	r3, [r0, #0]
   b7e5c:	6a1b      	ldr	r3, [r3, #32]
{
   b7e5e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7e60:	4798      	blx	r3
    selectSlave();
   b7e62:	6823      	ldr	r3, [r4, #0]
   b7e64:	4620      	mov	r0, r4
   b7e66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7e68:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b7e6a:	6a20      	ldr	r0, [r4, #32]
   b7e6c:	6803      	ldr	r3, [r0, #0]
   b7e6e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b7e72:	681b      	ldr	r3, [r3, #0]
   b7e74:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7e76:	6a20      	ldr	r0, [r4, #32]
   b7e78:	6803      	ldr	r3, [r0, #0]
   b7e7a:	2100      	movs	r1, #0
   b7e7c:	681b      	ldr	r3, [r3, #0]
   b7e7e:	4798      	blx	r3
    deselectSlave();
   b7e80:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7e82:	4605      	mov	r5, r0
    deselectSlave();
   b7e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7e86:	4620      	mov	r0, r4
   b7e88:	4798      	blx	r3
    _spi.endTransaction();
   b7e8a:	6a20      	ldr	r0, [r4, #32]
   b7e8c:	6803      	ldr	r3, [r0, #0]
   b7e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7e90:	4798      	blx	r3
}
   b7e92:	4628      	mov	r0, r5
   b7e94:	bd38      	pop	{r3, r4, r5, pc}

000b7e96 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b7e96:	b570      	push	{r4, r5, r6, lr}
   b7e98:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7e9a:	6a00      	ldr	r0, [r0, #32]
   b7e9c:	6803      	ldr	r3, [r0, #0]
   b7e9e:	6a1b      	ldr	r3, [r3, #32]
{
   b7ea0:	4616      	mov	r6, r2
   b7ea2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7ea4:	4798      	blx	r3
    selectSlave();
   b7ea6:	6823      	ldr	r3, [r4, #0]
   b7ea8:	4620      	mov	r0, r4
   b7eaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7eac:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b7eae:	6a20      	ldr	r0, [r4, #32]
   b7eb0:	6803      	ldr	r3, [r0, #0]
   b7eb2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b7eb6:	681b      	ldr	r3, [r3, #0]
   b7eb8:	4798      	blx	r3
   b7eba:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b7ebc:	6a20      	ldr	r0, [r4, #32]
   b7ebe:	6803      	ldr	r3, [r0, #0]
   b7ec0:	4631      	mov	r1, r6
   b7ec2:	681b      	ldr	r3, [r3, #0]
   b7ec4:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7ec6:	2001      	movs	r0, #1
   b7ec8:	f000 fca2 	bl	b8810 <HAL_Delay_Microseconds>
    deselectSlave();
   b7ecc:	6823      	ldr	r3, [r4, #0]
   b7ece:	4620      	mov	r0, r4
   b7ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7ed2:	4798      	blx	r3
    _spi.endTransaction();
   b7ed4:	6a20      	ldr	r0, [r4, #32]
   b7ed6:	6803      	ldr	r3, [r0, #0]
   b7ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7eda:	4798      	blx	r3
}
   b7edc:	4628      	mov	r0, r5
   b7ede:	bd70      	pop	{r4, r5, r6, pc}

000b7ee0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b7ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7ee2:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7ee4:	6a00      	ldr	r0, [r0, #32]
{
   b7ee6:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7ee8:	6803      	ldr	r3, [r0, #0]
   b7eea:	6a1b      	ldr	r3, [r3, #32]
{
   b7eec:	460f      	mov	r7, r1
   b7eee:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7ef0:	4798      	blx	r3
    selectSlave();
   b7ef2:	6823      	ldr	r3, [r4, #0]
   b7ef4:	4620      	mov	r0, r4
   b7ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7ef8:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b7efa:	6a20      	ldr	r0, [r4, #32]
   b7efc:	6803      	ldr	r3, [r0, #0]
   b7efe:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b7f02:	681b      	ldr	r3, [r3, #0]
   b7f04:	4798      	blx	r3
   b7f06:	442e      	add	r6, r5
   b7f08:	4607      	mov	r7, r0
    while (len--)
   b7f0a:	42b5      	cmp	r5, r6
   b7f0c:	d007      	beq.n	b7f1e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b7f0e:	6a20      	ldr	r0, [r4, #32]
   b7f10:	6803      	ldr	r3, [r0, #0]
   b7f12:	2100      	movs	r1, #0
   b7f14:	681b      	ldr	r3, [r3, #0]
   b7f16:	4798      	blx	r3
   b7f18:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b7f1c:	e7f5      	b.n	b7f0a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b7f1e:	6823      	ldr	r3, [r4, #0]
   b7f20:	4620      	mov	r0, r4
   b7f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7f24:	4798      	blx	r3
    _spi.endTransaction();
   b7f26:	6a20      	ldr	r0, [r4, #32]
   b7f28:	6803      	ldr	r3, [r0, #0]
   b7f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7f2c:	4798      	blx	r3
}
   b7f2e:	4638      	mov	r0, r7
   b7f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f32 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b7f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f34:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7f36:	6a00      	ldr	r0, [r0, #32]
{
   b7f38:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7f3a:	6803      	ldr	r3, [r0, #0]
   b7f3c:	6a1b      	ldr	r3, [r3, #32]
{
   b7f3e:	460f      	mov	r7, r1
   b7f40:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7f42:	4798      	blx	r3
    selectSlave();
   b7f44:	6823      	ldr	r3, [r4, #0]
   b7f46:	4620      	mov	r0, r4
   b7f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7f4a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b7f4c:	6a20      	ldr	r0, [r4, #32]
   b7f4e:	6803      	ldr	r3, [r0, #0]
   b7f50:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b7f54:	681b      	ldr	r3, [r3, #0]
   b7f56:	4798      	blx	r3
   b7f58:	442e      	add	r6, r5
   b7f5a:	4607      	mov	r7, r0
    while (len--)
   b7f5c:	42b5      	cmp	r5, r6
   b7f5e:	d006      	beq.n	b7f6e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b7f60:	6a20      	ldr	r0, [r4, #32]
   b7f62:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7f66:	6803      	ldr	r3, [r0, #0]
   b7f68:	681b      	ldr	r3, [r3, #0]
   b7f6a:	4798      	blx	r3
    while (len--)
   b7f6c:	e7f6      	b.n	b7f5c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b7f6e:	6823      	ldr	r3, [r4, #0]
   b7f70:	4620      	mov	r0, r4
   b7f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7f74:	4798      	blx	r3
    _spi.endTransaction();
   b7f76:	6a20      	ldr	r0, [r4, #32]
   b7f78:	6803      	ldr	r3, [r0, #0]
   b7f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7f7c:	4798      	blx	r3
}
   b7f7e:	4638      	mov	r0, r7
   b7f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f82 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b7f82:	6a00      	ldr	r0, [r0, #32]
   b7f84:	6803      	ldr	r3, [r0, #0]
   b7f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7f88:	4718      	bx	r3

000b7f8a <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b7f8a:	2001      	movs	r0, #1
   b7f8c:	4770      	bx	lr

000b7f8e <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b7f8e:	20fb      	movs	r0, #251	; 0xfb
   b7f90:	4770      	bx	lr

000b7f92 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b7f92:	4770      	bx	lr

000b7f94 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b7f94:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b7f96:	7903      	ldrb	r3, [r0, #4]
   b7f98:	2b05      	cmp	r3, #5
{
   b7f9a:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b7f9c:	d010      	beq.n	b7fc0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b7f9e:	6803      	ldr	r3, [r0, #0]
   b7fa0:	2105      	movs	r1, #5
   b7fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7fa6:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b7fa8:	2207      	movs	r2, #7
   b7faa:	2101      	movs	r1, #1
   b7fac:	4620      	mov	r0, r4
   b7fae:	f7ff ff72 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b7fb2:	2280      	movs	r2, #128	; 0x80
   b7fb4:	2140      	movs	r1, #64	; 0x40
   b7fb6:	4620      	mov	r0, r4
   b7fb8:	f7ff ff6d 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b7fbc:	2305      	movs	r3, #5
   b7fbe:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b7fc0:	7923      	ldrb	r3, [r4, #4]
   b7fc2:	2b05      	cmp	r3, #5
   b7fc4:	d0fc      	beq.n	b7fc0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b7fc6:	7e20      	ldrb	r0, [r4, #24]
}
   b7fc8:	bd10      	pop	{r4, pc}

000b7fca <_ZN7RH_RF95D0Ev>:
   b7fca:	b510      	push	{r4, lr}
   b7fcc:	f44f 7198 	mov.w	r1, #304	; 0x130
   b7fd0:	4604      	mov	r4, r0
   b7fd2:	f7fc f864 	bl	b409e <_ZdlPvj>
   b7fd6:	4620      	mov	r0, r4
   b7fd8:	bd10      	pop	{r4, pc}

000b7fda <_ZN7RH_RF955sleepEv>:
{
   b7fda:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b7fdc:	7903      	ldrb	r3, [r0, #4]
   b7fde:	2b01      	cmp	r3, #1
{
   b7fe0:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b7fe2:	d00b      	beq.n	b7ffc <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b7fe4:	6803      	ldr	r3, [r0, #0]
   b7fe6:	2101      	movs	r1, #1
   b7fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7fec:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b7fee:	2200      	movs	r2, #0
   b7ff0:	2101      	movs	r1, #1
   b7ff2:	4620      	mov	r0, r4
   b7ff4:	f7ff ff4f 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b7ff8:	2301      	movs	r3, #1
   b7ffa:	7123      	strb	r3, [r4, #4]
}
   b7ffc:	2001      	movs	r0, #1
   b7ffe:	bd10      	pop	{r4, pc}

000b8000 <_ZN7RH_RF954recvEPhS0_>:
{
   b8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b8002:	6803      	ldr	r3, [r0, #0]
   b8004:	68db      	ldr	r3, [r3, #12]
{
   b8006:	4604      	mov	r4, r0
   b8008:	460f      	mov	r7, r1
   b800a:	4615      	mov	r5, r2
    if (!available())
   b800c:	4798      	blx	r3
   b800e:	4606      	mov	r6, r0
   b8010:	b1b0      	cbz	r0, b8040 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b8012:	b187      	cbz	r7, b8036 <_ZN7RH_RF954recvEPhS0_+0x36>
   b8014:	b17d      	cbz	r5, b8036 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b8016:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b801a:	782a      	ldrb	r2, [r5, #0]
   b801c:	3b03      	subs	r3, #3
   b801e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b8020:	bfde      	ittt	le
   b8022:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b8026:	3b04      	suble	r3, #4
   b8028:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b802a:	782a      	ldrb	r2, [r5, #0]
   b802c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b8030:	4638      	mov	r0, r7
   b8032:	f005 fba5 	bl	bd780 <memcpy>
    _rxBufValid = false;
   b8036:	2300      	movs	r3, #0
   b8038:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b803c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b8040:	4630      	mov	r0, r6
   b8042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8044 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b8044:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b8046:	b538      	push	{r3, r4, r5, lr}
   b8048:	4605      	mov	r5, r0
   b804a:	460c      	mov	r4, r1
	if (power > 20)
   b804c:	dc14      	bgt.n	b8078 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b804e:	2901      	cmp	r1, #1
   b8050:	dd14      	ble.n	b807c <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b8052:	2911      	cmp	r1, #17
   b8054:	dd13      	ble.n	b807e <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b8056:	2207      	movs	r2, #7
   b8058:	214d      	movs	r1, #77	; 0x4d
   b805a:	4628      	mov	r0, r5
   b805c:	f7ff ff1b 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b8060:	3c03      	subs	r4, #3
   b8062:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b8064:	1ea2      	subs	r2, r4, #2
   b8066:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b806a:	4628      	mov	r0, r5
   b806c:	b2d2      	uxtb	r2, r2
}
   b806e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b8072:	2109      	movs	r1, #9
   b8074:	f7ff bf0f 	b.w	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b8078:	2414      	movs	r4, #20
   b807a:	e7ec      	b.n	b8056 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b807c:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b807e:	2204      	movs	r2, #4
   b8080:	214d      	movs	r1, #77	; 0x4d
   b8082:	4628      	mov	r0, r5
   b8084:	f7ff ff07 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
   b8088:	e7ec      	b.n	b8064 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b808c <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b808c:	b538      	push	{r3, r4, r5, lr}
   b808e:	4604      	mov	r4, r0
   b8090:	4615      	mov	r5, r2
    _rxBufValid(0)
   b8092:	461a      	mov	r2, r3
   b8094:	f7ff fece 	bl	b7e34 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b8098:	4b09      	ldr	r3, [pc, #36]	; (b80c0 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b809a:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b809c:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b809e:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b80a0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b80a4:	2201      	movs	r2, #1
    _rxBufValid(0)
   b80a6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b80aa:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b80ae:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b80b2:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b80b6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b80ba:	4620      	mov	r0, r4
   b80bc:	bd38      	pop	{r3, r4, r5, pc}
   b80be:	bf00      	nop
   b80c0:	000beb28 	.word	0x000beb28

000b80c4 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b80c4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b80c8:	2b03      	cmp	r3, #3
   b80ca:	d91b      	bls.n	b8104 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b80cc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b80d0:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b80d2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b80d6:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b80d8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b80dc:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b80de:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b80e2:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b80e4:	7983      	ldrb	r3, [r0, #6]
   b80e6:	b933      	cbnz	r3, b80f6 <_ZN7RH_RF9513validateRxBufEv+0x32>
   b80e8:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b80ea:	7942      	ldrb	r2, [r0, #5]
   b80ec:	429a      	cmp	r2, r3
   b80ee:	d002      	beq.n	b80f6 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b80f0:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b80f2:	2bff      	cmp	r3, #255	; 0xff
   b80f4:	d106      	bne.n	b8104 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b80f6:	8a83      	ldrh	r3, [r0, #20]
   b80f8:	3301      	adds	r3, #1
   b80fa:	b29b      	uxth	r3, r3
   b80fc:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b80fe:	2301      	movs	r3, #1
   b8100:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b8104:	4770      	bx	lr
	...

000b8108 <_ZN7RH_RF9512setFrequencyEf>:
{
   b8108:	b538      	push	{r3, r4, r5, lr}
   b810a:	4604      	mov	r4, r0
   b810c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8110:	ee10 0a10 	vmov	r0, s0
{
   b8114:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8118:	f004 ff40 	bl	bcf9c <__aeabi_f2d>
   b811c:	a317      	add	r3, pc, #92	; (adr r3, b817c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b811e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8122:	f004 ff93 	bl	bd04c <__aeabi_dmul>
   b8126:	a317      	add	r3, pc, #92	; (adr r3, b8184 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b8128:	e9d3 2300 	ldrd	r2, r3, [r3]
   b812c:	f005 f8b8 	bl	bd2a0 <__aeabi_ddiv>
   b8130:	f005 fa64 	bl	bd5fc <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b8134:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b8136:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b8138:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b813c:	4620      	mov	r0, r4
   b813e:	f7ff feaa 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b8142:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b8146:	2107      	movs	r1, #7
   b8148:	4620      	mov	r0, r4
   b814a:	f7ff fea4 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b814e:	b2ea      	uxtb	r2, r5
   b8150:	2108      	movs	r1, #8
   b8152:	4620      	mov	r0, r4
   b8154:	f7ff fe9f 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b8158:	eddf 7a07 	vldr	s15, [pc, #28]	; b8178 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b815c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b8160:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b8164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8168:	bfac      	ite	ge
   b816a:	2301      	movge	r3, #1
   b816c:	2300      	movlt	r3, #0
}
   b816e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b8170:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b8174:	bd38      	pop	{r3, r4, r5, pc}
   b8176:	bf00      	nop
   b8178:	4442c000 	.word	0x4442c000
   b817c:	00000000 	.word	0x00000000
   b8180:	412e8480 	.word	0x412e8480
   b8184:	00000000 	.word	0x00000000
   b8188:	404e8480 	.word	0x404e8480

000b818c <_ZN7RH_RF9511setModeIdleEv>:
{
   b818c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b818e:	7903      	ldrb	r3, [r0, #4]
   b8190:	2b02      	cmp	r3, #2
{
   b8192:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b8194:	d00b      	beq.n	b81ae <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b8196:	6803      	ldr	r3, [r0, #0]
   b8198:	2102      	movs	r1, #2
   b819a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b819e:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b81a0:	2201      	movs	r2, #1
   b81a2:	4611      	mov	r1, r2
   b81a4:	4620      	mov	r0, r4
   b81a6:	f7ff fe76 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b81aa:	2302      	movs	r3, #2
   b81ac:	7123      	strb	r3, [r4, #4]
}
   b81ae:	bd10      	pop	{r4, pc}

000b81b0 <_ZN7RH_RF9515handleInterruptEv>:
{
   b81b0:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b81b2:	2112      	movs	r1, #18
{
   b81b4:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b81b6:	f7ff fe4d 	bl	b7e54 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b81ba:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b81bc:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b81be:	4620      	mov	r0, r4
   b81c0:	f7ff fe48 	bl	b7e54 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b81c4:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b81c6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b81c8:	2112      	movs	r1, #18
   b81ca:	4620      	mov	r0, r4
   b81cc:	f7ff fe63 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b81d0:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b81d2:	2b04      	cmp	r3, #4
   b81d4:	d107      	bne.n	b81e6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b81d6:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b81da:	d117      	bne.n	b820c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b81dc:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b81e0:	b10b      	cbz	r3, b81e6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b81e2:	0670      	lsls	r0, r6, #25
   b81e4:	d512      	bpl.n	b820c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b81e6:	7923      	ldrb	r3, [r4, #4]
   b81e8:	2b04      	cmp	r3, #4
   b81ea:	d101      	bne.n	b81f0 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b81ec:	0669      	lsls	r1, r5, #25
   b81ee:	d422      	bmi.n	b8236 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b81f0:	7923      	ldrb	r3, [r4, #4]
   b81f2:	2b03      	cmp	r3, #3
   b81f4:	d101      	bne.n	b81fa <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b81f6:	072a      	lsls	r2, r5, #28
   b81f8:	d468      	bmi.n	b82cc <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b81fa:	7923      	ldrb	r3, [r4, #4]
   b81fc:	2b05      	cmp	r3, #5
   b81fe:	d10e      	bne.n	b821e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b8200:	076b      	lsls	r3, r5, #29
   b8202:	d50c      	bpl.n	b821e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b8204:	f005 0501 	and.w	r5, r5, #1
   b8208:	7625      	strb	r5, [r4, #24]
   b820a:	e063      	b.n	b82d4 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b820c:	8a63      	ldrh	r3, [r4, #18]
   b820e:	3301      	adds	r3, #1
   b8210:	b29b      	uxth	r3, r3
   b8212:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b8214:	2300      	movs	r3, #0
   b8216:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b821a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b821e:	22ff      	movs	r2, #255	; 0xff
   b8220:	2112      	movs	r1, #18
   b8222:	4620      	mov	r0, r4
   b8224:	f7ff fe37 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8228:	4620      	mov	r0, r4
   b822a:	22ff      	movs	r2, #255	; 0xff
}
   b822c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b8230:	2112      	movs	r1, #18
   b8232:	f7ff be30 	b.w	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b8236:	2113      	movs	r1, #19
   b8238:	4620      	mov	r0, r4
   b823a:	f7ff fe0b 	bl	b7e54 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b823e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b8240:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b8242:	4620      	mov	r0, r4
   b8244:	f7ff fe06 	bl	b7e54 <_ZN11RHSPIDriver7spiReadEh>
   b8248:	210d      	movs	r1, #13
   b824a:	4602      	mov	r2, r0
   b824c:	4620      	mov	r0, r4
   b824e:	f7ff fe22 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b8252:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b8256:	462b      	mov	r3, r5
   b8258:	2100      	movs	r1, #0
   b825a:	4620      	mov	r0, r4
   b825c:	f7ff fe40 	bl	b7ee0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b8260:	2119      	movs	r1, #25
	_bufLen = len;
   b8262:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b8266:	4620      	mov	r0, r4
   b8268:	f7ff fdf4 	bl	b7e54 <_ZN11RHSPIDriver7spiReadEh>
   b826c:	b240      	sxtb	r0, r0
   b826e:	2800      	cmp	r0, #0
   b8270:	bfb8      	it	lt
   b8272:	3003      	addlt	r0, #3
   b8274:	1080      	asrs	r0, r0, #2
   b8276:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b827a:	211a      	movs	r1, #26
   b827c:	4620      	mov	r0, r4
   b827e:	f7ff fde9 	bl	b7e54 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b8282:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b8286:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b8288:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b828a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b828c:	bfa9      	itett	ge
   b828e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b8290:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b8292:	b21b      	sxthge	r3, r3
   b8294:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b8296:	bfb2      	itee	lt
   b8298:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b829a:	220f      	movge	r2, #15
   b829c:	fb93 f3f2 	sdivge	r3, r3, r2
   b82a0:	b21b      	sxth	r3, r3
   b82a2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b82a4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b82a8:	b16b      	cbz	r3, b82c6 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b82aa:	8a23      	ldrh	r3, [r4, #16]
   b82ac:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b82ae:	b21b      	sxth	r3, r3
   b82b0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b82b2:	4620      	mov	r0, r4
   b82b4:	f7ff ff06 	bl	b80c4 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b82b8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b82bc:	2b00      	cmp	r3, #0
   b82be:	d0ae      	beq.n	b821e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b82c0:	f7ff ff64 	bl	b818c <_ZN7RH_RF9511setModeIdleEv>
   b82c4:	e7ab      	b.n	b821e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b82c6:	8a23      	ldrh	r3, [r4, #16]
   b82c8:	3ba4      	subs	r3, #164	; 0xa4
   b82ca:	e7f0      	b.n	b82ae <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b82cc:	8ae3      	ldrh	r3, [r4, #22]
   b82ce:	3301      	adds	r3, #1
   b82d0:	b29b      	uxth	r3, r3
   b82d2:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b82d4:	4620      	mov	r0, r4
   b82d6:	e7f3      	b.n	b82c0 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b82d8 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b82d8:	4b02      	ldr	r3, [pc, #8]	; (b82e4 <_ZN7RH_RF954isr0Ev+0xc>)
   b82da:	6818      	ldr	r0, [r3, #0]
   b82dc:	b108      	cbz	r0, b82e2 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b82de:	f7ff bf67 	b.w	b81b0 <_ZN7RH_RF9515handleInterruptEv>
}
   b82e2:	4770      	bx	lr
   b82e4:	2003e600 	.word	0x2003e600

000b82e8 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b82e8:	4b02      	ldr	r3, [pc, #8]	; (b82f4 <_ZN7RH_RF954isr1Ev+0xc>)
   b82ea:	6858      	ldr	r0, [r3, #4]
   b82ec:	b108      	cbz	r0, b82f2 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b82ee:	f7ff bf5f 	b.w	b81b0 <_ZN7RH_RF9515handleInterruptEv>
}
   b82f2:	4770      	bx	lr
   b82f4:	2003e600 	.word	0x2003e600

000b82f8 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b82f8:	4b02      	ldr	r3, [pc, #8]	; (b8304 <_ZN7RH_RF954isr2Ev+0xc>)
   b82fa:	6898      	ldr	r0, [r3, #8]
   b82fc:	b108      	cbz	r0, b8302 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b82fe:	f7ff bf57 	b.w	b81b0 <_ZN7RH_RF9515handleInterruptEv>
}
   b8302:	4770      	bx	lr
   b8304:	2003e600 	.word	0x2003e600

000b8308 <_ZN7RH_RF959setModeRxEv>:
{
   b8308:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b830a:	7903      	ldrb	r3, [r0, #4]
   b830c:	2b04      	cmp	r3, #4
{
   b830e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b8310:	d010      	beq.n	b8334 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b8312:	6803      	ldr	r3, [r0, #0]
   b8314:	2104      	movs	r1, #4
   b8316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b831a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b831c:	2205      	movs	r2, #5
   b831e:	2101      	movs	r1, #1
   b8320:	4620      	mov	r0, r4
   b8322:	f7ff fdb8 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b8326:	2200      	movs	r2, #0
   b8328:	2140      	movs	r1, #64	; 0x40
   b832a:	4620      	mov	r0, r4
   b832c:	f7ff fdb3 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b8330:	2304      	movs	r3, #4
   b8332:	7123      	strb	r3, [r4, #4]
}
   b8334:	bd10      	pop	{r4, pc}

000b8336 <_ZN7RH_RF959availableEv>:
{
   b8336:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b8338:	7903      	ldrb	r3, [r0, #4]
   b833a:	2b03      	cmp	r3, #3
{
   b833c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b833e:	d005      	beq.n	b834c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b8340:	f7ff ffe2 	bl	b8308 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b8344:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b8348:	b2c0      	uxtb	r0, r0
}
   b834a:	bd10      	pop	{r4, pc}
	return false;
   b834c:	2000      	movs	r0, #0
   b834e:	e7fc      	b.n	b834a <_ZN7RH_RF959availableEv+0x14>

000b8350 <_ZN7RH_RF959setModeTxEv>:
{
   b8350:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b8352:	7903      	ldrb	r3, [r0, #4]
   b8354:	2b03      	cmp	r3, #3
{
   b8356:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b8358:	d010      	beq.n	b837c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b835a:	6803      	ldr	r3, [r0, #0]
   b835c:	2103      	movs	r1, #3
   b835e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8362:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b8364:	2203      	movs	r2, #3
   b8366:	2101      	movs	r1, #1
   b8368:	4620      	mov	r0, r4
   b836a:	f7ff fd94 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b836e:	2240      	movs	r2, #64	; 0x40
   b8370:	4611      	mov	r1, r2
   b8372:	4620      	mov	r0, r4
   b8374:	f7ff fd8f 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b8378:	2303      	movs	r3, #3
   b837a:	7123      	strb	r3, [r4, #4]
}
   b837c:	bd10      	pop	{r4, pc}

000b837e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b837e:	2afb      	cmp	r2, #251	; 0xfb
{
   b8380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8382:	4604      	mov	r4, r0
   b8384:	460f      	mov	r7, r1
   b8386:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b8388:	d902      	bls.n	b8390 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b838a:	2600      	movs	r6, #0
}
   b838c:	4630      	mov	r0, r6
   b838e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b8390:	6803      	ldr	r3, [r0, #0]
   b8392:	6a1b      	ldr	r3, [r3, #32]
   b8394:	4798      	blx	r3
    setModeIdle();
   b8396:	4620      	mov	r0, r4
   b8398:	f7ff fef8 	bl	b818c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b839c:	6823      	ldr	r3, [r4, #0]
   b839e:	4620      	mov	r0, r4
   b83a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b83a2:	4798      	blx	r3
   b83a4:	4606      	mov	r6, r0
   b83a6:	2800      	cmp	r0, #0
   b83a8:	d0ef      	beq.n	b838a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b83aa:	2200      	movs	r2, #0
   b83ac:	210d      	movs	r1, #13
   b83ae:	4620      	mov	r0, r4
   b83b0:	f7ff fd71 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b83b4:	7ae2      	ldrb	r2, [r4, #11]
   b83b6:	2100      	movs	r1, #0
   b83b8:	4620      	mov	r0, r4
   b83ba:	f7ff fd6c 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b83be:	7b22      	ldrb	r2, [r4, #12]
   b83c0:	2100      	movs	r1, #0
   b83c2:	4620      	mov	r0, r4
   b83c4:	f7ff fd67 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b83c8:	7b62      	ldrb	r2, [r4, #13]
   b83ca:	2100      	movs	r1, #0
   b83cc:	4620      	mov	r0, r4
   b83ce:	f7ff fd62 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b83d2:	7ba2      	ldrb	r2, [r4, #14]
   b83d4:	2100      	movs	r1, #0
   b83d6:	4620      	mov	r0, r4
   b83d8:	f7ff fd5d 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b83dc:	462b      	mov	r3, r5
   b83de:	463a      	mov	r2, r7
   b83e0:	2100      	movs	r1, #0
   b83e2:	4620      	mov	r0, r4
   b83e4:	f7ff fda5 	bl	b7f32 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b83e8:	1d2a      	adds	r2, r5, #4
   b83ea:	b2d2      	uxtb	r2, r2
   b83ec:	2122      	movs	r1, #34	; 0x22
   b83ee:	4620      	mov	r0, r4
   b83f0:	f7ff fd51 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b83f4:	4620      	mov	r0, r4
   b83f6:	f7ff ffab 	bl	b8350 <_ZN7RH_RF959setModeTxEv>
    return true;
   b83fa:	e7c7      	b.n	b838c <_ZN7RH_RF954sendEPKhh+0xe>

000b83fc <_ZN7RH_RF9510setTxPowerEab>:
{
   b83fc:	b510      	push	{r4, lr}
   b83fe:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b8400:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b8404:	b172      	cbz	r2, b8424 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b8406:	f381 0204 	usat	r2, #4, r1
   b840a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b840e:	b2d2      	uxtb	r2, r2
   b8410:	2109      	movs	r1, #9
   b8412:	f7ff fd40 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b8416:	4620      	mov	r0, r4
   b8418:	2204      	movs	r2, #4
}
   b841a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b841e:	214d      	movs	r1, #77	; 0x4d
   b8420:	f7ff bd39 	b.w	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
}
   b8424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8428:	f7ff be0c 	b.w	b8044 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b842c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b842c:	b538      	push	{r3, r4, r5, lr}
   b842e:	460c      	mov	r4, r1
   b8430:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b8432:	780a      	ldrb	r2, [r1, #0]
   b8434:	211d      	movs	r1, #29
   b8436:	f7ff fd2e 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b843a:	7862      	ldrb	r2, [r4, #1]
   b843c:	211e      	movs	r1, #30
   b843e:	4628      	mov	r0, r5
   b8440:	f7ff fd29 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b8444:	78a2      	ldrb	r2, [r4, #2]
   b8446:	4628      	mov	r0, r5
   b8448:	2126      	movs	r1, #38	; 0x26
}
   b844a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b844e:	f7ff bd22 	b.w	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b8454 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b8454:	2905      	cmp	r1, #5
{
   b8456:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b8458:	d80f      	bhi.n	b847a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b845a:	4b09      	ldr	r3, [pc, #36]	; (b8480 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b845c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b8460:	185c      	adds	r4, r3, r1
   b8462:	5a5a      	ldrh	r2, [r3, r1]
   b8464:	78a3      	ldrb	r3, [r4, #2]
   b8466:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b846a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b846c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b8470:	f7ff ffdc 	bl	b842c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b8474:	2001      	movs	r0, #1
}
   b8476:	b002      	add	sp, #8
   b8478:	bd10      	pop	{r4, pc}
        return false;
   b847a:	2000      	movs	r0, #0
   b847c:	e7fb      	b.n	b8476 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b847e:	bf00      	nop
   b8480:	000beb10 	.word	0x000beb10

000b8484 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b8484:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b8486:	0a0a      	lsrs	r2, r1, #8
{
   b8488:	4605      	mov	r5, r0
   b848a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b848c:	2120      	movs	r1, #32
   b848e:	f7ff fd02 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b8492:	b2e2      	uxtb	r2, r4
   b8494:	4628      	mov	r0, r5
   b8496:	2121      	movs	r1, #33	; 0x21
}
   b8498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b849c:	f7ff bcfb 	b.w	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>

000b84a0 <_ZN7RH_RF954initEv>:
{
   b84a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b84a2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b84a4:	f7ff fca6 	bl	b7df4 <_ZN11RHSPIDriver4initEv>
   b84a8:	4606      	mov	r6, r0
   b84aa:	b918      	cbnz	r0, b84b4 <_ZN7RH_RF954initEv+0x14>
	return false;
   b84ac:	2600      	movs	r6, #0
}
   b84ae:	4630      	mov	r0, r6
   b84b0:	b002      	add	sp, #8
   b84b2:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b84b4:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b84b8:	2dff      	cmp	r5, #255	; 0xff
   b84ba:	d054      	beq.n	b8566 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b84bc:	4629      	mov	r1, r5
   b84be:	4620      	mov	r0, r4
   b84c0:	f7ff fd5f 	bl	b7f82 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b84c4:	2280      	movs	r2, #128	; 0x80
   b84c6:	2101      	movs	r1, #1
   b84c8:	4620      	mov	r0, r4
   b84ca:	f7ff fce4 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b84ce:	200a      	movs	r0, #10
   b84d0:	f000 fd2c 	bl	b8f2c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b84d4:	2101      	movs	r1, #1
   b84d6:	4620      	mov	r0, r4
   b84d8:	f7ff fcbc 	bl	b7e54 <_ZN11RHSPIDriver7spiReadEh>
   b84dc:	2880      	cmp	r0, #128	; 0x80
   b84de:	d1e5      	bne.n	b84ac <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b84e0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b84e4:	28ff      	cmp	r0, #255	; 0xff
   b84e6:	d01c      	beq.n	b8522 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b84e8:	2100      	movs	r1, #0
   b84ea:	f003 fa5b 	bl	bb9a4 <pinMode>
	if (_myInterruptIndex == 0xff)
   b84ee:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b84f2:	2bff      	cmp	r3, #255	; 0xff
   b84f4:	d107      	bne.n	b8506 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b84f6:	4a26      	ldr	r2, [pc, #152]	; (b8590 <_ZN7RH_RF954initEv+0xf0>)
   b84f8:	7813      	ldrb	r3, [r2, #0]
   b84fa:	2b03      	cmp	r3, #3
   b84fc:	d8d6      	bhi.n	b84ac <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b84fe:	1c59      	adds	r1, r3, #1
   b8500:	7011      	strb	r1, [r2, #0]
   b8502:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b8506:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b850a:	4b22      	ldr	r3, [pc, #136]	; (b8594 <_ZN7RH_RF954initEv+0xf4>)
   b850c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b8510:	bb62      	cbnz	r2, b856c <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b8512:	4921      	ldr	r1, [pc, #132]	; (b8598 <_ZN7RH_RF954initEv+0xf8>)
   b8514:	9200      	str	r2, [sp, #0]
   b8516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b851a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b851c:	b2a8      	uxth	r0, r5
   b851e:	f000 ff97 	bl	b9450 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b8522:	2200      	movs	r2, #0
   b8524:	210e      	movs	r1, #14
   b8526:	4620      	mov	r0, r4
   b8528:	f7ff fcb5 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b852c:	2200      	movs	r2, #0
   b852e:	210f      	movs	r1, #15
   b8530:	4620      	mov	r0, r4
   b8532:	f7ff fcb0 	bl	b7e96 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b8536:	4620      	mov	r0, r4
   b8538:	f7ff fe28 	bl	b818c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b853c:	2100      	movs	r1, #0
   b853e:	4620      	mov	r0, r4
   b8540:	f7ff ff88 	bl	b8454 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b8544:	2108      	movs	r1, #8
   b8546:	4620      	mov	r0, r4
   b8548:	f7ff ff9c 	bl	b8484 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b854c:	ed9f 0a13 	vldr	s0, [pc, #76]	; b859c <_ZN7RH_RF954initEv+0xfc>
   b8550:	4620      	mov	r0, r4
   b8552:	f7ff fdd9 	bl	b8108 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b8556:	2300      	movs	r3, #0
   b8558:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b855c:	210d      	movs	r1, #13
   b855e:	4620      	mov	r0, r4
   b8560:	f7ff fd70 	bl	b8044 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b8564:	e7a3      	b.n	b84ae <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b8566:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b856a:	e7ab      	b.n	b84c4 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b856c:	2a01      	cmp	r2, #1
   b856e:	f04f 0300 	mov.w	r3, #0
   b8572:	d104      	bne.n	b857e <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b8574:	9300      	str	r3, [sp, #0]
   b8576:	490a      	ldr	r1, [pc, #40]	; (b85a0 <_ZN7RH_RF954initEv+0x100>)
   b8578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b857c:	e7ce      	b.n	b851c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b857e:	2a02      	cmp	r2, #2
   b8580:	d194      	bne.n	b84ac <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b8582:	9300      	str	r3, [sp, #0]
   b8584:	4907      	ldr	r1, [pc, #28]	; (b85a4 <_ZN7RH_RF954initEv+0x104>)
   b8586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b858a:	2201      	movs	r2, #1
   b858c:	e7c6      	b.n	b851c <_ZN7RH_RF954initEv+0x7c>
   b858e:	bf00      	nop
   b8590:	2003e5fd 	.word	0x2003e5fd
   b8594:	2003e600 	.word	0x2003e600
   b8598:	000b82d9 	.word	0x000b82d9
   b859c:	43d90000 	.word	0x43d90000
   b85a0:	000b82e9 	.word	0x000b82e9
   b85a4:	000b82f9 	.word	0x000b82f9

000b85a8 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b85a8:	4770      	bx	lr

000b85aa <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b85aa:	6803      	ldr	r3, [r0, #0]
   b85ac:	685b      	ldr	r3, [r3, #4]
   b85ae:	4718      	bx	r3

000b85b0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b85b0:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b85b2:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b85b4:	4604      	mov	r4, r0
    if (lastUpdate) {
   b85b6:	b133      	cbz	r3, b85c6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b85b8:	b131      	cbz	r1, b85c8 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b85ba:	6823      	ldr	r3, [r4, #0]
   b85bc:	4620      	mov	r0, r4
   b85be:	689b      	ldr	r3, [r3, #8]
   b85c0:	4798      	blx	r3
            lastUpdate = 0;
   b85c2:	2300      	movs	r3, #0
   b85c4:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b85c6:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b85c8:	f000 f92a 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b85cc:	69a3      	ldr	r3, [r4, #24]
   b85ce:	1ac0      	subs	r0, r0, r3
   b85d0:	69e3      	ldr	r3, [r4, #28]
   b85d2:	4298      	cmp	r0, r3
   b85d4:	d2f1      	bcs.n	b85ba <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b85d6:	e7f6      	b.n	b85c6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b85d8 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b85d8:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b85da:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b85dc:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b85de:	b11b      	cbz	r3, b85e8 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b85e0:	f000 f91e 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b85e4:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b85e6:	bd10      	pop	{r4, pc}
        save();
   b85e8:	6803      	ldr	r3, [r0, #0]
}
   b85ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b85ee:	689b      	ldr	r3, [r3, #8]
   b85f0:	4718      	bx	r3

000b85f2 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b85f2:	f000 b8ed 	b.w	b87d0 <os_mutex_recursive_unlock>

000b85f6 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b85f6:	b510      	push	{r4, lr}
   b85f8:	4604      	mov	r4, r0
   b85fa:	3004      	adds	r0, #4
   b85fc:	f7fd f994 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8600:	6823      	ldr	r3, [r4, #0]
   b8602:	68e1      	ldr	r1, [r4, #12]
   b8604:	695b      	ldr	r3, [r3, #20]
   b8606:	4620      	mov	r0, r4
   b8608:	4798      	blx	r3
   b860a:	b918      	cbnz	r0, b8614 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b860c:	6823      	ldr	r3, [r4, #0]
   b860e:	4620      	mov	r0, r4
   b8610:	699b      	ldr	r3, [r3, #24]
   b8612:	4798      	blx	r3
      { _M_device.unlock(); }
   b8614:	6860      	ldr	r0, [r4, #4]
   b8616:	f7ff ffec 	bl	b85f2 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b861a:	2001      	movs	r0, #1
   b861c:	bd10      	pop	{r4, pc}
	...

000b8620 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8620:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8622:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b8626:	4f18      	ldr	r7, [pc, #96]	; (b8688 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8628:	4e18      	ldr	r6, [pc, #96]	; (b868c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b862a:	4d19      	ldr	r5, [pc, #100]	; (b8690 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b862c:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b862e:	42a0      	cmp	r0, r4
   b8630:	d00c      	beq.n	b864c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b8632:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b8636:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b8638:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b863c:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b863e:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b8640:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b8644:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b8648:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b864a:	e7f0      	b.n	b862e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b864c:	f001 0403 	and.w	r4, r1, #3
   b8650:	4404      	add	r4, r0
    k = 0;
   b8652:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b8654:	42a0      	cmp	r0, r4
   b8656:	d004      	beq.n	b8662 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b8658:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b865c:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b8660:	e7f8      	b.n	b8654 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b8662:	4809      	ldr	r0, [pc, #36]	; (b8688 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b8664:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b8666:	4809      	ldr	r0, [pc, #36]	; (b868c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b8668:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b866c:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b866e:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8670:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b8672:	4b08      	ldr	r3, [pc, #32]	; (b8694 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b8674:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b8678:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b867a:	4b07      	ldr	r3, [pc, #28]	; (b8698 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b867c:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b8680:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b8682:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b8686:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8688:	cc9e2d51 	.word	0xcc9e2d51
   b868c:	1b873593 	.word	0x1b873593
   b8690:	e6546b64 	.word	0xe6546b64
   b8694:	85ebca6b 	.word	0x85ebca6b
   b8698:	c2b2ae35 	.word	0xc2b2ae35

000b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b869e:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b86a0:	3004      	adds	r0, #4
   b86a2:	f7fd f941 	bl	b5928 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b86a6:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b86a8:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b86aa:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b86ac:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b86ae:	68a6      	ldr	r6, [r4, #8]
   b86b0:	4a05      	ldr	r2, [pc, #20]	; (b86c8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b86b2:	88f1      	ldrh	r1, [r6, #6]
   b86b4:	4630      	mov	r0, r6
   b86b6:	f7ff ffb3 	bl	b8620 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b86ba:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b86bc:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b86be:	6860      	ldr	r0, [r4, #4]
   b86c0:	f7ff ff97 	bl	b85f2 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b86c4:	4628      	mov	r0, r5
   b86c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b86c8:	851c2a3f 	.word	0x851c2a3f

000b86cc <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b86cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b86ce:	460d      	mov	r5, r1
   b86d0:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b86d2:	f7ff ffe3 	bl	b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b86d6:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b86d8:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b86da:	d923      	bls.n	b8724 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b86dc:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b86de:	6922      	ldr	r2, [r4, #16]
   b86e0:	6819      	ldr	r1, [r3, #0]
   b86e2:	4291      	cmp	r1, r2
   b86e4:	d11f      	bne.n	b8726 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b86e6:	8899      	ldrh	r1, [r3, #4]
   b86e8:	8aa2      	ldrh	r2, [r4, #20]
   b86ea:	4291      	cmp	r1, r2
   b86ec:	d11b      	bne.n	b8726 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b86ee:	88d9      	ldrh	r1, [r3, #6]
   b86f0:	b2aa      	uxth	r2, r5
   b86f2:	4291      	cmp	r1, r2
   b86f4:	d817      	bhi.n	b8726 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b86f6:	689a      	ldr	r2, [r3, #8]
   b86f8:	4282      	cmp	r2, r0
   b86fa:	d114      	bne.n	b8726 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b86fc:	68e2      	ldr	r2, [r4, #12]
   b86fe:	42aa      	cmp	r2, r5
   b8700:	d905      	bls.n	b870e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b8702:	2100      	movs	r1, #0
   b8704:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b8706:	68e2      	ldr	r2, [r4, #12]
   b8708:	3501      	adds	r5, #1
   b870a:	42aa      	cmp	r2, r5
   b870c:	d8fa      	bhi.n	b8704 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b870e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b8712:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8714:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b8716:	68a5      	ldr	r5, [r4, #8]
   b8718:	f7ff ffc0 	bl	b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b871c:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b871e:	2001      	movs	r0, #1
}
   b8720:	b002      	add	sp, #8
   b8722:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b8724:	b19d      	cbz	r5, b874e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b8726:	68a1      	ldr	r1, [r4, #8]
   b8728:	680a      	ldr	r2, [r1, #0]
   b872a:	b192      	cbz	r2, b8752 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b872c:	6888      	ldr	r0, [r1, #8]
   b872e:	888b      	ldrh	r3, [r1, #4]
   b8730:	9001      	str	r0, [sp, #4]
   b8732:	88c9      	ldrh	r1, [r1, #6]
   b8734:	4808      	ldr	r0, [pc, #32]	; (b8758 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b8736:	9100      	str	r1, [sp, #0]
   b8738:	4908      	ldr	r1, [pc, #32]	; (b875c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b873a:	f7fd fe7f 	bl	b643c <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b873e:	e9cd 5600 	strd	r5, r6, [sp]
   b8742:	8aa3      	ldrh	r3, [r4, #20]
   b8744:	6922      	ldr	r2, [r4, #16]
   b8746:	4906      	ldr	r1, [pc, #24]	; (b8760 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b8748:	4803      	ldr	r0, [pc, #12]	; (b8758 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b874a:	f7fd fe77 	bl	b643c <_ZNK5spark6Logger5traceEPKcz>
   b874e:	2000      	movs	r0, #0
   b8750:	e7e6      	b.n	b8720 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b8752:	4610      	mov	r0, r2
   b8754:	e7e4      	b.n	b8720 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b8756:	bf00      	nop
   b8758:	2003e654 	.word	0x2003e654
   b875c:	000bebac 	.word	0x000bebac
   b8760:	000bebdd 	.word	0x000bebdd

000b8764 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b8764:	b538      	push	{r3, r4, r5, lr}
   b8766:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8768:	68c2      	ldr	r2, [r0, #12]
   b876a:	6880      	ldr	r0, [r0, #8]
   b876c:	2100      	movs	r1, #0
   b876e:	f005 f82f 	bl	bd7d0 <memset>
    savedDataHeader->magic = savedDataMagic;
   b8772:	68a3      	ldr	r3, [r4, #8]
   b8774:	6922      	ldr	r2, [r4, #16]
   b8776:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b8778:	68a3      	ldr	r3, [r4, #8]
   b877a:	8aa2      	ldrh	r2, [r4, #20]
   b877c:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b877e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b8782:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8784:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b8786:	68a5      	ldr	r5, [r4, #8]
   b8788:	f7ff ff88 	bl	b869c <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b878c:	60a8      	str	r0, [r5, #8]
}
   b878e:	bd38      	pop	{r3, r4, r5, pc}

000b8790 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b8790:	b508      	push	{r3, lr}
   b8792:	4b02      	ldr	r3, [pc, #8]	; (b879c <cellular_signal+0xc>)
   b8794:	681b      	ldr	r3, [r3, #0]
   b8796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8798:	9301      	str	r3, [sp, #4]
   b879a:	bd08      	pop	{r3, pc}
   b879c:	00030274 	.word	0x00030274

000b87a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b87a0:	b508      	push	{r3, lr}
   b87a2:	4b02      	ldr	r3, [pc, #8]	; (b87ac <os_mutex_recursive_create+0xc>)
   b87a4:	681b      	ldr	r3, [r3, #0]
   b87a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b87a8:	9301      	str	r3, [sp, #4]
   b87aa:	bd08      	pop	{r3, pc}
   b87ac:	00030248 	.word	0x00030248

000b87b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b87b0:	b508      	push	{r3, lr}
   b87b2:	4b02      	ldr	r3, [pc, #8]	; (b87bc <os_mutex_recursive_destroy+0xc>)
   b87b4:	681b      	ldr	r3, [r3, #0]
   b87b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b87b8:	9301      	str	r3, [sp, #4]
   b87ba:	bd08      	pop	{r3, pc}
   b87bc:	00030248 	.word	0x00030248

000b87c0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b87c0:	b508      	push	{r3, lr}
   b87c2:	4b02      	ldr	r3, [pc, #8]	; (b87cc <os_mutex_recursive_lock+0xc>)
   b87c4:	681b      	ldr	r3, [r3, #0]
   b87c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b87c8:	9301      	str	r3, [sp, #4]
   b87ca:	bd08      	pop	{r3, pc}
   b87cc:	00030248 	.word	0x00030248

000b87d0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b87d0:	b508      	push	{r3, lr}
   b87d2:	4b02      	ldr	r3, [pc, #8]	; (b87dc <os_mutex_recursive_unlock+0xc>)
   b87d4:	681b      	ldr	r3, [r3, #0]
   b87d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b87d8:	9301      	str	r3, [sp, #4]
   b87da:	bd08      	pop	{r3, pc}
   b87dc:	00030248 	.word	0x00030248

000b87e0 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b87e0:	b508      	push	{r3, lr}
   b87e2:	4b02      	ldr	r3, [pc, #8]	; (b87ec <HAL_Core_Runtime_Info+0xc>)
   b87e4:	681b      	ldr	r3, [r3, #0]
   b87e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b87e8:	9301      	str	r3, [sp, #4]
   b87ea:	bd08      	pop	{r3, pc}
   b87ec:	00030234 	.word	0x00030234

000b87f0 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b87f0:	b508      	push	{r3, lr}
   b87f2:	4b02      	ldr	r3, [pc, #8]	; (b87fc <HAL_Feature_Set+0xc>)
   b87f4:	681b      	ldr	r3, [r3, #0]
   b87f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b87f8:	9301      	str	r3, [sp, #4]
   b87fa:	bd08      	pop	{r3, pc}
   b87fc:	00030234 	.word	0x00030234

000b8800 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8800:	b508      	push	{r3, lr}
   b8802:	4b02      	ldr	r3, [pc, #8]	; (b880c <HAL_RNG_GetRandomNumber+0xc>)
   b8804:	681b      	ldr	r3, [r3, #0]
   b8806:	685b      	ldr	r3, [r3, #4]
   b8808:	9301      	str	r3, [sp, #4]
   b880a:	bd08      	pop	{r3, pc}
   b880c:	00030218 	.word	0x00030218

000b8810 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8810:	b508      	push	{r3, lr}
   b8812:	4b02      	ldr	r3, [pc, #8]	; (b881c <HAL_Delay_Microseconds+0xc>)
   b8814:	681b      	ldr	r3, [r3, #0]
   b8816:	68db      	ldr	r3, [r3, #12]
   b8818:	9301      	str	r3, [sp, #4]
   b881a:	bd08      	pop	{r3, pc}
   b881c:	00030218 	.word	0x00030218

000b8820 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8820:	b508      	push	{r3, lr}
   b8822:	4b02      	ldr	r3, [pc, #8]	; (b882c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8824:	681b      	ldr	r3, [r3, #0]
   b8826:	695b      	ldr	r3, [r3, #20]
   b8828:	9301      	str	r3, [sp, #4]
   b882a:	bd08      	pop	{r3, pc}
   b882c:	00030218 	.word	0x00030218

000b8830 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8830:	b508      	push	{r3, lr}
   b8832:	4b02      	ldr	r3, [pc, #8]	; (b883c <hal_rtc_time_is_valid+0xc>)
   b8834:	681b      	ldr	r3, [r3, #0]
   b8836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8838:	9301      	str	r3, [sp, #4]
   b883a:	bd08      	pop	{r3, pc}
   b883c:	00030218 	.word	0x00030218

000b8840 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8840:	b508      	push	{r3, lr}
   b8842:	4b02      	ldr	r3, [pc, #8]	; (b884c <hal_timer_millis+0xc>)
   b8844:	681b      	ldr	r3, [r3, #0]
   b8846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8848:	9301      	str	r3, [sp, #4]
   b884a:	bd08      	pop	{r3, pc}
   b884c:	00030218 	.word	0x00030218

000b8850 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8850:	b508      	push	{r3, lr}
   b8852:	4b02      	ldr	r3, [pc, #8]	; (b885c <hal_rtc_get_time+0xc>)
   b8854:	681b      	ldr	r3, [r3, #0]
   b8856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8858:	9301      	str	r3, [sp, #4]
   b885a:	bd08      	pop	{r3, pc}
   b885c:	00030218 	.word	0x00030218

000b8860 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8860:	b508      	push	{r3, lr}
   b8862:	4b02      	ldr	r3, [pc, #8]	; (b886c <hal_rtc_set_time+0xc>)
   b8864:	681b      	ldr	r3, [r3, #0]
   b8866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8868:	9301      	str	r3, [sp, #4]
   b886a:	bd08      	pop	{r3, pc}
   b886c:	00030218 	.word	0x00030218

000b8870 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8870:	b508      	push	{r3, lr}
   b8872:	4b02      	ldr	r3, [pc, #8]	; (b887c <HAL_Pin_Map+0xc>)
   b8874:	681b      	ldr	r3, [r3, #0]
   b8876:	681b      	ldr	r3, [r3, #0]
   b8878:	9301      	str	r3, [sp, #4]
   b887a:	bd08      	pop	{r3, pc}
   b887c:	0003022c 	.word	0x0003022c

000b8880 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8880:	b508      	push	{r3, lr}
   b8882:	4b02      	ldr	r3, [pc, #8]	; (b888c <HAL_Validate_Pin_Function+0xc>)
   b8884:	681b      	ldr	r3, [r3, #0]
   b8886:	685b      	ldr	r3, [r3, #4]
   b8888:	9301      	str	r3, [sp, #4]
   b888a:	bd08      	pop	{r3, pc}
   b888c:	0003022c 	.word	0x0003022c

000b8890 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8890:	b508      	push	{r3, lr}
   b8892:	4b02      	ldr	r3, [pc, #8]	; (b889c <HAL_Pin_Mode+0xc>)
   b8894:	681b      	ldr	r3, [r3, #0]
   b8896:	689b      	ldr	r3, [r3, #8]
   b8898:	9301      	str	r3, [sp, #4]
   b889a:	bd08      	pop	{r3, pc}
   b889c:	0003022c 	.word	0x0003022c

000b88a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b88a0:	b508      	push	{r3, lr}
   b88a2:	4b02      	ldr	r3, [pc, #8]	; (b88ac <HAL_Get_Pin_Mode+0xc>)
   b88a4:	681b      	ldr	r3, [r3, #0]
   b88a6:	68db      	ldr	r3, [r3, #12]
   b88a8:	9301      	str	r3, [sp, #4]
   b88aa:	bd08      	pop	{r3, pc}
   b88ac:	0003022c 	.word	0x0003022c

000b88b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b88b0:	b508      	push	{r3, lr}
   b88b2:	4b02      	ldr	r3, [pc, #8]	; (b88bc <HAL_GPIO_Write+0xc>)
   b88b4:	681b      	ldr	r3, [r3, #0]
   b88b6:	691b      	ldr	r3, [r3, #16]
   b88b8:	9301      	str	r3, [sp, #4]
   b88ba:	bd08      	pop	{r3, pc}
   b88bc:	0003022c 	.word	0x0003022c

000b88c0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b88c0:	b508      	push	{r3, lr}
   b88c2:	4b02      	ldr	r3, [pc, #8]	; (b88cc <HAL_GPIO_Read+0xc>)
   b88c4:	681b      	ldr	r3, [r3, #0]
   b88c6:	695b      	ldr	r3, [r3, #20]
   b88c8:	9301      	str	r3, [sp, #4]
   b88ca:	bd08      	pop	{r3, pc}
   b88cc:	0003022c 	.word	0x0003022c

000b88d0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b88d0:	b508      	push	{r3, lr}
   b88d2:	4b02      	ldr	r3, [pc, #8]	; (b88dc <HAL_Interrupts_Attach+0xc>)
   b88d4:	681b      	ldr	r3, [r3, #0]
   b88d6:	699b      	ldr	r3, [r3, #24]
   b88d8:	9301      	str	r3, [sp, #4]
   b88da:	bd08      	pop	{r3, pc}
   b88dc:	0003022c 	.word	0x0003022c

000b88e0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b88e0:	b508      	push	{r3, lr}
   b88e2:	4b02      	ldr	r3, [pc, #8]	; (b88ec <HAL_Interrupts_Detach+0xc>)
   b88e4:	681b      	ldr	r3, [r3, #0]
   b88e6:	69db      	ldr	r3, [r3, #28]
   b88e8:	9301      	str	r3, [sp, #4]
   b88ea:	bd08      	pop	{r3, pc}
   b88ec:	0003022c 	.word	0x0003022c

000b88f0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b88f0:	b508      	push	{r3, lr}
   b88f2:	4b02      	ldr	r3, [pc, #8]	; (b88fc <hal_adc_read+0xc>)
   b88f4:	681b      	ldr	r3, [r3, #0]
   b88f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b88f8:	9301      	str	r3, [sp, #4]
   b88fa:	bd08      	pop	{r3, pc}
   b88fc:	0003022c 	.word	0x0003022c

000b8900 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8900:	b508      	push	{r3, lr}
   b8902:	4b02      	ldr	r3, [pc, #8]	; (b890c <hal_i2c_begin+0xc>)
   b8904:	681b      	ldr	r3, [r3, #0]
   b8906:	68db      	ldr	r3, [r3, #12]
   b8908:	9301      	str	r3, [sp, #4]
   b890a:	bd08      	pop	{r3, pc}
   b890c:	00030228 	.word	0x00030228

000b8910 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8910:	b508      	push	{r3, lr}
   b8912:	4b02      	ldr	r3, [pc, #8]	; (b891c <hal_i2c_begin_transmission+0xc>)
   b8914:	681b      	ldr	r3, [r3, #0]
   b8916:	699b      	ldr	r3, [r3, #24]
   b8918:	9301      	str	r3, [sp, #4]
   b891a:	bd08      	pop	{r3, pc}
   b891c:	00030228 	.word	0x00030228

000b8920 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8920:	b508      	push	{r3, lr}
   b8922:	4b02      	ldr	r3, [pc, #8]	; (b892c <hal_i2c_end_transmission+0xc>)
   b8924:	681b      	ldr	r3, [r3, #0]
   b8926:	69db      	ldr	r3, [r3, #28]
   b8928:	9301      	str	r3, [sp, #4]
   b892a:	bd08      	pop	{r3, pc}
   b892c:	00030228 	.word	0x00030228

000b8930 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8930:	b508      	push	{r3, lr}
   b8932:	4b02      	ldr	r3, [pc, #8]	; (b893c <hal_i2c_write+0xc>)
   b8934:	681b      	ldr	r3, [r3, #0]
   b8936:	6a1b      	ldr	r3, [r3, #32]
   b8938:	9301      	str	r3, [sp, #4]
   b893a:	bd08      	pop	{r3, pc}
   b893c:	00030228 	.word	0x00030228

000b8940 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8940:	b508      	push	{r3, lr}
   b8942:	4b02      	ldr	r3, [pc, #8]	; (b894c <hal_i2c_available+0xc>)
   b8944:	681b      	ldr	r3, [r3, #0]
   b8946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8948:	9301      	str	r3, [sp, #4]
   b894a:	bd08      	pop	{r3, pc}
   b894c:	00030228 	.word	0x00030228

000b8950 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8950:	b508      	push	{r3, lr}
   b8952:	4b02      	ldr	r3, [pc, #8]	; (b895c <hal_i2c_read+0xc>)
   b8954:	681b      	ldr	r3, [r3, #0]
   b8956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8958:	9301      	str	r3, [sp, #4]
   b895a:	bd08      	pop	{r3, pc}
   b895c:	00030228 	.word	0x00030228

000b8960 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8960:	b508      	push	{r3, lr}
   b8962:	4b02      	ldr	r3, [pc, #8]	; (b896c <hal_i2c_peek+0xc>)
   b8964:	681b      	ldr	r3, [r3, #0]
   b8966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8968:	9301      	str	r3, [sp, #4]
   b896a:	bd08      	pop	{r3, pc}
   b896c:	00030228 	.word	0x00030228

000b8970 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8970:	b508      	push	{r3, lr}
   b8972:	4b02      	ldr	r3, [pc, #8]	; (b897c <hal_i2c_flush+0xc>)
   b8974:	681b      	ldr	r3, [r3, #0]
   b8976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8978:	9301      	str	r3, [sp, #4]
   b897a:	bd08      	pop	{r3, pc}
   b897c:	00030228 	.word	0x00030228

000b8980 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8980:	b508      	push	{r3, lr}
   b8982:	4b02      	ldr	r3, [pc, #8]	; (b898c <hal_i2c_is_enabled+0xc>)
   b8984:	681b      	ldr	r3, [r3, #0]
   b8986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8988:	9301      	str	r3, [sp, #4]
   b898a:	bd08      	pop	{r3, pc}
   b898c:	00030228 	.word	0x00030228

000b8990 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8990:	b508      	push	{r3, lr}
   b8992:	4b02      	ldr	r3, [pc, #8]	; (b899c <hal_i2c_init+0xc>)
   b8994:	681b      	ldr	r3, [r3, #0]
   b8996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8998:	9301      	str	r3, [sp, #4]
   b899a:	bd08      	pop	{r3, pc}
   b899c:	00030228 	.word	0x00030228

000b89a0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b89a0:	b508      	push	{r3, lr}
   b89a2:	4b02      	ldr	r3, [pc, #8]	; (b89ac <hal_i2c_lock+0xc>)
   b89a4:	681b      	ldr	r3, [r3, #0]
   b89a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b89a8:	9301      	str	r3, [sp, #4]
   b89aa:	bd08      	pop	{r3, pc}
   b89ac:	00030228 	.word	0x00030228

000b89b0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b89b0:	b508      	push	{r3, lr}
   b89b2:	4b02      	ldr	r3, [pc, #8]	; (b89bc <hal_i2c_unlock+0xc>)
   b89b4:	681b      	ldr	r3, [r3, #0]
   b89b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b89b8:	9301      	str	r3, [sp, #4]
   b89ba:	bd08      	pop	{r3, pc}
   b89bc:	00030228 	.word	0x00030228

000b89c0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b89c0:	b508      	push	{r3, lr}
   b89c2:	4b02      	ldr	r3, [pc, #8]	; (b89cc <hal_i2c_request_ex+0xc>)
   b89c4:	681b      	ldr	r3, [r3, #0]
   b89c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b89c8:	9301      	str	r3, [sp, #4]
   b89ca:	bd08      	pop	{r3, pc}
   b89cc:	00030228 	.word	0x00030228

000b89d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b89d0:	b508      	push	{r3, lr}
   b89d2:	4b02      	ldr	r3, [pc, #8]	; (b89dc <inet_inet_ntop+0xc>)
   b89d4:	681b      	ldr	r3, [r3, #0]
   b89d6:	695b      	ldr	r3, [r3, #20]
   b89d8:	9301      	str	r3, [sp, #4]
   b89da:	bd08      	pop	{r3, pc}
   b89dc:	00030264 	.word	0x00030264

000b89e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b89e0:	b508      	push	{r3, lr}
   b89e2:	4b02      	ldr	r3, [pc, #8]	; (b89ec <netdb_freeaddrinfo+0xc>)
   b89e4:	681b      	ldr	r3, [r3, #0]
   b89e6:	689b      	ldr	r3, [r3, #8]
   b89e8:	9301      	str	r3, [sp, #4]
   b89ea:	bd08      	pop	{r3, pc}
   b89ec:	00030268 	.word	0x00030268

000b89f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b89f0:	b508      	push	{r3, lr}
   b89f2:	4b02      	ldr	r3, [pc, #8]	; (b89fc <netdb_getaddrinfo+0xc>)
   b89f4:	681b      	ldr	r3, [r3, #0]
   b89f6:	68db      	ldr	r3, [r3, #12]
   b89f8:	9301      	str	r3, [sp, #4]
   b89fa:	bd08      	pop	{r3, pc}
   b89fc:	00030268 	.word	0x00030268

000b8a00 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8a00:	b508      	push	{r3, lr}
   b8a02:	4b02      	ldr	r3, [pc, #8]	; (b8a0c <hal_spi_begin+0xc>)
   b8a04:	681b      	ldr	r3, [r3, #0]
   b8a06:	681b      	ldr	r3, [r3, #0]
   b8a08:	9301      	str	r3, [sp, #4]
   b8a0a:	bd08      	pop	{r3, pc}
   b8a0c:	00030230 	.word	0x00030230

000b8a10 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8a10:	b508      	push	{r3, lr}
   b8a12:	4b02      	ldr	r3, [pc, #8]	; (b8a1c <hal_spi_end+0xc>)
   b8a14:	681b      	ldr	r3, [r3, #0]
   b8a16:	685b      	ldr	r3, [r3, #4]
   b8a18:	9301      	str	r3, [sp, #4]
   b8a1a:	bd08      	pop	{r3, pc}
   b8a1c:	00030230 	.word	0x00030230

000b8a20 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8a20:	b508      	push	{r3, lr}
   b8a22:	4b02      	ldr	r3, [pc, #8]	; (b8a2c <hal_spi_transfer+0xc>)
   b8a24:	681b      	ldr	r3, [r3, #0]
   b8a26:	695b      	ldr	r3, [r3, #20]
   b8a28:	9301      	str	r3, [sp, #4]
   b8a2a:	bd08      	pop	{r3, pc}
   b8a2c:	00030230 	.word	0x00030230

000b8a30 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8a30:	b508      	push	{r3, lr}
   b8a32:	4b02      	ldr	r3, [pc, #8]	; (b8a3c <hal_spi_init+0xc>)
   b8a34:	681b      	ldr	r3, [r3, #0]
   b8a36:	69db      	ldr	r3, [r3, #28]
   b8a38:	9301      	str	r3, [sp, #4]
   b8a3a:	bd08      	pop	{r3, pc}
   b8a3c:	00030230 	.word	0x00030230

000b8a40 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8a40:	b508      	push	{r3, lr}
   b8a42:	4b02      	ldr	r3, [pc, #8]	; (b8a4c <hal_spi_is_enabled+0xc>)
   b8a44:	681b      	ldr	r3, [r3, #0]
   b8a46:	6a1b      	ldr	r3, [r3, #32]
   b8a48:	9301      	str	r3, [sp, #4]
   b8a4a:	bd08      	pop	{r3, pc}
   b8a4c:	00030230 	.word	0x00030230

000b8a50 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8a50:	b508      	push	{r3, lr}
   b8a52:	4b02      	ldr	r3, [pc, #8]	; (b8a5c <hal_spi_info+0xc>)
   b8a54:	681b      	ldr	r3, [r3, #0]
   b8a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8a58:	9301      	str	r3, [sp, #4]
   b8a5a:	bd08      	pop	{r3, pc}
   b8a5c:	00030230 	.word	0x00030230

000b8a60 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8a60:	b508      	push	{r3, lr}
   b8a62:	4b02      	ldr	r3, [pc, #8]	; (b8a6c <hal_spi_set_settings+0xc>)
   b8a64:	681b      	ldr	r3, [r3, #0]
   b8a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8a68:	9301      	str	r3, [sp, #4]
   b8a6a:	bd08      	pop	{r3, pc}
   b8a6c:	00030230 	.word	0x00030230

000b8a70 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8a70:	b508      	push	{r3, lr}
   b8a72:	4b02      	ldr	r3, [pc, #8]	; (b8a7c <hal_spi_acquire+0xc>)
   b8a74:	681b      	ldr	r3, [r3, #0]
   b8a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8a78:	9301      	str	r3, [sp, #4]
   b8a7a:	bd08      	pop	{r3, pc}
   b8a7c:	00030230 	.word	0x00030230

000b8a80 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8a80:	b508      	push	{r3, lr}
   b8a82:	4b02      	ldr	r3, [pc, #8]	; (b8a8c <hal_spi_release+0xc>)
   b8a84:	681b      	ldr	r3, [r3, #0]
   b8a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8a88:	9301      	str	r3, [sp, #4]
   b8a8a:	bd08      	pop	{r3, pc}
   b8a8c:	00030230 	.word	0x00030230

000b8a90 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b8a90:	b508      	push	{r3, lr}
   b8a92:	4b02      	ldr	r3, [pc, #8]	; (b8a9c <hal_usart_end+0xc>)
   b8a94:	681b      	ldr	r3, [r3, #0]
   b8a96:	689b      	ldr	r3, [r3, #8]
   b8a98:	9301      	str	r3, [sp, #4]
   b8a9a:	bd08      	pop	{r3, pc}
   b8a9c:	0003023c 	.word	0x0003023c

000b8aa0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8aa0:	b508      	push	{r3, lr}
   b8aa2:	4b02      	ldr	r3, [pc, #8]	; (b8aac <hal_usart_write+0xc>)
   b8aa4:	681b      	ldr	r3, [r3, #0]
   b8aa6:	68db      	ldr	r3, [r3, #12]
   b8aa8:	9301      	str	r3, [sp, #4]
   b8aaa:	bd08      	pop	{r3, pc}
   b8aac:	0003023c 	.word	0x0003023c

000b8ab0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8ab0:	b508      	push	{r3, lr}
   b8ab2:	4b02      	ldr	r3, [pc, #8]	; (b8abc <hal_usart_available+0xc>)
   b8ab4:	681b      	ldr	r3, [r3, #0]
   b8ab6:	691b      	ldr	r3, [r3, #16]
   b8ab8:	9301      	str	r3, [sp, #4]
   b8aba:	bd08      	pop	{r3, pc}
   b8abc:	0003023c 	.word	0x0003023c

000b8ac0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8ac0:	b508      	push	{r3, lr}
   b8ac2:	4b02      	ldr	r3, [pc, #8]	; (b8acc <hal_usart_read+0xc>)
   b8ac4:	681b      	ldr	r3, [r3, #0]
   b8ac6:	695b      	ldr	r3, [r3, #20]
   b8ac8:	9301      	str	r3, [sp, #4]
   b8aca:	bd08      	pop	{r3, pc}
   b8acc:	0003023c 	.word	0x0003023c

000b8ad0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8ad0:	b508      	push	{r3, lr}
   b8ad2:	4b02      	ldr	r3, [pc, #8]	; (b8adc <hal_usart_peek+0xc>)
   b8ad4:	681b      	ldr	r3, [r3, #0]
   b8ad6:	699b      	ldr	r3, [r3, #24]
   b8ad8:	9301      	str	r3, [sp, #4]
   b8ada:	bd08      	pop	{r3, pc}
   b8adc:	0003023c 	.word	0x0003023c

000b8ae0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8ae0:	b508      	push	{r3, lr}
   b8ae2:	4b02      	ldr	r3, [pc, #8]	; (b8aec <hal_usart_flush+0xc>)
   b8ae4:	681b      	ldr	r3, [r3, #0]
   b8ae6:	69db      	ldr	r3, [r3, #28]
   b8ae8:	9301      	str	r3, [sp, #4]
   b8aea:	bd08      	pop	{r3, pc}
   b8aec:	0003023c 	.word	0x0003023c

000b8af0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8af0:	b508      	push	{r3, lr}
   b8af2:	4b02      	ldr	r3, [pc, #8]	; (b8afc <hal_usart_is_enabled+0xc>)
   b8af4:	681b      	ldr	r3, [r3, #0]
   b8af6:	6a1b      	ldr	r3, [r3, #32]
   b8af8:	9301      	str	r3, [sp, #4]
   b8afa:	bd08      	pop	{r3, pc}
   b8afc:	0003023c 	.word	0x0003023c

000b8b00 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8b00:	b508      	push	{r3, lr}
   b8b02:	4b02      	ldr	r3, [pc, #8]	; (b8b0c <hal_usart_available_data_for_write+0xc>)
   b8b04:	681b      	ldr	r3, [r3, #0]
   b8b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8b08:	9301      	str	r3, [sp, #4]
   b8b0a:	bd08      	pop	{r3, pc}
   b8b0c:	0003023c 	.word	0x0003023c

000b8b10 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8b10:	b508      	push	{r3, lr}
   b8b12:	4b02      	ldr	r3, [pc, #8]	; (b8b1c <hal_usart_begin_config+0xc>)
   b8b14:	681b      	ldr	r3, [r3, #0]
   b8b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b18:	9301      	str	r3, [sp, #4]
   b8b1a:	bd08      	pop	{r3, pc}
   b8b1c:	0003023c 	.word	0x0003023c

000b8b20 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8b20:	b508      	push	{r3, lr}
   b8b22:	4b02      	ldr	r3, [pc, #8]	; (b8b2c <hal_usart_init_ex+0xc>)
   b8b24:	681b      	ldr	r3, [r3, #0]
   b8b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b28:	9301      	str	r3, [sp, #4]
   b8b2a:	bd08      	pop	{r3, pc}
   b8b2c:	0003023c 	.word	0x0003023c

000b8b30 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8b30:	b508      	push	{r3, lr}
   b8b32:	4b02      	ldr	r3, [pc, #8]	; (b8b3c <HAL_USB_USART_Init+0xc>)
   b8b34:	681b      	ldr	r3, [r3, #0]
   b8b36:	681b      	ldr	r3, [r3, #0]
   b8b38:	9301      	str	r3, [sp, #4]
   b8b3a:	bd08      	pop	{r3, pc}
   b8b3c:	0003024c 	.word	0x0003024c

000b8b40 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8b40:	b508      	push	{r3, lr}
   b8b42:	4b02      	ldr	r3, [pc, #8]	; (b8b4c <HAL_USB_USART_Begin+0xc>)
   b8b44:	681b      	ldr	r3, [r3, #0]
   b8b46:	685b      	ldr	r3, [r3, #4]
   b8b48:	9301      	str	r3, [sp, #4]
   b8b4a:	bd08      	pop	{r3, pc}
   b8b4c:	0003024c 	.word	0x0003024c

000b8b50 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b8b50:	b508      	push	{r3, lr}
   b8b52:	4b02      	ldr	r3, [pc, #8]	; (b8b5c <HAL_USB_USART_End+0xc>)
   b8b54:	681b      	ldr	r3, [r3, #0]
   b8b56:	689b      	ldr	r3, [r3, #8]
   b8b58:	9301      	str	r3, [sp, #4]
   b8b5a:	bd08      	pop	{r3, pc}
   b8b5c:	0003024c 	.word	0x0003024c

000b8b60 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8b60:	b508      	push	{r3, lr}
   b8b62:	4b02      	ldr	r3, [pc, #8]	; (b8b6c <HAL_USB_USART_Available_Data+0xc>)
   b8b64:	681b      	ldr	r3, [r3, #0]
   b8b66:	691b      	ldr	r3, [r3, #16]
   b8b68:	9301      	str	r3, [sp, #4]
   b8b6a:	bd08      	pop	{r3, pc}
   b8b6c:	0003024c 	.word	0x0003024c

000b8b70 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8b70:	b508      	push	{r3, lr}
   b8b72:	4b02      	ldr	r3, [pc, #8]	; (b8b7c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8b74:	681b      	ldr	r3, [r3, #0]
   b8b76:	695b      	ldr	r3, [r3, #20]
   b8b78:	9301      	str	r3, [sp, #4]
   b8b7a:	bd08      	pop	{r3, pc}
   b8b7c:	0003024c 	.word	0x0003024c

000b8b80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8b80:	b508      	push	{r3, lr}
   b8b82:	4b02      	ldr	r3, [pc, #8]	; (b8b8c <HAL_USB_USART_Receive_Data+0xc>)
   b8b84:	681b      	ldr	r3, [r3, #0]
   b8b86:	699b      	ldr	r3, [r3, #24]
   b8b88:	9301      	str	r3, [sp, #4]
   b8b8a:	bd08      	pop	{r3, pc}
   b8b8c:	0003024c 	.word	0x0003024c

000b8b90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8b90:	b508      	push	{r3, lr}
   b8b92:	4b02      	ldr	r3, [pc, #8]	; (b8b9c <HAL_USB_USART_Send_Data+0xc>)
   b8b94:	681b      	ldr	r3, [r3, #0]
   b8b96:	69db      	ldr	r3, [r3, #28]
   b8b98:	9301      	str	r3, [sp, #4]
   b8b9a:	bd08      	pop	{r3, pc}
   b8b9c:	0003024c 	.word	0x0003024c

000b8ba0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8ba0:	b508      	push	{r3, lr}
   b8ba2:	4b02      	ldr	r3, [pc, #8]	; (b8bac <HAL_USB_USART_Flush_Data+0xc>)
   b8ba4:	681b      	ldr	r3, [r3, #0]
   b8ba6:	6a1b      	ldr	r3, [r3, #32]
   b8ba8:	9301      	str	r3, [sp, #4]
   b8baa:	bd08      	pop	{r3, pc}
   b8bac:	0003024c 	.word	0x0003024c

000b8bb0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b8bb0:	b508      	push	{r3, lr}
   b8bb2:	4b02      	ldr	r3, [pc, #8]	; (b8bbc <HAL_USB_USART_Is_Connected+0xc>)
   b8bb4:	681b      	ldr	r3, [r3, #0]
   b8bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8bb8:	9301      	str	r3, [sp, #4]
   b8bba:	bd08      	pop	{r3, pc}
   b8bbc:	0003024c 	.word	0x0003024c

000b8bc0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8bc0:	b508      	push	{r3, lr}
   b8bc2:	4b02      	ldr	r3, [pc, #8]	; (b8bcc <panic_+0xc>)
   b8bc4:	681b      	ldr	r3, [r3, #0]
   b8bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8bc8:	9301      	str	r3, [sp, #4]
   b8bca:	bd08      	pop	{r3, pc}
   b8bcc:	00030260 	.word	0x00030260

000b8bd0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8bd0:	b508      	push	{r3, lr}
   b8bd2:	4b02      	ldr	r3, [pc, #8]	; (b8bdc <log_message+0xc>)
   b8bd4:	681b      	ldr	r3, [r3, #0]
   b8bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8bd8:	9301      	str	r3, [sp, #4]
   b8bda:	bd08      	pop	{r3, pc}
   b8bdc:	00030260 	.word	0x00030260

000b8be0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8be0:	b508      	push	{r3, lr}
   b8be2:	4b02      	ldr	r3, [pc, #8]	; (b8bec <log_message_v+0xc>)
   b8be4:	681b      	ldr	r3, [r3, #0]
   b8be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8be8:	9301      	str	r3, [sp, #4]
   b8bea:	bd08      	pop	{r3, pc}
   b8bec:	00030260 	.word	0x00030260

000b8bf0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8bf0:	b508      	push	{r3, lr}
   b8bf2:	4b02      	ldr	r3, [pc, #8]	; (b8bfc <log_level_name+0xc>)
   b8bf4:	681b      	ldr	r3, [r3, #0]
   b8bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8bf8:	9301      	str	r3, [sp, #4]
   b8bfa:	bd08      	pop	{r3, pc}
   b8bfc:	00030260 	.word	0x00030260

000b8c00 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8c00:	b508      	push	{r3, lr}
   b8c02:	4b02      	ldr	r3, [pc, #8]	; (b8c0c <log_set_callbacks+0xc>)
   b8c04:	681b      	ldr	r3, [r3, #0]
   b8c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8c08:	9301      	str	r3, [sp, #4]
   b8c0a:	bd08      	pop	{r3, pc}
   b8c0c:	00030260 	.word	0x00030260

000b8c10 <led_set_status_active>:
DYNALIB_FN(29, services, set_thread_current_function_pointers, void(void*, void*, void*, void*, void*))
DYNALIB_FN(30, services, get_default_system_error_message, const char*(int, void*))
DYNALIB_FN(31, services, LED_SetCallbacks, void(LedCallbacks, void*))
DYNALIB_FN(32, services, led_set_status_active, void(LEDStatusData*, int, void*))
   b8c10:	b508      	push	{r3, lr}
   b8c12:	4b03      	ldr	r3, [pc, #12]	; (b8c20 <led_set_status_active+0x10>)
   b8c14:	681b      	ldr	r3, [r3, #0]
   b8c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b8c1a:	9301      	str	r3, [sp, #4]
   b8c1c:	bd08      	pop	{r3, pc}
   b8c1e:	0000      	.short	0x0000
   b8c20:	00030260 	.word	0x00030260

000b8c24 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8c24:	b508      	push	{r3, lr}
   b8c26:	4b03      	ldr	r3, [pc, #12]	; (b8c34 <diag_get_source+0x10>)
   b8c28:	681b      	ldr	r3, [r3, #0]
   b8c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8c2e:	9301      	str	r3, [sp, #4]
   b8c30:	bd08      	pop	{r3, pc}
   b8c32:	0000      	.short	0x0000
   b8c34:	00030260 	.word	0x00030260

000b8c38 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8c38:	b508      	push	{r3, lr}
   b8c3a:	4b02      	ldr	r3, [pc, #8]	; (b8c44 <system_mode+0xc>)
   b8c3c:	681b      	ldr	r3, [r3, #0]
   b8c3e:	681b      	ldr	r3, [r3, #0]
   b8c40:	9301      	str	r3, [sp, #4]
   b8c42:	bd08      	pop	{r3, pc}
   b8c44:	00030220 	.word	0x00030220

000b8c48 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8c48:	b508      	push	{r3, lr}
   b8c4a:	4b02      	ldr	r3, [pc, #8]	; (b8c54 <set_system_mode+0xc>)
   b8c4c:	681b      	ldr	r3, [r3, #0]
   b8c4e:	685b      	ldr	r3, [r3, #4]
   b8c50:	9301      	str	r3, [sp, #4]
   b8c52:	bd08      	pop	{r3, pc}
   b8c54:	00030220 	.word	0x00030220

000b8c58 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8c58:	b508      	push	{r3, lr}
   b8c5a:	4b02      	ldr	r3, [pc, #8]	; (b8c64 <system_delay_ms+0xc>)
   b8c5c:	681b      	ldr	r3, [r3, #0]
   b8c5e:	695b      	ldr	r3, [r3, #20]
   b8c60:	9301      	str	r3, [sp, #4]
   b8c62:	bd08      	pop	{r3, pc}
   b8c64:	00030220 	.word	0x00030220

000b8c68 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b8c68:	b508      	push	{r3, lr}
   b8c6a:	4b02      	ldr	r3, [pc, #8]	; (b8c74 <system_subscribe_event+0xc>)
   b8c6c:	681b      	ldr	r3, [r3, #0]
   b8c6e:	6a1b      	ldr	r3, [r3, #32]
   b8c70:	9301      	str	r3, [sp, #4]
   b8c72:	bd08      	pop	{r3, pc}
   b8c74:	00030220 	.word	0x00030220

000b8c78 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b8c78:	b508      	push	{r3, lr}
   b8c7a:	4b02      	ldr	r3, [pc, #8]	; (b8c84 <system_thread_set_state+0xc>)
   b8c7c:	681b      	ldr	r3, [r3, #0]
   b8c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8c80:	9301      	str	r3, [sp, #4]
   b8c82:	bd08      	pop	{r3, pc}
   b8c84:	00030220 	.word	0x00030220

000b8c88 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b8c88:	b508      	push	{r3, lr}
   b8c8a:	4b02      	ldr	r3, [pc, #8]	; (b8c94 <system_thread_get_state+0xc>)
   b8c8c:	681b      	ldr	r3, [r3, #0]
   b8c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8c90:	9301      	str	r3, [sp, #4]
   b8c92:	bd08      	pop	{r3, pc}
   b8c94:	00030220 	.word	0x00030220

000b8c98 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b8c98:	b508      	push	{r3, lr}
   b8c9a:	4b02      	ldr	r3, [pc, #8]	; (b8ca4 <system_notify_time_changed+0xc>)
   b8c9c:	681b      	ldr	r3, [r3, #0]
   b8c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8ca0:	9301      	str	r3, [sp, #4]
   b8ca2:	bd08      	pop	{r3, pc}
   b8ca4:	00030220 	.word	0x00030220

000b8ca8 <led_pattern_period>:
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
DYNALIB_FN(BASE_IDX + 5, system, led_signal_status, const LEDStatusData*(int, void*))
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
   b8ca8:	b508      	push	{r3, lr}
   b8caa:	4b02      	ldr	r3, [pc, #8]	; (b8cb4 <led_pattern_period+0xc>)
   b8cac:	681b      	ldr	r3, [r3, #0]
   b8cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8cb0:	9301      	str	r3, [sp, #4]
   b8cb2:	bd08      	pop	{r3, pc}
   b8cb4:	00030220 	.word	0x00030220

000b8cb8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8cb8:	b508      	push	{r3, lr}
   b8cba:	4b03      	ldr	r3, [pc, #12]	; (b8cc8 <system_ctrl_set_app_request_handler+0x10>)
   b8cbc:	681b      	ldr	r3, [r3, #0]
   b8cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8cc2:	9301      	str	r3, [sp, #4]
   b8cc4:	bd08      	pop	{r3, pc}
   b8cc6:	0000      	.short	0x0000
   b8cc8:	00030220 	.word	0x00030220

000b8ccc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8ccc:	b508      	push	{r3, lr}
   b8cce:	4b03      	ldr	r3, [pc, #12]	; (b8cdc <system_ctrl_set_result+0x10>)
   b8cd0:	681b      	ldr	r3, [r3, #0]
   b8cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8cd6:	9301      	str	r3, [sp, #4]
   b8cd8:	bd08      	pop	{r3, pc}
   b8cda:	0000      	.short	0x0000
   b8cdc:	00030220 	.word	0x00030220

000b8ce0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b8ce0:	b508      	push	{r3, lr}
   b8ce2:	4b03      	ldr	r3, [pc, #12]	; (b8cf0 <system_power_management_set_config+0x10>)
   b8ce4:	681b      	ldr	r3, [r3, #0]
   b8ce6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b8cea:	9301      	str	r3, [sp, #4]
   b8cec:	bd08      	pop	{r3, pc}
   b8cee:	0000      	.short	0x0000
   b8cf0:	00030220 	.word	0x00030220

000b8cf4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8cf4:	b508      	push	{r3, lr}
   b8cf6:	4b03      	ldr	r3, [pc, #12]	; (b8d04 <system_sleep_ext+0x10>)
   b8cf8:	681b      	ldr	r3, [r3, #0]
   b8cfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b8cfe:	9301      	str	r3, [sp, #4]
   b8d00:	bd08      	pop	{r3, pc}
   b8d02:	0000      	.short	0x0000
   b8d04:	00030220 	.word	0x00030220

000b8d08 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b8d08:	b508      	push	{r3, lr}
   b8d0a:	4b03      	ldr	r3, [pc, #12]	; (b8d18 <system_reset+0x10>)
   b8d0c:	681b      	ldr	r3, [r3, #0]
   b8d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b8d12:	9301      	str	r3, [sp, #4]
   b8d14:	bd08      	pop	{r3, pc}
   b8d16:	0000      	.short	0x0000
   b8d18:	00030220 	.word	0x00030220

000b8d1c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8d1c:	b508      	push	{r3, lr}
   b8d1e:	4b02      	ldr	r3, [pc, #8]	; (b8d28 <spark_process+0xc>)
   b8d20:	681b      	ldr	r3, [r3, #0]
   b8d22:	689b      	ldr	r3, [r3, #8]
   b8d24:	9301      	str	r3, [sp, #4]
   b8d26:	bd08      	pop	{r3, pc}
   b8d28:	00030244 	.word	0x00030244

000b8d2c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b8d2c:	b508      	push	{r3, lr}
   b8d2e:	4b02      	ldr	r3, [pc, #8]	; (b8d38 <spark_cloud_flag_connect+0xc>)
   b8d30:	681b      	ldr	r3, [r3, #0]
   b8d32:	68db      	ldr	r3, [r3, #12]
   b8d34:	9301      	str	r3, [sp, #4]
   b8d36:	bd08      	pop	{r3, pc}
   b8d38:	00030244 	.word	0x00030244

000b8d3c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8d3c:	b508      	push	{r3, lr}
   b8d3e:	4b02      	ldr	r3, [pc, #8]	; (b8d48 <spark_cloud_flag_connected+0xc>)
   b8d40:	681b      	ldr	r3, [r3, #0]
   b8d42:	695b      	ldr	r3, [r3, #20]
   b8d44:	9301      	str	r3, [sp, #4]
   b8d46:	bd08      	pop	{r3, pc}
   b8d48:	00030244 	.word	0x00030244

000b8d4c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b8d4c:	b508      	push	{r3, lr}
   b8d4e:	4b02      	ldr	r3, [pc, #8]	; (b8d58 <spark_deviceID+0xc>)
   b8d50:	681b      	ldr	r3, [r3, #0]
   b8d52:	69db      	ldr	r3, [r3, #28]
   b8d54:	9301      	str	r3, [sp, #4]
   b8d56:	bd08      	pop	{r3, pc}
   b8d58:	00030244 	.word	0x00030244

000b8d5c <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8d5c:	b508      	push	{r3, lr}
   b8d5e:	4b02      	ldr	r3, [pc, #8]	; (b8d68 <spark_sync_time_pending+0xc>)
   b8d60:	681b      	ldr	r3, [r3, #0]
   b8d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8d64:	9301      	str	r3, [sp, #4]
   b8d66:	bd08      	pop	{r3, pc}
   b8d68:	00030244 	.word	0x00030244

000b8d6c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b8d6c:	b508      	push	{r3, lr}
   b8d6e:	4b02      	ldr	r3, [pc, #8]	; (b8d78 <spark_sync_time_last+0xc>)
   b8d70:	681b      	ldr	r3, [r3, #0]
   b8d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8d74:	9301      	str	r3, [sp, #4]
   b8d76:	bd08      	pop	{r3, pc}
   b8d78:	00030244 	.word	0x00030244

000b8d7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8d7c:	b508      	push	{r3, lr}
   b8d7e:	4b02      	ldr	r3, [pc, #8]	; (b8d88 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8d80:	681b      	ldr	r3, [r3, #0]
   b8d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8d84:	9301      	str	r3, [sp, #4]
   b8d86:	bd08      	pop	{r3, pc}
   b8d88:	00030244 	.word	0x00030244

000b8d8c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8d8c:	b508      	push	{r3, lr}
   b8d8e:	4b02      	ldr	r3, [pc, #8]	; (b8d98 <network_connect+0xc>)
   b8d90:	681b      	ldr	r3, [r3, #0]
   b8d92:	685b      	ldr	r3, [r3, #4]
   b8d94:	9301      	str	r3, [sp, #4]
   b8d96:	bd08      	pop	{r3, pc}
   b8d98:	00030240 	.word	0x00030240

000b8d9c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8d9c:	b508      	push	{r3, lr}
   b8d9e:	4b02      	ldr	r3, [pc, #8]	; (b8da8 <network_connecting+0xc>)
   b8da0:	681b      	ldr	r3, [r3, #0]
   b8da2:	689b      	ldr	r3, [r3, #8]
   b8da4:	9301      	str	r3, [sp, #4]
   b8da6:	bd08      	pop	{r3, pc}
   b8da8:	00030240 	.word	0x00030240

000b8dac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8dac:	b508      	push	{r3, lr}
   b8dae:	4b02      	ldr	r3, [pc, #8]	; (b8db8 <network_disconnect+0xc>)
   b8db0:	681b      	ldr	r3, [r3, #0]
   b8db2:	68db      	ldr	r3, [r3, #12]
   b8db4:	9301      	str	r3, [sp, #4]
   b8db6:	bd08      	pop	{r3, pc}
   b8db8:	00030240 	.word	0x00030240

000b8dbc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8dbc:	b508      	push	{r3, lr}
   b8dbe:	4b02      	ldr	r3, [pc, #8]	; (b8dc8 <network_ready+0xc>)
   b8dc0:	681b      	ldr	r3, [r3, #0]
   b8dc2:	691b      	ldr	r3, [r3, #16]
   b8dc4:	9301      	str	r3, [sp, #4]
   b8dc6:	bd08      	pop	{r3, pc}
   b8dc8:	00030240 	.word	0x00030240

000b8dcc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8dcc:	b508      	push	{r3, lr}
   b8dce:	4b02      	ldr	r3, [pc, #8]	; (b8dd8 <network_on+0xc>)
   b8dd0:	681b      	ldr	r3, [r3, #0]
   b8dd2:	695b      	ldr	r3, [r3, #20]
   b8dd4:	9301      	str	r3, [sp, #4]
   b8dd6:	bd08      	pop	{r3, pc}
   b8dd8:	00030240 	.word	0x00030240

000b8ddc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8ddc:	b508      	push	{r3, lr}
   b8dde:	4b02      	ldr	r3, [pc, #8]	; (b8de8 <network_off+0xc>)
   b8de0:	681b      	ldr	r3, [r3, #0]
   b8de2:	699b      	ldr	r3, [r3, #24]
   b8de4:	9301      	str	r3, [sp, #4]
   b8de6:	bd08      	pop	{r3, pc}
   b8de8:	00030240 	.word	0x00030240

000b8dec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8dec:	b508      	push	{r3, lr}
   b8dee:	4b02      	ldr	r3, [pc, #8]	; (b8df8 <network_listen+0xc>)
   b8df0:	681b      	ldr	r3, [r3, #0]
   b8df2:	69db      	ldr	r3, [r3, #28]
   b8df4:	9301      	str	r3, [sp, #4]
   b8df6:	bd08      	pop	{r3, pc}
   b8df8:	00030240 	.word	0x00030240

000b8dfc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8dfc:	b508      	push	{r3, lr}
   b8dfe:	4b02      	ldr	r3, [pc, #8]	; (b8e08 <network_listening+0xc>)
   b8e00:	681b      	ldr	r3, [r3, #0]
   b8e02:	6a1b      	ldr	r3, [r3, #32]
   b8e04:	9301      	str	r3, [sp, #4]
   b8e06:	bd08      	pop	{r3, pc}
   b8e08:	00030240 	.word	0x00030240

000b8e0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8e0c:	b508      	push	{r3, lr}
   b8e0e:	4b02      	ldr	r3, [pc, #8]	; (b8e18 <network_set_listen_timeout+0xc>)
   b8e10:	681b      	ldr	r3, [r3, #0]
   b8e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8e14:	9301      	str	r3, [sp, #4]
   b8e16:	bd08      	pop	{r3, pc}
   b8e18:	00030240 	.word	0x00030240

000b8e1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8e1c:	b508      	push	{r3, lr}
   b8e1e:	4b02      	ldr	r3, [pc, #8]	; (b8e28 <network_get_listen_timeout+0xc>)
   b8e20:	681b      	ldr	r3, [r3, #0]
   b8e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8e24:	9301      	str	r3, [sp, #4]
   b8e26:	bd08      	pop	{r3, pc}
   b8e28:	00030240 	.word	0x00030240

000b8e2c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8e2c:	b508      	push	{r3, lr}
   b8e2e:	4b02      	ldr	r3, [pc, #8]	; (b8e38 <network_is_on+0xc>)
   b8e30:	681b      	ldr	r3, [r3, #0]
   b8e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8e34:	9301      	str	r3, [sp, #4]
   b8e36:	bd08      	pop	{r3, pc}
   b8e38:	00030240 	.word	0x00030240

000b8e3c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8e3c:	b508      	push	{r3, lr}
   b8e3e:	4b02      	ldr	r3, [pc, #8]	; (b8e48 <network_is_off+0xc>)
   b8e40:	681b      	ldr	r3, [r3, #0]
   b8e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8e44:	9301      	str	r3, [sp, #4]
   b8e46:	bd08      	pop	{r3, pc}
   b8e48:	00030240 	.word	0x00030240

000b8e4c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8e4c:	b508      	push	{r3, lr}
   b8e4e:	4b02      	ldr	r3, [pc, #8]	; (b8e58 <malloc+0xc>)
   b8e50:	681b      	ldr	r3, [r3, #0]
   b8e52:	681b      	ldr	r3, [r3, #0]
   b8e54:	9301      	str	r3, [sp, #4]
   b8e56:	bd08      	pop	{r3, pc}
   b8e58:	0003021c 	.word	0x0003021c

000b8e5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8e5c:	b508      	push	{r3, lr}
   b8e5e:	4b02      	ldr	r3, [pc, #8]	; (b8e68 <free+0xc>)
   b8e60:	681b      	ldr	r3, [r3, #0]
   b8e62:	685b      	ldr	r3, [r3, #4]
   b8e64:	9301      	str	r3, [sp, #4]
   b8e66:	bd08      	pop	{r3, pc}
   b8e68:	0003021c 	.word	0x0003021c

000b8e6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8e6c:	b508      	push	{r3, lr}
   b8e6e:	4b02      	ldr	r3, [pc, #8]	; (b8e78 <realloc+0xc>)
   b8e70:	681b      	ldr	r3, [r3, #0]
   b8e72:	689b      	ldr	r3, [r3, #8]
   b8e74:	9301      	str	r3, [sp, #4]
   b8e76:	bd08      	pop	{r3, pc}
   b8e78:	0003021c 	.word	0x0003021c

000b8e7c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8e7c:	b508      	push	{r3, lr}
   b8e7e:	4b02      	ldr	r3, [pc, #8]	; (b8e88 <siprintf+0xc>)
   b8e80:	681b      	ldr	r3, [r3, #0]
   b8e82:	691b      	ldr	r3, [r3, #16]
   b8e84:	9301      	str	r3, [sp, #4]
   b8e86:	bd08      	pop	{r3, pc}
   b8e88:	0003021c 	.word	0x0003021c

000b8e8c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8e8c:	b508      	push	{r3, lr}
   b8e8e:	4b02      	ldr	r3, [pc, #8]	; (b8e98 <snprintf+0xc>)
   b8e90:	681b      	ldr	r3, [r3, #0]
   b8e92:	69db      	ldr	r3, [r3, #28]
   b8e94:	9301      	str	r3, [sp, #4]
   b8e96:	bd08      	pop	{r3, pc}
   b8e98:	0003021c 	.word	0x0003021c

000b8e9c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8e9c:	b508      	push	{r3, lr}
   b8e9e:	4b02      	ldr	r3, [pc, #8]	; (b8ea8 <vsnprintf+0xc>)
   b8ea0:	681b      	ldr	r3, [r3, #0]
   b8ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8ea4:	9301      	str	r3, [sp, #4]
   b8ea6:	bd08      	pop	{r3, pc}
   b8ea8:	0003021c 	.word	0x0003021c

000b8eac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8eac:	b508      	push	{r3, lr}
   b8eae:	4b02      	ldr	r3, [pc, #8]	; (b8eb8 <abort+0xc>)
   b8eb0:	681b      	ldr	r3, [r3, #0]
   b8eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8eb4:	9301      	str	r3, [sp, #4]
   b8eb6:	bd08      	pop	{r3, pc}
   b8eb8:	0003021c 	.word	0x0003021c

000b8ebc <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8ebc:	b508      	push	{r3, lr}
   b8ebe:	4b02      	ldr	r3, [pc, #8]	; (b8ec8 <__errno+0xc>)
   b8ec0:	681b      	ldr	r3, [r3, #0]
   b8ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8ec4:	9301      	str	r3, [sp, #4]
   b8ec6:	bd08      	pop	{r3, pc}
   b8ec8:	0003021c 	.word	0x0003021c

000b8ecc <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8ecc:	b508      	push	{r3, lr}
   b8ece:	4b02      	ldr	r3, [pc, #8]	; (b8ed8 <__assert_func+0xc>)
   b8ed0:	681b      	ldr	r3, [r3, #0]
   b8ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8ed4:	9301      	str	r3, [sp, #4]
   b8ed6:	bd08      	pop	{r3, pc}
   b8ed8:	0003021c 	.word	0x0003021c

000b8edc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8edc:	b508      	push	{r3, lr}
   b8ede:	4b02      	ldr	r3, [pc, #8]	; (b8ee8 <newlib_impure_ptr_callback+0xc>)
   b8ee0:	681b      	ldr	r3, [r3, #0]
   b8ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ee4:	9301      	str	r3, [sp, #4]
   b8ee6:	bd08      	pop	{r3, pc}
   b8ee8:	0003021c 	.word	0x0003021c

000b8eec <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b8eec:	b508      	push	{r3, lr}
   b8eee:	4b02      	ldr	r3, [pc, #8]	; (b8ef8 <strftime+0xc>)
   b8ef0:	681b      	ldr	r3, [r3, #0]
   b8ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8ef4:	9301      	str	r3, [sp, #4]
   b8ef6:	bd08      	pop	{r3, pc}
   b8ef8:	0003021c 	.word	0x0003021c

000b8efc <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8efc:	b508      	push	{r3, lr}
   b8efe:	4b02      	ldr	r3, [pc, #8]	; (b8f08 <localtime_r+0xc>)
   b8f00:	681b      	ldr	r3, [r3, #0]
   b8f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8f04:	9301      	str	r3, [sp, #4]
   b8f06:	bd08      	pop	{r3, pc}
   b8f08:	0003021c 	.word	0x0003021c

000b8f0c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8f0c:	b508      	push	{r3, lr}
   b8f0e:	4b02      	ldr	r3, [pc, #8]	; (b8f18 <gmtime_r+0xc>)
   b8f10:	681b      	ldr	r3, [r3, #0]
   b8f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8f14:	9301      	str	r3, [sp, #4]
   b8f16:	bd08      	pop	{r3, pc}
   b8f18:	0003021c 	.word	0x0003021c

000b8f1c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8f1c:	b508      	push	{r3, lr}
   b8f1e:	4b02      	ldr	r3, [pc, #8]	; (b8f28 <mktime+0xc>)
   b8f20:	681b      	ldr	r3, [r3, #0]
   b8f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8f24:	9301      	str	r3, [sp, #4]
   b8f26:	bd08      	pop	{r3, pc}
   b8f28:	0003021c 	.word	0x0003021c

000b8f2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8f2c:	2100      	movs	r1, #0
   b8f2e:	f7ff be93 	b.w	b8c58 <system_delay_ms>

000b8f32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b8f32:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8f34:	6843      	ldr	r3, [r0, #4]
   b8f36:	3b01      	subs	r3, #1
    {
   b8f38:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8f3a:	6043      	str	r3, [r0, #4]
   b8f3c:	b963      	cbnz	r3, b8f58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b8f3e:	6803      	ldr	r3, [r0, #0]
   b8f40:	689b      	ldr	r3, [r3, #8]
   b8f42:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8f44:	68a3      	ldr	r3, [r4, #8]
   b8f46:	3b01      	subs	r3, #1
   b8f48:	60a3      	str	r3, [r4, #8]
   b8f4a:	b92b      	cbnz	r3, b8f58 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8f4c:	6823      	ldr	r3, [r4, #0]
   b8f4e:	4620      	mov	r0, r4
   b8f50:	68db      	ldr	r3, [r3, #12]
        }
    }
   b8f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8f56:	4718      	bx	r3
    }
   b8f58:	bd10      	pop	{r4, pc}

000b8f5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8f5a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8f5c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8f60:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8f62:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8f66:	42ae      	cmp	r6, r5
   b8f68:	d004      	beq.n	b8f74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8f6a:	4628      	mov	r0, r5
   b8f6c:	f002 f830 	bl	bafd0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8f70:	3510      	adds	r5, #16
   b8f72:	e7f8      	b.n	b8f66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8f74:	6820      	ldr	r0, [r4, #0]
   b8f76:	f7ff ff71 	bl	b8e5c <free>
    AllocatorT::free(data_);
}
   b8f7a:	4620      	mov	r0, r4
   b8f7c:	bd70      	pop	{r4, r5, r6, pc}

000b8f7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b8f7e:	b510      	push	{r4, lr}
   b8f80:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b8f82:	6800      	ldr	r0, [r0, #0]
   b8f84:	b108      	cbz	r0, b8f8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b8f86:	f7ff ffd4 	bl	b8f32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b8f8a:	4620      	mov	r0, r4
   b8f8c:	bd10      	pop	{r4, pc}
	...

000b8f90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8f90:	4802      	ldr	r0, [pc, #8]	; (b8f9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8f92:	2300      	movs	r3, #0
   b8f94:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8f96:	f7ff bc03 	b.w	b87a0 <os_mutex_recursive_create>
   b8f9a:	bf00      	nop
   b8f9c:	2003e60c 	.word	0x2003e60c

000b8fa0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b8fa0:	2200      	movs	r2, #0
   b8fa2:	6840      	ldr	r0, [r0, #4]
   b8fa4:	4611      	mov	r1, r2
   b8fa6:	f7ff bf09 	b.w	b8dbc <network_ready>

000b8faa <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b8faa:	2200      	movs	r2, #0
   b8fac:	6840      	ldr	r0, [r0, #4]
   b8fae:	4611      	mov	r1, r2
   b8fb0:	f7ff bf24 	b.w	b8dfc <network_listening>

000b8fb4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8fb4:	2200      	movs	r2, #0
   b8fb6:	6840      	ldr	r0, [r0, #4]
   b8fb8:	4611      	mov	r1, r2
   b8fba:	f7ff bf2f 	b.w	b8e1c <network_get_listen_timeout>

000b8fbe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8fbe:	6840      	ldr	r0, [r0, #4]
   b8fc0:	2200      	movs	r2, #0
   b8fc2:	f7ff bf23 	b.w	b8e0c <network_set_listen_timeout>

000b8fc6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8fc6:	6840      	ldr	r0, [r0, #4]
   b8fc8:	2200      	movs	r2, #0
   b8fca:	f081 0101 	eor.w	r1, r1, #1
   b8fce:	f7ff bf0d 	b.w	b8dec <network_listen>

000b8fd2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8fd2:	2300      	movs	r3, #0
   b8fd4:	6840      	ldr	r0, [r0, #4]
   b8fd6:	461a      	mov	r2, r3
   b8fd8:	4619      	mov	r1, r3
   b8fda:	f7ff beff 	b.w	b8ddc <network_off>

000b8fde <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8fde:	2300      	movs	r3, #0
   b8fe0:	6840      	ldr	r0, [r0, #4]
   b8fe2:	461a      	mov	r2, r3
   b8fe4:	4619      	mov	r1, r3
   b8fe6:	f7ff bef1 	b.w	b8dcc <network_on>

000b8fea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8fea:	2200      	movs	r2, #0
   b8fec:	6840      	ldr	r0, [r0, #4]
   b8fee:	4611      	mov	r1, r2
   b8ff0:	f7ff bed4 	b.w	b8d9c <network_connecting>

000b8ff4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8ff4:	6840      	ldr	r0, [r0, #4]
   b8ff6:	2200      	movs	r2, #0
   b8ff8:	2102      	movs	r1, #2
   b8ffa:	f7ff bed7 	b.w	b8dac <network_disconnect>

000b8ffe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8ffe:	2300      	movs	r3, #0
   b9000:	6840      	ldr	r0, [r0, #4]
   b9002:	461a      	mov	r2, r3
   b9004:	f7ff bec2 	b.w	b8d8c <network_connect>

000b9008 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b9008:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b900a:	4b13      	ldr	r3, [pc, #76]	; (b9058 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b900c:	6003      	str	r3, [r0, #0]
   b900e:	2518      	movs	r5, #24
   b9010:	3330      	adds	r3, #48	; 0x30
   b9012:	b086      	sub	sp, #24
   b9014:	460e      	mov	r6, r1
   b9016:	6043      	str	r3, [r0, #4]
   b9018:	462a      	mov	r2, r5
   b901a:	2100      	movs	r1, #0
   b901c:	4604      	mov	r4, r0
   b901e:	3008      	adds	r0, #8
   b9020:	f004 fbd6 	bl	bd7d0 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b9024:	2200      	movs	r2, #0
   b9026:	6870      	ldr	r0, [r6, #4]
   b9028:	4611      	mov	r1, r2
   b902a:	f7ff fec7 	bl	b8dbc <network_ready>
   b902e:	b178      	cbz	r0, b9050 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b9030:	2100      	movs	r1, #0
   b9032:	462a      	mov	r2, r5
   b9034:	4668      	mov	r0, sp
   b9036:	f004 fbcb 	bl	bd7d0 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b903a:	4669      	mov	r1, sp
   b903c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b903e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b9042:	f7ff fba5 	bl	b8790 <cellular_signal>
   b9046:	b918      	cbnz	r0, b9050 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b9048:	4669      	mov	r1, sp
   b904a:	4620      	mov	r0, r4
   b904c:	f000 f8b8 	bl	b91c0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b9050:	4620      	mov	r0, r4
   b9052:	b006      	add	sp, #24
   b9054:	bd70      	pop	{r4, r5, r6, pc}
   b9056:	bf00      	nop
   b9058:	000bec78 	.word	0x000bec78

000b905c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b905c:	4b08      	ldr	r3, [pc, #32]	; (b9080 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b905e:	b510      	push	{r4, lr}
   b9060:	2428      	movs	r4, #40	; 0x28
   b9062:	4622      	mov	r2, r4
   b9064:	4618      	mov	r0, r3
   b9066:	2100      	movs	r1, #0
   b9068:	f004 fbb2 	bl	bd7d0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b906c:	4b05      	ldr	r3, [pc, #20]	; (b9084 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b906e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b9070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9074:	6042      	str	r2, [r0, #4]
   b9076:	2204      	movs	r2, #4
   b9078:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b907a:	4a03      	ldr	r2, [pc, #12]	; (b9088 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b907c:	601a      	str	r2, [r3, #0]
   b907e:	bd10      	pop	{r4, pc}
   b9080:	2003e618 	.word	0x2003e618
   b9084:	2003e610 	.word	0x2003e610
   b9088:	000bec3c 	.word	0x000bec3c

000b908c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b908c:	4770      	bx	lr

000b908e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b908e:	7b00      	ldrb	r0, [r0, #12]
   b9090:	4770      	bx	lr

000b9092 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b9092:	7b03      	ldrb	r3, [r0, #12]
   b9094:	b14b      	cbz	r3, b90aa <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b9096:	6903      	ldr	r3, [r0, #16]
   b9098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b909c:	d005      	beq.n	b90aa <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b909e:	6980      	ldr	r0, [r0, #24]
   b90a0:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b90a4:	bf18      	it	ne
   b90a6:	2001      	movne	r0, #1
   b90a8:	4770      	bx	lr
   b90aa:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b90ac:	4770      	bx	lr

000b90ae <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b90ae:	6803      	ldr	r3, [r0, #0]
   b90b0:	6a1b      	ldr	r3, [r3, #32]
   b90b2:	4718      	bx	r3

000b90b4 <_ZNK14CellularSignal7printToER5Print>:
{
   b90b4:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b90b6:	6803      	ldr	r3, [r0, #0]
{
   b90b8:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b90ba:	691b      	ldr	r3, [r3, #16]
{
   b90bc:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b90be:	4798      	blx	r3
   b90c0:	2102      	movs	r1, #2
   b90c2:	4628      	mov	r0, r5
   b90c4:	f001 fe60 	bl	bad88 <_ZN5Print5printEfi>
    n += p.print(',');
   b90c8:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b90ca:	4604      	mov	r4, r0
    n += p.print(',');
   b90cc:	4628      	mov	r0, r5
   b90ce:	f001 fd65 	bl	bab9c <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b90d2:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b90d4:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b90d6:	699b      	ldr	r3, [r3, #24]
   b90d8:	4630      	mov	r0, r6
   b90da:	4798      	blx	r3
   b90dc:	2102      	movs	r1, #2
   b90de:	4628      	mov	r0, r5
   b90e0:	f001 fe52 	bl	bad88 <_ZN5Print5printEfi>
}
   b90e4:	4420      	add	r0, r4
   b90e6:	bd70      	pop	{r4, r5, r6, pc}

000b90e8 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b90e8:	f1a0 0004 	sub.w	r0, r0, #4
   b90ec:	f7ff bfe2 	b.w	b90b4 <_ZNK14CellularSignal7printToER5Print>

000b90f0 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b90f0:	b510      	push	{r4, lr}
   b90f2:	2120      	movs	r1, #32
   b90f4:	4604      	mov	r4, r0
   b90f6:	f7fa ffd2 	bl	b409e <_ZdlPvj>
   b90fa:	4620      	mov	r0, r4
   b90fc:	bd10      	pop	{r4, pc}
	...

000b9100 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b9100:	7b03      	ldrb	r3, [r0, #12]
   b9102:	b17b      	cbz	r3, b9124 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b9104:	6943      	ldr	r3, [r0, #20]
   b9106:	2b00      	cmp	r3, #0
   b9108:	db0c      	blt.n	b9124 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b910a:	ee07 3a90 	vmov	s15, r3
   b910e:	ed9f 7a07 	vldr	s14, [pc, #28]	; b912c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b9112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9116:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b911a:	eddf 7a05 	vldr	s15, [pc, #20]	; b9130 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b911e:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9122:	4770      	bx	lr
    return -1.0f;
   b9124:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9128:	4770      	bx	lr
   b912a:	bf00      	nop
   b912c:	477fff00 	.word	0x477fff00
   b9130:	42c80000 	.word	0x42c80000

000b9134 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b9134:	7b03      	ldrb	r3, [r0, #12]
   b9136:	b163      	cbz	r3, b9152 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b9138:	6903      	ldr	r3, [r0, #16]
   b913a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b913e:	d008      	beq.n	b9152 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b9140:	ee07 3a90 	vmov	s15, r3
   b9144:	ed9f 7a04 	vldr	s14, [pc, #16]	; b9158 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b9148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b914c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b9150:	4770      	bx	lr
    return 0.0f;
   b9152:	ed9f 0a02 	vldr	s0, [pc, #8]	; b915c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b9156:	4770      	bx	lr
   b9158:	42c80000 	.word	0x42c80000
   b915c:	00000000 	.word	0x00000000

000b9160 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b9160:	7b03      	ldrb	r3, [r0, #12]
   b9162:	b17b      	cbz	r3, b9184 <_ZNK14CellularSignal10getQualityEv+0x24>
   b9164:	69c3      	ldr	r3, [r0, #28]
   b9166:	2b00      	cmp	r3, #0
   b9168:	db0c      	blt.n	b9184 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b916a:	ee07 3a90 	vmov	s15, r3
   b916e:	ed9f 7a07 	vldr	s14, [pc, #28]	; b918c <_ZNK14CellularSignal10getQualityEv+0x2c>
   b9172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b9176:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b917a:	eddf 7a05 	vldr	s15, [pc, #20]	; b9190 <_ZNK14CellularSignal10getQualityEv+0x30>
   b917e:	ee20 0a27 	vmul.f32	s0, s0, s15
   b9182:	4770      	bx	lr
    return -1.0f;
   b9184:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b9188:	4770      	bx	lr
   b918a:	bf00      	nop
   b918c:	477fff00 	.word	0x477fff00
   b9190:	42c80000 	.word	0x42c80000

000b9194 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b9194:	7b03      	ldrb	r3, [r0, #12]
   b9196:	b163      	cbz	r3, b91b2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b9198:	6983      	ldr	r3, [r0, #24]
   b919a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b919e:	d008      	beq.n	b91b2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b91a0:	ee07 3a90 	vmov	s15, r3
   b91a4:	ed9f 7a04 	vldr	s14, [pc, #16]	; b91b8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b91a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b91ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b91b0:	4770      	bx	lr
    return 0.0f;
   b91b2:	ed9f 0a02 	vldr	s0, [pc, #8]	; b91bc <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b91b6:	4770      	bx	lr
   b91b8:	42c80000 	.word	0x42c80000
   b91bc:	00000000 	.word	0x00000000

000b91c0 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b91c0:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b91c2:	460d      	mov	r5, r1
   b91c4:	f100 0408 	add.w	r4, r0, #8
   b91c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b91ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b91cc:	e895 0003 	ldmia.w	r5, {r0, r1}
   b91d0:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b91d4:	2001      	movs	r0, #1
   b91d6:	bd30      	pop	{r4, r5, pc}

000b91d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b91d8:	2200      	movs	r2, #0
   b91da:	6840      	ldr	r0, [r0, #4]
   b91dc:	4611      	mov	r1, r2
   b91de:	f7ff be0d 	b.w	b8dfc <network_listening>

000b91e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b91e2:	2200      	movs	r2, #0
   b91e4:	6840      	ldr	r0, [r0, #4]
   b91e6:	4611      	mov	r1, r2
   b91e8:	f7ff be18 	b.w	b8e1c <network_get_listen_timeout>

000b91ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b91ec:	6840      	ldr	r0, [r0, #4]
   b91ee:	2200      	movs	r2, #0
   b91f0:	f7ff be0c 	b.w	b8e0c <network_set_listen_timeout>

000b91f4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b91f4:	6840      	ldr	r0, [r0, #4]
   b91f6:	2200      	movs	r2, #0
   b91f8:	f081 0101 	eor.w	r1, r1, #1
   b91fc:	f7ff bdf6 	b.w	b8dec <network_listen>

000b9200 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9200:	2300      	movs	r3, #0
   b9202:	6840      	ldr	r0, [r0, #4]
   b9204:	461a      	mov	r2, r3
   b9206:	4619      	mov	r1, r3
   b9208:	f7ff bde8 	b.w	b8ddc <network_off>

000b920c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b920c:	2300      	movs	r3, #0
   b920e:	6840      	ldr	r0, [r0, #4]
   b9210:	461a      	mov	r2, r3
   b9212:	4619      	mov	r1, r3
   b9214:	f7ff bdda 	b.w	b8dcc <network_on>

000b9218 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9218:	2200      	movs	r2, #0
   b921a:	6840      	ldr	r0, [r0, #4]
   b921c:	4611      	mov	r1, r2
   b921e:	f7ff bdcd 	b.w	b8dbc <network_ready>

000b9222 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9222:	2200      	movs	r2, #0
   b9224:	6840      	ldr	r0, [r0, #4]
   b9226:	4611      	mov	r1, r2
   b9228:	f7ff bdb8 	b.w	b8d9c <network_connecting>

000b922c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b922c:	6840      	ldr	r0, [r0, #4]
   b922e:	2200      	movs	r2, #0
   b9230:	2102      	movs	r1, #2
   b9232:	f7ff bdbb 	b.w	b8dac <network_disconnect>

000b9236 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9236:	2300      	movs	r3, #0
   b9238:	6840      	ldr	r0, [r0, #4]
   b923a:	461a      	mov	r2, r3
   b923c:	f7ff bda6 	b.w	b8d8c <network_connect>

000b9240 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b9240:	4b02      	ldr	r3, [pc, #8]	; (b924c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9242:	2203      	movs	r2, #3
   b9244:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9246:	4a02      	ldr	r2, [pc, #8]	; (b9250 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9248:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b924a:	4770      	bx	lr
   b924c:	2003e640 	.word	0x2003e640
   b9250:	000becb4 	.word	0x000becb4

000b9254 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b9254:	6800      	ldr	r0, [r0, #0]
   b9256:	f000 b8e7 	b.w	b9428 <_ZN7TwoWire4lockEv>

000b925a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b925a:	b510      	push	{r4, lr}
   b925c:	4604      	mov	r4, r0
      lock_(_lock) {
   b925e:	6001      	str	r1, [r0, #0]
   b9260:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b9262:	b10a      	cbz	r2, b9268 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b9264:	f7ff fff6 	bl	b9254 <_ZN9FuelGauge4lockEv>
}
   b9268:	4620      	mov	r0, r4
   b926a:	bd10      	pop	{r4, pc}

000b926c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b926c:	b513      	push	{r0, r1, r4, lr}
   b926e:	4604      	mov	r4, r0
   b9270:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b9272:	f002 fc3d 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b9276:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b9278:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b927a:	4620      	mov	r0, r4
   b927c:	f7ff ffed 	bl	b925a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b9280:	4620      	mov	r0, r4
   b9282:	b002      	add	sp, #8
   b9284:	bd10      	pop	{r4, pc}

000b9286 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b9286:	6800      	ldr	r0, [r0, #0]
   b9288:	f000 b8d7 	b.w	b943a <_ZN7TwoWire6unlockEv>

000b928c <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b928c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9290:	4604      	mov	r4, r0
   b9292:	461d      	mov	r5, r3
   b9294:	460f      	mov	r7, r1
   b9296:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b9298:	f7ff ffdc 	bl	b9254 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b929c:	2236      	movs	r2, #54	; 0x36
   b929e:	2300      	movs	r3, #0
   b92a0:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b92a4:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b92a6:	f04f 0801 	mov.w	r8, #1
   b92aa:	230a      	movs	r3, #10
   b92ac:	4669      	mov	r1, sp
   b92ae:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b92b2:	f000 f89d 	bl	b93f0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b92b6:	6820      	ldr	r0, [r4, #0]
   b92b8:	6803      	ldr	r3, [r0, #0]
   b92ba:	4639      	mov	r1, r7
   b92bc:	689b      	ldr	r3, [r3, #8]
   b92be:	4798      	blx	r3
    i2c_.write(MSB);
   b92c0:	6820      	ldr	r0, [r4, #0]
   b92c2:	6803      	ldr	r3, [r0, #0]
   b92c4:	4631      	mov	r1, r6
   b92c6:	689b      	ldr	r3, [r3, #8]
   b92c8:	4798      	blx	r3
    i2c_.write(LSB);
   b92ca:	6820      	ldr	r0, [r4, #0]
   b92cc:	6803      	ldr	r3, [r0, #0]
   b92ce:	4629      	mov	r1, r5
   b92d0:	689b      	ldr	r3, [r3, #8]
   b92d2:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b92d4:	4641      	mov	r1, r8
   b92d6:	6820      	ldr	r0, [r4, #0]
   b92d8:	f000 f8a2 	bl	b9420 <_ZN7TwoWire15endTransmissionEh>
   b92dc:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b92de:	4620      	mov	r0, r4
   b92e0:	bf0c      	ite	eq
   b92e2:	2500      	moveq	r5, #0
   b92e4:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b92e8:	f7ff ffcd 	bl	b9286 <_ZN9FuelGauge6unlockEv>
}
   b92ec:	4628      	mov	r0, r5
   b92ee:	b004      	add	sp, #16
   b92f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b92f4 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b92f4:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b92f6:	2240      	movs	r2, #64	; 0x40
   b92f8:	2300      	movs	r3, #0
   b92fa:	2106      	movs	r1, #6
   b92fc:	f7ff ffc6 	bl	b928c <_ZN9FuelGauge13writeRegisterEhhh>
}
   b9300:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9304:	bd08      	pop	{r3, pc}

000b9306 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b9306:	4770      	bx	lr

000b9308 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b9308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b930a:	4606      	mov	r6, r0
   b930c:	4615      	mov	r5, r2
   b930e:	460c      	mov	r4, r1
   b9310:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9312:	42bc      	cmp	r4, r7
   b9314:	d006      	beq.n	b9324 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b9316:	6833      	ldr	r3, [r6, #0]
   b9318:	f814 1b01 	ldrb.w	r1, [r4], #1
   b931c:	689b      	ldr	r3, [r3, #8]
   b931e:	4630      	mov	r0, r6
   b9320:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9322:	e7f6      	b.n	b9312 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9324:	4628      	mov	r0, r5
   b9326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9328 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b9328:	7c00      	ldrb	r0, [r0, #16]
   b932a:	2200      	movs	r2, #0
   b932c:	f7ff bb00 	b.w	b8930 <hal_i2c_write>

000b9330 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9330:	7c00      	ldrb	r0, [r0, #16]
   b9332:	2100      	movs	r1, #0
   b9334:	f7ff bb04 	b.w	b8940 <hal_i2c_available>

000b9338 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b9338:	7c00      	ldrb	r0, [r0, #16]
   b933a:	2100      	movs	r1, #0
   b933c:	f7ff bb08 	b.w	b8950 <hal_i2c_read>

000b9340 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b9340:	7c00      	ldrb	r0, [r0, #16]
   b9342:	2100      	movs	r1, #0
   b9344:	f7ff bb0c 	b.w	b8960 <hal_i2c_peek>

000b9348 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b9348:	7c00      	ldrb	r0, [r0, #16]
   b934a:	2100      	movs	r1, #0
   b934c:	f7ff bb10 	b.w	b8970 <hal_i2c_flush>

000b9350 <_ZN7TwoWireD0Ev>:
   b9350:	b510      	push	{r4, lr}
   b9352:	2114      	movs	r1, #20
   b9354:	4604      	mov	r4, r0
   b9356:	f7fa fea2 	bl	b409e <_ZdlPvj>
   b935a:	4620      	mov	r0, r4
   b935c:	bd10      	pop	{r4, pc}
	...

000b9360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b9360:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b9362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9366:	4604      	mov	r4, r0
   b9368:	4608      	mov	r0, r1
   b936a:	2100      	movs	r1, #0
   b936c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b9370:	4b03      	ldr	r3, [pc, #12]	; (b9380 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b9372:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b9374:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b9376:	4611      	mov	r1, r2
   b9378:	f7ff fb0a 	bl	b8990 <hal_i2c_init>
}
   b937c:	4620      	mov	r0, r4
   b937e:	bd10      	pop	{r4, pc}
   b9380:	000becf0 	.word	0x000becf0

000b9384 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b9384:	2300      	movs	r3, #0
   b9386:	7c00      	ldrb	r0, [r0, #16]
   b9388:	461a      	mov	r2, r3
   b938a:	4619      	mov	r1, r3
   b938c:	f7ff bab8 	b.w	b8900 <hal_i2c_begin>

000b9390 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b9390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9392:	2200      	movs	r2, #0
   b9394:	2314      	movs	r3, #20
   b9396:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b939a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b939e:	780b      	ldrb	r3, [r1, #0]
   b93a0:	f88d 3008 	strb.w	r3, [sp, #8]
   b93a4:	684b      	ldr	r3, [r1, #4]
   b93a6:	9303      	str	r3, [sp, #12]
   b93a8:	68cb      	ldr	r3, [r1, #12]
   b93aa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b93ac:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b93ae:	7a0b      	ldrb	r3, [r1, #8]
   b93b0:	9305      	str	r3, [sp, #20]
   b93b2:	a901      	add	r1, sp, #4
   b93b4:	f7ff fb04 	bl	b89c0 <hal_i2c_request_ex>
}
   b93b8:	b007      	add	sp, #28
   b93ba:	f85d fb04 	ldr.w	pc, [sp], #4

000b93be <_ZN7TwoWire11requestFromEhjh>:
{
   b93be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b93c0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b93c2:	f88d 1000 	strb.w	r1, [sp]
   b93c6:	f04f 0164 	mov.w	r1, #100	; 0x64
   b93ca:	9103      	str	r1, [sp, #12]
   b93cc:	bf18      	it	ne
   b93ce:	2301      	movne	r3, #1
   b93d0:	4669      	mov	r1, sp
    size_ = size;
   b93d2:	9201      	str	r2, [sp, #4]
   b93d4:	f88d 3008 	strb.w	r3, [sp, #8]
   b93d8:	f7ff ffda 	bl	b9390 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b93dc:	b005      	add	sp, #20
   b93de:	f85d fb04 	ldr.w	pc, [sp], #4

000b93e2 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b93e2:	7c00      	ldrb	r0, [r0, #16]
   b93e4:	2200      	movs	r2, #0
   b93e6:	f7ff ba93 	b.w	b8910 <hal_i2c_begin_transmission>

000b93ea <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b93ea:	b2c9      	uxtb	r1, r1
   b93ec:	f7ff bff9 	b.w	b93e2 <_ZN7TwoWire17beginTransmissionEh>

000b93f0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b93f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b93f2:	2300      	movs	r3, #0
   b93f4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b93f8:	684a      	ldr	r2, [r1, #4]
   b93fa:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b93fc:	2314      	movs	r3, #20
    };
   b93fe:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9400:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b9404:	780b      	ldrb	r3, [r1, #0]
    };
   b9406:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9408:	7a0a      	ldrb	r2, [r1, #8]
   b940a:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b940c:	7c00      	ldrb	r0, [r0, #16]
    };
   b940e:	f88d 3008 	strb.w	r3, [sp, #8]
   b9412:	aa01      	add	r2, sp, #4
   b9414:	4619      	mov	r1, r3
   b9416:	f7ff fa7b 	bl	b8910 <hal_i2c_begin_transmission>
}
   b941a:	b007      	add	sp, #28
   b941c:	f85d fb04 	ldr.w	pc, [sp], #4

000b9420 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9420:	7c00      	ldrb	r0, [r0, #16]
   b9422:	2200      	movs	r2, #0
   b9424:	f7ff ba7c 	b.w	b8920 <hal_i2c_end_transmission>

000b9428 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b9428:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b942a:	2100      	movs	r1, #0
   b942c:	7c00      	ldrb	r0, [r0, #16]
   b942e:	f7ff fab7 	bl	b89a0 <hal_i2c_lock>
}
   b9432:	fab0 f080 	clz	r0, r0
   b9436:	0940      	lsrs	r0, r0, #5
   b9438:	bd08      	pop	{r3, pc}

000b943a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b943a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b943c:	2100      	movs	r1, #0
   b943e:	7c00      	ldrb	r0, [r0, #16]
   b9440:	f7ff fab6 	bl	b89b0 <hal_i2c_unlock>
}
   b9444:	fab0 f080 	clz	r0, r0
   b9448:	0940      	lsrs	r0, r0, #5
   b944a:	bd08      	pop	{r3, pc}

000b944c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b944c:	4700      	bx	r0
	...

000b9450 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b9450:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9454:	2400      	movs	r4, #0
{
   b9456:	461d      	mov	r5, r3
   b9458:	460f      	mov	r7, r1
   b945a:	4690      	mov	r8, r2
   b945c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b945e:	f7ff fa3f 	bl	b88e0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b9462:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9464:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b9468:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b946c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b9470:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9474:	bfa2      	ittt	ge
   b9476:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b947a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b947e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9480:	4907      	ldr	r1, [pc, #28]	; (b94a0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b9482:	9400      	str	r4, [sp, #0]
   b9484:	4643      	mov	r3, r8
   b9486:	463a      	mov	r2, r7
   b9488:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b948a:	bfa8      	it	ge
   b948c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b9490:	f7ff fa1e 	bl	b88d0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9494:	fab0 f080 	clz	r0, r0
   b9498:	0940      	lsrs	r0, r0, #5
   b949a:	b004      	add	sp, #16
   b949c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b94a0:	000b944d 	.word	0x000b944d

000b94a4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b94a4:	4770      	bx	lr

000b94a6 <_ZN9IPAddressD0Ev>:
   b94a6:	b510      	push	{r4, lr}
   b94a8:	2118      	movs	r1, #24
   b94aa:	4604      	mov	r4, r0
   b94ac:	f7fa fdf7 	bl	b409e <_ZdlPvj>
   b94b0:	4620      	mov	r0, r4
   b94b2:	bd10      	pop	{r4, pc}

000b94b4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b94b4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b94b6:	7d03      	ldrb	r3, [r0, #20]
   b94b8:	2b06      	cmp	r3, #6
{
   b94ba:	b08d      	sub	sp, #52	; 0x34
   b94bc:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b94be:	f100 0704 	add.w	r7, r0, #4
   b94c2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b94c6:	d012      	beq.n	b94ee <_ZNK9IPAddress7printToER5Print+0x3a>
   b94c8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b94cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b94d0:	220a      	movs	r2, #10
   b94d2:	4630      	mov	r0, r6
   b94d4:	f001 fb71 	bl	babba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b94d8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b94da:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b94dc:	d019      	beq.n	b9512 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b94de:	2c00      	cmp	r4, #0
   b94e0:	d0f4      	beq.n	b94cc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b94e2:	212e      	movs	r1, #46	; 0x2e
   b94e4:	4630      	mov	r0, r6
   b94e6:	f001 fb59 	bl	bab9c <_ZN5Print5printEc>
   b94ea:	4404      	add	r4, r0
   b94ec:	e7ee      	b.n	b94cc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b94ee:	232f      	movs	r3, #47	; 0x2f
   b94f0:	466a      	mov	r2, sp
   b94f2:	4639      	mov	r1, r7
   b94f4:	200a      	movs	r0, #10
		buf[0] = 0;
   b94f6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b94fa:	f7ff fa69 	bl	b89d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b94fe:	4668      	mov	r0, sp
   b9500:	f004 fa03 	bl	bd90a <strlen>
   b9504:	6833      	ldr	r3, [r6, #0]
   b9506:	4602      	mov	r2, r0
   b9508:	68db      	ldr	r3, [r3, #12]
   b950a:	4669      	mov	r1, sp
   b950c:	4630      	mov	r0, r6
   b950e:	4798      	blx	r3
   b9510:	4604      	mov	r4, r0
    }
    return n;
}
   b9512:	4620      	mov	r0, r4
   b9514:	b00d      	add	sp, #52	; 0x34
   b9516:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9518 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b9518:	b510      	push	{r4, lr}
   b951a:	4b05      	ldr	r3, [pc, #20]	; (b9530 <_ZN9IPAddressC1Ev+0x18>)
   b951c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b951e:	2211      	movs	r2, #17
   b9520:	f840 3b04 	str.w	r3, [r0], #4
   b9524:	2100      	movs	r1, #0
   b9526:	f004 f953 	bl	bd7d0 <memset>
}
   b952a:	4620      	mov	r0, r4
   b952c:	bd10      	pop	{r4, pc}
   b952e:	bf00      	nop
   b9530:	000bed18 	.word	0x000bed18

000b9534 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9534:	4603      	mov	r3, r0
   b9536:	4a07      	ldr	r2, [pc, #28]	; (b9554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9538:	b510      	push	{r4, lr}
   b953a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b953e:	f101 0210 	add.w	r2, r1, #16
   b9542:	f851 4b04 	ldr.w	r4, [r1], #4
   b9546:	f843 4b04 	str.w	r4, [r3], #4
   b954a:	4291      	cmp	r1, r2
   b954c:	d1f9      	bne.n	b9542 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b954e:	780a      	ldrb	r2, [r1, #0]
   b9550:	701a      	strb	r2, [r3, #0]
}
   b9552:	bd10      	pop	{r4, pc}
   b9554:	000bed18 	.word	0x000bed18

000b9558 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9558:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b955a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b955e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b9562:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9566:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b956a:	2304      	movs	r3, #4
   b956c:	6041      	str	r1, [r0, #4]
   b956e:	7503      	strb	r3, [r0, #20]
}
   b9570:	bd10      	pop	{r4, pc}
	...

000b9574 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9574:	b507      	push	{r0, r1, r2, lr}
   b9576:	4b06      	ldr	r3, [pc, #24]	; (b9590 <_ZN9IPAddressC1EPKh+0x1c>)
   b9578:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b957a:	78cb      	ldrb	r3, [r1, #3]
   b957c:	9300      	str	r3, [sp, #0]
   b957e:	788b      	ldrb	r3, [r1, #2]
   b9580:	784a      	ldrb	r2, [r1, #1]
   b9582:	7809      	ldrb	r1, [r1, #0]
   b9584:	f7ff ffe8 	bl	b9558 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9588:	b003      	add	sp, #12
   b958a:	f85d fb04 	ldr.w	pc, [sp], #4
   b958e:	bf00      	nop
   b9590:	000bed18 	.word	0x000bed18

000b9594 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b9594:	f100 0310 	add.w	r3, r0, #16
   b9598:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b959a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b959e:	2901      	cmp	r1, #1
   b95a0:	4618      	mov	r0, r3
   b95a2:	d108      	bne.n	b95b6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b95a4:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b95a8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b95ac:	3a01      	subs	r2, #1
   b95ae:	f103 0310 	add.w	r3, r3, #16
   b95b2:	d1f2      	bne.n	b959a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b95b4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b95b6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b95b8:	bf04      	itt	eq
   b95ba:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b95be:	1852      	addeq	r2, r2, r1
   b95c0:	e7f4      	b.n	b95ac <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b95c2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b95c2:	b40e      	push	{r1, r2, r3}
   b95c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b95c6:	b088      	sub	sp, #32
   b95c8:	af00      	add	r7, sp, #0
   b95ca:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b95ce:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b95d0:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b95d4:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b95d6:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b95d8:	462b      	mov	r3, r5
   b95da:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b95dc:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b95de:	f7ff fc5d 	bl	b8e9c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b95e2:	280f      	cmp	r0, #15
   b95e4:	687a      	ldr	r2, [r7, #4]
   b95e6:	d91a      	bls.n	b961e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b95e8:	f100 0308 	add.w	r3, r0, #8
   b95ec:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b95f0:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b95f2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b95f6:	1c41      	adds	r1, r0, #1
   b95f8:	462b      	mov	r3, r5
   b95fa:	4668      	mov	r0, sp
        va_start(args, fmt);
   b95fc:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b95fe:	f7ff fc4d 	bl	b8e9c <vsnprintf>
        if (n > 0) {
   b9602:	1e02      	subs	r2, r0, #0
   b9604:	dd04      	ble.n	b9610 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b9606:	6823      	ldr	r3, [r4, #0]
   b9608:	4669      	mov	r1, sp
   b960a:	689b      	ldr	r3, [r3, #8]
   b960c:	4620      	mov	r0, r4
   b960e:	4798      	blx	r3
   b9610:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b9612:	3720      	adds	r7, #32
   b9614:	46bd      	mov	sp, r7
   b9616:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b961a:	b003      	add	sp, #12
   b961c:	4770      	bx	lr
    } else if (n > 0) {
   b961e:	2800      	cmp	r0, #0
   b9620:	d0f7      	beq.n	b9612 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b9622:	6823      	ldr	r3, [r4, #0]
   b9624:	4602      	mov	r2, r0
   b9626:	689b      	ldr	r3, [r3, #8]
   b9628:	f107 0110 	add.w	r1, r7, #16
   b962c:	4620      	mov	r0, r4
   b962e:	4798      	blx	r3
}
   b9630:	e7ef      	b.n	b9612 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b9632 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9632:	b538      	push	{r3, r4, r5, lr}
   b9634:	680b      	ldr	r3, [r1, #0]
   b9636:	6003      	str	r3, [r0, #0]
   b9638:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b963a:	6843      	ldr	r3, [r0, #4]
   b963c:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b963e:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b9640:	d008      	beq.n	b9654 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b9642:	b115      	cbz	r5, b964a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b9644:	686b      	ldr	r3, [r5, #4]
   b9646:	3301      	adds	r3, #1
   b9648:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b964a:	6860      	ldr	r0, [r4, #4]
   b964c:	b108      	cbz	r0, b9652 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b964e:	f7ff fc70 	bl	b8f32 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b9652:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9654:	bd38      	pop	{r3, r4, r5, pc}

000b9656 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b9656:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9658:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b965a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b965e:	689b      	ldr	r3, [r3, #8]
   b9660:	2201      	movs	r2, #1
   b9662:	f10d 0107 	add.w	r1, sp, #7
   b9666:	4798      	blx	r3
}
   b9668:	b003      	add	sp, #12
   b966a:	f85d fb04 	ldr.w	pc, [sp], #4

000b966e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b966e:	460b      	mov	r3, r1
   b9670:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b9672:	2200      	movs	r2, #0
   b9674:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b9676:	e9c0 2200 	strd	r2, r2, [r0]
   b967a:	4604      	mov	r4, r0
        t_ = t;
   b967c:	6083      	str	r3, [r0, #8]
    if (t) {
   b967e:	b90b      	cbnz	r3, b9684 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b9680:	4620      	mov	r0, r4
   b9682:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b9684:	f7ff ffd5 	bl	b9632 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b9688:	e7fa      	b.n	b9680 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b968a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b968a:	6883      	ldr	r3, [r0, #8]
   b968c:	b1eb      	cbz	r3, b96ca <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b968e:	781a      	ldrb	r2, [r3, #0]
   b9690:	2a03      	cmp	r2, #3
   b9692:	d81a      	bhi.n	b96ca <_ZNK5spark9JSONValue4typeEv+0x40>
   b9694:	e8df f002 	tbb	[pc, r2]
   b9698:	1b021704 	.word	0x1b021704
   b969c:	2005      	movs	r0, #5
   b969e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b96a0:	6802      	ldr	r2, [r0, #0]
   b96a2:	685b      	ldr	r3, [r3, #4]
   b96a4:	6852      	ldr	r2, [r2, #4]
   b96a6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b96a8:	282d      	cmp	r0, #45	; 0x2d
   b96aa:	d012      	beq.n	b96d2 <_ZNK5spark9JSONValue4typeEv+0x48>
   b96ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b96b0:	2b09      	cmp	r3, #9
   b96b2:	d90e      	bls.n	b96d2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b96b4:	2874      	cmp	r0, #116	; 0x74
   b96b6:	d00e      	beq.n	b96d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b96b8:	2866      	cmp	r0, #102	; 0x66
   b96ba:	d00c      	beq.n	b96d6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b96bc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b96c0:	4258      	negs	r0, r3
   b96c2:	4158      	adcs	r0, r3
   b96c4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b96c6:	2006      	movs	r0, #6
   b96c8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b96ca:	2000      	movs	r0, #0
   b96cc:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b96ce:	2004      	movs	r0, #4
   b96d0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b96d2:	2003      	movs	r0, #3
   b96d4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b96d6:	2002      	movs	r0, #2
}
   b96d8:	4770      	bx	lr

000b96da <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b96da:	b510      	push	{r4, lr}
   b96dc:	4604      	mov	r4, r0
    switch (type()) {
   b96de:	f7ff ffd4 	bl	b968a <_ZNK5spark9JSONValue4typeEv>
   b96e2:	2802      	cmp	r0, #2
   b96e4:	d00e      	beq.n	b9704 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b96e6:	1ec3      	subs	r3, r0, #3
   b96e8:	b2db      	uxtb	r3, r3
   b96ea:	2b01      	cmp	r3, #1
   b96ec:	d814      	bhi.n	b9718 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b96ee:	6822      	ldr	r2, [r4, #0]
   b96f0:	68a3      	ldr	r3, [r4, #8]
   b96f2:	6850      	ldr	r0, [r2, #4]
   b96f4:	685b      	ldr	r3, [r3, #4]
}
   b96f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b96fa:	220a      	movs	r2, #10
   b96fc:	2100      	movs	r1, #0
   b96fe:	4418      	add	r0, r3
   b9700:	f004 b9c8 	b.w	bda94 <strtol>
        const char* const s = d_->json + t_->start;
   b9704:	6822      	ldr	r2, [r4, #0]
   b9706:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b9708:	6852      	ldr	r2, [r2, #4]
   b970a:	685b      	ldr	r3, [r3, #4]
   b970c:	5cd0      	ldrb	r0, [r2, r3]
   b970e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b9712:	4258      	negs	r0, r3
   b9714:	4158      	adcs	r0, r3
}
   b9716:	bd10      	pop	{r4, pc}
    switch (type()) {
   b9718:	2000      	movs	r0, #0
   b971a:	e7fc      	b.n	b9716 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b971c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b971c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b971e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9720:	e9c0 3300 	strd	r3, r3, [r0]
   b9724:	4604      	mov	r4, r0
        n_(0) {
   b9726:	480e      	ldr	r0, [pc, #56]	; (b9760 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b9728:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b972c:	b1a9      	cbz	r1, b975a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b972e:	780b      	ldrb	r3, [r1, #0]
   b9730:	2b03      	cmp	r3, #3
   b9732:	d006      	beq.n	b9742 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9734:	b98b      	cbnz	r3, b975a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b9736:	6813      	ldr	r3, [r2, #0]
   b9738:	6858      	ldr	r0, [r3, #4]
   b973a:	684b      	ldr	r3, [r1, #4]
   b973c:	5cc3      	ldrb	r3, [r0, r3]
   b973e:	2b6e      	cmp	r3, #110	; 0x6e
   b9740:	d007      	beq.n	b9752 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b9742:	6813      	ldr	r3, [r2, #0]
   b9744:	684d      	ldr	r5, [r1, #4]
   b9746:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b9748:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b974a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b974c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b974e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b9750:	60e3      	str	r3, [r4, #12]
   b9752:	4611      	mov	r1, r2
   b9754:	4620      	mov	r0, r4
   b9756:	f7ff ff6c 	bl	b9632 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b975a:	4620      	mov	r0, r4
   b975c:	bd38      	pop	{r3, r4, r5, pc}
   b975e:	bf00      	nop
   b9760:	000bed81 	.word	0x000bed81

000b9764 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9764:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9766:	2500      	movs	r5, #0
   b9768:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b976a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b976e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b9772:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9776:	4604      	mov	r4, r0
   b9778:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b977a:	b14b      	cbz	r3, b9790 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b977c:	781a      	ldrb	r2, [r3, #0]
   b977e:	2a01      	cmp	r2, #1
   b9780:	d106      	bne.n	b9790 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b9782:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b9786:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b9788:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b978a:	6143      	str	r3, [r0, #20]
   b978c:	f7ff ff51 	bl	b9632 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9790:	4620      	mov	r0, r4
   b9792:	bd38      	pop	{r3, r4, r5, pc}

000b9794 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b9794:	b510      	push	{r4, lr}
    if (!n_) {
   b9796:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b9798:	4604      	mov	r4, r0
    if (!n_) {
   b979a:	b163      	cbz	r3, b97b6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b979c:	6880      	ldr	r0, [r0, #8]
   b979e:	60e0      	str	r0, [r4, #12]
    --n_;
   b97a0:	3b01      	subs	r3, #1
    ++t_;
   b97a2:	3010      	adds	r0, #16
   b97a4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b97a6:	6120      	str	r0, [r4, #16]
    --n_;
   b97a8:	6163      	str	r3, [r4, #20]
    if (n_) {
   b97aa:	b113      	cbz	r3, b97b2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b97ac:	f7ff fef2 	bl	b9594 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b97b0:	60a0      	str	r0, [r4, #8]
    return true;
   b97b2:	2001      	movs	r0, #1
   b97b4:	e000      	b.n	b97b8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b97b6:	4618      	mov	r0, r3
}
   b97b8:	bd10      	pop	{r4, pc}

000b97ba <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b97ba:	b510      	push	{r4, lr}
    write('}');
   b97bc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b97be:	4604      	mov	r4, r0
    write('}');
   b97c0:	f7ff ff49 	bl	b9656 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b97c4:	2301      	movs	r3, #1
   b97c6:	7123      	strb	r3, [r4, #4]
}
   b97c8:	4620      	mov	r0, r4
   b97ca:	bd10      	pop	{r4, pc}

000b97cc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b97cc:	b508      	push	{r3, lr}
    switch (state_) {
   b97ce:	7903      	ldrb	r3, [r0, #4]
   b97d0:	2b01      	cmp	r3, #1
   b97d2:	d002      	beq.n	b97da <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b97d4:	2b02      	cmp	r3, #2
   b97d6:	d004      	beq.n	b97e2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b97d8:	bd08      	pop	{r3, pc}
        write(',');
   b97da:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b97dc:	f7ff ff3b 	bl	b9656 <_ZN5spark10JSONWriter5writeEc>
}
   b97e0:	e7fa      	b.n	b97d8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b97e2:	213a      	movs	r1, #58	; 0x3a
   b97e4:	e7fa      	b.n	b97dc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b97e6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b97e6:	b510      	push	{r4, lr}
   b97e8:	4604      	mov	r4, r0
    writeSeparator();
   b97ea:	f7ff ffef 	bl	b97cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b97ee:	4620      	mov	r0, r4
   b97f0:	217b      	movs	r1, #123	; 0x7b
   b97f2:	f7ff ff30 	bl	b9656 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b97f6:	2300      	movs	r3, #0
   b97f8:	7123      	strb	r3, [r4, #4]
}
   b97fa:	4620      	mov	r0, r4
   b97fc:	bd10      	pop	{r4, pc}
	...

000b9800 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9800:	b513      	push	{r0, r1, r4, lr}
   b9802:	4604      	mov	r4, r0
   b9804:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9806:	f7ff ffe1 	bl	b97cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b980a:	6823      	ldr	r3, [r4, #0]
   b980c:	9a01      	ldr	r2, [sp, #4]
   b980e:	68db      	ldr	r3, [r3, #12]
   b9810:	4903      	ldr	r1, [pc, #12]	; (b9820 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b9812:	4620      	mov	r0, r4
   b9814:	4798      	blx	r3
    state_ = NEXT;
   b9816:	2301      	movs	r3, #1
}
   b9818:	4620      	mov	r0, r4
    state_ = NEXT;
   b981a:	7123      	strb	r3, [r4, #4]
}
   b981c:	b002      	add	sp, #8
   b981e:	bd10      	pop	{r4, pc}
   b9820:	000bddae 	.word	0x000bddae

000b9824 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9824:	b513      	push	{r0, r1, r4, lr}
   b9826:	4604      	mov	r4, r0
   b9828:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b982a:	f7ff ffcf 	bl	b97cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b982e:	6823      	ldr	r3, [r4, #0]
   b9830:	9a01      	ldr	r2, [sp, #4]
   b9832:	68db      	ldr	r3, [r3, #12]
   b9834:	4903      	ldr	r1, [pc, #12]	; (b9844 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b9836:	4620      	mov	r0, r4
   b9838:	4798      	blx	r3
    state_ = NEXT;
   b983a:	2301      	movs	r3, #1
}
   b983c:	4620      	mov	r0, r4
    state_ = NEXT;
   b983e:	7123      	strb	r3, [r4, #4]
}
   b9840:	b002      	add	sp, #8
   b9842:	bd10      	pop	{r4, pc}
   b9844:	000be6c6 	.word	0x000be6c6

000b9848 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b984c:	460d      	mov	r5, r1
    write('"');
   b984e:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9850:	4690      	mov	r8, r2
   b9852:	4604      	mov	r4, r0
    write('"');
   b9854:	f7ff feff 	bl	b9656 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b9858:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9900 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b985c:	44a8      	add	r8, r5
    const char *s = str;
   b985e:	462f      	mov	r7, r5
    while (s != end) {
   b9860:	4547      	cmp	r7, r8
   b9862:	46ba      	mov	sl, r7
   b9864:	d03d      	beq.n	b98e2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b9866:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b986a:	2e22      	cmp	r6, #34	; 0x22
   b986c:	d006      	beq.n	b987c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b986e:	2e5c      	cmp	r6, #92	; 0x5c
   b9870:	d004      	beq.n	b987c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b9872:	4630      	mov	r0, r6
   b9874:	f003 ff7c 	bl	bd770 <isprint>
   b9878:	2800      	cmp	r0, #0
   b987a:	d1f1      	bne.n	b9860 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b987c:	6823      	ldr	r3, [r4, #0]
   b987e:	ebaa 0205 	sub.w	r2, sl, r5
   b9882:	689b      	ldr	r3, [r3, #8]
   b9884:	4629      	mov	r1, r5
   b9886:	4620      	mov	r0, r4
   b9888:	4798      	blx	r3
            write('\\');
   b988a:	215c      	movs	r1, #92	; 0x5c
   b988c:	4620      	mov	r0, r4
   b988e:	f7ff fee2 	bl	b9656 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b9892:	2e0d      	cmp	r6, #13
   b9894:	d80a      	bhi.n	b98ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b9896:	2e07      	cmp	r6, #7
   b9898:	d91c      	bls.n	b98d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b989a:	f1a6 0308 	sub.w	r3, r6, #8
   b989e:	2b05      	cmp	r3, #5
   b98a0:	d818      	bhi.n	b98d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b98a2:	e8df f003 	tbb	[pc, r3]
   b98a6:	0f0d      	.short	0x0f0d
   b98a8:	15131711 	.word	0x15131711
   b98ac:	2e22      	cmp	r6, #34	; 0x22
   b98ae:	d001      	beq.n	b98b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b98b0:	2e5c      	cmp	r6, #92	; 0x5c
   b98b2:	d10f      	bne.n	b98d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b98b4:	4631      	mov	r1, r6
                write('b');
   b98b6:	4620      	mov	r0, r4
   b98b8:	f7ff fecd 	bl	b9656 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b98bc:	463d      	mov	r5, r7
    while (s != end) {
   b98be:	e7cf      	b.n	b9860 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b98c0:	2162      	movs	r1, #98	; 0x62
   b98c2:	e7f8      	b.n	b98b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b98c4:	2174      	movs	r1, #116	; 0x74
   b98c6:	e7f6      	b.n	b98b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b98c8:	216e      	movs	r1, #110	; 0x6e
   b98ca:	e7f4      	b.n	b98b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b98cc:	2166      	movs	r1, #102	; 0x66
   b98ce:	e7f2      	b.n	b98b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b98d0:	2172      	movs	r1, #114	; 0x72
   b98d2:	e7f0      	b.n	b98b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b98d4:	6823      	ldr	r3, [r4, #0]
   b98d6:	4632      	mov	r2, r6
   b98d8:	68db      	ldr	r3, [r3, #12]
   b98da:	4649      	mov	r1, r9
   b98dc:	4620      	mov	r0, r4
   b98de:	4798      	blx	r3
                break;
   b98e0:	e7ec      	b.n	b98bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b98e2:	42bd      	cmp	r5, r7
   b98e4:	d005      	beq.n	b98f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b98e6:	6823      	ldr	r3, [r4, #0]
   b98e8:	1b7a      	subs	r2, r7, r5
   b98ea:	689b      	ldr	r3, [r3, #8]
   b98ec:	4629      	mov	r1, r5
   b98ee:	4620      	mov	r0, r4
   b98f0:	4798      	blx	r3
    }
    write('"');
   b98f2:	2122      	movs	r1, #34	; 0x22
   b98f4:	4620      	mov	r0, r4
   b98f6:	f7ff feae 	bl	b9656 <_ZN5spark10JSONWriter5writeEc>
}
   b98fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b98fe:	bf00      	nop
   b9900:	000bed24 	.word	0x000bed24

000b9904 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b9904:	b513      	push	{r0, r1, r4, lr}
   b9906:	4604      	mov	r4, r0
   b9908:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b990c:	f7ff ff5e 	bl	b97cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b9910:	4620      	mov	r0, r4
   b9912:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9916:	f7ff ff97 	bl	b9848 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b991a:	2302      	movs	r3, #2
}
   b991c:	4620      	mov	r0, r4
    state_ = VALUE;
   b991e:	7123      	strb	r3, [r4, #4]
}
   b9920:	b002      	add	sp, #8
   b9922:	bd10      	pop	{r4, pc}

000b9924 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b9924:	b513      	push	{r0, r1, r4, lr}
   b9926:	4604      	mov	r4, r0
   b9928:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b992c:	f7ff ff4e 	bl	b97cc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b9930:	4620      	mov	r0, r4
   b9932:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9936:	f7ff ff87 	bl	b9848 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b993a:	2301      	movs	r3, #1
}
   b993c:	4620      	mov	r0, r4
    state_ = NEXT;
   b993e:	7123      	strb	r3, [r4, #4]
}
   b9940:	b002      	add	sp, #8
   b9942:	bd10      	pop	{r4, pc}

000b9944 <_ZN8particle9LEDStatus14updateCallbackEmPv>:
    }
}

void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
    LEDStatus* s = static_cast<LEDStatus*>(data);
    s->update(ticks);
   b9944:	680a      	ldr	r2, [r1, #0]
void particle::LEDStatus::updateCallback(system_tick_t ticks, void* data) {
   b9946:	460b      	mov	r3, r1
    s->update(ticks);
   b9948:	6892      	ldr	r2, [r2, #8]
   b994a:	4601      	mov	r1, r0
   b994c:	4618      	mov	r0, r3
   b994e:	4710      	bx	r2

000b9950 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource>:
particle::LEDStatus::LEDStatus(uint32_t color, LEDPattern pattern, uint16_t period, LEDPriority priority, LEDSource source) {
   b9950:	b570      	push	{r4, r5, r6, lr}
   b9952:	4c0e      	ldr	r4, [pc, #56]	; (b998c <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x3c>)
   b9954:	6004      	str	r4, [r0, #0]
    d_.next = nullptr;
   b9956:	2500      	movs	r5, #0
   b9958:	241c      	movs	r4, #28
   b995a:	e9c0 4501 	strd	r4, r5, [r0, #4]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b995e:	f89d 4014 	ldrb.w	r4, [sp, #20]
   b9962:	f89d 6010 	ldrb.w	r6, [sp, #16]
    d_.prev = nullptr;
   b9966:	60c5      	str	r5, [r0, #12]
    d_.priority = LED_PRIORITY_VALUE(priority, source); // Combine source and priority into single value
   b9968:	f004 0403 	and.w	r4, r4, #3
   b996c:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
   b9970:	b2e4      	uxtb	r4, r4
   b9972:	7404      	strb	r4, [r0, #16]
    d_.pattern = pattern;
   b9974:	7442      	strb	r2, [r0, #17]
    d_.flags = 0;
   b9976:	7485      	strb	r5, [r0, #18]
    d_.color = color;
   b9978:	6141      	str	r1, [r0, #20]
    if (d_.pattern == LED_PATTERN_CUSTOM) {
   b997a:	7c42      	ldrb	r2, [r0, #17]
   b997c:	2a0f      	cmp	r2, #15
        d_.callback = updateCallback; // User callback
   b997e:	bf0a      	itet	eq
   b9980:	4b03      	ldreq	r3, [pc, #12]	; (b9990 <_ZN8particle9LEDStatusC1Em10LEDPatternt11LEDPriority9LEDSource+0x40>)
        d_.period = period;
   b9982:	8303      	strhne	r3, [r0, #24]
        d_.data = this; // Callback data
   b9984:	e9c0 3006 	strdeq	r3, r0, [r0, #24]
}
   b9988:	bd70      	pop	{r4, r5, r6, pc}
   b998a:	bf00      	nop
   b998c:	000be474 	.word	0x000be474
   b9990:	000b9945 	.word	0x000b9945

000b9994 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9994:	6880      	ldr	r0, [r0, #8]
   b9996:	6803      	ldr	r3, [r0, #0]
   b9998:	68db      	ldr	r3, [r3, #12]
   b999a:	4718      	bx	r3

000b999c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b999c:	4770      	bx	lr

000b999e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b999e:	4608      	mov	r0, r1
   b99a0:	b111      	cbz	r1, b99a8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b99a2:	680b      	ldr	r3, [r1, #0]
   b99a4:	685b      	ldr	r3, [r3, #4]
   b99a6:	4718      	bx	r3
}
   b99a8:	4770      	bx	lr

000b99aa <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b99aa:	4770      	bx	lr

000b99ac <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b99ac:	4770      	bx	lr

000b99ae <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b99ae:	4770      	bx	lr

000b99b0 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b99b0:	4770      	bx	lr

000b99b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b99b2:	b538      	push	{r3, r4, r5, lr}
   b99b4:	4604      	mov	r4, r0
   b99b6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b99b8:	6800      	ldr	r0, [r0, #0]
   b99ba:	212e      	movs	r1, #46	; 0x2e
   b99bc:	f003 ff89 	bl	bd8d2 <strchrnul>
    size = s - category;
   b99c0:	6823      	ldr	r3, [r4, #0]
   b99c2:	1ac3      	subs	r3, r0, r3
   b99c4:	602b      	str	r3, [r5, #0]
    if (size) {
   b99c6:	b123      	cbz	r3, b99d2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b99c8:	7803      	ldrb	r3, [r0, #0]
   b99ca:	b103      	cbz	r3, b99ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b99cc:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b99ce:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b99d0:	6020      	str	r0, [r4, #0]
}
   b99d2:	4618      	mov	r0, r3
   b99d4:	bd38      	pop	{r3, r4, r5, pc}

000b99d6 <_ZN5spark16JSONStreamWriterD0Ev>:
   b99d6:	b510      	push	{r4, lr}
   b99d8:	210c      	movs	r1, #12
   b99da:	4604      	mov	r4, r0
   b99dc:	f7fa fb5f 	bl	b409e <_ZdlPvj>
   b99e0:	4620      	mov	r0, r4
   b99e2:	bd10      	pop	{r4, pc}

000b99e4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b99e4:	b510      	push	{r4, lr}
   b99e6:	2104      	movs	r1, #4
   b99e8:	4604      	mov	r4, r0
   b99ea:	f7fa fb58 	bl	b409e <_ZdlPvj>
   b99ee:	4620      	mov	r0, r4
   b99f0:	bd10      	pop	{r4, pc}

000b99f2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b99f2:	b510      	push	{r4, lr}
   b99f4:	2104      	movs	r1, #4
   b99f6:	4604      	mov	r4, r0
   b99f8:	f7fa fb51 	bl	b409e <_ZdlPvj>
   b99fc:	4620      	mov	r0, r4
   b99fe:	bd10      	pop	{r4, pc}

000b9a00 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9a00:	f7fe bede 	b.w	b87c0 <os_mutex_recursive_lock>

000b9a04 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9a04:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9a06:	f003 ff6e 	bl	bd8e6 <strcmp>
}
   b9a0a:	fab0 f080 	clz	r0, r0
   b9a0e:	0940      	lsrs	r0, r0, #5
   b9a10:	bd08      	pop	{r3, pc}

000b9a12 <__tcf_1>:
   b9a12:	4770      	bx	lr

000b9a14 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9a14:	b510      	push	{r4, lr}
   b9a16:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9a18:	f001 fec4 	bl	bb7a4 <_Z16_fetch_usbserialv>
   b9a1c:	4284      	cmp	r4, r0
   b9a1e:	d010      	beq.n	b9a42 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9a20:	f002 f8a6 	bl	bbb70 <_Z22__fetch_global_Serial1v>
   b9a24:	4284      	cmp	r4, r0
   b9a26:	d105      	bne.n	b9a34 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b9a28:	f002 f8a2 	bl	bbb70 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9a30:	f001 be51 	b.w	bb6d6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9a34:	b12c      	cbz	r4, b9a42 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b9a36:	6823      	ldr	r3, [r4, #0]
   b9a38:	4620      	mov	r0, r4
   b9a3a:	685b      	ldr	r3, [r3, #4]
}
   b9a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9a40:	4718      	bx	r3
   b9a42:	bd10      	pop	{r4, pc}

000b9a44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9a44:	680b      	ldr	r3, [r1, #0]
   b9a46:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9a48:	684b      	ldr	r3, [r1, #4]
   b9a4a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9a4c:	b113      	cbz	r3, b9a54 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9a4e:	685a      	ldr	r2, [r3, #4]
   b9a50:	3201      	adds	r2, #1
   b9a52:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9a54:	4770      	bx	lr

000b9a56 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b9a56:	b513      	push	{r0, r1, r4, lr}
   b9a58:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b9a5a:	4608      	mov	r0, r1
   b9a5c:	9101      	str	r1, [sp, #4]
   b9a5e:	f003 ff54 	bl	bd90a <strlen>
   b9a62:	9901      	ldr	r1, [sp, #4]
   b9a64:	4602      	mov	r2, r0
   b9a66:	4620      	mov	r0, r4
}
   b9a68:	b002      	add	sp, #8
   b9a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9a6e:	f7ff bf59 	b.w	b9924 <_ZN5spark10JSONWriter5valueEPKcj>

000b9a72 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9a72:	b513      	push	{r0, r1, r4, lr}
   b9a74:	4604      	mov	r4, r0
    write(str, strlen(str));
   b9a76:	4608      	mov	r0, r1
   b9a78:	9101      	str	r1, [sp, #4]
   b9a7a:	f003 ff46 	bl	bd90a <strlen>
   b9a7e:	6823      	ldr	r3, [r4, #0]
   b9a80:	9901      	ldr	r1, [sp, #4]
   b9a82:	68db      	ldr	r3, [r3, #12]
   b9a84:	4602      	mov	r2, r0
   b9a86:	4620      	mov	r0, r4
}
   b9a88:	b002      	add	sp, #8
   b9a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b9a8e:	4718      	bx	r3

000b9a90 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b9a90:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9a92:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9a94:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9a98:	68db      	ldr	r3, [r3, #12]
   b9a9a:	2201      	movs	r2, #1
   b9a9c:	f10d 0107 	add.w	r1, sp, #7
   b9aa0:	4798      	blx	r3
}
   b9aa2:	b003      	add	sp, #12
   b9aa4:	f85d fb04 	ldr.w	pc, [sp], #4

000b9aa8 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9aa8:	b40e      	push	{r1, r2, r3}
   b9aaa:	b503      	push	{r0, r1, lr}
   b9aac:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b9aae:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9ab0:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9ab4:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b9ab6:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b9ab8:	f001 f975 	bl	bada6 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b9abc:	b002      	add	sp, #8
   b9abe:	f85d eb04 	ldr.w	lr, [sp], #4
   b9ac2:	b003      	add	sp, #12
   b9ac4:	4770      	bx	lr

000b9ac6 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9ac6:	680a      	ldr	r2, [r1, #0]
   b9ac8:	6002      	str	r2, [r0, #0]
   b9aca:	684a      	ldr	r2, [r1, #4]
   b9acc:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b9ace:	2200      	movs	r2, #0
   b9ad0:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9ad4:	b510      	push	{r4, lr}
   b9ad6:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9ad8:	688c      	ldr	r4, [r1, #8]
   b9ada:	6084      	str	r4, [r0, #8]
   b9adc:	68cc      	ldr	r4, [r1, #12]
   b9ade:	60c4      	str	r4, [r0, #12]
   b9ae0:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9ae2:	608a      	str	r2, [r1, #8]
   b9ae4:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9ae6:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9ae8:	610a      	str	r2, [r1, #16]
   b9aea:	bd10      	pop	{r4, pc}

000b9aec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b9af0:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9af4:	f04f 0a14 	mov.w	sl, #20
   b9af8:	9300      	str	r3, [sp, #0]
   b9afa:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9afe:	4b18      	ldr	r3, [pc, #96]	; (b9b60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9b00:	10a4      	asrs	r4, r4, #2
   b9b02:	4617      	mov	r7, r2
   b9b04:	435c      	muls	r4, r3
   b9b06:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9b08:	2c00      	cmp	r4, #0
   b9b0a:	dd21      	ble.n	b9b50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9b0c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9b0e:	fb0a f006 	mul.w	r0, sl, r6
   b9b12:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9b16:	463a      	mov	r2, r7
   b9b18:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9b1c:	5828      	ldr	r0, [r5, r0]
   b9b1e:	9101      	str	r1, [sp, #4]
   b9b20:	455f      	cmp	r7, fp
   b9b22:	bf28      	it	cs
   b9b24:	465a      	movcs	r2, fp
   b9b26:	f003 fef8 	bl	bd91a <strncmp>
                if (cmp == 0) {
   b9b2a:	2800      	cmp	r0, #0
   b9b2c:	9901      	ldr	r1, [sp, #4]
   b9b2e:	f04f 0301 	mov.w	r3, #1
   b9b32:	d10b      	bne.n	b9b4c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9b34:	455f      	cmp	r7, fp
   b9b36:	d103      	bne.n	b9b40 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b9b38:	9a00      	ldr	r2, [sp, #0]
   b9b3a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9b3c:	4634      	mov	r4, r6
   b9b3e:	e7e3      	b.n	b9b08 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9b40:	d9fc      	bls.n	b9b3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9b42:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9b44:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b9b48:	3e01      	subs	r6, #1
   b9b4a:	e7f7      	b.n	b9b3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9b4c:	dbf9      	blt.n	b9b42 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9b4e:	e7f5      	b.n	b9b3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9b50:	eba5 0508 	sub.w	r5, r5, r8
}
   b9b54:	4802      	ldr	r0, [pc, #8]	; (b9b60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9b56:	10ad      	asrs	r5, r5, #2
   b9b58:	4368      	muls	r0, r5
   b9b5a:	b003      	add	sp, #12
   b9b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9b60:	cccccccd 	.word	0xcccccccd

000b9b64 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9b64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b9b66:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b9b68:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9b6a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9b6c:	b303      	cbz	r3, b9bb0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b9b6e:	b1f9      	cbz	r1, b9bb0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b9b70:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b9b72:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b9b76:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b9b78:	a903      	add	r1, sp, #12
   b9b7a:	a801      	add	r0, sp, #4
   b9b7c:	f7ff ff19 	bl	b99b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9b80:	4601      	mov	r1, r0
   b9b82:	b1a8      	cbz	r0, b9bb0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9b84:	f10d 030b 	add.w	r3, sp, #11
   b9b88:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b9b8a:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9b8e:	4620      	mov	r0, r4
   b9b90:	f7ff ffac 	bl	b9aec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9b94:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9b98:	b153      	cbz	r3, b9bb0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b9b9a:	6823      	ldr	r3, [r4, #0]
   b9b9c:	2414      	movs	r4, #20
   b9b9e:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9ba2:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9ba4:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9ba8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b9baa:	bfa8      	it	ge
   b9bac:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b9bae:	e7e3      	b.n	b9b78 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9bb0:	4628      	mov	r0, r5
   b9bb2:	b004      	add	sp, #16
   b9bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9bb8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9bb8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b9bba:	4c09      	ldr	r4, [pc, #36]	; (b9be0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9bbc:	7823      	ldrb	r3, [r4, #0]
   b9bbe:	f3bf 8f5b 	dmb	ish
   b9bc2:	07db      	lsls	r3, r3, #31
   b9bc4:	d409      	bmi.n	b9bda <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9bc6:	4620      	mov	r0, r4
   b9bc8:	f7fa fa78 	bl	b40bc <__cxa_guard_acquire>
   b9bcc:	b128      	cbz	r0, b9bda <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9bce:	4620      	mov	r0, r4
   b9bd0:	f7fa fa79 	bl	b40c6 <__cxa_guard_release>
   b9bd4:	4803      	ldr	r0, [pc, #12]	; (b9be4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9bd6:	f003 fda7 	bl	bd728 <atexit>
}
   b9bda:	4803      	ldr	r0, [pc, #12]	; (b9be8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9bdc:	bd10      	pop	{r4, pc}
   b9bde:	bf00      	nop
   b9be0:	2003e64c 	.word	0x2003e64c
   b9be4:	000b99ab 	.word	0x000b99ab
   b9be8:	2003dec0 	.word	0x2003dec0

000b9bec <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9bec:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9bee:	4c09      	ldr	r4, [pc, #36]	; (b9c14 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9bf0:	7823      	ldrb	r3, [r4, #0]
   b9bf2:	f3bf 8f5b 	dmb	ish
   b9bf6:	07db      	lsls	r3, r3, #31
   b9bf8:	d409      	bmi.n	b9c0e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9bfa:	4620      	mov	r0, r4
   b9bfc:	f7fa fa5e 	bl	b40bc <__cxa_guard_acquire>
   b9c00:	b128      	cbz	r0, b9c0e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9c02:	4620      	mov	r0, r4
   b9c04:	f7fa fa5f 	bl	b40c6 <__cxa_guard_release>
   b9c08:	4803      	ldr	r0, [pc, #12]	; (b9c18 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b9c0a:	f003 fd8d 	bl	bd728 <atexit>
    return &factory;
}
   b9c0e:	4803      	ldr	r0, [pc, #12]	; (b9c1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9c10:	bd10      	pop	{r4, pc}
   b9c12:	bf00      	nop
   b9c14:	2003e650 	.word	0x2003e650
   b9c18:	000b9a13 	.word	0x000b9a13
   b9c1c:	2003dec4 	.word	0x2003dec4

000b9c20 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9c20:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9c22:	2500      	movs	r5, #0
   b9c24:	4604      	mov	r4, r0
   b9c26:	e9c0 5500 	strd	r5, r5, [r0]
   b9c2a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9c2e:	6085      	str	r5, [r0, #8]
   b9c30:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9c32:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b9c36:	f7fe fdb3 	bl	b87a0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b9c3a:	f7ff ffbd 	bl	b9bb8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9c3e:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9c40:	f7ff ffd4 	bl	b9bec <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9c44:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9c46:	6220      	str	r0, [r4, #32]
}
   b9c48:	4620      	mov	r0, r4
   b9c4a:	bd38      	pop	{r3, r4, r5, pc}

000b9c4c <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9c4c:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9c4e:	4c0a      	ldr	r4, [pc, #40]	; (b9c78 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9c50:	7823      	ldrb	r3, [r4, #0]
   b9c52:	f3bf 8f5b 	dmb	ish
   b9c56:	07db      	lsls	r3, r3, #31
   b9c58:	d40c      	bmi.n	b9c74 <_ZN5spark10LogManager8instanceEv+0x28>
   b9c5a:	4620      	mov	r0, r4
   b9c5c:	f7fa fa2e 	bl	b40bc <__cxa_guard_acquire>
   b9c60:	b140      	cbz	r0, b9c74 <_ZN5spark10LogManager8instanceEv+0x28>
   b9c62:	4806      	ldr	r0, [pc, #24]	; (b9c7c <_ZN5spark10LogManager8instanceEv+0x30>)
   b9c64:	f7ff ffdc 	bl	b9c20 <_ZN5spark10LogManagerC1Ev>
   b9c68:	4620      	mov	r0, r4
   b9c6a:	f7fa fa2c 	bl	b40c6 <__cxa_guard_release>
   b9c6e:	4804      	ldr	r0, [pc, #16]	; (b9c80 <_ZN5spark10LogManager8instanceEv+0x34>)
   b9c70:	f003 fd5a 	bl	bd728 <atexit>
    return &mgr;
}
   b9c74:	4801      	ldr	r0, [pc, #4]	; (b9c7c <_ZN5spark10LogManager8instanceEv+0x30>)
   b9c76:	bd10      	pop	{r4, pc}
   b9c78:	2003e648 	.word	0x2003e648
   b9c7c:	2003e658 	.word	0x2003e658
   b9c80:	000ba1a1 	.word	0x000ba1a1

000b9c84 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9c84:	4a02      	ldr	r2, [pc, #8]	; (b9c90 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b9c86:	4903      	ldr	r1, [pc, #12]	; (b9c94 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b9c88:	4803      	ldr	r0, [pc, #12]	; (b9c98 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b9c8a:	2300      	movs	r3, #0
   b9c8c:	f7fe bfb8 	b.w	b8c00 <log_set_callbacks>
   b9c90:	000b9f85 	.word	0x000b9f85
   b9c94:	000b9f11 	.word	0x000b9f11
   b9c98:	000b9e91 	.word	0x000b9e91

000b9c9c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9c9c:	2300      	movs	r3, #0
   b9c9e:	461a      	mov	r2, r3
   b9ca0:	4619      	mov	r1, r3
   b9ca2:	4618      	mov	r0, r3
   b9ca4:	f7fe bfac 	b.w	b8c00 <log_set_callbacks>

000b9ca8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9caa:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9cac:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9cae:	4668      	mov	r0, sp
   b9cb0:	f7ff fec8 	bl	b9a44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9cb4:	466a      	mov	r2, sp
   b9cb6:	4629      	mov	r1, r5
   b9cb8:	4620      	mov	r0, r4
   b9cba:	f7ff fd53 	bl	b9764 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9cbe:	a801      	add	r0, sp, #4
   b9cc0:	f7ff f95d 	bl	b8f7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9cc4:	4620      	mov	r0, r4
   b9cc6:	b003      	add	sp, #12
   b9cc8:	bd30      	pop	{r4, r5, pc}

000b9cca <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9cca:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9ccc:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9cce:	4604      	mov	r4, r0
   b9cd0:	4668      	mov	r0, sp
   b9cd2:	f7ff feb7 	bl	b9a44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9cd6:	466a      	mov	r2, sp
   b9cd8:	4629      	mov	r1, r5
   b9cda:	4620      	mov	r0, r4
   b9cdc:	f7ff fd1e 	bl	b971c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9ce0:	a801      	add	r0, sp, #4
   b9ce2:	f7ff f94c 	bl	b8f7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9ce6:	4620      	mov	r0, r4
   b9ce8:	b003      	add	sp, #12
   b9cea:	bd30      	pop	{r4, r5, pc}

000b9cec <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9cee:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9cf0:	4604      	mov	r4, r0
   b9cf2:	4668      	mov	r0, sp
   b9cf4:	f7ff fea6 	bl	b9a44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9cf8:	466a      	mov	r2, sp
   b9cfa:	4629      	mov	r1, r5
   b9cfc:	4620      	mov	r0, r4
   b9cfe:	f7ff fcb6 	bl	b966e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9d02:	a801      	add	r0, sp, #4
   b9d04:	f7ff f93b 	bl	b8f7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9d08:	4620      	mov	r0, r4
   b9d0a:	b003      	add	sp, #12
   b9d0c:	bd30      	pop	{r4, r5, pc}
	...

000b9d10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9d10:	b570      	push	{r4, r5, r6, lr}
   b9d12:	b08a      	sub	sp, #40	; 0x28
   b9d14:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9d16:	4601      	mov	r1, r0
   b9d18:	a804      	add	r0, sp, #16
   b9d1a:	f7ff ffc5 	bl	b9ca8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9d1e:	4e14      	ldr	r6, [pc, #80]	; (b9d70 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9d20:	a804      	add	r0, sp, #16
   b9d22:	f7ff fd37 	bl	b9794 <_ZN5spark18JSONObjectIterator4nextEv>
   b9d26:	b1e8      	cbz	r0, b9d64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9d28:	a904      	add	r1, sp, #16
   b9d2a:	4668      	mov	r0, sp
   b9d2c:	f7ff ffcd 	bl	b9cca <_ZNK5spark18JSONObjectIterator4nameEv>
   b9d30:	9802      	ldr	r0, [sp, #8]
   b9d32:	4631      	mov	r1, r6
   b9d34:	f7ff fe66 	bl	b9a04 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9d38:	4604      	mov	r4, r0
   b9d3a:	b110      	cbz	r0, b9d42 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9d3c:	1e2c      	subs	r4, r5, #0
   b9d3e:	bf18      	it	ne
   b9d40:	2401      	movne	r4, #1
   b9d42:	a801      	add	r0, sp, #4
   b9d44:	f7ff f91b 	bl	b8f7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9d48:	2c00      	cmp	r4, #0
   b9d4a:	d0e9      	beq.n	b9d20 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9d4c:	a904      	add	r1, sp, #16
   b9d4e:	4668      	mov	r0, sp
   b9d50:	f7ff ffcc 	bl	b9cec <_ZNK5spark18JSONObjectIterator5valueEv>
   b9d54:	4668      	mov	r0, sp
   b9d56:	f7ff fcc0 	bl	b96da <_ZNK5spark9JSONValue5toIntEv>
   b9d5a:	6028      	str	r0, [r5, #0]
   b9d5c:	a801      	add	r0, sp, #4
   b9d5e:	f7ff f90e 	bl	b8f7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9d62:	e7dd      	b.n	b9d20 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9d64:	a805      	add	r0, sp, #20
   b9d66:	f7ff f90a 	bl	b8f7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9d6a:	b00a      	add	sp, #40	; 0x28
   b9d6c:	bd70      	pop	{r4, r5, r6, pc}
   b9d6e:	bf00      	nop
   b9d70:	000bed2a 	.word	0x000bed2a

000b9d74 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9d76:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9d78:	4620      	mov	r0, r4
   b9d7a:	4913      	ldr	r1, [pc, #76]	; (b9dc8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9d7c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9d7e:	f003 fdb2 	bl	bd8e6 <strcmp>
   b9d82:	b950      	cbnz	r0, b9d9a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9d84:	f001 fd0e 	bl	bb7a4 <_Z16_fetch_usbserialv>
   b9d88:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9d8c:	f001 fcf8 	bl	bb780 <_ZN9USBSerial5beginEl>
}
   b9d90:	b003      	add	sp, #12
   b9d92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9d96:	f001 bd05 	b.w	bb7a4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9d9a:	490c      	ldr	r1, [pc, #48]	; (b9dcc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9d9c:	4620      	mov	r0, r4
   b9d9e:	f003 fda2 	bl	bd8e6 <strcmp>
   b9da2:	b978      	cbnz	r0, b9dc4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9da4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9da8:	a901      	add	r1, sp, #4
   b9daa:	4628      	mov	r0, r5
        int baud = 9600;
   b9dac:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9dae:	f7ff ffaf 	bl	b9d10 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9db2:	f001 fedd 	bl	bbb70 <_Z22__fetch_global_Serial1v>
   b9db6:	9901      	ldr	r1, [sp, #4]
   b9db8:	f001 fc8a 	bl	bb6d0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9dbc:	f001 fed8 	bl	bbb70 <_Z22__fetch_global_Serial1v>
}
   b9dc0:	b003      	add	sp, #12
   b9dc2:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9dc4:	2000      	movs	r0, #0
   b9dc6:	e7fb      	b.n	b9dc0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b9dc8:	000bed2f 	.word	0x000bed2f
   b9dcc:	000bed36 	.word	0x000bed36

000b9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9dd0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9dd2:	e9d0 5300 	ldrd	r5, r3, [r0]
   b9dd6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9dd8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9dda:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9dde:	42ae      	cmp	r6, r5
   b9de0:	d005      	beq.n	b9dee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b9de2:	f105 0008 	add.w	r0, r5, #8
   b9de6:	f7ff fff3 	bl	b9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9dea:	3514      	adds	r5, #20
   b9dec:	e7f7      	b.n	b9dde <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b9dee:	6820      	ldr	r0, [r4, #0]
   b9df0:	f7ff f834 	bl	b8e5c <free>
}
   b9df4:	4620      	mov	r0, r4
   b9df6:	bd70      	pop	{r4, r5, r6, pc}

000b9df8 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b9df8:	b510      	push	{r4, lr}
   b9dfa:	4604      	mov	r4, r0
   b9dfc:	300c      	adds	r0, #12
   b9dfe:	f7ff ffe7 	bl	b9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9e02:	4620      	mov	r0, r4
   b9e04:	f7ff f8a9 	bl	b8f5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9e08:	4620      	mov	r0, r4
   b9e0a:	bd10      	pop	{r4, pc}

000b9e0c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9e0c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b9e0e:	4b04      	ldr	r3, [pc, #16]	; (b9e20 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b9e10:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b9e12:	f840 3b04 	str.w	r3, [r0], #4
   b9e16:	f7ff ffef 	bl	b9df8 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b9e1a:	4620      	mov	r0, r4
   b9e1c:	bd10      	pop	{r4, pc}
   b9e1e:	bf00      	nop
   b9e20:	000bdfac 	.word	0x000bdfac

000b9e24 <_ZN5spark16StreamLogHandlerD0Ev>:
   b9e24:	b510      	push	{r4, lr}
   b9e26:	4604      	mov	r4, r0
   b9e28:	f7ff fff0 	bl	b9e0c <_ZN5spark16StreamLogHandlerD1Ev>
   b9e2c:	4620      	mov	r0, r4
   b9e2e:	2124      	movs	r1, #36	; 0x24
   b9e30:	f7fa f935 	bl	b409e <_ZdlPvj>
   b9e34:	4620      	mov	r0, r4
   b9e36:	bd10      	pop	{r4, pc}

000b9e38 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b9e38:	b510      	push	{r4, lr}
   b9e3a:	4b03      	ldr	r3, [pc, #12]	; (b9e48 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b9e3c:	6003      	str	r3, [r0, #0]
   b9e3e:	4604      	mov	r4, r0
   b9e40:	f7ff ffe4 	bl	b9e0c <_ZN5spark16StreamLogHandlerD1Ev>
   b9e44:	4620      	mov	r0, r4
   b9e46:	bd10      	pop	{r4, pc}
   b9e48:	000bedd0 	.word	0x000bedd0

000b9e4c <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9e4c:	b510      	push	{r4, lr}
   b9e4e:	4604      	mov	r4, r0
   b9e50:	f7ff fff2 	bl	b9e38 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9e54:	4620      	mov	r0, r4
   b9e56:	2124      	movs	r1, #36	; 0x24
   b9e58:	f7fa f921 	bl	b409e <_ZdlPvj>
   b9e5c:	4620      	mov	r0, r4
   b9e5e:	bd10      	pop	{r4, pc}

000b9e60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b9e60:	2200      	movs	r2, #0
   b9e62:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b9e66:	b510      	push	{r4, lr}
        capacity_(0) {
   b9e68:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9e6a:	680c      	ldr	r4, [r1, #0]
   b9e6c:	6004      	str	r4, [r0, #0]
   b9e6e:	684c      	ldr	r4, [r1, #4]
   b9e70:	6044      	str	r4, [r0, #4]
   b9e72:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9e74:	600a      	str	r2, [r1, #0]
   b9e76:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9e78:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9e7a:	608a      	str	r2, [r1, #8]
}
   b9e7c:	bd10      	pop	{r4, pc}

000b9e7e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b9e7e:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9e80:	6803      	ldr	r3, [r0, #0]
   b9e82:	4604      	mov	r4, r0
   b9e84:	6818      	ldr	r0, [r3, #0]
   b9e86:	f7fe fca3 	bl	b87d0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b9e8a:	4620      	mov	r0, r4
   b9e8c:	bd10      	pop	{r4, pc}
	...

000b9e90 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e94:	b087      	sub	sp, #28
   b9e96:	4680      	mov	r8, r0
   b9e98:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b9e9a:	4b1c      	ldr	r3, [pc, #112]	; (b9f0c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9e9c:	685b      	ldr	r3, [r3, #4]
   b9e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9ea2:	4689      	mov	r9, r1
   b9ea4:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b9ea6:	b96b      	cbnz	r3, b9ec4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b9ea8:	f7ff fed0 	bl	b9c4c <_ZN5spark10LogManager8instanceEv>
   b9eac:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9eae:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9eb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9eb4:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b9eb6:	f7ff fda3 	bl	b9a00 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b9eba:	7b23      	ldrb	r3, [r4, #12]
   b9ebc:	b12b      	cbz	r3, b9eca <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b9ebe:	a805      	add	r0, sp, #20
   b9ec0:	f7ff ffdd 	bl	b9e7e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9ec4:	b007      	add	sp, #28
   b9ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b9eca:	2301      	movs	r3, #1
   b9ecc:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b9ece:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b9ed2:	fa5f f989 	uxtb.w	r9, r9
   b9ed6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9eda:	45aa      	cmp	sl, r5
   b9edc:	d012      	beq.n	b9f04 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b9ede:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b9ee2:	4631      	mov	r1, r6
   b9ee4:	1d38      	adds	r0, r7, #4
   b9ee6:	f7ff fe3d 	bl	b9b64 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9eea:	4581      	cmp	r9, r0
   b9eec:	d3f5      	bcc.n	b9eda <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b9eee:	683b      	ldr	r3, [r7, #0]
   b9ef0:	9a03      	ldr	r2, [sp, #12]
   b9ef2:	9200      	str	r2, [sp, #0]
   b9ef4:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b9ef8:	464a      	mov	r2, r9
   b9efa:	4633      	mov	r3, r6
   b9efc:	4641      	mov	r1, r8
   b9efe:	4638      	mov	r0, r7
   b9f00:	47d8      	blx	fp
   b9f02:	e7ea      	b.n	b9eda <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9f04:	2300      	movs	r3, #0
   b9f06:	7323      	strb	r3, [r4, #12]
   b9f08:	e7d9      	b.n	b9ebe <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b9f0a:	bf00      	nop
   b9f0c:	e000ed00 	.word	0xe000ed00

000b9f10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b9f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9f14:	469b      	mov	fp, r3
   b9f16:	4b1a      	ldr	r3, [pc, #104]	; (b9f80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b9f18:	685b      	ldr	r3, [r3, #4]
   b9f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9f1e:	4680      	mov	r8, r0
   b9f20:	4689      	mov	r9, r1
   b9f22:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9f24:	b96b      	cbnz	r3, b9f42 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b9f26:	f7ff fe91 	bl	b9c4c <_ZN5spark10LogManager8instanceEv>
   b9f2a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9f2c:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b9f30:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9f32:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9f34:	f7ff fd64 	bl	b9a00 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b9f38:	7b23      	ldrb	r3, [r4, #12]
   b9f3a:	b12b      	cbz	r3, b9f48 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9f3c:	a801      	add	r0, sp, #4
   b9f3e:	f7ff ff9e 	bl	b9e7e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9f42:	b003      	add	sp, #12
   b9f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9f48:	2301      	movs	r3, #1
   b9f4a:	7323      	strb	r3, [r4, #12]
   b9f4c:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b9f50:	b2f6      	uxtb	r6, r6
   b9f52:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9f56:	4555      	cmp	r5, sl
   b9f58:	d00e      	beq.n	b9f78 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9f5a:	f855 7b04 	ldr.w	r7, [r5], #4
   b9f5e:	4659      	mov	r1, fp
   b9f60:	1d38      	adds	r0, r7, #4
   b9f62:	f7ff fdff 	bl	b9b64 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9f66:	4286      	cmp	r6, r0
   b9f68:	d3f5      	bcc.n	b9f56 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b9f6a:	683b      	ldr	r3, [r7, #0]
   b9f6c:	464a      	mov	r2, r9
   b9f6e:	68db      	ldr	r3, [r3, #12]
   b9f70:	4641      	mov	r1, r8
   b9f72:	4638      	mov	r0, r7
   b9f74:	4798      	blx	r3
   b9f76:	e7ee      	b.n	b9f56 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b9f78:	2300      	movs	r3, #0
   b9f7a:	7323      	strb	r3, [r4, #12]
   b9f7c:	e7de      	b.n	b9f3c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b9f7e:	bf00      	nop
   b9f80:	e000ed00 	.word	0xe000ed00

000b9f84 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b9f88:	4b16      	ldr	r3, [pc, #88]	; (b9fe4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b9f8a:	685b      	ldr	r3, [r3, #4]
   b9f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9f90:	4605      	mov	r5, r0
   b9f92:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9f94:	bb1b      	cbnz	r3, b9fde <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b9f96:	f7ff fe59 	bl	b9c4c <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b9f9a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b9f9e:	4604      	mov	r4, r0
   b9fa0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9fa2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9fa4:	f7ff fd2c 	bl	b9a00 <_ZN14RecursiveMutex4lockEv.isra.0>
   b9fa8:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9fac:	2446      	movs	r4, #70	; 0x46
   b9fae:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9fb2:	45b0      	cmp	r8, r6
   b9fb4:	d109      	bne.n	b9fca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b9fb6:	a801      	add	r0, sp, #4
   b9fb8:	f7ff ff61 	bl	b9e7e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b9fbc:	42a5      	cmp	r5, r4
   b9fbe:	bfb4      	ite	lt
   b9fc0:	2000      	movlt	r0, #0
   b9fc2:	2001      	movge	r0, #1
}
   b9fc4:	b002      	add	sp, #8
   b9fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b9fca:	f856 0b04 	ldr.w	r0, [r6], #4
   b9fce:	4639      	mov	r1, r7
   b9fd0:	3004      	adds	r0, #4
   b9fd2:	f7ff fdc7 	bl	b9b64 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b9fd6:	4284      	cmp	r4, r0
   b9fd8:	bfa8      	it	ge
   b9fda:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b9fdc:	e7e9      	b.n	b9fb2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b9fde:	2000      	movs	r0, #0
   b9fe0:	e7f0      	b.n	b9fc4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b9fe2:	bf00      	nop
   b9fe4:	e000ed00 	.word	0xe000ed00

000b9fe8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9fea:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b9fee:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9ff0:	4604      	mov	r4, r0
   b9ff2:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9ff4:	db0d      	blt.n	ba012 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b9ff6:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b9ff8:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9ffa:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9ffc:	dd04      	ble.n	ba008 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b9ffe:	00b9      	lsls	r1, r7, #2
   ba000:	f7fe ff34 	bl	b8e6c <realloc>
            if (!d) {
   ba004:	b918      	cbnz	r0, ba00e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   ba006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   ba008:	f7fe ff28 	bl	b8e5c <free>
        T* d = nullptr;
   ba00c:	2000      	movs	r0, #0
        data_ = d;
   ba00e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba010:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba012:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba014:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba016:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   ba01a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba01c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   ba020:	1d08      	adds	r0, r1, #4
   ba022:	f003 fbbb 	bl	bd79c <memmove>
    new(p) T(std::move(value));
   ba026:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   ba02a:	6863      	ldr	r3, [r4, #4]
   ba02c:	3301      	adds	r3, #1
   ba02e:	6063      	str	r3, [r4, #4]
    return true;
   ba030:	2001      	movs	r0, #1
   ba032:	e7e8      	b.n	ba006 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000ba034 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba034:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   ba036:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   ba03a:	4604      	mov	r4, r0
   ba03c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba03e:	9301      	str	r3, [sp, #4]
   ba040:	460d      	mov	r5, r1
      { _M_device.lock(); }
   ba042:	f7ff fcdd 	bl	b9a00 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   ba046:	e9d4 3200 	ldrd	r3, r2, [r4]
   ba04a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   ba04e:	4293      	cmp	r3, r2
   ba050:	4619      	mov	r1, r3
   ba052:	d00b      	beq.n	ba06c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   ba054:	6809      	ldr	r1, [r1, #0]
   ba056:	42a9      	cmp	r1, r5
   ba058:	f103 0304 	add.w	r3, r3, #4
   ba05c:	d1f7      	bne.n	ba04e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   ba05e:	a801      	add	r0, sp, #4
   ba060:	f7ff ff0d 	bl	b9e7e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba064:	2500      	movs	r5, #0
}
   ba066:	4628      	mov	r0, r5
   ba068:	b003      	add	sp, #12
   ba06a:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   ba06c:	4629      	mov	r1, r5
   ba06e:	4620      	mov	r0, r4
   ba070:	f7ff ffba 	bl	b9fe8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   ba074:	4605      	mov	r5, r0
   ba076:	2800      	cmp	r0, #0
   ba078:	d0f1      	beq.n	ba05e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   ba07a:	6863      	ldr	r3, [r4, #4]
   ba07c:	2b01      	cmp	r3, #1
   ba07e:	d101      	bne.n	ba084 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   ba080:	f7ff fe00 	bl	b9c84 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba084:	a801      	add	r0, sp, #4
   ba086:	f7ff fefa 	bl	b9e7e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   ba08a:	e7ec      	b.n	ba066 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000ba08c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba08c:	b570      	push	{r4, r5, r6, lr}
   ba08e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   ba090:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba094:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   ba096:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   ba09a:	4282      	cmp	r2, r0
   ba09c:	d00f      	beq.n	ba0be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   ba09e:	4601      	mov	r1, r0
            if (*p == value) {
   ba0a0:	681d      	ldr	r5, [r3, #0]
   ba0a2:	f851 6b04 	ldr.w	r6, [r1], #4
   ba0a6:	42ae      	cmp	r6, r5
   ba0a8:	d107      	bne.n	ba0ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba0aa:	1a52      	subs	r2, r2, r1
   ba0ac:	f003 fb76 	bl	bd79c <memmove>
    --size_;
   ba0b0:	6863      	ldr	r3, [r4, #4]
   ba0b2:	3b01      	subs	r3, #1
   ba0b4:	6063      	str	r3, [r4, #4]
    return true;
   ba0b6:	2001      	movs	r0, #1
}
   ba0b8:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   ba0ba:	4608      	mov	r0, r1
   ba0bc:	e7ed      	b.n	ba09a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   ba0be:	2000      	movs	r0, #0
   ba0c0:	e7fa      	b.n	ba0b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000ba0c2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba0c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   ba0c4:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   ba0c8:	4604      	mov	r4, r0
   ba0ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba0cc:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba0ce:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   ba0d0:	f7ff fc96 	bl	b9a00 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   ba0d4:	a901      	add	r1, sp, #4
   ba0d6:	4620      	mov	r0, r4
   ba0d8:	f7ff ffd8 	bl	ba08c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   ba0dc:	b118      	cbz	r0, ba0e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   ba0de:	6863      	ldr	r3, [r4, #4]
   ba0e0:	b90b      	cbnz	r3, ba0e6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   ba0e2:	f7ff fddb 	bl	b9c9c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba0e6:	a803      	add	r0, sp, #12
   ba0e8:	f7ff fec9 	bl	b9e7e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba0ec:	b004      	add	sp, #16
   ba0ee:	bd10      	pop	{r4, pc}

000ba0f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ba0f0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ba0f2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ba0f6:	2318      	movs	r3, #24
   ba0f8:	4604      	mov	r4, r0
   ba0fa:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ba0fe:	42ae      	cmp	r6, r5
   ba100:	d015      	beq.n	ba12e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ba102:	f105 0110 	add.w	r1, r5, #16
   ba106:	4620      	mov	r0, r4
   ba108:	f7ff ffc0 	bl	ba08c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ba10c:	6863      	ldr	r3, [r4, #4]
   ba10e:	b90b      	cbnz	r3, ba114 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ba110:	f7ff fdc4 	bl	b9c9c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ba114:	69e0      	ldr	r0, [r4, #28]
   ba116:	6929      	ldr	r1, [r5, #16]
   ba118:	6803      	ldr	r3, [r0, #0]
   ba11a:	68db      	ldr	r3, [r3, #12]
   ba11c:	4798      	blx	r3
        if (h.stream) {
   ba11e:	6969      	ldr	r1, [r5, #20]
   ba120:	b119      	cbz	r1, ba12a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ba122:	6a20      	ldr	r0, [r4, #32]
   ba124:	6803      	ldr	r3, [r0, #0]
   ba126:	68db      	ldr	r3, [r3, #12]
   ba128:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ba12a:	3518      	adds	r5, #24
   ba12c:	e7e7      	b.n	ba0fe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ba12e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba132:	2618      	movs	r6, #24
   ba134:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba138:	42ae      	cmp	r6, r5
   ba13a:	d004      	beq.n	ba146 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ba13c:	4628      	mov	r0, r5
   ba13e:	f000 ff47 	bl	bafd0 <_ZN6StringD1Ev>
   ba142:	3518      	adds	r5, #24
   ba144:	e7f8      	b.n	ba138 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ba146:	2300      	movs	r3, #0
   ba148:	6163      	str	r3, [r4, #20]
}
   ba14a:	bd70      	pop	{r4, r5, r6, pc}

000ba14c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ba14c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba14e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ba150:	f7ff fda4 	bl	b9c9c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba154:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ba158:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba15a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba15c:	f7ff fc50 	bl	b9a00 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   ba160:	4620      	mov	r0, r4
   ba162:	f7ff ffc5 	bl	ba0f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ba166:	a801      	add	r0, sp, #4
   ba168:	f7ff fe89 	bl	b9e7e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ba16c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba16e:	b108      	cbz	r0, ba174 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ba170:	f7fe fb1e 	bl	b87b0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ba174:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba178:	2618      	movs	r6, #24
   ba17a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba17e:	42ae      	cmp	r6, r5
   ba180:	d004      	beq.n	ba18c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   ba182:	4628      	mov	r0, r5
   ba184:	f000 ff24 	bl	bafd0 <_ZN6StringD1Ev>
   ba188:	3518      	adds	r5, #24
   ba18a:	e7f8      	b.n	ba17e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   ba18c:	6920      	ldr	r0, [r4, #16]
   ba18e:	f7fe fe65 	bl	b8e5c <free>
   ba192:	6820      	ldr	r0, [r4, #0]
   ba194:	f7fe fe62 	bl	b8e5c <free>
}
   ba198:	4620      	mov	r0, r4
   ba19a:	b002      	add	sp, #8
   ba19c:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba1a0 <__tcf_2>:
    static LogManager mgr;
   ba1a0:	4801      	ldr	r0, [pc, #4]	; (ba1a8 <__tcf_2+0x8>)
   ba1a2:	f7ff bfd3 	b.w	ba14c <_ZN5spark10LogManagerD1Ev>
   ba1a6:	bf00      	nop
   ba1a8:	2003e658 	.word	0x2003e658

000ba1ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ba1ac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba1b0:	4604      	mov	r4, r0
   ba1b2:	460d      	mov	r5, r1
   ba1b4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba1b6:	d915      	bls.n	ba1e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   ba1b8:	4290      	cmp	r0, r2
   ba1ba:	d214      	bcs.n	ba1e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   ba1bc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   ba1c0:	1a75      	subs	r5, r6, r1
   ba1c2:	f1a1 0714 	sub.w	r7, r1, #20
   ba1c6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba1c8:	42b7      	cmp	r7, r6
   ba1ca:	d01a      	beq.n	ba202 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   ba1cc:	b11c      	cbz	r4, ba1d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   ba1ce:	4631      	mov	r1, r6
   ba1d0:	4620      	mov	r0, r4
   ba1d2:	f7ff fc78 	bl	b9ac6 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   ba1d6:	f106 0008 	add.w	r0, r6, #8
   ba1da:	f7ff fdf9 	bl	b9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   ba1de:	3e14      	subs	r6, #20
   ba1e0:	3c14      	subs	r4, #20
   ba1e2:	e7f1      	b.n	ba1c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   ba1e4:	d00d      	beq.n	ba202 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   ba1e6:	42b5      	cmp	r5, r6
   ba1e8:	d00b      	beq.n	ba202 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   ba1ea:	b11c      	cbz	r4, ba1f4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   ba1ec:	4629      	mov	r1, r5
   ba1ee:	4620      	mov	r0, r4
   ba1f0:	f7ff fc69 	bl	b9ac6 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   ba1f4:	f105 0008 	add.w	r0, r5, #8
   ba1f8:	f7ff fdea 	bl	b9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba1fc:	3514      	adds	r5, #20
   ba1fe:	3414      	adds	r4, #20
   ba200:	e7f1      	b.n	ba1e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   ba202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba204 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ba204:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba208:	4604      	mov	r4, r0
   ba20a:	460d      	mov	r5, r1
   ba20c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba20e:	d914      	bls.n	ba23a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ba210:	4290      	cmp	r0, r2
   ba212:	d213      	bcs.n	ba23c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ba214:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ba218:	1a75      	subs	r5, r6, r1
   ba21a:	f1a1 0710 	sub.w	r7, r1, #16
   ba21e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba220:	42b7      	cmp	r7, r6
   ba222:	d018      	beq.n	ba256 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ba224:	b11c      	cbz	r4, ba22e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ba226:	4631      	mov	r1, r6
   ba228:	4620      	mov	r0, r4
   ba22a:	f000 ff4d 	bl	bb0c8 <_ZN6StringC1EOS_>
                end->~T();
   ba22e:	4630      	mov	r0, r6
   ba230:	f000 fece 	bl	bafd0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba234:	3e10      	subs	r6, #16
   ba236:	3c10      	subs	r4, #16
   ba238:	e7f2      	b.n	ba220 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ba23a:	d00c      	beq.n	ba256 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ba23c:	42b5      	cmp	r5, r6
   ba23e:	d00a      	beq.n	ba256 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ba240:	b11c      	cbz	r4, ba24a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ba242:	4629      	mov	r1, r5
   ba244:	4620      	mov	r0, r4
   ba246:	f000 ff3f 	bl	bb0c8 <_ZN6StringC1EOS_>
                p->~T();
   ba24a:	4628      	mov	r0, r5
   ba24c:	f000 fec0 	bl	bafd0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba250:	3510      	adds	r5, #16
   ba252:	3410      	adds	r4, #16
   ba254:	e7f2      	b.n	ba23c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ba256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba258 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ba258:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba25a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba25c:	4605      	mov	r5, r0
        if (n > 0) {
   ba25e:	dd11      	ble.n	ba284 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba260:	0130      	lsls	r0, r6, #4
   ba262:	f7fe fdf3 	bl	b8e4c <malloc>
            if (!d) {
   ba266:	4604      	mov	r4, r0
   ba268:	b158      	cbz	r0, ba282 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba26a:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba26e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ba272:	f7ff ffc7 	bl	ba204 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ba276:	6828      	ldr	r0, [r5, #0]
   ba278:	f7fe fdf0 	bl	b8e5c <free>
        data_ = d;
   ba27c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba27e:	60ae      	str	r6, [r5, #8]
        return true;
   ba280:	2001      	movs	r0, #1
    }
   ba282:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba284:	2400      	movs	r4, #0
   ba286:	e7f6      	b.n	ba276 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ba288 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba28c:	4690      	mov	r8, r2
   ba28e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   ba290:	2300      	movs	r3, #0
   ba292:	9103      	str	r1, [sp, #12]
    return size_;
   ba294:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   ba298:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba29a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ba29c:	4299      	cmp	r1, r3
        capacity_(0) {
   ba29e:	e9c0 3300 	strd	r3, r3, [r0]
   ba2a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba2a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba2aa:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba2ae:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba2b0:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ba2b2:	dc23      	bgt.n	ba2fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ba2b4:	e9d8 5700 	ldrd	r5, r7, [r8]
   ba2b8:	2314      	movs	r3, #20
   ba2ba:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba2be:	42af      	cmp	r7, r5
   ba2c0:	d03b      	beq.n	ba33a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba2c2:	4629      	mov	r1, r5
   ba2c4:	a80b      	add	r0, sp, #44	; 0x2c
   ba2c6:	f000 feff 	bl	bb0c8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba2ca:	a90b      	add	r1, sp, #44	; 0x2c
   ba2cc:	a80f      	add	r0, sp, #60	; 0x3c
   ba2ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba2d0:	f000 fefa 	bl	bb0c8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba2d4:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba2d8:	4299      	cmp	r1, r3
   ba2da:	da1b      	bge.n	ba314 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba2dc:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba2e0:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba2e4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba2e8:	4631      	mov	r1, r6
   ba2ea:	f106 0010 	add.w	r0, r6, #16
   ba2ee:	f7ff ff89 	bl	ba204 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba2f2:	b9ee      	cbnz	r6, ba330 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba2f6:	3301      	adds	r3, #1
   ba2f8:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba2fa:	e011      	b.n	ba320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba2fc:	a808      	add	r0, sp, #32
   ba2fe:	f7ff ffab 	bl	ba258 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba302:	2800      	cmp	r0, #0
   ba304:	d1d6      	bne.n	ba2b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba306:	a808      	add	r0, sp, #32
   ba308:	f7fe fe27 	bl	b8f5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba30c:	4620      	mov	r0, r4
   ba30e:	b015      	add	sp, #84	; 0x54
   ba310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba314:	3101      	adds	r1, #1
   ba316:	a808      	add	r0, sp, #32
   ba318:	f7ff ff9e 	bl	ba258 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba31c:	2800      	cmp	r0, #0
   ba31e:	d1dd      	bne.n	ba2dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba320:	a80f      	add	r0, sp, #60	; 0x3c
   ba322:	f000 fe55 	bl	bafd0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba326:	a80b      	add	r0, sp, #44	; 0x2c
   ba328:	f000 fe52 	bl	bafd0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba32c:	3514      	adds	r5, #20
   ba32e:	e7c6      	b.n	ba2be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba330:	a90f      	add	r1, sp, #60	; 0x3c
   ba332:	4630      	mov	r0, r6
   ba334:	f000 fec8 	bl	bb0c8 <_ZN6StringC1EOS_>
   ba338:	e7dc      	b.n	ba2f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba33a:	2600      	movs	r6, #0
   ba33c:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba340:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba342:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba346:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba34a:	429e      	cmp	r6, r3
   ba34c:	da7c      	bge.n	ba448 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba34e:	0133      	lsls	r3, r6, #4
   ba350:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba352:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba354:	b90b      	cbnz	r3, ba35a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba356:	3601      	adds	r6, #1
   ba358:	e7f5      	b.n	ba346 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba35a:	2300      	movs	r3, #0
   ba35c:	9307      	str	r3, [sp, #28]
   ba35e:	fb09 f306 	mul.w	r3, r9, r6
   ba362:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba364:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba366:	a907      	add	r1, sp, #28
   ba368:	a806      	add	r0, sp, #24
   ba36a:	f7ff fb22 	bl	b99b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba36e:	4682      	mov	sl, r0
   ba370:	2800      	cmp	r0, #0
   ba372:	d0f0      	beq.n	ba356 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba374:	f04f 0300 	mov.w	r3, #0
   ba378:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba37c:	4601      	mov	r1, r0
   ba37e:	9a07      	ldr	r2, [sp, #28]
   ba380:	f10d 0317 	add.w	r3, sp, #23
   ba384:	4628      	mov	r0, r5
   ba386:	f7ff fbb1 	bl	b9aec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba38a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba38e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba390:	2f00      	cmp	r7, #0
   ba392:	d14a      	bne.n	ba42a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba394:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba398:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba39c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba3a4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba3a8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba3ac:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba3ae:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba3b2:	4293      	cmp	r3, r2
   ba3b4:	db17      	blt.n	ba3e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba3b6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba3ba:	f1ba 0f00 	cmp.w	sl, #0
   ba3be:	dd30      	ble.n	ba422 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba3c0:	fb09 f00a 	mul.w	r0, r9, sl
   ba3c4:	f7fe fd42 	bl	b8e4c <malloc>
            if (!d) {
   ba3c8:	4683      	mov	fp, r0
   ba3ca:	b360      	cbz	r0, ba426 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba3cc:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba3d0:	fb09 1202 	mla	r2, r9, r2, r1
   ba3d4:	f7ff feea 	bl	ba1ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba3d8:	6828      	ldr	r0, [r5, #0]
   ba3da:	f7fe fd3f 	bl	b8e5c <free>
        data_ = d;
   ba3de:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba3e2:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba3e6:	682b      	ldr	r3, [r5, #0]
   ba3e8:	9a01      	ldr	r2, [sp, #4]
   ba3ea:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba3ee:	686a      	ldr	r2, [r5, #4]
   ba3f0:	4651      	mov	r1, sl
   ba3f2:	fb09 3202 	mla	r2, r9, r2, r3
   ba3f6:	f10a 0014 	add.w	r0, sl, #20
   ba3fa:	f7ff fed7 	bl	ba1ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba3fe:	f1ba 0f00 	cmp.w	sl, #0
   ba402:	d003      	beq.n	ba40c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba404:	a90f      	add	r1, sp, #60	; 0x3c
   ba406:	4650      	mov	r0, sl
   ba408:	f7ff fb5d 	bl	b9ac6 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba40c:	686b      	ldr	r3, [r5, #4]
   ba40e:	3301      	adds	r3, #1
   ba410:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba412:	a811      	add	r0, sp, #68	; 0x44
   ba414:	f7ff fcdc 	bl	b9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba418:	b13f      	cbz	r7, ba42a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba41a:	a80b      	add	r0, sp, #44	; 0x2c
   ba41c:	f7ff fcd8 	bl	b9dd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba420:	e771      	b.n	ba306 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba422:	46bb      	mov	fp, r7
   ba424:	e7d8      	b.n	ba3d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba426:	2701      	movs	r7, #1
   ba428:	e7f3      	b.n	ba412 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba42a:	9b01      	ldr	r3, [sp, #4]
   ba42c:	682d      	ldr	r5, [r5, #0]
   ba42e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba432:	9b06      	ldr	r3, [sp, #24]
   ba434:	781b      	ldrb	r3, [r3, #0]
   ba436:	b92b      	cbnz	r3, ba444 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba438:	f8d8 3000 	ldr.w	r3, [r8]
   ba43c:	9a02      	ldr	r2, [sp, #8]
   ba43e:	4413      	add	r3, r2
   ba440:	7c1b      	ldrb	r3, [r3, #16]
   ba442:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba444:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba446:	e78e      	b.n	ba366 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba448:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba44a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba44c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba44e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba450:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba452:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba454:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba456:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba458:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba45a:	60a2      	str	r2, [r4, #8]
   ba45c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba45e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba460:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba462:	60e2      	str	r2, [r4, #12]
   ba464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba466:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba468:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba46a:	6122      	str	r2, [r4, #16]
   ba46c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba46e:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba470:	9b03      	ldr	r3, [sp, #12]
   ba472:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba474:	6162      	str	r2, [r4, #20]
   ba476:	7623      	strb	r3, [r4, #24]
   ba478:	e7cf      	b.n	ba41a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba47c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba47c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba47e:	4604      	mov	r4, r0
   ba480:	b087      	sub	sp, #28
   ba482:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba484:	4626      	mov	r6, r4
        stream_(&stream) {
   ba486:	4619      	mov	r1, r3
   ba488:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba48a:	4617      	mov	r7, r2
        stream_(&stream) {
   ba48c:	f7fa fcd9 	bl	b4e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba490:	4b0b      	ldr	r3, [pc, #44]	; (ba4c0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba492:	f846 3b04 	str.w	r3, [r6], #4
   ba496:	4669      	mov	r1, sp
   ba498:	a803      	add	r0, sp, #12
   ba49a:	f7fa fcd2 	bl	b4e42 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba49e:	aa03      	add	r2, sp, #12
   ba4a0:	4639      	mov	r1, r7
   ba4a2:	4630      	mov	r0, r6
   ba4a4:	f7ff fef0 	bl	ba288 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba4a8:	a803      	add	r0, sp, #12
   ba4aa:	f7fa fc89 	bl	b4dc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba4ae:	4668      	mov	r0, sp
   ba4b0:	f7fa fc86 	bl	b4dc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba4b4:	4b03      	ldr	r3, [pc, #12]	; (ba4c4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba4b6:	6023      	str	r3, [r4, #0]
}
   ba4b8:	4620      	mov	r0, r4
        stream_(&stream) {
   ba4ba:	6225      	str	r5, [r4, #32]
}
   ba4bc:	b007      	add	sp, #28
   ba4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba4c0:	000bdfac 	.word	0x000bdfac
   ba4c4:	000bedb8 	.word	0x000bedb8

000ba4c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba4ca:	460f      	mov	r7, r1
   ba4cc:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba4ce:	491d      	ldr	r1, [pc, #116]	; (ba544 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba4d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba4d2:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba4d4:	4616      	mov	r6, r2
   ba4d6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba4d8:	f003 fa05 	bl	bd8e6 <strcmp>
   ba4dc:	b9c0      	cbnz	r0, ba510 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba4de:	b1a4      	cbz	r4, ba50a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba4e0:	4629      	mov	r1, r5
   ba4e2:	a801      	add	r0, sp, #4
   ba4e4:	f7ff fcbc 	bl	b9e60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba4e8:	4917      	ldr	r1, [pc, #92]	; (ba548 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba4ea:	2024      	movs	r0, #36	; 0x24
   ba4ec:	f001 fb64 	bl	bbbb8 <_ZnwjRKSt9nothrow_t>
   ba4f0:	4605      	mov	r5, r0
   ba4f2:	b130      	cbz	r0, ba502 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba4f4:	ab01      	add	r3, sp, #4
   ba4f6:	4632      	mov	r2, r6
   ba4f8:	4621      	mov	r1, r4
   ba4fa:	f7ff ffbf 	bl	ba47c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba4fe:	4b13      	ldr	r3, [pc, #76]	; (ba54c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba500:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba502:	a801      	add	r0, sp, #4
   ba504:	f7fa fc5c 	bl	b4dc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba508:	462c      	mov	r4, r5
}
   ba50a:	4620      	mov	r0, r4
   ba50c:	b005      	add	sp, #20
   ba50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba510:	490f      	ldr	r1, [pc, #60]	; (ba550 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba512:	4638      	mov	r0, r7
   ba514:	f003 f9e7 	bl	bd8e6 <strcmp>
   ba518:	b990      	cbnz	r0, ba540 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba51a:	2c00      	cmp	r4, #0
   ba51c:	d0f5      	beq.n	ba50a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba51e:	4629      	mov	r1, r5
   ba520:	a801      	add	r0, sp, #4
   ba522:	f7ff fc9d 	bl	b9e60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba526:	4908      	ldr	r1, [pc, #32]	; (ba548 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba528:	2024      	movs	r0, #36	; 0x24
   ba52a:	f001 fb45 	bl	bbbb8 <_ZnwjRKSt9nothrow_t>
   ba52e:	4605      	mov	r5, r0
   ba530:	2800      	cmp	r0, #0
   ba532:	d0e6      	beq.n	ba502 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba534:	ab01      	add	r3, sp, #4
   ba536:	4632      	mov	r2, r6
   ba538:	4621      	mov	r1, r4
   ba53a:	f7ff ff9f 	bl	ba47c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba53e:	e7e0      	b.n	ba502 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba540:	2400      	movs	r4, #0
   ba542:	e7e2      	b.n	ba50a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba544:	000bed3e 	.word	0x000bed3e
   ba548:	000bef18 	.word	0x000bef18
   ba54c:	000bedd0 	.word	0x000bedd0
   ba550:	000bed42 	.word	0x000bed42

000ba554 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba554:	4b01      	ldr	r3, [pc, #4]	; (ba55c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba556:	4a02      	ldr	r2, [pc, #8]	; (ba560 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba558:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba55a:	4770      	bx	lr
   ba55c:	2003e654 	.word	0x2003e654
   ba560:	000bed53 	.word	0x000bed53

000ba564 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba568:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba56a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba56e:	4604      	mov	r4, r0
   ba570:	460e      	mov	r6, r1
   ba572:	4617      	mov	r7, r2
   ba574:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba576:	f001 f915 	bl	bb7a4 <_Z16_fetch_usbserialv>
   ba57a:	4581      	cmp	r9, r0
   ba57c:	d04c      	beq.n	ba618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba57e:	792b      	ldrb	r3, [r5, #4]
   ba580:	0719      	lsls	r1, r3, #28
   ba582:	d504      	bpl.n	ba58e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba584:	696a      	ldr	r2, [r5, #20]
   ba586:	4954      	ldr	r1, [pc, #336]	; (ba6d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba588:	4620      	mov	r0, r4
   ba58a:	f7ff fa8d 	bl	b9aa8 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba58e:	f1b8 0f00 	cmp.w	r8, #0
   ba592:	d00d      	beq.n	ba5b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba594:	215b      	movs	r1, #91	; 0x5b
   ba596:	4620      	mov	r0, r4
   ba598:	f7ff fa7a 	bl	b9a90 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba59c:	4641      	mov	r1, r8
   ba59e:	4620      	mov	r0, r4
   ba5a0:	f7ff fa67 	bl	b9a72 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba5a4:	6823      	ldr	r3, [r4, #0]
   ba5a6:	494d      	ldr	r1, [pc, #308]	; (ba6dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba5a8:	68db      	ldr	r3, [r3, #12]
   ba5aa:	2202      	movs	r2, #2
   ba5ac:	4620      	mov	r0, r4
   ba5ae:	4798      	blx	r3
    if (attr.has_file) {
   ba5b0:	792b      	ldrb	r3, [r5, #4]
   ba5b2:	07da      	lsls	r2, r3, #31
   ba5b4:	d523      	bpl.n	ba5fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba5b6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba5ba:	212f      	movs	r1, #47	; 0x2f
   ba5bc:	4640      	mov	r0, r8
   ba5be:	f003 f9d3 	bl	bd968 <strrchr>
    if (s1) {
   ba5c2:	b108      	cbz	r0, ba5c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba5c4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba5c8:	4641      	mov	r1, r8
   ba5ca:	4620      	mov	r0, r4
   ba5cc:	f7ff fa51 	bl	b9a72 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba5d0:	792b      	ldrb	r3, [r5, #4]
   ba5d2:	079b      	lsls	r3, r3, #30
   ba5d4:	d508      	bpl.n	ba5e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba5d6:	213a      	movs	r1, #58	; 0x3a
   ba5d8:	4620      	mov	r0, r4
   ba5da:	f7ff fa59 	bl	b9a90 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba5de:	68ea      	ldr	r2, [r5, #12]
   ba5e0:	493f      	ldr	r1, [pc, #252]	; (ba6e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba5e2:	4620      	mov	r0, r4
   ba5e4:	f7ff fa60 	bl	b9aa8 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba5e8:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba5ea:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba5ec:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba5f0:	68db      	ldr	r3, [r3, #12]
   ba5f2:	bf14      	ite	ne
   ba5f4:	493b      	ldrne	r1, [pc, #236]	; (ba6e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba5f6:	493c      	ldreq	r1, [pc, #240]	; (ba6e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba5f8:	2202      	movs	r2, #2
            write(": ", 2);
   ba5fa:	4620      	mov	r0, r4
   ba5fc:	4798      	blx	r3
    if (attr.has_function) {
   ba5fe:	792b      	ldrb	r3, [r5, #4]
   ba600:	0758      	lsls	r0, r3, #29
   ba602:	d51d      	bpl.n	ba640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba604:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba606:	460b      	mov	r3, r1
   ba608:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba60a:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba60e:	b160      	cbz	r0, ba62a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba610:	2820      	cmp	r0, #32
   ba612:	d108      	bne.n	ba626 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba614:	4619      	mov	r1, r3
   ba616:	e7f7      	b.n	ba608 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba618:	4834      	ldr	r0, [pc, #208]	; (ba6ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba61a:	f000 f966 	bl	ba8ea <_ZN5spark12NetworkClass9listeningEv>
   ba61e:	2800      	cmp	r0, #0
   ba620:	d0ad      	beq.n	ba57e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba626:	2828      	cmp	r0, #40	; 0x28
   ba628:	d1ee      	bne.n	ba608 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba62a:	6823      	ldr	r3, [r4, #0]
   ba62c:	1a52      	subs	r2, r2, r1
   ba62e:	68db      	ldr	r3, [r3, #12]
   ba630:	4620      	mov	r0, r4
   ba632:	4798      	blx	r3
        write("(): ", 4);
   ba634:	6823      	ldr	r3, [r4, #0]
   ba636:	492e      	ldr	r1, [pc, #184]	; (ba6f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba638:	68db      	ldr	r3, [r3, #12]
   ba63a:	2204      	movs	r2, #4
   ba63c:	4620      	mov	r0, r4
   ba63e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba640:	2100      	movs	r1, #0
   ba642:	4638      	mov	r0, r7
   ba644:	f7fe fad4 	bl	b8bf0 <log_level_name>
   ba648:	4601      	mov	r1, r0
    write(s);
   ba64a:	4620      	mov	r0, r4
   ba64c:	f7ff fa11 	bl	b9a72 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba650:	6823      	ldr	r3, [r4, #0]
   ba652:	4925      	ldr	r1, [pc, #148]	; (ba6e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba654:	68db      	ldr	r3, [r3, #12]
   ba656:	2202      	movs	r2, #2
   ba658:	4620      	mov	r0, r4
   ba65a:	4798      	blx	r3
    if (msg) {
   ba65c:	b11e      	cbz	r6, ba666 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba65e:	4631      	mov	r1, r6
   ba660:	4620      	mov	r0, r4
   ba662:	f7ff fa06 	bl	b9a72 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba666:	792b      	ldrb	r3, [r5, #4]
   ba668:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba66c:	d02c      	beq.n	ba6c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba66e:	6823      	ldr	r3, [r4, #0]
   ba670:	4920      	ldr	r1, [pc, #128]	; (ba6f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba672:	68db      	ldr	r3, [r3, #12]
   ba674:	2202      	movs	r2, #2
   ba676:	4620      	mov	r0, r4
   ba678:	4798      	blx	r3
        if (attr.has_code) {
   ba67a:	792b      	ldrb	r3, [r5, #4]
   ba67c:	06d9      	lsls	r1, r3, #27
   ba67e:	d50a      	bpl.n	ba696 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba680:	6823      	ldr	r3, [r4, #0]
   ba682:	491d      	ldr	r1, [pc, #116]	; (ba6f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba684:	68db      	ldr	r3, [r3, #12]
   ba686:	2207      	movs	r2, #7
   ba688:	4620      	mov	r0, r4
   ba68a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba68c:	69aa      	ldr	r2, [r5, #24]
   ba68e:	491b      	ldr	r1, [pc, #108]	; (ba6fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba690:	4620      	mov	r0, r4
   ba692:	f7ff fa09 	bl	b9aa8 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba696:	792b      	ldrb	r3, [r5, #4]
   ba698:	069a      	lsls	r2, r3, #26
   ba69a:	d511      	bpl.n	ba6c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba69c:	06db      	lsls	r3, r3, #27
   ba69e:	d505      	bpl.n	ba6ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba6a0:	6823      	ldr	r3, [r4, #0]
   ba6a2:	4910      	ldr	r1, [pc, #64]	; (ba6e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba6a4:	68db      	ldr	r3, [r3, #12]
   ba6a6:	2202      	movs	r2, #2
   ba6a8:	4620      	mov	r0, r4
   ba6aa:	4798      	blx	r3
            write("details = ", 10);
   ba6ac:	6823      	ldr	r3, [r4, #0]
   ba6ae:	4914      	ldr	r1, [pc, #80]	; (ba700 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba6b0:	68db      	ldr	r3, [r3, #12]
   ba6b2:	4620      	mov	r0, r4
   ba6b4:	220a      	movs	r2, #10
   ba6b6:	4798      	blx	r3
            write(attr.details);
   ba6b8:	69e9      	ldr	r1, [r5, #28]
   ba6ba:	4620      	mov	r0, r4
   ba6bc:	f7ff f9d9 	bl	b9a72 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba6c0:	215d      	movs	r1, #93	; 0x5d
   ba6c2:	4620      	mov	r0, r4
   ba6c4:	f7ff f9e4 	bl	b9a90 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba6c8:	6823      	ldr	r3, [r4, #0]
   ba6ca:	490e      	ldr	r1, [pc, #56]	; (ba704 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba6cc:	68db      	ldr	r3, [r3, #12]
   ba6ce:	4620      	mov	r0, r4
   ba6d0:	2202      	movs	r2, #2
}
   ba6d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba6d6:	4718      	bx	r3
   ba6d8:	000bed57 	.word	0x000bed57
   ba6dc:	000bed5e 	.word	0x000bed5e
   ba6e0:	000bddae 	.word	0x000bddae
   ba6e4:	000bed61 	.word	0x000bed61
   ba6e8:	000bed66 	.word	0x000bed66
   ba6ec:	2003e680 	.word	0x2003e680
   ba6f0:	000bed64 	.word	0x000bed64
   ba6f4:	000bed69 	.word	0x000bed69
   ba6f8:	000bed6c 	.word	0x000bed6c
   ba6fc:	000be64c 	.word	0x000be64c
   ba700:	000bed74 	.word	0x000bed74
   ba704:	000bed7f 	.word	0x000bed7f

000ba708 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba70c:	b085      	sub	sp, #20
    return stream_;
   ba70e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba712:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba714:	4605      	mov	r5, r0
   ba716:	460f      	mov	r7, r1
   ba718:	4690      	mov	r8, r2
   ba71a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba71c:	f001 f842 	bl	bb7a4 <_Z16_fetch_usbserialv>
   ba720:	4581      	cmp	r9, r0
   ba722:	d105      	bne.n	ba730 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba724:	4849      	ldr	r0, [pc, #292]	; (ba84c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba726:	f000 f8e0 	bl	ba8ea <_ZN5spark12NetworkClass9listeningEv>
   ba72a:	2800      	cmp	r0, #0
   ba72c:	f040 808a 	bne.w	ba844 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba730:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba732:	4a47      	ldr	r2, [pc, #284]	; (ba850 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba734:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba736:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba73a:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba73c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba73e:	f88d 9008 	strb.w	r9, [sp, #8]
   ba742:	f7ff f850 	bl	b97e6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba746:	4649      	mov	r1, r9
   ba748:	4640      	mov	r0, r8
   ba74a:	f7fe fa51 	bl	b8bf0 <log_level_name>
    json.name("l", 1).value(s);
   ba74e:	4941      	ldr	r1, [pc, #260]	; (ba854 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba750:	4680      	mov	r8, r0
   ba752:	2201      	movs	r2, #1
   ba754:	a801      	add	r0, sp, #4
   ba756:	f7ff f8d5 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba75a:	4641      	mov	r1, r8
   ba75c:	f7ff f97b 	bl	b9a56 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba760:	b13f      	cbz	r7, ba772 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba762:	493d      	ldr	r1, [pc, #244]	; (ba858 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba764:	2201      	movs	r2, #1
   ba766:	a801      	add	r0, sp, #4
   ba768:	f7ff f8cc 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba76c:	4639      	mov	r1, r7
   ba76e:	f7ff f972 	bl	b9a56 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba772:	b13e      	cbz	r6, ba784 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba774:	4939      	ldr	r1, [pc, #228]	; (ba85c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba776:	2201      	movs	r2, #1
   ba778:	a801      	add	r0, sp, #4
   ba77a:	f7ff f8c3 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba77e:	4631      	mov	r1, r6
   ba780:	f7ff f969 	bl	b9a56 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba784:	7923      	ldrb	r3, [r4, #4]
   ba786:	07df      	lsls	r7, r3, #31
   ba788:	d50e      	bpl.n	ba7a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba78a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba78c:	212f      	movs	r1, #47	; 0x2f
   ba78e:	4630      	mov	r0, r6
   ba790:	f003 f8ea 	bl	bd968 <strrchr>
    if (s1) {
   ba794:	b100      	cbz	r0, ba798 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba796:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba798:	4931      	ldr	r1, [pc, #196]	; (ba860 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba79a:	2201      	movs	r2, #1
   ba79c:	a801      	add	r0, sp, #4
   ba79e:	f7ff f8b1 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba7a2:	4631      	mov	r1, r6
   ba7a4:	f7ff f957 	bl	b9a56 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba7a8:	7923      	ldrb	r3, [r4, #4]
   ba7aa:	079e      	lsls	r6, r3, #30
   ba7ac:	d507      	bpl.n	ba7be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba7ae:	492d      	ldr	r1, [pc, #180]	; (ba864 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba7b0:	2202      	movs	r2, #2
   ba7b2:	a801      	add	r0, sp, #4
   ba7b4:	f7ff f8a6 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba7b8:	68e1      	ldr	r1, [r4, #12]
   ba7ba:	f7ff f821 	bl	b9800 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba7be:	7923      	ldrb	r3, [r4, #4]
   ba7c0:	0758      	lsls	r0, r3, #29
   ba7c2:	d514      	bpl.n	ba7ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba7c4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba7c6:	4633      	mov	r3, r6
   ba7c8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba7ce:	b12a      	cbz	r2, ba7dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba7d0:	2a20      	cmp	r2, #32
   ba7d2:	d101      	bne.n	ba7d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba7d4:	461e      	mov	r6, r3
   ba7d6:	e7f7      	b.n	ba7c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba7d8:	2a28      	cmp	r2, #40	; 0x28
   ba7da:	d1f5      	bne.n	ba7c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba7dc:	4922      	ldr	r1, [pc, #136]	; (ba868 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba7de:	2202      	movs	r2, #2
   ba7e0:	a801      	add	r0, sp, #4
   ba7e2:	f7ff f88f 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba7e6:	1bba      	subs	r2, r7, r6
   ba7e8:	4631      	mov	r1, r6
   ba7ea:	f7ff f89b 	bl	b9924 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba7ee:	7923      	ldrb	r3, [r4, #4]
   ba7f0:	0719      	lsls	r1, r3, #28
   ba7f2:	d507      	bpl.n	ba804 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba7f4:	491d      	ldr	r1, [pc, #116]	; (ba86c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba7f6:	2201      	movs	r2, #1
   ba7f8:	a801      	add	r0, sp, #4
   ba7fa:	f7ff f883 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba7fe:	6961      	ldr	r1, [r4, #20]
   ba800:	f7ff f810 	bl	b9824 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba804:	7923      	ldrb	r3, [r4, #4]
   ba806:	06da      	lsls	r2, r3, #27
   ba808:	d508      	bpl.n	ba81c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba80a:	2204      	movs	r2, #4
   ba80c:	4918      	ldr	r1, [pc, #96]	; (ba870 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba80e:	eb0d 0002 	add.w	r0, sp, r2
   ba812:	f7ff f877 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba816:	69a1      	ldr	r1, [r4, #24]
   ba818:	f7fe fff2 	bl	b9800 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba81c:	7923      	ldrb	r3, [r4, #4]
   ba81e:	069b      	lsls	r3, r3, #26
   ba820:	d507      	bpl.n	ba832 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba822:	4914      	ldr	r1, [pc, #80]	; (ba874 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba824:	2206      	movs	r2, #6
   ba826:	a801      	add	r0, sp, #4
   ba828:	f7ff f86c 	bl	b9904 <_ZN5spark10JSONWriter4nameEPKcj>
   ba82c:	69e1      	ldr	r1, [r4, #28]
   ba82e:	f7ff f912 	bl	b9a56 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba832:	a801      	add	r0, sp, #4
   ba834:	f7fe ffc1 	bl	b97ba <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba838:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba83a:	490f      	ldr	r1, [pc, #60]	; (ba878 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba83c:	6803      	ldr	r3, [r0, #0]
   ba83e:	2202      	movs	r2, #2
   ba840:	68db      	ldr	r3, [r3, #12]
   ba842:	4798      	blx	r3
}
   ba844:	b005      	add	sp, #20
   ba846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba84a:	bf00      	nop
   ba84c:	2003e680 	.word	0x2003e680
   ba850:	000beda0 	.word	0x000beda0
   ba854:	000bed34 	.word	0x000bed34
   ba858:	000bed82 	.word	0x000bed82
   ba85c:	000bf050 	.word	0x000bf050
   ba860:	000be0df 	.word	0x000be0df
   ba864:	000bed84 	.word	0x000bed84
   ba868:	000bed87 	.word	0x000bed87
   ba86c:	000be2ac 	.word	0x000be2ac
   ba870:	000bed8a 	.word	0x000bed8a
   ba874:	000bed8f 	.word	0x000bed8f
   ba878:	000bed7f 	.word	0x000bed7f

000ba87c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba87c:	2300      	movs	r3, #0
   ba87e:	6840      	ldr	r0, [r0, #4]
   ba880:	461a      	mov	r2, r3
   ba882:	f7fe ba83 	b.w	b8d8c <network_connect>

000ba886 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba886:	6840      	ldr	r0, [r0, #4]
   ba888:	2200      	movs	r2, #0
   ba88a:	2102      	movs	r1, #2
   ba88c:	f7fe ba8e 	b.w	b8dac <network_disconnect>

000ba890 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba890:	2200      	movs	r2, #0
   ba892:	6840      	ldr	r0, [r0, #4]
   ba894:	4611      	mov	r1, r2
   ba896:	f7fe ba81 	b.w	b8d9c <network_connecting>

000ba89a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba89a:	2200      	movs	r2, #0
   ba89c:	6840      	ldr	r0, [r0, #4]
   ba89e:	4611      	mov	r1, r2
   ba8a0:	f7fe ba8c 	b.w	b8dbc <network_ready>

000ba8a4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba8a4:	2300      	movs	r3, #0
   ba8a6:	6840      	ldr	r0, [r0, #4]
   ba8a8:	461a      	mov	r2, r3
   ba8aa:	4619      	mov	r1, r3
   ba8ac:	f7fe ba8e 	b.w	b8dcc <network_on>

000ba8b0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba8b0:	2300      	movs	r3, #0
   ba8b2:	6840      	ldr	r0, [r0, #4]
   ba8b4:	461a      	mov	r2, r3
   ba8b6:	4619      	mov	r1, r3
   ba8b8:	f7fe ba90 	b.w	b8ddc <network_off>

000ba8bc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba8bc:	6840      	ldr	r0, [r0, #4]
   ba8be:	2100      	movs	r1, #0
   ba8c0:	f7fe bab4 	b.w	b8e2c <network_is_on>

000ba8c4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba8c4:	6840      	ldr	r0, [r0, #4]
   ba8c6:	2100      	movs	r1, #0
   ba8c8:	f7fe bab8 	b.w	b8e3c <network_is_off>

000ba8cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba8cc:	6840      	ldr	r0, [r0, #4]
   ba8ce:	2200      	movs	r2, #0
   ba8d0:	f081 0101 	eor.w	r1, r1, #1
   ba8d4:	f7fe ba8a 	b.w	b8dec <network_listen>

000ba8d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba8d8:	6840      	ldr	r0, [r0, #4]
   ba8da:	2200      	movs	r2, #0
   ba8dc:	f7fe ba96 	b.w	b8e0c <network_set_listen_timeout>

000ba8e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba8e0:	2200      	movs	r2, #0
   ba8e2:	6840      	ldr	r0, [r0, #4]
   ba8e4:	4611      	mov	r1, r2
   ba8e6:	f7fe ba99 	b.w	b8e1c <network_get_listen_timeout>

000ba8ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba8ea:	2200      	movs	r2, #0
   ba8ec:	6840      	ldr	r0, [r0, #4]
   ba8ee:	4611      	mov	r1, r2
   ba8f0:	f7fe ba84 	b.w	b8dfc <network_listening>

000ba8f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba8f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba8f8:	b095      	sub	sp, #84	; 0x54
   ba8fa:	4614      	mov	r4, r2
   ba8fc:	460d      	mov	r5, r1
   ba8fe:	4607      	mov	r7, r0
    IPAddress addr;
   ba900:	f7fe fe0a 	bl	b9518 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba904:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba906:	221c      	movs	r2, #28
   ba908:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba90a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba90c:	f002 ff60 	bl	bd7d0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba910:	2340      	movs	r3, #64	; 0x40
   ba912:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba914:	4620      	mov	r0, r4
   ba916:	466b      	mov	r3, sp
   ba918:	aa0c      	add	r2, sp, #48	; 0x30
   ba91a:	2100      	movs	r1, #0
   ba91c:	f7fe f868 	bl	b89f0 <netdb_getaddrinfo>
    if (!r) {
   ba920:	4604      	mov	r4, r0
   ba922:	2800      	cmp	r0, #0
   ba924:	d14b      	bne.n	ba9be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba926:	4602      	mov	r2, r0
   ba928:	2101      	movs	r1, #1
   ba92a:	6868      	ldr	r0, [r5, #4]
   ba92c:	f7fe fa46 	bl	b8dbc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba930:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba932:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba934:	4622      	mov	r2, r4
   ba936:	6868      	ldr	r0, [r5, #4]
   ba938:	f7fe fa40 	bl	b8dbc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba93c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba93e:	4681      	mov	r9, r0
        bool ok = false;
   ba940:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba942:	2e00      	cmp	r6, #0
   ba944:	d03b      	beq.n	ba9be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba946:	2900      	cmp	r1, #0
   ba948:	d139      	bne.n	ba9be <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba94a:	6873      	ldr	r3, [r6, #4]
   ba94c:	2b02      	cmp	r3, #2
   ba94e:	d003      	beq.n	ba958 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba950:	2b0a      	cmp	r3, #10
   ba952:	d011      	beq.n	ba978 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba954:	69f6      	ldr	r6, [r6, #28]
   ba956:	e7f4      	b.n	ba942 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba958:	f1b8 0f00 	cmp.w	r8, #0
   ba95c:	d0fa      	beq.n	ba954 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba95e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba960:	a806      	add	r0, sp, #24
   ba962:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba964:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba966:	f7fe fe05 	bl	b9574 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba96a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba96c:	1d3c      	adds	r4, r7, #4
   ba96e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba970:	682b      	ldr	r3, [r5, #0]
   ba972:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba974:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba976:	e7ed      	b.n	ba954 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba978:	f1b9 0f00 	cmp.w	r9, #0
   ba97c:	d0ea      	beq.n	ba954 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba97e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba980:	2210      	movs	r2, #16
   ba982:	a801      	add	r0, sp, #4
   ba984:	f002 ff24 	bl	bd7d0 <memset>
                    a.v = 6;
   ba988:	2306      	movs	r3, #6
   ba98a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba98e:	ad01      	add	r5, sp, #4
   ba990:	f104 0308 	add.w	r3, r4, #8
   ba994:	3418      	adds	r4, #24
   ba996:	6818      	ldr	r0, [r3, #0]
   ba998:	6859      	ldr	r1, [r3, #4]
   ba99a:	462a      	mov	r2, r5
   ba99c:	c203      	stmia	r2!, {r0, r1}
   ba99e:	3308      	adds	r3, #8
   ba9a0:	42a3      	cmp	r3, r4
   ba9a2:	4615      	mov	r5, r2
   ba9a4:	d1f7      	bne.n	ba996 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba9a6:	a901      	add	r1, sp, #4
   ba9a8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba9aa:	ad07      	add	r5, sp, #28
   ba9ac:	f7fe fdc2 	bl	b9534 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba9b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba9b2:	1d3c      	adds	r4, r7, #4
   ba9b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba9b6:	682b      	ldr	r3, [r5, #0]
   ba9b8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba9ba:	4649      	mov	r1, r9
   ba9bc:	e7ca      	b.n	ba954 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba9be:	9800      	ldr	r0, [sp, #0]
   ba9c0:	f7fe f80e 	bl	b89e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba9c4:	4638      	mov	r0, r7
   ba9c6:	b015      	add	sp, #84	; 0x54
   ba9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba9cc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba9cc:	4b02      	ldr	r3, [pc, #8]	; (ba9d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba9ce:	4a03      	ldr	r2, [pc, #12]	; (ba9dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba9d0:	601a      	str	r2, [r3, #0]
   ba9d2:	2200      	movs	r2, #0
   ba9d4:	605a      	str	r2, [r3, #4]

} // spark
   ba9d6:	4770      	bx	lr
   ba9d8:	2003e680 	.word	0x2003e680
   ba9dc:	000bee18 	.word	0x000bee18

000ba9e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   ba9e0:	b508      	push	{r3, lr}
            return &Wire1;
   ba9e2:	f001 f885 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   ba9e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   ba9ea:	f7fe bd1d 	b.w	b9428 <_ZN7TwoWire4lockEv>

000ba9ee <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   ba9ee:	b510      	push	{r4, lr}
   ba9f0:	4604      	mov	r4, r0
    lock_(_lock)
   ba9f2:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   ba9f4:	b109      	cbz	r1, ba9fa <_ZN4PMICC1Eb+0xc>
        lock();
   ba9f6:	f7ff fff3 	bl	ba9e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   ba9fa:	4620      	mov	r0, r4
   ba9fc:	bd10      	pop	{r4, pc}

000ba9fe <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   ba9fe:	b508      	push	{r3, lr}
            return &Wire1;
   baa00:	f001 f876 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   baa04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   baa08:	f7fe bd17 	b.w	b943a <_ZN7TwoWire6unlockEv>

000baa0c <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   baa0c:	b510      	push	{r4, lr}
    if (lock_) {
   baa0e:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   baa10:	4604      	mov	r4, r0
    if (lock_) {
   baa12:	b10b      	cbz	r3, baa18 <_ZN4PMICD1Ev+0xc>
        unlock();
   baa14:	f7ff fff3 	bl	ba9fe <_ZN4PMIC6unlockEv>
}
   baa18:	4620      	mov	r0, r4
   baa1a:	bd10      	pop	{r4, pc}

000baa1c <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   baa1c:	b510      	push	{r4, lr}
   baa1e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   baa20:	6800      	ldr	r0, [r0, #0]
   baa22:	f7ff ffec 	bl	ba9fe <_ZN4PMIC6unlockEv>
   baa26:	4620      	mov	r0, r4
   baa28:	bd10      	pop	{r4, pc}

000baa2a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   baa2a:	b530      	push	{r4, r5, lr}
   baa2c:	b087      	sub	sp, #28
   baa2e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   baa30:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   baa32:	f7ff ffd5 	bl	ba9e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   baa36:	226b      	movs	r2, #107	; 0x6b
   baa38:	2300      	movs	r3, #0
   baa3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   baa3e:	2401      	movs	r4, #1
   baa40:	230a      	movs	r3, #10
   baa42:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   baa46:	f001 f853 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   baa4a:	a902      	add	r1, sp, #8
   baa4c:	f7fe fcd0 	bl	b93f0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   baa50:	f001 f84e 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   baa54:	6803      	ldr	r3, [r0, #0]
   baa56:	4629      	mov	r1, r5
   baa58:	689b      	ldr	r3, [r3, #8]
   baa5a:	4798      	blx	r3
            return &Wire1;
   baa5c:	f001 f848 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   baa60:	4621      	mov	r1, r4
   baa62:	f7fe fcdd 	bl	b9420 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   baa66:	9403      	str	r4, [sp, #12]
            return &Wire1;
   baa68:	f001 f842 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   baa6c:	a902      	add	r1, sp, #8
   baa6e:	f7fe fc8f 	bl	b9390 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   baa72:	f001 f83d 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   baa76:	6803      	ldr	r3, [r0, #0]
   baa78:	695b      	ldr	r3, [r3, #20]
   baa7a:	4798      	blx	r3
   baa7c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   baa7e:	a801      	add	r0, sp, #4
   baa80:	f7ff ffcc 	bl	baa1c <_ZNSt10lock_guardI4PMICED1Ev>
}
   baa84:	b2e0      	uxtb	r0, r4
   baa86:	b007      	add	sp, #28
   baa88:	bd30      	pop	{r4, r5, pc}

000baa8a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   baa8a:	b570      	push	{r4, r5, r6, lr}
   baa8c:	b086      	sub	sp, #24
   baa8e:	460d      	mov	r5, r1
   baa90:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   baa92:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   baa94:	f7ff ffa4 	bl	ba9e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   baa98:	226b      	movs	r2, #107	; 0x6b
   baa9a:	2300      	movs	r3, #0
   baa9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   baaa0:	2601      	movs	r6, #1
   baaa2:	230a      	movs	r3, #10
   baaa4:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   baaa8:	f001 f822 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   baaac:	a902      	add	r1, sp, #8
   baaae:	f7fe fc9f 	bl	b93f0 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   baab2:	f001 f81d 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   baab6:	6803      	ldr	r3, [r0, #0]
   baab8:	4629      	mov	r1, r5
   baaba:	689b      	ldr	r3, [r3, #8]
   baabc:	4798      	blx	r3
            return &Wire1;
   baabe:	f001 f817 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   baac2:	6803      	ldr	r3, [r0, #0]
   baac4:	4621      	mov	r1, r4
   baac6:	689b      	ldr	r3, [r3, #8]
   baac8:	4798      	blx	r3
            return &Wire1;
   baaca:	f001 f811 	bl	bbaf0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   baace:	4631      	mov	r1, r6
   baad0:	f7fe fca6 	bl	b9420 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   baad4:	a801      	add	r0, sp, #4
   baad6:	f7ff ffa1 	bl	baa1c <_ZNSt10lock_guardI4PMICED1Ev>
}
   baada:	b006      	add	sp, #24
   baadc:	bd70      	pop	{r4, r5, r6, pc}

000baade <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   baade:	b513      	push	{r0, r1, r4, lr}
   baae0:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   baae2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   baae4:	f7ff ff7c 	bl	ba9e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   baae8:	2101      	movs	r1, #1
   baaea:	4620      	mov	r0, r4
   baaec:	f7ff ff9d 	bl	baa2a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   baaf0:	f000 0330 	and.w	r3, r0, #48	; 0x30
   baaf4:	2b10      	cmp	r3, #16
   baaf6:	d007      	beq.n	bab08 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   baaf8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   baafc:	f042 0210 	orr.w	r2, r2, #16
   bab00:	2101      	movs	r1, #1
   bab02:	4620      	mov	r0, r4
   bab04:	f7ff ffc1 	bl	baa8a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bab08:	a801      	add	r0, sp, #4
   bab0a:	f7ff ff87 	bl	baa1c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bab0e:	2001      	movs	r0, #1
   bab10:	b002      	add	sp, #8
   bab12:	bd10      	pop	{r4, pc}

000bab14 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bab14:	b513      	push	{r0, r1, r4, lr}
   bab16:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bab18:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bab1a:	f7ff ff61 	bl	ba9e0 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bab1e:	2101      	movs	r1, #1
   bab20:	4620      	mov	r0, r4
   bab22:	f7ff ff82 	bl	baa2a <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bab26:	f010 0f30 	tst.w	r0, #48	; 0x30
   bab2a:	d005      	beq.n	bab38 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bab2c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bab30:	2101      	movs	r1, #1
   bab32:	4620      	mov	r0, r4
   bab34:	f7ff ffa9 	bl	baa8a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bab38:	a801      	add	r0, sp, #4
   bab3a:	f7ff ff6f 	bl	baa1c <_ZNSt10lock_guardI4PMICED1Ev>
}
   bab3e:	2001      	movs	r0, #1
   bab40:	b002      	add	sp, #8
   bab42:	bd10      	pop	{r4, pc}

000bab44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bab46:	4606      	mov	r6, r0
   bab48:	460d      	mov	r5, r1
  size_t n = 0;
   bab4a:	188f      	adds	r7, r1, r2
   bab4c:	2400      	movs	r4, #0
  while (size--) {
   bab4e:	42bd      	cmp	r5, r7
   bab50:	d00c      	beq.n	bab6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bab52:	6833      	ldr	r3, [r6, #0]
   bab54:	f815 1b01 	ldrb.w	r1, [r5], #1
   bab58:	689b      	ldr	r3, [r3, #8]
   bab5a:	4630      	mov	r0, r6
   bab5c:	4798      	blx	r3
     if (chunk>=0)
   bab5e:	1e03      	subs	r3, r0, #0
   bab60:	db01      	blt.n	bab66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bab62:	441c      	add	r4, r3
  while (size--) {
   bab64:	e7f3      	b.n	bab4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bab66:	2c00      	cmp	r4, #0
   bab68:	bf08      	it	eq
   bab6a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bab6c:	4620      	mov	r0, r4
   bab6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bab70 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bab70:	b513      	push	{r0, r1, r4, lr}
   bab72:	4604      	mov	r4, r0
    }
   bab74:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bab76:	b159      	cbz	r1, bab90 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bab78:	9101      	str	r1, [sp, #4]
   bab7a:	f002 fec6 	bl	bd90a <strlen>
   bab7e:	6823      	ldr	r3, [r4, #0]
   bab80:	9901      	ldr	r1, [sp, #4]
   bab82:	68db      	ldr	r3, [r3, #12]
   bab84:	4602      	mov	r2, r0
   bab86:	4620      	mov	r0, r4
    }
   bab88:	b002      	add	sp, #8
   bab8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bab8e:	4718      	bx	r3
    }
   bab90:	b002      	add	sp, #8
   bab92:	bd10      	pop	{r4, pc}

000bab94 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bab94:	b508      	push	{r3, lr}
  return write(str);
   bab96:	f7ff ffeb 	bl	bab70 <_ZN5Print5writeEPKc>
}
   bab9a:	bd08      	pop	{r3, pc}

000bab9c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bab9c:	6803      	ldr	r3, [r0, #0]
   bab9e:	689b      	ldr	r3, [r3, #8]
   baba0:	4718      	bx	r3

000baba2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   baba2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   baba4:	210d      	movs	r1, #13
{
   baba6:	4605      	mov	r5, r0
  size_t n = print('\r');
   baba8:	f7ff fff8 	bl	bab9c <_ZN5Print5printEc>
  n += print('\n');
   babac:	210a      	movs	r1, #10
  size_t n = print('\r');
   babae:	4604      	mov	r4, r0
  n += print('\n');
   babb0:	4628      	mov	r0, r5
   babb2:	f7ff fff3 	bl	bab9c <_ZN5Print5printEc>
  return n;
}
   babb6:	4420      	add	r0, r4
   babb8:	bd38      	pop	{r3, r4, r5, pc}

000babba <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   babba:	b530      	push	{r4, r5, lr}
   babbc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   babbe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   babc0:	2a01      	cmp	r2, #1
  *str = '\0';
   babc2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   babc6:	bf98      	it	ls
   babc8:	220a      	movls	r2, #10
   babca:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   babcc:	460d      	mov	r5, r1
   babce:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   babd2:	fb01 5312 	mls	r3, r1, r2, r5
   babd6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   babda:	2b09      	cmp	r3, #9
   babdc:	bf94      	ite	ls
   babde:	3330      	addls	r3, #48	; 0x30
   babe0:	3337      	addhi	r3, #55	; 0x37
   babe2:	b2db      	uxtb	r3, r3
  } while(n);
   babe4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   babe6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   babea:	d9ef      	bls.n	babcc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   babec:	4621      	mov	r1, r4
   babee:	f7ff ffbf 	bl	bab70 <_ZN5Print5writeEPKc>
}
   babf2:	b00b      	add	sp, #44	; 0x2c
   babf4:	bd30      	pop	{r4, r5, pc}
	...

000babf8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   babf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   babfc:	ec55 4b10 	vmov	r4, r5, d0
   bac00:	4606      	mov	r6, r0
   bac02:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bac04:	ee10 2a10 	vmov	r2, s0
   bac08:	ee10 0a10 	vmov	r0, s0
   bac0c:	462b      	mov	r3, r5
   bac0e:	4629      	mov	r1, r5
   bac10:	f002 fcb6 	bl	bd580 <__aeabi_dcmpun>
   bac14:	b140      	cbz	r0, bac28 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bac16:	4953      	ldr	r1, [pc, #332]	; (bad64 <_ZN5Print10printFloatEdh+0x16c>)
   bac18:	4630      	mov	r0, r6
   bac1a:	f7ff ffa9 	bl	bab70 <_ZN5Print5writeEPKc>
   bac1e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bac20:	4650      	mov	r0, sl
   bac22:	b003      	add	sp, #12
   bac24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bac28:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bac2c:	4b4e      	ldr	r3, [pc, #312]	; (bad68 <_ZN5Print10printFloatEdh+0x170>)
   bac2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac32:	4620      	mov	r0, r4
   bac34:	4649      	mov	r1, r9
   bac36:	f002 fca3 	bl	bd580 <__aeabi_dcmpun>
   bac3a:	b948      	cbnz	r0, bac50 <_ZN5Print10printFloatEdh+0x58>
   bac3c:	4b4a      	ldr	r3, [pc, #296]	; (bad68 <_ZN5Print10printFloatEdh+0x170>)
   bac3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bac42:	4620      	mov	r0, r4
   bac44:	4649      	mov	r1, r9
   bac46:	f002 fc7d 	bl	bd544 <__aeabi_dcmple>
   bac4a:	b908      	cbnz	r0, bac50 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bac4c:	4947      	ldr	r1, [pc, #284]	; (bad6c <_ZN5Print10printFloatEdh+0x174>)
   bac4e:	e7e3      	b.n	bac18 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bac50:	4b47      	ldr	r3, [pc, #284]	; (bad70 <_ZN5Print10printFloatEdh+0x178>)
   bac52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bac56:	4620      	mov	r0, r4
   bac58:	4629      	mov	r1, r5
   bac5a:	f002 fc87 	bl	bd56c <__aeabi_dcmpgt>
   bac5e:	b108      	cbz	r0, bac64 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bac60:	4944      	ldr	r1, [pc, #272]	; (bad74 <_ZN5Print10printFloatEdh+0x17c>)
   bac62:	e7d9      	b.n	bac18 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bac64:	4b44      	ldr	r3, [pc, #272]	; (bad78 <_ZN5Print10printFloatEdh+0x180>)
   bac66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bac6a:	4620      	mov	r0, r4
   bac6c:	4629      	mov	r1, r5
   bac6e:	f002 fc5f 	bl	bd530 <__aeabi_dcmplt>
   bac72:	2800      	cmp	r0, #0
   bac74:	d1f4      	bne.n	bac60 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bac76:	2200      	movs	r2, #0
   bac78:	2300      	movs	r3, #0
   bac7a:	4620      	mov	r0, r4
   bac7c:	4629      	mov	r1, r5
   bac7e:	f002 fc57 	bl	bd530 <__aeabi_dcmplt>
   bac82:	b1d0      	cbz	r0, bacba <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bac84:	212d      	movs	r1, #45	; 0x2d
   bac86:	4630      	mov	r0, r6
   bac88:	f7ff ff88 	bl	bab9c <_ZN5Print5printEc>
     number = -number;
   bac8c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bac90:	4682      	mov	sl, r0
     number = -number;
   bac92:	461d      	mov	r5, r3
  double rounding = 0.5;
   bac94:	4939      	ldr	r1, [pc, #228]	; (bad7c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bac96:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bad84 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bac9a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bac9e:	2000      	movs	r0, #0
    rounding /= 10.0;
   baca0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   baca4:	fa5f f38b 	uxtb.w	r3, fp
   baca8:	429f      	cmp	r7, r3
   bacaa:	d908      	bls.n	bacbe <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bacac:	4642      	mov	r2, r8
   bacae:	464b      	mov	r3, r9
   bacb0:	f002 faf6 	bl	bd2a0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bacb4:	f10b 0b01 	add.w	fp, fp, #1
   bacb8:	e7f4      	b.n	baca4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bacba:	4682      	mov	sl, r0
   bacbc:	e7ea      	b.n	bac94 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bacbe:	4622      	mov	r2, r4
   bacc0:	462b      	mov	r3, r5
   bacc2:	f002 f80d 	bl	bcce0 <__adddf3>
   bacc6:	460d      	mov	r5, r1
   bacc8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bacca:	f002 fc97 	bl	bd5fc <__aeabi_d2uiz>
   bacce:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bacd0:	f002 f942 	bl	bcf58 <__aeabi_ui2d>
   bacd4:	4602      	mov	r2, r0
   bacd6:	460b      	mov	r3, r1
   bacd8:	4620      	mov	r0, r4
   bacda:	4629      	mov	r1, r5
   bacdc:	f001 fffe 	bl	bccdc <__aeabi_dsub>
        return printNumber(val, base) + t;
   bace0:	220a      	movs	r2, #10
   bace2:	4604      	mov	r4, r0
   bace4:	460d      	mov	r5, r1
   bace6:	4630      	mov	r0, r6
   bace8:	4641      	mov	r1, r8
   bacea:	f7ff ff66 	bl	babba <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bacee:	4482      	add	sl, r0
  if (digits > 0) {
   bacf0:	2f00      	cmp	r7, #0
   bacf2:	d095      	beq.n	bac20 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bacf4:	4922      	ldr	r1, [pc, #136]	; (bad80 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bacf6:	f8df 908c 	ldr.w	r9, [pc, #140]	; bad84 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bacfa:	4630      	mov	r0, r6
   bacfc:	f7ff ff38 	bl	bab70 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bad00:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bad04:	4482      	add	sl, r0
  while (digits-- > 0)
   bad06:	2f00      	cmp	r7, #0
   bad08:	d08a      	beq.n	bac20 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bad0a:	4642      	mov	r2, r8
   bad0c:	464b      	mov	r3, r9
   bad0e:	4620      	mov	r0, r4
   bad10:	4629      	mov	r1, r5
   bad12:	f002 f99b 	bl	bd04c <__aeabi_dmul>
   bad16:	4604      	mov	r4, r0
   bad18:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bad1a:	f002 fc47 	bl	bd5ac <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bad1e:	f1b0 0b00 	subs.w	fp, r0, #0
   bad22:	da1c      	bge.n	bad5e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bad24:	212d      	movs	r1, #45	; 0x2d
   bad26:	4630      	mov	r0, r6
   bad28:	f7ff ff38 	bl	bab9c <_ZN5Print5printEc>
            val = -n;
   bad2c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bad30:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bad32:	220a      	movs	r2, #10
   bad34:	4630      	mov	r0, r6
   bad36:	9301      	str	r3, [sp, #4]
   bad38:	f7ff ff3f 	bl	babba <_ZN5Print11printNumberEmh>
   bad3c:	9b01      	ldr	r3, [sp, #4]
   bad3e:	4418      	add	r0, r3
    n += print(toPrint);
   bad40:	4482      	add	sl, r0
    remainder -= toPrint;
   bad42:	4658      	mov	r0, fp
   bad44:	f002 f918 	bl	bcf78 <__aeabi_i2d>
   bad48:	4602      	mov	r2, r0
   bad4a:	460b      	mov	r3, r1
   bad4c:	4620      	mov	r0, r4
   bad4e:	4629      	mov	r1, r5
   bad50:	f001 ffc4 	bl	bccdc <__aeabi_dsub>
   bad54:	3f01      	subs	r7, #1
   bad56:	4604      	mov	r4, r0
   bad58:	460d      	mov	r5, r1
   bad5a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bad5c:	e7d3      	b.n	bad06 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bad5e:	4659      	mov	r1, fp
        size_t t = 0;
   bad60:	2300      	movs	r3, #0
   bad62:	e7e6      	b.n	bad32 <_ZN5Print10printFloatEdh+0x13a>
   bad64:	000bee4c 	.word	0x000bee4c
   bad68:	7fefffff 	.word	0x7fefffff
   bad6c:	000bee50 	.word	0x000bee50
   bad70:	41efffff 	.word	0x41efffff
   bad74:	000bee54 	.word	0x000bee54
   bad78:	c1efffff 	.word	0xc1efffff
   bad7c:	3fe00000 	.word	0x3fe00000
   bad80:	000bee8c 	.word	0x000bee8c
   bad84:	40240000 	.word	0x40240000

000bad88 <_ZN5Print5printEfi>:
{
   bad88:	b538      	push	{r3, r4, r5, lr}
   bad8a:	4604      	mov	r4, r0
   bad8c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bad90:	b2cd      	uxtb	r5, r1
   bad92:	f002 f903 	bl	bcf9c <__aeabi_f2d>
   bad96:	ec41 0b10 	vmov	d0, r0, r1
   bad9a:	4629      	mov	r1, r5
   bad9c:	4620      	mov	r0, r4
}
   bad9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bada2:	f7ff bf29 	b.w	babf8 <_ZN5Print10printFloatEdh>

000bada6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bada6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   badaa:	b086      	sub	sp, #24
   badac:	af00      	add	r7, sp, #0
   badae:	4605      	mov	r5, r0
   badb0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   badb2:	1d38      	adds	r0, r7, #4
   badb4:	2114      	movs	r1, #20
{
   badb6:	4614      	mov	r4, r2
    va_copy(args2, args);
   badb8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   badba:	f7fe f86f 	bl	b8e9c <vsnprintf>

    if (n<bufsize)
   badbe:	2813      	cmp	r0, #19
   badc0:	d80e      	bhi.n	bade0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   badc2:	1d39      	adds	r1, r7, #4
   badc4:	4628      	mov	r0, r5
   badc6:	f7ff fed3 	bl	bab70 <_ZN5Print5writeEPKc>
   badca:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   badcc:	b11e      	cbz	r6, badd6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   badce:	4628      	mov	r0, r5
   badd0:	f7ff fee7 	bl	baba2 <_ZN5Print7printlnEv>
   badd4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   badd6:	4620      	mov	r0, r4
   badd8:	3718      	adds	r7, #24
   badda:	46bd      	mov	sp, r7
   baddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bade0:	f100 0308 	add.w	r3, r0, #8
   bade4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bade8:	46e8      	mov	r8, sp
        char bigger[n+1];
   badea:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   badee:	4622      	mov	r2, r4
   badf0:	1c41      	adds	r1, r0, #1
   badf2:	683b      	ldr	r3, [r7, #0]
   badf4:	4668      	mov	r0, sp
   badf6:	f7fe f851 	bl	b8e9c <vsnprintf>
  return write(str);
   badfa:	4669      	mov	r1, sp
   badfc:	4628      	mov	r0, r5
   badfe:	f7ff feb7 	bl	bab70 <_ZN5Print5writeEPKc>
   bae02:	4604      	mov	r4, r0
   bae04:	46c5      	mov	sp, r8
   bae06:	e7e1      	b.n	badcc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bae08 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bae08:	b510      	push	{r4, lr}
  if (0 == max) {
   bae0a:	4604      	mov	r4, r0
   bae0c:	b128      	cbz	r0, bae1a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bae0e:	f002 fd15 	bl	bd83c <rand>
   bae12:	fb90 f3f4 	sdiv	r3, r0, r4
   bae16:	fb03 0414 	mls	r4, r3, r4, r0
}
   bae1a:	4620      	mov	r0, r4
   bae1c:	bd10      	pop	{r4, pc}

000bae1e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bae1e:	4288      	cmp	r0, r1
{
   bae20:	b510      	push	{r4, lr}
   bae22:	4604      	mov	r4, r0
  if (min >= max) {
   bae24:	da03      	bge.n	bae2e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bae26:	1a08      	subs	r0, r1, r0
   bae28:	f7ff ffee 	bl	bae08 <_Z6randomi>
   bae2c:	4404      	add	r4, r0
}
   bae2e:	4620      	mov	r0, r4
   bae30:	bd10      	pop	{r4, pc}

000bae32 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bae32:	f002 bcd5 	b.w	bd7e0 <srand>
	...

000bae38 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bae38:	4b01      	ldr	r3, [pc, #4]	; (bae40 <_GLOBAL__sub_I_RGB+0x8>)
   bae3a:	2200      	movs	r2, #0
   bae3c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bae3e:	4770      	bx	lr
   bae40:	2003e688 	.word	0x2003e688

000bae44 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bae44:	2100      	movs	r1, #0
   bae46:	f7fd be1b 	b.w	b8a80 <hal_spi_release>

000bae4a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bae4a:	2100      	movs	r1, #0
   bae4c:	f7fd be10 	b.w	b8a70 <hal_spi_acquire>

000bae50 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bae50:	b510      	push	{r4, lr}
   bae52:	4604      	mov	r4, r0
   bae54:	4608      	mov	r0, r1
{
    _spi = spi;
   bae56:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bae58:	f7fd fdea 	bl	b8a30 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bae5c:	2300      	movs	r3, #0
   bae5e:	6063      	str	r3, [r4, #4]
}
   bae60:	4620      	mov	r0, r4
   bae62:	bd10      	pop	{r4, pc}

000bae64 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bae64:	b513      	push	{r0, r1, r4, lr}
   bae66:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bae68:	7800      	ldrb	r0, [r0, #0]
   bae6a:	f7ff ffee 	bl	bae4a <_ZN8SPIClass4lockEv.isra.0>
   bae6e:	b958      	cbnz	r0, bae88 <_ZN8SPIClass5beginEv+0x24>
   bae70:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bae72:	9001      	str	r0, [sp, #4]
   bae74:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bae78:	f7fd fdc2 	bl	b8a00 <hal_spi_begin>
        unlock();
   bae7c:	9801      	ldr	r0, [sp, #4]
    }
}
   bae7e:	b002      	add	sp, #8
   bae80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bae84:	f7ff bfde 	b.w	bae44 <_ZN8SPIClass6unlockEv.isra.0>
   bae88:	b002      	add	sp, #8
   bae8a:	bd10      	pop	{r4, pc}

000bae8c <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bae8c:	b513      	push	{r0, r1, r4, lr}
   bae8e:	4604      	mov	r4, r0
    if (!lock())
   bae90:	7800      	ldrb	r0, [r0, #0]
   bae92:	f7ff ffda 	bl	bae4a <_ZN8SPIClass4lockEv.isra.0>
   bae96:	b948      	cbnz	r0, baeac <_ZN8SPIClass3endEv+0x20>
   bae98:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bae9a:	9001      	str	r0, [sp, #4]
   bae9c:	f7fd fdb8 	bl	b8a10 <hal_spi_end>
        unlock();
   baea0:	9801      	ldr	r0, [sp, #4]
    }
}
   baea2:	b002      	add	sp, #8
   baea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baea8:	f7ff bfcc 	b.w	bae44 <_ZN8SPIClass6unlockEv.isra.0>
   baeac:	b002      	add	sp, #8
   baeae:	bd10      	pop	{r4, pc}

000baeb0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   baeb0:	7800      	ldrb	r0, [r0, #0]
   baeb2:	f7ff bfc7 	b.w	bae44 <_ZN8SPIClass6unlockEv.isra.0>
	...

000baeb8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   baeb8:	0840      	lsrs	r0, r0, #1
{
   baeba:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   baebc:	6018      	str	r0, [r3, #0]
   baebe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   baec0:	6818      	ldr	r0, [r3, #0]
   baec2:	4288      	cmp	r0, r1
   baec4:	b2e5      	uxtb	r5, r4
   baec6:	d906      	bls.n	baed6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   baec8:	3401      	adds	r4, #1
   baeca:	2c08      	cmp	r4, #8
   baecc:	d002      	beq.n	baed4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   baece:	0840      	lsrs	r0, r0, #1
   baed0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   baed2:	e7f5      	b.n	baec0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   baed4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   baed6:	4b02      	ldr	r3, [pc, #8]	; (baee0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   baed8:	5d5b      	ldrb	r3, [r3, r5]
   baeda:	7013      	strb	r3, [r2, #0]
}
   baedc:	bd30      	pop	{r4, r5, pc}
   baede:	bf00      	nop
   baee0:	000bee58 	.word	0x000bee58

000baee4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   baee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baee8:	4606      	mov	r6, r0
   baeea:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   baeec:	7800      	ldrb	r0, [r0, #0]
{
   baeee:	460c      	mov	r4, r1
    CHECK(lock());
   baef0:	f7ff ffab 	bl	bae4a <_ZN8SPIClass4lockEv.isra.0>
   baef4:	2800      	cmp	r0, #0
   baef6:	db1b      	blt.n	baf30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   baef8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   baefa:	2214      	movs	r2, #20
   baefc:	2100      	movs	r1, #0
   baefe:	a809      	add	r0, sp, #36	; 0x24
   baf00:	f002 fc66 	bl	bd7d0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   baf04:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   baf06:	2200      	movs	r2, #0
   baf08:	a909      	add	r1, sp, #36	; 0x24
   baf0a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   baf0c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   baf10:	f7fd fd9e 	bl	b8a50 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   baf14:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   baf18:	b113      	cbz	r3, baf20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   baf1a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   baf1e:	b155      	cbz	r5, baf36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   baf20:	2700      	movs	r7, #0
   baf22:	46b9      	mov	r9, r7
   baf24:	46b8      	mov	r8, r7
   baf26:	2501      	movs	r5, #1
    if (default_ && other.default_)
   baf28:	7923      	ldrb	r3, [r4, #4]
   baf2a:	b15d      	cbz	r5, baf44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   baf2c:	b1c3      	cbz	r3, baf60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   baf2e:	2000      	movs	r0, #0
}
   baf30:	b00f      	add	sp, #60	; 0x3c
   baf32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   baf36:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   baf3a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   baf3e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   baf42:	e7f1      	b.n	baf28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   baf44:	2b00      	cmp	r3, #0
   baf46:	d135      	bne.n	bafb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   baf48:	68a3      	ldr	r3, [r4, #8]
   baf4a:	4543      	cmp	r3, r8
   baf4c:	d108      	bne.n	baf60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   baf4e:	f88d 9020 	strb.w	r9, [sp, #32]
   baf52:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   baf56:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   baf5a:	89a3      	ldrh	r3, [r4, #12]
   baf5c:	429a      	cmp	r2, r3
   baf5e:	d0e6      	beq.n	baf2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   baf60:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   baf62:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   baf64:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   baf68:	980a      	ldr	r0, [sp, #40]	; 0x28
   baf6a:	ab04      	add	r3, sp, #16
   baf6c:	f10d 020f 	add.w	r2, sp, #15
   baf70:	f7ff ffa2 	bl	baeb8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   baf74:	7921      	ldrb	r1, [r4, #4]
   baf76:	b985      	cbnz	r5, baf9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   baf78:	b989      	cbnz	r1, baf9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   baf7a:	68a3      	ldr	r3, [r4, #8]
   baf7c:	4543      	cmp	r3, r8
   baf7e:	d30e      	bcc.n	baf9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   baf80:	f88d 9020 	strb.w	r9, [sp, #32]
   baf84:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   baf88:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   baf8c:	89a3      	ldrh	r3, [r4, #12]
   baf8e:	429a      	cmp	r2, r3
   baf90:	d105      	bne.n	baf9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   baf92:	9b04      	ldr	r3, [sp, #16]
   baf94:	4543      	cmp	r3, r8
   baf96:	d102      	bne.n	baf9e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   baf98:	e7c9      	b.n	baf2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   baf9a:	2900      	cmp	r1, #0
   baf9c:	d1f9      	bne.n	baf92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   baf9e:	2300      	movs	r3, #0
   bafa0:	9301      	str	r3, [sp, #4]
   bafa2:	7b63      	ldrb	r3, [r4, #13]
   bafa4:	9300      	str	r3, [sp, #0]
   bafa6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bafaa:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bafac:	7830      	ldrb	r0, [r6, #0]
   bafae:	f7fd fd57 	bl	b8a60 <hal_spi_set_settings>
   bafb2:	e7bc      	b.n	baf2e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bafb4:	e9cd 5500 	strd	r5, r5, [sp]
   bafb8:	462b      	mov	r3, r5
   bafba:	462a      	mov	r2, r5
   bafbc:	2101      	movs	r1, #1
   bafbe:	e7f5      	b.n	bafac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bafc0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bafc0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bafc2:	7800      	ldrb	r0, [r0, #0]
   bafc4:	f7fd fd2c 	bl	b8a20 <hal_spi_transfer>
}
   bafc8:	b2c0      	uxtb	r0, r0
   bafca:	bd08      	pop	{r3, pc}

000bafcc <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bafcc:	4770      	bx	lr

000bafce <_ZN8SPIClass15detachInterruptEv>:
   bafce:	4770      	bx	lr

000bafd0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bafd0:	b510      	push	{r4, lr}
   bafd2:	4604      	mov	r4, r0
{
	free(buffer);
   bafd4:	6800      	ldr	r0, [r0, #0]
   bafd6:	f7fd ff41 	bl	b8e5c <free>
}
   bafda:	4620      	mov	r0, r4
   bafdc:	bd10      	pop	{r4, pc}

000bafde <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bafde:	b510      	push	{r4, lr}
   bafe0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bafe2:	6800      	ldr	r0, [r0, #0]
   bafe4:	b108      	cbz	r0, bafea <_ZN6String10invalidateEv+0xc>
   bafe6:	f7fd ff39 	bl	b8e5c <free>
	buffer = NULL;
   bafea:	2300      	movs	r3, #0
	capacity = len = 0;
   bafec:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   baff0:	6023      	str	r3, [r4, #0]
}
   baff2:	bd10      	pop	{r4, pc}

000baff4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   baff4:	b538      	push	{r3, r4, r5, lr}
   baff6:	4604      	mov	r4, r0
   baff8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   baffa:	6800      	ldr	r0, [r0, #0]
   baffc:	3101      	adds	r1, #1
   baffe:	f7fd ff35 	bl	b8e6c <realloc>
	if (newbuffer) {
   bb002:	b110      	cbz	r0, bb00a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bb004:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bb008:	2001      	movs	r0, #1
	}
	return 0;
}
   bb00a:	bd38      	pop	{r3, r4, r5, pc}

000bb00c <_ZN6String7reserveEj>:
{
   bb00c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bb00e:	6803      	ldr	r3, [r0, #0]
{
   bb010:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bb012:	b123      	cbz	r3, bb01e <_ZN6String7reserveEj+0x12>
   bb014:	6843      	ldr	r3, [r0, #4]
   bb016:	428b      	cmp	r3, r1
   bb018:	d301      	bcc.n	bb01e <_ZN6String7reserveEj+0x12>
   bb01a:	2001      	movs	r0, #1
}
   bb01c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bb01e:	4620      	mov	r0, r4
   bb020:	f7ff ffe8 	bl	baff4 <_ZN6String12changeBufferEj>
   bb024:	2800      	cmp	r0, #0
   bb026:	d0f9      	beq.n	bb01c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bb028:	68a3      	ldr	r3, [r4, #8]
   bb02a:	2b00      	cmp	r3, #0
   bb02c:	d1f5      	bne.n	bb01a <_ZN6String7reserveEj+0xe>
   bb02e:	6822      	ldr	r2, [r4, #0]
   bb030:	7013      	strb	r3, [r2, #0]
   bb032:	e7f2      	b.n	bb01a <_ZN6String7reserveEj+0xe>

000bb034 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bb034:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb036:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bb038:	4611      	mov	r1, r2
   bb03a:	9201      	str	r2, [sp, #4]
{
   bb03c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bb03e:	f7ff ffe5 	bl	bb00c <_ZN6String7reserveEj>
   bb042:	9a01      	ldr	r2, [sp, #4]
   bb044:	b928      	cbnz	r0, bb052 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bb046:	4620      	mov	r0, r4
   bb048:	f7ff ffc9 	bl	bafde <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bb04c:	4620      	mov	r0, r4
   bb04e:	b003      	add	sp, #12
   bb050:	bd30      	pop	{r4, r5, pc}
	len = length;
   bb052:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bb054:	4629      	mov	r1, r5
   bb056:	6820      	ldr	r0, [r4, #0]
   bb058:	f002 fb92 	bl	bd780 <memcpy>
	buffer[len] = 0;
   bb05c:	6822      	ldr	r2, [r4, #0]
   bb05e:	68a3      	ldr	r3, [r4, #8]
   bb060:	2100      	movs	r1, #0
   bb062:	54d1      	strb	r1, [r2, r3]
	return *this;
   bb064:	e7f2      	b.n	bb04c <_ZN6String4copyEPKcj+0x18>

000bb066 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bb066:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bb068:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bb06a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bb06e:	4604      	mov	r4, r0
	len = 0;
   bb070:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb072:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bb074:	b141      	cbz	r1, bb088 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bb076:	4608      	mov	r0, r1
   bb078:	9101      	str	r1, [sp, #4]
   bb07a:	f002 fc46 	bl	bd90a <strlen>
   bb07e:	9901      	ldr	r1, [sp, #4]
   bb080:	4602      	mov	r2, r0
   bb082:	4620      	mov	r0, r4
   bb084:	f7ff ffd6 	bl	bb034 <_ZN6String4copyEPKcj>
}
   bb088:	4620      	mov	r0, r4
   bb08a:	b002      	add	sp, #8
   bb08c:	bd10      	pop	{r4, pc}

000bb08e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bb08e:	b538      	push	{r3, r4, r5, lr}
   bb090:	4605      	mov	r5, r0
	if (buffer) {
   bb092:	6800      	ldr	r0, [r0, #0]
{
   bb094:	460c      	mov	r4, r1
	if (buffer) {
   bb096:	b168      	cbz	r0, bb0b4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bb098:	686a      	ldr	r2, [r5, #4]
   bb09a:	688b      	ldr	r3, [r1, #8]
   bb09c:	429a      	cmp	r2, r3
   bb09e:	d307      	bcc.n	bb0b0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bb0a0:	6809      	ldr	r1, [r1, #0]
   bb0a2:	f002 fc2a 	bl	bd8fa <strcpy>
			len = rhs.len;
   bb0a6:	68a3      	ldr	r3, [r4, #8]
   bb0a8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bb0aa:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bb0ac:	60a3      	str	r3, [r4, #8]
}
   bb0ae:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bb0b0:	f7fd fed4 	bl	b8e5c <free>
	buffer = rhs.buffer;
   bb0b4:	6823      	ldr	r3, [r4, #0]
   bb0b6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bb0b8:	6863      	ldr	r3, [r4, #4]
   bb0ba:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bb0bc:	68a3      	ldr	r3, [r4, #8]
   bb0be:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bb0c0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bb0c2:	e9c4 3300 	strd	r3, r3, [r4]
   bb0c6:	e7f1      	b.n	bb0ac <_ZN6String4moveERS_+0x1e>

000bb0c8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bb0c8:	b510      	push	{r4, lr}
	buffer = NULL;
   bb0ca:	2300      	movs	r3, #0
	capacity = 0;
   bb0cc:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bb0d0:	4604      	mov	r4, r0
	len = 0;
   bb0d2:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb0d4:	7303      	strb	r3, [r0, #12]
	move(rval);
   bb0d6:	f7ff ffda 	bl	bb08e <_ZN6String4moveERS_>
}
   bb0da:	4620      	mov	r0, r4
   bb0dc:	bd10      	pop	{r4, pc}

000bb0de <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bb0de:	4288      	cmp	r0, r1
{
   bb0e0:	b510      	push	{r4, lr}
   bb0e2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bb0e4:	d005      	beq.n	bb0f2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bb0e6:	680b      	ldr	r3, [r1, #0]
   bb0e8:	b12b      	cbz	r3, bb0f6 <_ZN6StringaSERKS_+0x18>
   bb0ea:	688a      	ldr	r2, [r1, #8]
   bb0ec:	4619      	mov	r1, r3
   bb0ee:	f7ff ffa1 	bl	bb034 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb0f2:	4620      	mov	r0, r4
   bb0f4:	bd10      	pop	{r4, pc}
	else invalidate();
   bb0f6:	f7ff ff72 	bl	bafde <_ZN6String10invalidateEv>
   bb0fa:	e7fa      	b.n	bb0f2 <_ZN6StringaSERKS_+0x14>

000bb0fc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bb0fc:	b510      	push	{r4, lr}
	buffer = NULL;
   bb0fe:	2300      	movs	r3, #0
String::String(const String &value)
   bb100:	4604      	mov	r4, r0
	capacity = 0;
   bb102:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bb106:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb108:	7303      	strb	r3, [r0, #12]
	*this = value;
   bb10a:	f7ff ffe8 	bl	bb0de <_ZN6StringaSERKS_>
}
   bb10e:	4620      	mov	r0, r4
   bb110:	bd10      	pop	{r4, pc}

000bb112 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bb112:	b558      	push	{r3, r4, r6, lr}
   bb114:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bb116:	b12a      	cbz	r2, bb124 <_ZNK6String8getBytesEPhjj+0x12>
   bb118:	b121      	cbz	r1, bb124 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bb11a:	6884      	ldr	r4, [r0, #8]
   bb11c:	42a3      	cmp	r3, r4
   bb11e:	d302      	bcc.n	bb126 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bb120:	2300      	movs	r3, #0
   bb122:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bb124:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bb126:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bb128:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bb12a:	6801      	ldr	r1, [r0, #0]
   bb12c:	4294      	cmp	r4, r2
   bb12e:	bf28      	it	cs
   bb130:	4614      	movcs	r4, r2
   bb132:	4419      	add	r1, r3
   bb134:	4622      	mov	r2, r4
   bb136:	4630      	mov	r0, r6
   bb138:	f002 fc03 	bl	bd942 <strncpy>
	buf[n] = 0;
   bb13c:	2300      	movs	r3, #0
   bb13e:	5533      	strb	r3, [r6, r4]
   bb140:	e7f0      	b.n	bb124 <_ZNK6String8getBytesEPhjj+0x12>
	...

000bb144 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bb144:	b40e      	push	{r1, r2, r3}
   bb146:	b570      	push	{r4, r5, r6, lr}
   bb148:	b087      	sub	sp, #28
   bb14a:	ad0b      	add	r5, sp, #44	; 0x2c
   bb14c:	4604      	mov	r4, r0
   bb14e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb152:	9201      	str	r2, [sp, #4]
   bb154:	462b      	mov	r3, r5
   bb156:	2105      	movs	r1, #5
   bb158:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bb15a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb15c:	f7fd fe9e 	bl	b8e9c <vsnprintf>
    va_end(marker);

    String result;
   bb160:	490b      	ldr	r1, [pc, #44]	; (bb190 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb162:	4606      	mov	r6, r0
    String result;
   bb164:	4620      	mov	r0, r4
   bb166:	f7ff ff7e 	bl	bb066 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bb16a:	4631      	mov	r1, r6
   bb16c:	4620      	mov	r0, r4
   bb16e:	f7ff ff4d 	bl	bb00c <_ZN6String7reserveEj>
    if (result.buffer) {
   bb172:	6820      	ldr	r0, [r4, #0]
   bb174:	b130      	cbz	r0, bb184 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb176:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bb178:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb17a:	462b      	mov	r3, r5
   bb17c:	1c71      	adds	r1, r6, #1
   bb17e:	f7fd fe8d 	bl	b8e9c <vsnprintf>
        va_end(marker);
        result.len = n;
   bb182:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bb184:	4620      	mov	r0, r4
   bb186:	b007      	add	sp, #28
   bb188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb18c:	b003      	add	sp, #12
   bb18e:	4770      	bx	lr
   bb190:	000bed81 	.word	0x000bed81

000bb194 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bb194:	b510      	push	{r4, lr}
   bb196:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bb198:	6800      	ldr	r0, [r0, #0]
   bb19a:	b118      	cbz	r0, bb1a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bb19c:	f7fd fe5e 	bl	b8e5c <free>
            wakeupSource_ = nullptr;
   bb1a0:	2300      	movs	r3, #0
   bb1a2:	6023      	str	r3, [r4, #0]
        }
    }
   bb1a4:	bd10      	pop	{r4, pc}

000bb1a6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bb1a6:	b538      	push	{r3, r4, r5, lr}
   bb1a8:	460c      	mov	r4, r1
   bb1aa:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb1ac:	f7ff fff2 	bl	bb194 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bb1b0:	b154      	cbz	r4, bb1c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bb1b2:	8820      	ldrh	r0, [r4, #0]
   bb1b4:	f7fd fe4a 	bl	b8e4c <malloc>
   bb1b8:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bb1ba:	b128      	cbz	r0, bb1c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bb1bc:	8822      	ldrh	r2, [r4, #0]
   bb1be:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bb1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bb1c4:	f002 badc 	b.w	bd780 <memcpy>
    }
   bb1c8:	bd38      	pop	{r3, r4, r5, pc}

000bb1ca <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb1ca:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bb1cc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bb1d0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bb1d2:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bb1d6:	f8c0 3006 	str.w	r3, [r0, #6]
   bb1da:	894b      	ldrh	r3, [r1, #10]
   bb1dc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb1de:	460c      	mov	r4, r1
   bb1e0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb1e2:	f7ff ffd7 	bl	bb194 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bb1e6:	6823      	ldr	r3, [r4, #0]
   bb1e8:	b113      	cbz	r3, bb1f0 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bb1ea:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bb1ec:	2300      	movs	r3, #0
   bb1ee:	6023      	str	r3, [r4, #0]
    }
   bb1f0:	bd38      	pop	{r3, r4, r5, pc}

000bb1f2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bb1f2:	b507      	push	{r0, r1, r2, lr}
   bb1f4:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb1f6:	2100      	movs	r1, #0
{
   bb1f8:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bb1fa:	9100      	str	r1, [sp, #0]
   bb1fc:	2001      	movs	r0, #1
   bb1fe:	218c      	movs	r1, #140	; 0x8c
   bb200:	f7fd fd82 	bl	b8d08 <system_reset>
}
   bb204:	b003      	add	sp, #12
   bb206:	f85d fb04 	ldr.w	pc, [sp], #4

000bb20a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bb20a:	4601      	mov	r1, r0
    reset(0, flags);
   bb20c:	2000      	movs	r0, #0
   bb20e:	f7ff bff0 	b.w	bb1f2 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bb212 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bb212:	2000      	movs	r0, #0
   bb214:	f7ff bff9 	b.w	bb20a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bb218 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bb218:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb21a:	4d2b      	ldr	r5, [pc, #172]	; (bb2c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bb21c:	7d0b      	ldrb	r3, [r1, #20]
   bb21e:	4604      	mov	r4, r0
   bb220:	b08b      	sub	sp, #44	; 0x2c
   bb222:	4608      	mov	r0, r1
   bb224:	1daf      	adds	r7, r5, #6
   bb226:	2b00      	cmp	r3, #0
   bb228:	d036      	beq.n	bb298 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bb22a:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bb22c:	791b      	ldrb	r3, [r3, #4]
   bb22e:	2b00      	cmp	r3, #0
   bb230:	d032      	beq.n	bb298 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bb232:	4b26      	ldr	r3, [pc, #152]	; (bb2cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bb234:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bb236:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bb238:	a902      	add	r1, sp, #8
   bb23a:	3004      	adds	r0, #4
   bb23c:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bb240:	f7fd fd58 	bl	b8cf4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bb244:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bb248:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bb24c:	b200      	sxth	r0, r0
   bb24e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bb252:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bb256:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bb258:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bb25a:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb25c:	4628      	mov	r0, r5
   bb25e:	f7ff ffa2 	bl	bb1a6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bb262:	a802      	add	r0, sp, #8
   bb264:	f7ff ff96 	bl	bb194 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bb268:	2300      	movs	r3, #0
   bb26a:	6023      	str	r3, [r4, #0]
   bb26c:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bb26e:	71a3      	strb	r3, [r4, #6]
   bb270:	8123      	strh	r3, [r4, #8]
   bb272:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bb276:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bb278:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bb27c:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bb27e:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bb282:	f8c4 3006 	str.w	r3, [r4, #6]
   bb286:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb288:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bb28a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bb28c:	4620      	mov	r0, r4
   bb28e:	f7ff ff8a 	bl	bb1a6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bb292:	4620      	mov	r0, r4
   bb294:	b00b      	add	sp, #44	; 0x2c
   bb296:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bb298:	2600      	movs	r6, #0
   bb29a:	2320      	movs	r3, #32
   bb29c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bb2a0:	4b0b      	ldr	r3, [pc, #44]	; (bb2d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bb2a2:	9300      	str	r3, [sp, #0]
   bb2a4:	aa02      	add	r2, sp, #8
   bb2a6:	4633      	mov	r3, r6
   bb2a8:	490a      	ldr	r1, [pc, #40]	; (bb2d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bb2aa:	2032      	movs	r0, #50	; 0x32
   bb2ac:	f7fd fc90 	bl	b8bd0 <log_message>
            : wakeupSource_(nullptr),
   bb2b0:	4b06      	ldr	r3, [pc, #24]	; (bb2cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bb2b2:	4805      	ldr	r0, [pc, #20]	; (bb2c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bb2b4:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bb2b6:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bb2ba:	a902      	add	r1, sp, #8
   bb2bc:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bb2c0:	f7ff ff83 	bl	bb1ca <_ZN17SystemSleepResultaSEOS_.isra.0>
   bb2c4:	e7cd      	b.n	bb262 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bb2c6:	bf00      	nop
   bb2c8:	2003e698 	.word	0x2003e698
   bb2cc:	ffff0000 	.word	0xffff0000
   bb2d0:	000bee67 	.word	0x000bee67
   bb2d4:	000bee60 	.word	0x000bee60

000bb2d8 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bb2d8:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bb2da:	2420      	movs	r4, #32
{
   bb2dc:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bb2de:	4622      	mov	r2, r4
   bb2e0:	2100      	movs	r1, #0
   bb2e2:	4668      	mov	r0, sp
   bb2e4:	f002 fa74 	bl	bd7d0 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bb2e8:	2100      	movs	r1, #0
   bb2ea:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bb2ec:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bb2f0:	f7fd fa76 	bl	b87e0 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bb2f4:	9801      	ldr	r0, [sp, #4]
   bb2f6:	b008      	add	sp, #32
   bb2f8:	bd10      	pop	{r4, pc}
	...

000bb2fc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb2fc:	4b05      	ldr	r3, [pc, #20]	; (bb314 <_GLOBAL__sub_I_System+0x18>)
   bb2fe:	2202      	movs	r2, #2
   bb300:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bb302:	4b05      	ldr	r3, [pc, #20]	; (bb318 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb304:	4a05      	ldr	r2, [pc, #20]	; (bb31c <_GLOBAL__sub_I_System+0x20>)
   bb306:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb308:	2000      	movs	r0, #0
   bb30a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb30e:	f7fd bc9b 	b.w	b8c48 <set_system_mode>
   bb312:	bf00      	nop
   bb314:	2003e6a4 	.word	0x2003e6a4
   bb318:	2003e698 	.word	0x2003e698
   bb31c:	ffff0000 	.word	0xffff0000

000bb320 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bb320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bb324:	4a15      	ldr	r2, [pc, #84]	; (bb37c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bb326:	f8df 8060 	ldr.w	r8, [pc, #96]	; bb388 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bb32a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bb32e:	1980      	adds	r0, r0, r6
   bb330:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bb334:	4b12      	ldr	r3, [pc, #72]	; (bb380 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bb336:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bb33a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bb33e:	1986      	adds	r6, r0, r6
   bb340:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bb344:	42bb      	cmp	r3, r7
   bb346:	bf08      	it	eq
   bb348:	42b2      	cmpeq	r2, r6
{
   bb34a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bb34c:	d013      	beq.n	bb376 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bb34e:	a903      	add	r1, sp, #12
   bb350:	4668      	mov	r0, sp
   bb352:	e9cd 6700 	strd	r6, r7, [sp]
   bb356:	f7fd fdd1 	bl	b8efc <localtime_r>
	calendar_time.tm_year += 1900;
   bb35a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb35c:	4d09      	ldr	r5, [pc, #36]	; (bb384 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bb35e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb362:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bb364:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb36a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb36c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bb36e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb372:	6823      	ldr	r3, [r4, #0]
   bb374:	602b      	str	r3, [r5, #0]
    }
}
   bb376:	b00c      	add	sp, #48	; 0x30
   bb378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb37c:	2003e6e0 	.word	0x2003e6e0
   bb380:	2003e6d8 	.word	0x2003e6d8
   bb384:	2003e6b0 	.word	0x2003e6b0
   bb388:	2003e6e8 	.word	0x2003e6e8

000bb38c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bb38c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb38e:	2000      	movs	r0, #0
   bb390:	f7fd fce4 	bl	b8d5c <spark_sync_time_pending>
   bb394:	b128      	cbz	r0, bb3a2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb396:	f7fd fcd1 	bl	b8d3c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb39a:	f080 0001 	eor.w	r0, r0, #1
   bb39e:	b2c0      	uxtb	r0, r0
    }
   bb3a0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb3a2:	2001      	movs	r0, #1
   bb3a4:	e7fc      	b.n	bb3a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000bb3a6 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bb3a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb3a8:	4602      	mov	r2, r0
   bb3aa:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb3ac:	4668      	mov	r0, sp
    struct timeval tv = {
   bb3ae:	2100      	movs	r1, #0
    };
   bb3b0:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bb3b4:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb3b8:	f7fd fa52 	bl	b8860 <hal_rtc_set_time>
   bb3bc:	4602      	mov	r2, r0
   bb3be:	b910      	cbnz	r0, bb3c6 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bb3c0:	4601      	mov	r1, r0
   bb3c2:	f7fd fc69 	bl	b8c98 <system_notify_time_changed>
    }
}
   bb3c6:	b005      	add	sp, #20
   bb3c8:	f85d fb04 	ldr.w	pc, [sp], #4

000bb3cc <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bb3cc:	b530      	push	{r4, r5, lr}
   bb3ce:	b093      	sub	sp, #76	; 0x4c
   bb3d0:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bb3d4:	4b19      	ldr	r3, [pc, #100]	; (bb43c <_ZN9TimeClass7timeStrEx+0x70>)
{
   bb3d6:	4604      	mov	r4, r0
    t += time_zone_cache;
   bb3d8:	e9d3 1000 	ldrd	r1, r0, [r3]
   bb3dc:	9b01      	ldr	r3, [sp, #4]
   bb3de:	1852      	adds	r2, r2, r1
   bb3e0:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bb3e4:	4816      	ldr	r0, [pc, #88]	; (bb440 <_ZN9TimeClass7timeStrEx+0x74>)
   bb3e6:	e9d0 1000 	ldrd	r1, r0, [r0]
   bb3ea:	1852      	adds	r2, r2, r1
   bb3ec:	eb43 0300 	adc.w	r3, r3, r0
   bb3f0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bb3f4:	2224      	movs	r2, #36	; 0x24
   bb3f6:	eb0d 0002 	add.w	r0, sp, r2
   bb3fa:	2100      	movs	r1, #0
   bb3fc:	f002 f9e8 	bl	bd7d0 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bb400:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bb402:	a909      	add	r1, sp, #36	; 0x24
   bb404:	4668      	mov	r0, sp
   bb406:	f7fd fd79 	bl	b8efc <localtime_r>
    char ascstr[26] = {};
   bb40a:	2216      	movs	r2, #22
   bb40c:	4629      	mov	r1, r5
   bb40e:	a803      	add	r0, sp, #12
   bb410:	9502      	str	r5, [sp, #8]
   bb412:	f002 f9dd 	bl	bd7d0 <memset>
    asctime_r(&calendar_time, ascstr);
   bb416:	a902      	add	r1, sp, #8
   bb418:	a809      	add	r0, sp, #36	; 0x24
   bb41a:	f002 f95f 	bl	bd6dc <asctime_r>
    int len = strlen(ascstr);
   bb41e:	a802      	add	r0, sp, #8
   bb420:	f002 fa73 	bl	bd90a <strlen>
    ascstr[len-1] = 0; // remove final newline
   bb424:	ab12      	add	r3, sp, #72	; 0x48
   bb426:	4418      	add	r0, r3
    return String(ascstr);
   bb428:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bb42a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bb42e:	4620      	mov	r0, r4
   bb430:	f7ff fe19 	bl	bb066 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb434:	4620      	mov	r0, r4
   bb436:	b013      	add	sp, #76	; 0x4c
   bb438:	bd30      	pop	{r4, r5, pc}
   bb43a:	bf00      	nop
   bb43c:	2003e6e0 	.word	0x2003e6e0
   bb440:	2003e6d8 	.word	0x2003e6d8

000bb444 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bb444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb448:	b0a4      	sub	sp, #144	; 0x90
   bb44a:	4607      	mov	r7, r0
   bb44c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb44e:	a814      	add	r0, sp, #80	; 0x50
{
   bb450:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb452:	223f      	movs	r2, #63	; 0x3f
{
   bb454:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb456:	f002 fa74 	bl	bd942 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb45a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb45c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb45e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb462:	f002 fa52 	bl	bd90a <strlen>
   bb466:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bb468:	bb4c      	cbnz	r4, bb4be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bb46a:	4929      	ldr	r1, [pc, #164]	; (bb510 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bb46c:	a803      	add	r0, sp, #12
   bb46e:	f002 fa44 	bl	bd8fa <strcpy>
   bb472:	ac14      	add	r4, sp, #80	; 0x50
{
   bb474:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bb476:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bb47a:	45b1      	cmp	r9, r6
   bb47c:	d934      	bls.n	bb4e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bb47e:	7823      	ldrb	r3, [r4, #0]
   bb480:	2b25      	cmp	r3, #37	; 0x25
   bb482:	f106 0a01 	add.w	sl, r6, #1
   bb486:	d117      	bne.n	bb4b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bb488:	7863      	ldrb	r3, [r4, #1]
   bb48a:	2b7a      	cmp	r3, #122	; 0x7a
   bb48c:	d114      	bne.n	bb4b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bb48e:	a803      	add	r0, sp, #12
   bb490:	f002 fa3b 	bl	bd90a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb494:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bb496:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb498:	1830      	adds	r0, r6, r0
   bb49a:	4418      	add	r0, r3
   bb49c:	eba9 0206 	sub.w	r2, r9, r6
   bb4a0:	1ca1      	adds	r1, r4, #2
   bb4a2:	f002 f96d 	bl	bd780 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bb4a6:	462a      	mov	r2, r5
   bb4a8:	a903      	add	r1, sp, #12
   bb4aa:	4620      	mov	r0, r4
   bb4ac:	f002 f968 	bl	bd780 <memcpy>
            len = strlen(format_str);
   bb4b0:	a814      	add	r0, sp, #80	; 0x50
   bb4b2:	f002 fa2a 	bl	bd90a <strlen>
   bb4b6:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bb4b8:	3401      	adds	r4, #1
   bb4ba:	4656      	mov	r6, sl
   bb4bc:	e7db      	b.n	bb476 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bb4be:	233c      	movs	r3, #60	; 0x3c
   bb4c0:	fb94 f2f3 	sdiv	r2, r4, r3
   bb4c4:	2a00      	cmp	r2, #0
   bb4c6:	bfb8      	it	lt
   bb4c8:	4252      	neglt	r2, r2
   bb4ca:	fbb2 f1f3 	udiv	r1, r2, r3
   bb4ce:	fb03 2211 	mls	r2, r3, r1, r2
   bb4d2:	9200      	str	r2, [sp, #0]
   bb4d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bb4d8:	4a0e      	ldr	r2, [pc, #56]	; (bb514 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bb4da:	fb94 f3f3 	sdiv	r3, r4, r3
   bb4de:	2110      	movs	r1, #16
   bb4e0:	a803      	add	r0, sp, #12
   bb4e2:	f7fd fcd3 	bl	b8e8c <snprintf>
   bb4e6:	e7c4      	b.n	bb472 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bb4e8:	2100      	movs	r1, #0
   bb4ea:	222e      	movs	r2, #46	; 0x2e
   bb4ec:	a808      	add	r0, sp, #32
   bb4ee:	9107      	str	r1, [sp, #28]
   bb4f0:	f002 f96e 	bl	bd7d0 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bb4f4:	4643      	mov	r3, r8
   bb4f6:	aa14      	add	r2, sp, #80	; 0x50
   bb4f8:	2132      	movs	r1, #50	; 0x32
   bb4fa:	a807      	add	r0, sp, #28
   bb4fc:	f7fd fcf6 	bl	b8eec <strftime>
    return String(buf);
   bb500:	a907      	add	r1, sp, #28
   bb502:	4638      	mov	r0, r7
   bb504:	f7ff fdaf 	bl	bb066 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb508:	4638      	mov	r0, r7
   bb50a:	b024      	add	sp, #144	; 0x90
   bb50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb510:	000bee8e 	.word	0x000bee8e
   bb514:	000bee90 	.word	0x000bee90

000bb518 <_ZN9TimeClass6formatExPKc>:
{
   bb518:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb51a:	b08d      	sub	sp, #52	; 0x34
   bb51c:	e9cd 2300 	strd	r2, r3, [sp]
   bb520:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bb522:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bb524:	b915      	cbnz	r5, bb52c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bb526:	4b19      	ldr	r3, [pc, #100]	; (bb58c <_ZN9TimeClass6formatExPKc+0x74>)
   bb528:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bb52a:	b12d      	cbz	r5, bb538 <_ZN9TimeClass6formatExPKc+0x20>
   bb52c:	4b18      	ldr	r3, [pc, #96]	; (bb590 <_ZN9TimeClass6formatExPKc+0x78>)
   bb52e:	4628      	mov	r0, r5
   bb530:	6819      	ldr	r1, [r3, #0]
   bb532:	f002 f9d8 	bl	bd8e6 <strcmp>
   bb536:	b938      	cbnz	r0, bb548 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bb538:	e9dd 2300 	ldrd	r2, r3, [sp]
   bb53c:	4620      	mov	r0, r4
   bb53e:	f7ff ff45 	bl	bb3cc <_ZN9TimeClass7timeStrEx>
}
   bb542:	4620      	mov	r0, r4
   bb544:	b00d      	add	sp, #52	; 0x34
   bb546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bb548:	4e12      	ldr	r6, [pc, #72]	; (bb594 <_ZN9TimeClass6formatExPKc+0x7c>)
   bb54a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bb54c:	4f12      	ldr	r7, [pc, #72]	; (bb598 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bb54e:	e9d6 3200 	ldrd	r3, r2, [r6]
   bb552:	185b      	adds	r3, r3, r1
   bb554:	9901      	ldr	r1, [sp, #4]
   bb556:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bb55a:	e9d7 0100 	ldrd	r0, r1, [r7]
   bb55e:	181b      	adds	r3, r3, r0
   bb560:	eb42 0201 	adc.w	r2, r2, r1
   bb564:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bb568:	2100      	movs	r1, #0
   bb56a:	2224      	movs	r2, #36	; 0x24
   bb56c:	a803      	add	r0, sp, #12
   bb56e:	f002 f92f 	bl	bd7d0 <memset>
    localtime_r(&t, &calendar_time);
   bb572:	a903      	add	r1, sp, #12
   bb574:	4668      	mov	r0, sp
   bb576:	f7fd fcc1 	bl	b8efc <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bb57a:	6832      	ldr	r2, [r6, #0]
   bb57c:	683b      	ldr	r3, [r7, #0]
   bb57e:	a903      	add	r1, sp, #12
   bb580:	4413      	add	r3, r2
   bb582:	4620      	mov	r0, r4
   bb584:	462a      	mov	r2, r5
   bb586:	f7ff ff5d 	bl	bb444 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bb58a:	e7da      	b.n	bb542 <_ZN9TimeClass6formatExPKc+0x2a>
   bb58c:	2003e6ac 	.word	0x2003e6ac
   bb590:	2003dec8 	.word	0x2003dec8
   bb594:	2003e6e0 	.word	0x2003e6e0
   bb598:	2003e6d8 	.word	0x2003e6d8

000bb59c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bb59c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bb59e:	2000      	movs	r0, #0
   bb5a0:	f7fd f946 	bl	b8830 <hal_rtc_time_is_valid>
    if (rtcstate)
   bb5a4:	4604      	mov	r4, r0
   bb5a6:	b9a0      	cbnz	r0, bb5d2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bb5a8:	f7fd fb46 	bl	b8c38 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bb5ac:	2801      	cmp	r0, #1
   bb5ae:	d110      	bne.n	bb5d2 <_ZN9TimeClass7isValidEv+0x36>
   bb5b0:	4620      	mov	r0, r4
   bb5b2:	f7fd fb69 	bl	b8c88 <system_thread_get_state>
   bb5b6:	b960      	cbnz	r0, bb5d2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bb5b8:	f7ff fee8 	bl	bb38c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bb5bc:	b910      	cbnz	r0, bb5c4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bb5be:	f7fd fbad 	bl	b8d1c <spark_process>
        while (_while() && !_condition()) {
   bb5c2:	e7f9      	b.n	bb5b8 <_ZN9TimeClass7isValidEv+0x1c>
   bb5c4:	f7ff fee2 	bl	bb38c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bb5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bb5cc:	2000      	movs	r0, #0
   bb5ce:	f7fd b92f 	b.w	b8830 <hal_rtc_time_is_valid>
}
   bb5d2:	4620      	mov	r0, r4
   bb5d4:	bd10      	pop	{r4, pc}

000bb5d6 <_ZN9TimeClass3nowEv>:
{
   bb5d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bb5d8:	f7ff ffe0 	bl	bb59c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bb5dc:	2210      	movs	r2, #16
   bb5de:	2100      	movs	r1, #0
   bb5e0:	4668      	mov	r0, sp
   bb5e2:	f002 f8f5 	bl	bd7d0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bb5e6:	2100      	movs	r1, #0
   bb5e8:	4668      	mov	r0, sp
   bb5ea:	f7fd f931 	bl	b8850 <hal_rtc_get_time>
}
   bb5ee:	9800      	ldr	r0, [sp, #0]
   bb5f0:	b005      	add	sp, #20
   bb5f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb5f8 <_ZN9TimeClass4hourEv>:
{
   bb5f8:	b508      	push	{r3, lr}
	return hour(now());
   bb5fa:	f7ff ffec 	bl	bb5d6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bb5fe:	17c1      	asrs	r1, r0, #31
   bb600:	f7ff fe8e 	bl	bb320 <_ZL22Refresh_UnixTime_Cachex>
}
   bb604:	4b01      	ldr	r3, [pc, #4]	; (bb60c <_ZN9TimeClass4hourEv+0x14>)
   bb606:	6898      	ldr	r0, [r3, #8]
   bb608:	bd08      	pop	{r3, pc}
   bb60a:	bf00      	nop
   bb60c:	2003e6b0 	.word	0x2003e6b0

000bb610 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb610:	4b02      	ldr	r3, [pc, #8]	; (bb61c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb612:	681a      	ldr	r2, [r3, #0]
   bb614:	4b02      	ldr	r3, [pc, #8]	; (bb620 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb616:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb618:	4770      	bx	lr
   bb61a:	bf00      	nop
   bb61c:	2003dec8 	.word	0x2003dec8
   bb620:	2003e6ac 	.word	0x2003e6ac

000bb624 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb624:	4770      	bx	lr

000bb626 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb626:	7441      	strb	r1, [r0, #17]
}
   bb628:	4770      	bx	lr

000bb62a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb62a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb62c:	7c00      	ldrb	r0, [r0, #16]
   bb62e:	f7fd fa67 	bl	b8b00 <hal_usart_available_data_for_write>
}
   bb632:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb636:	bd08      	pop	{r3, pc}

000bb638 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb638:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb63a:	7c00      	ldrb	r0, [r0, #16]
   bb63c:	f7fd fa38 	bl	b8ab0 <hal_usart_available>
}
   bb640:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb644:	bd08      	pop	{r3, pc}

000bb646 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb646:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb648:	7c00      	ldrb	r0, [r0, #16]
   bb64a:	f7fd fa41 	bl	b8ad0 <hal_usart_peek>
}
   bb64e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb652:	bd08      	pop	{r3, pc}

000bb654 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb654:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb656:	7c00      	ldrb	r0, [r0, #16]
   bb658:	f7fd fa32 	bl	b8ac0 <hal_usart_read>
}
   bb65c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb660:	bd08      	pop	{r3, pc}

000bb662 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb662:	7c00      	ldrb	r0, [r0, #16]
   bb664:	f7fd ba3c 	b.w	b8ae0 <hal_usart_flush>

000bb668 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb668:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb66a:	7c45      	ldrb	r5, [r0, #17]
{
   bb66c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb66e:	b12d      	cbz	r5, bb67c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb670:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb672:	b003      	add	sp, #12
   bb674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb678:	f7fd ba12 	b.w	b8aa0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb67c:	7c00      	ldrb	r0, [r0, #16]
   bb67e:	9101      	str	r1, [sp, #4]
   bb680:	f7fd fa3e 	bl	b8b00 <hal_usart_available_data_for_write>
   bb684:	2800      	cmp	r0, #0
   bb686:	9901      	ldr	r1, [sp, #4]
   bb688:	dcf2      	bgt.n	bb670 <_ZN11USARTSerial5writeEh+0x8>
}
   bb68a:	4628      	mov	r0, r5
   bb68c:	b003      	add	sp, #12
   bb68e:	bd30      	pop	{r4, r5, pc}

000bb690 <_ZN11USARTSerialD0Ev>:
   bb690:	b510      	push	{r4, lr}
   bb692:	2114      	movs	r1, #20
   bb694:	4604      	mov	r4, r0
   bb696:	f7f8 fd02 	bl	b409e <_ZdlPvj>
   bb69a:	4620      	mov	r0, r4
   bb69c:	bd10      	pop	{r4, pc}
	...

000bb6a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb6a0:	b510      	push	{r4, lr}
   bb6a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb6a6:	4604      	mov	r4, r0
   bb6a8:	4608      	mov	r0, r1
   bb6aa:	4611      	mov	r1, r2
   bb6ac:	2200      	movs	r2, #0
   bb6ae:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb6b2:	4b04      	ldr	r3, [pc, #16]	; (bb6c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb6b4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb6b6:	2301      	movs	r3, #1
  _serial = serial;
   bb6b8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb6ba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb6bc:	f7fd fa30 	bl	b8b20 <hal_usart_init_ex>
}
   bb6c0:	4620      	mov	r0, r4
   bb6c2:	bd10      	pop	{r4, pc}
   bb6c4:	000beec0 	.word	0x000beec0

000bb6c8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb6c8:	7c00      	ldrb	r0, [r0, #16]
   bb6ca:	2300      	movs	r3, #0
   bb6cc:	f7fd ba20 	b.w	b8b10 <hal_usart_begin_config>

000bb6d0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb6d0:	2200      	movs	r2, #0
   bb6d2:	f7ff bff9 	b.w	bb6c8 <_ZN11USARTSerial5beginEmm>

000bb6d6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb6d6:	7c00      	ldrb	r0, [r0, #16]
   bb6d8:	f7fd b9da 	b.w	b8a90 <hal_usart_end>

000bb6dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb6dc:	7441      	strb	r1, [r0, #17]
}
   bb6de:	4770      	bx	lr

000bb6e0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb6e0:	4770      	bx	lr

000bb6e2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb6e2:	4770      	bx	lr

000bb6e4 <_ZN9USBSerial4readEv>:
{
   bb6e4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb6e6:	2100      	movs	r1, #0
   bb6e8:	7c00      	ldrb	r0, [r0, #16]
   bb6ea:	f7fd fa49 	bl	b8b80 <HAL_USB_USART_Receive_Data>
}
   bb6ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb6f2:	bd08      	pop	{r3, pc}

000bb6f4 <_ZN9USBSerial4peekEv>:
{
   bb6f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb6f6:	2101      	movs	r1, #1
   bb6f8:	7c00      	ldrb	r0, [r0, #16]
   bb6fa:	f7fd fa41 	bl	b8b80 <HAL_USB_USART_Receive_Data>
}
   bb6fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb702:	bd08      	pop	{r3, pc}

000bb704 <_ZN9USBSerial17availableForWriteEv>:
{
   bb704:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb706:	7c00      	ldrb	r0, [r0, #16]
   bb708:	f7fd fa32 	bl	b8b70 <HAL_USB_USART_Available_Data_For_Write>
}
   bb70c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb710:	bd08      	pop	{r3, pc}

000bb712 <_ZN9USBSerial9availableEv>:
{
   bb712:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb714:	7c00      	ldrb	r0, [r0, #16]
   bb716:	f7fd fa23 	bl	b8b60 <HAL_USB_USART_Available_Data>
}
   bb71a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb71e:	bd08      	pop	{r3, pc}

000bb720 <_ZN9USBSerial5writeEh>:
{
   bb720:	b513      	push	{r0, r1, r4, lr}
   bb722:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb724:	7c00      	ldrb	r0, [r0, #16]
{
   bb726:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb728:	f7fd fa22 	bl	b8b70 <HAL_USB_USART_Available_Data_For_Write>
   bb72c:	2800      	cmp	r0, #0
   bb72e:	9901      	ldr	r1, [sp, #4]
   bb730:	dc01      	bgt.n	bb736 <_ZN9USBSerial5writeEh+0x16>
   bb732:	7c60      	ldrb	r0, [r4, #17]
   bb734:	b120      	cbz	r0, bb740 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb736:	7c20      	ldrb	r0, [r4, #16]
   bb738:	f7fd fa2a 	bl	b8b90 <HAL_USB_USART_Send_Data>
   bb73c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb740:	b002      	add	sp, #8
   bb742:	bd10      	pop	{r4, pc}

000bb744 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb744:	7c00      	ldrb	r0, [r0, #16]
   bb746:	f7fd ba2b 	b.w	b8ba0 <HAL_USB_USART_Flush_Data>

000bb74a <_ZN9USBSerialD0Ev>:
   bb74a:	b510      	push	{r4, lr}
   bb74c:	2114      	movs	r1, #20
   bb74e:	4604      	mov	r4, r0
   bb750:	f7f8 fca5 	bl	b409e <_ZdlPvj>
   bb754:	4620      	mov	r0, r4
   bb756:	bd10      	pop	{r4, pc}

000bb758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb758:	b510      	push	{r4, lr}
   bb75a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb75e:	4604      	mov	r4, r0
   bb760:	4608      	mov	r0, r1
   bb762:	2100      	movs	r1, #0
   bb764:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb768:	4b04      	ldr	r3, [pc, #16]	; (bb77c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb76a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb76c:	2301      	movs	r3, #1
  _serial = serial;
   bb76e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb770:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb772:	4611      	mov	r1, r2
   bb774:	f7fd f9dc 	bl	b8b30 <HAL_USB_USART_Init>
}
   bb778:	4620      	mov	r0, r4
   bb77a:	bd10      	pop	{r4, pc}
   bb77c:	000beef0 	.word	0x000beef0

000bb780 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb780:	7c00      	ldrb	r0, [r0, #16]
   bb782:	2200      	movs	r2, #0
   bb784:	f7fd b9dc 	b.w	b8b40 <HAL_USB_USART_Begin>

000bb788 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bb788:	7c00      	ldrb	r0, [r0, #16]
   bb78a:	f7fd b9e1 	b.w	b8b50 <HAL_USB_USART_End>

000bb78e <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bb78e:	7c00      	ldrb	r0, [r0, #16]
   bb790:	f7fd ba0e 	b.w	b8bb0 <HAL_USB_USART_Is_Connected>

000bb794 <_Z19acquireSerialBufferv>:
{
   bb794:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb796:	2214      	movs	r2, #20
{
   bb798:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb79a:	2100      	movs	r1, #0
   bb79c:	f002 f818 	bl	bd7d0 <memset>
}
   bb7a0:	4620      	mov	r0, r4
   bb7a2:	bd10      	pop	{r4, pc}

000bb7a4 <_Z16_fetch_usbserialv>:
{
   bb7a4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb7a6:	4c0f      	ldr	r4, [pc, #60]	; (bb7e4 <_Z16_fetch_usbserialv+0x40>)
{
   bb7a8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb7aa:	a803      	add	r0, sp, #12
   bb7ac:	f7ff fff2 	bl	bb794 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb7b0:	7821      	ldrb	r1, [r4, #0]
   bb7b2:	f3bf 8f5b 	dmb	ish
   bb7b6:	f011 0101 	ands.w	r1, r1, #1
   bb7ba:	d10f      	bne.n	bb7dc <_Z16_fetch_usbserialv+0x38>
   bb7bc:	4620      	mov	r0, r4
   bb7be:	9101      	str	r1, [sp, #4]
   bb7c0:	f7f8 fc7c 	bl	b40bc <__cxa_guard_acquire>
   bb7c4:	9901      	ldr	r1, [sp, #4]
   bb7c6:	b148      	cbz	r0, bb7dc <_Z16_fetch_usbserialv+0x38>
   bb7c8:	aa03      	add	r2, sp, #12
   bb7ca:	4807      	ldr	r0, [pc, #28]	; (bb7e8 <_Z16_fetch_usbserialv+0x44>)
   bb7cc:	f7ff ffc4 	bl	bb758 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb7d0:	4620      	mov	r0, r4
   bb7d2:	f7f8 fc78 	bl	b40c6 <__cxa_guard_release>
   bb7d6:	4805      	ldr	r0, [pc, #20]	; (bb7ec <_Z16_fetch_usbserialv+0x48>)
   bb7d8:	f001 ffa6 	bl	bd728 <atexit>
	return _usbserial;
}
   bb7dc:	4802      	ldr	r0, [pc, #8]	; (bb7e8 <_Z16_fetch_usbserialv+0x44>)
   bb7de:	b008      	add	sp, #32
   bb7e0:	bd10      	pop	{r4, pc}
   bb7e2:	bf00      	nop
   bb7e4:	2003e6f0 	.word	0x2003e6f0
   bb7e8:	2003e6f4 	.word	0x2003e6f4
   bb7ec:	000bb6e1 	.word	0x000bb6e1

000bb7f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb7f0:	4b01      	ldr	r3, [pc, #4]	; (bb7f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb7f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb7f4:	4770      	bx	lr
   bb7f6:	bf00      	nop
   bb7f8:	2003ded0 	.word	0x2003ded0

000bb7fc <serialEventRun>:
{
   bb7fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb7fe:	4b0b      	ldr	r3, [pc, #44]	; (bb82c <serialEventRun+0x30>)
   bb800:	b143      	cbz	r3, bb814 <serialEventRun+0x18>
   bb802:	f7ff ffcf 	bl	bb7a4 <_Z16_fetch_usbserialv>
   bb806:	6803      	ldr	r3, [r0, #0]
   bb808:	691b      	ldr	r3, [r3, #16]
   bb80a:	4798      	blx	r3
   bb80c:	2800      	cmp	r0, #0
   bb80e:	dd01      	ble.n	bb814 <serialEventRun+0x18>
        serialEvent();
   bb810:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb814:	4b06      	ldr	r3, [pc, #24]	; (bb830 <serialEventRun+0x34>)
   bb816:	b143      	cbz	r3, bb82a <serialEventRun+0x2e>
   bb818:	f000 f9aa 	bl	bbb70 <_Z22__fetch_global_Serial1v>
   bb81c:	6803      	ldr	r3, [r0, #0]
   bb81e:	691b      	ldr	r3, [r3, #16]
   bb820:	4798      	blx	r3
   bb822:	2800      	cmp	r0, #0
   bb824:	dd01      	ble.n	bb82a <serialEventRun+0x2e>
        serialEvent1();
   bb826:	f3af 8000 	nop.w
}
   bb82a:	bd08      	pop	{r3, pc}
	...

000bb834 <_post_loop>:
{
   bb834:	b508      	push	{r3, lr}
	serialEventRun();
   bb836:	f7ff ffe1 	bl	bb7fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb83a:	f7fc fff1 	bl	b8820 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb83e:	4b01      	ldr	r3, [pc, #4]	; (bb844 <_post_loop+0x10>)
   bb840:	6018      	str	r0, [r3, #0]
}
   bb842:	bd08      	pop	{r3, pc}
   bb844:	2003e710 	.word	0x2003e710

000bb848 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb848:	4805      	ldr	r0, [pc, #20]	; (bb860 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb84a:	4a06      	ldr	r2, [pc, #24]	; (bb864 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb84c:	4906      	ldr	r1, [pc, #24]	; (bb868 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb84e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb850:	1a12      	subs	r2, r2, r0
   bb852:	f001 ff95 	bl	bd780 <memcpy>
    __backup_sram_signature = signature;
   bb856:	4b05      	ldr	r3, [pc, #20]	; (bb86c <_Z33system_initialize_user_backup_ramv+0x24>)
   bb858:	4a05      	ldr	r2, [pc, #20]	; (bb870 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb85a:	601a      	str	r2, [r3, #0]
}
   bb85c:	bd08      	pop	{r3, pc}
   bb85e:	bf00      	nop
   bb860:	2003f400 	.word	0x2003f400
   bb864:	2003f404 	.word	0x2003f404
   bb868:	000bf1b4 	.word	0x000bf1b4
   bb86c:	2003f400 	.word	0x2003f400
   bb870:	9a271c1e 	.word	0x9a271c1e

000bb874 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb874:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb876:	2300      	movs	r3, #0
   bb878:	9300      	str	r3, [sp, #0]
   bb87a:	461a      	mov	r2, r3
   bb87c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb880:	f7fd fa24 	bl	b8ccc <system_ctrl_set_result>
}
   bb884:	b003      	add	sp, #12
   bb886:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb88c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb88c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb88e:	8843      	ldrh	r3, [r0, #2]
   bb890:	2b0a      	cmp	r3, #10
   bb892:	d008      	beq.n	bb8a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb894:	2b50      	cmp	r3, #80	; 0x50
   bb896:	d10b      	bne.n	bb8b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb898:	4b09      	ldr	r3, [pc, #36]	; (bb8c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb89a:	681b      	ldr	r3, [r3, #0]
   bb89c:	b14b      	cbz	r3, bb8b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb89e:	b003      	add	sp, #12
   bb8a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb8a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb8a6:	f7ff ffe5 	bl	bb874 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb8aa:	b003      	add	sp, #12
   bb8ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb8b0:	2300      	movs	r3, #0
   bb8b2:	9300      	str	r3, [sp, #0]
   bb8b4:	461a      	mov	r2, r3
   bb8b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb8ba:	f7fd fa07 	bl	b8ccc <system_ctrl_set_result>
}
   bb8be:	e7f4      	b.n	bb8aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb8c0:	2003e70c 	.word	0x2003e70c

000bb8c4 <module_user_init_hook>:
{
   bb8c4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb8c6:	4812      	ldr	r0, [pc, #72]	; (bb910 <module_user_init_hook+0x4c>)
   bb8c8:	2100      	movs	r1, #0
   bb8ca:	f7fd fb07 	bl	b8edc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb8ce:	4b11      	ldr	r3, [pc, #68]	; (bb914 <module_user_init_hook+0x50>)
   bb8d0:	681a      	ldr	r2, [r3, #0]
   bb8d2:	4b11      	ldr	r3, [pc, #68]	; (bb918 <module_user_init_hook+0x54>)
   bb8d4:	429a      	cmp	r2, r3
   bb8d6:	4b11      	ldr	r3, [pc, #68]	; (bb91c <module_user_init_hook+0x58>)
   bb8d8:	bf0c      	ite	eq
   bb8da:	2201      	moveq	r2, #1
   bb8dc:	2200      	movne	r2, #0
   bb8de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb8e0:	d001      	beq.n	bb8e6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb8e2:	f7ff ffb1 	bl	bb848 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb8e6:	f7fc ff8b 	bl	b8800 <HAL_RNG_GetRandomNumber>
   bb8ea:	4604      	mov	r4, r0
    srand(seed);
   bb8ec:	f001 ff78 	bl	bd7e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb8f0:	4b0b      	ldr	r3, [pc, #44]	; (bb920 <module_user_init_hook+0x5c>)
   bb8f2:	b113      	cbz	r3, bb8fa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb8f4:	4620      	mov	r0, r4
   bb8f6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb8fa:	2100      	movs	r1, #0
   bb8fc:	4808      	ldr	r0, [pc, #32]	; (bb920 <module_user_init_hook+0x5c>)
   bb8fe:	f7fd fa3d 	bl	b8d7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb906:	4807      	ldr	r0, [pc, #28]	; (bb924 <module_user_init_hook+0x60>)
   bb908:	2100      	movs	r1, #0
   bb90a:	f7fd b9d5 	b.w	b8cb8 <system_ctrl_set_app_request_handler>
   bb90e:	bf00      	nop
   bb910:	000bb7f1 	.word	0x000bb7f1
   bb914:	2003f400 	.word	0x2003f400
   bb918:	9a271c1e 	.word	0x9a271c1e
   bb91c:	2003e708 	.word	0x2003e708
   bb920:	00000000 	.word	0x00000000
   bb924:	000bb88d 	.word	0x000bb88d

000bb928 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb928:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb92a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb92c:	d902      	bls.n	bb934 <pinAvailable+0xc>
    return false;
   bb92e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb930:	b002      	add	sp, #8
   bb932:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb934:	f1a0 030b 	sub.w	r3, r0, #11
   bb938:	2b02      	cmp	r3, #2
   bb93a:	d81a      	bhi.n	bb972 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb93c:	4c17      	ldr	r4, [pc, #92]	; (bb99c <pinAvailable+0x74>)
   bb93e:	7821      	ldrb	r1, [r4, #0]
   bb940:	f3bf 8f5b 	dmb	ish
   bb944:	f011 0101 	ands.w	r1, r1, #1
   bb948:	d10b      	bne.n	bb962 <pinAvailable+0x3a>
   bb94a:	4620      	mov	r0, r4
   bb94c:	9101      	str	r1, [sp, #4]
   bb94e:	f7f8 fbb5 	bl	b40bc <__cxa_guard_acquire>
   bb952:	9901      	ldr	r1, [sp, #4]
   bb954:	b128      	cbz	r0, bb962 <pinAvailable+0x3a>
   bb956:	4812      	ldr	r0, [pc, #72]	; (bb9a0 <pinAvailable+0x78>)
   bb958:	f7ff fa7a 	bl	bae50 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb95c:	4620      	mov	r0, r4
   bb95e:	f7f8 fbb2 	bl	b40c6 <__cxa_guard_release>
   bb962:	4b0f      	ldr	r3, [pc, #60]	; (bb9a0 <pinAvailable+0x78>)
   bb964:	7818      	ldrb	r0, [r3, #0]
   bb966:	f7fd f86b 	bl	b8a40 <hal_spi_is_enabled>
   bb96a:	2800      	cmp	r0, #0
   bb96c:	d1df      	bne.n	bb92e <pinAvailable+0x6>
  return true; // 'pin' is available
   bb96e:	2001      	movs	r0, #1
   bb970:	e7de      	b.n	bb930 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb972:	2801      	cmp	r0, #1
   bb974:	d809      	bhi.n	bb98a <pinAvailable+0x62>
   bb976:	f000 f897 	bl	bbaa8 <_Z19__fetch_global_Wirev>
   bb97a:	2100      	movs	r1, #0
   bb97c:	7c00      	ldrb	r0, [r0, #16]
   bb97e:	f7fc ffff 	bl	b8980 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb982:	f080 0001 	eor.w	r0, r0, #1
   bb986:	b2c0      	uxtb	r0, r0
   bb988:	e7d2      	b.n	bb930 <pinAvailable+0x8>
   bb98a:	3809      	subs	r0, #9
   bb98c:	2801      	cmp	r0, #1
   bb98e:	d8ee      	bhi.n	bb96e <pinAvailable+0x46>
   bb990:	f000 f8ee 	bl	bbb70 <_Z22__fetch_global_Serial1v>
   bb994:	7c00      	ldrb	r0, [r0, #16]
   bb996:	f7fd f8ab 	bl	b8af0 <hal_usart_is_enabled>
   bb99a:	e7f2      	b.n	bb982 <pinAvailable+0x5a>
   bb99c:	2003e3e0 	.word	0x2003e3e0
   bb9a0:	2003e3e4 	.word	0x2003e3e4

000bb9a4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb9a4:	2823      	cmp	r0, #35	; 0x23
{
   bb9a6:	b538      	push	{r3, r4, r5, lr}
   bb9a8:	4604      	mov	r4, r0
   bb9aa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb9ac:	d80a      	bhi.n	bb9c4 <pinMode+0x20>
   bb9ae:	29ff      	cmp	r1, #255	; 0xff
   bb9b0:	d008      	beq.n	bb9c4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb9b2:	f7ff ffb9 	bl	bb928 <pinAvailable>
   bb9b6:	b128      	cbz	r0, bb9c4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb9b8:	4629      	mov	r1, r5
   bb9ba:	4620      	mov	r0, r4
}
   bb9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb9c0:	f7fc bf66 	b.w	b8890 <HAL_Pin_Mode>
}
   bb9c4:	bd38      	pop	{r3, r4, r5, pc}

000bb9c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb9c6:	b538      	push	{r3, r4, r5, lr}
   bb9c8:	4604      	mov	r4, r0
   bb9ca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb9cc:	f7fc ff68 	bl	b88a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb9d0:	28ff      	cmp	r0, #255	; 0xff
   bb9d2:	d010      	beq.n	bb9f6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb9d4:	2806      	cmp	r0, #6
   bb9d6:	d804      	bhi.n	bb9e2 <digitalWrite+0x1c>
   bb9d8:	234d      	movs	r3, #77	; 0x4d
   bb9da:	fa23 f000 	lsr.w	r0, r3, r0
   bb9de:	07c3      	lsls	r3, r0, #31
   bb9e0:	d409      	bmi.n	bb9f6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb9e2:	4620      	mov	r0, r4
   bb9e4:	f7ff ffa0 	bl	bb928 <pinAvailable>
   bb9e8:	b128      	cbz	r0, bb9f6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb9ea:	4629      	mov	r1, r5
   bb9ec:	4620      	mov	r0, r4
}
   bb9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb9f2:	f7fc bf5d 	b.w	b88b0 <HAL_GPIO_Write>
}
   bb9f6:	bd38      	pop	{r3, r4, r5, pc}

000bb9f8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bb9f8:	b510      	push	{r4, lr}
   bb9fa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb9fc:	f7fc ff50 	bl	b88a0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bba00:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bba02:	b2db      	uxtb	r3, r3
   bba04:	2b01      	cmp	r3, #1
   bba06:	d908      	bls.n	bba1a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bba08:	4620      	mov	r0, r4
   bba0a:	f7ff ff8d 	bl	bb928 <pinAvailable>
   bba0e:	b120      	cbz	r0, bba1a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bba10:	4620      	mov	r0, r4
}
   bba12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bba16:	f7fc bf53 	b.w	b88c0 <HAL_GPIO_Read>
}
   bba1a:	2000      	movs	r0, #0
   bba1c:	bd10      	pop	{r4, pc}

000bba1e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bba1e:	280d      	cmp	r0, #13
{
   bba20:	b510      	push	{r4, lr}
   bba22:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bba24:	bf9c      	itt	ls
   bba26:	340e      	addls	r4, #14
   bba28:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bba2a:	4620      	mov	r0, r4
   bba2c:	f7ff ff7c 	bl	bb928 <pinAvailable>
   bba30:	b150      	cbz	r0, bba48 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bba32:	2103      	movs	r1, #3
   bba34:	4620      	mov	r0, r4
   bba36:	f7fc ff23 	bl	b8880 <HAL_Validate_Pin_Function>
   bba3a:	2803      	cmp	r0, #3
   bba3c:	d104      	bne.n	bba48 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bba3e:	4620      	mov	r0, r4
}
   bba40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bba44:	f7fc bf54 	b.w	b88f0 <hal_adc_read>
}
   bba48:	2000      	movs	r0, #0
   bba4a:	bd10      	pop	{r4, pc}

000bba4c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bba4c:	4770      	bx	lr

000bba4e <__tcf_1>:
   bba4e:	4770      	bx	lr

000bba50 <_Z17acquireWireBufferv>:
{
   bba50:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bba52:	2520      	movs	r5, #32
   bba54:	2314      	movs	r3, #20
{
   bba56:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bba58:	6003      	str	r3, [r0, #0]
   bba5a:	6085      	str	r5, [r0, #8]
   bba5c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bba5e:	4906      	ldr	r1, [pc, #24]	; (bba78 <_Z17acquireWireBufferv+0x28>)
   bba60:	4628      	mov	r0, r5
   bba62:	f000 f8ab 	bl	bbbbc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bba66:	4904      	ldr	r1, [pc, #16]	; (bba78 <_Z17acquireWireBufferv+0x28>)
	};
   bba68:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bba6a:	4628      	mov	r0, r5
   bba6c:	f000 f8a6 	bl	bbbbc <_ZnajRKSt9nothrow_t>
	};
   bba70:	60e0      	str	r0, [r4, #12]
}
   bba72:	4620      	mov	r0, r4
   bba74:	bd38      	pop	{r3, r4, r5, pc}
   bba76:	bf00      	nop
   bba78:	000bef18 	.word	0x000bef18

000bba7c <_Z18acquireWire1Bufferv>:
   bba7c:	b538      	push	{r3, r4, r5, lr}
   bba7e:	2520      	movs	r5, #32
   bba80:	2314      	movs	r3, #20
   bba82:	4604      	mov	r4, r0
   bba84:	6003      	str	r3, [r0, #0]
   bba86:	6085      	str	r5, [r0, #8]
   bba88:	6105      	str	r5, [r0, #16]
   bba8a:	4906      	ldr	r1, [pc, #24]	; (bbaa4 <_Z18acquireWire1Bufferv+0x28>)
   bba8c:	4628      	mov	r0, r5
   bba8e:	f000 f895 	bl	bbbbc <_ZnajRKSt9nothrow_t>
   bba92:	4904      	ldr	r1, [pc, #16]	; (bbaa4 <_Z18acquireWire1Bufferv+0x28>)
   bba94:	6060      	str	r0, [r4, #4]
   bba96:	4628      	mov	r0, r5
   bba98:	f000 f890 	bl	bbbbc <_ZnajRKSt9nothrow_t>
   bba9c:	60e0      	str	r0, [r4, #12]
   bba9e:	4620      	mov	r0, r4
   bbaa0:	bd38      	pop	{r3, r4, r5, pc}
   bbaa2:	bf00      	nop
   bbaa4:	000bef18 	.word	0x000bef18

000bbaa8 <_Z19__fetch_global_Wirev>:
{
   bbaa8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbaaa:	4d0e      	ldr	r5, [pc, #56]	; (bbae4 <_Z19__fetch_global_Wirev+0x3c>)
   bbaac:	7829      	ldrb	r1, [r5, #0]
   bbaae:	f3bf 8f5b 	dmb	ish
   bbab2:	f011 0401 	ands.w	r4, r1, #1
{
   bbab6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bbab8:	d111      	bne.n	bbade <_Z19__fetch_global_Wirev+0x36>
   bbaba:	4628      	mov	r0, r5
   bbabc:	f7f8 fafe 	bl	b40bc <__cxa_guard_acquire>
   bbac0:	b168      	cbz	r0, bbade <_Z19__fetch_global_Wirev+0x36>
   bbac2:	a801      	add	r0, sp, #4
   bbac4:	f7ff ffc4 	bl	bba50 <_Z17acquireWireBufferv>
   bbac8:	aa01      	add	r2, sp, #4
   bbaca:	4621      	mov	r1, r4
   bbacc:	4806      	ldr	r0, [pc, #24]	; (bbae8 <_Z19__fetch_global_Wirev+0x40>)
   bbace:	f7fd fc47 	bl	b9360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbad2:	4628      	mov	r0, r5
   bbad4:	f7f8 faf7 	bl	b40c6 <__cxa_guard_release>
   bbad8:	4804      	ldr	r0, [pc, #16]	; (bbaec <_Z19__fetch_global_Wirev+0x44>)
   bbada:	f001 fe25 	bl	bd728 <atexit>
	return wire;
}
   bbade:	4802      	ldr	r0, [pc, #8]	; (bbae8 <_Z19__fetch_global_Wirev+0x40>)
   bbae0:	b007      	add	sp, #28
   bbae2:	bd30      	pop	{r4, r5, pc}
   bbae4:	2003e714 	.word	0x2003e714
   bbae8:	2003e71c 	.word	0x2003e71c
   bbaec:	000bba4d 	.word	0x000bba4d

000bbaf0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bbaf0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bbaf2:	4c0e      	ldr	r4, [pc, #56]	; (bbb2c <_Z20__fetch_global_Wire1v+0x3c>)
   bbaf4:	7823      	ldrb	r3, [r4, #0]
   bbaf6:	f3bf 8f5b 	dmb	ish
   bbafa:	07db      	lsls	r3, r3, #31
{
   bbafc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bbafe:	d411      	bmi.n	bbb24 <_Z20__fetch_global_Wire1v+0x34>
   bbb00:	4620      	mov	r0, r4
   bbb02:	f7f8 fadb 	bl	b40bc <__cxa_guard_acquire>
   bbb06:	b168      	cbz	r0, bbb24 <_Z20__fetch_global_Wire1v+0x34>
   bbb08:	a801      	add	r0, sp, #4
   bbb0a:	f7ff ffb7 	bl	bba7c <_Z18acquireWire1Bufferv>
   bbb0e:	aa01      	add	r2, sp, #4
   bbb10:	2101      	movs	r1, #1
   bbb12:	4807      	ldr	r0, [pc, #28]	; (bbb30 <_Z20__fetch_global_Wire1v+0x40>)
   bbb14:	f7fd fc24 	bl	b9360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bbb18:	4620      	mov	r0, r4
   bbb1a:	f7f8 fad4 	bl	b40c6 <__cxa_guard_release>
   bbb1e:	4805      	ldr	r0, [pc, #20]	; (bbb34 <_Z20__fetch_global_Wire1v+0x44>)
   bbb20:	f001 fe02 	bl	bd728 <atexit>
	return wire;
}
   bbb24:	4802      	ldr	r0, [pc, #8]	; (bbb30 <_Z20__fetch_global_Wire1v+0x40>)
   bbb26:	b006      	add	sp, #24
   bbb28:	bd10      	pop	{r4, pc}
   bbb2a:	bf00      	nop
   bbb2c:	2003e718 	.word	0x2003e718
   bbb30:	2003e730 	.word	0x2003e730
   bbb34:	000bba4f 	.word	0x000bba4f

000bbb38 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbb38:	4770      	bx	lr
	...

000bbb3c <_Z20acquireSerial1Bufferv>:
{
   bbb3c:	b538      	push	{r3, r4, r5, lr}
   bbb3e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bbb40:	2514      	movs	r5, #20
   bbb42:	462a      	mov	r2, r5
   bbb44:	2100      	movs	r1, #0
   bbb46:	f001 fe43 	bl	bd7d0 <memset>
   bbb4a:	8025      	strh	r5, [r4, #0]
   bbb4c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb4e:	4907      	ldr	r1, [pc, #28]	; (bbb6c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bbb50:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb52:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bbb54:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb56:	f000 f831 	bl	bbbbc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb5a:	4904      	ldr	r1, [pc, #16]	; (bbb6c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bbb5c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bbb5e:	4628      	mov	r0, r5
   bbb60:	f000 f82c 	bl	bbbbc <_ZnajRKSt9nothrow_t>
    };
   bbb64:	60e0      	str	r0, [r4, #12]
}
   bbb66:	4620      	mov	r0, r4
   bbb68:	bd38      	pop	{r3, r4, r5, pc}
   bbb6a:	bf00      	nop
   bbb6c:	000bef18 	.word	0x000bef18

000bbb70 <_Z22__fetch_global_Serial1v>:
{
   bbb70:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbb72:	4d0e      	ldr	r5, [pc, #56]	; (bbbac <_Z22__fetch_global_Serial1v+0x3c>)
   bbb74:	7829      	ldrb	r1, [r5, #0]
   bbb76:	f3bf 8f5b 	dmb	ish
   bbb7a:	f011 0401 	ands.w	r4, r1, #1
{
   bbb7e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbb80:	d111      	bne.n	bbba6 <_Z22__fetch_global_Serial1v+0x36>
   bbb82:	4628      	mov	r0, r5
   bbb84:	f7f8 fa9a 	bl	b40bc <__cxa_guard_acquire>
   bbb88:	b168      	cbz	r0, bbba6 <_Z22__fetch_global_Serial1v+0x36>
   bbb8a:	a801      	add	r0, sp, #4
   bbb8c:	f7ff ffd6 	bl	bbb3c <_Z20acquireSerial1Bufferv>
   bbb90:	aa01      	add	r2, sp, #4
   bbb92:	4621      	mov	r1, r4
   bbb94:	4806      	ldr	r0, [pc, #24]	; (bbbb0 <_Z22__fetch_global_Serial1v+0x40>)
   bbb96:	f7ff fd83 	bl	bb6a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bbb9a:	4628      	mov	r0, r5
   bbb9c:	f7f8 fa93 	bl	b40c6 <__cxa_guard_release>
   bbba0:	4804      	ldr	r0, [pc, #16]	; (bbbb4 <_Z22__fetch_global_Serial1v+0x44>)
   bbba2:	f001 fdc1 	bl	bd728 <atexit>
    return serial1;
}
   bbba6:	4802      	ldr	r0, [pc, #8]	; (bbbb0 <_Z22__fetch_global_Serial1v+0x40>)
   bbba8:	b007      	add	sp, #28
   bbbaa:	bd30      	pop	{r4, r5, pc}
   bbbac:	2003e744 	.word	0x2003e744
   bbbb0:	2003e748 	.word	0x2003e748
   bbbb4:	000bbb39 	.word	0x000bbb39

000bbbb8 <_ZnwjRKSt9nothrow_t>:
   bbbb8:	f7f8 ba6d 	b.w	b4096 <_Znwj>

000bbbbc <_ZnajRKSt9nothrow_t>:
   bbbbc:	f7f8 ba6d 	b.w	b409a <_Znaj>

000bbbc0 <_ZSt25__throw_bad_function_callv>:
   bbbc0:	b508      	push	{r3, lr}
   bbbc2:	f7fd f973 	bl	b8eac <abort>
	...

000bbbc8 <pow>:
   bbbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbbca:	ed2d 8b02 	vpush	{d8}
   bbbce:	ec57 6b10 	vmov	r6, r7, d0
   bbbd2:	ec55 4b11 	vmov	r4, r5, d1
   bbbd6:	f000 f8cb 	bl	bbd70 <__ieee754_pow>
   bbbda:	4b63      	ldr	r3, [pc, #396]	; (bbd68 <pow+0x1a0>)
   bbbdc:	eeb0 8a40 	vmov.f32	s16, s0
   bbbe0:	eef0 8a60 	vmov.f32	s17, s1
   bbbe4:	f993 3000 	ldrsb.w	r3, [r3]
   bbbe8:	3301      	adds	r3, #1
   bbbea:	d02a      	beq.n	bbc42 <pow+0x7a>
   bbbec:	4622      	mov	r2, r4
   bbbee:	462b      	mov	r3, r5
   bbbf0:	4620      	mov	r0, r4
   bbbf2:	4629      	mov	r1, r5
   bbbf4:	f001 fcc4 	bl	bd580 <__aeabi_dcmpun>
   bbbf8:	bb18      	cbnz	r0, bbc42 <pow+0x7a>
   bbbfa:	4632      	mov	r2, r6
   bbbfc:	463b      	mov	r3, r7
   bbbfe:	4630      	mov	r0, r6
   bbc00:	4639      	mov	r1, r7
   bbc02:	f001 fcbd 	bl	bd580 <__aeabi_dcmpun>
   bbc06:	2800      	cmp	r0, #0
   bbc08:	d144      	bne.n	bbc94 <pow+0xcc>
   bbc0a:	2200      	movs	r2, #0
   bbc0c:	2300      	movs	r3, #0
   bbc0e:	4630      	mov	r0, r6
   bbc10:	4639      	mov	r1, r7
   bbc12:	f001 fc83 	bl	bd51c <__aeabi_dcmpeq>
   bbc16:	b1d8      	cbz	r0, bbc50 <pow+0x88>
   bbc18:	2200      	movs	r2, #0
   bbc1a:	2300      	movs	r3, #0
   bbc1c:	4620      	mov	r0, r4
   bbc1e:	4629      	mov	r1, r5
   bbc20:	f001 fc7c 	bl	bd51c <__aeabi_dcmpeq>
   bbc24:	2800      	cmp	r0, #0
   bbc26:	d13d      	bne.n	bbca4 <pow+0xdc>
   bbc28:	ec45 4b10 	vmov	d0, r4, r5
   bbc2c:	f000 ff10 	bl	bca50 <finite>
   bbc30:	b138      	cbz	r0, bbc42 <pow+0x7a>
   bbc32:	4620      	mov	r0, r4
   bbc34:	4629      	mov	r1, r5
   bbc36:	2200      	movs	r2, #0
   bbc38:	2300      	movs	r3, #0
   bbc3a:	f001 fc79 	bl	bd530 <__aeabi_dcmplt>
   bbc3e:	2800      	cmp	r0, #0
   bbc40:	d15c      	bne.n	bbcfc <pow+0x134>
   bbc42:	eeb0 0a48 	vmov.f32	s0, s16
   bbc46:	eef0 0a68 	vmov.f32	s1, s17
   bbc4a:	ecbd 8b02 	vpop	{d8}
   bbc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbc50:	eeb0 0a48 	vmov.f32	s0, s16
   bbc54:	eef0 0a68 	vmov.f32	s1, s17
   bbc58:	f000 fefa 	bl	bca50 <finite>
   bbc5c:	b358      	cbz	r0, bbcb6 <pow+0xee>
   bbc5e:	ec51 0b18 	vmov	r0, r1, d8
   bbc62:	2200      	movs	r2, #0
   bbc64:	2300      	movs	r3, #0
   bbc66:	f001 fc59 	bl	bd51c <__aeabi_dcmpeq>
   bbc6a:	2800      	cmp	r0, #0
   bbc6c:	d0e9      	beq.n	bbc42 <pow+0x7a>
   bbc6e:	ec47 6b10 	vmov	d0, r6, r7
   bbc72:	f000 feed 	bl	bca50 <finite>
   bbc76:	2800      	cmp	r0, #0
   bbc78:	d0e3      	beq.n	bbc42 <pow+0x7a>
   bbc7a:	ec45 4b10 	vmov	d0, r4, r5
   bbc7e:	f000 fee7 	bl	bca50 <finite>
   bbc82:	2800      	cmp	r0, #0
   bbc84:	d0dd      	beq.n	bbc42 <pow+0x7a>
   bbc86:	f7fd f919 	bl	b8ebc <__errno>
   bbc8a:	2322      	movs	r3, #34	; 0x22
   bbc8c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; bbd48 <pow+0x180>
   bbc90:	6003      	str	r3, [r0, #0]
   bbc92:	e7d6      	b.n	bbc42 <pow+0x7a>
   bbc94:	4620      	mov	r0, r4
   bbc96:	4629      	mov	r1, r5
   bbc98:	2200      	movs	r2, #0
   bbc9a:	2300      	movs	r3, #0
   bbc9c:	f001 fc3e 	bl	bd51c <__aeabi_dcmpeq>
   bbca0:	2800      	cmp	r0, #0
   bbca2:	d0ce      	beq.n	bbc42 <pow+0x7a>
   bbca4:	ed9f 8b2a 	vldr	d8, [pc, #168]	; bbd50 <pow+0x188>
   bbca8:	eeb0 0a48 	vmov.f32	s0, s16
   bbcac:	eef0 0a68 	vmov.f32	s1, s17
   bbcb0:	ecbd 8b02 	vpop	{d8}
   bbcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bbcb6:	ec47 6b10 	vmov	d0, r6, r7
   bbcba:	f000 fec9 	bl	bca50 <finite>
   bbcbe:	2800      	cmp	r0, #0
   bbcc0:	d0cd      	beq.n	bbc5e <pow+0x96>
   bbcc2:	ec45 4b10 	vmov	d0, r4, r5
   bbcc6:	f000 fec3 	bl	bca50 <finite>
   bbcca:	2800      	cmp	r0, #0
   bbccc:	d0c7      	beq.n	bbc5e <pow+0x96>
   bbcce:	ec53 2b18 	vmov	r2, r3, d8
   bbcd2:	ee18 0a10 	vmov	r0, s16
   bbcd6:	4619      	mov	r1, r3
   bbcd8:	f001 fc52 	bl	bd580 <__aeabi_dcmpun>
   bbcdc:	bb20      	cbnz	r0, bbd28 <pow+0x160>
   bbcde:	f7fd f8ed 	bl	b8ebc <__errno>
   bbce2:	4603      	mov	r3, r0
   bbce4:	2222      	movs	r2, #34	; 0x22
   bbce6:	601a      	str	r2, [r3, #0]
   bbce8:	4630      	mov	r0, r6
   bbcea:	4639      	mov	r1, r7
   bbcec:	2200      	movs	r2, #0
   bbcee:	2300      	movs	r3, #0
   bbcf0:	f001 fc1e 	bl	bd530 <__aeabi_dcmplt>
   bbcf4:	b948      	cbnz	r0, bbd0a <pow+0x142>
   bbcf6:	ed9f 8b18 	vldr	d8, [pc, #96]	; bbd58 <pow+0x190>
   bbcfa:	e7a2      	b.n	bbc42 <pow+0x7a>
   bbcfc:	f7fd f8de 	bl	b8ebc <__errno>
   bbd00:	2321      	movs	r3, #33	; 0x21
   bbd02:	ed9f 8b17 	vldr	d8, [pc, #92]	; bbd60 <pow+0x198>
   bbd06:	6003      	str	r3, [r0, #0]
   bbd08:	e79b      	b.n	bbc42 <pow+0x7a>
   bbd0a:	ec45 4b10 	vmov	d0, r4, r5
   bbd0e:	f000 feb3 	bl	bca78 <rint>
   bbd12:	4622      	mov	r2, r4
   bbd14:	ec51 0b10 	vmov	r0, r1, d0
   bbd18:	462b      	mov	r3, r5
   bbd1a:	f001 fbff 	bl	bd51c <__aeabi_dcmpeq>
   bbd1e:	2800      	cmp	r0, #0
   bbd20:	d1e9      	bne.n	bbcf6 <pow+0x12e>
   bbd22:	ed9f 8b0f 	vldr	d8, [pc, #60]	; bbd60 <pow+0x198>
   bbd26:	e78c      	b.n	bbc42 <pow+0x7a>
   bbd28:	f7fd f8c8 	bl	b8ebc <__errno>
   bbd2c:	2200      	movs	r2, #0
   bbd2e:	2300      	movs	r3, #0
   bbd30:	2121      	movs	r1, #33	; 0x21
   bbd32:	6001      	str	r1, [r0, #0]
   bbd34:	4610      	mov	r0, r2
   bbd36:	4619      	mov	r1, r3
   bbd38:	f001 fab2 	bl	bd2a0 <__aeabi_ddiv>
   bbd3c:	ec41 0b18 	vmov	d8, r0, r1
   bbd40:	e77f      	b.n	bbc42 <pow+0x7a>
   bbd42:	bf00      	nop
   bbd44:	f3af 8000 	nop.w
	...
   bbd54:	3ff00000 	.word	0x3ff00000
   bbd58:	00000000 	.word	0x00000000
   bbd5c:	7ff00000 	.word	0x7ff00000
   bbd60:	00000000 	.word	0x00000000
   bbd64:	fff00000 	.word	0xfff00000
   bbd68:	2003decc 	.word	0x2003decc
   bbd6c:	00000000 	.word	0x00000000

000bbd70 <__ieee754_pow>:
   bbd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbd74:	ec57 6b11 	vmov	r6, r7, d1
   bbd78:	ed2d 8b0c 	vpush	{d8-d13}
   bbd7c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   bbd80:	ea5a 0206 	orrs.w	r2, sl, r6
   bbd84:	b087      	sub	sp, #28
   bbd86:	d03d      	beq.n	bbe04 <__ieee754_pow+0x94>
   bbd88:	ec55 4b10 	vmov	r4, r5, d0
   bbd8c:	4972      	ldr	r1, [pc, #456]	; (bbf58 <__ieee754_pow+0x1e8>)
   bbd8e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   bbd92:	4588      	cmp	r8, r1
   bbd94:	ee10 2a10 	vmov	r2, s0
   bbd98:	46a9      	mov	r9, r5
   bbd9a:	dc2c      	bgt.n	bbdf6 <__ieee754_pow+0x86>
   bbd9c:	ee11 3a10 	vmov	r3, s2
   bbda0:	46bb      	mov	fp, r7
   bbda2:	d036      	beq.n	bbe12 <__ieee754_pow+0xa2>
   bbda4:	458a      	cmp	sl, r1
   bbda6:	dc26      	bgt.n	bbdf6 <__ieee754_pow+0x86>
   bbda8:	496b      	ldr	r1, [pc, #428]	; (bbf58 <__ieee754_pow+0x1e8>)
   bbdaa:	458a      	cmp	sl, r1
   bbdac:	d021      	beq.n	bbdf2 <__ieee754_pow+0x82>
   bbdae:	f1b9 0f00 	cmp.w	r9, #0
   bbdb2:	db39      	blt.n	bbe28 <__ieee754_pow+0xb8>
   bbdb4:	2100      	movs	r1, #0
   bbdb6:	9100      	str	r1, [sp, #0]
   bbdb8:	2b00      	cmp	r3, #0
   bbdba:	d151      	bne.n	bbe60 <__ieee754_pow+0xf0>
   bbdbc:	4b66      	ldr	r3, [pc, #408]	; (bbf58 <__ieee754_pow+0x1e8>)
   bbdbe:	459a      	cmp	sl, r3
   bbdc0:	f000 80a2 	beq.w	bbf08 <__ieee754_pow+0x198>
   bbdc4:	4b65      	ldr	r3, [pc, #404]	; (bbf5c <__ieee754_pow+0x1ec>)
   bbdc6:	459a      	cmp	sl, r3
   bbdc8:	f000 80b0 	beq.w	bbf2c <__ieee754_pow+0x1bc>
   bbdcc:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   bbdd0:	f000 84c0 	beq.w	bc754 <__ieee754_pow+0x9e4>
   bbdd4:	4b62      	ldr	r3, [pc, #392]	; (bbf60 <__ieee754_pow+0x1f0>)
   bbdd6:	459b      	cmp	fp, r3
   bbdd8:	d142      	bne.n	bbe60 <__ieee754_pow+0xf0>
   bbdda:	f1b9 0f00 	cmp.w	r9, #0
   bbdde:	db3f      	blt.n	bbe60 <__ieee754_pow+0xf0>
   bbde0:	ec45 4b10 	vmov	d0, r4, r5
   bbde4:	b007      	add	sp, #28
   bbde6:	ecbd 8b0c 	vpop	{d8-d13}
   bbdea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbdee:	f000 bd59 	b.w	bc8a4 <__ieee754_sqrt>
   bbdf2:	2b00      	cmp	r3, #0
   bbdf4:	d0db      	beq.n	bbdae <__ieee754_pow+0x3e>
   bbdf6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bbdfa:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bbdfe:	ea58 0302 	orrs.w	r3, r8, r2
   bbe02:	d109      	bne.n	bbe18 <__ieee754_pow+0xa8>
   bbe04:	ed9f 0b50 	vldr	d0, [pc, #320]	; bbf48 <__ieee754_pow+0x1d8>
   bbe08:	b007      	add	sp, #28
   bbe0a:	ecbd 8b0c 	vpop	{d8-d13}
   bbe0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbe12:	b90c      	cbnz	r4, bbe18 <__ieee754_pow+0xa8>
   bbe14:	45c2      	cmp	sl, r8
   bbe16:	ddc7      	ble.n	bbda8 <__ieee754_pow+0x38>
   bbe18:	4852      	ldr	r0, [pc, #328]	; (bbf64 <__ieee754_pow+0x1f4>)
   bbe1a:	b007      	add	sp, #28
   bbe1c:	ecbd 8b0c 	vpop	{d8-d13}
   bbe20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe24:	f000 be20 	b.w	bca68 <nan>
   bbe28:	494f      	ldr	r1, [pc, #316]	; (bbf68 <__ieee754_pow+0x1f8>)
   bbe2a:	458a      	cmp	sl, r1
   bbe2c:	f300 8085 	bgt.w	bbf3a <__ieee754_pow+0x1ca>
   bbe30:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   bbe34:	458a      	cmp	sl, r1
   bbe36:	dd0f      	ble.n	bbe58 <__ieee754_pow+0xe8>
   bbe38:	ea4f 512a 	mov.w	r1, sl, asr #20
   bbe3c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   bbe40:	2914      	cmp	r1, #20
   bbe42:	f340 849b 	ble.w	bc77c <__ieee754_pow+0xa0c>
   bbe46:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   bbe4a:	fa23 f001 	lsr.w	r0, r3, r1
   bbe4e:	fa00 f101 	lsl.w	r1, r0, r1
   bbe52:	4299      	cmp	r1, r3
   bbe54:	f000 84ed 	beq.w	bc832 <__ieee754_pow+0xac2>
   bbe58:	2100      	movs	r1, #0
   bbe5a:	9100      	str	r1, [sp, #0]
   bbe5c:	2b00      	cmp	r3, #0
   bbe5e:	d0b1      	beq.n	bbdc4 <__ieee754_pow+0x54>
   bbe60:	ec45 4b10 	vmov	d0, r4, r5
   bbe64:	9202      	str	r2, [sp, #8]
   bbe66:	f000 fde9 	bl	bca3c <fabs>
   bbe6a:	9a02      	ldr	r2, [sp, #8]
   bbe6c:	bb5a      	cbnz	r2, bbec6 <__ieee754_pow+0x156>
   bbe6e:	f1b8 0f00 	cmp.w	r8, #0
   bbe72:	d004      	beq.n	bbe7e <__ieee754_pow+0x10e>
   bbe74:	4b39      	ldr	r3, [pc, #228]	; (bbf5c <__ieee754_pow+0x1ec>)
   bbe76:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   bbe7a:	429a      	cmp	r2, r3
   bbe7c:	d123      	bne.n	bbec6 <__ieee754_pow+0x156>
   bbe7e:	f1bb 0f00 	cmp.w	fp, #0
   bbe82:	da07      	bge.n	bbe94 <__ieee754_pow+0x124>
   bbe84:	ec53 2b10 	vmov	r2, r3, d0
   bbe88:	4934      	ldr	r1, [pc, #208]	; (bbf5c <__ieee754_pow+0x1ec>)
   bbe8a:	2000      	movs	r0, #0
   bbe8c:	f001 fa08 	bl	bd2a0 <__aeabi_ddiv>
   bbe90:	ec41 0b10 	vmov	d0, r0, r1
   bbe94:	f1b9 0f00 	cmp.w	r9, #0
   bbe98:	dab6      	bge.n	bbe08 <__ieee754_pow+0x98>
   bbe9a:	9b00      	ldr	r3, [sp, #0]
   bbe9c:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bbea0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bbea4:	ea58 0303 	orrs.w	r3, r8, r3
   bbea8:	f040 848d 	bne.w	bc7c6 <__ieee754_pow+0xa56>
   bbeac:	ec53 2b10 	vmov	r2, r3, d0
   bbeb0:	4610      	mov	r0, r2
   bbeb2:	4619      	mov	r1, r3
   bbeb4:	f000 ff12 	bl	bccdc <__aeabi_dsub>
   bbeb8:	4602      	mov	r2, r0
   bbeba:	460b      	mov	r3, r1
   bbebc:	f001 f9f0 	bl	bd2a0 <__aeabi_ddiv>
   bbec0:	ec41 0b10 	vmov	d0, r0, r1
   bbec4:	e7a0      	b.n	bbe08 <__ieee754_pow+0x98>
   bbec6:	9a00      	ldr	r2, [sp, #0]
   bbec8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   bbecc:	3b01      	subs	r3, #1
   bbece:	9304      	str	r3, [sp, #16]
   bbed0:	4313      	orrs	r3, r2
   bbed2:	d035      	beq.n	bbf40 <__ieee754_pow+0x1d0>
   bbed4:	4b25      	ldr	r3, [pc, #148]	; (bbf6c <__ieee754_pow+0x1fc>)
   bbed6:	459a      	cmp	sl, r3
   bbed8:	dd4c      	ble.n	bbf74 <__ieee754_pow+0x204>
   bbeda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   bbede:	459a      	cmp	sl, r3
   bbee0:	4b23      	ldr	r3, [pc, #140]	; (bbf70 <__ieee754_pow+0x200>)
   bbee2:	f340 83db 	ble.w	bc69c <__ieee754_pow+0x92c>
   bbee6:	4598      	cmp	r8, r3
   bbee8:	f340 8360 	ble.w	bc5ac <__ieee754_pow+0x83c>
   bbeec:	f1bb 0f00 	cmp.w	fp, #0
   bbef0:	f340 8360 	ble.w	bc5b4 <__ieee754_pow+0x844>
   bbef4:	a316      	add	r3, pc, #88	; (adr r3, bbf50 <__ieee754_pow+0x1e0>)
   bbef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbefa:	4610      	mov	r0, r2
   bbefc:	4619      	mov	r1, r3
   bbefe:	f001 f8a5 	bl	bd04c <__aeabi_dmul>
   bbf02:	ec41 0b10 	vmov	d0, r0, r1
   bbf06:	e77f      	b.n	bbe08 <__ieee754_pow+0x98>
   bbf08:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   bbf0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   bbf10:	4313      	orrs	r3, r2
   bbf12:	f43f af77 	beq.w	bbe04 <__ieee754_pow+0x94>
   bbf16:	4b16      	ldr	r3, [pc, #88]	; (bbf70 <__ieee754_pow+0x200>)
   bbf18:	4598      	cmp	r8, r3
   bbf1a:	f340 837a 	ble.w	bc612 <__ieee754_pow+0x8a2>
   bbf1e:	f1bb 0f00 	cmp.w	fp, #0
   bbf22:	f2c0 8347 	blt.w	bc5b4 <__ieee754_pow+0x844>
   bbf26:	ec47 6b10 	vmov	d0, r6, r7
   bbf2a:	e76d      	b.n	bbe08 <__ieee754_pow+0x98>
   bbf2c:	f1bb 0f00 	cmp.w	fp, #0
   bbf30:	f2c0 841a 	blt.w	bc768 <__ieee754_pow+0x9f8>
   bbf34:	ec45 4b10 	vmov	d0, r4, r5
   bbf38:	e766      	b.n	bbe08 <__ieee754_pow+0x98>
   bbf3a:	2102      	movs	r1, #2
   bbf3c:	9100      	str	r1, [sp, #0]
   bbf3e:	e73b      	b.n	bbdb8 <__ieee754_pow+0x48>
   bbf40:	4622      	mov	r2, r4
   bbf42:	462b      	mov	r3, r5
   bbf44:	e7b4      	b.n	bbeb0 <__ieee754_pow+0x140>
   bbf46:	bf00      	nop
   bbf48:	00000000 	.word	0x00000000
   bbf4c:	3ff00000 	.word	0x3ff00000
   bbf50:	8800759c 	.word	0x8800759c
   bbf54:	7e37e43c 	.word	0x7e37e43c
   bbf58:	7ff00000 	.word	0x7ff00000
   bbf5c:	3ff00000 	.word	0x3ff00000
   bbf60:	3fe00000 	.word	0x3fe00000
   bbf64:	000bef1c 	.word	0x000bef1c
   bbf68:	433fffff 	.word	0x433fffff
   bbf6c:	41e00000 	.word	0x41e00000
   bbf70:	3fefffff 	.word	0x3fefffff
   bbf74:	4be4      	ldr	r3, [pc, #912]	; (bc308 <__ieee754_pow+0x598>)
   bbf76:	ea09 0303 	and.w	r3, r9, r3
   bbf7a:	2200      	movs	r2, #0
   bbf7c:	b953      	cbnz	r3, bbf94 <__ieee754_pow+0x224>
   bbf7e:	ec51 0b10 	vmov	r0, r1, d0
   bbf82:	4be2      	ldr	r3, [pc, #904]	; (bc30c <__ieee754_pow+0x59c>)
   bbf84:	f001 f862 	bl	bd04c <__aeabi_dmul>
   bbf88:	ec41 0b10 	vmov	d0, r0, r1
   bbf8c:	ee10 8a90 	vmov	r8, s1
   bbf90:	f06f 0234 	mvn.w	r2, #52	; 0x34
   bbf94:	ea4f 5328 	mov.w	r3, r8, asr #20
   bbf98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   bbf9c:	189a      	adds	r2, r3, r2
   bbf9e:	4bdc      	ldr	r3, [pc, #880]	; (bc310 <__ieee754_pow+0x5a0>)
   bbfa0:	9205      	str	r2, [sp, #20]
   bbfa2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   bbfa6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   bbfaa:	4598      	cmp	r8, r3
   bbfac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   bbfb0:	dd07      	ble.n	bbfc2 <__ieee754_pow+0x252>
   bbfb2:	4bd8      	ldr	r3, [pc, #864]	; (bc314 <__ieee754_pow+0x5a4>)
   bbfb4:	4598      	cmp	r8, r3
   bbfb6:	f340 8414 	ble.w	bc7e2 <__ieee754_pow+0xa72>
   bbfba:	3201      	adds	r2, #1
   bbfbc:	9205      	str	r2, [sp, #20]
   bbfbe:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   bbfc2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; bc2a8 <__ieee754_pow+0x538>
   bbfc6:	ed9f 7bba 	vldr	d7, [pc, #744]	; bc2b0 <__ieee754_pow+0x540>
   bbfca:	ec53 2b16 	vmov	r2, r3, d6
   bbfce:	eeb0 ca47 	vmov.f32	s24, s14
   bbfd2:	eef0 ca67 	vmov.f32	s25, s15
   bbfd6:	2500      	movs	r5, #0
   bbfd8:	eeb0 da47 	vmov.f32	s26, s14
   bbfdc:	eef0 da67 	vmov.f32	s27, s15
   bbfe0:	ec5b ab10 	vmov	sl, fp, d0
   bbfe4:	46a3      	mov	fp, r4
   bbfe6:	4650      	mov	r0, sl
   bbfe8:	4659      	mov	r1, fp
   bbfea:	ec43 2b1a 	vmov	d10, r2, r3
   bbfee:	f000 fe75 	bl	bccdc <__aeabi_dsub>
   bbff2:	ec53 2b1a 	vmov	r2, r3, d10
   bbff6:	4680      	mov	r8, r0
   bbff8:	4689      	mov	r9, r1
   bbffa:	4650      	mov	r0, sl
   bbffc:	4659      	mov	r1, fp
   bbffe:	f000 fe6f 	bl	bcce0 <__adddf3>
   bc002:	4602      	mov	r2, r0
   bc004:	460b      	mov	r3, r1
   bc006:	2000      	movs	r0, #0
   bc008:	49c3      	ldr	r1, [pc, #780]	; (bc318 <__ieee754_pow+0x5a8>)
   bc00a:	f001 f949 	bl	bd2a0 <__aeabi_ddiv>
   bc00e:	ec41 0b1b 	vmov	d11, r0, r1
   bc012:	4640      	mov	r0, r8
   bc014:	ec53 2b1b 	vmov	r2, r3, d11
   bc018:	4649      	mov	r1, r9
   bc01a:	f001 f817 	bl	bd04c <__aeabi_dmul>
   bc01e:	ec41 0b18 	vmov	d8, r0, r1
   bc022:	460a      	mov	r2, r1
   bc024:	4601      	mov	r1, r0
   bc026:	e9cd 1202 	strd	r1, r2, [sp, #8]
   bc02a:	2100      	movs	r1, #0
   bc02c:	9102      	str	r1, [sp, #8]
   bc02e:	1064      	asrs	r4, r4, #1
   bc030:	ec4b ab19 	vmov	d9, sl, fp
   bc034:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   bc038:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   bc03c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   bc040:	2000      	movs	r0, #0
   bc042:	1959      	adds	r1, r3, r5
   bc044:	4604      	mov	r4, r0
   bc046:	460d      	mov	r5, r1
   bc048:	4602      	mov	r2, r0
   bc04a:	460b      	mov	r3, r1
   bc04c:	4650      	mov	r0, sl
   bc04e:	4659      	mov	r1, fp
   bc050:	f000 fffc 	bl	bd04c <__aeabi_dmul>
   bc054:	4602      	mov	r2, r0
   bc056:	460b      	mov	r3, r1
   bc058:	4640      	mov	r0, r8
   bc05a:	4649      	mov	r1, r9
   bc05c:	f000 fe3e 	bl	bccdc <__aeabi_dsub>
   bc060:	ec53 2b1a 	vmov	r2, r3, d10
   bc064:	4680      	mov	r8, r0
   bc066:	4689      	mov	r9, r1
   bc068:	4620      	mov	r0, r4
   bc06a:	4629      	mov	r1, r5
   bc06c:	f000 fe36 	bl	bccdc <__aeabi_dsub>
   bc070:	4602      	mov	r2, r0
   bc072:	460b      	mov	r3, r1
   bc074:	ec51 0b19 	vmov	r0, r1, d9
   bc078:	f000 fe30 	bl	bccdc <__aeabi_dsub>
   bc07c:	4652      	mov	r2, sl
   bc07e:	465b      	mov	r3, fp
   bc080:	f000 ffe4 	bl	bd04c <__aeabi_dmul>
   bc084:	4602      	mov	r2, r0
   bc086:	460b      	mov	r3, r1
   bc088:	4640      	mov	r0, r8
   bc08a:	4649      	mov	r1, r9
   bc08c:	f000 fe26 	bl	bccdc <__aeabi_dsub>
   bc090:	ec53 2b1b 	vmov	r2, r3, d11
   bc094:	f000 ffda 	bl	bd04c <__aeabi_dmul>
   bc098:	ec53 2b18 	vmov	r2, r3, d8
   bc09c:	ec41 0b19 	vmov	d9, r0, r1
   bc0a0:	ec51 0b18 	vmov	r0, r1, d8
   bc0a4:	f000 ffd2 	bl	bd04c <__aeabi_dmul>
   bc0a8:	a383      	add	r3, pc, #524	; (adr r3, bc2b8 <__ieee754_pow+0x548>)
   bc0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc0ae:	4604      	mov	r4, r0
   bc0b0:	460d      	mov	r5, r1
   bc0b2:	f000 ffcb 	bl	bd04c <__aeabi_dmul>
   bc0b6:	a382      	add	r3, pc, #520	; (adr r3, bc2c0 <__ieee754_pow+0x550>)
   bc0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc0bc:	f000 fe10 	bl	bcce0 <__adddf3>
   bc0c0:	4622      	mov	r2, r4
   bc0c2:	462b      	mov	r3, r5
   bc0c4:	f000 ffc2 	bl	bd04c <__aeabi_dmul>
   bc0c8:	a37f      	add	r3, pc, #508	; (adr r3, bc2c8 <__ieee754_pow+0x558>)
   bc0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc0ce:	f000 fe07 	bl	bcce0 <__adddf3>
   bc0d2:	4622      	mov	r2, r4
   bc0d4:	462b      	mov	r3, r5
   bc0d6:	f000 ffb9 	bl	bd04c <__aeabi_dmul>
   bc0da:	a37d      	add	r3, pc, #500	; (adr r3, bc2d0 <__ieee754_pow+0x560>)
   bc0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc0e0:	f000 fdfe 	bl	bcce0 <__adddf3>
   bc0e4:	4622      	mov	r2, r4
   bc0e6:	462b      	mov	r3, r5
   bc0e8:	f000 ffb0 	bl	bd04c <__aeabi_dmul>
   bc0ec:	a37a      	add	r3, pc, #488	; (adr r3, bc2d8 <__ieee754_pow+0x568>)
   bc0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc0f2:	f000 fdf5 	bl	bcce0 <__adddf3>
   bc0f6:	4622      	mov	r2, r4
   bc0f8:	462b      	mov	r3, r5
   bc0fa:	f000 ffa7 	bl	bd04c <__aeabi_dmul>
   bc0fe:	a378      	add	r3, pc, #480	; (adr r3, bc2e0 <__ieee754_pow+0x570>)
   bc100:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc104:	f000 fdec 	bl	bcce0 <__adddf3>
   bc108:	4622      	mov	r2, r4
   bc10a:	4680      	mov	r8, r0
   bc10c:	4689      	mov	r9, r1
   bc10e:	462b      	mov	r3, r5
   bc110:	4620      	mov	r0, r4
   bc112:	4629      	mov	r1, r5
   bc114:	f000 ff9a 	bl	bd04c <__aeabi_dmul>
   bc118:	4602      	mov	r2, r0
   bc11a:	460b      	mov	r3, r1
   bc11c:	4640      	mov	r0, r8
   bc11e:	4649      	mov	r1, r9
   bc120:	f000 ff94 	bl	bd04c <__aeabi_dmul>
   bc124:	4652      	mov	r2, sl
   bc126:	4604      	mov	r4, r0
   bc128:	460d      	mov	r5, r1
   bc12a:	465b      	mov	r3, fp
   bc12c:	ec51 0b18 	vmov	r0, r1, d8
   bc130:	f000 fdd6 	bl	bcce0 <__adddf3>
   bc134:	ec53 2b19 	vmov	r2, r3, d9
   bc138:	f000 ff88 	bl	bd04c <__aeabi_dmul>
   bc13c:	4622      	mov	r2, r4
   bc13e:	462b      	mov	r3, r5
   bc140:	f000 fdce 	bl	bcce0 <__adddf3>
   bc144:	4652      	mov	r2, sl
   bc146:	4680      	mov	r8, r0
   bc148:	4689      	mov	r9, r1
   bc14a:	465b      	mov	r3, fp
   bc14c:	4650      	mov	r0, sl
   bc14e:	4659      	mov	r1, fp
   bc150:	f000 ff7c 	bl	bd04c <__aeabi_dmul>
   bc154:	4602      	mov	r2, r0
   bc156:	460b      	mov	r3, r1
   bc158:	ec43 2b1a 	vmov	d10, r2, r3
   bc15c:	4b6f      	ldr	r3, [pc, #444]	; (bc31c <__ieee754_pow+0x5ac>)
   bc15e:	2200      	movs	r2, #0
   bc160:	f000 fdbe 	bl	bcce0 <__adddf3>
   bc164:	4642      	mov	r2, r8
   bc166:	464b      	mov	r3, r9
   bc168:	f000 fdba 	bl	bcce0 <__adddf3>
   bc16c:	2400      	movs	r4, #0
   bc16e:	460d      	mov	r5, r1
   bc170:	4622      	mov	r2, r4
   bc172:	462b      	mov	r3, r5
   bc174:	4650      	mov	r0, sl
   bc176:	4659      	mov	r1, fp
   bc178:	f000 ff68 	bl	bd04c <__aeabi_dmul>
   bc17c:	4b67      	ldr	r3, [pc, #412]	; (bc31c <__ieee754_pow+0x5ac>)
   bc17e:	4682      	mov	sl, r0
   bc180:	468b      	mov	fp, r1
   bc182:	2200      	movs	r2, #0
   bc184:	4620      	mov	r0, r4
   bc186:	4629      	mov	r1, r5
   bc188:	f000 fda8 	bl	bccdc <__aeabi_dsub>
   bc18c:	ec53 2b1a 	vmov	r2, r3, d10
   bc190:	f000 fda4 	bl	bccdc <__aeabi_dsub>
   bc194:	4602      	mov	r2, r0
   bc196:	460b      	mov	r3, r1
   bc198:	4640      	mov	r0, r8
   bc19a:	4649      	mov	r1, r9
   bc19c:	f000 fd9e 	bl	bccdc <__aeabi_dsub>
   bc1a0:	ec53 2b18 	vmov	r2, r3, d8
   bc1a4:	f000 ff52 	bl	bd04c <__aeabi_dmul>
   bc1a8:	4622      	mov	r2, r4
   bc1aa:	462b      	mov	r3, r5
   bc1ac:	4604      	mov	r4, r0
   bc1ae:	460d      	mov	r5, r1
   bc1b0:	ec51 0b19 	vmov	r0, r1, d9
   bc1b4:	f000 ff4a 	bl	bd04c <__aeabi_dmul>
   bc1b8:	4602      	mov	r2, r0
   bc1ba:	460b      	mov	r3, r1
   bc1bc:	4620      	mov	r0, r4
   bc1be:	4629      	mov	r1, r5
   bc1c0:	f000 fd8e 	bl	bcce0 <__adddf3>
   bc1c4:	4680      	mov	r8, r0
   bc1c6:	4689      	mov	r9, r1
   bc1c8:	4642      	mov	r2, r8
   bc1ca:	464b      	mov	r3, r9
   bc1cc:	4650      	mov	r0, sl
   bc1ce:	4659      	mov	r1, fp
   bc1d0:	f000 fd86 	bl	bcce0 <__adddf3>
   bc1d4:	a344      	add	r3, pc, #272	; (adr r3, bc2e8 <__ieee754_pow+0x578>)
   bc1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc1da:	2000      	movs	r0, #0
   bc1dc:	4604      	mov	r4, r0
   bc1de:	460d      	mov	r5, r1
   bc1e0:	f000 ff34 	bl	bd04c <__aeabi_dmul>
   bc1e4:	4652      	mov	r2, sl
   bc1e6:	ec41 0b19 	vmov	d9, r0, r1
   bc1ea:	465b      	mov	r3, fp
   bc1ec:	4620      	mov	r0, r4
   bc1ee:	4629      	mov	r1, r5
   bc1f0:	f000 fd74 	bl	bccdc <__aeabi_dsub>
   bc1f4:	4602      	mov	r2, r0
   bc1f6:	460b      	mov	r3, r1
   bc1f8:	4640      	mov	r0, r8
   bc1fa:	4649      	mov	r1, r9
   bc1fc:	f000 fd6e 	bl	bccdc <__aeabi_dsub>
   bc200:	a33b      	add	r3, pc, #236	; (adr r3, bc2f0 <__ieee754_pow+0x580>)
   bc202:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc206:	f000 ff21 	bl	bd04c <__aeabi_dmul>
   bc20a:	4602      	mov	r2, r0
   bc20c:	460b      	mov	r3, r1
   bc20e:	4620      	mov	r0, r4
   bc210:	4629      	mov	r1, r5
   bc212:	4614      	mov	r4, r2
   bc214:	461d      	mov	r5, r3
   bc216:	a338      	add	r3, pc, #224	; (adr r3, bc2f8 <__ieee754_pow+0x588>)
   bc218:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc21c:	f000 ff16 	bl	bd04c <__aeabi_dmul>
   bc220:	4602      	mov	r2, r0
   bc222:	460b      	mov	r3, r1
   bc224:	4620      	mov	r0, r4
   bc226:	4629      	mov	r1, r5
   bc228:	f000 fd5a 	bl	bcce0 <__adddf3>
   bc22c:	ec53 2b1d 	vmov	r2, r3, d13
   bc230:	f000 fd56 	bl	bcce0 <__adddf3>
   bc234:	4680      	mov	r8, r0
   bc236:	9805      	ldr	r0, [sp, #20]
   bc238:	4689      	mov	r9, r1
   bc23a:	f000 fe9d 	bl	bcf78 <__aeabi_i2d>
   bc23e:	4642      	mov	r2, r8
   bc240:	4682      	mov	sl, r0
   bc242:	468b      	mov	fp, r1
   bc244:	464b      	mov	r3, r9
   bc246:	ec51 0b19 	vmov	r0, r1, d9
   bc24a:	f000 fd49 	bl	bcce0 <__adddf3>
   bc24e:	ec53 2b1c 	vmov	r2, r3, d12
   bc252:	f000 fd45 	bl	bcce0 <__adddf3>
   bc256:	4652      	mov	r2, sl
   bc258:	465b      	mov	r3, fp
   bc25a:	f000 fd41 	bl	bcce0 <__adddf3>
   bc25e:	4652      	mov	r2, sl
   bc260:	465b      	mov	r3, fp
   bc262:	2000      	movs	r0, #0
   bc264:	4604      	mov	r4, r0
   bc266:	460d      	mov	r5, r1
   bc268:	f000 fd38 	bl	bccdc <__aeabi_dsub>
   bc26c:	ec53 2b1c 	vmov	r2, r3, d12
   bc270:	f000 fd34 	bl	bccdc <__aeabi_dsub>
   bc274:	ec53 2b19 	vmov	r2, r3, d9
   bc278:	f000 fd30 	bl	bccdc <__aeabi_dsub>
   bc27c:	4602      	mov	r2, r0
   bc27e:	460b      	mov	r3, r1
   bc280:	4640      	mov	r0, r8
   bc282:	4649      	mov	r1, r9
   bc284:	f000 fd2a 	bl	bccdc <__aeabi_dsub>
   bc288:	9b00      	ldr	r3, [sp, #0]
   bc28a:	9a04      	ldr	r2, [sp, #16]
   bc28c:	3b01      	subs	r3, #1
   bc28e:	4313      	orrs	r3, r2
   bc290:	4682      	mov	sl, r0
   bc292:	468b      	mov	fp, r1
   bc294:	f040 81b6 	bne.w	bc604 <__ieee754_pow+0x894>
   bc298:	ed9f 7b19 	vldr	d7, [pc, #100]	; bc300 <__ieee754_pow+0x590>
   bc29c:	eeb0 8a47 	vmov.f32	s16, s14
   bc2a0:	eef0 8a67 	vmov.f32	s17, s15
   bc2a4:	e03c      	b.n	bc320 <__ieee754_pow+0x5b0>
   bc2a6:	bf00      	nop
   bc2a8:	00000000 	.word	0x00000000
   bc2ac:	3ff00000 	.word	0x3ff00000
	...
   bc2b8:	4a454eef 	.word	0x4a454eef
   bc2bc:	3fca7e28 	.word	0x3fca7e28
   bc2c0:	93c9db65 	.word	0x93c9db65
   bc2c4:	3fcd864a 	.word	0x3fcd864a
   bc2c8:	a91d4101 	.word	0xa91d4101
   bc2cc:	3fd17460 	.word	0x3fd17460
   bc2d0:	518f264d 	.word	0x518f264d
   bc2d4:	3fd55555 	.word	0x3fd55555
   bc2d8:	db6fabff 	.word	0xdb6fabff
   bc2dc:	3fdb6db6 	.word	0x3fdb6db6
   bc2e0:	33333303 	.word	0x33333303
   bc2e4:	3fe33333 	.word	0x3fe33333
   bc2e8:	e0000000 	.word	0xe0000000
   bc2ec:	3feec709 	.word	0x3feec709
   bc2f0:	dc3a03fd 	.word	0xdc3a03fd
   bc2f4:	3feec709 	.word	0x3feec709
   bc2f8:	145b01f5 	.word	0x145b01f5
   bc2fc:	be3e2fe0 	.word	0xbe3e2fe0
   bc300:	00000000 	.word	0x00000000
   bc304:	bff00000 	.word	0xbff00000
   bc308:	7ff00000 	.word	0x7ff00000
   bc30c:	43400000 	.word	0x43400000
   bc310:	0003988e 	.word	0x0003988e
   bc314:	000bb679 	.word	0x000bb679
   bc318:	3ff00000 	.word	0x3ff00000
   bc31c:	40080000 	.word	0x40080000
   bc320:	2300      	movs	r3, #0
   bc322:	e9cd 6700 	strd	r6, r7, [sp]
   bc326:	9300      	str	r3, [sp, #0]
   bc328:	e9dd 8900 	ldrd	r8, r9, [sp]
   bc32c:	4630      	mov	r0, r6
   bc32e:	4642      	mov	r2, r8
   bc330:	464b      	mov	r3, r9
   bc332:	4639      	mov	r1, r7
   bc334:	f000 fcd2 	bl	bccdc <__aeabi_dsub>
   bc338:	4622      	mov	r2, r4
   bc33a:	462b      	mov	r3, r5
   bc33c:	f000 fe86 	bl	bd04c <__aeabi_dmul>
   bc340:	4632      	mov	r2, r6
   bc342:	463b      	mov	r3, r7
   bc344:	4606      	mov	r6, r0
   bc346:	460f      	mov	r7, r1
   bc348:	4650      	mov	r0, sl
   bc34a:	4659      	mov	r1, fp
   bc34c:	f000 fe7e 	bl	bd04c <__aeabi_dmul>
   bc350:	4602      	mov	r2, r0
   bc352:	460b      	mov	r3, r1
   bc354:	4630      	mov	r0, r6
   bc356:	4639      	mov	r1, r7
   bc358:	f000 fcc2 	bl	bcce0 <__adddf3>
   bc35c:	4642      	mov	r2, r8
   bc35e:	464b      	mov	r3, r9
   bc360:	4606      	mov	r6, r0
   bc362:	460f      	mov	r7, r1
   bc364:	4620      	mov	r0, r4
   bc366:	4629      	mov	r1, r5
   bc368:	f000 fe70 	bl	bd04c <__aeabi_dmul>
   bc36c:	4604      	mov	r4, r0
   bc36e:	460d      	mov	r5, r1
   bc370:	462b      	mov	r3, r5
   bc372:	4630      	mov	r0, r6
   bc374:	4639      	mov	r1, r7
   bc376:	4622      	mov	r2, r4
   bc378:	f000 fcb2 	bl	bcce0 <__adddf3>
   bc37c:	4bc2      	ldr	r3, [pc, #776]	; (bc688 <__ieee754_pow+0x918>)
   bc37e:	4299      	cmp	r1, r3
   bc380:	4680      	mov	r8, r0
   bc382:	4689      	mov	r9, r1
   bc384:	468a      	mov	sl, r1
   bc386:	f340 8118 	ble.w	bc5ba <__ieee754_pow+0x84a>
   bc38a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   bc38e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   bc392:	4303      	orrs	r3, r0
   bc394:	f040 8207 	bne.w	bc7a6 <__ieee754_pow+0xa36>
   bc398:	a3a3      	add	r3, pc, #652	; (adr r3, bc628 <__ieee754_pow+0x8b8>)
   bc39a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc39e:	4630      	mov	r0, r6
   bc3a0:	4639      	mov	r1, r7
   bc3a2:	f000 fc9d 	bl	bcce0 <__adddf3>
   bc3a6:	4602      	mov	r2, r0
   bc3a8:	460b      	mov	r3, r1
   bc3aa:	4640      	mov	r0, r8
   bc3ac:	4649      	mov	r1, r9
   bc3ae:	4690      	mov	r8, r2
   bc3b0:	4699      	mov	r9, r3
   bc3b2:	4622      	mov	r2, r4
   bc3b4:	462b      	mov	r3, r5
   bc3b6:	f000 fc91 	bl	bccdc <__aeabi_dsub>
   bc3ba:	4602      	mov	r2, r0
   bc3bc:	460b      	mov	r3, r1
   bc3be:	4640      	mov	r0, r8
   bc3c0:	4649      	mov	r1, r9
   bc3c2:	f001 f8d3 	bl	bd56c <__aeabi_dcmpgt>
   bc3c6:	2800      	cmp	r0, #0
   bc3c8:	f040 81ed 	bne.w	bc7a6 <__ieee754_pow+0xa36>
   bc3cc:	f3ca 530a 	ubfx	r3, sl, #20, #11
   bc3d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   bc3d4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   bc3d8:	fa42 f303 	asr.w	r3, r2, r3
   bc3dc:	4453      	add	r3, sl
   bc3de:	49ab      	ldr	r1, [pc, #684]	; (bc68c <__ieee754_pow+0x91c>)
   bc3e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
   bc3e4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   bc3e8:	fa41 fc02 	asr.w	ip, r1, r2
   bc3ec:	f3c3 0113 	ubfx	r1, r3, #0, #20
   bc3f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc3f4:	f1c2 0214 	rsb	r2, r2, #20
   bc3f8:	fa41 f202 	asr.w	r2, r1, r2
   bc3fc:	2000      	movs	r0, #0
   bc3fe:	ea23 010c 	bic.w	r1, r3, ip
   bc402:	f1ba 0f00 	cmp.w	sl, #0
   bc406:	9200      	str	r2, [sp, #0]
   bc408:	460b      	mov	r3, r1
   bc40a:	4602      	mov	r2, r0
   bc40c:	da02      	bge.n	bc414 <__ieee754_pow+0x6a4>
   bc40e:	9900      	ldr	r1, [sp, #0]
   bc410:	4249      	negs	r1, r1
   bc412:	9100      	str	r1, [sp, #0]
   bc414:	4620      	mov	r0, r4
   bc416:	4629      	mov	r1, r5
   bc418:	f000 fc60 	bl	bccdc <__aeabi_dsub>
   bc41c:	9b00      	ldr	r3, [sp, #0]
   bc41e:	051b      	lsls	r3, r3, #20
   bc420:	9302      	str	r3, [sp, #8]
   bc422:	4602      	mov	r2, r0
   bc424:	460b      	mov	r3, r1
   bc426:	4604      	mov	r4, r0
   bc428:	460d      	mov	r5, r1
   bc42a:	4630      	mov	r0, r6
   bc42c:	4639      	mov	r1, r7
   bc42e:	f000 fc57 	bl	bcce0 <__adddf3>
   bc432:	4689      	mov	r9, r1
   bc434:	f04f 0800 	mov.w	r8, #0
   bc438:	a37d      	add	r3, pc, #500	; (adr r3, bc630 <__ieee754_pow+0x8c0>)
   bc43a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc43e:	4640      	mov	r0, r8
   bc440:	4649      	mov	r1, r9
   bc442:	f000 fe03 	bl	bd04c <__aeabi_dmul>
   bc446:	4622      	mov	r2, r4
   bc448:	462b      	mov	r3, r5
   bc44a:	4682      	mov	sl, r0
   bc44c:	468b      	mov	fp, r1
   bc44e:	4640      	mov	r0, r8
   bc450:	4649      	mov	r1, r9
   bc452:	f000 fc43 	bl	bccdc <__aeabi_dsub>
   bc456:	4602      	mov	r2, r0
   bc458:	460b      	mov	r3, r1
   bc45a:	4630      	mov	r0, r6
   bc45c:	4639      	mov	r1, r7
   bc45e:	f000 fc3d 	bl	bccdc <__aeabi_dsub>
   bc462:	a375      	add	r3, pc, #468	; (adr r3, bc638 <__ieee754_pow+0x8c8>)
   bc464:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc468:	f000 fdf0 	bl	bd04c <__aeabi_dmul>
   bc46c:	a374      	add	r3, pc, #464	; (adr r3, bc640 <__ieee754_pow+0x8d0>)
   bc46e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc472:	4604      	mov	r4, r0
   bc474:	460d      	mov	r5, r1
   bc476:	4640      	mov	r0, r8
   bc478:	4649      	mov	r1, r9
   bc47a:	f000 fde7 	bl	bd04c <__aeabi_dmul>
   bc47e:	4602      	mov	r2, r0
   bc480:	460b      	mov	r3, r1
   bc482:	4620      	mov	r0, r4
   bc484:	4629      	mov	r1, r5
   bc486:	f000 fc2b 	bl	bcce0 <__adddf3>
   bc48a:	4606      	mov	r6, r0
   bc48c:	460f      	mov	r7, r1
   bc48e:	4632      	mov	r2, r6
   bc490:	463b      	mov	r3, r7
   bc492:	4650      	mov	r0, sl
   bc494:	4659      	mov	r1, fp
   bc496:	f000 fc23 	bl	bcce0 <__adddf3>
   bc49a:	4652      	mov	r2, sl
   bc49c:	465b      	mov	r3, fp
   bc49e:	4604      	mov	r4, r0
   bc4a0:	460d      	mov	r5, r1
   bc4a2:	f000 fc1b 	bl	bccdc <__aeabi_dsub>
   bc4a6:	4602      	mov	r2, r0
   bc4a8:	460b      	mov	r3, r1
   bc4aa:	4630      	mov	r0, r6
   bc4ac:	4639      	mov	r1, r7
   bc4ae:	f000 fc15 	bl	bccdc <__aeabi_dsub>
   bc4b2:	4622      	mov	r2, r4
   bc4b4:	4680      	mov	r8, r0
   bc4b6:	4689      	mov	r9, r1
   bc4b8:	462b      	mov	r3, r5
   bc4ba:	4620      	mov	r0, r4
   bc4bc:	4629      	mov	r1, r5
   bc4be:	f000 fdc5 	bl	bd04c <__aeabi_dmul>
   bc4c2:	a361      	add	r3, pc, #388	; (adr r3, bc648 <__ieee754_pow+0x8d8>)
   bc4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc4c8:	4606      	mov	r6, r0
   bc4ca:	460f      	mov	r7, r1
   bc4cc:	f000 fdbe 	bl	bd04c <__aeabi_dmul>
   bc4d0:	a35f      	add	r3, pc, #380	; (adr r3, bc650 <__ieee754_pow+0x8e0>)
   bc4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc4d6:	f000 fc01 	bl	bccdc <__aeabi_dsub>
   bc4da:	4632      	mov	r2, r6
   bc4dc:	463b      	mov	r3, r7
   bc4de:	f000 fdb5 	bl	bd04c <__aeabi_dmul>
   bc4e2:	a35d      	add	r3, pc, #372	; (adr r3, bc658 <__ieee754_pow+0x8e8>)
   bc4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc4e8:	f000 fbfa 	bl	bcce0 <__adddf3>
   bc4ec:	4632      	mov	r2, r6
   bc4ee:	463b      	mov	r3, r7
   bc4f0:	f000 fdac 	bl	bd04c <__aeabi_dmul>
   bc4f4:	a35a      	add	r3, pc, #360	; (adr r3, bc660 <__ieee754_pow+0x8f0>)
   bc4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc4fa:	f000 fbef 	bl	bccdc <__aeabi_dsub>
   bc4fe:	4632      	mov	r2, r6
   bc500:	463b      	mov	r3, r7
   bc502:	f000 fda3 	bl	bd04c <__aeabi_dmul>
   bc506:	a358      	add	r3, pc, #352	; (adr r3, bc668 <__ieee754_pow+0x8f8>)
   bc508:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc50c:	f000 fbe8 	bl	bcce0 <__adddf3>
   bc510:	4632      	mov	r2, r6
   bc512:	463b      	mov	r3, r7
   bc514:	f000 fd9a 	bl	bd04c <__aeabi_dmul>
   bc518:	4602      	mov	r2, r0
   bc51a:	460b      	mov	r3, r1
   bc51c:	4620      	mov	r0, r4
   bc51e:	4629      	mov	r1, r5
   bc520:	f000 fbdc 	bl	bccdc <__aeabi_dsub>
   bc524:	4606      	mov	r6, r0
   bc526:	460f      	mov	r7, r1
   bc528:	4632      	mov	r2, r6
   bc52a:	463b      	mov	r3, r7
   bc52c:	4620      	mov	r0, r4
   bc52e:	4629      	mov	r1, r5
   bc530:	f000 fd8c 	bl	bd04c <__aeabi_dmul>
   bc534:	4602      	mov	r2, r0
   bc536:	460b      	mov	r3, r1
   bc538:	4630      	mov	r0, r6
   bc53a:	4639      	mov	r1, r7
   bc53c:	4616      	mov	r6, r2
   bc53e:	461f      	mov	r7, r3
   bc540:	2200      	movs	r2, #0
   bc542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc546:	f000 fbc9 	bl	bccdc <__aeabi_dsub>
   bc54a:	4602      	mov	r2, r0
   bc54c:	460b      	mov	r3, r1
   bc54e:	4630      	mov	r0, r6
   bc550:	4639      	mov	r1, r7
   bc552:	f000 fea5 	bl	bd2a0 <__aeabi_ddiv>
   bc556:	4642      	mov	r2, r8
   bc558:	4606      	mov	r6, r0
   bc55a:	460f      	mov	r7, r1
   bc55c:	464b      	mov	r3, r9
   bc55e:	4620      	mov	r0, r4
   bc560:	4629      	mov	r1, r5
   bc562:	f000 fd73 	bl	bd04c <__aeabi_dmul>
   bc566:	4642      	mov	r2, r8
   bc568:	464b      	mov	r3, r9
   bc56a:	f000 fbb9 	bl	bcce0 <__adddf3>
   bc56e:	4602      	mov	r2, r0
   bc570:	460b      	mov	r3, r1
   bc572:	4630      	mov	r0, r6
   bc574:	4639      	mov	r1, r7
   bc576:	f000 fbb1 	bl	bccdc <__aeabi_dsub>
   bc57a:	4622      	mov	r2, r4
   bc57c:	462b      	mov	r3, r5
   bc57e:	f000 fbad 	bl	bccdc <__aeabi_dsub>
   bc582:	4602      	mov	r2, r0
   bc584:	460b      	mov	r3, r1
   bc586:	2000      	movs	r0, #0
   bc588:	4941      	ldr	r1, [pc, #260]	; (bc690 <__ieee754_pow+0x920>)
   bc58a:	f000 fba7 	bl	bccdc <__aeabi_dsub>
   bc58e:	9a02      	ldr	r2, [sp, #8]
   bc590:	460b      	mov	r3, r1
   bc592:	4413      	add	r3, r2
   bc594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   bc598:	f2c0 8143 	blt.w	bc822 <__ieee754_pow+0xab2>
   bc59c:	4619      	mov	r1, r3
   bc59e:	ec53 2b18 	vmov	r2, r3, d8
   bc5a2:	f000 fd53 	bl	bd04c <__aeabi_dmul>
   bc5a6:	ec41 0b10 	vmov	d0, r0, r1
   bc5aa:	e42d      	b.n	bbe08 <__ieee754_pow+0x98>
   bc5ac:	f1bb 0f00 	cmp.w	fp, #0
   bc5b0:	f6ff aca0 	blt.w	bbef4 <__ieee754_pow+0x184>
   bc5b4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; bc670 <__ieee754_pow+0x900>
   bc5b8:	e426      	b.n	bbe08 <__ieee754_pow+0x98>
   bc5ba:	f8df c0dc 	ldr.w	ip, [pc, #220]	; bc698 <__ieee754_pow+0x928>
   bc5be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bc5c2:	4563      	cmp	r3, ip
   bc5c4:	f340 80e7 	ble.w	bc796 <__ieee754_pow+0xa26>
   bc5c8:	4b32      	ldr	r3, [pc, #200]	; (bc694 <__ieee754_pow+0x924>)
   bc5ca:	440b      	add	r3, r1
   bc5cc:	4303      	orrs	r3, r0
   bc5ce:	d10a      	bne.n	bc5e6 <__ieee754_pow+0x876>
   bc5d0:	4622      	mov	r2, r4
   bc5d2:	462b      	mov	r3, r5
   bc5d4:	f000 fb82 	bl	bccdc <__aeabi_dsub>
   bc5d8:	4632      	mov	r2, r6
   bc5da:	463b      	mov	r3, r7
   bc5dc:	f000 ffbc 	bl	bd558 <__aeabi_dcmpge>
   bc5e0:	2800      	cmp	r0, #0
   bc5e2:	f43f aef3 	beq.w	bc3cc <__ieee754_pow+0x65c>
   bc5e6:	a324      	add	r3, pc, #144	; (adr r3, bc678 <__ieee754_pow+0x908>)
   bc5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc5ec:	ec51 0b18 	vmov	r0, r1, d8
   bc5f0:	f000 fd2c 	bl	bd04c <__aeabi_dmul>
   bc5f4:	a320      	add	r3, pc, #128	; (adr r3, bc678 <__ieee754_pow+0x908>)
   bc5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc5fa:	f000 fd27 	bl	bd04c <__aeabi_dmul>
   bc5fe:	ec41 0b10 	vmov	d0, r0, r1
   bc602:	e401      	b.n	bbe08 <__ieee754_pow+0x98>
   bc604:	ed9f 7b1e 	vldr	d7, [pc, #120]	; bc680 <__ieee754_pow+0x910>
   bc608:	eeb0 8a47 	vmov.f32	s16, s14
   bc60c:	eef0 8a67 	vmov.f32	s17, s15
   bc610:	e686      	b.n	bc320 <__ieee754_pow+0x5b0>
   bc612:	f1bb 0f00 	cmp.w	fp, #0
   bc616:	dacd      	bge.n	bc5b4 <__ieee754_pow+0x844>
   bc618:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   bc61c:	ee00 6a10 	vmov	s0, r6
   bc620:	ee00 3a90 	vmov	s1, r3
   bc624:	f7ff bbf0 	b.w	bbe08 <__ieee754_pow+0x98>
   bc628:	652b82fe 	.word	0x652b82fe
   bc62c:	3c971547 	.word	0x3c971547
   bc630:	00000000 	.word	0x00000000
   bc634:	3fe62e43 	.word	0x3fe62e43
   bc638:	fefa39ef 	.word	0xfefa39ef
   bc63c:	3fe62e42 	.word	0x3fe62e42
   bc640:	0ca86c39 	.word	0x0ca86c39
   bc644:	be205c61 	.word	0xbe205c61
   bc648:	72bea4d0 	.word	0x72bea4d0
   bc64c:	3e663769 	.word	0x3e663769
   bc650:	c5d26bf1 	.word	0xc5d26bf1
   bc654:	3ebbbd41 	.word	0x3ebbbd41
   bc658:	af25de2c 	.word	0xaf25de2c
   bc65c:	3f11566a 	.word	0x3f11566a
   bc660:	16bebd93 	.word	0x16bebd93
   bc664:	3f66c16c 	.word	0x3f66c16c
   bc668:	5555553e 	.word	0x5555553e
   bc66c:	3fc55555 	.word	0x3fc55555
	...
   bc678:	c2f8f359 	.word	0xc2f8f359
   bc67c:	01a56e1f 	.word	0x01a56e1f
   bc680:	00000000 	.word	0x00000000
   bc684:	3ff00000 	.word	0x3ff00000
   bc688:	408fffff 	.word	0x408fffff
   bc68c:	000fffff 	.word	0x000fffff
   bc690:	3ff00000 	.word	0x3ff00000
   bc694:	3f6f3400 	.word	0x3f6f3400
   bc698:	4090cbff 	.word	0x4090cbff
   bc69c:	4598      	cmp	r8, r3
   bc69e:	db85      	blt.n	bc5ac <__ieee754_pow+0x83c>
   bc6a0:	4b7d      	ldr	r3, [pc, #500]	; (bc898 <__ieee754_pow+0xb28>)
   bc6a2:	4598      	cmp	r8, r3
   bc6a4:	f73f ac22 	bgt.w	bbeec <__ieee754_pow+0x17c>
   bc6a8:	ec51 0b10 	vmov	r0, r1, d0
   bc6ac:	4b7a      	ldr	r3, [pc, #488]	; (bc898 <__ieee754_pow+0xb28>)
   bc6ae:	2200      	movs	r2, #0
   bc6b0:	f000 fb14 	bl	bccdc <__aeabi_dsub>
   bc6b4:	a368      	add	r3, pc, #416	; (adr r3, bc858 <__ieee754_pow+0xae8>)
   bc6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc6ba:	4604      	mov	r4, r0
   bc6bc:	460d      	mov	r5, r1
   bc6be:	f000 fcc5 	bl	bd04c <__aeabi_dmul>
   bc6c2:	a367      	add	r3, pc, #412	; (adr r3, bc860 <__ieee754_pow+0xaf0>)
   bc6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc6c8:	4682      	mov	sl, r0
   bc6ca:	468b      	mov	fp, r1
   bc6cc:	4620      	mov	r0, r4
   bc6ce:	4629      	mov	r1, r5
   bc6d0:	f000 fcbc 	bl	bd04c <__aeabi_dmul>
   bc6d4:	4b71      	ldr	r3, [pc, #452]	; (bc89c <__ieee754_pow+0xb2c>)
   bc6d6:	ec41 0b18 	vmov	d8, r0, r1
   bc6da:	2200      	movs	r2, #0
   bc6dc:	4620      	mov	r0, r4
   bc6de:	4629      	mov	r1, r5
   bc6e0:	f000 fcb4 	bl	bd04c <__aeabi_dmul>
   bc6e4:	4602      	mov	r2, r0
   bc6e6:	460b      	mov	r3, r1
   bc6e8:	a15f      	add	r1, pc, #380	; (adr r1, bc868 <__ieee754_pow+0xaf8>)
   bc6ea:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc6ee:	f000 faf5 	bl	bccdc <__aeabi_dsub>
   bc6f2:	4622      	mov	r2, r4
   bc6f4:	462b      	mov	r3, r5
   bc6f6:	f000 fca9 	bl	bd04c <__aeabi_dmul>
   bc6fa:	4602      	mov	r2, r0
   bc6fc:	460b      	mov	r3, r1
   bc6fe:	2000      	movs	r0, #0
   bc700:	4967      	ldr	r1, [pc, #412]	; (bc8a0 <__ieee754_pow+0xb30>)
   bc702:	f000 faeb 	bl	bccdc <__aeabi_dsub>
   bc706:	4622      	mov	r2, r4
   bc708:	4680      	mov	r8, r0
   bc70a:	4689      	mov	r9, r1
   bc70c:	462b      	mov	r3, r5
   bc70e:	4620      	mov	r0, r4
   bc710:	4629      	mov	r1, r5
   bc712:	f000 fc9b 	bl	bd04c <__aeabi_dmul>
   bc716:	4602      	mov	r2, r0
   bc718:	460b      	mov	r3, r1
   bc71a:	4640      	mov	r0, r8
   bc71c:	4649      	mov	r1, r9
   bc71e:	f000 fc95 	bl	bd04c <__aeabi_dmul>
   bc722:	a353      	add	r3, pc, #332	; (adr r3, bc870 <__ieee754_pow+0xb00>)
   bc724:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc728:	f000 fc90 	bl	bd04c <__aeabi_dmul>
   bc72c:	4602      	mov	r2, r0
   bc72e:	460b      	mov	r3, r1
   bc730:	ec51 0b18 	vmov	r0, r1, d8
   bc734:	f000 fad2 	bl	bccdc <__aeabi_dsub>
   bc738:	4680      	mov	r8, r0
   bc73a:	4689      	mov	r9, r1
   bc73c:	4642      	mov	r2, r8
   bc73e:	464b      	mov	r3, r9
   bc740:	4650      	mov	r0, sl
   bc742:	4659      	mov	r1, fp
   bc744:	f000 facc 	bl	bcce0 <__adddf3>
   bc748:	2000      	movs	r0, #0
   bc74a:	4652      	mov	r2, sl
   bc74c:	465b      	mov	r3, fp
   bc74e:	4604      	mov	r4, r0
   bc750:	460d      	mov	r5, r1
   bc752:	e591      	b.n	bc278 <__ieee754_pow+0x508>
   bc754:	4622      	mov	r2, r4
   bc756:	462b      	mov	r3, r5
   bc758:	4620      	mov	r0, r4
   bc75a:	4629      	mov	r1, r5
   bc75c:	f000 fc76 	bl	bd04c <__aeabi_dmul>
   bc760:	ec41 0b10 	vmov	d0, r0, r1
   bc764:	f7ff bb50 	b.w	bbe08 <__ieee754_pow+0x98>
   bc768:	494b      	ldr	r1, [pc, #300]	; (bc898 <__ieee754_pow+0xb28>)
   bc76a:	2000      	movs	r0, #0
   bc76c:	4622      	mov	r2, r4
   bc76e:	462b      	mov	r3, r5
   bc770:	f000 fd96 	bl	bd2a0 <__aeabi_ddiv>
   bc774:	ec41 0b10 	vmov	d0, r0, r1
   bc778:	f7ff bb46 	b.w	bbe08 <__ieee754_pow+0x98>
   bc77c:	2b00      	cmp	r3, #0
   bc77e:	d144      	bne.n	bc80a <__ieee754_pow+0xa9a>
   bc780:	f1c1 0114 	rsb	r1, r1, #20
   bc784:	fa4a f001 	asr.w	r0, sl, r1
   bc788:	fa00 f101 	lsl.w	r1, r0, r1
   bc78c:	4551      	cmp	r1, sl
   bc78e:	d05a      	beq.n	bc846 <__ieee754_pow+0xad6>
   bc790:	9300      	str	r3, [sp, #0]
   bc792:	f7ff bb17 	b.w	bbdc4 <__ieee754_pow+0x54>
   bc796:	4a42      	ldr	r2, [pc, #264]	; (bc8a0 <__ieee754_pow+0xb30>)
   bc798:	4293      	cmp	r3, r2
   bc79a:	dc5b      	bgt.n	bc854 <__ieee754_pow+0xae4>
   bc79c:	e9dd 1200 	ldrd	r1, r2, [sp]
   bc7a0:	9102      	str	r1, [sp, #8]
   bc7a2:	9100      	str	r1, [sp, #0]
   bc7a4:	e646      	b.n	bc434 <__ieee754_pow+0x6c4>
   bc7a6:	a334      	add	r3, pc, #208	; (adr r3, bc878 <__ieee754_pow+0xb08>)
   bc7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7ac:	ec51 0b18 	vmov	r0, r1, d8
   bc7b0:	f000 fc4c 	bl	bd04c <__aeabi_dmul>
   bc7b4:	a330      	add	r3, pc, #192	; (adr r3, bc878 <__ieee754_pow+0xb08>)
   bc7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc7ba:	f000 fc47 	bl	bd04c <__aeabi_dmul>
   bc7be:	ec41 0b10 	vmov	d0, r0, r1
   bc7c2:	f7ff bb21 	b.w	bbe08 <__ieee754_pow+0x98>
   bc7c6:	9b00      	ldr	r3, [sp, #0]
   bc7c8:	2b01      	cmp	r3, #1
   bc7ca:	f47f ab1d 	bne.w	bbe08 <__ieee754_pow+0x98>
   bc7ce:	ee10 1a90 	vmov	r1, s1
   bc7d2:	ee10 2a10 	vmov	r2, s0
   bc7d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc7da:	ec43 2b10 	vmov	d0, r2, r3
   bc7de:	f7ff bb13 	b.w	bbe08 <__ieee754_pow+0x98>
   bc7e2:	ed9f 7b27 	vldr	d7, [pc, #156]	; bc880 <__ieee754_pow+0xb10>
   bc7e6:	eeb0 ca47 	vmov.f32	s24, s14
   bc7ea:	eef0 ca67 	vmov.f32	s25, s15
   bc7ee:	ed9f 7b26 	vldr	d7, [pc, #152]	; bc888 <__ieee754_pow+0xb18>
   bc7f2:	eeb0 da47 	vmov.f32	s26, s14
   bc7f6:	eef0 da67 	vmov.f32	s27, s15
   bc7fa:	ed9f 7b25 	vldr	d7, [pc, #148]	; bc890 <__ieee754_pow+0xb20>
   bc7fe:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   bc802:	ec53 2b17 	vmov	r2, r3, d7
   bc806:	f7ff bbeb 	b.w	bbfe0 <__ieee754_pow+0x270>
   bc80a:	ec45 4b10 	vmov	d0, r4, r5
   bc80e:	9200      	str	r2, [sp, #0]
   bc810:	f000 f914 	bl	bca3c <fabs>
   bc814:	9a00      	ldr	r2, [sp, #0]
   bc816:	2a00      	cmp	r2, #0
   bc818:	f47f ab92 	bne.w	bbf40 <__ieee754_pow+0x1d0>
   bc81c:	9200      	str	r2, [sp, #0]
   bc81e:	f7ff bb26 	b.w	bbe6e <__ieee754_pow+0xfe>
   bc822:	ec41 0b10 	vmov	d0, r0, r1
   bc826:	9800      	ldr	r0, [sp, #0]
   bc828:	f000 f9c2 	bl	bcbb0 <scalbn>
   bc82c:	ec51 0b10 	vmov	r0, r1, d0
   bc830:	e6b5      	b.n	bc59e <__ieee754_pow+0x82e>
   bc832:	f000 0001 	and.w	r0, r0, #1
   bc836:	f1c0 0102 	rsb	r1, r0, #2
   bc83a:	9100      	str	r1, [sp, #0]
   bc83c:	2b00      	cmp	r3, #0
   bc83e:	f43f aac1 	beq.w	bbdc4 <__ieee754_pow+0x54>
   bc842:	f7ff bb0d 	b.w	bbe60 <__ieee754_pow+0xf0>
   bc846:	f000 0001 	and.w	r0, r0, #1
   bc84a:	f1c0 0302 	rsb	r3, r0, #2
   bc84e:	9300      	str	r3, [sp, #0]
   bc850:	f7ff bab8 	b.w	bbdc4 <__ieee754_pow+0x54>
   bc854:	151b      	asrs	r3, r3, #20
   bc856:	e5bb      	b.n	bc3d0 <__ieee754_pow+0x660>
   bc858:	60000000 	.word	0x60000000
   bc85c:	3ff71547 	.word	0x3ff71547
   bc860:	f85ddf44 	.word	0xf85ddf44
   bc864:	3e54ae0b 	.word	0x3e54ae0b
   bc868:	55555555 	.word	0x55555555
   bc86c:	3fd55555 	.word	0x3fd55555
   bc870:	652b82fe 	.word	0x652b82fe
   bc874:	3ff71547 	.word	0x3ff71547
   bc878:	8800759c 	.word	0x8800759c
   bc87c:	7e37e43c 	.word	0x7e37e43c
   bc880:	40000000 	.word	0x40000000
   bc884:	3fe2b803 	.word	0x3fe2b803
   bc888:	43cfd006 	.word	0x43cfd006
   bc88c:	3e4cfdeb 	.word	0x3e4cfdeb
   bc890:	00000000 	.word	0x00000000
   bc894:	3ff80000 	.word	0x3ff80000
   bc898:	3ff00000 	.word	0x3ff00000
   bc89c:	3fd00000 	.word	0x3fd00000
   bc8a0:	3fe00000 	.word	0x3fe00000

000bc8a4 <__ieee754_sqrt>:
   bc8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc8a8:	4a63      	ldr	r2, [pc, #396]	; (bca38 <__ieee754_sqrt+0x194>)
   bc8aa:	ec55 4b10 	vmov	r4, r5, d0
   bc8ae:	43aa      	bics	r2, r5
   bc8b0:	f000 809f 	beq.w	bc9f2 <__ieee754_sqrt+0x14e>
   bc8b4:	2d00      	cmp	r5, #0
   bc8b6:	ee10 ca10 	vmov	ip, s0
   bc8ba:	462b      	mov	r3, r5
   bc8bc:	dd54      	ble.n	bc968 <__ieee754_sqrt+0xc4>
   bc8be:	1529      	asrs	r1, r5, #20
   bc8c0:	d063      	beq.n	bc98a <__ieee754_sqrt+0xe6>
   bc8c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bc8c6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bc8ca:	07c9      	lsls	r1, r1, #31
   bc8cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc8d0:	d404      	bmi.n	bc8dc <__ieee754_sqrt+0x38>
   bc8d2:	005b      	lsls	r3, r3, #1
   bc8d4:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc8d8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc8dc:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bc8e0:	2600      	movs	r6, #0
   bc8e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bc8e6:	107f      	asrs	r7, r7, #1
   bc8e8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc8ec:	f04f 0e16 	mov.w	lr, #22
   bc8f0:	4634      	mov	r4, r6
   bc8f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bc8f6:	18a1      	adds	r1, r4, r2
   bc8f8:	4299      	cmp	r1, r3
   bc8fa:	dc02      	bgt.n	bc902 <__ieee754_sqrt+0x5e>
   bc8fc:	1a5b      	subs	r3, r3, r1
   bc8fe:	188c      	adds	r4, r1, r2
   bc900:	4416      	add	r6, r2
   bc902:	005b      	lsls	r3, r3, #1
   bc904:	f1be 0e01 	subs.w	lr, lr, #1
   bc908:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc90c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc910:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc914:	d1ef      	bne.n	bc8f6 <__ieee754_sqrt+0x52>
   bc916:	4675      	mov	r5, lr
   bc918:	2020      	movs	r0, #32
   bc91a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bc91e:	e00a      	b.n	bc936 <__ieee754_sqrt+0x92>
   bc920:	d044      	beq.n	bc9ac <__ieee754_sqrt+0x108>
   bc922:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bc926:	3801      	subs	r0, #1
   bc928:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bc92c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc930:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc934:	d043      	beq.n	bc9be <__ieee754_sqrt+0x11a>
   bc936:	42a3      	cmp	r3, r4
   bc938:	eb02 010e 	add.w	r1, r2, lr
   bc93c:	ddf0      	ble.n	bc920 <__ieee754_sqrt+0x7c>
   bc93e:	2900      	cmp	r1, #0
   bc940:	eb01 0e02 	add.w	lr, r1, r2
   bc944:	db0a      	blt.n	bc95c <__ieee754_sqrt+0xb8>
   bc946:	46a0      	mov	r8, r4
   bc948:	1b1b      	subs	r3, r3, r4
   bc94a:	4561      	cmp	r1, ip
   bc94c:	bf88      	it	hi
   bc94e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bc952:	ebac 0c01 	sub.w	ip, ip, r1
   bc956:	4415      	add	r5, r2
   bc958:	4644      	mov	r4, r8
   bc95a:	e7e2      	b.n	bc922 <__ieee754_sqrt+0x7e>
   bc95c:	f1be 0f00 	cmp.w	lr, #0
   bc960:	dbf1      	blt.n	bc946 <__ieee754_sqrt+0xa2>
   bc962:	f104 0801 	add.w	r8, r4, #1
   bc966:	e7ef      	b.n	bc948 <__ieee754_sqrt+0xa4>
   bc968:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bc96c:	4322      	orrs	r2, r4
   bc96e:	d038      	beq.n	bc9e2 <__ieee754_sqrt+0x13e>
   bc970:	2d00      	cmp	r5, #0
   bc972:	d14e      	bne.n	bca12 <__ieee754_sqrt+0x16e>
   bc974:	4629      	mov	r1, r5
   bc976:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bc97a:	3915      	subs	r1, #21
   bc97c:	4613      	mov	r3, r2
   bc97e:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bc982:	2a00      	cmp	r2, #0
   bc984:	d0f7      	beq.n	bc976 <__ieee754_sqrt+0xd2>
   bc986:	02d6      	lsls	r6, r2, #11
   bc988:	d450      	bmi.n	bca2c <__ieee754_sqrt+0x188>
   bc98a:	2000      	movs	r0, #0
   bc98c:	005b      	lsls	r3, r3, #1
   bc98e:	02dd      	lsls	r5, r3, #11
   bc990:	4604      	mov	r4, r0
   bc992:	f100 0001 	add.w	r0, r0, #1
   bc996:	d5f9      	bpl.n	bc98c <__ieee754_sqrt+0xe8>
   bc998:	461a      	mov	r2, r3
   bc99a:	4663      	mov	r3, ip
   bc99c:	fa0c fc00 	lsl.w	ip, ip, r0
   bc9a0:	f1c0 0020 	rsb	r0, r0, #32
   bc9a4:	40c3      	lsrs	r3, r0
   bc9a6:	1b09      	subs	r1, r1, r4
   bc9a8:	4313      	orrs	r3, r2
   bc9aa:	e78a      	b.n	bc8c2 <__ieee754_sqrt+0x1e>
   bc9ac:	4561      	cmp	r1, ip
   bc9ae:	d8b8      	bhi.n	bc922 <__ieee754_sqrt+0x7e>
   bc9b0:	2900      	cmp	r1, #0
   bc9b2:	eb01 0e02 	add.w	lr, r1, r2
   bc9b6:	dbd1      	blt.n	bc95c <__ieee754_sqrt+0xb8>
   bc9b8:	4698      	mov	r8, r3
   bc9ba:	2300      	movs	r3, #0
   bc9bc:	e7c9      	b.n	bc952 <__ieee754_sqrt+0xae>
   bc9be:	ea53 030c 	orrs.w	r3, r3, ip
   bc9c2:	d110      	bne.n	bc9e6 <__ieee754_sqrt+0x142>
   bc9c4:	0868      	lsrs	r0, r5, #1
   bc9c6:	1071      	asrs	r1, r6, #1
   bc9c8:	07f3      	lsls	r3, r6, #31
   bc9ca:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bc9ce:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bc9d2:	bf48      	it	mi
   bc9d4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bc9d8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bc9dc:	4602      	mov	r2, r0
   bc9de:	ec43 2b10 	vmov	d0, r2, r3
   bc9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc9e6:	1c6a      	adds	r2, r5, #1
   bc9e8:	bf16      	itet	ne
   bc9ea:	1c68      	addne	r0, r5, #1
   bc9ec:	3601      	addeq	r6, #1
   bc9ee:	0840      	lsrne	r0, r0, #1
   bc9f0:	e7e9      	b.n	bc9c6 <__ieee754_sqrt+0x122>
   bc9f2:	ee10 2a10 	vmov	r2, s0
   bc9f6:	ee10 0a10 	vmov	r0, s0
   bc9fa:	462b      	mov	r3, r5
   bc9fc:	4629      	mov	r1, r5
   bc9fe:	f000 fb25 	bl	bd04c <__aeabi_dmul>
   bca02:	4622      	mov	r2, r4
   bca04:	462b      	mov	r3, r5
   bca06:	f000 f96b 	bl	bcce0 <__adddf3>
   bca0a:	ec41 0b10 	vmov	d0, r0, r1
   bca0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bca12:	ee10 2a10 	vmov	r2, s0
   bca16:	4620      	mov	r0, r4
   bca18:	4629      	mov	r1, r5
   bca1a:	f000 f95f 	bl	bccdc <__aeabi_dsub>
   bca1e:	4602      	mov	r2, r0
   bca20:	460b      	mov	r3, r1
   bca22:	f000 fc3d 	bl	bd2a0 <__aeabi_ddiv>
   bca26:	ec41 0b10 	vmov	d0, r0, r1
   bca2a:	e7da      	b.n	bc9e2 <__ieee754_sqrt+0x13e>
   bca2c:	4663      	mov	r3, ip
   bca2e:	2020      	movs	r0, #32
   bca30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bca34:	e7b6      	b.n	bc9a4 <__ieee754_sqrt+0x100>
   bca36:	bf00      	nop
   bca38:	7ff00000 	.word	0x7ff00000

000bca3c <fabs>:
   bca3c:	ec51 0b10 	vmov	r0, r1, d0
   bca40:	ee10 2a10 	vmov	r2, s0
   bca44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bca48:	ec43 2b10 	vmov	d0, r2, r3
   bca4c:	4770      	bx	lr
   bca4e:	bf00      	nop

000bca50 <finite>:
   bca50:	b082      	sub	sp, #8
   bca52:	ed8d 0b00 	vstr	d0, [sp]
   bca56:	9801      	ldr	r0, [sp, #4]
   bca58:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   bca5c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   bca60:	0fc0      	lsrs	r0, r0, #31
   bca62:	b002      	add	sp, #8
   bca64:	4770      	bx	lr
   bca66:	bf00      	nop

000bca68 <nan>:
   bca68:	ed9f 0b01 	vldr	d0, [pc, #4]	; bca70 <nan+0x8>
   bca6c:	4770      	bx	lr
   bca6e:	bf00      	nop
   bca70:	00000000 	.word	0x00000000
   bca74:	7ff80000 	.word	0x7ff80000

000bca78 <rint>:
   bca78:	b5f0      	push	{r4, r5, r6, r7, lr}
   bca7a:	ec53 2b10 	vmov	r2, r3, d0
   bca7e:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   bca82:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   bca86:	2913      	cmp	r1, #19
   bca88:	ee10 0a10 	vmov	r0, s0
   bca8c:	b083      	sub	sp, #12
   bca8e:	461c      	mov	r4, r3
   bca90:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   bca94:	dc3a      	bgt.n	bcb0c <rint+0x94>
   bca96:	2900      	cmp	r1, #0
   bca98:	db30      	blt.n	bcafc <rint+0x84>
   bca9a:	4d42      	ldr	r5, [pc, #264]	; (bcba4 <rint+0x12c>)
   bca9c:	fa45 fc01 	asr.w	ip, r5, r1
   bcaa0:	ea03 050c 	and.w	r5, r3, ip
   bcaa4:	4315      	orrs	r5, r2
   bcaa6:	d02d      	beq.n	bcb04 <rint+0x8c>
   bcaa8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   bcaac:	4318      	orrs	r0, r3
   bcaae:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   bcab2:	d00c      	beq.n	bcace <rint+0x56>
   bcab4:	ea24 0c0c 	bic.w	ip, r4, ip
   bcab8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   bcabc:	2913      	cmp	r1, #19
   bcabe:	fa44 f101 	asr.w	r1, r4, r1
   bcac2:	bf0c      	ite	eq
   bcac4:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   bcac8:	2000      	movne	r0, #0
   bcaca:	ea4c 0401 	orr.w	r4, ip, r1
   bcace:	4936      	ldr	r1, [pc, #216]	; (bcba8 <rint+0x130>)
   bcad0:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   bcad4:	4623      	mov	r3, r4
   bcad6:	e9de 4500 	ldrd	r4, r5, [lr]
   bcada:	4602      	mov	r2, r0
   bcadc:	4629      	mov	r1, r5
   bcade:	4620      	mov	r0, r4
   bcae0:	f000 f8fe 	bl	bcce0 <__adddf3>
   bcae4:	e9cd 0100 	strd	r0, r1, [sp]
   bcae8:	e9dd 0100 	ldrd	r0, r1, [sp]
   bcaec:	4622      	mov	r2, r4
   bcaee:	462b      	mov	r3, r5
   bcaf0:	f000 f8f4 	bl	bccdc <__aeabi_dsub>
   bcaf4:	ec41 0b10 	vmov	d0, r0, r1
   bcaf8:	b003      	add	sp, #12
   bcafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcafc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bcb00:	4311      	orrs	r1, r2
   bcb02:	d124      	bne.n	bcb4e <rint+0xd6>
   bcb04:	ec43 2b10 	vmov	d0, r2, r3
   bcb08:	b003      	add	sp, #12
   bcb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcb0c:	2933      	cmp	r1, #51	; 0x33
   bcb0e:	dd08      	ble.n	bcb22 <rint+0xaa>
   bcb10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bcb14:	d1f6      	bne.n	bcb04 <rint+0x8c>
   bcb16:	4619      	mov	r1, r3
   bcb18:	f000 f8e2 	bl	bcce0 <__adddf3>
   bcb1c:	ec41 0b10 	vmov	d0, r0, r1
   bcb20:	e7f2      	b.n	bcb08 <rint+0x90>
   bcb22:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bcb26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bcb2a:	fa21 f10c 	lsr.w	r1, r1, ip
   bcb2e:	420a      	tst	r2, r1
   bcb30:	d0e8      	beq.n	bcb04 <rint+0x8c>
   bcb32:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   bcb36:	ea4f 0351 	mov.w	r3, r1, lsr #1
   bcb3a:	d0c8      	beq.n	bcace <rint+0x56>
   bcb3c:	ea20 0303 	bic.w	r3, r0, r3
   bcb40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   bcb44:	fa40 fc0c 	asr.w	ip, r0, ip
   bcb48:	ea43 000c 	orr.w	r0, r3, ip
   bcb4c:	e7bf      	b.n	bcace <rint+0x56>
   bcb4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bcb52:	4318      	orrs	r0, r3
   bcb54:	4a14      	ldr	r2, [pc, #80]	; (bcba8 <rint+0x130>)
   bcb56:	4243      	negs	r3, r0
   bcb58:	4303      	orrs	r3, r0
   bcb5a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   bcb5e:	0b1b      	lsrs	r3, r3, #12
   bcb60:	0c62      	lsrs	r2, r4, #17
   bcb62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   bcb66:	0452      	lsls	r2, r2, #17
   bcb68:	ea43 0702 	orr.w	r7, r3, r2
   bcb6c:	463b      	mov	r3, r7
   bcb6e:	e9de 6700 	ldrd	r6, r7, [lr]
   bcb72:	ee10 2a10 	vmov	r2, s0
   bcb76:	4630      	mov	r0, r6
   bcb78:	4639      	mov	r1, r7
   bcb7a:	f000 f8b1 	bl	bcce0 <__adddf3>
   bcb7e:	e9cd 0100 	strd	r0, r1, [sp]
   bcb82:	4632      	mov	r2, r6
   bcb84:	463b      	mov	r3, r7
   bcb86:	e9dd 0100 	ldrd	r0, r1, [sp]
   bcb8a:	f000 f8a7 	bl	bccdc <__aeabi_dsub>
   bcb8e:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   bcb92:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bcb96:	4602      	mov	r2, r0
   bcb98:	ea41 0304 	orr.w	r3, r1, r4
   bcb9c:	ec43 2b10 	vmov	d0, r2, r3
   bcba0:	b003      	add	sp, #12
   bcba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bcba4:	000fffff 	.word	0x000fffff
   bcba8:	000bef20 	.word	0x000bef20
   bcbac:	00000000 	.word	0x00000000

000bcbb0 <scalbn>:
   bcbb0:	b538      	push	{r3, r4, r5, lr}
   bcbb2:	ec53 2b10 	vmov	r2, r3, d0
   bcbb6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bcbba:	4604      	mov	r4, r0
   bcbbc:	469c      	mov	ip, r3
   bcbbe:	bb89      	cbnz	r1, bcc24 <scalbn+0x74>
   bcbc0:	ee10 1a10 	vmov	r1, s0
   bcbc4:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bcbc8:	ea5c 0101 	orrs.w	r1, ip, r1
   bcbcc:	d029      	beq.n	bcc22 <scalbn+0x72>
   bcbce:	4619      	mov	r1, r3
   bcbd0:	2200      	movs	r2, #0
   bcbd2:	4b3d      	ldr	r3, [pc, #244]	; (bccc8 <scalbn+0x118>)
   bcbd4:	4d3d      	ldr	r5, [pc, #244]	; (bcccc <scalbn+0x11c>)
   bcbd6:	ee10 0a10 	vmov	r0, s0
   bcbda:	f000 fa37 	bl	bd04c <__aeabi_dmul>
   bcbde:	42ac      	cmp	r4, r5
   bcbe0:	4602      	mov	r2, r0
   bcbe2:	460b      	mov	r3, r1
   bcbe4:	db16      	blt.n	bcc14 <scalbn+0x64>
   bcbe6:	468c      	mov	ip, r1
   bcbe8:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bcbec:	3936      	subs	r1, #54	; 0x36
   bcbee:	4421      	add	r1, r4
   bcbf0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bcbf4:	4281      	cmp	r1, r0
   bcbf6:	dc21      	bgt.n	bcc3c <scalbn+0x8c>
   bcbf8:	2900      	cmp	r1, #0
   bcbfa:	dc47      	bgt.n	bcc8c <scalbn+0xdc>
   bcbfc:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bcc00:	da34      	bge.n	bcc6c <scalbn+0xbc>
   bcc02:	f24c 3150 	movw	r1, #50000	; 0xc350
   bcc06:	428c      	cmp	r4, r1
   bcc08:	dc18      	bgt.n	bcc3c <scalbn+0x8c>
   bcc0a:	2b00      	cmp	r3, #0
   bcc0c:	a126      	add	r1, pc, #152	; (adr r1, bcca8 <scalbn+0xf8>)
   bcc0e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc12:	db44      	blt.n	bcc9e <scalbn+0xee>
   bcc14:	a324      	add	r3, pc, #144	; (adr r3, bcca8 <scalbn+0xf8>)
   bcc16:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc1a:	f000 fa17 	bl	bd04c <__aeabi_dmul>
   bcc1e:	ec41 0b10 	vmov	d0, r0, r1
   bcc22:	bd38      	pop	{r3, r4, r5, pc}
   bcc24:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bcc28:	4281      	cmp	r1, r0
   bcc2a:	d1e0      	bne.n	bcbee <scalbn+0x3e>
   bcc2c:	ee10 0a10 	vmov	r0, s0
   bcc30:	4619      	mov	r1, r3
   bcc32:	f000 f855 	bl	bcce0 <__adddf3>
   bcc36:	ec41 0b10 	vmov	d0, r0, r1
   bcc3a:	bd38      	pop	{r3, r4, r5, pc}
   bcc3c:	2b00      	cmp	r3, #0
   bcc3e:	a11c      	add	r1, pc, #112	; (adr r1, bccb0 <scalbn+0x100>)
   bcc40:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc44:	db07      	blt.n	bcc56 <scalbn+0xa6>
   bcc46:	a31a      	add	r3, pc, #104	; (adr r3, bccb0 <scalbn+0x100>)
   bcc48:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc4c:	f000 f9fe 	bl	bd04c <__aeabi_dmul>
   bcc50:	ec41 0b10 	vmov	d0, r0, r1
   bcc54:	bd38      	pop	{r3, r4, r5, pc}
   bcc56:	a118      	add	r1, pc, #96	; (adr r1, bccb8 <scalbn+0x108>)
   bcc58:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcc5c:	a314      	add	r3, pc, #80	; (adr r3, bccb0 <scalbn+0x100>)
   bcc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcc62:	f000 f9f3 	bl	bd04c <__aeabi_dmul>
   bcc66:	ec41 0b10 	vmov	d0, r0, r1
   bcc6a:	e7f3      	b.n	bcc54 <scalbn+0xa4>
   bcc6c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bcc70:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bcc74:	3136      	adds	r1, #54	; 0x36
   bcc76:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bcc7a:	4610      	mov	r0, r2
   bcc7c:	4619      	mov	r1, r3
   bcc7e:	2200      	movs	r2, #0
   bcc80:	4b13      	ldr	r3, [pc, #76]	; (bccd0 <scalbn+0x120>)
   bcc82:	f000 f9e3 	bl	bd04c <__aeabi_dmul>
   bcc86:	ec41 0b10 	vmov	d0, r0, r1
   bcc8a:	bd38      	pop	{r3, r4, r5, pc}
   bcc8c:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bcc90:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bcc94:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bcc98:	ec43 2b10 	vmov	d0, r2, r3
   bcc9c:	bd38      	pop	{r3, r4, r5, pc}
   bcc9e:	a108      	add	r1, pc, #32	; (adr r1, bccc0 <scalbn+0x110>)
   bcca0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bcca4:	e7b6      	b.n	bcc14 <scalbn+0x64>
   bcca6:	bf00      	nop
   bcca8:	c2f8f359 	.word	0xc2f8f359
   bccac:	01a56e1f 	.word	0x01a56e1f
   bccb0:	8800759c 	.word	0x8800759c
   bccb4:	7e37e43c 	.word	0x7e37e43c
   bccb8:	8800759c 	.word	0x8800759c
   bccbc:	fe37e43c 	.word	0xfe37e43c
   bccc0:	c2f8f359 	.word	0xc2f8f359
   bccc4:	81a56e1f 	.word	0x81a56e1f
   bccc8:	43500000 	.word	0x43500000
   bcccc:	ffff3cb0 	.word	0xffff3cb0
   bccd0:	3c900000 	.word	0x3c900000

000bccd4 <__aeabi_drsub>:
   bccd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bccd8:	e002      	b.n	bcce0 <__adddf3>
   bccda:	bf00      	nop

000bccdc <__aeabi_dsub>:
   bccdc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bcce0 <__adddf3>:
   bcce0:	b530      	push	{r4, r5, lr}
   bcce2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bcce6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bccea:	ea94 0f05 	teq	r4, r5
   bccee:	bf08      	it	eq
   bccf0:	ea90 0f02 	teqeq	r0, r2
   bccf4:	bf1f      	itttt	ne
   bccf6:	ea54 0c00 	orrsne.w	ip, r4, r0
   bccfa:	ea55 0c02 	orrsne.w	ip, r5, r2
   bccfe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bcd02:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bcd06:	f000 80e2 	beq.w	bcece <__adddf3+0x1ee>
   bcd0a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bcd0e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bcd12:	bfb8      	it	lt
   bcd14:	426d      	neglt	r5, r5
   bcd16:	dd0c      	ble.n	bcd32 <__adddf3+0x52>
   bcd18:	442c      	add	r4, r5
   bcd1a:	ea80 0202 	eor.w	r2, r0, r2
   bcd1e:	ea81 0303 	eor.w	r3, r1, r3
   bcd22:	ea82 0000 	eor.w	r0, r2, r0
   bcd26:	ea83 0101 	eor.w	r1, r3, r1
   bcd2a:	ea80 0202 	eor.w	r2, r0, r2
   bcd2e:	ea81 0303 	eor.w	r3, r1, r3
   bcd32:	2d36      	cmp	r5, #54	; 0x36
   bcd34:	bf88      	it	hi
   bcd36:	bd30      	pophi	{r4, r5, pc}
   bcd38:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bcd3c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bcd40:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bcd44:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bcd48:	d002      	beq.n	bcd50 <__adddf3+0x70>
   bcd4a:	4240      	negs	r0, r0
   bcd4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcd50:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bcd54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bcd58:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bcd5c:	d002      	beq.n	bcd64 <__adddf3+0x84>
   bcd5e:	4252      	negs	r2, r2
   bcd60:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bcd64:	ea94 0f05 	teq	r4, r5
   bcd68:	f000 80a7 	beq.w	bceba <__adddf3+0x1da>
   bcd6c:	f1a4 0401 	sub.w	r4, r4, #1
   bcd70:	f1d5 0e20 	rsbs	lr, r5, #32
   bcd74:	db0d      	blt.n	bcd92 <__adddf3+0xb2>
   bcd76:	fa02 fc0e 	lsl.w	ip, r2, lr
   bcd7a:	fa22 f205 	lsr.w	r2, r2, r5
   bcd7e:	1880      	adds	r0, r0, r2
   bcd80:	f141 0100 	adc.w	r1, r1, #0
   bcd84:	fa03 f20e 	lsl.w	r2, r3, lr
   bcd88:	1880      	adds	r0, r0, r2
   bcd8a:	fa43 f305 	asr.w	r3, r3, r5
   bcd8e:	4159      	adcs	r1, r3
   bcd90:	e00e      	b.n	bcdb0 <__adddf3+0xd0>
   bcd92:	f1a5 0520 	sub.w	r5, r5, #32
   bcd96:	f10e 0e20 	add.w	lr, lr, #32
   bcd9a:	2a01      	cmp	r2, #1
   bcd9c:	fa03 fc0e 	lsl.w	ip, r3, lr
   bcda0:	bf28      	it	cs
   bcda2:	f04c 0c02 	orrcs.w	ip, ip, #2
   bcda6:	fa43 f305 	asr.w	r3, r3, r5
   bcdaa:	18c0      	adds	r0, r0, r3
   bcdac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bcdb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bcdb4:	d507      	bpl.n	bcdc6 <__adddf3+0xe6>
   bcdb6:	f04f 0e00 	mov.w	lr, #0
   bcdba:	f1dc 0c00 	rsbs	ip, ip, #0
   bcdbe:	eb7e 0000 	sbcs.w	r0, lr, r0
   bcdc2:	eb6e 0101 	sbc.w	r1, lr, r1
   bcdc6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bcdca:	d31b      	bcc.n	bce04 <__adddf3+0x124>
   bcdcc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bcdd0:	d30c      	bcc.n	bcdec <__adddf3+0x10c>
   bcdd2:	0849      	lsrs	r1, r1, #1
   bcdd4:	ea5f 0030 	movs.w	r0, r0, rrx
   bcdd8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bcddc:	f104 0401 	add.w	r4, r4, #1
   bcde0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bcde4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bcde8:	f080 809a 	bcs.w	bcf20 <__adddf3+0x240>
   bcdec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bcdf0:	bf08      	it	eq
   bcdf2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bcdf6:	f150 0000 	adcs.w	r0, r0, #0
   bcdfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bcdfe:	ea41 0105 	orr.w	r1, r1, r5
   bce02:	bd30      	pop	{r4, r5, pc}
   bce04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bce08:	4140      	adcs	r0, r0
   bce0a:	eb41 0101 	adc.w	r1, r1, r1
   bce0e:	3c01      	subs	r4, #1
   bce10:	bf28      	it	cs
   bce12:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bce16:	d2e9      	bcs.n	bcdec <__adddf3+0x10c>
   bce18:	f091 0f00 	teq	r1, #0
   bce1c:	bf04      	itt	eq
   bce1e:	4601      	moveq	r1, r0
   bce20:	2000      	moveq	r0, #0
   bce22:	fab1 f381 	clz	r3, r1
   bce26:	bf08      	it	eq
   bce28:	3320      	addeq	r3, #32
   bce2a:	f1a3 030b 	sub.w	r3, r3, #11
   bce2e:	f1b3 0220 	subs.w	r2, r3, #32
   bce32:	da0c      	bge.n	bce4e <__adddf3+0x16e>
   bce34:	320c      	adds	r2, #12
   bce36:	dd08      	ble.n	bce4a <__adddf3+0x16a>
   bce38:	f102 0c14 	add.w	ip, r2, #20
   bce3c:	f1c2 020c 	rsb	r2, r2, #12
   bce40:	fa01 f00c 	lsl.w	r0, r1, ip
   bce44:	fa21 f102 	lsr.w	r1, r1, r2
   bce48:	e00c      	b.n	bce64 <__adddf3+0x184>
   bce4a:	f102 0214 	add.w	r2, r2, #20
   bce4e:	bfd8      	it	le
   bce50:	f1c2 0c20 	rsble	ip, r2, #32
   bce54:	fa01 f102 	lsl.w	r1, r1, r2
   bce58:	fa20 fc0c 	lsr.w	ip, r0, ip
   bce5c:	bfdc      	itt	le
   bce5e:	ea41 010c 	orrle.w	r1, r1, ip
   bce62:	4090      	lslle	r0, r2
   bce64:	1ae4      	subs	r4, r4, r3
   bce66:	bfa2      	ittt	ge
   bce68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bce6c:	4329      	orrge	r1, r5
   bce6e:	bd30      	popge	{r4, r5, pc}
   bce70:	ea6f 0404 	mvn.w	r4, r4
   bce74:	3c1f      	subs	r4, #31
   bce76:	da1c      	bge.n	bceb2 <__adddf3+0x1d2>
   bce78:	340c      	adds	r4, #12
   bce7a:	dc0e      	bgt.n	bce9a <__adddf3+0x1ba>
   bce7c:	f104 0414 	add.w	r4, r4, #20
   bce80:	f1c4 0220 	rsb	r2, r4, #32
   bce84:	fa20 f004 	lsr.w	r0, r0, r4
   bce88:	fa01 f302 	lsl.w	r3, r1, r2
   bce8c:	ea40 0003 	orr.w	r0, r0, r3
   bce90:	fa21 f304 	lsr.w	r3, r1, r4
   bce94:	ea45 0103 	orr.w	r1, r5, r3
   bce98:	bd30      	pop	{r4, r5, pc}
   bce9a:	f1c4 040c 	rsb	r4, r4, #12
   bce9e:	f1c4 0220 	rsb	r2, r4, #32
   bcea2:	fa20 f002 	lsr.w	r0, r0, r2
   bcea6:	fa01 f304 	lsl.w	r3, r1, r4
   bceaa:	ea40 0003 	orr.w	r0, r0, r3
   bceae:	4629      	mov	r1, r5
   bceb0:	bd30      	pop	{r4, r5, pc}
   bceb2:	fa21 f004 	lsr.w	r0, r1, r4
   bceb6:	4629      	mov	r1, r5
   bceb8:	bd30      	pop	{r4, r5, pc}
   bceba:	f094 0f00 	teq	r4, #0
   bcebe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bcec2:	bf06      	itte	eq
   bcec4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bcec8:	3401      	addeq	r4, #1
   bceca:	3d01      	subne	r5, #1
   bcecc:	e74e      	b.n	bcd6c <__adddf3+0x8c>
   bcece:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bced2:	bf18      	it	ne
   bced4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bced8:	d029      	beq.n	bcf2e <__adddf3+0x24e>
   bceda:	ea94 0f05 	teq	r4, r5
   bcede:	bf08      	it	eq
   bcee0:	ea90 0f02 	teqeq	r0, r2
   bcee4:	d005      	beq.n	bcef2 <__adddf3+0x212>
   bcee6:	ea54 0c00 	orrs.w	ip, r4, r0
   bceea:	bf04      	itt	eq
   bceec:	4619      	moveq	r1, r3
   bceee:	4610      	moveq	r0, r2
   bcef0:	bd30      	pop	{r4, r5, pc}
   bcef2:	ea91 0f03 	teq	r1, r3
   bcef6:	bf1e      	ittt	ne
   bcef8:	2100      	movne	r1, #0
   bcefa:	2000      	movne	r0, #0
   bcefc:	bd30      	popne	{r4, r5, pc}
   bcefe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bcf02:	d105      	bne.n	bcf10 <__adddf3+0x230>
   bcf04:	0040      	lsls	r0, r0, #1
   bcf06:	4149      	adcs	r1, r1
   bcf08:	bf28      	it	cs
   bcf0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bcf0e:	bd30      	pop	{r4, r5, pc}
   bcf10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bcf14:	bf3c      	itt	cc
   bcf16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bcf1a:	bd30      	popcc	{r4, r5, pc}
   bcf1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bcf20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bcf24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bcf28:	f04f 0000 	mov.w	r0, #0
   bcf2c:	bd30      	pop	{r4, r5, pc}
   bcf2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bcf32:	bf1a      	itte	ne
   bcf34:	4619      	movne	r1, r3
   bcf36:	4610      	movne	r0, r2
   bcf38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bcf3c:	bf1c      	itt	ne
   bcf3e:	460b      	movne	r3, r1
   bcf40:	4602      	movne	r2, r0
   bcf42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bcf46:	bf06      	itte	eq
   bcf48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bcf4c:	ea91 0f03 	teqeq	r1, r3
   bcf50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bcf54:	bd30      	pop	{r4, r5, pc}
   bcf56:	bf00      	nop

000bcf58 <__aeabi_ui2d>:
   bcf58:	f090 0f00 	teq	r0, #0
   bcf5c:	bf04      	itt	eq
   bcf5e:	2100      	moveq	r1, #0
   bcf60:	4770      	bxeq	lr
   bcf62:	b530      	push	{r4, r5, lr}
   bcf64:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bcf68:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bcf6c:	f04f 0500 	mov.w	r5, #0
   bcf70:	f04f 0100 	mov.w	r1, #0
   bcf74:	e750      	b.n	bce18 <__adddf3+0x138>
   bcf76:	bf00      	nop

000bcf78 <__aeabi_i2d>:
   bcf78:	f090 0f00 	teq	r0, #0
   bcf7c:	bf04      	itt	eq
   bcf7e:	2100      	moveq	r1, #0
   bcf80:	4770      	bxeq	lr
   bcf82:	b530      	push	{r4, r5, lr}
   bcf84:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bcf88:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bcf8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bcf90:	bf48      	it	mi
   bcf92:	4240      	negmi	r0, r0
   bcf94:	f04f 0100 	mov.w	r1, #0
   bcf98:	e73e      	b.n	bce18 <__adddf3+0x138>
   bcf9a:	bf00      	nop

000bcf9c <__aeabi_f2d>:
   bcf9c:	0042      	lsls	r2, r0, #1
   bcf9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bcfa2:	ea4f 0131 	mov.w	r1, r1, rrx
   bcfa6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bcfaa:	bf1f      	itttt	ne
   bcfac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bcfb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bcfb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bcfb8:	4770      	bxne	lr
   bcfba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bcfbe:	bf08      	it	eq
   bcfc0:	4770      	bxeq	lr
   bcfc2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bcfc6:	bf04      	itt	eq
   bcfc8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bcfcc:	4770      	bxeq	lr
   bcfce:	b530      	push	{r4, r5, lr}
   bcfd0:	f44f 7460 	mov.w	r4, #896	; 0x380
   bcfd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bcfd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bcfdc:	e71c      	b.n	bce18 <__adddf3+0x138>
   bcfde:	bf00      	nop

000bcfe0 <__aeabi_ul2d>:
   bcfe0:	ea50 0201 	orrs.w	r2, r0, r1
   bcfe4:	bf08      	it	eq
   bcfe6:	4770      	bxeq	lr
   bcfe8:	b530      	push	{r4, r5, lr}
   bcfea:	f04f 0500 	mov.w	r5, #0
   bcfee:	e00a      	b.n	bd006 <__aeabi_l2d+0x16>

000bcff0 <__aeabi_l2d>:
   bcff0:	ea50 0201 	orrs.w	r2, r0, r1
   bcff4:	bf08      	it	eq
   bcff6:	4770      	bxeq	lr
   bcff8:	b530      	push	{r4, r5, lr}
   bcffa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bcffe:	d502      	bpl.n	bd006 <__aeabi_l2d+0x16>
   bd000:	4240      	negs	r0, r0
   bd002:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd006:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd00a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd00e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd012:	f43f aed8 	beq.w	bcdc6 <__adddf3+0xe6>
   bd016:	f04f 0203 	mov.w	r2, #3
   bd01a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd01e:	bf18      	it	ne
   bd020:	3203      	addne	r2, #3
   bd022:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd026:	bf18      	it	ne
   bd028:	3203      	addne	r2, #3
   bd02a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd02e:	f1c2 0320 	rsb	r3, r2, #32
   bd032:	fa00 fc03 	lsl.w	ip, r0, r3
   bd036:	fa20 f002 	lsr.w	r0, r0, r2
   bd03a:	fa01 fe03 	lsl.w	lr, r1, r3
   bd03e:	ea40 000e 	orr.w	r0, r0, lr
   bd042:	fa21 f102 	lsr.w	r1, r1, r2
   bd046:	4414      	add	r4, r2
   bd048:	e6bd      	b.n	bcdc6 <__adddf3+0xe6>
   bd04a:	bf00      	nop

000bd04c <__aeabi_dmul>:
   bd04c:	b570      	push	{r4, r5, r6, lr}
   bd04e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd052:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd056:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd05a:	bf1d      	ittte	ne
   bd05c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd060:	ea94 0f0c 	teqne	r4, ip
   bd064:	ea95 0f0c 	teqne	r5, ip
   bd068:	f000 f8de 	bleq	bd228 <__aeabi_dmul+0x1dc>
   bd06c:	442c      	add	r4, r5
   bd06e:	ea81 0603 	eor.w	r6, r1, r3
   bd072:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd076:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd07a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd07e:	bf18      	it	ne
   bd080:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd084:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd08c:	d038      	beq.n	bd100 <__aeabi_dmul+0xb4>
   bd08e:	fba0 ce02 	umull	ip, lr, r0, r2
   bd092:	f04f 0500 	mov.w	r5, #0
   bd096:	fbe1 e502 	umlal	lr, r5, r1, r2
   bd09a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bd09e:	fbe0 e503 	umlal	lr, r5, r0, r3
   bd0a2:	f04f 0600 	mov.w	r6, #0
   bd0a6:	fbe1 5603 	umlal	r5, r6, r1, r3
   bd0aa:	f09c 0f00 	teq	ip, #0
   bd0ae:	bf18      	it	ne
   bd0b0:	f04e 0e01 	orrne.w	lr, lr, #1
   bd0b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bd0b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bd0bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bd0c0:	d204      	bcs.n	bd0cc <__aeabi_dmul+0x80>
   bd0c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bd0c6:	416d      	adcs	r5, r5
   bd0c8:	eb46 0606 	adc.w	r6, r6, r6
   bd0cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bd0d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bd0d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bd0d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bd0dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bd0e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd0e4:	bf88      	it	hi
   bd0e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd0ea:	d81e      	bhi.n	bd12a <__aeabi_dmul+0xde>
   bd0ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bd0f0:	bf08      	it	eq
   bd0f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bd0f6:	f150 0000 	adcs.w	r0, r0, #0
   bd0fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd0fe:	bd70      	pop	{r4, r5, r6, pc}
   bd100:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bd104:	ea46 0101 	orr.w	r1, r6, r1
   bd108:	ea40 0002 	orr.w	r0, r0, r2
   bd10c:	ea81 0103 	eor.w	r1, r1, r3
   bd110:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bd114:	bfc2      	ittt	gt
   bd116:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd11a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd11e:	bd70      	popgt	{r4, r5, r6, pc}
   bd120:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd124:	f04f 0e00 	mov.w	lr, #0
   bd128:	3c01      	subs	r4, #1
   bd12a:	f300 80ab 	bgt.w	bd284 <__aeabi_dmul+0x238>
   bd12e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bd132:	bfde      	ittt	le
   bd134:	2000      	movle	r0, #0
   bd136:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bd13a:	bd70      	pople	{r4, r5, r6, pc}
   bd13c:	f1c4 0400 	rsb	r4, r4, #0
   bd140:	3c20      	subs	r4, #32
   bd142:	da35      	bge.n	bd1b0 <__aeabi_dmul+0x164>
   bd144:	340c      	adds	r4, #12
   bd146:	dc1b      	bgt.n	bd180 <__aeabi_dmul+0x134>
   bd148:	f104 0414 	add.w	r4, r4, #20
   bd14c:	f1c4 0520 	rsb	r5, r4, #32
   bd150:	fa00 f305 	lsl.w	r3, r0, r5
   bd154:	fa20 f004 	lsr.w	r0, r0, r4
   bd158:	fa01 f205 	lsl.w	r2, r1, r5
   bd15c:	ea40 0002 	orr.w	r0, r0, r2
   bd160:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bd164:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd168:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd16c:	fa21 f604 	lsr.w	r6, r1, r4
   bd170:	eb42 0106 	adc.w	r1, r2, r6
   bd174:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd178:	bf08      	it	eq
   bd17a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd17e:	bd70      	pop	{r4, r5, r6, pc}
   bd180:	f1c4 040c 	rsb	r4, r4, #12
   bd184:	f1c4 0520 	rsb	r5, r4, #32
   bd188:	fa00 f304 	lsl.w	r3, r0, r4
   bd18c:	fa20 f005 	lsr.w	r0, r0, r5
   bd190:	fa01 f204 	lsl.w	r2, r1, r4
   bd194:	ea40 0002 	orr.w	r0, r0, r2
   bd198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd19c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd1a0:	f141 0100 	adc.w	r1, r1, #0
   bd1a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd1a8:	bf08      	it	eq
   bd1aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd1ae:	bd70      	pop	{r4, r5, r6, pc}
   bd1b0:	f1c4 0520 	rsb	r5, r4, #32
   bd1b4:	fa00 f205 	lsl.w	r2, r0, r5
   bd1b8:	ea4e 0e02 	orr.w	lr, lr, r2
   bd1bc:	fa20 f304 	lsr.w	r3, r0, r4
   bd1c0:	fa01 f205 	lsl.w	r2, r1, r5
   bd1c4:	ea43 0302 	orr.w	r3, r3, r2
   bd1c8:	fa21 f004 	lsr.w	r0, r1, r4
   bd1cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd1d0:	fa21 f204 	lsr.w	r2, r1, r4
   bd1d4:	ea20 0002 	bic.w	r0, r0, r2
   bd1d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bd1dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd1e0:	bf08      	it	eq
   bd1e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd1e6:	bd70      	pop	{r4, r5, r6, pc}
   bd1e8:	f094 0f00 	teq	r4, #0
   bd1ec:	d10f      	bne.n	bd20e <__aeabi_dmul+0x1c2>
   bd1ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bd1f2:	0040      	lsls	r0, r0, #1
   bd1f4:	eb41 0101 	adc.w	r1, r1, r1
   bd1f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd1fc:	bf08      	it	eq
   bd1fe:	3c01      	subeq	r4, #1
   bd200:	d0f7      	beq.n	bd1f2 <__aeabi_dmul+0x1a6>
   bd202:	ea41 0106 	orr.w	r1, r1, r6
   bd206:	f095 0f00 	teq	r5, #0
   bd20a:	bf18      	it	ne
   bd20c:	4770      	bxne	lr
   bd20e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bd212:	0052      	lsls	r2, r2, #1
   bd214:	eb43 0303 	adc.w	r3, r3, r3
   bd218:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bd21c:	bf08      	it	eq
   bd21e:	3d01      	subeq	r5, #1
   bd220:	d0f7      	beq.n	bd212 <__aeabi_dmul+0x1c6>
   bd222:	ea43 0306 	orr.w	r3, r3, r6
   bd226:	4770      	bx	lr
   bd228:	ea94 0f0c 	teq	r4, ip
   bd22c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd230:	bf18      	it	ne
   bd232:	ea95 0f0c 	teqne	r5, ip
   bd236:	d00c      	beq.n	bd252 <__aeabi_dmul+0x206>
   bd238:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd23c:	bf18      	it	ne
   bd23e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd242:	d1d1      	bne.n	bd1e8 <__aeabi_dmul+0x19c>
   bd244:	ea81 0103 	eor.w	r1, r1, r3
   bd248:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd24c:	f04f 0000 	mov.w	r0, #0
   bd250:	bd70      	pop	{r4, r5, r6, pc}
   bd252:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd256:	bf06      	itte	eq
   bd258:	4610      	moveq	r0, r2
   bd25a:	4619      	moveq	r1, r3
   bd25c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd260:	d019      	beq.n	bd296 <__aeabi_dmul+0x24a>
   bd262:	ea94 0f0c 	teq	r4, ip
   bd266:	d102      	bne.n	bd26e <__aeabi_dmul+0x222>
   bd268:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bd26c:	d113      	bne.n	bd296 <__aeabi_dmul+0x24a>
   bd26e:	ea95 0f0c 	teq	r5, ip
   bd272:	d105      	bne.n	bd280 <__aeabi_dmul+0x234>
   bd274:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bd278:	bf1c      	itt	ne
   bd27a:	4610      	movne	r0, r2
   bd27c:	4619      	movne	r1, r3
   bd27e:	d10a      	bne.n	bd296 <__aeabi_dmul+0x24a>
   bd280:	ea81 0103 	eor.w	r1, r1, r3
   bd284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd288:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd28c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd290:	f04f 0000 	mov.w	r0, #0
   bd294:	bd70      	pop	{r4, r5, r6, pc}
   bd296:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd29a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bd29e:	bd70      	pop	{r4, r5, r6, pc}

000bd2a0 <__aeabi_ddiv>:
   bd2a0:	b570      	push	{r4, r5, r6, lr}
   bd2a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd2a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd2aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd2ae:	bf1d      	ittte	ne
   bd2b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd2b4:	ea94 0f0c 	teqne	r4, ip
   bd2b8:	ea95 0f0c 	teqne	r5, ip
   bd2bc:	f000 f8a7 	bleq	bd40e <__aeabi_ddiv+0x16e>
   bd2c0:	eba4 0405 	sub.w	r4, r4, r5
   bd2c4:	ea81 0e03 	eor.w	lr, r1, r3
   bd2c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd2cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd2d0:	f000 8088 	beq.w	bd3e4 <__aeabi_ddiv+0x144>
   bd2d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd2d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bd2dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bd2e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bd2e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bd2e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bd2ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bd2f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bd2f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bd2f8:	429d      	cmp	r5, r3
   bd2fa:	bf08      	it	eq
   bd2fc:	4296      	cmpeq	r6, r2
   bd2fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bd302:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bd306:	d202      	bcs.n	bd30e <__aeabi_ddiv+0x6e>
   bd308:	085b      	lsrs	r3, r3, #1
   bd30a:	ea4f 0232 	mov.w	r2, r2, rrx
   bd30e:	1ab6      	subs	r6, r6, r2
   bd310:	eb65 0503 	sbc.w	r5, r5, r3
   bd314:	085b      	lsrs	r3, r3, #1
   bd316:	ea4f 0232 	mov.w	r2, r2, rrx
   bd31a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bd31e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bd322:	ebb6 0e02 	subs.w	lr, r6, r2
   bd326:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd32a:	bf22      	ittt	cs
   bd32c:	1ab6      	subcs	r6, r6, r2
   bd32e:	4675      	movcs	r5, lr
   bd330:	ea40 000c 	orrcs.w	r0, r0, ip
   bd334:	085b      	lsrs	r3, r3, #1
   bd336:	ea4f 0232 	mov.w	r2, r2, rrx
   bd33a:	ebb6 0e02 	subs.w	lr, r6, r2
   bd33e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd342:	bf22      	ittt	cs
   bd344:	1ab6      	subcs	r6, r6, r2
   bd346:	4675      	movcs	r5, lr
   bd348:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bd34c:	085b      	lsrs	r3, r3, #1
   bd34e:	ea4f 0232 	mov.w	r2, r2, rrx
   bd352:	ebb6 0e02 	subs.w	lr, r6, r2
   bd356:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd35a:	bf22      	ittt	cs
   bd35c:	1ab6      	subcs	r6, r6, r2
   bd35e:	4675      	movcs	r5, lr
   bd360:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bd364:	085b      	lsrs	r3, r3, #1
   bd366:	ea4f 0232 	mov.w	r2, r2, rrx
   bd36a:	ebb6 0e02 	subs.w	lr, r6, r2
   bd36e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd372:	bf22      	ittt	cs
   bd374:	1ab6      	subcs	r6, r6, r2
   bd376:	4675      	movcs	r5, lr
   bd378:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bd37c:	ea55 0e06 	orrs.w	lr, r5, r6
   bd380:	d018      	beq.n	bd3b4 <__aeabi_ddiv+0x114>
   bd382:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bd386:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bd38a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bd38e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bd392:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bd396:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bd39a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bd39e:	d1c0      	bne.n	bd322 <__aeabi_ddiv+0x82>
   bd3a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd3a4:	d10b      	bne.n	bd3be <__aeabi_ddiv+0x11e>
   bd3a6:	ea41 0100 	orr.w	r1, r1, r0
   bd3aa:	f04f 0000 	mov.w	r0, #0
   bd3ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bd3b2:	e7b6      	b.n	bd322 <__aeabi_ddiv+0x82>
   bd3b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd3b8:	bf04      	itt	eq
   bd3ba:	4301      	orreq	r1, r0
   bd3bc:	2000      	moveq	r0, #0
   bd3be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd3c2:	bf88      	it	hi
   bd3c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd3c8:	f63f aeaf 	bhi.w	bd12a <__aeabi_dmul+0xde>
   bd3cc:	ebb5 0c03 	subs.w	ip, r5, r3
   bd3d0:	bf04      	itt	eq
   bd3d2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bd3d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd3da:	f150 0000 	adcs.w	r0, r0, #0
   bd3de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd3e2:	bd70      	pop	{r4, r5, r6, pc}
   bd3e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bd3e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bd3ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bd3f0:	bfc2      	ittt	gt
   bd3f2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd3f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd3fa:	bd70      	popgt	{r4, r5, r6, pc}
   bd3fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd400:	f04f 0e00 	mov.w	lr, #0
   bd404:	3c01      	subs	r4, #1
   bd406:	e690      	b.n	bd12a <__aeabi_dmul+0xde>
   bd408:	ea45 0e06 	orr.w	lr, r5, r6
   bd40c:	e68d      	b.n	bd12a <__aeabi_dmul+0xde>
   bd40e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd412:	ea94 0f0c 	teq	r4, ip
   bd416:	bf08      	it	eq
   bd418:	ea95 0f0c 	teqeq	r5, ip
   bd41c:	f43f af3b 	beq.w	bd296 <__aeabi_dmul+0x24a>
   bd420:	ea94 0f0c 	teq	r4, ip
   bd424:	d10a      	bne.n	bd43c <__aeabi_ddiv+0x19c>
   bd426:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd42a:	f47f af34 	bne.w	bd296 <__aeabi_dmul+0x24a>
   bd42e:	ea95 0f0c 	teq	r5, ip
   bd432:	f47f af25 	bne.w	bd280 <__aeabi_dmul+0x234>
   bd436:	4610      	mov	r0, r2
   bd438:	4619      	mov	r1, r3
   bd43a:	e72c      	b.n	bd296 <__aeabi_dmul+0x24a>
   bd43c:	ea95 0f0c 	teq	r5, ip
   bd440:	d106      	bne.n	bd450 <__aeabi_ddiv+0x1b0>
   bd442:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd446:	f43f aefd 	beq.w	bd244 <__aeabi_dmul+0x1f8>
   bd44a:	4610      	mov	r0, r2
   bd44c:	4619      	mov	r1, r3
   bd44e:	e722      	b.n	bd296 <__aeabi_dmul+0x24a>
   bd450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd454:	bf18      	it	ne
   bd456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd45a:	f47f aec5 	bne.w	bd1e8 <__aeabi_dmul+0x19c>
   bd45e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bd462:	f47f af0d 	bne.w	bd280 <__aeabi_dmul+0x234>
   bd466:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bd46a:	f47f aeeb 	bne.w	bd244 <__aeabi_dmul+0x1f8>
   bd46e:	e712      	b.n	bd296 <__aeabi_dmul+0x24a>

000bd470 <__gedf2>:
   bd470:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd474:	e006      	b.n	bd484 <__cmpdf2+0x4>
   bd476:	bf00      	nop

000bd478 <__ledf2>:
   bd478:	f04f 0c01 	mov.w	ip, #1
   bd47c:	e002      	b.n	bd484 <__cmpdf2+0x4>
   bd47e:	bf00      	nop

000bd480 <__cmpdf2>:
   bd480:	f04f 0c01 	mov.w	ip, #1
   bd484:	f84d cd04 	str.w	ip, [sp, #-4]!
   bd488:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd48c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd490:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd494:	bf18      	it	ne
   bd496:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bd49a:	d01b      	beq.n	bd4d4 <__cmpdf2+0x54>
   bd49c:	b001      	add	sp, #4
   bd49e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bd4a2:	bf0c      	ite	eq
   bd4a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bd4a8:	ea91 0f03 	teqne	r1, r3
   bd4ac:	bf02      	ittt	eq
   bd4ae:	ea90 0f02 	teqeq	r0, r2
   bd4b2:	2000      	moveq	r0, #0
   bd4b4:	4770      	bxeq	lr
   bd4b6:	f110 0f00 	cmn.w	r0, #0
   bd4ba:	ea91 0f03 	teq	r1, r3
   bd4be:	bf58      	it	pl
   bd4c0:	4299      	cmppl	r1, r3
   bd4c2:	bf08      	it	eq
   bd4c4:	4290      	cmpeq	r0, r2
   bd4c6:	bf2c      	ite	cs
   bd4c8:	17d8      	asrcs	r0, r3, #31
   bd4ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bd4ce:	f040 0001 	orr.w	r0, r0, #1
   bd4d2:	4770      	bx	lr
   bd4d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd4d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd4dc:	d102      	bne.n	bd4e4 <__cmpdf2+0x64>
   bd4de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd4e2:	d107      	bne.n	bd4f4 <__cmpdf2+0x74>
   bd4e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd4e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd4ec:	d1d6      	bne.n	bd49c <__cmpdf2+0x1c>
   bd4ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd4f2:	d0d3      	beq.n	bd49c <__cmpdf2+0x1c>
   bd4f4:	f85d 0b04 	ldr.w	r0, [sp], #4
   bd4f8:	4770      	bx	lr
   bd4fa:	bf00      	nop

000bd4fc <__aeabi_cdrcmple>:
   bd4fc:	4684      	mov	ip, r0
   bd4fe:	4610      	mov	r0, r2
   bd500:	4662      	mov	r2, ip
   bd502:	468c      	mov	ip, r1
   bd504:	4619      	mov	r1, r3
   bd506:	4663      	mov	r3, ip
   bd508:	e000      	b.n	bd50c <__aeabi_cdcmpeq>
   bd50a:	bf00      	nop

000bd50c <__aeabi_cdcmpeq>:
   bd50c:	b501      	push	{r0, lr}
   bd50e:	f7ff ffb7 	bl	bd480 <__cmpdf2>
   bd512:	2800      	cmp	r0, #0
   bd514:	bf48      	it	mi
   bd516:	f110 0f00 	cmnmi.w	r0, #0
   bd51a:	bd01      	pop	{r0, pc}

000bd51c <__aeabi_dcmpeq>:
   bd51c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd520:	f7ff fff4 	bl	bd50c <__aeabi_cdcmpeq>
   bd524:	bf0c      	ite	eq
   bd526:	2001      	moveq	r0, #1
   bd528:	2000      	movne	r0, #0
   bd52a:	f85d fb08 	ldr.w	pc, [sp], #8
   bd52e:	bf00      	nop

000bd530 <__aeabi_dcmplt>:
   bd530:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd534:	f7ff ffea 	bl	bd50c <__aeabi_cdcmpeq>
   bd538:	bf34      	ite	cc
   bd53a:	2001      	movcc	r0, #1
   bd53c:	2000      	movcs	r0, #0
   bd53e:	f85d fb08 	ldr.w	pc, [sp], #8
   bd542:	bf00      	nop

000bd544 <__aeabi_dcmple>:
   bd544:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd548:	f7ff ffe0 	bl	bd50c <__aeabi_cdcmpeq>
   bd54c:	bf94      	ite	ls
   bd54e:	2001      	movls	r0, #1
   bd550:	2000      	movhi	r0, #0
   bd552:	f85d fb08 	ldr.w	pc, [sp], #8
   bd556:	bf00      	nop

000bd558 <__aeabi_dcmpge>:
   bd558:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd55c:	f7ff ffce 	bl	bd4fc <__aeabi_cdrcmple>
   bd560:	bf94      	ite	ls
   bd562:	2001      	movls	r0, #1
   bd564:	2000      	movhi	r0, #0
   bd566:	f85d fb08 	ldr.w	pc, [sp], #8
   bd56a:	bf00      	nop

000bd56c <__aeabi_dcmpgt>:
   bd56c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd570:	f7ff ffc4 	bl	bd4fc <__aeabi_cdrcmple>
   bd574:	bf34      	ite	cc
   bd576:	2001      	movcc	r0, #1
   bd578:	2000      	movcs	r0, #0
   bd57a:	f85d fb08 	ldr.w	pc, [sp], #8
   bd57e:	bf00      	nop

000bd580 <__aeabi_dcmpun>:
   bd580:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd588:	d102      	bne.n	bd590 <__aeabi_dcmpun+0x10>
   bd58a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd58e:	d10a      	bne.n	bd5a6 <__aeabi_dcmpun+0x26>
   bd590:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd598:	d102      	bne.n	bd5a0 <__aeabi_dcmpun+0x20>
   bd59a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd59e:	d102      	bne.n	bd5a6 <__aeabi_dcmpun+0x26>
   bd5a0:	f04f 0000 	mov.w	r0, #0
   bd5a4:	4770      	bx	lr
   bd5a6:	f04f 0001 	mov.w	r0, #1
   bd5aa:	4770      	bx	lr

000bd5ac <__aeabi_d2iz>:
   bd5ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd5b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd5b4:	d215      	bcs.n	bd5e2 <__aeabi_d2iz+0x36>
   bd5b6:	d511      	bpl.n	bd5dc <__aeabi_d2iz+0x30>
   bd5b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd5bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd5c0:	d912      	bls.n	bd5e8 <__aeabi_d2iz+0x3c>
   bd5c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd5c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd5ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd5ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd5d2:	fa23 f002 	lsr.w	r0, r3, r2
   bd5d6:	bf18      	it	ne
   bd5d8:	4240      	negne	r0, r0
   bd5da:	4770      	bx	lr
   bd5dc:	f04f 0000 	mov.w	r0, #0
   bd5e0:	4770      	bx	lr
   bd5e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd5e6:	d105      	bne.n	bd5f4 <__aeabi_d2iz+0x48>
   bd5e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bd5ec:	bf08      	it	eq
   bd5ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bd5f2:	4770      	bx	lr
   bd5f4:	f04f 0000 	mov.w	r0, #0
   bd5f8:	4770      	bx	lr
   bd5fa:	bf00      	nop

000bd5fc <__aeabi_d2uiz>:
   bd5fc:	004a      	lsls	r2, r1, #1
   bd5fe:	d211      	bcs.n	bd624 <__aeabi_d2uiz+0x28>
   bd600:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd604:	d211      	bcs.n	bd62a <__aeabi_d2uiz+0x2e>
   bd606:	d50d      	bpl.n	bd624 <__aeabi_d2uiz+0x28>
   bd608:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd60c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd610:	d40e      	bmi.n	bd630 <__aeabi_d2uiz+0x34>
   bd612:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd616:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd61a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd61e:	fa23 f002 	lsr.w	r0, r3, r2
   bd622:	4770      	bx	lr
   bd624:	f04f 0000 	mov.w	r0, #0
   bd628:	4770      	bx	lr
   bd62a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd62e:	d102      	bne.n	bd636 <__aeabi_d2uiz+0x3a>
   bd630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd634:	4770      	bx	lr
   bd636:	f04f 0000 	mov.w	r0, #0
   bd63a:	4770      	bx	lr

000bd63c <__aeabi_d2f>:
   bd63c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd640:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bd644:	bf24      	itt	cs
   bd646:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bd64a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bd64e:	d90d      	bls.n	bd66c <__aeabi_d2f+0x30>
   bd650:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bd654:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bd658:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bd65c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bd660:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bd664:	bf08      	it	eq
   bd666:	f020 0001 	biceq.w	r0, r0, #1
   bd66a:	4770      	bx	lr
   bd66c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bd670:	d121      	bne.n	bd6b6 <__aeabi_d2f+0x7a>
   bd672:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bd676:	bfbc      	itt	lt
   bd678:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bd67c:	4770      	bxlt	lr
   bd67e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd682:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bd686:	f1c2 0218 	rsb	r2, r2, #24
   bd68a:	f1c2 0c20 	rsb	ip, r2, #32
   bd68e:	fa10 f30c 	lsls.w	r3, r0, ip
   bd692:	fa20 f002 	lsr.w	r0, r0, r2
   bd696:	bf18      	it	ne
   bd698:	f040 0001 	orrne.w	r0, r0, #1
   bd69c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd6a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bd6a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   bd6a8:	ea40 000c 	orr.w	r0, r0, ip
   bd6ac:	fa23 f302 	lsr.w	r3, r3, r2
   bd6b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bd6b4:	e7cc      	b.n	bd650 <__aeabi_d2f+0x14>
   bd6b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bd6ba:	d107      	bne.n	bd6cc <__aeabi_d2f+0x90>
   bd6bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bd6c0:	bf1e      	ittt	ne
   bd6c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bd6c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bd6ca:	4770      	bxne	lr
   bd6cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bd6d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bd6d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bd6d8:	4770      	bx	lr
   bd6da:	bf00      	nop

000bd6dc <asctime_r>:
   bd6dc:	b510      	push	{r4, lr}
   bd6de:	460c      	mov	r4, r1
   bd6e0:	6941      	ldr	r1, [r0, #20]
   bd6e2:	6903      	ldr	r3, [r0, #16]
   bd6e4:	6982      	ldr	r2, [r0, #24]
   bd6e6:	b086      	sub	sp, #24
   bd6e8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bd6ec:	9104      	str	r1, [sp, #16]
   bd6ee:	6801      	ldr	r1, [r0, #0]
   bd6f0:	9103      	str	r1, [sp, #12]
   bd6f2:	6841      	ldr	r1, [r0, #4]
   bd6f4:	9102      	str	r1, [sp, #8]
   bd6f6:	6881      	ldr	r1, [r0, #8]
   bd6f8:	9101      	str	r1, [sp, #4]
   bd6fa:	68c1      	ldr	r1, [r0, #12]
   bd6fc:	9100      	str	r1, [sp, #0]
   bd6fe:	4907      	ldr	r1, [pc, #28]	; (bd71c <asctime_r+0x40>)
   bd700:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bd704:	440b      	add	r3, r1
   bd706:	4906      	ldr	r1, [pc, #24]	; (bd720 <asctime_r+0x44>)
   bd708:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bd70c:	440a      	add	r2, r1
   bd70e:	4620      	mov	r0, r4
   bd710:	4904      	ldr	r1, [pc, #16]	; (bd724 <asctime_r+0x48>)
   bd712:	f7fb fbb3 	bl	b8e7c <siprintf>
   bd716:	4620      	mov	r0, r4
   bd718:	b006      	add	sp, #24
   bd71a:	bd10      	pop	{r4, pc}
   bd71c:	000bef65 	.word	0x000bef65
   bd720:	000bef50 	.word	0x000bef50
   bd724:	000bef30 	.word	0x000bef30

000bd728 <atexit>:
   bd728:	2300      	movs	r3, #0
   bd72a:	4601      	mov	r1, r0
   bd72c:	461a      	mov	r2, r3
   bd72e:	4618      	mov	r0, r3
   bd730:	f000 b9ba 	b.w	bdaa8 <__register_exitproc>

000bd734 <gmtime>:
   bd734:	b538      	push	{r3, r4, r5, lr}
   bd736:	4b0b      	ldr	r3, [pc, #44]	; (bd764 <gmtime+0x30>)
   bd738:	681d      	ldr	r5, [r3, #0]
   bd73a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bd73c:	4604      	mov	r4, r0
   bd73e:	b953      	cbnz	r3, bd756 <gmtime+0x22>
   bd740:	2024      	movs	r0, #36	; 0x24
   bd742:	f7fb fb83 	bl	b8e4c <malloc>
   bd746:	4602      	mov	r2, r0
   bd748:	63e8      	str	r0, [r5, #60]	; 0x3c
   bd74a:	b920      	cbnz	r0, bd756 <gmtime+0x22>
   bd74c:	4b06      	ldr	r3, [pc, #24]	; (bd768 <gmtime+0x34>)
   bd74e:	4807      	ldr	r0, [pc, #28]	; (bd76c <gmtime+0x38>)
   bd750:	2139      	movs	r1, #57	; 0x39
   bd752:	f7fb fbbb 	bl	b8ecc <__assert_func>
   bd756:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bd758:	4620      	mov	r0, r4
   bd75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd75e:	f7fb bbd5 	b.w	b8f0c <gmtime_r>
   bd762:	bf00      	nop
   bd764:	2003ded0 	.word	0x2003ded0
   bd768:	000bef89 	.word	0x000bef89
   bd76c:	000befa0 	.word	0x000befa0

000bd770 <isprint>:
   bd770:	4b02      	ldr	r3, [pc, #8]	; (bd77c <isprint+0xc>)
   bd772:	4418      	add	r0, r3
   bd774:	7840      	ldrb	r0, [r0, #1]
   bd776:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bd77a:	4770      	bx	lr
   bd77c:	000bf052 	.word	0x000bf052

000bd780 <memcpy>:
   bd780:	440a      	add	r2, r1
   bd782:	4291      	cmp	r1, r2
   bd784:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bd788:	d100      	bne.n	bd78c <memcpy+0xc>
   bd78a:	4770      	bx	lr
   bd78c:	b510      	push	{r4, lr}
   bd78e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd792:	f803 4f01 	strb.w	r4, [r3, #1]!
   bd796:	4291      	cmp	r1, r2
   bd798:	d1f9      	bne.n	bd78e <memcpy+0xe>
   bd79a:	bd10      	pop	{r4, pc}

000bd79c <memmove>:
   bd79c:	4288      	cmp	r0, r1
   bd79e:	b510      	push	{r4, lr}
   bd7a0:	eb01 0402 	add.w	r4, r1, r2
   bd7a4:	d902      	bls.n	bd7ac <memmove+0x10>
   bd7a6:	4284      	cmp	r4, r0
   bd7a8:	4623      	mov	r3, r4
   bd7aa:	d807      	bhi.n	bd7bc <memmove+0x20>
   bd7ac:	1e43      	subs	r3, r0, #1
   bd7ae:	42a1      	cmp	r1, r4
   bd7b0:	d008      	beq.n	bd7c4 <memmove+0x28>
   bd7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd7b6:	f803 2f01 	strb.w	r2, [r3, #1]!
   bd7ba:	e7f8      	b.n	bd7ae <memmove+0x12>
   bd7bc:	4402      	add	r2, r0
   bd7be:	4601      	mov	r1, r0
   bd7c0:	428a      	cmp	r2, r1
   bd7c2:	d100      	bne.n	bd7c6 <memmove+0x2a>
   bd7c4:	bd10      	pop	{r4, pc}
   bd7c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bd7ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bd7ce:	e7f7      	b.n	bd7c0 <memmove+0x24>

000bd7d0 <memset>:
   bd7d0:	4402      	add	r2, r0
   bd7d2:	4603      	mov	r3, r0
   bd7d4:	4293      	cmp	r3, r2
   bd7d6:	d100      	bne.n	bd7da <memset+0xa>
   bd7d8:	4770      	bx	lr
   bd7da:	f803 1b01 	strb.w	r1, [r3], #1
   bd7de:	e7f9      	b.n	bd7d4 <memset+0x4>

000bd7e0 <srand>:
   bd7e0:	b538      	push	{r3, r4, r5, lr}
   bd7e2:	4b10      	ldr	r3, [pc, #64]	; (bd824 <srand+0x44>)
   bd7e4:	681d      	ldr	r5, [r3, #0]
   bd7e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd7e8:	4604      	mov	r4, r0
   bd7ea:	b9b3      	cbnz	r3, bd81a <srand+0x3a>
   bd7ec:	2018      	movs	r0, #24
   bd7ee:	f7fb fb2d 	bl	b8e4c <malloc>
   bd7f2:	4602      	mov	r2, r0
   bd7f4:	63a8      	str	r0, [r5, #56]	; 0x38
   bd7f6:	b920      	cbnz	r0, bd802 <srand+0x22>
   bd7f8:	4b0b      	ldr	r3, [pc, #44]	; (bd828 <srand+0x48>)
   bd7fa:	480c      	ldr	r0, [pc, #48]	; (bd82c <srand+0x4c>)
   bd7fc:	2142      	movs	r1, #66	; 0x42
   bd7fe:	f7fb fb65 	bl	b8ecc <__assert_func>
   bd802:	490b      	ldr	r1, [pc, #44]	; (bd830 <srand+0x50>)
   bd804:	4b0b      	ldr	r3, [pc, #44]	; (bd834 <srand+0x54>)
   bd806:	e9c0 1300 	strd	r1, r3, [r0]
   bd80a:	4b0b      	ldr	r3, [pc, #44]	; (bd838 <srand+0x58>)
   bd80c:	6083      	str	r3, [r0, #8]
   bd80e:	230b      	movs	r3, #11
   bd810:	8183      	strh	r3, [r0, #12]
   bd812:	2100      	movs	r1, #0
   bd814:	2001      	movs	r0, #1
   bd816:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bd81a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd81c:	2200      	movs	r2, #0
   bd81e:	611c      	str	r4, [r3, #16]
   bd820:	615a      	str	r2, [r3, #20]
   bd822:	bd38      	pop	{r3, r4, r5, pc}
   bd824:	2003ded0 	.word	0x2003ded0
   bd828:	000bef89 	.word	0x000bef89
   bd82c:	000beff9 	.word	0x000beff9
   bd830:	abcd330e 	.word	0xabcd330e
   bd834:	e66d1234 	.word	0xe66d1234
   bd838:	0005deec 	.word	0x0005deec

000bd83c <rand>:
   bd83c:	4b16      	ldr	r3, [pc, #88]	; (bd898 <rand+0x5c>)
   bd83e:	b510      	push	{r4, lr}
   bd840:	681c      	ldr	r4, [r3, #0]
   bd842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bd844:	b9b3      	cbnz	r3, bd874 <rand+0x38>
   bd846:	2018      	movs	r0, #24
   bd848:	f7fb fb00 	bl	b8e4c <malloc>
   bd84c:	63a0      	str	r0, [r4, #56]	; 0x38
   bd84e:	b928      	cbnz	r0, bd85c <rand+0x20>
   bd850:	4602      	mov	r2, r0
   bd852:	4b12      	ldr	r3, [pc, #72]	; (bd89c <rand+0x60>)
   bd854:	4812      	ldr	r0, [pc, #72]	; (bd8a0 <rand+0x64>)
   bd856:	214e      	movs	r1, #78	; 0x4e
   bd858:	f7fb fb38 	bl	b8ecc <__assert_func>
   bd85c:	4a11      	ldr	r2, [pc, #68]	; (bd8a4 <rand+0x68>)
   bd85e:	4b12      	ldr	r3, [pc, #72]	; (bd8a8 <rand+0x6c>)
   bd860:	e9c0 2300 	strd	r2, r3, [r0]
   bd864:	4b11      	ldr	r3, [pc, #68]	; (bd8ac <rand+0x70>)
   bd866:	6083      	str	r3, [r0, #8]
   bd868:	230b      	movs	r3, #11
   bd86a:	8183      	strh	r3, [r0, #12]
   bd86c:	2201      	movs	r2, #1
   bd86e:	2300      	movs	r3, #0
   bd870:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bd874:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bd876:	4a0e      	ldr	r2, [pc, #56]	; (bd8b0 <rand+0x74>)
   bd878:	6920      	ldr	r0, [r4, #16]
   bd87a:	6963      	ldr	r3, [r4, #20]
   bd87c:	490d      	ldr	r1, [pc, #52]	; (bd8b4 <rand+0x78>)
   bd87e:	4342      	muls	r2, r0
   bd880:	fb01 2203 	mla	r2, r1, r3, r2
   bd884:	fba0 0101 	umull	r0, r1, r0, r1
   bd888:	1c43      	adds	r3, r0, #1
   bd88a:	eb42 0001 	adc.w	r0, r2, r1
   bd88e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bd892:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bd896:	bd10      	pop	{r4, pc}
   bd898:	2003ded0 	.word	0x2003ded0
   bd89c:	000bef89 	.word	0x000bef89
   bd8a0:	000beff9 	.word	0x000beff9
   bd8a4:	abcd330e 	.word	0xabcd330e
   bd8a8:	e66d1234 	.word	0xe66d1234
   bd8ac:	0005deec 	.word	0x0005deec
   bd8b0:	5851f42d 	.word	0x5851f42d
   bd8b4:	4c957f2d 	.word	0x4c957f2d

000bd8b8 <strchr>:
   bd8b8:	b2c9      	uxtb	r1, r1
   bd8ba:	4603      	mov	r3, r0
   bd8bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   bd8c0:	b11a      	cbz	r2, bd8ca <strchr+0x12>
   bd8c2:	428a      	cmp	r2, r1
   bd8c4:	d1f9      	bne.n	bd8ba <strchr+0x2>
   bd8c6:	4618      	mov	r0, r3
   bd8c8:	4770      	bx	lr
   bd8ca:	2900      	cmp	r1, #0
   bd8cc:	bf18      	it	ne
   bd8ce:	2300      	movne	r3, #0
   bd8d0:	e7f9      	b.n	bd8c6 <strchr+0xe>

000bd8d2 <strchrnul>:
   bd8d2:	b510      	push	{r4, lr}
   bd8d4:	4604      	mov	r4, r0
   bd8d6:	f7ff ffef 	bl	bd8b8 <strchr>
   bd8da:	b918      	cbnz	r0, bd8e4 <strchrnul+0x12>
   bd8dc:	4620      	mov	r0, r4
   bd8de:	f000 f814 	bl	bd90a <strlen>
   bd8e2:	4420      	add	r0, r4
   bd8e4:	bd10      	pop	{r4, pc}

000bd8e6 <strcmp>:
   bd8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   bd8ea:	f811 3b01 	ldrb.w	r3, [r1], #1
   bd8ee:	2a01      	cmp	r2, #1
   bd8f0:	bf28      	it	cs
   bd8f2:	429a      	cmpcs	r2, r3
   bd8f4:	d0f7      	beq.n	bd8e6 <strcmp>
   bd8f6:	1ad0      	subs	r0, r2, r3
   bd8f8:	4770      	bx	lr

000bd8fa <strcpy>:
   bd8fa:	4603      	mov	r3, r0
   bd8fc:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd900:	f803 2b01 	strb.w	r2, [r3], #1
   bd904:	2a00      	cmp	r2, #0
   bd906:	d1f9      	bne.n	bd8fc <strcpy+0x2>
   bd908:	4770      	bx	lr

000bd90a <strlen>:
   bd90a:	4603      	mov	r3, r0
   bd90c:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd910:	2a00      	cmp	r2, #0
   bd912:	d1fb      	bne.n	bd90c <strlen+0x2>
   bd914:	1a18      	subs	r0, r3, r0
   bd916:	3801      	subs	r0, #1
   bd918:	4770      	bx	lr

000bd91a <strncmp>:
   bd91a:	b510      	push	{r4, lr}
   bd91c:	b17a      	cbz	r2, bd93e <strncmp+0x24>
   bd91e:	4603      	mov	r3, r0
   bd920:	3901      	subs	r1, #1
   bd922:	1884      	adds	r4, r0, r2
   bd924:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd928:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bd92c:	4290      	cmp	r0, r2
   bd92e:	d101      	bne.n	bd934 <strncmp+0x1a>
   bd930:	42a3      	cmp	r3, r4
   bd932:	d101      	bne.n	bd938 <strncmp+0x1e>
   bd934:	1a80      	subs	r0, r0, r2
   bd936:	bd10      	pop	{r4, pc}
   bd938:	2800      	cmp	r0, #0
   bd93a:	d1f3      	bne.n	bd924 <strncmp+0xa>
   bd93c:	e7fa      	b.n	bd934 <strncmp+0x1a>
   bd93e:	4610      	mov	r0, r2
   bd940:	e7f9      	b.n	bd936 <strncmp+0x1c>

000bd942 <strncpy>:
   bd942:	b510      	push	{r4, lr}
   bd944:	3901      	subs	r1, #1
   bd946:	4603      	mov	r3, r0
   bd948:	b132      	cbz	r2, bd958 <strncpy+0x16>
   bd94a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd94e:	f803 4b01 	strb.w	r4, [r3], #1
   bd952:	3a01      	subs	r2, #1
   bd954:	2c00      	cmp	r4, #0
   bd956:	d1f7      	bne.n	bd948 <strncpy+0x6>
   bd958:	441a      	add	r2, r3
   bd95a:	2100      	movs	r1, #0
   bd95c:	4293      	cmp	r3, r2
   bd95e:	d100      	bne.n	bd962 <strncpy+0x20>
   bd960:	bd10      	pop	{r4, pc}
   bd962:	f803 1b01 	strb.w	r1, [r3], #1
   bd966:	e7f9      	b.n	bd95c <strncpy+0x1a>

000bd968 <strrchr>:
   bd968:	b538      	push	{r3, r4, r5, lr}
   bd96a:	4603      	mov	r3, r0
   bd96c:	460c      	mov	r4, r1
   bd96e:	b969      	cbnz	r1, bd98c <strrchr+0x24>
   bd970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd974:	f7ff bfa0 	b.w	bd8b8 <strchr>
   bd978:	1c43      	adds	r3, r0, #1
   bd97a:	4605      	mov	r5, r0
   bd97c:	4621      	mov	r1, r4
   bd97e:	4618      	mov	r0, r3
   bd980:	f7ff ff9a 	bl	bd8b8 <strchr>
   bd984:	2800      	cmp	r0, #0
   bd986:	d1f7      	bne.n	bd978 <strrchr+0x10>
   bd988:	4628      	mov	r0, r5
   bd98a:	bd38      	pop	{r3, r4, r5, pc}
   bd98c:	2500      	movs	r5, #0
   bd98e:	e7f5      	b.n	bd97c <strrchr+0x14>

000bd990 <_strtol_l.constprop.0>:
   bd990:	2b01      	cmp	r3, #1
   bd992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd996:	d001      	beq.n	bd99c <_strtol_l.constprop.0+0xc>
   bd998:	2b24      	cmp	r3, #36	; 0x24
   bd99a:	d906      	bls.n	bd9aa <_strtol_l.constprop.0+0x1a>
   bd99c:	f7fb fa8e 	bl	b8ebc <__errno>
   bd9a0:	2316      	movs	r3, #22
   bd9a2:	6003      	str	r3, [r0, #0]
   bd9a4:	2000      	movs	r0, #0
   bd9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd9aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bda90 <_strtol_l.constprop.0+0x100>
   bd9ae:	460d      	mov	r5, r1
   bd9b0:	462e      	mov	r6, r5
   bd9b2:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd9b6:	f814 700c 	ldrb.w	r7, [r4, ip]
   bd9ba:	f017 0708 	ands.w	r7, r7, #8
   bd9be:	d1f7      	bne.n	bd9b0 <_strtol_l.constprop.0+0x20>
   bd9c0:	2c2d      	cmp	r4, #45	; 0x2d
   bd9c2:	d132      	bne.n	bda2a <_strtol_l.constprop.0+0x9a>
   bd9c4:	782c      	ldrb	r4, [r5, #0]
   bd9c6:	2701      	movs	r7, #1
   bd9c8:	1cb5      	adds	r5, r6, #2
   bd9ca:	2b00      	cmp	r3, #0
   bd9cc:	d05b      	beq.n	bda86 <_strtol_l.constprop.0+0xf6>
   bd9ce:	2b10      	cmp	r3, #16
   bd9d0:	d109      	bne.n	bd9e6 <_strtol_l.constprop.0+0x56>
   bd9d2:	2c30      	cmp	r4, #48	; 0x30
   bd9d4:	d107      	bne.n	bd9e6 <_strtol_l.constprop.0+0x56>
   bd9d6:	782c      	ldrb	r4, [r5, #0]
   bd9d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bd9dc:	2c58      	cmp	r4, #88	; 0x58
   bd9de:	d14d      	bne.n	bda7c <_strtol_l.constprop.0+0xec>
   bd9e0:	786c      	ldrb	r4, [r5, #1]
   bd9e2:	2310      	movs	r3, #16
   bd9e4:	3502      	adds	r5, #2
   bd9e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bd9ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bd9ee:	f04f 0c00 	mov.w	ip, #0
   bd9f2:	fbb8 f9f3 	udiv	r9, r8, r3
   bd9f6:	4666      	mov	r6, ip
   bd9f8:	fb03 8a19 	mls	sl, r3, r9, r8
   bd9fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bda00:	f1be 0f09 	cmp.w	lr, #9
   bda04:	d816      	bhi.n	bda34 <_strtol_l.constprop.0+0xa4>
   bda06:	4674      	mov	r4, lr
   bda08:	42a3      	cmp	r3, r4
   bda0a:	dd24      	ble.n	bda56 <_strtol_l.constprop.0+0xc6>
   bda0c:	f1bc 0f00 	cmp.w	ip, #0
   bda10:	db1e      	blt.n	bda50 <_strtol_l.constprop.0+0xc0>
   bda12:	45b1      	cmp	r9, r6
   bda14:	d31c      	bcc.n	bda50 <_strtol_l.constprop.0+0xc0>
   bda16:	d101      	bne.n	bda1c <_strtol_l.constprop.0+0x8c>
   bda18:	45a2      	cmp	sl, r4
   bda1a:	db19      	blt.n	bda50 <_strtol_l.constprop.0+0xc0>
   bda1c:	fb06 4603 	mla	r6, r6, r3, r4
   bda20:	f04f 0c01 	mov.w	ip, #1
   bda24:	f815 4b01 	ldrb.w	r4, [r5], #1
   bda28:	e7e8      	b.n	bd9fc <_strtol_l.constprop.0+0x6c>
   bda2a:	2c2b      	cmp	r4, #43	; 0x2b
   bda2c:	bf04      	itt	eq
   bda2e:	782c      	ldrbeq	r4, [r5, #0]
   bda30:	1cb5      	addeq	r5, r6, #2
   bda32:	e7ca      	b.n	bd9ca <_strtol_l.constprop.0+0x3a>
   bda34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bda38:	f1be 0f19 	cmp.w	lr, #25
   bda3c:	d801      	bhi.n	bda42 <_strtol_l.constprop.0+0xb2>
   bda3e:	3c37      	subs	r4, #55	; 0x37
   bda40:	e7e2      	b.n	bda08 <_strtol_l.constprop.0+0x78>
   bda42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bda46:	f1be 0f19 	cmp.w	lr, #25
   bda4a:	d804      	bhi.n	bda56 <_strtol_l.constprop.0+0xc6>
   bda4c:	3c57      	subs	r4, #87	; 0x57
   bda4e:	e7db      	b.n	bda08 <_strtol_l.constprop.0+0x78>
   bda50:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bda54:	e7e6      	b.n	bda24 <_strtol_l.constprop.0+0x94>
   bda56:	f1bc 0f00 	cmp.w	ip, #0
   bda5a:	da05      	bge.n	bda68 <_strtol_l.constprop.0+0xd8>
   bda5c:	2322      	movs	r3, #34	; 0x22
   bda5e:	6003      	str	r3, [r0, #0]
   bda60:	4646      	mov	r6, r8
   bda62:	b942      	cbnz	r2, bda76 <_strtol_l.constprop.0+0xe6>
   bda64:	4630      	mov	r0, r6
   bda66:	e79e      	b.n	bd9a6 <_strtol_l.constprop.0+0x16>
   bda68:	b107      	cbz	r7, bda6c <_strtol_l.constprop.0+0xdc>
   bda6a:	4276      	negs	r6, r6
   bda6c:	2a00      	cmp	r2, #0
   bda6e:	d0f9      	beq.n	bda64 <_strtol_l.constprop.0+0xd4>
   bda70:	f1bc 0f00 	cmp.w	ip, #0
   bda74:	d000      	beq.n	bda78 <_strtol_l.constprop.0+0xe8>
   bda76:	1e69      	subs	r1, r5, #1
   bda78:	6011      	str	r1, [r2, #0]
   bda7a:	e7f3      	b.n	bda64 <_strtol_l.constprop.0+0xd4>
   bda7c:	2430      	movs	r4, #48	; 0x30
   bda7e:	2b00      	cmp	r3, #0
   bda80:	d1b1      	bne.n	bd9e6 <_strtol_l.constprop.0+0x56>
   bda82:	2308      	movs	r3, #8
   bda84:	e7af      	b.n	bd9e6 <_strtol_l.constprop.0+0x56>
   bda86:	2c30      	cmp	r4, #48	; 0x30
   bda88:	d0a5      	beq.n	bd9d6 <_strtol_l.constprop.0+0x46>
   bda8a:	230a      	movs	r3, #10
   bda8c:	e7ab      	b.n	bd9e6 <_strtol_l.constprop.0+0x56>
   bda8e:	bf00      	nop
   bda90:	000bf053 	.word	0x000bf053

000bda94 <strtol>:
   bda94:	4613      	mov	r3, r2
   bda96:	460a      	mov	r2, r1
   bda98:	4601      	mov	r1, r0
   bda9a:	4802      	ldr	r0, [pc, #8]	; (bdaa4 <strtol+0x10>)
   bda9c:	6800      	ldr	r0, [r0, #0]
   bda9e:	f7ff bf77 	b.w	bd990 <_strtol_l.constprop.0>
   bdaa2:	bf00      	nop
   bdaa4:	2003ded0 	.word	0x2003ded0

000bdaa8 <__register_exitproc>:
   bdaa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bdaac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bdb68 <__register_exitproc+0xc0>
   bdab0:	4606      	mov	r6, r0
   bdab2:	f8d8 0000 	ldr.w	r0, [r8]
   bdab6:	461f      	mov	r7, r3
   bdab8:	460d      	mov	r5, r1
   bdaba:	4691      	mov	r9, r2
   bdabc:	f000 f856 	bl	bdb6c <__retarget_lock_acquire_recursive>
   bdac0:	4b25      	ldr	r3, [pc, #148]	; (bdb58 <__register_exitproc+0xb0>)
   bdac2:	681c      	ldr	r4, [r3, #0]
   bdac4:	b934      	cbnz	r4, bdad4 <__register_exitproc+0x2c>
   bdac6:	4c25      	ldr	r4, [pc, #148]	; (bdb5c <__register_exitproc+0xb4>)
   bdac8:	601c      	str	r4, [r3, #0]
   bdaca:	4b25      	ldr	r3, [pc, #148]	; (bdb60 <__register_exitproc+0xb8>)
   bdacc:	b113      	cbz	r3, bdad4 <__register_exitproc+0x2c>
   bdace:	681b      	ldr	r3, [r3, #0]
   bdad0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bdad4:	6863      	ldr	r3, [r4, #4]
   bdad6:	2b1f      	cmp	r3, #31
   bdad8:	dd07      	ble.n	bdaea <__register_exitproc+0x42>
   bdada:	f8d8 0000 	ldr.w	r0, [r8]
   bdade:	f000 f847 	bl	bdb70 <__retarget_lock_release_recursive>
   bdae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bdae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bdaea:	b34e      	cbz	r6, bdb40 <__register_exitproc+0x98>
   bdaec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bdaf0:	b988      	cbnz	r0, bdb16 <__register_exitproc+0x6e>
   bdaf2:	4b1c      	ldr	r3, [pc, #112]	; (bdb64 <__register_exitproc+0xbc>)
   bdaf4:	b923      	cbnz	r3, bdb00 <__register_exitproc+0x58>
   bdaf6:	f8d8 0000 	ldr.w	r0, [r8]
   bdafa:	f000 f838 	bl	bdb6e <__retarget_lock_release>
   bdafe:	e7f0      	b.n	bdae2 <__register_exitproc+0x3a>
   bdb00:	f44f 7084 	mov.w	r0, #264	; 0x108
   bdb04:	f7fb f9a2 	bl	b8e4c <malloc>
   bdb08:	2800      	cmp	r0, #0
   bdb0a:	d0f4      	beq.n	bdaf6 <__register_exitproc+0x4e>
   bdb0c:	2300      	movs	r3, #0
   bdb0e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bdb12:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bdb16:	6863      	ldr	r3, [r4, #4]
   bdb18:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bdb1c:	2201      	movs	r2, #1
   bdb1e:	409a      	lsls	r2, r3
   bdb20:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bdb24:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bdb28:	4313      	orrs	r3, r2
   bdb2a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bdb2e:	2e02      	cmp	r6, #2
   bdb30:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bdb34:	bf02      	ittt	eq
   bdb36:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bdb3a:	4313      	orreq	r3, r2
   bdb3c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bdb40:	6863      	ldr	r3, [r4, #4]
   bdb42:	f8d8 0000 	ldr.w	r0, [r8]
   bdb46:	1c5a      	adds	r2, r3, #1
   bdb48:	3302      	adds	r3, #2
   bdb4a:	6062      	str	r2, [r4, #4]
   bdb4c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bdb50:	f000 f80e 	bl	bdb70 <__retarget_lock_release_recursive>
   bdb54:	2000      	movs	r0, #0
   bdb56:	e7c6      	b.n	bdae6 <__register_exitproc+0x3e>
   bdb58:	2003e7e8 	.word	0x2003e7e8
   bdb5c:	2003e75c 	.word	0x2003e75c
   bdb60:	00000000 	.word	0x00000000
   bdb64:	000b8e4d 	.word	0x000b8e4d
   bdb68:	2003df34 	.word	0x2003df34

000bdb6c <__retarget_lock_acquire_recursive>:
   bdb6c:	4770      	bx	lr

000bdb6e <__retarget_lock_release>:
   bdb6e:	4770      	bx	lr

000bdb70 <__retarget_lock_release_recursive>:
   bdb70:	4770      	bx	lr

000bdb72 <link_code_end>:
	...

000bdb74 <dynalib_user>:
   bdb74:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bdb84:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bdb94:	7620 7269 7574 6c61 4600 6f72 206d 7325      virtual.From %s
   bdba4:	7420 206f 7325 7720 7469 2068 6e69 6176      to %s with inva
   bdbb4:	696c 2064 6974 656d 4600 6f72 206d 7325     lid time.From %s
   bdbc4:	7420 206f 7325 4e00 646f 2065 6425 7220      to %s.Node %d r
   bdbd4:	7465 7972 7320 6174 6574 2520 2064 6964     etry state %d di
   bdbe4:	6563 6f20 2066 6425 7220 7465 7972 6920     ce of %d retry i
   bdbf4:	206e 6c25 2075 6573 6f63 646e 0073 6e55     n %lu seconds.Un
   bdc04:	6f63 666e 6769 7275 6465 6e20 646f 2065     configured node 
   bdc14:	202d 6f6e 6f20 6666 6573 2074 6e61 2064     - no offset and 
   bdc24:	6c25 2075 6573 6f63 646e 2073 6974 6c6c     %lu seconds till
   bdc34:	6e20 7865 2074 6570 6972 646f 2500 0054      next period.%T.
   bdc44:	7453 7261 6974 676e 6120 6e20 7765 7020     Starting a new p
   bdc54:	7265 6f69 2064 6c25 2075 6573 2063 6974     eriod %lu sec ti
   bdc64:	6c6c 2520 0073 6e49 7420 7265 696d 616e     ll %s.In termina
   bdc74:	206c 6870 7361 2065 6c25 2075 6573 6f63     l phase %lu seco
   bdc84:	646e 2073 6974 6c6c 2520 0073 6e6f 6f00     nds till %s.on.o
   bdc94:	6666 5000 7261 206b 7369 6f20 6570 206e     ff.Park is open 
   bdca4:	7562 2074 6577 6820 7661 2065 6f6e 2074     but we have not 
   bdcb4:	6f63 6e6e 6365 6574 2064 6f66 2072 766f     connected for ov
   bdcc4:	7265 7420 6f77 7220 7065 726f 6974 676e     er two reporting
   bdcd4:	7020 7265 6f69 7364 2d20 6e20 6565 2064      periods - need 
   bdce4:	6f74 7220 7365 7465 5300 656c 7065 6620     to reset.Sleep f
   bdcf4:	726f 2520 2069 6573 6f63 646e 2073 6e75     or %i seconds un
   bdd04:	6974 206c 656e 7478 6520 6576 746e 6120     til next event a
   bdd14:	2074 7325 7720 7469 2068 6573 736e 726f     t %s with sensor
   bdd24:	2520 0073 6f57 656b 7720 7469 2068 7375      %s.Woke with us
   bdd34:	7265 6220 7475 6f74 206e 202d 6f4c 4152     er button - LoRA
   bdd44:	5320 6174 6574 5700 6b6f 2065 6977 6874      State.Woke with
   bdd54:	7320 6e65 6f73 2072 6e69 6574 7272 7075      sensor interrup
   bdd64:	0074 6954 656d 6920 2073 7075 6120 2074     t.Time is up at 
   bdd74:	7325 7720 7469 2068 6c25 2069 7266 6565     %s with %li free
   bdd84:	6d20 6d65 726f 0079 6146 6c69 6465 6920      memory.Failed i
   bdd94:	206e 6164 6174 7320 6e65 2c64 7220 7465     n data send, ret
   bdda4:	7972 7453 7461 2065 203d 6425 4800 7265     ryState = %d.Her
   bddb4:	2065 6577 6120 6572 7720 7469 2068 6c61     e we are with al
   bddc4:	7265 2074 6f63 6564 2520 0064 6c41 7265     ert code %d.Aler
   bddd4:	2074 2031 202d 6f4a 6e69 5220 7165 6575     t 1 - Join Reque
   bdde4:	7473 5220 7165 6975 6572 0064 6c41 7265     st Required.Aler
   bddf4:	2074 2d32 5420 6d69 2065 7953 636e 5220     t 2- Time Sync R
   bde04:	7165 6975 6572 0064 6c41 7265 2074 2033     equired.Alert 3 
   bde14:	202d 6552 6573 7474 6e69 2067 6564 6976     - Resetting devi
   bde24:	6563 4900 696e 6974 6c61 7a69 2065 6f4c     ce.Initialize Lo
   bde34:	4152 7220 6461 6f69 4900 696e 6974 6c61     RA radio.Initial
   bde44:	7a69 7461 6f69 206e 7573 6363 7365 6673     ization successf
   bde54:	6c75 4900 696e 6974 6c61 7a69 7461 6f69     ul.Initializatio
   bde64:	206e 6f6e 2074 7573 6363 7365 6673 6c75     n not successful
   bde74:	2d20 7020 776f 7265 6320 6379 656c 5500      - power cycle.U
   bde84:	646e 6665 6e69 6465 4520 7272 726f 5320     ndefined Error S
   bde94:	6174 6574 5200 7365 7465 6974 676e 6420     tate.Resetting d
   bdea4:	6575 7420 206f 6f6c 2077 656d 6f6d 7972     ue to low memory
   bdeb4:	4c00 526f 2041 6e49 7469 6169 696c 617a     .LoRA Initializa
   bdec4:	6974 6e6f 6620 6961 756c 6572 6120 656c     tion failure ale
   bded4:	7472 6320 646f 2065 6425 2d20 7020 776f     rt code %d - pow
   bdee4:	7265 6320 6379 656c 6920 206e 3033 4e00     er cycle in 30.N
   bdef4:	646f 2065 756e 626d 7265 6920 646e 6369     ode number indic
   bdf04:	7461 6465 7520 636e 6e6f 6966 7567 6572     ated unconfigure
   bdf14:	2064 6f6e 6564 6f20 2066 6425 7320 7465     d node of %d set
   bdf24:	6974 676e 6120 656c 7472 6320 646f 2065     ting alert code 
   bdf34:	6f74 2520 0064 7355 7265 6220 7475 6f74     to %d.User butto
   bdf44:	206e 7270 7365 6573 2c64 7720 6c69 206c     n pressed, will 
   bdf54:	6f66 6372 2065 6f63 6e6e 6365 6974 6e6f     force connection
   bdf64:	7420 206f 6150 7472 6369 656c 5300 6174      to Particle.Sta
   bdf74:	7472 7075 6320 6d6f 6c70 7465 2065 6f66     rtup complete fo
   bdf84:	2072 6874 2065 6f4e 6564 7720 7469 2068     r the Node with 
   bdf94:	6c61 7265 2074 6f63 6564 2520 0064 0000     alert code %d...

000bdfa4 <_ZTVN5spark10LogHandlerE>:
	...
   bdfb4:	40a5 000b 40cd 000b                         .@...@..

000bdfbc <_ZTVN5spark16SerialLogHandlerE>:
	...
   bdfc4:	4189 000b 41bd 000b a565 000b 40cf 000b     .A...A..e....@..
   bdfd4:	6e69 7469 6620 6961 656c 0064 6f4c 4152     init failed.LoRA
   bdfe4:	5220 6461 6f69 6920 696e 6974 6c61 7a69      Radio initializ
   bdff4:	6465 6120 2073 2061 6167 6574 6177 2079     ed as a gateway 
   be004:	6977 6874 6120 6420 7665 6369 4965 2044     with a deviceID 
   be014:	666f 2520 0073 6f4c 4152 5220 6461 6f69     of %s.LoRA Radio
   be024:	6920 696e 6974 6c61 7a69 6465 6120 2073      initialized as 
   be034:	6f6e 6564 2520 2069 6e61 2064 2061 6564     node %i and a de
   be044:	6976 6563 4449 6f20 2066 7325 4c00 526f     viceID of %s.LoR
   be054:	2041 6152 6964 206f 6e69 7469 6169 696c     A Radio initiali
   be064:	657a 2064 7361 6120 206e 6e75 6f63 666e     zed as an unconf
   be074:	6769 7275 6465 6e20 646f 2065 6925 6120     igured node %i a
   be084:	646e 6120 6420 7665 6369 4965 2044 666f     nd a deviceID of
   be094:	2520 0073 6553 646e 6e69 2067 6164 6174      %s.Sending data
   be0a4:	7220 7065 726f 2074 756e 626d 7265 2520      report number %
   be0b4:	0064 6144 6174 7220 7065 726f 2074 6564     d.Data report de
   be0c4:	696c 6576 6572 2064 202d 7573 6363 7365     livered - succes
   be0d4:	2073 6172 6574 2520 2e34 6632 4e00 646f     s rate %4.2f.Nod
   be0e4:	2065 6425 2d20 4420 7461 2061 6572 6f70     e %d - Data repo
   be0f4:	7472 7320 6e65 2064 6f74 6720 7461 7765     rt send to gatew
   be104:	7961 2520 2064 6166 6c69 6465 2d20 4e20     ay %d failed - N
   be114:	206f 6f52 7475 2065 202d 7573 6363 7365     o Route - succes
   be124:	2073 6172 6574 2520 2e34 6632 4e00 646f     s rate %4.2f.Nod
   be134:	2065 6425 2d20 4420 7461 2061 6572 6f70     e %d - Data repo
   be144:	7472 7320 6e65 2064 6f74 6720 7461 7765     rt send to gatew
   be154:	7961 2520 2064 6166 6c69 6465 2d20 5520     ay %d failed - U
   be164:	616e 6c62 2065 6f74 4420 6c65 7669 7265     nable to Deliver
   be174:	2d20 7320 6375 6563 7373 7220 7461 2065      - success rate 
   be184:	3425 322e 0066 6f4e 6564 2520 2064 202d     %4.2f.Node %d - 
   be194:	6144 6174 7220 7065 726f 2074 6573 646e     Data report send
   be1a4:	7420 206f 6167 6574 6177 2079 6425 6620      to gateway %d f
   be1b4:	6961 656c 2064 2d20 5520 6b6e 6f6e 6e77     ailed  - Unknown
   be1c4:	2d20 7320 6375 6563 7373 7220 7461 2065      - success rate 
   be1d4:	3425 322e 0066 6977 6874 756f 0074 6977     %4.2f.without.wi
   be1e4:	6874 6f00 6570 006e 6c63 736f 6465 5400     th.open.closed.T
   be1f4:	6568 6720 7461 7765 7961 7320 7465 6120     he gateway set a
   be204:	206e 6c61 7265 2074 6425 4400 7461 2061     n alert %d.Data 
   be214:	6572 6f70 7472 6120 6b63 6f6e 6c77 6465     report acknowled
   be224:	6567 2064 7325 6120 656c 7472 6620 726f     ged %s alert for
   be234:	6d20 7365 6173 6567 2520 2064 6170 6b72      message %d park
   be244:	6920 2073 7325 6120 646e 6120 656c 7472      is %s and alert
   be254:	6320 646f 2065 7369 2520 0064 6150 6b72      code is %d.Park
   be264:	6920 2073 6c63 736f 6465 2d20 7220 7365      is closed - res
   be274:	7465 6520 6576 7972 6874 6e69 0067 2061     et everything.a 
   be284:	6f4e 6564 754e 626d 7265 6920 2073 656e     NodeNumber is ne
   be294:	6465 6465 7400 6568 6320 6f6c 6b63 6920     eded.the clock i
   be2a4:	2073 6f6e 2074 6573 0074 6553 646e 6e69     s not set.Sendin
   be2b4:	2067 6f6a 6e69 7220 7165 6575 7473 6220     g join request b
   be2c4:	6365 7561 6573 2520 0073 6f4a 6e69 7220     ecause %s.Join r
   be2d4:	7165 6575 7473 7320 6e65 2074 6f74 6720     equest sent to g
   be2e4:	7461 7765 7961 7320 6375 6563 7373 7566     ateway successfu
   be2f4:	6c6c 0079 6f4a 6e69 7220 7165 6575 7473     lly.Join request
   be304:	7420 206f 6147 6574 6177 2079 6166 6c69      to Gateway fail
   be314:	6465 4e00 646f 2065 6425 4a20 696f 206e     ed.Node %d Join 
   be324:	6572 7571 7365 2074 6361 6e6b 776f 656c     request acknowle
   be334:	6764 6465 6120 646e 7320 6e65 6f73 2072     dged and sensor 
   be344:	6573 2074 6f74 2520 0064 7553 6363 7365     set to %d.Succes
   be354:	2073 6573 646e 6e69 2067 6c41 7265 2074     s sending Alert 
   be364:	6552 6f70 7472 6e20 6d75 6562 2072 6425     Report number %d
   be374:	7420 206f 6167 6574 6177 2079 7461 2520      to gateway at %
   be384:	0064 6f4e 6564 2d20 4120 656c 7472 5220     d.Node - Alert R
   be394:	7065 726f 2074 6573 646e 7420 206f 6147     eport send to Ga
   be3a4:	6574 6177 2079 6166 6c69 6465 4100 656c     teway failed.Ale
   be3b4:	7472 7220 7065 726f 2074 6361 6e6b 776f     rt report acknow
   be3c4:	656c 6764 6465 7720 7469 2068 6c61 7265     ledged with aler
   be3d4:	2074 6f63 6564 2520 0064 614d 6967 2063     t code %d.Magic 
   be3e4:	754e 626d 7265 6d20 7369 616d 6374 2068     Number mismatch 
   be3f4:	202d 6769 6f6e 6972 676e 6d20 7365 6173     - ignoring messa
   be404:	6567 5200 6365 6965 6576 2064 7266 6d6f     ge.Received from
   be414:	6e20 646f 2065 6425 7720 7469 2068 7372      node %d with rs
   be424:	6973 253d 2064 202d 2061 7325 6d20 7365     si=%d - a %s mes
   be434:	6173 6567 5300 7465 6320 6f6c 6b63 7420     sage.Set clock t
   be444:	206f 7325 6120 646e 7220 7065 726f 2074     o %s and report 
   be454:	7266 7165 6575 636e 2079 6f74 2520 2064     frequency to %d 
   be464:	696d 756e 6574 0073                         minutes.

000be46c <_ZTVN8particle9LEDStatusE>:
	...
   be474:	4fa1 000b 4fbd 000b 4f8d 000b               .O...O...O..

000be480 <_ZTV14LoRA_Functions>:
	...
   be488:	4f8f 000b 4f91 000b 6f4c 6461 6e69 2067     .O...O..Loading 
   be498:	7973 7473 6d65 6420 6665 7561 746c 0073     system defaults.

000be4a8 <_ZTV8MB85RC64>:
	...
   be4b0:	58d5 000b 58e9 000b 6f55 000b 6feb 000b     .X...X..Uo...o..
   be4c0:	706d 000b                                   mp..

000be4c4 <_ZTV13sysStatusData>:
	...
   be4cc:	59f1 000b 5961 000b 593f 000b 85b1 000b     .Y..aY..?Y......
   be4dc:	85d9 000b 86cd 000b 8765 000b 58fd 000b     ........e....X..
   be4ec:	5915 000b                                   .Y..

000be4f0 <_ZTV17currentStatusData>:
	...
   be4f8:	5ad9 000b 5961 000b 593f 000b 85b1 000b     .Z..aY..?Y......
   be508:	85d9 000b 86cd 000b 8765 000b 58a9 000b     ........e....X..
   be518:	58c1 000b 6e49 7469 6c61 7a69 6e69 2067     .X..Initalizing 
   be528:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   be538:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   be548:	6f43 666e 6769 0000                         Config..

000be550 <BLUE_LED>:
   be550:	0007                                        ..

000be552 <BUTTON_PIN>:
   be552:	0004                                        ..

000be554 <INT_PIN>:
   be554:	0012                                        ..

000be556 <MODULE_POWER_PIN>:
   be556:	0011                                        ..

000be558 <RFM95_CS>:
   be558:	0005                                        ..

000be55a <RFM95_INT>:
   be55a:	0002                                        ..

000be55c <RFM95_RST>:
   be55c:	0006                                        ..

000be55e <TMP36_SENSE_PIN>:
   be55e:	000f 6553 7474 6e69 2067 6176 756c 7365     ..Setting values
   be56e:	6620 726f 7420 6568 6e20 646f 0065 6e55      for the node.Un
   be57e:	6e6b 776f 006e 6f4e 656e 5700 4669 0069     known.None.WiFi.
   be58e:	5347 004d 4d55 5354 4300 4d44 0041 544c     GSM.UMTS.CDMA.LT
   be59e:	0045 4549 4545 3038 3132 3435 4c00 4554     E.IEEE802154.LTE
   be5ae:	435f 5441 4d5f 0031 544c 5f45 4143 5f54     _CAT_M1.LTE_CAT_
   be5be:	424e 0031 6f4e 2074 6843 7261 6967 676e     NB1.Not Charging
   be5ce:	4300 6168 6772 6465 4400 7369 6863 7261     .Charged.Dischar
   be5de:	6967 676e 4600 7561 746c 4400 6369 6e6f     ging.Fault.Dicon
   be5ee:	656e 7463 6465 4100 7373 7265 6974 6e6f     nected.Assertion
   be5fe:	6146 6c69 7275 2065 702a 705f 6e69 3c20     Failure *p_pin <
   be60e:	2820 3233 2b20 3120 2936 2500 2073 3a53      (32 + 16).%s S:
   be61e:	3225 302e 2566 2c25 5120 253a 2e32 6630     %2.0f%%, Q:%2.0f
   be62e:	2525 0020 6f43 6e75 2c74 6820 756f 6c72     %% .Count, hourl
   be63e:	3a79 2520 2e69 6420 6961 796c 203a 6925     y: %i. daily: %i
   be64e:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   be65e:	2065 7273 2063 2626 7320 6372 3e2d 6163     e src && src->ca
   be66e:	6c6c 6162 6b63 2500 2069 0043 0000 e57c     llback.%i C...|.
   be67e:	000b e584 000b e589 000b e58e 000b e592     ................
   be68e:	000b e597 000b e59c 000b e5a0 000b e5ab     ................
   be69e:	000b e5b6 000b 6166 6c69 6465 7420 206f     ......failed to 
   be6ae:	6572 6461 7220 6765 6441 7264 253d 3230     read regAddr=%02
   be6be:	2078 6f63 6e75 3d74 7525 6600 6961 656c     x count=%u.faile
   be6ce:	2064 6f74 7220 6165 2064 6572 4167 6464     d to read regAdd
   be6de:	3d72 3025 7832 7320 6174 3d74 6425 4600     r=%02x stat=%d.F
   be6ee:	554f 2054 6964 2064 6f6e 2074 6f67 4820     OUT did not go H
   be6fe:	4749 0048 6f6e 2074 6564 6574 7463 6465     IGH.not detected
   be70e:	6600 6961 656c 2064 6f74 7720 6972 6574     .failed to write
   be71e:	7220 6765 6441 7264 253d 3230 2078 7473      regAddr=%02x st
   be72e:	7461 253d 0064 6573 5774 5444 2520 0064     at=%d.setWDT %d.
   be73e:	6177 6374 6468 676f 6320 656c 7261 6465     watchdog cleared
   be74e:	6220 6552 7573 746c 253d 0064 6177 6374      bResult=%d.watc
   be75e:	6468 676f 7320 7465 6620 756f 5372 6365     hdog set fourSec
   be76e:	3d73 6425 6220 6552 7573 746c 253d 0064     s=%d bResult=%d.
   be77e:	4157 4354 4448 474f 4400 4545 5f50 4f50     WATCHDOG.DEEP_PO
   be78e:	4557 5f52 4f44 4e57 4300 554f 544e 4f44     WER_DOWN.COUNTDO
   be79e:	4e57 545f 4d49 5245 4100 414c 4d52 6600     WN_TIMER.ALARM.f
   be7ae:	6961 756c 6572 6920 206e 7075 6164 6574     ailure in update
   be7be:	6157 656b 6552 7361 6e6f 2520 0064 6177     WakeReason %d.wa
   be7ce:	656b 7220 6165 6f73 206e 203d 7325 6600     ke reason = %s.f
   be7de:	6961 756c 6572 6920 206e 6573 4374 756f     ailure in setCou
   be7ee:	746e 6f64 6e77 6954 656d 2072 6425 6600     ntdownTimer %d.f
   be7fe:	6961 756c 6572 6920 206e 6564 7065 6f50     ailure in deepPo
   be80e:	6577 4472 776f 206e 6425 5200 4745 535f     werDown %d.REG_S
   be81e:	454c 5045 435f 5254 3d4c 7830 3225 0078     LEEP_CTRL=0x%2x.
   be82e:	6964 6e64 7427 7020 776f 7265 6420 776f     didn't power dow
   be83e:	006e 3025 6434 252d 3230 2d64 3025 6432     n.%04d-%02d-%02d
   be84e:	2520 3230 3a64 3025 6432 253a 3230 0064      %02d:%02d:%02d.
   be85e:	6567 5274 6374 7341 6d54 2520 0073 6573     getRtcAsTm %s.se
   be86e:	5274 6374 7341 6d54 2520 0073 6166 6c69     tRtcAsTm %s.fail
   be87e:	7275 2065 6e69 7320 7465 7452 4663 6f72     ure in setRtcFro
   be88e:	546d 206d 6425 7300 7465 5220 4354 6620     mTm %d.set RTC f
   be89e:	6f72 206d 6c63 756f 2064 7325 7300 7465     rom cloud %s.set
   be8ae:	7320 7379 6574 206d 6c63 636f 206b 7266      system clock fr
   be8be:	6d6f 5220 4354 2520 0073 6166 6c69 6465     om RTC %s.failed
   be8ce:	7420 206f 6564 6574 7463 4120 3142 3038      to detect AB180
   be8de:	0035 7061 2e70 6261 3831 3530 0000          5.app.ab1805..

000be8ec <_ZTV6AB1805>:
	...
   be8f4:	63ed 000b 63ef 000b 6a65 000b 6aeb 000b     .c...c..ej...j..

000be904 <_ZTV6MB85RC>:
	...
   be90c:	6f15 000b 6f17 000b 6f55 000b 6feb 000b     .o...o..Uo...o..
   be91c:	706d 000b                                   mp..

000be920 <_ZTV15RHGenericDriver>:
	...
   be930:	7229 000b 40a5 000b 40a5 000b 40a5 000b     )r...@...@...@..
   be940:	40a5 000b 728b 000b 722d 000b 72db 000b     .@...r..-r...r..
   be950:	72a9 000b 72ff 000b 7237 000b 723f 000b     .r...r..7r..?r..
   be960:	7243 000b 7247 000b 724b 000b 724f 000b     Cr..Gr..Kr..Or..
   be970:	723b 000b 725b 000b 725f 000b 7263 000b     ;r..[r.._r..cr..
   be980:	7267 000b 726b 000b 7271 000b 7275 000b     gr..kr..qr..ur..
   be990:	7237 000b 7279 000b 727f 000b 7285 000b     7r..yr...r...r..

000be9a0 <_ZTV12RHGenericSPI>:
	...
   be9a8:	40a5 000b 735d 000b 735f 000b 40a5 000b     .@..]s.._s...@..
   be9b8:	40a5 000b 7367 000b 736b 000b 736f 000b     .@..gs..ks..os..
   be9c8:	7361 000b 7363 000b 7365 000b 6564 6166     as..cs..es..defa
   be9d8:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   be9e8:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   be9f8:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bea08:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bea18 <_ZTVN8particle11SPISettingsE>:
	...
   bea20:	73b5 000b 7389 000b 738b 000b               .s...s...s..

000bea2c <_ZTV13RHHardwareSPI>:
	...
   bea34:	7469 000b 747d 000b 748b 000b 7499 000b     it..}t...t...t..
   bea44:	7505 000b 7367 000b 736b 000b 736f 000b     .u..gs..ks..os..
   bea54:	7513 000b 7527 000b 7535 000b               .u..'u..5u..

000bea60 <_ZTV6RHMesh>:
	...
   bea68:	7601 000b 78a9 000b 7561 000b 754d 000b     .v...x..au..Mu..

000bea78 <_ZTV8RHRouter>:
	...
   bea80:	7b15 000b 7b59 000b                         .{..Y{..

000bea88 <_ZTV11RHSPIDriver>:
	...
   bea98:	7df5 000b 40a5 000b 40a5 000b 40a5 000b     .}...@...@...@..
   beaa8:	40a5 000b 728b 000b 722d 000b 72db 000b     .@...r..-r...r..
   beab8:	72a9 000b 72ff 000b 7237 000b 723f 000b     .r...r..7r..?r..
   beac8:	7243 000b 7247 000b 724b 000b 724f 000b     Cr..Gr..Kr..Or..
   bead8:	723b 000b 725b 000b 725f 000b 7263 000b     ;r..[r.._r..cr..
   beae8:	7267 000b 726b 000b 7271 000b 7275 000b     gr..kr..qr..ur..
   beaf8:	7237 000b 7279 000b 727f 000b 7285 000b     7r..yr...r...r..
   beb08:	7e21 000b 7e2b 000b                         !~..+~..

000beb10 <_ZL18MODEM_CONFIG_TABLE>:
   beb10:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000beb20 <_ZTV7RH_RF95>:
	...
   beb28:	7f93 000b 7fcb 000b 84a1 000b 8337 000b     ............7...
   beb38:	8001 000b 837f 000b 7f8f 000b 728b 000b     .............r..
   beb48:	722d 000b 72db 000b 72a9 000b 72ff 000b     -r...r...r...r..
   beb58:	7f95 000b 723f 000b 7243 000b 7247 000b     ....?r..Cr..Gr..
   beb68:	724b 000b 724f 000b 723b 000b 725b 000b     Kr..Or..;r..[r..
   beb78:	725f 000b 7263 000b 7267 000b 726b 000b     _r..cr..gr..kr..
   beb88:	7271 000b 7275 000b 7fdb 000b 7279 000b     qr..ur......yr..
   beb98:	727f 000b 7285 000b 7e21 000b 7e2b 000b     .r...r..!~..+~..
   beba8:	7f8b 000b 6f67 3a74 6d20 6761 6369 253d     ....got: magic=%
   bebb8:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   bebc8:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   bebd8:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   bebe8:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   bebf8:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   bec08:	253d 3830 0078 0000                         =%08x...

000bec10 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bec18:	85ab 000b 85f7 000b 85a9 000b 85b1 000b     ................
   bec28:	85d9 000b 86cd 000b 8765 000b               ........e...

000bec34 <_ZTVN5spark13CellularClassE>:
	...
   bec3c:	8fff 000b 8ff5 000b 8feb 000b 8fa1 000b     ................
   bec4c:	8fdf 000b 8fd3 000b a8bd 000b a8c5 000b     ................
   bec5c:	8fc7 000b 8fbf 000b 8fb5 000b 8fab 000b     ................
   bec6c:	a8f5 000b                                   ....

000bec70 <_ZTV14CellularSignal>:
	...
   bec78:	908d 000b 90f1 000b 908f 000b 9101 000b     ................
   bec88:	9135 000b 9161 000b 9195 000b 90b5 000b     5...a...........
   bec98:	9093 000b 90af 000b fffc ffff 0000 0000     ................
   beca8:	90e9 000b                                   ....

000becac <_ZTVN5spark13EthernetClassE>:
	...
   becb4:	9237 000b 922d 000b 9223 000b 9219 000b     7...-...#.......
   becc4:	920d 000b 9201 000b a8bd 000b a8c5 000b     ................
   becd4:	91f5 000b 91ed 000b 91e3 000b 91d9 000b     ................
   bece4:	a8f5 000b                                   ....

000bece8 <_ZTV7TwoWire>:
	...
   becf0:	9307 000b 9351 000b 9329 000b 9309 000b     ....Q...).......
   bed00:	9331 000b 9339 000b 9341 000b 9349 000b     1...9...A...I...

000bed10 <_ZTV9IPAddress>:
	...
   bed18:	94b5 000b 94a5 000b 94a7 000b 2575 3430     ............u%04
   bed28:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bed38:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bed48:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bed58:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bed68:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bed78:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bed88:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000bed98 <_ZTVN5spark16JSONStreamWriterE>:
	...
   beda0:	99b1 000b 99d7 000b 9995 000b 95c3 000b     ................

000bedb0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bedb8:	9e0d 000b 9e25 000b a565 000b 40cf 000b     ....%...e....@..

000bedc8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bedd0:	9e39 000b 9e4d 000b a709 000b 999d 000b     9...M...........

000bede0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bede8:	99af 000b 99e5 000b a4c9 000b 999f 000b     ................

000bedf8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bee00:	99ad 000b 99f3 000b 9d75 000b 9a15 000b     ........u.......

000bee10 <_ZTVN5spark12NetworkClassE>:
	...
   bee18:	a87d 000b a887 000b a891 000b a89b 000b     }...............
   bee28:	a8a5 000b a8b1 000b a8bd 000b a8c5 000b     ................
   bee38:	a8cd 000b a8d9 000b a8e1 000b a8eb 000b     ................
   bee48:	a8f5 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000bee58 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bee58:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bee68:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bee78:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bee88:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bee98:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   beea8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000beeb8 <_ZTV11USARTSerial>:
	...
   beec0:	b625 000b b691 000b b669 000b ab45 000b     %.......i...E...
   beed0:	b639 000b b655 000b b647 000b b663 000b     9...U...G...c...
   beee0:	b627 000b b62b 000b                         '...+...

000beee8 <_ZTV9USBSerial>:
	...
   beef0:	b6e3 000b b74b 000b b721 000b ab45 000b     ....K...!...E...
   bef00:	b713 000b b6e5 000b b6f5 000b b745 000b     ............E...
   bef10:	b705 000b b6dd 000b                         ........

000bef18 <_ZSt7nothrow>:
	...

000bef20 <TWO52>:
   bef20:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   bef30:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   bef40:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000bef50 <day_name.1>:
   bef50:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bef60:	6972 6153                                    riSat

000bef65 <mon_name.0>:
   bef65:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bef75:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bef85:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bef95:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   befa5:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   befb5:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   befc5:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   befd5:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   befe5:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   beff5:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bf005:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bf015:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bf025:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bf035:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bf045:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bf052 <_ctype_>:
   bf052:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bf062:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bf072:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bf082:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bf092:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bf0a2:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bf0b2:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bf0c2:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bf0d2:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bf153 <link_const_variable_data_end>:
	...

000bf154 <link_constructors_location>:
   bf154:	000b4ea9 	.word	0x000b4ea9
   bf158:	000b5871 	.word	0x000b5871
   bf15c:	000b5f1d 	.word	0x000b5f1d
   bf160:	000b63e1 	.word	0x000b63e1
   bf164:	000b6f05 	.word	0x000b6f05
   bf168:	000b753d 	.word	0x000b753d
   bf16c:	000b8f91 	.word	0x000b8f91
   bf170:	000b905d 	.word	0x000b905d
   bf174:	000b9241 	.word	0x000b9241
   bf178:	000ba555 	.word	0x000ba555
   bf17c:	000ba9cd 	.word	0x000ba9cd
   bf180:	000bae39 	.word	0x000bae39
   bf184:	000bb2fd 	.word	0x000bb2fd
   bf188:	000bb611 	.word	0x000bb611

000bf18c <link_constructors_end>:
   bf18c:	00000000 	.word	0x00000000
