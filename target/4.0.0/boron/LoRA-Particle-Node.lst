
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009540  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd560  000bd560  0000d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd584  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  2003dd2c  000bd588  0001dd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000900  2003def0  2003def0  0002def0  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bd74c  000bd74c  0002d74c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bd778  000bd778  0002d778  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001fd1a3  00000000  00000000  0002d77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002543f  00000000  00000000  0022a91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004dd57  00000000  00000000  0024fd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003fb8  00000000  00000000  0029dab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d770  00000000  00000000  002a1a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00057171  00000000  00000000  002af1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00079fe6  00000000  00000000  0030634e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00148ba4  00000000  00000000  00380334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000b664  00000000  00000000  004c8ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fee5 	bl	bbe00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 ff07 	bl	bbe50 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd2c 	.word	0x2003dd2c
   b404c:	000bd588 	.word	0x000bd588
   b4050:	2003def0 	.word	0x2003def0
   b4054:	2003def0 	.word	0x2003def0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 f82d 	bl	bb0c0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd518 	.word	0x000bd518
   b4080:	000bd554 	.word	0x000bd554

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b89e 	b.w	b41c4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9ab 	bl	b43e4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 bfcd 	b.w	bb030 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 bfd3 	b.w	b8040 <malloc>

000b409a <_Znaj>:
   b409a:	f003 bfd1 	b.w	b8040 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 bfd7 	b.w	b8050 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f003 fe8c 	bl	b7dc8 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b7a39 	.word	0x000b7a39
   b40b8:	000bc244 	.word	0x000bc244

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z13userSwitchISRv>:
	oldState = state;
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  	userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z13userSwitchISRv+0x8>)
   b40ce:	2201      	movs	r2, #1
   b40d0:	701a      	strb	r2, [r3, #0]
}
   b40d2:	4770      	bx	lr
   b40d4:	2003df4c 	.word	0x2003df4c

000b40d8 <_Z9sensorISRv>:

void sensorISR()
{
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.sensorType == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
   b40d8:	4b07      	ldr	r3, [pc, #28]	; (b40f8 <_Z9sensorISRv+0x20>)
   b40da:	781a      	ldrb	r2, [r3, #0]
   b40dc:	b91a      	cbnz	r2, b40e6 <_Z9sensorISRv+0xe>
   b40de:	4a07      	ldr	r2, [pc, #28]	; (b40fc <_Z9sensorISRv+0x24>)
   b40e0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   b40e4:	b12a      	cbz	r2, b40f2 <_Z9sensorISRv+0x1a>
    sensorDetect = true;                                              // sets the sensor flag for the main loop
   b40e6:	4a06      	ldr	r2, [pc, #24]	; (b4100 <_Z9sensorISRv+0x28>)
   b40e8:	2101      	movs	r1, #1
   b40ea:	7011      	strb	r1, [r2, #0]
    frontTireFlag = false;
   b40ec:	2200      	movs	r2, #0
  }
  else frontTireFlag = true;
   b40ee:	701a      	strb	r2, [r3, #0]
}
   b40f0:	4770      	bx	lr
  else frontTireFlag = true;
   b40f2:	2201      	movs	r2, #1
   b40f4:	e7fb      	b.n	b40ee <_Z9sensorISRv+0x16>
   b40f6:	bf00      	nop
   b40f8:	2003def0 	.word	0x2003def0
   b40fc:	2003e3a0 	.word	0x2003e3a0
   b4100:	2003df4a 	.word	0x2003df4a

000b4104 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b4104:	b510      	push	{r4, lr}
   b4106:	4b03      	ldr	r3, [pc, #12]	; (b4114 <_ZN8MB85RC64D1Ev+0x10>)
   b4108:	6003      	str	r3, [r0, #0]
   b410a:	4604      	mov	r4, r0
   b410c:	f002 f8a2 	bl	b6254 <_ZN6MB85RCD1Ev>
   b4110:	4620      	mov	r0, r4
   b4112:	bd10      	pop	{r4, pc}
   b4114:	000bc450 	.word	0x000bc450

000b4118 <_ZN8MB85RC64D0Ev>:
   b4118:	b510      	push	{r4, lr}
   b411a:	4604      	mov	r4, r0
   b411c:	f7ff fff2 	bl	b4104 <_ZN8MB85RC64D1Ev>
   b4120:	4620      	mov	r0, r4
   b4122:	2110      	movs	r1, #16
   b4124:	f7ff ffbb 	bl	b409e <_ZdlPvj>
   b4128:	4620      	mov	r0, r4
   b412a:	bd10      	pop	{r4, pc}

000b412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b412e:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4130:	4605      	mov	r5, r0
   b4132:	460f      	mov	r7, r1
   b4134:	4616      	mov	r6, r2
        if (valid_) {
   b4136:	b18b      	cbz	r3, b415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4138:	6803      	ldr	r3, [r0, #0]
   b413a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b413c:	b183      	cbz	r3, b4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b413e:	889a      	ldrh	r2, [r3, #4]
   b4140:	2a01      	cmp	r2, #1
   b4142:	d006      	beq.n	b4152 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b4144:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4146:	e7f9      	b.n	b413c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4148:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b414a:	b14b      	cbz	r3, b4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b414c:	889a      	ldrh	r2, [r3, #4]
   b414e:	2a01      	cmp	r2, #1
   b4150:	d1fa      	bne.n	b4148 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b4152:	b12b      	cbz	r3, b4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b4154:	899a      	ldrh	r2, [r3, #12]
   b4156:	42ba      	cmp	r2, r7
   b4158:	d1f6      	bne.n	b4148 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b415a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b415c:	4628      	mov	r0, r5
   b415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4160:	490a      	ldr	r1, [pc, #40]	; (b418c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b4162:	2010      	movs	r0, #16
   b4164:	f007 f93e 	bl	bb3e4 <_ZnwjRKSt9nothrow_t>
   b4168:	4604      	mov	r4, r0
   b416a:	b168      	cbz	r0, b4188 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b416c:	2210      	movs	r2, #16
   b416e:	2100      	movs	r1, #0
   b4170:	f007 fe6e 	bl	bbe50 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4174:	4b06      	ldr	r3, [pc, #24]	; (b4190 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b4176:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4178:	2301      	movs	r3, #1
   b417a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b417c:	692b      	ldr	r3, [r5, #16]
   b417e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4180:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b4182:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4184:	612c      	str	r4, [r5, #16]
   b4186:	e7e9      	b.n	b415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4188:	7528      	strb	r0, [r5, #20]
                return *this;
   b418a:	e7e7      	b.n	b415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b418c:	000bd2f4 	.word	0x000bd2f4
   b4190:	00030010 	.word	0x00030010

000b4194 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4194:	b40e      	push	{r1, r2, r3}
   b4196:	b500      	push	{lr}
   b4198:	b08c      	sub	sp, #48	; 0x30
   b419a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b419c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b41a0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b41a4:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41a6:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b41aa:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41ac:	6801      	ldr	r1, [r0, #0]
   b41ae:	aa04      	add	r2, sp, #16
   b41b0:	201e      	movs	r0, #30
    attr.flags = 0;
   b41b2:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41b6:	f003 fe17 	bl	b7de8 <log_message_v>
}
   b41ba:	b00c      	add	sp, #48	; 0x30
   b41bc:	f85d eb04 	ldr.w	lr, [sp], #4
   b41c0:	b003      	add	sp, #12
   b41c2:	4770      	bx	lr

000b41c4 <setup>:
void setup() {
   b41c4:	b530      	push	{r4, r5, lr}
	delay(5000);	// Wait for serial 
   b41c6:	f241 3088 	movw	r0, #5000	; 0x1388
void setup() {
   b41ca:	b089      	sub	sp, #36	; 0x24
	delay(5000);	// Wait for serial 
   b41cc:	f003 ffb0 	bl	b8130 <delay>
    initializePinModes();                           // Sets the pinModes
   b41d0:	f000 fdf4 	bl	b4dbc <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b41d4:	f000 fe1e 	bl	b4e14 <_Z18initializePowerCfgv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   b41d8:	f001 f8cc 	bl	b5374 <_Z18storageObjectStartv>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b41dc:	4841      	ldr	r0, [pc, #260]	; (b42e4 <setup+0x120>)
  	Log.info("Startup complete with %s time and with battery %4.2f", (Time.isValid())? "valid" : "invalid", System.batteryCharge());
   b41de:	4d42      	ldr	r5, [pc, #264]	; (b42e8 <setup+0x124>)
   b41e0:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b41e2:	2101      	movs	r1, #1
   b41e4:	8143      	strh	r3, [r0, #10]
   b41e6:	f001 ffaf 	bl	b6148 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b41ea:	217c      	movs	r1, #124	; 0x7c
   b41ec:	483d      	ldr	r0, [pc, #244]	; (b42e4 <setup+0x120>)
   b41ee:	f001 fc17 	bl	b5a20 <_ZN6AB18056setWDTEi>
	initializeLoRA(false);								// Start the LoRA radio - Node
   b41f2:	2000      	movs	r0, #0
   b41f4:	f000 fb22 	bl	b483c <_Z14initializeLoRAb>
  	Log.info("Startup complete with %s time and with battery %4.2f", (Time.isValid())? "valid" : "invalid", System.batteryCharge());
   b41f8:	f006 fdd0 	bl	bad9c <_ZN9TimeClass7isValidEv>
   b41fc:	4b3b      	ldr	r3, [pc, #236]	; (b42ec <setup+0x128>)
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b41fe:	2200      	movs	r2, #0
   b4200:	2800      	cmp	r0, #0
   b4202:	bf08      	it	eq
   b4204:	461d      	moveq	r5, r3
    const int ret = diag_get_source(id, &src, nullptr);
   b4206:	a904      	add	r1, sp, #16
   b4208:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   b420a:	9204      	str	r2, [sp, #16]
    const int ret = diag_get_source(id, &src, nullptr);
   b420c:	f003 fe04 	bl	b7e18 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b4210:	2800      	cmp	r0, #0
   b4212:	d163      	bne.n	b42dc <setup+0x118>
        return ret;
    }
    return get(src, val);
   b4214:	9c04      	ldr	r4, [sp, #16]
    SPARK_ASSERT(src && src->callback);
   b4216:	b10c      	cbz	r4, b421c <setup+0x58>
   b4218:	6923      	ldr	r3, [r4, #16]
   b421a:	b923      	cbnz	r3, b4226 <setup+0x62>
   b421c:	4a34      	ldr	r2, [pc, #208]	; (b42f0 <setup+0x12c>)
   b421e:	4935      	ldr	r1, [pc, #212]	; (b42f4 <setup+0x130>)
   b4220:	200a      	movs	r0, #10
   b4222:	f003 fdd1 	bl	b7dc8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b4226:	230c      	movs	r3, #12
   b4228:	9305      	str	r3, [sp, #20]
   b422a:	446b      	add	r3, sp
   b422c:	9306      	str	r3, [sp, #24]
   b422e:	2304      	movs	r3, #4
   b4230:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b4232:	aa05      	add	r2, sp, #20
   b4234:	6923      	ldr	r3, [r4, #16]
   b4236:	2101      	movs	r1, #1
   b4238:	4620      	mov	r0, r4
   b423a:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b423c:	2800      	cmp	r0, #0
   b423e:	d14d      	bne.n	b42dc <setup+0x118>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b4240:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4244:	ee07 3a90 	vmov	s15, r3
   b4248:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b424c:	ee17 0a90 	vmov	r0, s15
   b4250:	f007 fa34 	bl	bb6bc <__aeabi_f2d>
   b4254:	462a      	mov	r2, r5
   b4256:	e9cd 0100 	strd	r0, r1, [sp]
   b425a:	4927      	ldr	r1, [pc, #156]	; (b42f8 <setup+0x134>)
   b425c:	4827      	ldr	r0, [pc, #156]	; (b42fc <setup+0x138>)
  	if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   b425e:	4c28      	ldr	r4, [pc, #160]	; (b4300 <setup+0x13c>)
  	Log.info("Startup complete with %s time and with battery %4.2f", (Time.isValid())? "valid" : "invalid", System.batteryCharge());
   b4260:	f7ff ff98 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
  	if (Time.day() != Time.day(current.lastCountTime)) {                 // Check to see if the device was last on in a different day
   b4264:	f006 fdc8 	bl	badf8 <_ZN9TimeClass3dayEv>
   b4268:	2100      	movs	r1, #0
   b426a:	4605      	mov	r5, r0
   b426c:	69e0      	ldr	r0, [r4, #28]
   b426e:	f006 fc91 	bl	bab94 <_ZN9TimeClass3dayEx>
   b4272:	4285      	cmp	r5, r0
   b4274:	d001      	beq.n	b427a <setup+0xb6>
    	resetEverything();                                               // Zero the counts for the new day
   b4276:	f000 ffc5 	bl	b5204 <_Z15resetEverythingv>
	if (sysStatus.nodeNumber < 10) {
   b427a:	4b22      	ldr	r3, [pc, #136]	; (b4304 <setup+0x140>)
   b427c:	885a      	ldrh	r2, [r3, #2]
   b427e:	2a09      	cmp	r2, #9
		current.alertCodeNode = 1; // For testing
   b4280:	bf9f      	itttt	ls
   b4282:	2201      	movls	r2, #1
   b4284:	f884 2024 	strbls.w	r2, [r4, #36]	; 0x24
		sysStatus.nextReportSeconds = 10;
   b4288:	220a      	movls	r2, #10
   b428a:	835a      	strhls	r2, [r3, #26]
  	takeMeasurements();                                                  // Populates values so you can read them before the hour
   b428c:	f001 f99a 	bl	b55c4 <_Z16takeMeasurementsv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     	// Pressure Sensor interrupt from low to high
   b4290:	481d      	ldr	r0, [pc, #116]	; (b4308 <setup+0x144>)
   b4292:	491e      	ldr	r1, [pc, #120]	; (b430c <setup+0x148>)
   b4294:	8800      	ldrh	r0, [r0, #0]
   b4296:	2500      	movs	r5, #0
   b4298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b429c:	2201      	movs	r2, #1
   b429e:	9500      	str	r5, [sp, #0]
   b42a0:	f004 fd0c 	bl	b8cbc <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b42a4:	481a      	ldr	r0, [pc, #104]	; (b4310 <setup+0x14c>)
   b42a6:	491b      	ldr	r1, [pc, #108]	; (b4314 <setup+0x150>)
   b42a8:	8800      	ldrh	r0, [r0, #0]
   b42aa:	9500      	str	r5, [sp, #0]
   b42ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b42b0:	462a      	mov	r2, r5
   b42b2:	f004 fd03 	bl	b8cbc <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;               // IDLE unless otherwise from above code
   b42b6:	4b18      	ldr	r3, [pc, #96]	; (b4318 <setup+0x154>)
   b42b8:	781a      	ldrb	r2, [r3, #0]
   b42ba:	b90a      	cbnz	r2, b42c0 <setup+0xfc>
   b42bc:	2204      	movs	r2, #4
   b42be:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", current.alertCodeNode);
   b42c0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   b42c4:	4915      	ldr	r1, [pc, #84]	; (b431c <setup+0x158>)
   b42c6:	480d      	ldr	r0, [pc, #52]	; (b42fc <setup+0x138>)
   b42c8:	f7ff ff64 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                           // Signal the end of startup
   b42cc:	4b14      	ldr	r3, [pc, #80]	; (b4320 <setup+0x15c>)
   b42ce:	8818      	ldrh	r0, [r3, #0]
   b42d0:	2100      	movs	r1, #0
}
   b42d2:	b009      	add	sp, #36	; 0x24
   b42d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  	digitalWrite(BLUE_LED,LOW);                                           // Signal the end of startup
   b42d8:	f006 bf8b 	b.w	bb1f2 <digitalWrite>
            return -1.0f;
   b42dc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b42e0:	e7b4      	b.n	b424c <setup+0x88>
   b42e2:	bf00      	nop
   b42e4:	2003def4 	.word	0x2003def4
   b42e8:	000bc25b 	.word	0x000bc25b
   b42ec:	000bc259 	.word	0x000bc259
   b42f0:	000b7a39 	.word	0x000b7a39
   b42f4:	000bc261 	.word	0x000bc261
   b42f8:	000bc287 	.word	0x000bc287
   b42fc:	2003e654 	.word	0x2003e654
   b4300:	2003e370 	.word	0x2003e370
   b4304:	2003e3a0 	.word	0x2003e3a0
   b4308:	000bc840 	.word	0x000bc840
   b430c:	000b40d9 	.word	0x000b40d9
   b4310:	000bc83e 	.word	0x000bc83e
   b4314:	000b40cd 	.word	0x000b40cd
   b4318:	2003df4b 	.word	0x2003df4b
   b431c:	000bc2bc 	.word	0x000bc2bc
   b4320:	000bc83c 	.word	0x000bc83c

000b4324 <_Z22publishStateTransitionv>:
{
   b4324:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4326:	4e1b      	ldr	r6, [pc, #108]	; (b4394 <_Z22publishStateTransitionv+0x70>)
   b4328:	4c1b      	ldr	r4, [pc, #108]	; (b4398 <_Z22publishStateTransitionv+0x74>)
   b432a:	7832      	ldrb	r2, [r6, #0]
   b432c:	4d1b      	ldr	r5, [pc, #108]	; (b439c <_Z22publishStateTransitionv+0x78>)
   b432e:	2a02      	cmp	r2, #2
{
   b4330:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b4332:	d126      	bne.n	b4382 <_Z22publishStateTransitionv+0x5e>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4334:	f006 fd32 	bl	bad9c <_ZN9TimeClass7isValidEv>
   b4338:	7832      	ldrb	r2, [r6, #0]
   b433a:	782b      	ldrb	r3, [r5, #0]
   b433c:	b958      	cbnz	r0, b4356 <_Z22publishStateTransitionv+0x32>
   b433e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4342:	9200      	str	r2, [sp, #0]
   b4344:	4a16      	ldr	r2, [pc, #88]	; (b43a0 <_Z22publishStateTransitionv+0x7c>)
   b4346:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b434a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b434e:	a802      	add	r0, sp, #8
   b4350:	f003 fe96 	bl	b8080 <snprintf>
   b4354:	e00d      	b.n	b4372 <_Z22publishStateTransitionv+0x4e>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],sysStatus.nextReportSeconds);
   b4356:	4913      	ldr	r1, [pc, #76]	; (b43a4 <_Z22publishStateTransitionv+0x80>)
   b4358:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b435c:	8b49      	ldrh	r1, [r1, #26]
   b435e:	9101      	str	r1, [sp, #4]
   b4360:	9200      	str	r2, [sp, #0]
   b4362:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4366:	4a10      	ldr	r2, [pc, #64]	; (b43a8 <_Z22publishStateTransitionv+0x84>)
   b4368:	f44f 7180 	mov.w	r1, #256	; 0x100
   b436c:	a802      	add	r0, sp, #8
   b436e:	f003 fe87 	bl	b8080 <snprintf>
	oldState = state;
   b4372:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4374:	480d      	ldr	r0, [pc, #52]	; (b43ac <_Z22publishStateTransitionv+0x88>)
	oldState = state;
   b4376:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4378:	a902      	add	r1, sp, #8
   b437a:	f7ff ff0b 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
}
   b437e:	b042      	add	sp, #264	; 0x108
   b4380:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4382:	782b      	ldrb	r3, [r5, #0]
   b4384:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4388:	9200      	str	r2, [sp, #0]
   b438a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b438e:	4a08      	ldr	r2, [pc, #32]	; (b43b0 <_Z22publishStateTransitionv+0x8c>)
   b4390:	e7db      	b.n	b434a <_Z22publishStateTransitionv+0x26>
   b4392:	bf00      	nop
   b4394:	2003df4b 	.word	0x2003df4b
   b4398:	2003dd2c 	.word	0x2003dd2c
   b439c:	2003df48 	.word	0x2003df48
   b43a0:	000bc2ed 	.word	0x000bc2ed
   b43a4:	2003e3a0 	.word	0x2003e3a0
   b43a8:	000bc30d 	.word	0x000bc30d
   b43ac:	2003e654 	.word	0x2003e654
   b43b0:	000bc32a 	.word	0x000bc32a

000b43b4 <_Z20secondsTillNextEventv>:

int secondsTillNextEvent() {										// This is the node version
   b43b4:	b570      	push	{r4, r5, r6, lr}
	int returnSeconds = 60;

	if (Time.isValid()) {											// We may need to sleep when time is not valid
   b43b6:	f006 fcf1 	bl	bad9c <_ZN9TimeClass7isValidEv>
   b43ba:	b908      	cbnz	r0, b43c0 <_Z20secondsTillNextEventv+0xc>
		if (sysStatus.nextReportSeconds > (Time.now() - sysStatus.lastConnection)) {						// If this is false, we missed the last event.
			return (sysStatus.nextReportSeconds - (Time.now() - sysStatus.lastConnection) + 5);  			// sleep till next event - Add 5 seconds so it does not miss the gateway
		}
	}

	return returnSeconds;
   b43bc:	203c      	movs	r0, #60	; 0x3c
}
   b43be:	bd70      	pop	{r4, r5, r6, pc}
		if (sysStatus.nextReportSeconds > (Time.now() - sysStatus.lastConnection)) {						// If this is false, we missed the last event.
   b43c0:	4d07      	ldr	r5, [pc, #28]	; (b43e0 <_Z20secondsTillNextEventv+0x2c>)
   b43c2:	8b6e      	ldrh	r6, [r5, #26]
   b43c4:	f006 fd07 	bl	badd6 <_ZN9TimeClass3nowEv>
   b43c8:	696c      	ldr	r4, [r5, #20]
   b43ca:	1b00      	subs	r0, r0, r4
   b43cc:	4286      	cmp	r6, r0
   b43ce:	d9f5      	bls.n	b43bc <_Z20secondsTillNextEventv+0x8>
			return (sysStatus.nextReportSeconds - (Time.now() - sysStatus.lastConnection) + 5);  			// sleep till next event - Add 5 seconds so it does not miss the gateway
   b43d0:	8b6d      	ldrh	r5, [r5, #26]
   b43d2:	f006 fd00 	bl	badd6 <_ZN9TimeClass3nowEv>
   b43d6:	3405      	adds	r4, #5
   b43d8:	442c      	add	r4, r5
   b43da:	1a20      	subs	r0, r4, r0
   b43dc:	e7ef      	b.n	b43be <_Z20secondsTillNextEventv+0xa>
   b43de:	bf00      	nop
   b43e0:	2003e3a0 	.word	0x2003e3a0

000b43e4 <loop>:
void loop() {
   b43e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (state) {
   b43e8:	4d9f      	ldr	r5, [pc, #636]	; (b4668 <loop+0x284>)
   b43ea:	782b      	ldrb	r3, [r5, #0]
   b43ec:	3b01      	subs	r3, #1
void loop() {
   b43ee:	b08a      	sub	sp, #40	; 0x28
   b43f0:	2b03      	cmp	r3, #3
   b43f2:	f200 80c7 	bhi.w	b4584 <loop+0x1a0>
   b43f6:	e8df f013 	tbh	[pc, r3, lsl #1]
   b43fa:	0169      	.short	0x0169
   b43fc:	00260004 	.word	0x00260004
   b4400:	00ee      	.short	0x00ee
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4402:	4b9a      	ldr	r3, [pc, #616]	; (b466c <loop+0x288>)
   b4404:	781b      	ldrb	r3, [r3, #0]
   b4406:	2b02      	cmp	r3, #2
   b4408:	d001      	beq.n	b440e <loop+0x2a>
   b440a:	f7ff ff8b 	bl	b4324 <_Z22publishStateTransitionv>
			if ((Time.now() - lastPublish) > sysStatus.nextReportSeconds) {
   b440e:	f006 fce2 	bl	badd6 <_ZN9TimeClass3nowEv>
   b4412:	4997      	ldr	r1, [pc, #604]	; (b4670 <loop+0x28c>)
   b4414:	e9d1 2100 	ldrd	r2, r1, [r1]
   b4418:	17c3      	asrs	r3, r0, #31
   b441a:	1a80      	subs	r0, r0, r2
   b441c:	4a95      	ldr	r2, [pc, #596]	; (b4674 <loop+0x290>)
   b441e:	8b52      	ldrh	r2, [r2, #26]
   b4420:	eb63 0301 	sbc.w	r3, r3, r1
   b4424:	4282      	cmp	r2, r0
   b4426:	f04f 0200 	mov.w	r2, #0
   b442a:	eb72 0303 	sbcs.w	r3, r2, r3
   b442e:	da08      	bge.n	b4442 <loop+0x5e>
				if (current.alertCodeNode) state = ERROR_STATE;
   b4430:	4b91      	ldr	r3, [pc, #580]	; (b4678 <loop+0x294>)
   b4432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   b4436:	b113      	cbz	r3, b443e <loop+0x5a>
   b4438:	2301      	movs	r3, #1
			state = IDLE_STATE;
   b443a:	702b      	strb	r3, [r5, #0]
   b443c:	e0a2      	b.n	b4584 <loop+0x1a0>
				else state = LoRA_STATE;		   								// If time is valid - wake on the right minute of the hour
   b443e:	2304      	movs	r3, #4
   b4440:	e7fb      	b.n	b443a <loop+0x56>
			else state = SLEEPING_STATE;										// If we have time, let's take a nap
   b4442:	2303      	movs	r3, #3
   b4444:	e7f9      	b.n	b443a <loop+0x56>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4446:	4b89      	ldr	r3, [pc, #548]	; (b466c <loop+0x288>)
   b4448:	781b      	ldrb	r3, [r3, #0]
   b444a:	2b03      	cmp	r3, #3
   b444c:	d001      	beq.n	b4452 <loop+0x6e>
   b444e:	f7ff ff69 	bl	b4324 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4452:	2100      	movs	r1, #0
   b4454:	4889      	ldr	r0, [pc, #548]	; (b467c <loop+0x298>)
   b4456:	f001 fae3 	bl	b5a20 <_ZN6AB18056setWDTEi>
			wakeInSeconds = secondsTillNextEvent();								// Figure out how long to sleep 
   b445a:	f7ff ffab 	bl	b43b4 <_Z20secondsTillNextEventv>
   b445e:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b4460:	f006 fc9c 	bl	bad9c <_ZN9TimeClass7isValidEv>
   b4464:	4604      	mov	r4, r0
   b4466:	2800      	cmp	r0, #0
   b4468:	d038      	beq.n	b44dc <loop+0xf8>
   b446a:	f006 fcb4 	bl	badd6 <_ZN9TimeClass3nowEv>
   b446e:	19c2      	adds	r2, r0, r7
   b4470:	17d3      	asrs	r3, r2, #31
   b4472:	a806      	add	r0, sp, #24
   b4474:	f006 fbaa 	bl	babcc <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4478:	9b06      	ldr	r3, [sp, #24]
   b447a:	4981      	ldr	r1, [pc, #516]	; (b4680 <loop+0x29c>)
   b447c:	4881      	ldr	r0, [pc, #516]	; (b4684 <loop+0x2a0>)
   b447e:	463a      	mov	r2, r7
   b4480:	f7ff fe88 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b4484:	b114      	cbz	r4, b448c <loop+0xa8>
   b4486:	a806      	add	r0, sp, #24
   b4488:	f006 f9b0 	bl	ba7ec <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b448c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4490:	f003 fe4e 	bl	b8130 <delay>
        if (valid_) {
   b4494:	4b7c      	ldr	r3, [pc, #496]	; (b4688 <loop+0x2a4>)
   b4496:	7d1a      	ldrb	r2, [r3, #20]
   b4498:	b10a      	cbz	r2, b449e <loop+0xba>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b449a:	2202      	movs	r2, #2
   b449c:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b449e:	4b7b      	ldr	r3, [pc, #492]	; (b468c <loop+0x2a8>)
   b44a0:	4879      	ldr	r0, [pc, #484]	; (b4688 <loop+0x2a4>)
   b44a2:	f8b3 9000 	ldrh.w	r9, [r3]
   b44a6:	2200      	movs	r2, #0
   b44a8:	4649      	mov	r1, r9
   b44aa:	f7ff fe3f 	bl	b412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b44ae:	4b78      	ldr	r3, [pc, #480]	; (b4690 <loop+0x2ac>)
   b44b0:	f8b3 a000 	ldrh.w	sl, [r3]
   b44b4:	2201      	movs	r2, #1
   b44b6:	4651      	mov	r1, sl
   b44b8:	f7ff fe38 	bl	b412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b44bc:	7d03      	ldrb	r3, [r0, #20]
   b44be:	4606      	mov	r6, r0
   b44c0:	b313      	cbz	r3, b4508 <loop+0x124>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b44c2:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b44c4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b44c8:	68db      	ldr	r3, [r3, #12]
   b44ca:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b44ce:	b13b      	cbz	r3, b44e0 <loop+0xfc>
            if (start->type == type) {
   b44d0:	889a      	ldrh	r2, [r3, #4]
   b44d2:	2a04      	cmp	r2, #4
   b44d4:	f000 8161 	beq.w	b479a <loop+0x3b6>
            start = start->next;
   b44d8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b44da:	e7f8      	b.n	b44ce <loop+0xea>
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b44dc:	4b6d      	ldr	r3, [pc, #436]	; (b4694 <loop+0x2b0>)
   b44de:	e7cc      	b.n	b447a <loop+0x96>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b44e0:	496d      	ldr	r1, [pc, #436]	; (b4698 <loop+0x2b4>)
   b44e2:	2010      	movs	r0, #16
   b44e4:	f006 ff7e 	bl	bb3e4 <_ZnwjRKSt9nothrow_t>
   b44e8:	4604      	mov	r4, r0
   b44ea:	2800      	cmp	r0, #0
   b44ec:	f000 8153 	beq.w	b4796 <loop+0x3b2>
   b44f0:	2210      	movs	r2, #16
   b44f2:	2100      	movs	r1, #0
   b44f4:	f007 fcac 	bl	bbe50 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b44f8:	4b68      	ldr	r3, [pc, #416]	; (b469c <loop+0x2b8>)
   b44fa:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b44fc:	2304      	movs	r3, #4
   b44fe:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4500:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b4502:	e9c4 3802 	strd	r3, r8, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4506:	6134      	str	r4, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b4508:	495f      	ldr	r1, [pc, #380]	; (b4688 <loop+0x2a4>)
   b450a:	a803      	add	r0, sp, #12
   b450c:	f006 fa7a 	bl	baa04 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4510:	485a      	ldr	r0, [pc, #360]	; (b467c <loop+0x298>)
   b4512:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4516:	f001 fa83 	bl	b5a20 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b451a:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b451c:	2b00      	cmp	r3, #0
   b451e:	d051      	beq.n	b45c4 <loop+0x1e0>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4520:	889a      	ldrh	r2, [r3, #4]
   b4522:	2a01      	cmp	r2, #1
   b4524:	d14e      	bne.n	b45c4 <loop+0x1e0>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b4526:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b4528:	4599      	cmp	r9, r3
   b452a:	d14e      	bne.n	b45ca <loop+0x1e6>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   b452c:	495c      	ldr	r1, [pc, #368]	; (b46a0 <loop+0x2bc>)
   b452e:	a806      	add	r0, sp, #24
   b4530:	f006 f9a7 	bl	ba882 <_ZN6StringC1EPK19__FlashStringHelper>
   b4534:	a806      	add	r0, sp, #24
   b4536:	f000 fced 	bl	b4f14 <_Z15setLowPowerMode6String>
   b453a:	a806      	add	r0, sp, #24
   b453c:	f006 f956 	bl	ba7ec <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   b4540:	4958      	ldr	r1, [pc, #352]	; (b46a4 <loop+0x2c0>)
   b4542:	4850      	ldr	r0, [pc, #320]	; (b4684 <loop+0x2a0>)
   b4544:	f7ff fe26 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
			state = IDLE_STATE;
   b4548:	2302      	movs	r3, #2
			delay(10000);					// Debugging 
   b454a:	f242 7010 	movw	r0, #10000	; 0x2710
			state = IDLE_STATE;
   b454e:	702b      	strb	r3, [r5, #0]
			delay(10000);					// Debugging 
   b4550:	f003 fdee 	bl	b8130 <delay>
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b4554:	f006 fc3f 	bl	badd6 <_ZN9TimeClass3nowEv>
   b4558:	19c2      	adds	r2, r0, r7
   b455a:	17d3      	asrs	r3, r2, #31
   b455c:	a806      	add	r0, sp, #24
   b455e:	f006 fb35 	bl	babcc <_ZN9TimeClass7timeStrEx>
   b4562:	9a06      	ldr	r2, [sp, #24]
   b4564:	9201      	str	r2, [sp, #4]
   b4566:	f006 faad 	bl	baac4 <_ZN11SystemClass10freeMemoryEv>
   b456a:	9a01      	ldr	r2, [sp, #4]
   b456c:	494e      	ldr	r1, [pc, #312]	; (b46a8 <loop+0x2c4>)
   b456e:	4603      	mov	r3, r0
   b4570:	4844      	ldr	r0, [pc, #272]	; (b4684 <loop+0x2a0>)
   b4572:	f7ff fe0f 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b4576:	a806      	add	r0, sp, #24
   b4578:	f006 f938 	bl	ba7ec <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b457c:	9803      	ldr	r0, [sp, #12]
   b457e:	b108      	cbz	r0, b4584 <loop+0x1a0>
            free(wakeupSource_);
   b4580:	f003 fd66 	bl	b8050 <free>
	ab1805.loop();                                  							// Keeps the RTC synchronized with the Boron's clock
   b4584:	483d      	ldr	r0, [pc, #244]	; (b467c <loop+0x298>)
   b4586:	f001 fcf9 	bl	b5f7c <_ZN6AB18054loopEv>
	storageObjectLoop();   // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   b458a:	f000 fe5b 	bl	b5244 <_Z17storageObjectLoopv>
	if (rescueMode) {
   b458e:	4b47      	ldr	r3, [pc, #284]	; (b46ac <loop+0x2c8>)
   b4590:	781a      	ldrb	r2, [r3, #0]
   b4592:	b15a      	cbz	r2, b45ac <loop+0x1c8>
		rescueMode = false;
   b4594:	2200      	movs	r2, #0
   b4596:	701a      	strb	r2, [r3, #0]
		sysStatus.nextReportSeconds = 60;										// Rescue mode publish evert minute until we can connect
   b4598:	4b36      	ldr	r3, [pc, #216]	; (b4674 <loop+0x290>)
		Log.info("Send failed - going to send every minute");
   b459a:	483a      	ldr	r0, [pc, #232]	; (b4684 <loop+0x2a0>)
		sysStatus.lowPowerMode = false;
   b459c:	721a      	strb	r2, [r3, #8]
		sysStatus.nextReportSeconds = 60;										// Rescue mode publish evert minute until we can connect
   b459e:	213c      	movs	r1, #60	; 0x3c
   b45a0:	8359      	strh	r1, [r3, #26]
		Log.info("Send failed - going to send every minute");
   b45a2:	4943      	ldr	r1, [pc, #268]	; (b46b0 <loop+0x2cc>)
   b45a4:	f7ff fdf6 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		state = IDLE_STATE;
   b45a8:	2302      	movs	r3, #2
   b45aa:	702b      	strb	r3, [r5, #0]
	if (sensorDetect) {															// Count the pulse and reset for next
   b45ac:	4b41      	ldr	r3, [pc, #260]	; (b46b4 <loop+0x2d0>)
   b45ae:	781a      	ldrb	r2, [r3, #0]
   b45b0:	2a00      	cmp	r2, #0
   b45b2:	f000 80f5 	beq.w	b47a0 <loop+0x3bc>
		sensorDetect = false;
   b45b6:	2200      	movs	r2, #0
   b45b8:	701a      	strb	r2, [r3, #0]
}
   b45ba:	b00a      	add	sp, #40	; 0x28
   b45bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		recordCount();
   b45c0:	f001 b82e 	b.w	b5620 <_Z11recordCountv>
            return std::numeric_limits<pin_t>::max();
   b45c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b45c8:	e7ae      	b.n	b4528 <loop+0x144>
			else if (result.wakeupPin() == INT_PIN) sensorDetect = true;
   b45ca:	459a      	cmp	sl, r3
   b45cc:	bf02      	ittt	eq
   b45ce:	4b39      	ldreq	r3, [pc, #228]	; (b46b4 <loop+0x2d0>)
   b45d0:	2201      	moveq	r2, #1
   b45d2:	701a      	strbeq	r2, [r3, #0]
   b45d4:	e7b8      	b.n	b4548 <loop+0x164>
			if (state != oldState) {
   b45d6:	4b25      	ldr	r3, [pc, #148]	; (b466c <loop+0x288>)
   b45d8:	4c34      	ldr	r4, [pc, #208]	; (b46ac <loop+0x2c8>)
   b45da:	781b      	ldrb	r3, [r3, #0]
   b45dc:	2b04      	cmp	r3, #4
   b45de:	d014      	beq.n	b460a <loop+0x226>
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b45e0:	f7ff fea0 	bl	b4324 <_Z22publishStateTransitionv>
				takeMeasurements();
   b45e4:	f000 ffee 	bl	b55c4 <_Z16takeMeasurementsv>
				lastPublish = Time.now();
   b45e8:	f006 fbf5 	bl	badd6 <_ZN9TimeClass3nowEv>
   b45ec:	4b20      	ldr	r3, [pc, #128]	; (b4670 <loop+0x28c>)
   b45ee:	17c2      	asrs	r2, r0, #31
   b45f0:	e9c3 0200 	strd	r0, r2, [r3]
				if (!composeDataReportNode()) {
   b45f4:	f000 f978 	bl	b48e8 <_Z21composeDataReportNodev>
   b45f8:	b938      	cbnz	r0, b460a <loop+0x226>
					rescueMode = true;											// Initiate sending report
   b45fa:	2301      	movs	r3, #1
					Log.info("Failed in send and rescue is %s", (rescueMode) ? "On" : "Off");
   b45fc:	4a2e      	ldr	r2, [pc, #184]	; (b46b8 <loop+0x2d4>)
   b45fe:	492f      	ldr	r1, [pc, #188]	; (b46bc <loop+0x2d8>)
   b4600:	4820      	ldr	r0, [pc, #128]	; (b4684 <loop+0x2a0>)
					rescueMode = true;											// Initiate sending report
   b4602:	7023      	strb	r3, [r4, #0]
					Log.info("Failed in send and rescue is %s", (rescueMode) ? "On" : "Off");
   b4604:	f7ff fdc6 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
					break;
   b4608:	e7bc      	b.n	b4584 <loop+0x1a0>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b460a:	f003 fa1d 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b460e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; b46b8 <loop+0x2d4>
   b4612:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b46c8 <loop+0x2e4>
   b4616:	4f1b      	ldr	r7, [pc, #108]	; (b4684 <loop+0x2a0>)
   b4618:	4606      	mov	r6, r0
   b461a:	f003 fa15 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
			while (millis() - startListening < 10000) {
   b461e:	f242 730f 	movw	r3, #9999	; 0x270f
   b4622:	1b80      	subs	r0, r0, r6
   b4624:	4298      	cmp	r0, r3
   b4626:	d8ad      	bhi.n	b4584 <loop+0x1a0>
				if (listenForLoRAMessageNode()) {									// Listen for acknowledgement
   b4628:	f000 fb50 	bl	b4ccc <_Z24listenForLoRAMessageNodev>
   b462c:	b198      	cbz	r0, b4656 <loop+0x272>
					current.hourlyCount = 0;										// Zero the hourly count
   b462e:	4a12      	ldr	r2, [pc, #72]	; (b4678 <loop+0x294>)
   b4630:	2300      	movs	r3, #0
   b4632:	8413      	strh	r3, [r2, #32]
					rescueMode = false;
   b4634:	7023      	strb	r3, [r4, #0]
					sysStatus.lastConnection = Time.now();
   b4636:	f006 fbce 	bl	badd6 <_ZN9TimeClass3nowEv>
   b463a:	4b0e      	ldr	r3, [pc, #56]	; (b4674 <loop+0x290>)
					Log.info("Send and Ack succeeded and rescue is %s", (rescueMode) ? "On" : "Off");
   b463c:	7821      	ldrb	r1, [r4, #0]
					sysStatus.lastConnection = Time.now();
   b463e:	6158      	str	r0, [r3, #20]
					Log.info("Send and Ack succeeded and rescue is %s", (rescueMode) ? "On" : "Off");
   b4640:	4a1d      	ldr	r2, [pc, #116]	; (b46b8 <loop+0x2d4>)
   b4642:	4b1f      	ldr	r3, [pc, #124]	; (b46c0 <loop+0x2dc>)
   b4644:	480f      	ldr	r0, [pc, #60]	; (b4684 <loop+0x2a0>)
   b4646:	2900      	cmp	r1, #0
   b4648:	bf08      	it	eq
   b464a:	461a      	moveq	r2, r3
   b464c:	491d      	ldr	r1, [pc, #116]	; (b46c4 <loop+0x2e0>)
   b464e:	f7ff fda1 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
			state = IDLE_STATE;
   b4652:	2302      	movs	r3, #2
   b4654:	e6f1      	b.n	b443a <loop+0x56>
					rescueMode = true;
   b4656:	2301      	movs	r3, #1
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b4658:	464a      	mov	r2, r9
   b465a:	4641      	mov	r1, r8
   b465c:	4638      	mov	r0, r7
					rescueMode = true;
   b465e:	7023      	strb	r3, [r4, #0]
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b4660:	f7ff fd98 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
			while (millis() - startListening < 10000) {
   b4664:	e7d9      	b.n	b461a <loop+0x236>
   b4666:	bf00      	nop
   b4668:	2003df4b 	.word	0x2003df4b
   b466c:	2003df48 	.word	0x2003df48
   b4670:	2003df40 	.word	0x2003df40
   b4674:	2003e3a0 	.word	0x2003e3a0
   b4678:	2003e370 	.word	0x2003e370
   b467c:	2003def4 	.word	0x2003def4
   b4680:	000bc33f 	.word	0x000bc33f
   b4684:	2003e654 	.word	0x2003e654
   b4688:	2003df14 	.word	0x2003df14
   b468c:	000bc83e 	.word	0x000bc83e
   b4690:	000bc840 	.word	0x000bc840
   b4694:	000bcabc 	.word	0x000bcabc
   b4698:	000bd2f4 	.word	0x000bd2f4
   b469c:	00030010 	.word	0x00030010
   b46a0:	000bc368 	.word	0x000bc368
   b46a4:	000bc36a 	.word	0x000bc36a
   b46a8:	000bc394 	.word	0x000bc394
   b46ac:	2003df49 	.word	0x2003df49
   b46b0:	000bc41c 	.word	0x000bc41c
   b46b4:	2003df4a 	.word	0x2003df4a
   b46b8:	000bc338 	.word	0x000bc338
   b46bc:	000bc3b5 	.word	0x000bc3b5
   b46c0:	000bc33b 	.word	0x000bc33b
   b46c4:	000bc3d5 	.word	0x000bc3d5
   b46c8:	000bc3fd 	.word	0x000bc3fd
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b46cc:	4b36      	ldr	r3, [pc, #216]	; (b47a8 <loop+0x3c4>)
   b46ce:	781b      	ldrb	r3, [r3, #0]
   b46d0:	2b01      	cmp	r3, #1
   b46d2:	d001      	beq.n	b46d8 <loop+0x2f4>
   b46d4:	f7ff fe26 	bl	b4324 <_Z22publishStateTransitionv>
			switch (current.alertCodeNode)
   b46d8:	4c34      	ldr	r4, [pc, #208]	; (b47ac <loop+0x3c8>)
   b46da:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   b46de:	2b01      	cmp	r3, #1
   b46e0:	d02b      	beq.n	b473a <loop+0x356>
   b46e2:	2b02      	cmp	r3, #2
   b46e4:	d1b5      	bne.n	b4652 <loop+0x26e>
					if(composeAlertReportNode()) {
   b46e6:	f000 fa51 	bl	b4b8c <_Z22composeAlertReportNodev>
   b46ea:	2800      	cmp	r0, #0
   b46ec:	d04f      	beq.n	b478e <loop+0x3aa>
   b46ee:	f003 f9ab 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
								lastPublish = Time.now();
   b46f2:	4f2f      	ldr	r7, [pc, #188]	; (b47b0 <loop+0x3cc>)
								rescueMode = false;
   b46f4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; b47b4 <loop+0x3d0>
								sysStatus.lastConnection = Time.now();
   b46f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b47b8 <loop+0x3d4>
   b46fc:	4606      	mov	r6, r0
						while (millis() - startListening < 3000) {
   b46fe:	f640 3ab7 	movw	sl, #2999	; 0xbb7
   b4702:	f003 f9a1 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b4706:	1b80      	subs	r0, r0, r6
   b4708:	4550      	cmp	r0, sl
   b470a:	d8a2      	bhi.n	b4652 <loop+0x26e>
							if (listenForLoRAMessageNode()) {
   b470c:	f000 fade 	bl	b4ccc <_Z24listenForLoRAMessageNodev>
   b4710:	2800      	cmp	r0, #0
   b4712:	d0f6      	beq.n	b4702 <loop+0x31e>
								lastPublish = Time.now();
   b4714:	f006 fb5f 	bl	badd6 <_ZN9TimeClass3nowEv>
								rescueMode = false;
   b4718:	f04f 0a00 	mov.w	sl, #0
								lastPublish = Time.now();
   b471c:	17c3      	asrs	r3, r0, #31
   b471e:	e9c7 0300 	strd	r0, r3, [r7]
								rescueMode = false;
   b4722:	f889 a000 	strb.w	sl, [r9]
								sysStatus.lastConnection = Time.now();
   b4726:	f006 fb56 	bl	badd6 <_ZN9TimeClass3nowEv>
   b472a:	f8c8 0014 	str.w	r0, [r8, #20]
								current.alertTimestampNode = Time.now();
   b472e:	f006 fb52 	bl	badd6 <_ZN9TimeClass3nowEv>
								current.alertCodeNode = 0;
   b4732:	f884 a024 	strb.w	sl, [r4, #36]	; 0x24
								current.alertTimestampNode = Time.now();
   b4736:	62a0      	str	r0, [r4, #40]	; 0x28
								current.alertCodeNode = 0;
   b4738:	e7e1      	b.n	b46fe <loop+0x31a>
					if(composeJoinRequesttNode()) {
   b473a:	f000 f989 	bl	b4a50 <_Z23composeJoinRequesttNodev>
   b473e:	b330      	cbz	r0, b478e <loop+0x3aa>
   b4740:	f003 f982 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
								lastPublish = Time.now();
   b4744:	4f1a      	ldr	r7, [pc, #104]	; (b47b0 <loop+0x3cc>)
								rescueMode = false;
   b4746:	f8df 906c 	ldr.w	r9, [pc, #108]	; b47b4 <loop+0x3d0>
								sysStatus.lastConnection = Time.now();
   b474a:	f8df 806c 	ldr.w	r8, [pc, #108]	; b47b8 <loop+0x3d4>
   b474e:	4606      	mov	r6, r0
						while (millis() - startListening < 3000) {
   b4750:	f640 3ab7 	movw	sl, #2999	; 0xbb7
   b4754:	f003 f978 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b4758:	1b80      	subs	r0, r0, r6
   b475a:	4550      	cmp	r0, sl
   b475c:	f63f af79 	bhi.w	b4652 <loop+0x26e>
							if (listenForLoRAMessageNode()) {
   b4760:	f000 fab4 	bl	b4ccc <_Z24listenForLoRAMessageNodev>
   b4764:	2800      	cmp	r0, #0
   b4766:	d0f5      	beq.n	b4754 <loop+0x370>
								lastPublish = Time.now();
   b4768:	f006 fb35 	bl	badd6 <_ZN9TimeClass3nowEv>
								rescueMode = false;
   b476c:	f04f 0a00 	mov.w	sl, #0
								lastPublish = Time.now();
   b4770:	17c3      	asrs	r3, r0, #31
   b4772:	e9c7 0300 	strd	r0, r3, [r7]
								rescueMode = false;
   b4776:	f889 a000 	strb.w	sl, [r9]
								sysStatus.lastConnection = Time.now();
   b477a:	f006 fb2c 	bl	badd6 <_ZN9TimeClass3nowEv>
   b477e:	f8c8 0014 	str.w	r0, [r8, #20]
								current.alertTimestampNode = Time.now();
   b4782:	f006 fb28 	bl	badd6 <_ZN9TimeClass3nowEv>
								current.alertCodeNode = 0;
   b4786:	f884 a024 	strb.w	sl, [r4, #36]	; 0x24
								current.alertTimestampNode = Time.now();
   b478a:	62a0      	str	r0, [r4, #40]	; 0x28
								current.alertCodeNode = 0;
   b478c:	e7e0      	b.n	b4750 <loop+0x36c>
					else rescueMode = true;
   b478e:	4b09      	ldr	r3, [pc, #36]	; (b47b4 <loop+0x3d0>)
   b4790:	2201      	movs	r2, #1
   b4792:	701a      	strb	r2, [r3, #0]
   b4794:	e75d      	b.n	b4652 <loop+0x26e>
                valid_ = false;
   b4796:	7530      	strb	r0, [r6, #20]
                return *this;
   b4798:	e6b6      	b.n	b4508 <loop+0x124>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b479a:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b479e:	e6b3      	b.n	b4508 <loop+0x124>
}
   b47a0:	b00a      	add	sp, #40	; 0x28
   b47a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b47a6:	bf00      	nop
   b47a8:	2003df48 	.word	0x2003df48
   b47ac:	2003e370 	.word	0x2003e370
   b47b0:	2003df40 	.word	0x2003df40
   b47b4:	2003df49 	.word	0x2003df49
   b47b8:	2003e3a0 	.word	0x2003e3a0

000b47bc <_GLOBAL__sub_I___appProductVersion>:
}
   b47bc:	b538      	push	{r3, r4, r5, lr}
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b47be:	f006 fcb1 	bl	bb124 <spark_protocol_instance>
   b47c2:	2300      	movs	r3, #0
   b47c4:	461a      	mov	r2, r3
   b47c6:	4619      	mov	r1, r3
   b47c8:	f006 fcbc 	bl	bb144 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b47cc:	f006 fcaa 	bl	bb124 <spark_protocol_instance>
   b47d0:	2300      	movs	r3, #0
   b47d2:	461a      	mov	r2, r3
   b47d4:	210d      	movs	r1, #13
   b47d6:	f006 fcad 	bl	bb134 <spark_protocol_set_product_id>
        : config_(config) {
   b47da:	4a12      	ldr	r2, [pc, #72]	; (b4824 <_GLOBAL__sub_I___appProductVersion+0x68>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b47dc:	4d12      	ldr	r5, [pc, #72]	; (b4828 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b47de:	1d13      	adds	r3, r2, #4
   b47e0:	6013      	str	r3, [r2, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b47e2:	4b12      	ldr	r3, [pc, #72]	; (b482c <_GLOBAL__sub_I___appProductVersion+0x70>)
   b47e4:	6053      	str	r3, [r2, #4]
              valid_(true) {
   b47e6:	2400      	movs	r4, #0
   b47e8:	2301      	movs	r3, #1
   b47ea:	7513      	strb	r3, [r2, #20]
   b47ec:	e9c2 4402 	strd	r4, r4, [r2, #8]
   b47f0:	6114      	str	r4, [r2, #16]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   b47f2:	f006 fd6f 	bl	bb2d4 <_Z19__fetch_global_Wirev>
   b47f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b47fa:	4601      	mov	r1, r0
   b47fc:	4623      	mov	r3, r4
   b47fe:	4628      	mov	r0, r5
   b4800:	f001 fd34 	bl	b626c <_ZN6MB85RCC1ER7TwoWireji>
   b4804:	4b0a      	ldr	r3, [pc, #40]	; (b4830 <_GLOBAL__sub_I___appProductVersion+0x74>)
   b4806:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4808:	f006 fd64 	bl	bb2d4 <_Z19__fetch_global_Wirev>
   b480c:	2269      	movs	r2, #105	; 0x69
   b480e:	4601      	mov	r1, r0
   b4810:	4808      	ldr	r0, [pc, #32]	; (b4834 <_GLOBAL__sub_I___appProductVersion+0x78>)
   b4812:	f001 f815 	bl	b5840 <_ZN6AB1805C1ER7TwoWireh>
time_t lastPublish = Time.now();
   b4816:	f006 fade 	bl	badd6 <_ZN9TimeClass3nowEv>
   b481a:	4b07      	ldr	r3, [pc, #28]	; (b4838 <_GLOBAL__sub_I___appProductVersion+0x7c>)
   b481c:	17c2      	asrs	r2, r0, #31
   b481e:	e9c3 0200 	strd	r0, r2, [r3]
}
   b4822:	bd38      	pop	{r3, r4, r5, pc}
   b4824:	2003df14 	.word	0x2003df14
   b4828:	2003df2c 	.word	0x2003df2c
   b482c:	00030010 	.word	0x00030010
   b4830:	000bc450 	.word	0x000bc450
   b4834:	2003def4 	.word	0x2003def4
   b4838:	2003df40 	.word	0x2003df40

000b483c <_Z14initializeLoRAb>:
 * and the values loaded.  If a device has not had a node and deviceID assigned, it will happen here
 * 
 * @return true - initialization successful
 * @return false - initialization failed
 */
bool initializeLoRA(bool gatewayID) {				// True if Gateway / False if Node
   b483c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b483e:	4606      	mov	r6, r0
 	// Set up the Radio Module
	if (!manager.init()) {
   b4840:	4820      	ldr	r0, [pc, #128]	; (b48c4 <_Z14initializeLoRAb+0x88>)
   b4842:	f002 fb6e 	bl	b6f22 <_ZN8RHRouter4initEv>
   b4846:	4605      	mov	r5, r0
   b4848:	b930      	cbnz	r0, b4858 <_Z14initializeLoRAb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b484a:	491f      	ldr	r1, [pc, #124]	; (b48c8 <_Z14initializeLoRAb+0x8c>)
   b484c:	481f      	ldr	r0, [pc, #124]	; (b48cc <_Z14initializeLoRAb+0x90>)
   b484e:	f7ff fca1 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	}
	manager.setThisAddress(sysStatus.nodeNumber);	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.deviceID, sysStatus.structuresVersion);
	return true;
}
   b4852:	4628      	mov	r0, r5
   b4854:	b002      	add	sp, #8
   b4856:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4858:	ed9f 0a1d 	vldr	s0, [pc, #116]	; b48d0 <_Z14initializeLoRAb+0x94>
   b485c:	481d      	ldr	r0, [pc, #116]	; (b48d4 <_Z14initializeLoRAb+0x98>)
	if (!(sysStatus.structuresVersion == 128)) {    // This will be our indication that the deviceID and nodeID has not yet been set
   b485e:	4c1e      	ldr	r4, [pc, #120]	; (b48d8 <_Z14initializeLoRAb+0x9c>)
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4860:	f002 fe5a 	bl	b7518 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4864:	481b      	ldr	r0, [pc, #108]	; (b48d4 <_Z14initializeLoRAb+0x98>)
   b4866:	2200      	movs	r2, #0
   b4868:	2117      	movs	r1, #23
   b486a:	f002 ffcf 	bl	b780c <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.structuresVersion == 128)) {    // This will be our indication that the deviceID and nodeID has not yet been set
   b486e:	7923      	ldrb	r3, [r4, #4]
   b4870:	2b80      	cmp	r3, #128	; 0x80
   b4872:	d011      	beq.n	b4898 <_Z14initializeLoRAb+0x5c>
		randomSeed(sysStatus.lastConnection);		// 32-bit number for seed
   b4874:	6960      	ldr	r0, [r4, #20]
   b4876:	f005 feea 	bl	ba64e <_Z10randomSeedj>
		sysStatus.deviceID = random(1,65535);			// 16-bit number for deviceID
   b487a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b487e:	2001      	movs	r0, #1
   b4880:	f005 fedb 	bl	ba63a <_Z6randomii>
   b4884:	8020      	strh	r0, [r4, #0]
		if (gatewayID) {
   b4886:	b1be      	cbz	r6, b48b8 <_Z14initializeLoRAb+0x7c>
			Log.info("Setting node number as Gateway");
   b4888:	4914      	ldr	r1, [pc, #80]	; (b48dc <_Z14initializeLoRAb+0xa0>)
   b488a:	4810      	ldr	r0, [pc, #64]	; (b48cc <_Z14initializeLoRAb+0x90>)
   b488c:	f7ff fc82 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
			sysStatus.nodeNumber = 0;
   b4890:	2300      	movs	r3, #0
   b4892:	8063      	strh	r3, [r4, #2]
		sysStatus.structuresVersion = 128;			// Set the structure to the magic number so we can have a stable deviceID
   b4894:	2380      	movs	r3, #128	; 0x80
   b4896:	7123      	strb	r3, [r4, #4]
	manager.setThisAddress(sysStatus.nodeNumber);	// Assign the NodeNumber to this node
   b4898:	78a1      	ldrb	r1, [r4, #2]
   b489a:	4811      	ldr	r0, [pc, #68]	; (b48e0 <_Z14initializeLoRAb+0xa4>)
   b489c:	f001 fe3f 	bl	b651e <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.deviceID, sysStatus.structuresVersion);
   b48a0:	480f      	ldr	r0, [pc, #60]	; (b48e0 <_Z14initializeLoRAb+0xa4>)
   b48a2:	f001 fe22 	bl	b64ea <_ZN10RHDatagram11thisAddressEv>
   b48a6:	7923      	ldrb	r3, [r4, #4]
   b48a8:	9300      	str	r3, [sp, #0]
   b48aa:	4602      	mov	r2, r0
   b48ac:	8823      	ldrh	r3, [r4, #0]
   b48ae:	490d      	ldr	r1, [pc, #52]	; (b48e4 <_Z14initializeLoRAb+0xa8>)
   b48b0:	4806      	ldr	r0, [pc, #24]	; (b48cc <_Z14initializeLoRAb+0x90>)
   b48b2:	f7ff fc6f 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	return true;
   b48b6:	e7cc      	b.n	b4852 <_Z14initializeLoRAb+0x16>
		else sysStatus.nodeNumber = random(10,255);	// Random number in - unconfigured - range will trigger a Join request
   b48b8:	21ff      	movs	r1, #255	; 0xff
   b48ba:	200a      	movs	r0, #10
   b48bc:	f005 febd 	bl	ba63a <_Z6randomii>
   b48c0:	8060      	strh	r0, [r4, #2]
   b48c2:	e7e7      	b.n	b4894 <_Z14initializeLoRAb+0x58>
   b48c4:	2003e178 	.word	0x2003e178
   b48c8:	000bc464 	.word	0x000bc464
   b48cc:	2003e654 	.word	0x2003e654
   b48d0:	4464c000 	.word	0x4464c000
   b48d4:	2003e048 	.word	0x2003e048
   b48d8:	2003e3a0 	.word	0x2003e3a0
   b48dc:	000bc470 	.word	0x000bc470
   b48e0:	2003e17c 	.word	0x2003e17c
   b48e4:	000bc48f 	.word	0x000bc48f

000b48e8 <_Z21composeDataReportNodev>:
	}
	return false;
}


bool composeDataReportNode() {
   b48e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static uint8_t msgCnt = 0;

	Log.info("Sending data report to Gateway");
   b48ea:	492e      	ldr	r1, [pc, #184]	; (b49a4 <_Z21composeDataReportNodev+0xbc>)
   b48ec:	482e      	ldr	r0, [pc, #184]	; (b49a8 <_Z21composeDataReportNodev+0xc0>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.deviceID);					// Set for device
   b48ee:	4e2f      	ldr	r6, [pc, #188]	; (b49ac <_Z21composeDataReportNodev+0xc4>)
   b48f0:	4c2f      	ldr	r4, [pc, #188]	; (b49b0 <_Z21composeDataReportNodev+0xc8>)
	Log.info("Sending data report to Gateway");
   b48f2:	f7ff fc4f 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b48f6:	4b2f      	ldr	r3, [pc, #188]	; (b49b4 <_Z21composeDataReportNodev+0xcc>)
   b48f8:	881f      	ldrh	r7, [r3, #0]
   b48fa:	2101      	movs	r1, #1
   b48fc:	4638      	mov	r0, r7
   b48fe:	f006 fc78 	bl	bb1f2 <digitalWrite>
	buf[0] = highByte(sysStatus.deviceID);					// Set for device
   b4902:	8833      	ldrh	r3, [r6, #0]
	buf[1] = lowByte(sysStatus.deviceID);
   b4904:	7063      	strb	r3, [r4, #1]
	buf[0] = highByte(sysStatus.deviceID);					// Set for device
   b4906:	0a1a      	lsrs	r2, r3, #8
	buf[2] = highByte(sysStatus.nodeNumber);				// NodeID for verification
   b4908:	8873      	ldrh	r3, [r6, #2]
	buf[0] = highByte(sysStatus.deviceID);					// Set for device
   b490a:	7022      	strb	r2, [r4, #0]
	buf[3] = lowByte(sysStatus.nodeNumber);				
   b490c:	70e3      	strb	r3, [r4, #3]
	buf[2] = highByte(sysStatus.nodeNumber);				// NodeID for verification
   b490e:	0a1a      	lsrs	r2, r3, #8
	buf[4] = 1;						// Set for code release - fix later
	buf[5] = highByte(current.hourlyCount);
   b4910:	4b29      	ldr	r3, [pc, #164]	; (b49b8 <_Z21composeDataReportNodev+0xd0>)
	buf[2] = highByte(sysStatus.nodeNumber);				// NodeID for verification
   b4912:	70a2      	strb	r2, [r4, #2]
	buf[5] = highByte(current.hourlyCount);
   b4914:	8c1a      	ldrh	r2, [r3, #32]
	buf[6] = lowByte(current.hourlyCount); 
   b4916:	71a2      	strb	r2, [r4, #6]
	buf[5] = highByte(current.hourlyCount);
   b4918:	0a11      	lsrs	r1, r2, #8
	buf[7] = highByte(current.dailyCount);
   b491a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
	buf[5] = highByte(current.hourlyCount);
   b491c:	7161      	strb	r1, [r4, #5]
	buf[8] = lowByte(current.dailyCount); 
   b491e:	7222      	strb	r2, [r4, #8]
	buf[7] = highByte(current.dailyCount);
   b4920:	0a11      	lsrs	r1, r2, #8
	buf[9] = current.internalTempC;
   b4922:	791a      	ldrb	r2, [r3, #4]
   b4924:	7262      	strb	r2, [r4, #9]
	buf[10] = current.stateOfCharge;
   b4926:	689a      	ldr	r2, [r3, #8]
	buf[11] = current.batteryState;	
   b4928:	7b1b      	ldrb	r3, [r3, #12]
   b492a:	72e3      	strb	r3, [r4, #11]
	buf[4] = 1;						// Set for code release - fix later
   b492c:	2501      	movs	r5, #1
	buf[12] = sysStatus.resetCount;
   b492e:	68f3      	ldr	r3, [r6, #12]
	buf[7] = highByte(current.dailyCount);
   b4930:	71e1      	strb	r1, [r4, #7]
	buf[10] = current.stateOfCharge;
   b4932:	72a2      	strb	r2, [r4, #10]
	buf[12] = sysStatus.resetCount;
   b4934:	7323      	strb	r3, [r4, #12]
	buf[4] = 1;						// Set for code release - fix later
   b4936:	7125      	strb	r5, [r4, #4]
	buf[13] = 1;				// reserved for later
   b4938:	7365      	strb	r5, [r4, #13]
	buf[14] = highByte(driver.lastRssi());
   b493a:	4820      	ldr	r0, [pc, #128]	; (b49bc <_Z21composeDataReportNodev+0xd4>)
   b493c:	f001 fe6d 	bl	b661a <_ZN15RHGenericDriver8lastRssiEv>
   b4940:	1200      	asrs	r0, r0, #8
   b4942:	73a0      	strb	r0, [r4, #14]
	buf[15] = lowByte(driver.lastRssi()); 
   b4944:	481d      	ldr	r0, [pc, #116]	; (b49bc <_Z21composeDataReportNodev+0xd4>)
   b4946:	f001 fe68 	bl	b661a <_ZN15RHGenericDriver8lastRssiEv>
	buf[16] = msgCnt++;
   b494a:	4b1d      	ldr	r3, [pc, #116]	; (b49c0 <_Z21composeDataReportNodev+0xd8>)
	buf[15] = lowByte(driver.lastRssi()); 
   b494c:	73e0      	strb	r0, [r4, #15]
	buf[16] = msgCnt++;
   b494e:	781a      	ldrb	r2, [r3, #0]
   b4950:	7422      	strb	r2, [r4, #16]
   b4952:	1951      	adds	r1, r2, r5
   b4954:	7019      	strb	r1, [r3, #0]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message number %d", buf[16]);
   b4956:	4814      	ldr	r0, [pc, #80]	; (b49a8 <_Z21composeDataReportNodev+0xc0>)
   b4958:	491a      	ldr	r1, [pc, #104]	; (b49c4 <_Z21composeDataReportNodev+0xdc>)
   b495a:	f7ff fc1b 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT) == RH_ROUTER_ERROR_NONE) {
   b495e:	2303      	movs	r3, #3
   b4960:	9300      	str	r3, [sp, #0]
   b4962:	2211      	movs	r2, #17
   b4964:	4621      	mov	r1, r4
   b4966:	4818      	ldr	r0, [pc, #96]	; (b49c8 <_Z21composeDataReportNodev+0xe0>)
   b4968:	2300      	movs	r3, #0
   b496a:	f002 f871 	bl	b6a50 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b496e:	8872      	ldrh	r2, [r6, #2]
   b4970:	4604      	mov	r4, r0
   b4972:	b958      	cbnz	r0, b498c <_Z21composeDataReportNodev+0xa4>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Node %d - Data report send to gateway %d successfully", sysStatus.nodeNumber, GATEWAY_ADDRESS);
   b4974:	4603      	mov	r3, r0
   b4976:	4915      	ldr	r1, [pc, #84]	; (b49cc <_Z21composeDataReportNodev+0xe4>)
   b4978:	480b      	ldr	r0, [pc, #44]	; (b49a8 <_Z21composeDataReportNodev+0xc0>)
   b497a:	f7ff fc0b 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b497e:	4638      	mov	r0, r7
   b4980:	4621      	mov	r1, r4
   b4982:	f006 fc36 	bl	bb1f2 <digitalWrite>
		return true;
   b4986:	4628      	mov	r0, r5
	else {
		Log.info("Node %d - Data report send to gateway %d failed", sysStatus.nodeNumber, GATEWAY_ADDRESS);
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4988:	b003      	add	sp, #12
   b498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Node %d - Data report send to gateway %d failed", sysStatus.nodeNumber, GATEWAY_ADDRESS);
   b498c:	4910      	ldr	r1, [pc, #64]	; (b49d0 <_Z21composeDataReportNodev+0xe8>)
   b498e:	4806      	ldr	r0, [pc, #24]	; (b49a8 <_Z21composeDataReportNodev+0xc0>)
   b4990:	2300      	movs	r3, #0
   b4992:	f7ff fbff 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4996:	4638      	mov	r0, r7
   b4998:	2100      	movs	r1, #0
   b499a:	f006 fc2a 	bl	bb1f2 <digitalWrite>
		return false;
   b499e:	2000      	movs	r0, #0
   b49a0:	e7f2      	b.n	b4988 <_Z21composeDataReportNodev+0xa0>
   b49a2:	bf00      	nop
   b49a4:	000bc4e6 	.word	0x000bc4e6
   b49a8:	2003e654 	.word	0x2003e654
   b49ac:	2003e3a0 	.word	0x2003e3a0
   b49b0:	2003df4f 	.word	0x2003df4f
   b49b4:	000bc83c 	.word	0x000bc83c
   b49b8:	2003e370 	.word	0x2003e370
   b49bc:	2003e048 	.word	0x2003e048
   b49c0:	2003df4e 	.word	0x2003df4e
   b49c4:	000bc505 	.word	0x000bc505
   b49c8:	2003e178 	.word	0x2003e178
   b49cc:	000bc51f 	.word	0x000bc51f
   b49d0:	000bc555 	.word	0x000bc555

000b49d4 <_Z34receiveAcknowledmentDataReportNodev>:

bool receiveAcknowledmentDataReportNode() {
   b49d4:	b5f0      	push	{r4, r5, r6, r7, lr}

	Log.info("Node %d - Receiving acknowledgment - Data Report", sysStatus.nodeNumber);
   b49d6:	4d19      	ldr	r5, [pc, #100]	; (b4a3c <_Z34receiveAcknowledmentDataReportNodev+0x68>)
   b49d8:	4e19      	ldr	r6, [pc, #100]	; (b4a40 <_Z34receiveAcknowledmentDataReportNodev+0x6c>)
   b49da:	886a      	ldrh	r2, [r5, #2]
   b49dc:	4919      	ldr	r1, [pc, #100]	; (b4a44 <_Z34receiveAcknowledmentDataReportNodev+0x70>)
bool receiveAcknowledmentDataReportNode() {
   b49de:	b08b      	sub	sp, #44	; 0x2c
	Log.info("Node %d - Receiving acknowledgment - Data Report", sysStatus.nodeNumber);
   b49e0:	4630      	mov	r0, r6
   b49e2:	f7ff fbd7 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		
	sysStatus.nextReportSeconds = ((buf[7] << 8) | buf[8]);
   b49e6:	4a18      	ldr	r2, [pc, #96]	; (b4a48 <_Z34receiveAcknowledmentDataReportNodev+0x74>)
   b49e8:	f8b2 3007 	ldrh.w	r3, [r2, #7]
   b49ec:	f8d2 4001 	ldr.w	r4, [r2, #1]
   b49f0:	ba5b      	rev16	r3, r3
   b49f2:	ba24      	rev	r4, r4
   b49f4:	836b      	strh	r3, [r5, #26]
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
	Time.setTime(newTime);  // Set time based on response from gateway
   b49f6:	2300      	movs	r3, #0
   b49f8:	4619      	mov	r1, r3
   b49fa:	4620      	mov	r0, r4
   b49fc:	f006 f8d2 	bl	baba4 <_ZN9TimeClass7setTimeEx>
		Log.info("Time set to %s and next report is in %u seconds at %s", Time.timeStr(newTime).c_str(),sysStatus.nextReportSeconds, Time.timeStr(newTime + sysStatus.nextReportSeconds).c_str());
   b4a00:	4622      	mov	r2, r4
   b4a02:	a802      	add	r0, sp, #8
   b4a04:	2300      	movs	r3, #0
   b4a06:	f006 f8e1 	bl	babcc <_ZN9TimeClass7timeStrEx>
   b4a0a:	8b6d      	ldrh	r5, [r5, #26]
   b4a0c:	9f02      	ldr	r7, [sp, #8]
   b4a0e:	192a      	adds	r2, r5, r4
   b4a10:	a806      	add	r0, sp, #24
   b4a12:	2300      	movs	r3, #0
   b4a14:	f006 f8da 	bl	babcc <_ZN9TimeClass7timeStrEx>
   b4a18:	9b06      	ldr	r3, [sp, #24]
   b4a1a:	490c      	ldr	r1, [pc, #48]	; (b4a4c <_Z34receiveAcknowledmentDataReportNodev+0x78>)
   b4a1c:	9300      	str	r3, [sp, #0]
   b4a1e:	463a      	mov	r2, r7
   b4a20:	462b      	mov	r3, r5
   b4a22:	4630      	mov	r0, r6
   b4a24:	f7ff fbb6 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b4a28:	a806      	add	r0, sp, #24
   b4a2a:	f005 fedf 	bl	ba7ec <_ZN6StringD1Ev>
   b4a2e:	a802      	add	r0, sp, #8
   b4a30:	f005 fedc 	bl	ba7ec <_ZN6StringD1Ev>
	return true;
}
   b4a34:	2001      	movs	r0, #1
   b4a36:	b00b      	add	sp, #44	; 0x2c
   b4a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4a3a:	bf00      	nop
   b4a3c:	2003e3a0 	.word	0x2003e3a0
   b4a40:	2003e654 	.word	0x2003e654
   b4a44:	000bc585 	.word	0x000bc585
   b4a48:	2003df4f 	.word	0x2003df4f
   b4a4c:	000bc5b6 	.word	0x000bc5b6

000b4a50 <_Z23composeJoinRequesttNodev>:

bool composeJoinRequesttNode() {
   b4a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Sending data report to Gateway");
   b4a52:	4924      	ldr	r1, [pc, #144]	; (b4ae4 <_Z23composeJoinRequesttNodev+0x94>)
   b4a54:	4824      	ldr	r0, [pc, #144]	; (b4ae8 <_Z23composeJoinRequesttNodev+0x98>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.deviceID);                      // deviceID is unique to the device
   b4a56:	4d25      	ldr	r5, [pc, #148]	; (b4aec <_Z23composeJoinRequesttNodev+0x9c>)
   b4a58:	4c25      	ldr	r4, [pc, #148]	; (b4af0 <_Z23composeJoinRequesttNodev+0xa0>)
	Log.info("Sending data report to Gateway");
   b4a5a:	f7ff fb9b 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b4a5e:	4b25      	ldr	r3, [pc, #148]	; (b4af4 <_Z23composeJoinRequesttNodev+0xa4>)
   b4a60:	881e      	ldrh	r6, [r3, #0]
   b4a62:	2101      	movs	r1, #1
   b4a64:	4630      	mov	r0, r6
   b4a66:	f006 fbc4 	bl	bb1f2 <digitalWrite>
	buf[0] = highByte(sysStatus.deviceID);                      // deviceID is unique to the device
   b4a6a:	882b      	ldrh	r3, [r5, #0]
	buf[1] = lowByte(sysStatus.deviceID);
   b4a6c:	7063      	strb	r3, [r4, #1]
	buf[0] = highByte(sysStatus.deviceID);                      // deviceID is unique to the device
   b4a6e:	0a1a      	lsrs	r2, r3, #8
	buf[2] = highByte(sysStatus.nodeNumber);                  			// Node Number
   b4a70:	886b      	ldrh	r3, [r5, #2]
	buf[0] = highByte(sysStatus.deviceID);                      // deviceID is unique to the device
   b4a72:	7022      	strb	r2, [r4, #0]
	buf[3] = lowByte(sysStatus.nodeNumber);
   b4a74:	70e3      	strb	r3, [r4, #3]
	buf[2] = highByte(sysStatus.nodeNumber);                  			// Node Number
   b4a76:	0a1a      	lsrs	r2, r3, #8
	buf[4] = sysStatus.structuresVersion;						// Needs to equal 128
   b4a78:	792b      	ldrb	r3, [r5, #4]
	buf[2] = highByte(sysStatus.nodeNumber);                  			// Node Number
   b4a7a:	70a2      	strb	r2, [r4, #2]
	buf[4] = sysStatus.structuresVersion;						// Needs to equal 128
   b4a7c:	7123      	strb	r3, [r4, #4]
	buf[5] = highByte(driver.lastRssi());				        // Signal strength
   b4a7e:	481e      	ldr	r0, [pc, #120]	; (b4af8 <_Z23composeJoinRequesttNodev+0xa8>)
   b4a80:	f001 fdcb 	bl	b661a <_ZN15RHGenericDriver8lastRssiEv>
   b4a84:	1200      	asrs	r0, r0, #8
   b4a86:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(driver.lastRssi()); 
   b4a88:	481b      	ldr	r0, [pc, #108]	; (b4af8 <_Z23composeJoinRequesttNodev+0xa8>)
   b4a8a:	f001 fdc6 	bl	b661a <_ZN15RHGenericDriver8lastRssiEv>

	
	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.nodeNumber < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4a8e:	8869      	ldrh	r1, [r5, #2]
   b4a90:	4b1a      	ldr	r3, [pc, #104]	; (b4afc <_Z23composeJoinRequesttNodev+0xac>)
   b4a92:	4a1b      	ldr	r2, [pc, #108]	; (b4b00 <_Z23composeJoinRequesttNodev+0xb0>)
	buf[6] = lowByte(driver.lastRssi()); 
   b4a94:	71a0      	strb	r0, [r4, #6]
	Log.info("Sending join request because %s",(sysStatus.nodeNumber < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4a96:	2909      	cmp	r1, #9
   b4a98:	bf88      	it	hi
   b4a9a:	461a      	movhi	r2, r3
   b4a9c:	4812      	ldr	r0, [pc, #72]	; (b4ae8 <_Z23composeJoinRequesttNodev+0x98>)
   b4a9e:	4919      	ldr	r1, [pc, #100]	; (b4b04 <_Z23composeJoinRequesttNodev+0xb4>)
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4aa0:	2501      	movs	r5, #1
	Log.info("Sending join request because %s",(sysStatus.nodeNumber < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4aa2:	f7ff fb77 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4aa6:	4621      	mov	r1, r4
   b4aa8:	4817      	ldr	r0, [pc, #92]	; (b4b08 <_Z23composeJoinRequesttNodev+0xb8>)
   b4aaa:	9500      	str	r5, [sp, #0]
   b4aac:	2300      	movs	r3, #0
   b4aae:	2207      	movs	r2, #7
   b4ab0:	f001 ffce 	bl	b6a50 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4ab4:	4604      	mov	r4, r0
   b4ab6:	b950      	cbnz	r0, b4ace <_Z23composeJoinRequesttNodev+0x7e>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   b4ab8:	4914      	ldr	r1, [pc, #80]	; (b4b0c <_Z23composeJoinRequesttNodev+0xbc>)
   b4aba:	480b      	ldr	r0, [pc, #44]	; (b4ae8 <_Z23composeJoinRequesttNodev+0x98>)
   b4abc:	f7ff fb6a 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4ac0:	4630      	mov	r0, r6
   b4ac2:	4621      	mov	r1, r4
   b4ac4:	f006 fb95 	bl	bb1f2 <digitalWrite>
		return true;
   b4ac8:	4628      	mov	r0, r5
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4aca:	b002      	add	sp, #8
   b4acc:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   b4ace:	4910      	ldr	r1, [pc, #64]	; (b4b10 <_Z23composeJoinRequesttNodev+0xc0>)
   b4ad0:	4805      	ldr	r0, [pc, #20]	; (b4ae8 <_Z23composeJoinRequesttNodev+0x98>)
   b4ad2:	f7ff fb5f 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4ad6:	4630      	mov	r0, r6
   b4ad8:	2100      	movs	r1, #0
   b4ada:	f006 fb8a 	bl	bb1f2 <digitalWrite>
		return false;
   b4ade:	2000      	movs	r0, #0
   b4ae0:	e7f3      	b.n	b4aca <_Z23composeJoinRequesttNodev+0x7a>
   b4ae2:	bf00      	nop
   b4ae4:	000bc4e6 	.word	0x000bc4e6
   b4ae8:	2003e654 	.word	0x2003e654
   b4aec:	2003e3a0 	.word	0x2003e3a0
   b4af0:	2003df4f 	.word	0x2003df4f
   b4af4:	000bc83c 	.word	0x000bc83c
   b4af8:	2003e048 	.word	0x2003e048
   b4afc:	000bc603 	.word	0x000bc603
   b4b00:	000bc5ec 	.word	0x000bc5ec
   b4b04:	000bc618 	.word	0x000bc618
   b4b08:	2003e178 	.word	0x2003e178
   b4b0c:	000bc638 	.word	0x000bc638
   b4b10:	000bc661 	.word	0x000bc661

000b4b14 <_Z35receiveAcknowledmentJoinRequestNodev>:

bool receiveAcknowledmentJoinRequestNode() {
   b4b14:	b510      	push	{r4, lr}
	Log.info("Receiving acknowledgment - Join Request");

	if (sysStatus.nodeNumber < 10 && buf[0] == 128) sysStatus.nodeNumber = ((buf[5] << 8 | buf[6]));
   b4b16:	4c18      	ldr	r4, [pc, #96]	; (b4b78 <_Z35receiveAcknowledmentJoinRequestNodev+0x64>)
	Log.info("Receiving acknowledgment - Join Request");
   b4b18:	4918      	ldr	r1, [pc, #96]	; (b4b7c <_Z35receiveAcknowledmentJoinRequestNodev+0x68>)
   b4b1a:	4819      	ldr	r0, [pc, #100]	; (b4b80 <_Z35receiveAcknowledmentJoinRequestNodev+0x6c>)
bool receiveAcknowledmentJoinRequestNode() {
   b4b1c:	b088      	sub	sp, #32
	Log.info("Receiving acknowledgment - Join Request");
   b4b1e:	f7ff fb39 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	if (sysStatus.nodeNumber < 10 && buf[0] == 128) sysStatus.nodeNumber = ((buf[5] << 8 | buf[6]));
   b4b22:	8863      	ldrh	r3, [r4, #2]
   b4b24:	2b09      	cmp	r3, #9
   b4b26:	4b17      	ldr	r3, [pc, #92]	; (b4b84 <_Z35receiveAcknowledmentJoinRequestNodev+0x70>)
   b4b28:	d806      	bhi.n	b4b38 <_Z35receiveAcknowledmentJoinRequestNodev+0x24>
   b4b2a:	781a      	ldrb	r2, [r3, #0]
   b4b2c:	2a80      	cmp	r2, #128	; 0x80
   b4b2e:	d103      	bne.n	b4b38 <_Z35receiveAcknowledmentJoinRequestNodev+0x24>
   b4b30:	f8b3 2005 	ldrh.w	r2, [r3, #5]
   b4b34:	ba52      	rev16	r2, r2
   b4b36:	8062      	strh	r2, [r4, #2]
	sysStatus.nextReportSeconds = ((buf[7] << 8) | buf[8]);
   b4b38:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   b4b3c:	ba52      	rev16	r2, r2
   b4b3e:	8362      	strh	r2, [r4, #26]
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   b4b40:	f8d3 2001 	ldr.w	r2, [r3, #1]
   b4b44:	ba12      	rev	r2, r2
	Time.setTime(newTime);  // Set time based on response from gateway
   b4b46:	4610      	mov	r0, r2
   b4b48:	2100      	movs	r1, #0
   b4b4a:	9203      	str	r2, [sp, #12]
   b4b4c:	f006 f82a 	bl	baba4 <_ZN9TimeClass7setTimeEx>
	Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.nodeNumber, sysStatus.nextReportSeconds);
   b4b50:	9a03      	ldr	r2, [sp, #12]
   b4b52:	a804      	add	r0, sp, #16
   b4b54:	2300      	movs	r3, #0
   b4b56:	f006 f839 	bl	babcc <_ZN9TimeClass7timeStrEx>
   b4b5a:	8b63      	ldrh	r3, [r4, #26]
   b4b5c:	9a04      	ldr	r2, [sp, #16]
   b4b5e:	490a      	ldr	r1, [pc, #40]	; (b4b88 <_Z35receiveAcknowledmentJoinRequestNodev+0x74>)
   b4b60:	9300      	str	r3, [sp, #0]
   b4b62:	4807      	ldr	r0, [pc, #28]	; (b4b80 <_Z35receiveAcknowledmentJoinRequestNodev+0x6c>)
   b4b64:	8863      	ldrh	r3, [r4, #2]
   b4b66:	f7ff fb15 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b4b6a:	a804      	add	r0, sp, #16
   b4b6c:	f005 fe3e 	bl	ba7ec <_ZN6StringD1Ev>
	return true;
}
   b4b70:	2001      	movs	r0, #1
   b4b72:	b008      	add	sp, #32
   b4b74:	bd10      	pop	{r4, pc}
   b4b76:	bf00      	nop
   b4b78:	2003e3a0 	.word	0x2003e3a0
   b4b7c:	000bc684 	.word	0x000bc684
   b4b80:	2003e654 	.word	0x2003e654
   b4b84:	2003df4f 	.word	0x2003df4f
   b4b88:	000bc6ac 	.word	0x000bc6ac

000b4b8c <_Z22composeAlertReportNodev>:

bool composeAlertReportNode() {
   b4b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Node - Sending Alert Report to Gateway");
   b4b8e:	492a      	ldr	r1, [pc, #168]	; (b4c38 <_Z22composeAlertReportNodev+0xac>)
   b4b90:	482a      	ldr	r0, [pc, #168]	; (b4c3c <_Z22composeAlertReportNodev+0xb0>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.deviceID);          // deviceID is unique to the device
   b4b92:	4c2b      	ldr	r4, [pc, #172]	; (b4c40 <_Z22composeAlertReportNodev+0xb4>)
	Log.info("Node - Sending Alert Report to Gateway");
   b4b94:	f7ff fafe 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b4b98:	4b2a      	ldr	r3, [pc, #168]	; (b4c44 <_Z22composeAlertReportNodev+0xb8>)
   b4b9a:	881e      	ldrh	r6, [r3, #0]
   b4b9c:	2101      	movs	r1, #1
   b4b9e:	4630      	mov	r0, r6
   b4ba0:	f006 fb27 	bl	bb1f2 <digitalWrite>
	buf[0] = highByte(sysStatus.deviceID);          // deviceID is unique to the device
   b4ba4:	4b28      	ldr	r3, [pc, #160]	; (b4c48 <_Z22composeAlertReportNodev+0xbc>)
   b4ba6:	881a      	ldrh	r2, [r3, #0]
	buf[1] = lowByte(sysStatus.deviceID);
	buf[2] = highByte(sysStatus.nodeNumber);       // Node Number
   b4ba8:	885b      	ldrh	r3, [r3, #2]
	buf[1] = lowByte(sysStatus.deviceID);
   b4baa:	7062      	strb	r2, [r4, #1]
	buf[0] = highByte(sysStatus.deviceID);          // deviceID is unique to the device
   b4bac:	0a11      	lsrs	r1, r2, #8
	buf[3] = lowByte(sysStatus.nodeNumber);
	buf[4] = highByte(current.alertCodeNode);   // Node's Alert Code
   b4bae:	2500      	movs	r5, #0
	buf[2] = highByte(sysStatus.nodeNumber);       // Node Number
   b4bb0:	0a1a      	lsrs	r2, r3, #8
	buf[0] = highByte(sysStatus.deviceID);          // deviceID is unique to the device
   b4bb2:	7021      	strb	r1, [r4, #0]
	buf[2] = highByte(sysStatus.nodeNumber);       // Node Number
   b4bb4:	70a2      	strb	r2, [r4, #2]
	buf[3] = lowByte(sysStatus.nodeNumber);
   b4bb6:	70e3      	strb	r3, [r4, #3]
	buf[4] = highByte(current.alertCodeNode);   // Node's Alert Code
   b4bb8:	7125      	strb	r5, [r4, #4]
	buf[5] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b4bba:	f006 f90c 	bl	badd6 <_ZN9TimeClass3nowEv>
   b4bbe:	1600      	asrs	r0, r0, #24
   b4bc0:	7160      	strb	r0, [r4, #5]
	buf[6] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b4bc2:	f006 f908 	bl	badd6 <_ZN9TimeClass3nowEv>
   b4bc6:	1400      	asrs	r0, r0, #16
   b4bc8:	71a0      	strb	r0, [r4, #6]
	buf[7] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b4bca:	f006 f904 	bl	badd6 <_ZN9TimeClass3nowEv>
   b4bce:	1200      	asrs	r0, r0, #8
   b4bd0:	71e0      	strb	r0, [r4, #7]
	buf[8] = ((uint8_t) (Time.now()));		    // First byte			
   b4bd2:	f006 f900 	bl	badd6 <_ZN9TimeClass3nowEv>
   b4bd6:	7220      	strb	r0, [r4, #8]
	buf[9] = highByte(driver.lastRssi());		// Signal strength
   b4bd8:	481c      	ldr	r0, [pc, #112]	; (b4c4c <_Z22composeAlertReportNodev+0xc0>)
   b4bda:	f001 fd1e 	bl	b661a <_ZN15RHGenericDriver8lastRssiEv>
   b4bde:	1200      	asrs	r0, r0, #8
   b4be0:	7260      	strb	r0, [r4, #9]
	buf[10] = lowByte(driver.lastRssi()); 
   b4be2:	481a      	ldr	r0, [pc, #104]	; (b4c4c <_Z22composeAlertReportNodev+0xc0>)
   b4be4:	f001 fd19 	bl	b661a <_ZN15RHGenericDriver8lastRssiEv>

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending Alert Report number %d to gateway at %d", current.alertCodeNode, GATEWAY_ADDRESS);
   b4be8:	4a19      	ldr	r2, [pc, #100]	; (b4c50 <_Z22composeAlertReportNodev+0xc4>)
	buf[10] = lowByte(driver.lastRssi()); 
   b4bea:	72a0      	strb	r0, [r4, #10]
	Log.info("Sending Alert Report number %d to gateway at %d", current.alertCodeNode, GATEWAY_ADDRESS);
   b4bec:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   b4bf0:	4918      	ldr	r1, [pc, #96]	; (b4c54 <_Z22composeAlertReportNodev+0xc8>)
   b4bf2:	4812      	ldr	r0, [pc, #72]	; (b4c3c <_Z22composeAlertReportNodev+0xb0>)
   b4bf4:	462b      	mov	r3, r5
   b4bf6:	f7ff facd 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 11, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b4bfa:	2305      	movs	r3, #5
   b4bfc:	9300      	str	r3, [sp, #0]
   b4bfe:	4621      	mov	r1, r4
   b4c00:	4815      	ldr	r0, [pc, #84]	; (b4c58 <_Z22composeAlertReportNodev+0xcc>)
   b4c02:	462b      	mov	r3, r5
   b4c04:	220b      	movs	r2, #11
   b4c06:	f001 ff23 	bl	b6a50 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4c0a:	4604      	mov	r4, r0
   b4c0c:	b950      	cbnz	r0, b4c24 <_Z22composeAlertReportNodev+0x98>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Node - Alert report send to gateway successfully");
   b4c0e:	4913      	ldr	r1, [pc, #76]	; (b4c5c <_Z22composeAlertReportNodev+0xd0>)
   b4c10:	480a      	ldr	r0, [pc, #40]	; (b4c3c <_Z22composeAlertReportNodev+0xb0>)
   b4c12:	f7ff fabf 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4c16:	4630      	mov	r0, r6
   b4c18:	4621      	mov	r1, r4
   b4c1a:	f006 faea 	bl	bb1f2 <digitalWrite>
		return true;
   b4c1e:	2001      	movs	r0, #1
	else {
		Log.info("Node - Alert Report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4c20:	b002      	add	sp, #8
   b4c22:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b4c24:	490e      	ldr	r1, [pc, #56]	; (b4c60 <_Z22composeAlertReportNodev+0xd4>)
   b4c26:	4805      	ldr	r0, [pc, #20]	; (b4c3c <_Z22composeAlertReportNodev+0xb0>)
   b4c28:	f7ff fab4 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4c2c:	4630      	mov	r0, r6
   b4c2e:	4629      	mov	r1, r5
   b4c30:	f006 fadf 	bl	bb1f2 <digitalWrite>
		return false;
   b4c34:	4628      	mov	r0, r5
   b4c36:	e7f3      	b.n	b4c20 <_Z22composeAlertReportNodev+0x94>
   b4c38:	000bc6e8 	.word	0x000bc6e8
   b4c3c:	2003e654 	.word	0x2003e654
   b4c40:	2003df4f 	.word	0x2003df4f
   b4c44:	000bc83c 	.word	0x000bc83c
   b4c48:	2003e3a0 	.word	0x2003e3a0
   b4c4c:	2003e048 	.word	0x2003e048
   b4c50:	2003e370 	.word	0x2003e370
   b4c54:	000bc70f 	.word	0x000bc70f
   b4c58:	2003e178 	.word	0x2003e178
   b4c5c:	000bc73f 	.word	0x000bc73f
   b4c60:	000bc770 	.word	0x000bc770

000b4c64 <_Z35receiveAcknowledmentAlertReportNodev>:

bool receiveAcknowledmentAlertReportNode() {
   b4c64:	b530      	push	{r4, r5, lr}

	Log.info("Receiving acknowledgment - Alert Report");
   b4c66:	4d14      	ldr	r5, [pc, #80]	; (b4cb8 <_Z35receiveAcknowledmentAlertReportNodev+0x54>)
   b4c68:	4914      	ldr	r1, [pc, #80]	; (b4cbc <_Z35receiveAcknowledmentAlertReportNodev+0x58>)

	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
	sysStatus.nextReportSeconds = ((buf[5] << 8) | buf[6]);
   b4c6a:	4c15      	ldr	r4, [pc, #84]	; (b4cc0 <_Z35receiveAcknowledmentAlertReportNodev+0x5c>)
bool receiveAcknowledmentAlertReportNode() {
   b4c6c:	b089      	sub	sp, #36	; 0x24
	Log.info("Receiving acknowledgment - Alert Report");
   b4c6e:	4628      	mov	r0, r5
   b4c70:	f7ff fa90 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   b4c74:	4b13      	ldr	r3, [pc, #76]	; (b4cc4 <_Z35receiveAcknowledmentAlertReportNodev+0x60>)
   b4c76:	f8d3 2001 	ldr.w	r2, [r3, #1]
	sysStatus.nextReportSeconds = ((buf[5] << 8) | buf[6]);
   b4c7a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   b4c7e:	ba5b      	rev16	r3, r3
   b4c80:	ba12      	rev	r2, r2
   b4c82:	8363      	strh	r3, [r4, #26]
	Time.setTime(newTime);  // Set time based on response from gateway
   b4c84:	2300      	movs	r3, #0
   b4c86:	4619      	mov	r1, r3
   b4c88:	4610      	mov	r0, r2
   b4c8a:	9203      	str	r2, [sp, #12]
   b4c8c:	f005 ff8a 	bl	baba4 <_ZN9TimeClass7setTimeEx>
	Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.nodeNumber, sysStatus.nextReportSeconds);
   b4c90:	9a03      	ldr	r2, [sp, #12]
   b4c92:	a804      	add	r0, sp, #16
   b4c94:	2300      	movs	r3, #0
   b4c96:	f005 ff99 	bl	babcc <_ZN9TimeClass7timeStrEx>
   b4c9a:	8b63      	ldrh	r3, [r4, #26]
   b4c9c:	9a04      	ldr	r2, [sp, #16]
   b4c9e:	490a      	ldr	r1, [pc, #40]	; (b4cc8 <_Z35receiveAcknowledmentAlertReportNodev+0x64>)
   b4ca0:	9300      	str	r3, [sp, #0]
   b4ca2:	4628      	mov	r0, r5
   b4ca4:	8863      	ldrh	r3, [r4, #2]
   b4ca6:	f7ff fa75 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b4caa:	a804      	add	r0, sp, #16
   b4cac:	f005 fd9e 	bl	ba7ec <_ZN6StringD1Ev>
	return true;
}
   b4cb0:	2001      	movs	r0, #1
   b4cb2:	b009      	add	sp, #36	; 0x24
   b4cb4:	bd30      	pop	{r4, r5, pc}
   b4cb6:	bf00      	nop
   b4cb8:	2003e654 	.word	0x2003e654
   b4cbc:	000bc79b 	.word	0x000bc79b
   b4cc0:	2003e3a0 	.word	0x2003e3a0
   b4cc4:	2003df4f 	.word	0x2003df4f
   b4cc8:	000bc6ac 	.word	0x000bc6ac

000b4ccc <_Z24listenForLoRAMessageNodev>:
bool listenForLoRAMessageNode() {
   b4ccc:	b570      	push	{r4, r5, r6, lr}
   b4cce:	b08a      	sub	sp, #40	; 0x28
	uint8_t len = sizeof(buf);
   b4cd0:	23f9      	movs	r3, #249	; 0xf9
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag)) {
   b4cd2:	2600      	movs	r6, #0
	uint8_t len = sizeof(buf);
   b4cd4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag)) {
   b4cd8:	4d23      	ldr	r5, [pc, #140]	; (b4d68 <_Z24listenForLoRAMessageNodev+0x9c>)
   b4cda:	4824      	ldr	r0, [pc, #144]	; (b4d6c <_Z24listenForLoRAMessageNodev+0xa0>)
   b4cdc:	9604      	str	r6, [sp, #16]
   b4cde:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   b4ce2:	e9cd 6302 	strd	r6, r3, [sp, #8]
   b4ce6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   b4cea:	9300      	str	r3, [sp, #0]
   b4cec:	9601      	str	r6, [sp, #4]
   b4cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4cf2:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   b4cf6:	4629      	mov	r1, r5
   b4cf8:	f001 ffae 	bl	b6c58 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   b4cfc:	4604      	mov	r4, r0
   b4cfe:	b918      	cbnz	r0, b4d08 <_Z24listenForLoRAMessageNodev+0x3c>
	return false;
   b4d00:	2400      	movs	r4, #0
}
   b4d02:	4620      	mov	r0, r4
   b4d04:	b00a      	add	sp, #40	; 0x28
   b4d06:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4d08:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		Log.info("Received from node %d with rssi=%d - a %s message wated for %lu mSec", from, driver.lastRssi(), loraStateNames[lora_state], waitingFor);
   b4d0c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
		buf[len] = 0;
   b4d10:	54ee      	strb	r6, [r5, r3]
		lora_state = (LoRA_State)messageFlag;
   b4d12:	4d17      	ldr	r5, [pc, #92]	; (b4d70 <_Z24listenForLoRAMessageNodev+0xa4>)
   b4d14:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
		Log.info("Received from node %d with rssi=%d - a %s message wated for %lu mSec", from, driver.lastRssi(), loraStateNames[lora_state], waitingFor);
   b4d18:	4816      	ldr	r0, [pc, #88]	; (b4d74 <_Z24listenForLoRAMessageNodev+0xa8>)
		lora_state = (LoRA_State)messageFlag;
   b4d1a:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message wated for %lu mSec", from, driver.lastRssi(), loraStateNames[lora_state], waitingFor);
   b4d1c:	9207      	str	r2, [sp, #28]
   b4d1e:	f001 fc7c 	bl	b661a <_ZN15RHGenericDriver8lastRssiEv>
   b4d22:	9601      	str	r6, [sp, #4]
   b4d24:	4603      	mov	r3, r0
   b4d26:	4914      	ldr	r1, [pc, #80]	; (b4d78 <_Z24listenForLoRAMessageNodev+0xac>)
   b4d28:	7828      	ldrb	r0, [r5, #0]
   b4d2a:	9a07      	ldr	r2, [sp, #28]
   b4d2c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4d30:	9100      	str	r1, [sp, #0]
   b4d32:	4812      	ldr	r0, [pc, #72]	; (b4d7c <_Z24listenForLoRAMessageNodev+0xb0>)
   b4d34:	4912      	ldr	r1, [pc, #72]	; (b4d80 <_Z24listenForLoRAMessageNodev+0xb4>)
   b4d36:	f7ff fa2d 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_ACK) { if(receiveAcknowledmentDataReportNode()) return true;}
   b4d3a:	782b      	ldrb	r3, [r5, #0]
   b4d3c:	2b04      	cmp	r3, #4
   b4d3e:	d00d      	beq.n	b4d5c <_Z24listenForLoRAMessageNodev+0x90>
		if (lora_state == JOIN_ACK) { if(receiveAcknowledmentJoinRequestNode()) return true;}
   b4d40:	782b      	ldrb	r3, [r5, #0]
   b4d42:	2b02      	cmp	r3, #2
   b4d44:	d103      	bne.n	b4d4e <_Z24listenForLoRAMessageNodev+0x82>
   b4d46:	f7ff fee5 	bl	b4b14 <_Z35receiveAcknowledmentJoinRequestNodev>
   b4d4a:	2800      	cmp	r0, #0
   b4d4c:	d1d9      	bne.n	b4d02 <_Z24listenForLoRAMessageNodev+0x36>
		if (lora_state == ALERT_ACK) { if(receiveAcknowledmentAlertReportNode()) return true;}
   b4d4e:	782b      	ldrb	r3, [r5, #0]
   b4d50:	2b06      	cmp	r3, #6
   b4d52:	d1d5      	bne.n	b4d00 <_Z24listenForLoRAMessageNodev+0x34>
   b4d54:	f7ff ff86 	bl	b4c64 <_Z35receiveAcknowledmentAlertReportNodev>
   b4d58:	4604      	mov	r4, r0
   b4d5a:	e7d2      	b.n	b4d02 <_Z24listenForLoRAMessageNodev+0x36>
		if (lora_state == DATA_ACK) { if(receiveAcknowledmentDataReportNode()) return true;}
   b4d5c:	f7ff fe3a 	bl	b49d4 <_Z34receiveAcknowledmentDataReportNodev>
   b4d60:	2800      	cmp	r0, #0
   b4d62:	d0ed      	beq.n	b4d40 <_Z24listenForLoRAMessageNodev+0x74>
   b4d64:	e7cd      	b.n	b4d02 <_Z24listenForLoRAMessageNodev+0x36>
   b4d66:	bf00      	nop
   b4d68:	2003df4f 	.word	0x2003df4f
   b4d6c:	2003e178 	.word	0x2003e178
   b4d70:	2003df4d 	.word	0x2003df4d
   b4d74:	2003e048 	.word	0x2003e048
   b4d78:	2003ddbc 	.word	0x2003ddbc
   b4d7c:	2003e654 	.word	0x2003e654
   b4d80:	000bc7c3 	.word	0x000bc7c3

000b4d84 <_GLOBAL__sub_I_loraStateNames>:
}
   b4d84:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4d86:	4a08      	ldr	r2, [pc, #32]	; (b4da8 <_GLOBAL__sub_I_loraStateNames+0x24>)
   b4d88:	4c08      	ldr	r4, [pc, #32]	; (b4dac <_GLOBAL__sub_I_loraStateNames+0x28>)
   b4d8a:	4909      	ldr	r1, [pc, #36]	; (b4db0 <_GLOBAL__sub_I_loraStateNames+0x2c>)
   b4d8c:	7812      	ldrb	r2, [r2, #0]
   b4d8e:	7809      	ldrb	r1, [r1, #0]
   b4d90:	4b08      	ldr	r3, [pc, #32]	; (b4db4 <_GLOBAL__sub_I_loraStateNames+0x30>)
   b4d92:	4620      	mov	r0, r4
   b4d94:	f002 fb80 	bl	b7498 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4d98:	4621      	mov	r1, r4
   b4d9a:	4807      	ldr	r0, [pc, #28]	; (b4db8 <_GLOBAL__sub_I_loraStateNames+0x34>)
}
   b4d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4da0:	2200      	movs	r2, #0
   b4da2:	f001 be4b 	b.w	b6a3c <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4da6:	bf00      	nop
   b4da8:	000bc844 	.word	0x000bc844
   b4dac:	2003e048 	.word	0x2003e048
   b4db0:	000bc842 	.word	0x000bc842
   b4db4:	2003e3ec 	.word	0x2003e3ec
   b4db8:	2003e178 	.word	0x2003e178

000b4dbc <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b4dbc:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b4dbe:	4913      	ldr	r1, [pc, #76]	; (b4e0c <_Z18initializePinModesv+0x50>)
   b4dc0:	4813      	ldr	r0, [pc, #76]	; (b4e10 <_Z18initializePinModesv+0x54>)
   b4dc2:	f7ff f9e7 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b4dc6:	2102      	movs	r1, #2
   b4dc8:	2004      	movs	r0, #4
   b4dca:	f006 fa01 	bl	bb1d0 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b4dce:	2100      	movs	r1, #0
   b4dd0:	2008      	movs	r0, #8
   b4dd2:	f006 f9fd 	bl	bb1d0 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b4dd6:	2101      	movs	r1, #1
   b4dd8:	2007      	movs	r0, #7
   b4dda:	f006 f9f9 	bl	bb1d0 <pinMode>
    pinMode(INT_PIN, INPUT);
   b4dde:	2100      	movs	r1, #0
   b4de0:	2012      	movs	r0, #18
   b4de2:	f006 f9f5 	bl	bb1d0 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b4de6:	2101      	movs	r1, #1
   b4de8:	2011      	movs	r0, #17
   b4dea:	f006 f9f1 	bl	bb1d0 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b4dee:	2101      	movs	r1, #1
   b4df0:	2010      	movs	r0, #16
   b4df2:	f006 f9ed 	bl	bb1d0 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b4df6:	2100      	movs	r1, #0
   b4df8:	2010      	movs	r0, #16
   b4dfa:	f006 f9fa 	bl	bb1f2 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b4dfe:	2100      	movs	r1, #0
   b4e00:	2011      	movs	r0, #17
   b4e02:	f006 f9f6 	bl	bb1f2 <digitalWrite>
    return true;
}
   b4e06:	2001      	movs	r0, #1
   b4e08:	bd08      	pop	{r3, pc}
   b4e0a:	bf00      	nop
   b4e0c:	000bc808 	.word	0x000bc808
   b4e10:	2003e654 	.word	0x2003e654

000b4e14 <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   b4e14:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b4e16:	4918      	ldr	r1, [pc, #96]	; (b4e78 <_Z18initializePowerCfgv+0x64>)
   b4e18:	4818      	ldr	r0, [pc, #96]	; (b4e7c <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b4e1a:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b4e1c:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b4e1e:	f7ff f9b9 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b4e22:	4622      	mov	r2, r4
   b4e24:	2100      	movs	r1, #0
   b4e26:	4668      	mov	r0, sp
   b4e28:	f007 f812 	bl	bbe50 <memset>
   b4e2c:	4622      	mov	r2, r4
   b4e2e:	2100      	movs	r1, #0
   b4e30:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b4e34:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b4e38:	f007 f80a 	bl	bbe50 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b4e3c:	2100      	movs	r1, #0
   b4e3e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b4e42:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b4e46:	f003 f84d 	bl	b7ee4 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b4e4a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b4e4e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b4e52:	4b0b      	ldr	r3, [pc, #44]	; (b4e80 <_Z18initializePowerCfgv+0x6c>)
   b4e54:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b4e56:	f241 0370 	movw	r3, #4208	; 0x1070
   b4e5a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b4e5e:	9b00      	ldr	r3, [sp, #0]
   b4e60:	2100      	movs	r1, #0
   b4e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b4e66:	4668      	mov	r0, sp
   b4e68:	9300      	str	r3, [sp, #0]
   b4e6a:	f003 f83b 	bl	b7ee4 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b4e6e:	3800      	subs	r0, #0
   b4e70:	bf18      	it	ne
   b4e72:	2001      	movne	r0, #1
   b4e74:	b010      	add	sp, #64	; 0x40
   b4e76:	bd10      	pop	{r4, pc}
   b4e78:	000bc821 	.word	0x000bc821
   b4e7c:	2003e654 	.word	0x2003e654
   b4e80:	03840384 	.word	0x03840384

000b4e84 <_Z20setNodeConfigurationv>:
 */

#include "storage_objects.h"

void setNodeConfiguration() {
  sysStatus.sensorType = false; // Default is the car counter (true for PIR)
   b4e84:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <_Z20setNodeConfigurationv+0xc>)
   b4e86:	2200      	movs	r2, #0
   b4e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   b4e8c:	4770      	bx	lr
   b4e8e:	bf00      	nop
   b4e90:	2003e3a0 	.word	0x2003e3a0

000b4e94 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b4e94:	4770      	bx	lr

000b4e96 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b4e96:	6a00      	ldr	r0, [r0, #32]
   b4e98:	6803      	ldr	r3, [r0, #0]
   b4e9a:	68db      	ldr	r3, [r3, #12]
   b4e9c:	4718      	bx	r3
	...

000b4ea0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4ea0:	4b0a      	ldr	r3, [pc, #40]	; (b4ecc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4ea2:	b510      	push	{r4, lr}
   b4ea4:	4604      	mov	r4, r0
   b4ea6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4ea8:	f004 fade 	bl	b9468 <_ZN5spark10LogManager8instanceEv>
   b4eac:	4621      	mov	r1, r4
   b4eae:	f004 fd16 	bl	b98de <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4eb2:	f006 f875 	bl	bafa0 <_Z16_fetch_usbserialv>
   b4eb6:	f006 f867 	bl	baf88 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4eba:	4620      	mov	r0, r4
   b4ebc:	4b04      	ldr	r3, [pc, #16]	; (b4ed0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4ebe:	f840 3b04 	str.w	r3, [r0], #4
   b4ec2:	f004 fba7 	bl	b9614 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4ec6:	4620      	mov	r0, r4
   b4ec8:	bd10      	pop	{r4, pc}
   b4eca:	bf00      	nop
   b4ecc:	000bc8bc 	.word	0x000bc8bc
   b4ed0:	000bc8a4 	.word	0x000bc8a4

000b4ed4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4ed4:	b510      	push	{r4, lr}
   b4ed6:	4604      	mov	r4, r0
    }
   b4ed8:	f7ff ffe2 	bl	b4ea0 <_ZN5spark16SerialLogHandlerD1Ev>
   b4edc:	4620      	mov	r0, r4
   b4ede:	2124      	movs	r1, #36	; 0x24
   b4ee0:	f7ff f8dd 	bl	b409e <_ZdlPvj>
   b4ee4:	4620      	mov	r0, r4
   b4ee6:	bd10      	pop	{r4, pc}

000b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4ee8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4eea:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4eec:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4eee:	b17c      	cbz	r4, b4f10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4ef0:	6863      	ldr	r3, [r4, #4]
   b4ef2:	3b01      	subs	r3, #1
   b4ef4:	6063      	str	r3, [r4, #4]
   b4ef6:	b95b      	cbnz	r3, b4f10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4ef8:	6823      	ldr	r3, [r4, #0]
   b4efa:	4620      	mov	r0, r4
   b4efc:	689b      	ldr	r3, [r3, #8]
   b4efe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4f00:	68a3      	ldr	r3, [r4, #8]
   b4f02:	3b01      	subs	r3, #1
   b4f04:	60a3      	str	r3, [r4, #8]
   b4f06:	b91b      	cbnz	r3, b4f10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4f08:	6823      	ldr	r3, [r4, #0]
   b4f0a:	4620      	mov	r0, r4
   b4f0c:	68db      	ldr	r3, [r3, #12]
   b4f0e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4f10:	4628      	mov	r0, r5
   b4f12:	bd38      	pop	{r3, r4, r5, pc}

000b4f14 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   b4f14:	b530      	push	{r4, r5, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4f16:	4922      	ldr	r1, [pc, #136]	; (b4fa0 <_Z15setLowPowerMode6String+0x8c>)
   b4f18:	b095      	sub	sp, #84	; 0x54
   b4f1a:	4604      	mov	r4, r0
   b4f1c:	f005 fd07 	bl	ba92e <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b4f20:	b138      	cbz	r0, b4f32 <_Z15setLowPowerMode6String+0x1e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4f22:	4620      	mov	r0, r4
   b4f24:	491e      	ldr	r1, [pc, #120]	; (b4fa0 <_Z15setLowPowerMode6String+0x8c>)
   b4f26:	4c1f      	ldr	r4, [pc, #124]	; (b4fa4 <_Z15setLowPowerMode6String+0x90>)
   b4f28:	f005 fd01 	bl	ba92e <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   b4f2c:	b948      	cbnz	r0, b4f42 <_Z15setLowPowerMode6String+0x2e>
      sysStatus.frequencyMinutes = 12;
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.lowPowerMode = false;
   b4f2e:	7220      	strb	r0, [r4, #8]
   b4f30:	e033      	b.n	b4f9a <_Z15setLowPowerMode6String+0x86>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b4f32:	491d      	ldr	r1, [pc, #116]	; (b4fa8 <_Z15setLowPowerMode6String+0x94>)
   b4f34:	4620      	mov	r0, r4
   b4f36:	f005 fcfa 	bl	ba92e <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b4f3a:	2800      	cmp	r0, #0
   b4f3c:	d1f1      	bne.n	b4f22 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   b4f3e:	b015      	add	sp, #84	; 0x54
   b4f40:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   b4f42:	8ba3      	ldrh	r3, [r4, #28]
    sysStatus.lowPowerMode = true;
   b4f44:	2501      	movs	r5, #1
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   b4f46:	2b0b      	cmp	r3, #11
    sysStatus.lowPowerMode = true;
   b4f48:	7225      	strb	r5, [r4, #8]
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   b4f4a:	d91b      	bls.n	b4f84 <_Z15setLowPowerMode6String+0x70>
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   b4f4c:	4b17      	ldr	r3, [pc, #92]	; (b4fac <_Z15setLowPowerMode6String+0x98>)
   b4f4e:	4a18      	ldr	r2, [pc, #96]	; (b4fb0 <_Z15setLowPowerMode6String+0x9c>)
   b4f50:	2140      	movs	r1, #64	; 0x40
   b4f52:	a804      	add	r0, sp, #16
   b4f54:	f003 f894 	bl	b8080 <snprintf>
  Log.info(data);
   b4f58:	4816      	ldr	r0, [pc, #88]	; (b4fb4 <_Z15setLowPowerMode6String+0xa0>)
   b4f5a:	a904      	add	r1, sp, #16
   b4f5c:	f7ff f91a 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f60:	f002 ffe6 	bl	b7f30 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b4f64:	b160      	cbz	r0, b4f80 <_Z15setLowPowerMode6String+0x6c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4f66:	4b14      	ldr	r3, [pc, #80]	; (b4fb8 <_Z15setLowPowerMode6String+0xa4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4f68:	4914      	ldr	r1, [pc, #80]	; (b4fbc <_Z15setLowPowerMode6String+0xa8>)
   b4f6a:	781b      	ldrb	r3, [r3, #0]
   b4f6c:	f88d 3000 	strb.w	r3, [sp]
   b4f70:	a802      	add	r0, sp, #8
   b4f72:	233c      	movs	r3, #60	; 0x3c
   b4f74:	aa04      	add	r2, sp, #16
   b4f76:	f003 fb7b 	bl	b8670 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4f7a:	a803      	add	r0, sp, #12
   b4f7c:	f7ff ffb4 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b4f80:	2001      	movs	r0, #1
   b4f82:	e7dc      	b.n	b4f3e <_Z15setLowPowerMode6String+0x2a>
      Log.info("Increasing reporting frequency to 12 minutes");
   b4f84:	490e      	ldr	r1, [pc, #56]	; (b4fc0 <_Z15setLowPowerMode6String+0xac>)
   b4f86:	480b      	ldr	r0, [pc, #44]	; (b4fb4 <_Z15setLowPowerMode6String+0xa0>)
   b4f88:	f7ff f904 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.frequencyMinutes = 12;
   b4f8c:	230c      	movs	r3, #12
   b4f8e:	83a3      	strh	r3, [r4, #28]
      frequencyUpdated = true;
   b4f90:	4b0c      	ldr	r3, [pc, #48]	; (b4fc4 <_Z15setLowPowerMode6String+0xb0>)
   b4f92:	701d      	strb	r5, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   b4f94:	7a23      	ldrb	r3, [r4, #8]
   b4f96:	2b00      	cmp	r3, #0
   b4f98:	d1d8      	bne.n	b4f4c <_Z15setLowPowerMode6String+0x38>
   b4f9a:	4b0b      	ldr	r3, [pc, #44]	; (b4fc8 <_Z15setLowPowerMode6String+0xb4>)
   b4f9c:	e7d7      	b.n	b4f4e <_Z15setLowPowerMode6String+0x3a>
   b4f9e:	bf00      	nop
   b4fa0:	000bca4c 	.word	0x000bca4c
   b4fa4:	2003e3a0 	.word	0x2003e3a0
   b4fa8:	000bc368 	.word	0x000bc368
   b4fac:	000bc848 	.word	0x000bc848
   b4fb0:	000bc87c 	.word	0x000bc87c
   b4fb4:	2003e654 	.word	0x2003e654
   b4fb8:	2003e334 	.word	0x2003e334
   b4fbc:	000bc896 	.word	0x000bc896
   b4fc0:	000bc84f 	.word	0x000bc84f
   b4fc4:	2003e335 	.word	0x2003e335
   b4fc8:	000bc84c 	.word	0x000bc84c

000b4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4fcc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4fce:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4fd2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4fd4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4fd6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4fda:	42ae      	cmp	r6, r5
   b4fdc:	d004      	beq.n	b4fe8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4fde:	4628      	mov	r0, r5
   b4fe0:	f005 fc04 	bl	ba7ec <_ZN6StringD1Ev>
   b4fe4:	3514      	adds	r5, #20
   b4fe6:	e7f8      	b.n	b4fda <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4fe8:	6820      	ldr	r0, [r4, #0]
   b4fea:	f003 f831 	bl	b8050 <free>
    AllocatorT::free(data_);
}
   b4fee:	4620      	mov	r0, r4
   b4ff0:	bd70      	pop	{r4, r5, r6, pc}

000b4ff2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4ff2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ff6:	4604      	mov	r4, r0
   b4ff8:	460d      	mov	r5, r1
   b4ffa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4ffc:	d916      	bls.n	b502c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4ffe:	4290      	cmp	r0, r2
   b5000:	d215      	bcs.n	b502e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5002:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5006:	1a75      	subs	r5, r6, r1
   b5008:	f1a1 0714 	sub.w	r7, r1, #20
   b500c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b500e:	42b7      	cmp	r7, r6
   b5010:	d01c      	beq.n	b504c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5012:	b12c      	cbz	r4, b5020 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5014:	4631      	mov	r1, r6
   b5016:	4620      	mov	r0, r4
   b5018:	f005 fc64 	bl	ba8e4 <_ZN6StringC1EOS_>
   b501c:	7c33      	ldrb	r3, [r6, #16]
   b501e:	7423      	strb	r3, [r4, #16]
   b5020:	4630      	mov	r0, r6
   b5022:	f005 fbe3 	bl	ba7ec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5026:	3e14      	subs	r6, #20
   b5028:	3c14      	subs	r4, #20
   b502a:	e7f0      	b.n	b500e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b502c:	d00e      	beq.n	b504c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b502e:	42b5      	cmp	r5, r6
   b5030:	d00c      	beq.n	b504c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5032:	b12c      	cbz	r4, b5040 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5034:	4629      	mov	r1, r5
   b5036:	4620      	mov	r0, r4
   b5038:	f005 fc54 	bl	ba8e4 <_ZN6StringC1EOS_>
   b503c:	7c2b      	ldrb	r3, [r5, #16]
   b503e:	7423      	strb	r3, [r4, #16]
   b5040:	4628      	mov	r0, r5
   b5042:	f005 fbd3 	bl	ba7ec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5046:	3514      	adds	r5, #20
   b5048:	3414      	adds	r4, #20
   b504a:	e7f0      	b.n	b502e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b504c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5052:	2300      	movs	r3, #0
   b5054:	e9c0 3300 	strd	r3, r3, [r0]
   b5058:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b505a:	684f      	ldr	r7, [r1, #4]
   b505c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b505e:	4604      	mov	r4, r0
   b5060:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5062:	dd23      	ble.n	b50ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b5064:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5068:	fb08 f007 	mul.w	r0, r8, r7
   b506c:	f002 ffe8 	bl	b8040 <malloc>
            if (!d) {
   b5070:	4605      	mov	r5, r0
   b5072:	b1d8      	cbz	r0, b50ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b5074:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5078:	fb08 1202 	mla	r2, r8, r2, r1
   b507c:	f7ff ffb9 	bl	b4ff2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5080:	6820      	ldr	r0, [r4, #0]
   b5082:	f002 ffe5 	bl	b8050 <free>
        data_ = d;
   b5086:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5088:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b508a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b508e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5092:	45b8      	cmp	r8, r7
   b5094:	d008      	beq.n	b50a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b5096:	4639      	mov	r1, r7
   b5098:	4628      	mov	r0, r5
   b509a:	f005 fc3d 	bl	ba918 <_ZN6StringC1ERKS_>
   b509e:	7c3b      	ldrb	r3, [r7, #16]
   b50a0:	742b      	strb	r3, [r5, #16]
   b50a2:	3714      	adds	r7, #20
   b50a4:	3514      	adds	r5, #20
   b50a6:	e7f4      	b.n	b5092 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b50a8:	6873      	ldr	r3, [r6, #4]
   b50aa:	6063      	str	r3, [r4, #4]
}
   b50ac:	4620      	mov	r0, r4
   b50ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b50b4 <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b50b4:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b50b6:	4b27      	ldr	r3, [pc, #156]	; (b5154 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b50b8:	4a27      	ldr	r2, [pc, #156]	; (b5158 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b50ba:	2501      	movs	r5, #1
   b50bc:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b50be:	4b27      	ldr	r3, [pc, #156]	; (b515c <_GLOBAL__sub_I_SystemMode+0xa8>)
   b50c0:	2400      	movs	r4, #0
   b50c2:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b50c4:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b50c6:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b50ca:	2002      	movs	r0, #2
   b50cc:	f002 feb6 	bl	b7e3c <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b50d0:	4621      	mov	r1, r4
   b50d2:	4628      	mov	r0, r5
   b50d4:	f002 feca 	bl	b7e6c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b50d8:	4629      	mov	r1, r5
   b50da:	2004      	movs	r0, #4
   b50dc:	f002 fc9c 	bl	b7a18 <HAL_Feature_Set>
        capacity_(0) {
   b50e0:	e9cd 4400 	strd	r4, r4, [sp]
   b50e4:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b50e6:	f005 ff5b 	bl	bafa0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b50ea:	4c1d      	ldr	r4, [pc, #116]	; (b5160 <_GLOBAL__sub_I_SystemMode+0xac>)
   b50ec:	4605      	mov	r5, r0
   b50ee:	4669      	mov	r1, sp
   b50f0:	a803      	add	r0, sp, #12
   b50f2:	f7ff ffac 	bl	b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b50f6:	4626      	mov	r6, r4
        stream_(&stream) {
   b50f8:	a903      	add	r1, sp, #12
   b50fa:	a806      	add	r0, sp, #24
   b50fc:	f7ff ffa7 	bl	b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5100:	4b18      	ldr	r3, [pc, #96]	; (b5164 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5102:	f846 3b04 	str.w	r3, [r6], #4
   b5106:	a906      	add	r1, sp, #24
   b5108:	a809      	add	r0, sp, #36	; 0x24
   b510a:	f7ff ffa0 	bl	b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b510e:	aa09      	add	r2, sp, #36	; 0x24
   b5110:	211e      	movs	r1, #30
   b5112:	4630      	mov	r0, r6
   b5114:	f004 fcc6 	bl	b9aa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5118:	a809      	add	r0, sp, #36	; 0x24
   b511a:	f7ff ff57 	bl	b4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b511e:	a806      	add	r0, sp, #24
   b5120:	f7ff ff54 	bl	b4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5124:	4b10      	ldr	r3, [pc, #64]	; (b5168 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b5126:	6023      	str	r3, [r4, #0]
   b5128:	6225      	str	r5, [r4, #32]
   b512a:	a803      	add	r0, sp, #12
   b512c:	f7ff ff4e 	bl	b4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5130:	4b0e      	ldr	r3, [pc, #56]	; (b516c <_GLOBAL__sub_I_SystemMode+0xb8>)
   b5132:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5134:	f005 ff34 	bl	bafa0 <_Z16_fetch_usbserialv>
   b5138:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b513c:	f005 ff20 	bl	baf80 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5140:	f004 f992 	bl	b9468 <_ZN5spark10LogManager8instanceEv>
   b5144:	4621      	mov	r1, r4
   b5146:	f004 fb83 	bl	b9850 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b514a:	4668      	mov	r0, sp
   b514c:	f7ff ff3e 	bl	b4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5150:	b00c      	add	sp, #48	; 0x30
   b5152:	bd70      	pop	{r4, r5, r6, pc}
   b5154:	2003e334 	.word	0x2003e334
   b5158:	ffff0000 	.word	0xffff0000
   b515c:	2003e328 	.word	0x2003e328
   b5160:	2003e338 	.word	0x2003e338
   b5164:	000bc8a4 	.word	0x000bc8a4
   b5168:	000bd194 	.word	0x000bd194
   b516c:	000bc8bc 	.word	0x000bc8bc

000b5170 <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   b5170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5172:	f002 fedd 	bl	b7f30 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b5176:	b1d8      	cbz	r0, b51b0 <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5178:	4b1c      	ldr	r3, [pc, #112]	; (b51ec <_Z18loadSystemDefaultsv+0x7c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b517a:	4a1d      	ldr	r2, [pc, #116]	; (b51f0 <_Z18loadSystemDefaultsv+0x80>)
   b517c:	781b      	ldrb	r3, [r3, #0]
   b517e:	f88d 3000 	strb.w	r3, [sp]
   b5182:	491c      	ldr	r1, [pc, #112]	; (b51f4 <_Z18loadSystemDefaultsv+0x84>)
   b5184:	233c      	movs	r3, #60	; 0x3c
   b5186:	a802      	add	r0, sp, #8
   b5188:	f003 fa72 	bl	b8670 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b518c:	9c03      	ldr	r4, [sp, #12]
   b518e:	b17c      	cbz	r4, b51b0 <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   b5190:	6863      	ldr	r3, [r4, #4]
   b5192:	3b01      	subs	r3, #1
   b5194:	6063      	str	r3, [r4, #4]
   b5196:	b95b      	cbnz	r3, b51b0 <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   b5198:	6823      	ldr	r3, [r4, #0]
   b519a:	4620      	mov	r0, r4
   b519c:	689b      	ldr	r3, [r3, #8]
   b519e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b51a0:	68a3      	ldr	r3, [r4, #8]
   b51a2:	3b01      	subs	r3, #1
   b51a4:	60a3      	str	r3, [r4, #8]
   b51a6:	b91b      	cbnz	r3, b51b0 <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   b51a8:	6823      	ldr	r3, [r4, #0]
   b51aa:	4620      	mov	r0, r4
   b51ac:	68db      	ldr	r3, [r3, #12]
   b51ae:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b51b0:	4911      	ldr	r1, [pc, #68]	; (b51f8 <_Z18loadSystemDefaultsv+0x88>)
   b51b2:	4812      	ldr	r0, [pc, #72]	; (b51fc <_Z18loadSystemDefaultsv+0x8c>)
   b51b4:	f7fe ffee 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.nodeNumber = 2;
   b51b8:	4b11      	ldr	r3, [pc, #68]	; (b5200 <_Z18loadSystemDefaultsv+0x90>)
   b51ba:	2202      	movs	r2, #2
   b51bc:	805a      	strh	r2, [r3, #2]
  sysStatus.structuresVersion = 1;
   b51be:	f240 1201 	movw	r2, #257	; 0x101
   b51c2:	809a      	strh	r2, [r3, #4]
  sysStatus.firmwareRelease = 1;
  sysStatus.solarPowerMode = true;
   b51c4:	2201      	movs	r2, #1
   b51c6:	71da      	strb	r2, [r3, #7]
  sysStatus.lowPowerMode = true;
   b51c8:	721a      	strb	r2, [r3, #8]
  sysStatus.resetCount = 0;
   b51ca:	2200      	movs	r2, #0
  sysStatus.lastHookResponse = 0;
   b51cc:	e9c3 2203 	strd	r2, r2, [r3, #12]
  sysStatus.frequencyMinutes = 60;
  sysStatus.alertCodeGateway = 0;
   b51d0:	779a      	strb	r2, [r3, #30]
  sysStatus.alertTimestampGateway = 0;
   b51d2:	621a      	str	r2, [r3, #32]
  sysStatus.openTime = 6;
   b51d4:	2206      	movs	r2, #6
  sysStatus.frequencyMinutes = 60;
   b51d6:	213c      	movs	r1, #60	; 0x3c
  sysStatus.openTime = 6;
   b51d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  sysStatus.closeTime = 22;
   b51dc:	2216      	movs	r2, #22
  sysStatus.frequencyMinutes = 60;
   b51de:	8399      	strh	r1, [r3, #28]
  sysStatus.closeTime = 22;
   b51e0:	84da      	strh	r2, [r3, #38]	; 0x26
  sysStatus.verizonSIM = false;

  setNodeConfiguration();                             // Here we will fix the settings specific to the node
}
   b51e2:	b004      	add	sp, #16
   b51e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setNodeConfiguration();                             // Here we will fix the settings specific to the node
   b51e8:	f7ff be4c 	b.w	b4e84 <_Z20setNodeConfigurationv>
   b51ec:	2003e35c 	.word	0x2003e35c
   b51f0:	000bc8cc 	.word	0x000bc8cc
   b51f4:	000bc896 	.word	0x000bc896
   b51f8:	000bc8e4 	.word	0x000bc8e4
   b51fc:	2003e654 	.word	0x2003e654
   b5200:	2003e3a0 	.word	0x2003e3a0

000b5204 <_Z15resetEverythingv>:
/**
 * @brief Resets all counts to start a new day.
 *
 * @details Once run, it will reset all daily-specific counts and trigger an update in FRAM.
 */
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b5204:	b538      	push	{r3, r4, r5, lr}
  Log.info("A new day - resetting everything");
  current.dailyCount = 0;                                             // Reset the counts in FRAM as well
  current.hourlyCount = 0;
   b5206:	4d08      	ldr	r5, [pc, #32]	; (b5228 <_Z15resetEverythingv+0x24>)
  Log.info("A new day - resetting everything");
   b5208:	4908      	ldr	r1, [pc, #32]	; (b522c <_Z15resetEverythingv+0x28>)
   b520a:	4809      	ldr	r0, [pc, #36]	; (b5230 <_Z15resetEverythingv+0x2c>)
  current.hourlyCount = 0;
   b520c:	2400      	movs	r4, #0
  Log.info("A new day - resetting everything");
   b520e:	f7fe ffc1 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
  current.hourlyCount = 0;
   b5212:	622c      	str	r4, [r5, #32]
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   b5214:	f005 fddf 	bl	badd6 <_ZN9TimeClass3nowEv>
  current.alertCodeNode = 0;
  current.alertTimestampNode = 0;
  sysStatus.resetCount = 0;                                           // Reset the reset count as well
   b5218:	4b06      	ldr	r3, [pc, #24]	; (b5234 <_Z15resetEverythingv+0x30>)
  current.lastCountTime = Time.now();                                 // Set the time context to the new day
   b521a:	61e8      	str	r0, [r5, #28]
  sysStatus.resetCount = 0;                                           // Reset the reset count as well
   b521c:	60dc      	str	r4, [r3, #12]
  current.alertCodeNode = 0;
   b521e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  current.alertTimestampNode = 0;
   b5222:	62ac      	str	r4, [r5, #40]	; 0x28
   b5224:	bd38      	pop	{r3, r4, r5, pc}
   b5226:	bf00      	nop
   b5228:	2003e370 	.word	0x2003e370
   b522c:	000bc8fc 	.word	0x000bc8fc
   b5230:	2003e654 	.word	0x2003e654
   b5234:	2003e3a0 	.word	0x2003e3a0

000b5238 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   b5238:	4b01      	ldr	r3, [pc, #4]	; (b5240 <_GLOBAL__sub_I_sysStatus+0x8>)
   b523a:	2201      	movs	r2, #1
   b523c:	701a      	strb	r2, [r3, #0]
   b523e:	4770      	bx	lr
   b5240:	2003e35c 	.word	0x2003e35c

000b5244 <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   b5244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (Time.now() - lastCheckTime > 60) {            // Check once a second
   b5246:	4c42      	ldr	r4, [pc, #264]	; (b5350 <_Z17storageObjectLoopv+0x10c>)
   b5248:	f005 fdc5 	bl	badd6 <_ZN9TimeClass3nowEv>
   b524c:	e9d4 2100 	ldrd	r2, r1, [r4]
   b5250:	17c3      	asrs	r3, r0, #31
   b5252:	1a80      	subs	r0, r0, r2
   b5254:	eb63 0301 	sbc.w	r3, r3, r1
   b5258:	283d      	cmp	r0, #61	; 0x3d
   b525a:	f173 0300 	sbcs.w	r3, r3, #0
   b525e:	db75      	blt.n	b534c <_Z17storageObjectLoopv+0x108>
   b5260:	f002 fbf2 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b5264:	4605      	mov	r5, r0
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   b5266:	f005 fdb6 	bl	badd6 <_ZN9TimeClass3nowEv>
                      std::hash<uint32_t>{}(sysStatus.lastHookResponse) + \
   b526a:	4a3a      	ldr	r2, [pc, #232]	; (b5354 <_Z17storageObjectLoopv+0x110>)
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   b526c:	4e3a      	ldr	r6, [pc, #232]	; (b5358 <_Z17storageObjectLoopv+0x114>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   b526e:	17c3      	asrs	r3, r0, #31
   b5270:	e9c4 0300 	strd	r0, r3, [r4]
                      std::hash<byte>{}(sysStatus.alertCodeGateway)+ \
   b5274:	e9d2 3404 	ldrd	r3, r4, [r2, #16]
   b5278:	441c      	add	r4, r3
   b527a:	6a13      	ldr	r3, [r2, #32]
   b527c:	441c      	add	r4, r3

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b527e:	8813      	ldrh	r3, [r2, #0]
   b5280:	441c      	add	r4, r3
   b5282:	8853      	ldrh	r3, [r2, #2]
   b5284:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b5286:	7913      	ldrb	r3, [r2, #4]
   b5288:	441c      	add	r4, r3
   b528a:	7953      	ldrb	r3, [r2, #5]
   b528c:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   b528e:	7993      	ldrb	r3, [r2, #6]
   b5290:	441c      	add	r4, r3
   b5292:	79d3      	ldrb	r3, [r2, #7]
   b5294:	441c      	add	r4, r3
   b5296:	7a13      	ldrb	r3, [r2, #8]
   b5298:	441c      	add	r4, r3
   b529a:	68d3      	ldr	r3, [r2, #12]
   b529c:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b529e:	8b13      	ldrh	r3, [r2, #24]
   b52a0:	441c      	add	r4, r3
   b52a2:	8b93      	ldrh	r3, [r2, #28]
   b52a4:	441c      	add	r4, r3
   b52a6:	8b53      	ldrh	r3, [r2, #26]
   b52a8:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b52aa:	7f93      	ldrb	r3, [r2, #30]
   b52ac:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   b52ae:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
                      std::hash<uint32_t>{}(sysStatus.alertTimestampGateway) + \
   b52b2:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b52b4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
                      std::hash<bool>{}(sysStatus.sensorType) + \
   b52b8:	441c      	add	r4, r3
   b52ba:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
                      std::hash<uint8_t>{}(sysStatus.openTime) + \
   b52be:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   b52c0:	f892 3027 	ldrb.w	r3, [r2, #39]	; 0x27
                      std::hash<bool>{}(sysStatus.verizonSIM);
   b52c4:	441c      	add	r4, r3
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   b52c6:	6833      	ldr	r3, [r6, #0]
   b52c8:	429c      	cmp	r4, r3
   b52ca:	d03d      	beq.n	b5348 <_Z17storageObjectLoopv+0x104>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b52cc:	2328      	movs	r3, #40	; 0x28
   b52ce:	2101      	movs	r1, #1
   b52d0:	4822      	ldr	r0, [pc, #136]	; (b535c <_Z17storageObjectLoopv+0x118>)
   b52d2:	f001 f862 	bl	b639a <_ZN6MB85RC9writeDataEjPKhj>
      lastSysStatusHash = sysStatusHash;
   b52d6:	6034      	str	r4, [r6, #0]
   b52d8:	f002 fbb6 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
      Log.info("sysStaus object stored and hash updated in %lu mSec", (millis() - stopwatch));
   b52dc:	4920      	ldr	r1, [pc, #128]	; (b5360 <_Z17storageObjectLoopv+0x11c>)
   b52de:	1b42      	subs	r2, r0, r5
   b52e0:	4820      	ldr	r0, [pc, #128]	; (b5364 <_Z17storageObjectLoopv+0x120>)
   b52e2:	f7fe ff57 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b52e6:	f002 fbaf 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b52ea:	4605      	mov	r5, r0
      returnValue = true;                           // In case I want to test whether values changed
   b52ec:	2001      	movs	r0, #1
    size_t currentHash = std::hash<uint16_t>{}(current.deviceID) + \
   b52ee:	4e1e      	ldr	r6, [pc, #120]	; (b5368 <_Z17storageObjectLoopv+0x124>)
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   b52f0:	4f1e      	ldr	r7, [pc, #120]	; (b536c <_Z17storageObjectLoopv+0x128>)
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b52f2:	8873      	ldrh	r3, [r6, #2]
   b52f4:	8834      	ldrh	r4, [r6, #0]
    size_t currentHash = std::hash<uint16_t>{}(current.deviceID) + \
   b52f6:	441c      	add	r4, r3
                      std::hash<uint32_t>{}(current.alertTimestampNode);
   b52f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   b52fa:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b52fc:	7933      	ldrb	r3, [r6, #4]
   b52fe:	441c      	add	r4, r3
   b5300:	68b3      	ldr	r3, [r6, #8]
   b5302:	441c      	add	r4, r3
   b5304:	7b33      	ldrb	r3, [r6, #12]
   b5306:	441c      	add	r4, r3
   b5308:	6933      	ldr	r3, [r6, #16]
   b530a:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b530c:	8b33      	ldrh	r3, [r6, #24]
   b530e:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b5310:	7eb3      	ldrb	r3, [r6, #26]
   b5312:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   b5314:	8c33      	ldrh	r3, [r6, #32]
   b5316:	441c      	add	r4, r3
   b5318:	8c73      	ldrh	r3, [r6, #34]	; 0x22
   b531a:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   b531c:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   b5320:	441c      	add	r4, r3
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   b5322:	683b      	ldr	r3, [r7, #0]
   b5324:	429c      	cmp	r4, r3
   b5326:	d00e      	beq.n	b5346 <_Z17storageObjectLoopv+0x102>
   b5328:	f002 fb8e 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
      Log.info("current object stored and hash updated in %lu mSec", (millis() - stopwatch));
   b532c:	4910      	ldr	r1, [pc, #64]	; (b5370 <_Z17storageObjectLoopv+0x12c>)
   b532e:	1b42      	subs	r2, r0, r5
   b5330:	480c      	ldr	r0, [pc, #48]	; (b5364 <_Z17storageObjectLoopv+0x120>)
   b5332:	f7fe ff2f 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b5336:	4809      	ldr	r0, [pc, #36]	; (b535c <_Z17storageObjectLoopv+0x118>)
   b5338:	2330      	movs	r3, #48	; 0x30
   b533a:	4632      	mov	r2, r6
   b533c:	2150      	movs	r1, #80	; 0x50
   b533e:	f001 f82c 	bl	b639a <_ZN6MB85RC9writeDataEjPKhj>
      lastCurrentHash = currentHash;
   b5342:	603c      	str	r4, [r7, #0]
      returnValue = true;
   b5344:	2001      	movs	r0, #1
}
   b5346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool returnValue = false;
   b5348:	2000      	movs	r0, #0
   b534a:	e7d0      	b.n	b52ee <_Z17storageObjectLoopv+0xaa>
   b534c:	2000      	movs	r0, #0
   b534e:	e7fa      	b.n	b5346 <_Z17storageObjectLoopv+0x102>
   b5350:	2003e360 	.word	0x2003e360
   b5354:	2003e3a0 	.word	0x2003e3a0
   b5358:	2003e36c 	.word	0x2003e36c
   b535c:	2003df2c 	.word	0x2003df2c
   b5360:	000bc91d 	.word	0x000bc91d
   b5364:	2003e654 	.word	0x2003e654
   b5368:	2003e370 	.word	0x2003e370
   b536c:	2003e368 	.word	0x2003e368
   b5370:	000bc951 	.word	0x000bc951

000b5374 <_Z18storageObjectStartv>:
bool storageObjectStart() {
   b5374:	b513      	push	{r0, r1, r4, lr}
  Log.info("Initializing the Object Store");
   b5376:	4921      	ldr	r1, [pc, #132]	; (b53fc <_Z18storageObjectStartv+0x88>)
   b5378:	4821      	ldr	r0, [pc, #132]	; (b5400 <_Z18storageObjectStartv+0x8c>)
   b537a:	f7fe ff0b 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
  fram.begin();                                     // Initialize the FRAM module
   b537e:	4821      	ldr	r0, [pc, #132]	; (b5404 <_Z18storageObjectStartv+0x90>)
   b5380:	f000 ff7e 	bl	b6280 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b5384:	481f      	ldr	r0, [pc, #124]	; (b5404 <_Z18storageObjectStartv+0x90>)
   b5386:	2301      	movs	r3, #1
   b5388:	f10d 0207 	add.w	r2, sp, #7
   b538c:	2100      	movs	r1, #0
   b538e:	f000 ffb9 	bl	b6304 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   b5392:	f89d 4007 	ldrb.w	r4, [sp, #7]
   b5396:	2c01      	cmp	r4, #1
   b5398:	d01c      	beq.n	b53d4 <_Z18storageObjectStartv+0x60>
    Log.info("FRAM mismatch, erasing and loading defaults if it checks out");
   b539a:	491b      	ldr	r1, [pc, #108]	; (b5408 <_Z18storageObjectStartv+0x94>)
   b539c:	4818      	ldr	r0, [pc, #96]	; (b5400 <_Z18storageObjectStartv+0x8c>)
   b539e:	f7fe fef9 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                   // Reset the FRAM to correct the issue
   b53a2:	4818      	ldr	r0, [pc, #96]	; (b5404 <_Z18storageObjectStartv+0x90>)
   b53a4:	f000 ff76 	bl	b6294 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   b53a8:	4a18      	ldr	r2, [pc, #96]	; (b540c <_Z18storageObjectStartv+0x98>)
   b53aa:	4816      	ldr	r0, [pc, #88]	; (b5404 <_Z18storageObjectStartv+0x90>)
   b53ac:	2304      	movs	r3, #4
   b53ae:	2100      	movs	r1, #0
   b53b0:	f000 fff3 	bl	b639a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   b53b4:	4813      	ldr	r0, [pc, #76]	; (b5404 <_Z18storageObjectStartv+0x90>)
   b53b6:	2301      	movs	r3, #1
   b53b8:	f10d 0207 	add.w	r2, sp, #7
   b53bc:	2100      	movs	r1, #0
   b53be:	f000 ffa1 	bl	b6304 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   b53c2:	f89d 4007 	ldrb.w	r4, [sp, #7]
   b53c6:	2c01      	cmp	r4, #1
   b53c8:	d115      	bne.n	b53f6 <_Z18storageObjectStartv+0x82>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   b53ca:	f7ff fed1 	bl	b5170 <_Z18loadSystemDefaultsv>
  return true;
   b53ce:	4620      	mov	r0, r4
}
   b53d0:	b002      	add	sp, #8
   b53d2:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   b53d4:	490e      	ldr	r1, [pc, #56]	; (b5410 <_Z18storageObjectStartv+0x9c>)
   b53d6:	480a      	ldr	r0, [pc, #40]	; (b5400 <_Z18storageObjectStartv+0x8c>)
   b53d8:	f7fe fedc 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b53dc:	4621      	mov	r1, r4
   b53de:	4a0d      	ldr	r2, [pc, #52]	; (b5414 <_Z18storageObjectStartv+0xa0>)
   b53e0:	4808      	ldr	r0, [pc, #32]	; (b5404 <_Z18storageObjectStartv+0x90>)
   b53e2:	2328      	movs	r3, #40	; 0x28
   b53e4:	f000 ff8e 	bl	b6304 <_ZN6MB85RC8readDataEjPhj>
   b53e8:	4a0b      	ldr	r2, [pc, #44]	; (b5418 <_Z18storageObjectStartv+0xa4>)
   b53ea:	4806      	ldr	r0, [pc, #24]	; (b5404 <_Z18storageObjectStartv+0x90>)
   b53ec:	2330      	movs	r3, #48	; 0x30
   b53ee:	2150      	movs	r1, #80	; 0x50
   b53f0:	f000 ff88 	bl	b6304 <_ZN6MB85RC8readDataEjPhj>
   b53f4:	e7eb      	b.n	b53ce <_Z18storageObjectStartv+0x5a>
      return false;
   b53f6:	2000      	movs	r0, #0
   b53f8:	e7ea      	b.n	b53d0 <_Z18storageObjectStartv+0x5c>
   b53fa:	bf00      	nop
   b53fc:	000bc984 	.word	0x000bc984
   b5400:	2003e654 	.word	0x2003e654
   b5404:	2003df2c 	.word	0x2003df2c
   b5408:	000bc9a2 	.word	0x000bc9a2
   b540c:	000bca04 	.word	0x000bca04
   b5410:	000bc9df 	.word	0x000bc9df
   b5414:	2003e3a0 	.word	0x2003e3a0
   b5418:	2003e370 	.word	0x2003e370

000b541c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b541c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b541e:	6803      	ldr	r3, [r0, #0]
   b5420:	2b2f      	cmp	r3, #47	; 0x2f
{
   b5422:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5424:	d904      	bls.n	b5430 <nrf_gpio_pin_port_decode+0x14>
   b5426:	4a07      	ldr	r2, [pc, #28]	; (b5444 <nrf_gpio_pin_port_decode+0x28>)
   b5428:	4907      	ldr	r1, [pc, #28]	; (b5448 <nrf_gpio_pin_port_decode+0x2c>)
   b542a:	200a      	movs	r0, #10
   b542c:	f002 fccc 	bl	b7dc8 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b5430:	6823      	ldr	r3, [r4, #0]
   b5432:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5434:	bf83      	ittte	hi
   b5436:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b543a:	4804      	ldrhi	r0, [pc, #16]	; (b544c <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b543c:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b543e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b5442:	bd10      	pop	{r4, pc}
   b5444:	000b7a39 	.word	0x000b7a39
   b5448:	000bca81 	.word	0x000bca81
   b544c:	50000300 	.word	0x50000300

000b5450 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b5450:	ee07 0a90 	vmov	s15, r0
   b5454:	ed9f 7a09 	vldr	s14, [pc, #36]	; b547c <_Z17tmp36TemperatureCi+0x2c>
   b5458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b545c:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5460:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5480 <_Z17tmp36TemperatureCi+0x30>
   b5464:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5468:	eddf 7a06 	vldr	s15, [pc, #24]	; b5484 <_Z17tmp36TemperatureCi+0x34>
   b546c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b5470:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5474:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5478:	4770      	bx	lr
   b547a:	bf00      	nop
   b547c:	454e4000 	.word	0x454e4000
   b5480:	457ff000 	.word	0x457ff000
   b5484:	43fa0000 	.word	0x43fa0000

000b5488 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   b5488:	b510      	push	{r4, lr}
   b548a:	b086      	sub	sp, #24
    const diag_source* src = nullptr;
   b548c:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b548e:	a902      	add	r1, sp, #8
   b5490:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   b5492:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   b5494:	f002 fcc0 	bl	b7e18 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5498:	b998      	cbnz	r0, b54c2 <_Z12batteryStatev+0x3a>
    return get(src, val);
   b549a:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   b549c:	b10c      	cbz	r4, b54a2 <_Z12batteryStatev+0x1a>
   b549e:	6923      	ldr	r3, [r4, #16]
   b54a0:	b923      	cbnz	r3, b54ac <_Z12batteryStatev+0x24>
   b54a2:	4a17      	ldr	r2, [pc, #92]	; (b5500 <_Z12batteryStatev+0x78>)
   b54a4:	4917      	ldr	r1, [pc, #92]	; (b5504 <_Z12batteryStatev+0x7c>)
   b54a6:	200a      	movs	r0, #10
   b54a8:	f002 fc8e 	bl	b7dc8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b54ac:	230c      	movs	r3, #12
   b54ae:	9303      	str	r3, [sp, #12]
   b54b0:	ab01      	add	r3, sp, #4
   b54b2:	9304      	str	r3, [sp, #16]
   b54b4:	2304      	movs	r3, #4
   b54b6:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b54b8:	aa03      	add	r2, sp, #12
   b54ba:	6923      	ldr	r3, [r4, #16]
   b54bc:	2101      	movs	r1, #1
   b54be:	4620      	mov	r0, r4
   b54c0:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   b54c2:	4b11      	ldr	r3, [pc, #68]	; (b5508 <_Z12batteryStatev+0x80>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   b54c4:	4c11      	ldr	r4, [pc, #68]	; (b550c <_Z12batteryStatev+0x84>)
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   b54c6:	7a1b      	ldrb	r3, [r3, #8]
        if (r < 0) {
   b54c8:	2800      	cmp	r0, #0
        return val;
   b54ca:	bfa8      	it	ge
   b54cc:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   b54ce:	7320      	strb	r0, [r4, #12]
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   b54d0:	b133      	cbz	r3, b54e0 <_Z12batteryStatev+0x58>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b54d2:	480f      	ldr	r0, [pc, #60]	; (b5510 <_Z12batteryStatev+0x88>)
   b54d4:	f003 fb44 	bl	b8b60 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b54d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b54dc:	f002 fe28 	bl	b8130 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   b54e0:	480b      	ldr	r0, [pc, #44]	; (b5510 <_Z12batteryStatev+0x88>)
   b54e2:	f003 fadb 	bl	b8a9c <_ZN9FuelGauge6getSoCEv>
   b54e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b54ea:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   b54ee:	283c      	cmp	r0, #60	; 0x3c
   b54f0:	bfd4      	ite	le
   b54f2:	2000      	movle	r0, #0
   b54f4:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   b54f6:	edc4 7a02 	vstr	s15, [r4, #8]
}
   b54fa:	b006      	add	sp, #24
   b54fc:	bd10      	pop	{r4, pc}
   b54fe:	bf00      	nop
   b5500:	000b7a39 	.word	0x000b7a39
   b5504:	000bc261 	.word	0x000bc261
   b5508:	2003e3a0 	.word	0x2003e3a0
   b550c:	2003e370 	.word	0x2003e370
   b5510:	2003e3d0 	.word	0x2003e3d0

000b5514 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b5514:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   b5516:	4d0c      	ldr	r5, [pc, #48]	; (b5548 <_Z16isItSafeToChargev+0x34>)
  PMIC pmic(true);
   b5518:	2101      	movs	r1, #1
   b551a:	a801      	add	r0, sp, #4
   b551c:	f004 fe75 	bl	ba20a <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   b5520:	792b      	ldrb	r3, [r5, #4]
   b5522:	2b25      	cmp	r3, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5524:	a801      	add	r0, sp, #4
   b5526:	f04f 0401 	mov.w	r4, #1
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   b552a:	d909      	bls.n	b5540 <_Z16isItSafeToChargev+0x2c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b552c:	f004 ff00 	bl	ba330 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b5530:	732c      	strb	r4, [r5, #12]
    return false;
   b5532:	2400      	movs	r4, #0
  PMIC pmic(true);
   b5534:	a801      	add	r0, sp, #4
   b5536:	f004 fe77 	bl	ba228 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b553a:	4620      	mov	r0, r4
   b553c:	b003      	add	sp, #12
   b553e:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b5540:	f004 fedb 	bl	ba2fa <_ZN4PMIC14enableChargingEv>
    return true;
   b5544:	e7f6      	b.n	b5534 <_Z16isItSafeToChargev+0x20>
   b5546:	bf00      	nop
   b5548:	2003e370 	.word	0x2003e370

000b554c <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b554c:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b554e:	4d19      	ldr	r5, [pc, #100]	; (b55b4 <_Z17getSignalStrengthv+0x68>)
   b5550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b5552:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5554:	ac0c      	add	r4, sp, #48	; 0x30
   b5556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b555a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b555c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5560:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b5564:	4914      	ldr	r1, [pc, #80]	; (b55b8 <_Z17getSignalStrengthv+0x6c>)
   b5566:	a804      	add	r0, sp, #16
   b5568:	f002 fe6e 	bl	b8248 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b556c:	a804      	add	r0, sp, #16
   b556e:	f002 feae 	bl	b82ce <_ZNK14CellularSignal19getAccessTechnologyEv>
   b5572:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b5574:	a804      	add	r0, sp, #16
   b5576:	f002 fee3 	bl	b8340 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b557a:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b557c:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b5580:	f002 ff0e 	bl	b83a0 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5584:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b5586:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b558a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b558e:	f006 f895 	bl	bb6bc <__aeabi_f2d>
   b5592:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5596:	4628      	mov	r0, r5
   b5598:	f006 f890 	bl	bb6bc <__aeabi_f2d>
   b559c:	e9cd 0100 	strd	r0, r1, [sp]
   b55a0:	4a06      	ldr	r2, [pc, #24]	; (b55bc <_Z17getSignalStrengthv+0x70>)
   b55a2:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b55a6:	4806      	ldr	r0, [pc, #24]	; (b55c0 <_Z17getSignalStrengthv+0x74>)
   b55a8:	2140      	movs	r1, #64	; 0x40
   b55aa:	f002 fd69 	bl	b8080 <snprintf>
}
   b55ae:	b017      	add	sp, #92	; 0x5c
   b55b0:	bd30      	pop	{r4, r5, pc}
   b55b2:	bf00      	nop
   b55b4:	000bcafc 	.word	0x000bcafc
   b55b8:	2003e610 	.word	0x2003e610
   b55bc:	000bcaa5 	.word	0x000bcaa5
   b55c0:	2003de3c 	.word	0x2003de3c

000b55c4 <_Z16takeMeasurementsv>:
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   b55c4:	4b10      	ldr	r3, [pc, #64]	; (b5608 <_Z16takeMeasurementsv+0x44>)
bool takeMeasurements() { 
   b55c6:	b510      	push	{r4, lr}
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   b55c8:	8818      	ldrh	r0, [r3, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   b55ca:	4c10      	ldr	r4, [pc, #64]	; (b560c <_Z16takeMeasurementsv+0x48>)
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   b55cc:	f005 fe3d 	bl	bb24a <analogRead>
   b55d0:	f7ff ff3e 	bl	b5450 <_Z17tmp36TemperatureCi>
   b55d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b55d8:	4a0d      	ldr	r2, [pc, #52]	; (b5610 <_Z16takeMeasurementsv+0x4c>)
   b55da:	ee17 3a90 	vmov	r3, s15
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   b55de:	2110      	movs	r1, #16
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   b55e0:	7113      	strb	r3, [r2, #4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   b55e2:	4620      	mov	r0, r4
   b55e4:	b2db      	uxtb	r3, r3
   b55e6:	4a0b      	ldr	r2, [pc, #44]	; (b5614 <_Z16takeMeasurementsv+0x50>)
   b55e8:	f002 fd4a 	bl	b8080 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   b55ec:	490a      	ldr	r1, [pc, #40]	; (b5618 <_Z16takeMeasurementsv+0x54>)
   b55ee:	480b      	ldr	r0, [pc, #44]	; (b561c <_Z16takeMeasurementsv+0x58>)
   b55f0:	4622      	mov	r2, r4
   b55f2:	f7fe fdcf 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   b55f6:	f7ff ff47 	bl	b5488 <_Z12batteryStatev>
    isItSafeToCharge();
   b55fa:	f7ff ff8b 	bl	b5514 <_Z16isItSafeToChargev>
    getSignalStrength();
   b55fe:	f7ff ffa5 	bl	b554c <_Z17getSignalStrengthv>
}
   b5602:	2001      	movs	r0, #1
   b5604:	bd10      	pop	{r4, pc}
   b5606:	bf00      	nop
   b5608:	000bc846 	.word	0x000bc846
   b560c:	2003de2c 	.word	0x2003de2c
   b5610:	2003e370 	.word	0x2003e370
   b5614:	000bcabe 	.word	0x000bcabe
   b5618:	000bcac3 	.word	0x000bcac3
   b561c:	2003e654 	.word	0x2003e654

000b5620 <_Z11recordCountv>:
 * is the same regardless.  The sensor will trigger an interrupt, which will set a flag. In the main loop
 * that flag will call this function which will determine if this event should "count" as a visitor.
 * 
 */
void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b5620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5622:	4e3d      	ldr	r6, [pc, #244]	; (b5718 <_Z11recordCountv+0xf8>)
   b5624:	4c3d      	ldr	r4, [pc, #244]	; (b571c <_Z11recordCountv+0xfc>)
   b5626:	7833      	ldrb	r3, [r6, #0]
   b5628:	f3bf 8f5b 	dmb	ish
   b562c:	f013 0f01 	tst.w	r3, #1
   b5630:	d109      	bne.n	b5646 <_Z11recordCountv+0x26>
   b5632:	4630      	mov	r0, r6
   b5634:	f7fe fd42 	bl	b40bc <__cxa_guard_acquire>
   b5638:	b128      	cbz	r0, b5646 <_Z11recordCountv+0x26>
   b563a:	f002 fa25 	bl	b7a88 <HAL_Pin_Map>
   b563e:	6020      	str	r0, [r4, #0]
   b5640:	4630      	mov	r0, r6
   b5642:	f7fe fd40 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5646:	4b36      	ldr	r3, [pc, #216]	; (b5720 <_Z11recordCountv+0x100>)
   b5648:	881d      	ldrh	r5, [r3, #0]
   b564a:	6823      	ldr	r3, [r4, #0]
   b564c:	012d      	lsls	r5, r5, #4
   b564e:	5d5b      	ldrb	r3, [r3, r5]
   b5650:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5652:	7833      	ldrb	r3, [r6, #0]
   b5654:	f3bf 8f5b 	dmb	ish
   b5658:	07d9      	lsls	r1, r3, #31
   b565a:	d409      	bmi.n	b5670 <_Z11recordCountv+0x50>
   b565c:	482e      	ldr	r0, [pc, #184]	; (b5718 <_Z11recordCountv+0xf8>)
   b565e:	f7fe fd2d 	bl	b40bc <__cxa_guard_acquire>
   b5662:	b128      	cbz	r0, b5670 <_Z11recordCountv+0x50>
   b5664:	f002 fa10 	bl	b7a88 <HAL_Pin_Map>
   b5668:	6020      	str	r0, [r4, #0]
   b566a:	482b      	ldr	r0, [pc, #172]	; (b5718 <_Z11recordCountv+0xf8>)
   b566c:	f7fe fd2b 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5670:	6823      	ldr	r3, [r4, #0]
   b5672:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5674:	a801      	add	r0, sp, #4
   b5676:	785b      	ldrb	r3, [r3, #1]
   b5678:	f003 031f 	and.w	r3, r3, #31
   b567c:	433b      	orrs	r3, r7
   b567e:	9301      	str	r3, [sp, #4]
   b5680:	f7ff fecc 	bl	b541c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b5684:	9a01      	ldr	r2, [sp, #4]
   b5686:	2301      	movs	r3, #1
   b5688:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b568a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                               // Turn on the blue LED

  current.lastCountTime = Time.now();
   b568e:	f005 fba2 	bl	badd6 <_ZN9TimeClass3nowEv>
   b5692:	4924      	ldr	r1, [pc, #144]	; (b5724 <_Z11recordCountv+0x104>)
  current.hourlyCount++;                                              // Increment the PersonCount
   b5694:	8c0a      	ldrh	r2, [r1, #32]
  current.dailyCount++;                                               // Increment the PersonCount
   b5696:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
  current.lastCountTime = Time.now();
   b5698:	61c8      	str	r0, [r1, #28]
  current.hourlyCount++;                                              // Increment the PersonCount
   b569a:	3201      	adds	r2, #1
  current.dailyCount++;                                               // Increment the PersonCount
   b569c:	3301      	adds	r3, #1
  current.hourlyCount++;                                              // Increment the PersonCount
   b569e:	b292      	uxth	r2, r2
  current.dailyCount++;                                               // Increment the PersonCount
   b56a0:	b29b      	uxth	r3, r3
  current.hourlyCount++;                                              // Increment the PersonCount
   b56a2:	840a      	strh	r2, [r1, #32]
  current.dailyCount++;                                               // Increment the PersonCount
   b56a4:	844b      	strh	r3, [r1, #34]	; 0x22
  Log.info("Count, hourly: %i. daily: %i",current.hourlyCount,current.dailyCount);
   b56a6:	4820      	ldr	r0, [pc, #128]	; (b5728 <_Z11recordCountv+0x108>)
   b56a8:	4920      	ldr	r1, [pc, #128]	; (b572c <_Z11recordCountv+0x10c>)
   b56aa:	f7fe fd73 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b56ae:	20c8      	movs	r0, #200	; 0xc8
   b56b0:	f002 fd3e 	bl	b8130 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b56b4:	7833      	ldrb	r3, [r6, #0]
   b56b6:	f3bf 8f5b 	dmb	ish
   b56ba:	07da      	lsls	r2, r3, #31
   b56bc:	d409      	bmi.n	b56d2 <_Z11recordCountv+0xb2>
   b56be:	4816      	ldr	r0, [pc, #88]	; (b5718 <_Z11recordCountv+0xf8>)
   b56c0:	f7fe fcfc 	bl	b40bc <__cxa_guard_acquire>
   b56c4:	b128      	cbz	r0, b56d2 <_Z11recordCountv+0xb2>
   b56c6:	f002 f9df 	bl	b7a88 <HAL_Pin_Map>
   b56ca:	6020      	str	r0, [r4, #0]
   b56cc:	4812      	ldr	r0, [pc, #72]	; (b5718 <_Z11recordCountv+0xf8>)
   b56ce:	f7fe fcfa 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b56d2:	6823      	ldr	r3, [r4, #0]
   b56d4:	5d5b      	ldrb	r3, [r3, r5]
   b56d6:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b56d8:	7833      	ldrb	r3, [r6, #0]
   b56da:	f3bf 8f5b 	dmb	ish
   b56de:	07db      	lsls	r3, r3, #31
   b56e0:	d409      	bmi.n	b56f6 <_Z11recordCountv+0xd6>
   b56e2:	480d      	ldr	r0, [pc, #52]	; (b5718 <_Z11recordCountv+0xf8>)
   b56e4:	f7fe fcea 	bl	b40bc <__cxa_guard_acquire>
   b56e8:	b128      	cbz	r0, b56f6 <_Z11recordCountv+0xd6>
   b56ea:	f002 f9cd 	bl	b7a88 <HAL_Pin_Map>
   b56ee:	6020      	str	r0, [r4, #0]
   b56f0:	4809      	ldr	r0, [pc, #36]	; (b5718 <_Z11recordCountv+0xf8>)
   b56f2:	f7fe fce8 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b56f6:	6823      	ldr	r3, [r4, #0]
   b56f8:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b56fa:	a801      	add	r0, sp, #4
   b56fc:	786b      	ldrb	r3, [r5, #1]
   b56fe:	f003 031f 	and.w	r3, r3, #31
   b5702:	433b      	orrs	r3, r7
   b5704:	9301      	str	r3, [sp, #4]
   b5706:	f7ff fe89 	bl	b541c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b570a:	9a01      	ldr	r2, [sp, #4]
   b570c:	2301      	movs	r3, #1
   b570e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b5710:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);
}
   b5714:	b003      	add	sp, #12
   b5716:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5718:	2003e3c8 	.word	0x2003e3c8
   b571c:	2003e3cc 	.word	0x2003e3cc
   b5720:	000bc83c 	.word	0x000bc83c
   b5724:	2003e370 	.word	0x2003e370
   b5728:	2003e654 	.word	0x2003e654
   b572c:	000bcade 	.word	0x000bcade

000b5730 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b5730:	4801      	ldr	r0, [pc, #4]	; (b5738 <_GLOBAL__sub_I_batteryContext+0x8>)
   b5732:	2100      	movs	r1, #0
   b5734:	f003 b966 	b.w	b8a04 <_ZN9FuelGaugeC1Eb>
   b5738:	2003e3d0 	.word	0x2003e3d0

000b573c <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b573c:	4770      	bx	lr

000b573e <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b573e:	b510      	push	{r4, lr}
}
   b5740:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b5742:	4604      	mov	r4, r0
}
   b5744:	f7fe fcab 	bl	b409e <_ZdlPvj>
   b5748:	4620      	mov	r0, r4
   b574a:	bd10      	pop	{r4, pc}

000b574c <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b574c:	b530      	push	{r4, r5, lr}
   b574e:	b085      	sub	sp, #20
   b5750:	4604      	mov	r4, r0
   b5752:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b5754:	b160      	cbz	r0, b5770 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b5756:	6840      	ldr	r0, [r0, #4]
   b5758:	b150      	cbz	r0, b5770 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b575a:	6885      	ldr	r5, [r0, #8]
   b575c:	b145      	cbz	r5, b5770 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b575e:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b5762:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5766:	68c4      	ldr	r4, [r0, #12]
   b5768:	ab01      	add	r3, sp, #4
   b576a:	466a      	mov	r2, sp
   b576c:	a902      	add	r1, sp, #8
   b576e:	47a0      	blx	r4
    }
   b5770:	b005      	add	sp, #20
   b5772:	bd30      	pop	{r4, r5, pc}

000b5774 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5774:	b530      	push	{r4, r5, lr}
   b5776:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b5778:	6800      	ldr	r0, [r0, #0]
   b577a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b5782:	6883      	ldr	r3, [r0, #8]
   b5784:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5788:	b90b      	cbnz	r3, b578e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b578a:	f005 fe2f 	bl	bb3ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b578e:	68c3      	ldr	r3, [r0, #12]
   b5790:	aa01      	add	r2, sp, #4
   b5792:	a902      	add	r1, sp, #8
   b5794:	4798      	blx	r3
      }
   b5796:	b005      	add	sp, #20
   b5798:	bd30      	pop	{r4, r5, pc}

000b579a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b579a:	2a01      	cmp	r2, #1
   b579c:	d102      	bne.n	b57a4 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b579e:	6001      	str	r1, [r0, #0]
      }
   b57a0:	2000      	movs	r0, #0
   b57a2:	4770      	bx	lr
	  switch (__op)
   b57a4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b57a6:	bf04      	itt	eq
   b57a8:	680b      	ldreq	r3, [r1, #0]
   b57aa:	6003      	streq	r3, [r0, #0]
	      break;
   b57ac:	e7f8      	b.n	b57a0 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b57ae <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b57ae:	6803      	ldr	r3, [r0, #0]
   b57b0:	6812      	ldr	r2, [r2, #0]
   b57b2:	e9d1 0100 	ldrd	r0, r1, [r1]
   b57b6:	4718      	bx	r3

000b57b8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b57b8:	b510      	push	{r4, lr}
      if (_M_manager)
   b57ba:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b57bc:	4604      	mov	r4, r0
      if (_M_manager)
   b57be:	b113      	cbz	r3, b57c6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b57c0:	2203      	movs	r2, #3
   b57c2:	4601      	mov	r1, r0
   b57c4:	4798      	blx	r3
    }
   b57c6:	4620      	mov	r0, r4
   b57c8:	bd10      	pop	{r4, pc}

000b57ca <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b57ca:	b510      	push	{r4, lr}
            delete callableWrapper;
   b57cc:	4604      	mov	r4, r0
   b57ce:	b138      	cbz	r0, b57e0 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b57d0:	f7ff fff2 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
   b57d4:	4620      	mov	r0, r4
   b57d6:	2110      	movs	r1, #16
        };
   b57d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b57dc:	f7fe bc5f 	b.w	b409e <_ZdlPvj>
        };
   b57e0:	bd10      	pop	{r4, pc}

000b57e2 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b57e2:	b510      	push	{r4, lr}
   b57e4:	4604      	mov	r4, r0
   b57e6:	b08a      	sub	sp, #40	; 0x28
   b57e8:	4608      	mov	r0, r1
    attr.flags = 0;
   b57ea:	f04f 0c20 	mov.w	ip, #32
   b57ee:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b57f0:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b57f4:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b57f8:	460b      	mov	r3, r1
   b57fa:	aa02      	add	r2, sp, #8
   b57fc:	6821      	ldr	r1, [r4, #0]
   b57fe:	f002 faf3 	bl	b7de8 <log_message_v>
}
   b5802:	b00a      	add	sp, #40	; 0x28
   b5804:	bd10      	pop	{r4, pc}

000b5806 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b5806:	b40e      	push	{r1, r2, r3}
   b5808:	b503      	push	{r0, r1, lr}
   b580a:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b580c:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b580e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5812:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b5814:	f7ff ffe5 	bl	b57e2 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5818:	b002      	add	sp, #8
   b581a:	f85d eb04 	ldr.w	lr, [sp], #4
   b581e:	b003      	add	sp, #12
   b5820:	4770      	bx	lr

000b5822 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5822:	b40e      	push	{r1, r2, r3}
   b5824:	b503      	push	{r0, r1, lr}
   b5826:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b5828:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b582a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b582e:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b5830:	f7ff ffd7 	bl	b57e2 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5834:	b002      	add	sp, #8
   b5836:	f85d eb04 	ldr.w	lr, [sp], #4
   b583a:	b003      	add	sp, #12
   b583c:	4770      	bx	lr
	...

000b5840 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5840:	b510      	push	{r4, lr}
   b5842:	7202      	strb	r2, [r0, #8]
   b5844:	22ff      	movs	r2, #255	; 0xff
   b5846:	8142      	strh	r2, [r0, #10]
   b5848:	2200      	movs	r2, #0
   b584a:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b584e:	6142      	str	r2, [r0, #20]
   b5850:	7602      	strb	r2, [r0, #24]
   b5852:	61c2      	str	r2, [r0, #28]
    instance = this;
   b5854:	4a02      	ldr	r2, [pc, #8]	; (b5860 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5856:	4c03      	ldr	r4, [pc, #12]	; (b5864 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b5858:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b585a:	e9c0 4100 	strd	r4, r1, [r0]
}
   b585e:	bd10      	pop	{r4, pc}
   b5860:	2003e3dc 	.word	0x2003e3dc
   b5864:	000bcd10 	.word	0x000bcd10

000b5868 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b5868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b586c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b5870:	4604      	mov	r4, r0
   b5872:	4689      	mov	r9, r1
   b5874:	4616      	mov	r6, r2
   b5876:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b5878:	f1b8 0f00 	cmp.w	r8, #0
   b587c:	d002      	beq.n	b5884 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b587e:	6840      	ldr	r0, [r0, #4]
   b5880:	f003 fa08 	bl	b8c94 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5884:	7a21      	ldrb	r1, [r4, #8]
   b5886:	6860      	ldr	r0, [r4, #4]
   b5888:	f003 f9e1 	bl	b8c4e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b588c:	6860      	ldr	r0, [r4, #4]
   b588e:	6803      	ldr	r3, [r0, #0]
   b5890:	4649      	mov	r1, r9
   b5892:	689b      	ldr	r3, [r3, #8]
   b5894:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b5896:	6860      	ldr	r0, [r4, #4]
   b5898:	2100      	movs	r1, #0
   b589a:	f003 f9f7 	bl	b8c8c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b589e:	4605      	mov	r5, r0
   b58a0:	bb00      	cbnz	r0, b58e4 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b58a2:	2301      	movs	r3, #1
   b58a4:	7a21      	ldrb	r1, [r4, #8]
   b58a6:	6860      	ldr	r0, [r4, #4]
   b58a8:	463a      	mov	r2, r7
   b58aa:	f003 f9be 	bl	b8c2a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b58ae:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b58b0:	4603      	mov	r3, r0
        if (count == num) {
   b58b2:	d109      	bne.n	b58c8 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b58b4:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b58b6:	42be      	cmp	r6, r7
   b58b8:	d01c      	beq.n	b58f4 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b58ba:	6860      	ldr	r0, [r4, #4]
   b58bc:	6803      	ldr	r3, [r0, #0]
   b58be:	695b      	ldr	r3, [r3, #20]
   b58c0:	4798      	blx	r3
   b58c2:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b58c6:	e7f6      	b.n	b58b6 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b58c8:	490b      	ldr	r1, [pc, #44]	; (b58f8 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b58ca:	480c      	ldr	r0, [pc, #48]	; (b58fc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b58cc:	464a      	mov	r2, r9
   b58ce:	f7ff ff9a 	bl	b5806 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b58d2:	f1b8 0f00 	cmp.w	r8, #0
   b58d6:	d002      	beq.n	b58de <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b58d8:	6860      	ldr	r0, [r4, #4]
   b58da:	f003 f9e4 	bl	b8ca6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b58de:	4628      	mov	r0, r5
   b58e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b58e4:	4603      	mov	r3, r0
   b58e6:	4906      	ldr	r1, [pc, #24]	; (b5900 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b58e8:	4804      	ldr	r0, [pc, #16]	; (b58fc <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b58ea:	464a      	mov	r2, r9
   b58ec:	f7ff ff8b 	bl	b5806 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b58f0:	2500      	movs	r5, #0
   b58f2:	e7ee      	b.n	b58d2 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b58f4:	2501      	movs	r5, #1
   b58f6:	e7ec      	b.n	b58d2 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b58f8:	000bcb24 	.word	0x000bcb24
   b58fc:	2003e3d8 	.word	0x2003e3d8
   b5900:	000bcb49 	.word	0x000bcb49

000b5904 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b5904:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b5906:	9300      	str	r3, [sp, #0]
   b5908:	2301      	movs	r3, #1
   b590a:	f7ff ffad 	bl	b5868 <_ZN6AB180513readRegistersEhPhjb>
}
   b590e:	b003      	add	sp, #12
   b5910:	f85d fb04 	ldr.w	pc, [sp], #4

000b5914 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b5914:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b5916:	8943      	ldrh	r3, [r0, #10]
   b5918:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b591a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b591c:	d010      	beq.n	b5940 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b591e:	4e19      	ldr	r6, [pc, #100]	; (b5984 <_ZN6AB180510detectChipEv+0x70>)
   b5920:	4d19      	ldr	r5, [pc, #100]	; (b5988 <_ZN6AB180510detectChipEv+0x74>)
   b5922:	f002 f891 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b5926:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b592a:	d209      	bcs.n	b5940 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b592c:	8960      	ldrh	r0, [r4, #10]
   b592e:	f005 fc79 	bl	bb224 <digitalRead>
   b5932:	2801      	cmp	r0, #1
   b5934:	d004      	beq.n	b5940 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5936:	4631      	mov	r1, r6
   b5938:	4628      	mov	r0, r5
   b593a:	f7fe fc2b 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b593e:	e7f0      	b.n	b5922 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b5940:	2301      	movs	r3, #1
   b5942:	f10d 0207 	add.w	r2, sp, #7
   b5946:	2128      	movs	r1, #40	; 0x28
   b5948:	4620      	mov	r0, r4
   b594a:	f7ff ffdb 	bl	b5904 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b594e:	b930      	cbnz	r0, b595e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b5950:	480d      	ldr	r0, [pc, #52]	; (b5988 <_ZN6AB180510detectChipEv+0x74>)
   b5952:	490e      	ldr	r1, [pc, #56]	; (b598c <_ZN6AB180510detectChipEv+0x78>)
   b5954:	f7fe fc1e 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b5958:	2000      	movs	r0, #0
}
   b595a:	b002      	add	sp, #8
   b595c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b595e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5962:	2b18      	cmp	r3, #24
   b5964:	d1f4      	bne.n	b5950 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b5966:	2301      	movs	r3, #1
   b5968:	f10d 0207 	add.w	r2, sp, #7
   b596c:	2129      	movs	r1, #41	; 0x29
   b596e:	4620      	mov	r0, r4
   b5970:	f7ff ffc8 	bl	b5904 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b5974:	2800      	cmp	r0, #0
   b5976:	d0eb      	beq.n	b5950 <_ZN6AB180510detectChipEv+0x3c>
   b5978:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b597c:	2b05      	cmp	r3, #5
   b597e:	d1e7      	bne.n	b5950 <_ZN6AB180510detectChipEv+0x3c>
   b5980:	e7eb      	b.n	b595a <_ZN6AB180510detectChipEv+0x46>
   b5982:	bf00      	nop
   b5984:	000bcb6d 	.word	0x000bcb6d
   b5988:	2003e3d8 	.word	0x2003e3d8
   b598c:	000bcb82 	.word	0x000bcb82

000b5990 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b5990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5994:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b5998:	4604      	mov	r4, r0
   b599a:	460f      	mov	r7, r1
   b599c:	4615      	mov	r5, r2
   b599e:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b59a0:	f1b8 0f00 	cmp.w	r8, #0
   b59a4:	d002      	beq.n	b59ac <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b59a6:	6840      	ldr	r0, [r0, #4]
   b59a8:	f003 f974 	bl	b8c94 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b59ac:	7a21      	ldrb	r1, [r4, #8]
   b59ae:	6860      	ldr	r0, [r4, #4]
   b59b0:	f003 f94d 	bl	b8c4e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b59b4:	6860      	ldr	r0, [r4, #4]
   b59b6:	6803      	ldr	r3, [r0, #0]
   b59b8:	4639      	mov	r1, r7
   b59ba:	689b      	ldr	r3, [r3, #8]
   b59bc:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b59be:	442e      	add	r6, r5
   b59c0:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b59c2:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b59c4:	d005      	beq.n	b59d2 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b59c6:	6803      	ldr	r3, [r0, #0]
   b59c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b59cc:	689b      	ldr	r3, [r3, #8]
   b59ce:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b59d0:	e7f6      	b.n	b59c0 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b59d2:	2101      	movs	r1, #1
   b59d4:	f003 f95a 	bl	b8c8c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b59d8:	4603      	mov	r3, r0
   b59da:	b170      	cbz	r0, b59fa <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b59dc:	4908      	ldr	r1, [pc, #32]	; (b5a00 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b59de:	4809      	ldr	r0, [pc, #36]	; (b5a04 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b59e0:	463a      	mov	r2, r7
   b59e2:	f7ff ff10 	bl	b5806 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b59e6:	2500      	movs	r5, #0
    }

    if (lock) {
   b59e8:	f1b8 0f00 	cmp.w	r8, #0
   b59ec:	d002      	beq.n	b59f4 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b59ee:	6860      	ldr	r0, [r4, #4]
   b59f0:	f003 f959 	bl	b8ca6 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b59f4:	4628      	mov	r0, r5
   b59f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b59fa:	2501      	movs	r5, #1
   b59fc:	e7f4      	b.n	b59e8 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b59fe:	bf00      	nop
   b5a00:	000bcb8f 	.word	0x000bcb8f
   b5a04:	2003e3d8 	.word	0x2003e3d8

000b5a08 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b5a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5a0a:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b5a0e:	9300      	str	r3, [sp, #0]
   b5a10:	f10d 020f 	add.w	r2, sp, #15
   b5a14:	2301      	movs	r3, #1
   b5a16:	f7ff ffbb 	bl	b5990 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b5a1a:	b005      	add	sp, #20
   b5a1c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5a20 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b5a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b5a22:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b5a24:	460c      	mov	r4, r1
   b5a26:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b5a28:	491a      	ldr	r1, [pc, #104]	; (b5a94 <_ZN6AB18056setWDTEi+0x74>)
   b5a2a:	481b      	ldr	r0, [pc, #108]	; (b5a98 <_ZN6AB18056setWDTEi+0x78>)
   b5a2c:	f7fe fbb2 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b5a30:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b5a32:	bfb8      	it	lt
   b5a34:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b5a36:	b97c      	cbnz	r4, b5a58 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b5a38:	2301      	movs	r3, #1
   b5a3a:	4622      	mov	r2, r4
   b5a3c:	211b      	movs	r1, #27
   b5a3e:	4628      	mov	r0, r5
   b5a40:	f7ff ffe2 	bl	b5a08 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b5a44:	4915      	ldr	r1, [pc, #84]	; (b5a9c <_ZN6AB18056setWDTEi+0x7c>)
   b5a46:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b5a48:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b5a4a:	4813      	ldr	r0, [pc, #76]	; (b5a98 <_ZN6AB18056setWDTEi+0x78>)
   b5a4c:	f7ff fee9 	bl	b5822 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b5a50:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b5a52:	616c      	str	r4, [r5, #20]
}
   b5a54:	4630      	mov	r0, r6
   b5a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b5a58:	2c03      	cmp	r4, #3
   b5a5a:	dd19      	ble.n	b5a90 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b5a5c:	10a7      	asrs	r7, r4, #2
   b5a5e:	2f1f      	cmp	r7, #31
   b5a60:	bfa8      	it	ge
   b5a62:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b5a64:	00ba      	lsls	r2, r7, #2
   b5a66:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b5a6a:	2301      	movs	r3, #1
   b5a6c:	b2d2      	uxtb	r2, r2
   b5a6e:	211b      	movs	r1, #27
   b5a70:	4628      	mov	r0, r5
   b5a72:	f7ff ffc9 	bl	b5a08 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b5a76:	463a      	mov	r2, r7
   b5a78:	4603      	mov	r3, r0
   b5a7a:	4909      	ldr	r1, [pc, #36]	; (b5aa0 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b5a7c:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b5a7e:	4806      	ldr	r0, [pc, #24]	; (b5a98 <_ZN6AB18056setWDTEi+0x78>)
   b5a80:	f7ff fecf 	bl	b5822 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b5a84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b5a88:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b5a8a:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b5a8c:	616f      	str	r7, [r5, #20]
   b5a8e:	e7e1      	b.n	b5a54 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b5a90:	2701      	movs	r7, #1
   b5a92:	e7e7      	b.n	b5a64 <_ZN6AB18056setWDTEi+0x44>
   b5a94:	000bcbb4 	.word	0x000bcbb4
   b5a98:	2003e3d8 	.word	0x2003e3d8
   b5a9c:	000bcbbe 	.word	0x000bcbbe
   b5aa0:	000bcbda 	.word	0x000bcbda

000b5aa4 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b5aa4:	4b06      	ldr	r3, [pc, #24]	; (b5ac0 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b5aa6:	681a      	ldr	r2, [r3, #0]
   b5aa8:	b14a      	cbz	r2, b5abe <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b5aaa:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b5aae:	430b      	orrs	r3, r1
   b5ab0:	d105      	bne.n	b5abe <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b5ab2:	68d3      	ldr	r3, [r2, #12]
   b5ab4:	b11b      	cbz	r3, b5abe <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b5ab6:	2100      	movs	r1, #0
   b5ab8:	4610      	mov	r0, r2
   b5aba:	f7ff bfb1 	b.w	b5a20 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b5abe:	4770      	bx	lr
   b5ac0:	2003e3dc 	.word	0x2003e3dc

000b5ac4 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b5ac4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5ac8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5acc:	4605      	mov	r5, r0
   b5ace:	4616      	mov	r6, r2
   b5ad0:	461f      	mov	r7, r3
    if (lock) {
   b5ad2:	f1b8 0f00 	cmp.w	r8, #0
   b5ad6:	d004      	beq.n	b5ae2 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b5ad8:	6840      	ldr	r0, [r0, #4]
   b5ada:	9101      	str	r1, [sp, #4]
   b5adc:	f003 f8da 	bl	b8c94 <_ZN7TwoWire4lockEv>
   b5ae0:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b5ae2:	9101      	str	r1, [sp, #4]
   b5ae4:	2300      	movs	r3, #0
   b5ae6:	f10d 020f 	add.w	r2, sp, #15
   b5aea:	4628      	mov	r0, r5
   b5aec:	f7ff ff0a 	bl	b5904 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b5af0:	4604      	mov	r4, r0
   b5af2:	b160      	cbz	r0, b5b0e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b5af4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b5af8:	ea03 0206 	and.w	r2, r3, r6
   b5afc:	433a      	orrs	r2, r7
        if (newValue != value) {
   b5afe:	4293      	cmp	r3, r2
   b5b00:	d005      	beq.n	b5b0e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b5b02:	9901      	ldr	r1, [sp, #4]
   b5b04:	2300      	movs	r3, #0
   b5b06:	4628      	mov	r0, r5
   b5b08:	f7ff ff7e 	bl	b5a08 <_ZN6AB180513writeRegisterEhhb>
   b5b0c:	4604      	mov	r4, r0
    if (lock) {
   b5b0e:	f1b8 0f00 	cmp.w	r8, #0
   b5b12:	d002      	beq.n	b5b1a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b5b14:	6868      	ldr	r0, [r5, #4]
   b5b16:	f003 f8c6 	bl	b8ca6 <_ZN7TwoWire6unlockEv>
}
   b5b1a:	4620      	mov	r0, r4
   b5b1c:	b004      	add	sp, #16
   b5b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5b22 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b5b22:	b513      	push	{r0, r1, r4, lr}
   b5b24:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b5b26:	f10d 0207 	add.w	r2, sp, #7
   b5b2a:	f7ff feeb 	bl	b5904 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b5b2e:	b128      	cbz	r0, b5b3c <_ZN6AB180510isBitClearEhhb+0x1a>
   b5b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5b34:	421c      	tst	r4, r3
   b5b36:	bf0c      	ite	eq
   b5b38:	2001      	moveq	r0, #1
   b5b3a:	2000      	movne	r0, #0
}
   b5b3c:	b002      	add	sp, #8
   b5b3e:	bd10      	pop	{r4, pc}

000b5b40 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b5b40:	b513      	push	{r0, r1, r4, lr}
   b5b42:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b5b44:	f10d 0207 	add.w	r2, sp, #7
   b5b48:	f7ff fedc 	bl	b5904 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b5b4c:	b128      	cbz	r0, b5b5a <_ZN6AB18058isBitSetEhhb+0x1a>
   b5b4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5b52:	421c      	tst	r4, r3
   b5b54:	bf14      	ite	ne
   b5b56:	2001      	movne	r0, #1
   b5b58:	2000      	moveq	r0, #0
}
   b5b5a:	b002      	add	sp, #8
   b5b5c:	bd10      	pop	{r4, pc}

000b5b5e <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b5b5e:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b5b60:	43d2      	mvns	r2, r2
   b5b62:	9300      	str	r3, [sp, #0]
   b5b64:	b2d2      	uxtb	r2, r2
   b5b66:	2300      	movs	r3, #0
   b5b68:	f7ff ffac 	bl	b5ac4 <_ZN6AB180512maskRegisterEhhhb>
}
   b5b6c:	b003      	add	sp, #12
   b5b6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5b74 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b5b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b5b76:	2301      	movs	r3, #1
   b5b78:	f10d 0207 	add.w	r2, sp, #7
   b5b7c:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b5b7e:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b5b80:	f7ff fec0 	bl	b5904 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b5b84:	4605      	mov	r5, r0
   b5b86:	b938      	cbnz	r0, b5b98 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b5b88:	491e      	ldr	r1, [pc, #120]	; (b5c04 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b5b8a:	481f      	ldr	r0, [pc, #124]	; (b5c08 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b5b8c:	22ad      	movs	r2, #173	; 0xad
   b5b8e:	f7ff fe3a 	bl	b5806 <_ZNK5spark6Logger5errorEPKcz>
}
   b5b92:	4628      	mov	r0, r5
   b5b94:	b003      	add	sp, #12
   b5b96:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b5b98:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5b9c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b5ba0:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b5ba4:	d00b      	beq.n	b5bbe <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b5ba6:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b5ba8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b5baa:	210f      	movs	r1, #15
   b5bac:	4620      	mov	r0, r4
   b5bae:	f7ff ffd6 	bl	b5b5e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b5bb2:	4a16      	ldr	r2, [pc, #88]	; (b5c0c <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b5bb4:	4916      	ldr	r1, [pc, #88]	; (b5c10 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b5bb6:	4814      	ldr	r0, [pc, #80]	; (b5c08 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b5bb8:	f7fe faec 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b5bbc:	e7e9      	b.n	b5b92 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b5bbe:	2208      	movs	r2, #8
   b5bc0:	2117      	movs	r1, #23
   b5bc2:	4620      	mov	r0, r4
   b5bc4:	f7ff ffbc 	bl	b5b40 <_ZN6AB18058isBitSetEhhb>
   b5bc8:	b118      	cbz	r0, b5bd2 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b5bca:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b5bcc:	4a11      	ldr	r2, [pc, #68]	; (b5c14 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b5bce:	61e3      	str	r3, [r4, #28]
   b5bd0:	e7f0      	b.n	b5bb4 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b5bd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5bd6:	071a      	lsls	r2, r3, #28
   b5bd8:	d509      	bpl.n	b5bee <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b5bda:	2303      	movs	r3, #3
   b5bdc:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b5bde:	2208      	movs	r2, #8
   b5be0:	2301      	movs	r3, #1
   b5be2:	210f      	movs	r1, #15
   b5be4:	4620      	mov	r0, r4
   b5be6:	f7ff ffba 	bl	b5b5e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b5bea:	4a0b      	ldr	r2, [pc, #44]	; (b5c18 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b5bec:	e7e2      	b.n	b5bb4 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b5bee:	075b      	lsls	r3, r3, #29
   b5bf0:	d5cf      	bpl.n	b5b92 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b5bf2:	2204      	movs	r2, #4
   b5bf4:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b5bf6:	2301      	movs	r3, #1
   b5bf8:	210f      	movs	r1, #15
   b5bfa:	4620      	mov	r0, r4
   b5bfc:	f7ff ffaf 	bl	b5b5e <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b5c00:	4a06      	ldr	r2, [pc, #24]	; (b5c1c <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b5c02:	e7d7      	b.n	b5bb4 <_ZN6AB180516updateWakeReasonEv+0x40>
   b5c04:	000bcc2d 	.word	0x000bcc2d
   b5c08:	2003e3d8 	.word	0x2003e3d8
   b5c0c:	000bcbfe 	.word	0x000bcbfe
   b5c10:	000bcc4c 	.word	0x000bcc4c
   b5c14:	000bcc07 	.word	0x000bcc07
   b5c18:	000bcc17 	.word	0x000bcc17
   b5c1c:	000bcc27 	.word	0x000bcc27

000b5c20 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b5c20:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b5c22:	9300      	str	r3, [sp, #0]
   b5c24:	4613      	mov	r3, r2
   b5c26:	22ff      	movs	r2, #255	; 0xff
   b5c28:	f7ff ff4c 	bl	b5ac4 <_ZN6AB180512maskRegisterEhhhb>
}
   b5c2c:	b003      	add	sp, #12
   b5c2e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c32 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b5c32:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5c36:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b5c3a:	4605      	mov	r5, r0
   b5c3c:	460c      	mov	r4, r1
   b5c3e:	4691      	mov	r9, r2
   b5c40:	461f      	mov	r7, r3
    if (lock) {
   b5c42:	f1ba 0f00 	cmp.w	sl, #0
   b5c46:	d002      	beq.n	b5c4e <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b5c48:	6840      	ldr	r0, [r0, #4]
   b5c4a:	f003 f823 	bl	b8c94 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b5c4e:	b307      	cbz	r7, b5c92 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b5c50:	2f20      	cmp	r7, #32
   b5c52:	463e      	mov	r6, r7
   b5c54:	bf28      	it	cs
   b5c56:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b5c58:	2c7f      	cmp	r4, #127	; 0x7f
   b5c5a:	d826      	bhi.n	b5caa <_ZN6AB18057readRamEjPhjb+0x78>
   b5c5c:	1933      	adds	r3, r6, r4
   b5c5e:	2b80      	cmp	r3, #128	; 0x80
   b5c60:	d901      	bls.n	b5c66 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b5c62:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b5c66:	2301      	movs	r3, #1
   b5c68:	2204      	movs	r2, #4
   b5c6a:	213f      	movs	r1, #63	; 0x3f
   b5c6c:	4628      	mov	r0, r5
   b5c6e:	f7ff ff76 	bl	b5b5e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b5c72:	2300      	movs	r3, #0
   b5c74:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b5c78:	9300      	str	r3, [sp, #0]
   b5c7a:	464a      	mov	r2, r9
   b5c7c:	4633      	mov	r3, r6
   b5c7e:	b2c9      	uxtb	r1, r1
   b5c80:	4628      	mov	r0, r5
   b5c82:	f7ff fdf1 	bl	b5868 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b5c86:	4680      	mov	r8, r0
   b5c88:	b128      	cbz	r0, b5c96 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b5c8a:	4434      	add	r4, r6
        dataLen -= count;
   b5c8c:	1bbf      	subs	r7, r7, r6
        data += count;
   b5c8e:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b5c90:	e7dd      	b.n	b5c4e <_ZN6AB18057readRamEjPhjb+0x1c>
   b5c92:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b5c96:	f1ba 0f00 	cmp.w	sl, #0
   b5c9a:	d002      	beq.n	b5ca2 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b5c9c:	6868      	ldr	r0, [r5, #4]
   b5c9e:	f003 f802 	bl	b8ca6 <_ZN7TwoWire6unlockEv>
}
   b5ca2:	4640      	mov	r0, r8
   b5ca4:	b002      	add	sp, #8
   b5ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b5caa:	2301      	movs	r3, #1
   b5cac:	2204      	movs	r2, #4
   b5cae:	213f      	movs	r1, #63	; 0x3f
   b5cb0:	4628      	mov	r0, r5
   b5cb2:	f7ff ffb5 	bl	b5c20 <_ZN6AB180514setRegisterBitEhhb>
   b5cb6:	e7dc      	b.n	b5c72 <_ZN6AB18057readRamEjPhjb+0x40>

000b5cb8 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b5cb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5cbc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b5cc0:	4605      	mov	r5, r0
   b5cc2:	460c      	mov	r4, r1
   b5cc4:	4691      	mov	r9, r2
   b5cc6:	461f      	mov	r7, r3
    if (lock) {
   b5cc8:	f1ba 0f00 	cmp.w	sl, #0
   b5ccc:	d002      	beq.n	b5cd4 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b5cce:	6840      	ldr	r0, [r0, #4]
   b5cd0:	f002 ffe0 	bl	b8c94 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b5cd4:	b307      	cbz	r7, b5d18 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b5cd6:	2f1f      	cmp	r7, #31
   b5cd8:	463e      	mov	r6, r7
   b5cda:	bf28      	it	cs
   b5cdc:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b5cde:	2c7f      	cmp	r4, #127	; 0x7f
   b5ce0:	d826      	bhi.n	b5d30 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b5ce2:	1933      	adds	r3, r6, r4
   b5ce4:	2b80      	cmp	r3, #128	; 0x80
   b5ce6:	d901      	bls.n	b5cec <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b5ce8:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b5cec:	2301      	movs	r3, #1
   b5cee:	2204      	movs	r2, #4
   b5cf0:	213f      	movs	r1, #63	; 0x3f
   b5cf2:	4628      	mov	r0, r5
   b5cf4:	f7ff ff33 	bl	b5b5e <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b5cf8:	2300      	movs	r3, #0
   b5cfa:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b5cfe:	9300      	str	r3, [sp, #0]
   b5d00:	464a      	mov	r2, r9
   b5d02:	4633      	mov	r3, r6
   b5d04:	b2c9      	uxtb	r1, r1
   b5d06:	4628      	mov	r0, r5
   b5d08:	f7ff fe42 	bl	b5990 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b5d0c:	4680      	mov	r8, r0
   b5d0e:	b128      	cbz	r0, b5d1c <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b5d10:	4434      	add	r4, r6
        dataLen -= count;
   b5d12:	1bbf      	subs	r7, r7, r6
        data += count;
   b5d14:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b5d16:	e7dd      	b.n	b5cd4 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b5d18:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b5d1c:	f1ba 0f00 	cmp.w	sl, #0
   b5d20:	d002      	beq.n	b5d28 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b5d22:	6868      	ldr	r0, [r5, #4]
   b5d24:	f002 ffbf 	bl	b8ca6 <_ZN7TwoWire6unlockEv>
}
   b5d28:	4640      	mov	r0, r8
   b5d2a:	b002      	add	sp, #8
   b5d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b5d30:	2301      	movs	r3, #1
   b5d32:	2204      	movs	r2, #4
   b5d34:	213f      	movs	r1, #63	; 0x3f
   b5d36:	4628      	mov	r0, r5
   b5d38:	f7ff ff72 	bl	b5c20 <_ZN6AB180514setRegisterBitEhhb>
   b5d3c:	e7dc      	b.n	b5cf8 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000b5d40 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b5d40:	b530      	push	{r4, r5, lr}
   b5d42:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b5d44:	680d      	ldr	r5, [r1, #0]
   b5d46:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b5d4a:	9503      	str	r5, [sp, #12]
   b5d4c:	684d      	ldr	r5, [r1, #4]
   b5d4e:	9502      	str	r5, [sp, #8]
   b5d50:	688d      	ldr	r5, [r1, #8]
   b5d52:	9501      	str	r5, [sp, #4]
   b5d54:	68c9      	ldr	r1, [r1, #12]
   b5d56:	9100      	str	r1, [sp, #0]
   b5d58:	3301      	adds	r3, #1
   b5d5a:	4904      	ldr	r1, [pc, #16]	; (b5d6c <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b5d5c:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b5d60:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b5d62:	f004 fdf7 	bl	ba954 <_ZN6String6formatEPKcz>
}
   b5d66:	4620      	mov	r0, r4
   b5d68:	b005      	add	sp, #20
   b5d6a:	bd30      	pop	{r4, r5, pc}
   b5d6c:	000bcc5d 	.word	0x000bcc5d

000b5d70 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b5d70:	0903      	lsrs	r3, r0, #4
}
   b5d72:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b5d74:	f000 000f 	and.w	r0, r0, #15
}
   b5d78:	fb02 0003 	mla	r0, r2, r3, r0
   b5d7c:	4770      	bx	lr

000b5d7e <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b5d7e:	b538      	push	{r3, r4, r5, lr}
   b5d80:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b5d82:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b5d84:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b5d86:	f7ff fff3 	bl	b5d70 <_ZN6AB180510bcdToValueEh>
   b5d8a:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b5d8c:	7860      	ldrb	r0, [r4, #1]
   b5d8e:	f7ff ffef 	bl	b5d70 <_ZN6AB180510bcdToValueEh>
   b5d92:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b5d94:	78a0      	ldrb	r0, [r4, #2]
   b5d96:	f7ff ffeb 	bl	b5d70 <_ZN6AB180510bcdToValueEh>
   b5d9a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b5d9c:	78e0      	ldrb	r0, [r4, #3]
   b5d9e:	f7ff ffe7 	bl	b5d70 <_ZN6AB180510bcdToValueEh>
   b5da2:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b5da4:	7920      	ldrb	r0, [r4, #4]
   b5da6:	f7ff ffe3 	bl	b5d70 <_ZN6AB180510bcdToValueEh>
   b5daa:	3801      	subs	r0, #1
   b5dac:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b5dae:	b92d      	cbnz	r5, b5dbc <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b5db0:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b5db2:	7828      	ldrb	r0, [r5, #0]
   b5db4:	f7ff ffdc 	bl	b5d70 <_ZN6AB180510bcdToValueEh>
   b5db8:	6188      	str	r0, [r1, #24]
}
   b5dba:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b5dbc:	7960      	ldrb	r0, [r4, #5]
   b5dbe:	f7ff ffd7 	bl	b5d70 <_ZN6AB180510bcdToValueEh>
   b5dc2:	3064      	adds	r0, #100	; 0x64
   b5dc4:	1da5      	adds	r5, r4, #6
   b5dc6:	6148      	str	r0, [r1, #20]
   b5dc8:	e7f3      	b.n	b5db2 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b5dcc <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b5dcc:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b5dce:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b5dd0:	b088      	sub	sp, #32
   b5dd2:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b5dd4:	461a      	mov	r2, r3
   b5dd6:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b5dd8:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b5dda:	f7ff fea2 	bl	b5b22 <_ZN6AB180510isBitClearEhhb>
   b5dde:	b1f0      	cbz	r0, b5e1e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b5de0:	2308      	movs	r3, #8
   b5de2:	2601      	movs	r6, #1
   b5de4:	4620      	mov	r0, r4
   b5de6:	9600      	str	r6, [sp, #0]
   b5de8:	eb0d 0203 	add.w	r2, sp, r3
   b5dec:	2100      	movs	r1, #0
   b5dee:	f7ff fd3b 	bl	b5868 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b5df2:	4604      	mov	r4, r0
   b5df4:	b198      	cbz	r0, b5e1e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b5df6:	4632      	mov	r2, r6
   b5df8:	4629      	mov	r1, r5
   b5dfa:	f10d 0009 	add.w	r0, sp, #9
   b5dfe:	f7ff ffbe 	bl	b5d7e <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b5e02:	a804      	add	r0, sp, #16
   b5e04:	f7ff ff9c 	bl	b5d40 <_ZN6AB180510tmToStringEPK2tm>
   b5e08:	4808      	ldr	r0, [pc, #32]	; (b5e2c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b5e0a:	9a04      	ldr	r2, [sp, #16]
   b5e0c:	4908      	ldr	r1, [pc, #32]	; (b5e30 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b5e0e:	f7fe f9c1 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b5e12:	a804      	add	r0, sp, #16
   b5e14:	f004 fcea 	bl	ba7ec <_ZN6StringD1Ev>
}
   b5e18:	4620      	mov	r0, r4
   b5e1a:	b008      	add	sp, #32
   b5e1c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b5e1e:	2224      	movs	r2, #36	; 0x24
   b5e20:	2100      	movs	r1, #0
   b5e22:	4628      	mov	r0, r5
   b5e24:	f006 f814 	bl	bbe50 <memset>
   b5e28:	2400      	movs	r4, #0
   b5e2a:	e7f5      	b.n	b5e18 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b5e2c:	2003e3d8 	.word	0x2003e3d8
   b5e30:	000bcc7b 	.word	0x000bcc7b

000b5e34 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b5e34:	b530      	push	{r4, r5, lr}
   b5e36:	b08b      	sub	sp, #44	; 0x2c
   b5e38:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b5e3a:	a901      	add	r1, sp, #4
   b5e3c:	f7ff ffc6 	bl	b5dcc <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b5e40:	4604      	mov	r4, r0
   b5e42:	b120      	cbz	r0, b5e4e <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b5e44:	a801      	add	r0, sp, #4
   b5e46:	f002 f96b 	bl	b8120 <mktime>
   b5e4a:	e9c5 0100 	strd	r0, r1, [r5]
}
   b5e4e:	4620      	mov	r0, r4
   b5e50:	b00b      	add	sp, #44	; 0x2c
   b5e52:	bd30      	pop	{r4, r5, pc}

000b5e54 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b5e54:	230a      	movs	r3, #10
   b5e56:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b5e5a:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b5e5e:	fb91 f2f3 	sdiv	r2, r1, r3
   b5e62:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b5e66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b5e6a:	b2c0      	uxtb	r0, r0
   b5e6c:	4770      	bx	lr

000b5e6e <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b5e6e:	b570      	push	{r4, r5, r6, lr}
   b5e70:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b5e72:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b5e74:	460c      	mov	r4, r1
   b5e76:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b5e78:	f7ff ffec 	bl	b5e54 <_ZN6AB180510valueToBcdEi>
   b5e7c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b5e7e:	6868      	ldr	r0, [r5, #4]
   b5e80:	f7ff ffe8 	bl	b5e54 <_ZN6AB180510valueToBcdEi>
   b5e84:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b5e86:	68a8      	ldr	r0, [r5, #8]
   b5e88:	f7ff ffe4 	bl	b5e54 <_ZN6AB180510valueToBcdEi>
   b5e8c:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b5e8e:	68e8      	ldr	r0, [r5, #12]
   b5e90:	f7ff ffe0 	bl	b5e54 <_ZN6AB180510valueToBcdEi>
   b5e94:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b5e96:	6928      	ldr	r0, [r5, #16]
   b5e98:	3001      	adds	r0, #1
   b5e9a:	f7ff ffdb 	bl	b5e54 <_ZN6AB180510valueToBcdEi>
   b5e9e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b5ea0:	b92e      	cbnz	r6, b5eae <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b5ea2:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b5ea4:	69a8      	ldr	r0, [r5, #24]
   b5ea6:	f7ff ffd5 	bl	b5e54 <_ZN6AB180510valueToBcdEi>
   b5eaa:	7030      	strb	r0, [r6, #0]
}
   b5eac:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b5eae:	696a      	ldr	r2, [r5, #20]
   b5eb0:	2364      	movs	r3, #100	; 0x64
   b5eb2:	fb92 f0f3 	sdiv	r0, r2, r3
   b5eb6:	fb03 2010 	mls	r0, r3, r0, r2
   b5eba:	f7ff ffcb 	bl	b5e54 <_ZN6AB180510valueToBcdEi>
   b5ebe:	1da6      	adds	r6, r4, #6
   b5ec0:	7160      	strb	r0, [r4, #5]
   b5ec2:	e7ef      	b.n	b5ea4 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b5ec4 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b5ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5ec6:	b087      	sub	sp, #28
   b5ec8:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b5eca:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b5ecc:	4616      	mov	r6, r2
   b5ece:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b5ed0:	f7ff ff36 	bl	b5d40 <_ZN6AB180510tmToStringEPK2tm>
   b5ed4:	481e      	ldr	r0, [pc, #120]	; (b5f50 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b5ed6:	9a02      	ldr	r2, [sp, #8]
   b5ed8:	491e      	ldr	r1, [pc, #120]	; (b5f54 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b5eda:	f7fe f95b 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b5ede:	a802      	add	r0, sp, #8
   b5ee0:	f004 fc84 	bl	ba7ec <_ZN6StringD1Ev>
    if (lock) {
   b5ee4:	b116      	cbz	r6, b5eec <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b5ee6:	6868      	ldr	r0, [r5, #4]
   b5ee8:	f002 fed4 	bl	b8c94 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b5eec:	4620      	mov	r0, r4
   b5eee:	2201      	movs	r2, #1
   b5ef0:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b5ef4:	2700      	movs	r7, #0
   b5ef6:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b5efa:	f7ff ffb8 	bl	b5e6e <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b5efe:	2301      	movs	r3, #1
   b5f00:	461a      	mov	r2, r3
   b5f02:	2110      	movs	r1, #16
   b5f04:	4628      	mov	r0, r5
   b5f06:	f7ff fe8b 	bl	b5c20 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b5f0a:	4604      	mov	r4, r0
   b5f0c:	b1e8      	cbz	r0, b5f4a <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b5f0e:	2308      	movs	r3, #8
   b5f10:	9700      	str	r7, [sp, #0]
   b5f12:	eb0d 0203 	add.w	r2, sp, r3
   b5f16:	4639      	mov	r1, r7
   b5f18:	4628      	mov	r0, r5
   b5f1a:	f7ff fd39 	bl	b5990 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b5f1e:	4604      	mov	r4, r0
   b5f20:	b160      	cbz	r0, b5f3c <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b5f22:	2301      	movs	r3, #1
   b5f24:	461a      	mov	r2, r3
   b5f26:	2110      	movs	r1, #16
   b5f28:	4628      	mov	r0, r5
   b5f2a:	f7ff fe18 	bl	b5b5e <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b5f2e:	b116      	cbz	r6, b5f36 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b5f30:	6868      	ldr	r0, [r5, #4]
   b5f32:	f002 feb8 	bl	b8ca6 <_ZN7TwoWire6unlockEv>
}
   b5f36:	4620      	mov	r0, r4
   b5f38:	b007      	add	sp, #28
   b5f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b5f3c:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b5f40:	4905      	ldr	r1, [pc, #20]	; (b5f58 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b5f42:	4803      	ldr	r0, [pc, #12]	; (b5f50 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b5f44:	f7ff fc5f 	bl	b5806 <_ZNK5spark6Logger5errorEPKcz>
   b5f48:	e7f1      	b.n	b5f2e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b5f4a:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b5f4e:	e7f7      	b.n	b5f40 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b5f50:	2003e3d8 	.word	0x2003e3d8
   b5f54:	000bcc89 	.word	0x000bcc89
   b5f58:	000bcc97 	.word	0x000bcc97

000b5f5c <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b5f5c:	b513      	push	{r0, r1, r4, lr}
   b5f5e:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b5f60:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b5f62:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b5f66:	f005 ff25 	bl	bbdb4 <gmtime>
    return setRtcFromTm(tm, lock);
   b5f6a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b5f6e:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b5f70:	4620      	mov	r0, r4
   b5f72:	f7ff ffa7 	bl	b5ec4 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b5f76:	b002      	add	sp, #8
   b5f78:	bd10      	pop	{r4, pc}
	...

000b5f7c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b5f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b5f7e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b5f80:	b089      	sub	sp, #36	; 0x24
   b5f82:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b5f84:	bb75      	cbnz	r5, b5fe4 <_ZN6AB18054loopEv+0x68>
   b5f86:	f004 ff09 	bl	bad9c <_ZN9TimeClass7isValidEv>
   b5f8a:	b358      	cbz	r0, b5fe4 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b5f8c:	2600      	movs	r6, #0
   b5f8e:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b5f90:	a904      	add	r1, sp, #16
   b5f92:	4628      	mov	r0, r5
        tm = 0;
   b5f94:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b5f98:	f001 ffe2 	bl	b7f60 <spark_sync_time_last>
   b5f9c:	b310      	cbz	r0, b5fe4 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b5f9e:	2501      	movs	r5, #1
   b5fa0:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b5fa2:	f004 ff18 	bl	badd6 <_ZN9TimeClass3nowEv>
   b5fa6:	17c3      	asrs	r3, r0, #31
   b5fa8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b5fac:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b5fae:	9500      	str	r5, [sp, #0]
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	f7ff ffd3 	bl	b5f5c <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b5fb6:	a902      	add	r1, sp, #8
   b5fb8:	4620      	mov	r0, r4
        time = 0;
   b5fba:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b5fbe:	f7ff ff39 	bl	b5e34 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b5fc2:	4b13      	ldr	r3, [pc, #76]	; (b6010 <_ZN6AB18054loopEv+0x94>)
   b5fc4:	4913      	ldr	r1, [pc, #76]	; (b6014 <_ZN6AB18054loopEv+0x98>)
   b5fc6:	681b      	ldr	r3, [r3, #0]
   b5fc8:	9300      	str	r3, [sp, #0]
   b5fca:	a804      	add	r0, sp, #16
   b5fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b5fd0:	f004 fea2 	bl	bad18 <_ZN9TimeClass6formatExPKc>
   b5fd4:	4810      	ldr	r0, [pc, #64]	; (b6018 <_ZN6AB18054loopEv+0x9c>)
   b5fd6:	9a04      	ldr	r2, [sp, #16]
   b5fd8:	4910      	ldr	r1, [pc, #64]	; (b601c <_ZN6AB18054loopEv+0xa0>)
   b5fda:	f7fe f8db 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b5fde:	a804      	add	r0, sp, #16
   b5fe0:	f004 fc04 	bl	ba7ec <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b5fe4:	6963      	ldr	r3, [r4, #20]
   b5fe6:	b18b      	cbz	r3, b600c <_ZN6AB18054loopEv+0x90>
   b5fe8:	f001 fd2e 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b5fec:	6923      	ldr	r3, [r4, #16]
   b5fee:	1ac0      	subs	r0, r0, r3
   b5ff0:	6963      	ldr	r3, [r4, #20]
   b5ff2:	4298      	cmp	r0, r3
   b5ff4:	d30a      	bcc.n	b600c <_ZN6AB18054loopEv+0x90>
   b5ff6:	f001 fd27 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b5ffa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b5ffe:	6120      	str	r0, [r4, #16]
            setWDT();
   b6000:	4620      	mov	r0, r4
}
   b6002:	b009      	add	sp, #36	; 0x24
   b6004:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6008:	f7ff bd0a 	b.w	b5a20 <_ZN6AB18056setWDTEi>
}
   b600c:	b009      	add	sp, #36	; 0x24
   b600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6010:	2003de84 	.word	0x2003de84
   b6014:	2003e6a8 	.word	0x2003e6a8
   b6018:	2003e3d8 	.word	0x2003e3d8
   b601c:	000bccb2 	.word	0x000bccb2

000b6020 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b6020:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6022:	2300      	movs	r3, #0
   b6024:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6026:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6028:	4604      	mov	r4, r0
   b602a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b602c:	b12b      	cbz	r3, b603a <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b602e:	2202      	movs	r2, #2
   b6030:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6032:	68eb      	ldr	r3, [r5, #12]
   b6034:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6036:	68ab      	ldr	r3, [r5, #8]
   b6038:	60a3      	str	r3, [r4, #8]
    }
   b603a:	4620      	mov	r0, r4
   b603c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6040 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b6040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6044:	b095      	sub	sp, #84	; 0x54
   b6046:	4605      	mov	r5, r0
        };
   b6048:	991c      	ldr	r1, [sp, #112]	; 0x70
   b604a:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b604c:	4690      	mov	r8, r2
   b604e:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b6050:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b6052:	f7ff ffe5 	bl	b6020 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b6056:	a904      	add	r1, sp, #16
   b6058:	a808      	add	r0, sp, #32
   b605a:	f7ff ffe1 	bl	b6020 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b605e:	a908      	add	r1, sp, #32
   b6060:	4630      	mov	r0, r6
   b6062:	f7ff ffdd 	bl	b6020 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b6066:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b606a:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b606c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6070:	f7fe f811 	bl	b4096 <_Znwj>
   b6074:	4604      	mov	r4, r0
   b6076:	b1a0      	cbz	r0, b60a2 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6078:	e896 0003 	ldmia.w	r6, {r0, r1}
   b607c:	ab01      	add	r3, sp, #4
   b607e:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6082:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6086:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b608a:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b608e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b6090:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6092:	60a3      	str	r3, [r4, #8]
   b6094:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b609a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b609e:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b60a0:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b60a2:	4b24      	ldr	r3, [pc, #144]	; (b6134 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b60a4:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b60a6:	4b24      	ldr	r3, [pc, #144]	; (b6138 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b60a8:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b60aa:	2200      	movs	r2, #0
   b60ac:	2300      	movs	r3, #0
   b60ae:	f04f 0900 	mov.w	r9, #0
   b60b2:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b60b6:	4b21      	ldr	r3, [pc, #132]	; (b613c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b60b8:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b60bc:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b60be:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b60c0:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b60c4:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b60c8:	f7fd ffe5 	bl	b4096 <_Znwj>
   b60cc:	4604      	mov	r4, r0
   b60ce:	b1d8      	cbz	r0, b6108 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b60d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b60d2:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b60d6:	b133      	cbz	r3, b60e6 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b60d8:	2202      	movs	r2, #2
   b60da:	a910      	add	r1, sp, #64	; 0x40
   b60dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b60de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b60e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b60e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b60e4:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b60e6:	4b16      	ldr	r3, [pc, #88]	; (b6140 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b60e8:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b60ea:	4a16      	ldr	r2, [pc, #88]	; (b6144 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b60ec:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b60ee:	ab01      	add	r3, sp, #4
   b60f0:	4640      	mov	r0, r8
   b60f2:	4639      	mov	r1, r7
   b60f4:	f001 feb2 	bl	b7e5c <system_subscribe_event>
        if (r) {
   b60f8:	b1b0      	cbz	r0, b6128 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b60fa:	4620      	mov	r0, r4
   b60fc:	f7ff fb5c 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b6100:	2110      	movs	r1, #16
   b6102:	4620      	mov	r0, r4
   b6104:	f7fd ffcb 	bl	b409e <_ZdlPvj>
   b6108:	a810      	add	r0, sp, #64	; 0x40
   b610a:	f7ff fb55 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
   b610e:	4630      	mov	r0, r6
   b6110:	f7ff fb52 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
   b6114:	a808      	add	r0, sp, #32
   b6116:	f7ff fb4f 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
   b611a:	a804      	add	r0, sp, #16
   b611c:	f7ff fb4c 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
    }
   b6120:	4628      	mov	r0, r5
   b6122:	b015      	add	sp, #84	; 0x54
   b6124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b6128:	9b02      	ldr	r3, [sp, #8]
   b612a:	60ab      	str	r3, [r5, #8]
   b612c:	e9c5 8700 	strd	r8, r7, [r5]
   b6130:	e7ea      	b.n	b6108 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b6132:	bf00      	nop
   b6134:	000b5775 	.word	0x000b5775
   b6138:	000b61fd 	.word	0x000b61fd
   b613c:	000c0002 	.word	0x000c0002
   b6140:	000b57cb 	.word	0x000b57cb
   b6144:	000b574d 	.word	0x000b574d

000b6148 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6148:	b530      	push	{r4, r5, lr}
   b614a:	4604      	mov	r4, r0
   b614c:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b614e:	b111      	cbz	r1, b6156 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6150:	6840      	ldr	r0, [r0, #4]
   b6152:	f002 fd4d 	bl	b8bf0 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b6156:	4620      	mov	r0, r4
   b6158:	f7ff fbdc 	bl	b5914 <_ZN6AB180510detectChipEv>
   b615c:	ad06      	add	r5, sp, #24
   b615e:	2800      	cmp	r0, #0
   b6160:	d037      	beq.n	b61d2 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b6162:	4620      	mov	r0, r4
   b6164:	f7ff fd06 	bl	b5b74 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6168:	2301      	movs	r3, #1
   b616a:	461a      	mov	r2, r3
   b616c:	2110      	movs	r1, #16
   b616e:	4620      	mov	r0, r4
   b6170:	f7ff fcd7 	bl	b5b22 <_ZN6AB180510isBitClearEhhb>
   b6174:	b1d8      	cbz	r0, b61ae <_ZN6AB18055setupEb+0x66>
   b6176:	f004 fe11 	bl	bad9c <_ZN9TimeClass7isValidEv>
   b617a:	b9c0      	cbnz	r0, b61ae <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b617c:	a902      	add	r1, sp, #8
   b617e:	4620      	mov	r0, r4
   b6180:	f7ff fe58 	bl	b5e34 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6188:	f004 fd0c 	bl	baba4 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b618c:	4b13      	ldr	r3, [pc, #76]	; (b61dc <_ZN6AB18055setupEb+0x94>)
   b618e:	4914      	ldr	r1, [pc, #80]	; (b61e0 <_ZN6AB18055setupEb+0x98>)
   b6190:	681b      	ldr	r3, [r3, #0]
   b6192:	9300      	str	r3, [sp, #0]
   b6194:	4628      	mov	r0, r5
   b6196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b619a:	f004 fdbd 	bl	bad18 <_ZN9TimeClass6formatExPKc>
   b619e:	4811      	ldr	r0, [pc, #68]	; (b61e4 <_ZN6AB18055setupEb+0x9c>)
   b61a0:	9a06      	ldr	r2, [sp, #24]
   b61a2:	4911      	ldr	r1, [pc, #68]	; (b61e8 <_ZN6AB18055setupEb+0xa0>)
   b61a4:	f7fd fff6 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
   b61a8:	4628      	mov	r0, r5
   b61aa:	f004 fb1f 	bl	ba7ec <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b61ae:	4b0f      	ldr	r3, [pc, #60]	; (b61ec <_ZN6AB18055setupEb+0xa4>)
   b61b0:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b61b2:	4b0f      	ldr	r3, [pc, #60]	; (b61f0 <_ZN6AB18055setupEb+0xa8>)
   b61b4:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b61b6:	4b0f      	ldr	r3, [pc, #60]	; (b61f4 <_ZN6AB18055setupEb+0xac>)
   b61b8:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b61ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b61be:	2300      	movs	r3, #0
   b61c0:	a802      	add	r0, sp, #8
   b61c2:	9500      	str	r5, [sp, #0]
   b61c4:	f7ff ff3c 	bl	b6040 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b61c8:	4628      	mov	r0, r5
   b61ca:	f7ff faf5 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
}
   b61ce:	b00b      	add	sp, #44	; 0x2c
   b61d0:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b61d2:	4909      	ldr	r1, [pc, #36]	; (b61f8 <_ZN6AB18055setupEb+0xb0>)
   b61d4:	4803      	ldr	r0, [pc, #12]	; (b61e4 <_ZN6AB18055setupEb+0x9c>)
   b61d6:	f7ff fb16 	bl	b5806 <_ZNK5spark6Logger5errorEPKcz>
   b61da:	e7e8      	b.n	b61ae <_ZN6AB18055setupEb+0x66>
   b61dc:	2003de84 	.word	0x2003de84
   b61e0:	2003e6a8 	.word	0x2003e6a8
   b61e4:	2003e3d8 	.word	0x2003e3d8
   b61e8:	000bccc8 	.word	0x000bccc8
   b61ec:	000b5aa5 	.word	0x000b5aa5
   b61f0:	000b57af 	.word	0x000b57af
   b61f4:	000b579b 	.word	0x000b579b
   b61f8:	000bcce5 	.word	0x000bcce5

000b61fc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b61fc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b61fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6200:	4604      	mov	r4, r0
	switch (__op)
   b6202:	d104      	bne.n	b620e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b6204:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6206:	6003      	str	r3, [r0, #0]
      }
   b6208:	2000      	movs	r0, #0
   b620a:	b003      	add	sp, #12
   b620c:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b620e:	2a02      	cmp	r2, #2
   b6210:	d00c      	beq.n	b622c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b6212:	2a03      	cmp	r2, #3
   b6214:	d1f8      	bne.n	b6208 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6216:	6804      	ldr	r4, [r0, #0]
   b6218:	2c00      	cmp	r4, #0
   b621a:	d0f5      	beq.n	b6208 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b621c:	4620      	mov	r0, r4
   b621e:	f7ff facb 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6222:	2110      	movs	r1, #16
   b6224:	4620      	mov	r0, r4
   b6226:	f7fd ff3a 	bl	b409e <_ZdlPvj>
   b622a:	e7ed      	b.n	b6208 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b622c:	6809      	ldr	r1, [r1, #0]
   b622e:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6230:	2010      	movs	r0, #16
   b6232:	f7fd ff30 	bl	b4096 <_Znwj>
   b6236:	4605      	mov	r5, r0
   b6238:	b110      	cbz	r0, b6240 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b623a:	9901      	ldr	r1, [sp, #4]
   b623c:	f7ff fef0 	bl	b6020 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b6240:	6025      	str	r5, [r4, #0]
	}
   b6242:	e7e1      	b.n	b6208 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b6244 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6244:	4b01      	ldr	r3, [pc, #4]	; (b624c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6246:	4a02      	ldr	r2, [pc, #8]	; (b6250 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6248:	601a      	str	r2, [r3, #0]
}
   b624a:	4770      	bx	lr
   b624c:	2003e3d8 	.word	0x2003e3d8
   b6250:	000bccfd 	.word	0x000bccfd

000b6254 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b6254:	4770      	bx	lr

000b6256 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b6256:	b510      	push	{r4, lr}
}
   b6258:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b625a:	4604      	mov	r4, r0
}
   b625c:	f7fd ff1f 	bl	b409e <_ZdlPvj>
   b6260:	4620      	mov	r0, r4
   b6262:	bd10      	pop	{r4, pc}

000b6264 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b6264:	6803      	ldr	r3, [r0, #0]
   b6266:	b2c9      	uxtb	r1, r1
   b6268:	689b      	ldr	r3, [r3, #8]
   b626a:	4718      	bx	r3

000b626c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b626c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b626e:	4d03      	ldr	r5, [pc, #12]	; (b627c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6270:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b6274:	e9c0 5100 	strd	r5, r1, [r0]
}
   b6278:	bd30      	pop	{r4, r5, pc}
   b627a:	bf00      	nop
   b627c:	000bcd54 	.word	0x000bcd54

000b6280 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b6280:	6840      	ldr	r0, [r0, #4]
   b6282:	f002 bcb5 	b.w	b8bf0 <_ZN7TwoWire5beginEv>

000b6286 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6286:	b510      	push	{r4, lr}
   b6288:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b628a:	6800      	ldr	r0, [r0, #0]
   b628c:	f002 fd0b 	bl	b8ca6 <_ZN7TwoWire6unlockEv>
   b6290:	4620      	mov	r0, r4
   b6292:	bd10      	pop	{r4, pc}

000b6294 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   b6294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6298:	b08a      	sub	sp, #40	; 0x28
   b629a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   b629c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b629e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   b62a0:	f002 fcf8 	bl	b8c94 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   b62a4:	221e      	movs	r2, #30
   b62a6:	2100      	movs	r1, #0
   b62a8:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   b62aa:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   b62ac:	f005 fdd0 	bl	bbe50 <memset>
		size_t framAddr = 0;
   b62b0:	2600      	movs	r6, #0

		while(totalLen > 0) {
   b62b2:	b1ef      	cbz	r7, b62f0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   b62b4:	6823      	ldr	r3, [r4, #0]
   b62b6:	2f1e      	cmp	r7, #30
   b62b8:	46b8      	mov	r8, r7
   b62ba:	bf28      	it	cs
   b62bc:	f04f 081e 	movcs.w	r8, #30
   b62c0:	68dd      	ldr	r5, [r3, #12]
   b62c2:	aa02      	add	r2, sp, #8
   b62c4:	4643      	mov	r3, r8
   b62c6:	4631      	mov	r1, r6
   b62c8:	4620      	mov	r0, r4
   b62ca:	47a8      	blx	r5
			if (!result) {
   b62cc:	4605      	mov	r5, r0
   b62ce:	b958      	cbnz	r0, b62e8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   b62d0:	480a      	ldr	r0, [pc, #40]	; (b62fc <_ZN6MB85RC5eraseEv+0x68>)
   b62d2:	490b      	ldr	r1, [pc, #44]	; (b6300 <_ZN6MB85RC5eraseEv+0x6c>)
   b62d4:	4632      	mov	r2, r6
   b62d6:	f7fd ff5d 	bl	b4194 <_ZNK5spark6Logger4infoEPKcz>
				return false;
   b62da:	a801      	add	r0, sp, #4
   b62dc:	f7ff ffd3 	bl	b6286 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   b62e0:	4628      	mov	r0, r5
   b62e2:	b00a      	add	sp, #40	; 0x28
   b62e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   b62e8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   b62ec:	4446      	add	r6, r8
		while(totalLen > 0) {
   b62ee:	e7e0      	b.n	b62b2 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   b62f0:	a801      	add	r0, sp, #4
   b62f2:	f7ff ffc8 	bl	b6286 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   b62f6:	2501      	movs	r5, #1
   b62f8:	e7f2      	b.n	b62e0 <_ZN6MB85RC5eraseEv+0x4c>
   b62fa:	bf00      	nop
   b62fc:	2003e654 	.word	0x2003e654
   b6300:	000bcd20 	.word	0x000bcd20

000b6304 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6308:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b630a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b630c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b630e:	460d      	mov	r5, r1
   b6310:	4616      	mov	r6, r2
   b6312:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b6314:	f002 fcbe 	bl	b8c94 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6318:	b1a7      	cbz	r7, b6344 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b631a:	68e1      	ldr	r1, [r4, #12]
   b631c:	6860      	ldr	r0, [r4, #4]
   b631e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6322:	f002 fc98 	bl	b8c56 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6326:	0a29      	lsrs	r1, r5, #8
   b6328:	6860      	ldr	r0, [r4, #4]
   b632a:	f7ff ff9b 	bl	b6264 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b632e:	4629      	mov	r1, r5
   b6330:	6860      	ldr	r0, [r4, #4]
   b6332:	f7ff ff97 	bl	b6264 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b6336:	6860      	ldr	r0, [r4, #4]
   b6338:	2100      	movs	r1, #0
   b633a:	f002 fca7 	bl	b8c8c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b633e:	b148      	cbz	r0, b6354 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6340:	2400      	movs	r4, #0
   b6342:	e000      	b.n	b6346 <_ZN6MB85RC8readDataEjPhj+0x42>
   b6344:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6346:	a801      	add	r0, sp, #4
   b6348:	f7ff ff9d 	bl	b6286 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b634c:	4620      	mov	r0, r4
   b634e:	b003      	add	sp, #12
   b6350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b6354:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b6356:	7b21      	ldrb	r1, [r4, #12]
   b6358:	6860      	ldr	r0, [r4, #4]
   b635a:	46b8      	mov	r8, r7
   b635c:	bf28      	it	cs
   b635e:	f04f 0820 	movcs.w	r8, #32
   b6362:	2301      	movs	r3, #1
   b6364:	4642      	mov	r2, r8
   b6366:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b636a:	f002 fc5e 	bl	b8c2a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b636e:	f004 ffb1 	bl	bb2d4 <_Z19__fetch_global_Wirev>
   b6372:	6803      	ldr	r3, [r0, #0]
   b6374:	691b      	ldr	r3, [r3, #16]
   b6376:	4798      	blx	r3
   b6378:	4540      	cmp	r0, r8
   b637a:	dbe1      	blt.n	b6340 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b637c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6380:	f004 ffa8 	bl	bb2d4 <_Z19__fetch_global_Wirev>
   b6384:	6803      	ldr	r3, [r0, #0]
   b6386:	695b      	ldr	r3, [r3, #20]
   b6388:	4798      	blx	r3
   b638a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b638e:	454e      	cmp	r6, r9
   b6390:	d1f6      	bne.n	b6380 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6392:	4445      	add	r5, r8
				dataLen--;
   b6394:	eba7 0708 	sub.w	r7, r7, r8
   b6398:	e7be      	b.n	b6318 <_ZN6MB85RC8readDataEjPhj+0x14>

000b639a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b639a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b639e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b63a0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b63a2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b63a4:	460e      	mov	r6, r1
   b63a6:	4690      	mov	r8, r2
   b63a8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b63aa:	f002 fc73 	bl	b8c94 <_ZN7TwoWire4lockEv>
   b63ae:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b63b2:	f1b9 0f00 	cmp.w	r9, #0
   b63b6:	d02a      	beq.n	b640e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b63b8:	b34d      	cbz	r5, b640e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b63ba:	68e1      	ldr	r1, [r4, #12]
   b63bc:	6860      	ldr	r0, [r4, #4]
   b63be:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b63c2:	f002 fc48 	bl	b8c56 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b63c6:	0a31      	lsrs	r1, r6, #8
   b63c8:	6860      	ldr	r0, [r4, #4]
   b63ca:	f7ff ff4b 	bl	b6264 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b63ce:	6860      	ldr	r0, [r4, #4]
   b63d0:	4631      	mov	r1, r6
   b63d2:	f7ff ff47 	bl	b6264 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b63d6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b63da:	4647      	mov	r7, r8
   b63dc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b63e0:	6860      	ldr	r0, [r4, #4]
   b63e2:	f817 1b01 	ldrb.w	r1, [r7], #1
   b63e6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b63e8:	3d01      	subs	r5, #1
				wire.write(*data);
   b63ea:	689b      	ldr	r3, [r3, #8]
   b63ec:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b63ee:	4555      	cmp	r5, sl
   b63f0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b63f4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b63f6:	d001      	beq.n	b63fc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b63f8:	2d00      	cmp	r5, #0
   b63fa:	d1f1      	bne.n	b63e0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b63fc:	6860      	ldr	r0, [r4, #4]
   b63fe:	2101      	movs	r1, #1
   b6400:	f002 fc44 	bl	b8c8c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6404:	2800      	cmp	r0, #0
   b6406:	d0d7      	beq.n	b63b8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6408:	f04f 0900 	mov.w	r9, #0
   b640c:	e7d1      	b.n	b63b2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b640e:	a801      	add	r0, sp, #4
   b6410:	f7ff ff39 	bl	b6286 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6414:	4648      	mov	r0, r9
   b6416:	b003      	add	sp, #12
   b6418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b641c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b641c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6420:	b08b      	sub	sp, #44	; 0x2c
   b6422:	460e      	mov	r6, r1
   b6424:	4615      	mov	r5, r2
   b6426:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6428:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b642a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b642c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b642e:	f002 fc31 	bl	b8c94 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b6432:	42ae      	cmp	r6, r5
   b6434:	d229      	bcs.n	b648a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b6436:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b6438:	4425      	add	r5, r4
			while(numBytes > 0) {
   b643a:	b18c      	cbz	r4, b6460 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b643c:	2c1e      	cmp	r4, #30
   b643e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6440:	f8d8 3000 	ldr.w	r3, [r8]
   b6444:	bf28      	it	cs
   b6446:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6448:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b644a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b644e:	aa02      	add	r2, sp, #8
   b6450:	463b      	mov	r3, r7
   b6452:	4631      	mov	r1, r6
   b6454:	4640      	mov	r0, r8
				framAddrTo -= count;
   b6456:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6458:	47c8      	blx	r9
				if (!result) {
   b645a:	b948      	cbnz	r0, b6470 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b645c:	2400      	movs	r4, #0
   b645e:	e000      	b.n	b6462 <_ZN6MB85RC8moveDataEjjj+0x46>
   b6460:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6462:	a801      	add	r0, sp, #4
   b6464:	f7ff ff0f 	bl	b6286 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6468:	4620      	mov	r0, r4
   b646a:	b00b      	add	sp, #44	; 0x2c
   b646c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6470:	f8d8 3000 	ldr.w	r3, [r8]
   b6474:	aa02      	add	r2, sp, #8
   b6476:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b647a:	4629      	mov	r1, r5
   b647c:	463b      	mov	r3, r7
   b647e:	4640      	mov	r0, r8
   b6480:	47c8      	blx	r9
				if (!result) {
   b6482:	2800      	cmp	r0, #0
   b6484:	d0ea      	beq.n	b645c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6486:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6488:	e7d7      	b.n	b643a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b648a:	d9e9      	bls.n	b6460 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b648c:	2c00      	cmp	r4, #0
   b648e:	d0e7      	beq.n	b6460 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6490:	f8d8 3000 	ldr.w	r3, [r8]
   b6494:	2c1e      	cmp	r4, #30
   b6496:	4627      	mov	r7, r4
   b6498:	bf28      	it	cs
   b649a:	271e      	movcs	r7, #30
   b649c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b64a0:	aa02      	add	r2, sp, #8
   b64a2:	463b      	mov	r3, r7
   b64a4:	4631      	mov	r1, r6
   b64a6:	4640      	mov	r0, r8
   b64a8:	47c8      	blx	r9
				if (!result) {
   b64aa:	2800      	cmp	r0, #0
   b64ac:	d0d6      	beq.n	b645c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b64ae:	f8d8 3000 	ldr.w	r3, [r8]
   b64b2:	aa02      	add	r2, sp, #8
   b64b4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b64b8:	4629      	mov	r1, r5
   b64ba:	463b      	mov	r3, r7
   b64bc:	4640      	mov	r0, r8
   b64be:	47c8      	blx	r9
				if (!result) {
   b64c0:	2800      	cmp	r0, #0
   b64c2:	d0cb      	beq.n	b645c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b64c4:	443e      	add	r6, r7
				framAddrTo += count;
   b64c6:	443d      	add	r5, r7
				numBytes -= count;
   b64c8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b64ca:	e7df      	b.n	b648c <_ZN6MB85RC8moveDataEjjj+0x70>

000b64cc <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b64cc:	6001      	str	r1, [r0, #0]
   b64ce:	7102      	strb	r2, [r0, #4]
{
}
   b64d0:	4770      	bx	lr

000b64d2 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b64d2:	6800      	ldr	r0, [r0, #0]
   b64d4:	6803      	ldr	r3, [r0, #0]
   b64d6:	68db      	ldr	r3, [r3, #12]
   b64d8:	4718      	bx	r3

000b64da <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b64da:	6800      	ldr	r0, [r0, #0]
   b64dc:	6803      	ldr	r3, [r0, #0]
   b64de:	6a1b      	ldr	r3, [r3, #32]
   b64e0:	4718      	bx	r3

000b64e2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b64e2:	6800      	ldr	r0, [r0, #0]
   b64e4:	6803      	ldr	r3, [r0, #0]
   b64e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64e8:	4718      	bx	r3

000b64ea <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b64ea:	7900      	ldrb	r0, [r0, #4]
   b64ec:	4770      	bx	lr

000b64ee <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b64ee:	6800      	ldr	r0, [r0, #0]
   b64f0:	6803      	ldr	r3, [r0, #0]
   b64f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b64f4:	4718      	bx	r3

000b64f6 <_ZN10RHDatagram6sendtoEPhhh>:
{
   b64f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64f8:	4605      	mov	r5, r0
   b64fa:	460c      	mov	r4, r1
    setHeaderTo(address);
   b64fc:	4619      	mov	r1, r3
{
   b64fe:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b6500:	f7ff fff5 	bl	b64ee <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b6504:	6828      	ldr	r0, [r5, #0]
   b6506:	9a01      	ldr	r2, [sp, #4]
   b6508:	6803      	ldr	r3, [r0, #0]
   b650a:	695b      	ldr	r3, [r3, #20]
   b650c:	4621      	mov	r1, r4
}
   b650e:	b003      	add	sp, #12
   b6510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b6514:	4718      	bx	r3

000b6516 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b6516:	6800      	ldr	r0, [r0, #0]
   b6518:	6803      	ldr	r3, [r0, #0]
   b651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b651c:	4718      	bx	r3

000b651e <_ZN10RHDatagram14setThisAddressEh>:
{
   b651e:	b538      	push	{r3, r4, r5, lr}
   b6520:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b6522:	6800      	ldr	r0, [r0, #0]
   b6524:	6803      	ldr	r3, [r0, #0]
{
   b6526:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b6528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b652a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b652c:	4629      	mov	r1, r5
   b652e:	4620      	mov	r0, r4
   b6530:	f7ff fff1 	bl	b6516 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b6534:	7125      	strb	r5, [r4, #4]
}
   b6536:	bd38      	pop	{r3, r4, r5, pc}

000b6538 <_ZN10RHDatagram4initEv>:
{
   b6538:	b538      	push	{r3, r4, r5, lr}
   b653a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b653c:	6800      	ldr	r0, [r0, #0]
   b653e:	6803      	ldr	r3, [r0, #0]
   b6540:	689b      	ldr	r3, [r3, #8]
   b6542:	4798      	blx	r3
    if (ret)
   b6544:	4605      	mov	r5, r0
   b6546:	b118      	cbz	r0, b6550 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b6548:	7921      	ldrb	r1, [r4, #4]
   b654a:	4620      	mov	r0, r4
   b654c:	f7ff ffe7 	bl	b651e <_ZN10RHDatagram14setThisAddressEh>
}
   b6550:	4628      	mov	r0, r5
   b6552:	bd38      	pop	{r3, r4, r5, pc}

000b6554 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b6554:	6800      	ldr	r0, [r0, #0]
   b6556:	6803      	ldr	r3, [r0, #0]
   b6558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b655a:	4718      	bx	r3

000b655c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b655c:	6800      	ldr	r0, [r0, #0]
   b655e:	6803      	ldr	r3, [r0, #0]
   b6560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6562:	4718      	bx	r3

000b6564 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b6564:	6800      	ldr	r0, [r0, #0]
   b6566:	6803      	ldr	r3, [r0, #0]
   b6568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b656a:	4718      	bx	r3

000b656c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b656c:	6800      	ldr	r0, [r0, #0]
   b656e:	6803      	ldr	r3, [r0, #0]
   b6570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6572:	4718      	bx	r3

000b6574 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b6574:	6800      	ldr	r0, [r0, #0]
   b6576:	6803      	ldr	r3, [r0, #0]
   b6578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b657a:	4718      	bx	r3

000b657c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b657c:	6800      	ldr	r0, [r0, #0]
   b657e:	6803      	ldr	r3, [r0, #0]
   b6580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6582:	4718      	bx	r3

000b6584 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b6584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6588:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b658a:	6800      	ldr	r0, [r0, #0]
{
   b658c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b658e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b6590:	6803      	ldr	r3, [r0, #0]
   b6592:	691b      	ldr	r3, [r3, #16]
{
   b6594:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b6598:	4798      	blx	r3
   b659a:	4605      	mov	r5, r0
   b659c:	b1c8      	cbz	r0, b65d2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b659e:	b11e      	cbz	r6, b65a8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b65a0:	4620      	mov	r0, r4
   b65a2:	f7ff ffe3 	bl	b656c <_ZN10RHDatagram10headerFromEv>
   b65a6:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b65a8:	f1b9 0f00 	cmp.w	r9, #0
   b65ac:	d004      	beq.n	b65b8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b65ae:	4620      	mov	r0, r4
   b65b0:	f7ff ffd8 	bl	b6564 <_ZN10RHDatagram8headerToEv>
   b65b4:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b65b8:	f1b8 0f00 	cmp.w	r8, #0
   b65bc:	d004      	beq.n	b65c8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b65be:	4620      	mov	r0, r4
   b65c0:	f7ff ffd8 	bl	b6574 <_ZN10RHDatagram8headerIdEv>
   b65c4:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b65c8:	b11f      	cbz	r7, b65d2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b65ca:	4620      	mov	r0, r4
   b65cc:	f7ff ffd6 	bl	b657c <_ZN10RHDatagram11headerFlagsEv>
   b65d0:	7038      	strb	r0, [r7, #0]
}
   b65d2:	4628      	mov	r0, r5
   b65d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b65d8 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b65d8:	2001      	movs	r0, #1
   b65da:	4770      	bx	lr

000b65dc <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b65dc:	7903      	ldrb	r3, [r0, #4]
   b65de:	2b03      	cmp	r3, #3
   b65e0:	d0fc      	beq.n	b65dc <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b65e2:	2001      	movs	r0, #1
   b65e4:	4770      	bx	lr

000b65e6 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b65e6:	2000      	movs	r0, #0
   b65e8:	4770      	bx	lr

000b65ea <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b65ea:	7181      	strb	r1, [r0, #6]
}
   b65ec:	4770      	bx	lr

000b65ee <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b65ee:	7141      	strb	r1, [r0, #5]
}
   b65f0:	4770      	bx	lr

000b65f2 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b65f2:	72c1      	strb	r1, [r0, #11]
}
   b65f4:	4770      	bx	lr

000b65f6 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b65f6:	7301      	strb	r1, [r0, #12]
}
   b65f8:	4770      	bx	lr

000b65fa <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b65fa:	7341      	strb	r1, [r0, #13]
}
   b65fc:	4770      	bx	lr

000b65fe <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b65fe:	7b83      	ldrb	r3, [r0, #14]
   b6600:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b6604:	4311      	orrs	r1, r2
   b6606:	7381      	strb	r1, [r0, #14]
}
   b6608:	4770      	bx	lr

000b660a <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b660a:	79c0      	ldrb	r0, [r0, #7]
}
   b660c:	4770      	bx	lr

000b660e <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b660e:	7a00      	ldrb	r0, [r0, #8]
}
   b6610:	4770      	bx	lr

000b6612 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b6612:	7a40      	ldrb	r0, [r0, #9]
}
   b6614:	4770      	bx	lr

000b6616 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b6616:	7a80      	ldrb	r0, [r0, #10]
}
   b6618:	4770      	bx	lr

000b661a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b661a:	8a00      	ldrh	r0, [r0, #16]
}
   b661c:	b200      	sxth	r0, r0
   b661e:	4770      	bx	lr

000b6620 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b6620:	7900      	ldrb	r0, [r0, #4]
}
   b6622:	4770      	bx	lr

000b6624 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b6624:	7101      	strb	r1, [r0, #4]
}
   b6626:	4770      	bx	lr

000b6628 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b6628:	8a40      	ldrh	r0, [r0, #18]
}
   b662a:	b280      	uxth	r0, r0
   b662c:	4770      	bx	lr

000b662e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b662e:	8a80      	ldrh	r0, [r0, #20]
}
   b6630:	b280      	uxth	r0, r0
   b6632:	4770      	bx	lr

000b6634 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b6634:	8ac0      	ldrh	r0, [r0, #22]
}
   b6636:	b280      	uxth	r0, r0
   b6638:	4770      	bx	lr

000b663a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b663a:	b538      	push	{r3, r4, r5, lr}
   b663c:	4605      	mov	r5, r0
   b663e:	460c      	mov	r4, r1
    while (!available())
   b6640:	682b      	ldr	r3, [r5, #0]
   b6642:	4628      	mov	r0, r5
   b6644:	68db      	ldr	r3, [r3, #12]
   b6646:	4798      	blx	r3
   b6648:	b928      	cbnz	r0, b6656 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b664a:	2c00      	cmp	r4, #0
   b664c:	d0f8      	beq.n	b6640 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b664e:	4620      	mov	r0, r4
   b6650:	f001 fd6e 	bl	b8130 <delay>
   b6654:	e7f4      	b.n	b6640 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b6656:	bd38      	pop	{r3, r4, r5, pc}

000b6658 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b6658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b665a:	4605      	mov	r5, r0
   b665c:	460f      	mov	r7, r1
   b665e:	4614      	mov	r4, r2
   b6660:	f001 f9f2 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b6664:	4606      	mov	r6, r0
   b6666:	f001 f9ef 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b666a:	1b80      	subs	r0, r0, r6
   b666c:	42b8      	cmp	r0, r7
   b666e:	d20a      	bcs.n	b6686 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b6670:	682b      	ldr	r3, [r5, #0]
   b6672:	4628      	mov	r0, r5
   b6674:	68db      	ldr	r3, [r3, #12]
   b6676:	4798      	blx	r3
   b6678:	b930      	cbnz	r0, b6688 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b667a:	2c00      	cmp	r4, #0
   b667c:	d0f3      	beq.n	b6666 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b667e:	4620      	mov	r0, r4
   b6680:	f001 fd56 	bl	b8130 <delay>
   b6684:	e7ef      	b.n	b6666 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b6686:	2000      	movs	r0, #0
}
   b6688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b668a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b668a:	b570      	push	{r4, r5, r6, lr}
   b668c:	4604      	mov	r4, r0
   b668e:	460e      	mov	r6, r1
   b6690:	f001 f9da 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b6694:	4605      	mov	r5, r0
   b6696:	f001 f9d7 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b669a:	1b40      	subs	r0, r0, r5
   b669c:	42b0      	cmp	r0, r6
   b669e:	d204      	bcs.n	b66aa <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b66a0:	7923      	ldrb	r3, [r4, #4]
   b66a2:	2b03      	cmp	r3, #3
   b66a4:	d0f7      	beq.n	b6696 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b66a6:	2001      	movs	r0, #1
}
   b66a8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b66aa:	2000      	movs	r0, #0
   b66ac:	e7fc      	b.n	b66a8 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b66ae <_ZN15RHGenericDriver7waitCADEv>:
{
   b66ae:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b66b0:	69c3      	ldr	r3, [r0, #28]
{
   b66b2:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b66b4:	b1b3      	cbz	r3, b66e4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b66b6:	f001 f9c7 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b66ba:	2664      	movs	r6, #100	; 0x64
   b66bc:	4605      	mov	r5, r0
    while (isChannelActive())
   b66be:	6823      	ldr	r3, [r4, #0]
   b66c0:	4620      	mov	r0, r4
   b66c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b66c4:	4798      	blx	r3
   b66c6:	b168      	cbz	r0, b66e4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b66c8:	f001 f9be 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b66cc:	69e3      	ldr	r3, [r4, #28]
   b66ce:	1b40      	subs	r0, r0, r5
   b66d0:	4298      	cmp	r0, r3
   b66d2:	d809      	bhi.n	b66e8 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b66d4:	210a      	movs	r1, #10
   b66d6:	2001      	movs	r0, #1
   b66d8:	f003 ffaf 	bl	ba63a <_Z6randomii>
   b66dc:	4370      	muls	r0, r6
   b66de:	f001 fd27 	bl	b8130 <delay>
    while (isChannelActive())
   b66e2:	e7ec      	b.n	b66be <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b66e4:	2001      	movs	r0, #1
}
   b66e6:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b66e8:	2000      	movs	r0, #0
   b66ea:	e7fc      	b.n	b66e6 <_ZN15RHGenericDriver7waitCADEv+0x38>

000b66ec <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b66ec:	4a06      	ldr	r2, [pc, #24]	; (b6708 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b66ee:	6002      	str	r2, [r0, #0]
   b66f0:	21ff      	movs	r1, #255	; 0xff
   b66f2:	2200      	movs	r2, #0
   b66f4:	7102      	strb	r2, [r0, #4]
   b66f6:	7141      	strb	r1, [r0, #5]
   b66f8:	8242      	strh	r2, [r0, #18]
   b66fa:	72c1      	strb	r1, [r0, #11]
   b66fc:	8282      	strh	r2, [r0, #20]
   b66fe:	8181      	strh	r1, [r0, #12]
   b6700:	7382      	strb	r2, [r0, #14]
   b6702:	82c2      	strh	r2, [r0, #22]
   b6704:	61c2      	str	r2, [r0, #28]
}
   b6706:	4770      	bx	lr
   b6708:	000bcd70 	.word	0x000bcd70

000b670c <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b670c:	4770      	bx	lr

000b670e <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b670e:	4770      	bx	lr

000b6710 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b6710:	4770      	bx	lr

000b6712 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b6712:	4770      	bx	lr

000b6714 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b6714:	4770      	bx	lr

000b6716 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b6716:	7141      	strb	r1, [r0, #5]
}
   b6718:	4770      	bx	lr

000b671a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b671a:	7181      	strb	r1, [r0, #6]
}
   b671c:	4770      	bx	lr

000b671e <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b671e:	7101      	strb	r1, [r0, #4]
}
   b6720:	4770      	bx	lr
	...

000b6724 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6724:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b6726:	4d03      	ldr	r5, [pc, #12]	; (b6734 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b6728:	6005      	str	r5, [r0, #0]
   b672a:	7101      	strb	r1, [r0, #4]
   b672c:	7142      	strb	r2, [r0, #5]
   b672e:	7183      	strb	r3, [r0, #6]
}
   b6730:	bd30      	pop	{r4, r5, pc}
   b6732:	bf00      	nop
   b6734:	000bcdf0 	.word	0x000bcdf0

000b6738 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6738:	4770      	bx	lr

000b673a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b673a:	b510      	push	{r4, lr}
  }
   b673c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b673e:	4604      	mov	r4, r0
  }
   b6740:	f7fd fcad 	bl	b409e <_ZdlPvj>
   b6744:	4620      	mov	r0, r4
   b6746:	bd10      	pop	{r4, pc}

000b6748 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6748:	b40e      	push	{r1, r2, r3}
   b674a:	b503      	push	{r0, r1, lr}
   b674c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b674e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6750:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b6754:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b6756:	f003 ff34 	bl	ba5c2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b675a:	b002      	add	sp, #8
   b675c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6760:	b003      	add	sp, #12
   b6762:	4770      	bx	lr

000b6764 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6764:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6766:	4604      	mov	r4, r0
   b6768:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b676a:	7922      	ldrb	r2, [r4, #4]
   b676c:	68a3      	ldr	r3, [r4, #8]
   b676e:	b132      	cbz	r2, b677e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6770:	b9a3      	cbnz	r3, b679c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6772:	490b      	ldr	r1, [pc, #44]	; (b67a0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6774:	b002      	add	sp, #8
   b6776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b677a:	f003 be19 	b.w	ba3b0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b677e:	4a09      	ldr	r2, [pc, #36]	; (b67a4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6780:	7b26      	ldrb	r6, [r4, #12]
   b6782:	4d09      	ldr	r5, [pc, #36]	; (b67a8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6784:	4909      	ldr	r1, [pc, #36]	; (b67ac <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6786:	7b64      	ldrb	r4, [r4, #13]
   b6788:	2e01      	cmp	r6, #1
   b678a:	bf18      	it	ne
   b678c:	4629      	movne	r1, r5
   b678e:	e9cd 1400 	strd	r1, r4, [sp]
   b6792:	4907      	ldr	r1, [pc, #28]	; (b67b0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6794:	f7ff ffd8 	bl	b6748 <_ZN5Print6printfEPKcz>
  }
   b6798:	b002      	add	sp, #8
   b679a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b679c:	4a05      	ldr	r2, [pc, #20]	; (b67b4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b679e:	e7ef      	b.n	b6780 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b67a0:	000bce2d 	.word	0x000bce2d
   b67a4:	000bd15d 	.word	0x000bd15d
   b67a8:	000bce29 	.word	0x000bce29
   b67ac:	000bce25 	.word	0x000bce25
   b67b0:	000bce43 	.word	0x000bce43
   b67b4:	000bce1c 	.word	0x000bce1c

000b67b8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b67b8:	b510      	push	{r4, lr}
   b67ba:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b67bc:	f7ff ffb2 	bl	b6724 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b67c0:	4b05      	ldr	r3, [pc, #20]	; (b67d8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b67c2:	6023      	str	r3, [r4, #0]
  {
   b67c4:	4b05      	ldr	r3, [pc, #20]	; (b67dc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b67c6:	60a3      	str	r3, [r4, #8]
   b67c8:	2301      	movs	r3, #1
   b67ca:	7323      	strb	r3, [r4, #12]
   b67cc:	2300      	movs	r3, #0
   b67ce:	6123      	str	r3, [r4, #16]
   b67d0:	82a3      	strh	r3, [r4, #20]
{
}
   b67d2:	4620      	mov	r0, r4
   b67d4:	bd10      	pop	{r4, pc}
   b67d6:	bf00      	nop
   b67d8:	000bce7c 	.word	0x000bce7c
   b67dc:	000bce68 	.word	0x000bce68

000b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b67e0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b67e2:	4c0b      	ldr	r4, [pc, #44]	; (b6810 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b67e4:	7821      	ldrb	r1, [r4, #0]
   b67e6:	f3bf 8f5b 	dmb	ish
   b67ea:	f011 0101 	ands.w	r1, r1, #1
   b67ee:	d10b      	bne.n	b6808 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b67f0:	4620      	mov	r0, r4
   b67f2:	9101      	str	r1, [sp, #4]
   b67f4:	f7fd fc62 	bl	b40bc <__cxa_guard_acquire>
   b67f8:	9901      	ldr	r1, [sp, #4]
   b67fa:	b128      	cbz	r0, b6808 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b67fc:	4805      	ldr	r0, [pc, #20]	; (b6814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b67fe:	f003 ff35 	bl	ba66c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6802:	4620      	mov	r0, r4
   b6804:	f7fd fc5f 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b6808:	4802      	ldr	r0, [pc, #8]	; (b6814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b680a:	b002      	add	sp, #8
   b680c:	bd10      	pop	{r4, pc}
   b680e:	bf00      	nop
   b6810:	2003e3e0 	.word	0x2003e3e0
   b6814:	2003e3e4 	.word	0x2003e3e4

000b6818 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b6818:	b507      	push	{r0, r1, r2, lr}
   b681a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b681c:	f7ff ffe0 	bl	b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6820:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b6822:	b003      	add	sp, #12
   b6824:	f85d eb04 	ldr.w	lr, [sp], #4
   b6828:	f003 bfd8 	b.w	ba7dc <_ZN8SPIClass8transferEh>

000b682c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b682c:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b682e:	f7ff ffd7 	bl	b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b6832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6836:	f003 bfd7 	b.w	ba7e8 <_ZN8SPIClass15attachInterruptEv>

000b683a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b683a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b683c:	f7ff ffd0 	bl	b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b6840:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6844:	f003 bfd1 	b.w	ba7ea <_ZN8SPIClass15detachInterruptEv>

000b6848 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b6848:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b684a:	7903      	ldrb	r3, [r0, #4]
   b684c:	2b04      	cmp	r3, #4
   b684e:	d020      	beq.n	b6892 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b6850:	2b03      	cmp	r3, #3
   b6852:	d020      	beq.n	b6896 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b6854:	2b02      	cmp	r3, #2
   b6856:	d020      	beq.n	b689a <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b6858:	4a11      	ldr	r2, [pc, #68]	; (b68a0 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b685a:	4912      	ldr	r1, [pc, #72]	; (b68a4 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b685c:	2b01      	cmp	r3, #1
   b685e:	bf18      	it	ne
   b6860:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b6862:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b6864:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b6866:	3901      	subs	r1, #1
   b6868:	bf18      	it	ne
   b686a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b686c:	b133      	cbz	r3, b687c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b686e:	2b01      	cmp	r3, #1
   b6870:	d004      	beq.n	b687c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b6872:	2b02      	cmp	r3, #2
   b6874:	d002      	beq.n	b687c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b6876:	2b03      	cmp	r3, #3
   b6878:	bf18      	it	ne
   b687a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b687c:	2400      	movs	r4, #0
   b687e:	7304      	strb	r4, [r0, #12]
   b6880:	6102      	str	r2, [r0, #16]
   b6882:	7501      	strb	r1, [r0, #20]
   b6884:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b6886:	f7ff ffab 	bl	b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b688a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b688e:	f003 bef7 	b.w	ba680 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b6892:	4a05      	ldr	r2, [pc, #20]	; (b68a8 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b6894:	e7e5      	b.n	b6862 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b6896:	4a05      	ldr	r2, [pc, #20]	; (b68ac <_ZN13RHHardwareSPI5beginEv+0x64>)
   b6898:	e7e3      	b.n	b6862 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b689a:	4a05      	ldr	r2, [pc, #20]	; (b68b0 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b689c:	e7e1      	b.n	b6862 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b689e:	bf00      	nop
   b68a0:	001e8480 	.word	0x001e8480
   b68a4:	000f4240 	.word	0x000f4240
   b68a8:	00f42400 	.word	0x00f42400
   b68ac:	007a1200 	.word	0x007a1200
   b68b0:	003d0900 	.word	0x003d0900

000b68b4 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b68b4:	b508      	push	{r3, lr}
        instance().end();
   b68b6:	f7ff ff93 	bl	b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b68ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b68be:	f003 bef3 	b.w	ba6a8 <_ZN8SPIClass3endEv>

000b68c2 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b68c2:	b510      	push	{r4, lr}
   b68c4:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b68c6:	f7ff ff8b 	bl	b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b68ca:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b68ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b68d2:	f003 bf15 	b.w	ba700 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b68d6 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b68d6:	b508      	push	{r3, lr}
        instance().endTransaction();
   b68d8:	f7ff ff82 	bl	b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b68dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b68e0:	f003 bef4 	b.w	ba6cc <_ZN8SPIClass14endTransactionEv>

000b68e4 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b68e4:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b68e6:	f7ff ff7b 	bl	b67e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b68ea:	bd08      	pop	{r3, pc}

000b68ec <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b68ec:	2300      	movs	r3, #0
   b68ee:	4802      	ldr	r0, [pc, #8]	; (b68f8 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b68f0:	461a      	mov	r2, r3
   b68f2:	4619      	mov	r1, r3
   b68f4:	f7ff bf60 	b.w	b67b8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b68f8:	2003e3ec 	.word	0x2003e3ec

000b68fc <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b68fc:	2a01      	cmp	r2, #1
   b68fe:	d105      	bne.n	b690c <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b6900:	7a00      	ldrb	r0, [r0, #8]
   b6902:	780b      	ldrb	r3, [r1, #0]
   b6904:	1a1b      	subs	r3, r3, r0
   b6906:	4258      	negs	r0, r3
   b6908:	4158      	adcs	r0, r3
   b690a:	4770      	bx	lr
   b690c:	2000      	movs	r0, #0
}
   b690e:	4770      	bx	lr

000b6910 <_ZN6RHMesh5doArpEh>:
{
   b6910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6914:	4c25      	ldr	r4, [pc, #148]	; (b69ac <_ZN6RHMesh5doArpEh+0x9c>)
   b6916:	2301      	movs	r3, #1
{
   b6918:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b691a:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b691c:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b691e:	2300      	movs	r3, #0
{
   b6920:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b6922:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6924:	9300      	str	r3, [sp, #0]
   b6926:	2203      	movs	r2, #3
   b6928:	23ff      	movs	r3, #255	; 0xff
   b692a:	4621      	mov	r1, r4
{
   b692c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b692e:	f000 fbe5 	bl	b70fc <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b6932:	b120      	cbz	r0, b693e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b6934:	2500      	movs	r5, #0
}
   b6936:	4628      	mov	r0, r5
   b6938:	b006      	add	sp, #24
   b693a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b693e:	23fa      	movs	r3, #250	; 0xfa
   b6940:	f88d 3017 	strb.w	r3, [sp, #23]
   b6944:	f001 f880 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b6948:	f106 0904 	add.w	r9, r6, #4
   b694c:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b694e:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b6952:	f001 f879 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b6956:	1a29      	subs	r1, r5, r0
   b6958:	2900      	cmp	r1, #0
   b695a:	ddeb      	ble.n	b6934 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b695c:	2200      	movs	r2, #0
   b695e:	b289      	uxth	r1, r1
   b6960:	4648      	mov	r0, r9
   b6962:	f7ff fdbe 	bl	b64e2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b6966:	2800      	cmp	r0, #0
   b6968:	d0f3      	beq.n	b6952 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b696a:	2300      	movs	r3, #0
   b696c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6970:	e9cd 3300 	strd	r3, r3, [sp]
   b6974:	f10d 0217 	add.w	r2, sp, #23
   b6978:	4621      	mov	r1, r4
   b697a:	4630      	mov	r0, r6
   b697c:	f000 fbc8 	bl	b7110 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b6980:	4605      	mov	r5, r0
   b6982:	2800      	cmp	r0, #0
   b6984:	d0e3      	beq.n	b694e <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b6986:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b698a:	2b01      	cmp	r3, #1
   b698c:	d9df      	bls.n	b694e <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b698e:	f894 a000 	ldrb.w	sl, [r4]
   b6992:	f1ba 0f02 	cmp.w	sl, #2
   b6996:	d1da      	bne.n	b694e <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b6998:	4648      	mov	r0, r9
   b699a:	f7ff fde7 	bl	b656c <_ZN10RHDatagram10headerFromEv>
   b699e:	4653      	mov	r3, sl
   b69a0:	4602      	mov	r2, r0
   b69a2:	4639      	mov	r1, r7
   b69a4:	4630      	mov	r0, r6
   b69a6:	f000 fb21 	bl	b6fec <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b69aa:	e7c4      	b.n	b6936 <_ZN6RHMesh5doArpEh+0x26>
   b69ac:	2003e404 	.word	0x2003e404

000b69b0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b69b0:	2a01      	cmp	r2, #1
{
   b69b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b69b6:	4607      	mov	r7, r0
   b69b8:	460e      	mov	r6, r1
   b69ba:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b69bc:	d93b      	bls.n	b6a36 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b69be:	794d      	ldrb	r5, [r1, #5]
   b69c0:	2d02      	cmp	r5, #2
   b69c2:	d130      	bne.n	b6a26 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b69c4:	f100 0804 	add.w	r8, r0, #4
   b69c8:	79c9      	ldrb	r1, [r1, #7]
   b69ca:	9101      	str	r1, [sp, #4]
   b69cc:	4640      	mov	r0, r8
   b69ce:	f7ff fdcd 	bl	b656c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b69d2:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b69d4:	462b      	mov	r3, r5
   b69d6:	4602      	mov	r2, r0
   b69d8:	9901      	ldr	r1, [sp, #4]
   b69da:	4638      	mov	r0, r7
   b69dc:	f000 fb06 	bl	b6fec <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b69e0:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b69e2:	f106 0308 	add.w	r3, r6, #8
   b69e6:	2400      	movs	r4, #0
   b69e8:	4622      	mov	r2, r4
   b69ea:	4295      	cmp	r5, r2
   b69ec:	f104 0401 	add.w	r4, r4, #1
   b69f0:	b2e4      	uxtb	r4, r4
   b69f2:	d904      	bls.n	b69fe <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b69f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b69f8:	7a39      	ldrb	r1, [r7, #8]
   b69fa:	4291      	cmp	r1, r2
   b69fc:	d1f4      	bne.n	b69e8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b69fe:	f104 0108 	add.w	r1, r4, #8
   b6a02:	440e      	add	r6, r1
	while (i < numRoutes)
   b6a04:	42a5      	cmp	r5, r4
   b6a06:	d916      	bls.n	b6a36 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b6a08:	f816 1b01 	ldrb.w	r1, [r6], #1
   b6a0c:	9101      	str	r1, [sp, #4]
   b6a0e:	4640      	mov	r0, r8
   b6a10:	f7ff fdac 	bl	b656c <_ZN10RHDatagram10headerFromEv>
   b6a14:	3401      	adds	r4, #1
   b6a16:	4602      	mov	r2, r0
   b6a18:	9901      	ldr	r1, [sp, #4]
   b6a1a:	2302      	movs	r3, #2
   b6a1c:	4638      	mov	r0, r7
   b6a1e:	b2e4      	uxtb	r4, r4
   b6a20:	f000 fae4 	bl	b6fec <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b6a24:	e7ee      	b.n	b6a04 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b6a26:	2d03      	cmp	r5, #3
   b6a28:	d105      	bne.n	b6a36 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b6a2a:	7989      	ldrb	r1, [r1, #6]
}
   b6a2c:	b002      	add	sp, #8
   b6a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b6a32:	f000 bac4 	b.w	b6fbe <_ZN8RHRouter13deleteRouteToEh>
}
   b6a36:	b002      	add	sp, #8
   b6a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6a3c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b6a3c:	b510      	push	{r4, lr}
   b6a3e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b6a40:	f000 fb14 	bl	b706c <_ZN8RHRouterC1ER15RHGenericDriverh>
   b6a44:	4b01      	ldr	r3, [pc, #4]	; (b6a4c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b6a46:	6023      	str	r3, [r4, #0]
}
   b6a48:	4620      	mov	r0, r4
   b6a4a:	bd10      	pop	{r4, pc}
   b6a4c:	000bceb0 	.word	0x000bceb0

000b6a50 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b6a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b6a54:	2af9      	cmp	r2, #249	; 0xf9
{
   b6a56:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b6a5a:	4606      	mov	r6, r0
   b6a5c:	460f      	mov	r7, r1
   b6a5e:	4614      	mov	r4, r2
   b6a60:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b6a62:	d825      	bhi.n	b6ab0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b6a64:	2bff      	cmp	r3, #255	; 0xff
   b6a66:	d114      	bne.n	b6a92 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b6a68:	f8df 8048 	ldr.w	r8, [pc, #72]	; b6ab4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b6a6c:	4640      	mov	r0, r8
   b6a6e:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b6a70:	4622      	mov	r2, r4
   b6a72:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b6a74:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b6a78:	f005 f9c2 	bl	bbe00 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b6a7c:	1c62      	adds	r2, r4, #1
   b6a7e:	f8cd 9020 	str.w	r9, [sp, #32]
   b6a82:	462b      	mov	r3, r5
   b6a84:	4641      	mov	r1, r8
   b6a86:	4630      	mov	r0, r6
   b6a88:	b2d2      	uxtb	r2, r2
}
   b6a8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b6a8e:	f000 bb35 	b.w	b70fc <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b6a92:	4619      	mov	r1, r3
   b6a94:	f000 fa4f 	bl	b6f36 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b6a98:	2800      	cmp	r0, #0
   b6a9a:	d1e5      	bne.n	b6a68 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b6a9c:	6833      	ldr	r3, [r6, #0]
   b6a9e:	4629      	mov	r1, r5
   b6aa0:	689b      	ldr	r3, [r3, #8]
   b6aa2:	4630      	mov	r0, r6
   b6aa4:	4798      	blx	r3
   b6aa6:	2800      	cmp	r0, #0
   b6aa8:	d1de      	bne.n	b6a68 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b6aaa:	2002      	movs	r0, #2
}
   b6aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b6ab0:	2001      	movs	r0, #1
   b6ab2:	e7fb      	b.n	b6aac <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b6ab4:	2003e404 	.word	0x2003e404

000b6ab8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b6ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6abc:	b089      	sub	sp, #36	; 0x24
   b6abe:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b6ac0:	23fa      	movs	r3, #250	; 0xfa
   b6ac2:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b6ac6:	f10d 031f 	add.w	r3, sp, #31
   b6aca:	9303      	str	r3, [sp, #12]
   b6acc:	f10d 031e 	add.w	r3, sp, #30
   b6ad0:	9302      	str	r3, [sp, #8]
   b6ad2:	4e5d      	ldr	r6, [pc, #372]	; (b6c48 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b6ad4:	f10d 031d 	add.w	r3, sp, #29
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	ab07      	add	r3, sp, #28
   b6adc:	9300      	str	r3, [sp, #0]
{     
   b6ade:	4689      	mov	r9, r1
   b6ae0:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b6ae2:	f10d 031b 	add.w	r3, sp, #27
   b6ae6:	f10d 021a 	add.w	r2, sp, #26
   b6aea:	4631      	mov	r1, r6
{     
   b6aec:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b6af0:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b6af2:	f000 fb0d 	bl	b7110 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b6af6:	4604      	mov	r4, r0
   b6af8:	b920      	cbnz	r0, b6b04 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b6afa:	2400      	movs	r4, #0
}
   b6afc:	4620      	mov	r0, r4
   b6afe:	b009      	add	sp, #36	; 0x24
   b6b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b6b04:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b6b08:	b373      	cbz	r3, b6b68 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b6b0a:	7832      	ldrb	r2, [r6, #0]
   b6b0c:	bb62      	cbnz	r2, b6b68 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b6b0e:	f1b8 0f00 	cmp.w	r8, #0
   b6b12:	d003      	beq.n	b6b1c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b6b14:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b6b18:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b6b1c:	f1bb 0f00 	cmp.w	fp, #0
   b6b20:	d003      	beq.n	b6b2a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b6b22:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b6b26:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b6b2a:	f1ba 0f00 	cmp.w	sl, #0
   b6b2e:	d003      	beq.n	b6b38 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b6b30:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b6b34:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b6b38:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b6b3a:	b11a      	cbz	r2, b6b44 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b6b3c:	9914      	ldr	r1, [sp, #80]	; 0x50
   b6b3e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b6b42:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b6b44:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b6b46:	b11a      	cbz	r2, b6b50 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b6b48:	9915      	ldr	r1, [sp, #84]	; 0x54
   b6b4a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b6b4e:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b6b50:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b6b52:	493e      	ldr	r1, [pc, #248]	; (b6c4c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b6b54:	3b01      	subs	r3, #1
   b6b56:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b6b58:	429a      	cmp	r2, r3
		*len = msgLen;
   b6b5a:	bf88      	it	hi
   b6b5c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b6b5e:	783a      	ldrb	r2, [r7, #0]
   b6b60:	4648      	mov	r0, r9
   b6b62:	f005 f94d 	bl	bbe00 <memcpy>
	    return true;
   b6b66:	e7c9      	b.n	b6afc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b6b68:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b6b6c:	2aff      	cmp	r2, #255	; 0xff
   b6b6e:	d1c4      	bne.n	b6afa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b6b70:	2b01      	cmp	r3, #1
   b6b72:	d9c2      	bls.n	b6afa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b6b74:	7832      	ldrb	r2, [r6, #0]
   b6b76:	2a01      	cmp	r2, #1
   b6b78:	d1bf      	bne.n	b6afa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b6b7a:	7a2a      	ldrb	r2, [r5, #8]
   b6b7c:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b6b80:	42a2      	cmp	r2, r4
   b6b82:	d0ba      	beq.n	b6afa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b6b84:	1edf      	subs	r7, r3, #3
   b6b86:	4932      	ldr	r1, [pc, #200]	; (b6c50 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b6b88:	b2ff      	uxtb	r7, r7
   b6b8a:	2300      	movs	r3, #0
   b6b8c:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b6b90:	4547      	cmp	r7, r8
   b6b92:	d906      	bls.n	b6ba2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b6b94:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6b98:	4282      	cmp	r2, r0
   b6b9a:	f103 0301 	add.w	r3, r3, #1
   b6b9e:	d1f5      	bne.n	b6b8c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b6ba0:	e7ab      	b.n	b6afa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b6ba2:	f105 0904 	add.w	r9, r5, #4
   b6ba6:	4648      	mov	r0, r9
   b6ba8:	f7ff fce0 	bl	b656c <_ZN10RHDatagram10headerFromEv>
   b6bac:	2302      	movs	r3, #2
   b6bae:	4602      	mov	r2, r0
   b6bb0:	4621      	mov	r1, r4
   b6bb2:	4628      	mov	r0, r5
   b6bb4:	f000 fa1a 	bl	b6fec <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b6bb8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b6bbc:	b193      	cbz	r3, b6be4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b6bbe:	4c22      	ldr	r4, [pc, #136]	; (b6c48 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b6bc0:	1ba3      	subs	r3, r4, r6
   b6bc2:	b2db      	uxtb	r3, r3
   b6bc4:	429f      	cmp	r7, r3
   b6bc6:	d90c      	bls.n	b6be2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b6bc8:	78e1      	ldrb	r1, [r4, #3]
   b6bca:	9105      	str	r1, [sp, #20]
   b6bcc:	4648      	mov	r0, r9
   b6bce:	f7ff fccd 	bl	b656c <_ZN10RHDatagram10headerFromEv>
   b6bd2:	9905      	ldr	r1, [sp, #20]
   b6bd4:	4602      	mov	r2, r0
   b6bd6:	2302      	movs	r3, #2
   b6bd8:	4628      	mov	r0, r5
   b6bda:	f000 fa07 	bl	b6fec <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b6bde:	3401      	adds	r4, #1
   b6be0:	e7ee      	b.n	b6bc0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b6be2:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b6be4:	682b      	ldr	r3, [r5, #0]
   b6be6:	7872      	ldrb	r2, [r6, #1]
   b6be8:	68db      	ldr	r3, [r3, #12]
   b6bea:	491a      	ldr	r1, [pc, #104]	; (b6c54 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b6bec:	4628      	mov	r0, r5
   b6bee:	4798      	blx	r3
   b6bf0:	4604      	mov	r4, r0
   b6bf2:	b160      	cbz	r0, b6c0e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b6bf4:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b6bf6:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b6bf8:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b6bfa:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b6bfe:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b6c02:	4911      	ldr	r1, [pc, #68]	; (b6c48 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b6c04:	9400      	str	r4, [sp, #0]
   b6c06:	4628      	mov	r0, r5
   b6c08:	f000 fa78 	bl	b70fc <_ZN8RHRouter10sendtoWaitEPhhhh>
   b6c0c:	e776      	b.n	b6afc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b6c0e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b6c12:	4543      	cmp	r3, r8
   b6c14:	f67f af71 	bls.w	b6afa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b6c18:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b6c1c:	2b00      	cmp	r3, #0
   b6c1e:	f43f af6c 	beq.w	b6afa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b6c22:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b6c26:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b6c28:	4907      	ldr	r1, [pc, #28]	; (b6c48 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b6c2a:	443e      	add	r6, r7
		tmpMessageLen++;
   b6c2c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b6c2e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b6c30:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b6c34:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b6c36:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b6c38:	9300      	str	r3, [sp, #0]
   b6c3a:	4628      	mov	r0, r5
   b6c3c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b6c3e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b6c42:	f000 fa25 	bl	b7090 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b6c46:	e759      	b.n	b6afc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b6c48:	2003e404 	.word	0x2003e404
   b6c4c:	2003e405 	.word	0x2003e405
   b6c50:	2003e407 	.word	0x2003e407
   b6c54:	2003e406 	.word	0x2003e406

000b6c58 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b6c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c5c:	b085      	sub	sp, #20
   b6c5e:	4680      	mov	r8, r0
   b6c60:	461c      	mov	r4, r3
   b6c62:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   b6c66:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b6c68:	4689      	mov	r9, r1
   b6c6a:	4692      	mov	sl, r2
   b6c6c:	f000 feec 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   b6c70:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   b6c74:	4404      	add	r4, r0
   b6c76:	f000 fee7 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b6c7a:	1a20      	subs	r0, r4, r0
   b6c7c:	2800      	cmp	r0, #0
   b6c7e:	dd16      	ble.n	b6cae <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   b6c80:	b281      	uxth	r1, r0
   b6c82:	2200      	movs	r2, #0
   b6c84:	4658      	mov	r0, fp
   b6c86:	f7ff fc2c 	bl	b64e2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b6c8a:	2800      	cmp	r0, #0
   b6c8c:	d0f3      	beq.n	b6c76 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   b6c8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b6c90:	9300      	str	r3, [sp, #0]
   b6c92:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b6c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b6c98:	9501      	str	r5, [sp, #4]
   b6c9a:	4652      	mov	r2, sl
   b6c9c:	4649      	mov	r1, r9
   b6c9e:	4640      	mov	r0, r8
   b6ca0:	f7ff ff0a 	bl	b6ab8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b6ca4:	2800      	cmp	r0, #0
   b6ca6:	d0e6      	beq.n	b6c76 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   b6ca8:	b005      	add	sp, #20
   b6caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   b6cae:	2000      	movs	r0, #0
   b6cb0:	e7fa      	b.n	b6ca8 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000b6cb4 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b6cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6cb6:	b085      	sub	sp, #20
   b6cb8:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b6cba:	3004      	adds	r0, #4
{
   b6cbc:	460e      	mov	r6, r1
   b6cbe:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b6cc0:	f7ff fc54 	bl	b656c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b6cc4:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b6cc6:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b6cc8:	4631      	mov	r1, r6
   b6cca:	4628      	mov	r0, r5
   b6ccc:	f000 f94a 	bl	b6f64 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b6cd0:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b6cd2:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b6cd4:	d001      	beq.n	b6cda <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b6cd6:	2805      	cmp	r0, #5
   b6cd8:	d11b      	bne.n	b6d12 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b6cda:	7831      	ldrb	r1, [r6, #0]
   b6cdc:	4628      	mov	r0, r5
   b6cde:	f000 f96e 	bl	b6fbe <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b6ce2:	7872      	ldrb	r2, [r6, #1]
   b6ce4:	7a2b      	ldrb	r3, [r5, #8]
   b6ce6:	429a      	cmp	r2, r3
   b6ce8:	d013      	beq.n	b6d12 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b6cea:	4c0b      	ldr	r4, [pc, #44]	; (b6d18 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b6cec:	2303      	movs	r3, #3
   b6cee:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b6cf0:	7833      	ldrb	r3, [r6, #0]
   b6cf2:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b6cf4:	7871      	ldrb	r1, [r6, #1]
   b6cf6:	2302      	movs	r3, #2
   b6cf8:	463a      	mov	r2, r7
   b6cfa:	4628      	mov	r0, r5
   b6cfc:	f000 f976 	bl	b6fec <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b6d00:	2300      	movs	r3, #0
   b6d02:	9300      	str	r3, [sp, #0]
   b6d04:	4621      	mov	r1, r4
   b6d06:	7873      	ldrb	r3, [r6, #1]
   b6d08:	2202      	movs	r2, #2
   b6d0a:	4628      	mov	r0, r5
   b6d0c:	f000 f9f6 	bl	b70fc <_ZN8RHRouter10sendtoWaitEPhhhh>
   b6d10:	4604      	mov	r4, r0
}
   b6d12:	4620      	mov	r0, r4
   b6d14:	b005      	add	sp, #20
   b6d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6d18:	2003e404 	.word	0x2003e404

000b6d1c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b6d1c:	b510      	push	{r4, lr}
   b6d1e:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b6d20:	f7ff fbd4 	bl	b64cc <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b6d24:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b6d26:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b6d28:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b6d2a:	2303      	movs	r3, #3
    _retransmissions = 0;
   b6d2c:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b6d2e:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b6d30:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b6d32:	f44f 7280 	mov.w	r2, #256	; 0x100
   b6d36:	f104 0011 	add.w	r0, r4, #17
   b6d3a:	f005 f889 	bl	bbe50 <memset>
}
   b6d3e:	4620      	mov	r0, r4
   b6d40:	bd10      	pop	{r4, pc}

000b6d42 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b6d42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6d44:	4604      	mov	r4, r0
   b6d46:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b6d48:	f7ff fc04 	bl	b6554 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b6d4c:	4620      	mov	r0, r4
   b6d4e:	2200      	movs	r2, #0
   b6d50:	2180      	movs	r1, #128	; 0x80
   b6d52:	f7ff fc03 	bl	b655c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b6d56:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b6d58:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b6d5a:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b6d5e:	f10d 010f 	add.w	r1, sp, #15
   b6d62:	2201      	movs	r2, #1
   b6d64:	4620      	mov	r0, r4
   b6d66:	f7ff fbc6 	bl	b64f6 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b6d6a:	4620      	mov	r0, r4
   b6d6c:	f7ff fbb5 	bl	b64da <_ZN10RHDatagram14waitPacketSentEv>
}
   b6d70:	b004      	add	sp, #16
   b6d72:	bd10      	pop	{r4, pc}

000b6d74 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b6d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b6d78:	7b05      	ldrb	r5, [r0, #12]
   b6d7a:	3501      	adds	r5, #1
   b6d7c:	b2ed      	uxtb	r5, r5
{
   b6d7e:	b087      	sub	sp, #28
   b6d80:	4604      	mov	r4, r0
   b6d82:	4689      	mov	r9, r1
   b6d84:	4692      	mov	sl, r2
   b6d86:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b6d88:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b6d8a:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b6d8c:	7c22      	ldrb	r2, [r4, #16]
   b6d8e:	463b      	mov	r3, r7
   b6d90:	429a      	cmp	r2, r3
   b6d92:	f107 0701 	add.w	r7, r7, #1
   b6d96:	b2ff      	uxtb	r7, r7
   b6d98:	d36b      	bcc.n	b6e72 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b6d9a:	4629      	mov	r1, r5
   b6d9c:	4620      	mov	r0, r4
   b6d9e:	f7ff fbd9 	bl	b6554 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b6da2:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b6da4:	bf0d      	iteet	eq
   b6da6:	22c0      	moveq	r2, #192	; 0xc0
   b6da8:	2280      	movne	r2, #128	; 0x80
   b6daa:	2140      	movne	r1, #64	; 0x40
   b6dac:	2100      	moveq	r1, #0
   b6dae:	4620      	mov	r0, r4
   b6db0:	f7ff fbd4 	bl	b655c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b6db4:	4643      	mov	r3, r8
   b6db6:	4652      	mov	r2, sl
   b6db8:	4649      	mov	r1, r9
   b6dba:	4620      	mov	r0, r4
   b6dbc:	f7ff fb9b 	bl	b64f6 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b6dc0:	4620      	mov	r0, r4
   b6dc2:	f7ff fb8a 	bl	b64da <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b6dc6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b6dca:	d054      	beq.n	b6e76 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b6dcc:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b6dce:	bf82      	ittt	hi
   b6dd0:	68a3      	ldrhi	r3, [r4, #8]
   b6dd2:	3301      	addhi	r3, #1
   b6dd4:	60a3      	strhi	r3, [r4, #8]
   b6dd6:	f000 fe37 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b6dda:	f44f 7180 	mov.w	r1, #256	; 0x100
   b6dde:	4683      	mov	fp, r0
   b6de0:	2000      	movs	r0, #0
   b6de2:	89e6      	ldrh	r6, [r4, #14]
   b6de4:	f003 fc29 	bl	ba63a <_Z6randomii>
   b6de8:	4370      	muls	r0, r6
   b6dea:	bf48      	it	mi
   b6dec:	30ff      	addmi	r0, #255	; 0xff
   b6dee:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b6df2:	fa1b f686 	uxtah	r6, fp, r6
   b6df6:	f000 fe27 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
   b6dfa:	1a30      	subs	r0, r6, r0
   b6dfc:	2800      	cmp	r0, #0
   b6dfe:	ddc5      	ble.n	b6d8c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b6e00:	b281      	uxth	r1, r0
   b6e02:	2200      	movs	r2, #0
   b6e04:	4620      	mov	r0, r4
   b6e06:	f7ff fb6c 	bl	b64e2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b6e0a:	2800      	cmp	r0, #0
   b6e0c:	d0f3      	beq.n	b6df6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b6e0e:	f10d 0317 	add.w	r3, sp, #23
   b6e12:	9302      	str	r3, [sp, #8]
   b6e14:	f10d 0316 	add.w	r3, sp, #22
   b6e18:	9301      	str	r3, [sp, #4]
   b6e1a:	2200      	movs	r2, #0
   b6e1c:	f10d 0315 	add.w	r3, sp, #21
   b6e20:	9300      	str	r3, [sp, #0]
   b6e22:	4611      	mov	r1, r2
   b6e24:	ab05      	add	r3, sp, #20
   b6e26:	4620      	mov	r0, r4
   b6e28:	f7ff fbac 	bl	b6584 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b6e2c:	2800      	cmp	r0, #0
   b6e2e:	d0e2      	beq.n	b6df6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b6e30:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b6e34:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b6e38:	4542      	cmp	r2, r8
   b6e3a:	d10e      	bne.n	b6e5a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b6e3c:	f894 c004 	ldrb.w	ip, [r4, #4]
   b6e40:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b6e44:	458c      	cmp	ip, r1
   b6e46:	d108      	bne.n	b6e5a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b6e48:	2b00      	cmp	r3, #0
   b6e4a:	da08      	bge.n	b6e5e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b6e4c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b6e50:	42ab      	cmp	r3, r5
   b6e52:	d1d0      	bne.n	b6df6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b6e54:	b007      	add	sp, #28
   b6e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b6e5a:	2b00      	cmp	r3, #0
   b6e5c:	dbcb      	blt.n	b6df6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b6e5e:	18a1      	adds	r1, r4, r2
   b6e60:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b6e64:	7c49      	ldrb	r1, [r1, #17]
   b6e66:	4299      	cmp	r1, r3
   b6e68:	d1c5      	bne.n	b6df6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	f7ff ff69 	bl	b6d42 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b6e70:	e7c1      	b.n	b6df6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b6e72:	2000      	movs	r0, #0
   b6e74:	e7ee      	b.n	b6e54 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b6e76:	2001      	movs	r0, #1
   b6e78:	e7ec      	b.n	b6e54 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b6e7a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b6e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e7e:	b089      	sub	sp, #36	; 0x24
   b6e80:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b6e84:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b6e88:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b6e8a:	4604      	mov	r4, r0
   b6e8c:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b6e8e:	f7ff fb20 	bl	b64d2 <_ZN10RHDatagram9availableEv>
   b6e92:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b6e96:	b920      	cbnz	r0, b6ea2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b6e98:	2500      	movs	r5, #0
}
   b6e9a:	4628      	mov	r0, r5
   b6e9c:	b009      	add	sp, #36	; 0x24
   b6e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b6ea2:	f10d 031f 	add.w	r3, sp, #31
   b6ea6:	9302      	str	r3, [sp, #8]
   b6ea8:	f10d 031e 	add.w	r3, sp, #30
   b6eac:	9301      	str	r3, [sp, #4]
   b6eae:	f10d 031d 	add.w	r3, sp, #29
   b6eb2:	9300      	str	r3, [sp, #0]
   b6eb4:	4620      	mov	r0, r4
   b6eb6:	ab07      	add	r3, sp, #28
   b6eb8:	f7ff fb64 	bl	b6584 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b6ebc:	4605      	mov	r5, r0
   b6ebe:	2800      	cmp	r0, #0
   b6ec0:	d0ea      	beq.n	b6e98 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b6ec2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b6ec6:	2b00      	cmp	r3, #0
   b6ec8:	dbe6      	blt.n	b6e98 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b6eca:	7922      	ldrb	r2, [r4, #4]
   b6ecc:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b6ed0:	429a      	cmp	r2, r3
   b6ed2:	d106      	bne.n	b6ee2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b6ed4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b6ed8:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b6edc:	4620      	mov	r0, r4
   b6ede:	f7ff ff30 	bl	b6d42 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b6ee2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b6ee6:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b6eea:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b6eee:	f012 0f40 	tst.w	r2, #64	; 0x40
   b6ef2:	440c      	add	r4, r1
   b6ef4:	d002      	beq.n	b6efc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b6ef6:	7c60      	ldrb	r0, [r4, #17]
   b6ef8:	4298      	cmp	r0, r3
   b6efa:	d0cd      	beq.n	b6e98 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b6efc:	b106      	cbz	r6, b6f00 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b6efe:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b6f00:	f1b9 0f00 	cmp.w	r9, #0
   b6f04:	d003      	beq.n	b6f0e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b6f06:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b6f0a:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b6f0e:	f1b8 0f00 	cmp.w	r8, #0
   b6f12:	d001      	beq.n	b6f18 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b6f14:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b6f18:	b107      	cbz	r7, b6f1c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b6f1a:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b6f1c:	7463      	strb	r3, [r4, #17]
		return true;
   b6f1e:	e7bc      	b.n	b6e9a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b6f20 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b6f20:	4770      	bx	lr

000b6f22 <_ZN8RHRouter4initEv>:
{
   b6f22:	b510      	push	{r4, lr}
   b6f24:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b6f26:	3004      	adds	r0, #4
   b6f28:	f7ff fb06 	bl	b6538 <_ZN10RHDatagram4initEv>
    if (ret)
   b6f2c:	b110      	cbz	r0, b6f34 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b6f2e:	231e      	movs	r3, #30
   b6f30:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b6f34:	bd10      	pop	{r4, pc}

000b6f36 <_ZN8RHRouter10getRouteToEh>:
{
   b6f36:	b510      	push	{r4, lr}
   b6f38:	4602      	mov	r2, r0
   b6f3a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b6f3c:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b6f40:	428c      	cmp	r4, r1
   b6f42:	d108      	bne.n	b6f56 <_ZN8RHRouter10getRouteToEh+0x20>
   b6f44:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b6f48:	b12c      	cbz	r4, b6f56 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b6f4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b6f4e:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b6f52:	4418      	add	r0, r3
}
   b6f54:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b6f56:	3301      	adds	r3, #1
   b6f58:	2b32      	cmp	r3, #50	; 0x32
   b6f5a:	f102 0203 	add.w	r2, r2, #3
   b6f5e:	d1ed      	bne.n	b6f3c <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b6f60:	2000      	movs	r0, #0
   b6f62:	e7f7      	b.n	b6f54 <_ZN8RHRouter10getRouteToEh+0x1e>

000b6f64 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b6f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b6f66:	780b      	ldrb	r3, [r1, #0]
   b6f68:	2bff      	cmp	r3, #255	; 0xff
{
   b6f6a:	4605      	mov	r5, r0
   b6f6c:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b6f6e:	d006      	beq.n	b6f7e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b6f70:	4619      	mov	r1, r3
   b6f72:	9201      	str	r2, [sp, #4]
   b6f74:	f7ff ffdf 	bl	b6f36 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b6f78:	b158      	cbz	r0, b6f92 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b6f7a:	7843      	ldrb	r3, [r0, #1]
   b6f7c:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b6f7e:	4621      	mov	r1, r4
   b6f80:	1d28      	adds	r0, r5, #4
   b6f82:	f7ff fef7 	bl	b6d74 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b6f86:	2800      	cmp	r0, #0
   b6f88:	bf14      	ite	ne
   b6f8a:	2000      	movne	r0, #0
   b6f8c:	2005      	moveq	r0, #5
}
   b6f8e:	b003      	add	sp, #12
   b6f90:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b6f92:	2002      	movs	r0, #2
   b6f94:	e7fb      	b.n	b6f8e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b6f96 <_ZN8RHRouter11deleteRouteEh>:
{
   b6f96:	b510      	push	{r4, lr}
   b6f98:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b6f9c:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b6f9e:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b6fa2:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b6fa6:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b6faa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b6fae:	4421      	add	r1, r4
   b6fb0:	4420      	add	r0, r4
   b6fb2:	f004 ff25 	bl	bbe00 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b6fb6:	2300      	movs	r3, #0
   b6fb8:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b6fbc:	bd10      	pop	{r4, pc}

000b6fbe <_ZN8RHRouter13deleteRouteToEh>:
{
   b6fbe:	b538      	push	{r3, r4, r5, lr}
   b6fc0:	460a      	mov	r2, r1
   b6fc2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b6fc4:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b6fc8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b6fcc:	b2d9      	uxtb	r1, r3
   b6fce:	5d65      	ldrb	r5, [r4, r5]
   b6fd0:	4295      	cmp	r5, r2
   b6fd2:	d103      	bne.n	b6fdc <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b6fd4:	f7ff ffdf 	bl	b6f96 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b6fd8:	2001      	movs	r0, #1
}
   b6fda:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b6fdc:	3301      	adds	r3, #1
   b6fde:	2b32      	cmp	r3, #50	; 0x32
   b6fe0:	d1f2      	bne.n	b6fc8 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b6fe2:	2000      	movs	r0, #0
   b6fe4:	e7f9      	b.n	b6fda <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b6fe6 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b6fe6:	2100      	movs	r1, #0
   b6fe8:	f7ff bfd5 	b.w	b6f96 <_ZN8RHRouter11deleteRouteEh>

000b6fec <_ZN8RHRouter10addRouteToEhhh>:
{
   b6fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6fee:	4616      	mov	r6, r2
   b6ff0:	461f      	mov	r7, r3
   b6ff2:	4604      	mov	r4, r0
   b6ff4:	460d      	mov	r5, r1
   b6ff6:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b6ff8:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b6ffc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7000:	5c11      	ldrb	r1, [r2, r0]
   b7002:	42a9      	cmp	r1, r5
   b7004:	d105      	bne.n	b7012 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b7006:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7008:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b700c:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7012:	3301      	adds	r3, #1
   b7014:	2b32      	cmp	r3, #50	; 0x32
   b7016:	d1f1      	bne.n	b6ffc <_ZN8RHRouter10addRouteToEhhh+0x10>
   b7018:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b701a:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b701e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7022:	5c11      	ldrb	r1, [r2, r0]
   b7024:	b919      	cbnz	r1, b702e <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b7026:	4420      	add	r0, r4
   b7028:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b702c:	e7ec      	b.n	b7008 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b702e:	3301      	adds	r3, #1
   b7030:	2b32      	cmp	r3, #50	; 0x32
   b7032:	d1f4      	bne.n	b701e <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b7034:	4620      	mov	r0, r4
   b7036:	f7ff ffd6 	bl	b6fe6 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b703a:	4620      	mov	r0, r4
   b703c:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b7040:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b7044:	b92a      	cbnz	r2, b7052 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b7046:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b704a:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b704e:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7052:	3003      	adds	r0, #3
   b7054:	4298      	cmp	r0, r3
   b7056:	d1f3      	bne.n	b7040 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b7058:	e7da      	b.n	b7010 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b705a <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b705a:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b705e:	2200      	movs	r2, #0
   b7060:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7064:	3003      	adds	r0, #3
   b7066:	4298      	cmp	r0, r3
   b7068:	d1fa      	bne.n	b7060 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b706a:	4770      	bx	lr

000b706c <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b706c:	b510      	push	{r4, lr}
   b706e:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b7070:	3004      	adds	r0, #4
   b7072:	f7ff fe53 	bl	b6d1c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b7076:	4b05      	ldr	r3, [pc, #20]	; (b708c <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b7078:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b707a:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b707e:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7080:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b7084:	f7ff ffe9 	bl	b705a <_ZN8RHRouter17clearRoutingTableEv>
}
   b7088:	4620      	mov	r0, r4
   b708a:	bd10      	pop	{r4, pc}
   b708c:	000bcec8 	.word	0x000bcec8

000b7090 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b7090:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7094:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7096:	6840      	ldr	r0, [r0, #4]
{
   b7098:	9101      	str	r1, [sp, #4]
   b709a:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b709c:	6803      	ldr	r3, [r0, #0]
{
   b709e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b70a2:	699b      	ldr	r3, [r3, #24]
{
   b70a4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b70a8:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b70aa:	4798      	blx	r3
   b70ac:	f106 0805 	add.w	r8, r6, #5
   b70b0:	4580      	cmp	r8, r0
   b70b2:	d81c      	bhi.n	b70ee <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b70b4:	4d10      	ldr	r5, [pc, #64]	; (b70f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b70b6:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b70b8:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b70bc:	2300      	movs	r3, #0
   b70be:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b70c0:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b70c4:	70eb      	strb	r3, [r5, #3]
   b70c6:	1c5a      	adds	r2, r3, #1
   b70c8:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b70cc:	1d68      	adds	r0, r5, #5
   b70ce:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b70d0:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b70d2:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b70d6:	f004 fe93 	bl	bbe00 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b70da:	6823      	ldr	r3, [r4, #0]
   b70dc:	685b      	ldr	r3, [r3, #4]
   b70de:	fa5f f288 	uxtb.w	r2, r8
   b70e2:	4629      	mov	r1, r5
   b70e4:	4620      	mov	r0, r4
}
   b70e6:	b002      	add	sp, #8
   b70e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b70ec:	4718      	bx	r3
}
   b70ee:	2001      	movs	r0, #1
   b70f0:	b002      	add	sp, #8
   b70f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b70f6:	bf00      	nop
   b70f8:	2003e4fe 	.word	0x2003e4fe

000b70fc <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b70fc:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b70fe:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7102:	9401      	str	r4, [sp, #4]
   b7104:	7a04      	ldrb	r4, [r0, #8]
   b7106:	9400      	str	r4, [sp, #0]
   b7108:	f7ff ffc2 	bl	b7090 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b710c:	b002      	add	sp, #8
   b710e:	bd10      	pop	{r4, pc}

000b7110 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7114:	b087      	sub	sp, #28
   b7116:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7118:	23ff      	movs	r3, #255	; 0xff
   b711a:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b711e:	f10d 0317 	add.w	r3, sp, #23
   b7122:	9302      	str	r3, [sp, #8]
   b7124:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b71f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b7128:	f10d 0316 	add.w	r3, sp, #22
   b712c:	9301      	str	r3, [sp, #4]
   b712e:	f10d 0315 	add.w	r3, sp, #21
   b7132:	9300      	str	r3, [sp, #0]
{  
   b7134:	4604      	mov	r4, r0
   b7136:	4688      	mov	r8, r1
   b7138:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b713a:	ab05      	add	r3, sp, #20
   b713c:	f10d 0213 	add.w	r2, sp, #19
   b7140:	4649      	mov	r1, r9
   b7142:	3004      	adds	r0, #4
{  
   b7144:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7148:	f7ff fe97 	bl	b6e7a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b714c:	4605      	mov	r5, r0
   b714e:	b908      	cbnz	r0, b7154 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b7150:	2500      	movs	r5, #0
   b7152:	e038      	b.n	b71c6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b7154:	6823      	ldr	r3, [r4, #0]
   b7156:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b715a:	681b      	ldr	r3, [r3, #0]
   b715c:	4649      	mov	r1, r9
   b715e:	4620      	mov	r0, r4
   b7160:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b7162:	f899 3000 	ldrb.w	r3, [r9]
   b7166:	7a22      	ldrb	r2, [r4, #8]
   b7168:	429a      	cmp	r2, r3
   b716a:	d001      	beq.n	b7170 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b716c:	2bff      	cmp	r3, #255	; 0xff
   b716e:	d12e      	bne.n	b71ce <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b7170:	b117      	cbz	r7, b7178 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b7172:	4b21      	ldr	r3, [pc, #132]	; (b71f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7174:	785b      	ldrb	r3, [r3, #1]
   b7176:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b7178:	f1bb 0f00 	cmp.w	fp, #0
   b717c:	d003      	beq.n	b7186 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b717e:	4b1e      	ldr	r3, [pc, #120]	; (b71f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7180:	781b      	ldrb	r3, [r3, #0]
   b7182:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b7186:	f1ba 0f00 	cmp.w	sl, #0
   b718a:	d003      	beq.n	b7194 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b718c:	4b1a      	ldr	r3, [pc, #104]	; (b71f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b718e:	78db      	ldrb	r3, [r3, #3]
   b7190:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b7194:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b7196:	b11b      	cbz	r3, b71a0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b7198:	4b17      	ldr	r3, [pc, #92]	; (b71f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b719a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b719c:	791b      	ldrb	r3, [r3, #4]
   b719e:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b71a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b71a2:	b11b      	cbz	r3, b71ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b71a4:	4b14      	ldr	r3, [pc, #80]	; (b71f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b71a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b71a8:	789b      	ldrb	r3, [r3, #2]
   b71aa:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b71ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b71b0:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b71b2:	4912      	ldr	r1, [pc, #72]	; (b71fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b71b4:	3b05      	subs	r3, #5
   b71b6:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b71b8:	429a      	cmp	r2, r3
		*len = msgLen;
   b71ba:	bf88      	it	hi
   b71bc:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b71be:	7832      	ldrb	r2, [r6, #0]
   b71c0:	4640      	mov	r0, r8
   b71c2:	f004 fe1d 	bl	bbe00 <memcpy>
}
   b71c6:	4628      	mov	r0, r5
   b71c8:	b007      	add	sp, #28
   b71ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b71ce:	f899 3002 	ldrb.w	r3, [r9, #2]
   b71d2:	1c5a      	adds	r2, r3, #1
   b71d4:	f889 2002 	strb.w	r2, [r9, #2]
   b71d8:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b71dc:	429a      	cmp	r2, r3
   b71de:	d9b7      	bls.n	b7150 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b71e0:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b71e4:	2b00      	cmp	r3, #0
   b71e6:	d0b3      	beq.n	b7150 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b71e8:	6823      	ldr	r3, [r4, #0]
   b71ea:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b71ee:	685b      	ldr	r3, [r3, #4]
   b71f0:	4649      	mov	r1, r9
   b71f2:	4620      	mov	r0, r4
   b71f4:	4798      	blx	r3
   b71f6:	e7ab      	b.n	b7150 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b71f8:	2003e4fe 	.word	0x2003e4fe
   b71fc:	2003e503 	.word	0x2003e503

000b7200 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7200:	b510      	push	{r4, lr}
   b7202:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7204:	6a00      	ldr	r0, [r0, #32]
   b7206:	6803      	ldr	r3, [r0, #0]
   b7208:	68db      	ldr	r3, [r3, #12]
   b720a:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b720c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7210:	28ff      	cmp	r0, #255	; 0xff
   b7212:	d002      	beq.n	b721a <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7214:	2101      	movs	r1, #1
   b7216:	f003 ffdb 	bl	bb1d0 <pinMode>

    deselectSlave();
   b721a:	6823      	ldr	r3, [r4, #0]
   b721c:	4620      	mov	r0, r4
   b721e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7220:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b7222:	2064      	movs	r0, #100	; 0x64
   b7224:	f000 ff84 	bl	b8130 <delay>
#endif
    
    return true;
}
   b7228:	2001      	movs	r0, #1
   b722a:	bd10      	pop	{r4, pc}

000b722c <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b722c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7230:	2100      	movs	r1, #0
   b7232:	f003 bfde 	b.w	bb1f2 <digitalWrite>

000b7236 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b7236:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b723a:	2101      	movs	r1, #1
   b723c:	f003 bfd9 	b.w	bb1f2 <digitalWrite>

000b7240 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b7240:	b570      	push	{r4, r5, r6, lr}
   b7242:	4604      	mov	r4, r0
   b7244:	460d      	mov	r5, r1
   b7246:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b7248:	f7ff fa50 	bl	b66ec <_ZN15RHGenericDriverC1Ev>
   b724c:	4b03      	ldr	r3, [pc, #12]	; (b725c <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b724e:	6023      	str	r3, [r4, #0]
   b7250:	6226      	str	r6, [r4, #32]
   b7252:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b7256:	4620      	mov	r0, r4
   b7258:	bd70      	pop	{r4, r5, r6, pc}
   b725a:	bf00      	nop
   b725c:	000bced8 	.word	0x000bced8

000b7260 <_ZN11RHSPIDriver7spiReadEh>:
{
   b7260:	b538      	push	{r3, r4, r5, lr}
   b7262:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7264:	6a00      	ldr	r0, [r0, #32]
   b7266:	6803      	ldr	r3, [r0, #0]
   b7268:	6a1b      	ldr	r3, [r3, #32]
{
   b726a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b726c:	4798      	blx	r3
    selectSlave();
   b726e:	6823      	ldr	r3, [r4, #0]
   b7270:	4620      	mov	r0, r4
   b7272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7274:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b7276:	6a20      	ldr	r0, [r4, #32]
   b7278:	6803      	ldr	r3, [r0, #0]
   b727a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b727e:	681b      	ldr	r3, [r3, #0]
   b7280:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7282:	6a20      	ldr	r0, [r4, #32]
   b7284:	6803      	ldr	r3, [r0, #0]
   b7286:	2100      	movs	r1, #0
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	4798      	blx	r3
    deselectSlave();
   b728c:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b728e:	4605      	mov	r5, r0
    deselectSlave();
   b7290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7292:	4620      	mov	r0, r4
   b7294:	4798      	blx	r3
    _spi.endTransaction();
   b7296:	6a20      	ldr	r0, [r4, #32]
   b7298:	6803      	ldr	r3, [r0, #0]
   b729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b729c:	4798      	blx	r3
}
   b729e:	4628      	mov	r0, r5
   b72a0:	bd38      	pop	{r3, r4, r5, pc}

000b72a2 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b72a2:	b570      	push	{r4, r5, r6, lr}
   b72a4:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b72a6:	6a00      	ldr	r0, [r0, #32]
   b72a8:	6803      	ldr	r3, [r0, #0]
   b72aa:	6a1b      	ldr	r3, [r3, #32]
{
   b72ac:	4616      	mov	r6, r2
   b72ae:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b72b0:	4798      	blx	r3
    selectSlave();
   b72b2:	6823      	ldr	r3, [r4, #0]
   b72b4:	4620      	mov	r0, r4
   b72b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b72b8:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b72ba:	6a20      	ldr	r0, [r4, #32]
   b72bc:	6803      	ldr	r3, [r0, #0]
   b72be:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b72c2:	681b      	ldr	r3, [r3, #0]
   b72c4:	4798      	blx	r3
   b72c6:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b72c8:	6a20      	ldr	r0, [r4, #32]
   b72ca:	6803      	ldr	r3, [r0, #0]
   b72cc:	4631      	mov	r1, r6
   b72ce:	681b      	ldr	r3, [r3, #0]
   b72d0:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b72d2:	2001      	movs	r0, #1
   b72d4:	f000 fbb0 	bl	b7a38 <HAL_Delay_Microseconds>
    deselectSlave();
   b72d8:	6823      	ldr	r3, [r4, #0]
   b72da:	4620      	mov	r0, r4
   b72dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b72de:	4798      	blx	r3
    _spi.endTransaction();
   b72e0:	6a20      	ldr	r0, [r4, #32]
   b72e2:	6803      	ldr	r3, [r0, #0]
   b72e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b72e6:	4798      	blx	r3
}
   b72e8:	4628      	mov	r0, r5
   b72ea:	bd70      	pop	{r4, r5, r6, pc}

000b72ec <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b72ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b72ee:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b72f0:	6a00      	ldr	r0, [r0, #32]
{
   b72f2:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b72f4:	6803      	ldr	r3, [r0, #0]
   b72f6:	6a1b      	ldr	r3, [r3, #32]
{
   b72f8:	460f      	mov	r7, r1
   b72fa:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b72fc:	4798      	blx	r3
    selectSlave();
   b72fe:	6823      	ldr	r3, [r4, #0]
   b7300:	4620      	mov	r0, r4
   b7302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7304:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b7306:	6a20      	ldr	r0, [r4, #32]
   b7308:	6803      	ldr	r3, [r0, #0]
   b730a:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b730e:	681b      	ldr	r3, [r3, #0]
   b7310:	4798      	blx	r3
   b7312:	442e      	add	r6, r5
   b7314:	4607      	mov	r7, r0
    while (len--)
   b7316:	42b5      	cmp	r5, r6
   b7318:	d007      	beq.n	b732a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b731a:	6a20      	ldr	r0, [r4, #32]
   b731c:	6803      	ldr	r3, [r0, #0]
   b731e:	2100      	movs	r1, #0
   b7320:	681b      	ldr	r3, [r3, #0]
   b7322:	4798      	blx	r3
   b7324:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b7328:	e7f5      	b.n	b7316 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b732a:	6823      	ldr	r3, [r4, #0]
   b732c:	4620      	mov	r0, r4
   b732e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7330:	4798      	blx	r3
    _spi.endTransaction();
   b7332:	6a20      	ldr	r0, [r4, #32]
   b7334:	6803      	ldr	r3, [r0, #0]
   b7336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7338:	4798      	blx	r3
}
   b733a:	4638      	mov	r0, r7
   b733c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b733e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b733e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7340:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7342:	6a00      	ldr	r0, [r0, #32]
{
   b7344:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7346:	6803      	ldr	r3, [r0, #0]
   b7348:	6a1b      	ldr	r3, [r3, #32]
{
   b734a:	460f      	mov	r7, r1
   b734c:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b734e:	4798      	blx	r3
    selectSlave();
   b7350:	6823      	ldr	r3, [r4, #0]
   b7352:	4620      	mov	r0, r4
   b7354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7356:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b7358:	6a20      	ldr	r0, [r4, #32]
   b735a:	6803      	ldr	r3, [r0, #0]
   b735c:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b7360:	681b      	ldr	r3, [r3, #0]
   b7362:	4798      	blx	r3
   b7364:	442e      	add	r6, r5
   b7366:	4607      	mov	r7, r0
    while (len--)
   b7368:	42b5      	cmp	r5, r6
   b736a:	d006      	beq.n	b737a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b736c:	6a20      	ldr	r0, [r4, #32]
   b736e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7372:	6803      	ldr	r3, [r0, #0]
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	4798      	blx	r3
    while (len--)
   b7378:	e7f6      	b.n	b7368 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b737a:	6823      	ldr	r3, [r4, #0]
   b737c:	4620      	mov	r0, r4
   b737e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7380:	4798      	blx	r3
    _spi.endTransaction();
   b7382:	6a20      	ldr	r0, [r4, #32]
   b7384:	6803      	ldr	r3, [r0, #0]
   b7386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7388:	4798      	blx	r3
}
   b738a:	4638      	mov	r0, r7
   b738c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b738e <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b738e:	6a00      	ldr	r0, [r0, #32]
   b7390:	6803      	ldr	r3, [r0, #0]
   b7392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7394:	4718      	bx	r3

000b7396 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b7396:	2001      	movs	r0, #1
   b7398:	4770      	bx	lr

000b739a <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b739a:	20fb      	movs	r0, #251	; 0xfb
   b739c:	4770      	bx	lr

000b739e <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b739e:	4770      	bx	lr

000b73a0 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b73a0:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b73a2:	7903      	ldrb	r3, [r0, #4]
   b73a4:	2b05      	cmp	r3, #5
{
   b73a6:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b73a8:	d010      	beq.n	b73cc <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b73aa:	6803      	ldr	r3, [r0, #0]
   b73ac:	2105      	movs	r1, #5
   b73ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b73b2:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b73b4:	2207      	movs	r2, #7
   b73b6:	2101      	movs	r1, #1
   b73b8:	4620      	mov	r0, r4
   b73ba:	f7ff ff72 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b73be:	2280      	movs	r2, #128	; 0x80
   b73c0:	2140      	movs	r1, #64	; 0x40
   b73c2:	4620      	mov	r0, r4
   b73c4:	f7ff ff6d 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b73c8:	2305      	movs	r3, #5
   b73ca:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b73cc:	7923      	ldrb	r3, [r4, #4]
   b73ce:	2b05      	cmp	r3, #5
   b73d0:	d0fc      	beq.n	b73cc <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b73d2:	7e20      	ldrb	r0, [r4, #24]
}
   b73d4:	bd10      	pop	{r4, pc}

000b73d6 <_ZN7RH_RF95D0Ev>:
   b73d6:	b510      	push	{r4, lr}
   b73d8:	f44f 7198 	mov.w	r1, #304	; 0x130
   b73dc:	4604      	mov	r4, r0
   b73de:	f7fc fe5e 	bl	b409e <_ZdlPvj>
   b73e2:	4620      	mov	r0, r4
   b73e4:	bd10      	pop	{r4, pc}

000b73e6 <_ZN7RH_RF955sleepEv>:
{
   b73e6:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b73e8:	7903      	ldrb	r3, [r0, #4]
   b73ea:	2b01      	cmp	r3, #1
{
   b73ec:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b73ee:	d00b      	beq.n	b7408 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b73f0:	6803      	ldr	r3, [r0, #0]
   b73f2:	2101      	movs	r1, #1
   b73f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b73f8:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b73fa:	2200      	movs	r2, #0
   b73fc:	2101      	movs	r1, #1
   b73fe:	4620      	mov	r0, r4
   b7400:	f7ff ff4f 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b7404:	2301      	movs	r3, #1
   b7406:	7123      	strb	r3, [r4, #4]
}
   b7408:	2001      	movs	r0, #1
   b740a:	bd10      	pop	{r4, pc}

000b740c <_ZN7RH_RF954recvEPhS0_>:
{
   b740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b740e:	6803      	ldr	r3, [r0, #0]
   b7410:	68db      	ldr	r3, [r3, #12]
{
   b7412:	4604      	mov	r4, r0
   b7414:	460f      	mov	r7, r1
   b7416:	4615      	mov	r5, r2
    if (!available())
   b7418:	4798      	blx	r3
   b741a:	4606      	mov	r6, r0
   b741c:	b1b0      	cbz	r0, b744c <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b741e:	b187      	cbz	r7, b7442 <_ZN7RH_RF954recvEPhS0_+0x36>
   b7420:	b17d      	cbz	r5, b7442 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b7422:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b7426:	782a      	ldrb	r2, [r5, #0]
   b7428:	3b03      	subs	r3, #3
   b742a:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b742c:	bfde      	ittt	le
   b742e:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b7432:	3b04      	suble	r3, #4
   b7434:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b7436:	782a      	ldrb	r2, [r5, #0]
   b7438:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b743c:	4638      	mov	r0, r7
   b743e:	f004 fcdf 	bl	bbe00 <memcpy>
    _rxBufValid = false;
   b7442:	2300      	movs	r3, #0
   b7444:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7448:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b744c:	4630      	mov	r0, r6
   b744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7450 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b7450:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b7452:	b538      	push	{r3, r4, r5, lr}
   b7454:	4605      	mov	r5, r0
   b7456:	460c      	mov	r4, r1
	if (power > 20)
   b7458:	dc14      	bgt.n	b7484 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b745a:	2901      	cmp	r1, #1
   b745c:	dd14      	ble.n	b7488 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b745e:	2911      	cmp	r1, #17
   b7460:	dd13      	ble.n	b748a <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b7462:	2207      	movs	r2, #7
   b7464:	214d      	movs	r1, #77	; 0x4d
   b7466:	4628      	mov	r0, r5
   b7468:	f7ff ff1b 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b746c:	3c03      	subs	r4, #3
   b746e:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7470:	1ea2      	subs	r2, r4, #2
   b7472:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b7476:	4628      	mov	r0, r5
   b7478:	b2d2      	uxtb	r2, r2
}
   b747a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b747e:	2109      	movs	r1, #9
   b7480:	f7ff bf0f 	b.w	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b7484:	2414      	movs	r4, #20
   b7486:	e7ec      	b.n	b7462 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b7488:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b748a:	2204      	movs	r2, #4
   b748c:	214d      	movs	r1, #77	; 0x4d
   b748e:	4628      	mov	r0, r5
   b7490:	f7ff ff07 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
   b7494:	e7ec      	b.n	b7470 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b7498 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b7498:	b538      	push	{r3, r4, r5, lr}
   b749a:	4604      	mov	r4, r0
   b749c:	4615      	mov	r5, r2
    _rxBufValid(0)
   b749e:	461a      	mov	r2, r3
   b74a0:	f7ff fece 	bl	b7240 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b74a4:	4b09      	ldr	r3, [pc, #36]	; (b74cc <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b74a6:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b74a8:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b74aa:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b74ac:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b74b0:	2201      	movs	r2, #1
    _rxBufValid(0)
   b74b2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b74b6:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b74ba:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b74be:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b74c2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b74c6:	4620      	mov	r0, r4
   b74c8:	bd38      	pop	{r3, r4, r5, pc}
   b74ca:	bf00      	nop
   b74cc:	000bcf70 	.word	0x000bcf70

000b74d0 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b74d0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b74d4:	2b03      	cmp	r3, #3
   b74d6:	d91b      	bls.n	b7510 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b74d8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b74dc:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b74de:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b74e2:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b74e4:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b74e8:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b74ea:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b74ee:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b74f0:	7983      	ldrb	r3, [r0, #6]
   b74f2:	b933      	cbnz	r3, b7502 <_ZN7RH_RF9513validateRxBufEv+0x32>
   b74f4:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b74f6:	7942      	ldrb	r2, [r0, #5]
   b74f8:	429a      	cmp	r2, r3
   b74fa:	d002      	beq.n	b7502 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b74fc:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b74fe:	2bff      	cmp	r3, #255	; 0xff
   b7500:	d106      	bne.n	b7510 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b7502:	8a83      	ldrh	r3, [r0, #20]
   b7504:	3301      	adds	r3, #1
   b7506:	b29b      	uxth	r3, r3
   b7508:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b750a:	2301      	movs	r3, #1
   b750c:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b7510:	4770      	bx	lr
   b7512:	0000      	movs	r0, r0
   b7514:	0000      	movs	r0, r0
	...

000b7518 <_ZN7RH_RF9512setFrequencyEf>:
{
   b7518:	b538      	push	{r3, r4, r5, lr}
   b751a:	4604      	mov	r4, r0
   b751c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7520:	ee10 0a10 	vmov	r0, s0
{
   b7524:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7528:	f004 f8c8 	bl	bb6bc <__aeabi_f2d>
   b752c:	a317      	add	r3, pc, #92	; (adr r3, b758c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b752e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7532:	f004 f91b 	bl	bb76c <__aeabi_dmul>
   b7536:	a317      	add	r3, pc, #92	; (adr r3, b7594 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b7538:	e9d3 2300 	ldrd	r2, r3, [r3]
   b753c:	f004 fa40 	bl	bb9c0 <__aeabi_ddiv>
   b7540:	f004 fbec 	bl	bbd1c <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7544:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7546:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7548:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b754c:	4620      	mov	r0, r4
   b754e:	f7ff fea8 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b7552:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b7556:	2107      	movs	r1, #7
   b7558:	4620      	mov	r0, r4
   b755a:	f7ff fea2 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b755e:	b2ea      	uxtb	r2, r5
   b7560:	2108      	movs	r1, #8
   b7562:	4620      	mov	r0, r4
   b7564:	f7ff fe9d 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b7568:	eddf 7a07 	vldr	s15, [pc, #28]	; b7588 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b756c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b7570:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b7574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7578:	bfac      	ite	ge
   b757a:	2301      	movge	r3, #1
   b757c:	2300      	movlt	r3, #0
}
   b757e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b7580:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b7584:	bd38      	pop	{r3, r4, r5, pc}
   b7586:	bf00      	nop
   b7588:	4442c000 	.word	0x4442c000
   b758c:	00000000 	.word	0x00000000
   b7590:	412e8480 	.word	0x412e8480
   b7594:	00000000 	.word	0x00000000
   b7598:	404e8480 	.word	0x404e8480

000b759c <_ZN7RH_RF9511setModeIdleEv>:
{
   b759c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b759e:	7903      	ldrb	r3, [r0, #4]
   b75a0:	2b02      	cmp	r3, #2
{
   b75a2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b75a4:	d00b      	beq.n	b75be <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b75a6:	6803      	ldr	r3, [r0, #0]
   b75a8:	2102      	movs	r1, #2
   b75aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b75ae:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b75b0:	2201      	movs	r2, #1
   b75b2:	4611      	mov	r1, r2
   b75b4:	4620      	mov	r0, r4
   b75b6:	f7ff fe74 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b75ba:	2302      	movs	r3, #2
   b75bc:	7123      	strb	r3, [r4, #4]
}
   b75be:	bd10      	pop	{r4, pc}

000b75c0 <_ZN7RH_RF9515handleInterruptEv>:
{
   b75c0:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b75c2:	2112      	movs	r1, #18
{
   b75c4:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b75c6:	f7ff fe4b 	bl	b7260 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b75ca:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b75cc:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b75ce:	4620      	mov	r0, r4
   b75d0:	f7ff fe46 	bl	b7260 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b75d4:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b75d6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b75d8:	2112      	movs	r1, #18
   b75da:	4620      	mov	r0, r4
   b75dc:	f7ff fe61 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b75e0:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b75e2:	2b04      	cmp	r3, #4
   b75e4:	d107      	bne.n	b75f6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b75e6:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b75ea:	d117      	bne.n	b761c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b75ec:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b75f0:	b10b      	cbz	r3, b75f6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b75f2:	0670      	lsls	r0, r6, #25
   b75f4:	d512      	bpl.n	b761c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b75f6:	7923      	ldrb	r3, [r4, #4]
   b75f8:	2b04      	cmp	r3, #4
   b75fa:	d101      	bne.n	b7600 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b75fc:	0669      	lsls	r1, r5, #25
   b75fe:	d422      	bmi.n	b7646 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b7600:	7923      	ldrb	r3, [r4, #4]
   b7602:	2b03      	cmp	r3, #3
   b7604:	d101      	bne.n	b760a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b7606:	072a      	lsls	r2, r5, #28
   b7608:	d468      	bmi.n	b76dc <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b760a:	7923      	ldrb	r3, [r4, #4]
   b760c:	2b05      	cmp	r3, #5
   b760e:	d10e      	bne.n	b762e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b7610:	076b      	lsls	r3, r5, #29
   b7612:	d50c      	bpl.n	b762e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b7614:	f005 0501 	and.w	r5, r5, #1
   b7618:	7625      	strb	r5, [r4, #24]
   b761a:	e063      	b.n	b76e4 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b761c:	8a63      	ldrh	r3, [r4, #18]
   b761e:	3301      	adds	r3, #1
   b7620:	b29b      	uxth	r3, r3
   b7622:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b7624:	2300      	movs	r3, #0
   b7626:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b762a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b762e:	22ff      	movs	r2, #255	; 0xff
   b7630:	2112      	movs	r1, #18
   b7632:	4620      	mov	r0, r4
   b7634:	f7ff fe35 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7638:	4620      	mov	r0, r4
   b763a:	22ff      	movs	r2, #255	; 0xff
}
   b763c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7640:	2112      	movs	r1, #18
   b7642:	f7ff be2e 	b.w	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7646:	2113      	movs	r1, #19
   b7648:	4620      	mov	r0, r4
   b764a:	f7ff fe09 	bl	b7260 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b764e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7650:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7652:	4620      	mov	r0, r4
   b7654:	f7ff fe04 	bl	b7260 <_ZN11RHSPIDriver7spiReadEh>
   b7658:	210d      	movs	r1, #13
   b765a:	4602      	mov	r2, r0
   b765c:	4620      	mov	r0, r4
   b765e:	f7ff fe20 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b7662:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b7666:	462b      	mov	r3, r5
   b7668:	2100      	movs	r1, #0
   b766a:	4620      	mov	r0, r4
   b766c:	f7ff fe3e 	bl	b72ec <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7670:	2119      	movs	r1, #25
	_bufLen = len;
   b7672:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7676:	4620      	mov	r0, r4
   b7678:	f7ff fdf2 	bl	b7260 <_ZN11RHSPIDriver7spiReadEh>
   b767c:	b240      	sxtb	r0, r0
   b767e:	2800      	cmp	r0, #0
   b7680:	bfb8      	it	lt
   b7682:	3003      	addlt	r0, #3
   b7684:	1080      	asrs	r0, r0, #2
   b7686:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b768a:	211a      	movs	r1, #26
   b768c:	4620      	mov	r0, r4
   b768e:	f7ff fde7 	bl	b7260 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b7692:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7696:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b7698:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b769a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b769c:	bfa9      	itett	ge
   b769e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b76a0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b76a2:	b21b      	sxthge	r3, r3
   b76a4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b76a6:	bfb2      	itee	lt
   b76a8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b76aa:	220f      	movge	r2, #15
   b76ac:	fb93 f3f2 	sdivge	r3, r3, r2
   b76b0:	b21b      	sxth	r3, r3
   b76b2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b76b4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b76b8:	b16b      	cbz	r3, b76d6 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b76ba:	8a23      	ldrh	r3, [r4, #16]
   b76bc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b76be:	b21b      	sxth	r3, r3
   b76c0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b76c2:	4620      	mov	r0, r4
   b76c4:	f7ff ff04 	bl	b74d0 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b76c8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b76cc:	2b00      	cmp	r3, #0
   b76ce:	d0ae      	beq.n	b762e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b76d0:	f7ff ff64 	bl	b759c <_ZN7RH_RF9511setModeIdleEv>
   b76d4:	e7ab      	b.n	b762e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b76d6:	8a23      	ldrh	r3, [r4, #16]
   b76d8:	3ba4      	subs	r3, #164	; 0xa4
   b76da:	e7f0      	b.n	b76be <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b76dc:	8ae3      	ldrh	r3, [r4, #22]
   b76de:	3301      	adds	r3, #1
   b76e0:	b29b      	uxth	r3, r3
   b76e2:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b76e4:	4620      	mov	r0, r4
   b76e6:	e7f3      	b.n	b76d0 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b76e8 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b76e8:	4b02      	ldr	r3, [pc, #8]	; (b76f4 <_ZN7RH_RF954isr0Ev+0xc>)
   b76ea:	6818      	ldr	r0, [r3, #0]
   b76ec:	b108      	cbz	r0, b76f2 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b76ee:	f7ff bf67 	b.w	b75c0 <_ZN7RH_RF9515handleInterruptEv>
}
   b76f2:	4770      	bx	lr
   b76f4:	2003e600 	.word	0x2003e600

000b76f8 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b76f8:	4b02      	ldr	r3, [pc, #8]	; (b7704 <_ZN7RH_RF954isr1Ev+0xc>)
   b76fa:	6858      	ldr	r0, [r3, #4]
   b76fc:	b108      	cbz	r0, b7702 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b76fe:	f7ff bf5f 	b.w	b75c0 <_ZN7RH_RF9515handleInterruptEv>
}
   b7702:	4770      	bx	lr
   b7704:	2003e600 	.word	0x2003e600

000b7708 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b7708:	4b02      	ldr	r3, [pc, #8]	; (b7714 <_ZN7RH_RF954isr2Ev+0xc>)
   b770a:	6898      	ldr	r0, [r3, #8]
   b770c:	b108      	cbz	r0, b7712 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b770e:	f7ff bf57 	b.w	b75c0 <_ZN7RH_RF9515handleInterruptEv>
}
   b7712:	4770      	bx	lr
   b7714:	2003e600 	.word	0x2003e600

000b7718 <_ZN7RH_RF959setModeRxEv>:
{
   b7718:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b771a:	7903      	ldrb	r3, [r0, #4]
   b771c:	2b04      	cmp	r3, #4
{
   b771e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b7720:	d010      	beq.n	b7744 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b7722:	6803      	ldr	r3, [r0, #0]
   b7724:	2104      	movs	r1, #4
   b7726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b772a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b772c:	2205      	movs	r2, #5
   b772e:	2101      	movs	r1, #1
   b7730:	4620      	mov	r0, r4
   b7732:	f7ff fdb6 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b7736:	2200      	movs	r2, #0
   b7738:	2140      	movs	r1, #64	; 0x40
   b773a:	4620      	mov	r0, r4
   b773c:	f7ff fdb1 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b7740:	2304      	movs	r3, #4
   b7742:	7123      	strb	r3, [r4, #4]
}
   b7744:	bd10      	pop	{r4, pc}

000b7746 <_ZN7RH_RF959availableEv>:
{
   b7746:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b7748:	7903      	ldrb	r3, [r0, #4]
   b774a:	2b03      	cmp	r3, #3
{
   b774c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b774e:	d005      	beq.n	b775c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b7750:	f7ff ffe2 	bl	b7718 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b7754:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b7758:	b2c0      	uxtb	r0, r0
}
   b775a:	bd10      	pop	{r4, pc}
	return false;
   b775c:	2000      	movs	r0, #0
   b775e:	e7fc      	b.n	b775a <_ZN7RH_RF959availableEv+0x14>

000b7760 <_ZN7RH_RF959setModeTxEv>:
{
   b7760:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b7762:	7903      	ldrb	r3, [r0, #4]
   b7764:	2b03      	cmp	r3, #3
{
   b7766:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b7768:	d010      	beq.n	b778c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b776a:	6803      	ldr	r3, [r0, #0]
   b776c:	2103      	movs	r1, #3
   b776e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7772:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b7774:	2203      	movs	r2, #3
   b7776:	2101      	movs	r1, #1
   b7778:	4620      	mov	r0, r4
   b777a:	f7ff fd92 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b777e:	2240      	movs	r2, #64	; 0x40
   b7780:	4611      	mov	r1, r2
   b7782:	4620      	mov	r0, r4
   b7784:	f7ff fd8d 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b7788:	2303      	movs	r3, #3
   b778a:	7123      	strb	r3, [r4, #4]
}
   b778c:	bd10      	pop	{r4, pc}

000b778e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b778e:	2afb      	cmp	r2, #251	; 0xfb
{
   b7790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7792:	4604      	mov	r4, r0
   b7794:	460f      	mov	r7, r1
   b7796:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7798:	d902      	bls.n	b77a0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b779a:	2600      	movs	r6, #0
}
   b779c:	4630      	mov	r0, r6
   b779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b77a0:	6803      	ldr	r3, [r0, #0]
   b77a2:	6a1b      	ldr	r3, [r3, #32]
   b77a4:	4798      	blx	r3
    setModeIdle();
   b77a6:	4620      	mov	r0, r4
   b77a8:	f7ff fef8 	bl	b759c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b77ac:	6823      	ldr	r3, [r4, #0]
   b77ae:	4620      	mov	r0, r4
   b77b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b77b2:	4798      	blx	r3
   b77b4:	4606      	mov	r6, r0
   b77b6:	2800      	cmp	r0, #0
   b77b8:	d0ef      	beq.n	b779a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b77ba:	2200      	movs	r2, #0
   b77bc:	210d      	movs	r1, #13
   b77be:	4620      	mov	r0, r4
   b77c0:	f7ff fd6f 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b77c4:	7ae2      	ldrb	r2, [r4, #11]
   b77c6:	2100      	movs	r1, #0
   b77c8:	4620      	mov	r0, r4
   b77ca:	f7ff fd6a 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b77ce:	7b22      	ldrb	r2, [r4, #12]
   b77d0:	2100      	movs	r1, #0
   b77d2:	4620      	mov	r0, r4
   b77d4:	f7ff fd65 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b77d8:	7b62      	ldrb	r2, [r4, #13]
   b77da:	2100      	movs	r1, #0
   b77dc:	4620      	mov	r0, r4
   b77de:	f7ff fd60 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b77e2:	7ba2      	ldrb	r2, [r4, #14]
   b77e4:	2100      	movs	r1, #0
   b77e6:	4620      	mov	r0, r4
   b77e8:	f7ff fd5b 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b77ec:	462b      	mov	r3, r5
   b77ee:	463a      	mov	r2, r7
   b77f0:	2100      	movs	r1, #0
   b77f2:	4620      	mov	r0, r4
   b77f4:	f7ff fda3 	bl	b733e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b77f8:	1d2a      	adds	r2, r5, #4
   b77fa:	b2d2      	uxtb	r2, r2
   b77fc:	2122      	movs	r1, #34	; 0x22
   b77fe:	4620      	mov	r0, r4
   b7800:	f7ff fd4f 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b7804:	4620      	mov	r0, r4
   b7806:	f7ff ffab 	bl	b7760 <_ZN7RH_RF959setModeTxEv>
    return true;
   b780a:	e7c7      	b.n	b779c <_ZN7RH_RF954sendEPKhh+0xe>

000b780c <_ZN7RH_RF9510setTxPowerEab>:
{
   b780c:	b510      	push	{r4, lr}
   b780e:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b7810:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b7814:	b172      	cbz	r2, b7834 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b7816:	f381 0204 	usat	r2, #4, r1
   b781a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b781e:	b2d2      	uxtb	r2, r2
   b7820:	2109      	movs	r1, #9
   b7822:	f7ff fd3e 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7826:	4620      	mov	r0, r4
   b7828:	2204      	movs	r2, #4
}
   b782a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b782e:	214d      	movs	r1, #77	; 0x4d
   b7830:	f7ff bd37 	b.w	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
}
   b7834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7838:	f7ff be0a 	b.w	b7450 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b783c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b783c:	b538      	push	{r3, r4, r5, lr}
   b783e:	460c      	mov	r4, r1
   b7840:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b7842:	780a      	ldrb	r2, [r1, #0]
   b7844:	211d      	movs	r1, #29
   b7846:	f7ff fd2c 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b784a:	7862      	ldrb	r2, [r4, #1]
   b784c:	211e      	movs	r1, #30
   b784e:	4628      	mov	r0, r5
   b7850:	f7ff fd27 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7854:	78a2      	ldrb	r2, [r4, #2]
   b7856:	4628      	mov	r0, r5
   b7858:	2126      	movs	r1, #38	; 0x26
}
   b785a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b785e:	f7ff bd20 	b.w	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b7864 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7864:	2905      	cmp	r1, #5
{
   b7866:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7868:	d80f      	bhi.n	b788a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b786a:	4b09      	ldr	r3, [pc, #36]	; (b7890 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b786c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b7870:	185c      	adds	r4, r3, r1
   b7872:	5a5a      	ldrh	r2, [r3, r1]
   b7874:	78a3      	ldrb	r3, [r4, #2]
   b7876:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b787a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b787c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b7880:	f7ff ffdc 	bl	b783c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b7884:	2001      	movs	r0, #1
}
   b7886:	b002      	add	sp, #8
   b7888:	bd10      	pop	{r4, pc}
        return false;
   b788a:	2000      	movs	r0, #0
   b788c:	e7fb      	b.n	b7886 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b788e:	bf00      	nop
   b7890:	000bcf58 	.word	0x000bcf58

000b7894 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b7894:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7896:	0a0a      	lsrs	r2, r1, #8
{
   b7898:	4605      	mov	r5, r0
   b789a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b789c:	2120      	movs	r1, #32
   b789e:	f7ff fd00 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b78a2:	b2e2      	uxtb	r2, r4
   b78a4:	4628      	mov	r0, r5
   b78a6:	2121      	movs	r1, #33	; 0x21
}
   b78a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b78ac:	f7ff bcf9 	b.w	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>

000b78b0 <_ZN7RH_RF954initEv>:
{
   b78b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b78b2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b78b4:	f7ff fca4 	bl	b7200 <_ZN11RHSPIDriver4initEv>
   b78b8:	4606      	mov	r6, r0
   b78ba:	b918      	cbnz	r0, b78c4 <_ZN7RH_RF954initEv+0x14>
	return false;
   b78bc:	2600      	movs	r6, #0
}
   b78be:	4630      	mov	r0, r6
   b78c0:	b002      	add	sp, #8
   b78c2:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b78c4:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b78c8:	2dff      	cmp	r5, #255	; 0xff
   b78ca:	d054      	beq.n	b7976 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b78cc:	4629      	mov	r1, r5
   b78ce:	4620      	mov	r0, r4
   b78d0:	f7ff fd5d 	bl	b738e <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b78d4:	2280      	movs	r2, #128	; 0x80
   b78d6:	2101      	movs	r1, #1
   b78d8:	4620      	mov	r0, r4
   b78da:	f7ff fce2 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b78de:	200a      	movs	r0, #10
   b78e0:	f000 fc26 	bl	b8130 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b78e4:	2101      	movs	r1, #1
   b78e6:	4620      	mov	r0, r4
   b78e8:	f7ff fcba 	bl	b7260 <_ZN11RHSPIDriver7spiReadEh>
   b78ec:	2880      	cmp	r0, #128	; 0x80
   b78ee:	d1e5      	bne.n	b78bc <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b78f0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b78f4:	28ff      	cmp	r0, #255	; 0xff
   b78f6:	d01c      	beq.n	b7932 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b78f8:	2100      	movs	r1, #0
   b78fa:	f003 fc69 	bl	bb1d0 <pinMode>
	if (_myInterruptIndex == 0xff)
   b78fe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b7902:	2bff      	cmp	r3, #255	; 0xff
   b7904:	d107      	bne.n	b7916 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b7906:	4a26      	ldr	r2, [pc, #152]	; (b79a0 <_ZN7RH_RF954initEv+0xf0>)
   b7908:	7813      	ldrb	r3, [r2, #0]
   b790a:	2b03      	cmp	r3, #3
   b790c:	d8d6      	bhi.n	b78bc <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b790e:	1c59      	adds	r1, r3, #1
   b7910:	7011      	strb	r1, [r2, #0]
   b7912:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b7916:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b791a:	4b22      	ldr	r3, [pc, #136]	; (b79a4 <_ZN7RH_RF954initEv+0xf4>)
   b791c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b7920:	bb62      	cbnz	r2, b797c <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b7922:	4921      	ldr	r1, [pc, #132]	; (b79a8 <_ZN7RH_RF954initEv+0xf8>)
   b7924:	9200      	str	r2, [sp, #0]
   b7926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b792a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b792c:	b2a8      	uxth	r0, r5
   b792e:	f001 f9c5 	bl	b8cbc <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b7932:	2200      	movs	r2, #0
   b7934:	210e      	movs	r1, #14
   b7936:	4620      	mov	r0, r4
   b7938:	f7ff fcb3 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b793c:	2200      	movs	r2, #0
   b793e:	210f      	movs	r1, #15
   b7940:	4620      	mov	r0, r4
   b7942:	f7ff fcae 	bl	b72a2 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b7946:	4620      	mov	r0, r4
   b7948:	f7ff fe28 	bl	b759c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b794c:	2100      	movs	r1, #0
   b794e:	4620      	mov	r0, r4
   b7950:	f7ff ff88 	bl	b7864 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b7954:	2108      	movs	r1, #8
   b7956:	4620      	mov	r0, r4
   b7958:	f7ff ff9c 	bl	b7894 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b795c:	ed9f 0a13 	vldr	s0, [pc, #76]	; b79ac <_ZN7RH_RF954initEv+0xfc>
   b7960:	4620      	mov	r0, r4
   b7962:	f7ff fdd9 	bl	b7518 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b7966:	2300      	movs	r3, #0
   b7968:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b796c:	210d      	movs	r1, #13
   b796e:	4620      	mov	r0, r4
   b7970:	f7ff fd6e 	bl	b7450 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b7974:	e7a3      	b.n	b78be <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b7976:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b797a:	e7ab      	b.n	b78d4 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b797c:	2a01      	cmp	r2, #1
   b797e:	f04f 0300 	mov.w	r3, #0
   b7982:	d104      	bne.n	b798e <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b7984:	9300      	str	r3, [sp, #0]
   b7986:	490a      	ldr	r1, [pc, #40]	; (b79b0 <_ZN7RH_RF954initEv+0x100>)
   b7988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b798c:	e7ce      	b.n	b792c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b798e:	2a02      	cmp	r2, #2
   b7990:	d194      	bne.n	b78bc <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7992:	9300      	str	r3, [sp, #0]
   b7994:	4907      	ldr	r1, [pc, #28]	; (b79b4 <_ZN7RH_RF954initEv+0x104>)
   b7996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b799a:	2201      	movs	r2, #1
   b799c:	e7c6      	b.n	b792c <_ZN7RH_RF954initEv+0x7c>
   b799e:	bf00      	nop
   b79a0:	2003e5fd 	.word	0x2003e5fd
   b79a4:	2003e600 	.word	0x2003e600
   b79a8:	000b76e9 	.word	0x000b76e9
   b79ac:	43d90000 	.word	0x43d90000
   b79b0:	000b76f9 	.word	0x000b76f9
   b79b4:	000b7709 	.word	0x000b7709

000b79b8 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b79b8:	b508      	push	{r3, lr}
   b79ba:	4b02      	ldr	r3, [pc, #8]	; (b79c4 <cellular_signal+0xc>)
   b79bc:	681b      	ldr	r3, [r3, #0]
   b79be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b79c0:	9301      	str	r3, [sp, #4]
   b79c2:	bd08      	pop	{r3, pc}
   b79c4:	00030274 	.word	0x00030274

000b79c8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b79c8:	b508      	push	{r3, lr}
   b79ca:	4b02      	ldr	r3, [pc, #8]	; (b79d4 <os_mutex_recursive_create+0xc>)
   b79cc:	681b      	ldr	r3, [r3, #0]
   b79ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b79d0:	9301      	str	r3, [sp, #4]
   b79d2:	bd08      	pop	{r3, pc}
   b79d4:	00030248 	.word	0x00030248

000b79d8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b79d8:	b508      	push	{r3, lr}
   b79da:	4b02      	ldr	r3, [pc, #8]	; (b79e4 <os_mutex_recursive_destroy+0xc>)
   b79dc:	681b      	ldr	r3, [r3, #0]
   b79de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b79e0:	9301      	str	r3, [sp, #4]
   b79e2:	bd08      	pop	{r3, pc}
   b79e4:	00030248 	.word	0x00030248

000b79e8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b79e8:	b508      	push	{r3, lr}
   b79ea:	4b02      	ldr	r3, [pc, #8]	; (b79f4 <os_mutex_recursive_lock+0xc>)
   b79ec:	681b      	ldr	r3, [r3, #0]
   b79ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b79f0:	9301      	str	r3, [sp, #4]
   b79f2:	bd08      	pop	{r3, pc}
   b79f4:	00030248 	.word	0x00030248

000b79f8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b79f8:	b508      	push	{r3, lr}
   b79fa:	4b02      	ldr	r3, [pc, #8]	; (b7a04 <os_mutex_recursive_unlock+0xc>)
   b79fc:	681b      	ldr	r3, [r3, #0]
   b79fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7a00:	9301      	str	r3, [sp, #4]
   b7a02:	bd08      	pop	{r3, pc}
   b7a04:	00030248 	.word	0x00030248

000b7a08 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b7a08:	b508      	push	{r3, lr}
   b7a0a:	4b02      	ldr	r3, [pc, #8]	; (b7a14 <HAL_Core_Runtime_Info+0xc>)
   b7a0c:	681b      	ldr	r3, [r3, #0]
   b7a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7a10:	9301      	str	r3, [sp, #4]
   b7a12:	bd08      	pop	{r3, pc}
   b7a14:	00030234 	.word	0x00030234

000b7a18 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b7a18:	b508      	push	{r3, lr}
   b7a1a:	4b02      	ldr	r3, [pc, #8]	; (b7a24 <HAL_Feature_Set+0xc>)
   b7a1c:	681b      	ldr	r3, [r3, #0]
   b7a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b7a20:	9301      	str	r3, [sp, #4]
   b7a22:	bd08      	pop	{r3, pc}
   b7a24:	00030234 	.word	0x00030234

000b7a28 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7a28:	b508      	push	{r3, lr}
   b7a2a:	4b02      	ldr	r3, [pc, #8]	; (b7a34 <HAL_RNG_GetRandomNumber+0xc>)
   b7a2c:	681b      	ldr	r3, [r3, #0]
   b7a2e:	685b      	ldr	r3, [r3, #4]
   b7a30:	9301      	str	r3, [sp, #4]
   b7a32:	bd08      	pop	{r3, pc}
   b7a34:	00030218 	.word	0x00030218

000b7a38 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7a38:	b508      	push	{r3, lr}
   b7a3a:	4b02      	ldr	r3, [pc, #8]	; (b7a44 <HAL_Delay_Microseconds+0xc>)
   b7a3c:	681b      	ldr	r3, [r3, #0]
   b7a3e:	68db      	ldr	r3, [r3, #12]
   b7a40:	9301      	str	r3, [sp, #4]
   b7a42:	bd08      	pop	{r3, pc}
   b7a44:	00030218 	.word	0x00030218

000b7a48 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7a48:	b508      	push	{r3, lr}
   b7a4a:	4b02      	ldr	r3, [pc, #8]	; (b7a54 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7a4c:	681b      	ldr	r3, [r3, #0]
   b7a4e:	695b      	ldr	r3, [r3, #20]
   b7a50:	9301      	str	r3, [sp, #4]
   b7a52:	bd08      	pop	{r3, pc}
   b7a54:	00030218 	.word	0x00030218

000b7a58 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b7a58:	b508      	push	{r3, lr}
   b7a5a:	4b02      	ldr	r3, [pc, #8]	; (b7a64 <hal_rtc_time_is_valid+0xc>)
   b7a5c:	681b      	ldr	r3, [r3, #0]
   b7a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7a60:	9301      	str	r3, [sp, #4]
   b7a62:	bd08      	pop	{r3, pc}
   b7a64:	00030218 	.word	0x00030218

000b7a68 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b7a68:	b508      	push	{r3, lr}
   b7a6a:	4b02      	ldr	r3, [pc, #8]	; (b7a74 <hal_rtc_get_time+0xc>)
   b7a6c:	681b      	ldr	r3, [r3, #0]
   b7a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b7a70:	9301      	str	r3, [sp, #4]
   b7a72:	bd08      	pop	{r3, pc}
   b7a74:	00030218 	.word	0x00030218

000b7a78 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b7a78:	b508      	push	{r3, lr}
   b7a7a:	4b02      	ldr	r3, [pc, #8]	; (b7a84 <hal_rtc_set_time+0xc>)
   b7a7c:	681b      	ldr	r3, [r3, #0]
   b7a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b7a80:	9301      	str	r3, [sp, #4]
   b7a82:	bd08      	pop	{r3, pc}
   b7a84:	00030218 	.word	0x00030218

000b7a88 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b7a88:	b508      	push	{r3, lr}
   b7a8a:	4b02      	ldr	r3, [pc, #8]	; (b7a94 <HAL_Pin_Map+0xc>)
   b7a8c:	681b      	ldr	r3, [r3, #0]
   b7a8e:	681b      	ldr	r3, [r3, #0]
   b7a90:	9301      	str	r3, [sp, #4]
   b7a92:	bd08      	pop	{r3, pc}
   b7a94:	0003022c 	.word	0x0003022c

000b7a98 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b7a98:	b508      	push	{r3, lr}
   b7a9a:	4b02      	ldr	r3, [pc, #8]	; (b7aa4 <HAL_Validate_Pin_Function+0xc>)
   b7a9c:	681b      	ldr	r3, [r3, #0]
   b7a9e:	685b      	ldr	r3, [r3, #4]
   b7aa0:	9301      	str	r3, [sp, #4]
   b7aa2:	bd08      	pop	{r3, pc}
   b7aa4:	0003022c 	.word	0x0003022c

000b7aa8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7aa8:	b508      	push	{r3, lr}
   b7aaa:	4b02      	ldr	r3, [pc, #8]	; (b7ab4 <HAL_Pin_Mode+0xc>)
   b7aac:	681b      	ldr	r3, [r3, #0]
   b7aae:	689b      	ldr	r3, [r3, #8]
   b7ab0:	9301      	str	r3, [sp, #4]
   b7ab2:	bd08      	pop	{r3, pc}
   b7ab4:	0003022c 	.word	0x0003022c

000b7ab8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7ab8:	b508      	push	{r3, lr}
   b7aba:	4b02      	ldr	r3, [pc, #8]	; (b7ac4 <HAL_Get_Pin_Mode+0xc>)
   b7abc:	681b      	ldr	r3, [r3, #0]
   b7abe:	68db      	ldr	r3, [r3, #12]
   b7ac0:	9301      	str	r3, [sp, #4]
   b7ac2:	bd08      	pop	{r3, pc}
   b7ac4:	0003022c 	.word	0x0003022c

000b7ac8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b7ac8:	b508      	push	{r3, lr}
   b7aca:	4b02      	ldr	r3, [pc, #8]	; (b7ad4 <HAL_GPIO_Write+0xc>)
   b7acc:	681b      	ldr	r3, [r3, #0]
   b7ace:	691b      	ldr	r3, [r3, #16]
   b7ad0:	9301      	str	r3, [sp, #4]
   b7ad2:	bd08      	pop	{r3, pc}
   b7ad4:	0003022c 	.word	0x0003022c

000b7ad8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b7ad8:	b508      	push	{r3, lr}
   b7ada:	4b02      	ldr	r3, [pc, #8]	; (b7ae4 <HAL_GPIO_Read+0xc>)
   b7adc:	681b      	ldr	r3, [r3, #0]
   b7ade:	695b      	ldr	r3, [r3, #20]
   b7ae0:	9301      	str	r3, [sp, #4]
   b7ae2:	bd08      	pop	{r3, pc}
   b7ae4:	0003022c 	.word	0x0003022c

000b7ae8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b7ae8:	b508      	push	{r3, lr}
   b7aea:	4b02      	ldr	r3, [pc, #8]	; (b7af4 <HAL_Interrupts_Attach+0xc>)
   b7aec:	681b      	ldr	r3, [r3, #0]
   b7aee:	699b      	ldr	r3, [r3, #24]
   b7af0:	9301      	str	r3, [sp, #4]
   b7af2:	bd08      	pop	{r3, pc}
   b7af4:	0003022c 	.word	0x0003022c

000b7af8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b7af8:	b508      	push	{r3, lr}
   b7afa:	4b02      	ldr	r3, [pc, #8]	; (b7b04 <HAL_Interrupts_Detach+0xc>)
   b7afc:	681b      	ldr	r3, [r3, #0]
   b7afe:	69db      	ldr	r3, [r3, #28]
   b7b00:	9301      	str	r3, [sp, #4]
   b7b02:	bd08      	pop	{r3, pc}
   b7b04:	0003022c 	.word	0x0003022c

000b7b08 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b7b08:	b508      	push	{r3, lr}
   b7b0a:	4b02      	ldr	r3, [pc, #8]	; (b7b14 <hal_adc_read+0xc>)
   b7b0c:	681b      	ldr	r3, [r3, #0]
   b7b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b10:	9301      	str	r3, [sp, #4]
   b7b12:	bd08      	pop	{r3, pc}
   b7b14:	0003022c 	.word	0x0003022c

000b7b18 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b7b18:	b508      	push	{r3, lr}
   b7b1a:	4b02      	ldr	r3, [pc, #8]	; (b7b24 <hal_i2c_begin+0xc>)
   b7b1c:	681b      	ldr	r3, [r3, #0]
   b7b1e:	68db      	ldr	r3, [r3, #12]
   b7b20:	9301      	str	r3, [sp, #4]
   b7b22:	bd08      	pop	{r3, pc}
   b7b24:	00030228 	.word	0x00030228

000b7b28 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b7b28:	b508      	push	{r3, lr}
   b7b2a:	4b02      	ldr	r3, [pc, #8]	; (b7b34 <hal_i2c_begin_transmission+0xc>)
   b7b2c:	681b      	ldr	r3, [r3, #0]
   b7b2e:	699b      	ldr	r3, [r3, #24]
   b7b30:	9301      	str	r3, [sp, #4]
   b7b32:	bd08      	pop	{r3, pc}
   b7b34:	00030228 	.word	0x00030228

000b7b38 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b7b38:	b508      	push	{r3, lr}
   b7b3a:	4b02      	ldr	r3, [pc, #8]	; (b7b44 <hal_i2c_end_transmission+0xc>)
   b7b3c:	681b      	ldr	r3, [r3, #0]
   b7b3e:	69db      	ldr	r3, [r3, #28]
   b7b40:	9301      	str	r3, [sp, #4]
   b7b42:	bd08      	pop	{r3, pc}
   b7b44:	00030228 	.word	0x00030228

000b7b48 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b7b48:	b508      	push	{r3, lr}
   b7b4a:	4b02      	ldr	r3, [pc, #8]	; (b7b54 <hal_i2c_write+0xc>)
   b7b4c:	681b      	ldr	r3, [r3, #0]
   b7b4e:	6a1b      	ldr	r3, [r3, #32]
   b7b50:	9301      	str	r3, [sp, #4]
   b7b52:	bd08      	pop	{r3, pc}
   b7b54:	00030228 	.word	0x00030228

000b7b58 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b7b58:	b508      	push	{r3, lr}
   b7b5a:	4b02      	ldr	r3, [pc, #8]	; (b7b64 <hal_i2c_available+0xc>)
   b7b5c:	681b      	ldr	r3, [r3, #0]
   b7b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b60:	9301      	str	r3, [sp, #4]
   b7b62:	bd08      	pop	{r3, pc}
   b7b64:	00030228 	.word	0x00030228

000b7b68 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7b68:	b508      	push	{r3, lr}
   b7b6a:	4b02      	ldr	r3, [pc, #8]	; (b7b74 <hal_i2c_read+0xc>)
   b7b6c:	681b      	ldr	r3, [r3, #0]
   b7b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7b70:	9301      	str	r3, [sp, #4]
   b7b72:	bd08      	pop	{r3, pc}
   b7b74:	00030228 	.word	0x00030228

000b7b78 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7b78:	b508      	push	{r3, lr}
   b7b7a:	4b02      	ldr	r3, [pc, #8]	; (b7b84 <hal_i2c_peek+0xc>)
   b7b7c:	681b      	ldr	r3, [r3, #0]
   b7b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7b80:	9301      	str	r3, [sp, #4]
   b7b82:	bd08      	pop	{r3, pc}
   b7b84:	00030228 	.word	0x00030228

000b7b88 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7b88:	b508      	push	{r3, lr}
   b7b8a:	4b02      	ldr	r3, [pc, #8]	; (b7b94 <hal_i2c_flush+0xc>)
   b7b8c:	681b      	ldr	r3, [r3, #0]
   b7b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7b90:	9301      	str	r3, [sp, #4]
   b7b92:	bd08      	pop	{r3, pc}
   b7b94:	00030228 	.word	0x00030228

000b7b98 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7b98:	b508      	push	{r3, lr}
   b7b9a:	4b02      	ldr	r3, [pc, #8]	; (b7ba4 <hal_i2c_is_enabled+0xc>)
   b7b9c:	681b      	ldr	r3, [r3, #0]
   b7b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7ba0:	9301      	str	r3, [sp, #4]
   b7ba2:	bd08      	pop	{r3, pc}
   b7ba4:	00030228 	.word	0x00030228

000b7ba8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7ba8:	b508      	push	{r3, lr}
   b7baa:	4b02      	ldr	r3, [pc, #8]	; (b7bb4 <hal_i2c_init+0xc>)
   b7bac:	681b      	ldr	r3, [r3, #0]
   b7bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7bb0:	9301      	str	r3, [sp, #4]
   b7bb2:	bd08      	pop	{r3, pc}
   b7bb4:	00030228 	.word	0x00030228

000b7bb8 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b7bb8:	b508      	push	{r3, lr}
   b7bba:	4b02      	ldr	r3, [pc, #8]	; (b7bc4 <hal_i2c_lock+0xc>)
   b7bbc:	681b      	ldr	r3, [r3, #0]
   b7bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b7bc0:	9301      	str	r3, [sp, #4]
   b7bc2:	bd08      	pop	{r3, pc}
   b7bc4:	00030228 	.word	0x00030228

000b7bc8 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b7bc8:	b508      	push	{r3, lr}
   b7bca:	4b02      	ldr	r3, [pc, #8]	; (b7bd4 <hal_i2c_unlock+0xc>)
   b7bcc:	681b      	ldr	r3, [r3, #0]
   b7bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7bd0:	9301      	str	r3, [sp, #4]
   b7bd2:	bd08      	pop	{r3, pc}
   b7bd4:	00030228 	.word	0x00030228

000b7bd8 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7bd8:	b508      	push	{r3, lr}
   b7bda:	4b02      	ldr	r3, [pc, #8]	; (b7be4 <hal_i2c_request_ex+0xc>)
   b7bdc:	681b      	ldr	r3, [r3, #0]
   b7bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7be0:	9301      	str	r3, [sp, #4]
   b7be2:	bd08      	pop	{r3, pc}
   b7be4:	00030228 	.word	0x00030228

000b7be8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7be8:	b508      	push	{r3, lr}
   b7bea:	4b02      	ldr	r3, [pc, #8]	; (b7bf4 <inet_inet_ntop+0xc>)
   b7bec:	681b      	ldr	r3, [r3, #0]
   b7bee:	695b      	ldr	r3, [r3, #20]
   b7bf0:	9301      	str	r3, [sp, #4]
   b7bf2:	bd08      	pop	{r3, pc}
   b7bf4:	00030264 	.word	0x00030264

000b7bf8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7bf8:	b508      	push	{r3, lr}
   b7bfa:	4b02      	ldr	r3, [pc, #8]	; (b7c04 <netdb_freeaddrinfo+0xc>)
   b7bfc:	681b      	ldr	r3, [r3, #0]
   b7bfe:	689b      	ldr	r3, [r3, #8]
   b7c00:	9301      	str	r3, [sp, #4]
   b7c02:	bd08      	pop	{r3, pc}
   b7c04:	00030268 	.word	0x00030268

000b7c08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7c08:	b508      	push	{r3, lr}
   b7c0a:	4b02      	ldr	r3, [pc, #8]	; (b7c14 <netdb_getaddrinfo+0xc>)
   b7c0c:	681b      	ldr	r3, [r3, #0]
   b7c0e:	68db      	ldr	r3, [r3, #12]
   b7c10:	9301      	str	r3, [sp, #4]
   b7c12:	bd08      	pop	{r3, pc}
   b7c14:	00030268 	.word	0x00030268

000b7c18 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7c18:	b508      	push	{r3, lr}
   b7c1a:	4b02      	ldr	r3, [pc, #8]	; (b7c24 <hal_spi_begin+0xc>)
   b7c1c:	681b      	ldr	r3, [r3, #0]
   b7c1e:	681b      	ldr	r3, [r3, #0]
   b7c20:	9301      	str	r3, [sp, #4]
   b7c22:	bd08      	pop	{r3, pc}
   b7c24:	00030230 	.word	0x00030230

000b7c28 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b7c28:	b508      	push	{r3, lr}
   b7c2a:	4b02      	ldr	r3, [pc, #8]	; (b7c34 <hal_spi_end+0xc>)
   b7c2c:	681b      	ldr	r3, [r3, #0]
   b7c2e:	685b      	ldr	r3, [r3, #4]
   b7c30:	9301      	str	r3, [sp, #4]
   b7c32:	bd08      	pop	{r3, pc}
   b7c34:	00030230 	.word	0x00030230

000b7c38 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b7c38:	b508      	push	{r3, lr}
   b7c3a:	4b02      	ldr	r3, [pc, #8]	; (b7c44 <hal_spi_transfer+0xc>)
   b7c3c:	681b      	ldr	r3, [r3, #0]
   b7c3e:	695b      	ldr	r3, [r3, #20]
   b7c40:	9301      	str	r3, [sp, #4]
   b7c42:	bd08      	pop	{r3, pc}
   b7c44:	00030230 	.word	0x00030230

000b7c48 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b7c48:	b508      	push	{r3, lr}
   b7c4a:	4b02      	ldr	r3, [pc, #8]	; (b7c54 <hal_spi_init+0xc>)
   b7c4c:	681b      	ldr	r3, [r3, #0]
   b7c4e:	69db      	ldr	r3, [r3, #28]
   b7c50:	9301      	str	r3, [sp, #4]
   b7c52:	bd08      	pop	{r3, pc}
   b7c54:	00030230 	.word	0x00030230

000b7c58 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b7c58:	b508      	push	{r3, lr}
   b7c5a:	4b02      	ldr	r3, [pc, #8]	; (b7c64 <hal_spi_is_enabled+0xc>)
   b7c5c:	681b      	ldr	r3, [r3, #0]
   b7c5e:	6a1b      	ldr	r3, [r3, #32]
   b7c60:	9301      	str	r3, [sp, #4]
   b7c62:	bd08      	pop	{r3, pc}
   b7c64:	00030230 	.word	0x00030230

000b7c68 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b7c68:	b508      	push	{r3, lr}
   b7c6a:	4b02      	ldr	r3, [pc, #8]	; (b7c74 <hal_spi_info+0xc>)
   b7c6c:	681b      	ldr	r3, [r3, #0]
   b7c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c70:	9301      	str	r3, [sp, #4]
   b7c72:	bd08      	pop	{r3, pc}
   b7c74:	00030230 	.word	0x00030230

000b7c78 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7c78:	b508      	push	{r3, lr}
   b7c7a:	4b02      	ldr	r3, [pc, #8]	; (b7c84 <hal_spi_set_settings+0xc>)
   b7c7c:	681b      	ldr	r3, [r3, #0]
   b7c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7c80:	9301      	str	r3, [sp, #4]
   b7c82:	bd08      	pop	{r3, pc}
   b7c84:	00030230 	.word	0x00030230

000b7c88 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7c88:	b508      	push	{r3, lr}
   b7c8a:	4b02      	ldr	r3, [pc, #8]	; (b7c94 <hal_spi_acquire+0xc>)
   b7c8c:	681b      	ldr	r3, [r3, #0]
   b7c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7c90:	9301      	str	r3, [sp, #4]
   b7c92:	bd08      	pop	{r3, pc}
   b7c94:	00030230 	.word	0x00030230

000b7c98 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7c98:	b508      	push	{r3, lr}
   b7c9a:	4b02      	ldr	r3, [pc, #8]	; (b7ca4 <hal_spi_release+0xc>)
   b7c9c:	681b      	ldr	r3, [r3, #0]
   b7c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7ca0:	9301      	str	r3, [sp, #4]
   b7ca2:	bd08      	pop	{r3, pc}
   b7ca4:	00030230 	.word	0x00030230

000b7ca8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b7ca8:	b508      	push	{r3, lr}
   b7caa:	4b02      	ldr	r3, [pc, #8]	; (b7cb4 <hal_usart_end+0xc>)
   b7cac:	681b      	ldr	r3, [r3, #0]
   b7cae:	689b      	ldr	r3, [r3, #8]
   b7cb0:	9301      	str	r3, [sp, #4]
   b7cb2:	bd08      	pop	{r3, pc}
   b7cb4:	0003023c 	.word	0x0003023c

000b7cb8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7cb8:	b508      	push	{r3, lr}
   b7cba:	4b02      	ldr	r3, [pc, #8]	; (b7cc4 <hal_usart_write+0xc>)
   b7cbc:	681b      	ldr	r3, [r3, #0]
   b7cbe:	68db      	ldr	r3, [r3, #12]
   b7cc0:	9301      	str	r3, [sp, #4]
   b7cc2:	bd08      	pop	{r3, pc}
   b7cc4:	0003023c 	.word	0x0003023c

000b7cc8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7cc8:	b508      	push	{r3, lr}
   b7cca:	4b02      	ldr	r3, [pc, #8]	; (b7cd4 <hal_usart_available+0xc>)
   b7ccc:	681b      	ldr	r3, [r3, #0]
   b7cce:	691b      	ldr	r3, [r3, #16]
   b7cd0:	9301      	str	r3, [sp, #4]
   b7cd2:	bd08      	pop	{r3, pc}
   b7cd4:	0003023c 	.word	0x0003023c

000b7cd8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7cd8:	b508      	push	{r3, lr}
   b7cda:	4b02      	ldr	r3, [pc, #8]	; (b7ce4 <hal_usart_read+0xc>)
   b7cdc:	681b      	ldr	r3, [r3, #0]
   b7cde:	695b      	ldr	r3, [r3, #20]
   b7ce0:	9301      	str	r3, [sp, #4]
   b7ce2:	bd08      	pop	{r3, pc}
   b7ce4:	0003023c 	.word	0x0003023c

000b7ce8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7ce8:	b508      	push	{r3, lr}
   b7cea:	4b02      	ldr	r3, [pc, #8]	; (b7cf4 <hal_usart_peek+0xc>)
   b7cec:	681b      	ldr	r3, [r3, #0]
   b7cee:	699b      	ldr	r3, [r3, #24]
   b7cf0:	9301      	str	r3, [sp, #4]
   b7cf2:	bd08      	pop	{r3, pc}
   b7cf4:	0003023c 	.word	0x0003023c

000b7cf8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7cf8:	b508      	push	{r3, lr}
   b7cfa:	4b02      	ldr	r3, [pc, #8]	; (b7d04 <hal_usart_flush+0xc>)
   b7cfc:	681b      	ldr	r3, [r3, #0]
   b7cfe:	69db      	ldr	r3, [r3, #28]
   b7d00:	9301      	str	r3, [sp, #4]
   b7d02:	bd08      	pop	{r3, pc}
   b7d04:	0003023c 	.word	0x0003023c

000b7d08 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7d08:	b508      	push	{r3, lr}
   b7d0a:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <hal_usart_is_enabled+0xc>)
   b7d0c:	681b      	ldr	r3, [r3, #0]
   b7d0e:	6a1b      	ldr	r3, [r3, #32]
   b7d10:	9301      	str	r3, [sp, #4]
   b7d12:	bd08      	pop	{r3, pc}
   b7d14:	0003023c 	.word	0x0003023c

000b7d18 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7d18:	b508      	push	{r3, lr}
   b7d1a:	4b02      	ldr	r3, [pc, #8]	; (b7d24 <hal_usart_available_data_for_write+0xc>)
   b7d1c:	681b      	ldr	r3, [r3, #0]
   b7d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7d20:	9301      	str	r3, [sp, #4]
   b7d22:	bd08      	pop	{r3, pc}
   b7d24:	0003023c 	.word	0x0003023c

000b7d28 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b7d28:	b508      	push	{r3, lr}
   b7d2a:	4b02      	ldr	r3, [pc, #8]	; (b7d34 <hal_usart_begin_config+0xc>)
   b7d2c:	681b      	ldr	r3, [r3, #0]
   b7d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7d30:	9301      	str	r3, [sp, #4]
   b7d32:	bd08      	pop	{r3, pc}
   b7d34:	0003023c 	.word	0x0003023c

000b7d38 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7d38:	b508      	push	{r3, lr}
   b7d3a:	4b02      	ldr	r3, [pc, #8]	; (b7d44 <hal_usart_init_ex+0xc>)
   b7d3c:	681b      	ldr	r3, [r3, #0]
   b7d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7d40:	9301      	str	r3, [sp, #4]
   b7d42:	bd08      	pop	{r3, pc}
   b7d44:	0003023c 	.word	0x0003023c

000b7d48 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7d48:	b508      	push	{r3, lr}
   b7d4a:	4b02      	ldr	r3, [pc, #8]	; (b7d54 <HAL_USB_USART_Init+0xc>)
   b7d4c:	681b      	ldr	r3, [r3, #0]
   b7d4e:	681b      	ldr	r3, [r3, #0]
   b7d50:	9301      	str	r3, [sp, #4]
   b7d52:	bd08      	pop	{r3, pc}
   b7d54:	0003024c 	.word	0x0003024c

000b7d58 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7d58:	b508      	push	{r3, lr}
   b7d5a:	4b02      	ldr	r3, [pc, #8]	; (b7d64 <HAL_USB_USART_Begin+0xc>)
   b7d5c:	681b      	ldr	r3, [r3, #0]
   b7d5e:	685b      	ldr	r3, [r3, #4]
   b7d60:	9301      	str	r3, [sp, #4]
   b7d62:	bd08      	pop	{r3, pc}
   b7d64:	0003024c 	.word	0x0003024c

000b7d68 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b7d68:	b508      	push	{r3, lr}
   b7d6a:	4b02      	ldr	r3, [pc, #8]	; (b7d74 <HAL_USB_USART_End+0xc>)
   b7d6c:	681b      	ldr	r3, [r3, #0]
   b7d6e:	689b      	ldr	r3, [r3, #8]
   b7d70:	9301      	str	r3, [sp, #4]
   b7d72:	bd08      	pop	{r3, pc}
   b7d74:	0003024c 	.word	0x0003024c

000b7d78 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b7d78:	b508      	push	{r3, lr}
   b7d7a:	4b02      	ldr	r3, [pc, #8]	; (b7d84 <HAL_USB_USART_Available_Data+0xc>)
   b7d7c:	681b      	ldr	r3, [r3, #0]
   b7d7e:	691b      	ldr	r3, [r3, #16]
   b7d80:	9301      	str	r3, [sp, #4]
   b7d82:	bd08      	pop	{r3, pc}
   b7d84:	0003024c 	.word	0x0003024c

000b7d88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b7d88:	b508      	push	{r3, lr}
   b7d8a:	4b02      	ldr	r3, [pc, #8]	; (b7d94 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7d8c:	681b      	ldr	r3, [r3, #0]
   b7d8e:	695b      	ldr	r3, [r3, #20]
   b7d90:	9301      	str	r3, [sp, #4]
   b7d92:	bd08      	pop	{r3, pc}
   b7d94:	0003024c 	.word	0x0003024c

000b7d98 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7d98:	b508      	push	{r3, lr}
   b7d9a:	4b02      	ldr	r3, [pc, #8]	; (b7da4 <HAL_USB_USART_Receive_Data+0xc>)
   b7d9c:	681b      	ldr	r3, [r3, #0]
   b7d9e:	699b      	ldr	r3, [r3, #24]
   b7da0:	9301      	str	r3, [sp, #4]
   b7da2:	bd08      	pop	{r3, pc}
   b7da4:	0003024c 	.word	0x0003024c

000b7da8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7da8:	b508      	push	{r3, lr}
   b7daa:	4b02      	ldr	r3, [pc, #8]	; (b7db4 <HAL_USB_USART_Send_Data+0xc>)
   b7dac:	681b      	ldr	r3, [r3, #0]
   b7dae:	69db      	ldr	r3, [r3, #28]
   b7db0:	9301      	str	r3, [sp, #4]
   b7db2:	bd08      	pop	{r3, pc}
   b7db4:	0003024c 	.word	0x0003024c

000b7db8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7db8:	b508      	push	{r3, lr}
   b7dba:	4b02      	ldr	r3, [pc, #8]	; (b7dc4 <HAL_USB_USART_Flush_Data+0xc>)
   b7dbc:	681b      	ldr	r3, [r3, #0]
   b7dbe:	6a1b      	ldr	r3, [r3, #32]
   b7dc0:	9301      	str	r3, [sp, #4]
   b7dc2:	bd08      	pop	{r3, pc}
   b7dc4:	0003024c 	.word	0x0003024c

000b7dc8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b7dc8:	b508      	push	{r3, lr}
   b7dca:	4b02      	ldr	r3, [pc, #8]	; (b7dd4 <panic_+0xc>)
   b7dcc:	681b      	ldr	r3, [r3, #0]
   b7dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7dd0:	9301      	str	r3, [sp, #4]
   b7dd2:	bd08      	pop	{r3, pc}
   b7dd4:	00030260 	.word	0x00030260

000b7dd8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7dd8:	b508      	push	{r3, lr}
   b7dda:	4b02      	ldr	r3, [pc, #8]	; (b7de4 <log_message+0xc>)
   b7ddc:	681b      	ldr	r3, [r3, #0]
   b7dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7de0:	9301      	str	r3, [sp, #4]
   b7de2:	bd08      	pop	{r3, pc}
   b7de4:	00030260 	.word	0x00030260

000b7de8 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7de8:	b508      	push	{r3, lr}
   b7dea:	4b02      	ldr	r3, [pc, #8]	; (b7df4 <log_message_v+0xc>)
   b7dec:	681b      	ldr	r3, [r3, #0]
   b7dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7df0:	9301      	str	r3, [sp, #4]
   b7df2:	bd08      	pop	{r3, pc}
   b7df4:	00030260 	.word	0x00030260

000b7df8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b7df8:	b508      	push	{r3, lr}
   b7dfa:	4b02      	ldr	r3, [pc, #8]	; (b7e04 <log_level_name+0xc>)
   b7dfc:	681b      	ldr	r3, [r3, #0]
   b7dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7e00:	9301      	str	r3, [sp, #4]
   b7e02:	bd08      	pop	{r3, pc}
   b7e04:	00030260 	.word	0x00030260

000b7e08 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b7e08:	b508      	push	{r3, lr}
   b7e0a:	4b02      	ldr	r3, [pc, #8]	; (b7e14 <log_set_callbacks+0xc>)
   b7e0c:	681b      	ldr	r3, [r3, #0]
   b7e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7e10:	9301      	str	r3, [sp, #4]
   b7e12:	bd08      	pop	{r3, pc}
   b7e14:	00030260 	.word	0x00030260

000b7e18 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b7e18:	b508      	push	{r3, lr}
   b7e1a:	4b03      	ldr	r3, [pc, #12]	; (b7e28 <diag_get_source+0x10>)
   b7e1c:	681b      	ldr	r3, [r3, #0]
   b7e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b7e22:	9301      	str	r3, [sp, #4]
   b7e24:	bd08      	pop	{r3, pc}
   b7e26:	0000      	.short	0x0000
   b7e28:	00030260 	.word	0x00030260

000b7e2c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b7e2c:	b508      	push	{r3, lr}
   b7e2e:	4b02      	ldr	r3, [pc, #8]	; (b7e38 <system_mode+0xc>)
   b7e30:	681b      	ldr	r3, [r3, #0]
   b7e32:	681b      	ldr	r3, [r3, #0]
   b7e34:	9301      	str	r3, [sp, #4]
   b7e36:	bd08      	pop	{r3, pc}
   b7e38:	00030220 	.word	0x00030220

000b7e3c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7e3c:	b508      	push	{r3, lr}
   b7e3e:	4b02      	ldr	r3, [pc, #8]	; (b7e48 <set_system_mode+0xc>)
   b7e40:	681b      	ldr	r3, [r3, #0]
   b7e42:	685b      	ldr	r3, [r3, #4]
   b7e44:	9301      	str	r3, [sp, #4]
   b7e46:	bd08      	pop	{r3, pc}
   b7e48:	00030220 	.word	0x00030220

000b7e4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7e4c:	b508      	push	{r3, lr}
   b7e4e:	4b02      	ldr	r3, [pc, #8]	; (b7e58 <system_delay_ms+0xc>)
   b7e50:	681b      	ldr	r3, [r3, #0]
   b7e52:	695b      	ldr	r3, [r3, #20]
   b7e54:	9301      	str	r3, [sp, #4]
   b7e56:	bd08      	pop	{r3, pc}
   b7e58:	00030220 	.word	0x00030220

000b7e5c <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b7e5c:	b508      	push	{r3, lr}
   b7e5e:	4b02      	ldr	r3, [pc, #8]	; (b7e68 <system_subscribe_event+0xc>)
   b7e60:	681b      	ldr	r3, [r3, #0]
   b7e62:	6a1b      	ldr	r3, [r3, #32]
   b7e64:	9301      	str	r3, [sp, #4]
   b7e66:	bd08      	pop	{r3, pc}
   b7e68:	00030220 	.word	0x00030220

000b7e6c <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7e6c:	b508      	push	{r3, lr}
   b7e6e:	4b02      	ldr	r3, [pc, #8]	; (b7e78 <system_thread_set_state+0xc>)
   b7e70:	681b      	ldr	r3, [r3, #0]
   b7e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e74:	9301      	str	r3, [sp, #4]
   b7e76:	bd08      	pop	{r3, pc}
   b7e78:	00030220 	.word	0x00030220

000b7e7c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b7e7c:	b508      	push	{r3, lr}
   b7e7e:	4b02      	ldr	r3, [pc, #8]	; (b7e88 <application_thread_current+0xc>)
   b7e80:	681b      	ldr	r3, [r3, #0]
   b7e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7e84:	9301      	str	r3, [sp, #4]
   b7e86:	bd08      	pop	{r3, pc}
   b7e88:	00030220 	.word	0x00030220

000b7e8c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b7e8c:	b508      	push	{r3, lr}
   b7e8e:	4b02      	ldr	r3, [pc, #8]	; (b7e98 <application_thread_invoke+0xc>)
   b7e90:	681b      	ldr	r3, [r3, #0]
   b7e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7e94:	9301      	str	r3, [sp, #4]
   b7e96:	bd08      	pop	{r3, pc}
   b7e98:	00030220 	.word	0x00030220

000b7e9c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b7e9c:	b508      	push	{r3, lr}
   b7e9e:	4b02      	ldr	r3, [pc, #8]	; (b7ea8 <system_thread_get_state+0xc>)
   b7ea0:	681b      	ldr	r3, [r3, #0]
   b7ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b7ea4:	9301      	str	r3, [sp, #4]
   b7ea6:	bd08      	pop	{r3, pc}
   b7ea8:	00030220 	.word	0x00030220

000b7eac <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b7eac:	b508      	push	{r3, lr}
   b7eae:	4b02      	ldr	r3, [pc, #8]	; (b7eb8 <system_notify_time_changed+0xc>)
   b7eb0:	681b      	ldr	r3, [r3, #0]
   b7eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b7eb4:	9301      	str	r3, [sp, #4]
   b7eb6:	bd08      	pop	{r3, pc}
   b7eb8:	00030220 	.word	0x00030220

000b7ebc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7ebc:	b508      	push	{r3, lr}
   b7ebe:	4b03      	ldr	r3, [pc, #12]	; (b7ecc <system_ctrl_set_app_request_handler+0x10>)
   b7ec0:	681b      	ldr	r3, [r3, #0]
   b7ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7ec6:	9301      	str	r3, [sp, #4]
   b7ec8:	bd08      	pop	{r3, pc}
   b7eca:	0000      	.short	0x0000
   b7ecc:	00030220 	.word	0x00030220

000b7ed0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7ed0:	b508      	push	{r3, lr}
   b7ed2:	4b03      	ldr	r3, [pc, #12]	; (b7ee0 <system_ctrl_set_result+0x10>)
   b7ed4:	681b      	ldr	r3, [r3, #0]
   b7ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7eda:	9301      	str	r3, [sp, #4]
   b7edc:	bd08      	pop	{r3, pc}
   b7ede:	0000      	.short	0x0000
   b7ee0:	00030220 	.word	0x00030220

000b7ee4 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b7ee4:	b508      	push	{r3, lr}
   b7ee6:	4b03      	ldr	r3, [pc, #12]	; (b7ef4 <system_power_management_set_config+0x10>)
   b7ee8:	681b      	ldr	r3, [r3, #0]
   b7eea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b7eee:	9301      	str	r3, [sp, #4]
   b7ef0:	bd08      	pop	{r3, pc}
   b7ef2:	0000      	.short	0x0000
   b7ef4:	00030220 	.word	0x00030220

000b7ef8 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b7ef8:	b508      	push	{r3, lr}
   b7efa:	4b03      	ldr	r3, [pc, #12]	; (b7f08 <system_sleep_ext+0x10>)
   b7efc:	681b      	ldr	r3, [r3, #0]
   b7efe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b7f02:	9301      	str	r3, [sp, #4]
   b7f04:	bd08      	pop	{r3, pc}
   b7f06:	0000      	.short	0x0000
   b7f08:	00030220 	.word	0x00030220

000b7f0c <system_power_management_get_config>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX1 + 2, system, system_power_management_get_config, int(hal_power_config*, void*))
   b7f0c:	b508      	push	{r3, lr}
   b7f0e:	4b03      	ldr	r3, [pc, #12]	; (b7f1c <system_power_management_get_config+0x10>)
   b7f10:	681b      	ldr	r3, [r3, #0]
   b7f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b7f16:	9301      	str	r3, [sp, #4]
   b7f18:	bd08      	pop	{r3, pc}
   b7f1a:	0000      	.short	0x0000
   b7f1c:	00030220 	.word	0x00030220

000b7f20 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b7f20:	b508      	push	{r3, lr}
   b7f22:	4b02      	ldr	r3, [pc, #8]	; (b7f2c <spark_process+0xc>)
   b7f24:	681b      	ldr	r3, [r3, #0]
   b7f26:	689b      	ldr	r3, [r3, #8]
   b7f28:	9301      	str	r3, [sp, #4]
   b7f2a:	bd08      	pop	{r3, pc}
   b7f2c:	00030244 	.word	0x00030244

000b7f30 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7f30:	b508      	push	{r3, lr}
   b7f32:	4b02      	ldr	r3, [pc, #8]	; (b7f3c <spark_cloud_flag_connected+0xc>)
   b7f34:	681b      	ldr	r3, [r3, #0]
   b7f36:	695b      	ldr	r3, [r3, #20]
   b7f38:	9301      	str	r3, [sp, #4]
   b7f3a:	bd08      	pop	{r3, pc}
   b7f3c:	00030244 	.word	0x00030244

000b7f40 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7f40:	b508      	push	{r3, lr}
   b7f42:	4b02      	ldr	r3, [pc, #8]	; (b7f4c <spark_send_event+0xc>)
   b7f44:	681b      	ldr	r3, [r3, #0]
   b7f46:	6a1b      	ldr	r3, [r3, #32]
   b7f48:	9301      	str	r3, [sp, #4]
   b7f4a:	bd08      	pop	{r3, pc}
   b7f4c:	00030244 	.word	0x00030244

000b7f50 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7f50:	b508      	push	{r3, lr}
   b7f52:	4b02      	ldr	r3, [pc, #8]	; (b7f5c <spark_sync_time_pending+0xc>)
   b7f54:	681b      	ldr	r3, [r3, #0]
   b7f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7f58:	9301      	str	r3, [sp, #4]
   b7f5a:	bd08      	pop	{r3, pc}
   b7f5c:	00030244 	.word	0x00030244

000b7f60 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b7f60:	b508      	push	{r3, lr}
   b7f62:	4b02      	ldr	r3, [pc, #8]	; (b7f6c <spark_sync_time_last+0xc>)
   b7f64:	681b      	ldr	r3, [r3, #0]
   b7f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7f68:	9301      	str	r3, [sp, #4]
   b7f6a:	bd08      	pop	{r3, pc}
   b7f6c:	00030244 	.word	0x00030244

000b7f70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7f70:	b508      	push	{r3, lr}
   b7f72:	4b02      	ldr	r3, [pc, #8]	; (b7f7c <spark_set_random_seed_from_cloud_handler+0xc>)
   b7f74:	681b      	ldr	r3, [r3, #0]
   b7f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7f78:	9301      	str	r3, [sp, #4]
   b7f7a:	bd08      	pop	{r3, pc}
   b7f7c:	00030244 	.word	0x00030244

000b7f80 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7f80:	b508      	push	{r3, lr}
   b7f82:	4b02      	ldr	r3, [pc, #8]	; (b7f8c <network_connect+0xc>)
   b7f84:	681b      	ldr	r3, [r3, #0]
   b7f86:	685b      	ldr	r3, [r3, #4]
   b7f88:	9301      	str	r3, [sp, #4]
   b7f8a:	bd08      	pop	{r3, pc}
   b7f8c:	00030240 	.word	0x00030240

000b7f90 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7f90:	b508      	push	{r3, lr}
   b7f92:	4b02      	ldr	r3, [pc, #8]	; (b7f9c <network_connecting+0xc>)
   b7f94:	681b      	ldr	r3, [r3, #0]
   b7f96:	689b      	ldr	r3, [r3, #8]
   b7f98:	9301      	str	r3, [sp, #4]
   b7f9a:	bd08      	pop	{r3, pc}
   b7f9c:	00030240 	.word	0x00030240

000b7fa0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7fa0:	b508      	push	{r3, lr}
   b7fa2:	4b02      	ldr	r3, [pc, #8]	; (b7fac <network_disconnect+0xc>)
   b7fa4:	681b      	ldr	r3, [r3, #0]
   b7fa6:	68db      	ldr	r3, [r3, #12]
   b7fa8:	9301      	str	r3, [sp, #4]
   b7faa:	bd08      	pop	{r3, pc}
   b7fac:	00030240 	.word	0x00030240

000b7fb0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7fb0:	b508      	push	{r3, lr}
   b7fb2:	4b02      	ldr	r3, [pc, #8]	; (b7fbc <network_ready+0xc>)
   b7fb4:	681b      	ldr	r3, [r3, #0]
   b7fb6:	691b      	ldr	r3, [r3, #16]
   b7fb8:	9301      	str	r3, [sp, #4]
   b7fba:	bd08      	pop	{r3, pc}
   b7fbc:	00030240 	.word	0x00030240

000b7fc0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7fc0:	b508      	push	{r3, lr}
   b7fc2:	4b02      	ldr	r3, [pc, #8]	; (b7fcc <network_on+0xc>)
   b7fc4:	681b      	ldr	r3, [r3, #0]
   b7fc6:	695b      	ldr	r3, [r3, #20]
   b7fc8:	9301      	str	r3, [sp, #4]
   b7fca:	bd08      	pop	{r3, pc}
   b7fcc:	00030240 	.word	0x00030240

000b7fd0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7fd0:	b508      	push	{r3, lr}
   b7fd2:	4b02      	ldr	r3, [pc, #8]	; (b7fdc <network_off+0xc>)
   b7fd4:	681b      	ldr	r3, [r3, #0]
   b7fd6:	699b      	ldr	r3, [r3, #24]
   b7fd8:	9301      	str	r3, [sp, #4]
   b7fda:	bd08      	pop	{r3, pc}
   b7fdc:	00030240 	.word	0x00030240

000b7fe0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7fe0:	b508      	push	{r3, lr}
   b7fe2:	4b02      	ldr	r3, [pc, #8]	; (b7fec <network_listen+0xc>)
   b7fe4:	681b      	ldr	r3, [r3, #0]
   b7fe6:	69db      	ldr	r3, [r3, #28]
   b7fe8:	9301      	str	r3, [sp, #4]
   b7fea:	bd08      	pop	{r3, pc}
   b7fec:	00030240 	.word	0x00030240

000b7ff0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7ff0:	b508      	push	{r3, lr}
   b7ff2:	4b02      	ldr	r3, [pc, #8]	; (b7ffc <network_listening+0xc>)
   b7ff4:	681b      	ldr	r3, [r3, #0]
   b7ff6:	6a1b      	ldr	r3, [r3, #32]
   b7ff8:	9301      	str	r3, [sp, #4]
   b7ffa:	bd08      	pop	{r3, pc}
   b7ffc:	00030240 	.word	0x00030240

000b8000 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8000:	b508      	push	{r3, lr}
   b8002:	4b02      	ldr	r3, [pc, #8]	; (b800c <network_set_listen_timeout+0xc>)
   b8004:	681b      	ldr	r3, [r3, #0]
   b8006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8008:	9301      	str	r3, [sp, #4]
   b800a:	bd08      	pop	{r3, pc}
   b800c:	00030240 	.word	0x00030240

000b8010 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8010:	b508      	push	{r3, lr}
   b8012:	4b02      	ldr	r3, [pc, #8]	; (b801c <network_get_listen_timeout+0xc>)
   b8014:	681b      	ldr	r3, [r3, #0]
   b8016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8018:	9301      	str	r3, [sp, #4]
   b801a:	bd08      	pop	{r3, pc}
   b801c:	00030240 	.word	0x00030240

000b8020 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8020:	b508      	push	{r3, lr}
   b8022:	4b02      	ldr	r3, [pc, #8]	; (b802c <network_is_on+0xc>)
   b8024:	681b      	ldr	r3, [r3, #0]
   b8026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8028:	9301      	str	r3, [sp, #4]
   b802a:	bd08      	pop	{r3, pc}
   b802c:	00030240 	.word	0x00030240

000b8030 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8030:	b508      	push	{r3, lr}
   b8032:	4b02      	ldr	r3, [pc, #8]	; (b803c <network_is_off+0xc>)
   b8034:	681b      	ldr	r3, [r3, #0]
   b8036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8038:	9301      	str	r3, [sp, #4]
   b803a:	bd08      	pop	{r3, pc}
   b803c:	00030240 	.word	0x00030240

000b8040 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8040:	b508      	push	{r3, lr}
   b8042:	4b02      	ldr	r3, [pc, #8]	; (b804c <malloc+0xc>)
   b8044:	681b      	ldr	r3, [r3, #0]
   b8046:	681b      	ldr	r3, [r3, #0]
   b8048:	9301      	str	r3, [sp, #4]
   b804a:	bd08      	pop	{r3, pc}
   b804c:	0003021c 	.word	0x0003021c

000b8050 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8050:	b508      	push	{r3, lr}
   b8052:	4b02      	ldr	r3, [pc, #8]	; (b805c <free+0xc>)
   b8054:	681b      	ldr	r3, [r3, #0]
   b8056:	685b      	ldr	r3, [r3, #4]
   b8058:	9301      	str	r3, [sp, #4]
   b805a:	bd08      	pop	{r3, pc}
   b805c:	0003021c 	.word	0x0003021c

000b8060 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8060:	b508      	push	{r3, lr}
   b8062:	4b02      	ldr	r3, [pc, #8]	; (b806c <realloc+0xc>)
   b8064:	681b      	ldr	r3, [r3, #0]
   b8066:	689b      	ldr	r3, [r3, #8]
   b8068:	9301      	str	r3, [sp, #4]
   b806a:	bd08      	pop	{r3, pc}
   b806c:	0003021c 	.word	0x0003021c

000b8070 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8070:	b508      	push	{r3, lr}
   b8072:	4b02      	ldr	r3, [pc, #8]	; (b807c <siprintf+0xc>)
   b8074:	681b      	ldr	r3, [r3, #0]
   b8076:	691b      	ldr	r3, [r3, #16]
   b8078:	9301      	str	r3, [sp, #4]
   b807a:	bd08      	pop	{r3, pc}
   b807c:	0003021c 	.word	0x0003021c

000b8080 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8080:	b508      	push	{r3, lr}
   b8082:	4b02      	ldr	r3, [pc, #8]	; (b808c <snprintf+0xc>)
   b8084:	681b      	ldr	r3, [r3, #0]
   b8086:	69db      	ldr	r3, [r3, #28]
   b8088:	9301      	str	r3, [sp, #4]
   b808a:	bd08      	pop	{r3, pc}
   b808c:	0003021c 	.word	0x0003021c

000b8090 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8090:	b508      	push	{r3, lr}
   b8092:	4b02      	ldr	r3, [pc, #8]	; (b809c <vsnprintf+0xc>)
   b8094:	681b      	ldr	r3, [r3, #0]
   b8096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8098:	9301      	str	r3, [sp, #4]
   b809a:	bd08      	pop	{r3, pc}
   b809c:	0003021c 	.word	0x0003021c

000b80a0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b80a0:	b508      	push	{r3, lr}
   b80a2:	4b02      	ldr	r3, [pc, #8]	; (b80ac <abort+0xc>)
   b80a4:	681b      	ldr	r3, [r3, #0]
   b80a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b80a8:	9301      	str	r3, [sp, #4]
   b80aa:	bd08      	pop	{r3, pc}
   b80ac:	0003021c 	.word	0x0003021c

000b80b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b80b0:	b508      	push	{r3, lr}
   b80b2:	4b02      	ldr	r3, [pc, #8]	; (b80bc <_malloc_r+0xc>)
   b80b4:	681b      	ldr	r3, [r3, #0]
   b80b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b80b8:	9301      	str	r3, [sp, #4]
   b80ba:	bd08      	pop	{r3, pc}
   b80bc:	0003021c 	.word	0x0003021c

000b80c0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b80c0:	b508      	push	{r3, lr}
   b80c2:	4b02      	ldr	r3, [pc, #8]	; (b80cc <__errno+0xc>)
   b80c4:	681b      	ldr	r3, [r3, #0]
   b80c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b80c8:	9301      	str	r3, [sp, #4]
   b80ca:	bd08      	pop	{r3, pc}
   b80cc:	0003021c 	.word	0x0003021c

000b80d0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b80d0:	b508      	push	{r3, lr}
   b80d2:	4b02      	ldr	r3, [pc, #8]	; (b80dc <__assert_func+0xc>)
   b80d4:	681b      	ldr	r3, [r3, #0]
   b80d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b80d8:	9301      	str	r3, [sp, #4]
   b80da:	bd08      	pop	{r3, pc}
   b80dc:	0003021c 	.word	0x0003021c

000b80e0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b80e0:	b508      	push	{r3, lr}
   b80e2:	4b02      	ldr	r3, [pc, #8]	; (b80ec <newlib_impure_ptr_callback+0xc>)
   b80e4:	681b      	ldr	r3, [r3, #0]
   b80e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b80e8:	9301      	str	r3, [sp, #4]
   b80ea:	bd08      	pop	{r3, pc}
   b80ec:	0003021c 	.word	0x0003021c

000b80f0 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b80f0:	b508      	push	{r3, lr}
   b80f2:	4b02      	ldr	r3, [pc, #8]	; (b80fc <strftime+0xc>)
   b80f4:	681b      	ldr	r3, [r3, #0]
   b80f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b80f8:	9301      	str	r3, [sp, #4]
   b80fa:	bd08      	pop	{r3, pc}
   b80fc:	0003021c 	.word	0x0003021c

000b8100 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8100:	b508      	push	{r3, lr}
   b8102:	4b02      	ldr	r3, [pc, #8]	; (b810c <localtime_r+0xc>)
   b8104:	681b      	ldr	r3, [r3, #0]
   b8106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8108:	9301      	str	r3, [sp, #4]
   b810a:	bd08      	pop	{r3, pc}
   b810c:	0003021c 	.word	0x0003021c

000b8110 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8110:	b508      	push	{r3, lr}
   b8112:	4b02      	ldr	r3, [pc, #8]	; (b811c <gmtime_r+0xc>)
   b8114:	681b      	ldr	r3, [r3, #0]
   b8116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8118:	9301      	str	r3, [sp, #4]
   b811a:	bd08      	pop	{r3, pc}
   b811c:	0003021c 	.word	0x0003021c

000b8120 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8120:	b508      	push	{r3, lr}
   b8122:	4b02      	ldr	r3, [pc, #8]	; (b812c <mktime+0xc>)
   b8124:	681b      	ldr	r3, [r3, #0]
   b8126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8128:	9301      	str	r3, [sp, #4]
   b812a:	bd08      	pop	{r3, pc}
   b812c:	0003021c 	.word	0x0003021c

000b8130 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8130:	2100      	movs	r1, #0
   b8132:	f7ff be8b 	b.w	b7e4c <system_delay_ms>

000b8136 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b8136:	b510      	push	{r4, lr}
      if (_M_empty())
   b8138:	6883      	ldr	r3, [r0, #8]
   b813a:	4604      	mov	r4, r0
   b813c:	b90b      	cbnz	r3, b8142 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b813e:	f003 f955 	bl	bb3ec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8142:	68c3      	ldr	r3, [r0, #12]
   b8144:	4798      	blx	r3
      if (_M_manager)
   b8146:	68a3      	ldr	r3, [r4, #8]
   b8148:	b11b      	cbz	r3, b8152 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b814a:	2203      	movs	r2, #3
   b814c:	4621      	mov	r1, r4
   b814e:	4620      	mov	r0, r4
   b8150:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8152:	4620      	mov	r0, r4
   b8154:	2110      	movs	r1, #16
}
   b8156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b815a:	f7fb bfa0 	b.w	b409e <_ZdlPvj>

000b815e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b815e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8160:	6843      	ldr	r3, [r0, #4]
   b8162:	3b01      	subs	r3, #1
    {
   b8164:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8166:	6043      	str	r3, [r0, #4]
   b8168:	b963      	cbnz	r3, b8184 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b816a:	6803      	ldr	r3, [r0, #0]
   b816c:	689b      	ldr	r3, [r3, #8]
   b816e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8170:	68a3      	ldr	r3, [r4, #8]
   b8172:	3b01      	subs	r3, #1
   b8174:	60a3      	str	r3, [r4, #8]
   b8176:	b92b      	cbnz	r3, b8184 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8178:	6823      	ldr	r3, [r4, #0]
   b817a:	4620      	mov	r0, r4
   b817c:	68db      	ldr	r3, [r3, #12]
    }
   b817e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8182:	4718      	bx	r3
    }
   b8184:	bd10      	pop	{r4, pc}

000b8186 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8186:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8188:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b818c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b818e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8192:	42ae      	cmp	r6, r5
   b8194:	d004      	beq.n	b81a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8196:	4628      	mov	r0, r5
   b8198:	f002 fb28 	bl	ba7ec <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b819c:	3510      	adds	r5, #16
   b819e:	e7f8      	b.n	b8192 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b81a0:	6820      	ldr	r0, [r4, #0]
   b81a2:	f7ff ff55 	bl	b8050 <free>
    AllocatorT::free(data_);
}
   b81a6:	4620      	mov	r0, r4
   b81a8:	bd70      	pop	{r4, r5, r6, pc}

000b81aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b81aa:	b513      	push	{r0, r1, r4, lr}
   b81ac:	460b      	mov	r3, r1
   b81ae:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b81b0:	e9d0 0100 	ldrd	r0, r1, [r0]
   b81b4:	466c      	mov	r4, sp
   b81b6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b81ba:	e893 0003 	ldmia.w	r3, {r0, r1}
   b81be:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b81c2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b81c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b81ca:	b002      	add	sp, #8
   b81cc:	bd10      	pop	{r4, pc}
	...

000b81d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b81d0:	4802      	ldr	r0, [pc, #8]	; (b81dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b81d2:	2300      	movs	r3, #0
   b81d4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b81d6:	f7ff bbf7 	b.w	b79c8 <os_mutex_recursive_create>
   b81da:	bf00      	nop
   b81dc:	2003e60c 	.word	0x2003e60c

000b81e0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b81e0:	2200      	movs	r2, #0
   b81e2:	6840      	ldr	r0, [r0, #4]
   b81e4:	4611      	mov	r1, r2
   b81e6:	f7ff bee3 	b.w	b7fb0 <network_ready>

000b81ea <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b81ea:	2200      	movs	r2, #0
   b81ec:	6840      	ldr	r0, [r0, #4]
   b81ee:	4611      	mov	r1, r2
   b81f0:	f7ff befe 	b.w	b7ff0 <network_listening>

000b81f4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b81f4:	2200      	movs	r2, #0
   b81f6:	6840      	ldr	r0, [r0, #4]
   b81f8:	4611      	mov	r1, r2
   b81fa:	f7ff bf09 	b.w	b8010 <network_get_listen_timeout>

000b81fe <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b81fe:	6840      	ldr	r0, [r0, #4]
   b8200:	2200      	movs	r2, #0
   b8202:	f7ff befd 	b.w	b8000 <network_set_listen_timeout>

000b8206 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8206:	6840      	ldr	r0, [r0, #4]
   b8208:	2200      	movs	r2, #0
   b820a:	f081 0101 	eor.w	r1, r1, #1
   b820e:	f7ff bee7 	b.w	b7fe0 <network_listen>

000b8212 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8212:	2300      	movs	r3, #0
   b8214:	6840      	ldr	r0, [r0, #4]
   b8216:	461a      	mov	r2, r3
   b8218:	4619      	mov	r1, r3
   b821a:	f7ff bed9 	b.w	b7fd0 <network_off>

000b821e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b821e:	2300      	movs	r3, #0
   b8220:	6840      	ldr	r0, [r0, #4]
   b8222:	461a      	mov	r2, r3
   b8224:	4619      	mov	r1, r3
   b8226:	f7ff becb 	b.w	b7fc0 <network_on>

000b822a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b822a:	2200      	movs	r2, #0
   b822c:	6840      	ldr	r0, [r0, #4]
   b822e:	4611      	mov	r1, r2
   b8230:	f7ff beae 	b.w	b7f90 <network_connecting>

000b8234 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8234:	6840      	ldr	r0, [r0, #4]
   b8236:	2200      	movs	r2, #0
   b8238:	2102      	movs	r1, #2
   b823a:	f7ff beb1 	b.w	b7fa0 <network_disconnect>

000b823e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b823e:	2300      	movs	r3, #0
   b8240:	6840      	ldr	r0, [r0, #4]
   b8242:	461a      	mov	r2, r3
   b8244:	f7ff be9c 	b.w	b7f80 <network_connect>

000b8248 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b8248:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b824a:	4b13      	ldr	r3, [pc, #76]	; (b8298 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b824c:	6003      	str	r3, [r0, #0]
   b824e:	2518      	movs	r5, #24
   b8250:	3330      	adds	r3, #48	; 0x30
   b8252:	b086      	sub	sp, #24
   b8254:	460e      	mov	r6, r1
   b8256:	6043      	str	r3, [r0, #4]
   b8258:	462a      	mov	r2, r5
   b825a:	2100      	movs	r1, #0
   b825c:	4604      	mov	r4, r0
   b825e:	3008      	adds	r0, #8
   b8260:	f003 fdf6 	bl	bbe50 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b8264:	2200      	movs	r2, #0
   b8266:	6870      	ldr	r0, [r6, #4]
   b8268:	4611      	mov	r1, r2
   b826a:	f7ff fea1 	bl	b7fb0 <network_ready>
   b826e:	b178      	cbz	r0, b8290 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b8270:	2100      	movs	r1, #0
   b8272:	462a      	mov	r2, r5
   b8274:	4668      	mov	r0, sp
   b8276:	f003 fdeb 	bl	bbe50 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b827a:	4669      	mov	r1, sp
   b827c:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b827e:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8282:	f7ff fb99 	bl	b79b8 <cellular_signal>
   b8286:	b918      	cbnz	r0, b8290 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b8288:	4669      	mov	r1, sp
   b828a:	4620      	mov	r0, r4
   b828c:	f000 f8b8 	bl	b8400 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b8290:	4620      	mov	r0, r4
   b8292:	b006      	add	sp, #24
   b8294:	bd70      	pop	{r4, r5, r6, pc}
   b8296:	bf00      	nop
   b8298:	000bd038 	.word	0x000bd038

000b829c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b829c:	4b08      	ldr	r3, [pc, #32]	; (b82c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b829e:	b510      	push	{r4, lr}
   b82a0:	2428      	movs	r4, #40	; 0x28
   b82a2:	4622      	mov	r2, r4
   b82a4:	4618      	mov	r0, r3
   b82a6:	2100      	movs	r1, #0
   b82a8:	f003 fdd2 	bl	bbe50 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b82ac:	4b05      	ldr	r3, [pc, #20]	; (b82c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b82ae:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b82b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b82b4:	6042      	str	r2, [r0, #4]
   b82b6:	2204      	movs	r2, #4
   b82b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b82ba:	4a03      	ldr	r2, [pc, #12]	; (b82c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b82bc:	601a      	str	r2, [r3, #0]
   b82be:	bd10      	pop	{r4, pc}
   b82c0:	2003e618 	.word	0x2003e618
   b82c4:	2003e610 	.word	0x2003e610
   b82c8:	000bcffc 	.word	0x000bcffc

000b82cc <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b82cc:	4770      	bx	lr

000b82ce <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b82ce:	7b00      	ldrb	r0, [r0, #12]
   b82d0:	4770      	bx	lr

000b82d2 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b82d2:	7b03      	ldrb	r3, [r0, #12]
   b82d4:	b14b      	cbz	r3, b82ea <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b82d6:	6903      	ldr	r3, [r0, #16]
   b82d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b82dc:	d005      	beq.n	b82ea <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b82de:	6980      	ldr	r0, [r0, #24]
   b82e0:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b82e4:	bf18      	it	ne
   b82e6:	2001      	movne	r0, #1
   b82e8:	4770      	bx	lr
   b82ea:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b82ec:	4770      	bx	lr

000b82ee <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b82ee:	6803      	ldr	r3, [r0, #0]
   b82f0:	6a1b      	ldr	r3, [r3, #32]
   b82f2:	4718      	bx	r3

000b82f4 <_ZNK14CellularSignal7printToER5Print>:
{
   b82f4:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b82f6:	6803      	ldr	r3, [r0, #0]
{
   b82f8:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b82fa:	691b      	ldr	r3, [r3, #16]
{
   b82fc:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b82fe:	4798      	blx	r3
   b8300:	2102      	movs	r1, #2
   b8302:	4628      	mov	r0, r5
   b8304:	f002 f94e 	bl	ba5a4 <_ZN5Print5printEfi>
    n += p.print(',');
   b8308:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b830a:	4604      	mov	r4, r0
    n += p.print(',');
   b830c:	4628      	mov	r0, r5
   b830e:	f002 f853 	bl	ba3b8 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b8312:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b8314:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b8316:	699b      	ldr	r3, [r3, #24]
   b8318:	4630      	mov	r0, r6
   b831a:	4798      	blx	r3
   b831c:	2102      	movs	r1, #2
   b831e:	4628      	mov	r0, r5
   b8320:	f002 f940 	bl	ba5a4 <_ZN5Print5printEfi>
}
   b8324:	4420      	add	r0, r4
   b8326:	bd70      	pop	{r4, r5, r6, pc}

000b8328 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b8328:	f1a0 0004 	sub.w	r0, r0, #4
   b832c:	f7ff bfe2 	b.w	b82f4 <_ZNK14CellularSignal7printToER5Print>

000b8330 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b8330:	b510      	push	{r4, lr}
   b8332:	2120      	movs	r1, #32
   b8334:	4604      	mov	r4, r0
   b8336:	f7fb feb2 	bl	b409e <_ZdlPvj>
   b833a:	4620      	mov	r0, r4
   b833c:	bd10      	pop	{r4, pc}
	...

000b8340 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b8340:	7b03      	ldrb	r3, [r0, #12]
   b8342:	b17b      	cbz	r3, b8364 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b8344:	6943      	ldr	r3, [r0, #20]
   b8346:	2b00      	cmp	r3, #0
   b8348:	db0c      	blt.n	b8364 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b834a:	ee07 3a90 	vmov	s15, r3
   b834e:	ed9f 7a07 	vldr	s14, [pc, #28]	; b836c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b8352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8356:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b835a:	eddf 7a05 	vldr	s15, [pc, #20]	; b8370 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b835e:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8362:	4770      	bx	lr
    return -1.0f;
   b8364:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8368:	4770      	bx	lr
   b836a:	bf00      	nop
   b836c:	477fff00 	.word	0x477fff00
   b8370:	42c80000 	.word	0x42c80000

000b8374 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b8374:	7b03      	ldrb	r3, [r0, #12]
   b8376:	b163      	cbz	r3, b8392 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b8378:	6903      	ldr	r3, [r0, #16]
   b837a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b837e:	d008      	beq.n	b8392 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b8380:	ee07 3a90 	vmov	s15, r3
   b8384:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8398 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b8388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b838c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8390:	4770      	bx	lr
    return 0.0f;
   b8392:	ed9f 0a02 	vldr	s0, [pc, #8]	; b839c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b8396:	4770      	bx	lr
   b8398:	42c80000 	.word	0x42c80000
   b839c:	00000000 	.word	0x00000000

000b83a0 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b83a0:	7b03      	ldrb	r3, [r0, #12]
   b83a2:	b17b      	cbz	r3, b83c4 <_ZNK14CellularSignal10getQualityEv+0x24>
   b83a4:	69c3      	ldr	r3, [r0, #28]
   b83a6:	2b00      	cmp	r3, #0
   b83a8:	db0c      	blt.n	b83c4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b83aa:	ee07 3a90 	vmov	s15, r3
   b83ae:	ed9f 7a07 	vldr	s14, [pc, #28]	; b83cc <_ZNK14CellularSignal10getQualityEv+0x2c>
   b83b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b83b6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b83ba:	eddf 7a05 	vldr	s15, [pc, #20]	; b83d0 <_ZNK14CellularSignal10getQualityEv+0x30>
   b83be:	ee20 0a27 	vmul.f32	s0, s0, s15
   b83c2:	4770      	bx	lr
    return -1.0f;
   b83c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b83c8:	4770      	bx	lr
   b83ca:	bf00      	nop
   b83cc:	477fff00 	.word	0x477fff00
   b83d0:	42c80000 	.word	0x42c80000

000b83d4 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b83d4:	7b03      	ldrb	r3, [r0, #12]
   b83d6:	b163      	cbz	r3, b83f2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b83d8:	6983      	ldr	r3, [r0, #24]
   b83da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b83de:	d008      	beq.n	b83f2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b83e0:	ee07 3a90 	vmov	s15, r3
   b83e4:	ed9f 7a04 	vldr	s14, [pc, #16]	; b83f8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b83e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b83ec:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b83f0:	4770      	bx	lr
    return 0.0f;
   b83f2:	ed9f 0a02 	vldr	s0, [pc, #8]	; b83fc <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b83f6:	4770      	bx	lr
   b83f8:	42c80000 	.word	0x42c80000
   b83fc:	00000000 	.word	0x00000000

000b8400 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b8400:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b8402:	460d      	mov	r5, r1
   b8404:	f100 0408 	add.w	r4, r0, #8
   b8408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b840a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b840c:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8410:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b8414:	2001      	movs	r0, #1
   b8416:	bd30      	pop	{r4, r5, pc}

000b8418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8418:	4770      	bx	lr

000b841a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b841a:	2000      	movs	r0, #0
   b841c:	4770      	bx	lr

000b841e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b841e:	b510      	push	{r4, lr}
   b8420:	2110      	movs	r1, #16
   b8422:	4604      	mov	r4, r0
   b8424:	f7fb fe3b 	bl	b409e <_ZdlPvj>
   b8428:	4620      	mov	r0, r4
   b842a:	bd10      	pop	{r4, pc}

000b842c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b842c:	b508      	push	{r3, lr}
      { delete this; }
   b842e:	f7ff fff6 	bl	b841e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b8432:	bd08      	pop	{r3, pc}

000b8434 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b8434:	b530      	push	{r4, r5, lr}
        type_(type) {
   b8436:	2200      	movs	r2, #0
   b8438:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b843c:	6002      	str	r2, [r0, #0]
   b843e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8440:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b8442:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8444:	680c      	ldr	r4, [r1, #0]
   b8446:	8085      	strh	r5, [r0, #4]
   b8448:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b844a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b844c:	bd30      	pop	{r4, r5, pc}

000b844e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b844e:	b510      	push	{r4, lr}
   b8450:	4604      	mov	r4, r0
    free((void*)msg_);
   b8452:	6800      	ldr	r0, [r0, #0]
   b8454:	f7ff fdfc 	bl	b8050 <free>
}
   b8458:	4620      	mov	r0, r4
   b845a:	bd10      	pop	{r4, pc}

000b845c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b845c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b845e:	68c4      	ldr	r4, [r0, #12]
   b8460:	b1f4      	cbz	r4, b84a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b8462:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b8464:	2b02      	cmp	r3, #2
   b8466:	d103      	bne.n	b8470 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b8468:	f104 000c 	add.w	r0, r4, #12
   b846c:	f7ff ffef 	bl	b844e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b8470:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b8472:	b135      	cbz	r5, b8482 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b8474:	4628      	mov	r0, r5
   b8476:	f7fd f99f 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
   b847a:	2110      	movs	r1, #16
   b847c:	4628      	mov	r0, r5
   b847e:	f7fb fe0e 	bl	b409e <_ZdlPvj>
   b8482:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b8484:	b135      	cbz	r5, b8494 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b8486:	4628      	mov	r0, r5
   b8488:	f7fd f996 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
   b848c:	2110      	movs	r1, #16
   b848e:	4628      	mov	r0, r5
   b8490:	f7fb fe05 	bl	b409e <_ZdlPvj>
   b8494:	4620      	mov	r0, r4
   b8496:	2114      	movs	r1, #20
   b8498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b849c:	f7fb bdff 	b.w	b409e <_ZdlPvj>
   b84a0:	bd38      	pop	{r3, r4, r5, pc}

000b84a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b84a2:	680b      	ldr	r3, [r1, #0]
   b84a4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b84a6:	684b      	ldr	r3, [r1, #4]
   b84a8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b84aa:	b113      	cbz	r3, b84b2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b84ac:	685a      	ldr	r2, [r3, #4]
   b84ae:	3201      	adds	r2, #1
   b84b0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b84b2:	4770      	bx	lr

000b84b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b84b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b84b6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b84b8:	4668      	mov	r0, sp
   b84ba:	460d      	mov	r5, r1
   b84bc:	f7ff fff1 	bl	b84a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b84c0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b84c2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b84c4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b84c6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b84c8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b84ca:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b84cc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b84ce:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b84d0:	f7fc fd0a 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b84d4:	b135      	cbz	r5, b84e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b84d6:	1d28      	adds	r0, r5, #4
   b84d8:	f7fc fd06 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b84dc:	2108      	movs	r1, #8
   b84de:	4628      	mov	r0, r5
   b84e0:	f7fb fddd 	bl	b409e <_ZdlPvj>
        return p;
    }
   b84e4:	4620      	mov	r0, r4
   b84e6:	b003      	add	sp, #12
   b84e8:	bd30      	pop	{r4, r5, pc}

000b84ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b84ea:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b84ec:	b510      	push	{r4, lr}
      if (_M_empty())
   b84ee:	b90a      	cbnz	r2, b84f4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b84f0:	f002 ff7c 	bl	bb3ec <_ZSt25__throw_bad_function_callv>
    }
   b84f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b84f8:	68c3      	ldr	r3, [r0, #12]
   b84fa:	4718      	bx	r3

000b84fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b84fc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b84fe:	6800      	ldr	r0, [r0, #0]
   b8500:	f100 0110 	add.w	r1, r0, #16
   b8504:	f7ff fff1 	bl	b84ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8508:	bd08      	pop	{r3, pc}

000b850a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b850a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b850c:	b510      	push	{r4, lr}
      if (_M_empty())
   b850e:	b90a      	cbnz	r2, b8514 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8510:	f002 ff6c 	bl	bb3ec <_ZSt25__throw_bad_function_callv>
    }
   b8514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8518:	68c3      	ldr	r3, [r0, #12]
   b851a:	4718      	bx	r3

000b851c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b851c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b851e:	6800      	ldr	r0, [r0, #0]
   b8520:	f100 0110 	add.w	r1, r0, #16
   b8524:	f7ff fff1 	bl	b850a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8528:	bd08      	pop	{r3, pc}
	...

000b852c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b852c:	b538      	push	{r3, r4, r5, lr}
   b852e:	2300      	movs	r3, #0
   b8530:	4604      	mov	r4, r0
   b8532:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8534:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b8536:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8538:	f7fb fdad 	bl	b4096 <_Znwj>
   b853c:	b128      	cbz	r0, b854a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b853e:	2301      	movs	r3, #1
   b8540:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8544:	4b02      	ldr	r3, [pc, #8]	; (b8550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b8546:	6003      	str	r3, [r0, #0]
   b8548:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b854a:	6020      	str	r0, [r4, #0]
	}
   b854c:	4620      	mov	r0, r4
   b854e:	bd38      	pop	{r3, r4, r5, pc}
   b8550:	000bd074 	.word	0x000bd074

000b8554 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8554:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8556:	2300      	movs	r3, #0
   b8558:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b855a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b855c:	4604      	mov	r4, r0
   b855e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8560:	b12b      	cbz	r3, b856e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8562:	2202      	movs	r2, #2
   b8564:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8566:	68eb      	ldr	r3, [r5, #12]
   b8568:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b856a:	68ab      	ldr	r3, [r5, #8]
   b856c:	60a3      	str	r3, [r4, #8]
    }
   b856e:	4620      	mov	r0, r4
   b8570:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8574 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8574:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8576:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8578:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b857a:	4668      	mov	r0, sp
   b857c:	f7ff ff5a 	bl	b8434 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8580:	f04f 0302 	mov.w	r3, #2
   b8584:	e8d4 2f4f 	ldrexb	r2, [r4]
   b8588:	2a00      	cmp	r2, #0
   b858a:	d103      	bne.n	b8594 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b858c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8590:	2900      	cmp	r1, #0
   b8592:	d1f7      	bne.n	b8584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8594:	d125      	bne.n	b85e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b8596:	f104 050c 	add.w	r5, r4, #12
   b859a:	4669      	mov	r1, sp
   b859c:	4628      	mov	r0, r5
   b859e:	f7ff ff49 	bl	b8434 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b85a2:	f3bf 8f5b 	dmb	ish
   b85a6:	2301      	movs	r3, #1
   b85a8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b85aa:	2000      	movs	r0, #0
   b85ac:	f104 0308 	add.w	r3, r4, #8
   b85b0:	f3bf 8f5b 	dmb	ish
   b85b4:	e853 6f00 	ldrex	r6, [r3]
   b85b8:	e843 0200 	strex	r2, r0, [r3]
   b85bc:	2a00      	cmp	r2, #0
   b85be:	d1f9      	bne.n	b85b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b85c0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b85c4:	b16e      	cbz	r6, b85e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b85c6:	f7ff fc59 	bl	b7e7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b85ca:	b178      	cbz	r0, b85ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b85cc:	4629      	mov	r1, r5
   b85ce:	4630      	mov	r0, r6
   b85d0:	f7ff ff8b 	bl	b84ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b85d4:	4630      	mov	r0, r6
   b85d6:	f7fd f8ef 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b85da:	2110      	movs	r1, #16
   b85dc:	4630      	mov	r0, r6
   b85de:	f7fb fd5e 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b85e2:	4668      	mov	r0, sp
   b85e4:	f7ff ff33 	bl	b844e <_ZN8particle5ErrorD1Ev>
    }
   b85e8:	b009      	add	sp, #36	; 0x24
   b85ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b85ec:	4631      	mov	r1, r6
   b85ee:	a802      	add	r0, sp, #8
   b85f0:	f7ff ffb0 	bl	b8554 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b85f4:	68e0      	ldr	r0, [r4, #12]
   b85f6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b85fa:	b108      	cbz	r0, b8600 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b85fc:	f003 fcc6 	bl	bbf8c <strdup>
        type_(type) {
   b8600:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8602:	2010      	movs	r0, #16
   b8604:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8608:	f7fb fd45 	bl	b4096 <_Znwj>
   b860c:	4605      	mov	r5, r0
   b860e:	b1e8      	cbz	r0, b864c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8610:	2700      	movs	r7, #0
   b8612:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8614:	2018      	movs	r0, #24
   b8616:	f7fb fd3e 	bl	b4096 <_Znwj>
   b861a:	4604      	mov	r4, r0
   b861c:	b188      	cbz	r0, b8642 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b861e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8620:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8622:	a802      	add	r0, sp, #8
   b8624:	f7ff fdc1 	bl	b81aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8628:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b862a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b862c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b862e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8630:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8632:	a906      	add	r1, sp, #24
   b8634:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8636:	60e3      	str	r3, [r4, #12]
   b8638:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b863c:	9205      	str	r2, [sp, #20]
   b863e:	f7ff fef9 	bl	b8434 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8642:	4b08      	ldr	r3, [pc, #32]	; (b8664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8644:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8646:	4b08      	ldr	r3, [pc, #32]	; (b8668 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8648:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b864a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b864c:	a806      	add	r0, sp, #24
   b864e:	f7ff fefe 	bl	b844e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8652:	a802      	add	r0, sp, #8
   b8654:	f7fd f8b0 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8658:	2200      	movs	r2, #0
   b865a:	4629      	mov	r1, r5
   b865c:	4803      	ldr	r0, [pc, #12]	; (b866c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b865e:	f7ff fc15 	bl	b7e8c <application_thread_invoke>
   b8662:	e7b7      	b.n	b85d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8664:	000b84fd 	.word	0x000b84fd
   b8668:	000b8781 	.word	0x000b8781
   b866c:	000b8137 	.word	0x000b8137

000b8670 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8674:	b08b      	sub	sp, #44	; 0x2c
   b8676:	4605      	mov	r5, r0
   b8678:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b867c:	460f      	mov	r7, r1
   b867e:	4690      	mov	r8, r2
   b8680:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8682:	f7ff fc55 	bl	b7f30 <spark_cloud_flag_connected>
   b8686:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b8688:	4683      	mov	fp, r0
   b868a:	bb38      	cbnz	r0, b86dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b868c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8690:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8692:	a905      	add	r1, sp, #20
   b8694:	4630      	mov	r0, r6
   b8696:	f8ad 3018 	strh.w	r3, [sp, #24]
   b869a:	f7ff fecb 	bl	b8434 <_ZN8particle5ErrorC1EOS0_>
   b869e:	2014      	movs	r0, #20
   b86a0:	f7fb fcf9 	bl	b4096 <_Znwj>
   b86a4:	4604      	mov	r4, r0
   b86a6:	b148      	cbz	r0, b86bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b86a8:	2302      	movs	r3, #2
   b86aa:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b86ac:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b86ae:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b86b2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b86b4:	4631      	mov	r1, r6
   b86b6:	300c      	adds	r0, #12
   b86b8:	f7ff febc 	bl	b8434 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b86bc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b86be:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b86c0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b86c4:	f7ff ff32 	bl	b852c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b86c8:	4630      	mov	r0, r6
   b86ca:	f7ff fec0 	bl	b844e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b86ce:	a805      	add	r0, sp, #20
   b86d0:	f7ff febd 	bl	b844e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b86d4:	4628      	mov	r0, r5
   b86d6:	b00b      	add	sp, #44	; 0x2c
   b86d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b86dc:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b86de:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b86e0:	2014      	movs	r0, #20
   b86e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b86e6:	9307      	str	r3, [sp, #28]
   b86e8:	f7fb fcd5 	bl	b4096 <_Znwj>
   b86ec:	4601      	mov	r1, r0
   b86ee:	b118      	cbz	r0, b86f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b86f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b86f4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b86f6:	7044      	strb	r4, [r0, #1]
   b86f8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b86fa:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b86fc:	f7ff ff16 	bl	b852c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8700:	4b1e      	ldr	r3, [pc, #120]	; (b877c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8702:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8704:	2008      	movs	r0, #8
   b8706:	f7fb fcc6 	bl	b4096 <_Znwj>
   b870a:	4604      	mov	r4, r0
   b870c:	b110      	cbz	r0, b8714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b870e:	a903      	add	r1, sp, #12
   b8710:	f7ff fec7 	bl	b84a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8714:	9600      	str	r6, [sp, #0]
   b8716:	fa5f f38a 	uxtb.w	r3, sl
   b871a:	464a      	mov	r2, r9
   b871c:	4641      	mov	r1, r8
   b871e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8720:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8722:	f7ff fc0d 	bl	b7f40 <spark_send_event>
   b8726:	b9b8      	cbnz	r0, b8758 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8728:	9b03      	ldr	r3, [sp, #12]
   b872a:	785b      	ldrb	r3, [r3, #1]
   b872c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8730:	b993      	cbnz	r3, b8758 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8732:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8736:	a905      	add	r1, sp, #20
   b8738:	a803      	add	r0, sp, #12
   b873a:	9205      	str	r2, [sp, #20]
   b873c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8740:	f7ff ff18 	bl	b8574 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8744:	a805      	add	r0, sp, #20
   b8746:	f7ff fe82 	bl	b844e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b874a:	a805      	add	r0, sp, #20
   b874c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b874e:	f7ff feb1 	bl	b84b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8752:	a806      	add	r0, sp, #24
   b8754:	f7fc fbc8 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8758:	a903      	add	r1, sp, #12
   b875a:	a805      	add	r0, sp, #20
   b875c:	f7ff fea1 	bl	b84a2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8760:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8762:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8764:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b8766:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8768:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b876a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b876c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b876e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8770:	f7fc fbba 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8774:	a804      	add	r0, sp, #16
   b8776:	f7fc fbb7 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b877a:	e7ab      	b.n	b86d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b877c:	000b87fd 	.word	0x000b87fd

000b8780 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8780:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8784:	4605      	mov	r5, r0
	switch (__op)
   b8786:	d103      	bne.n	b8790 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8788:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b878a:	6003      	str	r3, [r0, #0]
      }
   b878c:	2000      	movs	r0, #0
   b878e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8790:	2a02      	cmp	r2, #2
   b8792:	d010      	beq.n	b87b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8794:	2a03      	cmp	r2, #3
   b8796:	d1f9      	bne.n	b878c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8798:	6804      	ldr	r4, [r0, #0]
   b879a:	2c00      	cmp	r4, #0
   b879c:	d0f6      	beq.n	b878c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b879e:	f104 0010 	add.w	r0, r4, #16
   b87a2:	f7ff fe54 	bl	b844e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b87a6:	4620      	mov	r0, r4
   b87a8:	f7fd f806 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b87ac:	2118      	movs	r1, #24
   b87ae:	4620      	mov	r0, r4
   b87b0:	f7fb fc75 	bl	b409e <_ZdlPvj>
   b87b4:	e7ea      	b.n	b878c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b87b6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b87b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b87ba:	f7fb fc6c 	bl	b4096 <_Znwj>
   b87be:	4604      	mov	r4, r0
   b87c0:	b150      	cbz	r0, b87d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b87c2:	4631      	mov	r1, r6
   b87c4:	f7ff fec6 	bl	b8554 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b87c8:	6930      	ldr	r0, [r6, #16]
   b87ca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b87ce:	b108      	cbz	r0, b87d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b87d0:	f003 fbdc 	bl	bbf8c <strdup>
        type_(type) {
   b87d4:	6120      	str	r0, [r4, #16]
   b87d6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b87d8:	602c      	str	r4, [r5, #0]
	}
   b87da:	e7d7      	b.n	b878c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b87dc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b87dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b87de:	2300      	movs	r3, #0
   b87e0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b87e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b87e4:	4604      	mov	r4, r0
   b87e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b87e8:	b12b      	cbz	r3, b87f6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b87ea:	2202      	movs	r2, #2
   b87ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b87ee:	68eb      	ldr	r3, [r5, #12]
   b87f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b87f2:	68ab      	ldr	r3, [r5, #8]
   b87f4:	60a3      	str	r3, [r4, #8]
    }
   b87f6:	4620      	mov	r0, r4
   b87f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b87fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b87fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b87fe:	b089      	sub	sp, #36	; 0x24
   b8800:	4604      	mov	r4, r0
   b8802:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8804:	a801      	add	r0, sp, #4
   b8806:	4611      	mov	r1, r2
   b8808:	f7ff fe54 	bl	b84b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b880c:	b1a4      	cbz	r4, b8838 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b880e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8810:	b11d      	cbz	r5, b881a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b8812:	4628      	mov	r0, r5
   b8814:	f003 fbba 	bl	bbf8c <strdup>
   b8818:	4605      	mov	r5, r0
   b881a:	a801      	add	r0, sp, #4
   b881c:	a903      	add	r1, sp, #12
        type_(type) {
   b881e:	9503      	str	r5, [sp, #12]
   b8820:	f8ad 4010 	strh.w	r4, [sp, #16]
   b8824:	f7ff fea6 	bl	b8574 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8828:	a803      	add	r0, sp, #12
   b882a:	f7ff fe10 	bl	b844e <_ZN8particle5ErrorD1Ev>
   b882e:	a802      	add	r0, sp, #8
   b8830:	f7fc fb5a 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8834:	b009      	add	sp, #36	; 0x24
   b8836:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b8838:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b883a:	2301      	movs	r3, #1
   b883c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b8840:	2a00      	cmp	r2, #0
   b8842:	d103      	bne.n	b884c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b8844:	e8c5 3f41 	strexb	r1, r3, [r5]
   b8848:	2900      	cmp	r1, #0
   b884a:	d1f7      	bne.n	b883c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b884c:	d1ef      	bne.n	b882e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b884e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b8850:	f3bf 8f5b 	dmb	ish
   b8854:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8856:	1d2b      	adds	r3, r5, #4
   b8858:	f3bf 8f5b 	dmb	ish
   b885c:	e853 6f00 	ldrex	r6, [r3]
   b8860:	e843 4200 	strex	r2, r4, [r3]
   b8864:	2a00      	cmp	r2, #0
   b8866:	d1f9      	bne.n	b885c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b8868:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b886c:	2e00      	cmp	r6, #0
   b886e:	d0de      	beq.n	b882e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b8870:	4620      	mov	r0, r4
   b8872:	f7ff fb03 	bl	b7e7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8876:	4607      	mov	r7, r0
   b8878:	b160      	cbz	r0, b8894 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b887a:	f105 010c 	add.w	r1, r5, #12
   b887e:	4630      	mov	r0, r6
   b8880:	f7ff fe43 	bl	b850a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b8884:	4630      	mov	r0, r6
   b8886:	f7fc ff97 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b888a:	2110      	movs	r1, #16
   b888c:	4630      	mov	r0, r6
   b888e:	f7fb fc06 	bl	b409e <_ZdlPvj>
   b8892:	e7cc      	b.n	b882e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8894:	4631      	mov	r1, r6
   b8896:	a803      	add	r0, sp, #12
   b8898:	f7ff ffa0 	bl	b87dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b889c:	7b2b      	ldrb	r3, [r5, #12]
   b889e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b88a2:	2010      	movs	r0, #16
   b88a4:	f7fb fbf7 	bl	b4096 <_Znwj>
   b88a8:	4605      	mov	r5, r0
   b88aa:	b1d0      	cbz	r0, b88e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b88ac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b88ae:	2014      	movs	r0, #20
   b88b0:	f7fb fbf1 	bl	b4096 <_Znwj>
   b88b4:	4604      	mov	r4, r0
   b88b6:	b178      	cbz	r0, b88d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b88b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b88ba:	4601      	mov	r1, r0
   b88bc:	a803      	add	r0, sp, #12
   b88be:	f7ff fc74 	bl	b81aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b88c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b88c6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b88c8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b88ca:	9205      	str	r2, [sp, #20]
   b88cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b88ce:	60e3      	str	r3, [r4, #12]
   b88d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b88d4:	9206      	str	r2, [sp, #24]
   b88d6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b88d8:	4b06      	ldr	r3, [pc, #24]	; (b88f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b88da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b88dc:	4b06      	ldr	r3, [pc, #24]	; (b88f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b88de:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b88e0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b88e2:	a803      	add	r0, sp, #12
   b88e4:	f7fc ff68 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b88e8:	2200      	movs	r2, #0
   b88ea:	4629      	mov	r1, r5
   b88ec:	4803      	ldr	r0, [pc, #12]	; (b88fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b88ee:	f7ff facd 	bl	b7e8c <application_thread_invoke>
   b88f2:	e7c7      	b.n	b8884 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b88f4:	000b851d 	.word	0x000b851d
   b88f8:	000b8901 	.word	0x000b8901
   b88fc:	000b8137 	.word	0x000b8137

000b8900 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b8900:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8902:	b570      	push	{r4, r5, r6, lr}
   b8904:	4604      	mov	r4, r0
	switch (__op)
   b8906:	d103      	bne.n	b8910 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8908:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b890a:	6003      	str	r3, [r0, #0]
      }
   b890c:	2000      	movs	r0, #0
   b890e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b8910:	2a02      	cmp	r2, #2
   b8912:	d00c      	beq.n	b892e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b8914:	2a03      	cmp	r2, #3
   b8916:	d1f9      	bne.n	b890c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8918:	6804      	ldr	r4, [r0, #0]
   b891a:	2c00      	cmp	r4, #0
   b891c:	d0f6      	beq.n	b890c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b891e:	4620      	mov	r0, r4
   b8920:	f7fc ff4a 	bl	b57b8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8924:	2114      	movs	r1, #20
   b8926:	4620      	mov	r0, r4
   b8928:	f7fb fbb9 	bl	b409e <_ZdlPvj>
   b892c:	e7ee      	b.n	b890c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b892e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b8930:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8932:	f7fb fbb0 	bl	b4096 <_Znwj>
   b8936:	4605      	mov	r5, r0
   b8938:	b120      	cbz	r0, b8944 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b893a:	4631      	mov	r1, r6
   b893c:	f7ff ff4e 	bl	b87dc <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b8940:	7c33      	ldrb	r3, [r6, #16]
   b8942:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b8944:	6025      	str	r5, [r4, #0]
	}
   b8946:	e7e1      	b.n	b890c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b8948 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8948:	2200      	movs	r2, #0
   b894a:	6840      	ldr	r0, [r0, #4]
   b894c:	4611      	mov	r1, r2
   b894e:	f7ff bb4f 	b.w	b7ff0 <network_listening>

000b8952 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8952:	2200      	movs	r2, #0
   b8954:	6840      	ldr	r0, [r0, #4]
   b8956:	4611      	mov	r1, r2
   b8958:	f7ff bb5a 	b.w	b8010 <network_get_listen_timeout>

000b895c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b895c:	6840      	ldr	r0, [r0, #4]
   b895e:	2200      	movs	r2, #0
   b8960:	f7ff bb4e 	b.w	b8000 <network_set_listen_timeout>

000b8964 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8964:	6840      	ldr	r0, [r0, #4]
   b8966:	2200      	movs	r2, #0
   b8968:	f081 0101 	eor.w	r1, r1, #1
   b896c:	f7ff bb38 	b.w	b7fe0 <network_listen>

000b8970 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8970:	2300      	movs	r3, #0
   b8972:	6840      	ldr	r0, [r0, #4]
   b8974:	461a      	mov	r2, r3
   b8976:	4619      	mov	r1, r3
   b8978:	f7ff bb2a 	b.w	b7fd0 <network_off>

000b897c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b897c:	2300      	movs	r3, #0
   b897e:	6840      	ldr	r0, [r0, #4]
   b8980:	461a      	mov	r2, r3
   b8982:	4619      	mov	r1, r3
   b8984:	f7ff bb1c 	b.w	b7fc0 <network_on>

000b8988 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8988:	2200      	movs	r2, #0
   b898a:	6840      	ldr	r0, [r0, #4]
   b898c:	4611      	mov	r1, r2
   b898e:	f7ff bb0f 	b.w	b7fb0 <network_ready>

000b8992 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8992:	2200      	movs	r2, #0
   b8994:	6840      	ldr	r0, [r0, #4]
   b8996:	4611      	mov	r1, r2
   b8998:	f7ff bafa 	b.w	b7f90 <network_connecting>

000b899c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b899c:	6840      	ldr	r0, [r0, #4]
   b899e:	2200      	movs	r2, #0
   b89a0:	2102      	movs	r1, #2
   b89a2:	f7ff bafd 	b.w	b7fa0 <network_disconnect>

000b89a6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b89a6:	2300      	movs	r3, #0
   b89a8:	6840      	ldr	r0, [r0, #4]
   b89aa:	461a      	mov	r2, r3
   b89ac:	f7ff bae8 	b.w	b7f80 <network_connect>

000b89b0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b89b0:	4b02      	ldr	r3, [pc, #8]	; (b89bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b89b2:	2203      	movs	r2, #3
   b89b4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b89b6:	4a02      	ldr	r2, [pc, #8]	; (b89c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b89b8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b89ba:	4770      	bx	lr
   b89bc:	2003e640 	.word	0x2003e640
   b89c0:	000bd090 	.word	0x000bd090

000b89c4 <_ZN8particle6detail7_getSoCEhhh>:

        // Maxim ModelGauge doc only mentions 18 and 19 bit
        // MSB is the whole number
        // LSB is the decimal, resolution in units 1/256%
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b89c4:	eb01 2300 	add.w	r3, r1, r0, lsl #8
   b89c8:	ee00 3a10 	vmov	s0, r3
        if (soc_bits_precision == particle::power::SOC_19_BIT_PRECISION) {
   b89cc:	2a13      	cmp	r2, #19
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b89ce:	bf0c      	ite	eq
   b89d0:	eddf 7a04 	vldreq	s15, [pc, #16]	; b89e4 <_ZN8particle6detail7_getSoCEhhh+0x20>
        } else { // default to 18-bit calculation
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b89d4:	eddf 7a04 	vldrne	s15, [pc, #16]	; b89e8 <_ZN8particle6detail7_getSoCEhhh+0x24>
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 512.0f; // per datasheet
   b89d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
            soc_percent = (((uint32_t)MSB << 8) + LSB) / 256.0f; // per datasheet
   b89dc:	ee20 0a27 	vmul.f32	s0, s0, s15
        }
        return soc_percent;

    }
   b89e0:	4770      	bx	lr
   b89e2:	bf00      	nop
   b89e4:	3b000000 	.word	0x3b000000
   b89e8:	3b800000 	.word	0x3b800000

000b89ec <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b89ec:	6800      	ldr	r0, [r0, #0]
   b89ee:	f000 b951 	b.w	b8c94 <_ZN7TwoWire4lockEv>

000b89f2 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b89f2:	b510      	push	{r4, lr}
   b89f4:	4604      	mov	r4, r0
      lock_(_lock) {
   b89f6:	6001      	str	r1, [r0, #0]
   b89f8:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b89fa:	b10a      	cbz	r2, b8a00 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b89fc:	f7ff fff6 	bl	b89ec <_ZN9FuelGauge4lockEv>
}
   b8a00:	4620      	mov	r0, r4
   b8a02:	bd10      	pop	{r4, pc}

000b8a04 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b8a04:	b513      	push	{r0, r1, r4, lr}
   b8a06:	4604      	mov	r4, r0
   b8a08:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b8a0a:	f002 fc87 	bl	bb31c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8a0e:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b8a10:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b8a12:	4620      	mov	r0, r4
   b8a14:	f7ff ffed 	bl	b89f2 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8a18:	4620      	mov	r0, r4
   b8a1a:	b002      	add	sp, #8
   b8a1c:	bd10      	pop	{r4, pc}

000b8a1e <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b8a1e:	6800      	ldr	r0, [r0, #0]
   b8a20:	f000 b941 	b.w	b8ca6 <_ZN7TwoWire6unlockEv>

000b8a24 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   b8a24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8a28:	4604      	mov	r4, r0
   b8a2a:	460d      	mov	r5, r1
   b8a2c:	4617      	mov	r7, r2
   b8a2e:	461e      	mov	r6, r3
   b8a30:	f7ff ffdc 	bl	b89ec <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8a34:	2236      	movs	r2, #54	; 0x36
   b8a36:	2300      	movs	r3, #0
   b8a38:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b8a3c:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b8a3e:	230a      	movs	r3, #10
   b8a40:	f04f 0801 	mov.w	r8, #1
   b8a44:	4669      	mov	r1, sp
   b8a46:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8a4a:	f000 f907 	bl	b8c5c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   b8a4e:	6820      	ldr	r0, [r4, #0]
   b8a50:	6803      	ldr	r3, [r0, #0]
   b8a52:	4629      	mov	r1, r5
   b8a54:	689b      	ldr	r3, [r3, #8]
   b8a56:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b8a58:	6820      	ldr	r0, [r4, #0]
   b8a5a:	4641      	mov	r1, r8
   b8a5c:	f000 f916 	bl	b8c8c <_ZN7TwoWire15endTransmissionEh>
   b8a60:	4605      	mov	r5, r0
   b8a62:	b140      	cbz	r0, b8a76 <_ZN9FuelGauge12readRegisterEhRhS0_+0x52>
   b8a64:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   b8a68:	4620      	mov	r0, r4
   b8a6a:	f7ff ffd8 	bl	b8a1e <_ZN9FuelGauge6unlockEv>
}
   b8a6e:	4628      	mov	r0, r5
   b8a70:	b004      	add	sp, #16
   b8a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   b8a76:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   b8a78:	6820      	ldr	r0, [r4, #0]
   b8a7a:	9301      	str	r3, [sp, #4]
   b8a7c:	4669      	mov	r1, sp
   b8a7e:	f000 f8bd 	bl	b8bfc <_ZN7TwoWire11requestFromERK16WireTransmission>
   b8a82:	2802      	cmp	r0, #2
   b8a84:	d1ee      	bne.n	b8a64 <_ZN9FuelGauge12readRegisterEhRhS0_+0x40>
    MSB = i2c_.read();
   b8a86:	6820      	ldr	r0, [r4, #0]
   b8a88:	6803      	ldr	r3, [r0, #0]
   b8a8a:	695b      	ldr	r3, [r3, #20]
   b8a8c:	4798      	blx	r3
   b8a8e:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   b8a90:	6820      	ldr	r0, [r4, #0]
   b8a92:	6803      	ldr	r3, [r0, #0]
   b8a94:	695b      	ldr	r3, [r3, #20]
   b8a96:	4798      	blx	r3
   b8a98:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   b8a9a:	e7e5      	b.n	b8a68 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>

000b8a9c <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   b8a9c:	b510      	push	{r4, lr}
   b8a9e:	b08c      	sub	sp, #48	; 0x30
    byte MSB = 0;
   b8aa0:	2300      	movs	r3, #0
   b8aa2:	f88d 300e 	strb.w	r3, [sp, #14]
    byte LSB = 0;
   b8aa6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   b8aaa:	2104      	movs	r1, #4
   b8aac:	f10d 030f 	add.w	r3, sp, #15
   b8ab0:	f10d 020e 	add.w	r2, sp, #14
   b8ab4:	f7ff ffb6 	bl	b8a24 <_ZN9FuelGauge12readRegisterEhRhS0_>
   b8ab8:	4601      	mov	r1, r0
   b8aba:	b9c8      	cbnz	r0, b8af0 <_ZN9FuelGauge6getSoCEv+0x54>
    hal_power_config config = {};
   b8abc:	2420      	movs	r4, #32
   b8abe:	9001      	str	r0, [sp, #4]
   b8ac0:	4622      	mov	r2, r4
   b8ac2:	a804      	add	r0, sp, #16
   b8ac4:	f003 f9c4 	bl	bbe50 <memset>
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b8ac8:	9901      	ldr	r1, [sp, #4]
    config.size = sizeof(config);
   b8aca:	f88d 4015 	strb.w	r4, [sp, #21]
    if (system_power_management_get_config(&config, nullptr) == SYSTEM_ERROR_NONE) {
   b8ace:	a804      	add	r0, sp, #16
   b8ad0:	f7ff fa1c 	bl	b7f0c <system_power_management_get_config>
   b8ad4:	b950      	cbnz	r0, b8aec <_ZN9FuelGauge6getSoCEv+0x50>
        soc_bits = config.soc_bits;
   b8ad6:	f89d 201e 	ldrb.w	r2, [sp, #30]
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b8ada:	f89d 100f 	ldrb.w	r1, [sp, #15]
   b8ade:	f89d 000e 	ldrb.w	r0, [sp, #14]
}
   b8ae2:	b00c      	add	sp, #48	; 0x30
   b8ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return particle::detail::_getSoC(MSB, LSB, soc_bits);
   b8ae8:	f7ff bf6c 	b.w	b89c4 <_ZN8particle6detail7_getSoCEhhh>
    int soc_bits = particle::power::DEFAULT_SOC_18_BIT_PRECISION;
   b8aec:	2212      	movs	r2, #18
   b8aee:	e7f4      	b.n	b8ada <_ZN9FuelGauge6getSoCEv+0x3e>
}
   b8af0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b8af4:	b00c      	add	sp, #48	; 0x30
   b8af6:	bd10      	pop	{r4, pc}

000b8af8 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b8af8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8afc:	4604      	mov	r4, r0
   b8afe:	461d      	mov	r5, r3
   b8b00:	460f      	mov	r7, r1
   b8b02:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b8b04:	f7ff ff72 	bl	b89ec <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8b08:	2236      	movs	r2, #54	; 0x36
   b8b0a:	2300      	movs	r3, #0
   b8b0c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b8b10:	6820      	ldr	r0, [r4, #0]
    timeout_ = ms;
   b8b12:	f04f 0801 	mov.w	r8, #1
   b8b16:	230a      	movs	r3, #10
   b8b18:	4669      	mov	r1, sp
   b8b1a:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8b1e:	f000 f89d 	bl	b8c5c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b8b22:	6820      	ldr	r0, [r4, #0]
   b8b24:	6803      	ldr	r3, [r0, #0]
   b8b26:	4639      	mov	r1, r7
   b8b28:	689b      	ldr	r3, [r3, #8]
   b8b2a:	4798      	blx	r3
    i2c_.write(MSB);
   b8b2c:	6820      	ldr	r0, [r4, #0]
   b8b2e:	6803      	ldr	r3, [r0, #0]
   b8b30:	4631      	mov	r1, r6
   b8b32:	689b      	ldr	r3, [r3, #8]
   b8b34:	4798      	blx	r3
    i2c_.write(LSB);
   b8b36:	6820      	ldr	r0, [r4, #0]
   b8b38:	6803      	ldr	r3, [r0, #0]
   b8b3a:	4629      	mov	r1, r5
   b8b3c:	689b      	ldr	r3, [r3, #8]
   b8b3e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b8b40:	4641      	mov	r1, r8
   b8b42:	6820      	ldr	r0, [r4, #0]
   b8b44:	f000 f8a2 	bl	b8c8c <_ZN7TwoWire15endTransmissionEh>
   b8b48:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b8b4a:	4620      	mov	r0, r4
   b8b4c:	bf0c      	ite	eq
   b8b4e:	2500      	moveq	r5, #0
   b8b50:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b8b54:	f7ff ff63 	bl	b8a1e <_ZN9FuelGauge6unlockEv>
}
   b8b58:	4628      	mov	r0, r5
   b8b5a:	b004      	add	sp, #16
   b8b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8b60 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b8b60:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b8b62:	2240      	movs	r2, #64	; 0x40
   b8b64:	2300      	movs	r3, #0
   b8b66:	2106      	movs	r1, #6
   b8b68:	f7ff ffc6 	bl	b8af8 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b8b6c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8b70:	bd08      	pop	{r3, pc}

000b8b72 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8b72:	4770      	bx	lr

000b8b74 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b76:	4606      	mov	r6, r0
   b8b78:	4615      	mov	r5, r2
   b8b7a:	460c      	mov	r4, r1
   b8b7c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8b7e:	42bc      	cmp	r4, r7
   b8b80:	d006      	beq.n	b8b90 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8b82:	6833      	ldr	r3, [r6, #0]
   b8b84:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8b88:	689b      	ldr	r3, [r3, #8]
   b8b8a:	4630      	mov	r0, r6
   b8b8c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8b8e:	e7f6      	b.n	b8b7e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8b90:	4628      	mov	r0, r5
   b8b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8b94 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8b94:	7c00      	ldrb	r0, [r0, #16]
   b8b96:	2200      	movs	r2, #0
   b8b98:	f7fe bfd6 	b.w	b7b48 <hal_i2c_write>

000b8b9c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8b9c:	7c00      	ldrb	r0, [r0, #16]
   b8b9e:	2100      	movs	r1, #0
   b8ba0:	f7fe bfda 	b.w	b7b58 <hal_i2c_available>

000b8ba4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8ba4:	7c00      	ldrb	r0, [r0, #16]
   b8ba6:	2100      	movs	r1, #0
   b8ba8:	f7fe bfde 	b.w	b7b68 <hal_i2c_read>

000b8bac <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8bac:	7c00      	ldrb	r0, [r0, #16]
   b8bae:	2100      	movs	r1, #0
   b8bb0:	f7fe bfe2 	b.w	b7b78 <hal_i2c_peek>

000b8bb4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8bb4:	7c00      	ldrb	r0, [r0, #16]
   b8bb6:	2100      	movs	r1, #0
   b8bb8:	f7fe bfe6 	b.w	b7b88 <hal_i2c_flush>

000b8bbc <_ZN7TwoWireD0Ev>:
   b8bbc:	b510      	push	{r4, lr}
   b8bbe:	2114      	movs	r1, #20
   b8bc0:	4604      	mov	r4, r0
   b8bc2:	f7fb fa6c 	bl	b409e <_ZdlPvj>
   b8bc6:	4620      	mov	r0, r4
   b8bc8:	bd10      	pop	{r4, pc}
	...

000b8bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8bcc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8bd2:	4604      	mov	r4, r0
   b8bd4:	4608      	mov	r0, r1
   b8bd6:	2100      	movs	r1, #0
   b8bd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8bdc:	4b03      	ldr	r3, [pc, #12]	; (b8bec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8bde:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8be0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8be2:	4611      	mov	r1, r2
   b8be4:	f7fe ffe0 	bl	b7ba8 <hal_i2c_init>
}
   b8be8:	4620      	mov	r0, r4
   b8bea:	bd10      	pop	{r4, pc}
   b8bec:	000bd0cc 	.word	0x000bd0cc

000b8bf0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8bf0:	2300      	movs	r3, #0
   b8bf2:	7c00      	ldrb	r0, [r0, #16]
   b8bf4:	461a      	mov	r2, r3
   b8bf6:	4619      	mov	r1, r3
   b8bf8:	f7fe bf8e 	b.w	b7b18 <hal_i2c_begin>

000b8bfc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8bfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8bfe:	2200      	movs	r2, #0
   b8c00:	2314      	movs	r3, #20
   b8c02:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8c06:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8c0a:	780b      	ldrb	r3, [r1, #0]
   b8c0c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8c10:	684b      	ldr	r3, [r1, #4]
   b8c12:	9303      	str	r3, [sp, #12]
   b8c14:	68cb      	ldr	r3, [r1, #12]
   b8c16:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8c18:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8c1a:	7a0b      	ldrb	r3, [r1, #8]
   b8c1c:	9305      	str	r3, [sp, #20]
   b8c1e:	a901      	add	r1, sp, #4
   b8c20:	f7fe ffda 	bl	b7bd8 <hal_i2c_request_ex>
}
   b8c24:	b007      	add	sp, #28
   b8c26:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c2a <_ZN7TwoWire11requestFromEhjh>:
{
   b8c2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8c2c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8c2e:	f88d 1000 	strb.w	r1, [sp]
   b8c32:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8c36:	9103      	str	r1, [sp, #12]
   b8c38:	bf18      	it	ne
   b8c3a:	2301      	movne	r3, #1
   b8c3c:	4669      	mov	r1, sp
    size_ = size;
   b8c3e:	9201      	str	r2, [sp, #4]
   b8c40:	f88d 3008 	strb.w	r3, [sp, #8]
   b8c44:	f7ff ffda 	bl	b8bfc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8c48:	b005      	add	sp, #20
   b8c4a:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c4e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8c4e:	7c00      	ldrb	r0, [r0, #16]
   b8c50:	2200      	movs	r2, #0
   b8c52:	f7fe bf69 	b.w	b7b28 <hal_i2c_begin_transmission>

000b8c56 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8c56:	b2c9      	uxtb	r1, r1
   b8c58:	f7ff bff9 	b.w	b8c4e <_ZN7TwoWire17beginTransmissionEh>

000b8c5c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b8c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8c5e:	2300      	movs	r3, #0
   b8c60:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b8c64:	684a      	ldr	r2, [r1, #4]
   b8c66:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b8c68:	2314      	movs	r3, #20
    };
   b8c6a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b8c6c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b8c70:	780b      	ldrb	r3, [r1, #0]
    };
   b8c72:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8c74:	7a0a      	ldrb	r2, [r1, #8]
   b8c76:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b8c78:	7c00      	ldrb	r0, [r0, #16]
    };
   b8c7a:	f88d 3008 	strb.w	r3, [sp, #8]
   b8c7e:	aa01      	add	r2, sp, #4
   b8c80:	4619      	mov	r1, r3
   b8c82:	f7fe ff51 	bl	b7b28 <hal_i2c_begin_transmission>
}
   b8c86:	b007      	add	sp, #28
   b8c88:	f85d fb04 	ldr.w	pc, [sp], #4

000b8c8c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8c8c:	7c00      	ldrb	r0, [r0, #16]
   b8c8e:	2200      	movs	r2, #0
   b8c90:	f7fe bf52 	b.w	b7b38 <hal_i2c_end_transmission>

000b8c94 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b8c94:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b8c96:	2100      	movs	r1, #0
   b8c98:	7c00      	ldrb	r0, [r0, #16]
   b8c9a:	f7fe ff8d 	bl	b7bb8 <hal_i2c_lock>
}
   b8c9e:	fab0 f080 	clz	r0, r0
   b8ca2:	0940      	lsrs	r0, r0, #5
   b8ca4:	bd08      	pop	{r3, pc}

000b8ca6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b8ca6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b8ca8:	2100      	movs	r1, #0
   b8caa:	7c00      	ldrb	r0, [r0, #16]
   b8cac:	f7fe ff8c 	bl	b7bc8 <hal_i2c_unlock>
}
   b8cb0:	fab0 f080 	clz	r0, r0
   b8cb4:	0940      	lsrs	r0, r0, #5
   b8cb6:	bd08      	pop	{r3, pc}

000b8cb8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8cb8:	4700      	bx	r0
	...

000b8cbc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8cbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b8cc0:	2400      	movs	r4, #0
{
   b8cc2:	461d      	mov	r5, r3
   b8cc4:	460f      	mov	r7, r1
   b8cc6:	4690      	mov	r8, r2
   b8cc8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b8cca:	f7fe ff15 	bl	b7af8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b8cce:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8cd0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b8cd4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8cd8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b8cdc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8ce0:	bfa2      	ittt	ge
   b8ce2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b8ce6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b8cea:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8cec:	4907      	ldr	r1, [pc, #28]	; (b8d0c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8cee:	9400      	str	r4, [sp, #0]
   b8cf0:	4643      	mov	r3, r8
   b8cf2:	463a      	mov	r2, r7
   b8cf4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8cf6:	bfa8      	it	ge
   b8cf8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8cfc:	f7fe fef4 	bl	b7ae8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b8d00:	fab0 f080 	clz	r0, r0
   b8d04:	0940      	lsrs	r0, r0, #5
   b8d06:	b004      	add	sp, #16
   b8d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8d0c:	000b8cb9 	.word	0x000b8cb9

000b8d10 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8d10:	4770      	bx	lr

000b8d12 <_ZN9IPAddressD0Ev>:
   b8d12:	b510      	push	{r4, lr}
   b8d14:	2118      	movs	r1, #24
   b8d16:	4604      	mov	r4, r0
   b8d18:	f7fb f9c1 	bl	b409e <_ZdlPvj>
   b8d1c:	4620      	mov	r0, r4
   b8d1e:	bd10      	pop	{r4, pc}

000b8d20 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8d20:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8d22:	7d03      	ldrb	r3, [r0, #20]
   b8d24:	2b06      	cmp	r3, #6
{
   b8d26:	b08d      	sub	sp, #52	; 0x34
   b8d28:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8d2a:	f100 0704 	add.w	r7, r0, #4
   b8d2e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8d32:	d012      	beq.n	b8d5a <_ZNK9IPAddress7printToER5Print+0x3a>
   b8d34:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8d38:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8d3c:	220a      	movs	r2, #10
   b8d3e:	4630      	mov	r0, r6
   b8d40:	f001 fb49 	bl	ba3d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8d44:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8d46:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8d48:	d019      	beq.n	b8d7e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8d4a:	2c00      	cmp	r4, #0
   b8d4c:	d0f4      	beq.n	b8d38 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8d4e:	212e      	movs	r1, #46	; 0x2e
   b8d50:	4630      	mov	r0, r6
   b8d52:	f001 fb31 	bl	ba3b8 <_ZN5Print5printEc>
   b8d56:	4404      	add	r4, r0
   b8d58:	e7ee      	b.n	b8d38 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8d5a:	232f      	movs	r3, #47	; 0x2f
   b8d5c:	466a      	mov	r2, sp
   b8d5e:	4639      	mov	r1, r7
   b8d60:	200a      	movs	r0, #10
		buf[0] = 0;
   b8d62:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8d66:	f7fe ff3f 	bl	b7be8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8d6a:	4668      	mov	r0, sp
   b8d6c:	f003 f92b 	bl	bbfc6 <strlen>
   b8d70:	6833      	ldr	r3, [r6, #0]
   b8d72:	4602      	mov	r2, r0
   b8d74:	68db      	ldr	r3, [r3, #12]
   b8d76:	4669      	mov	r1, sp
   b8d78:	4630      	mov	r0, r6
   b8d7a:	4798      	blx	r3
   b8d7c:	4604      	mov	r4, r0
    }
    return n;
}
   b8d7e:	4620      	mov	r0, r4
   b8d80:	b00d      	add	sp, #52	; 0x34
   b8d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8d84 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8d84:	b510      	push	{r4, lr}
   b8d86:	4b05      	ldr	r3, [pc, #20]	; (b8d9c <_ZN9IPAddressC1Ev+0x18>)
   b8d88:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8d8a:	2211      	movs	r2, #17
   b8d8c:	f840 3b04 	str.w	r3, [r0], #4
   b8d90:	2100      	movs	r1, #0
   b8d92:	f003 f85d 	bl	bbe50 <memset>
}
   b8d96:	4620      	mov	r0, r4
   b8d98:	bd10      	pop	{r4, pc}
   b8d9a:	bf00      	nop
   b8d9c:	000bd0f4 	.word	0x000bd0f4

000b8da0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8da0:	4603      	mov	r3, r0
   b8da2:	4a07      	ldr	r2, [pc, #28]	; (b8dc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8da4:	b510      	push	{r4, lr}
   b8da6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8daa:	f101 0210 	add.w	r2, r1, #16
   b8dae:	f851 4b04 	ldr.w	r4, [r1], #4
   b8db2:	f843 4b04 	str.w	r4, [r3], #4
   b8db6:	4291      	cmp	r1, r2
   b8db8:	d1f9      	bne.n	b8dae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8dba:	780a      	ldrb	r2, [r1, #0]
   b8dbc:	701a      	strb	r2, [r3, #0]
}
   b8dbe:	bd10      	pop	{r4, pc}
   b8dc0:	000bd0f4 	.word	0x000bd0f4

000b8dc4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8dc4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8dc6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8dca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8dce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8dd2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8dd6:	2304      	movs	r3, #4
   b8dd8:	6041      	str	r1, [r0, #4]
   b8dda:	7503      	strb	r3, [r0, #20]
}
   b8ddc:	bd10      	pop	{r4, pc}
	...

000b8de0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8de0:	b507      	push	{r0, r1, r2, lr}
   b8de2:	4b06      	ldr	r3, [pc, #24]	; (b8dfc <_ZN9IPAddressC1EPKh+0x1c>)
   b8de4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8de6:	78cb      	ldrb	r3, [r1, #3]
   b8de8:	9300      	str	r3, [sp, #0]
   b8dea:	788b      	ldrb	r3, [r1, #2]
   b8dec:	784a      	ldrb	r2, [r1, #1]
   b8dee:	7809      	ldrb	r1, [r1, #0]
   b8df0:	f7ff ffe8 	bl	b8dc4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8df4:	b003      	add	sp, #12
   b8df6:	f85d fb04 	ldr.w	pc, [sp], #4
   b8dfa:	bf00      	nop
   b8dfc:	000bd0f4 	.word	0x000bd0f4

000b8e00 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b8e00:	f100 0310 	add.w	r3, r0, #16
   b8e04:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b8e06:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b8e0a:	2901      	cmp	r1, #1
   b8e0c:	4618      	mov	r0, r3
   b8e0e:	d108      	bne.n	b8e22 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b8e10:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b8e14:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b8e18:	3a01      	subs	r2, #1
   b8e1a:	f103 0310 	add.w	r3, r3, #16
   b8e1e:	d1f2      	bne.n	b8e06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b8e20:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b8e22:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b8e24:	bf04      	itt	eq
   b8e26:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b8e2a:	1852      	addeq	r2, r2, r1
   b8e2c:	e7f4      	b.n	b8e18 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b8e2e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b8e2e:	b40e      	push	{r1, r2, r3}
   b8e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8e32:	b088      	sub	sp, #32
   b8e34:	af00      	add	r7, sp, #0
   b8e36:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8e3a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8e3c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8e40:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8e42:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8e44:	462b      	mov	r3, r5
   b8e46:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b8e48:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8e4a:	f7ff f921 	bl	b8090 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b8e4e:	280f      	cmp	r0, #15
   b8e50:	687a      	ldr	r2, [r7, #4]
   b8e52:	d91a      	bls.n	b8e8a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b8e54:	f100 0308 	add.w	r3, r0, #8
   b8e58:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b8e5c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b8e5e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8e62:	1c41      	adds	r1, r0, #1
   b8e64:	462b      	mov	r3, r5
   b8e66:	4668      	mov	r0, sp
        va_start(args, fmt);
   b8e68:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8e6a:	f7ff f911 	bl	b8090 <vsnprintf>
        if (n > 0) {
   b8e6e:	1e02      	subs	r2, r0, #0
   b8e70:	dd04      	ble.n	b8e7c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b8e72:	6823      	ldr	r3, [r4, #0]
   b8e74:	4669      	mov	r1, sp
   b8e76:	689b      	ldr	r3, [r3, #8]
   b8e78:	4620      	mov	r0, r4
   b8e7a:	4798      	blx	r3
   b8e7c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b8e7e:	3720      	adds	r7, #32
   b8e80:	46bd      	mov	sp, r7
   b8e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8e86:	b003      	add	sp, #12
   b8e88:	4770      	bx	lr
    } else if (n > 0) {
   b8e8a:	2800      	cmp	r0, #0
   b8e8c:	d0f7      	beq.n	b8e7e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b8e8e:	6823      	ldr	r3, [r4, #0]
   b8e90:	4602      	mov	r2, r0
   b8e92:	689b      	ldr	r3, [r3, #8]
   b8e94:	f107 0110 	add.w	r1, r7, #16
   b8e98:	4620      	mov	r0, r4
   b8e9a:	4798      	blx	r3
}
   b8e9c:	e7ef      	b.n	b8e7e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b8e9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8e9e:	b538      	push	{r3, r4, r5, lr}
   b8ea0:	680b      	ldr	r3, [r1, #0]
   b8ea2:	6003      	str	r3, [r0, #0]
   b8ea4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b8ea6:	6843      	ldr	r3, [r0, #4]
   b8ea8:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8eaa:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b8eac:	d008      	beq.n	b8ec0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b8eae:	b115      	cbz	r5, b8eb6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b8eb0:	686b      	ldr	r3, [r5, #4]
   b8eb2:	3301      	adds	r3, #1
   b8eb4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b8eb6:	6860      	ldr	r0, [r4, #4]
   b8eb8:	b108      	cbz	r0, b8ebe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b8eba:	f7ff f950 	bl	b815e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b8ebe:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8ec0:	bd38      	pop	{r3, r4, r5, pc}

000b8ec2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b8ec2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b8ec4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b8ec6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b8eca:	689b      	ldr	r3, [r3, #8]
   b8ecc:	2201      	movs	r2, #1
   b8ece:	f10d 0107 	add.w	r1, sp, #7
   b8ed2:	4798      	blx	r3
}
   b8ed4:	b003      	add	sp, #12
   b8ed6:	f85d fb04 	ldr.w	pc, [sp], #4

000b8eda <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b8eda:	460b      	mov	r3, r1
   b8edc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b8ede:	2200      	movs	r2, #0
   b8ee0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b8ee2:	e9c0 2200 	strd	r2, r2, [r0]
   b8ee6:	4604      	mov	r4, r0
        t_ = t;
   b8ee8:	6083      	str	r3, [r0, #8]
    if (t) {
   b8eea:	b90b      	cbnz	r3, b8ef0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b8eec:	4620      	mov	r0, r4
   b8eee:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b8ef0:	f7ff ffd5 	bl	b8e9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b8ef4:	e7fa      	b.n	b8eec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b8ef6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b8ef6:	6883      	ldr	r3, [r0, #8]
   b8ef8:	b1eb      	cbz	r3, b8f36 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b8efa:	781a      	ldrb	r2, [r3, #0]
   b8efc:	2a03      	cmp	r2, #3
   b8efe:	d81a      	bhi.n	b8f36 <_ZNK5spark9JSONValue4typeEv+0x40>
   b8f00:	e8df f002 	tbb	[pc, r2]
   b8f04:	1b021704 	.word	0x1b021704
   b8f08:	2005      	movs	r0, #5
   b8f0a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b8f0c:	6802      	ldr	r2, [r0, #0]
   b8f0e:	685b      	ldr	r3, [r3, #4]
   b8f10:	6852      	ldr	r2, [r2, #4]
   b8f12:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b8f14:	282d      	cmp	r0, #45	; 0x2d
   b8f16:	d012      	beq.n	b8f3e <_ZNK5spark9JSONValue4typeEv+0x48>
   b8f18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8f1c:	2b09      	cmp	r3, #9
   b8f1e:	d90e      	bls.n	b8f3e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b8f20:	2874      	cmp	r0, #116	; 0x74
   b8f22:	d00e      	beq.n	b8f42 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b8f24:	2866      	cmp	r0, #102	; 0x66
   b8f26:	d00c      	beq.n	b8f42 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b8f28:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b8f2c:	4258      	negs	r0, r3
   b8f2e:	4158      	adcs	r0, r3
   b8f30:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b8f32:	2006      	movs	r0, #6
   b8f34:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b8f36:	2000      	movs	r0, #0
   b8f38:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b8f3a:	2004      	movs	r0, #4
   b8f3c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b8f3e:	2003      	movs	r0, #3
   b8f40:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b8f42:	2002      	movs	r0, #2
}
   b8f44:	4770      	bx	lr

000b8f46 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b8f46:	b510      	push	{r4, lr}
   b8f48:	4604      	mov	r4, r0
    switch (type()) {
   b8f4a:	f7ff ffd4 	bl	b8ef6 <_ZNK5spark9JSONValue4typeEv>
   b8f4e:	2802      	cmp	r0, #2
   b8f50:	d00e      	beq.n	b8f70 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b8f52:	1ec3      	subs	r3, r0, #3
   b8f54:	b2db      	uxtb	r3, r3
   b8f56:	2b01      	cmp	r3, #1
   b8f58:	d814      	bhi.n	b8f84 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b8f5a:	6822      	ldr	r2, [r4, #0]
   b8f5c:	68a3      	ldr	r3, [r4, #8]
   b8f5e:	6850      	ldr	r0, [r2, #4]
   b8f60:	685b      	ldr	r3, [r3, #4]
}
   b8f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b8f66:	220a      	movs	r2, #10
   b8f68:	2100      	movs	r1, #0
   b8f6a:	4418      	add	r0, r3
   b8f6c:	f003 b8f0 	b.w	bc150 <strtol>
        const char* const s = d_->json + t_->start;
   b8f70:	6822      	ldr	r2, [r4, #0]
   b8f72:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b8f74:	6852      	ldr	r2, [r2, #4]
   b8f76:	685b      	ldr	r3, [r3, #4]
   b8f78:	5cd0      	ldrb	r0, [r2, r3]
   b8f7a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b8f7e:	4258      	negs	r0, r3
   b8f80:	4158      	adcs	r0, r3
}
   b8f82:	bd10      	pop	{r4, pc}
    switch (type()) {
   b8f84:	2000      	movs	r0, #0
   b8f86:	e7fc      	b.n	b8f82 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b8f88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b8f88:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b8f8a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b8f8c:	e9c0 3300 	strd	r3, r3, [r0]
   b8f90:	4604      	mov	r4, r0
        n_(0) {
   b8f92:	480e      	ldr	r0, [pc, #56]	; (b8fcc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b8f94:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b8f98:	b1a9      	cbz	r1, b8fc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b8f9a:	780b      	ldrb	r3, [r1, #0]
   b8f9c:	2b03      	cmp	r3, #3
   b8f9e:	d006      	beq.n	b8fae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b8fa0:	b98b      	cbnz	r3, b8fc6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b8fa2:	6813      	ldr	r3, [r2, #0]
   b8fa4:	6858      	ldr	r0, [r3, #4]
   b8fa6:	684b      	ldr	r3, [r1, #4]
   b8fa8:	5cc3      	ldrb	r3, [r0, r3]
   b8faa:	2b6e      	cmp	r3, #110	; 0x6e
   b8fac:	d007      	beq.n	b8fbe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b8fae:	6813      	ldr	r3, [r2, #0]
   b8fb0:	684d      	ldr	r5, [r1, #4]
   b8fb2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b8fb4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b8fb6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b8fb8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b8fba:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b8fbc:	60e3      	str	r3, [r4, #12]
   b8fbe:	4611      	mov	r1, r2
   b8fc0:	4620      	mov	r0, r4
   b8fc2:	f7ff ff6c 	bl	b8e9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b8fc6:	4620      	mov	r0, r4
   b8fc8:	bd38      	pop	{r3, r4, r5, pc}
   b8fca:	bf00      	nop
   b8fcc:	000bd15d 	.word	0x000bd15d

000b8fd0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b8fd0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b8fd2:	2500      	movs	r5, #0
   b8fd4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b8fd6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b8fda:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b8fde:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8fe2:	4604      	mov	r4, r0
   b8fe4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b8fe6:	b14b      	cbz	r3, b8ffc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b8fe8:	781a      	ldrb	r2, [r3, #0]
   b8fea:	2a01      	cmp	r2, #1
   b8fec:	d106      	bne.n	b8ffc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b8fee:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b8ff2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b8ff4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b8ff6:	6143      	str	r3, [r0, #20]
   b8ff8:	f7ff ff51 	bl	b8e9e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b8ffc:	4620      	mov	r0, r4
   b8ffe:	bd38      	pop	{r3, r4, r5, pc}

000b9000 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b9000:	b510      	push	{r4, lr}
    if (!n_) {
   b9002:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b9004:	4604      	mov	r4, r0
    if (!n_) {
   b9006:	b163      	cbz	r3, b9022 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9008:	6880      	ldr	r0, [r0, #8]
   b900a:	60e0      	str	r0, [r4, #12]
    --n_;
   b900c:	3b01      	subs	r3, #1
    ++t_;
   b900e:	3010      	adds	r0, #16
   b9010:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b9012:	6120      	str	r0, [r4, #16]
    --n_;
   b9014:	6163      	str	r3, [r4, #20]
    if (n_) {
   b9016:	b113      	cbz	r3, b901e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9018:	f7ff fef2 	bl	b8e00 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b901c:	60a0      	str	r0, [r4, #8]
    return true;
   b901e:	2001      	movs	r0, #1
   b9020:	e000      	b.n	b9024 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b9022:	4618      	mov	r0, r3
}
   b9024:	bd10      	pop	{r4, pc}

000b9026 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9026:	b510      	push	{r4, lr}
    write('}');
   b9028:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b902a:	4604      	mov	r4, r0
    write('}');
   b902c:	f7ff ff49 	bl	b8ec2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9030:	2301      	movs	r3, #1
   b9032:	7123      	strb	r3, [r4, #4]
}
   b9034:	4620      	mov	r0, r4
   b9036:	bd10      	pop	{r4, pc}

000b9038 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9038:	b508      	push	{r3, lr}
    switch (state_) {
   b903a:	7903      	ldrb	r3, [r0, #4]
   b903c:	2b01      	cmp	r3, #1
   b903e:	d002      	beq.n	b9046 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b9040:	2b02      	cmp	r3, #2
   b9042:	d004      	beq.n	b904e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b9044:	bd08      	pop	{r3, pc}
        write(',');
   b9046:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9048:	f7ff ff3b 	bl	b8ec2 <_ZN5spark10JSONWriter5writeEc>
}
   b904c:	e7fa      	b.n	b9044 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b904e:	213a      	movs	r1, #58	; 0x3a
   b9050:	e7fa      	b.n	b9048 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b9052 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b9052:	b510      	push	{r4, lr}
   b9054:	4604      	mov	r4, r0
    writeSeparator();
   b9056:	f7ff ffef 	bl	b9038 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b905a:	4620      	mov	r0, r4
   b905c:	217b      	movs	r1, #123	; 0x7b
   b905e:	f7ff ff30 	bl	b8ec2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b9062:	2300      	movs	r3, #0
   b9064:	7123      	strb	r3, [r4, #4]
}
   b9066:	4620      	mov	r0, r4
   b9068:	bd10      	pop	{r4, pc}
	...

000b906c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b906c:	b513      	push	{r0, r1, r4, lr}
   b906e:	4604      	mov	r4, r0
   b9070:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9072:	f7ff ffe1 	bl	b9038 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b9076:	6823      	ldr	r3, [r4, #0]
   b9078:	9a01      	ldr	r2, [sp, #4]
   b907a:	68db      	ldr	r3, [r3, #12]
   b907c:	4903      	ldr	r1, [pc, #12]	; (b908c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b907e:	4620      	mov	r0, r4
   b9080:	4798      	blx	r3
    state_ = NEXT;
   b9082:	2301      	movs	r3, #1
}
   b9084:	4620      	mov	r0, r4
    state_ = NEXT;
   b9086:	7123      	strb	r3, [r4, #4]
}
   b9088:	b002      	add	sp, #8
   b908a:	bd10      	pop	{r4, pc}
   b908c:	000bcbbb 	.word	0x000bcbbb

000b9090 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9090:	b513      	push	{r0, r1, r4, lr}
   b9092:	4604      	mov	r4, r0
   b9094:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9096:	f7ff ffcf 	bl	b9038 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b909a:	6823      	ldr	r3, [r4, #0]
   b909c:	9a01      	ldr	r2, [sp, #4]
   b909e:	68db      	ldr	r3, [r3, #12]
   b90a0:	4903      	ldr	r1, [pc, #12]	; (b90b0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b90a2:	4620      	mov	r0, r4
   b90a4:	4798      	blx	r3
    state_ = NEXT;
   b90a6:	2301      	movs	r3, #1
}
   b90a8:	4620      	mov	r0, r4
    state_ = NEXT;
   b90aa:	7123      	strb	r3, [r4, #4]
}
   b90ac:	b002      	add	sp, #8
   b90ae:	bd10      	pop	{r4, pc}
   b90b0:	000bcd47 	.word	0x000bcd47

000b90b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b90b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b90b8:	460d      	mov	r5, r1
    write('"');
   b90ba:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b90bc:	4690      	mov	r8, r2
   b90be:	4604      	mov	r4, r0
    write('"');
   b90c0:	f7ff feff 	bl	b8ec2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b90c4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b916c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b90c8:	44a8      	add	r8, r5
    const char *s = str;
   b90ca:	462f      	mov	r7, r5
    while (s != end) {
   b90cc:	4547      	cmp	r7, r8
   b90ce:	46ba      	mov	sl, r7
   b90d0:	d03d      	beq.n	b914e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b90d2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b90d6:	2e22      	cmp	r6, #34	; 0x22
   b90d8:	d006      	beq.n	b90e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b90da:	2e5c      	cmp	r6, #92	; 0x5c
   b90dc:	d004      	beq.n	b90e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b90de:	4630      	mov	r0, r6
   b90e0:	f002 fe86 	bl	bbdf0 <isprint>
   b90e4:	2800      	cmp	r0, #0
   b90e6:	d1f1      	bne.n	b90cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b90e8:	6823      	ldr	r3, [r4, #0]
   b90ea:	ebaa 0205 	sub.w	r2, sl, r5
   b90ee:	689b      	ldr	r3, [r3, #8]
   b90f0:	4629      	mov	r1, r5
   b90f2:	4620      	mov	r0, r4
   b90f4:	4798      	blx	r3
            write('\\');
   b90f6:	215c      	movs	r1, #92	; 0x5c
   b90f8:	4620      	mov	r0, r4
   b90fa:	f7ff fee2 	bl	b8ec2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b90fe:	2e0d      	cmp	r6, #13
   b9100:	d80a      	bhi.n	b9118 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b9102:	2e07      	cmp	r6, #7
   b9104:	d91c      	bls.n	b9140 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9106:	f1a6 0308 	sub.w	r3, r6, #8
   b910a:	2b05      	cmp	r3, #5
   b910c:	d818      	bhi.n	b9140 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b910e:	e8df f003 	tbb	[pc, r3]
   b9112:	0f0d      	.short	0x0f0d
   b9114:	15131711 	.word	0x15131711
   b9118:	2e22      	cmp	r6, #34	; 0x22
   b911a:	d001      	beq.n	b9120 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b911c:	2e5c      	cmp	r6, #92	; 0x5c
   b911e:	d10f      	bne.n	b9140 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b9120:	4631      	mov	r1, r6
                write('b');
   b9122:	4620      	mov	r0, r4
   b9124:	f7ff fecd 	bl	b8ec2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b9128:	463d      	mov	r5, r7
    while (s != end) {
   b912a:	e7cf      	b.n	b90cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b912c:	2162      	movs	r1, #98	; 0x62
   b912e:	e7f8      	b.n	b9122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b9130:	2174      	movs	r1, #116	; 0x74
   b9132:	e7f6      	b.n	b9122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b9134:	216e      	movs	r1, #110	; 0x6e
   b9136:	e7f4      	b.n	b9122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9138:	2166      	movs	r1, #102	; 0x66
   b913a:	e7f2      	b.n	b9122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b913c:	2172      	movs	r1, #114	; 0x72
   b913e:	e7f0      	b.n	b9122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b9140:	6823      	ldr	r3, [r4, #0]
   b9142:	4632      	mov	r2, r6
   b9144:	68db      	ldr	r3, [r3, #12]
   b9146:	4649      	mov	r1, r9
   b9148:	4620      	mov	r0, r4
   b914a:	4798      	blx	r3
                break;
   b914c:	e7ec      	b.n	b9128 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b914e:	42bd      	cmp	r5, r7
   b9150:	d005      	beq.n	b915e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b9152:	6823      	ldr	r3, [r4, #0]
   b9154:	1b7a      	subs	r2, r7, r5
   b9156:	689b      	ldr	r3, [r3, #8]
   b9158:	4629      	mov	r1, r5
   b915a:	4620      	mov	r0, r4
   b915c:	4798      	blx	r3
    }
    write('"');
   b915e:	2122      	movs	r1, #34	; 0x22
   b9160:	4620      	mov	r0, r4
   b9162:	f7ff feae 	bl	b8ec2 <_ZN5spark10JSONWriter5writeEc>
}
   b9166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b916a:	bf00      	nop
   b916c:	000bd100 	.word	0x000bd100

000b9170 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b9170:	b513      	push	{r0, r1, r4, lr}
   b9172:	4604      	mov	r4, r0
   b9174:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9178:	f7ff ff5e 	bl	b9038 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b917c:	4620      	mov	r0, r4
   b917e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9182:	f7ff ff97 	bl	b90b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b9186:	2302      	movs	r3, #2
}
   b9188:	4620      	mov	r0, r4
    state_ = VALUE;
   b918a:	7123      	strb	r3, [r4, #4]
}
   b918c:	b002      	add	sp, #8
   b918e:	bd10      	pop	{r4, pc}

000b9190 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b9190:	b513      	push	{r0, r1, r4, lr}
   b9192:	4604      	mov	r4, r0
   b9194:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9198:	f7ff ff4e 	bl	b9038 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b919c:	4620      	mov	r0, r4
   b919e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b91a2:	f7ff ff87 	bl	b90b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b91a6:	2301      	movs	r3, #1
}
   b91a8:	4620      	mov	r0, r4
    state_ = NEXT;
   b91aa:	7123      	strb	r3, [r4, #4]
}
   b91ac:	b002      	add	sp, #8
   b91ae:	bd10      	pop	{r4, pc}

000b91b0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b91b0:	6880      	ldr	r0, [r0, #8]
   b91b2:	6803      	ldr	r3, [r0, #0]
   b91b4:	68db      	ldr	r3, [r3, #12]
   b91b6:	4718      	bx	r3

000b91b8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b91b8:	4770      	bx	lr

000b91ba <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b91ba:	4608      	mov	r0, r1
   b91bc:	b111      	cbz	r1, b91c4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b91be:	680b      	ldr	r3, [r1, #0]
   b91c0:	685b      	ldr	r3, [r3, #4]
   b91c2:	4718      	bx	r3
}
   b91c4:	4770      	bx	lr

000b91c6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b91c6:	4770      	bx	lr

000b91c8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b91c8:	4770      	bx	lr

000b91ca <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b91ca:	4770      	bx	lr

000b91cc <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b91cc:	4770      	bx	lr

000b91ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b91ce:	b538      	push	{r3, r4, r5, lr}
   b91d0:	4604      	mov	r4, r0
   b91d2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b91d4:	6800      	ldr	r0, [r0, #0]
   b91d6:	212e      	movs	r1, #46	; 0x2e
   b91d8:	f002 febb 	bl	bbf52 <strchrnul>
    size = s - category;
   b91dc:	6823      	ldr	r3, [r4, #0]
   b91de:	1ac3      	subs	r3, r0, r3
   b91e0:	602b      	str	r3, [r5, #0]
    if (size) {
   b91e2:	b123      	cbz	r3, b91ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b91e4:	7803      	ldrb	r3, [r0, #0]
   b91e6:	b103      	cbz	r3, b91ea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b91e8:	3001      	adds	r0, #1
   b91ea:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b91ec:	6020      	str	r0, [r4, #0]
}
   b91ee:	4618      	mov	r0, r3
   b91f0:	bd38      	pop	{r3, r4, r5, pc}

000b91f2 <_ZN5spark16JSONStreamWriterD0Ev>:
   b91f2:	b510      	push	{r4, lr}
   b91f4:	210c      	movs	r1, #12
   b91f6:	4604      	mov	r4, r0
   b91f8:	f7fa ff51 	bl	b409e <_ZdlPvj>
   b91fc:	4620      	mov	r0, r4
   b91fe:	bd10      	pop	{r4, pc}

000b9200 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9200:	b510      	push	{r4, lr}
   b9202:	2104      	movs	r1, #4
   b9204:	4604      	mov	r4, r0
   b9206:	f7fa ff4a 	bl	b409e <_ZdlPvj>
   b920a:	4620      	mov	r0, r4
   b920c:	bd10      	pop	{r4, pc}

000b920e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b920e:	b510      	push	{r4, lr}
   b9210:	2104      	movs	r1, #4
   b9212:	4604      	mov	r4, r0
   b9214:	f7fa ff43 	bl	b409e <_ZdlPvj>
   b9218:	4620      	mov	r0, r4
   b921a:	bd10      	pop	{r4, pc}

000b921c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b921c:	f7fe bbe4 	b.w	b79e8 <os_mutex_recursive_lock>

000b9220 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9220:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9222:	f002 fea0 	bl	bbf66 <strcmp>
}
   b9226:	fab0 f080 	clz	r0, r0
   b922a:	0940      	lsrs	r0, r0, #5
   b922c:	bd08      	pop	{r3, pc}

000b922e <__tcf_1>:
   b922e:	4770      	bx	lr

000b9230 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9230:	b510      	push	{r4, lr}
   b9232:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9234:	f001 feb4 	bl	bafa0 <_Z16_fetch_usbserialv>
   b9238:	4284      	cmp	r4, r0
   b923a:	d010      	beq.n	b925e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b923c:	f002 f8ae 	bl	bb39c <_Z22__fetch_global_Serial1v>
   b9240:	4284      	cmp	r4, r0
   b9242:	d105      	bne.n	b9250 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b9244:	f002 f8aa 	bl	bb39c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b924c:	f001 be43 	b.w	baed6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9250:	b12c      	cbz	r4, b925e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b9252:	6823      	ldr	r3, [r4, #0]
   b9254:	4620      	mov	r0, r4
   b9256:	685b      	ldr	r3, [r3, #4]
}
   b9258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b925c:	4718      	bx	r3
   b925e:	bd10      	pop	{r4, pc}

000b9260 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9260:	680b      	ldr	r3, [r1, #0]
   b9262:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9264:	684b      	ldr	r3, [r1, #4]
   b9266:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9268:	b113      	cbz	r3, b9270 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b926a:	685a      	ldr	r2, [r3, #4]
   b926c:	3201      	adds	r2, #1
   b926e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9270:	4770      	bx	lr

000b9272 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b9272:	b513      	push	{r0, r1, r4, lr}
   b9274:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b9276:	4608      	mov	r0, r1
   b9278:	9101      	str	r1, [sp, #4]
   b927a:	f002 fea4 	bl	bbfc6 <strlen>
   b927e:	9901      	ldr	r1, [sp, #4]
   b9280:	4602      	mov	r2, r0
   b9282:	4620      	mov	r0, r4
}
   b9284:	b002      	add	sp, #8
   b9286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b928a:	f7ff bf81 	b.w	b9190 <_ZN5spark10JSONWriter5valueEPKcj>

000b928e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b928e:	b513      	push	{r0, r1, r4, lr}
   b9290:	4604      	mov	r4, r0
    write(str, strlen(str));
   b9292:	4608      	mov	r0, r1
   b9294:	9101      	str	r1, [sp, #4]
   b9296:	f002 fe96 	bl	bbfc6 <strlen>
   b929a:	6823      	ldr	r3, [r4, #0]
   b929c:	9901      	ldr	r1, [sp, #4]
   b929e:	68db      	ldr	r3, [r3, #12]
   b92a0:	4602      	mov	r2, r0
   b92a2:	4620      	mov	r0, r4
}
   b92a4:	b002      	add	sp, #8
   b92a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b92aa:	4718      	bx	r3

000b92ac <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b92ac:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b92ae:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b92b0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b92b4:	68db      	ldr	r3, [r3, #12]
   b92b6:	2201      	movs	r2, #1
   b92b8:	f10d 0107 	add.w	r1, sp, #7
   b92bc:	4798      	blx	r3
}
   b92be:	b003      	add	sp, #12
   b92c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b92c4 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b92c4:	b40e      	push	{r1, r2, r3}
   b92c6:	b503      	push	{r0, r1, lr}
   b92c8:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b92ca:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b92cc:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b92d0:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b92d2:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b92d4:	f001 f975 	bl	ba5c2 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b92d8:	b002      	add	sp, #8
   b92da:	f85d eb04 	ldr.w	lr, [sp], #4
   b92de:	b003      	add	sp, #12
   b92e0:	4770      	bx	lr

000b92e2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b92e2:	680a      	ldr	r2, [r1, #0]
   b92e4:	6002      	str	r2, [r0, #0]
   b92e6:	684a      	ldr	r2, [r1, #4]
   b92e8:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b92ea:	2200      	movs	r2, #0
   b92ec:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b92f0:	b510      	push	{r4, lr}
   b92f2:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b92f4:	688c      	ldr	r4, [r1, #8]
   b92f6:	6084      	str	r4, [r0, #8]
   b92f8:	68cc      	ldr	r4, [r1, #12]
   b92fa:	60c4      	str	r4, [r0, #12]
   b92fc:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b92fe:	608a      	str	r2, [r1, #8]
   b9300:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9302:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9304:	610a      	str	r2, [r1, #16]
   b9306:	bd10      	pop	{r4, pc}

000b9308 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b930c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9310:	f04f 0a14 	mov.w	sl, #20
   b9314:	9300      	str	r3, [sp, #0]
   b9316:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b931a:	4b18      	ldr	r3, [pc, #96]	; (b937c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b931c:	10a4      	asrs	r4, r4, #2
   b931e:	4617      	mov	r7, r2
   b9320:	435c      	muls	r4, r3
   b9322:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9324:	2c00      	cmp	r4, #0
   b9326:	dd21      	ble.n	b936c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9328:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b932a:	fb0a f006 	mul.w	r0, sl, r6
   b932e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9332:	463a      	mov	r2, r7
   b9334:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9338:	5828      	ldr	r0, [r5, r0]
   b933a:	9101      	str	r1, [sp, #4]
   b933c:	455f      	cmp	r7, fp
   b933e:	bf28      	it	cs
   b9340:	465a      	movcs	r2, fp
   b9342:	f002 fe48 	bl	bbfd6 <strncmp>
                if (cmp == 0) {
   b9346:	2800      	cmp	r0, #0
   b9348:	9901      	ldr	r1, [sp, #4]
   b934a:	f04f 0301 	mov.w	r3, #1
   b934e:	d10b      	bne.n	b9368 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9350:	455f      	cmp	r7, fp
   b9352:	d103      	bne.n	b935c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b9354:	9a00      	ldr	r2, [sp, #0]
   b9356:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9358:	4634      	mov	r4, r6
   b935a:	e7e3      	b.n	b9324 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b935c:	d9fc      	bls.n	b9358 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b935e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9360:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b9364:	3e01      	subs	r6, #1
   b9366:	e7f7      	b.n	b9358 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9368:	dbf9      	blt.n	b935e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b936a:	e7f5      	b.n	b9358 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b936c:	eba5 0508 	sub.w	r5, r5, r8
}
   b9370:	4802      	ldr	r0, [pc, #8]	; (b937c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9372:	10ad      	asrs	r5, r5, #2
   b9374:	4368      	muls	r0, r5
   b9376:	b003      	add	sp, #12
   b9378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b937c:	cccccccd 	.word	0xcccccccd

000b9380 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9380:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b9382:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b9384:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9386:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9388:	b303      	cbz	r3, b93cc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b938a:	b1f9      	cbz	r1, b93cc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b938c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b938e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b9392:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b9394:	a903      	add	r1, sp, #12
   b9396:	a801      	add	r0, sp, #4
   b9398:	f7ff ff19 	bl	b91ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b939c:	4601      	mov	r1, r0
   b939e:	b1a8      	cbz	r0, b93cc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b93a0:	f10d 030b 	add.w	r3, sp, #11
   b93a4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b93a6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b93aa:	4620      	mov	r0, r4
   b93ac:	f7ff ffac 	bl	b9308 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b93b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b93b4:	b153      	cbz	r3, b93cc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b93b6:	6823      	ldr	r3, [r4, #0]
   b93b8:	2414      	movs	r4, #20
   b93ba:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b93be:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b93c0:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b93c4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b93c6:	bfa8      	it	ge
   b93c8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b93ca:	e7e3      	b.n	b9394 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b93cc:	4628      	mov	r0, r5
   b93ce:	b004      	add	sp, #16
   b93d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b93d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b93d4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b93d6:	4c09      	ldr	r4, [pc, #36]	; (b93fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b93d8:	7823      	ldrb	r3, [r4, #0]
   b93da:	f3bf 8f5b 	dmb	ish
   b93de:	07db      	lsls	r3, r3, #31
   b93e0:	d409      	bmi.n	b93f6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b93e2:	4620      	mov	r0, r4
   b93e4:	f7fa fe6a 	bl	b40bc <__cxa_guard_acquire>
   b93e8:	b128      	cbz	r0, b93f6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b93ea:	4620      	mov	r0, r4
   b93ec:	f7fa fe6b 	bl	b40c6 <__cxa_guard_release>
   b93f0:	4803      	ldr	r0, [pc, #12]	; (b9400 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b93f2:	f002 fcd9 	bl	bbda8 <atexit>
}
   b93f6:	4803      	ldr	r0, [pc, #12]	; (b9404 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b93f8:	bd10      	pop	{r4, pc}
   b93fa:	bf00      	nop
   b93fc:	2003e64c 	.word	0x2003e64c
   b9400:	000b91c7 	.word	0x000b91c7
   b9404:	2003de7c 	.word	0x2003de7c

000b9408 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9408:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b940a:	4c09      	ldr	r4, [pc, #36]	; (b9430 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b940c:	7823      	ldrb	r3, [r4, #0]
   b940e:	f3bf 8f5b 	dmb	ish
   b9412:	07db      	lsls	r3, r3, #31
   b9414:	d409      	bmi.n	b942a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9416:	4620      	mov	r0, r4
   b9418:	f7fa fe50 	bl	b40bc <__cxa_guard_acquire>
   b941c:	b128      	cbz	r0, b942a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b941e:	4620      	mov	r0, r4
   b9420:	f7fa fe51 	bl	b40c6 <__cxa_guard_release>
   b9424:	4803      	ldr	r0, [pc, #12]	; (b9434 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b9426:	f002 fcbf 	bl	bbda8 <atexit>
    return &factory;
}
   b942a:	4803      	ldr	r0, [pc, #12]	; (b9438 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b942c:	bd10      	pop	{r4, pc}
   b942e:	bf00      	nop
   b9430:	2003e650 	.word	0x2003e650
   b9434:	000b922f 	.word	0x000b922f
   b9438:	2003de80 	.word	0x2003de80

000b943c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b943c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b943e:	2500      	movs	r5, #0
   b9440:	4604      	mov	r4, r0
   b9442:	e9c0 5500 	strd	r5, r5, [r0]
   b9446:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b944a:	6085      	str	r5, [r0, #8]
   b944c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b944e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b9452:	f7fe fab9 	bl	b79c8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b9456:	f7ff ffbd 	bl	b93d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b945a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b945c:	f7ff ffd4 	bl	b9408 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9460:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9462:	6220      	str	r0, [r4, #32]
}
   b9464:	4620      	mov	r0, r4
   b9466:	bd38      	pop	{r3, r4, r5, pc}

000b9468 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9468:	b510      	push	{r4, lr}
    static LogManager mgr;
   b946a:	4c0a      	ldr	r4, [pc, #40]	; (b9494 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b946c:	7823      	ldrb	r3, [r4, #0]
   b946e:	f3bf 8f5b 	dmb	ish
   b9472:	07db      	lsls	r3, r3, #31
   b9474:	d40c      	bmi.n	b9490 <_ZN5spark10LogManager8instanceEv+0x28>
   b9476:	4620      	mov	r0, r4
   b9478:	f7fa fe20 	bl	b40bc <__cxa_guard_acquire>
   b947c:	b140      	cbz	r0, b9490 <_ZN5spark10LogManager8instanceEv+0x28>
   b947e:	4806      	ldr	r0, [pc, #24]	; (b9498 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9480:	f7ff ffdc 	bl	b943c <_ZN5spark10LogManagerC1Ev>
   b9484:	4620      	mov	r0, r4
   b9486:	f7fa fe1e 	bl	b40c6 <__cxa_guard_release>
   b948a:	4804      	ldr	r0, [pc, #16]	; (b949c <_ZN5spark10LogManager8instanceEv+0x34>)
   b948c:	f002 fc8c 	bl	bbda8 <atexit>
    return &mgr;
}
   b9490:	4801      	ldr	r0, [pc, #4]	; (b9498 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9492:	bd10      	pop	{r4, pc}
   b9494:	2003e648 	.word	0x2003e648
   b9498:	2003e658 	.word	0x2003e658
   b949c:	000b99bd 	.word	0x000b99bd

000b94a0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b94a0:	4a02      	ldr	r2, [pc, #8]	; (b94ac <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b94a2:	4903      	ldr	r1, [pc, #12]	; (b94b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b94a4:	4803      	ldr	r0, [pc, #12]	; (b94b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b94a6:	2300      	movs	r3, #0
   b94a8:	f7fe bcae 	b.w	b7e08 <log_set_callbacks>
   b94ac:	000b97a1 	.word	0x000b97a1
   b94b0:	000b972d 	.word	0x000b972d
   b94b4:	000b96ad 	.word	0x000b96ad

000b94b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b94b8:	2300      	movs	r3, #0
   b94ba:	461a      	mov	r2, r3
   b94bc:	4619      	mov	r1, r3
   b94be:	4618      	mov	r0, r3
   b94c0:	f7fe bca2 	b.w	b7e08 <log_set_callbacks>

000b94c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b94c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b94c6:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b94c8:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b94ca:	4668      	mov	r0, sp
   b94cc:	f7ff fec8 	bl	b9260 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b94d0:	466a      	mov	r2, sp
   b94d2:	4629      	mov	r1, r5
   b94d4:	4620      	mov	r0, r4
   b94d6:	f7ff fd7b 	bl	b8fd0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b94da:	a801      	add	r0, sp, #4
   b94dc:	f7fb fd04 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b94e0:	4620      	mov	r0, r4
   b94e2:	b003      	add	sp, #12
   b94e4:	bd30      	pop	{r4, r5, pc}

000b94e6 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b94e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b94e8:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b94ea:	4604      	mov	r4, r0
   b94ec:	4668      	mov	r0, sp
   b94ee:	f7ff feb7 	bl	b9260 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b94f2:	466a      	mov	r2, sp
   b94f4:	4629      	mov	r1, r5
   b94f6:	4620      	mov	r0, r4
   b94f8:	f7ff fd46 	bl	b8f88 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b94fc:	a801      	add	r0, sp, #4
   b94fe:	f7fb fcf3 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9502:	4620      	mov	r0, r4
   b9504:	b003      	add	sp, #12
   b9506:	bd30      	pop	{r4, r5, pc}

000b9508 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9508:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b950a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b950c:	4604      	mov	r4, r0
   b950e:	4668      	mov	r0, sp
   b9510:	f7ff fea6 	bl	b9260 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9514:	466a      	mov	r2, sp
   b9516:	4629      	mov	r1, r5
   b9518:	4620      	mov	r0, r4
   b951a:	f7ff fcde 	bl	b8eda <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b951e:	a801      	add	r0, sp, #4
   b9520:	f7fb fce2 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9524:	4620      	mov	r0, r4
   b9526:	b003      	add	sp, #12
   b9528:	bd30      	pop	{r4, r5, pc}
	...

000b952c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b952c:	b570      	push	{r4, r5, r6, lr}
   b952e:	b08a      	sub	sp, #40	; 0x28
   b9530:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9532:	4601      	mov	r1, r0
   b9534:	a804      	add	r0, sp, #16
   b9536:	f7ff ffc5 	bl	b94c4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b953a:	4e14      	ldr	r6, [pc, #80]	; (b958c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b953c:	a804      	add	r0, sp, #16
   b953e:	f7ff fd5f 	bl	b9000 <_ZN5spark18JSONObjectIterator4nextEv>
   b9542:	b1e8      	cbz	r0, b9580 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9544:	a904      	add	r1, sp, #16
   b9546:	4668      	mov	r0, sp
   b9548:	f7ff ffcd 	bl	b94e6 <_ZNK5spark18JSONObjectIterator4nameEv>
   b954c:	9802      	ldr	r0, [sp, #8]
   b954e:	4631      	mov	r1, r6
   b9550:	f7ff fe66 	bl	b9220 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9554:	4604      	mov	r4, r0
   b9556:	b110      	cbz	r0, b955e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9558:	1e2c      	subs	r4, r5, #0
   b955a:	bf18      	it	ne
   b955c:	2401      	movne	r4, #1
   b955e:	a801      	add	r0, sp, #4
   b9560:	f7fb fcc2 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9564:	2c00      	cmp	r4, #0
   b9566:	d0e9      	beq.n	b953c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9568:	a904      	add	r1, sp, #16
   b956a:	4668      	mov	r0, sp
   b956c:	f7ff ffcc 	bl	b9508 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9570:	4668      	mov	r0, sp
   b9572:	f7ff fce8 	bl	b8f46 <_ZNK5spark9JSONValue5toIntEv>
   b9576:	6028      	str	r0, [r5, #0]
   b9578:	a801      	add	r0, sp, #4
   b957a:	f7fb fcb5 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b957e:	e7dd      	b.n	b953c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9580:	a805      	add	r0, sp, #20
   b9582:	f7fb fcb1 	bl	b4ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9586:	b00a      	add	sp, #40	; 0x28
   b9588:	bd70      	pop	{r4, r5, r6, pc}
   b958a:	bf00      	nop
   b958c:	000bd106 	.word	0x000bd106

000b9590 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9590:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9592:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9594:	4620      	mov	r0, r4
   b9596:	4913      	ldr	r1, [pc, #76]	; (b95e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9598:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b959a:	f002 fce4 	bl	bbf66 <strcmp>
   b959e:	b950      	cbnz	r0, b95b6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b95a0:	f001 fcfe 	bl	bafa0 <_Z16_fetch_usbserialv>
   b95a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b95a8:	f001 fcea 	bl	baf80 <_ZN9USBSerial5beginEl>
}
   b95ac:	b003      	add	sp, #12
   b95ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b95b2:	f001 bcf5 	b.w	bafa0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b95b6:	490c      	ldr	r1, [pc, #48]	; (b95e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b95b8:	4620      	mov	r0, r4
   b95ba:	f002 fcd4 	bl	bbf66 <strcmp>
   b95be:	b978      	cbnz	r0, b95e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b95c0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b95c4:	a901      	add	r1, sp, #4
   b95c6:	4628      	mov	r0, r5
        int baud = 9600;
   b95c8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b95ca:	f7ff ffaf 	bl	b952c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b95ce:	f001 fee5 	bl	bb39c <_Z22__fetch_global_Serial1v>
   b95d2:	9901      	ldr	r1, [sp, #4]
   b95d4:	f001 fc7c 	bl	baed0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b95d8:	f001 fee0 	bl	bb39c <_Z22__fetch_global_Serial1v>
}
   b95dc:	b003      	add	sp, #12
   b95de:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b95e0:	2000      	movs	r0, #0
   b95e2:	e7fb      	b.n	b95dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b95e4:	000bd10b 	.word	0x000bd10b
   b95e8:	000bd112 	.word	0x000bd112

000b95ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b95ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b95ee:	e9d0 5300 	ldrd	r5, r3, [r0]
   b95f2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b95f4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b95f6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b95fa:	42ae      	cmp	r6, r5
   b95fc:	d005      	beq.n	b960a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b95fe:	f105 0008 	add.w	r0, r5, #8
   b9602:	f7ff fff3 	bl	b95ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9606:	3514      	adds	r5, #20
   b9608:	e7f7      	b.n	b95fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b960a:	6820      	ldr	r0, [r4, #0]
   b960c:	f7fe fd20 	bl	b8050 <free>
}
   b9610:	4620      	mov	r0, r4
   b9612:	bd70      	pop	{r4, r5, r6, pc}

000b9614 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b9614:	b510      	push	{r4, lr}
   b9616:	4604      	mov	r4, r0
   b9618:	300c      	adds	r0, #12
   b961a:	f7ff ffe7 	bl	b95ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b961e:	4620      	mov	r0, r4
   b9620:	f7fe fdb1 	bl	b8186 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9624:	4620      	mov	r0, r4
   b9626:	bd10      	pop	{r4, pc}

000b9628 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9628:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b962a:	4b04      	ldr	r3, [pc, #16]	; (b963c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b962c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b962e:	f840 3b04 	str.w	r3, [r0], #4
   b9632:	f7ff ffef 	bl	b9614 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b9636:	4620      	mov	r0, r4
   b9638:	bd10      	pop	{r4, pc}
   b963a:	bf00      	nop
   b963c:	000bc8a4 	.word	0x000bc8a4

000b9640 <_ZN5spark16StreamLogHandlerD0Ev>:
   b9640:	b510      	push	{r4, lr}
   b9642:	4604      	mov	r4, r0
   b9644:	f7ff fff0 	bl	b9628 <_ZN5spark16StreamLogHandlerD1Ev>
   b9648:	4620      	mov	r0, r4
   b964a:	2124      	movs	r1, #36	; 0x24
   b964c:	f7fa fd27 	bl	b409e <_ZdlPvj>
   b9650:	4620      	mov	r0, r4
   b9652:	bd10      	pop	{r4, pc}

000b9654 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b9654:	b510      	push	{r4, lr}
   b9656:	4b03      	ldr	r3, [pc, #12]	; (b9664 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b9658:	6003      	str	r3, [r0, #0]
   b965a:	4604      	mov	r4, r0
   b965c:	f7ff ffe4 	bl	b9628 <_ZN5spark16StreamLogHandlerD1Ev>
   b9660:	4620      	mov	r0, r4
   b9662:	bd10      	pop	{r4, pc}
   b9664:	000bd1ac 	.word	0x000bd1ac

000b9668 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9668:	b510      	push	{r4, lr}
   b966a:	4604      	mov	r4, r0
   b966c:	f7ff fff2 	bl	b9654 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9670:	4620      	mov	r0, r4
   b9672:	2124      	movs	r1, #36	; 0x24
   b9674:	f7fa fd13 	bl	b409e <_ZdlPvj>
   b9678:	4620      	mov	r0, r4
   b967a:	bd10      	pop	{r4, pc}

000b967c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b967c:	2200      	movs	r2, #0
   b967e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b9682:	b510      	push	{r4, lr}
        capacity_(0) {
   b9684:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9686:	680c      	ldr	r4, [r1, #0]
   b9688:	6004      	str	r4, [r0, #0]
   b968a:	684c      	ldr	r4, [r1, #4]
   b968c:	6044      	str	r4, [r0, #4]
   b968e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9690:	600a      	str	r2, [r1, #0]
   b9692:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9694:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9696:	608a      	str	r2, [r1, #8]
}
   b9698:	bd10      	pop	{r4, pc}

000b969a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b969a:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b969c:	6803      	ldr	r3, [r0, #0]
   b969e:	4604      	mov	r4, r0
   b96a0:	6818      	ldr	r0, [r3, #0]
   b96a2:	f7fe f9a9 	bl	b79f8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b96a6:	4620      	mov	r0, r4
   b96a8:	bd10      	pop	{r4, pc}
	...

000b96ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b96ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b96b0:	b087      	sub	sp, #28
   b96b2:	4680      	mov	r8, r0
   b96b4:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b96b6:	4b1c      	ldr	r3, [pc, #112]	; (b9728 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b96b8:	685b      	ldr	r3, [r3, #4]
   b96ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b96be:	4689      	mov	r9, r1
   b96c0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b96c2:	b96b      	cbnz	r3, b96e0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b96c4:	f7ff fed0 	bl	b9468 <_ZN5spark10LogManager8instanceEv>
   b96c8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b96ca:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b96ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b96d0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b96d2:	f7ff fda3 	bl	b921c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b96d6:	7b23      	ldrb	r3, [r4, #12]
   b96d8:	b12b      	cbz	r3, b96e6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b96da:	a805      	add	r0, sp, #20
   b96dc:	f7ff ffdd 	bl	b969a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b96e0:	b007      	add	sp, #28
   b96e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b96e6:	2301      	movs	r3, #1
   b96e8:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b96ea:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b96ee:	fa5f f989 	uxtb.w	r9, r9
   b96f2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b96f6:	45aa      	cmp	sl, r5
   b96f8:	d012      	beq.n	b9720 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b96fa:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b96fe:	4631      	mov	r1, r6
   b9700:	1d38      	adds	r0, r7, #4
   b9702:	f7ff fe3d 	bl	b9380 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9706:	4581      	cmp	r9, r0
   b9708:	d3f5      	bcc.n	b96f6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b970a:	683b      	ldr	r3, [r7, #0]
   b970c:	9a03      	ldr	r2, [sp, #12]
   b970e:	9200      	str	r2, [sp, #0]
   b9710:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b9714:	464a      	mov	r2, r9
   b9716:	4633      	mov	r3, r6
   b9718:	4641      	mov	r1, r8
   b971a:	4638      	mov	r0, r7
   b971c:	47d8      	blx	fp
   b971e:	e7ea      	b.n	b96f6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9720:	2300      	movs	r3, #0
   b9722:	7323      	strb	r3, [r4, #12]
   b9724:	e7d9      	b.n	b96da <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b9726:	bf00      	nop
   b9728:	e000ed00 	.word	0xe000ed00

000b972c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b972c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9730:	469b      	mov	fp, r3
   b9732:	4b1a      	ldr	r3, [pc, #104]	; (b979c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b9734:	685b      	ldr	r3, [r3, #4]
   b9736:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b973a:	4680      	mov	r8, r0
   b973c:	4689      	mov	r9, r1
   b973e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9740:	b96b      	cbnz	r3, b975e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b9742:	f7ff fe91 	bl	b9468 <_ZN5spark10LogManager8instanceEv>
   b9746:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9748:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b974c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b974e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9750:	f7ff fd64 	bl	b921c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b9754:	7b23      	ldrb	r3, [r4, #12]
   b9756:	b12b      	cbz	r3, b9764 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9758:	a801      	add	r0, sp, #4
   b975a:	f7ff ff9e 	bl	b969a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b975e:	b003      	add	sp, #12
   b9760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9764:	2301      	movs	r3, #1
   b9766:	7323      	strb	r3, [r4, #12]
   b9768:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b976c:	b2f6      	uxtb	r6, r6
   b976e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9772:	4555      	cmp	r5, sl
   b9774:	d00e      	beq.n	b9794 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9776:	f855 7b04 	ldr.w	r7, [r5], #4
   b977a:	4659      	mov	r1, fp
   b977c:	1d38      	adds	r0, r7, #4
   b977e:	f7ff fdff 	bl	b9380 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9782:	4286      	cmp	r6, r0
   b9784:	d3f5      	bcc.n	b9772 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b9786:	683b      	ldr	r3, [r7, #0]
   b9788:	464a      	mov	r2, r9
   b978a:	68db      	ldr	r3, [r3, #12]
   b978c:	4641      	mov	r1, r8
   b978e:	4638      	mov	r0, r7
   b9790:	4798      	blx	r3
   b9792:	e7ee      	b.n	b9772 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b9794:	2300      	movs	r3, #0
   b9796:	7323      	strb	r3, [r4, #12]
   b9798:	e7de      	b.n	b9758 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b979a:	bf00      	nop
   b979c:	e000ed00 	.word	0xe000ed00

000b97a0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b97a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b97a4:	4b16      	ldr	r3, [pc, #88]	; (b9800 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b97a6:	685b      	ldr	r3, [r3, #4]
   b97a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b97ac:	4605      	mov	r5, r0
   b97ae:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b97b0:	bb1b      	cbnz	r3, b97fa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b97b2:	f7ff fe59 	bl	b9468 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b97b6:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b97ba:	4604      	mov	r4, r0
   b97bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b97be:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b97c0:	f7ff fd2c 	bl	b921c <_ZN14RecursiveMutex4lockEv.isra.0>
   b97c4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b97c8:	2446      	movs	r4, #70	; 0x46
   b97ca:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b97ce:	45b0      	cmp	r8, r6
   b97d0:	d109      	bne.n	b97e6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b97d2:	a801      	add	r0, sp, #4
   b97d4:	f7ff ff61 	bl	b969a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b97d8:	42a5      	cmp	r5, r4
   b97da:	bfb4      	ite	lt
   b97dc:	2000      	movlt	r0, #0
   b97de:	2001      	movge	r0, #1
}
   b97e0:	b002      	add	sp, #8
   b97e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b97e6:	f856 0b04 	ldr.w	r0, [r6], #4
   b97ea:	4639      	mov	r1, r7
   b97ec:	3004      	adds	r0, #4
   b97ee:	f7ff fdc7 	bl	b9380 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b97f2:	4284      	cmp	r4, r0
   b97f4:	bfa8      	it	ge
   b97f6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b97f8:	e7e9      	b.n	b97ce <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b97fa:	2000      	movs	r0, #0
   b97fc:	e7f0      	b.n	b97e0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b97fe:	bf00      	nop
   b9800:	e000ed00 	.word	0xe000ed00

000b9804 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9806:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b980a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b980c:	4604      	mov	r4, r0
   b980e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9810:	db0d      	blt.n	b982e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b9812:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b9814:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9816:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9818:	dd04      	ble.n	b9824 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b981a:	00b9      	lsls	r1, r7, #2
   b981c:	f7fe fc20 	bl	b8060 <realloc>
            if (!d) {
   b9820:	b918      	cbnz	r0, b982a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b9822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b9824:	f7fe fc14 	bl	b8050 <free>
        T* d = nullptr;
   b9828:	2000      	movs	r0, #0
        data_ = d;
   b982a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b982c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b982e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9830:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9832:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b9836:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9838:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b983c:	1d08      	adds	r0, r1, #4
   b983e:	f002 faed 	bl	bbe1c <memmove>
    new(p) T(std::move(value));
   b9842:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b9846:	6863      	ldr	r3, [r4, #4]
   b9848:	3301      	adds	r3, #1
   b984a:	6063      	str	r3, [r4, #4]
    return true;
   b984c:	2001      	movs	r0, #1
   b984e:	e7e8      	b.n	b9822 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b9850 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9850:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b9852:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9856:	4604      	mov	r4, r0
   b9858:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b985a:	9301      	str	r3, [sp, #4]
   b985c:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b985e:	f7ff fcdd 	bl	b921c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b9862:	e9d4 3200 	ldrd	r3, r2, [r4]
   b9866:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b986a:	4293      	cmp	r3, r2
   b986c:	4619      	mov	r1, r3
   b986e:	d00b      	beq.n	b9888 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b9870:	6809      	ldr	r1, [r1, #0]
   b9872:	42a9      	cmp	r1, r5
   b9874:	f103 0304 	add.w	r3, r3, #4
   b9878:	d1f7      	bne.n	b986a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b987a:	a801      	add	r0, sp, #4
   b987c:	f7ff ff0d 	bl	b969a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9880:	2500      	movs	r5, #0
}
   b9882:	4628      	mov	r0, r5
   b9884:	b003      	add	sp, #12
   b9886:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b9888:	4629      	mov	r1, r5
   b988a:	4620      	mov	r0, r4
   b988c:	f7ff ffba 	bl	b9804 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b9890:	4605      	mov	r5, r0
   b9892:	2800      	cmp	r0, #0
   b9894:	d0f1      	beq.n	b987a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b9896:	6863      	ldr	r3, [r4, #4]
   b9898:	2b01      	cmp	r3, #1
   b989a:	d101      	bne.n	b98a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b989c:	f7ff fe00 	bl	b94a0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b98a0:	a801      	add	r0, sp, #4
   b98a2:	f7ff fefa 	bl	b969a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b98a6:	e7ec      	b.n	b9882 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b98a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b98a8:	b570      	push	{r4, r5, r6, lr}
   b98aa:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b98ac:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b98b0:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b98b2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b98b6:	4282      	cmp	r2, r0
   b98b8:	d00f      	beq.n	b98da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b98ba:	4601      	mov	r1, r0
            if (*p == value) {
   b98bc:	681d      	ldr	r5, [r3, #0]
   b98be:	f851 6b04 	ldr.w	r6, [r1], #4
   b98c2:	42ae      	cmp	r6, r5
   b98c4:	d107      	bne.n	b98d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b98c6:	1a52      	subs	r2, r2, r1
   b98c8:	f002 faa8 	bl	bbe1c <memmove>
    --size_;
   b98cc:	6863      	ldr	r3, [r4, #4]
   b98ce:	3b01      	subs	r3, #1
   b98d0:	6063      	str	r3, [r4, #4]
    return true;
   b98d2:	2001      	movs	r0, #1
}
   b98d4:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b98d6:	4608      	mov	r0, r1
   b98d8:	e7ed      	b.n	b98b6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b98da:	2000      	movs	r0, #0
   b98dc:	e7fa      	b.n	b98d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b98de <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b98de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b98e0:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b98e4:	4604      	mov	r4, r0
   b98e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b98e8:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b98ea:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b98ec:	f7ff fc96 	bl	b921c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b98f0:	a901      	add	r1, sp, #4
   b98f2:	4620      	mov	r0, r4
   b98f4:	f7ff ffd8 	bl	b98a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b98f8:	b118      	cbz	r0, b9902 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b98fa:	6863      	ldr	r3, [r4, #4]
   b98fc:	b90b      	cbnz	r3, b9902 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b98fe:	f7ff fddb 	bl	b94b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9902:	a803      	add	r0, sp, #12
   b9904:	f7ff fec9 	bl	b969a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9908:	b004      	add	sp, #16
   b990a:	bd10      	pop	{r4, pc}

000b990c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b990c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b990e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b9912:	2318      	movs	r3, #24
   b9914:	4604      	mov	r4, r0
   b9916:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b991a:	42ae      	cmp	r6, r5
   b991c:	d015      	beq.n	b994a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b991e:	f105 0110 	add.w	r1, r5, #16
   b9922:	4620      	mov	r0, r4
   b9924:	f7ff ffc0 	bl	b98a8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9928:	6863      	ldr	r3, [r4, #4]
   b992a:	b90b      	cbnz	r3, b9930 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b992c:	f7ff fdc4 	bl	b94b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b9930:	69e0      	ldr	r0, [r4, #28]
   b9932:	6929      	ldr	r1, [r5, #16]
   b9934:	6803      	ldr	r3, [r0, #0]
   b9936:	68db      	ldr	r3, [r3, #12]
   b9938:	4798      	blx	r3
        if (h.stream) {
   b993a:	6969      	ldr	r1, [r5, #20]
   b993c:	b119      	cbz	r1, b9946 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b993e:	6a20      	ldr	r0, [r4, #32]
   b9940:	6803      	ldr	r3, [r0, #0]
   b9942:	68db      	ldr	r3, [r3, #12]
   b9944:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9946:	3518      	adds	r5, #24
   b9948:	e7e7      	b.n	b991a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b994a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b994e:	2618      	movs	r6, #24
   b9950:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9954:	42ae      	cmp	r6, r5
   b9956:	d004      	beq.n	b9962 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9958:	4628      	mov	r0, r5
   b995a:	f000 ff47 	bl	ba7ec <_ZN6StringD1Ev>
   b995e:	3518      	adds	r5, #24
   b9960:	e7f8      	b.n	b9954 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b9962:	2300      	movs	r3, #0
   b9964:	6163      	str	r3, [r4, #20]
}
   b9966:	bd70      	pop	{r4, r5, r6, pc}

000b9968 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b9968:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b996a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b996c:	f7ff fda4 	bl	b94b8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9970:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b9974:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9976:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9978:	f7ff fc50 	bl	b921c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b997c:	4620      	mov	r0, r4
   b997e:	f7ff ffc5 	bl	b990c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b9982:	a801      	add	r0, sp, #4
   b9984:	f7ff fe89 	bl	b969a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b9988:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b998a:	b108      	cbz	r0, b9990 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b998c:	f7fe f824 	bl	b79d8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b9990:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9994:	2618      	movs	r6, #24
   b9996:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b999a:	42ae      	cmp	r6, r5
   b999c:	d004      	beq.n	b99a8 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b999e:	4628      	mov	r0, r5
   b99a0:	f000 ff24 	bl	ba7ec <_ZN6StringD1Ev>
   b99a4:	3518      	adds	r5, #24
   b99a6:	e7f8      	b.n	b999a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b99a8:	6920      	ldr	r0, [r4, #16]
   b99aa:	f7fe fb51 	bl	b8050 <free>
   b99ae:	6820      	ldr	r0, [r4, #0]
   b99b0:	f7fe fb4e 	bl	b8050 <free>
}
   b99b4:	4620      	mov	r0, r4
   b99b6:	b002      	add	sp, #8
   b99b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b99bc <__tcf_2>:
    static LogManager mgr;
   b99bc:	4801      	ldr	r0, [pc, #4]	; (b99c4 <__tcf_2+0x8>)
   b99be:	f7ff bfd3 	b.w	b9968 <_ZN5spark10LogManagerD1Ev>
   b99c2:	bf00      	nop
   b99c4:	2003e658 	.word	0x2003e658

000b99c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b99c8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b99ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b99cc:	4604      	mov	r4, r0
   b99ce:	460d      	mov	r5, r1
   b99d0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b99d2:	d915      	bls.n	b9a00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b99d4:	4290      	cmp	r0, r2
   b99d6:	d214      	bcs.n	b9a02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b99d8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b99dc:	1a75      	subs	r5, r6, r1
   b99de:	f1a1 0714 	sub.w	r7, r1, #20
   b99e2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b99e4:	42b7      	cmp	r7, r6
   b99e6:	d01a      	beq.n	b9a1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b99e8:	b11c      	cbz	r4, b99f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b99ea:	4631      	mov	r1, r6
   b99ec:	4620      	mov	r0, r4
   b99ee:	f7ff fc78 	bl	b92e2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b99f2:	f106 0008 	add.w	r0, r6, #8
   b99f6:	f7ff fdf9 	bl	b95ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b99fa:	3e14      	subs	r6, #20
   b99fc:	3c14      	subs	r4, #20
   b99fe:	e7f1      	b.n	b99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b9a00:	d00d      	beq.n	b9a1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b9a02:	42b5      	cmp	r5, r6
   b9a04:	d00b      	beq.n	b9a1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9a06:	b11c      	cbz	r4, b9a10 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9a08:	4629      	mov	r1, r5
   b9a0a:	4620      	mov	r0, r4
   b9a0c:	f7ff fc69 	bl	b92e2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b9a10:	f105 0008 	add.w	r0, r5, #8
   b9a14:	f7ff fdea 	bl	b95ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9a18:	3514      	adds	r5, #20
   b9a1a:	3414      	adds	r4, #20
   b9a1c:	e7f1      	b.n	b9a02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b9a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9a20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b9a20:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9a24:	4604      	mov	r4, r0
   b9a26:	460d      	mov	r5, r1
   b9a28:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9a2a:	d914      	bls.n	b9a56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9a2c:	4290      	cmp	r0, r2
   b9a2e:	d213      	bcs.n	b9a58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b9a30:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9a34:	1a75      	subs	r5, r6, r1
   b9a36:	f1a1 0710 	sub.w	r7, r1, #16
   b9a3a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9a3c:	42b7      	cmp	r7, r6
   b9a3e:	d018      	beq.n	b9a72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b9a40:	b11c      	cbz	r4, b9a4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b9a42:	4631      	mov	r1, r6
   b9a44:	4620      	mov	r0, r4
   b9a46:	f000 ff4d 	bl	ba8e4 <_ZN6StringC1EOS_>
                end->~T();
   b9a4a:	4630      	mov	r0, r6
   b9a4c:	f000 fece 	bl	ba7ec <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9a50:	3e10      	subs	r6, #16
   b9a52:	3c10      	subs	r4, #16
   b9a54:	e7f2      	b.n	b9a3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9a56:	d00c      	beq.n	b9a72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9a58:	42b5      	cmp	r5, r6
   b9a5a:	d00a      	beq.n	b9a72 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9a5c:	b11c      	cbz	r4, b9a66 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b9a5e:	4629      	mov	r1, r5
   b9a60:	4620      	mov	r0, r4
   b9a62:	f000 ff3f 	bl	ba8e4 <_ZN6StringC1EOS_>
                p->~T();
   b9a66:	4628      	mov	r0, r5
   b9a68:	f000 fec0 	bl	ba7ec <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9a6c:	3510      	adds	r5, #16
   b9a6e:	3410      	adds	r4, #16
   b9a70:	e7f2      	b.n	b9a58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b9a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9a74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b9a74:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9a76:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9a78:	4605      	mov	r5, r0
        if (n > 0) {
   b9a7a:	dd11      	ble.n	b9aa0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9a7c:	0130      	lsls	r0, r6, #4
   b9a7e:	f7fe fadf 	bl	b8040 <malloc>
            if (!d) {
   b9a82:	4604      	mov	r4, r0
   b9a84:	b158      	cbz	r0, b9a9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9a86:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9a8a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b9a8e:	f7ff ffc7 	bl	b9a20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b9a92:	6828      	ldr	r0, [r5, #0]
   b9a94:	f7fe fadc 	bl	b8050 <free>
        data_ = d;
   b9a98:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9a9a:	60ae      	str	r6, [r5, #8]
        return true;
   b9a9c:	2001      	movs	r0, #1
    }
   b9a9e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9aa0:	2400      	movs	r4, #0
   b9aa2:	e7f6      	b.n	b9a92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b9aa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9aa8:	4690      	mov	r8, r2
   b9aaa:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b9aac:	2300      	movs	r3, #0
   b9aae:	9103      	str	r1, [sp, #12]
    return size_;
   b9ab0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b9ab4:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9ab6:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b9ab8:	4299      	cmp	r1, r3
        capacity_(0) {
   b9aba:	e9c0 3300 	strd	r3, r3, [r0]
   b9abe:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9ac6:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9aca:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9acc:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b9ace:	dc23      	bgt.n	b9b18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b9ad0:	e9d8 5700 	ldrd	r5, r7, [r8]
   b9ad4:	2314      	movs	r3, #20
   b9ad6:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b9ada:	42af      	cmp	r7, r5
   b9adc:	d03b      	beq.n	b9b56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b9ade:	4629      	mov	r1, r5
   b9ae0:	a80b      	add	r0, sp, #44	; 0x2c
   b9ae2:	f000 feff 	bl	ba8e4 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b9ae6:	a90b      	add	r1, sp, #44	; 0x2c
   b9ae8:	a80f      	add	r0, sp, #60	; 0x3c
   b9aea:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b9aec:	f000 fefa 	bl	ba8e4 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9af0:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b9af4:	4299      	cmp	r1, r3
   b9af6:	da1b      	bge.n	b9b30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b9af8:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b9afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b9afc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b9b00:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b9b04:	4631      	mov	r1, r6
   b9b06:	f106 0010 	add.w	r0, r6, #16
   b9b0a:	f7ff ff89 	bl	b9a20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b9b0e:	b9ee      	cbnz	r6, b9b4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b9b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9b12:	3301      	adds	r3, #1
   b9b14:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b9b16:	e011      	b.n	b9b3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b9b18:	a808      	add	r0, sp, #32
   b9b1a:	f7ff ffab 	bl	b9a74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9b1e:	2800      	cmp	r0, #0
   b9b20:	d1d6      	bne.n	b9ad0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b9b22:	a808      	add	r0, sp, #32
   b9b24:	f7fe fb2f 	bl	b8186 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9b28:	4620      	mov	r0, r4
   b9b2a:	b015      	add	sp, #84	; 0x54
   b9b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9b30:	3101      	adds	r1, #1
   b9b32:	a808      	add	r0, sp, #32
   b9b34:	f7ff ff9e 	bl	b9a74 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9b38:	2800      	cmp	r0, #0
   b9b3a:	d1dd      	bne.n	b9af8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9b3c:	a80f      	add	r0, sp, #60	; 0x3c
   b9b3e:	f000 fe55 	bl	ba7ec <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b9b42:	a80b      	add	r0, sp, #44	; 0x2c
   b9b44:	f000 fe52 	bl	ba7ec <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9b48:	3514      	adds	r5, #20
   b9b4a:	e7c6      	b.n	b9ada <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9b4c:	a90f      	add	r1, sp, #60	; 0x3c
   b9b4e:	4630      	mov	r0, r6
   b9b50:	f000 fec8 	bl	ba8e4 <_ZN6StringC1EOS_>
   b9b54:	e7dc      	b.n	b9b10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b9b56:	2600      	movs	r6, #0
   b9b58:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9b5c:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b9b5e:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b9b62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b9b66:	429e      	cmp	r6, r3
   b9b68:	da7c      	bge.n	b9c64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b9b6a:	0133      	lsls	r3, r6, #4
   b9b6c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b9b6e:	9306      	str	r3, [sp, #24]
        if (!category) {
   b9b70:	b90b      	cbnz	r3, b9b76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b9b72:	3601      	adds	r6, #1
   b9b74:	e7f5      	b.n	b9b62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b9b76:	2300      	movs	r3, #0
   b9b78:	9307      	str	r3, [sp, #28]
   b9b7a:	fb09 f306 	mul.w	r3, r9, r6
   b9b7e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b9b80:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b9b82:	a907      	add	r1, sp, #28
   b9b84:	a806      	add	r0, sp, #24
   b9b86:	f7ff fb22 	bl	b91ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9b8a:	4682      	mov	sl, r0
   b9b8c:	2800      	cmp	r0, #0
   b9b8e:	d0f0      	beq.n	b9b72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b9b90:	f04f 0300 	mov.w	r3, #0
   b9b94:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9b98:	4601      	mov	r1, r0
   b9b9a:	9a07      	ldr	r2, [sp, #28]
   b9b9c:	f10d 0317 	add.w	r3, sp, #23
   b9ba0:	4628      	mov	r0, r5
   b9ba2:	f7ff fbb1 	bl	b9308 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9ba6:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9baa:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9bac:	2f00      	cmp	r7, #0
   b9bae:	d14a      	bne.n	b9c46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b9bb0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b9bb4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b9bb8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b9bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9bc0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b9bc4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b9bc8:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9bca:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b9bce:	4293      	cmp	r3, r2
   b9bd0:	db17      	blt.n	b9c02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b9bd2:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b9bd6:	f1ba 0f00 	cmp.w	sl, #0
   b9bda:	dd30      	ble.n	b9c3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b9bdc:	fb09 f00a 	mul.w	r0, r9, sl
   b9be0:	f7fe fa2e 	bl	b8040 <malloc>
            if (!d) {
   b9be4:	4683      	mov	fp, r0
   b9be6:	b360      	cbz	r0, b9c42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b9be8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9bec:	fb09 1202 	mla	r2, r9, r2, r1
   b9bf0:	f7ff feea 	bl	b99c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b9bf4:	6828      	ldr	r0, [r5, #0]
   b9bf6:	f7fe fa2b 	bl	b8050 <free>
        data_ = d;
   b9bfa:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b9bfe:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b9c02:	682b      	ldr	r3, [r5, #0]
   b9c04:	9a01      	ldr	r2, [sp, #4]
   b9c06:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b9c0a:	686a      	ldr	r2, [r5, #4]
   b9c0c:	4651      	mov	r1, sl
   b9c0e:	fb09 3202 	mla	r2, r9, r2, r3
   b9c12:	f10a 0014 	add.w	r0, sl, #20
   b9c16:	f7ff fed7 	bl	b99c8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b9c1a:	f1ba 0f00 	cmp.w	sl, #0
   b9c1e:	d003      	beq.n	b9c28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b9c20:	a90f      	add	r1, sp, #60	; 0x3c
   b9c22:	4650      	mov	r0, sl
   b9c24:	f7ff fb5d 	bl	b92e2 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b9c28:	686b      	ldr	r3, [r5, #4]
   b9c2a:	3301      	adds	r3, #1
   b9c2c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b9c2e:	a811      	add	r0, sp, #68	; 0x44
   b9c30:	f7ff fcdc 	bl	b95ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9c34:	b13f      	cbz	r7, b9c46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b9c36:	a80b      	add	r0, sp, #44	; 0x2c
   b9c38:	f7ff fcd8 	bl	b95ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9c3c:	e771      	b.n	b9b22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b9c3e:	46bb      	mov	fp, r7
   b9c40:	e7d8      	b.n	b9bf4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9c42:	2701      	movs	r7, #1
   b9c44:	e7f3      	b.n	b9c2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b9c46:	9b01      	ldr	r3, [sp, #4]
   b9c48:	682d      	ldr	r5, [r5, #0]
   b9c4a:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b9c4e:	9b06      	ldr	r3, [sp, #24]
   b9c50:	781b      	ldrb	r3, [r3, #0]
   b9c52:	b92b      	cbnz	r3, b9c60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b9c54:	f8d8 3000 	ldr.w	r3, [r8]
   b9c58:	9a02      	ldr	r2, [sp, #8]
   b9c5a:	4413      	add	r3, r2
   b9c5c:	7c1b      	ldrb	r3, [r3, #16]
   b9c5e:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b9c60:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b9c62:	e78e      	b.n	b9b82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9c64:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b9c66:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9c68:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9c6a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9c6c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9c6e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b9c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b9c72:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9c74:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9c76:	60a2      	str	r2, [r4, #8]
   b9c78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b9c7a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9c7c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9c7e:	60e2      	str	r2, [r4, #12]
   b9c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b9c82:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9c84:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9c86:	6122      	str	r2, [r4, #16]
   b9c88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b9c8a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b9c8c:	9b03      	ldr	r3, [sp, #12]
   b9c8e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b9c90:	6162      	str	r2, [r4, #20]
   b9c92:	7623      	strb	r3, [r4, #24]
   b9c94:	e7cf      	b.n	b9c36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b9c98 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9c98:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9c9a:	4604      	mov	r4, r0
   b9c9c:	b087      	sub	sp, #28
   b9c9e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b9ca0:	4626      	mov	r6, r4
        stream_(&stream) {
   b9ca2:	4619      	mov	r1, r3
   b9ca4:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9ca6:	4617      	mov	r7, r2
        stream_(&stream) {
   b9ca8:	f7fb f9d1 	bl	b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b9cac:	4b0b      	ldr	r3, [pc, #44]	; (b9cdc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b9cae:	f846 3b04 	str.w	r3, [r6], #4
   b9cb2:	4669      	mov	r1, sp
   b9cb4:	a803      	add	r0, sp, #12
   b9cb6:	f7fb f9ca 	bl	b504e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b9cba:	aa03      	add	r2, sp, #12
   b9cbc:	4639      	mov	r1, r7
   b9cbe:	4630      	mov	r0, r6
   b9cc0:	f7ff fef0 	bl	b9aa4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9cc4:	a803      	add	r0, sp, #12
   b9cc6:	f7fb f981 	bl	b4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b9cca:	4668      	mov	r0, sp
   b9ccc:	f7fb f97e 	bl	b4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9cd0:	4b03      	ldr	r3, [pc, #12]	; (b9ce0 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b9cd2:	6023      	str	r3, [r4, #0]
}
   b9cd4:	4620      	mov	r0, r4
        stream_(&stream) {
   b9cd6:	6225      	str	r5, [r4, #32]
}
   b9cd8:	b007      	add	sp, #28
   b9cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9cdc:	000bc8a4 	.word	0x000bc8a4
   b9ce0:	000bd194 	.word	0x000bd194

000b9ce4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b9ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9ce6:	460f      	mov	r7, r1
   b9ce8:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9cea:	491d      	ldr	r1, [pc, #116]	; (b9d60 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b9cec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9cee:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b9cf0:	4616      	mov	r6, r2
   b9cf2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9cf4:	f002 f937 	bl	bbf66 <strcmp>
   b9cf8:	b9c0      	cbnz	r0, b9d2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b9cfa:	b1a4      	cbz	r4, b9d26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b9cfc:	4629      	mov	r1, r5
   b9cfe:	a801      	add	r0, sp, #4
   b9d00:	f7ff fcbc 	bl	b967c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9d04:	4917      	ldr	r1, [pc, #92]	; (b9d64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9d06:	2024      	movs	r0, #36	; 0x24
   b9d08:	f001 fb6c 	bl	bb3e4 <_ZnwjRKSt9nothrow_t>
   b9d0c:	4605      	mov	r5, r0
   b9d0e:	b130      	cbz	r0, b9d1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b9d10:	ab01      	add	r3, sp, #4
   b9d12:	4632      	mov	r2, r6
   b9d14:	4621      	mov	r1, r4
   b9d16:	f7ff ffbf 	bl	b9c98 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9d1a:	4b13      	ldr	r3, [pc, #76]	; (b9d68 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b9d1c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9d1e:	a801      	add	r0, sp, #4
   b9d20:	f7fb f954 	bl	b4fcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9d24:	462c      	mov	r4, r5
}
   b9d26:	4620      	mov	r0, r4
   b9d28:	b005      	add	sp, #20
   b9d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b9d2c:	490f      	ldr	r1, [pc, #60]	; (b9d6c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b9d2e:	4638      	mov	r0, r7
   b9d30:	f002 f919 	bl	bbf66 <strcmp>
   b9d34:	b990      	cbnz	r0, b9d5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b9d36:	2c00      	cmp	r4, #0
   b9d38:	d0f5      	beq.n	b9d26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9d3a:	4629      	mov	r1, r5
   b9d3c:	a801      	add	r0, sp, #4
   b9d3e:	f7ff fc9d 	bl	b967c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9d42:	4908      	ldr	r1, [pc, #32]	; (b9d64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9d44:	2024      	movs	r0, #36	; 0x24
   b9d46:	f001 fb4d 	bl	bb3e4 <_ZnwjRKSt9nothrow_t>
   b9d4a:	4605      	mov	r5, r0
   b9d4c:	2800      	cmp	r0, #0
   b9d4e:	d0e6      	beq.n	b9d1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b9d50:	ab01      	add	r3, sp, #4
   b9d52:	4632      	mov	r2, r6
   b9d54:	4621      	mov	r1, r4
   b9d56:	f7ff ff9f 	bl	b9c98 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9d5a:	e7e0      	b.n	b9d1e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b9d5c:	2400      	movs	r4, #0
   b9d5e:	e7e2      	b.n	b9d26 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b9d60:	000bd11a 	.word	0x000bd11a
   b9d64:	000bd2f4 	.word	0x000bd2f4
   b9d68:	000bd1ac 	.word	0x000bd1ac
   b9d6c:	000bd11e 	.word	0x000bd11e

000b9d70 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b9d70:	4b01      	ldr	r3, [pc, #4]	; (b9d78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9d72:	4a02      	ldr	r2, [pc, #8]	; (b9d7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9d74:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9d76:	4770      	bx	lr
   b9d78:	2003e654 	.word	0x2003e654
   b9d7c:	000bd12f 	.word	0x000bd12f

000b9d80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9d84:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b9d86:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9d8a:	4604      	mov	r4, r0
   b9d8c:	460e      	mov	r6, r1
   b9d8e:	4617      	mov	r7, r2
   b9d90:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b9d92:	f001 f905 	bl	bafa0 <_Z16_fetch_usbserialv>
   b9d96:	4581      	cmp	r9, r0
   b9d98:	d04c      	beq.n	b9e34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b9d9a:	792b      	ldrb	r3, [r5, #4]
   b9d9c:	0719      	lsls	r1, r3, #28
   b9d9e:	d504      	bpl.n	b9daa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b9da0:	696a      	ldr	r2, [r5, #20]
   b9da2:	4954      	ldr	r1, [pc, #336]	; (b9ef4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b9da4:	4620      	mov	r0, r4
   b9da6:	f7ff fa8d 	bl	b92c4 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b9daa:	f1b8 0f00 	cmp.w	r8, #0
   b9dae:	d00d      	beq.n	b9dcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b9db0:	215b      	movs	r1, #91	; 0x5b
   b9db2:	4620      	mov	r0, r4
   b9db4:	f7ff fa7a 	bl	b92ac <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b9db8:	4641      	mov	r1, r8
   b9dba:	4620      	mov	r0, r4
   b9dbc:	f7ff fa67 	bl	b928e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b9dc0:	6823      	ldr	r3, [r4, #0]
   b9dc2:	494d      	ldr	r1, [pc, #308]	; (b9ef8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b9dc4:	68db      	ldr	r3, [r3, #12]
   b9dc6:	2202      	movs	r2, #2
   b9dc8:	4620      	mov	r0, r4
   b9dca:	4798      	blx	r3
    if (attr.has_file) {
   b9dcc:	792b      	ldrb	r3, [r5, #4]
   b9dce:	07da      	lsls	r2, r3, #31
   b9dd0:	d523      	bpl.n	b9e1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b9dd2:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b9dd6:	212f      	movs	r1, #47	; 0x2f
   b9dd8:	4640      	mov	r0, r8
   b9dda:	f002 f923 	bl	bc024 <strrchr>
    if (s1) {
   b9dde:	b108      	cbz	r0, b9de4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b9de0:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b9de4:	4641      	mov	r1, r8
   b9de6:	4620      	mov	r0, r4
   b9de8:	f7ff fa51 	bl	b928e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b9dec:	792b      	ldrb	r3, [r5, #4]
   b9dee:	079b      	lsls	r3, r3, #30
   b9df0:	d508      	bpl.n	b9e04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b9df2:	213a      	movs	r1, #58	; 0x3a
   b9df4:	4620      	mov	r0, r4
   b9df6:	f7ff fa59 	bl	b92ac <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b9dfa:	68ea      	ldr	r2, [r5, #12]
   b9dfc:	493f      	ldr	r1, [pc, #252]	; (b9efc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b9dfe:	4620      	mov	r0, r4
   b9e00:	f7ff fa60 	bl	b92c4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b9e04:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b9e06:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b9e08:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b9e0c:	68db      	ldr	r3, [r3, #12]
   b9e0e:	bf14      	ite	ne
   b9e10:	493b      	ldrne	r1, [pc, #236]	; (b9f00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b9e12:	493c      	ldreq	r1, [pc, #240]	; (b9f04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b9e14:	2202      	movs	r2, #2
            write(": ", 2);
   b9e16:	4620      	mov	r0, r4
   b9e18:	4798      	blx	r3
    if (attr.has_function) {
   b9e1a:	792b      	ldrb	r3, [r5, #4]
   b9e1c:	0758      	lsls	r0, r3, #29
   b9e1e:	d51d      	bpl.n	b9e5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b9e20:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b9e22:	460b      	mov	r3, r1
   b9e24:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b9e26:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9e2a:	b160      	cbz	r0, b9e46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b9e2c:	2820      	cmp	r0, #32
   b9e2e:	d108      	bne.n	b9e42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b9e30:	4619      	mov	r1, r3
   b9e32:	e7f7      	b.n	b9e24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b9e34:	4834      	ldr	r0, [pc, #208]	; (b9f08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b9e36:	f000 f966 	bl	ba106 <_ZN5spark12NetworkClass9listeningEv>
   b9e3a:	2800      	cmp	r0, #0
   b9e3c:	d0ad      	beq.n	b9d9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b9e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b9e42:	2828      	cmp	r0, #40	; 0x28
   b9e44:	d1ee      	bne.n	b9e24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b9e46:	6823      	ldr	r3, [r4, #0]
   b9e48:	1a52      	subs	r2, r2, r1
   b9e4a:	68db      	ldr	r3, [r3, #12]
   b9e4c:	4620      	mov	r0, r4
   b9e4e:	4798      	blx	r3
        write("(): ", 4);
   b9e50:	6823      	ldr	r3, [r4, #0]
   b9e52:	492e      	ldr	r1, [pc, #184]	; (b9f0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b9e54:	68db      	ldr	r3, [r3, #12]
   b9e56:	2204      	movs	r2, #4
   b9e58:	4620      	mov	r0, r4
   b9e5a:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b9e5c:	2100      	movs	r1, #0
   b9e5e:	4638      	mov	r0, r7
   b9e60:	f7fd ffca 	bl	b7df8 <log_level_name>
   b9e64:	4601      	mov	r1, r0
    write(s);
   b9e66:	4620      	mov	r0, r4
   b9e68:	f7ff fa11 	bl	b928e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b9e6c:	6823      	ldr	r3, [r4, #0]
   b9e6e:	4925      	ldr	r1, [pc, #148]	; (b9f04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b9e70:	68db      	ldr	r3, [r3, #12]
   b9e72:	2202      	movs	r2, #2
   b9e74:	4620      	mov	r0, r4
   b9e76:	4798      	blx	r3
    if (msg) {
   b9e78:	b11e      	cbz	r6, b9e82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b9e7a:	4631      	mov	r1, r6
   b9e7c:	4620      	mov	r0, r4
   b9e7e:	f7ff fa06 	bl	b928e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b9e82:	792b      	ldrb	r3, [r5, #4]
   b9e84:	f013 0f30 	tst.w	r3, #48	; 0x30
   b9e88:	d02c      	beq.n	b9ee4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b9e8a:	6823      	ldr	r3, [r4, #0]
   b9e8c:	4920      	ldr	r1, [pc, #128]	; (b9f10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b9e8e:	68db      	ldr	r3, [r3, #12]
   b9e90:	2202      	movs	r2, #2
   b9e92:	4620      	mov	r0, r4
   b9e94:	4798      	blx	r3
        if (attr.has_code) {
   b9e96:	792b      	ldrb	r3, [r5, #4]
   b9e98:	06d9      	lsls	r1, r3, #27
   b9e9a:	d50a      	bpl.n	b9eb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b9e9c:	6823      	ldr	r3, [r4, #0]
   b9e9e:	491d      	ldr	r1, [pc, #116]	; (b9f14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b9ea0:	68db      	ldr	r3, [r3, #12]
   b9ea2:	2207      	movs	r2, #7
   b9ea4:	4620      	mov	r0, r4
   b9ea6:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b9ea8:	69aa      	ldr	r2, [r5, #24]
   b9eaa:	491b      	ldr	r1, [pc, #108]	; (b9f18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b9eac:	4620      	mov	r0, r4
   b9eae:	f7ff fa09 	bl	b92c4 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b9eb2:	792b      	ldrb	r3, [r5, #4]
   b9eb4:	069a      	lsls	r2, r3, #26
   b9eb6:	d511      	bpl.n	b9edc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b9eb8:	06db      	lsls	r3, r3, #27
   b9eba:	d505      	bpl.n	b9ec8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b9ebc:	6823      	ldr	r3, [r4, #0]
   b9ebe:	4910      	ldr	r1, [pc, #64]	; (b9f00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b9ec0:	68db      	ldr	r3, [r3, #12]
   b9ec2:	2202      	movs	r2, #2
   b9ec4:	4620      	mov	r0, r4
   b9ec6:	4798      	blx	r3
            write("details = ", 10);
   b9ec8:	6823      	ldr	r3, [r4, #0]
   b9eca:	4914      	ldr	r1, [pc, #80]	; (b9f1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b9ecc:	68db      	ldr	r3, [r3, #12]
   b9ece:	4620      	mov	r0, r4
   b9ed0:	220a      	movs	r2, #10
   b9ed2:	4798      	blx	r3
            write(attr.details);
   b9ed4:	69e9      	ldr	r1, [r5, #28]
   b9ed6:	4620      	mov	r0, r4
   b9ed8:	f7ff f9d9 	bl	b928e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b9edc:	215d      	movs	r1, #93	; 0x5d
   b9ede:	4620      	mov	r0, r4
   b9ee0:	f7ff f9e4 	bl	b92ac <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b9ee4:	6823      	ldr	r3, [r4, #0]
   b9ee6:	490e      	ldr	r1, [pc, #56]	; (b9f20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b9ee8:	68db      	ldr	r3, [r3, #12]
   b9eea:	4620      	mov	r0, r4
   b9eec:	2202      	movs	r2, #2
}
   b9eee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b9ef2:	4718      	bx	r3
   b9ef4:	000bd133 	.word	0x000bd133
   b9ef8:	000bd13a 	.word	0x000bd13a
   b9efc:	000bcbbb 	.word	0x000bcbbb
   b9f00:	000bd13d 	.word	0x000bd13d
   b9f04:	000bd142 	.word	0x000bd142
   b9f08:	2003e680 	.word	0x2003e680
   b9f0c:	000bd140 	.word	0x000bd140
   b9f10:	000bd145 	.word	0x000bd145
   b9f14:	000bd148 	.word	0x000bd148
   b9f18:	000bcaf8 	.word	0x000bcaf8
   b9f1c:	000bd150 	.word	0x000bd150
   b9f20:	000bd15b 	.word	0x000bd15b

000b9f24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9f28:	b085      	sub	sp, #20
    return stream_;
   b9f2a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b9f2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b9f30:	4605      	mov	r5, r0
   b9f32:	460f      	mov	r7, r1
   b9f34:	4690      	mov	r8, r2
   b9f36:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b9f38:	f001 f832 	bl	bafa0 <_Z16_fetch_usbserialv>
   b9f3c:	4581      	cmp	r9, r0
   b9f3e:	d105      	bne.n	b9f4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b9f40:	4849      	ldr	r0, [pc, #292]	; (ba068 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b9f42:	f000 f8e0 	bl	ba106 <_ZN5spark12NetworkClass9listeningEv>
   b9f46:	2800      	cmp	r0, #0
   b9f48:	f040 808a 	bne.w	ba060 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b9f4c:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b9f4e:	4a47      	ldr	r2, [pc, #284]	; (ba06c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b9f50:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b9f52:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b9f56:	a801      	add	r0, sp, #4
        strm_(stream) {
   b9f58:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b9f5a:	f88d 9008 	strb.w	r9, [sp, #8]
   b9f5e:	f7ff f878 	bl	b9052 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b9f62:	4649      	mov	r1, r9
   b9f64:	4640      	mov	r0, r8
   b9f66:	f7fd ff47 	bl	b7df8 <log_level_name>
    json.name("l", 1).value(s);
   b9f6a:	4941      	ldr	r1, [pc, #260]	; (ba070 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b9f6c:	4680      	mov	r8, r0
   b9f6e:	2201      	movs	r2, #1
   b9f70:	a801      	add	r0, sp, #4
   b9f72:	f7ff f8fd 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   b9f76:	4641      	mov	r1, r8
   b9f78:	f7ff f97b 	bl	b9272 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b9f7c:	b13f      	cbz	r7, b9f8e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b9f7e:	493d      	ldr	r1, [pc, #244]	; (ba074 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b9f80:	2201      	movs	r2, #1
   b9f82:	a801      	add	r0, sp, #4
   b9f84:	f7ff f8f4 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   b9f88:	4639      	mov	r1, r7
   b9f8a:	f7ff f972 	bl	b9272 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b9f8e:	b13e      	cbz	r6, b9fa0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b9f90:	4939      	ldr	r1, [pc, #228]	; (ba078 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b9f92:	2201      	movs	r2, #1
   b9f94:	a801      	add	r0, sp, #4
   b9f96:	f7ff f8eb 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   b9f9a:	4631      	mov	r1, r6
   b9f9c:	f7ff f969 	bl	b9272 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b9fa0:	7923      	ldrb	r3, [r4, #4]
   b9fa2:	07df      	lsls	r7, r3, #31
   b9fa4:	d50e      	bpl.n	b9fc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b9fa6:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b9fa8:	212f      	movs	r1, #47	; 0x2f
   b9faa:	4630      	mov	r0, r6
   b9fac:	f002 f83a 	bl	bc024 <strrchr>
    if (s1) {
   b9fb0:	b100      	cbz	r0, b9fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b9fb2:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b9fb4:	4931      	ldr	r1, [pc, #196]	; (ba07c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b9fb6:	2201      	movs	r2, #1
   b9fb8:	a801      	add	r0, sp, #4
   b9fba:	f7ff f8d9 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   b9fbe:	4631      	mov	r1, r6
   b9fc0:	f7ff f957 	bl	b9272 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b9fc4:	7923      	ldrb	r3, [r4, #4]
   b9fc6:	079e      	lsls	r6, r3, #30
   b9fc8:	d507      	bpl.n	b9fda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b9fca:	492d      	ldr	r1, [pc, #180]	; (ba080 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b9fcc:	2202      	movs	r2, #2
   b9fce:	a801      	add	r0, sp, #4
   b9fd0:	f7ff f8ce 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   b9fd4:	68e1      	ldr	r1, [r4, #12]
   b9fd6:	f7ff f849 	bl	b906c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b9fda:	7923      	ldrb	r3, [r4, #4]
   b9fdc:	0758      	lsls	r0, r3, #29
   b9fde:	d514      	bpl.n	ba00a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b9fe0:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b9fe2:	4633      	mov	r3, r6
   b9fe4:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b9fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9fea:	b12a      	cbz	r2, b9ff8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b9fec:	2a20      	cmp	r2, #32
   b9fee:	d101      	bne.n	b9ff4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b9ff0:	461e      	mov	r6, r3
   b9ff2:	e7f7      	b.n	b9fe4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b9ff4:	2a28      	cmp	r2, #40	; 0x28
   b9ff6:	d1f5      	bne.n	b9fe4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b9ff8:	4922      	ldr	r1, [pc, #136]	; (ba084 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b9ffa:	2202      	movs	r2, #2
   b9ffc:	a801      	add	r0, sp, #4
   b9ffe:	f7ff f8b7 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   ba002:	1bba      	subs	r2, r7, r6
   ba004:	4631      	mov	r1, r6
   ba006:	f7ff f8c3 	bl	b9190 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba00a:	7923      	ldrb	r3, [r4, #4]
   ba00c:	0719      	lsls	r1, r3, #28
   ba00e:	d507      	bpl.n	ba020 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba010:	491d      	ldr	r1, [pc, #116]	; (ba088 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba012:	2201      	movs	r2, #1
   ba014:	a801      	add	r0, sp, #4
   ba016:	f7ff f8ab 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   ba01a:	6961      	ldr	r1, [r4, #20]
   ba01c:	f7ff f838 	bl	b9090 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba020:	7923      	ldrb	r3, [r4, #4]
   ba022:	06da      	lsls	r2, r3, #27
   ba024:	d508      	bpl.n	ba038 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba026:	2204      	movs	r2, #4
   ba028:	4918      	ldr	r1, [pc, #96]	; (ba08c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba02a:	eb0d 0002 	add.w	r0, sp, r2
   ba02e:	f7ff f89f 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   ba032:	69a1      	ldr	r1, [r4, #24]
   ba034:	f7ff f81a 	bl	b906c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba038:	7923      	ldrb	r3, [r4, #4]
   ba03a:	069b      	lsls	r3, r3, #26
   ba03c:	d507      	bpl.n	ba04e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba03e:	4914      	ldr	r1, [pc, #80]	; (ba090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba040:	2206      	movs	r2, #6
   ba042:	a801      	add	r0, sp, #4
   ba044:	f7ff f894 	bl	b9170 <_ZN5spark10JSONWriter4nameEPKcj>
   ba048:	69e1      	ldr	r1, [r4, #28]
   ba04a:	f7ff f912 	bl	b9272 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba04e:	a801      	add	r0, sp, #4
   ba050:	f7fe ffe9 	bl	b9026 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba054:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba056:	490f      	ldr	r1, [pc, #60]	; (ba094 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba058:	6803      	ldr	r3, [r0, #0]
   ba05a:	2202      	movs	r2, #2
   ba05c:	68db      	ldr	r3, [r3, #12]
   ba05e:	4798      	blx	r3
}
   ba060:	b005      	add	sp, #20
   ba062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba066:	bf00      	nop
   ba068:	2003e680 	.word	0x2003e680
   ba06c:	000bd17c 	.word	0x000bd17c
   ba070:	000bd110 	.word	0x000bd110
   ba074:	000bd15e 	.word	0x000bd15e
   ba078:	000bd415 	.word	0x000bd415
   ba07c:	000bc2ba 	.word	0x000bc2ba
   ba080:	000bd160 	.word	0x000bd160
   ba084:	000bd163 	.word	0x000bd163
   ba088:	000bc616 	.word	0x000bc616
   ba08c:	000bd166 	.word	0x000bd166
   ba090:	000bd16b 	.word	0x000bd16b
   ba094:	000bd15b 	.word	0x000bd15b

000ba098 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba098:	2300      	movs	r3, #0
   ba09a:	6840      	ldr	r0, [r0, #4]
   ba09c:	461a      	mov	r2, r3
   ba09e:	f7fd bf6f 	b.w	b7f80 <network_connect>

000ba0a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba0a2:	6840      	ldr	r0, [r0, #4]
   ba0a4:	2200      	movs	r2, #0
   ba0a6:	2102      	movs	r1, #2
   ba0a8:	f7fd bf7a 	b.w	b7fa0 <network_disconnect>

000ba0ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba0ac:	2200      	movs	r2, #0
   ba0ae:	6840      	ldr	r0, [r0, #4]
   ba0b0:	4611      	mov	r1, r2
   ba0b2:	f7fd bf6d 	b.w	b7f90 <network_connecting>

000ba0b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba0b6:	2200      	movs	r2, #0
   ba0b8:	6840      	ldr	r0, [r0, #4]
   ba0ba:	4611      	mov	r1, r2
   ba0bc:	f7fd bf78 	b.w	b7fb0 <network_ready>

000ba0c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba0c0:	2300      	movs	r3, #0
   ba0c2:	6840      	ldr	r0, [r0, #4]
   ba0c4:	461a      	mov	r2, r3
   ba0c6:	4619      	mov	r1, r3
   ba0c8:	f7fd bf7a 	b.w	b7fc0 <network_on>

000ba0cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba0cc:	2300      	movs	r3, #0
   ba0ce:	6840      	ldr	r0, [r0, #4]
   ba0d0:	461a      	mov	r2, r3
   ba0d2:	4619      	mov	r1, r3
   ba0d4:	f7fd bf7c 	b.w	b7fd0 <network_off>

000ba0d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba0d8:	6840      	ldr	r0, [r0, #4]
   ba0da:	2100      	movs	r1, #0
   ba0dc:	f7fd bfa0 	b.w	b8020 <network_is_on>

000ba0e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba0e0:	6840      	ldr	r0, [r0, #4]
   ba0e2:	2100      	movs	r1, #0
   ba0e4:	f7fd bfa4 	b.w	b8030 <network_is_off>

000ba0e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba0e8:	6840      	ldr	r0, [r0, #4]
   ba0ea:	2200      	movs	r2, #0
   ba0ec:	f081 0101 	eor.w	r1, r1, #1
   ba0f0:	f7fd bf76 	b.w	b7fe0 <network_listen>

000ba0f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba0f4:	6840      	ldr	r0, [r0, #4]
   ba0f6:	2200      	movs	r2, #0
   ba0f8:	f7fd bf82 	b.w	b8000 <network_set_listen_timeout>

000ba0fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba0fc:	2200      	movs	r2, #0
   ba0fe:	6840      	ldr	r0, [r0, #4]
   ba100:	4611      	mov	r1, r2
   ba102:	f7fd bf85 	b.w	b8010 <network_get_listen_timeout>

000ba106 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba106:	2200      	movs	r2, #0
   ba108:	6840      	ldr	r0, [r0, #4]
   ba10a:	4611      	mov	r1, r2
   ba10c:	f7fd bf70 	b.w	b7ff0 <network_listening>

000ba110 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba114:	b095      	sub	sp, #84	; 0x54
   ba116:	4614      	mov	r4, r2
   ba118:	460d      	mov	r5, r1
   ba11a:	4607      	mov	r7, r0
    IPAddress addr;
   ba11c:	f7fe fe32 	bl	b8d84 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba120:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba122:	221c      	movs	r2, #28
   ba124:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba126:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba128:	f001 fe92 	bl	bbe50 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba12c:	2340      	movs	r3, #64	; 0x40
   ba12e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba130:	4620      	mov	r0, r4
   ba132:	466b      	mov	r3, sp
   ba134:	aa0c      	add	r2, sp, #48	; 0x30
   ba136:	2100      	movs	r1, #0
   ba138:	f7fd fd66 	bl	b7c08 <netdb_getaddrinfo>
    if (!r) {
   ba13c:	4604      	mov	r4, r0
   ba13e:	2800      	cmp	r0, #0
   ba140:	d14b      	bne.n	ba1da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba142:	4602      	mov	r2, r0
   ba144:	2101      	movs	r1, #1
   ba146:	6868      	ldr	r0, [r5, #4]
   ba148:	f7fd ff32 	bl	b7fb0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba14c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba14e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba150:	4622      	mov	r2, r4
   ba152:	6868      	ldr	r0, [r5, #4]
   ba154:	f7fd ff2c 	bl	b7fb0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba158:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba15a:	4681      	mov	r9, r0
        bool ok = false;
   ba15c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba15e:	2e00      	cmp	r6, #0
   ba160:	d03b      	beq.n	ba1da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba162:	2900      	cmp	r1, #0
   ba164:	d139      	bne.n	ba1da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba166:	6873      	ldr	r3, [r6, #4]
   ba168:	2b02      	cmp	r3, #2
   ba16a:	d003      	beq.n	ba174 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba16c:	2b0a      	cmp	r3, #10
   ba16e:	d011      	beq.n	ba194 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba170:	69f6      	ldr	r6, [r6, #28]
   ba172:	e7f4      	b.n	ba15e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba174:	f1b8 0f00 	cmp.w	r8, #0
   ba178:	d0fa      	beq.n	ba170 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba17a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba17c:	a806      	add	r0, sp, #24
   ba17e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba180:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba182:	f7fe fe2d 	bl	b8de0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba188:	1d3c      	adds	r4, r7, #4
   ba18a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba18c:	682b      	ldr	r3, [r5, #0]
   ba18e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba190:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba192:	e7ed      	b.n	ba170 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba194:	f1b9 0f00 	cmp.w	r9, #0
   ba198:	d0ea      	beq.n	ba170 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba19a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba19c:	2210      	movs	r2, #16
   ba19e:	a801      	add	r0, sp, #4
   ba1a0:	f001 fe56 	bl	bbe50 <memset>
                    a.v = 6;
   ba1a4:	2306      	movs	r3, #6
   ba1a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba1aa:	ad01      	add	r5, sp, #4
   ba1ac:	f104 0308 	add.w	r3, r4, #8
   ba1b0:	3418      	adds	r4, #24
   ba1b2:	6818      	ldr	r0, [r3, #0]
   ba1b4:	6859      	ldr	r1, [r3, #4]
   ba1b6:	462a      	mov	r2, r5
   ba1b8:	c203      	stmia	r2!, {r0, r1}
   ba1ba:	3308      	adds	r3, #8
   ba1bc:	42a3      	cmp	r3, r4
   ba1be:	4615      	mov	r5, r2
   ba1c0:	d1f7      	bne.n	ba1b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba1c2:	a901      	add	r1, sp, #4
   ba1c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba1c6:	ad07      	add	r5, sp, #28
   ba1c8:	f7fe fdea 	bl	b8da0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba1cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba1ce:	1d3c      	adds	r4, r7, #4
   ba1d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba1d2:	682b      	ldr	r3, [r5, #0]
   ba1d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba1d6:	4649      	mov	r1, r9
   ba1d8:	e7ca      	b.n	ba170 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba1da:	9800      	ldr	r0, [sp, #0]
   ba1dc:	f7fd fd0c 	bl	b7bf8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba1e0:	4638      	mov	r0, r7
   ba1e2:	b015      	add	sp, #84	; 0x54
   ba1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba1e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba1e8:	4b02      	ldr	r3, [pc, #8]	; (ba1f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba1ea:	4a03      	ldr	r2, [pc, #12]	; (ba1f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba1ec:	601a      	str	r2, [r3, #0]
   ba1ee:	2200      	movs	r2, #0
   ba1f0:	605a      	str	r2, [r3, #4]

} // spark
   ba1f2:	4770      	bx	lr
   ba1f4:	2003e680 	.word	0x2003e680
   ba1f8:	000bd1f4 	.word	0x000bd1f4

000ba1fc <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   ba1fc:	b508      	push	{r3, lr}
            return &Wire1;
   ba1fe:	f001 f88d 	bl	bb31c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   ba202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   ba206:	f7fe bd45 	b.w	b8c94 <_ZN7TwoWire4lockEv>

000ba20a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   ba20a:	b510      	push	{r4, lr}
   ba20c:	4604      	mov	r4, r0
    lock_(_lock)
   ba20e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   ba210:	b109      	cbz	r1, ba216 <_ZN4PMICC1Eb+0xc>
        lock();
   ba212:	f7ff fff3 	bl	ba1fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   ba216:	4620      	mov	r0, r4
   ba218:	bd10      	pop	{r4, pc}

000ba21a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   ba21a:	b508      	push	{r3, lr}
            return &Wire1;
   ba21c:	f001 f87e 	bl	bb31c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   ba220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   ba224:	f7fe bd3f 	b.w	b8ca6 <_ZN7TwoWire6unlockEv>

000ba228 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   ba228:	b510      	push	{r4, lr}
    if (lock_) {
   ba22a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   ba22c:	4604      	mov	r4, r0
    if (lock_) {
   ba22e:	b10b      	cbz	r3, ba234 <_ZN4PMICD1Ev+0xc>
        unlock();
   ba230:	f7ff fff3 	bl	ba21a <_ZN4PMIC6unlockEv>
}
   ba234:	4620      	mov	r0, r4
   ba236:	bd10      	pop	{r4, pc}

000ba238 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   ba238:	b510      	push	{r4, lr}
   ba23a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   ba23c:	6800      	ldr	r0, [r0, #0]
   ba23e:	f7ff ffec 	bl	ba21a <_ZN4PMIC6unlockEv>
   ba242:	4620      	mov	r0, r4
   ba244:	bd10      	pop	{r4, pc}

000ba246 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   ba246:	b530      	push	{r4, r5, lr}
   ba248:	b087      	sub	sp, #28
   ba24a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba24c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba24e:	f7ff ffd5 	bl	ba1fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba252:	226b      	movs	r2, #107	; 0x6b
   ba254:	2300      	movs	r3, #0
   ba256:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba25a:	2401      	movs	r4, #1
   ba25c:	230a      	movs	r3, #10
   ba25e:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   ba262:	f001 f85b 	bl	bb31c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba266:	a902      	add	r1, sp, #8
   ba268:	f7fe fcf8 	bl	b8c5c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba26c:	f001 f856 	bl	bb31c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   ba270:	6803      	ldr	r3, [r0, #0]
   ba272:	4629      	mov	r1, r5
   ba274:	689b      	ldr	r3, [r3, #8]
   ba276:	4798      	blx	r3
            return &Wire1;
   ba278:	f001 f850 	bl	bb31c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba27c:	4621      	mov	r1, r4
   ba27e:	f7fe fd05 	bl	b8c8c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   ba282:	9403      	str	r4, [sp, #12]
            return &Wire1;
   ba284:	f001 f84a 	bl	bb31c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   ba288:	a902      	add	r1, sp, #8
   ba28a:	f7fe fcb7 	bl	b8bfc <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   ba28e:	f001 f845 	bl	bb31c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   ba292:	6803      	ldr	r3, [r0, #0]
   ba294:	695b      	ldr	r3, [r3, #20]
   ba296:	4798      	blx	r3
   ba298:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   ba29a:	a801      	add	r0, sp, #4
   ba29c:	f7ff ffcc 	bl	ba238 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba2a0:	b2e0      	uxtb	r0, r4
   ba2a2:	b007      	add	sp, #28
   ba2a4:	bd30      	pop	{r4, r5, pc}

000ba2a6 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   ba2a6:	b570      	push	{r4, r5, r6, lr}
   ba2a8:	b086      	sub	sp, #24
   ba2aa:	460d      	mov	r5, r1
   ba2ac:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba2ae:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba2b0:	f7ff ffa4 	bl	ba1fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba2b4:	226b      	movs	r2, #107	; 0x6b
   ba2b6:	2300      	movs	r3, #0
   ba2b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba2bc:	2601      	movs	r6, #1
   ba2be:	230a      	movs	r3, #10
   ba2c0:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   ba2c4:	f001 f82a 	bl	bb31c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba2c8:	a902      	add	r1, sp, #8
   ba2ca:	f7fe fcc7 	bl	b8c5c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba2ce:	f001 f825 	bl	bb31c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   ba2d2:	6803      	ldr	r3, [r0, #0]
   ba2d4:	4629      	mov	r1, r5
   ba2d6:	689b      	ldr	r3, [r3, #8]
   ba2d8:	4798      	blx	r3
            return &Wire1;
   ba2da:	f001 f81f 	bl	bb31c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   ba2de:	6803      	ldr	r3, [r0, #0]
   ba2e0:	4621      	mov	r1, r4
   ba2e2:	689b      	ldr	r3, [r3, #8]
   ba2e4:	4798      	blx	r3
            return &Wire1;
   ba2e6:	f001 f819 	bl	bb31c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba2ea:	4631      	mov	r1, r6
   ba2ec:	f7fe fcce 	bl	b8c8c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   ba2f0:	a801      	add	r0, sp, #4
   ba2f2:	f7ff ffa1 	bl	ba238 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba2f6:	b006      	add	sp, #24
   ba2f8:	bd70      	pop	{r4, r5, r6, pc}

000ba2fa <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   ba2fa:	b513      	push	{r0, r1, r4, lr}
   ba2fc:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba2fe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba300:	f7ff ff7c 	bl	ba1fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba304:	2101      	movs	r1, #1
   ba306:	4620      	mov	r0, r4
   ba308:	f7ff ff9d 	bl	ba246 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   ba30c:	f000 0330 	and.w	r3, r0, #48	; 0x30
   ba310:	2b10      	cmp	r3, #16
   ba312:	d007      	beq.n	ba324 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   ba314:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   ba318:	f042 0210 	orr.w	r2, r2, #16
   ba31c:	2101      	movs	r1, #1
   ba31e:	4620      	mov	r0, r4
   ba320:	f7ff ffc1 	bl	ba2a6 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba324:	a801      	add	r0, sp, #4
   ba326:	f7ff ff87 	bl	ba238 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba32a:	2001      	movs	r0, #1
   ba32c:	b002      	add	sp, #8
   ba32e:	bd10      	pop	{r4, pc}

000ba330 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   ba330:	b513      	push	{r0, r1, r4, lr}
   ba332:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba334:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba336:	f7ff ff61 	bl	ba1fc <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba33a:	2101      	movs	r1, #1
   ba33c:	4620      	mov	r0, r4
   ba33e:	f7ff ff82 	bl	ba246 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   ba342:	f010 0f30 	tst.w	r0, #48	; 0x30
   ba346:	d005      	beq.n	ba354 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   ba348:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   ba34c:	2101      	movs	r1, #1
   ba34e:	4620      	mov	r0, r4
   ba350:	f7ff ffa9 	bl	ba2a6 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba354:	a801      	add	r0, sp, #4
   ba356:	f7ff ff6f 	bl	ba238 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba35a:	2001      	movs	r0, #1
   ba35c:	b002      	add	sp, #8
   ba35e:	bd10      	pop	{r4, pc}

000ba360 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba362:	4606      	mov	r6, r0
   ba364:	460d      	mov	r5, r1
  size_t n = 0;
   ba366:	188f      	adds	r7, r1, r2
   ba368:	2400      	movs	r4, #0
  while (size--) {
   ba36a:	42bd      	cmp	r5, r7
   ba36c:	d00c      	beq.n	ba388 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba36e:	6833      	ldr	r3, [r6, #0]
   ba370:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba374:	689b      	ldr	r3, [r3, #8]
   ba376:	4630      	mov	r0, r6
   ba378:	4798      	blx	r3
     if (chunk>=0)
   ba37a:	1e03      	subs	r3, r0, #0
   ba37c:	db01      	blt.n	ba382 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba37e:	441c      	add	r4, r3
  while (size--) {
   ba380:	e7f3      	b.n	ba36a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba382:	2c00      	cmp	r4, #0
   ba384:	bf08      	it	eq
   ba386:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba388:	4620      	mov	r0, r4
   ba38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba38c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba38c:	b513      	push	{r0, r1, r4, lr}
   ba38e:	4604      	mov	r4, r0
    }
   ba390:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba392:	b159      	cbz	r1, ba3ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba394:	9101      	str	r1, [sp, #4]
   ba396:	f001 fe16 	bl	bbfc6 <strlen>
   ba39a:	6823      	ldr	r3, [r4, #0]
   ba39c:	9901      	ldr	r1, [sp, #4]
   ba39e:	68db      	ldr	r3, [r3, #12]
   ba3a0:	4602      	mov	r2, r0
   ba3a2:	4620      	mov	r0, r4
    }
   ba3a4:	b002      	add	sp, #8
   ba3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba3aa:	4718      	bx	r3
    }
   ba3ac:	b002      	add	sp, #8
   ba3ae:	bd10      	pop	{r4, pc}

000ba3b0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba3b0:	b508      	push	{r3, lr}
  return write(str);
   ba3b2:	f7ff ffeb 	bl	ba38c <_ZN5Print5writeEPKc>
}
   ba3b6:	bd08      	pop	{r3, pc}

000ba3b8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba3b8:	6803      	ldr	r3, [r0, #0]
   ba3ba:	689b      	ldr	r3, [r3, #8]
   ba3bc:	4718      	bx	r3

000ba3be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba3be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba3c0:	210d      	movs	r1, #13
{
   ba3c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba3c4:	f7ff fff8 	bl	ba3b8 <_ZN5Print5printEc>
  n += print('\n');
   ba3c8:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba3ca:	4604      	mov	r4, r0
  n += print('\n');
   ba3cc:	4628      	mov	r0, r5
   ba3ce:	f7ff fff3 	bl	ba3b8 <_ZN5Print5printEc>
  return n;
}
   ba3d2:	4420      	add	r0, r4
   ba3d4:	bd38      	pop	{r3, r4, r5, pc}

000ba3d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba3d6:	b530      	push	{r4, r5, lr}
   ba3d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba3da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba3dc:	2a01      	cmp	r2, #1
  *str = '\0';
   ba3de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba3e2:	bf98      	it	ls
   ba3e4:	220a      	movls	r2, #10
   ba3e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba3e8:	460d      	mov	r5, r1
   ba3ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba3ee:	fb01 5312 	mls	r3, r1, r2, r5
   ba3f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba3f6:	2b09      	cmp	r3, #9
   ba3f8:	bf94      	ite	ls
   ba3fa:	3330      	addls	r3, #48	; 0x30
   ba3fc:	3337      	addhi	r3, #55	; 0x37
   ba3fe:	b2db      	uxtb	r3, r3
  } while(n);
   ba400:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba402:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba406:	d9ef      	bls.n	ba3e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba408:	4621      	mov	r1, r4
   ba40a:	f7ff ffbf 	bl	ba38c <_ZN5Print5writeEPKc>
}
   ba40e:	b00b      	add	sp, #44	; 0x2c
   ba410:	bd30      	pop	{r4, r5, pc}
	...

000ba414 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   ba414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba418:	ec55 4b10 	vmov	r4, r5, d0
   ba41c:	4606      	mov	r6, r0
   ba41e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   ba420:	ee10 2a10 	vmov	r2, s0
   ba424:	ee10 0a10 	vmov	r0, s0
   ba428:	462b      	mov	r3, r5
   ba42a:	4629      	mov	r1, r5
   ba42c:	f001 fc38 	bl	bbca0 <__aeabi_dcmpun>
   ba430:	b140      	cbz	r0, ba444 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   ba432:	4953      	ldr	r1, [pc, #332]	; (ba580 <_ZN5Print10printFloatEdh+0x16c>)
   ba434:	4630      	mov	r0, r6
   ba436:	f7ff ffa9 	bl	ba38c <_ZN5Print5writeEPKc>
   ba43a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   ba43c:	4650      	mov	r0, sl
   ba43e:	b003      	add	sp, #12
   ba440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   ba444:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   ba448:	4b4e      	ldr	r3, [pc, #312]	; (ba584 <_ZN5Print10printFloatEdh+0x170>)
   ba44a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba44e:	4620      	mov	r0, r4
   ba450:	4649      	mov	r1, r9
   ba452:	f001 fc25 	bl	bbca0 <__aeabi_dcmpun>
   ba456:	b948      	cbnz	r0, ba46c <_ZN5Print10printFloatEdh+0x58>
   ba458:	4b4a      	ldr	r3, [pc, #296]	; (ba584 <_ZN5Print10printFloatEdh+0x170>)
   ba45a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba45e:	4620      	mov	r0, r4
   ba460:	4649      	mov	r1, r9
   ba462:	f001 fbff 	bl	bbc64 <__aeabi_dcmple>
   ba466:	b908      	cbnz	r0, ba46c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   ba468:	4947      	ldr	r1, [pc, #284]	; (ba588 <_ZN5Print10printFloatEdh+0x174>)
   ba46a:	e7e3      	b.n	ba434 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   ba46c:	4b47      	ldr	r3, [pc, #284]	; (ba58c <_ZN5Print10printFloatEdh+0x178>)
   ba46e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba472:	4620      	mov	r0, r4
   ba474:	4629      	mov	r1, r5
   ba476:	f001 fc09 	bl	bbc8c <__aeabi_dcmpgt>
   ba47a:	b108      	cbz	r0, ba480 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   ba47c:	4944      	ldr	r1, [pc, #272]	; (ba590 <_ZN5Print10printFloatEdh+0x17c>)
   ba47e:	e7d9      	b.n	ba434 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   ba480:	4b44      	ldr	r3, [pc, #272]	; (ba594 <_ZN5Print10printFloatEdh+0x180>)
   ba482:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba486:	4620      	mov	r0, r4
   ba488:	4629      	mov	r1, r5
   ba48a:	f001 fbe1 	bl	bbc50 <__aeabi_dcmplt>
   ba48e:	2800      	cmp	r0, #0
   ba490:	d1f4      	bne.n	ba47c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   ba492:	2200      	movs	r2, #0
   ba494:	2300      	movs	r3, #0
   ba496:	4620      	mov	r0, r4
   ba498:	4629      	mov	r1, r5
   ba49a:	f001 fbd9 	bl	bbc50 <__aeabi_dcmplt>
   ba49e:	b1d0      	cbz	r0, ba4d6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   ba4a0:	212d      	movs	r1, #45	; 0x2d
   ba4a2:	4630      	mov	r0, r6
   ba4a4:	f7ff ff88 	bl	ba3b8 <_ZN5Print5printEc>
     number = -number;
   ba4a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   ba4ac:	4682      	mov	sl, r0
     number = -number;
   ba4ae:	461d      	mov	r5, r3
  double rounding = 0.5;
   ba4b0:	4939      	ldr	r1, [pc, #228]	; (ba598 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   ba4b2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; ba5a0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   ba4b6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   ba4ba:	2000      	movs	r0, #0
    rounding /= 10.0;
   ba4bc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   ba4c0:	fa5f f38b 	uxtb.w	r3, fp
   ba4c4:	429f      	cmp	r7, r3
   ba4c6:	d908      	bls.n	ba4da <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   ba4c8:	4642      	mov	r2, r8
   ba4ca:	464b      	mov	r3, r9
   ba4cc:	f001 fa78 	bl	bb9c0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   ba4d0:	f10b 0b01 	add.w	fp, fp, #1
   ba4d4:	e7f4      	b.n	ba4c0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   ba4d6:	4682      	mov	sl, r0
   ba4d8:	e7ea      	b.n	ba4b0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   ba4da:	4622      	mov	r2, r4
   ba4dc:	462b      	mov	r3, r5
   ba4de:	f000 ff8f 	bl	bb400 <__adddf3>
   ba4e2:	460d      	mov	r5, r1
   ba4e4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   ba4e6:	f001 fc19 	bl	bbd1c <__aeabi_d2uiz>
   ba4ea:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   ba4ec:	f001 f8c4 	bl	bb678 <__aeabi_ui2d>
   ba4f0:	4602      	mov	r2, r0
   ba4f2:	460b      	mov	r3, r1
   ba4f4:	4620      	mov	r0, r4
   ba4f6:	4629      	mov	r1, r5
   ba4f8:	f000 ff80 	bl	bb3fc <__aeabi_dsub>
        return printNumber(val, base) + t;
   ba4fc:	220a      	movs	r2, #10
   ba4fe:	4604      	mov	r4, r0
   ba500:	460d      	mov	r5, r1
   ba502:	4630      	mov	r0, r6
   ba504:	4641      	mov	r1, r8
   ba506:	f7ff ff66 	bl	ba3d6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   ba50a:	4482      	add	sl, r0
  if (digits > 0) {
   ba50c:	2f00      	cmp	r7, #0
   ba50e:	d095      	beq.n	ba43c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   ba510:	4922      	ldr	r1, [pc, #136]	; (ba59c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   ba512:	f8df 908c 	ldr.w	r9, [pc, #140]	; ba5a0 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   ba516:	4630      	mov	r0, r6
   ba518:	f7ff ff38 	bl	ba38c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   ba51c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   ba520:	4482      	add	sl, r0
  while (digits-- > 0)
   ba522:	2f00      	cmp	r7, #0
   ba524:	d08a      	beq.n	ba43c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   ba526:	4642      	mov	r2, r8
   ba528:	464b      	mov	r3, r9
   ba52a:	4620      	mov	r0, r4
   ba52c:	4629      	mov	r1, r5
   ba52e:	f001 f91d 	bl	bb76c <__aeabi_dmul>
   ba532:	4604      	mov	r4, r0
   ba534:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   ba536:	f001 fbc9 	bl	bbccc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   ba53a:	f1b0 0b00 	subs.w	fp, r0, #0
   ba53e:	da1c      	bge.n	ba57a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   ba540:	212d      	movs	r1, #45	; 0x2d
   ba542:	4630      	mov	r0, r6
   ba544:	f7ff ff38 	bl	ba3b8 <_ZN5Print5printEc>
            val = -n;
   ba548:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   ba54c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   ba54e:	220a      	movs	r2, #10
   ba550:	4630      	mov	r0, r6
   ba552:	9301      	str	r3, [sp, #4]
   ba554:	f7ff ff3f 	bl	ba3d6 <_ZN5Print11printNumberEmh>
   ba558:	9b01      	ldr	r3, [sp, #4]
   ba55a:	4418      	add	r0, r3
    n += print(toPrint);
   ba55c:	4482      	add	sl, r0
    remainder -= toPrint;
   ba55e:	4658      	mov	r0, fp
   ba560:	f001 f89a 	bl	bb698 <__aeabi_i2d>
   ba564:	4602      	mov	r2, r0
   ba566:	460b      	mov	r3, r1
   ba568:	4620      	mov	r0, r4
   ba56a:	4629      	mov	r1, r5
   ba56c:	f000 ff46 	bl	bb3fc <__aeabi_dsub>
   ba570:	3f01      	subs	r7, #1
   ba572:	4604      	mov	r4, r0
   ba574:	460d      	mov	r5, r1
   ba576:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   ba578:	e7d3      	b.n	ba522 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   ba57a:	4659      	mov	r1, fp
        size_t t = 0;
   ba57c:	2300      	movs	r3, #0
   ba57e:	e7e6      	b.n	ba54e <_ZN5Print10printFloatEdh+0x13a>
   ba580:	000bd228 	.word	0x000bd228
   ba584:	7fefffff 	.word	0x7fefffff
   ba588:	000bd22c 	.word	0x000bd22c
   ba58c:	41efffff 	.word	0x41efffff
   ba590:	000bd230 	.word	0x000bd230
   ba594:	c1efffff 	.word	0xc1efffff
   ba598:	3fe00000 	.word	0x3fe00000
   ba59c:	000bd268 	.word	0x000bd268
   ba5a0:	40240000 	.word	0x40240000

000ba5a4 <_ZN5Print5printEfi>:
{
   ba5a4:	b538      	push	{r3, r4, r5, lr}
   ba5a6:	4604      	mov	r4, r0
   ba5a8:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   ba5ac:	b2cd      	uxtb	r5, r1
   ba5ae:	f001 f885 	bl	bb6bc <__aeabi_f2d>
   ba5b2:	ec41 0b10 	vmov	d0, r0, r1
   ba5b6:	4629      	mov	r1, r5
   ba5b8:	4620      	mov	r0, r4
}
   ba5ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   ba5be:	f7ff bf29 	b.w	ba414 <_ZN5Print10printFloatEdh>

000ba5c2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba5c6:	b086      	sub	sp, #24
   ba5c8:	af00      	add	r7, sp, #0
   ba5ca:	4605      	mov	r5, r0
   ba5cc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba5ce:	1d38      	adds	r0, r7, #4
   ba5d0:	2114      	movs	r1, #20
{
   ba5d2:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba5d4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba5d6:	f7fd fd5b 	bl	b8090 <vsnprintf>

    if (n<bufsize)
   ba5da:	2813      	cmp	r0, #19
   ba5dc:	d80e      	bhi.n	ba5fc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba5de:	1d39      	adds	r1, r7, #4
   ba5e0:	4628      	mov	r0, r5
   ba5e2:	f7ff fed3 	bl	ba38c <_ZN5Print5writeEPKc>
   ba5e6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba5e8:	b11e      	cbz	r6, ba5f2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba5ea:	4628      	mov	r0, r5
   ba5ec:	f7ff fee7 	bl	ba3be <_ZN5Print7printlnEv>
   ba5f0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba5f2:	4620      	mov	r0, r4
   ba5f4:	3718      	adds	r7, #24
   ba5f6:	46bd      	mov	sp, r7
   ba5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba5fc:	f100 0308 	add.w	r3, r0, #8
   ba600:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba604:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba606:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba60a:	4622      	mov	r2, r4
   ba60c:	1c41      	adds	r1, r0, #1
   ba60e:	683b      	ldr	r3, [r7, #0]
   ba610:	4668      	mov	r0, sp
   ba612:	f7fd fd3d 	bl	b8090 <vsnprintf>
  return write(str);
   ba616:	4669      	mov	r1, sp
   ba618:	4628      	mov	r0, r5
   ba61a:	f7ff feb7 	bl	ba38c <_ZN5Print5writeEPKc>
   ba61e:	4604      	mov	r4, r0
   ba620:	46c5      	mov	sp, r8
   ba622:	e7e1      	b.n	ba5e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba624 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   ba624:	b510      	push	{r4, lr}
  if (0 == max) {
   ba626:	4604      	mov	r4, r0
   ba628:	b128      	cbz	r0, ba636 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   ba62a:	f001 fc47 	bl	bbebc <rand>
   ba62e:	fb90 f3f4 	sdiv	r3, r0, r4
   ba632:	fb03 0414 	mls	r4, r3, r4, r0
}
   ba636:	4620      	mov	r0, r4
   ba638:	bd10      	pop	{r4, pc}

000ba63a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   ba63a:	4288      	cmp	r0, r1
{
   ba63c:	b510      	push	{r4, lr}
   ba63e:	4604      	mov	r4, r0
  if (min >= max) {
   ba640:	da03      	bge.n	ba64a <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   ba642:	1a08      	subs	r0, r1, r0
   ba644:	f7ff ffee 	bl	ba624 <_Z6randomi>
   ba648:	4404      	add	r4, r0
}
   ba64a:	4620      	mov	r0, r4
   ba64c:	bd10      	pop	{r4, pc}

000ba64e <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   ba64e:	f001 bc07 	b.w	bbe60 <srand>
	...

000ba654 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba654:	4b01      	ldr	r3, [pc, #4]	; (ba65c <_GLOBAL__sub_I_RGB+0x8>)
   ba656:	2200      	movs	r2, #0
   ba658:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba65a:	4770      	bx	lr
   ba65c:	2003e688 	.word	0x2003e688

000ba660 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba660:	2100      	movs	r1, #0
   ba662:	f7fd bb19 	b.w	b7c98 <hal_spi_release>

000ba666 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba666:	2100      	movs	r1, #0
   ba668:	f7fd bb0e 	b.w	b7c88 <hal_spi_acquire>

000ba66c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba66c:	b510      	push	{r4, lr}
   ba66e:	4604      	mov	r4, r0
   ba670:	4608      	mov	r0, r1
{
    _spi = spi;
   ba672:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba674:	f7fd fae8 	bl	b7c48 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba678:	2300      	movs	r3, #0
   ba67a:	6063      	str	r3, [r4, #4]
}
   ba67c:	4620      	mov	r0, r4
   ba67e:	bd10      	pop	{r4, pc}

000ba680 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba680:	b513      	push	{r0, r1, r4, lr}
   ba682:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba684:	7800      	ldrb	r0, [r0, #0]
   ba686:	f7ff ffee 	bl	ba666 <_ZN8SPIClass4lockEv.isra.0>
   ba68a:	b958      	cbnz	r0, ba6a4 <_ZN8SPIClass5beginEv+0x24>
   ba68c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba68e:	9001      	str	r0, [sp, #4]
   ba690:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba694:	f7fd fac0 	bl	b7c18 <hal_spi_begin>
        unlock();
   ba698:	9801      	ldr	r0, [sp, #4]
    }
}
   ba69a:	b002      	add	sp, #8
   ba69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba6a0:	f7ff bfde 	b.w	ba660 <_ZN8SPIClass6unlockEv.isra.0>
   ba6a4:	b002      	add	sp, #8
   ba6a6:	bd10      	pop	{r4, pc}

000ba6a8 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   ba6a8:	b513      	push	{r0, r1, r4, lr}
   ba6aa:	4604      	mov	r4, r0
    if (!lock())
   ba6ac:	7800      	ldrb	r0, [r0, #0]
   ba6ae:	f7ff ffda 	bl	ba666 <_ZN8SPIClass4lockEv.isra.0>
   ba6b2:	b948      	cbnz	r0, ba6c8 <_ZN8SPIClass3endEv+0x20>
   ba6b4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   ba6b6:	9001      	str	r0, [sp, #4]
   ba6b8:	f7fd fab6 	bl	b7c28 <hal_spi_end>
        unlock();
   ba6bc:	9801      	ldr	r0, [sp, #4]
    }
}
   ba6be:	b002      	add	sp, #8
   ba6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba6c4:	f7ff bfcc 	b.w	ba660 <_ZN8SPIClass6unlockEv.isra.0>
   ba6c8:	b002      	add	sp, #8
   ba6ca:	bd10      	pop	{r4, pc}

000ba6cc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba6cc:	7800      	ldrb	r0, [r0, #0]
   ba6ce:	f7ff bfc7 	b.w	ba660 <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba6d4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba6d4:	0840      	lsrs	r0, r0, #1
{
   ba6d6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba6d8:	6018      	str	r0, [r3, #0]
   ba6da:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba6dc:	6818      	ldr	r0, [r3, #0]
   ba6de:	4288      	cmp	r0, r1
   ba6e0:	b2e5      	uxtb	r5, r4
   ba6e2:	d906      	bls.n	ba6f2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba6e4:	3401      	adds	r4, #1
   ba6e6:	2c08      	cmp	r4, #8
   ba6e8:	d002      	beq.n	ba6f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba6ea:	0840      	lsrs	r0, r0, #1
   ba6ec:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba6ee:	e7f5      	b.n	ba6dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba6f0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba6f2:	4b02      	ldr	r3, [pc, #8]	; (ba6fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba6f4:	5d5b      	ldrb	r3, [r3, r5]
   ba6f6:	7013      	strb	r3, [r2, #0]
}
   ba6f8:	bd30      	pop	{r4, r5, pc}
   ba6fa:	bf00      	nop
   ba6fc:	000bd234 	.word	0x000bd234

000ba700 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba704:	4606      	mov	r6, r0
   ba706:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba708:	7800      	ldrb	r0, [r0, #0]
{
   ba70a:	460c      	mov	r4, r1
    CHECK(lock());
   ba70c:	f7ff ffab 	bl	ba666 <_ZN8SPIClass4lockEv.isra.0>
   ba710:	2800      	cmp	r0, #0
   ba712:	db1b      	blt.n	ba74c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba714:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba716:	2214      	movs	r2, #20
   ba718:	2100      	movs	r1, #0
   ba71a:	a809      	add	r0, sp, #36	; 0x24
   ba71c:	f001 fb98 	bl	bbe50 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba720:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba722:	2200      	movs	r2, #0
   ba724:	a909      	add	r1, sp, #36	; 0x24
   ba726:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba728:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba72c:	f7fd fa9c 	bl	b7c68 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba730:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba734:	b113      	cbz	r3, ba73c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba736:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba73a:	b155      	cbz	r5, ba752 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba73c:	2700      	movs	r7, #0
   ba73e:	46b9      	mov	r9, r7
   ba740:	46b8      	mov	r8, r7
   ba742:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba744:	7923      	ldrb	r3, [r4, #4]
   ba746:	b15d      	cbz	r5, ba760 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba748:	b1c3      	cbz	r3, ba77c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba74a:	2000      	movs	r0, #0
}
   ba74c:	b00f      	add	sp, #60	; 0x3c
   ba74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba752:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba756:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba75a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba75e:	e7f1      	b.n	ba744 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba760:	2b00      	cmp	r3, #0
   ba762:	d135      	bne.n	ba7d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba764:	68a3      	ldr	r3, [r4, #8]
   ba766:	4543      	cmp	r3, r8
   ba768:	d108      	bne.n	ba77c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba76a:	f88d 9020 	strb.w	r9, [sp, #32]
   ba76e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba772:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba776:	89a3      	ldrh	r3, [r4, #12]
   ba778:	429a      	cmp	r2, r3
   ba77a:	d0e6      	beq.n	ba74a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba77c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba77e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba780:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba784:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba786:	ab04      	add	r3, sp, #16
   ba788:	f10d 020f 	add.w	r2, sp, #15
   ba78c:	f7ff ffa2 	bl	ba6d4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba790:	7921      	ldrb	r1, [r4, #4]
   ba792:	b985      	cbnz	r5, ba7b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba794:	b989      	cbnz	r1, ba7ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba796:	68a3      	ldr	r3, [r4, #8]
   ba798:	4543      	cmp	r3, r8
   ba79a:	d30e      	bcc.n	ba7ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba79c:	f88d 9020 	strb.w	r9, [sp, #32]
   ba7a0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba7a4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba7a8:	89a3      	ldrh	r3, [r4, #12]
   ba7aa:	429a      	cmp	r2, r3
   ba7ac:	d105      	bne.n	ba7ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba7ae:	9b04      	ldr	r3, [sp, #16]
   ba7b0:	4543      	cmp	r3, r8
   ba7b2:	d102      	bne.n	ba7ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba7b4:	e7c9      	b.n	ba74a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba7b6:	2900      	cmp	r1, #0
   ba7b8:	d1f9      	bne.n	ba7ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba7ba:	2300      	movs	r3, #0
   ba7bc:	9301      	str	r3, [sp, #4]
   ba7be:	7b63      	ldrb	r3, [r4, #13]
   ba7c0:	9300      	str	r3, [sp, #0]
   ba7c2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba7c6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba7c8:	7830      	ldrb	r0, [r6, #0]
   ba7ca:	f7fd fa55 	bl	b7c78 <hal_spi_set_settings>
   ba7ce:	e7bc      	b.n	ba74a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba7d0:	e9cd 5500 	strd	r5, r5, [sp]
   ba7d4:	462b      	mov	r3, r5
   ba7d6:	462a      	mov	r2, r5
   ba7d8:	2101      	movs	r1, #1
   ba7da:	e7f5      	b.n	ba7c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba7dc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba7dc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba7de:	7800      	ldrb	r0, [r0, #0]
   ba7e0:	f7fd fa2a 	bl	b7c38 <hal_spi_transfer>
}
   ba7e4:	b2c0      	uxtb	r0, r0
   ba7e6:	bd08      	pop	{r3, pc}

000ba7e8 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   ba7e8:	4770      	bx	lr

000ba7ea <_ZN8SPIClass15detachInterruptEv>:
   ba7ea:	4770      	bx	lr

000ba7ec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba7ec:	b510      	push	{r4, lr}
   ba7ee:	4604      	mov	r4, r0
{
	free(buffer);
   ba7f0:	6800      	ldr	r0, [r0, #0]
   ba7f2:	f7fd fc2d 	bl	b8050 <free>
}
   ba7f6:	4620      	mov	r0, r4
   ba7f8:	bd10      	pop	{r4, pc}

000ba7fa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba7fa:	b510      	push	{r4, lr}
   ba7fc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba7fe:	6800      	ldr	r0, [r0, #0]
   ba800:	b108      	cbz	r0, ba806 <_ZN6String10invalidateEv+0xc>
   ba802:	f7fd fc25 	bl	b8050 <free>
	buffer = NULL;
   ba806:	2300      	movs	r3, #0
	capacity = len = 0;
   ba808:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba80c:	6023      	str	r3, [r4, #0]
}
   ba80e:	bd10      	pop	{r4, pc}

000ba810 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba810:	b538      	push	{r3, r4, r5, lr}
   ba812:	4604      	mov	r4, r0
   ba814:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba816:	6800      	ldr	r0, [r0, #0]
   ba818:	3101      	adds	r1, #1
   ba81a:	f7fd fc21 	bl	b8060 <realloc>
	if (newbuffer) {
   ba81e:	b110      	cbz	r0, ba826 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba820:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba824:	2001      	movs	r0, #1
	}
	return 0;
}
   ba826:	bd38      	pop	{r3, r4, r5, pc}

000ba828 <_ZN6String7reserveEj>:
{
   ba828:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba82a:	6803      	ldr	r3, [r0, #0]
{
   ba82c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba82e:	b123      	cbz	r3, ba83a <_ZN6String7reserveEj+0x12>
   ba830:	6843      	ldr	r3, [r0, #4]
   ba832:	428b      	cmp	r3, r1
   ba834:	d301      	bcc.n	ba83a <_ZN6String7reserveEj+0x12>
   ba836:	2001      	movs	r0, #1
}
   ba838:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba83a:	4620      	mov	r0, r4
   ba83c:	f7ff ffe8 	bl	ba810 <_ZN6String12changeBufferEj>
   ba840:	2800      	cmp	r0, #0
   ba842:	d0f9      	beq.n	ba838 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba844:	68a3      	ldr	r3, [r4, #8]
   ba846:	2b00      	cmp	r3, #0
   ba848:	d1f5      	bne.n	ba836 <_ZN6String7reserveEj+0xe>
   ba84a:	6822      	ldr	r2, [r4, #0]
   ba84c:	7013      	strb	r3, [r2, #0]
   ba84e:	e7f2      	b.n	ba836 <_ZN6String7reserveEj+0xe>

000ba850 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba850:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba852:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba854:	4611      	mov	r1, r2
   ba856:	9201      	str	r2, [sp, #4]
{
   ba858:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba85a:	f7ff ffe5 	bl	ba828 <_ZN6String7reserveEj>
   ba85e:	9a01      	ldr	r2, [sp, #4]
   ba860:	b928      	cbnz	r0, ba86e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba862:	4620      	mov	r0, r4
   ba864:	f7ff ffc9 	bl	ba7fa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba868:	4620      	mov	r0, r4
   ba86a:	b003      	add	sp, #12
   ba86c:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba86e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba870:	4629      	mov	r1, r5
   ba872:	6820      	ldr	r0, [r4, #0]
   ba874:	f001 fac4 	bl	bbe00 <memcpy>
	buffer[len] = 0;
   ba878:	6822      	ldr	r2, [r4, #0]
   ba87a:	68a3      	ldr	r3, [r4, #8]
   ba87c:	2100      	movs	r1, #0
   ba87e:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba880:	e7f2      	b.n	ba868 <_ZN6String4copyEPKcj+0x18>

000ba882 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba882:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba884:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba886:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba88a:	4604      	mov	r4, r0
	len = 0;
   ba88c:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba88e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba890:	b141      	cbz	r1, ba8a4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba892:	4608      	mov	r0, r1
   ba894:	9101      	str	r1, [sp, #4]
   ba896:	f001 fb96 	bl	bbfc6 <strlen>
   ba89a:	9901      	ldr	r1, [sp, #4]
   ba89c:	4602      	mov	r2, r0
   ba89e:	4620      	mov	r0, r4
   ba8a0:	f7ff ffd6 	bl	ba850 <_ZN6String4copyEPKcj>
}
   ba8a4:	4620      	mov	r0, r4
   ba8a6:	b002      	add	sp, #8
   ba8a8:	bd10      	pop	{r4, pc}

000ba8aa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba8aa:	b538      	push	{r3, r4, r5, lr}
   ba8ac:	4605      	mov	r5, r0
	if (buffer) {
   ba8ae:	6800      	ldr	r0, [r0, #0]
{
   ba8b0:	460c      	mov	r4, r1
	if (buffer) {
   ba8b2:	b168      	cbz	r0, ba8d0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba8b4:	686a      	ldr	r2, [r5, #4]
   ba8b6:	688b      	ldr	r3, [r1, #8]
   ba8b8:	429a      	cmp	r2, r3
   ba8ba:	d307      	bcc.n	ba8cc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba8bc:	6809      	ldr	r1, [r1, #0]
   ba8be:	f001 fb5c 	bl	bbf7a <strcpy>
			len = rhs.len;
   ba8c2:	68a3      	ldr	r3, [r4, #8]
   ba8c4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba8c6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba8c8:	60a3      	str	r3, [r4, #8]
}
   ba8ca:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba8cc:	f7fd fbc0 	bl	b8050 <free>
	buffer = rhs.buffer;
   ba8d0:	6823      	ldr	r3, [r4, #0]
   ba8d2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba8d4:	6863      	ldr	r3, [r4, #4]
   ba8d6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba8d8:	68a3      	ldr	r3, [r4, #8]
   ba8da:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba8dc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba8de:	e9c4 3300 	strd	r3, r3, [r4]
   ba8e2:	e7f1      	b.n	ba8c8 <_ZN6String4moveERS_+0x1e>

000ba8e4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   ba8e4:	b510      	push	{r4, lr}
	buffer = NULL;
   ba8e6:	2300      	movs	r3, #0
	capacity = 0;
   ba8e8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   ba8ec:	4604      	mov	r4, r0
	len = 0;
   ba8ee:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba8f0:	7303      	strb	r3, [r0, #12]
	move(rval);
   ba8f2:	f7ff ffda 	bl	ba8aa <_ZN6String4moveERS_>
}
   ba8f6:	4620      	mov	r0, r4
   ba8f8:	bd10      	pop	{r4, pc}

000ba8fa <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba8fa:	4288      	cmp	r0, r1
{
   ba8fc:	b510      	push	{r4, lr}
   ba8fe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba900:	d005      	beq.n	ba90e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba902:	680b      	ldr	r3, [r1, #0]
   ba904:	b12b      	cbz	r3, ba912 <_ZN6StringaSERKS_+0x18>
   ba906:	688a      	ldr	r2, [r1, #8]
   ba908:	4619      	mov	r1, r3
   ba90a:	f7ff ffa1 	bl	ba850 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba90e:	4620      	mov	r0, r4
   ba910:	bd10      	pop	{r4, pc}
	else invalidate();
   ba912:	f7ff ff72 	bl	ba7fa <_ZN6String10invalidateEv>
   ba916:	e7fa      	b.n	ba90e <_ZN6StringaSERKS_+0x14>

000ba918 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba918:	b510      	push	{r4, lr}
	buffer = NULL;
   ba91a:	2300      	movs	r3, #0
String::String(const String &value)
   ba91c:	4604      	mov	r4, r0
	capacity = 0;
   ba91e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba922:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba924:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba926:	f7ff ffe8 	bl	ba8fa <_ZN6StringaSERKS_>
}
   ba92a:	4620      	mov	r0, r4
   ba92c:	bd10      	pop	{r4, pc}

000ba92e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   ba92e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba930:	6882      	ldr	r2, [r0, #8]
   ba932:	b93a      	cbnz	r2, ba944 <_ZNK6String6equalsEPKc+0x16>
   ba934:	b121      	cbz	r1, ba940 <_ZNK6String6equalsEPKc+0x12>
   ba936:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   ba938:	fab0 f080 	clz	r0, r0
   ba93c:	0940      	lsrs	r0, r0, #5
   ba93e:	e000      	b.n	ba942 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   ba940:	2001      	movs	r0, #1
}
   ba942:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   ba944:	6800      	ldr	r0, [r0, #0]
   ba946:	b909      	cbnz	r1, ba94c <_ZNK6String6equalsEPKc+0x1e>
   ba948:	7800      	ldrb	r0, [r0, #0]
   ba94a:	e7f5      	b.n	ba938 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   ba94c:	f001 fb0b 	bl	bbf66 <strcmp>
   ba950:	e7f2      	b.n	ba938 <_ZNK6String6equalsEPKc+0xa>
	...

000ba954 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   ba954:	b40e      	push	{r1, r2, r3}
   ba956:	b570      	push	{r4, r5, r6, lr}
   ba958:	b087      	sub	sp, #28
   ba95a:	ad0b      	add	r5, sp, #44	; 0x2c
   ba95c:	4604      	mov	r4, r0
   ba95e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba962:	9201      	str	r2, [sp, #4]
   ba964:	462b      	mov	r3, r5
   ba966:	2105      	movs	r1, #5
   ba968:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   ba96a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba96c:	f7fd fb90 	bl	b8090 <vsnprintf>
    va_end(marker);

    String result;
   ba970:	490b      	ldr	r1, [pc, #44]	; (ba9a0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   ba972:	4606      	mov	r6, r0
    String result;
   ba974:	4620      	mov	r0, r4
   ba976:	f7ff ff84 	bl	ba882 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   ba97a:	4631      	mov	r1, r6
   ba97c:	4620      	mov	r0, r4
   ba97e:	f7ff ff53 	bl	ba828 <_ZN6String7reserveEj>
    if (result.buffer) {
   ba982:	6820      	ldr	r0, [r4, #0]
   ba984:	b130      	cbz	r0, ba994 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   ba986:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   ba988:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   ba98a:	462b      	mov	r3, r5
   ba98c:	1c71      	adds	r1, r6, #1
   ba98e:	f7fd fb7f 	bl	b8090 <vsnprintf>
        va_end(marker);
        result.len = n;
   ba992:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   ba994:	4620      	mov	r0, r4
   ba996:	b007      	add	sp, #28
   ba998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba99c:	b003      	add	sp, #12
   ba99e:	4770      	bx	lr
   ba9a0:	000bd15d 	.word	0x000bd15d

000ba9a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   ba9a4:	b510      	push	{r4, lr}
   ba9a6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   ba9a8:	6800      	ldr	r0, [r0, #0]
   ba9aa:	b118      	cbz	r0, ba9b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   ba9ac:	f7fd fb50 	bl	b8050 <free>
            wakeupSource_ = nullptr;
   ba9b0:	2300      	movs	r3, #0
   ba9b2:	6023      	str	r3, [r4, #0]
        }
    }
   ba9b4:	bd10      	pop	{r4, pc}

000ba9b6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   ba9b6:	b538      	push	{r3, r4, r5, lr}
   ba9b8:	460c      	mov	r4, r1
   ba9ba:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   ba9bc:	f7ff fff2 	bl	ba9a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   ba9c0:	b154      	cbz	r4, ba9d8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   ba9c2:	8820      	ldrh	r0, [r4, #0]
   ba9c4:	f7fd fb3c 	bl	b8040 <malloc>
   ba9c8:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   ba9ca:	b128      	cbz	r0, ba9d8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   ba9cc:	8822      	ldrh	r2, [r4, #0]
   ba9ce:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   ba9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   ba9d4:	f001 ba14 	b.w	bbe00 <memcpy>
    }
   ba9d8:	bd38      	pop	{r3, r4, r5, pc}

000ba9da <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   ba9da:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   ba9dc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   ba9e0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   ba9e2:	f8d1 3006 	ldr.w	r3, [r1, #6]
   ba9e6:	f8c0 3006 	str.w	r3, [r0, #6]
   ba9ea:	894b      	ldrh	r3, [r1, #10]
   ba9ec:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   ba9ee:	460c      	mov	r4, r1
   ba9f0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   ba9f2:	f7ff ffd7 	bl	ba9a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   ba9f6:	6823      	ldr	r3, [r4, #0]
   ba9f8:	b113      	cbz	r3, baa00 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   ba9fa:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   ba9fc:	2300      	movs	r3, #0
   ba9fe:	6023      	str	r3, [r4, #0]
    }
   baa00:	bd38      	pop	{r3, r4, r5, pc}
	...

000baa04 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   baa04:	b5f0      	push	{r4, r5, r6, r7, lr}
   baa06:	4d2b      	ldr	r5, [pc, #172]	; (baab4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   baa08:	7d0b      	ldrb	r3, [r1, #20]
   baa0a:	4604      	mov	r4, r0
   baa0c:	b08b      	sub	sp, #44	; 0x2c
   baa0e:	4608      	mov	r0, r1
   baa10:	1daf      	adds	r7, r5, #6
   baa12:	2b00      	cmp	r3, #0
   baa14:	d036      	beq.n	baa84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   baa16:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   baa18:	791b      	ldrb	r3, [r3, #4]
   baa1a:	2b00      	cmp	r3, #0
   baa1c:	d032      	beq.n	baa84 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   baa1e:	4b26      	ldr	r3, [pc, #152]	; (baab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   baa20:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   baa22:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   baa24:	a902      	add	r1, sp, #8
   baa26:	3004      	adds	r0, #4
   baa28:	e9cd 2202 	strd	r2, r2, [sp, #8]
   baa2c:	f7fd fa64 	bl	b7ef8 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   baa30:	f8dd 300e 	ldr.w	r3, [sp, #14]
   baa34:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   baa38:	b200      	sxth	r0, r0
   baa3a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   baa3e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   baa42:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   baa44:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   baa46:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   baa48:	4628      	mov	r0, r5
   baa4a:	f7ff ffb4 	bl	ba9b6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   baa4e:	a802      	add	r0, sp, #8
   baa50:	f7ff ffa8 	bl	ba9a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   baa54:	2300      	movs	r3, #0
   baa56:	6023      	str	r3, [r4, #0]
   baa58:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   baa5a:	71a3      	strb	r3, [r4, #6]
   baa5c:	8123      	strh	r3, [r4, #8]
   baa5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   baa62:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   baa64:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   baa68:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   baa6a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   baa6e:	f8c4 3006 	str.w	r3, [r4, #6]
   baa72:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   baa74:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   baa76:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   baa78:	4620      	mov	r0, r4
   baa7a:	f7ff ff9c 	bl	ba9b6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   baa7e:	4620      	mov	r0, r4
   baa80:	b00b      	add	sp, #44	; 0x2c
   baa82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   baa84:	2600      	movs	r6, #0
   baa86:	2320      	movs	r3, #32
   baa88:	e9cd 3602 	strd	r3, r6, [sp, #8]
   baa8c:	4b0b      	ldr	r3, [pc, #44]	; (baabc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   baa8e:	9300      	str	r3, [sp, #0]
   baa90:	aa02      	add	r2, sp, #8
   baa92:	4633      	mov	r3, r6
   baa94:	490a      	ldr	r1, [pc, #40]	; (baac0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   baa96:	2032      	movs	r0, #50	; 0x32
   baa98:	f7fd f99e 	bl	b7dd8 <log_message>
            : wakeupSource_(nullptr),
   baa9c:	4b06      	ldr	r3, [pc, #24]	; (baab8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   baa9e:	4805      	ldr	r0, [pc, #20]	; (baab4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   baaa0:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   baaa2:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   baaa6:	a902      	add	r1, sp, #8
   baaa8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   baaac:	f7ff ff95 	bl	ba9da <_ZN17SystemSleepResultaSEOS_.isra.0>
   baab0:	e7cd      	b.n	baa4e <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   baab2:	bf00      	nop
   baab4:	2003e698 	.word	0x2003e698
   baab8:	ffff0000 	.word	0xffff0000
   baabc:	000bd243 	.word	0x000bd243
   baac0:	000bd23c 	.word	0x000bd23c

000baac4 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   baac4:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   baac6:	2420      	movs	r4, #32
{
   baac8:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   baaca:	4622      	mov	r2, r4
   baacc:	2100      	movs	r1, #0
   baace:	4668      	mov	r0, sp
   baad0:	f001 f9be 	bl	bbe50 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   baad4:	2100      	movs	r1, #0
   baad6:	4668      	mov	r0, sp
    info.size = sizeof(info);
   baad8:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   baadc:	f7fc ff94 	bl	b7a08 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   baae0:	9801      	ldr	r0, [sp, #4]
   baae2:	b008      	add	sp, #32
   baae4:	bd10      	pop	{r4, pc}
	...

000baae8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   baae8:	4b05      	ldr	r3, [pc, #20]	; (bab00 <_GLOBAL__sub_I_System+0x18>)
   baaea:	2202      	movs	r2, #2
   baaec:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   baaee:	4b05      	ldr	r3, [pc, #20]	; (bab04 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   baaf0:	4a05      	ldr	r2, [pc, #20]	; (bab08 <_GLOBAL__sub_I_System+0x20>)
   baaf2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   baaf4:	2000      	movs	r0, #0
   baaf6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   baafa:	f7fd b99f 	b.w	b7e3c <set_system_mode>
   baafe:	bf00      	nop
   bab00:	2003e6a4 	.word	0x2003e6a4
   bab04:	2003e698 	.word	0x2003e698
   bab08:	ffff0000 	.word	0xffff0000

000bab0c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bab0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bab10:	4a15      	ldr	r2, [pc, #84]	; (bab68 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bab12:	f8df 8060 	ldr.w	r8, [pc, #96]	; bab74 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bab16:	e9d2 6300 	ldrd	r6, r3, [r2]
   bab1a:	1980      	adds	r0, r0, r6
   bab1c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bab20:	4b12      	ldr	r3, [pc, #72]	; (bab6c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bab22:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bab26:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bab2a:	1986      	adds	r6, r0, r6
   bab2c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bab30:	42bb      	cmp	r3, r7
   bab32:	bf08      	it	eq
   bab34:	42b2      	cmpeq	r2, r6
{
   bab36:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bab38:	d013      	beq.n	bab62 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bab3a:	a903      	add	r1, sp, #12
   bab3c:	4668      	mov	r0, sp
   bab3e:	e9cd 6700 	strd	r6, r7, [sp]
   bab42:	f7fd fadd 	bl	b8100 <localtime_r>
	calendar_time.tm_year += 1900;
   bab46:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bab48:	4d09      	ldr	r5, [pc, #36]	; (bab70 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bab4a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bab4e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bab50:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bab52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bab54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bab56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bab58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bab5a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bab5e:	6823      	ldr	r3, [r4, #0]
   bab60:	602b      	str	r3, [r5, #0]
    }
}
   bab62:	b00c      	add	sp, #48	; 0x30
   bab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bab68:	2003e6e0 	.word	0x2003e6e0
   bab6c:	2003e6d8 	.word	0x2003e6d8
   bab70:	2003e6b0 	.word	0x2003e6b0
   bab74:	2003e6e8 	.word	0x2003e6e8

000bab78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bab78:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bab7a:	2000      	movs	r0, #0
   bab7c:	f7fd f9e8 	bl	b7f50 <spark_sync_time_pending>
   bab80:	b128      	cbz	r0, bab8e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bab82:	f7fd f9d5 	bl	b7f30 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bab86:	f080 0001 	eor.w	r0, r0, #1
   bab8a:	b2c0      	uxtb	r0, r0
    }
   bab8c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bab8e:	2001      	movs	r0, #1
   bab90:	e7fc      	b.n	bab8c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bab94 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bab94:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bab96:	f7ff ffb9 	bl	bab0c <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bab9a:	4b01      	ldr	r3, [pc, #4]	; (baba0 <_ZN9TimeClass3dayEx+0xc>)
   bab9c:	68d8      	ldr	r0, [r3, #12]
   bab9e:	bd08      	pop	{r3, pc}
   baba0:	2003e6b0 	.word	0x2003e6b0

000baba4 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   baba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   baba6:	4602      	mov	r2, r0
   baba8:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   babaa:	4668      	mov	r0, sp
    struct timeval tv = {
   babac:	2100      	movs	r1, #0
    };
   babae:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   babb2:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   babb6:	f7fc ff5f 	bl	b7a78 <hal_rtc_set_time>
   babba:	4602      	mov	r2, r0
   babbc:	b910      	cbnz	r0, babc4 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   babbe:	4601      	mov	r1, r0
   babc0:	f7fd f974 	bl	b7eac <system_notify_time_changed>
    }
}
   babc4:	b005      	add	sp, #20
   babc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000babcc <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   babcc:	b530      	push	{r4, r5, lr}
   babce:	b093      	sub	sp, #76	; 0x4c
   babd0:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   babd4:	4b19      	ldr	r3, [pc, #100]	; (bac3c <_ZN9TimeClass7timeStrEx+0x70>)
{
   babd6:	4604      	mov	r4, r0
    t += time_zone_cache;
   babd8:	e9d3 1000 	ldrd	r1, r0, [r3]
   babdc:	9b01      	ldr	r3, [sp, #4]
   babde:	1852      	adds	r2, r2, r1
   babe0:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   babe4:	4816      	ldr	r0, [pc, #88]	; (bac40 <_ZN9TimeClass7timeStrEx+0x74>)
   babe6:	e9d0 1000 	ldrd	r1, r0, [r0]
   babea:	1852      	adds	r2, r2, r1
   babec:	eb43 0300 	adc.w	r3, r3, r0
   babf0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   babf4:	2224      	movs	r2, #36	; 0x24
   babf6:	eb0d 0002 	add.w	r0, sp, r2
   babfa:	2100      	movs	r1, #0
   babfc:	f001 f928 	bl	bbe50 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bac00:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bac02:	a909      	add	r1, sp, #36	; 0x24
   bac04:	4668      	mov	r0, sp
   bac06:	f7fd fa7b 	bl	b8100 <localtime_r>
    char ascstr[26] = {};
   bac0a:	2216      	movs	r2, #22
   bac0c:	4629      	mov	r1, r5
   bac0e:	a803      	add	r0, sp, #12
   bac10:	9502      	str	r5, [sp, #8]
   bac12:	f001 f91d 	bl	bbe50 <memset>
    asctime_r(&calendar_time, ascstr);
   bac16:	a902      	add	r1, sp, #8
   bac18:	a809      	add	r0, sp, #36	; 0x24
   bac1a:	f001 f89f 	bl	bbd5c <asctime_r>
    int len = strlen(ascstr);
   bac1e:	a802      	add	r0, sp, #8
   bac20:	f001 f9d1 	bl	bbfc6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bac24:	ab12      	add	r3, sp, #72	; 0x48
   bac26:	4418      	add	r0, r3
    return String(ascstr);
   bac28:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bac2a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bac2e:	4620      	mov	r0, r4
   bac30:	f7ff fe27 	bl	ba882 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bac34:	4620      	mov	r0, r4
   bac36:	b013      	add	sp, #76	; 0x4c
   bac38:	bd30      	pop	{r4, r5, pc}
   bac3a:	bf00      	nop
   bac3c:	2003e6e0 	.word	0x2003e6e0
   bac40:	2003e6d8 	.word	0x2003e6d8

000bac44 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bac48:	b0a4      	sub	sp, #144	; 0x90
   bac4a:	4607      	mov	r7, r0
   bac4c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bac4e:	a814      	add	r0, sp, #80	; 0x50
{
   bac50:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bac52:	223f      	movs	r2, #63	; 0x3f
{
   bac54:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bac56:	f001 f9d2 	bl	bbffe <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bac5a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bac5c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bac5e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bac62:	f001 f9b0 	bl	bbfc6 <strlen>
   bac66:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bac68:	bb4c      	cbnz	r4, bacbe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bac6a:	4929      	ldr	r1, [pc, #164]	; (bad10 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bac6c:	a803      	add	r0, sp, #12
   bac6e:	f001 f984 	bl	bbf7a <strcpy>
   bac72:	ac14      	add	r4, sp, #80	; 0x50
{
   bac74:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bac76:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bac7a:	45b1      	cmp	r9, r6
   bac7c:	d934      	bls.n	bace8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bac7e:	7823      	ldrb	r3, [r4, #0]
   bac80:	2b25      	cmp	r3, #37	; 0x25
   bac82:	f106 0a01 	add.w	sl, r6, #1
   bac86:	d117      	bne.n	bacb8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bac88:	7863      	ldrb	r3, [r4, #1]
   bac8a:	2b7a      	cmp	r3, #122	; 0x7a
   bac8c:	d114      	bne.n	bacb8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bac8e:	a803      	add	r0, sp, #12
   bac90:	f001 f999 	bl	bbfc6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bac94:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bac96:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bac98:	1830      	adds	r0, r6, r0
   bac9a:	4418      	add	r0, r3
   bac9c:	eba9 0206 	sub.w	r2, r9, r6
   baca0:	1ca1      	adds	r1, r4, #2
   baca2:	f001 f8ad 	bl	bbe00 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   baca6:	462a      	mov	r2, r5
   baca8:	a903      	add	r1, sp, #12
   bacaa:	4620      	mov	r0, r4
   bacac:	f001 f8a8 	bl	bbe00 <memcpy>
            len = strlen(format_str);
   bacb0:	a814      	add	r0, sp, #80	; 0x50
   bacb2:	f001 f988 	bl	bbfc6 <strlen>
   bacb6:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bacb8:	3401      	adds	r4, #1
   bacba:	4656      	mov	r6, sl
   bacbc:	e7db      	b.n	bac76 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bacbe:	233c      	movs	r3, #60	; 0x3c
   bacc0:	fb94 f2f3 	sdiv	r2, r4, r3
   bacc4:	2a00      	cmp	r2, #0
   bacc6:	bfb8      	it	lt
   bacc8:	4252      	neglt	r2, r2
   bacca:	fbb2 f1f3 	udiv	r1, r2, r3
   bacce:	fb03 2211 	mls	r2, r3, r1, r2
   bacd2:	9200      	str	r2, [sp, #0]
   bacd4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bacd8:	4a0e      	ldr	r2, [pc, #56]	; (bad14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bacda:	fb94 f3f3 	sdiv	r3, r4, r3
   bacde:	2110      	movs	r1, #16
   bace0:	a803      	add	r0, sp, #12
   bace2:	f7fd f9cd 	bl	b8080 <snprintf>
   bace6:	e7c4      	b.n	bac72 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bace8:	2100      	movs	r1, #0
   bacea:	222e      	movs	r2, #46	; 0x2e
   bacec:	a808      	add	r0, sp, #32
   bacee:	9107      	str	r1, [sp, #28]
   bacf0:	f001 f8ae 	bl	bbe50 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bacf4:	4643      	mov	r3, r8
   bacf6:	aa14      	add	r2, sp, #80	; 0x50
   bacf8:	2132      	movs	r1, #50	; 0x32
   bacfa:	a807      	add	r0, sp, #28
   bacfc:	f7fd f9f8 	bl	b80f0 <strftime>
    return String(buf);
   bad00:	a907      	add	r1, sp, #28
   bad02:	4638      	mov	r0, r7
   bad04:	f7ff fdbd 	bl	ba882 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bad08:	4638      	mov	r0, r7
   bad0a:	b024      	add	sp, #144	; 0x90
   bad0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bad10:	000bd26a 	.word	0x000bd26a
   bad14:	000bd26c 	.word	0x000bd26c

000bad18 <_ZN9TimeClass6formatExPKc>:
{
   bad18:	b5f0      	push	{r4, r5, r6, r7, lr}
   bad1a:	b08d      	sub	sp, #52	; 0x34
   bad1c:	e9cd 2300 	strd	r2, r3, [sp]
   bad20:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bad22:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bad24:	b915      	cbnz	r5, bad2c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bad26:	4b19      	ldr	r3, [pc, #100]	; (bad8c <_ZN9TimeClass6formatExPKc+0x74>)
   bad28:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bad2a:	b12d      	cbz	r5, bad38 <_ZN9TimeClass6formatExPKc+0x20>
   bad2c:	4b18      	ldr	r3, [pc, #96]	; (bad90 <_ZN9TimeClass6formatExPKc+0x78>)
   bad2e:	4628      	mov	r0, r5
   bad30:	6819      	ldr	r1, [r3, #0]
   bad32:	f001 f918 	bl	bbf66 <strcmp>
   bad36:	b938      	cbnz	r0, bad48 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bad38:	e9dd 2300 	ldrd	r2, r3, [sp]
   bad3c:	4620      	mov	r0, r4
   bad3e:	f7ff ff45 	bl	babcc <_ZN9TimeClass7timeStrEx>
}
   bad42:	4620      	mov	r0, r4
   bad44:	b00d      	add	sp, #52	; 0x34
   bad46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bad48:	4e12      	ldr	r6, [pc, #72]	; (bad94 <_ZN9TimeClass6formatExPKc+0x7c>)
   bad4a:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bad4c:	4f12      	ldr	r7, [pc, #72]	; (bad98 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bad4e:	e9d6 3200 	ldrd	r3, r2, [r6]
   bad52:	185b      	adds	r3, r3, r1
   bad54:	9901      	ldr	r1, [sp, #4]
   bad56:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bad5a:	e9d7 0100 	ldrd	r0, r1, [r7]
   bad5e:	181b      	adds	r3, r3, r0
   bad60:	eb42 0201 	adc.w	r2, r2, r1
   bad64:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bad68:	2100      	movs	r1, #0
   bad6a:	2224      	movs	r2, #36	; 0x24
   bad6c:	a803      	add	r0, sp, #12
   bad6e:	f001 f86f 	bl	bbe50 <memset>
    localtime_r(&t, &calendar_time);
   bad72:	a903      	add	r1, sp, #12
   bad74:	4668      	mov	r0, sp
   bad76:	f7fd f9c3 	bl	b8100 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bad7a:	6832      	ldr	r2, [r6, #0]
   bad7c:	683b      	ldr	r3, [r7, #0]
   bad7e:	a903      	add	r1, sp, #12
   bad80:	4413      	add	r3, r2
   bad82:	4620      	mov	r0, r4
   bad84:	462a      	mov	r2, r5
   bad86:	f7ff ff5d 	bl	bac44 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bad8a:	e7da      	b.n	bad42 <_ZN9TimeClass6formatExPKc+0x2a>
   bad8c:	2003e6ac 	.word	0x2003e6ac
   bad90:	2003de84 	.word	0x2003de84
   bad94:	2003e6e0 	.word	0x2003e6e0
   bad98:	2003e6d8 	.word	0x2003e6d8

000bad9c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bad9c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bad9e:	2000      	movs	r0, #0
   bada0:	f7fc fe5a 	bl	b7a58 <hal_rtc_time_is_valid>
    if (rtcstate)
   bada4:	4604      	mov	r4, r0
   bada6:	b9a0      	cbnz	r0, badd2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bada8:	f7fd f840 	bl	b7e2c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   badac:	2801      	cmp	r0, #1
   badae:	d110      	bne.n	badd2 <_ZN9TimeClass7isValidEv+0x36>
   badb0:	4620      	mov	r0, r4
   badb2:	f7fd f873 	bl	b7e9c <system_thread_get_state>
   badb6:	b960      	cbnz	r0, badd2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   badb8:	f7ff fede 	bl	bab78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   badbc:	b910      	cbnz	r0, badc4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   badbe:	f7fd f8af 	bl	b7f20 <spark_process>
        while (_while() && !_condition()) {
   badc2:	e7f9      	b.n	badb8 <_ZN9TimeClass7isValidEv+0x1c>
   badc4:	f7ff fed8 	bl	bab78 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   badc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   badcc:	2000      	movs	r0, #0
   badce:	f7fc be43 	b.w	b7a58 <hal_rtc_time_is_valid>
}
   badd2:	4620      	mov	r0, r4
   badd4:	bd10      	pop	{r4, pc}

000badd6 <_ZN9TimeClass3nowEv>:
{
   badd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   badd8:	f7ff ffe0 	bl	bad9c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   baddc:	2210      	movs	r2, #16
   badde:	2100      	movs	r1, #0
   bade0:	4668      	mov	r0, sp
   bade2:	f001 f835 	bl	bbe50 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bade6:	2100      	movs	r1, #0
   bade8:	4668      	mov	r0, sp
   badea:	f7fc fe3d 	bl	b7a68 <hal_rtc_get_time>
}
   badee:	9800      	ldr	r0, [sp, #0]
   badf0:	b005      	add	sp, #20
   badf2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000badf8 <_ZN9TimeClass3dayEv>:
{
   badf8:	b508      	push	{r3, lr}
	return day(now());
   badfa:	f7ff ffec 	bl	badd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   badfe:	17c1      	asrs	r1, r0, #31
   bae00:	f7ff fe84 	bl	bab0c <_ZL22Refresh_UnixTime_Cachex>
}
   bae04:	4b01      	ldr	r3, [pc, #4]	; (bae0c <_ZN9TimeClass3dayEv+0x14>)
   bae06:	68d8      	ldr	r0, [r3, #12]
   bae08:	bd08      	pop	{r3, pc}
   bae0a:	bf00      	nop
   bae0c:	2003e6b0 	.word	0x2003e6b0

000bae10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bae10:	4b02      	ldr	r3, [pc, #8]	; (bae1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bae12:	681a      	ldr	r2, [r3, #0]
   bae14:	4b02      	ldr	r3, [pc, #8]	; (bae20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bae16:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bae18:	4770      	bx	lr
   bae1a:	bf00      	nop
   bae1c:	2003de84 	.word	0x2003de84
   bae20:	2003e6ac 	.word	0x2003e6ac

000bae24 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bae24:	4770      	bx	lr

000bae26 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bae26:	7441      	strb	r1, [r0, #17]
}
   bae28:	4770      	bx	lr

000bae2a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bae2a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bae2c:	7c00      	ldrb	r0, [r0, #16]
   bae2e:	f7fc ff73 	bl	b7d18 <hal_usart_available_data_for_write>
}
   bae32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bae36:	bd08      	pop	{r3, pc}

000bae38 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bae38:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bae3a:	7c00      	ldrb	r0, [r0, #16]
   bae3c:	f7fc ff44 	bl	b7cc8 <hal_usart_available>
}
   bae40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bae44:	bd08      	pop	{r3, pc}

000bae46 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bae46:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bae48:	7c00      	ldrb	r0, [r0, #16]
   bae4a:	f7fc ff4d 	bl	b7ce8 <hal_usart_peek>
}
   bae4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bae52:	bd08      	pop	{r3, pc}

000bae54 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bae54:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bae56:	7c00      	ldrb	r0, [r0, #16]
   bae58:	f7fc ff3e 	bl	b7cd8 <hal_usart_read>
}
   bae5c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bae60:	bd08      	pop	{r3, pc}

000bae62 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bae62:	7c00      	ldrb	r0, [r0, #16]
   bae64:	f7fc bf48 	b.w	b7cf8 <hal_usart_flush>

000bae68 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bae68:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bae6a:	7c45      	ldrb	r5, [r0, #17]
{
   bae6c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bae6e:	b12d      	cbz	r5, bae7c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bae70:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bae72:	b003      	add	sp, #12
   bae74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bae78:	f7fc bf1e 	b.w	b7cb8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bae7c:	7c00      	ldrb	r0, [r0, #16]
   bae7e:	9101      	str	r1, [sp, #4]
   bae80:	f7fc ff4a 	bl	b7d18 <hal_usart_available_data_for_write>
   bae84:	2800      	cmp	r0, #0
   bae86:	9901      	ldr	r1, [sp, #4]
   bae88:	dcf2      	bgt.n	bae70 <_ZN11USARTSerial5writeEh+0x8>
}
   bae8a:	4628      	mov	r0, r5
   bae8c:	b003      	add	sp, #12
   bae8e:	bd30      	pop	{r4, r5, pc}

000bae90 <_ZN11USARTSerialD0Ev>:
   bae90:	b510      	push	{r4, lr}
   bae92:	2114      	movs	r1, #20
   bae94:	4604      	mov	r4, r0
   bae96:	f7f9 f902 	bl	b409e <_ZdlPvj>
   bae9a:	4620      	mov	r0, r4
   bae9c:	bd10      	pop	{r4, pc}
	...

000baea0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   baea0:	b510      	push	{r4, lr}
   baea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baea6:	4604      	mov	r4, r0
   baea8:	4608      	mov	r0, r1
   baeaa:	4611      	mov	r1, r2
   baeac:	2200      	movs	r2, #0
   baeae:	e9c4 2301 	strd	r2, r3, [r4, #4]
   baeb2:	4b04      	ldr	r3, [pc, #16]	; (baec4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   baeb4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baeb6:	2301      	movs	r3, #1
  _serial = serial;
   baeb8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baeba:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baebc:	f7fc ff3c 	bl	b7d38 <hal_usart_init_ex>
}
   baec0:	4620      	mov	r0, r4
   baec2:	bd10      	pop	{r4, pc}
   baec4:	000bd29c 	.word	0x000bd29c

000baec8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   baec8:	7c00      	ldrb	r0, [r0, #16]
   baeca:	2300      	movs	r3, #0
   baecc:	f7fc bf2c 	b.w	b7d28 <hal_usart_begin_config>

000baed0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   baed0:	2200      	movs	r2, #0
   baed2:	f7ff bff9 	b.w	baec8 <_ZN11USARTSerial5beginEmm>

000baed6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   baed6:	7c00      	ldrb	r0, [r0, #16]
   baed8:	f7fc bee6 	b.w	b7ca8 <hal_usart_end>

000baedc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baedc:	7441      	strb	r1, [r0, #17]
}
   baede:	4770      	bx	lr

000baee0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   baee0:	4770      	bx	lr

000baee2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   baee2:	4770      	bx	lr

000baee4 <_ZN9USBSerial4readEv>:
{
   baee4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   baee6:	2100      	movs	r1, #0
   baee8:	7c00      	ldrb	r0, [r0, #16]
   baeea:	f7fc ff55 	bl	b7d98 <HAL_USB_USART_Receive_Data>
}
   baeee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baef2:	bd08      	pop	{r3, pc}

000baef4 <_ZN9USBSerial4peekEv>:
{
   baef4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   baef6:	2101      	movs	r1, #1
   baef8:	7c00      	ldrb	r0, [r0, #16]
   baefa:	f7fc ff4d 	bl	b7d98 <HAL_USB_USART_Receive_Data>
}
   baefe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baf02:	bd08      	pop	{r3, pc}

000baf04 <_ZN9USBSerial17availableForWriteEv>:
{
   baf04:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   baf06:	7c00      	ldrb	r0, [r0, #16]
   baf08:	f7fc ff3e 	bl	b7d88 <HAL_USB_USART_Available_Data_For_Write>
}
   baf0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baf10:	bd08      	pop	{r3, pc}

000baf12 <_ZN9USBSerial9availableEv>:
{
   baf12:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   baf14:	7c00      	ldrb	r0, [r0, #16]
   baf16:	f7fc ff2f 	bl	b7d78 <HAL_USB_USART_Available_Data>
}
   baf1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baf1e:	bd08      	pop	{r3, pc}

000baf20 <_ZN9USBSerial5writeEh>:
{
   baf20:	b513      	push	{r0, r1, r4, lr}
   baf22:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baf24:	7c00      	ldrb	r0, [r0, #16]
{
   baf26:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   baf28:	f7fc ff2e 	bl	b7d88 <HAL_USB_USART_Available_Data_For_Write>
   baf2c:	2800      	cmp	r0, #0
   baf2e:	9901      	ldr	r1, [sp, #4]
   baf30:	dc01      	bgt.n	baf36 <_ZN9USBSerial5writeEh+0x16>
   baf32:	7c60      	ldrb	r0, [r4, #17]
   baf34:	b120      	cbz	r0, baf40 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   baf36:	7c20      	ldrb	r0, [r4, #16]
   baf38:	f7fc ff36 	bl	b7da8 <HAL_USB_USART_Send_Data>
   baf3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   baf40:	b002      	add	sp, #8
   baf42:	bd10      	pop	{r4, pc}

000baf44 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   baf44:	7c00      	ldrb	r0, [r0, #16]
   baf46:	f7fc bf37 	b.w	b7db8 <HAL_USB_USART_Flush_Data>

000baf4a <_ZN9USBSerialD0Ev>:
   baf4a:	b510      	push	{r4, lr}
   baf4c:	2114      	movs	r1, #20
   baf4e:	4604      	mov	r4, r0
   baf50:	f7f9 f8a5 	bl	b409e <_ZdlPvj>
   baf54:	4620      	mov	r0, r4
   baf56:	bd10      	pop	{r4, pc}

000baf58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   baf58:	b510      	push	{r4, lr}
   baf5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf5e:	4604      	mov	r4, r0
   baf60:	4608      	mov	r0, r1
   baf62:	2100      	movs	r1, #0
   baf64:	e9c4 1301 	strd	r1, r3, [r4, #4]
   baf68:	4b04      	ldr	r3, [pc, #16]	; (baf7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   baf6a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baf6c:	2301      	movs	r3, #1
  _serial = serial;
   baf6e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baf70:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   baf72:	4611      	mov	r1, r2
   baf74:	f7fc fee8 	bl	b7d48 <HAL_USB_USART_Init>
}
   baf78:	4620      	mov	r0, r4
   baf7a:	bd10      	pop	{r4, pc}
   baf7c:	000bd2cc 	.word	0x000bd2cc

000baf80 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   baf80:	7c00      	ldrb	r0, [r0, #16]
   baf82:	2200      	movs	r2, #0
   baf84:	f7fc bee8 	b.w	b7d58 <HAL_USB_USART_Begin>

000baf88 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   baf88:	7c00      	ldrb	r0, [r0, #16]
   baf8a:	f7fc beed 	b.w	b7d68 <HAL_USB_USART_End>

000baf8e <_Z19acquireSerialBufferv>:
{
   baf8e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   baf90:	2214      	movs	r2, #20
{
   baf92:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   baf94:	2100      	movs	r1, #0
   baf96:	f000 ff5b 	bl	bbe50 <memset>
}
   baf9a:	4620      	mov	r0, r4
   baf9c:	bd10      	pop	{r4, pc}
	...

000bafa0 <_Z16_fetch_usbserialv>:
{
   bafa0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bafa2:	4c0f      	ldr	r4, [pc, #60]	; (bafe0 <_Z16_fetch_usbserialv+0x40>)
{
   bafa4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bafa6:	a803      	add	r0, sp, #12
   bafa8:	f7ff fff1 	bl	baf8e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bafac:	7821      	ldrb	r1, [r4, #0]
   bafae:	f3bf 8f5b 	dmb	ish
   bafb2:	f011 0101 	ands.w	r1, r1, #1
   bafb6:	d10f      	bne.n	bafd8 <_Z16_fetch_usbserialv+0x38>
   bafb8:	4620      	mov	r0, r4
   bafba:	9101      	str	r1, [sp, #4]
   bafbc:	f7f9 f87e 	bl	b40bc <__cxa_guard_acquire>
   bafc0:	9901      	ldr	r1, [sp, #4]
   bafc2:	b148      	cbz	r0, bafd8 <_Z16_fetch_usbserialv+0x38>
   bafc4:	aa03      	add	r2, sp, #12
   bafc6:	4807      	ldr	r0, [pc, #28]	; (bafe4 <_Z16_fetch_usbserialv+0x44>)
   bafc8:	f7ff ffc6 	bl	baf58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bafcc:	4620      	mov	r0, r4
   bafce:	f7f9 f87a 	bl	b40c6 <__cxa_guard_release>
   bafd2:	4805      	ldr	r0, [pc, #20]	; (bafe8 <_Z16_fetch_usbserialv+0x48>)
   bafd4:	f000 fee8 	bl	bbda8 <atexit>
	return _usbserial;
}
   bafd8:	4802      	ldr	r0, [pc, #8]	; (bafe4 <_Z16_fetch_usbserialv+0x44>)
   bafda:	b008      	add	sp, #32
   bafdc:	bd10      	pop	{r4, pc}
   bafde:	bf00      	nop
   bafe0:	2003e6f0 	.word	0x2003e6f0
   bafe4:	2003e6f4 	.word	0x2003e6f4
   bafe8:	000baee1 	.word	0x000baee1

000bafec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bafec:	4b01      	ldr	r3, [pc, #4]	; (baff4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bafee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   baff0:	4770      	bx	lr
   baff2:	bf00      	nop
   baff4:	2003de88 	.word	0x2003de88

000baff8 <serialEventRun>:
{
   baff8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   baffa:	4b0b      	ldr	r3, [pc, #44]	; (bb028 <serialEventRun+0x30>)
   baffc:	b143      	cbz	r3, bb010 <serialEventRun+0x18>
   baffe:	f7ff ffcf 	bl	bafa0 <_Z16_fetch_usbserialv>
   bb002:	6803      	ldr	r3, [r0, #0]
   bb004:	691b      	ldr	r3, [r3, #16]
   bb006:	4798      	blx	r3
   bb008:	2800      	cmp	r0, #0
   bb00a:	dd01      	ble.n	bb010 <serialEventRun+0x18>
        serialEvent();
   bb00c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb010:	4b06      	ldr	r3, [pc, #24]	; (bb02c <serialEventRun+0x34>)
   bb012:	b143      	cbz	r3, bb026 <serialEventRun+0x2e>
   bb014:	f000 f9c2 	bl	bb39c <_Z22__fetch_global_Serial1v>
   bb018:	6803      	ldr	r3, [r0, #0]
   bb01a:	691b      	ldr	r3, [r3, #16]
   bb01c:	4798      	blx	r3
   bb01e:	2800      	cmp	r0, #0
   bb020:	dd01      	ble.n	bb026 <serialEventRun+0x2e>
        serialEvent1();
   bb022:	f3af 8000 	nop.w
}
   bb026:	bd08      	pop	{r3, pc}
	...

000bb030 <_post_loop>:
{
   bb030:	b508      	push	{r3, lr}
	serialEventRun();
   bb032:	f7ff ffe1 	bl	baff8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb036:	f7fc fd07 	bl	b7a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb03a:	4b01      	ldr	r3, [pc, #4]	; (bb040 <_post_loop+0x10>)
   bb03c:	6018      	str	r0, [r3, #0]
}
   bb03e:	bd08      	pop	{r3, pc}
   bb040:	2003e710 	.word	0x2003e710

000bb044 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb044:	4805      	ldr	r0, [pc, #20]	; (bb05c <_Z33system_initialize_user_backup_ramv+0x18>)
   bb046:	4a06      	ldr	r2, [pc, #24]	; (bb060 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb048:	4906      	ldr	r1, [pc, #24]	; (bb064 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb04a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb04c:	1a12      	subs	r2, r2, r0
   bb04e:	f000 fed7 	bl	bbe00 <memcpy>
    __backup_sram_signature = signature;
   bb052:	4b05      	ldr	r3, [pc, #20]	; (bb068 <_Z33system_initialize_user_backup_ramv+0x24>)
   bb054:	4a05      	ldr	r2, [pc, #20]	; (bb06c <_Z33system_initialize_user_backup_ramv+0x28>)
   bb056:	601a      	str	r2, [r3, #0]
}
   bb058:	bd08      	pop	{r3, pc}
   bb05a:	bf00      	nop
   bb05c:	2003f400 	.word	0x2003f400
   bb060:	2003f404 	.word	0x2003f404
   bb064:	000bd584 	.word	0x000bd584
   bb068:	2003f400 	.word	0x2003f400
   bb06c:	9a271c1e 	.word	0x9a271c1e

000bb070 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb070:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb072:	2300      	movs	r3, #0
   bb074:	9300      	str	r3, [sp, #0]
   bb076:	461a      	mov	r2, r3
   bb078:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb07c:	f7fc ff28 	bl	b7ed0 <system_ctrl_set_result>
}
   bb080:	b003      	add	sp, #12
   bb082:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb088 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb088:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb08a:	8843      	ldrh	r3, [r0, #2]
   bb08c:	2b0a      	cmp	r3, #10
   bb08e:	d008      	beq.n	bb0a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb090:	2b50      	cmp	r3, #80	; 0x50
   bb092:	d10b      	bne.n	bb0ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb094:	4b09      	ldr	r3, [pc, #36]	; (bb0bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb096:	681b      	ldr	r3, [r3, #0]
   bb098:	b14b      	cbz	r3, bb0ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb09a:	b003      	add	sp, #12
   bb09c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb0a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb0a2:	f7ff ffe5 	bl	bb070 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb0a6:	b003      	add	sp, #12
   bb0a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb0ac:	2300      	movs	r3, #0
   bb0ae:	9300      	str	r3, [sp, #0]
   bb0b0:	461a      	mov	r2, r3
   bb0b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb0b6:	f7fc ff0b 	bl	b7ed0 <system_ctrl_set_result>
}
   bb0ba:	e7f4      	b.n	bb0a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb0bc:	2003e70c 	.word	0x2003e70c

000bb0c0 <module_user_init_hook>:
{
   bb0c0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb0c2:	4812      	ldr	r0, [pc, #72]	; (bb10c <module_user_init_hook+0x4c>)
   bb0c4:	2100      	movs	r1, #0
   bb0c6:	f7fd f80b 	bl	b80e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb0ca:	4b11      	ldr	r3, [pc, #68]	; (bb110 <module_user_init_hook+0x50>)
   bb0cc:	681a      	ldr	r2, [r3, #0]
   bb0ce:	4b11      	ldr	r3, [pc, #68]	; (bb114 <module_user_init_hook+0x54>)
   bb0d0:	429a      	cmp	r2, r3
   bb0d2:	4b11      	ldr	r3, [pc, #68]	; (bb118 <module_user_init_hook+0x58>)
   bb0d4:	bf0c      	ite	eq
   bb0d6:	2201      	moveq	r2, #1
   bb0d8:	2200      	movne	r2, #0
   bb0da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb0dc:	d001      	beq.n	bb0e2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb0de:	f7ff ffb1 	bl	bb044 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb0e2:	f7fc fca1 	bl	b7a28 <HAL_RNG_GetRandomNumber>
   bb0e6:	4604      	mov	r4, r0
    srand(seed);
   bb0e8:	f000 feba 	bl	bbe60 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb0ec:	4b0b      	ldr	r3, [pc, #44]	; (bb11c <module_user_init_hook+0x5c>)
   bb0ee:	b113      	cbz	r3, bb0f6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb0f0:	4620      	mov	r0, r4
   bb0f2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb0f6:	2100      	movs	r1, #0
   bb0f8:	4808      	ldr	r0, [pc, #32]	; (bb11c <module_user_init_hook+0x5c>)
   bb0fa:	f7fc ff39 	bl	b7f70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb102:	4807      	ldr	r0, [pc, #28]	; (bb120 <module_user_init_hook+0x60>)
   bb104:	2100      	movs	r1, #0
   bb106:	f7fc bed9 	b.w	b7ebc <system_ctrl_set_app_request_handler>
   bb10a:	bf00      	nop
   bb10c:	000bafed 	.word	0x000bafed
   bb110:	2003f400 	.word	0x2003f400
   bb114:	9a271c1e 	.word	0x9a271c1e
   bb118:	2003e708 	.word	0x2003e708
   bb11c:	00000000 	.word	0x00000000
   bb120:	000bb089 	.word	0x000bb089

000bb124 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bb124:	b508      	push	{r3, lr}
   bb126:	4b02      	ldr	r3, [pc, #8]	; (bb130 <spark_protocol_instance+0xc>)
   bb128:	681b      	ldr	r3, [r3, #0]
   bb12a:	681b      	ldr	r3, [r3, #0]
   bb12c:	9301      	str	r3, [sp, #4]
   bb12e:	bd08      	pop	{r3, pc}
   bb130:	0003025c 	.word	0x0003025c

000bb134 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bb134:	b508      	push	{r3, lr}
   bb136:	4b02      	ldr	r3, [pc, #8]	; (bb140 <spark_protocol_set_product_id+0xc>)
   bb138:	681b      	ldr	r3, [r3, #0]
   bb13a:	685b      	ldr	r3, [r3, #4]
   bb13c:	9301      	str	r3, [sp, #4]
   bb13e:	bd08      	pop	{r3, pc}
   bb140:	0003025c 	.word	0x0003025c

000bb144 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bb144:	b508      	push	{r3, lr}
   bb146:	4b02      	ldr	r3, [pc, #8]	; (bb150 <spark_protocol_set_product_firmware_version+0xc>)
   bb148:	681b      	ldr	r3, [r3, #0]
   bb14a:	689b      	ldr	r3, [r3, #8]
   bb14c:	9301      	str	r3, [sp, #4]
   bb14e:	bd08      	pop	{r3, pc}
   bb150:	0003025c 	.word	0x0003025c

000bb154 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb154:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb156:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb158:	d902      	bls.n	bb160 <pinAvailable+0xc>
    return false;
   bb15a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb15c:	b002      	add	sp, #8
   bb15e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb160:	f1a0 030b 	sub.w	r3, r0, #11
   bb164:	2b02      	cmp	r3, #2
   bb166:	d81a      	bhi.n	bb19e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb168:	4c17      	ldr	r4, [pc, #92]	; (bb1c8 <pinAvailable+0x74>)
   bb16a:	7821      	ldrb	r1, [r4, #0]
   bb16c:	f3bf 8f5b 	dmb	ish
   bb170:	f011 0101 	ands.w	r1, r1, #1
   bb174:	d10b      	bne.n	bb18e <pinAvailable+0x3a>
   bb176:	4620      	mov	r0, r4
   bb178:	9101      	str	r1, [sp, #4]
   bb17a:	f7f8 ff9f 	bl	b40bc <__cxa_guard_acquire>
   bb17e:	9901      	ldr	r1, [sp, #4]
   bb180:	b128      	cbz	r0, bb18e <pinAvailable+0x3a>
   bb182:	4812      	ldr	r0, [pc, #72]	; (bb1cc <pinAvailable+0x78>)
   bb184:	f7ff fa72 	bl	ba66c <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb188:	4620      	mov	r0, r4
   bb18a:	f7f8 ff9c 	bl	b40c6 <__cxa_guard_release>
   bb18e:	4b0f      	ldr	r3, [pc, #60]	; (bb1cc <pinAvailable+0x78>)
   bb190:	7818      	ldrb	r0, [r3, #0]
   bb192:	f7fc fd61 	bl	b7c58 <hal_spi_is_enabled>
   bb196:	2800      	cmp	r0, #0
   bb198:	d1df      	bne.n	bb15a <pinAvailable+0x6>
  return true; // 'pin' is available
   bb19a:	2001      	movs	r0, #1
   bb19c:	e7de      	b.n	bb15c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb19e:	2801      	cmp	r0, #1
   bb1a0:	d809      	bhi.n	bb1b6 <pinAvailable+0x62>
   bb1a2:	f000 f897 	bl	bb2d4 <_Z19__fetch_global_Wirev>
   bb1a6:	2100      	movs	r1, #0
   bb1a8:	7c00      	ldrb	r0, [r0, #16]
   bb1aa:	f7fc fcf5 	bl	b7b98 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb1ae:	f080 0001 	eor.w	r0, r0, #1
   bb1b2:	b2c0      	uxtb	r0, r0
   bb1b4:	e7d2      	b.n	bb15c <pinAvailable+0x8>
   bb1b6:	3809      	subs	r0, #9
   bb1b8:	2801      	cmp	r0, #1
   bb1ba:	d8ee      	bhi.n	bb19a <pinAvailable+0x46>
   bb1bc:	f000 f8ee 	bl	bb39c <_Z22__fetch_global_Serial1v>
   bb1c0:	7c00      	ldrb	r0, [r0, #16]
   bb1c2:	f7fc fda1 	bl	b7d08 <hal_usart_is_enabled>
   bb1c6:	e7f2      	b.n	bb1ae <pinAvailable+0x5a>
   bb1c8:	2003e3e0 	.word	0x2003e3e0
   bb1cc:	2003e3e4 	.word	0x2003e3e4

000bb1d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb1d0:	2823      	cmp	r0, #35	; 0x23
{
   bb1d2:	b538      	push	{r3, r4, r5, lr}
   bb1d4:	4604      	mov	r4, r0
   bb1d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb1d8:	d80a      	bhi.n	bb1f0 <pinMode+0x20>
   bb1da:	29ff      	cmp	r1, #255	; 0xff
   bb1dc:	d008      	beq.n	bb1f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb1de:	f7ff ffb9 	bl	bb154 <pinAvailable>
   bb1e2:	b128      	cbz	r0, bb1f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb1e4:	4629      	mov	r1, r5
   bb1e6:	4620      	mov	r0, r4
}
   bb1e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb1ec:	f7fc bc5c 	b.w	b7aa8 <HAL_Pin_Mode>
}
   bb1f0:	bd38      	pop	{r3, r4, r5, pc}

000bb1f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb1f2:	b538      	push	{r3, r4, r5, lr}
   bb1f4:	4604      	mov	r4, r0
   bb1f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb1f8:	f7fc fc5e 	bl	b7ab8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb1fc:	28ff      	cmp	r0, #255	; 0xff
   bb1fe:	d010      	beq.n	bb222 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb200:	2806      	cmp	r0, #6
   bb202:	d804      	bhi.n	bb20e <digitalWrite+0x1c>
   bb204:	234d      	movs	r3, #77	; 0x4d
   bb206:	fa23 f000 	lsr.w	r0, r3, r0
   bb20a:	07c3      	lsls	r3, r0, #31
   bb20c:	d409      	bmi.n	bb222 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb20e:	4620      	mov	r0, r4
   bb210:	f7ff ffa0 	bl	bb154 <pinAvailable>
   bb214:	b128      	cbz	r0, bb222 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb216:	4629      	mov	r1, r5
   bb218:	4620      	mov	r0, r4
}
   bb21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb21e:	f7fc bc53 	b.w	b7ac8 <HAL_GPIO_Write>
}
   bb222:	bd38      	pop	{r3, r4, r5, pc}

000bb224 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bb224:	b510      	push	{r4, lr}
   bb226:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb228:	f7fc fc46 	bl	b7ab8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb22c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb22e:	b2db      	uxtb	r3, r3
   bb230:	2b01      	cmp	r3, #1
   bb232:	d908      	bls.n	bb246 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb234:	4620      	mov	r0, r4
   bb236:	f7ff ff8d 	bl	bb154 <pinAvailable>
   bb23a:	b120      	cbz	r0, bb246 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bb23c:	4620      	mov	r0, r4
}
   bb23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bb242:	f7fc bc49 	b.w	b7ad8 <HAL_GPIO_Read>
}
   bb246:	2000      	movs	r0, #0
   bb248:	bd10      	pop	{r4, pc}

000bb24a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb24a:	280d      	cmp	r0, #13
{
   bb24c:	b510      	push	{r4, lr}
   bb24e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb250:	bf9c      	itt	ls
   bb252:	340e      	addls	r4, #14
   bb254:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bb256:	4620      	mov	r0, r4
   bb258:	f7ff ff7c 	bl	bb154 <pinAvailable>
   bb25c:	b150      	cbz	r0, bb274 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bb25e:	2103      	movs	r1, #3
   bb260:	4620      	mov	r0, r4
   bb262:	f7fc fc19 	bl	b7a98 <HAL_Validate_Pin_Function>
   bb266:	2803      	cmp	r0, #3
   bb268:	d104      	bne.n	bb274 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb26a:	4620      	mov	r0, r4
}
   bb26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb270:	f7fc bc4a 	b.w	b7b08 <hal_adc_read>
}
   bb274:	2000      	movs	r0, #0
   bb276:	bd10      	pop	{r4, pc}

000bb278 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb278:	4770      	bx	lr

000bb27a <__tcf_1>:
   bb27a:	4770      	bx	lr

000bb27c <_Z17acquireWireBufferv>:
{
   bb27c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb27e:	2520      	movs	r5, #32
   bb280:	2314      	movs	r3, #20
{
   bb282:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb284:	6003      	str	r3, [r0, #0]
   bb286:	6085      	str	r5, [r0, #8]
   bb288:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb28a:	4906      	ldr	r1, [pc, #24]	; (bb2a4 <_Z17acquireWireBufferv+0x28>)
   bb28c:	4628      	mov	r0, r5
   bb28e:	f000 f8ab 	bl	bb3e8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb292:	4904      	ldr	r1, [pc, #16]	; (bb2a4 <_Z17acquireWireBufferv+0x28>)
	};
   bb294:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb296:	4628      	mov	r0, r5
   bb298:	f000 f8a6 	bl	bb3e8 <_ZnajRKSt9nothrow_t>
	};
   bb29c:	60e0      	str	r0, [r4, #12]
}
   bb29e:	4620      	mov	r0, r4
   bb2a0:	bd38      	pop	{r3, r4, r5, pc}
   bb2a2:	bf00      	nop
   bb2a4:	000bd2f4 	.word	0x000bd2f4

000bb2a8 <_Z18acquireWire1Bufferv>:
   bb2a8:	b538      	push	{r3, r4, r5, lr}
   bb2aa:	2520      	movs	r5, #32
   bb2ac:	2314      	movs	r3, #20
   bb2ae:	4604      	mov	r4, r0
   bb2b0:	6003      	str	r3, [r0, #0]
   bb2b2:	6085      	str	r5, [r0, #8]
   bb2b4:	6105      	str	r5, [r0, #16]
   bb2b6:	4906      	ldr	r1, [pc, #24]	; (bb2d0 <_Z18acquireWire1Bufferv+0x28>)
   bb2b8:	4628      	mov	r0, r5
   bb2ba:	f000 f895 	bl	bb3e8 <_ZnajRKSt9nothrow_t>
   bb2be:	4904      	ldr	r1, [pc, #16]	; (bb2d0 <_Z18acquireWire1Bufferv+0x28>)
   bb2c0:	6060      	str	r0, [r4, #4]
   bb2c2:	4628      	mov	r0, r5
   bb2c4:	f000 f890 	bl	bb3e8 <_ZnajRKSt9nothrow_t>
   bb2c8:	60e0      	str	r0, [r4, #12]
   bb2ca:	4620      	mov	r0, r4
   bb2cc:	bd38      	pop	{r3, r4, r5, pc}
   bb2ce:	bf00      	nop
   bb2d0:	000bd2f4 	.word	0x000bd2f4

000bb2d4 <_Z19__fetch_global_Wirev>:
{
   bb2d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb2d6:	4d0e      	ldr	r5, [pc, #56]	; (bb310 <_Z19__fetch_global_Wirev+0x3c>)
   bb2d8:	7829      	ldrb	r1, [r5, #0]
   bb2da:	f3bf 8f5b 	dmb	ish
   bb2de:	f011 0401 	ands.w	r4, r1, #1
{
   bb2e2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb2e4:	d111      	bne.n	bb30a <_Z19__fetch_global_Wirev+0x36>
   bb2e6:	4628      	mov	r0, r5
   bb2e8:	f7f8 fee8 	bl	b40bc <__cxa_guard_acquire>
   bb2ec:	b168      	cbz	r0, bb30a <_Z19__fetch_global_Wirev+0x36>
   bb2ee:	a801      	add	r0, sp, #4
   bb2f0:	f7ff ffc4 	bl	bb27c <_Z17acquireWireBufferv>
   bb2f4:	aa01      	add	r2, sp, #4
   bb2f6:	4621      	mov	r1, r4
   bb2f8:	4806      	ldr	r0, [pc, #24]	; (bb314 <_Z19__fetch_global_Wirev+0x40>)
   bb2fa:	f7fd fc67 	bl	b8bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb2fe:	4628      	mov	r0, r5
   bb300:	f7f8 fee1 	bl	b40c6 <__cxa_guard_release>
   bb304:	4804      	ldr	r0, [pc, #16]	; (bb318 <_Z19__fetch_global_Wirev+0x44>)
   bb306:	f000 fd4f 	bl	bbda8 <atexit>
	return wire;
}
   bb30a:	4802      	ldr	r0, [pc, #8]	; (bb314 <_Z19__fetch_global_Wirev+0x40>)
   bb30c:	b007      	add	sp, #28
   bb30e:	bd30      	pop	{r4, r5, pc}
   bb310:	2003e714 	.word	0x2003e714
   bb314:	2003e71c 	.word	0x2003e71c
   bb318:	000bb279 	.word	0x000bb279

000bb31c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bb31c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb31e:	4c0e      	ldr	r4, [pc, #56]	; (bb358 <_Z20__fetch_global_Wire1v+0x3c>)
   bb320:	7823      	ldrb	r3, [r4, #0]
   bb322:	f3bf 8f5b 	dmb	ish
   bb326:	07db      	lsls	r3, r3, #31
{
   bb328:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb32a:	d411      	bmi.n	bb350 <_Z20__fetch_global_Wire1v+0x34>
   bb32c:	4620      	mov	r0, r4
   bb32e:	f7f8 fec5 	bl	b40bc <__cxa_guard_acquire>
   bb332:	b168      	cbz	r0, bb350 <_Z20__fetch_global_Wire1v+0x34>
   bb334:	a801      	add	r0, sp, #4
   bb336:	f7ff ffb7 	bl	bb2a8 <_Z18acquireWire1Bufferv>
   bb33a:	aa01      	add	r2, sp, #4
   bb33c:	2101      	movs	r1, #1
   bb33e:	4807      	ldr	r0, [pc, #28]	; (bb35c <_Z20__fetch_global_Wire1v+0x40>)
   bb340:	f7fd fc44 	bl	b8bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb344:	4620      	mov	r0, r4
   bb346:	f7f8 febe 	bl	b40c6 <__cxa_guard_release>
   bb34a:	4805      	ldr	r0, [pc, #20]	; (bb360 <_Z20__fetch_global_Wire1v+0x44>)
   bb34c:	f000 fd2c 	bl	bbda8 <atexit>
	return wire;
}
   bb350:	4802      	ldr	r0, [pc, #8]	; (bb35c <_Z20__fetch_global_Wire1v+0x40>)
   bb352:	b006      	add	sp, #24
   bb354:	bd10      	pop	{r4, pc}
   bb356:	bf00      	nop
   bb358:	2003e718 	.word	0x2003e718
   bb35c:	2003e730 	.word	0x2003e730
   bb360:	000bb27b 	.word	0x000bb27b

000bb364 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb364:	4770      	bx	lr
	...

000bb368 <_Z20acquireSerial1Bufferv>:
{
   bb368:	b538      	push	{r3, r4, r5, lr}
   bb36a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb36c:	2514      	movs	r5, #20
   bb36e:	462a      	mov	r2, r5
   bb370:	2100      	movs	r1, #0
   bb372:	f000 fd6d 	bl	bbe50 <memset>
   bb376:	8025      	strh	r5, [r4, #0]
   bb378:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb37a:	4907      	ldr	r1, [pc, #28]	; (bb398 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb37c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb37e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb380:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb382:	f000 f831 	bl	bb3e8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb386:	4904      	ldr	r1, [pc, #16]	; (bb398 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb388:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb38a:	4628      	mov	r0, r5
   bb38c:	f000 f82c 	bl	bb3e8 <_ZnajRKSt9nothrow_t>
    };
   bb390:	60e0      	str	r0, [r4, #12]
}
   bb392:	4620      	mov	r0, r4
   bb394:	bd38      	pop	{r3, r4, r5, pc}
   bb396:	bf00      	nop
   bb398:	000bd2f4 	.word	0x000bd2f4

000bb39c <_Z22__fetch_global_Serial1v>:
{
   bb39c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb39e:	4d0e      	ldr	r5, [pc, #56]	; (bb3d8 <_Z22__fetch_global_Serial1v+0x3c>)
   bb3a0:	7829      	ldrb	r1, [r5, #0]
   bb3a2:	f3bf 8f5b 	dmb	ish
   bb3a6:	f011 0401 	ands.w	r4, r1, #1
{
   bb3aa:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb3ac:	d111      	bne.n	bb3d2 <_Z22__fetch_global_Serial1v+0x36>
   bb3ae:	4628      	mov	r0, r5
   bb3b0:	f7f8 fe84 	bl	b40bc <__cxa_guard_acquire>
   bb3b4:	b168      	cbz	r0, bb3d2 <_Z22__fetch_global_Serial1v+0x36>
   bb3b6:	a801      	add	r0, sp, #4
   bb3b8:	f7ff ffd6 	bl	bb368 <_Z20acquireSerial1Bufferv>
   bb3bc:	aa01      	add	r2, sp, #4
   bb3be:	4621      	mov	r1, r4
   bb3c0:	4806      	ldr	r0, [pc, #24]	; (bb3dc <_Z22__fetch_global_Serial1v+0x40>)
   bb3c2:	f7ff fd6d 	bl	baea0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb3c6:	4628      	mov	r0, r5
   bb3c8:	f7f8 fe7d 	bl	b40c6 <__cxa_guard_release>
   bb3cc:	4804      	ldr	r0, [pc, #16]	; (bb3e0 <_Z22__fetch_global_Serial1v+0x44>)
   bb3ce:	f000 fceb 	bl	bbda8 <atexit>
    return serial1;
}
   bb3d2:	4802      	ldr	r0, [pc, #8]	; (bb3dc <_Z22__fetch_global_Serial1v+0x40>)
   bb3d4:	b007      	add	sp, #28
   bb3d6:	bd30      	pop	{r4, r5, pc}
   bb3d8:	2003e744 	.word	0x2003e744
   bb3dc:	2003e748 	.word	0x2003e748
   bb3e0:	000bb365 	.word	0x000bb365

000bb3e4 <_ZnwjRKSt9nothrow_t>:
   bb3e4:	f7f8 be57 	b.w	b4096 <_Znwj>

000bb3e8 <_ZnajRKSt9nothrow_t>:
   bb3e8:	f7f8 be57 	b.w	b409a <_Znaj>

000bb3ec <_ZSt25__throw_bad_function_callv>:
   bb3ec:	b508      	push	{r3, lr}
   bb3ee:	f7fc fe57 	bl	b80a0 <abort>
	...

000bb3f4 <__aeabi_drsub>:
   bb3f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb3f8:	e002      	b.n	bb400 <__adddf3>
   bb3fa:	bf00      	nop

000bb3fc <__aeabi_dsub>:
   bb3fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb400 <__adddf3>:
   bb400:	b530      	push	{r4, r5, lr}
   bb402:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb406:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb40a:	ea94 0f05 	teq	r4, r5
   bb40e:	bf08      	it	eq
   bb410:	ea90 0f02 	teqeq	r0, r2
   bb414:	bf1f      	itttt	ne
   bb416:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb41a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb41e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb422:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb426:	f000 80e2 	beq.w	bb5ee <__adddf3+0x1ee>
   bb42a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb42e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb432:	bfb8      	it	lt
   bb434:	426d      	neglt	r5, r5
   bb436:	dd0c      	ble.n	bb452 <__adddf3+0x52>
   bb438:	442c      	add	r4, r5
   bb43a:	ea80 0202 	eor.w	r2, r0, r2
   bb43e:	ea81 0303 	eor.w	r3, r1, r3
   bb442:	ea82 0000 	eor.w	r0, r2, r0
   bb446:	ea83 0101 	eor.w	r1, r3, r1
   bb44a:	ea80 0202 	eor.w	r2, r0, r2
   bb44e:	ea81 0303 	eor.w	r3, r1, r3
   bb452:	2d36      	cmp	r5, #54	; 0x36
   bb454:	bf88      	it	hi
   bb456:	bd30      	pophi	{r4, r5, pc}
   bb458:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb45c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb460:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb464:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb468:	d002      	beq.n	bb470 <__adddf3+0x70>
   bb46a:	4240      	negs	r0, r0
   bb46c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb470:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb474:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb478:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb47c:	d002      	beq.n	bb484 <__adddf3+0x84>
   bb47e:	4252      	negs	r2, r2
   bb480:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb484:	ea94 0f05 	teq	r4, r5
   bb488:	f000 80a7 	beq.w	bb5da <__adddf3+0x1da>
   bb48c:	f1a4 0401 	sub.w	r4, r4, #1
   bb490:	f1d5 0e20 	rsbs	lr, r5, #32
   bb494:	db0d      	blt.n	bb4b2 <__adddf3+0xb2>
   bb496:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb49a:	fa22 f205 	lsr.w	r2, r2, r5
   bb49e:	1880      	adds	r0, r0, r2
   bb4a0:	f141 0100 	adc.w	r1, r1, #0
   bb4a4:	fa03 f20e 	lsl.w	r2, r3, lr
   bb4a8:	1880      	adds	r0, r0, r2
   bb4aa:	fa43 f305 	asr.w	r3, r3, r5
   bb4ae:	4159      	adcs	r1, r3
   bb4b0:	e00e      	b.n	bb4d0 <__adddf3+0xd0>
   bb4b2:	f1a5 0520 	sub.w	r5, r5, #32
   bb4b6:	f10e 0e20 	add.w	lr, lr, #32
   bb4ba:	2a01      	cmp	r2, #1
   bb4bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb4c0:	bf28      	it	cs
   bb4c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb4c6:	fa43 f305 	asr.w	r3, r3, r5
   bb4ca:	18c0      	adds	r0, r0, r3
   bb4cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb4d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb4d4:	d507      	bpl.n	bb4e6 <__adddf3+0xe6>
   bb4d6:	f04f 0e00 	mov.w	lr, #0
   bb4da:	f1dc 0c00 	rsbs	ip, ip, #0
   bb4de:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb4e2:	eb6e 0101 	sbc.w	r1, lr, r1
   bb4e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb4ea:	d31b      	bcc.n	bb524 <__adddf3+0x124>
   bb4ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb4f0:	d30c      	bcc.n	bb50c <__adddf3+0x10c>
   bb4f2:	0849      	lsrs	r1, r1, #1
   bb4f4:	ea5f 0030 	movs.w	r0, r0, rrx
   bb4f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb4fc:	f104 0401 	add.w	r4, r4, #1
   bb500:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb504:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb508:	f080 809a 	bcs.w	bb640 <__adddf3+0x240>
   bb50c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb510:	bf08      	it	eq
   bb512:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb516:	f150 0000 	adcs.w	r0, r0, #0
   bb51a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb51e:	ea41 0105 	orr.w	r1, r1, r5
   bb522:	bd30      	pop	{r4, r5, pc}
   bb524:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb528:	4140      	adcs	r0, r0
   bb52a:	eb41 0101 	adc.w	r1, r1, r1
   bb52e:	3c01      	subs	r4, #1
   bb530:	bf28      	it	cs
   bb532:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb536:	d2e9      	bcs.n	bb50c <__adddf3+0x10c>
   bb538:	f091 0f00 	teq	r1, #0
   bb53c:	bf04      	itt	eq
   bb53e:	4601      	moveq	r1, r0
   bb540:	2000      	moveq	r0, #0
   bb542:	fab1 f381 	clz	r3, r1
   bb546:	bf08      	it	eq
   bb548:	3320      	addeq	r3, #32
   bb54a:	f1a3 030b 	sub.w	r3, r3, #11
   bb54e:	f1b3 0220 	subs.w	r2, r3, #32
   bb552:	da0c      	bge.n	bb56e <__adddf3+0x16e>
   bb554:	320c      	adds	r2, #12
   bb556:	dd08      	ble.n	bb56a <__adddf3+0x16a>
   bb558:	f102 0c14 	add.w	ip, r2, #20
   bb55c:	f1c2 020c 	rsb	r2, r2, #12
   bb560:	fa01 f00c 	lsl.w	r0, r1, ip
   bb564:	fa21 f102 	lsr.w	r1, r1, r2
   bb568:	e00c      	b.n	bb584 <__adddf3+0x184>
   bb56a:	f102 0214 	add.w	r2, r2, #20
   bb56e:	bfd8      	it	le
   bb570:	f1c2 0c20 	rsble	ip, r2, #32
   bb574:	fa01 f102 	lsl.w	r1, r1, r2
   bb578:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb57c:	bfdc      	itt	le
   bb57e:	ea41 010c 	orrle.w	r1, r1, ip
   bb582:	4090      	lslle	r0, r2
   bb584:	1ae4      	subs	r4, r4, r3
   bb586:	bfa2      	ittt	ge
   bb588:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb58c:	4329      	orrge	r1, r5
   bb58e:	bd30      	popge	{r4, r5, pc}
   bb590:	ea6f 0404 	mvn.w	r4, r4
   bb594:	3c1f      	subs	r4, #31
   bb596:	da1c      	bge.n	bb5d2 <__adddf3+0x1d2>
   bb598:	340c      	adds	r4, #12
   bb59a:	dc0e      	bgt.n	bb5ba <__adddf3+0x1ba>
   bb59c:	f104 0414 	add.w	r4, r4, #20
   bb5a0:	f1c4 0220 	rsb	r2, r4, #32
   bb5a4:	fa20 f004 	lsr.w	r0, r0, r4
   bb5a8:	fa01 f302 	lsl.w	r3, r1, r2
   bb5ac:	ea40 0003 	orr.w	r0, r0, r3
   bb5b0:	fa21 f304 	lsr.w	r3, r1, r4
   bb5b4:	ea45 0103 	orr.w	r1, r5, r3
   bb5b8:	bd30      	pop	{r4, r5, pc}
   bb5ba:	f1c4 040c 	rsb	r4, r4, #12
   bb5be:	f1c4 0220 	rsb	r2, r4, #32
   bb5c2:	fa20 f002 	lsr.w	r0, r0, r2
   bb5c6:	fa01 f304 	lsl.w	r3, r1, r4
   bb5ca:	ea40 0003 	orr.w	r0, r0, r3
   bb5ce:	4629      	mov	r1, r5
   bb5d0:	bd30      	pop	{r4, r5, pc}
   bb5d2:	fa21 f004 	lsr.w	r0, r1, r4
   bb5d6:	4629      	mov	r1, r5
   bb5d8:	bd30      	pop	{r4, r5, pc}
   bb5da:	f094 0f00 	teq	r4, #0
   bb5de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb5e2:	bf06      	itte	eq
   bb5e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb5e8:	3401      	addeq	r4, #1
   bb5ea:	3d01      	subne	r5, #1
   bb5ec:	e74e      	b.n	bb48c <__adddf3+0x8c>
   bb5ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb5f2:	bf18      	it	ne
   bb5f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb5f8:	d029      	beq.n	bb64e <__adddf3+0x24e>
   bb5fa:	ea94 0f05 	teq	r4, r5
   bb5fe:	bf08      	it	eq
   bb600:	ea90 0f02 	teqeq	r0, r2
   bb604:	d005      	beq.n	bb612 <__adddf3+0x212>
   bb606:	ea54 0c00 	orrs.w	ip, r4, r0
   bb60a:	bf04      	itt	eq
   bb60c:	4619      	moveq	r1, r3
   bb60e:	4610      	moveq	r0, r2
   bb610:	bd30      	pop	{r4, r5, pc}
   bb612:	ea91 0f03 	teq	r1, r3
   bb616:	bf1e      	ittt	ne
   bb618:	2100      	movne	r1, #0
   bb61a:	2000      	movne	r0, #0
   bb61c:	bd30      	popne	{r4, r5, pc}
   bb61e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb622:	d105      	bne.n	bb630 <__adddf3+0x230>
   bb624:	0040      	lsls	r0, r0, #1
   bb626:	4149      	adcs	r1, r1
   bb628:	bf28      	it	cs
   bb62a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb62e:	bd30      	pop	{r4, r5, pc}
   bb630:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb634:	bf3c      	itt	cc
   bb636:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb63a:	bd30      	popcc	{r4, r5, pc}
   bb63c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb640:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb644:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb648:	f04f 0000 	mov.w	r0, #0
   bb64c:	bd30      	pop	{r4, r5, pc}
   bb64e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb652:	bf1a      	itte	ne
   bb654:	4619      	movne	r1, r3
   bb656:	4610      	movne	r0, r2
   bb658:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb65c:	bf1c      	itt	ne
   bb65e:	460b      	movne	r3, r1
   bb660:	4602      	movne	r2, r0
   bb662:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb666:	bf06      	itte	eq
   bb668:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb66c:	ea91 0f03 	teqeq	r1, r3
   bb670:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb674:	bd30      	pop	{r4, r5, pc}
   bb676:	bf00      	nop

000bb678 <__aeabi_ui2d>:
   bb678:	f090 0f00 	teq	r0, #0
   bb67c:	bf04      	itt	eq
   bb67e:	2100      	moveq	r1, #0
   bb680:	4770      	bxeq	lr
   bb682:	b530      	push	{r4, r5, lr}
   bb684:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb688:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb68c:	f04f 0500 	mov.w	r5, #0
   bb690:	f04f 0100 	mov.w	r1, #0
   bb694:	e750      	b.n	bb538 <__adddf3+0x138>
   bb696:	bf00      	nop

000bb698 <__aeabi_i2d>:
   bb698:	f090 0f00 	teq	r0, #0
   bb69c:	bf04      	itt	eq
   bb69e:	2100      	moveq	r1, #0
   bb6a0:	4770      	bxeq	lr
   bb6a2:	b530      	push	{r4, r5, lr}
   bb6a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb6a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb6ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb6b0:	bf48      	it	mi
   bb6b2:	4240      	negmi	r0, r0
   bb6b4:	f04f 0100 	mov.w	r1, #0
   bb6b8:	e73e      	b.n	bb538 <__adddf3+0x138>
   bb6ba:	bf00      	nop

000bb6bc <__aeabi_f2d>:
   bb6bc:	0042      	lsls	r2, r0, #1
   bb6be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb6c2:	ea4f 0131 	mov.w	r1, r1, rrx
   bb6c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb6ca:	bf1f      	itttt	ne
   bb6cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb6d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb6d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb6d8:	4770      	bxne	lr
   bb6da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb6de:	bf08      	it	eq
   bb6e0:	4770      	bxeq	lr
   bb6e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb6e6:	bf04      	itt	eq
   bb6e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb6ec:	4770      	bxeq	lr
   bb6ee:	b530      	push	{r4, r5, lr}
   bb6f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb6f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb6f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb6fc:	e71c      	b.n	bb538 <__adddf3+0x138>
   bb6fe:	bf00      	nop

000bb700 <__aeabi_ul2d>:
   bb700:	ea50 0201 	orrs.w	r2, r0, r1
   bb704:	bf08      	it	eq
   bb706:	4770      	bxeq	lr
   bb708:	b530      	push	{r4, r5, lr}
   bb70a:	f04f 0500 	mov.w	r5, #0
   bb70e:	e00a      	b.n	bb726 <__aeabi_l2d+0x16>

000bb710 <__aeabi_l2d>:
   bb710:	ea50 0201 	orrs.w	r2, r0, r1
   bb714:	bf08      	it	eq
   bb716:	4770      	bxeq	lr
   bb718:	b530      	push	{r4, r5, lr}
   bb71a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb71e:	d502      	bpl.n	bb726 <__aeabi_l2d+0x16>
   bb720:	4240      	negs	r0, r0
   bb722:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb726:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb72a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb72e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb732:	f43f aed8 	beq.w	bb4e6 <__adddf3+0xe6>
   bb736:	f04f 0203 	mov.w	r2, #3
   bb73a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb73e:	bf18      	it	ne
   bb740:	3203      	addne	r2, #3
   bb742:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb746:	bf18      	it	ne
   bb748:	3203      	addne	r2, #3
   bb74a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb74e:	f1c2 0320 	rsb	r3, r2, #32
   bb752:	fa00 fc03 	lsl.w	ip, r0, r3
   bb756:	fa20 f002 	lsr.w	r0, r0, r2
   bb75a:	fa01 fe03 	lsl.w	lr, r1, r3
   bb75e:	ea40 000e 	orr.w	r0, r0, lr
   bb762:	fa21 f102 	lsr.w	r1, r1, r2
   bb766:	4414      	add	r4, r2
   bb768:	e6bd      	b.n	bb4e6 <__adddf3+0xe6>
   bb76a:	bf00      	nop

000bb76c <__aeabi_dmul>:
   bb76c:	b570      	push	{r4, r5, r6, lr}
   bb76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb77a:	bf1d      	ittte	ne
   bb77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb780:	ea94 0f0c 	teqne	r4, ip
   bb784:	ea95 0f0c 	teqne	r5, ip
   bb788:	f000 f8de 	bleq	bb948 <__aeabi_dmul+0x1dc>
   bb78c:	442c      	add	r4, r5
   bb78e:	ea81 0603 	eor.w	r6, r1, r3
   bb792:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb796:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb79a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb79e:	bf18      	it	ne
   bb7a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb7a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb7a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb7ac:	d038      	beq.n	bb820 <__aeabi_dmul+0xb4>
   bb7ae:	fba0 ce02 	umull	ip, lr, r0, r2
   bb7b2:	f04f 0500 	mov.w	r5, #0
   bb7b6:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb7ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb7be:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb7c2:	f04f 0600 	mov.w	r6, #0
   bb7c6:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb7ca:	f09c 0f00 	teq	ip, #0
   bb7ce:	bf18      	it	ne
   bb7d0:	f04e 0e01 	orrne.w	lr, lr, #1
   bb7d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb7d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb7dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb7e0:	d204      	bcs.n	bb7ec <__aeabi_dmul+0x80>
   bb7e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb7e6:	416d      	adcs	r5, r5
   bb7e8:	eb46 0606 	adc.w	r6, r6, r6
   bb7ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb7f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb7f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb7f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb7fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb800:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb804:	bf88      	it	hi
   bb806:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb80a:	d81e      	bhi.n	bb84a <__aeabi_dmul+0xde>
   bb80c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb810:	bf08      	it	eq
   bb812:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb816:	f150 0000 	adcs.w	r0, r0, #0
   bb81a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb81e:	bd70      	pop	{r4, r5, r6, pc}
   bb820:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb824:	ea46 0101 	orr.w	r1, r6, r1
   bb828:	ea40 0002 	orr.w	r0, r0, r2
   bb82c:	ea81 0103 	eor.w	r1, r1, r3
   bb830:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb834:	bfc2      	ittt	gt
   bb836:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb83a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb83e:	bd70      	popgt	{r4, r5, r6, pc}
   bb840:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb844:	f04f 0e00 	mov.w	lr, #0
   bb848:	3c01      	subs	r4, #1
   bb84a:	f300 80ab 	bgt.w	bb9a4 <__aeabi_dmul+0x238>
   bb84e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb852:	bfde      	ittt	le
   bb854:	2000      	movle	r0, #0
   bb856:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb85a:	bd70      	pople	{r4, r5, r6, pc}
   bb85c:	f1c4 0400 	rsb	r4, r4, #0
   bb860:	3c20      	subs	r4, #32
   bb862:	da35      	bge.n	bb8d0 <__aeabi_dmul+0x164>
   bb864:	340c      	adds	r4, #12
   bb866:	dc1b      	bgt.n	bb8a0 <__aeabi_dmul+0x134>
   bb868:	f104 0414 	add.w	r4, r4, #20
   bb86c:	f1c4 0520 	rsb	r5, r4, #32
   bb870:	fa00 f305 	lsl.w	r3, r0, r5
   bb874:	fa20 f004 	lsr.w	r0, r0, r4
   bb878:	fa01 f205 	lsl.w	r2, r1, r5
   bb87c:	ea40 0002 	orr.w	r0, r0, r2
   bb880:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb884:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb888:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb88c:	fa21 f604 	lsr.w	r6, r1, r4
   bb890:	eb42 0106 	adc.w	r1, r2, r6
   bb894:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb898:	bf08      	it	eq
   bb89a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb89e:	bd70      	pop	{r4, r5, r6, pc}
   bb8a0:	f1c4 040c 	rsb	r4, r4, #12
   bb8a4:	f1c4 0520 	rsb	r5, r4, #32
   bb8a8:	fa00 f304 	lsl.w	r3, r0, r4
   bb8ac:	fa20 f005 	lsr.w	r0, r0, r5
   bb8b0:	fa01 f204 	lsl.w	r2, r1, r4
   bb8b4:	ea40 0002 	orr.w	r0, r0, r2
   bb8b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb8bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb8c0:	f141 0100 	adc.w	r1, r1, #0
   bb8c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb8c8:	bf08      	it	eq
   bb8ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb8ce:	bd70      	pop	{r4, r5, r6, pc}
   bb8d0:	f1c4 0520 	rsb	r5, r4, #32
   bb8d4:	fa00 f205 	lsl.w	r2, r0, r5
   bb8d8:	ea4e 0e02 	orr.w	lr, lr, r2
   bb8dc:	fa20 f304 	lsr.w	r3, r0, r4
   bb8e0:	fa01 f205 	lsl.w	r2, r1, r5
   bb8e4:	ea43 0302 	orr.w	r3, r3, r2
   bb8e8:	fa21 f004 	lsr.w	r0, r1, r4
   bb8ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb8f0:	fa21 f204 	lsr.w	r2, r1, r4
   bb8f4:	ea20 0002 	bic.w	r0, r0, r2
   bb8f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb8fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb900:	bf08      	it	eq
   bb902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb906:	bd70      	pop	{r4, r5, r6, pc}
   bb908:	f094 0f00 	teq	r4, #0
   bb90c:	d10f      	bne.n	bb92e <__aeabi_dmul+0x1c2>
   bb90e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb912:	0040      	lsls	r0, r0, #1
   bb914:	eb41 0101 	adc.w	r1, r1, r1
   bb918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb91c:	bf08      	it	eq
   bb91e:	3c01      	subeq	r4, #1
   bb920:	d0f7      	beq.n	bb912 <__aeabi_dmul+0x1a6>
   bb922:	ea41 0106 	orr.w	r1, r1, r6
   bb926:	f095 0f00 	teq	r5, #0
   bb92a:	bf18      	it	ne
   bb92c:	4770      	bxne	lr
   bb92e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb932:	0052      	lsls	r2, r2, #1
   bb934:	eb43 0303 	adc.w	r3, r3, r3
   bb938:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb93c:	bf08      	it	eq
   bb93e:	3d01      	subeq	r5, #1
   bb940:	d0f7      	beq.n	bb932 <__aeabi_dmul+0x1c6>
   bb942:	ea43 0306 	orr.w	r3, r3, r6
   bb946:	4770      	bx	lr
   bb948:	ea94 0f0c 	teq	r4, ip
   bb94c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb950:	bf18      	it	ne
   bb952:	ea95 0f0c 	teqne	r5, ip
   bb956:	d00c      	beq.n	bb972 <__aeabi_dmul+0x206>
   bb958:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb95c:	bf18      	it	ne
   bb95e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb962:	d1d1      	bne.n	bb908 <__aeabi_dmul+0x19c>
   bb964:	ea81 0103 	eor.w	r1, r1, r3
   bb968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb96c:	f04f 0000 	mov.w	r0, #0
   bb970:	bd70      	pop	{r4, r5, r6, pc}
   bb972:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb976:	bf06      	itte	eq
   bb978:	4610      	moveq	r0, r2
   bb97a:	4619      	moveq	r1, r3
   bb97c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb980:	d019      	beq.n	bb9b6 <__aeabi_dmul+0x24a>
   bb982:	ea94 0f0c 	teq	r4, ip
   bb986:	d102      	bne.n	bb98e <__aeabi_dmul+0x222>
   bb988:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb98c:	d113      	bne.n	bb9b6 <__aeabi_dmul+0x24a>
   bb98e:	ea95 0f0c 	teq	r5, ip
   bb992:	d105      	bne.n	bb9a0 <__aeabi_dmul+0x234>
   bb994:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb998:	bf1c      	itt	ne
   bb99a:	4610      	movne	r0, r2
   bb99c:	4619      	movne	r1, r3
   bb99e:	d10a      	bne.n	bb9b6 <__aeabi_dmul+0x24a>
   bb9a0:	ea81 0103 	eor.w	r1, r1, r3
   bb9a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb9a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb9ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb9b0:	f04f 0000 	mov.w	r0, #0
   bb9b4:	bd70      	pop	{r4, r5, r6, pc}
   bb9b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb9ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb9be:	bd70      	pop	{r4, r5, r6, pc}

000bb9c0 <__aeabi_ddiv>:
   bb9c0:	b570      	push	{r4, r5, r6, lr}
   bb9c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb9c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb9ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb9ce:	bf1d      	ittte	ne
   bb9d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb9d4:	ea94 0f0c 	teqne	r4, ip
   bb9d8:	ea95 0f0c 	teqne	r5, ip
   bb9dc:	f000 f8a7 	bleq	bbb2e <__aeabi_ddiv+0x16e>
   bb9e0:	eba4 0405 	sub.w	r4, r4, r5
   bb9e4:	ea81 0e03 	eor.w	lr, r1, r3
   bb9e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb9ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb9f0:	f000 8088 	beq.w	bbb04 <__aeabi_ddiv+0x144>
   bb9f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb9f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb9fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bba00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bba04:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bba08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bba0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bba10:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bba14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bba18:	429d      	cmp	r5, r3
   bba1a:	bf08      	it	eq
   bba1c:	4296      	cmpeq	r6, r2
   bba1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bba22:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bba26:	d202      	bcs.n	bba2e <__aeabi_ddiv+0x6e>
   bba28:	085b      	lsrs	r3, r3, #1
   bba2a:	ea4f 0232 	mov.w	r2, r2, rrx
   bba2e:	1ab6      	subs	r6, r6, r2
   bba30:	eb65 0503 	sbc.w	r5, r5, r3
   bba34:	085b      	lsrs	r3, r3, #1
   bba36:	ea4f 0232 	mov.w	r2, r2, rrx
   bba3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bba3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bba42:	ebb6 0e02 	subs.w	lr, r6, r2
   bba46:	eb75 0e03 	sbcs.w	lr, r5, r3
   bba4a:	bf22      	ittt	cs
   bba4c:	1ab6      	subcs	r6, r6, r2
   bba4e:	4675      	movcs	r5, lr
   bba50:	ea40 000c 	orrcs.w	r0, r0, ip
   bba54:	085b      	lsrs	r3, r3, #1
   bba56:	ea4f 0232 	mov.w	r2, r2, rrx
   bba5a:	ebb6 0e02 	subs.w	lr, r6, r2
   bba5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bba62:	bf22      	ittt	cs
   bba64:	1ab6      	subcs	r6, r6, r2
   bba66:	4675      	movcs	r5, lr
   bba68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bba6c:	085b      	lsrs	r3, r3, #1
   bba6e:	ea4f 0232 	mov.w	r2, r2, rrx
   bba72:	ebb6 0e02 	subs.w	lr, r6, r2
   bba76:	eb75 0e03 	sbcs.w	lr, r5, r3
   bba7a:	bf22      	ittt	cs
   bba7c:	1ab6      	subcs	r6, r6, r2
   bba7e:	4675      	movcs	r5, lr
   bba80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bba84:	085b      	lsrs	r3, r3, #1
   bba86:	ea4f 0232 	mov.w	r2, r2, rrx
   bba8a:	ebb6 0e02 	subs.w	lr, r6, r2
   bba8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bba92:	bf22      	ittt	cs
   bba94:	1ab6      	subcs	r6, r6, r2
   bba96:	4675      	movcs	r5, lr
   bba98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bba9c:	ea55 0e06 	orrs.w	lr, r5, r6
   bbaa0:	d018      	beq.n	bbad4 <__aeabi_ddiv+0x114>
   bbaa2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bbaa6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbaaa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbaae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbab2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbab6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbaba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbabe:	d1c0      	bne.n	bba42 <__aeabi_ddiv+0x82>
   bbac0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbac4:	d10b      	bne.n	bbade <__aeabi_ddiv+0x11e>
   bbac6:	ea41 0100 	orr.w	r1, r1, r0
   bbaca:	f04f 0000 	mov.w	r0, #0
   bbace:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbad2:	e7b6      	b.n	bba42 <__aeabi_ddiv+0x82>
   bbad4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbad8:	bf04      	itt	eq
   bbada:	4301      	orreq	r1, r0
   bbadc:	2000      	moveq	r0, #0
   bbade:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbae2:	bf88      	it	hi
   bbae4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbae8:	f63f aeaf 	bhi.w	bb84a <__aeabi_dmul+0xde>
   bbaec:	ebb5 0c03 	subs.w	ip, r5, r3
   bbaf0:	bf04      	itt	eq
   bbaf2:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbaf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbafa:	f150 0000 	adcs.w	r0, r0, #0
   bbafe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbb02:	bd70      	pop	{r4, r5, r6, pc}
   bbb04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbb08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbb0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbb10:	bfc2      	ittt	gt
   bbb12:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbb16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbb1a:	bd70      	popgt	{r4, r5, r6, pc}
   bbb1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbb20:	f04f 0e00 	mov.w	lr, #0
   bbb24:	3c01      	subs	r4, #1
   bbb26:	e690      	b.n	bb84a <__aeabi_dmul+0xde>
   bbb28:	ea45 0e06 	orr.w	lr, r5, r6
   bbb2c:	e68d      	b.n	bb84a <__aeabi_dmul+0xde>
   bbb2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbb32:	ea94 0f0c 	teq	r4, ip
   bbb36:	bf08      	it	eq
   bbb38:	ea95 0f0c 	teqeq	r5, ip
   bbb3c:	f43f af3b 	beq.w	bb9b6 <__aeabi_dmul+0x24a>
   bbb40:	ea94 0f0c 	teq	r4, ip
   bbb44:	d10a      	bne.n	bbb5c <__aeabi_ddiv+0x19c>
   bbb46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbb4a:	f47f af34 	bne.w	bb9b6 <__aeabi_dmul+0x24a>
   bbb4e:	ea95 0f0c 	teq	r5, ip
   bbb52:	f47f af25 	bne.w	bb9a0 <__aeabi_dmul+0x234>
   bbb56:	4610      	mov	r0, r2
   bbb58:	4619      	mov	r1, r3
   bbb5a:	e72c      	b.n	bb9b6 <__aeabi_dmul+0x24a>
   bbb5c:	ea95 0f0c 	teq	r5, ip
   bbb60:	d106      	bne.n	bbb70 <__aeabi_ddiv+0x1b0>
   bbb62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbb66:	f43f aefd 	beq.w	bb964 <__aeabi_dmul+0x1f8>
   bbb6a:	4610      	mov	r0, r2
   bbb6c:	4619      	mov	r1, r3
   bbb6e:	e722      	b.n	bb9b6 <__aeabi_dmul+0x24a>
   bbb70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbb74:	bf18      	it	ne
   bbb76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbb7a:	f47f aec5 	bne.w	bb908 <__aeabi_dmul+0x19c>
   bbb7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbb82:	f47f af0d 	bne.w	bb9a0 <__aeabi_dmul+0x234>
   bbb86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbb8a:	f47f aeeb 	bne.w	bb964 <__aeabi_dmul+0x1f8>
   bbb8e:	e712      	b.n	bb9b6 <__aeabi_dmul+0x24a>

000bbb90 <__gedf2>:
   bbb90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbb94:	e006      	b.n	bbba4 <__cmpdf2+0x4>
   bbb96:	bf00      	nop

000bbb98 <__ledf2>:
   bbb98:	f04f 0c01 	mov.w	ip, #1
   bbb9c:	e002      	b.n	bbba4 <__cmpdf2+0x4>
   bbb9e:	bf00      	nop

000bbba0 <__cmpdf2>:
   bbba0:	f04f 0c01 	mov.w	ip, #1
   bbba4:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbba8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbbac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbbb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbbb4:	bf18      	it	ne
   bbbb6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbbba:	d01b      	beq.n	bbbf4 <__cmpdf2+0x54>
   bbbbc:	b001      	add	sp, #4
   bbbbe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbbc2:	bf0c      	ite	eq
   bbbc4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbbc8:	ea91 0f03 	teqne	r1, r3
   bbbcc:	bf02      	ittt	eq
   bbbce:	ea90 0f02 	teqeq	r0, r2
   bbbd2:	2000      	moveq	r0, #0
   bbbd4:	4770      	bxeq	lr
   bbbd6:	f110 0f00 	cmn.w	r0, #0
   bbbda:	ea91 0f03 	teq	r1, r3
   bbbde:	bf58      	it	pl
   bbbe0:	4299      	cmppl	r1, r3
   bbbe2:	bf08      	it	eq
   bbbe4:	4290      	cmpeq	r0, r2
   bbbe6:	bf2c      	ite	cs
   bbbe8:	17d8      	asrcs	r0, r3, #31
   bbbea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbbee:	f040 0001 	orr.w	r0, r0, #1
   bbbf2:	4770      	bx	lr
   bbbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbbfc:	d102      	bne.n	bbc04 <__cmpdf2+0x64>
   bbbfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbc02:	d107      	bne.n	bbc14 <__cmpdf2+0x74>
   bbc04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbc08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbc0c:	d1d6      	bne.n	bbbbc <__cmpdf2+0x1c>
   bbc0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbc12:	d0d3      	beq.n	bbbbc <__cmpdf2+0x1c>
   bbc14:	f85d 0b04 	ldr.w	r0, [sp], #4
   bbc18:	4770      	bx	lr
   bbc1a:	bf00      	nop

000bbc1c <__aeabi_cdrcmple>:
   bbc1c:	4684      	mov	ip, r0
   bbc1e:	4610      	mov	r0, r2
   bbc20:	4662      	mov	r2, ip
   bbc22:	468c      	mov	ip, r1
   bbc24:	4619      	mov	r1, r3
   bbc26:	4663      	mov	r3, ip
   bbc28:	e000      	b.n	bbc2c <__aeabi_cdcmpeq>
   bbc2a:	bf00      	nop

000bbc2c <__aeabi_cdcmpeq>:
   bbc2c:	b501      	push	{r0, lr}
   bbc2e:	f7ff ffb7 	bl	bbba0 <__cmpdf2>
   bbc32:	2800      	cmp	r0, #0
   bbc34:	bf48      	it	mi
   bbc36:	f110 0f00 	cmnmi.w	r0, #0
   bbc3a:	bd01      	pop	{r0, pc}

000bbc3c <__aeabi_dcmpeq>:
   bbc3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc40:	f7ff fff4 	bl	bbc2c <__aeabi_cdcmpeq>
   bbc44:	bf0c      	ite	eq
   bbc46:	2001      	moveq	r0, #1
   bbc48:	2000      	movne	r0, #0
   bbc4a:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc4e:	bf00      	nop

000bbc50 <__aeabi_dcmplt>:
   bbc50:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc54:	f7ff ffea 	bl	bbc2c <__aeabi_cdcmpeq>
   bbc58:	bf34      	ite	cc
   bbc5a:	2001      	movcc	r0, #1
   bbc5c:	2000      	movcs	r0, #0
   bbc5e:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc62:	bf00      	nop

000bbc64 <__aeabi_dcmple>:
   bbc64:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc68:	f7ff ffe0 	bl	bbc2c <__aeabi_cdcmpeq>
   bbc6c:	bf94      	ite	ls
   bbc6e:	2001      	movls	r0, #1
   bbc70:	2000      	movhi	r0, #0
   bbc72:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc76:	bf00      	nop

000bbc78 <__aeabi_dcmpge>:
   bbc78:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc7c:	f7ff ffce 	bl	bbc1c <__aeabi_cdrcmple>
   bbc80:	bf94      	ite	ls
   bbc82:	2001      	movls	r0, #1
   bbc84:	2000      	movhi	r0, #0
   bbc86:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc8a:	bf00      	nop

000bbc8c <__aeabi_dcmpgt>:
   bbc8c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbc90:	f7ff ffc4 	bl	bbc1c <__aeabi_cdrcmple>
   bbc94:	bf34      	ite	cc
   bbc96:	2001      	movcc	r0, #1
   bbc98:	2000      	movcs	r0, #0
   bbc9a:	f85d fb08 	ldr.w	pc, [sp], #8
   bbc9e:	bf00      	nop

000bbca0 <__aeabi_dcmpun>:
   bbca0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbca4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbca8:	d102      	bne.n	bbcb0 <__aeabi_dcmpun+0x10>
   bbcaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbcae:	d10a      	bne.n	bbcc6 <__aeabi_dcmpun+0x26>
   bbcb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbcb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbcb8:	d102      	bne.n	bbcc0 <__aeabi_dcmpun+0x20>
   bbcba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbcbe:	d102      	bne.n	bbcc6 <__aeabi_dcmpun+0x26>
   bbcc0:	f04f 0000 	mov.w	r0, #0
   bbcc4:	4770      	bx	lr
   bbcc6:	f04f 0001 	mov.w	r0, #1
   bbcca:	4770      	bx	lr

000bbccc <__aeabi_d2iz>:
   bbccc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbcd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbcd4:	d215      	bcs.n	bbd02 <__aeabi_d2iz+0x36>
   bbcd6:	d511      	bpl.n	bbcfc <__aeabi_d2iz+0x30>
   bbcd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbcdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbce0:	d912      	bls.n	bbd08 <__aeabi_d2iz+0x3c>
   bbce2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbcea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbcee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbcf2:	fa23 f002 	lsr.w	r0, r3, r2
   bbcf6:	bf18      	it	ne
   bbcf8:	4240      	negne	r0, r0
   bbcfa:	4770      	bx	lr
   bbcfc:	f04f 0000 	mov.w	r0, #0
   bbd00:	4770      	bx	lr
   bbd02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbd06:	d105      	bne.n	bbd14 <__aeabi_d2iz+0x48>
   bbd08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bbd0c:	bf08      	it	eq
   bbd0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bbd12:	4770      	bx	lr
   bbd14:	f04f 0000 	mov.w	r0, #0
   bbd18:	4770      	bx	lr
   bbd1a:	bf00      	nop

000bbd1c <__aeabi_d2uiz>:
   bbd1c:	004a      	lsls	r2, r1, #1
   bbd1e:	d211      	bcs.n	bbd44 <__aeabi_d2uiz+0x28>
   bbd20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbd24:	d211      	bcs.n	bbd4a <__aeabi_d2uiz+0x2e>
   bbd26:	d50d      	bpl.n	bbd44 <__aeabi_d2uiz+0x28>
   bbd28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbd2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbd30:	d40e      	bmi.n	bbd50 <__aeabi_d2uiz+0x34>
   bbd32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbd36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbd3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbd3e:	fa23 f002 	lsr.w	r0, r3, r2
   bbd42:	4770      	bx	lr
   bbd44:	f04f 0000 	mov.w	r0, #0
   bbd48:	4770      	bx	lr
   bbd4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbd4e:	d102      	bne.n	bbd56 <__aeabi_d2uiz+0x3a>
   bbd50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbd54:	4770      	bx	lr
   bbd56:	f04f 0000 	mov.w	r0, #0
   bbd5a:	4770      	bx	lr

000bbd5c <asctime_r>:
   bbd5c:	b510      	push	{r4, lr}
   bbd5e:	460c      	mov	r4, r1
   bbd60:	6941      	ldr	r1, [r0, #20]
   bbd62:	6903      	ldr	r3, [r0, #16]
   bbd64:	6982      	ldr	r2, [r0, #24]
   bbd66:	b086      	sub	sp, #24
   bbd68:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bbd6c:	9104      	str	r1, [sp, #16]
   bbd6e:	6801      	ldr	r1, [r0, #0]
   bbd70:	9103      	str	r1, [sp, #12]
   bbd72:	6841      	ldr	r1, [r0, #4]
   bbd74:	9102      	str	r1, [sp, #8]
   bbd76:	6881      	ldr	r1, [r0, #8]
   bbd78:	9101      	str	r1, [sp, #4]
   bbd7a:	68c1      	ldr	r1, [r0, #12]
   bbd7c:	9100      	str	r1, [sp, #0]
   bbd7e:	4907      	ldr	r1, [pc, #28]	; (bbd9c <asctime_r+0x40>)
   bbd80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bbd84:	440b      	add	r3, r1
   bbd86:	4906      	ldr	r1, [pc, #24]	; (bbda0 <asctime_r+0x44>)
   bbd88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bbd8c:	440a      	add	r2, r1
   bbd8e:	4620      	mov	r0, r4
   bbd90:	4904      	ldr	r1, [pc, #16]	; (bbda4 <asctime_r+0x48>)
   bbd92:	f7fc f96d 	bl	b8070 <siprintf>
   bbd96:	4620      	mov	r0, r4
   bbd98:	b006      	add	sp, #24
   bbd9a:	bd10      	pop	{r4, pc}
   bbd9c:	000bd32a 	.word	0x000bd32a
   bbda0:	000bd315 	.word	0x000bd315
   bbda4:	000bd2f5 	.word	0x000bd2f5

000bbda8 <atexit>:
   bbda8:	2300      	movs	r3, #0
   bbdaa:	4601      	mov	r1, r0
   bbdac:	461a      	mov	r2, r3
   bbdae:	4618      	mov	r0, r3
   bbdb0:	f000 b9d8 	b.w	bc164 <__register_exitproc>

000bbdb4 <gmtime>:
   bbdb4:	b538      	push	{r3, r4, r5, lr}
   bbdb6:	4b0b      	ldr	r3, [pc, #44]	; (bbde4 <gmtime+0x30>)
   bbdb8:	681d      	ldr	r5, [r3, #0]
   bbdba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bbdbc:	4604      	mov	r4, r0
   bbdbe:	b953      	cbnz	r3, bbdd6 <gmtime+0x22>
   bbdc0:	2024      	movs	r0, #36	; 0x24
   bbdc2:	f7fc f93d 	bl	b8040 <malloc>
   bbdc6:	4602      	mov	r2, r0
   bbdc8:	63e8      	str	r0, [r5, #60]	; 0x3c
   bbdca:	b920      	cbnz	r0, bbdd6 <gmtime+0x22>
   bbdcc:	4b06      	ldr	r3, [pc, #24]	; (bbde8 <gmtime+0x34>)
   bbdce:	4807      	ldr	r0, [pc, #28]	; (bbdec <gmtime+0x38>)
   bbdd0:	2139      	movs	r1, #57	; 0x39
   bbdd2:	f7fc f97d 	bl	b80d0 <__assert_func>
   bbdd6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bbdd8:	4620      	mov	r0, r4
   bbdda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbdde:	f7fc b997 	b.w	b8110 <gmtime_r>
   bbde2:	bf00      	nop
   bbde4:	2003de88 	.word	0x2003de88
   bbde8:	000bd34e 	.word	0x000bd34e
   bbdec:	000bd365 	.word	0x000bd365

000bbdf0 <isprint>:
   bbdf0:	4b02      	ldr	r3, [pc, #8]	; (bbdfc <isprint+0xc>)
   bbdf2:	4418      	add	r0, r3
   bbdf4:	7840      	ldrb	r0, [r0, #1]
   bbdf6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbdfa:	4770      	bx	lr
   bbdfc:	000bd417 	.word	0x000bd417

000bbe00 <memcpy>:
   bbe00:	440a      	add	r2, r1
   bbe02:	4291      	cmp	r1, r2
   bbe04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbe08:	d100      	bne.n	bbe0c <memcpy+0xc>
   bbe0a:	4770      	bx	lr
   bbe0c:	b510      	push	{r4, lr}
   bbe0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbe12:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbe16:	4291      	cmp	r1, r2
   bbe18:	d1f9      	bne.n	bbe0e <memcpy+0xe>
   bbe1a:	bd10      	pop	{r4, pc}

000bbe1c <memmove>:
   bbe1c:	4288      	cmp	r0, r1
   bbe1e:	b510      	push	{r4, lr}
   bbe20:	eb01 0402 	add.w	r4, r1, r2
   bbe24:	d902      	bls.n	bbe2c <memmove+0x10>
   bbe26:	4284      	cmp	r4, r0
   bbe28:	4623      	mov	r3, r4
   bbe2a:	d807      	bhi.n	bbe3c <memmove+0x20>
   bbe2c:	1e43      	subs	r3, r0, #1
   bbe2e:	42a1      	cmp	r1, r4
   bbe30:	d008      	beq.n	bbe44 <memmove+0x28>
   bbe32:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbe36:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbe3a:	e7f8      	b.n	bbe2e <memmove+0x12>
   bbe3c:	4402      	add	r2, r0
   bbe3e:	4601      	mov	r1, r0
   bbe40:	428a      	cmp	r2, r1
   bbe42:	d100      	bne.n	bbe46 <memmove+0x2a>
   bbe44:	bd10      	pop	{r4, pc}
   bbe46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbe4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbe4e:	e7f7      	b.n	bbe40 <memmove+0x24>

000bbe50 <memset>:
   bbe50:	4402      	add	r2, r0
   bbe52:	4603      	mov	r3, r0
   bbe54:	4293      	cmp	r3, r2
   bbe56:	d100      	bne.n	bbe5a <memset+0xa>
   bbe58:	4770      	bx	lr
   bbe5a:	f803 1b01 	strb.w	r1, [r3], #1
   bbe5e:	e7f9      	b.n	bbe54 <memset+0x4>

000bbe60 <srand>:
   bbe60:	b538      	push	{r3, r4, r5, lr}
   bbe62:	4b10      	ldr	r3, [pc, #64]	; (bbea4 <srand+0x44>)
   bbe64:	681d      	ldr	r5, [r3, #0]
   bbe66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbe68:	4604      	mov	r4, r0
   bbe6a:	b9b3      	cbnz	r3, bbe9a <srand+0x3a>
   bbe6c:	2018      	movs	r0, #24
   bbe6e:	f7fc f8e7 	bl	b8040 <malloc>
   bbe72:	4602      	mov	r2, r0
   bbe74:	63a8      	str	r0, [r5, #56]	; 0x38
   bbe76:	b920      	cbnz	r0, bbe82 <srand+0x22>
   bbe78:	4b0b      	ldr	r3, [pc, #44]	; (bbea8 <srand+0x48>)
   bbe7a:	480c      	ldr	r0, [pc, #48]	; (bbeac <srand+0x4c>)
   bbe7c:	2142      	movs	r1, #66	; 0x42
   bbe7e:	f7fc f927 	bl	b80d0 <__assert_func>
   bbe82:	490b      	ldr	r1, [pc, #44]	; (bbeb0 <srand+0x50>)
   bbe84:	4b0b      	ldr	r3, [pc, #44]	; (bbeb4 <srand+0x54>)
   bbe86:	e9c0 1300 	strd	r1, r3, [r0]
   bbe8a:	4b0b      	ldr	r3, [pc, #44]	; (bbeb8 <srand+0x58>)
   bbe8c:	6083      	str	r3, [r0, #8]
   bbe8e:	230b      	movs	r3, #11
   bbe90:	8183      	strh	r3, [r0, #12]
   bbe92:	2100      	movs	r1, #0
   bbe94:	2001      	movs	r0, #1
   bbe96:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbe9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbe9c:	2200      	movs	r2, #0
   bbe9e:	611c      	str	r4, [r3, #16]
   bbea0:	615a      	str	r2, [r3, #20]
   bbea2:	bd38      	pop	{r3, r4, r5, pc}
   bbea4:	2003de88 	.word	0x2003de88
   bbea8:	000bd34e 	.word	0x000bd34e
   bbeac:	000bd3be 	.word	0x000bd3be
   bbeb0:	abcd330e 	.word	0xabcd330e
   bbeb4:	e66d1234 	.word	0xe66d1234
   bbeb8:	0005deec 	.word	0x0005deec

000bbebc <rand>:
   bbebc:	4b16      	ldr	r3, [pc, #88]	; (bbf18 <rand+0x5c>)
   bbebe:	b510      	push	{r4, lr}
   bbec0:	681c      	ldr	r4, [r3, #0]
   bbec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bbec4:	b9b3      	cbnz	r3, bbef4 <rand+0x38>
   bbec6:	2018      	movs	r0, #24
   bbec8:	f7fc f8ba 	bl	b8040 <malloc>
   bbecc:	63a0      	str	r0, [r4, #56]	; 0x38
   bbece:	b928      	cbnz	r0, bbedc <rand+0x20>
   bbed0:	4602      	mov	r2, r0
   bbed2:	4b12      	ldr	r3, [pc, #72]	; (bbf1c <rand+0x60>)
   bbed4:	4812      	ldr	r0, [pc, #72]	; (bbf20 <rand+0x64>)
   bbed6:	214e      	movs	r1, #78	; 0x4e
   bbed8:	f7fc f8fa 	bl	b80d0 <__assert_func>
   bbedc:	4a11      	ldr	r2, [pc, #68]	; (bbf24 <rand+0x68>)
   bbede:	4b12      	ldr	r3, [pc, #72]	; (bbf28 <rand+0x6c>)
   bbee0:	e9c0 2300 	strd	r2, r3, [r0]
   bbee4:	4b11      	ldr	r3, [pc, #68]	; (bbf2c <rand+0x70>)
   bbee6:	6083      	str	r3, [r0, #8]
   bbee8:	230b      	movs	r3, #11
   bbeea:	8183      	strh	r3, [r0, #12]
   bbeec:	2201      	movs	r2, #1
   bbeee:	2300      	movs	r3, #0
   bbef0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bbef4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bbef6:	4a0e      	ldr	r2, [pc, #56]	; (bbf30 <rand+0x74>)
   bbef8:	6920      	ldr	r0, [r4, #16]
   bbefa:	6963      	ldr	r3, [r4, #20]
   bbefc:	490d      	ldr	r1, [pc, #52]	; (bbf34 <rand+0x78>)
   bbefe:	4342      	muls	r2, r0
   bbf00:	fb01 2203 	mla	r2, r1, r3, r2
   bbf04:	fba0 0101 	umull	r0, r1, r0, r1
   bbf08:	1c43      	adds	r3, r0, #1
   bbf0a:	eb42 0001 	adc.w	r0, r2, r1
   bbf0e:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bbf12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bbf16:	bd10      	pop	{r4, pc}
   bbf18:	2003de88 	.word	0x2003de88
   bbf1c:	000bd34e 	.word	0x000bd34e
   bbf20:	000bd3be 	.word	0x000bd3be
   bbf24:	abcd330e 	.word	0xabcd330e
   bbf28:	e66d1234 	.word	0xe66d1234
   bbf2c:	0005deec 	.word	0x0005deec
   bbf30:	5851f42d 	.word	0x5851f42d
   bbf34:	4c957f2d 	.word	0x4c957f2d

000bbf38 <strchr>:
   bbf38:	b2c9      	uxtb	r1, r1
   bbf3a:	4603      	mov	r3, r0
   bbf3c:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbf40:	b11a      	cbz	r2, bbf4a <strchr+0x12>
   bbf42:	428a      	cmp	r2, r1
   bbf44:	d1f9      	bne.n	bbf3a <strchr+0x2>
   bbf46:	4618      	mov	r0, r3
   bbf48:	4770      	bx	lr
   bbf4a:	2900      	cmp	r1, #0
   bbf4c:	bf18      	it	ne
   bbf4e:	2300      	movne	r3, #0
   bbf50:	e7f9      	b.n	bbf46 <strchr+0xe>

000bbf52 <strchrnul>:
   bbf52:	b510      	push	{r4, lr}
   bbf54:	4604      	mov	r4, r0
   bbf56:	f7ff ffef 	bl	bbf38 <strchr>
   bbf5a:	b918      	cbnz	r0, bbf64 <strchrnul+0x12>
   bbf5c:	4620      	mov	r0, r4
   bbf5e:	f000 f832 	bl	bbfc6 <strlen>
   bbf62:	4420      	add	r0, r4
   bbf64:	bd10      	pop	{r4, pc}

000bbf66 <strcmp>:
   bbf66:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbf6a:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbf6e:	2a01      	cmp	r2, #1
   bbf70:	bf28      	it	cs
   bbf72:	429a      	cmpcs	r2, r3
   bbf74:	d0f7      	beq.n	bbf66 <strcmp>
   bbf76:	1ad0      	subs	r0, r2, r3
   bbf78:	4770      	bx	lr

000bbf7a <strcpy>:
   bbf7a:	4603      	mov	r3, r0
   bbf7c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbf80:	f803 2b01 	strb.w	r2, [r3], #1
   bbf84:	2a00      	cmp	r2, #0
   bbf86:	d1f9      	bne.n	bbf7c <strcpy+0x2>
   bbf88:	4770      	bx	lr
	...

000bbf8c <strdup>:
   bbf8c:	4b02      	ldr	r3, [pc, #8]	; (bbf98 <strdup+0xc>)
   bbf8e:	4601      	mov	r1, r0
   bbf90:	6818      	ldr	r0, [r3, #0]
   bbf92:	f000 b803 	b.w	bbf9c <_strdup_r>
   bbf96:	bf00      	nop
   bbf98:	2003de88 	.word	0x2003de88

000bbf9c <_strdup_r>:
   bbf9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbf9e:	4604      	mov	r4, r0
   bbfa0:	4608      	mov	r0, r1
   bbfa2:	460d      	mov	r5, r1
   bbfa4:	f000 f80f 	bl	bbfc6 <strlen>
   bbfa8:	1c42      	adds	r2, r0, #1
   bbfaa:	4611      	mov	r1, r2
   bbfac:	4620      	mov	r0, r4
   bbfae:	9201      	str	r2, [sp, #4]
   bbfb0:	f7fc f87e 	bl	b80b0 <_malloc_r>
   bbfb4:	4604      	mov	r4, r0
   bbfb6:	b118      	cbz	r0, bbfc0 <_strdup_r+0x24>
   bbfb8:	9a01      	ldr	r2, [sp, #4]
   bbfba:	4629      	mov	r1, r5
   bbfbc:	f7ff ff20 	bl	bbe00 <memcpy>
   bbfc0:	4620      	mov	r0, r4
   bbfc2:	b003      	add	sp, #12
   bbfc4:	bd30      	pop	{r4, r5, pc}

000bbfc6 <strlen>:
   bbfc6:	4603      	mov	r3, r0
   bbfc8:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbfcc:	2a00      	cmp	r2, #0
   bbfce:	d1fb      	bne.n	bbfc8 <strlen+0x2>
   bbfd0:	1a18      	subs	r0, r3, r0
   bbfd2:	3801      	subs	r0, #1
   bbfd4:	4770      	bx	lr

000bbfd6 <strncmp>:
   bbfd6:	b510      	push	{r4, lr}
   bbfd8:	b17a      	cbz	r2, bbffa <strncmp+0x24>
   bbfda:	4603      	mov	r3, r0
   bbfdc:	3901      	subs	r1, #1
   bbfde:	1884      	adds	r4, r0, r2
   bbfe0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbfe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bbfe8:	4290      	cmp	r0, r2
   bbfea:	d101      	bne.n	bbff0 <strncmp+0x1a>
   bbfec:	42a3      	cmp	r3, r4
   bbfee:	d101      	bne.n	bbff4 <strncmp+0x1e>
   bbff0:	1a80      	subs	r0, r0, r2
   bbff2:	bd10      	pop	{r4, pc}
   bbff4:	2800      	cmp	r0, #0
   bbff6:	d1f3      	bne.n	bbfe0 <strncmp+0xa>
   bbff8:	e7fa      	b.n	bbff0 <strncmp+0x1a>
   bbffa:	4610      	mov	r0, r2
   bbffc:	e7f9      	b.n	bbff2 <strncmp+0x1c>

000bbffe <strncpy>:
   bbffe:	b510      	push	{r4, lr}
   bc000:	3901      	subs	r1, #1
   bc002:	4603      	mov	r3, r0
   bc004:	b132      	cbz	r2, bc014 <strncpy+0x16>
   bc006:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc00a:	f803 4b01 	strb.w	r4, [r3], #1
   bc00e:	3a01      	subs	r2, #1
   bc010:	2c00      	cmp	r4, #0
   bc012:	d1f7      	bne.n	bc004 <strncpy+0x6>
   bc014:	441a      	add	r2, r3
   bc016:	2100      	movs	r1, #0
   bc018:	4293      	cmp	r3, r2
   bc01a:	d100      	bne.n	bc01e <strncpy+0x20>
   bc01c:	bd10      	pop	{r4, pc}
   bc01e:	f803 1b01 	strb.w	r1, [r3], #1
   bc022:	e7f9      	b.n	bc018 <strncpy+0x1a>

000bc024 <strrchr>:
   bc024:	b538      	push	{r3, r4, r5, lr}
   bc026:	4603      	mov	r3, r0
   bc028:	460c      	mov	r4, r1
   bc02a:	b969      	cbnz	r1, bc048 <strrchr+0x24>
   bc02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc030:	f7ff bf82 	b.w	bbf38 <strchr>
   bc034:	1c43      	adds	r3, r0, #1
   bc036:	4605      	mov	r5, r0
   bc038:	4621      	mov	r1, r4
   bc03a:	4618      	mov	r0, r3
   bc03c:	f7ff ff7c 	bl	bbf38 <strchr>
   bc040:	2800      	cmp	r0, #0
   bc042:	d1f7      	bne.n	bc034 <strrchr+0x10>
   bc044:	4628      	mov	r0, r5
   bc046:	bd38      	pop	{r3, r4, r5, pc}
   bc048:	2500      	movs	r5, #0
   bc04a:	e7f5      	b.n	bc038 <strrchr+0x14>

000bc04c <_strtol_l.constprop.0>:
   bc04c:	2b01      	cmp	r3, #1
   bc04e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc052:	d001      	beq.n	bc058 <_strtol_l.constprop.0+0xc>
   bc054:	2b24      	cmp	r3, #36	; 0x24
   bc056:	d906      	bls.n	bc066 <_strtol_l.constprop.0+0x1a>
   bc058:	f7fc f832 	bl	b80c0 <__errno>
   bc05c:	2316      	movs	r3, #22
   bc05e:	6003      	str	r3, [r0, #0]
   bc060:	2000      	movs	r0, #0
   bc062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc066:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc14c <_strtol_l.constprop.0+0x100>
   bc06a:	460d      	mov	r5, r1
   bc06c:	462e      	mov	r6, r5
   bc06e:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc072:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc076:	f017 0708 	ands.w	r7, r7, #8
   bc07a:	d1f7      	bne.n	bc06c <_strtol_l.constprop.0+0x20>
   bc07c:	2c2d      	cmp	r4, #45	; 0x2d
   bc07e:	d132      	bne.n	bc0e6 <_strtol_l.constprop.0+0x9a>
   bc080:	782c      	ldrb	r4, [r5, #0]
   bc082:	2701      	movs	r7, #1
   bc084:	1cb5      	adds	r5, r6, #2
   bc086:	2b00      	cmp	r3, #0
   bc088:	d05b      	beq.n	bc142 <_strtol_l.constprop.0+0xf6>
   bc08a:	2b10      	cmp	r3, #16
   bc08c:	d109      	bne.n	bc0a2 <_strtol_l.constprop.0+0x56>
   bc08e:	2c30      	cmp	r4, #48	; 0x30
   bc090:	d107      	bne.n	bc0a2 <_strtol_l.constprop.0+0x56>
   bc092:	782c      	ldrb	r4, [r5, #0]
   bc094:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc098:	2c58      	cmp	r4, #88	; 0x58
   bc09a:	d14d      	bne.n	bc138 <_strtol_l.constprop.0+0xec>
   bc09c:	786c      	ldrb	r4, [r5, #1]
   bc09e:	2310      	movs	r3, #16
   bc0a0:	3502      	adds	r5, #2
   bc0a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc0a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc0aa:	f04f 0c00 	mov.w	ip, #0
   bc0ae:	fbb8 f9f3 	udiv	r9, r8, r3
   bc0b2:	4666      	mov	r6, ip
   bc0b4:	fb03 8a19 	mls	sl, r3, r9, r8
   bc0b8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc0bc:	f1be 0f09 	cmp.w	lr, #9
   bc0c0:	d816      	bhi.n	bc0f0 <_strtol_l.constprop.0+0xa4>
   bc0c2:	4674      	mov	r4, lr
   bc0c4:	42a3      	cmp	r3, r4
   bc0c6:	dd24      	ble.n	bc112 <_strtol_l.constprop.0+0xc6>
   bc0c8:	f1bc 0f00 	cmp.w	ip, #0
   bc0cc:	db1e      	blt.n	bc10c <_strtol_l.constprop.0+0xc0>
   bc0ce:	45b1      	cmp	r9, r6
   bc0d0:	d31c      	bcc.n	bc10c <_strtol_l.constprop.0+0xc0>
   bc0d2:	d101      	bne.n	bc0d8 <_strtol_l.constprop.0+0x8c>
   bc0d4:	45a2      	cmp	sl, r4
   bc0d6:	db19      	blt.n	bc10c <_strtol_l.constprop.0+0xc0>
   bc0d8:	fb06 4603 	mla	r6, r6, r3, r4
   bc0dc:	f04f 0c01 	mov.w	ip, #1
   bc0e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc0e4:	e7e8      	b.n	bc0b8 <_strtol_l.constprop.0+0x6c>
   bc0e6:	2c2b      	cmp	r4, #43	; 0x2b
   bc0e8:	bf04      	itt	eq
   bc0ea:	782c      	ldrbeq	r4, [r5, #0]
   bc0ec:	1cb5      	addeq	r5, r6, #2
   bc0ee:	e7ca      	b.n	bc086 <_strtol_l.constprop.0+0x3a>
   bc0f0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc0f4:	f1be 0f19 	cmp.w	lr, #25
   bc0f8:	d801      	bhi.n	bc0fe <_strtol_l.constprop.0+0xb2>
   bc0fa:	3c37      	subs	r4, #55	; 0x37
   bc0fc:	e7e2      	b.n	bc0c4 <_strtol_l.constprop.0+0x78>
   bc0fe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc102:	f1be 0f19 	cmp.w	lr, #25
   bc106:	d804      	bhi.n	bc112 <_strtol_l.constprop.0+0xc6>
   bc108:	3c57      	subs	r4, #87	; 0x57
   bc10a:	e7db      	b.n	bc0c4 <_strtol_l.constprop.0+0x78>
   bc10c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc110:	e7e6      	b.n	bc0e0 <_strtol_l.constprop.0+0x94>
   bc112:	f1bc 0f00 	cmp.w	ip, #0
   bc116:	da05      	bge.n	bc124 <_strtol_l.constprop.0+0xd8>
   bc118:	2322      	movs	r3, #34	; 0x22
   bc11a:	6003      	str	r3, [r0, #0]
   bc11c:	4646      	mov	r6, r8
   bc11e:	b942      	cbnz	r2, bc132 <_strtol_l.constprop.0+0xe6>
   bc120:	4630      	mov	r0, r6
   bc122:	e79e      	b.n	bc062 <_strtol_l.constprop.0+0x16>
   bc124:	b107      	cbz	r7, bc128 <_strtol_l.constprop.0+0xdc>
   bc126:	4276      	negs	r6, r6
   bc128:	2a00      	cmp	r2, #0
   bc12a:	d0f9      	beq.n	bc120 <_strtol_l.constprop.0+0xd4>
   bc12c:	f1bc 0f00 	cmp.w	ip, #0
   bc130:	d000      	beq.n	bc134 <_strtol_l.constprop.0+0xe8>
   bc132:	1e69      	subs	r1, r5, #1
   bc134:	6011      	str	r1, [r2, #0]
   bc136:	e7f3      	b.n	bc120 <_strtol_l.constprop.0+0xd4>
   bc138:	2430      	movs	r4, #48	; 0x30
   bc13a:	2b00      	cmp	r3, #0
   bc13c:	d1b1      	bne.n	bc0a2 <_strtol_l.constprop.0+0x56>
   bc13e:	2308      	movs	r3, #8
   bc140:	e7af      	b.n	bc0a2 <_strtol_l.constprop.0+0x56>
   bc142:	2c30      	cmp	r4, #48	; 0x30
   bc144:	d0a5      	beq.n	bc092 <_strtol_l.constprop.0+0x46>
   bc146:	230a      	movs	r3, #10
   bc148:	e7ab      	b.n	bc0a2 <_strtol_l.constprop.0+0x56>
   bc14a:	bf00      	nop
   bc14c:	000bd418 	.word	0x000bd418

000bc150 <strtol>:
   bc150:	4613      	mov	r3, r2
   bc152:	460a      	mov	r2, r1
   bc154:	4601      	mov	r1, r0
   bc156:	4802      	ldr	r0, [pc, #8]	; (bc160 <strtol+0x10>)
   bc158:	6800      	ldr	r0, [r0, #0]
   bc15a:	f7ff bf77 	b.w	bc04c <_strtol_l.constprop.0>
   bc15e:	bf00      	nop
   bc160:	2003de88 	.word	0x2003de88

000bc164 <__register_exitproc>:
   bc164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc168:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc224 <__register_exitproc+0xc0>
   bc16c:	4606      	mov	r6, r0
   bc16e:	f8d8 0000 	ldr.w	r0, [r8]
   bc172:	461f      	mov	r7, r3
   bc174:	460d      	mov	r5, r1
   bc176:	4691      	mov	r9, r2
   bc178:	f000 f856 	bl	bc228 <__retarget_lock_acquire_recursive>
   bc17c:	4b25      	ldr	r3, [pc, #148]	; (bc214 <__register_exitproc+0xb0>)
   bc17e:	681c      	ldr	r4, [r3, #0]
   bc180:	b934      	cbnz	r4, bc190 <__register_exitproc+0x2c>
   bc182:	4c25      	ldr	r4, [pc, #148]	; (bc218 <__register_exitproc+0xb4>)
   bc184:	601c      	str	r4, [r3, #0]
   bc186:	4b25      	ldr	r3, [pc, #148]	; (bc21c <__register_exitproc+0xb8>)
   bc188:	b113      	cbz	r3, bc190 <__register_exitproc+0x2c>
   bc18a:	681b      	ldr	r3, [r3, #0]
   bc18c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc190:	6863      	ldr	r3, [r4, #4]
   bc192:	2b1f      	cmp	r3, #31
   bc194:	dd07      	ble.n	bc1a6 <__register_exitproc+0x42>
   bc196:	f8d8 0000 	ldr.w	r0, [r8]
   bc19a:	f000 f847 	bl	bc22c <__retarget_lock_release_recursive>
   bc19e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc1a6:	b34e      	cbz	r6, bc1fc <__register_exitproc+0x98>
   bc1a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc1ac:	b988      	cbnz	r0, bc1d2 <__register_exitproc+0x6e>
   bc1ae:	4b1c      	ldr	r3, [pc, #112]	; (bc220 <__register_exitproc+0xbc>)
   bc1b0:	b923      	cbnz	r3, bc1bc <__register_exitproc+0x58>
   bc1b2:	f8d8 0000 	ldr.w	r0, [r8]
   bc1b6:	f000 f838 	bl	bc22a <__retarget_lock_release>
   bc1ba:	e7f0      	b.n	bc19e <__register_exitproc+0x3a>
   bc1bc:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc1c0:	f7fb ff3e 	bl	b8040 <malloc>
   bc1c4:	2800      	cmp	r0, #0
   bc1c6:	d0f4      	beq.n	bc1b2 <__register_exitproc+0x4e>
   bc1c8:	2300      	movs	r3, #0
   bc1ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc1ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc1d2:	6863      	ldr	r3, [r4, #4]
   bc1d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc1d8:	2201      	movs	r2, #1
   bc1da:	409a      	lsls	r2, r3
   bc1dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc1e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc1e4:	4313      	orrs	r3, r2
   bc1e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc1ea:	2e02      	cmp	r6, #2
   bc1ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc1f0:	bf02      	ittt	eq
   bc1f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc1f6:	4313      	orreq	r3, r2
   bc1f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc1fc:	6863      	ldr	r3, [r4, #4]
   bc1fe:	f8d8 0000 	ldr.w	r0, [r8]
   bc202:	1c5a      	adds	r2, r3, #1
   bc204:	3302      	adds	r3, #2
   bc206:	6062      	str	r2, [r4, #4]
   bc208:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc20c:	f000 f80e 	bl	bc22c <__retarget_lock_release_recursive>
   bc210:	2000      	movs	r0, #0
   bc212:	e7c6      	b.n	bc1a2 <__register_exitproc+0x3e>
   bc214:	2003e7e8 	.word	0x2003e7e8
   bc218:	2003e75c 	.word	0x2003e75c
   bc21c:	00000000 	.word	0x00000000
   bc220:	000b8041 	.word	0x000b8041
   bc224:	2003deec 	.word	0x2003deec

000bc228 <__retarget_lock_acquire_recursive>:
   bc228:	4770      	bx	lr

000bc22a <__retarget_lock_release>:
   bc22a:	4770      	bx	lr

000bc22c <__retarget_lock_release_recursive>:
   bc22c:	4770      	bx	lr

000bc22e <link_code_end>:
	...

000bc230 <dynalib_user>:
   bc230:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc240:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bc250:	7620 7269 7574 6c61 6900 766e 6c61 6469      virtual.invalid
   bc260:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   bc270:	2065 7273 2063 2626 7320 6372 3e2d 6163     e src && src->ca
   bc280:	6c6c 6162 6b63 5300 6174 7472 7075 6320     llback.Startup c
   bc290:	6d6f 6c70 7465 2065 6977 6874 2520 2073     omplete with %s 
   bc2a0:	6974 656d 6120 646e 7720 7469 2068 6162     time and with ba
   bc2b0:	7474 7265 2079 3425 322e 0066 7453 7261     ttery %4.2f.Star
   bc2c0:	7574 2070 6f63 706d 656c 6574 6620 726f     tup complete for
   bc2d0:	7420 6568 4e20 646f 2065 6977 6874 6120      the Node with a
   bc2e0:	656c 7472 6320 646f 2065 6425 4600 6f72     lert code %d.Fro
   bc2f0:	206d 7325 7420 206f 7325 7720 7469 2068     m %s to %s with 
   bc300:	6e69 6176 696c 2064 6974 656d 4600 6f72     invalid time.Fro
   bc310:	206d 7325 7420 206f 7325 6620 726f 2520     m %s to %s for %
   bc320:	2075 6573 6f63 646e 0073 7246 6d6f 2520     u seconds.From %
   bc330:	2073 6f74 2520 0073 6e4f 4f00 6666 5300     s to %s.On.Off.S
   bc340:	656c 7065 6620 726f 2520 2069 6573 6f63     leep for %i seco
   bc350:	646e 2073 6e75 6974 206c 656e 7478 6520     nds until next e
   bc360:	6576 746e 2520 0073 0030 6f57 656b 7720     vent %s.0.Woke w
   bc370:	7469 2068 7375 7265 6220 7475 6f74 206e     ith user button 
   bc380:	202d 6f6e 6d72 6c61 6f20 6570 6172 6974     - normal operati
   bc390:	6e6f 0073 7741 6b6f 2065 7461 2520 2073     ons.Awoke at %s 
   bc3a0:	6977 6874 2520 696c 6620 6572 2065 656d     with %li free me
   bc3b0:	6f6d 7972 4600 6961 656c 2064 6e69 7320     mory.Failed in s
   bc3c0:	6e65 2064 6e61 2064 6572 6373 6575 6920     end and rescue i
   bc3d0:	2073 7325 5300 6e65 2064 6e61 2064 6341     s %s.Send and Ac
   bc3e0:	206b 7573 6363 6565 6564 2064 6e61 2064     k succeeded and 
   bc3f0:	6572 6373 6575 6920 2073 7325 4600 6961     rescue is %s.Fai
   bc400:	656c 2064 6e69 6120 6b63 6120 646e 7220     led in ack and r
   bc410:	7365 7563 2065 7369 2520 0073 6553 646e     escue is %s.Send
   bc420:	6620 6961 656c 2064 202d 6f67 6e69 2067      failed - going 
   bc430:	6f74 7320 6e65 2064 7665 7265 2079 696d     to send every mi
   bc440:	756e 6574 0000 0000                         nute....

000bc448 <_ZTV8MB85RC64>:
	...
   bc450:	4105 000b 4119 000b 6305 000b 639b 000b     .A...A...c...c..
   bc460:	641d 000b 6e69 7469 6620 6961 656c 0064     .d..init failed.
   bc470:	6553 7474 6e69 2067 6f6e 6564 6e20 6d75     Setting node num
   bc480:	6562 2072 7361 4720 7461 7765 7961 4c00     ber as Gateway.L
   bc490:	526f 2041 6152 6964 206f 6e69 7469 6169     oRA Radio initia
   bc4a0:	696c 657a 2064 7361 4e20 646f 4e65 6d75     lized as NodeNum
   bc4b0:	6562 2072 666f 2520 2069 6e61 2064 6544     ber of %i and De
   bc4c0:	6976 6563 4449 6f20 2066 6925 6120 646e     viceID of %i and
   bc4d0:	6120 6d20 6761 6369 6e20 6d75 6562 2072      a magic number 
   bc4e0:	666f 2520 0069 6553 646e 6e69 2067 6164     of %i.Sending da
   bc4f0:	6174 7220 7065 726f 2074 6f74 4720 7461     ta report to Gat
   bc500:	7765 7961 7300 6e65 6964 676e 6d20 7365     eway.sending mes
   bc510:	6173 6567 6e20 6d75 6562 2072 6425 4e00     sage number %d.N
   bc520:	646f 2065 6425 2d20 4420 7461 2061 6572     ode %d - Data re
   bc530:	6f70 7472 7320 6e65 2064 6f74 6720 7461     port send to gat
   bc540:	7765 7961 2520 2064 7573 6363 7365 6673     eway %d successf
   bc550:	6c75 796c 4e00 646f 2065 6425 2d20 4420     ully.Node %d - D
   bc560:	7461 2061 6572 6f70 7472 7320 6e65 2064     ata report send 
   bc570:	6f74 6720 7461 7765 7961 2520 2064 6166     to gateway %d fa
   bc580:	6c69 6465 4e00 646f 2065 6425 2d20 5220     iled.Node %d - R
   bc590:	6365 6965 6976 676e 6120 6b63 6f6e 6c77     eceiving acknowl
   bc5a0:	6465 6d67 6e65 2074 202d 6144 6174 5220     edgment - Data R
   bc5b0:	7065 726f 0074 6954 656d 7320 7465 7420     eport.Time set t
   bc5c0:	206f 7325 6120 646e 6e20 7865 2074 6572     o %s and next re
   bc5d0:	6f70 7472 6920 2073 6e69 2520 2075 6573     port is in %u se
   bc5e0:	6f63 646e 2073 7461 2520 0073 2061 6f4e     conds at %s.a No
   bc5f0:	6564 754e 626d 7265 6920 2073 656e 6465     deNumber is need
   bc600:	6465 7400 6568 6320 6f6c 6b63 6920 2073     ed.the clock is 
   bc610:	6f6e 2074 6573 0074 6553 646e 6e69 2067     not set.Sending 
   bc620:	6f6a 6e69 7220 7165 6575 7473 6220 6365     join request bec
   bc630:	7561 6573 2520 0073 6144 6174 7220 7065     ause %s.Data rep
   bc640:	726f 2074 6573 646e 7420 206f 6167 6574     ort send to gate
   bc650:	6177 2079 7573 6363 7365 6673 6c75 796c     way successfully
   bc660:	4400 7461 2061 6572 6f70 7472 7320 6e65     .Data report sen
   bc670:	2064 6f74 4720 7461 7765 7961 6620 6961     d to Gateway fai
   bc680:	656c 0064 6552 6563 7669 6e69 2067 6361     led.Receiving ac
   bc690:	6e6b 776f 656c 6764 656d 746e 2d20 4a20     knowledgment - J
   bc6a0:	696f 206e 6552 7571 7365 0074 6954 656d     oin Request.Time
   bc6b0:	7320 7465 7420 206f 7325 202c 6f6e 6564      set to %s, node
   bc6c0:	6920 2073 6425 6120 646e 6e20 7865 2074      is %d and next 
   bc6d0:	6572 6f70 7472 6920 2073 6e69 2520 2075     report is in %u 
   bc6e0:	6573 6f63 646e 0073 6f4e 6564 2d20 5320     seconds.Node - S
   bc6f0:	6e65 6964 676e 4120 656c 7472 5220 7065     ending Alert Rep
   bc700:	726f 2074 6f74 4720 7461 7765 7961 5300     ort to Gateway.S
   bc710:	6e65 6964 676e 4120 656c 7472 5220 7065     ending Alert Rep
   bc720:	726f 2074 756e 626d 7265 2520 2064 6f74     ort number %d to
   bc730:	6720 7461 7765 7961 6120 2074 6425 4e00      gateway at %d.N
   bc740:	646f 2065 202d 6c41 7265 2074 6572 6f70     ode - Alert repo
   bc750:	7472 7320 6e65 2064 6f74 6720 7461 7765     rt send to gatew
   bc760:	7961 7320 6375 6563 7373 7566 6c6c 0079     ay successfully.
   bc770:	6f4e 6564 2d20 4120 656c 7472 5220 7065     Node - Alert Rep
   bc780:	726f 2074 6573 646e 7420 206f 6147 6574     ort send to Gate
   bc790:	6177 2079 6166 6c69 6465 5200 6365 6965     way failed.Recei
   bc7a0:	6976 676e 6120 6b63 6f6e 6c77 6465 6d67     ving acknowledgm
   bc7b0:	6e65 2074 202d 6c41 7265 2074 6552 6f70     ent - Alert Repo
   bc7c0:	7472 5200 6365 6965 6576 2064 7266 6d6f     rt.Received from
   bc7d0:	6e20 646f 2065 6425 7720 7469 2068 7372      node %d with rs
   bc7e0:	6973 253d 2064 202d 2061 7325 6d20 7365     si=%d - a %s mes
   bc7f0:	6173 6567 7720 7461 6465 6620 726f 2520     sage wated for %
   bc800:	756c 6d20 6553 0063 6e49 7469 6c61 7a69     lu mSec.Initaliz
   bc810:	6e69 2067 6874 2065 6970 4d6e 646f 7365     ing the pinModes
   bc820:	4900 696e 6974 6c61 7a69 6e69 2067 6f50     .Initializing Po
   bc830:	6577 2072 6f43 666e 6769 0000               wer Config..

000bc83c <BLUE_LED>:
   bc83c:	0007                                        ..

000bc83e <BUTTON_PIN>:
   bc83e:	0004                                        ..

000bc840 <INT_PIN>:
   bc840:	0012                                        ..

000bc842 <RFM95_CS>:
   bc842:	000e                                        ..

000bc844 <RFM95_INT>:
   bc844:	0002                                        ..

000bc846 <TMP36_SENSE_PIN>:
   bc846:	000f 6579 0073 6f6e 4900 636e 6572 7361     ..yes.no.Increas
   bc856:	6e69 2067 6572 6f70 7472 6e69 2067 7266     ing reporting fr
   bc866:	7165 6575 636e 2079 6f74 3120 2032 696d     equency to 12 mi
   bc876:	756e 6574 0073 7349 4c20 776f 5020 776f     nutes.Is Low Pow
   bc886:	7265 4d20 646f 2065 6573 3f74 2520 0073     er Mode set? %s.
   bc896:	6f4d 6564 0000                              Mode..

000bc89c <_ZTVN5spark10LogHandlerE>:
	...
   bc8ac:	40a5 000b 4e95 000b                         .@...N..

000bc8b4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bc8bc:	4ea1 000b 4ed5 000b 9d81 000b 4e97 000b     .N...N.......N..
   bc8cc:	6f4c 6461 6e69 2067 7953 7473 6d65 4420     Loading System D
   bc8dc:	6665 7561 746c 0073 6f4c 6461 6e69 2067     efaults.Loading 
   bc8ec:	7973 7473 6d65 6420 6665 7561 746c 0073     system defaults.
   bc8fc:	2041 656e 2077 6164 2079 202d 6572 6573     A new day - rese
   bc90c:	7474 6e69 2067 7665 7265 7479 6968 676e     tting everything
   bc91c:	7300 7379 7453 7561 2073 626f 656a 7463     .sysStaus object
   bc92c:	7320 6f74 6572 2064 6e61 2064 6168 6873      stored and hash
   bc93c:	7520 6470 7461 6465 6920 206e 6c25 2075      updated in %lu 
   bc94c:	536d 6365 6300 7275 6572 746e 6f20 6a62     mSec.current obj
   bc95c:	6365 2074 7473 726f 6465 6120 646e 6820     ect stored and h
   bc96c:	7361 2068 7075 6164 6574 2064 6e69 2520     ash updated in %
   bc97c:	756c 6d20 6553 0063 6e49 7469 6169 696c     lu mSec.Initiali
   bc98c:	697a 676e 7420 6568 4f20 6a62 6365 2074     zing the Object 
   bc99c:	7453 726f 0065 5246 4d41 6d20 7369 616d     Store.FRAM misma
   bc9ac:	6374 2c68 6520 6172 6973 676e 6120 646e     tch, erasing and
   bc9bc:	6c20 616f 6964 676e 6420 6665 7561 746c      loading default
   bc9cc:	2073 6669 6920 2074 6863 6365 736b 6f20     s if it checks o
   bc9dc:	7475 4600 4152 204d 6e69 7469 6169 696c     ut.FRAM initiali
   bc9ec:	657a 2c64 6c20 616f 6964 676e 6f20 6a62     zed, loading obj
   bc9fc:	6365 7374 0000 0000                         ects....

000bca04 <_ZL17FRAMversionNumber>:
   bca04:	0001 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   bca14:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   bca24:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   bca34:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   bca44:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   bca54:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   bca64:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   bca74:	4400 6369 6e6f 656e 7463 6465 4100 7373     .Diconnected.Ass
   bca84:	7265 6974 6e6f 6146 6c69 7275 2065 702a     ertionFailure *p
   bca94:	705f 6e69 3c20 2820 3233 2b20 3120 2936     _pin < (32 + 16)
   bcaa4:	2500 2073 3a53 3225 302e 2566 2c25 5120     .%s S:%2.0f%%, Q
   bcab4:	253a 2e32 6630 2525 0020 6925 4320 4900     :%2.0f%% .%i C.I
   bcac4:	746e 7265 616e 206c 6554 706d 7265 7461     nternal Temperat
   bcad4:	7275 2065 7369 2520 0073 6f43 6e75 2c74     ure is %s.Count,
   bcae4:	6820 756f 6c72 3a79 2520 2e69 6420 6961      hourly: %i. dai
   bcaf4:	796c 203a 6925 0000 ca08 000b ca10 000b     ly: %i..........
   bcb04:	ca15 000b ca1a 000b ca1e 000b ca23 000b     ............#...
   bcb14:	ca28 000b ca2c 000b ca37 000b ca42 000b     (...,...7...B...
   bcb24:	6166 6c69 6465 7420 206f 6572 6461 7220     failed to read r
   bcb34:	6765 6441 7264 253d 3230 2078 6f63 6e75     egAddr=%02x coun
   bcb44:	3d74 7525 6600 6961 656c 2064 6f74 7220     t=%u.failed to r
   bcb54:	6165 2064 6572 4167 6464 3d72 3025 7832     ead regAddr=%02x
   bcb64:	7320 6174 3d74 6425 4600 554f 2054 6964      stat=%d.FOUT di
   bcb74:	2064 6f6e 2074 6f67 4820 4749 0048 6f6e     d not go HIGH.no
   bcb84:	2074 6564 6574 7463 6465 6600 6961 656c     t detected.faile
   bcb94:	2064 6f74 7720 6972 6574 7220 6765 6441     d to write regAd
   bcba4:	7264 253d 3230 2078 7473 7461 253d 0064     dr=%02x stat=%d.
   bcbb4:	6573 5774 5444 2520 0064 6177 6374 6468     setWDT %d.watchd
   bcbc4:	676f 6320 656c 7261 6465 6220 6552 7573     og cleared bResu
   bcbd4:	746c 253d 0064 6177 6374 6468 676f 7320     lt=%d.watchdog s
   bcbe4:	7465 6620 756f 5372 6365 3d73 6425 6220     et fourSecs=%d b
   bcbf4:	6552 7573 746c 253d 0064 4157 4354 4448     Result=%d.WATCHD
   bcc04:	474f 4400 4545 5f50 4f50 4557 5f52 4f44     OG.DEEP_POWER_DO
   bcc14:	4e57 4300 554f 544e 4f44 4e57 545f 4d49     WN.COUNTDOWN_TIM
   bcc24:	5245 4100 414c 4d52 6600 6961 756c 6572     ER.ALARM.failure
   bcc34:	6920 206e 7075 6164 6574 6157 656b 6552      in updateWakeRe
   bcc44:	7361 6e6f 2520 0064 6177 656b 7220 6165     ason %d.wake rea
   bcc54:	6f73 206e 203d 7325 2500 3430 2d64 3025     son = %s.%04d-%0
   bcc64:	6432 252d 3230 2064 3025 6432 253a 3230     2d-%02d %02d:%02
   bcc74:	3a64 3025 6432 6700 7465 7452 4163 5473     d:%02d.getRtcAsT
   bcc84:	206d 7325 7300 7465 7452 4163 5473 206d     m %s.setRtcAsTm 
   bcc94:	7325 6600 6961 756c 6572 6920 206e 6573     %s.failure in se
   bcca4:	5274 6374 7246 6d6f 6d54 2520 0064 6573     tRtcFromTm %d.se
   bccb4:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   bccc4:	2520 0073 6573 2074 7973 7473 6d65 6320      %s.set system c
   bccd4:	6f6c 6b63 6620 6f72 206d 5452 2043 7325     lock from RTC %s
   bcce4:	6600 6961 656c 2064 6f74 6420 7465 6365     .failed to detec
   bccf4:	2074 4241 3831 3530 6100 7070 612e 3162     t AB1805.app.ab1
   bcd04:	3038 0035                                   805.

000bcd08 <_ZTV6AB1805>:
	...
   bcd10:	573d 000b 573f 000b 5c33 000b 5cb9 000b     =W..?W..3\...\..
   bcd20:	7277 7469 4465 7461 2061 6166 6c69 6465     writeData failed
   bcd30:	6420 7275 6e69 2067 7265 7361 2065 7266      during erase fr
   bcd40:	6d61 6441 7264 253d 0075 0000               amAddr=%u...

000bcd4c <_ZTV6MB85RC>:
	...
   bcd54:	6255 000b 6257 000b 6305 000b 639b 000b     Ub..Wb...c...c..
   bcd64:	641d 000b                                   .d..

000bcd68 <_ZTV15RHGenericDriver>:
	...
   bcd78:	65d9 000b 40a5 000b 40a5 000b 40a5 000b     .e...@...@...@..
   bcd88:	40a5 000b 663b 000b 65dd 000b 668b 000b     .@..;f...e...f..
   bcd98:	6659 000b 66af 000b 65e7 000b 65ef 000b     Yf...f...e...e..
   bcda8:	65f3 000b 65f7 000b 65fb 000b 65ff 000b     .e...e...e...e..
   bcdb8:	65eb 000b 660b 000b 660f 000b 6613 000b     .e...f...f...f..
   bcdc8:	6617 000b 661b 000b 6621 000b 6625 000b     .f...f..!f..%f..
   bcdd8:	65e7 000b 6629 000b 662f 000b 6635 000b     .e..)f../f..5f..

000bcde8 <_ZTV12RHGenericSPI>:
	...
   bcdf0:	40a5 000b 670d 000b 670f 000b 40a5 000b     .@...g...g...@..
   bce00:	40a5 000b 6717 000b 671b 000b 671f 000b     .@...g...g...g..
   bce10:	6711 000b 6713 000b 6715 000b 6564 6166     .g...g...g..defa
   bce20:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bce30:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bce40:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bce50:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bce60 <_ZTVN8particle11SPISettingsE>:
	...
   bce68:	6765 000b 6739 000b 673b 000b               eg..9g..;g..

000bce74 <_ZTV13RHHardwareSPI>:
	...
   bce7c:	6819 000b 682d 000b 683b 000b 6849 000b     .h..-h..;h..Ih..
   bce8c:	68b5 000b 6717 000b 671b 000b 671f 000b     .h...g...g...g..
   bce9c:	68c3 000b 68d7 000b 68e5 000b               .h...h...h..

000bcea8 <_ZTV6RHMesh>:
	...
   bceb0:	69b1 000b 6cb5 000b 6911 000b 68fd 000b     .i...l...i...h..

000bcec0 <_ZTV8RHRouter>:
	...
   bcec8:	6f21 000b 6f65 000b                         !o..eo..

000bced0 <_ZTV11RHSPIDriver>:
	...
   bcee0:	7201 000b 40a5 000b 40a5 000b 40a5 000b     .r...@...@...@..
   bcef0:	40a5 000b 663b 000b 65dd 000b 668b 000b     .@..;f...e...f..
   bcf00:	6659 000b 66af 000b 65e7 000b 65ef 000b     Yf...f...e...e..
   bcf10:	65f3 000b 65f7 000b 65fb 000b 65ff 000b     .e...e...e...e..
   bcf20:	65eb 000b 660b 000b 660f 000b 6613 000b     .e...f...f...f..
   bcf30:	6617 000b 661b 000b 6621 000b 6625 000b     .f...f..!f..%f..
   bcf40:	65e7 000b 6629 000b 662f 000b 6635 000b     .e..)f../f..5f..
   bcf50:	722d 000b 7237 000b                         -r..7r..

000bcf58 <_ZL18MODEM_CONFIG_TABLE>:
   bcf58:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bcf68 <_ZTV7RH_RF95>:
	...
   bcf70:	739f 000b 73d7 000b 78b1 000b 7747 000b     .s...s...x..Gw..
   bcf80:	740d 000b 778f 000b 739b 000b 663b 000b     .t...w...s..;f..
   bcf90:	65dd 000b 668b 000b 6659 000b 66af 000b     .e...f..Yf...f..
   bcfa0:	73a1 000b 65ef 000b 65f3 000b 65f7 000b     .s...e...e...e..
   bcfb0:	65fb 000b 65ff 000b 65eb 000b 660b 000b     .e...e...e...f..
   bcfc0:	660f 000b 6613 000b 6617 000b 661b 000b     .f...f...f...f..
   bcfd0:	6621 000b 6625 000b 73e7 000b 6629 000b     !f..%f...s..)f..
   bcfe0:	662f 000b 6635 000b 722d 000b 7237 000b     /f..5f..-r..7r..
   bcff0:	7397 000b                                   .s..

000bcff4 <_ZTVN5spark13CellularClassE>:
	...
   bcffc:	823f 000b 8235 000b 822b 000b 81e1 000b     ?...5...+.......
   bd00c:	821f 000b 8213 000b a0d9 000b a0e1 000b     ................
   bd01c:	8207 000b 81ff 000b 81f5 000b 81eb 000b     ................
   bd02c:	a111 000b                                   ....

000bd030 <_ZTV14CellularSignal>:
	...
   bd038:	82cd 000b 8331 000b 82cf 000b 8341 000b     ....1.......A...
   bd048:	8375 000b 83a1 000b 83d5 000b 82f5 000b     u...............
   bd058:	82d3 000b 82ef 000b fffc ffff 0000 0000     ................
   bd068:	8329 000b                                   )...

000bd06c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd074:	8419 000b 841f 000b 845d 000b 842d 000b     ........]...-...
   bd084:	841b 000b                                   ....

000bd088 <_ZTVN5spark13EthernetClassE>:
	...
   bd090:	89a7 000b 899d 000b 8993 000b 8989 000b     ................
   bd0a0:	897d 000b 8971 000b a0d9 000b a0e1 000b     }...q...........
   bd0b0:	8965 000b 895d 000b 8953 000b 8949 000b     e...]...S...I...
   bd0c0:	a111 000b                                   ....

000bd0c4 <_ZTV7TwoWire>:
	...
   bd0cc:	8b73 000b 8bbd 000b 8b95 000b 8b75 000b     s...........u...
   bd0dc:	8b9d 000b 8ba5 000b 8bad 000b 8bb5 000b     ................

000bd0ec <_ZTV9IPAddress>:
	...
   bd0f4:	8d21 000b 8d11 000b 8d13 000b 2575 3430     !...........u%04
   bd104:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bd114:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bd124:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bd134:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bd144:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bd154:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bd164:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000bd174 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bd17c:	91cd 000b 91f3 000b 91b1 000b 8e2f 000b     ............/...

000bd18c <_ZTVN5spark16StreamLogHandlerE>:
	...
   bd194:	9629 000b 9641 000b 9d81 000b 4e97 000b     )...A........N..

000bd1a4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bd1ac:	9655 000b 9669 000b 9f25 000b 91b9 000b     U...i...%.......

000bd1bc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bd1c4:	91cb 000b 9201 000b 9ce5 000b 91bb 000b     ................

000bd1d4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bd1dc:	91c9 000b 920f 000b 9591 000b 9231 000b     ............1...

000bd1ec <_ZTVN5spark12NetworkClassE>:
	...
   bd1f4:	a099 000b a0a3 000b a0ad 000b a0b7 000b     ................
   bd204:	a0c1 000b a0cd 000b a0d9 000b a0e1 000b     ................
   bd214:	a0e9 000b a0f5 000b a0fd 000b a107 000b     ................
   bd224:	a111 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000bd234 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd234:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bd244:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bd254:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bd264:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bd274:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bd284:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bd294 <_ZTV11USARTSerial>:
	...
   bd29c:	ae25 000b ae91 000b ae69 000b a361 000b     %.......i...a...
   bd2ac:	ae39 000b ae55 000b ae47 000b ae63 000b     9...U...G...c...
   bd2bc:	ae27 000b ae2b 000b                         '...+...

000bd2c4 <_ZTV9USBSerial>:
	...
   bd2cc:	aee3 000b af4b 000b af21 000b a361 000b     ....K...!...a...
   bd2dc:	af13 000b aee5 000b aef5 000b af45 000b     ............E...
   bd2ec:	af05 000b aedd 000b                         ........

000bd2f4 <_ZSt7nothrow>:
   bd2f4:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   bd304:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000bd315 <day_name.1>:
   bd315:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bd325:	6972 6153                                    riSat

000bd32a <mon_name.0>:
   bd32a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bd33a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bd34a:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bd35a:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bd36a:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bd37a:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bd38a:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bd39a:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bd3aa:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bd3ba:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bd3ca:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd3da:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd3ea:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd3fa:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd40a:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bd417 <_ctype_>:
   bd417:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd427:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd437:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd447:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd457:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd467:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd477:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd487:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd497:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bd518 <link_const_variable_data_end>:
   bd518:	000b47bd 	.word	0x000b47bd
   bd51c:	000b4d85 	.word	0x000b4d85
   bd520:	000b50b5 	.word	0x000b50b5
   bd524:	000b5239 	.word	0x000b5239
   bd528:	000b5731 	.word	0x000b5731
   bd52c:	000b6245 	.word	0x000b6245
   bd530:	000b68ed 	.word	0x000b68ed
   bd534:	000b81d1 	.word	0x000b81d1
   bd538:	000b829d 	.word	0x000b829d
   bd53c:	000b89b1 	.word	0x000b89b1
   bd540:	000b9d71 	.word	0x000b9d71
   bd544:	000ba1e9 	.word	0x000ba1e9
   bd548:	000ba655 	.word	0x000ba655
   bd54c:	000baae9 	.word	0x000baae9
   bd550:	000bae11 	.word	0x000bae11

000bd554 <link_constructors_end>:
	...
