
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009c00  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bdc20  000bdc20  0000dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bdc44  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  2003de4c  000bdc48  0001de4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007e0  2003e010  2003e010  0002e010  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bde0c  000bde0c  0002de0c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bde38  000bde38  0002de38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0020d1ca  00000000  00000000  0002de3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00026a0f  00000000  00000000  0023b006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00051d2d  00000000  00000000  00261a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004350  00000000  00000000  002b3742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000e428  00000000  00000000  002b7a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00058e0f  00000000  00000000  002c5eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0007ea7d  00000000  00000000  0031ecc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014cc47  00000000  00000000  0039d746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000c1d4  00000000  00000000  004ea390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 fa63 	bl	bc4fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 fa85 	bl	bc54c <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003de4c 	.word	0x2003de4c
   b404c:	000bdc48 	.word	0x000bdc48
   b4050:	2003e010 	.word	0x2003e010
   b4054:	2003e010 	.word	0x2003e010
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 fbab 	bl	bb7bc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bdbdc 	.word	0x000bdbdc
   b4080:	000bdc18 	.word	0x000bdc18

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b88a 	b.w	b419c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9d3 	bl	b4434 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 bb4b 	b.w	bb72c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bbcd 	b.w	b8834 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bbcb 	b.w	b8834 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bbd1 	b.w	b8844 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fa90 	bl	b85d0 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8221 	.word	0x000b8221
   b40b8:	000bc940 	.word	0x000bc940

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z13userSwitchISRv>:
	oldState = state;
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  	userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z13userSwitchISRv+0x8>)
   b40ce:	2201      	movs	r2, #1
   b40d0:	701a      	strb	r2, [r3, #0]
}
   b40d2:	4770      	bx	lr
   b40d4:	2003e05c 	.word	0x2003e05c

000b40d8 <_Z9sensorISRv>:

void sensorISR()
{
   b40d8:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
   b40da:	4c08      	ldr	r4, [pc, #32]	; (b40fc <_Z9sensorISRv+0x24>)
   b40dc:	7823      	ldrb	r3, [r4, #0]
   b40de:	b12b      	cbz	r3, b40ec <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              // sets the sensor flag for the main loop
   b40e0:	4b07      	ldr	r3, [pc, #28]	; (b4100 <_Z9sensorISRv+0x28>)
   b40e2:	2201      	movs	r2, #1
   b40e4:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b40e6:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b40e8:	7023      	strb	r3, [r4, #0]
}
   b40ea:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
   b40ec:	f001 f81a 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b40f0:	f001 f9b5 	bl	b545e <_ZNK13sysStatusData14get_sensorTypeEv>
   b40f4:	2800      	cmp	r0, #0
   b40f6:	d1f3      	bne.n	b40e0 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b40f8:	2301      	movs	r3, #1
   b40fa:	e7f5      	b.n	b40e8 <_Z9sensorISRv+0x10>
   b40fc:	2003e010 	.word	0x2003e010
   b4100:	2003e05a 	.word	0x2003e05a

000b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b4106:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4108:	4605      	mov	r5, r0
   b410a:	460f      	mov	r7, r1
   b410c:	4616      	mov	r6, r2
        if (valid_) {
   b410e:	b18b      	cbz	r3, b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4110:	6803      	ldr	r3, [r0, #0]
   b4112:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4114:	b183      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b4116:	889a      	ldrh	r2, [r3, #4]
   b4118:	2a01      	cmp	r2, #1
   b411a:	d006      	beq.n	b412a <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b411c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b411e:	e7f9      	b.n	b4114 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4120:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4122:	b14b      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b4124:	889a      	ldrh	r2, [r3, #4]
   b4126:	2a01      	cmp	r2, #1
   b4128:	d1fa      	bne.n	b4120 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b412a:	b12b      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b412c:	899a      	ldrh	r2, [r3, #12]
   b412e:	42ba      	cmp	r2, r7
   b4130:	d1f6      	bne.n	b4120 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b4132:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b4134:	4628      	mov	r0, r5
   b4136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4138:	490a      	ldr	r1, [pc, #40]	; (b4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b413a:	2010      	movs	r0, #16
   b413c:	f007 fcd0 	bl	bbae0 <_ZnwjRKSt9nothrow_t>
   b4140:	4604      	mov	r4, r0
   b4142:	b168      	cbz	r0, b4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b4144:	2210      	movs	r2, #16
   b4146:	2100      	movs	r1, #0
   b4148:	f008 fa00 	bl	bc54c <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b414c:	4b06      	ldr	r3, [pc, #24]	; (b4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b414e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4150:	2301      	movs	r3, #1
   b4152:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4154:	692b      	ldr	r3, [r5, #16]
   b4156:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4158:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b415a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b415c:	612c      	str	r4, [r5, #16]
   b415e:	e7e9      	b.n	b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4160:	7528      	strb	r0, [r5, #20]
                return *this;
   b4162:	e7e7      	b.n	b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b4164:	000bd9b8 	.word	0x000bd9b8
   b4168:	00030010 	.word	0x00030010

000b416c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b416c:	b40e      	push	{r1, r2, r3}
   b416e:	b500      	push	{lr}
   b4170:	b08c      	sub	sp, #48	; 0x30
   b4172:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4174:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4178:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b417c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b417e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4182:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4184:	6801      	ldr	r1, [r0, #0]
   b4186:	aa04      	add	r2, sp, #16
   b4188:	201e      	movs	r0, #30
    attr.flags = 0;
   b418a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418e:	f004 fa2f 	bl	b85f0 <log_message_v>
}
   b4192:	b00c      	add	sp, #48	; 0x30
   b4194:	f85d eb04 	ldr.w	lr, [sp], #4
   b4198:	b003      	add	sp, #12
   b419a:	4770      	bx	lr

000b419c <setup>:
void setup() {
   b419c:	b530      	push	{r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b419e:	2000      	movs	r0, #0
   b41a0:	b089      	sub	sp, #36	; 0x24
   b41a2:	f004 f855 	bl	b8250 <hal_timer_millis>
        while (_while() && !_condition()) {
   b41a6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b41aa:	4604      	mov	r4, r0
   b41ac:	2000      	movs	r0, #0
   b41ae:	f004 f84f 	bl	b8250 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b41b2:	1b00      	subs	r0, r0, r4
   b41b4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b41b8:	42a8      	cmp	r0, r5
   b41ba:	f171 0300 	sbcs.w	r3, r1, #0
   b41be:	d207      	bcs.n	b41d0 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b41c0:	f007 fa6c 	bl	bb69c <_Z16_fetch_usbserialv>
   b41c4:	f007 fa5f 	bl	bb686 <_ZN9USBSerial11isConnectedEv>
   b41c8:	b910      	cbnz	r0, b41d0 <setup+0x34>
            spark_process();
   b41ca:	f004 faa3 	bl	b8714 <spark_process>
        while (_while() && !_condition()) {
   b41ce:	e7ed      	b.n	b41ac <setup+0x10>
   b41d0:	f007 fa64 	bl	bb69c <_Z16_fetch_usbserialv>
   b41d4:	f007 fa57 	bl	bb686 <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b41d8:	f001 fa10 	bl	b55fc <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b41dc:	f001 fa3a 	bl	b5654 <_Z18initializePowerCfgv>
	current.setup();
   b41e0:	f000 fff0 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b41e4:	6803      	ldr	r3, [r0, #0]
  	Log.info("Startup complete with %s time and with battery %4.2f", (Time.isValid())? "valid" : "invalid", System.batteryCharge());
   b41e6:	4d4b      	ldr	r5, [pc, #300]	; (b4314 <setup+0x178>)
	current.setup();
   b41e8:	681b      	ldr	r3, [r3, #0]
   b41ea:	4798      	blx	r3
	sysStatus.setup();								// Initialize persistent storage
   b41ec:	f000 ff9a 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b41f0:	6803      	ldr	r3, [r0, #0]
   b41f2:	681b      	ldr	r3, [r3, #0]
   b41f4:	4798      	blx	r3
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b41f6:	4848      	ldr	r0, [pc, #288]	; (b4318 <setup+0x17c>)
   b41f8:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b41fa:	2101      	movs	r1, #1
   b41fc:	8143      	strh	r3, [r0, #10]
   b41fe:	f002 fadb 	bl	b67b8 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b4202:	217c      	movs	r1, #124	; 0x7c
   b4204:	4844      	ldr	r0, [pc, #272]	; (b4318 <setup+0x17c>)
   b4206:	f001 ff43 	bl	b6090 <_ZN6AB18056setWDTEi>
	LoRA_Functions::instance().setup(false);		// Start the LoRA radio - Node
   b420a:	f000 fb89 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b420e:	2100      	movs	r1, #0
   b4210:	f000 fb98 	bl	b4944 <_ZN14LoRA_Functions5setupEb>
  	Log.info("Startup complete with %s time and with battery %4.2f", (Time.isValid())? "valid" : "invalid", System.batteryCharge());
   b4214:	f007 f93e 	bl	bb494 <_ZN9TimeClass7isValidEv>
   b4218:	4b40      	ldr	r3, [pc, #256]	; (b431c <setup+0x180>)
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   b421a:	2200      	movs	r2, #0
   b421c:	2800      	cmp	r0, #0
   b421e:	bf08      	it	eq
   b4220:	461d      	moveq	r5, r3
    const int ret = diag_get_source(id, &src, nullptr);
   b4222:	a904      	add	r1, sp, #16
   b4224:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   b4226:	9204      	str	r2, [sp, #16]
    const int ret = diag_get_source(id, &src, nullptr);
   b4228:	f004 f9fa 	bl	b8620 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b422c:	2800      	cmp	r0, #0
   b422e:	d16e      	bne.n	b430e <setup+0x172>
        return ret;
    }
    return get(src, val);
   b4230:	9c04      	ldr	r4, [sp, #16]
    SPARK_ASSERT(src && src->callback);
   b4232:	b10c      	cbz	r4, b4238 <setup+0x9c>
   b4234:	6923      	ldr	r3, [r4, #16]
   b4236:	b923      	cbnz	r3, b4242 <setup+0xa6>
   b4238:	4a39      	ldr	r2, [pc, #228]	; (b4320 <setup+0x184>)
   b423a:	493a      	ldr	r1, [pc, #232]	; (b4324 <setup+0x188>)
   b423c:	200a      	movs	r0, #10
   b423e:	f004 f9c7 	bl	b85d0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b4242:	230c      	movs	r3, #12
   b4244:	9305      	str	r3, [sp, #20]
   b4246:	446b      	add	r3, sp
   b4248:	9306      	str	r3, [sp, #24]
   b424a:	2304      	movs	r3, #4
   b424c:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b424e:	aa05      	add	r2, sp, #20
   b4250:	6923      	ldr	r3, [r4, #16]
   b4252:	2101      	movs	r1, #1
   b4254:	4620      	mov	r0, r4
   b4256:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b4258:	2800      	cmp	r0, #0
   b425a:	d158      	bne.n	b430e <setup+0x172>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b425c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4260:	ee07 3a90 	vmov	s15, r3
   b4264:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b4268:	ee17 0a90 	vmov	r0, s15
   b426c:	f007 fda4 	bl	bbdb8 <__aeabi_f2d>
   b4270:	462a      	mov	r2, r5
   b4272:	e9cd 0100 	strd	r0, r1, [sp]
   b4276:	492c      	ldr	r1, [pc, #176]	; (b4328 <setup+0x18c>)
   b4278:	482c      	ldr	r0, [pc, #176]	; (b432c <setup+0x190>)
   b427a:	f7ff ff77 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  	if (Time.day() != Time.day(current.get_lastCountTime())) {                 // Check to see if the device was last on in a different day
   b427e:	f007 f937 	bl	bb4f0 <_ZN9TimeClass3dayEv>
   b4282:	4604      	mov	r4, r0
   b4284:	f000 ff9e 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4288:	f001 f934 	bl	b54f4 <_ZNK17currentStatusData17get_lastCountTimeEv>
   b428c:	f006 fffe 	bl	bb28c <_ZN9TimeClass3dayEx>
   b4290:	4284      	cmp	r4, r0
   b4292:	d001      	beq.n	b4298 <setup+0xfc>
    	resetEverything();                                               // Zero the counts for the new day
   b4294:	f001 f966 	bl	b5564 <_Z15resetEverythingv>
	if (sysStatus.get_nodeNumber() < 10) {
   b4298:	f000 ff44 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b429c:	f001 f806 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b42a0:	2809      	cmp	r0, #9
   b42a2:	d809      	bhi.n	b42b8 <setup+0x11c>
		current.set_alertCodeNode(1); // For testing
   b42a4:	f000 ff8e 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b42a8:	2101      	movs	r1, #1
   b42aa:	f001 f8bb 	bl	b5424 <_ZN17currentStatusData17set_alertCodeNodeEh>
		sysStatus.set_nextReportSeconds(10);
   b42ae:	f000 ff39 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b42b2:	210a      	movs	r1, #10
   b42b4:	f001 f83d 	bl	b5332 <_ZN13sysStatusData21set_nextReportSecondsEt>
  	takeMeasurements();                                                  // Populates values so you can read them before the hour
   b42b8:	f001 fd3c 	bl	b5d34 <_Z16takeMeasurementsv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     	// Pressure Sensor interrupt from low to high
   b42bc:	481c      	ldr	r0, [pc, #112]	; (b4330 <setup+0x194>)
   b42be:	491d      	ldr	r1, [pc, #116]	; (b4334 <setup+0x198>)
   b42c0:	8800      	ldrh	r0, [r0, #0]
   b42c2:	2400      	movs	r4, #0
   b42c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b42c8:	2201      	movs	r2, #1
   b42ca:	9400      	str	r4, [sp, #0]
   b42cc:	f005 f872 	bl	b93b4 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b42d0:	4819      	ldr	r0, [pc, #100]	; (b4338 <setup+0x19c>)
   b42d2:	491a      	ldr	r1, [pc, #104]	; (b433c <setup+0x1a0>)
   b42d4:	8800      	ldrh	r0, [r0, #0]
   b42d6:	9400      	str	r4, [sp, #0]
   b42d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b42dc:	4622      	mov	r2, r4
   b42de:	f005 f869 	bl	b93b4 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;               // IDLE unless otherwise from above code
   b42e2:	4b17      	ldr	r3, [pc, #92]	; (b4340 <setup+0x1a4>)
   b42e4:	781a      	ldrb	r2, [r3, #0]
   b42e6:	b90a      	cbnz	r2, b42ec <setup+0x150>
   b42e8:	2204      	movs	r2, #4
   b42ea:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", current.get_alertCodeNode());
   b42ec:	f000 ff6a 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b42f0:	f001 f85d 	bl	b53ae <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b42f4:	4913      	ldr	r1, [pc, #76]	; (b4344 <setup+0x1a8>)
   b42f6:	4602      	mov	r2, r0
   b42f8:	480c      	ldr	r0, [pc, #48]	; (b432c <setup+0x190>)
   b42fa:	f7ff ff37 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                           // Signal the end of startup
   b42fe:	4b12      	ldr	r3, [pc, #72]	; (b4348 <setup+0x1ac>)
   b4300:	8818      	ldrh	r0, [r3, #0]
   b4302:	2100      	movs	r1, #0
}
   b4304:	b009      	add	sp, #36	; 0x24
   b4306:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  	digitalWrite(BLUE_LED,LOW);                                           // Signal the end of startup
   b430a:	f007 baf0 	b.w	bb8ee <digitalWrite>
            return -1.0f;
   b430e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b4312:	e7a9      	b.n	b4268 <setup+0xcc>
   b4314:	000bc957 	.word	0x000bc957
   b4318:	2003e014 	.word	0x2003e014
   b431c:	000bc955 	.word	0x000bc955
   b4320:	000b8221 	.word	0x000b8221
   b4324:	000bc95d 	.word	0x000bc95d
   b4328:	000bc983 	.word	0x000bc983
   b432c:	2003e654 	.word	0x2003e654
   b4330:	000bcfc8 	.word	0x000bcfc8
   b4334:	000b40d9 	.word	0x000b40d9
   b4338:	000bcfc6 	.word	0x000bcfc6
   b433c:	000b40cd 	.word	0x000b40cd
   b4340:	2003e05b 	.word	0x2003e05b
   b4344:	000bc9b8 	.word	0x000bc9b8
   b4348:	000bcfc4 	.word	0x000bcfc4

000b434c <_Z22publishStateTransitionv>:
{
   b434c:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b434e:	4e1d      	ldr	r6, [pc, #116]	; (b43c4 <_Z22publishStateTransitionv+0x78>)
   b4350:	4c1d      	ldr	r4, [pc, #116]	; (b43c8 <_Z22publishStateTransitionv+0x7c>)
   b4352:	7832      	ldrb	r2, [r6, #0]
   b4354:	4d1d      	ldr	r5, [pc, #116]	; (b43cc <_Z22publishStateTransitionv+0x80>)
   b4356:	2a02      	cmp	r2, #2
{
   b4358:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b435a:	d12a      	bne.n	b43b2 <_Z22publishStateTransitionv+0x66>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b435c:	f007 f89a 	bl	bb494 <_ZN9TimeClass7isValidEv>
   b4360:	7832      	ldrb	r2, [r6, #0]
   b4362:	782b      	ldrb	r3, [r5, #0]
   b4364:	b958      	cbnz	r0, b437e <_Z22publishStateTransitionv+0x32>
   b4366:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b436a:	9200      	str	r2, [sp, #0]
   b436c:	4a18      	ldr	r2, [pc, #96]	; (b43d0 <_Z22publishStateTransitionv+0x84>)
   b436e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4372:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4376:	a804      	add	r0, sp, #16
   b4378:	f004 fa7c 	bl	b8874 <snprintf>
   b437c:	e011      	b.n	b43a2 <_Z22publishStateTransitionv+0x56>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],sysStatus.get_nextReportSeconds());
   b437e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4382:	9303      	str	r3, [sp, #12]
   b4384:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b4388:	f000 fecc 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b438c:	f000 ff93 	bl	b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4390:	9b03      	ldr	r3, [sp, #12]
   b4392:	4a10      	ldr	r2, [pc, #64]	; (b43d4 <_Z22publishStateTransitionv+0x88>)
   b4394:	e9cd 4000 	strd	r4, r0, [sp]
   b4398:	f44f 7180 	mov.w	r1, #256	; 0x100
   b439c:	a804      	add	r0, sp, #16
   b439e:	f004 fa69 	bl	b8874 <snprintf>
	oldState = state;
   b43a2:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b43a4:	480c      	ldr	r0, [pc, #48]	; (b43d8 <_Z22publishStateTransitionv+0x8c>)
	oldState = state;
   b43a6:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b43a8:	a904      	add	r1, sp, #16
   b43aa:	f7ff fedf 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b43ae:	b044      	add	sp, #272	; 0x110
   b43b0:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b43b2:	782b      	ldrb	r3, [r5, #0]
   b43b4:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b43b8:	9200      	str	r2, [sp, #0]
   b43ba:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b43be:	4a07      	ldr	r2, [pc, #28]	; (b43dc <_Z22publishStateTransitionv+0x90>)
   b43c0:	e7d7      	b.n	b4372 <_Z22publishStateTransitionv+0x26>
   b43c2:	bf00      	nop
   b43c4:	2003e05b 	.word	0x2003e05b
   b43c8:	2003de4c 	.word	0x2003de4c
   b43cc:	2003e058 	.word	0x2003e058
   b43d0:	000bc9e9 	.word	0x000bc9e9
   b43d4:	000bca09 	.word	0x000bca09
   b43d8:	2003e654 	.word	0x2003e654
   b43dc:	000bca26 	.word	0x000bca26

000b43e0 <_Z20secondsTillNextEventv>:

int secondsTillNextEvent() {										// This is the node version
   b43e0:	b538      	push	{r3, r4, r5, lr}
	int returnSeconds = 60;

	if (Time.isValid()) {											// We may need to sleep when time is not valid
   b43e2:	f007 f857 	bl	bb494 <_ZN9TimeClass7isValidEv>
   b43e6:	b908      	cbnz	r0, b43ec <_Z20secondsTillNextEventv+0xc>
		if (sysStatus.get_nextReportSeconds() > (Time.now() - sysStatus.get_lastConnection())) {						// If this is false, we missed the last event.
			return (sysStatus.get_nextReportSeconds() - (Time.now() - sysStatus.get_lastConnection()) + 5);  			// sleep till next event - Add 5 seconds so it does not miss the gateway
		}
	}

	return returnSeconds;
   b43e8:	203c      	movs	r0, #60	; 0x3c
}
   b43ea:	bd38      	pop	{r3, r4, r5, pc}
		if (sysStatus.get_nextReportSeconds() > (Time.now() - sysStatus.get_lastConnection())) {						// If this is false, we missed the last event.
   b43ec:	f000 fe9a 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b43f0:	f000 ff61 	bl	b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b43f4:	4605      	mov	r5, r0
   b43f6:	f007 f86a 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b43fa:	4604      	mov	r4, r0
   b43fc:	f000 fe92 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4400:	f001 f873 	bl	b54ea <_ZNK13sysStatusData18get_lastConnectionEv>
   b4404:	17e3      	asrs	r3, r4, #31
   b4406:	1a24      	subs	r4, r4, r0
   b4408:	eb63 0301 	sbc.w	r3, r3, r1
   b440c:	42ac      	cmp	r4, r5
   b440e:	f173 0300 	sbcs.w	r3, r3, #0
   b4412:	dae9      	bge.n	b43e8 <_Z20secondsTillNextEventv+0x8>
			return (sysStatus.get_nextReportSeconds() - (Time.now() - sysStatus.get_lastConnection()) + 5);  			// sleep till next event - Add 5 seconds so it does not miss the gateway
   b4414:	f000 fe86 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4418:	f000 ff4d 	bl	b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b441c:	4604      	mov	r4, r0
   b441e:	f000 fe81 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4422:	f001 f862 	bl	b54ea <_ZNK13sysStatusData18get_lastConnectionEv>
   b4426:	4605      	mov	r5, r0
   b4428:	f007 f851 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b442c:	442c      	add	r4, r5
   b442e:	3405      	adds	r4, #5
   b4430:	1a20      	subs	r0, r4, r0
   b4432:	e7da      	b.n	b43ea <_Z20secondsTillNextEventv+0xa>

000b4434 <loop>:
void loop() {
   b4434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (state) {
   b4438:	4d9b      	ldr	r5, [pc, #620]	; (b46a8 <loop+0x274>)
   b443a:	782b      	ldrb	r3, [r5, #0]
   b443c:	3b01      	subs	r3, #1
void loop() {
   b443e:	b08a      	sub	sp, #40	; 0x28
   b4440:	2b03      	cmp	r3, #3
   b4442:	f200 80e8 	bhi.w	b4616 <loop+0x1e2>
   b4446:	e8df f013 	tbh	[pc, r3, lsl #1]
   b444a:	0191      	.short	0x0191
   b444c:	00270004 	.word	0x00270004
   b4450:	0112      	.short	0x0112
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4452:	4b96      	ldr	r3, [pc, #600]	; (b46ac <loop+0x278>)
   b4454:	781b      	ldrb	r3, [r3, #0]
   b4456:	2b02      	cmp	r3, #2
   b4458:	d001      	beq.n	b445e <loop+0x2a>
   b445a:	f7ff ff77 	bl	b434c <_Z22publishStateTransitionv>
			if ((Time.now() - lastPublish) > sysStatus.get_nextReportSeconds()) {
   b445e:	f007 f836 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b4462:	4b93      	ldr	r3, [pc, #588]	; (b46b0 <loop+0x27c>)
   b4464:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4468:	17c6      	asrs	r6, r0, #31
   b446a:	1b04      	subs	r4, r0, r4
   b446c:	eb66 0603 	sbc.w	r6, r6, r3
   b4470:	f000 fe58 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4474:	f000 ff1f 	bl	b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4478:	2300      	movs	r3, #0
   b447a:	42a0      	cmp	r0, r4
   b447c:	41b3      	sbcs	r3, r6
   b447e:	da09      	bge.n	b4494 <loop+0x60>
				if (current.get_alertCodeNode()) state = ERROR_STATE;
   b4480:	f000 fea0 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4484:	f000 ff93 	bl	b53ae <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4488:	b110      	cbz	r0, b4490 <loop+0x5c>
   b448a:	2301      	movs	r3, #1
			state = IDLE_STATE;
   b448c:	702b      	strb	r3, [r5, #0]
   b448e:	e0c2      	b.n	b4616 <loop+0x1e2>
				else state = LoRA_STATE;		   								// If time is valid - wake on the right minute of the hour
   b4490:	2304      	movs	r3, #4
   b4492:	e7fb      	b.n	b448c <loop+0x58>
			else state = SLEEPING_STATE;										// If we have time, let's take a nap
   b4494:	2303      	movs	r3, #3
   b4496:	e7f9      	b.n	b448c <loop+0x58>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4498:	4b84      	ldr	r3, [pc, #528]	; (b46ac <loop+0x278>)
   b449a:	781b      	ldrb	r3, [r3, #0]
   b449c:	2b03      	cmp	r3, #3
   b449e:	d001      	beq.n	b44a4 <loop+0x70>
   b44a0:	f7ff ff54 	bl	b434c <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b44a4:	2100      	movs	r1, #0
   b44a6:	4883      	ldr	r0, [pc, #524]	; (b46b4 <loop+0x280>)
   b44a8:	f001 fdf2 	bl	b6090 <_ZN6AB18056setWDTEi>
			wakeInSeconds = secondsTillNextEvent();								// Figure out how long to sleep 
   b44ac:	f7ff ff98 	bl	b43e0 <_Z20secondsTillNextEventv>
   b44b0:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b44b2:	f006 ffef 	bl	bb494 <_ZN9TimeClass7isValidEv>
   b44b6:	4604      	mov	r4, r0
   b44b8:	2800      	cmp	r0, #0
   b44ba:	d038      	beq.n	b452e <loop+0xfa>
   b44bc:	f007 f807 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b44c0:	19c2      	adds	r2, r0, r7
   b44c2:	17d3      	asrs	r3, r2, #31
   b44c4:	a806      	add	r0, sp, #24
   b44c6:	f006 fefd 	bl	bb2c4 <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b44ca:	9b06      	ldr	r3, [sp, #24]
   b44cc:	497a      	ldr	r1, [pc, #488]	; (b46b8 <loop+0x284>)
   b44ce:	487b      	ldr	r0, [pc, #492]	; (b46bc <loop+0x288>)
   b44d0:	463a      	mov	r2, r7
   b44d2:	f7ff fe4b 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b44d6:	b114      	cbz	r4, b44de <loop+0xaa>
   b44d8:	a806      	add	r0, sp, #24
   b44da:	f006 fd03 	bl	baee4 <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b44de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b44e2:	f004 fa1f 	bl	b8924 <delay>
        if (valid_) {
   b44e6:	4b76      	ldr	r3, [pc, #472]	; (b46c0 <loop+0x28c>)
   b44e8:	7d1a      	ldrb	r2, [r3, #20]
   b44ea:	b10a      	cbz	r2, b44f0 <loop+0xbc>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b44ec:	2202      	movs	r2, #2
   b44ee:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b44f0:	4b74      	ldr	r3, [pc, #464]	; (b46c4 <loop+0x290>)
   b44f2:	4873      	ldr	r0, [pc, #460]	; (b46c0 <loop+0x28c>)
   b44f4:	f8b3 9000 	ldrh.w	r9, [r3]
   b44f8:	2200      	movs	r2, #0
   b44fa:	4649      	mov	r1, r9
   b44fc:	f7ff fe02 	bl	b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b4500:	4b71      	ldr	r3, [pc, #452]	; (b46c8 <loop+0x294>)
   b4502:	f8b3 a000 	ldrh.w	sl, [r3]
   b4506:	2201      	movs	r2, #1
   b4508:	4651      	mov	r1, sl
   b450a:	f7ff fdfb 	bl	b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b450e:	7d03      	ldrb	r3, [r0, #20]
   b4510:	4606      	mov	r6, r0
   b4512:	b313      	cbz	r3, b455a <loop+0x126>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4514:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b4516:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b451a:	68db      	ldr	r3, [r3, #12]
   b451c:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4520:	b13b      	cbz	r3, b4532 <loop+0xfe>
            if (start->type == type) {
   b4522:	889a      	ldrh	r2, [r3, #4]
   b4524:	2a04      	cmp	r2, #4
   b4526:	f000 81ac 	beq.w	b4882 <loop+0x44e>
            start = start->next;
   b452a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b452c:	e7f8      	b.n	b4520 <loop+0xec>
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b452e:	4b67      	ldr	r3, [pc, #412]	; (b46cc <loop+0x298>)
   b4530:	e7cc      	b.n	b44cc <loop+0x98>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4532:	4967      	ldr	r1, [pc, #412]	; (b46d0 <loop+0x29c>)
   b4534:	2010      	movs	r0, #16
   b4536:	f007 fad3 	bl	bbae0 <_ZnwjRKSt9nothrow_t>
   b453a:	4604      	mov	r4, r0
   b453c:	2800      	cmp	r0, #0
   b453e:	f000 819e 	beq.w	b487e <loop+0x44a>
   b4542:	2210      	movs	r2, #16
   b4544:	2100      	movs	r1, #0
   b4546:	f008 f801 	bl	bc54c <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b454a:	4b62      	ldr	r3, [pc, #392]	; (b46d4 <loop+0x2a0>)
   b454c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b454e:	2304      	movs	r3, #4
   b4550:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4552:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b4554:	e9c4 3802 	strd	r3, r8, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4558:	6134      	str	r4, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b455a:	4959      	ldr	r1, [pc, #356]	; (b46c0 <loop+0x28c>)
   b455c:	a803      	add	r0, sp, #12
   b455e:	f006 fdcd 	bl	bb0fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4562:	4854      	ldr	r0, [pc, #336]	; (b46b4 <loop+0x280>)
   b4564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4568:	f001 fd92 	bl	b6090 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b456c:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b456e:	b36b      	cbz	r3, b45cc <loop+0x198>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4570:	889a      	ldrh	r2, [r3, #4]
   b4572:	2a01      	cmp	r2, #1
   b4574:	d12a      	bne.n	b45cc <loop+0x198>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b4576:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b4578:	4599      	cmp	r9, r3
   b457a:	d12a      	bne.n	b45d2 <loop+0x19e>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   b457c:	4956      	ldr	r1, [pc, #344]	; (b46d8 <loop+0x2a4>)
   b457e:	a806      	add	r0, sp, #24
   b4580:	f006 fcfb 	bl	baf7a <_ZN6StringC1EPK19__FlashStringHelper>
   b4584:	a806      	add	r0, sp, #24
   b4586:	f001 f8f3 	bl	b5770 <_Z15setLowPowerMode6String>
   b458a:	a806      	add	r0, sp, #24
   b458c:	f006 fcaa 	bl	baee4 <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   b4590:	4952      	ldr	r1, [pc, #328]	; (b46dc <loop+0x2a8>)
   b4592:	484a      	ldr	r0, [pc, #296]	; (b46bc <loop+0x288>)
   b4594:	f7ff fdea 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			state = IDLE_STATE;
   b4598:	2302      	movs	r3, #2
        return hal_timer_millis(nullptr);
   b459a:	2000      	movs	r0, #0
   b459c:	702b      	strb	r3, [r5, #0]
   b459e:	f003 fe57 	bl	b8250 <hal_timer_millis>
        while (_while() && !_condition()) {
   b45a2:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b45a6:	4604      	mov	r4, r0
   b45a8:	2000      	movs	r0, #0
   b45aa:	f003 fe51 	bl	b8250 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b45ae:	1b00      	subs	r0, r0, r4
   b45b0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b45b4:	42b0      	cmp	r0, r6
   b45b6:	f171 0300 	sbcs.w	r3, r1, #0
   b45ba:	d210      	bcs.n	b45de <loop+0x1aa>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b45bc:	f007 f86e 	bl	bb69c <_Z16_fetch_usbserialv>
   b45c0:	f007 f861 	bl	bb686 <_ZN9USBSerial11isConnectedEv>
   b45c4:	b958      	cbnz	r0, b45de <loop+0x1aa>
            spark_process();
   b45c6:	f004 f8a5 	bl	b8714 <spark_process>
        while (_while() && !_condition()) {
   b45ca:	e7ed      	b.n	b45a8 <loop+0x174>
            return std::numeric_limits<pin_t>::max();
   b45cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b45d0:	e7d2      	b.n	b4578 <loop+0x144>
			else if (result.wakeupPin() == INT_PIN) sensorDetect = true;
   b45d2:	459a      	cmp	sl, r3
   b45d4:	bf02      	ittt	eq
   b45d6:	4b42      	ldreq	r3, [pc, #264]	; (b46e0 <loop+0x2ac>)
   b45d8:	2201      	moveq	r2, #1
   b45da:	701a      	strbeq	r2, [r3, #0]
   b45dc:	e7dc      	b.n	b4598 <loop+0x164>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b45de:	f007 f85d 	bl	bb69c <_Z16_fetch_usbserialv>
   b45e2:	f007 f850 	bl	bb686 <_ZN9USBSerial11isConnectedEv>
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b45e6:	f006 ff72 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b45ea:	19c2      	adds	r2, r0, r7
   b45ec:	17d3      	asrs	r3, r2, #31
   b45ee:	a806      	add	r0, sp, #24
   b45f0:	f006 fe68 	bl	bb2c4 <_ZN9TimeClass7timeStrEx>
   b45f4:	9a06      	ldr	r2, [sp, #24]
   b45f6:	9201      	str	r2, [sp, #4]
   b45f8:	f006 fde0 	bl	bb1bc <_ZN11SystemClass10freeMemoryEv>
   b45fc:	9a01      	ldr	r2, [sp, #4]
   b45fe:	4939      	ldr	r1, [pc, #228]	; (b46e4 <loop+0x2b0>)
   b4600:	4603      	mov	r3, r0
   b4602:	482e      	ldr	r0, [pc, #184]	; (b46bc <loop+0x288>)
   b4604:	f7ff fdb2 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4608:	a806      	add	r0, sp, #24
   b460a:	f006 fc6b 	bl	baee4 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b460e:	9803      	ldr	r0, [sp, #12]
   b4610:	b108      	cbz	r0, b4616 <loop+0x1e2>
            free(wakeupSource_);
   b4612:	f004 f917 	bl	b8844 <free>
	ab1805.loop();                                  							// Keeps the RTC synchronized with the Boron's clock
   b4616:	4827      	ldr	r0, [pc, #156]	; (b46b4 <loop+0x280>)
   b4618:	f001 ffe8 	bl	b65ec <_ZN6AB18054loopEv>
	current.loop();
   b461c:	f000 fdd2 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4620:	f000 fde0 	bl	b51e4 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4624:	f000 fd7e 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4628:	f000 fda4 	bl	b5174 <_ZN13sysStatusData4loopEv>
	if (rescueMode) {
   b462c:	4b2e      	ldr	r3, [pc, #184]	; (b46e8 <loop+0x2b4>)
   b462e:	781a      	ldrb	r2, [r3, #0]
   b4630:	b18a      	cbz	r2, b4656 <loop+0x222>
		rescueMode = false;
   b4632:	2400      	movs	r4, #0
   b4634:	701c      	strb	r4, [r3, #0]
		sysStatus.set_nextReportSeconds(60);										// Rescue mode publish evert minute until we can connect
   b4636:	f000 fd75 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b463a:	213c      	movs	r1, #60	; 0x3c
   b463c:	f000 fe79 	bl	b5332 <_ZN13sysStatusData21set_nextReportSecondsEt>
		sysStatus.set_lowPowerMode(false);
   b4640:	f000 fd70 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4644:	4621      	mov	r1, r4
   b4646:	f000 ff2d 	bl	b54a4 <_ZN13sysStatusData16set_lowPowerModeEb>
		Log.info("Send failed - going to send every minute");
   b464a:	4928      	ldr	r1, [pc, #160]	; (b46ec <loop+0x2b8>)
   b464c:	481b      	ldr	r0, [pc, #108]	; (b46bc <loop+0x288>)
   b464e:	f7ff fd8d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		state = IDLE_STATE;
   b4652:	2302      	movs	r3, #2
   b4654:	702b      	strb	r3, [r5, #0]
	if (sensorDetect) {															// Count the pulse and reset for next
   b4656:	4b22      	ldr	r3, [pc, #136]	; (b46e0 <loop+0x2ac>)
   b4658:	781a      	ldrb	r2, [r3, #0]
   b465a:	2a00      	cmp	r2, #0
   b465c:	f000 8114 	beq.w	b4888 <loop+0x454>
		sensorDetect = false;
   b4660:	2200      	movs	r2, #0
   b4662:	701a      	strb	r2, [r3, #0]
}
   b4664:	b00a      	add	sp, #40	; 0x28
   b4666:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		recordCount();
   b466a:	f001 ba51 	b.w	b5b10 <_Z11recordCountv>
			if (state != oldState) {
   b466e:	4b0f      	ldr	r3, [pc, #60]	; (b46ac <loop+0x278>)
   b4670:	4c1d      	ldr	r4, [pc, #116]	; (b46e8 <loop+0x2b4>)
   b4672:	781b      	ldrb	r3, [r3, #0]
   b4674:	2b04      	cmp	r3, #4
   b4676:	d03f      	beq.n	b46f8 <loop+0x2c4>
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4678:	f7ff fe68 	bl	b434c <_Z22publishStateTransitionv>
				takeMeasurements();
   b467c:	f001 fb5a 	bl	b5d34 <_Z16takeMeasurementsv>
				lastPublish = Time.now();
   b4680:	f006 ff25 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b4684:	4b0a      	ldr	r3, [pc, #40]	; (b46b0 <loop+0x27c>)
   b4686:	17c2      	asrs	r2, r0, #31
   b4688:	e9c3 0200 	strd	r0, r2, [r3]
				if (!LoRA_Functions::instance().composeDataReportNode()) {
   b468c:	f000 f948 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b4690:	f000 f9ce 	bl	b4a30 <_ZN14LoRA_Functions21composeDataReportNodeEv>
   b4694:	bb80      	cbnz	r0, b46f8 <loop+0x2c4>
					rescueMode = true;											// Initiate sending report
   b4696:	2301      	movs	r3, #1
					Log.info("Failed in send and rescue is %s", (rescueMode) ? "On" : "Off");
   b4698:	4a15      	ldr	r2, [pc, #84]	; (b46f0 <loop+0x2bc>)
   b469a:	4916      	ldr	r1, [pc, #88]	; (b46f4 <loop+0x2c0>)
   b469c:	4807      	ldr	r0, [pc, #28]	; (b46bc <loop+0x288>)
					rescueMode = true;											// Initiate sending report
   b469e:	7023      	strb	r3, [r4, #0]
					Log.info("Failed in send and rescue is %s", (rescueMode) ? "On" : "Off");
   b46a0:	f7ff fd64 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
					break;
   b46a4:	e7b7      	b.n	b4616 <loop+0x1e2>
   b46a6:	bf00      	nop
   b46a8:	2003e05b 	.word	0x2003e05b
   b46ac:	2003e058 	.word	0x2003e058
   b46b0:	2003e050 	.word	0x2003e050
   b46b4:	2003e014 	.word	0x2003e014
   b46b8:	000bca3b 	.word	0x000bca3b
   b46bc:	2003e654 	.word	0x2003e654
   b46c0:	2003e034 	.word	0x2003e034
   b46c4:	000bcfc6 	.word	0x000bcfc6
   b46c8:	000bcfc8 	.word	0x000bcfc8
   b46cc:	000bd124 	.word	0x000bd124
   b46d0:	000bd9b8 	.word	0x000bd9b8
   b46d4:	00030010 	.word	0x00030010
   b46d8:	000bca64 	.word	0x000bca64
   b46dc:	000bca66 	.word	0x000bca66
   b46e0:	2003e05a 	.word	0x2003e05a
   b46e4:	000bca90 	.word	0x000bca90
   b46e8:	2003e059 	.word	0x2003e059
   b46ec:	000bcb18 	.word	0x000bcb18
   b46f0:	000bca34 	.word	0x000bca34
   b46f4:	000bcab1 	.word	0x000bcab1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b46f8:	f003 fd9a 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b46fc:	f8df 9194 	ldr.w	r9, [pc, #404]	; b4894 <loop+0x460>
   b4700:	f8df 81a8 	ldr.w	r8, [pc, #424]	; b48ac <loop+0x478>
   b4704:	4f62      	ldr	r7, [pc, #392]	; (b4890 <loop+0x45c>)
   b4706:	4606      	mov	r6, r0
   b4708:	f003 fd92 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
			while (millis() - startListening < 10000) {
   b470c:	f242 730f 	movw	r3, #9999	; 0x270f
   b4710:	1b80      	subs	r0, r0, r6
   b4712:	4298      	cmp	r0, r3
   b4714:	f63f af7f 	bhi.w	b4616 <loop+0x1e2>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {									// Listen for acknowledgement
   b4718:	f000 f902 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b471c:	f000 fbf0 	bl	b4f00 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4720:	b1e0      	cbz	r0, b475c <loop+0x328>
					current.set_hourlyCount(0);										// Zero the hourly count
   b4722:	f000 fd4f 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4726:	2100      	movs	r1, #0
   b4728:	f000 fe0f 	bl	b534a <_ZN17currentStatusData15set_hourlyCountEt>
					rescueMode = false;
   b472c:	2300      	movs	r3, #0
   b472e:	7023      	strb	r3, [r4, #0]
					sysStatus.set_lastConnection(Time.now());
   b4730:	f000 fcf8 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4734:	4606      	mov	r6, r0
   b4736:	f006 feca 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b473a:	4602      	mov	r2, r0
   b473c:	17c3      	asrs	r3, r0, #31
   b473e:	4630      	mov	r0, r6
   b4740:	f000 ff01 	bl	b5546 <_ZN13sysStatusData18set_lastConnectionEx>
					Log.info("Send and Ack succeeded and rescue is %s", (rescueMode) ? "On" : "Off");
   b4744:	7821      	ldrb	r1, [r4, #0]
   b4746:	4a53      	ldr	r2, [pc, #332]	; (b4894 <loop+0x460>)
   b4748:	4b53      	ldr	r3, [pc, #332]	; (b4898 <loop+0x464>)
   b474a:	4851      	ldr	r0, [pc, #324]	; (b4890 <loop+0x45c>)
   b474c:	2900      	cmp	r1, #0
   b474e:	bf08      	it	eq
   b4750:	461a      	moveq	r2, r3
   b4752:	4952      	ldr	r1, [pc, #328]	; (b489c <loop+0x468>)
   b4754:	f7ff fd0a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			state = IDLE_STATE;
   b4758:	2302      	movs	r3, #2
   b475a:	e697      	b.n	b448c <loop+0x58>
					rescueMode = true;
   b475c:	2301      	movs	r3, #1
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b475e:	464a      	mov	r2, r9
   b4760:	4641      	mov	r1, r8
   b4762:	4638      	mov	r0, r7
					rescueMode = true;
   b4764:	7023      	strb	r3, [r4, #0]
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b4766:	f7ff fd01 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			while (millis() - startListening < 10000) {
   b476a:	e7cd      	b.n	b4708 <loop+0x2d4>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b476c:	4b4c      	ldr	r3, [pc, #304]	; (b48a0 <loop+0x46c>)
   b476e:	781b      	ldrb	r3, [r3, #0]
   b4770:	2b01      	cmp	r3, #1
   b4772:	d001      	beq.n	b4778 <loop+0x344>
   b4774:	f7ff fdea 	bl	b434c <_Z22publishStateTransitionv>
			switch (current.get_alertCodeNode())
   b4778:	f000 fd24 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b477c:	f000 fe17 	bl	b53ae <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4780:	2801      	cmp	r0, #1
   b4782:	d03d      	beq.n	b4800 <loop+0x3cc>
   b4784:	2802      	cmp	r0, #2
   b4786:	d1e7      	bne.n	b4758 <loop+0x324>
					if(LoRA_Functions::instance().composeAlertReportNode()) {
   b4788:	f000 f8ca 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b478c:	f000 fafe 	bl	b4d8c <_ZN14LoRA_Functions22composeAlertReportNodeEv>
   b4790:	2800      	cmp	r0, #0
   b4792:	d070      	beq.n	b4876 <loop+0x442>
   b4794:	f003 fd4c 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
								lastPublish = Time.now();
   b4798:	4f42      	ldr	r7, [pc, #264]	; (b48a4 <loop+0x470>)
								rescueMode = false;
   b479a:	f8df 810c 	ldr.w	r8, [pc, #268]	; b48a8 <loop+0x474>
   b479e:	4606      	mov	r6, r0
						while (millis() - startListening < 3000) {
   b47a0:	f640 39b7 	movw	r9, #2999	; 0xbb7
   b47a4:	f003 fd44 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
   b47a8:	1b80      	subs	r0, r0, r6
   b47aa:	4548      	cmp	r0, r9
   b47ac:	d8d4      	bhi.n	b4758 <loop+0x324>
							if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b47ae:	f000 f8b7 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b47b2:	f000 fba5 	bl	b4f00 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b47b6:	2800      	cmp	r0, #0
   b47b8:	d0f4      	beq.n	b47a4 <loop+0x370>
								lastPublish = Time.now();
   b47ba:	f006 fe88 	bl	bb4ce <_ZN9TimeClass3nowEv>
								rescueMode = false;
   b47be:	f04f 0a00 	mov.w	sl, #0
								lastPublish = Time.now();
   b47c2:	17c3      	asrs	r3, r0, #31
   b47c4:	e9c7 0300 	strd	r0, r3, [r7]
								rescueMode = false;
   b47c8:	f888 a000 	strb.w	sl, [r8]
								sysStatus.set_lastConnection(Time.now());
   b47cc:	f000 fcaa 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b47d0:	4604      	mov	r4, r0
   b47d2:	f006 fe7c 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b47d6:	4602      	mov	r2, r0
   b47d8:	17c3      	asrs	r3, r0, #31
   b47da:	4620      	mov	r0, r4
   b47dc:	f000 feb3 	bl	b5546 <_ZN13sysStatusData18set_lastConnectionEx>
								current.set_alertTimestampNode(Time.now());
   b47e0:	f000 fcf0 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b47e4:	4604      	mov	r4, r0
   b47e6:	f006 fe72 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b47ea:	4602      	mov	r2, r0
   b47ec:	17c3      	asrs	r3, r0, #31
   b47ee:	4620      	mov	r0, r4
   b47f0:	f000 feb3 	bl	b555a <_ZN17currentStatusData22set_alertTimestampNodeEx>
								current.set_alertCodeNode(0);
   b47f4:	f000 fce6 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b47f8:	4651      	mov	r1, sl
   b47fa:	f000 fe13 	bl	b5424 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b47fe:	e7d1      	b.n	b47a4 <loop+0x370>
					if(LoRA_Functions::instance().composeJoinRequesttNode()) {
   b4800:	f000 f88e 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b4804:	f000 fa02 	bl	b4c0c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b4808:	b3a8      	cbz	r0, b4876 <loop+0x442>
   b480a:	f003 fd11 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
								lastPublish = Time.now();
   b480e:	4f25      	ldr	r7, [pc, #148]	; (b48a4 <loop+0x470>)
								rescueMode = false;
   b4810:	f8df 8094 	ldr.w	r8, [pc, #148]	; b48a8 <loop+0x474>
   b4814:	4606      	mov	r6, r0
						while (millis() - startListening < 3000) {
   b4816:	f640 39b7 	movw	r9, #2999	; 0xbb7
   b481a:	f003 fd09 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
   b481e:	1b80      	subs	r0, r0, r6
   b4820:	4548      	cmp	r0, r9
   b4822:	d899      	bhi.n	b4758 <loop+0x324>
							if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b4824:	f000 f87c 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b4828:	f000 fb6a 	bl	b4f00 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b482c:	2800      	cmp	r0, #0
   b482e:	d0f4      	beq.n	b481a <loop+0x3e6>
								lastPublish = Time.now();
   b4830:	f006 fe4d 	bl	bb4ce <_ZN9TimeClass3nowEv>
								rescueMode = false;
   b4834:	f04f 0a00 	mov.w	sl, #0
								lastPublish = Time.now();
   b4838:	17c3      	asrs	r3, r0, #31
   b483a:	e9c7 0300 	strd	r0, r3, [r7]
								rescueMode = false;
   b483e:	f888 a000 	strb.w	sl, [r8]
								sysStatus.set_lastConnection(Time.now());
   b4842:	f000 fc6f 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4846:	4604      	mov	r4, r0
   b4848:	f006 fe41 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b484c:	4602      	mov	r2, r0
   b484e:	17c3      	asrs	r3, r0, #31
   b4850:	4620      	mov	r0, r4
   b4852:	f000 fe78 	bl	b5546 <_ZN13sysStatusData18set_lastConnectionEx>
								current.set_alertTimestampNode(Time.now());
   b4856:	f000 fcb5 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b485a:	4604      	mov	r4, r0
   b485c:	f006 fe37 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b4860:	4602      	mov	r2, r0
   b4862:	17c3      	asrs	r3, r0, #31
   b4864:	4620      	mov	r0, r4
   b4866:	f000 fe78 	bl	b555a <_ZN17currentStatusData22set_alertTimestampNodeEx>
								current.set_alertCodeNode(0);
   b486a:	f000 fcab 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b486e:	4651      	mov	r1, sl
   b4870:	f000 fdd8 	bl	b5424 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b4874:	e7d1      	b.n	b481a <loop+0x3e6>
					else rescueMode = true;
   b4876:	4b0c      	ldr	r3, [pc, #48]	; (b48a8 <loop+0x474>)
   b4878:	2201      	movs	r2, #1
   b487a:	701a      	strb	r2, [r3, #0]
   b487c:	e76c      	b.n	b4758 <loop+0x324>
                valid_ = false;
   b487e:	7530      	strb	r0, [r6, #20]
                return *this;
   b4880:	e66b      	b.n	b455a <loop+0x126>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b4882:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4886:	e668      	b.n	b455a <loop+0x126>
}
   b4888:	b00a      	add	sp, #40	; 0x28
   b488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b488e:	bf00      	nop
   b4890:	2003e654 	.word	0x2003e654
   b4894:	000bca34 	.word	0x000bca34
   b4898:	000bca37 	.word	0x000bca37
   b489c:	000bcad1 	.word	0x000bcad1
   b48a0:	2003e058 	.word	0x2003e058
   b48a4:	2003e050 	.word	0x2003e050
   b48a8:	2003e059 	.word	0x2003e059
   b48ac:	000bcaf9 	.word	0x000bcaf9

000b48b0 <_GLOBAL__sub_I___appProductVersion>:
}
   b48b0:	b508      	push	{r3, lr}
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b48b2:	f006 ffb5 	bl	bb820 <spark_protocol_instance>
   b48b6:	2300      	movs	r3, #0
   b48b8:	461a      	mov	r2, r3
   b48ba:	4619      	mov	r1, r3
   b48bc:	f006 ffc0 	bl	bb840 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b48c0:	f006 ffae 	bl	bb820 <spark_protocol_instance>
   b48c4:	2300      	movs	r3, #0
   b48c6:	461a      	mov	r2, r3
   b48c8:	210d      	movs	r1, #13
   b48ca:	f006 ffb1 	bl	bb830 <spark_protocol_set_product_id>
        : config_(config) {
   b48ce:	4b0c      	ldr	r3, [pc, #48]	; (b4900 <_GLOBAL__sub_I___appProductVersion+0x50>)
   b48d0:	1d1a      	adds	r2, r3, #4
   b48d2:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b48d4:	4a0b      	ldr	r2, [pc, #44]	; (b4904 <_GLOBAL__sub_I___appProductVersion+0x54>)
   b48d6:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b48d8:	2200      	movs	r2, #0
   b48da:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b48de:	611a      	str	r2, [r3, #16]
   b48e0:	2201      	movs	r2, #1
   b48e2:	751a      	strb	r2, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b48e4:	f007 f874 	bl	bb9d0 <_Z19__fetch_global_Wirev>
   b48e8:	2269      	movs	r2, #105	; 0x69
   b48ea:	4601      	mov	r1, r0
   b48ec:	4806      	ldr	r0, [pc, #24]	; (b4908 <_GLOBAL__sub_I___appProductVersion+0x58>)
   b48ee:	f001 fadf 	bl	b5eb0 <_ZN6AB1805C1ER7TwoWireh>
time_t lastPublish = Time.now();
   b48f2:	f006 fdec 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b48f6:	4b05      	ldr	r3, [pc, #20]	; (b490c <_GLOBAL__sub_I___appProductVersion+0x5c>)
   b48f8:	17c2      	asrs	r2, r0, #31
   b48fa:	e9c3 0200 	strd	r0, r2, [r3]
}
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	2003e034 	.word	0x2003e034
   b4904:	00030010 	.word	0x00030010
   b4908:	2003e014 	.word	0x2003e014
   b490c:	2003e050 	.word	0x2003e050

000b4910 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4910:	4770      	bx	lr

000b4912 <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b4912:	b510      	push	{r4, lr}
}
   b4914:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b4916:	4604      	mov	r4, r0
}
   b4918:	f7ff fbc1 	bl	b409e <_ZdlPvj>
   b491c:	4620      	mov	r0, r4
   b491e:	bd10      	pop	{r4, pc}

000b4920 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4920:	b510      	push	{r4, lr}
    if (!_instance) {
   b4922:	4c06      	ldr	r4, [pc, #24]	; (b493c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4924:	6823      	ldr	r3, [r4, #0]
   b4926:	b933      	cbnz	r3, b4936 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4928:	2004      	movs	r0, #4
   b492a:	f7ff fbb4 	bl	b4096 <_Znwj>
   b492e:	b108      	cbz	r0, b4934 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4930:	4b03      	ldr	r3, [pc, #12]	; (b4940 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4932:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4934:	6020      	str	r0, [r4, #0]
}
   b4936:	6820      	ldr	r0, [r4, #0]
   b4938:	bd10      	pop	{r4, pc}
   b493a:	bf00      	nop
   b493c:	2003e060 	.word	0x2003e060
   b4940:	000bcef0 	.word	0x000bcef0

000b4944 <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
#define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4944:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4946:	4832      	ldr	r0, [pc, #200]	; (b4a10 <_ZN14LoRA_Functions5setupEb+0xcc>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4948:	460d      	mov	r5, r1
	if (!manager.init()) {
   b494a:	f002 fdea 	bl	b7522 <_ZN8RHRouter4initEv>
   b494e:	4604      	mov	r4, r0
   b4950:	b930      	cbnz	r0, b4960 <_ZN14LoRA_Functions5setupEb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b4952:	4930      	ldr	r1, [pc, #192]	; (b4a14 <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4954:	4830      	ldr	r0, [pc, #192]	; (b4a18 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b4956:	f7ff fc09 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	}
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
	return true;
}
   b495a:	4620      	mov	r0, r4
   b495c:	b004      	add	sp, #16
   b495e:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4960:	ed9f 0a2e 	vldr	s0, [pc, #184]	; b4a1c <_ZN14LoRA_Functions5setupEb+0xd8>
   b4964:	482e      	ldr	r0, [pc, #184]	; (b4a20 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4966:	f003 f8d7 	bl	b7b18 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b496a:	2200      	movs	r2, #0
   b496c:	2117      	movs	r1, #23
   b496e:	482c      	ldr	r0, [pc, #176]	; (b4a20 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4970:	f003 fa4c 	bl	b7e0c <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.get_structuresVersion() == 128)) {    	// This will be our indication that the deviceID and nodeID has not yet been set
   b4974:	f000 fbd6 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4978:	f000 fd05 	bl	b5386 <_ZNK13sysStatusData21get_structuresVersionEv>
   b497c:	2880      	cmp	r0, #128	; 0x80
   b497e:	d020      	beq.n	b49c2 <_ZN14LoRA_Functions5setupEb+0x7e>
		randomSeed(sysStatus.get_lastConnection());			// 32-bit number for seed
   b4980:	f000 fbd0 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4984:	f000 fdb1 	bl	b54ea <_ZNK13sysStatusData18get_lastConnectionEv>
   b4988:	f006 f9dd 	bl	bad46 <_Z10randomSeedj>
		sysStatus.set_deviceID(random(1,65535));			// 16-bit number for deviceID
   b498c:	f000 fbca 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4990:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4994:	4606      	mov	r6, r0
   b4996:	2001      	movs	r0, #1
   b4998:	f006 f9cb 	bl	bad32 <_Z6randomii>
   b499c:	b281      	uxth	r1, r0
   b499e:	4630      	mov	r0, r6
   b49a0:	f000 fcbb 	bl	b531a <_ZN13sysStatusData12set_deviceIDEt>
		if (gatewayID) {
   b49a4:	b355      	cbz	r5, b49fc <_ZN14LoRA_Functions5setupEb+0xb8>
			Log.info("Setting node number as Gateway");
   b49a6:	491f      	ldr	r1, [pc, #124]	; (b4a24 <_ZN14LoRA_Functions5setupEb+0xe0>)
   b49a8:	481b      	ldr	r0, [pc, #108]	; (b4a18 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b49aa:	f7ff fbdf 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			sysStatus.set_nodeNumber(0);
   b49ae:	f000 fbb9 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b49b2:	2100      	movs	r1, #0
		else sysStatus.set_nodeNumber(random(10,255));	// Random number in - unconfigured - range will trigger a Join request
   b49b4:	f000 fcb7 	bl	b5326 <_ZN13sysStatusData14set_nodeNumberEt>
		sysStatus.set_structuresVersion(128);			// Set the structure to the magic number so we can have a stable deviceID
   b49b8:	f000 fbb4 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b49bc:	2180      	movs	r1, #128	; 0x80
   b49be:	f000 fd19 	bl	b53f4 <_ZN13sysStatusData21set_structuresVersionEh>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
   b49c2:	f000 fbaf 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b49c6:	f000 fc71 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b49ca:	b2c1      	uxtb	r1, r0
   b49cc:	4816      	ldr	r0, [pc, #88]	; (b4a28 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b49ce:	f002 f8a6 	bl	b6b1e <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
   b49d2:	4815      	ldr	r0, [pc, #84]	; (b4a28 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b49d4:	f002 f889 	bl	b6aea <_ZN10RHDatagram11thisAddressEv>
   b49d8:	9003      	str	r0, [sp, #12]
   b49da:	f000 fba3 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b49de:	f000 fc60 	bl	b52a2 <_ZNK13sysStatusData12get_deviceIDEv>
   b49e2:	9002      	str	r0, [sp, #8]
   b49e4:	f000 fb9e 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b49e8:	f000 fccd 	bl	b5386 <_ZNK13sysStatusData21get_structuresVersionEv>
   b49ec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b49f0:	9000      	str	r0, [sp, #0]
   b49f2:	490e      	ldr	r1, [pc, #56]	; (b4a2c <_ZN14LoRA_Functions5setupEb+0xe8>)
   b49f4:	4808      	ldr	r0, [pc, #32]	; (b4a18 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b49f6:	f7ff fbb9 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	return true;
   b49fa:	e7ae      	b.n	b495a <_ZN14LoRA_Functions5setupEb+0x16>
		else sysStatus.set_nodeNumber(random(10,255));	// Random number in - unconfigured - range will trigger a Join request
   b49fc:	f000 fb92 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4a00:	21ff      	movs	r1, #255	; 0xff
   b4a02:	4605      	mov	r5, r0
   b4a04:	200a      	movs	r0, #10
   b4a06:	f006 f994 	bl	bad32 <_Z6randomii>
   b4a0a:	b281      	uxth	r1, r0
   b4a0c:	4628      	mov	r0, r5
   b4a0e:	e7d1      	b.n	b49b4 <_ZN14LoRA_Functions5setupEb+0x70>
   b4a10:	2003e1c8 	.word	0x2003e1c8
   b4a14:	000bcb41 	.word	0x000bcb41
   b4a18:	2003e654 	.word	0x2003e654
   b4a1c:	4464c000 	.word	0x4464c000
   b4a20:	2003e098 	.word	0x2003e098
   b4a24:	000bcb4d 	.word	0x000bcb4d
   b4a28:	2003e1cc 	.word	0x2003e1cc
   b4a2c:	000bcb6c 	.word	0x000bcb6c

000b4a30 <_ZN14LoRA_Functions21composeDataReportNodeEv>:
	}
	return false;
}


bool LoRA_Functions::composeDataReportNode() {
   b4a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static uint8_t msgCnt = 0;

	Log.info("Sending data report to Gateway");
   b4a32:	4947      	ldr	r1, [pc, #284]	; (b4b50 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x120>)
   b4a34:	4847      	ldr	r0, [pc, #284]	; (b4b54 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x124>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.get_deviceID());					// Set for device
   b4a36:	4c48      	ldr	r4, [pc, #288]	; (b4b58 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x128>)
	Log.info("Sending data report to Gateway");
   b4a38:	f7ff fb98 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b4a3c:	4b47      	ldr	r3, [pc, #284]	; (b4b5c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x12c>)
   b4a3e:	881e      	ldrh	r6, [r3, #0]
   b4a40:	2101      	movs	r1, #1
   b4a42:	4630      	mov	r0, r6
   b4a44:	f006 ff53 	bl	bb8ee <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());					// Set for device
   b4a48:	f000 fb6c 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4a4c:	f000 fc29 	bl	b52a2 <_ZNK13sysStatusData12get_deviceIDEv>
   b4a50:	0a00      	lsrs	r0, r0, #8
   b4a52:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4a54:	f000 fb66 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4a58:	f000 fc23 	bl	b52a2 <_ZNK13sysStatusData12get_deviceIDEv>
   b4a5c:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());				// NodeID for verification
   b4a5e:	f000 fb61 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4a62:	f000 fc23 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4a66:	0a00      	lsrs	r0, r0, #8
   b4a68:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());				
   b4a6a:	f000 fb5b 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4a6e:	f000 fc1d 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
	buf[4] = 1;						// Set for code release - fix later
   b4a72:	2501      	movs	r5, #1
	buf[3] = lowByte(sysStatus.get_nodeNumber());				
   b4a74:	70e0      	strb	r0, [r4, #3]
	buf[4] = 1;						// Set for code release - fix later
   b4a76:	7125      	strb	r5, [r4, #4]
	buf[5] = highByte(current.get_hourlyCount());
   b4a78:	f000 fba4 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4a7c:	f000 fc25 	bl	b52ca <_ZNK17currentStatusData15get_hourlyCountEv>
   b4a80:	0a00      	lsrs	r0, r0, #8
   b4a82:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(current.get_hourlyCount()); 
   b4a84:	f000 fb9e 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4a88:	f000 fc1f 	bl	b52ca <_ZNK17currentStatusData15get_hourlyCountEv>
   b4a8c:	71a0      	strb	r0, [r4, #6]
	buf[7] = highByte(current.get_dailyCount());
   b4a8e:	f000 fb99 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4a92:	f000 fc1f 	bl	b52d4 <_ZNK17currentStatusData14get_dailyCountEv>
   b4a96:	0a00      	lsrs	r0, r0, #8
   b4a98:	71e0      	strb	r0, [r4, #7]
	buf[8] = lowByte(current.get_dailyCount()); 
   b4a9a:	f000 fb93 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4a9e:	f000 fc19 	bl	b52d4 <_ZNK17currentStatusData14get_dailyCountEv>
   b4aa2:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_internalTempC();
   b4aa4:	f000 fb8e 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4aa8:	f000 fc77 	bl	b539a <_ZNK17currentStatusData17get_internalTempCEv>
   b4aac:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_stateOfCharge();
   b4aae:	f000 fb89 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4ab2:	f000 fba1 	bl	b51f8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4ab6:	ec51 0b10 	vmov	r0, r1, d0
   b4aba:	f007 fcad 	bl	bc418 <__aeabi_d2uiz>
   b4abe:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_batteryState();	
   b4ac0:	f000 fb80 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4ac4:	f000 fc6e 	bl	b53a4 <_ZNK17currentStatusData16get_batteryStateEv>
   b4ac8:	72e0      	strb	r0, [r4, #11]
	buf[12] = sysStatus.get_resetCount();
   b4aca:	f000 fb2b 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4ace:	f000 fc5f 	bl	b5390 <_ZNK13sysStatusData14get_resetCountEv>
	buf[13] = 1;				// reserved for later
   b4ad2:	7365      	strb	r5, [r4, #13]
	buf[12] = sysStatus.get_resetCount();
   b4ad4:	7320      	strb	r0, [r4, #12]
	buf[14] = highByte(driver.lastRssi());
   b4ad6:	4822      	ldr	r0, [pc, #136]	; (b4b60 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x130>)
   b4ad8:	f002 f89f 	bl	b6c1a <_ZN15RHGenericDriver8lastRssiEv>
   b4adc:	1200      	asrs	r0, r0, #8
   b4ade:	73a0      	strb	r0, [r4, #14]
	buf[15] = lowByte(driver.lastRssi()); 
   b4ae0:	481f      	ldr	r0, [pc, #124]	; (b4b60 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x130>)
   b4ae2:	f002 f89a 	bl	b6c1a <_ZN15RHGenericDriver8lastRssiEv>
	buf[16] = msgCnt++;
   b4ae6:	4b1f      	ldr	r3, [pc, #124]	; (b4b64 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x134>)
	buf[15] = lowByte(driver.lastRssi()); 
   b4ae8:	73e0      	strb	r0, [r4, #15]
	buf[16] = msgCnt++;
   b4aea:	781a      	ldrb	r2, [r3, #0]
   b4aec:	7422      	strb	r2, [r4, #16]
   b4aee:	1951      	adds	r1, r2, r5
   b4af0:	7019      	strb	r1, [r3, #0]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message number %d", buf[16]);
   b4af2:	4818      	ldr	r0, [pc, #96]	; (b4b54 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x124>)
   b4af4:	491c      	ldr	r1, [pc, #112]	; (b4b68 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x138>)
   b4af6:	f7ff fb39 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT) == RH_ROUTER_ERROR_NONE) {
   b4afa:	2303      	movs	r3, #3
   b4afc:	9300      	str	r3, [sp, #0]
   b4afe:	4621      	mov	r1, r4
   b4b00:	481a      	ldr	r0, [pc, #104]	; (b4b6c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x13c>)
   b4b02:	2300      	movs	r3, #0
   b4b04:	2211      	movs	r2, #17
   b4b06:	f002 faa3 	bl	b7050 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4b0a:	4604      	mov	r4, r0
   b4b0c:	b980      	cbnz	r0, b4b30 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x100>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Node %d - Data report send to gateway %d successfully", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS);
   b4b0e:	f000 fb09 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4b12:	f000 fbcb 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4b16:	4916      	ldr	r1, [pc, #88]	; (b4b70 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x140>)
   b4b18:	4602      	mov	r2, r0
   b4b1a:	4623      	mov	r3, r4
   b4b1c:	480d      	ldr	r0, [pc, #52]	; (b4b54 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x124>)
   b4b1e:	f7ff fb25 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4b22:	4630      	mov	r0, r6
   b4b24:	4621      	mov	r1, r4
   b4b26:	f006 fee2 	bl	bb8ee <digitalWrite>
		return true;
   b4b2a:	4628      	mov	r0, r5
	else {
		Log.info("Node %d - Data report send to gateway %d failed", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS);
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4b2c:	b002      	add	sp, #8
   b4b2e:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Node %d - Data report send to gateway %d failed", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS);
   b4b30:	f000 faf8 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4b34:	f000 fbba 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4b38:	490e      	ldr	r1, [pc, #56]	; (b4b74 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x144>)
   b4b3a:	4602      	mov	r2, r0
   b4b3c:	2300      	movs	r3, #0
   b4b3e:	4805      	ldr	r0, [pc, #20]	; (b4b54 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x124>)
   b4b40:	f7ff fb14 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4b44:	4630      	mov	r0, r6
   b4b46:	2100      	movs	r1, #0
   b4b48:	f006 fed1 	bl	bb8ee <digitalWrite>
		return false;
   b4b4c:	2000      	movs	r0, #0
   b4b4e:	e7ed      	b.n	b4b2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0xfc>
   b4b50:	000bcbc3 	.word	0x000bcbc3
   b4b54:	2003e654 	.word	0x2003e654
   b4b58:	2003e065 	.word	0x2003e065
   b4b5c:	000bcfc4 	.word	0x000bcfc4
   b4b60:	2003e098 	.word	0x2003e098
   b4b64:	2003e064 	.word	0x2003e064
   b4b68:	000bcbe2 	.word	0x000bcbe2
   b4b6c:	2003e1c8 	.word	0x2003e1c8
   b4b70:	000bcbfc 	.word	0x000bcbfc
   b4b74:	000bcc32 	.word	0x000bcc32

000b4b78 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b4b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4b7a:	b08b      	sub	sp, #44	; 0x2c

	Log.info("Node %d - Receiving acknowledgment - Data Report", sysStatus.get_nodeNumber());
   b4b7c:	f000 fad2 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4b80:	f000 fb94 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4b84:	4e1d      	ldr	r6, [pc, #116]	; (b4bfc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x84>)
		
	sysStatus.set_nextReportSeconds((buf[7] << 8) | buf[8]);
   b4b86:	4c1e      	ldr	r4, [pc, #120]	; (b4c00 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x88>)
	Log.info("Node %d - Receiving acknowledgment - Data Report", sysStatus.get_nodeNumber());
   b4b88:	491e      	ldr	r1, [pc, #120]	; (b4c04 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x8c>)
   b4b8a:	4602      	mov	r2, r0
   b4b8c:	4630      	mov	r0, r6
   b4b8e:	f7ff faed 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	sysStatus.set_nextReportSeconds((buf[7] << 8) | buf[8]);
   b4b92:	f000 fac7 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4b96:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b4b9a:	ba49      	rev16	r1, r1
   b4b9c:	b289      	uxth	r1, r1
   b4b9e:	f000 fbc8 	bl	b5332 <_ZN13sysStatusData21set_nextReportSecondsEt>
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   b4ba2:	f8d4 4001 	ldr.w	r4, [r4, #1]
	Time.setTime(newTime);  // Set time based on response from gateway
   b4ba6:	2300      	movs	r3, #0
   b4ba8:	ba24      	rev	r4, r4
   b4baa:	4619      	mov	r1, r3
   b4bac:	4620      	mov	r0, r4
   b4bae:	f006 fb75 	bl	bb29c <_ZN9TimeClass7setTimeEx>
	Log.info("Time set to %s and next report is in %u seconds at %s", Time.timeStr(newTime).c_str(),sysStatus.get_nextReportSeconds(), Time.timeStr(newTime + sysStatus.get_nextReportSeconds()).c_str());
   b4bb2:	4622      	mov	r2, r4
   b4bb4:	2300      	movs	r3, #0
   b4bb6:	a802      	add	r0, sp, #8
   b4bb8:	f006 fb84 	bl	bb2c4 <_ZN9TimeClass7timeStrEx>
   b4bbc:	9f02      	ldr	r7, [sp, #8]
   b4bbe:	f000 fab1 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4bc2:	f000 fb78 	bl	b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4bc6:	4605      	mov	r5, r0
   b4bc8:	f000 faac 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4bcc:	f000 fb73 	bl	b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4bd0:	2300      	movs	r3, #0
   b4bd2:	1902      	adds	r2, r0, r4
   b4bd4:	a806      	add	r0, sp, #24
   b4bd6:	f006 fb75 	bl	bb2c4 <_ZN9TimeClass7timeStrEx>
   b4bda:	9b06      	ldr	r3, [sp, #24]
   b4bdc:	490a      	ldr	r1, [pc, #40]	; (b4c08 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x90>)
   b4bde:	9300      	str	r3, [sp, #0]
   b4be0:	463a      	mov	r2, r7
   b4be2:	462b      	mov	r3, r5
   b4be4:	4630      	mov	r0, r6
   b4be6:	f7ff fac1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4bea:	a806      	add	r0, sp, #24
   b4bec:	f006 f97a 	bl	baee4 <_ZN6StringD1Ev>
   b4bf0:	a802      	add	r0, sp, #8
   b4bf2:	f006 f977 	bl	baee4 <_ZN6StringD1Ev>
	return true;
}
   b4bf6:	2001      	movs	r0, #1
   b4bf8:	b00b      	add	sp, #44	; 0x2c
   b4bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4bfc:	2003e654 	.word	0x2003e654
   b4c00:	2003e065 	.word	0x2003e065
   b4c04:	000bcc62 	.word	0x000bcc62
   b4c08:	000bcc93 	.word	0x000bcc93

000b4c0c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:

bool LoRA_Functions::composeJoinRequesttNode() {
   b4c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Sending data report to Gateway");
   b4c0e:	492d      	ldr	r1, [pc, #180]	; (b4cc4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb8>)
   b4c10:	482d      	ldr	r0, [pc, #180]	; (b4cc8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbc>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.get_deviceID());                      // deviceID is unique to the device
   b4c12:	4c2e      	ldr	r4, [pc, #184]	; (b4ccc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc0>)
	Log.info("Sending data report to Gateway");
   b4c14:	f7ff faaa 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b4c18:	4b2d      	ldr	r3, [pc, #180]	; (b4cd0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
   b4c1a:	881e      	ldrh	r6, [r3, #0]
   b4c1c:	2101      	movs	r1, #1
   b4c1e:	4630      	mov	r0, r6
   b4c20:	f006 fe65 	bl	bb8ee <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());                      // deviceID is unique to the device
   b4c24:	f000 fa7e 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4c28:	f000 fb3b 	bl	b52a2 <_ZNK13sysStatusData12get_deviceIDEv>
   b4c2c:	0a00      	lsrs	r0, r0, #8
   b4c2e:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4c30:	f000 fa78 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4c34:	f000 fb35 	bl	b52a2 <_ZNK13sysStatusData12get_deviceIDEv>
   b4c38:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());                  			// Node Number
   b4c3a:	f000 fa73 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4c3e:	f000 fb35 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4c42:	0a00      	lsrs	r0, r0, #8
   b4c44:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());
   b4c46:	f000 fa6d 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4c4a:	f000 fb2f 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4c4e:	70e0      	strb	r0, [r4, #3]
	buf[4] = sysStatus.get_structuresVersion();						// Needs to equal 128
   b4c50:	f000 fa68 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4c54:	f000 fb97 	bl	b5386 <_ZNK13sysStatusData21get_structuresVersionEv>
   b4c58:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(driver.lastRssi());				        // Signal strength
   b4c5a:	481e      	ldr	r0, [pc, #120]	; (b4cd4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4c5c:	f001 ffdd 	bl	b6c1a <_ZN15RHGenericDriver8lastRssiEv>
   b4c60:	1200      	asrs	r0, r0, #8
   b4c62:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(driver.lastRssi()); 
   b4c64:	481b      	ldr	r0, [pc, #108]	; (b4cd4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4c66:	f001 ffd8 	bl	b6c1a <_ZN15RHGenericDriver8lastRssiEv>
   b4c6a:	71a0      	strb	r0, [r4, #6]

	
	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4c6c:	f000 fa5a 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4c70:	f000 fb1c 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4c74:	4918      	ldr	r1, [pc, #96]	; (b4cd8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>)
   b4c76:	4a19      	ldr	r2, [pc, #100]	; (b4cdc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>)
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4c78:	2501      	movs	r5, #1
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4c7a:	2809      	cmp	r0, #9
   b4c7c:	bf98      	it	ls
   b4c7e:	460a      	movls	r2, r1
   b4c80:	4917      	ldr	r1, [pc, #92]	; (b4ce0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b4c82:	4811      	ldr	r0, [pc, #68]	; (b4cc8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbc>)
   b4c84:	f7ff fa72 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4c88:	4621      	mov	r1, r4
   b4c8a:	4816      	ldr	r0, [pc, #88]	; (b4ce4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd8>)
   b4c8c:	9500      	str	r5, [sp, #0]
   b4c8e:	2300      	movs	r3, #0
   b4c90:	2207      	movs	r2, #7
   b4c92:	f002 f9dd 	bl	b7050 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4c96:	4604      	mov	r4, r0
   b4c98:	b950      	cbnz	r0, b4cb0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xa4>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   b4c9a:	4913      	ldr	r1, [pc, #76]	; (b4ce8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xdc>)
   b4c9c:	480a      	ldr	r0, [pc, #40]	; (b4cc8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbc>)
   b4c9e:	f7ff fa65 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4ca2:	4630      	mov	r0, r6
   b4ca4:	4621      	mov	r1, r4
   b4ca6:	f006 fe22 	bl	bb8ee <digitalWrite>
		return true;
   b4caa:	4628      	mov	r0, r5
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4cac:	b002      	add	sp, #8
   b4cae:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   b4cb0:	490e      	ldr	r1, [pc, #56]	; (b4cec <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe0>)
   b4cb2:	4805      	ldr	r0, [pc, #20]	; (b4cc8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbc>)
   b4cb4:	f7ff fa5a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4cb8:	4630      	mov	r0, r6
   b4cba:	2100      	movs	r1, #0
   b4cbc:	f006 fe17 	bl	bb8ee <digitalWrite>
		return false;
   b4cc0:	2000      	movs	r0, #0
   b4cc2:	e7f3      	b.n	b4cac <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xa0>
   b4cc4:	000bcbc3 	.word	0x000bcbc3
   b4cc8:	2003e654 	.word	0x2003e654
   b4ccc:	2003e065 	.word	0x2003e065
   b4cd0:	000bcfc4 	.word	0x000bcfc4
   b4cd4:	2003e098 	.word	0x2003e098
   b4cd8:	000bccc9 	.word	0x000bccc9
   b4cdc:	000bcce0 	.word	0x000bcce0
   b4ce0:	000bccf5 	.word	0x000bccf5
   b4ce4:	2003e1c8 	.word	0x2003e1c8
   b4ce8:	000bcd15 	.word	0x000bcd15
   b4cec:	000bcd3e 	.word	0x000bcd3e

000b4cf0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b4cf0:	b510      	push	{r4, lr}
	Log.info("Receiving acknowledgment - Join Request");
   b4cf2:	4922      	ldr	r1, [pc, #136]	; (b4d7c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x8c>)
   b4cf4:	4822      	ldr	r0, [pc, #136]	; (b4d80 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x90>)
   b4cf6:	4c23      	ldr	r4, [pc, #140]	; (b4d84 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x94>)
bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b4cf8:	b088      	sub	sp, #32
	Log.info("Receiving acknowledgment - Join Request");
   b4cfa:	f7ff fa37 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>

	if (sysStatus.get_nodeNumber() < 10 && buf[0] == 128) sysStatus.set_nodeNumber((buf[5] << 8 | buf[6]));
   b4cfe:	f000 fa11 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4d02:	f000 fad3 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d06:	2809      	cmp	r0, #9
   b4d08:	d80a      	bhi.n	b4d20 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x30>
   b4d0a:	7823      	ldrb	r3, [r4, #0]
   b4d0c:	2b80      	cmp	r3, #128	; 0x80
   b4d0e:	d107      	bne.n	b4d20 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x30>
   b4d10:	f000 fa08 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4d14:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4d18:	ba49      	rev16	r1, r1
   b4d1a:	b289      	uxth	r1, r1
   b4d1c:	f000 fb03 	bl	b5326 <_ZN13sysStatusData14set_nodeNumberEt>
	sysStatus.set_nextReportSeconds((buf[7] << 8) | buf[8]);
   b4d20:	f000 fa00 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4d24:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b4d28:	ba49      	rev16	r1, r1
   b4d2a:	b289      	uxth	r1, r1
   b4d2c:	f000 fb01 	bl	b5332 <_ZN13sysStatusData21set_nextReportSecondsEt>
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   b4d30:	f8d4 2001 	ldr.w	r2, [r4, #1]
   b4d34:	ba12      	rev	r2, r2
	Time.setTime(newTime);  // Set time based on response from gateway
   b4d36:	2100      	movs	r1, #0
   b4d38:	4610      	mov	r0, r2
   b4d3a:	9202      	str	r2, [sp, #8]
   b4d3c:	f006 faae 	bl	bb29c <_ZN9TimeClass7setTimeEx>
	Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.get_nodeNumber(), sysStatus.get_nextReportSeconds());
   b4d40:	2300      	movs	r3, #0
   b4d42:	9a02      	ldr	r2, [sp, #8]
   b4d44:	a804      	add	r0, sp, #16
   b4d46:	f006 fabd 	bl	bb2c4 <_ZN9TimeClass7timeStrEx>
   b4d4a:	9a04      	ldr	r2, [sp, #16]
   b4d4c:	9203      	str	r2, [sp, #12]
   b4d4e:	f000 f9e9 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4d52:	f000 faab 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d56:	9002      	str	r0, [sp, #8]
   b4d58:	f000 f9e4 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4d5c:	f000 faab 	bl	b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4d60:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b4d64:	4908      	ldr	r1, [pc, #32]	; (b4d88 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x98>)
   b4d66:	9000      	str	r0, [sp, #0]
   b4d68:	4805      	ldr	r0, [pc, #20]	; (b4d80 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x90>)
   b4d6a:	f7ff f9ff 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4d6e:	a804      	add	r0, sp, #16
   b4d70:	f006 f8b8 	bl	baee4 <_ZN6StringD1Ev>
	return true;
}
   b4d74:	2001      	movs	r0, #1
   b4d76:	b008      	add	sp, #32
   b4d78:	bd10      	pop	{r4, pc}
   b4d7a:	bf00      	nop
   b4d7c:	000bcd61 	.word	0x000bcd61
   b4d80:	2003e654 	.word	0x2003e654
   b4d84:	2003e065 	.word	0x2003e065
   b4d88:	000bcd89 	.word	0x000bcd89

000b4d8c <_ZN14LoRA_Functions22composeAlertReportNodeEv>:

bool LoRA_Functions::composeAlertReportNode() {
   b4d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Node - Sending Alert Report to Gateway");
   b4d8e:	4934      	ldr	r1, [pc, #208]	; (b4e60 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd4>)
   b4d90:	4834      	ldr	r0, [pc, #208]	; (b4e64 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd8>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.get_deviceID());       // deviceID is unique to the device
   b4d92:	4c35      	ldr	r4, [pc, #212]	; (b4e68 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xdc>)
	Log.info("Node - Sending Alert Report to Gateway");
   b4d94:	f7ff f9ea 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b4d98:	4b34      	ldr	r3, [pc, #208]	; (b4e6c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe0>)
   b4d9a:	881e      	ldrh	r6, [r3, #0]
   b4d9c:	2101      	movs	r1, #1
   b4d9e:	4630      	mov	r0, r6
   b4da0:	f006 fda5 	bl	bb8ee <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());       // deviceID is unique to the device
   b4da4:	f000 f9be 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4da8:	f000 fa7b 	bl	b52a2 <_ZNK13sysStatusData12get_deviceIDEv>
   b4dac:	0a00      	lsrs	r0, r0, #8
   b4dae:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4db0:	f000 f9b8 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4db4:	f000 fa75 	bl	b52a2 <_ZNK13sysStatusData12get_deviceIDEv>
   b4db8:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());     // Node Number
   b4dba:	f000 f9b3 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4dbe:	f000 fa75 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4dc2:	0a00      	lsrs	r0, r0, #8
   b4dc4:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());
   b4dc6:	f000 f9ad 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4dca:	f000 fa6f 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4dce:	70e0      	strb	r0, [r4, #3]
	buf[4] = highByte(current.get_alertCodeNode());   // Node's Alert Code
   b4dd0:	f000 f9f8 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4dd4:	2500      	movs	r5, #0
   b4dd6:	f000 faea 	bl	b53ae <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4dda:	7125      	strb	r5, [r4, #4]
	buf[5] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b4ddc:	f006 fb77 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b4de0:	1600      	asrs	r0, r0, #24
   b4de2:	7160      	strb	r0, [r4, #5]
	buf[6] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b4de4:	f006 fb73 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b4de8:	1400      	asrs	r0, r0, #16
   b4dea:	71a0      	strb	r0, [r4, #6]
	buf[7] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b4dec:	f006 fb6f 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b4df0:	1200      	asrs	r0, r0, #8
   b4df2:	71e0      	strb	r0, [r4, #7]
	buf[8] = ((uint8_t) (Time.now()));		    // First byte			
   b4df4:	f006 fb6b 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b4df8:	7220      	strb	r0, [r4, #8]
	buf[9] = highByte(driver.lastRssi());		// Signal strength
   b4dfa:	481d      	ldr	r0, [pc, #116]	; (b4e70 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe4>)
   b4dfc:	f001 ff0d 	bl	b6c1a <_ZN15RHGenericDriver8lastRssiEv>
   b4e00:	1200      	asrs	r0, r0, #8
   b4e02:	7260      	strb	r0, [r4, #9]
	buf[10] = lowByte(driver.lastRssi()); 
   b4e04:	481a      	ldr	r0, [pc, #104]	; (b4e70 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe4>)
   b4e06:	f001 ff08 	bl	b6c1a <_ZN15RHGenericDriver8lastRssiEv>
   b4e0a:	72a0      	strb	r0, [r4, #10]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending Alert Report number %d to gateway at %d", current.get_alertCodeNode(), GATEWAY_ADDRESS);
   b4e0c:	f000 f9da 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b4e10:	f000 facd 	bl	b53ae <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4e14:	4917      	ldr	r1, [pc, #92]	; (b4e74 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe8>)
   b4e16:	4602      	mov	r2, r0
   b4e18:	462b      	mov	r3, r5
   b4e1a:	4812      	ldr	r0, [pc, #72]	; (b4e64 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd8>)
   b4e1c:	f7ff f9a6 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 11, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b4e20:	2305      	movs	r3, #5
   b4e22:	9300      	str	r3, [sp, #0]
   b4e24:	4621      	mov	r1, r4
   b4e26:	4814      	ldr	r0, [pc, #80]	; (b4e78 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xec>)
   b4e28:	462b      	mov	r3, r5
   b4e2a:	220b      	movs	r2, #11
   b4e2c:	f002 f910 	bl	b7050 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4e30:	4604      	mov	r4, r0
   b4e32:	b950      	cbnz	r0, b4e4a <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xbe>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Node - Alert report send to gateway successfully");
   b4e34:	4911      	ldr	r1, [pc, #68]	; (b4e7c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xf0>)
   b4e36:	480b      	ldr	r0, [pc, #44]	; (b4e64 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd8>)
   b4e38:	f7ff f998 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4e3c:	4630      	mov	r0, r6
   b4e3e:	4621      	mov	r1, r4
   b4e40:	f006 fd55 	bl	bb8ee <digitalWrite>
		return true;
   b4e44:	2001      	movs	r0, #1
	else {
		Log.info("Node - Alert Report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4e46:	b002      	add	sp, #8
   b4e48:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b4e4a:	490d      	ldr	r1, [pc, #52]	; (b4e80 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xf4>)
   b4e4c:	4805      	ldr	r0, [pc, #20]	; (b4e64 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd8>)
   b4e4e:	f7ff f98d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4e52:	4630      	mov	r0, r6
   b4e54:	4629      	mov	r1, r5
   b4e56:	f006 fd4a 	bl	bb8ee <digitalWrite>
		return false;
   b4e5a:	4628      	mov	r0, r5
   b4e5c:	e7f3      	b.n	b4e46 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xba>
   b4e5e:	bf00      	nop
   b4e60:	000bcdc5 	.word	0x000bcdc5
   b4e64:	2003e654 	.word	0x2003e654
   b4e68:	2003e065 	.word	0x2003e065
   b4e6c:	000bcfc4 	.word	0x000bcfc4
   b4e70:	2003e098 	.word	0x2003e098
   b4e74:	000bcdec 	.word	0x000bcdec
   b4e78:	2003e1c8 	.word	0x2003e1c8
   b4e7c:	000bce1c 	.word	0x000bce1c
   b4e80:	000bce4d 	.word	0x000bce4d

000b4e84 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {
   b4e84:	b570      	push	{r4, r5, r6, lr}

	Log.info("Receiving acknowledgment - Alert Report");
   b4e86:	4d1a      	ldr	r5, [pc, #104]	; (b4ef0 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x6c>)
   b4e88:	4e1a      	ldr	r6, [pc, #104]	; (b4ef4 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x70>)
   b4e8a:	491b      	ldr	r1, [pc, #108]	; (b4ef8 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x74>)
bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {
   b4e8c:	b088      	sub	sp, #32
	Log.info("Receiving acknowledgment - Alert Report");
   b4e8e:	4628      	mov	r0, r5
   b4e90:	f7ff f96c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>

	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   b4e94:	f8d6 4001 	ldr.w	r4, [r6, #1]
	sysStatus.set_nextReportSeconds((buf[5] << 8) | buf[6]);
   b4e98:	f000 f944 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4e9c:	f8b6 1005 	ldrh.w	r1, [r6, #5]
   b4ea0:	ba49      	rev16	r1, r1
   b4ea2:	b289      	uxth	r1, r1
   b4ea4:	f000 fa45 	bl	b5332 <_ZN13sysStatusData21set_nextReportSecondsEt>
   b4ea8:	ba24      	rev	r4, r4
	Time.setTime(newTime);  // Set time based on response from gateway
   b4eaa:	2300      	movs	r3, #0
   b4eac:	4619      	mov	r1, r3
   b4eae:	4620      	mov	r0, r4
   b4eb0:	f006 f9f4 	bl	bb29c <_ZN9TimeClass7setTimeEx>
	Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.get_nodeNumber(), sysStatus.get_nextReportSeconds());
   b4eb4:	2300      	movs	r3, #0
   b4eb6:	4622      	mov	r2, r4
   b4eb8:	a804      	add	r0, sp, #16
   b4eba:	f006 fa03 	bl	bb2c4 <_ZN9TimeClass7timeStrEx>
   b4ebe:	9a04      	ldr	r2, [sp, #16]
   b4ec0:	9203      	str	r2, [sp, #12]
   b4ec2:	f000 f92f 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4ec6:	f000 f9f1 	bl	b52ac <_ZNK13sysStatusData14get_nodeNumberEv>
   b4eca:	9002      	str	r0, [sp, #8]
   b4ecc:	f000 f92a 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b4ed0:	f000 f9f1 	bl	b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4ed4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b4ed8:	4908      	ldr	r1, [pc, #32]	; (b4efc <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x78>)
   b4eda:	9000      	str	r0, [sp, #0]
   b4edc:	4628      	mov	r0, r5
   b4ede:	f7ff f945 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4ee2:	a804      	add	r0, sp, #16
   b4ee4:	f005 fffe 	bl	baee4 <_ZN6StringD1Ev>
	return true;
}
   b4ee8:	2001      	movs	r0, #1
   b4eea:	b008      	add	sp, #32
   b4eec:	bd70      	pop	{r4, r5, r6, pc}
   b4eee:	bf00      	nop
   b4ef0:	2003e654 	.word	0x2003e654
   b4ef4:	2003e065 	.word	0x2003e065
   b4ef8:	000bce78 	.word	0x000bce78
   b4efc:	000bcd89 	.word	0x000bcd89

000b4f00 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b4f00:	b570      	push	{r4, r5, r6, lr}
   b4f02:	b08a      	sub	sp, #40	; 0x28
	uint8_t len = sizeof(buf);
   b4f04:	2332      	movs	r3, #50	; 0x32
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag)) {
   b4f06:	2600      	movs	r6, #0
	uint8_t len = sizeof(buf);
   b4f08:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag)) {
   b4f0c:	4d26      	ldr	r5, [pc, #152]	; (b4fa8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xa8>)
   b4f0e:	4827      	ldr	r0, [pc, #156]	; (b4fac <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xac>)
   b4f10:	9604      	str	r6, [sp, #16]
   b4f12:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   b4f16:	e9cd 6302 	strd	r6, r3, [sp, #8]
   b4f1a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   b4f1e:	9300      	str	r3, [sp, #0]
   b4f20:	9601      	str	r6, [sp, #4]
   b4f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4f26:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   b4f2a:	4629      	mov	r1, r5
   b4f2c:	f002 f994 	bl	b7258 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   b4f30:	4604      	mov	r4, r0
   b4f32:	b918      	cbnz	r0, b4f3c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x3c>
	return false;
   b4f34:	2400      	movs	r4, #0
}
   b4f36:	4620      	mov	r0, r4
   b4f38:	b00a      	add	sp, #40	; 0x28
   b4f3a:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4f3c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		Log.info("Received from node %d with rssi=%d - a %s message wated for %lu mSec", from, driver.lastRssi(), loraStateNames[lora_state], waitingFor);
   b4f40:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
		buf[len] = 0;
   b4f44:	54ee      	strb	r6, [r5, r3]
		lora_state = (LoRA_State)messageFlag;
   b4f46:	4d1a      	ldr	r5, [pc, #104]	; (b4fb0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xb0>)
   b4f48:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
		Log.info("Received from node %d with rssi=%d - a %s message wated for %lu mSec", from, driver.lastRssi(), loraStateNames[lora_state], waitingFor);
   b4f4c:	4819      	ldr	r0, [pc, #100]	; (b4fb4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xb4>)
		lora_state = (LoRA_State)messageFlag;
   b4f4e:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message wated for %lu mSec", from, driver.lastRssi(), loraStateNames[lora_state], waitingFor);
   b4f50:	9207      	str	r2, [sp, #28]
   b4f52:	f001 fe62 	bl	b6c1a <_ZN15RHGenericDriver8lastRssiEv>
   b4f56:	9601      	str	r6, [sp, #4]
   b4f58:	4603      	mov	r3, r0
   b4f5a:	4917      	ldr	r1, [pc, #92]	; (b4fb8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xb8>)
   b4f5c:	7828      	ldrb	r0, [r5, #0]
   b4f5e:	9a07      	ldr	r2, [sp, #28]
   b4f60:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4f64:	9100      	str	r1, [sp, #0]
   b4f66:	4815      	ldr	r0, [pc, #84]	; (b4fbc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xbc>)
   b4f68:	4915      	ldr	r1, [pc, #84]	; (b4fc0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xc0>)
   b4f6a:	f7ff f8ff 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b4f6e:	782b      	ldrb	r3, [r5, #0]
   b4f70:	2b04      	cmp	r3, #4
   b4f72:	d011      	beq.n	b4f98 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x98>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b4f74:	782b      	ldrb	r3, [r5, #0]
   b4f76:	2b02      	cmp	r3, #2
   b4f78:	d105      	bne.n	b4f86 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x86>
   b4f7a:	f7ff fcd1 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b4f7e:	f7ff feb7 	bl	b4cf0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b4f82:	2800      	cmp	r0, #0
   b4f84:	d1d7      	bne.n	b4f36 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b4f86:	782b      	ldrb	r3, [r5, #0]
   b4f88:	2b06      	cmp	r3, #6
   b4f8a:	d1d3      	bne.n	b4f34 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x34>
   b4f8c:	f7ff fcc8 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b4f90:	f7ff ff78 	bl	b4e84 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>
   b4f94:	4604      	mov	r4, r0
   b4f96:	e7ce      	b.n	b4f36 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b4f98:	f7ff fcc2 	bl	b4920 <_ZN14LoRA_Functions8instanceEv>
   b4f9c:	f7ff fdec 	bl	b4b78 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
   b4fa0:	2800      	cmp	r0, #0
   b4fa2:	d0e7      	beq.n	b4f74 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x74>
   b4fa4:	e7c7      	b.n	b4f36 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
   b4fa6:	bf00      	nop
   b4fa8:	2003e065 	.word	0x2003e065
   b4fac:	2003e1c8 	.word	0x2003e1c8
   b4fb0:	2003e05d 	.word	0x2003e05d
   b4fb4:	2003e098 	.word	0x2003e098
   b4fb8:	2003dedc 	.word	0x2003dedc
   b4fbc:	2003e654 	.word	0x2003e654
   b4fc0:	000bcea0 	.word	0x000bcea0

000b4fc4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4fc4:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4fc6:	4a08      	ldr	r2, [pc, #32]	; (b4fe8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b4fc8:	4c08      	ldr	r4, [pc, #32]	; (b4fec <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b4fca:	4909      	ldr	r1, [pc, #36]	; (b4ff0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b4fcc:	7812      	ldrb	r2, [r2, #0]
   b4fce:	7809      	ldrb	r1, [r1, #0]
   b4fd0:	4b08      	ldr	r3, [pc, #32]	; (b4ff4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b4fd2:	4620      	mov	r0, r4
   b4fd4:	f002 fd60 	bl	b7a98 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4fd8:	4621      	mov	r1, r4
   b4fda:	4807      	ldr	r0, [pc, #28]	; (b4ff8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b4fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4fe0:	2200      	movs	r2, #0
   b4fe2:	f002 b82b 	b.w	b703c <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4fe6:	bf00      	nop
   b4fe8:	000bcfcc 	.word	0x000bcfcc
   b4fec:	2003e098 	.word	0x2003e098
   b4ff0:	000bcfca 	.word	0x000bcfca
   b4ff4:	2003e3ec 	.word	0x2003e3ec
   b4ff8:	2003e1c8 	.word	0x2003e1c8

000b4ffc <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b4ffc:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b4ffe:	4b04      	ldr	r3, [pc, #16]	; (b5010 <_ZN17currentStatusDataD1Ev+0x14>)
   b5000:	6003      	str	r3, [r0, #0]
   b5002:	4604      	mov	r4, r0
            if (handle_) {
   b5004:	6840      	ldr	r0, [r0, #4]
   b5006:	b108      	cbz	r0, b500c <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5008:	f003 f8da 	bl	b81c0 <os_mutex_recursive_destroy>
}
   b500c:	4620      	mov	r0, r4
   b500e:	bd10      	pop	{r4, pc}
   b5010:	000bd69c 	.word	0x000bd69c

000b5014 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5014:	b510      	push	{r4, lr}
   b5016:	4604      	mov	r4, r0
}
   b5018:	f7ff fff0 	bl	b4ffc <_ZN17currentStatusDataD1Ev>
   b501c:	4620      	mov	r0, r4
   b501e:	2178      	movs	r1, #120	; 0x78
   b5020:	f7ff f83d 	bl	b409e <_ZdlPvj>
   b5024:	4620      	mov	r0, r4
   b5026:	bd10      	pop	{r4, pc}

000b5028 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5028:	b510      	push	{r4, lr}
   b502a:	4b03      	ldr	r3, [pc, #12]	; (b5038 <_ZN8MB85RC64D1Ev+0x10>)
   b502c:	6003      	str	r3, [r0, #0]
   b502e:	4604      	mov	r4, r0
   b5030:	f001 fc48 	bl	b68c4 <_ZN6MB85RCD1Ev>
   b5034:	4620      	mov	r0, r4
   b5036:	bd10      	pop	{r4, pc}
   b5038:	000bcf24 	.word	0x000bcf24

000b503c <_ZN8MB85RC64D0Ev>:
   b503c:	b510      	push	{r4, lr}
   b503e:	4604      	mov	r4, r0
   b5040:	f7ff fff2 	bl	b5028 <_ZN8MB85RC64D1Ev>
   b5044:	4620      	mov	r0, r4
   b5046:	2110      	movs	r1, #16
   b5048:	f7ff f829 	bl	b409e <_ZdlPvj>
   b504c:	4620      	mov	r0, r4
   b504e:	bd10      	pop	{r4, pc}

000b5050 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b5050:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5052:	4b04      	ldr	r3, [pc, #16]	; (b5064 <_ZN13sysStatusDataD1Ev+0x14>)
   b5054:	6003      	str	r3, [r0, #0]
   b5056:	4604      	mov	r4, r0
            if (handle_) {
   b5058:	6840      	ldr	r0, [r0, #4]
   b505a:	b108      	cbz	r0, b5060 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b505c:	f003 f8b0 	bl	b81c0 <os_mutex_recursive_destroy>
}
   b5060:	4620      	mov	r0, r4
   b5062:	bd10      	pop	{r4, pc}
   b5064:	000bd69c 	.word	0x000bd69c

000b5068 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5068:	b510      	push	{r4, lr}
   b506a:	4604      	mov	r4, r0
}
   b506c:	f7ff fff0 	bl	b5050 <_ZN13sysStatusDataD1Ev>
   b5070:	4620      	mov	r0, r4
   b5072:	2170      	movs	r1, #112	; 0x70
   b5074:	f7ff f813 	bl	b409e <_ZdlPvj>
   b5078:	4620      	mov	r0, r4
   b507a:	bd10      	pop	{r4, pc}

000b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b507c:	b510      	push	{r4, lr}
            if (!handle_) {
   b507e:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5080:	4604      	mov	r4, r0
            if (!handle_) {
   b5082:	b90b      	cbnz	r3, b5088 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5084:	f003 f894 	bl	b81b0 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b5088:	6820      	ldr	r0, [r4, #0]
        }
   b508a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b508e:	f003 b89f 	b.w	b81d0 <os_mutex_recursive_lock>

000b5092 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5092:	b538      	push	{r3, r4, r5, lr}
   b5094:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5096:	3004      	adds	r0, #4
   b5098:	f7ff fff0 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b509c:	6a20      	ldr	r0, [r4, #32]
   b509e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b50a0:	6803      	ldr	r3, [r0, #0]
   b50a2:	68dd      	ldr	r5, [r3, #12]
   b50a4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b50a8:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b50aa:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b50ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b50b0:	f003 b896 	b.w	b81e0 <os_mutex_recursive_unlock>

000b50b4 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b50b4:	b538      	push	{r3, r4, r5, lr}
   b50b6:	4604      	mov	r4, r0
   b50b8:	3004      	adds	r0, #4
   b50ba:	f7ff ffdf 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b50be:	6a20      	ldr	r0, [r4, #32]
   b50c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b50c2:	6803      	ldr	r3, [r0, #0]
   b50c4:	689d      	ldr	r5, [r3, #8]
   b50c6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b50ca:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b50cc:	68a2      	ldr	r2, [r4, #8]
   b50ce:	6823      	ldr	r3, [r4, #0]
   b50d0:	88d1      	ldrh	r1, [r2, #6]
   b50d2:	695b      	ldr	r3, [r3, #20]
   b50d4:	4620      	mov	r0, r4
   b50d6:	4798      	blx	r3
   b50d8:	b918      	cbnz	r0, b50e2 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b50da:	6823      	ldr	r3, [r4, #0]
   b50dc:	4620      	mov	r0, r4
   b50de:	699b      	ldr	r3, [r3, #24]
   b50e0:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b50e2:	6860      	ldr	r0, [r4, #4]
   b50e4:	f003 f87c 	bl	b81e0 <os_mutex_recursive_unlock>
        }
   b50e8:	2001      	movs	r0, #1
   b50ea:	bd38      	pop	{r3, r4, r5, pc}

000b50ec <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b50ec:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b50f0:	6081      	str	r1, [r0, #8]
   b50f2:	4909      	ldr	r1, [pc, #36]	; (b5118 <_ZN13sysStatusDataC1Ev+0x2c>)
   b50f4:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b50f8:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b50fc:	2101      	movs	r1, #1
   b50fe:	8281      	strh	r1, [r0, #20]
   b5100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5104:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5106:	4905      	ldr	r1, [pc, #20]	; (b511c <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5108:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b510a:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b510e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5110:	6182      	str	r2, [r0, #24]
   b5112:	4a03      	ldr	r2, [pc, #12]	; (b5120 <_ZN13sysStatusDataC1Ev+0x34>)
   b5114:	6002      	str	r2, [r0, #0]
};
   b5116:	4770      	bx	lr
   b5118:	20a99e73 	.word	0x20a99e73
   b511c:	2003e384 	.word	0x2003e384
   b5120:	000bcf40 	.word	0x000bcf40

000b5124 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5124:	b510      	push	{r4, lr}
    if (!_instance) {
   b5126:	4c06      	ldr	r4, [pc, #24]	; (b5140 <_ZN13sysStatusData8instanceEv+0x1c>)
   b5128:	6823      	ldr	r3, [r4, #0]
   b512a:	b93b      	cbnz	r3, b513c <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b512c:	2070      	movs	r0, #112	; 0x70
   b512e:	f7fe ffb2 	bl	b4096 <_Znwj>
   b5132:	4603      	mov	r3, r0
   b5134:	b108      	cbz	r0, b513a <_ZN13sysStatusData8instanceEv+0x16>
   b5136:	f7ff ffd9 	bl	b50ec <_ZN13sysStatusDataC1Ev>
   b513a:	6023      	str	r3, [r4, #0]
}
   b513c:	6820      	ldr	r0, [r4, #0]
   b513e:	bd10      	pop	{r4, pc}
   b5140:	2003e37c 	.word	0x2003e37c

000b5144 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5144:	b508      	push	{r3, lr}
    fram.begin();
   b5146:	6a00      	ldr	r0, [r0, #32]
   b5148:	f001 fbd2 	bl	b68f0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b514c:	f7ff ffea 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b5150:	6803      	ldr	r3, [r0, #0]
   b5152:	685b      	ldr	r3, [r3, #4]
   b5154:	4798      	blx	r3
}
   b5156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setNodeConfiguration();                             // Here we will fix the settings specific to the node
   b515a:	f000 bab3 	b.w	b56c4 <_Z20setNodeConfigurationv>

000b515e <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b515e:	b510      	push	{r4, lr}
    fram.begin();
   b5160:	6a00      	ldr	r0, [r0, #32]
   b5162:	f001 fbc5 	bl	b68f0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5166:	f7ff ffdd 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b516a:	6803      	ldr	r3, [r0, #0]
}
   b516c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5170:	685b      	ldr	r3, [r3, #4]
   b5172:	4718      	bx	r3

000b5174 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5174:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5176:	f7ff ffd5 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b517a:	6803      	ldr	r3, [r0, #0]
}
   b517c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5180:	68db      	ldr	r3, [r3, #12]
   b5182:	2100      	movs	r1, #0
   b5184:	4718      	bx	r3
	...

000b5188 <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b5188:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b518a:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b518e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5190:	6182      	str	r2, [r0, #24]
   b5192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5196:	6081      	str	r1, [r0, #8]
   b5198:	61c2      	str	r2, [r0, #28]
   b519a:	4907      	ldr	r1, [pc, #28]	; (b51b8 <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b519c:	4a07      	ldr	r2, [pc, #28]	; (b51bc <_ZN17currentStatusDataC1Ev+0x34>)
   b519e:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b51a0:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b51a4:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b51a6:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b51aa:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b51ac:	2101      	movs	r1, #1
   b51ae:	4a04      	ldr	r2, [pc, #16]	; (b51c0 <_ZN17currentStatusDataC1Ev+0x38>)
   b51b0:	8281      	strh	r1, [r0, #20]
   b51b2:	6002      	str	r2, [r0, #0]
};
   b51b4:	4770      	bx	lr
   b51b6:	bf00      	nop
   b51b8:	20a99e73 	.word	0x20a99e73
   b51bc:	2003e384 	.word	0x2003e384
   b51c0:	000bcf6c 	.word	0x000bcf6c

000b51c4 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b51c4:	b510      	push	{r4, lr}
    if (!_instance) {
   b51c6:	4c06      	ldr	r4, [pc, #24]	; (b51e0 <_ZN17currentStatusData8instanceEv+0x1c>)
   b51c8:	6823      	ldr	r3, [r4, #0]
   b51ca:	b93b      	cbnz	r3, b51dc <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b51cc:	2078      	movs	r0, #120	; 0x78
   b51ce:	f7fe ff62 	bl	b4096 <_Znwj>
   b51d2:	4603      	mov	r3, r0
   b51d4:	b108      	cbz	r0, b51da <_ZN17currentStatusData8instanceEv+0x16>
   b51d6:	f7ff ffd7 	bl	b5188 <_ZN17currentStatusDataC1Ev>
   b51da:	6023      	str	r3, [r4, #0]
}
   b51dc:	6820      	ldr	r0, [r4, #0]
   b51de:	bd10      	pop	{r4, pc}
   b51e0:	2003e380 	.word	0x2003e380

000b51e4 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b51e4:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b51e6:	f7ff ff9d 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b51ea:	6803      	ldr	r3, [r0, #0]
}
   b51ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b51f0:	68db      	ldr	r3, [r3, #12]
   b51f2:	2100      	movs	r1, #0
   b51f4:	4718      	bx	r3
	...

000b51f8 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b51f8:	b510      	push	{r4, lr}
   b51fa:	4604      	mov	r4, r0
   b51fc:	ed2d 8b02 	vpush	{d8}
   b5200:	3004      	adds	r0, #4
   b5202:	f7ff ff3b 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5206:	68e3      	ldr	r3, [r4, #12]
   b5208:	3b08      	subs	r3, #8
   b520a:	2b17      	cmp	r3, #23
   b520c:	d90c      	bls.n	b5228 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b520e:	68a3      	ldr	r3, [r4, #8]
   b5210:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b5214:	6860      	ldr	r0, [r4, #4]
   b5216:	f002 ffe3 	bl	b81e0 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b521a:	eeb0 0a48 	vmov.f32	s0, s16
   b521e:	eef0 0a68 	vmov.f32	s1, s17
   b5222:	ecbd 8b02 	vpop	{d8}
   b5226:	bd10      	pop	{r4, pc}
            T result = 0;
   b5228:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5230 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b522c:	e7f2      	b.n	b5214 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b522e:	bf00      	nop
	...

000b5238 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b523a:	4604      	mov	r4, r0
   b523c:	3004      	adds	r0, #4
   b523e:	ec57 6b10 	vmov	r6, r7, d0
   b5242:	f7ff ff1b 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5246:	68e3      	ldr	r3, [r4, #12]
   b5248:	3b08      	subs	r3, #8
   b524a:	2b17      	cmp	r3, #23
   b524c:	d912      	bls.n	b5274 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b524e:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5250:	4630      	mov	r0, r6
   b5252:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b5256:	4639      	mov	r1, r7
   b5258:	f007 f86e 	bl	bc338 <__aeabi_dcmpeq>
   b525c:	b950      	cbnz	r0, b5274 <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b525e:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b5262:	4620      	mov	r0, r4
   b5264:	68a5      	ldr	r5, [r4, #8]
   b5266:	f002 ff21 	bl	b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b526a:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b526c:	6823      	ldr	r3, [r4, #0]
   b526e:	4620      	mov	r0, r4
   b5270:	691b      	ldr	r3, [r3, #16]
   b5272:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5274:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b5276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b527a:	f002 bfb1 	b.w	b81e0 <os_mutex_recursive_unlock>

000b527e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b527e:	b538      	push	{r3, r4, r5, lr}
   b5280:	4604      	mov	r4, r0
   b5282:	3004      	adds	r0, #4
   b5284:	460d      	mov	r5, r1
   b5286:	f7ff fef9 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b528a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b528c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b528e:	3b02      	subs	r3, #2
   b5290:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5292:	bf26      	itte	cs
   b5294:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5296:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5298:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b529a:	f002 ffa1 	bl	b81e0 <os_mutex_recursive_unlock>
        }
   b529e:	4628      	mov	r0, r5
   b52a0:	bd38      	pop	{r3, r4, r5, pc}

000b52a2 <_ZNK13sysStatusData12get_deviceIDEv>:
uint16_t sysStatusData::get_deviceID() const {
   b52a2:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, deviceID));
   b52a4:	2110      	movs	r1, #16
   b52a6:	f7ff ffea 	bl	b527e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b52aa:	bd08      	pop	{r3, pc}

000b52ac <_ZNK13sysStatusData14get_nodeNumberEv>:
uint16_t sysStatusData::get_nodeNumber() const {
   b52ac:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, nodeNumber));
   b52ae:	2112      	movs	r1, #18
   b52b0:	f7ff ffe5 	bl	b527e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b52b4:	bd08      	pop	{r3, pc}

000b52b6 <_ZNK13sysStatusData21get_nextReportSecondsEv>:
uint16_t sysStatusData::get_nextReportSeconds() const {
   b52b6:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,nextReportSeconds ));
   b52b8:	2132      	movs	r1, #50	; 0x32
   b52ba:	f7ff ffe0 	bl	b527e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b52be:	bd08      	pop	{r3, pc}

000b52c0 <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b52c0:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b52c2:	2134      	movs	r1, #52	; 0x34
   b52c4:	f7ff ffdb 	bl	b527e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b52c8:	bd08      	pop	{r3, pc}

000b52ca <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b52ca:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b52cc:	2140      	movs	r1, #64	; 0x40
   b52ce:	f7ff ffd6 	bl	b527e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b52d2:	bd08      	pop	{r3, pc}

000b52d4 <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b52d4:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b52d6:	2142      	movs	r1, #66	; 0x42
   b52d8:	f7ff ffd1 	bl	b527e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b52dc:	bd08      	pop	{r3, pc}

000b52de <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b52de:	b570      	push	{r4, r5, r6, lr}
   b52e0:	4604      	mov	r4, r0
   b52e2:	3004      	adds	r0, #4
   b52e4:	460d      	mov	r5, r1
   b52e6:	4616      	mov	r6, r2
   b52e8:	f7ff fec8 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b52ec:	68e3      	ldr	r3, [r4, #12]
   b52ee:	3b02      	subs	r3, #2
   b52f0:	42ab      	cmp	r3, r5
   b52f2:	d30d      	bcc.n	b5310 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b52f4:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b52f6:	5b5a      	ldrh	r2, [r3, r5]
   b52f8:	42b2      	cmp	r2, r6
   b52fa:	d009      	beq.n	b5310 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b52fc:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b52fe:	4620      	mov	r0, r4
   b5300:	68a5      	ldr	r5, [r4, #8]
   b5302:	f002 fed3 	bl	b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5306:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5308:	6823      	ldr	r3, [r4, #0]
   b530a:	4620      	mov	r0, r4
   b530c:	691b      	ldr	r3, [r3, #16]
   b530e:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5310:	6860      	ldr	r0, [r4, #4]
        }
   b5312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b5316:	f002 bf63 	b.w	b81e0 <os_mutex_recursive_unlock>

000b531a <_ZN13sysStatusData12set_deviceIDEt>:
void sysStatusData::set_deviceID(uint16_t value) {
   b531a:	b508      	push	{r3, lr}
   b531c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, deviceID), value);
   b531e:	2110      	movs	r1, #16
   b5320:	f7ff ffdd 	bl	b52de <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5324:	bd08      	pop	{r3, pc}

000b5326 <_ZN13sysStatusData14set_nodeNumberEt>:
void sysStatusData::set_nodeNumber(uint16_t value) {
   b5326:	b508      	push	{r3, lr}
   b5328:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nodeNumber), value);
   b532a:	2112      	movs	r1, #18
   b532c:	f7ff ffd7 	bl	b52de <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5330:	bd08      	pop	{r3, pc}

000b5332 <_ZN13sysStatusData21set_nextReportSecondsEt>:
void sysStatusData::set_nextReportSeconds(uint16_t value) {
   b5332:	b508      	push	{r3, lr}
   b5334:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nextReportSeconds), value);
   b5336:	2132      	movs	r1, #50	; 0x32
   b5338:	f7ff ffd1 	bl	b52de <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b533c:	bd08      	pop	{r3, pc}

000b533e <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b533e:	b508      	push	{r3, lr}
   b5340:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b5342:	2134      	movs	r1, #52	; 0x34
   b5344:	f7ff ffcb 	bl	b52de <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5348:	bd08      	pop	{r3, pc}

000b534a <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b534a:	b508      	push	{r3, lr}
   b534c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b534e:	2140      	movs	r1, #64	; 0x40
   b5350:	f7ff ffc5 	bl	b52de <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5354:	bd08      	pop	{r3, pc}

000b5356 <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b5356:	b508      	push	{r3, lr}
   b5358:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b535a:	2142      	movs	r1, #66	; 0x42
   b535c:	f7ff ffbf 	bl	b52de <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5360:	bd08      	pop	{r3, pc}

000b5362 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5362:	b538      	push	{r3, r4, r5, lr}
   b5364:	4604      	mov	r4, r0
   b5366:	3004      	adds	r0, #4
   b5368:	460d      	mov	r5, r1
   b536a:	f7ff fe87 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b536e:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5370:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5372:	3b01      	subs	r3, #1
   b5374:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5376:	bf26      	itte	cs
   b5378:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b537a:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b537c:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b537e:	f002 ff2f 	bl	b81e0 <os_mutex_recursive_unlock>
        }
   b5382:	4628      	mov	r0, r5
   b5384:	bd38      	pop	{r3, r4, r5, pc}

000b5386 <_ZNK13sysStatusData21get_structuresVersionEv>:
uint8_t sysStatusData::get_structuresVersion() const {
   b5386:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, structuresVersion));
   b5388:	2114      	movs	r1, #20
   b538a:	f7ff ffea 	bl	b5362 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b538e:	bd08      	pop	{r3, pc}

000b5390 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5390:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5392:	2118      	movs	r1, #24
   b5394:	f7ff ffe5 	bl	b5362 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5398:	bd08      	pop	{r3, pc}

000b539a <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b539a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b539c:	2114      	movs	r1, #20
   b539e:	f7ff ffe0 	bl	b5362 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b53a2:	bd08      	pop	{r3, pc}

000b53a4 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b53a4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b53a6:	2120      	movs	r1, #32
   b53a8:	f7ff ffdb 	bl	b5362 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b53ac:	bd08      	pop	{r3, pc}

000b53ae <_ZNK17currentStatusData17get_alertCodeNodeEv>:

uint8_t currentStatusData::get_alertCodeNode() const {
   b53ae:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b53b0:	2144      	movs	r1, #68	; 0x44
   b53b2:	f7ff ffd6 	bl	b5362 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b53b6:	bd08      	pop	{r3, pc}

000b53b8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b53b8:	b570      	push	{r4, r5, r6, lr}
   b53ba:	4604      	mov	r4, r0
   b53bc:	3004      	adds	r0, #4
   b53be:	460d      	mov	r5, r1
   b53c0:	4616      	mov	r6, r2
   b53c2:	f7ff fe5b 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b53c6:	68e3      	ldr	r3, [r4, #12]
   b53c8:	3b01      	subs	r3, #1
   b53ca:	42ab      	cmp	r3, r5
   b53cc:	d30d      	bcc.n	b53ea <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b53ce:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b53d0:	5d5a      	ldrb	r2, [r3, r5]
   b53d2:	42b2      	cmp	r2, r6
   b53d4:	d009      	beq.n	b53ea <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b53d6:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b53d8:	4620      	mov	r0, r4
   b53da:	68a5      	ldr	r5, [r4, #8]
   b53dc:	f002 fe66 	bl	b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b53e0:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b53e2:	6823      	ldr	r3, [r4, #0]
   b53e4:	4620      	mov	r0, r4
   b53e6:	691b      	ldr	r3, [r3, #16]
   b53e8:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b53ea:	6860      	ldr	r0, [r4, #4]
        }
   b53ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b53f0:	f002 bef6 	b.w	b81e0 <os_mutex_recursive_unlock>

000b53f4 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b53f4:	b508      	push	{r3, lr}
   b53f6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b53f8:	2114      	movs	r1, #20
   b53fa:	f7ff ffdd 	bl	b53b8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b53fe:	bd08      	pop	{r3, pc}

000b5400 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b5400:	b508      	push	{r3, lr}
   b5402:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b5404:	2118      	movs	r1, #24
   b5406:	f7ff ffd7 	bl	b53b8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b540a:	bd08      	pop	{r3, pc}

000b540c <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b540c:	b508      	push	{r3, lr}
   b540e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5410:	2114      	movs	r1, #20
   b5412:	f7ff ffd1 	bl	b53b8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5416:	bd08      	pop	{r3, pc}

000b5418 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b5418:	b508      	push	{r3, lr}
   b541a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b541c:	2120      	movs	r1, #32
   b541e:	f7ff ffcb 	bl	b53b8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5422:	bd08      	pop	{r3, pc}

000b5424 <_ZN17currentStatusData17set_alertCodeNodeEh>:

void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5424:	b508      	push	{r3, lr}
   b5426:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5428:	2144      	movs	r1, #68	; 0x44
   b542a:	f7ff ffc5 	bl	b53b8 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b542e:	bd08      	pop	{r3, pc}

000b5430 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b5430:	b538      	push	{r3, r4, r5, lr}
   b5432:	4604      	mov	r4, r0
   b5434:	3004      	adds	r0, #4
   b5436:	460d      	mov	r5, r1
   b5438:	f7ff fe20 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b543c:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b543e:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5440:	3b01      	subs	r3, #1
   b5442:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5444:	bf26      	itte	cs
   b5446:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5448:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b544a:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b544c:	f002 fec8 	bl	b81e0 <os_mutex_recursive_unlock>
        }
   b5450:	4628      	mov	r0, r5
   b5452:	bd38      	pop	{r3, r4, r5, pc}

000b5454 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b5454:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b5456:	2117      	movs	r1, #23
   b5458:	f7ff ffea 	bl	b5430 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b545c:	bd08      	pop	{r3, pc}

000b545e <_ZNK13sysStatusData14get_sensorTypeEv>:
bool sysStatusData::get_sensorType() const {
   b545e:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, sensorType));
   b5460:	2140      	movs	r1, #64	; 0x40
   b5462:	f7ff ffe5 	bl	b5430 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5466:	bd08      	pop	{r3, pc}

000b5468 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5468:	b570      	push	{r4, r5, r6, lr}
   b546a:	4604      	mov	r4, r0
   b546c:	3004      	adds	r0, #4
   b546e:	460d      	mov	r5, r1
   b5470:	4616      	mov	r6, r2
   b5472:	f7ff fe03 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5476:	68e3      	ldr	r3, [r4, #12]
   b5478:	3b01      	subs	r3, #1
   b547a:	42ab      	cmp	r3, r5
   b547c:	d30d      	bcc.n	b549a <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b547e:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5480:	5d5a      	ldrb	r2, [r3, r5]
   b5482:	42b2      	cmp	r2, r6
   b5484:	d009      	beq.n	b549a <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b5486:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5488:	4620      	mov	r0, r4
   b548a:	68a5      	ldr	r5, [r4, #8]
   b548c:	f002 fe0e 	bl	b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5490:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5492:	6823      	ldr	r3, [r4, #0]
   b5494:	4620      	mov	r0, r4
   b5496:	691b      	ldr	r3, [r3, #16]
   b5498:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b549a:	6860      	ldr	r0, [r4, #4]
        }
   b549c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b54a0:	f002 be9e 	b.w	b81e0 <os_mutex_recursive_unlock>

000b54a4 <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b54a4:	b508      	push	{r3, lr}
   b54a6:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b54a8:	2117      	movs	r1, #23
   b54aa:	f7ff ffdd 	bl	b5468 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b54ae:	bd08      	pop	{r3, pc}

000b54b0 <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b54b0:	b508      	push	{r3, lr}
   b54b2:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b54b4:	2140      	movs	r1, #64	; 0x40
   b54b6:	f7ff ffd7 	bl	b5468 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b54ba:	bd08      	pop	{r3, pc}

000b54bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b54bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54be:	4604      	mov	r4, r0
   b54c0:	3004      	adds	r0, #4
   b54c2:	460d      	mov	r5, r1
   b54c4:	f7ff fdda 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b54c8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b54ca:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b54cc:	3b08      	subs	r3, #8
   b54ce:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b54d0:	bf23      	ittte	cs
   b54d2:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b54d4:	1949      	addcs	r1, r1, r5
   b54d6:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b54da:	2600      	movcc	r6, #0
   b54dc:	bf38      	it	cc
   b54de:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b54e0:	f002 fe7e 	bl	b81e0 <os_mutex_recursive_unlock>
        }
   b54e4:	4630      	mov	r0, r6
   b54e6:	4639      	mov	r1, r7
   b54e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54ea <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b54ea:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b54ec:	2128      	movs	r1, #40	; 0x28
   b54ee:	f7ff ffe5 	bl	b54bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b54f2:	bd08      	pop	{r3, pc}

000b54f4 <_ZNK17currentStatusData17get_lastCountTimeEv>:
time_t currentStatusData::get_lastCountTime() const {
   b54f4:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(CurrentData, lastCountTime));
   b54f6:	2138      	movs	r1, #56	; 0x38
   b54f8:	f7ff ffe0 	bl	b54bc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b54fc:	bd08      	pop	{r3, pc}

000b54fe <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b54fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5500:	4604      	mov	r4, r0
   b5502:	3004      	adds	r0, #4
   b5504:	460d      	mov	r5, r1
   b5506:	461e      	mov	r6, r3
   b5508:	4617      	mov	r7, r2
   b550a:	f7ff fdb7 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b550e:	68e3      	ldr	r3, [r4, #12]
   b5510:	3b08      	subs	r3, #8
   b5512:	42ab      	cmp	r3, r5
   b5514:	d312      	bcc.n	b553c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5516:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5518:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b551a:	5958      	ldr	r0, [r3, r5]
   b551c:	6851      	ldr	r1, [r2, #4]
   b551e:	42b1      	cmp	r1, r6
   b5520:	bf08      	it	eq
   b5522:	42b8      	cmpeq	r0, r7
   b5524:	d00a      	beq.n	b553c <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5526:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5528:	4620      	mov	r0, r4
                        *(T *)p = value;
   b552a:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b552c:	68a5      	ldr	r5, [r4, #8]
   b552e:	f002 fdbd 	bl	b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5532:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5534:	6823      	ldr	r3, [r4, #0]
   b5536:	4620      	mov	r0, r4
   b5538:	691b      	ldr	r3, [r3, #16]
   b553a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b553c:	6860      	ldr	r0, [r4, #4]
        }
   b553e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5542:	f002 be4d 	b.w	b81e0 <os_mutex_recursive_unlock>

000b5546 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5546:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5548:	2128      	movs	r1, #40	; 0x28
   b554a:	f7ff ffd8 	bl	b54fe <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b554e:	bd08      	pop	{r3, pc}

000b5550 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5550:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5552:	2138      	movs	r1, #56	; 0x38
   b5554:	f7ff ffd3 	bl	b54fe <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5558:	bd08      	pop	{r3, pc}

000b555a <_ZN17currentStatusData22set_alertTimestampNodeEx>:

time_t currentStatusData::get_alertTimestampNode() const {
    return getValue<time_t>(offsetof(CurrentData, alertTimestampNode));
}

void currentStatusData::set_alertTimestampNode(time_t value) {
   b555a:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b555c:	2148      	movs	r1, #72	; 0x48
   b555e:	f7ff ffce 	bl	b54fe <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5562:	bd08      	pop	{r3, pc}

000b5564 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b5564:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b5566:	4917      	ldr	r1, [pc, #92]	; (b55c4 <_Z15resetEverythingv+0x60>)
   b5568:	4817      	ldr	r0, [pc, #92]	; (b55c8 <_Z15resetEverythingv+0x64>)
   b556a:	f7fe fdff 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b556e:	f7ff fe29 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5572:	2100      	movs	r1, #0
   b5574:	f7ff feef 	bl	b5356 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5578:	f7ff fe24 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b557c:	2100      	movs	r1, #0
   b557e:	f7ff fee4 	bl	b534a <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b5582:	f7ff fe1f 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5586:	4604      	mov	r4, r0
   b5588:	f005 ffa1 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b558c:	4602      	mov	r2, r0
   b558e:	17c3      	asrs	r3, r0, #31
   b5590:	4620      	mov	r0, r4
   b5592:	f7ff ffdd 	bl	b5550 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_alertCodeNode(0);
   b5596:	f7ff fe15 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b559a:	2100      	movs	r1, #0
   b559c:	f7ff ff42 	bl	b5424 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(Time.now());
   b55a0:	f7ff fe10 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b55a4:	4604      	mov	r4, r0
   b55a6:	f005 ff92 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b55aa:	4602      	mov	r2, r0
   b55ac:	17c3      	asrs	r3, r0, #31
   b55ae:	4620      	mov	r0, r4
   b55b0:	f7ff ffd3 	bl	b555a <_ZN17currentStatusData22set_alertTimestampNodeEx>
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b55b4:	f7ff fdb6 	bl	b5124 <_ZN13sysStatusData8instanceEv>
}
   b55b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b55bc:	2100      	movs	r1, #0
   b55be:	f7ff bf1f 	b.w	b5400 <_ZN13sysStatusData14set_resetCountEh>
   b55c2:	bf00      	nop
   b55c4:	000bcef8 	.word	0x000bcef8
   b55c8:	2003e654 	.word	0x2003e654

000b55cc <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b55cc:	4b08      	ldr	r3, [pc, #32]	; (b55f0 <_GLOBAL__sub_I_fram+0x24>)
   b55ce:	2201      	movs	r2, #1

void currentStatusData::logData(const char *msg) {
    Log.info("Current Structure values - %d, %d, %d, %4.2f", currentData.deviceID, currentData.nodeNumber, currentData.internalTempC, currentData.stateOfCharge);
}
   b55d0:	b510      	push	{r4, lr}
   b55d2:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b55d4:	f006 f9fc 	bl	bb9d0 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b55d8:	4c06      	ldr	r4, [pc, #24]	; (b55f4 <_GLOBAL__sub_I_fram+0x28>)
   b55da:	4601      	mov	r1, r0
   b55dc:	2300      	movs	r3, #0
   b55de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b55e2:	4620      	mov	r0, r4
   b55e4:	f001 f97a 	bl	b68dc <_ZN6MB85RCC1ER7TwoWireji>
   b55e8:	4b03      	ldr	r3, [pc, #12]	; (b55f8 <_GLOBAL__sub_I_fram+0x2c>)
   b55ea:	6023      	str	r3, [r4, #0]
}
   b55ec:	bd10      	pop	{r4, pc}
   b55ee:	bf00      	nop
   b55f0:	2003e378 	.word	0x2003e378
   b55f4:	2003e384 	.word	0x2003e384
   b55f8:	000bcf24 	.word	0x000bcf24

000b55fc <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b55fc:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b55fe:	4913      	ldr	r1, [pc, #76]	; (b564c <_Z18initializePinModesv+0x50>)
   b5600:	4813      	ldr	r0, [pc, #76]	; (b5650 <_Z18initializePinModesv+0x54>)
   b5602:	f7fe fdb3 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5606:	2102      	movs	r1, #2
   b5608:	2004      	movs	r0, #4
   b560a:	f006 f95f 	bl	bb8cc <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b560e:	2100      	movs	r1, #0
   b5610:	2008      	movs	r0, #8
   b5612:	f006 f95b 	bl	bb8cc <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5616:	2101      	movs	r1, #1
   b5618:	2007      	movs	r0, #7
   b561a:	f006 f957 	bl	bb8cc <pinMode>
    pinMode(INT_PIN, INPUT);
   b561e:	2100      	movs	r1, #0
   b5620:	2012      	movs	r0, #18
   b5622:	f006 f953 	bl	bb8cc <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b5626:	2101      	movs	r1, #1
   b5628:	2011      	movs	r0, #17
   b562a:	f006 f94f 	bl	bb8cc <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b562e:	2101      	movs	r1, #1
   b5630:	2010      	movs	r0, #16
   b5632:	f006 f94b 	bl	bb8cc <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b5636:	2100      	movs	r1, #0
   b5638:	2010      	movs	r0, #16
   b563a:	f006 f958 	bl	bb8ee <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b563e:	2100      	movs	r1, #0
   b5640:	2011      	movs	r0, #17
   b5642:	f006 f954 	bl	bb8ee <digitalWrite>
    return true;
}
   b5646:	2001      	movs	r0, #1
   b5648:	bd08      	pop	{r3, pc}
   b564a:	bf00      	nop
   b564c:	000bcf90 	.word	0x000bcf90
   b5650:	2003e654 	.word	0x2003e654

000b5654 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b5654:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5656:	4918      	ldr	r1, [pc, #96]	; (b56b8 <_Z18initializePowerCfgv+0x64>)
   b5658:	4818      	ldr	r0, [pc, #96]	; (b56bc <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b565a:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b565c:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b565e:	f7fe fd85 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5662:	4622      	mov	r2, r4
   b5664:	2100      	movs	r1, #0
   b5666:	4668      	mov	r0, sp
   b5668:	f006 ff70 	bl	bc54c <memset>
   b566c:	4622      	mov	r2, r4
   b566e:	2100      	movs	r1, #0
   b5670:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5674:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b5678:	f006 ff68 	bl	bc54c <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b567c:	2100      	movs	r1, #0
   b567e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5682:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5686:	f003 f831 	bl	b86ec <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b568a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b568e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5692:	4b0b      	ldr	r3, [pc, #44]	; (b56c0 <_Z18initializePowerCfgv+0x6c>)
   b5694:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5696:	f241 0370 	movw	r3, #4208	; 0x1070
   b569a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b569e:	9b00      	ldr	r3, [sp, #0]
   b56a0:	2100      	movs	r1, #0
   b56a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b56a6:	4668      	mov	r0, sp
   b56a8:	9300      	str	r3, [sp, #0]
   b56aa:	f003 f81f 	bl	b86ec <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b56ae:	3800      	subs	r0, #0
   b56b0:	bf18      	it	ne
   b56b2:	2001      	movne	r0, #1
   b56b4:	b010      	add	sp, #64	; 0x40
   b56b6:	bd10      	pop	{r4, pc}
   b56b8:	000bcfa9 	.word	0x000bcfa9
   b56bc:	2003e654 	.word	0x2003e654
   b56c0:	03840384 	.word	0x03840384

000b56c4 <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b56c4:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b56c6:	4908      	ldr	r1, [pc, #32]	; (b56e8 <_Z20setNodeConfigurationv+0x24>)
   b56c8:	4808      	ldr	r0, [pc, #32]	; (b56ec <_Z20setNodeConfigurationv+0x28>)
   b56ca:	f7fe fd4f 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b56ce:	f7ff fd29 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b56d2:	2101      	movs	r1, #1
   b56d4:	f7ff feec 	bl	b54b0 <_ZN13sysStatusData14set_sensorTypeEb>
  sysStatus.set_deviceID(32148);
   b56d8:	f7ff fd24 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b56dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_deviceID(32148);
   b56e0:	f647 5194 	movw	r1, #32148	; 0x7d94
   b56e4:	f7ff be19 	b.w	b531a <_ZN13sysStatusData12set_deviceIDEt>
   b56e8:	000bcfd0 	.word	0x000bcfd0
   b56ec:	2003e654 	.word	0x2003e654

000b56f0 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b56f0:	4770      	bx	lr

000b56f2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b56f2:	6a00      	ldr	r0, [r0, #32]
   b56f4:	6803      	ldr	r3, [r0, #0]
   b56f6:	68db      	ldr	r3, [r3, #12]
   b56f8:	4718      	bx	r3
	...

000b56fc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b56fc:	4b0a      	ldr	r3, [pc, #40]	; (b5728 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b56fe:	b510      	push	{r4, lr}
   b5700:	4604      	mov	r4, r0
   b5702:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b5704:	f004 fa2c 	bl	b9b60 <_ZN5spark10LogManager8instanceEv>
   b5708:	4621      	mov	r1, r4
   b570a:	f004 fc64 	bl	b9fd6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b570e:	f005 ffc5 	bl	bb69c <_Z16_fetch_usbserialv>
   b5712:	f005 ffb5 	bl	bb680 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b5716:	4620      	mov	r0, r4
   b5718:	4b04      	ldr	r3, [pc, #16]	; (b572c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b571a:	f840 3b04 	str.w	r3, [r0], #4
   b571e:	f004 faf5 	bl	b9d0c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b5722:	4620      	mov	r0, r4
   b5724:	bd10      	pop	{r4, pc}
   b5726:	bf00      	nop
   b5728:	000bd060 	.word	0x000bd060
   b572c:	000bd048 	.word	0x000bd048

000b5730 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b5730:	b510      	push	{r4, lr}
   b5732:	4604      	mov	r4, r0
    }
   b5734:	f7ff ffe2 	bl	b56fc <_ZN5spark16SerialLogHandlerD1Ev>
   b5738:	4620      	mov	r0, r4
   b573a:	2124      	movs	r1, #36	; 0x24
   b573c:	f7fe fcaf 	bl	b409e <_ZdlPvj>
   b5740:	4620      	mov	r0, r4
   b5742:	bd10      	pop	{r4, pc}

000b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5744:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5746:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5748:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b574a:	b17c      	cbz	r4, b576c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b574c:	6863      	ldr	r3, [r4, #4]
   b574e:	3b01      	subs	r3, #1
   b5750:	6063      	str	r3, [r4, #4]
   b5752:	b95b      	cbnz	r3, b576c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5754:	6823      	ldr	r3, [r4, #0]
   b5756:	4620      	mov	r0, r4
   b5758:	689b      	ldr	r3, [r3, #8]
   b575a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b575c:	68a3      	ldr	r3, [r4, #8]
   b575e:	3b01      	subs	r3, #1
   b5760:	60a3      	str	r3, [r4, #8]
   b5762:	b91b      	cbnz	r3, b576c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5764:	6823      	ldr	r3, [r4, #0]
   b5766:	4620      	mov	r0, r4
   b5768:	68db      	ldr	r3, [r3, #12]
   b576a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b576c:	4628      	mov	r0, r5
   b576e:	bd38      	pop	{r3, r4, r5, pc}

000b5770 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   b5770:	b510      	push	{r4, lr}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5772:	492a      	ldr	r1, [pc, #168]	; (b581c <_Z15setLowPowerMode6String+0xac>)
   b5774:	b094      	sub	sp, #80	; 0x50
   b5776:	4604      	mov	r4, r0
   b5778:	f005 fc55 	bl	bb026 <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b577c:	b158      	cbz	r0, b5796 <_Z15setLowPowerMode6String+0x26>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b577e:	4620      	mov	r0, r4
   b5780:	4926      	ldr	r1, [pc, #152]	; (b581c <_Z15setLowPowerMode6String+0xac>)
   b5782:	f005 fc50 	bl	bb026 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   b5786:	4604      	mov	r4, r0
   b5788:	b968      	cbnz	r0, b57a6 <_Z15setLowPowerMode6String+0x36>
      sysStatus.set_frequencyMinutes(12);
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.set_lowPowerMode(false);
   b578a:	f7ff fccb 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b578e:	4621      	mov	r1, r4
   b5790:	f7ff fe88 	bl	b54a4 <_ZN13sysStatusData16set_lowPowerModeEb>
   b5794:	e01e      	b.n	b57d4 <_Z15setLowPowerMode6String+0x64>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5796:	4922      	ldr	r1, [pc, #136]	; (b5820 <_Z15setLowPowerMode6String+0xb0>)
   b5798:	4620      	mov	r0, r4
   b579a:	f005 fc44 	bl	bb026 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   b579e:	2800      	cmp	r0, #0
   b57a0:	d1ed      	bne.n	b577e <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   b57a2:	b014      	add	sp, #80	; 0x50
   b57a4:	bd10      	pop	{r4, pc}
    sysStatus.set_lowPowerMode(true);
   b57a6:	f7ff fcbd 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b57aa:	2101      	movs	r1, #1
   b57ac:	f7ff fe7a 	bl	b54a4 <_ZN13sysStatusData16set_lowPowerModeEb>
    if (sysStatus.get_frequencyMinutes() < 12 ) {                          // Need to increase reporting frequency to at least 12 mins for low power
   b57b0:	f7ff fcb8 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b57b4:	f7ff fd84 	bl	b52c0 <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b57b8:	280b      	cmp	r0, #11
   b57ba:	d80b      	bhi.n	b57d4 <_Z15setLowPowerMode6String+0x64>
      Log.info("Increasing reporting frequency to 12 minutes");
   b57bc:	4919      	ldr	r1, [pc, #100]	; (b5824 <_Z15setLowPowerMode6String+0xb4>)
   b57be:	481a      	ldr	r0, [pc, #104]	; (b5828 <_Z15setLowPowerMode6String+0xb8>)
   b57c0:	f7fe fcd4 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.set_frequencyMinutes(12);
   b57c4:	f7ff fcae 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b57c8:	210c      	movs	r1, #12
   b57ca:	f7ff fdb8 	bl	b533e <_ZN13sysStatusData20set_frequencyMinutesEt>
      frequencyUpdated = true;
   b57ce:	4b17      	ldr	r3, [pc, #92]	; (b582c <_Z15setLowPowerMode6String+0xbc>)
   b57d0:	2201      	movs	r2, #1
   b57d2:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.get_lowPowerMode()) ? "yes" : "no");
   b57d4:	f7ff fca6 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b57d8:	f7ff fe3c 	bl	b5454 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b57dc:	4914      	ldr	r1, [pc, #80]	; (b5830 <_Z15setLowPowerMode6String+0xc0>)
   b57de:	4b15      	ldr	r3, [pc, #84]	; (b5834 <_Z15setLowPowerMode6String+0xc4>)
   b57e0:	4a15      	ldr	r2, [pc, #84]	; (b5838 <_Z15setLowPowerMode6String+0xc8>)
   b57e2:	2800      	cmp	r0, #0
   b57e4:	bf18      	it	ne
   b57e6:	460b      	movne	r3, r1
   b57e8:	2140      	movs	r1, #64	; 0x40
   b57ea:	a804      	add	r0, sp, #16
   b57ec:	f003 f842 	bl	b8874 <snprintf>
  Log.info(data);
   b57f0:	480d      	ldr	r0, [pc, #52]	; (b5828 <_Z15setLowPowerMode6String+0xb8>)
   b57f2:	a904      	add	r1, sp, #16
   b57f4:	f7fe fcba 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b57f8:	f002 ff94 	bl	b8724 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   b57fc:	b160      	cbz	r0, b5818 <_Z15setLowPowerMode6String+0xa8>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b57fe:	4b0f      	ldr	r3, [pc, #60]	; (b583c <_Z15setLowPowerMode6String+0xcc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5800:	490f      	ldr	r1, [pc, #60]	; (b5840 <_Z15setLowPowerMode6String+0xd0>)
   b5802:	781b      	ldrb	r3, [r3, #0]
   b5804:	f88d 3000 	strb.w	r3, [sp]
   b5808:	a802      	add	r0, sp, #8
   b580a:	233c      	movs	r3, #60	; 0x3c
   b580c:	aa04      	add	r2, sp, #16
   b580e:	f003 fb29 	bl	b8e64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5812:	a803      	add	r0, sp, #12
   b5814:	f7ff ff96 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   b5818:	2001      	movs	r0, #1
   b581a:	e7c2      	b.n	b57a2 <_Z15setLowPowerMode6String+0x32>
   b581c:	000bd0b4 	.word	0x000bd0b4
   b5820:	000bca64 	.word	0x000bca64
   b5824:	000bcff3 	.word	0x000bcff3
   b5828:	2003e654 	.word	0x2003e654
   b582c:	2003e3a1 	.word	0x2003e3a1
   b5830:	000bcfec 	.word	0x000bcfec
   b5834:	000bcff0 	.word	0x000bcff0
   b5838:	000bd020 	.word	0x000bd020
   b583c:	2003e3a0 	.word	0x2003e3a0
   b5840:	000bd03a 	.word	0x000bd03a

000b5844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5844:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5846:	e9d0 5300 	ldrd	r5, r3, [r0]
   b584a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b584c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b584e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5852:	42ae      	cmp	r6, r5
   b5854:	d004      	beq.n	b5860 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5856:	4628      	mov	r0, r5
   b5858:	f005 fb44 	bl	baee4 <_ZN6StringD1Ev>
   b585c:	3514      	adds	r5, #20
   b585e:	e7f8      	b.n	b5852 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5860:	6820      	ldr	r0, [r4, #0]
   b5862:	f002 ffef 	bl	b8844 <free>
    AllocatorT::free(data_);
}
   b5866:	4620      	mov	r0, r4
   b5868:	bd70      	pop	{r4, r5, r6, pc}

000b586a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b586a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b586e:	4604      	mov	r4, r0
   b5870:	460d      	mov	r5, r1
   b5872:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5874:	d916      	bls.n	b58a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5876:	4290      	cmp	r0, r2
   b5878:	d215      	bcs.n	b58a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b587a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b587e:	1a75      	subs	r5, r6, r1
   b5880:	f1a1 0714 	sub.w	r7, r1, #20
   b5884:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5886:	42b7      	cmp	r7, r6
   b5888:	d01c      	beq.n	b58c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b588a:	b12c      	cbz	r4, b5898 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b588c:	4631      	mov	r1, r6
   b588e:	4620      	mov	r0, r4
   b5890:	f005 fba4 	bl	bafdc <_ZN6StringC1EOS_>
   b5894:	7c33      	ldrb	r3, [r6, #16]
   b5896:	7423      	strb	r3, [r4, #16]
   b5898:	4630      	mov	r0, r6
   b589a:	f005 fb23 	bl	baee4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b589e:	3e14      	subs	r6, #20
   b58a0:	3c14      	subs	r4, #20
   b58a2:	e7f0      	b.n	b5886 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b58a4:	d00e      	beq.n	b58c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b58a6:	42b5      	cmp	r5, r6
   b58a8:	d00c      	beq.n	b58c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b58aa:	b12c      	cbz	r4, b58b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b58ac:	4629      	mov	r1, r5
   b58ae:	4620      	mov	r0, r4
   b58b0:	f005 fb94 	bl	bafdc <_ZN6StringC1EOS_>
   b58b4:	7c2b      	ldrb	r3, [r5, #16]
   b58b6:	7423      	strb	r3, [r4, #16]
   b58b8:	4628      	mov	r0, r5
   b58ba:	f005 fb13 	bl	baee4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b58be:	3514      	adds	r5, #20
   b58c0:	3414      	adds	r4, #20
   b58c2:	e7f0      	b.n	b58a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b58c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b58c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b58ca:	2300      	movs	r3, #0
   b58cc:	e9c0 3300 	strd	r3, r3, [r0]
   b58d0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b58d2:	684f      	ldr	r7, [r1, #4]
   b58d4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b58d6:	4604      	mov	r4, r0
   b58d8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b58da:	dd23      	ble.n	b5924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b58dc:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b58e0:	fb08 f007 	mul.w	r0, r8, r7
   b58e4:	f002 ffa6 	bl	b8834 <malloc>
            if (!d) {
   b58e8:	4605      	mov	r5, r0
   b58ea:	b1d8      	cbz	r0, b5924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b58ec:	e9d4 1200 	ldrd	r1, r2, [r4]
   b58f0:	fb08 1202 	mla	r2, r8, r2, r1
   b58f4:	f7ff ffb9 	bl	b586a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b58f8:	6820      	ldr	r0, [r4, #0]
   b58fa:	f002 ffa3 	bl	b8844 <free>
        data_ = d;
   b58fe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5900:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5902:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5906:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b590a:	45b8      	cmp	r8, r7
   b590c:	d008      	beq.n	b5920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b590e:	4639      	mov	r1, r7
   b5910:	4628      	mov	r0, r5
   b5912:	f005 fb7d 	bl	bb010 <_ZN6StringC1ERKS_>
   b5916:	7c3b      	ldrb	r3, [r7, #16]
   b5918:	742b      	strb	r3, [r5, #16]
   b591a:	3714      	adds	r7, #20
   b591c:	3514      	adds	r5, #20
   b591e:	e7f4      	b.n	b590a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b5920:	6873      	ldr	r3, [r6, #4]
   b5922:	6063      	str	r3, [r4, #4]
}
   b5924:	4620      	mov	r0, r4
   b5926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b592c <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b592c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b592e:	4b27      	ldr	r3, [pc, #156]	; (b59cc <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b5930:	4a27      	ldr	r2, [pc, #156]	; (b59d0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b5932:	2501      	movs	r5, #1
   b5934:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5936:	4b27      	ldr	r3, [pc, #156]	; (b59d4 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5938:	2400      	movs	r4, #0
   b593a:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b593c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b593e:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5942:	2002      	movs	r0, #2
   b5944:	f002 fe7e 	bl	b8644 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b5948:	4621      	mov	r1, r4
   b594a:	4628      	mov	r0, r5
   b594c:	f002 fe92 	bl	b8674 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5950:	4629      	mov	r1, r5
   b5952:	2004      	movs	r0, #4
   b5954:	f002 fc54 	bl	b8200 <HAL_Feature_Set>
        capacity_(0) {
   b5958:	e9cd 4400 	strd	r4, r4, [sp]
   b595c:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b595e:	f005 fe9d 	bl	bb69c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5962:	4c1d      	ldr	r4, [pc, #116]	; (b59d8 <_GLOBAL__sub_I_SystemMode+0xac>)
   b5964:	4605      	mov	r5, r0
   b5966:	4669      	mov	r1, sp
   b5968:	a803      	add	r0, sp, #12
   b596a:	f7ff ffac 	bl	b58c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b596e:	4626      	mov	r6, r4
        stream_(&stream) {
   b5970:	a903      	add	r1, sp, #12
   b5972:	a806      	add	r0, sp, #24
   b5974:	f7ff ffa7 	bl	b58c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5978:	4b18      	ldr	r3, [pc, #96]	; (b59dc <_GLOBAL__sub_I_SystemMode+0xb0>)
   b597a:	f846 3b04 	str.w	r3, [r6], #4
   b597e:	a906      	add	r1, sp, #24
   b5980:	a809      	add	r0, sp, #36	; 0x24
   b5982:	f7ff ffa0 	bl	b58c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5986:	aa09      	add	r2, sp, #36	; 0x24
   b5988:	211e      	movs	r1, #30
   b598a:	4630      	mov	r0, r6
   b598c:	f004 fc06 	bl	ba19c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5990:	a809      	add	r0, sp, #36	; 0x24
   b5992:	f7ff ff57 	bl	b5844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5996:	a806      	add	r0, sp, #24
   b5998:	f7ff ff54 	bl	b5844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b599c:	4b10      	ldr	r3, [pc, #64]	; (b59e0 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b599e:	6023      	str	r3, [r4, #0]
   b59a0:	6225      	str	r5, [r4, #32]
   b59a2:	a803      	add	r0, sp, #12
   b59a4:	f7ff ff4e 	bl	b5844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b59a8:	4b0e      	ldr	r3, [pc, #56]	; (b59e4 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b59aa:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b59ac:	f005 fe76 	bl	bb69c <_Z16_fetch_usbserialv>
   b59b0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59b4:	f005 fe60 	bl	bb678 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b59b8:	f004 f8d2 	bl	b9b60 <_ZN5spark10LogManager8instanceEv>
   b59bc:	4621      	mov	r1, r4
   b59be:	f004 fac3 	bl	b9f48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b59c2:	4668      	mov	r0, sp
   b59c4:	f7ff ff3e 	bl	b5844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b59c8:	b00c      	add	sp, #48	; 0x30
   b59ca:	bd70      	pop	{r4, r5, r6, pc}
   b59cc:	2003e3a0 	.word	0x2003e3a0
   b59d0:	ffff0000 	.word	0xffff0000
   b59d4:	2003e394 	.word	0x2003e394
   b59d8:	2003e3a4 	.word	0x2003e3a4
   b59dc:	000bd048 	.word	0x000bd048
   b59e0:	000bd858 	.word	0x000bd858
   b59e4:	000bd060 	.word	0x000bd060

000b59e8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b59e8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b59ea:	6803      	ldr	r3, [r0, #0]
   b59ec:	2b2f      	cmp	r3, #47	; 0x2f
{
   b59ee:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b59f0:	d904      	bls.n	b59fc <nrf_gpio_pin_port_decode+0x14>
   b59f2:	4a07      	ldr	r2, [pc, #28]	; (b5a10 <nrf_gpio_pin_port_decode+0x28>)
   b59f4:	4907      	ldr	r1, [pc, #28]	; (b5a14 <nrf_gpio_pin_port_decode+0x2c>)
   b59f6:	200a      	movs	r0, #10
   b59f8:	f002 fdea 	bl	b85d0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b59fc:	6823      	ldr	r3, [r4, #0]
   b59fe:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5a00:	bf83      	ittte	hi
   b5a02:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b5a06:	4804      	ldrhi	r0, [pc, #16]	; (b5a18 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5a08:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b5a0a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b5a0e:	bd10      	pop	{r4, pc}
   b5a10:	000b8221 	.word	0x000b8221
   b5a14:	000bd0e9 	.word	0x000bd0e9
   b5a18:	50000300 	.word	0x50000300

000b5a1c <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b5a1c:	ee07 0a90 	vmov	s15, r0
   b5a20:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5a48 <_Z17tmp36TemperatureCi+0x2c>
   b5a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5a28:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5a2c:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5a4c <_Z17tmp36TemperatureCi+0x30>
   b5a30:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5a34:	eddf 7a06 	vldr	s15, [pc, #24]	; b5a50 <_Z17tmp36TemperatureCi+0x34>
   b5a38:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b5a3c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5a40:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5a44:	4770      	bx	lr
   b5a46:	bf00      	nop
   b5a48:	454e4000 	.word	0x454e4000
   b5a4c:	457ff000 	.word	0x457ff000
   b5a50:	43fa0000 	.word	0x43fa0000

000b5a54 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b5a54:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b5a56:	2101      	movs	r1, #1
   b5a58:	a801      	add	r0, sp, #4
   b5a5a:	f004 ff52 	bl	ba902 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5a5e:	f7ff fbb1 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5a62:	f7ff fc9a 	bl	b539a <_ZNK17currentStatusData17get_internalTempCEv>
   b5a66:	f7ff fbad 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5a6a:	f7ff fc96 	bl	b539a <_ZNK17currentStatusData17get_internalTempCEv>
   b5a6e:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5a70:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5a72:	d90d      	bls.n	b5a90 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5a74:	f004 ffd8 	bl	baa28 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b5a78:	f7ff fba4 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5a7c:	2101      	movs	r1, #1
   b5a7e:	f7ff fccb 	bl	b5418 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b5a82:	2400      	movs	r4, #0
  PMIC pmic(true);
   b5a84:	a801      	add	r0, sp, #4
   b5a86:	f004 ff4b 	bl	ba920 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b5a8a:	4620      	mov	r0, r4
   b5a8c:	b002      	add	sp, #8
   b5a8e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b5a90:	f004 ffaf 	bl	ba9f2 <_ZN4PMIC14enableChargingEv>
    return true;
   b5a94:	2401      	movs	r4, #1
   b5a96:	e7f5      	b.n	b5a84 <_Z16isItSafeToChargev+0x30>

000b5a98 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b5a98:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5a9a:	4d19      	ldr	r5, [pc, #100]	; (b5b00 <_Z17getSignalStrengthv+0x68>)
   b5a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b5a9e:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5aa0:	ac0c      	add	r4, sp, #48	; 0x30
   b5aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5aa8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5aac:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b5ab0:	4914      	ldr	r1, [pc, #80]	; (b5b04 <_Z17getSignalStrengthv+0x6c>)
   b5ab2:	a804      	add	r0, sp, #16
   b5ab4:	f002 ffc2 	bl	b8a3c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b5ab8:	a804      	add	r0, sp, #16
   b5aba:	f003 f802 	bl	b8ac2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b5abe:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b5ac0:	a804      	add	r0, sp, #16
   b5ac2:	f003 f837 	bl	b8b34 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b5ac6:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b5ac8:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b5acc:	f003 f862 	bl	b8b94 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5ad0:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b5ad2:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5ad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b5ada:	f006 f96d 	bl	bbdb8 <__aeabi_f2d>
   b5ade:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5ae2:	4628      	mov	r0, r5
   b5ae4:	f006 f968 	bl	bbdb8 <__aeabi_f2d>
   b5ae8:	e9cd 0100 	strd	r0, r1, [sp]
   b5aec:	4a06      	ldr	r2, [pc, #24]	; (b5b08 <_Z17getSignalStrengthv+0x70>)
   b5aee:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b5af2:	4806      	ldr	r0, [pc, #24]	; (b5b0c <_Z17getSignalStrengthv+0x74>)
   b5af4:	2140      	movs	r1, #64	; 0x40
   b5af6:	f002 febd 	bl	b8874 <snprintf>
}
   b5afa:	b017      	add	sp, #92	; 0x5c
   b5afc:	bd30      	pop	{r4, r5, pc}
   b5afe:	bf00      	nop
   b5b00:	000bd164 	.word	0x000bd164
   b5b04:	2003e610 	.word	0x2003e610
   b5b08:	000bd10d 	.word	0x000bd10d
   b5b0c:	2003df5c 	.word	0x2003df5c

000b5b10 <_Z11recordCountv>:
 * is the same regardless.  The sensor will trigger an interrupt, which will set a flag. In the main loop
 * that flag will call this function which will determine if this event should "count" as a visitor.
 * 
 */
void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b5b10:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5b12:	4e4e      	ldr	r6, [pc, #312]	; (b5c4c <_Z11recordCountv+0x13c>)
   b5b14:	4c4e      	ldr	r4, [pc, #312]	; (b5c50 <_Z11recordCountv+0x140>)
   b5b16:	7833      	ldrb	r3, [r6, #0]
   b5b18:	f3bf 8f5b 	dmb	ish
   b5b1c:	f013 0f01 	tst.w	r3, #1
   b5b20:	b085      	sub	sp, #20
   b5b22:	d109      	bne.n	b5b38 <_Z11recordCountv+0x28>
   b5b24:	4630      	mov	r0, r6
   b5b26:	f7fe fac9 	bl	b40bc <__cxa_guard_acquire>
   b5b2a:	b128      	cbz	r0, b5b38 <_Z11recordCountv+0x28>
   b5b2c:	f002 fba8 	bl	b8280 <HAL_Pin_Map>
   b5b30:	6020      	str	r0, [r4, #0]
   b5b32:	4630      	mov	r0, r6
   b5b34:	f7fe fac7 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5b38:	4b46      	ldr	r3, [pc, #280]	; (b5c54 <_Z11recordCountv+0x144>)
   b5b3a:	881d      	ldrh	r5, [r3, #0]
   b5b3c:	6823      	ldr	r3, [r4, #0]
   b5b3e:	012d      	lsls	r5, r5, #4
   b5b40:	5d5b      	ldrb	r3, [r3, r5]
   b5b42:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5b44:	7833      	ldrb	r3, [r6, #0]
   b5b46:	f3bf 8f5b 	dmb	ish
   b5b4a:	07d9      	lsls	r1, r3, #31
   b5b4c:	d409      	bmi.n	b5b62 <_Z11recordCountv+0x52>
   b5b4e:	483f      	ldr	r0, [pc, #252]	; (b5c4c <_Z11recordCountv+0x13c>)
   b5b50:	f7fe fab4 	bl	b40bc <__cxa_guard_acquire>
   b5b54:	b128      	cbz	r0, b5b62 <_Z11recordCountv+0x52>
   b5b56:	f002 fb93 	bl	b8280 <HAL_Pin_Map>
   b5b5a:	6020      	str	r0, [r4, #0]
   b5b5c:	483b      	ldr	r0, [pc, #236]	; (b5c4c <_Z11recordCountv+0x13c>)
   b5b5e:	f7fe fab2 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5b62:	6823      	ldr	r3, [r4, #0]
   b5b64:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5b66:	a803      	add	r0, sp, #12
   b5b68:	785b      	ldrb	r3, [r3, #1]
   b5b6a:	f003 031f 	and.w	r3, r3, #31
   b5b6e:	433b      	orrs	r3, r7
   b5b70:	9303      	str	r3, [sp, #12]
   b5b72:	f7ff ff39 	bl	b59e8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b5b76:	9a03      	ldr	r2, [sp, #12]
   b5b78:	2301      	movs	r3, #1
   b5b7a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b5b7c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b5b80:	f7ff fb20 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5b84:	4607      	mov	r7, r0
   b5b86:	f005 fca2 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b5b8a:	4602      	mov	r2, r0
   b5b8c:	17c3      	asrs	r3, r0, #31
   b5b8e:	4638      	mov	r0, r7
   b5b90:	f7ff fcde 	bl	b5550 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b5b94:	f7ff fb16 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5b98:	4607      	mov	r7, r0
   b5b9a:	f7ff fb13 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5b9e:	f7ff fb94 	bl	b52ca <_ZNK17currentStatusData15get_hourlyCountEv>
   b5ba2:	3001      	adds	r0, #1
   b5ba4:	b281      	uxth	r1, r0
   b5ba6:	4638      	mov	r0, r7
   b5ba8:	f7ff fbcf 	bl	b534a <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b5bac:	f7ff fb0a 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5bb0:	4607      	mov	r7, r0
   b5bb2:	f7ff fb07 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5bb6:	f7ff fb8d 	bl	b52d4 <_ZNK17currentStatusData14get_dailyCountEv>
   b5bba:	3001      	adds	r0, #1
   b5bbc:	b281      	uxth	r1, r0
   b5bbe:	4638      	mov	r0, r7
   b5bc0:	f7ff fbc9 	bl	b5356 <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b5bc4:	f7ff fafe 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5bc8:	f7ff fb7f 	bl	b52ca <_ZNK17currentStatusData15get_hourlyCountEv>
   b5bcc:	9001      	str	r0, [sp, #4]
   b5bce:	f7ff faf9 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5bd2:	f7ff fb7f 	bl	b52d4 <_ZNK17currentStatusData14get_dailyCountEv>
   b5bd6:	9a01      	ldr	r2, [sp, #4]
   b5bd8:	491f      	ldr	r1, [pc, #124]	; (b5c58 <_Z11recordCountv+0x148>)
   b5bda:	4603      	mov	r3, r0
   b5bdc:	481f      	ldr	r0, [pc, #124]	; (b5c5c <_Z11recordCountv+0x14c>)
   b5bde:	f7fe fac5 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b5be2:	20c8      	movs	r0, #200	; 0xc8
   b5be4:	f002 fe9e 	bl	b8924 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5be8:	7833      	ldrb	r3, [r6, #0]
   b5bea:	f3bf 8f5b 	dmb	ish
   b5bee:	07da      	lsls	r2, r3, #31
   b5bf0:	d409      	bmi.n	b5c06 <_Z11recordCountv+0xf6>
   b5bf2:	4816      	ldr	r0, [pc, #88]	; (b5c4c <_Z11recordCountv+0x13c>)
   b5bf4:	f7fe fa62 	bl	b40bc <__cxa_guard_acquire>
   b5bf8:	b128      	cbz	r0, b5c06 <_Z11recordCountv+0xf6>
   b5bfa:	f002 fb41 	bl	b8280 <HAL_Pin_Map>
   b5bfe:	6020      	str	r0, [r4, #0]
   b5c00:	4812      	ldr	r0, [pc, #72]	; (b5c4c <_Z11recordCountv+0x13c>)
   b5c02:	f7fe fa60 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5c06:	6823      	ldr	r3, [r4, #0]
   b5c08:	5d5b      	ldrb	r3, [r3, r5]
   b5c0a:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5c0c:	7833      	ldrb	r3, [r6, #0]
   b5c0e:	f3bf 8f5b 	dmb	ish
   b5c12:	07db      	lsls	r3, r3, #31
   b5c14:	d409      	bmi.n	b5c2a <_Z11recordCountv+0x11a>
   b5c16:	480d      	ldr	r0, [pc, #52]	; (b5c4c <_Z11recordCountv+0x13c>)
   b5c18:	f7fe fa50 	bl	b40bc <__cxa_guard_acquire>
   b5c1c:	b128      	cbz	r0, b5c2a <_Z11recordCountv+0x11a>
   b5c1e:	f002 fb2f 	bl	b8280 <HAL_Pin_Map>
   b5c22:	6020      	str	r0, [r4, #0]
   b5c24:	4809      	ldr	r0, [pc, #36]	; (b5c4c <_Z11recordCountv+0x13c>)
   b5c26:	f7fe fa4e 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5c2a:	6823      	ldr	r3, [r4, #0]
   b5c2c:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5c2e:	a803      	add	r0, sp, #12
   b5c30:	786b      	ldrb	r3, [r5, #1]
   b5c32:	f003 031f 	and.w	r3, r3, #31
   b5c36:	433b      	orrs	r3, r7
   b5c38:	9303      	str	r3, [sp, #12]
   b5c3a:	f7ff fed5 	bl	b59e8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b5c3e:	9a03      	ldr	r2, [sp, #12]
   b5c40:	2301      	movs	r3, #1
   b5c42:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b5c44:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);
   b5c48:	b005      	add	sp, #20
   b5c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5c4c:	2003e3c8 	.word	0x2003e3c8
   b5c50:	2003e3cc 	.word	0x2003e3cc
   b5c54:	000bcfc4 	.word	0x000bcfc4
   b5c58:	000bd126 	.word	0x000bd126
   b5c5c:	2003e654 	.word	0x2003e654

000b5c60 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b5c60:	b530      	push	{r4, r5, lr}
   b5c62:	b085      	sub	sp, #20
   b5c64:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b5c66:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5c68:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b5c6a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b5c6c:	f002 fcd8 	bl	b8620 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5c70:	b990      	cbnz	r0, b5c98 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
    return get(src, val);
   b5c72:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b5c74:	b10c      	cbz	r4, b5c7a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b5c76:	6923      	ldr	r3, [r4, #16]
   b5c78:	b923      	cbnz	r3, b5c84 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b5c7a:	4a08      	ldr	r2, [pc, #32]	; (b5c9c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b5c7c:	4908      	ldr	r1, [pc, #32]	; (b5ca0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b5c7e:	200a      	movs	r0, #10
   b5c80:	f002 fca6 	bl	b85d0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5c84:	230c      	movs	r3, #12
   b5c86:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b5c8a:	2304      	movs	r3, #4
   b5c8c:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5c8e:	aa01      	add	r2, sp, #4
   b5c90:	6923      	ldr	r3, [r4, #16]
   b5c92:	2101      	movs	r1, #1
   b5c94:	4620      	mov	r0, r4
   b5c96:	4798      	blx	r3
}
   b5c98:	b005      	add	sp, #20
   b5c9a:	bd30      	pop	{r4, r5, pc}
   b5c9c:	000b8221 	.word	0x000b8221
   b5ca0:	000bc95d 	.word	0x000bc95d

000b5ca4 <_Z12batteryStatev>:
bool batteryState() {
   b5ca4:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b5ca6:	f7ff fa8d 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b5caa:	a901      	add	r1, sp, #4
   b5cac:	4604      	mov	r4, r0
   b5cae:	2007      	movs	r0, #7
   b5cb0:	f7ff ffd6 	bl	b5c60 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b5cb4:	1e01      	subs	r1, r0, #0
        return val;
   b5cb6:	bfa8      	it	ge
   b5cb8:	9901      	ldrge	r1, [sp, #4]
   b5cba:	4620      	mov	r0, r4
   b5cbc:	b2c9      	uxtb	r1, r1
   b5cbe:	f7ff fbab 	bl	b5418 <_ZN17currentStatusData16set_batteryStateEh>
  if (sysStatus.get_lowPowerMode()) {                                        // Need to take these steps if we are sleeping
   b5cc2:	f7ff fa2f 	bl	b5124 <_ZN13sysStatusData8instanceEv>
   b5cc6:	f7ff fbc5 	bl	b5454 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5cca:	b130      	cbz	r0, b5cda <_Z12batteryStatev+0x36>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b5ccc:	4817      	ldr	r0, [pc, #92]	; (b5d2c <_Z12batteryStatev+0x88>)
   b5cce:	f003 fac3 	bl	b9258 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b5cd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5cd6:	f002 fe25 	bl	b8924 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b5cda:	f7ff fa73 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5cde:	a901      	add	r1, sp, #4
   b5ce0:	4604      	mov	r4, r0
   b5ce2:	2003      	movs	r0, #3
   b5ce4:	f7ff ffbc 	bl	b5c60 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b5ce8:	b9e8      	cbnz	r0, b5d26 <_Z12batteryStatev+0x82>
   b5cea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b5cee:	ee07 3a90 	vmov	s15, r3
   b5cf2:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b5cf6:	ee17 0a90 	vmov	r0, s15
   b5cfa:	f006 f85d 	bl	bbdb8 <__aeabi_f2d>
   b5cfe:	ec41 0b10 	vmov	d0, r0, r1
   b5d02:	4620      	mov	r0, r4
   b5d04:	f7ff fa98 	bl	b5238 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b5d08:	f7ff fa5c 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5d0c:	f7ff fa74 	bl	b51f8 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5d10:	4b07      	ldr	r3, [pc, #28]	; (b5d30 <_Z12batteryStatev+0x8c>)
   b5d12:	ec51 0b10 	vmov	r0, r1, d0
   b5d16:	2200      	movs	r2, #0
   b5d18:	f006 fb36 	bl	bc388 <__aeabi_dcmpgt>
}
   b5d1c:	3800      	subs	r0, #0
   b5d1e:	bf18      	it	ne
   b5d20:	2001      	movne	r0, #1
   b5d22:	b002      	add	sp, #8
   b5d24:	bd10      	pop	{r4, pc}
            return -1.0f;
   b5d26:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5d2a:	e7e4      	b.n	b5cf6 <_Z12batteryStatev+0x52>
   b5d2c:	2003e3d0 	.word	0x2003e3d0
   b5d30:	404e0000 	.word	0x404e0000

000b5d34 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b5d34:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b5d36:	f7ff fa45 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5d3a:	4b14      	ldr	r3, [pc, #80]	; (b5d8c <_Z16takeMeasurementsv+0x58>)
   b5d3c:	4604      	mov	r4, r0
   b5d3e:	8818      	ldrh	r0, [r3, #0]
   b5d40:	f005 fe01 	bl	bb946 <analogRead>
   b5d44:	f7ff fe6a 	bl	b5a1c <_Z17tmp36TemperatureCi>
   b5d48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b5d4c:	4620      	mov	r0, r4
   b5d4e:	edcd 7a01 	vstr	s15, [sp, #4]
   b5d52:	f89d 1004 	ldrb.w	r1, [sp, #4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b5d56:	4c0e      	ldr	r4, [pc, #56]	; (b5d90 <_Z16takeMeasurementsv+0x5c>)
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b5d58:	f7ff fb58 	bl	b540c <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b5d5c:	f7ff fa32 	bl	b51c4 <_ZN17currentStatusData8instanceEv>
   b5d60:	f7ff fb1b 	bl	b539a <_ZNK17currentStatusData17get_internalTempCEv>
   b5d64:	4a0b      	ldr	r2, [pc, #44]	; (b5d94 <_Z16takeMeasurementsv+0x60>)
   b5d66:	4603      	mov	r3, r0
   b5d68:	2110      	movs	r1, #16
   b5d6a:	4620      	mov	r0, r4
   b5d6c:	f002 fd82 	bl	b8874 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   b5d70:	4909      	ldr	r1, [pc, #36]	; (b5d98 <_Z16takeMeasurementsv+0x64>)
   b5d72:	480a      	ldr	r0, [pc, #40]	; (b5d9c <_Z16takeMeasurementsv+0x68>)
   b5d74:	4622      	mov	r2, r4
   b5d76:	f7fe f9f9 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   b5d7a:	f7ff ff93 	bl	b5ca4 <_Z12batteryStatev>
    isItSafeToCharge();
   b5d7e:	f7ff fe69 	bl	b5a54 <_Z16isItSafeToChargev>
    getSignalStrength();
   b5d82:	f7ff fe89 	bl	b5a98 <_Z17getSignalStrengthv>
}
   b5d86:	2001      	movs	r0, #1
   b5d88:	b002      	add	sp, #8
   b5d8a:	bd10      	pop	{r4, pc}
   b5d8c:	000bcfce 	.word	0x000bcfce
   b5d90:	2003df4c 	.word	0x2003df4c
   b5d94:	000bd143 	.word	0x000bd143
   b5d98:	000bd148 	.word	0x000bd148
   b5d9c:	2003e654 	.word	0x2003e654

000b5da0 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b5da0:	4801      	ldr	r0, [pc, #4]	; (b5da8 <_GLOBAL__sub_I_batteryContext+0x8>)
   b5da2:	2100      	movs	r1, #0
   b5da4:	f003 ba14 	b.w	b91d0 <_ZN9FuelGaugeC1Eb>
   b5da8:	2003e3d0 	.word	0x2003e3d0

000b5dac <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b5dac:	4770      	bx	lr

000b5dae <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b5dae:	b510      	push	{r4, lr}
}
   b5db0:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b5db2:	4604      	mov	r4, r0
}
   b5db4:	f7fe f973 	bl	b409e <_ZdlPvj>
   b5db8:	4620      	mov	r0, r4
   b5dba:	bd10      	pop	{r4, pc}

000b5dbc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b5dbc:	b530      	push	{r4, r5, lr}
   b5dbe:	b085      	sub	sp, #20
   b5dc0:	4604      	mov	r4, r0
   b5dc2:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b5dc4:	b160      	cbz	r0, b5de0 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b5dc6:	6840      	ldr	r0, [r0, #4]
   b5dc8:	b150      	cbz	r0, b5de0 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b5dca:	6885      	ldr	r5, [r0, #8]
   b5dcc:	b145      	cbz	r5, b5de0 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b5dce:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b5dd2:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5dd6:	68c4      	ldr	r4, [r0, #12]
   b5dd8:	ab01      	add	r3, sp, #4
   b5dda:	466a      	mov	r2, sp
   b5ddc:	a902      	add	r1, sp, #8
   b5dde:	47a0      	blx	r4
    }
   b5de0:	b005      	add	sp, #20
   b5de2:	bd30      	pop	{r4, r5, pc}

000b5de4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5de4:	b530      	push	{r4, r5, lr}
   b5de6:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b5de8:	6800      	ldr	r0, [r0, #0]
   b5dea:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b5dec:	9301      	str	r3, [sp, #4]
   b5dee:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b5df2:	6883      	ldr	r3, [r0, #8]
   b5df4:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5df8:	b90b      	cbnz	r3, b5dfe <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b5dfa:	f005 fe75 	bl	bbae8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5dfe:	68c3      	ldr	r3, [r0, #12]
   b5e00:	aa01      	add	r2, sp, #4
   b5e02:	a902      	add	r1, sp, #8
   b5e04:	4798      	blx	r3
      }
   b5e06:	b005      	add	sp, #20
   b5e08:	bd30      	pop	{r4, r5, pc}

000b5e0a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b5e0a:	2a01      	cmp	r2, #1
   b5e0c:	d102      	bne.n	b5e14 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5e0e:	6001      	str	r1, [r0, #0]
      }
   b5e10:	2000      	movs	r0, #0
   b5e12:	4770      	bx	lr
	  switch (__op)
   b5e14:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5e16:	bf04      	itt	eq
   b5e18:	680b      	ldreq	r3, [r1, #0]
   b5e1a:	6003      	streq	r3, [r0, #0]
	      break;
   b5e1c:	e7f8      	b.n	b5e10 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b5e1e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5e1e:	6803      	ldr	r3, [r0, #0]
   b5e20:	6812      	ldr	r2, [r2, #0]
   b5e22:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5e26:	4718      	bx	r3

000b5e28 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5e28:	b510      	push	{r4, lr}
      if (_M_manager)
   b5e2a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5e2c:	4604      	mov	r4, r0
      if (_M_manager)
   b5e2e:	b113      	cbz	r3, b5e36 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5e30:	2203      	movs	r2, #3
   b5e32:	4601      	mov	r1, r0
   b5e34:	4798      	blx	r3
    }
   b5e36:	4620      	mov	r0, r4
   b5e38:	bd10      	pop	{r4, pc}

000b5e3a <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b5e3a:	b510      	push	{r4, lr}
            delete callableWrapper;
   b5e3c:	4604      	mov	r4, r0
   b5e3e:	b138      	cbz	r0, b5e50 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b5e40:	f7ff fff2 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
   b5e44:	4620      	mov	r0, r4
   b5e46:	2110      	movs	r1, #16
        };
   b5e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b5e4c:	f7fe b927 	b.w	b409e <_ZdlPvj>
        };
   b5e50:	bd10      	pop	{r4, pc}

000b5e52 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b5e52:	b510      	push	{r4, lr}
   b5e54:	4604      	mov	r4, r0
   b5e56:	b08a      	sub	sp, #40	; 0x28
   b5e58:	4608      	mov	r0, r1
    attr.flags = 0;
   b5e5a:	f04f 0c20 	mov.w	ip, #32
   b5e5e:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5e60:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b5e64:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5e68:	460b      	mov	r3, r1
   b5e6a:	aa02      	add	r2, sp, #8
   b5e6c:	6821      	ldr	r1, [r4, #0]
   b5e6e:	f002 fbbf 	bl	b85f0 <log_message_v>
}
   b5e72:	b00a      	add	sp, #40	; 0x28
   b5e74:	bd10      	pop	{r4, pc}

000b5e76 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b5e76:	b40e      	push	{r1, r2, r3}
   b5e78:	b503      	push	{r0, r1, lr}
   b5e7a:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b5e7c:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b5e7e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5e82:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b5e84:	f7ff ffe5 	bl	b5e52 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5e88:	b002      	add	sp, #8
   b5e8a:	f85d eb04 	ldr.w	lr, [sp], #4
   b5e8e:	b003      	add	sp, #12
   b5e90:	4770      	bx	lr

000b5e92 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5e92:	b40e      	push	{r1, r2, r3}
   b5e94:	b503      	push	{r0, r1, lr}
   b5e96:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b5e98:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5e9a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5e9e:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b5ea0:	f7ff ffd7 	bl	b5e52 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5ea4:	b002      	add	sp, #8
   b5ea6:	f85d eb04 	ldr.w	lr, [sp], #4
   b5eaa:	b003      	add	sp, #12
   b5eac:	4770      	bx	lr
	...

000b5eb0 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5eb0:	b510      	push	{r4, lr}
   b5eb2:	7202      	strb	r2, [r0, #8]
   b5eb4:	22ff      	movs	r2, #255	; 0xff
   b5eb6:	8142      	strh	r2, [r0, #10]
   b5eb8:	2200      	movs	r2, #0
   b5eba:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b5ebe:	6142      	str	r2, [r0, #20]
   b5ec0:	7602      	strb	r2, [r0, #24]
   b5ec2:	61c2      	str	r2, [r0, #28]
    instance = this;
   b5ec4:	4a02      	ldr	r2, [pc, #8]	; (b5ed0 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5ec6:	4c03      	ldr	r4, [pc, #12]	; (b5ed4 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b5ec8:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5eca:	e9c0 4100 	strd	r4, r1, [r0]
}
   b5ece:	bd10      	pop	{r4, pc}
   b5ed0:	2003e3dc 	.word	0x2003e3dc
   b5ed4:	000bd378 	.word	0x000bd378

000b5ed8 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b5ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5edc:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b5ee0:	4604      	mov	r4, r0
   b5ee2:	4689      	mov	r9, r1
   b5ee4:	4616      	mov	r6, r2
   b5ee6:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b5ee8:	f1b8 0f00 	cmp.w	r8, #0
   b5eec:	d002      	beq.n	b5ef4 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b5eee:	6840      	ldr	r0, [r0, #4]
   b5ef0:	f003 fa4c 	bl	b938c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5ef4:	7a21      	ldrb	r1, [r4, #8]
   b5ef6:	6860      	ldr	r0, [r4, #4]
   b5ef8:	f003 fa25 	bl	b9346 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b5efc:	6860      	ldr	r0, [r4, #4]
   b5efe:	6803      	ldr	r3, [r0, #0]
   b5f00:	4649      	mov	r1, r9
   b5f02:	689b      	ldr	r3, [r3, #8]
   b5f04:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b5f06:	6860      	ldr	r0, [r4, #4]
   b5f08:	2100      	movs	r1, #0
   b5f0a:	f003 fa3b 	bl	b9384 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b5f0e:	4605      	mov	r5, r0
   b5f10:	bb00      	cbnz	r0, b5f54 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5f12:	2301      	movs	r3, #1
   b5f14:	7a21      	ldrb	r1, [r4, #8]
   b5f16:	6860      	ldr	r0, [r4, #4]
   b5f18:	463a      	mov	r2, r7
   b5f1a:	f003 fa02 	bl	b9322 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b5f1e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5f20:	4603      	mov	r3, r0
        if (count == num) {
   b5f22:	d109      	bne.n	b5f38 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b5f24:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b5f26:	42be      	cmp	r6, r7
   b5f28:	d01c      	beq.n	b5f64 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b5f2a:	6860      	ldr	r0, [r4, #4]
   b5f2c:	6803      	ldr	r3, [r0, #0]
   b5f2e:	695b      	ldr	r3, [r3, #20]
   b5f30:	4798      	blx	r3
   b5f32:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b5f36:	e7f6      	b.n	b5f26 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b5f38:	490b      	ldr	r1, [pc, #44]	; (b5f68 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b5f3a:	480c      	ldr	r0, [pc, #48]	; (b5f6c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5f3c:	464a      	mov	r2, r9
   b5f3e:	f7ff ff9a 	bl	b5e76 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b5f42:	f1b8 0f00 	cmp.w	r8, #0
   b5f46:	d002      	beq.n	b5f4e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b5f48:	6860      	ldr	r0, [r4, #4]
   b5f4a:	f003 fa28 	bl	b939e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b5f4e:	4628      	mov	r0, r5
   b5f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b5f54:	4603      	mov	r3, r0
   b5f56:	4906      	ldr	r1, [pc, #24]	; (b5f70 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b5f58:	4804      	ldr	r0, [pc, #16]	; (b5f6c <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5f5a:	464a      	mov	r2, r9
   b5f5c:	f7ff ff8b 	bl	b5e76 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b5f60:	2500      	movs	r5, #0
   b5f62:	e7ee      	b.n	b5f42 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b5f64:	2501      	movs	r5, #1
   b5f66:	e7ec      	b.n	b5f42 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b5f68:	000bd18c 	.word	0x000bd18c
   b5f6c:	2003e3d8 	.word	0x2003e3d8
   b5f70:	000bd1b1 	.word	0x000bd1b1

000b5f74 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b5f74:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b5f76:	9300      	str	r3, [sp, #0]
   b5f78:	2301      	movs	r3, #1
   b5f7a:	f7ff ffad 	bl	b5ed8 <_ZN6AB180513readRegistersEhPhjb>
}
   b5f7e:	b003      	add	sp, #12
   b5f80:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f84 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b5f84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b5f86:	8943      	ldrh	r3, [r0, #10]
   b5f88:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b5f8a:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b5f8c:	d010      	beq.n	b5fb0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5f8e:	4e19      	ldr	r6, [pc, #100]	; (b5ff4 <_ZN6AB180510detectChipEv+0x70>)
   b5f90:	4d19      	ldr	r5, [pc, #100]	; (b5ff8 <_ZN6AB180510detectChipEv+0x74>)
   b5f92:	f002 f94d 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b5f96:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b5f9a:	d209      	bcs.n	b5fb0 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b5f9c:	8960      	ldrh	r0, [r4, #10]
   b5f9e:	f005 fcbf 	bl	bb920 <digitalRead>
   b5fa2:	2801      	cmp	r0, #1
   b5fa4:	d004      	beq.n	b5fb0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5fa6:	4631      	mov	r1, r6
   b5fa8:	4628      	mov	r0, r5
   b5faa:	f7fe f8df 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5fae:	e7f0      	b.n	b5f92 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b5fb0:	2301      	movs	r3, #1
   b5fb2:	f10d 0207 	add.w	r2, sp, #7
   b5fb6:	2128      	movs	r1, #40	; 0x28
   b5fb8:	4620      	mov	r0, r4
   b5fba:	f7ff ffdb 	bl	b5f74 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b5fbe:	b930      	cbnz	r0, b5fce <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b5fc0:	480d      	ldr	r0, [pc, #52]	; (b5ff8 <_ZN6AB180510detectChipEv+0x74>)
   b5fc2:	490e      	ldr	r1, [pc, #56]	; (b5ffc <_ZN6AB180510detectChipEv+0x78>)
   b5fc4:	f7fe f8d2 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5fc8:	2000      	movs	r0, #0
}
   b5fca:	b002      	add	sp, #8
   b5fcc:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b5fce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5fd2:	2b18      	cmp	r3, #24
   b5fd4:	d1f4      	bne.n	b5fc0 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b5fd6:	2301      	movs	r3, #1
   b5fd8:	f10d 0207 	add.w	r2, sp, #7
   b5fdc:	2129      	movs	r1, #41	; 0x29
   b5fde:	4620      	mov	r0, r4
   b5fe0:	f7ff ffc8 	bl	b5f74 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b5fe4:	2800      	cmp	r0, #0
   b5fe6:	d0eb      	beq.n	b5fc0 <_ZN6AB180510detectChipEv+0x3c>
   b5fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5fec:	2b05      	cmp	r3, #5
   b5fee:	d1e7      	bne.n	b5fc0 <_ZN6AB180510detectChipEv+0x3c>
   b5ff0:	e7eb      	b.n	b5fca <_ZN6AB180510detectChipEv+0x46>
   b5ff2:	bf00      	nop
   b5ff4:	000bd1d5 	.word	0x000bd1d5
   b5ff8:	2003e3d8 	.word	0x2003e3d8
   b5ffc:	000bd1ea 	.word	0x000bd1ea

000b6000 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6004:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6008:	4604      	mov	r4, r0
   b600a:	460f      	mov	r7, r1
   b600c:	4615      	mov	r5, r2
   b600e:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6010:	f1b8 0f00 	cmp.w	r8, #0
   b6014:	d002      	beq.n	b601c <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6016:	6840      	ldr	r0, [r0, #4]
   b6018:	f003 f9b8 	bl	b938c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b601c:	7a21      	ldrb	r1, [r4, #8]
   b601e:	6860      	ldr	r0, [r4, #4]
   b6020:	f003 f991 	bl	b9346 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6024:	6860      	ldr	r0, [r4, #4]
   b6026:	6803      	ldr	r3, [r0, #0]
   b6028:	4639      	mov	r1, r7
   b602a:	689b      	ldr	r3, [r3, #8]
   b602c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b602e:	442e      	add	r6, r5
   b6030:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b6032:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6034:	d005      	beq.n	b6042 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6036:	6803      	ldr	r3, [r0, #0]
   b6038:	f815 1b01 	ldrb.w	r1, [r5], #1
   b603c:	689b      	ldr	r3, [r3, #8]
   b603e:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6040:	e7f6      	b.n	b6030 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6042:	2101      	movs	r1, #1
   b6044:	f003 f99e 	bl	b9384 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6048:	4603      	mov	r3, r0
   b604a:	b170      	cbz	r0, b606a <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b604c:	4908      	ldr	r1, [pc, #32]	; (b6070 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b604e:	4809      	ldr	r0, [pc, #36]	; (b6074 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6050:	463a      	mov	r2, r7
   b6052:	f7ff ff10 	bl	b5e76 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b6056:	2500      	movs	r5, #0
    }

    if (lock) {
   b6058:	f1b8 0f00 	cmp.w	r8, #0
   b605c:	d002      	beq.n	b6064 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b605e:	6860      	ldr	r0, [r4, #4]
   b6060:	f003 f99d 	bl	b939e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6064:	4628      	mov	r0, r5
   b6066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b606a:	2501      	movs	r5, #1
   b606c:	e7f4      	b.n	b6058 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b606e:	bf00      	nop
   b6070:	000bd1f7 	.word	0x000bd1f7
   b6074:	2003e3d8 	.word	0x2003e3d8

000b6078 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b607a:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b607e:	9300      	str	r3, [sp, #0]
   b6080:	f10d 020f 	add.w	r2, sp, #15
   b6084:	2301      	movs	r3, #1
   b6086:	f7ff ffbb 	bl	b6000 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b608a:	b005      	add	sp, #20
   b608c:	f85d fb04 	ldr.w	pc, [sp], #4

000b6090 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b6090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b6092:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b6094:	460c      	mov	r4, r1
   b6096:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b6098:	491a      	ldr	r1, [pc, #104]	; (b6104 <_ZN6AB18056setWDTEi+0x74>)
   b609a:	481b      	ldr	r0, [pc, #108]	; (b6108 <_ZN6AB18056setWDTEi+0x78>)
   b609c:	f7fe f866 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b60a0:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b60a2:	bfb8      	it	lt
   b60a4:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b60a6:	b97c      	cbnz	r4, b60c8 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b60a8:	2301      	movs	r3, #1
   b60aa:	4622      	mov	r2, r4
   b60ac:	211b      	movs	r1, #27
   b60ae:	4628      	mov	r0, r5
   b60b0:	f7ff ffe2 	bl	b6078 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b60b4:	4915      	ldr	r1, [pc, #84]	; (b610c <_ZN6AB18056setWDTEi+0x7c>)
   b60b6:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b60b8:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b60ba:	4813      	ldr	r0, [pc, #76]	; (b6108 <_ZN6AB18056setWDTEi+0x78>)
   b60bc:	f7ff fee9 	bl	b5e92 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b60c0:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b60c2:	616c      	str	r4, [r5, #20]
}
   b60c4:	4630      	mov	r0, r6
   b60c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b60c8:	2c03      	cmp	r4, #3
   b60ca:	dd19      	ble.n	b6100 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b60cc:	10a7      	asrs	r7, r4, #2
   b60ce:	2f1f      	cmp	r7, #31
   b60d0:	bfa8      	it	ge
   b60d2:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b60d4:	00ba      	lsls	r2, r7, #2
   b60d6:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b60da:	2301      	movs	r3, #1
   b60dc:	b2d2      	uxtb	r2, r2
   b60de:	211b      	movs	r1, #27
   b60e0:	4628      	mov	r0, r5
   b60e2:	f7ff ffc9 	bl	b6078 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b60e6:	463a      	mov	r2, r7
   b60e8:	4603      	mov	r3, r0
   b60ea:	4909      	ldr	r1, [pc, #36]	; (b6110 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b60ec:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b60ee:	4806      	ldr	r0, [pc, #24]	; (b6108 <_ZN6AB18056setWDTEi+0x78>)
   b60f0:	f7ff fecf 	bl	b5e92 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b60f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b60f8:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b60fa:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b60fc:	616f      	str	r7, [r5, #20]
   b60fe:	e7e1      	b.n	b60c4 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6100:	2701      	movs	r7, #1
   b6102:	e7e7      	b.n	b60d4 <_ZN6AB18056setWDTEi+0x44>
   b6104:	000bd21c 	.word	0x000bd21c
   b6108:	2003e3d8 	.word	0x2003e3d8
   b610c:	000bd226 	.word	0x000bd226
   b6110:	000bd242 	.word	0x000bd242

000b6114 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6114:	4b06      	ldr	r3, [pc, #24]	; (b6130 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6116:	681a      	ldr	r2, [r3, #0]
   b6118:	b14a      	cbz	r2, b612e <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b611a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b611e:	430b      	orrs	r3, r1
   b6120:	d105      	bne.n	b612e <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6122:	68d3      	ldr	r3, [r2, #12]
   b6124:	b11b      	cbz	r3, b612e <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6126:	2100      	movs	r1, #0
   b6128:	4610      	mov	r0, r2
   b612a:	f7ff bfb1 	b.w	b6090 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b612e:	4770      	bx	lr
   b6130:	2003e3dc 	.word	0x2003e3dc

000b6134 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6134:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6138:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b613c:	4605      	mov	r5, r0
   b613e:	4616      	mov	r6, r2
   b6140:	461f      	mov	r7, r3
    if (lock) {
   b6142:	f1b8 0f00 	cmp.w	r8, #0
   b6146:	d004      	beq.n	b6152 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6148:	6840      	ldr	r0, [r0, #4]
   b614a:	9101      	str	r1, [sp, #4]
   b614c:	f003 f91e 	bl	b938c <_ZN7TwoWire4lockEv>
   b6150:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6152:	9101      	str	r1, [sp, #4]
   b6154:	2300      	movs	r3, #0
   b6156:	f10d 020f 	add.w	r2, sp, #15
   b615a:	4628      	mov	r0, r5
   b615c:	f7ff ff0a 	bl	b5f74 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6160:	4604      	mov	r4, r0
   b6162:	b160      	cbz	r0, b617e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6164:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6168:	ea03 0206 	and.w	r2, r3, r6
   b616c:	433a      	orrs	r2, r7
        if (newValue != value) {
   b616e:	4293      	cmp	r3, r2
   b6170:	d005      	beq.n	b617e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6172:	9901      	ldr	r1, [sp, #4]
   b6174:	2300      	movs	r3, #0
   b6176:	4628      	mov	r0, r5
   b6178:	f7ff ff7e 	bl	b6078 <_ZN6AB180513writeRegisterEhhb>
   b617c:	4604      	mov	r4, r0
    if (lock) {
   b617e:	f1b8 0f00 	cmp.w	r8, #0
   b6182:	d002      	beq.n	b618a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b6184:	6868      	ldr	r0, [r5, #4]
   b6186:	f003 f90a 	bl	b939e <_ZN7TwoWire6unlockEv>
}
   b618a:	4620      	mov	r0, r4
   b618c:	b004      	add	sp, #16
   b618e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6192 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6192:	b513      	push	{r0, r1, r4, lr}
   b6194:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6196:	f10d 0207 	add.w	r2, sp, #7
   b619a:	f7ff feeb 	bl	b5f74 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b619e:	b128      	cbz	r0, b61ac <_ZN6AB180510isBitClearEhhb+0x1a>
   b61a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b61a4:	421c      	tst	r4, r3
   b61a6:	bf0c      	ite	eq
   b61a8:	2001      	moveq	r0, #1
   b61aa:	2000      	movne	r0, #0
}
   b61ac:	b002      	add	sp, #8
   b61ae:	bd10      	pop	{r4, pc}

000b61b0 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61b0:	b513      	push	{r0, r1, r4, lr}
   b61b2:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b61b4:	f10d 0207 	add.w	r2, sp, #7
   b61b8:	f7ff fedc 	bl	b5f74 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b61bc:	b128      	cbz	r0, b61ca <_ZN6AB18058isBitSetEhhb+0x1a>
   b61be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b61c2:	421c      	tst	r4, r3
   b61c4:	bf14      	ite	ne
   b61c6:	2001      	movne	r0, #1
   b61c8:	2000      	moveq	r0, #0
}
   b61ca:	b002      	add	sp, #8
   b61cc:	bd10      	pop	{r4, pc}

000b61ce <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61ce:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b61d0:	43d2      	mvns	r2, r2
   b61d2:	9300      	str	r3, [sp, #0]
   b61d4:	b2d2      	uxtb	r2, r2
   b61d6:	2300      	movs	r3, #0
   b61d8:	f7ff ffac 	bl	b6134 <_ZN6AB180512maskRegisterEhhhb>
}
   b61dc:	b003      	add	sp, #12
   b61de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b61e4 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b61e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b61e6:	2301      	movs	r3, #1
   b61e8:	f10d 0207 	add.w	r2, sp, #7
   b61ec:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b61ee:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b61f0:	f7ff fec0 	bl	b5f74 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b61f4:	4605      	mov	r5, r0
   b61f6:	b938      	cbnz	r0, b6208 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b61f8:	491e      	ldr	r1, [pc, #120]	; (b6274 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b61fa:	481f      	ldr	r0, [pc, #124]	; (b6278 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b61fc:	22ad      	movs	r2, #173	; 0xad
   b61fe:	f7ff fe3a 	bl	b5e76 <_ZNK5spark6Logger5errorEPKcz>
}
   b6202:	4628      	mov	r0, r5
   b6204:	b003      	add	sp, #12
   b6206:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6208:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b620c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6210:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6214:	d00b      	beq.n	b622e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6216:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6218:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b621a:	210f      	movs	r1, #15
   b621c:	4620      	mov	r0, r4
   b621e:	f7ff ffd6 	bl	b61ce <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b6222:	4a16      	ldr	r2, [pc, #88]	; (b627c <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6224:	4916      	ldr	r1, [pc, #88]	; (b6280 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6226:	4814      	ldr	r0, [pc, #80]	; (b6278 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6228:	f7fd ffa0 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b622c:	e7e9      	b.n	b6202 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b622e:	2208      	movs	r2, #8
   b6230:	2117      	movs	r1, #23
   b6232:	4620      	mov	r0, r4
   b6234:	f7ff ffbc 	bl	b61b0 <_ZN6AB18058isBitSetEhhb>
   b6238:	b118      	cbz	r0, b6242 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b623a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b623c:	4a11      	ldr	r2, [pc, #68]	; (b6284 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b623e:	61e3      	str	r3, [r4, #28]
   b6240:	e7f0      	b.n	b6224 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6242:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6246:	071a      	lsls	r2, r3, #28
   b6248:	d509      	bpl.n	b625e <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b624a:	2303      	movs	r3, #3
   b624c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b624e:	2208      	movs	r2, #8
   b6250:	2301      	movs	r3, #1
   b6252:	210f      	movs	r1, #15
   b6254:	4620      	mov	r0, r4
   b6256:	f7ff ffba 	bl	b61ce <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b625a:	4a0b      	ldr	r2, [pc, #44]	; (b6288 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b625c:	e7e2      	b.n	b6224 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b625e:	075b      	lsls	r3, r3, #29
   b6260:	d5cf      	bpl.n	b6202 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6262:	2204      	movs	r2, #4
   b6264:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b6266:	2301      	movs	r3, #1
   b6268:	210f      	movs	r1, #15
   b626a:	4620      	mov	r0, r4
   b626c:	f7ff ffaf 	bl	b61ce <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6270:	4a06      	ldr	r2, [pc, #24]	; (b628c <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6272:	e7d7      	b.n	b6224 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6274:	000bd295 	.word	0x000bd295
   b6278:	2003e3d8 	.word	0x2003e3d8
   b627c:	000bd266 	.word	0x000bd266
   b6280:	000bd2b4 	.word	0x000bd2b4
   b6284:	000bd26f 	.word	0x000bd26f
   b6288:	000bd27f 	.word	0x000bd27f
   b628c:	000bd28f 	.word	0x000bd28f

000b6290 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b6290:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b6292:	9300      	str	r3, [sp, #0]
   b6294:	4613      	mov	r3, r2
   b6296:	22ff      	movs	r2, #255	; 0xff
   b6298:	f7ff ff4c 	bl	b6134 <_ZN6AB180512maskRegisterEhhhb>
}
   b629c:	b003      	add	sp, #12
   b629e:	f85d fb04 	ldr.w	pc, [sp], #4

000b62a2 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b62a2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b62a6:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b62aa:	4605      	mov	r5, r0
   b62ac:	460c      	mov	r4, r1
   b62ae:	4691      	mov	r9, r2
   b62b0:	461f      	mov	r7, r3
    if (lock) {
   b62b2:	f1ba 0f00 	cmp.w	sl, #0
   b62b6:	d002      	beq.n	b62be <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b62b8:	6840      	ldr	r0, [r0, #4]
   b62ba:	f003 f867 	bl	b938c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b62be:	b307      	cbz	r7, b6302 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b62c0:	2f20      	cmp	r7, #32
   b62c2:	463e      	mov	r6, r7
   b62c4:	bf28      	it	cs
   b62c6:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b62c8:	2c7f      	cmp	r4, #127	; 0x7f
   b62ca:	d826      	bhi.n	b631a <_ZN6AB18057readRamEjPhjb+0x78>
   b62cc:	1933      	adds	r3, r6, r4
   b62ce:	2b80      	cmp	r3, #128	; 0x80
   b62d0:	d901      	bls.n	b62d6 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b62d2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b62d6:	2301      	movs	r3, #1
   b62d8:	2204      	movs	r2, #4
   b62da:	213f      	movs	r1, #63	; 0x3f
   b62dc:	4628      	mov	r0, r5
   b62de:	f7ff ff76 	bl	b61ce <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b62e2:	2300      	movs	r3, #0
   b62e4:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b62e8:	9300      	str	r3, [sp, #0]
   b62ea:	464a      	mov	r2, r9
   b62ec:	4633      	mov	r3, r6
   b62ee:	b2c9      	uxtb	r1, r1
   b62f0:	4628      	mov	r0, r5
   b62f2:	f7ff fdf1 	bl	b5ed8 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b62f6:	4680      	mov	r8, r0
   b62f8:	b128      	cbz	r0, b6306 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b62fa:	4434      	add	r4, r6
        dataLen -= count;
   b62fc:	1bbf      	subs	r7, r7, r6
        data += count;
   b62fe:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6300:	e7dd      	b.n	b62be <_ZN6AB18057readRamEjPhjb+0x1c>
   b6302:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6306:	f1ba 0f00 	cmp.w	sl, #0
   b630a:	d002      	beq.n	b6312 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b630c:	6868      	ldr	r0, [r5, #4]
   b630e:	f003 f846 	bl	b939e <_ZN7TwoWire6unlockEv>
}
   b6312:	4640      	mov	r0, r8
   b6314:	b002      	add	sp, #8
   b6316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b631a:	2301      	movs	r3, #1
   b631c:	2204      	movs	r2, #4
   b631e:	213f      	movs	r1, #63	; 0x3f
   b6320:	4628      	mov	r0, r5
   b6322:	f7ff ffb5 	bl	b6290 <_ZN6AB180514setRegisterBitEhhb>
   b6326:	e7dc      	b.n	b62e2 <_ZN6AB18057readRamEjPhjb+0x40>

000b6328 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6328:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b632c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6330:	4605      	mov	r5, r0
   b6332:	460c      	mov	r4, r1
   b6334:	4691      	mov	r9, r2
   b6336:	461f      	mov	r7, r3
    if (lock) {
   b6338:	f1ba 0f00 	cmp.w	sl, #0
   b633c:	d002      	beq.n	b6344 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b633e:	6840      	ldr	r0, [r0, #4]
   b6340:	f003 f824 	bl	b938c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6344:	b307      	cbz	r7, b6388 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6346:	2f1f      	cmp	r7, #31
   b6348:	463e      	mov	r6, r7
   b634a:	bf28      	it	cs
   b634c:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b634e:	2c7f      	cmp	r4, #127	; 0x7f
   b6350:	d826      	bhi.n	b63a0 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6352:	1933      	adds	r3, r6, r4
   b6354:	2b80      	cmp	r3, #128	; 0x80
   b6356:	d901      	bls.n	b635c <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b6358:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b635c:	2301      	movs	r3, #1
   b635e:	2204      	movs	r2, #4
   b6360:	213f      	movs	r1, #63	; 0x3f
   b6362:	4628      	mov	r0, r5
   b6364:	f7ff ff33 	bl	b61ce <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6368:	2300      	movs	r3, #0
   b636a:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b636e:	9300      	str	r3, [sp, #0]
   b6370:	464a      	mov	r2, r9
   b6372:	4633      	mov	r3, r6
   b6374:	b2c9      	uxtb	r1, r1
   b6376:	4628      	mov	r0, r5
   b6378:	f7ff fe42 	bl	b6000 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b637c:	4680      	mov	r8, r0
   b637e:	b128      	cbz	r0, b638c <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6380:	4434      	add	r4, r6
        dataLen -= count;
   b6382:	1bbf      	subs	r7, r7, r6
        data += count;
   b6384:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6386:	e7dd      	b.n	b6344 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b6388:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b638c:	f1ba 0f00 	cmp.w	sl, #0
   b6390:	d002      	beq.n	b6398 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b6392:	6868      	ldr	r0, [r5, #4]
   b6394:	f003 f803 	bl	b939e <_ZN7TwoWire6unlockEv>
}
   b6398:	4640      	mov	r0, r8
   b639a:	b002      	add	sp, #8
   b639c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b63a0:	2301      	movs	r3, #1
   b63a2:	2204      	movs	r2, #4
   b63a4:	213f      	movs	r1, #63	; 0x3f
   b63a6:	4628      	mov	r0, r5
   b63a8:	f7ff ff72 	bl	b6290 <_ZN6AB180514setRegisterBitEhhb>
   b63ac:	e7dc      	b.n	b6368 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000b63b0 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b63b0:	b530      	push	{r4, r5, lr}
   b63b2:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b63b4:	680d      	ldr	r5, [r1, #0]
   b63b6:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b63ba:	9503      	str	r5, [sp, #12]
   b63bc:	684d      	ldr	r5, [r1, #4]
   b63be:	9502      	str	r5, [sp, #8]
   b63c0:	688d      	ldr	r5, [r1, #8]
   b63c2:	9501      	str	r5, [sp, #4]
   b63c4:	68c9      	ldr	r1, [r1, #12]
   b63c6:	9100      	str	r1, [sp, #0]
   b63c8:	3301      	adds	r3, #1
   b63ca:	4904      	ldr	r1, [pc, #16]	; (b63dc <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b63cc:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b63d0:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b63d2:	f004 fe3b 	bl	bb04c <_ZN6String6formatEPKcz>
}
   b63d6:	4620      	mov	r0, r4
   b63d8:	b005      	add	sp, #20
   b63da:	bd30      	pop	{r4, r5, pc}
   b63dc:	000bd2c5 	.word	0x000bd2c5

000b63e0 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b63e0:	0903      	lsrs	r3, r0, #4
}
   b63e2:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b63e4:	f000 000f 	and.w	r0, r0, #15
}
   b63e8:	fb02 0003 	mla	r0, r2, r3, r0
   b63ec:	4770      	bx	lr

000b63ee <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b63ee:	b538      	push	{r3, r4, r5, lr}
   b63f0:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b63f2:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b63f4:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b63f6:	f7ff fff3 	bl	b63e0 <_ZN6AB180510bcdToValueEh>
   b63fa:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b63fc:	7860      	ldrb	r0, [r4, #1]
   b63fe:	f7ff ffef 	bl	b63e0 <_ZN6AB180510bcdToValueEh>
   b6402:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6404:	78a0      	ldrb	r0, [r4, #2]
   b6406:	f7ff ffeb 	bl	b63e0 <_ZN6AB180510bcdToValueEh>
   b640a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b640c:	78e0      	ldrb	r0, [r4, #3]
   b640e:	f7ff ffe7 	bl	b63e0 <_ZN6AB180510bcdToValueEh>
   b6412:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6414:	7920      	ldrb	r0, [r4, #4]
   b6416:	f7ff ffe3 	bl	b63e0 <_ZN6AB180510bcdToValueEh>
   b641a:	3801      	subs	r0, #1
   b641c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b641e:	b92d      	cbnz	r5, b642c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6420:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6422:	7828      	ldrb	r0, [r5, #0]
   b6424:	f7ff ffdc 	bl	b63e0 <_ZN6AB180510bcdToValueEh>
   b6428:	6188      	str	r0, [r1, #24]
}
   b642a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b642c:	7960      	ldrb	r0, [r4, #5]
   b642e:	f7ff ffd7 	bl	b63e0 <_ZN6AB180510bcdToValueEh>
   b6432:	3064      	adds	r0, #100	; 0x64
   b6434:	1da5      	adds	r5, r4, #6
   b6436:	6148      	str	r0, [r1, #20]
   b6438:	e7f3      	b.n	b6422 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b643c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b643c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b643e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6440:	b088      	sub	sp, #32
   b6442:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6444:	461a      	mov	r2, r3
   b6446:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6448:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b644a:	f7ff fea2 	bl	b6192 <_ZN6AB180510isBitClearEhhb>
   b644e:	b1f0      	cbz	r0, b648e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6450:	2308      	movs	r3, #8
   b6452:	2601      	movs	r6, #1
   b6454:	4620      	mov	r0, r4
   b6456:	9600      	str	r6, [sp, #0]
   b6458:	eb0d 0203 	add.w	r2, sp, r3
   b645c:	2100      	movs	r1, #0
   b645e:	f7ff fd3b 	bl	b5ed8 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6462:	4604      	mov	r4, r0
   b6464:	b198      	cbz	r0, b648e <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b6466:	4632      	mov	r2, r6
   b6468:	4629      	mov	r1, r5
   b646a:	f10d 0009 	add.w	r0, sp, #9
   b646e:	f7ff ffbe 	bl	b63ee <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6472:	a804      	add	r0, sp, #16
   b6474:	f7ff ff9c 	bl	b63b0 <_ZN6AB180510tmToStringEPK2tm>
   b6478:	4808      	ldr	r0, [pc, #32]	; (b649c <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b647a:	9a04      	ldr	r2, [sp, #16]
   b647c:	4908      	ldr	r1, [pc, #32]	; (b64a0 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b647e:	f7fd fe75 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6482:	a804      	add	r0, sp, #16
   b6484:	f004 fd2e 	bl	baee4 <_ZN6StringD1Ev>
}
   b6488:	4620      	mov	r0, r4
   b648a:	b008      	add	sp, #32
   b648c:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b648e:	2224      	movs	r2, #36	; 0x24
   b6490:	2100      	movs	r1, #0
   b6492:	4628      	mov	r0, r5
   b6494:	f006 f85a 	bl	bc54c <memset>
   b6498:	2400      	movs	r4, #0
   b649a:	e7f5      	b.n	b6488 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b649c:	2003e3d8 	.word	0x2003e3d8
   b64a0:	000bd2e3 	.word	0x000bd2e3

000b64a4 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b64a4:	b530      	push	{r4, r5, lr}
   b64a6:	b08b      	sub	sp, #44	; 0x2c
   b64a8:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b64aa:	a901      	add	r1, sp, #4
   b64ac:	f7ff ffc6 	bl	b643c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b64b0:	4604      	mov	r4, r0
   b64b2:	b120      	cbz	r0, b64be <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b64b4:	a801      	add	r0, sp, #4
   b64b6:	f002 fa2d 	bl	b8914 <mktime>
   b64ba:	e9c5 0100 	strd	r0, r1, [r5]
}
   b64be:	4620      	mov	r0, r4
   b64c0:	b00b      	add	sp, #44	; 0x2c
   b64c2:	bd30      	pop	{r4, r5, pc}

000b64c4 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b64c4:	230a      	movs	r3, #10
   b64c6:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b64ca:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b64ce:	fb91 f2f3 	sdiv	r2, r1, r3
   b64d2:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b64d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b64da:	b2c0      	uxtb	r0, r0
   b64dc:	4770      	bx	lr

000b64de <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b64de:	b570      	push	{r4, r5, r6, lr}
   b64e0:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b64e2:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b64e4:	460c      	mov	r4, r1
   b64e6:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b64e8:	f7ff ffec 	bl	b64c4 <_ZN6AB180510valueToBcdEi>
   b64ec:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b64ee:	6868      	ldr	r0, [r5, #4]
   b64f0:	f7ff ffe8 	bl	b64c4 <_ZN6AB180510valueToBcdEi>
   b64f4:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b64f6:	68a8      	ldr	r0, [r5, #8]
   b64f8:	f7ff ffe4 	bl	b64c4 <_ZN6AB180510valueToBcdEi>
   b64fc:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b64fe:	68e8      	ldr	r0, [r5, #12]
   b6500:	f7ff ffe0 	bl	b64c4 <_ZN6AB180510valueToBcdEi>
   b6504:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6506:	6928      	ldr	r0, [r5, #16]
   b6508:	3001      	adds	r0, #1
   b650a:	f7ff ffdb 	bl	b64c4 <_ZN6AB180510valueToBcdEi>
   b650e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6510:	b92e      	cbnz	r6, b651e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6512:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6514:	69a8      	ldr	r0, [r5, #24]
   b6516:	f7ff ffd5 	bl	b64c4 <_ZN6AB180510valueToBcdEi>
   b651a:	7030      	strb	r0, [r6, #0]
}
   b651c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b651e:	696a      	ldr	r2, [r5, #20]
   b6520:	2364      	movs	r3, #100	; 0x64
   b6522:	fb92 f0f3 	sdiv	r0, r2, r3
   b6526:	fb03 2010 	mls	r0, r3, r0, r2
   b652a:	f7ff ffcb 	bl	b64c4 <_ZN6AB180510valueToBcdEi>
   b652e:	1da6      	adds	r6, r4, #6
   b6530:	7160      	strb	r0, [r4, #5]
   b6532:	e7ef      	b.n	b6514 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6534 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6534:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6536:	b087      	sub	sp, #28
   b6538:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b653a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b653c:	4616      	mov	r6, r2
   b653e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6540:	f7ff ff36 	bl	b63b0 <_ZN6AB180510tmToStringEPK2tm>
   b6544:	481e      	ldr	r0, [pc, #120]	; (b65c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6546:	9a02      	ldr	r2, [sp, #8]
   b6548:	491e      	ldr	r1, [pc, #120]	; (b65c4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b654a:	f7fd fe0f 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b654e:	a802      	add	r0, sp, #8
   b6550:	f004 fcc8 	bl	baee4 <_ZN6StringD1Ev>
    if (lock) {
   b6554:	b116      	cbz	r6, b655c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b6556:	6868      	ldr	r0, [r5, #4]
   b6558:	f002 ff18 	bl	b938c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b655c:	4620      	mov	r0, r4
   b655e:	2201      	movs	r2, #1
   b6560:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6564:	2700      	movs	r7, #0
   b6566:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b656a:	f7ff ffb8 	bl	b64de <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b656e:	2301      	movs	r3, #1
   b6570:	461a      	mov	r2, r3
   b6572:	2110      	movs	r1, #16
   b6574:	4628      	mov	r0, r5
   b6576:	f7ff fe8b 	bl	b6290 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b657a:	4604      	mov	r4, r0
   b657c:	b1e8      	cbz	r0, b65ba <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b657e:	2308      	movs	r3, #8
   b6580:	9700      	str	r7, [sp, #0]
   b6582:	eb0d 0203 	add.w	r2, sp, r3
   b6586:	4639      	mov	r1, r7
   b6588:	4628      	mov	r0, r5
   b658a:	f7ff fd39 	bl	b6000 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b658e:	4604      	mov	r4, r0
   b6590:	b160      	cbz	r0, b65ac <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6592:	2301      	movs	r3, #1
   b6594:	461a      	mov	r2, r3
   b6596:	2110      	movs	r1, #16
   b6598:	4628      	mov	r0, r5
   b659a:	f7ff fe18 	bl	b61ce <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b659e:	b116      	cbz	r6, b65a6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b65a0:	6868      	ldr	r0, [r5, #4]
   b65a2:	f002 fefc 	bl	b939e <_ZN7TwoWire6unlockEv>
}
   b65a6:	4620      	mov	r0, r4
   b65a8:	b007      	add	sp, #28
   b65aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b65ac:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b65b0:	4905      	ldr	r1, [pc, #20]	; (b65c8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b65b2:	4803      	ldr	r0, [pc, #12]	; (b65c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b65b4:	f7ff fc5f 	bl	b5e76 <_ZNK5spark6Logger5errorEPKcz>
   b65b8:	e7f1      	b.n	b659e <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b65ba:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b65be:	e7f7      	b.n	b65b0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b65c0:	2003e3d8 	.word	0x2003e3d8
   b65c4:	000bd2f1 	.word	0x000bd2f1
   b65c8:	000bd2ff 	.word	0x000bd2ff

000b65cc <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b65cc:	b513      	push	{r0, r1, r4, lr}
   b65ce:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b65d0:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b65d2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b65d6:	f005 ff6b 	bl	bc4b0 <gmtime>
    return setRtcFromTm(tm, lock);
   b65da:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b65de:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b65e0:	4620      	mov	r0, r4
   b65e2:	f7ff ffa7 	bl	b6534 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b65e6:	b002      	add	sp, #8
   b65e8:	bd10      	pop	{r4, pc}
	...

000b65ec <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b65ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b65ee:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b65f0:	b089      	sub	sp, #36	; 0x24
   b65f2:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b65f4:	bb75      	cbnz	r5, b6654 <_ZN6AB18054loopEv+0x68>
   b65f6:	f004 ff4d 	bl	bb494 <_ZN9TimeClass7isValidEv>
   b65fa:	b358      	cbz	r0, b6654 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b65fc:	2600      	movs	r6, #0
   b65fe:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6600:	a904      	add	r1, sp, #16
   b6602:	4628      	mov	r0, r5
        tm = 0;
   b6604:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6608:	f002 f8a4 	bl	b8754 <spark_sync_time_last>
   b660c:	b310      	cbz	r0, b6654 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b660e:	2501      	movs	r5, #1
   b6610:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6612:	f004 ff5c 	bl	bb4ce <_ZN9TimeClass3nowEv>
   b6616:	17c3      	asrs	r3, r0, #31
   b6618:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b661c:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b661e:	9500      	str	r5, [sp, #0]
   b6620:	4620      	mov	r0, r4
   b6622:	f7ff ffd3 	bl	b65cc <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6626:	a902      	add	r1, sp, #8
   b6628:	4620      	mov	r0, r4
        time = 0;
   b662a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b662e:	f7ff ff39 	bl	b64a4 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6632:	4b13      	ldr	r3, [pc, #76]	; (b6680 <_ZN6AB18054loopEv+0x94>)
   b6634:	4913      	ldr	r1, [pc, #76]	; (b6684 <_ZN6AB18054loopEv+0x98>)
   b6636:	681b      	ldr	r3, [r3, #0]
   b6638:	9300      	str	r3, [sp, #0]
   b663a:	a804      	add	r0, sp, #16
   b663c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6640:	f004 fee6 	bl	bb410 <_ZN9TimeClass6formatExPKc>
   b6644:	4810      	ldr	r0, [pc, #64]	; (b6688 <_ZN6AB18054loopEv+0x9c>)
   b6646:	9a04      	ldr	r2, [sp, #16]
   b6648:	4910      	ldr	r1, [pc, #64]	; (b668c <_ZN6AB18054loopEv+0xa0>)
   b664a:	f7fd fd8f 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b664e:	a804      	add	r0, sp, #16
   b6650:	f004 fc48 	bl	baee4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6654:	6963      	ldr	r3, [r4, #20]
   b6656:	b18b      	cbz	r3, b667c <_ZN6AB18054loopEv+0x90>
   b6658:	f001 fdea 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b665c:	6923      	ldr	r3, [r4, #16]
   b665e:	1ac0      	subs	r0, r0, r3
   b6660:	6963      	ldr	r3, [r4, #20]
   b6662:	4298      	cmp	r0, r3
   b6664:	d30a      	bcc.n	b667c <_ZN6AB18054loopEv+0x90>
   b6666:	f001 fde3 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b666a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b666e:	6120      	str	r0, [r4, #16]
            setWDT();
   b6670:	4620      	mov	r0, r4
}
   b6672:	b009      	add	sp, #36	; 0x24
   b6674:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6678:	f7ff bd0a 	b.w	b6090 <_ZN6AB18056setWDTEi>
}
   b667c:	b009      	add	sp, #36	; 0x24
   b667e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6680:	2003dfa4 	.word	0x2003dfa4
   b6684:	2003e6a8 	.word	0x2003e6a8
   b6688:	2003e3d8 	.word	0x2003e3d8
   b668c:	000bd31a 	.word	0x000bd31a

000b6690 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b6690:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6692:	2300      	movs	r3, #0
   b6694:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6696:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6698:	4604      	mov	r4, r0
   b669a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b669c:	b12b      	cbz	r3, b66aa <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b669e:	2202      	movs	r2, #2
   b66a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b66a2:	68eb      	ldr	r3, [r5, #12]
   b66a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b66a6:	68ab      	ldr	r3, [r5, #8]
   b66a8:	60a3      	str	r3, [r4, #8]
    }
   b66aa:	4620      	mov	r0, r4
   b66ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b66b0 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b66b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b66b4:	b095      	sub	sp, #84	; 0x54
   b66b6:	4605      	mov	r5, r0
        };
   b66b8:	991c      	ldr	r1, [sp, #112]	; 0x70
   b66ba:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b66bc:	4690      	mov	r8, r2
   b66be:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b66c0:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b66c2:	f7ff ffe5 	bl	b6690 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b66c6:	a904      	add	r1, sp, #16
   b66c8:	a808      	add	r0, sp, #32
   b66ca:	f7ff ffe1 	bl	b6690 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b66ce:	a908      	add	r1, sp, #32
   b66d0:	4630      	mov	r0, r6
   b66d2:	f7ff ffdd 	bl	b6690 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b66d6:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66da:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b66dc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b66e0:	f7fd fcd9 	bl	b4096 <_Znwj>
   b66e4:	4604      	mov	r4, r0
   b66e6:	b1a0      	cbz	r0, b6712 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66e8:	e896 0003 	ldmia.w	r6, {r0, r1}
   b66ec:	ab01      	add	r3, sp, #4
   b66ee:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b66f2:	e894 0003 	ldmia.w	r4, {r0, r1}
   b66f6:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b66fa:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b66fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b6700:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6702:	60a3      	str	r3, [r4, #8]
   b6704:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b670a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b670e:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b6710:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b6712:	4b24      	ldr	r3, [pc, #144]	; (b67a4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b6714:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b6716:	4b24      	ldr	r3, [pc, #144]	; (b67a8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b6718:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b671a:	2200      	movs	r2, #0
   b671c:	2300      	movs	r3, #0
   b671e:	f04f 0900 	mov.w	r9, #0
   b6722:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b6726:	4b21      	ldr	r3, [pc, #132]	; (b67ac <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b6728:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b672c:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b672e:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b6730:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b6734:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b6738:	f7fd fcad 	bl	b4096 <_Znwj>
   b673c:	4604      	mov	r4, r0
   b673e:	b1d8      	cbz	r0, b6778 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b6740:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b6742:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b6746:	b133      	cbz	r3, b6756 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6748:	2202      	movs	r2, #2
   b674a:	a910      	add	r1, sp, #64	; 0x40
   b674c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b674e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b6750:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6752:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b6754:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b6756:	4b16      	ldr	r3, [pc, #88]	; (b67b0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b6758:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b675a:	4a16      	ldr	r2, [pc, #88]	; (b67b4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b675c:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b675e:	ab01      	add	r3, sp, #4
   b6760:	4640      	mov	r0, r8
   b6762:	4639      	mov	r1, r7
   b6764:	f001 ff7e 	bl	b8664 <system_subscribe_event>
        if (r) {
   b6768:	b1b0      	cbz	r0, b6798 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b676a:	4620      	mov	r0, r4
   b676c:	f7ff fb5c 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b6770:	2110      	movs	r1, #16
   b6772:	4620      	mov	r0, r4
   b6774:	f7fd fc93 	bl	b409e <_ZdlPvj>
   b6778:	a810      	add	r0, sp, #64	; 0x40
   b677a:	f7ff fb55 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
   b677e:	4630      	mov	r0, r6
   b6780:	f7ff fb52 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
   b6784:	a808      	add	r0, sp, #32
   b6786:	f7ff fb4f 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
   b678a:	a804      	add	r0, sp, #16
   b678c:	f7ff fb4c 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
    }
   b6790:	4628      	mov	r0, r5
   b6792:	b015      	add	sp, #84	; 0x54
   b6794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b6798:	9b02      	ldr	r3, [sp, #8]
   b679a:	60ab      	str	r3, [r5, #8]
   b679c:	e9c5 8700 	strd	r8, r7, [r5]
   b67a0:	e7ea      	b.n	b6778 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b67a2:	bf00      	nop
   b67a4:	000b5de5 	.word	0x000b5de5
   b67a8:	000b686d 	.word	0x000b686d
   b67ac:	000c0002 	.word	0x000c0002
   b67b0:	000b5e3b 	.word	0x000b5e3b
   b67b4:	000b5dbd 	.word	0x000b5dbd

000b67b8 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b67b8:	b530      	push	{r4, r5, lr}
   b67ba:	4604      	mov	r4, r0
   b67bc:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b67be:	b111      	cbz	r1, b67c6 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b67c0:	6840      	ldr	r0, [r0, #4]
   b67c2:	f002 fd91 	bl	b92e8 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b67c6:	4620      	mov	r0, r4
   b67c8:	f7ff fbdc 	bl	b5f84 <_ZN6AB180510detectChipEv>
   b67cc:	ad06      	add	r5, sp, #24
   b67ce:	2800      	cmp	r0, #0
   b67d0:	d037      	beq.n	b6842 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b67d2:	4620      	mov	r0, r4
   b67d4:	f7ff fd06 	bl	b61e4 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b67d8:	2301      	movs	r3, #1
   b67da:	461a      	mov	r2, r3
   b67dc:	2110      	movs	r1, #16
   b67de:	4620      	mov	r0, r4
   b67e0:	f7ff fcd7 	bl	b6192 <_ZN6AB180510isBitClearEhhb>
   b67e4:	b1d8      	cbz	r0, b681e <_ZN6AB18055setupEb+0x66>
   b67e6:	f004 fe55 	bl	bb494 <_ZN9TimeClass7isValidEv>
   b67ea:	b9c0      	cbnz	r0, b681e <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b67ec:	a902      	add	r1, sp, #8
   b67ee:	4620      	mov	r0, r4
   b67f0:	f7ff fe58 	bl	b64a4 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b67f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b67f8:	f004 fd50 	bl	bb29c <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b67fc:	4b13      	ldr	r3, [pc, #76]	; (b684c <_ZN6AB18055setupEb+0x94>)
   b67fe:	4914      	ldr	r1, [pc, #80]	; (b6850 <_ZN6AB18055setupEb+0x98>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	9300      	str	r3, [sp, #0]
   b6804:	4628      	mov	r0, r5
   b6806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b680a:	f004 fe01 	bl	bb410 <_ZN9TimeClass6formatExPKc>
   b680e:	4811      	ldr	r0, [pc, #68]	; (b6854 <_ZN6AB18055setupEb+0x9c>)
   b6810:	9a06      	ldr	r2, [sp, #24]
   b6812:	4911      	ldr	r1, [pc, #68]	; (b6858 <_ZN6AB18055setupEb+0xa0>)
   b6814:	f7fd fcaa 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6818:	4628      	mov	r0, r5
   b681a:	f004 fb63 	bl	baee4 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b681e:	4b0f      	ldr	r3, [pc, #60]	; (b685c <_ZN6AB18055setupEb+0xa4>)
   b6820:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6822:	4b0f      	ldr	r3, [pc, #60]	; (b6860 <_ZN6AB18055setupEb+0xa8>)
   b6824:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6826:	4b0f      	ldr	r3, [pc, #60]	; (b6864 <_ZN6AB18055setupEb+0xac>)
   b6828:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b682a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b682e:	2300      	movs	r3, #0
   b6830:	a802      	add	r0, sp, #8
   b6832:	9500      	str	r5, [sp, #0]
   b6834:	f7ff ff3c 	bl	b66b0 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6838:	4628      	mov	r0, r5
   b683a:	f7ff faf5 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
}
   b683e:	b00b      	add	sp, #44	; 0x2c
   b6840:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6842:	4909      	ldr	r1, [pc, #36]	; (b6868 <_ZN6AB18055setupEb+0xb0>)
   b6844:	4803      	ldr	r0, [pc, #12]	; (b6854 <_ZN6AB18055setupEb+0x9c>)
   b6846:	f7ff fb16 	bl	b5e76 <_ZNK5spark6Logger5errorEPKcz>
   b684a:	e7e8      	b.n	b681e <_ZN6AB18055setupEb+0x66>
   b684c:	2003dfa4 	.word	0x2003dfa4
   b6850:	2003e6a8 	.word	0x2003e6a8
   b6854:	2003e3d8 	.word	0x2003e3d8
   b6858:	000bd330 	.word	0x000bd330
   b685c:	000b6115 	.word	0x000b6115
   b6860:	000b5e1f 	.word	0x000b5e1f
   b6864:	000b5e0b 	.word	0x000b5e0b
   b6868:	000bd34d 	.word	0x000bd34d

000b686c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b686c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b686e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6870:	4604      	mov	r4, r0
	switch (__op)
   b6872:	d104      	bne.n	b687e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b6874:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6876:	6003      	str	r3, [r0, #0]
      }
   b6878:	2000      	movs	r0, #0
   b687a:	b003      	add	sp, #12
   b687c:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b687e:	2a02      	cmp	r2, #2
   b6880:	d00c      	beq.n	b689c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b6882:	2a03      	cmp	r2, #3
   b6884:	d1f8      	bne.n	b6878 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6886:	6804      	ldr	r4, [r0, #0]
   b6888:	2c00      	cmp	r4, #0
   b688a:	d0f5      	beq.n	b6878 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b688c:	4620      	mov	r0, r4
   b688e:	f7ff facb 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6892:	2110      	movs	r1, #16
   b6894:	4620      	mov	r0, r4
   b6896:	f7fd fc02 	bl	b409e <_ZdlPvj>
   b689a:	e7ed      	b.n	b6878 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b689c:	6809      	ldr	r1, [r1, #0]
   b689e:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b68a0:	2010      	movs	r0, #16
   b68a2:	f7fd fbf8 	bl	b4096 <_Znwj>
   b68a6:	4605      	mov	r5, r0
   b68a8:	b110      	cbz	r0, b68b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b68aa:	9901      	ldr	r1, [sp, #4]
   b68ac:	f7ff fef0 	bl	b6690 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b68b0:	6025      	str	r5, [r4, #0]
	}
   b68b2:	e7e1      	b.n	b6878 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b68b4 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b68b4:	4b01      	ldr	r3, [pc, #4]	; (b68bc <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b68b6:	4a02      	ldr	r2, [pc, #8]	; (b68c0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b68b8:	601a      	str	r2, [r3, #0]
}
   b68ba:	4770      	bx	lr
   b68bc:	2003e3d8 	.word	0x2003e3d8
   b68c0:	000bd365 	.word	0x000bd365

000b68c4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b68c4:	4770      	bx	lr

000b68c6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b68c6:	b510      	push	{r4, lr}
}
   b68c8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b68ca:	4604      	mov	r4, r0
}
   b68cc:	f7fd fbe7 	bl	b409e <_ZdlPvj>
   b68d0:	4620      	mov	r0, r4
   b68d2:	bd10      	pop	{r4, pc}

000b68d4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b68d4:	6803      	ldr	r3, [r0, #0]
   b68d6:	b2c9      	uxtb	r1, r1
   b68d8:	689b      	ldr	r3, [r3, #8]
   b68da:	4718      	bx	r3

000b68dc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b68dc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b68de:	4d03      	ldr	r5, [pc, #12]	; (b68ec <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b68e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b68e4:	e9c0 5100 	strd	r5, r1, [r0]
}
   b68e8:	bd30      	pop	{r4, r5, pc}
   b68ea:	bf00      	nop
   b68ec:	000bd390 	.word	0x000bd390

000b68f0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b68f0:	6840      	ldr	r0, [r0, #4]
   b68f2:	f002 bcf9 	b.w	b92e8 <_ZN7TwoWire5beginEv>

000b68f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b68f6:	b510      	push	{r4, lr}
   b68f8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b68fa:	6800      	ldr	r0, [r0, #0]
   b68fc:	f002 fd4f 	bl	b939e <_ZN7TwoWire6unlockEv>
   b6900:	4620      	mov	r0, r4
   b6902:	bd10      	pop	{r4, pc}

000b6904 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6908:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b690a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b690c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b690e:	460d      	mov	r5, r1
   b6910:	4616      	mov	r6, r2
   b6912:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b6914:	f002 fd3a 	bl	b938c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6918:	b1a7      	cbz	r7, b6944 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b691a:	68e1      	ldr	r1, [r4, #12]
   b691c:	6860      	ldr	r0, [r4, #4]
   b691e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6922:	f002 fd14 	bl	b934e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6926:	0a29      	lsrs	r1, r5, #8
   b6928:	6860      	ldr	r0, [r4, #4]
   b692a:	f7ff ffd3 	bl	b68d4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b692e:	4629      	mov	r1, r5
   b6930:	6860      	ldr	r0, [r4, #4]
   b6932:	f7ff ffcf 	bl	b68d4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b6936:	6860      	ldr	r0, [r4, #4]
   b6938:	2100      	movs	r1, #0
   b693a:	f002 fd23 	bl	b9384 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b693e:	b148      	cbz	r0, b6954 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6940:	2400      	movs	r4, #0
   b6942:	e000      	b.n	b6946 <_ZN6MB85RC8readDataEjPhj+0x42>
   b6944:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6946:	a801      	add	r0, sp, #4
   b6948:	f7ff ffd5 	bl	b68f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b694c:	4620      	mov	r0, r4
   b694e:	b003      	add	sp, #12
   b6950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b6954:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b6956:	7b21      	ldrb	r1, [r4, #12]
   b6958:	6860      	ldr	r0, [r4, #4]
   b695a:	46b8      	mov	r8, r7
   b695c:	bf28      	it	cs
   b695e:	f04f 0820 	movcs.w	r8, #32
   b6962:	2301      	movs	r3, #1
   b6964:	4642      	mov	r2, r8
   b6966:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b696a:	f002 fcda 	bl	b9322 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b696e:	f005 f82f 	bl	bb9d0 <_Z19__fetch_global_Wirev>
   b6972:	6803      	ldr	r3, [r0, #0]
   b6974:	691b      	ldr	r3, [r3, #16]
   b6976:	4798      	blx	r3
   b6978:	4540      	cmp	r0, r8
   b697a:	dbe1      	blt.n	b6940 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b697c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6980:	f005 f826 	bl	bb9d0 <_Z19__fetch_global_Wirev>
   b6984:	6803      	ldr	r3, [r0, #0]
   b6986:	695b      	ldr	r3, [r3, #20]
   b6988:	4798      	blx	r3
   b698a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b698e:	454e      	cmp	r6, r9
   b6990:	d1f6      	bne.n	b6980 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6992:	4445      	add	r5, r8
				dataLen--;
   b6994:	eba7 0708 	sub.w	r7, r7, r8
   b6998:	e7be      	b.n	b6918 <_ZN6MB85RC8readDataEjPhj+0x14>

000b699a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b699a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b699e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b69a0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b69a2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b69a4:	460e      	mov	r6, r1
   b69a6:	4690      	mov	r8, r2
   b69a8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b69aa:	f002 fcef 	bl	b938c <_ZN7TwoWire4lockEv>
   b69ae:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b69b2:	f1b9 0f00 	cmp.w	r9, #0
   b69b6:	d02a      	beq.n	b6a0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b69b8:	b34d      	cbz	r5, b6a0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b69ba:	68e1      	ldr	r1, [r4, #12]
   b69bc:	6860      	ldr	r0, [r4, #4]
   b69be:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b69c2:	f002 fcc4 	bl	b934e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b69c6:	0a31      	lsrs	r1, r6, #8
   b69c8:	6860      	ldr	r0, [r4, #4]
   b69ca:	f7ff ff83 	bl	b68d4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b69ce:	6860      	ldr	r0, [r4, #4]
   b69d0:	4631      	mov	r1, r6
   b69d2:	f7ff ff7f 	bl	b68d4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b69d6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b69da:	4647      	mov	r7, r8
   b69dc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b69e0:	6860      	ldr	r0, [r4, #4]
   b69e2:	f817 1b01 	ldrb.w	r1, [r7], #1
   b69e6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b69e8:	3d01      	subs	r5, #1
				wire.write(*data);
   b69ea:	689b      	ldr	r3, [r3, #8]
   b69ec:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b69ee:	4555      	cmp	r5, sl
   b69f0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b69f4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b69f6:	d001      	beq.n	b69fc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b69f8:	2d00      	cmp	r5, #0
   b69fa:	d1f1      	bne.n	b69e0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b69fc:	6860      	ldr	r0, [r4, #4]
   b69fe:	2101      	movs	r1, #1
   b6a00:	f002 fcc0 	bl	b9384 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6a04:	2800      	cmp	r0, #0
   b6a06:	d0d7      	beq.n	b69b8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6a08:	f04f 0900 	mov.w	r9, #0
   b6a0c:	e7d1      	b.n	b69b2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b6a0e:	a801      	add	r0, sp, #4
   b6a10:	f7ff ff71 	bl	b68f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6a14:	4648      	mov	r0, r9
   b6a16:	b003      	add	sp, #12
   b6a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6a1c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a20:	b08b      	sub	sp, #44	; 0x2c
   b6a22:	460e      	mov	r6, r1
   b6a24:	4615      	mov	r5, r2
   b6a26:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6a28:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6a2a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6a2c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b6a2e:	f002 fcad 	bl	b938c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b6a32:	42ae      	cmp	r6, r5
   b6a34:	d229      	bcs.n	b6a8a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b6a36:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b6a38:	4425      	add	r5, r4
			while(numBytes > 0) {
   b6a3a:	b18c      	cbz	r4, b6a60 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b6a3c:	2c1e      	cmp	r4, #30
   b6a3e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6a40:	f8d8 3000 	ldr.w	r3, [r8]
   b6a44:	bf28      	it	cs
   b6a46:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6a48:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b6a4a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6a4e:	aa02      	add	r2, sp, #8
   b6a50:	463b      	mov	r3, r7
   b6a52:	4631      	mov	r1, r6
   b6a54:	4640      	mov	r0, r8
				framAddrTo -= count;
   b6a56:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6a58:	47c8      	blx	r9
				if (!result) {
   b6a5a:	b948      	cbnz	r0, b6a70 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6a5c:	2400      	movs	r4, #0
   b6a5e:	e000      	b.n	b6a62 <_ZN6MB85RC8moveDataEjjj+0x46>
   b6a60:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6a62:	a801      	add	r0, sp, #4
   b6a64:	f7ff ff47 	bl	b68f6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6a68:	4620      	mov	r0, r4
   b6a6a:	b00b      	add	sp, #44	; 0x2c
   b6a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6a70:	f8d8 3000 	ldr.w	r3, [r8]
   b6a74:	aa02      	add	r2, sp, #8
   b6a76:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6a7a:	4629      	mov	r1, r5
   b6a7c:	463b      	mov	r3, r7
   b6a7e:	4640      	mov	r0, r8
   b6a80:	47c8      	blx	r9
				if (!result) {
   b6a82:	2800      	cmp	r0, #0
   b6a84:	d0ea      	beq.n	b6a5c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6a86:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6a88:	e7d7      	b.n	b6a3a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b6a8a:	d9e9      	bls.n	b6a60 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6a8c:	2c00      	cmp	r4, #0
   b6a8e:	d0e7      	beq.n	b6a60 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6a90:	f8d8 3000 	ldr.w	r3, [r8]
   b6a94:	2c1e      	cmp	r4, #30
   b6a96:	4627      	mov	r7, r4
   b6a98:	bf28      	it	cs
   b6a9a:	271e      	movcs	r7, #30
   b6a9c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6aa0:	aa02      	add	r2, sp, #8
   b6aa2:	463b      	mov	r3, r7
   b6aa4:	4631      	mov	r1, r6
   b6aa6:	4640      	mov	r0, r8
   b6aa8:	47c8      	blx	r9
				if (!result) {
   b6aaa:	2800      	cmp	r0, #0
   b6aac:	d0d6      	beq.n	b6a5c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6aae:	f8d8 3000 	ldr.w	r3, [r8]
   b6ab2:	aa02      	add	r2, sp, #8
   b6ab4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6ab8:	4629      	mov	r1, r5
   b6aba:	463b      	mov	r3, r7
   b6abc:	4640      	mov	r0, r8
   b6abe:	47c8      	blx	r9
				if (!result) {
   b6ac0:	2800      	cmp	r0, #0
   b6ac2:	d0cb      	beq.n	b6a5c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6ac4:	443e      	add	r6, r7
				framAddrTo += count;
   b6ac6:	443d      	add	r5, r7
				numBytes -= count;
   b6ac8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6aca:	e7df      	b.n	b6a8c <_ZN6MB85RC8moveDataEjjj+0x70>

000b6acc <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b6acc:	6001      	str	r1, [r0, #0]
   b6ace:	7102      	strb	r2, [r0, #4]
{
}
   b6ad0:	4770      	bx	lr

000b6ad2 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b6ad2:	6800      	ldr	r0, [r0, #0]
   b6ad4:	6803      	ldr	r3, [r0, #0]
   b6ad6:	68db      	ldr	r3, [r3, #12]
   b6ad8:	4718      	bx	r3

000b6ada <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b6ada:	6800      	ldr	r0, [r0, #0]
   b6adc:	6803      	ldr	r3, [r0, #0]
   b6ade:	6a1b      	ldr	r3, [r3, #32]
   b6ae0:	4718      	bx	r3

000b6ae2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b6ae2:	6800      	ldr	r0, [r0, #0]
   b6ae4:	6803      	ldr	r3, [r0, #0]
   b6ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ae8:	4718      	bx	r3

000b6aea <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b6aea:	7900      	ldrb	r0, [r0, #4]
   b6aec:	4770      	bx	lr

000b6aee <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b6aee:	6800      	ldr	r0, [r0, #0]
   b6af0:	6803      	ldr	r3, [r0, #0]
   b6af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6af4:	4718      	bx	r3

000b6af6 <_ZN10RHDatagram6sendtoEPhhh>:
{
   b6af6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6af8:	4605      	mov	r5, r0
   b6afa:	460c      	mov	r4, r1
    setHeaderTo(address);
   b6afc:	4619      	mov	r1, r3
{
   b6afe:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b6b00:	f7ff fff5 	bl	b6aee <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b6b04:	6828      	ldr	r0, [r5, #0]
   b6b06:	9a01      	ldr	r2, [sp, #4]
   b6b08:	6803      	ldr	r3, [r0, #0]
   b6b0a:	695b      	ldr	r3, [r3, #20]
   b6b0c:	4621      	mov	r1, r4
}
   b6b0e:	b003      	add	sp, #12
   b6b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b6b14:	4718      	bx	r3

000b6b16 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b6b16:	6800      	ldr	r0, [r0, #0]
   b6b18:	6803      	ldr	r3, [r0, #0]
   b6b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b1c:	4718      	bx	r3

000b6b1e <_ZN10RHDatagram14setThisAddressEh>:
{
   b6b1e:	b538      	push	{r3, r4, r5, lr}
   b6b20:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b6b22:	6800      	ldr	r0, [r0, #0]
   b6b24:	6803      	ldr	r3, [r0, #0]
{
   b6b26:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b6b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6b2a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b6b2c:	4629      	mov	r1, r5
   b6b2e:	4620      	mov	r0, r4
   b6b30:	f7ff fff1 	bl	b6b16 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b6b34:	7125      	strb	r5, [r4, #4]
}
   b6b36:	bd38      	pop	{r3, r4, r5, pc}

000b6b38 <_ZN10RHDatagram4initEv>:
{
   b6b38:	b538      	push	{r3, r4, r5, lr}
   b6b3a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b6b3c:	6800      	ldr	r0, [r0, #0]
   b6b3e:	6803      	ldr	r3, [r0, #0]
   b6b40:	689b      	ldr	r3, [r3, #8]
   b6b42:	4798      	blx	r3
    if (ret)
   b6b44:	4605      	mov	r5, r0
   b6b46:	b118      	cbz	r0, b6b50 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b6b48:	7921      	ldrb	r1, [r4, #4]
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	f7ff ffe7 	bl	b6b1e <_ZN10RHDatagram14setThisAddressEh>
}
   b6b50:	4628      	mov	r0, r5
   b6b52:	bd38      	pop	{r3, r4, r5, pc}

000b6b54 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b6b54:	6800      	ldr	r0, [r0, #0]
   b6b56:	6803      	ldr	r3, [r0, #0]
   b6b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b5a:	4718      	bx	r3

000b6b5c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b6b5c:	6800      	ldr	r0, [r0, #0]
   b6b5e:	6803      	ldr	r3, [r0, #0]
   b6b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6b62:	4718      	bx	r3

000b6b64 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b6b64:	6800      	ldr	r0, [r0, #0]
   b6b66:	6803      	ldr	r3, [r0, #0]
   b6b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6b6a:	4718      	bx	r3

000b6b6c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b6b6c:	6800      	ldr	r0, [r0, #0]
   b6b6e:	6803      	ldr	r3, [r0, #0]
   b6b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6b72:	4718      	bx	r3

000b6b74 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b6b74:	6800      	ldr	r0, [r0, #0]
   b6b76:	6803      	ldr	r3, [r0, #0]
   b6b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6b7a:	4718      	bx	r3

000b6b7c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b6b7c:	6800      	ldr	r0, [r0, #0]
   b6b7e:	6803      	ldr	r3, [r0, #0]
   b6b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6b82:	4718      	bx	r3

000b6b84 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b6b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6b88:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b6b8a:	6800      	ldr	r0, [r0, #0]
{
   b6b8c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b6b8e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b6b90:	6803      	ldr	r3, [r0, #0]
   b6b92:	691b      	ldr	r3, [r3, #16]
{
   b6b94:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b6b98:	4798      	blx	r3
   b6b9a:	4605      	mov	r5, r0
   b6b9c:	b1c8      	cbz	r0, b6bd2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b6b9e:	b11e      	cbz	r6, b6ba8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b6ba0:	4620      	mov	r0, r4
   b6ba2:	f7ff ffe3 	bl	b6b6c <_ZN10RHDatagram10headerFromEv>
   b6ba6:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b6ba8:	f1b9 0f00 	cmp.w	r9, #0
   b6bac:	d004      	beq.n	b6bb8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b6bae:	4620      	mov	r0, r4
   b6bb0:	f7ff ffd8 	bl	b6b64 <_ZN10RHDatagram8headerToEv>
   b6bb4:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b6bb8:	f1b8 0f00 	cmp.w	r8, #0
   b6bbc:	d004      	beq.n	b6bc8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b6bbe:	4620      	mov	r0, r4
   b6bc0:	f7ff ffd8 	bl	b6b74 <_ZN10RHDatagram8headerIdEv>
   b6bc4:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b6bc8:	b11f      	cbz	r7, b6bd2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b6bca:	4620      	mov	r0, r4
   b6bcc:	f7ff ffd6 	bl	b6b7c <_ZN10RHDatagram11headerFlagsEv>
   b6bd0:	7038      	strb	r0, [r7, #0]
}
   b6bd2:	4628      	mov	r0, r5
   b6bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6bd8 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b6bd8:	2001      	movs	r0, #1
   b6bda:	4770      	bx	lr

000b6bdc <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b6bdc:	7903      	ldrb	r3, [r0, #4]
   b6bde:	2b03      	cmp	r3, #3
   b6be0:	d0fc      	beq.n	b6bdc <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b6be2:	2001      	movs	r0, #1
   b6be4:	4770      	bx	lr

000b6be6 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b6be6:	2000      	movs	r0, #0
   b6be8:	4770      	bx	lr

000b6bea <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b6bea:	7181      	strb	r1, [r0, #6]
}
   b6bec:	4770      	bx	lr

000b6bee <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b6bee:	7141      	strb	r1, [r0, #5]
}
   b6bf0:	4770      	bx	lr

000b6bf2 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b6bf2:	72c1      	strb	r1, [r0, #11]
}
   b6bf4:	4770      	bx	lr

000b6bf6 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b6bf6:	7301      	strb	r1, [r0, #12]
}
   b6bf8:	4770      	bx	lr

000b6bfa <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b6bfa:	7341      	strb	r1, [r0, #13]
}
   b6bfc:	4770      	bx	lr

000b6bfe <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b6bfe:	7b83      	ldrb	r3, [r0, #14]
   b6c00:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b6c04:	4311      	orrs	r1, r2
   b6c06:	7381      	strb	r1, [r0, #14]
}
   b6c08:	4770      	bx	lr

000b6c0a <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b6c0a:	79c0      	ldrb	r0, [r0, #7]
}
   b6c0c:	4770      	bx	lr

000b6c0e <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b6c0e:	7a00      	ldrb	r0, [r0, #8]
}
   b6c10:	4770      	bx	lr

000b6c12 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b6c12:	7a40      	ldrb	r0, [r0, #9]
}
   b6c14:	4770      	bx	lr

000b6c16 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b6c16:	7a80      	ldrb	r0, [r0, #10]
}
   b6c18:	4770      	bx	lr

000b6c1a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b6c1a:	8a00      	ldrh	r0, [r0, #16]
}
   b6c1c:	b200      	sxth	r0, r0
   b6c1e:	4770      	bx	lr

000b6c20 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b6c20:	7900      	ldrb	r0, [r0, #4]
}
   b6c22:	4770      	bx	lr

000b6c24 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b6c24:	7101      	strb	r1, [r0, #4]
}
   b6c26:	4770      	bx	lr

000b6c28 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b6c28:	8a40      	ldrh	r0, [r0, #18]
}
   b6c2a:	b280      	uxth	r0, r0
   b6c2c:	4770      	bx	lr

000b6c2e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b6c2e:	8a80      	ldrh	r0, [r0, #20]
}
   b6c30:	b280      	uxth	r0, r0
   b6c32:	4770      	bx	lr

000b6c34 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b6c34:	8ac0      	ldrh	r0, [r0, #22]
}
   b6c36:	b280      	uxth	r0, r0
   b6c38:	4770      	bx	lr

000b6c3a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b6c3a:	b538      	push	{r3, r4, r5, lr}
   b6c3c:	4605      	mov	r5, r0
   b6c3e:	460c      	mov	r4, r1
    while (!available())
   b6c40:	682b      	ldr	r3, [r5, #0]
   b6c42:	4628      	mov	r0, r5
   b6c44:	68db      	ldr	r3, [r3, #12]
   b6c46:	4798      	blx	r3
   b6c48:	b928      	cbnz	r0, b6c56 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b6c4a:	2c00      	cmp	r4, #0
   b6c4c:	d0f8      	beq.n	b6c40 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b6c4e:	4620      	mov	r0, r4
   b6c50:	f001 fe68 	bl	b8924 <delay>
   b6c54:	e7f4      	b.n	b6c40 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b6c56:	bd38      	pop	{r3, r4, r5, pc}

000b6c58 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b6c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c5a:	4605      	mov	r5, r0
   b6c5c:	460f      	mov	r7, r1
   b6c5e:	4614      	mov	r4, r2
   b6c60:	f001 fae6 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
   b6c64:	4606      	mov	r6, r0
   b6c66:	f001 fae3 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6c6a:	1b80      	subs	r0, r0, r6
   b6c6c:	42b8      	cmp	r0, r7
   b6c6e:	d20a      	bcs.n	b6c86 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b6c70:	682b      	ldr	r3, [r5, #0]
   b6c72:	4628      	mov	r0, r5
   b6c74:	68db      	ldr	r3, [r3, #12]
   b6c76:	4798      	blx	r3
   b6c78:	b930      	cbnz	r0, b6c88 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b6c7a:	2c00      	cmp	r4, #0
   b6c7c:	d0f3      	beq.n	b6c66 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b6c7e:	4620      	mov	r0, r4
   b6c80:	f001 fe50 	bl	b8924 <delay>
   b6c84:	e7ef      	b.n	b6c66 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b6c86:	2000      	movs	r0, #0
}
   b6c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c8a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b6c8a:	b570      	push	{r4, r5, r6, lr}
   b6c8c:	4604      	mov	r4, r0
   b6c8e:	460e      	mov	r6, r1
   b6c90:	f001 face 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
   b6c94:	4605      	mov	r5, r0
   b6c96:	f001 facb 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6c9a:	1b40      	subs	r0, r0, r5
   b6c9c:	42b0      	cmp	r0, r6
   b6c9e:	d204      	bcs.n	b6caa <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b6ca0:	7923      	ldrb	r3, [r4, #4]
   b6ca2:	2b03      	cmp	r3, #3
   b6ca4:	d0f7      	beq.n	b6c96 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b6ca6:	2001      	movs	r0, #1
}
   b6ca8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b6caa:	2000      	movs	r0, #0
   b6cac:	e7fc      	b.n	b6ca8 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b6cae <_ZN15RHGenericDriver7waitCADEv>:
{
   b6cae:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b6cb0:	69c3      	ldr	r3, [r0, #28]
{
   b6cb2:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b6cb4:	b1b3      	cbz	r3, b6ce4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6cb6:	f001 fabb 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6cba:	2664      	movs	r6, #100	; 0x64
   b6cbc:	4605      	mov	r5, r0
    while (isChannelActive())
   b6cbe:	6823      	ldr	r3, [r4, #0]
   b6cc0:	4620      	mov	r0, r4
   b6cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6cc4:	4798      	blx	r3
   b6cc6:	b168      	cbz	r0, b6ce4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6cc8:	f001 fab2 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b6ccc:	69e3      	ldr	r3, [r4, #28]
   b6cce:	1b40      	subs	r0, r0, r5
   b6cd0:	4298      	cmp	r0, r3
   b6cd2:	d809      	bhi.n	b6ce8 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6cd4:	210a      	movs	r1, #10
   b6cd6:	2001      	movs	r0, #1
   b6cd8:	f004 f82b 	bl	bad32 <_Z6randomii>
   b6cdc:	4370      	muls	r0, r6
   b6cde:	f001 fe21 	bl	b8924 <delay>
    while (isChannelActive())
   b6ce2:	e7ec      	b.n	b6cbe <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b6ce4:	2001      	movs	r0, #1
}
   b6ce6:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b6ce8:	2000      	movs	r0, #0
   b6cea:	e7fc      	b.n	b6ce6 <_ZN15RHGenericDriver7waitCADEv+0x38>

000b6cec <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b6cec:	4a06      	ldr	r2, [pc, #24]	; (b6d08 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b6cee:	6002      	str	r2, [r0, #0]
   b6cf0:	21ff      	movs	r1, #255	; 0xff
   b6cf2:	2200      	movs	r2, #0
   b6cf4:	7102      	strb	r2, [r0, #4]
   b6cf6:	7141      	strb	r1, [r0, #5]
   b6cf8:	8242      	strh	r2, [r0, #18]
   b6cfa:	72c1      	strb	r1, [r0, #11]
   b6cfc:	8282      	strh	r2, [r0, #20]
   b6cfe:	8181      	strh	r1, [r0, #12]
   b6d00:	7382      	strb	r2, [r0, #14]
   b6d02:	82c2      	strh	r2, [r0, #22]
   b6d04:	61c2      	str	r2, [r0, #28]
}
   b6d06:	4770      	bx	lr
   b6d08:	000bd3ac 	.word	0x000bd3ac

000b6d0c <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b6d0c:	4770      	bx	lr

000b6d0e <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b6d0e:	4770      	bx	lr

000b6d10 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b6d10:	4770      	bx	lr

000b6d12 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b6d12:	4770      	bx	lr

000b6d14 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b6d14:	4770      	bx	lr

000b6d16 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b6d16:	7141      	strb	r1, [r0, #5]
}
   b6d18:	4770      	bx	lr

000b6d1a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b6d1a:	7181      	strb	r1, [r0, #6]
}
   b6d1c:	4770      	bx	lr

000b6d1e <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b6d1e:	7101      	strb	r1, [r0, #4]
}
   b6d20:	4770      	bx	lr
	...

000b6d24 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6d24:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b6d26:	4d03      	ldr	r5, [pc, #12]	; (b6d34 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b6d28:	6005      	str	r5, [r0, #0]
   b6d2a:	7101      	strb	r1, [r0, #4]
   b6d2c:	7142      	strb	r2, [r0, #5]
   b6d2e:	7183      	strb	r3, [r0, #6]
}
   b6d30:	bd30      	pop	{r4, r5, pc}
   b6d32:	bf00      	nop
   b6d34:	000bd42c 	.word	0x000bd42c

000b6d38 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6d38:	4770      	bx	lr

000b6d3a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6d3a:	b510      	push	{r4, lr}
  }
   b6d3c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6d3e:	4604      	mov	r4, r0
  }
   b6d40:	f7fd f9ad 	bl	b409e <_ZdlPvj>
   b6d44:	4620      	mov	r0, r4
   b6d46:	bd10      	pop	{r4, pc}

000b6d48 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6d48:	b40e      	push	{r1, r2, r3}
   b6d4a:	b503      	push	{r0, r1, lr}
   b6d4c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b6d4e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6d50:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b6d54:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b6d56:	f003 ffb0 	bl	bacba <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b6d5a:	b002      	add	sp, #8
   b6d5c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6d60:	b003      	add	sp, #12
   b6d62:	4770      	bx	lr

000b6d64 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6d66:	4604      	mov	r4, r0
   b6d68:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6d6a:	7922      	ldrb	r2, [r4, #4]
   b6d6c:	68a3      	ldr	r3, [r4, #8]
   b6d6e:	b132      	cbz	r2, b6d7e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6d70:	b9a3      	cbnz	r3, b6d9c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6d72:	490b      	ldr	r1, [pc, #44]	; (b6da0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6d74:	b002      	add	sp, #8
   b6d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6d7a:	f003 be95 	b.w	baaa8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6d7e:	4a09      	ldr	r2, [pc, #36]	; (b6da4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6d80:	7b26      	ldrb	r6, [r4, #12]
   b6d82:	4d09      	ldr	r5, [pc, #36]	; (b6da8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6d84:	4909      	ldr	r1, [pc, #36]	; (b6dac <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6d86:	7b64      	ldrb	r4, [r4, #13]
   b6d88:	2e01      	cmp	r6, #1
   b6d8a:	bf18      	it	ne
   b6d8c:	4629      	movne	r1, r5
   b6d8e:	e9cd 1400 	strd	r1, r4, [sp]
   b6d92:	4907      	ldr	r1, [pc, #28]	; (b6db0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6d94:	f7ff ffd8 	bl	b6d48 <_ZN5Print6printfEPKcz>
  }
   b6d98:	b002      	add	sp, #8
   b6d9a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6d9c:	4a05      	ldr	r2, [pc, #20]	; (b6db4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6d9e:	e7ef      	b.n	b6d80 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6da0:	000bd469 	.word	0x000bd469
   b6da4:	000bd821 	.word	0x000bd821
   b6da8:	000bd465 	.word	0x000bd465
   b6dac:	000bd461 	.word	0x000bd461
   b6db0:	000bd47f 	.word	0x000bd47f
   b6db4:	000bd458 	.word	0x000bd458

000b6db8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6db8:	b510      	push	{r4, lr}
   b6dba:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b6dbc:	f7ff ffb2 	bl	b6d24 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b6dc0:	4b05      	ldr	r3, [pc, #20]	; (b6dd8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b6dc2:	6023      	str	r3, [r4, #0]
  {
   b6dc4:	4b05      	ldr	r3, [pc, #20]	; (b6ddc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b6dc6:	60a3      	str	r3, [r4, #8]
   b6dc8:	2301      	movs	r3, #1
   b6dca:	7323      	strb	r3, [r4, #12]
   b6dcc:	2300      	movs	r3, #0
   b6dce:	6123      	str	r3, [r4, #16]
   b6dd0:	82a3      	strh	r3, [r4, #20]
{
}
   b6dd2:	4620      	mov	r0, r4
   b6dd4:	bd10      	pop	{r4, pc}
   b6dd6:	bf00      	nop
   b6dd8:	000bd4b8 	.word	0x000bd4b8
   b6ddc:	000bd4a4 	.word	0x000bd4a4

000b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b6de0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b6de2:	4c0b      	ldr	r4, [pc, #44]	; (b6e10 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6de4:	7821      	ldrb	r1, [r4, #0]
   b6de6:	f3bf 8f5b 	dmb	ish
   b6dea:	f011 0101 	ands.w	r1, r1, #1
   b6dee:	d10b      	bne.n	b6e08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6df0:	4620      	mov	r0, r4
   b6df2:	9101      	str	r1, [sp, #4]
   b6df4:	f7fd f962 	bl	b40bc <__cxa_guard_acquire>
   b6df8:	9901      	ldr	r1, [sp, #4]
   b6dfa:	b128      	cbz	r0, b6e08 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6dfc:	4805      	ldr	r0, [pc, #20]	; (b6e14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6dfe:	f003 ffb1 	bl	bad64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6e02:	4620      	mov	r0, r4
   b6e04:	f7fd f95f 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b6e08:	4802      	ldr	r0, [pc, #8]	; (b6e14 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6e0a:	b002      	add	sp, #8
   b6e0c:	bd10      	pop	{r4, pc}
   b6e0e:	bf00      	nop
   b6e10:	2003e3e0 	.word	0x2003e3e0
   b6e14:	2003e3e4 	.word	0x2003e3e4

000b6e18 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b6e18:	b507      	push	{r0, r1, r2, lr}
   b6e1a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b6e1c:	f7ff ffe0 	bl	b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6e20:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b6e22:	b003      	add	sp, #12
   b6e24:	f85d eb04 	ldr.w	lr, [sp], #4
   b6e28:	f004 b854 	b.w	baed4 <_ZN8SPIClass8transferEh>

000b6e2c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b6e2c:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b6e2e:	f7ff ffd7 	bl	b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b6e32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6e36:	f004 b853 	b.w	baee0 <_ZN8SPIClass15attachInterruptEv>

000b6e3a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b6e3a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b6e3c:	f7ff ffd0 	bl	b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b6e40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6e44:	f004 b84d 	b.w	baee2 <_ZN8SPIClass15detachInterruptEv>

000b6e48 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b6e48:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b6e4a:	7903      	ldrb	r3, [r0, #4]
   b6e4c:	2b04      	cmp	r3, #4
   b6e4e:	d020      	beq.n	b6e92 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b6e50:	2b03      	cmp	r3, #3
   b6e52:	d020      	beq.n	b6e96 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b6e54:	2b02      	cmp	r3, #2
   b6e56:	d020      	beq.n	b6e9a <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b6e58:	4a11      	ldr	r2, [pc, #68]	; (b6ea0 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b6e5a:	4912      	ldr	r1, [pc, #72]	; (b6ea4 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b6e5c:	2b01      	cmp	r3, #1
   b6e5e:	bf18      	it	ne
   b6e60:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b6e62:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b6e64:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b6e66:	3901      	subs	r1, #1
   b6e68:	bf18      	it	ne
   b6e6a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b6e6c:	b133      	cbz	r3, b6e7c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b6e6e:	2b01      	cmp	r3, #1
   b6e70:	d004      	beq.n	b6e7c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b6e72:	2b02      	cmp	r3, #2
   b6e74:	d002      	beq.n	b6e7c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b6e76:	2b03      	cmp	r3, #3
   b6e78:	bf18      	it	ne
   b6e7a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b6e7c:	2400      	movs	r4, #0
   b6e7e:	7304      	strb	r4, [r0, #12]
   b6e80:	6102      	str	r2, [r0, #16]
   b6e82:	7501      	strb	r1, [r0, #20]
   b6e84:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b6e86:	f7ff ffab 	bl	b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b6e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6e8e:	f003 bf73 	b.w	bad78 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b6e92:	4a05      	ldr	r2, [pc, #20]	; (b6ea8 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b6e94:	e7e5      	b.n	b6e62 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b6e96:	4a05      	ldr	r2, [pc, #20]	; (b6eac <_ZN13RHHardwareSPI5beginEv+0x64>)
   b6e98:	e7e3      	b.n	b6e62 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b6e9a:	4a05      	ldr	r2, [pc, #20]	; (b6eb0 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b6e9c:	e7e1      	b.n	b6e62 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b6e9e:	bf00      	nop
   b6ea0:	001e8480 	.word	0x001e8480
   b6ea4:	000f4240 	.word	0x000f4240
   b6ea8:	00f42400 	.word	0x00f42400
   b6eac:	007a1200 	.word	0x007a1200
   b6eb0:	003d0900 	.word	0x003d0900

000b6eb4 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b6eb4:	b508      	push	{r3, lr}
        instance().end();
   b6eb6:	f7ff ff93 	bl	b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b6eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6ebe:	f003 bf6f 	b.w	bada0 <_ZN8SPIClass3endEv>

000b6ec2 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b6ec2:	b510      	push	{r4, lr}
   b6ec4:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b6ec6:	f7ff ff8b 	bl	b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6eca:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b6ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6ed2:	f003 bf91 	b.w	badf8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6ed6 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b6ed6:	b508      	push	{r3, lr}
        instance().endTransaction();
   b6ed8:	f7ff ff82 	bl	b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b6edc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6ee0:	f003 bf70 	b.w	badc4 <_ZN8SPIClass14endTransactionEv>

000b6ee4 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b6ee4:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b6ee6:	f7ff ff7b 	bl	b6de0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b6eea:	bd08      	pop	{r3, pc}

000b6eec <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b6eec:	2300      	movs	r3, #0
   b6eee:	4802      	ldr	r0, [pc, #8]	; (b6ef8 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b6ef0:	461a      	mov	r2, r3
   b6ef2:	4619      	mov	r1, r3
   b6ef4:	f7ff bf60 	b.w	b6db8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b6ef8:	2003e3ec 	.word	0x2003e3ec

000b6efc <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b6efc:	2a01      	cmp	r2, #1
   b6efe:	d105      	bne.n	b6f0c <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b6f00:	7a00      	ldrb	r0, [r0, #8]
   b6f02:	780b      	ldrb	r3, [r1, #0]
   b6f04:	1a1b      	subs	r3, r3, r0
   b6f06:	4258      	negs	r0, r3
   b6f08:	4158      	adcs	r0, r3
   b6f0a:	4770      	bx	lr
   b6f0c:	2000      	movs	r0, #0
}
   b6f0e:	4770      	bx	lr

000b6f10 <_ZN6RHMesh5doArpEh>:
{
   b6f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6f14:	4c25      	ldr	r4, [pc, #148]	; (b6fac <_ZN6RHMesh5doArpEh+0x9c>)
   b6f16:	2301      	movs	r3, #1
{
   b6f18:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6f1a:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b6f1c:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6f1e:	2300      	movs	r3, #0
{
   b6f20:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b6f22:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6f24:	9300      	str	r3, [sp, #0]
   b6f26:	2203      	movs	r2, #3
   b6f28:	23ff      	movs	r3, #255	; 0xff
   b6f2a:	4621      	mov	r1, r4
{
   b6f2c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6f2e:	f000 fbe5 	bl	b76fc <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b6f32:	b120      	cbz	r0, b6f3e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b6f34:	2500      	movs	r5, #0
}
   b6f36:	4628      	mov	r0, r5
   b6f38:	b006      	add	sp, #24
   b6f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b6f3e:	23fa      	movs	r3, #250	; 0xfa
   b6f40:	f88d 3017 	strb.w	r3, [sp, #23]
   b6f44:	f001 f974 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b6f48:	f106 0904 	add.w	r9, r6, #4
   b6f4c:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b6f4e:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b6f52:	f001 f96d 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
   b6f56:	1a29      	subs	r1, r5, r0
   b6f58:	2900      	cmp	r1, #0
   b6f5a:	ddeb      	ble.n	b6f34 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b6f5c:	2200      	movs	r2, #0
   b6f5e:	b289      	uxth	r1, r1
   b6f60:	4648      	mov	r0, r9
   b6f62:	f7ff fdbe 	bl	b6ae2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b6f66:	2800      	cmp	r0, #0
   b6f68:	d0f3      	beq.n	b6f52 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b6f6a:	2300      	movs	r3, #0
   b6f6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6f70:	e9cd 3300 	strd	r3, r3, [sp]
   b6f74:	f10d 0217 	add.w	r2, sp, #23
   b6f78:	4621      	mov	r1, r4
   b6f7a:	4630      	mov	r0, r6
   b6f7c:	f000 fbc8 	bl	b7710 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b6f80:	4605      	mov	r5, r0
   b6f82:	2800      	cmp	r0, #0
   b6f84:	d0e3      	beq.n	b6f4e <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b6f86:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b6f8a:	2b01      	cmp	r3, #1
   b6f8c:	d9df      	bls.n	b6f4e <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b6f8e:	f894 a000 	ldrb.w	sl, [r4]
   b6f92:	f1ba 0f02 	cmp.w	sl, #2
   b6f96:	d1da      	bne.n	b6f4e <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b6f98:	4648      	mov	r0, r9
   b6f9a:	f7ff fde7 	bl	b6b6c <_ZN10RHDatagram10headerFromEv>
   b6f9e:	4653      	mov	r3, sl
   b6fa0:	4602      	mov	r2, r0
   b6fa2:	4639      	mov	r1, r7
   b6fa4:	4630      	mov	r0, r6
   b6fa6:	f000 fb21 	bl	b75ec <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b6faa:	e7c4      	b.n	b6f36 <_ZN6RHMesh5doArpEh+0x26>
   b6fac:	2003e404 	.word	0x2003e404

000b6fb0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b6fb0:	2a01      	cmp	r2, #1
{
   b6fb2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6fb6:	4607      	mov	r7, r0
   b6fb8:	460e      	mov	r6, r1
   b6fba:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b6fbc:	d93b      	bls.n	b7036 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b6fbe:	794d      	ldrb	r5, [r1, #5]
   b6fc0:	2d02      	cmp	r5, #2
   b6fc2:	d130      	bne.n	b7026 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b6fc4:	f100 0804 	add.w	r8, r0, #4
   b6fc8:	79c9      	ldrb	r1, [r1, #7]
   b6fca:	9101      	str	r1, [sp, #4]
   b6fcc:	4640      	mov	r0, r8
   b6fce:	f7ff fdcd 	bl	b6b6c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b6fd2:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b6fd4:	462b      	mov	r3, r5
   b6fd6:	4602      	mov	r2, r0
   b6fd8:	9901      	ldr	r1, [sp, #4]
   b6fda:	4638      	mov	r0, r7
   b6fdc:	f000 fb06 	bl	b75ec <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b6fe0:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b6fe2:	f106 0308 	add.w	r3, r6, #8
   b6fe6:	2400      	movs	r4, #0
   b6fe8:	4622      	mov	r2, r4
   b6fea:	4295      	cmp	r5, r2
   b6fec:	f104 0401 	add.w	r4, r4, #1
   b6ff0:	b2e4      	uxtb	r4, r4
   b6ff2:	d904      	bls.n	b6ffe <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b6ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6ff8:	7a39      	ldrb	r1, [r7, #8]
   b6ffa:	4291      	cmp	r1, r2
   b6ffc:	d1f4      	bne.n	b6fe8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b6ffe:	f104 0108 	add.w	r1, r4, #8
   b7002:	440e      	add	r6, r1
	while (i < numRoutes)
   b7004:	42a5      	cmp	r5, r4
   b7006:	d916      	bls.n	b7036 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b7008:	f816 1b01 	ldrb.w	r1, [r6], #1
   b700c:	9101      	str	r1, [sp, #4]
   b700e:	4640      	mov	r0, r8
   b7010:	f7ff fdac 	bl	b6b6c <_ZN10RHDatagram10headerFromEv>
   b7014:	3401      	adds	r4, #1
   b7016:	4602      	mov	r2, r0
   b7018:	9901      	ldr	r1, [sp, #4]
   b701a:	2302      	movs	r3, #2
   b701c:	4638      	mov	r0, r7
   b701e:	b2e4      	uxtb	r4, r4
   b7020:	f000 fae4 	bl	b75ec <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b7024:	e7ee      	b.n	b7004 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b7026:	2d03      	cmp	r5, #3
   b7028:	d105      	bne.n	b7036 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b702a:	7989      	ldrb	r1, [r1, #6]
}
   b702c:	b002      	add	sp, #8
   b702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b7032:	f000 bac4 	b.w	b75be <_ZN8RHRouter13deleteRouteToEh>
}
   b7036:	b002      	add	sp, #8
   b7038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b703c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b703c:	b510      	push	{r4, lr}
   b703e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b7040:	f000 fb14 	bl	b766c <_ZN8RHRouterC1ER15RHGenericDriverh>
   b7044:	4b01      	ldr	r3, [pc, #4]	; (b704c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b7046:	6023      	str	r3, [r4, #0]
}
   b7048:	4620      	mov	r0, r4
   b704a:	bd10      	pop	{r4, pc}
   b704c:	000bd4ec 	.word	0x000bd4ec

000b7050 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7054:	2af9      	cmp	r2, #249	; 0xf9
{
   b7056:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b705a:	4606      	mov	r6, r0
   b705c:	460f      	mov	r7, r1
   b705e:	4614      	mov	r4, r2
   b7060:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7062:	d825      	bhi.n	b70b0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b7064:	2bff      	cmp	r3, #255	; 0xff
   b7066:	d114      	bne.n	b7092 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7068:	f8df 8048 	ldr.w	r8, [pc, #72]	; b70b4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b706c:	4640      	mov	r0, r8
   b706e:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7070:	4622      	mov	r2, r4
   b7072:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7074:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b7078:	f005 fa40 	bl	bc4fc <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b707c:	1c62      	adds	r2, r4, #1
   b707e:	f8cd 9020 	str.w	r9, [sp, #32]
   b7082:	462b      	mov	r3, r5
   b7084:	4641      	mov	r1, r8
   b7086:	4630      	mov	r0, r6
   b7088:	b2d2      	uxtb	r2, r2
}
   b708a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b708e:	f000 bb35 	b.w	b76fc <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b7092:	4619      	mov	r1, r3
   b7094:	f000 fa4f 	bl	b7536 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b7098:	2800      	cmp	r0, #0
   b709a:	d1e5      	bne.n	b7068 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b709c:	6833      	ldr	r3, [r6, #0]
   b709e:	4629      	mov	r1, r5
   b70a0:	689b      	ldr	r3, [r3, #8]
   b70a2:	4630      	mov	r0, r6
   b70a4:	4798      	blx	r3
   b70a6:	2800      	cmp	r0, #0
   b70a8:	d1de      	bne.n	b7068 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b70aa:	2002      	movs	r0, #2
}
   b70ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b70b0:	2001      	movs	r0, #1
   b70b2:	e7fb      	b.n	b70ac <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b70b4:	2003e404 	.word	0x2003e404

000b70b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b70b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b70bc:	b089      	sub	sp, #36	; 0x24
   b70be:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b70c0:	23fa      	movs	r3, #250	; 0xfa
   b70c2:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b70c6:	f10d 031f 	add.w	r3, sp, #31
   b70ca:	9303      	str	r3, [sp, #12]
   b70cc:	f10d 031e 	add.w	r3, sp, #30
   b70d0:	9302      	str	r3, [sp, #8]
   b70d2:	4e5d      	ldr	r6, [pc, #372]	; (b7248 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b70d4:	f10d 031d 	add.w	r3, sp, #29
   b70d8:	9301      	str	r3, [sp, #4]
   b70da:	ab07      	add	r3, sp, #28
   b70dc:	9300      	str	r3, [sp, #0]
{     
   b70de:	4689      	mov	r9, r1
   b70e0:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b70e2:	f10d 031b 	add.w	r3, sp, #27
   b70e6:	f10d 021a 	add.w	r2, sp, #26
   b70ea:	4631      	mov	r1, r6
{     
   b70ec:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b70f0:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b70f2:	f000 fb0d 	bl	b7710 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b70f6:	4604      	mov	r4, r0
   b70f8:	b920      	cbnz	r0, b7104 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b70fa:	2400      	movs	r4, #0
}
   b70fc:	4620      	mov	r0, r4
   b70fe:	b009      	add	sp, #36	; 0x24
   b7100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b7104:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b7108:	b373      	cbz	r3, b7168 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b710a:	7832      	ldrb	r2, [r6, #0]
   b710c:	bb62      	cbnz	r2, b7168 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b710e:	f1b8 0f00 	cmp.w	r8, #0
   b7112:	d003      	beq.n	b711c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b7114:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b7118:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b711c:	f1bb 0f00 	cmp.w	fp, #0
   b7120:	d003      	beq.n	b712a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b7122:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7126:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b712a:	f1ba 0f00 	cmp.w	sl, #0
   b712e:	d003      	beq.n	b7138 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b7130:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b7134:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b7138:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b713a:	b11a      	cbz	r2, b7144 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b713c:	9914      	ldr	r1, [sp, #80]	; 0x50
   b713e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7142:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b7144:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b7146:	b11a      	cbz	r2, b7150 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b7148:	9915      	ldr	r1, [sp, #84]	; 0x54
   b714a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b714e:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7150:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7152:	493e      	ldr	r1, [pc, #248]	; (b724c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b7154:	3b01      	subs	r3, #1
   b7156:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7158:	429a      	cmp	r2, r3
		*len = msgLen;
   b715a:	bf88      	it	hi
   b715c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b715e:	783a      	ldrb	r2, [r7, #0]
   b7160:	4648      	mov	r0, r9
   b7162:	f005 f9cb 	bl	bc4fc <memcpy>
	    return true;
   b7166:	e7c9      	b.n	b70fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b7168:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b716c:	2aff      	cmp	r2, #255	; 0xff
   b716e:	d1c4      	bne.n	b70fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7170:	2b01      	cmp	r3, #1
   b7172:	d9c2      	bls.n	b70fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b7174:	7832      	ldrb	r2, [r6, #0]
   b7176:	2a01      	cmp	r2, #1
   b7178:	d1bf      	bne.n	b70fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b717a:	7a2a      	ldrb	r2, [r5, #8]
   b717c:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7180:	42a2      	cmp	r2, r4
   b7182:	d0ba      	beq.n	b70fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b7184:	1edf      	subs	r7, r3, #3
   b7186:	4932      	ldr	r1, [pc, #200]	; (b7250 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b7188:	b2ff      	uxtb	r7, r7
   b718a:	2300      	movs	r3, #0
   b718c:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b7190:	4547      	cmp	r7, r8
   b7192:	d906      	bls.n	b71a2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b7194:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7198:	4282      	cmp	r2, r0
   b719a:	f103 0301 	add.w	r3, r3, #1
   b719e:	d1f5      	bne.n	b718c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b71a0:	e7ab      	b.n	b70fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b71a2:	f105 0904 	add.w	r9, r5, #4
   b71a6:	4648      	mov	r0, r9
   b71a8:	f7ff fce0 	bl	b6b6c <_ZN10RHDatagram10headerFromEv>
   b71ac:	2302      	movs	r3, #2
   b71ae:	4602      	mov	r2, r0
   b71b0:	4621      	mov	r1, r4
   b71b2:	4628      	mov	r0, r5
   b71b4:	f000 fa1a 	bl	b75ec <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b71b8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b71bc:	b193      	cbz	r3, b71e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b71be:	4c22      	ldr	r4, [pc, #136]	; (b7248 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b71c0:	1ba3      	subs	r3, r4, r6
   b71c2:	b2db      	uxtb	r3, r3
   b71c4:	429f      	cmp	r7, r3
   b71c6:	d90c      	bls.n	b71e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b71c8:	78e1      	ldrb	r1, [r4, #3]
   b71ca:	9105      	str	r1, [sp, #20]
   b71cc:	4648      	mov	r0, r9
   b71ce:	f7ff fccd 	bl	b6b6c <_ZN10RHDatagram10headerFromEv>
   b71d2:	9905      	ldr	r1, [sp, #20]
   b71d4:	4602      	mov	r2, r0
   b71d6:	2302      	movs	r3, #2
   b71d8:	4628      	mov	r0, r5
   b71da:	f000 fa07 	bl	b75ec <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b71de:	3401      	adds	r4, #1
   b71e0:	e7ee      	b.n	b71c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b71e2:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b71e4:	682b      	ldr	r3, [r5, #0]
   b71e6:	7872      	ldrb	r2, [r6, #1]
   b71e8:	68db      	ldr	r3, [r3, #12]
   b71ea:	491a      	ldr	r1, [pc, #104]	; (b7254 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b71ec:	4628      	mov	r0, r5
   b71ee:	4798      	blx	r3
   b71f0:	4604      	mov	r4, r0
   b71f2:	b160      	cbz	r0, b720e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b71f4:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b71f6:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b71f8:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b71fa:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b71fe:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7202:	4911      	ldr	r1, [pc, #68]	; (b7248 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7204:	9400      	str	r4, [sp, #0]
   b7206:	4628      	mov	r0, r5
   b7208:	f000 fa78 	bl	b76fc <_ZN8RHRouter10sendtoWaitEPhhhh>
   b720c:	e776      	b.n	b70fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b720e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b7212:	4543      	cmp	r3, r8
   b7214:	f67f af71 	bls.w	b70fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b7218:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b721c:	2b00      	cmp	r3, #0
   b721e:	f43f af6c 	beq.w	b70fa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b7222:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b7226:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7228:	4907      	ldr	r1, [pc, #28]	; (b7248 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b722a:	443e      	add	r6, r7
		tmpMessageLen++;
   b722c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b722e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7230:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7234:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b7236:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7238:	9300      	str	r3, [sp, #0]
   b723a:	4628      	mov	r0, r5
   b723c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b723e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7242:	f000 fa25 	bl	b7690 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b7246:	e759      	b.n	b70fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b7248:	2003e404 	.word	0x2003e404
   b724c:	2003e405 	.word	0x2003e405
   b7250:	2003e407 	.word	0x2003e407
   b7254:	2003e406 	.word	0x2003e406

000b7258 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b725c:	b085      	sub	sp, #20
   b725e:	4680      	mov	r8, r0
   b7260:	461c      	mov	r4, r3
   b7262:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   b7266:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b7268:	4689      	mov	r9, r1
   b726a:	4692      	mov	sl, r2
   b726c:	f000 ffe0 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   b7270:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   b7274:	4404      	add	r4, r0
   b7276:	f000 ffdb 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
   b727a:	1a20      	subs	r0, r4, r0
   b727c:	2800      	cmp	r0, #0
   b727e:	dd16      	ble.n	b72ae <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   b7280:	b281      	uxth	r1, r0
   b7282:	2200      	movs	r2, #0
   b7284:	4658      	mov	r0, fp
   b7286:	f7ff fc2c 	bl	b6ae2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b728a:	2800      	cmp	r0, #0
   b728c:	d0f3      	beq.n	b7276 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   b728e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b7290:	9300      	str	r3, [sp, #0]
   b7292:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b7296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b7298:	9501      	str	r5, [sp, #4]
   b729a:	4652      	mov	r2, sl
   b729c:	4649      	mov	r1, r9
   b729e:	4640      	mov	r0, r8
   b72a0:	f7ff ff0a 	bl	b70b8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b72a4:	2800      	cmp	r0, #0
   b72a6:	d0e6      	beq.n	b7276 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   b72a8:	b005      	add	sp, #20
   b72aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   b72ae:	2000      	movs	r0, #0
   b72b0:	e7fa      	b.n	b72a8 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000b72b4 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b72b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b72b6:	b085      	sub	sp, #20
   b72b8:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b72ba:	3004      	adds	r0, #4
{
   b72bc:	460e      	mov	r6, r1
   b72be:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b72c0:	f7ff fc54 	bl	b6b6c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b72c4:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b72c6:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b72c8:	4631      	mov	r1, r6
   b72ca:	4628      	mov	r0, r5
   b72cc:	f000 f94a 	bl	b7564 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b72d0:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b72d2:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b72d4:	d001      	beq.n	b72da <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b72d6:	2805      	cmp	r0, #5
   b72d8:	d11b      	bne.n	b7312 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b72da:	7831      	ldrb	r1, [r6, #0]
   b72dc:	4628      	mov	r0, r5
   b72de:	f000 f96e 	bl	b75be <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b72e2:	7872      	ldrb	r2, [r6, #1]
   b72e4:	7a2b      	ldrb	r3, [r5, #8]
   b72e6:	429a      	cmp	r2, r3
   b72e8:	d013      	beq.n	b7312 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b72ea:	4c0b      	ldr	r4, [pc, #44]	; (b7318 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b72ec:	2303      	movs	r3, #3
   b72ee:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b72f0:	7833      	ldrb	r3, [r6, #0]
   b72f2:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b72f4:	7871      	ldrb	r1, [r6, #1]
   b72f6:	2302      	movs	r3, #2
   b72f8:	463a      	mov	r2, r7
   b72fa:	4628      	mov	r0, r5
   b72fc:	f000 f976 	bl	b75ec <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b7300:	2300      	movs	r3, #0
   b7302:	9300      	str	r3, [sp, #0]
   b7304:	4621      	mov	r1, r4
   b7306:	7873      	ldrb	r3, [r6, #1]
   b7308:	2202      	movs	r2, #2
   b730a:	4628      	mov	r0, r5
   b730c:	f000 f9f6 	bl	b76fc <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7310:	4604      	mov	r4, r0
}
   b7312:	4620      	mov	r0, r4
   b7314:	b005      	add	sp, #20
   b7316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7318:	2003e404 	.word	0x2003e404

000b731c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b731c:	b510      	push	{r4, lr}
   b731e:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b7320:	f7ff fbd4 	bl	b6acc <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7324:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b7326:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b7328:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b732a:	2303      	movs	r3, #3
    _retransmissions = 0;
   b732c:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b732e:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b7330:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b7332:	f44f 7280 	mov.w	r2, #256	; 0x100
   b7336:	f104 0011 	add.w	r0, r4, #17
   b733a:	f005 f907 	bl	bc54c <memset>
}
   b733e:	4620      	mov	r0, r4
   b7340:	bd10      	pop	{r4, pc}

000b7342 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b7342:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7344:	4604      	mov	r4, r0
   b7346:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b7348:	f7ff fc04 	bl	b6b54 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b734c:	4620      	mov	r0, r4
   b734e:	2200      	movs	r2, #0
   b7350:	2180      	movs	r1, #128	; 0x80
   b7352:	f7ff fc03 	bl	b6b5c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b7356:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b7358:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b735a:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b735e:	f10d 010f 	add.w	r1, sp, #15
   b7362:	2201      	movs	r2, #1
   b7364:	4620      	mov	r0, r4
   b7366:	f7ff fbc6 	bl	b6af6 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b736a:	4620      	mov	r0, r4
   b736c:	f7ff fbb5 	bl	b6ada <_ZN10RHDatagram14waitPacketSentEv>
}
   b7370:	b004      	add	sp, #16
   b7372:	bd10      	pop	{r4, pc}

000b7374 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b7374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7378:	7b05      	ldrb	r5, [r0, #12]
   b737a:	3501      	adds	r5, #1
   b737c:	b2ed      	uxtb	r5, r5
{
   b737e:	b087      	sub	sp, #28
   b7380:	4604      	mov	r4, r0
   b7382:	4689      	mov	r9, r1
   b7384:	4692      	mov	sl, r2
   b7386:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7388:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b738a:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b738c:	7c22      	ldrb	r2, [r4, #16]
   b738e:	463b      	mov	r3, r7
   b7390:	429a      	cmp	r2, r3
   b7392:	f107 0701 	add.w	r7, r7, #1
   b7396:	b2ff      	uxtb	r7, r7
   b7398:	d36b      	bcc.n	b7472 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b739a:	4629      	mov	r1, r5
   b739c:	4620      	mov	r0, r4
   b739e:	f7ff fbd9 	bl	b6b54 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b73a2:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b73a4:	bf0d      	iteet	eq
   b73a6:	22c0      	moveq	r2, #192	; 0xc0
   b73a8:	2280      	movne	r2, #128	; 0x80
   b73aa:	2140      	movne	r1, #64	; 0x40
   b73ac:	2100      	moveq	r1, #0
   b73ae:	4620      	mov	r0, r4
   b73b0:	f7ff fbd4 	bl	b6b5c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b73b4:	4643      	mov	r3, r8
   b73b6:	4652      	mov	r2, sl
   b73b8:	4649      	mov	r1, r9
   b73ba:	4620      	mov	r0, r4
   b73bc:	f7ff fb9b 	bl	b6af6 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b73c0:	4620      	mov	r0, r4
   b73c2:	f7ff fb8a 	bl	b6ada <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b73c6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b73ca:	d054      	beq.n	b7476 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b73cc:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b73ce:	bf82      	ittt	hi
   b73d0:	68a3      	ldrhi	r3, [r4, #8]
   b73d2:	3301      	addhi	r3, #1
   b73d4:	60a3      	strhi	r3, [r4, #8]
   b73d6:	f000 ff2b 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b73da:	f44f 7180 	mov.w	r1, #256	; 0x100
   b73de:	4683      	mov	fp, r0
   b73e0:	2000      	movs	r0, #0
   b73e2:	89e6      	ldrh	r6, [r4, #14]
   b73e4:	f003 fca5 	bl	bad32 <_Z6randomii>
   b73e8:	4370      	muls	r0, r6
   b73ea:	bf48      	it	mi
   b73ec:	30ff      	addmi	r0, #255	; 0xff
   b73ee:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b73f2:	fa1b f686 	uxtah	r6, fp, r6
   b73f6:	f000 ff1b 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
   b73fa:	1a30      	subs	r0, r6, r0
   b73fc:	2800      	cmp	r0, #0
   b73fe:	ddc5      	ble.n	b738c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b7400:	b281      	uxth	r1, r0
   b7402:	2200      	movs	r2, #0
   b7404:	4620      	mov	r0, r4
   b7406:	f7ff fb6c 	bl	b6ae2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b740a:	2800      	cmp	r0, #0
   b740c:	d0f3      	beq.n	b73f6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b740e:	f10d 0317 	add.w	r3, sp, #23
   b7412:	9302      	str	r3, [sp, #8]
   b7414:	f10d 0316 	add.w	r3, sp, #22
   b7418:	9301      	str	r3, [sp, #4]
   b741a:	2200      	movs	r2, #0
   b741c:	f10d 0315 	add.w	r3, sp, #21
   b7420:	9300      	str	r3, [sp, #0]
   b7422:	4611      	mov	r1, r2
   b7424:	ab05      	add	r3, sp, #20
   b7426:	4620      	mov	r0, r4
   b7428:	f7ff fbac 	bl	b6b84 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b742c:	2800      	cmp	r0, #0
   b742e:	d0e2      	beq.n	b73f6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7430:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7434:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b7438:	4542      	cmp	r2, r8
   b743a:	d10e      	bne.n	b745a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b743c:	f894 c004 	ldrb.w	ip, [r4, #4]
   b7440:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7444:	458c      	cmp	ip, r1
   b7446:	d108      	bne.n	b745a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b7448:	2b00      	cmp	r3, #0
   b744a:	da08      	bge.n	b745e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b744c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7450:	42ab      	cmp	r3, r5
   b7452:	d1d0      	bne.n	b73f6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b7454:	b007      	add	sp, #28
   b7456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b745a:	2b00      	cmp	r3, #0
   b745c:	dbcb      	blt.n	b73f6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b745e:	18a1      	adds	r1, r4, r2
   b7460:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7464:	7c49      	ldrb	r1, [r1, #17]
   b7466:	4299      	cmp	r1, r3
   b7468:	d1c5      	bne.n	b73f6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b746a:	4620      	mov	r0, r4
   b746c:	f7ff ff69 	bl	b7342 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b7470:	e7c1      	b.n	b73f6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b7472:	2000      	movs	r0, #0
   b7474:	e7ee      	b.n	b7454 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b7476:	2001      	movs	r0, #1
   b7478:	e7ec      	b.n	b7454 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b747a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b747a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b747e:	b089      	sub	sp, #36	; 0x24
   b7480:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7484:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b7488:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b748a:	4604      	mov	r4, r0
   b748c:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b748e:	f7ff fb20 	bl	b6ad2 <_ZN10RHDatagram9availableEv>
   b7492:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b7496:	b920      	cbnz	r0, b74a2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b7498:	2500      	movs	r5, #0
}
   b749a:	4628      	mov	r0, r5
   b749c:	b009      	add	sp, #36	; 0x24
   b749e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b74a2:	f10d 031f 	add.w	r3, sp, #31
   b74a6:	9302      	str	r3, [sp, #8]
   b74a8:	f10d 031e 	add.w	r3, sp, #30
   b74ac:	9301      	str	r3, [sp, #4]
   b74ae:	f10d 031d 	add.w	r3, sp, #29
   b74b2:	9300      	str	r3, [sp, #0]
   b74b4:	4620      	mov	r0, r4
   b74b6:	ab07      	add	r3, sp, #28
   b74b8:	f7ff fb64 	bl	b6b84 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b74bc:	4605      	mov	r5, r0
   b74be:	2800      	cmp	r0, #0
   b74c0:	d0ea      	beq.n	b7498 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b74c2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b74c6:	2b00      	cmp	r3, #0
   b74c8:	dbe6      	blt.n	b7498 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b74ca:	7922      	ldrb	r2, [r4, #4]
   b74cc:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b74d0:	429a      	cmp	r2, r3
   b74d2:	d106      	bne.n	b74e2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b74d4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b74d8:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b74dc:	4620      	mov	r0, r4
   b74de:	f7ff ff30 	bl	b7342 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b74e2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b74e6:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b74ea:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b74ee:	f012 0f40 	tst.w	r2, #64	; 0x40
   b74f2:	440c      	add	r4, r1
   b74f4:	d002      	beq.n	b74fc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b74f6:	7c60      	ldrb	r0, [r4, #17]
   b74f8:	4298      	cmp	r0, r3
   b74fa:	d0cd      	beq.n	b7498 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b74fc:	b106      	cbz	r6, b7500 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b74fe:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b7500:	f1b9 0f00 	cmp.w	r9, #0
   b7504:	d003      	beq.n	b750e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b7506:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b750a:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b750e:	f1b8 0f00 	cmp.w	r8, #0
   b7512:	d001      	beq.n	b7518 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b7514:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b7518:	b107      	cbz	r7, b751c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b751a:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b751c:	7463      	strb	r3, [r4, #17]
		return true;
   b751e:	e7bc      	b.n	b749a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b7520 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b7520:	4770      	bx	lr

000b7522 <_ZN8RHRouter4initEv>:
{
   b7522:	b510      	push	{r4, lr}
   b7524:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b7526:	3004      	adds	r0, #4
   b7528:	f7ff fb06 	bl	b6b38 <_ZN10RHDatagram4initEv>
    if (ret)
   b752c:	b110      	cbz	r0, b7534 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b752e:	231e      	movs	r3, #30
   b7530:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b7534:	bd10      	pop	{r4, pc}

000b7536 <_ZN8RHRouter10getRouteToEh>:
{
   b7536:	b510      	push	{r4, lr}
   b7538:	4602      	mov	r2, r0
   b753a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b753c:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b7540:	428c      	cmp	r4, r1
   b7542:	d108      	bne.n	b7556 <_ZN8RHRouter10getRouteToEh+0x20>
   b7544:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b7548:	b12c      	cbz	r4, b7556 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b754a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b754e:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b7552:	4418      	add	r0, r3
}
   b7554:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7556:	3301      	adds	r3, #1
   b7558:	2b32      	cmp	r3, #50	; 0x32
   b755a:	f102 0203 	add.w	r2, r2, #3
   b755e:	d1ed      	bne.n	b753c <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b7560:	2000      	movs	r0, #0
   b7562:	e7f7      	b.n	b7554 <_ZN8RHRouter10getRouteToEh+0x1e>

000b7564 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b7564:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7566:	780b      	ldrb	r3, [r1, #0]
   b7568:	2bff      	cmp	r3, #255	; 0xff
{
   b756a:	4605      	mov	r5, r0
   b756c:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b756e:	d006      	beq.n	b757e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b7570:	4619      	mov	r1, r3
   b7572:	9201      	str	r2, [sp, #4]
   b7574:	f7ff ffdf 	bl	b7536 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b7578:	b158      	cbz	r0, b7592 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b757a:	7843      	ldrb	r3, [r0, #1]
   b757c:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b757e:	4621      	mov	r1, r4
   b7580:	1d28      	adds	r0, r5, #4
   b7582:	f7ff fef7 	bl	b7374 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b7586:	2800      	cmp	r0, #0
   b7588:	bf14      	ite	ne
   b758a:	2000      	movne	r0, #0
   b758c:	2005      	moveq	r0, #5
}
   b758e:	b003      	add	sp, #12
   b7590:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7592:	2002      	movs	r0, #2
   b7594:	e7fb      	b.n	b758e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b7596 <_ZN8RHRouter11deleteRouteEh>:
{
   b7596:	b510      	push	{r4, lr}
   b7598:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b759c:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b759e:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b75a2:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b75a6:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b75aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b75ae:	4421      	add	r1, r4
   b75b0:	4420      	add	r0, r4
   b75b2:	f004 ffa3 	bl	bc4fc <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b75b6:	2300      	movs	r3, #0
   b75b8:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b75bc:	bd10      	pop	{r4, pc}

000b75be <_ZN8RHRouter13deleteRouteToEh>:
{
   b75be:	b538      	push	{r3, r4, r5, lr}
   b75c0:	460a      	mov	r2, r1
   b75c2:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b75c4:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b75c8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b75cc:	b2d9      	uxtb	r1, r3
   b75ce:	5d65      	ldrb	r5, [r4, r5]
   b75d0:	4295      	cmp	r5, r2
   b75d2:	d103      	bne.n	b75dc <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b75d4:	f7ff ffdf 	bl	b7596 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b75d8:	2001      	movs	r0, #1
}
   b75da:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b75dc:	3301      	adds	r3, #1
   b75de:	2b32      	cmp	r3, #50	; 0x32
   b75e0:	d1f2      	bne.n	b75c8 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b75e2:	2000      	movs	r0, #0
   b75e4:	e7f9      	b.n	b75da <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b75e6 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b75e6:	2100      	movs	r1, #0
   b75e8:	f7ff bfd5 	b.w	b7596 <_ZN8RHRouter11deleteRouteEh>

000b75ec <_ZN8RHRouter10addRouteToEhhh>:
{
   b75ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75ee:	4616      	mov	r6, r2
   b75f0:	461f      	mov	r7, r3
   b75f2:	4604      	mov	r4, r0
   b75f4:	460d      	mov	r5, r1
   b75f6:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b75f8:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b75fc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7600:	5c11      	ldrb	r1, [r2, r0]
   b7602:	42a9      	cmp	r1, r5
   b7604:	d105      	bne.n	b7612 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b7606:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7608:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b760c:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7612:	3301      	adds	r3, #1
   b7614:	2b32      	cmp	r3, #50	; 0x32
   b7616:	d1f1      	bne.n	b75fc <_ZN8RHRouter10addRouteToEhhh+0x10>
   b7618:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b761a:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b761e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7622:	5c11      	ldrb	r1, [r2, r0]
   b7624:	b919      	cbnz	r1, b762e <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b7626:	4420      	add	r0, r4
   b7628:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b762c:	e7ec      	b.n	b7608 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b762e:	3301      	adds	r3, #1
   b7630:	2b32      	cmp	r3, #50	; 0x32
   b7632:	d1f4      	bne.n	b761e <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b7634:	4620      	mov	r0, r4
   b7636:	f7ff ffd6 	bl	b75e6 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b763a:	4620      	mov	r0, r4
   b763c:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b7640:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b7644:	b92a      	cbnz	r2, b7652 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b7646:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b764a:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b764e:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7652:	3003      	adds	r0, #3
   b7654:	4298      	cmp	r0, r3
   b7656:	d1f3      	bne.n	b7640 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b7658:	e7da      	b.n	b7610 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b765a <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b765a:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b765e:	2200      	movs	r2, #0
   b7660:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7664:	3003      	adds	r0, #3
   b7666:	4298      	cmp	r0, r3
   b7668:	d1fa      	bne.n	b7660 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b766a:	4770      	bx	lr

000b766c <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b766c:	b510      	push	{r4, lr}
   b766e:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b7670:	3004      	adds	r0, #4
   b7672:	f7ff fe53 	bl	b731c <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b7676:	4b05      	ldr	r3, [pc, #20]	; (b768c <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b7678:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b767a:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b767e:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7680:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b7684:	f7ff ffe9 	bl	b765a <_ZN8RHRouter17clearRoutingTableEv>
}
   b7688:	4620      	mov	r0, r4
   b768a:	bd10      	pop	{r4, pc}
   b768c:	000bd504 	.word	0x000bd504

000b7690 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b7690:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7694:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7696:	6840      	ldr	r0, [r0, #4]
{
   b7698:	9101      	str	r1, [sp, #4]
   b769a:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b769c:	6803      	ldr	r3, [r0, #0]
{
   b769e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76a2:	699b      	ldr	r3, [r3, #24]
{
   b76a4:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b76a8:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76aa:	4798      	blx	r3
   b76ac:	f106 0805 	add.w	r8, r6, #5
   b76b0:	4580      	cmp	r8, r0
   b76b2:	d81c      	bhi.n	b76ee <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b76b4:	4d10      	ldr	r5, [pc, #64]	; (b76f8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b76b6:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b76b8:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b76bc:	2300      	movs	r3, #0
   b76be:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b76c0:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b76c4:	70eb      	strb	r3, [r5, #3]
   b76c6:	1c5a      	adds	r2, r3, #1
   b76c8:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b76cc:	1d68      	adds	r0, r5, #5
   b76ce:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b76d0:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b76d2:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b76d6:	f004 ff11 	bl	bc4fc <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b76da:	6823      	ldr	r3, [r4, #0]
   b76dc:	685b      	ldr	r3, [r3, #4]
   b76de:	fa5f f288 	uxtb.w	r2, r8
   b76e2:	4629      	mov	r1, r5
   b76e4:	4620      	mov	r0, r4
}
   b76e6:	b002      	add	sp, #8
   b76e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b76ec:	4718      	bx	r3
}
   b76ee:	2001      	movs	r0, #1
   b76f0:	b002      	add	sp, #8
   b76f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b76f6:	bf00      	nop
   b76f8:	2003e4fe 	.word	0x2003e4fe

000b76fc <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b76fc:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b76fe:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7702:	9401      	str	r4, [sp, #4]
   b7704:	7a04      	ldrb	r4, [r0, #8]
   b7706:	9400      	str	r4, [sp, #0]
   b7708:	f7ff ffc2 	bl	b7690 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b770c:	b002      	add	sp, #8
   b770e:	bd10      	pop	{r4, pc}

000b7710 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7714:	b087      	sub	sp, #28
   b7716:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7718:	23ff      	movs	r3, #255	; 0xff
   b771a:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b771e:	f10d 0317 	add.w	r3, sp, #23
   b7722:	9302      	str	r3, [sp, #8]
   b7724:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b77f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b7728:	f10d 0316 	add.w	r3, sp, #22
   b772c:	9301      	str	r3, [sp, #4]
   b772e:	f10d 0315 	add.w	r3, sp, #21
   b7732:	9300      	str	r3, [sp, #0]
{  
   b7734:	4604      	mov	r4, r0
   b7736:	4688      	mov	r8, r1
   b7738:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b773a:	ab05      	add	r3, sp, #20
   b773c:	f10d 0213 	add.w	r2, sp, #19
   b7740:	4649      	mov	r1, r9
   b7742:	3004      	adds	r0, #4
{  
   b7744:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7748:	f7ff fe97 	bl	b747a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b774c:	4605      	mov	r5, r0
   b774e:	b908      	cbnz	r0, b7754 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b7750:	2500      	movs	r5, #0
   b7752:	e038      	b.n	b77c6 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b7754:	6823      	ldr	r3, [r4, #0]
   b7756:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b775a:	681b      	ldr	r3, [r3, #0]
   b775c:	4649      	mov	r1, r9
   b775e:	4620      	mov	r0, r4
   b7760:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b7762:	f899 3000 	ldrb.w	r3, [r9]
   b7766:	7a22      	ldrb	r2, [r4, #8]
   b7768:	429a      	cmp	r2, r3
   b776a:	d001      	beq.n	b7770 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b776c:	2bff      	cmp	r3, #255	; 0xff
   b776e:	d12e      	bne.n	b77ce <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b7770:	b117      	cbz	r7, b7778 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b7772:	4b21      	ldr	r3, [pc, #132]	; (b77f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7774:	785b      	ldrb	r3, [r3, #1]
   b7776:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b7778:	f1bb 0f00 	cmp.w	fp, #0
   b777c:	d003      	beq.n	b7786 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b777e:	4b1e      	ldr	r3, [pc, #120]	; (b77f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7780:	781b      	ldrb	r3, [r3, #0]
   b7782:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b7786:	f1ba 0f00 	cmp.w	sl, #0
   b778a:	d003      	beq.n	b7794 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b778c:	4b1a      	ldr	r3, [pc, #104]	; (b77f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b778e:	78db      	ldrb	r3, [r3, #3]
   b7790:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b7794:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b7796:	b11b      	cbz	r3, b77a0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b7798:	4b17      	ldr	r3, [pc, #92]	; (b77f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b779a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b779c:	791b      	ldrb	r3, [r3, #4]
   b779e:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b77a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b77a2:	b11b      	cbz	r3, b77ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b77a4:	4b14      	ldr	r3, [pc, #80]	; (b77f8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b77a8:	789b      	ldrb	r3, [r3, #2]
   b77aa:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b77ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b77b0:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b77b2:	4912      	ldr	r1, [pc, #72]	; (b77fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b77b4:	3b05      	subs	r3, #5
   b77b6:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b77b8:	429a      	cmp	r2, r3
		*len = msgLen;
   b77ba:	bf88      	it	hi
   b77bc:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b77be:	7832      	ldrb	r2, [r6, #0]
   b77c0:	4640      	mov	r0, r8
   b77c2:	f004 fe9b 	bl	bc4fc <memcpy>
}
   b77c6:	4628      	mov	r0, r5
   b77c8:	b007      	add	sp, #28
   b77ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b77ce:	f899 3002 	ldrb.w	r3, [r9, #2]
   b77d2:	1c5a      	adds	r2, r3, #1
   b77d4:	f889 2002 	strb.w	r2, [r9, #2]
   b77d8:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b77dc:	429a      	cmp	r2, r3
   b77de:	d9b7      	bls.n	b7750 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b77e0:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b77e4:	2b00      	cmp	r3, #0
   b77e6:	d0b3      	beq.n	b7750 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b77e8:	6823      	ldr	r3, [r4, #0]
   b77ea:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b77ee:	685b      	ldr	r3, [r3, #4]
   b77f0:	4649      	mov	r1, r9
   b77f2:	4620      	mov	r0, r4
   b77f4:	4798      	blx	r3
   b77f6:	e7ab      	b.n	b7750 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b77f8:	2003e4fe 	.word	0x2003e4fe
   b77fc:	2003e503 	.word	0x2003e503

000b7800 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7800:	b510      	push	{r4, lr}
   b7802:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7804:	6a00      	ldr	r0, [r0, #32]
   b7806:	6803      	ldr	r3, [r0, #0]
   b7808:	68db      	ldr	r3, [r3, #12]
   b780a:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b780c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7810:	28ff      	cmp	r0, #255	; 0xff
   b7812:	d002      	beq.n	b781a <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7814:	2101      	movs	r1, #1
   b7816:	f004 f859 	bl	bb8cc <pinMode>

    deselectSlave();
   b781a:	6823      	ldr	r3, [r4, #0]
   b781c:	4620      	mov	r0, r4
   b781e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7820:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b7822:	2064      	movs	r0, #100	; 0x64
   b7824:	f001 f87e 	bl	b8924 <delay>
#endif
    
    return true;
}
   b7828:	2001      	movs	r0, #1
   b782a:	bd10      	pop	{r4, pc}

000b782c <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b782c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7830:	2100      	movs	r1, #0
   b7832:	f004 b85c 	b.w	bb8ee <digitalWrite>

000b7836 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b7836:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b783a:	2101      	movs	r1, #1
   b783c:	f004 b857 	b.w	bb8ee <digitalWrite>

000b7840 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b7840:	b570      	push	{r4, r5, r6, lr}
   b7842:	4604      	mov	r4, r0
   b7844:	460d      	mov	r5, r1
   b7846:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b7848:	f7ff fa50 	bl	b6cec <_ZN15RHGenericDriverC1Ev>
   b784c:	4b03      	ldr	r3, [pc, #12]	; (b785c <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b784e:	6023      	str	r3, [r4, #0]
   b7850:	6226      	str	r6, [r4, #32]
   b7852:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b7856:	4620      	mov	r0, r4
   b7858:	bd70      	pop	{r4, r5, r6, pc}
   b785a:	bf00      	nop
   b785c:	000bd514 	.word	0x000bd514

000b7860 <_ZN11RHSPIDriver7spiReadEh>:
{
   b7860:	b538      	push	{r3, r4, r5, lr}
   b7862:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7864:	6a00      	ldr	r0, [r0, #32]
   b7866:	6803      	ldr	r3, [r0, #0]
   b7868:	6a1b      	ldr	r3, [r3, #32]
{
   b786a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b786c:	4798      	blx	r3
    selectSlave();
   b786e:	6823      	ldr	r3, [r4, #0]
   b7870:	4620      	mov	r0, r4
   b7872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7874:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b7876:	6a20      	ldr	r0, [r4, #32]
   b7878:	6803      	ldr	r3, [r0, #0]
   b787a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b787e:	681b      	ldr	r3, [r3, #0]
   b7880:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7882:	6a20      	ldr	r0, [r4, #32]
   b7884:	6803      	ldr	r3, [r0, #0]
   b7886:	2100      	movs	r1, #0
   b7888:	681b      	ldr	r3, [r3, #0]
   b788a:	4798      	blx	r3
    deselectSlave();
   b788c:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b788e:	4605      	mov	r5, r0
    deselectSlave();
   b7890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7892:	4620      	mov	r0, r4
   b7894:	4798      	blx	r3
    _spi.endTransaction();
   b7896:	6a20      	ldr	r0, [r4, #32]
   b7898:	6803      	ldr	r3, [r0, #0]
   b789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b789c:	4798      	blx	r3
}
   b789e:	4628      	mov	r0, r5
   b78a0:	bd38      	pop	{r3, r4, r5, pc}

000b78a2 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b78a2:	b570      	push	{r4, r5, r6, lr}
   b78a4:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b78a6:	6a00      	ldr	r0, [r0, #32]
   b78a8:	6803      	ldr	r3, [r0, #0]
   b78aa:	6a1b      	ldr	r3, [r3, #32]
{
   b78ac:	4616      	mov	r6, r2
   b78ae:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b78b0:	4798      	blx	r3
    selectSlave();
   b78b2:	6823      	ldr	r3, [r4, #0]
   b78b4:	4620      	mov	r0, r4
   b78b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b78b8:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b78ba:	6a20      	ldr	r0, [r4, #32]
   b78bc:	6803      	ldr	r3, [r0, #0]
   b78be:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b78c2:	681b      	ldr	r3, [r3, #0]
   b78c4:	4798      	blx	r3
   b78c6:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b78c8:	6a20      	ldr	r0, [r4, #32]
   b78ca:	6803      	ldr	r3, [r0, #0]
   b78cc:	4631      	mov	r1, r6
   b78ce:	681b      	ldr	r3, [r3, #0]
   b78d0:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b78d2:	2001      	movs	r0, #1
   b78d4:	f000 fca4 	bl	b8220 <HAL_Delay_Microseconds>
    deselectSlave();
   b78d8:	6823      	ldr	r3, [r4, #0]
   b78da:	4620      	mov	r0, r4
   b78dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b78de:	4798      	blx	r3
    _spi.endTransaction();
   b78e0:	6a20      	ldr	r0, [r4, #32]
   b78e2:	6803      	ldr	r3, [r0, #0]
   b78e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b78e6:	4798      	blx	r3
}
   b78e8:	4628      	mov	r0, r5
   b78ea:	bd70      	pop	{r4, r5, r6, pc}

000b78ec <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b78ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b78ee:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b78f0:	6a00      	ldr	r0, [r0, #32]
{
   b78f2:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b78f4:	6803      	ldr	r3, [r0, #0]
   b78f6:	6a1b      	ldr	r3, [r3, #32]
{
   b78f8:	460f      	mov	r7, r1
   b78fa:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b78fc:	4798      	blx	r3
    selectSlave();
   b78fe:	6823      	ldr	r3, [r4, #0]
   b7900:	4620      	mov	r0, r4
   b7902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7904:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b7906:	6a20      	ldr	r0, [r4, #32]
   b7908:	6803      	ldr	r3, [r0, #0]
   b790a:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b790e:	681b      	ldr	r3, [r3, #0]
   b7910:	4798      	blx	r3
   b7912:	442e      	add	r6, r5
   b7914:	4607      	mov	r7, r0
    while (len--)
   b7916:	42b5      	cmp	r5, r6
   b7918:	d007      	beq.n	b792a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b791a:	6a20      	ldr	r0, [r4, #32]
   b791c:	6803      	ldr	r3, [r0, #0]
   b791e:	2100      	movs	r1, #0
   b7920:	681b      	ldr	r3, [r3, #0]
   b7922:	4798      	blx	r3
   b7924:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b7928:	e7f5      	b.n	b7916 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b792a:	6823      	ldr	r3, [r4, #0]
   b792c:	4620      	mov	r0, r4
   b792e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7930:	4798      	blx	r3
    _spi.endTransaction();
   b7932:	6a20      	ldr	r0, [r4, #32]
   b7934:	6803      	ldr	r3, [r0, #0]
   b7936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7938:	4798      	blx	r3
}
   b793a:	4638      	mov	r0, r7
   b793c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b793e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b793e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7940:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7942:	6a00      	ldr	r0, [r0, #32]
{
   b7944:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7946:	6803      	ldr	r3, [r0, #0]
   b7948:	6a1b      	ldr	r3, [r3, #32]
{
   b794a:	460f      	mov	r7, r1
   b794c:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b794e:	4798      	blx	r3
    selectSlave();
   b7950:	6823      	ldr	r3, [r4, #0]
   b7952:	4620      	mov	r0, r4
   b7954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7956:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b7958:	6a20      	ldr	r0, [r4, #32]
   b795a:	6803      	ldr	r3, [r0, #0]
   b795c:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b7960:	681b      	ldr	r3, [r3, #0]
   b7962:	4798      	blx	r3
   b7964:	442e      	add	r6, r5
   b7966:	4607      	mov	r7, r0
    while (len--)
   b7968:	42b5      	cmp	r5, r6
   b796a:	d006      	beq.n	b797a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b796c:	6a20      	ldr	r0, [r4, #32]
   b796e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7972:	6803      	ldr	r3, [r0, #0]
   b7974:	681b      	ldr	r3, [r3, #0]
   b7976:	4798      	blx	r3
    while (len--)
   b7978:	e7f6      	b.n	b7968 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b797a:	6823      	ldr	r3, [r4, #0]
   b797c:	4620      	mov	r0, r4
   b797e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7980:	4798      	blx	r3
    _spi.endTransaction();
   b7982:	6a20      	ldr	r0, [r4, #32]
   b7984:	6803      	ldr	r3, [r0, #0]
   b7986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7988:	4798      	blx	r3
}
   b798a:	4638      	mov	r0, r7
   b798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b798e <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b798e:	6a00      	ldr	r0, [r0, #32]
   b7990:	6803      	ldr	r3, [r0, #0]
   b7992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7994:	4718      	bx	r3

000b7996 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b7996:	2001      	movs	r0, #1
   b7998:	4770      	bx	lr

000b799a <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b799a:	20fb      	movs	r0, #251	; 0xfb
   b799c:	4770      	bx	lr

000b799e <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b799e:	4770      	bx	lr

000b79a0 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b79a0:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b79a2:	7903      	ldrb	r3, [r0, #4]
   b79a4:	2b05      	cmp	r3, #5
{
   b79a6:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b79a8:	d010      	beq.n	b79cc <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b79aa:	6803      	ldr	r3, [r0, #0]
   b79ac:	2105      	movs	r1, #5
   b79ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b79b2:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b79b4:	2207      	movs	r2, #7
   b79b6:	2101      	movs	r1, #1
   b79b8:	4620      	mov	r0, r4
   b79ba:	f7ff ff72 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b79be:	2280      	movs	r2, #128	; 0x80
   b79c0:	2140      	movs	r1, #64	; 0x40
   b79c2:	4620      	mov	r0, r4
   b79c4:	f7ff ff6d 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b79c8:	2305      	movs	r3, #5
   b79ca:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b79cc:	7923      	ldrb	r3, [r4, #4]
   b79ce:	2b05      	cmp	r3, #5
   b79d0:	d0fc      	beq.n	b79cc <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b79d2:	7e20      	ldrb	r0, [r4, #24]
}
   b79d4:	bd10      	pop	{r4, pc}

000b79d6 <_ZN7RH_RF95D0Ev>:
   b79d6:	b510      	push	{r4, lr}
   b79d8:	f44f 7198 	mov.w	r1, #304	; 0x130
   b79dc:	4604      	mov	r4, r0
   b79de:	f7fc fb5e 	bl	b409e <_ZdlPvj>
   b79e2:	4620      	mov	r0, r4
   b79e4:	bd10      	pop	{r4, pc}

000b79e6 <_ZN7RH_RF955sleepEv>:
{
   b79e6:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b79e8:	7903      	ldrb	r3, [r0, #4]
   b79ea:	2b01      	cmp	r3, #1
{
   b79ec:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b79ee:	d00b      	beq.n	b7a08 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b79f0:	6803      	ldr	r3, [r0, #0]
   b79f2:	2101      	movs	r1, #1
   b79f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b79f8:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b79fa:	2200      	movs	r2, #0
   b79fc:	2101      	movs	r1, #1
   b79fe:	4620      	mov	r0, r4
   b7a00:	f7ff ff4f 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b7a04:	2301      	movs	r3, #1
   b7a06:	7123      	strb	r3, [r4, #4]
}
   b7a08:	2001      	movs	r0, #1
   b7a0a:	bd10      	pop	{r4, pc}

000b7a0c <_ZN7RH_RF954recvEPhS0_>:
{
   b7a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b7a0e:	6803      	ldr	r3, [r0, #0]
   b7a10:	68db      	ldr	r3, [r3, #12]
{
   b7a12:	4604      	mov	r4, r0
   b7a14:	460f      	mov	r7, r1
   b7a16:	4615      	mov	r5, r2
    if (!available())
   b7a18:	4798      	blx	r3
   b7a1a:	4606      	mov	r6, r0
   b7a1c:	b1b0      	cbz	r0, b7a4c <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b7a1e:	b187      	cbz	r7, b7a42 <_ZN7RH_RF954recvEPhS0_+0x36>
   b7a20:	b17d      	cbz	r5, b7a42 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b7a22:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b7a26:	782a      	ldrb	r2, [r5, #0]
   b7a28:	3b03      	subs	r3, #3
   b7a2a:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b7a2c:	bfde      	ittt	le
   b7a2e:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b7a32:	3b04      	suble	r3, #4
   b7a34:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b7a36:	782a      	ldrb	r2, [r5, #0]
   b7a38:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b7a3c:	4638      	mov	r0, r7
   b7a3e:	f004 fd5d 	bl	bc4fc <memcpy>
    _rxBufValid = false;
   b7a42:	2300      	movs	r3, #0
   b7a44:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7a48:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b7a4c:	4630      	mov	r0, r6
   b7a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7a50 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b7a50:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b7a52:	b538      	push	{r3, r4, r5, lr}
   b7a54:	4605      	mov	r5, r0
   b7a56:	460c      	mov	r4, r1
	if (power > 20)
   b7a58:	dc14      	bgt.n	b7a84 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b7a5a:	2901      	cmp	r1, #1
   b7a5c:	dd14      	ble.n	b7a88 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b7a5e:	2911      	cmp	r1, #17
   b7a60:	dd13      	ble.n	b7a8a <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b7a62:	2207      	movs	r2, #7
   b7a64:	214d      	movs	r1, #77	; 0x4d
   b7a66:	4628      	mov	r0, r5
   b7a68:	f7ff ff1b 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b7a6c:	3c03      	subs	r4, #3
   b7a6e:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7a70:	1ea2      	subs	r2, r4, #2
   b7a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b7a76:	4628      	mov	r0, r5
   b7a78:	b2d2      	uxtb	r2, r2
}
   b7a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7a7e:	2109      	movs	r1, #9
   b7a80:	f7ff bf0f 	b.w	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b7a84:	2414      	movs	r4, #20
   b7a86:	e7ec      	b.n	b7a62 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b7a88:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7a8a:	2204      	movs	r2, #4
   b7a8c:	214d      	movs	r1, #77	; 0x4d
   b7a8e:	4628      	mov	r0, r5
   b7a90:	f7ff ff07 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
   b7a94:	e7ec      	b.n	b7a70 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b7a98 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b7a98:	b538      	push	{r3, r4, r5, lr}
   b7a9a:	4604      	mov	r4, r0
   b7a9c:	4615      	mov	r5, r2
    _rxBufValid(0)
   b7a9e:	461a      	mov	r2, r3
   b7aa0:	f7ff fece 	bl	b7840 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b7aa4:	4b09      	ldr	r3, [pc, #36]	; (b7acc <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b7aa6:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b7aa8:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b7aaa:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b7aac:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b7ab0:	2201      	movs	r2, #1
    _rxBufValid(0)
   b7ab2:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b7ab6:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b7aba:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b7abe:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b7ac2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b7ac6:	4620      	mov	r0, r4
   b7ac8:	bd38      	pop	{r3, r4, r5, pc}
   b7aca:	bf00      	nop
   b7acc:	000bd5ac 	.word	0x000bd5ac

000b7ad0 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b7ad0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b7ad4:	2b03      	cmp	r3, #3
   b7ad6:	d91b      	bls.n	b7b10 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b7ad8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b7adc:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b7ade:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b7ae2:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b7ae4:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b7ae8:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b7aea:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b7aee:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b7af0:	7983      	ldrb	r3, [r0, #6]
   b7af2:	b933      	cbnz	r3, b7b02 <_ZN7RH_RF9513validateRxBufEv+0x32>
   b7af4:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b7af6:	7942      	ldrb	r2, [r0, #5]
   b7af8:	429a      	cmp	r2, r3
   b7afa:	d002      	beq.n	b7b02 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b7afc:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b7afe:	2bff      	cmp	r3, #255	; 0xff
   b7b00:	d106      	bne.n	b7b10 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b7b02:	8a83      	ldrh	r3, [r0, #20]
   b7b04:	3301      	adds	r3, #1
   b7b06:	b29b      	uxth	r3, r3
   b7b08:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b7b0a:	2301      	movs	r3, #1
   b7b0c:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b7b10:	4770      	bx	lr
   b7b12:	0000      	movs	r0, r0
   b7b14:	0000      	movs	r0, r0
	...

000b7b18 <_ZN7RH_RF9512setFrequencyEf>:
{
   b7b18:	b538      	push	{r3, r4, r5, lr}
   b7b1a:	4604      	mov	r4, r0
   b7b1c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b20:	ee10 0a10 	vmov	r0, s0
{
   b7b24:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b28:	f004 f946 	bl	bbdb8 <__aeabi_f2d>
   b7b2c:	a317      	add	r3, pc, #92	; (adr r3, b7b8c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b7b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b32:	f004 f999 	bl	bbe68 <__aeabi_dmul>
   b7b36:	a317      	add	r3, pc, #92	; (adr r3, b7b94 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b7b38:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b3c:	f004 fabe 	bl	bc0bc <__aeabi_ddiv>
   b7b40:	f004 fc6a 	bl	bc418 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7b44:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b46:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7b48:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b7b4c:	4620      	mov	r0, r4
   b7b4e:	f7ff fea8 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b7b52:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b7b56:	2107      	movs	r1, #7
   b7b58:	4620      	mov	r0, r4
   b7b5a:	f7ff fea2 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b7b5e:	b2ea      	uxtb	r2, r5
   b7b60:	2108      	movs	r1, #8
   b7b62:	4620      	mov	r0, r4
   b7b64:	f7ff fe9d 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b7b68:	eddf 7a07 	vldr	s15, [pc, #28]	; b7b88 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b7b6c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b7b70:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b7b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7b78:	bfac      	ite	ge
   b7b7a:	2301      	movge	r3, #1
   b7b7c:	2300      	movlt	r3, #0
}
   b7b7e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b7b80:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b7b84:	bd38      	pop	{r3, r4, r5, pc}
   b7b86:	bf00      	nop
   b7b88:	4442c000 	.word	0x4442c000
   b7b8c:	00000000 	.word	0x00000000
   b7b90:	412e8480 	.word	0x412e8480
   b7b94:	00000000 	.word	0x00000000
   b7b98:	404e8480 	.word	0x404e8480

000b7b9c <_ZN7RH_RF9511setModeIdleEv>:
{
   b7b9c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b7b9e:	7903      	ldrb	r3, [r0, #4]
   b7ba0:	2b02      	cmp	r3, #2
{
   b7ba2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b7ba4:	d00b      	beq.n	b7bbe <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b7ba6:	6803      	ldr	r3, [r0, #0]
   b7ba8:	2102      	movs	r1, #2
   b7baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7bae:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b7bb0:	2201      	movs	r2, #1
   b7bb2:	4611      	mov	r1, r2
   b7bb4:	4620      	mov	r0, r4
   b7bb6:	f7ff fe74 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b7bba:	2302      	movs	r3, #2
   b7bbc:	7123      	strb	r3, [r4, #4]
}
   b7bbe:	bd10      	pop	{r4, pc}

000b7bc0 <_ZN7RH_RF9515handleInterruptEv>:
{
   b7bc0:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7bc2:	2112      	movs	r1, #18
{
   b7bc4:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7bc6:	f7ff fe4b 	bl	b7860 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7bca:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7bcc:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7bce:	4620      	mov	r0, r4
   b7bd0:	f7ff fe46 	bl	b7860 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7bd4:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7bd6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7bd8:	2112      	movs	r1, #18
   b7bda:	4620      	mov	r0, r4
   b7bdc:	f7ff fe61 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b7be0:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b7be2:	2b04      	cmp	r3, #4
   b7be4:	d107      	bne.n	b7bf6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7be6:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b7bea:	d117      	bne.n	b7c1c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b7bec:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b7bf0:	b10b      	cbz	r3, b7bf6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7bf2:	0670      	lsls	r0, r6, #25
   b7bf4:	d512      	bpl.n	b7c1c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b7bf6:	7923      	ldrb	r3, [r4, #4]
   b7bf8:	2b04      	cmp	r3, #4
   b7bfa:	d101      	bne.n	b7c00 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b7bfc:	0669      	lsls	r1, r5, #25
   b7bfe:	d422      	bmi.n	b7c46 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b7c00:	7923      	ldrb	r3, [r4, #4]
   b7c02:	2b03      	cmp	r3, #3
   b7c04:	d101      	bne.n	b7c0a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b7c06:	072a      	lsls	r2, r5, #28
   b7c08:	d468      	bmi.n	b7cdc <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b7c0a:	7923      	ldrb	r3, [r4, #4]
   b7c0c:	2b05      	cmp	r3, #5
   b7c0e:	d10e      	bne.n	b7c2e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b7c10:	076b      	lsls	r3, r5, #29
   b7c12:	d50c      	bpl.n	b7c2e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b7c14:	f005 0501 	and.w	r5, r5, #1
   b7c18:	7625      	strb	r5, [r4, #24]
   b7c1a:	e063      	b.n	b7ce4 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b7c1c:	8a63      	ldrh	r3, [r4, #18]
   b7c1e:	3301      	adds	r3, #1
   b7c20:	b29b      	uxth	r3, r3
   b7c22:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b7c24:	2300      	movs	r3, #0
   b7c26:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7c2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c2e:	22ff      	movs	r2, #255	; 0xff
   b7c30:	2112      	movs	r1, #18
   b7c32:	4620      	mov	r0, r4
   b7c34:	f7ff fe35 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c38:	4620      	mov	r0, r4
   b7c3a:	22ff      	movs	r2, #255	; 0xff
}
   b7c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c40:	2112      	movs	r1, #18
   b7c42:	f7ff be2e 	b.w	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7c46:	2113      	movs	r1, #19
   b7c48:	4620      	mov	r0, r4
   b7c4a:	f7ff fe09 	bl	b7860 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7c4e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7c50:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7c52:	4620      	mov	r0, r4
   b7c54:	f7ff fe04 	bl	b7860 <_ZN11RHSPIDriver7spiReadEh>
   b7c58:	210d      	movs	r1, #13
   b7c5a:	4602      	mov	r2, r0
   b7c5c:	4620      	mov	r0, r4
   b7c5e:	f7ff fe20 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b7c62:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b7c66:	462b      	mov	r3, r5
   b7c68:	2100      	movs	r1, #0
   b7c6a:	4620      	mov	r0, r4
   b7c6c:	f7ff fe3e 	bl	b78ec <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7c70:	2119      	movs	r1, #25
	_bufLen = len;
   b7c72:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7c76:	4620      	mov	r0, r4
   b7c78:	f7ff fdf2 	bl	b7860 <_ZN11RHSPIDriver7spiReadEh>
   b7c7c:	b240      	sxtb	r0, r0
   b7c7e:	2800      	cmp	r0, #0
   b7c80:	bfb8      	it	lt
   b7c82:	3003      	addlt	r0, #3
   b7c84:	1080      	asrs	r0, r0, #2
   b7c86:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7c8a:	211a      	movs	r1, #26
   b7c8c:	4620      	mov	r0, r4
   b7c8e:	f7ff fde7 	bl	b7860 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b7c92:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7c96:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b7c98:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7c9a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7c9c:	bfa9      	itett	ge
   b7c9e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b7ca0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7ca2:	b21b      	sxthge	r3, r3
   b7ca4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b7ca6:	bfb2      	itee	lt
   b7ca8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7caa:	220f      	movge	r2, #15
   b7cac:	fb93 f3f2 	sdivge	r3, r3, r2
   b7cb0:	b21b      	sxth	r3, r3
   b7cb2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b7cb4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b7cb8:	b16b      	cbz	r3, b7cd6 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b7cba:	8a23      	ldrh	r3, [r4, #16]
   b7cbc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b7cbe:	b21b      	sxth	r3, r3
   b7cc0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b7cc2:	4620      	mov	r0, r4
   b7cc4:	f7ff ff04 	bl	b7ad0 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b7cc8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b7ccc:	2b00      	cmp	r3, #0
   b7cce:	d0ae      	beq.n	b7c2e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b7cd0:	f7ff ff64 	bl	b7b9c <_ZN7RH_RF9511setModeIdleEv>
   b7cd4:	e7ab      	b.n	b7c2e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b7cd6:	8a23      	ldrh	r3, [r4, #16]
   b7cd8:	3ba4      	subs	r3, #164	; 0xa4
   b7cda:	e7f0      	b.n	b7cbe <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b7cdc:	8ae3      	ldrh	r3, [r4, #22]
   b7cde:	3301      	adds	r3, #1
   b7ce0:	b29b      	uxth	r3, r3
   b7ce2:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b7ce4:	4620      	mov	r0, r4
   b7ce6:	e7f3      	b.n	b7cd0 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b7ce8 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b7ce8:	4b02      	ldr	r3, [pc, #8]	; (b7cf4 <_ZN7RH_RF954isr0Ev+0xc>)
   b7cea:	6818      	ldr	r0, [r3, #0]
   b7cec:	b108      	cbz	r0, b7cf2 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b7cee:	f7ff bf67 	b.w	b7bc0 <_ZN7RH_RF9515handleInterruptEv>
}
   b7cf2:	4770      	bx	lr
   b7cf4:	2003e600 	.word	0x2003e600

000b7cf8 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b7cf8:	4b02      	ldr	r3, [pc, #8]	; (b7d04 <_ZN7RH_RF954isr1Ev+0xc>)
   b7cfa:	6858      	ldr	r0, [r3, #4]
   b7cfc:	b108      	cbz	r0, b7d02 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b7cfe:	f7ff bf5f 	b.w	b7bc0 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d02:	4770      	bx	lr
   b7d04:	2003e600 	.word	0x2003e600

000b7d08 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b7d08:	4b02      	ldr	r3, [pc, #8]	; (b7d14 <_ZN7RH_RF954isr2Ev+0xc>)
   b7d0a:	6898      	ldr	r0, [r3, #8]
   b7d0c:	b108      	cbz	r0, b7d12 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b7d0e:	f7ff bf57 	b.w	b7bc0 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d12:	4770      	bx	lr
   b7d14:	2003e600 	.word	0x2003e600

000b7d18 <_ZN7RH_RF959setModeRxEv>:
{
   b7d18:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b7d1a:	7903      	ldrb	r3, [r0, #4]
   b7d1c:	2b04      	cmp	r3, #4
{
   b7d1e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b7d20:	d010      	beq.n	b7d44 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b7d22:	6803      	ldr	r3, [r0, #0]
   b7d24:	2104      	movs	r1, #4
   b7d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7d2a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b7d2c:	2205      	movs	r2, #5
   b7d2e:	2101      	movs	r1, #1
   b7d30:	4620      	mov	r0, r4
   b7d32:	f7ff fdb6 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b7d36:	2200      	movs	r2, #0
   b7d38:	2140      	movs	r1, #64	; 0x40
   b7d3a:	4620      	mov	r0, r4
   b7d3c:	f7ff fdb1 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b7d40:	2304      	movs	r3, #4
   b7d42:	7123      	strb	r3, [r4, #4]
}
   b7d44:	bd10      	pop	{r4, pc}

000b7d46 <_ZN7RH_RF959availableEv>:
{
   b7d46:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b7d48:	7903      	ldrb	r3, [r0, #4]
   b7d4a:	2b03      	cmp	r3, #3
{
   b7d4c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b7d4e:	d005      	beq.n	b7d5c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b7d50:	f7ff ffe2 	bl	b7d18 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b7d54:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b7d58:	b2c0      	uxtb	r0, r0
}
   b7d5a:	bd10      	pop	{r4, pc}
	return false;
   b7d5c:	2000      	movs	r0, #0
   b7d5e:	e7fc      	b.n	b7d5a <_ZN7RH_RF959availableEv+0x14>

000b7d60 <_ZN7RH_RF959setModeTxEv>:
{
   b7d60:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b7d62:	7903      	ldrb	r3, [r0, #4]
   b7d64:	2b03      	cmp	r3, #3
{
   b7d66:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b7d68:	d010      	beq.n	b7d8c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b7d6a:	6803      	ldr	r3, [r0, #0]
   b7d6c:	2103      	movs	r1, #3
   b7d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7d72:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b7d74:	2203      	movs	r2, #3
   b7d76:	2101      	movs	r1, #1
   b7d78:	4620      	mov	r0, r4
   b7d7a:	f7ff fd92 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b7d7e:	2240      	movs	r2, #64	; 0x40
   b7d80:	4611      	mov	r1, r2
   b7d82:	4620      	mov	r0, r4
   b7d84:	f7ff fd8d 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b7d88:	2303      	movs	r3, #3
   b7d8a:	7123      	strb	r3, [r4, #4]
}
   b7d8c:	bd10      	pop	{r4, pc}

000b7d8e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7d8e:	2afb      	cmp	r2, #251	; 0xfb
{
   b7d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7d92:	4604      	mov	r4, r0
   b7d94:	460f      	mov	r7, r1
   b7d96:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7d98:	d902      	bls.n	b7da0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b7d9a:	2600      	movs	r6, #0
}
   b7d9c:	4630      	mov	r0, r6
   b7d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b7da0:	6803      	ldr	r3, [r0, #0]
   b7da2:	6a1b      	ldr	r3, [r3, #32]
   b7da4:	4798      	blx	r3
    setModeIdle();
   b7da6:	4620      	mov	r0, r4
   b7da8:	f7ff fef8 	bl	b7b9c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b7dac:	6823      	ldr	r3, [r4, #0]
   b7dae:	4620      	mov	r0, r4
   b7db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7db2:	4798      	blx	r3
   b7db4:	4606      	mov	r6, r0
   b7db6:	2800      	cmp	r0, #0
   b7db8:	d0ef      	beq.n	b7d9a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b7dba:	2200      	movs	r2, #0
   b7dbc:	210d      	movs	r1, #13
   b7dbe:	4620      	mov	r0, r4
   b7dc0:	f7ff fd6f 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b7dc4:	7ae2      	ldrb	r2, [r4, #11]
   b7dc6:	2100      	movs	r1, #0
   b7dc8:	4620      	mov	r0, r4
   b7dca:	f7ff fd6a 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b7dce:	7b22      	ldrb	r2, [r4, #12]
   b7dd0:	2100      	movs	r1, #0
   b7dd2:	4620      	mov	r0, r4
   b7dd4:	f7ff fd65 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b7dd8:	7b62      	ldrb	r2, [r4, #13]
   b7dda:	2100      	movs	r1, #0
   b7ddc:	4620      	mov	r0, r4
   b7dde:	f7ff fd60 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b7de2:	7ba2      	ldrb	r2, [r4, #14]
   b7de4:	2100      	movs	r1, #0
   b7de6:	4620      	mov	r0, r4
   b7de8:	f7ff fd5b 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b7dec:	462b      	mov	r3, r5
   b7dee:	463a      	mov	r2, r7
   b7df0:	2100      	movs	r1, #0
   b7df2:	4620      	mov	r0, r4
   b7df4:	f7ff fda3 	bl	b793e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b7df8:	1d2a      	adds	r2, r5, #4
   b7dfa:	b2d2      	uxtb	r2, r2
   b7dfc:	2122      	movs	r1, #34	; 0x22
   b7dfe:	4620      	mov	r0, r4
   b7e00:	f7ff fd4f 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b7e04:	4620      	mov	r0, r4
   b7e06:	f7ff ffab 	bl	b7d60 <_ZN7RH_RF959setModeTxEv>
    return true;
   b7e0a:	e7c7      	b.n	b7d9c <_ZN7RH_RF954sendEPKhh+0xe>

000b7e0c <_ZN7RH_RF9510setTxPowerEab>:
{
   b7e0c:	b510      	push	{r4, lr}
   b7e0e:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b7e10:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b7e14:	b172      	cbz	r2, b7e34 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b7e16:	f381 0204 	usat	r2, #4, r1
   b7e1a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b7e1e:	b2d2      	uxtb	r2, r2
   b7e20:	2109      	movs	r1, #9
   b7e22:	f7ff fd3e 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7e26:	4620      	mov	r0, r4
   b7e28:	2204      	movs	r2, #4
}
   b7e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7e2e:	214d      	movs	r1, #77	; 0x4d
   b7e30:	f7ff bd37 	b.w	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
}
   b7e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7e38:	f7ff be0a 	b.w	b7a50 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b7e3c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b7e3c:	b538      	push	{r3, r4, r5, lr}
   b7e3e:	460c      	mov	r4, r1
   b7e40:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b7e42:	780a      	ldrb	r2, [r1, #0]
   b7e44:	211d      	movs	r1, #29
   b7e46:	f7ff fd2c 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b7e4a:	7862      	ldrb	r2, [r4, #1]
   b7e4c:	211e      	movs	r1, #30
   b7e4e:	4628      	mov	r0, r5
   b7e50:	f7ff fd27 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7e54:	78a2      	ldrb	r2, [r4, #2]
   b7e56:	4628      	mov	r0, r5
   b7e58:	2126      	movs	r1, #38	; 0x26
}
   b7e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7e5e:	f7ff bd20 	b.w	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b7e64 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7e64:	2905      	cmp	r1, #5
{
   b7e66:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7e68:	d80f      	bhi.n	b7e8a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b7e6a:	4b09      	ldr	r3, [pc, #36]	; (b7e90 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b7e6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b7e70:	185c      	adds	r4, r3, r1
   b7e72:	5a5a      	ldrh	r2, [r3, r1]
   b7e74:	78a3      	ldrb	r3, [r4, #2]
   b7e76:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b7e7a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b7e7c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b7e80:	f7ff ffdc 	bl	b7e3c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b7e84:	2001      	movs	r0, #1
}
   b7e86:	b002      	add	sp, #8
   b7e88:	bd10      	pop	{r4, pc}
        return false;
   b7e8a:	2000      	movs	r0, #0
   b7e8c:	e7fb      	b.n	b7e86 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b7e8e:	bf00      	nop
   b7e90:	000bd594 	.word	0x000bd594

000b7e94 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b7e94:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7e96:	0a0a      	lsrs	r2, r1, #8
{
   b7e98:	4605      	mov	r5, r0
   b7e9a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7e9c:	2120      	movs	r1, #32
   b7e9e:	f7ff fd00 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b7ea2:	b2e2      	uxtb	r2, r4
   b7ea4:	4628      	mov	r0, r5
   b7ea6:	2121      	movs	r1, #33	; 0x21
}
   b7ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b7eac:	f7ff bcf9 	b.w	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>

000b7eb0 <_ZN7RH_RF954initEv>:
{
   b7eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7eb2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b7eb4:	f7ff fca4 	bl	b7800 <_ZN11RHSPIDriver4initEv>
   b7eb8:	4606      	mov	r6, r0
   b7eba:	b918      	cbnz	r0, b7ec4 <_ZN7RH_RF954initEv+0x14>
	return false;
   b7ebc:	2600      	movs	r6, #0
}
   b7ebe:	4630      	mov	r0, r6
   b7ec0:	b002      	add	sp, #8
   b7ec2:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b7ec4:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b7ec8:	2dff      	cmp	r5, #255	; 0xff
   b7eca:	d054      	beq.n	b7f76 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b7ecc:	4629      	mov	r1, r5
   b7ece:	4620      	mov	r0, r4
   b7ed0:	f7ff fd5d 	bl	b798e <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b7ed4:	2280      	movs	r2, #128	; 0x80
   b7ed6:	2101      	movs	r1, #1
   b7ed8:	4620      	mov	r0, r4
   b7eda:	f7ff fce2 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b7ede:	200a      	movs	r0, #10
   b7ee0:	f000 fd20 	bl	b8924 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b7ee4:	2101      	movs	r1, #1
   b7ee6:	4620      	mov	r0, r4
   b7ee8:	f7ff fcba 	bl	b7860 <_ZN11RHSPIDriver7spiReadEh>
   b7eec:	2880      	cmp	r0, #128	; 0x80
   b7eee:	d1e5      	bne.n	b7ebc <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b7ef0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b7ef4:	28ff      	cmp	r0, #255	; 0xff
   b7ef6:	d01c      	beq.n	b7f32 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b7ef8:	2100      	movs	r1, #0
   b7efa:	f003 fce7 	bl	bb8cc <pinMode>
	if (_myInterruptIndex == 0xff)
   b7efe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b7f02:	2bff      	cmp	r3, #255	; 0xff
   b7f04:	d107      	bne.n	b7f16 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b7f06:	4a26      	ldr	r2, [pc, #152]	; (b7fa0 <_ZN7RH_RF954initEv+0xf0>)
   b7f08:	7813      	ldrb	r3, [r2, #0]
   b7f0a:	2b03      	cmp	r3, #3
   b7f0c:	d8d6      	bhi.n	b7ebc <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b7f0e:	1c59      	adds	r1, r3, #1
   b7f10:	7011      	strb	r1, [r2, #0]
   b7f12:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b7f16:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b7f1a:	4b22      	ldr	r3, [pc, #136]	; (b7fa4 <_ZN7RH_RF954initEv+0xf4>)
   b7f1c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b7f20:	bb62      	cbnz	r2, b7f7c <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b7f22:	4921      	ldr	r1, [pc, #132]	; (b7fa8 <_ZN7RH_RF954initEv+0xf8>)
   b7f24:	9200      	str	r2, [sp, #0]
   b7f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7f2a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7f2c:	b2a8      	uxth	r0, r5
   b7f2e:	f001 fa41 	bl	b93b4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b7f32:	2200      	movs	r2, #0
   b7f34:	210e      	movs	r1, #14
   b7f36:	4620      	mov	r0, r4
   b7f38:	f7ff fcb3 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b7f3c:	2200      	movs	r2, #0
   b7f3e:	210f      	movs	r1, #15
   b7f40:	4620      	mov	r0, r4
   b7f42:	f7ff fcae 	bl	b78a2 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b7f46:	4620      	mov	r0, r4
   b7f48:	f7ff fe28 	bl	b7b9c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b7f4c:	2100      	movs	r1, #0
   b7f4e:	4620      	mov	r0, r4
   b7f50:	f7ff ff88 	bl	b7e64 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b7f54:	2108      	movs	r1, #8
   b7f56:	4620      	mov	r0, r4
   b7f58:	f7ff ff9c 	bl	b7e94 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b7f5c:	ed9f 0a13 	vldr	s0, [pc, #76]	; b7fac <_ZN7RH_RF954initEv+0xfc>
   b7f60:	4620      	mov	r0, r4
   b7f62:	f7ff fdd9 	bl	b7b18 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b7f66:	2300      	movs	r3, #0
   b7f68:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b7f6c:	210d      	movs	r1, #13
   b7f6e:	4620      	mov	r0, r4
   b7f70:	f7ff fd6e 	bl	b7a50 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b7f74:	e7a3      	b.n	b7ebe <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b7f76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b7f7a:	e7ab      	b.n	b7ed4 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b7f7c:	2a01      	cmp	r2, #1
   b7f7e:	f04f 0300 	mov.w	r3, #0
   b7f82:	d104      	bne.n	b7f8e <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b7f84:	9300      	str	r3, [sp, #0]
   b7f86:	490a      	ldr	r1, [pc, #40]	; (b7fb0 <_ZN7RH_RF954initEv+0x100>)
   b7f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7f8c:	e7ce      	b.n	b7f2c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b7f8e:	2a02      	cmp	r2, #2
   b7f90:	d194      	bne.n	b7ebc <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7f92:	9300      	str	r3, [sp, #0]
   b7f94:	4907      	ldr	r1, [pc, #28]	; (b7fb4 <_ZN7RH_RF954initEv+0x104>)
   b7f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7f9a:	2201      	movs	r2, #1
   b7f9c:	e7c6      	b.n	b7f2c <_ZN7RH_RF954initEv+0x7c>
   b7f9e:	bf00      	nop
   b7fa0:	2003e5fd 	.word	0x2003e5fd
   b7fa4:	2003e600 	.word	0x2003e600
   b7fa8:	000b7ce9 	.word	0x000b7ce9
   b7fac:	43d90000 	.word	0x43d90000
   b7fb0:	000b7cf9 	.word	0x000b7cf9
   b7fb4:	000b7d09 	.word	0x000b7d09

000b7fb8 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b7fb8:	4770      	bx	lr

000b7fba <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b7fba:	6803      	ldr	r3, [r0, #0]
   b7fbc:	685b      	ldr	r3, [r3, #4]
   b7fbe:	4718      	bx	r3

000b7fc0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b7fc0:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b7fc2:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b7fc4:	4604      	mov	r4, r0
    if (lastUpdate) {
   b7fc6:	b133      	cbz	r3, b7fd6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b7fc8:	b131      	cbz	r1, b7fd8 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b7fca:	6823      	ldr	r3, [r4, #0]
   b7fcc:	4620      	mov	r0, r4
   b7fce:	689b      	ldr	r3, [r3, #8]
   b7fd0:	4798      	blx	r3
            lastUpdate = 0;
   b7fd2:	2300      	movs	r3, #0
   b7fd4:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b7fd6:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7fd8:	f000 f92a 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b7fdc:	69a3      	ldr	r3, [r4, #24]
   b7fde:	1ac0      	subs	r0, r0, r3
   b7fe0:	69e3      	ldr	r3, [r4, #28]
   b7fe2:	4298      	cmp	r0, r3
   b7fe4:	d2f1      	bcs.n	b7fca <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b7fe6:	e7f6      	b.n	b7fd6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b7fe8 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b7fe8:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b7fea:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b7fec:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b7fee:	b11b      	cbz	r3, b7ff8 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b7ff0:	f000 f91e 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b7ff4:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b7ff6:	bd10      	pop	{r4, pc}
        save();
   b7ff8:	6803      	ldr	r3, [r0, #0]
}
   b7ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b7ffe:	689b      	ldr	r3, [r3, #8]
   b8000:	4718      	bx	r3

000b8002 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b8002:	f000 b8ed 	b.w	b81e0 <os_mutex_recursive_unlock>

000b8006 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b8006:	b510      	push	{r4, lr}
   b8008:	4604      	mov	r4, r0
   b800a:	3004      	adds	r0, #4
   b800c:	f7fd f836 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8010:	6823      	ldr	r3, [r4, #0]
   b8012:	68e1      	ldr	r1, [r4, #12]
   b8014:	695b      	ldr	r3, [r3, #20]
   b8016:	4620      	mov	r0, r4
   b8018:	4798      	blx	r3
   b801a:	b918      	cbnz	r0, b8024 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b801c:	6823      	ldr	r3, [r4, #0]
   b801e:	4620      	mov	r0, r4
   b8020:	699b      	ldr	r3, [r3, #24]
   b8022:	4798      	blx	r3
      { _M_device.unlock(); }
   b8024:	6860      	ldr	r0, [r4, #4]
   b8026:	f7ff ffec 	bl	b8002 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b802a:	2001      	movs	r0, #1
   b802c:	bd10      	pop	{r4, pc}
	...

000b8030 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8030:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8032:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b8036:	4f18      	ldr	r7, [pc, #96]	; (b8098 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8038:	4e18      	ldr	r6, [pc, #96]	; (b809c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b803a:	4d19      	ldr	r5, [pc, #100]	; (b80a0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b803c:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b803e:	42a0      	cmp	r0, r4
   b8040:	d00c      	beq.n	b805c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b8042:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b8046:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b8048:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b804c:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b804e:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b8050:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b8054:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b8058:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b805a:	e7f0      	b.n	b803e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b805c:	f001 0403 	and.w	r4, r1, #3
   b8060:	4404      	add	r4, r0
    k = 0;
   b8062:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b8064:	42a0      	cmp	r0, r4
   b8066:	d004      	beq.n	b8072 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b8068:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b806c:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b8070:	e7f8      	b.n	b8064 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b8072:	4809      	ldr	r0, [pc, #36]	; (b8098 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b8074:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b8076:	4809      	ldr	r0, [pc, #36]	; (b809c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b8078:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b807c:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b807e:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8080:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b8082:	4b08      	ldr	r3, [pc, #32]	; (b80a4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b8084:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b8088:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b808a:	4b07      	ldr	r3, [pc, #28]	; (b80a8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b808c:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b8090:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b8092:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b8096:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8098:	cc9e2d51 	.word	0xcc9e2d51
   b809c:	1b873593 	.word	0x1b873593
   b80a0:	e6546b64 	.word	0xe6546b64
   b80a4:	85ebca6b 	.word	0x85ebca6b
   b80a8:	c2b2ae35 	.word	0xc2b2ae35

000b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b80ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80ae:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b80b0:	3004      	adds	r0, #4
   b80b2:	f7fc ffe3 	bl	b507c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b80b6:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b80b8:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b80ba:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b80bc:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b80be:	68a6      	ldr	r6, [r4, #8]
   b80c0:	4a05      	ldr	r2, [pc, #20]	; (b80d8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b80c2:	88f1      	ldrh	r1, [r6, #6]
   b80c4:	4630      	mov	r0, r6
   b80c6:	f7ff ffb3 	bl	b8030 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b80ca:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b80cc:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b80ce:	6860      	ldr	r0, [r4, #4]
   b80d0:	f7ff ff97 	bl	b8002 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b80d4:	4628      	mov	r0, r5
   b80d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b80d8:	851c2a3f 	.word	0x851c2a3f

000b80dc <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b80dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80de:	460d      	mov	r5, r1
   b80e0:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b80e2:	f7ff ffe3 	bl	b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b80e6:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b80e8:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b80ea:	d923      	bls.n	b8134 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b80ec:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b80ee:	6922      	ldr	r2, [r4, #16]
   b80f0:	6819      	ldr	r1, [r3, #0]
   b80f2:	4291      	cmp	r1, r2
   b80f4:	d11f      	bne.n	b8136 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b80f6:	8899      	ldrh	r1, [r3, #4]
   b80f8:	8aa2      	ldrh	r2, [r4, #20]
   b80fa:	4291      	cmp	r1, r2
   b80fc:	d11b      	bne.n	b8136 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b80fe:	88d9      	ldrh	r1, [r3, #6]
   b8100:	b2aa      	uxth	r2, r5
   b8102:	4291      	cmp	r1, r2
   b8104:	d817      	bhi.n	b8136 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b8106:	689a      	ldr	r2, [r3, #8]
   b8108:	4282      	cmp	r2, r0
   b810a:	d114      	bne.n	b8136 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b810c:	68e2      	ldr	r2, [r4, #12]
   b810e:	42aa      	cmp	r2, r5
   b8110:	d905      	bls.n	b811e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b8112:	2100      	movs	r1, #0
   b8114:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b8116:	68e2      	ldr	r2, [r4, #12]
   b8118:	3501      	adds	r5, #1
   b811a:	42aa      	cmp	r2, r5
   b811c:	d8fa      	bhi.n	b8114 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b811e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b8122:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8124:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b8126:	68a5      	ldr	r5, [r4, #8]
   b8128:	f7ff ffc0 	bl	b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b812c:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b812e:	2001      	movs	r0, #1
}
   b8130:	b002      	add	sp, #8
   b8132:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b8134:	b19d      	cbz	r5, b815e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b8136:	68a1      	ldr	r1, [r4, #8]
   b8138:	680a      	ldr	r2, [r1, #0]
   b813a:	b192      	cbz	r2, b8162 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b813c:	6888      	ldr	r0, [r1, #8]
   b813e:	888b      	ldrh	r3, [r1, #4]
   b8140:	9001      	str	r0, [sp, #4]
   b8142:	88c9      	ldrh	r1, [r1, #6]
   b8144:	4808      	ldr	r0, [pc, #32]	; (b8168 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b8146:	9100      	str	r1, [sp, #0]
   b8148:	4908      	ldr	r1, [pc, #32]	; (b816c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b814a:	f7fd fea2 	bl	b5e92 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b814e:	e9cd 5600 	strd	r5, r6, [sp]
   b8152:	8aa3      	ldrh	r3, [r4, #20]
   b8154:	6922      	ldr	r2, [r4, #16]
   b8156:	4906      	ldr	r1, [pc, #24]	; (b8170 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b8158:	4803      	ldr	r0, [pc, #12]	; (b8168 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b815a:	f7fd fe9a 	bl	b5e92 <_ZNK5spark6Logger5traceEPKcz>
   b815e:	2000      	movs	r0, #0
   b8160:	e7e6      	b.n	b8130 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b8162:	4610      	mov	r0, r2
   b8164:	e7e4      	b.n	b8130 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b8166:	bf00      	nop
   b8168:	2003e654 	.word	0x2003e654
   b816c:	000bd630 	.word	0x000bd630
   b8170:	000bd661 	.word	0x000bd661

000b8174 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b8174:	b538      	push	{r3, r4, r5, lr}
   b8176:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8178:	68c2      	ldr	r2, [r0, #12]
   b817a:	6880      	ldr	r0, [r0, #8]
   b817c:	2100      	movs	r1, #0
   b817e:	f004 f9e5 	bl	bc54c <memset>
    savedDataHeader->magic = savedDataMagic;
   b8182:	68a3      	ldr	r3, [r4, #8]
   b8184:	6922      	ldr	r2, [r4, #16]
   b8186:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b8188:	68a3      	ldr	r3, [r4, #8]
   b818a:	8aa2      	ldrh	r2, [r4, #20]
   b818c:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b818e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b8192:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8194:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b8196:	68a5      	ldr	r5, [r4, #8]
   b8198:	f7ff ff88 	bl	b80ac <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b819c:	60a8      	str	r0, [r5, #8]
}
   b819e:	bd38      	pop	{r3, r4, r5, pc}

000b81a0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b81a0:	b508      	push	{r3, lr}
   b81a2:	4b02      	ldr	r3, [pc, #8]	; (b81ac <cellular_signal+0xc>)
   b81a4:	681b      	ldr	r3, [r3, #0]
   b81a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b81a8:	9301      	str	r3, [sp, #4]
   b81aa:	bd08      	pop	{r3, pc}
   b81ac:	00030274 	.word	0x00030274

000b81b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b81b0:	b508      	push	{r3, lr}
   b81b2:	4b02      	ldr	r3, [pc, #8]	; (b81bc <os_mutex_recursive_create+0xc>)
   b81b4:	681b      	ldr	r3, [r3, #0]
   b81b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b81b8:	9301      	str	r3, [sp, #4]
   b81ba:	bd08      	pop	{r3, pc}
   b81bc:	00030248 	.word	0x00030248

000b81c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b81c0:	b508      	push	{r3, lr}
   b81c2:	4b02      	ldr	r3, [pc, #8]	; (b81cc <os_mutex_recursive_destroy+0xc>)
   b81c4:	681b      	ldr	r3, [r3, #0]
   b81c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b81c8:	9301      	str	r3, [sp, #4]
   b81ca:	bd08      	pop	{r3, pc}
   b81cc:	00030248 	.word	0x00030248

000b81d0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b81d0:	b508      	push	{r3, lr}
   b81d2:	4b02      	ldr	r3, [pc, #8]	; (b81dc <os_mutex_recursive_lock+0xc>)
   b81d4:	681b      	ldr	r3, [r3, #0]
   b81d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b81d8:	9301      	str	r3, [sp, #4]
   b81da:	bd08      	pop	{r3, pc}
   b81dc:	00030248 	.word	0x00030248

000b81e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b81e0:	b508      	push	{r3, lr}
   b81e2:	4b02      	ldr	r3, [pc, #8]	; (b81ec <os_mutex_recursive_unlock+0xc>)
   b81e4:	681b      	ldr	r3, [r3, #0]
   b81e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b81e8:	9301      	str	r3, [sp, #4]
   b81ea:	bd08      	pop	{r3, pc}
   b81ec:	00030248 	.word	0x00030248

000b81f0 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b81f0:	b508      	push	{r3, lr}
   b81f2:	4b02      	ldr	r3, [pc, #8]	; (b81fc <HAL_Core_Runtime_Info+0xc>)
   b81f4:	681b      	ldr	r3, [r3, #0]
   b81f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b81f8:	9301      	str	r3, [sp, #4]
   b81fa:	bd08      	pop	{r3, pc}
   b81fc:	00030234 	.word	0x00030234

000b8200 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8200:	b508      	push	{r3, lr}
   b8202:	4b02      	ldr	r3, [pc, #8]	; (b820c <HAL_Feature_Set+0xc>)
   b8204:	681b      	ldr	r3, [r3, #0]
   b8206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8208:	9301      	str	r3, [sp, #4]
   b820a:	bd08      	pop	{r3, pc}
   b820c:	00030234 	.word	0x00030234

000b8210 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8210:	b508      	push	{r3, lr}
   b8212:	4b02      	ldr	r3, [pc, #8]	; (b821c <HAL_RNG_GetRandomNumber+0xc>)
   b8214:	681b      	ldr	r3, [r3, #0]
   b8216:	685b      	ldr	r3, [r3, #4]
   b8218:	9301      	str	r3, [sp, #4]
   b821a:	bd08      	pop	{r3, pc}
   b821c:	00030218 	.word	0x00030218

000b8220 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8220:	b508      	push	{r3, lr}
   b8222:	4b02      	ldr	r3, [pc, #8]	; (b822c <HAL_Delay_Microseconds+0xc>)
   b8224:	681b      	ldr	r3, [r3, #0]
   b8226:	68db      	ldr	r3, [r3, #12]
   b8228:	9301      	str	r3, [sp, #4]
   b822a:	bd08      	pop	{r3, pc}
   b822c:	00030218 	.word	0x00030218

000b8230 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8230:	b508      	push	{r3, lr}
   b8232:	4b02      	ldr	r3, [pc, #8]	; (b823c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8234:	681b      	ldr	r3, [r3, #0]
   b8236:	695b      	ldr	r3, [r3, #20]
   b8238:	9301      	str	r3, [sp, #4]
   b823a:	bd08      	pop	{r3, pc}
   b823c:	00030218 	.word	0x00030218

000b8240 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8240:	b508      	push	{r3, lr}
   b8242:	4b02      	ldr	r3, [pc, #8]	; (b824c <hal_rtc_time_is_valid+0xc>)
   b8244:	681b      	ldr	r3, [r3, #0]
   b8246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8248:	9301      	str	r3, [sp, #4]
   b824a:	bd08      	pop	{r3, pc}
   b824c:	00030218 	.word	0x00030218

000b8250 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8250:	b508      	push	{r3, lr}
   b8252:	4b02      	ldr	r3, [pc, #8]	; (b825c <hal_timer_millis+0xc>)
   b8254:	681b      	ldr	r3, [r3, #0]
   b8256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8258:	9301      	str	r3, [sp, #4]
   b825a:	bd08      	pop	{r3, pc}
   b825c:	00030218 	.word	0x00030218

000b8260 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8260:	b508      	push	{r3, lr}
   b8262:	4b02      	ldr	r3, [pc, #8]	; (b826c <hal_rtc_get_time+0xc>)
   b8264:	681b      	ldr	r3, [r3, #0]
   b8266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8268:	9301      	str	r3, [sp, #4]
   b826a:	bd08      	pop	{r3, pc}
   b826c:	00030218 	.word	0x00030218

000b8270 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8270:	b508      	push	{r3, lr}
   b8272:	4b02      	ldr	r3, [pc, #8]	; (b827c <hal_rtc_set_time+0xc>)
   b8274:	681b      	ldr	r3, [r3, #0]
   b8276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8278:	9301      	str	r3, [sp, #4]
   b827a:	bd08      	pop	{r3, pc}
   b827c:	00030218 	.word	0x00030218

000b8280 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8280:	b508      	push	{r3, lr}
   b8282:	4b02      	ldr	r3, [pc, #8]	; (b828c <HAL_Pin_Map+0xc>)
   b8284:	681b      	ldr	r3, [r3, #0]
   b8286:	681b      	ldr	r3, [r3, #0]
   b8288:	9301      	str	r3, [sp, #4]
   b828a:	bd08      	pop	{r3, pc}
   b828c:	0003022c 	.word	0x0003022c

000b8290 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8290:	b508      	push	{r3, lr}
   b8292:	4b02      	ldr	r3, [pc, #8]	; (b829c <HAL_Validate_Pin_Function+0xc>)
   b8294:	681b      	ldr	r3, [r3, #0]
   b8296:	685b      	ldr	r3, [r3, #4]
   b8298:	9301      	str	r3, [sp, #4]
   b829a:	bd08      	pop	{r3, pc}
   b829c:	0003022c 	.word	0x0003022c

000b82a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b82a0:	b508      	push	{r3, lr}
   b82a2:	4b02      	ldr	r3, [pc, #8]	; (b82ac <HAL_Pin_Mode+0xc>)
   b82a4:	681b      	ldr	r3, [r3, #0]
   b82a6:	689b      	ldr	r3, [r3, #8]
   b82a8:	9301      	str	r3, [sp, #4]
   b82aa:	bd08      	pop	{r3, pc}
   b82ac:	0003022c 	.word	0x0003022c

000b82b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b82b0:	b508      	push	{r3, lr}
   b82b2:	4b02      	ldr	r3, [pc, #8]	; (b82bc <HAL_Get_Pin_Mode+0xc>)
   b82b4:	681b      	ldr	r3, [r3, #0]
   b82b6:	68db      	ldr	r3, [r3, #12]
   b82b8:	9301      	str	r3, [sp, #4]
   b82ba:	bd08      	pop	{r3, pc}
   b82bc:	0003022c 	.word	0x0003022c

000b82c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b82c0:	b508      	push	{r3, lr}
   b82c2:	4b02      	ldr	r3, [pc, #8]	; (b82cc <HAL_GPIO_Write+0xc>)
   b82c4:	681b      	ldr	r3, [r3, #0]
   b82c6:	691b      	ldr	r3, [r3, #16]
   b82c8:	9301      	str	r3, [sp, #4]
   b82ca:	bd08      	pop	{r3, pc}
   b82cc:	0003022c 	.word	0x0003022c

000b82d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b82d0:	b508      	push	{r3, lr}
   b82d2:	4b02      	ldr	r3, [pc, #8]	; (b82dc <HAL_GPIO_Read+0xc>)
   b82d4:	681b      	ldr	r3, [r3, #0]
   b82d6:	695b      	ldr	r3, [r3, #20]
   b82d8:	9301      	str	r3, [sp, #4]
   b82da:	bd08      	pop	{r3, pc}
   b82dc:	0003022c 	.word	0x0003022c

000b82e0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b82e0:	b508      	push	{r3, lr}
   b82e2:	4b02      	ldr	r3, [pc, #8]	; (b82ec <HAL_Interrupts_Attach+0xc>)
   b82e4:	681b      	ldr	r3, [r3, #0]
   b82e6:	699b      	ldr	r3, [r3, #24]
   b82e8:	9301      	str	r3, [sp, #4]
   b82ea:	bd08      	pop	{r3, pc}
   b82ec:	0003022c 	.word	0x0003022c

000b82f0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b82f0:	b508      	push	{r3, lr}
   b82f2:	4b02      	ldr	r3, [pc, #8]	; (b82fc <HAL_Interrupts_Detach+0xc>)
   b82f4:	681b      	ldr	r3, [r3, #0]
   b82f6:	69db      	ldr	r3, [r3, #28]
   b82f8:	9301      	str	r3, [sp, #4]
   b82fa:	bd08      	pop	{r3, pc}
   b82fc:	0003022c 	.word	0x0003022c

000b8300 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8300:	b508      	push	{r3, lr}
   b8302:	4b02      	ldr	r3, [pc, #8]	; (b830c <hal_adc_read+0xc>)
   b8304:	681b      	ldr	r3, [r3, #0]
   b8306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8308:	9301      	str	r3, [sp, #4]
   b830a:	bd08      	pop	{r3, pc}
   b830c:	0003022c 	.word	0x0003022c

000b8310 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8310:	b508      	push	{r3, lr}
   b8312:	4b02      	ldr	r3, [pc, #8]	; (b831c <hal_i2c_begin+0xc>)
   b8314:	681b      	ldr	r3, [r3, #0]
   b8316:	68db      	ldr	r3, [r3, #12]
   b8318:	9301      	str	r3, [sp, #4]
   b831a:	bd08      	pop	{r3, pc}
   b831c:	00030228 	.word	0x00030228

000b8320 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8320:	b508      	push	{r3, lr}
   b8322:	4b02      	ldr	r3, [pc, #8]	; (b832c <hal_i2c_begin_transmission+0xc>)
   b8324:	681b      	ldr	r3, [r3, #0]
   b8326:	699b      	ldr	r3, [r3, #24]
   b8328:	9301      	str	r3, [sp, #4]
   b832a:	bd08      	pop	{r3, pc}
   b832c:	00030228 	.word	0x00030228

000b8330 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8330:	b508      	push	{r3, lr}
   b8332:	4b02      	ldr	r3, [pc, #8]	; (b833c <hal_i2c_end_transmission+0xc>)
   b8334:	681b      	ldr	r3, [r3, #0]
   b8336:	69db      	ldr	r3, [r3, #28]
   b8338:	9301      	str	r3, [sp, #4]
   b833a:	bd08      	pop	{r3, pc}
   b833c:	00030228 	.word	0x00030228

000b8340 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8340:	b508      	push	{r3, lr}
   b8342:	4b02      	ldr	r3, [pc, #8]	; (b834c <hal_i2c_write+0xc>)
   b8344:	681b      	ldr	r3, [r3, #0]
   b8346:	6a1b      	ldr	r3, [r3, #32]
   b8348:	9301      	str	r3, [sp, #4]
   b834a:	bd08      	pop	{r3, pc}
   b834c:	00030228 	.word	0x00030228

000b8350 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8350:	b508      	push	{r3, lr}
   b8352:	4b02      	ldr	r3, [pc, #8]	; (b835c <hal_i2c_available+0xc>)
   b8354:	681b      	ldr	r3, [r3, #0]
   b8356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8358:	9301      	str	r3, [sp, #4]
   b835a:	bd08      	pop	{r3, pc}
   b835c:	00030228 	.word	0x00030228

000b8360 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8360:	b508      	push	{r3, lr}
   b8362:	4b02      	ldr	r3, [pc, #8]	; (b836c <hal_i2c_read+0xc>)
   b8364:	681b      	ldr	r3, [r3, #0]
   b8366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8368:	9301      	str	r3, [sp, #4]
   b836a:	bd08      	pop	{r3, pc}
   b836c:	00030228 	.word	0x00030228

000b8370 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8370:	b508      	push	{r3, lr}
   b8372:	4b02      	ldr	r3, [pc, #8]	; (b837c <hal_i2c_peek+0xc>)
   b8374:	681b      	ldr	r3, [r3, #0]
   b8376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8378:	9301      	str	r3, [sp, #4]
   b837a:	bd08      	pop	{r3, pc}
   b837c:	00030228 	.word	0x00030228

000b8380 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8380:	b508      	push	{r3, lr}
   b8382:	4b02      	ldr	r3, [pc, #8]	; (b838c <hal_i2c_flush+0xc>)
   b8384:	681b      	ldr	r3, [r3, #0]
   b8386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8388:	9301      	str	r3, [sp, #4]
   b838a:	bd08      	pop	{r3, pc}
   b838c:	00030228 	.word	0x00030228

000b8390 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8390:	b508      	push	{r3, lr}
   b8392:	4b02      	ldr	r3, [pc, #8]	; (b839c <hal_i2c_is_enabled+0xc>)
   b8394:	681b      	ldr	r3, [r3, #0]
   b8396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8398:	9301      	str	r3, [sp, #4]
   b839a:	bd08      	pop	{r3, pc}
   b839c:	00030228 	.word	0x00030228

000b83a0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b83a0:	b508      	push	{r3, lr}
   b83a2:	4b02      	ldr	r3, [pc, #8]	; (b83ac <hal_i2c_init+0xc>)
   b83a4:	681b      	ldr	r3, [r3, #0]
   b83a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b83a8:	9301      	str	r3, [sp, #4]
   b83aa:	bd08      	pop	{r3, pc}
   b83ac:	00030228 	.word	0x00030228

000b83b0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b83b0:	b508      	push	{r3, lr}
   b83b2:	4b02      	ldr	r3, [pc, #8]	; (b83bc <hal_i2c_lock+0xc>)
   b83b4:	681b      	ldr	r3, [r3, #0]
   b83b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b83b8:	9301      	str	r3, [sp, #4]
   b83ba:	bd08      	pop	{r3, pc}
   b83bc:	00030228 	.word	0x00030228

000b83c0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b83c0:	b508      	push	{r3, lr}
   b83c2:	4b02      	ldr	r3, [pc, #8]	; (b83cc <hal_i2c_unlock+0xc>)
   b83c4:	681b      	ldr	r3, [r3, #0]
   b83c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b83c8:	9301      	str	r3, [sp, #4]
   b83ca:	bd08      	pop	{r3, pc}
   b83cc:	00030228 	.word	0x00030228

000b83d0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b83d0:	b508      	push	{r3, lr}
   b83d2:	4b02      	ldr	r3, [pc, #8]	; (b83dc <hal_i2c_request_ex+0xc>)
   b83d4:	681b      	ldr	r3, [r3, #0]
   b83d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b83d8:	9301      	str	r3, [sp, #4]
   b83da:	bd08      	pop	{r3, pc}
   b83dc:	00030228 	.word	0x00030228

000b83e0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b83e0:	b508      	push	{r3, lr}
   b83e2:	4b02      	ldr	r3, [pc, #8]	; (b83ec <inet_inet_ntop+0xc>)
   b83e4:	681b      	ldr	r3, [r3, #0]
   b83e6:	695b      	ldr	r3, [r3, #20]
   b83e8:	9301      	str	r3, [sp, #4]
   b83ea:	bd08      	pop	{r3, pc}
   b83ec:	00030264 	.word	0x00030264

000b83f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b83f0:	b508      	push	{r3, lr}
   b83f2:	4b02      	ldr	r3, [pc, #8]	; (b83fc <netdb_freeaddrinfo+0xc>)
   b83f4:	681b      	ldr	r3, [r3, #0]
   b83f6:	689b      	ldr	r3, [r3, #8]
   b83f8:	9301      	str	r3, [sp, #4]
   b83fa:	bd08      	pop	{r3, pc}
   b83fc:	00030268 	.word	0x00030268

000b8400 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8400:	b508      	push	{r3, lr}
   b8402:	4b02      	ldr	r3, [pc, #8]	; (b840c <netdb_getaddrinfo+0xc>)
   b8404:	681b      	ldr	r3, [r3, #0]
   b8406:	68db      	ldr	r3, [r3, #12]
   b8408:	9301      	str	r3, [sp, #4]
   b840a:	bd08      	pop	{r3, pc}
   b840c:	00030268 	.word	0x00030268

000b8410 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8410:	b508      	push	{r3, lr}
   b8412:	4b02      	ldr	r3, [pc, #8]	; (b841c <hal_spi_begin+0xc>)
   b8414:	681b      	ldr	r3, [r3, #0]
   b8416:	681b      	ldr	r3, [r3, #0]
   b8418:	9301      	str	r3, [sp, #4]
   b841a:	bd08      	pop	{r3, pc}
   b841c:	00030230 	.word	0x00030230

000b8420 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8420:	b508      	push	{r3, lr}
   b8422:	4b02      	ldr	r3, [pc, #8]	; (b842c <hal_spi_end+0xc>)
   b8424:	681b      	ldr	r3, [r3, #0]
   b8426:	685b      	ldr	r3, [r3, #4]
   b8428:	9301      	str	r3, [sp, #4]
   b842a:	bd08      	pop	{r3, pc}
   b842c:	00030230 	.word	0x00030230

000b8430 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8430:	b508      	push	{r3, lr}
   b8432:	4b02      	ldr	r3, [pc, #8]	; (b843c <hal_spi_transfer+0xc>)
   b8434:	681b      	ldr	r3, [r3, #0]
   b8436:	695b      	ldr	r3, [r3, #20]
   b8438:	9301      	str	r3, [sp, #4]
   b843a:	bd08      	pop	{r3, pc}
   b843c:	00030230 	.word	0x00030230

000b8440 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8440:	b508      	push	{r3, lr}
   b8442:	4b02      	ldr	r3, [pc, #8]	; (b844c <hal_spi_init+0xc>)
   b8444:	681b      	ldr	r3, [r3, #0]
   b8446:	69db      	ldr	r3, [r3, #28]
   b8448:	9301      	str	r3, [sp, #4]
   b844a:	bd08      	pop	{r3, pc}
   b844c:	00030230 	.word	0x00030230

000b8450 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8450:	b508      	push	{r3, lr}
   b8452:	4b02      	ldr	r3, [pc, #8]	; (b845c <hal_spi_is_enabled+0xc>)
   b8454:	681b      	ldr	r3, [r3, #0]
   b8456:	6a1b      	ldr	r3, [r3, #32]
   b8458:	9301      	str	r3, [sp, #4]
   b845a:	bd08      	pop	{r3, pc}
   b845c:	00030230 	.word	0x00030230

000b8460 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8460:	b508      	push	{r3, lr}
   b8462:	4b02      	ldr	r3, [pc, #8]	; (b846c <hal_spi_info+0xc>)
   b8464:	681b      	ldr	r3, [r3, #0]
   b8466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8468:	9301      	str	r3, [sp, #4]
   b846a:	bd08      	pop	{r3, pc}
   b846c:	00030230 	.word	0x00030230

000b8470 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8470:	b508      	push	{r3, lr}
   b8472:	4b02      	ldr	r3, [pc, #8]	; (b847c <hal_spi_set_settings+0xc>)
   b8474:	681b      	ldr	r3, [r3, #0]
   b8476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8478:	9301      	str	r3, [sp, #4]
   b847a:	bd08      	pop	{r3, pc}
   b847c:	00030230 	.word	0x00030230

000b8480 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8480:	b508      	push	{r3, lr}
   b8482:	4b02      	ldr	r3, [pc, #8]	; (b848c <hal_spi_acquire+0xc>)
   b8484:	681b      	ldr	r3, [r3, #0]
   b8486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8488:	9301      	str	r3, [sp, #4]
   b848a:	bd08      	pop	{r3, pc}
   b848c:	00030230 	.word	0x00030230

000b8490 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8490:	b508      	push	{r3, lr}
   b8492:	4b02      	ldr	r3, [pc, #8]	; (b849c <hal_spi_release+0xc>)
   b8494:	681b      	ldr	r3, [r3, #0]
   b8496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8498:	9301      	str	r3, [sp, #4]
   b849a:	bd08      	pop	{r3, pc}
   b849c:	00030230 	.word	0x00030230

000b84a0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b84a0:	b508      	push	{r3, lr}
   b84a2:	4b02      	ldr	r3, [pc, #8]	; (b84ac <hal_usart_end+0xc>)
   b84a4:	681b      	ldr	r3, [r3, #0]
   b84a6:	689b      	ldr	r3, [r3, #8]
   b84a8:	9301      	str	r3, [sp, #4]
   b84aa:	bd08      	pop	{r3, pc}
   b84ac:	0003023c 	.word	0x0003023c

000b84b0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b84b0:	b508      	push	{r3, lr}
   b84b2:	4b02      	ldr	r3, [pc, #8]	; (b84bc <hal_usart_write+0xc>)
   b84b4:	681b      	ldr	r3, [r3, #0]
   b84b6:	68db      	ldr	r3, [r3, #12]
   b84b8:	9301      	str	r3, [sp, #4]
   b84ba:	bd08      	pop	{r3, pc}
   b84bc:	0003023c 	.word	0x0003023c

000b84c0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b84c0:	b508      	push	{r3, lr}
   b84c2:	4b02      	ldr	r3, [pc, #8]	; (b84cc <hal_usart_available+0xc>)
   b84c4:	681b      	ldr	r3, [r3, #0]
   b84c6:	691b      	ldr	r3, [r3, #16]
   b84c8:	9301      	str	r3, [sp, #4]
   b84ca:	bd08      	pop	{r3, pc}
   b84cc:	0003023c 	.word	0x0003023c

000b84d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b84d0:	b508      	push	{r3, lr}
   b84d2:	4b02      	ldr	r3, [pc, #8]	; (b84dc <hal_usart_read+0xc>)
   b84d4:	681b      	ldr	r3, [r3, #0]
   b84d6:	695b      	ldr	r3, [r3, #20]
   b84d8:	9301      	str	r3, [sp, #4]
   b84da:	bd08      	pop	{r3, pc}
   b84dc:	0003023c 	.word	0x0003023c

000b84e0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b84e0:	b508      	push	{r3, lr}
   b84e2:	4b02      	ldr	r3, [pc, #8]	; (b84ec <hal_usart_peek+0xc>)
   b84e4:	681b      	ldr	r3, [r3, #0]
   b84e6:	699b      	ldr	r3, [r3, #24]
   b84e8:	9301      	str	r3, [sp, #4]
   b84ea:	bd08      	pop	{r3, pc}
   b84ec:	0003023c 	.word	0x0003023c

000b84f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b84f0:	b508      	push	{r3, lr}
   b84f2:	4b02      	ldr	r3, [pc, #8]	; (b84fc <hal_usart_flush+0xc>)
   b84f4:	681b      	ldr	r3, [r3, #0]
   b84f6:	69db      	ldr	r3, [r3, #28]
   b84f8:	9301      	str	r3, [sp, #4]
   b84fa:	bd08      	pop	{r3, pc}
   b84fc:	0003023c 	.word	0x0003023c

000b8500 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8500:	b508      	push	{r3, lr}
   b8502:	4b02      	ldr	r3, [pc, #8]	; (b850c <hal_usart_is_enabled+0xc>)
   b8504:	681b      	ldr	r3, [r3, #0]
   b8506:	6a1b      	ldr	r3, [r3, #32]
   b8508:	9301      	str	r3, [sp, #4]
   b850a:	bd08      	pop	{r3, pc}
   b850c:	0003023c 	.word	0x0003023c

000b8510 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8510:	b508      	push	{r3, lr}
   b8512:	4b02      	ldr	r3, [pc, #8]	; (b851c <hal_usart_available_data_for_write+0xc>)
   b8514:	681b      	ldr	r3, [r3, #0]
   b8516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8518:	9301      	str	r3, [sp, #4]
   b851a:	bd08      	pop	{r3, pc}
   b851c:	0003023c 	.word	0x0003023c

000b8520 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8520:	b508      	push	{r3, lr}
   b8522:	4b02      	ldr	r3, [pc, #8]	; (b852c <hal_usart_begin_config+0xc>)
   b8524:	681b      	ldr	r3, [r3, #0]
   b8526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8528:	9301      	str	r3, [sp, #4]
   b852a:	bd08      	pop	{r3, pc}
   b852c:	0003023c 	.word	0x0003023c

000b8530 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8530:	b508      	push	{r3, lr}
   b8532:	4b02      	ldr	r3, [pc, #8]	; (b853c <hal_usart_init_ex+0xc>)
   b8534:	681b      	ldr	r3, [r3, #0]
   b8536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8538:	9301      	str	r3, [sp, #4]
   b853a:	bd08      	pop	{r3, pc}
   b853c:	0003023c 	.word	0x0003023c

000b8540 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8540:	b508      	push	{r3, lr}
   b8542:	4b02      	ldr	r3, [pc, #8]	; (b854c <HAL_USB_USART_Init+0xc>)
   b8544:	681b      	ldr	r3, [r3, #0]
   b8546:	681b      	ldr	r3, [r3, #0]
   b8548:	9301      	str	r3, [sp, #4]
   b854a:	bd08      	pop	{r3, pc}
   b854c:	0003024c 	.word	0x0003024c

000b8550 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8550:	b508      	push	{r3, lr}
   b8552:	4b02      	ldr	r3, [pc, #8]	; (b855c <HAL_USB_USART_Begin+0xc>)
   b8554:	681b      	ldr	r3, [r3, #0]
   b8556:	685b      	ldr	r3, [r3, #4]
   b8558:	9301      	str	r3, [sp, #4]
   b855a:	bd08      	pop	{r3, pc}
   b855c:	0003024c 	.word	0x0003024c

000b8560 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b8560:	b508      	push	{r3, lr}
   b8562:	4b02      	ldr	r3, [pc, #8]	; (b856c <HAL_USB_USART_End+0xc>)
   b8564:	681b      	ldr	r3, [r3, #0]
   b8566:	689b      	ldr	r3, [r3, #8]
   b8568:	9301      	str	r3, [sp, #4]
   b856a:	bd08      	pop	{r3, pc}
   b856c:	0003024c 	.word	0x0003024c

000b8570 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8570:	b508      	push	{r3, lr}
   b8572:	4b02      	ldr	r3, [pc, #8]	; (b857c <HAL_USB_USART_Available_Data+0xc>)
   b8574:	681b      	ldr	r3, [r3, #0]
   b8576:	691b      	ldr	r3, [r3, #16]
   b8578:	9301      	str	r3, [sp, #4]
   b857a:	bd08      	pop	{r3, pc}
   b857c:	0003024c 	.word	0x0003024c

000b8580 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8580:	b508      	push	{r3, lr}
   b8582:	4b02      	ldr	r3, [pc, #8]	; (b858c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8584:	681b      	ldr	r3, [r3, #0]
   b8586:	695b      	ldr	r3, [r3, #20]
   b8588:	9301      	str	r3, [sp, #4]
   b858a:	bd08      	pop	{r3, pc}
   b858c:	0003024c 	.word	0x0003024c

000b8590 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8590:	b508      	push	{r3, lr}
   b8592:	4b02      	ldr	r3, [pc, #8]	; (b859c <HAL_USB_USART_Receive_Data+0xc>)
   b8594:	681b      	ldr	r3, [r3, #0]
   b8596:	699b      	ldr	r3, [r3, #24]
   b8598:	9301      	str	r3, [sp, #4]
   b859a:	bd08      	pop	{r3, pc}
   b859c:	0003024c 	.word	0x0003024c

000b85a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85a0:	b508      	push	{r3, lr}
   b85a2:	4b02      	ldr	r3, [pc, #8]	; (b85ac <HAL_USB_USART_Send_Data+0xc>)
   b85a4:	681b      	ldr	r3, [r3, #0]
   b85a6:	69db      	ldr	r3, [r3, #28]
   b85a8:	9301      	str	r3, [sp, #4]
   b85aa:	bd08      	pop	{r3, pc}
   b85ac:	0003024c 	.word	0x0003024c

000b85b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b85b0:	b508      	push	{r3, lr}
   b85b2:	4b02      	ldr	r3, [pc, #8]	; (b85bc <HAL_USB_USART_Flush_Data+0xc>)
   b85b4:	681b      	ldr	r3, [r3, #0]
   b85b6:	6a1b      	ldr	r3, [r3, #32]
   b85b8:	9301      	str	r3, [sp, #4]
   b85ba:	bd08      	pop	{r3, pc}
   b85bc:	0003024c 	.word	0x0003024c

000b85c0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b85c0:	b508      	push	{r3, lr}
   b85c2:	4b02      	ldr	r3, [pc, #8]	; (b85cc <HAL_USB_USART_Is_Connected+0xc>)
   b85c4:	681b      	ldr	r3, [r3, #0]
   b85c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b85c8:	9301      	str	r3, [sp, #4]
   b85ca:	bd08      	pop	{r3, pc}
   b85cc:	0003024c 	.word	0x0003024c

000b85d0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b85d0:	b508      	push	{r3, lr}
   b85d2:	4b02      	ldr	r3, [pc, #8]	; (b85dc <panic_+0xc>)
   b85d4:	681b      	ldr	r3, [r3, #0]
   b85d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b85d8:	9301      	str	r3, [sp, #4]
   b85da:	bd08      	pop	{r3, pc}
   b85dc:	00030260 	.word	0x00030260

000b85e0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b85e0:	b508      	push	{r3, lr}
   b85e2:	4b02      	ldr	r3, [pc, #8]	; (b85ec <log_message+0xc>)
   b85e4:	681b      	ldr	r3, [r3, #0]
   b85e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b85e8:	9301      	str	r3, [sp, #4]
   b85ea:	bd08      	pop	{r3, pc}
   b85ec:	00030260 	.word	0x00030260

000b85f0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b85f0:	b508      	push	{r3, lr}
   b85f2:	4b02      	ldr	r3, [pc, #8]	; (b85fc <log_message_v+0xc>)
   b85f4:	681b      	ldr	r3, [r3, #0]
   b85f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b85f8:	9301      	str	r3, [sp, #4]
   b85fa:	bd08      	pop	{r3, pc}
   b85fc:	00030260 	.word	0x00030260

000b8600 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8600:	b508      	push	{r3, lr}
   b8602:	4b02      	ldr	r3, [pc, #8]	; (b860c <log_level_name+0xc>)
   b8604:	681b      	ldr	r3, [r3, #0]
   b8606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8608:	9301      	str	r3, [sp, #4]
   b860a:	bd08      	pop	{r3, pc}
   b860c:	00030260 	.word	0x00030260

000b8610 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8610:	b508      	push	{r3, lr}
   b8612:	4b02      	ldr	r3, [pc, #8]	; (b861c <log_set_callbacks+0xc>)
   b8614:	681b      	ldr	r3, [r3, #0]
   b8616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8618:	9301      	str	r3, [sp, #4]
   b861a:	bd08      	pop	{r3, pc}
   b861c:	00030260 	.word	0x00030260

000b8620 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8620:	b508      	push	{r3, lr}
   b8622:	4b03      	ldr	r3, [pc, #12]	; (b8630 <diag_get_source+0x10>)
   b8624:	681b      	ldr	r3, [r3, #0]
   b8626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b862a:	9301      	str	r3, [sp, #4]
   b862c:	bd08      	pop	{r3, pc}
   b862e:	0000      	.short	0x0000
   b8630:	00030260 	.word	0x00030260

000b8634 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8634:	b508      	push	{r3, lr}
   b8636:	4b02      	ldr	r3, [pc, #8]	; (b8640 <system_mode+0xc>)
   b8638:	681b      	ldr	r3, [r3, #0]
   b863a:	681b      	ldr	r3, [r3, #0]
   b863c:	9301      	str	r3, [sp, #4]
   b863e:	bd08      	pop	{r3, pc}
   b8640:	00030220 	.word	0x00030220

000b8644 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8644:	b508      	push	{r3, lr}
   b8646:	4b02      	ldr	r3, [pc, #8]	; (b8650 <set_system_mode+0xc>)
   b8648:	681b      	ldr	r3, [r3, #0]
   b864a:	685b      	ldr	r3, [r3, #4]
   b864c:	9301      	str	r3, [sp, #4]
   b864e:	bd08      	pop	{r3, pc}
   b8650:	00030220 	.word	0x00030220

000b8654 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8654:	b508      	push	{r3, lr}
   b8656:	4b02      	ldr	r3, [pc, #8]	; (b8660 <system_delay_ms+0xc>)
   b8658:	681b      	ldr	r3, [r3, #0]
   b865a:	695b      	ldr	r3, [r3, #20]
   b865c:	9301      	str	r3, [sp, #4]
   b865e:	bd08      	pop	{r3, pc}
   b8660:	00030220 	.word	0x00030220

000b8664 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b8664:	b508      	push	{r3, lr}
   b8666:	4b02      	ldr	r3, [pc, #8]	; (b8670 <system_subscribe_event+0xc>)
   b8668:	681b      	ldr	r3, [r3, #0]
   b866a:	6a1b      	ldr	r3, [r3, #32]
   b866c:	9301      	str	r3, [sp, #4]
   b866e:	bd08      	pop	{r3, pc}
   b8670:	00030220 	.word	0x00030220

000b8674 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b8674:	b508      	push	{r3, lr}
   b8676:	4b02      	ldr	r3, [pc, #8]	; (b8680 <system_thread_set_state+0xc>)
   b8678:	681b      	ldr	r3, [r3, #0]
   b867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b867c:	9301      	str	r3, [sp, #4]
   b867e:	bd08      	pop	{r3, pc}
   b8680:	00030220 	.word	0x00030220

000b8684 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b8684:	b508      	push	{r3, lr}
   b8686:	4b02      	ldr	r3, [pc, #8]	; (b8690 <application_thread_current+0xc>)
   b8688:	681b      	ldr	r3, [r3, #0]
   b868a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b868c:	9301      	str	r3, [sp, #4]
   b868e:	bd08      	pop	{r3, pc}
   b8690:	00030220 	.word	0x00030220

000b8694 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b8694:	b508      	push	{r3, lr}
   b8696:	4b02      	ldr	r3, [pc, #8]	; (b86a0 <application_thread_invoke+0xc>)
   b8698:	681b      	ldr	r3, [r3, #0]
   b869a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b869c:	9301      	str	r3, [sp, #4]
   b869e:	bd08      	pop	{r3, pc}
   b86a0:	00030220 	.word	0x00030220

000b86a4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b86a4:	b508      	push	{r3, lr}
   b86a6:	4b02      	ldr	r3, [pc, #8]	; (b86b0 <system_thread_get_state+0xc>)
   b86a8:	681b      	ldr	r3, [r3, #0]
   b86aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b86ac:	9301      	str	r3, [sp, #4]
   b86ae:	bd08      	pop	{r3, pc}
   b86b0:	00030220 	.word	0x00030220

000b86b4 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b86b4:	b508      	push	{r3, lr}
   b86b6:	4b02      	ldr	r3, [pc, #8]	; (b86c0 <system_notify_time_changed+0xc>)
   b86b8:	681b      	ldr	r3, [r3, #0]
   b86ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b86bc:	9301      	str	r3, [sp, #4]
   b86be:	bd08      	pop	{r3, pc}
   b86c0:	00030220 	.word	0x00030220

000b86c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b86c4:	b508      	push	{r3, lr}
   b86c6:	4b03      	ldr	r3, [pc, #12]	; (b86d4 <system_ctrl_set_app_request_handler+0x10>)
   b86c8:	681b      	ldr	r3, [r3, #0]
   b86ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b86ce:	9301      	str	r3, [sp, #4]
   b86d0:	bd08      	pop	{r3, pc}
   b86d2:	0000      	.short	0x0000
   b86d4:	00030220 	.word	0x00030220

000b86d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b86d8:	b508      	push	{r3, lr}
   b86da:	4b03      	ldr	r3, [pc, #12]	; (b86e8 <system_ctrl_set_result+0x10>)
   b86dc:	681b      	ldr	r3, [r3, #0]
   b86de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b86e2:	9301      	str	r3, [sp, #4]
   b86e4:	bd08      	pop	{r3, pc}
   b86e6:	0000      	.short	0x0000
   b86e8:	00030220 	.word	0x00030220

000b86ec <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b86ec:	b508      	push	{r3, lr}
   b86ee:	4b03      	ldr	r3, [pc, #12]	; (b86fc <system_power_management_set_config+0x10>)
   b86f0:	681b      	ldr	r3, [r3, #0]
   b86f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b86f6:	9301      	str	r3, [sp, #4]
   b86f8:	bd08      	pop	{r3, pc}
   b86fa:	0000      	.short	0x0000
   b86fc:	00030220 	.word	0x00030220

000b8700 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8700:	b508      	push	{r3, lr}
   b8702:	4b03      	ldr	r3, [pc, #12]	; (b8710 <system_sleep_ext+0x10>)
   b8704:	681b      	ldr	r3, [r3, #0]
   b8706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b870a:	9301      	str	r3, [sp, #4]
   b870c:	bd08      	pop	{r3, pc}
   b870e:	0000      	.short	0x0000
   b8710:	00030220 	.word	0x00030220

000b8714 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8714:	b508      	push	{r3, lr}
   b8716:	4b02      	ldr	r3, [pc, #8]	; (b8720 <spark_process+0xc>)
   b8718:	681b      	ldr	r3, [r3, #0]
   b871a:	689b      	ldr	r3, [r3, #8]
   b871c:	9301      	str	r3, [sp, #4]
   b871e:	bd08      	pop	{r3, pc}
   b8720:	00030244 	.word	0x00030244

000b8724 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8724:	b508      	push	{r3, lr}
   b8726:	4b02      	ldr	r3, [pc, #8]	; (b8730 <spark_cloud_flag_connected+0xc>)
   b8728:	681b      	ldr	r3, [r3, #0]
   b872a:	695b      	ldr	r3, [r3, #20]
   b872c:	9301      	str	r3, [sp, #4]
   b872e:	bd08      	pop	{r3, pc}
   b8730:	00030244 	.word	0x00030244

000b8734 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b8734:	b508      	push	{r3, lr}
   b8736:	4b02      	ldr	r3, [pc, #8]	; (b8740 <spark_send_event+0xc>)
   b8738:	681b      	ldr	r3, [r3, #0]
   b873a:	6a1b      	ldr	r3, [r3, #32]
   b873c:	9301      	str	r3, [sp, #4]
   b873e:	bd08      	pop	{r3, pc}
   b8740:	00030244 	.word	0x00030244

000b8744 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8744:	b508      	push	{r3, lr}
   b8746:	4b02      	ldr	r3, [pc, #8]	; (b8750 <spark_sync_time_pending+0xc>)
   b8748:	681b      	ldr	r3, [r3, #0]
   b874a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b874c:	9301      	str	r3, [sp, #4]
   b874e:	bd08      	pop	{r3, pc}
   b8750:	00030244 	.word	0x00030244

000b8754 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b8754:	b508      	push	{r3, lr}
   b8756:	4b02      	ldr	r3, [pc, #8]	; (b8760 <spark_sync_time_last+0xc>)
   b8758:	681b      	ldr	r3, [r3, #0]
   b875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b875c:	9301      	str	r3, [sp, #4]
   b875e:	bd08      	pop	{r3, pc}
   b8760:	00030244 	.word	0x00030244

000b8764 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8764:	b508      	push	{r3, lr}
   b8766:	4b02      	ldr	r3, [pc, #8]	; (b8770 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8768:	681b      	ldr	r3, [r3, #0]
   b876a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b876c:	9301      	str	r3, [sp, #4]
   b876e:	bd08      	pop	{r3, pc}
   b8770:	00030244 	.word	0x00030244

000b8774 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8774:	b508      	push	{r3, lr}
   b8776:	4b02      	ldr	r3, [pc, #8]	; (b8780 <network_connect+0xc>)
   b8778:	681b      	ldr	r3, [r3, #0]
   b877a:	685b      	ldr	r3, [r3, #4]
   b877c:	9301      	str	r3, [sp, #4]
   b877e:	bd08      	pop	{r3, pc}
   b8780:	00030240 	.word	0x00030240

000b8784 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8784:	b508      	push	{r3, lr}
   b8786:	4b02      	ldr	r3, [pc, #8]	; (b8790 <network_connecting+0xc>)
   b8788:	681b      	ldr	r3, [r3, #0]
   b878a:	689b      	ldr	r3, [r3, #8]
   b878c:	9301      	str	r3, [sp, #4]
   b878e:	bd08      	pop	{r3, pc}
   b8790:	00030240 	.word	0x00030240

000b8794 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8794:	b508      	push	{r3, lr}
   b8796:	4b02      	ldr	r3, [pc, #8]	; (b87a0 <network_disconnect+0xc>)
   b8798:	681b      	ldr	r3, [r3, #0]
   b879a:	68db      	ldr	r3, [r3, #12]
   b879c:	9301      	str	r3, [sp, #4]
   b879e:	bd08      	pop	{r3, pc}
   b87a0:	00030240 	.word	0x00030240

000b87a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b87a4:	b508      	push	{r3, lr}
   b87a6:	4b02      	ldr	r3, [pc, #8]	; (b87b0 <network_ready+0xc>)
   b87a8:	681b      	ldr	r3, [r3, #0]
   b87aa:	691b      	ldr	r3, [r3, #16]
   b87ac:	9301      	str	r3, [sp, #4]
   b87ae:	bd08      	pop	{r3, pc}
   b87b0:	00030240 	.word	0x00030240

000b87b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b87b4:	b508      	push	{r3, lr}
   b87b6:	4b02      	ldr	r3, [pc, #8]	; (b87c0 <network_on+0xc>)
   b87b8:	681b      	ldr	r3, [r3, #0]
   b87ba:	695b      	ldr	r3, [r3, #20]
   b87bc:	9301      	str	r3, [sp, #4]
   b87be:	bd08      	pop	{r3, pc}
   b87c0:	00030240 	.word	0x00030240

000b87c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b87c4:	b508      	push	{r3, lr}
   b87c6:	4b02      	ldr	r3, [pc, #8]	; (b87d0 <network_off+0xc>)
   b87c8:	681b      	ldr	r3, [r3, #0]
   b87ca:	699b      	ldr	r3, [r3, #24]
   b87cc:	9301      	str	r3, [sp, #4]
   b87ce:	bd08      	pop	{r3, pc}
   b87d0:	00030240 	.word	0x00030240

000b87d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b87d4:	b508      	push	{r3, lr}
   b87d6:	4b02      	ldr	r3, [pc, #8]	; (b87e0 <network_listen+0xc>)
   b87d8:	681b      	ldr	r3, [r3, #0]
   b87da:	69db      	ldr	r3, [r3, #28]
   b87dc:	9301      	str	r3, [sp, #4]
   b87de:	bd08      	pop	{r3, pc}
   b87e0:	00030240 	.word	0x00030240

000b87e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b87e4:	b508      	push	{r3, lr}
   b87e6:	4b02      	ldr	r3, [pc, #8]	; (b87f0 <network_listening+0xc>)
   b87e8:	681b      	ldr	r3, [r3, #0]
   b87ea:	6a1b      	ldr	r3, [r3, #32]
   b87ec:	9301      	str	r3, [sp, #4]
   b87ee:	bd08      	pop	{r3, pc}
   b87f0:	00030240 	.word	0x00030240

000b87f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b87f4:	b508      	push	{r3, lr}
   b87f6:	4b02      	ldr	r3, [pc, #8]	; (b8800 <network_set_listen_timeout+0xc>)
   b87f8:	681b      	ldr	r3, [r3, #0]
   b87fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b87fc:	9301      	str	r3, [sp, #4]
   b87fe:	bd08      	pop	{r3, pc}
   b8800:	00030240 	.word	0x00030240

000b8804 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8804:	b508      	push	{r3, lr}
   b8806:	4b02      	ldr	r3, [pc, #8]	; (b8810 <network_get_listen_timeout+0xc>)
   b8808:	681b      	ldr	r3, [r3, #0]
   b880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b880c:	9301      	str	r3, [sp, #4]
   b880e:	bd08      	pop	{r3, pc}
   b8810:	00030240 	.word	0x00030240

000b8814 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8814:	b508      	push	{r3, lr}
   b8816:	4b02      	ldr	r3, [pc, #8]	; (b8820 <network_is_on+0xc>)
   b8818:	681b      	ldr	r3, [r3, #0]
   b881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b881c:	9301      	str	r3, [sp, #4]
   b881e:	bd08      	pop	{r3, pc}
   b8820:	00030240 	.word	0x00030240

000b8824 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8824:	b508      	push	{r3, lr}
   b8826:	4b02      	ldr	r3, [pc, #8]	; (b8830 <network_is_off+0xc>)
   b8828:	681b      	ldr	r3, [r3, #0]
   b882a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b882c:	9301      	str	r3, [sp, #4]
   b882e:	bd08      	pop	{r3, pc}
   b8830:	00030240 	.word	0x00030240

000b8834 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8834:	b508      	push	{r3, lr}
   b8836:	4b02      	ldr	r3, [pc, #8]	; (b8840 <malloc+0xc>)
   b8838:	681b      	ldr	r3, [r3, #0]
   b883a:	681b      	ldr	r3, [r3, #0]
   b883c:	9301      	str	r3, [sp, #4]
   b883e:	bd08      	pop	{r3, pc}
   b8840:	0003021c 	.word	0x0003021c

000b8844 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8844:	b508      	push	{r3, lr}
   b8846:	4b02      	ldr	r3, [pc, #8]	; (b8850 <free+0xc>)
   b8848:	681b      	ldr	r3, [r3, #0]
   b884a:	685b      	ldr	r3, [r3, #4]
   b884c:	9301      	str	r3, [sp, #4]
   b884e:	bd08      	pop	{r3, pc}
   b8850:	0003021c 	.word	0x0003021c

000b8854 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8854:	b508      	push	{r3, lr}
   b8856:	4b02      	ldr	r3, [pc, #8]	; (b8860 <realloc+0xc>)
   b8858:	681b      	ldr	r3, [r3, #0]
   b885a:	689b      	ldr	r3, [r3, #8]
   b885c:	9301      	str	r3, [sp, #4]
   b885e:	bd08      	pop	{r3, pc}
   b8860:	0003021c 	.word	0x0003021c

000b8864 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8864:	b508      	push	{r3, lr}
   b8866:	4b02      	ldr	r3, [pc, #8]	; (b8870 <siprintf+0xc>)
   b8868:	681b      	ldr	r3, [r3, #0]
   b886a:	691b      	ldr	r3, [r3, #16]
   b886c:	9301      	str	r3, [sp, #4]
   b886e:	bd08      	pop	{r3, pc}
   b8870:	0003021c 	.word	0x0003021c

000b8874 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8874:	b508      	push	{r3, lr}
   b8876:	4b02      	ldr	r3, [pc, #8]	; (b8880 <snprintf+0xc>)
   b8878:	681b      	ldr	r3, [r3, #0]
   b887a:	69db      	ldr	r3, [r3, #28]
   b887c:	9301      	str	r3, [sp, #4]
   b887e:	bd08      	pop	{r3, pc}
   b8880:	0003021c 	.word	0x0003021c

000b8884 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8884:	b508      	push	{r3, lr}
   b8886:	4b02      	ldr	r3, [pc, #8]	; (b8890 <vsnprintf+0xc>)
   b8888:	681b      	ldr	r3, [r3, #0]
   b888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b888c:	9301      	str	r3, [sp, #4]
   b888e:	bd08      	pop	{r3, pc}
   b8890:	0003021c 	.word	0x0003021c

000b8894 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8894:	b508      	push	{r3, lr}
   b8896:	4b02      	ldr	r3, [pc, #8]	; (b88a0 <abort+0xc>)
   b8898:	681b      	ldr	r3, [r3, #0]
   b889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b889c:	9301      	str	r3, [sp, #4]
   b889e:	bd08      	pop	{r3, pc}
   b88a0:	0003021c 	.word	0x0003021c

000b88a4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b88a4:	b508      	push	{r3, lr}
   b88a6:	4b02      	ldr	r3, [pc, #8]	; (b88b0 <_malloc_r+0xc>)
   b88a8:	681b      	ldr	r3, [r3, #0]
   b88aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b88ac:	9301      	str	r3, [sp, #4]
   b88ae:	bd08      	pop	{r3, pc}
   b88b0:	0003021c 	.word	0x0003021c

000b88b4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b88b4:	b508      	push	{r3, lr}
   b88b6:	4b02      	ldr	r3, [pc, #8]	; (b88c0 <__errno+0xc>)
   b88b8:	681b      	ldr	r3, [r3, #0]
   b88ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b88bc:	9301      	str	r3, [sp, #4]
   b88be:	bd08      	pop	{r3, pc}
   b88c0:	0003021c 	.word	0x0003021c

000b88c4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b88c4:	b508      	push	{r3, lr}
   b88c6:	4b02      	ldr	r3, [pc, #8]	; (b88d0 <__assert_func+0xc>)
   b88c8:	681b      	ldr	r3, [r3, #0]
   b88ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88cc:	9301      	str	r3, [sp, #4]
   b88ce:	bd08      	pop	{r3, pc}
   b88d0:	0003021c 	.word	0x0003021c

000b88d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b88d4:	b508      	push	{r3, lr}
   b88d6:	4b02      	ldr	r3, [pc, #8]	; (b88e0 <newlib_impure_ptr_callback+0xc>)
   b88d8:	681b      	ldr	r3, [r3, #0]
   b88da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b88dc:	9301      	str	r3, [sp, #4]
   b88de:	bd08      	pop	{r3, pc}
   b88e0:	0003021c 	.word	0x0003021c

000b88e4 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b88e4:	b508      	push	{r3, lr}
   b88e6:	4b02      	ldr	r3, [pc, #8]	; (b88f0 <strftime+0xc>)
   b88e8:	681b      	ldr	r3, [r3, #0]
   b88ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b88ec:	9301      	str	r3, [sp, #4]
   b88ee:	bd08      	pop	{r3, pc}
   b88f0:	0003021c 	.word	0x0003021c

000b88f4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b88f4:	b508      	push	{r3, lr}
   b88f6:	4b02      	ldr	r3, [pc, #8]	; (b8900 <localtime_r+0xc>)
   b88f8:	681b      	ldr	r3, [r3, #0]
   b88fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b88fc:	9301      	str	r3, [sp, #4]
   b88fe:	bd08      	pop	{r3, pc}
   b8900:	0003021c 	.word	0x0003021c

000b8904 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8904:	b508      	push	{r3, lr}
   b8906:	4b02      	ldr	r3, [pc, #8]	; (b8910 <gmtime_r+0xc>)
   b8908:	681b      	ldr	r3, [r3, #0]
   b890a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b890c:	9301      	str	r3, [sp, #4]
   b890e:	bd08      	pop	{r3, pc}
   b8910:	0003021c 	.word	0x0003021c

000b8914 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8914:	b508      	push	{r3, lr}
   b8916:	4b02      	ldr	r3, [pc, #8]	; (b8920 <mktime+0xc>)
   b8918:	681b      	ldr	r3, [r3, #0]
   b891a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b891c:	9301      	str	r3, [sp, #4]
   b891e:	bd08      	pop	{r3, pc}
   b8920:	0003021c 	.word	0x0003021c

000b8924 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8924:	2100      	movs	r1, #0
   b8926:	f7ff be95 	b.w	b8654 <system_delay_ms>

000b892a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b892a:	b510      	push	{r4, lr}
      if (_M_empty())
   b892c:	6883      	ldr	r3, [r0, #8]
   b892e:	4604      	mov	r4, r0
   b8930:	b90b      	cbnz	r3, b8936 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b8932:	f003 f8d9 	bl	bbae8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8936:	68c3      	ldr	r3, [r0, #12]
   b8938:	4798      	blx	r3
      if (_M_manager)
   b893a:	68a3      	ldr	r3, [r4, #8]
   b893c:	b11b      	cbz	r3, b8946 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b893e:	2203      	movs	r2, #3
   b8940:	4621      	mov	r1, r4
   b8942:	4620      	mov	r0, r4
   b8944:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b8946:	4620      	mov	r0, r4
   b8948:	2110      	movs	r1, #16
}
   b894a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b894e:	f7fb bba6 	b.w	b409e <_ZdlPvj>

000b8952 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8952:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8954:	6843      	ldr	r3, [r0, #4]
   b8956:	3b01      	subs	r3, #1
    {
   b8958:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b895a:	6043      	str	r3, [r0, #4]
   b895c:	b963      	cbnz	r3, b8978 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b895e:	6803      	ldr	r3, [r0, #0]
   b8960:	689b      	ldr	r3, [r3, #8]
   b8962:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8964:	68a3      	ldr	r3, [r4, #8]
   b8966:	3b01      	subs	r3, #1
   b8968:	60a3      	str	r3, [r4, #8]
   b896a:	b92b      	cbnz	r3, b8978 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b896c:	6823      	ldr	r3, [r4, #0]
   b896e:	4620      	mov	r0, r4
   b8970:	68db      	ldr	r3, [r3, #12]
    }
   b8972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8976:	4718      	bx	r3
    }
   b8978:	bd10      	pop	{r4, pc}

000b897a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b897a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b897c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8980:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8982:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8986:	42ae      	cmp	r6, r5
   b8988:	d004      	beq.n	b8994 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b898a:	4628      	mov	r0, r5
   b898c:	f002 faaa 	bl	baee4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8990:	3510      	adds	r5, #16
   b8992:	e7f8      	b.n	b8986 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8994:	6820      	ldr	r0, [r4, #0]
   b8996:	f7ff ff55 	bl	b8844 <free>
    AllocatorT::free(data_);
}
   b899a:	4620      	mov	r0, r4
   b899c:	bd70      	pop	{r4, r5, r6, pc}

000b899e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b899e:	b513      	push	{r0, r1, r4, lr}
   b89a0:	460b      	mov	r3, r1
   b89a2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b89a4:	e9d0 0100 	ldrd	r0, r1, [r0]
   b89a8:	466c      	mov	r4, sp
   b89aa:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b89ae:	e893 0003 	ldmia.w	r3, {r0, r1}
   b89b2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b89b6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b89ba:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b89be:	b002      	add	sp, #8
   b89c0:	bd10      	pop	{r4, pc}
	...

000b89c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b89c4:	4802      	ldr	r0, [pc, #8]	; (b89d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b89c6:	2300      	movs	r3, #0
   b89c8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b89ca:	f7ff bbf1 	b.w	b81b0 <os_mutex_recursive_create>
   b89ce:	bf00      	nop
   b89d0:	2003e60c 	.word	0x2003e60c

000b89d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b89d4:	2200      	movs	r2, #0
   b89d6:	6840      	ldr	r0, [r0, #4]
   b89d8:	4611      	mov	r1, r2
   b89da:	f7ff bee3 	b.w	b87a4 <network_ready>

000b89de <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b89de:	2200      	movs	r2, #0
   b89e0:	6840      	ldr	r0, [r0, #4]
   b89e2:	4611      	mov	r1, r2
   b89e4:	f7ff befe 	b.w	b87e4 <network_listening>

000b89e8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b89e8:	2200      	movs	r2, #0
   b89ea:	6840      	ldr	r0, [r0, #4]
   b89ec:	4611      	mov	r1, r2
   b89ee:	f7ff bf09 	b.w	b8804 <network_get_listen_timeout>

000b89f2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b89f2:	6840      	ldr	r0, [r0, #4]
   b89f4:	2200      	movs	r2, #0
   b89f6:	f7ff befd 	b.w	b87f4 <network_set_listen_timeout>

000b89fa <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b89fa:	6840      	ldr	r0, [r0, #4]
   b89fc:	2200      	movs	r2, #0
   b89fe:	f081 0101 	eor.w	r1, r1, #1
   b8a02:	f7ff bee7 	b.w	b87d4 <network_listen>

000b8a06 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8a06:	2300      	movs	r3, #0
   b8a08:	6840      	ldr	r0, [r0, #4]
   b8a0a:	461a      	mov	r2, r3
   b8a0c:	4619      	mov	r1, r3
   b8a0e:	f7ff bed9 	b.w	b87c4 <network_off>

000b8a12 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8a12:	2300      	movs	r3, #0
   b8a14:	6840      	ldr	r0, [r0, #4]
   b8a16:	461a      	mov	r2, r3
   b8a18:	4619      	mov	r1, r3
   b8a1a:	f7ff becb 	b.w	b87b4 <network_on>

000b8a1e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8a1e:	2200      	movs	r2, #0
   b8a20:	6840      	ldr	r0, [r0, #4]
   b8a22:	4611      	mov	r1, r2
   b8a24:	f7ff beae 	b.w	b8784 <network_connecting>

000b8a28 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8a28:	6840      	ldr	r0, [r0, #4]
   b8a2a:	2200      	movs	r2, #0
   b8a2c:	2102      	movs	r1, #2
   b8a2e:	f7ff beb1 	b.w	b8794 <network_disconnect>

000b8a32 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8a32:	2300      	movs	r3, #0
   b8a34:	6840      	ldr	r0, [r0, #4]
   b8a36:	461a      	mov	r2, r3
   b8a38:	f7ff be9c 	b.w	b8774 <network_connect>

000b8a3c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b8a3c:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b8a3e:	4b13      	ldr	r3, [pc, #76]	; (b8a8c <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b8a40:	6003      	str	r3, [r0, #0]
   b8a42:	2518      	movs	r5, #24
   b8a44:	3330      	adds	r3, #48	; 0x30
   b8a46:	b086      	sub	sp, #24
   b8a48:	460e      	mov	r6, r1
   b8a4a:	6043      	str	r3, [r0, #4]
   b8a4c:	462a      	mov	r2, r5
   b8a4e:	2100      	movs	r1, #0
   b8a50:	4604      	mov	r4, r0
   b8a52:	3008      	adds	r0, #8
   b8a54:	f003 fd7a 	bl	bc54c <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b8a58:	2200      	movs	r2, #0
   b8a5a:	6870      	ldr	r0, [r6, #4]
   b8a5c:	4611      	mov	r1, r2
   b8a5e:	f7ff fea1 	bl	b87a4 <network_ready>
   b8a62:	b178      	cbz	r0, b8a84 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b8a64:	2100      	movs	r1, #0
   b8a66:	462a      	mov	r2, r5
   b8a68:	4668      	mov	r0, sp
   b8a6a:	f003 fd6f 	bl	bc54c <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8a6e:	4669      	mov	r1, sp
   b8a70:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b8a72:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8a76:	f7ff fb93 	bl	b81a0 <cellular_signal>
   b8a7a:	b918      	cbnz	r0, b8a84 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b8a7c:	4669      	mov	r1, sp
   b8a7e:	4620      	mov	r0, r4
   b8a80:	f000 f8b8 	bl	b8bf4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b8a84:	4620      	mov	r0, r4
   b8a86:	b006      	add	sp, #24
   b8a88:	bd70      	pop	{r4, r5, r6, pc}
   b8a8a:	bf00      	nop
   b8a8c:	000bd6fc 	.word	0x000bd6fc

000b8a90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8a90:	4b08      	ldr	r3, [pc, #32]	; (b8ab4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8a92:	b510      	push	{r4, lr}
   b8a94:	2428      	movs	r4, #40	; 0x28
   b8a96:	4622      	mov	r2, r4
   b8a98:	4618      	mov	r0, r3
   b8a9a:	2100      	movs	r1, #0
   b8a9c:	f003 fd56 	bl	bc54c <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8aa0:	4b05      	ldr	r3, [pc, #20]	; (b8ab8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8aa2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8aa8:	6042      	str	r2, [r0, #4]
   b8aaa:	2204      	movs	r2, #4
   b8aac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8aae:	4a03      	ldr	r2, [pc, #12]	; (b8abc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8ab0:	601a      	str	r2, [r3, #0]
   b8ab2:	bd10      	pop	{r4, pc}
   b8ab4:	2003e618 	.word	0x2003e618
   b8ab8:	2003e610 	.word	0x2003e610
   b8abc:	000bd6c0 	.word	0x000bd6c0

000b8ac0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b8ac0:	4770      	bx	lr

000b8ac2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b8ac2:	7b00      	ldrb	r0, [r0, #12]
   b8ac4:	4770      	bx	lr

000b8ac6 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8ac6:	7b03      	ldrb	r3, [r0, #12]
   b8ac8:	b14b      	cbz	r3, b8ade <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b8aca:	6903      	ldr	r3, [r0, #16]
   b8acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8ad0:	d005      	beq.n	b8ade <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8ad2:	6980      	ldr	r0, [r0, #24]
   b8ad4:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b8ad8:	bf18      	it	ne
   b8ada:	2001      	movne	r0, #1
   b8adc:	4770      	bx	lr
   b8ade:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b8ae0:	4770      	bx	lr

000b8ae2 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b8ae2:	6803      	ldr	r3, [r0, #0]
   b8ae4:	6a1b      	ldr	r3, [r3, #32]
   b8ae6:	4718      	bx	r3

000b8ae8 <_ZNK14CellularSignal7printToER5Print>:
{
   b8ae8:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b8aea:	6803      	ldr	r3, [r0, #0]
{
   b8aec:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b8aee:	691b      	ldr	r3, [r3, #16]
{
   b8af0:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b8af2:	4798      	blx	r3
   b8af4:	2102      	movs	r1, #2
   b8af6:	4628      	mov	r0, r5
   b8af8:	f002 f8d0 	bl	bac9c <_ZN5Print5printEfi>
    n += p.print(',');
   b8afc:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b8afe:	4604      	mov	r4, r0
    n += p.print(',');
   b8b00:	4628      	mov	r0, r5
   b8b02:	f001 ffd5 	bl	baab0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b8b06:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b8b08:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b8b0a:	699b      	ldr	r3, [r3, #24]
   b8b0c:	4630      	mov	r0, r6
   b8b0e:	4798      	blx	r3
   b8b10:	2102      	movs	r1, #2
   b8b12:	4628      	mov	r0, r5
   b8b14:	f002 f8c2 	bl	bac9c <_ZN5Print5printEfi>
}
   b8b18:	4420      	add	r0, r4
   b8b1a:	bd70      	pop	{r4, r5, r6, pc}

000b8b1c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b8b1c:	f1a0 0004 	sub.w	r0, r0, #4
   b8b20:	f7ff bfe2 	b.w	b8ae8 <_ZNK14CellularSignal7printToER5Print>

000b8b24 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b8b24:	b510      	push	{r4, lr}
   b8b26:	2120      	movs	r1, #32
   b8b28:	4604      	mov	r4, r0
   b8b2a:	f7fb fab8 	bl	b409e <_ZdlPvj>
   b8b2e:	4620      	mov	r0, r4
   b8b30:	bd10      	pop	{r4, pc}
	...

000b8b34 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b8b34:	7b03      	ldrb	r3, [r0, #12]
   b8b36:	b17b      	cbz	r3, b8b58 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b8b38:	6943      	ldr	r3, [r0, #20]
   b8b3a:	2b00      	cmp	r3, #0
   b8b3c:	db0c      	blt.n	b8b58 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b8b3e:	ee07 3a90 	vmov	s15, r3
   b8b42:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8b60 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b8b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b4a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b4e:	eddf 7a05 	vldr	s15, [pc, #20]	; b8b64 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b8b52:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8b56:	4770      	bx	lr
    return -1.0f;
   b8b58:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8b5c:	4770      	bx	lr
   b8b5e:	bf00      	nop
   b8b60:	477fff00 	.word	0x477fff00
   b8b64:	42c80000 	.word	0x42c80000

000b8b68 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b8b68:	7b03      	ldrb	r3, [r0, #12]
   b8b6a:	b163      	cbz	r3, b8b86 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b8b6c:	6903      	ldr	r3, [r0, #16]
   b8b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8b72:	d008      	beq.n	b8b86 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b8b74:	ee07 3a90 	vmov	s15, r3
   b8b78:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8b8c <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b8b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b80:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b84:	4770      	bx	lr
    return 0.0f;
   b8b86:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8b90 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b8b8a:	4770      	bx	lr
   b8b8c:	42c80000 	.word	0x42c80000
   b8b90:	00000000 	.word	0x00000000

000b8b94 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b8b94:	7b03      	ldrb	r3, [r0, #12]
   b8b96:	b17b      	cbz	r3, b8bb8 <_ZNK14CellularSignal10getQualityEv+0x24>
   b8b98:	69c3      	ldr	r3, [r0, #28]
   b8b9a:	2b00      	cmp	r3, #0
   b8b9c:	db0c      	blt.n	b8bb8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b8b9e:	ee07 3a90 	vmov	s15, r3
   b8ba2:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8bc0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b8ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8baa:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8bae:	eddf 7a05 	vldr	s15, [pc, #20]	; b8bc4 <_ZNK14CellularSignal10getQualityEv+0x30>
   b8bb2:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8bb6:	4770      	bx	lr
    return -1.0f;
   b8bb8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8bbc:	4770      	bx	lr
   b8bbe:	bf00      	nop
   b8bc0:	477fff00 	.word	0x477fff00
   b8bc4:	42c80000 	.word	0x42c80000

000b8bc8 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b8bc8:	7b03      	ldrb	r3, [r0, #12]
   b8bca:	b163      	cbz	r3, b8be6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b8bcc:	6983      	ldr	r3, [r0, #24]
   b8bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8bd2:	d008      	beq.n	b8be6 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b8bd4:	ee07 3a90 	vmov	s15, r3
   b8bd8:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8bec <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b8bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8be0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8be4:	4770      	bx	lr
    return 0.0f;
   b8be6:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8bf0 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b8bea:	4770      	bx	lr
   b8bec:	42c80000 	.word	0x42c80000
   b8bf0:	00000000 	.word	0x00000000

000b8bf4 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b8bf4:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b8bf6:	460d      	mov	r5, r1
   b8bf8:	f100 0408 	add.w	r4, r0, #8
   b8bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8c00:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8c04:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b8c08:	2001      	movs	r0, #1
   b8c0a:	bd30      	pop	{r4, r5, pc}

000b8c0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8c0c:	4770      	bx	lr

000b8c0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b8c0e:	2000      	movs	r0, #0
   b8c10:	4770      	bx	lr

000b8c12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b8c12:	b510      	push	{r4, lr}
   b8c14:	2110      	movs	r1, #16
   b8c16:	4604      	mov	r4, r0
   b8c18:	f7fb fa41 	bl	b409e <_ZdlPvj>
   b8c1c:	4620      	mov	r0, r4
   b8c1e:	bd10      	pop	{r4, pc}

000b8c20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b8c20:	b508      	push	{r3, lr}
      { delete this; }
   b8c22:	f7ff fff6 	bl	b8c12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b8c26:	bd08      	pop	{r3, pc}

000b8c28 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b8c28:	b530      	push	{r4, r5, lr}
        type_(type) {
   b8c2a:	2200      	movs	r2, #0
   b8c2c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b8c30:	6002      	str	r2, [r0, #0]
   b8c32:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8c34:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c36:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8c38:	680c      	ldr	r4, [r1, #0]
   b8c3a:	8085      	strh	r5, [r0, #4]
   b8c3c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b8c3e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b8c40:	bd30      	pop	{r4, r5, pc}

000b8c42 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b8c42:	b510      	push	{r4, lr}
   b8c44:	4604      	mov	r4, r0
    free((void*)msg_);
   b8c46:	6800      	ldr	r0, [r0, #0]
   b8c48:	f7ff fdfc 	bl	b8844 <free>
}
   b8c4c:	4620      	mov	r0, r4
   b8c4e:	bd10      	pop	{r4, pc}

000b8c50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8c50:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b8c52:	68c4      	ldr	r4, [r0, #12]
   b8c54:	b1f4      	cbz	r4, b8c94 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b8c56:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b8c58:	2b02      	cmp	r3, #2
   b8c5a:	d103      	bne.n	b8c64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b8c5c:	f104 000c 	add.w	r0, r4, #12
   b8c60:	f7ff ffef 	bl	b8c42 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b8c64:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b8c66:	b135      	cbz	r5, b8c76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b8c68:	4628      	mov	r0, r5
   b8c6a:	f7fd f8dd 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
   b8c6e:	2110      	movs	r1, #16
   b8c70:	4628      	mov	r0, r5
   b8c72:	f7fb fa14 	bl	b409e <_ZdlPvj>
   b8c76:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b8c78:	b135      	cbz	r5, b8c88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b8c7a:	4628      	mov	r0, r5
   b8c7c:	f7fd f8d4 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
   b8c80:	2110      	movs	r1, #16
   b8c82:	4628      	mov	r0, r5
   b8c84:	f7fb fa0b 	bl	b409e <_ZdlPvj>
   b8c88:	4620      	mov	r0, r4
   b8c8a:	2114      	movs	r1, #20
   b8c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b8c90:	f7fb ba05 	b.w	b409e <_ZdlPvj>
   b8c94:	bd38      	pop	{r3, r4, r5, pc}

000b8c96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8c96:	680b      	ldr	r3, [r1, #0]
   b8c98:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8c9a:	684b      	ldr	r3, [r1, #4]
   b8c9c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8c9e:	b113      	cbz	r3, b8ca6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b8ca0:	685a      	ldr	r2, [r3, #4]
   b8ca2:	3201      	adds	r2, #1
   b8ca4:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8ca6:	4770      	bx	lr

000b8ca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b8ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8caa:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8cac:	4668      	mov	r0, sp
   b8cae:	460d      	mov	r5, r1
   b8cb0:	f7ff fff1 	bl	b8c96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8cb4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8cb6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8cb8:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b8cba:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b8cbc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8cbe:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b8cc0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b8cc2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b8cc4:	f7fc fd3e 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b8cc8:	b135      	cbz	r5, b8cd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b8cca:	1d28      	adds	r0, r5, #4
   b8ccc:	f7fc fd3a 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8cd0:	2108      	movs	r1, #8
   b8cd2:	4628      	mov	r0, r5
   b8cd4:	f7fb f9e3 	bl	b409e <_ZdlPvj>
        return p;
    }
   b8cd8:	4620      	mov	r0, r4
   b8cda:	b003      	add	sp, #12
   b8cdc:	bd30      	pop	{r4, r5, pc}

000b8cde <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b8cde:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8ce0:	b510      	push	{r4, lr}
      if (_M_empty())
   b8ce2:	b90a      	cbnz	r2, b8ce8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b8ce4:	f002 ff00 	bl	bbae8 <_ZSt25__throw_bad_function_callv>
    }
   b8ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8cec:	68c3      	ldr	r3, [r0, #12]
   b8cee:	4718      	bx	r3

000b8cf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8cf0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8cf2:	6800      	ldr	r0, [r0, #0]
   b8cf4:	f100 0110 	add.w	r1, r0, #16
   b8cf8:	f7ff fff1 	bl	b8cde <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b8cfc:	bd08      	pop	{r3, pc}

000b8cfe <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b8cfe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b8d00:	b510      	push	{r4, lr}
      if (_M_empty())
   b8d02:	b90a      	cbnz	r2, b8d08 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b8d04:	f002 fef0 	bl	bbae8 <_ZSt25__throw_bad_function_callv>
    }
   b8d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8d0c:	68c3      	ldr	r3, [r0, #12]
   b8d0e:	4718      	bx	r3

000b8d10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b8d10:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b8d12:	6800      	ldr	r0, [r0, #0]
   b8d14:	f100 0110 	add.w	r1, r0, #16
   b8d18:	f7ff fff1 	bl	b8cfe <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b8d1c:	bd08      	pop	{r3, pc}
	...

000b8d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b8d20:	b538      	push	{r3, r4, r5, lr}
   b8d22:	2300      	movs	r3, #0
   b8d24:	4604      	mov	r4, r0
   b8d26:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8d28:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b8d2a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8d2c:	f7fb f9b3 	bl	b4096 <_Znwj>
   b8d30:	b128      	cbz	r0, b8d3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b8d32:	2301      	movs	r3, #1
   b8d34:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b8d38:	4b02      	ldr	r3, [pc, #8]	; (b8d44 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b8d3a:	6003      	str	r3, [r0, #0]
   b8d3c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b8d3e:	6020      	str	r0, [r4, #0]
	}
   b8d40:	4620      	mov	r0, r4
   b8d42:	bd38      	pop	{r3, r4, r5, pc}
   b8d44:	000bd738 	.word	0x000bd738

000b8d48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b8d48:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8d4a:	2300      	movs	r3, #0
   b8d4c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8d4e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8d50:	4604      	mov	r4, r0
   b8d52:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8d54:	b12b      	cbz	r3, b8d62 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8d56:	2202      	movs	r2, #2
   b8d58:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8d5a:	68eb      	ldr	r3, [r5, #12]
   b8d5c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8d5e:	68ab      	ldr	r3, [r5, #8]
   b8d60:	60a3      	str	r3, [r4, #8]
    }
   b8d62:	4620      	mov	r0, r4
   b8d64:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b8d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8d6a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b8d6c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b8d6e:	4668      	mov	r0, sp
   b8d70:	f7ff ff5a 	bl	b8c28 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b8d74:	f04f 0302 	mov.w	r3, #2
   b8d78:	e8d4 2f4f 	ldrexb	r2, [r4]
   b8d7c:	2a00      	cmp	r2, #0
   b8d7e:	d103      	bne.n	b8d88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b8d80:	e8c4 3f41 	strexb	r1, r3, [r4]
   b8d84:	2900      	cmp	r1, #0
   b8d86:	d1f7      	bne.n	b8d78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b8d88:	d125      	bne.n	b8dd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b8d8a:	f104 050c 	add.w	r5, r4, #12
   b8d8e:	4669      	mov	r1, sp
   b8d90:	4628      	mov	r0, r5
   b8d92:	f7ff ff49 	bl	b8c28 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b8d96:	f3bf 8f5b 	dmb	ish
   b8d9a:	2301      	movs	r3, #1
   b8d9c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b8d9e:	2000      	movs	r0, #0
   b8da0:	f104 0308 	add.w	r3, r4, #8
   b8da4:	f3bf 8f5b 	dmb	ish
   b8da8:	e853 6f00 	ldrex	r6, [r3]
   b8dac:	e843 0200 	strex	r2, r0, [r3]
   b8db0:	2a00      	cmp	r2, #0
   b8db2:	d1f9      	bne.n	b8da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b8db4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b8db8:	b16e      	cbz	r6, b8dd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b8dba:	f7ff fc63 	bl	b8684 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b8dbe:	b178      	cbz	r0, b8de0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b8dc0:	4629      	mov	r1, r5
   b8dc2:	4630      	mov	r0, r6
   b8dc4:	f7ff ff8b 	bl	b8cde <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b8dc8:	4630      	mov	r0, r6
   b8dca:	f7fd f82d 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b8dce:	2110      	movs	r1, #16
   b8dd0:	4630      	mov	r0, r6
   b8dd2:	f7fb f964 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b8dd6:	4668      	mov	r0, sp
   b8dd8:	f7ff ff33 	bl	b8c42 <_ZN8particle5ErrorD1Ev>
    }
   b8ddc:	b009      	add	sp, #36	; 0x24
   b8dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b8de0:	4631      	mov	r1, r6
   b8de2:	a802      	add	r0, sp, #8
   b8de4:	f7ff ffb0 	bl	b8d48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8de8:	68e0      	ldr	r0, [r4, #12]
   b8dea:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8dee:	b108      	cbz	r0, b8df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b8df0:	f003 fc4a 	bl	bc688 <strdup>
        type_(type) {
   b8df4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b8df6:	2010      	movs	r0, #16
   b8df8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b8dfc:	f7fb f94b 	bl	b4096 <_Znwj>
   b8e00:	4605      	mov	r5, r0
   b8e02:	b1e8      	cbz	r0, b8e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b8e04:	2700      	movs	r7, #0
   b8e06:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e08:	2018      	movs	r0, #24
   b8e0a:	f7fb f944 	bl	b4096 <_Znwj>
   b8e0e:	4604      	mov	r4, r0
   b8e10:	b188      	cbz	r0, b8e36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b8e12:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b8e14:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8e16:	a802      	add	r0, sp, #8
   b8e18:	f7ff fdc1 	bl	b899e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e1c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8e1e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e20:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8e22:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8e24:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b8e26:	a906      	add	r1, sp, #24
   b8e28:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8e2a:	60e3      	str	r3, [r4, #12]
   b8e2c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b8e30:	9205      	str	r2, [sp, #20]
   b8e32:	f7ff fef9 	bl	b8c28 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b8e36:	4b08      	ldr	r3, [pc, #32]	; (b8e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b8e38:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8e3a:	4b08      	ldr	r3, [pc, #32]	; (b8e5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8e3c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b8e3e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b8e40:	a806      	add	r0, sp, #24
   b8e42:	f7ff fefe 	bl	b8c42 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8e46:	a802      	add	r0, sp, #8
   b8e48:	f7fc ffee 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b8e4c:	2200      	movs	r2, #0
   b8e4e:	4629      	mov	r1, r5
   b8e50:	4803      	ldr	r0, [pc, #12]	; (b8e60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b8e52:	f7ff fc1f 	bl	b8694 <application_thread_invoke>
   b8e56:	e7b7      	b.n	b8dc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b8e58:	000b8cf1 	.word	0x000b8cf1
   b8e5c:	000b8f75 	.word	0x000b8f75
   b8e60:	000b892b 	.word	0x000b892b

000b8e64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b8e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e68:	b08b      	sub	sp, #44	; 0x2c
   b8e6a:	4605      	mov	r5, r0
   b8e6c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b8e70:	460f      	mov	r7, r1
   b8e72:	4690      	mov	r8, r2
   b8e74:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b8e76:	f7ff fc55 	bl	b8724 <spark_cloud_flag_connected>
   b8e7a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b8e7c:	4683      	mov	fp, r0
   b8e7e:	bb38      	cbnz	r0, b8ed0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b8e80:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b8e84:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8e86:	a905      	add	r1, sp, #20
   b8e88:	4630      	mov	r0, r6
   b8e8a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8e8e:	f7ff fecb 	bl	b8c28 <_ZN8particle5ErrorC1EOS0_>
   b8e92:	2014      	movs	r0, #20
   b8e94:	f7fb f8ff 	bl	b4096 <_Znwj>
   b8e98:	4604      	mov	r4, r0
   b8e9a:	b148      	cbz	r0, b8eb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b8e9c:	2302      	movs	r3, #2
   b8e9e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8ea0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8ea2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8ea6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b8ea8:	4631      	mov	r1, r6
   b8eaa:	300c      	adds	r0, #12
   b8eac:	f7ff febc 	bl	b8c28 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8eb0:	4628      	mov	r0, r5
	: __shared_count(__p)
   b8eb2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8eb4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b8eb8:	f7ff ff32 	bl	b8d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b8ebc:	4630      	mov	r0, r6
   b8ebe:	f7ff fec0 	bl	b8c42 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b8ec2:	a805      	add	r0, sp, #20
   b8ec4:	f7ff febd 	bl	b8c42 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b8ec8:	4628      	mov	r0, r5
   b8eca:	b00b      	add	sp, #44	; 0x2c
   b8ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b8ed0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b8ed2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b8ed4:	2014      	movs	r0, #20
   b8ed6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b8eda:	9307      	str	r3, [sp, #28]
   b8edc:	f7fb f8db 	bl	b4096 <_Znwj>
   b8ee0:	4601      	mov	r1, r0
   b8ee2:	b118      	cbz	r0, b8eec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b8ee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8ee8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b8eea:	7044      	strb	r4, [r0, #1]
   b8eec:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b8eee:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b8ef0:	f7ff ff16 	bl	b8d20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b8ef4:	4b1e      	ldr	r3, [pc, #120]	; (b8f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b8ef6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b8ef8:	2008      	movs	r0, #8
   b8efa:	f7fb f8cc 	bl	b4096 <_Znwj>
   b8efe:	4604      	mov	r4, r0
   b8f00:	b110      	cbz	r0, b8f08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b8f02:	a903      	add	r1, sp, #12
   b8f04:	f7ff fec7 	bl	b8c96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8f08:	9600      	str	r6, [sp, #0]
   b8f0a:	fa5f f38a 	uxtb.w	r3, sl
   b8f0e:	464a      	mov	r2, r9
   b8f10:	4641      	mov	r1, r8
   b8f12:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b8f14:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b8f16:	f7ff fc0d 	bl	b8734 <spark_send_event>
   b8f1a:	b9b8      	cbnz	r0, b8f4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b8f1c:	9b03      	ldr	r3, [sp, #12]
   b8f1e:	785b      	ldrb	r3, [r3, #1]
   b8f20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b8f24:	b993      	cbnz	r3, b8f4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b8f26:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b8f2a:	a905      	add	r1, sp, #20
   b8f2c:	a803      	add	r0, sp, #12
   b8f2e:	9205      	str	r2, [sp, #20]
   b8f30:	f8ad 3018 	strh.w	r3, [sp, #24]
   b8f34:	f7ff ff18 	bl	b8d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b8f38:	a805      	add	r0, sp, #20
   b8f3a:	f7ff fe82 	bl	b8c42 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b8f3e:	a805      	add	r0, sp, #20
   b8f40:	9909      	ldr	r1, [sp, #36]	; 0x24
   b8f42:	f7ff feb1 	bl	b8ca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b8f46:	a806      	add	r0, sp, #24
   b8f48:	f7fc fbfc 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f4c:	a903      	add	r1, sp, #12
   b8f4e:	a805      	add	r0, sp, #20
   b8f50:	f7ff fea1 	bl	b8c96 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8f54:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b8f56:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b8f58:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b8f5a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b8f5c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b8f5e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b8f60:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b8f62:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b8f64:	f7fc fbee 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8f68:	a804      	add	r0, sp, #16
   b8f6a:	f7fc fbeb 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b8f6e:	e7ab      	b.n	b8ec8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b8f70:	000b8ff1 	.word	0x000b8ff1

000b8f74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b8f74:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b8f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f78:	4605      	mov	r5, r0
	switch (__op)
   b8f7a:	d103      	bne.n	b8f84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b8f7c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b8f7e:	6003      	str	r3, [r0, #0]
      }
   b8f80:	2000      	movs	r0, #0
   b8f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b8f84:	2a02      	cmp	r2, #2
   b8f86:	d010      	beq.n	b8faa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b8f88:	2a03      	cmp	r2, #3
   b8f8a:	d1f9      	bne.n	b8f80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b8f8c:	6804      	ldr	r4, [r0, #0]
   b8f8e:	2c00      	cmp	r4, #0
   b8f90:	d0f6      	beq.n	b8f80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b8f92:	f104 0010 	add.w	r0, r4, #16
   b8f96:	f7ff fe54 	bl	b8c42 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b8f9a:	4620      	mov	r0, r4
   b8f9c:	f7fc ff44 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b8fa0:	2118      	movs	r1, #24
   b8fa2:	4620      	mov	r0, r4
   b8fa4:	f7fb f87b 	bl	b409e <_ZdlPvj>
   b8fa8:	e7ea      	b.n	b8f80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b8faa:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b8fac:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b8fae:	f7fb f872 	bl	b4096 <_Znwj>
   b8fb2:	4604      	mov	r4, r0
   b8fb4:	b150      	cbz	r0, b8fcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b8fb6:	4631      	mov	r1, r6
   b8fb8:	f7ff fec6 	bl	b8d48 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b8fbc:	6930      	ldr	r0, [r6, #16]
   b8fbe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b8fc2:	b108      	cbz	r0, b8fc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b8fc4:	f003 fb60 	bl	bc688 <strdup>
        type_(type) {
   b8fc8:	6120      	str	r0, [r4, #16]
   b8fca:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b8fcc:	602c      	str	r4, [r5, #0]
	}
   b8fce:	e7d7      	b.n	b8f80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b8fd0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b8fd0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b8fd2:	2300      	movs	r3, #0
   b8fd4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b8fd6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b8fd8:	4604      	mov	r4, r0
   b8fda:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b8fdc:	b12b      	cbz	r3, b8fea <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8fde:	2202      	movs	r2, #2
   b8fe0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8fe2:	68eb      	ldr	r3, [r5, #12]
   b8fe4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b8fe6:	68ab      	ldr	r3, [r5, #8]
   b8fe8:	60a3      	str	r3, [r4, #8]
    }
   b8fea:	4620      	mov	r0, r4
   b8fec:	bd38      	pop	{r3, r4, r5, pc}
	...

000b8ff0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b8ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8ff2:	b089      	sub	sp, #36	; 0x24
   b8ff4:	4604      	mov	r4, r0
   b8ff6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b8ff8:	a801      	add	r0, sp, #4
   b8ffa:	4611      	mov	r1, r2
   b8ffc:	f7ff fe54 	bl	b8ca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b9000:	b1a4      	cbz	r4, b902c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b9002:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9004:	b11d      	cbz	r5, b900e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b9006:	4628      	mov	r0, r5
   b9008:	f003 fb3e 	bl	bc688 <strdup>
   b900c:	4605      	mov	r5, r0
   b900e:	a801      	add	r0, sp, #4
   b9010:	a903      	add	r1, sp, #12
        type_(type) {
   b9012:	9503      	str	r5, [sp, #12]
   b9014:	f8ad 4010 	strh.w	r4, [sp, #16]
   b9018:	f7ff fea6 	bl	b8d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b901c:	a803      	add	r0, sp, #12
   b901e:	f7ff fe10 	bl	b8c42 <_ZN8particle5ErrorD1Ev>
   b9022:	a802      	add	r0, sp, #8
   b9024:	f7fc fb8e 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9028:	b009      	add	sp, #36	; 0x24
   b902a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b902c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b902e:	2301      	movs	r3, #1
   b9030:	e8d5 2f4f 	ldrexb	r2, [r5]
   b9034:	2a00      	cmp	r2, #0
   b9036:	d103      	bne.n	b9040 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b9038:	e8c5 3f41 	strexb	r1, r3, [r5]
   b903c:	2900      	cmp	r1, #0
   b903e:	d1f7      	bne.n	b9030 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b9040:	d1ef      	bne.n	b9022 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b9042:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b9044:	f3bf 8f5b 	dmb	ish
   b9048:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b904a:	1d2b      	adds	r3, r5, #4
   b904c:	f3bf 8f5b 	dmb	ish
   b9050:	e853 6f00 	ldrex	r6, [r3]
   b9054:	e843 4200 	strex	r2, r4, [r3]
   b9058:	2a00      	cmp	r2, #0
   b905a:	d1f9      	bne.n	b9050 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b905c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b9060:	2e00      	cmp	r6, #0
   b9062:	d0de      	beq.n	b9022 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b9064:	4620      	mov	r0, r4
   b9066:	f7ff fb0d 	bl	b8684 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b906a:	4607      	mov	r7, r0
   b906c:	b160      	cbz	r0, b9088 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b906e:	f105 010c 	add.w	r1, r5, #12
   b9072:	4630      	mov	r0, r6
   b9074:	f7ff fe43 	bl	b8cfe <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b9078:	4630      	mov	r0, r6
   b907a:	f7fc fed5 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b907e:	2110      	movs	r1, #16
   b9080:	4630      	mov	r0, r6
   b9082:	f7fb f80c 	bl	b409e <_ZdlPvj>
   b9086:	e7cc      	b.n	b9022 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9088:	4631      	mov	r1, r6
   b908a:	a803      	add	r0, sp, #12
   b908c:	f7ff ffa0 	bl	b8fd0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b9090:	7b2b      	ldrb	r3, [r5, #12]
   b9092:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b9096:	2010      	movs	r0, #16
   b9098:	f7fa fffd 	bl	b4096 <_Znwj>
   b909c:	4605      	mov	r5, r0
   b909e:	b1d0      	cbz	r0, b90d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b90a0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b90a2:	2014      	movs	r0, #20
   b90a4:	f7fa fff7 	bl	b4096 <_Znwj>
   b90a8:	4604      	mov	r4, r0
   b90aa:	b178      	cbz	r0, b90cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b90ac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b90ae:	4601      	mov	r1, r0
   b90b0:	a803      	add	r0, sp, #12
   b90b2:	f7ff fc74 	bl	b899e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b90b6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b90b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b90ba:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b90bc:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b90be:	9205      	str	r2, [sp, #20]
   b90c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b90c2:	60e3      	str	r3, [r4, #12]
   b90c4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b90c8:	9206      	str	r2, [sp, #24]
   b90ca:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b90cc:	4b06      	ldr	r3, [pc, #24]	; (b90e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b90ce:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b90d0:	4b06      	ldr	r3, [pc, #24]	; (b90ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b90d2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b90d4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b90d6:	a803      	add	r0, sp, #12
   b90d8:	f7fc fea6 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b90dc:	2200      	movs	r2, #0
   b90de:	4629      	mov	r1, r5
   b90e0:	4803      	ldr	r0, [pc, #12]	; (b90f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b90e2:	f7ff fad7 	bl	b8694 <application_thread_invoke>
   b90e6:	e7c7      	b.n	b9078 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b90e8:	000b8d11 	.word	0x000b8d11
   b90ec:	000b90f5 	.word	0x000b90f5
   b90f0:	000b892b 	.word	0x000b892b

000b90f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b90f4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b90f6:	b570      	push	{r4, r5, r6, lr}
   b90f8:	4604      	mov	r4, r0
	switch (__op)
   b90fa:	d103      	bne.n	b9104 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b90fc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b90fe:	6003      	str	r3, [r0, #0]
      }
   b9100:	2000      	movs	r0, #0
   b9102:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b9104:	2a02      	cmp	r2, #2
   b9106:	d00c      	beq.n	b9122 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b9108:	2a03      	cmp	r2, #3
   b910a:	d1f9      	bne.n	b9100 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b910c:	6804      	ldr	r4, [r0, #0]
   b910e:	2c00      	cmp	r4, #0
   b9110:	d0f6      	beq.n	b9100 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b9112:	4620      	mov	r0, r4
   b9114:	f7fc fe88 	bl	b5e28 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9118:	2114      	movs	r1, #20
   b911a:	4620      	mov	r0, r4
   b911c:	f7fa ffbf 	bl	b409e <_ZdlPvj>
   b9120:	e7ee      	b.n	b9100 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b9122:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b9124:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9126:	f7fa ffb6 	bl	b4096 <_Znwj>
   b912a:	4605      	mov	r5, r0
   b912c:	b120      	cbz	r0, b9138 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b912e:	4631      	mov	r1, r6
   b9130:	f7ff ff4e 	bl	b8fd0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b9134:	7c33      	ldrb	r3, [r6, #16]
   b9136:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b9138:	6025      	str	r5, [r4, #0]
	}
   b913a:	e7e1      	b.n	b9100 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b913c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b913c:	2200      	movs	r2, #0
   b913e:	6840      	ldr	r0, [r0, #4]
   b9140:	4611      	mov	r1, r2
   b9142:	f7ff bb4f 	b.w	b87e4 <network_listening>

000b9146 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9146:	2200      	movs	r2, #0
   b9148:	6840      	ldr	r0, [r0, #4]
   b914a:	4611      	mov	r1, r2
   b914c:	f7ff bb5a 	b.w	b8804 <network_get_listen_timeout>

000b9150 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9150:	6840      	ldr	r0, [r0, #4]
   b9152:	2200      	movs	r2, #0
   b9154:	f7ff bb4e 	b.w	b87f4 <network_set_listen_timeout>

000b9158 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9158:	6840      	ldr	r0, [r0, #4]
   b915a:	2200      	movs	r2, #0
   b915c:	f081 0101 	eor.w	r1, r1, #1
   b9160:	f7ff bb38 	b.w	b87d4 <network_listen>

000b9164 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9164:	2300      	movs	r3, #0
   b9166:	6840      	ldr	r0, [r0, #4]
   b9168:	461a      	mov	r2, r3
   b916a:	4619      	mov	r1, r3
   b916c:	f7ff bb2a 	b.w	b87c4 <network_off>

000b9170 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9170:	2300      	movs	r3, #0
   b9172:	6840      	ldr	r0, [r0, #4]
   b9174:	461a      	mov	r2, r3
   b9176:	4619      	mov	r1, r3
   b9178:	f7ff bb1c 	b.w	b87b4 <network_on>

000b917c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b917c:	2200      	movs	r2, #0
   b917e:	6840      	ldr	r0, [r0, #4]
   b9180:	4611      	mov	r1, r2
   b9182:	f7ff bb0f 	b.w	b87a4 <network_ready>

000b9186 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9186:	2200      	movs	r2, #0
   b9188:	6840      	ldr	r0, [r0, #4]
   b918a:	4611      	mov	r1, r2
   b918c:	f7ff bafa 	b.w	b8784 <network_connecting>

000b9190 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9190:	6840      	ldr	r0, [r0, #4]
   b9192:	2200      	movs	r2, #0
   b9194:	2102      	movs	r1, #2
   b9196:	f7ff bafd 	b.w	b8794 <network_disconnect>

000b919a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b919a:	2300      	movs	r3, #0
   b919c:	6840      	ldr	r0, [r0, #4]
   b919e:	461a      	mov	r2, r3
   b91a0:	f7ff bae8 	b.w	b8774 <network_connect>

000b91a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b91a4:	4b02      	ldr	r3, [pc, #8]	; (b91b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b91a6:	2203      	movs	r2, #3
   b91a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b91aa:	4a02      	ldr	r2, [pc, #8]	; (b91b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b91ac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b91ae:	4770      	bx	lr
   b91b0:	2003e640 	.word	0x2003e640
   b91b4:	000bd754 	.word	0x000bd754

000b91b8 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b91b8:	6800      	ldr	r0, [r0, #0]
   b91ba:	f000 b8e7 	b.w	b938c <_ZN7TwoWire4lockEv>

000b91be <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b91be:	b510      	push	{r4, lr}
   b91c0:	4604      	mov	r4, r0
      lock_(_lock) {
   b91c2:	6001      	str	r1, [r0, #0]
   b91c4:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b91c6:	b10a      	cbz	r2, b91cc <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b91c8:	f7ff fff6 	bl	b91b8 <_ZN9FuelGauge4lockEv>
}
   b91cc:	4620      	mov	r0, r4
   b91ce:	bd10      	pop	{r4, pc}

000b91d0 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b91d0:	b513      	push	{r0, r1, r4, lr}
   b91d2:	4604      	mov	r4, r0
   b91d4:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b91d6:	f002 fc1f 	bl	bba18 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b91da:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b91dc:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b91de:	4620      	mov	r0, r4
   b91e0:	f7ff ffed 	bl	b91be <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b91e4:	4620      	mov	r0, r4
   b91e6:	b002      	add	sp, #8
   b91e8:	bd10      	pop	{r4, pc}

000b91ea <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b91ea:	6800      	ldr	r0, [r0, #0]
   b91ec:	f000 b8d7 	b.w	b939e <_ZN7TwoWire6unlockEv>

000b91f0 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b91f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b91f4:	4604      	mov	r4, r0
   b91f6:	461d      	mov	r5, r3
   b91f8:	460f      	mov	r7, r1
   b91fa:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b91fc:	f7ff ffdc 	bl	b91b8 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9200:	2236      	movs	r2, #54	; 0x36
   b9202:	2300      	movs	r3, #0
   b9204:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b9208:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b920a:	f04f 0801 	mov.w	r8, #1
   b920e:	230a      	movs	r3, #10
   b9210:	4669      	mov	r1, sp
   b9212:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b9216:	f000 f89d 	bl	b9354 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b921a:	6820      	ldr	r0, [r4, #0]
   b921c:	6803      	ldr	r3, [r0, #0]
   b921e:	4639      	mov	r1, r7
   b9220:	689b      	ldr	r3, [r3, #8]
   b9222:	4798      	blx	r3
    i2c_.write(MSB);
   b9224:	6820      	ldr	r0, [r4, #0]
   b9226:	6803      	ldr	r3, [r0, #0]
   b9228:	4631      	mov	r1, r6
   b922a:	689b      	ldr	r3, [r3, #8]
   b922c:	4798      	blx	r3
    i2c_.write(LSB);
   b922e:	6820      	ldr	r0, [r4, #0]
   b9230:	6803      	ldr	r3, [r0, #0]
   b9232:	4629      	mov	r1, r5
   b9234:	689b      	ldr	r3, [r3, #8]
   b9236:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b9238:	4641      	mov	r1, r8
   b923a:	6820      	ldr	r0, [r4, #0]
   b923c:	f000 f8a2 	bl	b9384 <_ZN7TwoWire15endTransmissionEh>
   b9240:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b9242:	4620      	mov	r0, r4
   b9244:	bf0c      	ite	eq
   b9246:	2500      	moveq	r5, #0
   b9248:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b924c:	f7ff ffcd 	bl	b91ea <_ZN9FuelGauge6unlockEv>
}
   b9250:	4628      	mov	r0, r5
   b9252:	b004      	add	sp, #16
   b9254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9258 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b9258:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b925a:	2240      	movs	r2, #64	; 0x40
   b925c:	2300      	movs	r3, #0
   b925e:	2106      	movs	r1, #6
   b9260:	f7ff ffc6 	bl	b91f0 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b9264:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9268:	bd08      	pop	{r3, pc}

000b926a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b926a:	4770      	bx	lr

000b926c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b926e:	4606      	mov	r6, r0
   b9270:	4615      	mov	r5, r2
   b9272:	460c      	mov	r4, r1
   b9274:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b9276:	42bc      	cmp	r4, r7
   b9278:	d006      	beq.n	b9288 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b927a:	6833      	ldr	r3, [r6, #0]
   b927c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9280:	689b      	ldr	r3, [r3, #8]
   b9282:	4630      	mov	r0, r6
   b9284:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b9286:	e7f6      	b.n	b9276 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b9288:	4628      	mov	r0, r5
   b928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b928c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b928c:	7c00      	ldrb	r0, [r0, #16]
   b928e:	2200      	movs	r2, #0
   b9290:	f7ff b856 	b.w	b8340 <hal_i2c_write>

000b9294 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b9294:	7c00      	ldrb	r0, [r0, #16]
   b9296:	2100      	movs	r1, #0
   b9298:	f7ff b85a 	b.w	b8350 <hal_i2c_available>

000b929c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b929c:	7c00      	ldrb	r0, [r0, #16]
   b929e:	2100      	movs	r1, #0
   b92a0:	f7ff b85e 	b.w	b8360 <hal_i2c_read>

000b92a4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b92a4:	7c00      	ldrb	r0, [r0, #16]
   b92a6:	2100      	movs	r1, #0
   b92a8:	f7ff b862 	b.w	b8370 <hal_i2c_peek>

000b92ac <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b92ac:	7c00      	ldrb	r0, [r0, #16]
   b92ae:	2100      	movs	r1, #0
   b92b0:	f7ff b866 	b.w	b8380 <hal_i2c_flush>

000b92b4 <_ZN7TwoWireD0Ev>:
   b92b4:	b510      	push	{r4, lr}
   b92b6:	2114      	movs	r1, #20
   b92b8:	4604      	mov	r4, r0
   b92ba:	f7fa fef0 	bl	b409e <_ZdlPvj>
   b92be:	4620      	mov	r0, r4
   b92c0:	bd10      	pop	{r4, pc}
	...

000b92c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b92c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b92c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b92ca:	4604      	mov	r4, r0
   b92cc:	4608      	mov	r0, r1
   b92ce:	2100      	movs	r1, #0
   b92d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b92d4:	4b03      	ldr	r3, [pc, #12]	; (b92e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b92d6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b92d8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b92da:	4611      	mov	r1, r2
   b92dc:	f7ff f860 	bl	b83a0 <hal_i2c_init>
}
   b92e0:	4620      	mov	r0, r4
   b92e2:	bd10      	pop	{r4, pc}
   b92e4:	000bd790 	.word	0x000bd790

000b92e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b92e8:	2300      	movs	r3, #0
   b92ea:	7c00      	ldrb	r0, [r0, #16]
   b92ec:	461a      	mov	r2, r3
   b92ee:	4619      	mov	r1, r3
   b92f0:	f7ff b80e 	b.w	b8310 <hal_i2c_begin>

000b92f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b92f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b92f6:	2200      	movs	r2, #0
   b92f8:	2314      	movs	r3, #20
   b92fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b92fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9302:	780b      	ldrb	r3, [r1, #0]
   b9304:	f88d 3008 	strb.w	r3, [sp, #8]
   b9308:	684b      	ldr	r3, [r1, #4]
   b930a:	9303      	str	r3, [sp, #12]
   b930c:	68cb      	ldr	r3, [r1, #12]
   b930e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9310:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9312:	7a0b      	ldrb	r3, [r1, #8]
   b9314:	9305      	str	r3, [sp, #20]
   b9316:	a901      	add	r1, sp, #4
   b9318:	f7ff f85a 	bl	b83d0 <hal_i2c_request_ex>
}
   b931c:	b007      	add	sp, #28
   b931e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9322 <_ZN7TwoWire11requestFromEhjh>:
{
   b9322:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9324:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9326:	f88d 1000 	strb.w	r1, [sp]
   b932a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b932e:	9103      	str	r1, [sp, #12]
   b9330:	bf18      	it	ne
   b9332:	2301      	movne	r3, #1
   b9334:	4669      	mov	r1, sp
    size_ = size;
   b9336:	9201      	str	r2, [sp, #4]
   b9338:	f88d 3008 	strb.w	r3, [sp, #8]
   b933c:	f7ff ffda 	bl	b92f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9340:	b005      	add	sp, #20
   b9342:	f85d fb04 	ldr.w	pc, [sp], #4

000b9346 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9346:	7c00      	ldrb	r0, [r0, #16]
   b9348:	2200      	movs	r2, #0
   b934a:	f7fe bfe9 	b.w	b8320 <hal_i2c_begin_transmission>

000b934e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b934e:	b2c9      	uxtb	r1, r1
   b9350:	f7ff bff9 	b.w	b9346 <_ZN7TwoWire17beginTransmissionEh>

000b9354 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b9354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9356:	2300      	movs	r3, #0
   b9358:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b935c:	684a      	ldr	r2, [r1, #4]
   b935e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b9360:	2314      	movs	r3, #20
    };
   b9362:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9364:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b9368:	780b      	ldrb	r3, [r1, #0]
    };
   b936a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b936c:	7a0a      	ldrb	r2, [r1, #8]
   b936e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b9370:	7c00      	ldrb	r0, [r0, #16]
    };
   b9372:	f88d 3008 	strb.w	r3, [sp, #8]
   b9376:	aa01      	add	r2, sp, #4
   b9378:	4619      	mov	r1, r3
   b937a:	f7fe ffd1 	bl	b8320 <hal_i2c_begin_transmission>
}
   b937e:	b007      	add	sp, #28
   b9380:	f85d fb04 	ldr.w	pc, [sp], #4

000b9384 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9384:	7c00      	ldrb	r0, [r0, #16]
   b9386:	2200      	movs	r2, #0
   b9388:	f7fe bfd2 	b.w	b8330 <hal_i2c_end_transmission>

000b938c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b938c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b938e:	2100      	movs	r1, #0
   b9390:	7c00      	ldrb	r0, [r0, #16]
   b9392:	f7ff f80d 	bl	b83b0 <hal_i2c_lock>
}
   b9396:	fab0 f080 	clz	r0, r0
   b939a:	0940      	lsrs	r0, r0, #5
   b939c:	bd08      	pop	{r3, pc}

000b939e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b939e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b93a0:	2100      	movs	r1, #0
   b93a2:	7c00      	ldrb	r0, [r0, #16]
   b93a4:	f7ff f80c 	bl	b83c0 <hal_i2c_unlock>
}
   b93a8:	fab0 f080 	clz	r0, r0
   b93ac:	0940      	lsrs	r0, r0, #5
   b93ae:	bd08      	pop	{r3, pc}

000b93b0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b93b0:	4700      	bx	r0
	...

000b93b4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b93b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b93b8:	2400      	movs	r4, #0
{
   b93ba:	461d      	mov	r5, r3
   b93bc:	460f      	mov	r7, r1
   b93be:	4690      	mov	r8, r2
   b93c0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b93c2:	f7fe ff95 	bl	b82f0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b93c6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b93c8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b93cc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b93d0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b93d4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b93d8:	bfa2      	ittt	ge
   b93da:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b93de:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b93e2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b93e4:	4907      	ldr	r1, [pc, #28]	; (b9404 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b93e6:	9400      	str	r4, [sp, #0]
   b93e8:	4643      	mov	r3, r8
   b93ea:	463a      	mov	r2, r7
   b93ec:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b93ee:	bfa8      	it	ge
   b93f0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b93f4:	f7fe ff74 	bl	b82e0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b93f8:	fab0 f080 	clz	r0, r0
   b93fc:	0940      	lsrs	r0, r0, #5
   b93fe:	b004      	add	sp, #16
   b9400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9404:	000b93b1 	.word	0x000b93b1

000b9408 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9408:	4770      	bx	lr

000b940a <_ZN9IPAddressD0Ev>:
   b940a:	b510      	push	{r4, lr}
   b940c:	2118      	movs	r1, #24
   b940e:	4604      	mov	r4, r0
   b9410:	f7fa fe45 	bl	b409e <_ZdlPvj>
   b9414:	4620      	mov	r0, r4
   b9416:	bd10      	pop	{r4, pc}

000b9418 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9418:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b941a:	7d03      	ldrb	r3, [r0, #20]
   b941c:	2b06      	cmp	r3, #6
{
   b941e:	b08d      	sub	sp, #52	; 0x34
   b9420:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9422:	f100 0704 	add.w	r7, r0, #4
   b9426:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b942a:	d012      	beq.n	b9452 <_ZNK9IPAddress7printToER5Print+0x3a>
   b942c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9430:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9434:	220a      	movs	r2, #10
   b9436:	4630      	mov	r0, r6
   b9438:	f001 fb49 	bl	baace <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b943c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b943e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9440:	d019      	beq.n	b9476 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9442:	2c00      	cmp	r4, #0
   b9444:	d0f4      	beq.n	b9430 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9446:	212e      	movs	r1, #46	; 0x2e
   b9448:	4630      	mov	r0, r6
   b944a:	f001 fb31 	bl	baab0 <_ZN5Print5printEc>
   b944e:	4404      	add	r4, r0
   b9450:	e7ee      	b.n	b9430 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9452:	232f      	movs	r3, #47	; 0x2f
   b9454:	466a      	mov	r2, sp
   b9456:	4639      	mov	r1, r7
   b9458:	200a      	movs	r0, #10
		buf[0] = 0;
   b945a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b945e:	f7fe ffbf 	bl	b83e0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9462:	4668      	mov	r0, sp
   b9464:	f003 f92d 	bl	bc6c2 <strlen>
   b9468:	6833      	ldr	r3, [r6, #0]
   b946a:	4602      	mov	r2, r0
   b946c:	68db      	ldr	r3, [r3, #12]
   b946e:	4669      	mov	r1, sp
   b9470:	4630      	mov	r0, r6
   b9472:	4798      	blx	r3
   b9474:	4604      	mov	r4, r0
    }
    return n;
}
   b9476:	4620      	mov	r0, r4
   b9478:	b00d      	add	sp, #52	; 0x34
   b947a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b947c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b947c:	b510      	push	{r4, lr}
   b947e:	4b05      	ldr	r3, [pc, #20]	; (b9494 <_ZN9IPAddressC1Ev+0x18>)
   b9480:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9482:	2211      	movs	r2, #17
   b9484:	f840 3b04 	str.w	r3, [r0], #4
   b9488:	2100      	movs	r1, #0
   b948a:	f003 f85f 	bl	bc54c <memset>
}
   b948e:	4620      	mov	r0, r4
   b9490:	bd10      	pop	{r4, pc}
   b9492:	bf00      	nop
   b9494:	000bd7b8 	.word	0x000bd7b8

000b9498 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9498:	4603      	mov	r3, r0
   b949a:	4a07      	ldr	r2, [pc, #28]	; (b94b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b949c:	b510      	push	{r4, lr}
   b949e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b94a2:	f101 0210 	add.w	r2, r1, #16
   b94a6:	f851 4b04 	ldr.w	r4, [r1], #4
   b94aa:	f843 4b04 	str.w	r4, [r3], #4
   b94ae:	4291      	cmp	r1, r2
   b94b0:	d1f9      	bne.n	b94a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b94b2:	780a      	ldrb	r2, [r1, #0]
   b94b4:	701a      	strb	r2, [r3, #0]
}
   b94b6:	bd10      	pop	{r4, pc}
   b94b8:	000bd7b8 	.word	0x000bd7b8

000b94bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b94bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b94be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b94c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b94c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b94ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b94ce:	2304      	movs	r3, #4
   b94d0:	6041      	str	r1, [r0, #4]
   b94d2:	7503      	strb	r3, [r0, #20]
}
   b94d4:	bd10      	pop	{r4, pc}
	...

000b94d8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b94d8:	b507      	push	{r0, r1, r2, lr}
   b94da:	4b06      	ldr	r3, [pc, #24]	; (b94f4 <_ZN9IPAddressC1EPKh+0x1c>)
   b94dc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b94de:	78cb      	ldrb	r3, [r1, #3]
   b94e0:	9300      	str	r3, [sp, #0]
   b94e2:	788b      	ldrb	r3, [r1, #2]
   b94e4:	784a      	ldrb	r2, [r1, #1]
   b94e6:	7809      	ldrb	r1, [r1, #0]
   b94e8:	f7ff ffe8 	bl	b94bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b94ec:	b003      	add	sp, #12
   b94ee:	f85d fb04 	ldr.w	pc, [sp], #4
   b94f2:	bf00      	nop
   b94f4:	000bd7b8 	.word	0x000bd7b8

000b94f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b94f8:	f100 0310 	add.w	r3, r0, #16
   b94fc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b94fe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b9502:	2901      	cmp	r1, #1
   b9504:	4618      	mov	r0, r3
   b9506:	d108      	bne.n	b951a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b9508:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b950c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b9510:	3a01      	subs	r2, #1
   b9512:	f103 0310 	add.w	r3, r3, #16
   b9516:	d1f2      	bne.n	b94fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b9518:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b951a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b951c:	bf04      	itt	eq
   b951e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b9522:	1852      	addeq	r2, r2, r1
   b9524:	e7f4      	b.n	b9510 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b9526 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b9526:	b40e      	push	{r1, r2, r3}
   b9528:	b5f0      	push	{r4, r5, r6, r7, lr}
   b952a:	b088      	sub	sp, #32
   b952c:	af00      	add	r7, sp, #0
   b952e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9532:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9534:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9538:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b953a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b953c:	462b      	mov	r3, r5
   b953e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b9540:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9542:	f7ff f99f 	bl	b8884 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b9546:	280f      	cmp	r0, #15
   b9548:	687a      	ldr	r2, [r7, #4]
   b954a:	d91a      	bls.n	b9582 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b954c:	f100 0308 	add.w	r3, r0, #8
   b9550:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9554:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b9556:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b955a:	1c41      	adds	r1, r0, #1
   b955c:	462b      	mov	r3, r5
   b955e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9560:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9562:	f7ff f98f 	bl	b8884 <vsnprintf>
        if (n > 0) {
   b9566:	1e02      	subs	r2, r0, #0
   b9568:	dd04      	ble.n	b9574 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b956a:	6823      	ldr	r3, [r4, #0]
   b956c:	4669      	mov	r1, sp
   b956e:	689b      	ldr	r3, [r3, #8]
   b9570:	4620      	mov	r0, r4
   b9572:	4798      	blx	r3
   b9574:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b9576:	3720      	adds	r7, #32
   b9578:	46bd      	mov	sp, r7
   b957a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b957e:	b003      	add	sp, #12
   b9580:	4770      	bx	lr
    } else if (n > 0) {
   b9582:	2800      	cmp	r0, #0
   b9584:	d0f7      	beq.n	b9576 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b9586:	6823      	ldr	r3, [r4, #0]
   b9588:	4602      	mov	r2, r0
   b958a:	689b      	ldr	r3, [r3, #8]
   b958c:	f107 0110 	add.w	r1, r7, #16
   b9590:	4620      	mov	r0, r4
   b9592:	4798      	blx	r3
}
   b9594:	e7ef      	b.n	b9576 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b9596 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9596:	b538      	push	{r3, r4, r5, lr}
   b9598:	680b      	ldr	r3, [r1, #0]
   b959a:	6003      	str	r3, [r0, #0]
   b959c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b959e:	6843      	ldr	r3, [r0, #4]
   b95a0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b95a2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b95a4:	d008      	beq.n	b95b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b95a6:	b115      	cbz	r5, b95ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b95a8:	686b      	ldr	r3, [r5, #4]
   b95aa:	3301      	adds	r3, #1
   b95ac:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b95ae:	6860      	ldr	r0, [r4, #4]
   b95b0:	b108      	cbz	r0, b95b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b95b2:	f7ff f9ce 	bl	b8952 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b95b6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b95b8:	bd38      	pop	{r3, r4, r5, pc}

000b95ba <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b95ba:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b95bc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b95be:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b95c2:	689b      	ldr	r3, [r3, #8]
   b95c4:	2201      	movs	r2, #1
   b95c6:	f10d 0107 	add.w	r1, sp, #7
   b95ca:	4798      	blx	r3
}
   b95cc:	b003      	add	sp, #12
   b95ce:	f85d fb04 	ldr.w	pc, [sp], #4

000b95d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b95d2:	460b      	mov	r3, r1
   b95d4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b95d6:	2200      	movs	r2, #0
   b95d8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b95da:	e9c0 2200 	strd	r2, r2, [r0]
   b95de:	4604      	mov	r4, r0
        t_ = t;
   b95e0:	6083      	str	r3, [r0, #8]
    if (t) {
   b95e2:	b90b      	cbnz	r3, b95e8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b95e4:	4620      	mov	r0, r4
   b95e6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b95e8:	f7ff ffd5 	bl	b9596 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b95ec:	e7fa      	b.n	b95e4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b95ee <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b95ee:	6883      	ldr	r3, [r0, #8]
   b95f0:	b1eb      	cbz	r3, b962e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b95f2:	781a      	ldrb	r2, [r3, #0]
   b95f4:	2a03      	cmp	r2, #3
   b95f6:	d81a      	bhi.n	b962e <_ZNK5spark9JSONValue4typeEv+0x40>
   b95f8:	e8df f002 	tbb	[pc, r2]
   b95fc:	1b021704 	.word	0x1b021704
   b9600:	2005      	movs	r0, #5
   b9602:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b9604:	6802      	ldr	r2, [r0, #0]
   b9606:	685b      	ldr	r3, [r3, #4]
   b9608:	6852      	ldr	r2, [r2, #4]
   b960a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b960c:	282d      	cmp	r0, #45	; 0x2d
   b960e:	d012      	beq.n	b9636 <_ZNK5spark9JSONValue4typeEv+0x48>
   b9610:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9614:	2b09      	cmp	r3, #9
   b9616:	d90e      	bls.n	b9636 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b9618:	2874      	cmp	r0, #116	; 0x74
   b961a:	d00e      	beq.n	b963a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b961c:	2866      	cmp	r0, #102	; 0x66
   b961e:	d00c      	beq.n	b963a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b9620:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b9624:	4258      	negs	r0, r3
   b9626:	4158      	adcs	r0, r3
   b9628:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b962a:	2006      	movs	r0, #6
   b962c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b962e:	2000      	movs	r0, #0
   b9630:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b9632:	2004      	movs	r0, #4
   b9634:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b9636:	2003      	movs	r0, #3
   b9638:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b963a:	2002      	movs	r0, #2
}
   b963c:	4770      	bx	lr

000b963e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b963e:	b510      	push	{r4, lr}
   b9640:	4604      	mov	r4, r0
    switch (type()) {
   b9642:	f7ff ffd4 	bl	b95ee <_ZNK5spark9JSONValue4typeEv>
   b9646:	2802      	cmp	r0, #2
   b9648:	d00e      	beq.n	b9668 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b964a:	1ec3      	subs	r3, r0, #3
   b964c:	b2db      	uxtb	r3, r3
   b964e:	2b01      	cmp	r3, #1
   b9650:	d814      	bhi.n	b967c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b9652:	6822      	ldr	r2, [r4, #0]
   b9654:	68a3      	ldr	r3, [r4, #8]
   b9656:	6850      	ldr	r0, [r2, #4]
   b9658:	685b      	ldr	r3, [r3, #4]
}
   b965a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b965e:	220a      	movs	r2, #10
   b9660:	2100      	movs	r1, #0
   b9662:	4418      	add	r0, r3
   b9664:	f003 b8f2 	b.w	bc84c <strtol>
        const char* const s = d_->json + t_->start;
   b9668:	6822      	ldr	r2, [r4, #0]
   b966a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b966c:	6852      	ldr	r2, [r2, #4]
   b966e:	685b      	ldr	r3, [r3, #4]
   b9670:	5cd0      	ldrb	r0, [r2, r3]
   b9672:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b9676:	4258      	negs	r0, r3
   b9678:	4158      	adcs	r0, r3
}
   b967a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b967c:	2000      	movs	r0, #0
   b967e:	e7fc      	b.n	b967a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b9680 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9680:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9682:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9684:	e9c0 3300 	strd	r3, r3, [r0]
   b9688:	4604      	mov	r4, r0
        n_(0) {
   b968a:	480e      	ldr	r0, [pc, #56]	; (b96c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b968c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9690:	b1a9      	cbz	r1, b96be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b9692:	780b      	ldrb	r3, [r1, #0]
   b9694:	2b03      	cmp	r3, #3
   b9696:	d006      	beq.n	b96a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9698:	b98b      	cbnz	r3, b96be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b969a:	6813      	ldr	r3, [r2, #0]
   b969c:	6858      	ldr	r0, [r3, #4]
   b969e:	684b      	ldr	r3, [r1, #4]
   b96a0:	5cc3      	ldrb	r3, [r0, r3]
   b96a2:	2b6e      	cmp	r3, #110	; 0x6e
   b96a4:	d007      	beq.n	b96b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b96a6:	6813      	ldr	r3, [r2, #0]
   b96a8:	684d      	ldr	r5, [r1, #4]
   b96aa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b96ac:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b96ae:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b96b0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b96b2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b96b4:	60e3      	str	r3, [r4, #12]
   b96b6:	4611      	mov	r1, r2
   b96b8:	4620      	mov	r0, r4
   b96ba:	f7ff ff6c 	bl	b9596 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b96be:	4620      	mov	r0, r4
   b96c0:	bd38      	pop	{r3, r4, r5, pc}
   b96c2:	bf00      	nop
   b96c4:	000bd821 	.word	0x000bd821

000b96c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b96c8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b96ca:	2500      	movs	r5, #0
   b96cc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b96ce:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b96d2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b96d6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b96da:	4604      	mov	r4, r0
   b96dc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b96de:	b14b      	cbz	r3, b96f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b96e0:	781a      	ldrb	r2, [r3, #0]
   b96e2:	2a01      	cmp	r2, #1
   b96e4:	d106      	bne.n	b96f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b96e6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b96ea:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b96ec:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b96ee:	6143      	str	r3, [r0, #20]
   b96f0:	f7ff ff51 	bl	b9596 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b96f4:	4620      	mov	r0, r4
   b96f6:	bd38      	pop	{r3, r4, r5, pc}

000b96f8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b96f8:	b510      	push	{r4, lr}
    if (!n_) {
   b96fa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b96fc:	4604      	mov	r4, r0
    if (!n_) {
   b96fe:	b163      	cbz	r3, b971a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9700:	6880      	ldr	r0, [r0, #8]
   b9702:	60e0      	str	r0, [r4, #12]
    --n_;
   b9704:	3b01      	subs	r3, #1
    ++t_;
   b9706:	3010      	adds	r0, #16
   b9708:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b970a:	6120      	str	r0, [r4, #16]
    --n_;
   b970c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b970e:	b113      	cbz	r3, b9716 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9710:	f7ff fef2 	bl	b94f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b9714:	60a0      	str	r0, [r4, #8]
    return true;
   b9716:	2001      	movs	r0, #1
   b9718:	e000      	b.n	b971c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b971a:	4618      	mov	r0, r3
}
   b971c:	bd10      	pop	{r4, pc}

000b971e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b971e:	b510      	push	{r4, lr}
    write('}');
   b9720:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9722:	4604      	mov	r4, r0
    write('}');
   b9724:	f7ff ff49 	bl	b95ba <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9728:	2301      	movs	r3, #1
   b972a:	7123      	strb	r3, [r4, #4]
}
   b972c:	4620      	mov	r0, r4
   b972e:	bd10      	pop	{r4, pc}

000b9730 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9730:	b508      	push	{r3, lr}
    switch (state_) {
   b9732:	7903      	ldrb	r3, [r0, #4]
   b9734:	2b01      	cmp	r3, #1
   b9736:	d002      	beq.n	b973e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b9738:	2b02      	cmp	r3, #2
   b973a:	d004      	beq.n	b9746 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b973c:	bd08      	pop	{r3, pc}
        write(',');
   b973e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9740:	f7ff ff3b 	bl	b95ba <_ZN5spark10JSONWriter5writeEc>
}
   b9744:	e7fa      	b.n	b973c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b9746:	213a      	movs	r1, #58	; 0x3a
   b9748:	e7fa      	b.n	b9740 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b974a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b974a:	b510      	push	{r4, lr}
   b974c:	4604      	mov	r4, r0
    writeSeparator();
   b974e:	f7ff ffef 	bl	b9730 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9752:	4620      	mov	r0, r4
   b9754:	217b      	movs	r1, #123	; 0x7b
   b9756:	f7ff ff30 	bl	b95ba <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b975a:	2300      	movs	r3, #0
   b975c:	7123      	strb	r3, [r4, #4]
}
   b975e:	4620      	mov	r0, r4
   b9760:	bd10      	pop	{r4, pc}
	...

000b9764 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9764:	b513      	push	{r0, r1, r4, lr}
   b9766:	4604      	mov	r4, r0
   b9768:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b976a:	f7ff ffe1 	bl	b9730 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b976e:	6823      	ldr	r3, [r4, #0]
   b9770:	9a01      	ldr	r2, [sp, #4]
   b9772:	68db      	ldr	r3, [r3, #12]
   b9774:	4903      	ldr	r1, [pc, #12]	; (b9784 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b9776:	4620      	mov	r0, r4
   b9778:	4798      	blx	r3
    state_ = NEXT;
   b977a:	2301      	movs	r3, #1
}
   b977c:	4620      	mov	r0, r4
    state_ = NEXT;
   b977e:	7123      	strb	r3, [r4, #4]
}
   b9780:	b002      	add	sp, #8
   b9782:	bd10      	pop	{r4, pc}
   b9784:	000bd223 	.word	0x000bd223

000b9788 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9788:	b513      	push	{r0, r1, r4, lr}
   b978a:	4604      	mov	r4, r0
   b978c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b978e:	f7ff ffcf 	bl	b9730 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b9792:	6823      	ldr	r3, [r4, #0]
   b9794:	9a01      	ldr	r2, [sp, #4]
   b9796:	68db      	ldr	r3, [r3, #12]
   b9798:	4903      	ldr	r1, [pc, #12]	; (b97a8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b979a:	4620      	mov	r0, r4
   b979c:	4798      	blx	r3
    state_ = NEXT;
   b979e:	2301      	movs	r3, #1
}
   b97a0:	4620      	mov	r0, r4
    state_ = NEXT;
   b97a2:	7123      	strb	r3, [r4, #4]
}
   b97a4:	b002      	add	sp, #8
   b97a6:	bd10      	pop	{r4, pc}
   b97a8:	000bd1ae 	.word	0x000bd1ae

000b97ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b97ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b97b0:	460d      	mov	r5, r1
    write('"');
   b97b2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b97b4:	4690      	mov	r8, r2
   b97b6:	4604      	mov	r4, r0
    write('"');
   b97b8:	f7ff feff 	bl	b95ba <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b97bc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9864 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b97c0:	44a8      	add	r8, r5
    const char *s = str;
   b97c2:	462f      	mov	r7, r5
    while (s != end) {
   b97c4:	4547      	cmp	r7, r8
   b97c6:	46ba      	mov	sl, r7
   b97c8:	d03d      	beq.n	b9846 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b97ca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b97ce:	2e22      	cmp	r6, #34	; 0x22
   b97d0:	d006      	beq.n	b97e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b97d2:	2e5c      	cmp	r6, #92	; 0x5c
   b97d4:	d004      	beq.n	b97e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b97d6:	4630      	mov	r0, r6
   b97d8:	f002 fe88 	bl	bc4ec <isprint>
   b97dc:	2800      	cmp	r0, #0
   b97de:	d1f1      	bne.n	b97c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b97e0:	6823      	ldr	r3, [r4, #0]
   b97e2:	ebaa 0205 	sub.w	r2, sl, r5
   b97e6:	689b      	ldr	r3, [r3, #8]
   b97e8:	4629      	mov	r1, r5
   b97ea:	4620      	mov	r0, r4
   b97ec:	4798      	blx	r3
            write('\\');
   b97ee:	215c      	movs	r1, #92	; 0x5c
   b97f0:	4620      	mov	r0, r4
   b97f2:	f7ff fee2 	bl	b95ba <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b97f6:	2e0d      	cmp	r6, #13
   b97f8:	d80a      	bhi.n	b9810 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b97fa:	2e07      	cmp	r6, #7
   b97fc:	d91c      	bls.n	b9838 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b97fe:	f1a6 0308 	sub.w	r3, r6, #8
   b9802:	2b05      	cmp	r3, #5
   b9804:	d818      	bhi.n	b9838 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9806:	e8df f003 	tbb	[pc, r3]
   b980a:	0f0d      	.short	0x0f0d
   b980c:	15131711 	.word	0x15131711
   b9810:	2e22      	cmp	r6, #34	; 0x22
   b9812:	d001      	beq.n	b9818 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b9814:	2e5c      	cmp	r6, #92	; 0x5c
   b9816:	d10f      	bne.n	b9838 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b9818:	4631      	mov	r1, r6
                write('b');
   b981a:	4620      	mov	r0, r4
   b981c:	f7ff fecd 	bl	b95ba <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b9820:	463d      	mov	r5, r7
    while (s != end) {
   b9822:	e7cf      	b.n	b97c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b9824:	2162      	movs	r1, #98	; 0x62
   b9826:	e7f8      	b.n	b981a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b9828:	2174      	movs	r1, #116	; 0x74
   b982a:	e7f6      	b.n	b981a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b982c:	216e      	movs	r1, #110	; 0x6e
   b982e:	e7f4      	b.n	b981a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9830:	2166      	movs	r1, #102	; 0x66
   b9832:	e7f2      	b.n	b981a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b9834:	2172      	movs	r1, #114	; 0x72
   b9836:	e7f0      	b.n	b981a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b9838:	6823      	ldr	r3, [r4, #0]
   b983a:	4632      	mov	r2, r6
   b983c:	68db      	ldr	r3, [r3, #12]
   b983e:	4649      	mov	r1, r9
   b9840:	4620      	mov	r0, r4
   b9842:	4798      	blx	r3
                break;
   b9844:	e7ec      	b.n	b9820 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b9846:	42bd      	cmp	r5, r7
   b9848:	d005      	beq.n	b9856 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b984a:	6823      	ldr	r3, [r4, #0]
   b984c:	1b7a      	subs	r2, r7, r5
   b984e:	689b      	ldr	r3, [r3, #8]
   b9850:	4629      	mov	r1, r5
   b9852:	4620      	mov	r0, r4
   b9854:	4798      	blx	r3
    }
    write('"');
   b9856:	2122      	movs	r1, #34	; 0x22
   b9858:	4620      	mov	r0, r4
   b985a:	f7ff feae 	bl	b95ba <_ZN5spark10JSONWriter5writeEc>
}
   b985e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9862:	bf00      	nop
   b9864:	000bd7c4 	.word	0x000bd7c4

000b9868 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b9868:	b513      	push	{r0, r1, r4, lr}
   b986a:	4604      	mov	r4, r0
   b986c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9870:	f7ff ff5e 	bl	b9730 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b9874:	4620      	mov	r0, r4
   b9876:	e9dd 2100 	ldrd	r2, r1, [sp]
   b987a:	f7ff ff97 	bl	b97ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b987e:	2302      	movs	r3, #2
}
   b9880:	4620      	mov	r0, r4
    state_ = VALUE;
   b9882:	7123      	strb	r3, [r4, #4]
}
   b9884:	b002      	add	sp, #8
   b9886:	bd10      	pop	{r4, pc}

000b9888 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b9888:	b513      	push	{r0, r1, r4, lr}
   b988a:	4604      	mov	r4, r0
   b988c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9890:	f7ff ff4e 	bl	b9730 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b9894:	4620      	mov	r0, r4
   b9896:	e9dd 2100 	ldrd	r2, r1, [sp]
   b989a:	f7ff ff87 	bl	b97ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b989e:	2301      	movs	r3, #1
}
   b98a0:	4620      	mov	r0, r4
    state_ = NEXT;
   b98a2:	7123      	strb	r3, [r4, #4]
}
   b98a4:	b002      	add	sp, #8
   b98a6:	bd10      	pop	{r4, pc}

000b98a8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b98a8:	6880      	ldr	r0, [r0, #8]
   b98aa:	6803      	ldr	r3, [r0, #0]
   b98ac:	68db      	ldr	r3, [r3, #12]
   b98ae:	4718      	bx	r3

000b98b0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b98b0:	4770      	bx	lr

000b98b2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b98b2:	4608      	mov	r0, r1
   b98b4:	b111      	cbz	r1, b98bc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b98b6:	680b      	ldr	r3, [r1, #0]
   b98b8:	685b      	ldr	r3, [r3, #4]
   b98ba:	4718      	bx	r3
}
   b98bc:	4770      	bx	lr

000b98be <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b98be:	4770      	bx	lr

000b98c0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b98c0:	4770      	bx	lr

000b98c2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b98c2:	4770      	bx	lr

000b98c4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b98c4:	4770      	bx	lr

000b98c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b98c6:	b538      	push	{r3, r4, r5, lr}
   b98c8:	4604      	mov	r4, r0
   b98ca:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b98cc:	6800      	ldr	r0, [r0, #0]
   b98ce:	212e      	movs	r1, #46	; 0x2e
   b98d0:	f002 febd 	bl	bc64e <strchrnul>
    size = s - category;
   b98d4:	6823      	ldr	r3, [r4, #0]
   b98d6:	1ac3      	subs	r3, r0, r3
   b98d8:	602b      	str	r3, [r5, #0]
    if (size) {
   b98da:	b123      	cbz	r3, b98e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b98dc:	7803      	ldrb	r3, [r0, #0]
   b98de:	b103      	cbz	r3, b98e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b98e0:	3001      	adds	r0, #1
   b98e2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b98e4:	6020      	str	r0, [r4, #0]
}
   b98e6:	4618      	mov	r0, r3
   b98e8:	bd38      	pop	{r3, r4, r5, pc}

000b98ea <_ZN5spark16JSONStreamWriterD0Ev>:
   b98ea:	b510      	push	{r4, lr}
   b98ec:	210c      	movs	r1, #12
   b98ee:	4604      	mov	r4, r0
   b98f0:	f7fa fbd5 	bl	b409e <_ZdlPvj>
   b98f4:	4620      	mov	r0, r4
   b98f6:	bd10      	pop	{r4, pc}

000b98f8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b98f8:	b510      	push	{r4, lr}
   b98fa:	2104      	movs	r1, #4
   b98fc:	4604      	mov	r4, r0
   b98fe:	f7fa fbce 	bl	b409e <_ZdlPvj>
   b9902:	4620      	mov	r0, r4
   b9904:	bd10      	pop	{r4, pc}

000b9906 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9906:	b510      	push	{r4, lr}
   b9908:	2104      	movs	r1, #4
   b990a:	4604      	mov	r4, r0
   b990c:	f7fa fbc7 	bl	b409e <_ZdlPvj>
   b9910:	4620      	mov	r0, r4
   b9912:	bd10      	pop	{r4, pc}

000b9914 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9914:	f7fe bc5c 	b.w	b81d0 <os_mutex_recursive_lock>

000b9918 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9918:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b991a:	f002 fea2 	bl	bc662 <strcmp>
}
   b991e:	fab0 f080 	clz	r0, r0
   b9922:	0940      	lsrs	r0, r0, #5
   b9924:	bd08      	pop	{r3, pc}

000b9926 <__tcf_1>:
   b9926:	4770      	bx	lr

000b9928 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9928:	b510      	push	{r4, lr}
   b992a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b992c:	f001 feb6 	bl	bb69c <_Z16_fetch_usbserialv>
   b9930:	4284      	cmp	r4, r0
   b9932:	d010      	beq.n	b9956 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9934:	f002 f8b0 	bl	bba98 <_Z22__fetch_global_Serial1v>
   b9938:	4284      	cmp	r4, r0
   b993a:	d105      	bne.n	b9948 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b993c:	f002 f8ac 	bl	bba98 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9944:	f001 be43 	b.w	bb5ce <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9948:	b12c      	cbz	r4, b9956 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b994a:	6823      	ldr	r3, [r4, #0]
   b994c:	4620      	mov	r0, r4
   b994e:	685b      	ldr	r3, [r3, #4]
}
   b9950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9954:	4718      	bx	r3
   b9956:	bd10      	pop	{r4, pc}

000b9958 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9958:	680b      	ldr	r3, [r1, #0]
   b995a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b995c:	684b      	ldr	r3, [r1, #4]
   b995e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9960:	b113      	cbz	r3, b9968 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9962:	685a      	ldr	r2, [r3, #4]
   b9964:	3201      	adds	r2, #1
   b9966:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9968:	4770      	bx	lr

000b996a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b996a:	b513      	push	{r0, r1, r4, lr}
   b996c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b996e:	4608      	mov	r0, r1
   b9970:	9101      	str	r1, [sp, #4]
   b9972:	f002 fea6 	bl	bc6c2 <strlen>
   b9976:	9901      	ldr	r1, [sp, #4]
   b9978:	4602      	mov	r2, r0
   b997a:	4620      	mov	r0, r4
}
   b997c:	b002      	add	sp, #8
   b997e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9982:	f7ff bf81 	b.w	b9888 <_ZN5spark10JSONWriter5valueEPKcj>

000b9986 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9986:	b513      	push	{r0, r1, r4, lr}
   b9988:	4604      	mov	r4, r0
    write(str, strlen(str));
   b998a:	4608      	mov	r0, r1
   b998c:	9101      	str	r1, [sp, #4]
   b998e:	f002 fe98 	bl	bc6c2 <strlen>
   b9992:	6823      	ldr	r3, [r4, #0]
   b9994:	9901      	ldr	r1, [sp, #4]
   b9996:	68db      	ldr	r3, [r3, #12]
   b9998:	4602      	mov	r2, r0
   b999a:	4620      	mov	r0, r4
}
   b999c:	b002      	add	sp, #8
   b999e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b99a2:	4718      	bx	r3

000b99a4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b99a4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b99a6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b99a8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b99ac:	68db      	ldr	r3, [r3, #12]
   b99ae:	2201      	movs	r2, #1
   b99b0:	f10d 0107 	add.w	r1, sp, #7
   b99b4:	4798      	blx	r3
}
   b99b6:	b003      	add	sp, #12
   b99b8:	f85d fb04 	ldr.w	pc, [sp], #4

000b99bc <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b99bc:	b40e      	push	{r1, r2, r3}
   b99be:	b503      	push	{r0, r1, lr}
   b99c0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b99c2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b99c4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b99c8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b99ca:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b99cc:	f001 f975 	bl	bacba <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b99d0:	b002      	add	sp, #8
   b99d2:	f85d eb04 	ldr.w	lr, [sp], #4
   b99d6:	b003      	add	sp, #12
   b99d8:	4770      	bx	lr

000b99da <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b99da:	680a      	ldr	r2, [r1, #0]
   b99dc:	6002      	str	r2, [r0, #0]
   b99de:	684a      	ldr	r2, [r1, #4]
   b99e0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b99e2:	2200      	movs	r2, #0
   b99e4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b99e8:	b510      	push	{r4, lr}
   b99ea:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b99ec:	688c      	ldr	r4, [r1, #8]
   b99ee:	6084      	str	r4, [r0, #8]
   b99f0:	68cc      	ldr	r4, [r1, #12]
   b99f2:	60c4      	str	r4, [r0, #12]
   b99f4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b99f6:	608a      	str	r2, [r1, #8]
   b99f8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b99fa:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b99fc:	610a      	str	r2, [r1, #16]
   b99fe:	bd10      	pop	{r4, pc}

000b9a00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b9a04:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9a08:	f04f 0a14 	mov.w	sl, #20
   b9a0c:	9300      	str	r3, [sp, #0]
   b9a0e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9a12:	4b18      	ldr	r3, [pc, #96]	; (b9a74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9a14:	10a4      	asrs	r4, r4, #2
   b9a16:	4617      	mov	r7, r2
   b9a18:	435c      	muls	r4, r3
   b9a1a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9a1c:	2c00      	cmp	r4, #0
   b9a1e:	dd21      	ble.n	b9a64 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9a20:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9a22:	fb0a f006 	mul.w	r0, sl, r6
   b9a26:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9a2a:	463a      	mov	r2, r7
   b9a2c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9a30:	5828      	ldr	r0, [r5, r0]
   b9a32:	9101      	str	r1, [sp, #4]
   b9a34:	455f      	cmp	r7, fp
   b9a36:	bf28      	it	cs
   b9a38:	465a      	movcs	r2, fp
   b9a3a:	f002 fe4a 	bl	bc6d2 <strncmp>
                if (cmp == 0) {
   b9a3e:	2800      	cmp	r0, #0
   b9a40:	9901      	ldr	r1, [sp, #4]
   b9a42:	f04f 0301 	mov.w	r3, #1
   b9a46:	d10b      	bne.n	b9a60 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9a48:	455f      	cmp	r7, fp
   b9a4a:	d103      	bne.n	b9a54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b9a4c:	9a00      	ldr	r2, [sp, #0]
   b9a4e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9a50:	4634      	mov	r4, r6
   b9a52:	e7e3      	b.n	b9a1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9a54:	d9fc      	bls.n	b9a50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9a56:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9a58:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b9a5c:	3e01      	subs	r6, #1
   b9a5e:	e7f7      	b.n	b9a50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9a60:	dbf9      	blt.n	b9a56 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9a62:	e7f5      	b.n	b9a50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9a64:	eba5 0508 	sub.w	r5, r5, r8
}
   b9a68:	4802      	ldr	r0, [pc, #8]	; (b9a74 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9a6a:	10ad      	asrs	r5, r5, #2
   b9a6c:	4368      	muls	r0, r5
   b9a6e:	b003      	add	sp, #12
   b9a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9a74:	cccccccd 	.word	0xcccccccd

000b9a78 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9a78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b9a7a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b9a7c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9a7e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9a80:	b303      	cbz	r3, b9ac4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b9a82:	b1f9      	cbz	r1, b9ac4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b9a84:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b9a86:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b9a8a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b9a8c:	a903      	add	r1, sp, #12
   b9a8e:	a801      	add	r0, sp, #4
   b9a90:	f7ff ff19 	bl	b98c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9a94:	4601      	mov	r1, r0
   b9a96:	b1a8      	cbz	r0, b9ac4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9a98:	f10d 030b 	add.w	r3, sp, #11
   b9a9c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b9a9e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9aa2:	4620      	mov	r0, r4
   b9aa4:	f7ff ffac 	bl	b9a00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9aa8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9aac:	b153      	cbz	r3, b9ac4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b9aae:	6823      	ldr	r3, [r4, #0]
   b9ab0:	2414      	movs	r4, #20
   b9ab2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b9ab6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9ab8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9abc:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b9abe:	bfa8      	it	ge
   b9ac0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b9ac2:	e7e3      	b.n	b9a8c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b9ac4:	4628      	mov	r0, r5
   b9ac6:	b004      	add	sp, #16
   b9ac8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9acc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9acc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b9ace:	4c09      	ldr	r4, [pc, #36]	; (b9af4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9ad0:	7823      	ldrb	r3, [r4, #0]
   b9ad2:	f3bf 8f5b 	dmb	ish
   b9ad6:	07db      	lsls	r3, r3, #31
   b9ad8:	d409      	bmi.n	b9aee <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9ada:	4620      	mov	r0, r4
   b9adc:	f7fa faee 	bl	b40bc <__cxa_guard_acquire>
   b9ae0:	b128      	cbz	r0, b9aee <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9ae2:	4620      	mov	r0, r4
   b9ae4:	f7fa faef 	bl	b40c6 <__cxa_guard_release>
   b9ae8:	4803      	ldr	r0, [pc, #12]	; (b9af8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9aea:	f002 fcdb 	bl	bc4a4 <atexit>
}
   b9aee:	4803      	ldr	r0, [pc, #12]	; (b9afc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9af0:	bd10      	pop	{r4, pc}
   b9af2:	bf00      	nop
   b9af4:	2003e64c 	.word	0x2003e64c
   b9af8:	000b98bf 	.word	0x000b98bf
   b9afc:	2003df9c 	.word	0x2003df9c

000b9b00 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9b00:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9b02:	4c09      	ldr	r4, [pc, #36]	; (b9b28 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9b04:	7823      	ldrb	r3, [r4, #0]
   b9b06:	f3bf 8f5b 	dmb	ish
   b9b0a:	07db      	lsls	r3, r3, #31
   b9b0c:	d409      	bmi.n	b9b22 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9b0e:	4620      	mov	r0, r4
   b9b10:	f7fa fad4 	bl	b40bc <__cxa_guard_acquire>
   b9b14:	b128      	cbz	r0, b9b22 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9b16:	4620      	mov	r0, r4
   b9b18:	f7fa fad5 	bl	b40c6 <__cxa_guard_release>
   b9b1c:	4803      	ldr	r0, [pc, #12]	; (b9b2c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b9b1e:	f002 fcc1 	bl	bc4a4 <atexit>
    return &factory;
}
   b9b22:	4803      	ldr	r0, [pc, #12]	; (b9b30 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9b24:	bd10      	pop	{r4, pc}
   b9b26:	bf00      	nop
   b9b28:	2003e650 	.word	0x2003e650
   b9b2c:	000b9927 	.word	0x000b9927
   b9b30:	2003dfa0 	.word	0x2003dfa0

000b9b34 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9b34:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9b36:	2500      	movs	r5, #0
   b9b38:	4604      	mov	r4, r0
   b9b3a:	e9c0 5500 	strd	r5, r5, [r0]
   b9b3e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9b42:	6085      	str	r5, [r0, #8]
   b9b44:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9b46:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b9b4a:	f7fe fb31 	bl	b81b0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b9b4e:	f7ff ffbd 	bl	b9acc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9b52:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9b54:	f7ff ffd4 	bl	b9b00 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9b58:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9b5a:	6220      	str	r0, [r4, #32]
}
   b9b5c:	4620      	mov	r0, r4
   b9b5e:	bd38      	pop	{r3, r4, r5, pc}

000b9b60 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9b60:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9b62:	4c0a      	ldr	r4, [pc, #40]	; (b9b8c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9b64:	7823      	ldrb	r3, [r4, #0]
   b9b66:	f3bf 8f5b 	dmb	ish
   b9b6a:	07db      	lsls	r3, r3, #31
   b9b6c:	d40c      	bmi.n	b9b88 <_ZN5spark10LogManager8instanceEv+0x28>
   b9b6e:	4620      	mov	r0, r4
   b9b70:	f7fa faa4 	bl	b40bc <__cxa_guard_acquire>
   b9b74:	b140      	cbz	r0, b9b88 <_ZN5spark10LogManager8instanceEv+0x28>
   b9b76:	4806      	ldr	r0, [pc, #24]	; (b9b90 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9b78:	f7ff ffdc 	bl	b9b34 <_ZN5spark10LogManagerC1Ev>
   b9b7c:	4620      	mov	r0, r4
   b9b7e:	f7fa faa2 	bl	b40c6 <__cxa_guard_release>
   b9b82:	4804      	ldr	r0, [pc, #16]	; (b9b94 <_ZN5spark10LogManager8instanceEv+0x34>)
   b9b84:	f002 fc8e 	bl	bc4a4 <atexit>
    return &mgr;
}
   b9b88:	4801      	ldr	r0, [pc, #4]	; (b9b90 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9b8a:	bd10      	pop	{r4, pc}
   b9b8c:	2003e648 	.word	0x2003e648
   b9b90:	2003e658 	.word	0x2003e658
   b9b94:	000ba0b5 	.word	0x000ba0b5

000b9b98 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9b98:	4a02      	ldr	r2, [pc, #8]	; (b9ba4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b9b9a:	4903      	ldr	r1, [pc, #12]	; (b9ba8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b9b9c:	4803      	ldr	r0, [pc, #12]	; (b9bac <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b9b9e:	2300      	movs	r3, #0
   b9ba0:	f7fe bd36 	b.w	b8610 <log_set_callbacks>
   b9ba4:	000b9e99 	.word	0x000b9e99
   b9ba8:	000b9e25 	.word	0x000b9e25
   b9bac:	000b9da5 	.word	0x000b9da5

000b9bb0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9bb0:	2300      	movs	r3, #0
   b9bb2:	461a      	mov	r2, r3
   b9bb4:	4619      	mov	r1, r3
   b9bb6:	4618      	mov	r0, r3
   b9bb8:	f7fe bd2a 	b.w	b8610 <log_set_callbacks>

000b9bbc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9bbe:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9bc0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9bc2:	4668      	mov	r0, sp
   b9bc4:	f7ff fec8 	bl	b9958 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9bc8:	466a      	mov	r2, sp
   b9bca:	4629      	mov	r1, r5
   b9bcc:	4620      	mov	r0, r4
   b9bce:	f7ff fd7b 	bl	b96c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9bd2:	a801      	add	r0, sp, #4
   b9bd4:	f7fb fdb6 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9bd8:	4620      	mov	r0, r4
   b9bda:	b003      	add	sp, #12
   b9bdc:	bd30      	pop	{r4, r5, pc}

000b9bde <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9bde:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9be0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9be2:	4604      	mov	r4, r0
   b9be4:	4668      	mov	r0, sp
   b9be6:	f7ff feb7 	bl	b9958 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9bea:	466a      	mov	r2, sp
   b9bec:	4629      	mov	r1, r5
   b9bee:	4620      	mov	r0, r4
   b9bf0:	f7ff fd46 	bl	b9680 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9bf4:	a801      	add	r0, sp, #4
   b9bf6:	f7fb fda5 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9bfa:	4620      	mov	r0, r4
   b9bfc:	b003      	add	sp, #12
   b9bfe:	bd30      	pop	{r4, r5, pc}

000b9c00 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9c02:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9c04:	4604      	mov	r4, r0
   b9c06:	4668      	mov	r0, sp
   b9c08:	f7ff fea6 	bl	b9958 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9c0c:	466a      	mov	r2, sp
   b9c0e:	4629      	mov	r1, r5
   b9c10:	4620      	mov	r0, r4
   b9c12:	f7ff fcde 	bl	b95d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9c16:	a801      	add	r0, sp, #4
   b9c18:	f7fb fd94 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9c1c:	4620      	mov	r0, r4
   b9c1e:	b003      	add	sp, #12
   b9c20:	bd30      	pop	{r4, r5, pc}
	...

000b9c24 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9c24:	b570      	push	{r4, r5, r6, lr}
   b9c26:	b08a      	sub	sp, #40	; 0x28
   b9c28:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9c2a:	4601      	mov	r1, r0
   b9c2c:	a804      	add	r0, sp, #16
   b9c2e:	f7ff ffc5 	bl	b9bbc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9c32:	4e14      	ldr	r6, [pc, #80]	; (b9c84 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9c34:	a804      	add	r0, sp, #16
   b9c36:	f7ff fd5f 	bl	b96f8 <_ZN5spark18JSONObjectIterator4nextEv>
   b9c3a:	b1e8      	cbz	r0, b9c78 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b9c3c:	a904      	add	r1, sp, #16
   b9c3e:	4668      	mov	r0, sp
   b9c40:	f7ff ffcd 	bl	b9bde <_ZNK5spark18JSONObjectIterator4nameEv>
   b9c44:	9802      	ldr	r0, [sp, #8]
   b9c46:	4631      	mov	r1, r6
   b9c48:	f7ff fe66 	bl	b9918 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b9c4c:	4604      	mov	r4, r0
   b9c4e:	b110      	cbz	r0, b9c56 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9c50:	1e2c      	subs	r4, r5, #0
   b9c52:	bf18      	it	ne
   b9c54:	2401      	movne	r4, #1
   b9c56:	a801      	add	r0, sp, #4
   b9c58:	f7fb fd74 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9c5c:	2c00      	cmp	r4, #0
   b9c5e:	d0e9      	beq.n	b9c34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9c60:	a904      	add	r1, sp, #16
   b9c62:	4668      	mov	r0, sp
   b9c64:	f7ff ffcc 	bl	b9c00 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9c68:	4668      	mov	r0, sp
   b9c6a:	f7ff fce8 	bl	b963e <_ZNK5spark9JSONValue5toIntEv>
   b9c6e:	6028      	str	r0, [r5, #0]
   b9c70:	a801      	add	r0, sp, #4
   b9c72:	f7fb fd67 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9c76:	e7dd      	b.n	b9c34 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9c78:	a805      	add	r0, sp, #20
   b9c7a:	f7fb fd63 	bl	b5744 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9c7e:	b00a      	add	sp, #40	; 0x28
   b9c80:	bd70      	pop	{r4, r5, r6, pc}
   b9c82:	bf00      	nop
   b9c84:	000bd7ca 	.word	0x000bd7ca

000b9c88 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9c8a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9c8c:	4620      	mov	r0, r4
   b9c8e:	4913      	ldr	r1, [pc, #76]	; (b9cdc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9c90:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9c92:	f002 fce6 	bl	bc662 <strcmp>
   b9c96:	b950      	cbnz	r0, b9cae <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9c98:	f001 fd00 	bl	bb69c <_Z16_fetch_usbserialv>
   b9c9c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9ca0:	f001 fcea 	bl	bb678 <_ZN9USBSerial5beginEl>
}
   b9ca4:	b003      	add	sp, #12
   b9ca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9caa:	f001 bcf7 	b.w	bb69c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9cae:	490c      	ldr	r1, [pc, #48]	; (b9ce0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9cb0:	4620      	mov	r0, r4
   b9cb2:	f002 fcd6 	bl	bc662 <strcmp>
   b9cb6:	b978      	cbnz	r0, b9cd8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9cb8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9cbc:	a901      	add	r1, sp, #4
   b9cbe:	4628      	mov	r0, r5
        int baud = 9600;
   b9cc0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b9cc2:	f7ff ffaf 	bl	b9c24 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b9cc6:	f001 fee7 	bl	bba98 <_Z22__fetch_global_Serial1v>
   b9cca:	9901      	ldr	r1, [sp, #4]
   b9ccc:	f001 fc7c 	bl	bb5c8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9cd0:	f001 fee2 	bl	bba98 <_Z22__fetch_global_Serial1v>
}
   b9cd4:	b003      	add	sp, #12
   b9cd6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9cd8:	2000      	movs	r0, #0
   b9cda:	e7fb      	b.n	b9cd4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b9cdc:	000bd7cf 	.word	0x000bd7cf
   b9ce0:	000bd7d6 	.word	0x000bd7d6

000b9ce4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9ce4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9ce6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b9cea:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9cec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9cee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9cf2:	42ae      	cmp	r6, r5
   b9cf4:	d005      	beq.n	b9d02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b9cf6:	f105 0008 	add.w	r0, r5, #8
   b9cfa:	f7ff fff3 	bl	b9ce4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9cfe:	3514      	adds	r5, #20
   b9d00:	e7f7      	b.n	b9cf2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b9d02:	6820      	ldr	r0, [r4, #0]
   b9d04:	f7fe fd9e 	bl	b8844 <free>
}
   b9d08:	4620      	mov	r0, r4
   b9d0a:	bd70      	pop	{r4, r5, r6, pc}

000b9d0c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b9d0c:	b510      	push	{r4, lr}
   b9d0e:	4604      	mov	r4, r0
   b9d10:	300c      	adds	r0, #12
   b9d12:	f7ff ffe7 	bl	b9ce4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9d16:	4620      	mov	r0, r4
   b9d18:	f7fe fe2f 	bl	b897a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9d1c:	4620      	mov	r0, r4
   b9d1e:	bd10      	pop	{r4, pc}

000b9d20 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9d20:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b9d22:	4b04      	ldr	r3, [pc, #16]	; (b9d34 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b9d24:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b9d26:	f840 3b04 	str.w	r3, [r0], #4
   b9d2a:	f7ff ffef 	bl	b9d0c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b9d2e:	4620      	mov	r0, r4
   b9d30:	bd10      	pop	{r4, pc}
   b9d32:	bf00      	nop
   b9d34:	000bd048 	.word	0x000bd048

000b9d38 <_ZN5spark16StreamLogHandlerD0Ev>:
   b9d38:	b510      	push	{r4, lr}
   b9d3a:	4604      	mov	r4, r0
   b9d3c:	f7ff fff0 	bl	b9d20 <_ZN5spark16StreamLogHandlerD1Ev>
   b9d40:	4620      	mov	r0, r4
   b9d42:	2124      	movs	r1, #36	; 0x24
   b9d44:	f7fa f9ab 	bl	b409e <_ZdlPvj>
   b9d48:	4620      	mov	r0, r4
   b9d4a:	bd10      	pop	{r4, pc}

000b9d4c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b9d4c:	b510      	push	{r4, lr}
   b9d4e:	4b03      	ldr	r3, [pc, #12]	; (b9d5c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b9d50:	6003      	str	r3, [r0, #0]
   b9d52:	4604      	mov	r4, r0
   b9d54:	f7ff ffe4 	bl	b9d20 <_ZN5spark16StreamLogHandlerD1Ev>
   b9d58:	4620      	mov	r0, r4
   b9d5a:	bd10      	pop	{r4, pc}
   b9d5c:	000bd870 	.word	0x000bd870

000b9d60 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9d60:	b510      	push	{r4, lr}
   b9d62:	4604      	mov	r4, r0
   b9d64:	f7ff fff2 	bl	b9d4c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9d68:	4620      	mov	r0, r4
   b9d6a:	2124      	movs	r1, #36	; 0x24
   b9d6c:	f7fa f997 	bl	b409e <_ZdlPvj>
   b9d70:	4620      	mov	r0, r4
   b9d72:	bd10      	pop	{r4, pc}

000b9d74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b9d74:	2200      	movs	r2, #0
   b9d76:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b9d7a:	b510      	push	{r4, lr}
        capacity_(0) {
   b9d7c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9d7e:	680c      	ldr	r4, [r1, #0]
   b9d80:	6004      	str	r4, [r0, #0]
   b9d82:	684c      	ldr	r4, [r1, #4]
   b9d84:	6044      	str	r4, [r0, #4]
   b9d86:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9d88:	600a      	str	r2, [r1, #0]
   b9d8a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9d8c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9d8e:	608a      	str	r2, [r1, #8]
}
   b9d90:	bd10      	pop	{r4, pc}

000b9d92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b9d92:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9d94:	6803      	ldr	r3, [r0, #0]
   b9d96:	4604      	mov	r4, r0
   b9d98:	6818      	ldr	r0, [r3, #0]
   b9d9a:	f7fe fa21 	bl	b81e0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b9d9e:	4620      	mov	r0, r4
   b9da0:	bd10      	pop	{r4, pc}
	...

000b9da4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9da8:	b087      	sub	sp, #28
   b9daa:	4680      	mov	r8, r0
   b9dac:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b9dae:	4b1c      	ldr	r3, [pc, #112]	; (b9e20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9db0:	685b      	ldr	r3, [r3, #4]
   b9db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9db6:	4689      	mov	r9, r1
   b9db8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b9dba:	b96b      	cbnz	r3, b9dd8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b9dbc:	f7ff fed0 	bl	b9b60 <_ZN5spark10LogManager8instanceEv>
   b9dc0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9dc2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9dc6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9dc8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b9dca:	f7ff fda3 	bl	b9914 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b9dce:	7b23      	ldrb	r3, [r4, #12]
   b9dd0:	b12b      	cbz	r3, b9dde <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b9dd2:	a805      	add	r0, sp, #20
   b9dd4:	f7ff ffdd 	bl	b9d92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9dd8:	b007      	add	sp, #28
   b9dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b9dde:	2301      	movs	r3, #1
   b9de0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b9de2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b9de6:	fa5f f989 	uxtb.w	r9, r9
   b9dea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9dee:	45aa      	cmp	sl, r5
   b9df0:	d012      	beq.n	b9e18 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b9df2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b9df6:	4631      	mov	r1, r6
   b9df8:	1d38      	adds	r0, r7, #4
   b9dfa:	f7ff fe3d 	bl	b9a78 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9dfe:	4581      	cmp	r9, r0
   b9e00:	d3f5      	bcc.n	b9dee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b9e02:	683b      	ldr	r3, [r7, #0]
   b9e04:	9a03      	ldr	r2, [sp, #12]
   b9e06:	9200      	str	r2, [sp, #0]
   b9e08:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b9e0c:	464a      	mov	r2, r9
   b9e0e:	4633      	mov	r3, r6
   b9e10:	4641      	mov	r1, r8
   b9e12:	4638      	mov	r0, r7
   b9e14:	47d8      	blx	fp
   b9e16:	e7ea      	b.n	b9dee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9e18:	2300      	movs	r3, #0
   b9e1a:	7323      	strb	r3, [r4, #12]
   b9e1c:	e7d9      	b.n	b9dd2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b9e1e:	bf00      	nop
   b9e20:	e000ed00 	.word	0xe000ed00

000b9e24 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b9e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e28:	469b      	mov	fp, r3
   b9e2a:	4b1a      	ldr	r3, [pc, #104]	; (b9e94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b9e2c:	685b      	ldr	r3, [r3, #4]
   b9e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9e32:	4680      	mov	r8, r0
   b9e34:	4689      	mov	r9, r1
   b9e36:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9e38:	b96b      	cbnz	r3, b9e56 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b9e3a:	f7ff fe91 	bl	b9b60 <_ZN5spark10LogManager8instanceEv>
   b9e3e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9e40:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b9e44:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9e46:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9e48:	f7ff fd64 	bl	b9914 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b9e4c:	7b23      	ldrb	r3, [r4, #12]
   b9e4e:	b12b      	cbz	r3, b9e5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9e50:	a801      	add	r0, sp, #4
   b9e52:	f7ff ff9e 	bl	b9d92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9e56:	b003      	add	sp, #12
   b9e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9e5c:	2301      	movs	r3, #1
   b9e5e:	7323      	strb	r3, [r4, #12]
   b9e60:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b9e64:	b2f6      	uxtb	r6, r6
   b9e66:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9e6a:	4555      	cmp	r5, sl
   b9e6c:	d00e      	beq.n	b9e8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9e6e:	f855 7b04 	ldr.w	r7, [r5], #4
   b9e72:	4659      	mov	r1, fp
   b9e74:	1d38      	adds	r0, r7, #4
   b9e76:	f7ff fdff 	bl	b9a78 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9e7a:	4286      	cmp	r6, r0
   b9e7c:	d3f5      	bcc.n	b9e6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b9e7e:	683b      	ldr	r3, [r7, #0]
   b9e80:	464a      	mov	r2, r9
   b9e82:	68db      	ldr	r3, [r3, #12]
   b9e84:	4641      	mov	r1, r8
   b9e86:	4638      	mov	r0, r7
   b9e88:	4798      	blx	r3
   b9e8a:	e7ee      	b.n	b9e6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b9e8c:	2300      	movs	r3, #0
   b9e8e:	7323      	strb	r3, [r4, #12]
   b9e90:	e7de      	b.n	b9e50 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b9e92:	bf00      	nop
   b9e94:	e000ed00 	.word	0xe000ed00

000b9e98 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9e98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b9e9c:	4b16      	ldr	r3, [pc, #88]	; (b9ef8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b9e9e:	685b      	ldr	r3, [r3, #4]
   b9ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9ea4:	4605      	mov	r5, r0
   b9ea6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9ea8:	bb1b      	cbnz	r3, b9ef2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b9eaa:	f7ff fe59 	bl	b9b60 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b9eae:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b9eb2:	4604      	mov	r4, r0
   b9eb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9eb6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9eb8:	f7ff fd2c 	bl	b9914 <_ZN14RecursiveMutex4lockEv.isra.0>
   b9ebc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9ec0:	2446      	movs	r4, #70	; 0x46
   b9ec2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9ec6:	45b0      	cmp	r8, r6
   b9ec8:	d109      	bne.n	b9ede <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b9eca:	a801      	add	r0, sp, #4
   b9ecc:	f7ff ff61 	bl	b9d92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b9ed0:	42a5      	cmp	r5, r4
   b9ed2:	bfb4      	ite	lt
   b9ed4:	2000      	movlt	r0, #0
   b9ed6:	2001      	movge	r0, #1
}
   b9ed8:	b002      	add	sp, #8
   b9eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b9ede:	f856 0b04 	ldr.w	r0, [r6], #4
   b9ee2:	4639      	mov	r1, r7
   b9ee4:	3004      	adds	r0, #4
   b9ee6:	f7ff fdc7 	bl	b9a78 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b9eea:	4284      	cmp	r4, r0
   b9eec:	bfa8      	it	ge
   b9eee:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b9ef0:	e7e9      	b.n	b9ec6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b9ef2:	2000      	movs	r0, #0
   b9ef4:	e7f0      	b.n	b9ed8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b9ef6:	bf00      	nop
   b9ef8:	e000ed00 	.word	0xe000ed00

000b9efc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9efe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b9f02:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9f04:	4604      	mov	r4, r0
   b9f06:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f08:	db0d      	blt.n	b9f26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b9f0a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b9f0c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9f0e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9f10:	dd04      	ble.n	b9f1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b9f12:	00b9      	lsls	r1, r7, #2
   b9f14:	f7fe fc9e 	bl	b8854 <realloc>
            if (!d) {
   b9f18:	b918      	cbnz	r0, b9f22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b9f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b9f1c:	f7fe fc92 	bl	b8844 <free>
        T* d = nullptr;
   b9f20:	2000      	movs	r0, #0
        data_ = d;
   b9f22:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9f24:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b9f26:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9f28:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9f2a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b9f2e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9f30:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b9f34:	1d08      	adds	r0, r1, #4
   b9f36:	f002 faef 	bl	bc518 <memmove>
    new(p) T(std::move(value));
   b9f3a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b9f3e:	6863      	ldr	r3, [r4, #4]
   b9f40:	3301      	adds	r3, #1
   b9f42:	6063      	str	r3, [r4, #4]
    return true;
   b9f44:	2001      	movs	r0, #1
   b9f46:	e7e8      	b.n	b9f1a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b9f48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b9f4a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9f4e:	4604      	mov	r4, r0
   b9f50:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9f52:	9301      	str	r3, [sp, #4]
   b9f54:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b9f56:	f7ff fcdd 	bl	b9914 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b9f5a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b9f5e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b9f62:	4293      	cmp	r3, r2
   b9f64:	4619      	mov	r1, r3
   b9f66:	d00b      	beq.n	b9f80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b9f68:	6809      	ldr	r1, [r1, #0]
   b9f6a:	42a9      	cmp	r1, r5
   b9f6c:	f103 0304 	add.w	r3, r3, #4
   b9f70:	d1f7      	bne.n	b9f62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b9f72:	a801      	add	r0, sp, #4
   b9f74:	f7ff ff0d 	bl	b9d92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9f78:	2500      	movs	r5, #0
}
   b9f7a:	4628      	mov	r0, r5
   b9f7c:	b003      	add	sp, #12
   b9f7e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b9f80:	4629      	mov	r1, r5
   b9f82:	4620      	mov	r0, r4
   b9f84:	f7ff ffba 	bl	b9efc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b9f88:	4605      	mov	r5, r0
   b9f8a:	2800      	cmp	r0, #0
   b9f8c:	d0f1      	beq.n	b9f72 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b9f8e:	6863      	ldr	r3, [r4, #4]
   b9f90:	2b01      	cmp	r3, #1
   b9f92:	d101      	bne.n	b9f98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b9f94:	f7ff fe00 	bl	b9b98 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9f98:	a801      	add	r0, sp, #4
   b9f9a:	f7ff fefa 	bl	b9d92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9f9e:	e7ec      	b.n	b9f7a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9fa0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9fa0:	b570      	push	{r4, r5, r6, lr}
   b9fa2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9fa4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9fa8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b9faa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9fae:	4282      	cmp	r2, r0
   b9fb0:	d00f      	beq.n	b9fd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9fb2:	4601      	mov	r1, r0
            if (*p == value) {
   b9fb4:	681d      	ldr	r5, [r3, #0]
   b9fb6:	f851 6b04 	ldr.w	r6, [r1], #4
   b9fba:	42ae      	cmp	r6, r5
   b9fbc:	d107      	bne.n	b9fce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9fbe:	1a52      	subs	r2, r2, r1
   b9fc0:	f002 faaa 	bl	bc518 <memmove>
    --size_;
   b9fc4:	6863      	ldr	r3, [r4, #4]
   b9fc6:	3b01      	subs	r3, #1
   b9fc8:	6063      	str	r3, [r4, #4]
    return true;
   b9fca:	2001      	movs	r0, #1
}
   b9fcc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9fce:	4608      	mov	r0, r1
   b9fd0:	e7ed      	b.n	b9fae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9fd2:	2000      	movs	r0, #0
   b9fd4:	e7fa      	b.n	b9fcc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b9fd6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9fd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b9fd8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9fdc:	4604      	mov	r4, r0
   b9fde:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9fe0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9fe2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9fe4:	f7ff fc96 	bl	b9914 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b9fe8:	a901      	add	r1, sp, #4
   b9fea:	4620      	mov	r0, r4
   b9fec:	f7ff ffd8 	bl	b9fa0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9ff0:	b118      	cbz	r0, b9ffa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9ff2:	6863      	ldr	r3, [r4, #4]
   b9ff4:	b90b      	cbnz	r3, b9ffa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b9ff6:	f7ff fddb 	bl	b9bb0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9ffa:	a803      	add	r0, sp, #12
   b9ffc:	f7ff fec9 	bl	b9d92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   ba000:	b004      	add	sp, #16
   ba002:	bd10      	pop	{r4, pc}

000ba004 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   ba004:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   ba006:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   ba00a:	2318      	movs	r3, #24
   ba00c:	4604      	mov	r4, r0
   ba00e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   ba012:	42ae      	cmp	r6, r5
   ba014:	d015      	beq.n	ba042 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   ba016:	f105 0110 	add.w	r1, r5, #16
   ba01a:	4620      	mov	r0, r4
   ba01c:	f7ff ffc0 	bl	b9fa0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   ba020:	6863      	ldr	r3, [r4, #4]
   ba022:	b90b      	cbnz	r3, ba028 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   ba024:	f7ff fdc4 	bl	b9bb0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   ba028:	69e0      	ldr	r0, [r4, #28]
   ba02a:	6929      	ldr	r1, [r5, #16]
   ba02c:	6803      	ldr	r3, [r0, #0]
   ba02e:	68db      	ldr	r3, [r3, #12]
   ba030:	4798      	blx	r3
        if (h.stream) {
   ba032:	6969      	ldr	r1, [r5, #20]
   ba034:	b119      	cbz	r1, ba03e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   ba036:	6a20      	ldr	r0, [r4, #32]
   ba038:	6803      	ldr	r3, [r0, #0]
   ba03a:	68db      	ldr	r3, [r3, #12]
   ba03c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   ba03e:	3518      	adds	r5, #24
   ba040:	e7e7      	b.n	ba012 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   ba042:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba046:	2618      	movs	r6, #24
   ba048:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba04c:	42ae      	cmp	r6, r5
   ba04e:	d004      	beq.n	ba05a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   ba050:	4628      	mov	r0, r5
   ba052:	f000 ff47 	bl	baee4 <_ZN6StringD1Ev>
   ba056:	3518      	adds	r5, #24
   ba058:	e7f8      	b.n	ba04c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   ba05a:	2300      	movs	r3, #0
   ba05c:	6163      	str	r3, [r4, #20]
}
   ba05e:	bd70      	pop	{r4, r5, r6, pc}

000ba060 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   ba060:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba062:	4604      	mov	r4, r0
    resetSystemCallbacks();
   ba064:	f7ff fda4 	bl	b9bb0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   ba068:	f104 0324 	add.w	r3, r4, #36	; 0x24
   ba06c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba06e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   ba070:	f7ff fc50 	bl	b9914 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   ba074:	4620      	mov	r0, r4
   ba076:	f7ff ffc5 	bl	ba004 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   ba07a:	a801      	add	r0, sp, #4
   ba07c:	f7ff fe89 	bl	b9d92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   ba080:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba082:	b108      	cbz	r0, ba088 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   ba084:	f7fe f89c 	bl	b81c0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   ba088:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   ba08c:	2618      	movs	r6, #24
   ba08e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   ba092:	42ae      	cmp	r6, r5
   ba094:	d004      	beq.n	ba0a0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   ba096:	4628      	mov	r0, r5
   ba098:	f000 ff24 	bl	baee4 <_ZN6StringD1Ev>
   ba09c:	3518      	adds	r5, #24
   ba09e:	e7f8      	b.n	ba092 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   ba0a0:	6920      	ldr	r0, [r4, #16]
   ba0a2:	f7fe fbcf 	bl	b8844 <free>
   ba0a6:	6820      	ldr	r0, [r4, #0]
   ba0a8:	f7fe fbcc 	bl	b8844 <free>
}
   ba0ac:	4620      	mov	r0, r4
   ba0ae:	b002      	add	sp, #8
   ba0b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba0b4 <__tcf_2>:
    static LogManager mgr;
   ba0b4:	4801      	ldr	r0, [pc, #4]	; (ba0bc <__tcf_2+0x8>)
   ba0b6:	f7ff bfd3 	b.w	ba060 <_ZN5spark10LogManagerD1Ev>
   ba0ba:	bf00      	nop
   ba0bc:	2003e658 	.word	0x2003e658

000ba0c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   ba0c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba0c4:	4604      	mov	r4, r0
   ba0c6:	460d      	mov	r5, r1
   ba0c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba0ca:	d915      	bls.n	ba0f8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   ba0cc:	4290      	cmp	r0, r2
   ba0ce:	d214      	bcs.n	ba0fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   ba0d0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   ba0d4:	1a75      	subs	r5, r6, r1
   ba0d6:	f1a1 0714 	sub.w	r7, r1, #20
   ba0da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba0dc:	42b7      	cmp	r7, r6
   ba0de:	d01a      	beq.n	ba116 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   ba0e0:	b11c      	cbz	r4, ba0ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   ba0e2:	4631      	mov	r1, r6
   ba0e4:	4620      	mov	r0, r4
   ba0e6:	f7ff fc78 	bl	b99da <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   ba0ea:	f106 0008 	add.w	r0, r6, #8
   ba0ee:	f7ff fdf9 	bl	b9ce4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   ba0f2:	3e14      	subs	r6, #20
   ba0f4:	3c14      	subs	r4, #20
   ba0f6:	e7f1      	b.n	ba0dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   ba0f8:	d00d      	beq.n	ba116 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   ba0fa:	42b5      	cmp	r5, r6
   ba0fc:	d00b      	beq.n	ba116 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   ba0fe:	b11c      	cbz	r4, ba108 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   ba100:	4629      	mov	r1, r5
   ba102:	4620      	mov	r0, r4
   ba104:	f7ff fc69 	bl	b99da <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   ba108:	f105 0008 	add.w	r0, r5, #8
   ba10c:	f7ff fdea 	bl	b9ce4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   ba110:	3514      	adds	r5, #20
   ba112:	3414      	adds	r4, #20
   ba114:	e7f1      	b.n	ba0fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   ba116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   ba118:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba11c:	4604      	mov	r4, r0
   ba11e:	460d      	mov	r5, r1
   ba120:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba122:	d914      	bls.n	ba14e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   ba124:	4290      	cmp	r0, r2
   ba126:	d213      	bcs.n	ba150 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   ba128:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   ba12c:	1a75      	subs	r5, r6, r1
   ba12e:	f1a1 0710 	sub.w	r7, r1, #16
   ba132:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba134:	42b7      	cmp	r7, r6
   ba136:	d018      	beq.n	ba16a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   ba138:	b11c      	cbz	r4, ba142 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   ba13a:	4631      	mov	r1, r6
   ba13c:	4620      	mov	r0, r4
   ba13e:	f000 ff4d 	bl	bafdc <_ZN6StringC1EOS_>
                end->~T();
   ba142:	4630      	mov	r0, r6
   ba144:	f000 fece 	bl	baee4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba148:	3e10      	subs	r6, #16
   ba14a:	3c10      	subs	r4, #16
   ba14c:	e7f2      	b.n	ba134 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   ba14e:	d00c      	beq.n	ba16a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   ba150:	42b5      	cmp	r5, r6
   ba152:	d00a      	beq.n	ba16a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   ba154:	b11c      	cbz	r4, ba15e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   ba156:	4629      	mov	r1, r5
   ba158:	4620      	mov	r0, r4
   ba15a:	f000 ff3f 	bl	bafdc <_ZN6StringC1EOS_>
                p->~T();
   ba15e:	4628      	mov	r0, r5
   ba160:	f000 fec0 	bl	baee4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba164:	3510      	adds	r5, #16
   ba166:	3410      	adds	r4, #16
   ba168:	e7f2      	b.n	ba150 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   ba16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba16c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   ba16c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   ba16e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   ba170:	4605      	mov	r5, r0
        if (n > 0) {
   ba172:	dd11      	ble.n	ba198 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   ba174:	0130      	lsls	r0, r6, #4
   ba176:	f7fe fb5d 	bl	b8834 <malloc>
            if (!d) {
   ba17a:	4604      	mov	r4, r0
   ba17c:	b158      	cbz	r0, ba196 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   ba17e:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba182:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   ba186:	f7ff ffc7 	bl	ba118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   ba18a:	6828      	ldr	r0, [r5, #0]
   ba18c:	f7fe fb5a 	bl	b8844 <free>
        data_ = d;
   ba190:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba192:	60ae      	str	r6, [r5, #8]
        return true;
   ba194:	2001      	movs	r0, #1
    }
   ba196:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   ba198:	2400      	movs	r4, #0
   ba19a:	e7f6      	b.n	ba18a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000ba19c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba1a0:	4690      	mov	r8, r2
   ba1a2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   ba1a4:	2300      	movs	r3, #0
   ba1a6:	9103      	str	r1, [sp, #12]
    return size_;
   ba1a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   ba1ac:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba1ae:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   ba1b0:	4299      	cmp	r1, r3
        capacity_(0) {
   ba1b2:	e9c0 3300 	strd	r3, r3, [r0]
   ba1b6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   ba1ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
   ba1be:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   ba1c2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   ba1c4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   ba1c6:	dc23      	bgt.n	ba210 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   ba1c8:	e9d8 5700 	ldrd	r5, r7, [r8]
   ba1cc:	2314      	movs	r3, #20
   ba1ce:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   ba1d2:	42af      	cmp	r7, r5
   ba1d4:	d03b      	beq.n	ba24e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   ba1d6:	4629      	mov	r1, r5
   ba1d8:	a80b      	add	r0, sp, #44	; 0x2c
   ba1da:	f000 feff 	bl	bafdc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   ba1de:	a90b      	add	r1, sp, #44	; 0x2c
   ba1e0:	a80f      	add	r0, sp, #60	; 0x3c
   ba1e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   ba1e4:	f000 fefa 	bl	bafdc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba1e8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   ba1ec:	4299      	cmp	r1, r3
   ba1ee:	da1b      	bge.n	ba228 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   ba1f0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   ba1f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   ba1f4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   ba1f8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   ba1fc:	4631      	mov	r1, r6
   ba1fe:	f106 0010 	add.w	r0, r6, #16
   ba202:	f7ff ff89 	bl	ba118 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   ba206:	b9ee      	cbnz	r6, ba244 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   ba208:	9b09      	ldr	r3, [sp, #36]	; 0x24
   ba20a:	3301      	adds	r3, #1
   ba20c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   ba20e:	e011      	b.n	ba234 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   ba210:	a808      	add	r0, sp, #32
   ba212:	f7ff ffab 	bl	ba16c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba216:	2800      	cmp	r0, #0
   ba218:	d1d6      	bne.n	ba1c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   ba21a:	a808      	add	r0, sp, #32
   ba21c:	f7fe fbad 	bl	b897a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   ba220:	4620      	mov	r0, r4
   ba222:	b015      	add	sp, #84	; 0x54
   ba224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba228:	3101      	adds	r1, #1
   ba22a:	a808      	add	r0, sp, #32
   ba22c:	f7ff ff9e 	bl	ba16c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   ba230:	2800      	cmp	r0, #0
   ba232:	d1dd      	bne.n	ba1f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   ba234:	a80f      	add	r0, sp, #60	; 0x3c
   ba236:	f000 fe55 	bl	baee4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   ba23a:	a80b      	add	r0, sp, #44	; 0x2c
   ba23c:	f000 fe52 	bl	baee4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   ba240:	3514      	adds	r5, #20
   ba242:	e7c6      	b.n	ba1d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   ba244:	a90f      	add	r1, sp, #60	; 0x3c
   ba246:	4630      	mov	r0, r6
   ba248:	f000 fec8 	bl	bafdc <_ZN6StringC1EOS_>
   ba24c:	e7dc      	b.n	ba208 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   ba24e:	2600      	movs	r6, #0
   ba250:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   ba254:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   ba256:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   ba25a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   ba25e:	429e      	cmp	r6, r3
   ba260:	da7c      	bge.n	ba35c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   ba262:	0133      	lsls	r3, r6, #4
   ba264:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   ba266:	9306      	str	r3, [sp, #24]
        if (!category) {
   ba268:	b90b      	cbnz	r3, ba26e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   ba26a:	3601      	adds	r6, #1
   ba26c:	e7f5      	b.n	ba25a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   ba26e:	2300      	movs	r3, #0
   ba270:	9307      	str	r3, [sp, #28]
   ba272:	fb09 f306 	mul.w	r3, r9, r6
   ba276:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   ba278:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   ba27a:	a907      	add	r1, sp, #28
   ba27c:	a806      	add	r0, sp, #24
   ba27e:	f7ff fb22 	bl	b98c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   ba282:	4682      	mov	sl, r0
   ba284:	2800      	cmp	r0, #0
   ba286:	d0f0      	beq.n	ba26a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   ba288:	f04f 0300 	mov.w	r3, #0
   ba28c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba290:	4601      	mov	r1, r0
   ba292:	9a07      	ldr	r2, [sp, #28]
   ba294:	f10d 0317 	add.w	r3, sp, #23
   ba298:	4628      	mov	r0, r5
   ba29a:	f7ff fbb1 	bl	b9a00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba29e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   ba2a2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba2a4:	2f00      	cmp	r7, #0
   ba2a6:	d14a      	bne.n	ba33e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   ba2a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   ba2ac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   ba2b0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   ba2b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   ba2b8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   ba2bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   ba2c0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba2c2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   ba2c6:	4293      	cmp	r3, r2
   ba2c8:	db17      	blt.n	ba2fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   ba2ca:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   ba2ce:	f1ba 0f00 	cmp.w	sl, #0
   ba2d2:	dd30      	ble.n	ba336 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   ba2d4:	fb09 f00a 	mul.w	r0, r9, sl
   ba2d8:	f7fe faac 	bl	b8834 <malloc>
            if (!d) {
   ba2dc:	4683      	mov	fp, r0
   ba2de:	b360      	cbz	r0, ba33a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   ba2e0:	e9d5 1200 	ldrd	r1, r2, [r5]
   ba2e4:	fb09 1202 	mla	r2, r9, r2, r1
   ba2e8:	f7ff feea 	bl	ba0c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   ba2ec:	6828      	ldr	r0, [r5, #0]
   ba2ee:	f7fe faa9 	bl	b8844 <free>
        data_ = d;
   ba2f2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   ba2f6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   ba2fa:	682b      	ldr	r3, [r5, #0]
   ba2fc:	9a01      	ldr	r2, [sp, #4]
   ba2fe:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba302:	686a      	ldr	r2, [r5, #4]
   ba304:	4651      	mov	r1, sl
   ba306:	fb09 3202 	mla	r2, r9, r2, r3
   ba30a:	f10a 0014 	add.w	r0, sl, #20
   ba30e:	f7ff fed7 	bl	ba0c0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba312:	f1ba 0f00 	cmp.w	sl, #0
   ba316:	d003      	beq.n	ba320 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba318:	a90f      	add	r1, sp, #60	; 0x3c
   ba31a:	4650      	mov	r0, sl
   ba31c:	f7ff fb5d 	bl	b99da <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba320:	686b      	ldr	r3, [r5, #4]
   ba322:	3301      	adds	r3, #1
   ba324:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba326:	a811      	add	r0, sp, #68	; 0x44
   ba328:	f7ff fcdc 	bl	b9ce4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba32c:	b13f      	cbz	r7, ba33e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba32e:	a80b      	add	r0, sp, #44	; 0x2c
   ba330:	f7ff fcd8 	bl	b9ce4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba334:	e771      	b.n	ba21a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba336:	46bb      	mov	fp, r7
   ba338:	e7d8      	b.n	ba2ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba33a:	2701      	movs	r7, #1
   ba33c:	e7f3      	b.n	ba326 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba33e:	9b01      	ldr	r3, [sp, #4]
   ba340:	682d      	ldr	r5, [r5, #0]
   ba342:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba346:	9b06      	ldr	r3, [sp, #24]
   ba348:	781b      	ldrb	r3, [r3, #0]
   ba34a:	b92b      	cbnz	r3, ba358 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba34c:	f8d8 3000 	ldr.w	r3, [r8]
   ba350:	9a02      	ldr	r2, [sp, #8]
   ba352:	4413      	add	r3, r2
   ba354:	7c1b      	ldrb	r3, [r3, #16]
   ba356:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba358:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba35a:	e78e      	b.n	ba27a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba35c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba35e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba360:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba362:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba364:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba366:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba36a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba36c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba36e:	60a2      	str	r2, [r4, #8]
   ba370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba372:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba374:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba376:	60e2      	str	r2, [r4, #12]
   ba378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba37a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba37c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba37e:	6122      	str	r2, [r4, #16]
   ba380:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba382:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba384:	9b03      	ldr	r3, [sp, #12]
   ba386:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba388:	6162      	str	r2, [r4, #20]
   ba38a:	7623      	strb	r3, [r4, #24]
   ba38c:	e7cf      	b.n	ba32e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba390 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba390:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba392:	4604      	mov	r4, r0
   ba394:	b087      	sub	sp, #28
   ba396:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba398:	4626      	mov	r6, r4
        stream_(&stream) {
   ba39a:	4619      	mov	r1, r3
   ba39c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba39e:	4617      	mov	r7, r2
        stream_(&stream) {
   ba3a0:	f7fb fa91 	bl	b58c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba3a4:	4b0b      	ldr	r3, [pc, #44]	; (ba3d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba3a6:	f846 3b04 	str.w	r3, [r6], #4
   ba3aa:	4669      	mov	r1, sp
   ba3ac:	a803      	add	r0, sp, #12
   ba3ae:	f7fb fa8a 	bl	b58c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba3b2:	aa03      	add	r2, sp, #12
   ba3b4:	4639      	mov	r1, r7
   ba3b6:	4630      	mov	r0, r6
   ba3b8:	f7ff fef0 	bl	ba19c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba3bc:	a803      	add	r0, sp, #12
   ba3be:	f7fb fa41 	bl	b5844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba3c2:	4668      	mov	r0, sp
   ba3c4:	f7fb fa3e 	bl	b5844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba3c8:	4b03      	ldr	r3, [pc, #12]	; (ba3d8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba3ca:	6023      	str	r3, [r4, #0]
}
   ba3cc:	4620      	mov	r0, r4
        stream_(&stream) {
   ba3ce:	6225      	str	r5, [r4, #32]
}
   ba3d0:	b007      	add	sp, #28
   ba3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba3d4:	000bd048 	.word	0x000bd048
   ba3d8:	000bd858 	.word	0x000bd858

000ba3dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba3de:	460f      	mov	r7, r1
   ba3e0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba3e2:	491d      	ldr	r1, [pc, #116]	; (ba458 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba3e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba3e6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba3e8:	4616      	mov	r6, r2
   ba3ea:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba3ec:	f002 f939 	bl	bc662 <strcmp>
   ba3f0:	b9c0      	cbnz	r0, ba424 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba3f2:	b1a4      	cbz	r4, ba41e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba3f4:	4629      	mov	r1, r5
   ba3f6:	a801      	add	r0, sp, #4
   ba3f8:	f7ff fcbc 	bl	b9d74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba3fc:	4917      	ldr	r1, [pc, #92]	; (ba45c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba3fe:	2024      	movs	r0, #36	; 0x24
   ba400:	f001 fb6e 	bl	bbae0 <_ZnwjRKSt9nothrow_t>
   ba404:	4605      	mov	r5, r0
   ba406:	b130      	cbz	r0, ba416 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba408:	ab01      	add	r3, sp, #4
   ba40a:	4632      	mov	r2, r6
   ba40c:	4621      	mov	r1, r4
   ba40e:	f7ff ffbf 	bl	ba390 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba412:	4b13      	ldr	r3, [pc, #76]	; (ba460 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba414:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba416:	a801      	add	r0, sp, #4
   ba418:	f7fb fa14 	bl	b5844 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba41c:	462c      	mov	r4, r5
}
   ba41e:	4620      	mov	r0, r4
   ba420:	b005      	add	sp, #20
   ba422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba424:	490f      	ldr	r1, [pc, #60]	; (ba464 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba426:	4638      	mov	r0, r7
   ba428:	f002 f91b 	bl	bc662 <strcmp>
   ba42c:	b990      	cbnz	r0, ba454 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba42e:	2c00      	cmp	r4, #0
   ba430:	d0f5      	beq.n	ba41e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba432:	4629      	mov	r1, r5
   ba434:	a801      	add	r0, sp, #4
   ba436:	f7ff fc9d 	bl	b9d74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba43a:	4908      	ldr	r1, [pc, #32]	; (ba45c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba43c:	2024      	movs	r0, #36	; 0x24
   ba43e:	f001 fb4f 	bl	bbae0 <_ZnwjRKSt9nothrow_t>
   ba442:	4605      	mov	r5, r0
   ba444:	2800      	cmp	r0, #0
   ba446:	d0e6      	beq.n	ba416 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba448:	ab01      	add	r3, sp, #4
   ba44a:	4632      	mov	r2, r6
   ba44c:	4621      	mov	r1, r4
   ba44e:	f7ff ff9f 	bl	ba390 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba452:	e7e0      	b.n	ba416 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba454:	2400      	movs	r4, #0
   ba456:	e7e2      	b.n	ba41e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba458:	000bd7de 	.word	0x000bd7de
   ba45c:	000bd9b8 	.word	0x000bd9b8
   ba460:	000bd870 	.word	0x000bd870
   ba464:	000bd7e2 	.word	0x000bd7e2

000ba468 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba468:	4b01      	ldr	r3, [pc, #4]	; (ba470 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba46a:	4a02      	ldr	r2, [pc, #8]	; (ba474 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba46c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba46e:	4770      	bx	lr
   ba470:	2003e654 	.word	0x2003e654
   ba474:	000bd7f3 	.word	0x000bd7f3

000ba478 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba47c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba47e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba482:	4604      	mov	r4, r0
   ba484:	460e      	mov	r6, r1
   ba486:	4617      	mov	r7, r2
   ba488:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba48a:	f001 f907 	bl	bb69c <_Z16_fetch_usbserialv>
   ba48e:	4581      	cmp	r9, r0
   ba490:	d04c      	beq.n	ba52c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba492:	792b      	ldrb	r3, [r5, #4]
   ba494:	0719      	lsls	r1, r3, #28
   ba496:	d504      	bpl.n	ba4a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba498:	696a      	ldr	r2, [r5, #20]
   ba49a:	4954      	ldr	r1, [pc, #336]	; (ba5ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba49c:	4620      	mov	r0, r4
   ba49e:	f7ff fa8d 	bl	b99bc <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba4a2:	f1b8 0f00 	cmp.w	r8, #0
   ba4a6:	d00d      	beq.n	ba4c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba4a8:	215b      	movs	r1, #91	; 0x5b
   ba4aa:	4620      	mov	r0, r4
   ba4ac:	f7ff fa7a 	bl	b99a4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba4b0:	4641      	mov	r1, r8
   ba4b2:	4620      	mov	r0, r4
   ba4b4:	f7ff fa67 	bl	b9986 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba4b8:	6823      	ldr	r3, [r4, #0]
   ba4ba:	494d      	ldr	r1, [pc, #308]	; (ba5f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba4bc:	68db      	ldr	r3, [r3, #12]
   ba4be:	2202      	movs	r2, #2
   ba4c0:	4620      	mov	r0, r4
   ba4c2:	4798      	blx	r3
    if (attr.has_file) {
   ba4c4:	792b      	ldrb	r3, [r5, #4]
   ba4c6:	07da      	lsls	r2, r3, #31
   ba4c8:	d523      	bpl.n	ba512 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba4ca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba4ce:	212f      	movs	r1, #47	; 0x2f
   ba4d0:	4640      	mov	r0, r8
   ba4d2:	f002 f925 	bl	bc720 <strrchr>
    if (s1) {
   ba4d6:	b108      	cbz	r0, ba4dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba4d8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba4dc:	4641      	mov	r1, r8
   ba4de:	4620      	mov	r0, r4
   ba4e0:	f7ff fa51 	bl	b9986 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba4e4:	792b      	ldrb	r3, [r5, #4]
   ba4e6:	079b      	lsls	r3, r3, #30
   ba4e8:	d508      	bpl.n	ba4fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba4ea:	213a      	movs	r1, #58	; 0x3a
   ba4ec:	4620      	mov	r0, r4
   ba4ee:	f7ff fa59 	bl	b99a4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba4f2:	68ea      	ldr	r2, [r5, #12]
   ba4f4:	493f      	ldr	r1, [pc, #252]	; (ba5f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba4f6:	4620      	mov	r0, r4
   ba4f8:	f7ff fa60 	bl	b99bc <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba4fc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba4fe:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba500:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba504:	68db      	ldr	r3, [r3, #12]
   ba506:	bf14      	ite	ne
   ba508:	493b      	ldrne	r1, [pc, #236]	; (ba5f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba50a:	493c      	ldreq	r1, [pc, #240]	; (ba5fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba50c:	2202      	movs	r2, #2
            write(": ", 2);
   ba50e:	4620      	mov	r0, r4
   ba510:	4798      	blx	r3
    if (attr.has_function) {
   ba512:	792b      	ldrb	r3, [r5, #4]
   ba514:	0758      	lsls	r0, r3, #29
   ba516:	d51d      	bpl.n	ba554 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba518:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba51a:	460b      	mov	r3, r1
   ba51c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba51e:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba522:	b160      	cbz	r0, ba53e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba524:	2820      	cmp	r0, #32
   ba526:	d108      	bne.n	ba53a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba528:	4619      	mov	r1, r3
   ba52a:	e7f7      	b.n	ba51c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba52c:	4834      	ldr	r0, [pc, #208]	; (ba600 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba52e:	f000 f966 	bl	ba7fe <_ZN5spark12NetworkClass9listeningEv>
   ba532:	2800      	cmp	r0, #0
   ba534:	d0ad      	beq.n	ba492 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba53a:	2828      	cmp	r0, #40	; 0x28
   ba53c:	d1ee      	bne.n	ba51c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba53e:	6823      	ldr	r3, [r4, #0]
   ba540:	1a52      	subs	r2, r2, r1
   ba542:	68db      	ldr	r3, [r3, #12]
   ba544:	4620      	mov	r0, r4
   ba546:	4798      	blx	r3
        write("(): ", 4);
   ba548:	6823      	ldr	r3, [r4, #0]
   ba54a:	492e      	ldr	r1, [pc, #184]	; (ba604 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba54c:	68db      	ldr	r3, [r3, #12]
   ba54e:	2204      	movs	r2, #4
   ba550:	4620      	mov	r0, r4
   ba552:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba554:	2100      	movs	r1, #0
   ba556:	4638      	mov	r0, r7
   ba558:	f7fe f852 	bl	b8600 <log_level_name>
   ba55c:	4601      	mov	r1, r0
    write(s);
   ba55e:	4620      	mov	r0, r4
   ba560:	f7ff fa11 	bl	b9986 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba564:	6823      	ldr	r3, [r4, #0]
   ba566:	4925      	ldr	r1, [pc, #148]	; (ba5fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba568:	68db      	ldr	r3, [r3, #12]
   ba56a:	2202      	movs	r2, #2
   ba56c:	4620      	mov	r0, r4
   ba56e:	4798      	blx	r3
    if (msg) {
   ba570:	b11e      	cbz	r6, ba57a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba572:	4631      	mov	r1, r6
   ba574:	4620      	mov	r0, r4
   ba576:	f7ff fa06 	bl	b9986 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba57a:	792b      	ldrb	r3, [r5, #4]
   ba57c:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba580:	d02c      	beq.n	ba5dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba582:	6823      	ldr	r3, [r4, #0]
   ba584:	4920      	ldr	r1, [pc, #128]	; (ba608 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba586:	68db      	ldr	r3, [r3, #12]
   ba588:	2202      	movs	r2, #2
   ba58a:	4620      	mov	r0, r4
   ba58c:	4798      	blx	r3
        if (attr.has_code) {
   ba58e:	792b      	ldrb	r3, [r5, #4]
   ba590:	06d9      	lsls	r1, r3, #27
   ba592:	d50a      	bpl.n	ba5aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba594:	6823      	ldr	r3, [r4, #0]
   ba596:	491d      	ldr	r1, [pc, #116]	; (ba60c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba598:	68db      	ldr	r3, [r3, #12]
   ba59a:	2207      	movs	r2, #7
   ba59c:	4620      	mov	r0, r4
   ba59e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba5a0:	69aa      	ldr	r2, [r5, #24]
   ba5a2:	491b      	ldr	r1, [pc, #108]	; (ba610 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba5a4:	4620      	mov	r0, r4
   ba5a6:	f7ff fa09 	bl	b99bc <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba5aa:	792b      	ldrb	r3, [r5, #4]
   ba5ac:	069a      	lsls	r2, r3, #26
   ba5ae:	d511      	bpl.n	ba5d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba5b0:	06db      	lsls	r3, r3, #27
   ba5b2:	d505      	bpl.n	ba5c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba5b4:	6823      	ldr	r3, [r4, #0]
   ba5b6:	4910      	ldr	r1, [pc, #64]	; (ba5f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba5b8:	68db      	ldr	r3, [r3, #12]
   ba5ba:	2202      	movs	r2, #2
   ba5bc:	4620      	mov	r0, r4
   ba5be:	4798      	blx	r3
            write("details = ", 10);
   ba5c0:	6823      	ldr	r3, [r4, #0]
   ba5c2:	4914      	ldr	r1, [pc, #80]	; (ba614 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba5c4:	68db      	ldr	r3, [r3, #12]
   ba5c6:	4620      	mov	r0, r4
   ba5c8:	220a      	movs	r2, #10
   ba5ca:	4798      	blx	r3
            write(attr.details);
   ba5cc:	69e9      	ldr	r1, [r5, #28]
   ba5ce:	4620      	mov	r0, r4
   ba5d0:	f7ff f9d9 	bl	b9986 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba5d4:	215d      	movs	r1, #93	; 0x5d
   ba5d6:	4620      	mov	r0, r4
   ba5d8:	f7ff f9e4 	bl	b99a4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba5dc:	6823      	ldr	r3, [r4, #0]
   ba5de:	490e      	ldr	r1, [pc, #56]	; (ba618 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba5e0:	68db      	ldr	r3, [r3, #12]
   ba5e2:	4620      	mov	r0, r4
   ba5e4:	2202      	movs	r2, #2
}
   ba5e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba5ea:	4718      	bx	r3
   ba5ec:	000bd7f7 	.word	0x000bd7f7
   ba5f0:	000bd7fe 	.word	0x000bd7fe
   ba5f4:	000bd223 	.word	0x000bd223
   ba5f8:	000bd801 	.word	0x000bd801
   ba5fc:	000bd806 	.word	0x000bd806
   ba600:	2003e680 	.word	0x2003e680
   ba604:	000bd804 	.word	0x000bd804
   ba608:	000bd809 	.word	0x000bd809
   ba60c:	000bd80c 	.word	0x000bd80c
   ba610:	000bd140 	.word	0x000bd140
   ba614:	000bd814 	.word	0x000bd814
   ba618:	000bd81f 	.word	0x000bd81f

000ba61c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba620:	b085      	sub	sp, #20
    return stream_;
   ba622:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba626:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba628:	4605      	mov	r5, r0
   ba62a:	460f      	mov	r7, r1
   ba62c:	4690      	mov	r8, r2
   ba62e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba630:	f001 f834 	bl	bb69c <_Z16_fetch_usbserialv>
   ba634:	4581      	cmp	r9, r0
   ba636:	d105      	bne.n	ba644 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba638:	4849      	ldr	r0, [pc, #292]	; (ba760 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba63a:	f000 f8e0 	bl	ba7fe <_ZN5spark12NetworkClass9listeningEv>
   ba63e:	2800      	cmp	r0, #0
   ba640:	f040 808a 	bne.w	ba758 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba644:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba646:	4a47      	ldr	r2, [pc, #284]	; (ba764 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba648:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba64a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba64e:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba650:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba652:	f88d 9008 	strb.w	r9, [sp, #8]
   ba656:	f7ff f878 	bl	b974a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba65a:	4649      	mov	r1, r9
   ba65c:	4640      	mov	r0, r8
   ba65e:	f7fd ffcf 	bl	b8600 <log_level_name>
    json.name("l", 1).value(s);
   ba662:	4941      	ldr	r1, [pc, #260]	; (ba768 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba664:	4680      	mov	r8, r0
   ba666:	2201      	movs	r2, #1
   ba668:	a801      	add	r0, sp, #4
   ba66a:	f7ff f8fd 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba66e:	4641      	mov	r1, r8
   ba670:	f7ff f97b 	bl	b996a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba674:	b13f      	cbz	r7, ba686 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba676:	493d      	ldr	r1, [pc, #244]	; (ba76c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba678:	2201      	movs	r2, #1
   ba67a:	a801      	add	r0, sp, #4
   ba67c:	f7ff f8f4 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba680:	4639      	mov	r1, r7
   ba682:	f7ff f972 	bl	b996a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba686:	b13e      	cbz	r6, ba698 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba688:	4939      	ldr	r1, [pc, #228]	; (ba770 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba68a:	2201      	movs	r2, #1
   ba68c:	a801      	add	r0, sp, #4
   ba68e:	f7ff f8eb 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba692:	4631      	mov	r1, r6
   ba694:	f7ff f969 	bl	b996a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba698:	7923      	ldrb	r3, [r4, #4]
   ba69a:	07df      	lsls	r7, r3, #31
   ba69c:	d50e      	bpl.n	ba6bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba69e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba6a0:	212f      	movs	r1, #47	; 0x2f
   ba6a2:	4630      	mov	r0, r6
   ba6a4:	f002 f83c 	bl	bc720 <strrchr>
    if (s1) {
   ba6a8:	b100      	cbz	r0, ba6ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba6aa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba6ac:	4931      	ldr	r1, [pc, #196]	; (ba774 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba6ae:	2201      	movs	r2, #1
   ba6b0:	a801      	add	r0, sp, #4
   ba6b2:	f7ff f8d9 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba6b6:	4631      	mov	r1, r6
   ba6b8:	f7ff f957 	bl	b996a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba6bc:	7923      	ldrb	r3, [r4, #4]
   ba6be:	079e      	lsls	r6, r3, #30
   ba6c0:	d507      	bpl.n	ba6d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba6c2:	492d      	ldr	r1, [pc, #180]	; (ba778 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba6c4:	2202      	movs	r2, #2
   ba6c6:	a801      	add	r0, sp, #4
   ba6c8:	f7ff f8ce 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba6cc:	68e1      	ldr	r1, [r4, #12]
   ba6ce:	f7ff f849 	bl	b9764 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba6d2:	7923      	ldrb	r3, [r4, #4]
   ba6d4:	0758      	lsls	r0, r3, #29
   ba6d6:	d514      	bpl.n	ba702 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba6d8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba6da:	4633      	mov	r3, r6
   ba6dc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba6de:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba6e2:	b12a      	cbz	r2, ba6f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba6e4:	2a20      	cmp	r2, #32
   ba6e6:	d101      	bne.n	ba6ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba6e8:	461e      	mov	r6, r3
   ba6ea:	e7f7      	b.n	ba6dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba6ec:	2a28      	cmp	r2, #40	; 0x28
   ba6ee:	d1f5      	bne.n	ba6dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba6f0:	4922      	ldr	r1, [pc, #136]	; (ba77c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba6f2:	2202      	movs	r2, #2
   ba6f4:	a801      	add	r0, sp, #4
   ba6f6:	f7ff f8b7 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba6fa:	1bba      	subs	r2, r7, r6
   ba6fc:	4631      	mov	r1, r6
   ba6fe:	f7ff f8c3 	bl	b9888 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba702:	7923      	ldrb	r3, [r4, #4]
   ba704:	0719      	lsls	r1, r3, #28
   ba706:	d507      	bpl.n	ba718 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba708:	491d      	ldr	r1, [pc, #116]	; (ba780 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba70a:	2201      	movs	r2, #1
   ba70c:	a801      	add	r0, sp, #4
   ba70e:	f7ff f8ab 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba712:	6961      	ldr	r1, [r4, #20]
   ba714:	f7ff f838 	bl	b9788 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba718:	7923      	ldrb	r3, [r4, #4]
   ba71a:	06da      	lsls	r2, r3, #27
   ba71c:	d508      	bpl.n	ba730 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba71e:	2204      	movs	r2, #4
   ba720:	4918      	ldr	r1, [pc, #96]	; (ba784 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba722:	eb0d 0002 	add.w	r0, sp, r2
   ba726:	f7ff f89f 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba72a:	69a1      	ldr	r1, [r4, #24]
   ba72c:	f7ff f81a 	bl	b9764 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba730:	7923      	ldrb	r3, [r4, #4]
   ba732:	069b      	lsls	r3, r3, #26
   ba734:	d507      	bpl.n	ba746 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba736:	4914      	ldr	r1, [pc, #80]	; (ba788 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba738:	2206      	movs	r2, #6
   ba73a:	a801      	add	r0, sp, #4
   ba73c:	f7ff f894 	bl	b9868 <_ZN5spark10JSONWriter4nameEPKcj>
   ba740:	69e1      	ldr	r1, [r4, #28]
   ba742:	f7ff f912 	bl	b996a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba746:	a801      	add	r0, sp, #4
   ba748:	f7fe ffe9 	bl	b971e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba74c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba74e:	490f      	ldr	r1, [pc, #60]	; (ba78c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba750:	6803      	ldr	r3, [r0, #0]
   ba752:	2202      	movs	r2, #2
   ba754:	68db      	ldr	r3, [r3, #12]
   ba756:	4798      	blx	r3
}
   ba758:	b005      	add	sp, #20
   ba75a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba75e:	bf00      	nop
   ba760:	2003e680 	.word	0x2003e680
   ba764:	000bd840 	.word	0x000bd840
   ba768:	000bd7d4 	.word	0x000bd7d4
   ba76c:	000bd822 	.word	0x000bd822
   ba770:	000bdad9 	.word	0x000bdad9
   ba774:	000bc9b6 	.word	0x000bc9b6
   ba778:	000bd824 	.word	0x000bd824
   ba77c:	000bd827 	.word	0x000bd827
   ba780:	000bccf3 	.word	0x000bccf3
   ba784:	000bd82a 	.word	0x000bd82a
   ba788:	000bd82f 	.word	0x000bd82f
   ba78c:	000bd81f 	.word	0x000bd81f

000ba790 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba790:	2300      	movs	r3, #0
   ba792:	6840      	ldr	r0, [r0, #4]
   ba794:	461a      	mov	r2, r3
   ba796:	f7fd bfed 	b.w	b8774 <network_connect>

000ba79a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba79a:	6840      	ldr	r0, [r0, #4]
   ba79c:	2200      	movs	r2, #0
   ba79e:	2102      	movs	r1, #2
   ba7a0:	f7fd bff8 	b.w	b8794 <network_disconnect>

000ba7a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba7a4:	2200      	movs	r2, #0
   ba7a6:	6840      	ldr	r0, [r0, #4]
   ba7a8:	4611      	mov	r1, r2
   ba7aa:	f7fd bfeb 	b.w	b8784 <network_connecting>

000ba7ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba7ae:	2200      	movs	r2, #0
   ba7b0:	6840      	ldr	r0, [r0, #4]
   ba7b2:	4611      	mov	r1, r2
   ba7b4:	f7fd bff6 	b.w	b87a4 <network_ready>

000ba7b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba7b8:	2300      	movs	r3, #0
   ba7ba:	6840      	ldr	r0, [r0, #4]
   ba7bc:	461a      	mov	r2, r3
   ba7be:	4619      	mov	r1, r3
   ba7c0:	f7fd bff8 	b.w	b87b4 <network_on>

000ba7c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba7c4:	2300      	movs	r3, #0
   ba7c6:	6840      	ldr	r0, [r0, #4]
   ba7c8:	461a      	mov	r2, r3
   ba7ca:	4619      	mov	r1, r3
   ba7cc:	f7fd bffa 	b.w	b87c4 <network_off>

000ba7d0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba7d0:	6840      	ldr	r0, [r0, #4]
   ba7d2:	2100      	movs	r1, #0
   ba7d4:	f7fe b81e 	b.w	b8814 <network_is_on>

000ba7d8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba7d8:	6840      	ldr	r0, [r0, #4]
   ba7da:	2100      	movs	r1, #0
   ba7dc:	f7fe b822 	b.w	b8824 <network_is_off>

000ba7e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba7e0:	6840      	ldr	r0, [r0, #4]
   ba7e2:	2200      	movs	r2, #0
   ba7e4:	f081 0101 	eor.w	r1, r1, #1
   ba7e8:	f7fd bff4 	b.w	b87d4 <network_listen>

000ba7ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba7ec:	6840      	ldr	r0, [r0, #4]
   ba7ee:	2200      	movs	r2, #0
   ba7f0:	f7fe b800 	b.w	b87f4 <network_set_listen_timeout>

000ba7f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba7f4:	2200      	movs	r2, #0
   ba7f6:	6840      	ldr	r0, [r0, #4]
   ba7f8:	4611      	mov	r1, r2
   ba7fa:	f7fe b803 	b.w	b8804 <network_get_listen_timeout>

000ba7fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba7fe:	2200      	movs	r2, #0
   ba800:	6840      	ldr	r0, [r0, #4]
   ba802:	4611      	mov	r1, r2
   ba804:	f7fd bfee 	b.w	b87e4 <network_listening>

000ba808 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba80c:	b095      	sub	sp, #84	; 0x54
   ba80e:	4614      	mov	r4, r2
   ba810:	460d      	mov	r5, r1
   ba812:	4607      	mov	r7, r0
    IPAddress addr;
   ba814:	f7fe fe32 	bl	b947c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba818:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba81a:	221c      	movs	r2, #28
   ba81c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba81e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba820:	f001 fe94 	bl	bc54c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba824:	2340      	movs	r3, #64	; 0x40
   ba826:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba828:	4620      	mov	r0, r4
   ba82a:	466b      	mov	r3, sp
   ba82c:	aa0c      	add	r2, sp, #48	; 0x30
   ba82e:	2100      	movs	r1, #0
   ba830:	f7fd fde6 	bl	b8400 <netdb_getaddrinfo>
    if (!r) {
   ba834:	4604      	mov	r4, r0
   ba836:	2800      	cmp	r0, #0
   ba838:	d14b      	bne.n	ba8d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba83a:	4602      	mov	r2, r0
   ba83c:	2101      	movs	r1, #1
   ba83e:	6868      	ldr	r0, [r5, #4]
   ba840:	f7fd ffb0 	bl	b87a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba844:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba846:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba848:	4622      	mov	r2, r4
   ba84a:	6868      	ldr	r0, [r5, #4]
   ba84c:	f7fd ffaa 	bl	b87a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba850:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba852:	4681      	mov	r9, r0
        bool ok = false;
   ba854:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba856:	2e00      	cmp	r6, #0
   ba858:	d03b      	beq.n	ba8d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba85a:	2900      	cmp	r1, #0
   ba85c:	d139      	bne.n	ba8d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba85e:	6873      	ldr	r3, [r6, #4]
   ba860:	2b02      	cmp	r3, #2
   ba862:	d003      	beq.n	ba86c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba864:	2b0a      	cmp	r3, #10
   ba866:	d011      	beq.n	ba88c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba868:	69f6      	ldr	r6, [r6, #28]
   ba86a:	e7f4      	b.n	ba856 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba86c:	f1b8 0f00 	cmp.w	r8, #0
   ba870:	d0fa      	beq.n	ba868 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba872:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba874:	a806      	add	r0, sp, #24
   ba876:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba878:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba87a:	f7fe fe2d 	bl	b94d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba87e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba880:	1d3c      	adds	r4, r7, #4
   ba882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba884:	682b      	ldr	r3, [r5, #0]
   ba886:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba888:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba88a:	e7ed      	b.n	ba868 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba88c:	f1b9 0f00 	cmp.w	r9, #0
   ba890:	d0ea      	beq.n	ba868 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba892:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba894:	2210      	movs	r2, #16
   ba896:	a801      	add	r0, sp, #4
   ba898:	f001 fe58 	bl	bc54c <memset>
                    a.v = 6;
   ba89c:	2306      	movs	r3, #6
   ba89e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba8a2:	ad01      	add	r5, sp, #4
   ba8a4:	f104 0308 	add.w	r3, r4, #8
   ba8a8:	3418      	adds	r4, #24
   ba8aa:	6818      	ldr	r0, [r3, #0]
   ba8ac:	6859      	ldr	r1, [r3, #4]
   ba8ae:	462a      	mov	r2, r5
   ba8b0:	c203      	stmia	r2!, {r0, r1}
   ba8b2:	3308      	adds	r3, #8
   ba8b4:	42a3      	cmp	r3, r4
   ba8b6:	4615      	mov	r5, r2
   ba8b8:	d1f7      	bne.n	ba8aa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba8ba:	a901      	add	r1, sp, #4
   ba8bc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba8be:	ad07      	add	r5, sp, #28
   ba8c0:	f7fe fdea 	bl	b9498 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba8c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba8c6:	1d3c      	adds	r4, r7, #4
   ba8c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba8ca:	682b      	ldr	r3, [r5, #0]
   ba8cc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba8ce:	4649      	mov	r1, r9
   ba8d0:	e7ca      	b.n	ba868 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba8d2:	9800      	ldr	r0, [sp, #0]
   ba8d4:	f7fd fd8c 	bl	b83f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba8d8:	4638      	mov	r0, r7
   ba8da:	b015      	add	sp, #84	; 0x54
   ba8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba8e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba8e0:	4b02      	ldr	r3, [pc, #8]	; (ba8ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba8e2:	4a03      	ldr	r2, [pc, #12]	; (ba8f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba8e4:	601a      	str	r2, [r3, #0]
   ba8e6:	2200      	movs	r2, #0
   ba8e8:	605a      	str	r2, [r3, #4]

} // spark
   ba8ea:	4770      	bx	lr
   ba8ec:	2003e680 	.word	0x2003e680
   ba8f0:	000bd8b8 	.word	0x000bd8b8

000ba8f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   ba8f4:	b508      	push	{r3, lr}
            return &Wire1;
   ba8f6:	f001 f88f 	bl	bba18 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   ba8fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   ba8fe:	f7fe bd45 	b.w	b938c <_ZN7TwoWire4lockEv>

000ba902 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   ba902:	b510      	push	{r4, lr}
   ba904:	4604      	mov	r4, r0
    lock_(_lock)
   ba906:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   ba908:	b109      	cbz	r1, ba90e <_ZN4PMICC1Eb+0xc>
        lock();
   ba90a:	f7ff fff3 	bl	ba8f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   ba90e:	4620      	mov	r0, r4
   ba910:	bd10      	pop	{r4, pc}

000ba912 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   ba912:	b508      	push	{r3, lr}
            return &Wire1;
   ba914:	f001 f880 	bl	bba18 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   ba918:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   ba91c:	f7fe bd3f 	b.w	b939e <_ZN7TwoWire6unlockEv>

000ba920 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   ba920:	b510      	push	{r4, lr}
    if (lock_) {
   ba922:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   ba924:	4604      	mov	r4, r0
    if (lock_) {
   ba926:	b10b      	cbz	r3, ba92c <_ZN4PMICD1Ev+0xc>
        unlock();
   ba928:	f7ff fff3 	bl	ba912 <_ZN4PMIC6unlockEv>
}
   ba92c:	4620      	mov	r0, r4
   ba92e:	bd10      	pop	{r4, pc}

000ba930 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   ba930:	b510      	push	{r4, lr}
   ba932:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   ba934:	6800      	ldr	r0, [r0, #0]
   ba936:	f7ff ffec 	bl	ba912 <_ZN4PMIC6unlockEv>
   ba93a:	4620      	mov	r0, r4
   ba93c:	bd10      	pop	{r4, pc}

000ba93e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   ba93e:	b530      	push	{r4, r5, lr}
   ba940:	b087      	sub	sp, #28
   ba942:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba944:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba946:	f7ff ffd5 	bl	ba8f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba94a:	226b      	movs	r2, #107	; 0x6b
   ba94c:	2300      	movs	r3, #0
   ba94e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba952:	2401      	movs	r4, #1
   ba954:	230a      	movs	r3, #10
   ba956:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   ba95a:	f001 f85d 	bl	bba18 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba95e:	a902      	add	r1, sp, #8
   ba960:	f7fe fcf8 	bl	b9354 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba964:	f001 f858 	bl	bba18 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   ba968:	6803      	ldr	r3, [r0, #0]
   ba96a:	4629      	mov	r1, r5
   ba96c:	689b      	ldr	r3, [r3, #8]
   ba96e:	4798      	blx	r3
            return &Wire1;
   ba970:	f001 f852 	bl	bba18 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba974:	4621      	mov	r1, r4
   ba976:	f7fe fd05 	bl	b9384 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   ba97a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   ba97c:	f001 f84c 	bl	bba18 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   ba980:	a902      	add	r1, sp, #8
   ba982:	f7fe fcb7 	bl	b92f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   ba986:	f001 f847 	bl	bba18 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   ba98a:	6803      	ldr	r3, [r0, #0]
   ba98c:	695b      	ldr	r3, [r3, #20]
   ba98e:	4798      	blx	r3
   ba990:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   ba992:	a801      	add	r0, sp, #4
   ba994:	f7ff ffcc 	bl	ba930 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba998:	b2e0      	uxtb	r0, r4
   ba99a:	b007      	add	sp, #28
   ba99c:	bd30      	pop	{r4, r5, pc}

000ba99e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   ba99e:	b570      	push	{r4, r5, r6, lr}
   ba9a0:	b086      	sub	sp, #24
   ba9a2:	460d      	mov	r5, r1
   ba9a4:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba9a6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba9a8:	f7ff ffa4 	bl	ba8f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba9ac:	226b      	movs	r2, #107	; 0x6b
   ba9ae:	2300      	movs	r3, #0
   ba9b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba9b4:	2601      	movs	r6, #1
   ba9b6:	230a      	movs	r3, #10
   ba9b8:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   ba9bc:	f001 f82c 	bl	bba18 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba9c0:	a902      	add	r1, sp, #8
   ba9c2:	f7fe fcc7 	bl	b9354 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba9c6:	f001 f827 	bl	bba18 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   ba9ca:	6803      	ldr	r3, [r0, #0]
   ba9cc:	4629      	mov	r1, r5
   ba9ce:	689b      	ldr	r3, [r3, #8]
   ba9d0:	4798      	blx	r3
            return &Wire1;
   ba9d2:	f001 f821 	bl	bba18 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   ba9d6:	6803      	ldr	r3, [r0, #0]
   ba9d8:	4621      	mov	r1, r4
   ba9da:	689b      	ldr	r3, [r3, #8]
   ba9dc:	4798      	blx	r3
            return &Wire1;
   ba9de:	f001 f81b 	bl	bba18 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba9e2:	4631      	mov	r1, r6
   ba9e4:	f7fe fcce 	bl	b9384 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   ba9e8:	a801      	add	r0, sp, #4
   ba9ea:	f7ff ffa1 	bl	ba930 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba9ee:	b006      	add	sp, #24
   ba9f0:	bd70      	pop	{r4, r5, r6, pc}

000ba9f2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   ba9f2:	b513      	push	{r0, r1, r4, lr}
   ba9f4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba9f6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba9f8:	f7ff ff7c 	bl	ba8f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba9fc:	2101      	movs	r1, #1
   ba9fe:	4620      	mov	r0, r4
   baa00:	f7ff ff9d 	bl	ba93e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   baa04:	f000 0330 	and.w	r3, r0, #48	; 0x30
   baa08:	2b10      	cmp	r3, #16
   baa0a:	d007      	beq.n	baa1c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   baa0c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   baa10:	f042 0210 	orr.w	r2, r2, #16
   baa14:	2101      	movs	r1, #1
   baa16:	4620      	mov	r0, r4
   baa18:	f7ff ffc1 	bl	ba99e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   baa1c:	a801      	add	r0, sp, #4
   baa1e:	f7ff ff87 	bl	ba930 <_ZNSt10lock_guardI4PMICED1Ev>
}
   baa22:	2001      	movs	r0, #1
   baa24:	b002      	add	sp, #8
   baa26:	bd10      	pop	{r4, pc}

000baa28 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   baa28:	b513      	push	{r0, r1, r4, lr}
   baa2a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   baa2c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   baa2e:	f7ff ff61 	bl	ba8f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   baa32:	2101      	movs	r1, #1
   baa34:	4620      	mov	r0, r4
   baa36:	f7ff ff82 	bl	ba93e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   baa3a:	f010 0f30 	tst.w	r0, #48	; 0x30
   baa3e:	d005      	beq.n	baa4c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   baa40:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   baa44:	2101      	movs	r1, #1
   baa46:	4620      	mov	r0, r4
   baa48:	f7ff ffa9 	bl	ba99e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   baa4c:	a801      	add	r0, sp, #4
   baa4e:	f7ff ff6f 	bl	ba930 <_ZNSt10lock_guardI4PMICED1Ev>
}
   baa52:	2001      	movs	r0, #1
   baa54:	b002      	add	sp, #8
   baa56:	bd10      	pop	{r4, pc}

000baa58 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   baa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baa5a:	4606      	mov	r6, r0
   baa5c:	460d      	mov	r5, r1
  size_t n = 0;
   baa5e:	188f      	adds	r7, r1, r2
   baa60:	2400      	movs	r4, #0
  while (size--) {
   baa62:	42bd      	cmp	r5, r7
   baa64:	d00c      	beq.n	baa80 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   baa66:	6833      	ldr	r3, [r6, #0]
   baa68:	f815 1b01 	ldrb.w	r1, [r5], #1
   baa6c:	689b      	ldr	r3, [r3, #8]
   baa6e:	4630      	mov	r0, r6
   baa70:	4798      	blx	r3
     if (chunk>=0)
   baa72:	1e03      	subs	r3, r0, #0
   baa74:	db01      	blt.n	baa7a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   baa76:	441c      	add	r4, r3
  while (size--) {
   baa78:	e7f3      	b.n	baa62 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   baa7a:	2c00      	cmp	r4, #0
   baa7c:	bf08      	it	eq
   baa7e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   baa80:	4620      	mov	r0, r4
   baa82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baa84 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   baa84:	b513      	push	{r0, r1, r4, lr}
   baa86:	4604      	mov	r4, r0
    }
   baa88:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   baa8a:	b159      	cbz	r1, baaa4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   baa8c:	9101      	str	r1, [sp, #4]
   baa8e:	f001 fe18 	bl	bc6c2 <strlen>
   baa92:	6823      	ldr	r3, [r4, #0]
   baa94:	9901      	ldr	r1, [sp, #4]
   baa96:	68db      	ldr	r3, [r3, #12]
   baa98:	4602      	mov	r2, r0
   baa9a:	4620      	mov	r0, r4
    }
   baa9c:	b002      	add	sp, #8
   baa9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   baaa2:	4718      	bx	r3
    }
   baaa4:	b002      	add	sp, #8
   baaa6:	bd10      	pop	{r4, pc}

000baaa8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   baaa8:	b508      	push	{r3, lr}
  return write(str);
   baaaa:	f7ff ffeb 	bl	baa84 <_ZN5Print5writeEPKc>
}
   baaae:	bd08      	pop	{r3, pc}

000baab0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   baab0:	6803      	ldr	r3, [r0, #0]
   baab2:	689b      	ldr	r3, [r3, #8]
   baab4:	4718      	bx	r3

000baab6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   baab6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   baab8:	210d      	movs	r1, #13
{
   baaba:	4605      	mov	r5, r0
  size_t n = print('\r');
   baabc:	f7ff fff8 	bl	baab0 <_ZN5Print5printEc>
  n += print('\n');
   baac0:	210a      	movs	r1, #10
  size_t n = print('\r');
   baac2:	4604      	mov	r4, r0
  n += print('\n');
   baac4:	4628      	mov	r0, r5
   baac6:	f7ff fff3 	bl	baab0 <_ZN5Print5printEc>
  return n;
}
   baaca:	4420      	add	r0, r4
   baacc:	bd38      	pop	{r3, r4, r5, pc}

000baace <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   baace:	b530      	push	{r4, r5, lr}
   baad0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   baad2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   baad4:	2a01      	cmp	r2, #1
  *str = '\0';
   baad6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   baada:	bf98      	it	ls
   baadc:	220a      	movls	r2, #10
   baade:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   baae0:	460d      	mov	r5, r1
   baae2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   baae6:	fb01 5312 	mls	r3, r1, r2, r5
   baaea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   baaee:	2b09      	cmp	r3, #9
   baaf0:	bf94      	ite	ls
   baaf2:	3330      	addls	r3, #48	; 0x30
   baaf4:	3337      	addhi	r3, #55	; 0x37
   baaf6:	b2db      	uxtb	r3, r3
  } while(n);
   baaf8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   baafa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   baafe:	d9ef      	bls.n	baae0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bab00:	4621      	mov	r1, r4
   bab02:	f7ff ffbf 	bl	baa84 <_ZN5Print5writeEPKc>
}
   bab06:	b00b      	add	sp, #44	; 0x2c
   bab08:	bd30      	pop	{r4, r5, pc}
	...

000bab0c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bab0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bab10:	ec55 4b10 	vmov	r4, r5, d0
   bab14:	4606      	mov	r6, r0
   bab16:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bab18:	ee10 2a10 	vmov	r2, s0
   bab1c:	ee10 0a10 	vmov	r0, s0
   bab20:	462b      	mov	r3, r5
   bab22:	4629      	mov	r1, r5
   bab24:	f001 fc3a 	bl	bc39c <__aeabi_dcmpun>
   bab28:	b140      	cbz	r0, bab3c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bab2a:	4953      	ldr	r1, [pc, #332]	; (bac78 <_ZN5Print10printFloatEdh+0x16c>)
   bab2c:	4630      	mov	r0, r6
   bab2e:	f7ff ffa9 	bl	baa84 <_ZN5Print5writeEPKc>
   bab32:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bab34:	4650      	mov	r0, sl
   bab36:	b003      	add	sp, #12
   bab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bab3c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bab40:	4b4e      	ldr	r3, [pc, #312]	; (bac7c <_ZN5Print10printFloatEdh+0x170>)
   bab42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab46:	4620      	mov	r0, r4
   bab48:	4649      	mov	r1, r9
   bab4a:	f001 fc27 	bl	bc39c <__aeabi_dcmpun>
   bab4e:	b948      	cbnz	r0, bab64 <_ZN5Print10printFloatEdh+0x58>
   bab50:	4b4a      	ldr	r3, [pc, #296]	; (bac7c <_ZN5Print10printFloatEdh+0x170>)
   bab52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bab56:	4620      	mov	r0, r4
   bab58:	4649      	mov	r1, r9
   bab5a:	f001 fc01 	bl	bc360 <__aeabi_dcmple>
   bab5e:	b908      	cbnz	r0, bab64 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bab60:	4947      	ldr	r1, [pc, #284]	; (bac80 <_ZN5Print10printFloatEdh+0x174>)
   bab62:	e7e3      	b.n	bab2c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bab64:	4b47      	ldr	r3, [pc, #284]	; (bac84 <_ZN5Print10printFloatEdh+0x178>)
   bab66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bab6a:	4620      	mov	r0, r4
   bab6c:	4629      	mov	r1, r5
   bab6e:	f001 fc0b 	bl	bc388 <__aeabi_dcmpgt>
   bab72:	b108      	cbz	r0, bab78 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bab74:	4944      	ldr	r1, [pc, #272]	; (bac88 <_ZN5Print10printFloatEdh+0x17c>)
   bab76:	e7d9      	b.n	bab2c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bab78:	4b44      	ldr	r3, [pc, #272]	; (bac8c <_ZN5Print10printFloatEdh+0x180>)
   bab7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bab7e:	4620      	mov	r0, r4
   bab80:	4629      	mov	r1, r5
   bab82:	f001 fbe3 	bl	bc34c <__aeabi_dcmplt>
   bab86:	2800      	cmp	r0, #0
   bab88:	d1f4      	bne.n	bab74 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bab8a:	2200      	movs	r2, #0
   bab8c:	2300      	movs	r3, #0
   bab8e:	4620      	mov	r0, r4
   bab90:	4629      	mov	r1, r5
   bab92:	f001 fbdb 	bl	bc34c <__aeabi_dcmplt>
   bab96:	b1d0      	cbz	r0, babce <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bab98:	212d      	movs	r1, #45	; 0x2d
   bab9a:	4630      	mov	r0, r6
   bab9c:	f7ff ff88 	bl	baab0 <_ZN5Print5printEc>
     number = -number;
   baba0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   baba4:	4682      	mov	sl, r0
     number = -number;
   baba6:	461d      	mov	r5, r3
  double rounding = 0.5;
   baba8:	4939      	ldr	r1, [pc, #228]	; (bac90 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   babaa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bac98 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   babae:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   babb2:	2000      	movs	r0, #0
    rounding /= 10.0;
   babb4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   babb8:	fa5f f38b 	uxtb.w	r3, fp
   babbc:	429f      	cmp	r7, r3
   babbe:	d908      	bls.n	babd2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   babc0:	4642      	mov	r2, r8
   babc2:	464b      	mov	r3, r9
   babc4:	f001 fa7a 	bl	bc0bc <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   babc8:	f10b 0b01 	add.w	fp, fp, #1
   babcc:	e7f4      	b.n	babb8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   babce:	4682      	mov	sl, r0
   babd0:	e7ea      	b.n	baba8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   babd2:	4622      	mov	r2, r4
   babd4:	462b      	mov	r3, r5
   babd6:	f000 ff91 	bl	bbafc <__adddf3>
   babda:	460d      	mov	r5, r1
   babdc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   babde:	f001 fc1b 	bl	bc418 <__aeabi_d2uiz>
   babe2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   babe4:	f001 f8c6 	bl	bbd74 <__aeabi_ui2d>
   babe8:	4602      	mov	r2, r0
   babea:	460b      	mov	r3, r1
   babec:	4620      	mov	r0, r4
   babee:	4629      	mov	r1, r5
   babf0:	f000 ff82 	bl	bbaf8 <__aeabi_dsub>
        return printNumber(val, base) + t;
   babf4:	220a      	movs	r2, #10
   babf6:	4604      	mov	r4, r0
   babf8:	460d      	mov	r5, r1
   babfa:	4630      	mov	r0, r6
   babfc:	4641      	mov	r1, r8
   babfe:	f7ff ff66 	bl	baace <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bac02:	4482      	add	sl, r0
  if (digits > 0) {
   bac04:	2f00      	cmp	r7, #0
   bac06:	d095      	beq.n	bab34 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bac08:	4922      	ldr	r1, [pc, #136]	; (bac94 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bac0a:	f8df 908c 	ldr.w	r9, [pc, #140]	; bac98 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bac0e:	4630      	mov	r0, r6
   bac10:	f7ff ff38 	bl	baa84 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bac14:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bac18:	4482      	add	sl, r0
  while (digits-- > 0)
   bac1a:	2f00      	cmp	r7, #0
   bac1c:	d08a      	beq.n	bab34 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bac1e:	4642      	mov	r2, r8
   bac20:	464b      	mov	r3, r9
   bac22:	4620      	mov	r0, r4
   bac24:	4629      	mov	r1, r5
   bac26:	f001 f91f 	bl	bbe68 <__aeabi_dmul>
   bac2a:	4604      	mov	r4, r0
   bac2c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bac2e:	f001 fbcb 	bl	bc3c8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bac32:	f1b0 0b00 	subs.w	fp, r0, #0
   bac36:	da1c      	bge.n	bac72 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bac38:	212d      	movs	r1, #45	; 0x2d
   bac3a:	4630      	mov	r0, r6
   bac3c:	f7ff ff38 	bl	baab0 <_ZN5Print5printEc>
            val = -n;
   bac40:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bac44:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bac46:	220a      	movs	r2, #10
   bac48:	4630      	mov	r0, r6
   bac4a:	9301      	str	r3, [sp, #4]
   bac4c:	f7ff ff3f 	bl	baace <_ZN5Print11printNumberEmh>
   bac50:	9b01      	ldr	r3, [sp, #4]
   bac52:	4418      	add	r0, r3
    n += print(toPrint);
   bac54:	4482      	add	sl, r0
    remainder -= toPrint;
   bac56:	4658      	mov	r0, fp
   bac58:	f001 f89c 	bl	bbd94 <__aeabi_i2d>
   bac5c:	4602      	mov	r2, r0
   bac5e:	460b      	mov	r3, r1
   bac60:	4620      	mov	r0, r4
   bac62:	4629      	mov	r1, r5
   bac64:	f000 ff48 	bl	bbaf8 <__aeabi_dsub>
   bac68:	3f01      	subs	r7, #1
   bac6a:	4604      	mov	r4, r0
   bac6c:	460d      	mov	r5, r1
   bac6e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bac70:	e7d3      	b.n	bac1a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bac72:	4659      	mov	r1, fp
        size_t t = 0;
   bac74:	2300      	movs	r3, #0
   bac76:	e7e6      	b.n	bac46 <_ZN5Print10printFloatEdh+0x13a>
   bac78:	000bd8ec 	.word	0x000bd8ec
   bac7c:	7fefffff 	.word	0x7fefffff
   bac80:	000bd8f0 	.word	0x000bd8f0
   bac84:	41efffff 	.word	0x41efffff
   bac88:	000bd8f4 	.word	0x000bd8f4
   bac8c:	c1efffff 	.word	0xc1efffff
   bac90:	3fe00000 	.word	0x3fe00000
   bac94:	000bd92c 	.word	0x000bd92c
   bac98:	40240000 	.word	0x40240000

000bac9c <_ZN5Print5printEfi>:
{
   bac9c:	b538      	push	{r3, r4, r5, lr}
   bac9e:	4604      	mov	r4, r0
   baca0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   baca4:	b2cd      	uxtb	r5, r1
   baca6:	f001 f887 	bl	bbdb8 <__aeabi_f2d>
   bacaa:	ec41 0b10 	vmov	d0, r0, r1
   bacae:	4629      	mov	r1, r5
   bacb0:	4620      	mov	r0, r4
}
   bacb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bacb6:	f7ff bf29 	b.w	bab0c <_ZN5Print10printFloatEdh>

000bacba <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bacba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bacbe:	b086      	sub	sp, #24
   bacc0:	af00      	add	r7, sp, #0
   bacc2:	4605      	mov	r5, r0
   bacc4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bacc6:	1d38      	adds	r0, r7, #4
   bacc8:	2114      	movs	r1, #20
{
   bacca:	4614      	mov	r4, r2
    va_copy(args2, args);
   baccc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bacce:	f7fd fdd9 	bl	b8884 <vsnprintf>

    if (n<bufsize)
   bacd2:	2813      	cmp	r0, #19
   bacd4:	d80e      	bhi.n	bacf4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bacd6:	1d39      	adds	r1, r7, #4
   bacd8:	4628      	mov	r0, r5
   bacda:	f7ff fed3 	bl	baa84 <_ZN5Print5writeEPKc>
   bacde:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bace0:	b11e      	cbz	r6, bacea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bace2:	4628      	mov	r0, r5
   bace4:	f7ff fee7 	bl	baab6 <_ZN5Print7printlnEv>
   bace8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bacea:	4620      	mov	r0, r4
   bacec:	3718      	adds	r7, #24
   bacee:	46bd      	mov	sp, r7
   bacf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bacf4:	f100 0308 	add.w	r3, r0, #8
   bacf8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bacfc:	46e8      	mov	r8, sp
        char bigger[n+1];
   bacfe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bad02:	4622      	mov	r2, r4
   bad04:	1c41      	adds	r1, r0, #1
   bad06:	683b      	ldr	r3, [r7, #0]
   bad08:	4668      	mov	r0, sp
   bad0a:	f7fd fdbb 	bl	b8884 <vsnprintf>
  return write(str);
   bad0e:	4669      	mov	r1, sp
   bad10:	4628      	mov	r0, r5
   bad12:	f7ff feb7 	bl	baa84 <_ZN5Print5writeEPKc>
   bad16:	4604      	mov	r4, r0
   bad18:	46c5      	mov	sp, r8
   bad1a:	e7e1      	b.n	bace0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bad1c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bad1c:	b510      	push	{r4, lr}
  if (0 == max) {
   bad1e:	4604      	mov	r4, r0
   bad20:	b128      	cbz	r0, bad2e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bad22:	f001 fc49 	bl	bc5b8 <rand>
   bad26:	fb90 f3f4 	sdiv	r3, r0, r4
   bad2a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bad2e:	4620      	mov	r0, r4
   bad30:	bd10      	pop	{r4, pc}

000bad32 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bad32:	4288      	cmp	r0, r1
{
   bad34:	b510      	push	{r4, lr}
   bad36:	4604      	mov	r4, r0
  if (min >= max) {
   bad38:	da03      	bge.n	bad42 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bad3a:	1a08      	subs	r0, r1, r0
   bad3c:	f7ff ffee 	bl	bad1c <_Z6randomi>
   bad40:	4404      	add	r4, r0
}
   bad42:	4620      	mov	r0, r4
   bad44:	bd10      	pop	{r4, pc}

000bad46 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   bad46:	f001 bc09 	b.w	bc55c <srand>
	...

000bad4c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bad4c:	4b01      	ldr	r3, [pc, #4]	; (bad54 <_GLOBAL__sub_I_RGB+0x8>)
   bad4e:	2200      	movs	r2, #0
   bad50:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bad52:	4770      	bx	lr
   bad54:	2003e688 	.word	0x2003e688

000bad58 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bad58:	2100      	movs	r1, #0
   bad5a:	f7fd bb99 	b.w	b8490 <hal_spi_release>

000bad5e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bad5e:	2100      	movs	r1, #0
   bad60:	f7fd bb8e 	b.w	b8480 <hal_spi_acquire>

000bad64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bad64:	b510      	push	{r4, lr}
   bad66:	4604      	mov	r4, r0
   bad68:	4608      	mov	r0, r1
{
    _spi = spi;
   bad6a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bad6c:	f7fd fb68 	bl	b8440 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bad70:	2300      	movs	r3, #0
   bad72:	6063      	str	r3, [r4, #4]
}
   bad74:	4620      	mov	r0, r4
   bad76:	bd10      	pop	{r4, pc}

000bad78 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bad78:	b513      	push	{r0, r1, r4, lr}
   bad7a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bad7c:	7800      	ldrb	r0, [r0, #0]
   bad7e:	f7ff ffee 	bl	bad5e <_ZN8SPIClass4lockEv.isra.0>
   bad82:	b958      	cbnz	r0, bad9c <_ZN8SPIClass5beginEv+0x24>
   bad84:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bad86:	9001      	str	r0, [sp, #4]
   bad88:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bad8c:	f7fd fb40 	bl	b8410 <hal_spi_begin>
        unlock();
   bad90:	9801      	ldr	r0, [sp, #4]
    }
}
   bad92:	b002      	add	sp, #8
   bad94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bad98:	f7ff bfde 	b.w	bad58 <_ZN8SPIClass6unlockEv.isra.0>
   bad9c:	b002      	add	sp, #8
   bad9e:	bd10      	pop	{r4, pc}

000bada0 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bada0:	b513      	push	{r0, r1, r4, lr}
   bada2:	4604      	mov	r4, r0
    if (!lock())
   bada4:	7800      	ldrb	r0, [r0, #0]
   bada6:	f7ff ffda 	bl	bad5e <_ZN8SPIClass4lockEv.isra.0>
   badaa:	b948      	cbnz	r0, badc0 <_ZN8SPIClass3endEv+0x20>
   badac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   badae:	9001      	str	r0, [sp, #4]
   badb0:	f7fd fb36 	bl	b8420 <hal_spi_end>
        unlock();
   badb4:	9801      	ldr	r0, [sp, #4]
    }
}
   badb6:	b002      	add	sp, #8
   badb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   badbc:	f7ff bfcc 	b.w	bad58 <_ZN8SPIClass6unlockEv.isra.0>
   badc0:	b002      	add	sp, #8
   badc2:	bd10      	pop	{r4, pc}

000badc4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   badc4:	7800      	ldrb	r0, [r0, #0]
   badc6:	f7ff bfc7 	b.w	bad58 <_ZN8SPIClass6unlockEv.isra.0>
	...

000badcc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   badcc:	0840      	lsrs	r0, r0, #1
{
   badce:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   badd0:	6018      	str	r0, [r3, #0]
   badd2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   badd4:	6818      	ldr	r0, [r3, #0]
   badd6:	4288      	cmp	r0, r1
   badd8:	b2e5      	uxtb	r5, r4
   badda:	d906      	bls.n	badea <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   baddc:	3401      	adds	r4, #1
   badde:	2c08      	cmp	r4, #8
   bade0:	d002      	beq.n	bade8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bade2:	0840      	lsrs	r0, r0, #1
   bade4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bade6:	e7f5      	b.n	badd4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bade8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   badea:	4b02      	ldr	r3, [pc, #8]	; (badf4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   badec:	5d5b      	ldrb	r3, [r3, r5]
   badee:	7013      	strb	r3, [r2, #0]
}
   badf0:	bd30      	pop	{r4, r5, pc}
   badf2:	bf00      	nop
   badf4:	000bd8f8 	.word	0x000bd8f8

000badf8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   badf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   badfc:	4606      	mov	r6, r0
   badfe:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bae00:	7800      	ldrb	r0, [r0, #0]
{
   bae02:	460c      	mov	r4, r1
    CHECK(lock());
   bae04:	f7ff ffab 	bl	bad5e <_ZN8SPIClass4lockEv.isra.0>
   bae08:	2800      	cmp	r0, #0
   bae0a:	db1b      	blt.n	bae44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bae0c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bae0e:	2214      	movs	r2, #20
   bae10:	2100      	movs	r1, #0
   bae12:	a809      	add	r0, sp, #36	; 0x24
   bae14:	f001 fb9a 	bl	bc54c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bae18:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bae1a:	2200      	movs	r2, #0
   bae1c:	a909      	add	r1, sp, #36	; 0x24
   bae1e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bae20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bae24:	f7fd fb1c 	bl	b8460 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bae28:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bae2c:	b113      	cbz	r3, bae34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bae2e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bae32:	b155      	cbz	r5, bae4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bae34:	2700      	movs	r7, #0
   bae36:	46b9      	mov	r9, r7
   bae38:	46b8      	mov	r8, r7
   bae3a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bae3c:	7923      	ldrb	r3, [r4, #4]
   bae3e:	b15d      	cbz	r5, bae58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bae40:	b1c3      	cbz	r3, bae74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bae42:	2000      	movs	r0, #0
}
   bae44:	b00f      	add	sp, #60	; 0x3c
   bae46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bae4a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bae4e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bae52:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bae56:	e7f1      	b.n	bae3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bae58:	2b00      	cmp	r3, #0
   bae5a:	d135      	bne.n	baec8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bae5c:	68a3      	ldr	r3, [r4, #8]
   bae5e:	4543      	cmp	r3, r8
   bae60:	d108      	bne.n	bae74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bae62:	f88d 9020 	strb.w	r9, [sp, #32]
   bae66:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bae6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bae6e:	89a3      	ldrh	r3, [r4, #12]
   bae70:	429a      	cmp	r2, r3
   bae72:	d0e6      	beq.n	bae42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bae74:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bae76:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bae78:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bae7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bae7e:	ab04      	add	r3, sp, #16
   bae80:	f10d 020f 	add.w	r2, sp, #15
   bae84:	f7ff ffa2 	bl	badcc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bae88:	7921      	ldrb	r1, [r4, #4]
   bae8a:	b985      	cbnz	r5, baeae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bae8c:	b989      	cbnz	r1, baeb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bae8e:	68a3      	ldr	r3, [r4, #8]
   bae90:	4543      	cmp	r3, r8
   bae92:	d30e      	bcc.n	baeb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bae94:	f88d 9020 	strb.w	r9, [sp, #32]
   bae98:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bae9c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   baea0:	89a3      	ldrh	r3, [r4, #12]
   baea2:	429a      	cmp	r2, r3
   baea4:	d105      	bne.n	baeb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   baea6:	9b04      	ldr	r3, [sp, #16]
   baea8:	4543      	cmp	r3, r8
   baeaa:	d102      	bne.n	baeb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   baeac:	e7c9      	b.n	bae42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   baeae:	2900      	cmp	r1, #0
   baeb0:	d1f9      	bne.n	baea6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   baeb2:	2300      	movs	r3, #0
   baeb4:	9301      	str	r3, [sp, #4]
   baeb6:	7b63      	ldrb	r3, [r4, #13]
   baeb8:	9300      	str	r3, [sp, #0]
   baeba:	f89d 200f 	ldrb.w	r2, [sp, #15]
   baebe:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   baec0:	7830      	ldrb	r0, [r6, #0]
   baec2:	f7fd fad5 	bl	b8470 <hal_spi_set_settings>
   baec6:	e7bc      	b.n	bae42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   baec8:	e9cd 5500 	strd	r5, r5, [sp]
   baecc:	462b      	mov	r3, r5
   baece:	462a      	mov	r2, r5
   baed0:	2101      	movs	r1, #1
   baed2:	e7f5      	b.n	baec0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000baed4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   baed4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   baed6:	7800      	ldrb	r0, [r0, #0]
   baed8:	f7fd faaa 	bl	b8430 <hal_spi_transfer>
}
   baedc:	b2c0      	uxtb	r0, r0
   baede:	bd08      	pop	{r3, pc}

000baee0 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   baee0:	4770      	bx	lr

000baee2 <_ZN8SPIClass15detachInterruptEv>:
   baee2:	4770      	bx	lr

000baee4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   baee4:	b510      	push	{r4, lr}
   baee6:	4604      	mov	r4, r0
{
	free(buffer);
   baee8:	6800      	ldr	r0, [r0, #0]
   baeea:	f7fd fcab 	bl	b8844 <free>
}
   baeee:	4620      	mov	r0, r4
   baef0:	bd10      	pop	{r4, pc}

000baef2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   baef2:	b510      	push	{r4, lr}
   baef4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   baef6:	6800      	ldr	r0, [r0, #0]
   baef8:	b108      	cbz	r0, baefe <_ZN6String10invalidateEv+0xc>
   baefa:	f7fd fca3 	bl	b8844 <free>
	buffer = NULL;
   baefe:	2300      	movs	r3, #0
	capacity = len = 0;
   baf00:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   baf04:	6023      	str	r3, [r4, #0]
}
   baf06:	bd10      	pop	{r4, pc}

000baf08 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   baf08:	b538      	push	{r3, r4, r5, lr}
   baf0a:	4604      	mov	r4, r0
   baf0c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   baf0e:	6800      	ldr	r0, [r0, #0]
   baf10:	3101      	adds	r1, #1
   baf12:	f7fd fc9f 	bl	b8854 <realloc>
	if (newbuffer) {
   baf16:	b110      	cbz	r0, baf1e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   baf18:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   baf1c:	2001      	movs	r0, #1
	}
	return 0;
}
   baf1e:	bd38      	pop	{r3, r4, r5, pc}

000baf20 <_ZN6String7reserveEj>:
{
   baf20:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   baf22:	6803      	ldr	r3, [r0, #0]
{
   baf24:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   baf26:	b123      	cbz	r3, baf32 <_ZN6String7reserveEj+0x12>
   baf28:	6843      	ldr	r3, [r0, #4]
   baf2a:	428b      	cmp	r3, r1
   baf2c:	d301      	bcc.n	baf32 <_ZN6String7reserveEj+0x12>
   baf2e:	2001      	movs	r0, #1
}
   baf30:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   baf32:	4620      	mov	r0, r4
   baf34:	f7ff ffe8 	bl	baf08 <_ZN6String12changeBufferEj>
   baf38:	2800      	cmp	r0, #0
   baf3a:	d0f9      	beq.n	baf30 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   baf3c:	68a3      	ldr	r3, [r4, #8]
   baf3e:	2b00      	cmp	r3, #0
   baf40:	d1f5      	bne.n	baf2e <_ZN6String7reserveEj+0xe>
   baf42:	6822      	ldr	r2, [r4, #0]
   baf44:	7013      	strb	r3, [r2, #0]
   baf46:	e7f2      	b.n	baf2e <_ZN6String7reserveEj+0xe>

000baf48 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   baf48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   baf4a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   baf4c:	4611      	mov	r1, r2
   baf4e:	9201      	str	r2, [sp, #4]
{
   baf50:	4604      	mov	r4, r0
	if (!reserve(length)) {
   baf52:	f7ff ffe5 	bl	baf20 <_ZN6String7reserveEj>
   baf56:	9a01      	ldr	r2, [sp, #4]
   baf58:	b928      	cbnz	r0, baf66 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   baf5a:	4620      	mov	r0, r4
   baf5c:	f7ff ffc9 	bl	baef2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   baf60:	4620      	mov	r0, r4
   baf62:	b003      	add	sp, #12
   baf64:	bd30      	pop	{r4, r5, pc}
	len = length;
   baf66:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   baf68:	4629      	mov	r1, r5
   baf6a:	6820      	ldr	r0, [r4, #0]
   baf6c:	f001 fac6 	bl	bc4fc <memcpy>
	buffer[len] = 0;
   baf70:	6822      	ldr	r2, [r4, #0]
   baf72:	68a3      	ldr	r3, [r4, #8]
   baf74:	2100      	movs	r1, #0
   baf76:	54d1      	strb	r1, [r2, r3]
	return *this;
   baf78:	e7f2      	b.n	baf60 <_ZN6String4copyEPKcj+0x18>

000baf7a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   baf7a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   baf7c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   baf7e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   baf82:	4604      	mov	r4, r0
	len = 0;
   baf84:	6083      	str	r3, [r0, #8]
	flags = 0;
   baf86:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   baf88:	b141      	cbz	r1, baf9c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   baf8a:	4608      	mov	r0, r1
   baf8c:	9101      	str	r1, [sp, #4]
   baf8e:	f001 fb98 	bl	bc6c2 <strlen>
   baf92:	9901      	ldr	r1, [sp, #4]
   baf94:	4602      	mov	r2, r0
   baf96:	4620      	mov	r0, r4
   baf98:	f7ff ffd6 	bl	baf48 <_ZN6String4copyEPKcj>
}
   baf9c:	4620      	mov	r0, r4
   baf9e:	b002      	add	sp, #8
   bafa0:	bd10      	pop	{r4, pc}

000bafa2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bafa2:	b538      	push	{r3, r4, r5, lr}
   bafa4:	4605      	mov	r5, r0
	if (buffer) {
   bafa6:	6800      	ldr	r0, [r0, #0]
{
   bafa8:	460c      	mov	r4, r1
	if (buffer) {
   bafaa:	b168      	cbz	r0, bafc8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bafac:	686a      	ldr	r2, [r5, #4]
   bafae:	688b      	ldr	r3, [r1, #8]
   bafb0:	429a      	cmp	r2, r3
   bafb2:	d307      	bcc.n	bafc4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bafb4:	6809      	ldr	r1, [r1, #0]
   bafb6:	f001 fb5e 	bl	bc676 <strcpy>
			len = rhs.len;
   bafba:	68a3      	ldr	r3, [r4, #8]
   bafbc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bafbe:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bafc0:	60a3      	str	r3, [r4, #8]
}
   bafc2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bafc4:	f7fd fc3e 	bl	b8844 <free>
	buffer = rhs.buffer;
   bafc8:	6823      	ldr	r3, [r4, #0]
   bafca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bafcc:	6863      	ldr	r3, [r4, #4]
   bafce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bafd0:	68a3      	ldr	r3, [r4, #8]
   bafd2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bafd4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bafd6:	e9c4 3300 	strd	r3, r3, [r4]
   bafda:	e7f1      	b.n	bafc0 <_ZN6String4moveERS_+0x1e>

000bafdc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bafdc:	b510      	push	{r4, lr}
	buffer = NULL;
   bafde:	2300      	movs	r3, #0
	capacity = 0;
   bafe0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bafe4:	4604      	mov	r4, r0
	len = 0;
   bafe6:	6083      	str	r3, [r0, #8]
	flags = 0;
   bafe8:	7303      	strb	r3, [r0, #12]
	move(rval);
   bafea:	f7ff ffda 	bl	bafa2 <_ZN6String4moveERS_>
}
   bafee:	4620      	mov	r0, r4
   baff0:	bd10      	pop	{r4, pc}

000baff2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   baff2:	4288      	cmp	r0, r1
{
   baff4:	b510      	push	{r4, lr}
   baff6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   baff8:	d005      	beq.n	bb006 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   baffa:	680b      	ldr	r3, [r1, #0]
   baffc:	b12b      	cbz	r3, bb00a <_ZN6StringaSERKS_+0x18>
   baffe:	688a      	ldr	r2, [r1, #8]
   bb000:	4619      	mov	r1, r3
   bb002:	f7ff ffa1 	bl	baf48 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bb006:	4620      	mov	r0, r4
   bb008:	bd10      	pop	{r4, pc}
	else invalidate();
   bb00a:	f7ff ff72 	bl	baef2 <_ZN6String10invalidateEv>
   bb00e:	e7fa      	b.n	bb006 <_ZN6StringaSERKS_+0x14>

000bb010 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bb010:	b510      	push	{r4, lr}
	buffer = NULL;
   bb012:	2300      	movs	r3, #0
String::String(const String &value)
   bb014:	4604      	mov	r4, r0
	capacity = 0;
   bb016:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bb01a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bb01c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bb01e:	f7ff ffe8 	bl	baff2 <_ZN6StringaSERKS_>
}
   bb022:	4620      	mov	r0, r4
   bb024:	bd10      	pop	{r4, pc}

000bb026 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bb026:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bb028:	6882      	ldr	r2, [r0, #8]
   bb02a:	b93a      	cbnz	r2, bb03c <_ZNK6String6equalsEPKc+0x16>
   bb02c:	b121      	cbz	r1, bb038 <_ZNK6String6equalsEPKc+0x12>
   bb02e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bb030:	fab0 f080 	clz	r0, r0
   bb034:	0940      	lsrs	r0, r0, #5
   bb036:	e000      	b.n	bb03a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bb038:	2001      	movs	r0, #1
}
   bb03a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bb03c:	6800      	ldr	r0, [r0, #0]
   bb03e:	b909      	cbnz	r1, bb044 <_ZNK6String6equalsEPKc+0x1e>
   bb040:	7800      	ldrb	r0, [r0, #0]
   bb042:	e7f5      	b.n	bb030 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bb044:	f001 fb0d 	bl	bc662 <strcmp>
   bb048:	e7f2      	b.n	bb030 <_ZNK6String6equalsEPKc+0xa>
	...

000bb04c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bb04c:	b40e      	push	{r1, r2, r3}
   bb04e:	b570      	push	{r4, r5, r6, lr}
   bb050:	b087      	sub	sp, #28
   bb052:	ad0b      	add	r5, sp, #44	; 0x2c
   bb054:	4604      	mov	r4, r0
   bb056:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb05a:	9201      	str	r2, [sp, #4]
   bb05c:	462b      	mov	r3, r5
   bb05e:	2105      	movs	r1, #5
   bb060:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bb062:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb064:	f7fd fc0e 	bl	b8884 <vsnprintf>
    va_end(marker);

    String result;
   bb068:	490b      	ldr	r1, [pc, #44]	; (bb098 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bb06a:	4606      	mov	r6, r0
    String result;
   bb06c:	4620      	mov	r0, r4
   bb06e:	f7ff ff84 	bl	baf7a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bb072:	4631      	mov	r1, r6
   bb074:	4620      	mov	r0, r4
   bb076:	f7ff ff53 	bl	baf20 <_ZN6String7reserveEj>
    if (result.buffer) {
   bb07a:	6820      	ldr	r0, [r4, #0]
   bb07c:	b130      	cbz	r0, bb08c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb07e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bb080:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bb082:	462b      	mov	r3, r5
   bb084:	1c71      	adds	r1, r6, #1
   bb086:	f7fd fbfd 	bl	b8884 <vsnprintf>
        va_end(marker);
        result.len = n;
   bb08a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bb08c:	4620      	mov	r0, r4
   bb08e:	b007      	add	sp, #28
   bb090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb094:	b003      	add	sp, #12
   bb096:	4770      	bx	lr
   bb098:	000bd821 	.word	0x000bd821

000bb09c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bb09c:	b510      	push	{r4, lr}
   bb09e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bb0a0:	6800      	ldr	r0, [r0, #0]
   bb0a2:	b118      	cbz	r0, bb0ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bb0a4:	f7fd fbce 	bl	b8844 <free>
            wakeupSource_ = nullptr;
   bb0a8:	2300      	movs	r3, #0
   bb0aa:	6023      	str	r3, [r4, #0]
        }
    }
   bb0ac:	bd10      	pop	{r4, pc}

000bb0ae <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bb0ae:	b538      	push	{r3, r4, r5, lr}
   bb0b0:	460c      	mov	r4, r1
   bb0b2:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb0b4:	f7ff fff2 	bl	bb09c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bb0b8:	b154      	cbz	r4, bb0d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bb0ba:	8820      	ldrh	r0, [r4, #0]
   bb0bc:	f7fd fbba 	bl	b8834 <malloc>
   bb0c0:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bb0c2:	b128      	cbz	r0, bb0d0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bb0c4:	8822      	ldrh	r2, [r4, #0]
   bb0c6:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bb0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bb0cc:	f001 ba16 	b.w	bc4fc <memcpy>
    }
   bb0d0:	bd38      	pop	{r3, r4, r5, pc}

000bb0d2 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb0d2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bb0d4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bb0d8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bb0da:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bb0de:	f8c0 3006 	str.w	r3, [r0, #6]
   bb0e2:	894b      	ldrh	r3, [r1, #10]
   bb0e4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bb0e6:	460c      	mov	r4, r1
   bb0e8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bb0ea:	f7ff ffd7 	bl	bb09c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bb0ee:	6823      	ldr	r3, [r4, #0]
   bb0f0:	b113      	cbz	r3, bb0f8 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bb0f2:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bb0f4:	2300      	movs	r3, #0
   bb0f6:	6023      	str	r3, [r4, #0]
    }
   bb0f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000bb0fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bb0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb0fe:	4d2b      	ldr	r5, [pc, #172]	; (bb1ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bb100:	7d0b      	ldrb	r3, [r1, #20]
   bb102:	4604      	mov	r4, r0
   bb104:	b08b      	sub	sp, #44	; 0x2c
   bb106:	4608      	mov	r0, r1
   bb108:	1daf      	adds	r7, r5, #6
   bb10a:	2b00      	cmp	r3, #0
   bb10c:	d036      	beq.n	bb17c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bb10e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bb110:	791b      	ldrb	r3, [r3, #4]
   bb112:	2b00      	cmp	r3, #0
   bb114:	d032      	beq.n	bb17c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bb116:	4b26      	ldr	r3, [pc, #152]	; (bb1b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bb118:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bb11a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bb11c:	a902      	add	r1, sp, #8
   bb11e:	3004      	adds	r0, #4
   bb120:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bb124:	f7fd faec 	bl	b8700 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bb128:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bb12c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bb130:	b200      	sxth	r0, r0
   bb132:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bb136:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bb13a:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bb13c:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bb13e:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb140:	4628      	mov	r0, r5
   bb142:	f7ff ffb4 	bl	bb0ae <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bb146:	a802      	add	r0, sp, #8
   bb148:	f7ff ffa8 	bl	bb09c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bb14c:	2300      	movs	r3, #0
   bb14e:	6023      	str	r3, [r4, #0]
   bb150:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bb152:	71a3      	strb	r3, [r4, #6]
   bb154:	8123      	strh	r3, [r4, #8]
   bb156:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bb15a:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bb15c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bb160:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bb162:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bb166:	f8c4 3006 	str.w	r3, [r4, #6]
   bb16a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bb16c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bb16e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bb170:	4620      	mov	r0, r4
   bb172:	f7ff ff9c 	bl	bb0ae <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bb176:	4620      	mov	r0, r4
   bb178:	b00b      	add	sp, #44	; 0x2c
   bb17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bb17c:	2600      	movs	r6, #0
   bb17e:	2320      	movs	r3, #32
   bb180:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bb184:	4b0b      	ldr	r3, [pc, #44]	; (bb1b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bb186:	9300      	str	r3, [sp, #0]
   bb188:	aa02      	add	r2, sp, #8
   bb18a:	4633      	mov	r3, r6
   bb18c:	490a      	ldr	r1, [pc, #40]	; (bb1b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bb18e:	2032      	movs	r0, #50	; 0x32
   bb190:	f7fd fa26 	bl	b85e0 <log_message>
            : wakeupSource_(nullptr),
   bb194:	4b06      	ldr	r3, [pc, #24]	; (bb1b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bb196:	4805      	ldr	r0, [pc, #20]	; (bb1ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bb198:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bb19a:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bb19e:	a902      	add	r1, sp, #8
   bb1a0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bb1a4:	f7ff ff95 	bl	bb0d2 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bb1a8:	e7cd      	b.n	bb146 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bb1aa:	bf00      	nop
   bb1ac:	2003e698 	.word	0x2003e698
   bb1b0:	ffff0000 	.word	0xffff0000
   bb1b4:	000bd907 	.word	0x000bd907
   bb1b8:	000bd900 	.word	0x000bd900

000bb1bc <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bb1bc:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bb1be:	2420      	movs	r4, #32
{
   bb1c0:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bb1c2:	4622      	mov	r2, r4
   bb1c4:	2100      	movs	r1, #0
   bb1c6:	4668      	mov	r0, sp
   bb1c8:	f001 f9c0 	bl	bc54c <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bb1cc:	2100      	movs	r1, #0
   bb1ce:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bb1d0:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bb1d4:	f7fd f80c 	bl	b81f0 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bb1d8:	9801      	ldr	r0, [sp, #4]
   bb1da:	b008      	add	sp, #32
   bb1dc:	bd10      	pop	{r4, pc}
	...

000bb1e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bb1e0:	4b05      	ldr	r3, [pc, #20]	; (bb1f8 <_GLOBAL__sub_I_System+0x18>)
   bb1e2:	2202      	movs	r2, #2
   bb1e4:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bb1e6:	4b05      	ldr	r3, [pc, #20]	; (bb1fc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bb1e8:	4a05      	ldr	r2, [pc, #20]	; (bb200 <_GLOBAL__sub_I_System+0x20>)
   bb1ea:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bb1ec:	2000      	movs	r0, #0
   bb1ee:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bb1f2:	f7fd ba27 	b.w	b8644 <set_system_mode>
   bb1f6:	bf00      	nop
   bb1f8:	2003e6a4 	.word	0x2003e6a4
   bb1fc:	2003e698 	.word	0x2003e698
   bb200:	ffff0000 	.word	0xffff0000

000bb204 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bb204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bb208:	4a15      	ldr	r2, [pc, #84]	; (bb260 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bb20a:	f8df 8060 	ldr.w	r8, [pc, #96]	; bb26c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bb20e:	e9d2 6300 	ldrd	r6, r3, [r2]
   bb212:	1980      	adds	r0, r0, r6
   bb214:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bb218:	4b12      	ldr	r3, [pc, #72]	; (bb264 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bb21a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bb21e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bb222:	1986      	adds	r6, r0, r6
   bb224:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bb228:	42bb      	cmp	r3, r7
   bb22a:	bf08      	it	eq
   bb22c:	42b2      	cmpeq	r2, r6
{
   bb22e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bb230:	d013      	beq.n	bb25a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bb232:	a903      	add	r1, sp, #12
   bb234:	4668      	mov	r0, sp
   bb236:	e9cd 6700 	strd	r6, r7, [sp]
   bb23a:	f7fd fb5b 	bl	b88f4 <localtime_r>
	calendar_time.tm_year += 1900;
   bb23e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb240:	4d09      	ldr	r5, [pc, #36]	; (bb268 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bb242:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb246:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bb248:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb24a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb24c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bb24e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bb250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bb252:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bb256:	6823      	ldr	r3, [r4, #0]
   bb258:	602b      	str	r3, [r5, #0]
    }
}
   bb25a:	b00c      	add	sp, #48	; 0x30
   bb25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb260:	2003e6e0 	.word	0x2003e6e0
   bb264:	2003e6d8 	.word	0x2003e6d8
   bb268:	2003e6b0 	.word	0x2003e6b0
   bb26c:	2003e6e8 	.word	0x2003e6e8

000bb270 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bb270:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb272:	2000      	movs	r0, #0
   bb274:	f7fd fa66 	bl	b8744 <spark_sync_time_pending>
   bb278:	b128      	cbz	r0, bb286 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bb27a:	f7fd fa53 	bl	b8724 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb27e:	f080 0001 	eor.w	r0, r0, #1
   bb282:	b2c0      	uxtb	r0, r0
    }
   bb284:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bb286:	2001      	movs	r0, #1
   bb288:	e7fc      	b.n	bb284 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bb28c <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bb28c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bb28e:	f7ff ffb9 	bl	bb204 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bb292:	4b01      	ldr	r3, [pc, #4]	; (bb298 <_ZN9TimeClass3dayEx+0xc>)
   bb294:	68d8      	ldr	r0, [r3, #12]
   bb296:	bd08      	pop	{r3, pc}
   bb298:	2003e6b0 	.word	0x2003e6b0

000bb29c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bb29c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb29e:	4602      	mov	r2, r0
   bb2a0:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb2a2:	4668      	mov	r0, sp
    struct timeval tv = {
   bb2a4:	2100      	movs	r1, #0
    };
   bb2a6:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bb2aa:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bb2ae:	f7fc ffdf 	bl	b8270 <hal_rtc_set_time>
   bb2b2:	4602      	mov	r2, r0
   bb2b4:	b910      	cbnz	r0, bb2bc <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bb2b6:	4601      	mov	r1, r0
   bb2b8:	f7fd f9fc 	bl	b86b4 <system_notify_time_changed>
    }
}
   bb2bc:	b005      	add	sp, #20
   bb2be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb2c4 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bb2c4:	b530      	push	{r4, r5, lr}
   bb2c6:	b093      	sub	sp, #76	; 0x4c
   bb2c8:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bb2cc:	4b19      	ldr	r3, [pc, #100]	; (bb334 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bb2ce:	4604      	mov	r4, r0
    t += time_zone_cache;
   bb2d0:	e9d3 1000 	ldrd	r1, r0, [r3]
   bb2d4:	9b01      	ldr	r3, [sp, #4]
   bb2d6:	1852      	adds	r2, r2, r1
   bb2d8:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bb2dc:	4816      	ldr	r0, [pc, #88]	; (bb338 <_ZN9TimeClass7timeStrEx+0x74>)
   bb2de:	e9d0 1000 	ldrd	r1, r0, [r0]
   bb2e2:	1852      	adds	r2, r2, r1
   bb2e4:	eb43 0300 	adc.w	r3, r3, r0
   bb2e8:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bb2ec:	2224      	movs	r2, #36	; 0x24
   bb2ee:	eb0d 0002 	add.w	r0, sp, r2
   bb2f2:	2100      	movs	r1, #0
   bb2f4:	f001 f92a 	bl	bc54c <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bb2f8:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bb2fa:	a909      	add	r1, sp, #36	; 0x24
   bb2fc:	4668      	mov	r0, sp
   bb2fe:	f7fd faf9 	bl	b88f4 <localtime_r>
    char ascstr[26] = {};
   bb302:	2216      	movs	r2, #22
   bb304:	4629      	mov	r1, r5
   bb306:	a803      	add	r0, sp, #12
   bb308:	9502      	str	r5, [sp, #8]
   bb30a:	f001 f91f 	bl	bc54c <memset>
    asctime_r(&calendar_time, ascstr);
   bb30e:	a902      	add	r1, sp, #8
   bb310:	a809      	add	r0, sp, #36	; 0x24
   bb312:	f001 f8a1 	bl	bc458 <asctime_r>
    int len = strlen(ascstr);
   bb316:	a802      	add	r0, sp, #8
   bb318:	f001 f9d3 	bl	bc6c2 <strlen>
    ascstr[len-1] = 0; // remove final newline
   bb31c:	ab12      	add	r3, sp, #72	; 0x48
   bb31e:	4418      	add	r0, r3
    return String(ascstr);
   bb320:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bb322:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bb326:	4620      	mov	r0, r4
   bb328:	f7ff fe27 	bl	baf7a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb32c:	4620      	mov	r0, r4
   bb32e:	b013      	add	sp, #76	; 0x4c
   bb330:	bd30      	pop	{r4, r5, pc}
   bb332:	bf00      	nop
   bb334:	2003e6e0 	.word	0x2003e6e0
   bb338:	2003e6d8 	.word	0x2003e6d8

000bb33c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bb33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb340:	b0a4      	sub	sp, #144	; 0x90
   bb342:	4607      	mov	r7, r0
   bb344:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb346:	a814      	add	r0, sp, #80	; 0x50
{
   bb348:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb34a:	223f      	movs	r2, #63	; 0x3f
{
   bb34c:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb34e:	f001 f9d4 	bl	bc6fa <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb352:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb354:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb356:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb35a:	f001 f9b2 	bl	bc6c2 <strlen>
   bb35e:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bb360:	bb4c      	cbnz	r4, bb3b6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bb362:	4929      	ldr	r1, [pc, #164]	; (bb408 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bb364:	a803      	add	r0, sp, #12
   bb366:	f001 f986 	bl	bc676 <strcpy>
   bb36a:	ac14      	add	r4, sp, #80	; 0x50
{
   bb36c:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bb36e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bb372:	45b1      	cmp	r9, r6
   bb374:	d934      	bls.n	bb3e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bb376:	7823      	ldrb	r3, [r4, #0]
   bb378:	2b25      	cmp	r3, #37	; 0x25
   bb37a:	f106 0a01 	add.w	sl, r6, #1
   bb37e:	d117      	bne.n	bb3b0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bb380:	7863      	ldrb	r3, [r4, #1]
   bb382:	2b7a      	cmp	r3, #122	; 0x7a
   bb384:	d114      	bne.n	bb3b0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bb386:	a803      	add	r0, sp, #12
   bb388:	f001 f99b 	bl	bc6c2 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb38c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bb38e:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb390:	1830      	adds	r0, r6, r0
   bb392:	4418      	add	r0, r3
   bb394:	eba9 0206 	sub.w	r2, r9, r6
   bb398:	1ca1      	adds	r1, r4, #2
   bb39a:	f001 f8af 	bl	bc4fc <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bb39e:	462a      	mov	r2, r5
   bb3a0:	a903      	add	r1, sp, #12
   bb3a2:	4620      	mov	r0, r4
   bb3a4:	f001 f8aa 	bl	bc4fc <memcpy>
            len = strlen(format_str);
   bb3a8:	a814      	add	r0, sp, #80	; 0x50
   bb3aa:	f001 f98a 	bl	bc6c2 <strlen>
   bb3ae:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bb3b0:	3401      	adds	r4, #1
   bb3b2:	4656      	mov	r6, sl
   bb3b4:	e7db      	b.n	bb36e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bb3b6:	233c      	movs	r3, #60	; 0x3c
   bb3b8:	fb94 f2f3 	sdiv	r2, r4, r3
   bb3bc:	2a00      	cmp	r2, #0
   bb3be:	bfb8      	it	lt
   bb3c0:	4252      	neglt	r2, r2
   bb3c2:	fbb2 f1f3 	udiv	r1, r2, r3
   bb3c6:	fb03 2211 	mls	r2, r3, r1, r2
   bb3ca:	9200      	str	r2, [sp, #0]
   bb3cc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bb3d0:	4a0e      	ldr	r2, [pc, #56]	; (bb40c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bb3d2:	fb94 f3f3 	sdiv	r3, r4, r3
   bb3d6:	2110      	movs	r1, #16
   bb3d8:	a803      	add	r0, sp, #12
   bb3da:	f7fd fa4b 	bl	b8874 <snprintf>
   bb3de:	e7c4      	b.n	bb36a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bb3e0:	2100      	movs	r1, #0
   bb3e2:	222e      	movs	r2, #46	; 0x2e
   bb3e4:	a808      	add	r0, sp, #32
   bb3e6:	9107      	str	r1, [sp, #28]
   bb3e8:	f001 f8b0 	bl	bc54c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bb3ec:	4643      	mov	r3, r8
   bb3ee:	aa14      	add	r2, sp, #80	; 0x50
   bb3f0:	2132      	movs	r1, #50	; 0x32
   bb3f2:	a807      	add	r0, sp, #28
   bb3f4:	f7fd fa76 	bl	b88e4 <strftime>
    return String(buf);
   bb3f8:	a907      	add	r1, sp, #28
   bb3fa:	4638      	mov	r0, r7
   bb3fc:	f7ff fdbd 	bl	baf7a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb400:	4638      	mov	r0, r7
   bb402:	b024      	add	sp, #144	; 0x90
   bb404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb408:	000bd92e 	.word	0x000bd92e
   bb40c:	000bd930 	.word	0x000bd930

000bb410 <_ZN9TimeClass6formatExPKc>:
{
   bb410:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb412:	b08d      	sub	sp, #52	; 0x34
   bb414:	e9cd 2300 	strd	r2, r3, [sp]
   bb418:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bb41a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bb41c:	b915      	cbnz	r5, bb424 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bb41e:	4b19      	ldr	r3, [pc, #100]	; (bb484 <_ZN9TimeClass6formatExPKc+0x74>)
   bb420:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bb422:	b12d      	cbz	r5, bb430 <_ZN9TimeClass6formatExPKc+0x20>
   bb424:	4b18      	ldr	r3, [pc, #96]	; (bb488 <_ZN9TimeClass6formatExPKc+0x78>)
   bb426:	4628      	mov	r0, r5
   bb428:	6819      	ldr	r1, [r3, #0]
   bb42a:	f001 f91a 	bl	bc662 <strcmp>
   bb42e:	b938      	cbnz	r0, bb440 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bb430:	e9dd 2300 	ldrd	r2, r3, [sp]
   bb434:	4620      	mov	r0, r4
   bb436:	f7ff ff45 	bl	bb2c4 <_ZN9TimeClass7timeStrEx>
}
   bb43a:	4620      	mov	r0, r4
   bb43c:	b00d      	add	sp, #52	; 0x34
   bb43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bb440:	4e12      	ldr	r6, [pc, #72]	; (bb48c <_ZN9TimeClass6formatExPKc+0x7c>)
   bb442:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bb444:	4f12      	ldr	r7, [pc, #72]	; (bb490 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bb446:	e9d6 3200 	ldrd	r3, r2, [r6]
   bb44a:	185b      	adds	r3, r3, r1
   bb44c:	9901      	ldr	r1, [sp, #4]
   bb44e:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bb452:	e9d7 0100 	ldrd	r0, r1, [r7]
   bb456:	181b      	adds	r3, r3, r0
   bb458:	eb42 0201 	adc.w	r2, r2, r1
   bb45c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bb460:	2100      	movs	r1, #0
   bb462:	2224      	movs	r2, #36	; 0x24
   bb464:	a803      	add	r0, sp, #12
   bb466:	f001 f871 	bl	bc54c <memset>
    localtime_r(&t, &calendar_time);
   bb46a:	a903      	add	r1, sp, #12
   bb46c:	4668      	mov	r0, sp
   bb46e:	f7fd fa41 	bl	b88f4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bb472:	6832      	ldr	r2, [r6, #0]
   bb474:	683b      	ldr	r3, [r7, #0]
   bb476:	a903      	add	r1, sp, #12
   bb478:	4413      	add	r3, r2
   bb47a:	4620      	mov	r0, r4
   bb47c:	462a      	mov	r2, r5
   bb47e:	f7ff ff5d 	bl	bb33c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bb482:	e7da      	b.n	bb43a <_ZN9TimeClass6formatExPKc+0x2a>
   bb484:	2003e6ac 	.word	0x2003e6ac
   bb488:	2003dfa4 	.word	0x2003dfa4
   bb48c:	2003e6e0 	.word	0x2003e6e0
   bb490:	2003e6d8 	.word	0x2003e6d8

000bb494 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bb494:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bb496:	2000      	movs	r0, #0
   bb498:	f7fc fed2 	bl	b8240 <hal_rtc_time_is_valid>
    if (rtcstate)
   bb49c:	4604      	mov	r4, r0
   bb49e:	b9a0      	cbnz	r0, bb4ca <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bb4a0:	f7fd f8c8 	bl	b8634 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bb4a4:	2801      	cmp	r0, #1
   bb4a6:	d110      	bne.n	bb4ca <_ZN9TimeClass7isValidEv+0x36>
   bb4a8:	4620      	mov	r0, r4
   bb4aa:	f7fd f8fb 	bl	b86a4 <system_thread_get_state>
   bb4ae:	b960      	cbnz	r0, bb4ca <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bb4b0:	f7ff fede 	bl	bb270 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bb4b4:	b910      	cbnz	r0, bb4bc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bb4b6:	f7fd f92d 	bl	b8714 <spark_process>
        while (_while() && !_condition()) {
   bb4ba:	e7f9      	b.n	bb4b0 <_ZN9TimeClass7isValidEv+0x1c>
   bb4bc:	f7ff fed8 	bl	bb270 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bb4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bb4c4:	2000      	movs	r0, #0
   bb4c6:	f7fc bebb 	b.w	b8240 <hal_rtc_time_is_valid>
}
   bb4ca:	4620      	mov	r0, r4
   bb4cc:	bd10      	pop	{r4, pc}

000bb4ce <_ZN9TimeClass3nowEv>:
{
   bb4ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bb4d0:	f7ff ffe0 	bl	bb494 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bb4d4:	2210      	movs	r2, #16
   bb4d6:	2100      	movs	r1, #0
   bb4d8:	4668      	mov	r0, sp
   bb4da:	f001 f837 	bl	bc54c <memset>
    hal_rtc_get_time(&tv, nullptr);
   bb4de:	2100      	movs	r1, #0
   bb4e0:	4668      	mov	r0, sp
   bb4e2:	f7fc febd 	bl	b8260 <hal_rtc_get_time>
}
   bb4e6:	9800      	ldr	r0, [sp, #0]
   bb4e8:	b005      	add	sp, #20
   bb4ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb4f0 <_ZN9TimeClass3dayEv>:
{
   bb4f0:	b508      	push	{r3, lr}
	return day(now());
   bb4f2:	f7ff ffec 	bl	bb4ce <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bb4f6:	17c1      	asrs	r1, r0, #31
   bb4f8:	f7ff fe84 	bl	bb204 <_ZL22Refresh_UnixTime_Cachex>
}
   bb4fc:	4b01      	ldr	r3, [pc, #4]	; (bb504 <_ZN9TimeClass3dayEv+0x14>)
   bb4fe:	68d8      	ldr	r0, [r3, #12]
   bb500:	bd08      	pop	{r3, pc}
   bb502:	bf00      	nop
   bb504:	2003e6b0 	.word	0x2003e6b0

000bb508 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb508:	4b02      	ldr	r3, [pc, #8]	; (bb514 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb50a:	681a      	ldr	r2, [r3, #0]
   bb50c:	4b02      	ldr	r3, [pc, #8]	; (bb518 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb50e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb510:	4770      	bx	lr
   bb512:	bf00      	nop
   bb514:	2003dfa4 	.word	0x2003dfa4
   bb518:	2003e6ac 	.word	0x2003e6ac

000bb51c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb51c:	4770      	bx	lr

000bb51e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb51e:	7441      	strb	r1, [r0, #17]
}
   bb520:	4770      	bx	lr

000bb522 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb522:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb524:	7c00      	ldrb	r0, [r0, #16]
   bb526:	f7fc fff3 	bl	b8510 <hal_usart_available_data_for_write>
}
   bb52a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb52e:	bd08      	pop	{r3, pc}

000bb530 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb530:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb532:	7c00      	ldrb	r0, [r0, #16]
   bb534:	f7fc ffc4 	bl	b84c0 <hal_usart_available>
}
   bb538:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb53c:	bd08      	pop	{r3, pc}

000bb53e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb53e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb540:	7c00      	ldrb	r0, [r0, #16]
   bb542:	f7fc ffcd 	bl	b84e0 <hal_usart_peek>
}
   bb546:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb54a:	bd08      	pop	{r3, pc}

000bb54c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb54c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb54e:	7c00      	ldrb	r0, [r0, #16]
   bb550:	f7fc ffbe 	bl	b84d0 <hal_usart_read>
}
   bb554:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb558:	bd08      	pop	{r3, pc}

000bb55a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb55a:	7c00      	ldrb	r0, [r0, #16]
   bb55c:	f7fc bfc8 	b.w	b84f0 <hal_usart_flush>

000bb560 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb560:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb562:	7c45      	ldrb	r5, [r0, #17]
{
   bb564:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb566:	b12d      	cbz	r5, bb574 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb568:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb56a:	b003      	add	sp, #12
   bb56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb570:	f7fc bf9e 	b.w	b84b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb574:	7c00      	ldrb	r0, [r0, #16]
   bb576:	9101      	str	r1, [sp, #4]
   bb578:	f7fc ffca 	bl	b8510 <hal_usart_available_data_for_write>
   bb57c:	2800      	cmp	r0, #0
   bb57e:	9901      	ldr	r1, [sp, #4]
   bb580:	dcf2      	bgt.n	bb568 <_ZN11USARTSerial5writeEh+0x8>
}
   bb582:	4628      	mov	r0, r5
   bb584:	b003      	add	sp, #12
   bb586:	bd30      	pop	{r4, r5, pc}

000bb588 <_ZN11USARTSerialD0Ev>:
   bb588:	b510      	push	{r4, lr}
   bb58a:	2114      	movs	r1, #20
   bb58c:	4604      	mov	r4, r0
   bb58e:	f7f8 fd86 	bl	b409e <_ZdlPvj>
   bb592:	4620      	mov	r0, r4
   bb594:	bd10      	pop	{r4, pc}
	...

000bb598 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb598:	b510      	push	{r4, lr}
   bb59a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb59e:	4604      	mov	r4, r0
   bb5a0:	4608      	mov	r0, r1
   bb5a2:	4611      	mov	r1, r2
   bb5a4:	2200      	movs	r2, #0
   bb5a6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb5aa:	4b04      	ldr	r3, [pc, #16]	; (bb5bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb5ac:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb5ae:	2301      	movs	r3, #1
  _serial = serial;
   bb5b0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb5b2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb5b4:	f7fc ffbc 	bl	b8530 <hal_usart_init_ex>
}
   bb5b8:	4620      	mov	r0, r4
   bb5ba:	bd10      	pop	{r4, pc}
   bb5bc:	000bd960 	.word	0x000bd960

000bb5c0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb5c0:	7c00      	ldrb	r0, [r0, #16]
   bb5c2:	2300      	movs	r3, #0
   bb5c4:	f7fc bfac 	b.w	b8520 <hal_usart_begin_config>

000bb5c8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb5c8:	2200      	movs	r2, #0
   bb5ca:	f7ff bff9 	b.w	bb5c0 <_ZN11USARTSerial5beginEmm>

000bb5ce <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb5ce:	7c00      	ldrb	r0, [r0, #16]
   bb5d0:	f7fc bf66 	b.w	b84a0 <hal_usart_end>

000bb5d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb5d4:	7441      	strb	r1, [r0, #17]
}
   bb5d6:	4770      	bx	lr

000bb5d8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb5d8:	4770      	bx	lr

000bb5da <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb5da:	4770      	bx	lr

000bb5dc <_ZN9USBSerial4readEv>:
{
   bb5dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb5de:	2100      	movs	r1, #0
   bb5e0:	7c00      	ldrb	r0, [r0, #16]
   bb5e2:	f7fc ffd5 	bl	b8590 <HAL_USB_USART_Receive_Data>
}
   bb5e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb5ea:	bd08      	pop	{r3, pc}

000bb5ec <_ZN9USBSerial4peekEv>:
{
   bb5ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb5ee:	2101      	movs	r1, #1
   bb5f0:	7c00      	ldrb	r0, [r0, #16]
   bb5f2:	f7fc ffcd 	bl	b8590 <HAL_USB_USART_Receive_Data>
}
   bb5f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb5fa:	bd08      	pop	{r3, pc}

000bb5fc <_ZN9USBSerial17availableForWriteEv>:
{
   bb5fc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb5fe:	7c00      	ldrb	r0, [r0, #16]
   bb600:	f7fc ffbe 	bl	b8580 <HAL_USB_USART_Available_Data_For_Write>
}
   bb604:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb608:	bd08      	pop	{r3, pc}

000bb60a <_ZN9USBSerial9availableEv>:
{
   bb60a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb60c:	7c00      	ldrb	r0, [r0, #16]
   bb60e:	f7fc ffaf 	bl	b8570 <HAL_USB_USART_Available_Data>
}
   bb612:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb616:	bd08      	pop	{r3, pc}

000bb618 <_ZN9USBSerial5writeEh>:
{
   bb618:	b513      	push	{r0, r1, r4, lr}
   bb61a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb61c:	7c00      	ldrb	r0, [r0, #16]
{
   bb61e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb620:	f7fc ffae 	bl	b8580 <HAL_USB_USART_Available_Data_For_Write>
   bb624:	2800      	cmp	r0, #0
   bb626:	9901      	ldr	r1, [sp, #4]
   bb628:	dc01      	bgt.n	bb62e <_ZN9USBSerial5writeEh+0x16>
   bb62a:	7c60      	ldrb	r0, [r4, #17]
   bb62c:	b120      	cbz	r0, bb638 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb62e:	7c20      	ldrb	r0, [r4, #16]
   bb630:	f7fc ffb6 	bl	b85a0 <HAL_USB_USART_Send_Data>
   bb634:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb638:	b002      	add	sp, #8
   bb63a:	bd10      	pop	{r4, pc}

000bb63c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb63c:	7c00      	ldrb	r0, [r0, #16]
   bb63e:	f7fc bfb7 	b.w	b85b0 <HAL_USB_USART_Flush_Data>

000bb642 <_ZN9USBSerialD0Ev>:
   bb642:	b510      	push	{r4, lr}
   bb644:	2114      	movs	r1, #20
   bb646:	4604      	mov	r4, r0
   bb648:	f7f8 fd29 	bl	b409e <_ZdlPvj>
   bb64c:	4620      	mov	r0, r4
   bb64e:	bd10      	pop	{r4, pc}

000bb650 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb650:	b510      	push	{r4, lr}
   bb652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb656:	4604      	mov	r4, r0
   bb658:	4608      	mov	r0, r1
   bb65a:	2100      	movs	r1, #0
   bb65c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb660:	4b04      	ldr	r3, [pc, #16]	; (bb674 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb662:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb664:	2301      	movs	r3, #1
  _serial = serial;
   bb666:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb668:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb66a:	4611      	mov	r1, r2
   bb66c:	f7fc ff68 	bl	b8540 <HAL_USB_USART_Init>
}
   bb670:	4620      	mov	r0, r4
   bb672:	bd10      	pop	{r4, pc}
   bb674:	000bd990 	.word	0x000bd990

000bb678 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb678:	7c00      	ldrb	r0, [r0, #16]
   bb67a:	2200      	movs	r2, #0
   bb67c:	f7fc bf68 	b.w	b8550 <HAL_USB_USART_Begin>

000bb680 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bb680:	7c00      	ldrb	r0, [r0, #16]
   bb682:	f7fc bf6d 	b.w	b8560 <HAL_USB_USART_End>

000bb686 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bb686:	7c00      	ldrb	r0, [r0, #16]
   bb688:	f7fc bf9a 	b.w	b85c0 <HAL_USB_USART_Is_Connected>

000bb68c <_Z19acquireSerialBufferv>:
{
   bb68c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb68e:	2214      	movs	r2, #20
{
   bb690:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb692:	2100      	movs	r1, #0
   bb694:	f000 ff5a 	bl	bc54c <memset>
}
   bb698:	4620      	mov	r0, r4
   bb69a:	bd10      	pop	{r4, pc}

000bb69c <_Z16_fetch_usbserialv>:
{
   bb69c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb69e:	4c0f      	ldr	r4, [pc, #60]	; (bb6dc <_Z16_fetch_usbserialv+0x40>)
{
   bb6a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb6a2:	a803      	add	r0, sp, #12
   bb6a4:	f7ff fff2 	bl	bb68c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb6a8:	7821      	ldrb	r1, [r4, #0]
   bb6aa:	f3bf 8f5b 	dmb	ish
   bb6ae:	f011 0101 	ands.w	r1, r1, #1
   bb6b2:	d10f      	bne.n	bb6d4 <_Z16_fetch_usbserialv+0x38>
   bb6b4:	4620      	mov	r0, r4
   bb6b6:	9101      	str	r1, [sp, #4]
   bb6b8:	f7f8 fd00 	bl	b40bc <__cxa_guard_acquire>
   bb6bc:	9901      	ldr	r1, [sp, #4]
   bb6be:	b148      	cbz	r0, bb6d4 <_Z16_fetch_usbserialv+0x38>
   bb6c0:	aa03      	add	r2, sp, #12
   bb6c2:	4807      	ldr	r0, [pc, #28]	; (bb6e0 <_Z16_fetch_usbserialv+0x44>)
   bb6c4:	f7ff ffc4 	bl	bb650 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb6c8:	4620      	mov	r0, r4
   bb6ca:	f7f8 fcfc 	bl	b40c6 <__cxa_guard_release>
   bb6ce:	4805      	ldr	r0, [pc, #20]	; (bb6e4 <_Z16_fetch_usbserialv+0x48>)
   bb6d0:	f000 fee8 	bl	bc4a4 <atexit>
	return _usbserial;
}
   bb6d4:	4802      	ldr	r0, [pc, #8]	; (bb6e0 <_Z16_fetch_usbserialv+0x44>)
   bb6d6:	b008      	add	sp, #32
   bb6d8:	bd10      	pop	{r4, pc}
   bb6da:	bf00      	nop
   bb6dc:	2003e6f0 	.word	0x2003e6f0
   bb6e0:	2003e6f4 	.word	0x2003e6f4
   bb6e4:	000bb5d9 	.word	0x000bb5d9

000bb6e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb6e8:	4b01      	ldr	r3, [pc, #4]	; (bb6f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb6ea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb6ec:	4770      	bx	lr
   bb6ee:	bf00      	nop
   bb6f0:	2003dfa8 	.word	0x2003dfa8

000bb6f4 <serialEventRun>:
{
   bb6f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb6f6:	4b0b      	ldr	r3, [pc, #44]	; (bb724 <serialEventRun+0x30>)
   bb6f8:	b143      	cbz	r3, bb70c <serialEventRun+0x18>
   bb6fa:	f7ff ffcf 	bl	bb69c <_Z16_fetch_usbserialv>
   bb6fe:	6803      	ldr	r3, [r0, #0]
   bb700:	691b      	ldr	r3, [r3, #16]
   bb702:	4798      	blx	r3
   bb704:	2800      	cmp	r0, #0
   bb706:	dd01      	ble.n	bb70c <serialEventRun+0x18>
        serialEvent();
   bb708:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb70c:	4b06      	ldr	r3, [pc, #24]	; (bb728 <serialEventRun+0x34>)
   bb70e:	b143      	cbz	r3, bb722 <serialEventRun+0x2e>
   bb710:	f000 f9c2 	bl	bba98 <_Z22__fetch_global_Serial1v>
   bb714:	6803      	ldr	r3, [r0, #0]
   bb716:	691b      	ldr	r3, [r3, #16]
   bb718:	4798      	blx	r3
   bb71a:	2800      	cmp	r0, #0
   bb71c:	dd01      	ble.n	bb722 <serialEventRun+0x2e>
        serialEvent1();
   bb71e:	f3af 8000 	nop.w
}
   bb722:	bd08      	pop	{r3, pc}
	...

000bb72c <_post_loop>:
{
   bb72c:	b508      	push	{r3, lr}
	serialEventRun();
   bb72e:	f7ff ffe1 	bl	bb6f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb732:	f7fc fd7d 	bl	b8230 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb736:	4b01      	ldr	r3, [pc, #4]	; (bb73c <_post_loop+0x10>)
   bb738:	6018      	str	r0, [r3, #0]
}
   bb73a:	bd08      	pop	{r3, pc}
   bb73c:	2003e710 	.word	0x2003e710

000bb740 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb740:	4805      	ldr	r0, [pc, #20]	; (bb758 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb742:	4a06      	ldr	r2, [pc, #24]	; (bb75c <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb744:	4906      	ldr	r1, [pc, #24]	; (bb760 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb746:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb748:	1a12      	subs	r2, r2, r0
   bb74a:	f000 fed7 	bl	bc4fc <memcpy>
    __backup_sram_signature = signature;
   bb74e:	4b05      	ldr	r3, [pc, #20]	; (bb764 <_Z33system_initialize_user_backup_ramv+0x24>)
   bb750:	4a05      	ldr	r2, [pc, #20]	; (bb768 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb752:	601a      	str	r2, [r3, #0]
}
   bb754:	bd08      	pop	{r3, pc}
   bb756:	bf00      	nop
   bb758:	2003f400 	.word	0x2003f400
   bb75c:	2003f404 	.word	0x2003f404
   bb760:	000bdc44 	.word	0x000bdc44
   bb764:	2003f400 	.word	0x2003f400
   bb768:	9a271c1e 	.word	0x9a271c1e

000bb76c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb76c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb76e:	2300      	movs	r3, #0
   bb770:	9300      	str	r3, [sp, #0]
   bb772:	461a      	mov	r2, r3
   bb774:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb778:	f7fc ffae 	bl	b86d8 <system_ctrl_set_result>
}
   bb77c:	b003      	add	sp, #12
   bb77e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb784 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb784:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb786:	8843      	ldrh	r3, [r0, #2]
   bb788:	2b0a      	cmp	r3, #10
   bb78a:	d008      	beq.n	bb79e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb78c:	2b50      	cmp	r3, #80	; 0x50
   bb78e:	d10b      	bne.n	bb7a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb790:	4b09      	ldr	r3, [pc, #36]	; (bb7b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb792:	681b      	ldr	r3, [r3, #0]
   bb794:	b14b      	cbz	r3, bb7aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb796:	b003      	add	sp, #12
   bb798:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb79c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb79e:	f7ff ffe5 	bl	bb76c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb7a2:	b003      	add	sp, #12
   bb7a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb7a8:	2300      	movs	r3, #0
   bb7aa:	9300      	str	r3, [sp, #0]
   bb7ac:	461a      	mov	r2, r3
   bb7ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb7b2:	f7fc ff91 	bl	b86d8 <system_ctrl_set_result>
}
   bb7b6:	e7f4      	b.n	bb7a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb7b8:	2003e70c 	.word	0x2003e70c

000bb7bc <module_user_init_hook>:
{
   bb7bc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb7be:	4812      	ldr	r0, [pc, #72]	; (bb808 <module_user_init_hook+0x4c>)
   bb7c0:	2100      	movs	r1, #0
   bb7c2:	f7fd f887 	bl	b88d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb7c6:	4b11      	ldr	r3, [pc, #68]	; (bb80c <module_user_init_hook+0x50>)
   bb7c8:	681a      	ldr	r2, [r3, #0]
   bb7ca:	4b11      	ldr	r3, [pc, #68]	; (bb810 <module_user_init_hook+0x54>)
   bb7cc:	429a      	cmp	r2, r3
   bb7ce:	4b11      	ldr	r3, [pc, #68]	; (bb814 <module_user_init_hook+0x58>)
   bb7d0:	bf0c      	ite	eq
   bb7d2:	2201      	moveq	r2, #1
   bb7d4:	2200      	movne	r2, #0
   bb7d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb7d8:	d001      	beq.n	bb7de <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb7da:	f7ff ffb1 	bl	bb740 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb7de:	f7fc fd17 	bl	b8210 <HAL_RNG_GetRandomNumber>
   bb7e2:	4604      	mov	r4, r0
    srand(seed);
   bb7e4:	f000 feba 	bl	bc55c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb7e8:	4b0b      	ldr	r3, [pc, #44]	; (bb818 <module_user_init_hook+0x5c>)
   bb7ea:	b113      	cbz	r3, bb7f2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb7ec:	4620      	mov	r0, r4
   bb7ee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb7f2:	2100      	movs	r1, #0
   bb7f4:	4808      	ldr	r0, [pc, #32]	; (bb818 <module_user_init_hook+0x5c>)
   bb7f6:	f7fc ffb5 	bl	b8764 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb7fe:	4807      	ldr	r0, [pc, #28]	; (bb81c <module_user_init_hook+0x60>)
   bb800:	2100      	movs	r1, #0
   bb802:	f7fc bf5f 	b.w	b86c4 <system_ctrl_set_app_request_handler>
   bb806:	bf00      	nop
   bb808:	000bb6e9 	.word	0x000bb6e9
   bb80c:	2003f400 	.word	0x2003f400
   bb810:	9a271c1e 	.word	0x9a271c1e
   bb814:	2003e708 	.word	0x2003e708
   bb818:	00000000 	.word	0x00000000
   bb81c:	000bb785 	.word	0x000bb785

000bb820 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bb820:	b508      	push	{r3, lr}
   bb822:	4b02      	ldr	r3, [pc, #8]	; (bb82c <spark_protocol_instance+0xc>)
   bb824:	681b      	ldr	r3, [r3, #0]
   bb826:	681b      	ldr	r3, [r3, #0]
   bb828:	9301      	str	r3, [sp, #4]
   bb82a:	bd08      	pop	{r3, pc}
   bb82c:	0003025c 	.word	0x0003025c

000bb830 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bb830:	b508      	push	{r3, lr}
   bb832:	4b02      	ldr	r3, [pc, #8]	; (bb83c <spark_protocol_set_product_id+0xc>)
   bb834:	681b      	ldr	r3, [r3, #0]
   bb836:	685b      	ldr	r3, [r3, #4]
   bb838:	9301      	str	r3, [sp, #4]
   bb83a:	bd08      	pop	{r3, pc}
   bb83c:	0003025c 	.word	0x0003025c

000bb840 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bb840:	b508      	push	{r3, lr}
   bb842:	4b02      	ldr	r3, [pc, #8]	; (bb84c <spark_protocol_set_product_firmware_version+0xc>)
   bb844:	681b      	ldr	r3, [r3, #0]
   bb846:	689b      	ldr	r3, [r3, #8]
   bb848:	9301      	str	r3, [sp, #4]
   bb84a:	bd08      	pop	{r3, pc}
   bb84c:	0003025c 	.word	0x0003025c

000bb850 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb850:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb852:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb854:	d902      	bls.n	bb85c <pinAvailable+0xc>
    return false;
   bb856:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb858:	b002      	add	sp, #8
   bb85a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb85c:	f1a0 030b 	sub.w	r3, r0, #11
   bb860:	2b02      	cmp	r3, #2
   bb862:	d81a      	bhi.n	bb89a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb864:	4c17      	ldr	r4, [pc, #92]	; (bb8c4 <pinAvailable+0x74>)
   bb866:	7821      	ldrb	r1, [r4, #0]
   bb868:	f3bf 8f5b 	dmb	ish
   bb86c:	f011 0101 	ands.w	r1, r1, #1
   bb870:	d10b      	bne.n	bb88a <pinAvailable+0x3a>
   bb872:	4620      	mov	r0, r4
   bb874:	9101      	str	r1, [sp, #4]
   bb876:	f7f8 fc21 	bl	b40bc <__cxa_guard_acquire>
   bb87a:	9901      	ldr	r1, [sp, #4]
   bb87c:	b128      	cbz	r0, bb88a <pinAvailable+0x3a>
   bb87e:	4812      	ldr	r0, [pc, #72]	; (bb8c8 <pinAvailable+0x78>)
   bb880:	f7ff fa70 	bl	bad64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb884:	4620      	mov	r0, r4
   bb886:	f7f8 fc1e 	bl	b40c6 <__cxa_guard_release>
   bb88a:	4b0f      	ldr	r3, [pc, #60]	; (bb8c8 <pinAvailable+0x78>)
   bb88c:	7818      	ldrb	r0, [r3, #0]
   bb88e:	f7fc fddf 	bl	b8450 <hal_spi_is_enabled>
   bb892:	2800      	cmp	r0, #0
   bb894:	d1df      	bne.n	bb856 <pinAvailable+0x6>
  return true; // 'pin' is available
   bb896:	2001      	movs	r0, #1
   bb898:	e7de      	b.n	bb858 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb89a:	2801      	cmp	r0, #1
   bb89c:	d809      	bhi.n	bb8b2 <pinAvailable+0x62>
   bb89e:	f000 f897 	bl	bb9d0 <_Z19__fetch_global_Wirev>
   bb8a2:	2100      	movs	r1, #0
   bb8a4:	7c00      	ldrb	r0, [r0, #16]
   bb8a6:	f7fc fd73 	bl	b8390 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb8aa:	f080 0001 	eor.w	r0, r0, #1
   bb8ae:	b2c0      	uxtb	r0, r0
   bb8b0:	e7d2      	b.n	bb858 <pinAvailable+0x8>
   bb8b2:	3809      	subs	r0, #9
   bb8b4:	2801      	cmp	r0, #1
   bb8b6:	d8ee      	bhi.n	bb896 <pinAvailable+0x46>
   bb8b8:	f000 f8ee 	bl	bba98 <_Z22__fetch_global_Serial1v>
   bb8bc:	7c00      	ldrb	r0, [r0, #16]
   bb8be:	f7fc fe1f 	bl	b8500 <hal_usart_is_enabled>
   bb8c2:	e7f2      	b.n	bb8aa <pinAvailable+0x5a>
   bb8c4:	2003e3e0 	.word	0x2003e3e0
   bb8c8:	2003e3e4 	.word	0x2003e3e4

000bb8cc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb8cc:	2823      	cmp	r0, #35	; 0x23
{
   bb8ce:	b538      	push	{r3, r4, r5, lr}
   bb8d0:	4604      	mov	r4, r0
   bb8d2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb8d4:	d80a      	bhi.n	bb8ec <pinMode+0x20>
   bb8d6:	29ff      	cmp	r1, #255	; 0xff
   bb8d8:	d008      	beq.n	bb8ec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb8da:	f7ff ffb9 	bl	bb850 <pinAvailable>
   bb8de:	b128      	cbz	r0, bb8ec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb8e0:	4629      	mov	r1, r5
   bb8e2:	4620      	mov	r0, r4
}
   bb8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb8e8:	f7fc bcda 	b.w	b82a0 <HAL_Pin_Mode>
}
   bb8ec:	bd38      	pop	{r3, r4, r5, pc}

000bb8ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb8ee:	b538      	push	{r3, r4, r5, lr}
   bb8f0:	4604      	mov	r4, r0
   bb8f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb8f4:	f7fc fcdc 	bl	b82b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb8f8:	28ff      	cmp	r0, #255	; 0xff
   bb8fa:	d010      	beq.n	bb91e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb8fc:	2806      	cmp	r0, #6
   bb8fe:	d804      	bhi.n	bb90a <digitalWrite+0x1c>
   bb900:	234d      	movs	r3, #77	; 0x4d
   bb902:	fa23 f000 	lsr.w	r0, r3, r0
   bb906:	07c3      	lsls	r3, r0, #31
   bb908:	d409      	bmi.n	bb91e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb90a:	4620      	mov	r0, r4
   bb90c:	f7ff ffa0 	bl	bb850 <pinAvailable>
   bb910:	b128      	cbz	r0, bb91e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb912:	4629      	mov	r1, r5
   bb914:	4620      	mov	r0, r4
}
   bb916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb91a:	f7fc bcd1 	b.w	b82c0 <HAL_GPIO_Write>
}
   bb91e:	bd38      	pop	{r3, r4, r5, pc}

000bb920 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bb920:	b510      	push	{r4, lr}
   bb922:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb924:	f7fc fcc4 	bl	b82b0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb928:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb92a:	b2db      	uxtb	r3, r3
   bb92c:	2b01      	cmp	r3, #1
   bb92e:	d908      	bls.n	bb942 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb930:	4620      	mov	r0, r4
   bb932:	f7ff ff8d 	bl	bb850 <pinAvailable>
   bb936:	b120      	cbz	r0, bb942 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bb938:	4620      	mov	r0, r4
}
   bb93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bb93e:	f7fc bcc7 	b.w	b82d0 <HAL_GPIO_Read>
}
   bb942:	2000      	movs	r0, #0
   bb944:	bd10      	pop	{r4, pc}

000bb946 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb946:	280d      	cmp	r0, #13
{
   bb948:	b510      	push	{r4, lr}
   bb94a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb94c:	bf9c      	itt	ls
   bb94e:	340e      	addls	r4, #14
   bb950:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bb952:	4620      	mov	r0, r4
   bb954:	f7ff ff7c 	bl	bb850 <pinAvailable>
   bb958:	b150      	cbz	r0, bb970 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bb95a:	2103      	movs	r1, #3
   bb95c:	4620      	mov	r0, r4
   bb95e:	f7fc fc97 	bl	b8290 <HAL_Validate_Pin_Function>
   bb962:	2803      	cmp	r0, #3
   bb964:	d104      	bne.n	bb970 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb966:	4620      	mov	r0, r4
}
   bb968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb96c:	f7fc bcc8 	b.w	b8300 <hal_adc_read>
}
   bb970:	2000      	movs	r0, #0
   bb972:	bd10      	pop	{r4, pc}

000bb974 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb974:	4770      	bx	lr

000bb976 <__tcf_1>:
   bb976:	4770      	bx	lr

000bb978 <_Z17acquireWireBufferv>:
{
   bb978:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb97a:	2520      	movs	r5, #32
   bb97c:	2314      	movs	r3, #20
{
   bb97e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb980:	6003      	str	r3, [r0, #0]
   bb982:	6085      	str	r5, [r0, #8]
   bb984:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb986:	4906      	ldr	r1, [pc, #24]	; (bb9a0 <_Z17acquireWireBufferv+0x28>)
   bb988:	4628      	mov	r0, r5
   bb98a:	f000 f8ab 	bl	bbae4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb98e:	4904      	ldr	r1, [pc, #16]	; (bb9a0 <_Z17acquireWireBufferv+0x28>)
	};
   bb990:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb992:	4628      	mov	r0, r5
   bb994:	f000 f8a6 	bl	bbae4 <_ZnajRKSt9nothrow_t>
	};
   bb998:	60e0      	str	r0, [r4, #12]
}
   bb99a:	4620      	mov	r0, r4
   bb99c:	bd38      	pop	{r3, r4, r5, pc}
   bb99e:	bf00      	nop
   bb9a0:	000bd9b8 	.word	0x000bd9b8

000bb9a4 <_Z18acquireWire1Bufferv>:
   bb9a4:	b538      	push	{r3, r4, r5, lr}
   bb9a6:	2520      	movs	r5, #32
   bb9a8:	2314      	movs	r3, #20
   bb9aa:	4604      	mov	r4, r0
   bb9ac:	6003      	str	r3, [r0, #0]
   bb9ae:	6085      	str	r5, [r0, #8]
   bb9b0:	6105      	str	r5, [r0, #16]
   bb9b2:	4906      	ldr	r1, [pc, #24]	; (bb9cc <_Z18acquireWire1Bufferv+0x28>)
   bb9b4:	4628      	mov	r0, r5
   bb9b6:	f000 f895 	bl	bbae4 <_ZnajRKSt9nothrow_t>
   bb9ba:	4904      	ldr	r1, [pc, #16]	; (bb9cc <_Z18acquireWire1Bufferv+0x28>)
   bb9bc:	6060      	str	r0, [r4, #4]
   bb9be:	4628      	mov	r0, r5
   bb9c0:	f000 f890 	bl	bbae4 <_ZnajRKSt9nothrow_t>
   bb9c4:	60e0      	str	r0, [r4, #12]
   bb9c6:	4620      	mov	r0, r4
   bb9c8:	bd38      	pop	{r3, r4, r5, pc}
   bb9ca:	bf00      	nop
   bb9cc:	000bd9b8 	.word	0x000bd9b8

000bb9d0 <_Z19__fetch_global_Wirev>:
{
   bb9d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb9d2:	4d0e      	ldr	r5, [pc, #56]	; (bba0c <_Z19__fetch_global_Wirev+0x3c>)
   bb9d4:	7829      	ldrb	r1, [r5, #0]
   bb9d6:	f3bf 8f5b 	dmb	ish
   bb9da:	f011 0401 	ands.w	r4, r1, #1
{
   bb9de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb9e0:	d111      	bne.n	bba06 <_Z19__fetch_global_Wirev+0x36>
   bb9e2:	4628      	mov	r0, r5
   bb9e4:	f7f8 fb6a 	bl	b40bc <__cxa_guard_acquire>
   bb9e8:	b168      	cbz	r0, bba06 <_Z19__fetch_global_Wirev+0x36>
   bb9ea:	a801      	add	r0, sp, #4
   bb9ec:	f7ff ffc4 	bl	bb978 <_Z17acquireWireBufferv>
   bb9f0:	aa01      	add	r2, sp, #4
   bb9f2:	4621      	mov	r1, r4
   bb9f4:	4806      	ldr	r0, [pc, #24]	; (bba10 <_Z19__fetch_global_Wirev+0x40>)
   bb9f6:	f7fd fc65 	bl	b92c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb9fa:	4628      	mov	r0, r5
   bb9fc:	f7f8 fb63 	bl	b40c6 <__cxa_guard_release>
   bba00:	4804      	ldr	r0, [pc, #16]	; (bba14 <_Z19__fetch_global_Wirev+0x44>)
   bba02:	f000 fd4f 	bl	bc4a4 <atexit>
	return wire;
}
   bba06:	4802      	ldr	r0, [pc, #8]	; (bba10 <_Z19__fetch_global_Wirev+0x40>)
   bba08:	b007      	add	sp, #28
   bba0a:	bd30      	pop	{r4, r5, pc}
   bba0c:	2003e714 	.word	0x2003e714
   bba10:	2003e71c 	.word	0x2003e71c
   bba14:	000bb975 	.word	0x000bb975

000bba18 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bba18:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bba1a:	4c0e      	ldr	r4, [pc, #56]	; (bba54 <_Z20__fetch_global_Wire1v+0x3c>)
   bba1c:	7823      	ldrb	r3, [r4, #0]
   bba1e:	f3bf 8f5b 	dmb	ish
   bba22:	07db      	lsls	r3, r3, #31
{
   bba24:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bba26:	d411      	bmi.n	bba4c <_Z20__fetch_global_Wire1v+0x34>
   bba28:	4620      	mov	r0, r4
   bba2a:	f7f8 fb47 	bl	b40bc <__cxa_guard_acquire>
   bba2e:	b168      	cbz	r0, bba4c <_Z20__fetch_global_Wire1v+0x34>
   bba30:	a801      	add	r0, sp, #4
   bba32:	f7ff ffb7 	bl	bb9a4 <_Z18acquireWire1Bufferv>
   bba36:	aa01      	add	r2, sp, #4
   bba38:	2101      	movs	r1, #1
   bba3a:	4807      	ldr	r0, [pc, #28]	; (bba58 <_Z20__fetch_global_Wire1v+0x40>)
   bba3c:	f7fd fc42 	bl	b92c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bba40:	4620      	mov	r0, r4
   bba42:	f7f8 fb40 	bl	b40c6 <__cxa_guard_release>
   bba46:	4805      	ldr	r0, [pc, #20]	; (bba5c <_Z20__fetch_global_Wire1v+0x44>)
   bba48:	f000 fd2c 	bl	bc4a4 <atexit>
	return wire;
}
   bba4c:	4802      	ldr	r0, [pc, #8]	; (bba58 <_Z20__fetch_global_Wire1v+0x40>)
   bba4e:	b006      	add	sp, #24
   bba50:	bd10      	pop	{r4, pc}
   bba52:	bf00      	nop
   bba54:	2003e718 	.word	0x2003e718
   bba58:	2003e730 	.word	0x2003e730
   bba5c:	000bb977 	.word	0x000bb977

000bba60 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bba60:	4770      	bx	lr
	...

000bba64 <_Z20acquireSerial1Bufferv>:
{
   bba64:	b538      	push	{r3, r4, r5, lr}
   bba66:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bba68:	2514      	movs	r5, #20
   bba6a:	462a      	mov	r2, r5
   bba6c:	2100      	movs	r1, #0
   bba6e:	f000 fd6d 	bl	bc54c <memset>
   bba72:	8025      	strh	r5, [r4, #0]
   bba74:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bba76:	4907      	ldr	r1, [pc, #28]	; (bba94 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bba78:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bba7a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bba7c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bba7e:	f000 f831 	bl	bbae4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bba82:	4904      	ldr	r1, [pc, #16]	; (bba94 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bba84:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bba86:	4628      	mov	r0, r5
   bba88:	f000 f82c 	bl	bbae4 <_ZnajRKSt9nothrow_t>
    };
   bba8c:	60e0      	str	r0, [r4, #12]
}
   bba8e:	4620      	mov	r0, r4
   bba90:	bd38      	pop	{r3, r4, r5, pc}
   bba92:	bf00      	nop
   bba94:	000bd9b8 	.word	0x000bd9b8

000bba98 <_Z22__fetch_global_Serial1v>:
{
   bba98:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bba9a:	4d0e      	ldr	r5, [pc, #56]	; (bbad4 <_Z22__fetch_global_Serial1v+0x3c>)
   bba9c:	7829      	ldrb	r1, [r5, #0]
   bba9e:	f3bf 8f5b 	dmb	ish
   bbaa2:	f011 0401 	ands.w	r4, r1, #1
{
   bbaa6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bbaa8:	d111      	bne.n	bbace <_Z22__fetch_global_Serial1v+0x36>
   bbaaa:	4628      	mov	r0, r5
   bbaac:	f7f8 fb06 	bl	b40bc <__cxa_guard_acquire>
   bbab0:	b168      	cbz	r0, bbace <_Z22__fetch_global_Serial1v+0x36>
   bbab2:	a801      	add	r0, sp, #4
   bbab4:	f7ff ffd6 	bl	bba64 <_Z20acquireSerial1Bufferv>
   bbab8:	aa01      	add	r2, sp, #4
   bbaba:	4621      	mov	r1, r4
   bbabc:	4806      	ldr	r0, [pc, #24]	; (bbad8 <_Z22__fetch_global_Serial1v+0x40>)
   bbabe:	f7ff fd6b 	bl	bb598 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bbac2:	4628      	mov	r0, r5
   bbac4:	f7f8 faff 	bl	b40c6 <__cxa_guard_release>
   bbac8:	4804      	ldr	r0, [pc, #16]	; (bbadc <_Z22__fetch_global_Serial1v+0x44>)
   bbaca:	f000 fceb 	bl	bc4a4 <atexit>
    return serial1;
}
   bbace:	4802      	ldr	r0, [pc, #8]	; (bbad8 <_Z22__fetch_global_Serial1v+0x40>)
   bbad0:	b007      	add	sp, #28
   bbad2:	bd30      	pop	{r4, r5, pc}
   bbad4:	2003e744 	.word	0x2003e744
   bbad8:	2003e748 	.word	0x2003e748
   bbadc:	000bba61 	.word	0x000bba61

000bbae0 <_ZnwjRKSt9nothrow_t>:
   bbae0:	f7f8 bad9 	b.w	b4096 <_Znwj>

000bbae4 <_ZnajRKSt9nothrow_t>:
   bbae4:	f7f8 bad9 	b.w	b409a <_Znaj>

000bbae8 <_ZSt25__throw_bad_function_callv>:
   bbae8:	b508      	push	{r3, lr}
   bbaea:	f7fc fed3 	bl	b8894 <abort>
	...

000bbaf0 <__aeabi_drsub>:
   bbaf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bbaf4:	e002      	b.n	bbafc <__adddf3>
   bbaf6:	bf00      	nop

000bbaf8 <__aeabi_dsub>:
   bbaf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bbafc <__adddf3>:
   bbafc:	b530      	push	{r4, r5, lr}
   bbafe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bbb02:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bbb06:	ea94 0f05 	teq	r4, r5
   bbb0a:	bf08      	it	eq
   bbb0c:	ea90 0f02 	teqeq	r0, r2
   bbb10:	bf1f      	itttt	ne
   bbb12:	ea54 0c00 	orrsne.w	ip, r4, r0
   bbb16:	ea55 0c02 	orrsne.w	ip, r5, r2
   bbb1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bbb1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbb22:	f000 80e2 	beq.w	bbcea <__adddf3+0x1ee>
   bbb26:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bbb2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bbb2e:	bfb8      	it	lt
   bbb30:	426d      	neglt	r5, r5
   bbb32:	dd0c      	ble.n	bbb4e <__adddf3+0x52>
   bbb34:	442c      	add	r4, r5
   bbb36:	ea80 0202 	eor.w	r2, r0, r2
   bbb3a:	ea81 0303 	eor.w	r3, r1, r3
   bbb3e:	ea82 0000 	eor.w	r0, r2, r0
   bbb42:	ea83 0101 	eor.w	r1, r3, r1
   bbb46:	ea80 0202 	eor.w	r2, r0, r2
   bbb4a:	ea81 0303 	eor.w	r3, r1, r3
   bbb4e:	2d36      	cmp	r5, #54	; 0x36
   bbb50:	bf88      	it	hi
   bbb52:	bd30      	pophi	{r4, r5, pc}
   bbb54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbb58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbb5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bbb60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bbb64:	d002      	beq.n	bbb6c <__adddf3+0x70>
   bbb66:	4240      	negs	r0, r0
   bbb68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbb6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bbb70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbb74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bbb78:	d002      	beq.n	bbb80 <__adddf3+0x84>
   bbb7a:	4252      	negs	r2, r2
   bbb7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bbb80:	ea94 0f05 	teq	r4, r5
   bbb84:	f000 80a7 	beq.w	bbcd6 <__adddf3+0x1da>
   bbb88:	f1a4 0401 	sub.w	r4, r4, #1
   bbb8c:	f1d5 0e20 	rsbs	lr, r5, #32
   bbb90:	db0d      	blt.n	bbbae <__adddf3+0xb2>
   bbb92:	fa02 fc0e 	lsl.w	ip, r2, lr
   bbb96:	fa22 f205 	lsr.w	r2, r2, r5
   bbb9a:	1880      	adds	r0, r0, r2
   bbb9c:	f141 0100 	adc.w	r1, r1, #0
   bbba0:	fa03 f20e 	lsl.w	r2, r3, lr
   bbba4:	1880      	adds	r0, r0, r2
   bbba6:	fa43 f305 	asr.w	r3, r3, r5
   bbbaa:	4159      	adcs	r1, r3
   bbbac:	e00e      	b.n	bbbcc <__adddf3+0xd0>
   bbbae:	f1a5 0520 	sub.w	r5, r5, #32
   bbbb2:	f10e 0e20 	add.w	lr, lr, #32
   bbbb6:	2a01      	cmp	r2, #1
   bbbb8:	fa03 fc0e 	lsl.w	ip, r3, lr
   bbbbc:	bf28      	it	cs
   bbbbe:	f04c 0c02 	orrcs.w	ip, ip, #2
   bbbc2:	fa43 f305 	asr.w	r3, r3, r5
   bbbc6:	18c0      	adds	r0, r0, r3
   bbbc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bbbcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbbd0:	d507      	bpl.n	bbbe2 <__adddf3+0xe6>
   bbbd2:	f04f 0e00 	mov.w	lr, #0
   bbbd6:	f1dc 0c00 	rsbs	ip, ip, #0
   bbbda:	eb7e 0000 	sbcs.w	r0, lr, r0
   bbbde:	eb6e 0101 	sbc.w	r1, lr, r1
   bbbe2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bbbe6:	d31b      	bcc.n	bbc20 <__adddf3+0x124>
   bbbe8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bbbec:	d30c      	bcc.n	bbc08 <__adddf3+0x10c>
   bbbee:	0849      	lsrs	r1, r1, #1
   bbbf0:	ea5f 0030 	movs.w	r0, r0, rrx
   bbbf4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bbbf8:	f104 0401 	add.w	r4, r4, #1
   bbbfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bbc00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bbc04:	f080 809a 	bcs.w	bbd3c <__adddf3+0x240>
   bbc08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bbc0c:	bf08      	it	eq
   bbc0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbc12:	f150 0000 	adcs.w	r0, r0, #0
   bbc16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbc1a:	ea41 0105 	orr.w	r1, r1, r5
   bbc1e:	bd30      	pop	{r4, r5, pc}
   bbc20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bbc24:	4140      	adcs	r0, r0
   bbc26:	eb41 0101 	adc.w	r1, r1, r1
   bbc2a:	3c01      	subs	r4, #1
   bbc2c:	bf28      	it	cs
   bbc2e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bbc32:	d2e9      	bcs.n	bbc08 <__adddf3+0x10c>
   bbc34:	f091 0f00 	teq	r1, #0
   bbc38:	bf04      	itt	eq
   bbc3a:	4601      	moveq	r1, r0
   bbc3c:	2000      	moveq	r0, #0
   bbc3e:	fab1 f381 	clz	r3, r1
   bbc42:	bf08      	it	eq
   bbc44:	3320      	addeq	r3, #32
   bbc46:	f1a3 030b 	sub.w	r3, r3, #11
   bbc4a:	f1b3 0220 	subs.w	r2, r3, #32
   bbc4e:	da0c      	bge.n	bbc6a <__adddf3+0x16e>
   bbc50:	320c      	adds	r2, #12
   bbc52:	dd08      	ble.n	bbc66 <__adddf3+0x16a>
   bbc54:	f102 0c14 	add.w	ip, r2, #20
   bbc58:	f1c2 020c 	rsb	r2, r2, #12
   bbc5c:	fa01 f00c 	lsl.w	r0, r1, ip
   bbc60:	fa21 f102 	lsr.w	r1, r1, r2
   bbc64:	e00c      	b.n	bbc80 <__adddf3+0x184>
   bbc66:	f102 0214 	add.w	r2, r2, #20
   bbc6a:	bfd8      	it	le
   bbc6c:	f1c2 0c20 	rsble	ip, r2, #32
   bbc70:	fa01 f102 	lsl.w	r1, r1, r2
   bbc74:	fa20 fc0c 	lsr.w	ip, r0, ip
   bbc78:	bfdc      	itt	le
   bbc7a:	ea41 010c 	orrle.w	r1, r1, ip
   bbc7e:	4090      	lslle	r0, r2
   bbc80:	1ae4      	subs	r4, r4, r3
   bbc82:	bfa2      	ittt	ge
   bbc84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bbc88:	4329      	orrge	r1, r5
   bbc8a:	bd30      	popge	{r4, r5, pc}
   bbc8c:	ea6f 0404 	mvn.w	r4, r4
   bbc90:	3c1f      	subs	r4, #31
   bbc92:	da1c      	bge.n	bbcce <__adddf3+0x1d2>
   bbc94:	340c      	adds	r4, #12
   bbc96:	dc0e      	bgt.n	bbcb6 <__adddf3+0x1ba>
   bbc98:	f104 0414 	add.w	r4, r4, #20
   bbc9c:	f1c4 0220 	rsb	r2, r4, #32
   bbca0:	fa20 f004 	lsr.w	r0, r0, r4
   bbca4:	fa01 f302 	lsl.w	r3, r1, r2
   bbca8:	ea40 0003 	orr.w	r0, r0, r3
   bbcac:	fa21 f304 	lsr.w	r3, r1, r4
   bbcb0:	ea45 0103 	orr.w	r1, r5, r3
   bbcb4:	bd30      	pop	{r4, r5, pc}
   bbcb6:	f1c4 040c 	rsb	r4, r4, #12
   bbcba:	f1c4 0220 	rsb	r2, r4, #32
   bbcbe:	fa20 f002 	lsr.w	r0, r0, r2
   bbcc2:	fa01 f304 	lsl.w	r3, r1, r4
   bbcc6:	ea40 0003 	orr.w	r0, r0, r3
   bbcca:	4629      	mov	r1, r5
   bbccc:	bd30      	pop	{r4, r5, pc}
   bbcce:	fa21 f004 	lsr.w	r0, r1, r4
   bbcd2:	4629      	mov	r1, r5
   bbcd4:	bd30      	pop	{r4, r5, pc}
   bbcd6:	f094 0f00 	teq	r4, #0
   bbcda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bbcde:	bf06      	itte	eq
   bbce0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bbce4:	3401      	addeq	r4, #1
   bbce6:	3d01      	subne	r5, #1
   bbce8:	e74e      	b.n	bbb88 <__adddf3+0x8c>
   bbcea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbcee:	bf18      	it	ne
   bbcf0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bbcf4:	d029      	beq.n	bbd4a <__adddf3+0x24e>
   bbcf6:	ea94 0f05 	teq	r4, r5
   bbcfa:	bf08      	it	eq
   bbcfc:	ea90 0f02 	teqeq	r0, r2
   bbd00:	d005      	beq.n	bbd0e <__adddf3+0x212>
   bbd02:	ea54 0c00 	orrs.w	ip, r4, r0
   bbd06:	bf04      	itt	eq
   bbd08:	4619      	moveq	r1, r3
   bbd0a:	4610      	moveq	r0, r2
   bbd0c:	bd30      	pop	{r4, r5, pc}
   bbd0e:	ea91 0f03 	teq	r1, r3
   bbd12:	bf1e      	ittt	ne
   bbd14:	2100      	movne	r1, #0
   bbd16:	2000      	movne	r0, #0
   bbd18:	bd30      	popne	{r4, r5, pc}
   bbd1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bbd1e:	d105      	bne.n	bbd2c <__adddf3+0x230>
   bbd20:	0040      	lsls	r0, r0, #1
   bbd22:	4149      	adcs	r1, r1
   bbd24:	bf28      	it	cs
   bbd26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bbd2a:	bd30      	pop	{r4, r5, pc}
   bbd2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bbd30:	bf3c      	itt	cc
   bbd32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bbd36:	bd30      	popcc	{r4, r5, pc}
   bbd38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbd3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bbd40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbd44:	f04f 0000 	mov.w	r0, #0
   bbd48:	bd30      	pop	{r4, r5, pc}
   bbd4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bbd4e:	bf1a      	itte	ne
   bbd50:	4619      	movne	r1, r3
   bbd52:	4610      	movne	r0, r2
   bbd54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bbd58:	bf1c      	itt	ne
   bbd5a:	460b      	movne	r3, r1
   bbd5c:	4602      	movne	r2, r0
   bbd5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbd62:	bf06      	itte	eq
   bbd64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bbd68:	ea91 0f03 	teqeq	r1, r3
   bbd6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bbd70:	bd30      	pop	{r4, r5, pc}
   bbd72:	bf00      	nop

000bbd74 <__aeabi_ui2d>:
   bbd74:	f090 0f00 	teq	r0, #0
   bbd78:	bf04      	itt	eq
   bbd7a:	2100      	moveq	r1, #0
   bbd7c:	4770      	bxeq	lr
   bbd7e:	b530      	push	{r4, r5, lr}
   bbd80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbd84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbd88:	f04f 0500 	mov.w	r5, #0
   bbd8c:	f04f 0100 	mov.w	r1, #0
   bbd90:	e750      	b.n	bbc34 <__adddf3+0x138>
   bbd92:	bf00      	nop

000bbd94 <__aeabi_i2d>:
   bbd94:	f090 0f00 	teq	r0, #0
   bbd98:	bf04      	itt	eq
   bbd9a:	2100      	moveq	r1, #0
   bbd9c:	4770      	bxeq	lr
   bbd9e:	b530      	push	{r4, r5, lr}
   bbda0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbda4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbda8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bbdac:	bf48      	it	mi
   bbdae:	4240      	negmi	r0, r0
   bbdb0:	f04f 0100 	mov.w	r1, #0
   bbdb4:	e73e      	b.n	bbc34 <__adddf3+0x138>
   bbdb6:	bf00      	nop

000bbdb8 <__aeabi_f2d>:
   bbdb8:	0042      	lsls	r2, r0, #1
   bbdba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bbdbe:	ea4f 0131 	mov.w	r1, r1, rrx
   bbdc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bbdc6:	bf1f      	itttt	ne
   bbdc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bbdcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bbdd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bbdd4:	4770      	bxne	lr
   bbdd6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bbdda:	bf08      	it	eq
   bbddc:	4770      	bxeq	lr
   bbdde:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bbde2:	bf04      	itt	eq
   bbde4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bbde8:	4770      	bxeq	lr
   bbdea:	b530      	push	{r4, r5, lr}
   bbdec:	f44f 7460 	mov.w	r4, #896	; 0x380
   bbdf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bbdf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbdf8:	e71c      	b.n	bbc34 <__adddf3+0x138>
   bbdfa:	bf00      	nop

000bbdfc <__aeabi_ul2d>:
   bbdfc:	ea50 0201 	orrs.w	r2, r0, r1
   bbe00:	bf08      	it	eq
   bbe02:	4770      	bxeq	lr
   bbe04:	b530      	push	{r4, r5, lr}
   bbe06:	f04f 0500 	mov.w	r5, #0
   bbe0a:	e00a      	b.n	bbe22 <__aeabi_l2d+0x16>

000bbe0c <__aeabi_l2d>:
   bbe0c:	ea50 0201 	orrs.w	r2, r0, r1
   bbe10:	bf08      	it	eq
   bbe12:	4770      	bxeq	lr
   bbe14:	b530      	push	{r4, r5, lr}
   bbe16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bbe1a:	d502      	bpl.n	bbe22 <__aeabi_l2d+0x16>
   bbe1c:	4240      	negs	r0, r0
   bbe1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bbe22:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bbe26:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bbe2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bbe2e:	f43f aed8 	beq.w	bbbe2 <__adddf3+0xe6>
   bbe32:	f04f 0203 	mov.w	r2, #3
   bbe36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbe3a:	bf18      	it	ne
   bbe3c:	3203      	addne	r2, #3
   bbe3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbe42:	bf18      	it	ne
   bbe44:	3203      	addne	r2, #3
   bbe46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bbe4a:	f1c2 0320 	rsb	r3, r2, #32
   bbe4e:	fa00 fc03 	lsl.w	ip, r0, r3
   bbe52:	fa20 f002 	lsr.w	r0, r0, r2
   bbe56:	fa01 fe03 	lsl.w	lr, r1, r3
   bbe5a:	ea40 000e 	orr.w	r0, r0, lr
   bbe5e:	fa21 f102 	lsr.w	r1, r1, r2
   bbe62:	4414      	add	r4, r2
   bbe64:	e6bd      	b.n	bbbe2 <__adddf3+0xe6>
   bbe66:	bf00      	nop

000bbe68 <__aeabi_dmul>:
   bbe68:	b570      	push	{r4, r5, r6, lr}
   bbe6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbe6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbe72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbe76:	bf1d      	ittte	ne
   bbe78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbe7c:	ea94 0f0c 	teqne	r4, ip
   bbe80:	ea95 0f0c 	teqne	r5, ip
   bbe84:	f000 f8de 	bleq	bc044 <__aeabi_dmul+0x1dc>
   bbe88:	442c      	add	r4, r5
   bbe8a:	ea81 0603 	eor.w	r6, r1, r3
   bbe8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bbe92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bbe96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bbe9a:	bf18      	it	ne
   bbe9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bbea0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbea8:	d038      	beq.n	bbf1c <__aeabi_dmul+0xb4>
   bbeaa:	fba0 ce02 	umull	ip, lr, r0, r2
   bbeae:	f04f 0500 	mov.w	r5, #0
   bbeb2:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbeb6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbeba:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbebe:	f04f 0600 	mov.w	r6, #0
   bbec2:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbec6:	f09c 0f00 	teq	ip, #0
   bbeca:	bf18      	it	ne
   bbecc:	f04e 0e01 	orrne.w	lr, lr, #1
   bbed0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbed4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbed8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbedc:	d204      	bcs.n	bbee8 <__aeabi_dmul+0x80>
   bbede:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbee2:	416d      	adcs	r5, r5
   bbee4:	eb46 0606 	adc.w	r6, r6, r6
   bbee8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbeec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbef0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbef4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbef8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbefc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbf00:	bf88      	it	hi
   bbf02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbf06:	d81e      	bhi.n	bbf46 <__aeabi_dmul+0xde>
   bbf08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbf0c:	bf08      	it	eq
   bbf0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbf12:	f150 0000 	adcs.w	r0, r0, #0
   bbf16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbf1a:	bd70      	pop	{r4, r5, r6, pc}
   bbf1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbf20:	ea46 0101 	orr.w	r1, r6, r1
   bbf24:	ea40 0002 	orr.w	r0, r0, r2
   bbf28:	ea81 0103 	eor.w	r1, r1, r3
   bbf2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbf30:	bfc2      	ittt	gt
   bbf32:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbf36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbf3a:	bd70      	popgt	{r4, r5, r6, pc}
   bbf3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbf40:	f04f 0e00 	mov.w	lr, #0
   bbf44:	3c01      	subs	r4, #1
   bbf46:	f300 80ab 	bgt.w	bc0a0 <__aeabi_dmul+0x238>
   bbf4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bbf4e:	bfde      	ittt	le
   bbf50:	2000      	movle	r0, #0
   bbf52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bbf56:	bd70      	pople	{r4, r5, r6, pc}
   bbf58:	f1c4 0400 	rsb	r4, r4, #0
   bbf5c:	3c20      	subs	r4, #32
   bbf5e:	da35      	bge.n	bbfcc <__aeabi_dmul+0x164>
   bbf60:	340c      	adds	r4, #12
   bbf62:	dc1b      	bgt.n	bbf9c <__aeabi_dmul+0x134>
   bbf64:	f104 0414 	add.w	r4, r4, #20
   bbf68:	f1c4 0520 	rsb	r5, r4, #32
   bbf6c:	fa00 f305 	lsl.w	r3, r0, r5
   bbf70:	fa20 f004 	lsr.w	r0, r0, r4
   bbf74:	fa01 f205 	lsl.w	r2, r1, r5
   bbf78:	ea40 0002 	orr.w	r0, r0, r2
   bbf7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bbf80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbf84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbf88:	fa21 f604 	lsr.w	r6, r1, r4
   bbf8c:	eb42 0106 	adc.w	r1, r2, r6
   bbf90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbf94:	bf08      	it	eq
   bbf96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbf9a:	bd70      	pop	{r4, r5, r6, pc}
   bbf9c:	f1c4 040c 	rsb	r4, r4, #12
   bbfa0:	f1c4 0520 	rsb	r5, r4, #32
   bbfa4:	fa00 f304 	lsl.w	r3, r0, r4
   bbfa8:	fa20 f005 	lsr.w	r0, r0, r5
   bbfac:	fa01 f204 	lsl.w	r2, r1, r4
   bbfb0:	ea40 0002 	orr.w	r0, r0, r2
   bbfb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbfb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbfbc:	f141 0100 	adc.w	r1, r1, #0
   bbfc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbfc4:	bf08      	it	eq
   bbfc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbfca:	bd70      	pop	{r4, r5, r6, pc}
   bbfcc:	f1c4 0520 	rsb	r5, r4, #32
   bbfd0:	fa00 f205 	lsl.w	r2, r0, r5
   bbfd4:	ea4e 0e02 	orr.w	lr, lr, r2
   bbfd8:	fa20 f304 	lsr.w	r3, r0, r4
   bbfdc:	fa01 f205 	lsl.w	r2, r1, r5
   bbfe0:	ea43 0302 	orr.w	r3, r3, r2
   bbfe4:	fa21 f004 	lsr.w	r0, r1, r4
   bbfe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbfec:	fa21 f204 	lsr.w	r2, r1, r4
   bbff0:	ea20 0002 	bic.w	r0, r0, r2
   bbff4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bbff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbffc:	bf08      	it	eq
   bbffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bc002:	bd70      	pop	{r4, r5, r6, pc}
   bc004:	f094 0f00 	teq	r4, #0
   bc008:	d10f      	bne.n	bc02a <__aeabi_dmul+0x1c2>
   bc00a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bc00e:	0040      	lsls	r0, r0, #1
   bc010:	eb41 0101 	adc.w	r1, r1, r1
   bc014:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc018:	bf08      	it	eq
   bc01a:	3c01      	subeq	r4, #1
   bc01c:	d0f7      	beq.n	bc00e <__aeabi_dmul+0x1a6>
   bc01e:	ea41 0106 	orr.w	r1, r1, r6
   bc022:	f095 0f00 	teq	r5, #0
   bc026:	bf18      	it	ne
   bc028:	4770      	bxne	lr
   bc02a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bc02e:	0052      	lsls	r2, r2, #1
   bc030:	eb43 0303 	adc.w	r3, r3, r3
   bc034:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bc038:	bf08      	it	eq
   bc03a:	3d01      	subeq	r5, #1
   bc03c:	d0f7      	beq.n	bc02e <__aeabi_dmul+0x1c6>
   bc03e:	ea43 0306 	orr.w	r3, r3, r6
   bc042:	4770      	bx	lr
   bc044:	ea94 0f0c 	teq	r4, ip
   bc048:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc04c:	bf18      	it	ne
   bc04e:	ea95 0f0c 	teqne	r5, ip
   bc052:	d00c      	beq.n	bc06e <__aeabi_dmul+0x206>
   bc054:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc058:	bf18      	it	ne
   bc05a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc05e:	d1d1      	bne.n	bc004 <__aeabi_dmul+0x19c>
   bc060:	ea81 0103 	eor.w	r1, r1, r3
   bc064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc068:	f04f 0000 	mov.w	r0, #0
   bc06c:	bd70      	pop	{r4, r5, r6, pc}
   bc06e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc072:	bf06      	itte	eq
   bc074:	4610      	moveq	r0, r2
   bc076:	4619      	moveq	r1, r3
   bc078:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc07c:	d019      	beq.n	bc0b2 <__aeabi_dmul+0x24a>
   bc07e:	ea94 0f0c 	teq	r4, ip
   bc082:	d102      	bne.n	bc08a <__aeabi_dmul+0x222>
   bc084:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bc088:	d113      	bne.n	bc0b2 <__aeabi_dmul+0x24a>
   bc08a:	ea95 0f0c 	teq	r5, ip
   bc08e:	d105      	bne.n	bc09c <__aeabi_dmul+0x234>
   bc090:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bc094:	bf1c      	itt	ne
   bc096:	4610      	movne	r0, r2
   bc098:	4619      	movne	r1, r3
   bc09a:	d10a      	bne.n	bc0b2 <__aeabi_dmul+0x24a>
   bc09c:	ea81 0103 	eor.w	r1, r1, r3
   bc0a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bc0a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc0a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bc0ac:	f04f 0000 	mov.w	r0, #0
   bc0b0:	bd70      	pop	{r4, r5, r6, pc}
   bc0b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bc0b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bc0ba:	bd70      	pop	{r4, r5, r6, pc}

000bc0bc <__aeabi_ddiv>:
   bc0bc:	b570      	push	{r4, r5, r6, lr}
   bc0be:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bc0c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bc0c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bc0ca:	bf1d      	ittte	ne
   bc0cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bc0d0:	ea94 0f0c 	teqne	r4, ip
   bc0d4:	ea95 0f0c 	teqne	r5, ip
   bc0d8:	f000 f8a7 	bleq	bc22a <__aeabi_ddiv+0x16e>
   bc0dc:	eba4 0405 	sub.w	r4, r4, r5
   bc0e0:	ea81 0e03 	eor.w	lr, r1, r3
   bc0e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc0e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc0ec:	f000 8088 	beq.w	bc200 <__aeabi_ddiv+0x144>
   bc0f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc0f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bc0f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bc0fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bc100:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bc104:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bc108:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bc10c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bc110:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bc114:	429d      	cmp	r5, r3
   bc116:	bf08      	it	eq
   bc118:	4296      	cmpeq	r6, r2
   bc11a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bc11e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bc122:	d202      	bcs.n	bc12a <__aeabi_ddiv+0x6e>
   bc124:	085b      	lsrs	r3, r3, #1
   bc126:	ea4f 0232 	mov.w	r2, r2, rrx
   bc12a:	1ab6      	subs	r6, r6, r2
   bc12c:	eb65 0503 	sbc.w	r5, r5, r3
   bc130:	085b      	lsrs	r3, r3, #1
   bc132:	ea4f 0232 	mov.w	r2, r2, rrx
   bc136:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bc13a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bc13e:	ebb6 0e02 	subs.w	lr, r6, r2
   bc142:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc146:	bf22      	ittt	cs
   bc148:	1ab6      	subcs	r6, r6, r2
   bc14a:	4675      	movcs	r5, lr
   bc14c:	ea40 000c 	orrcs.w	r0, r0, ip
   bc150:	085b      	lsrs	r3, r3, #1
   bc152:	ea4f 0232 	mov.w	r2, r2, rrx
   bc156:	ebb6 0e02 	subs.w	lr, r6, r2
   bc15a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc15e:	bf22      	ittt	cs
   bc160:	1ab6      	subcs	r6, r6, r2
   bc162:	4675      	movcs	r5, lr
   bc164:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bc168:	085b      	lsrs	r3, r3, #1
   bc16a:	ea4f 0232 	mov.w	r2, r2, rrx
   bc16e:	ebb6 0e02 	subs.w	lr, r6, r2
   bc172:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc176:	bf22      	ittt	cs
   bc178:	1ab6      	subcs	r6, r6, r2
   bc17a:	4675      	movcs	r5, lr
   bc17c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bc180:	085b      	lsrs	r3, r3, #1
   bc182:	ea4f 0232 	mov.w	r2, r2, rrx
   bc186:	ebb6 0e02 	subs.w	lr, r6, r2
   bc18a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bc18e:	bf22      	ittt	cs
   bc190:	1ab6      	subcs	r6, r6, r2
   bc192:	4675      	movcs	r5, lr
   bc194:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bc198:	ea55 0e06 	orrs.w	lr, r5, r6
   bc19c:	d018      	beq.n	bc1d0 <__aeabi_ddiv+0x114>
   bc19e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bc1a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bc1a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bc1aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bc1ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bc1b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bc1b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bc1ba:	d1c0      	bne.n	bc13e <__aeabi_ddiv+0x82>
   bc1bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc1c0:	d10b      	bne.n	bc1da <__aeabi_ddiv+0x11e>
   bc1c2:	ea41 0100 	orr.w	r1, r1, r0
   bc1c6:	f04f 0000 	mov.w	r0, #0
   bc1ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bc1ce:	e7b6      	b.n	bc13e <__aeabi_ddiv+0x82>
   bc1d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bc1d4:	bf04      	itt	eq
   bc1d6:	4301      	orreq	r1, r0
   bc1d8:	2000      	moveq	r0, #0
   bc1da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bc1de:	bf88      	it	hi
   bc1e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bc1e4:	f63f aeaf 	bhi.w	bbf46 <__aeabi_dmul+0xde>
   bc1e8:	ebb5 0c03 	subs.w	ip, r5, r3
   bc1ec:	bf04      	itt	eq
   bc1ee:	ebb6 0c02 	subseq.w	ip, r6, r2
   bc1f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bc1f6:	f150 0000 	adcs.w	r0, r0, #0
   bc1fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bc1fe:	bd70      	pop	{r4, r5, r6, pc}
   bc200:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bc204:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bc208:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bc20c:	bfc2      	ittt	gt
   bc20e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bc212:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bc216:	bd70      	popgt	{r4, r5, r6, pc}
   bc218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc21c:	f04f 0e00 	mov.w	lr, #0
   bc220:	3c01      	subs	r4, #1
   bc222:	e690      	b.n	bbf46 <__aeabi_dmul+0xde>
   bc224:	ea45 0e06 	orr.w	lr, r5, r6
   bc228:	e68d      	b.n	bbf46 <__aeabi_dmul+0xde>
   bc22a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bc22e:	ea94 0f0c 	teq	r4, ip
   bc232:	bf08      	it	eq
   bc234:	ea95 0f0c 	teqeq	r5, ip
   bc238:	f43f af3b 	beq.w	bc0b2 <__aeabi_dmul+0x24a>
   bc23c:	ea94 0f0c 	teq	r4, ip
   bc240:	d10a      	bne.n	bc258 <__aeabi_ddiv+0x19c>
   bc242:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bc246:	f47f af34 	bne.w	bc0b2 <__aeabi_dmul+0x24a>
   bc24a:	ea95 0f0c 	teq	r5, ip
   bc24e:	f47f af25 	bne.w	bc09c <__aeabi_dmul+0x234>
   bc252:	4610      	mov	r0, r2
   bc254:	4619      	mov	r1, r3
   bc256:	e72c      	b.n	bc0b2 <__aeabi_dmul+0x24a>
   bc258:	ea95 0f0c 	teq	r5, ip
   bc25c:	d106      	bne.n	bc26c <__aeabi_ddiv+0x1b0>
   bc25e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bc262:	f43f aefd 	beq.w	bc060 <__aeabi_dmul+0x1f8>
   bc266:	4610      	mov	r0, r2
   bc268:	4619      	mov	r1, r3
   bc26a:	e722      	b.n	bc0b2 <__aeabi_dmul+0x24a>
   bc26c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bc270:	bf18      	it	ne
   bc272:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bc276:	f47f aec5 	bne.w	bc004 <__aeabi_dmul+0x19c>
   bc27a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bc27e:	f47f af0d 	bne.w	bc09c <__aeabi_dmul+0x234>
   bc282:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bc286:	f47f aeeb 	bne.w	bc060 <__aeabi_dmul+0x1f8>
   bc28a:	e712      	b.n	bc0b2 <__aeabi_dmul+0x24a>

000bc28c <__gedf2>:
   bc28c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc290:	e006      	b.n	bc2a0 <__cmpdf2+0x4>
   bc292:	bf00      	nop

000bc294 <__ledf2>:
   bc294:	f04f 0c01 	mov.w	ip, #1
   bc298:	e002      	b.n	bc2a0 <__cmpdf2+0x4>
   bc29a:	bf00      	nop

000bc29c <__cmpdf2>:
   bc29c:	f04f 0c01 	mov.w	ip, #1
   bc2a0:	f84d cd04 	str.w	ip, [sp, #-4]!
   bc2a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc2a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc2ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc2b0:	bf18      	it	ne
   bc2b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bc2b6:	d01b      	beq.n	bc2f0 <__cmpdf2+0x54>
   bc2b8:	b001      	add	sp, #4
   bc2ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bc2be:	bf0c      	ite	eq
   bc2c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bc2c4:	ea91 0f03 	teqne	r1, r3
   bc2c8:	bf02      	ittt	eq
   bc2ca:	ea90 0f02 	teqeq	r0, r2
   bc2ce:	2000      	moveq	r0, #0
   bc2d0:	4770      	bxeq	lr
   bc2d2:	f110 0f00 	cmn.w	r0, #0
   bc2d6:	ea91 0f03 	teq	r1, r3
   bc2da:	bf58      	it	pl
   bc2dc:	4299      	cmppl	r1, r3
   bc2de:	bf08      	it	eq
   bc2e0:	4290      	cmpeq	r0, r2
   bc2e2:	bf2c      	ite	cs
   bc2e4:	17d8      	asrcs	r0, r3, #31
   bc2e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bc2ea:	f040 0001 	orr.w	r0, r0, #1
   bc2ee:	4770      	bx	lr
   bc2f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc2f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc2f8:	d102      	bne.n	bc300 <__cmpdf2+0x64>
   bc2fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc2fe:	d107      	bne.n	bc310 <__cmpdf2+0x74>
   bc300:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc304:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc308:	d1d6      	bne.n	bc2b8 <__cmpdf2+0x1c>
   bc30a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc30e:	d0d3      	beq.n	bc2b8 <__cmpdf2+0x1c>
   bc310:	f85d 0b04 	ldr.w	r0, [sp], #4
   bc314:	4770      	bx	lr
   bc316:	bf00      	nop

000bc318 <__aeabi_cdrcmple>:
   bc318:	4684      	mov	ip, r0
   bc31a:	4610      	mov	r0, r2
   bc31c:	4662      	mov	r2, ip
   bc31e:	468c      	mov	ip, r1
   bc320:	4619      	mov	r1, r3
   bc322:	4663      	mov	r3, ip
   bc324:	e000      	b.n	bc328 <__aeabi_cdcmpeq>
   bc326:	bf00      	nop

000bc328 <__aeabi_cdcmpeq>:
   bc328:	b501      	push	{r0, lr}
   bc32a:	f7ff ffb7 	bl	bc29c <__cmpdf2>
   bc32e:	2800      	cmp	r0, #0
   bc330:	bf48      	it	mi
   bc332:	f110 0f00 	cmnmi.w	r0, #0
   bc336:	bd01      	pop	{r0, pc}

000bc338 <__aeabi_dcmpeq>:
   bc338:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc33c:	f7ff fff4 	bl	bc328 <__aeabi_cdcmpeq>
   bc340:	bf0c      	ite	eq
   bc342:	2001      	moveq	r0, #1
   bc344:	2000      	movne	r0, #0
   bc346:	f85d fb08 	ldr.w	pc, [sp], #8
   bc34a:	bf00      	nop

000bc34c <__aeabi_dcmplt>:
   bc34c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc350:	f7ff ffea 	bl	bc328 <__aeabi_cdcmpeq>
   bc354:	bf34      	ite	cc
   bc356:	2001      	movcc	r0, #1
   bc358:	2000      	movcs	r0, #0
   bc35a:	f85d fb08 	ldr.w	pc, [sp], #8
   bc35e:	bf00      	nop

000bc360 <__aeabi_dcmple>:
   bc360:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc364:	f7ff ffe0 	bl	bc328 <__aeabi_cdcmpeq>
   bc368:	bf94      	ite	ls
   bc36a:	2001      	movls	r0, #1
   bc36c:	2000      	movhi	r0, #0
   bc36e:	f85d fb08 	ldr.w	pc, [sp], #8
   bc372:	bf00      	nop

000bc374 <__aeabi_dcmpge>:
   bc374:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc378:	f7ff ffce 	bl	bc318 <__aeabi_cdrcmple>
   bc37c:	bf94      	ite	ls
   bc37e:	2001      	movls	r0, #1
   bc380:	2000      	movhi	r0, #0
   bc382:	f85d fb08 	ldr.w	pc, [sp], #8
   bc386:	bf00      	nop

000bc388 <__aeabi_dcmpgt>:
   bc388:	f84d ed08 	str.w	lr, [sp, #-8]!
   bc38c:	f7ff ffc4 	bl	bc318 <__aeabi_cdrcmple>
   bc390:	bf34      	ite	cc
   bc392:	2001      	movcc	r0, #1
   bc394:	2000      	movcs	r0, #0
   bc396:	f85d fb08 	ldr.w	pc, [sp], #8
   bc39a:	bf00      	nop

000bc39c <__aeabi_dcmpun>:
   bc39c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc3a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc3a4:	d102      	bne.n	bc3ac <__aeabi_dcmpun+0x10>
   bc3a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc3aa:	d10a      	bne.n	bc3c2 <__aeabi_dcmpun+0x26>
   bc3ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc3b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc3b4:	d102      	bne.n	bc3bc <__aeabi_dcmpun+0x20>
   bc3b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc3ba:	d102      	bne.n	bc3c2 <__aeabi_dcmpun+0x26>
   bc3bc:	f04f 0000 	mov.w	r0, #0
   bc3c0:	4770      	bx	lr
   bc3c2:	f04f 0001 	mov.w	r0, #1
   bc3c6:	4770      	bx	lr

000bc3c8 <__aeabi_d2iz>:
   bc3c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc3cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc3d0:	d215      	bcs.n	bc3fe <__aeabi_d2iz+0x36>
   bc3d2:	d511      	bpl.n	bc3f8 <__aeabi_d2iz+0x30>
   bc3d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc3d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc3dc:	d912      	bls.n	bc404 <__aeabi_d2iz+0x3c>
   bc3de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc3e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc3e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc3ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bc3ee:	fa23 f002 	lsr.w	r0, r3, r2
   bc3f2:	bf18      	it	ne
   bc3f4:	4240      	negne	r0, r0
   bc3f6:	4770      	bx	lr
   bc3f8:	f04f 0000 	mov.w	r0, #0
   bc3fc:	4770      	bx	lr
   bc3fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc402:	d105      	bne.n	bc410 <__aeabi_d2iz+0x48>
   bc404:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bc408:	bf08      	it	eq
   bc40a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bc40e:	4770      	bx	lr
   bc410:	f04f 0000 	mov.w	r0, #0
   bc414:	4770      	bx	lr
   bc416:	bf00      	nop

000bc418 <__aeabi_d2uiz>:
   bc418:	004a      	lsls	r2, r1, #1
   bc41a:	d211      	bcs.n	bc440 <__aeabi_d2uiz+0x28>
   bc41c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc420:	d211      	bcs.n	bc446 <__aeabi_d2uiz+0x2e>
   bc422:	d50d      	bpl.n	bc440 <__aeabi_d2uiz+0x28>
   bc424:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc428:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc42c:	d40e      	bmi.n	bc44c <__aeabi_d2uiz+0x34>
   bc42e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc436:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc43a:	fa23 f002 	lsr.w	r0, r3, r2
   bc43e:	4770      	bx	lr
   bc440:	f04f 0000 	mov.w	r0, #0
   bc444:	4770      	bx	lr
   bc446:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc44a:	d102      	bne.n	bc452 <__aeabi_d2uiz+0x3a>
   bc44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc450:	4770      	bx	lr
   bc452:	f04f 0000 	mov.w	r0, #0
   bc456:	4770      	bx	lr

000bc458 <asctime_r>:
   bc458:	b510      	push	{r4, lr}
   bc45a:	460c      	mov	r4, r1
   bc45c:	6941      	ldr	r1, [r0, #20]
   bc45e:	6903      	ldr	r3, [r0, #16]
   bc460:	6982      	ldr	r2, [r0, #24]
   bc462:	b086      	sub	sp, #24
   bc464:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bc468:	9104      	str	r1, [sp, #16]
   bc46a:	6801      	ldr	r1, [r0, #0]
   bc46c:	9103      	str	r1, [sp, #12]
   bc46e:	6841      	ldr	r1, [r0, #4]
   bc470:	9102      	str	r1, [sp, #8]
   bc472:	6881      	ldr	r1, [r0, #8]
   bc474:	9101      	str	r1, [sp, #4]
   bc476:	68c1      	ldr	r1, [r0, #12]
   bc478:	9100      	str	r1, [sp, #0]
   bc47a:	4907      	ldr	r1, [pc, #28]	; (bc498 <asctime_r+0x40>)
   bc47c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bc480:	440b      	add	r3, r1
   bc482:	4906      	ldr	r1, [pc, #24]	; (bc49c <asctime_r+0x44>)
   bc484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bc488:	440a      	add	r2, r1
   bc48a:	4620      	mov	r0, r4
   bc48c:	4904      	ldr	r1, [pc, #16]	; (bc4a0 <asctime_r+0x48>)
   bc48e:	f7fc f9e9 	bl	b8864 <siprintf>
   bc492:	4620      	mov	r0, r4
   bc494:	b006      	add	sp, #24
   bc496:	bd10      	pop	{r4, pc}
   bc498:	000bd9ee 	.word	0x000bd9ee
   bc49c:	000bd9d9 	.word	0x000bd9d9
   bc4a0:	000bd9b9 	.word	0x000bd9b9

000bc4a4 <atexit>:
   bc4a4:	2300      	movs	r3, #0
   bc4a6:	4601      	mov	r1, r0
   bc4a8:	461a      	mov	r2, r3
   bc4aa:	4618      	mov	r0, r3
   bc4ac:	f000 b9d8 	b.w	bc860 <__register_exitproc>

000bc4b0 <gmtime>:
   bc4b0:	b538      	push	{r3, r4, r5, lr}
   bc4b2:	4b0b      	ldr	r3, [pc, #44]	; (bc4e0 <gmtime+0x30>)
   bc4b4:	681d      	ldr	r5, [r3, #0]
   bc4b6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bc4b8:	4604      	mov	r4, r0
   bc4ba:	b953      	cbnz	r3, bc4d2 <gmtime+0x22>
   bc4bc:	2024      	movs	r0, #36	; 0x24
   bc4be:	f7fc f9b9 	bl	b8834 <malloc>
   bc4c2:	4602      	mov	r2, r0
   bc4c4:	63e8      	str	r0, [r5, #60]	; 0x3c
   bc4c6:	b920      	cbnz	r0, bc4d2 <gmtime+0x22>
   bc4c8:	4b06      	ldr	r3, [pc, #24]	; (bc4e4 <gmtime+0x34>)
   bc4ca:	4807      	ldr	r0, [pc, #28]	; (bc4e8 <gmtime+0x38>)
   bc4cc:	2139      	movs	r1, #57	; 0x39
   bc4ce:	f7fc f9f9 	bl	b88c4 <__assert_func>
   bc4d2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bc4d4:	4620      	mov	r0, r4
   bc4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc4da:	f7fc ba13 	b.w	b8904 <gmtime_r>
   bc4de:	bf00      	nop
   bc4e0:	2003dfa8 	.word	0x2003dfa8
   bc4e4:	000bda12 	.word	0x000bda12
   bc4e8:	000bda29 	.word	0x000bda29

000bc4ec <isprint>:
   bc4ec:	4b02      	ldr	r3, [pc, #8]	; (bc4f8 <isprint+0xc>)
   bc4ee:	4418      	add	r0, r3
   bc4f0:	7840      	ldrb	r0, [r0, #1]
   bc4f2:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bc4f6:	4770      	bx	lr
   bc4f8:	000bdadb 	.word	0x000bdadb

000bc4fc <memcpy>:
   bc4fc:	440a      	add	r2, r1
   bc4fe:	4291      	cmp	r1, r2
   bc500:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bc504:	d100      	bne.n	bc508 <memcpy+0xc>
   bc506:	4770      	bx	lr
   bc508:	b510      	push	{r4, lr}
   bc50a:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc50e:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc512:	4291      	cmp	r1, r2
   bc514:	d1f9      	bne.n	bc50a <memcpy+0xe>
   bc516:	bd10      	pop	{r4, pc}

000bc518 <memmove>:
   bc518:	4288      	cmp	r0, r1
   bc51a:	b510      	push	{r4, lr}
   bc51c:	eb01 0402 	add.w	r4, r1, r2
   bc520:	d902      	bls.n	bc528 <memmove+0x10>
   bc522:	4284      	cmp	r4, r0
   bc524:	4623      	mov	r3, r4
   bc526:	d807      	bhi.n	bc538 <memmove+0x20>
   bc528:	1e43      	subs	r3, r0, #1
   bc52a:	42a1      	cmp	r1, r4
   bc52c:	d008      	beq.n	bc540 <memmove+0x28>
   bc52e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc532:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc536:	e7f8      	b.n	bc52a <memmove+0x12>
   bc538:	4402      	add	r2, r0
   bc53a:	4601      	mov	r1, r0
   bc53c:	428a      	cmp	r2, r1
   bc53e:	d100      	bne.n	bc542 <memmove+0x2a>
   bc540:	bd10      	pop	{r4, pc}
   bc542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc546:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc54a:	e7f7      	b.n	bc53c <memmove+0x24>

000bc54c <memset>:
   bc54c:	4402      	add	r2, r0
   bc54e:	4603      	mov	r3, r0
   bc550:	4293      	cmp	r3, r2
   bc552:	d100      	bne.n	bc556 <memset+0xa>
   bc554:	4770      	bx	lr
   bc556:	f803 1b01 	strb.w	r1, [r3], #1
   bc55a:	e7f9      	b.n	bc550 <memset+0x4>

000bc55c <srand>:
   bc55c:	b538      	push	{r3, r4, r5, lr}
   bc55e:	4b10      	ldr	r3, [pc, #64]	; (bc5a0 <srand+0x44>)
   bc560:	681d      	ldr	r5, [r3, #0]
   bc562:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc564:	4604      	mov	r4, r0
   bc566:	b9b3      	cbnz	r3, bc596 <srand+0x3a>
   bc568:	2018      	movs	r0, #24
   bc56a:	f7fc f963 	bl	b8834 <malloc>
   bc56e:	4602      	mov	r2, r0
   bc570:	63a8      	str	r0, [r5, #56]	; 0x38
   bc572:	b920      	cbnz	r0, bc57e <srand+0x22>
   bc574:	4b0b      	ldr	r3, [pc, #44]	; (bc5a4 <srand+0x48>)
   bc576:	480c      	ldr	r0, [pc, #48]	; (bc5a8 <srand+0x4c>)
   bc578:	2142      	movs	r1, #66	; 0x42
   bc57a:	f7fc f9a3 	bl	b88c4 <__assert_func>
   bc57e:	490b      	ldr	r1, [pc, #44]	; (bc5ac <srand+0x50>)
   bc580:	4b0b      	ldr	r3, [pc, #44]	; (bc5b0 <srand+0x54>)
   bc582:	e9c0 1300 	strd	r1, r3, [r0]
   bc586:	4b0b      	ldr	r3, [pc, #44]	; (bc5b4 <srand+0x58>)
   bc588:	6083      	str	r3, [r0, #8]
   bc58a:	230b      	movs	r3, #11
   bc58c:	8183      	strh	r3, [r0, #12]
   bc58e:	2100      	movs	r1, #0
   bc590:	2001      	movs	r0, #1
   bc592:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc596:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc598:	2200      	movs	r2, #0
   bc59a:	611c      	str	r4, [r3, #16]
   bc59c:	615a      	str	r2, [r3, #20]
   bc59e:	bd38      	pop	{r3, r4, r5, pc}
   bc5a0:	2003dfa8 	.word	0x2003dfa8
   bc5a4:	000bda12 	.word	0x000bda12
   bc5a8:	000bda82 	.word	0x000bda82
   bc5ac:	abcd330e 	.word	0xabcd330e
   bc5b0:	e66d1234 	.word	0xe66d1234
   bc5b4:	0005deec 	.word	0x0005deec

000bc5b8 <rand>:
   bc5b8:	4b16      	ldr	r3, [pc, #88]	; (bc614 <rand+0x5c>)
   bc5ba:	b510      	push	{r4, lr}
   bc5bc:	681c      	ldr	r4, [r3, #0]
   bc5be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc5c0:	b9b3      	cbnz	r3, bc5f0 <rand+0x38>
   bc5c2:	2018      	movs	r0, #24
   bc5c4:	f7fc f936 	bl	b8834 <malloc>
   bc5c8:	63a0      	str	r0, [r4, #56]	; 0x38
   bc5ca:	b928      	cbnz	r0, bc5d8 <rand+0x20>
   bc5cc:	4602      	mov	r2, r0
   bc5ce:	4b12      	ldr	r3, [pc, #72]	; (bc618 <rand+0x60>)
   bc5d0:	4812      	ldr	r0, [pc, #72]	; (bc61c <rand+0x64>)
   bc5d2:	214e      	movs	r1, #78	; 0x4e
   bc5d4:	f7fc f976 	bl	b88c4 <__assert_func>
   bc5d8:	4a11      	ldr	r2, [pc, #68]	; (bc620 <rand+0x68>)
   bc5da:	4b12      	ldr	r3, [pc, #72]	; (bc624 <rand+0x6c>)
   bc5dc:	e9c0 2300 	strd	r2, r3, [r0]
   bc5e0:	4b11      	ldr	r3, [pc, #68]	; (bc628 <rand+0x70>)
   bc5e2:	6083      	str	r3, [r0, #8]
   bc5e4:	230b      	movs	r3, #11
   bc5e6:	8183      	strh	r3, [r0, #12]
   bc5e8:	2201      	movs	r2, #1
   bc5ea:	2300      	movs	r3, #0
   bc5ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bc5f0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bc5f2:	4a0e      	ldr	r2, [pc, #56]	; (bc62c <rand+0x74>)
   bc5f4:	6920      	ldr	r0, [r4, #16]
   bc5f6:	6963      	ldr	r3, [r4, #20]
   bc5f8:	490d      	ldr	r1, [pc, #52]	; (bc630 <rand+0x78>)
   bc5fa:	4342      	muls	r2, r0
   bc5fc:	fb01 2203 	mla	r2, r1, r3, r2
   bc600:	fba0 0101 	umull	r0, r1, r0, r1
   bc604:	1c43      	adds	r3, r0, #1
   bc606:	eb42 0001 	adc.w	r0, r2, r1
   bc60a:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bc60e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bc612:	bd10      	pop	{r4, pc}
   bc614:	2003dfa8 	.word	0x2003dfa8
   bc618:	000bda12 	.word	0x000bda12
   bc61c:	000bda82 	.word	0x000bda82
   bc620:	abcd330e 	.word	0xabcd330e
   bc624:	e66d1234 	.word	0xe66d1234
   bc628:	0005deec 	.word	0x0005deec
   bc62c:	5851f42d 	.word	0x5851f42d
   bc630:	4c957f2d 	.word	0x4c957f2d

000bc634 <strchr>:
   bc634:	b2c9      	uxtb	r1, r1
   bc636:	4603      	mov	r3, r0
   bc638:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc63c:	b11a      	cbz	r2, bc646 <strchr+0x12>
   bc63e:	428a      	cmp	r2, r1
   bc640:	d1f9      	bne.n	bc636 <strchr+0x2>
   bc642:	4618      	mov	r0, r3
   bc644:	4770      	bx	lr
   bc646:	2900      	cmp	r1, #0
   bc648:	bf18      	it	ne
   bc64a:	2300      	movne	r3, #0
   bc64c:	e7f9      	b.n	bc642 <strchr+0xe>

000bc64e <strchrnul>:
   bc64e:	b510      	push	{r4, lr}
   bc650:	4604      	mov	r4, r0
   bc652:	f7ff ffef 	bl	bc634 <strchr>
   bc656:	b918      	cbnz	r0, bc660 <strchrnul+0x12>
   bc658:	4620      	mov	r0, r4
   bc65a:	f000 f832 	bl	bc6c2 <strlen>
   bc65e:	4420      	add	r0, r4
   bc660:	bd10      	pop	{r4, pc}

000bc662 <strcmp>:
   bc662:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc666:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc66a:	2a01      	cmp	r2, #1
   bc66c:	bf28      	it	cs
   bc66e:	429a      	cmpcs	r2, r3
   bc670:	d0f7      	beq.n	bc662 <strcmp>
   bc672:	1ad0      	subs	r0, r2, r3
   bc674:	4770      	bx	lr

000bc676 <strcpy>:
   bc676:	4603      	mov	r3, r0
   bc678:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc67c:	f803 2b01 	strb.w	r2, [r3], #1
   bc680:	2a00      	cmp	r2, #0
   bc682:	d1f9      	bne.n	bc678 <strcpy+0x2>
   bc684:	4770      	bx	lr
	...

000bc688 <strdup>:
   bc688:	4b02      	ldr	r3, [pc, #8]	; (bc694 <strdup+0xc>)
   bc68a:	4601      	mov	r1, r0
   bc68c:	6818      	ldr	r0, [r3, #0]
   bc68e:	f000 b803 	b.w	bc698 <_strdup_r>
   bc692:	bf00      	nop
   bc694:	2003dfa8 	.word	0x2003dfa8

000bc698 <_strdup_r>:
   bc698:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bc69a:	4604      	mov	r4, r0
   bc69c:	4608      	mov	r0, r1
   bc69e:	460d      	mov	r5, r1
   bc6a0:	f000 f80f 	bl	bc6c2 <strlen>
   bc6a4:	1c42      	adds	r2, r0, #1
   bc6a6:	4611      	mov	r1, r2
   bc6a8:	4620      	mov	r0, r4
   bc6aa:	9201      	str	r2, [sp, #4]
   bc6ac:	f7fc f8fa 	bl	b88a4 <_malloc_r>
   bc6b0:	4604      	mov	r4, r0
   bc6b2:	b118      	cbz	r0, bc6bc <_strdup_r+0x24>
   bc6b4:	9a01      	ldr	r2, [sp, #4]
   bc6b6:	4629      	mov	r1, r5
   bc6b8:	f7ff ff20 	bl	bc4fc <memcpy>
   bc6bc:	4620      	mov	r0, r4
   bc6be:	b003      	add	sp, #12
   bc6c0:	bd30      	pop	{r4, r5, pc}

000bc6c2 <strlen>:
   bc6c2:	4603      	mov	r3, r0
   bc6c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc6c8:	2a00      	cmp	r2, #0
   bc6ca:	d1fb      	bne.n	bc6c4 <strlen+0x2>
   bc6cc:	1a18      	subs	r0, r3, r0
   bc6ce:	3801      	subs	r0, #1
   bc6d0:	4770      	bx	lr

000bc6d2 <strncmp>:
   bc6d2:	b510      	push	{r4, lr}
   bc6d4:	b17a      	cbz	r2, bc6f6 <strncmp+0x24>
   bc6d6:	4603      	mov	r3, r0
   bc6d8:	3901      	subs	r1, #1
   bc6da:	1884      	adds	r4, r0, r2
   bc6dc:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc6e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc6e4:	4290      	cmp	r0, r2
   bc6e6:	d101      	bne.n	bc6ec <strncmp+0x1a>
   bc6e8:	42a3      	cmp	r3, r4
   bc6ea:	d101      	bne.n	bc6f0 <strncmp+0x1e>
   bc6ec:	1a80      	subs	r0, r0, r2
   bc6ee:	bd10      	pop	{r4, pc}
   bc6f0:	2800      	cmp	r0, #0
   bc6f2:	d1f3      	bne.n	bc6dc <strncmp+0xa>
   bc6f4:	e7fa      	b.n	bc6ec <strncmp+0x1a>
   bc6f6:	4610      	mov	r0, r2
   bc6f8:	e7f9      	b.n	bc6ee <strncmp+0x1c>

000bc6fa <strncpy>:
   bc6fa:	b510      	push	{r4, lr}
   bc6fc:	3901      	subs	r1, #1
   bc6fe:	4603      	mov	r3, r0
   bc700:	b132      	cbz	r2, bc710 <strncpy+0x16>
   bc702:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc706:	f803 4b01 	strb.w	r4, [r3], #1
   bc70a:	3a01      	subs	r2, #1
   bc70c:	2c00      	cmp	r4, #0
   bc70e:	d1f7      	bne.n	bc700 <strncpy+0x6>
   bc710:	441a      	add	r2, r3
   bc712:	2100      	movs	r1, #0
   bc714:	4293      	cmp	r3, r2
   bc716:	d100      	bne.n	bc71a <strncpy+0x20>
   bc718:	bd10      	pop	{r4, pc}
   bc71a:	f803 1b01 	strb.w	r1, [r3], #1
   bc71e:	e7f9      	b.n	bc714 <strncpy+0x1a>

000bc720 <strrchr>:
   bc720:	b538      	push	{r3, r4, r5, lr}
   bc722:	4603      	mov	r3, r0
   bc724:	460c      	mov	r4, r1
   bc726:	b969      	cbnz	r1, bc744 <strrchr+0x24>
   bc728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc72c:	f7ff bf82 	b.w	bc634 <strchr>
   bc730:	1c43      	adds	r3, r0, #1
   bc732:	4605      	mov	r5, r0
   bc734:	4621      	mov	r1, r4
   bc736:	4618      	mov	r0, r3
   bc738:	f7ff ff7c 	bl	bc634 <strchr>
   bc73c:	2800      	cmp	r0, #0
   bc73e:	d1f7      	bne.n	bc730 <strrchr+0x10>
   bc740:	4628      	mov	r0, r5
   bc742:	bd38      	pop	{r3, r4, r5, pc}
   bc744:	2500      	movs	r5, #0
   bc746:	e7f5      	b.n	bc734 <strrchr+0x14>

000bc748 <_strtol_l.constprop.0>:
   bc748:	2b01      	cmp	r3, #1
   bc74a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc74e:	d001      	beq.n	bc754 <_strtol_l.constprop.0+0xc>
   bc750:	2b24      	cmp	r3, #36	; 0x24
   bc752:	d906      	bls.n	bc762 <_strtol_l.constprop.0+0x1a>
   bc754:	f7fc f8ae 	bl	b88b4 <__errno>
   bc758:	2316      	movs	r3, #22
   bc75a:	6003      	str	r3, [r0, #0]
   bc75c:	2000      	movs	r0, #0
   bc75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc762:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc848 <_strtol_l.constprop.0+0x100>
   bc766:	460d      	mov	r5, r1
   bc768:	462e      	mov	r6, r5
   bc76a:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc76e:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc772:	f017 0708 	ands.w	r7, r7, #8
   bc776:	d1f7      	bne.n	bc768 <_strtol_l.constprop.0+0x20>
   bc778:	2c2d      	cmp	r4, #45	; 0x2d
   bc77a:	d132      	bne.n	bc7e2 <_strtol_l.constprop.0+0x9a>
   bc77c:	782c      	ldrb	r4, [r5, #0]
   bc77e:	2701      	movs	r7, #1
   bc780:	1cb5      	adds	r5, r6, #2
   bc782:	2b00      	cmp	r3, #0
   bc784:	d05b      	beq.n	bc83e <_strtol_l.constprop.0+0xf6>
   bc786:	2b10      	cmp	r3, #16
   bc788:	d109      	bne.n	bc79e <_strtol_l.constprop.0+0x56>
   bc78a:	2c30      	cmp	r4, #48	; 0x30
   bc78c:	d107      	bne.n	bc79e <_strtol_l.constprop.0+0x56>
   bc78e:	782c      	ldrb	r4, [r5, #0]
   bc790:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc794:	2c58      	cmp	r4, #88	; 0x58
   bc796:	d14d      	bne.n	bc834 <_strtol_l.constprop.0+0xec>
   bc798:	786c      	ldrb	r4, [r5, #1]
   bc79a:	2310      	movs	r3, #16
   bc79c:	3502      	adds	r5, #2
   bc79e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc7a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc7a6:	f04f 0c00 	mov.w	ip, #0
   bc7aa:	fbb8 f9f3 	udiv	r9, r8, r3
   bc7ae:	4666      	mov	r6, ip
   bc7b0:	fb03 8a19 	mls	sl, r3, r9, r8
   bc7b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc7b8:	f1be 0f09 	cmp.w	lr, #9
   bc7bc:	d816      	bhi.n	bc7ec <_strtol_l.constprop.0+0xa4>
   bc7be:	4674      	mov	r4, lr
   bc7c0:	42a3      	cmp	r3, r4
   bc7c2:	dd24      	ble.n	bc80e <_strtol_l.constprop.0+0xc6>
   bc7c4:	f1bc 0f00 	cmp.w	ip, #0
   bc7c8:	db1e      	blt.n	bc808 <_strtol_l.constprop.0+0xc0>
   bc7ca:	45b1      	cmp	r9, r6
   bc7cc:	d31c      	bcc.n	bc808 <_strtol_l.constprop.0+0xc0>
   bc7ce:	d101      	bne.n	bc7d4 <_strtol_l.constprop.0+0x8c>
   bc7d0:	45a2      	cmp	sl, r4
   bc7d2:	db19      	blt.n	bc808 <_strtol_l.constprop.0+0xc0>
   bc7d4:	fb06 4603 	mla	r6, r6, r3, r4
   bc7d8:	f04f 0c01 	mov.w	ip, #1
   bc7dc:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc7e0:	e7e8      	b.n	bc7b4 <_strtol_l.constprop.0+0x6c>
   bc7e2:	2c2b      	cmp	r4, #43	; 0x2b
   bc7e4:	bf04      	itt	eq
   bc7e6:	782c      	ldrbeq	r4, [r5, #0]
   bc7e8:	1cb5      	addeq	r5, r6, #2
   bc7ea:	e7ca      	b.n	bc782 <_strtol_l.constprop.0+0x3a>
   bc7ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc7f0:	f1be 0f19 	cmp.w	lr, #25
   bc7f4:	d801      	bhi.n	bc7fa <_strtol_l.constprop.0+0xb2>
   bc7f6:	3c37      	subs	r4, #55	; 0x37
   bc7f8:	e7e2      	b.n	bc7c0 <_strtol_l.constprop.0+0x78>
   bc7fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc7fe:	f1be 0f19 	cmp.w	lr, #25
   bc802:	d804      	bhi.n	bc80e <_strtol_l.constprop.0+0xc6>
   bc804:	3c57      	subs	r4, #87	; 0x57
   bc806:	e7db      	b.n	bc7c0 <_strtol_l.constprop.0+0x78>
   bc808:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc80c:	e7e6      	b.n	bc7dc <_strtol_l.constprop.0+0x94>
   bc80e:	f1bc 0f00 	cmp.w	ip, #0
   bc812:	da05      	bge.n	bc820 <_strtol_l.constprop.0+0xd8>
   bc814:	2322      	movs	r3, #34	; 0x22
   bc816:	6003      	str	r3, [r0, #0]
   bc818:	4646      	mov	r6, r8
   bc81a:	b942      	cbnz	r2, bc82e <_strtol_l.constprop.0+0xe6>
   bc81c:	4630      	mov	r0, r6
   bc81e:	e79e      	b.n	bc75e <_strtol_l.constprop.0+0x16>
   bc820:	b107      	cbz	r7, bc824 <_strtol_l.constprop.0+0xdc>
   bc822:	4276      	negs	r6, r6
   bc824:	2a00      	cmp	r2, #0
   bc826:	d0f9      	beq.n	bc81c <_strtol_l.constprop.0+0xd4>
   bc828:	f1bc 0f00 	cmp.w	ip, #0
   bc82c:	d000      	beq.n	bc830 <_strtol_l.constprop.0+0xe8>
   bc82e:	1e69      	subs	r1, r5, #1
   bc830:	6011      	str	r1, [r2, #0]
   bc832:	e7f3      	b.n	bc81c <_strtol_l.constprop.0+0xd4>
   bc834:	2430      	movs	r4, #48	; 0x30
   bc836:	2b00      	cmp	r3, #0
   bc838:	d1b1      	bne.n	bc79e <_strtol_l.constprop.0+0x56>
   bc83a:	2308      	movs	r3, #8
   bc83c:	e7af      	b.n	bc79e <_strtol_l.constprop.0+0x56>
   bc83e:	2c30      	cmp	r4, #48	; 0x30
   bc840:	d0a5      	beq.n	bc78e <_strtol_l.constprop.0+0x46>
   bc842:	230a      	movs	r3, #10
   bc844:	e7ab      	b.n	bc79e <_strtol_l.constprop.0+0x56>
   bc846:	bf00      	nop
   bc848:	000bdadc 	.word	0x000bdadc

000bc84c <strtol>:
   bc84c:	4613      	mov	r3, r2
   bc84e:	460a      	mov	r2, r1
   bc850:	4601      	mov	r1, r0
   bc852:	4802      	ldr	r0, [pc, #8]	; (bc85c <strtol+0x10>)
   bc854:	6800      	ldr	r0, [r0, #0]
   bc856:	f7ff bf77 	b.w	bc748 <_strtol_l.constprop.0>
   bc85a:	bf00      	nop
   bc85c:	2003dfa8 	.word	0x2003dfa8

000bc860 <__register_exitproc>:
   bc860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc864:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc920 <__register_exitproc+0xc0>
   bc868:	4606      	mov	r6, r0
   bc86a:	f8d8 0000 	ldr.w	r0, [r8]
   bc86e:	461f      	mov	r7, r3
   bc870:	460d      	mov	r5, r1
   bc872:	4691      	mov	r9, r2
   bc874:	f000 f856 	bl	bc924 <__retarget_lock_acquire_recursive>
   bc878:	4b25      	ldr	r3, [pc, #148]	; (bc910 <__register_exitproc+0xb0>)
   bc87a:	681c      	ldr	r4, [r3, #0]
   bc87c:	b934      	cbnz	r4, bc88c <__register_exitproc+0x2c>
   bc87e:	4c25      	ldr	r4, [pc, #148]	; (bc914 <__register_exitproc+0xb4>)
   bc880:	601c      	str	r4, [r3, #0]
   bc882:	4b25      	ldr	r3, [pc, #148]	; (bc918 <__register_exitproc+0xb8>)
   bc884:	b113      	cbz	r3, bc88c <__register_exitproc+0x2c>
   bc886:	681b      	ldr	r3, [r3, #0]
   bc888:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc88c:	6863      	ldr	r3, [r4, #4]
   bc88e:	2b1f      	cmp	r3, #31
   bc890:	dd07      	ble.n	bc8a2 <__register_exitproc+0x42>
   bc892:	f8d8 0000 	ldr.w	r0, [r8]
   bc896:	f000 f847 	bl	bc928 <__retarget_lock_release_recursive>
   bc89a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc89e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc8a2:	b34e      	cbz	r6, bc8f8 <__register_exitproc+0x98>
   bc8a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc8a8:	b988      	cbnz	r0, bc8ce <__register_exitproc+0x6e>
   bc8aa:	4b1c      	ldr	r3, [pc, #112]	; (bc91c <__register_exitproc+0xbc>)
   bc8ac:	b923      	cbnz	r3, bc8b8 <__register_exitproc+0x58>
   bc8ae:	f8d8 0000 	ldr.w	r0, [r8]
   bc8b2:	f000 f838 	bl	bc926 <__retarget_lock_release>
   bc8b6:	e7f0      	b.n	bc89a <__register_exitproc+0x3a>
   bc8b8:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc8bc:	f7fb ffba 	bl	b8834 <malloc>
   bc8c0:	2800      	cmp	r0, #0
   bc8c2:	d0f4      	beq.n	bc8ae <__register_exitproc+0x4e>
   bc8c4:	2300      	movs	r3, #0
   bc8c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc8ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc8ce:	6863      	ldr	r3, [r4, #4]
   bc8d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc8d4:	2201      	movs	r2, #1
   bc8d6:	409a      	lsls	r2, r3
   bc8d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc8dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc8e0:	4313      	orrs	r3, r2
   bc8e2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc8e6:	2e02      	cmp	r6, #2
   bc8e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc8ec:	bf02      	ittt	eq
   bc8ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc8f2:	4313      	orreq	r3, r2
   bc8f4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc8f8:	6863      	ldr	r3, [r4, #4]
   bc8fa:	f8d8 0000 	ldr.w	r0, [r8]
   bc8fe:	1c5a      	adds	r2, r3, #1
   bc900:	3302      	adds	r3, #2
   bc902:	6062      	str	r2, [r4, #4]
   bc904:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc908:	f000 f80e 	bl	bc928 <__retarget_lock_release_recursive>
   bc90c:	2000      	movs	r0, #0
   bc90e:	e7c6      	b.n	bc89e <__register_exitproc+0x3e>
   bc910:	2003e7e8 	.word	0x2003e7e8
   bc914:	2003e75c 	.word	0x2003e75c
   bc918:	00000000 	.word	0x00000000
   bc91c:	000b8835 	.word	0x000b8835
   bc920:	2003e00c 	.word	0x2003e00c

000bc924 <__retarget_lock_acquire_recursive>:
   bc924:	4770      	bx	lr

000bc926 <__retarget_lock_release>:
   bc926:	4770      	bx	lr

000bc928 <__retarget_lock_release_recursive>:
   bc928:	4770      	bx	lr

000bc92a <link_code_end>:
	...

000bc92c <dynalib_user>:
   bc92c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc93c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bc94c:	7620 7269 7574 6c61 6900 766e 6c61 6469      virtual.invalid
   bc95c:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   bc96c:	2065 7273 2063 2626 7320 6372 3e2d 6163     e src && src->ca
   bc97c:	6c6c 6162 6b63 5300 6174 7472 7075 6320     llback.Startup c
   bc98c:	6d6f 6c70 7465 2065 6977 6874 2520 2073     omplete with %s 
   bc99c:	6974 656d 6120 646e 7720 7469 2068 6162     time and with ba
   bc9ac:	7474 7265 2079 3425 322e 0066 7453 7261     ttery %4.2f.Star
   bc9bc:	7574 2070 6f63 706d 656c 6574 6620 726f     tup complete for
   bc9cc:	7420 6568 4e20 646f 2065 6977 6874 6120      the Node with a
   bc9dc:	656c 7472 6320 646f 2065 6425 4600 6f72     lert code %d.Fro
   bc9ec:	206d 7325 7420 206f 7325 7720 7469 2068     m %s to %s with 
   bc9fc:	6e69 6176 696c 2064 6974 656d 4600 6f72     invalid time.Fro
   bca0c:	206d 7325 7420 206f 7325 6620 726f 2520     m %s to %s for %
   bca1c:	2075 6573 6f63 646e 0073 7246 6d6f 2520     u seconds.From %
   bca2c:	2073 6f74 2520 0073 6e4f 4f00 6666 5300     s to %s.On.Off.S
   bca3c:	656c 7065 6620 726f 2520 2069 6573 6f63     leep for %i seco
   bca4c:	646e 2073 6e75 6974 206c 656e 7478 6520     nds until next e
   bca5c:	6576 746e 2520 0073 0030 6f57 656b 7720     vent %s.0.Woke w
   bca6c:	7469 2068 7375 7265 6220 7475 6f74 206e     ith user button 
   bca7c:	202d 6f6e 6d72 6c61 6f20 6570 6172 6974     - normal operati
   bca8c:	6e6f 0073 7741 6b6f 2065 7461 2520 2073     ons.Awoke at %s 
   bca9c:	6977 6874 2520 696c 6620 6572 2065 656d     with %li free me
   bcaac:	6f6d 7972 4600 6961 656c 2064 6e69 7320     mory.Failed in s
   bcabc:	6e65 2064 6e61 2064 6572 6373 6575 6920     end and rescue i
   bcacc:	2073 7325 5300 6e65 2064 6e61 2064 6341     s %s.Send and Ac
   bcadc:	206b 7573 6363 6565 6564 2064 6e61 2064     k succeeded and 
   bcaec:	6572 6373 6575 6920 2073 7325 4600 6961     rescue is %s.Fai
   bcafc:	656c 2064 6e69 6120 6b63 6120 646e 7220     led in ack and r
   bcb0c:	7365 7563 2065 7369 2520 0073 6553 646e     escue is %s.Send
   bcb1c:	6620 6961 656c 2064 202d 6f67 6e69 2067      failed - going 
   bcb2c:	6f74 7320 6e65 2064 7665 7265 2079 696d     to send every mi
   bcb3c:	756e 6574 6900 696e 2074 6166 6c69 6465     nute.init failed
   bcb4c:	5300 7465 6974 676e 6e20 646f 2065 756e     .Setting node nu
   bcb5c:	626d 7265 6120 2073 6147 6574 6177 0079     mber as Gateway.
   bcb6c:	6f4c 4152 5220 6461 6f69 6920 696e 6974     LoRA Radio initi
   bcb7c:	6c61 7a69 6465 6120 2073 6f4e 6564 754e     alized as NodeNu
   bcb8c:	626d 7265 6f20 2066 6925 6120 646e 4420     mber of %i and D
   bcb9c:	7665 6369 4965 2044 666f 2520 2069 6e61     eviceID of %i an
   bcbac:	2064 2061 616d 6967 2063 756e 626d 7265     d a magic number
   bcbbc:	6f20 2066 6925 5300 6e65 6964 676e 6420      of %i.Sending d
   bcbcc:	7461 2061 6572 6f70 7472 7420 206f 6147     ata report to Ga
   bcbdc:	6574 6177 0079 6573 646e 6e69 2067 656d     teway.sending me
   bcbec:	7373 6761 2065 756e 626d 7265 2520 0064     ssage number %d.
   bcbfc:	6f4e 6564 2520 2064 202d 6144 6174 7220     Node %d - Data r
   bcc0c:	7065 726f 2074 6573 646e 7420 206f 6167     eport send to ga
   bcc1c:	6574 6177 2079 6425 7320 6375 6563 7373     teway %d success
   bcc2c:	7566 6c6c 0079 6f4e 6564 2520 2064 202d     fully.Node %d - 
   bcc3c:	6144 6174 7220 7065 726f 2074 6573 646e     Data report send
   bcc4c:	7420 206f 6167 6574 6177 2079 6425 6620      to gateway %d f
   bcc5c:	6961 656c 0064 6f4e 6564 2520 2064 202d     ailed.Node %d - 
   bcc6c:	6552 6563 7669 6e69 2067 6361 6e6b 776f     Receiving acknow
   bcc7c:	656c 6764 656d 746e 2d20 4420 7461 2061     ledgment - Data 
   bcc8c:	6552 6f70 7472 5400 6d69 2065 6573 2074     Report.Time set 
   bcc9c:	6f74 2520 2073 6e61 2064 656e 7478 7220     to %s and next r
   bccac:	7065 726f 2074 7369 6920 206e 7525 7320     eport is in %u s
   bccbc:	6365 6e6f 7364 6120 2074 7325 6100 4e20     econds at %s.a N
   bcccc:	646f 4e65 6d75 6562 2072 7369 6e20 6565     odeNumber is nee
   bccdc:	6564 0064 6874 2065 6c63 636f 206b 7369     ded.the clock is
   bccec:	6e20 746f 7320 7465 5300 6e65 6964 676e      not set.Sending
   bccfc:	6a20 696f 206e 6572 7571 7365 2074 6562      join request be
   bcd0c:	6163 7375 2065 7325 4400 7461 2061 6572     cause %s.Data re
   bcd1c:	6f70 7472 7320 6e65 2064 6f74 6720 7461     port send to gat
   bcd2c:	7765 7961 7320 6375 6563 7373 7566 6c6c     eway successfull
   bcd3c:	0079 6144 6174 7220 7065 726f 2074 6573     y.Data report se
   bcd4c:	646e 7420 206f 6147 6574 6177 2079 6166     nd to Gateway fa
   bcd5c:	6c69 6465 5200 6365 6965 6976 676e 6120     iled.Receiving a
   bcd6c:	6b63 6f6e 6c77 6465 6d67 6e65 2074 202d     cknowledgment - 
   bcd7c:	6f4a 6e69 5220 7165 6575 7473 5400 6d69     Join Request.Tim
   bcd8c:	2065 6573 2074 6f74 2520 2c73 6e20 646f     e set to %s, nod
   bcd9c:	2065 7369 2520 2064 6e61 2064 656e 7478     e is %d and next
   bcdac:	7220 7065 726f 2074 7369 6920 206e 7525      report is in %u
   bcdbc:	7320 6365 6e6f 7364 4e00 646f 2065 202d      seconds.Node - 
   bcdcc:	6553 646e 6e69 2067 6c41 7265 2074 6552     Sending Alert Re
   bcddc:	6f70 7472 7420 206f 6147 6574 6177 0079     port to Gateway.
   bcdec:	6553 646e 6e69 2067 6c41 7265 2074 6552     Sending Alert Re
   bcdfc:	6f70 7472 6e20 6d75 6562 2072 6425 7420     port number %d t
   bce0c:	206f 6167 6574 6177 2079 7461 2520 0064     o gateway at %d.
   bce1c:	6f4e 6564 2d20 4120 656c 7472 7220 7065     Node - Alert rep
   bce2c:	726f 2074 6573 646e 7420 206f 6167 6574     ort send to gate
   bce3c:	6177 2079 7573 6363 7365 6673 6c75 796c     way successfully
   bce4c:	4e00 646f 2065 202d 6c41 7265 2074 6552     .Node - Alert Re
   bce5c:	6f70 7472 7320 6e65 2064 6f74 4720 7461     port send to Gat
   bce6c:	7765 7961 6620 6961 656c 0064 6552 6563     eway failed.Rece
   bce7c:	7669 6e69 2067 6361 6e6b 776f 656c 6764     iving acknowledg
   bce8c:	656d 746e 2d20 4120 656c 7472 5220 7065     ment - Alert Rep
   bce9c:	726f 0074 6552 6563 7669 6465 6620 6f72     ort.Received fro
   bceac:	206d 6f6e 6564 2520 2064 6977 6874 7220     m node %d with r
   bcebc:	7373 3d69 6425 2d20 6120 2520 2073 656d     ssi=%d - a %s me
   bcecc:	7373 6761 2065 6177 6574 2064 6f66 2072     ssage wated for 
   bcedc:	6c25 2075 536d 6365 0000 0000               %lu mSec....

000bcee8 <_ZTV14LoRA_Functions>:
	...
   bcef0:	4911 000b 4913 000b 2041 656e 2077 6164     .I...I..A new da
   bcf00:	2079 202d 6572 6573 7474 6e69 2067 7665     y - resetting ev
   bcf10:	7265 7479 6968 676e 0000 0000               erything....

000bcf1c <_ZTV8MB85RC64>:
	...
   bcf24:	5029 000b 503d 000b 6905 000b 699b 000b     )P..=P...i...i..
   bcf34:	6a1d 000b                                   .j..

000bcf38 <_ZTV13sysStatusData>:
	...
   bcf40:	5145 000b 50b5 000b 5093 000b 7fc1 000b     EQ...P...P......
   bcf50:	7fe9 000b 80dd 000b 8175 000b 5051 000b     ........u...QP..
   bcf60:	5069 000b                                   iP..

000bcf64 <_ZTV17currentStatusData>:
	...
   bcf6c:	515f 000b 50b5 000b 5093 000b 7fc1 000b     _Q...P...P......
   bcf7c:	7fe9 000b 80dd 000b 8175 000b 4ffd 000b     ........u....O..
   bcf8c:	5015 000b 6e49 7469 6c61 7a69 6e69 2067     .P..Initalizing 
   bcf9c:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   bcfac:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   bcfbc:	6f43 666e 6769 0000                         Config..

000bcfc4 <BLUE_LED>:
   bcfc4:	0007                                        ..

000bcfc6 <BUTTON_PIN>:
   bcfc6:	0004                                        ..

000bcfc8 <INT_PIN>:
   bcfc8:	0012                                        ..

000bcfca <RFM95_CS>:
   bcfca:	000e                                        ..

000bcfcc <RFM95_INT>:
   bcfcc:	0002                                        ..

000bcfce <TMP36_SENSE_PIN>:
   bcfce:	000f 6553 7474 6e69 2067 6176 756c 7365     ..Setting values
   bcfde:	6620 726f 7420 6568 6e20 646f 0065 6579      for the node.ye
   bcfee:	0073 6f6e 4900 636e 6572 7361 6e69 2067     s.no.Increasing 
   bcffe:	6572 6f70 7472 6e69 2067 7266 7165 6575     reporting freque
   bd00e:	636e 2079 6f74 3120 2032 696d 756e 6574     ncy to 12 minute
   bd01e:	0073 7349 4c20 776f 5020 776f 7265 4d20     s.Is Low Power M
   bd02e:	646f 2065 6573 3f74 2520 0073 6f4d 6564     ode set? %s.Mode
	...

000bd040 <_ZTVN5spark10LogHandlerE>:
	...
   bd050:	40a5 000b 56f1 000b                         .@...V..

000bd058 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bd060:	56fd 000b 5731 000b a479 000b 56f3 000b     .V..1W..y....V..
   bd070:	6e55 6e6b 776f 006e 6f4e 656e 5700 4669     Unknown.None.WiF
   bd080:	0069 5347 004d 4d55 5354 4300 4d44 0041     i.GSM.UMTS.CDMA.
   bd090:	544c 0045 4549 4545 3038 3132 3435 4c00     LTE.IEEE802154.L
   bd0a0:	4554 435f 5441 4d5f 0031 544c 5f45 4143     TE_CAT_M1.LTE_CA
   bd0b0:	5f54 424e 0031 6f4e 2074 6843 7261 6967     T_NB1.Not Chargi
   bd0c0:	676e 4300 6168 6772 6465 4400 7369 6863     ng.Charged.Disch
   bd0d0:	7261 6967 676e 4600 7561 746c 4400 6369     arging.Fault.Dic
   bd0e0:	6e6f 656e 7463 6465 4100 7373 7265 6974     onnected.Asserti
   bd0f0:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   bd100:	3c20 2820 3233 2b20 3120 2936 2500 2073      < (32 + 16).%s 
   bd110:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   bd120:	6630 2525 0020 6f43 6e75 2c74 6820 756f     0f%% .Count, hou
   bd130:	6c72 3a79 2520 2e69 6420 6961 796c 203a     rly: %i. daily: 
   bd140:	6925 2500 2069 0043 6e49 6574 6e72 6c61     %i.%i C.Internal
   bd150:	5420 6d65 6570 6172 7574 6572 6920 2073      Temperature is 
   bd160:	7325 0000 d070 000b d078 000b d07d 000b     %s..p...x...}...
   bd170:	d082 000b d086 000b d08b 000b d090 000b     ................
   bd180:	d094 000b d09f 000b d0aa 000b 6166 6c69     ............fail
   bd190:	6465 7420 206f 6572 6461 7220 6765 6441     ed to read regAd
   bd1a0:	7264 253d 3230 2078 6f63 6e75 3d74 7525     dr=%02x count=%u
   bd1b0:	6600 6961 656c 2064 6f74 7220 6165 2064     .failed to read 
   bd1c0:	6572 4167 6464 3d72 3025 7832 7320 6174     regAddr=%02x sta
   bd1d0:	3d74 6425 4600 554f 2054 6964 2064 6f6e     t=%d.FOUT did no
   bd1e0:	2074 6f67 4820 4749 0048 6f6e 2074 6564     t go HIGH.not de
   bd1f0:	6574 7463 6465 6600 6961 656c 2064 6f74     tected.failed to
   bd200:	7720 6972 6574 7220 6765 6441 7264 253d      write regAddr=%
   bd210:	3230 2078 7473 7461 253d 0064 6573 5774     02x stat=%d.setW
   bd220:	5444 2520 0064 6177 6374 6468 676f 6320     DT %d.watchdog c
   bd230:	656c 7261 6465 6220 6552 7573 746c 253d     leared bResult=%
   bd240:	0064 6177 6374 6468 676f 7320 7465 6620     d.watchdog set f
   bd250:	756f 5372 6365 3d73 6425 6220 6552 7573     ourSecs=%d bResu
   bd260:	746c 253d 0064 4157 4354 4448 474f 4400     lt=%d.WATCHDOG.D
   bd270:	4545 5f50 4f50 4557 5f52 4f44 4e57 4300     EEP_POWER_DOWN.C
   bd280:	554f 544e 4f44 4e57 545f 4d49 5245 4100     OUNTDOWN_TIMER.A
   bd290:	414c 4d52 6600 6961 756c 6572 6920 206e     LARM.failure in 
   bd2a0:	7075 6164 6574 6157 656b 6552 7361 6e6f     updateWakeReason
   bd2b0:	2520 0064 6177 656b 7220 6165 6f73 206e      %d.wake reason 
   bd2c0:	203d 7325 2500 3430 2d64 3025 6432 252d     = %s.%04d-%02d-%
   bd2d0:	3230 2064 3025 6432 253a 3230 3a64 3025     02d %02d:%02d:%0
   bd2e0:	6432 6700 7465 7452 4163 5473 206d 7325     2d.getRtcAsTm %s
   bd2f0:	7300 7465 7452 4163 5473 206d 7325 6600     .setRtcAsTm %s.f
   bd300:	6961 756c 6572 6920 206e 6573 5274 6374     ailure in setRtc
   bd310:	7246 6d6f 6d54 2520 0064 6573 2074 5452     FromTm %d.set RT
   bd320:	2043 7266 6d6f 6320 6f6c 6475 2520 0073     C from cloud %s.
   bd330:	6573 2074 7973 7473 6d65 6320 6f6c 6b63     set system clock
   bd340:	6620 6f72 206d 5452 2043 7325 6600 6961      from RTC %s.fai
   bd350:	656c 2064 6f74 6420 7465 6365 2074 4241     led to detect AB
   bd360:	3831 3530 6100 7070 612e 3162 3038 0035     1805.app.ab1805.

000bd370 <_ZTV6AB1805>:
	...
   bd378:	5dad 000b 5daf 000b 62a3 000b 6329 000b     .]...]...b..)c..

000bd388 <_ZTV6MB85RC>:
	...
   bd390:	68c5 000b 68c7 000b 6905 000b 699b 000b     .h...h...i...i..
   bd3a0:	6a1d 000b                                   .j..

000bd3a4 <_ZTV15RHGenericDriver>:
	...
   bd3b4:	6bd9 000b 40a5 000b 40a5 000b 40a5 000b     .k...@...@...@..
   bd3c4:	40a5 000b 6c3b 000b 6bdd 000b 6c8b 000b     .@..;l...k...l..
   bd3d4:	6c59 000b 6caf 000b 6be7 000b 6bef 000b     Yl...l...k...k..
   bd3e4:	6bf3 000b 6bf7 000b 6bfb 000b 6bff 000b     .k...k...k...k..
   bd3f4:	6beb 000b 6c0b 000b 6c0f 000b 6c13 000b     .k...l...l...l..
   bd404:	6c17 000b 6c1b 000b 6c21 000b 6c25 000b     .l...l..!l..%l..
   bd414:	6be7 000b 6c29 000b 6c2f 000b 6c35 000b     .k..)l../l..5l..

000bd424 <_ZTV12RHGenericSPI>:
	...
   bd42c:	40a5 000b 6d0d 000b 6d0f 000b 40a5 000b     .@...m...m...@..
   bd43c:	40a5 000b 6d17 000b 6d1b 000b 6d1f 000b     .@...m...m...m..
   bd44c:	6d11 000b 6d13 000b 6d15 000b 6564 6166     .m...m...m..defa
   bd45c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bd46c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bd47c:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bd48c:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bd49c <_ZTVN8particle11SPISettingsE>:
	...
   bd4a4:	6d65 000b 6d39 000b 6d3b 000b               em..9m..;m..

000bd4b0 <_ZTV13RHHardwareSPI>:
	...
   bd4b8:	6e19 000b 6e2d 000b 6e3b 000b 6e49 000b     .n..-n..;n..In..
   bd4c8:	6eb5 000b 6d17 000b 6d1b 000b 6d1f 000b     .n...m...m...m..
   bd4d8:	6ec3 000b 6ed7 000b 6ee5 000b               .n...n...n..

000bd4e4 <_ZTV6RHMesh>:
	...
   bd4ec:	6fb1 000b 72b5 000b 6f11 000b 6efd 000b     .o...r...o...n..

000bd4fc <_ZTV8RHRouter>:
	...
   bd504:	7521 000b 7565 000b                         !u..eu..

000bd50c <_ZTV11RHSPIDriver>:
	...
   bd51c:	7801 000b 40a5 000b 40a5 000b 40a5 000b     .x...@...@...@..
   bd52c:	40a5 000b 6c3b 000b 6bdd 000b 6c8b 000b     .@..;l...k...l..
   bd53c:	6c59 000b 6caf 000b 6be7 000b 6bef 000b     Yl...l...k...k..
   bd54c:	6bf3 000b 6bf7 000b 6bfb 000b 6bff 000b     .k...k...k...k..
   bd55c:	6beb 000b 6c0b 000b 6c0f 000b 6c13 000b     .k...l...l...l..
   bd56c:	6c17 000b 6c1b 000b 6c21 000b 6c25 000b     .l...l..!l..%l..
   bd57c:	6be7 000b 6c29 000b 6c2f 000b 6c35 000b     .k..)l../l..5l..
   bd58c:	782d 000b 7837 000b                         -x..7x..

000bd594 <_ZL18MODEM_CONFIG_TABLE>:
   bd594:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bd5a4 <_ZTV7RH_RF95>:
	...
   bd5ac:	799f 000b 79d7 000b 7eb1 000b 7d47 000b     .y...y...~..G}..
   bd5bc:	7a0d 000b 7d8f 000b 799b 000b 6c3b 000b     .z...}...y..;l..
   bd5cc:	6bdd 000b 6c8b 000b 6c59 000b 6caf 000b     .k...l..Yl...l..
   bd5dc:	79a1 000b 6bef 000b 6bf3 000b 6bf7 000b     .y...k...k...k..
   bd5ec:	6bfb 000b 6bff 000b 6beb 000b 6c0b 000b     .k...k...k...l..
   bd5fc:	6c0f 000b 6c13 000b 6c17 000b 6c1b 000b     .l...l...l...l..
   bd60c:	6c21 000b 6c25 000b 79e7 000b 6c29 000b     !l..%l...y..)l..
   bd61c:	6c2f 000b 6c35 000b 782d 000b 7837 000b     /l..5l..-x..7x..
   bd62c:	7997 000b 6f67 3a74 6d20 6761 6369 253d     .y..got: magic=%
   bd63c:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   bd64c:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   bd65c:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   bd66c:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   bd67c:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   bd68c:	253d 3830 0078 0000                         =%08x...

000bd694 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bd69c:	7fbb 000b 8007 000b 7fb9 000b 7fc1 000b     ................
   bd6ac:	7fe9 000b 80dd 000b 8175 000b               ........u...

000bd6b8 <_ZTVN5spark13CellularClassE>:
	...
   bd6c0:	8a33 000b 8a29 000b 8a1f 000b 89d5 000b     3...)...........
   bd6d0:	8a13 000b 8a07 000b a7d1 000b a7d9 000b     ................
   bd6e0:	89fb 000b 89f3 000b 89e9 000b 89df 000b     ................
   bd6f0:	a809 000b                                   ....

000bd6f4 <_ZTV14CellularSignal>:
	...
   bd6fc:	8ac1 000b 8b25 000b 8ac3 000b 8b35 000b     ....%.......5...
   bd70c:	8b69 000b 8b95 000b 8bc9 000b 8ae9 000b     i...............
   bd71c:	8ac7 000b 8ae3 000b fffc ffff 0000 0000     ................
   bd72c:	8b1d 000b                                   ....

000bd730 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd738:	8c0d 000b 8c13 000b 8c51 000b 8c21 000b     ........Q...!...
   bd748:	8c0f 000b                                   ....

000bd74c <_ZTVN5spark13EthernetClassE>:
	...
   bd754:	919b 000b 9191 000b 9187 000b 917d 000b     ............}...
   bd764:	9171 000b 9165 000b a7d1 000b a7d9 000b     q...e...........
   bd774:	9159 000b 9151 000b 9147 000b 913d 000b     Y...Q...G...=...
   bd784:	a809 000b                                   ....

000bd788 <_ZTV7TwoWire>:
	...
   bd790:	926b 000b 92b5 000b 928d 000b 926d 000b     k...........m...
   bd7a0:	9295 000b 929d 000b 92a5 000b 92ad 000b     ................

000bd7b0 <_ZTV9IPAddress>:
	...
   bd7b8:	9419 000b 9409 000b 940b 000b 2575 3430     ............u%04
   bd7c8:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bd7d8:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bd7e8:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bd7f8:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bd808:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bd818:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bd828:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000bd838 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bd840:	98c5 000b 98eb 000b 98a9 000b 9527 000b     ............'...

000bd850 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bd858:	9d21 000b 9d39 000b a479 000b 56f3 000b     !...9...y....V..

000bd868 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bd870:	9d4d 000b 9d61 000b a61d 000b 98b1 000b     M...a...........

000bd880 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bd888:	98c3 000b 98f9 000b a3dd 000b 98b3 000b     ................

000bd898 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bd8a0:	98c1 000b 9907 000b 9c89 000b 9929 000b     ............)...

000bd8b0 <_ZTVN5spark12NetworkClassE>:
	...
   bd8b8:	a791 000b a79b 000b a7a5 000b a7af 000b     ................
   bd8c8:	a7b9 000b a7c5 000b a7d1 000b a7d9 000b     ................
   bd8d8:	a7e1 000b a7ed 000b a7f5 000b a7ff 000b     ................
   bd8e8:	a809 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000bd8f8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd8f8:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bd908:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bd918:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bd928:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bd938:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bd948:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bd958 <_ZTV11USARTSerial>:
	...
   bd960:	b51d 000b b589 000b b561 000b aa59 000b     ........a...Y...
   bd970:	b531 000b b54d 000b b53f 000b b55b 000b     1...M...?...[...
   bd980:	b51f 000b b523 000b                         ....#...

000bd988 <_ZTV9USBSerial>:
	...
   bd990:	b5db 000b b643 000b b619 000b aa59 000b     ....C.......Y...
   bd9a0:	b60b 000b b5dd 000b b5ed 000b b63d 000b     ............=...
   bd9b0:	b5fd 000b b5d5 000b                         ........

000bd9b8 <_ZSt7nothrow>:
   bd9b8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   bd9c8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000bd9d9 <day_name.1>:
   bd9d9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bd9e9:	6972 6153                                    riSat

000bd9ee <mon_name.0>:
   bd9ee:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bd9fe:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bda0e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bda1e:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bda2e:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bda3e:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bda4e:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bda5e:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bda6e:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bda7e:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bda8e:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bda9e:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bdaae:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bdabe:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bdace:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bdadb <_ctype_>:
   bdadb:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bdaeb:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bdafb:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bdb0b:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bdb1b:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bdb2b:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bdb3b:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bdb4b:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bdb5b:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bdbdc <link_const_variable_data_end>:
   bdbdc:	000b48b1 	.word	0x000b48b1
   bdbe0:	000b4fc5 	.word	0x000b4fc5
   bdbe4:	000b55cd 	.word	0x000b55cd
   bdbe8:	000b592d 	.word	0x000b592d
   bdbec:	000b5da1 	.word	0x000b5da1
   bdbf0:	000b68b5 	.word	0x000b68b5
   bdbf4:	000b6eed 	.word	0x000b6eed
   bdbf8:	000b89c5 	.word	0x000b89c5
   bdbfc:	000b8a91 	.word	0x000b8a91
   bdc00:	000b91a5 	.word	0x000b91a5
   bdc04:	000ba469 	.word	0x000ba469
   bdc08:	000ba8e1 	.word	0x000ba8e1
   bdc0c:	000bad4d 	.word	0x000bad4d
   bdc10:	000bb1e1 	.word	0x000bb1e1
   bdc14:	000bb509 	.word	0x000bb509

000bdc18 <link_constructors_end>:
	...
