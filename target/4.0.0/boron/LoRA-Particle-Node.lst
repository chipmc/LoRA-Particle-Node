
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000abd0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bebf0  000bebf0  0000ebf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bec14  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  2003dd7c  000bec18  0001dd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008a8  2003df48  2003df48  0002df48  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bede4  000bede4  0001ede4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bee0c  000bee0c  0001ee0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001dc2d4  00000000  00000000  0001ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00023b7f  00000000  00000000  001fb0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004cce3  00000000  00000000  0021ec63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003ff8  00000000  00000000  0026b946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d758  00000000  00000000  0026f93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000547bd  00000000  00000000  0027d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00076433  00000000  00000000  002d1853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144a72  00000000  00000000  00347c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bab4  00000000  00000000  0048c6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 f9c5 	bl	bd3c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 f9e7 	bl	bd410 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd7c 	.word	0x2003dd7c
   b404c:	000bec18 	.word	0x000bec18
   b4050:	2003df48 	.word	0x2003df48
   b4054:	2003df48 	.word	0x2003df48
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 fa4f 	bl	bb504 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bebac 	.word	0x000bebac
   b4080:	000bebe4 	.word	0x000bebe4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc9a 	b.w	b49bc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9a3 	bl	b43d4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 b9ef 	b.w	bb474 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bd0b 	b.w	b8ab0 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bd09 	b.w	b8ab0 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bd0f 	b.w	b8ac0 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fbd4 	bl	b8858 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b84a9 	.word	0x000b84a9
   b40b8:	000bd7c8 	.word	0x000bd7c8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z18outOfMemoryHandleryi+0x8>)
   b40da:	601a      	str	r2, [r3, #0]
}
   b40dc:	4770      	bx	lr
   b40de:	bf00      	nop
   b40e0:	2003dd7c 	.word	0x2003dd7c

000b40e4 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b40e4:	4b01      	ldr	r3, [pc, #4]	; (b40ec <_Z13userSwitchISRv+0x8>)
   b40e6:	2201      	movs	r2, #1
   b40e8:	701a      	strb	r2, [r3, #0]
}
   b40ea:	4770      	bx	lr
   b40ec:	2003dfcf 	.word	0x2003dfcf

000b40f0 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40f0:	b530      	push	{r4, r5, lr}
   b40f2:	b085      	sub	sp, #20
   b40f4:	4604      	mov	r4, r0
   b40f6:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40f8:	b160      	cbz	r0, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40fa:	6840      	ldr	r0, [r0, #4]
   b40fc:	b150      	cbz	r0, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40fe:	6885      	ldr	r5, [r0, #8]
   b4100:	b145      	cbz	r5, b4114 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b4102:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b4106:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b410a:	68c4      	ldr	r4, [r0, #12]
   b410c:	ab01      	add	r3, sp, #4
   b410e:	466a      	mov	r2, sp
   b4110:	a902      	add	r1, sp, #8
   b4112:	47a0      	blx	r4
    }
   b4114:	b005      	add	sp, #20
   b4116:	bd30      	pop	{r4, r5, pc}

000b4118 <_Z9sensorISRv>:

void sensorISR()
{
   b4118:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b411a:	4c08      	ldr	r4, [pc, #32]	; (b413c <_Z9sensorISRv+0x24>)
   b411c:	7823      	ldrb	r3, [r4, #0]
   b411e:	b12b      	cbz	r3, b412c <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              		// sets the sensor flag for the main loop
   b4120:	4b07      	ldr	r3, [pc, #28]	; (b4140 <_Z9sensorISRv+0x28>)
   b4122:	2201      	movs	r2, #1
   b4124:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b4126:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b4128:	7023      	strb	r3, [r4, #0]
}
   b412a:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b412c:	f001 fa90 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4130:	f001 fb8a 	bl	b5848 <_ZNK13sysStatusData14get_sensorTypeEv>
   b4134:	2801      	cmp	r0, #1
   b4136:	d0f3      	beq.n	b4120 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b4138:	2301      	movs	r3, #1
   b413a:	e7f5      	b.n	b4128 <_Z9sensorISRv+0x10>
   b413c:	2003df6c 	.word	0x2003df6c
   b4140:	2003dfcd 	.word	0x2003dfcd

000b4144 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4144:	b530      	push	{r4, r5, lr}
   b4146:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b4148:	6800      	ldr	r0, [r0, #0]
   b414a:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b414c:	9301      	str	r3, [sp, #4]
   b414e:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4152:	6883      	ldr	r3, [r0, #8]
   b4154:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b4158:	b90b      	cbnz	r3, b415e <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b415a:	f007 fb51 	bl	bb800 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b415e:	68c3      	ldr	r3, [r0, #12]
   b4160:	aa01      	add	r2, sp, #4
   b4162:	a902      	add	r1, sp, #8
   b4164:	4798      	blx	r3
      }
   b4166:	b005      	add	sp, #20
   b4168:	bd30      	pop	{r4, r5, pc}

000b416a <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b416a:	2a01      	cmp	r2, #1
   b416c:	d102      	bne.n	b4174 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b416e:	6001      	str	r1, [r0, #0]
      }
   b4170:	2000      	movs	r0, #0
   b4172:	4770      	bx	lr
	  switch (__op)
   b4174:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4176:	bf04      	itt	eq
   b4178:	680b      	ldreq	r3, [r1, #0]
   b417a:	6003      	streq	r3, [r0, #0]
	      break;
   b417c:	e7f8      	b.n	b4170 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b417e <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b417e:	6803      	ldr	r3, [r0, #0]
   b4180:	6812      	ldr	r2, [r2, #0]
   b4182:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4186:	4718      	bx	r3

000b4188 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4188:	4b0a      	ldr	r3, [pc, #40]	; (b41b4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b418a:	b510      	push	{r4, lr}
   b418c:	4604      	mov	r4, r0
   b418e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4190:	f005 fb66 	bl	b9860 <_ZN5spark10LogManager8instanceEv>
   b4194:	4621      	mov	r1, r4
   b4196:	f005 fd9e 	bl	b9cd6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b419a:	f007 f923 	bl	bb3e4 <_Z16_fetch_usbserialv>
   b419e:	f007 f913 	bl	bb3c8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b41a2:	4620      	mov	r0, r4
   b41a4:	4b04      	ldr	r3, [pc, #16]	; (b41b8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b41a6:	f840 3b04 	str.w	r3, [r0], #4
   b41aa:	f005 fc2f 	bl	b9a0c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b41ae:	4620      	mov	r0, r4
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	000bda24 	.word	0x000bda24
   b41b8:	000bda0c 	.word	0x000bda0c

000b41bc <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b41bc:	b510      	push	{r4, lr}
   b41be:	4604      	mov	r4, r0
    }
   b41c0:	f7ff ffe2 	bl	b4188 <_ZN5spark16SerialLogHandlerD1Ev>
   b41c4:	4620      	mov	r0, r4
   b41c6:	2124      	movs	r1, #36	; 0x24
   b41c8:	f7ff ff69 	bl	b409e <_ZdlPvj>
   b41cc:	4620      	mov	r0, r4
   b41ce:	bd10      	pop	{r4, pc}

000b41d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b41d0:	b510      	push	{r4, lr}
      if (_M_manager)
   b41d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b41d4:	4604      	mov	r4, r0
      if (_M_manager)
   b41d6:	b113      	cbz	r3, b41de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b41d8:	2203      	movs	r2, #3
   b41da:	4601      	mov	r1, r0
   b41dc:	4798      	blx	r3
    }
   b41de:	4620      	mov	r0, r4
   b41e0:	bd10      	pop	{r4, pc}

000b41e2 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b41e2:	b510      	push	{r4, lr}
            delete callableWrapper;
   b41e4:	4604      	mov	r4, r0
   b41e6:	b138      	cbz	r0, b41f8 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b41e8:	f7ff fff2 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b41ec:	4620      	mov	r0, r4
   b41ee:	2110      	movs	r1, #16
        };
   b41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b41f4:	f7ff bf53 	b.w	b409e <_ZdlPvj>
        };
   b41f8:	bd10      	pop	{r4, pc}
	...

000b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b41fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4200:	4605      	mov	r5, r0
   b4202:	460f      	mov	r7, r1
   b4204:	4616      	mov	r6, r2
        if (valid_) {
   b4206:	b18b      	cbz	r3, b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4208:	6803      	ldr	r3, [r0, #0]
   b420a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b420c:	b183      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b420e:	889a      	ldrh	r2, [r3, #4]
   b4210:	2a01      	cmp	r2, #1
   b4212:	d006      	beq.n	b4222 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b4214:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b4216:	e7f9      	b.n	b420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4218:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b421a:	b14b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b421c:	889a      	ldrh	r2, [r3, #4]
   b421e:	2a01      	cmp	r2, #1
   b4220:	d1fa      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b4222:	b12b      	cbz	r3, b4230 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b4224:	899a      	ldrh	r2, [r3, #12]
   b4226:	42ba      	cmp	r2, r7
   b4228:	d1f6      	bne.n	b4218 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b422a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b422c:	4628      	mov	r0, r5
   b422e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4230:	490a      	ldr	r1, [pc, #40]	; (b425c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b4232:	2010      	movs	r0, #16
   b4234:	f007 fae0 	bl	bb7f8 <_ZnwjRKSt9nothrow_t>
   b4238:	4604      	mov	r4, r0
   b423a:	b168      	cbz	r0, b4258 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b423c:	2210      	movs	r2, #16
   b423e:	2100      	movs	r1, #0
   b4240:	f009 f8e6 	bl	bd410 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b4244:	4b06      	ldr	r3, [pc, #24]	; (b4260 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b4246:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4248:	2301      	movs	r3, #1
   b424a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b424c:	692b      	ldr	r3, [r5, #16]
   b424e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4250:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b4252:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4254:	612c      	str	r4, [r5, #16]
   b4256:	e7e9      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4258:	7528      	strb	r0, [r5, #20]
                return *this;
   b425a:	e7e7      	b.n	b422c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b425c:	000be96c 	.word	0x000be96c
   b4260:	00030010 	.word	0x00030010

000b4264 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4264:	b40e      	push	{r1, r2, r3}
   b4266:	b500      	push	{lr}
   b4268:	b08c      	sub	sp, #48	; 0x30
   b426a:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b426c:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4270:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4274:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4276:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b427a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b427c:	6801      	ldr	r1, [r0, #0]
   b427e:	aa04      	add	r2, sp, #16
   b4280:	201e      	movs	r0, #30
    attr.flags = 0;
   b4282:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4286:	f004 faf7 	bl	b8878 <log_message_v>
}
   b428a:	b00c      	add	sp, #48	; 0x30
   b428c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4290:	b003      	add	sp, #12
   b4292:	4770      	bx	lr

000b4294 <_Z22publishStateTransitionv>:
{
   b4294:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4296:	4e13      	ldr	r6, [pc, #76]	; (b42e4 <_Z22publishStateTransitionv+0x50>)
   b4298:	4c13      	ldr	r4, [pc, #76]	; (b42e8 <_Z22publishStateTransitionv+0x54>)
   b429a:	7832      	ldrb	r2, [r6, #0]
   b429c:	4d13      	ldr	r5, [pc, #76]	; (b42ec <_Z22publishStateTransitionv+0x58>)
   b429e:	2a02      	cmp	r2, #2
{
   b42a0:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b42a2:	d117      	bne.n	b42d4 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b42a4:	f006 ff8e 	bl	bb1c4 <_ZN9TimeClass7isValidEv>
   b42a8:	7832      	ldrb	r2, [r6, #0]
   b42aa:	782b      	ldrb	r3, [r5, #0]
   b42ac:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42b0:	9200      	str	r2, [sp, #0]
   b42b2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42b6:	b998      	cbnz	r0, b42e0 <_Z22publishStateTransitionv+0x4c>
   b42b8:	4a0d      	ldr	r2, [pc, #52]	; (b42f0 <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   b42be:	a802      	add	r0, sp, #8
   b42c0:	f004 fc16 	bl	b8af0 <snprintf>
	oldState = state;
   b42c4:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b42c6:	480b      	ldr	r0, [pc, #44]	; (b42f4 <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b42c8:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b42ca:	a902      	add	r1, sp, #8
   b42cc:	f7ff ffca 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
}
   b42d0:	b042      	add	sp, #264	; 0x108
   b42d2:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b42d4:	782b      	ldrb	r3, [r5, #0]
   b42d6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b42da:	9200      	str	r2, [sp, #0]
   b42dc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b42e0:	4a05      	ldr	r2, [pc, #20]	; (b42f8 <_Z22publishStateTransitionv+0x64>)
   b42e2:	e7ea      	b.n	b42ba <_Z22publishStateTransitionv+0x26>
   b42e4:	2003dfce 	.word	0x2003dfce
   b42e8:	2003dd80 	.word	0x2003dd80
   b42ec:	2003dfcc 	.word	0x2003dfcc
   b42f0:	000bd7dd 	.word	0x000bd7dd
   b42f4:	2003e658 	.word	0x2003e658
   b42f8:	000bd7fd 	.word	0x000bd7fd
   b42fc:	00000000 	.word	0x00000000

000b4300 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {												// Time till next scheduled event
   b4300:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	// First we will calculate the adjustment to the wakeboundary due to node number and retries
	if (retryState) {														// We will use an exponential back-off for 3 retries
   b4304:	4d30      	ldr	r5, [pc, #192]	; (b43c8 <_Z21secondsUntilNextEventv+0xc8>)
   b4306:	682b      	ldr	r3, [r5, #0]
   b4308:	b373      	cbz	r3, b4368 <_Z21secondsUntilNextEventv+0x68>
		int fiftyFifty = random(2);											// Flip a coin - seed in Setup()
   b430a:	2002      	movs	r0, #2
   b430c:	f006 fb86 	bl	baa1c <_Z6randomi>
   b4310:	4606      	mov	r6, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4312:	6828      	ldr	r0, [r5, #0]
   b4314:	f008 fc50 	bl	bcbb8 <__aeabi_i2d>
   b4318:	ed9f 0b29 	vldr	d0, [pc, #164]	; b43c0 <_Z21secondsUntilNextEventv+0xc0>
   b431c:	ec41 0b11 	vmov	d1, r0, r1
   b4320:	f007 fa72 	bl	bb808 <pow>
		unsigned long offset = NODENUMBEROFFSET * fiftyFifty * pow(2, retryState); // This is an exponential back-off
   b4324:	200a      	movs	r0, #10
   b4326:	ec59 8b10 	vmov	r8, r9, d0
   b432a:	4370      	muls	r0, r6
   b432c:	f008 fc34 	bl	bcb98 <__aeabi_ui2d>
   b4330:	4642      	mov	r2, r8
   b4332:	464b      	mov	r3, r9
   b4334:	f008 fcaa 	bl	bcc8c <__aeabi_dmul>
   b4338:	f008 ff80 	bl	bd23c <__aeabi_d2uiz>
   b433c:	4604      	mov	r4, r0
		Log.info("Node %d retry state %d dice of %d retry in %lu seconds", sysStatus.get_nodeNumber(), retryState, fiftyFifty, offset);
   b433e:	f001 f987 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4342:	f001 fa72 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4346:	e9cd 6400 	strd	r6, r4, [sp]
   b434a:	4602      	mov	r2, r0
   b434c:	682b      	ldr	r3, [r5, #0]
   b434e:	491f      	ldr	r1, [pc, #124]	; (b43cc <_Z21secondsUntilNextEventv+0xcc>)
   b4350:	481f      	ldr	r0, [pc, #124]	; (b43d0 <_Z21secondsUntilNextEventv+0xd0>)
   b4352:	f7ff ff87 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		if (retryState >= 3) retryState = 0;							    // Going to stop re-trying and wait until the next period
   b4356:	682b      	ldr	r3, [r5, #0]
   b4358:	2b02      	cmp	r3, #2
   b435a:	dd01      	ble.n	b4360 <_Z21secondsUntilNextEventv+0x60>
   b435c:	2300      	movs	r3, #0
   b435e:	602b      	str	r3, [r5, #0]
		unsigned long secondsToReturn = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
		if (sysStatus.get_nodeNumber() < 11)  {								// We need to test here as the off-set can cause missed reporting if awoken by the sensor at the period boundary
			if (secondsToReturn <= nodeSpecificOffset) secondsToReturn = nodeSpecificOffset - (nodeSpecificOffset - secondsToReturn);
			else secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
		}							
		return secondsToReturn;
   b4360:	4620      	mov	r0, r4
    }
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b4362:	b002      	add	sp, #8
   b4364:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	else if (Time.isValid()) {												// The general case - has to handle node-number specific timing
   b4368:	f006 ff2c 	bl	bb1c4 <_ZN9TimeClass7isValidEv>
   b436c:	b320      	cbz	r0, b43b8 <_Z21secondsUntilNextEventv+0xb8>
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b436e:	f001 f96f 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4372:	f001 fa5a 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4376:	4605      	mov	r5, r0
		unsigned long wakeBoundary = (sysStatus.get_frequencyMinutes() * 60UL);
   b4378:	f001 f96a 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b437c:	f001 faee 	bl	b595c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4380:	243c      	movs	r4, #60	; 0x3c
   b4382:	fb04 f600 	mul.w	r6, r4, r0
		unsigned long secondsToReturn = constrain(wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // If Time is valid, we can compute time to the start of the next report window	
   b4386:	f006 ff3a 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b438a:	fbb0 f4f6 	udiv	r4, r0, r6
   b438e:	fb04 0316 	mls	r3, r4, r6, r0
   b4392:	1af4      	subs	r4, r6, r3
   b4394:	42b4      	cmp	r4, r6
   b4396:	bf28      	it	cs
   b4398:	4634      	movcs	r4, r6
		if (sysStatus.get_nodeNumber() < 11)  {								// We need to test here as the off-set can cause missed reporting if awoken by the sensor at the period boundary
   b439a:	f001 f959 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b439e:	f001 fa44 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b43a2:	280a      	cmp	r0, #10
   b43a4:	d8dc      	bhi.n	b4360 <_Z21secondsUntilNextEventv+0x60>
		unsigned long nodeSpecificOffset = NODENUMBEROFFSET * sysStatus.get_nodeNumber(); // Each node has an offset to avoid collisions
   b43a6:	b228      	sxth	r0, r5
   b43a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   b43ac:	0043      	lsls	r3, r0, #1
			if (secondsToReturn <= nodeSpecificOffset) secondsToReturn = nodeSpecificOffset - (nodeSpecificOffset - secondsToReturn);
   b43ae:	ebb4 0f40 	cmp.w	r4, r0, lsl #1
			else secondsToReturn += nodeSpecificOffset;							// Off-set for configured nodes only
   b43b2:	bf88      	it	hi
   b43b4:	18e4      	addhi	r4, r4, r3
   b43b6:	e7d3      	b.n	b4360 <_Z21secondsUntilNextEventv+0x60>
	else return 60UL;	// If time is not valid, we need to keep trying to catch the Gateway when it next wakes up.
   b43b8:	203c      	movs	r0, #60	; 0x3c
   b43ba:	e7d2      	b.n	b4362 <_Z21secondsUntilNextEventv+0x62>
   b43bc:	f3af 8000 	nop.w
   b43c0:	00000000 	.word	0x00000000
   b43c4:	40000000 	.word	0x40000000
   b43c8:	2003df5c 	.word	0x2003df5c
   b43cc:	000bd80b 	.word	0x000bd80b
   b43d0:	2003e658 	.word	0x2003e658

000b43d4 <loop>:
void loop() {
   b43d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (state) {
   b43d8:	4ca7      	ldr	r4, [pc, #668]	; (b4678 <loop+0x2a4>)
   b43da:	7823      	ldrb	r3, [r4, #0]
   b43dc:	3b01      	subs	r3, #1
void loop() {
   b43de:	b08d      	sub	sp, #52	; 0x34
   b43e0:	2b04      	cmp	r3, #4
   b43e2:	f200 80de 	bhi.w	b45a2 <loop+0x1ce>
   b43e6:	e8df f013 	tbh	[pc, r3, lsl #1]
   b43ea:	01f4      	.short	0x01f4
   b43ec:	00270005 	.word	0x00270005
   b43f0:	01890125 	.word	0x01890125
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b43f4:	4ba1      	ldr	r3, [pc, #644]	; (b467c <loop+0x2a8>)
   b43f6:	781b      	ldrb	r3, [r3, #0]
   b43f8:	2b02      	cmp	r3, #2
   b43fa:	d001      	beq.n	b4400 <loop+0x2c>
   b43fc:	f7ff ff4a 	bl	b4294 <_Z22publishStateTransitionv>
  			if (Time.isValid() && Time.day() != Time.day(current.get_lastCountTime())) current.resetEverything();           // Check to see if the device was last on in a different day
   b4400:	f006 fee0 	bl	bb1c4 <_ZN9TimeClass7isValidEv>
   b4404:	b170      	cbz	r0, b4424 <loop+0x50>
   b4406:	f006 ff17 	bl	bb238 <_ZN9TimeClass3dayEv>
   b440a:	4605      	mov	r5, r0
   b440c:	f001 f994 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4410:	f001 fb05 	bl	b5a1e <_ZNK17currentStatusData17get_lastCountTimeEv>
   b4414:	f006 fdd2 	bl	bafbc <_ZN9TimeClass3dayEx>
   b4418:	4285      	cmp	r5, r0
   b441a:	d003      	beq.n	b4424 <loop+0x50>
   b441c:	f001 f98c 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4420:	f001 fb9a 	bl	b5b58 <_ZN17currentStatusData15resetEverythingEv>
			if (sysStatus.get_alertCodeNode() != 0) state = ERROR_STATE;
   b4424:	f001 f914 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4428:	f001 fa09 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b442c:	2800      	cmp	r0, #0
   b442e:	f000 81ea 	beq.w	b4806 <loop+0x432>
   b4432:	2301      	movs	r3, #1
				state = IDLE_STATE;
   b4434:	7023      	strb	r3, [r4, #0]
			break;
   b4436:	e0b4      	b.n	b45a2 <loop+0x1ce>
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4438:	4b90      	ldr	r3, [pc, #576]	; (b467c <loop+0x2a8>)
   b443a:	781b      	ldrb	r3, [r3, #0]
   b443c:	2b03      	cmp	r3, #3
   b443e:	d001      	beq.n	b4444 <loop+0x70>
   b4440:	f7ff ff28 	bl	b4294 <_Z22publishStateTransitionv>
			int wakeInSeconds = secondsUntilNextEvent();					// Figure out how long to sleep 
   b4444:	f7ff ff5c 	bl	b4300 <_Z21secondsUntilNextEventv>
   b4448:	4606      	mov	r6, r0
			time_t time = Time.now() + wakeInSeconds;
   b444a:	f006 fed8 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b444e:	4605      	mov	r5, r0
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():" ", (sysStatus.get_openHours()) ? "on" : "off");
   b4450:	f006 feb8 	bl	bb1c4 <_ZN9TimeClass7isValidEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b4454:	4607      	mov	r7, r0
   b4456:	b1f8      	cbz	r0, b4498 <loop+0xc4>
			time_t time = Time.now() + wakeInSeconds;
   b4458:	19aa      	adds	r2, r5, r6
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():" ", (sysStatus.get_openHours()) ? "on" : "off");
   b445a:	4b89      	ldr	r3, [pc, #548]	; (b4680 <loop+0x2ac>)
   b445c:	9300      	str	r3, [sp, #0]
   b445e:	4989      	ldr	r1, [pc, #548]	; (b4684 <loop+0x2b0>)
   b4460:	17d3      	asrs	r3, r2, #31
   b4462:	a808      	add	r0, sp, #32
   b4464:	f006 fe6c 	bl	bb140 <_ZN9TimeClass6formatExPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4468:	9d08      	ldr	r5, [sp, #32]
   b446a:	f001 f8f1 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b446e:	f001 f913 	bl	b5698 <_ZNK13sysStatusData13get_openHoursEv>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b4472:	4b85      	ldr	r3, [pc, #532]	; (b4688 <loop+0x2b4>)
   b4474:	4a85      	ldr	r2, [pc, #532]	; (b468c <loop+0x2b8>)
   b4476:	4986      	ldr	r1, [pc, #536]	; (b4690 <loop+0x2bc>)
   b4478:	2800      	cmp	r0, #0
   b447a:	bf08      	it	eq
   b447c:	461a      	moveq	r2, r3
   b447e:	9200      	str	r2, [sp, #0]
   b4480:	4884      	ldr	r0, [pc, #528]	; (b4694 <loop+0x2c0>)
   b4482:	462b      	mov	r3, r5
   b4484:	4632      	mov	r2, r6
   b4486:	f7ff feed 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			wakeInSeconds, (Time.isValid()) ? Time.format(time, "%T").c_str():" ", (sysStatus.get_openHours()) ? "on" : "off");
   b448a:	b117      	cbz	r7, b4492 <loop+0xbe>
   b448c:	a808      	add	r0, sp, #32
   b448e:	f006 fba9 	bl	babe4 <_ZN6StringD1Ev>
			if (wakeInSeconds == 0) {										// While not likely, a zero result is possible
   b4492:	b91e      	cbnz	r6, b449c <loop+0xc8>
				state = IDLE_STATE;
   b4494:	2302      	movs	r3, #2
   b4496:	e7cd      	b.n	b4434 <loop+0x60>
			Log.info("Sleep for %i seconds until next event at %s with sensor %s", \
   b4498:	4d7f      	ldr	r5, [pc, #508]	; (b4698 <loop+0x2c4>)
   b449a:	e7e6      	b.n	b446a <loop+0x96>
			if (!sysStatus.get_openHours()) digitalWrite(MODULE_POWER_PIN,HIGH);  // disable (HIGH) the sensor
   b449c:	f001 f8d8 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b44a0:	f001 f8fa 	bl	b5698 <_ZNK13sysStatusData13get_openHoursEv>
   b44a4:	4b7d      	ldr	r3, [pc, #500]	; (b469c <loop+0x2c8>)
   b44a6:	f8b3 b000 	ldrh.w	fp, [r3]
   b44aa:	b918      	cbnz	r0, b44b4 <loop+0xe0>
   b44ac:	2101      	movs	r1, #1
   b44ae:	4658      	mov	r0, fp
   b44b0:	f007 f8a9 	bl	bb606 <digitalWrite>
        if (valid_) {
   b44b4:	4b7a      	ldr	r3, [pc, #488]	; (b46a0 <loop+0x2cc>)
   b44b6:	7d1a      	ldrb	r2, [r3, #20]
   b44b8:	b10a      	cbz	r2, b44be <loop+0xea>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b44ba:	2202      	movs	r2, #2
   b44bc:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b44be:	4b79      	ldr	r3, [pc, #484]	; (b46a4 <loop+0x2d0>)
   b44c0:	4877      	ldr	r0, [pc, #476]	; (b46a0 <loop+0x2cc>)
   b44c2:	f8b3 9000 	ldrh.w	r9, [r3]
   b44c6:	2200      	movs	r2, #0
   b44c8:	4649      	mov	r1, r9
   b44ca:	f7ff fe97 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b44ce:	4b76      	ldr	r3, [pc, #472]	; (b46a8 <loop+0x2d4>)
   b44d0:	f8b3 a000 	ldrh.w	sl, [r3]
   b44d4:	2201      	movs	r2, #1
   b44d6:	4651      	mov	r1, sl
   b44d8:	f7ff fe90 	bl	b41fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b44dc:	7d03      	ldrb	r3, [r0, #20]
   b44de:	4607      	mov	r7, r0
   b44e0:	b303      	cbz	r3, b4524 <loop+0x150>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b44e2:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b44e4:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b44e8:	68db      	ldr	r3, [r3, #12]
   b44ea:	fb08 f806 	mul.w	r8, r8, r6
        if (!start) {
   b44ee:	b12b      	cbz	r3, b44fc <loop+0x128>
            if (start->type == type) {
   b44f0:	889a      	ldrh	r2, [r3, #4]
   b44f2:	2a04      	cmp	r2, #4
   b44f4:	f000 81b3 	beq.w	b485e <loop+0x48a>
            start = start->next;
   b44f8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b44fa:	e7f8      	b.n	b44ee <loop+0x11a>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b44fc:	496b      	ldr	r1, [pc, #428]	; (b46ac <loop+0x2d8>)
   b44fe:	2010      	movs	r0, #16
   b4500:	f007 f97a 	bl	bb7f8 <_ZnwjRKSt9nothrow_t>
   b4504:	4605      	mov	r5, r0
   b4506:	2800      	cmp	r0, #0
   b4508:	f000 81a7 	beq.w	b485a <loop+0x486>
   b450c:	2210      	movs	r2, #16
   b450e:	2100      	movs	r1, #0
   b4510:	f008 ff7e 	bl	bd410 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4514:	4b66      	ldr	r3, [pc, #408]	; (b46b0 <loop+0x2dc>)
   b4516:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4518:	2304      	movs	r3, #4
   b451a:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b451c:	693b      	ldr	r3, [r7, #16]
            wakeupSource->ms = ms;
   b451e:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4522:	613d      	str	r5, [r7, #16]
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4524:	2100      	movs	r1, #0
   b4526:	4863      	ldr	r0, [pc, #396]	; (b46b4 <loop+0x2e0>)
   b4528:	f001 fee0 	bl	b62ec <_ZN6AB18056setWDTEi>
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b452c:	495c      	ldr	r1, [pc, #368]	; (b46a0 <loop+0x2cc>)
   b452e:	a805      	add	r0, sp, #20
   b4530:	f006 fc7c 	bl	bae2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return hal_timer_millis(nullptr);
   b4534:	2000      	movs	r0, #0
   b4536:	f003 ffcf 	bl	b84d8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b453a:	f242 7710 	movw	r7, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b453e:	4605      	mov	r5, r0
   b4540:	2000      	movs	r0, #0
   b4542:	f003 ffc9 	bl	b84d8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4546:	1b40      	subs	r0, r0, r5
   b4548:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b454c:	42b8      	cmp	r0, r7
   b454e:	f171 0300 	sbcs.w	r3, r1, #0
   b4552:	d207      	bcs.n	b4564 <loop+0x190>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4554:	f006 ff46 	bl	bb3e4 <_Z16_fetch_usbserialv>
   b4558:	f006 ff39 	bl	bb3ce <_ZN9USBSerial11isConnectedEv>
   b455c:	b910      	cbnz	r0, b4564 <loop+0x190>
            spark_process();
   b455e:	f004 fa17 	bl	b8990 <spark_process>
        while (_while() && !_condition()) {
   b4562:	e7ed      	b.n	b4540 <loop+0x16c>
   b4564:	f006 ff3e 	bl	bb3e4 <_Z16_fetch_usbserialv>
   b4568:	f006 ff31 	bl	bb3ce <_ZN9USBSerial11isConnectedEv>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b456c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4570:	4850      	ldr	r0, [pc, #320]	; (b46b4 <loop+0x2e0>)
   b4572:	f001 febb 	bl	b62ec <_ZN6AB18056setWDTEi>
			digitalWrite(MODULE_POWER_PIN,LOW);             				// Enable (LOW) the sensor
   b4576:	2100      	movs	r1, #0
   b4578:	4658      	mov	r0, fp
   b457a:	f007 f844 	bl	bb606 <digitalWrite>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b457e:	9b05      	ldr	r3, [sp, #20]
        if (wakeupSource_) {
   b4580:	b363      	cbz	r3, b45dc <loop+0x208>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b4582:	889a      	ldrh	r2, [r3, #4]
   b4584:	2a01      	cmp	r2, #1
   b4586:	d129      	bne.n	b45dc <loop+0x208>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b4588:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b458a:	4599      	cmp	r9, r3
   b458c:	d129      	bne.n	b45e2 <loop+0x20e>
				Log.info("Woke with user button - LoRA State");
   b458e:	494a      	ldr	r1, [pc, #296]	; (b46b8 <loop+0x2e4>)
   b4590:	4840      	ldr	r0, [pc, #256]	; (b4694 <loop+0x2c0>)
   b4592:	f7ff fe67 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_TRANSMISSION_STATE;
   b4596:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b4598:	9805      	ldr	r0, [sp, #20]
				state = IDLE_STATE;
   b459a:	7023      	strb	r3, [r4, #0]
   b459c:	b108      	cbz	r0, b45a2 <loop+0x1ce>
            free(wakeupSource_);
   b459e:	f004 fa8f 	bl	b8ac0 <free>
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b45a2:	4844      	ldr	r0, [pc, #272]	; (b46b4 <loop+0x2e0>)
	if (sensorDetect) {														// Count the pulse and reset for next
   b45a4:	4c45      	ldr	r4, [pc, #276]	; (b46bc <loop+0x2e8>)
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b45a6:	f002 fa4d 	bl	b6a44 <_ZN6AB18054loopEv>
	current.loop();
   b45aa:	f001 f8c5 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b45ae:	f001 f8de 	bl	b576e <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b45b2:	f001 f84d 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b45b6:	f001 f866 	bl	b5686 <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {														// Count the pulse and reset for next
   b45ba:	7823      	ldrb	r3, [r4, #0]
   b45bc:	b123      	cbz	r3, b45c8 <loop+0x1f4>
		if (recordCount()) sensorDetect = false;
   b45be:	f001 fc1f 	bl	b5e00 <_Z11recordCountv>
   b45c2:	b108      	cbz	r0, b45c8 <loop+0x1f4>
   b45c4:	2300      	movs	r3, #0
   b45c6:	7023      	strb	r3, [r4, #0]
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b45c8:	4b3d      	ldr	r3, [pc, #244]	; (b46c0 <loop+0x2ec>)
   b45ca:	681b      	ldr	r3, [r3, #0]
   b45cc:	2b00      	cmp	r3, #0
   b45ce:	f2c0 8149 	blt.w	b4864 <loop+0x490>
}
   b45d2:	b00d      	add	sp, #52	; 0x34
   b45d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		System.reset();
   b45d8:	f006 bc25 	b.w	bae26 <_ZN11SystemClass5resetEv>
            return std::numeric_limits<pin_t>::max();
   b45dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b45e0:	e7d3      	b.n	b458a <loop+0x1b6>
			else if (result.wakeupPin() == INT_PIN) {
   b45e2:	459a      	cmp	sl, r3
   b45e4:	d111      	bne.n	b460a <loop+0x236>
				Log.info("Woke with sensor interrupt - Record count then sleep");
   b45e6:	4937      	ldr	r1, [pc, #220]	; (b46c4 <loop+0x2f0>)
   b45e8:	482a      	ldr	r0, [pc, #168]	; (b4694 <loop+0x2c0>)
   b45ea:	f7ff fe3b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
				if (recordCount()) sensorDetect = false;					// Record count and reset flag
   b45ee:	f001 fc07 	bl	b5e00 <_Z11recordCountv>
   b45f2:	b110      	cbz	r0, b45fa <loop+0x226>
   b45f4:	4b31      	ldr	r3, [pc, #196]	; (b46bc <loop+0x2e8>)
   b45f6:	2200      	movs	r2, #0
   b45f8:	701a      	strb	r2, [r3, #0]
				if (secondsUntilNextEvent() < 10) state=IDLE_STATE;
   b45fa:	f7ff fe81 	bl	b4300 <_Z21secondsUntilNextEventv>
   b45fe:	2809      	cmp	r0, #9
   b4600:	dc01      	bgt.n	b4606 <loop+0x232>
				state = IDLE_STATE;
   b4602:	2302      	movs	r3, #2
   b4604:	e7c8      	b.n	b4598 <loop+0x1c4>
				else state = SLEEPING_STATE;
   b4606:	2303      	movs	r3, #3
   b4608:	e7c6      	b.n	b4598 <loop+0x1c4>
				Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b460a:	f006 fdf8 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b460e:	1982      	adds	r2, r0, r6
   b4610:	17d3      	asrs	r3, r2, #31
   b4612:	a808      	add	r0, sp, #32
   b4614:	f006 fcee 	bl	baff4 <_ZN9TimeClass7timeStrEx>
   b4618:	9a08      	ldr	r2, [sp, #32]
   b461a:	9203      	str	r2, [sp, #12]
   b461c:	f006 fc66 	bl	baeec <_ZN11SystemClass10freeMemoryEv>
   b4620:	9a03      	ldr	r2, [sp, #12]
   b4622:	4929      	ldr	r1, [pc, #164]	; (b46c8 <loop+0x2f4>)
   b4624:	4603      	mov	r3, r0
   b4626:	481b      	ldr	r0, [pc, #108]	; (b4694 <loop+0x2c0>)
   b4628:	f7ff fe1c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b462c:	a808      	add	r0, sp, #32
   b462e:	f006 fad9 	bl	babe4 <_ZN6StringD1Ev>
   b4632:	e7e6      	b.n	b4602 <loop+0x22e>
			if (state != oldState) {
   b4634:	4b11      	ldr	r3, [pc, #68]	; (b467c <loop+0x2a8>)
   b4636:	781b      	ldrb	r3, [r3, #0]
   b4638:	2b04      	cmp	r3, #4
   b463a:	d0b2      	beq.n	b45a2 <loop+0x1ce>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b463c:	f7ff fe2a 	bl	b4294 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();
   b4640:	f000 fba2 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b4644:	f000 fc28 	bl	b4e98 <_ZN14LoRA_Functions11clearBufferEv>
				takeMeasurements();
   b4648:	f001 fcea 	bl	b6020 <_Z16takeMeasurementsv>
				if (sysStatus.get_alertCodeNode() == 0) result = LoRA_Functions::instance().composeDataReportNode();
   b464c:	f001 f800 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4650:	f001 f8f5 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4654:	2800      	cmp	r0, #0
   b4656:	d13d      	bne.n	b46d4 <loop+0x300>
   b4658:	f000 fb96 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b465c:	f000 fc32 	bl	b4ec4 <_ZN14LoRA_Functions21composeDataReportNodeEv>
				if (!result) {
   b4660:	4d1a      	ldr	r5, [pc, #104]	; (b46cc <loop+0x2f8>)
   b4662:	2800      	cmp	r0, #0
   b4664:	d146      	bne.n	b46f4 <loop+0x320>
					Log.info("Failed in data send attempting retry");
   b4666:	491a      	ldr	r1, [pc, #104]	; (b46d0 <loop+0x2fc>)
   b4668:	480a      	ldr	r0, [pc, #40]	; (b4694 <loop+0x2c0>)
   b466a:	f7ff fdfb 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					retryState++;
   b466e:	682b      	ldr	r3, [r5, #0]
   b4670:	3301      	adds	r3, #1
   b4672:	602b      	str	r3, [r5, #0]
						state = SLEEPING_STATE;
   b4674:	2303      	movs	r3, #3
   b4676:	e6dd      	b.n	b4434 <loop+0x60>
   b4678:	2003dfce 	.word	0x2003dfce
   b467c:	2003dfcc 	.word	0x2003dfcc
   b4680:	000bd849 	.word	0x000bd849
   b4684:	2003e6ac 	.word	0x2003e6ac
   b4688:	000bd845 	.word	0x000bd845
   b468c:	000bd842 	.word	0x000bd842
   b4690:	000bd84c 	.word	0x000bd84c
   b4694:	2003e658 	.word	0x2003e658
   b4698:	000be086 	.word	0x000be086
   b469c:	000bdfae 	.word	0x000bdfae
   b46a0:	2003df90 	.word	0x2003df90
   b46a4:	000bdfaa 	.word	0x000bdfaa
   b46a8:	000bdfac 	.word	0x000bdfac
   b46ac:	000be96c 	.word	0x000be96c
   b46b0:	00030010 	.word	0x00030010
   b46b4:	2003df70 	.word	0x2003df70
   b46b8:	000bd887 	.word	0x000bd887
   b46bc:	2003dfcd 	.word	0x2003dfcd
   b46c0:	2003dd7c 	.word	0x2003dd7c
   b46c4:	000bd8aa 	.word	0x000bd8aa
   b46c8:	000bd8df 	.word	0x000bd8df
   b46cc:	2003df5c 	.word	0x2003df5c
   b46d0:	000bd900 	.word	0x000bd900
				else if (sysStatus.get_alertCodeNode() == 1) result = LoRA_Functions::instance().composeJoinRequesttNode();
   b46d4:	f000 ffbc 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b46d8:	f001 f8b1 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b46dc:	2801      	cmp	r0, #1
   b46de:	d104      	bne.n	b46ea <loop+0x316>
   b46e0:	f000 fb52 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b46e4:	f000 fd68 	bl	b51b8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b46e8:	e7ba      	b.n	b4660 <loop+0x28c>
				else result = LoRA_Functions::instance().composeAlertReportNode();
   b46ea:	f000 fb4d 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b46ee:	f000 fe09 	bl	b5304 <_ZN14LoRA_Functions22composeAlertReportNodeEv>
   b46f2:	e7b5      	b.n	b4660 <loop+0x28c>
					retryState = 0;
   b46f4:	2300      	movs	r3, #0
   b46f6:	602b      	str	r3, [r5, #0]
					state = LoRA_LISTENING_STATE;
   b46f8:	2305      	movs	r3, #5
   b46fa:	e69b      	b.n	b4434 <loop+0x60>
			if (state != oldState) {
   b46fc:	4b5b      	ldr	r3, [pc, #364]	; (b486c <loop+0x498>)
   b46fe:	4d5c      	ldr	r5, [pc, #368]	; (b4870 <loop+0x49c>)
   b4700:	781b      	ldrb	r3, [r3, #0]
   b4702:	2b05      	cmp	r3, #5
   b4704:	d004      	beq.n	b4710 <loop+0x33c>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4706:	f7ff fdc5 	bl	b4294 <_Z22publishStateTransitionv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b470a:	f003 fed5 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
				startListening = millis();
   b470e:	6028      	str	r0, [r5, #0]
			while (millis() - startListening < 5000) {
   b4710:	f241 3687 	movw	r6, #4999	; 0x1387
   b4714:	f003 fed0 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
   b4718:	682b      	ldr	r3, [r5, #0]
   b471a:	1ac0      	subs	r0, r0, r3
   b471c:	42b0      	cmp	r0, r6
   b471e:	f63f af40 	bhi.w	b45a2 <loop+0x1ce>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {// Listen for acknowledgement
   b4722:	f000 fb31 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b4726:	f000 fe4b 	bl	b53c0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b472a:	2800      	cmp	r0, #0
   b472c:	d0f2      	beq.n	b4714 <loop+0x340>
					sysStatus.set_lastConnection(Time.now());
   b472e:	f000 ff8f 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4732:	4605      	mov	r5, r0
   b4734:	f006 fd63 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b4738:	4602      	mov	r2, r0
   b473a:	17c3      	asrs	r3, r0, #31
   b473c:	4628      	mov	r0, r5
   b473e:	f001 f997 	bl	b5a70 <_ZN13sysStatusData18set_lastConnectionEx>
					randomSeed(sysStatus.get_lastConnection());				// Done so we can genrate rando numbers later
   b4742:	f000 ff85 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4746:	f001 f965 	bl	b5a14 <_ZNK13sysStatusData18get_lastConnectionEv>
   b474a:	f006 f97c 	bl	baa46 <_Z10randomSeedj>
					ab1805.setRtcFromTime(Time.now());
   b474e:	f006 fd56 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b4752:	2301      	movs	r3, #1
   b4754:	4602      	mov	r2, r0
   b4756:	9300      	str	r3, [sp, #0]
   b4758:	17c3      	asrs	r3, r0, #31
   b475a:	4846      	ldr	r0, [pc, #280]	; (b4874 <loop+0x4a0>)
   b475c:	f002 f962 	bl	b6a24 <_ZN6AB180514setRtcFromTimeExb>
					if (sysStatus.get_alertCodeNode() > 0) {				// If we are reporting an alert we will also report data
   b4760:	f000 ff76 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4764:	f001 f86b 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4768:	b178      	cbz	r0, b478a <loop+0x3b6>
						sysStatus.set_alertTimestampNode(Time.now());
   b476a:	f000 ff71 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b476e:	4605      	mov	r5, r0
   b4770:	f006 fd45 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b4774:	4602      	mov	r2, r0
   b4776:	17c3      	asrs	r3, r0, #31
   b4778:	4628      	mov	r0, r5
   b477a:	f001 f97e 	bl	b5a7a <_ZN13sysStatusData22set_alertTimestampNodeEx>
				sysStatus.set_alertCodeNode(0);
   b477e:	f000 ff67 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4782:	2100      	movs	r1, #0
   b4784:	f001 f8af 	bl	b58e6 <_ZN13sysStatusData17set_alertCodeNodeEh>
   b4788:	e684      	b.n	b4494 <loop+0xc0>
						static int lastReportingHour = Time.hour();
   b478a:	4e3b      	ldr	r6, [pc, #236]	; (b4878 <loop+0x4a4>)
   b478c:	4d3b      	ldr	r5, [pc, #236]	; (b487c <loop+0x4a8>)
   b478e:	7833      	ldrb	r3, [r6, #0]
   b4790:	f3bf 8f5b 	dmb	ish
   b4794:	f013 0f01 	tst.w	r3, #1
   b4798:	d109      	bne.n	b47ae <loop+0x3da>
   b479a:	4630      	mov	r0, r6
   b479c:	f7ff fc8e 	bl	b40bc <__cxa_guard_acquire>
   b47a0:	b128      	cbz	r0, b47ae <loop+0x3da>
   b47a2:	f006 fd3d 	bl	bb220 <_ZN9TimeClass4hourEv>
   b47a6:	6028      	str	r0, [r5, #0]
   b47a8:	4630      	mov	r0, r6
   b47aa:	f7ff fc8c 	bl	b40c6 <__cxa_guard_release>
						if (Time.hour() != lastReportingHour) {
   b47ae:	f006 fd37 	bl	bb220 <_ZN9TimeClass4hourEv>
   b47b2:	682b      	ldr	r3, [r5, #0]
   b47b4:	4298      	cmp	r0, r3
   b47b6:	d007      	beq.n	b47c8 <loop+0x3f4>
							current.set_hourlyCount(0);					    // Zero the hourly count
   b47b8:	f000 ffbe 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b47bc:	2100      	movs	r1, #0
   b47be:	f001 f906 	bl	b59ce <_ZN17currentStatusData15set_hourlyCountEt>
							lastReportingHour = Time.hour();
   b47c2:	f006 fd2d 	bl	bb220 <_ZN9TimeClass4hourEv>
   b47c6:	6028      	str	r0, [r5, #0]
						LoRA_Functions::instance().sleepLoRaRadio();		// Done with LoRA - put radio to sleep
   b47c8:	f000 fade 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b47cc:	f000 fb74 	bl	b4eb8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
   b47d0:	e750      	b.n	b4674 <loop+0x2a0>
			if (state != oldState) publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b47d2:	4b26      	ldr	r3, [pc, #152]	; (b486c <loop+0x498>)
   b47d4:	781b      	ldrb	r3, [r3, #0]
   b47d6:	2b01      	cmp	r3, #1
   b47d8:	d001      	beq.n	b47de <loop+0x40a>
   b47da:	f7ff fd5b 	bl	b4294 <_Z22publishStateTransitionv>
			switch (sysStatus.get_alertCodeNode())
   b47de:	f000 ff37 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b47e2:	f001 f82c 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b47e6:	2803      	cmp	r0, #3
   b47e8:	d00f      	beq.n	b480a <loop+0x436>
   b47ea:	d808      	bhi.n	b47fe <loop+0x42a>
   b47ec:	3801      	subs	r0, #1
   b47ee:	b2c0      	uxtb	r0, r0
   b47f0:	2801      	cmp	r0, #1
   b47f2:	d908      	bls.n	b4806 <loop+0x432>
				Log.info("Undefined Error State");
   b47f4:	4922      	ldr	r1, [pc, #136]	; (b4880 <loop+0x4ac>)
   b47f6:	4823      	ldr	r0, [pc, #140]	; (b4884 <loop+0x4b0>)
   b47f8:	f7ff fd34 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b47fc:	e7bf      	b.n	b477e <loop+0x3aa>
   b47fe:	2804      	cmp	r0, #4
   b4800:	f43f aecf 	beq.w	b45a2 <loop+0x1ce>
   b4804:	e7f6      	b.n	b47f4 <loop+0x420>
				state = LoRA_TRANSMISSION_STATE;
   b4806:	2304      	movs	r3, #4
   b4808:	e614      	b.n	b4434 <loop+0x60>
				static system_tick_t enteredState = millis();
   b480a:	4c1f      	ldr	r4, [pc, #124]	; (b4888 <loop+0x4b4>)
   b480c:	4d1f      	ldr	r5, [pc, #124]	; (b488c <loop+0x4b8>)
   b480e:	7823      	ldrb	r3, [r4, #0]
   b4810:	f3bf 8f5b 	dmb	ish
   b4814:	f013 0f01 	tst.w	r3, #1
   b4818:	d109      	bne.n	b482e <loop+0x45a>
   b481a:	4620      	mov	r0, r4
   b481c:	f7ff fc4e 	bl	b40bc <__cxa_guard_acquire>
   b4820:	b128      	cbz	r0, b482e <loop+0x45a>
   b4822:	f003 fe49 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
   b4826:	6028      	str	r0, [r5, #0]
   b4828:	4620      	mov	r0, r4
   b482a:	f7ff fc4c 	bl	b40c6 <__cxa_guard_release>
   b482e:	f003 fe43 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b4832:	682b      	ldr	r3, [r5, #0]
   b4834:	1ac0      	subs	r0, r0, r3
   b4836:	f247 5330 	movw	r3, #30000	; 0x7530
   b483a:	4298      	cmp	r0, r3
   b483c:	f67f aeb1 	bls.w	b45a2 <loop+0x1ce>
					Log.info("Resetting device");
   b4840:	4913      	ldr	r1, [pc, #76]	; (b4890 <loop+0x4bc>)
   b4842:	4810      	ldr	r0, [pc, #64]	; (b4884 <loop+0x4b0>)
   b4844:	f7ff fd0e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
					delay(2000);
   b4848:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b484c:	f004 f9a0 	bl	b8b90 <delay>
					ab1805.deepPowerDown();
   b4850:	211e      	movs	r1, #30
   b4852:	4808      	ldr	r0, [pc, #32]	; (b4874 <loop+0x4a0>)
   b4854:	f001 fea4 	bl	b65a0 <_ZN6AB180513deepPowerDownEi>
   b4858:	e6a3      	b.n	b45a2 <loop+0x1ce>
                valid_ = false;
   b485a:	7538      	strb	r0, [r7, #20]
                return *this;
   b485c:	e662      	b.n	b4524 <loop+0x150>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b485e:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4862:	e65f      	b.n	b4524 <loop+0x150>
}
   b4864:	b00d      	add	sp, #52	; 0x34
   b4866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b486a:	bf00      	nop
   b486c:	2003dfcc 	.word	0x2003dfcc
   b4870:	2003df64 	.word	0x2003df64
   b4874:	2003df70 	.word	0x2003df70
   b4878:	2003df58 	.word	0x2003df58
   b487c:	2003df68 	.word	0x2003df68
   b4880:	000bd936 	.word	0x000bd936
   b4884:	2003e658 	.word	0x2003e658
   b4888:	2003df54 	.word	0x2003df54
   b488c:	2003df60 	.word	0x2003df60
   b4890:	000bd925 	.word	0x000bd925

000b4894 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4894:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4896:	2300      	movs	r3, #0
   b4898:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b489a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b489c:	4604      	mov	r4, r0
   b489e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b48a0:	b12b      	cbz	r3, b48ae <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b48a2:	2202      	movs	r2, #2
   b48a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b48a6:	68eb      	ldr	r3, [r5, #12]
   b48a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b48aa:	68ab      	ldr	r3, [r5, #8]
   b48ac:	60a3      	str	r3, [r4, #8]
    }
   b48ae:	4620      	mov	r0, r4
   b48b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b48b4 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b48b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b48b8:	b095      	sub	sp, #84	; 0x54
   b48ba:	4605      	mov	r5, r0
        };
   b48bc:	991c      	ldr	r1, [sp, #112]	; 0x70
   b48be:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b48c0:	4690      	mov	r8, r2
   b48c2:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b48c4:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b48c6:	f7ff ffe5 	bl	b4894 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b48ca:	a904      	add	r1, sp, #16
   b48cc:	a808      	add	r0, sp, #32
   b48ce:	f7ff ffe1 	bl	b4894 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b48d2:	a908      	add	r1, sp, #32
   b48d4:	4630      	mov	r0, r6
   b48d6:	f7ff ffdd 	bl	b4894 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b48da:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b48de:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b48e0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b48e4:	f7ff fbd7 	bl	b4096 <_Znwj>
   b48e8:	4604      	mov	r4, r0
   b48ea:	b1a0      	cbz	r0, b4916 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b48ec:	e896 0003 	ldmia.w	r6, {r0, r1}
   b48f0:	ab01      	add	r3, sp, #4
   b48f2:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b48f6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b48fa:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b48fe:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b4904:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4906:	60a3      	str	r3, [r4, #8]
   b4908:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b490c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b490e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b4912:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b4914:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b4916:	4b24      	ldr	r3, [pc, #144]	; (b49a8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b4918:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b491a:	4b24      	ldr	r3, [pc, #144]	; (b49ac <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b491c:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b491e:	2200      	movs	r2, #0
   b4920:	2300      	movs	r3, #0
   b4922:	f04f 0900 	mov.w	r9, #0
   b4926:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b492a:	4b21      	ldr	r3, [pc, #132]	; (b49b0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b492c:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4930:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4932:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4934:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b4938:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b493c:	f7ff fbab 	bl	b4096 <_Znwj>
   b4940:	4604      	mov	r4, r0
   b4942:	b1d8      	cbz	r0, b497c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4944:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b4946:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b494a:	b133      	cbz	r3, b495a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b494c:	2202      	movs	r2, #2
   b494e:	a910      	add	r1, sp, #64	; 0x40
   b4950:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4952:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4954:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4956:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b4958:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b495a:	4b16      	ldr	r3, [pc, #88]	; (b49b4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b495c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b495e:	4a16      	ldr	r2, [pc, #88]	; (b49b8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4960:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4962:	ab01      	add	r3, sp, #4
   b4964:	4640      	mov	r0, r8
   b4966:	4639      	mov	r1, r7
   b4968:	f003 ffc0 	bl	b88ec <system_subscribe_event>
        if (r) {
   b496c:	b1b0      	cbz	r0, b499c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b496e:	4620      	mov	r0, r4
   b4970:	f7ff fc2e 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4974:	2110      	movs	r1, #16
   b4976:	4620      	mov	r0, r4
   b4978:	f7ff fb91 	bl	b409e <_ZdlPvj>
   b497c:	a810      	add	r0, sp, #64	; 0x40
   b497e:	f7ff fc27 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4982:	4630      	mov	r0, r6
   b4984:	f7ff fc24 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b4988:	a808      	add	r0, sp, #32
   b498a:	f7ff fc21 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
   b498e:	a804      	add	r0, sp, #16
   b4990:	f7ff fc1e 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
    }
   b4994:	4628      	mov	r0, r5
   b4996:	b015      	add	sp, #84	; 0x54
   b4998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b499c:	9b02      	ldr	r3, [sp, #8]
   b499e:	60ab      	str	r3, [r5, #8]
   b49a0:	e9c5 8700 	strd	r8, r7, [r5]
   b49a4:	e7ea      	b.n	b497c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b49a6:	bf00      	nop
   b49a8:	000b4145 	.word	0x000b4145
   b49ac:	000b4b65 	.word	0x000b4b65
   b49b0:	000c0002 	.word	0x000c0002
   b49b4:	000b41e3 	.word	0x000b41e3
   b49b8:	000b40f1 	.word	0x000b40f1

000b49bc <setup>:
void setup() {
   b49bc:	b530      	push	{r4, r5, lr}
        return hal_timer_millis(nullptr);
   b49be:	2000      	movs	r0, #0
   b49c0:	b08d      	sub	sp, #52	; 0x34
   b49c2:	f003 fd89 	bl	b84d8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b49c6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b49ca:	4604      	mov	r4, r0
   b49cc:	2000      	movs	r0, #0
   b49ce:	f003 fd83 	bl	b84d8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b49d2:	1b00      	subs	r0, r0, r4
   b49d4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b49d8:	42a8      	cmp	r0, r5
   b49da:	f171 0300 	sbcs.w	r3, r1, #0
   b49de:	d207      	bcs.n	b49f0 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b49e0:	f006 fd00 	bl	bb3e4 <_Z16_fetch_usbserialv>
   b49e4:	f006 fcf3 	bl	bb3ce <_ZN9USBSerial11isConnectedEv>
   b49e8:	b910      	cbnz	r0, b49f0 <setup+0x34>
            spark_process();
   b49ea:	f003 ffd1 	bl	b8990 <spark_process>
        while (_while() && !_condition()) {
   b49ee:	e7ed      	b.n	b49cc <setup+0x10>
   b49f0:	f006 fcf8 	bl	bb3e4 <_Z16_fetch_usbserialv>
   b49f4:	f006 fceb 	bl	bb3ce <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b49f8:	f001 f8ee 	bl	b5bd8 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b49fc:	f001 f918 	bl	b5c30 <_Z18initializePowerCfgv>
		current.setup();
   b4a00:	f000 fe9a 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4a04:	6803      	ldr	r3, [r0, #0]
   b4a06:	681b      	ldr	r3, [r3, #0]
   b4a08:	4798      	blx	r3
		sysStatus.setup();							// Initialize persistent storage
   b4a0a:	f000 fe21 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4a0e:	6803      	ldr	r3, [r0, #0]
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	4798      	blx	r3
	sysStatus.checkSystemValues();					// Make sure system values are in bounds for normal operation
   b4a14:	f000 fe1c 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4a18:	f001 f86e 	bl	b5af8 <_ZN13sysStatusData17checkSystemValuesEv>
	setNodeConfiguration();                         // This is a function for development - allows us to over-ride stored system values
   b4a1c:	f001 f940 	bl	b5ca0 <_Z20setNodeConfigurationv>
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b4a20:	4842      	ldr	r0, [pc, #264]	; (b4b2c <setup+0x170>)
   b4a22:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b4a24:	2101      	movs	r1, #1
   b4a26:	8143      	strh	r3, [r0, #10]
   b4a28:	f002 f85e 	bl	b6ae8 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b4a2c:	217c      	movs	r1, #124	; 0x7c
   b4a2e:	483f      	ldr	r0, [pc, #252]	; (b4b2c <setup+0x170>)
   b4a30:	f001 fc5c 	bl	b62ec <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b4a34:	4b3e      	ldr	r3, [pc, #248]	; (b4b30 <setup+0x174>)
   b4a36:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b4a38:	4b3e      	ldr	r3, [pc, #248]	; (b4b34 <setup+0x178>)
   b4a3a:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4a3c:	ac08      	add	r4, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b4a3e:	4b3e      	ldr	r3, [pc, #248]	; (b4b38 <setup+0x17c>)
   b4a40:	930a      	str	r3, [sp, #40]	; 0x28
   b4a42:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b4a46:	2300      	movs	r3, #0
   b4a48:	a804      	add	r0, sp, #16
   b4a4a:	9400      	str	r4, [sp, #0]
   b4a4c:	f7ff ff32 	bl	b48b4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4a50:	4620      	mov	r0, r4
   b4a52:	f7ff fbbd 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	if (! LoRA_Functions::instance().setup(false)) 	{						// Start the LoRA radio - Node
   b4a56:	f000 f997 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b4a5a:	2100      	movs	r1, #0
   b4a5c:	f000 f9a6 	bl	b4dac <_ZN14LoRA_Functions5setupEb>
   b4a60:	2800      	cmp	r0, #0
   b4a62:	d142      	bne.n	b4aea <setup+0x12e>
		sysStatus.set_alertCodeNode(3);										// Initialization failure
   b4a64:	f000 fdf4 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4a68:	2103      	movs	r1, #3
   b4a6a:	f000 ff3c 	bl	b58e6 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_alertTimestampNode(Time.now());
   b4a6e:	f000 fdef 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4a72:	4604      	mov	r4, r0
   b4a74:	f006 fbc3 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b4a78:	4602      	mov	r2, r0
   b4a7a:	17c3      	asrs	r3, r0, #31
   b4a7c:	4620      	mov	r0, r4
   b4a7e:	f000 fffc 	bl	b5a7a <_ZN13sysStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", sysStatus.get_alertCodeNode());
   b4a82:	f000 fde5 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4a86:	f000 feda 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4a8a:	492c      	ldr	r1, [pc, #176]	; (b4b3c <setup+0x180>)
   b4a8c:	4602      	mov	r2, r0
   b4a8e:	482c      	ldr	r0, [pc, #176]	; (b4b40 <setup+0x184>)
   b4a90:	f7ff fbe8 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b4a94:	f001 fac4 	bl	b6020 <_Z16takeMeasurementsv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// PIR or Pressure Sensor interrupt from low to high
   b4a98:	482a      	ldr	r0, [pc, #168]	; (b4b44 <setup+0x188>)
   b4a9a:	492b      	ldr	r1, [pc, #172]	; (b4b48 <setup+0x18c>)
   b4a9c:	8800      	ldrh	r0, [r0, #0]
   b4a9e:	2400      	movs	r4, #0
   b4aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4aa4:	2201      	movs	r2, #1
   b4aa6:	9400      	str	r4, [sp, #0]
   b4aa8:	f004 fb04 	bl	b90b4 <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); 						// We may need to monitor the user switch to change behaviours / modes
   b4aac:	4827      	ldr	r0, [pc, #156]	; (b4b4c <setup+0x190>)
   b4aae:	4928      	ldr	r1, [pc, #160]	; (b4b50 <setup+0x194>)
   b4ab0:	8800      	ldrh	r0, [r0, #0]
   b4ab2:	9400      	str	r4, [sp, #0]
   b4ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4ab8:	4622      	mov	r2, r4
   b4aba:	f004 fafb 	bl	b90b4 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = SLEEPING_STATE;               	// Sleep unless otherwise from above code
   b4abe:	4b25      	ldr	r3, [pc, #148]	; (b4b54 <setup+0x198>)
   b4ac0:	781a      	ldrb	r2, [r3, #0]
   b4ac2:	b90a      	cbnz	r2, b4ac8 <setup+0x10c>
   b4ac4:	2203      	movs	r2, #3
   b4ac6:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", sysStatus.get_alertCodeNode());
   b4ac8:	f000 fdc2 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4acc:	f000 feb7 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4ad0:	4921      	ldr	r1, [pc, #132]	; (b4b58 <setup+0x19c>)
   b4ad2:	4602      	mov	r2, r0
   b4ad4:	481a      	ldr	r0, [pc, #104]	; (b4b40 <setup+0x184>)
   b4ad6:	f7ff fbc5 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4ada:	4b20      	ldr	r3, [pc, #128]	; (b4b5c <setup+0x1a0>)
   b4adc:	8818      	ldrh	r0, [r3, #0]
   b4ade:	2100      	movs	r1, #0
}
   b4ae0:	b00d      	add	sp, #52	; 0x34
   b4ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b4ae6:	f006 bd8e 	b.w	bb606 <digitalWrite>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4aea:	f000 fdb1 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4aee:	f000 fe9c 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4af2:	280a      	cmp	r0, #10
   b4af4:	d914      	bls.n	b4b20 <setup+0x164>
		sysStatus.set_alertCodeNode(1); 					// Will initiate a join request
   b4af6:	f000 fdab 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4afa:	2101      	movs	r1, #1
   b4afc:	f000 fef3 	bl	b58e6 <_ZN13sysStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", sysStatus.get_nodeNumber(), sysStatus.get_alertCodeNode());
   b4b00:	f000 fda6 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4b04:	f000 fe91 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4b08:	9003      	str	r0, [sp, #12]
   b4b0a:	f000 fda1 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4b0e:	f000 fe96 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b4b12:	9a03      	ldr	r2, [sp, #12]
   b4b14:	4912      	ldr	r1, [pc, #72]	; (b4b60 <setup+0x1a4>)
   b4b16:	4603      	mov	r3, r0
   b4b18:	4809      	ldr	r0, [pc, #36]	; (b4b40 <setup+0x184>)
   b4b1a:	f7ff fba3 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4b1e:	e7b9      	b.n	b4a94 <setup+0xd8>
	else if (sysStatus.get_nodeNumber() > 10 || !Time.isValid()) {			// If the node number indicates this node is uninitialized or the clock needs to be set, initiate a join request
   b4b20:	f006 fb50 	bl	bb1c4 <_ZN9TimeClass7isValidEv>
   b4b24:	2800      	cmp	r0, #0
   b4b26:	d0e6      	beq.n	b4af6 <setup+0x13a>
   b4b28:	e7b4      	b.n	b4a94 <setup+0xd8>
   b4b2a:	bf00      	nop
   b4b2c:	2003df70 	.word	0x2003df70
   b4b30:	000b40d9 	.word	0x000b40d9
   b4b34:	000b417f 	.word	0x000b417f
   b4b38:	000b416b 	.word	0x000b416b
   b4b3c:	000bd94c 	.word	0x000bd94c
   b4b40:	2003e658 	.word	0x2003e658
   b4b44:	000bdfac 	.word	0x000bdfac
   b4b48:	000b4119 	.word	0x000b4119
   b4b4c:	000bdfaa 	.word	0x000bdfaa
   b4b50:	000b40e5 	.word	0x000b40e5
   b4b54:	2003dfce 	.word	0x2003dfce
   b4b58:	000bd9d1 	.word	0x000bd9d1
   b4b5c:	000bdfa8 	.word	0x000bdfa8
   b4b60:	000bd98a 	.word	0x000bd98a

000b4b64 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4b64:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4b66:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4b68:	4604      	mov	r4, r0
	switch (__op)
   b4b6a:	d104      	bne.n	b4b76 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4b6c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b6e:	6003      	str	r3, [r0, #0]
      }
   b4b70:	2000      	movs	r0, #0
   b4b72:	b003      	add	sp, #12
   b4b74:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4b76:	2a02      	cmp	r2, #2
   b4b78:	d00c      	beq.n	b4b94 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4b7a:	2a03      	cmp	r2, #3
   b4b7c:	d1f8      	bne.n	b4b70 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4b7e:	6804      	ldr	r4, [r0, #0]
   b4b80:	2c00      	cmp	r4, #0
   b4b82:	d0f5      	beq.n	b4b70 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4b84:	4620      	mov	r0, r4
   b4b86:	f7ff fb23 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4b8a:	2110      	movs	r1, #16
   b4b8c:	4620      	mov	r0, r4
   b4b8e:	f7ff fa86 	bl	b409e <_ZdlPvj>
   b4b92:	e7ed      	b.n	b4b70 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4b94:	6809      	ldr	r1, [r1, #0]
   b4b96:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4b98:	2010      	movs	r0, #16
   b4b9a:	f7ff fa7c 	bl	b4096 <_Znwj>
   b4b9e:	4605      	mov	r5, r0
   b4ba0:	b110      	cbz	r0, b4ba8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4ba2:	9901      	ldr	r1, [sp, #4]
   b4ba4:	f7ff fe76 	bl	b4894 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4ba8:	6025      	str	r5, [r4, #0]
	}
   b4baa:	e7e1      	b.n	b4b70 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4bac:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4bae:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4bb2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4bb4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4bb6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4bba:	42ae      	cmp	r6, r5
   b4bbc:	d004      	beq.n	b4bc8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4bbe:	4628      	mov	r0, r5
   b4bc0:	f006 f810 	bl	babe4 <_ZN6StringD1Ev>
   b4bc4:	3514      	adds	r5, #20
   b4bc6:	e7f8      	b.n	b4bba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4bc8:	6820      	ldr	r0, [r4, #0]
   b4bca:	f003 ff79 	bl	b8ac0 <free>
    AllocatorT::free(data_);
}
   b4bce:	4620      	mov	r0, r4
   b4bd0:	bd70      	pop	{r4, r5, r6, pc}

000b4bd2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4bd2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4bd6:	4604      	mov	r4, r0
   b4bd8:	460d      	mov	r5, r1
   b4bda:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4bdc:	d916      	bls.n	b4c0c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4bde:	4290      	cmp	r0, r2
   b4be0:	d215      	bcs.n	b4c0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4be2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4be6:	1a75      	subs	r5, r6, r1
   b4be8:	f1a1 0714 	sub.w	r7, r1, #20
   b4bec:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4bee:	42b7      	cmp	r7, r6
   b4bf0:	d01c      	beq.n	b4c2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4bf2:	b12c      	cbz	r4, b4c00 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4bf4:	4631      	mov	r1, r6
   b4bf6:	4620      	mov	r0, r4
   b4bf8:	f006 f870 	bl	bacdc <_ZN6StringC1EOS_>
   b4bfc:	7c33      	ldrb	r3, [r6, #16]
   b4bfe:	7423      	strb	r3, [r4, #16]
   b4c00:	4630      	mov	r0, r6
   b4c02:	f005 ffef 	bl	babe4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4c06:	3e14      	subs	r6, #20
   b4c08:	3c14      	subs	r4, #20
   b4c0a:	e7f0      	b.n	b4bee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4c0c:	d00e      	beq.n	b4c2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4c0e:	42b5      	cmp	r5, r6
   b4c10:	d00c      	beq.n	b4c2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4c12:	b12c      	cbz	r4, b4c20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4c14:	4629      	mov	r1, r5
   b4c16:	4620      	mov	r0, r4
   b4c18:	f006 f860 	bl	bacdc <_ZN6StringC1EOS_>
   b4c1c:	7c2b      	ldrb	r3, [r5, #16]
   b4c1e:	7423      	strb	r3, [r4, #16]
   b4c20:	4628      	mov	r0, r5
   b4c22:	f005 ffdf 	bl	babe4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4c26:	3514      	adds	r5, #20
   b4c28:	3414      	adds	r4, #20
   b4c2a:	e7f0      	b.n	b4c0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4c32:	2300      	movs	r3, #0
   b4c34:	e9c0 3300 	strd	r3, r3, [r0]
   b4c38:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4c3a:	684f      	ldr	r7, [r1, #4]
   b4c3c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4c3e:	4604      	mov	r4, r0
   b4c40:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4c42:	dd23      	ble.n	b4c8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4c44:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4c48:	fb08 f007 	mul.w	r0, r8, r7
   b4c4c:	f003 ff30 	bl	b8ab0 <malloc>
            if (!d) {
   b4c50:	4605      	mov	r5, r0
   b4c52:	b1d8      	cbz	r0, b4c8c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4c54:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4c58:	fb08 1202 	mla	r2, r8, r2, r1
   b4c5c:	f7ff ffb9 	bl	b4bd2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4c60:	6820      	ldr	r0, [r4, #0]
   b4c62:	f003 ff2d 	bl	b8ac0 <free>
        data_ = d;
   b4c66:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4c68:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4c6a:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4c6e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4c72:	45b8      	cmp	r8, r7
   b4c74:	d008      	beq.n	b4c88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4c76:	4639      	mov	r1, r7
   b4c78:	4628      	mov	r0, r5
   b4c7a:	f006 f849 	bl	bad10 <_ZN6StringC1ERKS_>
   b4c7e:	7c3b      	ldrb	r3, [r7, #16]
   b4c80:	742b      	strb	r3, [r5, #16]
   b4c82:	3714      	adds	r7, #20
   b4c84:	3514      	adds	r5, #20
   b4c86:	e7f4      	b.n	b4c72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4c88:	6873      	ldr	r3, [r6, #4]
   b4c8a:	6063      	str	r3, [r4, #4]
}
   b4c8c:	4620      	mov	r0, r4
   b4c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4c94 <_GLOBAL__sub_I_SystemMode>:
   b4c94:	b5f0      	push	{r4, r5, r6, r7, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4c96:	4b2f      	ldr	r3, [pc, #188]	; (b4d54 <_GLOBAL__sub_I_SystemMode+0xc0>)
    SleepResult() {}
   b4c98:	4a2f      	ldr	r2, [pc, #188]	; (b4d58 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b4c9a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4c9c:	2400      	movs	r4, #0
   b4c9e:	b08d      	sub	sp, #52	; 0x34
   b4ca0:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b4ca4:	2002      	movs	r0, #2
   b4ca6:	f003 fe11 	bl	b88cc <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b4caa:	4621      	mov	r1, r4
   b4cac:	2001      	movs	r0, #1
   b4cae:	f003 fe25 	bl	b88fc <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b4cb2:	2101      	movs	r1, #1
   b4cb4:	2004      	movs	r0, #4
   b4cb6:	f003 fbe7 	bl	b8488 <HAL_Feature_Set>
        capacity_(0) {
   b4cba:	e9cd 4400 	strd	r4, r4, [sp]
   b4cbe:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4cc0:	f006 fb90 	bl	bb3e4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4cc4:	4d25      	ldr	r5, [pc, #148]	; (b4d5c <_GLOBAL__sub_I_SystemMode+0xc8>)
   b4cc6:	4606      	mov	r6, r0
   b4cc8:	4669      	mov	r1, sp
   b4cca:	a803      	add	r0, sp, #12
   b4ccc:	f7ff ffaf 	bl	b4c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4cd0:	462f      	mov	r7, r5
        stream_(&stream) {
   b4cd2:	a903      	add	r1, sp, #12
   b4cd4:	a806      	add	r0, sp, #24
   b4cd6:	f7ff ffaa 	bl	b4c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4cda:	4b21      	ldr	r3, [pc, #132]	; (b4d60 <_GLOBAL__sub_I_SystemMode+0xcc>)
   b4cdc:	f847 3b04 	str.w	r3, [r7], #4
   b4ce0:	a906      	add	r1, sp, #24
   b4ce2:	a809      	add	r0, sp, #36	; 0x24
   b4ce4:	f7ff ffa3 	bl	b4c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4ce8:	aa09      	add	r2, sp, #36	; 0x24
   b4cea:	211e      	movs	r1, #30
   b4cec:	4638      	mov	r0, r7
   b4cee:	f005 f8d5 	bl	b9e9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4cf2:	a809      	add	r0, sp, #36	; 0x24
   b4cf4:	f7ff ff5a 	bl	b4bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4cf8:	a806      	add	r0, sp, #24
   b4cfa:	f7ff ff57 	bl	b4bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4cfe:	4b19      	ldr	r3, [pc, #100]	; (b4d64 <_GLOBAL__sub_I_SystemMode+0xd0>)
   b4d00:	602b      	str	r3, [r5, #0]
   b4d02:	a803      	add	r0, sp, #12
   b4d04:	622e      	str	r6, [r5, #32]
   b4d06:	f7ff ff51 	bl	b4bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4d0a:	4b17      	ldr	r3, [pc, #92]	; (b4d68 <_GLOBAL__sub_I_SystemMode+0xd4>)
   b4d0c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b4d0e:	f006 fb69 	bl	bb3e4 <_Z16_fetch_usbserialv>
   b4d12:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4d16:	f006 fb53 	bl	bb3c0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4d1a:	f004 fda1 	bl	b9860 <_ZN5spark10LogManager8instanceEv>
   b4d1e:	4629      	mov	r1, r5
   b4d20:	f004 ff92 	bl	b9c48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b4d24:	4668      	mov	r0, sp
   b4d26:	f7ff ff41 	bl	b4bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        : config_(config) {
   b4d2a:	4b10      	ldr	r3, [pc, #64]	; (b4d6c <_GLOBAL__sub_I_SystemMode+0xd8>)
   b4d2c:	1d1a      	adds	r2, r3, #4
   b4d2e:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4d30:	4a0f      	ldr	r2, [pc, #60]	; (b4d70 <_GLOBAL__sub_I_SystemMode+0xdc>)
   b4d32:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4d34:	2201      	movs	r2, #1
   b4d36:	751a      	strb	r2, [r3, #20]
   b4d38:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4d3c:	611c      	str	r4, [r3, #16]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4d3e:	f006 fcd3 	bl	bb6e8 <_Z19__fetch_global_Wirev>
   b4d42:	4601      	mov	r1, r0
   b4d44:	480b      	ldr	r0, [pc, #44]	; (b4d74 <_GLOBAL__sub_I_SystemMode+0xe0>)
   b4d46:	2269      	movs	r2, #105	; 0x69
   b4d48:	b00d      	add	sp, #52	; 0x34
   b4d4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4d4e:	f001 b9cf 	b.w	b60f0 <_ZN6AB1805C1ER7TwoWireh>
   b4d52:	bf00      	nop
   b4d54:	2003df48 	.word	0x2003df48
   b4d58:	ffff0000 	.word	0xffff0000
   b4d5c:	2003dfa8 	.word	0x2003dfa8
   b4d60:	000bda0c 	.word	0x000bda0c
   b4d64:	000be80c 	.word	0x000be80c
   b4d68:	000bda24 	.word	0x000bda24
   b4d6c:	2003df90 	.word	0x2003df90
   b4d70:	00030010 	.word	0x00030010
   b4d74:	2003df70 	.word	0x2003df70

000b4d78 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4d78:	4770      	bx	lr

000b4d7a <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b4d7a:	b510      	push	{r4, lr}
}
   b4d7c:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b4d7e:	4604      	mov	r4, r0
}
   b4d80:	f7ff f98d 	bl	b409e <_ZdlPvj>
   b4d84:	4620      	mov	r0, r4
   b4d86:	bd10      	pop	{r4, pc}

000b4d88 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4d88:	b510      	push	{r4, lr}
    if (!_instance) {
   b4d8a:	4c06      	ldr	r4, [pc, #24]	; (b4da4 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4d8c:	6823      	ldr	r3, [r4, #0]
   b4d8e:	b933      	cbnz	r3, b4d9e <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4d90:	2004      	movs	r0, #4
   b4d92:	f7ff f980 	bl	b4096 <_Znwj>
   b4d96:	b108      	cbz	r0, b4d9c <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4d98:	4b03      	ldr	r3, [pc, #12]	; (b4da8 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4d9a:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4d9c:	6020      	str	r0, [r4, #0]
}
   b4d9e:	6820      	ldr	r0, [r4, #0]
   b4da0:	bd10      	pop	{r4, pc}
   b4da2:	bf00      	nop
   b4da4:	2003dfd4 	.word	0x2003dfd4
   b4da8:	000bdebc 	.word	0x000bdebc

000b4dac <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4dac:	b530      	push	{r4, r5, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4dae:	4831      	ldr	r0, [pc, #196]	; (b4e74 <_ZN14LoRA_Functions5setupEb+0xc8>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4db0:	b087      	sub	sp, #28
   b4db2:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4db4:	f002 fcfb 	bl	b77ae <_ZN8RHRouter4initEv>
   b4db8:	4604      	mov	r4, r0
   b4dba:	b930      	cbnz	r0, b4dca <_ZN14LoRA_Functions5setupEb+0x1e>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b4dbc:	492e      	ldr	r1, [pc, #184]	; (b4e78 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b4dbe:	482f      	ldr	r0, [pc, #188]	; (b4e7c <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4dc0:	f7ff fa50 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		manager.setThisAddress(11);
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
	}

	return true;
}
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	b007      	add	sp, #28
   b4dc8:	bd30      	pop	{r4, r5, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4dca:	ed9f 0a2d 	vldr	s0, [pc, #180]	; b4e80 <_ZN14LoRA_Functions5setupEb+0xd4>
   b4dce:	482d      	ldr	r0, [pc, #180]	; (b4e84 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4dd0:	f002 ffe6 	bl	b7da0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4dd4:	482b      	ldr	r0, [pc, #172]	; (b4e84 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4dd6:	2200      	movs	r2, #0
   b4dd8:	2117      	movs	r1, #23
   b4dda:	f003 f95b 	bl	b8094 <_ZN7RH_RF9510setTxPowerEab>
	if (gatewayID == true) {
   b4dde:	b18d      	cbz	r5, b4e04 <_ZN14LoRA_Functions5setupEb+0x58>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b4de0:	f000 fc36 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4de4:	2100      	movs	r1, #0
   b4de6:	f000 fd66 	bl	b58b6 <_ZN13sysStatusData14set_nodeNumberEh>
        return spark_deviceID();
   b4dea:	a802      	add	r0, sp, #8
   b4dec:	f003 fde0 	bl	b89b0 <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b4df0:	9a02      	ldr	r2, [sp, #8]
   b4df2:	4925      	ldr	r1, [pc, #148]	; (b4e88 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4df4:	4821      	ldr	r0, [pc, #132]	; (b4e7c <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4df6:	f7ff fa35 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4dfa:	a802      	add	r0, sp, #8
   b4dfc:	f005 fef2 	bl	babe4 <_ZN6StringD1Ev>
   b4e00:	462c      	mov	r4, r5
   b4e02:	e7df      	b.n	b4dc4 <_ZN14LoRA_Functions5setupEb+0x18>
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b4e04:	f000 fc24 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4e08:	f000 fd0f 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e0c:	b1f0      	cbz	r0, b4e4c <_ZN14LoRA_Functions5setupEb+0xa0>
   b4e0e:	f000 fc1f 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4e12:	f000 fd0a 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e16:	280a      	cmp	r0, #10
   b4e18:	d818      	bhi.n	b4e4c <_ZN14LoRA_Functions5setupEb+0xa0>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b4e1a:	f000 fc19 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4e1e:	f000 fd04 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e22:	4601      	mov	r1, r0
   b4e24:	4819      	ldr	r0, [pc, #100]	; (b4e8c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4e26:	f001 ffee 	bl	b6e06 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4e2a:	4818      	ldr	r0, [pc, #96]	; (b4e8c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4e2c:	f001 ffd1 	bl	b6dd2 <_ZN10RHDatagram11thisAddressEv>
   b4e30:	9001      	str	r0, [sp, #4]
   b4e32:	a802      	add	r0, sp, #8
   b4e34:	f003 fdbc 	bl	b89b0 <spark_deviceID>
   b4e38:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4e3c:	4914      	ldr	r1, [pc, #80]	; (b4e90 <_ZN14LoRA_Functions5setupEb+0xe4>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4e3e:	480f      	ldr	r0, [pc, #60]	; (b4e7c <_ZN14LoRA_Functions5setupEb+0xd0>)
   b4e40:	f7ff fa10 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b4e44:	a802      	add	r0, sp, #8
   b4e46:	f005 fecd 	bl	babe4 <_ZN6StringD1Ev>
   b4e4a:	e7bb      	b.n	b4dc4 <_ZN14LoRA_Functions5setupEb+0x18>
		sysStatus.set_nodeNumber(11);
   b4e4c:	f000 fc00 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4e50:	210b      	movs	r1, #11
   b4e52:	f000 fd30 	bl	b58b6 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b4e56:	210b      	movs	r1, #11
   b4e58:	480c      	ldr	r0, [pc, #48]	; (b4e8c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4e5a:	f001 ffd4 	bl	b6e06 <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4e5e:	480b      	ldr	r0, [pc, #44]	; (b4e8c <_ZN14LoRA_Functions5setupEb+0xe0>)
   b4e60:	f001 ffb7 	bl	b6dd2 <_ZN10RHDatagram11thisAddressEv>
   b4e64:	9001      	str	r0, [sp, #4]
   b4e66:	a802      	add	r0, sp, #8
   b4e68:	f003 fda2 	bl	b89b0 <spark_deviceID>
   b4e6c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b4e70:	4908      	ldr	r1, [pc, #32]	; (b4e94 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4e72:	e7e4      	b.n	b4e3e <_ZN14LoRA_Functions5setupEb+0x92>
   b4e74:	2003e204 	.word	0x2003e204
   b4e78:	000bda34 	.word	0x000bda34
   b4e7c:	2003e658 	.word	0x2003e658
   b4e80:	4464c000 	.word	0x4464c000
   b4e84:	2003e0d4 	.word	0x2003e0d4
   b4e88:	000bda40 	.word	0x000bda40
   b4e8c:	2003e208 	.word	0x2003e208
   b4e90:	000bda7a 	.word	0x000bda7a
   b4e94:	000bdab1 	.word	0x000bdab1

000b4e98 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4e98:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b4e9a:	4c06      	ldr	r4, [pc, #24]	; (b4eb4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4e9c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b4e9e:	f10d 0203 	add.w	r2, sp, #3
   b4ea2:	a901      	add	r1, sp, #4
   b4ea4:	4620      	mov	r0, r4
   b4ea6:	f002 fef7 	bl	b7c98 <_ZN7RH_RF954recvEPhS0_>
   b4eaa:	2800      	cmp	r0, #0
   b4eac:	d1f7      	bne.n	b4e9e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b4eae:	b040      	add	sp, #256	; 0x100
   b4eb0:	bd10      	pop	{r4, pc}
   b4eb2:	bf00      	nop
   b4eb4:	2003e0d4 	.word	0x2003e0d4

000b4eb8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b4eb8:	4801      	ldr	r0, [pc, #4]	; (b4ec0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b4eba:	f002 beda 	b.w	b7c72 <_ZN7RH_RF955sleepEv>
   b4ebe:	bf00      	nop
   b4ec0:	2003e0d4 	.word	0x2003e0d4

000b4ec4 <_ZN14LoRA_Functions21composeDataReportNodeEv>:
	}
	return false;
}


bool LoRA_Functions::composeDataReportNode() {
   b4ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4ec8:	b085      	sub	sp, #20

	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b4eca:	f000 fc35 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4ece:	f000 fccf 	bl	b5870 <_ZNK17currentStatusData16get_successCountEv>
   b4ed2:	4604      	mov	r4, r0
   b4ed4:	f000 fc30 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4ed8:	f000 fcc5 	bl	b5866 <_ZNK17currentStatusData16get_messageCountEv>
   b4edc:	4606      	mov	r6, r0
   b4ede:	4620      	mov	r0, r4
   b4ee0:	f007 fe6a 	bl	bcbb8 <__aeabi_i2d>
   b4ee4:	4604      	mov	r4, r0
   b4ee6:	4630      	mov	r0, r6
   b4ee8:	460d      	mov	r5, r1
   b4eea:	f007 fe65 	bl	bcbb8 <__aeabi_i2d>
   b4eee:	4602      	mov	r2, r0
   b4ef0:	460b      	mov	r3, r1
   b4ef2:	4620      	mov	r0, r4
   b4ef4:	4629      	mov	r1, r5
   b4ef6:	f007 fff3 	bl	bcee0 <__aeabi_ddiv>
   b4efa:	2200      	movs	r2, #0
   b4efc:	4b7c      	ldr	r3, [pc, #496]	; (b50f0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x22c>)
   b4efe:	f007 fec5 	bl	bcc8c <__aeabi_dmul>
   b4f02:	f008 f9bb 	bl	bd27c <__aeabi_d2f>

	digitalWrite(BLUE_LED,HIGH);
   b4f06:	4b7b      	ldr	r3, [pc, #492]	; (b50f4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x230>)
   b4f08:	881f      	ldrh	r7, [r3, #0]
   b4f0a:	2101      	movs	r1, #1
	float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b4f0c:	4606      	mov	r6, r0
	digitalWrite(BLUE_LED,HIGH);
   b4f0e:	4638      	mov	r0, r7
   b4f10:	f006 fb79 	bl	bb606 <digitalWrite>
	if (current.get_messageCount() == 255) {		// This should not happen in a day unless we pick a very small reporting freq
   b4f14:	f000 fc10 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f18:	f000 fca5 	bl	b5866 <_ZNK17currentStatusData16get_messageCountEv>
   b4f1c:	28ff      	cmp	r0, #255	; 0xff
   b4f1e:	f040 80a3 	bne.w	b5068 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1a4>
		current.set_messageCount(0);				// Prevent divide by zero
   b4f22:	f000 fc09 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f26:	2100      	movs	r1, #0
   b4f28:	f000 fcf5 	bl	b5916 <_ZN17currentStatusData16set_messageCountEh>
		current.set_successCount(0);				// Zero as well
   b4f2c:	f000 fc04 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f30:	2100      	movs	r1, #0
   b4f32:	f000 fcf6 	bl	b5922 <_ZN17currentStatusData16set_successCountEh>
	}
	else current.set_messageCount(current.get_messageCount()+1);
	Log.info("Sending data report number %d",current.get_messageCount());
   b4f36:	f000 fbff 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f3a:	f000 fc94 	bl	b5866 <_ZNK17currentStatusData16get_messageCountEv>
   b4f3e:	496e      	ldr	r1, [pc, #440]	; (b50f8 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x234>)

	buf[0] = highByte(sysStatus.get_magicNumber());
   b4f40:	4c6e      	ldr	r4, [pc, #440]	; (b50fc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x238>)
	Log.info("Sending data report number %d",current.get_messageCount());
   b4f42:	4602      	mov	r2, r0
   b4f44:	486e      	ldr	r0, [pc, #440]	; (b5100 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b4f46:	f7ff f98d 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());
   b4f4a:	f000 fb81 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4f4e:	f000 fd00 	bl	b5952 <_ZNK13sysStatusData15get_magicNumberEv>
   b4f52:	0a00      	lsrs	r0, r0, #8
   b4f54:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b4f56:	f000 fb7b 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4f5a:	f000 fcfa 	bl	b5952 <_ZNK13sysStatusData15get_magicNumberEv>
	buf[2] = 1;						// Set for code release - fix later
   b4f5e:	2501      	movs	r5, #1
	buf[1] = lowByte(sysStatus.get_magicNumber());			
   b4f60:	7060      	strb	r0, [r4, #1]
	buf[2] = 1;						// Set for code release - fix later
   b4f62:	70a5      	strb	r5, [r4, #2]
	buf[3] = highByte(current.get_hourlyCount());
   b4f64:	f000 fbe8 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f68:	f000 fcfd 	bl	b5966 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4f6c:	0a00      	lsrs	r0, r0, #8
   b4f6e:	70e0      	strb	r0, [r4, #3]
	buf[4] = lowByte(current.get_hourlyCount()); 
   b4f70:	f000 fbe2 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f74:	f000 fcf7 	bl	b5966 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4f78:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(current.get_dailyCount());
   b4f7a:	f000 fbdd 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f7e:	f000 fcf7 	bl	b5970 <_ZNK17currentStatusData14get_dailyCountEv>
   b4f82:	0a00      	lsrs	r0, r0, #8
   b4f84:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(current.get_dailyCount()); 
   b4f86:	f000 fbd7 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f8a:	f000 fcf1 	bl	b5970 <_ZNK17currentStatusData14get_dailyCountEv>
   b4f8e:	71a0      	strb	r0, [r4, #6]
	buf[7] = sysStatus.get_sensorType();
   b4f90:	f000 fb5e 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4f94:	f000 fc58 	bl	b5848 <_ZNK13sysStatusData14get_sensorTypeEv>
   b4f98:	71e0      	strb	r0, [r4, #7]
	buf[8] = current.get_internalTempC();
   b4f9a:	f000 fbcd 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4f9e:	f000 fc58 	bl	b5852 <_ZNK17currentStatusData17get_internalTempCEv>
   b4fa2:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_stateOfCharge();
   b4fa4:	f000 fbc8 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4fa8:	f000 fbea 	bl	b5780 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4fac:	ec51 0b10 	vmov	r0, r1, d0
   b4fb0:	f008 f944 	bl	bd23c <__aeabi_d2uiz>
   b4fb4:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_batteryState();	
   b4fb6:	f000 fbbf 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4fba:	f000 fc4f 	bl	b585c <_ZNK17currentStatusData16get_batteryStateEv>
   b4fbe:	72a0      	strb	r0, [r4, #10]
	buf[11] = sysStatus.get_resetCount();
   b4fc0:	f000 fb46 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b4fc4:	f000 fc36 	bl	b5834 <_ZNK13sysStatusData14get_resetCountEv>
   b4fc8:	72e0      	strb	r0, [r4, #11]
	buf[12] = current.get_messageCount();
   b4fca:	f000 fbb5 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4fce:	f000 fc4a 	bl	b5866 <_ZNK17currentStatusData16get_messageCountEv>
   b4fd2:	7320      	strb	r0, [r4, #12]
	buf[13] = current.get_successCount();
   b4fd4:	f000 fbb0 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4fd8:	f000 fc4a 	bl	b5870 <_ZNK17currentStatusData16get_successCountEv>

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	unsigned char result = manager.sendtoWait(buf, 14, GATEWAY_ADDRESS, DATA_RPT);
   b4fdc:	2303      	movs	r3, #3
	buf[13] = current.get_successCount();
   b4fde:	7360      	strb	r0, [r4, #13]
	unsigned char result = manager.sendtoWait(buf, 14, GATEWAY_ADDRESS, DATA_RPT);
   b4fe0:	4621      	mov	r1, r4
   b4fe2:	9300      	str	r3, [sp, #0]
   b4fe4:	4847      	ldr	r0, [pc, #284]	; (b5104 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x240>)
   b4fe6:	2300      	movs	r3, #0
   b4fe8:	220e      	movs	r2, #14
   b4fea:	f002 f9a5 	bl	b7338 <_ZN6RHMesh10sendtoWaitEPhhhh>
	
	if ( result == RH_ROUTER_ERROR_NONE) {
   b4fee:	4604      	mov	r4, r0
   b4ff0:	2800      	cmp	r0, #0
   b4ff2:	d146      	bne.n	b5082 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1be>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		current.set_successCount(current.get_successCount()+1);
   b4ff4:	f000 fba0 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4ff8:	4606      	mov	r6, r0
   b4ffa:	f000 fb9d 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b4ffe:	f000 fc37 	bl	b5870 <_ZNK17currentStatusData16get_successCountEv>
   b5002:	4428      	add	r0, r5
   b5004:	b2c1      	uxtb	r1, r0
   b5006:	4630      	mov	r0, r6
   b5008:	f000 fc8b 	bl	b5922 <_ZN17currentStatusData16set_successCountEh>
		percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b500c:	f000 fb94 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5010:	f000 fc2e 	bl	b5870 <_ZNK17currentStatusData16get_successCountEv>
   b5014:	4680      	mov	r8, r0
   b5016:	f000 fb8f 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b501a:	f000 fc24 	bl	b5866 <_ZNK17currentStatusData16get_messageCountEv>
   b501e:	4606      	mov	r6, r0
   b5020:	4640      	mov	r0, r8
   b5022:	f007 fdc9 	bl	bcbb8 <__aeabi_i2d>
   b5026:	4680      	mov	r8, r0
   b5028:	4630      	mov	r0, r6
   b502a:	4689      	mov	r9, r1
   b502c:	f007 fdc4 	bl	bcbb8 <__aeabi_i2d>
   b5030:	4602      	mov	r2, r0
   b5032:	460b      	mov	r3, r1
   b5034:	4640      	mov	r0, r8
   b5036:	4649      	mov	r1, r9
   b5038:	f007 ff52 	bl	bcee0 <__aeabi_ddiv>
   b503c:	4b2c      	ldr	r3, [pc, #176]	; (b50f0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x22c>)
   b503e:	2200      	movs	r2, #0
   b5040:	f007 fe24 	bl	bcc8c <__aeabi_dmul>
   b5044:	f008 f91a 	bl	bd27c <__aeabi_d2f>
		Log.info("Data report delivered - success rate %4.2f",percentSuccess);
   b5048:	f007 fdc8 	bl	bcbdc <__aeabi_f2d>
   b504c:	4602      	mov	r2, r0
   b504e:	460b      	mov	r3, r1
   b5050:	482b      	ldr	r0, [pc, #172]	; (b5100 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b5052:	492d      	ldr	r1, [pc, #180]	; (b5108 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x244>)
   b5054:	f7ff f906 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5058:	4638      	mov	r0, r7
   b505a:	4621      	mov	r1, r4
   b505c:	f006 fad3 	bl	bb606 <digitalWrite>
		return true;
   b5060:	4628      	mov	r0, r5
	else  {
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}
   b5062:	b005      	add	sp, #20
   b5064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else current.set_messageCount(current.get_messageCount()+1);
   b5068:	f000 fb66 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b506c:	4604      	mov	r4, r0
   b506e:	f000 fb63 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5072:	f000 fbf8 	bl	b5866 <_ZNK17currentStatusData16get_messageCountEv>
   b5076:	3001      	adds	r0, #1
   b5078:	b2c1      	uxtb	r1, r0
   b507a:	4620      	mov	r0, r4
   b507c:	f000 fc4b 	bl	b5916 <_ZN17currentStatusData16set_messageCountEh>
   b5080:	e759      	b.n	b4f36 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x72>
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b5082:	2802      	cmp	r0, #2
   b5084:	d115      	bne.n	b50b2 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ee>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, percentSuccess);
   b5086:	f000 fae3 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b508a:	f000 fbce 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b508e:	9003      	str	r0, [sp, #12]
   b5090:	4630      	mov	r0, r6
   b5092:	f007 fda3 	bl	bcbdc <__aeabi_f2d>
   b5096:	9a03      	ldr	r2, [sp, #12]
   b5098:	e9cd 0100 	strd	r0, r1, [sp]
   b509c:	491b      	ldr	r1, [pc, #108]	; (b510c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x248>)
   b509e:	2300      	movs	r3, #0
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b50a0:	4817      	ldr	r0, [pc, #92]	; (b5100 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x23c>)
   b50a2:	f7ff f8df 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b50a6:	4638      	mov	r0, r7
   b50a8:	2100      	movs	r1, #0
   b50aa:	f006 faac 	bl	bb606 <digitalWrite>
	return false;
   b50ae:	2000      	movs	r0, #0
   b50b0:	e7d7      	b.n	b5062 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x19e>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b50b2:	2805      	cmp	r0, #5
   b50b4:	d10d      	bne.n	b50d2 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x20e>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b50b6:	f000 facb 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b50ba:	f000 fbb6 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b50be:	9003      	str	r0, [sp, #12]
   b50c0:	4630      	mov	r0, r6
   b50c2:	f007 fd8b 	bl	bcbdc <__aeabi_f2d>
   b50c6:	9a03      	ldr	r2, [sp, #12]
   b50c8:	e9cd 0100 	strd	r0, r1, [sp]
   b50cc:	2300      	movs	r3, #0
   b50ce:	4910      	ldr	r1, [pc, #64]	; (b5110 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x24c>)
   b50d0:	e7e6      	b.n	b50a0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1dc>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS,percentSuccess);
   b50d2:	f000 fabd 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b50d6:	f000 fba8 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b50da:	9003      	str	r0, [sp, #12]
   b50dc:	4630      	mov	r0, r6
   b50de:	f007 fd7d 	bl	bcbdc <__aeabi_f2d>
   b50e2:	9a03      	ldr	r2, [sp, #12]
   b50e4:	e9cd 0100 	strd	r0, r1, [sp]
   b50e8:	2300      	movs	r3, #0
   b50ea:	490a      	ldr	r1, [pc, #40]	; (b5114 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x250>)
   b50ec:	e7d8      	b.n	b50a0 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1dc>
   b50ee:	bf00      	nop
   b50f0:	40590000 	.word	0x40590000
   b50f4:	000bdfa8 	.word	0x000bdfa8
   b50f8:	000bdaf8 	.word	0x000bdaf8
   b50fc:	2003dfd8 	.word	0x2003dfd8
   b5100:	2003e658 	.word	0x2003e658
   b5104:	2003e204 	.word	0x2003e204
   b5108:	000bdb16 	.word	0x000bdb16
   b510c:	000bdb41 	.word	0x000bdb41
   b5110:	000bdb91 	.word	0x000bdb91
   b5114:	000bdbea 	.word	0x000bdbea

000b5118 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b5118:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (buf[8] == 0) {
   b511a:	4c1e      	ldr	r4, [pc, #120]	; (b5194 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x7c>)
   b511c:	7a25      	ldrb	r5, [r4, #8]
   b511e:	2d00      	cmp	r5, #0
   b5120:	d132      	bne.n	b5188 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x70>
		sysStatus.set_openHours(false);					// Open hours or not - impacts whether we power down the sensor for sleep
   b5122:	f000 fa95 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5126:	4629      	mov	r1, r5
   b5128:	f000 fac8 	bl	b56bc <_ZN13sysStatusData13set_openHoursEb>
		Log.info("Park is closed - reset everything");
   b512c:	491a      	ldr	r1, [pc, #104]	; (b5198 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x80>)
   b512e:	481b      	ldr	r0, [pc, #108]	; (b519c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x84>)
   b5130:	f7ff f898 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		current.resetEverything();
   b5134:	f000 fb00 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5138:	f000 fd0e 	bl	b5b58 <_ZN17currentStatusData15resetEverythingEv>
	}
	else sysStatus.set_openHours(true);

	if (buf[9] > 0) {									// the Gateway set an alert
   b513c:	7a63      	ldrb	r3, [r4, #9]
   b513e:	b16b      	cbz	r3, b515c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x44>
		sysStatus.set_alertCodeNode(buf[9]);				
   b5140:	f000 fa86 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5144:	7a61      	ldrb	r1, [r4, #9]
   b5146:	f000 fbce 	bl	b58e6 <_ZN13sysStatusData17set_alertCodeNodeEh>
		sysStatus.set_nodeNumber(11);					// Set node number to unconfigured
   b514a:	f000 fa81 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b514e:	210b      	movs	r1, #11
   b5150:	f000 fbb1 	bl	b58b6 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);						// Make sure the next message reflects an unconfigured node
   b5154:	4812      	ldr	r0, [pc, #72]	; (b51a0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x88>)
   b5156:	210b      	movs	r1, #11
   b5158:	f001 fe55 	bl	b6e06 <_ZN10RHDatagram14setThisAddressEh>
	}
	Log.info("Data report acknowledged %s alert for message %d park is %s and alert code is %d", (buf[9] > 0) ? "with":"without", buf[10], (buf[8] ==1) ? "open":"closed", buf[9]);
   b515c:	7a20      	ldrb	r0, [r4, #8]
   b515e:	4a11      	ldr	r2, [pc, #68]	; (b51a4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x8c>)
   b5160:	4b11      	ldr	r3, [pc, #68]	; (b51a8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x90>)
   b5162:	7a61      	ldrb	r1, [r4, #9]
   b5164:	2801      	cmp	r0, #1
   b5166:	bf18      	it	ne
   b5168:	4613      	movne	r3, r2
   b516a:	4810      	ldr	r0, [pc, #64]	; (b51ac <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x94>)
   b516c:	4a10      	ldr	r2, [pc, #64]	; (b51b0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x98>)
   b516e:	e9cd 3100 	strd	r3, r1, [sp]
   b5172:	2900      	cmp	r1, #0
   b5174:	bf18      	it	ne
   b5176:	4602      	movne	r2, r0
   b5178:	7aa3      	ldrb	r3, [r4, #10]
   b517a:	490e      	ldr	r1, [pc, #56]	; (b51b4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x9c>)
   b517c:	4807      	ldr	r0, [pc, #28]	; (b519c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x84>)
   b517e:	f7ff f871 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	return true;
}
   b5182:	2001      	movs	r0, #1
   b5184:	b003      	add	sp, #12
   b5186:	bd30      	pop	{r4, r5, pc}
	else sysStatus.set_openHours(true);
   b5188:	f000 fa62 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b518c:	2101      	movs	r1, #1
   b518e:	f000 fa95 	bl	b56bc <_ZN13sysStatusData13set_openHoursEb>
   b5192:	e7d3      	b.n	b513c <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x24>
   b5194:	2003dfd8 	.word	0x2003dfd8
   b5198:	000bdc53 	.word	0x000bdc53
   b519c:	2003e658 	.word	0x2003e658
   b51a0:	2003e208 	.word	0x2003e208
   b51a4:	000bdc4c 	.word	0x000bdc4c
   b51a8:	000bdc47 	.word	0x000bdc47
   b51ac:	000bdc3a 	.word	0x000bdc3a
   b51b0:	000bdc3f 	.word	0x000bdc3f
   b51b4:	000bdc75 	.word	0x000bdc75

000b51b8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:

bool LoRA_Functions::composeJoinRequesttNode() {
   b51b8:	b5f0      	push	{r4, r5, r6, r7, lr}

	digitalWrite(BLUE_LED,HIGH);
   b51ba:	4b2f      	ldr	r3, [pc, #188]	; (b5278 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc0>)

	char deviceID[25];
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long

	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b51bc:	4d2f      	ldr	r5, [pc, #188]	; (b527c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
	digitalWrite(BLUE_LED,HIGH);
   b51be:	881e      	ldrh	r6, [r3, #0]
bool LoRA_Functions::composeJoinRequesttNode() {
   b51c0:	b08f      	sub	sp, #60	; 0x3c
	digitalWrite(BLUE_LED,HIGH);
   b51c2:	2101      	movs	r1, #1
   b51c4:	4630      	mov	r0, r6
   b51c6:	f006 fa1e 	bl	bb606 <digitalWrite>
   b51ca:	a803      	add	r0, sp, #12
   b51cc:	f003 fbf0 	bl	b89b0 <spark_deviceID>
		{getBytes((unsigned char *)buf, bufsize, index);}
   b51d0:	2300      	movs	r3, #0
   b51d2:	2219      	movs	r2, #25
   b51d4:	a907      	add	r1, sp, #28
   b51d6:	a803      	add	r0, sp, #12
   b51d8:	f005 fda5 	bl	bad26 <_ZNK6String8getBytesEPhjj>
	System.deviceID().toCharArray(deviceID, 25);					// the deviceID is 24 charcters long
   b51dc:	a803      	add	r0, sp, #12
   b51de:	f005 fd01 	bl	babe4 <_ZN6StringD1Ev>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b51e2:	f000 fa35 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b51e6:	f000 fbb4 	bl	b5952 <_ZNK13sysStatusData15get_magicNumberEv>
   b51ea:	0a00      	lsrs	r0, r0, #8
   b51ec:	7028      	strb	r0, [r5, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b51ee:	f000 fa2f 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b51f2:	f000 fbae 	bl	b5952 <_ZNK13sysStatusData15get_magicNumberEv>
	for (uint8_t i=0; i < sizeof(deviceID); i++) {
		buf[i+2] = deviceID[i];
   b51f6:	af0d      	add	r7, sp, #52	; 0x34
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Needs to equal 128
   b51f8:	7068      	strb	r0, [r5, #1]
		buf[i+2] = deviceID[i];
   b51fa:	ab07      	add	r3, sp, #28
   b51fc:	1caa      	adds	r2, r5, #2
   b51fe:	461c      	mov	r4, r3
   b5200:	cc03      	ldmia	r4!, {r0, r1}
   b5202:	42bc      	cmp	r4, r7
   b5204:	6010      	str	r0, [r2, #0]
   b5206:	6051      	str	r1, [r2, #4]
   b5208:	4623      	mov	r3, r4
   b520a:	f102 0208 	add.w	r2, r2, #8
   b520e:	d1f6      	bne.n	b51fe <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x46>
   b5210:	7823      	ldrb	r3, [r4, #0]
   b5212:	7013      	strb	r3, [r2, #0]
	}
	buf[27] = sysStatus.get_sensorType();
   b5214:	f000 fa1c 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5218:	f000 fb16 	bl	b5848 <_ZNK13sysStatusData14get_sensorTypeEv>
   b521c:	76e8      	strb	r0, [r5, #27]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() > 10) ? "a NodeNumber is needed" : "the clock is not set");
   b521e:	f000 fa17 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5222:	f000 fb02 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b5226:	4916      	ldr	r1, [pc, #88]	; (b5280 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b5228:	4a16      	ldr	r2, [pc, #88]	; (b5284 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>)
	if (manager.sendtoWait(buf, 28, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b522a:	2401      	movs	r4, #1
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() > 10) ? "a NodeNumber is needed" : "the clock is not set");
   b522c:	280a      	cmp	r0, #10
   b522e:	bf88      	it	hi
   b5230:	460a      	movhi	r2, r1
   b5232:	4915      	ldr	r1, [pc, #84]	; (b5288 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>)
   b5234:	4815      	ldr	r0, [pc, #84]	; (b528c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b5236:	f7ff f815 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 28, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b523a:	4910      	ldr	r1, [pc, #64]	; (b527c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
   b523c:	4814      	ldr	r0, [pc, #80]	; (b5290 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd8>)
   b523e:	9400      	str	r4, [sp, #0]
   b5240:	2300      	movs	r3, #0
   b5242:	221c      	movs	r2, #28
   b5244:	f002 f878 	bl	b7338 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5248:	4605      	mov	r5, r0
   b524a:	b950      	cbnz	r0, b5262 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xaa>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Join request sent to gateway successfully");
   b524c:	4911      	ldr	r1, [pc, #68]	; (b5294 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xdc>)
   b524e:	480f      	ldr	r0, [pc, #60]	; (b528c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b5250:	f7ff f808 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5254:	4630      	mov	r0, r6
   b5256:	4629      	mov	r1, r5
   b5258:	f006 f9d5 	bl	bb606 <digitalWrite>
		return true;
   b525c:	4620      	mov	r0, r4
	else {
		Log.info("Join request to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b525e:	b00f      	add	sp, #60	; 0x3c
   b5260:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("Join request to Gateway failed");
   b5262:	490d      	ldr	r1, [pc, #52]	; (b5298 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe0>)
   b5264:	4809      	ldr	r0, [pc, #36]	; (b528c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b5266:	f7fe fffd 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b526a:	4630      	mov	r0, r6
   b526c:	2100      	movs	r1, #0
   b526e:	f006 f9ca 	bl	bb606 <digitalWrite>
		return false;
   b5272:	2000      	movs	r0, #0
   b5274:	e7f3      	b.n	b525e <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xa6>
   b5276:	bf00      	nop
   b5278:	000bdfa8 	.word	0x000bdfa8
   b527c:	2003dfd8 	.word	0x2003dfd8
   b5280:	000bdcc6 	.word	0x000bdcc6
   b5284:	000bdcdd 	.word	0x000bdcdd
   b5288:	000bdcf2 	.word	0x000bdcf2
   b528c:	2003e658 	.word	0x2003e658
   b5290:	2003e204 	.word	0x2003e204
   b5294:	000bdd12 	.word	0x000bdd12
   b5298:	000bdd3c 	.word	0x000bdd3c

000b529c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b529c:	b510      	push	{r4, lr}

	Log.info("In receive Join Acknowledge");
   b529e:	4914      	ldr	r1, [pc, #80]	; (b52f0 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x54>)
   b52a0:	4814      	ldr	r0, [pc, #80]	; (b52f4 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x58>)
   b52a2:	4c15      	ldr	r4, [pc, #84]	; (b52f8 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x5c>)
   b52a4:	f7fe ffde 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>

	if (sysStatus.get_nodeNumber() > 10) sysStatus.set_nodeNumber(buf[8]);
   b52a8:	f000 f9d2 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b52ac:	f000 fabd 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b52b0:	280a      	cmp	r0, #10
   b52b2:	d904      	bls.n	b52be <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x22>
   b52b4:	f000 f9cc 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b52b8:	7a21      	ldrb	r1, [r4, #8]
   b52ba:	f000 fafc 	bl	b58b6 <_ZN13sysStatusData14set_nodeNumberEh>
	Log.info("Join request acknowledged and node ID set to %d", sysStatus.get_nodeNumber());
   b52be:	f000 f9c7 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b52c2:	f000 fab2 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b52c6:	490d      	ldr	r1, [pc, #52]	; (b52fc <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x60>)
   b52c8:	4602      	mov	r2, r0
   b52ca:	480a      	ldr	r0, [pc, #40]	; (b52f4 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x58>)
   b52cc:	f7fe ffca 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());
   b52d0:	f000 f9be 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b52d4:	f000 faa9 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b52d8:	4601      	mov	r1, r0
   b52da:	4809      	ldr	r0, [pc, #36]	; (b5300 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x64>)
   b52dc:	f001 fd93 	bl	b6e06 <_ZN10RHDatagram14setThisAddressEh>
	sysStatus.set_sensorType(buf[9]);
   b52e0:	f000 f9b6 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b52e4:	7a61      	ldrb	r1, [r4, #9]
   b52e6:	f000 fb04 	bl	b58f2 <_ZN13sysStatusData14set_sensorTypeEh>
	return true;
}
   b52ea:	2001      	movs	r0, #1
   b52ec:	bd10      	pop	{r4, pc}
   b52ee:	bf00      	nop
   b52f0:	000bdd5b 	.word	0x000bdd5b
   b52f4:	2003e658 	.word	0x2003e658
   b52f8:	2003dfd8 	.word	0x2003dfd8
   b52fc:	000bdd77 	.word	0x000bdd77
   b5300:	2003e208 	.word	0x2003e208

000b5304 <_ZN14LoRA_Functions22composeAlertReportNodeEv>:

bool LoRA_Functions::composeAlertReportNode() {
	digitalWrite(BLUE_LED,HIGH);
   b5304:	4b1e      	ldr	r3, [pc, #120]	; (b5380 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x7c>)
bool LoRA_Functions::composeAlertReportNode() {
   b5306:	b537      	push	{r0, r1, r2, r4, r5, lr}
	digitalWrite(BLUE_LED,HIGH);
   b5308:	881d      	ldrh	r5, [r3, #0]

	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic Number
   b530a:	4c1e      	ldr	r4, [pc, #120]	; (b5384 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x80>)
	digitalWrite(BLUE_LED,HIGH);
   b530c:	2101      	movs	r1, #1
   b530e:	4628      	mov	r0, r5
   b5310:	f006 f979 	bl	bb606 <digitalWrite>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic Number
   b5314:	f000 f99c 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5318:	f000 fb1b 	bl	b5952 <_ZNK13sysStatusData15get_magicNumberEv>
   b531c:	0a00      	lsrs	r0, r0, #8
   b531e:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					
   b5320:	f000 f996 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5324:	f000 fb15 	bl	b5952 <_ZNK13sysStatusData15get_magicNumberEv>
   b5328:	7060      	strb	r0, [r4, #1]
	buf[2] = sysStatus.get_alertCodeNode();   						// Node's Alert Code
   b532a:	f000 f991 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b532e:	f000 fa86 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>


	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	if (manager.sendtoWait(buf, 3, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b5332:	2305      	movs	r3, #5
	buf[2] = sysStatus.get_alertCodeNode();   						// Node's Alert Code
   b5334:	70a0      	strb	r0, [r4, #2]
	if (manager.sendtoWait(buf, 3, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b5336:	4621      	mov	r1, r4
   b5338:	9300      	str	r3, [sp, #0]
   b533a:	4813      	ldr	r0, [pc, #76]	; (b5388 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x84>)
   b533c:	2300      	movs	r3, #0
   b533e:	2203      	movs	r2, #3
   b5340:	f001 fffa 	bl	b7338 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5344:	4604      	mov	r4, r0
   b5346:	b980      	cbnz	r0, b536a <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x66>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Success sending Alert Report number %d to gateway at %d", sysStatus.get_alertCodeNode(), GATEWAY_ADDRESS);
   b5348:	f000 f982 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b534c:	f000 fa77 	bl	b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>
   b5350:	490e      	ldr	r1, [pc, #56]	; (b538c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x88>)
   b5352:	4602      	mov	r2, r0
   b5354:	4623      	mov	r3, r4
   b5356:	480e      	ldr	r0, [pc, #56]	; (b5390 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x8c>)
   b5358:	f7fe ff84 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b535c:	4628      	mov	r0, r5
   b535e:	4621      	mov	r1, r4
   b5360:	f006 f951 	bl	bb606 <digitalWrite>
		return true;
   b5364:	2001      	movs	r0, #1
	else {
		Log.info("Node - Alert Report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b5366:	b003      	add	sp, #12
   b5368:	bd30      	pop	{r4, r5, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b536a:	490a      	ldr	r1, [pc, #40]	; (b5394 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x90>)
   b536c:	4808      	ldr	r0, [pc, #32]	; (b5390 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x8c>)
   b536e:	f7fe ff79 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5372:	4628      	mov	r0, r5
   b5374:	2100      	movs	r1, #0
   b5376:	f006 f946 	bl	bb606 <digitalWrite>
		return false;
   b537a:	2000      	movs	r0, #0
   b537c:	e7f3      	b.n	b5366 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x62>
   b537e:	bf00      	nop
   b5380:	000bdfa8 	.word	0x000bdfa8
   b5384:	2003dfd8 	.word	0x2003dfd8
   b5388:	2003e204 	.word	0x2003e204
   b538c:	000bdda7 	.word	0x000bdda7
   b5390:	2003e658 	.word	0x2003e658
   b5394:	000bdddf 	.word	0x000bdddf

000b5398 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {
   b5398:	b508      	push	{r3, lr}

	sysStatus.set_alertCodeNode(buf[2]);
   b539a:	f000 f959 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b539e:	4b05      	ldr	r3, [pc, #20]	; (b53b4 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x1c>)
   b53a0:	7899      	ldrb	r1, [r3, #2]
   b53a2:	f000 faa0 	bl	b58e6 <_ZN13sysStatusData17set_alertCodeNodeEh>
	Log.info("Alert report acknowledged");
   b53a6:	4904      	ldr	r1, [pc, #16]	; (b53b8 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x20>)
   b53a8:	4804      	ldr	r0, [pc, #16]	; (b53bc <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x24>)
   b53aa:	f7fe ff5b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
	return true;
}
   b53ae:	2001      	movs	r0, #1
   b53b0:	bd08      	pop	{r3, pc}
   b53b2:	bf00      	nop
   b53b4:	2003dfd8 	.word	0x2003dfd8
   b53b8:	000bde0a 	.word	0x000bde0a
   b53bc:	2003e658 	.word	0x2003e658

000b53c0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53c2:	b08d      	sub	sp, #52	; 0x34
	uint8_t len = sizeof(buf);
   b53c4:	23f9      	movs	r3, #249	; 0xf9
   b53c6:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b53ca:	f10d 031f 	add.w	r3, sp, #31
   b53ce:	9303      	str	r3, [sp, #12]
   b53d0:	f10d 031e 	add.w	r3, sp, #30
   b53d4:	9302      	str	r3, [sp, #8]
   b53d6:	4e3d      	ldr	r6, [pc, #244]	; (b54cc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x10c>)
   b53d8:	483d      	ldr	r0, [pc, #244]	; (b54d0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x110>)
   b53da:	f10d 031d 	add.w	r3, sp, #29
   b53de:	9301      	str	r3, [sp, #4]
   b53e0:	ab07      	add	r3, sp, #28
   b53e2:	9300      	str	r3, [sp, #0]
   b53e4:	f10d 021a 	add.w	r2, sp, #26
   b53e8:	f10d 031b 	add.w	r3, sp, #27
   b53ec:	4631      	mov	r1, r6
   b53ee:	f001 ffd7 	bl	b73a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b53f2:	4604      	mov	r4, r0
   b53f4:	b918      	cbnz	r0, b53fe <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x3e>
	return false;
   b53f6:	2400      	movs	r4, #0
}
   b53f8:	4620      	mov	r0, r4
   b53fa:	b00d      	add	sp, #52	; 0x34
   b53fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[len] = 0;
   b53fe:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b5402:	2700      	movs	r7, #0
   b5404:	54f7      	strb	r7, [r6, r3]
		if ((buf[0] << 8 | buf[1]) != sysStatus.get_magicNumber()) {
   b5406:	8835      	ldrh	r5, [r6, #0]
   b5408:	f000 f922 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b540c:	f000 faa1 	bl	b5952 <_ZNK13sysStatusData15get_magicNumberEv>
   b5410:	ba6d      	rev16	r5, r5
   b5412:	b2ad      	uxth	r5, r5
   b5414:	42a8      	cmp	r0, r5
   b5416:	d004      	beq.n	b5422 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x62>
			Log.info("Magic Number mismatch - ignoring message");
   b5418:	492e      	ldr	r1, [pc, #184]	; (b54d4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x114>)
   b541a:	482f      	ldr	r0, [pc, #188]	; (b54d8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x118>)
   b541c:	f7fe ff22 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b5420:	e7e9      	b.n	b53f6 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
		lora_state = (LoRA_State)messageFlag;
   b5422:	4d2e      	ldr	r5, [pc, #184]	; (b54dc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x11c>)
   b5424:	f89d 301e 	ldrb.w	r3, [sp, #30]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5428:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b542c:	482c      	ldr	r0, [pc, #176]	; (b54e0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x120>)
		lora_state = (LoRA_State)messageFlag;
   b542e:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5430:	9205      	str	r2, [sp, #20]
   b5432:	f001 fd66 	bl	b6f02 <_ZN15RHGenericDriver8lastRssiEv>
   b5436:	492b      	ldr	r1, [pc, #172]	; (b54e4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x124>)
   b5438:	9a05      	ldr	r2, [sp, #20]
   b543a:	4603      	mov	r3, r0
   b543c:	7828      	ldrb	r0, [r5, #0]
   b543e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b5442:	9100      	str	r1, [sp, #0]
   b5444:	4824      	ldr	r0, [pc, #144]	; (b54d8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x118>)
   b5446:	4928      	ldr	r1, [pc, #160]	; (b54e8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x128>)
   b5448:	f7fe ff0c 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[2] << 24) | (buf[3] << 16) | (buf[4] << 8) | buf[5]));  // Set time based on response from gateway
   b544c:	f8d6 0002 	ldr.w	r0, [r6, #2]
   b5450:	ba00      	rev	r0, r0
   b5452:	17c1      	asrs	r1, r0, #31
   b5454:	f005 fdba 	bl	bafcc <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[6] << 8 | buf[7]));			// Frequency of reporting set by Gateway
   b5458:	f000 f8fa 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b545c:	88f1      	ldrh	r1, [r6, #6]
   b545e:	ba49      	rev16	r1, r1
   b5460:	b289      	uxth	r1, r1
   b5462:	f000 faae 	bl	b59c2 <_ZN13sysStatusData20set_frequencyMinutesEt>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b5466:	f005 feca 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b546a:	17c3      	asrs	r3, r0, #31
   b546c:	4602      	mov	r2, r0
   b546e:	a808      	add	r0, sp, #32
   b5470:	f005 fdc0 	bl	baff4 <_ZN9TimeClass7timeStrEx>
	const char * c_str() const { return buffer; }
   b5474:	9a08      	ldr	r2, [sp, #32]
   b5476:	9205      	str	r2, [sp, #20]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b5478:	f000 f8ea 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b547c:	f000 fa6e 	bl	b595c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5480:	9a05      	ldr	r2, [sp, #20]
   b5482:	491a      	ldr	r1, [pc, #104]	; (b54ec <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x12c>)
   b5484:	4603      	mov	r3, r0
   b5486:	4814      	ldr	r0, [pc, #80]	; (b54d8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x118>)
   b5488:	f7fe feec 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b548c:	a808      	add	r0, sp, #32
   b548e:	f005 fba9 	bl	babe4 <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b5492:	782b      	ldrb	r3, [r5, #0]
   b5494:	2b04      	cmp	r3, #4
   b5496:	d011      	beq.n	b54bc <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xfc>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b5498:	782b      	ldrb	r3, [r5, #0]
   b549a:	2b02      	cmp	r3, #2
   b549c:	d105      	bne.n	b54aa <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xea>
   b549e:	f7ff fc73 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b54a2:	f7ff fefb 	bl	b529c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b54a6:	2800      	cmp	r0, #0
   b54a8:	d1a6      	bne.n	b53f8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b54aa:	782b      	ldrb	r3, [r5, #0]
   b54ac:	2b06      	cmp	r3, #6
   b54ae:	d1a2      	bne.n	b53f6 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
   b54b0:	f7ff fc6a 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b54b4:	f7ff ff70 	bl	b5398 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>
   b54b8:	4604      	mov	r4, r0
   b54ba:	e79d      	b.n	b53f8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b54bc:	f7ff fc64 	bl	b4d88 <_ZN14LoRA_Functions8instanceEv>
   b54c0:	f7ff fe2a 	bl	b5118 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
   b54c4:	2800      	cmp	r0, #0
   b54c6:	d0e7      	beq.n	b5498 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xd8>
   b54c8:	e796      	b.n	b53f8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
   b54ca:	bf00      	nop
   b54cc:	2003dfd8 	.word	0x2003dfd8
   b54d0:	2003e204 	.word	0x2003e204
   b54d4:	000bde24 	.word	0x000bde24
   b54d8:	2003e658 	.word	0x2003e658
   b54dc:	2003dfd0 	.word	0x2003dfd0
   b54e0:	2003e0d4 	.word	0x2003e0d4
   b54e4:	2003de10 	.word	0x2003de10
   b54e8:	000bde4d 	.word	0x000bde4d
   b54ec:	000bde7f 	.word	0x000bde7f

000b54f0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b54f0:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b54f2:	4a08      	ldr	r2, [pc, #32]	; (b5514 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b54f4:	4c08      	ldr	r4, [pc, #32]	; (b5518 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b54f6:	4909      	ldr	r1, [pc, #36]	; (b551c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b54f8:	7812      	ldrb	r2, [r2, #0]
   b54fa:	7809      	ldrb	r1, [r1, #0]
   b54fc:	4b08      	ldr	r3, [pc, #32]	; (b5520 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b54fe:	4620      	mov	r0, r4
   b5500:	f002 fc10 	bl	b7d24 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5504:	4621      	mov	r1, r4
   b5506:	4807      	ldr	r0, [pc, #28]	; (b5524 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b5508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b550c:	2200      	movs	r2, #0
   b550e:	f001 bf09 	b.w	b7324 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b5512:	bf00      	nop
   b5514:	000bdfb2 	.word	0x000bdfb2
   b5518:	2003e0d4 	.word	0x2003e0d4
   b551c:	000bdfb0 	.word	0x000bdfb0
   b5520:	2003e3f0 	.word	0x2003e3f0
   b5524:	2003e204 	.word	0x2003e204

000b5528 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b5528:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b552a:	4b04      	ldr	r3, [pc, #16]	; (b553c <_ZN17currentStatusDataD1Ev+0x14>)
   b552c:	6003      	str	r3, [r0, #0]
   b552e:	4604      	mov	r4, r0
            if (handle_) {
   b5530:	6840      	ldr	r0, [r0, #4]
   b5532:	b108      	cbz	r0, b5538 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5534:	f002 ff88 	bl	b8448 <os_mutex_recursive_destroy>
}
   b5538:	4620      	mov	r0, r4
   b553a:	bd10      	pop	{r4, pc}
   b553c:	000be66c 	.word	0x000be66c

000b5540 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b5540:	b510      	push	{r4, lr}
   b5542:	4604      	mov	r4, r0
}
   b5544:	f7ff fff0 	bl	b5528 <_ZN17currentStatusDataD1Ev>
   b5548:	4620      	mov	r0, r4
   b554a:	2170      	movs	r1, #112	; 0x70
   b554c:	f7fe fda7 	bl	b409e <_ZdlPvj>
   b5550:	4620      	mov	r0, r4
   b5552:	bd10      	pop	{r4, pc}

000b5554 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b5554:	b510      	push	{r4, lr}
   b5556:	4b03      	ldr	r3, [pc, #12]	; (b5564 <_ZN8MB85RC64D1Ev+0x10>)
   b5558:	6003      	str	r3, [r0, #0]
   b555a:	4604      	mov	r4, r0
   b555c:	f001 fb26 	bl	b6bac <_ZN6MB85RCD1Ev>
   b5560:	4620      	mov	r0, r4
   b5562:	bd10      	pop	{r4, pc}
   b5564:	000bdf08 	.word	0x000bdf08

000b5568 <_ZN8MB85RC64D0Ev>:
   b5568:	b510      	push	{r4, lr}
   b556a:	4604      	mov	r4, r0
   b556c:	f7ff fff2 	bl	b5554 <_ZN8MB85RC64D1Ev>
   b5570:	4620      	mov	r0, r4
   b5572:	2110      	movs	r1, #16
   b5574:	f7fe fd93 	bl	b409e <_ZdlPvj>
   b5578:	4620      	mov	r0, r4
   b557a:	bd10      	pop	{r4, pc}

000b557c <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b557c:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b557e:	4b04      	ldr	r3, [pc, #16]	; (b5590 <_ZN13sysStatusDataD1Ev+0x14>)
   b5580:	6003      	str	r3, [r0, #0]
   b5582:	4604      	mov	r4, r0
            if (handle_) {
   b5584:	6840      	ldr	r0, [r0, #4]
   b5586:	b108      	cbz	r0, b558c <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5588:	f002 ff5e 	bl	b8448 <os_mutex_recursive_destroy>
}
   b558c:	4620      	mov	r0, r4
   b558e:	bd10      	pop	{r4, pc}
   b5590:	000be66c 	.word	0x000be66c

000b5594 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5594:	b510      	push	{r4, lr}
   b5596:	4604      	mov	r4, r0
}
   b5598:	f7ff fff0 	bl	b557c <_ZN13sysStatusDataD1Ev>
   b559c:	4620      	mov	r0, r4
   b559e:	2160      	movs	r1, #96	; 0x60
   b55a0:	f7fe fd7d 	bl	b409e <_ZdlPvj>
   b55a4:	4620      	mov	r0, r4
   b55a6:	bd10      	pop	{r4, pc}

000b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b55a8:	b510      	push	{r4, lr}
            if (!handle_) {
   b55aa:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b55ac:	4604      	mov	r4, r0
            if (!handle_) {
   b55ae:	b90b      	cbnz	r3, b55b4 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b55b0:	f002 ff42 	bl	b8438 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b55b4:	6820      	ldr	r0, [r4, #0]
        }
   b55b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b55ba:	f002 bf4d 	b.w	b8458 <os_mutex_recursive_lock>

000b55be <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b55be:	b538      	push	{r3, r4, r5, lr}
   b55c0:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b55c2:	3004      	adds	r0, #4
   b55c4:	f7ff fff0 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b55c8:	6a20      	ldr	r0, [r4, #32]
   b55ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b55cc:	6803      	ldr	r3, [r0, #0]
   b55ce:	68dd      	ldr	r5, [r3, #12]
   b55d0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b55d4:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b55d6:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b55d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b55dc:	f002 bf44 	b.w	b8468 <os_mutex_recursive_unlock>

000b55e0 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b55e0:	b538      	push	{r3, r4, r5, lr}
   b55e2:	4604      	mov	r4, r0
   b55e4:	3004      	adds	r0, #4
   b55e6:	f7ff ffdf 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b55ea:	6a20      	ldr	r0, [r4, #32]
   b55ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b55ee:	6803      	ldr	r3, [r0, #0]
   b55f0:	689d      	ldr	r5, [r3, #8]
   b55f2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b55f6:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b55f8:	68a2      	ldr	r2, [r4, #8]
   b55fa:	6823      	ldr	r3, [r4, #0]
   b55fc:	88d1      	ldrh	r1, [r2, #6]
   b55fe:	695b      	ldr	r3, [r3, #20]
   b5600:	4620      	mov	r0, r4
   b5602:	4798      	blx	r3
   b5604:	b918      	cbnz	r0, b560e <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5606:	6823      	ldr	r3, [r4, #0]
   b5608:	4620      	mov	r0, r4
   b560a:	699b      	ldr	r3, [r3, #24]
   b560c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b560e:	6860      	ldr	r0, [r4, #4]
   b5610:	f002 ff2a 	bl	b8468 <os_mutex_recursive_unlock>
        }
   b5614:	2001      	movs	r0, #1
   b5616:	bd38      	pop	{r3, r4, r5, pc}

000b5618 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5618:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b561c:	6081      	str	r1, [r0, #8]
   b561e:	4909      	ldr	r1, [pc, #36]	; (b5644 <_ZN13sysStatusDataC1Ev+0x2c>)
   b5620:	f04f 0c38 	mov.w	ip, #56	; 0x38
   b5624:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b5628:	2101      	movs	r1, #1
   b562a:	8281      	strh	r1, [r0, #20]
   b562c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5630:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5632:	4905      	ldr	r1, [pc, #20]	; (b5648 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b5634:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5636:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b563a:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b563c:	6182      	str	r2, [r0, #24]
   b563e:	4a03      	ldr	r2, [pc, #12]	; (b564c <_ZN13sysStatusDataC1Ev+0x34>)
   b5640:	6002      	str	r2, [r0, #0]
};
   b5642:	4770      	bx	lr
   b5644:	20a99e75 	.word	0x20a99e75
   b5648:	2003e3bc 	.word	0x2003e3bc
   b564c:	000bdf24 	.word	0x000bdf24

000b5650 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5650:	b510      	push	{r4, lr}
    if (!_instance) {
   b5652:	4c06      	ldr	r4, [pc, #24]	; (b566c <_ZN13sysStatusData8instanceEv+0x1c>)
   b5654:	6823      	ldr	r3, [r4, #0]
   b5656:	b93b      	cbnz	r3, b5668 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5658:	2060      	movs	r0, #96	; 0x60
   b565a:	f7fe fd1c 	bl	b4096 <_Znwj>
   b565e:	4603      	mov	r3, r0
   b5660:	b108      	cbz	r0, b5666 <_ZN13sysStatusData8instanceEv+0x16>
   b5662:	f7ff ffd9 	bl	b5618 <_ZN13sysStatusDataC1Ev>
   b5666:	6023      	str	r3, [r4, #0]
}
   b5668:	6820      	ldr	r0, [r4, #0]
   b566a:	bd10      	pop	{r4, pc}
   b566c:	2003e3b4 	.word	0x2003e3b4

000b5670 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5670:	b510      	push	{r4, lr}
    fram.begin();
   b5672:	6a00      	ldr	r0, [r0, #32]
   b5674:	f001 fab0 	bl	b6bd8 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5678:	f7ff ffea 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b567c:	6803      	ldr	r3, [r0, #0]
}
   b567e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5682:	685b      	ldr	r3, [r3, #4]
   b5684:	4718      	bx	r3

000b5686 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5686:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b5688:	f7ff ffe2 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b568c:	6803      	ldr	r3, [r0, #0]
}
   b568e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5692:	68db      	ldr	r3, [r3, #12]
   b5694:	2100      	movs	r1, #0
   b5696:	4718      	bx	r3

000b5698 <_ZNK13sysStatusData13get_openHoursEv>:
bool sysStatusData::get_openHours() const {
   b5698:	b538      	push	{r3, r4, r5, lr}
   b569a:	4604      	mov	r4, r0
   b569c:	3004      	adds	r0, #4
   b569e:	f7ff ff83 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b56a2:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b56a4:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b56a6:	3b01      	subs	r3, #1
   b56a8:	2b30      	cmp	r3, #48	; 0x30
                    result = *(const T *)p;
   b56aa:	bf86      	itte	hi
   b56ac:	68a3      	ldrhi	r3, [r4, #8]
   b56ae:	f893 5031 	ldrbhi.w	r5, [r3, #49]	; 0x31
            T result = 0;
   b56b2:	2500      	movls	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b56b4:	f002 fed8 	bl	b8468 <os_mutex_recursive_unlock>
}
   b56b8:	4628      	mov	r0, r5
   b56ba:	bd38      	pop	{r3, r4, r5, pc}

000b56bc <_ZN13sysStatusData13set_openHoursEb>:
void sysStatusData::set_openHours(bool value) {
   b56bc:	b538      	push	{r3, r4, r5, lr}
   b56be:	4604      	mov	r4, r0
   b56c0:	3004      	adds	r0, #4
   b56c2:	460d      	mov	r5, r1
   b56c4:	f7ff ff70 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b56c8:	68e3      	ldr	r3, [r4, #12]
   b56ca:	3b01      	subs	r3, #1
   b56cc:	2b30      	cmp	r3, #48	; 0x30
   b56ce:	d90f      	bls.n	b56f0 <_ZN13sysStatusData13set_openHoursEb+0x34>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b56d0:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b56d2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
   b56d6:	42aa      	cmp	r2, r5
   b56d8:	d00a      	beq.n	b56f0 <_ZN13sysStatusData13set_openHoursEb+0x34>
                        *(T *)p = value;
   b56da:	f883 5031 	strb.w	r5, [r3, #49]	; 0x31
                        savedDataHeader->hash = getHash();
   b56de:	4620      	mov	r0, r4
   b56e0:	68a5      	ldr	r5, [r4, #8]
   b56e2:	f002 fe27 	bl	b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b56e6:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b56e8:	6823      	ldr	r3, [r4, #0]
   b56ea:	4620      	mov	r0, r4
   b56ec:	691b      	ldr	r3, [r3, #16]
   b56ee:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b56f0:	6860      	ldr	r0, [r4, #4]
}
   b56f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b56f6:	f002 beb7 	b.w	b8468 <os_mutex_recursive_unlock>
	...

000b56fc <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b56fc:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b56fe:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5702:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5704:	6182      	str	r2, [r0, #24]
   b5706:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b570a:	6081      	str	r1, [r0, #8]
   b570c:	61c2      	str	r2, [r0, #28]
   b570e:	4907      	ldr	r1, [pc, #28]	; (b572c <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5710:	4a07      	ldr	r2, [pc, #28]	; (b5730 <_ZN17currentStatusDataC1Ev+0x34>)
   b5712:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5714:	f04f 0c48 	mov.w	ip, #72	; 0x48
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5718:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b571a:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b571e:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5720:	2101      	movs	r1, #1
   b5722:	4a04      	ldr	r2, [pc, #16]	; (b5734 <_ZN17currentStatusDataC1Ev+0x38>)
   b5724:	8281      	strh	r1, [r0, #20]
   b5726:	6002      	str	r2, [r0, #0]
};
   b5728:	4770      	bx	lr
   b572a:	bf00      	nop
   b572c:	20a99e74 	.word	0x20a99e74
   b5730:	2003e3bc 	.word	0x2003e3bc
   b5734:	000bdf50 	.word	0x000bdf50

000b5738 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5738:	b510      	push	{r4, lr}
    if (!_instance) {
   b573a:	4c06      	ldr	r4, [pc, #24]	; (b5754 <_ZN17currentStatusData8instanceEv+0x1c>)
   b573c:	6823      	ldr	r3, [r4, #0]
   b573e:	b93b      	cbnz	r3, b5750 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5740:	2070      	movs	r0, #112	; 0x70
   b5742:	f7fe fca8 	bl	b4096 <_Znwj>
   b5746:	4603      	mov	r3, r0
   b5748:	b108      	cbz	r0, b574e <_ZN17currentStatusData8instanceEv+0x16>
   b574a:	f7ff ffd7 	bl	b56fc <_ZN17currentStatusDataC1Ev>
   b574e:	6023      	str	r3, [r4, #0]
}
   b5750:	6820      	ldr	r0, [r4, #0]
   b5752:	bd10      	pop	{r4, pc}
   b5754:	2003e3b8 	.word	0x2003e3b8

000b5758 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5758:	b510      	push	{r4, lr}
    fram.begin();
   b575a:	6a00      	ldr	r0, [r0, #32]
   b575c:	f001 fa3c 	bl	b6bd8 <_ZN6MB85RC5beginEv>
    current.load();
   b5760:	f7ff ffea 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5764:	6803      	ldr	r3, [r0, #0]
}
   b5766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.load();
   b576a:	685b      	ldr	r3, [r3, #4]
   b576c:	4718      	bx	r3

000b576e <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b576e:	b510      	push	{r4, lr}
    current.flush(false);
   b5770:	f7ff ffe2 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5774:	6803      	ldr	r3, [r0, #0]
}
   b5776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b577a:	68db      	ldr	r3, [r3, #12]
   b577c:	2100      	movs	r1, #0
   b577e:	4718      	bx	r3

000b5780 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b5780:	b510      	push	{r4, lr}
   b5782:	4604      	mov	r4, r0
   b5784:	ed2d 8b02 	vpush	{d8}
   b5788:	3004      	adds	r0, #4
   b578a:	f7ff ff0d 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b578e:	68e3      	ldr	r3, [r4, #12]
   b5790:	3b08      	subs	r3, #8
   b5792:	2b17      	cmp	r3, #23
   b5794:	d90c      	bls.n	b57b0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b5796:	68a3      	ldr	r3, [r4, #8]
   b5798:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b579c:	6860      	ldr	r0, [r4, #4]
   b579e:	f002 fe63 	bl	b8468 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b57a2:	eeb0 0a48 	vmov.f32	s0, s16
   b57a6:	eef0 0a68 	vmov.f32	s1, s17
   b57aa:	ecbd 8b02 	vpop	{d8}
   b57ae:	bd10      	pop	{r4, pc}
            T result = 0;
   b57b0:	ed9f 8b01 	vldr	d8, [pc, #4]	; b57b8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b57b4:	e7f2      	b.n	b579c <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b57b6:	bf00      	nop
	...

000b57c0 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b57c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57c2:	4604      	mov	r4, r0
   b57c4:	3004      	adds	r0, #4
   b57c6:	ec57 6b10 	vmov	r6, r7, d0
   b57ca:	f7ff feed 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b57ce:	68e3      	ldr	r3, [r4, #12]
   b57d0:	3b08      	subs	r3, #8
   b57d2:	2b17      	cmp	r3, #23
   b57d4:	d912      	bls.n	b57fc <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b57d6:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b57d8:	4630      	mov	r0, r6
   b57da:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b57de:	4639      	mov	r1, r7
   b57e0:	f007 fcbc 	bl	bd15c <__aeabi_dcmpeq>
   b57e4:	b950      	cbnz	r0, b57fc <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b57e6:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b57ea:	4620      	mov	r0, r4
   b57ec:	68a5      	ldr	r5, [r4, #8]
   b57ee:	f002 fda1 	bl	b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b57f2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b57f4:	6823      	ldr	r3, [r4, #0]
   b57f6:	4620      	mov	r0, r4
   b57f8:	691b      	ldr	r3, [r3, #16]
   b57fa:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b57fc:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b57fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5802:	f002 be31 	b.w	b8468 <os_mutex_recursive_unlock>

000b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b5806:	b538      	push	{r3, r4, r5, lr}
   b5808:	4604      	mov	r4, r0
   b580a:	3004      	adds	r0, #4
   b580c:	460d      	mov	r5, r1
   b580e:	f7ff fecb 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5812:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5814:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5816:	3b01      	subs	r3, #1
   b5818:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b581a:	bf26      	itte	cs
   b581c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b581e:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5820:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5822:	f002 fe21 	bl	b8468 <os_mutex_recursive_unlock>
        }
   b5826:	4628      	mov	r0, r5
   b5828:	bd38      	pop	{r3, r4, r5, pc}

000b582a <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b582a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b582c:	2110      	movs	r1, #16
   b582e:	f7ff ffea 	bl	b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5832:	bd08      	pop	{r3, pc}

000b5834 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b5834:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b5836:	2117      	movs	r1, #23
   b5838:	f7ff ffe5 	bl	b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b583c:	bd08      	pop	{r3, pc}

000b583e <_ZNK13sysStatusData17get_alertCodeNodeEv>:
uint8_t sysStatusData::get_alertCodeNode() const {
   b583e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, alertCodeNode));
   b5840:	2122      	movs	r1, #34	; 0x22
   b5842:	f7ff ffe0 	bl	b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5846:	bd08      	pop	{r3, pc}

000b5848 <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b5848:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b584a:	2130      	movs	r1, #48	; 0x30
   b584c:	f7ff ffdb 	bl	b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5850:	bd08      	pop	{r3, pc}

000b5852 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5852:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5854:	2110      	movs	r1, #16
   b5856:	f7ff ffd6 	bl	b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b585a:	bd08      	pop	{r3, pc}

000b585c <_ZNK17currentStatusData16get_batteryStateEv>:

uint8_t currentStatusData::get_batteryState() const {
   b585c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b585e:	2120      	movs	r1, #32
   b5860:	f7ff ffd1 	bl	b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5864:	bd08      	pop	{r3, pc}

000b5866 <_ZNK17currentStatusData16get_messageCountEv>:

void currentStatusData::set_RSSI(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, RSSI), value);
}

uint8_t currentStatusData::get_messageCount() const {
   b5866:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b5868:	2132      	movs	r1, #50	; 0x32
   b586a:	f7ff ffcc 	bl	b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b586e:	bd08      	pop	{r3, pc}

000b5870 <_ZNK17currentStatusData16get_successCountEv>:

void currentStatusData::set_messageCount(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
}

uint8_t currentStatusData::get_successCount() const {
   b5870:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b5872:	2133      	movs	r1, #51	; 0x33
   b5874:	f7ff ffc7 	bl	b5806 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5878:	bd08      	pop	{r3, pc}

000b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b587a:	b570      	push	{r4, r5, r6, lr}
   b587c:	4604      	mov	r4, r0
   b587e:	3004      	adds	r0, #4
   b5880:	460d      	mov	r5, r1
   b5882:	4616      	mov	r6, r2
   b5884:	f7ff fe90 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5888:	68e3      	ldr	r3, [r4, #12]
   b588a:	3b01      	subs	r3, #1
   b588c:	42ab      	cmp	r3, r5
   b588e:	d30d      	bcc.n	b58ac <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5890:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5892:	5d5a      	ldrb	r2, [r3, r5]
   b5894:	42b2      	cmp	r2, r6
   b5896:	d009      	beq.n	b58ac <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5898:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b589a:	4620      	mov	r0, r4
   b589c:	68a5      	ldr	r5, [r4, #8]
   b589e:	f002 fd49 	bl	b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b58a2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b58a4:	6823      	ldr	r3, [r4, #0]
   b58a6:	4620      	mov	r0, r4
   b58a8:	691b      	ldr	r3, [r3, #16]
   b58aa:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b58ac:	6860      	ldr	r0, [r4, #4]
        }
   b58ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b58b2:	f002 bdd9 	b.w	b8468 <os_mutex_recursive_unlock>

000b58b6 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b58b6:	b508      	push	{r3, lr}
   b58b8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b58ba:	2110      	movs	r1, #16
   b58bc:	f7ff ffdd 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b58c0:	bd08      	pop	{r3, pc}

000b58c2 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b58c2:	b508      	push	{r3, lr}
   b58c4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b58c6:	2112      	movs	r1, #18
   b58c8:	f7ff ffd7 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b58cc:	bd08      	pop	{r3, pc}

000b58ce <_ZN13sysStatusData19set_firmwareReleaseEh>:
void sysStatusData::set_firmwareRelease(uint8_t value) {
   b58ce:	b508      	push	{r3, lr}
   b58d0:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, firmwareRelease), value);
   b58d2:	2116      	movs	r1, #22
   b58d4:	f7ff ffd1 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b58d8:	bd08      	pop	{r3, pc}

000b58da <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b58da:	b508      	push	{r3, lr}
   b58dc:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b58de:	2117      	movs	r1, #23
   b58e0:	f7ff ffcb 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b58e4:	bd08      	pop	{r3, pc}

000b58e6 <_ZN13sysStatusData17set_alertCodeNodeEh>:
void sysStatusData::set_alertCodeNode(uint8_t value) {
   b58e6:	b508      	push	{r3, lr}
   b58e8:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeNode), value);
   b58ea:	2122      	movs	r1, #34	; 0x22
   b58ec:	f7ff ffc5 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b58f0:	bd08      	pop	{r3, pc}

000b58f2 <_ZN13sysStatusData14set_sensorTypeEh>:
void sysStatusData::set_sensorType(uint8_t value) {
   b58f2:	b508      	push	{r3, lr}
   b58f4:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, sensorType), value);
   b58f6:	2130      	movs	r1, #48	; 0x30
   b58f8:	f7ff ffbf 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b58fc:	bd08      	pop	{r3, pc}

000b58fe <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b58fe:	b508      	push	{r3, lr}
   b5900:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b5902:	2110      	movs	r1, #16
   b5904:	f7ff ffb9 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5908:	bd08      	pop	{r3, pc}

000b590a <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b590a:	b508      	push	{r3, lr}
   b590c:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b590e:	2120      	movs	r1, #32
   b5910:	f7ff ffb3 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5914:	bd08      	pop	{r3, pc}

000b5916 <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b5916:	b508      	push	{r3, lr}
   b5918:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b591a:	2132      	movs	r1, #50	; 0x32
   b591c:	f7ff ffad 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b5920:	bd08      	pop	{r3, pc}

000b5922 <_ZN17currentStatusData16set_successCountEh>:

void currentStatusData::set_successCount(uint8_t value) {
   b5922:	b508      	push	{r3, lr}
   b5924:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b5926:	2133      	movs	r1, #51	; 0x33
   b5928:	f7ff ffa7 	bl	b587a <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b592c:	bd08      	pop	{r3, pc}

000b592e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b592e:	b538      	push	{r3, r4, r5, lr}
   b5930:	4604      	mov	r4, r0
   b5932:	3004      	adds	r0, #4
   b5934:	460d      	mov	r5, r1
   b5936:	f7ff fe37 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b593a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b593c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b593e:	3b02      	subs	r3, #2
   b5940:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5942:	bf26      	itte	cs
   b5944:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5946:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5948:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b594a:	f002 fd8d 	bl	b8468 <os_mutex_recursive_unlock>
        }
   b594e:	4628      	mov	r0, r5
   b5950:	bd38      	pop	{r3, r4, r5, pc}

000b5952 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b5952:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b5954:	2114      	movs	r1, #20
   b5956:	f7ff ffea 	bl	b592e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b595a:	bd08      	pop	{r3, pc}

000b595c <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b595c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b595e:	2120      	movs	r1, #32
   b5960:	f7ff ffe5 	bl	b592e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5964:	bd08      	pop	{r3, pc}

000b5966 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b5966:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5968:	2140      	movs	r1, #64	; 0x40
   b596a:	f7ff ffe0 	bl	b592e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b596e:	bd08      	pop	{r3, pc}

000b5970 <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b5970:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b5972:	2142      	movs	r1, #66	; 0x42
   b5974:	f7ff ffdb 	bl	b592e <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5978:	bd08      	pop	{r3, pc}

000b597a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b597a:	b570      	push	{r4, r5, r6, lr}
   b597c:	4604      	mov	r4, r0
   b597e:	3004      	adds	r0, #4
   b5980:	460d      	mov	r5, r1
   b5982:	4616      	mov	r6, r2
   b5984:	f7ff fe10 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5988:	68e3      	ldr	r3, [r4, #12]
   b598a:	3b02      	subs	r3, #2
   b598c:	42ab      	cmp	r3, r5
   b598e:	d30d      	bcc.n	b59ac <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5990:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b5992:	5b5a      	ldrh	r2, [r3, r5]
   b5994:	42b2      	cmp	r2, r6
   b5996:	d009      	beq.n	b59ac <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b5998:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b599a:	4620      	mov	r0, r4
   b599c:	68a5      	ldr	r5, [r4, #8]
   b599e:	f002 fcc9 	bl	b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b59a2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b59a4:	6823      	ldr	r3, [r4, #0]
   b59a6:	4620      	mov	r0, r4
   b59a8:	691b      	ldr	r3, [r3, #16]
   b59aa:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b59ac:	6860      	ldr	r0, [r4, #4]
        }
   b59ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b59b2:	f002 bd59 	b.w	b8468 <os_mutex_recursive_unlock>

000b59b6 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b59b6:	b508      	push	{r3, lr}
   b59b8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b59ba:	2114      	movs	r1, #20
   b59bc:	f7ff ffdd 	bl	b597a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b59c0:	bd08      	pop	{r3, pc}

000b59c2 <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b59c2:	b508      	push	{r3, lr}
   b59c4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b59c6:	2120      	movs	r1, #32
   b59c8:	f7ff ffd7 	bl	b597a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b59cc:	bd08      	pop	{r3, pc}

000b59ce <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b59ce:	b508      	push	{r3, lr}
   b59d0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b59d2:	2140      	movs	r1, #64	; 0x40
   b59d4:	f7ff ffd1 	bl	b597a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b59d8:	bd08      	pop	{r3, pc}

000b59da <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b59da:	b508      	push	{r3, lr}
   b59dc:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b59de:	2142      	movs	r1, #66	; 0x42
   b59e0:	f7ff ffcb 	bl	b597a <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b59e4:	bd08      	pop	{r3, pc}

000b59e6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b59e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59e8:	4604      	mov	r4, r0
   b59ea:	3004      	adds	r0, #4
   b59ec:	460d      	mov	r5, r1
   b59ee:	f7ff fddb 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b59f2:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b59f4:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b59f6:	3b08      	subs	r3, #8
   b59f8:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b59fa:	bf23      	ittte	cs
   b59fc:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b59fe:	1949      	addcs	r1, r1, r5
   b5a00:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b5a04:	2600      	movcc	r6, #0
   b5a06:	bf38      	it	cc
   b5a08:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5a0a:	f002 fd2d 	bl	b8468 <os_mutex_recursive_unlock>
        }
   b5a0e:	4630      	mov	r0, r6
   b5a10:	4639      	mov	r1, r7
   b5a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5a14 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b5a14:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b5a16:	2118      	movs	r1, #24
   b5a18:	f7ff ffe5 	bl	b59e6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5a1c:	bd08      	pop	{r3, pc}

000b5a1e <_ZNK17currentStatusData17get_lastCountTimeEv>:
time_t currentStatusData::get_lastCountTime() const {
   b5a1e:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(CurrentData, lastCountTime));
   b5a20:	2138      	movs	r1, #56	; 0x38
   b5a22:	f7ff ffe0 	bl	b59e6 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5a26:	bd08      	pop	{r3, pc}

000b5a28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a2a:	4604      	mov	r4, r0
   b5a2c:	3004      	adds	r0, #4
   b5a2e:	460d      	mov	r5, r1
   b5a30:	461e      	mov	r6, r3
   b5a32:	4617      	mov	r7, r2
   b5a34:	f7ff fdb8 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5a38:	68e3      	ldr	r3, [r4, #12]
   b5a3a:	3b08      	subs	r3, #8
   b5a3c:	42ab      	cmp	r3, r5
   b5a3e:	d312      	bcc.n	b5a66 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5a40:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b5a42:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b5a44:	5958      	ldr	r0, [r3, r5]
   b5a46:	6851      	ldr	r1, [r2, #4]
   b5a48:	42b1      	cmp	r1, r6
   b5a4a:	bf08      	it	eq
   b5a4c:	42b8      	cmpeq	r0, r7
   b5a4e:	d00a      	beq.n	b5a66 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5a50:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5a52:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5a54:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b5a56:	68a5      	ldr	r5, [r4, #8]
   b5a58:	f002 fc6c 	bl	b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5a5c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5a5e:	6823      	ldr	r3, [r4, #0]
   b5a60:	4620      	mov	r0, r4
   b5a62:	691b      	ldr	r3, [r3, #16]
   b5a64:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5a66:	6860      	ldr	r0, [r4, #4]
        }
   b5a68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b5a6c:	f002 bcfc 	b.w	b8468 <os_mutex_recursive_unlock>

000b5a70 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5a70:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5a72:	2118      	movs	r1, #24
   b5a74:	f7ff ffd8 	bl	b5a28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5a78:	bd08      	pop	{r3, pc}

000b5a7a <_ZN13sysStatusData22set_alertTimestampNodeEx>:
void sysStatusData::set_alertTimestampNode(time_t value) {
   b5a7a:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampNode), value);
   b5a7c:	2128      	movs	r1, #40	; 0x28
   b5a7e:	f7ff ffd3 	bl	b5a28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5a82:	bd08      	pop	{r3, pc}

000b5a84 <_ZN13sysStatusData18loadSystemDefaultsEv>:
void sysStatusData::loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   b5a84:	b508      	push	{r3, lr}
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   b5a86:	491a      	ldr	r1, [pc, #104]	; (b5af0 <_ZN13sysStatusData18loadSystemDefaultsEv+0x6c>)
   b5a88:	481a      	ldr	r0, [pc, #104]	; (b5af4 <_ZN13sysStatusData18loadSystemDefaultsEv+0x70>)
   b5a8a:	f7fe fbeb 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_nodeNumber(11);
   b5a8e:	f7ff fddf 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5a92:	210b      	movs	r1, #11
   b5a94:	f7ff ff0f 	bl	b58b6 <_ZN13sysStatusData14set_nodeNumberEh>
  sysStatus.set_structuresVersion(1);
   b5a98:	f7ff fdda 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5a9c:	2101      	movs	r1, #1
   b5a9e:	f7ff ff10 	bl	b58c2 <_ZN13sysStatusData21set_structuresVersionEh>
  sysStatus.set_magicNumber(27617);
   b5aa2:	f7ff fdd5 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5aa6:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b5aaa:	f7ff ff84 	bl	b59b6 <_ZN13sysStatusData15set_magicNumberEt>
  sysStatus.set_firmwareRelease(1);
   b5aae:	f7ff fdcf 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5ab2:	2101      	movs	r1, #1
   b5ab4:	f7ff ff0b 	bl	b58ce <_ZN13sysStatusData19set_firmwareReleaseEh>
  sysStatus.set_resetCount(0);
   b5ab8:	f7ff fdca 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5abc:	2100      	movs	r1, #0
   b5abe:	f7ff ff0c 	bl	b58da <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_frequencyMinutes(10);
   b5ac2:	f7ff fdc5 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5ac6:	210a      	movs	r1, #10
   b5ac8:	f7ff ff7b 	bl	b59c2 <_ZN13sysStatusData20set_frequencyMinutesEt>
  sysStatus.set_alertCodeNode(0);
   b5acc:	f7ff fdc0 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5ad0:	2100      	movs	r1, #0
   b5ad2:	f7ff ff08 	bl	b58e6 <_ZN13sysStatusData17set_alertCodeNodeEh>
  sysStatus.set_alertTimestampNode(0);
   b5ad6:	f7ff fdbb 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5ada:	2300      	movs	r3, #0
   b5adc:	2200      	movs	r2, #0
   b5ade:	f7ff ffcc 	bl	b5a7a <_ZN13sysStatusData22set_alertTimestampNodeEx>
  sysStatus.set_openHours(true);
   b5ae2:	f7ff fdb5 	bl	b5650 <_ZN13sysStatusData8instanceEv>
}
   b5ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_openHours(true);
   b5aea:	2101      	movs	r1, #1
   b5aec:	f7ff bde6 	b.w	b56bc <_ZN13sysStatusData13set_openHoursEb>
   b5af0:	000bdec4 	.word	0x000bdec4
   b5af4:	2003e658 	.word	0x2003e658

000b5af8 <_ZN13sysStatusData17checkSystemValuesEv>:
void sysStatusData::checkSystemValues() {               // Values out of bounds indicates an initialization error - will reload defaults
   b5af8:	b538      	push	{r3, r4, r5, lr}
   b5afa:	4605      	mov	r5, r0
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b5afc:	f7ff fda8 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5b00:	f7ff ff2c 	bl	b595c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5b04:	b1c8      	cbz	r0, b5b3a <_ZN13sysStatusData17checkSystemValuesEv+0x42>
   b5b06:	f7ff fda3 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5b0a:	f7ff ff27 	bl	b595c <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5b0e:	283c      	cmp	r0, #60	; 0x3c
   b5b10:	bf94      	ite	ls
   b5b12:	2400      	movls	r4, #0
   b5b14:	2401      	movhi	r4, #1
    if (sysStatus.get_sensorType() <= 0 || sysStatus.get_sensorType() >2) reset = true;
   b5b16:	f7ff fd9b 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5b1a:	f7ff fe95 	bl	b5848 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5b1e:	b970      	cbnz	r0, b5b3e <_ZN13sysStatusData17checkSystemValuesEv+0x46>
   b5b20:	2401      	movs	r4, #1
    if (sysStatus.get_nodeNumber() > 11) reset = true;
   b5b22:	f7ff fd95 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5b26:	f7ff fe80 	bl	b582a <_ZNK13sysStatusData14get_nodeNumberEv>
   b5b2a:	280b      	cmp	r0, #11
   b5b2c:	d800      	bhi.n	b5b30 <_ZN13sysStatusData17checkSystemValuesEv+0x38>
    if (reset) sysStatusData::loadSystemDefaults();
   b5b2e:	b16c      	cbz	r4, b5b4c <_ZN13sysStatusData17checkSystemValuesEv+0x54>
   b5b30:	4628      	mov	r0, r5
}
   b5b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (reset) sysStatusData::loadSystemDefaults();
   b5b36:	f7ff bfa5 	b.w	b5a84 <_ZN13sysStatusData18loadSystemDefaultsEv>
    if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) reset = true;
   b5b3a:	2401      	movs	r4, #1
   b5b3c:	e7eb      	b.n	b5b16 <_ZN13sysStatusData17checkSystemValuesEv+0x1e>
    if (sysStatus.get_sensorType() <= 0 || sysStatus.get_sensorType() >2) reset = true;
   b5b3e:	f7ff fd87 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5b42:	f7ff fe81 	bl	b5848 <_ZNK13sysStatusData14get_sensorTypeEv>
   b5b46:	2802      	cmp	r0, #2
   b5b48:	d8ea      	bhi.n	b5b20 <_ZN13sysStatusData17checkSystemValuesEv+0x28>
   b5b4a:	e7ea      	b.n	b5b22 <_ZN13sysStatusData17checkSystemValuesEv+0x2a>
}
   b5b4c:	bd38      	pop	{r3, r4, r5, pc}

000b5b4e <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b5b4e:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b5b50:	2138      	movs	r1, #56	; 0x38
   b5b52:	f7ff ff69 	bl	b5a28 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5b56:	bd08      	pop	{r3, pc}

000b5b58 <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b5b58:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b5b5a:	4914      	ldr	r1, [pc, #80]	; (b5bac <_ZN17currentStatusData15resetEverythingEv+0x54>)
   b5b5c:	4814      	ldr	r0, [pc, #80]	; (b5bb0 <_ZN17currentStatusData15resetEverythingEv+0x58>)
   b5b5e:	f7fe fb81 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b5b62:	f7ff fde9 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5b66:	2100      	movs	r1, #0
   b5b68:	f7ff ff37 	bl	b59da <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5b6c:	f7ff fde4 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5b70:	2100      	movs	r1, #0
   b5b72:	f7ff ff2c 	bl	b59ce <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b5b76:	f7ff fddf 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5b7a:	4604      	mov	r4, r0
   b5b7c:	f005 fb3f 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b5b80:	4602      	mov	r2, r0
   b5b82:	17c3      	asrs	r3, r0, #31
   b5b84:	4620      	mov	r0, r4
   b5b86:	f7ff ffe2 	bl	b5b4e <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b5b8a:	f7ff fd61 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5b8e:	2100      	movs	r1, #0
   b5b90:	f7ff fea3 	bl	b58da <_ZN13sysStatusData14set_resetCountEh>
  current.set_messageCount(0);
   b5b94:	f7ff fdd0 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5b98:	2100      	movs	r1, #0
   b5b9a:	f7ff febc 	bl	b5916 <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b5b9e:	f7ff fdcb 	bl	b5738 <_ZN17currentStatusData8instanceEv>
}
   b5ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  current.set_successCount(0);
   b5ba6:	2100      	movs	r1, #0
   b5ba8:	f7ff bebb 	b.w	b5922 <_ZN17currentStatusData16set_successCountEh>
   b5bac:	000bdedc 	.word	0x000bdedc
   b5bb0:	2003e658 	.word	0x2003e658

000b5bb4 <_GLOBAL__sub_I_fram>:
}
   b5bb4:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);   
   b5bb6:	f005 fd97 	bl	bb6e8 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5bba:	4c05      	ldr	r4, [pc, #20]	; (b5bd0 <_GLOBAL__sub_I_fram+0x1c>)
   b5bbc:	4601      	mov	r1, r0
   b5bbe:	2300      	movs	r3, #0
   b5bc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5bc4:	4620      	mov	r0, r4
   b5bc6:	f000 fffd 	bl	b6bc4 <_ZN6MB85RCC1ER7TwoWireji>
   b5bca:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <_GLOBAL__sub_I_fram+0x20>)
   b5bcc:	6023      	str	r3, [r4, #0]
}
   b5bce:	bd10      	pop	{r4, pc}
   b5bd0:	2003e3bc 	.word	0x2003e3bc
   b5bd4:	000bdf08 	.word	0x000bdf08

000b5bd8 <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b5bd8:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b5bda:	4913      	ldr	r1, [pc, #76]	; (b5c28 <_Z18initializePinModesv+0x50>)
   b5bdc:	4813      	ldr	r0, [pc, #76]	; (b5c2c <_Z18initializePinModesv+0x54>)
   b5bde:	f7fe fb41 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5be2:	2102      	movs	r1, #2
   b5be4:	2004      	movs	r0, #4
   b5be6:	f005 fcfd 	bl	bb5e4 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b5bea:	2100      	movs	r1, #0
   b5bec:	2008      	movs	r0, #8
   b5bee:	f005 fcf9 	bl	bb5e4 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b5bf2:	2101      	movs	r1, #1
   b5bf4:	2007      	movs	r0, #7
   b5bf6:	f005 fcf5 	bl	bb5e4 <pinMode>
    pinMode(INT_PIN, INPUT);
   b5bfa:	2100      	movs	r1, #0
   b5bfc:	2012      	movs	r0, #18
   b5bfe:	f005 fcf1 	bl	bb5e4 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b5c02:	2101      	movs	r1, #1
   b5c04:	2011      	movs	r0, #17
   b5c06:	f005 fced 	bl	bb5e4 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b5c0a:	2101      	movs	r1, #1
   b5c0c:	2010      	movs	r0, #16
   b5c0e:	f005 fce9 	bl	bb5e4 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b5c12:	2100      	movs	r1, #0
   b5c14:	2010      	movs	r0, #16
   b5c16:	f005 fcf6 	bl	bb606 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b5c1a:	2100      	movs	r1, #0
   b5c1c:	2011      	movs	r0, #17
   b5c1e:	f005 fcf2 	bl	bb606 <digitalWrite>
    return true;
}
   b5c22:	2001      	movs	r0, #1
   b5c24:	bd08      	pop	{r3, pc}
   b5c26:	bf00      	nop
   b5c28:	000bdf74 	.word	0x000bdf74
   b5c2c:	2003e658 	.word	0x2003e658

000b5c30 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b5c30:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5c32:	4918      	ldr	r1, [pc, #96]	; (b5c94 <_Z18initializePowerCfgv+0x64>)
   b5c34:	4818      	ldr	r0, [pc, #96]	; (b5c98 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b5c36:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b5c38:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b5c3a:	f7fe fb13 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b5c3e:	4622      	mov	r2, r4
   b5c40:	2100      	movs	r1, #0
   b5c42:	4668      	mov	r0, sp
   b5c44:	f007 fbe4 	bl	bd410 <memset>
   b5c48:	4622      	mov	r2, r4
   b5c4a:	2100      	movs	r1, #0
   b5c4c:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5c50:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b5c54:	f007 fbdc 	bl	bd410 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b5c58:	2100      	movs	r1, #0
   b5c5a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5c5e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5c62:	f002 fe77 	bl	b8954 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b5c66:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b5c6a:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5c6e:	4b0b      	ldr	r3, [pc, #44]	; (b5c9c <_Z18initializePowerCfgv+0x6c>)
   b5c70:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5c72:	f241 0370 	movw	r3, #4208	; 0x1070
   b5c76:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b5c7a:	9b00      	ldr	r3, [sp, #0]
   b5c7c:	2100      	movs	r1, #0
   b5c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b5c82:	4668      	mov	r0, sp
   b5c84:	9300      	str	r3, [sp, #0]
   b5c86:	f002 fe65 	bl	b8954 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b5c8a:	3800      	subs	r0, #0
   b5c8c:	bf18      	it	ne
   b5c8e:	2001      	movne	r0, #1
   b5c90:	b010      	add	sp, #64	; 0x40
   b5c92:	bd10      	pop	{r4, pc}
   b5c94:	000bdf8d 	.word	0x000bdf8d
   b5c98:	2003e658 	.word	0x2003e658
   b5c9c:	03840384 	.word	0x03840384

000b5ca0 <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b5ca0:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b5ca2:	490b      	ldr	r1, [pc, #44]	; (b5cd0 <_Z20setNodeConfigurationv+0x30>)
   b5ca4:	480b      	ldr	r0, [pc, #44]	; (b5cd4 <_Z20setNodeConfigurationv+0x34>)
   b5ca6:	f7fe fadd 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b5caa:	f7ff fcd1 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5cae:	2101      	movs	r1, #1
   b5cb0:	f7ff fe1f 	bl	b58f2 <_ZN13sysStatusData14set_sensorTypeEh>
  // sysStatus.set_deviceID(32148);
  // sysStatus.set_structuresVersion(14);
 sysStatus.set_nodeNumber(11);
   b5cb4:	f7ff fccc 	bl	b5650 <_ZN13sysStatusData8instanceEv>
   b5cb8:	210b      	movs	r1, #11
   b5cba:	f7ff fdfc 	bl	b58b6 <_ZN13sysStatusData14set_nodeNumberEh>
 sysStatus.set_magicNumber(27617);
   b5cbe:	f7ff fcc7 	bl	b5650 <_ZN13sysStatusData8instanceEv>
  // sysStatus.flush(true);
   b5cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 sysStatus.set_magicNumber(27617);
   b5cc6:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b5cca:	f7ff be74 	b.w	b59b6 <_ZN13sysStatusData15set_magicNumberEt>
   b5cce:	bf00      	nop
   b5cd0:	000bdfb6 	.word	0x000bdfb6
   b5cd4:	2003e658 	.word	0x2003e658

000b5cd8 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b5cd8:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5cda:	6803      	ldr	r3, [r0, #0]
   b5cdc:	2b2f      	cmp	r3, #47	; 0x2f
{
   b5cde:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5ce0:	d904      	bls.n	b5cec <nrf_gpio_pin_port_decode+0x14>
   b5ce2:	4a07      	ldr	r2, [pc, #28]	; (b5d00 <nrf_gpio_pin_port_decode+0x28>)
   b5ce4:	4907      	ldr	r1, [pc, #28]	; (b5d04 <nrf_gpio_pin_port_decode+0x2c>)
   b5ce6:	200a      	movs	r0, #10
   b5ce8:	f002 fdb6 	bl	b8858 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b5cec:	6823      	ldr	r3, [r4, #0]
   b5cee:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5cf0:	bf83      	ittte	hi
   b5cf2:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b5cf6:	4804      	ldrhi	r0, [pc, #16]	; (b5d08 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5cf8:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b5cfa:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b5cfe:	bd10      	pop	{r4, pc}
   b5d00:	000b84a9 	.word	0x000b84a9
   b5d04:	000be04b 	.word	0x000be04b
   b5d08:	50000300 	.word	0x50000300

000b5d0c <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b5d0c:	ee07 0a90 	vmov	s15, r0
   b5d10:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5d38 <_Z17tmp36TemperatureCi+0x2c>
   b5d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5d18:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5d1c:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5d3c <_Z17tmp36TemperatureCi+0x30>
   b5d20:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5d24:	eddf 7a06 	vldr	s15, [pc, #24]	; b5d40 <_Z17tmp36TemperatureCi+0x34>
   b5d28:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b5d2c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5d30:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5d34:	4770      	bx	lr
   b5d36:	bf00      	nop
   b5d38:	454e4000 	.word	0x454e4000
   b5d3c:	457ff000 	.word	0x457ff000
   b5d40:	43fa0000 	.word	0x43fa0000

000b5d44 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b5d44:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b5d46:	2101      	movs	r1, #1
   b5d48:	a801      	add	r0, sp, #4
   b5d4a:	f004 fc5a 	bl	ba602 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5d4e:	f7ff fcf3 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5d52:	f7ff fd7e 	bl	b5852 <_ZNK17currentStatusData17get_internalTempCEv>
   b5d56:	f7ff fcef 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5d5a:	f7ff fd7a 	bl	b5852 <_ZNK17currentStatusData17get_internalTempCEv>
   b5d5e:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5d60:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5d62:	d90d      	bls.n	b5d80 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5d64:	f004 fce0 	bl	ba728 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b5d68:	f7ff fce6 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5d6c:	2101      	movs	r1, #1
   b5d6e:	f7ff fdcc 	bl	b590a <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b5d72:	2400      	movs	r4, #0
  PMIC pmic(true);
   b5d74:	a801      	add	r0, sp, #4
   b5d76:	f004 fc53 	bl	ba620 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b5d7a:	4620      	mov	r0, r4
   b5d7c:	b002      	add	sp, #8
   b5d7e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b5d80:	f004 fcb7 	bl	ba6f2 <_ZN4PMIC14enableChargingEv>
    return true;
   b5d84:	2401      	movs	r4, #1
   b5d86:	e7f5      	b.n	b5d74 <_Z16isItSafeToChargev+0x30>

000b5d88 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b5d88:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5d8a:	4d19      	ldr	r5, [pc, #100]	; (b5df0 <_Z17getSignalStrengthv+0x68>)
   b5d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b5d8e:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5d90:	ac0c      	add	r4, sp, #48	; 0x30
   b5d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d98:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5d9c:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b5da0:	4914      	ldr	r1, [pc, #80]	; (b5df4 <_Z17getSignalStrengthv+0x6c>)
   b5da2:	a804      	add	r0, sp, #16
   b5da4:	f002 ff62 	bl	b8c6c <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b5da8:	a804      	add	r0, sp, #16
   b5daa:	f002 ffa2 	bl	b8cf2 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b5dae:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b5db0:	a804      	add	r0, sp, #16
   b5db2:	f002 ffd7 	bl	b8d64 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b5db6:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b5db8:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b5dbc:	f003 f802 	bl	b8dc4 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5dc0:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b5dc2:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5dc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b5dca:	f006 ff07 	bl	bcbdc <__aeabi_f2d>
   b5dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5dd2:	4628      	mov	r0, r5
   b5dd4:	f006 ff02 	bl	bcbdc <__aeabi_f2d>
   b5dd8:	e9cd 0100 	strd	r0, r1, [sp]
   b5ddc:	4a06      	ldr	r2, [pc, #24]	; (b5df8 <_Z17getSignalStrengthv+0x70>)
   b5dde:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b5de2:	4806      	ldr	r0, [pc, #24]	; (b5dfc <_Z17getSignalStrengthv+0x74>)
   b5de4:	2140      	movs	r1, #64	; 0x40
   b5de6:	f002 fe83 	bl	b8af0 <snprintf>
}
   b5dea:	b017      	add	sp, #92	; 0x5c
   b5dec:	bd30      	pop	{r4, r5, pc}
   b5dee:	bf00      	nop
   b5df0:	000be0d0 	.word	0x000be0d0
   b5df4:	2003e614 	.word	0x2003e614
   b5df8:	000be06f 	.word	0x000be06f
   b5dfc:	2003de90 	.word	0x2003de90

000b5e00 <_Z11recordCountv>:


bool recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b5e00:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5e02:	4e4f      	ldr	r6, [pc, #316]	; (b5f40 <_Z11recordCountv+0x140>)
   b5e04:	4c4f      	ldr	r4, [pc, #316]	; (b5f44 <_Z11recordCountv+0x144>)
   b5e06:	7833      	ldrb	r3, [r6, #0]
   b5e08:	f3bf 8f5b 	dmb	ish
   b5e0c:	f013 0f01 	tst.w	r3, #1
   b5e10:	b085      	sub	sp, #20
   b5e12:	d109      	bne.n	b5e28 <_Z11recordCountv+0x28>
   b5e14:	4630      	mov	r0, r6
   b5e16:	f7fe f951 	bl	b40bc <__cxa_guard_acquire>
   b5e1a:	b128      	cbz	r0, b5e28 <_Z11recordCountv+0x28>
   b5e1c:	f002 fb74 	bl	b8508 <HAL_Pin_Map>
   b5e20:	6020      	str	r0, [r4, #0]
   b5e22:	4630      	mov	r0, r6
   b5e24:	f7fe f94f 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5e28:	4b47      	ldr	r3, [pc, #284]	; (b5f48 <_Z11recordCountv+0x148>)
   b5e2a:	881d      	ldrh	r5, [r3, #0]
   b5e2c:	6823      	ldr	r3, [r4, #0]
   b5e2e:	012d      	lsls	r5, r5, #4
   b5e30:	5d5b      	ldrb	r3, [r3, r5]
   b5e32:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5e34:	7833      	ldrb	r3, [r6, #0]
   b5e36:	f3bf 8f5b 	dmb	ish
   b5e3a:	07d9      	lsls	r1, r3, #31
   b5e3c:	d409      	bmi.n	b5e52 <_Z11recordCountv+0x52>
   b5e3e:	4840      	ldr	r0, [pc, #256]	; (b5f40 <_Z11recordCountv+0x140>)
   b5e40:	f7fe f93c 	bl	b40bc <__cxa_guard_acquire>
   b5e44:	b128      	cbz	r0, b5e52 <_Z11recordCountv+0x52>
   b5e46:	f002 fb5f 	bl	b8508 <HAL_Pin_Map>
   b5e4a:	6020      	str	r0, [r4, #0]
   b5e4c:	483c      	ldr	r0, [pc, #240]	; (b5f40 <_Z11recordCountv+0x140>)
   b5e4e:	f7fe f93a 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5e52:	6823      	ldr	r3, [r4, #0]
   b5e54:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5e56:	a803      	add	r0, sp, #12
   b5e58:	785b      	ldrb	r3, [r3, #1]
   b5e5a:	f003 031f 	and.w	r3, r3, #31
   b5e5e:	433b      	orrs	r3, r7
   b5e60:	9303      	str	r3, [sp, #12]
   b5e62:	f7ff ff39 	bl	b5cd8 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b5e66:	9a03      	ldr	r2, [sp, #12]
   b5e68:	2301      	movs	r3, #1
   b5e6a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b5e6c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b5e70:	f7ff fc62 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5e74:	4607      	mov	r7, r0
   b5e76:	f005 f9c2 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b5e7a:	4602      	mov	r2, r0
   b5e7c:	17c3      	asrs	r3, r0, #31
   b5e7e:	4638      	mov	r0, r7
   b5e80:	f7ff fe65 	bl	b5b4e <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b5e84:	f7ff fc58 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5e88:	4607      	mov	r7, r0
   b5e8a:	f7ff fc55 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5e8e:	f7ff fd6a 	bl	b5966 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5e92:	3001      	adds	r0, #1
   b5e94:	b281      	uxth	r1, r0
   b5e96:	4638      	mov	r0, r7
   b5e98:	f7ff fd99 	bl	b59ce <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b5e9c:	f7ff fc4c 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5ea0:	4607      	mov	r7, r0
   b5ea2:	f7ff fc49 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5ea6:	f7ff fd63 	bl	b5970 <_ZNK17currentStatusData14get_dailyCountEv>
   b5eaa:	3001      	adds	r0, #1
   b5eac:	b281      	uxth	r1, r0
   b5eae:	4638      	mov	r0, r7
   b5eb0:	f7ff fd93 	bl	b59da <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b5eb4:	f7ff fc40 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5eb8:	f7ff fd55 	bl	b5966 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5ebc:	9001      	str	r0, [sp, #4]
   b5ebe:	f7ff fc3b 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5ec2:	f7ff fd55 	bl	b5970 <_ZNK17currentStatusData14get_dailyCountEv>
   b5ec6:	9a01      	ldr	r2, [sp, #4]
   b5ec8:	4920      	ldr	r1, [pc, #128]	; (b5f4c <_Z11recordCountv+0x14c>)
   b5eca:	4603      	mov	r3, r0
   b5ecc:	4820      	ldr	r0, [pc, #128]	; (b5f50 <_Z11recordCountv+0x150>)
   b5ece:	f7fe f9c9 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b5ed2:	20c8      	movs	r0, #200	; 0xc8
   b5ed4:	f002 fe5c 	bl	b8b90 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5ed8:	7833      	ldrb	r3, [r6, #0]
   b5eda:	f3bf 8f5b 	dmb	ish
   b5ede:	07da      	lsls	r2, r3, #31
   b5ee0:	d409      	bmi.n	b5ef6 <_Z11recordCountv+0xf6>
   b5ee2:	4817      	ldr	r0, [pc, #92]	; (b5f40 <_Z11recordCountv+0x140>)
   b5ee4:	f7fe f8ea 	bl	b40bc <__cxa_guard_acquire>
   b5ee8:	b128      	cbz	r0, b5ef6 <_Z11recordCountv+0xf6>
   b5eea:	f002 fb0d 	bl	b8508 <HAL_Pin_Map>
   b5eee:	6020      	str	r0, [r4, #0]
   b5ef0:	4813      	ldr	r0, [pc, #76]	; (b5f40 <_Z11recordCountv+0x140>)
   b5ef2:	f7fe f8e8 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5ef6:	6823      	ldr	r3, [r4, #0]
   b5ef8:	5d5b      	ldrb	r3, [r3, r5]
   b5efa:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5efc:	7833      	ldrb	r3, [r6, #0]
   b5efe:	f3bf 8f5b 	dmb	ish
   b5f02:	07db      	lsls	r3, r3, #31
   b5f04:	d409      	bmi.n	b5f1a <_Z11recordCountv+0x11a>
   b5f06:	480e      	ldr	r0, [pc, #56]	; (b5f40 <_Z11recordCountv+0x140>)
   b5f08:	f7fe f8d8 	bl	b40bc <__cxa_guard_acquire>
   b5f0c:	b128      	cbz	r0, b5f1a <_Z11recordCountv+0x11a>
   b5f0e:	f002 fafb 	bl	b8508 <HAL_Pin_Map>
   b5f12:	6020      	str	r0, [r4, #0]
   b5f14:	480a      	ldr	r0, [pc, #40]	; (b5f40 <_Z11recordCountv+0x140>)
   b5f16:	f7fe f8d6 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5f1a:	6823      	ldr	r3, [r4, #0]
   b5f1c:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5f1e:	a803      	add	r0, sp, #12
   b5f20:	786b      	ldrb	r3, [r5, #1]
   b5f22:	f003 031f 	and.w	r3, r3, #31
   b5f26:	433b      	orrs	r3, r7
   b5f28:	9303      	str	r3, [sp, #12]
   b5f2a:	f7ff fed5 	bl	b5cd8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b5f2e:	9b03      	ldr	r3, [sp, #12]
   b5f30:	2201      	movs	r2, #1
   b5f32:	fa02 f303 	lsl.w	r3, r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b5f36:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);

  return true;
   b5f3a:	4610      	mov	r0, r2
   b5f3c:	b005      	add	sp, #20
   b5f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5f40:	2003e3cc 	.word	0x2003e3cc
   b5f44:	2003e3d0 	.word	0x2003e3d0
   b5f48:	000bdfa8 	.word	0x000bdfa8
   b5f4c:	000be088 	.word	0x000be088
   b5f50:	2003e658 	.word	0x2003e658

000b5f54 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b5f54:	b530      	push	{r4, r5, lr}
   b5f56:	b085      	sub	sp, #20
   b5f58:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b5f5a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5f5c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b5f5e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b5f60:	f002 fca2 	bl	b88a8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5f64:	b990      	cbnz	r0, b5f8c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b5f66:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b5f68:	b10c      	cbz	r4, b5f6e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b5f6a:	6923      	ldr	r3, [r4, #16]
   b5f6c:	b923      	cbnz	r3, b5f78 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b5f6e:	4a08      	ldr	r2, [pc, #32]	; (b5f90 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b5f70:	4908      	ldr	r1, [pc, #32]	; (b5f94 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b5f72:	200a      	movs	r0, #10
   b5f74:	f002 fc70 	bl	b8858 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5f78:	230c      	movs	r3, #12
   b5f7a:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b5f7e:	2304      	movs	r3, #4
   b5f80:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5f82:	aa01      	add	r2, sp, #4
   b5f84:	6923      	ldr	r3, [r4, #16]
   b5f86:	2101      	movs	r1, #1
   b5f88:	4620      	mov	r0, r4
   b5f8a:	4798      	blx	r3
}
   b5f8c:	b005      	add	sp, #20
   b5f8e:	bd30      	pop	{r4, r5, pc}
   b5f90:	000b84a9 	.word	0x000b84a9
   b5f94:	000be0a5 	.word	0x000be0a5

000b5f98 <_Z12batteryStatev>:
bool batteryState() {
   b5f98:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b5f9a:	f7ff fbcd 	bl	b5738 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b5f9e:	a901      	add	r1, sp, #4
   b5fa0:	4604      	mov	r4, r0
   b5fa2:	2007      	movs	r0, #7
   b5fa4:	f7ff ffd6 	bl	b5f54 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b5fa8:	1e01      	subs	r1, r0, #0
        return val;
   b5faa:	bfa8      	it	ge
   b5fac:	9901      	ldrge	r1, [sp, #4]
   b5fae:	4620      	mov	r0, r4
   b5fb0:	b2c9      	uxtb	r1, r1
   b5fb2:	f7ff fcaa 	bl	b590a <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b5fb6:	4818      	ldr	r0, [pc, #96]	; (b6018 <_Z12batteryStatev+0x80>)
   b5fb8:	f002 ffce 	bl	b8f58 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b5fbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5fc0:	f002 fde6 	bl	b8b90 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b5fc4:	f7ff fbb8 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5fc8:	a901      	add	r1, sp, #4
   b5fca:	4604      	mov	r4, r0
   b5fcc:	2003      	movs	r0, #3
   b5fce:	f7ff ffc1 	bl	b5f54 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b5fd2:	b9e8      	cbnz	r0, b6010 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b5fd4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b5fd8:	ee07 3a90 	vmov	s15, r3
   b5fdc:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b5fe0:	ee17 0a90 	vmov	r0, s15
   b5fe4:	f006 fdfa 	bl	bcbdc <__aeabi_f2d>
   b5fe8:	ec41 0b10 	vmov	d0, r0, r1
   b5fec:	4620      	mov	r0, r4
   b5fee:	f7ff fbe7 	bl	b57c0 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b5ff2:	f7ff fba1 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b5ff6:	f7ff fbc3 	bl	b5780 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5ffa:	4b08      	ldr	r3, [pc, #32]	; (b601c <_Z12batteryStatev+0x84>)
   b5ffc:	ec51 0b10 	vmov	r0, r1, d0
   b6000:	2200      	movs	r2, #0
   b6002:	f007 f8d3 	bl	bd1ac <__aeabi_dcmpgt>
}
   b6006:	3800      	subs	r0, #0
   b6008:	bf18      	it	ne
   b600a:	2001      	movne	r0, #1
   b600c:	b002      	add	sp, #8
   b600e:	bd10      	pop	{r4, pc}
            return -1.0f;
   b6010:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b6014:	e7e4      	b.n	b5fe0 <_Z12batteryStatev+0x48>
   b6016:	bf00      	nop
   b6018:	2003e3d4 	.word	0x2003e3d4
   b601c:	404e0000 	.word	0x404e0000

000b6020 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b6020:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b6022:	f7ff fb89 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b6026:	4b11      	ldr	r3, [pc, #68]	; (b606c <_Z16takeMeasurementsv+0x4c>)
   b6028:	4604      	mov	r4, r0
   b602a:	8818      	ldrh	r0, [r3, #0]
   b602c:	f005 fb17 	bl	bb65e <analogRead>
   b6030:	f7ff fe6c 	bl	b5d0c <_Z17tmp36TemperatureCi>
   b6034:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b6038:	4620      	mov	r0, r4
   b603a:	edcd 7a01 	vstr	s15, [sp, #4]
   b603e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b6042:	f7ff fc5c 	bl	b58fe <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b6046:	f7ff fb77 	bl	b5738 <_ZN17currentStatusData8instanceEv>
   b604a:	f7ff fc02 	bl	b5852 <_ZNK17currentStatusData17get_internalTempCEv>
   b604e:	4a08      	ldr	r2, [pc, #32]	; (b6070 <_Z16takeMeasurementsv+0x50>)
   b6050:	4603      	mov	r3, r0
   b6052:	2110      	movs	r1, #16
   b6054:	4807      	ldr	r0, [pc, #28]	; (b6074 <_Z16takeMeasurementsv+0x54>)
   b6056:	f002 fd4b 	bl	b8af0 <snprintf>
    batteryState();
   b605a:	f7ff ff9d 	bl	b5f98 <_Z12batteryStatev>
    isItSafeToCharge();
   b605e:	f7ff fe71 	bl	b5d44 <_Z16isItSafeToChargev>
    getSignalStrength();
   b6062:	f7ff fe91 	bl	b5d88 <_Z17getSignalStrengthv>
}
   b6066:	2001      	movs	r0, #1
   b6068:	b002      	add	sp, #8
   b606a:	bd10      	pop	{r4, pc}
   b606c:	000bdfb4 	.word	0x000bdfb4
   b6070:	000be0cb 	.word	0x000be0cb
   b6074:	2003de80 	.word	0x2003de80

000b6078 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b6078:	4801      	ldr	r0, [pc, #4]	; (b6080 <_GLOBAL__sub_I_batteryContext+0x8>)
   b607a:	2100      	movs	r1, #0
   b607c:	f002 bf28 	b.w	b8ed0 <_ZN9FuelGaugeC1Eb>
   b6080:	2003e3d4 	.word	0x2003e3d4

000b6084 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b6084:	4770      	bx	lr

000b6086 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b6086:	b510      	push	{r4, lr}
}
   b6088:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b608a:	4604      	mov	r4, r0
}
   b608c:	f7fe f807 	bl	b409e <_ZdlPvj>
   b6090:	4620      	mov	r0, r4
   b6092:	bd10      	pop	{r4, pc}

000b6094 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b6094:	b510      	push	{r4, lr}
   b6096:	4604      	mov	r4, r0
   b6098:	b08a      	sub	sp, #40	; 0x28
   b609a:	4608      	mov	r0, r1
    attr.flags = 0;
   b609c:	f04f 0c20 	mov.w	ip, #32
   b60a0:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b60a2:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b60a6:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b60aa:	460b      	mov	r3, r1
   b60ac:	aa02      	add	r2, sp, #8
   b60ae:	6821      	ldr	r1, [r4, #0]
   b60b0:	f002 fbe2 	bl	b8878 <log_message_v>
}
   b60b4:	b00a      	add	sp, #40	; 0x28
   b60b6:	bd10      	pop	{r4, pc}

000b60b8 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b60b8:	b40e      	push	{r1, r2, r3}
   b60ba:	b503      	push	{r0, r1, lr}
   b60bc:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b60be:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b60c0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b60c4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b60c6:	f7ff ffe5 	bl	b6094 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b60ca:	b002      	add	sp, #8
   b60cc:	f85d eb04 	ldr.w	lr, [sp], #4
   b60d0:	b003      	add	sp, #12
   b60d2:	4770      	bx	lr

000b60d4 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b60d4:	b40e      	push	{r1, r2, r3}
   b60d6:	b503      	push	{r0, r1, lr}
   b60d8:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b60da:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b60dc:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b60e0:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b60e2:	f7ff ffd7 	bl	b6094 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b60e6:	b002      	add	sp, #8
   b60e8:	f85d eb04 	ldr.w	lr, [sp], #4
   b60ec:	b003      	add	sp, #12
   b60ee:	4770      	bx	lr

000b60f0 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b60f0:	b510      	push	{r4, lr}
   b60f2:	7202      	strb	r2, [r0, #8]
   b60f4:	22ff      	movs	r2, #255	; 0xff
   b60f6:	8142      	strh	r2, [r0, #10]
   b60f8:	2200      	movs	r2, #0
   b60fa:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b60fe:	6142      	str	r2, [r0, #20]
   b6100:	7602      	strb	r2, [r0, #24]
   b6102:	61c2      	str	r2, [r0, #28]
    instance = this;
   b6104:	4a02      	ldr	r2, [pc, #8]	; (b6110 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b6106:	4c03      	ldr	r4, [pc, #12]	; (b6114 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b6108:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b610a:	e9c0 4100 	strd	r4, r1, [r0]
}
   b610e:	bd10      	pop	{r4, pc}
   b6110:	2003e3e0 	.word	0x2003e3e0
   b6114:	000be348 	.word	0x000be348

000b6118 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b6118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b611c:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b6120:	4604      	mov	r4, r0
   b6122:	4689      	mov	r9, r1
   b6124:	4616      	mov	r6, r2
   b6126:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b6128:	f1b8 0f00 	cmp.w	r8, #0
   b612c:	d002      	beq.n	b6134 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b612e:	6840      	ldr	r0, [r0, #4]
   b6130:	f002 ffac 	bl	b908c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6134:	7a21      	ldrb	r1, [r4, #8]
   b6136:	6860      	ldr	r0, [r4, #4]
   b6138:	f002 ff85 	bl	b9046 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b613c:	6860      	ldr	r0, [r4, #4]
   b613e:	6803      	ldr	r3, [r0, #0]
   b6140:	4649      	mov	r1, r9
   b6142:	689b      	ldr	r3, [r3, #8]
   b6144:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b6146:	6860      	ldr	r0, [r4, #4]
   b6148:	2100      	movs	r1, #0
   b614a:	f002 ff9b 	bl	b9084 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b614e:	4605      	mov	r5, r0
   b6150:	bb00      	cbnz	r0, b6194 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6152:	2301      	movs	r3, #1
   b6154:	7a21      	ldrb	r1, [r4, #8]
   b6156:	6860      	ldr	r0, [r4, #4]
   b6158:	463a      	mov	r2, r7
   b615a:	f002 ff62 	bl	b9022 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b615e:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b6160:	4603      	mov	r3, r0
        if (count == num) {
   b6162:	d109      	bne.n	b6178 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b6164:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b6166:	42be      	cmp	r6, r7
   b6168:	d01c      	beq.n	b61a4 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b616a:	6860      	ldr	r0, [r4, #4]
   b616c:	6803      	ldr	r3, [r0, #0]
   b616e:	695b      	ldr	r3, [r3, #20]
   b6170:	4798      	blx	r3
   b6172:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b6176:	e7f6      	b.n	b6166 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b6178:	490b      	ldr	r1, [pc, #44]	; (b61a8 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b617a:	480c      	ldr	r0, [pc, #48]	; (b61ac <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b617c:	464a      	mov	r2, r9
   b617e:	f7ff ff9b 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b6182:	f1b8 0f00 	cmp.w	r8, #0
   b6186:	d002      	beq.n	b618e <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b6188:	6860      	ldr	r0, [r4, #4]
   b618a:	f002 ff88 	bl	b909e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b618e:	4628      	mov	r0, r5
   b6190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b6194:	4603      	mov	r3, r0
   b6196:	4906      	ldr	r1, [pc, #24]	; (b61b0 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b6198:	4804      	ldr	r0, [pc, #16]	; (b61ac <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b619a:	464a      	mov	r2, r9
   b619c:	f7ff ff8c 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b61a0:	2500      	movs	r5, #0
   b61a2:	e7ee      	b.n	b6182 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b61a4:	2501      	movs	r5, #1
   b61a6:	e7ec      	b.n	b6182 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b61a8:	000be0f8 	.word	0x000be0f8
   b61ac:	2003e3dc 	.word	0x2003e3dc
   b61b0:	000be11d 	.word	0x000be11d

000b61b4 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b61b4:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b61b6:	9300      	str	r3, [sp, #0]
   b61b8:	2301      	movs	r3, #1
   b61ba:	f7ff ffad 	bl	b6118 <_ZN6AB180513readRegistersEhPhjb>
}
   b61be:	b003      	add	sp, #12
   b61c0:	f85d fb04 	ldr.w	pc, [sp], #4

000b61c4 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b61c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b61c6:	8943      	ldrh	r3, [r0, #10]
   b61c8:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b61ca:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b61cc:	d010      	beq.n	b61f0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b61ce:	4e19      	ldr	r6, [pc, #100]	; (b6234 <_ZN6AB180510detectChipEv+0x70>)
   b61d0:	4d19      	ldr	r5, [pc, #100]	; (b6238 <_ZN6AB180510detectChipEv+0x74>)
   b61d2:	f002 f971 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b61d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b61da:	d209      	bcs.n	b61f0 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b61dc:	8960      	ldrh	r0, [r4, #10]
   b61de:	f005 fa2b 	bl	bb638 <digitalRead>
   b61e2:	2801      	cmp	r0, #1
   b61e4:	d004      	beq.n	b61f0 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b61e6:	4631      	mov	r1, r6
   b61e8:	4628      	mov	r0, r5
   b61ea:	f7fe f83b 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b61ee:	e7f0      	b.n	b61d2 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b61f0:	2301      	movs	r3, #1
   b61f2:	f10d 0207 	add.w	r2, sp, #7
   b61f6:	2128      	movs	r1, #40	; 0x28
   b61f8:	4620      	mov	r0, r4
   b61fa:	f7ff ffdb 	bl	b61b4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b61fe:	b930      	cbnz	r0, b620e <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b6200:	480d      	ldr	r0, [pc, #52]	; (b6238 <_ZN6AB180510detectChipEv+0x74>)
   b6202:	490e      	ldr	r1, [pc, #56]	; (b623c <_ZN6AB180510detectChipEv+0x78>)
   b6204:	f7fe f82e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6208:	2000      	movs	r0, #0
}
   b620a:	b002      	add	sp, #8
   b620c:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b620e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6212:	2b18      	cmp	r3, #24
   b6214:	d1f4      	bne.n	b6200 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b6216:	2301      	movs	r3, #1
   b6218:	f10d 0207 	add.w	r2, sp, #7
   b621c:	2129      	movs	r1, #41	; 0x29
   b621e:	4620      	mov	r0, r4
   b6220:	f7ff ffc8 	bl	b61b4 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b6224:	2800      	cmp	r0, #0
   b6226:	d0eb      	beq.n	b6200 <_ZN6AB180510detectChipEv+0x3c>
   b6228:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b622c:	2b05      	cmp	r3, #5
   b622e:	d1e7      	bne.n	b6200 <_ZN6AB180510detectChipEv+0x3c>
   b6230:	e7eb      	b.n	b620a <_ZN6AB180510detectChipEv+0x46>
   b6232:	bf00      	nop
   b6234:	000be141 	.word	0x000be141
   b6238:	2003e3dc 	.word	0x2003e3dc
   b623c:	000be156 	.word	0x000be156

000b6240 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6240:	b507      	push	{r0, r1, r2, lr}
   b6242:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6244:	2200      	movs	r2, #0
   b6246:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b624a:	f10d 0207 	add.w	r2, sp, #7
   b624e:	f7ff ffb1 	bl	b61b4 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b6252:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6256:	b003      	add	sp, #12
   b6258:	f85d fb04 	ldr.w	pc, [sp], #4

000b625c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6260:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6264:	4604      	mov	r4, r0
   b6266:	460f      	mov	r7, r1
   b6268:	4615      	mov	r5, r2
   b626a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b626c:	f1b8 0f00 	cmp.w	r8, #0
   b6270:	d002      	beq.n	b6278 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b6272:	6840      	ldr	r0, [r0, #4]
   b6274:	f002 ff0a 	bl	b908c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6278:	7a21      	ldrb	r1, [r4, #8]
   b627a:	6860      	ldr	r0, [r4, #4]
   b627c:	f002 fee3 	bl	b9046 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6280:	6860      	ldr	r0, [r4, #4]
   b6282:	6803      	ldr	r3, [r0, #0]
   b6284:	4639      	mov	r1, r7
   b6286:	689b      	ldr	r3, [r3, #8]
   b6288:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b628a:	442e      	add	r6, r5
   b628c:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b628e:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6290:	d005      	beq.n	b629e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b6292:	6803      	ldr	r3, [r0, #0]
   b6294:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6298:	689b      	ldr	r3, [r3, #8]
   b629a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b629c:	e7f6      	b.n	b628c <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b629e:	2101      	movs	r1, #1
   b62a0:	f002 fef0 	bl	b9084 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b62a4:	4603      	mov	r3, r0
   b62a6:	b170      	cbz	r0, b62c6 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b62a8:	4908      	ldr	r1, [pc, #32]	; (b62cc <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b62aa:	4809      	ldr	r0, [pc, #36]	; (b62d0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b62ac:	463a      	mov	r2, r7
   b62ae:	f7ff ff03 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b62b2:	2500      	movs	r5, #0
    }

    if (lock) {
   b62b4:	f1b8 0f00 	cmp.w	r8, #0
   b62b8:	d002      	beq.n	b62c0 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b62ba:	6860      	ldr	r0, [r4, #4]
   b62bc:	f002 feef 	bl	b909e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b62c0:	4628      	mov	r0, r5
   b62c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b62c6:	2501      	movs	r5, #1
   b62c8:	e7f4      	b.n	b62b4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b62ca:	bf00      	nop
   b62cc:	000be163 	.word	0x000be163
   b62d0:	2003e3dc 	.word	0x2003e3dc

000b62d4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b62d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b62d6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b62da:	9300      	str	r3, [sp, #0]
   b62dc:	f10d 020f 	add.w	r2, sp, #15
   b62e0:	2301      	movs	r3, #1
   b62e2:	f7ff ffbb 	bl	b625c <_ZN6AB180514writeRegistersEhPKhjb>
}
   b62e6:	b005      	add	sp, #20
   b62e8:	f85d fb04 	ldr.w	pc, [sp], #4

000b62ec <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b62ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b62ee:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b62f0:	460c      	mov	r4, r1
   b62f2:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b62f4:	491a      	ldr	r1, [pc, #104]	; (b6360 <_ZN6AB18056setWDTEi+0x74>)
   b62f6:	481b      	ldr	r0, [pc, #108]	; (b6364 <_ZN6AB18056setWDTEi+0x78>)
   b62f8:	f7fd ffb4 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b62fc:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b62fe:	bfb8      	it	lt
   b6300:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b6302:	b97c      	cbnz	r4, b6324 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b6304:	2301      	movs	r3, #1
   b6306:	4622      	mov	r2, r4
   b6308:	211b      	movs	r1, #27
   b630a:	4628      	mov	r0, r5
   b630c:	f7ff ffe2 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6310:	4915      	ldr	r1, [pc, #84]	; (b6368 <_ZN6AB18056setWDTEi+0x7c>)
   b6312:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b6314:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b6316:	4813      	ldr	r0, [pc, #76]	; (b6364 <_ZN6AB18056setWDTEi+0x78>)
   b6318:	f7ff fedc 	bl	b60d4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b631c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b631e:	616c      	str	r4, [r5, #20]
}
   b6320:	4630      	mov	r0, r6
   b6322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b6324:	2c03      	cmp	r4, #3
   b6326:	dd19      	ble.n	b635c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b6328:	10a7      	asrs	r7, r4, #2
   b632a:	2f1f      	cmp	r7, #31
   b632c:	bfa8      	it	ge
   b632e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6330:	00ba      	lsls	r2, r7, #2
   b6332:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b6336:	2301      	movs	r3, #1
   b6338:	b2d2      	uxtb	r2, r2
   b633a:	211b      	movs	r1, #27
   b633c:	4628      	mov	r0, r5
   b633e:	f7ff ffc9 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6342:	463a      	mov	r2, r7
   b6344:	4603      	mov	r3, r0
   b6346:	4909      	ldr	r1, [pc, #36]	; (b636c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6348:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b634a:	4806      	ldr	r0, [pc, #24]	; (b6364 <_ZN6AB18056setWDTEi+0x78>)
   b634c:	f7ff fec2 	bl	b60d4 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6350:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6354:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6356:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6358:	616f      	str	r7, [r5, #20]
   b635a:	e7e1      	b.n	b6320 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b635c:	2701      	movs	r7, #1
   b635e:	e7e7      	b.n	b6330 <_ZN6AB18056setWDTEi+0x44>
   b6360:	000be188 	.word	0x000be188
   b6364:	2003e3dc 	.word	0x2003e3dc
   b6368:	000be192 	.word	0x000be192
   b636c:	000be1ae 	.word	0x000be1ae

000b6370 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6370:	4b06      	ldr	r3, [pc, #24]	; (b638c <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b6372:	681a      	ldr	r2, [r3, #0]
   b6374:	b14a      	cbz	r2, b638a <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6376:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b637a:	430b      	orrs	r3, r1
   b637c:	d105      	bne.n	b638a <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b637e:	68d3      	ldr	r3, [r2, #12]
   b6380:	b11b      	cbz	r3, b638a <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b6382:	2100      	movs	r1, #0
   b6384:	4610      	mov	r0, r2
   b6386:	f7ff bfb1 	b.w	b62ec <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b638a:	4770      	bx	lr
   b638c:	2003e3e0 	.word	0x2003e3e0

000b6390 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6390:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6394:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6398:	4605      	mov	r5, r0
   b639a:	4616      	mov	r6, r2
   b639c:	461f      	mov	r7, r3
    if (lock) {
   b639e:	f1b8 0f00 	cmp.w	r8, #0
   b63a2:	d004      	beq.n	b63ae <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b63a4:	6840      	ldr	r0, [r0, #4]
   b63a6:	9101      	str	r1, [sp, #4]
   b63a8:	f002 fe70 	bl	b908c <_ZN7TwoWire4lockEv>
   b63ac:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b63ae:	9101      	str	r1, [sp, #4]
   b63b0:	2300      	movs	r3, #0
   b63b2:	f10d 020f 	add.w	r2, sp, #15
   b63b6:	4628      	mov	r0, r5
   b63b8:	f7ff fefc 	bl	b61b4 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b63bc:	4604      	mov	r4, r0
   b63be:	b160      	cbz	r0, b63da <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b63c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b63c4:	ea03 0206 	and.w	r2, r3, r6
   b63c8:	433a      	orrs	r2, r7
        if (newValue != value) {
   b63ca:	4293      	cmp	r3, r2
   b63cc:	d005      	beq.n	b63da <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b63ce:	9901      	ldr	r1, [sp, #4]
   b63d0:	2300      	movs	r3, #0
   b63d2:	4628      	mov	r0, r5
   b63d4:	f7ff ff7e 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
   b63d8:	4604      	mov	r4, r0
    if (lock) {
   b63da:	f1b8 0f00 	cmp.w	r8, #0
   b63de:	d002      	beq.n	b63e6 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b63e0:	6868      	ldr	r0, [r5, #4]
   b63e2:	f002 fe5c 	bl	b909e <_ZN7TwoWire6unlockEv>
}
   b63e6:	4620      	mov	r0, r4
   b63e8:	b004      	add	sp, #16
   b63ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b63ee <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b63ee:	b513      	push	{r0, r1, r4, lr}
   b63f0:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b63f2:	f10d 0207 	add.w	r2, sp, #7
   b63f6:	f7ff fedd 	bl	b61b4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b63fa:	b128      	cbz	r0, b6408 <_ZN6AB180510isBitClearEhhb+0x1a>
   b63fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6400:	421c      	tst	r4, r3
   b6402:	bf0c      	ite	eq
   b6404:	2001      	moveq	r0, #1
   b6406:	2000      	movne	r0, #0
}
   b6408:	b002      	add	sp, #8
   b640a:	bd10      	pop	{r4, pc}

000b640c <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b640c:	b513      	push	{r0, r1, r4, lr}
   b640e:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b6410:	f10d 0207 	add.w	r2, sp, #7
   b6414:	f7ff fece 	bl	b61b4 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b6418:	b128      	cbz	r0, b6426 <_ZN6AB18058isBitSetEhhb+0x1a>
   b641a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b641e:	421c      	tst	r4, r3
   b6420:	bf14      	ite	ne
   b6422:	2001      	movne	r0, #1
   b6424:	2000      	moveq	r0, #0
}
   b6426:	b002      	add	sp, #8
   b6428:	bd10      	pop	{r4, pc}

000b642a <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b642a:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b642c:	43d2      	mvns	r2, r2
   b642e:	9300      	str	r3, [sp, #0]
   b6430:	b2d2      	uxtb	r2, r2
   b6432:	2300      	movs	r3, #0
   b6434:	f7ff ffac 	bl	b6390 <_ZN6AB180512maskRegisterEhhhb>
}
   b6438:	b003      	add	sp, #12
   b643a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6440 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6440:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b6442:	2301      	movs	r3, #1
   b6444:	f10d 0207 	add.w	r2, sp, #7
   b6448:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b644a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b644c:	f7ff feb2 	bl	b61b4 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6450:	4605      	mov	r5, r0
   b6452:	b938      	cbnz	r0, b6464 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6454:	491e      	ldr	r1, [pc, #120]	; (b64d0 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6456:	481f      	ldr	r0, [pc, #124]	; (b64d4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6458:	22ad      	movs	r2, #173	; 0xad
   b645a:	f7ff fe2d 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
}
   b645e:	4628      	mov	r0, r5
   b6460:	b003      	add	sp, #12
   b6462:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6464:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6468:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b646c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6470:	d00b      	beq.n	b648a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6472:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6474:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6476:	210f      	movs	r1, #15
   b6478:	4620      	mov	r0, r4
   b647a:	f7ff ffd6 	bl	b642a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b647e:	4a16      	ldr	r2, [pc, #88]	; (b64d8 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6480:	4916      	ldr	r1, [pc, #88]	; (b64dc <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b6482:	4814      	ldr	r0, [pc, #80]	; (b64d4 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6484:	f7fd feee 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6488:	e7e9      	b.n	b645e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b648a:	2208      	movs	r2, #8
   b648c:	2117      	movs	r1, #23
   b648e:	4620      	mov	r0, r4
   b6490:	f7ff ffbc 	bl	b640c <_ZN6AB18058isBitSetEhhb>
   b6494:	b118      	cbz	r0, b649e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6496:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6498:	4a11      	ldr	r2, [pc, #68]	; (b64e0 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b649a:	61e3      	str	r3, [r4, #28]
   b649c:	e7f0      	b.n	b6480 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b649e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b64a2:	071a      	lsls	r2, r3, #28
   b64a4:	d509      	bpl.n	b64ba <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b64a6:	2303      	movs	r3, #3
   b64a8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b64aa:	2208      	movs	r2, #8
   b64ac:	2301      	movs	r3, #1
   b64ae:	210f      	movs	r1, #15
   b64b0:	4620      	mov	r0, r4
   b64b2:	f7ff ffba 	bl	b642a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b64b6:	4a0b      	ldr	r2, [pc, #44]	; (b64e4 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b64b8:	e7e2      	b.n	b6480 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b64ba:	075b      	lsls	r3, r3, #29
   b64bc:	d5cf      	bpl.n	b645e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b64be:	2204      	movs	r2, #4
   b64c0:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b64c2:	2301      	movs	r3, #1
   b64c4:	210f      	movs	r1, #15
   b64c6:	4620      	mov	r0, r4
   b64c8:	f7ff ffaf 	bl	b642a <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b64cc:	4a06      	ldr	r2, [pc, #24]	; (b64e8 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b64ce:	e7d7      	b.n	b6480 <_ZN6AB180516updateWakeReasonEv+0x40>
   b64d0:	000be201 	.word	0x000be201
   b64d4:	2003e3dc 	.word	0x2003e3dc
   b64d8:	000be1d2 	.word	0x000be1d2
   b64dc:	000be220 	.word	0x000be220
   b64e0:	000be1db 	.word	0x000be1db
   b64e4:	000be1eb 	.word	0x000be1eb
   b64e8:	000be1fb 	.word	0x000be1fb

000b64ec <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b64ec:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b64ee:	9300      	str	r3, [sp, #0]
   b64f0:	4613      	mov	r3, r2
   b64f2:	22ff      	movs	r2, #255	; 0xff
   b64f4:	f7ff ff4c 	bl	b6390 <_ZN6AB180512maskRegisterEhhhb>
}
   b64f8:	b003      	add	sp, #12
   b64fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6500 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b6500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6502:	460f      	mov	r7, r1
   b6504:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b6506:	2301      	movs	r3, #1
   b6508:	2200      	movs	r2, #0
   b650a:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b650c:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b650e:	f7ff fee1 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6512:	4604      	mov	r4, r0
   b6514:	b938      	cbnz	r0, b6526 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b6516:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b651a:	491f      	ldr	r1, [pc, #124]	; (b6598 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b651c:	481f      	ldr	r0, [pc, #124]	; (b659c <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b651e:	f7ff fdcb 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
}
   b6522:	4620      	mov	r0, r4
   b6524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b6526:	2301      	movs	r3, #1
   b6528:	2223      	movs	r2, #35	; 0x23
   b652a:	2118      	movs	r1, #24
   b652c:	4628      	mov	r0, r5
   b652e:	f7ff fed1 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6532:	4604      	mov	r4, r0
   b6534:	b910      	cbnz	r0, b653c <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b6536:	f240 229b 	movw	r2, #667	; 0x29b
   b653a:	e7ee      	b.n	b651a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b653c:	2fff      	cmp	r7, #255	; 0xff
   b653e:	bfa8      	it	ge
   b6540:	27ff      	movge	r7, #255	; 0xff
   b6542:	2f01      	cmp	r7, #1
   b6544:	bfb8      	it	lt
   b6546:	2701      	movlt	r7, #1
   b6548:	2301      	movs	r3, #1
   b654a:	b2fa      	uxtb	r2, r7
   b654c:	2119      	movs	r1, #25
   b654e:	4628      	mov	r0, r5
   b6550:	f7ff fec0 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6554:	4604      	mov	r4, r0
   b6556:	b910      	cbnz	r0, b655e <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6558:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b655c:	e7dd      	b.n	b651a <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b655e:	2301      	movs	r3, #1
   b6560:	2208      	movs	r2, #8
   b6562:	2112      	movs	r1, #18
   b6564:	4628      	mov	r0, r5
   b6566:	f7ff ffc1 	bl	b64ec <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b656a:	4604      	mov	r4, r0
   b656c:	b910      	cbnz	r0, b6574 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b656e:	f240 22af 	movw	r2, #687	; 0x2af
   b6572:	e7d2      	b.n	b651a <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6574:	2e00      	cmp	r6, #0
   b6576:	bf14      	ite	ne
   b6578:	2203      	movne	r2, #3
   b657a:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b657c:	2301      	movs	r3, #1
   b657e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b6582:	2118      	movs	r1, #24
   b6584:	4628      	mov	r0, r5
   b6586:	f7ff fea5 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b658a:	4604      	mov	r4, r0
   b658c:	2800      	cmp	r0, #0
   b658e:	d1c8      	bne.n	b6522 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6590:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6594:	e7c1      	b.n	b651a <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6596:	bf00      	nop
   b6598:	000be231 	.word	0x000be231
   b659c:	2003e3dc 	.word	0x2003e3dc

000b65a0 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b65a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b65a4:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b65a6:	4605      	mov	r5, r0
   b65a8:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b65aa:	484f      	ldr	r0, [pc, #316]	; (b66e8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b65ac:	494f      	ldr	r1, [pc, #316]	; (b66ec <_ZN6AB180513deepPowerDownEi+0x14c>)
   b65ae:	f7fd fe59 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b65b2:	2100      	movs	r1, #0
   b65b4:	4628      	mov	r0, r5
   b65b6:	f7ff fe99 	bl	b62ec <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b65ba:	4604      	mov	r4, r0
   b65bc:	b948      	cbnz	r0, b65d2 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b65be:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b65c2:	494b      	ldr	r1, [pc, #300]	; (b66f0 <_ZN6AB180513deepPowerDownEi+0x150>)
   b65c4:	4848      	ldr	r0, [pc, #288]	; (b66e8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b65c6:	f7ff fd77 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
}
   b65ca:	4620      	mov	r0, r4
   b65cc:	b003      	add	sp, #12
   b65ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b65d2:	2301      	movs	r3, #1
   b65d4:	461a      	mov	r2, r3
   b65d6:	2130      	movs	r1, #48	; 0x30
   b65d8:	4628      	mov	r0, r5
   b65da:	f7ff ff87 	bl	b64ec <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b65de:	4604      	mov	r4, r0
   b65e0:	b910      	cbnz	r0, b65e8 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b65e2:	f240 2205 	movw	r2, #517	; 0x205
   b65e6:	e7ec      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b65e8:	2210      	movs	r2, #16
   b65ea:	2301      	movs	r3, #1
   b65ec:	4611      	mov	r1, r2
   b65ee:	4628      	mov	r0, r5
   b65f0:	f7ff ff1b 	bl	b642a <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b65f4:	4604      	mov	r4, r0
   b65f6:	b910      	cbnz	r0, b65fe <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b65f8:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b65fc:	e7e1      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b65fe:	2301      	movs	r3, #1
   b6600:	2226      	movs	r2, #38	; 0x26
   b6602:	2113      	movs	r1, #19
   b6604:	4628      	mov	r0, r5
   b6606:	f7ff fe65 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b660a:	4604      	mov	r4, r0
   b660c:	b910      	cbnz	r0, b6614 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b660e:	f240 2213 	movw	r2, #531	; 0x213
   b6612:	e7d6      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b6614:	2601      	movs	r6, #1
   b6616:	9600      	str	r6, [sp, #0]
   b6618:	4633      	mov	r3, r6
   b661a:	22fc      	movs	r2, #252	; 0xfc
   b661c:	2111      	movs	r1, #17
   b661e:	4628      	mov	r0, r5
   b6620:	f7ff feb6 	bl	b6390 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6624:	4604      	mov	r4, r0
   b6626:	b910      	cbnz	r0, b662e <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b6628:	f240 221b 	movw	r2, #539	; 0x21b
   b662c:	e7c9      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b662e:	2200      	movs	r2, #0
   b6630:	4639      	mov	r1, r7
   b6632:	4628      	mov	r0, r5
   b6634:	f7ff ff64 	bl	b6500 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6638:	4604      	mov	r4, r0
   b663a:	b910      	cbnz	r0, b6642 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b663c:	f240 2222 	movw	r2, #546	; 0x222
   b6640:	e7bf      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b6642:	9600      	str	r6, [sp, #0]
   b6644:	2302      	movs	r3, #2
   b6646:	2277      	movs	r2, #119	; 0x77
   b6648:	2110      	movs	r1, #16
   b664a:	4628      	mov	r0, r5
   b664c:	f7ff fea0 	bl	b6390 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6650:	4604      	mov	r4, r0
   b6652:	b910      	cbnz	r0, b665a <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6654:	f240 222b 	movw	r2, #555	; 0x22b
   b6658:	e7b3      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b665a:	4633      	mov	r3, r6
   b665c:	2204      	movs	r2, #4
   b665e:	211c      	movs	r1, #28
   b6660:	4628      	mov	r0, r5
   b6662:	f7ff ff43 	bl	b64ec <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6666:	4604      	mov	r4, r0
   b6668:	b910      	cbnz	r0, b6670 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b666a:	f240 2232 	movw	r2, #562	; 0x232
   b666e:	e7a8      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6670:	9600      	str	r6, [sp, #0]
   b6672:	2318      	movs	r3, #24
   b6674:	22e3      	movs	r2, #227	; 0xe3
   b6676:	2111      	movs	r1, #17
   b6678:	4628      	mov	r0, r5
   b667a:	f7ff fe89 	bl	b6390 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b667e:	4604      	mov	r4, r0
   b6680:	b910      	cbnz	r0, b6688 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b6682:	f240 2239 	movw	r2, #569	; 0x239
   b6686:	e79c      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6688:	4633      	mov	r3, r6
   b668a:	22c0      	movs	r2, #192	; 0xc0
   b668c:	2117      	movs	r1, #23
   b668e:	4628      	mov	r0, r5
   b6690:	f7ff fe20 	bl	b62d4 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6694:	4604      	mov	r4, r0
   b6696:	b910      	cbnz	r0, b669e <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6698:	f44f 7210 	mov.w	r2, #576	; 0x240
   b669c:	e791      	b.n	b65c2 <_ZN6AB180513deepPowerDownEi+0x22>
   b669e:	f001 ff0b 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b66a2:	f8df 9054 	ldr.w	r9, [pc, #84]	; b66f8 <_ZN6AB180513deepPowerDownEi+0x158>
   b66a6:	f8df 8040 	ldr.w	r8, [pc, #64]	; b66e8 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b66aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b66ae:	4606      	mov	r6, r0
   b66b0:	434f      	muls	r7, r1
   b66b2:	f001 ff01 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
   b66b6:	1b80      	subs	r0, r0, r6
   b66b8:	42b8      	cmp	r0, r7
   b66ba:	d20e      	bcs.n	b66da <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b66bc:	2201      	movs	r2, #1
   b66be:	2117      	movs	r1, #23
   b66c0:	4628      	mov	r0, r5
   b66c2:	f7ff fdbd 	bl	b6240 <_ZN6AB180512readRegisterEhb>
   b66c6:	4649      	mov	r1, r9
   b66c8:	4602      	mov	r2, r0
   b66ca:	4640      	mov	r0, r8
   b66cc:	f7fd fdca 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b66d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b66d4:	f002 fa5c 	bl	b8b90 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b66d8:	e7eb      	b.n	b66b2 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b66da:	4906      	ldr	r1, [pc, #24]	; (b66f4 <_ZN6AB180513deepPowerDownEi+0x154>)
   b66dc:	4802      	ldr	r0, [pc, #8]	; (b66e8 <_ZN6AB180513deepPowerDownEi+0x148>)
   b66de:	f7ff fceb 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b66e2:	f004 fba0 	bl	bae26 <_ZN11SystemClass5resetEv>
    return true;
   b66e6:	e770      	b.n	b65ca <_ZN6AB180513deepPowerDownEi+0x2a>
   b66e8:	2003e3dc 	.word	0x2003e3dc
   b66ec:	000be25c 	.word	0x000be25c
   b66f0:	000be251 	.word	0x000be251
   b66f4:	000be282 	.word	0x000be282
   b66f8:	000be26d 	.word	0x000be26d

000b66fc <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b66fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6700:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6704:	4605      	mov	r5, r0
   b6706:	460c      	mov	r4, r1
   b6708:	4691      	mov	r9, r2
   b670a:	461f      	mov	r7, r3
    if (lock) {
   b670c:	f1ba 0f00 	cmp.w	sl, #0
   b6710:	d002      	beq.n	b6718 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b6712:	6840      	ldr	r0, [r0, #4]
   b6714:	f002 fcba 	bl	b908c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6718:	b307      	cbz	r7, b675c <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b671a:	2f20      	cmp	r7, #32
   b671c:	463e      	mov	r6, r7
   b671e:	bf28      	it	cs
   b6720:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6722:	2c7f      	cmp	r4, #127	; 0x7f
   b6724:	d826      	bhi.n	b6774 <_ZN6AB18057readRamEjPhjb+0x78>
   b6726:	1933      	adds	r3, r6, r4
   b6728:	2b80      	cmp	r3, #128	; 0x80
   b672a:	d901      	bls.n	b6730 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b672c:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6730:	2301      	movs	r3, #1
   b6732:	2204      	movs	r2, #4
   b6734:	213f      	movs	r1, #63	; 0x3f
   b6736:	4628      	mov	r0, r5
   b6738:	f7ff fe77 	bl	b642a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b673c:	2300      	movs	r3, #0
   b673e:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6742:	9300      	str	r3, [sp, #0]
   b6744:	464a      	mov	r2, r9
   b6746:	4633      	mov	r3, r6
   b6748:	b2c9      	uxtb	r1, r1
   b674a:	4628      	mov	r0, r5
   b674c:	f7ff fce4 	bl	b6118 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6750:	4680      	mov	r8, r0
   b6752:	b128      	cbz	r0, b6760 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6754:	4434      	add	r4, r6
        dataLen -= count;
   b6756:	1bbf      	subs	r7, r7, r6
        data += count;
   b6758:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b675a:	e7dd      	b.n	b6718 <_ZN6AB18057readRamEjPhjb+0x1c>
   b675c:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6760:	f1ba 0f00 	cmp.w	sl, #0
   b6764:	d002      	beq.n	b676c <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6766:	6868      	ldr	r0, [r5, #4]
   b6768:	f002 fc99 	bl	b909e <_ZN7TwoWire6unlockEv>
}
   b676c:	4640      	mov	r0, r8
   b676e:	b002      	add	sp, #8
   b6770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6774:	2301      	movs	r3, #1
   b6776:	2204      	movs	r2, #4
   b6778:	213f      	movs	r1, #63	; 0x3f
   b677a:	4628      	mov	r0, r5
   b677c:	f7ff feb6 	bl	b64ec <_ZN6AB180514setRegisterBitEhhb>
   b6780:	e7dc      	b.n	b673c <_ZN6AB18057readRamEjPhjb+0x40>

000b6782 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b6782:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6786:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b678a:	4605      	mov	r5, r0
   b678c:	460c      	mov	r4, r1
   b678e:	4691      	mov	r9, r2
   b6790:	461f      	mov	r7, r3
    if (lock) {
   b6792:	f1ba 0f00 	cmp.w	sl, #0
   b6796:	d002      	beq.n	b679e <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6798:	6840      	ldr	r0, [r0, #4]
   b679a:	f002 fc77 	bl	b908c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b679e:	b307      	cbz	r7, b67e2 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b67a0:	2f1f      	cmp	r7, #31
   b67a2:	463e      	mov	r6, r7
   b67a4:	bf28      	it	cs
   b67a6:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b67a8:	2c7f      	cmp	r4, #127	; 0x7f
   b67aa:	d826      	bhi.n	b67fa <_ZN6AB18058writeRamEjPKhjb+0x78>
   b67ac:	1933      	adds	r3, r6, r4
   b67ae:	2b80      	cmp	r3, #128	; 0x80
   b67b0:	d901      	bls.n	b67b6 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b67b2:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b67b6:	2301      	movs	r3, #1
   b67b8:	2204      	movs	r2, #4
   b67ba:	213f      	movs	r1, #63	; 0x3f
   b67bc:	4628      	mov	r0, r5
   b67be:	f7ff fe34 	bl	b642a <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b67c2:	2300      	movs	r3, #0
   b67c4:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b67c8:	9300      	str	r3, [sp, #0]
   b67ca:	464a      	mov	r2, r9
   b67cc:	4633      	mov	r3, r6
   b67ce:	b2c9      	uxtb	r1, r1
   b67d0:	4628      	mov	r0, r5
   b67d2:	f7ff fd43 	bl	b625c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b67d6:	4680      	mov	r8, r0
   b67d8:	b128      	cbz	r0, b67e6 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b67da:	4434      	add	r4, r6
        dataLen -= count;
   b67dc:	1bbf      	subs	r7, r7, r6
        data += count;
   b67de:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b67e0:	e7dd      	b.n	b679e <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b67e2:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b67e6:	f1ba 0f00 	cmp.w	sl, #0
   b67ea:	d002      	beq.n	b67f2 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b67ec:	6868      	ldr	r0, [r5, #4]
   b67ee:	f002 fc56 	bl	b909e <_ZN7TwoWire6unlockEv>
}
   b67f2:	4640      	mov	r0, r8
   b67f4:	b002      	add	sp, #8
   b67f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b67fa:	2301      	movs	r3, #1
   b67fc:	2204      	movs	r2, #4
   b67fe:	213f      	movs	r1, #63	; 0x3f
   b6800:	4628      	mov	r0, r5
   b6802:	f7ff fe73 	bl	b64ec <_ZN6AB180514setRegisterBitEhhb>
   b6806:	e7dc      	b.n	b67c2 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b6808 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b6808:	b530      	push	{r4, r5, lr}
   b680a:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b680c:	680d      	ldr	r5, [r1, #0]
   b680e:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b6812:	9503      	str	r5, [sp, #12]
   b6814:	684d      	ldr	r5, [r1, #4]
   b6816:	9502      	str	r5, [sp, #8]
   b6818:	688d      	ldr	r5, [r1, #8]
   b681a:	9501      	str	r5, [sp, #4]
   b681c:	68c9      	ldr	r1, [r1, #12]
   b681e:	9100      	str	r1, [sp, #0]
   b6820:	3301      	adds	r3, #1
   b6822:	4904      	ldr	r1, [pc, #16]	; (b6834 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b6824:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b6828:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b682a:	f004 fa95 	bl	bad58 <_ZN6String6formatEPKcz>
}
   b682e:	4620      	mov	r0, r4
   b6830:	b005      	add	sp, #20
   b6832:	bd30      	pop	{r4, r5, pc}
   b6834:	000be294 	.word	0x000be294

000b6838 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6838:	0903      	lsrs	r3, r0, #4
}
   b683a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b683c:	f000 000f 	and.w	r0, r0, #15
}
   b6840:	fb02 0003 	mla	r0, r2, r3, r0
   b6844:	4770      	bx	lr

000b6846 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6846:	b538      	push	{r3, r4, r5, lr}
   b6848:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b684a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b684c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b684e:	f7ff fff3 	bl	b6838 <_ZN6AB180510bcdToValueEh>
   b6852:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6854:	7860      	ldrb	r0, [r4, #1]
   b6856:	f7ff ffef 	bl	b6838 <_ZN6AB180510bcdToValueEh>
   b685a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b685c:	78a0      	ldrb	r0, [r4, #2]
   b685e:	f7ff ffeb 	bl	b6838 <_ZN6AB180510bcdToValueEh>
   b6862:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6864:	78e0      	ldrb	r0, [r4, #3]
   b6866:	f7ff ffe7 	bl	b6838 <_ZN6AB180510bcdToValueEh>
   b686a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b686c:	7920      	ldrb	r0, [r4, #4]
   b686e:	f7ff ffe3 	bl	b6838 <_ZN6AB180510bcdToValueEh>
   b6872:	3801      	subs	r0, #1
   b6874:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6876:	b92d      	cbnz	r5, b6884 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6878:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b687a:	7828      	ldrb	r0, [r5, #0]
   b687c:	f7ff ffdc 	bl	b6838 <_ZN6AB180510bcdToValueEh>
   b6880:	6188      	str	r0, [r1, #24]
}
   b6882:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6884:	7960      	ldrb	r0, [r4, #5]
   b6886:	f7ff ffd7 	bl	b6838 <_ZN6AB180510bcdToValueEh>
   b688a:	3064      	adds	r0, #100	; 0x64
   b688c:	1da5      	adds	r5, r4, #6
   b688e:	6148      	str	r0, [r1, #20]
   b6890:	e7f3      	b.n	b687a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6894 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6894:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6896:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6898:	b088      	sub	sp, #32
   b689a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b689c:	461a      	mov	r2, r3
   b689e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b68a0:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b68a2:	f7ff fda4 	bl	b63ee <_ZN6AB180510isBitClearEhhb>
   b68a6:	b1f0      	cbz	r0, b68e6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b68a8:	2308      	movs	r3, #8
   b68aa:	2601      	movs	r6, #1
   b68ac:	4620      	mov	r0, r4
   b68ae:	9600      	str	r6, [sp, #0]
   b68b0:	eb0d 0203 	add.w	r2, sp, r3
   b68b4:	2100      	movs	r1, #0
   b68b6:	f7ff fc2f 	bl	b6118 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b68ba:	4604      	mov	r4, r0
   b68bc:	b198      	cbz	r0, b68e6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b68be:	4632      	mov	r2, r6
   b68c0:	4629      	mov	r1, r5
   b68c2:	f10d 0009 	add.w	r0, sp, #9
   b68c6:	f7ff ffbe 	bl	b6846 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b68ca:	a804      	add	r0, sp, #16
   b68cc:	f7ff ff9c 	bl	b6808 <_ZN6AB180510tmToStringEPK2tm>
   b68d0:	4808      	ldr	r0, [pc, #32]	; (b68f4 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b68d2:	9a04      	ldr	r2, [sp, #16]
   b68d4:	4908      	ldr	r1, [pc, #32]	; (b68f8 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b68d6:	f7fd fcc5 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b68da:	a804      	add	r0, sp, #16
   b68dc:	f004 f982 	bl	babe4 <_ZN6StringD1Ev>
}
   b68e0:	4620      	mov	r0, r4
   b68e2:	b008      	add	sp, #32
   b68e4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b68e6:	2224      	movs	r2, #36	; 0x24
   b68e8:	2100      	movs	r1, #0
   b68ea:	4628      	mov	r0, r5
   b68ec:	f006 fd90 	bl	bd410 <memset>
   b68f0:	2400      	movs	r4, #0
   b68f2:	e7f5      	b.n	b68e0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b68f4:	2003e3dc 	.word	0x2003e3dc
   b68f8:	000be2b2 	.word	0x000be2b2

000b68fc <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b68fc:	b530      	push	{r4, r5, lr}
   b68fe:	b08b      	sub	sp, #44	; 0x2c
   b6900:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b6902:	a901      	add	r1, sp, #4
   b6904:	f7ff ffc6 	bl	b6894 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b6908:	4604      	mov	r4, r0
   b690a:	b120      	cbz	r0, b6916 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b690c:	a801      	add	r0, sp, #4
   b690e:	f002 f937 	bl	b8b80 <mktime>
   b6912:	e9c5 0100 	strd	r0, r1, [r5]
}
   b6916:	4620      	mov	r0, r4
   b6918:	b00b      	add	sp, #44	; 0x2c
   b691a:	bd30      	pop	{r4, r5, pc}

000b691c <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b691c:	230a      	movs	r3, #10
   b691e:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b6922:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b6926:	fb91 f2f3 	sdiv	r2, r1, r3
   b692a:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b692e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b6932:	b2c0      	uxtb	r0, r0
   b6934:	4770      	bx	lr

000b6936 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6936:	b570      	push	{r4, r5, r6, lr}
   b6938:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b693a:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b693c:	460c      	mov	r4, r1
   b693e:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6940:	f7ff ffec 	bl	b691c <_ZN6AB180510valueToBcdEi>
   b6944:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6946:	6868      	ldr	r0, [r5, #4]
   b6948:	f7ff ffe8 	bl	b691c <_ZN6AB180510valueToBcdEi>
   b694c:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b694e:	68a8      	ldr	r0, [r5, #8]
   b6950:	f7ff ffe4 	bl	b691c <_ZN6AB180510valueToBcdEi>
   b6954:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6956:	68e8      	ldr	r0, [r5, #12]
   b6958:	f7ff ffe0 	bl	b691c <_ZN6AB180510valueToBcdEi>
   b695c:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b695e:	6928      	ldr	r0, [r5, #16]
   b6960:	3001      	adds	r0, #1
   b6962:	f7ff ffdb 	bl	b691c <_ZN6AB180510valueToBcdEi>
   b6966:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6968:	b92e      	cbnz	r6, b6976 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b696a:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b696c:	69a8      	ldr	r0, [r5, #24]
   b696e:	f7ff ffd5 	bl	b691c <_ZN6AB180510valueToBcdEi>
   b6972:	7030      	strb	r0, [r6, #0]
}
   b6974:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6976:	696a      	ldr	r2, [r5, #20]
   b6978:	2364      	movs	r3, #100	; 0x64
   b697a:	fb92 f0f3 	sdiv	r0, r2, r3
   b697e:	fb03 2010 	mls	r0, r3, r0, r2
   b6982:	f7ff ffcb 	bl	b691c <_ZN6AB180510valueToBcdEi>
   b6986:	1da6      	adds	r6, r4, #6
   b6988:	7160      	strb	r0, [r4, #5]
   b698a:	e7ef      	b.n	b696c <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b698c <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b698c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b698e:	b087      	sub	sp, #28
   b6990:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6992:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6994:	4616      	mov	r6, r2
   b6996:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6998:	f7ff ff36 	bl	b6808 <_ZN6AB180510tmToStringEPK2tm>
   b699c:	481e      	ldr	r0, [pc, #120]	; (b6a18 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b699e:	9a02      	ldr	r2, [sp, #8]
   b69a0:	491e      	ldr	r1, [pc, #120]	; (b6a1c <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b69a2:	f7fd fc5f 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b69a6:	a802      	add	r0, sp, #8
   b69a8:	f004 f91c 	bl	babe4 <_ZN6StringD1Ev>
    if (lock) {
   b69ac:	b116      	cbz	r6, b69b4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b69ae:	6868      	ldr	r0, [r5, #4]
   b69b0:	f002 fb6c 	bl	b908c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b69b4:	4620      	mov	r0, r4
   b69b6:	2201      	movs	r2, #1
   b69b8:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b69bc:	2700      	movs	r7, #0
   b69be:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b69c2:	f7ff ffb8 	bl	b6936 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b69c6:	2301      	movs	r3, #1
   b69c8:	461a      	mov	r2, r3
   b69ca:	2110      	movs	r1, #16
   b69cc:	4628      	mov	r0, r5
   b69ce:	f7ff fd8d 	bl	b64ec <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b69d2:	4604      	mov	r4, r0
   b69d4:	b1e8      	cbz	r0, b6a12 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b69d6:	2308      	movs	r3, #8
   b69d8:	9700      	str	r7, [sp, #0]
   b69da:	eb0d 0203 	add.w	r2, sp, r3
   b69de:	4639      	mov	r1, r7
   b69e0:	4628      	mov	r0, r5
   b69e2:	f7ff fc3b 	bl	b625c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b69e6:	4604      	mov	r4, r0
   b69e8:	b160      	cbz	r0, b6a04 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b69ea:	2301      	movs	r3, #1
   b69ec:	461a      	mov	r2, r3
   b69ee:	2110      	movs	r1, #16
   b69f0:	4628      	mov	r0, r5
   b69f2:	f7ff fd1a 	bl	b642a <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b69f6:	b116      	cbz	r6, b69fe <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b69f8:	6868      	ldr	r0, [r5, #4]
   b69fa:	f002 fb50 	bl	b909e <_ZN7TwoWire6unlockEv>
}
   b69fe:	4620      	mov	r0, r4
   b6a00:	b007      	add	sp, #28
   b6a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b6a04:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b6a08:	4905      	ldr	r1, [pc, #20]	; (b6a20 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b6a0a:	4803      	ldr	r0, [pc, #12]	; (b6a18 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6a0c:	f7ff fb54 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
   b6a10:	e7f1      	b.n	b69f6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b6a12:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b6a16:	e7f7      	b.n	b6a08 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b6a18:	2003e3dc 	.word	0x2003e3dc
   b6a1c:	000be2c0 	.word	0x000be2c0
   b6a20:	000be2ce 	.word	0x000be2ce

000b6a24 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6a24:	b513      	push	{r0, r1, r4, lr}
   b6a26:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b6a28:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b6a2a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b6a2e:	f006 fca1 	bl	bd374 <gmtime>
    return setRtcFromTm(tm, lock);
   b6a32:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b6a36:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6a38:	4620      	mov	r0, r4
   b6a3a:	f7ff ffa7 	bl	b698c <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b6a3e:	b002      	add	sp, #8
   b6a40:	bd10      	pop	{r4, pc}
	...

000b6a44 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6a46:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6a48:	b089      	sub	sp, #36	; 0x24
   b6a4a:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6a4c:	bb75      	cbnz	r5, b6aac <_ZN6AB18054loopEv+0x68>
   b6a4e:	f004 fbb9 	bl	bb1c4 <_ZN9TimeClass7isValidEv>
   b6a52:	b358      	cbz	r0, b6aac <_ZN6AB18054loopEv+0x68>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   b6a54:	2600      	movs	r6, #0
   b6a56:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6a58:	a904      	add	r1, sp, #16
   b6a5a:	4628      	mov	r0, r5
        tm = 0;
   b6a5c:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6a60:	f001 ffb6 	bl	b89d0 <spark_sync_time_last>
   b6a64:	b310      	cbz	r0, b6aac <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6a66:	2501      	movs	r5, #1
   b6a68:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6a6a:	f004 fbc8 	bl	bb1fe <_ZN9TimeClass3nowEv>
   b6a6e:	17c3      	asrs	r3, r0, #31
   b6a70:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6a74:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6a76:	9500      	str	r5, [sp, #0]
   b6a78:	4620      	mov	r0, r4
   b6a7a:	f7ff ffd3 	bl	b6a24 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6a7e:	a902      	add	r1, sp, #8
   b6a80:	4620      	mov	r0, r4
        time = 0;
   b6a82:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6a86:	f7ff ff39 	bl	b68fc <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6a8a:	4b13      	ldr	r3, [pc, #76]	; (b6ad8 <_ZN6AB18054loopEv+0x94>)
   b6a8c:	4913      	ldr	r1, [pc, #76]	; (b6adc <_ZN6AB18054loopEv+0x98>)
   b6a8e:	681b      	ldr	r3, [r3, #0]
   b6a90:	9300      	str	r3, [sp, #0]
   b6a92:	a804      	add	r0, sp, #16
   b6a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6a98:	f004 fb52 	bl	bb140 <_ZN9TimeClass6formatExPKc>
   b6a9c:	4810      	ldr	r0, [pc, #64]	; (b6ae0 <_ZN6AB18054loopEv+0x9c>)
   b6a9e:	9a04      	ldr	r2, [sp, #16]
   b6aa0:	4910      	ldr	r1, [pc, #64]	; (b6ae4 <_ZN6AB18054loopEv+0xa0>)
   b6aa2:	f7fd fbdf 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6aa6:	a804      	add	r0, sp, #16
   b6aa8:	f004 f89c 	bl	babe4 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6aac:	6963      	ldr	r3, [r4, #20]
   b6aae:	b18b      	cbz	r3, b6ad4 <_ZN6AB18054loopEv+0x90>
   b6ab0:	f001 fd02 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6ab4:	6923      	ldr	r3, [r4, #16]
   b6ab6:	1ac0      	subs	r0, r0, r3
   b6ab8:	6963      	ldr	r3, [r4, #20]
   b6aba:	4298      	cmp	r0, r3
   b6abc:	d30a      	bcc.n	b6ad4 <_ZN6AB18054loopEv+0x90>
   b6abe:	f001 fcfb 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b6ac2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6ac6:	6120      	str	r0, [r4, #16]
            setWDT();
   b6ac8:	4620      	mov	r0, r4
}
   b6aca:	b009      	add	sp, #36	; 0x24
   b6acc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6ad0:	f7ff bc0c 	b.w	b62ec <_ZN6AB18056setWDTEi>
}
   b6ad4:	b009      	add	sp, #36	; 0x24
   b6ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6ad8:	2003ded8 	.word	0x2003ded8
   b6adc:	2003e6ac 	.word	0x2003e6ac
   b6ae0:	2003e3dc 	.word	0x2003e3dc
   b6ae4:	000be2e9 	.word	0x000be2e9

000b6ae8 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b6ae8:	b530      	push	{r4, r5, lr}
   b6aea:	4604      	mov	r4, r0
   b6aec:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b6aee:	b111      	cbz	r1, b6af6 <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b6af0:	6840      	ldr	r0, [r0, #4]
   b6af2:	f002 fa79 	bl	b8fe8 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b6af6:	4620      	mov	r0, r4
   b6af8:	f7ff fb64 	bl	b61c4 <_ZN6AB180510detectChipEv>
   b6afc:	ad06      	add	r5, sp, #24
   b6afe:	2800      	cmp	r0, #0
   b6b00:	d037      	beq.n	b6b72 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b6b02:	4620      	mov	r0, r4
   b6b04:	f7ff fc9c 	bl	b6440 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b6b08:	2301      	movs	r3, #1
   b6b0a:	461a      	mov	r2, r3
   b6b0c:	2110      	movs	r1, #16
   b6b0e:	4620      	mov	r0, r4
   b6b10:	f7ff fc6d 	bl	b63ee <_ZN6AB180510isBitClearEhhb>
   b6b14:	b1d8      	cbz	r0, b6b4e <_ZN6AB18055setupEb+0x66>
   b6b16:	f004 fb55 	bl	bb1c4 <_ZN9TimeClass7isValidEv>
   b6b1a:	b9c0      	cbnz	r0, b6b4e <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6b1c:	a902      	add	r1, sp, #8
   b6b1e:	4620      	mov	r0, r4
   b6b20:	f7ff feec 	bl	b68fc <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6b28:	f004 fa50 	bl	bafcc <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6b2c:	4b13      	ldr	r3, [pc, #76]	; (b6b7c <_ZN6AB18055setupEb+0x94>)
   b6b2e:	4914      	ldr	r1, [pc, #80]	; (b6b80 <_ZN6AB18055setupEb+0x98>)
   b6b30:	681b      	ldr	r3, [r3, #0]
   b6b32:	9300      	str	r3, [sp, #0]
   b6b34:	4628      	mov	r0, r5
   b6b36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6b3a:	f004 fb01 	bl	bb140 <_ZN9TimeClass6formatExPKc>
   b6b3e:	4811      	ldr	r0, [pc, #68]	; (b6b84 <_ZN6AB18055setupEb+0x9c>)
   b6b40:	9a06      	ldr	r2, [sp, #24]
   b6b42:	4911      	ldr	r1, [pc, #68]	; (b6b88 <_ZN6AB18055setupEb+0xa0>)
   b6b44:	f7fd fb8e 	bl	b4264 <_ZNK5spark6Logger4infoEPKcz>
   b6b48:	4628      	mov	r0, r5
   b6b4a:	f004 f84b 	bl	babe4 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6b4e:	4b0f      	ldr	r3, [pc, #60]	; (b6b8c <_ZN6AB18055setupEb+0xa4>)
   b6b50:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6b52:	4b0f      	ldr	r3, [pc, #60]	; (b6b90 <_ZN6AB18055setupEb+0xa8>)
   b6b54:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6b56:	4b0f      	ldr	r3, [pc, #60]	; (b6b94 <_ZN6AB18055setupEb+0xac>)
   b6b58:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6b5e:	2300      	movs	r3, #0
   b6b60:	a802      	add	r0, sp, #8
   b6b62:	9500      	str	r5, [sp, #0]
   b6b64:	f7fd fea6 	bl	b48b4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6b68:	4628      	mov	r0, r5
   b6b6a:	f7fd fb31 	bl	b41d0 <_ZNSt14_Function_baseD1Ev>
}
   b6b6e:	b00b      	add	sp, #44	; 0x2c
   b6b70:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6b72:	4909      	ldr	r1, [pc, #36]	; (b6b98 <_ZN6AB18055setupEb+0xb0>)
   b6b74:	4803      	ldr	r0, [pc, #12]	; (b6b84 <_ZN6AB18055setupEb+0x9c>)
   b6b76:	f7ff fa9f 	bl	b60b8 <_ZNK5spark6Logger5errorEPKcz>
   b6b7a:	e7e8      	b.n	b6b4e <_ZN6AB18055setupEb+0x66>
   b6b7c:	2003ded8 	.word	0x2003ded8
   b6b80:	2003e6ac 	.word	0x2003e6ac
   b6b84:	2003e3dc 	.word	0x2003e3dc
   b6b88:	000be2ff 	.word	0x000be2ff
   b6b8c:	000b6371 	.word	0x000b6371
   b6b90:	000b417f 	.word	0x000b417f
   b6b94:	000b416b 	.word	0x000b416b
   b6b98:	000be31c 	.word	0x000be31c

000b6b9c <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6b9c:	4b01      	ldr	r3, [pc, #4]	; (b6ba4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6b9e:	4a02      	ldr	r2, [pc, #8]	; (b6ba8 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6ba0:	601a      	str	r2, [r3, #0]
}
   b6ba2:	4770      	bx	lr
   b6ba4:	2003e3dc 	.word	0x2003e3dc
   b6ba8:	000be334 	.word	0x000be334

000b6bac <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b6bac:	4770      	bx	lr

000b6bae <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b6bae:	b510      	push	{r4, lr}
}
   b6bb0:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b6bb2:	4604      	mov	r4, r0
}
   b6bb4:	f7fd fa73 	bl	b409e <_ZdlPvj>
   b6bb8:	4620      	mov	r0, r4
   b6bba:	bd10      	pop	{r4, pc}

000b6bbc <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b6bbc:	6803      	ldr	r3, [r0, #0]
   b6bbe:	b2c9      	uxtb	r1, r1
   b6bc0:	689b      	ldr	r3, [r3, #8]
   b6bc2:	4718      	bx	r3

000b6bc4 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b6bc4:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b6bc6:	4d03      	ldr	r5, [pc, #12]	; (b6bd4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6bc8:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b6bcc:	e9c0 5100 	strd	r5, r1, [r0]
}
   b6bd0:	bd30      	pop	{r4, r5, pc}
   b6bd2:	bf00      	nop
   b6bd4:	000be360 	.word	0x000be360

000b6bd8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b6bd8:	6840      	ldr	r0, [r0, #4]
   b6bda:	f002 ba05 	b.w	b8fe8 <_ZN7TwoWire5beginEv>

000b6bde <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6bde:	b510      	push	{r4, lr}
   b6be0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b6be2:	6800      	ldr	r0, [r0, #0]
   b6be4:	f002 fa5b 	bl	b909e <_ZN7TwoWire6unlockEv>
   b6be8:	4620      	mov	r0, r4
   b6bea:	bd10      	pop	{r4, pc}

000b6bec <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6bf0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6bf2:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6bf4:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6bf6:	460d      	mov	r5, r1
   b6bf8:	4616      	mov	r6, r2
   b6bfa:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b6bfc:	f002 fa46 	bl	b908c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6c00:	b1a7      	cbz	r7, b6c2c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6c02:	68e1      	ldr	r1, [r4, #12]
   b6c04:	6860      	ldr	r0, [r4, #4]
   b6c06:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6c0a:	f002 fa20 	bl	b904e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6c0e:	0a29      	lsrs	r1, r5, #8
   b6c10:	6860      	ldr	r0, [r4, #4]
   b6c12:	f7ff ffd3 	bl	b6bbc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6c16:	4629      	mov	r1, r5
   b6c18:	6860      	ldr	r0, [r4, #4]
   b6c1a:	f7ff ffcf 	bl	b6bbc <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b6c1e:	6860      	ldr	r0, [r4, #4]
   b6c20:	2100      	movs	r1, #0
   b6c22:	f002 fa2f 	bl	b9084 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6c26:	b148      	cbz	r0, b6c3c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6c28:	2400      	movs	r4, #0
   b6c2a:	e000      	b.n	b6c2e <_ZN6MB85RC8readDataEjPhj+0x42>
   b6c2c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6c2e:	a801      	add	r0, sp, #4
   b6c30:	f7ff ffd5 	bl	b6bde <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b6c34:	4620      	mov	r0, r4
   b6c36:	b003      	add	sp, #12
   b6c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b6c3c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b6c3e:	7b21      	ldrb	r1, [r4, #12]
   b6c40:	6860      	ldr	r0, [r4, #4]
   b6c42:	46b8      	mov	r8, r7
   b6c44:	bf28      	it	cs
   b6c46:	f04f 0820 	movcs.w	r8, #32
   b6c4a:	2301      	movs	r3, #1
   b6c4c:	4642      	mov	r2, r8
   b6c4e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6c52:	f002 f9e6 	bl	b9022 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b6c56:	f004 fd47 	bl	bb6e8 <_Z19__fetch_global_Wirev>
   b6c5a:	6803      	ldr	r3, [r0, #0]
   b6c5c:	691b      	ldr	r3, [r3, #16]
   b6c5e:	4798      	blx	r3
   b6c60:	4540      	cmp	r0, r8
   b6c62:	dbe1      	blt.n	b6c28 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b6c64:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6c68:	f004 fd3e 	bl	bb6e8 <_Z19__fetch_global_Wirev>
   b6c6c:	6803      	ldr	r3, [r0, #0]
   b6c6e:	695b      	ldr	r3, [r3, #20]
   b6c70:	4798      	blx	r3
   b6c72:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b6c76:	454e      	cmp	r6, r9
   b6c78:	d1f6      	bne.n	b6c68 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6c7a:	4445      	add	r5, r8
				dataLen--;
   b6c7c:	eba7 0708 	sub.w	r7, r7, r8
   b6c80:	e7be      	b.n	b6c00 <_ZN6MB85RC8readDataEjPhj+0x14>

000b6c82 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6c82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c86:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6c88:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6c8a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6c8c:	460e      	mov	r6, r1
   b6c8e:	4690      	mov	r8, r2
   b6c90:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6c92:	f002 f9fb 	bl	b908c <_ZN7TwoWire4lockEv>
   b6c96:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b6c9a:	f1b9 0f00 	cmp.w	r9, #0
   b6c9e:	d02a      	beq.n	b6cf6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6ca0:	b34d      	cbz	r5, b6cf6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6ca2:	68e1      	ldr	r1, [r4, #12]
   b6ca4:	6860      	ldr	r0, [r4, #4]
   b6ca6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6caa:	f002 f9d0 	bl	b904e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6cae:	0a31      	lsrs	r1, r6, #8
   b6cb0:	6860      	ldr	r0, [r4, #4]
   b6cb2:	f7ff ff83 	bl	b6bbc <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6cb6:	6860      	ldr	r0, [r4, #4]
   b6cb8:	4631      	mov	r1, r6
   b6cba:	f7ff ff7f 	bl	b6bbc <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6cbe:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b6cc2:	4647      	mov	r7, r8
   b6cc4:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b6cc8:	6860      	ldr	r0, [r4, #4]
   b6cca:	f817 1b01 	ldrb.w	r1, [r7], #1
   b6cce:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b6cd0:	3d01      	subs	r5, #1
				wire.write(*data);
   b6cd2:	689b      	ldr	r3, [r3, #8]
   b6cd4:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6cd6:	4555      	cmp	r5, sl
   b6cd8:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b6cdc:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6cde:	d001      	beq.n	b6ce4 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b6ce0:	2d00      	cmp	r5, #0
   b6ce2:	d1f1      	bne.n	b6cc8 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6ce4:	6860      	ldr	r0, [r4, #4]
   b6ce6:	2101      	movs	r1, #1
   b6ce8:	f002 f9cc 	bl	b9084 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6cec:	2800      	cmp	r0, #0
   b6cee:	d0d7      	beq.n	b6ca0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6cf0:	f04f 0900 	mov.w	r9, #0
   b6cf4:	e7d1      	b.n	b6c9a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b6cf6:	a801      	add	r0, sp, #4
   b6cf8:	f7ff ff71 	bl	b6bde <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6cfc:	4648      	mov	r0, r9
   b6cfe:	b003      	add	sp, #12
   b6d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6d04 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6d08:	b08b      	sub	sp, #44	; 0x2c
   b6d0a:	460e      	mov	r6, r1
   b6d0c:	4615      	mov	r5, r2
   b6d0e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6d10:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6d12:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6d14:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b6d16:	f002 f9b9 	bl	b908c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b6d1a:	42ae      	cmp	r6, r5
   b6d1c:	d229      	bcs.n	b6d72 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b6d1e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b6d20:	4425      	add	r5, r4
			while(numBytes > 0) {
   b6d22:	b18c      	cbz	r4, b6d48 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b6d24:	2c1e      	cmp	r4, #30
   b6d26:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6d28:	f8d8 3000 	ldr.w	r3, [r8]
   b6d2c:	bf28      	it	cs
   b6d2e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6d30:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b6d32:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6d36:	aa02      	add	r2, sp, #8
   b6d38:	463b      	mov	r3, r7
   b6d3a:	4631      	mov	r1, r6
   b6d3c:	4640      	mov	r0, r8
				framAddrTo -= count;
   b6d3e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6d40:	47c8      	blx	r9
				if (!result) {
   b6d42:	b948      	cbnz	r0, b6d58 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6d44:	2400      	movs	r4, #0
   b6d46:	e000      	b.n	b6d4a <_ZN6MB85RC8moveDataEjjj+0x46>
   b6d48:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6d4a:	a801      	add	r0, sp, #4
   b6d4c:	f7ff ff47 	bl	b6bde <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6d50:	4620      	mov	r0, r4
   b6d52:	b00b      	add	sp, #44	; 0x2c
   b6d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6d58:	f8d8 3000 	ldr.w	r3, [r8]
   b6d5c:	aa02      	add	r2, sp, #8
   b6d5e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6d62:	4629      	mov	r1, r5
   b6d64:	463b      	mov	r3, r7
   b6d66:	4640      	mov	r0, r8
   b6d68:	47c8      	blx	r9
				if (!result) {
   b6d6a:	2800      	cmp	r0, #0
   b6d6c:	d0ea      	beq.n	b6d44 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6d6e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6d70:	e7d7      	b.n	b6d22 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b6d72:	d9e9      	bls.n	b6d48 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6d74:	2c00      	cmp	r4, #0
   b6d76:	d0e7      	beq.n	b6d48 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6d78:	f8d8 3000 	ldr.w	r3, [r8]
   b6d7c:	2c1e      	cmp	r4, #30
   b6d7e:	4627      	mov	r7, r4
   b6d80:	bf28      	it	cs
   b6d82:	271e      	movcs	r7, #30
   b6d84:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6d88:	aa02      	add	r2, sp, #8
   b6d8a:	463b      	mov	r3, r7
   b6d8c:	4631      	mov	r1, r6
   b6d8e:	4640      	mov	r0, r8
   b6d90:	47c8      	blx	r9
				if (!result) {
   b6d92:	2800      	cmp	r0, #0
   b6d94:	d0d6      	beq.n	b6d44 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6d96:	f8d8 3000 	ldr.w	r3, [r8]
   b6d9a:	aa02      	add	r2, sp, #8
   b6d9c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6da0:	4629      	mov	r1, r5
   b6da2:	463b      	mov	r3, r7
   b6da4:	4640      	mov	r0, r8
   b6da6:	47c8      	blx	r9
				if (!result) {
   b6da8:	2800      	cmp	r0, #0
   b6daa:	d0cb      	beq.n	b6d44 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6dac:	443e      	add	r6, r7
				framAddrTo += count;
   b6dae:	443d      	add	r5, r7
				numBytes -= count;
   b6db0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6db2:	e7df      	b.n	b6d74 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6db4 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b6db4:	6001      	str	r1, [r0, #0]
   b6db6:	7102      	strb	r2, [r0, #4]
{
}
   b6db8:	4770      	bx	lr

000b6dba <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b6dba:	6800      	ldr	r0, [r0, #0]
   b6dbc:	6803      	ldr	r3, [r0, #0]
   b6dbe:	68db      	ldr	r3, [r3, #12]
   b6dc0:	4718      	bx	r3

000b6dc2 <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b6dc2:	6800      	ldr	r0, [r0, #0]
   b6dc4:	6803      	ldr	r3, [r0, #0]
   b6dc6:	6a1b      	ldr	r3, [r3, #32]
   b6dc8:	4718      	bx	r3

000b6dca <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b6dca:	6800      	ldr	r0, [r0, #0]
   b6dcc:	6803      	ldr	r3, [r0, #0]
   b6dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6dd0:	4718      	bx	r3

000b6dd2 <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b6dd2:	7900      	ldrb	r0, [r0, #4]
   b6dd4:	4770      	bx	lr

000b6dd6 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b6dd6:	6800      	ldr	r0, [r0, #0]
   b6dd8:	6803      	ldr	r3, [r0, #0]
   b6dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6ddc:	4718      	bx	r3

000b6dde <_ZN10RHDatagram6sendtoEPhhh>:
{
   b6dde:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6de0:	4605      	mov	r5, r0
   b6de2:	460c      	mov	r4, r1
    setHeaderTo(address);
   b6de4:	4619      	mov	r1, r3
{
   b6de6:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b6de8:	f7ff fff5 	bl	b6dd6 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b6dec:	6828      	ldr	r0, [r5, #0]
   b6dee:	9a01      	ldr	r2, [sp, #4]
   b6df0:	6803      	ldr	r3, [r0, #0]
   b6df2:	695b      	ldr	r3, [r3, #20]
   b6df4:	4621      	mov	r1, r4
}
   b6df6:	b003      	add	sp, #12
   b6df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b6dfc:	4718      	bx	r3

000b6dfe <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b6dfe:	6800      	ldr	r0, [r0, #0]
   b6e00:	6803      	ldr	r3, [r0, #0]
   b6e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e04:	4718      	bx	r3

000b6e06 <_ZN10RHDatagram14setThisAddressEh>:
{
   b6e06:	b538      	push	{r3, r4, r5, lr}
   b6e08:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b6e0a:	6800      	ldr	r0, [r0, #0]
   b6e0c:	6803      	ldr	r3, [r0, #0]
{
   b6e0e:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b6e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6e12:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b6e14:	4629      	mov	r1, r5
   b6e16:	4620      	mov	r0, r4
   b6e18:	f7ff fff1 	bl	b6dfe <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b6e1c:	7125      	strb	r5, [r4, #4]
}
   b6e1e:	bd38      	pop	{r3, r4, r5, pc}

000b6e20 <_ZN10RHDatagram4initEv>:
{
   b6e20:	b538      	push	{r3, r4, r5, lr}
   b6e22:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b6e24:	6800      	ldr	r0, [r0, #0]
   b6e26:	6803      	ldr	r3, [r0, #0]
   b6e28:	689b      	ldr	r3, [r3, #8]
   b6e2a:	4798      	blx	r3
    if (ret)
   b6e2c:	4605      	mov	r5, r0
   b6e2e:	b118      	cbz	r0, b6e38 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b6e30:	7921      	ldrb	r1, [r4, #4]
   b6e32:	4620      	mov	r0, r4
   b6e34:	f7ff ffe7 	bl	b6e06 <_ZN10RHDatagram14setThisAddressEh>
}
   b6e38:	4628      	mov	r0, r5
   b6e3a:	bd38      	pop	{r3, r4, r5, pc}

000b6e3c <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b6e3c:	6800      	ldr	r0, [r0, #0]
   b6e3e:	6803      	ldr	r3, [r0, #0]
   b6e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e42:	4718      	bx	r3

000b6e44 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b6e44:	6800      	ldr	r0, [r0, #0]
   b6e46:	6803      	ldr	r3, [r0, #0]
   b6e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e4a:	4718      	bx	r3

000b6e4c <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b6e4c:	6800      	ldr	r0, [r0, #0]
   b6e4e:	6803      	ldr	r3, [r0, #0]
   b6e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6e52:	4718      	bx	r3

000b6e54 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b6e54:	6800      	ldr	r0, [r0, #0]
   b6e56:	6803      	ldr	r3, [r0, #0]
   b6e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6e5a:	4718      	bx	r3

000b6e5c <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b6e5c:	6800      	ldr	r0, [r0, #0]
   b6e5e:	6803      	ldr	r3, [r0, #0]
   b6e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6e62:	4718      	bx	r3

000b6e64 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b6e64:	6800      	ldr	r0, [r0, #0]
   b6e66:	6803      	ldr	r3, [r0, #0]
   b6e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6e6a:	4718      	bx	r3

000b6e6c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b6e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6e70:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b6e72:	6800      	ldr	r0, [r0, #0]
{
   b6e74:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b6e76:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b6e78:	6803      	ldr	r3, [r0, #0]
   b6e7a:	691b      	ldr	r3, [r3, #16]
{
   b6e7c:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b6e80:	4798      	blx	r3
   b6e82:	4605      	mov	r5, r0
   b6e84:	b1c8      	cbz	r0, b6eba <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b6e86:	b11e      	cbz	r6, b6e90 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b6e88:	4620      	mov	r0, r4
   b6e8a:	f7ff ffe3 	bl	b6e54 <_ZN10RHDatagram10headerFromEv>
   b6e8e:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b6e90:	f1b9 0f00 	cmp.w	r9, #0
   b6e94:	d004      	beq.n	b6ea0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b6e96:	4620      	mov	r0, r4
   b6e98:	f7ff ffd8 	bl	b6e4c <_ZN10RHDatagram8headerToEv>
   b6e9c:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b6ea0:	f1b8 0f00 	cmp.w	r8, #0
   b6ea4:	d004      	beq.n	b6eb0 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b6ea6:	4620      	mov	r0, r4
   b6ea8:	f7ff ffd8 	bl	b6e5c <_ZN10RHDatagram8headerIdEv>
   b6eac:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b6eb0:	b11f      	cbz	r7, b6eba <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b6eb2:	4620      	mov	r0, r4
   b6eb4:	f7ff ffd6 	bl	b6e64 <_ZN10RHDatagram11headerFlagsEv>
   b6eb8:	7038      	strb	r0, [r7, #0]
}
   b6eba:	4628      	mov	r0, r5
   b6ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6ec0 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b6ec0:	2001      	movs	r0, #1
   b6ec2:	4770      	bx	lr

000b6ec4 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b6ec4:	7903      	ldrb	r3, [r0, #4]
   b6ec6:	2b03      	cmp	r3, #3
   b6ec8:	d0fc      	beq.n	b6ec4 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b6eca:	2001      	movs	r0, #1
   b6ecc:	4770      	bx	lr

000b6ece <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b6ece:	2000      	movs	r0, #0
   b6ed0:	4770      	bx	lr

000b6ed2 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b6ed2:	7181      	strb	r1, [r0, #6]
}
   b6ed4:	4770      	bx	lr

000b6ed6 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b6ed6:	7141      	strb	r1, [r0, #5]
}
   b6ed8:	4770      	bx	lr

000b6eda <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b6eda:	72c1      	strb	r1, [r0, #11]
}
   b6edc:	4770      	bx	lr

000b6ede <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b6ede:	7301      	strb	r1, [r0, #12]
}
   b6ee0:	4770      	bx	lr

000b6ee2 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b6ee2:	7341      	strb	r1, [r0, #13]
}
   b6ee4:	4770      	bx	lr

000b6ee6 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b6ee6:	7b83      	ldrb	r3, [r0, #14]
   b6ee8:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b6eec:	4311      	orrs	r1, r2
   b6eee:	7381      	strb	r1, [r0, #14]
}
   b6ef0:	4770      	bx	lr

000b6ef2 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b6ef2:	79c0      	ldrb	r0, [r0, #7]
}
   b6ef4:	4770      	bx	lr

000b6ef6 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b6ef6:	7a00      	ldrb	r0, [r0, #8]
}
   b6ef8:	4770      	bx	lr

000b6efa <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b6efa:	7a40      	ldrb	r0, [r0, #9]
}
   b6efc:	4770      	bx	lr

000b6efe <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b6efe:	7a80      	ldrb	r0, [r0, #10]
}
   b6f00:	4770      	bx	lr

000b6f02 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b6f02:	8a00      	ldrh	r0, [r0, #16]
}
   b6f04:	b200      	sxth	r0, r0
   b6f06:	4770      	bx	lr

000b6f08 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b6f08:	7900      	ldrb	r0, [r0, #4]
}
   b6f0a:	4770      	bx	lr

000b6f0c <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b6f0c:	7101      	strb	r1, [r0, #4]
}
   b6f0e:	4770      	bx	lr

000b6f10 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b6f10:	8a40      	ldrh	r0, [r0, #18]
}
   b6f12:	b280      	uxth	r0, r0
   b6f14:	4770      	bx	lr

000b6f16 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b6f16:	8a80      	ldrh	r0, [r0, #20]
}
   b6f18:	b280      	uxth	r0, r0
   b6f1a:	4770      	bx	lr

000b6f1c <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b6f1c:	8ac0      	ldrh	r0, [r0, #22]
}
   b6f1e:	b280      	uxth	r0, r0
   b6f20:	4770      	bx	lr

000b6f22 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b6f22:	b538      	push	{r3, r4, r5, lr}
   b6f24:	4605      	mov	r5, r0
   b6f26:	460c      	mov	r4, r1
    while (!available())
   b6f28:	682b      	ldr	r3, [r5, #0]
   b6f2a:	4628      	mov	r0, r5
   b6f2c:	68db      	ldr	r3, [r3, #12]
   b6f2e:	4798      	blx	r3
   b6f30:	b928      	cbnz	r0, b6f3e <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b6f32:	2c00      	cmp	r4, #0
   b6f34:	d0f8      	beq.n	b6f28 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b6f36:	4620      	mov	r0, r4
   b6f38:	f001 fe2a 	bl	b8b90 <delay>
   b6f3c:	e7f4      	b.n	b6f28 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b6f3e:	bd38      	pop	{r3, r4, r5, pc}

000b6f40 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b6f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f42:	4605      	mov	r5, r0
   b6f44:	460f      	mov	r7, r1
   b6f46:	4614      	mov	r4, r2
   b6f48:	f001 fab6 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
   b6f4c:	4606      	mov	r6, r0
   b6f4e:	f001 fab3 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6f52:	1b80      	subs	r0, r0, r6
   b6f54:	42b8      	cmp	r0, r7
   b6f56:	d20a      	bcs.n	b6f6e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b6f58:	682b      	ldr	r3, [r5, #0]
   b6f5a:	4628      	mov	r0, r5
   b6f5c:	68db      	ldr	r3, [r3, #12]
   b6f5e:	4798      	blx	r3
   b6f60:	b930      	cbnz	r0, b6f70 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b6f62:	2c00      	cmp	r4, #0
   b6f64:	d0f3      	beq.n	b6f4e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b6f66:	4620      	mov	r0, r4
   b6f68:	f001 fe12 	bl	b8b90 <delay>
   b6f6c:	e7ef      	b.n	b6f4e <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b6f6e:	2000      	movs	r0, #0
}
   b6f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f72 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b6f72:	b570      	push	{r4, r5, r6, lr}
   b6f74:	4604      	mov	r4, r0
   b6f76:	460e      	mov	r6, r1
   b6f78:	f001 fa9e 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
   b6f7c:	4605      	mov	r5, r0
   b6f7e:	f001 fa9b 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6f82:	1b40      	subs	r0, r0, r5
   b6f84:	42b0      	cmp	r0, r6
   b6f86:	d204      	bcs.n	b6f92 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b6f88:	7923      	ldrb	r3, [r4, #4]
   b6f8a:	2b03      	cmp	r3, #3
   b6f8c:	d0f7      	beq.n	b6f7e <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b6f8e:	2001      	movs	r0, #1
}
   b6f90:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b6f92:	2000      	movs	r0, #0
   b6f94:	e7fc      	b.n	b6f90 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b6f96 <_ZN15RHGenericDriver7waitCADEv>:
{
   b6f96:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b6f98:	69c3      	ldr	r3, [r0, #28]
{
   b6f9a:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b6f9c:	b1b3      	cbz	r3, b6fcc <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6f9e:	f001 fa8b 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6fa2:	2664      	movs	r6, #100	; 0x64
   b6fa4:	4605      	mov	r5, r0
    while (isChannelActive())
   b6fa6:	6823      	ldr	r3, [r4, #0]
   b6fa8:	4620      	mov	r0, r4
   b6faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6fac:	4798      	blx	r3
   b6fae:	b168      	cbz	r0, b6fcc <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6fb0:	f001 fa82 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b6fb4:	69e3      	ldr	r3, [r4, #28]
   b6fb6:	1b40      	subs	r0, r0, r5
   b6fb8:	4298      	cmp	r0, r3
   b6fba:	d809      	bhi.n	b6fd0 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6fbc:	210a      	movs	r1, #10
   b6fbe:	2001      	movs	r0, #1
   b6fc0:	f003 fd37 	bl	baa32 <_Z6randomii>
   b6fc4:	4370      	muls	r0, r6
   b6fc6:	f001 fde3 	bl	b8b90 <delay>
    while (isChannelActive())
   b6fca:	e7ec      	b.n	b6fa6 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b6fcc:	2001      	movs	r0, #1
}
   b6fce:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b6fd0:	2000      	movs	r0, #0
   b6fd2:	e7fc      	b.n	b6fce <_ZN15RHGenericDriver7waitCADEv+0x38>

000b6fd4 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b6fd4:	4a06      	ldr	r2, [pc, #24]	; (b6ff0 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b6fd6:	6002      	str	r2, [r0, #0]
   b6fd8:	21ff      	movs	r1, #255	; 0xff
   b6fda:	2200      	movs	r2, #0
   b6fdc:	7102      	strb	r2, [r0, #4]
   b6fde:	7141      	strb	r1, [r0, #5]
   b6fe0:	8242      	strh	r2, [r0, #18]
   b6fe2:	72c1      	strb	r1, [r0, #11]
   b6fe4:	8282      	strh	r2, [r0, #20]
   b6fe6:	8181      	strh	r1, [r0, #12]
   b6fe8:	7382      	strb	r2, [r0, #14]
   b6fea:	82c2      	strh	r2, [r0, #22]
   b6fec:	61c2      	str	r2, [r0, #28]
}
   b6fee:	4770      	bx	lr
   b6ff0:	000be37c 	.word	0x000be37c

000b6ff4 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b6ff4:	4770      	bx	lr

000b6ff6 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b6ff6:	4770      	bx	lr

000b6ff8 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b6ff8:	4770      	bx	lr

000b6ffa <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b6ffa:	4770      	bx	lr

000b6ffc <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b6ffc:	4770      	bx	lr

000b6ffe <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b6ffe:	7141      	strb	r1, [r0, #5]
}
   b7000:	4770      	bx	lr

000b7002 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b7002:	7181      	strb	r1, [r0, #6]
}
   b7004:	4770      	bx	lr

000b7006 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b7006:	7101      	strb	r1, [r0, #4]
}
   b7008:	4770      	bx	lr
	...

000b700c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b700c:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b700e:	4d03      	ldr	r5, [pc, #12]	; (b701c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b7010:	6005      	str	r5, [r0, #0]
   b7012:	7101      	strb	r1, [r0, #4]
   b7014:	7142      	strb	r2, [r0, #5]
   b7016:	7183      	strb	r3, [r0, #6]
}
   b7018:	bd30      	pop	{r4, r5, pc}
   b701a:	bf00      	nop
   b701c:	000be3fc 	.word	0x000be3fc

000b7020 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b7020:	4770      	bx	lr

000b7022 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b7022:	b510      	push	{r4, lr}
  }
   b7024:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b7026:	4604      	mov	r4, r0
  }
   b7028:	f7fd f839 	bl	b409e <_ZdlPvj>
   b702c:	4620      	mov	r0, r4
   b702e:	bd10      	pop	{r4, pc}

000b7030 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b7030:	b40e      	push	{r1, r2, r3}
   b7032:	b503      	push	{r0, r1, lr}
   b7034:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b7036:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b7038:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b703c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b703e:	f003 fcbc 	bl	ba9ba <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b7042:	b002      	add	sp, #8
   b7044:	f85d eb04 	ldr.w	lr, [sp], #4
   b7048:	b003      	add	sp, #12
   b704a:	4770      	bx	lr

000b704c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b704c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b704e:	4604      	mov	r4, r0
   b7050:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b7052:	7922      	ldrb	r2, [r4, #4]
   b7054:	68a3      	ldr	r3, [r4, #8]
   b7056:	b132      	cbz	r2, b7066 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b7058:	b9a3      	cbnz	r3, b7084 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b705a:	490b      	ldr	r1, [pc, #44]	; (b7088 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b705c:	b002      	add	sp, #8
   b705e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b7062:	f003 bba1 	b.w	ba7a8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7066:	4a09      	ldr	r2, [pc, #36]	; (b708c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b7068:	7b26      	ldrb	r6, [r4, #12]
   b706a:	4d09      	ldr	r5, [pc, #36]	; (b7090 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b706c:	4909      	ldr	r1, [pc, #36]	; (b7094 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b706e:	7b64      	ldrb	r4, [r4, #13]
   b7070:	2e01      	cmp	r6, #1
   b7072:	bf18      	it	ne
   b7074:	4629      	movne	r1, r5
   b7076:	e9cd 1400 	strd	r1, r4, [sp]
   b707a:	4907      	ldr	r1, [pc, #28]	; (b7098 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b707c:	f7ff ffd8 	bl	b7030 <_ZN5Print6printfEPKcz>
  }
   b7080:	b002      	add	sp, #8
   b7082:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7084:	4a05      	ldr	r2, [pc, #20]	; (b709c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b7086:	e7ef      	b.n	b7068 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b7088:	000be439 	.word	0x000be439
   b708c:	000be7d5 	.word	0x000be7d5
   b7090:	000be435 	.word	0x000be435
   b7094:	000be431 	.word	0x000be431
   b7098:	000be44f 	.word	0x000be44f
   b709c:	000be428 	.word	0x000be428

000b70a0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b70a0:	b510      	push	{r4, lr}
   b70a2:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b70a4:	f7ff ffb2 	bl	b700c <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b70a8:	4b05      	ldr	r3, [pc, #20]	; (b70c0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b70aa:	6023      	str	r3, [r4, #0]
  {
   b70ac:	4b05      	ldr	r3, [pc, #20]	; (b70c4 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b70ae:	60a3      	str	r3, [r4, #8]
   b70b0:	2301      	movs	r3, #1
   b70b2:	7323      	strb	r3, [r4, #12]
   b70b4:	2300      	movs	r3, #0
   b70b6:	6123      	str	r3, [r4, #16]
   b70b8:	82a3      	strh	r3, [r4, #20]
{
}
   b70ba:	4620      	mov	r0, r4
   b70bc:	bd10      	pop	{r4, pc}
   b70be:	bf00      	nop
   b70c0:	000be488 	.word	0x000be488
   b70c4:	000be474 	.word	0x000be474

000b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b70c8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b70ca:	4c0b      	ldr	r4, [pc, #44]	; (b70f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b70cc:	7821      	ldrb	r1, [r4, #0]
   b70ce:	f3bf 8f5b 	dmb	ish
   b70d2:	f011 0101 	ands.w	r1, r1, #1
   b70d6:	d10b      	bne.n	b70f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b70d8:	4620      	mov	r0, r4
   b70da:	9101      	str	r1, [sp, #4]
   b70dc:	f7fc ffee 	bl	b40bc <__cxa_guard_acquire>
   b70e0:	9901      	ldr	r1, [sp, #4]
   b70e2:	b128      	cbz	r0, b70f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b70e4:	4805      	ldr	r0, [pc, #20]	; (b70fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b70e6:	f003 fcbd 	bl	baa64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b70ea:	4620      	mov	r0, r4
   b70ec:	f7fc ffeb 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b70f0:	4802      	ldr	r0, [pc, #8]	; (b70fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b70f2:	b002      	add	sp, #8
   b70f4:	bd10      	pop	{r4, pc}
   b70f6:	bf00      	nop
   b70f8:	2003e3e4 	.word	0x2003e3e4
   b70fc:	2003e3e8 	.word	0x2003e3e8

000b7100 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b7100:	b507      	push	{r0, r1, r2, lr}
   b7102:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b7104:	f7ff ffe0 	bl	b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7108:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b710a:	b003      	add	sp, #12
   b710c:	f85d eb04 	ldr.w	lr, [sp], #4
   b7110:	f003 bd60 	b.w	babd4 <_ZN8SPIClass8transferEh>

000b7114 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b7114:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b7116:	f7ff ffd7 	bl	b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b711a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b711e:	f003 bd5f 	b.w	babe0 <_ZN8SPIClass15attachInterruptEv>

000b7122 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b7122:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b7124:	f7ff ffd0 	bl	b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b7128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b712c:	f003 bd59 	b.w	babe2 <_ZN8SPIClass15detachInterruptEv>

000b7130 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b7130:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b7132:	7903      	ldrb	r3, [r0, #4]
   b7134:	2b04      	cmp	r3, #4
   b7136:	d020      	beq.n	b717a <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b7138:	2b03      	cmp	r3, #3
   b713a:	d020      	beq.n	b717e <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b713c:	2b02      	cmp	r3, #2
   b713e:	d020      	beq.n	b7182 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b7140:	4a11      	ldr	r2, [pc, #68]	; (b7188 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b7142:	4912      	ldr	r1, [pc, #72]	; (b718c <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b7144:	2b01      	cmp	r3, #1
   b7146:	bf18      	it	ne
   b7148:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b714a:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b714c:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b714e:	3901      	subs	r1, #1
   b7150:	bf18      	it	ne
   b7152:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b7154:	b133      	cbz	r3, b7164 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b7156:	2b01      	cmp	r3, #1
   b7158:	d004      	beq.n	b7164 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b715a:	2b02      	cmp	r3, #2
   b715c:	d002      	beq.n	b7164 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b715e:	2b03      	cmp	r3, #3
   b7160:	bf18      	it	ne
   b7162:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b7164:	2400      	movs	r4, #0
   b7166:	7304      	strb	r4, [r0, #12]
   b7168:	6102      	str	r2, [r0, #16]
   b716a:	7501      	strb	r1, [r0, #20]
   b716c:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b716e:	f7ff ffab 	bl	b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b7172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7176:	f003 bc7f 	b.w	baa78 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b717a:	4a05      	ldr	r2, [pc, #20]	; (b7190 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b717c:	e7e5      	b.n	b714a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b717e:	4a05      	ldr	r2, [pc, #20]	; (b7194 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b7180:	e7e3      	b.n	b714a <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b7182:	4a05      	ldr	r2, [pc, #20]	; (b7198 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b7184:	e7e1      	b.n	b714a <_ZN13RHHardwareSPI5beginEv+0x1a>
   b7186:	bf00      	nop
   b7188:	001e8480 	.word	0x001e8480
   b718c:	000f4240 	.word	0x000f4240
   b7190:	00f42400 	.word	0x00f42400
   b7194:	007a1200 	.word	0x007a1200
   b7198:	003d0900 	.word	0x003d0900

000b719c <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b719c:	b508      	push	{r3, lr}
        instance().end();
   b719e:	f7ff ff93 	bl	b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b71a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b71a6:	f003 bc7b 	b.w	baaa0 <_ZN8SPIClass3endEv>

000b71aa <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b71aa:	b510      	push	{r4, lr}
   b71ac:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b71ae:	f7ff ff8b 	bl	b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b71b2:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b71b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b71ba:	f003 bc9d 	b.w	baaf8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b71be <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b71be:	b508      	push	{r3, lr}
        instance().endTransaction();
   b71c0:	f7ff ff82 	bl	b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b71c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b71c8:	f003 bc7c 	b.w	baac4 <_ZN8SPIClass14endTransactionEv>

000b71cc <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b71cc:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b71ce:	f7ff ff7b 	bl	b70c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b71d2:	bd08      	pop	{r3, pc}

000b71d4 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b71d4:	2300      	movs	r3, #0
   b71d6:	4802      	ldr	r0, [pc, #8]	; (b71e0 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b71d8:	461a      	mov	r2, r3
   b71da:	4619      	mov	r1, r3
   b71dc:	f7ff bf60 	b.w	b70a0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b71e0:	2003e3f0 	.word	0x2003e3f0

000b71e4 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b71e4:	2a01      	cmp	r2, #1
   b71e6:	d105      	bne.n	b71f4 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b71e8:	7a00      	ldrb	r0, [r0, #8]
   b71ea:	780b      	ldrb	r3, [r1, #0]
   b71ec:	1a1b      	subs	r3, r3, r0
   b71ee:	4258      	negs	r0, r3
   b71f0:	4158      	adcs	r0, r3
   b71f2:	4770      	bx	lr
   b71f4:	2000      	movs	r0, #0
}
   b71f6:	4770      	bx	lr

000b71f8 <_ZN6RHMesh5doArpEh>:
{
   b71f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b71fc:	4c25      	ldr	r4, [pc, #148]	; (b7294 <_ZN6RHMesh5doArpEh+0x9c>)
   b71fe:	2301      	movs	r3, #1
{
   b7200:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b7202:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b7204:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7206:	2300      	movs	r3, #0
{
   b7208:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b720a:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b720c:	9300      	str	r3, [sp, #0]
   b720e:	2203      	movs	r2, #3
   b7210:	23ff      	movs	r3, #255	; 0xff
   b7212:	4621      	mov	r1, r4
{
   b7214:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7216:	f000 fbb7 	bl	b7988 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b721a:	b120      	cbz	r0, b7226 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b721c:	2500      	movs	r5, #0
}
   b721e:	4628      	mov	r0, r5
   b7220:	b006      	add	sp, #24
   b7222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b7226:	23fa      	movs	r3, #250	; 0xfa
   b7228:	f88d 3017 	strb.w	r3, [sp, #23]
   b722c:	f001 f944 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b7230:	f106 0904 	add.w	r9, r6, #4
   b7234:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b7236:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b723a:	f001 f93d 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
   b723e:	1a29      	subs	r1, r5, r0
   b7240:	2900      	cmp	r1, #0
   b7242:	ddeb      	ble.n	b721c <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b7244:	2200      	movs	r2, #0
   b7246:	b289      	uxth	r1, r1
   b7248:	4648      	mov	r0, r9
   b724a:	f7ff fdbe 	bl	b6dca <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b724e:	2800      	cmp	r0, #0
   b7250:	d0f3      	beq.n	b723a <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b7252:	2300      	movs	r3, #0
   b7254:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7258:	e9cd 3300 	strd	r3, r3, [sp]
   b725c:	f10d 0217 	add.w	r2, sp, #23
   b7260:	4621      	mov	r1, r4
   b7262:	4630      	mov	r0, r6
   b7264:	f000 fb9a 	bl	b799c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7268:	4605      	mov	r5, r0
   b726a:	2800      	cmp	r0, #0
   b726c:	d0e3      	beq.n	b7236 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b726e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b7272:	2b01      	cmp	r3, #1
   b7274:	d9df      	bls.n	b7236 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b7276:	f894 a000 	ldrb.w	sl, [r4]
   b727a:	f1ba 0f02 	cmp.w	sl, #2
   b727e:	d1da      	bne.n	b7236 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b7280:	4648      	mov	r0, r9
   b7282:	f7ff fde7 	bl	b6e54 <_ZN10RHDatagram10headerFromEv>
   b7286:	4653      	mov	r3, sl
   b7288:	4602      	mov	r2, r0
   b728a:	4639      	mov	r1, r7
   b728c:	4630      	mov	r0, r6
   b728e:	f000 faf3 	bl	b7878 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b7292:	e7c4      	b.n	b721e <_ZN6RHMesh5doArpEh+0x26>
   b7294:	2003e408 	.word	0x2003e408

000b7298 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b7298:	2a01      	cmp	r2, #1
{
   b729a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b729e:	4607      	mov	r7, r0
   b72a0:	460e      	mov	r6, r1
   b72a2:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b72a4:	d93b      	bls.n	b731e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b72a6:	794d      	ldrb	r5, [r1, #5]
   b72a8:	2d02      	cmp	r5, #2
   b72aa:	d130      	bne.n	b730e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b72ac:	f100 0804 	add.w	r8, r0, #4
   b72b0:	79c9      	ldrb	r1, [r1, #7]
   b72b2:	9101      	str	r1, [sp, #4]
   b72b4:	4640      	mov	r0, r8
   b72b6:	f7ff fdcd 	bl	b6e54 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b72ba:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b72bc:	462b      	mov	r3, r5
   b72be:	4602      	mov	r2, r0
   b72c0:	9901      	ldr	r1, [sp, #4]
   b72c2:	4638      	mov	r0, r7
   b72c4:	f000 fad8 	bl	b7878 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b72c8:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b72ca:	f106 0308 	add.w	r3, r6, #8
   b72ce:	2400      	movs	r4, #0
   b72d0:	4622      	mov	r2, r4
   b72d2:	4295      	cmp	r5, r2
   b72d4:	f104 0401 	add.w	r4, r4, #1
   b72d8:	b2e4      	uxtb	r4, r4
   b72da:	d904      	bls.n	b72e6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b72dc:	f813 2b01 	ldrb.w	r2, [r3], #1
   b72e0:	7a39      	ldrb	r1, [r7, #8]
   b72e2:	4291      	cmp	r1, r2
   b72e4:	d1f4      	bne.n	b72d0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b72e6:	f104 0108 	add.w	r1, r4, #8
   b72ea:	440e      	add	r6, r1
	while (i < numRoutes)
   b72ec:	42a5      	cmp	r5, r4
   b72ee:	d916      	bls.n	b731e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b72f0:	f816 1b01 	ldrb.w	r1, [r6], #1
   b72f4:	9101      	str	r1, [sp, #4]
   b72f6:	4640      	mov	r0, r8
   b72f8:	f7ff fdac 	bl	b6e54 <_ZN10RHDatagram10headerFromEv>
   b72fc:	3401      	adds	r4, #1
   b72fe:	4602      	mov	r2, r0
   b7300:	9901      	ldr	r1, [sp, #4]
   b7302:	2302      	movs	r3, #2
   b7304:	4638      	mov	r0, r7
   b7306:	b2e4      	uxtb	r4, r4
   b7308:	f000 fab6 	bl	b7878 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b730c:	e7ee      	b.n	b72ec <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b730e:	2d03      	cmp	r5, #3
   b7310:	d105      	bne.n	b731e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b7312:	7989      	ldrb	r1, [r1, #6]
}
   b7314:	b002      	add	sp, #8
   b7316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b731a:	f000 ba96 	b.w	b784a <_ZN8RHRouter13deleteRouteToEh>
}
   b731e:	b002      	add	sp, #8
   b7320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7324 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b7324:	b510      	push	{r4, lr}
   b7326:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b7328:	f000 fae6 	bl	b78f8 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b732c:	4b01      	ldr	r3, [pc, #4]	; (b7334 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b732e:	6023      	str	r3, [r4, #0]
}
   b7330:	4620      	mov	r0, r4
   b7332:	bd10      	pop	{r4, pc}
   b7334:	000be4bc 	.word	0x000be4bc

000b7338 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b733c:	2af9      	cmp	r2, #249	; 0xf9
{
   b733e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b7342:	4606      	mov	r6, r0
   b7344:	460f      	mov	r7, r1
   b7346:	4614      	mov	r4, r2
   b7348:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b734a:	d825      	bhi.n	b7398 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b734c:	2bff      	cmp	r3, #255	; 0xff
   b734e:	d114      	bne.n	b737a <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7350:	f8df 8048 	ldr.w	r8, [pc, #72]	; b739c <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b7354:	4640      	mov	r0, r8
   b7356:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7358:	4622      	mov	r2, r4
   b735a:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b735c:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b7360:	f006 f82e 	bl	bd3c0 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7364:	1c62      	adds	r2, r4, #1
   b7366:	f8cd 9020 	str.w	r9, [sp, #32]
   b736a:	462b      	mov	r3, r5
   b736c:	4641      	mov	r1, r8
   b736e:	4630      	mov	r0, r6
   b7370:	b2d2      	uxtb	r2, r2
}
   b7372:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7376:	f000 bb07 	b.w	b7988 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b737a:	4619      	mov	r1, r3
   b737c:	f000 fa21 	bl	b77c2 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b7380:	2800      	cmp	r0, #0
   b7382:	d1e5      	bne.n	b7350 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b7384:	6833      	ldr	r3, [r6, #0]
   b7386:	4629      	mov	r1, r5
   b7388:	689b      	ldr	r3, [r3, #8]
   b738a:	4630      	mov	r0, r6
   b738c:	4798      	blx	r3
   b738e:	2800      	cmp	r0, #0
   b7390:	d1de      	bne.n	b7350 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b7392:	2002      	movs	r0, #2
}
   b7394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7398:	2001      	movs	r0, #1
   b739a:	e7fb      	b.n	b7394 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b739c:	2003e408 	.word	0x2003e408

000b73a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b73a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b73a4:	b089      	sub	sp, #36	; 0x24
   b73a6:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b73a8:	23fa      	movs	r3, #250	; 0xfa
   b73aa:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b73ae:	f10d 031f 	add.w	r3, sp, #31
   b73b2:	9303      	str	r3, [sp, #12]
   b73b4:	f10d 031e 	add.w	r3, sp, #30
   b73b8:	9302      	str	r3, [sp, #8]
   b73ba:	4e5d      	ldr	r6, [pc, #372]	; (b7530 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b73bc:	f10d 031d 	add.w	r3, sp, #29
   b73c0:	9301      	str	r3, [sp, #4]
   b73c2:	ab07      	add	r3, sp, #28
   b73c4:	9300      	str	r3, [sp, #0]
{     
   b73c6:	4689      	mov	r9, r1
   b73c8:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b73ca:	f10d 031b 	add.w	r3, sp, #27
   b73ce:	f10d 021a 	add.w	r2, sp, #26
   b73d2:	4631      	mov	r1, r6
{     
   b73d4:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b73d8:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b73da:	f000 fadf 	bl	b799c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b73de:	4604      	mov	r4, r0
   b73e0:	b920      	cbnz	r0, b73ec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b73e2:	2400      	movs	r4, #0
}
   b73e4:	4620      	mov	r0, r4
   b73e6:	b009      	add	sp, #36	; 0x24
   b73e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b73ec:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b73f0:	b373      	cbz	r3, b7450 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b73f2:	7832      	ldrb	r2, [r6, #0]
   b73f4:	bb62      	cbnz	r2, b7450 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b73f6:	f1b8 0f00 	cmp.w	r8, #0
   b73fa:	d003      	beq.n	b7404 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b73fc:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b7400:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b7404:	f1bb 0f00 	cmp.w	fp, #0
   b7408:	d003      	beq.n	b7412 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b740a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b740e:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b7412:	f1ba 0f00 	cmp.w	sl, #0
   b7416:	d003      	beq.n	b7420 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b7418:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b741c:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b7420:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b7422:	b11a      	cbz	r2, b742c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b7424:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7426:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b742a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b742c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b742e:	b11a      	cbz	r2, b7438 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b7430:	9915      	ldr	r1, [sp, #84]	; 0x54
   b7432:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7436:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7438:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b743a:	493e      	ldr	r1, [pc, #248]	; (b7534 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b743c:	3b01      	subs	r3, #1
   b743e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7440:	429a      	cmp	r2, r3
		*len = msgLen;
   b7442:	bf88      	it	hi
   b7444:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7446:	783a      	ldrb	r2, [r7, #0]
   b7448:	4648      	mov	r0, r9
   b744a:	f005 ffb9 	bl	bd3c0 <memcpy>
	    return true;
   b744e:	e7c9      	b.n	b73e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b7450:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7454:	2aff      	cmp	r2, #255	; 0xff
   b7456:	d1c4      	bne.n	b73e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7458:	2b01      	cmp	r3, #1
   b745a:	d9c2      	bls.n	b73e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b745c:	7832      	ldrb	r2, [r6, #0]
   b745e:	2a01      	cmp	r2, #1
   b7460:	d1bf      	bne.n	b73e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b7462:	7a2a      	ldrb	r2, [r5, #8]
   b7464:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7468:	42a2      	cmp	r2, r4
   b746a:	d0ba      	beq.n	b73e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b746c:	1edf      	subs	r7, r3, #3
   b746e:	4932      	ldr	r1, [pc, #200]	; (b7538 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b7470:	b2ff      	uxtb	r7, r7
   b7472:	2300      	movs	r3, #0
   b7474:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b7478:	4547      	cmp	r7, r8
   b747a:	d906      	bls.n	b748a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b747c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7480:	4282      	cmp	r2, r0
   b7482:	f103 0301 	add.w	r3, r3, #1
   b7486:	d1f5      	bne.n	b7474 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b7488:	e7ab      	b.n	b73e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b748a:	f105 0904 	add.w	r9, r5, #4
   b748e:	4648      	mov	r0, r9
   b7490:	f7ff fce0 	bl	b6e54 <_ZN10RHDatagram10headerFromEv>
   b7494:	2302      	movs	r3, #2
   b7496:	4602      	mov	r2, r0
   b7498:	4621      	mov	r1, r4
   b749a:	4628      	mov	r0, r5
   b749c:	f000 f9ec 	bl	b7878 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b74a0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b74a4:	b193      	cbz	r3, b74cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b74a6:	4c22      	ldr	r4, [pc, #136]	; (b7530 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b74a8:	1ba3      	subs	r3, r4, r6
   b74aa:	b2db      	uxtb	r3, r3
   b74ac:	429f      	cmp	r7, r3
   b74ae:	d90c      	bls.n	b74ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b74b0:	78e1      	ldrb	r1, [r4, #3]
   b74b2:	9105      	str	r1, [sp, #20]
   b74b4:	4648      	mov	r0, r9
   b74b6:	f7ff fccd 	bl	b6e54 <_ZN10RHDatagram10headerFromEv>
   b74ba:	9905      	ldr	r1, [sp, #20]
   b74bc:	4602      	mov	r2, r0
   b74be:	2302      	movs	r3, #2
   b74c0:	4628      	mov	r0, r5
   b74c2:	f000 f9d9 	bl	b7878 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b74c6:	3401      	adds	r4, #1
   b74c8:	e7ee      	b.n	b74a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b74ca:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b74cc:	682b      	ldr	r3, [r5, #0]
   b74ce:	7872      	ldrb	r2, [r6, #1]
   b74d0:	68db      	ldr	r3, [r3, #12]
   b74d2:	491a      	ldr	r1, [pc, #104]	; (b753c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b74d4:	4628      	mov	r0, r5
   b74d6:	4798      	blx	r3
   b74d8:	4604      	mov	r4, r0
   b74da:	b160      	cbz	r0, b74f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b74dc:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b74de:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b74e0:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b74e2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b74e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b74ea:	4911      	ldr	r1, [pc, #68]	; (b7530 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b74ec:	9400      	str	r4, [sp, #0]
   b74ee:	4628      	mov	r0, r5
   b74f0:	f000 fa4a 	bl	b7988 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b74f4:	e776      	b.n	b73e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b74f6:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b74fa:	4543      	cmp	r3, r8
   b74fc:	f67f af71 	bls.w	b73e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b7500:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7504:	2b00      	cmp	r3, #0
   b7506:	f43f af6c 	beq.w	b73e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b750a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b750e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7510:	4907      	ldr	r1, [pc, #28]	; (b7530 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b7512:	443e      	add	r6, r7
		tmpMessageLen++;
   b7514:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b7516:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7518:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b751c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b751e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7520:	9300      	str	r3, [sp, #0]
   b7522:	4628      	mov	r0, r5
   b7524:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b7526:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b752a:	f000 f9f7 	bl	b791c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b752e:	e759      	b.n	b73e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b7530:	2003e408 	.word	0x2003e408
   b7534:	2003e409 	.word	0x2003e409
   b7538:	2003e40b 	.word	0x2003e40b
   b753c:	2003e40a 	.word	0x2003e40a

000b7540 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b7540:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7542:	b085      	sub	sp, #20
   b7544:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7546:	3004      	adds	r0, #4
{
   b7548:	460e      	mov	r6, r1
   b754a:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b754c:	f7ff fc82 	bl	b6e54 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b7550:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7552:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b7554:	4631      	mov	r1, r6
   b7556:	4628      	mov	r0, r5
   b7558:	f000 f94a 	bl	b77f0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b755c:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b755e:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7560:	d001      	beq.n	b7566 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b7562:	2805      	cmp	r0, #5
   b7564:	d11b      	bne.n	b759e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b7566:	7831      	ldrb	r1, [r6, #0]
   b7568:	4628      	mov	r0, r5
   b756a:	f000 f96e 	bl	b784a <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b756e:	7872      	ldrb	r2, [r6, #1]
   b7570:	7a2b      	ldrb	r3, [r5, #8]
   b7572:	429a      	cmp	r2, r3
   b7574:	d013      	beq.n	b759e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b7576:	4c0b      	ldr	r4, [pc, #44]	; (b75a4 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b7578:	2303      	movs	r3, #3
   b757a:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b757c:	7833      	ldrb	r3, [r6, #0]
   b757e:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b7580:	7871      	ldrb	r1, [r6, #1]
   b7582:	2302      	movs	r3, #2
   b7584:	463a      	mov	r2, r7
   b7586:	4628      	mov	r0, r5
   b7588:	f000 f976 	bl	b7878 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b758c:	2300      	movs	r3, #0
   b758e:	9300      	str	r3, [sp, #0]
   b7590:	4621      	mov	r1, r4
   b7592:	7873      	ldrb	r3, [r6, #1]
   b7594:	2202      	movs	r2, #2
   b7596:	4628      	mov	r0, r5
   b7598:	f000 f9f6 	bl	b7988 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b759c:	4604      	mov	r4, r0
}
   b759e:	4620      	mov	r0, r4
   b75a0:	b005      	add	sp, #20
   b75a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b75a4:	2003e408 	.word	0x2003e408

000b75a8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b75a8:	b510      	push	{r4, lr}
   b75aa:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b75ac:	f7ff fc02 	bl	b6db4 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b75b0:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b75b2:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b75b4:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b75b6:	2303      	movs	r3, #3
    _retransmissions = 0;
   b75b8:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b75ba:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b75bc:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b75be:	f44f 7280 	mov.w	r2, #256	; 0x100
   b75c2:	f104 0011 	add.w	r0, r4, #17
   b75c6:	f005 ff23 	bl	bd410 <memset>
}
   b75ca:	4620      	mov	r0, r4
   b75cc:	bd10      	pop	{r4, pc}

000b75ce <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b75ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b75d0:	4604      	mov	r4, r0
   b75d2:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b75d4:	f7ff fc32 	bl	b6e3c <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b75d8:	4620      	mov	r0, r4
   b75da:	2200      	movs	r2, #0
   b75dc:	2180      	movs	r1, #128	; 0x80
   b75de:	f7ff fc31 	bl	b6e44 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b75e2:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b75e4:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b75e6:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b75ea:	f10d 010f 	add.w	r1, sp, #15
   b75ee:	2201      	movs	r2, #1
   b75f0:	4620      	mov	r0, r4
   b75f2:	f7ff fbf4 	bl	b6dde <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b75f6:	4620      	mov	r0, r4
   b75f8:	f7ff fbe3 	bl	b6dc2 <_ZN10RHDatagram14waitPacketSentEv>
}
   b75fc:	b004      	add	sp, #16
   b75fe:	bd10      	pop	{r4, pc}

000b7600 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b7600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7604:	7b05      	ldrb	r5, [r0, #12]
   b7606:	3501      	adds	r5, #1
   b7608:	b2ed      	uxtb	r5, r5
{
   b760a:	b087      	sub	sp, #28
   b760c:	4604      	mov	r4, r0
   b760e:	4689      	mov	r9, r1
   b7610:	4692      	mov	sl, r2
   b7612:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b7614:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b7616:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b7618:	7c22      	ldrb	r2, [r4, #16]
   b761a:	463b      	mov	r3, r7
   b761c:	429a      	cmp	r2, r3
   b761e:	f107 0701 	add.w	r7, r7, #1
   b7622:	b2ff      	uxtb	r7, r7
   b7624:	d36b      	bcc.n	b76fe <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b7626:	4629      	mov	r1, r5
   b7628:	4620      	mov	r0, r4
   b762a:	f7ff fc07 	bl	b6e3c <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b762e:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b7630:	bf0d      	iteet	eq
   b7632:	22c0      	moveq	r2, #192	; 0xc0
   b7634:	2280      	movne	r2, #128	; 0x80
   b7636:	2140      	movne	r1, #64	; 0x40
   b7638:	2100      	moveq	r1, #0
   b763a:	4620      	mov	r0, r4
   b763c:	f7ff fc02 	bl	b6e44 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b7640:	4643      	mov	r3, r8
   b7642:	4652      	mov	r2, sl
   b7644:	4649      	mov	r1, r9
   b7646:	4620      	mov	r0, r4
   b7648:	f7ff fbc9 	bl	b6dde <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b764c:	4620      	mov	r0, r4
   b764e:	f7ff fbb8 	bl	b6dc2 <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b7652:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b7656:	d054      	beq.n	b7702 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b7658:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b765a:	bf82      	ittt	hi
   b765c:	68a3      	ldrhi	r3, [r4, #8]
   b765e:	3301      	addhi	r3, #1
   b7660:	60a3      	strhi	r3, [r4, #8]
   b7662:	f000 ff29 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b7666:	f44f 7180 	mov.w	r1, #256	; 0x100
   b766a:	4683      	mov	fp, r0
   b766c:	2000      	movs	r0, #0
   b766e:	89e6      	ldrh	r6, [r4, #14]
   b7670:	f003 f9df 	bl	baa32 <_Z6randomii>
   b7674:	4370      	muls	r0, r6
   b7676:	bf48      	it	mi
   b7678:	30ff      	addmi	r0, #255	; 0xff
   b767a:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b767e:	fa1b f686 	uxtah	r6, fp, r6
   b7682:	f000 ff19 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
   b7686:	1a30      	subs	r0, r6, r0
   b7688:	2800      	cmp	r0, #0
   b768a:	ddc5      	ble.n	b7618 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b768c:	b281      	uxth	r1, r0
   b768e:	2200      	movs	r2, #0
   b7690:	4620      	mov	r0, r4
   b7692:	f7ff fb9a 	bl	b6dca <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7696:	2800      	cmp	r0, #0
   b7698:	d0f3      	beq.n	b7682 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b769a:	f10d 0317 	add.w	r3, sp, #23
   b769e:	9302      	str	r3, [sp, #8]
   b76a0:	f10d 0316 	add.w	r3, sp, #22
   b76a4:	9301      	str	r3, [sp, #4]
   b76a6:	2200      	movs	r2, #0
   b76a8:	f10d 0315 	add.w	r3, sp, #21
   b76ac:	9300      	str	r3, [sp, #0]
   b76ae:	4611      	mov	r1, r2
   b76b0:	ab05      	add	r3, sp, #20
   b76b2:	4620      	mov	r0, r4
   b76b4:	f7ff fbda 	bl	b6e6c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b76b8:	2800      	cmp	r0, #0
   b76ba:	d0e2      	beq.n	b7682 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b76bc:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b76c0:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b76c4:	4542      	cmp	r2, r8
   b76c6:	d10e      	bne.n	b76e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b76c8:	f894 c004 	ldrb.w	ip, [r4, #4]
   b76cc:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b76d0:	458c      	cmp	ip, r1
   b76d2:	d108      	bne.n	b76e6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b76d4:	2b00      	cmp	r3, #0
   b76d6:	da08      	bge.n	b76ea <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b76d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b76dc:	42ab      	cmp	r3, r5
   b76de:	d1d0      	bne.n	b7682 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b76e0:	b007      	add	sp, #28
   b76e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b76e6:	2b00      	cmp	r3, #0
   b76e8:	dbcb      	blt.n	b7682 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b76ea:	18a1      	adds	r1, r4, r2
   b76ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b76f0:	7c49      	ldrb	r1, [r1, #17]
   b76f2:	4299      	cmp	r1, r3
   b76f4:	d1c5      	bne.n	b7682 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b76f6:	4620      	mov	r0, r4
   b76f8:	f7ff ff69 	bl	b75ce <_ZN18RHReliableDatagram11acknowledgeEhh>
   b76fc:	e7c1      	b.n	b7682 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b76fe:	2000      	movs	r0, #0
   b7700:	e7ee      	b.n	b76e0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b7702:	2001      	movs	r0, #1
   b7704:	e7ec      	b.n	b76e0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b7706 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b7706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b770a:	b089      	sub	sp, #36	; 0x24
   b770c:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7710:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b7714:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b7716:	4604      	mov	r4, r0
   b7718:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b771a:	f7ff fb4e 	bl	b6dba <_ZN10RHDatagram9availableEv>
   b771e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b7722:	b920      	cbnz	r0, b772e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b7724:	2500      	movs	r5, #0
}
   b7726:	4628      	mov	r0, r5
   b7728:	b009      	add	sp, #36	; 0x24
   b772a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b772e:	f10d 031f 	add.w	r3, sp, #31
   b7732:	9302      	str	r3, [sp, #8]
   b7734:	f10d 031e 	add.w	r3, sp, #30
   b7738:	9301      	str	r3, [sp, #4]
   b773a:	f10d 031d 	add.w	r3, sp, #29
   b773e:	9300      	str	r3, [sp, #0]
   b7740:	4620      	mov	r0, r4
   b7742:	ab07      	add	r3, sp, #28
   b7744:	f7ff fb92 	bl	b6e6c <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7748:	4605      	mov	r5, r0
   b774a:	2800      	cmp	r0, #0
   b774c:	d0ea      	beq.n	b7724 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b774e:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b7752:	2b00      	cmp	r3, #0
   b7754:	dbe6      	blt.n	b7724 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b7756:	7922      	ldrb	r2, [r4, #4]
   b7758:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b775c:	429a      	cmp	r2, r3
   b775e:	d106      	bne.n	b776e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b7760:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7764:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b7768:	4620      	mov	r0, r4
   b776a:	f7ff ff30 	bl	b75ce <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b776e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7772:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b7776:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b777a:	f012 0f40 	tst.w	r2, #64	; 0x40
   b777e:	440c      	add	r4, r1
   b7780:	d002      	beq.n	b7788 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b7782:	7c60      	ldrb	r0, [r4, #17]
   b7784:	4298      	cmp	r0, r3
   b7786:	d0cd      	beq.n	b7724 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7788:	b106      	cbz	r6, b778c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b778a:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b778c:	f1b9 0f00 	cmp.w	r9, #0
   b7790:	d003      	beq.n	b779a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b7792:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b7796:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b779a:	f1b8 0f00 	cmp.w	r8, #0
   b779e:	d001      	beq.n	b77a4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b77a0:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b77a4:	b107      	cbz	r7, b77a8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b77a6:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b77a8:	7463      	strb	r3, [r4, #17]
		return true;
   b77aa:	e7bc      	b.n	b7726 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b77ac <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b77ac:	4770      	bx	lr

000b77ae <_ZN8RHRouter4initEv>:
{
   b77ae:	b510      	push	{r4, lr}
   b77b0:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b77b2:	3004      	adds	r0, #4
   b77b4:	f7ff fb34 	bl	b6e20 <_ZN10RHDatagram4initEv>
    if (ret)
   b77b8:	b110      	cbz	r0, b77c0 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b77ba:	231e      	movs	r3, #30
   b77bc:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b77c0:	bd10      	pop	{r4, pc}

000b77c2 <_ZN8RHRouter10getRouteToEh>:
{
   b77c2:	b510      	push	{r4, lr}
   b77c4:	4602      	mov	r2, r0
   b77c6:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b77c8:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b77cc:	428c      	cmp	r4, r1
   b77ce:	d108      	bne.n	b77e2 <_ZN8RHRouter10getRouteToEh+0x20>
   b77d0:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b77d4:	b12c      	cbz	r4, b77e2 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b77d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b77da:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b77de:	4418      	add	r0, r3
}
   b77e0:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b77e2:	3301      	adds	r3, #1
   b77e4:	2b32      	cmp	r3, #50	; 0x32
   b77e6:	f102 0203 	add.w	r2, r2, #3
   b77ea:	d1ed      	bne.n	b77c8 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b77ec:	2000      	movs	r0, #0
   b77ee:	e7f7      	b.n	b77e0 <_ZN8RHRouter10getRouteToEh+0x1e>

000b77f0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b77f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b77f2:	780b      	ldrb	r3, [r1, #0]
   b77f4:	2bff      	cmp	r3, #255	; 0xff
{
   b77f6:	4605      	mov	r5, r0
   b77f8:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b77fa:	d006      	beq.n	b780a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b77fc:	4619      	mov	r1, r3
   b77fe:	9201      	str	r2, [sp, #4]
   b7800:	f7ff ffdf 	bl	b77c2 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b7804:	b158      	cbz	r0, b781e <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b7806:	7843      	ldrb	r3, [r0, #1]
   b7808:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b780a:	4621      	mov	r1, r4
   b780c:	1d28      	adds	r0, r5, #4
   b780e:	f7ff fef7 	bl	b7600 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b7812:	2800      	cmp	r0, #0
   b7814:	bf14      	ite	ne
   b7816:	2000      	movne	r0, #0
   b7818:	2005      	moveq	r0, #5
}
   b781a:	b003      	add	sp, #12
   b781c:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b781e:	2002      	movs	r0, #2
   b7820:	e7fb      	b.n	b781a <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b7822 <_ZN8RHRouter11deleteRouteEh>:
{
   b7822:	b510      	push	{r4, lr}
   b7824:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b7828:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b782a:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b782e:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b7832:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b7836:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b783a:	4421      	add	r1, r4
   b783c:	4420      	add	r0, r4
   b783e:	f005 fdbf 	bl	bd3c0 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b7842:	2300      	movs	r3, #0
   b7844:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b7848:	bd10      	pop	{r4, pc}

000b784a <_ZN8RHRouter13deleteRouteToEh>:
{
   b784a:	b538      	push	{r3, r4, r5, lr}
   b784c:	460a      	mov	r2, r1
   b784e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7850:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b7854:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b7858:	b2d9      	uxtb	r1, r3
   b785a:	5d65      	ldrb	r5, [r4, r5]
   b785c:	4295      	cmp	r5, r2
   b785e:	d103      	bne.n	b7868 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b7860:	f7ff ffdf 	bl	b7822 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b7864:	2001      	movs	r0, #1
}
   b7866:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7868:	3301      	adds	r3, #1
   b786a:	2b32      	cmp	r3, #50	; 0x32
   b786c:	d1f2      	bne.n	b7854 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b786e:	2000      	movs	r0, #0
   b7870:	e7f9      	b.n	b7866 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b7872 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b7872:	2100      	movs	r1, #0
   b7874:	f7ff bfd5 	b.w	b7822 <_ZN8RHRouter11deleteRouteEh>

000b7878 <_ZN8RHRouter10addRouteToEhhh>:
{
   b7878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b787a:	4616      	mov	r6, r2
   b787c:	461f      	mov	r7, r3
   b787e:	4604      	mov	r4, r0
   b7880:	460d      	mov	r5, r1
   b7882:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7884:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7888:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b788c:	5c11      	ldrb	r1, [r2, r0]
   b788e:	42a9      	cmp	r1, r5
   b7890:	d105      	bne.n	b789e <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b7892:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b7894:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7898:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b789c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b789e:	3301      	adds	r3, #1
   b78a0:	2b32      	cmp	r3, #50	; 0x32
   b78a2:	d1f1      	bne.n	b7888 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b78a4:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b78a6:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b78aa:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b78ae:	5c11      	ldrb	r1, [r2, r0]
   b78b0:	b919      	cbnz	r1, b78ba <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b78b2:	4420      	add	r0, r4
   b78b4:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b78b8:	e7ec      	b.n	b7894 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b78ba:	3301      	adds	r3, #1
   b78bc:	2b32      	cmp	r3, #50	; 0x32
   b78be:	d1f4      	bne.n	b78aa <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b78c0:	4620      	mov	r0, r4
   b78c2:	f7ff ffd6 	bl	b7872 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b78c6:	4620      	mov	r0, r4
   b78c8:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b78cc:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b78d0:	b92a      	cbnz	r2, b78de <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b78d2:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b78d6:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b78da:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b78de:	3003      	adds	r0, #3
   b78e0:	4298      	cmp	r0, r3
   b78e2:	d1f3      	bne.n	b78cc <_ZN8RHRouter10addRouteToEhhh+0x54>
   b78e4:	e7da      	b.n	b789c <_ZN8RHRouter10addRouteToEhhh+0x24>

000b78e6 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b78e6:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b78ea:	2200      	movs	r2, #0
   b78ec:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b78f0:	3003      	adds	r0, #3
   b78f2:	4298      	cmp	r0, r3
   b78f4:	d1fa      	bne.n	b78ec <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b78f6:	4770      	bx	lr

000b78f8 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b78f8:	b510      	push	{r4, lr}
   b78fa:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b78fc:	3004      	adds	r0, #4
   b78fe:	f7ff fe53 	bl	b75a8 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b7902:	4b05      	ldr	r3, [pc, #20]	; (b7918 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b7904:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7906:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b790a:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b790c:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b7910:	f7ff ffe9 	bl	b78e6 <_ZN8RHRouter17clearRoutingTableEv>
}
   b7914:	4620      	mov	r0, r4
   b7916:	bd10      	pop	{r4, pc}
   b7918:	000be4d4 	.word	0x000be4d4

000b791c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b791c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7920:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7922:	6840      	ldr	r0, [r0, #4]
{
   b7924:	9101      	str	r1, [sp, #4]
   b7926:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7928:	6803      	ldr	r3, [r0, #0]
{
   b792a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b792e:	699b      	ldr	r3, [r3, #24]
{
   b7930:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b7934:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b7936:	4798      	blx	r3
   b7938:	f106 0805 	add.w	r8, r6, #5
   b793c:	4580      	cmp	r8, r0
   b793e:	d81c      	bhi.n	b797a <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b7940:	4d10      	ldr	r5, [pc, #64]	; (b7984 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b7942:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b7944:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b7948:	2300      	movs	r3, #0
   b794a:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b794c:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b7950:	70eb      	strb	r3, [r5, #3]
   b7952:	1c5a      	adds	r2, r3, #1
   b7954:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b7958:	1d68      	adds	r0, r5, #5
   b795a:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b795c:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b795e:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b7962:	f005 fd2d 	bl	bd3c0 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7966:	6823      	ldr	r3, [r4, #0]
   b7968:	685b      	ldr	r3, [r3, #4]
   b796a:	fa5f f288 	uxtb.w	r2, r8
   b796e:	4629      	mov	r1, r5
   b7970:	4620      	mov	r0, r4
}
   b7972:	b002      	add	sp, #8
   b7974:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7978:	4718      	bx	r3
}
   b797a:	2001      	movs	r0, #1
   b797c:	b002      	add	sp, #8
   b797e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7982:	bf00      	nop
   b7984:	2003e502 	.word	0x2003e502

000b7988 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b7988:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b798a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b798e:	9401      	str	r4, [sp, #4]
   b7990:	7a04      	ldrb	r4, [r0, #8]
   b7992:	9400      	str	r4, [sp, #0]
   b7994:	f7ff ffc2 	bl	b791c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b7998:	b002      	add	sp, #8
   b799a:	bd10      	pop	{r4, pc}

000b799c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79a0:	b087      	sub	sp, #28
   b79a2:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b79a4:	23ff      	movs	r3, #255	; 0xff
   b79a6:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b79aa:	f10d 0317 	add.w	r3, sp, #23
   b79ae:	9302      	str	r3, [sp, #8]
   b79b0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b7a84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b79b4:	f10d 0316 	add.w	r3, sp, #22
   b79b8:	9301      	str	r3, [sp, #4]
   b79ba:	f10d 0315 	add.w	r3, sp, #21
   b79be:	9300      	str	r3, [sp, #0]
{  
   b79c0:	4604      	mov	r4, r0
   b79c2:	4688      	mov	r8, r1
   b79c4:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b79c6:	ab05      	add	r3, sp, #20
   b79c8:	f10d 0213 	add.w	r2, sp, #19
   b79cc:	4649      	mov	r1, r9
   b79ce:	3004      	adds	r0, #4
{  
   b79d0:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b79d4:	f7ff fe97 	bl	b7706 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b79d8:	4605      	mov	r5, r0
   b79da:	b908      	cbnz	r0, b79e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b79dc:	2500      	movs	r5, #0
   b79de:	e038      	b.n	b7a52 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b79e0:	6823      	ldr	r3, [r4, #0]
   b79e2:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b79e6:	681b      	ldr	r3, [r3, #0]
   b79e8:	4649      	mov	r1, r9
   b79ea:	4620      	mov	r0, r4
   b79ec:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b79ee:	f899 3000 	ldrb.w	r3, [r9]
   b79f2:	7a22      	ldrb	r2, [r4, #8]
   b79f4:	429a      	cmp	r2, r3
   b79f6:	d001      	beq.n	b79fc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b79f8:	2bff      	cmp	r3, #255	; 0xff
   b79fa:	d12e      	bne.n	b7a5a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b79fc:	b117      	cbz	r7, b7a04 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b79fe:	4b21      	ldr	r3, [pc, #132]	; (b7a84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7a00:	785b      	ldrb	r3, [r3, #1]
   b7a02:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b7a04:	f1bb 0f00 	cmp.w	fp, #0
   b7a08:	d003      	beq.n	b7a12 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b7a0a:	4b1e      	ldr	r3, [pc, #120]	; (b7a84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7a0c:	781b      	ldrb	r3, [r3, #0]
   b7a0e:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b7a12:	f1ba 0f00 	cmp.w	sl, #0
   b7a16:	d003      	beq.n	b7a20 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b7a18:	4b1a      	ldr	r3, [pc, #104]	; (b7a84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7a1a:	78db      	ldrb	r3, [r3, #3]
   b7a1c:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b7a20:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b7a22:	b11b      	cbz	r3, b7a2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b7a24:	4b17      	ldr	r3, [pc, #92]	; (b7a84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7a26:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b7a28:	791b      	ldrb	r3, [r3, #4]
   b7a2a:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b7a2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7a2e:	b11b      	cbz	r3, b7a38 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b7a30:	4b14      	ldr	r3, [pc, #80]	; (b7a84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7a32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7a34:	789b      	ldrb	r3, [r3, #2]
   b7a36:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7a38:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b7a3c:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7a3e:	4912      	ldr	r1, [pc, #72]	; (b7a88 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7a40:	3b05      	subs	r3, #5
   b7a42:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7a44:	429a      	cmp	r2, r3
		*len = msgLen;
   b7a46:	bf88      	it	hi
   b7a48:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7a4a:	7832      	ldrb	r2, [r6, #0]
   b7a4c:	4640      	mov	r0, r8
   b7a4e:	f005 fcb7 	bl	bd3c0 <memcpy>
}
   b7a52:	4628      	mov	r0, r5
   b7a54:	b007      	add	sp, #28
   b7a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b7a5a:	f899 3002 	ldrb.w	r3, [r9, #2]
   b7a5e:	1c5a      	adds	r2, r3, #1
   b7a60:	f889 2002 	strb.w	r2, [r9, #2]
   b7a64:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b7a68:	429a      	cmp	r2, r3
   b7a6a:	d9b7      	bls.n	b79dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b7a6c:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b7a70:	2b00      	cmp	r3, #0
   b7a72:	d0b3      	beq.n	b79dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b7a74:	6823      	ldr	r3, [r4, #0]
   b7a76:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7a7a:	685b      	ldr	r3, [r3, #4]
   b7a7c:	4649      	mov	r1, r9
   b7a7e:	4620      	mov	r0, r4
   b7a80:	4798      	blx	r3
   b7a82:	e7ab      	b.n	b79dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b7a84:	2003e502 	.word	0x2003e502
   b7a88:	2003e507 	.word	0x2003e507

000b7a8c <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7a8c:	b510      	push	{r4, lr}
   b7a8e:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7a90:	6a00      	ldr	r0, [r0, #32]
   b7a92:	6803      	ldr	r3, [r0, #0]
   b7a94:	68db      	ldr	r3, [r3, #12]
   b7a96:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b7a98:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7a9c:	28ff      	cmp	r0, #255	; 0xff
   b7a9e:	d002      	beq.n	b7aa6 <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7aa0:	2101      	movs	r1, #1
   b7aa2:	f003 fd9f 	bl	bb5e4 <pinMode>

    deselectSlave();
   b7aa6:	6823      	ldr	r3, [r4, #0]
   b7aa8:	4620      	mov	r0, r4
   b7aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7aac:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b7aae:	2064      	movs	r0, #100	; 0x64
   b7ab0:	f001 f86e 	bl	b8b90 <delay>
#endif
    
    return true;
}
   b7ab4:	2001      	movs	r0, #1
   b7ab6:	bd10      	pop	{r4, pc}

000b7ab8 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b7ab8:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7abc:	2100      	movs	r1, #0
   b7abe:	f003 bda2 	b.w	bb606 <digitalWrite>

000b7ac2 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b7ac2:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7ac6:	2101      	movs	r1, #1
   b7ac8:	f003 bd9d 	b.w	bb606 <digitalWrite>

000b7acc <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b7acc:	b570      	push	{r4, r5, r6, lr}
   b7ace:	4604      	mov	r4, r0
   b7ad0:	460d      	mov	r5, r1
   b7ad2:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b7ad4:	f7ff fa7e 	bl	b6fd4 <_ZN15RHGenericDriverC1Ev>
   b7ad8:	4b03      	ldr	r3, [pc, #12]	; (b7ae8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b7ada:	6023      	str	r3, [r4, #0]
   b7adc:	6226      	str	r6, [r4, #32]
   b7ade:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b7ae2:	4620      	mov	r0, r4
   b7ae4:	bd70      	pop	{r4, r5, r6, pc}
   b7ae6:	bf00      	nop
   b7ae8:	000be4e4 	.word	0x000be4e4

000b7aec <_ZN11RHSPIDriver7spiReadEh>:
{
   b7aec:	b538      	push	{r3, r4, r5, lr}
   b7aee:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7af0:	6a00      	ldr	r0, [r0, #32]
   b7af2:	6803      	ldr	r3, [r0, #0]
   b7af4:	6a1b      	ldr	r3, [r3, #32]
{
   b7af6:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7af8:	4798      	blx	r3
    selectSlave();
   b7afa:	6823      	ldr	r3, [r4, #0]
   b7afc:	4620      	mov	r0, r4
   b7afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7b00:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b7b02:	6a20      	ldr	r0, [r4, #32]
   b7b04:	6803      	ldr	r3, [r0, #0]
   b7b06:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b7b0a:	681b      	ldr	r3, [r3, #0]
   b7b0c:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7b0e:	6a20      	ldr	r0, [r4, #32]
   b7b10:	6803      	ldr	r3, [r0, #0]
   b7b12:	2100      	movs	r1, #0
   b7b14:	681b      	ldr	r3, [r3, #0]
   b7b16:	4798      	blx	r3
    deselectSlave();
   b7b18:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7b1a:	4605      	mov	r5, r0
    deselectSlave();
   b7b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7b1e:	4620      	mov	r0, r4
   b7b20:	4798      	blx	r3
    _spi.endTransaction();
   b7b22:	6a20      	ldr	r0, [r4, #32]
   b7b24:	6803      	ldr	r3, [r0, #0]
   b7b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b28:	4798      	blx	r3
}
   b7b2a:	4628      	mov	r0, r5
   b7b2c:	bd38      	pop	{r3, r4, r5, pc}

000b7b2e <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b7b2e:	b570      	push	{r4, r5, r6, lr}
   b7b30:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7b32:	6a00      	ldr	r0, [r0, #32]
   b7b34:	6803      	ldr	r3, [r0, #0]
   b7b36:	6a1b      	ldr	r3, [r3, #32]
{
   b7b38:	4616      	mov	r6, r2
   b7b3a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7b3c:	4798      	blx	r3
    selectSlave();
   b7b3e:	6823      	ldr	r3, [r4, #0]
   b7b40:	4620      	mov	r0, r4
   b7b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7b44:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b7b46:	6a20      	ldr	r0, [r4, #32]
   b7b48:	6803      	ldr	r3, [r0, #0]
   b7b4a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b7b4e:	681b      	ldr	r3, [r3, #0]
   b7b50:	4798      	blx	r3
   b7b52:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b7b54:	6a20      	ldr	r0, [r4, #32]
   b7b56:	6803      	ldr	r3, [r0, #0]
   b7b58:	4631      	mov	r1, r6
   b7b5a:	681b      	ldr	r3, [r3, #0]
   b7b5c:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7b5e:	2001      	movs	r0, #1
   b7b60:	f000 fca2 	bl	b84a8 <HAL_Delay_Microseconds>
    deselectSlave();
   b7b64:	6823      	ldr	r3, [r4, #0]
   b7b66:	4620      	mov	r0, r4
   b7b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7b6a:	4798      	blx	r3
    _spi.endTransaction();
   b7b6c:	6a20      	ldr	r0, [r4, #32]
   b7b6e:	6803      	ldr	r3, [r0, #0]
   b7b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b72:	4798      	blx	r3
}
   b7b74:	4628      	mov	r0, r5
   b7b76:	bd70      	pop	{r4, r5, r6, pc}

000b7b78 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b7b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b7a:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7b7c:	6a00      	ldr	r0, [r0, #32]
{
   b7b7e:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7b80:	6803      	ldr	r3, [r0, #0]
   b7b82:	6a1b      	ldr	r3, [r3, #32]
{
   b7b84:	460f      	mov	r7, r1
   b7b86:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7b88:	4798      	blx	r3
    selectSlave();
   b7b8a:	6823      	ldr	r3, [r4, #0]
   b7b8c:	4620      	mov	r0, r4
   b7b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7b90:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b7b92:	6a20      	ldr	r0, [r4, #32]
   b7b94:	6803      	ldr	r3, [r0, #0]
   b7b96:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b7b9a:	681b      	ldr	r3, [r3, #0]
   b7b9c:	4798      	blx	r3
   b7b9e:	442e      	add	r6, r5
   b7ba0:	4607      	mov	r7, r0
    while (len--)
   b7ba2:	42b5      	cmp	r5, r6
   b7ba4:	d007      	beq.n	b7bb6 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b7ba6:	6a20      	ldr	r0, [r4, #32]
   b7ba8:	6803      	ldr	r3, [r0, #0]
   b7baa:	2100      	movs	r1, #0
   b7bac:	681b      	ldr	r3, [r3, #0]
   b7bae:	4798      	blx	r3
   b7bb0:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b7bb4:	e7f5      	b.n	b7ba2 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b7bb6:	6823      	ldr	r3, [r4, #0]
   b7bb8:	4620      	mov	r0, r4
   b7bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7bbc:	4798      	blx	r3
    _spi.endTransaction();
   b7bbe:	6a20      	ldr	r0, [r4, #32]
   b7bc0:	6803      	ldr	r3, [r0, #0]
   b7bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7bc4:	4798      	blx	r3
}
   b7bc6:	4638      	mov	r0, r7
   b7bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bca <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b7bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7bcc:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7bce:	6a00      	ldr	r0, [r0, #32]
{
   b7bd0:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7bd2:	6803      	ldr	r3, [r0, #0]
   b7bd4:	6a1b      	ldr	r3, [r3, #32]
{
   b7bd6:	460f      	mov	r7, r1
   b7bd8:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7bda:	4798      	blx	r3
    selectSlave();
   b7bdc:	6823      	ldr	r3, [r4, #0]
   b7bde:	4620      	mov	r0, r4
   b7be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7be2:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b7be4:	6a20      	ldr	r0, [r4, #32]
   b7be6:	6803      	ldr	r3, [r0, #0]
   b7be8:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b7bec:	681b      	ldr	r3, [r3, #0]
   b7bee:	4798      	blx	r3
   b7bf0:	442e      	add	r6, r5
   b7bf2:	4607      	mov	r7, r0
    while (len--)
   b7bf4:	42b5      	cmp	r5, r6
   b7bf6:	d006      	beq.n	b7c06 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b7bf8:	6a20      	ldr	r0, [r4, #32]
   b7bfa:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7bfe:	6803      	ldr	r3, [r0, #0]
   b7c00:	681b      	ldr	r3, [r3, #0]
   b7c02:	4798      	blx	r3
    while (len--)
   b7c04:	e7f6      	b.n	b7bf4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b7c06:	6823      	ldr	r3, [r4, #0]
   b7c08:	4620      	mov	r0, r4
   b7c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7c0c:	4798      	blx	r3
    _spi.endTransaction();
   b7c0e:	6a20      	ldr	r0, [r4, #32]
   b7c10:	6803      	ldr	r3, [r0, #0]
   b7c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7c14:	4798      	blx	r3
}
   b7c16:	4638      	mov	r0, r7
   b7c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c1a <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b7c1a:	6a00      	ldr	r0, [r0, #32]
   b7c1c:	6803      	ldr	r3, [r0, #0]
   b7c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7c20:	4718      	bx	r3

000b7c22 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b7c22:	2001      	movs	r0, #1
   b7c24:	4770      	bx	lr

000b7c26 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b7c26:	20fb      	movs	r0, #251	; 0xfb
   b7c28:	4770      	bx	lr

000b7c2a <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b7c2a:	4770      	bx	lr

000b7c2c <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b7c2c:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b7c2e:	7903      	ldrb	r3, [r0, #4]
   b7c30:	2b05      	cmp	r3, #5
{
   b7c32:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b7c34:	d010      	beq.n	b7c58 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b7c36:	6803      	ldr	r3, [r0, #0]
   b7c38:	2105      	movs	r1, #5
   b7c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7c3e:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b7c40:	2207      	movs	r2, #7
   b7c42:	2101      	movs	r1, #1
   b7c44:	4620      	mov	r0, r4
   b7c46:	f7ff ff72 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b7c4a:	2280      	movs	r2, #128	; 0x80
   b7c4c:	2140      	movs	r1, #64	; 0x40
   b7c4e:	4620      	mov	r0, r4
   b7c50:	f7ff ff6d 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b7c54:	2305      	movs	r3, #5
   b7c56:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b7c58:	7923      	ldrb	r3, [r4, #4]
   b7c5a:	2b05      	cmp	r3, #5
   b7c5c:	d0fc      	beq.n	b7c58 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b7c5e:	7e20      	ldrb	r0, [r4, #24]
}
   b7c60:	bd10      	pop	{r4, pc}

000b7c62 <_ZN7RH_RF95D0Ev>:
   b7c62:	b510      	push	{r4, lr}
   b7c64:	f44f 7198 	mov.w	r1, #304	; 0x130
   b7c68:	4604      	mov	r4, r0
   b7c6a:	f7fc fa18 	bl	b409e <_ZdlPvj>
   b7c6e:	4620      	mov	r0, r4
   b7c70:	bd10      	pop	{r4, pc}

000b7c72 <_ZN7RH_RF955sleepEv>:
{
   b7c72:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b7c74:	7903      	ldrb	r3, [r0, #4]
   b7c76:	2b01      	cmp	r3, #1
{
   b7c78:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b7c7a:	d00b      	beq.n	b7c94 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b7c7c:	6803      	ldr	r3, [r0, #0]
   b7c7e:	2101      	movs	r1, #1
   b7c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7c84:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b7c86:	2200      	movs	r2, #0
   b7c88:	2101      	movs	r1, #1
   b7c8a:	4620      	mov	r0, r4
   b7c8c:	f7ff ff4f 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b7c90:	2301      	movs	r3, #1
   b7c92:	7123      	strb	r3, [r4, #4]
}
   b7c94:	2001      	movs	r0, #1
   b7c96:	bd10      	pop	{r4, pc}

000b7c98 <_ZN7RH_RF954recvEPhS0_>:
{
   b7c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b7c9a:	6803      	ldr	r3, [r0, #0]
   b7c9c:	68db      	ldr	r3, [r3, #12]
{
   b7c9e:	4604      	mov	r4, r0
   b7ca0:	460f      	mov	r7, r1
   b7ca2:	4615      	mov	r5, r2
    if (!available())
   b7ca4:	4798      	blx	r3
   b7ca6:	4606      	mov	r6, r0
   b7ca8:	b1b0      	cbz	r0, b7cd8 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b7caa:	b187      	cbz	r7, b7cce <_ZN7RH_RF954recvEPhS0_+0x36>
   b7cac:	b17d      	cbz	r5, b7cce <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b7cae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b7cb2:	782a      	ldrb	r2, [r5, #0]
   b7cb4:	3b03      	subs	r3, #3
   b7cb6:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b7cb8:	bfde      	ittt	le
   b7cba:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b7cbe:	3b04      	suble	r3, #4
   b7cc0:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b7cc2:	782a      	ldrb	r2, [r5, #0]
   b7cc4:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b7cc8:	4638      	mov	r0, r7
   b7cca:	f005 fb79 	bl	bd3c0 <memcpy>
    _rxBufValid = false;
   b7cce:	2300      	movs	r3, #0
   b7cd0:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7cd4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b7cd8:	4630      	mov	r0, r6
   b7cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7cdc <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b7cdc:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b7cde:	b538      	push	{r3, r4, r5, lr}
   b7ce0:	4605      	mov	r5, r0
   b7ce2:	460c      	mov	r4, r1
	if (power > 20)
   b7ce4:	dc14      	bgt.n	b7d10 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b7ce6:	2901      	cmp	r1, #1
   b7ce8:	dd14      	ble.n	b7d14 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b7cea:	2911      	cmp	r1, #17
   b7cec:	dd13      	ble.n	b7d16 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b7cee:	2207      	movs	r2, #7
   b7cf0:	214d      	movs	r1, #77	; 0x4d
   b7cf2:	4628      	mov	r0, r5
   b7cf4:	f7ff ff1b 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b7cf8:	3c03      	subs	r4, #3
   b7cfa:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7cfc:	1ea2      	subs	r2, r4, #2
   b7cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b7d02:	4628      	mov	r0, r5
   b7d04:	b2d2      	uxtb	r2, r2
}
   b7d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7d0a:	2109      	movs	r1, #9
   b7d0c:	f7ff bf0f 	b.w	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b7d10:	2414      	movs	r4, #20
   b7d12:	e7ec      	b.n	b7cee <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b7d14:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7d16:	2204      	movs	r2, #4
   b7d18:	214d      	movs	r1, #77	; 0x4d
   b7d1a:	4628      	mov	r0, r5
   b7d1c:	f7ff ff07 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
   b7d20:	e7ec      	b.n	b7cfc <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b7d24 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b7d24:	b538      	push	{r3, r4, r5, lr}
   b7d26:	4604      	mov	r4, r0
   b7d28:	4615      	mov	r5, r2
    _rxBufValid(0)
   b7d2a:	461a      	mov	r2, r3
   b7d2c:	f7ff fece 	bl	b7acc <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b7d30:	4b09      	ldr	r3, [pc, #36]	; (b7d58 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b7d32:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b7d34:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b7d36:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b7d38:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b7d3c:	2201      	movs	r2, #1
    _rxBufValid(0)
   b7d3e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b7d42:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b7d46:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b7d4a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b7d4e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b7d52:	4620      	mov	r0, r4
   b7d54:	bd38      	pop	{r3, r4, r5, pc}
   b7d56:	bf00      	nop
   b7d58:	000be57c 	.word	0x000be57c

000b7d5c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b7d5c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b7d60:	2b03      	cmp	r3, #3
   b7d62:	d91b      	bls.n	b7d9c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b7d64:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b7d68:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b7d6a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b7d6e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b7d70:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b7d74:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b7d76:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b7d7a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b7d7c:	7983      	ldrb	r3, [r0, #6]
   b7d7e:	b933      	cbnz	r3, b7d8e <_ZN7RH_RF9513validateRxBufEv+0x32>
   b7d80:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b7d82:	7942      	ldrb	r2, [r0, #5]
   b7d84:	429a      	cmp	r2, r3
   b7d86:	d002      	beq.n	b7d8e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b7d88:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b7d8a:	2bff      	cmp	r3, #255	; 0xff
   b7d8c:	d106      	bne.n	b7d9c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b7d8e:	8a83      	ldrh	r3, [r0, #20]
   b7d90:	3301      	adds	r3, #1
   b7d92:	b29b      	uxth	r3, r3
   b7d94:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b7d96:	2301      	movs	r3, #1
   b7d98:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b7d9c:	4770      	bx	lr
	...

000b7da0 <_ZN7RH_RF9512setFrequencyEf>:
{
   b7da0:	b538      	push	{r3, r4, r5, lr}
   b7da2:	4604      	mov	r4, r0
   b7da4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7da8:	ee10 0a10 	vmov	r0, s0
{
   b7dac:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7db0:	f004 ff14 	bl	bcbdc <__aeabi_f2d>
   b7db4:	a317      	add	r3, pc, #92	; (adr r3, b7e14 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b7db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7dba:	f004 ff67 	bl	bcc8c <__aeabi_dmul>
   b7dbe:	a317      	add	r3, pc, #92	; (adr r3, b7e1c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b7dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7dc4:	f005 f88c 	bl	bcee0 <__aeabi_ddiv>
   b7dc8:	f005 fa38 	bl	bd23c <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7dcc:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7dce:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7dd0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b7dd4:	4620      	mov	r0, r4
   b7dd6:	f7ff feaa 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b7dda:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b7dde:	2107      	movs	r1, #7
   b7de0:	4620      	mov	r0, r4
   b7de2:	f7ff fea4 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b7de6:	b2ea      	uxtb	r2, r5
   b7de8:	2108      	movs	r1, #8
   b7dea:	4620      	mov	r0, r4
   b7dec:	f7ff fe9f 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b7df0:	eddf 7a07 	vldr	s15, [pc, #28]	; b7e10 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b7df4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b7df8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b7dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7e00:	bfac      	ite	ge
   b7e02:	2301      	movge	r3, #1
   b7e04:	2300      	movlt	r3, #0
}
   b7e06:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b7e08:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b7e0c:	bd38      	pop	{r3, r4, r5, pc}
   b7e0e:	bf00      	nop
   b7e10:	4442c000 	.word	0x4442c000
   b7e14:	00000000 	.word	0x00000000
   b7e18:	412e8480 	.word	0x412e8480
   b7e1c:	00000000 	.word	0x00000000
   b7e20:	404e8480 	.word	0x404e8480

000b7e24 <_ZN7RH_RF9511setModeIdleEv>:
{
   b7e24:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b7e26:	7903      	ldrb	r3, [r0, #4]
   b7e28:	2b02      	cmp	r3, #2
{
   b7e2a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b7e2c:	d00b      	beq.n	b7e46 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b7e2e:	6803      	ldr	r3, [r0, #0]
   b7e30:	2102      	movs	r1, #2
   b7e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7e36:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b7e38:	2201      	movs	r2, #1
   b7e3a:	4611      	mov	r1, r2
   b7e3c:	4620      	mov	r0, r4
   b7e3e:	f7ff fe76 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b7e42:	2302      	movs	r3, #2
   b7e44:	7123      	strb	r3, [r4, #4]
}
   b7e46:	bd10      	pop	{r4, pc}

000b7e48 <_ZN7RH_RF9515handleInterruptEv>:
{
   b7e48:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7e4a:	2112      	movs	r1, #18
{
   b7e4c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7e4e:	f7ff fe4d 	bl	b7aec <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7e52:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7e54:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7e56:	4620      	mov	r0, r4
   b7e58:	f7ff fe48 	bl	b7aec <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7e5c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7e5e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7e60:	2112      	movs	r1, #18
   b7e62:	4620      	mov	r0, r4
   b7e64:	f7ff fe63 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b7e68:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b7e6a:	2b04      	cmp	r3, #4
   b7e6c:	d107      	bne.n	b7e7e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7e6e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b7e72:	d117      	bne.n	b7ea4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b7e74:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b7e78:	b10b      	cbz	r3, b7e7e <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7e7a:	0670      	lsls	r0, r6, #25
   b7e7c:	d512      	bpl.n	b7ea4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b7e7e:	7923      	ldrb	r3, [r4, #4]
   b7e80:	2b04      	cmp	r3, #4
   b7e82:	d101      	bne.n	b7e88 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b7e84:	0669      	lsls	r1, r5, #25
   b7e86:	d422      	bmi.n	b7ece <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b7e88:	7923      	ldrb	r3, [r4, #4]
   b7e8a:	2b03      	cmp	r3, #3
   b7e8c:	d101      	bne.n	b7e92 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b7e8e:	072a      	lsls	r2, r5, #28
   b7e90:	d468      	bmi.n	b7f64 <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b7e92:	7923      	ldrb	r3, [r4, #4]
   b7e94:	2b05      	cmp	r3, #5
   b7e96:	d10e      	bne.n	b7eb6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b7e98:	076b      	lsls	r3, r5, #29
   b7e9a:	d50c      	bpl.n	b7eb6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b7e9c:	f005 0501 	and.w	r5, r5, #1
   b7ea0:	7625      	strb	r5, [r4, #24]
   b7ea2:	e063      	b.n	b7f6c <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b7ea4:	8a63      	ldrh	r3, [r4, #18]
   b7ea6:	3301      	adds	r3, #1
   b7ea8:	b29b      	uxth	r3, r3
   b7eaa:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b7eac:	2300      	movs	r3, #0
   b7eae:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7eb2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7eb6:	22ff      	movs	r2, #255	; 0xff
   b7eb8:	2112      	movs	r1, #18
   b7eba:	4620      	mov	r0, r4
   b7ebc:	f7ff fe37 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7ec0:	4620      	mov	r0, r4
   b7ec2:	22ff      	movs	r2, #255	; 0xff
}
   b7ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7ec8:	2112      	movs	r1, #18
   b7eca:	f7ff be30 	b.w	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7ece:	2113      	movs	r1, #19
   b7ed0:	4620      	mov	r0, r4
   b7ed2:	f7ff fe0b 	bl	b7aec <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7ed6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7ed8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7eda:	4620      	mov	r0, r4
   b7edc:	f7ff fe06 	bl	b7aec <_ZN11RHSPIDriver7spiReadEh>
   b7ee0:	210d      	movs	r1, #13
   b7ee2:	4602      	mov	r2, r0
   b7ee4:	4620      	mov	r0, r4
   b7ee6:	f7ff fe22 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b7eea:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b7eee:	462b      	mov	r3, r5
   b7ef0:	2100      	movs	r1, #0
   b7ef2:	4620      	mov	r0, r4
   b7ef4:	f7ff fe40 	bl	b7b78 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7ef8:	2119      	movs	r1, #25
	_bufLen = len;
   b7efa:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7efe:	4620      	mov	r0, r4
   b7f00:	f7ff fdf4 	bl	b7aec <_ZN11RHSPIDriver7spiReadEh>
   b7f04:	b240      	sxtb	r0, r0
   b7f06:	2800      	cmp	r0, #0
   b7f08:	bfb8      	it	lt
   b7f0a:	3003      	addlt	r0, #3
   b7f0c:	1080      	asrs	r0, r0, #2
   b7f0e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7f12:	211a      	movs	r1, #26
   b7f14:	4620      	mov	r0, r4
   b7f16:	f7ff fde9 	bl	b7aec <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b7f1a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7f1e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b7f20:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7f22:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7f24:	bfa9      	itett	ge
   b7f26:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b7f28:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7f2a:	b21b      	sxthge	r3, r3
   b7f2c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b7f2e:	bfb2      	itee	lt
   b7f30:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7f32:	220f      	movge	r2, #15
   b7f34:	fb93 f3f2 	sdivge	r3, r3, r2
   b7f38:	b21b      	sxth	r3, r3
   b7f3a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b7f3c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b7f40:	b16b      	cbz	r3, b7f5e <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b7f42:	8a23      	ldrh	r3, [r4, #16]
   b7f44:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b7f46:	b21b      	sxth	r3, r3
   b7f48:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b7f4a:	4620      	mov	r0, r4
   b7f4c:	f7ff ff06 	bl	b7d5c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b7f50:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b7f54:	2b00      	cmp	r3, #0
   b7f56:	d0ae      	beq.n	b7eb6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b7f58:	f7ff ff64 	bl	b7e24 <_ZN7RH_RF9511setModeIdleEv>
   b7f5c:	e7ab      	b.n	b7eb6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b7f5e:	8a23      	ldrh	r3, [r4, #16]
   b7f60:	3ba4      	subs	r3, #164	; 0xa4
   b7f62:	e7f0      	b.n	b7f46 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b7f64:	8ae3      	ldrh	r3, [r4, #22]
   b7f66:	3301      	adds	r3, #1
   b7f68:	b29b      	uxth	r3, r3
   b7f6a:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b7f6c:	4620      	mov	r0, r4
   b7f6e:	e7f3      	b.n	b7f58 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b7f70 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b7f70:	4b02      	ldr	r3, [pc, #8]	; (b7f7c <_ZN7RH_RF954isr0Ev+0xc>)
   b7f72:	6818      	ldr	r0, [r3, #0]
   b7f74:	b108      	cbz	r0, b7f7a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b7f76:	f7ff bf67 	b.w	b7e48 <_ZN7RH_RF9515handleInterruptEv>
}
   b7f7a:	4770      	bx	lr
   b7f7c:	2003e604 	.word	0x2003e604

000b7f80 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b7f80:	4b02      	ldr	r3, [pc, #8]	; (b7f8c <_ZN7RH_RF954isr1Ev+0xc>)
   b7f82:	6858      	ldr	r0, [r3, #4]
   b7f84:	b108      	cbz	r0, b7f8a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b7f86:	f7ff bf5f 	b.w	b7e48 <_ZN7RH_RF9515handleInterruptEv>
}
   b7f8a:	4770      	bx	lr
   b7f8c:	2003e604 	.word	0x2003e604

000b7f90 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b7f90:	4b02      	ldr	r3, [pc, #8]	; (b7f9c <_ZN7RH_RF954isr2Ev+0xc>)
   b7f92:	6898      	ldr	r0, [r3, #8]
   b7f94:	b108      	cbz	r0, b7f9a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b7f96:	f7ff bf57 	b.w	b7e48 <_ZN7RH_RF9515handleInterruptEv>
}
   b7f9a:	4770      	bx	lr
   b7f9c:	2003e604 	.word	0x2003e604

000b7fa0 <_ZN7RH_RF959setModeRxEv>:
{
   b7fa0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b7fa2:	7903      	ldrb	r3, [r0, #4]
   b7fa4:	2b04      	cmp	r3, #4
{
   b7fa6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b7fa8:	d010      	beq.n	b7fcc <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b7faa:	6803      	ldr	r3, [r0, #0]
   b7fac:	2104      	movs	r1, #4
   b7fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7fb2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b7fb4:	2205      	movs	r2, #5
   b7fb6:	2101      	movs	r1, #1
   b7fb8:	4620      	mov	r0, r4
   b7fba:	f7ff fdb8 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b7fbe:	2200      	movs	r2, #0
   b7fc0:	2140      	movs	r1, #64	; 0x40
   b7fc2:	4620      	mov	r0, r4
   b7fc4:	f7ff fdb3 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b7fc8:	2304      	movs	r3, #4
   b7fca:	7123      	strb	r3, [r4, #4]
}
   b7fcc:	bd10      	pop	{r4, pc}

000b7fce <_ZN7RH_RF959availableEv>:
{
   b7fce:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b7fd0:	7903      	ldrb	r3, [r0, #4]
   b7fd2:	2b03      	cmp	r3, #3
{
   b7fd4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b7fd6:	d005      	beq.n	b7fe4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b7fd8:	f7ff ffe2 	bl	b7fa0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b7fdc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b7fe0:	b2c0      	uxtb	r0, r0
}
   b7fe2:	bd10      	pop	{r4, pc}
	return false;
   b7fe4:	2000      	movs	r0, #0
   b7fe6:	e7fc      	b.n	b7fe2 <_ZN7RH_RF959availableEv+0x14>

000b7fe8 <_ZN7RH_RF959setModeTxEv>:
{
   b7fe8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b7fea:	7903      	ldrb	r3, [r0, #4]
   b7fec:	2b03      	cmp	r3, #3
{
   b7fee:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b7ff0:	d010      	beq.n	b8014 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b7ff2:	6803      	ldr	r3, [r0, #0]
   b7ff4:	2103      	movs	r1, #3
   b7ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7ffa:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b7ffc:	2203      	movs	r2, #3
   b7ffe:	2101      	movs	r1, #1
   b8000:	4620      	mov	r0, r4
   b8002:	f7ff fd94 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b8006:	2240      	movs	r2, #64	; 0x40
   b8008:	4611      	mov	r1, r2
   b800a:	4620      	mov	r0, r4
   b800c:	f7ff fd8f 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b8010:	2303      	movs	r3, #3
   b8012:	7123      	strb	r3, [r4, #4]
}
   b8014:	bd10      	pop	{r4, pc}

000b8016 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b8016:	2afb      	cmp	r2, #251	; 0xfb
{
   b8018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b801a:	4604      	mov	r4, r0
   b801c:	460f      	mov	r7, r1
   b801e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b8020:	d902      	bls.n	b8028 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b8022:	2600      	movs	r6, #0
}
   b8024:	4630      	mov	r0, r6
   b8026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b8028:	6803      	ldr	r3, [r0, #0]
   b802a:	6a1b      	ldr	r3, [r3, #32]
   b802c:	4798      	blx	r3
    setModeIdle();
   b802e:	4620      	mov	r0, r4
   b8030:	f7ff fef8 	bl	b7e24 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b8034:	6823      	ldr	r3, [r4, #0]
   b8036:	4620      	mov	r0, r4
   b8038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b803a:	4798      	blx	r3
   b803c:	4606      	mov	r6, r0
   b803e:	2800      	cmp	r0, #0
   b8040:	d0ef      	beq.n	b8022 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b8042:	2200      	movs	r2, #0
   b8044:	210d      	movs	r1, #13
   b8046:	4620      	mov	r0, r4
   b8048:	f7ff fd71 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b804c:	7ae2      	ldrb	r2, [r4, #11]
   b804e:	2100      	movs	r1, #0
   b8050:	4620      	mov	r0, r4
   b8052:	f7ff fd6c 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b8056:	7b22      	ldrb	r2, [r4, #12]
   b8058:	2100      	movs	r1, #0
   b805a:	4620      	mov	r0, r4
   b805c:	f7ff fd67 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b8060:	7b62      	ldrb	r2, [r4, #13]
   b8062:	2100      	movs	r1, #0
   b8064:	4620      	mov	r0, r4
   b8066:	f7ff fd62 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b806a:	7ba2      	ldrb	r2, [r4, #14]
   b806c:	2100      	movs	r1, #0
   b806e:	4620      	mov	r0, r4
   b8070:	f7ff fd5d 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b8074:	462b      	mov	r3, r5
   b8076:	463a      	mov	r2, r7
   b8078:	2100      	movs	r1, #0
   b807a:	4620      	mov	r0, r4
   b807c:	f7ff fda5 	bl	b7bca <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b8080:	1d2a      	adds	r2, r5, #4
   b8082:	b2d2      	uxtb	r2, r2
   b8084:	2122      	movs	r1, #34	; 0x22
   b8086:	4620      	mov	r0, r4
   b8088:	f7ff fd51 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b808c:	4620      	mov	r0, r4
   b808e:	f7ff ffab 	bl	b7fe8 <_ZN7RH_RF959setModeTxEv>
    return true;
   b8092:	e7c7      	b.n	b8024 <_ZN7RH_RF954sendEPKhh+0xe>

000b8094 <_ZN7RH_RF9510setTxPowerEab>:
{
   b8094:	b510      	push	{r4, lr}
   b8096:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b8098:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b809c:	b172      	cbz	r2, b80bc <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b809e:	f381 0204 	usat	r2, #4, r1
   b80a2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b80a6:	b2d2      	uxtb	r2, r2
   b80a8:	2109      	movs	r1, #9
   b80aa:	f7ff fd40 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b80ae:	4620      	mov	r0, r4
   b80b0:	2204      	movs	r2, #4
}
   b80b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b80b6:	214d      	movs	r1, #77	; 0x4d
   b80b8:	f7ff bd39 	b.w	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
}
   b80bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b80c0:	f7ff be0c 	b.w	b7cdc <_ZN7RH_RF9510setTxPowerEab.part.0>

000b80c4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b80c4:	b538      	push	{r3, r4, r5, lr}
   b80c6:	460c      	mov	r4, r1
   b80c8:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b80ca:	780a      	ldrb	r2, [r1, #0]
   b80cc:	211d      	movs	r1, #29
   b80ce:	f7ff fd2e 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b80d2:	7862      	ldrb	r2, [r4, #1]
   b80d4:	211e      	movs	r1, #30
   b80d6:	4628      	mov	r0, r5
   b80d8:	f7ff fd29 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b80dc:	78a2      	ldrb	r2, [r4, #2]
   b80de:	4628      	mov	r0, r5
   b80e0:	2126      	movs	r1, #38	; 0x26
}
   b80e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b80e6:	f7ff bd22 	b.w	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b80ec <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b80ec:	2905      	cmp	r1, #5
{
   b80ee:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b80f0:	d80f      	bhi.n	b8112 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b80f2:	4b09      	ldr	r3, [pc, #36]	; (b8118 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b80f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b80f8:	185c      	adds	r4, r3, r1
   b80fa:	5a5a      	ldrh	r2, [r3, r1]
   b80fc:	78a3      	ldrb	r3, [r4, #2]
   b80fe:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b8102:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b8104:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b8108:	f7ff ffdc 	bl	b80c4 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b810c:	2001      	movs	r0, #1
}
   b810e:	b002      	add	sp, #8
   b8110:	bd10      	pop	{r4, pc}
        return false;
   b8112:	2000      	movs	r0, #0
   b8114:	e7fb      	b.n	b810e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b8116:	bf00      	nop
   b8118:	000be564 	.word	0x000be564

000b811c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b811c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b811e:	0a0a      	lsrs	r2, r1, #8
{
   b8120:	4605      	mov	r5, r0
   b8122:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b8124:	2120      	movs	r1, #32
   b8126:	f7ff fd02 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b812a:	b2e2      	uxtb	r2, r4
   b812c:	4628      	mov	r0, r5
   b812e:	2121      	movs	r1, #33	; 0x21
}
   b8130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b8134:	f7ff bcfb 	b.w	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>

000b8138 <_ZN7RH_RF954initEv>:
{
   b8138:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b813a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b813c:	f7ff fca6 	bl	b7a8c <_ZN11RHSPIDriver4initEv>
   b8140:	4606      	mov	r6, r0
   b8142:	b918      	cbnz	r0, b814c <_ZN7RH_RF954initEv+0x14>
	return false;
   b8144:	2600      	movs	r6, #0
}
   b8146:	4630      	mov	r0, r6
   b8148:	b002      	add	sp, #8
   b814a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b814c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b8150:	2dff      	cmp	r5, #255	; 0xff
   b8152:	d054      	beq.n	b81fe <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b8154:	4629      	mov	r1, r5
   b8156:	4620      	mov	r0, r4
   b8158:	f7ff fd5f 	bl	b7c1a <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b815c:	2280      	movs	r2, #128	; 0x80
   b815e:	2101      	movs	r1, #1
   b8160:	4620      	mov	r0, r4
   b8162:	f7ff fce4 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b8166:	200a      	movs	r0, #10
   b8168:	f000 fd12 	bl	b8b90 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b816c:	2101      	movs	r1, #1
   b816e:	4620      	mov	r0, r4
   b8170:	f7ff fcbc 	bl	b7aec <_ZN11RHSPIDriver7spiReadEh>
   b8174:	2880      	cmp	r0, #128	; 0x80
   b8176:	d1e5      	bne.n	b8144 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b8178:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b817c:	28ff      	cmp	r0, #255	; 0xff
   b817e:	d01c      	beq.n	b81ba <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b8180:	2100      	movs	r1, #0
   b8182:	f003 fa2f 	bl	bb5e4 <pinMode>
	if (_myInterruptIndex == 0xff)
   b8186:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b818a:	2bff      	cmp	r3, #255	; 0xff
   b818c:	d107      	bne.n	b819e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b818e:	4a26      	ldr	r2, [pc, #152]	; (b8228 <_ZN7RH_RF954initEv+0xf0>)
   b8190:	7813      	ldrb	r3, [r2, #0]
   b8192:	2b03      	cmp	r3, #3
   b8194:	d8d6      	bhi.n	b8144 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b8196:	1c59      	adds	r1, r3, #1
   b8198:	7011      	strb	r1, [r2, #0]
   b819a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b819e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b81a2:	4b22      	ldr	r3, [pc, #136]	; (b822c <_ZN7RH_RF954initEv+0xf4>)
   b81a4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b81a8:	bb62      	cbnz	r2, b8204 <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b81aa:	4921      	ldr	r1, [pc, #132]	; (b8230 <_ZN7RH_RF954initEv+0xf8>)
   b81ac:	9200      	str	r2, [sp, #0]
   b81ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b81b2:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b81b4:	b2a8      	uxth	r0, r5
   b81b6:	f000 ff7d 	bl	b90b4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b81ba:	2200      	movs	r2, #0
   b81bc:	210e      	movs	r1, #14
   b81be:	4620      	mov	r0, r4
   b81c0:	f7ff fcb5 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b81c4:	2200      	movs	r2, #0
   b81c6:	210f      	movs	r1, #15
   b81c8:	4620      	mov	r0, r4
   b81ca:	f7ff fcb0 	bl	b7b2e <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b81ce:	4620      	mov	r0, r4
   b81d0:	f7ff fe28 	bl	b7e24 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b81d4:	2100      	movs	r1, #0
   b81d6:	4620      	mov	r0, r4
   b81d8:	f7ff ff88 	bl	b80ec <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b81dc:	2108      	movs	r1, #8
   b81de:	4620      	mov	r0, r4
   b81e0:	f7ff ff9c 	bl	b811c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b81e4:	ed9f 0a13 	vldr	s0, [pc, #76]	; b8234 <_ZN7RH_RF954initEv+0xfc>
   b81e8:	4620      	mov	r0, r4
   b81ea:	f7ff fdd9 	bl	b7da0 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b81ee:	2300      	movs	r3, #0
   b81f0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b81f4:	210d      	movs	r1, #13
   b81f6:	4620      	mov	r0, r4
   b81f8:	f7ff fd70 	bl	b7cdc <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b81fc:	e7a3      	b.n	b8146 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b81fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b8202:	e7ab      	b.n	b815c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b8204:	2a01      	cmp	r2, #1
   b8206:	f04f 0300 	mov.w	r3, #0
   b820a:	d104      	bne.n	b8216 <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b820c:	9300      	str	r3, [sp, #0]
   b820e:	490a      	ldr	r1, [pc, #40]	; (b8238 <_ZN7RH_RF954initEv+0x100>)
   b8210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8214:	e7ce      	b.n	b81b4 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b8216:	2a02      	cmp	r2, #2
   b8218:	d194      	bne.n	b8144 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b821a:	9300      	str	r3, [sp, #0]
   b821c:	4907      	ldr	r1, [pc, #28]	; (b823c <_ZN7RH_RF954initEv+0x104>)
   b821e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8222:	2201      	movs	r2, #1
   b8224:	e7c6      	b.n	b81b4 <_ZN7RH_RF954initEv+0x7c>
   b8226:	bf00      	nop
   b8228:	2003e601 	.word	0x2003e601
   b822c:	2003e604 	.word	0x2003e604
   b8230:	000b7f71 	.word	0x000b7f71
   b8234:	43d90000 	.word	0x43d90000
   b8238:	000b7f81 	.word	0x000b7f81
   b823c:	000b7f91 	.word	0x000b7f91

000b8240 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b8240:	4770      	bx	lr

000b8242 <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b8242:	6803      	ldr	r3, [r0, #0]
   b8244:	685b      	ldr	r3, [r3, #4]
   b8246:	4718      	bx	r3

000b8248 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b8248:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b824a:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b824c:	4604      	mov	r4, r0
    if (lastUpdate) {
   b824e:	b133      	cbz	r3, b825e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8250:	b131      	cbz	r1, b8260 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b8252:	6823      	ldr	r3, [r4, #0]
   b8254:	4620      	mov	r0, r4
   b8256:	689b      	ldr	r3, [r3, #8]
   b8258:	4798      	blx	r3
            lastUpdate = 0;
   b825a:	2300      	movs	r3, #0
   b825c:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b825e:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8260:	f000 f92a 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8264:	69a3      	ldr	r3, [r4, #24]
   b8266:	1ac0      	subs	r0, r0, r3
   b8268:	69e3      	ldr	r3, [r4, #28]
   b826a:	4298      	cmp	r0, r3
   b826c:	d2f1      	bcs.n	b8252 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b826e:	e7f6      	b.n	b825e <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b8270 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8270:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b8272:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8274:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b8276:	b11b      	cbz	r3, b8280 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8278:	f000 f91e 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b827c:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b827e:	bd10      	pop	{r4, pc}
        save();
   b8280:	6803      	ldr	r3, [r0, #0]
}
   b8282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b8286:	689b      	ldr	r3, [r3, #8]
   b8288:	4718      	bx	r3

000b828a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b828a:	f000 b8ed 	b.w	b8468 <os_mutex_recursive_unlock>

000b828e <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b828e:	b510      	push	{r4, lr}
   b8290:	4604      	mov	r4, r0
   b8292:	3004      	adds	r0, #4
   b8294:	f7fd f988 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8298:	6823      	ldr	r3, [r4, #0]
   b829a:	68e1      	ldr	r1, [r4, #12]
   b829c:	695b      	ldr	r3, [r3, #20]
   b829e:	4620      	mov	r0, r4
   b82a0:	4798      	blx	r3
   b82a2:	b918      	cbnz	r0, b82ac <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b82a4:	6823      	ldr	r3, [r4, #0]
   b82a6:	4620      	mov	r0, r4
   b82a8:	699b      	ldr	r3, [r3, #24]
   b82aa:	4798      	blx	r3
      { _M_device.unlock(); }
   b82ac:	6860      	ldr	r0, [r4, #4]
   b82ae:	f7ff ffec 	bl	b828a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b82b2:	2001      	movs	r0, #1
   b82b4:	bd10      	pop	{r4, pc}
	...

000b82b8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b82b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b82ba:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b82be:	4f18      	ldr	r7, [pc, #96]	; (b8320 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b82c0:	4e18      	ldr	r6, [pc, #96]	; (b8324 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b82c2:	4d19      	ldr	r5, [pc, #100]	; (b8328 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b82c4:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b82c6:	42a0      	cmp	r0, r4
   b82c8:	d00c      	beq.n	b82e4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b82ca:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b82ce:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b82d0:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b82d4:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b82d6:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b82d8:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b82dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b82e0:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b82e2:	e7f0      	b.n	b82c6 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b82e4:	f001 0403 	and.w	r4, r1, #3
   b82e8:	4404      	add	r4, r0
    k = 0;
   b82ea:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b82ec:	42a0      	cmp	r0, r4
   b82ee:	d004      	beq.n	b82fa <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b82f0:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b82f4:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b82f8:	e7f8      	b.n	b82ec <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b82fa:	4809      	ldr	r0, [pc, #36]	; (b8320 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b82fc:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b82fe:	4809      	ldr	r0, [pc, #36]	; (b8324 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b8300:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b8304:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b8306:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8308:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b830a:	4b08      	ldr	r3, [pc, #32]	; (b832c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b830c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b8310:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b8312:	4b07      	ldr	r3, [pc, #28]	; (b8330 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b8314:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b8318:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b831a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b831e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8320:	cc9e2d51 	.word	0xcc9e2d51
   b8324:	1b873593 	.word	0x1b873593
   b8328:	e6546b64 	.word	0xe6546b64
   b832c:	85ebca6b 	.word	0x85ebca6b
   b8330:	c2b2ae35 	.word	0xc2b2ae35

000b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b8334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8336:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8338:	3004      	adds	r0, #4
   b833a:	f7fd f935 	bl	b55a8 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b833e:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b8340:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b8342:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b8344:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8346:	68a6      	ldr	r6, [r4, #8]
   b8348:	4a05      	ldr	r2, [pc, #20]	; (b8360 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b834a:	88f1      	ldrh	r1, [r6, #6]
   b834c:	4630      	mov	r0, r6
   b834e:	f7ff ffb3 	bl	b82b8 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b8352:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b8354:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b8356:	6860      	ldr	r0, [r4, #4]
   b8358:	f7ff ff97 	bl	b828a <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b835c:	4628      	mov	r0, r5
   b835e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8360:	851c2a3f 	.word	0x851c2a3f

000b8364 <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b8364:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8366:	460d      	mov	r5, r1
   b8368:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b836a:	f7ff ffe3 	bl	b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b836e:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b8370:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b8372:	d923      	bls.n	b83bc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b8374:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b8376:	6922      	ldr	r2, [r4, #16]
   b8378:	6819      	ldr	r1, [r3, #0]
   b837a:	4291      	cmp	r1, r2
   b837c:	d11f      	bne.n	b83be <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b837e:	8899      	ldrh	r1, [r3, #4]
   b8380:	8aa2      	ldrh	r2, [r4, #20]
   b8382:	4291      	cmp	r1, r2
   b8384:	d11b      	bne.n	b83be <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b8386:	88d9      	ldrh	r1, [r3, #6]
   b8388:	b2aa      	uxth	r2, r5
   b838a:	4291      	cmp	r1, r2
   b838c:	d817      	bhi.n	b83be <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b838e:	689a      	ldr	r2, [r3, #8]
   b8390:	4282      	cmp	r2, r0
   b8392:	d114      	bne.n	b83be <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b8394:	68e2      	ldr	r2, [r4, #12]
   b8396:	42aa      	cmp	r2, r5
   b8398:	d905      	bls.n	b83a6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b839a:	2100      	movs	r1, #0
   b839c:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b839e:	68e2      	ldr	r2, [r4, #12]
   b83a0:	3501      	adds	r5, #1
   b83a2:	42aa      	cmp	r2, r5
   b83a4:	d8fa      	bhi.n	b839c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b83a6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b83aa:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b83ac:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b83ae:	68a5      	ldr	r5, [r4, #8]
   b83b0:	f7ff ffc0 	bl	b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b83b4:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b83b6:	2001      	movs	r0, #1
}
   b83b8:	b002      	add	sp, #8
   b83ba:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b83bc:	b19d      	cbz	r5, b83e6 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b83be:	68a1      	ldr	r1, [r4, #8]
   b83c0:	680a      	ldr	r2, [r1, #0]
   b83c2:	b192      	cbz	r2, b83ea <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b83c4:	6888      	ldr	r0, [r1, #8]
   b83c6:	888b      	ldrh	r3, [r1, #4]
   b83c8:	9001      	str	r0, [sp, #4]
   b83ca:	88c9      	ldrh	r1, [r1, #6]
   b83cc:	4808      	ldr	r0, [pc, #32]	; (b83f0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b83ce:	9100      	str	r1, [sp, #0]
   b83d0:	4908      	ldr	r1, [pc, #32]	; (b83f4 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b83d2:	f7fd fe7f 	bl	b60d4 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b83d6:	e9cd 5600 	strd	r5, r6, [sp]
   b83da:	8aa3      	ldrh	r3, [r4, #20]
   b83dc:	6922      	ldr	r2, [r4, #16]
   b83de:	4906      	ldr	r1, [pc, #24]	; (b83f8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b83e0:	4803      	ldr	r0, [pc, #12]	; (b83f0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b83e2:	f7fd fe77 	bl	b60d4 <_ZNK5spark6Logger5traceEPKcz>
   b83e6:	2000      	movs	r0, #0
   b83e8:	e7e6      	b.n	b83b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b83ea:	4610      	mov	r0, r2
   b83ec:	e7e4      	b.n	b83b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b83ee:	bf00      	nop
   b83f0:	2003e658 	.word	0x2003e658
   b83f4:	000be600 	.word	0x000be600
   b83f8:	000be631 	.word	0x000be631

000b83fc <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b83fc:	b538      	push	{r3, r4, r5, lr}
   b83fe:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8400:	68c2      	ldr	r2, [r0, #12]
   b8402:	6880      	ldr	r0, [r0, #8]
   b8404:	2100      	movs	r1, #0
   b8406:	f005 f803 	bl	bd410 <memset>
    savedDataHeader->magic = savedDataMagic;
   b840a:	68a3      	ldr	r3, [r4, #8]
   b840c:	6922      	ldr	r2, [r4, #16]
   b840e:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b8410:	68a3      	ldr	r3, [r4, #8]
   b8412:	8aa2      	ldrh	r2, [r4, #20]
   b8414:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b8416:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b841a:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b841c:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b841e:	68a5      	ldr	r5, [r4, #8]
   b8420:	f7ff ff88 	bl	b8334 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b8424:	60a8      	str	r0, [r5, #8]
}
   b8426:	bd38      	pop	{r3, r4, r5, pc}

000b8428 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b8428:	b508      	push	{r3, lr}
   b842a:	4b02      	ldr	r3, [pc, #8]	; (b8434 <cellular_signal+0xc>)
   b842c:	681b      	ldr	r3, [r3, #0]
   b842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8430:	9301      	str	r3, [sp, #4]
   b8432:	bd08      	pop	{r3, pc}
   b8434:	00030274 	.word	0x00030274

000b8438 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8438:	b508      	push	{r3, lr}
   b843a:	4b02      	ldr	r3, [pc, #8]	; (b8444 <os_mutex_recursive_create+0xc>)
   b843c:	681b      	ldr	r3, [r3, #0]
   b843e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8440:	9301      	str	r3, [sp, #4]
   b8442:	bd08      	pop	{r3, pc}
   b8444:	00030248 	.word	0x00030248

000b8448 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b8448:	b508      	push	{r3, lr}
   b844a:	4b02      	ldr	r3, [pc, #8]	; (b8454 <os_mutex_recursive_destroy+0xc>)
   b844c:	681b      	ldr	r3, [r3, #0]
   b844e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8450:	9301      	str	r3, [sp, #4]
   b8452:	bd08      	pop	{r3, pc}
   b8454:	00030248 	.word	0x00030248

000b8458 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8458:	b508      	push	{r3, lr}
   b845a:	4b02      	ldr	r3, [pc, #8]	; (b8464 <os_mutex_recursive_lock+0xc>)
   b845c:	681b      	ldr	r3, [r3, #0]
   b845e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8460:	9301      	str	r3, [sp, #4]
   b8462:	bd08      	pop	{r3, pc}
   b8464:	00030248 	.word	0x00030248

000b8468 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8468:	b508      	push	{r3, lr}
   b846a:	4b02      	ldr	r3, [pc, #8]	; (b8474 <os_mutex_recursive_unlock+0xc>)
   b846c:	681b      	ldr	r3, [r3, #0]
   b846e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8470:	9301      	str	r3, [sp, #4]
   b8472:	bd08      	pop	{r3, pc}
   b8474:	00030248 	.word	0x00030248

000b8478 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8478:	b508      	push	{r3, lr}
   b847a:	4b02      	ldr	r3, [pc, #8]	; (b8484 <HAL_Core_Runtime_Info+0xc>)
   b847c:	681b      	ldr	r3, [r3, #0]
   b847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8480:	9301      	str	r3, [sp, #4]
   b8482:	bd08      	pop	{r3, pc}
   b8484:	00030234 	.word	0x00030234

000b8488 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8488:	b508      	push	{r3, lr}
   b848a:	4b02      	ldr	r3, [pc, #8]	; (b8494 <HAL_Feature_Set+0xc>)
   b848c:	681b      	ldr	r3, [r3, #0]
   b848e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8490:	9301      	str	r3, [sp, #4]
   b8492:	bd08      	pop	{r3, pc}
   b8494:	00030234 	.word	0x00030234

000b8498 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8498:	b508      	push	{r3, lr}
   b849a:	4b02      	ldr	r3, [pc, #8]	; (b84a4 <HAL_RNG_GetRandomNumber+0xc>)
   b849c:	681b      	ldr	r3, [r3, #0]
   b849e:	685b      	ldr	r3, [r3, #4]
   b84a0:	9301      	str	r3, [sp, #4]
   b84a2:	bd08      	pop	{r3, pc}
   b84a4:	00030218 	.word	0x00030218

000b84a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b84a8:	b508      	push	{r3, lr}
   b84aa:	4b02      	ldr	r3, [pc, #8]	; (b84b4 <HAL_Delay_Microseconds+0xc>)
   b84ac:	681b      	ldr	r3, [r3, #0]
   b84ae:	68db      	ldr	r3, [r3, #12]
   b84b0:	9301      	str	r3, [sp, #4]
   b84b2:	bd08      	pop	{r3, pc}
   b84b4:	00030218 	.word	0x00030218

000b84b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b84b8:	b508      	push	{r3, lr}
   b84ba:	4b02      	ldr	r3, [pc, #8]	; (b84c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b84bc:	681b      	ldr	r3, [r3, #0]
   b84be:	695b      	ldr	r3, [r3, #20]
   b84c0:	9301      	str	r3, [sp, #4]
   b84c2:	bd08      	pop	{r3, pc}
   b84c4:	00030218 	.word	0x00030218

000b84c8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b84c8:	b508      	push	{r3, lr}
   b84ca:	4b02      	ldr	r3, [pc, #8]	; (b84d4 <hal_rtc_time_is_valid+0xc>)
   b84cc:	681b      	ldr	r3, [r3, #0]
   b84ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b84d0:	9301      	str	r3, [sp, #4]
   b84d2:	bd08      	pop	{r3, pc}
   b84d4:	00030218 	.word	0x00030218

000b84d8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b84d8:	b508      	push	{r3, lr}
   b84da:	4b02      	ldr	r3, [pc, #8]	; (b84e4 <hal_timer_millis+0xc>)
   b84dc:	681b      	ldr	r3, [r3, #0]
   b84de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b84e0:	9301      	str	r3, [sp, #4]
   b84e2:	bd08      	pop	{r3, pc}
   b84e4:	00030218 	.word	0x00030218

000b84e8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b84e8:	b508      	push	{r3, lr}
   b84ea:	4b02      	ldr	r3, [pc, #8]	; (b84f4 <hal_rtc_get_time+0xc>)
   b84ec:	681b      	ldr	r3, [r3, #0]
   b84ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b84f0:	9301      	str	r3, [sp, #4]
   b84f2:	bd08      	pop	{r3, pc}
   b84f4:	00030218 	.word	0x00030218

000b84f8 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b84f8:	b508      	push	{r3, lr}
   b84fa:	4b02      	ldr	r3, [pc, #8]	; (b8504 <hal_rtc_set_time+0xc>)
   b84fc:	681b      	ldr	r3, [r3, #0]
   b84fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8500:	9301      	str	r3, [sp, #4]
   b8502:	bd08      	pop	{r3, pc}
   b8504:	00030218 	.word	0x00030218

000b8508 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8508:	b508      	push	{r3, lr}
   b850a:	4b02      	ldr	r3, [pc, #8]	; (b8514 <HAL_Pin_Map+0xc>)
   b850c:	681b      	ldr	r3, [r3, #0]
   b850e:	681b      	ldr	r3, [r3, #0]
   b8510:	9301      	str	r3, [sp, #4]
   b8512:	bd08      	pop	{r3, pc}
   b8514:	0003022c 	.word	0x0003022c

000b8518 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b8518:	b508      	push	{r3, lr}
   b851a:	4b02      	ldr	r3, [pc, #8]	; (b8524 <HAL_Validate_Pin_Function+0xc>)
   b851c:	681b      	ldr	r3, [r3, #0]
   b851e:	685b      	ldr	r3, [r3, #4]
   b8520:	9301      	str	r3, [sp, #4]
   b8522:	bd08      	pop	{r3, pc}
   b8524:	0003022c 	.word	0x0003022c

000b8528 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8528:	b508      	push	{r3, lr}
   b852a:	4b02      	ldr	r3, [pc, #8]	; (b8534 <HAL_Pin_Mode+0xc>)
   b852c:	681b      	ldr	r3, [r3, #0]
   b852e:	689b      	ldr	r3, [r3, #8]
   b8530:	9301      	str	r3, [sp, #4]
   b8532:	bd08      	pop	{r3, pc}
   b8534:	0003022c 	.word	0x0003022c

000b8538 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8538:	b508      	push	{r3, lr}
   b853a:	4b02      	ldr	r3, [pc, #8]	; (b8544 <HAL_Get_Pin_Mode+0xc>)
   b853c:	681b      	ldr	r3, [r3, #0]
   b853e:	68db      	ldr	r3, [r3, #12]
   b8540:	9301      	str	r3, [sp, #4]
   b8542:	bd08      	pop	{r3, pc}
   b8544:	0003022c 	.word	0x0003022c

000b8548 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8548:	b508      	push	{r3, lr}
   b854a:	4b02      	ldr	r3, [pc, #8]	; (b8554 <HAL_GPIO_Write+0xc>)
   b854c:	681b      	ldr	r3, [r3, #0]
   b854e:	691b      	ldr	r3, [r3, #16]
   b8550:	9301      	str	r3, [sp, #4]
   b8552:	bd08      	pop	{r3, pc}
   b8554:	0003022c 	.word	0x0003022c

000b8558 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8558:	b508      	push	{r3, lr}
   b855a:	4b02      	ldr	r3, [pc, #8]	; (b8564 <HAL_GPIO_Read+0xc>)
   b855c:	681b      	ldr	r3, [r3, #0]
   b855e:	695b      	ldr	r3, [r3, #20]
   b8560:	9301      	str	r3, [sp, #4]
   b8562:	bd08      	pop	{r3, pc}
   b8564:	0003022c 	.word	0x0003022c

000b8568 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8568:	b508      	push	{r3, lr}
   b856a:	4b02      	ldr	r3, [pc, #8]	; (b8574 <HAL_Interrupts_Attach+0xc>)
   b856c:	681b      	ldr	r3, [r3, #0]
   b856e:	699b      	ldr	r3, [r3, #24]
   b8570:	9301      	str	r3, [sp, #4]
   b8572:	bd08      	pop	{r3, pc}
   b8574:	0003022c 	.word	0x0003022c

000b8578 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8578:	b508      	push	{r3, lr}
   b857a:	4b02      	ldr	r3, [pc, #8]	; (b8584 <HAL_Interrupts_Detach+0xc>)
   b857c:	681b      	ldr	r3, [r3, #0]
   b857e:	69db      	ldr	r3, [r3, #28]
   b8580:	9301      	str	r3, [sp, #4]
   b8582:	bd08      	pop	{r3, pc}
   b8584:	0003022c 	.word	0x0003022c

000b8588 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8588:	b508      	push	{r3, lr}
   b858a:	4b02      	ldr	r3, [pc, #8]	; (b8594 <hal_adc_read+0xc>)
   b858c:	681b      	ldr	r3, [r3, #0]
   b858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8590:	9301      	str	r3, [sp, #4]
   b8592:	bd08      	pop	{r3, pc}
   b8594:	0003022c 	.word	0x0003022c

000b8598 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8598:	b508      	push	{r3, lr}
   b859a:	4b02      	ldr	r3, [pc, #8]	; (b85a4 <hal_i2c_begin+0xc>)
   b859c:	681b      	ldr	r3, [r3, #0]
   b859e:	68db      	ldr	r3, [r3, #12]
   b85a0:	9301      	str	r3, [sp, #4]
   b85a2:	bd08      	pop	{r3, pc}
   b85a4:	00030228 	.word	0x00030228

000b85a8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b85a8:	b508      	push	{r3, lr}
   b85aa:	4b02      	ldr	r3, [pc, #8]	; (b85b4 <hal_i2c_begin_transmission+0xc>)
   b85ac:	681b      	ldr	r3, [r3, #0]
   b85ae:	699b      	ldr	r3, [r3, #24]
   b85b0:	9301      	str	r3, [sp, #4]
   b85b2:	bd08      	pop	{r3, pc}
   b85b4:	00030228 	.word	0x00030228

000b85b8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b85b8:	b508      	push	{r3, lr}
   b85ba:	4b02      	ldr	r3, [pc, #8]	; (b85c4 <hal_i2c_end_transmission+0xc>)
   b85bc:	681b      	ldr	r3, [r3, #0]
   b85be:	69db      	ldr	r3, [r3, #28]
   b85c0:	9301      	str	r3, [sp, #4]
   b85c2:	bd08      	pop	{r3, pc}
   b85c4:	00030228 	.word	0x00030228

000b85c8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b85c8:	b508      	push	{r3, lr}
   b85ca:	4b02      	ldr	r3, [pc, #8]	; (b85d4 <hal_i2c_write+0xc>)
   b85cc:	681b      	ldr	r3, [r3, #0]
   b85ce:	6a1b      	ldr	r3, [r3, #32]
   b85d0:	9301      	str	r3, [sp, #4]
   b85d2:	bd08      	pop	{r3, pc}
   b85d4:	00030228 	.word	0x00030228

000b85d8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b85d8:	b508      	push	{r3, lr}
   b85da:	4b02      	ldr	r3, [pc, #8]	; (b85e4 <hal_i2c_available+0xc>)
   b85dc:	681b      	ldr	r3, [r3, #0]
   b85de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b85e0:	9301      	str	r3, [sp, #4]
   b85e2:	bd08      	pop	{r3, pc}
   b85e4:	00030228 	.word	0x00030228

000b85e8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b85e8:	b508      	push	{r3, lr}
   b85ea:	4b02      	ldr	r3, [pc, #8]	; (b85f4 <hal_i2c_read+0xc>)
   b85ec:	681b      	ldr	r3, [r3, #0]
   b85ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b85f0:	9301      	str	r3, [sp, #4]
   b85f2:	bd08      	pop	{r3, pc}
   b85f4:	00030228 	.word	0x00030228

000b85f8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b85f8:	b508      	push	{r3, lr}
   b85fa:	4b02      	ldr	r3, [pc, #8]	; (b8604 <hal_i2c_peek+0xc>)
   b85fc:	681b      	ldr	r3, [r3, #0]
   b85fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8600:	9301      	str	r3, [sp, #4]
   b8602:	bd08      	pop	{r3, pc}
   b8604:	00030228 	.word	0x00030228

000b8608 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8608:	b508      	push	{r3, lr}
   b860a:	4b02      	ldr	r3, [pc, #8]	; (b8614 <hal_i2c_flush+0xc>)
   b860c:	681b      	ldr	r3, [r3, #0]
   b860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8610:	9301      	str	r3, [sp, #4]
   b8612:	bd08      	pop	{r3, pc}
   b8614:	00030228 	.word	0x00030228

000b8618 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8618:	b508      	push	{r3, lr}
   b861a:	4b02      	ldr	r3, [pc, #8]	; (b8624 <hal_i2c_is_enabled+0xc>)
   b861c:	681b      	ldr	r3, [r3, #0]
   b861e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8620:	9301      	str	r3, [sp, #4]
   b8622:	bd08      	pop	{r3, pc}
   b8624:	00030228 	.word	0x00030228

000b8628 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8628:	b508      	push	{r3, lr}
   b862a:	4b02      	ldr	r3, [pc, #8]	; (b8634 <hal_i2c_init+0xc>)
   b862c:	681b      	ldr	r3, [r3, #0]
   b862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8630:	9301      	str	r3, [sp, #4]
   b8632:	bd08      	pop	{r3, pc}
   b8634:	00030228 	.word	0x00030228

000b8638 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b8638:	b508      	push	{r3, lr}
   b863a:	4b02      	ldr	r3, [pc, #8]	; (b8644 <hal_i2c_lock+0xc>)
   b863c:	681b      	ldr	r3, [r3, #0]
   b863e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8640:	9301      	str	r3, [sp, #4]
   b8642:	bd08      	pop	{r3, pc}
   b8644:	00030228 	.word	0x00030228

000b8648 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b8648:	b508      	push	{r3, lr}
   b864a:	4b02      	ldr	r3, [pc, #8]	; (b8654 <hal_i2c_unlock+0xc>)
   b864c:	681b      	ldr	r3, [r3, #0]
   b864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8650:	9301      	str	r3, [sp, #4]
   b8652:	bd08      	pop	{r3, pc}
   b8654:	00030228 	.word	0x00030228

000b8658 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8658:	b508      	push	{r3, lr}
   b865a:	4b02      	ldr	r3, [pc, #8]	; (b8664 <hal_i2c_request_ex+0xc>)
   b865c:	681b      	ldr	r3, [r3, #0]
   b865e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8660:	9301      	str	r3, [sp, #4]
   b8662:	bd08      	pop	{r3, pc}
   b8664:	00030228 	.word	0x00030228

000b8668 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8668:	b508      	push	{r3, lr}
   b866a:	4b02      	ldr	r3, [pc, #8]	; (b8674 <inet_inet_ntop+0xc>)
   b866c:	681b      	ldr	r3, [r3, #0]
   b866e:	695b      	ldr	r3, [r3, #20]
   b8670:	9301      	str	r3, [sp, #4]
   b8672:	bd08      	pop	{r3, pc}
   b8674:	00030264 	.word	0x00030264

000b8678 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8678:	b508      	push	{r3, lr}
   b867a:	4b02      	ldr	r3, [pc, #8]	; (b8684 <netdb_freeaddrinfo+0xc>)
   b867c:	681b      	ldr	r3, [r3, #0]
   b867e:	689b      	ldr	r3, [r3, #8]
   b8680:	9301      	str	r3, [sp, #4]
   b8682:	bd08      	pop	{r3, pc}
   b8684:	00030268 	.word	0x00030268

000b8688 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8688:	b508      	push	{r3, lr}
   b868a:	4b02      	ldr	r3, [pc, #8]	; (b8694 <netdb_getaddrinfo+0xc>)
   b868c:	681b      	ldr	r3, [r3, #0]
   b868e:	68db      	ldr	r3, [r3, #12]
   b8690:	9301      	str	r3, [sp, #4]
   b8692:	bd08      	pop	{r3, pc}
   b8694:	00030268 	.word	0x00030268

000b8698 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8698:	b508      	push	{r3, lr}
   b869a:	4b02      	ldr	r3, [pc, #8]	; (b86a4 <hal_spi_begin+0xc>)
   b869c:	681b      	ldr	r3, [r3, #0]
   b869e:	681b      	ldr	r3, [r3, #0]
   b86a0:	9301      	str	r3, [sp, #4]
   b86a2:	bd08      	pop	{r3, pc}
   b86a4:	00030230 	.word	0x00030230

000b86a8 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b86a8:	b508      	push	{r3, lr}
   b86aa:	4b02      	ldr	r3, [pc, #8]	; (b86b4 <hal_spi_end+0xc>)
   b86ac:	681b      	ldr	r3, [r3, #0]
   b86ae:	685b      	ldr	r3, [r3, #4]
   b86b0:	9301      	str	r3, [sp, #4]
   b86b2:	bd08      	pop	{r3, pc}
   b86b4:	00030230 	.word	0x00030230

000b86b8 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b86b8:	b508      	push	{r3, lr}
   b86ba:	4b02      	ldr	r3, [pc, #8]	; (b86c4 <hal_spi_transfer+0xc>)
   b86bc:	681b      	ldr	r3, [r3, #0]
   b86be:	695b      	ldr	r3, [r3, #20]
   b86c0:	9301      	str	r3, [sp, #4]
   b86c2:	bd08      	pop	{r3, pc}
   b86c4:	00030230 	.word	0x00030230

000b86c8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b86c8:	b508      	push	{r3, lr}
   b86ca:	4b02      	ldr	r3, [pc, #8]	; (b86d4 <hal_spi_init+0xc>)
   b86cc:	681b      	ldr	r3, [r3, #0]
   b86ce:	69db      	ldr	r3, [r3, #28]
   b86d0:	9301      	str	r3, [sp, #4]
   b86d2:	bd08      	pop	{r3, pc}
   b86d4:	00030230 	.word	0x00030230

000b86d8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b86d8:	b508      	push	{r3, lr}
   b86da:	4b02      	ldr	r3, [pc, #8]	; (b86e4 <hal_spi_is_enabled+0xc>)
   b86dc:	681b      	ldr	r3, [r3, #0]
   b86de:	6a1b      	ldr	r3, [r3, #32]
   b86e0:	9301      	str	r3, [sp, #4]
   b86e2:	bd08      	pop	{r3, pc}
   b86e4:	00030230 	.word	0x00030230

000b86e8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b86e8:	b508      	push	{r3, lr}
   b86ea:	4b02      	ldr	r3, [pc, #8]	; (b86f4 <hal_spi_info+0xc>)
   b86ec:	681b      	ldr	r3, [r3, #0]
   b86ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b86f0:	9301      	str	r3, [sp, #4]
   b86f2:	bd08      	pop	{r3, pc}
   b86f4:	00030230 	.word	0x00030230

000b86f8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b86f8:	b508      	push	{r3, lr}
   b86fa:	4b02      	ldr	r3, [pc, #8]	; (b8704 <hal_spi_set_settings+0xc>)
   b86fc:	681b      	ldr	r3, [r3, #0]
   b86fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8700:	9301      	str	r3, [sp, #4]
   b8702:	bd08      	pop	{r3, pc}
   b8704:	00030230 	.word	0x00030230

000b8708 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8708:	b508      	push	{r3, lr}
   b870a:	4b02      	ldr	r3, [pc, #8]	; (b8714 <hal_spi_acquire+0xc>)
   b870c:	681b      	ldr	r3, [r3, #0]
   b870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8710:	9301      	str	r3, [sp, #4]
   b8712:	bd08      	pop	{r3, pc}
   b8714:	00030230 	.word	0x00030230

000b8718 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8718:	b508      	push	{r3, lr}
   b871a:	4b02      	ldr	r3, [pc, #8]	; (b8724 <hal_spi_release+0xc>)
   b871c:	681b      	ldr	r3, [r3, #0]
   b871e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8720:	9301      	str	r3, [sp, #4]
   b8722:	bd08      	pop	{r3, pc}
   b8724:	00030230 	.word	0x00030230

000b8728 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b8728:	b508      	push	{r3, lr}
   b872a:	4b02      	ldr	r3, [pc, #8]	; (b8734 <hal_usart_end+0xc>)
   b872c:	681b      	ldr	r3, [r3, #0]
   b872e:	689b      	ldr	r3, [r3, #8]
   b8730:	9301      	str	r3, [sp, #4]
   b8732:	bd08      	pop	{r3, pc}
   b8734:	0003023c 	.word	0x0003023c

000b8738 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8738:	b508      	push	{r3, lr}
   b873a:	4b02      	ldr	r3, [pc, #8]	; (b8744 <hal_usart_write+0xc>)
   b873c:	681b      	ldr	r3, [r3, #0]
   b873e:	68db      	ldr	r3, [r3, #12]
   b8740:	9301      	str	r3, [sp, #4]
   b8742:	bd08      	pop	{r3, pc}
   b8744:	0003023c 	.word	0x0003023c

000b8748 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8748:	b508      	push	{r3, lr}
   b874a:	4b02      	ldr	r3, [pc, #8]	; (b8754 <hal_usart_available+0xc>)
   b874c:	681b      	ldr	r3, [r3, #0]
   b874e:	691b      	ldr	r3, [r3, #16]
   b8750:	9301      	str	r3, [sp, #4]
   b8752:	bd08      	pop	{r3, pc}
   b8754:	0003023c 	.word	0x0003023c

000b8758 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8758:	b508      	push	{r3, lr}
   b875a:	4b02      	ldr	r3, [pc, #8]	; (b8764 <hal_usart_read+0xc>)
   b875c:	681b      	ldr	r3, [r3, #0]
   b875e:	695b      	ldr	r3, [r3, #20]
   b8760:	9301      	str	r3, [sp, #4]
   b8762:	bd08      	pop	{r3, pc}
   b8764:	0003023c 	.word	0x0003023c

000b8768 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8768:	b508      	push	{r3, lr}
   b876a:	4b02      	ldr	r3, [pc, #8]	; (b8774 <hal_usart_peek+0xc>)
   b876c:	681b      	ldr	r3, [r3, #0]
   b876e:	699b      	ldr	r3, [r3, #24]
   b8770:	9301      	str	r3, [sp, #4]
   b8772:	bd08      	pop	{r3, pc}
   b8774:	0003023c 	.word	0x0003023c

000b8778 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8778:	b508      	push	{r3, lr}
   b877a:	4b02      	ldr	r3, [pc, #8]	; (b8784 <hal_usart_flush+0xc>)
   b877c:	681b      	ldr	r3, [r3, #0]
   b877e:	69db      	ldr	r3, [r3, #28]
   b8780:	9301      	str	r3, [sp, #4]
   b8782:	bd08      	pop	{r3, pc}
   b8784:	0003023c 	.word	0x0003023c

000b8788 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8788:	b508      	push	{r3, lr}
   b878a:	4b02      	ldr	r3, [pc, #8]	; (b8794 <hal_usart_is_enabled+0xc>)
   b878c:	681b      	ldr	r3, [r3, #0]
   b878e:	6a1b      	ldr	r3, [r3, #32]
   b8790:	9301      	str	r3, [sp, #4]
   b8792:	bd08      	pop	{r3, pc}
   b8794:	0003023c 	.word	0x0003023c

000b8798 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8798:	b508      	push	{r3, lr}
   b879a:	4b02      	ldr	r3, [pc, #8]	; (b87a4 <hal_usart_available_data_for_write+0xc>)
   b879c:	681b      	ldr	r3, [r3, #0]
   b879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b87a0:	9301      	str	r3, [sp, #4]
   b87a2:	bd08      	pop	{r3, pc}
   b87a4:	0003023c 	.word	0x0003023c

000b87a8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b87a8:	b508      	push	{r3, lr}
   b87aa:	4b02      	ldr	r3, [pc, #8]	; (b87b4 <hal_usart_begin_config+0xc>)
   b87ac:	681b      	ldr	r3, [r3, #0]
   b87ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b87b0:	9301      	str	r3, [sp, #4]
   b87b2:	bd08      	pop	{r3, pc}
   b87b4:	0003023c 	.word	0x0003023c

000b87b8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b87b8:	b508      	push	{r3, lr}
   b87ba:	4b02      	ldr	r3, [pc, #8]	; (b87c4 <hal_usart_init_ex+0xc>)
   b87bc:	681b      	ldr	r3, [r3, #0]
   b87be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b87c0:	9301      	str	r3, [sp, #4]
   b87c2:	bd08      	pop	{r3, pc}
   b87c4:	0003023c 	.word	0x0003023c

000b87c8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b87c8:	b508      	push	{r3, lr}
   b87ca:	4b02      	ldr	r3, [pc, #8]	; (b87d4 <HAL_USB_USART_Init+0xc>)
   b87cc:	681b      	ldr	r3, [r3, #0]
   b87ce:	681b      	ldr	r3, [r3, #0]
   b87d0:	9301      	str	r3, [sp, #4]
   b87d2:	bd08      	pop	{r3, pc}
   b87d4:	0003024c 	.word	0x0003024c

000b87d8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b87d8:	b508      	push	{r3, lr}
   b87da:	4b02      	ldr	r3, [pc, #8]	; (b87e4 <HAL_USB_USART_Begin+0xc>)
   b87dc:	681b      	ldr	r3, [r3, #0]
   b87de:	685b      	ldr	r3, [r3, #4]
   b87e0:	9301      	str	r3, [sp, #4]
   b87e2:	bd08      	pop	{r3, pc}
   b87e4:	0003024c 	.word	0x0003024c

000b87e8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b87e8:	b508      	push	{r3, lr}
   b87ea:	4b02      	ldr	r3, [pc, #8]	; (b87f4 <HAL_USB_USART_End+0xc>)
   b87ec:	681b      	ldr	r3, [r3, #0]
   b87ee:	689b      	ldr	r3, [r3, #8]
   b87f0:	9301      	str	r3, [sp, #4]
   b87f2:	bd08      	pop	{r3, pc}
   b87f4:	0003024c 	.word	0x0003024c

000b87f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b87f8:	b508      	push	{r3, lr}
   b87fa:	4b02      	ldr	r3, [pc, #8]	; (b8804 <HAL_USB_USART_Available_Data+0xc>)
   b87fc:	681b      	ldr	r3, [r3, #0]
   b87fe:	691b      	ldr	r3, [r3, #16]
   b8800:	9301      	str	r3, [sp, #4]
   b8802:	bd08      	pop	{r3, pc}
   b8804:	0003024c 	.word	0x0003024c

000b8808 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8808:	b508      	push	{r3, lr}
   b880a:	4b02      	ldr	r3, [pc, #8]	; (b8814 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b880c:	681b      	ldr	r3, [r3, #0]
   b880e:	695b      	ldr	r3, [r3, #20]
   b8810:	9301      	str	r3, [sp, #4]
   b8812:	bd08      	pop	{r3, pc}
   b8814:	0003024c 	.word	0x0003024c

000b8818 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8818:	b508      	push	{r3, lr}
   b881a:	4b02      	ldr	r3, [pc, #8]	; (b8824 <HAL_USB_USART_Receive_Data+0xc>)
   b881c:	681b      	ldr	r3, [r3, #0]
   b881e:	699b      	ldr	r3, [r3, #24]
   b8820:	9301      	str	r3, [sp, #4]
   b8822:	bd08      	pop	{r3, pc}
   b8824:	0003024c 	.word	0x0003024c

000b8828 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8828:	b508      	push	{r3, lr}
   b882a:	4b02      	ldr	r3, [pc, #8]	; (b8834 <HAL_USB_USART_Send_Data+0xc>)
   b882c:	681b      	ldr	r3, [r3, #0]
   b882e:	69db      	ldr	r3, [r3, #28]
   b8830:	9301      	str	r3, [sp, #4]
   b8832:	bd08      	pop	{r3, pc}
   b8834:	0003024c 	.word	0x0003024c

000b8838 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8838:	b508      	push	{r3, lr}
   b883a:	4b02      	ldr	r3, [pc, #8]	; (b8844 <HAL_USB_USART_Flush_Data+0xc>)
   b883c:	681b      	ldr	r3, [r3, #0]
   b883e:	6a1b      	ldr	r3, [r3, #32]
   b8840:	9301      	str	r3, [sp, #4]
   b8842:	bd08      	pop	{r3, pc}
   b8844:	0003024c 	.word	0x0003024c

000b8848 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b8848:	b508      	push	{r3, lr}
   b884a:	4b02      	ldr	r3, [pc, #8]	; (b8854 <HAL_USB_USART_Is_Connected+0xc>)
   b884c:	681b      	ldr	r3, [r3, #0]
   b884e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8850:	9301      	str	r3, [sp, #4]
   b8852:	bd08      	pop	{r3, pc}
   b8854:	0003024c 	.word	0x0003024c

000b8858 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8858:	b508      	push	{r3, lr}
   b885a:	4b02      	ldr	r3, [pc, #8]	; (b8864 <panic_+0xc>)
   b885c:	681b      	ldr	r3, [r3, #0]
   b885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8860:	9301      	str	r3, [sp, #4]
   b8862:	bd08      	pop	{r3, pc}
   b8864:	00030260 	.word	0x00030260

000b8868 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8868:	b508      	push	{r3, lr}
   b886a:	4b02      	ldr	r3, [pc, #8]	; (b8874 <log_message+0xc>)
   b886c:	681b      	ldr	r3, [r3, #0]
   b886e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8870:	9301      	str	r3, [sp, #4]
   b8872:	bd08      	pop	{r3, pc}
   b8874:	00030260 	.word	0x00030260

000b8878 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8878:	b508      	push	{r3, lr}
   b887a:	4b02      	ldr	r3, [pc, #8]	; (b8884 <log_message_v+0xc>)
   b887c:	681b      	ldr	r3, [r3, #0]
   b887e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8880:	9301      	str	r3, [sp, #4]
   b8882:	bd08      	pop	{r3, pc}
   b8884:	00030260 	.word	0x00030260

000b8888 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8888:	b508      	push	{r3, lr}
   b888a:	4b02      	ldr	r3, [pc, #8]	; (b8894 <log_level_name+0xc>)
   b888c:	681b      	ldr	r3, [r3, #0]
   b888e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8890:	9301      	str	r3, [sp, #4]
   b8892:	bd08      	pop	{r3, pc}
   b8894:	00030260 	.word	0x00030260

000b8898 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8898:	b508      	push	{r3, lr}
   b889a:	4b02      	ldr	r3, [pc, #8]	; (b88a4 <log_set_callbacks+0xc>)
   b889c:	681b      	ldr	r3, [r3, #0]
   b889e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b88a0:	9301      	str	r3, [sp, #4]
   b88a2:	bd08      	pop	{r3, pc}
   b88a4:	00030260 	.word	0x00030260

000b88a8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b88a8:	b508      	push	{r3, lr}
   b88aa:	4b03      	ldr	r3, [pc, #12]	; (b88b8 <diag_get_source+0x10>)
   b88ac:	681b      	ldr	r3, [r3, #0]
   b88ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b88b2:	9301      	str	r3, [sp, #4]
   b88b4:	bd08      	pop	{r3, pc}
   b88b6:	0000      	.short	0x0000
   b88b8:	00030260 	.word	0x00030260

000b88bc <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b88bc:	b508      	push	{r3, lr}
   b88be:	4b02      	ldr	r3, [pc, #8]	; (b88c8 <system_mode+0xc>)
   b88c0:	681b      	ldr	r3, [r3, #0]
   b88c2:	681b      	ldr	r3, [r3, #0]
   b88c4:	9301      	str	r3, [sp, #4]
   b88c6:	bd08      	pop	{r3, pc}
   b88c8:	00030220 	.word	0x00030220

000b88cc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b88cc:	b508      	push	{r3, lr}
   b88ce:	4b02      	ldr	r3, [pc, #8]	; (b88d8 <set_system_mode+0xc>)
   b88d0:	681b      	ldr	r3, [r3, #0]
   b88d2:	685b      	ldr	r3, [r3, #4]
   b88d4:	9301      	str	r3, [sp, #4]
   b88d6:	bd08      	pop	{r3, pc}
   b88d8:	00030220 	.word	0x00030220

000b88dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b88dc:	b508      	push	{r3, lr}
   b88de:	4b02      	ldr	r3, [pc, #8]	; (b88e8 <system_delay_ms+0xc>)
   b88e0:	681b      	ldr	r3, [r3, #0]
   b88e2:	695b      	ldr	r3, [r3, #20]
   b88e4:	9301      	str	r3, [sp, #4]
   b88e6:	bd08      	pop	{r3, pc}
   b88e8:	00030220 	.word	0x00030220

000b88ec <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b88ec:	b508      	push	{r3, lr}
   b88ee:	4b02      	ldr	r3, [pc, #8]	; (b88f8 <system_subscribe_event+0xc>)
   b88f0:	681b      	ldr	r3, [r3, #0]
   b88f2:	6a1b      	ldr	r3, [r3, #32]
   b88f4:	9301      	str	r3, [sp, #4]
   b88f6:	bd08      	pop	{r3, pc}
   b88f8:	00030220 	.word	0x00030220

000b88fc <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b88fc:	b508      	push	{r3, lr}
   b88fe:	4b02      	ldr	r3, [pc, #8]	; (b8908 <system_thread_set_state+0xc>)
   b8900:	681b      	ldr	r3, [r3, #0]
   b8902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8904:	9301      	str	r3, [sp, #4]
   b8906:	bd08      	pop	{r3, pc}
   b8908:	00030220 	.word	0x00030220

000b890c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b890c:	b508      	push	{r3, lr}
   b890e:	4b02      	ldr	r3, [pc, #8]	; (b8918 <system_thread_get_state+0xc>)
   b8910:	681b      	ldr	r3, [r3, #0]
   b8912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8914:	9301      	str	r3, [sp, #4]
   b8916:	bd08      	pop	{r3, pc}
   b8918:	00030220 	.word	0x00030220

000b891c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b891c:	b508      	push	{r3, lr}
   b891e:	4b02      	ldr	r3, [pc, #8]	; (b8928 <system_notify_time_changed+0xc>)
   b8920:	681b      	ldr	r3, [r3, #0]
   b8922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8924:	9301      	str	r3, [sp, #4]
   b8926:	bd08      	pop	{r3, pc}
   b8928:	00030220 	.word	0x00030220

000b892c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b892c:	b508      	push	{r3, lr}
   b892e:	4b03      	ldr	r3, [pc, #12]	; (b893c <system_ctrl_set_app_request_handler+0x10>)
   b8930:	681b      	ldr	r3, [r3, #0]
   b8932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8936:	9301      	str	r3, [sp, #4]
   b8938:	bd08      	pop	{r3, pc}
   b893a:	0000      	.short	0x0000
   b893c:	00030220 	.word	0x00030220

000b8940 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8940:	b508      	push	{r3, lr}
   b8942:	4b03      	ldr	r3, [pc, #12]	; (b8950 <system_ctrl_set_result+0x10>)
   b8944:	681b      	ldr	r3, [r3, #0]
   b8946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b894a:	9301      	str	r3, [sp, #4]
   b894c:	bd08      	pop	{r3, pc}
   b894e:	0000      	.short	0x0000
   b8950:	00030220 	.word	0x00030220

000b8954 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b8954:	b508      	push	{r3, lr}
   b8956:	4b03      	ldr	r3, [pc, #12]	; (b8964 <system_power_management_set_config+0x10>)
   b8958:	681b      	ldr	r3, [r3, #0]
   b895a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b895e:	9301      	str	r3, [sp, #4]
   b8960:	bd08      	pop	{r3, pc}
   b8962:	0000      	.short	0x0000
   b8964:	00030220 	.word	0x00030220

000b8968 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8968:	b508      	push	{r3, lr}
   b896a:	4b03      	ldr	r3, [pc, #12]	; (b8978 <system_sleep_ext+0x10>)
   b896c:	681b      	ldr	r3, [r3, #0]
   b896e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b8972:	9301      	str	r3, [sp, #4]
   b8974:	bd08      	pop	{r3, pc}
   b8976:	0000      	.short	0x0000
   b8978:	00030220 	.word	0x00030220

000b897c <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b897c:	b508      	push	{r3, lr}
   b897e:	4b03      	ldr	r3, [pc, #12]	; (b898c <system_reset+0x10>)
   b8980:	681b      	ldr	r3, [r3, #0]
   b8982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b8986:	9301      	str	r3, [sp, #4]
   b8988:	bd08      	pop	{r3, pc}
   b898a:	0000      	.short	0x0000
   b898c:	00030220 	.word	0x00030220

000b8990 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8990:	b508      	push	{r3, lr}
   b8992:	4b02      	ldr	r3, [pc, #8]	; (b899c <spark_process+0xc>)
   b8994:	681b      	ldr	r3, [r3, #0]
   b8996:	689b      	ldr	r3, [r3, #8]
   b8998:	9301      	str	r3, [sp, #4]
   b899a:	bd08      	pop	{r3, pc}
   b899c:	00030244 	.word	0x00030244

000b89a0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b89a0:	b508      	push	{r3, lr}
   b89a2:	4b02      	ldr	r3, [pc, #8]	; (b89ac <spark_cloud_flag_connected+0xc>)
   b89a4:	681b      	ldr	r3, [r3, #0]
   b89a6:	695b      	ldr	r3, [r3, #20]
   b89a8:	9301      	str	r3, [sp, #4]
   b89aa:	bd08      	pop	{r3, pc}
   b89ac:	00030244 	.word	0x00030244

000b89b0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b89b0:	b508      	push	{r3, lr}
   b89b2:	4b02      	ldr	r3, [pc, #8]	; (b89bc <spark_deviceID+0xc>)
   b89b4:	681b      	ldr	r3, [r3, #0]
   b89b6:	69db      	ldr	r3, [r3, #28]
   b89b8:	9301      	str	r3, [sp, #4]
   b89ba:	bd08      	pop	{r3, pc}
   b89bc:	00030244 	.word	0x00030244

000b89c0 <spark_sync_time_pending>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b89c0:	b508      	push	{r3, lr}
   b89c2:	4b02      	ldr	r3, [pc, #8]	; (b89cc <spark_sync_time_pending+0xc>)
   b89c4:	681b      	ldr	r3, [r3, #0]
   b89c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b89c8:	9301      	str	r3, [sp, #4]
   b89ca:	bd08      	pop	{r3, pc}
   b89cc:	00030244 	.word	0x00030244

000b89d0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b89d0:	b508      	push	{r3, lr}
   b89d2:	4b02      	ldr	r3, [pc, #8]	; (b89dc <spark_sync_time_last+0xc>)
   b89d4:	681b      	ldr	r3, [r3, #0]
   b89d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b89d8:	9301      	str	r3, [sp, #4]
   b89da:	bd08      	pop	{r3, pc}
   b89dc:	00030244 	.word	0x00030244

000b89e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b89e0:	b508      	push	{r3, lr}
   b89e2:	4b02      	ldr	r3, [pc, #8]	; (b89ec <spark_set_random_seed_from_cloud_handler+0xc>)
   b89e4:	681b      	ldr	r3, [r3, #0]
   b89e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b89e8:	9301      	str	r3, [sp, #4]
   b89ea:	bd08      	pop	{r3, pc}
   b89ec:	00030244 	.word	0x00030244

000b89f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b89f0:	b508      	push	{r3, lr}
   b89f2:	4b02      	ldr	r3, [pc, #8]	; (b89fc <network_connect+0xc>)
   b89f4:	681b      	ldr	r3, [r3, #0]
   b89f6:	685b      	ldr	r3, [r3, #4]
   b89f8:	9301      	str	r3, [sp, #4]
   b89fa:	bd08      	pop	{r3, pc}
   b89fc:	00030240 	.word	0x00030240

000b8a00 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8a00:	b508      	push	{r3, lr}
   b8a02:	4b02      	ldr	r3, [pc, #8]	; (b8a0c <network_connecting+0xc>)
   b8a04:	681b      	ldr	r3, [r3, #0]
   b8a06:	689b      	ldr	r3, [r3, #8]
   b8a08:	9301      	str	r3, [sp, #4]
   b8a0a:	bd08      	pop	{r3, pc}
   b8a0c:	00030240 	.word	0x00030240

000b8a10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8a10:	b508      	push	{r3, lr}
   b8a12:	4b02      	ldr	r3, [pc, #8]	; (b8a1c <network_disconnect+0xc>)
   b8a14:	681b      	ldr	r3, [r3, #0]
   b8a16:	68db      	ldr	r3, [r3, #12]
   b8a18:	9301      	str	r3, [sp, #4]
   b8a1a:	bd08      	pop	{r3, pc}
   b8a1c:	00030240 	.word	0x00030240

000b8a20 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8a20:	b508      	push	{r3, lr}
   b8a22:	4b02      	ldr	r3, [pc, #8]	; (b8a2c <network_ready+0xc>)
   b8a24:	681b      	ldr	r3, [r3, #0]
   b8a26:	691b      	ldr	r3, [r3, #16]
   b8a28:	9301      	str	r3, [sp, #4]
   b8a2a:	bd08      	pop	{r3, pc}
   b8a2c:	00030240 	.word	0x00030240

000b8a30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8a30:	b508      	push	{r3, lr}
   b8a32:	4b02      	ldr	r3, [pc, #8]	; (b8a3c <network_on+0xc>)
   b8a34:	681b      	ldr	r3, [r3, #0]
   b8a36:	695b      	ldr	r3, [r3, #20]
   b8a38:	9301      	str	r3, [sp, #4]
   b8a3a:	bd08      	pop	{r3, pc}
   b8a3c:	00030240 	.word	0x00030240

000b8a40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8a40:	b508      	push	{r3, lr}
   b8a42:	4b02      	ldr	r3, [pc, #8]	; (b8a4c <network_off+0xc>)
   b8a44:	681b      	ldr	r3, [r3, #0]
   b8a46:	699b      	ldr	r3, [r3, #24]
   b8a48:	9301      	str	r3, [sp, #4]
   b8a4a:	bd08      	pop	{r3, pc}
   b8a4c:	00030240 	.word	0x00030240

000b8a50 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8a50:	b508      	push	{r3, lr}
   b8a52:	4b02      	ldr	r3, [pc, #8]	; (b8a5c <network_listen+0xc>)
   b8a54:	681b      	ldr	r3, [r3, #0]
   b8a56:	69db      	ldr	r3, [r3, #28]
   b8a58:	9301      	str	r3, [sp, #4]
   b8a5a:	bd08      	pop	{r3, pc}
   b8a5c:	00030240 	.word	0x00030240

000b8a60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8a60:	b508      	push	{r3, lr}
   b8a62:	4b02      	ldr	r3, [pc, #8]	; (b8a6c <network_listening+0xc>)
   b8a64:	681b      	ldr	r3, [r3, #0]
   b8a66:	6a1b      	ldr	r3, [r3, #32]
   b8a68:	9301      	str	r3, [sp, #4]
   b8a6a:	bd08      	pop	{r3, pc}
   b8a6c:	00030240 	.word	0x00030240

000b8a70 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8a70:	b508      	push	{r3, lr}
   b8a72:	4b02      	ldr	r3, [pc, #8]	; (b8a7c <network_set_listen_timeout+0xc>)
   b8a74:	681b      	ldr	r3, [r3, #0]
   b8a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a78:	9301      	str	r3, [sp, #4]
   b8a7a:	bd08      	pop	{r3, pc}
   b8a7c:	00030240 	.word	0x00030240

000b8a80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8a80:	b508      	push	{r3, lr}
   b8a82:	4b02      	ldr	r3, [pc, #8]	; (b8a8c <network_get_listen_timeout+0xc>)
   b8a84:	681b      	ldr	r3, [r3, #0]
   b8a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8a88:	9301      	str	r3, [sp, #4]
   b8a8a:	bd08      	pop	{r3, pc}
   b8a8c:	00030240 	.word	0x00030240

000b8a90 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8a90:	b508      	push	{r3, lr}
   b8a92:	4b02      	ldr	r3, [pc, #8]	; (b8a9c <network_is_on+0xc>)
   b8a94:	681b      	ldr	r3, [r3, #0]
   b8a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8a98:	9301      	str	r3, [sp, #4]
   b8a9a:	bd08      	pop	{r3, pc}
   b8a9c:	00030240 	.word	0x00030240

000b8aa0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8aa0:	b508      	push	{r3, lr}
   b8aa2:	4b02      	ldr	r3, [pc, #8]	; (b8aac <network_is_off+0xc>)
   b8aa4:	681b      	ldr	r3, [r3, #0]
   b8aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8aa8:	9301      	str	r3, [sp, #4]
   b8aaa:	bd08      	pop	{r3, pc}
   b8aac:	00030240 	.word	0x00030240

000b8ab0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8ab0:	b508      	push	{r3, lr}
   b8ab2:	4b02      	ldr	r3, [pc, #8]	; (b8abc <malloc+0xc>)
   b8ab4:	681b      	ldr	r3, [r3, #0]
   b8ab6:	681b      	ldr	r3, [r3, #0]
   b8ab8:	9301      	str	r3, [sp, #4]
   b8aba:	bd08      	pop	{r3, pc}
   b8abc:	0003021c 	.word	0x0003021c

000b8ac0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8ac0:	b508      	push	{r3, lr}
   b8ac2:	4b02      	ldr	r3, [pc, #8]	; (b8acc <free+0xc>)
   b8ac4:	681b      	ldr	r3, [r3, #0]
   b8ac6:	685b      	ldr	r3, [r3, #4]
   b8ac8:	9301      	str	r3, [sp, #4]
   b8aca:	bd08      	pop	{r3, pc}
   b8acc:	0003021c 	.word	0x0003021c

000b8ad0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8ad0:	b508      	push	{r3, lr}
   b8ad2:	4b02      	ldr	r3, [pc, #8]	; (b8adc <realloc+0xc>)
   b8ad4:	681b      	ldr	r3, [r3, #0]
   b8ad6:	689b      	ldr	r3, [r3, #8]
   b8ad8:	9301      	str	r3, [sp, #4]
   b8ada:	bd08      	pop	{r3, pc}
   b8adc:	0003021c 	.word	0x0003021c

000b8ae0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8ae0:	b508      	push	{r3, lr}
   b8ae2:	4b02      	ldr	r3, [pc, #8]	; (b8aec <siprintf+0xc>)
   b8ae4:	681b      	ldr	r3, [r3, #0]
   b8ae6:	691b      	ldr	r3, [r3, #16]
   b8ae8:	9301      	str	r3, [sp, #4]
   b8aea:	bd08      	pop	{r3, pc}
   b8aec:	0003021c 	.word	0x0003021c

000b8af0 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8af0:	b508      	push	{r3, lr}
   b8af2:	4b02      	ldr	r3, [pc, #8]	; (b8afc <snprintf+0xc>)
   b8af4:	681b      	ldr	r3, [r3, #0]
   b8af6:	69db      	ldr	r3, [r3, #28]
   b8af8:	9301      	str	r3, [sp, #4]
   b8afa:	bd08      	pop	{r3, pc}
   b8afc:	0003021c 	.word	0x0003021c

000b8b00 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8b00:	b508      	push	{r3, lr}
   b8b02:	4b02      	ldr	r3, [pc, #8]	; (b8b0c <vsnprintf+0xc>)
   b8b04:	681b      	ldr	r3, [r3, #0]
   b8b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8b08:	9301      	str	r3, [sp, #4]
   b8b0a:	bd08      	pop	{r3, pc}
   b8b0c:	0003021c 	.word	0x0003021c

000b8b10 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8b10:	b508      	push	{r3, lr}
   b8b12:	4b02      	ldr	r3, [pc, #8]	; (b8b1c <abort+0xc>)
   b8b14:	681b      	ldr	r3, [r3, #0]
   b8b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b18:	9301      	str	r3, [sp, #4]
   b8b1a:	bd08      	pop	{r3, pc}
   b8b1c:	0003021c 	.word	0x0003021c

000b8b20 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8b20:	b508      	push	{r3, lr}
   b8b22:	4b02      	ldr	r3, [pc, #8]	; (b8b2c <__errno+0xc>)
   b8b24:	681b      	ldr	r3, [r3, #0]
   b8b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8b28:	9301      	str	r3, [sp, #4]
   b8b2a:	bd08      	pop	{r3, pc}
   b8b2c:	0003021c 	.word	0x0003021c

000b8b30 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8b30:	b508      	push	{r3, lr}
   b8b32:	4b02      	ldr	r3, [pc, #8]	; (b8b3c <__assert_func+0xc>)
   b8b34:	681b      	ldr	r3, [r3, #0]
   b8b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b38:	9301      	str	r3, [sp, #4]
   b8b3a:	bd08      	pop	{r3, pc}
   b8b3c:	0003021c 	.word	0x0003021c

000b8b40 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8b40:	b508      	push	{r3, lr}
   b8b42:	4b02      	ldr	r3, [pc, #8]	; (b8b4c <newlib_impure_ptr_callback+0xc>)
   b8b44:	681b      	ldr	r3, [r3, #0]
   b8b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8b48:	9301      	str	r3, [sp, #4]
   b8b4a:	bd08      	pop	{r3, pc}
   b8b4c:	0003021c 	.word	0x0003021c

000b8b50 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b8b50:	b508      	push	{r3, lr}
   b8b52:	4b02      	ldr	r3, [pc, #8]	; (b8b5c <strftime+0xc>)
   b8b54:	681b      	ldr	r3, [r3, #0]
   b8b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8b58:	9301      	str	r3, [sp, #4]
   b8b5a:	bd08      	pop	{r3, pc}
   b8b5c:	0003021c 	.word	0x0003021c

000b8b60 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8b60:	b508      	push	{r3, lr}
   b8b62:	4b02      	ldr	r3, [pc, #8]	; (b8b6c <localtime_r+0xc>)
   b8b64:	681b      	ldr	r3, [r3, #0]
   b8b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8b68:	9301      	str	r3, [sp, #4]
   b8b6a:	bd08      	pop	{r3, pc}
   b8b6c:	0003021c 	.word	0x0003021c

000b8b70 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8b70:	b508      	push	{r3, lr}
   b8b72:	4b02      	ldr	r3, [pc, #8]	; (b8b7c <gmtime_r+0xc>)
   b8b74:	681b      	ldr	r3, [r3, #0]
   b8b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8b78:	9301      	str	r3, [sp, #4]
   b8b7a:	bd08      	pop	{r3, pc}
   b8b7c:	0003021c 	.word	0x0003021c

000b8b80 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8b80:	b508      	push	{r3, lr}
   b8b82:	4b02      	ldr	r3, [pc, #8]	; (b8b8c <mktime+0xc>)
   b8b84:	681b      	ldr	r3, [r3, #0]
   b8b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8b88:	9301      	str	r3, [sp, #4]
   b8b8a:	bd08      	pop	{r3, pc}
   b8b8c:	0003021c 	.word	0x0003021c

000b8b90 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8b90:	2100      	movs	r1, #0
   b8b92:	f7ff bea3 	b.w	b88dc <system_delay_ms>

000b8b96 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b8b96:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8b98:	6843      	ldr	r3, [r0, #4]
   b8b9a:	3b01      	subs	r3, #1
    {
   b8b9c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8b9e:	6043      	str	r3, [r0, #4]
   b8ba0:	b963      	cbnz	r3, b8bbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b8ba2:	6803      	ldr	r3, [r0, #0]
   b8ba4:	689b      	ldr	r3, [r3, #8]
   b8ba6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8ba8:	68a3      	ldr	r3, [r4, #8]
   b8baa:	3b01      	subs	r3, #1
   b8bac:	60a3      	str	r3, [r4, #8]
   b8bae:	b92b      	cbnz	r3, b8bbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8bb0:	6823      	ldr	r3, [r4, #0]
   b8bb2:	4620      	mov	r0, r4
   b8bb4:	68db      	ldr	r3, [r3, #12]
        }
    }
   b8bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8bba:	4718      	bx	r3
    }
   b8bbc:	bd10      	pop	{r4, pc}

000b8bbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8bbe:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8bc0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8bc4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8bc6:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8bca:	42ae      	cmp	r6, r5
   b8bcc:	d004      	beq.n	b8bd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8bce:	4628      	mov	r0, r5
   b8bd0:	f002 f808 	bl	babe4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8bd4:	3510      	adds	r5, #16
   b8bd6:	e7f8      	b.n	b8bca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8bd8:	6820      	ldr	r0, [r4, #0]
   b8bda:	f7ff ff71 	bl	b8ac0 <free>
    AllocatorT::free(data_);
}
   b8bde:	4620      	mov	r0, r4
   b8be0:	bd70      	pop	{r4, r5, r6, pc}

000b8be2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b8be2:	b510      	push	{r4, lr}
   b8be4:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b8be6:	6800      	ldr	r0, [r0, #0]
   b8be8:	b108      	cbz	r0, b8bee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b8bea:	f7ff ffd4 	bl	b8b96 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b8bee:	4620      	mov	r0, r4
   b8bf0:	bd10      	pop	{r4, pc}
	...

000b8bf4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8bf4:	4802      	ldr	r0, [pc, #8]	; (b8c00 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8bf6:	2300      	movs	r3, #0
   b8bf8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8bfa:	f7ff bc1d 	b.w	b8438 <os_mutex_recursive_create>
   b8bfe:	bf00      	nop
   b8c00:	2003e610 	.word	0x2003e610

000b8c04 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b8c04:	2200      	movs	r2, #0
   b8c06:	6840      	ldr	r0, [r0, #4]
   b8c08:	4611      	mov	r1, r2
   b8c0a:	f7ff bf09 	b.w	b8a20 <network_ready>

000b8c0e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b8c0e:	2200      	movs	r2, #0
   b8c10:	6840      	ldr	r0, [r0, #4]
   b8c12:	4611      	mov	r1, r2
   b8c14:	f7ff bf24 	b.w	b8a60 <network_listening>

000b8c18 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8c18:	2200      	movs	r2, #0
   b8c1a:	6840      	ldr	r0, [r0, #4]
   b8c1c:	4611      	mov	r1, r2
   b8c1e:	f7ff bf2f 	b.w	b8a80 <network_get_listen_timeout>

000b8c22 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8c22:	6840      	ldr	r0, [r0, #4]
   b8c24:	2200      	movs	r2, #0
   b8c26:	f7ff bf23 	b.w	b8a70 <network_set_listen_timeout>

000b8c2a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8c2a:	6840      	ldr	r0, [r0, #4]
   b8c2c:	2200      	movs	r2, #0
   b8c2e:	f081 0101 	eor.w	r1, r1, #1
   b8c32:	f7ff bf0d 	b.w	b8a50 <network_listen>

000b8c36 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8c36:	2300      	movs	r3, #0
   b8c38:	6840      	ldr	r0, [r0, #4]
   b8c3a:	461a      	mov	r2, r3
   b8c3c:	4619      	mov	r1, r3
   b8c3e:	f7ff beff 	b.w	b8a40 <network_off>

000b8c42 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8c42:	2300      	movs	r3, #0
   b8c44:	6840      	ldr	r0, [r0, #4]
   b8c46:	461a      	mov	r2, r3
   b8c48:	4619      	mov	r1, r3
   b8c4a:	f7ff bef1 	b.w	b8a30 <network_on>

000b8c4e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8c4e:	2200      	movs	r2, #0
   b8c50:	6840      	ldr	r0, [r0, #4]
   b8c52:	4611      	mov	r1, r2
   b8c54:	f7ff bed4 	b.w	b8a00 <network_connecting>

000b8c58 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8c58:	6840      	ldr	r0, [r0, #4]
   b8c5a:	2200      	movs	r2, #0
   b8c5c:	2102      	movs	r1, #2
   b8c5e:	f7ff bed7 	b.w	b8a10 <network_disconnect>

000b8c62 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8c62:	2300      	movs	r3, #0
   b8c64:	6840      	ldr	r0, [r0, #4]
   b8c66:	461a      	mov	r2, r3
   b8c68:	f7ff bec2 	b.w	b89f0 <network_connect>

000b8c6c <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b8c6c:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b8c6e:	4b13      	ldr	r3, [pc, #76]	; (b8cbc <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b8c70:	6003      	str	r3, [r0, #0]
   b8c72:	2518      	movs	r5, #24
   b8c74:	3330      	adds	r3, #48	; 0x30
   b8c76:	b086      	sub	sp, #24
   b8c78:	460e      	mov	r6, r1
   b8c7a:	6043      	str	r3, [r0, #4]
   b8c7c:	462a      	mov	r2, r5
   b8c7e:	2100      	movs	r1, #0
   b8c80:	4604      	mov	r4, r0
   b8c82:	3008      	adds	r0, #8
   b8c84:	f004 fbc4 	bl	bd410 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b8c88:	2200      	movs	r2, #0
   b8c8a:	6870      	ldr	r0, [r6, #4]
   b8c8c:	4611      	mov	r1, r2
   b8c8e:	f7ff fec7 	bl	b8a20 <network_ready>
   b8c92:	b178      	cbz	r0, b8cb4 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b8c94:	2100      	movs	r1, #0
   b8c96:	462a      	mov	r2, r5
   b8c98:	4668      	mov	r0, sp
   b8c9a:	f004 fbb9 	bl	bd410 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8c9e:	4669      	mov	r1, sp
   b8ca0:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b8ca2:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8ca6:	f7ff fbbf 	bl	b8428 <cellular_signal>
   b8caa:	b918      	cbnz	r0, b8cb4 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b8cac:	4669      	mov	r1, sp
   b8cae:	4620      	mov	r0, r4
   b8cb0:	f000 f8b8 	bl	b8e24 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b8cb4:	4620      	mov	r0, r4
   b8cb6:	b006      	add	sp, #24
   b8cb8:	bd70      	pop	{r4, r5, r6, pc}
   b8cba:	bf00      	nop
   b8cbc:	000be6cc 	.word	0x000be6cc

000b8cc0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8cc0:	4b08      	ldr	r3, [pc, #32]	; (b8ce4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8cc2:	b510      	push	{r4, lr}
   b8cc4:	2428      	movs	r4, #40	; 0x28
   b8cc6:	4622      	mov	r2, r4
   b8cc8:	4618      	mov	r0, r3
   b8cca:	2100      	movs	r1, #0
   b8ccc:	f004 fba0 	bl	bd410 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8cd0:	4b05      	ldr	r3, [pc, #20]	; (b8ce8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8cd2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8cd8:	6042      	str	r2, [r0, #4]
   b8cda:	2204      	movs	r2, #4
   b8cdc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8cde:	4a03      	ldr	r2, [pc, #12]	; (b8cec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8ce0:	601a      	str	r2, [r3, #0]
   b8ce2:	bd10      	pop	{r4, pc}
   b8ce4:	2003e61c 	.word	0x2003e61c
   b8ce8:	2003e614 	.word	0x2003e614
   b8cec:	000be690 	.word	0x000be690

000b8cf0 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b8cf0:	4770      	bx	lr

000b8cf2 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b8cf2:	7b00      	ldrb	r0, [r0, #12]
   b8cf4:	4770      	bx	lr

000b8cf6 <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8cf6:	7b03      	ldrb	r3, [r0, #12]
   b8cf8:	b14b      	cbz	r3, b8d0e <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b8cfa:	6903      	ldr	r3, [r0, #16]
   b8cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8d00:	d005      	beq.n	b8d0e <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8d02:	6980      	ldr	r0, [r0, #24]
   b8d04:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b8d08:	bf18      	it	ne
   b8d0a:	2001      	movne	r0, #1
   b8d0c:	4770      	bx	lr
   b8d0e:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b8d10:	4770      	bx	lr

000b8d12 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b8d12:	6803      	ldr	r3, [r0, #0]
   b8d14:	6a1b      	ldr	r3, [r3, #32]
   b8d16:	4718      	bx	r3

000b8d18 <_ZNK14CellularSignal7printToER5Print>:
{
   b8d18:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b8d1a:	6803      	ldr	r3, [r0, #0]
{
   b8d1c:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b8d1e:	691b      	ldr	r3, [r3, #16]
{
   b8d20:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b8d22:	4798      	blx	r3
   b8d24:	2102      	movs	r1, #2
   b8d26:	4628      	mov	r0, r5
   b8d28:	f001 fe38 	bl	ba99c <_ZN5Print5printEfi>
    n += p.print(',');
   b8d2c:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b8d2e:	4604      	mov	r4, r0
    n += p.print(',');
   b8d30:	4628      	mov	r0, r5
   b8d32:	f001 fd3d 	bl	ba7b0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b8d36:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b8d38:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b8d3a:	699b      	ldr	r3, [r3, #24]
   b8d3c:	4630      	mov	r0, r6
   b8d3e:	4798      	blx	r3
   b8d40:	2102      	movs	r1, #2
   b8d42:	4628      	mov	r0, r5
   b8d44:	f001 fe2a 	bl	ba99c <_ZN5Print5printEfi>
}
   b8d48:	4420      	add	r0, r4
   b8d4a:	bd70      	pop	{r4, r5, r6, pc}

000b8d4c <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b8d4c:	f1a0 0004 	sub.w	r0, r0, #4
   b8d50:	f7ff bfe2 	b.w	b8d18 <_ZNK14CellularSignal7printToER5Print>

000b8d54 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b8d54:	b510      	push	{r4, lr}
   b8d56:	2120      	movs	r1, #32
   b8d58:	4604      	mov	r4, r0
   b8d5a:	f7fb f9a0 	bl	b409e <_ZdlPvj>
   b8d5e:	4620      	mov	r0, r4
   b8d60:	bd10      	pop	{r4, pc}
	...

000b8d64 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b8d64:	7b03      	ldrb	r3, [r0, #12]
   b8d66:	b17b      	cbz	r3, b8d88 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b8d68:	6943      	ldr	r3, [r0, #20]
   b8d6a:	2b00      	cmp	r3, #0
   b8d6c:	db0c      	blt.n	b8d88 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b8d6e:	ee07 3a90 	vmov	s15, r3
   b8d72:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8d90 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b8d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8d7a:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8d7e:	eddf 7a05 	vldr	s15, [pc, #20]	; b8d94 <_ZNK14CellularSignal11getStrengthEv+0x30>
   b8d82:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8d86:	4770      	bx	lr
    return -1.0f;
   b8d88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8d8c:	4770      	bx	lr
   b8d8e:	bf00      	nop
   b8d90:	477fff00 	.word	0x477fff00
   b8d94:	42c80000 	.word	0x42c80000

000b8d98 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b8d98:	7b03      	ldrb	r3, [r0, #12]
   b8d9a:	b163      	cbz	r3, b8db6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b8d9c:	6903      	ldr	r3, [r0, #16]
   b8d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8da2:	d008      	beq.n	b8db6 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b8da4:	ee07 3a90 	vmov	s15, r3
   b8da8:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8dbc <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b8dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8db0:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8db4:	4770      	bx	lr
    return 0.0f;
   b8db6:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8dc0 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b8dba:	4770      	bx	lr
   b8dbc:	42c80000 	.word	0x42c80000
   b8dc0:	00000000 	.word	0x00000000

000b8dc4 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b8dc4:	7b03      	ldrb	r3, [r0, #12]
   b8dc6:	b17b      	cbz	r3, b8de8 <_ZNK14CellularSignal10getQualityEv+0x24>
   b8dc8:	69c3      	ldr	r3, [r0, #28]
   b8dca:	2b00      	cmp	r3, #0
   b8dcc:	db0c      	blt.n	b8de8 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b8dce:	ee07 3a90 	vmov	s15, r3
   b8dd2:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8df0 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b8dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8dda:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8dde:	eddf 7a05 	vldr	s15, [pc, #20]	; b8df4 <_ZNK14CellularSignal10getQualityEv+0x30>
   b8de2:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8de6:	4770      	bx	lr
    return -1.0f;
   b8de8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8dec:	4770      	bx	lr
   b8dee:	bf00      	nop
   b8df0:	477fff00 	.word	0x477fff00
   b8df4:	42c80000 	.word	0x42c80000

000b8df8 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b8df8:	7b03      	ldrb	r3, [r0, #12]
   b8dfa:	b163      	cbz	r3, b8e16 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b8dfc:	6983      	ldr	r3, [r0, #24]
   b8dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8e02:	d008      	beq.n	b8e16 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b8e04:	ee07 3a90 	vmov	s15, r3
   b8e08:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8e1c <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b8e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8e10:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8e14:	4770      	bx	lr
    return 0.0f;
   b8e16:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8e20 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b8e1a:	4770      	bx	lr
   b8e1c:	42c80000 	.word	0x42c80000
   b8e20:	00000000 	.word	0x00000000

000b8e24 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b8e24:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b8e26:	460d      	mov	r5, r1
   b8e28:	f100 0408 	add.w	r4, r0, #8
   b8e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e30:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8e34:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b8e38:	2001      	movs	r0, #1
   b8e3a:	bd30      	pop	{r4, r5, pc}

000b8e3c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8e3c:	2200      	movs	r2, #0
   b8e3e:	6840      	ldr	r0, [r0, #4]
   b8e40:	4611      	mov	r1, r2
   b8e42:	f7ff be0d 	b.w	b8a60 <network_listening>

000b8e46 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8e46:	2200      	movs	r2, #0
   b8e48:	6840      	ldr	r0, [r0, #4]
   b8e4a:	4611      	mov	r1, r2
   b8e4c:	f7ff be18 	b.w	b8a80 <network_get_listen_timeout>

000b8e50 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8e50:	6840      	ldr	r0, [r0, #4]
   b8e52:	2200      	movs	r2, #0
   b8e54:	f7ff be0c 	b.w	b8a70 <network_set_listen_timeout>

000b8e58 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8e58:	6840      	ldr	r0, [r0, #4]
   b8e5a:	2200      	movs	r2, #0
   b8e5c:	f081 0101 	eor.w	r1, r1, #1
   b8e60:	f7ff bdf6 	b.w	b8a50 <network_listen>

000b8e64 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8e64:	2300      	movs	r3, #0
   b8e66:	6840      	ldr	r0, [r0, #4]
   b8e68:	461a      	mov	r2, r3
   b8e6a:	4619      	mov	r1, r3
   b8e6c:	f7ff bde8 	b.w	b8a40 <network_off>

000b8e70 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8e70:	2300      	movs	r3, #0
   b8e72:	6840      	ldr	r0, [r0, #4]
   b8e74:	461a      	mov	r2, r3
   b8e76:	4619      	mov	r1, r3
   b8e78:	f7ff bdda 	b.w	b8a30 <network_on>

000b8e7c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8e7c:	2200      	movs	r2, #0
   b8e7e:	6840      	ldr	r0, [r0, #4]
   b8e80:	4611      	mov	r1, r2
   b8e82:	f7ff bdcd 	b.w	b8a20 <network_ready>

000b8e86 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8e86:	2200      	movs	r2, #0
   b8e88:	6840      	ldr	r0, [r0, #4]
   b8e8a:	4611      	mov	r1, r2
   b8e8c:	f7ff bdb8 	b.w	b8a00 <network_connecting>

000b8e90 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8e90:	6840      	ldr	r0, [r0, #4]
   b8e92:	2200      	movs	r2, #0
   b8e94:	2102      	movs	r1, #2
   b8e96:	f7ff bdbb 	b.w	b8a10 <network_disconnect>

000b8e9a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8e9a:	2300      	movs	r3, #0
   b8e9c:	6840      	ldr	r0, [r0, #4]
   b8e9e:	461a      	mov	r2, r3
   b8ea0:	f7ff bda6 	b.w	b89f0 <network_connect>

000b8ea4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b8ea4:	4b02      	ldr	r3, [pc, #8]	; (b8eb0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8ea6:	2203      	movs	r2, #3
   b8ea8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8eaa:	4a02      	ldr	r2, [pc, #8]	; (b8eb4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8eac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8eae:	4770      	bx	lr
   b8eb0:	2003e644 	.word	0x2003e644
   b8eb4:	000be708 	.word	0x000be708

000b8eb8 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b8eb8:	6800      	ldr	r0, [r0, #0]
   b8eba:	f000 b8e7 	b.w	b908c <_ZN7TwoWire4lockEv>

000b8ebe <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b8ebe:	b510      	push	{r4, lr}
   b8ec0:	4604      	mov	r4, r0
      lock_(_lock) {
   b8ec2:	6001      	str	r1, [r0, #0]
   b8ec4:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b8ec6:	b10a      	cbz	r2, b8ecc <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b8ec8:	f7ff fff6 	bl	b8eb8 <_ZN9FuelGauge4lockEv>
}
   b8ecc:	4620      	mov	r0, r4
   b8ece:	bd10      	pop	{r4, pc}

000b8ed0 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b8ed0:	b513      	push	{r0, r1, r4, lr}
   b8ed2:	4604      	mov	r4, r0
   b8ed4:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b8ed6:	f002 fc2b 	bl	bb730 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8eda:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b8edc:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b8ede:	4620      	mov	r0, r4
   b8ee0:	f7ff ffed 	bl	b8ebe <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8ee4:	4620      	mov	r0, r4
   b8ee6:	b002      	add	sp, #8
   b8ee8:	bd10      	pop	{r4, pc}

000b8eea <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b8eea:	6800      	ldr	r0, [r0, #0]
   b8eec:	f000 b8d7 	b.w	b909e <_ZN7TwoWire6unlockEv>

000b8ef0 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b8ef0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8ef4:	4604      	mov	r4, r0
   b8ef6:	461d      	mov	r5, r3
   b8ef8:	460f      	mov	r7, r1
   b8efa:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b8efc:	f7ff ffdc 	bl	b8eb8 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8f00:	2236      	movs	r2, #54	; 0x36
   b8f02:	2300      	movs	r3, #0
   b8f04:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b8f08:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b8f0a:	f04f 0801 	mov.w	r8, #1
   b8f0e:	230a      	movs	r3, #10
   b8f10:	4669      	mov	r1, sp
   b8f12:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8f16:	f000 f89d 	bl	b9054 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b8f1a:	6820      	ldr	r0, [r4, #0]
   b8f1c:	6803      	ldr	r3, [r0, #0]
   b8f1e:	4639      	mov	r1, r7
   b8f20:	689b      	ldr	r3, [r3, #8]
   b8f22:	4798      	blx	r3
    i2c_.write(MSB);
   b8f24:	6820      	ldr	r0, [r4, #0]
   b8f26:	6803      	ldr	r3, [r0, #0]
   b8f28:	4631      	mov	r1, r6
   b8f2a:	689b      	ldr	r3, [r3, #8]
   b8f2c:	4798      	blx	r3
    i2c_.write(LSB);
   b8f2e:	6820      	ldr	r0, [r4, #0]
   b8f30:	6803      	ldr	r3, [r0, #0]
   b8f32:	4629      	mov	r1, r5
   b8f34:	689b      	ldr	r3, [r3, #8]
   b8f36:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b8f38:	4641      	mov	r1, r8
   b8f3a:	6820      	ldr	r0, [r4, #0]
   b8f3c:	f000 f8a2 	bl	b9084 <_ZN7TwoWire15endTransmissionEh>
   b8f40:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b8f42:	4620      	mov	r0, r4
   b8f44:	bf0c      	ite	eq
   b8f46:	2500      	moveq	r5, #0
   b8f48:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b8f4c:	f7ff ffcd 	bl	b8eea <_ZN9FuelGauge6unlockEv>
}
   b8f50:	4628      	mov	r0, r5
   b8f52:	b004      	add	sp, #16
   b8f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8f58 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b8f58:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b8f5a:	2240      	movs	r2, #64	; 0x40
   b8f5c:	2300      	movs	r3, #0
   b8f5e:	2106      	movs	r1, #6
   b8f60:	f7ff ffc6 	bl	b8ef0 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b8f64:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8f68:	bd08      	pop	{r3, pc}

000b8f6a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8f6a:	4770      	bx	lr

000b8f6c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8f6e:	4606      	mov	r6, r0
   b8f70:	4615      	mov	r5, r2
   b8f72:	460c      	mov	r4, r1
   b8f74:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8f76:	42bc      	cmp	r4, r7
   b8f78:	d006      	beq.n	b8f88 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8f7a:	6833      	ldr	r3, [r6, #0]
   b8f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8f80:	689b      	ldr	r3, [r3, #8]
   b8f82:	4630      	mov	r0, r6
   b8f84:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8f86:	e7f6      	b.n	b8f76 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8f88:	4628      	mov	r0, r5
   b8f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8f8c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8f8c:	7c00      	ldrb	r0, [r0, #16]
   b8f8e:	2200      	movs	r2, #0
   b8f90:	f7ff bb1a 	b.w	b85c8 <hal_i2c_write>

000b8f94 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8f94:	7c00      	ldrb	r0, [r0, #16]
   b8f96:	2100      	movs	r1, #0
   b8f98:	f7ff bb1e 	b.w	b85d8 <hal_i2c_available>

000b8f9c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8f9c:	7c00      	ldrb	r0, [r0, #16]
   b8f9e:	2100      	movs	r1, #0
   b8fa0:	f7ff bb22 	b.w	b85e8 <hal_i2c_read>

000b8fa4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8fa4:	7c00      	ldrb	r0, [r0, #16]
   b8fa6:	2100      	movs	r1, #0
   b8fa8:	f7ff bb26 	b.w	b85f8 <hal_i2c_peek>

000b8fac <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8fac:	7c00      	ldrb	r0, [r0, #16]
   b8fae:	2100      	movs	r1, #0
   b8fb0:	f7ff bb2a 	b.w	b8608 <hal_i2c_flush>

000b8fb4 <_ZN7TwoWireD0Ev>:
   b8fb4:	b510      	push	{r4, lr}
   b8fb6:	2114      	movs	r1, #20
   b8fb8:	4604      	mov	r4, r0
   b8fba:	f7fb f870 	bl	b409e <_ZdlPvj>
   b8fbe:	4620      	mov	r0, r4
   b8fc0:	bd10      	pop	{r4, pc}
	...

000b8fc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8fc4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8fca:	4604      	mov	r4, r0
   b8fcc:	4608      	mov	r0, r1
   b8fce:	2100      	movs	r1, #0
   b8fd0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8fd4:	4b03      	ldr	r3, [pc, #12]	; (b8fe4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8fd6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8fd8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8fda:	4611      	mov	r1, r2
   b8fdc:	f7ff fb24 	bl	b8628 <hal_i2c_init>
}
   b8fe0:	4620      	mov	r0, r4
   b8fe2:	bd10      	pop	{r4, pc}
   b8fe4:	000be744 	.word	0x000be744

000b8fe8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8fe8:	2300      	movs	r3, #0
   b8fea:	7c00      	ldrb	r0, [r0, #16]
   b8fec:	461a      	mov	r2, r3
   b8fee:	4619      	mov	r1, r3
   b8ff0:	f7ff bad2 	b.w	b8598 <hal_i2c_begin>

000b8ff4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8ff6:	2200      	movs	r2, #0
   b8ff8:	2314      	movs	r3, #20
   b8ffa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8ffe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b9002:	780b      	ldrb	r3, [r1, #0]
   b9004:	f88d 3008 	strb.w	r3, [sp, #8]
   b9008:	684b      	ldr	r3, [r1, #4]
   b900a:	9303      	str	r3, [sp, #12]
   b900c:	68cb      	ldr	r3, [r1, #12]
   b900e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b9010:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b9012:	7a0b      	ldrb	r3, [r1, #8]
   b9014:	9305      	str	r3, [sp, #20]
   b9016:	a901      	add	r1, sp, #4
   b9018:	f7ff fb1e 	bl	b8658 <hal_i2c_request_ex>
}
   b901c:	b007      	add	sp, #28
   b901e:	f85d fb04 	ldr.w	pc, [sp], #4

000b9022 <_ZN7TwoWire11requestFromEhjh>:
{
   b9022:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b9024:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b9026:	f88d 1000 	strb.w	r1, [sp]
   b902a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b902e:	9103      	str	r1, [sp, #12]
   b9030:	bf18      	it	ne
   b9032:	2301      	movne	r3, #1
   b9034:	4669      	mov	r1, sp
    size_ = size;
   b9036:	9201      	str	r2, [sp, #4]
   b9038:	f88d 3008 	strb.w	r3, [sp, #8]
   b903c:	f7ff ffda 	bl	b8ff4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b9040:	b005      	add	sp, #20
   b9042:	f85d fb04 	ldr.w	pc, [sp], #4

000b9046 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b9046:	7c00      	ldrb	r0, [r0, #16]
   b9048:	2200      	movs	r2, #0
   b904a:	f7ff baad 	b.w	b85a8 <hal_i2c_begin_transmission>

000b904e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b904e:	b2c9      	uxtb	r1, r1
   b9050:	f7ff bff9 	b.w	b9046 <_ZN7TwoWire17beginTransmissionEh>

000b9054 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b9054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b9056:	2300      	movs	r3, #0
   b9058:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b905c:	684a      	ldr	r2, [r1, #4]
   b905e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b9060:	2314      	movs	r3, #20
    };
   b9062:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b9064:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b9068:	780b      	ldrb	r3, [r1, #0]
    };
   b906a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b906c:	7a0a      	ldrb	r2, [r1, #8]
   b906e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b9070:	7c00      	ldrb	r0, [r0, #16]
    };
   b9072:	f88d 3008 	strb.w	r3, [sp, #8]
   b9076:	aa01      	add	r2, sp, #4
   b9078:	4619      	mov	r1, r3
   b907a:	f7ff fa95 	bl	b85a8 <hal_i2c_begin_transmission>
}
   b907e:	b007      	add	sp, #28
   b9080:	f85d fb04 	ldr.w	pc, [sp], #4

000b9084 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b9084:	7c00      	ldrb	r0, [r0, #16]
   b9086:	2200      	movs	r2, #0
   b9088:	f7ff ba96 	b.w	b85b8 <hal_i2c_end_transmission>

000b908c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b908c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b908e:	2100      	movs	r1, #0
   b9090:	7c00      	ldrb	r0, [r0, #16]
   b9092:	f7ff fad1 	bl	b8638 <hal_i2c_lock>
}
   b9096:	fab0 f080 	clz	r0, r0
   b909a:	0940      	lsrs	r0, r0, #5
   b909c:	bd08      	pop	{r3, pc}

000b909e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b909e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b90a0:	2100      	movs	r1, #0
   b90a2:	7c00      	ldrb	r0, [r0, #16]
   b90a4:	f7ff fad0 	bl	b8648 <hal_i2c_unlock>
}
   b90a8:	fab0 f080 	clz	r0, r0
   b90ac:	0940      	lsrs	r0, r0, #5
   b90ae:	bd08      	pop	{r3, pc}

000b90b0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b90b0:	4700      	bx	r0
	...

000b90b4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b90b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b90b8:	2400      	movs	r4, #0
{
   b90ba:	461d      	mov	r5, r3
   b90bc:	460f      	mov	r7, r1
   b90be:	4690      	mov	r8, r2
   b90c0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b90c2:	f7ff fa59 	bl	b8578 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b90c6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b90c8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b90cc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b90d0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b90d4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b90d8:	bfa2      	ittt	ge
   b90da:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b90de:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b90e2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b90e4:	4907      	ldr	r1, [pc, #28]	; (b9104 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b90e6:	9400      	str	r4, [sp, #0]
   b90e8:	4643      	mov	r3, r8
   b90ea:	463a      	mov	r2, r7
   b90ec:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b90ee:	bfa8      	it	ge
   b90f0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b90f4:	f7ff fa38 	bl	b8568 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b90f8:	fab0 f080 	clz	r0, r0
   b90fc:	0940      	lsrs	r0, r0, #5
   b90fe:	b004      	add	sp, #16
   b9100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9104:	000b90b1 	.word	0x000b90b1

000b9108 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9108:	4770      	bx	lr

000b910a <_ZN9IPAddressD0Ev>:
   b910a:	b510      	push	{r4, lr}
   b910c:	2118      	movs	r1, #24
   b910e:	4604      	mov	r4, r0
   b9110:	f7fa ffc5 	bl	b409e <_ZdlPvj>
   b9114:	4620      	mov	r0, r4
   b9116:	bd10      	pop	{r4, pc}

000b9118 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9118:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b911a:	7d03      	ldrb	r3, [r0, #20]
   b911c:	2b06      	cmp	r3, #6
{
   b911e:	b08d      	sub	sp, #52	; 0x34
   b9120:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9122:	f100 0704 	add.w	r7, r0, #4
   b9126:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b912a:	d012      	beq.n	b9152 <_ZNK9IPAddress7printToER5Print+0x3a>
   b912c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9130:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b9134:	220a      	movs	r2, #10
   b9136:	4630      	mov	r0, r6
   b9138:	f001 fb49 	bl	ba7ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b913c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b913e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b9140:	d019      	beq.n	b9176 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b9142:	2c00      	cmp	r4, #0
   b9144:	d0f4      	beq.n	b9130 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b9146:	212e      	movs	r1, #46	; 0x2e
   b9148:	4630      	mov	r0, r6
   b914a:	f001 fb31 	bl	ba7b0 <_ZN5Print5printEc>
   b914e:	4404      	add	r4, r0
   b9150:	e7ee      	b.n	b9130 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b9152:	232f      	movs	r3, #47	; 0x2f
   b9154:	466a      	mov	r2, sp
   b9156:	4639      	mov	r1, r7
   b9158:	200a      	movs	r0, #10
		buf[0] = 0;
   b915a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b915e:	f7ff fa83 	bl	b8668 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b9162:	4668      	mov	r0, sp
   b9164:	f004 f9f1 	bl	bd54a <strlen>
   b9168:	6833      	ldr	r3, [r6, #0]
   b916a:	4602      	mov	r2, r0
   b916c:	68db      	ldr	r3, [r3, #12]
   b916e:	4669      	mov	r1, sp
   b9170:	4630      	mov	r0, r6
   b9172:	4798      	blx	r3
   b9174:	4604      	mov	r4, r0
    }
    return n;
}
   b9176:	4620      	mov	r0, r4
   b9178:	b00d      	add	sp, #52	; 0x34
   b917a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b917c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b917c:	b510      	push	{r4, lr}
   b917e:	4b05      	ldr	r3, [pc, #20]	; (b9194 <_ZN9IPAddressC1Ev+0x18>)
   b9180:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b9182:	2211      	movs	r2, #17
   b9184:	f840 3b04 	str.w	r3, [r0], #4
   b9188:	2100      	movs	r1, #0
   b918a:	f004 f941 	bl	bd410 <memset>
}
   b918e:	4620      	mov	r0, r4
   b9190:	bd10      	pop	{r4, pc}
   b9192:	bf00      	nop
   b9194:	000be76c 	.word	0x000be76c

000b9198 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9198:	4603      	mov	r3, r0
   b919a:	4a07      	ldr	r2, [pc, #28]	; (b91b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b919c:	b510      	push	{r4, lr}
   b919e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b91a2:	f101 0210 	add.w	r2, r1, #16
   b91a6:	f851 4b04 	ldr.w	r4, [r1], #4
   b91aa:	f843 4b04 	str.w	r4, [r3], #4
   b91ae:	4291      	cmp	r1, r2
   b91b0:	d1f9      	bne.n	b91a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b91b2:	780a      	ldrb	r2, [r1, #0]
   b91b4:	701a      	strb	r2, [r3, #0]
}
   b91b6:	bd10      	pop	{r4, pc}
   b91b8:	000be76c 	.word	0x000be76c

000b91bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b91bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b91be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b91c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b91c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b91ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b91ce:	2304      	movs	r3, #4
   b91d0:	6041      	str	r1, [r0, #4]
   b91d2:	7503      	strb	r3, [r0, #20]
}
   b91d4:	bd10      	pop	{r4, pc}
	...

000b91d8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b91d8:	b507      	push	{r0, r1, r2, lr}
   b91da:	4b06      	ldr	r3, [pc, #24]	; (b91f4 <_ZN9IPAddressC1EPKh+0x1c>)
   b91dc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b91de:	78cb      	ldrb	r3, [r1, #3]
   b91e0:	9300      	str	r3, [sp, #0]
   b91e2:	788b      	ldrb	r3, [r1, #2]
   b91e4:	784a      	ldrb	r2, [r1, #1]
   b91e6:	7809      	ldrb	r1, [r1, #0]
   b91e8:	f7ff ffe8 	bl	b91bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b91ec:	b003      	add	sp, #12
   b91ee:	f85d fb04 	ldr.w	pc, [sp], #4
   b91f2:	bf00      	nop
   b91f4:	000be76c 	.word	0x000be76c

000b91f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b91f8:	f100 0310 	add.w	r3, r0, #16
   b91fc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b91fe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b9202:	2901      	cmp	r1, #1
   b9204:	4618      	mov	r0, r3
   b9206:	d108      	bne.n	b921a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b9208:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b920c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b9210:	3a01      	subs	r2, #1
   b9212:	f103 0310 	add.w	r3, r3, #16
   b9216:	d1f2      	bne.n	b91fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b9218:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b921a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b921c:	bf04      	itt	eq
   b921e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b9222:	1852      	addeq	r2, r2, r1
   b9224:	e7f4      	b.n	b9210 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b9226 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b9226:	b40e      	push	{r1, r2, r3}
   b9228:	b5f0      	push	{r4, r5, r6, r7, lr}
   b922a:	b088      	sub	sp, #32
   b922c:	af00      	add	r7, sp, #0
   b922e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9232:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b9234:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9238:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b923a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b923c:	462b      	mov	r3, r5
   b923e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b9240:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9242:	f7ff fc5d 	bl	b8b00 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b9246:	280f      	cmp	r0, #15
   b9248:	687a      	ldr	r2, [r7, #4]
   b924a:	d91a      	bls.n	b9282 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b924c:	f100 0308 	add.w	r3, r0, #8
   b9250:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b9254:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b9256:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b925a:	1c41      	adds	r1, r0, #1
   b925c:	462b      	mov	r3, r5
   b925e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9260:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9262:	f7ff fc4d 	bl	b8b00 <vsnprintf>
        if (n > 0) {
   b9266:	1e02      	subs	r2, r0, #0
   b9268:	dd04      	ble.n	b9274 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b926a:	6823      	ldr	r3, [r4, #0]
   b926c:	4669      	mov	r1, sp
   b926e:	689b      	ldr	r3, [r3, #8]
   b9270:	4620      	mov	r0, r4
   b9272:	4798      	blx	r3
   b9274:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b9276:	3720      	adds	r7, #32
   b9278:	46bd      	mov	sp, r7
   b927a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b927e:	b003      	add	sp, #12
   b9280:	4770      	bx	lr
    } else if (n > 0) {
   b9282:	2800      	cmp	r0, #0
   b9284:	d0f7      	beq.n	b9276 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b9286:	6823      	ldr	r3, [r4, #0]
   b9288:	4602      	mov	r2, r0
   b928a:	689b      	ldr	r3, [r3, #8]
   b928c:	f107 0110 	add.w	r1, r7, #16
   b9290:	4620      	mov	r0, r4
   b9292:	4798      	blx	r3
}
   b9294:	e7ef      	b.n	b9276 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b9296 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9296:	b538      	push	{r3, r4, r5, lr}
   b9298:	680b      	ldr	r3, [r1, #0]
   b929a:	6003      	str	r3, [r0, #0]
   b929c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b929e:	6843      	ldr	r3, [r0, #4]
   b92a0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b92a2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b92a4:	d008      	beq.n	b92b8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b92a6:	b115      	cbz	r5, b92ae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b92a8:	686b      	ldr	r3, [r5, #4]
   b92aa:	3301      	adds	r3, #1
   b92ac:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b92ae:	6860      	ldr	r0, [r4, #4]
   b92b0:	b108      	cbz	r0, b92b6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b92b2:	f7ff fc70 	bl	b8b96 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b92b6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b92b8:	bd38      	pop	{r3, r4, r5, pc}

000b92ba <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b92ba:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b92bc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b92be:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b92c2:	689b      	ldr	r3, [r3, #8]
   b92c4:	2201      	movs	r2, #1
   b92c6:	f10d 0107 	add.w	r1, sp, #7
   b92ca:	4798      	blx	r3
}
   b92cc:	b003      	add	sp, #12
   b92ce:	f85d fb04 	ldr.w	pc, [sp], #4

000b92d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b92d2:	460b      	mov	r3, r1
   b92d4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b92d6:	2200      	movs	r2, #0
   b92d8:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b92da:	e9c0 2200 	strd	r2, r2, [r0]
   b92de:	4604      	mov	r4, r0
        t_ = t;
   b92e0:	6083      	str	r3, [r0, #8]
    if (t) {
   b92e2:	b90b      	cbnz	r3, b92e8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b92e4:	4620      	mov	r0, r4
   b92e6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b92e8:	f7ff ffd5 	bl	b9296 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b92ec:	e7fa      	b.n	b92e4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b92ee <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b92ee:	6883      	ldr	r3, [r0, #8]
   b92f0:	b1eb      	cbz	r3, b932e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b92f2:	781a      	ldrb	r2, [r3, #0]
   b92f4:	2a03      	cmp	r2, #3
   b92f6:	d81a      	bhi.n	b932e <_ZNK5spark9JSONValue4typeEv+0x40>
   b92f8:	e8df f002 	tbb	[pc, r2]
   b92fc:	1b021704 	.word	0x1b021704
   b9300:	2005      	movs	r0, #5
   b9302:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b9304:	6802      	ldr	r2, [r0, #0]
   b9306:	685b      	ldr	r3, [r3, #4]
   b9308:	6852      	ldr	r2, [r2, #4]
   b930a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b930c:	282d      	cmp	r0, #45	; 0x2d
   b930e:	d012      	beq.n	b9336 <_ZNK5spark9JSONValue4typeEv+0x48>
   b9310:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9314:	2b09      	cmp	r3, #9
   b9316:	d90e      	bls.n	b9336 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b9318:	2874      	cmp	r0, #116	; 0x74
   b931a:	d00e      	beq.n	b933a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b931c:	2866      	cmp	r0, #102	; 0x66
   b931e:	d00c      	beq.n	b933a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b9320:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b9324:	4258      	negs	r0, r3
   b9326:	4158      	adcs	r0, r3
   b9328:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b932a:	2006      	movs	r0, #6
   b932c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b932e:	2000      	movs	r0, #0
   b9330:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b9332:	2004      	movs	r0, #4
   b9334:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b9336:	2003      	movs	r0, #3
   b9338:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b933a:	2002      	movs	r0, #2
}
   b933c:	4770      	bx	lr

000b933e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b933e:	b510      	push	{r4, lr}
   b9340:	4604      	mov	r4, r0
    switch (type()) {
   b9342:	f7ff ffd4 	bl	b92ee <_ZNK5spark9JSONValue4typeEv>
   b9346:	2802      	cmp	r0, #2
   b9348:	d00e      	beq.n	b9368 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b934a:	1ec3      	subs	r3, r0, #3
   b934c:	b2db      	uxtb	r3, r3
   b934e:	2b01      	cmp	r3, #1
   b9350:	d814      	bhi.n	b937c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b9352:	6822      	ldr	r2, [r4, #0]
   b9354:	68a3      	ldr	r3, [r4, #8]
   b9356:	6850      	ldr	r0, [r2, #4]
   b9358:	685b      	ldr	r3, [r3, #4]
}
   b935a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b935e:	220a      	movs	r2, #10
   b9360:	2100      	movs	r1, #0
   b9362:	4418      	add	r0, r3
   b9364:	f004 b9b6 	b.w	bd6d4 <strtol>
        const char* const s = d_->json + t_->start;
   b9368:	6822      	ldr	r2, [r4, #0]
   b936a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b936c:	6852      	ldr	r2, [r2, #4]
   b936e:	685b      	ldr	r3, [r3, #4]
   b9370:	5cd0      	ldrb	r0, [r2, r3]
   b9372:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b9376:	4258      	negs	r0, r3
   b9378:	4158      	adcs	r0, r3
}
   b937a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b937c:	2000      	movs	r0, #0
   b937e:	e7fc      	b.n	b937a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b9380 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9380:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9382:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b9384:	e9c0 3300 	strd	r3, r3, [r0]
   b9388:	4604      	mov	r4, r0
        n_(0) {
   b938a:	480e      	ldr	r0, [pc, #56]	; (b93c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b938c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9390:	b1a9      	cbz	r1, b93be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b9392:	780b      	ldrb	r3, [r1, #0]
   b9394:	2b03      	cmp	r3, #3
   b9396:	d006      	beq.n	b93a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9398:	b98b      	cbnz	r3, b93be <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b939a:	6813      	ldr	r3, [r2, #0]
   b939c:	6858      	ldr	r0, [r3, #4]
   b939e:	684b      	ldr	r3, [r1, #4]
   b93a0:	5cc3      	ldrb	r3, [r0, r3]
   b93a2:	2b6e      	cmp	r3, #110	; 0x6e
   b93a4:	d007      	beq.n	b93b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b93a6:	6813      	ldr	r3, [r2, #0]
   b93a8:	684d      	ldr	r5, [r1, #4]
   b93aa:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b93ac:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b93ae:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b93b0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b93b2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b93b4:	60e3      	str	r3, [r4, #12]
   b93b6:	4611      	mov	r1, r2
   b93b8:	4620      	mov	r0, r4
   b93ba:	f7ff ff6c 	bl	b9296 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b93be:	4620      	mov	r0, r4
   b93c0:	bd38      	pop	{r3, r4, r5, pc}
   b93c2:	bf00      	nop
   b93c4:	000be7d5 	.word	0x000be7d5

000b93c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b93c8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b93ca:	2500      	movs	r5, #0
   b93cc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b93ce:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b93d2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b93d6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b93da:	4604      	mov	r4, r0
   b93dc:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b93de:	b14b      	cbz	r3, b93f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b93e0:	781a      	ldrb	r2, [r3, #0]
   b93e2:	2a01      	cmp	r2, #1
   b93e4:	d106      	bne.n	b93f4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b93e6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b93ea:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b93ec:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b93ee:	6143      	str	r3, [r0, #20]
   b93f0:	f7ff ff51 	bl	b9296 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b93f4:	4620      	mov	r0, r4
   b93f6:	bd38      	pop	{r3, r4, r5, pc}

000b93f8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b93f8:	b510      	push	{r4, lr}
    if (!n_) {
   b93fa:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b93fc:	4604      	mov	r4, r0
    if (!n_) {
   b93fe:	b163      	cbz	r3, b941a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9400:	6880      	ldr	r0, [r0, #8]
   b9402:	60e0      	str	r0, [r4, #12]
    --n_;
   b9404:	3b01      	subs	r3, #1
    ++t_;
   b9406:	3010      	adds	r0, #16
   b9408:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b940a:	6120      	str	r0, [r4, #16]
    --n_;
   b940c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b940e:	b113      	cbz	r3, b9416 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9410:	f7ff fef2 	bl	b91f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b9414:	60a0      	str	r0, [r4, #8]
    return true;
   b9416:	2001      	movs	r0, #1
   b9418:	e000      	b.n	b941c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b941a:	4618      	mov	r0, r3
}
   b941c:	bd10      	pop	{r4, pc}

000b941e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b941e:	b510      	push	{r4, lr}
    write('}');
   b9420:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9422:	4604      	mov	r4, r0
    write('}');
   b9424:	f7ff ff49 	bl	b92ba <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9428:	2301      	movs	r3, #1
   b942a:	7123      	strb	r3, [r4, #4]
}
   b942c:	4620      	mov	r0, r4
   b942e:	bd10      	pop	{r4, pc}

000b9430 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9430:	b508      	push	{r3, lr}
    switch (state_) {
   b9432:	7903      	ldrb	r3, [r0, #4]
   b9434:	2b01      	cmp	r3, #1
   b9436:	d002      	beq.n	b943e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b9438:	2b02      	cmp	r3, #2
   b943a:	d004      	beq.n	b9446 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b943c:	bd08      	pop	{r3, pc}
        write(',');
   b943e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b9440:	f7ff ff3b 	bl	b92ba <_ZN5spark10JSONWriter5writeEc>
}
   b9444:	e7fa      	b.n	b943c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b9446:	213a      	movs	r1, #58	; 0x3a
   b9448:	e7fa      	b.n	b9440 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b944a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b944a:	b510      	push	{r4, lr}
   b944c:	4604      	mov	r4, r0
    writeSeparator();
   b944e:	f7ff ffef 	bl	b9430 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b9452:	4620      	mov	r0, r4
   b9454:	217b      	movs	r1, #123	; 0x7b
   b9456:	f7ff ff30 	bl	b92ba <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b945a:	2300      	movs	r3, #0
   b945c:	7123      	strb	r3, [r4, #4]
}
   b945e:	4620      	mov	r0, r4
   b9460:	bd10      	pop	{r4, pc}
	...

000b9464 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b9464:	b513      	push	{r0, r1, r4, lr}
   b9466:	4604      	mov	r4, r0
   b9468:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b946a:	f7ff ffe1 	bl	b9430 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b946e:	6823      	ldr	r3, [r4, #0]
   b9470:	9a01      	ldr	r2, [sp, #4]
   b9472:	68db      	ldr	r3, [r3, #12]
   b9474:	4903      	ldr	r1, [pc, #12]	; (b9484 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b9476:	4620      	mov	r0, r4
   b9478:	4798      	blx	r3
    state_ = NEXT;
   b947a:	2301      	movs	r3, #1
}
   b947c:	4620      	mov	r0, r4
    state_ = NEXT;
   b947e:	7123      	strb	r3, [r4, #4]
}
   b9480:	b002      	add	sp, #8
   b9482:	bd10      	pop	{r4, pc}
   b9484:	000be18f 	.word	0x000be18f

000b9488 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9488:	b513      	push	{r0, r1, r4, lr}
   b948a:	4604      	mov	r4, r0
   b948c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b948e:	f7ff ffcf 	bl	b9430 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b9492:	6823      	ldr	r3, [r4, #0]
   b9494:	9a01      	ldr	r2, [sp, #4]
   b9496:	68db      	ldr	r3, [r3, #12]
   b9498:	4903      	ldr	r1, [pc, #12]	; (b94a8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b949a:	4620      	mov	r0, r4
   b949c:	4798      	blx	r3
    state_ = NEXT;
   b949e:	2301      	movs	r3, #1
}
   b94a0:	4620      	mov	r0, r4
    state_ = NEXT;
   b94a2:	7123      	strb	r3, [r4, #4]
}
   b94a4:	b002      	add	sp, #8
   b94a6:	bd10      	pop	{r4, pc}
   b94a8:	000be11a 	.word	0x000be11a

000b94ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b94ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b94b0:	460d      	mov	r5, r1
    write('"');
   b94b2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b94b4:	4690      	mov	r8, r2
   b94b6:	4604      	mov	r4, r0
    write('"');
   b94b8:	f7ff feff 	bl	b92ba <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b94bc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b9564 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b94c0:	44a8      	add	r8, r5
    const char *s = str;
   b94c2:	462f      	mov	r7, r5
    while (s != end) {
   b94c4:	4547      	cmp	r7, r8
   b94c6:	46ba      	mov	sl, r7
   b94c8:	d03d      	beq.n	b9546 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b94ca:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b94ce:	2e22      	cmp	r6, #34	; 0x22
   b94d0:	d006      	beq.n	b94e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b94d2:	2e5c      	cmp	r6, #92	; 0x5c
   b94d4:	d004      	beq.n	b94e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b94d6:	4630      	mov	r0, r6
   b94d8:	f003 ff6a 	bl	bd3b0 <isprint>
   b94dc:	2800      	cmp	r0, #0
   b94de:	d1f1      	bne.n	b94c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b94e0:	6823      	ldr	r3, [r4, #0]
   b94e2:	ebaa 0205 	sub.w	r2, sl, r5
   b94e6:	689b      	ldr	r3, [r3, #8]
   b94e8:	4629      	mov	r1, r5
   b94ea:	4620      	mov	r0, r4
   b94ec:	4798      	blx	r3
            write('\\');
   b94ee:	215c      	movs	r1, #92	; 0x5c
   b94f0:	4620      	mov	r0, r4
   b94f2:	f7ff fee2 	bl	b92ba <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b94f6:	2e0d      	cmp	r6, #13
   b94f8:	d80a      	bhi.n	b9510 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b94fa:	2e07      	cmp	r6, #7
   b94fc:	d91c      	bls.n	b9538 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b94fe:	f1a6 0308 	sub.w	r3, r6, #8
   b9502:	2b05      	cmp	r3, #5
   b9504:	d818      	bhi.n	b9538 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9506:	e8df f003 	tbb	[pc, r3]
   b950a:	0f0d      	.short	0x0f0d
   b950c:	15131711 	.word	0x15131711
   b9510:	2e22      	cmp	r6, #34	; 0x22
   b9512:	d001      	beq.n	b9518 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b9514:	2e5c      	cmp	r6, #92	; 0x5c
   b9516:	d10f      	bne.n	b9538 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b9518:	4631      	mov	r1, r6
                write('b');
   b951a:	4620      	mov	r0, r4
   b951c:	f7ff fecd 	bl	b92ba <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b9520:	463d      	mov	r5, r7
    while (s != end) {
   b9522:	e7cf      	b.n	b94c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b9524:	2162      	movs	r1, #98	; 0x62
   b9526:	e7f8      	b.n	b951a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b9528:	2174      	movs	r1, #116	; 0x74
   b952a:	e7f6      	b.n	b951a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b952c:	216e      	movs	r1, #110	; 0x6e
   b952e:	e7f4      	b.n	b951a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9530:	2166      	movs	r1, #102	; 0x66
   b9532:	e7f2      	b.n	b951a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b9534:	2172      	movs	r1, #114	; 0x72
   b9536:	e7f0      	b.n	b951a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b9538:	6823      	ldr	r3, [r4, #0]
   b953a:	4632      	mov	r2, r6
   b953c:	68db      	ldr	r3, [r3, #12]
   b953e:	4649      	mov	r1, r9
   b9540:	4620      	mov	r0, r4
   b9542:	4798      	blx	r3
                break;
   b9544:	e7ec      	b.n	b9520 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b9546:	42bd      	cmp	r5, r7
   b9548:	d005      	beq.n	b9556 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b954a:	6823      	ldr	r3, [r4, #0]
   b954c:	1b7a      	subs	r2, r7, r5
   b954e:	689b      	ldr	r3, [r3, #8]
   b9550:	4629      	mov	r1, r5
   b9552:	4620      	mov	r0, r4
   b9554:	4798      	blx	r3
    }
    write('"');
   b9556:	2122      	movs	r1, #34	; 0x22
   b9558:	4620      	mov	r0, r4
   b955a:	f7ff feae 	bl	b92ba <_ZN5spark10JSONWriter5writeEc>
}
   b955e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9562:	bf00      	nop
   b9564:	000be778 	.word	0x000be778

000b9568 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b9568:	b513      	push	{r0, r1, r4, lr}
   b956a:	4604      	mov	r4, r0
   b956c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9570:	f7ff ff5e 	bl	b9430 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b9574:	4620      	mov	r0, r4
   b9576:	e9dd 2100 	ldrd	r2, r1, [sp]
   b957a:	f7ff ff97 	bl	b94ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b957e:	2302      	movs	r3, #2
}
   b9580:	4620      	mov	r0, r4
    state_ = VALUE;
   b9582:	7123      	strb	r3, [r4, #4]
}
   b9584:	b002      	add	sp, #8
   b9586:	bd10      	pop	{r4, pc}

000b9588 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b9588:	b513      	push	{r0, r1, r4, lr}
   b958a:	4604      	mov	r4, r0
   b958c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9590:	f7ff ff4e 	bl	b9430 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b9594:	4620      	mov	r0, r4
   b9596:	e9dd 2100 	ldrd	r2, r1, [sp]
   b959a:	f7ff ff87 	bl	b94ac <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b959e:	2301      	movs	r3, #1
}
   b95a0:	4620      	mov	r0, r4
    state_ = NEXT;
   b95a2:	7123      	strb	r3, [r4, #4]
}
   b95a4:	b002      	add	sp, #8
   b95a6:	bd10      	pop	{r4, pc}

000b95a8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b95a8:	6880      	ldr	r0, [r0, #8]
   b95aa:	6803      	ldr	r3, [r0, #0]
   b95ac:	68db      	ldr	r3, [r3, #12]
   b95ae:	4718      	bx	r3

000b95b0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b95b0:	4770      	bx	lr

000b95b2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b95b2:	4608      	mov	r0, r1
   b95b4:	b111      	cbz	r1, b95bc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b95b6:	680b      	ldr	r3, [r1, #0]
   b95b8:	685b      	ldr	r3, [r3, #4]
   b95ba:	4718      	bx	r3
}
   b95bc:	4770      	bx	lr

000b95be <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b95be:	4770      	bx	lr

000b95c0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b95c0:	4770      	bx	lr

000b95c2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b95c2:	4770      	bx	lr

000b95c4 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b95c4:	4770      	bx	lr

000b95c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b95c6:	b538      	push	{r3, r4, r5, lr}
   b95c8:	4604      	mov	r4, r0
   b95ca:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b95cc:	6800      	ldr	r0, [r0, #0]
   b95ce:	212e      	movs	r1, #46	; 0x2e
   b95d0:	f003 ff9f 	bl	bd512 <strchrnul>
    size = s - category;
   b95d4:	6823      	ldr	r3, [r4, #0]
   b95d6:	1ac3      	subs	r3, r0, r3
   b95d8:	602b      	str	r3, [r5, #0]
    if (size) {
   b95da:	b123      	cbz	r3, b95e6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b95dc:	7803      	ldrb	r3, [r0, #0]
   b95de:	b103      	cbz	r3, b95e2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b95e0:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b95e2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b95e4:	6020      	str	r0, [r4, #0]
}
   b95e6:	4618      	mov	r0, r3
   b95e8:	bd38      	pop	{r3, r4, r5, pc}

000b95ea <_ZN5spark16JSONStreamWriterD0Ev>:
   b95ea:	b510      	push	{r4, lr}
   b95ec:	210c      	movs	r1, #12
   b95ee:	4604      	mov	r4, r0
   b95f0:	f7fa fd55 	bl	b409e <_ZdlPvj>
   b95f4:	4620      	mov	r0, r4
   b95f6:	bd10      	pop	{r4, pc}

000b95f8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b95f8:	b510      	push	{r4, lr}
   b95fa:	2104      	movs	r1, #4
   b95fc:	4604      	mov	r4, r0
   b95fe:	f7fa fd4e 	bl	b409e <_ZdlPvj>
   b9602:	4620      	mov	r0, r4
   b9604:	bd10      	pop	{r4, pc}

000b9606 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9606:	b510      	push	{r4, lr}
   b9608:	2104      	movs	r1, #4
   b960a:	4604      	mov	r4, r0
   b960c:	f7fa fd47 	bl	b409e <_ZdlPvj>
   b9610:	4620      	mov	r0, r4
   b9612:	bd10      	pop	{r4, pc}

000b9614 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9614:	f7fe bf20 	b.w	b8458 <os_mutex_recursive_lock>

000b9618 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9618:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b961a:	f003 ff84 	bl	bd526 <strcmp>
}
   b961e:	fab0 f080 	clz	r0, r0
   b9622:	0940      	lsrs	r0, r0, #5
   b9624:	bd08      	pop	{r3, pc}

000b9626 <__tcf_1>:
   b9626:	4770      	bx	lr

000b9628 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9628:	b510      	push	{r4, lr}
   b962a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b962c:	f001 feda 	bl	bb3e4 <_Z16_fetch_usbserialv>
   b9630:	4284      	cmp	r4, r0
   b9632:	d010      	beq.n	b9656 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b9634:	f002 f8bc 	bl	bb7b0 <_Z22__fetch_global_Serial1v>
   b9638:	4284      	cmp	r4, r0
   b963a:	d105      	bne.n	b9648 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b963c:	f002 f8b8 	bl	bb7b0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b9640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b9644:	f001 be67 	b.w	bb316 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b9648:	b12c      	cbz	r4, b9656 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b964a:	6823      	ldr	r3, [r4, #0]
   b964c:	4620      	mov	r0, r4
   b964e:	685b      	ldr	r3, [r3, #4]
}
   b9650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9654:	4718      	bx	r3
   b9656:	bd10      	pop	{r4, pc}

000b9658 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9658:	680b      	ldr	r3, [r1, #0]
   b965a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b965c:	684b      	ldr	r3, [r1, #4]
   b965e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9660:	b113      	cbz	r3, b9668 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9662:	685a      	ldr	r2, [r3, #4]
   b9664:	3201      	adds	r2, #1
   b9666:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9668:	4770      	bx	lr

000b966a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b966a:	b513      	push	{r0, r1, r4, lr}
   b966c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b966e:	4608      	mov	r0, r1
   b9670:	9101      	str	r1, [sp, #4]
   b9672:	f003 ff6a 	bl	bd54a <strlen>
   b9676:	9901      	ldr	r1, [sp, #4]
   b9678:	4602      	mov	r2, r0
   b967a:	4620      	mov	r0, r4
}
   b967c:	b002      	add	sp, #8
   b967e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b9682:	f7ff bf81 	b.w	b9588 <_ZN5spark10JSONWriter5valueEPKcj>

000b9686 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b9686:	b513      	push	{r0, r1, r4, lr}
   b9688:	4604      	mov	r4, r0
    write(str, strlen(str));
   b968a:	4608      	mov	r0, r1
   b968c:	9101      	str	r1, [sp, #4]
   b968e:	f003 ff5c 	bl	bd54a <strlen>
   b9692:	6823      	ldr	r3, [r4, #0]
   b9694:	9901      	ldr	r1, [sp, #4]
   b9696:	68db      	ldr	r3, [r3, #12]
   b9698:	4602      	mov	r2, r0
   b969a:	4620      	mov	r0, r4
}
   b969c:	b002      	add	sp, #8
   b969e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b96a2:	4718      	bx	r3

000b96a4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b96a4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b96a6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b96a8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b96ac:	68db      	ldr	r3, [r3, #12]
   b96ae:	2201      	movs	r2, #1
   b96b0:	f10d 0107 	add.w	r1, sp, #7
   b96b4:	4798      	blx	r3
}
   b96b6:	b003      	add	sp, #12
   b96b8:	f85d fb04 	ldr.w	pc, [sp], #4

000b96bc <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b96bc:	b40e      	push	{r1, r2, r3}
   b96be:	b503      	push	{r0, r1, lr}
   b96c0:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b96c2:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b96c4:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b96c8:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b96ca:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b96cc:	f001 f975 	bl	ba9ba <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b96d0:	b002      	add	sp, #8
   b96d2:	f85d eb04 	ldr.w	lr, [sp], #4
   b96d6:	b003      	add	sp, #12
   b96d8:	4770      	bx	lr

000b96da <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b96da:	680a      	ldr	r2, [r1, #0]
   b96dc:	6002      	str	r2, [r0, #0]
   b96de:	684a      	ldr	r2, [r1, #4]
   b96e0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b96e2:	2200      	movs	r2, #0
   b96e4:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b96e8:	b510      	push	{r4, lr}
   b96ea:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b96ec:	688c      	ldr	r4, [r1, #8]
   b96ee:	6084      	str	r4, [r0, #8]
   b96f0:	68cc      	ldr	r4, [r1, #12]
   b96f2:	60c4      	str	r4, [r0, #12]
   b96f4:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b96f6:	608a      	str	r2, [r1, #8]
   b96f8:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b96fa:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b96fc:	610a      	str	r2, [r1, #16]
   b96fe:	bd10      	pop	{r4, pc}

000b9700 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b9704:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9708:	f04f 0a14 	mov.w	sl, #20
   b970c:	9300      	str	r3, [sp, #0]
   b970e:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b9712:	4b18      	ldr	r3, [pc, #96]	; (b9774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9714:	10a4      	asrs	r4, r4, #2
   b9716:	4617      	mov	r7, r2
   b9718:	435c      	muls	r4, r3
   b971a:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b971c:	2c00      	cmp	r4, #0
   b971e:	dd21      	ble.n	b9764 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9720:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b9722:	fb0a f006 	mul.w	r0, sl, r6
   b9726:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b972a:	463a      	mov	r2, r7
   b972c:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9730:	5828      	ldr	r0, [r5, r0]
   b9732:	9101      	str	r1, [sp, #4]
   b9734:	455f      	cmp	r7, fp
   b9736:	bf28      	it	cs
   b9738:	465a      	movcs	r2, fp
   b973a:	f003 ff0e 	bl	bd55a <strncmp>
                if (cmp == 0) {
   b973e:	2800      	cmp	r0, #0
   b9740:	9901      	ldr	r1, [sp, #4]
   b9742:	f04f 0301 	mov.w	r3, #1
   b9746:	d10b      	bne.n	b9760 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b9748:	455f      	cmp	r7, fp
   b974a:	d103      	bne.n	b9754 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b974c:	9a00      	ldr	r2, [sp, #0]
   b974e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9750:	4634      	mov	r4, r6
   b9752:	e7e3      	b.n	b971c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b9754:	d9fc      	bls.n	b9750 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b9756:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9758:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b975c:	3e01      	subs	r6, #1
   b975e:	e7f7      	b.n	b9750 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9760:	dbf9      	blt.n	b9756 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b9762:	e7f5      	b.n	b9750 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b9764:	eba5 0508 	sub.w	r5, r5, r8
}
   b9768:	4802      	ldr	r0, [pc, #8]	; (b9774 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b976a:	10ad      	asrs	r5, r5, #2
   b976c:	4368      	muls	r0, r5
   b976e:	b003      	add	sp, #12
   b9770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9774:	cccccccd 	.word	0xcccccccd

000b9778 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b977a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b977c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b977e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9780:	b303      	cbz	r3, b97c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b9782:	b1f9      	cbz	r1, b97c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b9784:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b9786:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b978a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b978c:	a903      	add	r1, sp, #12
   b978e:	a801      	add	r0, sp, #4
   b9790:	f7ff ff19 	bl	b95c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9794:	4601      	mov	r1, r0
   b9796:	b1a8      	cbz	r0, b97c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9798:	f10d 030b 	add.w	r3, sp, #11
   b979c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b979e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b97a2:	4620      	mov	r0, r4
   b97a4:	f7ff ffac 	bl	b9700 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b97a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b97ac:	b153      	cbz	r3, b97c4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b97ae:	6823      	ldr	r3, [r4, #0]
   b97b0:	2414      	movs	r4, #20
   b97b2:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b97b6:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b97b8:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b97bc:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b97be:	bfa8      	it	ge
   b97c0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b97c2:	e7e3      	b.n	b978c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b97c4:	4628      	mov	r0, r5
   b97c6:	b004      	add	sp, #16
   b97c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b97cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b97cc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b97ce:	4c09      	ldr	r4, [pc, #36]	; (b97f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b97d0:	7823      	ldrb	r3, [r4, #0]
   b97d2:	f3bf 8f5b 	dmb	ish
   b97d6:	07db      	lsls	r3, r3, #31
   b97d8:	d409      	bmi.n	b97ee <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b97da:	4620      	mov	r0, r4
   b97dc:	f7fa fc6e 	bl	b40bc <__cxa_guard_acquire>
   b97e0:	b128      	cbz	r0, b97ee <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b97e2:	4620      	mov	r0, r4
   b97e4:	f7fa fc6f 	bl	b40c6 <__cxa_guard_release>
   b97e8:	4803      	ldr	r0, [pc, #12]	; (b97f8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b97ea:	f003 fdbd 	bl	bd368 <atexit>
}
   b97ee:	4803      	ldr	r0, [pc, #12]	; (b97fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b97f0:	bd10      	pop	{r4, pc}
   b97f2:	bf00      	nop
   b97f4:	2003e650 	.word	0x2003e650
   b97f8:	000b95bf 	.word	0x000b95bf
   b97fc:	2003ded0 	.word	0x2003ded0

000b9800 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9800:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b9802:	4c09      	ldr	r4, [pc, #36]	; (b9828 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b9804:	7823      	ldrb	r3, [r4, #0]
   b9806:	f3bf 8f5b 	dmb	ish
   b980a:	07db      	lsls	r3, r3, #31
   b980c:	d409      	bmi.n	b9822 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b980e:	4620      	mov	r0, r4
   b9810:	f7fa fc54 	bl	b40bc <__cxa_guard_acquire>
   b9814:	b128      	cbz	r0, b9822 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9816:	4620      	mov	r0, r4
   b9818:	f7fa fc55 	bl	b40c6 <__cxa_guard_release>
   b981c:	4803      	ldr	r0, [pc, #12]	; (b982c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b981e:	f003 fda3 	bl	bd368 <atexit>
    return &factory;
}
   b9822:	4803      	ldr	r0, [pc, #12]	; (b9830 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b9824:	bd10      	pop	{r4, pc}
   b9826:	bf00      	nop
   b9828:	2003e654 	.word	0x2003e654
   b982c:	000b9627 	.word	0x000b9627
   b9830:	2003ded4 	.word	0x2003ded4

000b9834 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b9834:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b9836:	2500      	movs	r5, #0
   b9838:	4604      	mov	r4, r0
   b983a:	e9c0 5500 	strd	r5, r5, [r0]
   b983e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9842:	6085      	str	r5, [r0, #8]
   b9844:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b9846:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b984a:	f7fe fdf5 	bl	b8438 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b984e:	f7ff ffbd 	bl	b97cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b9852:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9854:	f7ff ffd4 	bl	b9800 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9858:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b985a:	6220      	str	r0, [r4, #32]
}
   b985c:	4620      	mov	r0, r4
   b985e:	bd38      	pop	{r3, r4, r5, pc}

000b9860 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9860:	b510      	push	{r4, lr}
    static LogManager mgr;
   b9862:	4c0a      	ldr	r4, [pc, #40]	; (b988c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b9864:	7823      	ldrb	r3, [r4, #0]
   b9866:	f3bf 8f5b 	dmb	ish
   b986a:	07db      	lsls	r3, r3, #31
   b986c:	d40c      	bmi.n	b9888 <_ZN5spark10LogManager8instanceEv+0x28>
   b986e:	4620      	mov	r0, r4
   b9870:	f7fa fc24 	bl	b40bc <__cxa_guard_acquire>
   b9874:	b140      	cbz	r0, b9888 <_ZN5spark10LogManager8instanceEv+0x28>
   b9876:	4806      	ldr	r0, [pc, #24]	; (b9890 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9878:	f7ff ffdc 	bl	b9834 <_ZN5spark10LogManagerC1Ev>
   b987c:	4620      	mov	r0, r4
   b987e:	f7fa fc22 	bl	b40c6 <__cxa_guard_release>
   b9882:	4804      	ldr	r0, [pc, #16]	; (b9894 <_ZN5spark10LogManager8instanceEv+0x34>)
   b9884:	f003 fd70 	bl	bd368 <atexit>
    return &mgr;
}
   b9888:	4801      	ldr	r0, [pc, #4]	; (b9890 <_ZN5spark10LogManager8instanceEv+0x30>)
   b988a:	bd10      	pop	{r4, pc}
   b988c:	2003e64c 	.word	0x2003e64c
   b9890:	2003e65c 	.word	0x2003e65c
   b9894:	000b9db5 	.word	0x000b9db5

000b9898 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9898:	4a02      	ldr	r2, [pc, #8]	; (b98a4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b989a:	4903      	ldr	r1, [pc, #12]	; (b98a8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b989c:	4803      	ldr	r0, [pc, #12]	; (b98ac <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b989e:	2300      	movs	r3, #0
   b98a0:	f7fe bffa 	b.w	b8898 <log_set_callbacks>
   b98a4:	000b9b99 	.word	0x000b9b99
   b98a8:	000b9b25 	.word	0x000b9b25
   b98ac:	000b9aa5 	.word	0x000b9aa5

000b98b0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b98b0:	2300      	movs	r3, #0
   b98b2:	461a      	mov	r2, r3
   b98b4:	4619      	mov	r1, r3
   b98b6:	4618      	mov	r0, r3
   b98b8:	f7fe bfee 	b.w	b8898 <log_set_callbacks>

000b98bc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b98bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b98be:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b98c0:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b98c2:	4668      	mov	r0, sp
   b98c4:	f7ff fec8 	bl	b9658 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b98c8:	466a      	mov	r2, sp
   b98ca:	4629      	mov	r1, r5
   b98cc:	4620      	mov	r0, r4
   b98ce:	f7ff fd7b 	bl	b93c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b98d2:	a801      	add	r0, sp, #4
   b98d4:	f7ff f985 	bl	b8be2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b98d8:	4620      	mov	r0, r4
   b98da:	b003      	add	sp, #12
   b98dc:	bd30      	pop	{r4, r5, pc}

000b98de <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b98de:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b98e0:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b98e2:	4604      	mov	r4, r0
   b98e4:	4668      	mov	r0, sp
   b98e6:	f7ff feb7 	bl	b9658 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b98ea:	466a      	mov	r2, sp
   b98ec:	4629      	mov	r1, r5
   b98ee:	4620      	mov	r0, r4
   b98f0:	f7ff fd46 	bl	b9380 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b98f4:	a801      	add	r0, sp, #4
   b98f6:	f7ff f974 	bl	b8be2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b98fa:	4620      	mov	r0, r4
   b98fc:	b003      	add	sp, #12
   b98fe:	bd30      	pop	{r4, r5, pc}

000b9900 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9900:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9902:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9904:	4604      	mov	r4, r0
   b9906:	4668      	mov	r0, sp
   b9908:	f7ff fea6 	bl	b9658 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b990c:	466a      	mov	r2, sp
   b990e:	4629      	mov	r1, r5
   b9910:	4620      	mov	r0, r4
   b9912:	f7ff fcde 	bl	b92d2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9916:	a801      	add	r0, sp, #4
   b9918:	f7ff f963 	bl	b8be2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b991c:	4620      	mov	r0, r4
   b991e:	b003      	add	sp, #12
   b9920:	bd30      	pop	{r4, r5, pc}
	...

000b9924 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b9924:	b570      	push	{r4, r5, r6, lr}
   b9926:	b08a      	sub	sp, #40	; 0x28
   b9928:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b992a:	4601      	mov	r1, r0
   b992c:	a804      	add	r0, sp, #16
   b992e:	f7ff ffc5 	bl	b98bc <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b9932:	4e14      	ldr	r6, [pc, #80]	; (b9984 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b9934:	a804      	add	r0, sp, #16
   b9936:	f7ff fd5f 	bl	b93f8 <_ZN5spark18JSONObjectIterator4nextEv>
   b993a:	b1e8      	cbz	r0, b9978 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b993c:	a904      	add	r1, sp, #16
   b993e:	4668      	mov	r0, sp
   b9940:	f7ff ffcd 	bl	b98de <_ZNK5spark18JSONObjectIterator4nameEv>
   b9944:	9802      	ldr	r0, [sp, #8]
   b9946:	4631      	mov	r1, r6
   b9948:	f7ff fe66 	bl	b9618 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b994c:	4604      	mov	r4, r0
   b994e:	b110      	cbz	r0, b9956 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b9950:	1e2c      	subs	r4, r5, #0
   b9952:	bf18      	it	ne
   b9954:	2401      	movne	r4, #1
   b9956:	a801      	add	r0, sp, #4
   b9958:	f7ff f943 	bl	b8be2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b995c:	2c00      	cmp	r4, #0
   b995e:	d0e9      	beq.n	b9934 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9960:	a904      	add	r1, sp, #16
   b9962:	4668      	mov	r0, sp
   b9964:	f7ff ffcc 	bl	b9900 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9968:	4668      	mov	r0, sp
   b996a:	f7ff fce8 	bl	b933e <_ZNK5spark9JSONValue5toIntEv>
   b996e:	6028      	str	r0, [r5, #0]
   b9970:	a801      	add	r0, sp, #4
   b9972:	f7ff f936 	bl	b8be2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9976:	e7dd      	b.n	b9934 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9978:	a805      	add	r0, sp, #20
   b997a:	f7ff f932 	bl	b8be2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b997e:	b00a      	add	sp, #40	; 0x28
   b9980:	bd70      	pop	{r4, r5, r6, pc}
   b9982:	bf00      	nop
   b9984:	000be77e 	.word	0x000be77e

000b9988 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9988:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b998a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b998c:	4620      	mov	r0, r4
   b998e:	4913      	ldr	r1, [pc, #76]	; (b99dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9990:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b9992:	f003 fdc8 	bl	bd526 <strcmp>
   b9996:	b950      	cbnz	r0, b99ae <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9998:	f001 fd24 	bl	bb3e4 <_Z16_fetch_usbserialv>
   b999c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b99a0:	f001 fd0e 	bl	bb3c0 <_ZN9USBSerial5beginEl>
}
   b99a4:	b003      	add	sp, #12
   b99a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b99aa:	f001 bd1b 	b.w	bb3e4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b99ae:	490c      	ldr	r1, [pc, #48]	; (b99e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b99b0:	4620      	mov	r0, r4
   b99b2:	f003 fdb8 	bl	bd526 <strcmp>
   b99b6:	b978      	cbnz	r0, b99d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b99b8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b99bc:	a901      	add	r1, sp, #4
   b99be:	4628      	mov	r0, r5
        int baud = 9600;
   b99c0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b99c2:	f7ff ffaf 	bl	b9924 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b99c6:	f001 fef3 	bl	bb7b0 <_Z22__fetch_global_Serial1v>
   b99ca:	9901      	ldr	r1, [sp, #4]
   b99cc:	f001 fca0 	bl	bb310 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b99d0:	f001 feee 	bl	bb7b0 <_Z22__fetch_global_Serial1v>
}
   b99d4:	b003      	add	sp, #12
   b99d6:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b99d8:	2000      	movs	r0, #0
   b99da:	e7fb      	b.n	b99d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b99dc:	000be783 	.word	0x000be783
   b99e0:	000be78a 	.word	0x000be78a

000b99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b99e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b99e6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b99ea:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b99ec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b99ee:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b99f2:	42ae      	cmp	r6, r5
   b99f4:	d005      	beq.n	b9a02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b99f6:	f105 0008 	add.w	r0, r5, #8
   b99fa:	f7ff fff3 	bl	b99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b99fe:	3514      	adds	r5, #20
   b9a00:	e7f7      	b.n	b99f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b9a02:	6820      	ldr	r0, [r4, #0]
   b9a04:	f7ff f85c 	bl	b8ac0 <free>
}
   b9a08:	4620      	mov	r0, r4
   b9a0a:	bd70      	pop	{r4, r5, r6, pc}

000b9a0c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b9a0c:	b510      	push	{r4, lr}
   b9a0e:	4604      	mov	r4, r0
   b9a10:	300c      	adds	r0, #12
   b9a12:	f7ff ffe7 	bl	b99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9a16:	4620      	mov	r0, r4
   b9a18:	f7ff f8d1 	bl	b8bbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9a1c:	4620      	mov	r0, r4
   b9a1e:	bd10      	pop	{r4, pc}

000b9a20 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9a20:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b9a22:	4b04      	ldr	r3, [pc, #16]	; (b9a34 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b9a24:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b9a26:	f840 3b04 	str.w	r3, [r0], #4
   b9a2a:	f7ff ffef 	bl	b9a0c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b9a2e:	4620      	mov	r0, r4
   b9a30:	bd10      	pop	{r4, pc}
   b9a32:	bf00      	nop
   b9a34:	000bda0c 	.word	0x000bda0c

000b9a38 <_ZN5spark16StreamLogHandlerD0Ev>:
   b9a38:	b510      	push	{r4, lr}
   b9a3a:	4604      	mov	r4, r0
   b9a3c:	f7ff fff0 	bl	b9a20 <_ZN5spark16StreamLogHandlerD1Ev>
   b9a40:	4620      	mov	r0, r4
   b9a42:	2124      	movs	r1, #36	; 0x24
   b9a44:	f7fa fb2b 	bl	b409e <_ZdlPvj>
   b9a48:	4620      	mov	r0, r4
   b9a4a:	bd10      	pop	{r4, pc}

000b9a4c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b9a4c:	b510      	push	{r4, lr}
   b9a4e:	4b03      	ldr	r3, [pc, #12]	; (b9a5c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b9a50:	6003      	str	r3, [r0, #0]
   b9a52:	4604      	mov	r4, r0
   b9a54:	f7ff ffe4 	bl	b9a20 <_ZN5spark16StreamLogHandlerD1Ev>
   b9a58:	4620      	mov	r0, r4
   b9a5a:	bd10      	pop	{r4, pc}
   b9a5c:	000be824 	.word	0x000be824

000b9a60 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9a60:	b510      	push	{r4, lr}
   b9a62:	4604      	mov	r4, r0
   b9a64:	f7ff fff2 	bl	b9a4c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9a68:	4620      	mov	r0, r4
   b9a6a:	2124      	movs	r1, #36	; 0x24
   b9a6c:	f7fa fb17 	bl	b409e <_ZdlPvj>
   b9a70:	4620      	mov	r0, r4
   b9a72:	bd10      	pop	{r4, pc}

000b9a74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b9a74:	2200      	movs	r2, #0
   b9a76:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b9a7a:	b510      	push	{r4, lr}
        capacity_(0) {
   b9a7c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9a7e:	680c      	ldr	r4, [r1, #0]
   b9a80:	6004      	str	r4, [r0, #0]
   b9a82:	684c      	ldr	r4, [r1, #4]
   b9a84:	6044      	str	r4, [r0, #4]
   b9a86:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9a88:	600a      	str	r2, [r1, #0]
   b9a8a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9a8c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9a8e:	608a      	str	r2, [r1, #8]
}
   b9a90:	bd10      	pop	{r4, pc}

000b9a92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b9a92:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9a94:	6803      	ldr	r3, [r0, #0]
   b9a96:	4604      	mov	r4, r0
   b9a98:	6818      	ldr	r0, [r3, #0]
   b9a9a:	f7fe fce5 	bl	b8468 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b9a9e:	4620      	mov	r0, r4
   b9aa0:	bd10      	pop	{r4, pc}
	...

000b9aa4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9aa8:	b087      	sub	sp, #28
   b9aaa:	4680      	mov	r8, r0
   b9aac:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b9aae:	4b1c      	ldr	r3, [pc, #112]	; (b9b20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9ab0:	685b      	ldr	r3, [r3, #4]
   b9ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9ab6:	4689      	mov	r9, r1
   b9ab8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b9aba:	b96b      	cbnz	r3, b9ad8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b9abc:	f7ff fed0 	bl	b9860 <_ZN5spark10LogManager8instanceEv>
   b9ac0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9ac2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9ac6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ac8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b9aca:	f7ff fda3 	bl	b9614 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b9ace:	7b23      	ldrb	r3, [r4, #12]
   b9ad0:	b12b      	cbz	r3, b9ade <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b9ad2:	a805      	add	r0, sp, #20
   b9ad4:	f7ff ffdd 	bl	b9a92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9ad8:	b007      	add	sp, #28
   b9ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b9ade:	2301      	movs	r3, #1
   b9ae0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b9ae2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b9ae6:	fa5f f989 	uxtb.w	r9, r9
   b9aea:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9aee:	45aa      	cmp	sl, r5
   b9af0:	d012      	beq.n	b9b18 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b9af2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b9af6:	4631      	mov	r1, r6
   b9af8:	1d38      	adds	r0, r7, #4
   b9afa:	f7ff fe3d 	bl	b9778 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9afe:	4581      	cmp	r9, r0
   b9b00:	d3f5      	bcc.n	b9aee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b9b02:	683b      	ldr	r3, [r7, #0]
   b9b04:	9a03      	ldr	r2, [sp, #12]
   b9b06:	9200      	str	r2, [sp, #0]
   b9b08:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b9b0c:	464a      	mov	r2, r9
   b9b0e:	4633      	mov	r3, r6
   b9b10:	4641      	mov	r1, r8
   b9b12:	4638      	mov	r0, r7
   b9b14:	47d8      	blx	fp
   b9b16:	e7ea      	b.n	b9aee <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9b18:	2300      	movs	r3, #0
   b9b1a:	7323      	strb	r3, [r4, #12]
   b9b1c:	e7d9      	b.n	b9ad2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b9b1e:	bf00      	nop
   b9b20:	e000ed00 	.word	0xe000ed00

000b9b24 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b9b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b28:	469b      	mov	fp, r3
   b9b2a:	4b1a      	ldr	r3, [pc, #104]	; (b9b94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b9b2c:	685b      	ldr	r3, [r3, #4]
   b9b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9b32:	4680      	mov	r8, r0
   b9b34:	4689      	mov	r9, r1
   b9b36:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9b38:	b96b      	cbnz	r3, b9b56 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b9b3a:	f7ff fe91 	bl	b9860 <_ZN5spark10LogManager8instanceEv>
   b9b3e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9b40:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b9b44:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9b46:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9b48:	f7ff fd64 	bl	b9614 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b9b4c:	7b23      	ldrb	r3, [r4, #12]
   b9b4e:	b12b      	cbz	r3, b9b5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9b50:	a801      	add	r0, sp, #4
   b9b52:	f7ff ff9e 	bl	b9a92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9b56:	b003      	add	sp, #12
   b9b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9b5c:	2301      	movs	r3, #1
   b9b5e:	7323      	strb	r3, [r4, #12]
   b9b60:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b9b64:	b2f6      	uxtb	r6, r6
   b9b66:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9b6a:	4555      	cmp	r5, sl
   b9b6c:	d00e      	beq.n	b9b8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9b6e:	f855 7b04 	ldr.w	r7, [r5], #4
   b9b72:	4659      	mov	r1, fp
   b9b74:	1d38      	adds	r0, r7, #4
   b9b76:	f7ff fdff 	bl	b9778 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9b7a:	4286      	cmp	r6, r0
   b9b7c:	d3f5      	bcc.n	b9b6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b9b7e:	683b      	ldr	r3, [r7, #0]
   b9b80:	464a      	mov	r2, r9
   b9b82:	68db      	ldr	r3, [r3, #12]
   b9b84:	4641      	mov	r1, r8
   b9b86:	4638      	mov	r0, r7
   b9b88:	4798      	blx	r3
   b9b8a:	e7ee      	b.n	b9b6a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b9b8c:	2300      	movs	r3, #0
   b9b8e:	7323      	strb	r3, [r4, #12]
   b9b90:	e7de      	b.n	b9b50 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b9b92:	bf00      	nop
   b9b94:	e000ed00 	.word	0xe000ed00

000b9b98 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9b98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b9b9c:	4b16      	ldr	r3, [pc, #88]	; (b9bf8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b9b9e:	685b      	ldr	r3, [r3, #4]
   b9ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9ba4:	4605      	mov	r5, r0
   b9ba6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9ba8:	bb1b      	cbnz	r3, b9bf2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b9baa:	f7ff fe59 	bl	b9860 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b9bae:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b9bb2:	4604      	mov	r4, r0
   b9bb4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9bb6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9bb8:	f7ff fd2c 	bl	b9614 <_ZN14RecursiveMutex4lockEv.isra.0>
   b9bbc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9bc0:	2446      	movs	r4, #70	; 0x46
   b9bc2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9bc6:	45b0      	cmp	r8, r6
   b9bc8:	d109      	bne.n	b9bde <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b9bca:	a801      	add	r0, sp, #4
   b9bcc:	f7ff ff61 	bl	b9a92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b9bd0:	42a5      	cmp	r5, r4
   b9bd2:	bfb4      	ite	lt
   b9bd4:	2000      	movlt	r0, #0
   b9bd6:	2001      	movge	r0, #1
}
   b9bd8:	b002      	add	sp, #8
   b9bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b9bde:	f856 0b04 	ldr.w	r0, [r6], #4
   b9be2:	4639      	mov	r1, r7
   b9be4:	3004      	adds	r0, #4
   b9be6:	f7ff fdc7 	bl	b9778 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b9bea:	4284      	cmp	r4, r0
   b9bec:	bfa8      	it	ge
   b9bee:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b9bf0:	e7e9      	b.n	b9bc6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b9bf2:	2000      	movs	r0, #0
   b9bf4:	e7f0      	b.n	b9bd8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b9bf6:	bf00      	nop
   b9bf8:	e000ed00 	.word	0xe000ed00

000b9bfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9bfe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b9c02:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9c04:	4604      	mov	r4, r0
   b9c06:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9c08:	db0d      	blt.n	b9c26 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b9c0a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b9c0c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9c0e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9c10:	dd04      	ble.n	b9c1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b9c12:	00b9      	lsls	r1, r7, #2
   b9c14:	f7fe ff5c 	bl	b8ad0 <realloc>
            if (!d) {
   b9c18:	b918      	cbnz	r0, b9c22 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b9c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b9c1c:	f7fe ff50 	bl	b8ac0 <free>
        T* d = nullptr;
   b9c20:	2000      	movs	r0, #0
        data_ = d;
   b9c22:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9c24:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b9c26:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9c28:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9c2a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b9c2e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9c30:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b9c34:	1d08      	adds	r0, r1, #4
   b9c36:	f003 fbd1 	bl	bd3dc <memmove>
    new(p) T(std::move(value));
   b9c3a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b9c3e:	6863      	ldr	r3, [r4, #4]
   b9c40:	3301      	adds	r3, #1
   b9c42:	6063      	str	r3, [r4, #4]
    return true;
   b9c44:	2001      	movs	r0, #1
   b9c46:	e7e8      	b.n	b9c1a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b9c48 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b9c4a:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9c4e:	4604      	mov	r4, r0
   b9c50:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9c52:	9301      	str	r3, [sp, #4]
   b9c54:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b9c56:	f7ff fcdd 	bl	b9614 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b9c5a:	e9d4 3200 	ldrd	r3, r2, [r4]
   b9c5e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b9c62:	4293      	cmp	r3, r2
   b9c64:	4619      	mov	r1, r3
   b9c66:	d00b      	beq.n	b9c80 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b9c68:	6809      	ldr	r1, [r1, #0]
   b9c6a:	42a9      	cmp	r1, r5
   b9c6c:	f103 0304 	add.w	r3, r3, #4
   b9c70:	d1f7      	bne.n	b9c62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b9c72:	a801      	add	r0, sp, #4
   b9c74:	f7ff ff0d 	bl	b9a92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9c78:	2500      	movs	r5, #0
}
   b9c7a:	4628      	mov	r0, r5
   b9c7c:	b003      	add	sp, #12
   b9c7e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b9c80:	4629      	mov	r1, r5
   b9c82:	4620      	mov	r0, r4
   b9c84:	f7ff ffba 	bl	b9bfc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b9c88:	4605      	mov	r5, r0
   b9c8a:	2800      	cmp	r0, #0
   b9c8c:	d0f1      	beq.n	b9c72 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b9c8e:	6863      	ldr	r3, [r4, #4]
   b9c90:	2b01      	cmp	r3, #1
   b9c92:	d101      	bne.n	b9c98 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b9c94:	f7ff fe00 	bl	b9898 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9c98:	a801      	add	r0, sp, #4
   b9c9a:	f7ff fefa 	bl	b9a92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9c9e:	e7ec      	b.n	b9c7a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9ca0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9ca0:	b570      	push	{r4, r5, r6, lr}
   b9ca2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9ca4:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9ca8:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b9caa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9cae:	4282      	cmp	r2, r0
   b9cb0:	d00f      	beq.n	b9cd2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9cb2:	4601      	mov	r1, r0
            if (*p == value) {
   b9cb4:	681d      	ldr	r5, [r3, #0]
   b9cb6:	f851 6b04 	ldr.w	r6, [r1], #4
   b9cba:	42ae      	cmp	r6, r5
   b9cbc:	d107      	bne.n	b9cce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9cbe:	1a52      	subs	r2, r2, r1
   b9cc0:	f003 fb8c 	bl	bd3dc <memmove>
    --size_;
   b9cc4:	6863      	ldr	r3, [r4, #4]
   b9cc6:	3b01      	subs	r3, #1
   b9cc8:	6063      	str	r3, [r4, #4]
    return true;
   b9cca:	2001      	movs	r0, #1
}
   b9ccc:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9cce:	4608      	mov	r0, r1
   b9cd0:	e7ed      	b.n	b9cae <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9cd2:	2000      	movs	r0, #0
   b9cd4:	e7fa      	b.n	b9ccc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b9cd6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9cd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b9cd8:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9cdc:	4604      	mov	r4, r0
   b9cde:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9ce0:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ce2:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9ce4:	f7ff fc96 	bl	b9614 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b9ce8:	a901      	add	r1, sp, #4
   b9cea:	4620      	mov	r0, r4
   b9cec:	f7ff ffd8 	bl	b9ca0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9cf0:	b118      	cbz	r0, b9cfa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9cf2:	6863      	ldr	r3, [r4, #4]
   b9cf4:	b90b      	cbnz	r3, b9cfa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b9cf6:	f7ff fddb 	bl	b98b0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9cfa:	a803      	add	r0, sp, #12
   b9cfc:	f7ff fec9 	bl	b9a92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9d00:	b004      	add	sp, #16
   b9d02:	bd10      	pop	{r4, pc}

000b9d04 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9d04:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b9d06:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b9d0a:	2318      	movs	r3, #24
   b9d0c:	4604      	mov	r4, r0
   b9d0e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9d12:	42ae      	cmp	r6, r5
   b9d14:	d015      	beq.n	b9d42 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b9d16:	f105 0110 	add.w	r1, r5, #16
   b9d1a:	4620      	mov	r0, r4
   b9d1c:	f7ff ffc0 	bl	b9ca0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9d20:	6863      	ldr	r3, [r4, #4]
   b9d22:	b90b      	cbnz	r3, b9d28 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9d24:	f7ff fdc4 	bl	b98b0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b9d28:	69e0      	ldr	r0, [r4, #28]
   b9d2a:	6929      	ldr	r1, [r5, #16]
   b9d2c:	6803      	ldr	r3, [r0, #0]
   b9d2e:	68db      	ldr	r3, [r3, #12]
   b9d30:	4798      	blx	r3
        if (h.stream) {
   b9d32:	6969      	ldr	r1, [r5, #20]
   b9d34:	b119      	cbz	r1, b9d3e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b9d36:	6a20      	ldr	r0, [r4, #32]
   b9d38:	6803      	ldr	r3, [r0, #0]
   b9d3a:	68db      	ldr	r3, [r3, #12]
   b9d3c:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9d3e:	3518      	adds	r5, #24
   b9d40:	e7e7      	b.n	b9d12 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b9d42:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9d46:	2618      	movs	r6, #24
   b9d48:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9d4c:	42ae      	cmp	r6, r5
   b9d4e:	d004      	beq.n	b9d5a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9d50:	4628      	mov	r0, r5
   b9d52:	f000 ff47 	bl	babe4 <_ZN6StringD1Ev>
   b9d56:	3518      	adds	r5, #24
   b9d58:	e7f8      	b.n	b9d4c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b9d5a:	2300      	movs	r3, #0
   b9d5c:	6163      	str	r3, [r4, #20]
}
   b9d5e:	bd70      	pop	{r4, r5, r6, pc}

000b9d60 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b9d60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9d62:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b9d64:	f7ff fda4 	bl	b98b0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9d68:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b9d6c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9d6e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9d70:	f7ff fc50 	bl	b9614 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b9d74:	4620      	mov	r0, r4
   b9d76:	f7ff ffc5 	bl	b9d04 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b9d7a:	a801      	add	r0, sp, #4
   b9d7c:	f7ff fe89 	bl	b9a92 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b9d80:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9d82:	b108      	cbz	r0, b9d88 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b9d84:	f7fe fb60 	bl	b8448 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b9d88:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9d8c:	2618      	movs	r6, #24
   b9d8e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9d92:	42ae      	cmp	r6, r5
   b9d94:	d004      	beq.n	b9da0 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b9d96:	4628      	mov	r0, r5
   b9d98:	f000 ff24 	bl	babe4 <_ZN6StringD1Ev>
   b9d9c:	3518      	adds	r5, #24
   b9d9e:	e7f8      	b.n	b9d92 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b9da0:	6920      	ldr	r0, [r4, #16]
   b9da2:	f7fe fe8d 	bl	b8ac0 <free>
   b9da6:	6820      	ldr	r0, [r4, #0]
   b9da8:	f7fe fe8a 	bl	b8ac0 <free>
}
   b9dac:	4620      	mov	r0, r4
   b9dae:	b002      	add	sp, #8
   b9db0:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9db4 <__tcf_2>:
    static LogManager mgr;
   b9db4:	4801      	ldr	r0, [pc, #4]	; (b9dbc <__tcf_2+0x8>)
   b9db6:	f7ff bfd3 	b.w	b9d60 <_ZN5spark10LogManagerD1Ev>
   b9dba:	bf00      	nop
   b9dbc:	2003e65c 	.word	0x2003e65c

000b9dc0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9dc0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9dc4:	4604      	mov	r4, r0
   b9dc6:	460d      	mov	r5, r1
   b9dc8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9dca:	d915      	bls.n	b9df8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9dcc:	4290      	cmp	r0, r2
   b9dce:	d214      	bcs.n	b9dfa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9dd0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9dd4:	1a75      	subs	r5, r6, r1
   b9dd6:	f1a1 0714 	sub.w	r7, r1, #20
   b9dda:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9ddc:	42b7      	cmp	r7, r6
   b9dde:	d01a      	beq.n	b9e16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9de0:	b11c      	cbz	r4, b9dea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9de2:	4631      	mov	r1, r6
   b9de4:	4620      	mov	r0, r4
   b9de6:	f7ff fc78 	bl	b96da <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b9dea:	f106 0008 	add.w	r0, r6, #8
   b9dee:	f7ff fdf9 	bl	b99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9df2:	3e14      	subs	r6, #20
   b9df4:	3c14      	subs	r4, #20
   b9df6:	e7f1      	b.n	b9ddc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b9df8:	d00d      	beq.n	b9e16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b9dfa:	42b5      	cmp	r5, r6
   b9dfc:	d00b      	beq.n	b9e16 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9dfe:	b11c      	cbz	r4, b9e08 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9e00:	4629      	mov	r1, r5
   b9e02:	4620      	mov	r0, r4
   b9e04:	f7ff fc69 	bl	b96da <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b9e08:	f105 0008 	add.w	r0, r5, #8
   b9e0c:	f7ff fdea 	bl	b99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9e10:	3514      	adds	r5, #20
   b9e12:	3414      	adds	r4, #20
   b9e14:	e7f1      	b.n	b9dfa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b9e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9e18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b9e18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9e1c:	4604      	mov	r4, r0
   b9e1e:	460d      	mov	r5, r1
   b9e20:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9e22:	d914      	bls.n	b9e4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9e24:	4290      	cmp	r0, r2
   b9e26:	d213      	bcs.n	b9e50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b9e28:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9e2c:	1a75      	subs	r5, r6, r1
   b9e2e:	f1a1 0710 	sub.w	r7, r1, #16
   b9e32:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9e34:	42b7      	cmp	r7, r6
   b9e36:	d018      	beq.n	b9e6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b9e38:	b11c      	cbz	r4, b9e42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b9e3a:	4631      	mov	r1, r6
   b9e3c:	4620      	mov	r0, r4
   b9e3e:	f000 ff4d 	bl	bacdc <_ZN6StringC1EOS_>
                end->~T();
   b9e42:	4630      	mov	r0, r6
   b9e44:	f000 fece 	bl	babe4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9e48:	3e10      	subs	r6, #16
   b9e4a:	3c10      	subs	r4, #16
   b9e4c:	e7f2      	b.n	b9e34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9e4e:	d00c      	beq.n	b9e6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9e50:	42b5      	cmp	r5, r6
   b9e52:	d00a      	beq.n	b9e6a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9e54:	b11c      	cbz	r4, b9e5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b9e56:	4629      	mov	r1, r5
   b9e58:	4620      	mov	r0, r4
   b9e5a:	f000 ff3f 	bl	bacdc <_ZN6StringC1EOS_>
                p->~T();
   b9e5e:	4628      	mov	r0, r5
   b9e60:	f000 fec0 	bl	babe4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9e64:	3510      	adds	r5, #16
   b9e66:	3410      	adds	r4, #16
   b9e68:	e7f2      	b.n	b9e50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b9e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9e6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b9e6c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9e6e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9e70:	4605      	mov	r5, r0
        if (n > 0) {
   b9e72:	dd11      	ble.n	b9e98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9e74:	0130      	lsls	r0, r6, #4
   b9e76:	f7fe fe1b 	bl	b8ab0 <malloc>
            if (!d) {
   b9e7a:	4604      	mov	r4, r0
   b9e7c:	b158      	cbz	r0, b9e96 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9e7e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9e82:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b9e86:	f7ff ffc7 	bl	b9e18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b9e8a:	6828      	ldr	r0, [r5, #0]
   b9e8c:	f7fe fe18 	bl	b8ac0 <free>
        data_ = d;
   b9e90:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9e92:	60ae      	str	r6, [r5, #8]
        return true;
   b9e94:	2001      	movs	r0, #1
    }
   b9e96:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9e98:	2400      	movs	r4, #0
   b9e9a:	e7f6      	b.n	b9e8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b9e9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9ea0:	4690      	mov	r8, r2
   b9ea2:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b9ea4:	2300      	movs	r3, #0
   b9ea6:	9103      	str	r1, [sp, #12]
    return size_;
   b9ea8:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b9eac:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9eae:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b9eb0:	4299      	cmp	r1, r3
        capacity_(0) {
   b9eb2:	e9c0 3300 	strd	r3, r3, [r0]
   b9eb6:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9ebe:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9ec2:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9ec4:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b9ec6:	dc23      	bgt.n	b9f10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b9ec8:	e9d8 5700 	ldrd	r5, r7, [r8]
   b9ecc:	2314      	movs	r3, #20
   b9ece:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b9ed2:	42af      	cmp	r7, r5
   b9ed4:	d03b      	beq.n	b9f4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b9ed6:	4629      	mov	r1, r5
   b9ed8:	a80b      	add	r0, sp, #44	; 0x2c
   b9eda:	f000 feff 	bl	bacdc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b9ede:	a90b      	add	r1, sp, #44	; 0x2c
   b9ee0:	a80f      	add	r0, sp, #60	; 0x3c
   b9ee2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b9ee4:	f000 fefa 	bl	bacdc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9ee8:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b9eec:	4299      	cmp	r1, r3
   b9eee:	da1b      	bge.n	b9f28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b9ef0:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b9ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b9ef4:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b9ef8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b9efc:	4631      	mov	r1, r6
   b9efe:	f106 0010 	add.w	r0, r6, #16
   b9f02:	f7ff ff89 	bl	b9e18 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b9f06:	b9ee      	cbnz	r6, b9f44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b9f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9f0a:	3301      	adds	r3, #1
   b9f0c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b9f0e:	e011      	b.n	b9f34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b9f10:	a808      	add	r0, sp, #32
   b9f12:	f7ff ffab 	bl	b9e6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9f16:	2800      	cmp	r0, #0
   b9f18:	d1d6      	bne.n	b9ec8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b9f1a:	a808      	add	r0, sp, #32
   b9f1c:	f7fe fe4f 	bl	b8bbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9f20:	4620      	mov	r0, r4
   b9f22:	b015      	add	sp, #84	; 0x54
   b9f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f28:	3101      	adds	r1, #1
   b9f2a:	a808      	add	r0, sp, #32
   b9f2c:	f7ff ff9e 	bl	b9e6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9f30:	2800      	cmp	r0, #0
   b9f32:	d1dd      	bne.n	b9ef0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9f34:	a80f      	add	r0, sp, #60	; 0x3c
   b9f36:	f000 fe55 	bl	babe4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b9f3a:	a80b      	add	r0, sp, #44	; 0x2c
   b9f3c:	f000 fe52 	bl	babe4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9f40:	3514      	adds	r5, #20
   b9f42:	e7c6      	b.n	b9ed2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9f44:	a90f      	add	r1, sp, #60	; 0x3c
   b9f46:	4630      	mov	r0, r6
   b9f48:	f000 fec8 	bl	bacdc <_ZN6StringC1EOS_>
   b9f4c:	e7dc      	b.n	b9f08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b9f4e:	2600      	movs	r6, #0
   b9f50:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9f54:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b9f56:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b9f5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b9f5e:	429e      	cmp	r6, r3
   b9f60:	da7c      	bge.n	ba05c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b9f62:	0133      	lsls	r3, r6, #4
   b9f64:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b9f66:	9306      	str	r3, [sp, #24]
        if (!category) {
   b9f68:	b90b      	cbnz	r3, b9f6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b9f6a:	3601      	adds	r6, #1
   b9f6c:	e7f5      	b.n	b9f5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b9f6e:	2300      	movs	r3, #0
   b9f70:	9307      	str	r3, [sp, #28]
   b9f72:	fb09 f306 	mul.w	r3, r9, r6
   b9f76:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b9f78:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b9f7a:	a907      	add	r1, sp, #28
   b9f7c:	a806      	add	r0, sp, #24
   b9f7e:	f7ff fb22 	bl	b95c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9f82:	4682      	mov	sl, r0
   b9f84:	2800      	cmp	r0, #0
   b9f86:	d0f0      	beq.n	b9f6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b9f88:	f04f 0300 	mov.w	r3, #0
   b9f8c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9f90:	4601      	mov	r1, r0
   b9f92:	9a07      	ldr	r2, [sp, #28]
   b9f94:	f10d 0317 	add.w	r3, sp, #23
   b9f98:	4628      	mov	r0, r5
   b9f9a:	f7ff fbb1 	bl	b9700 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9f9e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9fa2:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9fa4:	2f00      	cmp	r7, #0
   b9fa6:	d14a      	bne.n	ba03e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b9fa8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b9fac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b9fb0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b9fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9fb8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b9fbc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b9fc0:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9fc2:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b9fc6:	4293      	cmp	r3, r2
   b9fc8:	db17      	blt.n	b9ffa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b9fca:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b9fce:	f1ba 0f00 	cmp.w	sl, #0
   b9fd2:	dd30      	ble.n	ba036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b9fd4:	fb09 f00a 	mul.w	r0, r9, sl
   b9fd8:	f7fe fd6a 	bl	b8ab0 <malloc>
            if (!d) {
   b9fdc:	4683      	mov	fp, r0
   b9fde:	b360      	cbz	r0, ba03a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b9fe0:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9fe4:	fb09 1202 	mla	r2, r9, r2, r1
   b9fe8:	f7ff feea 	bl	b9dc0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b9fec:	6828      	ldr	r0, [r5, #0]
   b9fee:	f7fe fd67 	bl	b8ac0 <free>
        data_ = d;
   b9ff2:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b9ff6:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b9ffa:	682b      	ldr	r3, [r5, #0]
   b9ffc:	9a01      	ldr	r2, [sp, #4]
   b9ffe:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   ba002:	686a      	ldr	r2, [r5, #4]
   ba004:	4651      	mov	r1, sl
   ba006:	fb09 3202 	mla	r2, r9, r2, r3
   ba00a:	f10a 0014 	add.w	r0, sl, #20
   ba00e:	f7ff fed7 	bl	b9dc0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   ba012:	f1ba 0f00 	cmp.w	sl, #0
   ba016:	d003      	beq.n	ba020 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   ba018:	a90f      	add	r1, sp, #60	; 0x3c
   ba01a:	4650      	mov	r0, sl
   ba01c:	f7ff fb5d 	bl	b96da <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   ba020:	686b      	ldr	r3, [r5, #4]
   ba022:	3301      	adds	r3, #1
   ba024:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   ba026:	a811      	add	r0, sp, #68	; 0x44
   ba028:	f7ff fcdc 	bl	b99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba02c:	b13f      	cbz	r7, ba03e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   ba02e:	a80b      	add	r0, sp, #44	; 0x2c
   ba030:	f7ff fcd8 	bl	b99e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   ba034:	e771      	b.n	b9f1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   ba036:	46bb      	mov	fp, r7
   ba038:	e7d8      	b.n	b9fec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   ba03a:	2701      	movs	r7, #1
   ba03c:	e7f3      	b.n	ba026 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   ba03e:	9b01      	ldr	r3, [sp, #4]
   ba040:	682d      	ldr	r5, [r5, #0]
   ba042:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   ba046:	9b06      	ldr	r3, [sp, #24]
   ba048:	781b      	ldrb	r3, [r3, #0]
   ba04a:	b92b      	cbnz	r3, ba058 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   ba04c:	f8d8 3000 	ldr.w	r3, [r8]
   ba050:	9a02      	ldr	r2, [sp, #8]
   ba052:	4413      	add	r3, r2
   ba054:	7c1b      	ldrb	r3, [r3, #16]
   ba056:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   ba058:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   ba05a:	e78e      	b.n	b9f7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba05c:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba05e:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba060:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba062:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba064:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba066:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   ba068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   ba06a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba06c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba06e:	60a2      	str	r2, [r4, #8]
   ba070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   ba072:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba074:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   ba076:	60e2      	str	r2, [r4, #12]
   ba078:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   ba07a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba07c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba07e:	6122      	str	r2, [r4, #16]
   ba080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   ba082:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   ba084:	9b03      	ldr	r3, [sp, #12]
   ba086:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   ba088:	6162      	str	r2, [r4, #20]
   ba08a:	7623      	strb	r3, [r4, #24]
   ba08c:	e7cf      	b.n	ba02e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000ba090 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba090:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba092:	4604      	mov	r4, r0
   ba094:	b087      	sub	sp, #28
   ba096:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba098:	4626      	mov	r6, r4
        stream_(&stream) {
   ba09a:	4619      	mov	r1, r3
   ba09c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba09e:	4617      	mov	r7, r2
        stream_(&stream) {
   ba0a0:	f7fa fdc5 	bl	b4c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba0a4:	4b0b      	ldr	r3, [pc, #44]	; (ba0d4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba0a6:	f846 3b04 	str.w	r3, [r6], #4
   ba0aa:	4669      	mov	r1, sp
   ba0ac:	a803      	add	r0, sp, #12
   ba0ae:	f7fa fdbe 	bl	b4c2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba0b2:	aa03      	add	r2, sp, #12
   ba0b4:	4639      	mov	r1, r7
   ba0b6:	4630      	mov	r0, r6
   ba0b8:	f7ff fef0 	bl	b9e9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba0bc:	a803      	add	r0, sp, #12
   ba0be:	f7fa fd75 	bl	b4bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba0c2:	4668      	mov	r0, sp
   ba0c4:	f7fa fd72 	bl	b4bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba0c8:	4b03      	ldr	r3, [pc, #12]	; (ba0d8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba0ca:	6023      	str	r3, [r4, #0]
}
   ba0cc:	4620      	mov	r0, r4
        stream_(&stream) {
   ba0ce:	6225      	str	r5, [r4, #32]
}
   ba0d0:	b007      	add	sp, #28
   ba0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba0d4:	000bda0c 	.word	0x000bda0c
   ba0d8:	000be80c 	.word	0x000be80c

000ba0dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba0de:	460f      	mov	r7, r1
   ba0e0:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba0e2:	491d      	ldr	r1, [pc, #116]	; (ba158 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba0e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba0e6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba0e8:	4616      	mov	r6, r2
   ba0ea:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba0ec:	f003 fa1b 	bl	bd526 <strcmp>
   ba0f0:	b9c0      	cbnz	r0, ba124 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba0f2:	b1a4      	cbz	r4, ba11e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba0f4:	4629      	mov	r1, r5
   ba0f6:	a801      	add	r0, sp, #4
   ba0f8:	f7ff fcbc 	bl	b9a74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba0fc:	4917      	ldr	r1, [pc, #92]	; (ba15c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba0fe:	2024      	movs	r0, #36	; 0x24
   ba100:	f001 fb7a 	bl	bb7f8 <_ZnwjRKSt9nothrow_t>
   ba104:	4605      	mov	r5, r0
   ba106:	b130      	cbz	r0, ba116 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba108:	ab01      	add	r3, sp, #4
   ba10a:	4632      	mov	r2, r6
   ba10c:	4621      	mov	r1, r4
   ba10e:	f7ff ffbf 	bl	ba090 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba112:	4b13      	ldr	r3, [pc, #76]	; (ba160 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba114:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba116:	a801      	add	r0, sp, #4
   ba118:	f7fa fd48 	bl	b4bac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba11c:	462c      	mov	r4, r5
}
   ba11e:	4620      	mov	r0, r4
   ba120:	b005      	add	sp, #20
   ba122:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba124:	490f      	ldr	r1, [pc, #60]	; (ba164 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba126:	4638      	mov	r0, r7
   ba128:	f003 f9fd 	bl	bd526 <strcmp>
   ba12c:	b990      	cbnz	r0, ba154 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba12e:	2c00      	cmp	r4, #0
   ba130:	d0f5      	beq.n	ba11e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba132:	4629      	mov	r1, r5
   ba134:	a801      	add	r0, sp, #4
   ba136:	f7ff fc9d 	bl	b9a74 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba13a:	4908      	ldr	r1, [pc, #32]	; (ba15c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba13c:	2024      	movs	r0, #36	; 0x24
   ba13e:	f001 fb5b 	bl	bb7f8 <_ZnwjRKSt9nothrow_t>
   ba142:	4605      	mov	r5, r0
   ba144:	2800      	cmp	r0, #0
   ba146:	d0e6      	beq.n	ba116 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba148:	ab01      	add	r3, sp, #4
   ba14a:	4632      	mov	r2, r6
   ba14c:	4621      	mov	r1, r4
   ba14e:	f7ff ff9f 	bl	ba090 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba152:	e7e0      	b.n	ba116 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba154:	2400      	movs	r4, #0
   ba156:	e7e2      	b.n	ba11e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba158:	000be792 	.word	0x000be792
   ba15c:	000be96c 	.word	0x000be96c
   ba160:	000be824 	.word	0x000be824
   ba164:	000be796 	.word	0x000be796

000ba168 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba168:	4b01      	ldr	r3, [pc, #4]	; (ba170 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba16a:	4a02      	ldr	r2, [pc, #8]	; (ba174 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba16c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba16e:	4770      	bx	lr
   ba170:	2003e658 	.word	0x2003e658
   ba174:	000be7a7 	.word	0x000be7a7

000ba178 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba17c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba17e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba182:	4604      	mov	r4, r0
   ba184:	460e      	mov	r6, r1
   ba186:	4617      	mov	r7, r2
   ba188:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba18a:	f001 f92b 	bl	bb3e4 <_Z16_fetch_usbserialv>
   ba18e:	4581      	cmp	r9, r0
   ba190:	d04c      	beq.n	ba22c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba192:	792b      	ldrb	r3, [r5, #4]
   ba194:	0719      	lsls	r1, r3, #28
   ba196:	d504      	bpl.n	ba1a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba198:	696a      	ldr	r2, [r5, #20]
   ba19a:	4954      	ldr	r1, [pc, #336]	; (ba2ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba19c:	4620      	mov	r0, r4
   ba19e:	f7ff fa8d 	bl	b96bc <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba1a2:	f1b8 0f00 	cmp.w	r8, #0
   ba1a6:	d00d      	beq.n	ba1c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba1a8:	215b      	movs	r1, #91	; 0x5b
   ba1aa:	4620      	mov	r0, r4
   ba1ac:	f7ff fa7a 	bl	b96a4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba1b0:	4641      	mov	r1, r8
   ba1b2:	4620      	mov	r0, r4
   ba1b4:	f7ff fa67 	bl	b9686 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba1b8:	6823      	ldr	r3, [r4, #0]
   ba1ba:	494d      	ldr	r1, [pc, #308]	; (ba2f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba1bc:	68db      	ldr	r3, [r3, #12]
   ba1be:	2202      	movs	r2, #2
   ba1c0:	4620      	mov	r0, r4
   ba1c2:	4798      	blx	r3
    if (attr.has_file) {
   ba1c4:	792b      	ldrb	r3, [r5, #4]
   ba1c6:	07da      	lsls	r2, r3, #31
   ba1c8:	d523      	bpl.n	ba212 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba1ca:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba1ce:	212f      	movs	r1, #47	; 0x2f
   ba1d0:	4640      	mov	r0, r8
   ba1d2:	f003 f9e9 	bl	bd5a8 <strrchr>
    if (s1) {
   ba1d6:	b108      	cbz	r0, ba1dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba1d8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba1dc:	4641      	mov	r1, r8
   ba1de:	4620      	mov	r0, r4
   ba1e0:	f7ff fa51 	bl	b9686 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba1e4:	792b      	ldrb	r3, [r5, #4]
   ba1e6:	079b      	lsls	r3, r3, #30
   ba1e8:	d508      	bpl.n	ba1fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba1ea:	213a      	movs	r1, #58	; 0x3a
   ba1ec:	4620      	mov	r0, r4
   ba1ee:	f7ff fa59 	bl	b96a4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba1f2:	68ea      	ldr	r2, [r5, #12]
   ba1f4:	493f      	ldr	r1, [pc, #252]	; (ba2f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba1f6:	4620      	mov	r0, r4
   ba1f8:	f7ff fa60 	bl	b96bc <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba1fc:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba1fe:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba200:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba204:	68db      	ldr	r3, [r3, #12]
   ba206:	bf14      	ite	ne
   ba208:	493b      	ldrne	r1, [pc, #236]	; (ba2f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba20a:	493c      	ldreq	r1, [pc, #240]	; (ba2fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba20c:	2202      	movs	r2, #2
            write(": ", 2);
   ba20e:	4620      	mov	r0, r4
   ba210:	4798      	blx	r3
    if (attr.has_function) {
   ba212:	792b      	ldrb	r3, [r5, #4]
   ba214:	0758      	lsls	r0, r3, #29
   ba216:	d51d      	bpl.n	ba254 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba218:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba21a:	460b      	mov	r3, r1
   ba21c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba21e:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba222:	b160      	cbz	r0, ba23e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba224:	2820      	cmp	r0, #32
   ba226:	d108      	bne.n	ba23a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba228:	4619      	mov	r1, r3
   ba22a:	e7f7      	b.n	ba21c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba22c:	4834      	ldr	r0, [pc, #208]	; (ba300 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba22e:	f000 f966 	bl	ba4fe <_ZN5spark12NetworkClass9listeningEv>
   ba232:	2800      	cmp	r0, #0
   ba234:	d0ad      	beq.n	ba192 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba23a:	2828      	cmp	r0, #40	; 0x28
   ba23c:	d1ee      	bne.n	ba21c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba23e:	6823      	ldr	r3, [r4, #0]
   ba240:	1a52      	subs	r2, r2, r1
   ba242:	68db      	ldr	r3, [r3, #12]
   ba244:	4620      	mov	r0, r4
   ba246:	4798      	blx	r3
        write("(): ", 4);
   ba248:	6823      	ldr	r3, [r4, #0]
   ba24a:	492e      	ldr	r1, [pc, #184]	; (ba304 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba24c:	68db      	ldr	r3, [r3, #12]
   ba24e:	2204      	movs	r2, #4
   ba250:	4620      	mov	r0, r4
   ba252:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba254:	2100      	movs	r1, #0
   ba256:	4638      	mov	r0, r7
   ba258:	f7fe fb16 	bl	b8888 <log_level_name>
   ba25c:	4601      	mov	r1, r0
    write(s);
   ba25e:	4620      	mov	r0, r4
   ba260:	f7ff fa11 	bl	b9686 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba264:	6823      	ldr	r3, [r4, #0]
   ba266:	4925      	ldr	r1, [pc, #148]	; (ba2fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba268:	68db      	ldr	r3, [r3, #12]
   ba26a:	2202      	movs	r2, #2
   ba26c:	4620      	mov	r0, r4
   ba26e:	4798      	blx	r3
    if (msg) {
   ba270:	b11e      	cbz	r6, ba27a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba272:	4631      	mov	r1, r6
   ba274:	4620      	mov	r0, r4
   ba276:	f7ff fa06 	bl	b9686 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba27a:	792b      	ldrb	r3, [r5, #4]
   ba27c:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba280:	d02c      	beq.n	ba2dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba282:	6823      	ldr	r3, [r4, #0]
   ba284:	4920      	ldr	r1, [pc, #128]	; (ba308 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba286:	68db      	ldr	r3, [r3, #12]
   ba288:	2202      	movs	r2, #2
   ba28a:	4620      	mov	r0, r4
   ba28c:	4798      	blx	r3
        if (attr.has_code) {
   ba28e:	792b      	ldrb	r3, [r5, #4]
   ba290:	06d9      	lsls	r1, r3, #27
   ba292:	d50a      	bpl.n	ba2aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba294:	6823      	ldr	r3, [r4, #0]
   ba296:	491d      	ldr	r1, [pc, #116]	; (ba30c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba298:	68db      	ldr	r3, [r3, #12]
   ba29a:	2207      	movs	r2, #7
   ba29c:	4620      	mov	r0, r4
   ba29e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba2a0:	69aa      	ldr	r2, [r5, #24]
   ba2a2:	491b      	ldr	r1, [pc, #108]	; (ba310 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba2a4:	4620      	mov	r0, r4
   ba2a6:	f7ff fa09 	bl	b96bc <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba2aa:	792b      	ldrb	r3, [r5, #4]
   ba2ac:	069a      	lsls	r2, r3, #26
   ba2ae:	d511      	bpl.n	ba2d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba2b0:	06db      	lsls	r3, r3, #27
   ba2b2:	d505      	bpl.n	ba2c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba2b4:	6823      	ldr	r3, [r4, #0]
   ba2b6:	4910      	ldr	r1, [pc, #64]	; (ba2f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba2b8:	68db      	ldr	r3, [r3, #12]
   ba2ba:	2202      	movs	r2, #2
   ba2bc:	4620      	mov	r0, r4
   ba2be:	4798      	blx	r3
            write("details = ", 10);
   ba2c0:	6823      	ldr	r3, [r4, #0]
   ba2c2:	4914      	ldr	r1, [pc, #80]	; (ba314 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba2c4:	68db      	ldr	r3, [r3, #12]
   ba2c6:	4620      	mov	r0, r4
   ba2c8:	220a      	movs	r2, #10
   ba2ca:	4798      	blx	r3
            write(attr.details);
   ba2cc:	69e9      	ldr	r1, [r5, #28]
   ba2ce:	4620      	mov	r0, r4
   ba2d0:	f7ff f9d9 	bl	b9686 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba2d4:	215d      	movs	r1, #93	; 0x5d
   ba2d6:	4620      	mov	r0, r4
   ba2d8:	f7ff f9e4 	bl	b96a4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba2dc:	6823      	ldr	r3, [r4, #0]
   ba2de:	490e      	ldr	r1, [pc, #56]	; (ba318 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba2e0:	68db      	ldr	r3, [r3, #12]
   ba2e2:	4620      	mov	r0, r4
   ba2e4:	2202      	movs	r2, #2
}
   ba2e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba2ea:	4718      	bx	r3
   ba2ec:	000be7ab 	.word	0x000be7ab
   ba2f0:	000be7b2 	.word	0x000be7b2
   ba2f4:	000be18f 	.word	0x000be18f
   ba2f8:	000be7b5 	.word	0x000be7b5
   ba2fc:	000be7ba 	.word	0x000be7ba
   ba300:	2003e684 	.word	0x2003e684
   ba304:	000be7b8 	.word	0x000be7b8
   ba308:	000be7bd 	.word	0x000be7bd
   ba30c:	000be7c0 	.word	0x000be7c0
   ba310:	000be0a2 	.word	0x000be0a2
   ba314:	000be7c8 	.word	0x000be7c8
   ba318:	000be7d3 	.word	0x000be7d3

000ba31c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba320:	b085      	sub	sp, #20
    return stream_;
   ba322:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba326:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba328:	4605      	mov	r5, r0
   ba32a:	460f      	mov	r7, r1
   ba32c:	4690      	mov	r8, r2
   ba32e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba330:	f001 f858 	bl	bb3e4 <_Z16_fetch_usbserialv>
   ba334:	4581      	cmp	r9, r0
   ba336:	d105      	bne.n	ba344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba338:	4849      	ldr	r0, [pc, #292]	; (ba460 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba33a:	f000 f8e0 	bl	ba4fe <_ZN5spark12NetworkClass9listeningEv>
   ba33e:	2800      	cmp	r0, #0
   ba340:	f040 808a 	bne.w	ba458 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba344:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba346:	4a47      	ldr	r2, [pc, #284]	; (ba464 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba348:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba34a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba34e:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba350:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba352:	f88d 9008 	strb.w	r9, [sp, #8]
   ba356:	f7ff f878 	bl	b944a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba35a:	4649      	mov	r1, r9
   ba35c:	4640      	mov	r0, r8
   ba35e:	f7fe fa93 	bl	b8888 <log_level_name>
    json.name("l", 1).value(s);
   ba362:	4941      	ldr	r1, [pc, #260]	; (ba468 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba364:	4680      	mov	r8, r0
   ba366:	2201      	movs	r2, #1
   ba368:	a801      	add	r0, sp, #4
   ba36a:	f7ff f8fd 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba36e:	4641      	mov	r1, r8
   ba370:	f7ff f97b 	bl	b966a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba374:	b13f      	cbz	r7, ba386 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba376:	493d      	ldr	r1, [pc, #244]	; (ba46c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba378:	2201      	movs	r2, #1
   ba37a:	a801      	add	r0, sp, #4
   ba37c:	f7ff f8f4 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba380:	4639      	mov	r1, r7
   ba382:	f7ff f972 	bl	b966a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba386:	b13e      	cbz	r6, ba398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba388:	4939      	ldr	r1, [pc, #228]	; (ba470 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba38a:	2201      	movs	r2, #1
   ba38c:	a801      	add	r0, sp, #4
   ba38e:	f7ff f8eb 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba392:	4631      	mov	r1, r6
   ba394:	f7ff f969 	bl	b966a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba398:	7923      	ldrb	r3, [r4, #4]
   ba39a:	07df      	lsls	r7, r3, #31
   ba39c:	d50e      	bpl.n	ba3bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba39e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba3a0:	212f      	movs	r1, #47	; 0x2f
   ba3a2:	4630      	mov	r0, r6
   ba3a4:	f003 f900 	bl	bd5a8 <strrchr>
    if (s1) {
   ba3a8:	b100      	cbz	r0, ba3ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba3aa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba3ac:	4931      	ldr	r1, [pc, #196]	; (ba474 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba3ae:	2201      	movs	r2, #1
   ba3b0:	a801      	add	r0, sp, #4
   ba3b2:	f7ff f8d9 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba3b6:	4631      	mov	r1, r6
   ba3b8:	f7ff f957 	bl	b966a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba3bc:	7923      	ldrb	r3, [r4, #4]
   ba3be:	079e      	lsls	r6, r3, #30
   ba3c0:	d507      	bpl.n	ba3d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba3c2:	492d      	ldr	r1, [pc, #180]	; (ba478 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba3c4:	2202      	movs	r2, #2
   ba3c6:	a801      	add	r0, sp, #4
   ba3c8:	f7ff f8ce 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba3cc:	68e1      	ldr	r1, [r4, #12]
   ba3ce:	f7ff f849 	bl	b9464 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba3d2:	7923      	ldrb	r3, [r4, #4]
   ba3d4:	0758      	lsls	r0, r3, #29
   ba3d6:	d514      	bpl.n	ba402 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba3d8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba3da:	4633      	mov	r3, r6
   ba3dc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba3de:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba3e2:	b12a      	cbz	r2, ba3f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba3e4:	2a20      	cmp	r2, #32
   ba3e6:	d101      	bne.n	ba3ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba3e8:	461e      	mov	r6, r3
   ba3ea:	e7f7      	b.n	ba3dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba3ec:	2a28      	cmp	r2, #40	; 0x28
   ba3ee:	d1f5      	bne.n	ba3dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba3f0:	4922      	ldr	r1, [pc, #136]	; (ba47c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba3f2:	2202      	movs	r2, #2
   ba3f4:	a801      	add	r0, sp, #4
   ba3f6:	f7ff f8b7 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba3fa:	1bba      	subs	r2, r7, r6
   ba3fc:	4631      	mov	r1, r6
   ba3fe:	f7ff f8c3 	bl	b9588 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba402:	7923      	ldrb	r3, [r4, #4]
   ba404:	0719      	lsls	r1, r3, #28
   ba406:	d507      	bpl.n	ba418 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba408:	491d      	ldr	r1, [pc, #116]	; (ba480 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba40a:	2201      	movs	r2, #1
   ba40c:	a801      	add	r0, sp, #4
   ba40e:	f7ff f8ab 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba412:	6961      	ldr	r1, [r4, #20]
   ba414:	f7ff f838 	bl	b9488 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba418:	7923      	ldrb	r3, [r4, #4]
   ba41a:	06da      	lsls	r2, r3, #27
   ba41c:	d508      	bpl.n	ba430 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba41e:	2204      	movs	r2, #4
   ba420:	4918      	ldr	r1, [pc, #96]	; (ba484 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba422:	eb0d 0002 	add.w	r0, sp, r2
   ba426:	f7ff f89f 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba42a:	69a1      	ldr	r1, [r4, #24]
   ba42c:	f7ff f81a 	bl	b9464 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba430:	7923      	ldrb	r3, [r4, #4]
   ba432:	069b      	lsls	r3, r3, #26
   ba434:	d507      	bpl.n	ba446 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba436:	4914      	ldr	r1, [pc, #80]	; (ba488 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba438:	2206      	movs	r2, #6
   ba43a:	a801      	add	r0, sp, #4
   ba43c:	f7ff f894 	bl	b9568 <_ZN5spark10JSONWriter4nameEPKcj>
   ba440:	69e1      	ldr	r1, [r4, #28]
   ba442:	f7ff f912 	bl	b966a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba446:	a801      	add	r0, sp, #4
   ba448:	f7fe ffe9 	bl	b941e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba44c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba44e:	490f      	ldr	r1, [pc, #60]	; (ba48c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba450:	6803      	ldr	r3, [r0, #0]
   ba452:	2202      	movs	r2, #2
   ba454:	68db      	ldr	r3, [r3, #12]
   ba456:	4798      	blx	r3
}
   ba458:	b005      	add	sp, #20
   ba45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba45e:	bf00      	nop
   ba460:	2003e684 	.word	0x2003e684
   ba464:	000be7f4 	.word	0x000be7f4
   ba468:	000be788 	.word	0x000be788
   ba46c:	000be7d6 	.word	0x000be7d6
   ba470:	000beaa8 	.word	0x000beaa8
   ba474:	000bdb3f 	.word	0x000bdb3f
   ba478:	000be7d8 	.word	0x000be7d8
   ba47c:	000be7db 	.word	0x000be7db
   ba480:	000bdcf0 	.word	0x000bdcf0
   ba484:	000be7de 	.word	0x000be7de
   ba488:	000be7e3 	.word	0x000be7e3
   ba48c:	000be7d3 	.word	0x000be7d3

000ba490 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba490:	2300      	movs	r3, #0
   ba492:	6840      	ldr	r0, [r0, #4]
   ba494:	461a      	mov	r2, r3
   ba496:	f7fe baab 	b.w	b89f0 <network_connect>

000ba49a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba49a:	6840      	ldr	r0, [r0, #4]
   ba49c:	2200      	movs	r2, #0
   ba49e:	2102      	movs	r1, #2
   ba4a0:	f7fe bab6 	b.w	b8a10 <network_disconnect>

000ba4a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba4a4:	2200      	movs	r2, #0
   ba4a6:	6840      	ldr	r0, [r0, #4]
   ba4a8:	4611      	mov	r1, r2
   ba4aa:	f7fe baa9 	b.w	b8a00 <network_connecting>

000ba4ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba4ae:	2200      	movs	r2, #0
   ba4b0:	6840      	ldr	r0, [r0, #4]
   ba4b2:	4611      	mov	r1, r2
   ba4b4:	f7fe bab4 	b.w	b8a20 <network_ready>

000ba4b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba4b8:	2300      	movs	r3, #0
   ba4ba:	6840      	ldr	r0, [r0, #4]
   ba4bc:	461a      	mov	r2, r3
   ba4be:	4619      	mov	r1, r3
   ba4c0:	f7fe bab6 	b.w	b8a30 <network_on>

000ba4c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba4c4:	2300      	movs	r3, #0
   ba4c6:	6840      	ldr	r0, [r0, #4]
   ba4c8:	461a      	mov	r2, r3
   ba4ca:	4619      	mov	r1, r3
   ba4cc:	f7fe bab8 	b.w	b8a40 <network_off>

000ba4d0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba4d0:	6840      	ldr	r0, [r0, #4]
   ba4d2:	2100      	movs	r1, #0
   ba4d4:	f7fe badc 	b.w	b8a90 <network_is_on>

000ba4d8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba4d8:	6840      	ldr	r0, [r0, #4]
   ba4da:	2100      	movs	r1, #0
   ba4dc:	f7fe bae0 	b.w	b8aa0 <network_is_off>

000ba4e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba4e0:	6840      	ldr	r0, [r0, #4]
   ba4e2:	2200      	movs	r2, #0
   ba4e4:	f081 0101 	eor.w	r1, r1, #1
   ba4e8:	f7fe bab2 	b.w	b8a50 <network_listen>

000ba4ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba4ec:	6840      	ldr	r0, [r0, #4]
   ba4ee:	2200      	movs	r2, #0
   ba4f0:	f7fe babe 	b.w	b8a70 <network_set_listen_timeout>

000ba4f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba4f4:	2200      	movs	r2, #0
   ba4f6:	6840      	ldr	r0, [r0, #4]
   ba4f8:	4611      	mov	r1, r2
   ba4fa:	f7fe bac1 	b.w	b8a80 <network_get_listen_timeout>

000ba4fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba4fe:	2200      	movs	r2, #0
   ba500:	6840      	ldr	r0, [r0, #4]
   ba502:	4611      	mov	r1, r2
   ba504:	f7fe baac 	b.w	b8a60 <network_listening>

000ba508 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba50c:	b095      	sub	sp, #84	; 0x54
   ba50e:	4614      	mov	r4, r2
   ba510:	460d      	mov	r5, r1
   ba512:	4607      	mov	r7, r0
    IPAddress addr;
   ba514:	f7fe fe32 	bl	b917c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba518:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba51a:	221c      	movs	r2, #28
   ba51c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba51e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba520:	f002 ff76 	bl	bd410 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba524:	2340      	movs	r3, #64	; 0x40
   ba526:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba528:	4620      	mov	r0, r4
   ba52a:	466b      	mov	r3, sp
   ba52c:	aa0c      	add	r2, sp, #48	; 0x30
   ba52e:	2100      	movs	r1, #0
   ba530:	f7fe f8aa 	bl	b8688 <netdb_getaddrinfo>
    if (!r) {
   ba534:	4604      	mov	r4, r0
   ba536:	2800      	cmp	r0, #0
   ba538:	d14b      	bne.n	ba5d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba53a:	4602      	mov	r2, r0
   ba53c:	2101      	movs	r1, #1
   ba53e:	6868      	ldr	r0, [r5, #4]
   ba540:	f7fe fa6e 	bl	b8a20 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba544:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba546:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba548:	4622      	mov	r2, r4
   ba54a:	6868      	ldr	r0, [r5, #4]
   ba54c:	f7fe fa68 	bl	b8a20 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba550:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba552:	4681      	mov	r9, r0
        bool ok = false;
   ba554:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba556:	2e00      	cmp	r6, #0
   ba558:	d03b      	beq.n	ba5d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba55a:	2900      	cmp	r1, #0
   ba55c:	d139      	bne.n	ba5d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba55e:	6873      	ldr	r3, [r6, #4]
   ba560:	2b02      	cmp	r3, #2
   ba562:	d003      	beq.n	ba56c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba564:	2b0a      	cmp	r3, #10
   ba566:	d011      	beq.n	ba58c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba568:	69f6      	ldr	r6, [r6, #28]
   ba56a:	e7f4      	b.n	ba556 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba56c:	f1b8 0f00 	cmp.w	r8, #0
   ba570:	d0fa      	beq.n	ba568 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba572:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba574:	a806      	add	r0, sp, #24
   ba576:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba578:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba57a:	f7fe fe2d 	bl	b91d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba580:	1d3c      	adds	r4, r7, #4
   ba582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba584:	682b      	ldr	r3, [r5, #0]
   ba586:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba588:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba58a:	e7ed      	b.n	ba568 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba58c:	f1b9 0f00 	cmp.w	r9, #0
   ba590:	d0ea      	beq.n	ba568 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba592:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba594:	2210      	movs	r2, #16
   ba596:	a801      	add	r0, sp, #4
   ba598:	f002 ff3a 	bl	bd410 <memset>
                    a.v = 6;
   ba59c:	2306      	movs	r3, #6
   ba59e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba5a2:	ad01      	add	r5, sp, #4
   ba5a4:	f104 0308 	add.w	r3, r4, #8
   ba5a8:	3418      	adds	r4, #24
   ba5aa:	6818      	ldr	r0, [r3, #0]
   ba5ac:	6859      	ldr	r1, [r3, #4]
   ba5ae:	462a      	mov	r2, r5
   ba5b0:	c203      	stmia	r2!, {r0, r1}
   ba5b2:	3308      	adds	r3, #8
   ba5b4:	42a3      	cmp	r3, r4
   ba5b6:	4615      	mov	r5, r2
   ba5b8:	d1f7      	bne.n	ba5aa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba5ba:	a901      	add	r1, sp, #4
   ba5bc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba5be:	ad07      	add	r5, sp, #28
   ba5c0:	f7fe fdea 	bl	b9198 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba5c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba5c6:	1d3c      	adds	r4, r7, #4
   ba5c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba5ca:	682b      	ldr	r3, [r5, #0]
   ba5cc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba5ce:	4649      	mov	r1, r9
   ba5d0:	e7ca      	b.n	ba568 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba5d2:	9800      	ldr	r0, [sp, #0]
   ba5d4:	f7fe f850 	bl	b8678 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba5d8:	4638      	mov	r0, r7
   ba5da:	b015      	add	sp, #84	; 0x54
   ba5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba5e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba5e0:	4b02      	ldr	r3, [pc, #8]	; (ba5ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba5e2:	4a03      	ldr	r2, [pc, #12]	; (ba5f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba5e4:	601a      	str	r2, [r3, #0]
   ba5e6:	2200      	movs	r2, #0
   ba5e8:	605a      	str	r2, [r3, #4]

} // spark
   ba5ea:	4770      	bx	lr
   ba5ec:	2003e684 	.word	0x2003e684
   ba5f0:	000be86c 	.word	0x000be86c

000ba5f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   ba5f4:	b508      	push	{r3, lr}
            return &Wire1;
   ba5f6:	f001 f89b 	bl	bb730 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   ba5fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   ba5fe:	f7fe bd45 	b.w	b908c <_ZN7TwoWire4lockEv>

000ba602 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   ba602:	b510      	push	{r4, lr}
   ba604:	4604      	mov	r4, r0
    lock_(_lock)
   ba606:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   ba608:	b109      	cbz	r1, ba60e <_ZN4PMICC1Eb+0xc>
        lock();
   ba60a:	f7ff fff3 	bl	ba5f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   ba60e:	4620      	mov	r0, r4
   ba610:	bd10      	pop	{r4, pc}

000ba612 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   ba612:	b508      	push	{r3, lr}
            return &Wire1;
   ba614:	f001 f88c 	bl	bb730 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   ba618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   ba61c:	f7fe bd3f 	b.w	b909e <_ZN7TwoWire6unlockEv>

000ba620 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   ba620:	b510      	push	{r4, lr}
    if (lock_) {
   ba622:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   ba624:	4604      	mov	r4, r0
    if (lock_) {
   ba626:	b10b      	cbz	r3, ba62c <_ZN4PMICD1Ev+0xc>
        unlock();
   ba628:	f7ff fff3 	bl	ba612 <_ZN4PMIC6unlockEv>
}
   ba62c:	4620      	mov	r0, r4
   ba62e:	bd10      	pop	{r4, pc}

000ba630 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   ba630:	b510      	push	{r4, lr}
   ba632:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   ba634:	6800      	ldr	r0, [r0, #0]
   ba636:	f7ff ffec 	bl	ba612 <_ZN4PMIC6unlockEv>
   ba63a:	4620      	mov	r0, r4
   ba63c:	bd10      	pop	{r4, pc}

000ba63e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   ba63e:	b530      	push	{r4, r5, lr}
   ba640:	b087      	sub	sp, #28
   ba642:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba644:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba646:	f7ff ffd5 	bl	ba5f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba64a:	226b      	movs	r2, #107	; 0x6b
   ba64c:	2300      	movs	r3, #0
   ba64e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba652:	2401      	movs	r4, #1
   ba654:	230a      	movs	r3, #10
   ba656:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   ba65a:	f001 f869 	bl	bb730 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba65e:	a902      	add	r1, sp, #8
   ba660:	f7fe fcf8 	bl	b9054 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba664:	f001 f864 	bl	bb730 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   ba668:	6803      	ldr	r3, [r0, #0]
   ba66a:	4629      	mov	r1, r5
   ba66c:	689b      	ldr	r3, [r3, #8]
   ba66e:	4798      	blx	r3
            return &Wire1;
   ba670:	f001 f85e 	bl	bb730 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba674:	4621      	mov	r1, r4
   ba676:	f7fe fd05 	bl	b9084 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   ba67a:	9403      	str	r4, [sp, #12]
            return &Wire1;
   ba67c:	f001 f858 	bl	bb730 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   ba680:	a902      	add	r1, sp, #8
   ba682:	f7fe fcb7 	bl	b8ff4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   ba686:	f001 f853 	bl	bb730 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   ba68a:	6803      	ldr	r3, [r0, #0]
   ba68c:	695b      	ldr	r3, [r3, #20]
   ba68e:	4798      	blx	r3
   ba690:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   ba692:	a801      	add	r0, sp, #4
   ba694:	f7ff ffcc 	bl	ba630 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba698:	b2e0      	uxtb	r0, r4
   ba69a:	b007      	add	sp, #28
   ba69c:	bd30      	pop	{r4, r5, pc}

000ba69e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   ba69e:	b570      	push	{r4, r5, r6, lr}
   ba6a0:	b086      	sub	sp, #24
   ba6a2:	460d      	mov	r5, r1
   ba6a4:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba6a6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba6a8:	f7ff ffa4 	bl	ba5f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba6ac:	226b      	movs	r2, #107	; 0x6b
   ba6ae:	2300      	movs	r3, #0
   ba6b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba6b4:	2601      	movs	r6, #1
   ba6b6:	230a      	movs	r3, #10
   ba6b8:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   ba6bc:	f001 f838 	bl	bb730 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba6c0:	a902      	add	r1, sp, #8
   ba6c2:	f7fe fcc7 	bl	b9054 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba6c6:	f001 f833 	bl	bb730 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   ba6ca:	6803      	ldr	r3, [r0, #0]
   ba6cc:	4629      	mov	r1, r5
   ba6ce:	689b      	ldr	r3, [r3, #8]
   ba6d0:	4798      	blx	r3
            return &Wire1;
   ba6d2:	f001 f82d 	bl	bb730 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   ba6d6:	6803      	ldr	r3, [r0, #0]
   ba6d8:	4621      	mov	r1, r4
   ba6da:	689b      	ldr	r3, [r3, #8]
   ba6dc:	4798      	blx	r3
            return &Wire1;
   ba6de:	f001 f827 	bl	bb730 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba6e2:	4631      	mov	r1, r6
   ba6e4:	f7fe fcce 	bl	b9084 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   ba6e8:	a801      	add	r0, sp, #4
   ba6ea:	f7ff ffa1 	bl	ba630 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba6ee:	b006      	add	sp, #24
   ba6f0:	bd70      	pop	{r4, r5, r6, pc}

000ba6f2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   ba6f2:	b513      	push	{r0, r1, r4, lr}
   ba6f4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba6f6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba6f8:	f7ff ff7c 	bl	ba5f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba6fc:	2101      	movs	r1, #1
   ba6fe:	4620      	mov	r0, r4
   ba700:	f7ff ff9d 	bl	ba63e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   ba704:	f000 0330 	and.w	r3, r0, #48	; 0x30
   ba708:	2b10      	cmp	r3, #16
   ba70a:	d007      	beq.n	ba71c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   ba70c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   ba710:	f042 0210 	orr.w	r2, r2, #16
   ba714:	2101      	movs	r1, #1
   ba716:	4620      	mov	r0, r4
   ba718:	f7ff ffc1 	bl	ba69e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba71c:	a801      	add	r0, sp, #4
   ba71e:	f7ff ff87 	bl	ba630 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba722:	2001      	movs	r0, #1
   ba724:	b002      	add	sp, #8
   ba726:	bd10      	pop	{r4, pc}

000ba728 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   ba728:	b513      	push	{r0, r1, r4, lr}
   ba72a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba72c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba72e:	f7ff ff61 	bl	ba5f4 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba732:	2101      	movs	r1, #1
   ba734:	4620      	mov	r0, r4
   ba736:	f7ff ff82 	bl	ba63e <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   ba73a:	f010 0f30 	tst.w	r0, #48	; 0x30
   ba73e:	d005      	beq.n	ba74c <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   ba740:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   ba744:	2101      	movs	r1, #1
   ba746:	4620      	mov	r0, r4
   ba748:	f7ff ffa9 	bl	ba69e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba74c:	a801      	add	r0, sp, #4
   ba74e:	f7ff ff6f 	bl	ba630 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba752:	2001      	movs	r0, #1
   ba754:	b002      	add	sp, #8
   ba756:	bd10      	pop	{r4, pc}

000ba758 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba75a:	4606      	mov	r6, r0
   ba75c:	460d      	mov	r5, r1
  size_t n = 0;
   ba75e:	188f      	adds	r7, r1, r2
   ba760:	2400      	movs	r4, #0
  while (size--) {
   ba762:	42bd      	cmp	r5, r7
   ba764:	d00c      	beq.n	ba780 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba766:	6833      	ldr	r3, [r6, #0]
   ba768:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba76c:	689b      	ldr	r3, [r3, #8]
   ba76e:	4630      	mov	r0, r6
   ba770:	4798      	blx	r3
     if (chunk>=0)
   ba772:	1e03      	subs	r3, r0, #0
   ba774:	db01      	blt.n	ba77a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba776:	441c      	add	r4, r3
  while (size--) {
   ba778:	e7f3      	b.n	ba762 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba77a:	2c00      	cmp	r4, #0
   ba77c:	bf08      	it	eq
   ba77e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba780:	4620      	mov	r0, r4
   ba782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba784 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba784:	b513      	push	{r0, r1, r4, lr}
   ba786:	4604      	mov	r4, r0
    }
   ba788:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba78a:	b159      	cbz	r1, ba7a4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba78c:	9101      	str	r1, [sp, #4]
   ba78e:	f002 fedc 	bl	bd54a <strlen>
   ba792:	6823      	ldr	r3, [r4, #0]
   ba794:	9901      	ldr	r1, [sp, #4]
   ba796:	68db      	ldr	r3, [r3, #12]
   ba798:	4602      	mov	r2, r0
   ba79a:	4620      	mov	r0, r4
    }
   ba79c:	b002      	add	sp, #8
   ba79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba7a2:	4718      	bx	r3
    }
   ba7a4:	b002      	add	sp, #8
   ba7a6:	bd10      	pop	{r4, pc}

000ba7a8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba7a8:	b508      	push	{r3, lr}
  return write(str);
   ba7aa:	f7ff ffeb 	bl	ba784 <_ZN5Print5writeEPKc>
}
   ba7ae:	bd08      	pop	{r3, pc}

000ba7b0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba7b0:	6803      	ldr	r3, [r0, #0]
   ba7b2:	689b      	ldr	r3, [r3, #8]
   ba7b4:	4718      	bx	r3

000ba7b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba7b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba7b8:	210d      	movs	r1, #13
{
   ba7ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba7bc:	f7ff fff8 	bl	ba7b0 <_ZN5Print5printEc>
  n += print('\n');
   ba7c0:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba7c2:	4604      	mov	r4, r0
  n += print('\n');
   ba7c4:	4628      	mov	r0, r5
   ba7c6:	f7ff fff3 	bl	ba7b0 <_ZN5Print5printEc>
  return n;
}
   ba7ca:	4420      	add	r0, r4
   ba7cc:	bd38      	pop	{r3, r4, r5, pc}

000ba7ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba7ce:	b530      	push	{r4, r5, lr}
   ba7d0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba7d2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba7d4:	2a01      	cmp	r2, #1
  *str = '\0';
   ba7d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba7da:	bf98      	it	ls
   ba7dc:	220a      	movls	r2, #10
   ba7de:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba7e0:	460d      	mov	r5, r1
   ba7e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba7e6:	fb01 5312 	mls	r3, r1, r2, r5
   ba7ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba7ee:	2b09      	cmp	r3, #9
   ba7f0:	bf94      	ite	ls
   ba7f2:	3330      	addls	r3, #48	; 0x30
   ba7f4:	3337      	addhi	r3, #55	; 0x37
   ba7f6:	b2db      	uxtb	r3, r3
  } while(n);
   ba7f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba7fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba7fe:	d9ef      	bls.n	ba7e0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba800:	4621      	mov	r1, r4
   ba802:	f7ff ffbf 	bl	ba784 <_ZN5Print5writeEPKc>
}
   ba806:	b00b      	add	sp, #44	; 0x2c
   ba808:	bd30      	pop	{r4, r5, pc}
	...

000ba80c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   ba80c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba810:	ec55 4b10 	vmov	r4, r5, d0
   ba814:	4606      	mov	r6, r0
   ba816:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   ba818:	ee10 2a10 	vmov	r2, s0
   ba81c:	ee10 0a10 	vmov	r0, s0
   ba820:	462b      	mov	r3, r5
   ba822:	4629      	mov	r1, r5
   ba824:	f002 fccc 	bl	bd1c0 <__aeabi_dcmpun>
   ba828:	b140      	cbz	r0, ba83c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   ba82a:	4953      	ldr	r1, [pc, #332]	; (ba978 <_ZN5Print10printFloatEdh+0x16c>)
   ba82c:	4630      	mov	r0, r6
   ba82e:	f7ff ffa9 	bl	ba784 <_ZN5Print5writeEPKc>
   ba832:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   ba834:	4650      	mov	r0, sl
   ba836:	b003      	add	sp, #12
   ba838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   ba83c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   ba840:	4b4e      	ldr	r3, [pc, #312]	; (ba97c <_ZN5Print10printFloatEdh+0x170>)
   ba842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba846:	4620      	mov	r0, r4
   ba848:	4649      	mov	r1, r9
   ba84a:	f002 fcb9 	bl	bd1c0 <__aeabi_dcmpun>
   ba84e:	b948      	cbnz	r0, ba864 <_ZN5Print10printFloatEdh+0x58>
   ba850:	4b4a      	ldr	r3, [pc, #296]	; (ba97c <_ZN5Print10printFloatEdh+0x170>)
   ba852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba856:	4620      	mov	r0, r4
   ba858:	4649      	mov	r1, r9
   ba85a:	f002 fc93 	bl	bd184 <__aeabi_dcmple>
   ba85e:	b908      	cbnz	r0, ba864 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   ba860:	4947      	ldr	r1, [pc, #284]	; (ba980 <_ZN5Print10printFloatEdh+0x174>)
   ba862:	e7e3      	b.n	ba82c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   ba864:	4b47      	ldr	r3, [pc, #284]	; (ba984 <_ZN5Print10printFloatEdh+0x178>)
   ba866:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba86a:	4620      	mov	r0, r4
   ba86c:	4629      	mov	r1, r5
   ba86e:	f002 fc9d 	bl	bd1ac <__aeabi_dcmpgt>
   ba872:	b108      	cbz	r0, ba878 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   ba874:	4944      	ldr	r1, [pc, #272]	; (ba988 <_ZN5Print10printFloatEdh+0x17c>)
   ba876:	e7d9      	b.n	ba82c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   ba878:	4b44      	ldr	r3, [pc, #272]	; (ba98c <_ZN5Print10printFloatEdh+0x180>)
   ba87a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba87e:	4620      	mov	r0, r4
   ba880:	4629      	mov	r1, r5
   ba882:	f002 fc75 	bl	bd170 <__aeabi_dcmplt>
   ba886:	2800      	cmp	r0, #0
   ba888:	d1f4      	bne.n	ba874 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   ba88a:	2200      	movs	r2, #0
   ba88c:	2300      	movs	r3, #0
   ba88e:	4620      	mov	r0, r4
   ba890:	4629      	mov	r1, r5
   ba892:	f002 fc6d 	bl	bd170 <__aeabi_dcmplt>
   ba896:	b1d0      	cbz	r0, ba8ce <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   ba898:	212d      	movs	r1, #45	; 0x2d
   ba89a:	4630      	mov	r0, r6
   ba89c:	f7ff ff88 	bl	ba7b0 <_ZN5Print5printEc>
     number = -number;
   ba8a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   ba8a4:	4682      	mov	sl, r0
     number = -number;
   ba8a6:	461d      	mov	r5, r3
  double rounding = 0.5;
   ba8a8:	4939      	ldr	r1, [pc, #228]	; (ba990 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   ba8aa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; ba998 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   ba8ae:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   ba8b2:	2000      	movs	r0, #0
    rounding /= 10.0;
   ba8b4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   ba8b8:	fa5f f38b 	uxtb.w	r3, fp
   ba8bc:	429f      	cmp	r7, r3
   ba8be:	d908      	bls.n	ba8d2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   ba8c0:	4642      	mov	r2, r8
   ba8c2:	464b      	mov	r3, r9
   ba8c4:	f002 fb0c 	bl	bcee0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   ba8c8:	f10b 0b01 	add.w	fp, fp, #1
   ba8cc:	e7f4      	b.n	ba8b8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   ba8ce:	4682      	mov	sl, r0
   ba8d0:	e7ea      	b.n	ba8a8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   ba8d2:	4622      	mov	r2, r4
   ba8d4:	462b      	mov	r3, r5
   ba8d6:	f002 f823 	bl	bc920 <__adddf3>
   ba8da:	460d      	mov	r5, r1
   ba8dc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   ba8de:	f002 fcad 	bl	bd23c <__aeabi_d2uiz>
   ba8e2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   ba8e4:	f002 f958 	bl	bcb98 <__aeabi_ui2d>
   ba8e8:	4602      	mov	r2, r0
   ba8ea:	460b      	mov	r3, r1
   ba8ec:	4620      	mov	r0, r4
   ba8ee:	4629      	mov	r1, r5
   ba8f0:	f002 f814 	bl	bc91c <__aeabi_dsub>
        return printNumber(val, base) + t;
   ba8f4:	220a      	movs	r2, #10
   ba8f6:	4604      	mov	r4, r0
   ba8f8:	460d      	mov	r5, r1
   ba8fa:	4630      	mov	r0, r6
   ba8fc:	4641      	mov	r1, r8
   ba8fe:	f7ff ff66 	bl	ba7ce <_ZN5Print11printNumberEmh>
  n += print(int_part);
   ba902:	4482      	add	sl, r0
  if (digits > 0) {
   ba904:	2f00      	cmp	r7, #0
   ba906:	d095      	beq.n	ba834 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   ba908:	4922      	ldr	r1, [pc, #136]	; (ba994 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   ba90a:	f8df 908c 	ldr.w	r9, [pc, #140]	; ba998 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   ba90e:	4630      	mov	r0, r6
   ba910:	f7ff ff38 	bl	ba784 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   ba914:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   ba918:	4482      	add	sl, r0
  while (digits-- > 0)
   ba91a:	2f00      	cmp	r7, #0
   ba91c:	d08a      	beq.n	ba834 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   ba91e:	4642      	mov	r2, r8
   ba920:	464b      	mov	r3, r9
   ba922:	4620      	mov	r0, r4
   ba924:	4629      	mov	r1, r5
   ba926:	f002 f9b1 	bl	bcc8c <__aeabi_dmul>
   ba92a:	4604      	mov	r4, r0
   ba92c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   ba92e:	f002 fc5d 	bl	bd1ec <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   ba932:	f1b0 0b00 	subs.w	fp, r0, #0
   ba936:	da1c      	bge.n	ba972 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   ba938:	212d      	movs	r1, #45	; 0x2d
   ba93a:	4630      	mov	r0, r6
   ba93c:	f7ff ff38 	bl	ba7b0 <_ZN5Print5printEc>
            val = -n;
   ba940:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   ba944:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   ba946:	220a      	movs	r2, #10
   ba948:	4630      	mov	r0, r6
   ba94a:	9301      	str	r3, [sp, #4]
   ba94c:	f7ff ff3f 	bl	ba7ce <_ZN5Print11printNumberEmh>
   ba950:	9b01      	ldr	r3, [sp, #4]
   ba952:	4418      	add	r0, r3
    n += print(toPrint);
   ba954:	4482      	add	sl, r0
    remainder -= toPrint;
   ba956:	4658      	mov	r0, fp
   ba958:	f002 f92e 	bl	bcbb8 <__aeabi_i2d>
   ba95c:	4602      	mov	r2, r0
   ba95e:	460b      	mov	r3, r1
   ba960:	4620      	mov	r0, r4
   ba962:	4629      	mov	r1, r5
   ba964:	f001 ffda 	bl	bc91c <__aeabi_dsub>
   ba968:	3f01      	subs	r7, #1
   ba96a:	4604      	mov	r4, r0
   ba96c:	460d      	mov	r5, r1
   ba96e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   ba970:	e7d3      	b.n	ba91a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   ba972:	4659      	mov	r1, fp
        size_t t = 0;
   ba974:	2300      	movs	r3, #0
   ba976:	e7e6      	b.n	ba946 <_ZN5Print10printFloatEdh+0x13a>
   ba978:	000be8a0 	.word	0x000be8a0
   ba97c:	7fefffff 	.word	0x7fefffff
   ba980:	000be8a4 	.word	0x000be8a4
   ba984:	41efffff 	.word	0x41efffff
   ba988:	000be8a8 	.word	0x000be8a8
   ba98c:	c1efffff 	.word	0xc1efffff
   ba990:	3fe00000 	.word	0x3fe00000
   ba994:	000be8e0 	.word	0x000be8e0
   ba998:	40240000 	.word	0x40240000

000ba99c <_ZN5Print5printEfi>:
{
   ba99c:	b538      	push	{r3, r4, r5, lr}
   ba99e:	4604      	mov	r4, r0
   ba9a0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   ba9a4:	b2cd      	uxtb	r5, r1
   ba9a6:	f002 f919 	bl	bcbdc <__aeabi_f2d>
   ba9aa:	ec41 0b10 	vmov	d0, r0, r1
   ba9ae:	4629      	mov	r1, r5
   ba9b0:	4620      	mov	r0, r4
}
   ba9b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   ba9b6:	f7ff bf29 	b.w	ba80c <_ZN5Print10printFloatEdh>

000ba9ba <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba9be:	b086      	sub	sp, #24
   ba9c0:	af00      	add	r7, sp, #0
   ba9c2:	4605      	mov	r5, r0
   ba9c4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba9c6:	1d38      	adds	r0, r7, #4
   ba9c8:	2114      	movs	r1, #20
{
   ba9ca:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba9cc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba9ce:	f7fe f897 	bl	b8b00 <vsnprintf>

    if (n<bufsize)
   ba9d2:	2813      	cmp	r0, #19
   ba9d4:	d80e      	bhi.n	ba9f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba9d6:	1d39      	adds	r1, r7, #4
   ba9d8:	4628      	mov	r0, r5
   ba9da:	f7ff fed3 	bl	ba784 <_ZN5Print5writeEPKc>
   ba9de:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba9e0:	b11e      	cbz	r6, ba9ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba9e2:	4628      	mov	r0, r5
   ba9e4:	f7ff fee7 	bl	ba7b6 <_ZN5Print7printlnEv>
   ba9e8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba9ea:	4620      	mov	r0, r4
   ba9ec:	3718      	adds	r7, #24
   ba9ee:	46bd      	mov	sp, r7
   ba9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba9f4:	f100 0308 	add.w	r3, r0, #8
   ba9f8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba9fc:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba9fe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   baa02:	4622      	mov	r2, r4
   baa04:	1c41      	adds	r1, r0, #1
   baa06:	683b      	ldr	r3, [r7, #0]
   baa08:	4668      	mov	r0, sp
   baa0a:	f7fe f879 	bl	b8b00 <vsnprintf>
  return write(str);
   baa0e:	4669      	mov	r1, sp
   baa10:	4628      	mov	r0, r5
   baa12:	f7ff feb7 	bl	ba784 <_ZN5Print5writeEPKc>
   baa16:	4604      	mov	r4, r0
   baa18:	46c5      	mov	sp, r8
   baa1a:	e7e1      	b.n	ba9e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000baa1c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   baa1c:	b510      	push	{r4, lr}
  if (0 == max) {
   baa1e:	4604      	mov	r4, r0
   baa20:	b128      	cbz	r0, baa2e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   baa22:	f002 fd2b 	bl	bd47c <rand>
   baa26:	fb90 f3f4 	sdiv	r3, r0, r4
   baa2a:	fb03 0414 	mls	r4, r3, r4, r0
}
   baa2e:	4620      	mov	r0, r4
   baa30:	bd10      	pop	{r4, pc}

000baa32 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   baa32:	4288      	cmp	r0, r1
{
   baa34:	b510      	push	{r4, lr}
   baa36:	4604      	mov	r4, r0
  if (min >= max) {
   baa38:	da03      	bge.n	baa42 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   baa3a:	1a08      	subs	r0, r1, r0
   baa3c:	f7ff ffee 	bl	baa1c <_Z6randomi>
   baa40:	4404      	add	r4, r0
}
   baa42:	4620      	mov	r0, r4
   baa44:	bd10      	pop	{r4, pc}

000baa46 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   baa46:	f002 bceb 	b.w	bd420 <srand>
	...

000baa4c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   baa4c:	4b01      	ldr	r3, [pc, #4]	; (baa54 <_GLOBAL__sub_I_RGB+0x8>)
   baa4e:	2200      	movs	r2, #0
   baa50:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   baa52:	4770      	bx	lr
   baa54:	2003e68c 	.word	0x2003e68c

000baa58 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   baa58:	2100      	movs	r1, #0
   baa5a:	f7fd be5d 	b.w	b8718 <hal_spi_release>

000baa5e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   baa5e:	2100      	movs	r1, #0
   baa60:	f7fd be52 	b.w	b8708 <hal_spi_acquire>

000baa64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   baa64:	b510      	push	{r4, lr}
   baa66:	4604      	mov	r4, r0
   baa68:	4608      	mov	r0, r1
{
    _spi = spi;
   baa6a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   baa6c:	f7fd fe2c 	bl	b86c8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   baa70:	2300      	movs	r3, #0
   baa72:	6063      	str	r3, [r4, #4]
}
   baa74:	4620      	mov	r0, r4
   baa76:	bd10      	pop	{r4, pc}

000baa78 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   baa78:	b513      	push	{r0, r1, r4, lr}
   baa7a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   baa7c:	7800      	ldrb	r0, [r0, #0]
   baa7e:	f7ff ffee 	bl	baa5e <_ZN8SPIClass4lockEv.isra.0>
   baa82:	b958      	cbnz	r0, baa9c <_ZN8SPIClass5beginEv+0x24>
   baa84:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   baa86:	9001      	str	r0, [sp, #4]
   baa88:	f64f 71ff 	movw	r1, #65535	; 0xffff
   baa8c:	f7fd fe04 	bl	b8698 <hal_spi_begin>
        unlock();
   baa90:	9801      	ldr	r0, [sp, #4]
    }
}
   baa92:	b002      	add	sp, #8
   baa94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baa98:	f7ff bfde 	b.w	baa58 <_ZN8SPIClass6unlockEv.isra.0>
   baa9c:	b002      	add	sp, #8
   baa9e:	bd10      	pop	{r4, pc}

000baaa0 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   baaa0:	b513      	push	{r0, r1, r4, lr}
   baaa2:	4604      	mov	r4, r0
    if (!lock())
   baaa4:	7800      	ldrb	r0, [r0, #0]
   baaa6:	f7ff ffda 	bl	baa5e <_ZN8SPIClass4lockEv.isra.0>
   baaaa:	b948      	cbnz	r0, baac0 <_ZN8SPIClass3endEv+0x20>
   baaac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   baaae:	9001      	str	r0, [sp, #4]
   baab0:	f7fd fdfa 	bl	b86a8 <hal_spi_end>
        unlock();
   baab4:	9801      	ldr	r0, [sp, #4]
    }
}
   baab6:	b002      	add	sp, #8
   baab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baabc:	f7ff bfcc 	b.w	baa58 <_ZN8SPIClass6unlockEv.isra.0>
   baac0:	b002      	add	sp, #8
   baac2:	bd10      	pop	{r4, pc}

000baac4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   baac4:	7800      	ldrb	r0, [r0, #0]
   baac6:	f7ff bfc7 	b.w	baa58 <_ZN8SPIClass6unlockEv.isra.0>
	...

000baacc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   baacc:	0840      	lsrs	r0, r0, #1
{
   baace:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   baad0:	6018      	str	r0, [r3, #0]
   baad2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   baad4:	6818      	ldr	r0, [r3, #0]
   baad6:	4288      	cmp	r0, r1
   baad8:	b2e5      	uxtb	r5, r4
   baada:	d906      	bls.n	baaea <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   baadc:	3401      	adds	r4, #1
   baade:	2c08      	cmp	r4, #8
   baae0:	d002      	beq.n	baae8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   baae2:	0840      	lsrs	r0, r0, #1
   baae4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   baae6:	e7f5      	b.n	baad4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   baae8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   baaea:	4b02      	ldr	r3, [pc, #8]	; (baaf4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   baaec:	5d5b      	ldrb	r3, [r3, r5]
   baaee:	7013      	strb	r3, [r2, #0]
}
   baaf0:	bd30      	pop	{r4, r5, pc}
   baaf2:	bf00      	nop
   baaf4:	000be8ac 	.word	0x000be8ac

000baaf8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   baaf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baafc:	4606      	mov	r6, r0
   baafe:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bab00:	7800      	ldrb	r0, [r0, #0]
{
   bab02:	460c      	mov	r4, r1
    CHECK(lock());
   bab04:	f7ff ffab 	bl	baa5e <_ZN8SPIClass4lockEv.isra.0>
   bab08:	2800      	cmp	r0, #0
   bab0a:	db1b      	blt.n	bab44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bab0c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bab0e:	2214      	movs	r2, #20
   bab10:	2100      	movs	r1, #0
   bab12:	a809      	add	r0, sp, #36	; 0x24
   bab14:	f002 fc7c 	bl	bd410 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bab18:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bab1a:	2200      	movs	r2, #0
   bab1c:	a909      	add	r1, sp, #36	; 0x24
   bab1e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bab20:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bab24:	f7fd fde0 	bl	b86e8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bab28:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bab2c:	b113      	cbz	r3, bab34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bab2e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bab32:	b155      	cbz	r5, bab4a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bab34:	2700      	movs	r7, #0
   bab36:	46b9      	mov	r9, r7
   bab38:	46b8      	mov	r8, r7
   bab3a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bab3c:	7923      	ldrb	r3, [r4, #4]
   bab3e:	b15d      	cbz	r5, bab58 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bab40:	b1c3      	cbz	r3, bab74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bab42:	2000      	movs	r0, #0
}
   bab44:	b00f      	add	sp, #60	; 0x3c
   bab46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bab4a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bab4e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bab52:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bab56:	e7f1      	b.n	bab3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bab58:	2b00      	cmp	r3, #0
   bab5a:	d135      	bne.n	babc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bab5c:	68a3      	ldr	r3, [r4, #8]
   bab5e:	4543      	cmp	r3, r8
   bab60:	d108      	bne.n	bab74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bab62:	f88d 9020 	strb.w	r9, [sp, #32]
   bab66:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bab6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bab6e:	89a3      	ldrh	r3, [r4, #12]
   bab70:	429a      	cmp	r2, r3
   bab72:	d0e6      	beq.n	bab42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bab74:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bab76:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bab78:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bab7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bab7e:	ab04      	add	r3, sp, #16
   bab80:	f10d 020f 	add.w	r2, sp, #15
   bab84:	f7ff ffa2 	bl	baacc <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bab88:	7921      	ldrb	r1, [r4, #4]
   bab8a:	b985      	cbnz	r5, babae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bab8c:	b989      	cbnz	r1, babb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bab8e:	68a3      	ldr	r3, [r4, #8]
   bab90:	4543      	cmp	r3, r8
   bab92:	d30e      	bcc.n	babb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bab94:	f88d 9020 	strb.w	r9, [sp, #32]
   bab98:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bab9c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   baba0:	89a3      	ldrh	r3, [r4, #12]
   baba2:	429a      	cmp	r2, r3
   baba4:	d105      	bne.n	babb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   baba6:	9b04      	ldr	r3, [sp, #16]
   baba8:	4543      	cmp	r3, r8
   babaa:	d102      	bne.n	babb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   babac:	e7c9      	b.n	bab42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   babae:	2900      	cmp	r1, #0
   babb0:	d1f9      	bne.n	baba6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   babb2:	2300      	movs	r3, #0
   babb4:	9301      	str	r3, [sp, #4]
   babb6:	7b63      	ldrb	r3, [r4, #13]
   babb8:	9300      	str	r3, [sp, #0]
   babba:	f89d 200f 	ldrb.w	r2, [sp, #15]
   babbe:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   babc0:	7830      	ldrb	r0, [r6, #0]
   babc2:	f7fd fd99 	bl	b86f8 <hal_spi_set_settings>
   babc6:	e7bc      	b.n	bab42 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   babc8:	e9cd 5500 	strd	r5, r5, [sp]
   babcc:	462b      	mov	r3, r5
   babce:	462a      	mov	r2, r5
   babd0:	2101      	movs	r1, #1
   babd2:	e7f5      	b.n	babc0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000babd4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   babd4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   babd6:	7800      	ldrb	r0, [r0, #0]
   babd8:	f7fd fd6e 	bl	b86b8 <hal_spi_transfer>
}
   babdc:	b2c0      	uxtb	r0, r0
   babde:	bd08      	pop	{r3, pc}

000babe0 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   babe0:	4770      	bx	lr

000babe2 <_ZN8SPIClass15detachInterruptEv>:
   babe2:	4770      	bx	lr

000babe4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   babe4:	b510      	push	{r4, lr}
   babe6:	4604      	mov	r4, r0
{
	free(buffer);
   babe8:	6800      	ldr	r0, [r0, #0]
   babea:	f7fd ff69 	bl	b8ac0 <free>
}
   babee:	4620      	mov	r0, r4
   babf0:	bd10      	pop	{r4, pc}

000babf2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   babf2:	b510      	push	{r4, lr}
   babf4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   babf6:	6800      	ldr	r0, [r0, #0]
   babf8:	b108      	cbz	r0, babfe <_ZN6String10invalidateEv+0xc>
   babfa:	f7fd ff61 	bl	b8ac0 <free>
	buffer = NULL;
   babfe:	2300      	movs	r3, #0
	capacity = len = 0;
   bac00:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bac04:	6023      	str	r3, [r4, #0]
}
   bac06:	bd10      	pop	{r4, pc}

000bac08 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bac08:	b538      	push	{r3, r4, r5, lr}
   bac0a:	4604      	mov	r4, r0
   bac0c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bac0e:	6800      	ldr	r0, [r0, #0]
   bac10:	3101      	adds	r1, #1
   bac12:	f7fd ff5d 	bl	b8ad0 <realloc>
	if (newbuffer) {
   bac16:	b110      	cbz	r0, bac1e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bac18:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bac1c:	2001      	movs	r0, #1
	}
	return 0;
}
   bac1e:	bd38      	pop	{r3, r4, r5, pc}

000bac20 <_ZN6String7reserveEj>:
{
   bac20:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bac22:	6803      	ldr	r3, [r0, #0]
{
   bac24:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bac26:	b123      	cbz	r3, bac32 <_ZN6String7reserveEj+0x12>
   bac28:	6843      	ldr	r3, [r0, #4]
   bac2a:	428b      	cmp	r3, r1
   bac2c:	d301      	bcc.n	bac32 <_ZN6String7reserveEj+0x12>
   bac2e:	2001      	movs	r0, #1
}
   bac30:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bac32:	4620      	mov	r0, r4
   bac34:	f7ff ffe8 	bl	bac08 <_ZN6String12changeBufferEj>
   bac38:	2800      	cmp	r0, #0
   bac3a:	d0f9      	beq.n	bac30 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bac3c:	68a3      	ldr	r3, [r4, #8]
   bac3e:	2b00      	cmp	r3, #0
   bac40:	d1f5      	bne.n	bac2e <_ZN6String7reserveEj+0xe>
   bac42:	6822      	ldr	r2, [r4, #0]
   bac44:	7013      	strb	r3, [r2, #0]
   bac46:	e7f2      	b.n	bac2e <_ZN6String7reserveEj+0xe>

000bac48 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bac48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bac4a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bac4c:	4611      	mov	r1, r2
   bac4e:	9201      	str	r2, [sp, #4]
{
   bac50:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bac52:	f7ff ffe5 	bl	bac20 <_ZN6String7reserveEj>
   bac56:	9a01      	ldr	r2, [sp, #4]
   bac58:	b928      	cbnz	r0, bac66 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bac5a:	4620      	mov	r0, r4
   bac5c:	f7ff ffc9 	bl	babf2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bac60:	4620      	mov	r0, r4
   bac62:	b003      	add	sp, #12
   bac64:	bd30      	pop	{r4, r5, pc}
	len = length;
   bac66:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bac68:	4629      	mov	r1, r5
   bac6a:	6820      	ldr	r0, [r4, #0]
   bac6c:	f002 fba8 	bl	bd3c0 <memcpy>
	buffer[len] = 0;
   bac70:	6822      	ldr	r2, [r4, #0]
   bac72:	68a3      	ldr	r3, [r4, #8]
   bac74:	2100      	movs	r1, #0
   bac76:	54d1      	strb	r1, [r2, r3]
	return *this;
   bac78:	e7f2      	b.n	bac60 <_ZN6String4copyEPKcj+0x18>

000bac7a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bac7a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bac7c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bac7e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bac82:	4604      	mov	r4, r0
	len = 0;
   bac84:	6083      	str	r3, [r0, #8]
	flags = 0;
   bac86:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bac88:	b141      	cbz	r1, bac9c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bac8a:	4608      	mov	r0, r1
   bac8c:	9101      	str	r1, [sp, #4]
   bac8e:	f002 fc5c 	bl	bd54a <strlen>
   bac92:	9901      	ldr	r1, [sp, #4]
   bac94:	4602      	mov	r2, r0
   bac96:	4620      	mov	r0, r4
   bac98:	f7ff ffd6 	bl	bac48 <_ZN6String4copyEPKcj>
}
   bac9c:	4620      	mov	r0, r4
   bac9e:	b002      	add	sp, #8
   baca0:	bd10      	pop	{r4, pc}

000baca2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   baca2:	b538      	push	{r3, r4, r5, lr}
   baca4:	4605      	mov	r5, r0
	if (buffer) {
   baca6:	6800      	ldr	r0, [r0, #0]
{
   baca8:	460c      	mov	r4, r1
	if (buffer) {
   bacaa:	b168      	cbz	r0, bacc8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bacac:	686a      	ldr	r2, [r5, #4]
   bacae:	688b      	ldr	r3, [r1, #8]
   bacb0:	429a      	cmp	r2, r3
   bacb2:	d307      	bcc.n	bacc4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bacb4:	6809      	ldr	r1, [r1, #0]
   bacb6:	f002 fc40 	bl	bd53a <strcpy>
			len = rhs.len;
   bacba:	68a3      	ldr	r3, [r4, #8]
   bacbc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bacbe:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bacc0:	60a3      	str	r3, [r4, #8]
}
   bacc2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bacc4:	f7fd fefc 	bl	b8ac0 <free>
	buffer = rhs.buffer;
   bacc8:	6823      	ldr	r3, [r4, #0]
   bacca:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   baccc:	6863      	ldr	r3, [r4, #4]
   bacce:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bacd0:	68a3      	ldr	r3, [r4, #8]
   bacd2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bacd4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bacd6:	e9c4 3300 	strd	r3, r3, [r4]
   bacda:	e7f1      	b.n	bacc0 <_ZN6String4moveERS_+0x1e>

000bacdc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bacdc:	b510      	push	{r4, lr}
	buffer = NULL;
   bacde:	2300      	movs	r3, #0
	capacity = 0;
   bace0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bace4:	4604      	mov	r4, r0
	len = 0;
   bace6:	6083      	str	r3, [r0, #8]
	flags = 0;
   bace8:	7303      	strb	r3, [r0, #12]
	move(rval);
   bacea:	f7ff ffda 	bl	baca2 <_ZN6String4moveERS_>
}
   bacee:	4620      	mov	r0, r4
   bacf0:	bd10      	pop	{r4, pc}

000bacf2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bacf2:	4288      	cmp	r0, r1
{
   bacf4:	b510      	push	{r4, lr}
   bacf6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bacf8:	d005      	beq.n	bad06 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bacfa:	680b      	ldr	r3, [r1, #0]
   bacfc:	b12b      	cbz	r3, bad0a <_ZN6StringaSERKS_+0x18>
   bacfe:	688a      	ldr	r2, [r1, #8]
   bad00:	4619      	mov	r1, r3
   bad02:	f7ff ffa1 	bl	bac48 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bad06:	4620      	mov	r0, r4
   bad08:	bd10      	pop	{r4, pc}
	else invalidate();
   bad0a:	f7ff ff72 	bl	babf2 <_ZN6String10invalidateEv>
   bad0e:	e7fa      	b.n	bad06 <_ZN6StringaSERKS_+0x14>

000bad10 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bad10:	b510      	push	{r4, lr}
	buffer = NULL;
   bad12:	2300      	movs	r3, #0
String::String(const String &value)
   bad14:	4604      	mov	r4, r0
	capacity = 0;
   bad16:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bad1a:	6083      	str	r3, [r0, #8]
	flags = 0;
   bad1c:	7303      	strb	r3, [r0, #12]
	*this = value;
   bad1e:	f7ff ffe8 	bl	bacf2 <_ZN6StringaSERKS_>
}
   bad22:	4620      	mov	r0, r4
   bad24:	bd10      	pop	{r4, pc}

000bad26 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   bad26:	b558      	push	{r3, r4, r6, lr}
   bad28:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   bad2a:	b12a      	cbz	r2, bad38 <_ZNK6String8getBytesEPhjj+0x12>
   bad2c:	b121      	cbz	r1, bad38 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   bad2e:	6884      	ldr	r4, [r0, #8]
   bad30:	42a3      	cmp	r3, r4
   bad32:	d302      	bcc.n	bad3a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   bad34:	2300      	movs	r3, #0
   bad36:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   bad38:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   bad3a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   bad3c:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   bad3e:	6801      	ldr	r1, [r0, #0]
   bad40:	4294      	cmp	r4, r2
   bad42:	bf28      	it	cs
   bad44:	4614      	movcs	r4, r2
   bad46:	4419      	add	r1, r3
   bad48:	4622      	mov	r2, r4
   bad4a:	4630      	mov	r0, r6
   bad4c:	f002 fc19 	bl	bd582 <strncpy>
	buf[n] = 0;
   bad50:	2300      	movs	r3, #0
   bad52:	5533      	strb	r3, [r6, r4]
   bad54:	e7f0      	b.n	bad38 <_ZNK6String8getBytesEPhjj+0x12>
	...

000bad58 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bad58:	b40e      	push	{r1, r2, r3}
   bad5a:	b570      	push	{r4, r5, r6, lr}
   bad5c:	b087      	sub	sp, #28
   bad5e:	ad0b      	add	r5, sp, #44	; 0x2c
   bad60:	4604      	mov	r4, r0
   bad62:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bad66:	9201      	str	r2, [sp, #4]
   bad68:	462b      	mov	r3, r5
   bad6a:	2105      	movs	r1, #5
   bad6c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bad6e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bad70:	f7fd fec6 	bl	b8b00 <vsnprintf>
    va_end(marker);

    String result;
   bad74:	490b      	ldr	r1, [pc, #44]	; (bada4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bad76:	4606      	mov	r6, r0
    String result;
   bad78:	4620      	mov	r0, r4
   bad7a:	f7ff ff7e 	bl	bac7a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bad7e:	4631      	mov	r1, r6
   bad80:	4620      	mov	r0, r4
   bad82:	f7ff ff4d 	bl	bac20 <_ZN6String7reserveEj>
    if (result.buffer) {
   bad86:	6820      	ldr	r0, [r4, #0]
   bad88:	b130      	cbz	r0, bad98 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bad8a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bad8c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bad8e:	462b      	mov	r3, r5
   bad90:	1c71      	adds	r1, r6, #1
   bad92:	f7fd feb5 	bl	b8b00 <vsnprintf>
        va_end(marker);
        result.len = n;
   bad96:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bad98:	4620      	mov	r0, r4
   bad9a:	b007      	add	sp, #28
   bad9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bada0:	b003      	add	sp, #12
   bada2:	4770      	bx	lr
   bada4:	000be7d5 	.word	0x000be7d5

000bada8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bada8:	b510      	push	{r4, lr}
   badaa:	4604      	mov	r4, r0
        if (wakeupSource_) {
   badac:	6800      	ldr	r0, [r0, #0]
   badae:	b118      	cbz	r0, badb8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   badb0:	f7fd fe86 	bl	b8ac0 <free>
            wakeupSource_ = nullptr;
   badb4:	2300      	movs	r3, #0
   badb6:	6023      	str	r3, [r4, #0]
        }
    }
   badb8:	bd10      	pop	{r4, pc}

000badba <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   badba:	b538      	push	{r3, r4, r5, lr}
   badbc:	460c      	mov	r4, r1
   badbe:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   badc0:	f7ff fff2 	bl	bada8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   badc4:	b154      	cbz	r4, baddc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   badc6:	8820      	ldrh	r0, [r4, #0]
   badc8:	f7fd fe72 	bl	b8ab0 <malloc>
   badcc:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   badce:	b128      	cbz	r0, baddc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   badd0:	8822      	ldrh	r2, [r4, #0]
   badd2:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   badd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   badd8:	f002 baf2 	b.w	bd3c0 <memcpy>
    }
   baddc:	bd38      	pop	{r3, r4, r5, pc}

000badde <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   badde:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bade0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bade4:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bade6:	f8d1 3006 	ldr.w	r3, [r1, #6]
   badea:	f8c0 3006 	str.w	r3, [r0, #6]
   badee:	894b      	ldrh	r3, [r1, #10]
   badf0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   badf2:	460c      	mov	r4, r1
   badf4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   badf6:	f7ff ffd7 	bl	bada8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   badfa:	6823      	ldr	r3, [r4, #0]
   badfc:	b113      	cbz	r3, bae04 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   badfe:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bae00:	2300      	movs	r3, #0
   bae02:	6023      	str	r3, [r4, #0]
    }
   bae04:	bd38      	pop	{r3, r4, r5, pc}

000bae06 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bae06:	b507      	push	{r0, r1, r2, lr}
   bae08:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bae0a:	2100      	movs	r1, #0
{
   bae0c:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bae0e:	9100      	str	r1, [sp, #0]
   bae10:	2001      	movs	r0, #1
   bae12:	218c      	movs	r1, #140	; 0x8c
   bae14:	f7fd fdb2 	bl	b897c <system_reset>
}
   bae18:	b003      	add	sp, #12
   bae1a:	f85d fb04 	ldr.w	pc, [sp], #4

000bae1e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bae1e:	4601      	mov	r1, r0
    reset(0, flags);
   bae20:	2000      	movs	r0, #0
   bae22:	f7ff bff0 	b.w	bae06 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bae26 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bae26:	2000      	movs	r0, #0
   bae28:	f7ff bff9 	b.w	bae1e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bae2c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bae2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bae2e:	4d2b      	ldr	r5, [pc, #172]	; (baedc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bae30:	7d0b      	ldrb	r3, [r1, #20]
   bae32:	4604      	mov	r4, r0
   bae34:	b08b      	sub	sp, #44	; 0x2c
   bae36:	4608      	mov	r0, r1
   bae38:	1daf      	adds	r7, r5, #6
   bae3a:	2b00      	cmp	r3, #0
   bae3c:	d036      	beq.n	baeac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bae3e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bae40:	791b      	ldrb	r3, [r3, #4]
   bae42:	2b00      	cmp	r3, #0
   bae44:	d032      	beq.n	baeac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bae46:	4b26      	ldr	r3, [pc, #152]	; (baee0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bae48:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bae4a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bae4c:	a902      	add	r1, sp, #8
   bae4e:	3004      	adds	r0, #4
   bae50:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bae54:	f7fd fd88 	bl	b8968 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bae58:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bae5c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bae60:	b200      	sxth	r0, r0
   bae62:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bae66:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bae6a:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bae6c:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bae6e:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bae70:	4628      	mov	r0, r5
   bae72:	f7ff ffa2 	bl	badba <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bae76:	a802      	add	r0, sp, #8
   bae78:	f7ff ff96 	bl	bada8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bae7c:	2300      	movs	r3, #0
   bae7e:	6023      	str	r3, [r4, #0]
   bae80:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bae82:	71a3      	strb	r3, [r4, #6]
   bae84:	8123      	strh	r3, [r4, #8]
   bae86:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bae8a:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bae8c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bae90:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bae92:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bae96:	f8c4 3006 	str.w	r3, [r4, #6]
   bae9a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bae9c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bae9e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   baea0:	4620      	mov	r0, r4
   baea2:	f7ff ff8a 	bl	badba <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   baea6:	4620      	mov	r0, r4
   baea8:	b00b      	add	sp, #44	; 0x2c
   baeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   baeac:	2600      	movs	r6, #0
   baeae:	2320      	movs	r3, #32
   baeb0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   baeb4:	4b0b      	ldr	r3, [pc, #44]	; (baee4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   baeb6:	9300      	str	r3, [sp, #0]
   baeb8:	aa02      	add	r2, sp, #8
   baeba:	4633      	mov	r3, r6
   baebc:	490a      	ldr	r1, [pc, #40]	; (baee8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   baebe:	2032      	movs	r0, #50	; 0x32
   baec0:	f7fd fcd2 	bl	b8868 <log_message>
            : wakeupSource_(nullptr),
   baec4:	4b06      	ldr	r3, [pc, #24]	; (baee0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   baec6:	4805      	ldr	r0, [pc, #20]	; (baedc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   baec8:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   baeca:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   baece:	a902      	add	r1, sp, #8
   baed0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   baed4:	f7ff ff83 	bl	badde <_ZN17SystemSleepResultaSEOS_.isra.0>
   baed8:	e7cd      	b.n	bae76 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   baeda:	bf00      	nop
   baedc:	2003e69c 	.word	0x2003e69c
   baee0:	ffff0000 	.word	0xffff0000
   baee4:	000be8bb 	.word	0x000be8bb
   baee8:	000be8b4 	.word	0x000be8b4

000baeec <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   baeec:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   baeee:	2420      	movs	r4, #32
{
   baef0:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   baef2:	4622      	mov	r2, r4
   baef4:	2100      	movs	r1, #0
   baef6:	4668      	mov	r0, sp
   baef8:	f002 fa8a 	bl	bd410 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   baefc:	2100      	movs	r1, #0
   baefe:	4668      	mov	r0, sp
    info.size = sizeof(info);
   baf00:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   baf04:	f7fd fab8 	bl	b8478 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   baf08:	9801      	ldr	r0, [sp, #4]
   baf0a:	b008      	add	sp, #32
   baf0c:	bd10      	pop	{r4, pc}
	...

000baf10 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   baf10:	4b05      	ldr	r3, [pc, #20]	; (baf28 <_GLOBAL__sub_I_System+0x18>)
   baf12:	2202      	movs	r2, #2
   baf14:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   baf16:	4b05      	ldr	r3, [pc, #20]	; (baf2c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   baf18:	4a05      	ldr	r2, [pc, #20]	; (baf30 <_GLOBAL__sub_I_System+0x20>)
   baf1a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   baf1c:	2000      	movs	r0, #0
   baf1e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   baf22:	f7fd bcd3 	b.w	b88cc <set_system_mode>
   baf26:	bf00      	nop
   baf28:	2003e6a8 	.word	0x2003e6a8
   baf2c:	2003e69c 	.word	0x2003e69c
   baf30:	ffff0000 	.word	0xffff0000

000baf34 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   baf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   baf38:	4a15      	ldr	r2, [pc, #84]	; (baf90 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   baf3a:	f8df 8060 	ldr.w	r8, [pc, #96]	; baf9c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   baf3e:	e9d2 6300 	ldrd	r6, r3, [r2]
   baf42:	1980      	adds	r0, r0, r6
   baf44:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   baf48:	4b12      	ldr	r3, [pc, #72]	; (baf94 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   baf4a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   baf4e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   baf52:	1986      	adds	r6, r0, r6
   baf54:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   baf58:	42bb      	cmp	r3, r7
   baf5a:	bf08      	it	eq
   baf5c:	42b2      	cmpeq	r2, r6
{
   baf5e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   baf60:	d013      	beq.n	baf8a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   baf62:	a903      	add	r1, sp, #12
   baf64:	4668      	mov	r0, sp
   baf66:	e9cd 6700 	strd	r6, r7, [sp]
   baf6a:	f7fd fdf9 	bl	b8b60 <localtime_r>
	calendar_time.tm_year += 1900;
   baf6e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   baf70:	4d09      	ldr	r5, [pc, #36]	; (baf98 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   baf72:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   baf76:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   baf78:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   baf7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   baf7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   baf7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   baf80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   baf82:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   baf86:	6823      	ldr	r3, [r4, #0]
   baf88:	602b      	str	r3, [r5, #0]
    }
}
   baf8a:	b00c      	add	sp, #48	; 0x30
   baf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baf90:	2003e6e0 	.word	0x2003e6e0
   baf94:	2003e6d8 	.word	0x2003e6d8
   baf98:	2003e6b4 	.word	0x2003e6b4
   baf9c:	2003e6e8 	.word	0x2003e6e8

000bafa0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bafa0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bafa2:	2000      	movs	r0, #0
   bafa4:	f7fd fd0c 	bl	b89c0 <spark_sync_time_pending>
   bafa8:	b128      	cbz	r0, bafb6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bafaa:	f7fd fcf9 	bl	b89a0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bafae:	f080 0001 	eor.w	r0, r0, #1
   bafb2:	b2c0      	uxtb	r0, r0
    }
   bafb4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bafb6:	2001      	movs	r0, #1
   bafb8:	e7fc      	b.n	bafb4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bafbc <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bafbc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bafbe:	f7ff ffb9 	bl	baf34 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bafc2:	4b01      	ldr	r3, [pc, #4]	; (bafc8 <_ZN9TimeClass3dayEx+0xc>)
   bafc4:	68d8      	ldr	r0, [r3, #12]
   bafc6:	bd08      	pop	{r3, pc}
   bafc8:	2003e6b4 	.word	0x2003e6b4

000bafcc <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bafcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bafce:	4602      	mov	r2, r0
   bafd0:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bafd2:	4668      	mov	r0, sp
    struct timeval tv = {
   bafd4:	2100      	movs	r1, #0
    };
   bafd6:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bafda:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bafde:	f7fd fa8b 	bl	b84f8 <hal_rtc_set_time>
   bafe2:	4602      	mov	r2, r0
   bafe4:	b910      	cbnz	r0, bafec <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bafe6:	4601      	mov	r1, r0
   bafe8:	f7fd fc98 	bl	b891c <system_notify_time_changed>
    }
}
   bafec:	b005      	add	sp, #20
   bafee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baff4 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   baff4:	b530      	push	{r4, r5, lr}
   baff6:	b093      	sub	sp, #76	; 0x4c
   baff8:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   baffc:	4b19      	ldr	r3, [pc, #100]	; (bb064 <_ZN9TimeClass7timeStrEx+0x70>)
{
   baffe:	4604      	mov	r4, r0
    t += time_zone_cache;
   bb000:	e9d3 1000 	ldrd	r1, r0, [r3]
   bb004:	9b01      	ldr	r3, [sp, #4]
   bb006:	1852      	adds	r2, r2, r1
   bb008:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bb00c:	4816      	ldr	r0, [pc, #88]	; (bb068 <_ZN9TimeClass7timeStrEx+0x74>)
   bb00e:	e9d0 1000 	ldrd	r1, r0, [r0]
   bb012:	1852      	adds	r2, r2, r1
   bb014:	eb43 0300 	adc.w	r3, r3, r0
   bb018:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bb01c:	2224      	movs	r2, #36	; 0x24
   bb01e:	eb0d 0002 	add.w	r0, sp, r2
   bb022:	2100      	movs	r1, #0
   bb024:	f002 f9f4 	bl	bd410 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bb028:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bb02a:	a909      	add	r1, sp, #36	; 0x24
   bb02c:	4668      	mov	r0, sp
   bb02e:	f7fd fd97 	bl	b8b60 <localtime_r>
    char ascstr[26] = {};
   bb032:	2216      	movs	r2, #22
   bb034:	4629      	mov	r1, r5
   bb036:	a803      	add	r0, sp, #12
   bb038:	9502      	str	r5, [sp, #8]
   bb03a:	f002 f9e9 	bl	bd410 <memset>
    asctime_r(&calendar_time, ascstr);
   bb03e:	a902      	add	r1, sp, #8
   bb040:	a809      	add	r0, sp, #36	; 0x24
   bb042:	f002 f96b 	bl	bd31c <asctime_r>
    int len = strlen(ascstr);
   bb046:	a802      	add	r0, sp, #8
   bb048:	f002 fa7f 	bl	bd54a <strlen>
    ascstr[len-1] = 0; // remove final newline
   bb04c:	ab12      	add	r3, sp, #72	; 0x48
   bb04e:	4418      	add	r0, r3
    return String(ascstr);
   bb050:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bb052:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bb056:	4620      	mov	r0, r4
   bb058:	f7ff fe0f 	bl	bac7a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb05c:	4620      	mov	r0, r4
   bb05e:	b013      	add	sp, #76	; 0x4c
   bb060:	bd30      	pop	{r4, r5, pc}
   bb062:	bf00      	nop
   bb064:	2003e6e0 	.word	0x2003e6e0
   bb068:	2003e6d8 	.word	0x2003e6d8

000bb06c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bb06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb070:	b0a4      	sub	sp, #144	; 0x90
   bb072:	4607      	mov	r7, r0
   bb074:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb076:	a814      	add	r0, sp, #80	; 0x50
{
   bb078:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb07a:	223f      	movs	r2, #63	; 0x3f
{
   bb07c:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bb07e:	f002 fa80 	bl	bd582 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb082:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb084:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bb086:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bb08a:	f002 fa5e 	bl	bd54a <strlen>
   bb08e:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bb090:	bb4c      	cbnz	r4, bb0e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bb092:	4929      	ldr	r1, [pc, #164]	; (bb138 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bb094:	a803      	add	r0, sp, #12
   bb096:	f002 fa50 	bl	bd53a <strcpy>
   bb09a:	ac14      	add	r4, sp, #80	; 0x50
{
   bb09c:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bb09e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bb0a2:	45b1      	cmp	r9, r6
   bb0a4:	d934      	bls.n	bb110 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bb0a6:	7823      	ldrb	r3, [r4, #0]
   bb0a8:	2b25      	cmp	r3, #37	; 0x25
   bb0aa:	f106 0a01 	add.w	sl, r6, #1
   bb0ae:	d117      	bne.n	bb0e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bb0b0:	7863      	ldrb	r3, [r4, #1]
   bb0b2:	2b7a      	cmp	r3, #122	; 0x7a
   bb0b4:	d114      	bne.n	bb0e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bb0b6:	a803      	add	r0, sp, #12
   bb0b8:	f002 fa47 	bl	bd54a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb0bc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bb0be:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bb0c0:	1830      	adds	r0, r6, r0
   bb0c2:	4418      	add	r0, r3
   bb0c4:	eba9 0206 	sub.w	r2, r9, r6
   bb0c8:	1ca1      	adds	r1, r4, #2
   bb0ca:	f002 f979 	bl	bd3c0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bb0ce:	462a      	mov	r2, r5
   bb0d0:	a903      	add	r1, sp, #12
   bb0d2:	4620      	mov	r0, r4
   bb0d4:	f002 f974 	bl	bd3c0 <memcpy>
            len = strlen(format_str);
   bb0d8:	a814      	add	r0, sp, #80	; 0x50
   bb0da:	f002 fa36 	bl	bd54a <strlen>
   bb0de:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bb0e0:	3401      	adds	r4, #1
   bb0e2:	4656      	mov	r6, sl
   bb0e4:	e7db      	b.n	bb09e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bb0e6:	233c      	movs	r3, #60	; 0x3c
   bb0e8:	fb94 f2f3 	sdiv	r2, r4, r3
   bb0ec:	2a00      	cmp	r2, #0
   bb0ee:	bfb8      	it	lt
   bb0f0:	4252      	neglt	r2, r2
   bb0f2:	fbb2 f1f3 	udiv	r1, r2, r3
   bb0f6:	fb03 2211 	mls	r2, r3, r1, r2
   bb0fa:	9200      	str	r2, [sp, #0]
   bb0fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bb100:	4a0e      	ldr	r2, [pc, #56]	; (bb13c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bb102:	fb94 f3f3 	sdiv	r3, r4, r3
   bb106:	2110      	movs	r1, #16
   bb108:	a803      	add	r0, sp, #12
   bb10a:	f7fd fcf1 	bl	b8af0 <snprintf>
   bb10e:	e7c4      	b.n	bb09a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bb110:	2100      	movs	r1, #0
   bb112:	222e      	movs	r2, #46	; 0x2e
   bb114:	a808      	add	r0, sp, #32
   bb116:	9107      	str	r1, [sp, #28]
   bb118:	f002 f97a 	bl	bd410 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bb11c:	4643      	mov	r3, r8
   bb11e:	aa14      	add	r2, sp, #80	; 0x50
   bb120:	2132      	movs	r1, #50	; 0x32
   bb122:	a807      	add	r0, sp, #28
   bb124:	f7fd fd14 	bl	b8b50 <strftime>
    return String(buf);
   bb128:	a907      	add	r1, sp, #28
   bb12a:	4638      	mov	r0, r7
   bb12c:	f7ff fda5 	bl	bac7a <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb130:	4638      	mov	r0, r7
   bb132:	b024      	add	sp, #144	; 0x90
   bb134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb138:	000be8e2 	.word	0x000be8e2
   bb13c:	000be8e4 	.word	0x000be8e4

000bb140 <_ZN9TimeClass6formatExPKc>:
{
   bb140:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb142:	b08d      	sub	sp, #52	; 0x34
   bb144:	e9cd 2300 	strd	r2, r3, [sp]
   bb148:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bb14a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bb14c:	b915      	cbnz	r5, bb154 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bb14e:	4b19      	ldr	r3, [pc, #100]	; (bb1b4 <_ZN9TimeClass6formatExPKc+0x74>)
   bb150:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bb152:	b12d      	cbz	r5, bb160 <_ZN9TimeClass6formatExPKc+0x20>
   bb154:	4b18      	ldr	r3, [pc, #96]	; (bb1b8 <_ZN9TimeClass6formatExPKc+0x78>)
   bb156:	4628      	mov	r0, r5
   bb158:	6819      	ldr	r1, [r3, #0]
   bb15a:	f002 f9e4 	bl	bd526 <strcmp>
   bb15e:	b938      	cbnz	r0, bb170 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bb160:	e9dd 2300 	ldrd	r2, r3, [sp]
   bb164:	4620      	mov	r0, r4
   bb166:	f7ff ff45 	bl	baff4 <_ZN9TimeClass7timeStrEx>
}
   bb16a:	4620      	mov	r0, r4
   bb16c:	b00d      	add	sp, #52	; 0x34
   bb16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bb170:	4e12      	ldr	r6, [pc, #72]	; (bb1bc <_ZN9TimeClass6formatExPKc+0x7c>)
   bb172:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bb174:	4f12      	ldr	r7, [pc, #72]	; (bb1c0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bb176:	e9d6 3200 	ldrd	r3, r2, [r6]
   bb17a:	185b      	adds	r3, r3, r1
   bb17c:	9901      	ldr	r1, [sp, #4]
   bb17e:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bb182:	e9d7 0100 	ldrd	r0, r1, [r7]
   bb186:	181b      	adds	r3, r3, r0
   bb188:	eb42 0201 	adc.w	r2, r2, r1
   bb18c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bb190:	2100      	movs	r1, #0
   bb192:	2224      	movs	r2, #36	; 0x24
   bb194:	a803      	add	r0, sp, #12
   bb196:	f002 f93b 	bl	bd410 <memset>
    localtime_r(&t, &calendar_time);
   bb19a:	a903      	add	r1, sp, #12
   bb19c:	4668      	mov	r0, sp
   bb19e:	f7fd fcdf 	bl	b8b60 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bb1a2:	6832      	ldr	r2, [r6, #0]
   bb1a4:	683b      	ldr	r3, [r7, #0]
   bb1a6:	a903      	add	r1, sp, #12
   bb1a8:	4413      	add	r3, r2
   bb1aa:	4620      	mov	r0, r4
   bb1ac:	462a      	mov	r2, r5
   bb1ae:	f7ff ff5d 	bl	bb06c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bb1b2:	e7da      	b.n	bb16a <_ZN9TimeClass6formatExPKc+0x2a>
   bb1b4:	2003e6b0 	.word	0x2003e6b0
   bb1b8:	2003ded8 	.word	0x2003ded8
   bb1bc:	2003e6e0 	.word	0x2003e6e0
   bb1c0:	2003e6d8 	.word	0x2003e6d8

000bb1c4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bb1c4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bb1c6:	2000      	movs	r0, #0
   bb1c8:	f7fd f97e 	bl	b84c8 <hal_rtc_time_is_valid>
    if (rtcstate)
   bb1cc:	4604      	mov	r4, r0
   bb1ce:	b9a0      	cbnz	r0, bb1fa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bb1d0:	f7fd fb74 	bl	b88bc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bb1d4:	2801      	cmp	r0, #1
   bb1d6:	d110      	bne.n	bb1fa <_ZN9TimeClass7isValidEv+0x36>
   bb1d8:	4620      	mov	r0, r4
   bb1da:	f7fd fb97 	bl	b890c <system_thread_get_state>
   bb1de:	b960      	cbnz	r0, bb1fa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bb1e0:	f7ff fede 	bl	bafa0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bb1e4:	b910      	cbnz	r0, bb1ec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bb1e6:	f7fd fbd3 	bl	b8990 <spark_process>
        while (_while() && !_condition()) {
   bb1ea:	e7f9      	b.n	bb1e0 <_ZN9TimeClass7isValidEv+0x1c>
   bb1ec:	f7ff fed8 	bl	bafa0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bb1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bb1f4:	2000      	movs	r0, #0
   bb1f6:	f7fd b967 	b.w	b84c8 <hal_rtc_time_is_valid>
}
   bb1fa:	4620      	mov	r0, r4
   bb1fc:	bd10      	pop	{r4, pc}

000bb1fe <_ZN9TimeClass3nowEv>:
{
   bb1fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bb200:	f7ff ffe0 	bl	bb1c4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bb204:	2210      	movs	r2, #16
   bb206:	2100      	movs	r1, #0
   bb208:	4668      	mov	r0, sp
   bb20a:	f002 f901 	bl	bd410 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bb20e:	2100      	movs	r1, #0
   bb210:	4668      	mov	r0, sp
   bb212:	f7fd f969 	bl	b84e8 <hal_rtc_get_time>
}
   bb216:	9800      	ldr	r0, [sp, #0]
   bb218:	b005      	add	sp, #20
   bb21a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb220 <_ZN9TimeClass4hourEv>:
{
   bb220:	b508      	push	{r3, lr}
	return hour(now());
   bb222:	f7ff ffec 	bl	bb1fe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bb226:	17c1      	asrs	r1, r0, #31
   bb228:	f7ff fe84 	bl	baf34 <_ZL22Refresh_UnixTime_Cachex>
}
   bb22c:	4b01      	ldr	r3, [pc, #4]	; (bb234 <_ZN9TimeClass4hourEv+0x14>)
   bb22e:	6898      	ldr	r0, [r3, #8]
   bb230:	bd08      	pop	{r3, pc}
   bb232:	bf00      	nop
   bb234:	2003e6b4 	.word	0x2003e6b4

000bb238 <_ZN9TimeClass3dayEv>:
{
   bb238:	b508      	push	{r3, lr}
	return day(now());
   bb23a:	f7ff ffe0 	bl	bb1fe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bb23e:	17c1      	asrs	r1, r0, #31
   bb240:	f7ff fe78 	bl	baf34 <_ZL22Refresh_UnixTime_Cachex>
}
   bb244:	4b01      	ldr	r3, [pc, #4]	; (bb24c <_ZN9TimeClass3dayEv+0x14>)
   bb246:	68d8      	ldr	r0, [r3, #12]
   bb248:	bd08      	pop	{r3, pc}
   bb24a:	bf00      	nop
   bb24c:	2003e6b4 	.word	0x2003e6b4

000bb250 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb250:	4b02      	ldr	r3, [pc, #8]	; (bb25c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb252:	681a      	ldr	r2, [r3, #0]
   bb254:	4b02      	ldr	r3, [pc, #8]	; (bb260 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb256:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb258:	4770      	bx	lr
   bb25a:	bf00      	nop
   bb25c:	2003ded8 	.word	0x2003ded8
   bb260:	2003e6b0 	.word	0x2003e6b0

000bb264 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb264:	4770      	bx	lr

000bb266 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb266:	7441      	strb	r1, [r0, #17]
}
   bb268:	4770      	bx	lr

000bb26a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb26a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb26c:	7c00      	ldrb	r0, [r0, #16]
   bb26e:	f7fd fa93 	bl	b8798 <hal_usart_available_data_for_write>
}
   bb272:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb276:	bd08      	pop	{r3, pc}

000bb278 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb278:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb27a:	7c00      	ldrb	r0, [r0, #16]
   bb27c:	f7fd fa64 	bl	b8748 <hal_usart_available>
}
   bb280:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb284:	bd08      	pop	{r3, pc}

000bb286 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb286:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb288:	7c00      	ldrb	r0, [r0, #16]
   bb28a:	f7fd fa6d 	bl	b8768 <hal_usart_peek>
}
   bb28e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb292:	bd08      	pop	{r3, pc}

000bb294 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb294:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb296:	7c00      	ldrb	r0, [r0, #16]
   bb298:	f7fd fa5e 	bl	b8758 <hal_usart_read>
}
   bb29c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb2a0:	bd08      	pop	{r3, pc}

000bb2a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb2a2:	7c00      	ldrb	r0, [r0, #16]
   bb2a4:	f7fd ba68 	b.w	b8778 <hal_usart_flush>

000bb2a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb2aa:	7c45      	ldrb	r5, [r0, #17]
{
   bb2ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb2ae:	b12d      	cbz	r5, bb2bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb2b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb2b2:	b003      	add	sp, #12
   bb2b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb2b8:	f7fd ba3e 	b.w	b8738 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb2bc:	7c00      	ldrb	r0, [r0, #16]
   bb2be:	9101      	str	r1, [sp, #4]
   bb2c0:	f7fd fa6a 	bl	b8798 <hal_usart_available_data_for_write>
   bb2c4:	2800      	cmp	r0, #0
   bb2c6:	9901      	ldr	r1, [sp, #4]
   bb2c8:	dcf2      	bgt.n	bb2b0 <_ZN11USARTSerial5writeEh+0x8>
}
   bb2ca:	4628      	mov	r0, r5
   bb2cc:	b003      	add	sp, #12
   bb2ce:	bd30      	pop	{r4, r5, pc}

000bb2d0 <_ZN11USARTSerialD0Ev>:
   bb2d0:	b510      	push	{r4, lr}
   bb2d2:	2114      	movs	r1, #20
   bb2d4:	4604      	mov	r4, r0
   bb2d6:	f7f8 fee2 	bl	b409e <_ZdlPvj>
   bb2da:	4620      	mov	r0, r4
   bb2dc:	bd10      	pop	{r4, pc}
	...

000bb2e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb2e0:	b510      	push	{r4, lr}
   bb2e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb2e6:	4604      	mov	r4, r0
   bb2e8:	4608      	mov	r0, r1
   bb2ea:	4611      	mov	r1, r2
   bb2ec:	2200      	movs	r2, #0
   bb2ee:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb2f2:	4b04      	ldr	r3, [pc, #16]	; (bb304 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb2f4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb2f6:	2301      	movs	r3, #1
  _serial = serial;
   bb2f8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb2fa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb2fc:	f7fd fa5c 	bl	b87b8 <hal_usart_init_ex>
}
   bb300:	4620      	mov	r0, r4
   bb302:	bd10      	pop	{r4, pc}
   bb304:	000be914 	.word	0x000be914

000bb308 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb308:	7c00      	ldrb	r0, [r0, #16]
   bb30a:	2300      	movs	r3, #0
   bb30c:	f7fd ba4c 	b.w	b87a8 <hal_usart_begin_config>

000bb310 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb310:	2200      	movs	r2, #0
   bb312:	f7ff bff9 	b.w	bb308 <_ZN11USARTSerial5beginEmm>

000bb316 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb316:	7c00      	ldrb	r0, [r0, #16]
   bb318:	f7fd ba06 	b.w	b8728 <hal_usart_end>

000bb31c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb31c:	7441      	strb	r1, [r0, #17]
}
   bb31e:	4770      	bx	lr

000bb320 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb320:	4770      	bx	lr

000bb322 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb322:	4770      	bx	lr

000bb324 <_ZN9USBSerial4readEv>:
{
   bb324:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb326:	2100      	movs	r1, #0
   bb328:	7c00      	ldrb	r0, [r0, #16]
   bb32a:	f7fd fa75 	bl	b8818 <HAL_USB_USART_Receive_Data>
}
   bb32e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb332:	bd08      	pop	{r3, pc}

000bb334 <_ZN9USBSerial4peekEv>:
{
   bb334:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb336:	2101      	movs	r1, #1
   bb338:	7c00      	ldrb	r0, [r0, #16]
   bb33a:	f7fd fa6d 	bl	b8818 <HAL_USB_USART_Receive_Data>
}
   bb33e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb342:	bd08      	pop	{r3, pc}

000bb344 <_ZN9USBSerial17availableForWriteEv>:
{
   bb344:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb346:	7c00      	ldrb	r0, [r0, #16]
   bb348:	f7fd fa5e 	bl	b8808 <HAL_USB_USART_Available_Data_For_Write>
}
   bb34c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb350:	bd08      	pop	{r3, pc}

000bb352 <_ZN9USBSerial9availableEv>:
{
   bb352:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb354:	7c00      	ldrb	r0, [r0, #16]
   bb356:	f7fd fa4f 	bl	b87f8 <HAL_USB_USART_Available_Data>
}
   bb35a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb35e:	bd08      	pop	{r3, pc}

000bb360 <_ZN9USBSerial5writeEh>:
{
   bb360:	b513      	push	{r0, r1, r4, lr}
   bb362:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb364:	7c00      	ldrb	r0, [r0, #16]
{
   bb366:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb368:	f7fd fa4e 	bl	b8808 <HAL_USB_USART_Available_Data_For_Write>
   bb36c:	2800      	cmp	r0, #0
   bb36e:	9901      	ldr	r1, [sp, #4]
   bb370:	dc01      	bgt.n	bb376 <_ZN9USBSerial5writeEh+0x16>
   bb372:	7c60      	ldrb	r0, [r4, #17]
   bb374:	b120      	cbz	r0, bb380 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb376:	7c20      	ldrb	r0, [r4, #16]
   bb378:	f7fd fa56 	bl	b8828 <HAL_USB_USART_Send_Data>
   bb37c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb380:	b002      	add	sp, #8
   bb382:	bd10      	pop	{r4, pc}

000bb384 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb384:	7c00      	ldrb	r0, [r0, #16]
   bb386:	f7fd ba57 	b.w	b8838 <HAL_USB_USART_Flush_Data>

000bb38a <_ZN9USBSerialD0Ev>:
   bb38a:	b510      	push	{r4, lr}
   bb38c:	2114      	movs	r1, #20
   bb38e:	4604      	mov	r4, r0
   bb390:	f7f8 fe85 	bl	b409e <_ZdlPvj>
   bb394:	4620      	mov	r0, r4
   bb396:	bd10      	pop	{r4, pc}

000bb398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb398:	b510      	push	{r4, lr}
   bb39a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb39e:	4604      	mov	r4, r0
   bb3a0:	4608      	mov	r0, r1
   bb3a2:	2100      	movs	r1, #0
   bb3a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb3a8:	4b04      	ldr	r3, [pc, #16]	; (bb3bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb3aa:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb3ac:	2301      	movs	r3, #1
  _serial = serial;
   bb3ae:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb3b0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb3b2:	4611      	mov	r1, r2
   bb3b4:	f7fd fa08 	bl	b87c8 <HAL_USB_USART_Init>
}
   bb3b8:	4620      	mov	r0, r4
   bb3ba:	bd10      	pop	{r4, pc}
   bb3bc:	000be944 	.word	0x000be944

000bb3c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb3c0:	7c00      	ldrb	r0, [r0, #16]
   bb3c2:	2200      	movs	r2, #0
   bb3c4:	f7fd ba08 	b.w	b87d8 <HAL_USB_USART_Begin>

000bb3c8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bb3c8:	7c00      	ldrb	r0, [r0, #16]
   bb3ca:	f7fd ba0d 	b.w	b87e8 <HAL_USB_USART_End>

000bb3ce <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bb3ce:	7c00      	ldrb	r0, [r0, #16]
   bb3d0:	f7fd ba3a 	b.w	b8848 <HAL_USB_USART_Is_Connected>

000bb3d4 <_Z19acquireSerialBufferv>:
{
   bb3d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb3d6:	2214      	movs	r2, #20
{
   bb3d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb3da:	2100      	movs	r1, #0
   bb3dc:	f002 f818 	bl	bd410 <memset>
}
   bb3e0:	4620      	mov	r0, r4
   bb3e2:	bd10      	pop	{r4, pc}

000bb3e4 <_Z16_fetch_usbserialv>:
{
   bb3e4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb3e6:	4c0f      	ldr	r4, [pc, #60]	; (bb424 <_Z16_fetch_usbserialv+0x40>)
{
   bb3e8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb3ea:	a803      	add	r0, sp, #12
   bb3ec:	f7ff fff2 	bl	bb3d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb3f0:	7821      	ldrb	r1, [r4, #0]
   bb3f2:	f3bf 8f5b 	dmb	ish
   bb3f6:	f011 0101 	ands.w	r1, r1, #1
   bb3fa:	d10f      	bne.n	bb41c <_Z16_fetch_usbserialv+0x38>
   bb3fc:	4620      	mov	r0, r4
   bb3fe:	9101      	str	r1, [sp, #4]
   bb400:	f7f8 fe5c 	bl	b40bc <__cxa_guard_acquire>
   bb404:	9901      	ldr	r1, [sp, #4]
   bb406:	b148      	cbz	r0, bb41c <_Z16_fetch_usbserialv+0x38>
   bb408:	aa03      	add	r2, sp, #12
   bb40a:	4807      	ldr	r0, [pc, #28]	; (bb428 <_Z16_fetch_usbserialv+0x44>)
   bb40c:	f7ff ffc4 	bl	bb398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb410:	4620      	mov	r0, r4
   bb412:	f7f8 fe58 	bl	b40c6 <__cxa_guard_release>
   bb416:	4805      	ldr	r0, [pc, #20]	; (bb42c <_Z16_fetch_usbserialv+0x48>)
   bb418:	f001 ffa6 	bl	bd368 <atexit>
	return _usbserial;
}
   bb41c:	4802      	ldr	r0, [pc, #8]	; (bb428 <_Z16_fetch_usbserialv+0x44>)
   bb41e:	b008      	add	sp, #32
   bb420:	bd10      	pop	{r4, pc}
   bb422:	bf00      	nop
   bb424:	2003e6f0 	.word	0x2003e6f0
   bb428:	2003e6f4 	.word	0x2003e6f4
   bb42c:	000bb321 	.word	0x000bb321

000bb430 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb430:	4b01      	ldr	r3, [pc, #4]	; (bb438 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb432:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb434:	4770      	bx	lr
   bb436:	bf00      	nop
   bb438:	2003dee0 	.word	0x2003dee0

000bb43c <serialEventRun>:
{
   bb43c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb43e:	4b0b      	ldr	r3, [pc, #44]	; (bb46c <serialEventRun+0x30>)
   bb440:	b143      	cbz	r3, bb454 <serialEventRun+0x18>
   bb442:	f7ff ffcf 	bl	bb3e4 <_Z16_fetch_usbserialv>
   bb446:	6803      	ldr	r3, [r0, #0]
   bb448:	691b      	ldr	r3, [r3, #16]
   bb44a:	4798      	blx	r3
   bb44c:	2800      	cmp	r0, #0
   bb44e:	dd01      	ble.n	bb454 <serialEventRun+0x18>
        serialEvent();
   bb450:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb454:	4b06      	ldr	r3, [pc, #24]	; (bb470 <serialEventRun+0x34>)
   bb456:	b143      	cbz	r3, bb46a <serialEventRun+0x2e>
   bb458:	f000 f9aa 	bl	bb7b0 <_Z22__fetch_global_Serial1v>
   bb45c:	6803      	ldr	r3, [r0, #0]
   bb45e:	691b      	ldr	r3, [r3, #16]
   bb460:	4798      	blx	r3
   bb462:	2800      	cmp	r0, #0
   bb464:	dd01      	ble.n	bb46a <serialEventRun+0x2e>
        serialEvent1();
   bb466:	f3af 8000 	nop.w
}
   bb46a:	bd08      	pop	{r3, pc}
	...

000bb474 <_post_loop>:
{
   bb474:	b508      	push	{r3, lr}
	serialEventRun();
   bb476:	f7ff ffe1 	bl	bb43c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb47a:	f7fd f81d 	bl	b84b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb47e:	4b01      	ldr	r3, [pc, #4]	; (bb484 <_post_loop+0x10>)
   bb480:	6018      	str	r0, [r3, #0]
}
   bb482:	bd08      	pop	{r3, pc}
   bb484:	2003e710 	.word	0x2003e710

000bb488 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb488:	4805      	ldr	r0, [pc, #20]	; (bb4a0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb48a:	4a06      	ldr	r2, [pc, #24]	; (bb4a4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb48c:	4906      	ldr	r1, [pc, #24]	; (bb4a8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb48e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb490:	1a12      	subs	r2, r2, r0
   bb492:	f001 ff95 	bl	bd3c0 <memcpy>
    __backup_sram_signature = signature;
   bb496:	4b05      	ldr	r3, [pc, #20]	; (bb4ac <_Z33system_initialize_user_backup_ramv+0x24>)
   bb498:	4a05      	ldr	r2, [pc, #20]	; (bb4b0 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb49a:	601a      	str	r2, [r3, #0]
}
   bb49c:	bd08      	pop	{r3, pc}
   bb49e:	bf00      	nop
   bb4a0:	2003f400 	.word	0x2003f400
   bb4a4:	2003f404 	.word	0x2003f404
   bb4a8:	000bec14 	.word	0x000bec14
   bb4ac:	2003f400 	.word	0x2003f400
   bb4b0:	9a271c1e 	.word	0x9a271c1e

000bb4b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb4b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb4b6:	2300      	movs	r3, #0
   bb4b8:	9300      	str	r3, [sp, #0]
   bb4ba:	461a      	mov	r2, r3
   bb4bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb4c0:	f7fd fa3e 	bl	b8940 <system_ctrl_set_result>
}
   bb4c4:	b003      	add	sp, #12
   bb4c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb4cc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb4cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb4ce:	8843      	ldrh	r3, [r0, #2]
   bb4d0:	2b0a      	cmp	r3, #10
   bb4d2:	d008      	beq.n	bb4e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb4d4:	2b50      	cmp	r3, #80	; 0x50
   bb4d6:	d10b      	bne.n	bb4f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb4d8:	4b09      	ldr	r3, [pc, #36]	; (bb500 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb4da:	681b      	ldr	r3, [r3, #0]
   bb4dc:	b14b      	cbz	r3, bb4f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb4de:	b003      	add	sp, #12
   bb4e0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb4e4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb4e6:	f7ff ffe5 	bl	bb4b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb4ea:	b003      	add	sp, #12
   bb4ec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb4f0:	2300      	movs	r3, #0
   bb4f2:	9300      	str	r3, [sp, #0]
   bb4f4:	461a      	mov	r2, r3
   bb4f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb4fa:	f7fd fa21 	bl	b8940 <system_ctrl_set_result>
}
   bb4fe:	e7f4      	b.n	bb4ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb500:	2003e70c 	.word	0x2003e70c

000bb504 <module_user_init_hook>:
{
   bb504:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb506:	4812      	ldr	r0, [pc, #72]	; (bb550 <module_user_init_hook+0x4c>)
   bb508:	2100      	movs	r1, #0
   bb50a:	f7fd fb19 	bl	b8b40 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb50e:	4b11      	ldr	r3, [pc, #68]	; (bb554 <module_user_init_hook+0x50>)
   bb510:	681a      	ldr	r2, [r3, #0]
   bb512:	4b11      	ldr	r3, [pc, #68]	; (bb558 <module_user_init_hook+0x54>)
   bb514:	429a      	cmp	r2, r3
   bb516:	4b11      	ldr	r3, [pc, #68]	; (bb55c <module_user_init_hook+0x58>)
   bb518:	bf0c      	ite	eq
   bb51a:	2201      	moveq	r2, #1
   bb51c:	2200      	movne	r2, #0
   bb51e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb520:	d001      	beq.n	bb526 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb522:	f7ff ffb1 	bl	bb488 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb526:	f7fc ffb7 	bl	b8498 <HAL_RNG_GetRandomNumber>
   bb52a:	4604      	mov	r4, r0
    srand(seed);
   bb52c:	f001 ff78 	bl	bd420 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb530:	4b0b      	ldr	r3, [pc, #44]	; (bb560 <module_user_init_hook+0x5c>)
   bb532:	b113      	cbz	r3, bb53a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb534:	4620      	mov	r0, r4
   bb536:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb53a:	2100      	movs	r1, #0
   bb53c:	4808      	ldr	r0, [pc, #32]	; (bb560 <module_user_init_hook+0x5c>)
   bb53e:	f7fd fa4f 	bl	b89e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb546:	4807      	ldr	r0, [pc, #28]	; (bb564 <module_user_init_hook+0x60>)
   bb548:	2100      	movs	r1, #0
   bb54a:	f7fd b9ef 	b.w	b892c <system_ctrl_set_app_request_handler>
   bb54e:	bf00      	nop
   bb550:	000bb431 	.word	0x000bb431
   bb554:	2003f400 	.word	0x2003f400
   bb558:	9a271c1e 	.word	0x9a271c1e
   bb55c:	2003e708 	.word	0x2003e708
   bb560:	00000000 	.word	0x00000000
   bb564:	000bb4cd 	.word	0x000bb4cd

000bb568 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb568:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb56a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb56c:	d902      	bls.n	bb574 <pinAvailable+0xc>
    return false;
   bb56e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb570:	b002      	add	sp, #8
   bb572:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb574:	f1a0 030b 	sub.w	r3, r0, #11
   bb578:	2b02      	cmp	r3, #2
   bb57a:	d81a      	bhi.n	bb5b2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb57c:	4c17      	ldr	r4, [pc, #92]	; (bb5dc <pinAvailable+0x74>)
   bb57e:	7821      	ldrb	r1, [r4, #0]
   bb580:	f3bf 8f5b 	dmb	ish
   bb584:	f011 0101 	ands.w	r1, r1, #1
   bb588:	d10b      	bne.n	bb5a2 <pinAvailable+0x3a>
   bb58a:	4620      	mov	r0, r4
   bb58c:	9101      	str	r1, [sp, #4]
   bb58e:	f7f8 fd95 	bl	b40bc <__cxa_guard_acquire>
   bb592:	9901      	ldr	r1, [sp, #4]
   bb594:	b128      	cbz	r0, bb5a2 <pinAvailable+0x3a>
   bb596:	4812      	ldr	r0, [pc, #72]	; (bb5e0 <pinAvailable+0x78>)
   bb598:	f7ff fa64 	bl	baa64 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb59c:	4620      	mov	r0, r4
   bb59e:	f7f8 fd92 	bl	b40c6 <__cxa_guard_release>
   bb5a2:	4b0f      	ldr	r3, [pc, #60]	; (bb5e0 <pinAvailable+0x78>)
   bb5a4:	7818      	ldrb	r0, [r3, #0]
   bb5a6:	f7fd f897 	bl	b86d8 <hal_spi_is_enabled>
   bb5aa:	2800      	cmp	r0, #0
   bb5ac:	d1df      	bne.n	bb56e <pinAvailable+0x6>
  return true; // 'pin' is available
   bb5ae:	2001      	movs	r0, #1
   bb5b0:	e7de      	b.n	bb570 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb5b2:	2801      	cmp	r0, #1
   bb5b4:	d809      	bhi.n	bb5ca <pinAvailable+0x62>
   bb5b6:	f000 f897 	bl	bb6e8 <_Z19__fetch_global_Wirev>
   bb5ba:	2100      	movs	r1, #0
   bb5bc:	7c00      	ldrb	r0, [r0, #16]
   bb5be:	f7fd f82b 	bl	b8618 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb5c2:	f080 0001 	eor.w	r0, r0, #1
   bb5c6:	b2c0      	uxtb	r0, r0
   bb5c8:	e7d2      	b.n	bb570 <pinAvailable+0x8>
   bb5ca:	3809      	subs	r0, #9
   bb5cc:	2801      	cmp	r0, #1
   bb5ce:	d8ee      	bhi.n	bb5ae <pinAvailable+0x46>
   bb5d0:	f000 f8ee 	bl	bb7b0 <_Z22__fetch_global_Serial1v>
   bb5d4:	7c00      	ldrb	r0, [r0, #16]
   bb5d6:	f7fd f8d7 	bl	b8788 <hal_usart_is_enabled>
   bb5da:	e7f2      	b.n	bb5c2 <pinAvailable+0x5a>
   bb5dc:	2003e3e4 	.word	0x2003e3e4
   bb5e0:	2003e3e8 	.word	0x2003e3e8

000bb5e4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb5e4:	2823      	cmp	r0, #35	; 0x23
{
   bb5e6:	b538      	push	{r3, r4, r5, lr}
   bb5e8:	4604      	mov	r4, r0
   bb5ea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb5ec:	d80a      	bhi.n	bb604 <pinMode+0x20>
   bb5ee:	29ff      	cmp	r1, #255	; 0xff
   bb5f0:	d008      	beq.n	bb604 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb5f2:	f7ff ffb9 	bl	bb568 <pinAvailable>
   bb5f6:	b128      	cbz	r0, bb604 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb5f8:	4629      	mov	r1, r5
   bb5fa:	4620      	mov	r0, r4
}
   bb5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb600:	f7fc bf92 	b.w	b8528 <HAL_Pin_Mode>
}
   bb604:	bd38      	pop	{r3, r4, r5, pc}

000bb606 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb606:	b538      	push	{r3, r4, r5, lr}
   bb608:	4604      	mov	r4, r0
   bb60a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb60c:	f7fc ff94 	bl	b8538 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb610:	28ff      	cmp	r0, #255	; 0xff
   bb612:	d010      	beq.n	bb636 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb614:	2806      	cmp	r0, #6
   bb616:	d804      	bhi.n	bb622 <digitalWrite+0x1c>
   bb618:	234d      	movs	r3, #77	; 0x4d
   bb61a:	fa23 f000 	lsr.w	r0, r3, r0
   bb61e:	07c3      	lsls	r3, r0, #31
   bb620:	d409      	bmi.n	bb636 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb622:	4620      	mov	r0, r4
   bb624:	f7ff ffa0 	bl	bb568 <pinAvailable>
   bb628:	b128      	cbz	r0, bb636 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb62a:	4629      	mov	r1, r5
   bb62c:	4620      	mov	r0, r4
}
   bb62e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb632:	f7fc bf89 	b.w	b8548 <HAL_GPIO_Write>
}
   bb636:	bd38      	pop	{r3, r4, r5, pc}

000bb638 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bb638:	b510      	push	{r4, lr}
   bb63a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb63c:	f7fc ff7c 	bl	b8538 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb640:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb642:	b2db      	uxtb	r3, r3
   bb644:	2b01      	cmp	r3, #1
   bb646:	d908      	bls.n	bb65a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb648:	4620      	mov	r0, r4
   bb64a:	f7ff ff8d 	bl	bb568 <pinAvailable>
   bb64e:	b120      	cbz	r0, bb65a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bb650:	4620      	mov	r0, r4
}
   bb652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bb656:	f7fc bf7f 	b.w	b8558 <HAL_GPIO_Read>
}
   bb65a:	2000      	movs	r0, #0
   bb65c:	bd10      	pop	{r4, pc}

000bb65e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb65e:	280d      	cmp	r0, #13
{
   bb660:	b510      	push	{r4, lr}
   bb662:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb664:	bf9c      	itt	ls
   bb666:	340e      	addls	r4, #14
   bb668:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bb66a:	4620      	mov	r0, r4
   bb66c:	f7ff ff7c 	bl	bb568 <pinAvailable>
   bb670:	b150      	cbz	r0, bb688 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bb672:	2103      	movs	r1, #3
   bb674:	4620      	mov	r0, r4
   bb676:	f7fc ff4f 	bl	b8518 <HAL_Validate_Pin_Function>
   bb67a:	2803      	cmp	r0, #3
   bb67c:	d104      	bne.n	bb688 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb67e:	4620      	mov	r0, r4
}
   bb680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb684:	f7fc bf80 	b.w	b8588 <hal_adc_read>
}
   bb688:	2000      	movs	r0, #0
   bb68a:	bd10      	pop	{r4, pc}

000bb68c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb68c:	4770      	bx	lr

000bb68e <__tcf_1>:
   bb68e:	4770      	bx	lr

000bb690 <_Z17acquireWireBufferv>:
{
   bb690:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb692:	2520      	movs	r5, #32
   bb694:	2314      	movs	r3, #20
{
   bb696:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb698:	6003      	str	r3, [r0, #0]
   bb69a:	6085      	str	r5, [r0, #8]
   bb69c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb69e:	4906      	ldr	r1, [pc, #24]	; (bb6b8 <_Z17acquireWireBufferv+0x28>)
   bb6a0:	4628      	mov	r0, r5
   bb6a2:	f000 f8ab 	bl	bb7fc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb6a6:	4904      	ldr	r1, [pc, #16]	; (bb6b8 <_Z17acquireWireBufferv+0x28>)
	};
   bb6a8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb6aa:	4628      	mov	r0, r5
   bb6ac:	f000 f8a6 	bl	bb7fc <_ZnajRKSt9nothrow_t>
	};
   bb6b0:	60e0      	str	r0, [r4, #12]
}
   bb6b2:	4620      	mov	r0, r4
   bb6b4:	bd38      	pop	{r3, r4, r5, pc}
   bb6b6:	bf00      	nop
   bb6b8:	000be96c 	.word	0x000be96c

000bb6bc <_Z18acquireWire1Bufferv>:
   bb6bc:	b538      	push	{r3, r4, r5, lr}
   bb6be:	2520      	movs	r5, #32
   bb6c0:	2314      	movs	r3, #20
   bb6c2:	4604      	mov	r4, r0
   bb6c4:	6003      	str	r3, [r0, #0]
   bb6c6:	6085      	str	r5, [r0, #8]
   bb6c8:	6105      	str	r5, [r0, #16]
   bb6ca:	4906      	ldr	r1, [pc, #24]	; (bb6e4 <_Z18acquireWire1Bufferv+0x28>)
   bb6cc:	4628      	mov	r0, r5
   bb6ce:	f000 f895 	bl	bb7fc <_ZnajRKSt9nothrow_t>
   bb6d2:	4904      	ldr	r1, [pc, #16]	; (bb6e4 <_Z18acquireWire1Bufferv+0x28>)
   bb6d4:	6060      	str	r0, [r4, #4]
   bb6d6:	4628      	mov	r0, r5
   bb6d8:	f000 f890 	bl	bb7fc <_ZnajRKSt9nothrow_t>
   bb6dc:	60e0      	str	r0, [r4, #12]
   bb6de:	4620      	mov	r0, r4
   bb6e0:	bd38      	pop	{r3, r4, r5, pc}
   bb6e2:	bf00      	nop
   bb6e4:	000be96c 	.word	0x000be96c

000bb6e8 <_Z19__fetch_global_Wirev>:
{
   bb6e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb6ea:	4d0e      	ldr	r5, [pc, #56]	; (bb724 <_Z19__fetch_global_Wirev+0x3c>)
   bb6ec:	7829      	ldrb	r1, [r5, #0]
   bb6ee:	f3bf 8f5b 	dmb	ish
   bb6f2:	f011 0401 	ands.w	r4, r1, #1
{
   bb6f6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb6f8:	d111      	bne.n	bb71e <_Z19__fetch_global_Wirev+0x36>
   bb6fa:	4628      	mov	r0, r5
   bb6fc:	f7f8 fcde 	bl	b40bc <__cxa_guard_acquire>
   bb700:	b168      	cbz	r0, bb71e <_Z19__fetch_global_Wirev+0x36>
   bb702:	a801      	add	r0, sp, #4
   bb704:	f7ff ffc4 	bl	bb690 <_Z17acquireWireBufferv>
   bb708:	aa01      	add	r2, sp, #4
   bb70a:	4621      	mov	r1, r4
   bb70c:	4806      	ldr	r0, [pc, #24]	; (bb728 <_Z19__fetch_global_Wirev+0x40>)
   bb70e:	f7fd fc59 	bl	b8fc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb712:	4628      	mov	r0, r5
   bb714:	f7f8 fcd7 	bl	b40c6 <__cxa_guard_release>
   bb718:	4804      	ldr	r0, [pc, #16]	; (bb72c <_Z19__fetch_global_Wirev+0x44>)
   bb71a:	f001 fe25 	bl	bd368 <atexit>
	return wire;
}
   bb71e:	4802      	ldr	r0, [pc, #8]	; (bb728 <_Z19__fetch_global_Wirev+0x40>)
   bb720:	b007      	add	sp, #28
   bb722:	bd30      	pop	{r4, r5, pc}
   bb724:	2003e714 	.word	0x2003e714
   bb728:	2003e71c 	.word	0x2003e71c
   bb72c:	000bb68d 	.word	0x000bb68d

000bb730 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bb730:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb732:	4c0e      	ldr	r4, [pc, #56]	; (bb76c <_Z20__fetch_global_Wire1v+0x3c>)
   bb734:	7823      	ldrb	r3, [r4, #0]
   bb736:	f3bf 8f5b 	dmb	ish
   bb73a:	07db      	lsls	r3, r3, #31
{
   bb73c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb73e:	d411      	bmi.n	bb764 <_Z20__fetch_global_Wire1v+0x34>
   bb740:	4620      	mov	r0, r4
   bb742:	f7f8 fcbb 	bl	b40bc <__cxa_guard_acquire>
   bb746:	b168      	cbz	r0, bb764 <_Z20__fetch_global_Wire1v+0x34>
   bb748:	a801      	add	r0, sp, #4
   bb74a:	f7ff ffb7 	bl	bb6bc <_Z18acquireWire1Bufferv>
   bb74e:	aa01      	add	r2, sp, #4
   bb750:	2101      	movs	r1, #1
   bb752:	4807      	ldr	r0, [pc, #28]	; (bb770 <_Z20__fetch_global_Wire1v+0x40>)
   bb754:	f7fd fc36 	bl	b8fc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb758:	4620      	mov	r0, r4
   bb75a:	f7f8 fcb4 	bl	b40c6 <__cxa_guard_release>
   bb75e:	4805      	ldr	r0, [pc, #20]	; (bb774 <_Z20__fetch_global_Wire1v+0x44>)
   bb760:	f001 fe02 	bl	bd368 <atexit>
	return wire;
}
   bb764:	4802      	ldr	r0, [pc, #8]	; (bb770 <_Z20__fetch_global_Wire1v+0x40>)
   bb766:	b006      	add	sp, #24
   bb768:	bd10      	pop	{r4, pc}
   bb76a:	bf00      	nop
   bb76c:	2003e718 	.word	0x2003e718
   bb770:	2003e730 	.word	0x2003e730
   bb774:	000bb68f 	.word	0x000bb68f

000bb778 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb778:	4770      	bx	lr
	...

000bb77c <_Z20acquireSerial1Bufferv>:
{
   bb77c:	b538      	push	{r3, r4, r5, lr}
   bb77e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb780:	2514      	movs	r5, #20
   bb782:	462a      	mov	r2, r5
   bb784:	2100      	movs	r1, #0
   bb786:	f001 fe43 	bl	bd410 <memset>
   bb78a:	8025      	strh	r5, [r4, #0]
   bb78c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb78e:	4907      	ldr	r1, [pc, #28]	; (bb7ac <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb790:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb792:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb794:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb796:	f000 f831 	bl	bb7fc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb79a:	4904      	ldr	r1, [pc, #16]	; (bb7ac <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb79c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb79e:	4628      	mov	r0, r5
   bb7a0:	f000 f82c 	bl	bb7fc <_ZnajRKSt9nothrow_t>
    };
   bb7a4:	60e0      	str	r0, [r4, #12]
}
   bb7a6:	4620      	mov	r0, r4
   bb7a8:	bd38      	pop	{r3, r4, r5, pc}
   bb7aa:	bf00      	nop
   bb7ac:	000be96c 	.word	0x000be96c

000bb7b0 <_Z22__fetch_global_Serial1v>:
{
   bb7b0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb7b2:	4d0e      	ldr	r5, [pc, #56]	; (bb7ec <_Z22__fetch_global_Serial1v+0x3c>)
   bb7b4:	7829      	ldrb	r1, [r5, #0]
   bb7b6:	f3bf 8f5b 	dmb	ish
   bb7ba:	f011 0401 	ands.w	r4, r1, #1
{
   bb7be:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb7c0:	d111      	bne.n	bb7e6 <_Z22__fetch_global_Serial1v+0x36>
   bb7c2:	4628      	mov	r0, r5
   bb7c4:	f7f8 fc7a 	bl	b40bc <__cxa_guard_acquire>
   bb7c8:	b168      	cbz	r0, bb7e6 <_Z22__fetch_global_Serial1v+0x36>
   bb7ca:	a801      	add	r0, sp, #4
   bb7cc:	f7ff ffd6 	bl	bb77c <_Z20acquireSerial1Bufferv>
   bb7d0:	aa01      	add	r2, sp, #4
   bb7d2:	4621      	mov	r1, r4
   bb7d4:	4806      	ldr	r0, [pc, #24]	; (bb7f0 <_Z22__fetch_global_Serial1v+0x40>)
   bb7d6:	f7ff fd83 	bl	bb2e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb7da:	4628      	mov	r0, r5
   bb7dc:	f7f8 fc73 	bl	b40c6 <__cxa_guard_release>
   bb7e0:	4804      	ldr	r0, [pc, #16]	; (bb7f4 <_Z22__fetch_global_Serial1v+0x44>)
   bb7e2:	f001 fdc1 	bl	bd368 <atexit>
    return serial1;
}
   bb7e6:	4802      	ldr	r0, [pc, #8]	; (bb7f0 <_Z22__fetch_global_Serial1v+0x40>)
   bb7e8:	b007      	add	sp, #28
   bb7ea:	bd30      	pop	{r4, r5, pc}
   bb7ec:	2003e744 	.word	0x2003e744
   bb7f0:	2003e748 	.word	0x2003e748
   bb7f4:	000bb779 	.word	0x000bb779

000bb7f8 <_ZnwjRKSt9nothrow_t>:
   bb7f8:	f7f8 bc4d 	b.w	b4096 <_Znwj>

000bb7fc <_ZnajRKSt9nothrow_t>:
   bb7fc:	f7f8 bc4d 	b.w	b409a <_Znaj>

000bb800 <_ZSt25__throw_bad_function_callv>:
   bb800:	b508      	push	{r3, lr}
   bb802:	f7fd f985 	bl	b8b10 <abort>
	...

000bb808 <pow>:
   bb808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb80a:	ed2d 8b02 	vpush	{d8}
   bb80e:	ec57 6b10 	vmov	r6, r7, d0
   bb812:	ec55 4b11 	vmov	r4, r5, d1
   bb816:	f000 f8cb 	bl	bb9b0 <__ieee754_pow>
   bb81a:	4b63      	ldr	r3, [pc, #396]	; (bb9a8 <pow+0x1a0>)
   bb81c:	eeb0 8a40 	vmov.f32	s16, s0
   bb820:	eef0 8a60 	vmov.f32	s17, s1
   bb824:	f993 3000 	ldrsb.w	r3, [r3]
   bb828:	3301      	adds	r3, #1
   bb82a:	d02a      	beq.n	bb882 <pow+0x7a>
   bb82c:	4622      	mov	r2, r4
   bb82e:	462b      	mov	r3, r5
   bb830:	4620      	mov	r0, r4
   bb832:	4629      	mov	r1, r5
   bb834:	f001 fcc4 	bl	bd1c0 <__aeabi_dcmpun>
   bb838:	bb18      	cbnz	r0, bb882 <pow+0x7a>
   bb83a:	4632      	mov	r2, r6
   bb83c:	463b      	mov	r3, r7
   bb83e:	4630      	mov	r0, r6
   bb840:	4639      	mov	r1, r7
   bb842:	f001 fcbd 	bl	bd1c0 <__aeabi_dcmpun>
   bb846:	2800      	cmp	r0, #0
   bb848:	d144      	bne.n	bb8d4 <pow+0xcc>
   bb84a:	2200      	movs	r2, #0
   bb84c:	2300      	movs	r3, #0
   bb84e:	4630      	mov	r0, r6
   bb850:	4639      	mov	r1, r7
   bb852:	f001 fc83 	bl	bd15c <__aeabi_dcmpeq>
   bb856:	b1d8      	cbz	r0, bb890 <pow+0x88>
   bb858:	2200      	movs	r2, #0
   bb85a:	2300      	movs	r3, #0
   bb85c:	4620      	mov	r0, r4
   bb85e:	4629      	mov	r1, r5
   bb860:	f001 fc7c 	bl	bd15c <__aeabi_dcmpeq>
   bb864:	2800      	cmp	r0, #0
   bb866:	d13d      	bne.n	bb8e4 <pow+0xdc>
   bb868:	ec45 4b10 	vmov	d0, r4, r5
   bb86c:	f000 ff10 	bl	bc690 <finite>
   bb870:	b138      	cbz	r0, bb882 <pow+0x7a>
   bb872:	4620      	mov	r0, r4
   bb874:	4629      	mov	r1, r5
   bb876:	2200      	movs	r2, #0
   bb878:	2300      	movs	r3, #0
   bb87a:	f001 fc79 	bl	bd170 <__aeabi_dcmplt>
   bb87e:	2800      	cmp	r0, #0
   bb880:	d15c      	bne.n	bb93c <pow+0x134>
   bb882:	eeb0 0a48 	vmov.f32	s0, s16
   bb886:	eef0 0a68 	vmov.f32	s1, s17
   bb88a:	ecbd 8b02 	vpop	{d8}
   bb88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb890:	eeb0 0a48 	vmov.f32	s0, s16
   bb894:	eef0 0a68 	vmov.f32	s1, s17
   bb898:	f000 fefa 	bl	bc690 <finite>
   bb89c:	b358      	cbz	r0, bb8f6 <pow+0xee>
   bb89e:	ec51 0b18 	vmov	r0, r1, d8
   bb8a2:	2200      	movs	r2, #0
   bb8a4:	2300      	movs	r3, #0
   bb8a6:	f001 fc59 	bl	bd15c <__aeabi_dcmpeq>
   bb8aa:	2800      	cmp	r0, #0
   bb8ac:	d0e9      	beq.n	bb882 <pow+0x7a>
   bb8ae:	ec47 6b10 	vmov	d0, r6, r7
   bb8b2:	f000 feed 	bl	bc690 <finite>
   bb8b6:	2800      	cmp	r0, #0
   bb8b8:	d0e3      	beq.n	bb882 <pow+0x7a>
   bb8ba:	ec45 4b10 	vmov	d0, r4, r5
   bb8be:	f000 fee7 	bl	bc690 <finite>
   bb8c2:	2800      	cmp	r0, #0
   bb8c4:	d0dd      	beq.n	bb882 <pow+0x7a>
   bb8c6:	f7fd f92b 	bl	b8b20 <__errno>
   bb8ca:	2322      	movs	r3, #34	; 0x22
   bb8cc:	ed9f 8b2e 	vldr	d8, [pc, #184]	; bb988 <pow+0x180>
   bb8d0:	6003      	str	r3, [r0, #0]
   bb8d2:	e7d6      	b.n	bb882 <pow+0x7a>
   bb8d4:	4620      	mov	r0, r4
   bb8d6:	4629      	mov	r1, r5
   bb8d8:	2200      	movs	r2, #0
   bb8da:	2300      	movs	r3, #0
   bb8dc:	f001 fc3e 	bl	bd15c <__aeabi_dcmpeq>
   bb8e0:	2800      	cmp	r0, #0
   bb8e2:	d0ce      	beq.n	bb882 <pow+0x7a>
   bb8e4:	ed9f 8b2a 	vldr	d8, [pc, #168]	; bb990 <pow+0x188>
   bb8e8:	eeb0 0a48 	vmov.f32	s0, s16
   bb8ec:	eef0 0a68 	vmov.f32	s1, s17
   bb8f0:	ecbd 8b02 	vpop	{d8}
   bb8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bb8f6:	ec47 6b10 	vmov	d0, r6, r7
   bb8fa:	f000 fec9 	bl	bc690 <finite>
   bb8fe:	2800      	cmp	r0, #0
   bb900:	d0cd      	beq.n	bb89e <pow+0x96>
   bb902:	ec45 4b10 	vmov	d0, r4, r5
   bb906:	f000 fec3 	bl	bc690 <finite>
   bb90a:	2800      	cmp	r0, #0
   bb90c:	d0c7      	beq.n	bb89e <pow+0x96>
   bb90e:	ec53 2b18 	vmov	r2, r3, d8
   bb912:	ee18 0a10 	vmov	r0, s16
   bb916:	4619      	mov	r1, r3
   bb918:	f001 fc52 	bl	bd1c0 <__aeabi_dcmpun>
   bb91c:	bb20      	cbnz	r0, bb968 <pow+0x160>
   bb91e:	f7fd f8ff 	bl	b8b20 <__errno>
   bb922:	4603      	mov	r3, r0
   bb924:	2222      	movs	r2, #34	; 0x22
   bb926:	601a      	str	r2, [r3, #0]
   bb928:	4630      	mov	r0, r6
   bb92a:	4639      	mov	r1, r7
   bb92c:	2200      	movs	r2, #0
   bb92e:	2300      	movs	r3, #0
   bb930:	f001 fc1e 	bl	bd170 <__aeabi_dcmplt>
   bb934:	b948      	cbnz	r0, bb94a <pow+0x142>
   bb936:	ed9f 8b18 	vldr	d8, [pc, #96]	; bb998 <pow+0x190>
   bb93a:	e7a2      	b.n	bb882 <pow+0x7a>
   bb93c:	f7fd f8f0 	bl	b8b20 <__errno>
   bb940:	2321      	movs	r3, #33	; 0x21
   bb942:	ed9f 8b17 	vldr	d8, [pc, #92]	; bb9a0 <pow+0x198>
   bb946:	6003      	str	r3, [r0, #0]
   bb948:	e79b      	b.n	bb882 <pow+0x7a>
   bb94a:	ec45 4b10 	vmov	d0, r4, r5
   bb94e:	f000 feb3 	bl	bc6b8 <rint>
   bb952:	4622      	mov	r2, r4
   bb954:	ec51 0b10 	vmov	r0, r1, d0
   bb958:	462b      	mov	r3, r5
   bb95a:	f001 fbff 	bl	bd15c <__aeabi_dcmpeq>
   bb95e:	2800      	cmp	r0, #0
   bb960:	d1e9      	bne.n	bb936 <pow+0x12e>
   bb962:	ed9f 8b0f 	vldr	d8, [pc, #60]	; bb9a0 <pow+0x198>
   bb966:	e78c      	b.n	bb882 <pow+0x7a>
   bb968:	f7fd f8da 	bl	b8b20 <__errno>
   bb96c:	2200      	movs	r2, #0
   bb96e:	2300      	movs	r3, #0
   bb970:	2121      	movs	r1, #33	; 0x21
   bb972:	6001      	str	r1, [r0, #0]
   bb974:	4610      	mov	r0, r2
   bb976:	4619      	mov	r1, r3
   bb978:	f001 fab2 	bl	bcee0 <__aeabi_ddiv>
   bb97c:	ec41 0b18 	vmov	d8, r0, r1
   bb980:	e77f      	b.n	bb882 <pow+0x7a>
   bb982:	bf00      	nop
   bb984:	f3af 8000 	nop.w
	...
   bb994:	3ff00000 	.word	0x3ff00000
   bb998:	00000000 	.word	0x00000000
   bb99c:	7ff00000 	.word	0x7ff00000
   bb9a0:	00000000 	.word	0x00000000
   bb9a4:	fff00000 	.word	0xfff00000
   bb9a8:	2003dedc 	.word	0x2003dedc
   bb9ac:	00000000 	.word	0x00000000

000bb9b0 <__ieee754_pow>:
   bb9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb9b4:	ec57 6b11 	vmov	r6, r7, d1
   bb9b8:	ed2d 8b0c 	vpush	{d8-d13}
   bb9bc:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   bb9c0:	ea5a 0206 	orrs.w	r2, sl, r6
   bb9c4:	b087      	sub	sp, #28
   bb9c6:	d03d      	beq.n	bba44 <__ieee754_pow+0x94>
   bb9c8:	ec55 4b10 	vmov	r4, r5, d0
   bb9cc:	4972      	ldr	r1, [pc, #456]	; (bbb98 <__ieee754_pow+0x1e8>)
   bb9ce:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   bb9d2:	4588      	cmp	r8, r1
   bb9d4:	ee10 2a10 	vmov	r2, s0
   bb9d8:	46a9      	mov	r9, r5
   bb9da:	dc2c      	bgt.n	bba36 <__ieee754_pow+0x86>
   bb9dc:	ee11 3a10 	vmov	r3, s2
   bb9e0:	46bb      	mov	fp, r7
   bb9e2:	d036      	beq.n	bba52 <__ieee754_pow+0xa2>
   bb9e4:	458a      	cmp	sl, r1
   bb9e6:	dc26      	bgt.n	bba36 <__ieee754_pow+0x86>
   bb9e8:	496b      	ldr	r1, [pc, #428]	; (bbb98 <__ieee754_pow+0x1e8>)
   bb9ea:	458a      	cmp	sl, r1
   bb9ec:	d021      	beq.n	bba32 <__ieee754_pow+0x82>
   bb9ee:	f1b9 0f00 	cmp.w	r9, #0
   bb9f2:	db39      	blt.n	bba68 <__ieee754_pow+0xb8>
   bb9f4:	2100      	movs	r1, #0
   bb9f6:	9100      	str	r1, [sp, #0]
   bb9f8:	2b00      	cmp	r3, #0
   bb9fa:	d151      	bne.n	bbaa0 <__ieee754_pow+0xf0>
   bb9fc:	4b66      	ldr	r3, [pc, #408]	; (bbb98 <__ieee754_pow+0x1e8>)
   bb9fe:	459a      	cmp	sl, r3
   bba00:	f000 80a2 	beq.w	bbb48 <__ieee754_pow+0x198>
   bba04:	4b65      	ldr	r3, [pc, #404]	; (bbb9c <__ieee754_pow+0x1ec>)
   bba06:	459a      	cmp	sl, r3
   bba08:	f000 80b0 	beq.w	bbb6c <__ieee754_pow+0x1bc>
   bba0c:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   bba10:	f000 84c0 	beq.w	bc394 <__ieee754_pow+0x9e4>
   bba14:	4b62      	ldr	r3, [pc, #392]	; (bbba0 <__ieee754_pow+0x1f0>)
   bba16:	459b      	cmp	fp, r3
   bba18:	d142      	bne.n	bbaa0 <__ieee754_pow+0xf0>
   bba1a:	f1b9 0f00 	cmp.w	r9, #0
   bba1e:	db3f      	blt.n	bbaa0 <__ieee754_pow+0xf0>
   bba20:	ec45 4b10 	vmov	d0, r4, r5
   bba24:	b007      	add	sp, #28
   bba26:	ecbd 8b0c 	vpop	{d8-d13}
   bba2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bba2e:	f000 bd59 	b.w	bc4e4 <__ieee754_sqrt>
   bba32:	2b00      	cmp	r3, #0
   bba34:	d0db      	beq.n	bb9ee <__ieee754_pow+0x3e>
   bba36:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bba3a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bba3e:	ea58 0302 	orrs.w	r3, r8, r2
   bba42:	d109      	bne.n	bba58 <__ieee754_pow+0xa8>
   bba44:	ed9f 0b50 	vldr	d0, [pc, #320]	; bbb88 <__ieee754_pow+0x1d8>
   bba48:	b007      	add	sp, #28
   bba4a:	ecbd 8b0c 	vpop	{d8-d13}
   bba4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bba52:	b90c      	cbnz	r4, bba58 <__ieee754_pow+0xa8>
   bba54:	45c2      	cmp	sl, r8
   bba56:	ddc7      	ble.n	bb9e8 <__ieee754_pow+0x38>
   bba58:	4852      	ldr	r0, [pc, #328]	; (bbba4 <__ieee754_pow+0x1f4>)
   bba5a:	b007      	add	sp, #28
   bba5c:	ecbd 8b0c 	vpop	{d8-d13}
   bba60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bba64:	f000 be20 	b.w	bc6a8 <nan>
   bba68:	494f      	ldr	r1, [pc, #316]	; (bbba8 <__ieee754_pow+0x1f8>)
   bba6a:	458a      	cmp	sl, r1
   bba6c:	f300 8085 	bgt.w	bbb7a <__ieee754_pow+0x1ca>
   bba70:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   bba74:	458a      	cmp	sl, r1
   bba76:	dd0f      	ble.n	bba98 <__ieee754_pow+0xe8>
   bba78:	ea4f 512a 	mov.w	r1, sl, asr #20
   bba7c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   bba80:	2914      	cmp	r1, #20
   bba82:	f340 849b 	ble.w	bc3bc <__ieee754_pow+0xa0c>
   bba86:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   bba8a:	fa23 f001 	lsr.w	r0, r3, r1
   bba8e:	fa00 f101 	lsl.w	r1, r0, r1
   bba92:	4299      	cmp	r1, r3
   bba94:	f000 84ed 	beq.w	bc472 <__ieee754_pow+0xac2>
   bba98:	2100      	movs	r1, #0
   bba9a:	9100      	str	r1, [sp, #0]
   bba9c:	2b00      	cmp	r3, #0
   bba9e:	d0b1      	beq.n	bba04 <__ieee754_pow+0x54>
   bbaa0:	ec45 4b10 	vmov	d0, r4, r5
   bbaa4:	9202      	str	r2, [sp, #8]
   bbaa6:	f000 fde9 	bl	bc67c <fabs>
   bbaaa:	9a02      	ldr	r2, [sp, #8]
   bbaac:	bb5a      	cbnz	r2, bbb06 <__ieee754_pow+0x156>
   bbaae:	f1b8 0f00 	cmp.w	r8, #0
   bbab2:	d004      	beq.n	bbabe <__ieee754_pow+0x10e>
   bbab4:	4b39      	ldr	r3, [pc, #228]	; (bbb9c <__ieee754_pow+0x1ec>)
   bbab6:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   bbaba:	429a      	cmp	r2, r3
   bbabc:	d123      	bne.n	bbb06 <__ieee754_pow+0x156>
   bbabe:	f1bb 0f00 	cmp.w	fp, #0
   bbac2:	da07      	bge.n	bbad4 <__ieee754_pow+0x124>
   bbac4:	ec53 2b10 	vmov	r2, r3, d0
   bbac8:	4934      	ldr	r1, [pc, #208]	; (bbb9c <__ieee754_pow+0x1ec>)
   bbaca:	2000      	movs	r0, #0
   bbacc:	f001 fa08 	bl	bcee0 <__aeabi_ddiv>
   bbad0:	ec41 0b10 	vmov	d0, r0, r1
   bbad4:	f1b9 0f00 	cmp.w	r9, #0
   bbad8:	dab6      	bge.n	bba48 <__ieee754_pow+0x98>
   bbada:	9b00      	ldr	r3, [sp, #0]
   bbadc:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   bbae0:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   bbae4:	ea58 0303 	orrs.w	r3, r8, r3
   bbae8:	f040 848d 	bne.w	bc406 <__ieee754_pow+0xa56>
   bbaec:	ec53 2b10 	vmov	r2, r3, d0
   bbaf0:	4610      	mov	r0, r2
   bbaf2:	4619      	mov	r1, r3
   bbaf4:	f000 ff12 	bl	bc91c <__aeabi_dsub>
   bbaf8:	4602      	mov	r2, r0
   bbafa:	460b      	mov	r3, r1
   bbafc:	f001 f9f0 	bl	bcee0 <__aeabi_ddiv>
   bbb00:	ec41 0b10 	vmov	d0, r0, r1
   bbb04:	e7a0      	b.n	bba48 <__ieee754_pow+0x98>
   bbb06:	9a00      	ldr	r2, [sp, #0]
   bbb08:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   bbb0c:	3b01      	subs	r3, #1
   bbb0e:	9304      	str	r3, [sp, #16]
   bbb10:	4313      	orrs	r3, r2
   bbb12:	d035      	beq.n	bbb80 <__ieee754_pow+0x1d0>
   bbb14:	4b25      	ldr	r3, [pc, #148]	; (bbbac <__ieee754_pow+0x1fc>)
   bbb16:	459a      	cmp	sl, r3
   bbb18:	dd4c      	ble.n	bbbb4 <__ieee754_pow+0x204>
   bbb1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   bbb1e:	459a      	cmp	sl, r3
   bbb20:	4b23      	ldr	r3, [pc, #140]	; (bbbb0 <__ieee754_pow+0x200>)
   bbb22:	f340 83db 	ble.w	bc2dc <__ieee754_pow+0x92c>
   bbb26:	4598      	cmp	r8, r3
   bbb28:	f340 8360 	ble.w	bc1ec <__ieee754_pow+0x83c>
   bbb2c:	f1bb 0f00 	cmp.w	fp, #0
   bbb30:	f340 8360 	ble.w	bc1f4 <__ieee754_pow+0x844>
   bbb34:	a316      	add	r3, pc, #88	; (adr r3, bbb90 <__ieee754_pow+0x1e0>)
   bbb36:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbb3a:	4610      	mov	r0, r2
   bbb3c:	4619      	mov	r1, r3
   bbb3e:	f001 f8a5 	bl	bcc8c <__aeabi_dmul>
   bbb42:	ec41 0b10 	vmov	d0, r0, r1
   bbb46:	e77f      	b.n	bba48 <__ieee754_pow+0x98>
   bbb48:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   bbb4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   bbb50:	4313      	orrs	r3, r2
   bbb52:	f43f af77 	beq.w	bba44 <__ieee754_pow+0x94>
   bbb56:	4b16      	ldr	r3, [pc, #88]	; (bbbb0 <__ieee754_pow+0x200>)
   bbb58:	4598      	cmp	r8, r3
   bbb5a:	f340 837a 	ble.w	bc252 <__ieee754_pow+0x8a2>
   bbb5e:	f1bb 0f00 	cmp.w	fp, #0
   bbb62:	f2c0 8347 	blt.w	bc1f4 <__ieee754_pow+0x844>
   bbb66:	ec47 6b10 	vmov	d0, r6, r7
   bbb6a:	e76d      	b.n	bba48 <__ieee754_pow+0x98>
   bbb6c:	f1bb 0f00 	cmp.w	fp, #0
   bbb70:	f2c0 841a 	blt.w	bc3a8 <__ieee754_pow+0x9f8>
   bbb74:	ec45 4b10 	vmov	d0, r4, r5
   bbb78:	e766      	b.n	bba48 <__ieee754_pow+0x98>
   bbb7a:	2102      	movs	r1, #2
   bbb7c:	9100      	str	r1, [sp, #0]
   bbb7e:	e73b      	b.n	bb9f8 <__ieee754_pow+0x48>
   bbb80:	4622      	mov	r2, r4
   bbb82:	462b      	mov	r3, r5
   bbb84:	e7b4      	b.n	bbaf0 <__ieee754_pow+0x140>
   bbb86:	bf00      	nop
   bbb88:	00000000 	.word	0x00000000
   bbb8c:	3ff00000 	.word	0x3ff00000
   bbb90:	8800759c 	.word	0x8800759c
   bbb94:	7e37e43c 	.word	0x7e37e43c
   bbb98:	7ff00000 	.word	0x7ff00000
   bbb9c:	3ff00000 	.word	0x3ff00000
   bbba0:	3fe00000 	.word	0x3fe00000
   bbba4:	000be970 	.word	0x000be970
   bbba8:	433fffff 	.word	0x433fffff
   bbbac:	41e00000 	.word	0x41e00000
   bbbb0:	3fefffff 	.word	0x3fefffff
   bbbb4:	4be4      	ldr	r3, [pc, #912]	; (bbf48 <__ieee754_pow+0x598>)
   bbbb6:	ea09 0303 	and.w	r3, r9, r3
   bbbba:	2200      	movs	r2, #0
   bbbbc:	b953      	cbnz	r3, bbbd4 <__ieee754_pow+0x224>
   bbbbe:	ec51 0b10 	vmov	r0, r1, d0
   bbbc2:	4be2      	ldr	r3, [pc, #904]	; (bbf4c <__ieee754_pow+0x59c>)
   bbbc4:	f001 f862 	bl	bcc8c <__aeabi_dmul>
   bbbc8:	ec41 0b10 	vmov	d0, r0, r1
   bbbcc:	ee10 8a90 	vmov	r8, s1
   bbbd0:	f06f 0234 	mvn.w	r2, #52	; 0x34
   bbbd4:	ea4f 5328 	mov.w	r3, r8, asr #20
   bbbd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   bbbdc:	189a      	adds	r2, r3, r2
   bbbde:	4bdc      	ldr	r3, [pc, #880]	; (bbf50 <__ieee754_pow+0x5a0>)
   bbbe0:	9205      	str	r2, [sp, #20]
   bbbe2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   bbbe6:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   bbbea:	4598      	cmp	r8, r3
   bbbec:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   bbbf0:	dd07      	ble.n	bbc02 <__ieee754_pow+0x252>
   bbbf2:	4bd8      	ldr	r3, [pc, #864]	; (bbf54 <__ieee754_pow+0x5a4>)
   bbbf4:	4598      	cmp	r8, r3
   bbbf6:	f340 8414 	ble.w	bc422 <__ieee754_pow+0xa72>
   bbbfa:	3201      	adds	r2, #1
   bbbfc:	9205      	str	r2, [sp, #20]
   bbbfe:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   bbc02:	ed9f 6bb9 	vldr	d6, [pc, #740]	; bbee8 <__ieee754_pow+0x538>
   bbc06:	ed9f 7bba 	vldr	d7, [pc, #744]	; bbef0 <__ieee754_pow+0x540>
   bbc0a:	ec53 2b16 	vmov	r2, r3, d6
   bbc0e:	eeb0 ca47 	vmov.f32	s24, s14
   bbc12:	eef0 ca67 	vmov.f32	s25, s15
   bbc16:	2500      	movs	r5, #0
   bbc18:	eeb0 da47 	vmov.f32	s26, s14
   bbc1c:	eef0 da67 	vmov.f32	s27, s15
   bbc20:	ec5b ab10 	vmov	sl, fp, d0
   bbc24:	46a3      	mov	fp, r4
   bbc26:	4650      	mov	r0, sl
   bbc28:	4659      	mov	r1, fp
   bbc2a:	ec43 2b1a 	vmov	d10, r2, r3
   bbc2e:	f000 fe75 	bl	bc91c <__aeabi_dsub>
   bbc32:	ec53 2b1a 	vmov	r2, r3, d10
   bbc36:	4680      	mov	r8, r0
   bbc38:	4689      	mov	r9, r1
   bbc3a:	4650      	mov	r0, sl
   bbc3c:	4659      	mov	r1, fp
   bbc3e:	f000 fe6f 	bl	bc920 <__adddf3>
   bbc42:	4602      	mov	r2, r0
   bbc44:	460b      	mov	r3, r1
   bbc46:	2000      	movs	r0, #0
   bbc48:	49c3      	ldr	r1, [pc, #780]	; (bbf58 <__ieee754_pow+0x5a8>)
   bbc4a:	f001 f949 	bl	bcee0 <__aeabi_ddiv>
   bbc4e:	ec41 0b1b 	vmov	d11, r0, r1
   bbc52:	4640      	mov	r0, r8
   bbc54:	ec53 2b1b 	vmov	r2, r3, d11
   bbc58:	4649      	mov	r1, r9
   bbc5a:	f001 f817 	bl	bcc8c <__aeabi_dmul>
   bbc5e:	ec41 0b18 	vmov	d8, r0, r1
   bbc62:	460a      	mov	r2, r1
   bbc64:	4601      	mov	r1, r0
   bbc66:	e9cd 1202 	strd	r1, r2, [sp, #8]
   bbc6a:	2100      	movs	r1, #0
   bbc6c:	9102      	str	r1, [sp, #8]
   bbc6e:	1064      	asrs	r4, r4, #1
   bbc70:	ec4b ab19 	vmov	d9, sl, fp
   bbc74:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   bbc78:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   bbc7c:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   bbc80:	2000      	movs	r0, #0
   bbc82:	1959      	adds	r1, r3, r5
   bbc84:	4604      	mov	r4, r0
   bbc86:	460d      	mov	r5, r1
   bbc88:	4602      	mov	r2, r0
   bbc8a:	460b      	mov	r3, r1
   bbc8c:	4650      	mov	r0, sl
   bbc8e:	4659      	mov	r1, fp
   bbc90:	f000 fffc 	bl	bcc8c <__aeabi_dmul>
   bbc94:	4602      	mov	r2, r0
   bbc96:	460b      	mov	r3, r1
   bbc98:	4640      	mov	r0, r8
   bbc9a:	4649      	mov	r1, r9
   bbc9c:	f000 fe3e 	bl	bc91c <__aeabi_dsub>
   bbca0:	ec53 2b1a 	vmov	r2, r3, d10
   bbca4:	4680      	mov	r8, r0
   bbca6:	4689      	mov	r9, r1
   bbca8:	4620      	mov	r0, r4
   bbcaa:	4629      	mov	r1, r5
   bbcac:	f000 fe36 	bl	bc91c <__aeabi_dsub>
   bbcb0:	4602      	mov	r2, r0
   bbcb2:	460b      	mov	r3, r1
   bbcb4:	ec51 0b19 	vmov	r0, r1, d9
   bbcb8:	f000 fe30 	bl	bc91c <__aeabi_dsub>
   bbcbc:	4652      	mov	r2, sl
   bbcbe:	465b      	mov	r3, fp
   bbcc0:	f000 ffe4 	bl	bcc8c <__aeabi_dmul>
   bbcc4:	4602      	mov	r2, r0
   bbcc6:	460b      	mov	r3, r1
   bbcc8:	4640      	mov	r0, r8
   bbcca:	4649      	mov	r1, r9
   bbccc:	f000 fe26 	bl	bc91c <__aeabi_dsub>
   bbcd0:	ec53 2b1b 	vmov	r2, r3, d11
   bbcd4:	f000 ffda 	bl	bcc8c <__aeabi_dmul>
   bbcd8:	ec53 2b18 	vmov	r2, r3, d8
   bbcdc:	ec41 0b19 	vmov	d9, r0, r1
   bbce0:	ec51 0b18 	vmov	r0, r1, d8
   bbce4:	f000 ffd2 	bl	bcc8c <__aeabi_dmul>
   bbce8:	a383      	add	r3, pc, #524	; (adr r3, bbef8 <__ieee754_pow+0x548>)
   bbcea:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbcee:	4604      	mov	r4, r0
   bbcf0:	460d      	mov	r5, r1
   bbcf2:	f000 ffcb 	bl	bcc8c <__aeabi_dmul>
   bbcf6:	a382      	add	r3, pc, #520	; (adr r3, bbf00 <__ieee754_pow+0x550>)
   bbcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbcfc:	f000 fe10 	bl	bc920 <__adddf3>
   bbd00:	4622      	mov	r2, r4
   bbd02:	462b      	mov	r3, r5
   bbd04:	f000 ffc2 	bl	bcc8c <__aeabi_dmul>
   bbd08:	a37f      	add	r3, pc, #508	; (adr r3, bbf08 <__ieee754_pow+0x558>)
   bbd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd0e:	f000 fe07 	bl	bc920 <__adddf3>
   bbd12:	4622      	mov	r2, r4
   bbd14:	462b      	mov	r3, r5
   bbd16:	f000 ffb9 	bl	bcc8c <__aeabi_dmul>
   bbd1a:	a37d      	add	r3, pc, #500	; (adr r3, bbf10 <__ieee754_pow+0x560>)
   bbd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd20:	f000 fdfe 	bl	bc920 <__adddf3>
   bbd24:	4622      	mov	r2, r4
   bbd26:	462b      	mov	r3, r5
   bbd28:	f000 ffb0 	bl	bcc8c <__aeabi_dmul>
   bbd2c:	a37a      	add	r3, pc, #488	; (adr r3, bbf18 <__ieee754_pow+0x568>)
   bbd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd32:	f000 fdf5 	bl	bc920 <__adddf3>
   bbd36:	4622      	mov	r2, r4
   bbd38:	462b      	mov	r3, r5
   bbd3a:	f000 ffa7 	bl	bcc8c <__aeabi_dmul>
   bbd3e:	a378      	add	r3, pc, #480	; (adr r3, bbf20 <__ieee754_pow+0x570>)
   bbd40:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbd44:	f000 fdec 	bl	bc920 <__adddf3>
   bbd48:	4622      	mov	r2, r4
   bbd4a:	4680      	mov	r8, r0
   bbd4c:	4689      	mov	r9, r1
   bbd4e:	462b      	mov	r3, r5
   bbd50:	4620      	mov	r0, r4
   bbd52:	4629      	mov	r1, r5
   bbd54:	f000 ff9a 	bl	bcc8c <__aeabi_dmul>
   bbd58:	4602      	mov	r2, r0
   bbd5a:	460b      	mov	r3, r1
   bbd5c:	4640      	mov	r0, r8
   bbd5e:	4649      	mov	r1, r9
   bbd60:	f000 ff94 	bl	bcc8c <__aeabi_dmul>
   bbd64:	4652      	mov	r2, sl
   bbd66:	4604      	mov	r4, r0
   bbd68:	460d      	mov	r5, r1
   bbd6a:	465b      	mov	r3, fp
   bbd6c:	ec51 0b18 	vmov	r0, r1, d8
   bbd70:	f000 fdd6 	bl	bc920 <__adddf3>
   bbd74:	ec53 2b19 	vmov	r2, r3, d9
   bbd78:	f000 ff88 	bl	bcc8c <__aeabi_dmul>
   bbd7c:	4622      	mov	r2, r4
   bbd7e:	462b      	mov	r3, r5
   bbd80:	f000 fdce 	bl	bc920 <__adddf3>
   bbd84:	4652      	mov	r2, sl
   bbd86:	4680      	mov	r8, r0
   bbd88:	4689      	mov	r9, r1
   bbd8a:	465b      	mov	r3, fp
   bbd8c:	4650      	mov	r0, sl
   bbd8e:	4659      	mov	r1, fp
   bbd90:	f000 ff7c 	bl	bcc8c <__aeabi_dmul>
   bbd94:	4602      	mov	r2, r0
   bbd96:	460b      	mov	r3, r1
   bbd98:	ec43 2b1a 	vmov	d10, r2, r3
   bbd9c:	4b6f      	ldr	r3, [pc, #444]	; (bbf5c <__ieee754_pow+0x5ac>)
   bbd9e:	2200      	movs	r2, #0
   bbda0:	f000 fdbe 	bl	bc920 <__adddf3>
   bbda4:	4642      	mov	r2, r8
   bbda6:	464b      	mov	r3, r9
   bbda8:	f000 fdba 	bl	bc920 <__adddf3>
   bbdac:	2400      	movs	r4, #0
   bbdae:	460d      	mov	r5, r1
   bbdb0:	4622      	mov	r2, r4
   bbdb2:	462b      	mov	r3, r5
   bbdb4:	4650      	mov	r0, sl
   bbdb6:	4659      	mov	r1, fp
   bbdb8:	f000 ff68 	bl	bcc8c <__aeabi_dmul>
   bbdbc:	4b67      	ldr	r3, [pc, #412]	; (bbf5c <__ieee754_pow+0x5ac>)
   bbdbe:	4682      	mov	sl, r0
   bbdc0:	468b      	mov	fp, r1
   bbdc2:	2200      	movs	r2, #0
   bbdc4:	4620      	mov	r0, r4
   bbdc6:	4629      	mov	r1, r5
   bbdc8:	f000 fda8 	bl	bc91c <__aeabi_dsub>
   bbdcc:	ec53 2b1a 	vmov	r2, r3, d10
   bbdd0:	f000 fda4 	bl	bc91c <__aeabi_dsub>
   bbdd4:	4602      	mov	r2, r0
   bbdd6:	460b      	mov	r3, r1
   bbdd8:	4640      	mov	r0, r8
   bbdda:	4649      	mov	r1, r9
   bbddc:	f000 fd9e 	bl	bc91c <__aeabi_dsub>
   bbde0:	ec53 2b18 	vmov	r2, r3, d8
   bbde4:	f000 ff52 	bl	bcc8c <__aeabi_dmul>
   bbde8:	4622      	mov	r2, r4
   bbdea:	462b      	mov	r3, r5
   bbdec:	4604      	mov	r4, r0
   bbdee:	460d      	mov	r5, r1
   bbdf0:	ec51 0b19 	vmov	r0, r1, d9
   bbdf4:	f000 ff4a 	bl	bcc8c <__aeabi_dmul>
   bbdf8:	4602      	mov	r2, r0
   bbdfa:	460b      	mov	r3, r1
   bbdfc:	4620      	mov	r0, r4
   bbdfe:	4629      	mov	r1, r5
   bbe00:	f000 fd8e 	bl	bc920 <__adddf3>
   bbe04:	4680      	mov	r8, r0
   bbe06:	4689      	mov	r9, r1
   bbe08:	4642      	mov	r2, r8
   bbe0a:	464b      	mov	r3, r9
   bbe0c:	4650      	mov	r0, sl
   bbe0e:	4659      	mov	r1, fp
   bbe10:	f000 fd86 	bl	bc920 <__adddf3>
   bbe14:	a344      	add	r3, pc, #272	; (adr r3, bbf28 <__ieee754_pow+0x578>)
   bbe16:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe1a:	2000      	movs	r0, #0
   bbe1c:	4604      	mov	r4, r0
   bbe1e:	460d      	mov	r5, r1
   bbe20:	f000 ff34 	bl	bcc8c <__aeabi_dmul>
   bbe24:	4652      	mov	r2, sl
   bbe26:	ec41 0b19 	vmov	d9, r0, r1
   bbe2a:	465b      	mov	r3, fp
   bbe2c:	4620      	mov	r0, r4
   bbe2e:	4629      	mov	r1, r5
   bbe30:	f000 fd74 	bl	bc91c <__aeabi_dsub>
   bbe34:	4602      	mov	r2, r0
   bbe36:	460b      	mov	r3, r1
   bbe38:	4640      	mov	r0, r8
   bbe3a:	4649      	mov	r1, r9
   bbe3c:	f000 fd6e 	bl	bc91c <__aeabi_dsub>
   bbe40:	a33b      	add	r3, pc, #236	; (adr r3, bbf30 <__ieee754_pow+0x580>)
   bbe42:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe46:	f000 ff21 	bl	bcc8c <__aeabi_dmul>
   bbe4a:	4602      	mov	r2, r0
   bbe4c:	460b      	mov	r3, r1
   bbe4e:	4620      	mov	r0, r4
   bbe50:	4629      	mov	r1, r5
   bbe52:	4614      	mov	r4, r2
   bbe54:	461d      	mov	r5, r3
   bbe56:	a338      	add	r3, pc, #224	; (adr r3, bbf38 <__ieee754_pow+0x588>)
   bbe58:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbe5c:	f000 ff16 	bl	bcc8c <__aeabi_dmul>
   bbe60:	4602      	mov	r2, r0
   bbe62:	460b      	mov	r3, r1
   bbe64:	4620      	mov	r0, r4
   bbe66:	4629      	mov	r1, r5
   bbe68:	f000 fd5a 	bl	bc920 <__adddf3>
   bbe6c:	ec53 2b1d 	vmov	r2, r3, d13
   bbe70:	f000 fd56 	bl	bc920 <__adddf3>
   bbe74:	4680      	mov	r8, r0
   bbe76:	9805      	ldr	r0, [sp, #20]
   bbe78:	4689      	mov	r9, r1
   bbe7a:	f000 fe9d 	bl	bcbb8 <__aeabi_i2d>
   bbe7e:	4642      	mov	r2, r8
   bbe80:	4682      	mov	sl, r0
   bbe82:	468b      	mov	fp, r1
   bbe84:	464b      	mov	r3, r9
   bbe86:	ec51 0b19 	vmov	r0, r1, d9
   bbe8a:	f000 fd49 	bl	bc920 <__adddf3>
   bbe8e:	ec53 2b1c 	vmov	r2, r3, d12
   bbe92:	f000 fd45 	bl	bc920 <__adddf3>
   bbe96:	4652      	mov	r2, sl
   bbe98:	465b      	mov	r3, fp
   bbe9a:	f000 fd41 	bl	bc920 <__adddf3>
   bbe9e:	4652      	mov	r2, sl
   bbea0:	465b      	mov	r3, fp
   bbea2:	2000      	movs	r0, #0
   bbea4:	4604      	mov	r4, r0
   bbea6:	460d      	mov	r5, r1
   bbea8:	f000 fd38 	bl	bc91c <__aeabi_dsub>
   bbeac:	ec53 2b1c 	vmov	r2, r3, d12
   bbeb0:	f000 fd34 	bl	bc91c <__aeabi_dsub>
   bbeb4:	ec53 2b19 	vmov	r2, r3, d9
   bbeb8:	f000 fd30 	bl	bc91c <__aeabi_dsub>
   bbebc:	4602      	mov	r2, r0
   bbebe:	460b      	mov	r3, r1
   bbec0:	4640      	mov	r0, r8
   bbec2:	4649      	mov	r1, r9
   bbec4:	f000 fd2a 	bl	bc91c <__aeabi_dsub>
   bbec8:	9b00      	ldr	r3, [sp, #0]
   bbeca:	9a04      	ldr	r2, [sp, #16]
   bbecc:	3b01      	subs	r3, #1
   bbece:	4313      	orrs	r3, r2
   bbed0:	4682      	mov	sl, r0
   bbed2:	468b      	mov	fp, r1
   bbed4:	f040 81b6 	bne.w	bc244 <__ieee754_pow+0x894>
   bbed8:	ed9f 7b19 	vldr	d7, [pc, #100]	; bbf40 <__ieee754_pow+0x590>
   bbedc:	eeb0 8a47 	vmov.f32	s16, s14
   bbee0:	eef0 8a67 	vmov.f32	s17, s15
   bbee4:	e03c      	b.n	bbf60 <__ieee754_pow+0x5b0>
   bbee6:	bf00      	nop
   bbee8:	00000000 	.word	0x00000000
   bbeec:	3ff00000 	.word	0x3ff00000
	...
   bbef8:	4a454eef 	.word	0x4a454eef
   bbefc:	3fca7e28 	.word	0x3fca7e28
   bbf00:	93c9db65 	.word	0x93c9db65
   bbf04:	3fcd864a 	.word	0x3fcd864a
   bbf08:	a91d4101 	.word	0xa91d4101
   bbf0c:	3fd17460 	.word	0x3fd17460
   bbf10:	518f264d 	.word	0x518f264d
   bbf14:	3fd55555 	.word	0x3fd55555
   bbf18:	db6fabff 	.word	0xdb6fabff
   bbf1c:	3fdb6db6 	.word	0x3fdb6db6
   bbf20:	33333303 	.word	0x33333303
   bbf24:	3fe33333 	.word	0x3fe33333
   bbf28:	e0000000 	.word	0xe0000000
   bbf2c:	3feec709 	.word	0x3feec709
   bbf30:	dc3a03fd 	.word	0xdc3a03fd
   bbf34:	3feec709 	.word	0x3feec709
   bbf38:	145b01f5 	.word	0x145b01f5
   bbf3c:	be3e2fe0 	.word	0xbe3e2fe0
   bbf40:	00000000 	.word	0x00000000
   bbf44:	bff00000 	.word	0xbff00000
   bbf48:	7ff00000 	.word	0x7ff00000
   bbf4c:	43400000 	.word	0x43400000
   bbf50:	0003988e 	.word	0x0003988e
   bbf54:	000bb679 	.word	0x000bb679
   bbf58:	3ff00000 	.word	0x3ff00000
   bbf5c:	40080000 	.word	0x40080000
   bbf60:	2300      	movs	r3, #0
   bbf62:	e9cd 6700 	strd	r6, r7, [sp]
   bbf66:	9300      	str	r3, [sp, #0]
   bbf68:	e9dd 8900 	ldrd	r8, r9, [sp]
   bbf6c:	4630      	mov	r0, r6
   bbf6e:	4642      	mov	r2, r8
   bbf70:	464b      	mov	r3, r9
   bbf72:	4639      	mov	r1, r7
   bbf74:	f000 fcd2 	bl	bc91c <__aeabi_dsub>
   bbf78:	4622      	mov	r2, r4
   bbf7a:	462b      	mov	r3, r5
   bbf7c:	f000 fe86 	bl	bcc8c <__aeabi_dmul>
   bbf80:	4632      	mov	r2, r6
   bbf82:	463b      	mov	r3, r7
   bbf84:	4606      	mov	r6, r0
   bbf86:	460f      	mov	r7, r1
   bbf88:	4650      	mov	r0, sl
   bbf8a:	4659      	mov	r1, fp
   bbf8c:	f000 fe7e 	bl	bcc8c <__aeabi_dmul>
   bbf90:	4602      	mov	r2, r0
   bbf92:	460b      	mov	r3, r1
   bbf94:	4630      	mov	r0, r6
   bbf96:	4639      	mov	r1, r7
   bbf98:	f000 fcc2 	bl	bc920 <__adddf3>
   bbf9c:	4642      	mov	r2, r8
   bbf9e:	464b      	mov	r3, r9
   bbfa0:	4606      	mov	r6, r0
   bbfa2:	460f      	mov	r7, r1
   bbfa4:	4620      	mov	r0, r4
   bbfa6:	4629      	mov	r1, r5
   bbfa8:	f000 fe70 	bl	bcc8c <__aeabi_dmul>
   bbfac:	4604      	mov	r4, r0
   bbfae:	460d      	mov	r5, r1
   bbfb0:	462b      	mov	r3, r5
   bbfb2:	4630      	mov	r0, r6
   bbfb4:	4639      	mov	r1, r7
   bbfb6:	4622      	mov	r2, r4
   bbfb8:	f000 fcb2 	bl	bc920 <__adddf3>
   bbfbc:	4bc2      	ldr	r3, [pc, #776]	; (bc2c8 <__ieee754_pow+0x918>)
   bbfbe:	4299      	cmp	r1, r3
   bbfc0:	4680      	mov	r8, r0
   bbfc2:	4689      	mov	r9, r1
   bbfc4:	468a      	mov	sl, r1
   bbfc6:	f340 8118 	ble.w	bc1fa <__ieee754_pow+0x84a>
   bbfca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   bbfce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   bbfd2:	4303      	orrs	r3, r0
   bbfd4:	f040 8207 	bne.w	bc3e6 <__ieee754_pow+0xa36>
   bbfd8:	a3a3      	add	r3, pc, #652	; (adr r3, bc268 <__ieee754_pow+0x8b8>)
   bbfda:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbfde:	4630      	mov	r0, r6
   bbfe0:	4639      	mov	r1, r7
   bbfe2:	f000 fc9d 	bl	bc920 <__adddf3>
   bbfe6:	4602      	mov	r2, r0
   bbfe8:	460b      	mov	r3, r1
   bbfea:	4640      	mov	r0, r8
   bbfec:	4649      	mov	r1, r9
   bbfee:	4690      	mov	r8, r2
   bbff0:	4699      	mov	r9, r3
   bbff2:	4622      	mov	r2, r4
   bbff4:	462b      	mov	r3, r5
   bbff6:	f000 fc91 	bl	bc91c <__aeabi_dsub>
   bbffa:	4602      	mov	r2, r0
   bbffc:	460b      	mov	r3, r1
   bbffe:	4640      	mov	r0, r8
   bc000:	4649      	mov	r1, r9
   bc002:	f001 f8d3 	bl	bd1ac <__aeabi_dcmpgt>
   bc006:	2800      	cmp	r0, #0
   bc008:	f040 81ed 	bne.w	bc3e6 <__ieee754_pow+0xa36>
   bc00c:	f3ca 530a 	ubfx	r3, sl, #20, #11
   bc010:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   bc014:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   bc018:	fa42 f303 	asr.w	r3, r2, r3
   bc01c:	4453      	add	r3, sl
   bc01e:	49ab      	ldr	r1, [pc, #684]	; (bc2cc <__ieee754_pow+0x91c>)
   bc020:	f3c3 520a 	ubfx	r2, r3, #20, #11
   bc024:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   bc028:	fa41 fc02 	asr.w	ip, r1, r2
   bc02c:	f3c3 0113 	ubfx	r1, r3, #0, #20
   bc030:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bc034:	f1c2 0214 	rsb	r2, r2, #20
   bc038:	fa41 f202 	asr.w	r2, r1, r2
   bc03c:	2000      	movs	r0, #0
   bc03e:	ea23 010c 	bic.w	r1, r3, ip
   bc042:	f1ba 0f00 	cmp.w	sl, #0
   bc046:	9200      	str	r2, [sp, #0]
   bc048:	460b      	mov	r3, r1
   bc04a:	4602      	mov	r2, r0
   bc04c:	da02      	bge.n	bc054 <__ieee754_pow+0x6a4>
   bc04e:	9900      	ldr	r1, [sp, #0]
   bc050:	4249      	negs	r1, r1
   bc052:	9100      	str	r1, [sp, #0]
   bc054:	4620      	mov	r0, r4
   bc056:	4629      	mov	r1, r5
   bc058:	f000 fc60 	bl	bc91c <__aeabi_dsub>
   bc05c:	9b00      	ldr	r3, [sp, #0]
   bc05e:	051b      	lsls	r3, r3, #20
   bc060:	9302      	str	r3, [sp, #8]
   bc062:	4602      	mov	r2, r0
   bc064:	460b      	mov	r3, r1
   bc066:	4604      	mov	r4, r0
   bc068:	460d      	mov	r5, r1
   bc06a:	4630      	mov	r0, r6
   bc06c:	4639      	mov	r1, r7
   bc06e:	f000 fc57 	bl	bc920 <__adddf3>
   bc072:	4689      	mov	r9, r1
   bc074:	f04f 0800 	mov.w	r8, #0
   bc078:	a37d      	add	r3, pc, #500	; (adr r3, bc270 <__ieee754_pow+0x8c0>)
   bc07a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc07e:	4640      	mov	r0, r8
   bc080:	4649      	mov	r1, r9
   bc082:	f000 fe03 	bl	bcc8c <__aeabi_dmul>
   bc086:	4622      	mov	r2, r4
   bc088:	462b      	mov	r3, r5
   bc08a:	4682      	mov	sl, r0
   bc08c:	468b      	mov	fp, r1
   bc08e:	4640      	mov	r0, r8
   bc090:	4649      	mov	r1, r9
   bc092:	f000 fc43 	bl	bc91c <__aeabi_dsub>
   bc096:	4602      	mov	r2, r0
   bc098:	460b      	mov	r3, r1
   bc09a:	4630      	mov	r0, r6
   bc09c:	4639      	mov	r1, r7
   bc09e:	f000 fc3d 	bl	bc91c <__aeabi_dsub>
   bc0a2:	a375      	add	r3, pc, #468	; (adr r3, bc278 <__ieee754_pow+0x8c8>)
   bc0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc0a8:	f000 fdf0 	bl	bcc8c <__aeabi_dmul>
   bc0ac:	a374      	add	r3, pc, #464	; (adr r3, bc280 <__ieee754_pow+0x8d0>)
   bc0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc0b2:	4604      	mov	r4, r0
   bc0b4:	460d      	mov	r5, r1
   bc0b6:	4640      	mov	r0, r8
   bc0b8:	4649      	mov	r1, r9
   bc0ba:	f000 fde7 	bl	bcc8c <__aeabi_dmul>
   bc0be:	4602      	mov	r2, r0
   bc0c0:	460b      	mov	r3, r1
   bc0c2:	4620      	mov	r0, r4
   bc0c4:	4629      	mov	r1, r5
   bc0c6:	f000 fc2b 	bl	bc920 <__adddf3>
   bc0ca:	4606      	mov	r6, r0
   bc0cc:	460f      	mov	r7, r1
   bc0ce:	4632      	mov	r2, r6
   bc0d0:	463b      	mov	r3, r7
   bc0d2:	4650      	mov	r0, sl
   bc0d4:	4659      	mov	r1, fp
   bc0d6:	f000 fc23 	bl	bc920 <__adddf3>
   bc0da:	4652      	mov	r2, sl
   bc0dc:	465b      	mov	r3, fp
   bc0de:	4604      	mov	r4, r0
   bc0e0:	460d      	mov	r5, r1
   bc0e2:	f000 fc1b 	bl	bc91c <__aeabi_dsub>
   bc0e6:	4602      	mov	r2, r0
   bc0e8:	460b      	mov	r3, r1
   bc0ea:	4630      	mov	r0, r6
   bc0ec:	4639      	mov	r1, r7
   bc0ee:	f000 fc15 	bl	bc91c <__aeabi_dsub>
   bc0f2:	4622      	mov	r2, r4
   bc0f4:	4680      	mov	r8, r0
   bc0f6:	4689      	mov	r9, r1
   bc0f8:	462b      	mov	r3, r5
   bc0fa:	4620      	mov	r0, r4
   bc0fc:	4629      	mov	r1, r5
   bc0fe:	f000 fdc5 	bl	bcc8c <__aeabi_dmul>
   bc102:	a361      	add	r3, pc, #388	; (adr r3, bc288 <__ieee754_pow+0x8d8>)
   bc104:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc108:	4606      	mov	r6, r0
   bc10a:	460f      	mov	r7, r1
   bc10c:	f000 fdbe 	bl	bcc8c <__aeabi_dmul>
   bc110:	a35f      	add	r3, pc, #380	; (adr r3, bc290 <__ieee754_pow+0x8e0>)
   bc112:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc116:	f000 fc01 	bl	bc91c <__aeabi_dsub>
   bc11a:	4632      	mov	r2, r6
   bc11c:	463b      	mov	r3, r7
   bc11e:	f000 fdb5 	bl	bcc8c <__aeabi_dmul>
   bc122:	a35d      	add	r3, pc, #372	; (adr r3, bc298 <__ieee754_pow+0x8e8>)
   bc124:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc128:	f000 fbfa 	bl	bc920 <__adddf3>
   bc12c:	4632      	mov	r2, r6
   bc12e:	463b      	mov	r3, r7
   bc130:	f000 fdac 	bl	bcc8c <__aeabi_dmul>
   bc134:	a35a      	add	r3, pc, #360	; (adr r3, bc2a0 <__ieee754_pow+0x8f0>)
   bc136:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc13a:	f000 fbef 	bl	bc91c <__aeabi_dsub>
   bc13e:	4632      	mov	r2, r6
   bc140:	463b      	mov	r3, r7
   bc142:	f000 fda3 	bl	bcc8c <__aeabi_dmul>
   bc146:	a358      	add	r3, pc, #352	; (adr r3, bc2a8 <__ieee754_pow+0x8f8>)
   bc148:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc14c:	f000 fbe8 	bl	bc920 <__adddf3>
   bc150:	4632      	mov	r2, r6
   bc152:	463b      	mov	r3, r7
   bc154:	f000 fd9a 	bl	bcc8c <__aeabi_dmul>
   bc158:	4602      	mov	r2, r0
   bc15a:	460b      	mov	r3, r1
   bc15c:	4620      	mov	r0, r4
   bc15e:	4629      	mov	r1, r5
   bc160:	f000 fbdc 	bl	bc91c <__aeabi_dsub>
   bc164:	4606      	mov	r6, r0
   bc166:	460f      	mov	r7, r1
   bc168:	4632      	mov	r2, r6
   bc16a:	463b      	mov	r3, r7
   bc16c:	4620      	mov	r0, r4
   bc16e:	4629      	mov	r1, r5
   bc170:	f000 fd8c 	bl	bcc8c <__aeabi_dmul>
   bc174:	4602      	mov	r2, r0
   bc176:	460b      	mov	r3, r1
   bc178:	4630      	mov	r0, r6
   bc17a:	4639      	mov	r1, r7
   bc17c:	4616      	mov	r6, r2
   bc17e:	461f      	mov	r7, r3
   bc180:	2200      	movs	r2, #0
   bc182:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc186:	f000 fbc9 	bl	bc91c <__aeabi_dsub>
   bc18a:	4602      	mov	r2, r0
   bc18c:	460b      	mov	r3, r1
   bc18e:	4630      	mov	r0, r6
   bc190:	4639      	mov	r1, r7
   bc192:	f000 fea5 	bl	bcee0 <__aeabi_ddiv>
   bc196:	4642      	mov	r2, r8
   bc198:	4606      	mov	r6, r0
   bc19a:	460f      	mov	r7, r1
   bc19c:	464b      	mov	r3, r9
   bc19e:	4620      	mov	r0, r4
   bc1a0:	4629      	mov	r1, r5
   bc1a2:	f000 fd73 	bl	bcc8c <__aeabi_dmul>
   bc1a6:	4642      	mov	r2, r8
   bc1a8:	464b      	mov	r3, r9
   bc1aa:	f000 fbb9 	bl	bc920 <__adddf3>
   bc1ae:	4602      	mov	r2, r0
   bc1b0:	460b      	mov	r3, r1
   bc1b2:	4630      	mov	r0, r6
   bc1b4:	4639      	mov	r1, r7
   bc1b6:	f000 fbb1 	bl	bc91c <__aeabi_dsub>
   bc1ba:	4622      	mov	r2, r4
   bc1bc:	462b      	mov	r3, r5
   bc1be:	f000 fbad 	bl	bc91c <__aeabi_dsub>
   bc1c2:	4602      	mov	r2, r0
   bc1c4:	460b      	mov	r3, r1
   bc1c6:	2000      	movs	r0, #0
   bc1c8:	4941      	ldr	r1, [pc, #260]	; (bc2d0 <__ieee754_pow+0x920>)
   bc1ca:	f000 fba7 	bl	bc91c <__aeabi_dsub>
   bc1ce:	9a02      	ldr	r2, [sp, #8]
   bc1d0:	460b      	mov	r3, r1
   bc1d2:	4413      	add	r3, r2
   bc1d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   bc1d8:	f2c0 8143 	blt.w	bc462 <__ieee754_pow+0xab2>
   bc1dc:	4619      	mov	r1, r3
   bc1de:	ec53 2b18 	vmov	r2, r3, d8
   bc1e2:	f000 fd53 	bl	bcc8c <__aeabi_dmul>
   bc1e6:	ec41 0b10 	vmov	d0, r0, r1
   bc1ea:	e42d      	b.n	bba48 <__ieee754_pow+0x98>
   bc1ec:	f1bb 0f00 	cmp.w	fp, #0
   bc1f0:	f6ff aca0 	blt.w	bbb34 <__ieee754_pow+0x184>
   bc1f4:	ed9f 0b2e 	vldr	d0, [pc, #184]	; bc2b0 <__ieee754_pow+0x900>
   bc1f8:	e426      	b.n	bba48 <__ieee754_pow+0x98>
   bc1fa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; bc2d8 <__ieee754_pow+0x928>
   bc1fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bc202:	4563      	cmp	r3, ip
   bc204:	f340 80e7 	ble.w	bc3d6 <__ieee754_pow+0xa26>
   bc208:	4b32      	ldr	r3, [pc, #200]	; (bc2d4 <__ieee754_pow+0x924>)
   bc20a:	440b      	add	r3, r1
   bc20c:	4303      	orrs	r3, r0
   bc20e:	d10a      	bne.n	bc226 <__ieee754_pow+0x876>
   bc210:	4622      	mov	r2, r4
   bc212:	462b      	mov	r3, r5
   bc214:	f000 fb82 	bl	bc91c <__aeabi_dsub>
   bc218:	4632      	mov	r2, r6
   bc21a:	463b      	mov	r3, r7
   bc21c:	f000 ffbc 	bl	bd198 <__aeabi_dcmpge>
   bc220:	2800      	cmp	r0, #0
   bc222:	f43f aef3 	beq.w	bc00c <__ieee754_pow+0x65c>
   bc226:	a324      	add	r3, pc, #144	; (adr r3, bc2b8 <__ieee754_pow+0x908>)
   bc228:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc22c:	ec51 0b18 	vmov	r0, r1, d8
   bc230:	f000 fd2c 	bl	bcc8c <__aeabi_dmul>
   bc234:	a320      	add	r3, pc, #128	; (adr r3, bc2b8 <__ieee754_pow+0x908>)
   bc236:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc23a:	f000 fd27 	bl	bcc8c <__aeabi_dmul>
   bc23e:	ec41 0b10 	vmov	d0, r0, r1
   bc242:	e401      	b.n	bba48 <__ieee754_pow+0x98>
   bc244:	ed9f 7b1e 	vldr	d7, [pc, #120]	; bc2c0 <__ieee754_pow+0x910>
   bc248:	eeb0 8a47 	vmov.f32	s16, s14
   bc24c:	eef0 8a67 	vmov.f32	s17, s15
   bc250:	e686      	b.n	bbf60 <__ieee754_pow+0x5b0>
   bc252:	f1bb 0f00 	cmp.w	fp, #0
   bc256:	dacd      	bge.n	bc1f4 <__ieee754_pow+0x844>
   bc258:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   bc25c:	ee00 6a10 	vmov	s0, r6
   bc260:	ee00 3a90 	vmov	s1, r3
   bc264:	f7ff bbf0 	b.w	bba48 <__ieee754_pow+0x98>
   bc268:	652b82fe 	.word	0x652b82fe
   bc26c:	3c971547 	.word	0x3c971547
   bc270:	00000000 	.word	0x00000000
   bc274:	3fe62e43 	.word	0x3fe62e43
   bc278:	fefa39ef 	.word	0xfefa39ef
   bc27c:	3fe62e42 	.word	0x3fe62e42
   bc280:	0ca86c39 	.word	0x0ca86c39
   bc284:	be205c61 	.word	0xbe205c61
   bc288:	72bea4d0 	.word	0x72bea4d0
   bc28c:	3e663769 	.word	0x3e663769
   bc290:	c5d26bf1 	.word	0xc5d26bf1
   bc294:	3ebbbd41 	.word	0x3ebbbd41
   bc298:	af25de2c 	.word	0xaf25de2c
   bc29c:	3f11566a 	.word	0x3f11566a
   bc2a0:	16bebd93 	.word	0x16bebd93
   bc2a4:	3f66c16c 	.word	0x3f66c16c
   bc2a8:	5555553e 	.word	0x5555553e
   bc2ac:	3fc55555 	.word	0x3fc55555
	...
   bc2b8:	c2f8f359 	.word	0xc2f8f359
   bc2bc:	01a56e1f 	.word	0x01a56e1f
   bc2c0:	00000000 	.word	0x00000000
   bc2c4:	3ff00000 	.word	0x3ff00000
   bc2c8:	408fffff 	.word	0x408fffff
   bc2cc:	000fffff 	.word	0x000fffff
   bc2d0:	3ff00000 	.word	0x3ff00000
   bc2d4:	3f6f3400 	.word	0x3f6f3400
   bc2d8:	4090cbff 	.word	0x4090cbff
   bc2dc:	4598      	cmp	r8, r3
   bc2de:	db85      	blt.n	bc1ec <__ieee754_pow+0x83c>
   bc2e0:	4b7d      	ldr	r3, [pc, #500]	; (bc4d8 <__ieee754_pow+0xb28>)
   bc2e2:	4598      	cmp	r8, r3
   bc2e4:	f73f ac22 	bgt.w	bbb2c <__ieee754_pow+0x17c>
   bc2e8:	ec51 0b10 	vmov	r0, r1, d0
   bc2ec:	4b7a      	ldr	r3, [pc, #488]	; (bc4d8 <__ieee754_pow+0xb28>)
   bc2ee:	2200      	movs	r2, #0
   bc2f0:	f000 fb14 	bl	bc91c <__aeabi_dsub>
   bc2f4:	a368      	add	r3, pc, #416	; (adr r3, bc498 <__ieee754_pow+0xae8>)
   bc2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc2fa:	4604      	mov	r4, r0
   bc2fc:	460d      	mov	r5, r1
   bc2fe:	f000 fcc5 	bl	bcc8c <__aeabi_dmul>
   bc302:	a367      	add	r3, pc, #412	; (adr r3, bc4a0 <__ieee754_pow+0xaf0>)
   bc304:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc308:	4682      	mov	sl, r0
   bc30a:	468b      	mov	fp, r1
   bc30c:	4620      	mov	r0, r4
   bc30e:	4629      	mov	r1, r5
   bc310:	f000 fcbc 	bl	bcc8c <__aeabi_dmul>
   bc314:	4b71      	ldr	r3, [pc, #452]	; (bc4dc <__ieee754_pow+0xb2c>)
   bc316:	ec41 0b18 	vmov	d8, r0, r1
   bc31a:	2200      	movs	r2, #0
   bc31c:	4620      	mov	r0, r4
   bc31e:	4629      	mov	r1, r5
   bc320:	f000 fcb4 	bl	bcc8c <__aeabi_dmul>
   bc324:	4602      	mov	r2, r0
   bc326:	460b      	mov	r3, r1
   bc328:	a15f      	add	r1, pc, #380	; (adr r1, bc4a8 <__ieee754_pow+0xaf8>)
   bc32a:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc32e:	f000 faf5 	bl	bc91c <__aeabi_dsub>
   bc332:	4622      	mov	r2, r4
   bc334:	462b      	mov	r3, r5
   bc336:	f000 fca9 	bl	bcc8c <__aeabi_dmul>
   bc33a:	4602      	mov	r2, r0
   bc33c:	460b      	mov	r3, r1
   bc33e:	2000      	movs	r0, #0
   bc340:	4967      	ldr	r1, [pc, #412]	; (bc4e0 <__ieee754_pow+0xb30>)
   bc342:	f000 faeb 	bl	bc91c <__aeabi_dsub>
   bc346:	4622      	mov	r2, r4
   bc348:	4680      	mov	r8, r0
   bc34a:	4689      	mov	r9, r1
   bc34c:	462b      	mov	r3, r5
   bc34e:	4620      	mov	r0, r4
   bc350:	4629      	mov	r1, r5
   bc352:	f000 fc9b 	bl	bcc8c <__aeabi_dmul>
   bc356:	4602      	mov	r2, r0
   bc358:	460b      	mov	r3, r1
   bc35a:	4640      	mov	r0, r8
   bc35c:	4649      	mov	r1, r9
   bc35e:	f000 fc95 	bl	bcc8c <__aeabi_dmul>
   bc362:	a353      	add	r3, pc, #332	; (adr r3, bc4b0 <__ieee754_pow+0xb00>)
   bc364:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc368:	f000 fc90 	bl	bcc8c <__aeabi_dmul>
   bc36c:	4602      	mov	r2, r0
   bc36e:	460b      	mov	r3, r1
   bc370:	ec51 0b18 	vmov	r0, r1, d8
   bc374:	f000 fad2 	bl	bc91c <__aeabi_dsub>
   bc378:	4680      	mov	r8, r0
   bc37a:	4689      	mov	r9, r1
   bc37c:	4642      	mov	r2, r8
   bc37e:	464b      	mov	r3, r9
   bc380:	4650      	mov	r0, sl
   bc382:	4659      	mov	r1, fp
   bc384:	f000 facc 	bl	bc920 <__adddf3>
   bc388:	2000      	movs	r0, #0
   bc38a:	4652      	mov	r2, sl
   bc38c:	465b      	mov	r3, fp
   bc38e:	4604      	mov	r4, r0
   bc390:	460d      	mov	r5, r1
   bc392:	e591      	b.n	bbeb8 <__ieee754_pow+0x508>
   bc394:	4622      	mov	r2, r4
   bc396:	462b      	mov	r3, r5
   bc398:	4620      	mov	r0, r4
   bc39a:	4629      	mov	r1, r5
   bc39c:	f000 fc76 	bl	bcc8c <__aeabi_dmul>
   bc3a0:	ec41 0b10 	vmov	d0, r0, r1
   bc3a4:	f7ff bb50 	b.w	bba48 <__ieee754_pow+0x98>
   bc3a8:	494b      	ldr	r1, [pc, #300]	; (bc4d8 <__ieee754_pow+0xb28>)
   bc3aa:	2000      	movs	r0, #0
   bc3ac:	4622      	mov	r2, r4
   bc3ae:	462b      	mov	r3, r5
   bc3b0:	f000 fd96 	bl	bcee0 <__aeabi_ddiv>
   bc3b4:	ec41 0b10 	vmov	d0, r0, r1
   bc3b8:	f7ff bb46 	b.w	bba48 <__ieee754_pow+0x98>
   bc3bc:	2b00      	cmp	r3, #0
   bc3be:	d144      	bne.n	bc44a <__ieee754_pow+0xa9a>
   bc3c0:	f1c1 0114 	rsb	r1, r1, #20
   bc3c4:	fa4a f001 	asr.w	r0, sl, r1
   bc3c8:	fa00 f101 	lsl.w	r1, r0, r1
   bc3cc:	4551      	cmp	r1, sl
   bc3ce:	d05a      	beq.n	bc486 <__ieee754_pow+0xad6>
   bc3d0:	9300      	str	r3, [sp, #0]
   bc3d2:	f7ff bb17 	b.w	bba04 <__ieee754_pow+0x54>
   bc3d6:	4a42      	ldr	r2, [pc, #264]	; (bc4e0 <__ieee754_pow+0xb30>)
   bc3d8:	4293      	cmp	r3, r2
   bc3da:	dc5b      	bgt.n	bc494 <__ieee754_pow+0xae4>
   bc3dc:	e9dd 1200 	ldrd	r1, r2, [sp]
   bc3e0:	9102      	str	r1, [sp, #8]
   bc3e2:	9100      	str	r1, [sp, #0]
   bc3e4:	e646      	b.n	bc074 <__ieee754_pow+0x6c4>
   bc3e6:	a334      	add	r3, pc, #208	; (adr r3, bc4b8 <__ieee754_pow+0xb08>)
   bc3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc3ec:	ec51 0b18 	vmov	r0, r1, d8
   bc3f0:	f000 fc4c 	bl	bcc8c <__aeabi_dmul>
   bc3f4:	a330      	add	r3, pc, #192	; (adr r3, bc4b8 <__ieee754_pow+0xb08>)
   bc3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc3fa:	f000 fc47 	bl	bcc8c <__aeabi_dmul>
   bc3fe:	ec41 0b10 	vmov	d0, r0, r1
   bc402:	f7ff bb21 	b.w	bba48 <__ieee754_pow+0x98>
   bc406:	9b00      	ldr	r3, [sp, #0]
   bc408:	2b01      	cmp	r3, #1
   bc40a:	f47f ab1d 	bne.w	bba48 <__ieee754_pow+0x98>
   bc40e:	ee10 1a90 	vmov	r1, s1
   bc412:	ee10 2a10 	vmov	r2, s0
   bc416:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc41a:	ec43 2b10 	vmov	d0, r2, r3
   bc41e:	f7ff bb13 	b.w	bba48 <__ieee754_pow+0x98>
   bc422:	ed9f 7b27 	vldr	d7, [pc, #156]	; bc4c0 <__ieee754_pow+0xb10>
   bc426:	eeb0 ca47 	vmov.f32	s24, s14
   bc42a:	eef0 ca67 	vmov.f32	s25, s15
   bc42e:	ed9f 7b26 	vldr	d7, [pc, #152]	; bc4c8 <__ieee754_pow+0xb18>
   bc432:	eeb0 da47 	vmov.f32	s26, s14
   bc436:	eef0 da67 	vmov.f32	s27, s15
   bc43a:	ed9f 7b25 	vldr	d7, [pc, #148]	; bc4d0 <__ieee754_pow+0xb20>
   bc43e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   bc442:	ec53 2b17 	vmov	r2, r3, d7
   bc446:	f7ff bbeb 	b.w	bbc20 <__ieee754_pow+0x270>
   bc44a:	ec45 4b10 	vmov	d0, r4, r5
   bc44e:	9200      	str	r2, [sp, #0]
   bc450:	f000 f914 	bl	bc67c <fabs>
   bc454:	9a00      	ldr	r2, [sp, #0]
   bc456:	2a00      	cmp	r2, #0
   bc458:	f47f ab92 	bne.w	bbb80 <__ieee754_pow+0x1d0>
   bc45c:	9200      	str	r2, [sp, #0]
   bc45e:	f7ff bb26 	b.w	bbaae <__ieee754_pow+0xfe>
   bc462:	ec41 0b10 	vmov	d0, r0, r1
   bc466:	9800      	ldr	r0, [sp, #0]
   bc468:	f000 f9c2 	bl	bc7f0 <scalbn>
   bc46c:	ec51 0b10 	vmov	r0, r1, d0
   bc470:	e6b5      	b.n	bc1de <__ieee754_pow+0x82e>
   bc472:	f000 0001 	and.w	r0, r0, #1
   bc476:	f1c0 0102 	rsb	r1, r0, #2
   bc47a:	9100      	str	r1, [sp, #0]
   bc47c:	2b00      	cmp	r3, #0
   bc47e:	f43f aac1 	beq.w	bba04 <__ieee754_pow+0x54>
   bc482:	f7ff bb0d 	b.w	bbaa0 <__ieee754_pow+0xf0>
   bc486:	f000 0001 	and.w	r0, r0, #1
   bc48a:	f1c0 0302 	rsb	r3, r0, #2
   bc48e:	9300      	str	r3, [sp, #0]
   bc490:	f7ff bab8 	b.w	bba04 <__ieee754_pow+0x54>
   bc494:	151b      	asrs	r3, r3, #20
   bc496:	e5bb      	b.n	bc010 <__ieee754_pow+0x660>
   bc498:	60000000 	.word	0x60000000
   bc49c:	3ff71547 	.word	0x3ff71547
   bc4a0:	f85ddf44 	.word	0xf85ddf44
   bc4a4:	3e54ae0b 	.word	0x3e54ae0b
   bc4a8:	55555555 	.word	0x55555555
   bc4ac:	3fd55555 	.word	0x3fd55555
   bc4b0:	652b82fe 	.word	0x652b82fe
   bc4b4:	3ff71547 	.word	0x3ff71547
   bc4b8:	8800759c 	.word	0x8800759c
   bc4bc:	7e37e43c 	.word	0x7e37e43c
   bc4c0:	40000000 	.word	0x40000000
   bc4c4:	3fe2b803 	.word	0x3fe2b803
   bc4c8:	43cfd006 	.word	0x43cfd006
   bc4cc:	3e4cfdeb 	.word	0x3e4cfdeb
   bc4d0:	00000000 	.word	0x00000000
   bc4d4:	3ff80000 	.word	0x3ff80000
   bc4d8:	3ff00000 	.word	0x3ff00000
   bc4dc:	3fd00000 	.word	0x3fd00000
   bc4e0:	3fe00000 	.word	0x3fe00000

000bc4e4 <__ieee754_sqrt>:
   bc4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc4e8:	4a63      	ldr	r2, [pc, #396]	; (bc678 <__ieee754_sqrt+0x194>)
   bc4ea:	ec55 4b10 	vmov	r4, r5, d0
   bc4ee:	43aa      	bics	r2, r5
   bc4f0:	f000 809f 	beq.w	bc632 <__ieee754_sqrt+0x14e>
   bc4f4:	2d00      	cmp	r5, #0
   bc4f6:	ee10 ca10 	vmov	ip, s0
   bc4fa:	462b      	mov	r3, r5
   bc4fc:	dd54      	ble.n	bc5a8 <__ieee754_sqrt+0xc4>
   bc4fe:	1529      	asrs	r1, r5, #20
   bc500:	d063      	beq.n	bc5ca <__ieee754_sqrt+0xe6>
   bc502:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bc506:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   bc50a:	07c9      	lsls	r1, r1, #31
   bc50c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc510:	d404      	bmi.n	bc51c <__ieee754_sqrt+0x38>
   bc512:	005b      	lsls	r3, r3, #1
   bc514:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc518:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc51c:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   bc520:	2600      	movs	r6, #0
   bc522:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   bc526:	107f      	asrs	r7, r7, #1
   bc528:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc52c:	f04f 0e16 	mov.w	lr, #22
   bc530:	4634      	mov	r4, r6
   bc532:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   bc536:	18a1      	adds	r1, r4, r2
   bc538:	4299      	cmp	r1, r3
   bc53a:	dc02      	bgt.n	bc542 <__ieee754_sqrt+0x5e>
   bc53c:	1a5b      	subs	r3, r3, r1
   bc53e:	188c      	adds	r4, r1, r2
   bc540:	4416      	add	r6, r2
   bc542:	005b      	lsls	r3, r3, #1
   bc544:	f1be 0e01 	subs.w	lr, lr, #1
   bc548:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   bc54c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc550:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc554:	d1ef      	bne.n	bc536 <__ieee754_sqrt+0x52>
   bc556:	4675      	mov	r5, lr
   bc558:	2020      	movs	r0, #32
   bc55a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   bc55e:	e00a      	b.n	bc576 <__ieee754_sqrt+0x92>
   bc560:	d044      	beq.n	bc5ec <__ieee754_sqrt+0x108>
   bc562:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   bc566:	3801      	subs	r0, #1
   bc568:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   bc56c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   bc570:	ea4f 0252 	mov.w	r2, r2, lsr #1
   bc574:	d043      	beq.n	bc5fe <__ieee754_sqrt+0x11a>
   bc576:	42a3      	cmp	r3, r4
   bc578:	eb02 010e 	add.w	r1, r2, lr
   bc57c:	ddf0      	ble.n	bc560 <__ieee754_sqrt+0x7c>
   bc57e:	2900      	cmp	r1, #0
   bc580:	eb01 0e02 	add.w	lr, r1, r2
   bc584:	db0a      	blt.n	bc59c <__ieee754_sqrt+0xb8>
   bc586:	46a0      	mov	r8, r4
   bc588:	1b1b      	subs	r3, r3, r4
   bc58a:	4561      	cmp	r1, ip
   bc58c:	bf88      	it	hi
   bc58e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   bc592:	ebac 0c01 	sub.w	ip, ip, r1
   bc596:	4415      	add	r5, r2
   bc598:	4644      	mov	r4, r8
   bc59a:	e7e2      	b.n	bc562 <__ieee754_sqrt+0x7e>
   bc59c:	f1be 0f00 	cmp.w	lr, #0
   bc5a0:	dbf1      	blt.n	bc586 <__ieee754_sqrt+0xa2>
   bc5a2:	f104 0801 	add.w	r8, r4, #1
   bc5a6:	e7ef      	b.n	bc588 <__ieee754_sqrt+0xa4>
   bc5a8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   bc5ac:	4322      	orrs	r2, r4
   bc5ae:	d038      	beq.n	bc622 <__ieee754_sqrt+0x13e>
   bc5b0:	2d00      	cmp	r5, #0
   bc5b2:	d14e      	bne.n	bc652 <__ieee754_sqrt+0x16e>
   bc5b4:	4629      	mov	r1, r5
   bc5b6:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   bc5ba:	3915      	subs	r1, #21
   bc5bc:	4613      	mov	r3, r2
   bc5be:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   bc5c2:	2a00      	cmp	r2, #0
   bc5c4:	d0f7      	beq.n	bc5b6 <__ieee754_sqrt+0xd2>
   bc5c6:	02d6      	lsls	r6, r2, #11
   bc5c8:	d450      	bmi.n	bc66c <__ieee754_sqrt+0x188>
   bc5ca:	2000      	movs	r0, #0
   bc5cc:	005b      	lsls	r3, r3, #1
   bc5ce:	02dd      	lsls	r5, r3, #11
   bc5d0:	4604      	mov	r4, r0
   bc5d2:	f100 0001 	add.w	r0, r0, #1
   bc5d6:	d5f9      	bpl.n	bc5cc <__ieee754_sqrt+0xe8>
   bc5d8:	461a      	mov	r2, r3
   bc5da:	4663      	mov	r3, ip
   bc5dc:	fa0c fc00 	lsl.w	ip, ip, r0
   bc5e0:	f1c0 0020 	rsb	r0, r0, #32
   bc5e4:	40c3      	lsrs	r3, r0
   bc5e6:	1b09      	subs	r1, r1, r4
   bc5e8:	4313      	orrs	r3, r2
   bc5ea:	e78a      	b.n	bc502 <__ieee754_sqrt+0x1e>
   bc5ec:	4561      	cmp	r1, ip
   bc5ee:	d8b8      	bhi.n	bc562 <__ieee754_sqrt+0x7e>
   bc5f0:	2900      	cmp	r1, #0
   bc5f2:	eb01 0e02 	add.w	lr, r1, r2
   bc5f6:	dbd1      	blt.n	bc59c <__ieee754_sqrt+0xb8>
   bc5f8:	4698      	mov	r8, r3
   bc5fa:	2300      	movs	r3, #0
   bc5fc:	e7c9      	b.n	bc592 <__ieee754_sqrt+0xae>
   bc5fe:	ea53 030c 	orrs.w	r3, r3, ip
   bc602:	d110      	bne.n	bc626 <__ieee754_sqrt+0x142>
   bc604:	0868      	lsrs	r0, r5, #1
   bc606:	1071      	asrs	r1, r6, #1
   bc608:	07f3      	lsls	r3, r6, #31
   bc60a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   bc60e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   bc612:	bf48      	it	mi
   bc614:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   bc618:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   bc61c:	4602      	mov	r2, r0
   bc61e:	ec43 2b10 	vmov	d0, r2, r3
   bc622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc626:	1c6a      	adds	r2, r5, #1
   bc628:	bf16      	itet	ne
   bc62a:	1c68      	addne	r0, r5, #1
   bc62c:	3601      	addeq	r6, #1
   bc62e:	0840      	lsrne	r0, r0, #1
   bc630:	e7e9      	b.n	bc606 <__ieee754_sqrt+0x122>
   bc632:	ee10 2a10 	vmov	r2, s0
   bc636:	ee10 0a10 	vmov	r0, s0
   bc63a:	462b      	mov	r3, r5
   bc63c:	4629      	mov	r1, r5
   bc63e:	f000 fb25 	bl	bcc8c <__aeabi_dmul>
   bc642:	4622      	mov	r2, r4
   bc644:	462b      	mov	r3, r5
   bc646:	f000 f96b 	bl	bc920 <__adddf3>
   bc64a:	ec41 0b10 	vmov	d0, r0, r1
   bc64e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc652:	ee10 2a10 	vmov	r2, s0
   bc656:	4620      	mov	r0, r4
   bc658:	4629      	mov	r1, r5
   bc65a:	f000 f95f 	bl	bc91c <__aeabi_dsub>
   bc65e:	4602      	mov	r2, r0
   bc660:	460b      	mov	r3, r1
   bc662:	f000 fc3d 	bl	bcee0 <__aeabi_ddiv>
   bc666:	ec41 0b10 	vmov	d0, r0, r1
   bc66a:	e7da      	b.n	bc622 <__ieee754_sqrt+0x13e>
   bc66c:	4663      	mov	r3, ip
   bc66e:	2020      	movs	r0, #32
   bc670:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bc674:	e7b6      	b.n	bc5e4 <__ieee754_sqrt+0x100>
   bc676:	bf00      	nop
   bc678:	7ff00000 	.word	0x7ff00000

000bc67c <fabs>:
   bc67c:	ec51 0b10 	vmov	r0, r1, d0
   bc680:	ee10 2a10 	vmov	r2, s0
   bc684:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   bc688:	ec43 2b10 	vmov	d0, r2, r3
   bc68c:	4770      	bx	lr
   bc68e:	bf00      	nop

000bc690 <finite>:
   bc690:	b082      	sub	sp, #8
   bc692:	ed8d 0b00 	vstr	d0, [sp]
   bc696:	9801      	ldr	r0, [sp, #4]
   bc698:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   bc69c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   bc6a0:	0fc0      	lsrs	r0, r0, #31
   bc6a2:	b002      	add	sp, #8
   bc6a4:	4770      	bx	lr
   bc6a6:	bf00      	nop

000bc6a8 <nan>:
   bc6a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc6b0 <nan+0x8>
   bc6ac:	4770      	bx	lr
   bc6ae:	bf00      	nop
   bc6b0:	00000000 	.word	0x00000000
   bc6b4:	7ff80000 	.word	0x7ff80000

000bc6b8 <rint>:
   bc6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc6ba:	ec53 2b10 	vmov	r2, r3, d0
   bc6be:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   bc6c2:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   bc6c6:	2913      	cmp	r1, #19
   bc6c8:	ee10 0a10 	vmov	r0, s0
   bc6cc:	b083      	sub	sp, #12
   bc6ce:	461c      	mov	r4, r3
   bc6d0:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   bc6d4:	dc3a      	bgt.n	bc74c <rint+0x94>
   bc6d6:	2900      	cmp	r1, #0
   bc6d8:	db30      	blt.n	bc73c <rint+0x84>
   bc6da:	4d42      	ldr	r5, [pc, #264]	; (bc7e4 <rint+0x12c>)
   bc6dc:	fa45 fc01 	asr.w	ip, r5, r1
   bc6e0:	ea03 050c 	and.w	r5, r3, ip
   bc6e4:	4315      	orrs	r5, r2
   bc6e6:	d02d      	beq.n	bc744 <rint+0x8c>
   bc6e8:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   bc6ec:	4318      	orrs	r0, r3
   bc6ee:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   bc6f2:	d00c      	beq.n	bc70e <rint+0x56>
   bc6f4:	ea24 0c0c 	bic.w	ip, r4, ip
   bc6f8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   bc6fc:	2913      	cmp	r1, #19
   bc6fe:	fa44 f101 	asr.w	r1, r4, r1
   bc702:	bf0c      	ite	eq
   bc704:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   bc708:	2000      	movne	r0, #0
   bc70a:	ea4c 0401 	orr.w	r4, ip, r1
   bc70e:	4936      	ldr	r1, [pc, #216]	; (bc7e8 <rint+0x130>)
   bc710:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   bc714:	4623      	mov	r3, r4
   bc716:	e9de 4500 	ldrd	r4, r5, [lr]
   bc71a:	4602      	mov	r2, r0
   bc71c:	4629      	mov	r1, r5
   bc71e:	4620      	mov	r0, r4
   bc720:	f000 f8fe 	bl	bc920 <__adddf3>
   bc724:	e9cd 0100 	strd	r0, r1, [sp]
   bc728:	e9dd 0100 	ldrd	r0, r1, [sp]
   bc72c:	4622      	mov	r2, r4
   bc72e:	462b      	mov	r3, r5
   bc730:	f000 f8f4 	bl	bc91c <__aeabi_dsub>
   bc734:	ec41 0b10 	vmov	d0, r0, r1
   bc738:	b003      	add	sp, #12
   bc73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc73c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   bc740:	4311      	orrs	r1, r2
   bc742:	d124      	bne.n	bc78e <rint+0xd6>
   bc744:	ec43 2b10 	vmov	d0, r2, r3
   bc748:	b003      	add	sp, #12
   bc74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc74c:	2933      	cmp	r1, #51	; 0x33
   bc74e:	dd08      	ble.n	bc762 <rint+0xaa>
   bc750:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   bc754:	d1f6      	bne.n	bc744 <rint+0x8c>
   bc756:	4619      	mov	r1, r3
   bc758:	f000 f8e2 	bl	bc920 <__adddf3>
   bc75c:	ec41 0b10 	vmov	d0, r0, r1
   bc760:	e7f2      	b.n	bc748 <rint+0x90>
   bc762:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   bc766:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bc76a:	fa21 f10c 	lsr.w	r1, r1, ip
   bc76e:	420a      	tst	r2, r1
   bc770:	d0e8      	beq.n	bc744 <rint+0x8c>
   bc772:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   bc776:	ea4f 0351 	mov.w	r3, r1, lsr #1
   bc77a:	d0c8      	beq.n	bc70e <rint+0x56>
   bc77c:	ea20 0303 	bic.w	r3, r0, r3
   bc780:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   bc784:	fa40 fc0c 	asr.w	ip, r0, ip
   bc788:	ea43 000c 	orr.w	r0, r3, ip
   bc78c:	e7bf      	b.n	bc70e <rint+0x56>
   bc78e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   bc792:	4318      	orrs	r0, r3
   bc794:	4a14      	ldr	r2, [pc, #80]	; (bc7e8 <rint+0x130>)
   bc796:	4243      	negs	r3, r0
   bc798:	4303      	orrs	r3, r0
   bc79a:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   bc79e:	0b1b      	lsrs	r3, r3, #12
   bc7a0:	0c62      	lsrs	r2, r4, #17
   bc7a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   bc7a6:	0452      	lsls	r2, r2, #17
   bc7a8:	ea43 0702 	orr.w	r7, r3, r2
   bc7ac:	463b      	mov	r3, r7
   bc7ae:	e9de 6700 	ldrd	r6, r7, [lr]
   bc7b2:	ee10 2a10 	vmov	r2, s0
   bc7b6:	4630      	mov	r0, r6
   bc7b8:	4639      	mov	r1, r7
   bc7ba:	f000 f8b1 	bl	bc920 <__adddf3>
   bc7be:	e9cd 0100 	strd	r0, r1, [sp]
   bc7c2:	4632      	mov	r2, r6
   bc7c4:	463b      	mov	r3, r7
   bc7c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   bc7ca:	f000 f8a7 	bl	bc91c <__aeabi_dsub>
   bc7ce:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   bc7d2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bc7d6:	4602      	mov	r2, r0
   bc7d8:	ea41 0304 	orr.w	r3, r1, r4
   bc7dc:	ec43 2b10 	vmov	d0, r2, r3
   bc7e0:	b003      	add	sp, #12
   bc7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc7e4:	000fffff 	.word	0x000fffff
   bc7e8:	000be978 	.word	0x000be978
   bc7ec:	00000000 	.word	0x00000000

000bc7f0 <scalbn>:
   bc7f0:	b538      	push	{r3, r4, r5, lr}
   bc7f2:	ec53 2b10 	vmov	r2, r3, d0
   bc7f6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   bc7fa:	4604      	mov	r4, r0
   bc7fc:	469c      	mov	ip, r3
   bc7fe:	bb89      	cbnz	r1, bc864 <scalbn+0x74>
   bc800:	ee10 1a10 	vmov	r1, s0
   bc804:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   bc808:	ea5c 0101 	orrs.w	r1, ip, r1
   bc80c:	d029      	beq.n	bc862 <scalbn+0x72>
   bc80e:	4619      	mov	r1, r3
   bc810:	2200      	movs	r2, #0
   bc812:	4b3d      	ldr	r3, [pc, #244]	; (bc908 <scalbn+0x118>)
   bc814:	4d3d      	ldr	r5, [pc, #244]	; (bc90c <scalbn+0x11c>)
   bc816:	ee10 0a10 	vmov	r0, s0
   bc81a:	f000 fa37 	bl	bcc8c <__aeabi_dmul>
   bc81e:	42ac      	cmp	r4, r5
   bc820:	4602      	mov	r2, r0
   bc822:	460b      	mov	r3, r1
   bc824:	db16      	blt.n	bc854 <scalbn+0x64>
   bc826:	468c      	mov	ip, r1
   bc828:	f3c1 510a 	ubfx	r1, r1, #20, #11
   bc82c:	3936      	subs	r1, #54	; 0x36
   bc82e:	4421      	add	r1, r4
   bc830:	f240 70fe 	movw	r0, #2046	; 0x7fe
   bc834:	4281      	cmp	r1, r0
   bc836:	dc21      	bgt.n	bc87c <scalbn+0x8c>
   bc838:	2900      	cmp	r1, #0
   bc83a:	dc47      	bgt.n	bc8cc <scalbn+0xdc>
   bc83c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   bc840:	da34      	bge.n	bc8ac <scalbn+0xbc>
   bc842:	f24c 3150 	movw	r1, #50000	; 0xc350
   bc846:	428c      	cmp	r4, r1
   bc848:	dc18      	bgt.n	bc87c <scalbn+0x8c>
   bc84a:	2b00      	cmp	r3, #0
   bc84c:	a126      	add	r1, pc, #152	; (adr r1, bc8e8 <scalbn+0xf8>)
   bc84e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc852:	db44      	blt.n	bc8de <scalbn+0xee>
   bc854:	a324      	add	r3, pc, #144	; (adr r3, bc8e8 <scalbn+0xf8>)
   bc856:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc85a:	f000 fa17 	bl	bcc8c <__aeabi_dmul>
   bc85e:	ec41 0b10 	vmov	d0, r0, r1
   bc862:	bd38      	pop	{r3, r4, r5, pc}
   bc864:	f240 70ff 	movw	r0, #2047	; 0x7ff
   bc868:	4281      	cmp	r1, r0
   bc86a:	d1e0      	bne.n	bc82e <scalbn+0x3e>
   bc86c:	ee10 0a10 	vmov	r0, s0
   bc870:	4619      	mov	r1, r3
   bc872:	f000 f855 	bl	bc920 <__adddf3>
   bc876:	ec41 0b10 	vmov	d0, r0, r1
   bc87a:	bd38      	pop	{r3, r4, r5, pc}
   bc87c:	2b00      	cmp	r3, #0
   bc87e:	a11c      	add	r1, pc, #112	; (adr r1, bc8f0 <scalbn+0x100>)
   bc880:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc884:	db07      	blt.n	bc896 <scalbn+0xa6>
   bc886:	a31a      	add	r3, pc, #104	; (adr r3, bc8f0 <scalbn+0x100>)
   bc888:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc88c:	f000 f9fe 	bl	bcc8c <__aeabi_dmul>
   bc890:	ec41 0b10 	vmov	d0, r0, r1
   bc894:	bd38      	pop	{r3, r4, r5, pc}
   bc896:	a118      	add	r1, pc, #96	; (adr r1, bc8f8 <scalbn+0x108>)
   bc898:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc89c:	a314      	add	r3, pc, #80	; (adr r3, bc8f0 <scalbn+0x100>)
   bc89e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc8a2:	f000 f9f3 	bl	bcc8c <__aeabi_dmul>
   bc8a6:	ec41 0b10 	vmov	d0, r0, r1
   bc8aa:	e7f3      	b.n	bc894 <scalbn+0xa4>
   bc8ac:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bc8b0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bc8b4:	3136      	adds	r1, #54	; 0x36
   bc8b6:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bc8ba:	4610      	mov	r0, r2
   bc8bc:	4619      	mov	r1, r3
   bc8be:	2200      	movs	r2, #0
   bc8c0:	4b13      	ldr	r3, [pc, #76]	; (bc910 <scalbn+0x120>)
   bc8c2:	f000 f9e3 	bl	bcc8c <__aeabi_dmul>
   bc8c6:	ec41 0b10 	vmov	d0, r0, r1
   bc8ca:	bd38      	pop	{r3, r4, r5, pc}
   bc8cc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   bc8d0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   bc8d4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   bc8d8:	ec43 2b10 	vmov	d0, r2, r3
   bc8dc:	bd38      	pop	{r3, r4, r5, pc}
   bc8de:	a108      	add	r1, pc, #32	; (adr r1, bc900 <scalbn+0x110>)
   bc8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc8e4:	e7b6      	b.n	bc854 <scalbn+0x64>
   bc8e6:	bf00      	nop
   bc8e8:	c2f8f359 	.word	0xc2f8f359
   bc8ec:	01a56e1f 	.word	0x01a56e1f
   bc8f0:	8800759c 	.word	0x8800759c
   bc8f4:	7e37e43c 	.word	0x7e37e43c
   bc8f8:	8800759c 	.word	0x8800759c
   bc8fc:	fe37e43c 	.word	0xfe37e43c
   bc900:	c2f8f359 	.word	0xc2f8f359
   bc904:	81a56e1f 	.word	0x81a56e1f
   bc908:	43500000 	.word	0x43500000
   bc90c:	ffff3cb0 	.word	0xffff3cb0
   bc910:	3c900000 	.word	0x3c900000

000bc914 <__aeabi_drsub>:
   bc914:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bc918:	e002      	b.n	bc920 <__adddf3>
   bc91a:	bf00      	nop

000bc91c <__aeabi_dsub>:
   bc91c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bc920 <__adddf3>:
   bc920:	b530      	push	{r4, r5, lr}
   bc922:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bc926:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bc92a:	ea94 0f05 	teq	r4, r5
   bc92e:	bf08      	it	eq
   bc930:	ea90 0f02 	teqeq	r0, r2
   bc934:	bf1f      	itttt	ne
   bc936:	ea54 0c00 	orrsne.w	ip, r4, r0
   bc93a:	ea55 0c02 	orrsne.w	ip, r5, r2
   bc93e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bc942:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bc946:	f000 80e2 	beq.w	bcb0e <__adddf3+0x1ee>
   bc94a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bc94e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bc952:	bfb8      	it	lt
   bc954:	426d      	neglt	r5, r5
   bc956:	dd0c      	ble.n	bc972 <__adddf3+0x52>
   bc958:	442c      	add	r4, r5
   bc95a:	ea80 0202 	eor.w	r2, r0, r2
   bc95e:	ea81 0303 	eor.w	r3, r1, r3
   bc962:	ea82 0000 	eor.w	r0, r2, r0
   bc966:	ea83 0101 	eor.w	r1, r3, r1
   bc96a:	ea80 0202 	eor.w	r2, r0, r2
   bc96e:	ea81 0303 	eor.w	r3, r1, r3
   bc972:	2d36      	cmp	r5, #54	; 0x36
   bc974:	bf88      	it	hi
   bc976:	bd30      	pophi	{r4, r5, pc}
   bc978:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bc97c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bc980:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bc984:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bc988:	d002      	beq.n	bc990 <__adddf3+0x70>
   bc98a:	4240      	negs	r0, r0
   bc98c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bc990:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bc994:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bc998:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bc99c:	d002      	beq.n	bc9a4 <__adddf3+0x84>
   bc99e:	4252      	negs	r2, r2
   bc9a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bc9a4:	ea94 0f05 	teq	r4, r5
   bc9a8:	f000 80a7 	beq.w	bcafa <__adddf3+0x1da>
   bc9ac:	f1a4 0401 	sub.w	r4, r4, #1
   bc9b0:	f1d5 0e20 	rsbs	lr, r5, #32
   bc9b4:	db0d      	blt.n	bc9d2 <__adddf3+0xb2>
   bc9b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   bc9ba:	fa22 f205 	lsr.w	r2, r2, r5
   bc9be:	1880      	adds	r0, r0, r2
   bc9c0:	f141 0100 	adc.w	r1, r1, #0
   bc9c4:	fa03 f20e 	lsl.w	r2, r3, lr
   bc9c8:	1880      	adds	r0, r0, r2
   bc9ca:	fa43 f305 	asr.w	r3, r3, r5
   bc9ce:	4159      	adcs	r1, r3
   bc9d0:	e00e      	b.n	bc9f0 <__adddf3+0xd0>
   bc9d2:	f1a5 0520 	sub.w	r5, r5, #32
   bc9d6:	f10e 0e20 	add.w	lr, lr, #32
   bc9da:	2a01      	cmp	r2, #1
   bc9dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   bc9e0:	bf28      	it	cs
   bc9e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   bc9e6:	fa43 f305 	asr.w	r3, r3, r5
   bc9ea:	18c0      	adds	r0, r0, r3
   bc9ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bc9f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bc9f4:	d507      	bpl.n	bca06 <__adddf3+0xe6>
   bc9f6:	f04f 0e00 	mov.w	lr, #0
   bc9fa:	f1dc 0c00 	rsbs	ip, ip, #0
   bc9fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   bca02:	eb6e 0101 	sbc.w	r1, lr, r1
   bca06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bca0a:	d31b      	bcc.n	bca44 <__adddf3+0x124>
   bca0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bca10:	d30c      	bcc.n	bca2c <__adddf3+0x10c>
   bca12:	0849      	lsrs	r1, r1, #1
   bca14:	ea5f 0030 	movs.w	r0, r0, rrx
   bca18:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bca1c:	f104 0401 	add.w	r4, r4, #1
   bca20:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bca24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bca28:	f080 809a 	bcs.w	bcb60 <__adddf3+0x240>
   bca2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bca30:	bf08      	it	eq
   bca32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bca36:	f150 0000 	adcs.w	r0, r0, #0
   bca3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bca3e:	ea41 0105 	orr.w	r1, r1, r5
   bca42:	bd30      	pop	{r4, r5, pc}
   bca44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bca48:	4140      	adcs	r0, r0
   bca4a:	eb41 0101 	adc.w	r1, r1, r1
   bca4e:	3c01      	subs	r4, #1
   bca50:	bf28      	it	cs
   bca52:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bca56:	d2e9      	bcs.n	bca2c <__adddf3+0x10c>
   bca58:	f091 0f00 	teq	r1, #0
   bca5c:	bf04      	itt	eq
   bca5e:	4601      	moveq	r1, r0
   bca60:	2000      	moveq	r0, #0
   bca62:	fab1 f381 	clz	r3, r1
   bca66:	bf08      	it	eq
   bca68:	3320      	addeq	r3, #32
   bca6a:	f1a3 030b 	sub.w	r3, r3, #11
   bca6e:	f1b3 0220 	subs.w	r2, r3, #32
   bca72:	da0c      	bge.n	bca8e <__adddf3+0x16e>
   bca74:	320c      	adds	r2, #12
   bca76:	dd08      	ble.n	bca8a <__adddf3+0x16a>
   bca78:	f102 0c14 	add.w	ip, r2, #20
   bca7c:	f1c2 020c 	rsb	r2, r2, #12
   bca80:	fa01 f00c 	lsl.w	r0, r1, ip
   bca84:	fa21 f102 	lsr.w	r1, r1, r2
   bca88:	e00c      	b.n	bcaa4 <__adddf3+0x184>
   bca8a:	f102 0214 	add.w	r2, r2, #20
   bca8e:	bfd8      	it	le
   bca90:	f1c2 0c20 	rsble	ip, r2, #32
   bca94:	fa01 f102 	lsl.w	r1, r1, r2
   bca98:	fa20 fc0c 	lsr.w	ip, r0, ip
   bca9c:	bfdc      	itt	le
   bca9e:	ea41 010c 	orrle.w	r1, r1, ip
   bcaa2:	4090      	lslle	r0, r2
   bcaa4:	1ae4      	subs	r4, r4, r3
   bcaa6:	bfa2      	ittt	ge
   bcaa8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bcaac:	4329      	orrge	r1, r5
   bcaae:	bd30      	popge	{r4, r5, pc}
   bcab0:	ea6f 0404 	mvn.w	r4, r4
   bcab4:	3c1f      	subs	r4, #31
   bcab6:	da1c      	bge.n	bcaf2 <__adddf3+0x1d2>
   bcab8:	340c      	adds	r4, #12
   bcaba:	dc0e      	bgt.n	bcada <__adddf3+0x1ba>
   bcabc:	f104 0414 	add.w	r4, r4, #20
   bcac0:	f1c4 0220 	rsb	r2, r4, #32
   bcac4:	fa20 f004 	lsr.w	r0, r0, r4
   bcac8:	fa01 f302 	lsl.w	r3, r1, r2
   bcacc:	ea40 0003 	orr.w	r0, r0, r3
   bcad0:	fa21 f304 	lsr.w	r3, r1, r4
   bcad4:	ea45 0103 	orr.w	r1, r5, r3
   bcad8:	bd30      	pop	{r4, r5, pc}
   bcada:	f1c4 040c 	rsb	r4, r4, #12
   bcade:	f1c4 0220 	rsb	r2, r4, #32
   bcae2:	fa20 f002 	lsr.w	r0, r0, r2
   bcae6:	fa01 f304 	lsl.w	r3, r1, r4
   bcaea:	ea40 0003 	orr.w	r0, r0, r3
   bcaee:	4629      	mov	r1, r5
   bcaf0:	bd30      	pop	{r4, r5, pc}
   bcaf2:	fa21 f004 	lsr.w	r0, r1, r4
   bcaf6:	4629      	mov	r1, r5
   bcaf8:	bd30      	pop	{r4, r5, pc}
   bcafa:	f094 0f00 	teq	r4, #0
   bcafe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bcb02:	bf06      	itte	eq
   bcb04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bcb08:	3401      	addeq	r4, #1
   bcb0a:	3d01      	subne	r5, #1
   bcb0c:	e74e      	b.n	bc9ac <__adddf3+0x8c>
   bcb0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bcb12:	bf18      	it	ne
   bcb14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bcb18:	d029      	beq.n	bcb6e <__adddf3+0x24e>
   bcb1a:	ea94 0f05 	teq	r4, r5
   bcb1e:	bf08      	it	eq
   bcb20:	ea90 0f02 	teqeq	r0, r2
   bcb24:	d005      	beq.n	bcb32 <__adddf3+0x212>
   bcb26:	ea54 0c00 	orrs.w	ip, r4, r0
   bcb2a:	bf04      	itt	eq
   bcb2c:	4619      	moveq	r1, r3
   bcb2e:	4610      	moveq	r0, r2
   bcb30:	bd30      	pop	{r4, r5, pc}
   bcb32:	ea91 0f03 	teq	r1, r3
   bcb36:	bf1e      	ittt	ne
   bcb38:	2100      	movne	r1, #0
   bcb3a:	2000      	movne	r0, #0
   bcb3c:	bd30      	popne	{r4, r5, pc}
   bcb3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bcb42:	d105      	bne.n	bcb50 <__adddf3+0x230>
   bcb44:	0040      	lsls	r0, r0, #1
   bcb46:	4149      	adcs	r1, r1
   bcb48:	bf28      	it	cs
   bcb4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bcb4e:	bd30      	pop	{r4, r5, pc}
   bcb50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bcb54:	bf3c      	itt	cc
   bcb56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bcb5a:	bd30      	popcc	{r4, r5, pc}
   bcb5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bcb60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bcb64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bcb68:	f04f 0000 	mov.w	r0, #0
   bcb6c:	bd30      	pop	{r4, r5, pc}
   bcb6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bcb72:	bf1a      	itte	ne
   bcb74:	4619      	movne	r1, r3
   bcb76:	4610      	movne	r0, r2
   bcb78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bcb7c:	bf1c      	itt	ne
   bcb7e:	460b      	movne	r3, r1
   bcb80:	4602      	movne	r2, r0
   bcb82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bcb86:	bf06      	itte	eq
   bcb88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bcb8c:	ea91 0f03 	teqeq	r1, r3
   bcb90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bcb94:	bd30      	pop	{r4, r5, pc}
   bcb96:	bf00      	nop

000bcb98 <__aeabi_ui2d>:
   bcb98:	f090 0f00 	teq	r0, #0
   bcb9c:	bf04      	itt	eq
   bcb9e:	2100      	moveq	r1, #0
   bcba0:	4770      	bxeq	lr
   bcba2:	b530      	push	{r4, r5, lr}
   bcba4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bcba8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bcbac:	f04f 0500 	mov.w	r5, #0
   bcbb0:	f04f 0100 	mov.w	r1, #0
   bcbb4:	e750      	b.n	bca58 <__adddf3+0x138>
   bcbb6:	bf00      	nop

000bcbb8 <__aeabi_i2d>:
   bcbb8:	f090 0f00 	teq	r0, #0
   bcbbc:	bf04      	itt	eq
   bcbbe:	2100      	moveq	r1, #0
   bcbc0:	4770      	bxeq	lr
   bcbc2:	b530      	push	{r4, r5, lr}
   bcbc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bcbc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bcbcc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bcbd0:	bf48      	it	mi
   bcbd2:	4240      	negmi	r0, r0
   bcbd4:	f04f 0100 	mov.w	r1, #0
   bcbd8:	e73e      	b.n	bca58 <__adddf3+0x138>
   bcbda:	bf00      	nop

000bcbdc <__aeabi_f2d>:
   bcbdc:	0042      	lsls	r2, r0, #1
   bcbde:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bcbe2:	ea4f 0131 	mov.w	r1, r1, rrx
   bcbe6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bcbea:	bf1f      	itttt	ne
   bcbec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bcbf0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bcbf4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bcbf8:	4770      	bxne	lr
   bcbfa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bcbfe:	bf08      	it	eq
   bcc00:	4770      	bxeq	lr
   bcc02:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bcc06:	bf04      	itt	eq
   bcc08:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bcc0c:	4770      	bxeq	lr
   bcc0e:	b530      	push	{r4, r5, lr}
   bcc10:	f44f 7460 	mov.w	r4, #896	; 0x380
   bcc14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bcc18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bcc1c:	e71c      	b.n	bca58 <__adddf3+0x138>
   bcc1e:	bf00      	nop

000bcc20 <__aeabi_ul2d>:
   bcc20:	ea50 0201 	orrs.w	r2, r0, r1
   bcc24:	bf08      	it	eq
   bcc26:	4770      	bxeq	lr
   bcc28:	b530      	push	{r4, r5, lr}
   bcc2a:	f04f 0500 	mov.w	r5, #0
   bcc2e:	e00a      	b.n	bcc46 <__aeabi_l2d+0x16>

000bcc30 <__aeabi_l2d>:
   bcc30:	ea50 0201 	orrs.w	r2, r0, r1
   bcc34:	bf08      	it	eq
   bcc36:	4770      	bxeq	lr
   bcc38:	b530      	push	{r4, r5, lr}
   bcc3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bcc3e:	d502      	bpl.n	bcc46 <__aeabi_l2d+0x16>
   bcc40:	4240      	negs	r0, r0
   bcc42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcc46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bcc4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bcc4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bcc52:	f43f aed8 	beq.w	bca06 <__adddf3+0xe6>
   bcc56:	f04f 0203 	mov.w	r2, #3
   bcc5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bcc5e:	bf18      	it	ne
   bcc60:	3203      	addne	r2, #3
   bcc62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bcc66:	bf18      	it	ne
   bcc68:	3203      	addne	r2, #3
   bcc6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bcc6e:	f1c2 0320 	rsb	r3, r2, #32
   bcc72:	fa00 fc03 	lsl.w	ip, r0, r3
   bcc76:	fa20 f002 	lsr.w	r0, r0, r2
   bcc7a:	fa01 fe03 	lsl.w	lr, r1, r3
   bcc7e:	ea40 000e 	orr.w	r0, r0, lr
   bcc82:	fa21 f102 	lsr.w	r1, r1, r2
   bcc86:	4414      	add	r4, r2
   bcc88:	e6bd      	b.n	bca06 <__adddf3+0xe6>
   bcc8a:	bf00      	nop

000bcc8c <__aeabi_dmul>:
   bcc8c:	b570      	push	{r4, r5, r6, lr}
   bcc8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bcc92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bcc96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bcc9a:	bf1d      	ittte	ne
   bcc9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bcca0:	ea94 0f0c 	teqne	r4, ip
   bcca4:	ea95 0f0c 	teqne	r5, ip
   bcca8:	f000 f8de 	bleq	bce68 <__aeabi_dmul+0x1dc>
   bccac:	442c      	add	r4, r5
   bccae:	ea81 0603 	eor.w	r6, r1, r3
   bccb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bccb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bccba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bccbe:	bf18      	it	ne
   bccc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bccc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bccc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bcccc:	d038      	beq.n	bcd40 <__aeabi_dmul+0xb4>
   bccce:	fba0 ce02 	umull	ip, lr, r0, r2
   bccd2:	f04f 0500 	mov.w	r5, #0
   bccd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   bccda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bccde:	fbe0 e503 	umlal	lr, r5, r0, r3
   bcce2:	f04f 0600 	mov.w	r6, #0
   bcce6:	fbe1 5603 	umlal	r5, r6, r1, r3
   bccea:	f09c 0f00 	teq	ip, #0
   bccee:	bf18      	it	ne
   bccf0:	f04e 0e01 	orrne.w	lr, lr, #1
   bccf4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bccf8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bccfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bcd00:	d204      	bcs.n	bcd0c <__aeabi_dmul+0x80>
   bcd02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bcd06:	416d      	adcs	r5, r5
   bcd08:	eb46 0606 	adc.w	r6, r6, r6
   bcd0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bcd10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bcd14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bcd18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bcd1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bcd20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bcd24:	bf88      	it	hi
   bcd26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bcd2a:	d81e      	bhi.n	bcd6a <__aeabi_dmul+0xde>
   bcd2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bcd30:	bf08      	it	eq
   bcd32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bcd36:	f150 0000 	adcs.w	r0, r0, #0
   bcd3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bcd3e:	bd70      	pop	{r4, r5, r6, pc}
   bcd40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bcd44:	ea46 0101 	orr.w	r1, r6, r1
   bcd48:	ea40 0002 	orr.w	r0, r0, r2
   bcd4c:	ea81 0103 	eor.w	r1, r1, r3
   bcd50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bcd54:	bfc2      	ittt	gt
   bcd56:	ebd4 050c 	rsbsgt	r5, r4, ip
   bcd5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bcd5e:	bd70      	popgt	{r4, r5, r6, pc}
   bcd60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bcd64:	f04f 0e00 	mov.w	lr, #0
   bcd68:	3c01      	subs	r4, #1
   bcd6a:	f300 80ab 	bgt.w	bcec4 <__aeabi_dmul+0x238>
   bcd6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bcd72:	bfde      	ittt	le
   bcd74:	2000      	movle	r0, #0
   bcd76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bcd7a:	bd70      	pople	{r4, r5, r6, pc}
   bcd7c:	f1c4 0400 	rsb	r4, r4, #0
   bcd80:	3c20      	subs	r4, #32
   bcd82:	da35      	bge.n	bcdf0 <__aeabi_dmul+0x164>
   bcd84:	340c      	adds	r4, #12
   bcd86:	dc1b      	bgt.n	bcdc0 <__aeabi_dmul+0x134>
   bcd88:	f104 0414 	add.w	r4, r4, #20
   bcd8c:	f1c4 0520 	rsb	r5, r4, #32
   bcd90:	fa00 f305 	lsl.w	r3, r0, r5
   bcd94:	fa20 f004 	lsr.w	r0, r0, r4
   bcd98:	fa01 f205 	lsl.w	r2, r1, r5
   bcd9c:	ea40 0002 	orr.w	r0, r0, r2
   bcda0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bcda4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bcda8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bcdac:	fa21 f604 	lsr.w	r6, r1, r4
   bcdb0:	eb42 0106 	adc.w	r1, r2, r6
   bcdb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bcdb8:	bf08      	it	eq
   bcdba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bcdbe:	bd70      	pop	{r4, r5, r6, pc}
   bcdc0:	f1c4 040c 	rsb	r4, r4, #12
   bcdc4:	f1c4 0520 	rsb	r5, r4, #32
   bcdc8:	fa00 f304 	lsl.w	r3, r0, r4
   bcdcc:	fa20 f005 	lsr.w	r0, r0, r5
   bcdd0:	fa01 f204 	lsl.w	r2, r1, r4
   bcdd4:	ea40 0002 	orr.w	r0, r0, r2
   bcdd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bcddc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bcde0:	f141 0100 	adc.w	r1, r1, #0
   bcde4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bcde8:	bf08      	it	eq
   bcdea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bcdee:	bd70      	pop	{r4, r5, r6, pc}
   bcdf0:	f1c4 0520 	rsb	r5, r4, #32
   bcdf4:	fa00 f205 	lsl.w	r2, r0, r5
   bcdf8:	ea4e 0e02 	orr.w	lr, lr, r2
   bcdfc:	fa20 f304 	lsr.w	r3, r0, r4
   bce00:	fa01 f205 	lsl.w	r2, r1, r5
   bce04:	ea43 0302 	orr.w	r3, r3, r2
   bce08:	fa21 f004 	lsr.w	r0, r1, r4
   bce0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bce10:	fa21 f204 	lsr.w	r2, r1, r4
   bce14:	ea20 0002 	bic.w	r0, r0, r2
   bce18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bce1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bce20:	bf08      	it	eq
   bce22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bce26:	bd70      	pop	{r4, r5, r6, pc}
   bce28:	f094 0f00 	teq	r4, #0
   bce2c:	d10f      	bne.n	bce4e <__aeabi_dmul+0x1c2>
   bce2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bce32:	0040      	lsls	r0, r0, #1
   bce34:	eb41 0101 	adc.w	r1, r1, r1
   bce38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bce3c:	bf08      	it	eq
   bce3e:	3c01      	subeq	r4, #1
   bce40:	d0f7      	beq.n	bce32 <__aeabi_dmul+0x1a6>
   bce42:	ea41 0106 	orr.w	r1, r1, r6
   bce46:	f095 0f00 	teq	r5, #0
   bce4a:	bf18      	it	ne
   bce4c:	4770      	bxne	lr
   bce4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bce52:	0052      	lsls	r2, r2, #1
   bce54:	eb43 0303 	adc.w	r3, r3, r3
   bce58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bce5c:	bf08      	it	eq
   bce5e:	3d01      	subeq	r5, #1
   bce60:	d0f7      	beq.n	bce52 <__aeabi_dmul+0x1c6>
   bce62:	ea43 0306 	orr.w	r3, r3, r6
   bce66:	4770      	bx	lr
   bce68:	ea94 0f0c 	teq	r4, ip
   bce6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bce70:	bf18      	it	ne
   bce72:	ea95 0f0c 	teqne	r5, ip
   bce76:	d00c      	beq.n	bce92 <__aeabi_dmul+0x206>
   bce78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bce7c:	bf18      	it	ne
   bce7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bce82:	d1d1      	bne.n	bce28 <__aeabi_dmul+0x19c>
   bce84:	ea81 0103 	eor.w	r1, r1, r3
   bce88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bce8c:	f04f 0000 	mov.w	r0, #0
   bce90:	bd70      	pop	{r4, r5, r6, pc}
   bce92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bce96:	bf06      	itte	eq
   bce98:	4610      	moveq	r0, r2
   bce9a:	4619      	moveq	r1, r3
   bce9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bcea0:	d019      	beq.n	bced6 <__aeabi_dmul+0x24a>
   bcea2:	ea94 0f0c 	teq	r4, ip
   bcea6:	d102      	bne.n	bceae <__aeabi_dmul+0x222>
   bcea8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bceac:	d113      	bne.n	bced6 <__aeabi_dmul+0x24a>
   bceae:	ea95 0f0c 	teq	r5, ip
   bceb2:	d105      	bne.n	bcec0 <__aeabi_dmul+0x234>
   bceb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bceb8:	bf1c      	itt	ne
   bceba:	4610      	movne	r0, r2
   bcebc:	4619      	movne	r1, r3
   bcebe:	d10a      	bne.n	bced6 <__aeabi_dmul+0x24a>
   bcec0:	ea81 0103 	eor.w	r1, r1, r3
   bcec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bcec8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bcecc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bced0:	f04f 0000 	mov.w	r0, #0
   bced4:	bd70      	pop	{r4, r5, r6, pc}
   bced6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bceda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bcede:	bd70      	pop	{r4, r5, r6, pc}

000bcee0 <__aeabi_ddiv>:
   bcee0:	b570      	push	{r4, r5, r6, lr}
   bcee2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bcee6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bceea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bceee:	bf1d      	ittte	ne
   bcef0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bcef4:	ea94 0f0c 	teqne	r4, ip
   bcef8:	ea95 0f0c 	teqne	r5, ip
   bcefc:	f000 f8a7 	bleq	bd04e <__aeabi_ddiv+0x16e>
   bcf00:	eba4 0405 	sub.w	r4, r4, r5
   bcf04:	ea81 0e03 	eor.w	lr, r1, r3
   bcf08:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bcf0c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bcf10:	f000 8088 	beq.w	bd024 <__aeabi_ddiv+0x144>
   bcf14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bcf18:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bcf1c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bcf20:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bcf24:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bcf28:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bcf2c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bcf30:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bcf34:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bcf38:	429d      	cmp	r5, r3
   bcf3a:	bf08      	it	eq
   bcf3c:	4296      	cmpeq	r6, r2
   bcf3e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bcf42:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bcf46:	d202      	bcs.n	bcf4e <__aeabi_ddiv+0x6e>
   bcf48:	085b      	lsrs	r3, r3, #1
   bcf4a:	ea4f 0232 	mov.w	r2, r2, rrx
   bcf4e:	1ab6      	subs	r6, r6, r2
   bcf50:	eb65 0503 	sbc.w	r5, r5, r3
   bcf54:	085b      	lsrs	r3, r3, #1
   bcf56:	ea4f 0232 	mov.w	r2, r2, rrx
   bcf5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bcf5e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bcf62:	ebb6 0e02 	subs.w	lr, r6, r2
   bcf66:	eb75 0e03 	sbcs.w	lr, r5, r3
   bcf6a:	bf22      	ittt	cs
   bcf6c:	1ab6      	subcs	r6, r6, r2
   bcf6e:	4675      	movcs	r5, lr
   bcf70:	ea40 000c 	orrcs.w	r0, r0, ip
   bcf74:	085b      	lsrs	r3, r3, #1
   bcf76:	ea4f 0232 	mov.w	r2, r2, rrx
   bcf7a:	ebb6 0e02 	subs.w	lr, r6, r2
   bcf7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   bcf82:	bf22      	ittt	cs
   bcf84:	1ab6      	subcs	r6, r6, r2
   bcf86:	4675      	movcs	r5, lr
   bcf88:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bcf8c:	085b      	lsrs	r3, r3, #1
   bcf8e:	ea4f 0232 	mov.w	r2, r2, rrx
   bcf92:	ebb6 0e02 	subs.w	lr, r6, r2
   bcf96:	eb75 0e03 	sbcs.w	lr, r5, r3
   bcf9a:	bf22      	ittt	cs
   bcf9c:	1ab6      	subcs	r6, r6, r2
   bcf9e:	4675      	movcs	r5, lr
   bcfa0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bcfa4:	085b      	lsrs	r3, r3, #1
   bcfa6:	ea4f 0232 	mov.w	r2, r2, rrx
   bcfaa:	ebb6 0e02 	subs.w	lr, r6, r2
   bcfae:	eb75 0e03 	sbcs.w	lr, r5, r3
   bcfb2:	bf22      	ittt	cs
   bcfb4:	1ab6      	subcs	r6, r6, r2
   bcfb6:	4675      	movcs	r5, lr
   bcfb8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bcfbc:	ea55 0e06 	orrs.w	lr, r5, r6
   bcfc0:	d018      	beq.n	bcff4 <__aeabi_ddiv+0x114>
   bcfc2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bcfc6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bcfca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bcfce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bcfd2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bcfd6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bcfda:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bcfde:	d1c0      	bne.n	bcf62 <__aeabi_ddiv+0x82>
   bcfe0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bcfe4:	d10b      	bne.n	bcffe <__aeabi_ddiv+0x11e>
   bcfe6:	ea41 0100 	orr.w	r1, r1, r0
   bcfea:	f04f 0000 	mov.w	r0, #0
   bcfee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bcff2:	e7b6      	b.n	bcf62 <__aeabi_ddiv+0x82>
   bcff4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bcff8:	bf04      	itt	eq
   bcffa:	4301      	orreq	r1, r0
   bcffc:	2000      	moveq	r0, #0
   bcffe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd002:	bf88      	it	hi
   bd004:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd008:	f63f aeaf 	bhi.w	bcd6a <__aeabi_dmul+0xde>
   bd00c:	ebb5 0c03 	subs.w	ip, r5, r3
   bd010:	bf04      	itt	eq
   bd012:	ebb6 0c02 	subseq.w	ip, r6, r2
   bd016:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd01a:	f150 0000 	adcs.w	r0, r0, #0
   bd01e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd022:	bd70      	pop	{r4, r5, r6, pc}
   bd024:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bd028:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bd02c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bd030:	bfc2      	ittt	gt
   bd032:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd036:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd03a:	bd70      	popgt	{r4, r5, r6, pc}
   bd03c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd040:	f04f 0e00 	mov.w	lr, #0
   bd044:	3c01      	subs	r4, #1
   bd046:	e690      	b.n	bcd6a <__aeabi_dmul+0xde>
   bd048:	ea45 0e06 	orr.w	lr, r5, r6
   bd04c:	e68d      	b.n	bcd6a <__aeabi_dmul+0xde>
   bd04e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd052:	ea94 0f0c 	teq	r4, ip
   bd056:	bf08      	it	eq
   bd058:	ea95 0f0c 	teqeq	r5, ip
   bd05c:	f43f af3b 	beq.w	bced6 <__aeabi_dmul+0x24a>
   bd060:	ea94 0f0c 	teq	r4, ip
   bd064:	d10a      	bne.n	bd07c <__aeabi_ddiv+0x19c>
   bd066:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd06a:	f47f af34 	bne.w	bced6 <__aeabi_dmul+0x24a>
   bd06e:	ea95 0f0c 	teq	r5, ip
   bd072:	f47f af25 	bne.w	bcec0 <__aeabi_dmul+0x234>
   bd076:	4610      	mov	r0, r2
   bd078:	4619      	mov	r1, r3
   bd07a:	e72c      	b.n	bced6 <__aeabi_dmul+0x24a>
   bd07c:	ea95 0f0c 	teq	r5, ip
   bd080:	d106      	bne.n	bd090 <__aeabi_ddiv+0x1b0>
   bd082:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd086:	f43f aefd 	beq.w	bce84 <__aeabi_dmul+0x1f8>
   bd08a:	4610      	mov	r0, r2
   bd08c:	4619      	mov	r1, r3
   bd08e:	e722      	b.n	bced6 <__aeabi_dmul+0x24a>
   bd090:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd094:	bf18      	it	ne
   bd096:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd09a:	f47f aec5 	bne.w	bce28 <__aeabi_dmul+0x19c>
   bd09e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bd0a2:	f47f af0d 	bne.w	bcec0 <__aeabi_dmul+0x234>
   bd0a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bd0aa:	f47f aeeb 	bne.w	bce84 <__aeabi_dmul+0x1f8>
   bd0ae:	e712      	b.n	bced6 <__aeabi_dmul+0x24a>

000bd0b0 <__gedf2>:
   bd0b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd0b4:	e006      	b.n	bd0c4 <__cmpdf2+0x4>
   bd0b6:	bf00      	nop

000bd0b8 <__ledf2>:
   bd0b8:	f04f 0c01 	mov.w	ip, #1
   bd0bc:	e002      	b.n	bd0c4 <__cmpdf2+0x4>
   bd0be:	bf00      	nop

000bd0c0 <__cmpdf2>:
   bd0c0:	f04f 0c01 	mov.w	ip, #1
   bd0c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   bd0c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd0cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd0d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd0d4:	bf18      	it	ne
   bd0d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bd0da:	d01b      	beq.n	bd114 <__cmpdf2+0x54>
   bd0dc:	b001      	add	sp, #4
   bd0de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bd0e2:	bf0c      	ite	eq
   bd0e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bd0e8:	ea91 0f03 	teqne	r1, r3
   bd0ec:	bf02      	ittt	eq
   bd0ee:	ea90 0f02 	teqeq	r0, r2
   bd0f2:	2000      	moveq	r0, #0
   bd0f4:	4770      	bxeq	lr
   bd0f6:	f110 0f00 	cmn.w	r0, #0
   bd0fa:	ea91 0f03 	teq	r1, r3
   bd0fe:	bf58      	it	pl
   bd100:	4299      	cmppl	r1, r3
   bd102:	bf08      	it	eq
   bd104:	4290      	cmpeq	r0, r2
   bd106:	bf2c      	ite	cs
   bd108:	17d8      	asrcs	r0, r3, #31
   bd10a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bd10e:	f040 0001 	orr.w	r0, r0, #1
   bd112:	4770      	bx	lr
   bd114:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd11c:	d102      	bne.n	bd124 <__cmpdf2+0x64>
   bd11e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd122:	d107      	bne.n	bd134 <__cmpdf2+0x74>
   bd124:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd128:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd12c:	d1d6      	bne.n	bd0dc <__cmpdf2+0x1c>
   bd12e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd132:	d0d3      	beq.n	bd0dc <__cmpdf2+0x1c>
   bd134:	f85d 0b04 	ldr.w	r0, [sp], #4
   bd138:	4770      	bx	lr
   bd13a:	bf00      	nop

000bd13c <__aeabi_cdrcmple>:
   bd13c:	4684      	mov	ip, r0
   bd13e:	4610      	mov	r0, r2
   bd140:	4662      	mov	r2, ip
   bd142:	468c      	mov	ip, r1
   bd144:	4619      	mov	r1, r3
   bd146:	4663      	mov	r3, ip
   bd148:	e000      	b.n	bd14c <__aeabi_cdcmpeq>
   bd14a:	bf00      	nop

000bd14c <__aeabi_cdcmpeq>:
   bd14c:	b501      	push	{r0, lr}
   bd14e:	f7ff ffb7 	bl	bd0c0 <__cmpdf2>
   bd152:	2800      	cmp	r0, #0
   bd154:	bf48      	it	mi
   bd156:	f110 0f00 	cmnmi.w	r0, #0
   bd15a:	bd01      	pop	{r0, pc}

000bd15c <__aeabi_dcmpeq>:
   bd15c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd160:	f7ff fff4 	bl	bd14c <__aeabi_cdcmpeq>
   bd164:	bf0c      	ite	eq
   bd166:	2001      	moveq	r0, #1
   bd168:	2000      	movne	r0, #0
   bd16a:	f85d fb08 	ldr.w	pc, [sp], #8
   bd16e:	bf00      	nop

000bd170 <__aeabi_dcmplt>:
   bd170:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd174:	f7ff ffea 	bl	bd14c <__aeabi_cdcmpeq>
   bd178:	bf34      	ite	cc
   bd17a:	2001      	movcc	r0, #1
   bd17c:	2000      	movcs	r0, #0
   bd17e:	f85d fb08 	ldr.w	pc, [sp], #8
   bd182:	bf00      	nop

000bd184 <__aeabi_dcmple>:
   bd184:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd188:	f7ff ffe0 	bl	bd14c <__aeabi_cdcmpeq>
   bd18c:	bf94      	ite	ls
   bd18e:	2001      	movls	r0, #1
   bd190:	2000      	movhi	r0, #0
   bd192:	f85d fb08 	ldr.w	pc, [sp], #8
   bd196:	bf00      	nop

000bd198 <__aeabi_dcmpge>:
   bd198:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd19c:	f7ff ffce 	bl	bd13c <__aeabi_cdrcmple>
   bd1a0:	bf94      	ite	ls
   bd1a2:	2001      	movls	r0, #1
   bd1a4:	2000      	movhi	r0, #0
   bd1a6:	f85d fb08 	ldr.w	pc, [sp], #8
   bd1aa:	bf00      	nop

000bd1ac <__aeabi_dcmpgt>:
   bd1ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd1b0:	f7ff ffc4 	bl	bd13c <__aeabi_cdrcmple>
   bd1b4:	bf34      	ite	cc
   bd1b6:	2001      	movcc	r0, #1
   bd1b8:	2000      	movcs	r0, #0
   bd1ba:	f85d fb08 	ldr.w	pc, [sp], #8
   bd1be:	bf00      	nop

000bd1c0 <__aeabi_dcmpun>:
   bd1c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd1c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd1c8:	d102      	bne.n	bd1d0 <__aeabi_dcmpun+0x10>
   bd1ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd1ce:	d10a      	bne.n	bd1e6 <__aeabi_dcmpun+0x26>
   bd1d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd1d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd1d8:	d102      	bne.n	bd1e0 <__aeabi_dcmpun+0x20>
   bd1da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd1de:	d102      	bne.n	bd1e6 <__aeabi_dcmpun+0x26>
   bd1e0:	f04f 0000 	mov.w	r0, #0
   bd1e4:	4770      	bx	lr
   bd1e6:	f04f 0001 	mov.w	r0, #1
   bd1ea:	4770      	bx	lr

000bd1ec <__aeabi_d2iz>:
   bd1ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd1f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd1f4:	d215      	bcs.n	bd222 <__aeabi_d2iz+0x36>
   bd1f6:	d511      	bpl.n	bd21c <__aeabi_d2iz+0x30>
   bd1f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd1fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd200:	d912      	bls.n	bd228 <__aeabi_d2iz+0x3c>
   bd202:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd20a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd20e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bd212:	fa23 f002 	lsr.w	r0, r3, r2
   bd216:	bf18      	it	ne
   bd218:	4240      	negne	r0, r0
   bd21a:	4770      	bx	lr
   bd21c:	f04f 0000 	mov.w	r0, #0
   bd220:	4770      	bx	lr
   bd222:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd226:	d105      	bne.n	bd234 <__aeabi_d2iz+0x48>
   bd228:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bd22c:	bf08      	it	eq
   bd22e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bd232:	4770      	bx	lr
   bd234:	f04f 0000 	mov.w	r0, #0
   bd238:	4770      	bx	lr
   bd23a:	bf00      	nop

000bd23c <__aeabi_d2uiz>:
   bd23c:	004a      	lsls	r2, r1, #1
   bd23e:	d211      	bcs.n	bd264 <__aeabi_d2uiz+0x28>
   bd240:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd244:	d211      	bcs.n	bd26a <__aeabi_d2uiz+0x2e>
   bd246:	d50d      	bpl.n	bd264 <__aeabi_d2uiz+0x28>
   bd248:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd24c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd250:	d40e      	bmi.n	bd270 <__aeabi_d2uiz+0x34>
   bd252:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd25a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd25e:	fa23 f002 	lsr.w	r0, r3, r2
   bd262:	4770      	bx	lr
   bd264:	f04f 0000 	mov.w	r0, #0
   bd268:	4770      	bx	lr
   bd26a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd26e:	d102      	bne.n	bd276 <__aeabi_d2uiz+0x3a>
   bd270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd274:	4770      	bx	lr
   bd276:	f04f 0000 	mov.w	r0, #0
   bd27a:	4770      	bx	lr

000bd27c <__aeabi_d2f>:
   bd27c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd280:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bd284:	bf24      	itt	cs
   bd286:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bd28a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bd28e:	d90d      	bls.n	bd2ac <__aeabi_d2f+0x30>
   bd290:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bd294:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bd298:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bd29c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bd2a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bd2a4:	bf08      	it	eq
   bd2a6:	f020 0001 	biceq.w	r0, r0, #1
   bd2aa:	4770      	bx	lr
   bd2ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bd2b0:	d121      	bne.n	bd2f6 <__aeabi_d2f+0x7a>
   bd2b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bd2b6:	bfbc      	itt	lt
   bd2b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bd2bc:	4770      	bxlt	lr
   bd2be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd2c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bd2c6:	f1c2 0218 	rsb	r2, r2, #24
   bd2ca:	f1c2 0c20 	rsb	ip, r2, #32
   bd2ce:	fa10 f30c 	lsls.w	r3, r0, ip
   bd2d2:	fa20 f002 	lsr.w	r0, r0, r2
   bd2d6:	bf18      	it	ne
   bd2d8:	f040 0001 	orrne.w	r0, r0, #1
   bd2dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd2e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bd2e4:	fa03 fc0c 	lsl.w	ip, r3, ip
   bd2e8:	ea40 000c 	orr.w	r0, r0, ip
   bd2ec:	fa23 f302 	lsr.w	r3, r3, r2
   bd2f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bd2f4:	e7cc      	b.n	bd290 <__aeabi_d2f+0x14>
   bd2f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bd2fa:	d107      	bne.n	bd30c <__aeabi_d2f+0x90>
   bd2fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bd300:	bf1e      	ittt	ne
   bd302:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bd306:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bd30a:	4770      	bxne	lr
   bd30c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bd310:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bd314:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bd318:	4770      	bx	lr
   bd31a:	bf00      	nop

000bd31c <asctime_r>:
   bd31c:	b510      	push	{r4, lr}
   bd31e:	460c      	mov	r4, r1
   bd320:	6941      	ldr	r1, [r0, #20]
   bd322:	6903      	ldr	r3, [r0, #16]
   bd324:	6982      	ldr	r2, [r0, #24]
   bd326:	b086      	sub	sp, #24
   bd328:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bd32c:	9104      	str	r1, [sp, #16]
   bd32e:	6801      	ldr	r1, [r0, #0]
   bd330:	9103      	str	r1, [sp, #12]
   bd332:	6841      	ldr	r1, [r0, #4]
   bd334:	9102      	str	r1, [sp, #8]
   bd336:	6881      	ldr	r1, [r0, #8]
   bd338:	9101      	str	r1, [sp, #4]
   bd33a:	68c1      	ldr	r1, [r0, #12]
   bd33c:	9100      	str	r1, [sp, #0]
   bd33e:	4907      	ldr	r1, [pc, #28]	; (bd35c <asctime_r+0x40>)
   bd340:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bd344:	440b      	add	r3, r1
   bd346:	4906      	ldr	r1, [pc, #24]	; (bd360 <asctime_r+0x44>)
   bd348:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bd34c:	440a      	add	r2, r1
   bd34e:	4620      	mov	r0, r4
   bd350:	4904      	ldr	r1, [pc, #16]	; (bd364 <asctime_r+0x48>)
   bd352:	f7fb fbc5 	bl	b8ae0 <siprintf>
   bd356:	4620      	mov	r0, r4
   bd358:	b006      	add	sp, #24
   bd35a:	bd10      	pop	{r4, pc}
   bd35c:	000be9bd 	.word	0x000be9bd
   bd360:	000be9a8 	.word	0x000be9a8
   bd364:	000be988 	.word	0x000be988

000bd368 <atexit>:
   bd368:	2300      	movs	r3, #0
   bd36a:	4601      	mov	r1, r0
   bd36c:	461a      	mov	r2, r3
   bd36e:	4618      	mov	r0, r3
   bd370:	f000 b9ba 	b.w	bd6e8 <__register_exitproc>

000bd374 <gmtime>:
   bd374:	b538      	push	{r3, r4, r5, lr}
   bd376:	4b0b      	ldr	r3, [pc, #44]	; (bd3a4 <gmtime+0x30>)
   bd378:	681d      	ldr	r5, [r3, #0]
   bd37a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bd37c:	4604      	mov	r4, r0
   bd37e:	b953      	cbnz	r3, bd396 <gmtime+0x22>
   bd380:	2024      	movs	r0, #36	; 0x24
   bd382:	f7fb fb95 	bl	b8ab0 <malloc>
   bd386:	4602      	mov	r2, r0
   bd388:	63e8      	str	r0, [r5, #60]	; 0x3c
   bd38a:	b920      	cbnz	r0, bd396 <gmtime+0x22>
   bd38c:	4b06      	ldr	r3, [pc, #24]	; (bd3a8 <gmtime+0x34>)
   bd38e:	4807      	ldr	r0, [pc, #28]	; (bd3ac <gmtime+0x38>)
   bd390:	2139      	movs	r1, #57	; 0x39
   bd392:	f7fb fbcd 	bl	b8b30 <__assert_func>
   bd396:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bd398:	4620      	mov	r0, r4
   bd39a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd39e:	f7fb bbe7 	b.w	b8b70 <gmtime_r>
   bd3a2:	bf00      	nop
   bd3a4:	2003dee0 	.word	0x2003dee0
   bd3a8:	000be9e1 	.word	0x000be9e1
   bd3ac:	000be9f8 	.word	0x000be9f8

000bd3b0 <isprint>:
   bd3b0:	4b02      	ldr	r3, [pc, #8]	; (bd3bc <isprint+0xc>)
   bd3b2:	4418      	add	r0, r3
   bd3b4:	7840      	ldrb	r0, [r0, #1]
   bd3b6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bd3ba:	4770      	bx	lr
   bd3bc:	000beaaa 	.word	0x000beaaa

000bd3c0 <memcpy>:
   bd3c0:	440a      	add	r2, r1
   bd3c2:	4291      	cmp	r1, r2
   bd3c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bd3c8:	d100      	bne.n	bd3cc <memcpy+0xc>
   bd3ca:	4770      	bx	lr
   bd3cc:	b510      	push	{r4, lr}
   bd3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd3d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   bd3d6:	4291      	cmp	r1, r2
   bd3d8:	d1f9      	bne.n	bd3ce <memcpy+0xe>
   bd3da:	bd10      	pop	{r4, pc}

000bd3dc <memmove>:
   bd3dc:	4288      	cmp	r0, r1
   bd3de:	b510      	push	{r4, lr}
   bd3e0:	eb01 0402 	add.w	r4, r1, r2
   bd3e4:	d902      	bls.n	bd3ec <memmove+0x10>
   bd3e6:	4284      	cmp	r4, r0
   bd3e8:	4623      	mov	r3, r4
   bd3ea:	d807      	bhi.n	bd3fc <memmove+0x20>
   bd3ec:	1e43      	subs	r3, r0, #1
   bd3ee:	42a1      	cmp	r1, r4
   bd3f0:	d008      	beq.n	bd404 <memmove+0x28>
   bd3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd3f6:	f803 2f01 	strb.w	r2, [r3, #1]!
   bd3fa:	e7f8      	b.n	bd3ee <memmove+0x12>
   bd3fc:	4402      	add	r2, r0
   bd3fe:	4601      	mov	r1, r0
   bd400:	428a      	cmp	r2, r1
   bd402:	d100      	bne.n	bd406 <memmove+0x2a>
   bd404:	bd10      	pop	{r4, pc}
   bd406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bd40a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bd40e:	e7f7      	b.n	bd400 <memmove+0x24>

000bd410 <memset>:
   bd410:	4402      	add	r2, r0
   bd412:	4603      	mov	r3, r0
   bd414:	4293      	cmp	r3, r2
   bd416:	d100      	bne.n	bd41a <memset+0xa>
   bd418:	4770      	bx	lr
   bd41a:	f803 1b01 	strb.w	r1, [r3], #1
   bd41e:	e7f9      	b.n	bd414 <memset+0x4>

000bd420 <srand>:
   bd420:	b538      	push	{r3, r4, r5, lr}
   bd422:	4b10      	ldr	r3, [pc, #64]	; (bd464 <srand+0x44>)
   bd424:	681d      	ldr	r5, [r3, #0]
   bd426:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd428:	4604      	mov	r4, r0
   bd42a:	b9b3      	cbnz	r3, bd45a <srand+0x3a>
   bd42c:	2018      	movs	r0, #24
   bd42e:	f7fb fb3f 	bl	b8ab0 <malloc>
   bd432:	4602      	mov	r2, r0
   bd434:	63a8      	str	r0, [r5, #56]	; 0x38
   bd436:	b920      	cbnz	r0, bd442 <srand+0x22>
   bd438:	4b0b      	ldr	r3, [pc, #44]	; (bd468 <srand+0x48>)
   bd43a:	480c      	ldr	r0, [pc, #48]	; (bd46c <srand+0x4c>)
   bd43c:	2142      	movs	r1, #66	; 0x42
   bd43e:	f7fb fb77 	bl	b8b30 <__assert_func>
   bd442:	490b      	ldr	r1, [pc, #44]	; (bd470 <srand+0x50>)
   bd444:	4b0b      	ldr	r3, [pc, #44]	; (bd474 <srand+0x54>)
   bd446:	e9c0 1300 	strd	r1, r3, [r0]
   bd44a:	4b0b      	ldr	r3, [pc, #44]	; (bd478 <srand+0x58>)
   bd44c:	6083      	str	r3, [r0, #8]
   bd44e:	230b      	movs	r3, #11
   bd450:	8183      	strh	r3, [r0, #12]
   bd452:	2100      	movs	r1, #0
   bd454:	2001      	movs	r0, #1
   bd456:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bd45a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd45c:	2200      	movs	r2, #0
   bd45e:	611c      	str	r4, [r3, #16]
   bd460:	615a      	str	r2, [r3, #20]
   bd462:	bd38      	pop	{r3, r4, r5, pc}
   bd464:	2003dee0 	.word	0x2003dee0
   bd468:	000be9e1 	.word	0x000be9e1
   bd46c:	000bea51 	.word	0x000bea51
   bd470:	abcd330e 	.word	0xabcd330e
   bd474:	e66d1234 	.word	0xe66d1234
   bd478:	0005deec 	.word	0x0005deec

000bd47c <rand>:
   bd47c:	4b16      	ldr	r3, [pc, #88]	; (bd4d8 <rand+0x5c>)
   bd47e:	b510      	push	{r4, lr}
   bd480:	681c      	ldr	r4, [r3, #0]
   bd482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bd484:	b9b3      	cbnz	r3, bd4b4 <rand+0x38>
   bd486:	2018      	movs	r0, #24
   bd488:	f7fb fb12 	bl	b8ab0 <malloc>
   bd48c:	63a0      	str	r0, [r4, #56]	; 0x38
   bd48e:	b928      	cbnz	r0, bd49c <rand+0x20>
   bd490:	4602      	mov	r2, r0
   bd492:	4b12      	ldr	r3, [pc, #72]	; (bd4dc <rand+0x60>)
   bd494:	4812      	ldr	r0, [pc, #72]	; (bd4e0 <rand+0x64>)
   bd496:	214e      	movs	r1, #78	; 0x4e
   bd498:	f7fb fb4a 	bl	b8b30 <__assert_func>
   bd49c:	4a11      	ldr	r2, [pc, #68]	; (bd4e4 <rand+0x68>)
   bd49e:	4b12      	ldr	r3, [pc, #72]	; (bd4e8 <rand+0x6c>)
   bd4a0:	e9c0 2300 	strd	r2, r3, [r0]
   bd4a4:	4b11      	ldr	r3, [pc, #68]	; (bd4ec <rand+0x70>)
   bd4a6:	6083      	str	r3, [r0, #8]
   bd4a8:	230b      	movs	r3, #11
   bd4aa:	8183      	strh	r3, [r0, #12]
   bd4ac:	2201      	movs	r2, #1
   bd4ae:	2300      	movs	r3, #0
   bd4b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bd4b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bd4b6:	4a0e      	ldr	r2, [pc, #56]	; (bd4f0 <rand+0x74>)
   bd4b8:	6920      	ldr	r0, [r4, #16]
   bd4ba:	6963      	ldr	r3, [r4, #20]
   bd4bc:	490d      	ldr	r1, [pc, #52]	; (bd4f4 <rand+0x78>)
   bd4be:	4342      	muls	r2, r0
   bd4c0:	fb01 2203 	mla	r2, r1, r3, r2
   bd4c4:	fba0 0101 	umull	r0, r1, r0, r1
   bd4c8:	1c43      	adds	r3, r0, #1
   bd4ca:	eb42 0001 	adc.w	r0, r2, r1
   bd4ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bd4d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bd4d6:	bd10      	pop	{r4, pc}
   bd4d8:	2003dee0 	.word	0x2003dee0
   bd4dc:	000be9e1 	.word	0x000be9e1
   bd4e0:	000bea51 	.word	0x000bea51
   bd4e4:	abcd330e 	.word	0xabcd330e
   bd4e8:	e66d1234 	.word	0xe66d1234
   bd4ec:	0005deec 	.word	0x0005deec
   bd4f0:	5851f42d 	.word	0x5851f42d
   bd4f4:	4c957f2d 	.word	0x4c957f2d

000bd4f8 <strchr>:
   bd4f8:	b2c9      	uxtb	r1, r1
   bd4fa:	4603      	mov	r3, r0
   bd4fc:	f810 2b01 	ldrb.w	r2, [r0], #1
   bd500:	b11a      	cbz	r2, bd50a <strchr+0x12>
   bd502:	428a      	cmp	r2, r1
   bd504:	d1f9      	bne.n	bd4fa <strchr+0x2>
   bd506:	4618      	mov	r0, r3
   bd508:	4770      	bx	lr
   bd50a:	2900      	cmp	r1, #0
   bd50c:	bf18      	it	ne
   bd50e:	2300      	movne	r3, #0
   bd510:	e7f9      	b.n	bd506 <strchr+0xe>

000bd512 <strchrnul>:
   bd512:	b510      	push	{r4, lr}
   bd514:	4604      	mov	r4, r0
   bd516:	f7ff ffef 	bl	bd4f8 <strchr>
   bd51a:	b918      	cbnz	r0, bd524 <strchrnul+0x12>
   bd51c:	4620      	mov	r0, r4
   bd51e:	f000 f814 	bl	bd54a <strlen>
   bd522:	4420      	add	r0, r4
   bd524:	bd10      	pop	{r4, pc}

000bd526 <strcmp>:
   bd526:	f810 2b01 	ldrb.w	r2, [r0], #1
   bd52a:	f811 3b01 	ldrb.w	r3, [r1], #1
   bd52e:	2a01      	cmp	r2, #1
   bd530:	bf28      	it	cs
   bd532:	429a      	cmpcs	r2, r3
   bd534:	d0f7      	beq.n	bd526 <strcmp>
   bd536:	1ad0      	subs	r0, r2, r3
   bd538:	4770      	bx	lr

000bd53a <strcpy>:
   bd53a:	4603      	mov	r3, r0
   bd53c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd540:	f803 2b01 	strb.w	r2, [r3], #1
   bd544:	2a00      	cmp	r2, #0
   bd546:	d1f9      	bne.n	bd53c <strcpy+0x2>
   bd548:	4770      	bx	lr

000bd54a <strlen>:
   bd54a:	4603      	mov	r3, r0
   bd54c:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd550:	2a00      	cmp	r2, #0
   bd552:	d1fb      	bne.n	bd54c <strlen+0x2>
   bd554:	1a18      	subs	r0, r3, r0
   bd556:	3801      	subs	r0, #1
   bd558:	4770      	bx	lr

000bd55a <strncmp>:
   bd55a:	b510      	push	{r4, lr}
   bd55c:	b17a      	cbz	r2, bd57e <strncmp+0x24>
   bd55e:	4603      	mov	r3, r0
   bd560:	3901      	subs	r1, #1
   bd562:	1884      	adds	r4, r0, r2
   bd564:	f813 0b01 	ldrb.w	r0, [r3], #1
   bd568:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bd56c:	4290      	cmp	r0, r2
   bd56e:	d101      	bne.n	bd574 <strncmp+0x1a>
   bd570:	42a3      	cmp	r3, r4
   bd572:	d101      	bne.n	bd578 <strncmp+0x1e>
   bd574:	1a80      	subs	r0, r0, r2
   bd576:	bd10      	pop	{r4, pc}
   bd578:	2800      	cmp	r0, #0
   bd57a:	d1f3      	bne.n	bd564 <strncmp+0xa>
   bd57c:	e7fa      	b.n	bd574 <strncmp+0x1a>
   bd57e:	4610      	mov	r0, r2
   bd580:	e7f9      	b.n	bd576 <strncmp+0x1c>

000bd582 <strncpy>:
   bd582:	b510      	push	{r4, lr}
   bd584:	3901      	subs	r1, #1
   bd586:	4603      	mov	r3, r0
   bd588:	b132      	cbz	r2, bd598 <strncpy+0x16>
   bd58a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd58e:	f803 4b01 	strb.w	r4, [r3], #1
   bd592:	3a01      	subs	r2, #1
   bd594:	2c00      	cmp	r4, #0
   bd596:	d1f7      	bne.n	bd588 <strncpy+0x6>
   bd598:	441a      	add	r2, r3
   bd59a:	2100      	movs	r1, #0
   bd59c:	4293      	cmp	r3, r2
   bd59e:	d100      	bne.n	bd5a2 <strncpy+0x20>
   bd5a0:	bd10      	pop	{r4, pc}
   bd5a2:	f803 1b01 	strb.w	r1, [r3], #1
   bd5a6:	e7f9      	b.n	bd59c <strncpy+0x1a>

000bd5a8 <strrchr>:
   bd5a8:	b538      	push	{r3, r4, r5, lr}
   bd5aa:	4603      	mov	r3, r0
   bd5ac:	460c      	mov	r4, r1
   bd5ae:	b969      	cbnz	r1, bd5cc <strrchr+0x24>
   bd5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd5b4:	f7ff bfa0 	b.w	bd4f8 <strchr>
   bd5b8:	1c43      	adds	r3, r0, #1
   bd5ba:	4605      	mov	r5, r0
   bd5bc:	4621      	mov	r1, r4
   bd5be:	4618      	mov	r0, r3
   bd5c0:	f7ff ff9a 	bl	bd4f8 <strchr>
   bd5c4:	2800      	cmp	r0, #0
   bd5c6:	d1f7      	bne.n	bd5b8 <strrchr+0x10>
   bd5c8:	4628      	mov	r0, r5
   bd5ca:	bd38      	pop	{r3, r4, r5, pc}
   bd5cc:	2500      	movs	r5, #0
   bd5ce:	e7f5      	b.n	bd5bc <strrchr+0x14>

000bd5d0 <_strtol_l.constprop.0>:
   bd5d0:	2b01      	cmp	r3, #1
   bd5d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd5d6:	d001      	beq.n	bd5dc <_strtol_l.constprop.0+0xc>
   bd5d8:	2b24      	cmp	r3, #36	; 0x24
   bd5da:	d906      	bls.n	bd5ea <_strtol_l.constprop.0+0x1a>
   bd5dc:	f7fb faa0 	bl	b8b20 <__errno>
   bd5e0:	2316      	movs	r3, #22
   bd5e2:	6003      	str	r3, [r0, #0]
   bd5e4:	2000      	movs	r0, #0
   bd5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd5ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bd6d0 <_strtol_l.constprop.0+0x100>
   bd5ee:	460d      	mov	r5, r1
   bd5f0:	462e      	mov	r6, r5
   bd5f2:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd5f6:	f814 700c 	ldrb.w	r7, [r4, ip]
   bd5fa:	f017 0708 	ands.w	r7, r7, #8
   bd5fe:	d1f7      	bne.n	bd5f0 <_strtol_l.constprop.0+0x20>
   bd600:	2c2d      	cmp	r4, #45	; 0x2d
   bd602:	d132      	bne.n	bd66a <_strtol_l.constprop.0+0x9a>
   bd604:	782c      	ldrb	r4, [r5, #0]
   bd606:	2701      	movs	r7, #1
   bd608:	1cb5      	adds	r5, r6, #2
   bd60a:	2b00      	cmp	r3, #0
   bd60c:	d05b      	beq.n	bd6c6 <_strtol_l.constprop.0+0xf6>
   bd60e:	2b10      	cmp	r3, #16
   bd610:	d109      	bne.n	bd626 <_strtol_l.constprop.0+0x56>
   bd612:	2c30      	cmp	r4, #48	; 0x30
   bd614:	d107      	bne.n	bd626 <_strtol_l.constprop.0+0x56>
   bd616:	782c      	ldrb	r4, [r5, #0]
   bd618:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bd61c:	2c58      	cmp	r4, #88	; 0x58
   bd61e:	d14d      	bne.n	bd6bc <_strtol_l.constprop.0+0xec>
   bd620:	786c      	ldrb	r4, [r5, #1]
   bd622:	2310      	movs	r3, #16
   bd624:	3502      	adds	r5, #2
   bd626:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bd62a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bd62e:	f04f 0c00 	mov.w	ip, #0
   bd632:	fbb8 f9f3 	udiv	r9, r8, r3
   bd636:	4666      	mov	r6, ip
   bd638:	fb03 8a19 	mls	sl, r3, r9, r8
   bd63c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bd640:	f1be 0f09 	cmp.w	lr, #9
   bd644:	d816      	bhi.n	bd674 <_strtol_l.constprop.0+0xa4>
   bd646:	4674      	mov	r4, lr
   bd648:	42a3      	cmp	r3, r4
   bd64a:	dd24      	ble.n	bd696 <_strtol_l.constprop.0+0xc6>
   bd64c:	f1bc 0f00 	cmp.w	ip, #0
   bd650:	db1e      	blt.n	bd690 <_strtol_l.constprop.0+0xc0>
   bd652:	45b1      	cmp	r9, r6
   bd654:	d31c      	bcc.n	bd690 <_strtol_l.constprop.0+0xc0>
   bd656:	d101      	bne.n	bd65c <_strtol_l.constprop.0+0x8c>
   bd658:	45a2      	cmp	sl, r4
   bd65a:	db19      	blt.n	bd690 <_strtol_l.constprop.0+0xc0>
   bd65c:	fb06 4603 	mla	r6, r6, r3, r4
   bd660:	f04f 0c01 	mov.w	ip, #1
   bd664:	f815 4b01 	ldrb.w	r4, [r5], #1
   bd668:	e7e8      	b.n	bd63c <_strtol_l.constprop.0+0x6c>
   bd66a:	2c2b      	cmp	r4, #43	; 0x2b
   bd66c:	bf04      	itt	eq
   bd66e:	782c      	ldrbeq	r4, [r5, #0]
   bd670:	1cb5      	addeq	r5, r6, #2
   bd672:	e7ca      	b.n	bd60a <_strtol_l.constprop.0+0x3a>
   bd674:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bd678:	f1be 0f19 	cmp.w	lr, #25
   bd67c:	d801      	bhi.n	bd682 <_strtol_l.constprop.0+0xb2>
   bd67e:	3c37      	subs	r4, #55	; 0x37
   bd680:	e7e2      	b.n	bd648 <_strtol_l.constprop.0+0x78>
   bd682:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bd686:	f1be 0f19 	cmp.w	lr, #25
   bd68a:	d804      	bhi.n	bd696 <_strtol_l.constprop.0+0xc6>
   bd68c:	3c57      	subs	r4, #87	; 0x57
   bd68e:	e7db      	b.n	bd648 <_strtol_l.constprop.0+0x78>
   bd690:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bd694:	e7e6      	b.n	bd664 <_strtol_l.constprop.0+0x94>
   bd696:	f1bc 0f00 	cmp.w	ip, #0
   bd69a:	da05      	bge.n	bd6a8 <_strtol_l.constprop.0+0xd8>
   bd69c:	2322      	movs	r3, #34	; 0x22
   bd69e:	6003      	str	r3, [r0, #0]
   bd6a0:	4646      	mov	r6, r8
   bd6a2:	b942      	cbnz	r2, bd6b6 <_strtol_l.constprop.0+0xe6>
   bd6a4:	4630      	mov	r0, r6
   bd6a6:	e79e      	b.n	bd5e6 <_strtol_l.constprop.0+0x16>
   bd6a8:	b107      	cbz	r7, bd6ac <_strtol_l.constprop.0+0xdc>
   bd6aa:	4276      	negs	r6, r6
   bd6ac:	2a00      	cmp	r2, #0
   bd6ae:	d0f9      	beq.n	bd6a4 <_strtol_l.constprop.0+0xd4>
   bd6b0:	f1bc 0f00 	cmp.w	ip, #0
   bd6b4:	d000      	beq.n	bd6b8 <_strtol_l.constprop.0+0xe8>
   bd6b6:	1e69      	subs	r1, r5, #1
   bd6b8:	6011      	str	r1, [r2, #0]
   bd6ba:	e7f3      	b.n	bd6a4 <_strtol_l.constprop.0+0xd4>
   bd6bc:	2430      	movs	r4, #48	; 0x30
   bd6be:	2b00      	cmp	r3, #0
   bd6c0:	d1b1      	bne.n	bd626 <_strtol_l.constprop.0+0x56>
   bd6c2:	2308      	movs	r3, #8
   bd6c4:	e7af      	b.n	bd626 <_strtol_l.constprop.0+0x56>
   bd6c6:	2c30      	cmp	r4, #48	; 0x30
   bd6c8:	d0a5      	beq.n	bd616 <_strtol_l.constprop.0+0x46>
   bd6ca:	230a      	movs	r3, #10
   bd6cc:	e7ab      	b.n	bd626 <_strtol_l.constprop.0+0x56>
   bd6ce:	bf00      	nop
   bd6d0:	000beaab 	.word	0x000beaab

000bd6d4 <strtol>:
   bd6d4:	4613      	mov	r3, r2
   bd6d6:	460a      	mov	r2, r1
   bd6d8:	4601      	mov	r1, r0
   bd6da:	4802      	ldr	r0, [pc, #8]	; (bd6e4 <strtol+0x10>)
   bd6dc:	6800      	ldr	r0, [r0, #0]
   bd6de:	f7ff bf77 	b.w	bd5d0 <_strtol_l.constprop.0>
   bd6e2:	bf00      	nop
   bd6e4:	2003dee0 	.word	0x2003dee0

000bd6e8 <__register_exitproc>:
   bd6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd6ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bd7a8 <__register_exitproc+0xc0>
   bd6f0:	4606      	mov	r6, r0
   bd6f2:	f8d8 0000 	ldr.w	r0, [r8]
   bd6f6:	461f      	mov	r7, r3
   bd6f8:	460d      	mov	r5, r1
   bd6fa:	4691      	mov	r9, r2
   bd6fc:	f000 f856 	bl	bd7ac <__retarget_lock_acquire_recursive>
   bd700:	4b25      	ldr	r3, [pc, #148]	; (bd798 <__register_exitproc+0xb0>)
   bd702:	681c      	ldr	r4, [r3, #0]
   bd704:	b934      	cbnz	r4, bd714 <__register_exitproc+0x2c>
   bd706:	4c25      	ldr	r4, [pc, #148]	; (bd79c <__register_exitproc+0xb4>)
   bd708:	601c      	str	r4, [r3, #0]
   bd70a:	4b25      	ldr	r3, [pc, #148]	; (bd7a0 <__register_exitproc+0xb8>)
   bd70c:	b113      	cbz	r3, bd714 <__register_exitproc+0x2c>
   bd70e:	681b      	ldr	r3, [r3, #0]
   bd710:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bd714:	6863      	ldr	r3, [r4, #4]
   bd716:	2b1f      	cmp	r3, #31
   bd718:	dd07      	ble.n	bd72a <__register_exitproc+0x42>
   bd71a:	f8d8 0000 	ldr.w	r0, [r8]
   bd71e:	f000 f847 	bl	bd7b0 <__retarget_lock_release_recursive>
   bd722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bd726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd72a:	b34e      	cbz	r6, bd780 <__register_exitproc+0x98>
   bd72c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bd730:	b988      	cbnz	r0, bd756 <__register_exitproc+0x6e>
   bd732:	4b1c      	ldr	r3, [pc, #112]	; (bd7a4 <__register_exitproc+0xbc>)
   bd734:	b923      	cbnz	r3, bd740 <__register_exitproc+0x58>
   bd736:	f8d8 0000 	ldr.w	r0, [r8]
   bd73a:	f000 f838 	bl	bd7ae <__retarget_lock_release>
   bd73e:	e7f0      	b.n	bd722 <__register_exitproc+0x3a>
   bd740:	f44f 7084 	mov.w	r0, #264	; 0x108
   bd744:	f7fb f9b4 	bl	b8ab0 <malloc>
   bd748:	2800      	cmp	r0, #0
   bd74a:	d0f4      	beq.n	bd736 <__register_exitproc+0x4e>
   bd74c:	2300      	movs	r3, #0
   bd74e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bd752:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bd756:	6863      	ldr	r3, [r4, #4]
   bd758:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bd75c:	2201      	movs	r2, #1
   bd75e:	409a      	lsls	r2, r3
   bd760:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bd764:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bd768:	4313      	orrs	r3, r2
   bd76a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bd76e:	2e02      	cmp	r6, #2
   bd770:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bd774:	bf02      	ittt	eq
   bd776:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bd77a:	4313      	orreq	r3, r2
   bd77c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bd780:	6863      	ldr	r3, [r4, #4]
   bd782:	f8d8 0000 	ldr.w	r0, [r8]
   bd786:	1c5a      	adds	r2, r3, #1
   bd788:	3302      	adds	r3, #2
   bd78a:	6062      	str	r2, [r4, #4]
   bd78c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bd790:	f000 f80e 	bl	bd7b0 <__retarget_lock_release_recursive>
   bd794:	2000      	movs	r0, #0
   bd796:	e7c6      	b.n	bd726 <__register_exitproc+0x3e>
   bd798:	2003e7e8 	.word	0x2003e7e8
   bd79c:	2003e75c 	.word	0x2003e75c
   bd7a0:	00000000 	.word	0x00000000
   bd7a4:	000b8ab1 	.word	0x000b8ab1
   bd7a8:	2003df44 	.word	0x2003df44

000bd7ac <__retarget_lock_acquire_recursive>:
   bd7ac:	4770      	bx	lr

000bd7ae <__retarget_lock_release>:
   bd7ae:	4770      	bx	lr

000bd7b0 <__retarget_lock_release_recursive>:
   bd7b0:	4770      	bx	lr

000bd7b2 <link_code_end>:
	...

000bd7b4 <dynalib_user>:
   bd7b4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bd7c4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bd7d4:	7620 7269 7574 6c61 4600 6f72 206d 7325      virtual.From %s
   bd7e4:	7420 206f 7325 7720 7469 2068 6e69 6176      to %s with inva
   bd7f4:	696c 2064 6974 656d 4600 6f72 206d 7325     lid time.From %s
   bd804:	7420 206f 7325 4e00 646f 2065 6425 7220      to %s.Node %d r
   bd814:	7465 7972 7320 6174 6574 2520 2064 6964     etry state %d di
   bd824:	6563 6f20 2066 6425 7220 7465 7972 6920     ce of %d retry i
   bd834:	206e 6c25 2075 6573 6f63 646e 0073 6e6f     n %lu seconds.on
   bd844:	6f00 6666 2500 0054 6c53 6565 2070 6f66     .off.%T.Sleep fo
   bd854:	2072 6925 7320 6365 6e6f 7364 7520 746e     r %i seconds unt
   bd864:	6c69 6e20 7865 2074 7665 6e65 2074 7461     il next event at
   bd874:	2520 2073 6977 6874 7320 6e65 6f73 2072      %s with sensor 
   bd884:	7325 5700 6b6f 2065 6977 6874 7520 6573     %s.Woke with use
   bd894:	2072 7562 7474 6e6f 2d20 4c20 526f 2041     r button - LoRA 
   bd8a4:	7453 7461 0065 6f57 656b 7720 7469 2068     State.Woke with 
   bd8b4:	6573 736e 726f 6920 746e 7265 7572 7470     sensor interrupt
   bd8c4:	2d20 5220 6365 726f 2064 6f63 6e75 2074      - Record count 
   bd8d4:	6874 6e65 7320 656c 7065 4100 6f77 656b     then sleep.Awoke
   bd8e4:	6120 2074 7325 7720 7469 2068 6c25 2069      at %s with %li 
   bd8f4:	7266 6565 6d20 6d65 726f 0079 6146 6c69     free memory.Fail
   bd904:	6465 6920 206e 6164 6174 7320 6e65 2064     ed in data send 
   bd914:	7461 6574 706d 6974 676e 7220 7465 7972     attempting retry
   bd924:	5200 7365 7465 6974 676e 6420 7665 6369     .Resetting devic
   bd934:	0065 6e55 6564 6966 656e 2064 7245 6f72     e.Undefined Erro
   bd944:	2072 7453 7461 0065 6f4c 4152 4920 696e     r State.LoRA Ini
   bd954:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   bd964:	7275 2065 6c61 7265 2074 6f63 6564 2520     ure alert code %
   bd974:	2064 202d 6f70 6577 2072 7963 6c63 2065     d - power cycle 
   bd984:	6e69 3320 0030 6f4e 6564 6e20 6d75 6562     in 30.Node numbe
   bd994:	2072 6e69 6964 6163 6574 2064 6e75 6f63     r indicated unco
   bd9a4:	666e 6769 7275 6465 6e20 646f 2065 666f     nfigured node of
   bd9b4:	2520 2064 6573 7474 6e69 2067 6c61 7265      %d setting aler
   bd9c4:	2074 6f63 6564 7420 206f 6425 5300 6174     t code to %d.Sta
   bd9d4:	7472 7075 6320 6d6f 6c70 7465 2065 6f66     rtup complete fo
   bd9e4:	2072 6874 2065 6f4e 6564 7720 7469 2068     r the Node with 
   bd9f4:	6c61 7265 2074 6f63 6564 2520 0064 0000     alert code %d...

000bda04 <_ZTVN5spark10LogHandlerE>:
	...
   bda14:	40a5 000b 40cd 000b                         .@...@..

000bda1c <_ZTVN5spark16SerialLogHandlerE>:
	...
   bda24:	4189 000b 41bd 000b a179 000b 40cf 000b     .A...A..y....@..
   bda34:	6e69 7469 6620 6961 656c 0064 6f4c 4152     init failed.LoRA
   bda44:	5220 6461 6f69 6920 696e 6974 6c61 7a69      Radio initializ
   bda54:	6465 6120 2073 2061 6167 6574 6177 2079     ed as a gateway 
   bda64:	6977 6874 6120 6420 7665 6369 4965 2044     with a deviceID 
   bda74:	666f 2520 0073 6f4c 4152 5220 6461 6f69     of %s.LoRA Radio
   bda84:	6920 696e 6974 6c61 7a69 6465 6120 2073      initialized as 
   bda94:	6f6e 6564 2520 2069 6e61 2064 2061 6564     node %i and a de
   bdaa4:	6976 6563 4449 6f20 2066 7325 4c00 526f     viceID of %s.LoR
   bdab4:	2041 6152 6964 206f 6e69 7469 6169 696c     A Radio initiali
   bdac4:	657a 2064 7361 6120 206e 6e75 6f63 666e     zed as an unconf
   bdad4:	6769 7275 6465 6e20 646f 2065 6925 6120     igured node %i a
   bdae4:	646e 6120 6420 7665 6369 4965 2044 666f     nd a deviceID of
   bdaf4:	2520 0073 6553 646e 6e69 2067 6164 6174      %s.Sending data
   bdb04:	7220 7065 726f 2074 756e 626d 7265 2520      report number %
   bdb14:	0064 6144 6174 7220 7065 726f 2074 6564     d.Data report de
   bdb24:	696c 6576 6572 2064 202d 7573 6363 7365     livered - succes
   bdb34:	2073 6172 6574 2520 2e34 6632 4e00 646f     s rate %4.2f.Nod
   bdb44:	2065 6425 2d20 4420 7461 2061 6572 6f70     e %d - Data repo
   bdb54:	7472 7320 6e65 2064 6f74 6720 7461 7765     rt send to gatew
   bdb64:	7961 2520 2064 6166 6c69 6465 2d20 4e20     ay %d failed - N
   bdb74:	206f 6f52 7475 2065 202d 7573 6363 7365     o Route - succes
   bdb84:	2073 6172 6574 2520 2e34 6632 4e00 646f     s rate %4.2f.Nod
   bdb94:	2065 6425 2d20 4420 7461 2061 6572 6f70     e %d - Data repo
   bdba4:	7472 7320 6e65 2064 6f74 6720 7461 7765     rt send to gatew
   bdbb4:	7961 2520 2064 6166 6c69 6465 2d20 5520     ay %d failed - U
   bdbc4:	616e 6c62 2065 6f74 4420 6c65 7669 7265     nable to Deliver
   bdbd4:	2d20 7320 6375 6563 7373 7220 7461 2065      - success rate 
   bdbe4:	3425 322e 0066 6f4e 6564 2520 2064 202d     %4.2f.Node %d - 
   bdbf4:	6144 6174 7220 7065 726f 2074 6573 646e     Data report send
   bdc04:	7420 206f 6167 6574 6177 2079 6425 6620      to gateway %d f
   bdc14:	6961 656c 2064 2d20 5520 6b6e 6f6e 6e77     ailed  - Unknown
   bdc24:	2d20 7320 6375 6563 7373 7220 7461 2065      - success rate 
   bdc34:	3425 322e 0066 6977 6874 7700 7469 6f68     %4.2f.with.witho
   bdc44:	7475 6f00 6570 006e 6c63 736f 6465 5000     ut.open.closed.P
   bdc54:	7261 206b 7369 6320 6f6c 6573 2064 202d     ark is closed - 
   bdc64:	6572 6573 2074 7665 7265 7479 6968 676e     reset everything
   bdc74:	4400 7461 2061 6572 6f70 7472 6120 6b63     .Data report ack
   bdc84:	6f6e 6c77 6465 6567 2064 7325 6120 656c     nowledged %s ale
   bdc94:	7472 6620 726f 6d20 7365 6173 6567 2520     rt for message %
   bdca4:	2064 6170 6b72 6920 2073 7325 6120 646e     d park is %s and
   bdcb4:	6120 656c 7472 6320 646f 2065 7369 2520      alert code is %
   bdcc4:	0064 2061 6f4e 6564 754e 626d 7265 6920     d.a NodeNumber i
   bdcd4:	2073 656e 6465 6465 7400 6568 6320 6f6c     s needed.the clo
   bdce4:	6b63 6920 2073 6f6e 2074 6573 0074 6553     ck is not set.Se
   bdcf4:	646e 6e69 2067 6f6a 6e69 7220 7165 6575     nding join reque
   bdd04:	7473 6220 6365 7561 6573 2520 0073 6f4a     st because %s.Jo
   bdd14:	6e69 7220 7165 6575 7473 7320 6e65 2074     in request sent 
   bdd24:	6f74 6720 7461 7765 7961 7320 6375 6563     to gateway succe
   bdd34:	7373 7566 6c6c 0079 6f4a 6e69 7220 7165     ssfully.Join req
   bdd44:	6575 7473 7420 206f 6147 6574 6177 2079     uest to Gateway 
   bdd54:	6166 6c69 6465 4900 206e 6572 6563 7669     failed.In receiv
   bdd64:	2065 6f4a 6e69 4120 6b63 6f6e 6c77 6465     e Join Acknowled
   bdd74:	6567 4a00 696f 206e 6572 7571 7365 2074     ge.Join request 
   bdd84:	6361 6e6b 776f 656c 6764 6465 6120 646e     acknowledged and
   bdd94:	6e20 646f 2065 4449 7320 7465 7420 206f      node ID set to 
   bdda4:	6425 5300 6375 6563 7373 7320 6e65 6964     %d.Success sendi
   bddb4:	676e 4120 656c 7472 5220 7065 726f 2074     ng Alert Report 
   bddc4:	756e 626d 7265 2520 2064 6f74 6720 7461     number %d to gat
   bddd4:	7765 7961 6120 2074 6425 4e00 646f 2065     eway at %d.Node 
   bdde4:	202d 6c41 7265 2074 6552 6f70 7472 7320     - Alert Report s
   bddf4:	6e65 2064 6f74 4720 7461 7765 7961 6620     end to Gateway f
   bde04:	6961 656c 0064 6c41 7265 2074 6572 6f70     ailed.Alert repo
   bde14:	7472 6120 6b63 6f6e 6c77 6465 6567 0064     rt acknowledged.
   bde24:	614d 6967 2063 754e 626d 7265 6d20 7369     Magic Number mis
   bde34:	616d 6374 2068 202d 6769 6f6e 6972 676e     match - ignoring
   bde44:	6d20 7365 6173 6567 5200 6365 6965 6576      message.Receive
   bde54:	2064 7266 6d6f 6e20 646f 2065 6425 7720     d from node %d w
   bde64:	7469 2068 7372 6973 253d 2064 202d 2061     ith rssi=%d - a 
   bde74:	7325 6d20 7365 6173 6567 5300 7465 6320     %s message.Set c
   bde84:	6f6c 6b63 7420 206f 7325 6120 646e 7220     lock to %s and r
   bde94:	7065 726f 2074 7266 7165 6575 636e 2079     eport frequency 
   bdea4:	6f74 2520 2064 696d 756e 6574 0073 0000     to %d minutes...

000bdeb4 <_ZTV14LoRA_Functions>:
	...
   bdebc:	4d79 000b 4d7b 000b 6f4c 6461 6e69 2067     yM..{M..Loading 
   bdecc:	7973 7473 6d65 6420 6665 7561 746c 0073     system defaults.
   bdedc:	2041 656e 2077 6164 2079 202d 6572 6573     A new day - rese
   bdeec:	7474 6e69 2067 7665 7265 7479 6968 676e     tting everything
   bdefc:	0000 0000                                   ....

000bdf00 <_ZTV8MB85RC64>:
	...
   bdf08:	5555 000b 5569 000b 6bed 000b 6c83 000b     UU..iU...k...l..
   bdf18:	6d05 000b                                   .m..

000bdf1c <_ZTV13sysStatusData>:
	...
   bdf24:	5671 000b 55e1 000b 55bf 000b 8249 000b     qV...U...U..I...
   bdf34:	8271 000b 8365 000b 83fd 000b 557d 000b     q...e.......}U..
   bdf44:	5595 000b                                   .U..

000bdf48 <_ZTV17currentStatusData>:
	...
   bdf50:	5759 000b 55e1 000b 55bf 000b 8249 000b     YW...U...U..I...
   bdf60:	8271 000b 8365 000b 83fd 000b 5529 000b     q...e.......)U..
   bdf70:	5541 000b 6e49 7469 6c61 7a69 6e69 2067     AU..Initalizing 
   bdf80:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   bdf90:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   bdfa0:	6f43 666e 6769 0000                         Config..

000bdfa8 <BLUE_LED>:
   bdfa8:	0007                                        ..

000bdfaa <BUTTON_PIN>:
   bdfaa:	0004                                        ..

000bdfac <INT_PIN>:
   bdfac:	0012                                        ..

000bdfae <MODULE_POWER_PIN>:
   bdfae:	0011                                        ..

000bdfb0 <RFM95_CS>:
   bdfb0:	0005                                        ..

000bdfb2 <RFM95_INT>:
   bdfb2:	0002                                        ..

000bdfb4 <TMP36_SENSE_PIN>:
   bdfb4:	000f 6553 7474 6e69 2067 6176 756c 7365     ..Setting values
   bdfc4:	6620 726f 7420 6568 6e20 646f 0065 6e55      for the node.Un
   bdfd4:	6e6b 776f 006e 6f4e 656e 5700 4669 0069     known.None.WiFi.
   bdfe4:	5347 004d 4d55 5354 4300 4d44 0041 544c     GSM.UMTS.CDMA.LT
   bdff4:	0045 4549 4545 3038 3132 3435 4c00 4554     E.IEEE802154.LTE
   be004:	435f 5441 4d5f 0031 544c 5f45 4143 5f54     _CAT_M1.LTE_CAT_
   be014:	424e 0031 6f4e 2074 6843 7261 6967 676e     NB1.Not Charging
   be024:	4300 6168 6772 6465 4400 7369 6863 7261     .Charged.Dischar
   be034:	6967 676e 4600 7561 746c 4400 6369 6e6f     ging.Fault.Dicon
   be044:	656e 7463 6465 4100 7373 7265 6974 6e6f     nected.Assertion
   be054:	6146 6c69 7275 2065 702a 705f 6e69 3c20     Failure *p_pin <
   be064:	2820 3233 2b20 3120 2936 2500 2073 3a53      (32 + 16).%s S:
   be074:	3225 302e 2566 2c25 5120 253a 2e32 6630     %2.0f%%, Q:%2.0f
   be084:	2525 0020 6f43 6e75 2c74 6820 756f 6c72     %% .Count, hourl
   be094:	3a79 2520 2e69 6420 6961 796c 203a 6925     y: %i. daily: %i
   be0a4:	4100 7373 7265 6974 6e6f 6146 6c69 7275     .AssertionFailur
   be0b4:	2065 7273 2063 2626 7320 6372 3e2d 6163     e src && src->ca
   be0c4:	6c6c 6162 6b63 2500 2069 0043 dfd2 000b     llback.%i C.....
   be0d4:	dfda 000b dfdf 000b dfe4 000b dfe8 000b     ................
   be0e4:	dfed 000b dff2 000b dff6 000b e001 000b     ................
   be0f4:	e00c 000b 6166 6c69 6465 7420 206f 6572     ....failed to re
   be104:	6461 7220 6765 6441 7264 253d 3230 2078     ad regAddr=%02x 
   be114:	6f63 6e75 3d74 7525 6600 6961 656c 2064     count=%u.failed 
   be124:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   be134:	3025 7832 7320 6174 3d74 6425 4600 554f     %02x stat=%d.FOU
   be144:	2054 6964 2064 6f6e 2074 6f67 4820 4749     T did not go HIG
   be154:	0048 6f6e 2074 6564 6574 7463 6465 6600     H.not detected.f
   be164:	6961 656c 2064 6f74 7720 6972 6574 7220     ailed to write r
   be174:	6765 6441 7264 253d 3230 2078 7473 7461     egAddr=%02x stat
   be184:	253d 0064 6573 5774 5444 2520 0064 6177     =%d.setWDT %d.wa
   be194:	6374 6468 676f 6320 656c 7261 6465 6220     tchdog cleared b
   be1a4:	6552 7573 746c 253d 0064 6177 6374 6468     Result=%d.watchd
   be1b4:	676f 7320 7465 6620 756f 5372 6365 3d73     og set fourSecs=
   be1c4:	6425 6220 6552 7573 746c 253d 0064 4157     %d bResult=%d.WA
   be1d4:	4354 4448 474f 4400 4545 5f50 4f50 4557     TCHDOG.DEEP_POWE
   be1e4:	5f52 4f44 4e57 4300 554f 544e 4f44 4e57     R_DOWN.COUNTDOWN
   be1f4:	545f 4d49 5245 4100 414c 4d52 6600 6961     _TIMER.ALARM.fai
   be204:	756c 6572 6920 206e 7075 6164 6574 6157     lure in updateWa
   be214:	656b 6552 7361 6e6f 2520 0064 6177 656b     keReason %d.wake
   be224:	7220 6165 6f73 206e 203d 7325 6600 6961      reason = %s.fai
   be234:	756c 6572 6920 206e 6573 4374 756f 746e     lure in setCount
   be244:	6f64 6e77 6954 656d 2072 6425 6600 6961     downTimer %d.fai
   be254:	756c 6572 6920 206e 6564 7065 6f50 6577     lure in deepPowe
   be264:	4472 776f 206e 6425 5200 4745 535f 454c     rDown %d.REG_SLE
   be274:	5045 435f 5254 3d4c 7830 3225 0078 6964     EP_CTRL=0x%2x.di
   be284:	6e64 7427 7020 776f 7265 6420 776f 006e     dn't power down.
   be294:	3025 6434 252d 3230 2d64 3025 6432 2520     %04d-%02d-%02d %
   be2a4:	3230 3a64 3025 6432 253a 3230 0064 6567     02d:%02d:%02d.ge
   be2b4:	5274 6374 7341 6d54 2520 0073 6573 5274     tRtcAsTm %s.setR
   be2c4:	6374 7341 6d54 2520 0073 6166 6c69 7275     tcAsTm %s.failur
   be2d4:	2065 6e69 7320 7465 7452 4663 6f72 546d     e in setRtcFromT
   be2e4:	206d 6425 7300 7465 5220 4354 6620 6f72     m %d.set RTC fro
   be2f4:	206d 6c63 756f 2064 7325 7300 7465 7320     m cloud %s.set s
   be304:	7379 6574 206d 6c63 636f 206b 7266 6d6f     ystem clock from
   be314:	5220 4354 2520 0073 6166 6c69 6465 7420      RTC %s.failed t
   be324:	206f 6564 6574 7463 4120 3142 3038 0035     o detect AB1805.
   be334:	7061 2e70 6261 3831 3530 0000               app.ab1805..

000be340 <_ZTV6AB1805>:
	...
   be348:	6085 000b 6087 000b 66fd 000b 6783 000b     .`...`...f...g..

000be358 <_ZTV6MB85RC>:
	...
   be360:	6bad 000b 6baf 000b 6bed 000b 6c83 000b     .k...k...k...l..
   be370:	6d05 000b                                   .m..

000be374 <_ZTV15RHGenericDriver>:
	...
   be384:	6ec1 000b 40a5 000b 40a5 000b 40a5 000b     .n...@...@...@..
   be394:	40a5 000b 6f23 000b 6ec5 000b 6f73 000b     .@..#o...n..so..
   be3a4:	6f41 000b 6f97 000b 6ecf 000b 6ed7 000b     Ao...o...n...n..
   be3b4:	6edb 000b 6edf 000b 6ee3 000b 6ee7 000b     .n...n...n...n..
   be3c4:	6ed3 000b 6ef3 000b 6ef7 000b 6efb 000b     .n...n...n...n..
   be3d4:	6eff 000b 6f03 000b 6f09 000b 6f0d 000b     .n...o...o...o..
   be3e4:	6ecf 000b 6f11 000b 6f17 000b 6f1d 000b     .n...o...o...o..

000be3f4 <_ZTV12RHGenericSPI>:
	...
   be3fc:	40a5 000b 6ff5 000b 6ff7 000b 40a5 000b     .@...o...o...@..
   be40c:	40a5 000b 6fff 000b 7003 000b 7007 000b     .@...o...p...p..
   be41c:	6ff9 000b 6ffb 000b 6ffd 000b 6564 6166     .o...o...o..defa
   be42c:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   be43c:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   be44c:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   be45c:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000be46c <_ZTVN8particle11SPISettingsE>:
	...
   be474:	704d 000b 7021 000b 7023 000b               Mp..!p..#p..

000be480 <_ZTV13RHHardwareSPI>:
	...
   be488:	7101 000b 7115 000b 7123 000b 7131 000b     .q...q..#q..1q..
   be498:	719d 000b 6fff 000b 7003 000b 7007 000b     .q...o...p...p..
   be4a8:	71ab 000b 71bf 000b 71cd 000b               .q...q...q..

000be4b4 <_ZTV6RHMesh>:
	...
   be4bc:	7299 000b 7541 000b 71f9 000b 71e5 000b     .r..Au...q...q..

000be4cc <_ZTV8RHRouter>:
	...
   be4d4:	77ad 000b 77f1 000b                         .w...w..

000be4dc <_ZTV11RHSPIDriver>:
	...
   be4ec:	7a8d 000b 40a5 000b 40a5 000b 40a5 000b     .z...@...@...@..
   be4fc:	40a5 000b 6f23 000b 6ec5 000b 6f73 000b     .@..#o...n..so..
   be50c:	6f41 000b 6f97 000b 6ecf 000b 6ed7 000b     Ao...o...n...n..
   be51c:	6edb 000b 6edf 000b 6ee3 000b 6ee7 000b     .n...n...n...n..
   be52c:	6ed3 000b 6ef3 000b 6ef7 000b 6efb 000b     .n...n...n...n..
   be53c:	6eff 000b 6f03 000b 6f09 000b 6f0d 000b     .n...o...o...o..
   be54c:	6ecf 000b 6f11 000b 6f17 000b 6f1d 000b     .n...o...o...o..
   be55c:	7ab9 000b 7ac3 000b                         .z...z..

000be564 <_ZL18MODEM_CONFIG_TABLE>:
   be564:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000be574 <_ZTV7RH_RF95>:
	...
   be57c:	7c2b 000b 7c63 000b 8139 000b 7fcf 000b     +|..c|..9.......
   be58c:	7c99 000b 8017 000b 7c27 000b 6f23 000b     .|......'|..#o..
   be59c:	6ec5 000b 6f73 000b 6f41 000b 6f97 000b     .n..so..Ao...o..
   be5ac:	7c2d 000b 6ed7 000b 6edb 000b 6edf 000b     -|...n...n...n..
   be5bc:	6ee3 000b 6ee7 000b 6ed3 000b 6ef3 000b     .n...n...n...n..
   be5cc:	6ef7 000b 6efb 000b 6eff 000b 6f03 000b     .n...n...n...o..
   be5dc:	6f09 000b 6f0d 000b 7c73 000b 6f11 000b     .o...o..s|...o..
   be5ec:	6f17 000b 6f1d 000b 7ab9 000b 7ac3 000b     .o...o...z...z..
   be5fc:	7c23 000b 6f67 3a74 6d20 6761 6369 253d     #|..got: magic=%
   be60c:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   be61c:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   be62c:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   be63c:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   be64c:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   be65c:	253d 3830 0078 0000                         =%08x...

000be664 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   be66c:	8243 000b 828f 000b 8241 000b 8249 000b     C.......A...I...
   be67c:	8271 000b 8365 000b 83fd 000b               q...e.......

000be688 <_ZTVN5spark13CellularClassE>:
	...
   be690:	8c63 000b 8c59 000b 8c4f 000b 8c05 000b     c...Y...O.......
   be6a0:	8c43 000b 8c37 000b a4d1 000b a4d9 000b     C...7...........
   be6b0:	8c2b 000b 8c23 000b 8c19 000b 8c0f 000b     +...#...........
   be6c0:	a509 000b                                   ....

000be6c4 <_ZTV14CellularSignal>:
	...
   be6cc:	8cf1 000b 8d55 000b 8cf3 000b 8d65 000b     ....U.......e...
   be6dc:	8d99 000b 8dc5 000b 8df9 000b 8d19 000b     ................
   be6ec:	8cf7 000b 8d13 000b fffc ffff 0000 0000     ................
   be6fc:	8d4d 000b                                   M...

000be700 <_ZTVN5spark13EthernetClassE>:
	...
   be708:	8e9b 000b 8e91 000b 8e87 000b 8e7d 000b     ............}...
   be718:	8e71 000b 8e65 000b a4d1 000b a4d9 000b     q...e...........
   be728:	8e59 000b 8e51 000b 8e47 000b 8e3d 000b     Y...Q...G...=...
   be738:	a509 000b                                   ....

000be73c <_ZTV7TwoWire>:
	...
   be744:	8f6b 000b 8fb5 000b 8f8d 000b 8f6d 000b     k...........m...
   be754:	8f95 000b 8f9d 000b 8fa5 000b 8fad 000b     ................

000be764 <_ZTV9IPAddress>:
	...
   be76c:	9119 000b 9109 000b 910b 000b 2575 3430     ............u%04
   be77c:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   be78c:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   be79c:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   be7ac:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   be7bc:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   be7cc:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   be7dc:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000be7ec <_ZTVN5spark16JSONStreamWriterE>:
	...
   be7f4:	95c5 000b 95eb 000b 95a9 000b 9227 000b     ............'...

000be804 <_ZTVN5spark16StreamLogHandlerE>:
	...
   be80c:	9a21 000b 9a39 000b a179 000b 40cf 000b     !...9...y....@..

000be81c <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   be824:	9a4d 000b 9a61 000b a31d 000b 95b1 000b     M...a...........

000be834 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   be83c:	95c3 000b 95f9 000b a0dd 000b 95b3 000b     ................

000be84c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   be854:	95c1 000b 9607 000b 9989 000b 9629 000b     ............)...

000be864 <_ZTVN5spark12NetworkClassE>:
	...
   be86c:	a491 000b a49b 000b a4a5 000b a4af 000b     ................
   be87c:	a4b9 000b a4c5 000b a4d1 000b a4d9 000b     ................
   be88c:	a4e1 000b a4ed 000b a4f5 000b a4ff 000b     ................
   be89c:	a509 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000be8ac <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   be8ac:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   be8bc:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   be8cc:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   be8dc:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   be8ec:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   be8fc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000be90c <_ZTV11USARTSerial>:
	...
   be914:	b265 000b b2d1 000b b2a9 000b a759 000b     e...........Y...
   be924:	b279 000b b295 000b b287 000b b2a3 000b     y...............
   be934:	b267 000b b26b 000b                         g...k...

000be93c <_ZTV9USBSerial>:
	...
   be944:	b323 000b b38b 000b b361 000b a759 000b     #.......a...Y...
   be954:	b353 000b b325 000b b335 000b b385 000b     S...%...5.......
   be964:	b345 000b b31d 000b                         E.......

000be96c <_ZSt7nothrow>:
	...

000be978 <TWO52>:
   be978:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   be988:	2e25 7333 2520 332e 2573 6433 2520 322e     %.3s %.3s%3d %.2
   be998:	3a64 2e25 6432 253a 322e 2064 6425 000a     d:%.2d:%.2d %d..

000be9a8 <day_name.1>:
   be9a8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   be9b8:	6972 6153                                    riSat

000be9bd <mon_name.0>:
   be9bd:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   be9cd:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   be9dd:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   be9ed:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   be9fd:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bea0d:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bea1d:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bea2d:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bea3d:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bea4d:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bea5d:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bea6d:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bea7d:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bea8d:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bea9d:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000beaaa <_ctype_>:
   beaaa:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   beaba:	2020 2020 2020 2020 2020 2020 2020 2020                     
   beaca:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   beada:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   beaea:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   beafa:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   beb0a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   beb1a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   beb2a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bebab <link_const_variable_data_end>:
	...

000bebac <link_constructors_location>:
   bebac:	000b4c95 	.word	0x000b4c95
   bebb0:	000b54f1 	.word	0x000b54f1
   bebb4:	000b5bb5 	.word	0x000b5bb5
   bebb8:	000b6079 	.word	0x000b6079
   bebbc:	000b6b9d 	.word	0x000b6b9d
   bebc0:	000b71d5 	.word	0x000b71d5
   bebc4:	000b8bf5 	.word	0x000b8bf5
   bebc8:	000b8cc1 	.word	0x000b8cc1
   bebcc:	000b8ea5 	.word	0x000b8ea5
   bebd0:	000ba169 	.word	0x000ba169
   bebd4:	000ba5e1 	.word	0x000ba5e1
   bebd8:	000baa4d 	.word	0x000baa4d
   bebdc:	000baf11 	.word	0x000baf11
   bebe0:	000bb251 	.word	0x000bb251

000bebe4 <link_constructors_end>:
	...
