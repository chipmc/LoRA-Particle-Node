
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009650  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd670  000bd670  0000d670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd694  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  2003dd70  000bd698  0001dd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2003df38  2003df38  0002df38  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bd860  000bd860  0002d860  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bd88c  000bd88c  0002d88c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001f361d  00000000  00000000  0002d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00025126  00000000  00000000  00220ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004e714  00000000  00000000  00245fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00004200  00000000  00000000  002946e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000dcd0  00000000  00000000  002988e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00056c44  00000000  00000000  002a65b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0007a23b  00000000  00000000  002fd1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001462ed  00000000  00000000  00377436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bd5c  00000000  00000000  004bd724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 ffb7 	bl	bbfa4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 ffd9 	bl	bbff4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd70 	.word	0x2003dd70
   b404c:	000bd698 	.word	0x000bd698
   b4050:	2003df38 	.word	0x2003df38
   b4054:	2003df38 	.word	0x2003df38
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 f8ff 	bl	bb264 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd634 	.word	0x000bd634
   b4080:	000bd670 	.word	0x000bd670

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 bc04 	b.w	b4890 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f935 	bl	b42f8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 b89f 	b.w	bb1d4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bbe7 	b.w	b8868 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bbe5 	b.w	b8868 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bbeb 	b.w	b8878 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fab8 	bl	b8620 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8271 	.word	0x000b8271
   b40b8:	000bc3ac 	.word	0x000bc3ac

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z18outOfMemoryHandleryi+0x8>)
   b40ce:	601a      	str	r2, [r3, #0]
}
   b40d0:	4770      	bx	lr
   b40d2:	bf00      	nop
   b40d4:	2003dd70 	.word	0x2003dd70

000b40d8 <_Z13userSwitchISRv>:

void userSwitchISR() {
  	userSwitchDectected = true;                                          	// The the flag for the user switch interrupt
   b40d8:	4b01      	ldr	r3, [pc, #4]	; (b40e0 <_Z13userSwitchISRv+0x8>)
   b40da:	2201      	movs	r2, #1
   b40dc:	701a      	strb	r2, [r3, #0]
}
   b40de:	4770      	bx	lr
   b40e0:	2003df8b 	.word	0x2003df8b

000b40e4 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b40e4:	b530      	push	{r4, r5, lr}
   b40e6:	b085      	sub	sp, #20
   b40e8:	4604      	mov	r4, r0
   b40ea:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b40ec:	b160      	cbz	r0, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b40ee:	6840      	ldr	r0, [r0, #4]
   b40f0:	b150      	cbz	r0, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b40f2:	6885      	ldr	r5, [r0, #8]
   b40f4:	b145      	cbz	r5, b4108 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b40f6:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b40fa:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b40fe:	68c4      	ldr	r4, [r0, #12]
   b4100:	ab01      	add	r3, sp, #4
   b4102:	466a      	mov	r2, sp
   b4104:	a902      	add	r1, sp, #8
   b4106:	47a0      	blx	r4
    }
   b4108:	b005      	add	sp, #20
   b410a:	bd30      	pop	{r4, r5, pc}

000b410c <_Z9sensorISRv>:

void sensorISR()
{
   b410c:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b410e:	4c08      	ldr	r4, [pc, #32]	; (b4130 <_Z9sensorISRv+0x24>)
   b4110:	7823      	ldrb	r3, [r4, #0]
   b4112:	b12b      	cbz	r3, b4120 <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              		// sets the sensor flag for the main loop
   b4114:	4b07      	ldr	r3, [pc, #28]	; (b4134 <_Z9sensorISRv+0x28>)
   b4116:	2201      	movs	r2, #1
   b4118:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b411a:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b411c:	7023      	strb	r3, [r4, #0]
}
   b411e:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {               	// Counts the rear tire for pressure sensors and once for PIR
   b4120:	f001 f8d6 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4124:	f001 fa69 	bl	b55fa <_ZNK13sysStatusData14get_sensorTypeEv>
   b4128:	2800      	cmp	r0, #0
   b412a:	d1f3      	bne.n	b4114 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b412c:	2301      	movs	r3, #1
   b412e:	e7f5      	b.n	b411c <_Z9sensorISRv+0x10>
   b4130:	2003df40 	.word	0x2003df40
   b4134:	2003df89 	.word	0x2003df89

000b4138 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4138:	b530      	push	{r4, r5, lr}
   b413a:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b413c:	6800      	ldr	r0, [r0, #0]
   b413e:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b4140:	9301      	str	r3, [sp, #4]
   b4142:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b4146:	6883      	ldr	r3, [r0, #8]
   b4148:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b414c:	b90b      	cbnz	r3, b4152 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b414e:	f007 fa1f 	bl	bb590 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4152:	68c3      	ldr	r3, [r0, #12]
   b4154:	aa01      	add	r2, sp, #4
   b4156:	a902      	add	r1, sp, #8
   b4158:	4798      	blx	r3
      }
   b415a:	b005      	add	sp, #20
   b415c:	bd30      	pop	{r4, r5, pc}

000b415e <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b415e:	2a01      	cmp	r2, #1
   b4160:	d102      	bne.n	b4168 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4162:	6001      	str	r1, [r0, #0]
      }
   b4164:	2000      	movs	r0, #0
   b4166:	4770      	bx	lr
	  switch (__op)
   b4168:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b416a:	bf04      	itt	eq
   b416c:	680b      	ldreq	r3, [r1, #0]
   b416e:	6003      	streq	r3, [r0, #0]
	      break;
   b4170:	e7f8      	b.n	b4164 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4172 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4172:	6803      	ldr	r3, [r0, #0]
   b4174:	6812      	ldr	r2, [r2, #0]
   b4176:	e9d1 0100 	ldrd	r0, r1, [r1]
   b417a:	4718      	bx	r3

000b417c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b417c:	b510      	push	{r4, lr}
      if (_M_manager)
   b417e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4180:	4604      	mov	r4, r0
      if (_M_manager)
   b4182:	b113      	cbz	r3, b418a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4184:	2203      	movs	r2, #3
   b4186:	4601      	mov	r1, r0
   b4188:	4798      	blx	r3
    }
   b418a:	4620      	mov	r0, r4
   b418c:	bd10      	pop	{r4, pc}

000b418e <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b418e:	b510      	push	{r4, lr}
            delete callableWrapper;
   b4190:	4604      	mov	r4, r0
   b4192:	b138      	cbz	r0, b41a4 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b4194:	f7ff fff2 	bl	b417c <_ZNSt14_Function_baseD1Ev>
   b4198:	4620      	mov	r0, r4
   b419a:	2110      	movs	r1, #16
        };
   b419c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b41a0:	f7ff bf7d 	b.w	b409e <_ZdlPvj>
        };
   b41a4:	bd10      	pop	{r4, pc}
	...

000b41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b41aa:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b41ac:	4605      	mov	r5, r0
   b41ae:	460f      	mov	r7, r1
   b41b0:	4616      	mov	r6, r2
        if (valid_) {
   b41b2:	b18b      	cbz	r3, b41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b41b4:	6803      	ldr	r3, [r0, #0]
   b41b6:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b41b8:	b183      	cbz	r3, b41dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b41ba:	889a      	ldrh	r2, [r3, #4]
   b41bc:	2a01      	cmp	r2, #1
   b41be:	d006      	beq.n	b41ce <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b41c0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b41c2:	e7f9      	b.n	b41b8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b41c4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b41c6:	b14b      	cbz	r3, b41dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b41c8:	889a      	ldrh	r2, [r3, #4]
   b41ca:	2a01      	cmp	r2, #1
   b41cc:	d1fa      	bne.n	b41c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b41ce:	b12b      	cbz	r3, b41dc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b41d0:	899a      	ldrh	r2, [r3, #12]
   b41d2:	42ba      	cmp	r2, r7
   b41d4:	d1f6      	bne.n	b41c4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b41d6:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b41d8:	4628      	mov	r0, r5
   b41da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b41dc:	490a      	ldr	r1, [pc, #40]	; (b4208 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b41de:	2010      	movs	r0, #16
   b41e0:	f007 f9d2 	bl	bb588 <_ZnwjRKSt9nothrow_t>
   b41e4:	4604      	mov	r4, r0
   b41e6:	b168      	cbz	r0, b4204 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b41e8:	2210      	movs	r2, #16
   b41ea:	2100      	movs	r1, #0
   b41ec:	f007 ff02 	bl	bbff4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b41f0:	4b06      	ldr	r3, [pc, #24]	; (b420c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b41f2:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b41f4:	2301      	movs	r3, #1
   b41f6:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b41f8:	692b      	ldr	r3, [r5, #16]
   b41fa:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b41fc:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b41fe:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4200:	612c      	str	r4, [r5, #16]
   b4202:	e7e9      	b.n	b41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4204:	7528      	strb	r0, [r5, #20]
                return *this;
   b4206:	e7e7      	b.n	b41d8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b4208:	000bd410 	.word	0x000bd410
   b420c:	00030010 	.word	0x00030010

000b4210 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4210:	b40e      	push	{r1, r2, r3}
   b4212:	b500      	push	{lr}
   b4214:	b08c      	sub	sp, #48	; 0x30
   b4216:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4218:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b421c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4220:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4222:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4226:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4228:	6801      	ldr	r1, [r0, #0]
   b422a:	aa04      	add	r2, sp, #16
   b422c:	201e      	movs	r0, #30
    attr.flags = 0;
   b422e:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4232:	f004 fa05 	bl	b8640 <log_message_v>
}
   b4236:	b00c      	add	sp, #48	; 0x30
   b4238:	f85d eb04 	ldr.w	lr, [sp], #4
   b423c:	b003      	add	sp, #12
   b423e:	4770      	bx	lr

000b4240 <_Z22publishStateTransitionv>:
{
   b4240:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4242:	4e13      	ldr	r6, [pc, #76]	; (b4290 <_Z22publishStateTransitionv+0x50>)
   b4244:	4c13      	ldr	r4, [pc, #76]	; (b4294 <_Z22publishStateTransitionv+0x54>)
   b4246:	7832      	ldrb	r2, [r6, #0]
   b4248:	4d13      	ldr	r5, [pc, #76]	; (b4298 <_Z22publishStateTransitionv+0x58>)
   b424a:	2a02      	cmp	r2, #2
{
   b424c:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE) {
   b424e:	d117      	bne.n	b4280 <_Z22publishStateTransitionv+0x40>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4250:	f006 fe74 	bl	baf3c <_ZN9TimeClass7isValidEv>
   b4254:	7832      	ldrb	r2, [r6, #0]
   b4256:	782b      	ldrb	r3, [r5, #0]
   b4258:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b425c:	9200      	str	r2, [sp, #0]
   b425e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b4262:	b998      	cbnz	r0, b428c <_Z22publishStateTransitionv+0x4c>
   b4264:	4a0d      	ldr	r2, [pc, #52]	; (b429c <_Z22publishStateTransitionv+0x5c>)
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4266:	f44f 7180 	mov.w	r1, #256	; 0x100
   b426a:	a802      	add	r0, sp, #8
   b426c:	f004 fb1c 	bl	b88a8 <snprintf>
	oldState = state;
   b4270:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b4272:	480b      	ldr	r0, [pc, #44]	; (b42a0 <_Z22publishStateTransitionv+0x60>)
	oldState = state;
   b4274:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4276:	a902      	add	r1, sp, #8
   b4278:	f7ff ffca 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
}
   b427c:	b042      	add	sp, #264	; 0x108
   b427e:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b4280:	782b      	ldrb	r3, [r5, #0]
   b4282:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4286:	9200      	str	r2, [sp, #0]
   b4288:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b428c:	4a05      	ldr	r2, [pc, #20]	; (b42a4 <_Z22publishStateTransitionv+0x64>)
   b428e:	e7ea      	b.n	b4266 <_Z22publishStateTransitionv+0x26>
   b4290:	2003df8a 	.word	0x2003df8a
   b4294:	2003dd74 	.word	0x2003dd74
   b4298:	2003df88 	.word	0x2003df88
   b429c:	000bc3c1 	.word	0x000bc3c1
   b42a0:	2003e658 	.word	0x2003e658
   b42a4:	000bc3e1 	.word	0x000bc3e1

000b42a8 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 0 if no event is scheduled or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {												// Time till next scheduled event
   b42a8:	b538      	push	{r3, r4, r5, lr}
	unsigned long secondsToReturn = 0;
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b42aa:	f001 f811 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b42ae:	f001 f8d6 	bl	b545e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b42b2:	4605      	mov	r5, r0
   	if (Time.isValid()) {
   b42b4:	f006 fe42 	bl	baf3c <_ZN9TimeClass7isValidEv>
   b42b8:	4604      	mov	r4, r0
   b42ba:	b1a8      	cbz	r0, b42e8 <_Z21secondsUntilNextEventv+0x40>
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // Adding one second to reduce prospect of round tripping to IDLE
   b42bc:	f006 fe5b 	bl	baf76 <_ZN9TimeClass3nowEv>
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b42c0:	243c      	movs	r4, #60	; 0x3c
   b42c2:	4365      	muls	r5, r4
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 0UL, wakeBoundary);  // Adding one second to reduce prospect of round tripping to IDLE
   b42c4:	fbb0 f4f5 	udiv	r4, r0, r5
   b42c8:	fb04 0015 	mls	r0, r4, r5, r0
   b42cc:	1a2c      	subs	r4, r5, r0
   b42ce:	42ac      	cmp	r4, r5
   b42d0:	bf28      	it	cs
   b42d2:	462c      	movcs	r4, r5
        Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
   b42d4:	f000 fffc 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b42d8:	f001 f8c1 	bl	b545e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b42dc:	4904      	ldr	r1, [pc, #16]	; (b42f0 <_Z21secondsUntilNextEventv+0x48>)
   b42de:	4602      	mov	r2, r0
   b42e0:	4623      	mov	r3, r4
   b42e2:	4804      	ldr	r0, [pc, #16]	; (b42f4 <_Z21secondsUntilNextEventv+0x4c>)
   b42e4:	f7ff ff94 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    }
	return secondsToReturn + 10;											// Add an off-set - need to refine this later.
   b42e8:	f104 000a 	add.w	r0, r4, #10
   b42ec:	bd38      	pop	{r3, r4, r5, pc}
   b42ee:	bf00      	nop
   b42f0:	000bc3ef 	.word	0x000bc3ef
   b42f4:	2003e658 	.word	0x2003e658

000b42f8 <loop>:
void loop() {
   b42f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (state) {
   b42fc:	4ca2      	ldr	r4, [pc, #648]	; (b4588 <loop+0x290>)
   b42fe:	7823      	ldrb	r3, [r4, #0]
   b4300:	3b01      	subs	r3, #1
void loop() {
   b4302:	b08a      	sub	sp, #40	; 0x28
   b4304:	2b03      	cmp	r3, #3
   b4306:	f200 80ba 	bhi.w	b447e <loop+0x186>
   b430a:	e8df f013 	tbh	[pc, r3, lsl #1]
   b430e:	0161      	.short	0x0161
   b4310:	00240004 	.word	0x00240004
   b4314:	00fc      	.short	0x00fc
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4316:	4b9d      	ldr	r3, [pc, #628]	; (b458c <loop+0x294>)
   b4318:	781b      	ldrb	r3, [r3, #0]
   b431a:	2b02      	cmp	r3, #2
   b431c:	d001      	beq.n	b4322 <loop+0x2a>
   b431e:	f7ff ff8f 	bl	b4240 <_Z22publishStateTransitionv>
  			if (Time.isValid() && Time.day() != Time.day(current.get_lastCountTime())) resetEverything();           // Check to see if the device was last on in a different day
   b4322:	f006 fe0b 	bl	baf3c <_ZN9TimeClass7isValidEv>
   b4326:	b160      	cbz	r0, b4342 <loop+0x4a>
   b4328:	f006 fe36 	bl	baf98 <_ZN9TimeClass3dayEv>
   b432c:	4605      	mov	r5, r0
   b432e:	f001 f813 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4332:	f001 f9a7 	bl	b5684 <_ZNK17currentStatusData17get_lastCountTimeEv>
   b4336:	f006 fcfd 	bl	bad34 <_ZN9TimeClass3dayEx>
   b433a:	4285      	cmp	r5, r0
   b433c:	d001      	beq.n	b4342 <loop+0x4a>
   b433e:	f001 f9d9 	bl	b56f4 <_Z15resetEverythingv>
			if (current.get_alertCodeNode() != 0) state = ERROR_STATE;
   b4342:	f001 f809 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4346:	f001 f900 	bl	b554a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b434a:	b110      	cbz	r0, b4352 <loop+0x5a>
   b434c:	2301      	movs	r3, #1
				state = IDLE_STATE;
   b434e:	7023      	strb	r3, [r4, #0]
			break;
   b4350:	e095      	b.n	b447e <loop+0x186>
			else state = LoRA_STATE;		   								// If time is valid - wake on the right minute of the hour
   b4352:	2304      	movs	r3, #4
   b4354:	e7fb      	b.n	b434e <loop+0x56>
			if (state != oldState) publishStateTransition();              	// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4356:	4b8d      	ldr	r3, [pc, #564]	; (b458c <loop+0x294>)
   b4358:	781b      	ldrb	r3, [r3, #0]
   b435a:	2b03      	cmp	r3, #3
   b435c:	d001      	beq.n	b4362 <loop+0x6a>
   b435e:	f7ff ff6f 	bl	b4240 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b4362:	2100      	movs	r1, #0
   b4364:	488a      	ldr	r0, [pc, #552]	; (b4590 <loop+0x298>)
   b4366:	f001 fea5 	bl	b60b4 <_ZN6AB18056setWDTEi>
			wakeInSeconds = secondsUntilNextEvent();						// Figure out how long to sleep 
   b436a:	f7ff ff9d 	bl	b42a8 <_Z21secondsUntilNextEventv>
   b436e:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b4370:	f006 fde4 	bl	baf3c <_ZN9TimeClass7isValidEv>
   b4374:	4605      	mov	r5, r0
   b4376:	2800      	cmp	r0, #0
   b4378:	d034      	beq.n	b43e4 <loop+0xec>
   b437a:	f006 fdfc 	bl	baf76 <_ZN9TimeClass3nowEv>
   b437e:	19c2      	adds	r2, r0, r7
   b4380:	17d3      	asrs	r3, r2, #31
   b4382:	a806      	add	r0, sp, #24
   b4384:	f006 fcf2 	bl	bad6c <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4388:	9b06      	ldr	r3, [sp, #24]
   b438a:	4982      	ldr	r1, [pc, #520]	; (b4594 <loop+0x29c>)
   b438c:	4882      	ldr	r0, [pc, #520]	; (b4598 <loop+0x2a0>)
   b438e:	463a      	mov	r2, r7
   b4390:	f7ff ff3e 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4394:	b115      	cbz	r5, b439c <loop+0xa4>
   b4396:	a806      	add	r0, sp, #24
   b4398:	f006 faf8 	bl	ba98c <_ZN6StringD1Ev>
        if (valid_) {
   b439c:	4b7f      	ldr	r3, [pc, #508]	; (b459c <loop+0x2a4>)
   b439e:	7d1a      	ldrb	r2, [r3, #20]
   b43a0:	b10a      	cbz	r2, b43a6 <loop+0xae>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b43a2:	2202      	movs	r2, #2
   b43a4:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b43a6:	4b7e      	ldr	r3, [pc, #504]	; (b45a0 <loop+0x2a8>)
   b43a8:	487c      	ldr	r0, [pc, #496]	; (b459c <loop+0x2a4>)
   b43aa:	f8b3 9000 	ldrh.w	r9, [r3]
   b43ae:	2200      	movs	r2, #0
   b43b0:	4649      	mov	r1, r9
   b43b2:	f7ff fef9 	bl	b41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b43b6:	4b7b      	ldr	r3, [pc, #492]	; (b45a4 <loop+0x2ac>)
   b43b8:	f8b3 a000 	ldrh.w	sl, [r3]
   b43bc:	2201      	movs	r2, #1
   b43be:	4651      	mov	r1, sl
   b43c0:	f7ff fef2 	bl	b41a8 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b43c4:	7d03      	ldrb	r3, [r0, #20]
   b43c6:	4606      	mov	r6, r0
   b43c8:	b313      	cbz	r3, b4410 <loop+0x118>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b43ca:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b43cc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b43d0:	68db      	ldr	r3, [r3, #12]
   b43d2:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b43d6:	b13b      	cbz	r3, b43e8 <loop+0xf0>
            if (start->type == type) {
   b43d8:	889a      	ldrh	r2, [r3, #4]
   b43da:	2a04      	cmp	r2, #4
   b43dc:	f000 81ae 	beq.w	b473c <loop+0x444>
            start = start->next;
   b43e0:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b43e2:	e7f8      	b.n	b43d6 <loop+0xde>
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b43e4:	4b70      	ldr	r3, [pc, #448]	; (b45a8 <loop+0x2b0>)
   b43e6:	e7d0      	b.n	b438a <loop+0x92>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b43e8:	4970      	ldr	r1, [pc, #448]	; (b45ac <loop+0x2b4>)
   b43ea:	2010      	movs	r0, #16
   b43ec:	f007 f8cc 	bl	bb588 <_ZnwjRKSt9nothrow_t>
   b43f0:	4605      	mov	r5, r0
   b43f2:	2800      	cmp	r0, #0
   b43f4:	f000 81a0 	beq.w	b4738 <loop+0x440>
   b43f8:	2210      	movs	r2, #16
   b43fa:	2100      	movs	r1, #0
   b43fc:	f007 fdfa 	bl	bbff4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b4400:	4b6b      	ldr	r3, [pc, #428]	; (b45b0 <loop+0x2b8>)
   b4402:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b4404:	2304      	movs	r3, #4
   b4406:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4408:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b440a:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b440e:	6135      	str	r5, [r6, #16]
			SystemSleepResult result = System.sleep(config);              	// Put the device to sleep device continues operations from here
   b4410:	4962      	ldr	r1, [pc, #392]	; (b459c <loop+0x2a4>)
   b4412:	a803      	add	r0, sp, #12
   b4414:	f006 fbc6 	bl	baba4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return hal_timer_millis(nullptr);
   b4418:	2000      	movs	r0, #0
   b441a:	f003 ff41 	bl	b82a0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b441e:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b4422:	4605      	mov	r5, r0
   b4424:	2000      	movs	r0, #0
   b4426:	f003 ff3b 	bl	b82a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b442a:	1b40      	subs	r0, r0, r5
   b442c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4430:	42b0      	cmp	r0, r6
   b4432:	f171 0300 	sbcs.w	r3, r1, #0
   b4436:	d207      	bcs.n	b4448 <loop+0x150>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b4438:	f006 fe84 	bl	bb144 <_Z16_fetch_usbserialv>
   b443c:	f006 fe77 	bl	bb12e <_ZN9USBSerial11isConnectedEv>
   b4440:	b910      	cbnz	r0, b4448 <loop+0x150>
            spark_process();
   b4442:	f004 f989 	bl	b8758 <spark_process>
        while (_while() && !_condition()) {
   b4446:	e7ed      	b.n	b4424 <loop+0x12c>
   b4448:	f006 fe7c 	bl	bb144 <_Z16_fetch_usbserialv>
   b444c:	f006 fe6f 	bl	bb12e <_ZN9USBSerial11isConnectedEv>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b4450:	484f      	ldr	r0, [pc, #316]	; (b4590 <loop+0x298>)
   b4452:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4456:	f001 fe2d 	bl	b60b4 <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b445a:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b445c:	b363      	cbz	r3, b44b8 <loop+0x1c0>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b445e:	889a      	ldrh	r2, [r3, #4]
   b4460:	2a01      	cmp	r2, #1
   b4462:	d129      	bne.n	b44b8 <loop+0x1c0>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b4464:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                         // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b4466:	4599      	cmp	r9, r3
   b4468:	d129      	bne.n	b44be <loop+0x1c6>
				Log.info("Woke with user button - LoRA State");
   b446a:	4952      	ldr	r1, [pc, #328]	; (b45b4 <loop+0x2bc>)
   b446c:	484a      	ldr	r0, [pc, #296]	; (b4598 <loop+0x2a0>)
   b446e:	f7ff fecf 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
				state = LoRA_STATE;
   b4472:	2304      	movs	r3, #4
        if (wakeupSource_) {
   b4474:	9803      	ldr	r0, [sp, #12]
				state = IDLE_STATE;
   b4476:	7023      	strb	r3, [r4, #0]
   b4478:	b108      	cbz	r0, b447e <loop+0x186>
            free(wakeupSource_);
   b447a:	f004 f9fd 	bl	b8878 <free>
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b447e:	4844      	ldr	r0, [pc, #272]	; (b4590 <loop+0x298>)
	if (sensorDetect) {														// Count the pulse and reset for next
   b4480:	4c4d      	ldr	r4, [pc, #308]	; (b45b8 <loop+0x2c0>)
	ab1805.loop();                                  						// Keeps the RTC synchronized with the Boron's clock
   b4482:	f002 f9c3 	bl	b680c <_ZN6AB18054loopEv>
	current.loop();
   b4486:	f000 ff67 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b448a:	f000 ff80 	bl	b538e <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b448e:	f000 ff1f 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4492:	f000 ff3a 	bl	b530a <_ZN13sysStatusData4loopEv>
	if (sensorDetect) {														// Count the pulse and reset for next
   b4496:	7823      	ldrb	r3, [r4, #0]
   b4498:	b123      	cbz	r3, b44a4 <loop+0x1ac>
		if (recordCount()) sensorDetect = false;
   b449a:	f001 fb91 	bl	b5bc0 <_Z11recordCountv>
   b449e:	b108      	cbz	r0, b44a4 <loop+0x1ac>
   b44a0:	2300      	movs	r3, #0
   b44a2:	7023      	strb	r3, [r4, #0]
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b44a4:	4b45      	ldr	r3, [pc, #276]	; (b45bc <loop+0x2c4>)
   b44a6:	681b      	ldr	r3, [r3, #0]
   b44a8:	2b00      	cmp	r3, #0
   b44aa:	f2c0 814a 	blt.w	b4742 <loop+0x44a>
}
   b44ae:	b00a      	add	sp, #40	; 0x28
   b44b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		System.reset();
   b44b4:	f006 bb73 	b.w	bab9e <_ZN11SystemClass5resetEv>
            return std::numeric_limits<pin_t>::max();
   b44b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b44bc:	e7d3      	b.n	b4466 <loop+0x16e>
			else if (result.wakeupPin() == INT_PIN) {
   b44be:	459a      	cmp	sl, r3
   b44c0:	d10b      	bne.n	b44da <loop+0x1e2>
				Log.info("Woke with sensor interrupt - Record count then sleep");
   b44c2:	493f      	ldr	r1, [pc, #252]	; (b45c0 <loop+0x2c8>)
   b44c4:	4834      	ldr	r0, [pc, #208]	; (b4598 <loop+0x2a0>)
   b44c6:	f7ff fea3 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
				if (recordCount()) sensorDetect = false;					// Record count and reset flag
   b44ca:	f001 fb79 	bl	b5bc0 <_Z11recordCountv>
   b44ce:	b110      	cbz	r0, b44d6 <loop+0x1de>
   b44d0:	4b39      	ldr	r3, [pc, #228]	; (b45b8 <loop+0x2c0>)
   b44d2:	2200      	movs	r2, #0
   b44d4:	701a      	strb	r2, [r3, #0]
				state = SLEEPING_STATE;
   b44d6:	2303      	movs	r3, #3
   b44d8:	e7cc      	b.n	b4474 <loop+0x17c>
				Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b44da:	f006 fd4c 	bl	baf76 <_ZN9TimeClass3nowEv>
   b44de:	19c2      	adds	r2, r0, r7
   b44e0:	17d3      	asrs	r3, r2, #31
   b44e2:	a806      	add	r0, sp, #24
   b44e4:	f006 fc42 	bl	bad6c <_ZN9TimeClass7timeStrEx>
   b44e8:	9a06      	ldr	r2, [sp, #24]
   b44ea:	9201      	str	r2, [sp, #4]
   b44ec:	f006 fbba 	bl	bac64 <_ZN11SystemClass10freeMemoryEv>
   b44f0:	9a01      	ldr	r2, [sp, #4]
   b44f2:	4934      	ldr	r1, [pc, #208]	; (b45c4 <loop+0x2cc>)
   b44f4:	4603      	mov	r3, r0
   b44f6:	4828      	ldr	r0, [pc, #160]	; (b4598 <loop+0x2a0>)
   b44f8:	f7ff fe8a 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b44fc:	a806      	add	r0, sp, #24
   b44fe:	f006 fa45 	bl	ba98c <_ZN6StringD1Ev>
				state = IDLE_STATE;
   b4502:	2302      	movs	r3, #2
   b4504:	e7b6      	b.n	b4474 <loop+0x17c>
			if (state != oldState) {
   b4506:	4b21      	ldr	r3, [pc, #132]	; (b458c <loop+0x294>)
   b4508:	781b      	ldrb	r3, [r3, #0]
   b450a:	2b04      	cmp	r3, #4
   b450c:	d017      	beq.n	b453e <loop+0x246>
				publishStateTransition();                   				// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b450e:	f7ff fe97 	bl	b4240 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();
   b4512:	f000 fae1 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b4516:	f000 fb6b 	bl	b4bf0 <_ZN14LoRA_Functions11clearBufferEv>
				takeMeasurements();
   b451a:	f001 fc65 	bl	b5de8 <_Z16takeMeasurementsv>
				lastPublish = Time.now();
   b451e:	f006 fd2a 	bl	baf76 <_ZN9TimeClass3nowEv>
   b4522:	4b29      	ldr	r3, [pc, #164]	; (b45c8 <loop+0x2d0>)
   b4524:	17c2      	asrs	r2, r0, #31
   b4526:	e9c3 0200 	strd	r0, r2, [r3]
				if (!LoRA_Functions::instance().composeDataReportNode()) {
   b452a:	f000 fad5 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b452e:	f000 fb75 	bl	b4c1c <_ZN14LoRA_Functions21composeDataReportNodeEv>
   b4532:	b920      	cbnz	r0, b453e <loop+0x246>
					Log.info("Failed in data send");
   b4534:	4925      	ldr	r1, [pc, #148]	; (b45cc <loop+0x2d4>)
   b4536:	4818      	ldr	r0, [pc, #96]	; (b4598 <loop+0x2a0>)
   b4538:	f7ff fe6a 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
					break;
   b453c:	e79f      	b.n	b447e <loop+0x186>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b453e:	f003 fe9f 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
			while (millis() - startListening < 5000) {
   b4542:	f241 3687 	movw	r6, #4999	; 0x1387
   b4546:	4605      	mov	r5, r0
   b4548:	f003 fe9a 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b454c:	1b40      	subs	r0, r0, r5
   b454e:	42b0      	cmp	r0, r6
   b4550:	d814      	bhi.n	b457c <loop+0x284>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {// Listen for acknowledgement
   b4552:	f000 fac1 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b4556:	f000 fd0f 	bl	b4f78 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b455a:	2800      	cmp	r0, #0
   b455c:	d0f4      	beq.n	b4548 <loop+0x250>
					current.set_hourlyCount(0);								// Zero the hourly count
   b455e:	f000 fefb 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4562:	2100      	movs	r1, #0
   b4564:	f000 ffbf 	bl	b54e6 <_ZN17currentStatusData15set_hourlyCountEt>
					sysStatus.set_lastConnection(Time.now());
   b4568:	f000 feb2 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b456c:	4605      	mov	r5, r0
   b456e:	f006 fd02 	bl	baf76 <_ZN9TimeClass3nowEv>
   b4572:	4602      	mov	r2, r0
   b4574:	17c3      	asrs	r3, r0, #31
   b4576:	4628      	mov	r0, r5
   b4578:	f001 f8ad 	bl	b56d6 <_ZN13sysStatusData18set_lastConnectionEx>
			LoRA_Functions::instance().sleepLoRaRadio();					// Done with LoRA - put radio to sleep
   b457c:	f000 faac 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b4580:	f000 fb46 	bl	b4c10 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
			state = SLEEPING_STATE;
   b4584:	2303      	movs	r3, #3
   b4586:	e6e2      	b.n	b434e <loop+0x56>
   b4588:	2003df8a 	.word	0x2003df8a
   b458c:	2003df88 	.word	0x2003df88
   b4590:	2003df44 	.word	0x2003df44
   b4594:	000bc423 	.word	0x000bc423
   b4598:	2003e658 	.word	0x2003e658
   b459c:	2003df64 	.word	0x2003df64
   b45a0:	000bca1e 	.word	0x000bca1e
   b45a4:	000bca20 	.word	0x000bca20
   b45a8:	000bcb28 	.word	0x000bcb28
   b45ac:	000bd410 	.word	0x000bd410
   b45b0:	00030010 	.word	0x00030010
   b45b4:	000bc44c 	.word	0x000bc44c
   b45b8:	2003df89 	.word	0x2003df89
   b45bc:	2003dd70 	.word	0x2003dd70
   b45c0:	000bc46f 	.word	0x000bc46f
   b45c4:	000bc4a4 	.word	0x000bc4a4
   b45c8:	2003df80 	.word	0x2003df80
   b45cc:	000bc4c5 	.word	0x000bc4c5
			if (state != oldState) publishStateTransition();                // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b45d0:	4b5d      	ldr	r3, [pc, #372]	; (b4748 <loop+0x450>)
   b45d2:	781b      	ldrb	r3, [r3, #0]
   b45d4:	2b01      	cmp	r3, #1
   b45d6:	d001      	beq.n	b45dc <loop+0x2e4>
   b45d8:	f7ff fe32 	bl	b4240 <_Z22publishStateTransitionv>
			switch (current.get_alertCodeNode())
   b45dc:	f000 febc 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b45e0:	f000 ffb3 	bl	b554a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b45e4:	2802      	cmp	r0, #2
   b45e6:	d03a      	beq.n	b465e <loop+0x366>
   b45e8:	2803      	cmp	r0, #3
   b45ea:	d073      	beq.n	b46d4 <loop+0x3dc>
   b45ec:	2801      	cmp	r0, #1
   b45ee:	f040 8099 	bne.w	b4724 <loop+0x42c>
				if(LoRA_Functions::instance().composeJoinRequesttNode()) {
   b45f2:	f000 fa71 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b45f6:	f000 fc2f 	bl	b4e58 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b45fa:	2800      	cmp	r0, #0
   b45fc:	d064      	beq.n	b46c8 <loop+0x3d0>
   b45fe:	f003 fe3f 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
							lastPublish = Time.now();
   b4602:	4f52      	ldr	r7, [pc, #328]	; (b474c <loop+0x454>)
   b4604:	4606      	mov	r6, r0
					while (millis() - startListening < 3000) {
   b4606:	f640 38b7 	movw	r8, #2999	; 0xbb7
   b460a:	f003 fe39 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b460e:	1b80      	subs	r0, r0, r6
   b4610:	4540      	cmp	r0, r8
   b4612:	d859      	bhi.n	b46c8 <loop+0x3d0>
						if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b4614:	f000 fa60 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b4618:	f000 fcae 	bl	b4f78 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b461c:	2800      	cmp	r0, #0
   b461e:	d0f4      	beq.n	b460a <loop+0x312>
							lastPublish = Time.now();
   b4620:	f006 fca9 	bl	baf76 <_ZN9TimeClass3nowEv>
   b4624:	17c3      	asrs	r3, r0, #31
   b4626:	e9c7 0300 	strd	r0, r3, [r7]
							sysStatus.set_lastConnection(Time.now());
   b462a:	f000 fe51 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b462e:	4605      	mov	r5, r0
   b4630:	f006 fca1 	bl	baf76 <_ZN9TimeClass3nowEv>
   b4634:	4602      	mov	r2, r0
   b4636:	17c3      	asrs	r3, r0, #31
   b4638:	4628      	mov	r0, r5
   b463a:	f001 f84c 	bl	b56d6 <_ZN13sysStatusData18set_lastConnectionEx>
							current.set_alertTimestampNode(Time.now());
   b463e:	f000 fe8b 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4642:	4605      	mov	r5, r0
   b4644:	f006 fc97 	bl	baf76 <_ZN9TimeClass3nowEv>
   b4648:	4602      	mov	r2, r0
   b464a:	17c3      	asrs	r3, r0, #31
   b464c:	4628      	mov	r0, r5
   b464e:	f001 f84c 	bl	b56ea <_ZN17currentStatusData22set_alertTimestampNodeEx>
							current.set_alertCodeNode(0);
   b4652:	f000 fe81 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4656:	2100      	movs	r1, #0
   b4658:	f000 ffb2 	bl	b55c0 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b465c:	e7d5      	b.n	b460a <loop+0x312>
				if(LoRA_Functions::instance().composeAlertReportNode()) {
   b465e:	f000 fa3b 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b4662:	f000 fd15 	bl	b5090 <_ZN14LoRA_Functions22composeAlertReportNodeEv>
   b4666:	b378      	cbz	r0, b46c8 <loop+0x3d0>
   b4668:	f003 fe0a 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
							lastPublish = Time.now();
   b466c:	4f37      	ldr	r7, [pc, #220]	; (b474c <loop+0x454>)
   b466e:	4606      	mov	r6, r0
					while (millis() - startListening < 3000) {
   b4670:	f640 38b7 	movw	r8, #2999	; 0xbb7
   b4674:	f003 fe04 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b4678:	1b80      	subs	r0, r0, r6
   b467a:	4540      	cmp	r0, r8
   b467c:	d824      	bhi.n	b46c8 <loop+0x3d0>
						if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b467e:	f000 fa2b 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b4682:	f000 fc79 	bl	b4f78 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4686:	2800      	cmp	r0, #0
   b4688:	d0f4      	beq.n	b4674 <loop+0x37c>
							lastPublish = Time.now();
   b468a:	f006 fc74 	bl	baf76 <_ZN9TimeClass3nowEv>
   b468e:	17c3      	asrs	r3, r0, #31
   b4690:	e9c7 0300 	strd	r0, r3, [r7]
							sysStatus.set_lastConnection(Time.now());
   b4694:	f000 fe1c 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4698:	4605      	mov	r5, r0
   b469a:	f006 fc6c 	bl	baf76 <_ZN9TimeClass3nowEv>
   b469e:	4602      	mov	r2, r0
   b46a0:	17c3      	asrs	r3, r0, #31
   b46a2:	4628      	mov	r0, r5
   b46a4:	f001 f817 	bl	b56d6 <_ZN13sysStatusData18set_lastConnectionEx>
							current.set_alertTimestampNode(Time.now());
   b46a8:	f000 fe56 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b46ac:	4605      	mov	r5, r0
   b46ae:	f006 fc62 	bl	baf76 <_ZN9TimeClass3nowEv>
   b46b2:	4602      	mov	r2, r0
   b46b4:	17c3      	asrs	r3, r0, #31
   b46b6:	4628      	mov	r0, r5
   b46b8:	f001 f817 	bl	b56ea <_ZN17currentStatusData22set_alertTimestampNodeEx>
							current.set_alertCodeNode(0);
   b46bc:	f000 fe4c 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b46c0:	2100      	movs	r1, #0
   b46c2:	f000 ff7d 	bl	b55c0 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b46c6:	e7d5      	b.n	b4674 <loop+0x37c>
				LoRA_Functions::instance().sleepLoRaRadio();				// Done for now, put radio to sleep
   b46c8:	f000 fa06 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b46cc:	f000 faa0 	bl	b4c10 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				state = IDLE_STATE;
   b46d0:	2302      	movs	r3, #2
   b46d2:	e63c      	b.n	b434e <loop+0x56>
				static system_tick_t enteredState = millis();
   b46d4:	4c1e      	ldr	r4, [pc, #120]	; (b4750 <loop+0x458>)
   b46d6:	4d1f      	ldr	r5, [pc, #124]	; (b4754 <loop+0x45c>)
   b46d8:	7823      	ldrb	r3, [r4, #0]
   b46da:	f3bf 8f5b 	dmb	ish
   b46de:	f013 0f01 	tst.w	r3, #1
   b46e2:	d109      	bne.n	b46f8 <loop+0x400>
   b46e4:	4620      	mov	r0, r4
   b46e6:	f7ff fce9 	bl	b40bc <__cxa_guard_acquire>
   b46ea:	b128      	cbz	r0, b46f8 <loop+0x400>
   b46ec:	f003 fdc8 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b46f0:	6028      	str	r0, [r5, #0]
   b46f2:	4620      	mov	r0, r4
   b46f4:	f7ff fce7 	bl	b40c6 <__cxa_guard_release>
   b46f8:	f003 fdc2 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b46fc:	682b      	ldr	r3, [r5, #0]
   b46fe:	1ac0      	subs	r0, r0, r3
   b4700:	f247 5330 	movw	r3, #30000	; 0x7530
   b4704:	4298      	cmp	r0, r3
   b4706:	f67f aeba 	bls.w	b447e <loop+0x186>
					Log.info("Resetting device");
   b470a:	4913      	ldr	r1, [pc, #76]	; (b4758 <loop+0x460>)
   b470c:	4813      	ldr	r0, [pc, #76]	; (b475c <loop+0x464>)
   b470e:	f7ff fd7f 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
					delay(2000);
   b4712:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4716:	f004 f917 	bl	b8948 <delay>
					ab1805.deepPowerDown();
   b471a:	211e      	movs	r1, #30
   b471c:	4810      	ldr	r0, [pc, #64]	; (b4760 <loop+0x468>)
   b471e:	f001 fe23 	bl	b6368 <_ZN6AB180513deepPowerDownEi>
   b4722:	e6ac      	b.n	b447e <loop+0x186>
				Log.info("Undefined Error State");
   b4724:	490f      	ldr	r1, [pc, #60]	; (b4764 <loop+0x46c>)
   b4726:	480d      	ldr	r0, [pc, #52]	; (b475c <loop+0x464>)
   b4728:	f7ff fd72 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
				current.set_alertCodeNode(0);
   b472c:	f000 fe14 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4730:	2100      	movs	r1, #0
   b4732:	f000 ff45 	bl	b55c0 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b4736:	e7cb      	b.n	b46d0 <loop+0x3d8>
                valid_ = false;
   b4738:	7530      	strb	r0, [r6, #20]
                return *this;
   b473a:	e669      	b.n	b4410 <loop+0x118>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b473c:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b4740:	e666      	b.n	b4410 <loop+0x118>
}
   b4742:	b00a      	add	sp, #40	; 0x28
   b4744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4748:	2003df88 	.word	0x2003df88
   b474c:	2003df80 	.word	0x2003df80
   b4750:	2003df38 	.word	0x2003df38
   b4754:	2003df3c 	.word	0x2003df3c
   b4758:	000bc4d9 	.word	0x000bc4d9
   b475c:	2003e658 	.word	0x2003e658
   b4760:	2003df44 	.word	0x2003df44
   b4764:	000bc4ea 	.word	0x000bc4ea

000b4768 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b4768:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b476a:	2300      	movs	r3, #0
   b476c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b476e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4770:	4604      	mov	r4, r0
   b4772:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4774:	b12b      	cbz	r3, b4782 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4776:	2202      	movs	r2, #2
   b4778:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b477a:	68eb      	ldr	r3, [r5, #12]
   b477c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b477e:	68ab      	ldr	r3, [r5, #8]
   b4780:	60a3      	str	r3, [r4, #8]
    }
   b4782:	4620      	mov	r0, r4
   b4784:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4788 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b478c:	b095      	sub	sp, #84	; 0x54
   b478e:	4605      	mov	r5, r0
        };
   b4790:	991c      	ldr	r1, [sp, #112]	; 0x70
   b4792:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b4794:	4690      	mov	r8, r2
   b4796:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4798:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b479a:	f7ff ffe5 	bl	b4768 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b479e:	a904      	add	r1, sp, #16
   b47a0:	a808      	add	r0, sp, #32
   b47a2:	f7ff ffe1 	bl	b4768 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b47a6:	a908      	add	r1, sp, #32
   b47a8:	4630      	mov	r0, r6
   b47aa:	f7ff ffdd 	bl	b4768 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b47ae:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b47b2:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b47b4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b47b8:	f7ff fc6d 	bl	b4096 <_Znwj>
   b47bc:	4604      	mov	r4, r0
   b47be:	b1a0      	cbz	r0, b47ea <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b47c0:	e896 0003 	ldmia.w	r6, {r0, r1}
   b47c4:	ab01      	add	r3, sp, #4
   b47c6:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b47ca:	e894 0003 	ldmia.w	r4, {r0, r1}
   b47ce:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b47d2:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b47d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b47d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b47da:	60a3      	str	r3, [r4, #8]
   b47dc:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b47e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b47e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b47e6:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b47e8:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b47ea:	4b24      	ldr	r3, [pc, #144]	; (b487c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b47ec:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b47ee:	4b24      	ldr	r3, [pc, #144]	; (b4880 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b47f0:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b47f2:	2200      	movs	r2, #0
   b47f4:	2300      	movs	r3, #0
   b47f6:	f04f 0900 	mov.w	r9, #0
   b47fa:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b47fe:	4b21      	ldr	r3, [pc, #132]	; (b4884 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b4800:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4804:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4806:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b4808:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b480c:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b4810:	f7ff fc41 	bl	b4096 <_Znwj>
   b4814:	4604      	mov	r4, r0
   b4816:	b1d8      	cbz	r0, b4850 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b4818:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b481a:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b481e:	b133      	cbz	r3, b482e <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4820:	2202      	movs	r2, #2
   b4822:	a910      	add	r1, sp, #64	; 0x40
   b4824:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4826:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b4828:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b482a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b482c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b482e:	4b16      	ldr	r3, [pc, #88]	; (b4888 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b4830:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4832:	4a16      	ldr	r2, [pc, #88]	; (b488c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b4834:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b4836:	ab01      	add	r3, sp, #4
   b4838:	4640      	mov	r0, r8
   b483a:	4639      	mov	r1, r7
   b483c:	f003 ff3a 	bl	b86b4 <system_subscribe_event>
        if (r) {
   b4840:	b1b0      	cbz	r0, b4870 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b4842:	4620      	mov	r0, r4
   b4844:	f7ff fc9a 	bl	b417c <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b4848:	2110      	movs	r1, #16
   b484a:	4620      	mov	r0, r4
   b484c:	f7ff fc27 	bl	b409e <_ZdlPvj>
   b4850:	a810      	add	r0, sp, #64	; 0x40
   b4852:	f7ff fc93 	bl	b417c <_ZNSt14_Function_baseD1Ev>
   b4856:	4630      	mov	r0, r6
   b4858:	f7ff fc90 	bl	b417c <_ZNSt14_Function_baseD1Ev>
   b485c:	a808      	add	r0, sp, #32
   b485e:	f7ff fc8d 	bl	b417c <_ZNSt14_Function_baseD1Ev>
   b4862:	a804      	add	r0, sp, #16
   b4864:	f7ff fc8a 	bl	b417c <_ZNSt14_Function_baseD1Ev>
    }
   b4868:	4628      	mov	r0, r5
   b486a:	b015      	add	sp, #84	; 0x54
   b486c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b4870:	9b02      	ldr	r3, [sp, #8]
   b4872:	60ab      	str	r3, [r5, #8]
   b4874:	e9c5 8700 	strd	r8, r7, [r5]
   b4878:	e7ea      	b.n	b4850 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b487a:	bf00      	nop
   b487c:	000b4139 	.word	0x000b4139
   b4880:	000b4a21 	.word	0x000b4a21
   b4884:	000c0002 	.word	0x000c0002
   b4888:	000b418f 	.word	0x000b418f
   b488c:	000b40e5 	.word	0x000b40e5

000b4890 <setup>:
void setup() {
   b4890:	b530      	push	{r4, r5, lr}
        return hal_timer_millis(nullptr);
   b4892:	2000      	movs	r0, #0
   b4894:	b08d      	sub	sp, #52	; 0x34
   b4896:	f003 fd03 	bl	b82a0 <hal_timer_millis>
        while (_while() && !_condition()) {
   b489a:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b489e:	4604      	mov	r4, r0
   b48a0:	2000      	movs	r0, #0
   b48a2:	f003 fcfd 	bl	b82a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b48a6:	1b00      	subs	r0, r0, r4
   b48a8:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b48ac:	42a8      	cmp	r0, r5
   b48ae:	f171 0300 	sbcs.w	r3, r1, #0
   b48b2:	d207      	bcs.n	b48c4 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b48b4:	f006 fc46 	bl	bb144 <_Z16_fetch_usbserialv>
   b48b8:	f006 fc39 	bl	bb12e <_ZN9USBSerial11isConnectedEv>
   b48bc:	b910      	cbnz	r0, b48c4 <setup+0x34>
            spark_process();
   b48be:	f003 ff4b 	bl	b8758 <spark_process>
        while (_while() && !_condition()) {
   b48c2:	e7ed      	b.n	b48a0 <setup+0x10>
   b48c4:	f006 fc3e 	bl	bb144 <_Z16_fetch_usbserialv>
   b48c8:	f006 fc31 	bl	bb12e <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b48cc:	f000 ff5e 	bl	b578c <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b48d0:	f000 ff88 	bl	b57e4 <_Z18initializePowerCfgv>
		current.setup();
   b48d4:	f000 fd40 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b48d8:	6803      	ldr	r3, [r0, #0]
   b48da:	681b      	ldr	r3, [r3, #0]
   b48dc:	4798      	blx	r3
		sysStatus.setup();								// Initialize persistent storage
   b48de:	f000 fcf7 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b48e2:	6803      	ldr	r3, [r0, #0]
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	4798      	blx	r3
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b48e8:	483f      	ldr	r0, [pc, #252]	; (b49e8 <setup+0x158>)
   b48ea:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b48ec:	2101      	movs	r1, #1
   b48ee:	8143      	strh	r3, [r0, #10]
   b48f0:	f001 ffde 	bl	b68b0 <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b48f4:	217c      	movs	r1, #124	; 0x7c
   b48f6:	483c      	ldr	r0, [pc, #240]	; (b49e8 <setup+0x158>)
   b48f8:	f001 fbdc 	bl	b60b4 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b48fc:	4b3b      	ldr	r3, [pc, #236]	; (b49ec <setup+0x15c>)
   b48fe:	9308      	str	r3, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
   b4900:	4b3b      	ldr	r3, [pc, #236]	; (b49f0 <setup+0x160>)
   b4902:	930b      	str	r3, [sp, #44]	; 0x2c
	System.on(out_of_memory, outOfMemoryHandler);     // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b4904:	ac08      	add	r4, sp, #32
	    _M_manager = &_My_handler::_M_manager;
   b4906:	4b3b      	ldr	r3, [pc, #236]	; (b49f4 <setup+0x164>)
   b4908:	930a      	str	r3, [sp, #40]	; 0x28
   b490a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b490e:	2300      	movs	r3, #0
   b4910:	a804      	add	r0, sp, #16
   b4912:	9400      	str	r4, [sp, #0]
   b4914:	f7ff ff38 	bl	b4788 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b4918:	4620      	mov	r0, r4
   b491a:	f7ff fc2f 	bl	b417c <_ZNSt14_Function_baseD1Ev>
	if (! LoRA_Functions::instance().setup(false)) 	{						// Start the LoRA radio - Node
   b491e:	f000 f8db 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b4922:	2100      	movs	r1, #0
   b4924:	f000 f8ea 	bl	b4afc <_ZN14LoRA_Functions5setupEb>
   b4928:	2800      	cmp	r0, #0
   b492a:	d142      	bne.n	b49b2 <setup+0x122>
		current.set_alertCodeNode(3);										// Initialization failure
   b492c:	f000 fd14 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4930:	2103      	movs	r1, #3
   b4932:	f000 fe45 	bl	b55c0 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b4936:	f000 fd0f 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b493a:	4604      	mov	r4, r0
   b493c:	f006 fb1b 	bl	baf76 <_ZN9TimeClass3nowEv>
   b4940:	4602      	mov	r2, r0
   b4942:	17c3      	asrs	r3, r0, #31
   b4944:	4620      	mov	r0, r4
   b4946:	f000 fed0 	bl	b56ea <_ZN17currentStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", current.get_alertCodeNode());
   b494a:	f000 fd05 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b494e:	f000 fdfc 	bl	b554a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4952:	4929      	ldr	r1, [pc, #164]	; (b49f8 <setup+0x168>)
   b4954:	4602      	mov	r2, r0
   b4956:	4829      	ldr	r0, [pc, #164]	; (b49fc <setup+0x16c>)
   b4958:	f7ff fc5a 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  	takeMeasurements();                                                  	// Populates values so you can read them before the hour
   b495c:	f001 fa44 	bl	b5de8 <_Z16takeMeasurementsv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     		// PIR or Pressure Sensor interrupt from low to high
   b4960:	4827      	ldr	r0, [pc, #156]	; (b4a00 <setup+0x170>)
   b4962:	4928      	ldr	r1, [pc, #160]	; (b4a04 <setup+0x174>)
   b4964:	8800      	ldrh	r0, [r0, #0]
   b4966:	2400      	movs	r4, #0
   b4968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b496c:	2201      	movs	r2, #1
   b496e:	9400      	str	r4, [sp, #0]
   b4970:	f004 fa74 	bl	b8e5c <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); 						// We may need to monitor the user switch to change behaviours / modes
   b4974:	4824      	ldr	r0, [pc, #144]	; (b4a08 <setup+0x178>)
   b4976:	4925      	ldr	r1, [pc, #148]	; (b4a0c <setup+0x17c>)
   b4978:	8800      	ldrh	r0, [r0, #0]
   b497a:	9400      	str	r4, [sp, #0]
   b497c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4980:	4622      	mov	r2, r4
   b4982:	f004 fa6b 	bl	b8e5c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;               	// IDLE unless otherwise from above code
   b4986:	4b22      	ldr	r3, [pc, #136]	; (b4a10 <setup+0x180>)
   b4988:	781a      	ldrb	r2, [r3, #0]
   b498a:	b90a      	cbnz	r2, b4990 <setup+0x100>
   b498c:	2202      	movs	r2, #2
   b498e:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", current.get_alertCodeNode());
   b4990:	f000 fce2 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4994:	f000 fdd9 	bl	b554a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4998:	491e      	ldr	r1, [pc, #120]	; (b4a14 <setup+0x184>)
   b499a:	4602      	mov	r2, r0
   b499c:	4817      	ldr	r0, [pc, #92]	; (b49fc <setup+0x16c>)
   b499e:	f7ff fc37 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b49a2:	4b1d      	ldr	r3, [pc, #116]	; (b4a18 <setup+0x188>)
   b49a4:	8818      	ldrh	r0, [r3, #0]
   b49a6:	2100      	movs	r1, #0
}
   b49a8:	b00d      	add	sp, #52	; 0x34
   b49aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  	digitalWrite(BLUE_LED,LOW);                                          	// Signal the end of startup
   b49ae:	f006 bcf2 	b.w	bb396 <digitalWrite>
	else if (sysStatus.get_nodeNumber() < 10) {			// If there is already a hardware alert - deal with that first
   b49b2:	f000 fc8d 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b49b6:	f000 fd4d 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b49ba:	2809      	cmp	r0, #9
   b49bc:	d8ce      	bhi.n	b495c <setup+0xcc>
		current.set_alertCodeNode(1); // For testing
   b49be:	f000 fccb 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b49c2:	2101      	movs	r1, #1
   b49c4:	f000 fdfc 	bl	b55c0 <_ZN17currentStatusData17set_alertCodeNodeEh>
		Log.info("Node number indicated unconfigured node of %d setting alert code to %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b49c8:	f000 fcc6 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b49cc:	f000 fd4c 	bl	b5468 <_ZNK17currentStatusData14get_nodeNumberEv>
   b49d0:	9003      	str	r0, [sp, #12]
   b49d2:	f000 fcc1 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b49d6:	f000 fdb8 	bl	b554a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b49da:	9a03      	ldr	r2, [sp, #12]
   b49dc:	490f      	ldr	r1, [pc, #60]	; (b4a1c <setup+0x18c>)
   b49de:	4603      	mov	r3, r0
   b49e0:	4806      	ldr	r0, [pc, #24]	; (b49fc <setup+0x16c>)
   b49e2:	f7ff fc15 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b49e6:	e7b9      	b.n	b495c <setup+0xcc>
   b49e8:	2003df44 	.word	0x2003df44
   b49ec:	000b40cd 	.word	0x000b40cd
   b49f0:	000b4173 	.word	0x000b4173
   b49f4:	000b415f 	.word	0x000b415f
   b49f8:	000bc500 	.word	0x000bc500
   b49fc:	2003e658 	.word	0x2003e658
   b4a00:	000bca20 	.word	0x000bca20
   b4a04:	000b410d 	.word	0x000b410d
   b4a08:	000bca1e 	.word	0x000bca1e
   b4a0c:	000b40d9 	.word	0x000b40d9
   b4a10:	2003df8a 	.word	0x2003df8a
   b4a14:	000bc585 	.word	0x000bc585
   b4a18:	000bca1c 	.word	0x000bca1c
   b4a1c:	000bc53e 	.word	0x000bc53e

000b4a20 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b4a20:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4a22:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4a24:	4604      	mov	r4, r0
	switch (__op)
   b4a26:	d104      	bne.n	b4a32 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b4a28:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4a2a:	6003      	str	r3, [r0, #0]
      }
   b4a2c:	2000      	movs	r0, #0
   b4a2e:	b003      	add	sp, #12
   b4a30:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b4a32:	2a02      	cmp	r2, #2
   b4a34:	d00c      	beq.n	b4a50 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b4a36:	2a03      	cmp	r2, #3
   b4a38:	d1f8      	bne.n	b4a2c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4a3a:	6804      	ldr	r4, [r0, #0]
   b4a3c:	2c00      	cmp	r4, #0
   b4a3e:	d0f5      	beq.n	b4a2c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4a40:	4620      	mov	r0, r4
   b4a42:	f7ff fb9b 	bl	b417c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4a46:	2110      	movs	r1, #16
   b4a48:	4620      	mov	r0, r4
   b4a4a:	f7ff fb28 	bl	b409e <_ZdlPvj>
   b4a4e:	e7ed      	b.n	b4a2c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b4a50:	6809      	ldr	r1, [r1, #0]
   b4a52:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a54:	2010      	movs	r0, #16
   b4a56:	f7ff fb1e 	bl	b4096 <_Znwj>
   b4a5a:	4605      	mov	r5, r0
   b4a5c:	b110      	cbz	r0, b4a64 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b4a5e:	9901      	ldr	r1, [sp, #4]
   b4a60:	f7ff fe82 	bl	b4768 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b4a64:	6025      	str	r5, [r4, #0]
	}
   b4a66:	e7e1      	b.n	b4a2c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b4a68 <_GLOBAL__sub_I___appProductVersion>:
   b4a68:	b508      	push	{r3, lr}
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b4a6a:	f006 fc2d 	bl	bb2c8 <spark_protocol_instance>
   b4a6e:	2300      	movs	r3, #0
   b4a70:	461a      	mov	r2, r3
   b4a72:	4619      	mov	r1, r3
   b4a74:	f006 fc38 	bl	bb2e8 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4a78:	f006 fc26 	bl	bb2c8 <spark_protocol_instance>
   b4a7c:	2300      	movs	r3, #0
   b4a7e:	461a      	mov	r2, r3
   b4a80:	210d      	movs	r1, #13
   b4a82:	f006 fc29 	bl	bb2d8 <spark_protocol_set_product_id>
        : config_(config) {
   b4a86:	4b0c      	ldr	r3, [pc, #48]	; (b4ab8 <_GLOBAL__sub_I___appProductVersion+0x50>)
   b4a88:	1d1a      	adds	r2, r3, #4
   b4a8a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b4a8c:	4a0b      	ldr	r2, [pc, #44]	; (b4abc <_GLOBAL__sub_I___appProductVersion+0x54>)
   b4a8e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4a90:	2200      	movs	r2, #0
   b4a92:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b4a96:	611a      	str	r2, [r3, #16]
   b4a98:	2201      	movs	r2, #1
   b4a9a:	751a      	strb	r2, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b4a9c:	f006 fcec 	bl	bb478 <_Z19__fetch_global_Wirev>
   b4aa0:	2269      	movs	r2, #105	; 0x69
   b4aa2:	4601      	mov	r1, r0
   b4aa4:	4806      	ldr	r0, [pc, #24]	; (b4ac0 <_GLOBAL__sub_I___appProductVersion+0x58>)
   b4aa6:	f001 fa07 	bl	b5eb8 <_ZN6AB1805C1ER7TwoWireh>
time_t lastPublish = Time.now();
   b4aaa:	f006 fa64 	bl	baf76 <_ZN9TimeClass3nowEv>
   b4aae:	4b05      	ldr	r3, [pc, #20]	; (b4ac4 <_GLOBAL__sub_I___appProductVersion+0x5c>)
   b4ab0:	17c2      	asrs	r2, r0, #31
   b4ab2:	e9c3 0200 	strd	r0, r2, [r3]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	2003df64 	.word	0x2003df64
   b4abc:	00030010 	.word	0x00030010
   b4ac0:	2003df44 	.word	0x2003df44
   b4ac4:	2003df80 	.word	0x2003df80

000b4ac8 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4ac8:	4770      	bx	lr

000b4aca <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b4aca:	b510      	push	{r4, lr}
}
   b4acc:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b4ace:	4604      	mov	r4, r0
}
   b4ad0:	f7ff fae5 	bl	b409e <_ZdlPvj>
   b4ad4:	4620      	mov	r0, r4
   b4ad6:	bd10      	pop	{r4, pc}

000b4ad8 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4ad8:	b510      	push	{r4, lr}
    if (!_instance) {
   b4ada:	4c06      	ldr	r4, [pc, #24]	; (b4af4 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4adc:	6823      	ldr	r3, [r4, #0]
   b4ade:	b933      	cbnz	r3, b4aee <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4ae0:	2004      	movs	r0, #4
   b4ae2:	f7ff fad8 	bl	b4096 <_Znwj>
   b4ae6:	b108      	cbz	r0, b4aec <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4ae8:	4b03      	ldr	r3, [pc, #12]	; (b4af8 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4aea:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4aec:	6020      	str	r0, [r4, #0]
}
   b4aee:	6820      	ldr	r0, [r4, #0]
   b4af0:	bd10      	pop	{r4, pc}
   b4af2:	bf00      	nop
   b4af4:	2003df90 	.word	0x2003df90
   b4af8:	000bc948 	.word	0x000bc948

000b4afc <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b4afc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b4afe:	4834      	ldr	r0, [pc, #208]	; (b4bd0 <_ZN14LoRA_Functions5setupEb+0xd4>)
bool LoRA_Functions::setup(bool gatewayID) {
   b4b00:	460d      	mov	r5, r1
	if (!manager.init()) {
   b4b02:	f002 fd38 	bl	b7576 <_ZN8RHRouter4initEv>
   b4b06:	4604      	mov	r4, r0
   b4b08:	b930      	cbnz	r0, b4b18 <_ZN14LoRA_Functions5setupEb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b4b0a:	4932      	ldr	r1, [pc, #200]	; (b4bd4 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4b0c:	4832      	ldr	r0, [pc, #200]	; (b4bd8 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4b0e:	f7ff fb7f 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
	
	if (manager.thisAddress() > 0) Log.info("LoRA Radio initialized as node %i and with a DeviceID of %i", manager.thisAddress(), sysStatus.get_deviceID());
	else Log.info("LoRA Radio initialized as a gateway with a deviceID of %i", sysStatus.get_deviceID());
	return true;
}
   b4b12:	4620      	mov	r0, r4
   b4b14:	b002      	add	sp, #8
   b4b16:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b4b18:	ed9f 0a30 	vldr	s0, [pc, #192]	; b4bdc <_ZN14LoRA_Functions5setupEb+0xe0>
   b4b1c:	4830      	ldr	r0, [pc, #192]	; (b4be0 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b4b1e:	f003 f823 	bl	b7b68 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4b22:	2200      	movs	r2, #0
   b4b24:	2117      	movs	r1, #23
   b4b26:	482e      	ldr	r0, [pc, #184]	; (b4be0 <_ZN14LoRA_Functions5setupEb+0xe4>)
   b4b28:	f003 f998 	bl	b7e5c <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.get_structuresVersion() == 128)) {    	// This will be our indication that the deviceID and nodeID has not yet been set
   b4b2c:	f000 fbd0 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4b30:	f000 fcf7 	bl	b5522 <_ZNK13sysStatusData21get_structuresVersionEv>
   b4b34:	2880      	cmp	r0, #128	; 0x80
   b4b36:	d022      	beq.n	b4b7e <_ZN14LoRA_Functions5setupEb+0x82>
		randomSeed(sysStatus.get_lastConnection());			// 32-bit number for seed
   b4b38:	f000 fbca 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4b3c:	f000 fd9d 	bl	b567a <_ZNK13sysStatusData18get_lastConnectionEv>
   b4b40:	f005 fe55 	bl	ba7ee <_Z10randomSeedj>
		sysStatus.set_deviceID(random(1,65535));			// 16-bit number for deviceID
   b4b44:	f000 fbc4 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4b48:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4b4c:	4606      	mov	r6, r0
   b4b4e:	2001      	movs	r0, #1
   b4b50:	f005 fe43 	bl	ba7da <_Z6randomii>
   b4b54:	b281      	uxth	r1, r0
   b4b56:	4630      	mov	r0, r6
   b4b58:	f000 fcb3 	bl	b54c2 <_ZN13sysStatusData12set_deviceIDEt>
		if (!gatewayID) sysStatus.set_nodeNumber(random(10,255));		// Random number in - unconfigured - range will trigger a Join request
   b4b5c:	bb55      	cbnz	r5, b4bb4 <_ZN14LoRA_Functions5setupEb+0xb8>
   b4b5e:	f000 fbb7 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4b62:	21ff      	movs	r1, #255	; 0xff
   b4b64:	4605      	mov	r5, r0
   b4b66:	200a      	movs	r0, #10
   b4b68:	f005 fe37 	bl	ba7da <_Z6randomii>
   b4b6c:	b281      	uxth	r1, r0
   b4b6e:	4628      	mov	r0, r5
		else sysStatus.set_nodeNumber(0);
   b4b70:	f000 fcad 	bl	b54ce <_ZN13sysStatusData14set_nodeNumberEt>
		sysStatus.set_structuresVersion(128);			// Set the structure to the magic number so we can have a stable deviceID
   b4b74:	f000 fbac 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4b78:	2180      	movs	r1, #128	; 0x80
   b4b7a:	f000 fd09 	bl	b5590 <_ZN13sysStatusData21set_structuresVersionEh>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
   b4b7e:	f000 fba7 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4b82:	f000 fc67 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4b86:	b2c1      	uxtb	r1, r0
   b4b88:	4816      	ldr	r0, [pc, #88]	; (b4be4 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4b8a:	f002 f820 	bl	b6bce <_ZN10RHDatagram14setThisAddressEh>
	if (manager.thisAddress() > 0) Log.info("LoRA Radio initialized as node %i and with a DeviceID of %i", manager.thisAddress(), sysStatus.get_deviceID());
   b4b8e:	4815      	ldr	r0, [pc, #84]	; (b4be4 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4b90:	f002 f803 	bl	b6b9a <_ZN10RHDatagram11thisAddressEv>
   b4b94:	b190      	cbz	r0, b4bbc <_ZN14LoRA_Functions5setupEb+0xc0>
   b4b96:	4813      	ldr	r0, [pc, #76]	; (b4be4 <_ZN14LoRA_Functions5setupEb+0xe8>)
   b4b98:	f001 ffff 	bl	b6b9a <_ZN10RHDatagram11thisAddressEv>
   b4b9c:	9001      	str	r0, [sp, #4]
   b4b9e:	f000 fb97 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4ba2:	f000 fc52 	bl	b544a <_ZNK13sysStatusData12get_deviceIDEv>
   b4ba6:	9a01      	ldr	r2, [sp, #4]
   b4ba8:	490f      	ldr	r1, [pc, #60]	; (b4be8 <_ZN14LoRA_Functions5setupEb+0xec>)
   b4baa:	4603      	mov	r3, r0
   b4bac:	480a      	ldr	r0, [pc, #40]	; (b4bd8 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4bae:	f7ff fb2f 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4bb2:	e7ae      	b.n	b4b12 <_ZN14LoRA_Functions5setupEb+0x16>
		else sysStatus.set_nodeNumber(0);
   b4bb4:	f000 fb8c 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4bb8:	2100      	movs	r1, #0
   b4bba:	e7d9      	b.n	b4b70 <_ZN14LoRA_Functions5setupEb+0x74>
	else Log.info("LoRA Radio initialized as a gateway with a deviceID of %i", sysStatus.get_deviceID());
   b4bbc:	f000 fb88 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4bc0:	f000 fc43 	bl	b544a <_ZNK13sysStatusData12get_deviceIDEv>
   b4bc4:	4909      	ldr	r1, [pc, #36]	; (b4bec <_ZN14LoRA_Functions5setupEb+0xf0>)
   b4bc6:	4602      	mov	r2, r0
   b4bc8:	4803      	ldr	r0, [pc, #12]	; (b4bd8 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4bca:	f7ff fb21 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b4bce:	e7a0      	b.n	b4b12 <_ZN14LoRA_Functions5setupEb+0x16>
   b4bd0:	2003e1cc 	.word	0x2003e1cc
   b4bd4:	000bc5b6 	.word	0x000bc5b6
   b4bd8:	2003e658 	.word	0x2003e658
   b4bdc:	4464c000 	.word	0x4464c000
   b4be0:	2003e09c 	.word	0x2003e09c
   b4be4:	2003e1d0 	.word	0x2003e1d0
   b4be8:	000bc5c2 	.word	0x000bc5c2
   b4bec:	000bc5fe 	.word	0x000bc5fe

000b4bf0 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4bf0:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b4bf2:	4c06      	ldr	r4, [pc, #24]	; (b4c0c <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b4bf4:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b4bf6:	f10d 0203 	add.w	r2, sp, #3
   b4bfa:	a901      	add	r1, sp, #4
   b4bfc:	4620      	mov	r0, r4
   b4bfe:	f002 ff2f 	bl	b7a60 <_ZN7RH_RF954recvEPhS0_>
   b4c02:	2800      	cmp	r0, #0
   b4c04:	d1f7      	bne.n	b4bf6 <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b4c06:	b040      	add	sp, #256	; 0x100
   b4c08:	bd10      	pop	{r4, pc}
   b4c0a:	bf00      	nop
   b4c0c:	2003e09c 	.word	0x2003e09c

000b4c10 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4c10:	4801      	ldr	r0, [pc, #4]	; (b4c18 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b4c12:	f002 bf12 	b.w	b7a3a <_ZN7RH_RF955sleepEv>
   b4c16:	bf00      	nop
   b4c18:	2003e09c 	.word	0x2003e09c

000b4c1c <_ZN14LoRA_Functions21composeDataReportNodeEv>:
	static int attempts = 0;
	static int success = 0;
	static uint8_t msgCnt = 0;


	digitalWrite(BLUE_LED,HIGH);
   b4c1c:	4b80      	ldr	r3, [pc, #512]	; (b4e20 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x204>)
bool LoRA_Functions::composeDataReportNode() {
   b4c1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	digitalWrite(BLUE_LED,HIGH);
   b4c22:	881f      	ldrh	r7, [r3, #0]
	attempts++;
	msgCnt++;
   b4c24:	f8df 8228 	ldr.w	r8, [pc, #552]	; b4e50 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x234>
	attempts++;
   b4c28:	4e7e      	ldr	r6, [pc, #504]	; (b4e24 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x208>)
	Log.info("Sending data report number %d",msgCnt);

	buf[0] = highByte(sysStatus.get_deviceID());					// Set for device
   b4c2a:	4c7f      	ldr	r4, [pc, #508]	; (b4e28 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x20c>)
	digitalWrite(BLUE_LED,HIGH);
   b4c2c:	2101      	movs	r1, #1
   b4c2e:	4638      	mov	r0, r7
   b4c30:	f006 fbb1 	bl	bb396 <digitalWrite>
	msgCnt++;
   b4c34:	f898 2000 	ldrb.w	r2, [r8]
	attempts++;
   b4c38:	6833      	ldr	r3, [r6, #0]
	Log.info("Sending data report number %d",msgCnt);
   b4c3a:	497c      	ldr	r1, [pc, #496]	; (b4e2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x210>)
   b4c3c:	487c      	ldr	r0, [pc, #496]	; (b4e30 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x214>)
	msgCnt++;
   b4c3e:	3201      	adds	r2, #1
	attempts++;
   b4c40:	3301      	adds	r3, #1
	msgCnt++;
   b4c42:	b2d2      	uxtb	r2, r2
   b4c44:	f888 2000 	strb.w	r2, [r8]
	attempts++;
   b4c48:	6033      	str	r3, [r6, #0]
	Log.info("Sending data report number %d",msgCnt);
   b4c4a:	f7ff fae1 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_deviceID());					// Set for device
   b4c4e:	f000 fb3f 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4c52:	f000 fbfa 	bl	b544a <_ZNK13sysStatusData12get_deviceIDEv>
   b4c56:	0a00      	lsrs	r0, r0, #8
   b4c58:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4c5a:	f000 fb39 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4c5e:	f000 fbf4 	bl	b544a <_ZNK13sysStatusData12get_deviceIDEv>
   b4c62:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());				// NodeID for verification
   b4c64:	f000 fb34 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4c68:	f000 fbf4 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4c6c:	0a00      	lsrs	r0, r0, #8
   b4c6e:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());				
   b4c70:	f000 fb2e 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4c74:	f000 fbee 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
	buf[4] = 1;						// Set for code release - fix later
   b4c78:	2501      	movs	r5, #1
	buf[3] = lowByte(sysStatus.get_nodeNumber());				
   b4c7a:	70e0      	strb	r0, [r4, #3]
	buf[4] = 1;						// Set for code release - fix later
   b4c7c:	7125      	strb	r5, [r4, #4]
	buf[5] = highByte(current.get_hourlyCount());
   b4c7e:	f000 fb6b 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4c82:	f000 fbf6 	bl	b5472 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4c86:	0a00      	lsrs	r0, r0, #8
   b4c88:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(current.get_hourlyCount()); 
   b4c8a:	f000 fb65 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4c8e:	f000 fbf0 	bl	b5472 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4c92:	71a0      	strb	r0, [r4, #6]
	buf[7] = highByte(current.get_dailyCount());
   b4c94:	f000 fb60 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4c98:	f000 fbf0 	bl	b547c <_ZNK17currentStatusData14get_dailyCountEv>
   b4c9c:	0a00      	lsrs	r0, r0, #8
   b4c9e:	71e0      	strb	r0, [r4, #7]
	buf[8] = lowByte(current.get_dailyCount()); 
   b4ca0:	f000 fb5a 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4ca4:	f000 fbea 	bl	b547c <_ZNK17currentStatusData14get_dailyCountEv>
   b4ca8:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_internalTempC();
   b4caa:	f000 fb55 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4cae:	f000 fc42 	bl	b5536 <_ZNK17currentStatusData17get_internalTempCEv>
   b4cb2:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_stateOfCharge();
   b4cb4:	f000 fb50 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4cb8:	f000 fb72 	bl	b53a0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4cbc:	ec51 0b10 	vmov	r0, r1, d0
   b4cc0:	f007 f8fe 	bl	bbec0 <__aeabi_d2uiz>
   b4cc4:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_batteryState();	
   b4cc6:	f000 fb47 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b4cca:	f000 fc39 	bl	b5540 <_ZNK17currentStatusData16get_batteryStateEv>
   b4cce:	72e0      	strb	r0, [r4, #11]
	buf[12] = sysStatus.get_resetCount();
   b4cd0:	f000 fafe 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4cd4:	f000 fc2a 	bl	b552c <_ZNK13sysStatusData14get_resetCountEv>
	buf[13] = 1;				// reserved for later
   b4cd8:	7365      	strb	r5, [r4, #13]
	buf[12] = sysStatus.get_resetCount();
   b4cda:	7320      	strb	r0, [r4, #12]
	buf[14] = highByte(driver.lastRssi());
   b4cdc:	4855      	ldr	r0, [pc, #340]	; (b4e34 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x218>)
   b4cde:	f001 fff4 	bl	b6cca <_ZN15RHGenericDriver8lastRssiEv>
   b4ce2:	1200      	asrs	r0, r0, #8
   b4ce4:	73a0      	strb	r0, [r4, #14]
	buf[15] = lowByte(driver.lastRssi()); 
   b4ce6:	4853      	ldr	r0, [pc, #332]	; (b4e34 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x218>)
   b4ce8:	f001 ffef 	bl	b6cca <_ZN15RHGenericDriver8lastRssiEv>
	buf[16] = msgCnt;
   b4cec:	f898 3000 	ldrb.w	r3, [r8]
   b4cf0:	7423      	strb	r3, [r4, #16]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	unsigned char result = manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT);
   b4cf2:	2303      	movs	r3, #3
	buf[15] = lowByte(driver.lastRssi()); 
   b4cf4:	73e0      	strb	r0, [r4, #15]
	unsigned char result = manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT);
   b4cf6:	4621      	mov	r1, r4
   b4cf8:	9300      	str	r3, [sp, #0]
   b4cfa:	484f      	ldr	r0, [pc, #316]	; (b4e38 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x21c>)
   b4cfc:	f8df 8154 	ldr.w	r8, [pc, #340]	; b4e54 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x238>
   b4d00:	2300      	movs	r3, #0
   b4d02:	2211      	movs	r2, #17
   b4d04:	f002 f9fc 	bl	b7100 <_ZN6RHMesh10sendtoWaitEPhhhh>
	
	if ( result == RH_ROUTER_ERROR_NONE) {
   b4d08:	4604      	mov	r4, r0
   b4d0a:	bb18      	cbnz	r0, b4d54 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x138>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		success++;
   b4d0c:	f8d8 0000 	ldr.w	r0, [r8]
   b4d10:	4428      	add	r0, r5
   b4d12:	f8c8 0000 	str.w	r0, [r8]
		Log.info("Data report delivered - success rate %4.2f",((success * 1.0)/ attempts)*100.0);
   b4d16:	f006 fd91 	bl	bb83c <__aeabi_i2d>
   b4d1a:	4680      	mov	r8, r0
   b4d1c:	6830      	ldr	r0, [r6, #0]
   b4d1e:	4689      	mov	r9, r1
   b4d20:	f006 fd8c 	bl	bb83c <__aeabi_i2d>
   b4d24:	4602      	mov	r2, r0
   b4d26:	460b      	mov	r3, r1
   b4d28:	4640      	mov	r0, r8
   b4d2a:	4649      	mov	r1, r9
   b4d2c:	f006 ff1a 	bl	bbb64 <__aeabi_ddiv>
   b4d30:	4b42      	ldr	r3, [pc, #264]	; (b4e3c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x220>)
   b4d32:	2200      	movs	r2, #0
   b4d34:	f006 fdec 	bl	bb910 <__aeabi_dmul>
   b4d38:	4602      	mov	r2, r0
   b4d3a:	460b      	mov	r3, r1
   b4d3c:	483c      	ldr	r0, [pc, #240]	; (b4e30 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x214>)
   b4d3e:	4940      	ldr	r1, [pc, #256]	; (b4e40 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x224>)
   b4d40:	f7ff fa66 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4d44:	4638      	mov	r0, r7
   b4d46:	4621      	mov	r1, r4
   b4d48:	f006 fb25 	bl	bb396 <digitalWrite>
		return true;
   b4d4c:	4628      	mov	r0, r5
	else  {
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
	}
	digitalWrite(BLUE_LED, LOW);
	return false;
}
   b4d4e:	b003      	add	sp, #12
   b4d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if (result == RH_ROUTER_ERROR_NO_ROUTE) {
   b4d54:	2802      	cmp	r0, #2
   b4d56:	d125      	bne.n	b4da4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x188>
        Log.info("Node %d - Data report send to gateway %d failed - No Route - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4d58:	f000 faba 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4d5c:	f000 fb7a 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d60:	4604      	mov	r4, r0
   b4d62:	f8d8 0000 	ldr.w	r0, [r8]
   b4d66:	f006 fd69 	bl	bb83c <__aeabi_i2d>
   b4d6a:	4680      	mov	r8, r0
   b4d6c:	6830      	ldr	r0, [r6, #0]
   b4d6e:	4689      	mov	r9, r1
   b4d70:	f006 fd64 	bl	bb83c <__aeabi_i2d>
   b4d74:	4602      	mov	r2, r0
   b4d76:	460b      	mov	r3, r1
   b4d78:	4640      	mov	r0, r8
   b4d7a:	4649      	mov	r1, r9
   b4d7c:	f006 fef2 	bl	bbb64 <__aeabi_ddiv>
   b4d80:	4b2e      	ldr	r3, [pc, #184]	; (b4e3c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x220>)
   b4d82:	2200      	movs	r2, #0
   b4d84:	f006 fdc4 	bl	bb910 <__aeabi_dmul>
   b4d88:	e9cd 0100 	strd	r0, r1, [sp]
   b4d8c:	492d      	ldr	r1, [pc, #180]	; (b4e44 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x228>)
   b4d8e:	2300      	movs	r3, #0
   b4d90:	4622      	mov	r2, r4
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4d92:	4827      	ldr	r0, [pc, #156]	; (b4e30 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x214>)
   b4d94:	f7ff fa3c 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED, LOW);
   b4d98:	4638      	mov	r0, r7
   b4d9a:	2100      	movs	r1, #0
   b4d9c:	f006 fafb 	bl	bb396 <digitalWrite>
	return false;
   b4da0:	2000      	movs	r0, #0
   b4da2:	e7d4      	b.n	b4d4e <_ZN14LoRA_Functions21composeDataReportNodeEv+0x132>
    else if (result == RH_ROUTER_ERROR_UNABLE_TO_DELIVER) {
   b4da4:	2805      	cmp	r0, #5
   b4da6:	d11d      	bne.n	b4de4 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c8>
        Log.info("Node %d - Data report send to gateway %d failed - Unable to Deliver - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4da8:	f000 fa92 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4dac:	f000 fb52 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4db0:	4604      	mov	r4, r0
   b4db2:	f8d8 0000 	ldr.w	r0, [r8]
   b4db6:	f006 fd41 	bl	bb83c <__aeabi_i2d>
   b4dba:	4680      	mov	r8, r0
   b4dbc:	6830      	ldr	r0, [r6, #0]
   b4dbe:	4689      	mov	r9, r1
   b4dc0:	f006 fd3c 	bl	bb83c <__aeabi_i2d>
   b4dc4:	4602      	mov	r2, r0
   b4dc6:	460b      	mov	r3, r1
   b4dc8:	4640      	mov	r0, r8
   b4dca:	4649      	mov	r1, r9
   b4dcc:	f006 feca 	bl	bbb64 <__aeabi_ddiv>
   b4dd0:	4b1a      	ldr	r3, [pc, #104]	; (b4e3c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x220>)
   b4dd2:	2200      	movs	r2, #0
   b4dd4:	f006 fd9c 	bl	bb910 <__aeabi_dmul>
   b4dd8:	2300      	movs	r3, #0
   b4dda:	e9cd 0100 	strd	r0, r1, [sp]
   b4dde:	4622      	mov	r2, r4
   b4de0:	4919      	ldr	r1, [pc, #100]	; (b4e48 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x22c>)
   b4de2:	e7d6      	b.n	b4d92 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x176>
		Log.info("Node %d - Data report send to gateway %d failed  - Unknown - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4de4:	f000 fa74 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4de8:	f000 fb34 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4dec:	4604      	mov	r4, r0
   b4dee:	f8d8 0000 	ldr.w	r0, [r8]
   b4df2:	f006 fd23 	bl	bb83c <__aeabi_i2d>
   b4df6:	4680      	mov	r8, r0
   b4df8:	6830      	ldr	r0, [r6, #0]
   b4dfa:	4689      	mov	r9, r1
   b4dfc:	f006 fd1e 	bl	bb83c <__aeabi_i2d>
   b4e00:	4602      	mov	r2, r0
   b4e02:	460b      	mov	r3, r1
   b4e04:	4640      	mov	r0, r8
   b4e06:	4649      	mov	r1, r9
   b4e08:	f006 feac 	bl	bbb64 <__aeabi_ddiv>
   b4e0c:	4b0b      	ldr	r3, [pc, #44]	; (b4e3c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x220>)
   b4e0e:	2200      	movs	r2, #0
   b4e10:	f006 fd7e 	bl	bb910 <__aeabi_dmul>
   b4e14:	2300      	movs	r3, #0
   b4e16:	e9cd 0100 	strd	r0, r1, [sp]
   b4e1a:	4622      	mov	r2, r4
   b4e1c:	490b      	ldr	r1, [pc, #44]	; (b4e4c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x230>)
   b4e1e:	e7b8      	b.n	b4d92 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x176>
   b4e20:	000bca1c 	.word	0x000bca1c
   b4e24:	2003df9c 	.word	0x2003df9c
   b4e28:	2003dfa0 	.word	0x2003dfa0
   b4e2c:	000bc638 	.word	0x000bc638
   b4e30:	2003e658 	.word	0x2003e658
   b4e34:	2003e09c 	.word	0x2003e09c
   b4e38:	2003e1cc 	.word	0x2003e1cc
   b4e3c:	40590000 	.word	0x40590000
   b4e40:	000bc656 	.word	0x000bc656
   b4e44:	000bc681 	.word	0x000bc681
   b4e48:	000bc6d1 	.word	0x000bc6d1
   b4e4c:	000bc72a 	.word	0x000bc72a
   b4e50:	2003df94 	.word	0x2003df94
   b4e54:	2003df98 	.word	0x2003df98

000b4e58 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:
	Log.info("Data report acknowledged");
	return true;
}

bool LoRA_Functions::composeJoinRequesttNode() {
	digitalWrite(BLUE_LED,HIGH);
   b4e58:	4b2b      	ldr	r3, [pc, #172]	; (b4f08 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb0>)
bool LoRA_Functions::composeJoinRequesttNode() {
   b4e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	digitalWrite(BLUE_LED,HIGH);
   b4e5c:	881e      	ldrh	r6, [r3, #0]

	buf[0] = highByte(sysStatus.get_deviceID());                      // deviceID is unique to the device
   b4e5e:	4c2b      	ldr	r4, [pc, #172]	; (b4f0c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb4>)
	digitalWrite(BLUE_LED,HIGH);
   b4e60:	2101      	movs	r1, #1
   b4e62:	4630      	mov	r0, r6
   b4e64:	f006 fa97 	bl	bb396 <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());                      // deviceID is unique to the device
   b4e68:	f000 fa32 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4e6c:	f000 faed 	bl	b544a <_ZNK13sysStatusData12get_deviceIDEv>
   b4e70:	0a00      	lsrs	r0, r0, #8
   b4e72:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4e74:	f000 fa2c 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4e78:	f000 fae7 	bl	b544a <_ZNK13sysStatusData12get_deviceIDEv>
   b4e7c:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());                  			// Node Number
   b4e7e:	f000 fa27 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4e82:	f000 fae7 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e86:	0a00      	lsrs	r0, r0, #8
   b4e88:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());
   b4e8a:	f000 fa21 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4e8e:	f000 fae1 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e92:	70e0      	strb	r0, [r4, #3]
	buf[4] = sysStatus.get_structuresVersion();						// Needs to equal 128
   b4e94:	f000 fa1c 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4e98:	f000 fb43 	bl	b5522 <_ZNK13sysStatusData21get_structuresVersionEv>
   b4e9c:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(driver.lastRssi());				        // Signal strength
   b4e9e:	481c      	ldr	r0, [pc, #112]	; (b4f10 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb8>)
   b4ea0:	f001 ff13 	bl	b6cca <_ZN15RHGenericDriver8lastRssiEv>
   b4ea4:	1200      	asrs	r0, r0, #8
   b4ea6:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(driver.lastRssi()); 
   b4ea8:	4819      	ldr	r0, [pc, #100]	; (b4f10 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xb8>)
   b4eaa:	f001 ff0e 	bl	b6cca <_ZN15RHGenericDriver8lastRssiEv>
   b4eae:	71a0      	strb	r0, [r4, #6]

	
	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4eb0:	f000 fa0e 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4eb4:	f000 face 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4eb8:	4916      	ldr	r1, [pc, #88]	; (b4f14 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xbc>)
   b4eba:	4a17      	ldr	r2, [pc, #92]	; (b4f18 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc0>)
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4ebc:	2501      	movs	r5, #1
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4ebe:	2809      	cmp	r0, #9
   b4ec0:	bf98      	it	ls
   b4ec2:	460a      	movls	r2, r1
   b4ec4:	4915      	ldr	r1, [pc, #84]	; (b4f1c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
   b4ec6:	4816      	ldr	r0, [pc, #88]	; (b4f20 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4ec8:	f7ff f9a2 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4ecc:	4621      	mov	r1, r4
   b4ece:	4815      	ldr	r0, [pc, #84]	; (b4f24 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>)
   b4ed0:	9500      	str	r5, [sp, #0]
   b4ed2:	2300      	movs	r3, #0
   b4ed4:	2207      	movs	r2, #7
   b4ed6:	f002 f913 	bl	b7100 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4eda:	4604      	mov	r4, r0
   b4edc:	b950      	cbnz	r0, b4ef4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x9c>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   b4ede:	4912      	ldr	r1, [pc, #72]	; (b4f28 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>)
   b4ee0:	480f      	ldr	r0, [pc, #60]	; (b4f20 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4ee2:	f7ff f995 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4ee6:	4630      	mov	r0, r6
   b4ee8:	4621      	mov	r1, r4
   b4eea:	f006 fa54 	bl	bb396 <digitalWrite>
		return true;
   b4eee:	4628      	mov	r0, r5
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   b4ef0:	b002      	add	sp, #8
   b4ef2:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   b4ef4:	490d      	ldr	r1, [pc, #52]	; (b4f2c <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b4ef6:	480a      	ldr	r0, [pc, #40]	; (b4f20 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4ef8:	f7ff f98a 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4efc:	4630      	mov	r0, r6
   b4efe:	2100      	movs	r1, #0
   b4f00:	f006 fa49 	bl	bb396 <digitalWrite>
		return false;
   b4f04:	2000      	movs	r0, #0
   b4f06:	e7f3      	b.n	b4ef0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0x98>
   b4f08:	000bca1c 	.word	0x000bca1c
   b4f0c:	2003dfa0 	.word	0x2003dfa0
   b4f10:	2003e09c 	.word	0x2003e09c
   b4f14:	000bc793 	.word	0x000bc793
   b4f18:	000bc7aa 	.word	0x000bc7aa
   b4f1c:	000bc7bf 	.word	0x000bc7bf
   b4f20:	2003e658 	.word	0x2003e658
   b4f24:	2003e1cc 	.word	0x2003e1cc
   b4f28:	000bc7df 	.word	0x000bc7df
   b4f2c:	000bc808 	.word	0x000bc808

000b4f30 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b4f30:	b510      	push	{r4, lr}

	if (sysStatus.get_nodeNumber() < 10 && buf[0] == 128) sysStatus.set_nodeNumber((buf[7] << 8 | buf[8]));
   b4f32:	f000 f9cd 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4f36:	f000 fa8d 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4f3a:	2809      	cmp	r0, #9
   b4f3c:	d80b      	bhi.n	b4f56 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x26>
   b4f3e:	4c0b      	ldr	r4, [pc, #44]	; (b4f6c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x3c>)
   b4f40:	7823      	ldrb	r3, [r4, #0]
   b4f42:	2b80      	cmp	r3, #128	; 0x80
   b4f44:	d107      	bne.n	b4f56 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x26>
   b4f46:	f000 f9c3 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4f4a:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b4f4e:	ba49      	rev16	r1, r1
   b4f50:	b289      	uxth	r1, r1
   b4f52:	f000 fabc 	bl	b54ce <_ZN13sysStatusData14set_nodeNumberEt>
	Log.info("Join request acknowledged and node ID set to %d", sysStatus.get_nodeNumber());
   b4f56:	f000 f9bb 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4f5a:	f000 fa7b 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4f5e:	4904      	ldr	r1, [pc, #16]	; (b4f70 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x40>)
   b4f60:	4602      	mov	r2, r0
   b4f62:	4804      	ldr	r0, [pc, #16]	; (b4f74 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x44>)
   b4f64:	f7ff f954 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
	return true;
}
   b4f68:	2001      	movs	r0, #1
   b4f6a:	bd10      	pop	{r4, pc}
   b4f6c:	2003dfa0 	.word	0x2003dfa0
   b4f70:	000bc82b 	.word	0x000bc82b
   b4f74:	2003e658 	.word	0x2003e658

000b4f78 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b4f78:	b570      	push	{r4, r5, r6, lr}
   b4f7a:	b08c      	sub	sp, #48	; 0x30
	uint8_t len = sizeof(buf);
   b4f7c:	23f9      	movs	r3, #249	; 0xf9
   b4f7e:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message
   b4f82:	f10d 031f 	add.w	r3, sp, #31
   b4f86:	9303      	str	r3, [sp, #12]
   b4f88:	f10d 031e 	add.w	r3, sp, #30
   b4f8c:	9302      	str	r3, [sp, #8]
   b4f8e:	4e36      	ldr	r6, [pc, #216]	; (b5068 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf0>)
   b4f90:	4836      	ldr	r0, [pc, #216]	; (b506c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf4>)
   b4f92:	f10d 031d 	add.w	r3, sp, #29
   b4f96:	9301      	str	r3, [sp, #4]
   b4f98:	ab07      	add	r3, sp, #28
   b4f9a:	9300      	str	r3, [sp, #0]
   b4f9c:	f10d 021a 	add.w	r2, sp, #26
   b4fa0:	f10d 031b 	add.w	r3, sp, #27
   b4fa4:	4631      	mov	r1, r6
   b4fa6:	f002 f8df 	bl	b7168 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b4faa:	4604      	mov	r4, r0
   b4fac:	b918      	cbnz	r0, b4fb6 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x3e>
	return false;
   b4fae:	2400      	movs	r4, #0
}
   b4fb0:	4620      	mov	r0, r4
   b4fb2:	b00c      	add	sp, #48	; 0x30
   b4fb4:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b4fb6:	f89d 301a 	ldrb.w	r3, [sp, #26]
		lora_state = (LoRA_State)messageFlag;
   b4fba:	4d2d      	ldr	r5, [pc, #180]	; (b5070 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xf8>)
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b4fbc:	482d      	ldr	r0, [pc, #180]	; (b5074 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xfc>)
		buf[len] = 0;
   b4fbe:	2200      	movs	r2, #0
   b4fc0:	54f2      	strb	r2, [r6, r3]
		lora_state = (LoRA_State)messageFlag;
   b4fc2:	f89d 301e 	ldrb.w	r3, [sp, #30]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b4fc6:	f89d 201b 	ldrb.w	r2, [sp, #27]
		lora_state = (LoRA_State)messageFlag;
   b4fca:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b4fcc:	9205      	str	r2, [sp, #20]
   b4fce:	f001 fe7c 	bl	b6cca <_ZN15RHGenericDriver8lastRssiEv>
   b4fd2:	4929      	ldr	r1, [pc, #164]	; (b5078 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x100>)
   b4fd4:	9a05      	ldr	r2, [sp, #20]
   b4fd6:	4603      	mov	r3, r0
   b4fd8:	7828      	ldrb	r0, [r5, #0]
   b4fda:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b4fde:	9100      	str	r1, [sp, #0]
   b4fe0:	4826      	ldr	r0, [pc, #152]	; (b507c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x104>)
   b4fe2:	4927      	ldr	r1, [pc, #156]	; (b5080 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x108>)
   b4fe4:	f7ff f914 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		Time.setTime(((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]));  // Set time based on response from gateway
   b4fe8:	f8d6 0001 	ldr.w	r0, [r6, #1]
   b4fec:	ba00      	rev	r0, r0
   b4fee:	17c1      	asrs	r1, r0, #31
   b4ff0:	f005 fea8 	bl	bad44 <_ZN9TimeClass7setTimeEx>
		sysStatus.set_frequencyMinutes((buf[5] << 8 | buf[6]));			// Frequency of reporting set by Gateway
   b4ff4:	f000 f96c 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b4ff8:	f8b6 1005 	ldrh.w	r1, [r6, #5]
   b4ffc:	ba49      	rev16	r1, r1
   b4ffe:	b289      	uxth	r1, r1
   b5000:	f000 fa6b 	bl	b54da <_ZN13sysStatusData20set_frequencyMinutesEt>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   b5004:	f005 ffb7 	bl	baf76 <_ZN9TimeClass3nowEv>
   b5008:	17c3      	asrs	r3, r0, #31
   b500a:	4602      	mov	r2, r0
   b500c:	a808      	add	r0, sp, #32
   b500e:	f005 fead 	bl	bad6c <_ZN9TimeClass7timeStrEx>
   b5012:	9a08      	ldr	r2, [sp, #32]
   b5014:	9205      	str	r2, [sp, #20]
		Log.info("Set clock to %s and report frequency to %d minutes", Time.timeStr().c_str(),sysStatus.get_frequencyMinutes());
   b5016:	f000 f95b 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b501a:	f000 fa20 	bl	b545e <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b501e:	9a05      	ldr	r2, [sp, #20]
   b5020:	4918      	ldr	r1, [pc, #96]	; (b5084 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x10c>)
   b5022:	4603      	mov	r3, r0
   b5024:	4815      	ldr	r0, [pc, #84]	; (b507c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x104>)
   b5026:	f7ff f8f3 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b502a:	a808      	add	r0, sp, #32
   b502c:	f005 fcae 	bl	ba98c <_ZN6StringD1Ev>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b5030:	782b      	ldrb	r3, [r5, #0]
   b5032:	2b04      	cmp	r3, #4
   b5034:	d106      	bne.n	b5044 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xcc>
   b5036:	f7ff fd4f 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
	Log.info("Data report acknowledged");
   b503a:	4913      	ldr	r1, [pc, #76]	; (b5088 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x110>)
	}
}

bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {

	Log.info("Alert report acknowledged");
   b503c:	480f      	ldr	r0, [pc, #60]	; (b507c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x104>)
   b503e:	f7ff f8e7 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b5042:	e7b5      	b.n	b4fb0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b5044:	2b02      	cmp	r3, #2
   b5046:	d006      	beq.n	b5056 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xde>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b5048:	782b      	ldrb	r3, [r5, #0]
   b504a:	2b06      	cmp	r3, #6
   b504c:	d1af      	bne.n	b4fae <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
   b504e:	f7ff fd43 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
	Log.info("Alert report acknowledged");
   b5052:	490e      	ldr	r1, [pc, #56]	; (b508c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x114>)
   b5054:	e7f2      	b.n	b503c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xc4>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b5056:	f7ff fd3f 	bl	b4ad8 <_ZN14LoRA_Functions8instanceEv>
   b505a:	f7ff ff69 	bl	b4f30 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b505e:	2800      	cmp	r0, #0
   b5060:	d0f2      	beq.n	b5048 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xd0>
   b5062:	4604      	mov	r4, r0
   b5064:	e7a4      	b.n	b4fb0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x38>
   b5066:	bf00      	nop
   b5068:	2003dfa0 	.word	0x2003dfa0
   b506c:	2003e1cc 	.word	0x2003e1cc
   b5070:	2003df8c 	.word	0x2003df8c
   b5074:	2003e09c 	.word	0x2003e09c
   b5078:	2003de04 	.word	0x2003de04
   b507c:	2003e658 	.word	0x2003e658
   b5080:	000bc85b 	.word	0x000bc85b
   b5084:	000bc88d 	.word	0x000bc88d
   b5088:	000bc77a 	.word	0x000bc77a
   b508c:	000bc8c0 	.word	0x000bc8c0

000b5090 <_ZN14LoRA_Functions22composeAlertReportNodeEv>:
	digitalWrite(BLUE_LED,HIGH);
   b5090:	4b30      	ldr	r3, [pc, #192]	; (b5154 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xc4>)
bool LoRA_Functions::composeAlertReportNode() {
   b5092:	b573      	push	{r0, r1, r4, r5, r6, lr}
	digitalWrite(BLUE_LED,HIGH);
   b5094:	881e      	ldrh	r6, [r3, #0]
	buf[0] = highByte(sysStatus.get_deviceID());       // deviceID is unique to the device
   b5096:	4c30      	ldr	r4, [pc, #192]	; (b5158 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xc8>)
	digitalWrite(BLUE_LED,HIGH);
   b5098:	2101      	movs	r1, #1
   b509a:	4630      	mov	r0, r6
   b509c:	f006 f97b 	bl	bb396 <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());       // deviceID is unique to the device
   b50a0:	f000 f916 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b50a4:	f000 f9d1 	bl	b544a <_ZNK13sysStatusData12get_deviceIDEv>
   b50a8:	0a00      	lsrs	r0, r0, #8
   b50aa:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b50ac:	f000 f910 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b50b0:	f000 f9cb 	bl	b544a <_ZNK13sysStatusData12get_deviceIDEv>
   b50b4:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());     // Node Number
   b50b6:	f000 f90b 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b50ba:	f000 f9cb 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b50be:	0a00      	lsrs	r0, r0, #8
   b50c0:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());
   b50c2:	f000 f905 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b50c6:	f000 f9c5 	bl	b5454 <_ZNK13sysStatusData14get_nodeNumberEv>
   b50ca:	70e0      	strb	r0, [r4, #3]
	buf[4] = highByte(current.get_alertCodeNode());   // Node's Alert Code
   b50cc:	f000 f944 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b50d0:	2500      	movs	r5, #0
   b50d2:	f000 fa3a 	bl	b554a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b50d6:	7125      	strb	r5, [r4, #4]
	buf[5] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b50d8:	f005 ff4d 	bl	baf76 <_ZN9TimeClass3nowEv>
   b50dc:	1600      	asrs	r0, r0, #24
   b50de:	7160      	strb	r0, [r4, #5]
	buf[6] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b50e0:	f005 ff49 	bl	baf76 <_ZN9TimeClass3nowEv>
   b50e4:	1400      	asrs	r0, r0, #16
   b50e6:	71a0      	strb	r0, [r4, #6]
	buf[7] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b50e8:	f005 ff45 	bl	baf76 <_ZN9TimeClass3nowEv>
   b50ec:	1200      	asrs	r0, r0, #8
   b50ee:	71e0      	strb	r0, [r4, #7]
	buf[8] = ((uint8_t) (Time.now()));		    // First byte			
   b50f0:	f005 ff41 	bl	baf76 <_ZN9TimeClass3nowEv>
   b50f4:	7220      	strb	r0, [r4, #8]
	buf[9] = highByte(driver.lastRssi());		// Signal strength
   b50f6:	4819      	ldr	r0, [pc, #100]	; (b515c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xcc>)
   b50f8:	f001 fde7 	bl	b6cca <_ZN15RHGenericDriver8lastRssiEv>
   b50fc:	1200      	asrs	r0, r0, #8
   b50fe:	7260      	strb	r0, [r4, #9]
	buf[10] = lowByte(driver.lastRssi()); 
   b5100:	4816      	ldr	r0, [pc, #88]	; (b515c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xcc>)
   b5102:	f001 fde2 	bl	b6cca <_ZN15RHGenericDriver8lastRssiEv>
	if (manager.sendtoWait(buf, 11, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b5106:	2305      	movs	r3, #5
	buf[10] = lowByte(driver.lastRssi()); 
   b5108:	72a0      	strb	r0, [r4, #10]
	if (manager.sendtoWait(buf, 11, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b510a:	4621      	mov	r1, r4
   b510c:	9300      	str	r3, [sp, #0]
   b510e:	4814      	ldr	r0, [pc, #80]	; (b5160 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd0>)
   b5110:	462b      	mov	r3, r5
   b5112:	220b      	movs	r2, #11
   b5114:	f001 fff4 	bl	b7100 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5118:	4604      	mov	r4, r0
   b511a:	b980      	cbnz	r0, b513e <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xae>
		Log.info("Success sending Alert Report number %d to gateway at %d", current.get_alertCodeNode(), GATEWAY_ADDRESS);
   b511c:	f000 f91c 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5120:	f000 fa13 	bl	b554a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5124:	490f      	ldr	r1, [pc, #60]	; (b5164 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd4>)
   b5126:	4602      	mov	r2, r0
   b5128:	4623      	mov	r3, r4
   b512a:	480f      	ldr	r0, [pc, #60]	; (b5168 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd8>)
   b512c:	f7ff f870 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5130:	4630      	mov	r0, r6
   b5132:	4621      	mov	r1, r4
   b5134:	f006 f92f 	bl	bb396 <digitalWrite>
		return true;
   b5138:	2001      	movs	r0, #1
}
   b513a:	b002      	add	sp, #8
   b513c:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b513e:	490b      	ldr	r1, [pc, #44]	; (b516c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xdc>)
   b5140:	4809      	ldr	r0, [pc, #36]	; (b5168 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xd8>)
   b5142:	f7ff f865 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b5146:	4630      	mov	r0, r6
   b5148:	4629      	mov	r1, r5
   b514a:	f006 f924 	bl	bb396 <digitalWrite>
		return false;
   b514e:	4628      	mov	r0, r5
   b5150:	e7f3      	b.n	b513a <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xaa>
   b5152:	bf00      	nop
   b5154:	000bca1c 	.word	0x000bca1c
   b5158:	2003dfa0 	.word	0x2003dfa0
   b515c:	2003e09c 	.word	0x2003e09c
   b5160:	2003e1cc 	.word	0x2003e1cc
   b5164:	000bc8da 	.word	0x000bc8da
   b5168:	2003e658 	.word	0x2003e658
   b516c:	000bc912 	.word	0x000bc912

000b5170 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
	return true;
}
   b5170:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b5172:	4a08      	ldr	r2, [pc, #32]	; (b5194 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b5174:	4c08      	ldr	r4, [pc, #32]	; (b5198 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b5176:	4909      	ldr	r1, [pc, #36]	; (b519c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b5178:	7812      	ldrb	r2, [r2, #0]
   b517a:	7809      	ldrb	r1, [r1, #0]
   b517c:	4b08      	ldr	r3, [pc, #32]	; (b51a0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b517e:	4620      	mov	r0, r4
   b5180:	f002 fcb4 	bl	b7aec <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b5184:	4621      	mov	r1, r4
   b5186:	4807      	ldr	r0, [pc, #28]	; (b51a4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b5188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b518c:	2200      	movs	r2, #0
   b518e:	f001 bfad 	b.w	b70ec <_ZN6RHMeshC1ER15RHGenericDriverh>
   b5192:	bf00      	nop
   b5194:	000bca24 	.word	0x000bca24
   b5198:	2003e09c 	.word	0x2003e09c
   b519c:	000bca22 	.word	0x000bca22
   b51a0:	2003e3f0 	.word	0x2003e3f0
   b51a4:	2003e1cc 	.word	0x2003e1cc

000b51a8 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b51a8:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b51aa:	4b04      	ldr	r3, [pc, #16]	; (b51bc <_ZN17currentStatusDataD1Ev+0x14>)
   b51ac:	6003      	str	r3, [r0, #0]
   b51ae:	4604      	mov	r4, r0
            if (handle_) {
   b51b0:	6840      	ldr	r0, [r0, #4]
   b51b2:	b108      	cbz	r0, b51b8 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b51b4:	f003 f82c 	bl	b8210 <os_mutex_recursive_destroy>
}
   b51b8:	4620      	mov	r0, r4
   b51ba:	bd10      	pop	{r4, pc}
   b51bc:	000bd110 	.word	0x000bd110

000b51c0 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b51c0:	b510      	push	{r4, lr}
   b51c2:	4604      	mov	r4, r0
}
   b51c4:	f7ff fff0 	bl	b51a8 <_ZN17currentStatusDataD1Ev>
   b51c8:	4620      	mov	r0, r4
   b51ca:	2178      	movs	r1, #120	; 0x78
   b51cc:	f7fe ff67 	bl	b409e <_ZdlPvj>
   b51d0:	4620      	mov	r0, r4
   b51d2:	bd10      	pop	{r4, pc}

000b51d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b51d4:	b510      	push	{r4, lr}
   b51d6:	4b03      	ldr	r3, [pc, #12]	; (b51e4 <_ZN8MB85RC64D1Ev+0x10>)
   b51d8:	6003      	str	r3, [r0, #0]
   b51da:	4604      	mov	r4, r0
   b51dc:	f001 fbca 	bl	b6974 <_ZN6MB85RCD1Ev>
   b51e0:	4620      	mov	r0, r4
   b51e2:	bd10      	pop	{r4, pc}
   b51e4:	000bc97c 	.word	0x000bc97c

000b51e8 <_ZN8MB85RC64D0Ev>:
   b51e8:	b510      	push	{r4, lr}
   b51ea:	4604      	mov	r4, r0
   b51ec:	f7ff fff2 	bl	b51d4 <_ZN8MB85RC64D1Ev>
   b51f0:	4620      	mov	r0, r4
   b51f2:	2110      	movs	r1, #16
   b51f4:	f7fe ff53 	bl	b409e <_ZdlPvj>
   b51f8:	4620      	mov	r0, r4
   b51fa:	bd10      	pop	{r4, pc}

000b51fc <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b51fc:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b51fe:	4b04      	ldr	r3, [pc, #16]	; (b5210 <_ZN13sysStatusDataD1Ev+0x14>)
   b5200:	6003      	str	r3, [r0, #0]
   b5202:	4604      	mov	r4, r0
            if (handle_) {
   b5204:	6840      	ldr	r0, [r0, #4]
   b5206:	b108      	cbz	r0, b520c <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5208:	f003 f802 	bl	b8210 <os_mutex_recursive_destroy>
}
   b520c:	4620      	mov	r0, r4
   b520e:	bd10      	pop	{r4, pc}
   b5210:	000bd110 	.word	0x000bd110

000b5214 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b5214:	b510      	push	{r4, lr}
   b5216:	4604      	mov	r4, r0
}
   b5218:	f7ff fff0 	bl	b51fc <_ZN13sysStatusDataD1Ev>
   b521c:	4620      	mov	r0, r4
   b521e:	2170      	movs	r1, #112	; 0x70
   b5220:	f7fe ff3d 	bl	b409e <_ZdlPvj>
   b5224:	4620      	mov	r0, r4
   b5226:	bd10      	pop	{r4, pc}

000b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b5228:	b510      	push	{r4, lr}
            if (!handle_) {
   b522a:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b522c:	4604      	mov	r4, r0
            if (!handle_) {
   b522e:	b90b      	cbnz	r3, b5234 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5230:	f002 ffe6 	bl	b8200 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b5234:	6820      	ldr	r0, [r4, #0]
        }
   b5236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b523a:	f002 bff1 	b.w	b8220 <os_mutex_recursive_lock>

000b523e <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b523e:	b538      	push	{r3, r4, r5, lr}
   b5240:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b5242:	3004      	adds	r0, #4
   b5244:	f7ff fff0 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5248:	6a20      	ldr	r0, [r4, #32]
   b524a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b524c:	6803      	ldr	r3, [r0, #0]
   b524e:	68dd      	ldr	r5, [r3, #12]
   b5250:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5254:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b5256:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b525c:	f002 bfe8 	b.w	b8230 <os_mutex_recursive_unlock>

000b5260 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5260:	b538      	push	{r3, r4, r5, lr}
   b5262:	4604      	mov	r4, r0
   b5264:	3004      	adds	r0, #4
   b5266:	f7ff ffdf 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b526a:	6a20      	ldr	r0, [r4, #32]
   b526c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b526e:	6803      	ldr	r3, [r0, #0]
   b5270:	689d      	ldr	r5, [r3, #8]
   b5272:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b5276:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b5278:	68a2      	ldr	r2, [r4, #8]
   b527a:	6823      	ldr	r3, [r4, #0]
   b527c:	88d1      	ldrh	r1, [r2, #6]
   b527e:	695b      	ldr	r3, [r3, #20]
   b5280:	4620      	mov	r0, r4
   b5282:	4798      	blx	r3
   b5284:	b918      	cbnz	r0, b528e <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b5286:	6823      	ldr	r3, [r4, #0]
   b5288:	4620      	mov	r0, r4
   b528a:	699b      	ldr	r3, [r3, #24]
   b528c:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b528e:	6860      	ldr	r0, [r4, #4]
   b5290:	f002 ffce 	bl	b8230 <os_mutex_recursive_unlock>
        }
   b5294:	2001      	movs	r0, #1
   b5296:	bd38      	pop	{r3, r4, r5, pc}

000b5298 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b5298:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b529c:	6081      	str	r1, [r0, #8]
   b529e:	4909      	ldr	r1, [pc, #36]	; (b52c4 <_ZN13sysStatusDataC1Ev+0x2c>)
   b52a0:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b52a4:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b52a8:	2101      	movs	r1, #1
   b52aa:	8281      	strh	r1, [r0, #20]
   b52ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b52b0:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b52b2:	4905      	ldr	r1, [pc, #20]	; (b52c8 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b52b4:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b52b6:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b52ba:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b52bc:	6182      	str	r2, [r0, #24]
   b52be:	4a03      	ldr	r2, [pc, #12]	; (b52cc <_ZN13sysStatusDataC1Ev+0x34>)
   b52c0:	6002      	str	r2, [r0, #0]
};
   b52c2:	4770      	bx	lr
   b52c4:	20a99e73 	.word	0x20a99e73
   b52c8:	2003e388 	.word	0x2003e388
   b52cc:	000bc998 	.word	0x000bc998

000b52d0 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b52d0:	b510      	push	{r4, lr}
    if (!_instance) {
   b52d2:	4c06      	ldr	r4, [pc, #24]	; (b52ec <_ZN13sysStatusData8instanceEv+0x1c>)
   b52d4:	6823      	ldr	r3, [r4, #0]
   b52d6:	b93b      	cbnz	r3, b52e8 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b52d8:	2070      	movs	r0, #112	; 0x70
   b52da:	f7fe fedc 	bl	b4096 <_Znwj>
   b52de:	4603      	mov	r3, r0
   b52e0:	b108      	cbz	r0, b52e6 <_ZN13sysStatusData8instanceEv+0x16>
   b52e2:	f7ff ffd9 	bl	b5298 <_ZN13sysStatusDataC1Ev>
   b52e6:	6023      	str	r3, [r4, #0]
}
   b52e8:	6820      	ldr	r0, [r4, #0]
   b52ea:	bd10      	pop	{r4, pc}
   b52ec:	2003e380 	.word	0x2003e380

000b52f0 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b52f0:	b508      	push	{r3, lr}
    fram.begin();
   b52f2:	6a00      	ldr	r0, [r0, #32]
   b52f4:	f001 fb54 	bl	b69a0 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b52f8:	f7ff ffea 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b52fc:	6803      	ldr	r3, [r0, #0]
   b52fe:	685b      	ldr	r3, [r3, #4]
   b5300:	4798      	blx	r3
}
   b5302:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setNodeConfiguration();                             // Here we will fix the settings specific to the node
   b5306:	f000 baa5 	b.w	b5854 <_Z20setNodeConfigurationv>

000b530a <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b530a:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b530c:	f7ff ffe0 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b5310:	6803      	ldr	r3, [r0, #0]
}
   b5312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5316:	68db      	ldr	r3, [r3, #12]
   b5318:	2100      	movs	r1, #0
   b531a:	4718      	bx	r3

000b531c <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b531c:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b531e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5322:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5324:	6182      	str	r2, [r0, #24]
   b5326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b532a:	6081      	str	r1, [r0, #8]
   b532c:	61c2      	str	r2, [r0, #28]
   b532e:	4907      	ldr	r1, [pc, #28]	; (b534c <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5330:	4a07      	ldr	r2, [pc, #28]	; (b5350 <_ZN17currentStatusDataC1Ev+0x34>)
   b5332:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5334:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5338:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b533a:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b533e:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5340:	2101      	movs	r1, #1
   b5342:	4a04      	ldr	r2, [pc, #16]	; (b5354 <_ZN17currentStatusDataC1Ev+0x38>)
   b5344:	8281      	strh	r1, [r0, #20]
   b5346:	6002      	str	r2, [r0, #0]
};
   b5348:	4770      	bx	lr
   b534a:	bf00      	nop
   b534c:	20a99e73 	.word	0x20a99e73
   b5350:	2003e388 	.word	0x2003e388
   b5354:	000bc9c4 	.word	0x000bc9c4

000b5358 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b5358:	b510      	push	{r4, lr}
    if (!_instance) {
   b535a:	4c06      	ldr	r4, [pc, #24]	; (b5374 <_ZN17currentStatusData8instanceEv+0x1c>)
   b535c:	6823      	ldr	r3, [r4, #0]
   b535e:	b93b      	cbnz	r3, b5370 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b5360:	2078      	movs	r0, #120	; 0x78
   b5362:	f7fe fe98 	bl	b4096 <_Znwj>
   b5366:	4603      	mov	r3, r0
   b5368:	b108      	cbz	r0, b536e <_ZN17currentStatusData8instanceEv+0x16>
   b536a:	f7ff ffd7 	bl	b531c <_ZN17currentStatusDataC1Ev>
   b536e:	6023      	str	r3, [r4, #0]
}
   b5370:	6820      	ldr	r0, [r4, #0]
   b5372:	bd10      	pop	{r4, pc}
   b5374:	2003e384 	.word	0x2003e384

000b5378 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5378:	b510      	push	{r4, lr}
    fram.begin();
   b537a:	6a00      	ldr	r0, [r0, #32]
   b537c:	f001 fb10 	bl	b69a0 <_ZN6MB85RC5beginEv>
    current.load();
   b5380:	f7ff ffea 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5384:	6803      	ldr	r3, [r0, #0]
}
   b5386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.load();
   b538a:	685b      	ldr	r3, [r3, #4]
   b538c:	4718      	bx	r3

000b538e <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b538e:	b510      	push	{r4, lr}
    current.flush(false);
   b5390:	f7ff ffe2 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5394:	6803      	ldr	r3, [r0, #0]
}
   b5396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b539a:	68db      	ldr	r3, [r3, #12]
   b539c:	2100      	movs	r1, #0
   b539e:	4718      	bx	r3

000b53a0 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b53a0:	b510      	push	{r4, lr}
   b53a2:	4604      	mov	r4, r0
   b53a4:	ed2d 8b02 	vpush	{d8}
   b53a8:	3004      	adds	r0, #4
   b53aa:	f7ff ff3d 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b53ae:	68e3      	ldr	r3, [r4, #12]
   b53b0:	3b08      	subs	r3, #8
   b53b2:	2b17      	cmp	r3, #23
   b53b4:	d90c      	bls.n	b53d0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b53b6:	68a3      	ldr	r3, [r4, #8]
   b53b8:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b53bc:	6860      	ldr	r0, [r4, #4]
   b53be:	f002 ff37 	bl	b8230 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b53c2:	eeb0 0a48 	vmov.f32	s0, s16
   b53c6:	eef0 0a68 	vmov.f32	s1, s17
   b53ca:	ecbd 8b02 	vpop	{d8}
   b53ce:	bd10      	pop	{r4, pc}
            T result = 0;
   b53d0:	ed9f 8b01 	vldr	d8, [pc, #4]	; b53d8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b53d4:	e7f2      	b.n	b53bc <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b53d6:	bf00      	nop
	...

000b53e0 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b53e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53e2:	4604      	mov	r4, r0
   b53e4:	3004      	adds	r0, #4
   b53e6:	ec57 6b10 	vmov	r6, r7, d0
   b53ea:	f7ff ff1d 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b53ee:	68e3      	ldr	r3, [r4, #12]
   b53f0:	3b08      	subs	r3, #8
   b53f2:	2b17      	cmp	r3, #23
   b53f4:	d912      	bls.n	b541c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b53f6:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b53f8:	4630      	mov	r0, r6
   b53fa:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b53fe:	4639      	mov	r1, r7
   b5400:	f006 fcee 	bl	bbde0 <__aeabi_dcmpeq>
   b5404:	b950      	cbnz	r0, b541c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5406:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b540a:	4620      	mov	r0, r4
   b540c:	68a5      	ldr	r5, [r4, #8]
   b540e:	f002 fe75 	bl	b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5412:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5414:	6823      	ldr	r3, [r4, #0]
   b5416:	4620      	mov	r0, r4
   b5418:	691b      	ldr	r3, [r3, #16]
   b541a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b541c:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b541e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5422:	f002 bf05 	b.w	b8230 <os_mutex_recursive_unlock>

000b5426 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5426:	b538      	push	{r3, r4, r5, lr}
   b5428:	4604      	mov	r4, r0
   b542a:	3004      	adds	r0, #4
   b542c:	460d      	mov	r5, r1
   b542e:	f7ff fefb 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5432:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5434:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5436:	3b02      	subs	r3, #2
   b5438:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b543a:	bf26      	itte	cs
   b543c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b543e:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5440:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5442:	f002 fef5 	bl	b8230 <os_mutex_recursive_unlock>
        }
   b5446:	4628      	mov	r0, r5
   b5448:	bd38      	pop	{r3, r4, r5, pc}

000b544a <_ZNK13sysStatusData12get_deviceIDEv>:
uint16_t sysStatusData::get_deviceID() const {
   b544a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, deviceID));
   b544c:	2110      	movs	r1, #16
   b544e:	f7ff ffea 	bl	b5426 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5452:	bd08      	pop	{r3, pc}

000b5454 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint16_t sysStatusData::get_nodeNumber() const {
   b5454:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, nodeNumber));
   b5456:	2112      	movs	r1, #18
   b5458:	f7ff ffe5 	bl	b5426 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b545c:	bd08      	pop	{r3, pc}

000b545e <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b545e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b5460:	2132      	movs	r1, #50	; 0x32
   b5462:	f7ff ffe0 	bl	b5426 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5466:	bd08      	pop	{r3, pc}

000b5468 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint16_t currentStatusData::get_nodeNumber() const {
   b5468:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeNumber));
   b546a:	2112      	movs	r1, #18
   b546c:	f7ff ffdb 	bl	b5426 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5470:	bd08      	pop	{r3, pc}

000b5472 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b5472:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b5474:	2140      	movs	r1, #64	; 0x40
   b5476:	f7ff ffd6 	bl	b5426 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b547a:	bd08      	pop	{r3, pc}

000b547c <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b547c:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b547e:	2142      	movs	r1, #66	; 0x42
   b5480:	f7ff ffd1 	bl	b5426 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5484:	bd08      	pop	{r3, pc}

000b5486 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5486:	b570      	push	{r4, r5, r6, lr}
   b5488:	4604      	mov	r4, r0
   b548a:	3004      	adds	r0, #4
   b548c:	460d      	mov	r5, r1
   b548e:	4616      	mov	r6, r2
   b5490:	f7ff feca 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5494:	68e3      	ldr	r3, [r4, #12]
   b5496:	3b02      	subs	r3, #2
   b5498:	42ab      	cmp	r3, r5
   b549a:	d30d      	bcc.n	b54b8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b549c:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b549e:	5b5a      	ldrh	r2, [r3, r5]
   b54a0:	42b2      	cmp	r2, r6
   b54a2:	d009      	beq.n	b54b8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b54a4:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b54a6:	4620      	mov	r0, r4
   b54a8:	68a5      	ldr	r5, [r4, #8]
   b54aa:	f002 fe27 	bl	b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b54ae:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b54b0:	6823      	ldr	r3, [r4, #0]
   b54b2:	4620      	mov	r0, r4
   b54b4:	691b      	ldr	r3, [r3, #16]
   b54b6:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b54b8:	6860      	ldr	r0, [r4, #4]
        }
   b54ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b54be:	f002 beb7 	b.w	b8230 <os_mutex_recursive_unlock>

000b54c2 <_ZN13sysStatusData12set_deviceIDEt>:
void sysStatusData::set_deviceID(uint16_t value) {
   b54c2:	b508      	push	{r3, lr}
   b54c4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, deviceID), value);
   b54c6:	2110      	movs	r1, #16
   b54c8:	f7ff ffdd 	bl	b5486 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54cc:	bd08      	pop	{r3, pc}

000b54ce <_ZN13sysStatusData14set_nodeNumberEt>:
void sysStatusData::set_nodeNumber(uint16_t value) {
   b54ce:	b508      	push	{r3, lr}
   b54d0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nodeNumber), value);
   b54d2:	2112      	movs	r1, #18
   b54d4:	f7ff ffd7 	bl	b5486 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54d8:	bd08      	pop	{r3, pc}

000b54da <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b54da:	b508      	push	{r3, lr}
   b54dc:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b54de:	2132      	movs	r1, #50	; 0x32
   b54e0:	f7ff ffd1 	bl	b5486 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54e4:	bd08      	pop	{r3, pc}

000b54e6 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b54e6:	b508      	push	{r3, lr}
   b54e8:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b54ea:	2140      	movs	r1, #64	; 0x40
   b54ec:	f7ff ffcb 	bl	b5486 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54f0:	bd08      	pop	{r3, pc}

000b54f2 <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b54f2:	b508      	push	{r3, lr}
   b54f4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b54f6:	2142      	movs	r1, #66	; 0x42
   b54f8:	f7ff ffc5 	bl	b5486 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b54fc:	bd08      	pop	{r3, pc}

000b54fe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b54fe:	b538      	push	{r3, r4, r5, lr}
   b5500:	4604      	mov	r4, r0
   b5502:	3004      	adds	r0, #4
   b5504:	460d      	mov	r5, r1
   b5506:	f7ff fe8f 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b550a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b550c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b550e:	3b01      	subs	r3, #1
   b5510:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5512:	bf26      	itte	cs
   b5514:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5516:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5518:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b551a:	f002 fe89 	bl	b8230 <os_mutex_recursive_unlock>
        }
   b551e:	4628      	mov	r0, r5
   b5520:	bd38      	pop	{r3, r4, r5, pc}

000b5522 <_ZNK13sysStatusData21get_structuresVersionEv>:
uint8_t sysStatusData::get_structuresVersion() const {
   b5522:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, structuresVersion));
   b5524:	2114      	movs	r1, #20
   b5526:	f7ff ffea 	bl	b54fe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b552a:	bd08      	pop	{r3, pc}

000b552c <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b552c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b552e:	2118      	movs	r1, #24
   b5530:	f7ff ffe5 	bl	b54fe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5534:	bd08      	pop	{r3, pc}

000b5536 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5536:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5538:	2114      	movs	r1, #20
   b553a:	f7ff ffe0 	bl	b54fe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b553e:	bd08      	pop	{r3, pc}

000b5540 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5540:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5542:	2120      	movs	r1, #32
   b5544:	f7ff ffdb 	bl	b54fe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5548:	bd08      	pop	{r3, pc}

000b554a <_ZNK17currentStatusData17get_alertCodeNodeEv>:

uint8_t currentStatusData::get_alertCodeNode() const {
   b554a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b554c:	2144      	movs	r1, #68	; 0x44
   b554e:	f7ff ffd6 	bl	b54fe <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5552:	bd08      	pop	{r3, pc}

000b5554 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5554:	b570      	push	{r4, r5, r6, lr}
   b5556:	4604      	mov	r4, r0
   b5558:	3004      	adds	r0, #4
   b555a:	460d      	mov	r5, r1
   b555c:	4616      	mov	r6, r2
   b555e:	f7ff fe63 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5562:	68e3      	ldr	r3, [r4, #12]
   b5564:	3b01      	subs	r3, #1
   b5566:	42ab      	cmp	r3, r5
   b5568:	d30d      	bcc.n	b5586 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b556a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b556c:	5d5a      	ldrb	r2, [r3, r5]
   b556e:	42b2      	cmp	r2, r6
   b5570:	d009      	beq.n	b5586 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b5572:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5574:	4620      	mov	r0, r4
   b5576:	68a5      	ldr	r5, [r4, #8]
   b5578:	f002 fdc0 	bl	b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b557c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b557e:	6823      	ldr	r3, [r4, #0]
   b5580:	4620      	mov	r0, r4
   b5582:	691b      	ldr	r3, [r3, #16]
   b5584:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5586:	6860      	ldr	r0, [r4, #4]
        }
   b5588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b558c:	f002 be50 	b.w	b8230 <os_mutex_recursive_unlock>

000b5590 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b5590:	b508      	push	{r3, lr}
   b5592:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b5594:	2114      	movs	r1, #20
   b5596:	f7ff ffdd 	bl	b5554 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b559a:	bd08      	pop	{r3, pc}

000b559c <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b559c:	b508      	push	{r3, lr}
   b559e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b55a0:	2118      	movs	r1, #24
   b55a2:	f7ff ffd7 	bl	b5554 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55a6:	bd08      	pop	{r3, pc}

000b55a8 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b55a8:	b508      	push	{r3, lr}
   b55aa:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b55ac:	2114      	movs	r1, #20
   b55ae:	f7ff ffd1 	bl	b5554 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55b2:	bd08      	pop	{r3, pc}

000b55b4 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b55b4:	b508      	push	{r3, lr}
   b55b6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b55b8:	2120      	movs	r1, #32
   b55ba:	f7ff ffcb 	bl	b5554 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55be:	bd08      	pop	{r3, pc}

000b55c0 <_ZN17currentStatusData17set_alertCodeNodeEh>:

void currentStatusData::set_alertCodeNode(uint8_t value) {
   b55c0:	b508      	push	{r3, lr}
   b55c2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b55c4:	2144      	movs	r1, #68	; 0x44
   b55c6:	f7ff ffc5 	bl	b5554 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b55ca:	bd08      	pop	{r3, pc}

000b55cc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b55cc:	b538      	push	{r3, r4, r5, lr}
   b55ce:	4604      	mov	r4, r0
   b55d0:	3004      	adds	r0, #4
   b55d2:	460d      	mov	r5, r1
   b55d4:	f7ff fe28 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b55d8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b55da:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b55dc:	3b01      	subs	r3, #1
   b55de:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b55e0:	bf26      	itte	cs
   b55e2:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b55e4:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b55e6:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b55e8:	f002 fe22 	bl	b8230 <os_mutex_recursive_unlock>
        }
   b55ec:	4628      	mov	r0, r5
   b55ee:	bd38      	pop	{r3, r4, r5, pc}

000b55f0 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b55f0:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b55f2:	2117      	movs	r1, #23
   b55f4:	f7ff ffea 	bl	b55cc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b55f8:	bd08      	pop	{r3, pc}

000b55fa <_ZNK13sysStatusData14get_sensorTypeEv>:
bool sysStatusData::get_sensorType() const {
   b55fa:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, sensorType));
   b55fc:	2140      	movs	r1, #64	; 0x40
   b55fe:	f7ff ffe5 	bl	b55cc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5602:	bd08      	pop	{r3, pc}

000b5604 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5604:	b570      	push	{r4, r5, r6, lr}
   b5606:	4604      	mov	r4, r0
   b5608:	3004      	adds	r0, #4
   b560a:	460d      	mov	r5, r1
   b560c:	4616      	mov	r6, r2
   b560e:	f7ff fe0b 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5612:	68e3      	ldr	r3, [r4, #12]
   b5614:	3b01      	subs	r3, #1
   b5616:	42ab      	cmp	r3, r5
   b5618:	d30d      	bcc.n	b5636 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b561a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b561c:	5d5a      	ldrb	r2, [r3, r5]
   b561e:	42b2      	cmp	r2, r6
   b5620:	d009      	beq.n	b5636 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b5622:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5624:	4620      	mov	r0, r4
   b5626:	68a5      	ldr	r5, [r4, #8]
   b5628:	f002 fd68 	bl	b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b562c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b562e:	6823      	ldr	r3, [r4, #0]
   b5630:	4620      	mov	r0, r4
   b5632:	691b      	ldr	r3, [r3, #16]
   b5634:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5636:	6860      	ldr	r0, [r4, #4]
        }
   b5638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b563c:	f002 bdf8 	b.w	b8230 <os_mutex_recursive_unlock>

000b5640 <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b5640:	b508      	push	{r3, lr}
   b5642:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b5644:	2140      	movs	r1, #64	; 0x40
   b5646:	f7ff ffdd 	bl	b5604 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b564a:	bd08      	pop	{r3, pc}

000b564c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b564e:	4604      	mov	r4, r0
   b5650:	3004      	adds	r0, #4
   b5652:	460d      	mov	r5, r1
   b5654:	f7ff fde8 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5658:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b565a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b565c:	3b08      	subs	r3, #8
   b565e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5660:	bf23      	ittte	cs
   b5662:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b5664:	1949      	addcs	r1, r1, r5
   b5666:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b566a:	2600      	movcc	r6, #0
   b566c:	bf38      	it	cc
   b566e:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b5670:	f002 fdde 	bl	b8230 <os_mutex_recursive_unlock>
        }
   b5674:	4630      	mov	r0, r6
   b5676:	4639      	mov	r1, r7
   b5678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b567a <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b567a:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b567c:	2128      	movs	r1, #40	; 0x28
   b567e:	f7ff ffe5 	bl	b564c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b5682:	bd08      	pop	{r3, pc}

000b5684 <_ZNK17currentStatusData17get_lastCountTimeEv>:
time_t currentStatusData::get_lastCountTime() const {
   b5684:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(CurrentData, lastCountTime));
   b5686:	2138      	movs	r1, #56	; 0x38
   b5688:	f7ff ffe0 	bl	b564c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b568c:	bd08      	pop	{r3, pc}

000b568e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b568e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5690:	4604      	mov	r4, r0
   b5692:	3004      	adds	r0, #4
   b5694:	460d      	mov	r5, r1
   b5696:	461e      	mov	r6, r3
   b5698:	4617      	mov	r7, r2
   b569a:	f7ff fdc5 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b569e:	68e3      	ldr	r3, [r4, #12]
   b56a0:	3b08      	subs	r3, #8
   b56a2:	42ab      	cmp	r3, r5
   b56a4:	d312      	bcc.n	b56cc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b56a6:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b56a8:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b56aa:	5958      	ldr	r0, [r3, r5]
   b56ac:	6851      	ldr	r1, [r2, #4]
   b56ae:	42b1      	cmp	r1, r6
   b56b0:	bf08      	it	eq
   b56b2:	42b8      	cmpeq	r0, r7
   b56b4:	d00a      	beq.n	b56cc <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b56b6:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b56b8:	4620      	mov	r0, r4
                        *(T *)p = value;
   b56ba:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b56bc:	68a5      	ldr	r5, [r4, #8]
   b56be:	f002 fd1d 	bl	b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b56c2:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b56c4:	6823      	ldr	r3, [r4, #0]
   b56c6:	4620      	mov	r0, r4
   b56c8:	691b      	ldr	r3, [r3, #16]
   b56ca:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b56cc:	6860      	ldr	r0, [r4, #4]
        }
   b56ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b56d2:	f002 bdad 	b.w	b8230 <os_mutex_recursive_unlock>

000b56d6 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b56d6:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b56d8:	2128      	movs	r1, #40	; 0x28
   b56da:	f7ff ffd8 	bl	b568e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b56de:	bd08      	pop	{r3, pc}

000b56e0 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b56e0:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b56e2:	2138      	movs	r1, #56	; 0x38
   b56e4:	f7ff ffd3 	bl	b568e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b56e8:	bd08      	pop	{r3, pc}

000b56ea <_ZN17currentStatusData22set_alertTimestampNodeEx>:

time_t currentStatusData::get_alertTimestampNode() const {
    return getValue<time_t>(offsetof(CurrentData, alertTimestampNode));
}

void currentStatusData::set_alertTimestampNode(time_t value) {
   b56ea:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b56ec:	2148      	movs	r1, #72	; 0x48
   b56ee:	f7ff ffce 	bl	b568e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b56f2:	bd08      	pop	{r3, pc}

000b56f4 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b56f4:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b56f6:	4917      	ldr	r1, [pc, #92]	; (b5754 <_Z15resetEverythingv+0x60>)
   b56f8:	4817      	ldr	r0, [pc, #92]	; (b5758 <_Z15resetEverythingv+0x64>)
   b56fa:	f7fe fd89 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b56fe:	f7ff fe2b 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5702:	2100      	movs	r1, #0
   b5704:	f7ff fef5 	bl	b54f2 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5708:	f7ff fe26 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b570c:	2100      	movs	r1, #0
   b570e:	f7ff feea 	bl	b54e6 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b5712:	f7ff fe21 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5716:	4604      	mov	r4, r0
   b5718:	f005 fc2d 	bl	baf76 <_ZN9TimeClass3nowEv>
   b571c:	4602      	mov	r2, r0
   b571e:	17c3      	asrs	r3, r0, #31
   b5720:	4620      	mov	r0, r4
   b5722:	f7ff ffdd 	bl	b56e0 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_alertCodeNode(0);
   b5726:	f7ff fe17 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b572a:	2100      	movs	r1, #0
   b572c:	f7ff ff48 	bl	b55c0 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(Time.now());
   b5730:	f7ff fe12 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5734:	4604      	mov	r4, r0
   b5736:	f005 fc1e 	bl	baf76 <_ZN9TimeClass3nowEv>
   b573a:	4602      	mov	r2, r0
   b573c:	17c3      	asrs	r3, r0, #31
   b573e:	4620      	mov	r0, r4
   b5740:	f7ff ffd3 	bl	b56ea <_ZN17currentStatusData22set_alertTimestampNodeEx>
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b5744:	f7ff fdc4 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
}
   b5748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b574c:	2100      	movs	r1, #0
   b574e:	f7ff bf25 	b.w	b559c <_ZN13sysStatusData14set_resetCountEh>
   b5752:	bf00      	nop
   b5754:	000bc950 	.word	0x000bc950
   b5758:	2003e658 	.word	0x2003e658

000b575c <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b575c:	4b08      	ldr	r3, [pc, #32]	; (b5780 <_GLOBAL__sub_I_fram+0x24>)
   b575e:	2201      	movs	r2, #1

void currentStatusData::logData(const char *msg) {
    Log.info("Current Structure values - %d, %d, %d, %4.2f", currentData.deviceID, currentData.nodeNumber, currentData.internalTempC, currentData.stateOfCharge);
}
   b5760:	b510      	push	{r4, lr}
   b5762:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b5764:	f005 fe88 	bl	bb478 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b5768:	4c06      	ldr	r4, [pc, #24]	; (b5784 <_GLOBAL__sub_I_fram+0x28>)
   b576a:	4601      	mov	r1, r0
   b576c:	2300      	movs	r3, #0
   b576e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b5772:	4620      	mov	r0, r4
   b5774:	f001 f90a 	bl	b698c <_ZN6MB85RCC1ER7TwoWireji>
   b5778:	4b03      	ldr	r3, [pc, #12]	; (b5788 <_GLOBAL__sub_I_fram+0x2c>)
   b577a:	6023      	str	r3, [r4, #0]
}
   b577c:	bd10      	pop	{r4, pc}
   b577e:	bf00      	nop
   b5780:	2003e37c 	.word	0x2003e37c
   b5784:	2003e388 	.word	0x2003e388
   b5788:	000bc97c 	.word	0x000bc97c

000b578c <_Z18initializePinModesv>:
// Sensor specific Pins
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b578c:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b578e:	4913      	ldr	r1, [pc, #76]	; (b57dc <_Z18initializePinModesv+0x50>)
   b5790:	4813      	ldr	r0, [pc, #76]	; (b57e0 <_Z18initializePinModesv+0x54>)
   b5792:	f7fe fd3d 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b5796:	2102      	movs	r1, #2
   b5798:	2004      	movs	r0, #4
   b579a:	f005 fdeb 	bl	bb374 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b579e:	2100      	movs	r1, #0
   b57a0:	2008      	movs	r0, #8
   b57a2:	f005 fde7 	bl	bb374 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b57a6:	2101      	movs	r1, #1
   b57a8:	2007      	movs	r0, #7
   b57aa:	f005 fde3 	bl	bb374 <pinMode>
    pinMode(INT_PIN, INPUT);
   b57ae:	2100      	movs	r1, #0
   b57b0:	2012      	movs	r0, #18
   b57b2:	f005 fddf 	bl	bb374 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b57b6:	2101      	movs	r1, #1
   b57b8:	2011      	movs	r0, #17
   b57ba:	f005 fddb 	bl	bb374 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b57be:	2101      	movs	r1, #1
   b57c0:	2010      	movs	r0, #16
   b57c2:	f005 fdd7 	bl	bb374 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b57c6:	2100      	movs	r1, #0
   b57c8:	2010      	movs	r0, #16
   b57ca:	f005 fde4 	bl	bb396 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b57ce:	2100      	movs	r1, #0
   b57d0:	2011      	movs	r0, #17
   b57d2:	f005 fde0 	bl	bb396 <digitalWrite>
    return true;
}
   b57d6:	2001      	movs	r0, #1
   b57d8:	bd08      	pop	{r3, pc}
   b57da:	bf00      	nop
   b57dc:	000bc9e8 	.word	0x000bc9e8
   b57e0:	2003e658 	.word	0x2003e658

000b57e4 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b57e4:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b57e6:	4918      	ldr	r1, [pc, #96]	; (b5848 <_Z18initializePowerCfgv+0x64>)
   b57e8:	4818      	ldr	r0, [pc, #96]	; (b584c <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b57ea:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b57ec:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b57ee:	f7fe fd0f 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b57f2:	4622      	mov	r2, r4
   b57f4:	2100      	movs	r1, #0
   b57f6:	4668      	mov	r0, sp
   b57f8:	f006 fbfc 	bl	bbff4 <memset>
   b57fc:	4622      	mov	r2, r4
   b57fe:	2100      	movs	r1, #0
   b5800:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5804:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b5808:	f006 fbf4 	bl	bbff4 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b580c:	2100      	movs	r1, #0
   b580e:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5812:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5816:	f002 ff81 	bl	b871c <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b581a:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b581e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b5822:	4b0b      	ldr	r3, [pc, #44]	; (b5850 <_Z18initializePowerCfgv+0x6c>)
   b5824:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5826:	f241 0370 	movw	r3, #4208	; 0x1070
   b582a:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b582e:	9b00      	ldr	r3, [sp, #0]
   b5830:	2100      	movs	r1, #0
   b5832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b5836:	4668      	mov	r0, sp
   b5838:	9300      	str	r3, [sp, #0]
   b583a:	f002 ff6f 	bl	b871c <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b583e:	3800      	subs	r0, #0
   b5840:	bf18      	it	ne
   b5842:	2001      	movne	r0, #1
   b5844:	b010      	add	sp, #64	; 0x40
   b5846:	bd10      	pop	{r4, pc}
   b5848:	000bca01 	.word	0x000bca01
   b584c:	2003e658 	.word	0x2003e658
   b5850:	03840384 	.word	0x03840384

000b5854 <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b5854:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b5856:	4905      	ldr	r1, [pc, #20]	; (b586c <_Z20setNodeConfigurationv+0x18>)
   b5858:	4805      	ldr	r0, [pc, #20]	; (b5870 <_Z20setNodeConfigurationv+0x1c>)
   b585a:	f7fe fcd9 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b585e:	f7ff fd37 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
  // sysStatus.set_deviceID(32148);
  // sysStatus.set_structuresVersion(14);
   b5862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b5866:	2101      	movs	r1, #1
   b5868:	f7ff beea 	b.w	b5640 <_ZN13sysStatusData14set_sensorTypeEb>
   b586c:	000bca28 	.word	0x000bca28
   b5870:	2003e658 	.word	0x2003e658

000b5874 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b5874:	4770      	bx	lr

000b5876 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b5876:	6a00      	ldr	r0, [r0, #32]
   b5878:	6803      	ldr	r3, [r0, #0]
   b587a:	68db      	ldr	r3, [r3, #12]
   b587c:	4718      	bx	r3
	...

000b5880 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b5880:	4b0a      	ldr	r3, [pc, #40]	; (b58ac <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b5882:	b510      	push	{r4, lr}
   b5884:	4604      	mov	r4, r0
   b5886:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b5888:	f003 febe 	bl	b9608 <_ZN5spark10LogManager8instanceEv>
   b588c:	4621      	mov	r1, r4
   b588e:	f004 f8f6 	bl	b9a7e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b5892:	f005 fc57 	bl	bb144 <_Z16_fetch_usbserialv>
   b5896:	f005 fc47 	bl	bb128 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b589a:	4620      	mov	r0, r4
   b589c:	4b04      	ldr	r3, [pc, #16]	; (b58b0 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b589e:	f840 3b04 	str.w	r3, [r0], #4
   b58a2:	f003 ff87 	bl	b97b4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b58a6:	4620      	mov	r0, r4
   b58a8:	bd10      	pop	{r4, pc}
   b58aa:	bf00      	nop
   b58ac:	000bca64 	.word	0x000bca64
   b58b0:	000bca4c 	.word	0x000bca4c

000b58b4 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b58b4:	b510      	push	{r4, lr}
   b58b6:	4604      	mov	r4, r0
    }
   b58b8:	f7ff ffe2 	bl	b5880 <_ZN5spark16SerialLogHandlerD1Ev>
   b58bc:	4620      	mov	r0, r4
   b58be:	2124      	movs	r1, #36	; 0x24
   b58c0:	f7fe fbed 	bl	b409e <_ZdlPvj>
   b58c4:	4620      	mov	r0, r4
   b58c6:	bd10      	pop	{r4, pc}

000b58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b58c8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b58ca:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b58cc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b58ce:	b17c      	cbz	r4, b58f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b58d0:	6863      	ldr	r3, [r4, #4]
   b58d2:	3b01      	subs	r3, #1
   b58d4:	6063      	str	r3, [r4, #4]
   b58d6:	b95b      	cbnz	r3, b58f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b58d8:	6823      	ldr	r3, [r4, #0]
   b58da:	4620      	mov	r0, r4
   b58dc:	689b      	ldr	r3, [r3, #8]
   b58de:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b58e0:	68a3      	ldr	r3, [r4, #8]
   b58e2:	3b01      	subs	r3, #1
   b58e4:	60a3      	str	r3, [r4, #8]
   b58e6:	b91b      	cbnz	r3, b58f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b58e8:	6823      	ldr	r3, [r4, #0]
   b58ea:	4620      	mov	r0, r4
   b58ec:	68db      	ldr	r3, [r3, #12]
   b58ee:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b58f0:	4628      	mov	r0, r5
   b58f2:	bd38      	pop	{r3, r4, r5, pc}

000b58f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b58f4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b58f6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b58fa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b58fc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b58fe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5902:	42ae      	cmp	r6, r5
   b5904:	d004      	beq.n	b5910 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5906:	4628      	mov	r0, r5
   b5908:	f005 f840 	bl	ba98c <_ZN6StringD1Ev>
   b590c:	3514      	adds	r5, #20
   b590e:	e7f8      	b.n	b5902 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b5910:	6820      	ldr	r0, [r4, #0]
   b5912:	f002 ffb1 	bl	b8878 <free>
    AllocatorT::free(data_);
}
   b5916:	4620      	mov	r0, r4
   b5918:	bd70      	pop	{r4, r5, r6, pc}

000b591a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b591a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b591e:	4604      	mov	r4, r0
   b5920:	460d      	mov	r5, r1
   b5922:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5924:	d916      	bls.n	b5954 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5926:	4290      	cmp	r0, r2
   b5928:	d215      	bcs.n	b5956 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b592a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b592e:	1a75      	subs	r5, r6, r1
   b5930:	f1a1 0714 	sub.w	r7, r1, #20
   b5934:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5936:	42b7      	cmp	r7, r6
   b5938:	d01c      	beq.n	b5974 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b593a:	b12c      	cbz	r4, b5948 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b593c:	4631      	mov	r1, r6
   b593e:	4620      	mov	r0, r4
   b5940:	f005 f8a0 	bl	baa84 <_ZN6StringC1EOS_>
   b5944:	7c33      	ldrb	r3, [r6, #16]
   b5946:	7423      	strb	r3, [r4, #16]
   b5948:	4630      	mov	r0, r6
   b594a:	f005 f81f 	bl	ba98c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b594e:	3e14      	subs	r6, #20
   b5950:	3c14      	subs	r4, #20
   b5952:	e7f0      	b.n	b5936 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5954:	d00e      	beq.n	b5974 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5956:	42b5      	cmp	r5, r6
   b5958:	d00c      	beq.n	b5974 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b595a:	b12c      	cbz	r4, b5968 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b595c:	4629      	mov	r1, r5
   b595e:	4620      	mov	r0, r4
   b5960:	f005 f890 	bl	baa84 <_ZN6StringC1EOS_>
   b5964:	7c2b      	ldrb	r3, [r5, #16]
   b5966:	7423      	strb	r3, [r4, #16]
   b5968:	4628      	mov	r0, r5
   b596a:	f005 f80f 	bl	ba98c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b596e:	3514      	adds	r5, #20
   b5970:	3414      	adds	r4, #20
   b5972:	e7f0      	b.n	b5956 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5976 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b597a:	2300      	movs	r3, #0
   b597c:	e9c0 3300 	strd	r3, r3, [r0]
   b5980:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5982:	684f      	ldr	r7, [r1, #4]
   b5984:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5986:	4604      	mov	r4, r0
   b5988:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b598a:	dd23      	ble.n	b59d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b598c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b5990:	fb08 f007 	mul.w	r0, r8, r7
   b5994:	f002 ff68 	bl	b8868 <malloc>
            if (!d) {
   b5998:	4605      	mov	r5, r0
   b599a:	b1d8      	cbz	r0, b59d4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b599c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b59a0:	fb08 1202 	mla	r2, r8, r2, r1
   b59a4:	f7ff ffb9 	bl	b591a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b59a8:	6820      	ldr	r0, [r4, #0]
   b59aa:	f002 ff65 	bl	b8878 <free>
        data_ = d;
   b59ae:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b59b0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b59b2:	e9d6 7300 	ldrd	r7, r3, [r6]
   b59b6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b59ba:	45b8      	cmp	r8, r7
   b59bc:	d008      	beq.n	b59d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b59be:	4639      	mov	r1, r7
   b59c0:	4628      	mov	r0, r5
   b59c2:	f005 f879 	bl	baab8 <_ZN6StringC1ERKS_>
   b59c6:	7c3b      	ldrb	r3, [r7, #16]
   b59c8:	742b      	strb	r3, [r5, #16]
   b59ca:	3714      	adds	r7, #20
   b59cc:	3514      	adds	r5, #20
   b59ce:	e7f4      	b.n	b59ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b59d0:	6873      	ldr	r3, [r6, #4]
   b59d2:	6063      	str	r3, [r4, #4]
}
   b59d4:	4620      	mov	r0, r4
   b59d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b59dc <_GLOBAL__sub_I_SystemMode>:
   b59dc:	b570      	push	{r4, r5, r6, lr}
   b59de:	4b27      	ldr	r3, [pc, #156]	; (b5a7c <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b59e0:	4a27      	ldr	r2, [pc, #156]	; (b5a80 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b59e2:	2501      	movs	r5, #1
   b59e4:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b59e6:	4b27      	ldr	r3, [pc, #156]	; (b5a84 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b59e8:	2400      	movs	r4, #0
   b59ea:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b59ec:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b59ee:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b59f2:	2002      	movs	r0, #2
   b59f4:	f002 fe4e 	bl	b8694 <set_system_mode>
   b59f8:	4621      	mov	r1, r4
   b59fa:	4628      	mov	r0, r5
   b59fc:	f002 fe62 	bl	b86c4 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b5a00:	4629      	mov	r1, r5
   b5a02:	2004      	movs	r0, #4
   b5a04:	f002 fc24 	bl	b8250 <HAL_Feature_Set>
        capacity_(0) {
   b5a08:	e9cd 4400 	strd	r4, r4, [sp]
   b5a0c:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b5a0e:	f005 fb99 	bl	bb144 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b5a12:	4c1d      	ldr	r4, [pc, #116]	; (b5a88 <_GLOBAL__sub_I_SystemMode+0xac>)
   b5a14:	4605      	mov	r5, r0
   b5a16:	4669      	mov	r1, sp
   b5a18:	a803      	add	r0, sp, #12
   b5a1a:	f7ff ffac 	bl	b5976 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5a1e:	4626      	mov	r6, r4
        stream_(&stream) {
   b5a20:	a903      	add	r1, sp, #12
   b5a22:	a806      	add	r0, sp, #24
   b5a24:	f7ff ffa7 	bl	b5976 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5a28:	4b18      	ldr	r3, [pc, #96]	; (b5a8c <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5a2a:	f846 3b04 	str.w	r3, [r6], #4
   b5a2e:	a906      	add	r1, sp, #24
   b5a30:	a809      	add	r0, sp, #36	; 0x24
   b5a32:	f7ff ffa0 	bl	b5976 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5a36:	aa09      	add	r2, sp, #36	; 0x24
   b5a38:	211e      	movs	r1, #30
   b5a3a:	4630      	mov	r0, r6
   b5a3c:	f004 f902 	bl	b9c44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5a40:	a809      	add	r0, sp, #36	; 0x24
   b5a42:	f7ff ff57 	bl	b58f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5a46:	a806      	add	r0, sp, #24
   b5a48:	f7ff ff54 	bl	b58f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a4c:	4b10      	ldr	r3, [pc, #64]	; (b5a90 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b5a4e:	6023      	str	r3, [r4, #0]
   b5a50:	6225      	str	r5, [r4, #32]
   b5a52:	a803      	add	r0, sp, #12
   b5a54:	f7ff ff4e 	bl	b58f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a58:	4b0e      	ldr	r3, [pc, #56]	; (b5a94 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b5a5a:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b5a5c:	f005 fb72 	bl	bb144 <_Z16_fetch_usbserialv>
   b5a60:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5a64:	f005 fb5c 	bl	bb120 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5a68:	f003 fdce 	bl	b9608 <_ZN5spark10LogManager8instanceEv>
   b5a6c:	4621      	mov	r1, r4
   b5a6e:	f003 ffbf 	bl	b99f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   b5a72:	4668      	mov	r0, sp
   b5a74:	f7ff ff3e 	bl	b58f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5a78:	b00c      	add	sp, #48	; 0x30
   b5a7a:	bd70      	pop	{r4, r5, r6, pc}
   b5a7c:	2003e3a4 	.word	0x2003e3a4
   b5a80:	ffff0000 	.word	0xffff0000
   b5a84:	2003e398 	.word	0x2003e398
   b5a88:	2003e3a8 	.word	0x2003e3a8
   b5a8c:	000bca4c 	.word	0x000bca4c
   b5a90:	000bd2b0 	.word	0x000bd2b0
   b5a94:	000bca64 	.word	0x000bca64

000b5a98 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b5a98:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5a9a:	6803      	ldr	r3, [r0, #0]
   b5a9c:	2b2f      	cmp	r3, #47	; 0x2f
{
   b5a9e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b5aa0:	d904      	bls.n	b5aac <nrf_gpio_pin_port_decode+0x14>
   b5aa2:	4a07      	ldr	r2, [pc, #28]	; (b5ac0 <nrf_gpio_pin_port_decode+0x28>)
   b5aa4:	4907      	ldr	r1, [pc, #28]	; (b5ac4 <nrf_gpio_pin_port_decode+0x2c>)
   b5aa6:	200a      	movs	r0, #10
   b5aa8:	f002 fdba 	bl	b8620 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b5aac:	6823      	ldr	r3, [r4, #0]
   b5aae:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5ab0:	bf83      	ittte	hi
   b5ab2:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b5ab6:	4804      	ldrhi	r0, [pc, #16]	; (b5ac8 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5ab8:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b5aba:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b5abe:	bd10      	pop	{r4, pc}
   b5ac0:	000b8271 	.word	0x000b8271
   b5ac4:	000bcaed 	.word	0x000bcaed
   b5ac8:	50000300 	.word	0x50000300

000b5acc <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b5acc:	ee07 0a90 	vmov	s15, r0
   b5ad0:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5af8 <_Z17tmp36TemperatureCi+0x2c>
   b5ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5adc:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5afc <_Z17tmp36TemperatureCi+0x30>
   b5ae0:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5ae4:	eddf 7a06 	vldr	s15, [pc, #24]	; b5b00 <_Z17tmp36TemperatureCi+0x34>
   b5ae8:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b5aec:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5af0:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5af4:	4770      	bx	lr
   b5af6:	bf00      	nop
   b5af8:	454e4000 	.word	0x454e4000
   b5afc:	457ff000 	.word	0x457ff000
   b5b00:	43fa0000 	.word	0x43fa0000

000b5b04 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b5b04:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b5b06:	2101      	movs	r1, #1
   b5b08:	a801      	add	r0, sp, #4
   b5b0a:	f004 fc4e 	bl	ba3aa <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5b0e:	f7ff fc23 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5b12:	f7ff fd10 	bl	b5536 <_ZNK17currentStatusData17get_internalTempCEv>
   b5b16:	f7ff fc1f 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5b1a:	f7ff fd0c 	bl	b5536 <_ZNK17currentStatusData17get_internalTempCEv>
   b5b1e:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5b20:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5b22:	d90d      	bls.n	b5b40 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5b24:	f004 fcd4 	bl	ba4d0 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b5b28:	f7ff fc16 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5b2c:	2101      	movs	r1, #1
   b5b2e:	f7ff fd41 	bl	b55b4 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b5b32:	2400      	movs	r4, #0
  PMIC pmic(true);
   b5b34:	a801      	add	r0, sp, #4
   b5b36:	f004 fc47 	bl	ba3c8 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b5b3a:	4620      	mov	r0, r4
   b5b3c:	b002      	add	sp, #8
   b5b3e:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b5b40:	f004 fcab 	bl	ba49a <_ZN4PMIC14enableChargingEv>
    return true;
   b5b44:	2401      	movs	r4, #1
   b5b46:	e7f5      	b.n	b5b34 <_Z16isItSafeToChargev+0x30>

000b5b48 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b5b48:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5b4a:	4d19      	ldr	r5, [pc, #100]	; (b5bb0 <_Z17getSignalStrengthv+0x68>)
   b5b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b5b4e:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5b50:	ac0c      	add	r4, sp, #48	; 0x30
   b5b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b58:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5b5c:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b5b60:	4914      	ldr	r1, [pc, #80]	; (b5bb4 <_Z17getSignalStrengthv+0x6c>)
   b5b62:	a804      	add	r0, sp, #16
   b5b64:	f002 ff56 	bl	b8a14 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b5b68:	a804      	add	r0, sp, #16
   b5b6a:	f002 ff96 	bl	b8a9a <_ZNK14CellularSignal19getAccessTechnologyEv>
   b5b6e:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b5b70:	a804      	add	r0, sp, #16
   b5b72:	f002 ffcb 	bl	b8b0c <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b5b76:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b5b78:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b5b7c:	f002 fff6 	bl	b8b6c <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5b80:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b5b82:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5b86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b5b8a:	f005 fe69 	bl	bb860 <__aeabi_f2d>
   b5b8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5b92:	4628      	mov	r0, r5
   b5b94:	f005 fe64 	bl	bb860 <__aeabi_f2d>
   b5b98:	e9cd 0100 	strd	r0, r1, [sp]
   b5b9c:	4a06      	ldr	r2, [pc, #24]	; (b5bb8 <_Z17getSignalStrengthv+0x70>)
   b5b9e:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b5ba2:	4806      	ldr	r0, [pc, #24]	; (b5bbc <_Z17getSignalStrengthv+0x74>)
   b5ba4:	2140      	movs	r1, #64	; 0x40
   b5ba6:	f002 fe7f 	bl	b88a8 <snprintf>
}
   b5baa:	b017      	add	sp, #92	; 0x5c
   b5bac:	bd30      	pop	{r4, r5, pc}
   b5bae:	bf00      	nop
   b5bb0:	000bcb74 	.word	0x000bcb74
   b5bb4:	2003e614 	.word	0x2003e614
   b5bb8:	000bcb11 	.word	0x000bcb11
   b5bbc:	2003de84 	.word	0x2003de84

000b5bc0 <_Z11recordCountv>:


bool recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b5bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5bc2:	4e4f      	ldr	r6, [pc, #316]	; (b5d00 <_Z11recordCountv+0x140>)
   b5bc4:	4c4f      	ldr	r4, [pc, #316]	; (b5d04 <_Z11recordCountv+0x144>)
   b5bc6:	7833      	ldrb	r3, [r6, #0]
   b5bc8:	f3bf 8f5b 	dmb	ish
   b5bcc:	f013 0f01 	tst.w	r3, #1
   b5bd0:	b085      	sub	sp, #20
   b5bd2:	d109      	bne.n	b5be8 <_Z11recordCountv+0x28>
   b5bd4:	4630      	mov	r0, r6
   b5bd6:	f7fe fa71 	bl	b40bc <__cxa_guard_acquire>
   b5bda:	b128      	cbz	r0, b5be8 <_Z11recordCountv+0x28>
   b5bdc:	f002 fb78 	bl	b82d0 <HAL_Pin_Map>
   b5be0:	6020      	str	r0, [r4, #0]
   b5be2:	4630      	mov	r0, r6
   b5be4:	f7fe fa6f 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5be8:	4b47      	ldr	r3, [pc, #284]	; (b5d08 <_Z11recordCountv+0x148>)
   b5bea:	881d      	ldrh	r5, [r3, #0]
   b5bec:	6823      	ldr	r3, [r4, #0]
   b5bee:	012d      	lsls	r5, r5, #4
   b5bf0:	5d5b      	ldrb	r3, [r3, r5]
   b5bf2:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5bf4:	7833      	ldrb	r3, [r6, #0]
   b5bf6:	f3bf 8f5b 	dmb	ish
   b5bfa:	07d9      	lsls	r1, r3, #31
   b5bfc:	d409      	bmi.n	b5c12 <_Z11recordCountv+0x52>
   b5bfe:	4840      	ldr	r0, [pc, #256]	; (b5d00 <_Z11recordCountv+0x140>)
   b5c00:	f7fe fa5c 	bl	b40bc <__cxa_guard_acquire>
   b5c04:	b128      	cbz	r0, b5c12 <_Z11recordCountv+0x52>
   b5c06:	f002 fb63 	bl	b82d0 <HAL_Pin_Map>
   b5c0a:	6020      	str	r0, [r4, #0]
   b5c0c:	483c      	ldr	r0, [pc, #240]	; (b5d00 <_Z11recordCountv+0x140>)
   b5c0e:	f7fe fa5a 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5c12:	6823      	ldr	r3, [r4, #0]
   b5c14:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5c16:	a803      	add	r0, sp, #12
   b5c18:	785b      	ldrb	r3, [r3, #1]
   b5c1a:	f003 031f 	and.w	r3, r3, #31
   b5c1e:	433b      	orrs	r3, r7
   b5c20:	9303      	str	r3, [sp, #12]
   b5c22:	f7ff ff39 	bl	b5a98 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b5c26:	9a03      	ldr	r2, [sp, #12]
   b5c28:	2301      	movs	r3, #1
   b5c2a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b5c2c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b5c30:	f7ff fb92 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5c34:	4607      	mov	r7, r0
   b5c36:	f005 f99e 	bl	baf76 <_ZN9TimeClass3nowEv>
   b5c3a:	4602      	mov	r2, r0
   b5c3c:	17c3      	asrs	r3, r0, #31
   b5c3e:	4638      	mov	r0, r7
   b5c40:	f7ff fd4e 	bl	b56e0 <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b5c44:	f7ff fb88 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5c48:	4607      	mov	r7, r0
   b5c4a:	f7ff fb85 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5c4e:	f7ff fc10 	bl	b5472 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5c52:	3001      	adds	r0, #1
   b5c54:	b281      	uxth	r1, r0
   b5c56:	4638      	mov	r0, r7
   b5c58:	f7ff fc45 	bl	b54e6 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b5c5c:	f7ff fb7c 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5c60:	4607      	mov	r7, r0
   b5c62:	f7ff fb79 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5c66:	f7ff fc09 	bl	b547c <_ZNK17currentStatusData14get_dailyCountEv>
   b5c6a:	3001      	adds	r0, #1
   b5c6c:	b281      	uxth	r1, r0
   b5c6e:	4638      	mov	r0, r7
   b5c70:	f7ff fc3f 	bl	b54f2 <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b5c74:	f7ff fb70 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5c78:	f7ff fbfb 	bl	b5472 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5c7c:	9001      	str	r0, [sp, #4]
   b5c7e:	f7ff fb6b 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5c82:	f7ff fbfb 	bl	b547c <_ZNK17currentStatusData14get_dailyCountEv>
   b5c86:	9a01      	ldr	r2, [sp, #4]
   b5c88:	4920      	ldr	r1, [pc, #128]	; (b5d0c <_Z11recordCountv+0x14c>)
   b5c8a:	4603      	mov	r3, r0
   b5c8c:	4820      	ldr	r0, [pc, #128]	; (b5d10 <_Z11recordCountv+0x150>)
   b5c8e:	f7fe fabf 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b5c92:	20c8      	movs	r0, #200	; 0xc8
   b5c94:	f002 fe58 	bl	b8948 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5c98:	7833      	ldrb	r3, [r6, #0]
   b5c9a:	f3bf 8f5b 	dmb	ish
   b5c9e:	07da      	lsls	r2, r3, #31
   b5ca0:	d409      	bmi.n	b5cb6 <_Z11recordCountv+0xf6>
   b5ca2:	4817      	ldr	r0, [pc, #92]	; (b5d00 <_Z11recordCountv+0x140>)
   b5ca4:	f7fe fa0a 	bl	b40bc <__cxa_guard_acquire>
   b5ca8:	b128      	cbz	r0, b5cb6 <_Z11recordCountv+0xf6>
   b5caa:	f002 fb11 	bl	b82d0 <HAL_Pin_Map>
   b5cae:	6020      	str	r0, [r4, #0]
   b5cb0:	4813      	ldr	r0, [pc, #76]	; (b5d00 <_Z11recordCountv+0x140>)
   b5cb2:	f7fe fa08 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5cb6:	6823      	ldr	r3, [r4, #0]
   b5cb8:	5d5b      	ldrb	r3, [r3, r5]
   b5cba:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5cbc:	7833      	ldrb	r3, [r6, #0]
   b5cbe:	f3bf 8f5b 	dmb	ish
   b5cc2:	07db      	lsls	r3, r3, #31
   b5cc4:	d409      	bmi.n	b5cda <_Z11recordCountv+0x11a>
   b5cc6:	480e      	ldr	r0, [pc, #56]	; (b5d00 <_Z11recordCountv+0x140>)
   b5cc8:	f7fe f9f8 	bl	b40bc <__cxa_guard_acquire>
   b5ccc:	b128      	cbz	r0, b5cda <_Z11recordCountv+0x11a>
   b5cce:	f002 faff 	bl	b82d0 <HAL_Pin_Map>
   b5cd2:	6020      	str	r0, [r4, #0]
   b5cd4:	480a      	ldr	r0, [pc, #40]	; (b5d00 <_Z11recordCountv+0x140>)
   b5cd6:	f7fe f9f6 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5cda:	6823      	ldr	r3, [r4, #0]
   b5cdc:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5cde:	a803      	add	r0, sp, #12
   b5ce0:	786b      	ldrb	r3, [r5, #1]
   b5ce2:	f003 031f 	and.w	r3, r3, #31
   b5ce6:	433b      	orrs	r3, r7
   b5ce8:	9303      	str	r3, [sp, #12]
   b5cea:	f7ff fed5 	bl	b5a98 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b5cee:	9b03      	ldr	r3, [sp, #12]
   b5cf0:	2201      	movs	r2, #1
   b5cf2:	fa02 f303 	lsl.w	r3, r2, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b5cf6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);

  return true;
   b5cfa:	4610      	mov	r0, r2
   b5cfc:	b005      	add	sp, #20
   b5cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5d00:	2003e3cc 	.word	0x2003e3cc
   b5d04:	2003e3d0 	.word	0x2003e3d0
   b5d08:	000bca1c 	.word	0x000bca1c
   b5d0c:	000bcb2a 	.word	0x000bcb2a
   b5d10:	2003e658 	.word	0x2003e658

000b5d14 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b5d14:	b530      	push	{r4, r5, lr}
   b5d16:	b085      	sub	sp, #20
   b5d18:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b5d1a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5d1c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b5d1e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b5d20:	f002 fca6 	bl	b8670 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5d24:	b990      	cbnz	r0, b5d4c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b5d26:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b5d28:	b10c      	cbz	r4, b5d2e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b5d2a:	6923      	ldr	r3, [r4, #16]
   b5d2c:	b923      	cbnz	r3, b5d38 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b5d2e:	4a08      	ldr	r2, [pc, #32]	; (b5d50 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b5d30:	4908      	ldr	r1, [pc, #32]	; (b5d54 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b5d32:	200a      	movs	r0, #10
   b5d34:	f002 fc74 	bl	b8620 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5d38:	230c      	movs	r3, #12
   b5d3a:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b5d3e:	2304      	movs	r3, #4
   b5d40:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5d42:	aa01      	add	r2, sp, #4
   b5d44:	6923      	ldr	r3, [r4, #16]
   b5d46:	2101      	movs	r1, #1
   b5d48:	4620      	mov	r0, r4
   b5d4a:	4798      	blx	r3
}
   b5d4c:	b005      	add	sp, #20
   b5d4e:	bd30      	pop	{r4, r5, pc}
   b5d50:	000b8271 	.word	0x000b8271
   b5d54:	000bcb47 	.word	0x000bcb47

000b5d58 <_Z12batteryStatev>:
bool batteryState() {
   b5d58:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b5d5a:	f7ff fafd 	bl	b5358 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b5d5e:	a901      	add	r1, sp, #4
   b5d60:	4604      	mov	r4, r0
   b5d62:	2007      	movs	r0, #7
   b5d64:	f7ff ffd6 	bl	b5d14 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b5d68:	1e01      	subs	r1, r0, #0
        return val;
   b5d6a:	bfa8      	it	ge
   b5d6c:	9901      	ldrge	r1, [sp, #4]
   b5d6e:	4620      	mov	r0, r4
   b5d70:	b2c9      	uxtb	r1, r1
   b5d72:	f7ff fc1f 	bl	b55b4 <_ZN17currentStatusData16set_batteryStateEh>
  if (sysStatus.get_lowPowerMode()) {                                        // Need to take these steps if we are sleeping
   b5d76:	f7ff faab 	bl	b52d0 <_ZN13sysStatusData8instanceEv>
   b5d7a:	f7ff fc39 	bl	b55f0 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5d7e:	b130      	cbz	r0, b5d8e <_Z12batteryStatev+0x36>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b5d80:	4817      	ldr	r0, [pc, #92]	; (b5de0 <_Z12batteryStatev+0x88>)
   b5d82:	f002 ffbd 	bl	b8d00 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b5d86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5d8a:	f002 fddd 	bl	b8948 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b5d8e:	f7ff fae3 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5d92:	a901      	add	r1, sp, #4
   b5d94:	4604      	mov	r4, r0
   b5d96:	2003      	movs	r0, #3
   b5d98:	f7ff ffbc 	bl	b5d14 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b5d9c:	b9e8      	cbnz	r0, b5dda <_Z12batteryStatev+0x82>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b5d9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b5da2:	ee07 3a90 	vmov	s15, r3
   b5da6:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b5daa:	ee17 0a90 	vmov	r0, s15
   b5dae:	f005 fd57 	bl	bb860 <__aeabi_f2d>
   b5db2:	ec41 0b10 	vmov	d0, r0, r1
   b5db6:	4620      	mov	r0, r4
   b5db8:	f7ff fb12 	bl	b53e0 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b5dbc:	f7ff facc 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5dc0:	f7ff faee 	bl	b53a0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5dc4:	4b07      	ldr	r3, [pc, #28]	; (b5de4 <_Z12batteryStatev+0x8c>)
   b5dc6:	ec51 0b10 	vmov	r0, r1, d0
   b5dca:	2200      	movs	r2, #0
   b5dcc:	f006 f830 	bl	bbe30 <__aeabi_dcmpgt>
}
   b5dd0:	3800      	subs	r0, #0
   b5dd2:	bf18      	it	ne
   b5dd4:	2001      	movne	r0, #1
   b5dd6:	b002      	add	sp, #8
   b5dd8:	bd10      	pop	{r4, pc}
            return -1.0f;
   b5dda:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5dde:	e7e4      	b.n	b5daa <_Z12batteryStatev+0x52>
   b5de0:	2003e3d4 	.word	0x2003e3d4
   b5de4:	404e0000 	.word	0x404e0000

000b5de8 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b5de8:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b5dea:	f7ff fab5 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5dee:	4b11      	ldr	r3, [pc, #68]	; (b5e34 <_Z16takeMeasurementsv+0x4c>)
   b5df0:	4604      	mov	r4, r0
   b5df2:	8818      	ldrh	r0, [r3, #0]
   b5df4:	f005 fafb 	bl	bb3ee <analogRead>
   b5df8:	f7ff fe68 	bl	b5acc <_Z17tmp36TemperatureCi>
   b5dfc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b5e00:	4620      	mov	r0, r4
   b5e02:	edcd 7a01 	vstr	s15, [sp, #4]
   b5e06:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b5e0a:	f7ff fbcd 	bl	b55a8 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b5e0e:	f7ff faa3 	bl	b5358 <_ZN17currentStatusData8instanceEv>
   b5e12:	f7ff fb90 	bl	b5536 <_ZNK17currentStatusData17get_internalTempCEv>
   b5e16:	4a08      	ldr	r2, [pc, #32]	; (b5e38 <_Z16takeMeasurementsv+0x50>)
   b5e18:	4603      	mov	r3, r0
   b5e1a:	2110      	movs	r1, #16
   b5e1c:	4807      	ldr	r0, [pc, #28]	; (b5e3c <_Z16takeMeasurementsv+0x54>)
   b5e1e:	f002 fd43 	bl	b88a8 <snprintf>
    batteryState();
   b5e22:	f7ff ff99 	bl	b5d58 <_Z12batteryStatev>
    isItSafeToCharge();
   b5e26:	f7ff fe6d 	bl	b5b04 <_Z16isItSafeToChargev>
    getSignalStrength();
   b5e2a:	f7ff fe8d 	bl	b5b48 <_Z17getSignalStrengthv>
}
   b5e2e:	2001      	movs	r0, #1
   b5e30:	b002      	add	sp, #8
   b5e32:	bd10      	pop	{r4, pc}
   b5e34:	000bca26 	.word	0x000bca26
   b5e38:	000bcb6d 	.word	0x000bcb6d
   b5e3c:	2003de74 	.word	0x2003de74

000b5e40 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b5e40:	4801      	ldr	r0, [pc, #4]	; (b5e48 <_GLOBAL__sub_I_batteryContext+0x8>)
   b5e42:	2100      	movs	r1, #0
   b5e44:	f002 bf18 	b.w	b8c78 <_ZN9FuelGaugeC1Eb>
   b5e48:	2003e3d4 	.word	0x2003e3d4

000b5e4c <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b5e4c:	4770      	bx	lr

000b5e4e <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b5e4e:	b510      	push	{r4, lr}
}
   b5e50:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b5e52:	4604      	mov	r4, r0
}
   b5e54:	f7fe f923 	bl	b409e <_ZdlPvj>
   b5e58:	4620      	mov	r0, r4
   b5e5a:	bd10      	pop	{r4, pc}

000b5e5c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b5e5c:	b510      	push	{r4, lr}
   b5e5e:	4604      	mov	r4, r0
   b5e60:	b08a      	sub	sp, #40	; 0x28
   b5e62:	4608      	mov	r0, r1
    attr.flags = 0;
   b5e64:	f04f 0c20 	mov.w	ip, #32
   b5e68:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5e6a:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b5e6e:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5e72:	460b      	mov	r3, r1
   b5e74:	aa02      	add	r2, sp, #8
   b5e76:	6821      	ldr	r1, [r4, #0]
   b5e78:	f002 fbe2 	bl	b8640 <log_message_v>
}
   b5e7c:	b00a      	add	sp, #40	; 0x28
   b5e7e:	bd10      	pop	{r4, pc}

000b5e80 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b5e80:	b40e      	push	{r1, r2, r3}
   b5e82:	b503      	push	{r0, r1, lr}
   b5e84:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b5e86:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b5e88:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5e8c:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b5e8e:	f7ff ffe5 	bl	b5e5c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5e92:	b002      	add	sp, #8
   b5e94:	f85d eb04 	ldr.w	lr, [sp], #4
   b5e98:	b003      	add	sp, #12
   b5e9a:	4770      	bx	lr

000b5e9c <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5e9c:	b40e      	push	{r1, r2, r3}
   b5e9e:	b503      	push	{r0, r1, lr}
   b5ea0:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b5ea2:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5ea4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5ea8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b5eaa:	f7ff ffd7 	bl	b5e5c <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5eae:	b002      	add	sp, #8
   b5eb0:	f85d eb04 	ldr.w	lr, [sp], #4
   b5eb4:	b003      	add	sp, #12
   b5eb6:	4770      	bx	lr

000b5eb8 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5eb8:	b510      	push	{r4, lr}
   b5eba:	7202      	strb	r2, [r0, #8]
   b5ebc:	22ff      	movs	r2, #255	; 0xff
   b5ebe:	8142      	strh	r2, [r0, #10]
   b5ec0:	2200      	movs	r2, #0
   b5ec2:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b5ec6:	6142      	str	r2, [r0, #20]
   b5ec8:	7602      	strb	r2, [r0, #24]
   b5eca:	61c2      	str	r2, [r0, #28]
    instance = this;
   b5ecc:	4a02      	ldr	r2, [pc, #8]	; (b5ed8 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5ece:	4c03      	ldr	r4, [pc, #12]	; (b5edc <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b5ed0:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5ed2:	e9c0 4100 	strd	r4, r1, [r0]
}
   b5ed6:	bd10      	pop	{r4, pc}
   b5ed8:	2003e3e0 	.word	0x2003e3e0
   b5edc:	000bcdec 	.word	0x000bcdec

000b5ee0 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b5ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ee4:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b5ee8:	4604      	mov	r4, r0
   b5eea:	4689      	mov	r9, r1
   b5eec:	4616      	mov	r6, r2
   b5eee:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b5ef0:	f1b8 0f00 	cmp.w	r8, #0
   b5ef4:	d002      	beq.n	b5efc <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b5ef6:	6840      	ldr	r0, [r0, #4]
   b5ef8:	f002 ff9c 	bl	b8e34 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5efc:	7a21      	ldrb	r1, [r4, #8]
   b5efe:	6860      	ldr	r0, [r4, #4]
   b5f00:	f002 ff75 	bl	b8dee <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b5f04:	6860      	ldr	r0, [r4, #4]
   b5f06:	6803      	ldr	r3, [r0, #0]
   b5f08:	4649      	mov	r1, r9
   b5f0a:	689b      	ldr	r3, [r3, #8]
   b5f0c:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b5f0e:	6860      	ldr	r0, [r4, #4]
   b5f10:	2100      	movs	r1, #0
   b5f12:	f002 ff8b 	bl	b8e2c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b5f16:	4605      	mov	r5, r0
   b5f18:	bb00      	cbnz	r0, b5f5c <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5f1a:	2301      	movs	r3, #1
   b5f1c:	7a21      	ldrb	r1, [r4, #8]
   b5f1e:	6860      	ldr	r0, [r4, #4]
   b5f20:	463a      	mov	r2, r7
   b5f22:	f002 ff52 	bl	b8dca <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b5f26:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5f28:	4603      	mov	r3, r0
        if (count == num) {
   b5f2a:	d109      	bne.n	b5f40 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b5f2c:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b5f2e:	42be      	cmp	r6, r7
   b5f30:	d01c      	beq.n	b5f6c <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b5f32:	6860      	ldr	r0, [r4, #4]
   b5f34:	6803      	ldr	r3, [r0, #0]
   b5f36:	695b      	ldr	r3, [r3, #20]
   b5f38:	4798      	blx	r3
   b5f3a:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b5f3e:	e7f6      	b.n	b5f2e <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b5f40:	490b      	ldr	r1, [pc, #44]	; (b5f70 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b5f42:	480c      	ldr	r0, [pc, #48]	; (b5f74 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5f44:	464a      	mov	r2, r9
   b5f46:	f7ff ff9b 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b5f4a:	f1b8 0f00 	cmp.w	r8, #0
   b5f4e:	d002      	beq.n	b5f56 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b5f50:	6860      	ldr	r0, [r4, #4]
   b5f52:	f002 ff78 	bl	b8e46 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b5f56:	4628      	mov	r0, r5
   b5f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b5f5c:	4603      	mov	r3, r0
   b5f5e:	4906      	ldr	r1, [pc, #24]	; (b5f78 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b5f60:	4804      	ldr	r0, [pc, #16]	; (b5f74 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5f62:	464a      	mov	r2, r9
   b5f64:	f7ff ff8c 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b5f68:	2500      	movs	r5, #0
   b5f6a:	e7ee      	b.n	b5f4a <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b5f6c:	2501      	movs	r5, #1
   b5f6e:	e7ec      	b.n	b5f4a <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b5f70:	000bcb9c 	.word	0x000bcb9c
   b5f74:	2003e3dc 	.word	0x2003e3dc
   b5f78:	000bcbc1 	.word	0x000bcbc1

000b5f7c <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b5f7c:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b5f7e:	9300      	str	r3, [sp, #0]
   b5f80:	2301      	movs	r3, #1
   b5f82:	f7ff ffad 	bl	b5ee0 <_ZN6AB180513readRegistersEhPhjb>
}
   b5f86:	b003      	add	sp, #12
   b5f88:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f8c <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b5f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b5f8e:	8943      	ldrh	r3, [r0, #10]
   b5f90:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b5f92:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b5f94:	d010      	beq.n	b5fb8 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5f96:	4e19      	ldr	r6, [pc, #100]	; (b5ffc <_ZN6AB180510detectChipEv+0x70>)
   b5f98:	4d19      	ldr	r5, [pc, #100]	; (b6000 <_ZN6AB180510detectChipEv+0x74>)
   b5f9a:	f002 f971 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b5f9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b5fa2:	d209      	bcs.n	b5fb8 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b5fa4:	8960      	ldrh	r0, [r4, #10]
   b5fa6:	f005 fa0f 	bl	bb3c8 <digitalRead>
   b5faa:	2801      	cmp	r0, #1
   b5fac:	d004      	beq.n	b5fb8 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5fae:	4631      	mov	r1, r6
   b5fb0:	4628      	mov	r0, r5
   b5fb2:	f7fe f92d 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b5fb6:	e7f0      	b.n	b5f9a <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b5fb8:	2301      	movs	r3, #1
   b5fba:	f10d 0207 	add.w	r2, sp, #7
   b5fbe:	2128      	movs	r1, #40	; 0x28
   b5fc0:	4620      	mov	r0, r4
   b5fc2:	f7ff ffdb 	bl	b5f7c <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b5fc6:	b930      	cbnz	r0, b5fd6 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b5fc8:	480d      	ldr	r0, [pc, #52]	; (b6000 <_ZN6AB180510detectChipEv+0x74>)
   b5fca:	490e      	ldr	r1, [pc, #56]	; (b6004 <_ZN6AB180510detectChipEv+0x78>)
   b5fcc:	f7fe f920 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b5fd0:	2000      	movs	r0, #0
}
   b5fd2:	b002      	add	sp, #8
   b5fd4:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b5fd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5fda:	2b18      	cmp	r3, #24
   b5fdc:	d1f4      	bne.n	b5fc8 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b5fde:	2301      	movs	r3, #1
   b5fe0:	f10d 0207 	add.w	r2, sp, #7
   b5fe4:	2129      	movs	r1, #41	; 0x29
   b5fe6:	4620      	mov	r0, r4
   b5fe8:	f7ff ffc8 	bl	b5f7c <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b5fec:	2800      	cmp	r0, #0
   b5fee:	d0eb      	beq.n	b5fc8 <_ZN6AB180510detectChipEv+0x3c>
   b5ff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5ff4:	2b05      	cmp	r3, #5
   b5ff6:	d1e7      	bne.n	b5fc8 <_ZN6AB180510detectChipEv+0x3c>
   b5ff8:	e7eb      	b.n	b5fd2 <_ZN6AB180510detectChipEv+0x46>
   b5ffa:	bf00      	nop
   b5ffc:	000bcbe5 	.word	0x000bcbe5
   b6000:	2003e3dc 	.word	0x2003e3dc
   b6004:	000bcbfa 	.word	0x000bcbfa

000b6008 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b6008:	b507      	push	{r0, r1, r2, lr}
   b600a:	4613      	mov	r3, r2
    uint8_t value = 0;
   b600c:	2200      	movs	r2, #0
   b600e:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6012:	f10d 0207 	add.w	r2, sp, #7
   b6016:	f7ff ffb1 	bl	b5f7c <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b601a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b601e:	b003      	add	sp, #12
   b6020:	f85d fb04 	ldr.w	pc, [sp], #4

000b6024 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6028:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b602c:	4604      	mov	r4, r0
   b602e:	460f      	mov	r7, r1
   b6030:	4615      	mov	r5, r2
   b6032:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6034:	f1b8 0f00 	cmp.w	r8, #0
   b6038:	d002      	beq.n	b6040 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b603a:	6840      	ldr	r0, [r0, #4]
   b603c:	f002 fefa 	bl	b8e34 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6040:	7a21      	ldrb	r1, [r4, #8]
   b6042:	6860      	ldr	r0, [r4, #4]
   b6044:	f002 fed3 	bl	b8dee <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b6048:	6860      	ldr	r0, [r4, #4]
   b604a:	6803      	ldr	r3, [r0, #0]
   b604c:	4639      	mov	r1, r7
   b604e:	689b      	ldr	r3, [r3, #8]
   b6050:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6052:	442e      	add	r6, r5
   b6054:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b6056:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b6058:	d005      	beq.n	b6066 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b605a:	6803      	ldr	r3, [r0, #0]
   b605c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6060:	689b      	ldr	r3, [r3, #8]
   b6062:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6064:	e7f6      	b.n	b6054 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b6066:	2101      	movs	r1, #1
   b6068:	f002 fee0 	bl	b8e2c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b606c:	4603      	mov	r3, r0
   b606e:	b170      	cbz	r0, b608e <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6070:	4908      	ldr	r1, [pc, #32]	; (b6094 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6072:	4809      	ldr	r0, [pc, #36]	; (b6098 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6074:	463a      	mov	r2, r7
   b6076:	f7ff ff03 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b607a:	2500      	movs	r5, #0
    }

    if (lock) {
   b607c:	f1b8 0f00 	cmp.w	r8, #0
   b6080:	d002      	beq.n	b6088 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6082:	6860      	ldr	r0, [r4, #4]
   b6084:	f002 fedf 	bl	b8e46 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b6088:	4628      	mov	r0, r5
   b608a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b608e:	2501      	movs	r5, #1
   b6090:	e7f4      	b.n	b607c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6092:	bf00      	nop
   b6094:	000bcc07 	.word	0x000bcc07
   b6098:	2003e3dc 	.word	0x2003e3dc

000b609c <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b609c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b609e:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b60a2:	9300      	str	r3, [sp, #0]
   b60a4:	f10d 020f 	add.w	r2, sp, #15
   b60a8:	2301      	movs	r3, #1
   b60aa:	f7ff ffbb 	bl	b6024 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b60ae:	b005      	add	sp, #20
   b60b0:	f85d fb04 	ldr.w	pc, [sp], #4

000b60b4 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b60b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b60b6:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b60b8:	460c      	mov	r4, r1
   b60ba:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b60bc:	491a      	ldr	r1, [pc, #104]	; (b6128 <_ZN6AB18056setWDTEi+0x74>)
   b60be:	481b      	ldr	r0, [pc, #108]	; (b612c <_ZN6AB18056setWDTEi+0x78>)
   b60c0:	f7fe f8a6 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b60c4:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b60c6:	bfb8      	it	lt
   b60c8:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b60ca:	b97c      	cbnz	r4, b60ec <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b60cc:	2301      	movs	r3, #1
   b60ce:	4622      	mov	r2, r4
   b60d0:	211b      	movs	r1, #27
   b60d2:	4628      	mov	r0, r5
   b60d4:	f7ff ffe2 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b60d8:	4915      	ldr	r1, [pc, #84]	; (b6130 <_ZN6AB18056setWDTEi+0x7c>)
   b60da:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b60dc:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b60de:	4813      	ldr	r0, [pc, #76]	; (b612c <_ZN6AB18056setWDTEi+0x78>)
   b60e0:	f7ff fedc 	bl	b5e9c <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b60e4:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b60e6:	616c      	str	r4, [r5, #20]
}
   b60e8:	4630      	mov	r0, r6
   b60ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b60ec:	2c03      	cmp	r4, #3
   b60ee:	dd19      	ble.n	b6124 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b60f0:	10a7      	asrs	r7, r4, #2
   b60f2:	2f1f      	cmp	r7, #31
   b60f4:	bfa8      	it	ge
   b60f6:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b60f8:	00ba      	lsls	r2, r7, #2
   b60fa:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b60fe:	2301      	movs	r3, #1
   b6100:	b2d2      	uxtb	r2, r2
   b6102:	211b      	movs	r1, #27
   b6104:	4628      	mov	r0, r5
   b6106:	f7ff ffc9 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b610a:	463a      	mov	r2, r7
   b610c:	4603      	mov	r3, r0
   b610e:	4909      	ldr	r1, [pc, #36]	; (b6134 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6110:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6112:	4806      	ldr	r0, [pc, #24]	; (b612c <_ZN6AB18056setWDTEi+0x78>)
   b6114:	f7ff fec2 	bl	b5e9c <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6118:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b611c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b611e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6120:	616f      	str	r7, [r5, #20]
   b6122:	e7e1      	b.n	b60e8 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6124:	2701      	movs	r7, #1
   b6126:	e7e7      	b.n	b60f8 <_ZN6AB18056setWDTEi+0x44>
   b6128:	000bcc2c 	.word	0x000bcc2c
   b612c:	2003e3dc 	.word	0x2003e3dc
   b6130:	000bcc36 	.word	0x000bcc36
   b6134:	000bcc52 	.word	0x000bcc52

000b6138 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b6138:	4b06      	ldr	r3, [pc, #24]	; (b6154 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b613a:	681a      	ldr	r2, [r3, #0]
   b613c:	b14a      	cbz	r2, b6152 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b613e:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6142:	430b      	orrs	r3, r1
   b6144:	d105      	bne.n	b6152 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b6146:	68d3      	ldr	r3, [r2, #12]
   b6148:	b11b      	cbz	r3, b6152 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b614a:	2100      	movs	r1, #0
   b614c:	4610      	mov	r0, r2
   b614e:	f7ff bfb1 	b.w	b60b4 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6152:	4770      	bx	lr
   b6154:	2003e3e0 	.word	0x2003e3e0

000b6158 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b6158:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b615c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6160:	4605      	mov	r5, r0
   b6162:	4616      	mov	r6, r2
   b6164:	461f      	mov	r7, r3
    if (lock) {
   b6166:	f1b8 0f00 	cmp.w	r8, #0
   b616a:	d004      	beq.n	b6176 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b616c:	6840      	ldr	r0, [r0, #4]
   b616e:	9101      	str	r1, [sp, #4]
   b6170:	f002 fe60 	bl	b8e34 <_ZN7TwoWire4lockEv>
   b6174:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b6176:	9101      	str	r1, [sp, #4]
   b6178:	2300      	movs	r3, #0
   b617a:	f10d 020f 	add.w	r2, sp, #15
   b617e:	4628      	mov	r0, r5
   b6180:	f7ff fefc 	bl	b5f7c <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6184:	4604      	mov	r4, r0
   b6186:	b160      	cbz	r0, b61a2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b6188:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b618c:	ea03 0206 	and.w	r2, r3, r6
   b6190:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6192:	4293      	cmp	r3, r2
   b6194:	d005      	beq.n	b61a2 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b6196:	9901      	ldr	r1, [sp, #4]
   b6198:	2300      	movs	r3, #0
   b619a:	4628      	mov	r0, r5
   b619c:	f7ff ff7e 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
   b61a0:	4604      	mov	r4, r0
    if (lock) {
   b61a2:	f1b8 0f00 	cmp.w	r8, #0
   b61a6:	d002      	beq.n	b61ae <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b61a8:	6868      	ldr	r0, [r5, #4]
   b61aa:	f002 fe4c 	bl	b8e46 <_ZN7TwoWire6unlockEv>
}
   b61ae:	4620      	mov	r0, r4
   b61b0:	b004      	add	sp, #16
   b61b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b61b6 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61b6:	b513      	push	{r0, r1, r4, lr}
   b61b8:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b61ba:	f10d 0207 	add.w	r2, sp, #7
   b61be:	f7ff fedd 	bl	b5f7c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b61c2:	b128      	cbz	r0, b61d0 <_ZN6AB180510isBitClearEhhb+0x1a>
   b61c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b61c8:	421c      	tst	r4, r3
   b61ca:	bf0c      	ite	eq
   b61cc:	2001      	moveq	r0, #1
   b61ce:	2000      	movne	r0, #0
}
   b61d0:	b002      	add	sp, #8
   b61d2:	bd10      	pop	{r4, pc}

000b61d4 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61d4:	b513      	push	{r0, r1, r4, lr}
   b61d6:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b61d8:	f10d 0207 	add.w	r2, sp, #7
   b61dc:	f7ff fece 	bl	b5f7c <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b61e0:	b128      	cbz	r0, b61ee <_ZN6AB18058isBitSetEhhb+0x1a>
   b61e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b61e6:	421c      	tst	r4, r3
   b61e8:	bf14      	ite	ne
   b61ea:	2001      	movne	r0, #1
   b61ec:	2000      	moveq	r0, #0
}
   b61ee:	b002      	add	sp, #8
   b61f0:	bd10      	pop	{r4, pc}

000b61f2 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61f2:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b61f4:	43d2      	mvns	r2, r2
   b61f6:	9300      	str	r3, [sp, #0]
   b61f8:	b2d2      	uxtb	r2, r2
   b61fa:	2300      	movs	r3, #0
   b61fc:	f7ff ffac 	bl	b6158 <_ZN6AB180512maskRegisterEhhhb>
}
   b6200:	b003      	add	sp, #12
   b6202:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6208 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b6208:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b620a:	2301      	movs	r3, #1
   b620c:	f10d 0207 	add.w	r2, sp, #7
   b6210:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6212:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6214:	f7ff feb2 	bl	b5f7c <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b6218:	4605      	mov	r5, r0
   b621a:	b938      	cbnz	r0, b622c <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b621c:	491e      	ldr	r1, [pc, #120]	; (b6298 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b621e:	481f      	ldr	r0, [pc, #124]	; (b629c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6220:	22ad      	movs	r2, #173	; 0xad
   b6222:	f7ff fe2d 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
}
   b6226:	4628      	mov	r0, r5
   b6228:	b003      	add	sp, #12
   b622a:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b622c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6230:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6234:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b6238:	d00b      	beq.n	b6252 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b623a:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b623c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b623e:	210f      	movs	r1, #15
   b6240:	4620      	mov	r0, r4
   b6242:	f7ff ffd6 	bl	b61f2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b6246:	4a16      	ldr	r2, [pc, #88]	; (b62a0 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b6248:	4916      	ldr	r1, [pc, #88]	; (b62a4 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b624a:	4814      	ldr	r0, [pc, #80]	; (b629c <_ZN6AB180516updateWakeReasonEv+0x94>)
   b624c:	f7fd ffe0 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b6250:	e7e9      	b.n	b6226 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6252:	2208      	movs	r2, #8
   b6254:	2117      	movs	r1, #23
   b6256:	4620      	mov	r0, r4
   b6258:	f7ff ffbc 	bl	b61d4 <_ZN6AB18058isBitSetEhhb>
   b625c:	b118      	cbz	r0, b6266 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b625e:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6260:	4a11      	ldr	r2, [pc, #68]	; (b62a8 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6262:	61e3      	str	r3, [r4, #28]
   b6264:	e7f0      	b.n	b6248 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b6266:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b626a:	071a      	lsls	r2, r3, #28
   b626c:	d509      	bpl.n	b6282 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b626e:	2303      	movs	r3, #3
   b6270:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6272:	2208      	movs	r2, #8
   b6274:	2301      	movs	r3, #1
   b6276:	210f      	movs	r1, #15
   b6278:	4620      	mov	r0, r4
   b627a:	f7ff ffba 	bl	b61f2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b627e:	4a0b      	ldr	r2, [pc, #44]	; (b62ac <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6280:	e7e2      	b.n	b6248 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6282:	075b      	lsls	r3, r3, #29
   b6284:	d5cf      	bpl.n	b6226 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b6286:	2204      	movs	r2, #4
   b6288:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b628a:	2301      	movs	r3, #1
   b628c:	210f      	movs	r1, #15
   b628e:	4620      	mov	r0, r4
   b6290:	f7ff ffaf 	bl	b61f2 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6294:	4a06      	ldr	r2, [pc, #24]	; (b62b0 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b6296:	e7d7      	b.n	b6248 <_ZN6AB180516updateWakeReasonEv+0x40>
   b6298:	000bcca5 	.word	0x000bcca5
   b629c:	2003e3dc 	.word	0x2003e3dc
   b62a0:	000bcc76 	.word	0x000bcc76
   b62a4:	000bccc4 	.word	0x000bccc4
   b62a8:	000bcc7f 	.word	0x000bcc7f
   b62ac:	000bcc8f 	.word	0x000bcc8f
   b62b0:	000bcc9f 	.word	0x000bcc9f

000b62b4 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b62b4:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b62b6:	9300      	str	r3, [sp, #0]
   b62b8:	4613      	mov	r3, r2
   b62ba:	22ff      	movs	r2, #255	; 0xff
   b62bc:	f7ff ff4c 	bl	b6158 <_ZN6AB180512maskRegisterEhhhb>
}
   b62c0:	b003      	add	sp, #12
   b62c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b62c8 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b62c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62ca:	460f      	mov	r7, r1
   b62cc:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b62ce:	2301      	movs	r3, #1
   b62d0:	2200      	movs	r2, #0
   b62d2:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b62d4:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b62d6:	f7ff fee1 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b62da:	4604      	mov	r4, r0
   b62dc:	b938      	cbnz	r0, b62ee <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b62de:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b62e2:	491f      	ldr	r1, [pc, #124]	; (b6360 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b62e4:	481f      	ldr	r0, [pc, #124]	; (b6364 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b62e6:	f7ff fdcb 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
}
   b62ea:	4620      	mov	r0, r4
   b62ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b62ee:	2301      	movs	r3, #1
   b62f0:	2223      	movs	r2, #35	; 0x23
   b62f2:	2118      	movs	r1, #24
   b62f4:	4628      	mov	r0, r5
   b62f6:	f7ff fed1 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b62fa:	4604      	mov	r4, r0
   b62fc:	b910      	cbnz	r0, b6304 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b62fe:	f240 229b 	movw	r2, #667	; 0x29b
   b6302:	e7ee      	b.n	b62e2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b6304:	2fff      	cmp	r7, #255	; 0xff
   b6306:	bfa8      	it	ge
   b6308:	27ff      	movge	r7, #255	; 0xff
   b630a:	2f01      	cmp	r7, #1
   b630c:	bfb8      	it	lt
   b630e:	2701      	movlt	r7, #1
   b6310:	2301      	movs	r3, #1
   b6312:	b2fa      	uxtb	r2, r7
   b6314:	2119      	movs	r1, #25
   b6316:	4628      	mov	r0, r5
   b6318:	f7ff fec0 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b631c:	4604      	mov	r4, r0
   b631e:	b910      	cbnz	r0, b6326 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6320:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6324:	e7dd      	b.n	b62e2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b6326:	2301      	movs	r3, #1
   b6328:	2208      	movs	r2, #8
   b632a:	2112      	movs	r1, #18
   b632c:	4628      	mov	r0, r5
   b632e:	f7ff ffc1 	bl	b62b4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6332:	4604      	mov	r4, r0
   b6334:	b910      	cbnz	r0, b633c <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b6336:	f240 22af 	movw	r2, #687	; 0x2af
   b633a:	e7d2      	b.n	b62e2 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b633c:	2e00      	cmp	r6, #0
   b633e:	bf14      	ite	ne
   b6340:	2203      	movne	r2, #3
   b6342:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b6344:	2301      	movs	r3, #1
   b6346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b634a:	2118      	movs	r1, #24
   b634c:	4628      	mov	r0, r5
   b634e:	f7ff fea5 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6352:	4604      	mov	r4, r0
   b6354:	2800      	cmp	r0, #0
   b6356:	d1c8      	bne.n	b62ea <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b6358:	f240 22b9 	movw	r2, #697	; 0x2b9
   b635c:	e7c1      	b.n	b62e2 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b635e:	bf00      	nop
   b6360:	000bccd5 	.word	0x000bccd5
   b6364:	2003e3dc 	.word	0x2003e3dc

000b6368 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b6368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b636c:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b636e:	4605      	mov	r5, r0
   b6370:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6372:	484f      	ldr	r0, [pc, #316]	; (b64b0 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6374:	494f      	ldr	r1, [pc, #316]	; (b64b4 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b6376:	f7fd ff4b 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b637a:	2100      	movs	r1, #0
   b637c:	4628      	mov	r0, r5
   b637e:	f7ff fe99 	bl	b60b4 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6382:	4604      	mov	r4, r0
   b6384:	b948      	cbnz	r0, b639a <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b6386:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b638a:	494b      	ldr	r1, [pc, #300]	; (b64b8 <_ZN6AB180513deepPowerDownEi+0x150>)
   b638c:	4848      	ldr	r0, [pc, #288]	; (b64b0 <_ZN6AB180513deepPowerDownEi+0x148>)
   b638e:	f7ff fd77 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
}
   b6392:	4620      	mov	r0, r4
   b6394:	b003      	add	sp, #12
   b6396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b639a:	2301      	movs	r3, #1
   b639c:	461a      	mov	r2, r3
   b639e:	2130      	movs	r1, #48	; 0x30
   b63a0:	4628      	mov	r0, r5
   b63a2:	f7ff ff87 	bl	b62b4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b63a6:	4604      	mov	r4, r0
   b63a8:	b910      	cbnz	r0, b63b0 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b63aa:	f240 2205 	movw	r2, #517	; 0x205
   b63ae:	e7ec      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b63b0:	2210      	movs	r2, #16
   b63b2:	2301      	movs	r3, #1
   b63b4:	4611      	mov	r1, r2
   b63b6:	4628      	mov	r0, r5
   b63b8:	f7ff ff1b 	bl	b61f2 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b63bc:	4604      	mov	r4, r0
   b63be:	b910      	cbnz	r0, b63c6 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b63c0:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b63c4:	e7e1      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b63c6:	2301      	movs	r3, #1
   b63c8:	2226      	movs	r2, #38	; 0x26
   b63ca:	2113      	movs	r1, #19
   b63cc:	4628      	mov	r0, r5
   b63ce:	f7ff fe65 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b63d2:	4604      	mov	r4, r0
   b63d4:	b910      	cbnz	r0, b63dc <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b63d6:	f240 2213 	movw	r2, #531	; 0x213
   b63da:	e7d6      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b63dc:	2601      	movs	r6, #1
   b63de:	9600      	str	r6, [sp, #0]
   b63e0:	4633      	mov	r3, r6
   b63e2:	22fc      	movs	r2, #252	; 0xfc
   b63e4:	2111      	movs	r1, #17
   b63e6:	4628      	mov	r0, r5
   b63e8:	f7ff feb6 	bl	b6158 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b63ec:	4604      	mov	r4, r0
   b63ee:	b910      	cbnz	r0, b63f6 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b63f0:	f240 221b 	movw	r2, #539	; 0x21b
   b63f4:	e7c9      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b63f6:	2200      	movs	r2, #0
   b63f8:	4639      	mov	r1, r7
   b63fa:	4628      	mov	r0, r5
   b63fc:	f7ff ff64 	bl	b62c8 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b6400:	4604      	mov	r4, r0
   b6402:	b910      	cbnz	r0, b640a <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b6404:	f240 2222 	movw	r2, #546	; 0x222
   b6408:	e7bf      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b640a:	9600      	str	r6, [sp, #0]
   b640c:	2302      	movs	r3, #2
   b640e:	2277      	movs	r2, #119	; 0x77
   b6410:	2110      	movs	r1, #16
   b6412:	4628      	mov	r0, r5
   b6414:	f7ff fea0 	bl	b6158 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6418:	4604      	mov	r4, r0
   b641a:	b910      	cbnz	r0, b6422 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b641c:	f240 222b 	movw	r2, #555	; 0x22b
   b6420:	e7b3      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6422:	4633      	mov	r3, r6
   b6424:	2204      	movs	r2, #4
   b6426:	211c      	movs	r1, #28
   b6428:	4628      	mov	r0, r5
   b642a:	f7ff ff43 	bl	b62b4 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b642e:	4604      	mov	r4, r0
   b6430:	b910      	cbnz	r0, b6438 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6432:	f240 2232 	movw	r2, #562	; 0x232
   b6436:	e7a8      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b6438:	9600      	str	r6, [sp, #0]
   b643a:	2318      	movs	r3, #24
   b643c:	22e3      	movs	r2, #227	; 0xe3
   b643e:	2111      	movs	r1, #17
   b6440:	4628      	mov	r0, r5
   b6442:	f7ff fe89 	bl	b6158 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b6446:	4604      	mov	r4, r0
   b6448:	b910      	cbnz	r0, b6450 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b644a:	f240 2239 	movw	r2, #569	; 0x239
   b644e:	e79c      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6450:	4633      	mov	r3, r6
   b6452:	22c0      	movs	r2, #192	; 0xc0
   b6454:	2117      	movs	r1, #23
   b6456:	4628      	mov	r0, r5
   b6458:	f7ff fe20 	bl	b609c <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b645c:	4604      	mov	r4, r0
   b645e:	b910      	cbnz	r0, b6466 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6460:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6464:	e791      	b.n	b638a <_ZN6AB180513deepPowerDownEi+0x22>
   b6466:	f001 ff0b 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b646a:	f8df 9054 	ldr.w	r9, [pc, #84]	; b64c0 <_ZN6AB180513deepPowerDownEi+0x158>
   b646e:	f8df 8040 	ldr.w	r8, [pc, #64]	; b64b0 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6472:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6476:	4606      	mov	r6, r0
   b6478:	434f      	muls	r7, r1
   b647a:	f001 ff01 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b647e:	1b80      	subs	r0, r0, r6
   b6480:	42b8      	cmp	r0, r7
   b6482:	d20e      	bcs.n	b64a2 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6484:	2201      	movs	r2, #1
   b6486:	2117      	movs	r1, #23
   b6488:	4628      	mov	r0, r5
   b648a:	f7ff fdbd 	bl	b6008 <_ZN6AB180512readRegisterEhb>
   b648e:	4649      	mov	r1, r9
   b6490:	4602      	mov	r2, r0
   b6492:	4640      	mov	r0, r8
   b6494:	f7fd febc 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b6498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b649c:	f002 fa54 	bl	b8948 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b64a0:	e7eb      	b.n	b647a <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b64a2:	4906      	ldr	r1, [pc, #24]	; (b64bc <_ZN6AB180513deepPowerDownEi+0x154>)
   b64a4:	4802      	ldr	r0, [pc, #8]	; (b64b0 <_ZN6AB180513deepPowerDownEi+0x148>)
   b64a6:	f7ff fceb 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b64aa:	f004 fb78 	bl	bab9e <_ZN11SystemClass5resetEv>
    return true;
   b64ae:	e770      	b.n	b6392 <_ZN6AB180513deepPowerDownEi+0x2a>
   b64b0:	2003e3dc 	.word	0x2003e3dc
   b64b4:	000bcd00 	.word	0x000bcd00
   b64b8:	000bccf5 	.word	0x000bccf5
   b64bc:	000bcd26 	.word	0x000bcd26
   b64c0:	000bcd11 	.word	0x000bcd11

000b64c4 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b64c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b64c8:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b64cc:	4605      	mov	r5, r0
   b64ce:	460c      	mov	r4, r1
   b64d0:	4691      	mov	r9, r2
   b64d2:	461f      	mov	r7, r3
    if (lock) {
   b64d4:	f1ba 0f00 	cmp.w	sl, #0
   b64d8:	d002      	beq.n	b64e0 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b64da:	6840      	ldr	r0, [r0, #4]
   b64dc:	f002 fcaa 	bl	b8e34 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b64e0:	b307      	cbz	r7, b6524 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b64e2:	2f20      	cmp	r7, #32
   b64e4:	463e      	mov	r6, r7
   b64e6:	bf28      	it	cs
   b64e8:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b64ea:	2c7f      	cmp	r4, #127	; 0x7f
   b64ec:	d826      	bhi.n	b653c <_ZN6AB18057readRamEjPhjb+0x78>
   b64ee:	1933      	adds	r3, r6, r4
   b64f0:	2b80      	cmp	r3, #128	; 0x80
   b64f2:	d901      	bls.n	b64f8 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b64f4:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b64f8:	2301      	movs	r3, #1
   b64fa:	2204      	movs	r2, #4
   b64fc:	213f      	movs	r1, #63	; 0x3f
   b64fe:	4628      	mov	r0, r5
   b6500:	f7ff fe77 	bl	b61f2 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b6504:	2300      	movs	r3, #0
   b6506:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b650a:	9300      	str	r3, [sp, #0]
   b650c:	464a      	mov	r2, r9
   b650e:	4633      	mov	r3, r6
   b6510:	b2c9      	uxtb	r1, r1
   b6512:	4628      	mov	r0, r5
   b6514:	f7ff fce4 	bl	b5ee0 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b6518:	4680      	mov	r8, r0
   b651a:	b128      	cbz	r0, b6528 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b651c:	4434      	add	r4, r6
        dataLen -= count;
   b651e:	1bbf      	subs	r7, r7, r6
        data += count;
   b6520:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6522:	e7dd      	b.n	b64e0 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6524:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b6528:	f1ba 0f00 	cmp.w	sl, #0
   b652c:	d002      	beq.n	b6534 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b652e:	6868      	ldr	r0, [r5, #4]
   b6530:	f002 fc89 	bl	b8e46 <_ZN7TwoWire6unlockEv>
}
   b6534:	4640      	mov	r0, r8
   b6536:	b002      	add	sp, #8
   b6538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b653c:	2301      	movs	r3, #1
   b653e:	2204      	movs	r2, #4
   b6540:	213f      	movs	r1, #63	; 0x3f
   b6542:	4628      	mov	r0, r5
   b6544:	f7ff feb6 	bl	b62b4 <_ZN6AB180514setRegisterBitEhhb>
   b6548:	e7dc      	b.n	b6504 <_ZN6AB18057readRamEjPhjb+0x40>

000b654a <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b654a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b654e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6552:	4605      	mov	r5, r0
   b6554:	460c      	mov	r4, r1
   b6556:	4691      	mov	r9, r2
   b6558:	461f      	mov	r7, r3
    if (lock) {
   b655a:	f1ba 0f00 	cmp.w	sl, #0
   b655e:	d002      	beq.n	b6566 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6560:	6840      	ldr	r0, [r0, #4]
   b6562:	f002 fc67 	bl	b8e34 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b6566:	b307      	cbz	r7, b65aa <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b6568:	2f1f      	cmp	r7, #31
   b656a:	463e      	mov	r6, r7
   b656c:	bf28      	it	cs
   b656e:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6570:	2c7f      	cmp	r4, #127	; 0x7f
   b6572:	d826      	bhi.n	b65c2 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6574:	1933      	adds	r3, r6, r4
   b6576:	2b80      	cmp	r3, #128	; 0x80
   b6578:	d901      	bls.n	b657e <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b657a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b657e:	2301      	movs	r3, #1
   b6580:	2204      	movs	r2, #4
   b6582:	213f      	movs	r1, #63	; 0x3f
   b6584:	4628      	mov	r0, r5
   b6586:	f7ff fe34 	bl	b61f2 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b658a:	2300      	movs	r3, #0
   b658c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6590:	9300      	str	r3, [sp, #0]
   b6592:	464a      	mov	r2, r9
   b6594:	4633      	mov	r3, r6
   b6596:	b2c9      	uxtb	r1, r1
   b6598:	4628      	mov	r0, r5
   b659a:	f7ff fd43 	bl	b6024 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b659e:	4680      	mov	r8, r0
   b65a0:	b128      	cbz	r0, b65ae <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b65a2:	4434      	add	r4, r6
        dataLen -= count;
   b65a4:	1bbf      	subs	r7, r7, r6
        data += count;
   b65a6:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b65a8:	e7dd      	b.n	b6566 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b65aa:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b65ae:	f1ba 0f00 	cmp.w	sl, #0
   b65b2:	d002      	beq.n	b65ba <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b65b4:	6868      	ldr	r0, [r5, #4]
   b65b6:	f002 fc46 	bl	b8e46 <_ZN7TwoWire6unlockEv>
}
   b65ba:	4640      	mov	r0, r8
   b65bc:	b002      	add	sp, #8
   b65be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b65c2:	2301      	movs	r3, #1
   b65c4:	2204      	movs	r2, #4
   b65c6:	213f      	movs	r1, #63	; 0x3f
   b65c8:	4628      	mov	r0, r5
   b65ca:	f7ff fe73 	bl	b62b4 <_ZN6AB180514setRegisterBitEhhb>
   b65ce:	e7dc      	b.n	b658a <_ZN6AB18058writeRamEjPKhjb+0x40>

000b65d0 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b65d0:	b530      	push	{r4, r5, lr}
   b65d2:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b65d4:	680d      	ldr	r5, [r1, #0]
   b65d6:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b65da:	9503      	str	r5, [sp, #12]
   b65dc:	684d      	ldr	r5, [r1, #4]
   b65de:	9502      	str	r5, [sp, #8]
   b65e0:	688d      	ldr	r5, [r1, #8]
   b65e2:	9501      	str	r5, [sp, #4]
   b65e4:	68c9      	ldr	r1, [r1, #12]
   b65e6:	9100      	str	r1, [sp, #0]
   b65e8:	3301      	adds	r3, #1
   b65ea:	4904      	ldr	r1, [pc, #16]	; (b65fc <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b65ec:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b65f0:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b65f2:	f004 fa6d 	bl	baad0 <_ZN6String6formatEPKcz>
}
   b65f6:	4620      	mov	r0, r4
   b65f8:	b005      	add	sp, #20
   b65fa:	bd30      	pop	{r4, r5, pc}
   b65fc:	000bcd38 	.word	0x000bcd38

000b6600 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6600:	0903      	lsrs	r3, r0, #4
}
   b6602:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b6604:	f000 000f 	and.w	r0, r0, #15
}
   b6608:	fb02 0003 	mla	r0, r2, r3, r0
   b660c:	4770      	bx	lr

000b660e <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b660e:	b538      	push	{r3, r4, r5, lr}
   b6610:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6612:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6614:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b6616:	f7ff fff3 	bl	b6600 <_ZN6AB180510bcdToValueEh>
   b661a:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b661c:	7860      	ldrb	r0, [r4, #1]
   b661e:	f7ff ffef 	bl	b6600 <_ZN6AB180510bcdToValueEh>
   b6622:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6624:	78a0      	ldrb	r0, [r4, #2]
   b6626:	f7ff ffeb 	bl	b6600 <_ZN6AB180510bcdToValueEh>
   b662a:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b662c:	78e0      	ldrb	r0, [r4, #3]
   b662e:	f7ff ffe7 	bl	b6600 <_ZN6AB180510bcdToValueEh>
   b6632:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6634:	7920      	ldrb	r0, [r4, #4]
   b6636:	f7ff ffe3 	bl	b6600 <_ZN6AB180510bcdToValueEh>
   b663a:	3801      	subs	r0, #1
   b663c:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b663e:	b92d      	cbnz	r5, b664c <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6640:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6642:	7828      	ldrb	r0, [r5, #0]
   b6644:	f7ff ffdc 	bl	b6600 <_ZN6AB180510bcdToValueEh>
   b6648:	6188      	str	r0, [r1, #24]
}
   b664a:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b664c:	7960      	ldrb	r0, [r4, #5]
   b664e:	f7ff ffd7 	bl	b6600 <_ZN6AB180510bcdToValueEh>
   b6652:	3064      	adds	r0, #100	; 0x64
   b6654:	1da5      	adds	r5, r4, #6
   b6656:	6148      	str	r0, [r1, #20]
   b6658:	e7f3      	b.n	b6642 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b665c <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b665c:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b665e:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6660:	b088      	sub	sp, #32
   b6662:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6664:	461a      	mov	r2, r3
   b6666:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6668:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b666a:	f7ff fda4 	bl	b61b6 <_ZN6AB180510isBitClearEhhb>
   b666e:	b1f0      	cbz	r0, b66ae <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6670:	2308      	movs	r3, #8
   b6672:	2601      	movs	r6, #1
   b6674:	4620      	mov	r0, r4
   b6676:	9600      	str	r6, [sp, #0]
   b6678:	eb0d 0203 	add.w	r2, sp, r3
   b667c:	2100      	movs	r1, #0
   b667e:	f7ff fc2f 	bl	b5ee0 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6682:	4604      	mov	r4, r0
   b6684:	b198      	cbz	r0, b66ae <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b6686:	4632      	mov	r2, r6
   b6688:	4629      	mov	r1, r5
   b668a:	f10d 0009 	add.w	r0, sp, #9
   b668e:	f7ff ffbe 	bl	b660e <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6692:	a804      	add	r0, sp, #16
   b6694:	f7ff ff9c 	bl	b65d0 <_ZN6AB180510tmToStringEPK2tm>
   b6698:	4808      	ldr	r0, [pc, #32]	; (b66bc <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b669a:	9a04      	ldr	r2, [sp, #16]
   b669c:	4908      	ldr	r1, [pc, #32]	; (b66c0 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b669e:	f7fd fdb7 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b66a2:	a804      	add	r0, sp, #16
   b66a4:	f004 f972 	bl	ba98c <_ZN6StringD1Ev>
}
   b66a8:	4620      	mov	r0, r4
   b66aa:	b008      	add	sp, #32
   b66ac:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b66ae:	2224      	movs	r2, #36	; 0x24
   b66b0:	2100      	movs	r1, #0
   b66b2:	4628      	mov	r0, r5
   b66b4:	f005 fc9e 	bl	bbff4 <memset>
   b66b8:	2400      	movs	r4, #0
   b66ba:	e7f5      	b.n	b66a8 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b66bc:	2003e3dc 	.word	0x2003e3dc
   b66c0:	000bcd56 	.word	0x000bcd56

000b66c4 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b66c4:	b530      	push	{r4, r5, lr}
   b66c6:	b08b      	sub	sp, #44	; 0x2c
   b66c8:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b66ca:	a901      	add	r1, sp, #4
   b66cc:	f7ff ffc6 	bl	b665c <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b66d0:	4604      	mov	r4, r0
   b66d2:	b120      	cbz	r0, b66de <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b66d4:	a801      	add	r0, sp, #4
   b66d6:	f002 f92f 	bl	b8938 <mktime>
   b66da:	e9c5 0100 	strd	r0, r1, [r5]
}
   b66de:	4620      	mov	r0, r4
   b66e0:	b00b      	add	sp, #44	; 0x2c
   b66e2:	bd30      	pop	{r4, r5, pc}

000b66e4 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b66e4:	230a      	movs	r3, #10
   b66e6:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b66ea:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b66ee:	fb91 f2f3 	sdiv	r2, r1, r3
   b66f2:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b66f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b66fa:	b2c0      	uxtb	r0, r0
   b66fc:	4770      	bx	lr

000b66fe <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b66fe:	b570      	push	{r4, r5, r6, lr}
   b6700:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b6702:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b6704:	460c      	mov	r4, r1
   b6706:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b6708:	f7ff ffec 	bl	b66e4 <_ZN6AB180510valueToBcdEi>
   b670c:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b670e:	6868      	ldr	r0, [r5, #4]
   b6710:	f7ff ffe8 	bl	b66e4 <_ZN6AB180510valueToBcdEi>
   b6714:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b6716:	68a8      	ldr	r0, [r5, #8]
   b6718:	f7ff ffe4 	bl	b66e4 <_ZN6AB180510valueToBcdEi>
   b671c:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b671e:	68e8      	ldr	r0, [r5, #12]
   b6720:	f7ff ffe0 	bl	b66e4 <_ZN6AB180510valueToBcdEi>
   b6724:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6726:	6928      	ldr	r0, [r5, #16]
   b6728:	3001      	adds	r0, #1
   b672a:	f7ff ffdb 	bl	b66e4 <_ZN6AB180510valueToBcdEi>
   b672e:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6730:	b92e      	cbnz	r6, b673e <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6732:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6734:	69a8      	ldr	r0, [r5, #24]
   b6736:	f7ff ffd5 	bl	b66e4 <_ZN6AB180510valueToBcdEi>
   b673a:	7030      	strb	r0, [r6, #0]
}
   b673c:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b673e:	696a      	ldr	r2, [r5, #20]
   b6740:	2364      	movs	r3, #100	; 0x64
   b6742:	fb92 f0f3 	sdiv	r0, r2, r3
   b6746:	fb03 2010 	mls	r0, r3, r0, r2
   b674a:	f7ff ffcb 	bl	b66e4 <_ZN6AB180510valueToBcdEi>
   b674e:	1da6      	adds	r6, r4, #6
   b6750:	7160      	strb	r0, [r4, #5]
   b6752:	e7ef      	b.n	b6734 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6754 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6754:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6756:	b087      	sub	sp, #28
   b6758:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b675a:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b675c:	4616      	mov	r6, r2
   b675e:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6760:	f7ff ff36 	bl	b65d0 <_ZN6AB180510tmToStringEPK2tm>
   b6764:	481e      	ldr	r0, [pc, #120]	; (b67e0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b6766:	9a02      	ldr	r2, [sp, #8]
   b6768:	491e      	ldr	r1, [pc, #120]	; (b67e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b676a:	f7fd fd51 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b676e:	a802      	add	r0, sp, #8
   b6770:	f004 f90c 	bl	ba98c <_ZN6StringD1Ev>
    if (lock) {
   b6774:	b116      	cbz	r6, b677c <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b6776:	6868      	ldr	r0, [r5, #4]
   b6778:	f002 fb5c 	bl	b8e34 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b677c:	4620      	mov	r0, r4
   b677e:	2201      	movs	r2, #1
   b6780:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6784:	2700      	movs	r7, #0
   b6786:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b678a:	f7ff ffb8 	bl	b66fe <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b678e:	2301      	movs	r3, #1
   b6790:	461a      	mov	r2, r3
   b6792:	2110      	movs	r1, #16
   b6794:	4628      	mov	r0, r5
   b6796:	f7ff fd8d 	bl	b62b4 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b679a:	4604      	mov	r4, r0
   b679c:	b1e8      	cbz	r0, b67da <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b679e:	2308      	movs	r3, #8
   b67a0:	9700      	str	r7, [sp, #0]
   b67a2:	eb0d 0203 	add.w	r2, sp, r3
   b67a6:	4639      	mov	r1, r7
   b67a8:	4628      	mov	r0, r5
   b67aa:	f7ff fc3b 	bl	b6024 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b67ae:	4604      	mov	r4, r0
   b67b0:	b160      	cbz	r0, b67cc <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b67b2:	2301      	movs	r3, #1
   b67b4:	461a      	mov	r2, r3
   b67b6:	2110      	movs	r1, #16
   b67b8:	4628      	mov	r0, r5
   b67ba:	f7ff fd1a 	bl	b61f2 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b67be:	b116      	cbz	r6, b67c6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b67c0:	6868      	ldr	r0, [r5, #4]
   b67c2:	f002 fb40 	bl	b8e46 <_ZN7TwoWire6unlockEv>
}
   b67c6:	4620      	mov	r0, r4
   b67c8:	b007      	add	sp, #28
   b67ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b67cc:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b67d0:	4905      	ldr	r1, [pc, #20]	; (b67e8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b67d2:	4803      	ldr	r0, [pc, #12]	; (b67e0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b67d4:	f7ff fb54 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
   b67d8:	e7f1      	b.n	b67be <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b67da:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b67de:	e7f7      	b.n	b67d0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b67e0:	2003e3dc 	.word	0x2003e3dc
   b67e4:	000bcd64 	.word	0x000bcd64
   b67e8:	000bcd72 	.word	0x000bcd72

000b67ec <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b67ec:	b513      	push	{r0, r1, r4, lr}
   b67ee:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b67f0:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b67f2:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b67f6:	f005 fbaf 	bl	bbf58 <gmtime>
    return setRtcFromTm(tm, lock);
   b67fa:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b67fe:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b6800:	4620      	mov	r0, r4
   b6802:	f7ff ffa7 	bl	b6754 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b6806:	b002      	add	sp, #8
   b6808:	bd10      	pop	{r4, pc}
	...

000b680c <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b680c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b680e:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6810:	b089      	sub	sp, #36	; 0x24
   b6812:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6814:	bb75      	cbnz	r5, b6874 <_ZN6AB18054loopEv+0x68>
   b6816:	f004 fb91 	bl	baf3c <_ZN9TimeClass7isValidEv>
   b681a:	b358      	cbz	r0, b6874 <_ZN6AB18054loopEv+0x68>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   b681c:	2600      	movs	r6, #0
   b681e:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6820:	a904      	add	r1, sp, #16
   b6822:	4628      	mov	r0, r5
        tm = 0;
   b6824:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b6828:	f001 ffae 	bl	b8788 <spark_sync_time_last>
   b682c:	b310      	cbz	r0, b6874 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b682e:	2501      	movs	r5, #1
   b6830:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6832:	f004 fba0 	bl	baf76 <_ZN9TimeClass3nowEv>
   b6836:	17c3      	asrs	r3, r0, #31
   b6838:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b683c:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b683e:	9500      	str	r5, [sp, #0]
   b6840:	4620      	mov	r0, r4
   b6842:	f7ff ffd3 	bl	b67ec <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b6846:	a902      	add	r1, sp, #8
   b6848:	4620      	mov	r0, r4
        time = 0;
   b684a:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b684e:	f7ff ff39 	bl	b66c4 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6852:	4b13      	ldr	r3, [pc, #76]	; (b68a0 <_ZN6AB18054loopEv+0x94>)
   b6854:	4913      	ldr	r1, [pc, #76]	; (b68a4 <_ZN6AB18054loopEv+0x98>)
   b6856:	681b      	ldr	r3, [r3, #0]
   b6858:	9300      	str	r3, [sp, #0]
   b685a:	a804      	add	r0, sp, #16
   b685c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6860:	f004 fb2a 	bl	baeb8 <_ZN9TimeClass6formatExPKc>
   b6864:	4810      	ldr	r0, [pc, #64]	; (b68a8 <_ZN6AB18054loopEv+0x9c>)
   b6866:	9a04      	ldr	r2, [sp, #16]
   b6868:	4910      	ldr	r1, [pc, #64]	; (b68ac <_ZN6AB18054loopEv+0xa0>)
   b686a:	f7fd fcd1 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b686e:	a804      	add	r0, sp, #16
   b6870:	f004 f88c 	bl	ba98c <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6874:	6963      	ldr	r3, [r4, #20]
   b6876:	b18b      	cbz	r3, b689c <_ZN6AB18054loopEv+0x90>
   b6878:	f001 fd02 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b687c:	6923      	ldr	r3, [r4, #16]
   b687e:	1ac0      	subs	r0, r0, r3
   b6880:	6963      	ldr	r3, [r4, #20]
   b6882:	4298      	cmp	r0, r3
   b6884:	d30a      	bcc.n	b689c <_ZN6AB18054loopEv+0x90>
   b6886:	f001 fcfb 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b688a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b688e:	6120      	str	r0, [r4, #16]
            setWDT();
   b6890:	4620      	mov	r0, r4
}
   b6892:	b009      	add	sp, #36	; 0x24
   b6894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b6898:	f7ff bc0c 	b.w	b60b4 <_ZN6AB18056setWDTEi>
}
   b689c:	b009      	add	sp, #36	; 0x24
   b689e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b68a0:	2003decc 	.word	0x2003decc
   b68a4:	2003e6ac 	.word	0x2003e6ac
   b68a8:	2003e3dc 	.word	0x2003e3dc
   b68ac:	000bcd8d 	.word	0x000bcd8d

000b68b0 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b68b0:	b530      	push	{r4, r5, lr}
   b68b2:	4604      	mov	r4, r0
   b68b4:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b68b6:	b111      	cbz	r1, b68be <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b68b8:	6840      	ldr	r0, [r0, #4]
   b68ba:	f002 fa69 	bl	b8d90 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b68be:	4620      	mov	r0, r4
   b68c0:	f7ff fb64 	bl	b5f8c <_ZN6AB180510detectChipEv>
   b68c4:	ad06      	add	r5, sp, #24
   b68c6:	2800      	cmp	r0, #0
   b68c8:	d037      	beq.n	b693a <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b68ca:	4620      	mov	r0, r4
   b68cc:	f7ff fc9c 	bl	b6208 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b68d0:	2301      	movs	r3, #1
   b68d2:	461a      	mov	r2, r3
   b68d4:	2110      	movs	r1, #16
   b68d6:	4620      	mov	r0, r4
   b68d8:	f7ff fc6d 	bl	b61b6 <_ZN6AB180510isBitClearEhhb>
   b68dc:	b1d8      	cbz	r0, b6916 <_ZN6AB18055setupEb+0x66>
   b68de:	f004 fb2d 	bl	baf3c <_ZN9TimeClass7isValidEv>
   b68e2:	b9c0      	cbnz	r0, b6916 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b68e4:	a902      	add	r1, sp, #8
   b68e6:	4620      	mov	r0, r4
   b68e8:	f7ff feec 	bl	b66c4 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b68ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b68f0:	f004 fa28 	bl	bad44 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b68f4:	4b13      	ldr	r3, [pc, #76]	; (b6944 <_ZN6AB18055setupEb+0x94>)
   b68f6:	4914      	ldr	r1, [pc, #80]	; (b6948 <_ZN6AB18055setupEb+0x98>)
   b68f8:	681b      	ldr	r3, [r3, #0]
   b68fa:	9300      	str	r3, [sp, #0]
   b68fc:	4628      	mov	r0, r5
   b68fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6902:	f004 fad9 	bl	baeb8 <_ZN9TimeClass6formatExPKc>
   b6906:	4811      	ldr	r0, [pc, #68]	; (b694c <_ZN6AB18055setupEb+0x9c>)
   b6908:	9a06      	ldr	r2, [sp, #24]
   b690a:	4911      	ldr	r1, [pc, #68]	; (b6950 <_ZN6AB18055setupEb+0xa0>)
   b690c:	f7fd fc80 	bl	b4210 <_ZNK5spark6Logger4infoEPKcz>
   b6910:	4628      	mov	r0, r5
   b6912:	f004 f83b 	bl	ba98c <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6916:	4b0f      	ldr	r3, [pc, #60]	; (b6954 <_ZN6AB18055setupEb+0xa4>)
   b6918:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b691a:	4b0f      	ldr	r3, [pc, #60]	; (b6958 <_ZN6AB18055setupEb+0xa8>)
   b691c:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b691e:	4b0f      	ldr	r3, [pc, #60]	; (b695c <_ZN6AB18055setupEb+0xac>)
   b6920:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6922:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6926:	2300      	movs	r3, #0
   b6928:	a802      	add	r0, sp, #8
   b692a:	9500      	str	r5, [sp, #0]
   b692c:	f7fd ff2c 	bl	b4788 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6930:	4628      	mov	r0, r5
   b6932:	f7fd fc23 	bl	b417c <_ZNSt14_Function_baseD1Ev>
}
   b6936:	b00b      	add	sp, #44	; 0x2c
   b6938:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b693a:	4909      	ldr	r1, [pc, #36]	; (b6960 <_ZN6AB18055setupEb+0xb0>)
   b693c:	4803      	ldr	r0, [pc, #12]	; (b694c <_ZN6AB18055setupEb+0x9c>)
   b693e:	f7ff fa9f 	bl	b5e80 <_ZNK5spark6Logger5errorEPKcz>
   b6942:	e7e8      	b.n	b6916 <_ZN6AB18055setupEb+0x66>
   b6944:	2003decc 	.word	0x2003decc
   b6948:	2003e6ac 	.word	0x2003e6ac
   b694c:	2003e3dc 	.word	0x2003e3dc
   b6950:	000bcda3 	.word	0x000bcda3
   b6954:	000b6139 	.word	0x000b6139
   b6958:	000b4173 	.word	0x000b4173
   b695c:	000b415f 	.word	0x000b415f
   b6960:	000bcdc0 	.word	0x000bcdc0

000b6964 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6964:	4b01      	ldr	r3, [pc, #4]	; (b696c <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6966:	4a02      	ldr	r2, [pc, #8]	; (b6970 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6968:	601a      	str	r2, [r3, #0]
}
   b696a:	4770      	bx	lr
   b696c:	2003e3dc 	.word	0x2003e3dc
   b6970:	000bcdd8 	.word	0x000bcdd8

000b6974 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b6974:	4770      	bx	lr

000b6976 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b6976:	b510      	push	{r4, lr}
}
   b6978:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b697a:	4604      	mov	r4, r0
}
   b697c:	f7fd fb8f 	bl	b409e <_ZdlPvj>
   b6980:	4620      	mov	r0, r4
   b6982:	bd10      	pop	{r4, pc}

000b6984 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b6984:	6803      	ldr	r3, [r0, #0]
   b6986:	b2c9      	uxtb	r1, r1
   b6988:	689b      	ldr	r3, [r3, #8]
   b698a:	4718      	bx	r3

000b698c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b698c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b698e:	4d03      	ldr	r5, [pc, #12]	; (b699c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6990:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b6994:	e9c0 5100 	strd	r5, r1, [r0]
}
   b6998:	bd30      	pop	{r4, r5, pc}
   b699a:	bf00      	nop
   b699c:	000bce04 	.word	0x000bce04

000b69a0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b69a0:	6840      	ldr	r0, [r0, #4]
   b69a2:	f002 b9f5 	b.w	b8d90 <_ZN7TwoWire5beginEv>

000b69a6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b69a6:	b510      	push	{r4, lr}
   b69a8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b69aa:	6800      	ldr	r0, [r0, #0]
   b69ac:	f002 fa4b 	bl	b8e46 <_ZN7TwoWire6unlockEv>
   b69b0:	4620      	mov	r0, r4
   b69b2:	bd10      	pop	{r4, pc}

000b69b4 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b69b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b69b8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b69ba:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b69bc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b69be:	460d      	mov	r5, r1
   b69c0:	4616      	mov	r6, r2
   b69c2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b69c4:	f002 fa36 	bl	b8e34 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b69c8:	b1a7      	cbz	r7, b69f4 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b69ca:	68e1      	ldr	r1, [r4, #12]
   b69cc:	6860      	ldr	r0, [r4, #4]
   b69ce:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b69d2:	f002 fa10 	bl	b8df6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b69d6:	0a29      	lsrs	r1, r5, #8
   b69d8:	6860      	ldr	r0, [r4, #4]
   b69da:	f7ff ffd3 	bl	b6984 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b69de:	4629      	mov	r1, r5
   b69e0:	6860      	ldr	r0, [r4, #4]
   b69e2:	f7ff ffcf 	bl	b6984 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b69e6:	6860      	ldr	r0, [r4, #4]
   b69e8:	2100      	movs	r1, #0
   b69ea:	f002 fa1f 	bl	b8e2c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b69ee:	b148      	cbz	r0, b6a04 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b69f0:	2400      	movs	r4, #0
   b69f2:	e000      	b.n	b69f6 <_ZN6MB85RC8readDataEjPhj+0x42>
   b69f4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b69f6:	a801      	add	r0, sp, #4
   b69f8:	f7ff ffd5 	bl	b69a6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b69fc:	4620      	mov	r0, r4
   b69fe:	b003      	add	sp, #12
   b6a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b6a04:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b6a06:	7b21      	ldrb	r1, [r4, #12]
   b6a08:	6860      	ldr	r0, [r4, #4]
   b6a0a:	46b8      	mov	r8, r7
   b6a0c:	bf28      	it	cs
   b6a0e:	f04f 0820 	movcs.w	r8, #32
   b6a12:	2301      	movs	r3, #1
   b6a14:	4642      	mov	r2, r8
   b6a16:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6a1a:	f002 f9d6 	bl	b8dca <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b6a1e:	f004 fd2b 	bl	bb478 <_Z19__fetch_global_Wirev>
   b6a22:	6803      	ldr	r3, [r0, #0]
   b6a24:	691b      	ldr	r3, [r3, #16]
   b6a26:	4798      	blx	r3
   b6a28:	4540      	cmp	r0, r8
   b6a2a:	dbe1      	blt.n	b69f0 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b6a2c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6a30:	f004 fd22 	bl	bb478 <_Z19__fetch_global_Wirev>
   b6a34:	6803      	ldr	r3, [r0, #0]
   b6a36:	695b      	ldr	r3, [r3, #20]
   b6a38:	4798      	blx	r3
   b6a3a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b6a3e:	454e      	cmp	r6, r9
   b6a40:	d1f6      	bne.n	b6a30 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6a42:	4445      	add	r5, r8
				dataLen--;
   b6a44:	eba7 0708 	sub.w	r7, r7, r8
   b6a48:	e7be      	b.n	b69c8 <_ZN6MB85RC8readDataEjPhj+0x14>

000b6a4a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6a4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6a4e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6a50:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6a52:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6a54:	460e      	mov	r6, r1
   b6a56:	4690      	mov	r8, r2
   b6a58:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6a5a:	f002 f9eb 	bl	b8e34 <_ZN7TwoWire4lockEv>
   b6a5e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b6a62:	f1b9 0f00 	cmp.w	r9, #0
   b6a66:	d02a      	beq.n	b6abe <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6a68:	b34d      	cbz	r5, b6abe <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6a6a:	68e1      	ldr	r1, [r4, #12]
   b6a6c:	6860      	ldr	r0, [r4, #4]
   b6a6e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6a72:	f002 f9c0 	bl	b8df6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6a76:	0a31      	lsrs	r1, r6, #8
   b6a78:	6860      	ldr	r0, [r4, #4]
   b6a7a:	f7ff ff83 	bl	b6984 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6a7e:	6860      	ldr	r0, [r4, #4]
   b6a80:	4631      	mov	r1, r6
   b6a82:	f7ff ff7f 	bl	b6984 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6a86:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b6a8a:	4647      	mov	r7, r8
   b6a8c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b6a90:	6860      	ldr	r0, [r4, #4]
   b6a92:	f817 1b01 	ldrb.w	r1, [r7], #1
   b6a96:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b6a98:	3d01      	subs	r5, #1
				wire.write(*data);
   b6a9a:	689b      	ldr	r3, [r3, #8]
   b6a9c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6a9e:	4555      	cmp	r5, sl
   b6aa0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b6aa4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6aa6:	d001      	beq.n	b6aac <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b6aa8:	2d00      	cmp	r5, #0
   b6aaa:	d1f1      	bne.n	b6a90 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6aac:	6860      	ldr	r0, [r4, #4]
   b6aae:	2101      	movs	r1, #1
   b6ab0:	f002 f9bc 	bl	b8e2c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6ab4:	2800      	cmp	r0, #0
   b6ab6:	d0d7      	beq.n	b6a68 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6ab8:	f04f 0900 	mov.w	r9, #0
   b6abc:	e7d1      	b.n	b6a62 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b6abe:	a801      	add	r0, sp, #4
   b6ac0:	f7ff ff71 	bl	b69a6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6ac4:	4648      	mov	r0, r9
   b6ac6:	b003      	add	sp, #12
   b6ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6acc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6ad0:	b08b      	sub	sp, #44	; 0x2c
   b6ad2:	460e      	mov	r6, r1
   b6ad4:	4615      	mov	r5, r2
   b6ad6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6ad8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6ada:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6adc:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b6ade:	f002 f9a9 	bl	b8e34 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b6ae2:	42ae      	cmp	r6, r5
   b6ae4:	d229      	bcs.n	b6b3a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b6ae6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b6ae8:	4425      	add	r5, r4
			while(numBytes > 0) {
   b6aea:	b18c      	cbz	r4, b6b10 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b6aec:	2c1e      	cmp	r4, #30
   b6aee:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6af0:	f8d8 3000 	ldr.w	r3, [r8]
   b6af4:	bf28      	it	cs
   b6af6:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6af8:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b6afa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6afe:	aa02      	add	r2, sp, #8
   b6b00:	463b      	mov	r3, r7
   b6b02:	4631      	mov	r1, r6
   b6b04:	4640      	mov	r0, r8
				framAddrTo -= count;
   b6b06:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6b08:	47c8      	blx	r9
				if (!result) {
   b6b0a:	b948      	cbnz	r0, b6b20 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6b0c:	2400      	movs	r4, #0
   b6b0e:	e000      	b.n	b6b12 <_ZN6MB85RC8moveDataEjjj+0x46>
   b6b10:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6b12:	a801      	add	r0, sp, #4
   b6b14:	f7ff ff47 	bl	b69a6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6b18:	4620      	mov	r0, r4
   b6b1a:	b00b      	add	sp, #44	; 0x2c
   b6b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6b20:	f8d8 3000 	ldr.w	r3, [r8]
   b6b24:	aa02      	add	r2, sp, #8
   b6b26:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6b2a:	4629      	mov	r1, r5
   b6b2c:	463b      	mov	r3, r7
   b6b2e:	4640      	mov	r0, r8
   b6b30:	47c8      	blx	r9
				if (!result) {
   b6b32:	2800      	cmp	r0, #0
   b6b34:	d0ea      	beq.n	b6b0c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6b36:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6b38:	e7d7      	b.n	b6aea <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b6b3a:	d9e9      	bls.n	b6b10 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6b3c:	2c00      	cmp	r4, #0
   b6b3e:	d0e7      	beq.n	b6b10 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6b40:	f8d8 3000 	ldr.w	r3, [r8]
   b6b44:	2c1e      	cmp	r4, #30
   b6b46:	4627      	mov	r7, r4
   b6b48:	bf28      	it	cs
   b6b4a:	271e      	movcs	r7, #30
   b6b4c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6b50:	aa02      	add	r2, sp, #8
   b6b52:	463b      	mov	r3, r7
   b6b54:	4631      	mov	r1, r6
   b6b56:	4640      	mov	r0, r8
   b6b58:	47c8      	blx	r9
				if (!result) {
   b6b5a:	2800      	cmp	r0, #0
   b6b5c:	d0d6      	beq.n	b6b0c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6b5e:	f8d8 3000 	ldr.w	r3, [r8]
   b6b62:	aa02      	add	r2, sp, #8
   b6b64:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6b68:	4629      	mov	r1, r5
   b6b6a:	463b      	mov	r3, r7
   b6b6c:	4640      	mov	r0, r8
   b6b6e:	47c8      	blx	r9
				if (!result) {
   b6b70:	2800      	cmp	r0, #0
   b6b72:	d0cb      	beq.n	b6b0c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6b74:	443e      	add	r6, r7
				framAddrTo += count;
   b6b76:	443d      	add	r5, r7
				numBytes -= count;
   b6b78:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6b7a:	e7df      	b.n	b6b3c <_ZN6MB85RC8moveDataEjjj+0x70>

000b6b7c <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b6b7c:	6001      	str	r1, [r0, #0]
   b6b7e:	7102      	strb	r2, [r0, #4]
{
}
   b6b80:	4770      	bx	lr

000b6b82 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b6b82:	6800      	ldr	r0, [r0, #0]
   b6b84:	6803      	ldr	r3, [r0, #0]
   b6b86:	68db      	ldr	r3, [r3, #12]
   b6b88:	4718      	bx	r3

000b6b8a <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b6b8a:	6800      	ldr	r0, [r0, #0]
   b6b8c:	6803      	ldr	r3, [r0, #0]
   b6b8e:	6a1b      	ldr	r3, [r3, #32]
   b6b90:	4718      	bx	r3

000b6b92 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b6b92:	6800      	ldr	r0, [r0, #0]
   b6b94:	6803      	ldr	r3, [r0, #0]
   b6b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6b98:	4718      	bx	r3

000b6b9a <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b6b9a:	7900      	ldrb	r0, [r0, #4]
   b6b9c:	4770      	bx	lr

000b6b9e <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b6b9e:	6800      	ldr	r0, [r0, #0]
   b6ba0:	6803      	ldr	r3, [r0, #0]
   b6ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6ba4:	4718      	bx	r3

000b6ba6 <_ZN10RHDatagram6sendtoEPhhh>:
{
   b6ba6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6ba8:	4605      	mov	r5, r0
   b6baa:	460c      	mov	r4, r1
    setHeaderTo(address);
   b6bac:	4619      	mov	r1, r3
{
   b6bae:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b6bb0:	f7ff fff5 	bl	b6b9e <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b6bb4:	6828      	ldr	r0, [r5, #0]
   b6bb6:	9a01      	ldr	r2, [sp, #4]
   b6bb8:	6803      	ldr	r3, [r0, #0]
   b6bba:	695b      	ldr	r3, [r3, #20]
   b6bbc:	4621      	mov	r1, r4
}
   b6bbe:	b003      	add	sp, #12
   b6bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b6bc4:	4718      	bx	r3

000b6bc6 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b6bc6:	6800      	ldr	r0, [r0, #0]
   b6bc8:	6803      	ldr	r3, [r0, #0]
   b6bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6bcc:	4718      	bx	r3

000b6bce <_ZN10RHDatagram14setThisAddressEh>:
{
   b6bce:	b538      	push	{r3, r4, r5, lr}
   b6bd0:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b6bd2:	6800      	ldr	r0, [r0, #0]
   b6bd4:	6803      	ldr	r3, [r0, #0]
{
   b6bd6:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b6bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6bda:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b6bdc:	4629      	mov	r1, r5
   b6bde:	4620      	mov	r0, r4
   b6be0:	f7ff fff1 	bl	b6bc6 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b6be4:	7125      	strb	r5, [r4, #4]
}
   b6be6:	bd38      	pop	{r3, r4, r5, pc}

000b6be8 <_ZN10RHDatagram4initEv>:
{
   b6be8:	b538      	push	{r3, r4, r5, lr}
   b6bea:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b6bec:	6800      	ldr	r0, [r0, #0]
   b6bee:	6803      	ldr	r3, [r0, #0]
   b6bf0:	689b      	ldr	r3, [r3, #8]
   b6bf2:	4798      	blx	r3
    if (ret)
   b6bf4:	4605      	mov	r5, r0
   b6bf6:	b118      	cbz	r0, b6c00 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b6bf8:	7921      	ldrb	r1, [r4, #4]
   b6bfa:	4620      	mov	r0, r4
   b6bfc:	f7ff ffe7 	bl	b6bce <_ZN10RHDatagram14setThisAddressEh>
}
   b6c00:	4628      	mov	r0, r5
   b6c02:	bd38      	pop	{r3, r4, r5, pc}

000b6c04 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b6c04:	6800      	ldr	r0, [r0, #0]
   b6c06:	6803      	ldr	r3, [r0, #0]
   b6c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c0a:	4718      	bx	r3

000b6c0c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b6c0c:	6800      	ldr	r0, [r0, #0]
   b6c0e:	6803      	ldr	r3, [r0, #0]
   b6c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c12:	4718      	bx	r3

000b6c14 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b6c14:	6800      	ldr	r0, [r0, #0]
   b6c16:	6803      	ldr	r3, [r0, #0]
   b6c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6c1a:	4718      	bx	r3

000b6c1c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b6c1c:	6800      	ldr	r0, [r0, #0]
   b6c1e:	6803      	ldr	r3, [r0, #0]
   b6c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6c22:	4718      	bx	r3

000b6c24 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b6c24:	6800      	ldr	r0, [r0, #0]
   b6c26:	6803      	ldr	r3, [r0, #0]
   b6c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6c2a:	4718      	bx	r3

000b6c2c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b6c2c:	6800      	ldr	r0, [r0, #0]
   b6c2e:	6803      	ldr	r3, [r0, #0]
   b6c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6c32:	4718      	bx	r3

000b6c34 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b6c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6c38:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b6c3a:	6800      	ldr	r0, [r0, #0]
{
   b6c3c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b6c3e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b6c40:	6803      	ldr	r3, [r0, #0]
   b6c42:	691b      	ldr	r3, [r3, #16]
{
   b6c44:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b6c48:	4798      	blx	r3
   b6c4a:	4605      	mov	r5, r0
   b6c4c:	b1c8      	cbz	r0, b6c82 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b6c4e:	b11e      	cbz	r6, b6c58 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b6c50:	4620      	mov	r0, r4
   b6c52:	f7ff ffe3 	bl	b6c1c <_ZN10RHDatagram10headerFromEv>
   b6c56:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b6c58:	f1b9 0f00 	cmp.w	r9, #0
   b6c5c:	d004      	beq.n	b6c68 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b6c5e:	4620      	mov	r0, r4
   b6c60:	f7ff ffd8 	bl	b6c14 <_ZN10RHDatagram8headerToEv>
   b6c64:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b6c68:	f1b8 0f00 	cmp.w	r8, #0
   b6c6c:	d004      	beq.n	b6c78 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b6c6e:	4620      	mov	r0, r4
   b6c70:	f7ff ffd8 	bl	b6c24 <_ZN10RHDatagram8headerIdEv>
   b6c74:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b6c78:	b11f      	cbz	r7, b6c82 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b6c7a:	4620      	mov	r0, r4
   b6c7c:	f7ff ffd6 	bl	b6c2c <_ZN10RHDatagram11headerFlagsEv>
   b6c80:	7038      	strb	r0, [r7, #0]
}
   b6c82:	4628      	mov	r0, r5
   b6c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6c88 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b6c88:	2001      	movs	r0, #1
   b6c8a:	4770      	bx	lr

000b6c8c <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b6c8c:	7903      	ldrb	r3, [r0, #4]
   b6c8e:	2b03      	cmp	r3, #3
   b6c90:	d0fc      	beq.n	b6c8c <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b6c92:	2001      	movs	r0, #1
   b6c94:	4770      	bx	lr

000b6c96 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b6c96:	2000      	movs	r0, #0
   b6c98:	4770      	bx	lr

000b6c9a <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b6c9a:	7181      	strb	r1, [r0, #6]
}
   b6c9c:	4770      	bx	lr

000b6c9e <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b6c9e:	7141      	strb	r1, [r0, #5]
}
   b6ca0:	4770      	bx	lr

000b6ca2 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b6ca2:	72c1      	strb	r1, [r0, #11]
}
   b6ca4:	4770      	bx	lr

000b6ca6 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b6ca6:	7301      	strb	r1, [r0, #12]
}
   b6ca8:	4770      	bx	lr

000b6caa <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b6caa:	7341      	strb	r1, [r0, #13]
}
   b6cac:	4770      	bx	lr

000b6cae <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b6cae:	7b83      	ldrb	r3, [r0, #14]
   b6cb0:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b6cb4:	4311      	orrs	r1, r2
   b6cb6:	7381      	strb	r1, [r0, #14]
}
   b6cb8:	4770      	bx	lr

000b6cba <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b6cba:	79c0      	ldrb	r0, [r0, #7]
}
   b6cbc:	4770      	bx	lr

000b6cbe <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b6cbe:	7a00      	ldrb	r0, [r0, #8]
}
   b6cc0:	4770      	bx	lr

000b6cc2 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b6cc2:	7a40      	ldrb	r0, [r0, #9]
}
   b6cc4:	4770      	bx	lr

000b6cc6 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b6cc6:	7a80      	ldrb	r0, [r0, #10]
}
   b6cc8:	4770      	bx	lr

000b6cca <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b6cca:	8a00      	ldrh	r0, [r0, #16]
}
   b6ccc:	b200      	sxth	r0, r0
   b6cce:	4770      	bx	lr

000b6cd0 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b6cd0:	7900      	ldrb	r0, [r0, #4]
}
   b6cd2:	4770      	bx	lr

000b6cd4 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b6cd4:	7101      	strb	r1, [r0, #4]
}
   b6cd6:	4770      	bx	lr

000b6cd8 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b6cd8:	8a40      	ldrh	r0, [r0, #18]
}
   b6cda:	b280      	uxth	r0, r0
   b6cdc:	4770      	bx	lr

000b6cde <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b6cde:	8a80      	ldrh	r0, [r0, #20]
}
   b6ce0:	b280      	uxth	r0, r0
   b6ce2:	4770      	bx	lr

000b6ce4 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b6ce4:	8ac0      	ldrh	r0, [r0, #22]
}
   b6ce6:	b280      	uxth	r0, r0
   b6ce8:	4770      	bx	lr

000b6cea <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b6cea:	b538      	push	{r3, r4, r5, lr}
   b6cec:	4605      	mov	r5, r0
   b6cee:	460c      	mov	r4, r1
    while (!available())
   b6cf0:	682b      	ldr	r3, [r5, #0]
   b6cf2:	4628      	mov	r0, r5
   b6cf4:	68db      	ldr	r3, [r3, #12]
   b6cf6:	4798      	blx	r3
   b6cf8:	b928      	cbnz	r0, b6d06 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b6cfa:	2c00      	cmp	r4, #0
   b6cfc:	d0f8      	beq.n	b6cf0 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b6cfe:	4620      	mov	r0, r4
   b6d00:	f001 fe22 	bl	b8948 <delay>
   b6d04:	e7f4      	b.n	b6cf0 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b6d06:	bd38      	pop	{r3, r4, r5, pc}

000b6d08 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b6d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d0a:	4605      	mov	r5, r0
   b6d0c:	460f      	mov	r7, r1
   b6d0e:	4614      	mov	r4, r2
   b6d10:	f001 fab6 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b6d14:	4606      	mov	r6, r0
   b6d16:	f001 fab3 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6d1a:	1b80      	subs	r0, r0, r6
   b6d1c:	42b8      	cmp	r0, r7
   b6d1e:	d20a      	bcs.n	b6d36 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b6d20:	682b      	ldr	r3, [r5, #0]
   b6d22:	4628      	mov	r0, r5
   b6d24:	68db      	ldr	r3, [r3, #12]
   b6d26:	4798      	blx	r3
   b6d28:	b930      	cbnz	r0, b6d38 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b6d2a:	2c00      	cmp	r4, #0
   b6d2c:	d0f3      	beq.n	b6d16 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b6d2e:	4620      	mov	r0, r4
   b6d30:	f001 fe0a 	bl	b8948 <delay>
   b6d34:	e7ef      	b.n	b6d16 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b6d36:	2000      	movs	r0, #0
}
   b6d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d3a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b6d3a:	b570      	push	{r4, r5, r6, lr}
   b6d3c:	4604      	mov	r4, r0
   b6d3e:	460e      	mov	r6, r1
   b6d40:	f001 fa9e 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b6d44:	4605      	mov	r5, r0
   b6d46:	f001 fa9b 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6d4a:	1b40      	subs	r0, r0, r5
   b6d4c:	42b0      	cmp	r0, r6
   b6d4e:	d204      	bcs.n	b6d5a <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b6d50:	7923      	ldrb	r3, [r4, #4]
   b6d52:	2b03      	cmp	r3, #3
   b6d54:	d0f7      	beq.n	b6d46 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b6d56:	2001      	movs	r0, #1
}
   b6d58:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b6d5a:	2000      	movs	r0, #0
   b6d5c:	e7fc      	b.n	b6d58 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b6d5e <_ZN15RHGenericDriver7waitCADEv>:
{
   b6d5e:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b6d60:	69c3      	ldr	r3, [r0, #28]
{
   b6d62:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b6d64:	b1b3      	cbz	r3, b6d94 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6d66:	f001 fa8b 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6d6a:	2664      	movs	r6, #100	; 0x64
   b6d6c:	4605      	mov	r5, r0
    while (isChannelActive())
   b6d6e:	6823      	ldr	r3, [r4, #0]
   b6d70:	4620      	mov	r0, r4
   b6d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d74:	4798      	blx	r3
   b6d76:	b168      	cbz	r0, b6d94 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6d78:	f001 fa82 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b6d7c:	69e3      	ldr	r3, [r4, #28]
   b6d7e:	1b40      	subs	r0, r0, r5
   b6d80:	4298      	cmp	r0, r3
   b6d82:	d809      	bhi.n	b6d98 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6d84:	210a      	movs	r1, #10
   b6d86:	2001      	movs	r0, #1
   b6d88:	f003 fd27 	bl	ba7da <_Z6randomii>
   b6d8c:	4370      	muls	r0, r6
   b6d8e:	f001 fddb 	bl	b8948 <delay>
    while (isChannelActive())
   b6d92:	e7ec      	b.n	b6d6e <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b6d94:	2001      	movs	r0, #1
}
   b6d96:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b6d98:	2000      	movs	r0, #0
   b6d9a:	e7fc      	b.n	b6d96 <_ZN15RHGenericDriver7waitCADEv+0x38>

000b6d9c <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b6d9c:	4a06      	ldr	r2, [pc, #24]	; (b6db8 <_ZN15RHGenericDriverC1Ev+0x1c>)
   b6d9e:	6002      	str	r2, [r0, #0]
   b6da0:	21ff      	movs	r1, #255	; 0xff
   b6da2:	2200      	movs	r2, #0
   b6da4:	7102      	strb	r2, [r0, #4]
   b6da6:	7141      	strb	r1, [r0, #5]
   b6da8:	8242      	strh	r2, [r0, #18]
   b6daa:	72c1      	strb	r1, [r0, #11]
   b6dac:	8282      	strh	r2, [r0, #20]
   b6dae:	8181      	strh	r1, [r0, #12]
   b6db0:	7382      	strb	r2, [r0, #14]
   b6db2:	82c2      	strh	r2, [r0, #22]
   b6db4:	61c2      	str	r2, [r0, #28]
}
   b6db6:	4770      	bx	lr
   b6db8:	000bce20 	.word	0x000bce20

000b6dbc <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b6dbc:	4770      	bx	lr

000b6dbe <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b6dbe:	4770      	bx	lr

000b6dc0 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b6dc0:	4770      	bx	lr

000b6dc2 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b6dc2:	4770      	bx	lr

000b6dc4 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b6dc4:	4770      	bx	lr

000b6dc6 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b6dc6:	7141      	strb	r1, [r0, #5]
}
   b6dc8:	4770      	bx	lr

000b6dca <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b6dca:	7181      	strb	r1, [r0, #6]
}
   b6dcc:	4770      	bx	lr

000b6dce <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b6dce:	7101      	strb	r1, [r0, #4]
}
   b6dd0:	4770      	bx	lr
	...

000b6dd4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6dd4:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b6dd6:	4d03      	ldr	r5, [pc, #12]	; (b6de4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b6dd8:	6005      	str	r5, [r0, #0]
   b6dda:	7101      	strb	r1, [r0, #4]
   b6ddc:	7142      	strb	r2, [r0, #5]
   b6dde:	7183      	strb	r3, [r0, #6]
}
   b6de0:	bd30      	pop	{r4, r5, pc}
   b6de2:	bf00      	nop
   b6de4:	000bcea0 	.word	0x000bcea0

000b6de8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6de8:	4770      	bx	lr

000b6dea <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6dea:	b510      	push	{r4, lr}
  }
   b6dec:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6dee:	4604      	mov	r4, r0
  }
   b6df0:	f7fd f955 	bl	b409e <_ZdlPvj>
   b6df4:	4620      	mov	r0, r4
   b6df6:	bd10      	pop	{r4, pc}

000b6df8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6df8:	b40e      	push	{r1, r2, r3}
   b6dfa:	b503      	push	{r0, r1, lr}
   b6dfc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b6dfe:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6e00:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b6e04:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b6e06:	f003 fcac 	bl	ba762 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b6e0a:	b002      	add	sp, #8
   b6e0c:	f85d eb04 	ldr.w	lr, [sp], #4
   b6e10:	b003      	add	sp, #12
   b6e12:	4770      	bx	lr

000b6e14 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6e16:	4604      	mov	r4, r0
   b6e18:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6e1a:	7922      	ldrb	r2, [r4, #4]
   b6e1c:	68a3      	ldr	r3, [r4, #8]
   b6e1e:	b132      	cbz	r2, b6e2e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6e20:	b9a3      	cbnz	r3, b6e4c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6e22:	490b      	ldr	r1, [pc, #44]	; (b6e50 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6e24:	b002      	add	sp, #8
   b6e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6e2a:	f003 bb91 	b.w	ba550 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6e2e:	4a09      	ldr	r2, [pc, #36]	; (b6e54 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6e30:	7b26      	ldrb	r6, [r4, #12]
   b6e32:	4d09      	ldr	r5, [pc, #36]	; (b6e58 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6e34:	4909      	ldr	r1, [pc, #36]	; (b6e5c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6e36:	7b64      	ldrb	r4, [r4, #13]
   b6e38:	2e01      	cmp	r6, #1
   b6e3a:	bf18      	it	ne
   b6e3c:	4629      	movne	r1, r5
   b6e3e:	e9cd 1400 	strd	r1, r4, [sp]
   b6e42:	4907      	ldr	r1, [pc, #28]	; (b6e60 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6e44:	f7ff ffd8 	bl	b6df8 <_ZN5Print6printfEPKcz>
  }
   b6e48:	b002      	add	sp, #8
   b6e4a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6e4c:	4a05      	ldr	r2, [pc, #20]	; (b6e64 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6e4e:	e7ef      	b.n	b6e30 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6e50:	000bcedd 	.word	0x000bcedd
   b6e54:	000bd279 	.word	0x000bd279
   b6e58:	000bced9 	.word	0x000bced9
   b6e5c:	000bced5 	.word	0x000bced5
   b6e60:	000bcef3 	.word	0x000bcef3
   b6e64:	000bcecc 	.word	0x000bcecc

000b6e68 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6e68:	b510      	push	{r4, lr}
   b6e6a:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b6e6c:	f7ff ffb2 	bl	b6dd4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b6e70:	4b05      	ldr	r3, [pc, #20]	; (b6e88 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b6e72:	6023      	str	r3, [r4, #0]
  {
   b6e74:	4b05      	ldr	r3, [pc, #20]	; (b6e8c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b6e76:	60a3      	str	r3, [r4, #8]
   b6e78:	2301      	movs	r3, #1
   b6e7a:	7323      	strb	r3, [r4, #12]
   b6e7c:	2300      	movs	r3, #0
   b6e7e:	6123      	str	r3, [r4, #16]
   b6e80:	82a3      	strh	r3, [r4, #20]
{
}
   b6e82:	4620      	mov	r0, r4
   b6e84:	bd10      	pop	{r4, pc}
   b6e86:	bf00      	nop
   b6e88:	000bcf2c 	.word	0x000bcf2c
   b6e8c:	000bcf18 	.word	0x000bcf18

000b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b6e90:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b6e92:	4c0b      	ldr	r4, [pc, #44]	; (b6ec0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6e94:	7821      	ldrb	r1, [r4, #0]
   b6e96:	f3bf 8f5b 	dmb	ish
   b6e9a:	f011 0101 	ands.w	r1, r1, #1
   b6e9e:	d10b      	bne.n	b6eb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6ea0:	4620      	mov	r0, r4
   b6ea2:	9101      	str	r1, [sp, #4]
   b6ea4:	f7fd f90a 	bl	b40bc <__cxa_guard_acquire>
   b6ea8:	9901      	ldr	r1, [sp, #4]
   b6eaa:	b128      	cbz	r0, b6eb8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b6eac:	4805      	ldr	r0, [pc, #20]	; (b6ec4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6eae:	f003 fcad 	bl	ba80c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6eb2:	4620      	mov	r0, r4
   b6eb4:	f7fd f907 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b6eb8:	4802      	ldr	r0, [pc, #8]	; (b6ec4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b6eba:	b002      	add	sp, #8
   b6ebc:	bd10      	pop	{r4, pc}
   b6ebe:	bf00      	nop
   b6ec0:	2003e3e4 	.word	0x2003e3e4
   b6ec4:	2003e3e8 	.word	0x2003e3e8

000b6ec8 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b6ec8:	b507      	push	{r0, r1, r2, lr}
   b6eca:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b6ecc:	f7ff ffe0 	bl	b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6ed0:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b6ed2:	b003      	add	sp, #12
   b6ed4:	f85d eb04 	ldr.w	lr, [sp], #4
   b6ed8:	f003 bd50 	b.w	ba97c <_ZN8SPIClass8transferEh>

000b6edc <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b6edc:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b6ede:	f7ff ffd7 	bl	b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b6ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6ee6:	f003 bd4f 	b.w	ba988 <_ZN8SPIClass15attachInterruptEv>

000b6eea <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b6eea:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b6eec:	f7ff ffd0 	bl	b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b6ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6ef4:	f003 bd49 	b.w	ba98a <_ZN8SPIClass15detachInterruptEv>

000b6ef8 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b6ef8:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b6efa:	7903      	ldrb	r3, [r0, #4]
   b6efc:	2b04      	cmp	r3, #4
   b6efe:	d020      	beq.n	b6f42 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b6f00:	2b03      	cmp	r3, #3
   b6f02:	d020      	beq.n	b6f46 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b6f04:	2b02      	cmp	r3, #2
   b6f06:	d020      	beq.n	b6f4a <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b6f08:	4a11      	ldr	r2, [pc, #68]	; (b6f50 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b6f0a:	4912      	ldr	r1, [pc, #72]	; (b6f54 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b6f0c:	2b01      	cmp	r3, #1
   b6f0e:	bf18      	it	ne
   b6f10:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b6f12:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b6f14:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b6f16:	3901      	subs	r1, #1
   b6f18:	bf18      	it	ne
   b6f1a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b6f1c:	b133      	cbz	r3, b6f2c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b6f1e:	2b01      	cmp	r3, #1
   b6f20:	d004      	beq.n	b6f2c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b6f22:	2b02      	cmp	r3, #2
   b6f24:	d002      	beq.n	b6f2c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b6f26:	2b03      	cmp	r3, #3
   b6f28:	bf18      	it	ne
   b6f2a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b6f2c:	2400      	movs	r4, #0
   b6f2e:	7304      	strb	r4, [r0, #12]
   b6f30:	6102      	str	r2, [r0, #16]
   b6f32:	7501      	strb	r1, [r0, #20]
   b6f34:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b6f36:	f7ff ffab 	bl	b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b6f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f3e:	f003 bc6f 	b.w	ba820 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b6f42:	4a05      	ldr	r2, [pc, #20]	; (b6f58 <_ZN13RHHardwareSPI5beginEv+0x60>)
   b6f44:	e7e5      	b.n	b6f12 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b6f46:	4a05      	ldr	r2, [pc, #20]	; (b6f5c <_ZN13RHHardwareSPI5beginEv+0x64>)
   b6f48:	e7e3      	b.n	b6f12 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b6f4a:	4a05      	ldr	r2, [pc, #20]	; (b6f60 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b6f4c:	e7e1      	b.n	b6f12 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b6f4e:	bf00      	nop
   b6f50:	001e8480 	.word	0x001e8480
   b6f54:	000f4240 	.word	0x000f4240
   b6f58:	00f42400 	.word	0x00f42400
   b6f5c:	007a1200 	.word	0x007a1200
   b6f60:	003d0900 	.word	0x003d0900

000b6f64 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b6f64:	b508      	push	{r3, lr}
        instance().end();
   b6f66:	f7ff ff93 	bl	b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b6f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6f6e:	f003 bc6b 	b.w	ba848 <_ZN8SPIClass3endEv>

000b6f72 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b6f72:	b510      	push	{r4, lr}
   b6f74:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b6f76:	f7ff ff8b 	bl	b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b6f7a:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b6f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6f82:	f003 bc8d 	b.w	ba8a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6f86 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b6f86:	b508      	push	{r3, lr}
        instance().endTransaction();
   b6f88:	f7ff ff82 	bl	b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b6f8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b6f90:	f003 bc6c 	b.w	ba86c <_ZN8SPIClass14endTransactionEv>

000b6f94 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b6f94:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b6f96:	f7ff ff7b 	bl	b6e90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b6f9a:	bd08      	pop	{r3, pc}

000b6f9c <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b6f9c:	2300      	movs	r3, #0
   b6f9e:	4802      	ldr	r0, [pc, #8]	; (b6fa8 <_GLOBAL__sub_I_hardware_spi+0xc>)
   b6fa0:	461a      	mov	r2, r3
   b6fa2:	4619      	mov	r1, r3
   b6fa4:	f7ff bf60 	b.w	b6e68 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b6fa8:	2003e3f0 	.word	0x2003e3f0

000b6fac <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b6fac:	2a01      	cmp	r2, #1
   b6fae:	d105      	bne.n	b6fbc <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b6fb0:	7a00      	ldrb	r0, [r0, #8]
   b6fb2:	780b      	ldrb	r3, [r1, #0]
   b6fb4:	1a1b      	subs	r3, r3, r0
   b6fb6:	4258      	negs	r0, r3
   b6fb8:	4158      	adcs	r0, r3
   b6fba:	4770      	bx	lr
   b6fbc:	2000      	movs	r0, #0
}
   b6fbe:	4770      	bx	lr

000b6fc0 <_ZN6RHMesh5doArpEh>:
{
   b6fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6fc4:	4c25      	ldr	r4, [pc, #148]	; (b705c <_ZN6RHMesh5doArpEh+0x9c>)
   b6fc6:	2301      	movs	r3, #1
{
   b6fc8:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b6fca:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b6fcc:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6fce:	2300      	movs	r3, #0
{
   b6fd0:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b6fd2:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6fd4:	9300      	str	r3, [sp, #0]
   b6fd6:	2203      	movs	r2, #3
   b6fd8:	23ff      	movs	r3, #255	; 0xff
   b6fda:	4621      	mov	r1, r4
{
   b6fdc:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b6fde:	f000 fbb7 	bl	b7750 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b6fe2:	b120      	cbz	r0, b6fee <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b6fe4:	2500      	movs	r5, #0
}
   b6fe6:	4628      	mov	r0, r5
   b6fe8:	b006      	add	sp, #24
   b6fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b6fee:	23fa      	movs	r3, #250	; 0xfa
   b6ff0:	f88d 3017 	strb.w	r3, [sp, #23]
   b6ff4:	f001 f944 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b6ff8:	f106 0904 	add.w	r9, r6, #4
   b6ffc:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b6ffe:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b7002:	f001 f93d 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b7006:	1a29      	subs	r1, r5, r0
   b7008:	2900      	cmp	r1, #0
   b700a:	ddeb      	ble.n	b6fe4 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b700c:	2200      	movs	r2, #0
   b700e:	b289      	uxth	r1, r1
   b7010:	4648      	mov	r0, r9
   b7012:	f7ff fdbe 	bl	b6b92 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b7016:	2800      	cmp	r0, #0
   b7018:	d0f3      	beq.n	b7002 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b701a:	2300      	movs	r3, #0
   b701c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7020:	e9cd 3300 	strd	r3, r3, [sp]
   b7024:	f10d 0217 	add.w	r2, sp, #23
   b7028:	4621      	mov	r1, r4
   b702a:	4630      	mov	r0, r6
   b702c:	f000 fb9a 	bl	b7764 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7030:	4605      	mov	r5, r0
   b7032:	2800      	cmp	r0, #0
   b7034:	d0e3      	beq.n	b6ffe <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b7036:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b703a:	2b01      	cmp	r3, #1
   b703c:	d9df      	bls.n	b6ffe <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b703e:	f894 a000 	ldrb.w	sl, [r4]
   b7042:	f1ba 0f02 	cmp.w	sl, #2
   b7046:	d1da      	bne.n	b6ffe <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b7048:	4648      	mov	r0, r9
   b704a:	f7ff fde7 	bl	b6c1c <_ZN10RHDatagram10headerFromEv>
   b704e:	4653      	mov	r3, sl
   b7050:	4602      	mov	r2, r0
   b7052:	4639      	mov	r1, r7
   b7054:	4630      	mov	r0, r6
   b7056:	f000 faf3 	bl	b7640 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b705a:	e7c4      	b.n	b6fe6 <_ZN6RHMesh5doArpEh+0x26>
   b705c:	2003e408 	.word	0x2003e408

000b7060 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b7060:	2a01      	cmp	r2, #1
{
   b7062:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7066:	4607      	mov	r7, r0
   b7068:	460e      	mov	r6, r1
   b706a:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b706c:	d93b      	bls.n	b70e6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b706e:	794d      	ldrb	r5, [r1, #5]
   b7070:	2d02      	cmp	r5, #2
   b7072:	d130      	bne.n	b70d6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b7074:	f100 0804 	add.w	r8, r0, #4
   b7078:	79c9      	ldrb	r1, [r1, #7]
   b707a:	9101      	str	r1, [sp, #4]
   b707c:	4640      	mov	r0, r8
   b707e:	f7ff fdcd 	bl	b6c1c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7082:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b7084:	462b      	mov	r3, r5
   b7086:	4602      	mov	r2, r0
   b7088:	9901      	ldr	r1, [sp, #4]
   b708a:	4638      	mov	r0, r7
   b708c:	f000 fad8 	bl	b7640 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b7090:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b7092:	f106 0308 	add.w	r3, r6, #8
   b7096:	2400      	movs	r4, #0
   b7098:	4622      	mov	r2, r4
   b709a:	4295      	cmp	r5, r2
   b709c:	f104 0401 	add.w	r4, r4, #1
   b70a0:	b2e4      	uxtb	r4, r4
   b70a2:	d904      	bls.n	b70ae <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b70a4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b70a8:	7a39      	ldrb	r1, [r7, #8]
   b70aa:	4291      	cmp	r1, r2
   b70ac:	d1f4      	bne.n	b7098 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b70ae:	f104 0108 	add.w	r1, r4, #8
   b70b2:	440e      	add	r6, r1
	while (i < numRoutes)
   b70b4:	42a5      	cmp	r5, r4
   b70b6:	d916      	bls.n	b70e6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b70b8:	f816 1b01 	ldrb.w	r1, [r6], #1
   b70bc:	9101      	str	r1, [sp, #4]
   b70be:	4640      	mov	r0, r8
   b70c0:	f7ff fdac 	bl	b6c1c <_ZN10RHDatagram10headerFromEv>
   b70c4:	3401      	adds	r4, #1
   b70c6:	4602      	mov	r2, r0
   b70c8:	9901      	ldr	r1, [sp, #4]
   b70ca:	2302      	movs	r3, #2
   b70cc:	4638      	mov	r0, r7
   b70ce:	b2e4      	uxtb	r4, r4
   b70d0:	f000 fab6 	bl	b7640 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b70d4:	e7ee      	b.n	b70b4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b70d6:	2d03      	cmp	r5, #3
   b70d8:	d105      	bne.n	b70e6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b70da:	7989      	ldrb	r1, [r1, #6]
}
   b70dc:	b002      	add	sp, #8
   b70de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b70e2:	f000 ba96 	b.w	b7612 <_ZN8RHRouter13deleteRouteToEh>
}
   b70e6:	b002      	add	sp, #8
   b70e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b70ec <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b70ec:	b510      	push	{r4, lr}
   b70ee:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b70f0:	f000 fae6 	bl	b76c0 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b70f4:	4b01      	ldr	r3, [pc, #4]	; (b70fc <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b70f6:	6023      	str	r3, [r4, #0]
}
   b70f8:	4620      	mov	r0, r4
   b70fa:	bd10      	pop	{r4, pc}
   b70fc:	000bcf60 	.word	0x000bcf60

000b7100 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7104:	2af9      	cmp	r2, #249	; 0xf9
{
   b7106:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b710a:	4606      	mov	r6, r0
   b710c:	460f      	mov	r7, r1
   b710e:	4614      	mov	r4, r2
   b7110:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7112:	d825      	bhi.n	b7160 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b7114:	2bff      	cmp	r3, #255	; 0xff
   b7116:	d114      	bne.n	b7142 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7118:	f8df 8048 	ldr.w	r8, [pc, #72]	; b7164 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b711c:	4640      	mov	r0, r8
   b711e:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7120:	4622      	mov	r2, r4
   b7122:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7124:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b7128:	f004 ff3c 	bl	bbfa4 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b712c:	1c62      	adds	r2, r4, #1
   b712e:	f8cd 9020 	str.w	r9, [sp, #32]
   b7132:	462b      	mov	r3, r5
   b7134:	4641      	mov	r1, r8
   b7136:	4630      	mov	r0, r6
   b7138:	b2d2      	uxtb	r2, r2
}
   b713a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b713e:	f000 bb07 	b.w	b7750 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b7142:	4619      	mov	r1, r3
   b7144:	f000 fa21 	bl	b758a <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b7148:	2800      	cmp	r0, #0
   b714a:	d1e5      	bne.n	b7118 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b714c:	6833      	ldr	r3, [r6, #0]
   b714e:	4629      	mov	r1, r5
   b7150:	689b      	ldr	r3, [r3, #8]
   b7152:	4630      	mov	r0, r6
   b7154:	4798      	blx	r3
   b7156:	2800      	cmp	r0, #0
   b7158:	d1de      	bne.n	b7118 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b715a:	2002      	movs	r0, #2
}
   b715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b7160:	2001      	movs	r0, #1
   b7162:	e7fb      	b.n	b715c <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b7164:	2003e408 	.word	0x2003e408

000b7168 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b7168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b716c:	b089      	sub	sp, #36	; 0x24
   b716e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b7170:	23fa      	movs	r3, #250	; 0xfa
   b7172:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7176:	f10d 031f 	add.w	r3, sp, #31
   b717a:	9303      	str	r3, [sp, #12]
   b717c:	f10d 031e 	add.w	r3, sp, #30
   b7180:	9302      	str	r3, [sp, #8]
   b7182:	4e5d      	ldr	r6, [pc, #372]	; (b72f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7184:	f10d 031d 	add.w	r3, sp, #29
   b7188:	9301      	str	r3, [sp, #4]
   b718a:	ab07      	add	r3, sp, #28
   b718c:	9300      	str	r3, [sp, #0]
{     
   b718e:	4689      	mov	r9, r1
   b7190:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7192:	f10d 031b 	add.w	r3, sp, #27
   b7196:	f10d 021a 	add.w	r2, sp, #26
   b719a:	4631      	mov	r1, r6
{     
   b719c:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b71a0:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b71a2:	f000 fadf 	bl	b7764 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b71a6:	4604      	mov	r4, r0
   b71a8:	b920      	cbnz	r0, b71b4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b71aa:	2400      	movs	r4, #0
}
   b71ac:	4620      	mov	r0, r4
   b71ae:	b009      	add	sp, #36	; 0x24
   b71b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b71b4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b71b8:	b373      	cbz	r3, b7218 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b71ba:	7832      	ldrb	r2, [r6, #0]
   b71bc:	bb62      	cbnz	r2, b7218 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b71be:	f1b8 0f00 	cmp.w	r8, #0
   b71c2:	d003      	beq.n	b71cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b71c4:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b71c8:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b71cc:	f1bb 0f00 	cmp.w	fp, #0
   b71d0:	d003      	beq.n	b71da <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b71d2:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b71d6:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b71da:	f1ba 0f00 	cmp.w	sl, #0
   b71de:	d003      	beq.n	b71e8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b71e0:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b71e4:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b71e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b71ea:	b11a      	cbz	r2, b71f4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b71ec:	9914      	ldr	r1, [sp, #80]	; 0x50
   b71ee:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b71f2:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b71f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b71f6:	b11a      	cbz	r2, b7200 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b71f8:	9915      	ldr	r1, [sp, #84]	; 0x54
   b71fa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b71fe:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7200:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7202:	493e      	ldr	r1, [pc, #248]	; (b72fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b7204:	3b01      	subs	r3, #1
   b7206:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b7208:	429a      	cmp	r2, r3
		*len = msgLen;
   b720a:	bf88      	it	hi
   b720c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b720e:	783a      	ldrb	r2, [r7, #0]
   b7210:	4648      	mov	r0, r9
   b7212:	f004 fec7 	bl	bbfa4 <memcpy>
	    return true;
   b7216:	e7c9      	b.n	b71ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b7218:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b721c:	2aff      	cmp	r2, #255	; 0xff
   b721e:	d1c4      	bne.n	b71aa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7220:	2b01      	cmp	r3, #1
   b7222:	d9c2      	bls.n	b71aa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b7224:	7832      	ldrb	r2, [r6, #0]
   b7226:	2a01      	cmp	r2, #1
   b7228:	d1bf      	bne.n	b71aa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b722a:	7a2a      	ldrb	r2, [r5, #8]
   b722c:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7230:	42a2      	cmp	r2, r4
   b7232:	d0ba      	beq.n	b71aa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b7234:	1edf      	subs	r7, r3, #3
   b7236:	4932      	ldr	r1, [pc, #200]	; (b7300 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b7238:	b2ff      	uxtb	r7, r7
   b723a:	2300      	movs	r3, #0
   b723c:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b7240:	4547      	cmp	r7, r8
   b7242:	d906      	bls.n	b7252 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b7244:	f811 0b01 	ldrb.w	r0, [r1], #1
   b7248:	4282      	cmp	r2, r0
   b724a:	f103 0301 	add.w	r3, r3, #1
   b724e:	d1f5      	bne.n	b723c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b7250:	e7ab      	b.n	b71aa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b7252:	f105 0904 	add.w	r9, r5, #4
   b7256:	4648      	mov	r0, r9
   b7258:	f7ff fce0 	bl	b6c1c <_ZN10RHDatagram10headerFromEv>
   b725c:	2302      	movs	r3, #2
   b725e:	4602      	mov	r2, r0
   b7260:	4621      	mov	r1, r4
   b7262:	4628      	mov	r0, r5
   b7264:	f000 f9ec 	bl	b7640 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b7268:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b726c:	b193      	cbz	r3, b7294 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b726e:	4c22      	ldr	r4, [pc, #136]	; (b72f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b7270:	1ba3      	subs	r3, r4, r6
   b7272:	b2db      	uxtb	r3, r3
   b7274:	429f      	cmp	r7, r3
   b7276:	d90c      	bls.n	b7292 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b7278:	78e1      	ldrb	r1, [r4, #3]
   b727a:	9105      	str	r1, [sp, #20]
   b727c:	4648      	mov	r0, r9
   b727e:	f7ff fccd 	bl	b6c1c <_ZN10RHDatagram10headerFromEv>
   b7282:	9905      	ldr	r1, [sp, #20]
   b7284:	4602      	mov	r2, r0
   b7286:	2302      	movs	r3, #2
   b7288:	4628      	mov	r0, r5
   b728a:	f000 f9d9 	bl	b7640 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b728e:	3401      	adds	r4, #1
   b7290:	e7ee      	b.n	b7270 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b7292:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b7294:	682b      	ldr	r3, [r5, #0]
   b7296:	7872      	ldrb	r2, [r6, #1]
   b7298:	68db      	ldr	r3, [r3, #12]
   b729a:	491a      	ldr	r1, [pc, #104]	; (b7304 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b729c:	4628      	mov	r0, r5
   b729e:	4798      	blx	r3
   b72a0:	4604      	mov	r4, r0
   b72a2:	b160      	cbz	r0, b72be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b72a4:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b72a6:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b72a8:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b72aa:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b72ae:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b72b2:	4911      	ldr	r1, [pc, #68]	; (b72f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b72b4:	9400      	str	r4, [sp, #0]
   b72b6:	4628      	mov	r0, r5
   b72b8:	f000 fa4a 	bl	b7750 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b72bc:	e776      	b.n	b71ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b72be:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b72c2:	4543      	cmp	r3, r8
   b72c4:	f67f af71 	bls.w	b71aa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b72c8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b72cc:	2b00      	cmp	r3, #0
   b72ce:	f43f af6c 	beq.w	b71aa <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b72d2:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b72d6:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72d8:	4907      	ldr	r1, [pc, #28]	; (b72f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b72da:	443e      	add	r6, r7
		tmpMessageLen++;
   b72dc:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b72de:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72e0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b72e4:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b72e6:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72e8:	9300      	str	r3, [sp, #0]
   b72ea:	4628      	mov	r0, r5
   b72ec:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b72ee:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b72f2:	f000 f9f7 	bl	b76e4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b72f6:	e759      	b.n	b71ac <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b72f8:	2003e408 	.word	0x2003e408
   b72fc:	2003e409 	.word	0x2003e409
   b7300:	2003e40b 	.word	0x2003e40b
   b7304:	2003e40a 	.word	0x2003e40a

000b7308 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b7308:	b5f0      	push	{r4, r5, r6, r7, lr}
   b730a:	b085      	sub	sp, #20
   b730c:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b730e:	3004      	adds	r0, #4
{
   b7310:	460e      	mov	r6, r1
   b7312:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b7314:	f7ff fc82 	bl	b6c1c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b7318:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b731a:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b731c:	4631      	mov	r1, r6
   b731e:	4628      	mov	r0, r5
   b7320:	f000 f94a 	bl	b75b8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7324:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b7326:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b7328:	d001      	beq.n	b732e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b732a:	2805      	cmp	r0, #5
   b732c:	d11b      	bne.n	b7366 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b732e:	7831      	ldrb	r1, [r6, #0]
   b7330:	4628      	mov	r0, r5
   b7332:	f000 f96e 	bl	b7612 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b7336:	7872      	ldrb	r2, [r6, #1]
   b7338:	7a2b      	ldrb	r3, [r5, #8]
   b733a:	429a      	cmp	r2, r3
   b733c:	d013      	beq.n	b7366 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b733e:	4c0b      	ldr	r4, [pc, #44]	; (b736c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b7340:	2303      	movs	r3, #3
   b7342:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b7344:	7833      	ldrb	r3, [r6, #0]
   b7346:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b7348:	7871      	ldrb	r1, [r6, #1]
   b734a:	2302      	movs	r3, #2
   b734c:	463a      	mov	r2, r7
   b734e:	4628      	mov	r0, r5
   b7350:	f000 f976 	bl	b7640 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b7354:	2300      	movs	r3, #0
   b7356:	9300      	str	r3, [sp, #0]
   b7358:	4621      	mov	r1, r4
   b735a:	7873      	ldrb	r3, [r6, #1]
   b735c:	2202      	movs	r2, #2
   b735e:	4628      	mov	r0, r5
   b7360:	f000 f9f6 	bl	b7750 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7364:	4604      	mov	r4, r0
}
   b7366:	4620      	mov	r0, r4
   b7368:	b005      	add	sp, #20
   b736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b736c:	2003e408 	.word	0x2003e408

000b7370 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7370:	b510      	push	{r4, lr}
   b7372:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b7374:	f7ff fc02 	bl	b6b7c <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7378:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b737a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b737c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b737e:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7380:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b7382:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b7384:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b7386:	f44f 7280 	mov.w	r2, #256	; 0x100
   b738a:	f104 0011 	add.w	r0, r4, #17
   b738e:	f004 fe31 	bl	bbff4 <memset>
}
   b7392:	4620      	mov	r0, r4
   b7394:	bd10      	pop	{r4, pc}

000b7396 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b7396:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7398:	4604      	mov	r4, r0
   b739a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b739c:	f7ff fc32 	bl	b6c04 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b73a0:	4620      	mov	r0, r4
   b73a2:	2200      	movs	r2, #0
   b73a4:	2180      	movs	r1, #128	; 0x80
   b73a6:	f7ff fc31 	bl	b6c0c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b73aa:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b73ac:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b73ae:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b73b2:	f10d 010f 	add.w	r1, sp, #15
   b73b6:	2201      	movs	r2, #1
   b73b8:	4620      	mov	r0, r4
   b73ba:	f7ff fbf4 	bl	b6ba6 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b73be:	4620      	mov	r0, r4
   b73c0:	f7ff fbe3 	bl	b6b8a <_ZN10RHDatagram14waitPacketSentEv>
}
   b73c4:	b004      	add	sp, #16
   b73c6:	bd10      	pop	{r4, pc}

000b73c8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b73c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b73cc:	7b05      	ldrb	r5, [r0, #12]
   b73ce:	3501      	adds	r5, #1
   b73d0:	b2ed      	uxtb	r5, r5
{
   b73d2:	b087      	sub	sp, #28
   b73d4:	4604      	mov	r4, r0
   b73d6:	4689      	mov	r9, r1
   b73d8:	4692      	mov	sl, r2
   b73da:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b73dc:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b73de:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b73e0:	7c22      	ldrb	r2, [r4, #16]
   b73e2:	463b      	mov	r3, r7
   b73e4:	429a      	cmp	r2, r3
   b73e6:	f107 0701 	add.w	r7, r7, #1
   b73ea:	b2ff      	uxtb	r7, r7
   b73ec:	d36b      	bcc.n	b74c6 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b73ee:	4629      	mov	r1, r5
   b73f0:	4620      	mov	r0, r4
   b73f2:	f7ff fc07 	bl	b6c04 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b73f6:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b73f8:	bf0d      	iteet	eq
   b73fa:	22c0      	moveq	r2, #192	; 0xc0
   b73fc:	2280      	movne	r2, #128	; 0x80
   b73fe:	2140      	movne	r1, #64	; 0x40
   b7400:	2100      	moveq	r1, #0
   b7402:	4620      	mov	r0, r4
   b7404:	f7ff fc02 	bl	b6c0c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b7408:	4643      	mov	r3, r8
   b740a:	4652      	mov	r2, sl
   b740c:	4649      	mov	r1, r9
   b740e:	4620      	mov	r0, r4
   b7410:	f7ff fbc9 	bl	b6ba6 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b7414:	4620      	mov	r0, r4
   b7416:	f7ff fbb8 	bl	b6b8a <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b741a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b741e:	d054      	beq.n	b74ca <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b7420:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b7422:	bf82      	ittt	hi
   b7424:	68a3      	ldrhi	r3, [r4, #8]
   b7426:	3301      	addhi	r3, #1
   b7428:	60a3      	strhi	r3, [r4, #8]
   b742a:	f000 ff29 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b742e:	f44f 7180 	mov.w	r1, #256	; 0x100
   b7432:	4683      	mov	fp, r0
   b7434:	2000      	movs	r0, #0
   b7436:	89e6      	ldrh	r6, [r4, #14]
   b7438:	f003 f9cf 	bl	ba7da <_Z6randomii>
   b743c:	4370      	muls	r0, r6
   b743e:	bf48      	it	mi
   b7440:	30ff      	addmi	r0, #255	; 0xff
   b7442:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b7446:	fa1b f686 	uxtah	r6, fp, r6
   b744a:	f000 ff19 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
   b744e:	1a30      	subs	r0, r6, r0
   b7450:	2800      	cmp	r0, #0
   b7452:	ddc5      	ble.n	b73e0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b7454:	b281      	uxth	r1, r0
   b7456:	2200      	movs	r2, #0
   b7458:	4620      	mov	r0, r4
   b745a:	f7ff fb9a 	bl	b6b92 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b745e:	2800      	cmp	r0, #0
   b7460:	d0f3      	beq.n	b744a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b7462:	f10d 0317 	add.w	r3, sp, #23
   b7466:	9302      	str	r3, [sp, #8]
   b7468:	f10d 0316 	add.w	r3, sp, #22
   b746c:	9301      	str	r3, [sp, #4]
   b746e:	2200      	movs	r2, #0
   b7470:	f10d 0315 	add.w	r3, sp, #21
   b7474:	9300      	str	r3, [sp, #0]
   b7476:	4611      	mov	r1, r2
   b7478:	ab05      	add	r3, sp, #20
   b747a:	4620      	mov	r0, r4
   b747c:	f7ff fbda 	bl	b6c34 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7480:	2800      	cmp	r0, #0
   b7482:	d0e2      	beq.n	b744a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7484:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7488:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b748c:	4542      	cmp	r2, r8
   b748e:	d10e      	bne.n	b74ae <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b7490:	f894 c004 	ldrb.w	ip, [r4, #4]
   b7494:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7498:	458c      	cmp	ip, r1
   b749a:	d108      	bne.n	b74ae <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b749c:	2b00      	cmp	r3, #0
   b749e:	da08      	bge.n	b74b2 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b74a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b74a4:	42ab      	cmp	r3, r5
   b74a6:	d1d0      	bne.n	b744a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b74a8:	b007      	add	sp, #28
   b74aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b74ae:	2b00      	cmp	r3, #0
   b74b0:	dbcb      	blt.n	b744a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b74b2:	18a1      	adds	r1, r4, r2
   b74b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b74b8:	7c49      	ldrb	r1, [r1, #17]
   b74ba:	4299      	cmp	r1, r3
   b74bc:	d1c5      	bne.n	b744a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b74be:	4620      	mov	r0, r4
   b74c0:	f7ff ff69 	bl	b7396 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b74c4:	e7c1      	b.n	b744a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b74c6:	2000      	movs	r0, #0
   b74c8:	e7ee      	b.n	b74a8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b74ca:	2001      	movs	r0, #1
   b74cc:	e7ec      	b.n	b74a8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b74ce <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b74ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b74d2:	b089      	sub	sp, #36	; 0x24
   b74d4:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b74d8:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b74dc:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b74de:	4604      	mov	r4, r0
   b74e0:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b74e2:	f7ff fb4e 	bl	b6b82 <_ZN10RHDatagram9availableEv>
   b74e6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b74ea:	b920      	cbnz	r0, b74f6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b74ec:	2500      	movs	r5, #0
}
   b74ee:	4628      	mov	r0, r5
   b74f0:	b009      	add	sp, #36	; 0x24
   b74f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b74f6:	f10d 031f 	add.w	r3, sp, #31
   b74fa:	9302      	str	r3, [sp, #8]
   b74fc:	f10d 031e 	add.w	r3, sp, #30
   b7500:	9301      	str	r3, [sp, #4]
   b7502:	f10d 031d 	add.w	r3, sp, #29
   b7506:	9300      	str	r3, [sp, #0]
   b7508:	4620      	mov	r0, r4
   b750a:	ab07      	add	r3, sp, #28
   b750c:	f7ff fb92 	bl	b6c34 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7510:	4605      	mov	r5, r0
   b7512:	2800      	cmp	r0, #0
   b7514:	d0ea      	beq.n	b74ec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b7516:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b751a:	2b00      	cmp	r3, #0
   b751c:	dbe6      	blt.n	b74ec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b751e:	7922      	ldrb	r2, [r4, #4]
   b7520:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b7524:	429a      	cmp	r2, r3
   b7526:	d106      	bne.n	b7536 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b7528:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b752c:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b7530:	4620      	mov	r0, r4
   b7532:	f7ff ff30 	bl	b7396 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b7536:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b753a:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b753e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7542:	f012 0f40 	tst.w	r2, #64	; 0x40
   b7546:	440c      	add	r4, r1
   b7548:	d002      	beq.n	b7550 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b754a:	7c60      	ldrb	r0, [r4, #17]
   b754c:	4298      	cmp	r0, r3
   b754e:	d0cd      	beq.n	b74ec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7550:	b106      	cbz	r6, b7554 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b7552:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b7554:	f1b9 0f00 	cmp.w	r9, #0
   b7558:	d003      	beq.n	b7562 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b755a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b755e:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b7562:	f1b8 0f00 	cmp.w	r8, #0
   b7566:	d001      	beq.n	b756c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b7568:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b756c:	b107      	cbz	r7, b7570 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b756e:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b7570:	7463      	strb	r3, [r4, #17]
		return true;
   b7572:	e7bc      	b.n	b74ee <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b7574 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b7574:	4770      	bx	lr

000b7576 <_ZN8RHRouter4initEv>:
{
   b7576:	b510      	push	{r4, lr}
   b7578:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b757a:	3004      	adds	r0, #4
   b757c:	f7ff fb34 	bl	b6be8 <_ZN10RHDatagram4initEv>
    if (ret)
   b7580:	b110      	cbz	r0, b7588 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b7582:	231e      	movs	r3, #30
   b7584:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b7588:	bd10      	pop	{r4, pc}

000b758a <_ZN8RHRouter10getRouteToEh>:
{
   b758a:	b510      	push	{r4, lr}
   b758c:	4602      	mov	r2, r0
   b758e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b7590:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b7594:	428c      	cmp	r4, r1
   b7596:	d108      	bne.n	b75aa <_ZN8RHRouter10getRouteToEh+0x20>
   b7598:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b759c:	b12c      	cbz	r4, b75aa <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b759e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b75a2:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b75a6:	4418      	add	r0, r3
}
   b75a8:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b75aa:	3301      	adds	r3, #1
   b75ac:	2b32      	cmp	r3, #50	; 0x32
   b75ae:	f102 0203 	add.w	r2, r2, #3
   b75b2:	d1ed      	bne.n	b7590 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b75b4:	2000      	movs	r0, #0
   b75b6:	e7f7      	b.n	b75a8 <_ZN8RHRouter10getRouteToEh+0x1e>

000b75b8 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b75b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b75ba:	780b      	ldrb	r3, [r1, #0]
   b75bc:	2bff      	cmp	r3, #255	; 0xff
{
   b75be:	4605      	mov	r5, r0
   b75c0:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b75c2:	d006      	beq.n	b75d2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b75c4:	4619      	mov	r1, r3
   b75c6:	9201      	str	r2, [sp, #4]
   b75c8:	f7ff ffdf 	bl	b758a <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b75cc:	b158      	cbz	r0, b75e6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b75ce:	7843      	ldrb	r3, [r0, #1]
   b75d0:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b75d2:	4621      	mov	r1, r4
   b75d4:	1d28      	adds	r0, r5, #4
   b75d6:	f7ff fef7 	bl	b73c8 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b75da:	2800      	cmp	r0, #0
   b75dc:	bf14      	ite	ne
   b75de:	2000      	movne	r0, #0
   b75e0:	2005      	moveq	r0, #5
}
   b75e2:	b003      	add	sp, #12
   b75e4:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b75e6:	2002      	movs	r0, #2
   b75e8:	e7fb      	b.n	b75e2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b75ea <_ZN8RHRouter11deleteRouteEh>:
{
   b75ea:	b510      	push	{r4, lr}
   b75ec:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b75f0:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b75f2:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b75f6:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b75fa:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b75fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b7602:	4421      	add	r1, r4
   b7604:	4420      	add	r0, r4
   b7606:	f004 fccd 	bl	bbfa4 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b760a:	2300      	movs	r3, #0
   b760c:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b7610:	bd10      	pop	{r4, pc}

000b7612 <_ZN8RHRouter13deleteRouteToEh>:
{
   b7612:	b538      	push	{r3, r4, r5, lr}
   b7614:	460a      	mov	r2, r1
   b7616:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b7618:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b761c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b7620:	b2d9      	uxtb	r1, r3
   b7622:	5d65      	ldrb	r5, [r4, r5]
   b7624:	4295      	cmp	r5, r2
   b7626:	d103      	bne.n	b7630 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b7628:	f7ff ffdf 	bl	b75ea <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b762c:	2001      	movs	r0, #1
}
   b762e:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7630:	3301      	adds	r3, #1
   b7632:	2b32      	cmp	r3, #50	; 0x32
   b7634:	d1f2      	bne.n	b761c <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b7636:	2000      	movs	r0, #0
   b7638:	e7f9      	b.n	b762e <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b763a <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b763a:	2100      	movs	r1, #0
   b763c:	f7ff bfd5 	b.w	b75ea <_ZN8RHRouter11deleteRouteEh>

000b7640 <_ZN8RHRouter10addRouteToEhhh>:
{
   b7640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7642:	4616      	mov	r6, r2
   b7644:	461f      	mov	r7, r3
   b7646:	4604      	mov	r4, r0
   b7648:	460d      	mov	r5, r1
   b764a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b764c:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7650:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7654:	5c11      	ldrb	r1, [r2, r0]
   b7656:	42a9      	cmp	r1, r5
   b7658:	d105      	bne.n	b7666 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b765a:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b765c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7660:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7666:	3301      	adds	r3, #1
   b7668:	2b32      	cmp	r3, #50	; 0x32
   b766a:	d1f1      	bne.n	b7650 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b766c:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b766e:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b7672:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7676:	5c11      	ldrb	r1, [r2, r0]
   b7678:	b919      	cbnz	r1, b7682 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b767a:	4420      	add	r0, r4
   b767c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b7680:	e7ec      	b.n	b765c <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7682:	3301      	adds	r3, #1
   b7684:	2b32      	cmp	r3, #50	; 0x32
   b7686:	d1f4      	bne.n	b7672 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b7688:	4620      	mov	r0, r4
   b768a:	f7ff ffd6 	bl	b763a <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b768e:	4620      	mov	r0, r4
   b7690:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b7694:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b7698:	b92a      	cbnz	r2, b76a6 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b769a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b769e:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b76a2:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b76a6:	3003      	adds	r0, #3
   b76a8:	4298      	cmp	r0, r3
   b76aa:	d1f3      	bne.n	b7694 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b76ac:	e7da      	b.n	b7664 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b76ae <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b76ae:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b76b2:	2200      	movs	r2, #0
   b76b4:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b76b8:	3003      	adds	r0, #3
   b76ba:	4298      	cmp	r0, r3
   b76bc:	d1fa      	bne.n	b76b4 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b76be:	4770      	bx	lr

000b76c0 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b76c0:	b510      	push	{r4, lr}
   b76c2:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b76c4:	3004      	adds	r0, #4
   b76c6:	f7ff fe53 	bl	b7370 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b76ca:	4b05      	ldr	r3, [pc, #20]	; (b76e0 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b76cc:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b76ce:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b76d2:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b76d4:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b76d8:	f7ff ffe9 	bl	b76ae <_ZN8RHRouter17clearRoutingTableEv>
}
   b76dc:	4620      	mov	r0, r4
   b76de:	bd10      	pop	{r4, pc}
   b76e0:	000bcf78 	.word	0x000bcf78

000b76e4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b76e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b76e8:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76ea:	6840      	ldr	r0, [r0, #4]
{
   b76ec:	9101      	str	r1, [sp, #4]
   b76ee:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76f0:	6803      	ldr	r3, [r0, #0]
{
   b76f2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76f6:	699b      	ldr	r3, [r3, #24]
{
   b76f8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b76fc:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b76fe:	4798      	blx	r3
   b7700:	f106 0805 	add.w	r8, r6, #5
   b7704:	4580      	cmp	r8, r0
   b7706:	d81c      	bhi.n	b7742 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b7708:	4d10      	ldr	r5, [pc, #64]	; (b774c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b770a:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b770c:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b7710:	2300      	movs	r3, #0
   b7712:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b7714:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b7718:	70eb      	strb	r3, [r5, #3]
   b771a:	1c5a      	adds	r2, r3, #1
   b771c:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b7720:	1d68      	adds	r0, r5, #5
   b7722:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b7724:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b7726:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b772a:	f004 fc3b 	bl	bbfa4 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b772e:	6823      	ldr	r3, [r4, #0]
   b7730:	685b      	ldr	r3, [r3, #4]
   b7732:	fa5f f288 	uxtb.w	r2, r8
   b7736:	4629      	mov	r1, r5
   b7738:	4620      	mov	r0, r4
}
   b773a:	b002      	add	sp, #8
   b773c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7740:	4718      	bx	r3
}
   b7742:	2001      	movs	r0, #1
   b7744:	b002      	add	sp, #8
   b7746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b774a:	bf00      	nop
   b774c:	2003e502 	.word	0x2003e502

000b7750 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b7750:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b7752:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7756:	9401      	str	r4, [sp, #4]
   b7758:	7a04      	ldrb	r4, [r0, #8]
   b775a:	9400      	str	r4, [sp, #0]
   b775c:	f7ff ffc2 	bl	b76e4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b7760:	b002      	add	sp, #8
   b7762:	bd10      	pop	{r4, pc}

000b7764 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7768:	b087      	sub	sp, #28
   b776a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b776c:	23ff      	movs	r3, #255	; 0xff
   b776e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7772:	f10d 0317 	add.w	r3, sp, #23
   b7776:	9302      	str	r3, [sp, #8]
   b7778:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b784c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b777c:	f10d 0316 	add.w	r3, sp, #22
   b7780:	9301      	str	r3, [sp, #4]
   b7782:	f10d 0315 	add.w	r3, sp, #21
   b7786:	9300      	str	r3, [sp, #0]
{  
   b7788:	4604      	mov	r4, r0
   b778a:	4688      	mov	r8, r1
   b778c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b778e:	ab05      	add	r3, sp, #20
   b7790:	f10d 0213 	add.w	r2, sp, #19
   b7794:	4649      	mov	r1, r9
   b7796:	3004      	adds	r0, #4
{  
   b7798:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b779c:	f7ff fe97 	bl	b74ce <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b77a0:	4605      	mov	r5, r0
   b77a2:	b908      	cbnz	r0, b77a8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b77a4:	2500      	movs	r5, #0
   b77a6:	e038      	b.n	b781a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b77a8:	6823      	ldr	r3, [r4, #0]
   b77aa:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b77ae:	681b      	ldr	r3, [r3, #0]
   b77b0:	4649      	mov	r1, r9
   b77b2:	4620      	mov	r0, r4
   b77b4:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b77b6:	f899 3000 	ldrb.w	r3, [r9]
   b77ba:	7a22      	ldrb	r2, [r4, #8]
   b77bc:	429a      	cmp	r2, r3
   b77be:	d001      	beq.n	b77c4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b77c0:	2bff      	cmp	r3, #255	; 0xff
   b77c2:	d12e      	bne.n	b7822 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b77c4:	b117      	cbz	r7, b77cc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b77c6:	4b21      	ldr	r3, [pc, #132]	; (b784c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77c8:	785b      	ldrb	r3, [r3, #1]
   b77ca:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b77cc:	f1bb 0f00 	cmp.w	fp, #0
   b77d0:	d003      	beq.n	b77da <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b77d2:	4b1e      	ldr	r3, [pc, #120]	; (b784c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77d4:	781b      	ldrb	r3, [r3, #0]
   b77d6:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b77da:	f1ba 0f00 	cmp.w	sl, #0
   b77de:	d003      	beq.n	b77e8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b77e0:	4b1a      	ldr	r3, [pc, #104]	; (b784c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77e2:	78db      	ldrb	r3, [r3, #3]
   b77e4:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b77e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b77ea:	b11b      	cbz	r3, b77f4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b77ec:	4b17      	ldr	r3, [pc, #92]	; (b784c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b77f0:	791b      	ldrb	r3, [r3, #4]
   b77f2:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b77f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b77f6:	b11b      	cbz	r3, b7800 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b77f8:	4b14      	ldr	r3, [pc, #80]	; (b784c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b77fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b77fc:	789b      	ldrb	r3, [r3, #2]
   b77fe:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7800:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b7804:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7806:	4912      	ldr	r1, [pc, #72]	; (b7850 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b7808:	3b05      	subs	r3, #5
   b780a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b780c:	429a      	cmp	r2, r3
		*len = msgLen;
   b780e:	bf88      	it	hi
   b7810:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b7812:	7832      	ldrb	r2, [r6, #0]
   b7814:	4640      	mov	r0, r8
   b7816:	f004 fbc5 	bl	bbfa4 <memcpy>
}
   b781a:	4628      	mov	r0, r5
   b781c:	b007      	add	sp, #28
   b781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b7822:	f899 3002 	ldrb.w	r3, [r9, #2]
   b7826:	1c5a      	adds	r2, r3, #1
   b7828:	f889 2002 	strb.w	r2, [r9, #2]
   b782c:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b7830:	429a      	cmp	r2, r3
   b7832:	d9b7      	bls.n	b77a4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b7834:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b7838:	2b00      	cmp	r3, #0
   b783a:	d0b3      	beq.n	b77a4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b783c:	6823      	ldr	r3, [r4, #0]
   b783e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7842:	685b      	ldr	r3, [r3, #4]
   b7844:	4649      	mov	r1, r9
   b7846:	4620      	mov	r0, r4
   b7848:	4798      	blx	r3
   b784a:	e7ab      	b.n	b77a4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b784c:	2003e502 	.word	0x2003e502
   b7850:	2003e507 	.word	0x2003e507

000b7854 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7854:	b510      	push	{r4, lr}
   b7856:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7858:	6a00      	ldr	r0, [r0, #32]
   b785a:	6803      	ldr	r3, [r0, #0]
   b785c:	68db      	ldr	r3, [r3, #12]
   b785e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b7860:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7864:	28ff      	cmp	r0, #255	; 0xff
   b7866:	d002      	beq.n	b786e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7868:	2101      	movs	r1, #1
   b786a:	f003 fd83 	bl	bb374 <pinMode>

    deselectSlave();
   b786e:	6823      	ldr	r3, [r4, #0]
   b7870:	4620      	mov	r0, r4
   b7872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7874:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b7876:	2064      	movs	r0, #100	; 0x64
   b7878:	f001 f866 	bl	b8948 <delay>
#endif
    
    return true;
}
   b787c:	2001      	movs	r0, #1
   b787e:	bd10      	pop	{r4, pc}

000b7880 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b7880:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7884:	2100      	movs	r1, #0
   b7886:	f003 bd86 	b.w	bb396 <digitalWrite>

000b788a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b788a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b788e:	2101      	movs	r1, #1
   b7890:	f003 bd81 	b.w	bb396 <digitalWrite>

000b7894 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b7894:	b570      	push	{r4, r5, r6, lr}
   b7896:	4604      	mov	r4, r0
   b7898:	460d      	mov	r5, r1
   b789a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b789c:	f7ff fa7e 	bl	b6d9c <_ZN15RHGenericDriverC1Ev>
   b78a0:	4b03      	ldr	r3, [pc, #12]	; (b78b0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b78a2:	6023      	str	r3, [r4, #0]
   b78a4:	6226      	str	r6, [r4, #32]
   b78a6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b78aa:	4620      	mov	r0, r4
   b78ac:	bd70      	pop	{r4, r5, r6, pc}
   b78ae:	bf00      	nop
   b78b0:	000bcf88 	.word	0x000bcf88

000b78b4 <_ZN11RHSPIDriver7spiReadEh>:
{
   b78b4:	b538      	push	{r3, r4, r5, lr}
   b78b6:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b78b8:	6a00      	ldr	r0, [r0, #32]
   b78ba:	6803      	ldr	r3, [r0, #0]
   b78bc:	6a1b      	ldr	r3, [r3, #32]
{
   b78be:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b78c0:	4798      	blx	r3
    selectSlave();
   b78c2:	6823      	ldr	r3, [r4, #0]
   b78c4:	4620      	mov	r0, r4
   b78c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b78c8:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b78ca:	6a20      	ldr	r0, [r4, #32]
   b78cc:	6803      	ldr	r3, [r0, #0]
   b78ce:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b78d2:	681b      	ldr	r3, [r3, #0]
   b78d4:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b78d6:	6a20      	ldr	r0, [r4, #32]
   b78d8:	6803      	ldr	r3, [r0, #0]
   b78da:	2100      	movs	r1, #0
   b78dc:	681b      	ldr	r3, [r3, #0]
   b78de:	4798      	blx	r3
    deselectSlave();
   b78e0:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b78e2:	4605      	mov	r5, r0
    deselectSlave();
   b78e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b78e6:	4620      	mov	r0, r4
   b78e8:	4798      	blx	r3
    _spi.endTransaction();
   b78ea:	6a20      	ldr	r0, [r4, #32]
   b78ec:	6803      	ldr	r3, [r0, #0]
   b78ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b78f0:	4798      	blx	r3
}
   b78f2:	4628      	mov	r0, r5
   b78f4:	bd38      	pop	{r3, r4, r5, pc}

000b78f6 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b78f6:	b570      	push	{r4, r5, r6, lr}
   b78f8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b78fa:	6a00      	ldr	r0, [r0, #32]
   b78fc:	6803      	ldr	r3, [r0, #0]
   b78fe:	6a1b      	ldr	r3, [r3, #32]
{
   b7900:	4616      	mov	r6, r2
   b7902:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7904:	4798      	blx	r3
    selectSlave();
   b7906:	6823      	ldr	r3, [r4, #0]
   b7908:	4620      	mov	r0, r4
   b790a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b790c:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b790e:	6a20      	ldr	r0, [r4, #32]
   b7910:	6803      	ldr	r3, [r0, #0]
   b7912:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b7916:	681b      	ldr	r3, [r3, #0]
   b7918:	4798      	blx	r3
   b791a:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b791c:	6a20      	ldr	r0, [r4, #32]
   b791e:	6803      	ldr	r3, [r0, #0]
   b7920:	4631      	mov	r1, r6
   b7922:	681b      	ldr	r3, [r3, #0]
   b7924:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7926:	2001      	movs	r0, #1
   b7928:	f000 fca2 	bl	b8270 <HAL_Delay_Microseconds>
    deselectSlave();
   b792c:	6823      	ldr	r3, [r4, #0]
   b792e:	4620      	mov	r0, r4
   b7930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7932:	4798      	blx	r3
    _spi.endTransaction();
   b7934:	6a20      	ldr	r0, [r4, #32]
   b7936:	6803      	ldr	r3, [r0, #0]
   b7938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b793a:	4798      	blx	r3
}
   b793c:	4628      	mov	r0, r5
   b793e:	bd70      	pop	{r4, r5, r6, pc}

000b7940 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b7940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7942:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7944:	6a00      	ldr	r0, [r0, #32]
{
   b7946:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7948:	6803      	ldr	r3, [r0, #0]
   b794a:	6a1b      	ldr	r3, [r3, #32]
{
   b794c:	460f      	mov	r7, r1
   b794e:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7950:	4798      	blx	r3
    selectSlave();
   b7952:	6823      	ldr	r3, [r4, #0]
   b7954:	4620      	mov	r0, r4
   b7956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7958:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b795a:	6a20      	ldr	r0, [r4, #32]
   b795c:	6803      	ldr	r3, [r0, #0]
   b795e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b7962:	681b      	ldr	r3, [r3, #0]
   b7964:	4798      	blx	r3
   b7966:	442e      	add	r6, r5
   b7968:	4607      	mov	r7, r0
    while (len--)
   b796a:	42b5      	cmp	r5, r6
   b796c:	d007      	beq.n	b797e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b796e:	6a20      	ldr	r0, [r4, #32]
   b7970:	6803      	ldr	r3, [r0, #0]
   b7972:	2100      	movs	r1, #0
   b7974:	681b      	ldr	r3, [r3, #0]
   b7976:	4798      	blx	r3
   b7978:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b797c:	e7f5      	b.n	b796a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b797e:	6823      	ldr	r3, [r4, #0]
   b7980:	4620      	mov	r0, r4
   b7982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7984:	4798      	blx	r3
    _spi.endTransaction();
   b7986:	6a20      	ldr	r0, [r4, #32]
   b7988:	6803      	ldr	r3, [r0, #0]
   b798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b798c:	4798      	blx	r3
}
   b798e:	4638      	mov	r0, r7
   b7990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7992 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b7992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7994:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7996:	6a00      	ldr	r0, [r0, #32]
{
   b7998:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b799a:	6803      	ldr	r3, [r0, #0]
   b799c:	6a1b      	ldr	r3, [r3, #32]
{
   b799e:	460f      	mov	r7, r1
   b79a0:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b79a2:	4798      	blx	r3
    selectSlave();
   b79a4:	6823      	ldr	r3, [r4, #0]
   b79a6:	4620      	mov	r0, r4
   b79a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b79aa:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b79ac:	6a20      	ldr	r0, [r4, #32]
   b79ae:	6803      	ldr	r3, [r0, #0]
   b79b0:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b79b4:	681b      	ldr	r3, [r3, #0]
   b79b6:	4798      	blx	r3
   b79b8:	442e      	add	r6, r5
   b79ba:	4607      	mov	r7, r0
    while (len--)
   b79bc:	42b5      	cmp	r5, r6
   b79be:	d006      	beq.n	b79ce <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b79c0:	6a20      	ldr	r0, [r4, #32]
   b79c2:	f815 1b01 	ldrb.w	r1, [r5], #1
   b79c6:	6803      	ldr	r3, [r0, #0]
   b79c8:	681b      	ldr	r3, [r3, #0]
   b79ca:	4798      	blx	r3
    while (len--)
   b79cc:	e7f6      	b.n	b79bc <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b79ce:	6823      	ldr	r3, [r4, #0]
   b79d0:	4620      	mov	r0, r4
   b79d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b79d4:	4798      	blx	r3
    _spi.endTransaction();
   b79d6:	6a20      	ldr	r0, [r4, #32]
   b79d8:	6803      	ldr	r3, [r0, #0]
   b79da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b79dc:	4798      	blx	r3
}
   b79de:	4638      	mov	r0, r7
   b79e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79e2 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b79e2:	6a00      	ldr	r0, [r0, #32]
   b79e4:	6803      	ldr	r3, [r0, #0]
   b79e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b79e8:	4718      	bx	r3

000b79ea <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b79ea:	2001      	movs	r0, #1
   b79ec:	4770      	bx	lr

000b79ee <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b79ee:	20fb      	movs	r0, #251	; 0xfb
   b79f0:	4770      	bx	lr

000b79f2 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b79f2:	4770      	bx	lr

000b79f4 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b79f4:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b79f6:	7903      	ldrb	r3, [r0, #4]
   b79f8:	2b05      	cmp	r3, #5
{
   b79fa:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b79fc:	d010      	beq.n	b7a20 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b79fe:	6803      	ldr	r3, [r0, #0]
   b7a00:	2105      	movs	r1, #5
   b7a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7a06:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b7a08:	2207      	movs	r2, #7
   b7a0a:	2101      	movs	r1, #1
   b7a0c:	4620      	mov	r0, r4
   b7a0e:	f7ff ff72 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b7a12:	2280      	movs	r2, #128	; 0x80
   b7a14:	2140      	movs	r1, #64	; 0x40
   b7a16:	4620      	mov	r0, r4
   b7a18:	f7ff ff6d 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b7a1c:	2305      	movs	r3, #5
   b7a1e:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b7a20:	7923      	ldrb	r3, [r4, #4]
   b7a22:	2b05      	cmp	r3, #5
   b7a24:	d0fc      	beq.n	b7a20 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b7a26:	7e20      	ldrb	r0, [r4, #24]
}
   b7a28:	bd10      	pop	{r4, pc}

000b7a2a <_ZN7RH_RF95D0Ev>:
   b7a2a:	b510      	push	{r4, lr}
   b7a2c:	f44f 7198 	mov.w	r1, #304	; 0x130
   b7a30:	4604      	mov	r4, r0
   b7a32:	f7fc fb34 	bl	b409e <_ZdlPvj>
   b7a36:	4620      	mov	r0, r4
   b7a38:	bd10      	pop	{r4, pc}

000b7a3a <_ZN7RH_RF955sleepEv>:
{
   b7a3a:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b7a3c:	7903      	ldrb	r3, [r0, #4]
   b7a3e:	2b01      	cmp	r3, #1
{
   b7a40:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b7a42:	d00b      	beq.n	b7a5c <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b7a44:	6803      	ldr	r3, [r0, #0]
   b7a46:	2101      	movs	r1, #1
   b7a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7a4c:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b7a4e:	2200      	movs	r2, #0
   b7a50:	2101      	movs	r1, #1
   b7a52:	4620      	mov	r0, r4
   b7a54:	f7ff ff4f 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b7a58:	2301      	movs	r3, #1
   b7a5a:	7123      	strb	r3, [r4, #4]
}
   b7a5c:	2001      	movs	r0, #1
   b7a5e:	bd10      	pop	{r4, pc}

000b7a60 <_ZN7RH_RF954recvEPhS0_>:
{
   b7a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b7a62:	6803      	ldr	r3, [r0, #0]
   b7a64:	68db      	ldr	r3, [r3, #12]
{
   b7a66:	4604      	mov	r4, r0
   b7a68:	460f      	mov	r7, r1
   b7a6a:	4615      	mov	r5, r2
    if (!available())
   b7a6c:	4798      	blx	r3
   b7a6e:	4606      	mov	r6, r0
   b7a70:	b1b0      	cbz	r0, b7aa0 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b7a72:	b187      	cbz	r7, b7a96 <_ZN7RH_RF954recvEPhS0_+0x36>
   b7a74:	b17d      	cbz	r5, b7a96 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b7a76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b7a7a:	782a      	ldrb	r2, [r5, #0]
   b7a7c:	3b03      	subs	r3, #3
   b7a7e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b7a80:	bfde      	ittt	le
   b7a82:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b7a86:	3b04      	suble	r3, #4
   b7a88:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b7a8a:	782a      	ldrb	r2, [r5, #0]
   b7a8c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b7a90:	4638      	mov	r0, r7
   b7a92:	f004 fa87 	bl	bbfa4 <memcpy>
    _rxBufValid = false;
   b7a96:	2300      	movs	r3, #0
   b7a98:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7a9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b7aa0:	4630      	mov	r0, r6
   b7aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7aa4 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b7aa4:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b7aa6:	b538      	push	{r3, r4, r5, lr}
   b7aa8:	4605      	mov	r5, r0
   b7aaa:	460c      	mov	r4, r1
	if (power > 20)
   b7aac:	dc14      	bgt.n	b7ad8 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b7aae:	2901      	cmp	r1, #1
   b7ab0:	dd14      	ble.n	b7adc <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b7ab2:	2911      	cmp	r1, #17
   b7ab4:	dd13      	ble.n	b7ade <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b7ab6:	2207      	movs	r2, #7
   b7ab8:	214d      	movs	r1, #77	; 0x4d
   b7aba:	4628      	mov	r0, r5
   b7abc:	f7ff ff1b 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b7ac0:	3c03      	subs	r4, #3
   b7ac2:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7ac4:	1ea2      	subs	r2, r4, #2
   b7ac6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b7aca:	4628      	mov	r0, r5
   b7acc:	b2d2      	uxtb	r2, r2
}
   b7ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7ad2:	2109      	movs	r1, #9
   b7ad4:	f7ff bf0f 	b.w	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b7ad8:	2414      	movs	r4, #20
   b7ada:	e7ec      	b.n	b7ab6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b7adc:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7ade:	2204      	movs	r2, #4
   b7ae0:	214d      	movs	r1, #77	; 0x4d
   b7ae2:	4628      	mov	r0, r5
   b7ae4:	f7ff ff07 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
   b7ae8:	e7ec      	b.n	b7ac4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b7aec <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b7aec:	b538      	push	{r3, r4, r5, lr}
   b7aee:	4604      	mov	r4, r0
   b7af0:	4615      	mov	r5, r2
    _rxBufValid(0)
   b7af2:	461a      	mov	r2, r3
   b7af4:	f7ff fece 	bl	b7894 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b7af8:	4b09      	ldr	r3, [pc, #36]	; (b7b20 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b7afa:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b7afc:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b7afe:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b7b00:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b7b04:	2201      	movs	r2, #1
    _rxBufValid(0)
   b7b06:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b7b0a:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b7b0e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b7b12:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b7b16:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b7b1a:	4620      	mov	r0, r4
   b7b1c:	bd38      	pop	{r3, r4, r5, pc}
   b7b1e:	bf00      	nop
   b7b20:	000bd020 	.word	0x000bd020

000b7b24 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b7b24:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b7b28:	2b03      	cmp	r3, #3
   b7b2a:	d91b      	bls.n	b7b64 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b7b2c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b7b30:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b7b32:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b7b36:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b7b38:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b7b3c:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b7b3e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b7b42:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b7b44:	7983      	ldrb	r3, [r0, #6]
   b7b46:	b933      	cbnz	r3, b7b56 <_ZN7RH_RF9513validateRxBufEv+0x32>
   b7b48:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b7b4a:	7942      	ldrb	r2, [r0, #5]
   b7b4c:	429a      	cmp	r2, r3
   b7b4e:	d002      	beq.n	b7b56 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b7b50:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b7b52:	2bff      	cmp	r3, #255	; 0xff
   b7b54:	d106      	bne.n	b7b64 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b7b56:	8a83      	ldrh	r3, [r0, #20]
   b7b58:	3301      	adds	r3, #1
   b7b5a:	b29b      	uxth	r3, r3
   b7b5c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b7b5e:	2301      	movs	r3, #1
   b7b60:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b7b64:	4770      	bx	lr
	...

000b7b68 <_ZN7RH_RF9512setFrequencyEf>:
{
   b7b68:	b538      	push	{r3, r4, r5, lr}
   b7b6a:	4604      	mov	r4, r0
   b7b6c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b70:	ee10 0a10 	vmov	r0, s0
{
   b7b74:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b78:	f003 fe72 	bl	bb860 <__aeabi_f2d>
   b7b7c:	a317      	add	r3, pc, #92	; (adr r3, b7bdc <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b7b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b82:	f003 fec5 	bl	bb910 <__aeabi_dmul>
   b7b86:	a317      	add	r3, pc, #92	; (adr r3, b7be4 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b7b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7b8c:	f003 ffea 	bl	bbb64 <__aeabi_ddiv>
   b7b90:	f004 f996 	bl	bbec0 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7b94:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7b96:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7b98:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	f7ff feaa 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b7ba2:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b7ba6:	2107      	movs	r1, #7
   b7ba8:	4620      	mov	r0, r4
   b7baa:	f7ff fea4 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b7bae:	b2ea      	uxtb	r2, r5
   b7bb0:	2108      	movs	r1, #8
   b7bb2:	4620      	mov	r0, r4
   b7bb4:	f7ff fe9f 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b7bb8:	eddf 7a07 	vldr	s15, [pc, #28]	; b7bd8 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b7bbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b7bc0:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b7bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7bc8:	bfac      	ite	ge
   b7bca:	2301      	movge	r3, #1
   b7bcc:	2300      	movlt	r3, #0
}
   b7bce:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b7bd0:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b7bd4:	bd38      	pop	{r3, r4, r5, pc}
   b7bd6:	bf00      	nop
   b7bd8:	4442c000 	.word	0x4442c000
   b7bdc:	00000000 	.word	0x00000000
   b7be0:	412e8480 	.word	0x412e8480
   b7be4:	00000000 	.word	0x00000000
   b7be8:	404e8480 	.word	0x404e8480

000b7bec <_ZN7RH_RF9511setModeIdleEv>:
{
   b7bec:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b7bee:	7903      	ldrb	r3, [r0, #4]
   b7bf0:	2b02      	cmp	r3, #2
{
   b7bf2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b7bf4:	d00b      	beq.n	b7c0e <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b7bf6:	6803      	ldr	r3, [r0, #0]
   b7bf8:	2102      	movs	r1, #2
   b7bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7bfe:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b7c00:	2201      	movs	r2, #1
   b7c02:	4611      	mov	r1, r2
   b7c04:	4620      	mov	r0, r4
   b7c06:	f7ff fe76 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b7c0a:	2302      	movs	r3, #2
   b7c0c:	7123      	strb	r3, [r4, #4]
}
   b7c0e:	bd10      	pop	{r4, pc}

000b7c10 <_ZN7RH_RF9515handleInterruptEv>:
{
   b7c10:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7c12:	2112      	movs	r1, #18
{
   b7c14:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7c16:	f7ff fe4d 	bl	b78b4 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7c1a:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7c1c:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7c1e:	4620      	mov	r0, r4
   b7c20:	f7ff fe48 	bl	b78b4 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c24:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7c26:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c28:	2112      	movs	r1, #18
   b7c2a:	4620      	mov	r0, r4
   b7c2c:	f7ff fe63 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b7c30:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b7c32:	2b04      	cmp	r3, #4
   b7c34:	d107      	bne.n	b7c46 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7c36:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b7c3a:	d117      	bne.n	b7c6c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b7c3c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b7c40:	b10b      	cbz	r3, b7c46 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7c42:	0670      	lsls	r0, r6, #25
   b7c44:	d512      	bpl.n	b7c6c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b7c46:	7923      	ldrb	r3, [r4, #4]
   b7c48:	2b04      	cmp	r3, #4
   b7c4a:	d101      	bne.n	b7c50 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b7c4c:	0669      	lsls	r1, r5, #25
   b7c4e:	d422      	bmi.n	b7c96 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b7c50:	7923      	ldrb	r3, [r4, #4]
   b7c52:	2b03      	cmp	r3, #3
   b7c54:	d101      	bne.n	b7c5a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b7c56:	072a      	lsls	r2, r5, #28
   b7c58:	d468      	bmi.n	b7d2c <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b7c5a:	7923      	ldrb	r3, [r4, #4]
   b7c5c:	2b05      	cmp	r3, #5
   b7c5e:	d10e      	bne.n	b7c7e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b7c60:	076b      	lsls	r3, r5, #29
   b7c62:	d50c      	bpl.n	b7c7e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b7c64:	f005 0501 	and.w	r5, r5, #1
   b7c68:	7625      	strb	r5, [r4, #24]
   b7c6a:	e063      	b.n	b7d34 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b7c6c:	8a63      	ldrh	r3, [r4, #18]
   b7c6e:	3301      	adds	r3, #1
   b7c70:	b29b      	uxth	r3, r3
   b7c72:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b7c74:	2300      	movs	r3, #0
   b7c76:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7c7a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c7e:	22ff      	movs	r2, #255	; 0xff
   b7c80:	2112      	movs	r1, #18
   b7c82:	4620      	mov	r0, r4
   b7c84:	f7ff fe37 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c88:	4620      	mov	r0, r4
   b7c8a:	22ff      	movs	r2, #255	; 0xff
}
   b7c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7c90:	2112      	movs	r1, #18
   b7c92:	f7ff be30 	b.w	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7c96:	2113      	movs	r1, #19
   b7c98:	4620      	mov	r0, r4
   b7c9a:	f7ff fe0b 	bl	b78b4 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7c9e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7ca0:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7ca2:	4620      	mov	r0, r4
   b7ca4:	f7ff fe06 	bl	b78b4 <_ZN11RHSPIDriver7spiReadEh>
   b7ca8:	210d      	movs	r1, #13
   b7caa:	4602      	mov	r2, r0
   b7cac:	4620      	mov	r0, r4
   b7cae:	f7ff fe22 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b7cb2:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b7cb6:	462b      	mov	r3, r5
   b7cb8:	2100      	movs	r1, #0
   b7cba:	4620      	mov	r0, r4
   b7cbc:	f7ff fe40 	bl	b7940 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7cc0:	2119      	movs	r1, #25
	_bufLen = len;
   b7cc2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7cc6:	4620      	mov	r0, r4
   b7cc8:	f7ff fdf4 	bl	b78b4 <_ZN11RHSPIDriver7spiReadEh>
   b7ccc:	b240      	sxtb	r0, r0
   b7cce:	2800      	cmp	r0, #0
   b7cd0:	bfb8      	it	lt
   b7cd2:	3003      	addlt	r0, #3
   b7cd4:	1080      	asrs	r0, r0, #2
   b7cd6:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7cda:	211a      	movs	r1, #26
   b7cdc:	4620      	mov	r0, r4
   b7cde:	f7ff fde9 	bl	b78b4 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b7ce2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7ce6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b7ce8:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7cea:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7cec:	bfa9      	itett	ge
   b7cee:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b7cf0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7cf2:	b21b      	sxthge	r3, r3
   b7cf4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b7cf6:	bfb2      	itee	lt
   b7cf8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7cfa:	220f      	movge	r2, #15
   b7cfc:	fb93 f3f2 	sdivge	r3, r3, r2
   b7d00:	b21b      	sxth	r3, r3
   b7d02:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b7d04:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b7d08:	b16b      	cbz	r3, b7d26 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b7d0a:	8a23      	ldrh	r3, [r4, #16]
   b7d0c:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b7d0e:	b21b      	sxth	r3, r3
   b7d10:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b7d12:	4620      	mov	r0, r4
   b7d14:	f7ff ff06 	bl	b7b24 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b7d18:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b7d1c:	2b00      	cmp	r3, #0
   b7d1e:	d0ae      	beq.n	b7c7e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b7d20:	f7ff ff64 	bl	b7bec <_ZN7RH_RF9511setModeIdleEv>
   b7d24:	e7ab      	b.n	b7c7e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b7d26:	8a23      	ldrh	r3, [r4, #16]
   b7d28:	3ba4      	subs	r3, #164	; 0xa4
   b7d2a:	e7f0      	b.n	b7d0e <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b7d2c:	8ae3      	ldrh	r3, [r4, #22]
   b7d2e:	3301      	adds	r3, #1
   b7d30:	b29b      	uxth	r3, r3
   b7d32:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b7d34:	4620      	mov	r0, r4
   b7d36:	e7f3      	b.n	b7d20 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b7d38 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b7d38:	4b02      	ldr	r3, [pc, #8]	; (b7d44 <_ZN7RH_RF954isr0Ev+0xc>)
   b7d3a:	6818      	ldr	r0, [r3, #0]
   b7d3c:	b108      	cbz	r0, b7d42 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b7d3e:	f7ff bf67 	b.w	b7c10 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d42:	4770      	bx	lr
   b7d44:	2003e604 	.word	0x2003e604

000b7d48 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b7d48:	4b02      	ldr	r3, [pc, #8]	; (b7d54 <_ZN7RH_RF954isr1Ev+0xc>)
   b7d4a:	6858      	ldr	r0, [r3, #4]
   b7d4c:	b108      	cbz	r0, b7d52 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b7d4e:	f7ff bf5f 	b.w	b7c10 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d52:	4770      	bx	lr
   b7d54:	2003e604 	.word	0x2003e604

000b7d58 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b7d58:	4b02      	ldr	r3, [pc, #8]	; (b7d64 <_ZN7RH_RF954isr2Ev+0xc>)
   b7d5a:	6898      	ldr	r0, [r3, #8]
   b7d5c:	b108      	cbz	r0, b7d62 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b7d5e:	f7ff bf57 	b.w	b7c10 <_ZN7RH_RF9515handleInterruptEv>
}
   b7d62:	4770      	bx	lr
   b7d64:	2003e604 	.word	0x2003e604

000b7d68 <_ZN7RH_RF959setModeRxEv>:
{
   b7d68:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b7d6a:	7903      	ldrb	r3, [r0, #4]
   b7d6c:	2b04      	cmp	r3, #4
{
   b7d6e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b7d70:	d010      	beq.n	b7d94 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b7d72:	6803      	ldr	r3, [r0, #0]
   b7d74:	2104      	movs	r1, #4
   b7d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7d7a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b7d7c:	2205      	movs	r2, #5
   b7d7e:	2101      	movs	r1, #1
   b7d80:	4620      	mov	r0, r4
   b7d82:	f7ff fdb8 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b7d86:	2200      	movs	r2, #0
   b7d88:	2140      	movs	r1, #64	; 0x40
   b7d8a:	4620      	mov	r0, r4
   b7d8c:	f7ff fdb3 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b7d90:	2304      	movs	r3, #4
   b7d92:	7123      	strb	r3, [r4, #4]
}
   b7d94:	bd10      	pop	{r4, pc}

000b7d96 <_ZN7RH_RF959availableEv>:
{
   b7d96:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b7d98:	7903      	ldrb	r3, [r0, #4]
   b7d9a:	2b03      	cmp	r3, #3
{
   b7d9c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b7d9e:	d005      	beq.n	b7dac <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b7da0:	f7ff ffe2 	bl	b7d68 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b7da4:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b7da8:	b2c0      	uxtb	r0, r0
}
   b7daa:	bd10      	pop	{r4, pc}
	return false;
   b7dac:	2000      	movs	r0, #0
   b7dae:	e7fc      	b.n	b7daa <_ZN7RH_RF959availableEv+0x14>

000b7db0 <_ZN7RH_RF959setModeTxEv>:
{
   b7db0:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b7db2:	7903      	ldrb	r3, [r0, #4]
   b7db4:	2b03      	cmp	r3, #3
{
   b7db6:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b7db8:	d010      	beq.n	b7ddc <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b7dba:	6803      	ldr	r3, [r0, #0]
   b7dbc:	2103      	movs	r1, #3
   b7dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7dc2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b7dc4:	2203      	movs	r2, #3
   b7dc6:	2101      	movs	r1, #1
   b7dc8:	4620      	mov	r0, r4
   b7dca:	f7ff fd94 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b7dce:	2240      	movs	r2, #64	; 0x40
   b7dd0:	4611      	mov	r1, r2
   b7dd2:	4620      	mov	r0, r4
   b7dd4:	f7ff fd8f 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b7dd8:	2303      	movs	r3, #3
   b7dda:	7123      	strb	r3, [r4, #4]
}
   b7ddc:	bd10      	pop	{r4, pc}

000b7dde <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7dde:	2afb      	cmp	r2, #251	; 0xfb
{
   b7de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7de2:	4604      	mov	r4, r0
   b7de4:	460f      	mov	r7, r1
   b7de6:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7de8:	d902      	bls.n	b7df0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b7dea:	2600      	movs	r6, #0
}
   b7dec:	4630      	mov	r0, r6
   b7dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b7df0:	6803      	ldr	r3, [r0, #0]
   b7df2:	6a1b      	ldr	r3, [r3, #32]
   b7df4:	4798      	blx	r3
    setModeIdle();
   b7df6:	4620      	mov	r0, r4
   b7df8:	f7ff fef8 	bl	b7bec <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b7dfc:	6823      	ldr	r3, [r4, #0]
   b7dfe:	4620      	mov	r0, r4
   b7e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7e02:	4798      	blx	r3
   b7e04:	4606      	mov	r6, r0
   b7e06:	2800      	cmp	r0, #0
   b7e08:	d0ef      	beq.n	b7dea <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b7e0a:	2200      	movs	r2, #0
   b7e0c:	210d      	movs	r1, #13
   b7e0e:	4620      	mov	r0, r4
   b7e10:	f7ff fd71 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b7e14:	7ae2      	ldrb	r2, [r4, #11]
   b7e16:	2100      	movs	r1, #0
   b7e18:	4620      	mov	r0, r4
   b7e1a:	f7ff fd6c 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b7e1e:	7b22      	ldrb	r2, [r4, #12]
   b7e20:	2100      	movs	r1, #0
   b7e22:	4620      	mov	r0, r4
   b7e24:	f7ff fd67 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b7e28:	7b62      	ldrb	r2, [r4, #13]
   b7e2a:	2100      	movs	r1, #0
   b7e2c:	4620      	mov	r0, r4
   b7e2e:	f7ff fd62 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b7e32:	7ba2      	ldrb	r2, [r4, #14]
   b7e34:	2100      	movs	r1, #0
   b7e36:	4620      	mov	r0, r4
   b7e38:	f7ff fd5d 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b7e3c:	462b      	mov	r3, r5
   b7e3e:	463a      	mov	r2, r7
   b7e40:	2100      	movs	r1, #0
   b7e42:	4620      	mov	r0, r4
   b7e44:	f7ff fda5 	bl	b7992 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b7e48:	1d2a      	adds	r2, r5, #4
   b7e4a:	b2d2      	uxtb	r2, r2
   b7e4c:	2122      	movs	r1, #34	; 0x22
   b7e4e:	4620      	mov	r0, r4
   b7e50:	f7ff fd51 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b7e54:	4620      	mov	r0, r4
   b7e56:	f7ff ffab 	bl	b7db0 <_ZN7RH_RF959setModeTxEv>
    return true;
   b7e5a:	e7c7      	b.n	b7dec <_ZN7RH_RF954sendEPKhh+0xe>

000b7e5c <_ZN7RH_RF9510setTxPowerEab>:
{
   b7e5c:	b510      	push	{r4, lr}
   b7e5e:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b7e60:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b7e64:	b172      	cbz	r2, b7e84 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b7e66:	f381 0204 	usat	r2, #4, r1
   b7e6a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b7e6e:	b2d2      	uxtb	r2, r2
   b7e70:	2109      	movs	r1, #9
   b7e72:	f7ff fd40 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7e76:	4620      	mov	r0, r4
   b7e78:	2204      	movs	r2, #4
}
   b7e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7e7e:	214d      	movs	r1, #77	; 0x4d
   b7e80:	f7ff bd39 	b.w	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
}
   b7e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7e88:	f7ff be0c 	b.w	b7aa4 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b7e8c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b7e8c:	b538      	push	{r3, r4, r5, lr}
   b7e8e:	460c      	mov	r4, r1
   b7e90:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b7e92:	780a      	ldrb	r2, [r1, #0]
   b7e94:	211d      	movs	r1, #29
   b7e96:	f7ff fd2e 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b7e9a:	7862      	ldrb	r2, [r4, #1]
   b7e9c:	211e      	movs	r1, #30
   b7e9e:	4628      	mov	r0, r5
   b7ea0:	f7ff fd29 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7ea4:	78a2      	ldrb	r2, [r4, #2]
   b7ea6:	4628      	mov	r0, r5
   b7ea8:	2126      	movs	r1, #38	; 0x26
}
   b7eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b7eae:	f7ff bd22 	b.w	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b7eb4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7eb4:	2905      	cmp	r1, #5
{
   b7eb6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b7eb8:	d80f      	bhi.n	b7eda <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b7eba:	4b09      	ldr	r3, [pc, #36]	; (b7ee0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b7ebc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b7ec0:	185c      	adds	r4, r3, r1
   b7ec2:	5a5a      	ldrh	r2, [r3, r1]
   b7ec4:	78a3      	ldrb	r3, [r4, #2]
   b7ec6:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b7eca:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b7ecc:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b7ed0:	f7ff ffdc 	bl	b7e8c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b7ed4:	2001      	movs	r0, #1
}
   b7ed6:	b002      	add	sp, #8
   b7ed8:	bd10      	pop	{r4, pc}
        return false;
   b7eda:	2000      	movs	r0, #0
   b7edc:	e7fb      	b.n	b7ed6 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b7ede:	bf00      	nop
   b7ee0:	000bd008 	.word	0x000bd008

000b7ee4 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b7ee4:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7ee6:	0a0a      	lsrs	r2, r1, #8
{
   b7ee8:	4605      	mov	r5, r0
   b7eea:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b7eec:	2120      	movs	r1, #32
   b7eee:	f7ff fd02 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b7ef2:	b2e2      	uxtb	r2, r4
   b7ef4:	4628      	mov	r0, r5
   b7ef6:	2121      	movs	r1, #33	; 0x21
}
   b7ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b7efc:	f7ff bcfb 	b.w	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>

000b7f00 <_ZN7RH_RF954initEv>:
{
   b7f00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7f02:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b7f04:	f7ff fca6 	bl	b7854 <_ZN11RHSPIDriver4initEv>
   b7f08:	4606      	mov	r6, r0
   b7f0a:	b918      	cbnz	r0, b7f14 <_ZN7RH_RF954initEv+0x14>
	return false;
   b7f0c:	2600      	movs	r6, #0
}
   b7f0e:	4630      	mov	r0, r6
   b7f10:	b002      	add	sp, #8
   b7f12:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b7f14:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b7f18:	2dff      	cmp	r5, #255	; 0xff
   b7f1a:	d054      	beq.n	b7fc6 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b7f1c:	4629      	mov	r1, r5
   b7f1e:	4620      	mov	r0, r4
   b7f20:	f7ff fd5f 	bl	b79e2 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b7f24:	2280      	movs	r2, #128	; 0x80
   b7f26:	2101      	movs	r1, #1
   b7f28:	4620      	mov	r0, r4
   b7f2a:	f7ff fce4 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b7f2e:	200a      	movs	r0, #10
   b7f30:	f000 fd0a 	bl	b8948 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b7f34:	2101      	movs	r1, #1
   b7f36:	4620      	mov	r0, r4
   b7f38:	f7ff fcbc 	bl	b78b4 <_ZN11RHSPIDriver7spiReadEh>
   b7f3c:	2880      	cmp	r0, #128	; 0x80
   b7f3e:	d1e5      	bne.n	b7f0c <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b7f40:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b7f44:	28ff      	cmp	r0, #255	; 0xff
   b7f46:	d01c      	beq.n	b7f82 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b7f48:	2100      	movs	r1, #0
   b7f4a:	f003 fa13 	bl	bb374 <pinMode>
	if (_myInterruptIndex == 0xff)
   b7f4e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b7f52:	2bff      	cmp	r3, #255	; 0xff
   b7f54:	d107      	bne.n	b7f66 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b7f56:	4a26      	ldr	r2, [pc, #152]	; (b7ff0 <_ZN7RH_RF954initEv+0xf0>)
   b7f58:	7813      	ldrb	r3, [r2, #0]
   b7f5a:	2b03      	cmp	r3, #3
   b7f5c:	d8d6      	bhi.n	b7f0c <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b7f5e:	1c59      	adds	r1, r3, #1
   b7f60:	7011      	strb	r1, [r2, #0]
   b7f62:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b7f66:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b7f6a:	4b22      	ldr	r3, [pc, #136]	; (b7ff4 <_ZN7RH_RF954initEv+0xf4>)
   b7f6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b7f70:	bb62      	cbnz	r2, b7fcc <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b7f72:	4921      	ldr	r1, [pc, #132]	; (b7ff8 <_ZN7RH_RF954initEv+0xf8>)
   b7f74:	9200      	str	r2, [sp, #0]
   b7f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7f7a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7f7c:	b2a8      	uxth	r0, r5
   b7f7e:	f000 ff6d 	bl	b8e5c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b7f82:	2200      	movs	r2, #0
   b7f84:	210e      	movs	r1, #14
   b7f86:	4620      	mov	r0, r4
   b7f88:	f7ff fcb5 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b7f8c:	2200      	movs	r2, #0
   b7f8e:	210f      	movs	r1, #15
   b7f90:	4620      	mov	r0, r4
   b7f92:	f7ff fcb0 	bl	b78f6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b7f96:	4620      	mov	r0, r4
   b7f98:	f7ff fe28 	bl	b7bec <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b7f9c:	2100      	movs	r1, #0
   b7f9e:	4620      	mov	r0, r4
   b7fa0:	f7ff ff88 	bl	b7eb4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b7fa4:	2108      	movs	r1, #8
   b7fa6:	4620      	mov	r0, r4
   b7fa8:	f7ff ff9c 	bl	b7ee4 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b7fac:	ed9f 0a13 	vldr	s0, [pc, #76]	; b7ffc <_ZN7RH_RF954initEv+0xfc>
   b7fb0:	4620      	mov	r0, r4
   b7fb2:	f7ff fdd9 	bl	b7b68 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b7fb6:	2300      	movs	r3, #0
   b7fb8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b7fbc:	210d      	movs	r1, #13
   b7fbe:	4620      	mov	r0, r4
   b7fc0:	f7ff fd70 	bl	b7aa4 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b7fc4:	e7a3      	b.n	b7f0e <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b7fc6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b7fca:	e7ab      	b.n	b7f24 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b7fcc:	2a01      	cmp	r2, #1
   b7fce:	f04f 0300 	mov.w	r3, #0
   b7fd2:	d104      	bne.n	b7fde <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b7fd4:	9300      	str	r3, [sp, #0]
   b7fd6:	490a      	ldr	r1, [pc, #40]	; (b8000 <_ZN7RH_RF954initEv+0x100>)
   b7fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7fdc:	e7ce      	b.n	b7f7c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b7fde:	2a02      	cmp	r2, #2
   b7fe0:	d194      	bne.n	b7f0c <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b7fe2:	9300      	str	r3, [sp, #0]
   b7fe4:	4907      	ldr	r1, [pc, #28]	; (b8004 <_ZN7RH_RF954initEv+0x104>)
   b7fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7fea:	2201      	movs	r2, #1
   b7fec:	e7c6      	b.n	b7f7c <_ZN7RH_RF954initEv+0x7c>
   b7fee:	bf00      	nop
   b7ff0:	2003e601 	.word	0x2003e601
   b7ff4:	2003e604 	.word	0x2003e604
   b7ff8:	000b7d39 	.word	0x000b7d39
   b7ffc:	43d90000 	.word	0x43d90000
   b8000:	000b7d49 	.word	0x000b7d49
   b8004:	000b7d59 	.word	0x000b7d59

000b8008 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b8008:	4770      	bx	lr

000b800a <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b800a:	6803      	ldr	r3, [r0, #0]
   b800c:	685b      	ldr	r3, [r3, #4]
   b800e:	4718      	bx	r3

000b8010 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b8010:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b8012:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b8014:	4604      	mov	r4, r0
    if (lastUpdate) {
   b8016:	b133      	cbz	r3, b8026 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b8018:	b131      	cbz	r1, b8028 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b801a:	6823      	ldr	r3, [r4, #0]
   b801c:	4620      	mov	r0, r4
   b801e:	689b      	ldr	r3, [r3, #8]
   b8020:	4798      	blx	r3
            lastUpdate = 0;
   b8022:	2300      	movs	r3, #0
   b8024:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b8026:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8028:	f000 f92a 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b802c:	69a3      	ldr	r3, [r4, #24]
   b802e:	1ac0      	subs	r0, r0, r3
   b8030:	69e3      	ldr	r3, [r4, #28]
   b8032:	4298      	cmp	r0, r3
   b8034:	d2f1      	bcs.n	b801a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b8036:	e7f6      	b.n	b8026 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b8038 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b8038:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b803a:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b803c:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b803e:	b11b      	cbz	r3, b8048 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8040:	f000 f91e 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b8044:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b8046:	bd10      	pop	{r4, pc}
        save();
   b8048:	6803      	ldr	r3, [r0, #0]
}
   b804a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b804e:	689b      	ldr	r3, [r3, #8]
   b8050:	4718      	bx	r3

000b8052 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b8052:	f000 b8ed 	b.w	b8230 <os_mutex_recursive_unlock>

000b8056 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b8056:	b510      	push	{r4, lr}
   b8058:	4604      	mov	r4, r0
   b805a:	3004      	adds	r0, #4
   b805c:	f7fd f8e4 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8060:	6823      	ldr	r3, [r4, #0]
   b8062:	68e1      	ldr	r1, [r4, #12]
   b8064:	695b      	ldr	r3, [r3, #20]
   b8066:	4620      	mov	r0, r4
   b8068:	4798      	blx	r3
   b806a:	b918      	cbnz	r0, b8074 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b806c:	6823      	ldr	r3, [r4, #0]
   b806e:	4620      	mov	r0, r4
   b8070:	699b      	ldr	r3, [r3, #24]
   b8072:	4798      	blx	r3
      { _M_device.unlock(); }
   b8074:	6860      	ldr	r0, [r4, #4]
   b8076:	f7ff ffec 	bl	b8052 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b807a:	2001      	movs	r0, #1
   b807c:	bd10      	pop	{r4, pc}
	...

000b8080 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8080:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8082:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b8086:	4f18      	ldr	r7, [pc, #96]	; (b80e8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8088:	4e18      	ldr	r6, [pc, #96]	; (b80ec <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b808a:	4d19      	ldr	r5, [pc, #100]	; (b80f0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b808c:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b808e:	42a0      	cmp	r0, r4
   b8090:	d00c      	beq.n	b80ac <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b8092:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b8096:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b8098:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b809c:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b809e:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b80a0:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b80a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b80a8:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b80aa:	e7f0      	b.n	b808e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b80ac:	f001 0403 	and.w	r4, r1, #3
   b80b0:	4404      	add	r4, r0
    k = 0;
   b80b2:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b80b4:	42a0      	cmp	r0, r4
   b80b6:	d004      	beq.n	b80c2 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b80b8:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b80bc:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b80c0:	e7f8      	b.n	b80b4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b80c2:	4809      	ldr	r0, [pc, #36]	; (b80e8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b80c4:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b80c6:	4809      	ldr	r0, [pc, #36]	; (b80ec <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b80c8:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b80cc:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b80ce:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b80d0:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b80d2:	4b08      	ldr	r3, [pc, #32]	; (b80f4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b80d4:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b80d8:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b80da:	4b07      	ldr	r3, [pc, #28]	; (b80f8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b80dc:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b80e0:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b80e2:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b80e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b80e8:	cc9e2d51 	.word	0xcc9e2d51
   b80ec:	1b873593 	.word	0x1b873593
   b80f0:	e6546b64 	.word	0xe6546b64
   b80f4:	85ebca6b 	.word	0x85ebca6b
   b80f8:	c2b2ae35 	.word	0xc2b2ae35

000b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b80fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b80fe:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b8100:	3004      	adds	r0, #4
   b8102:	f7fd f891 	bl	b5228 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b8106:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b8108:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b810a:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b810c:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b810e:	68a6      	ldr	r6, [r4, #8]
   b8110:	4a05      	ldr	r2, [pc, #20]	; (b8128 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b8112:	88f1      	ldrh	r1, [r6, #6]
   b8114:	4630      	mov	r0, r6
   b8116:	f7ff ffb3 	bl	b8080 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b811a:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b811c:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b811e:	6860      	ldr	r0, [r4, #4]
   b8120:	f7ff ff97 	bl	b8052 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b8124:	4628      	mov	r0, r5
   b8126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8128:	851c2a3f 	.word	0x851c2a3f

000b812c <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b812c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b812e:	460d      	mov	r5, r1
   b8130:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b8132:	f7ff ffe3 	bl	b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b8136:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b8138:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b813a:	d923      	bls.n	b8184 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b813c:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b813e:	6922      	ldr	r2, [r4, #16]
   b8140:	6819      	ldr	r1, [r3, #0]
   b8142:	4291      	cmp	r1, r2
   b8144:	d11f      	bne.n	b8186 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b8146:	8899      	ldrh	r1, [r3, #4]
   b8148:	8aa2      	ldrh	r2, [r4, #20]
   b814a:	4291      	cmp	r1, r2
   b814c:	d11b      	bne.n	b8186 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b814e:	88d9      	ldrh	r1, [r3, #6]
   b8150:	b2aa      	uxth	r2, r5
   b8152:	4291      	cmp	r1, r2
   b8154:	d817      	bhi.n	b8186 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b8156:	689a      	ldr	r2, [r3, #8]
   b8158:	4282      	cmp	r2, r0
   b815a:	d114      	bne.n	b8186 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b815c:	68e2      	ldr	r2, [r4, #12]
   b815e:	42aa      	cmp	r2, r5
   b8160:	d905      	bls.n	b816e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b8162:	2100      	movs	r1, #0
   b8164:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b8166:	68e2      	ldr	r2, [r4, #12]
   b8168:	3501      	adds	r5, #1
   b816a:	42aa      	cmp	r2, r5
   b816c:	d8fa      	bhi.n	b8164 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b816e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b8172:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8174:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b8176:	68a5      	ldr	r5, [r4, #8]
   b8178:	f7ff ffc0 	bl	b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b817c:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b817e:	2001      	movs	r0, #1
}
   b8180:	b002      	add	sp, #8
   b8182:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b8184:	b19d      	cbz	r5, b81ae <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b8186:	68a1      	ldr	r1, [r4, #8]
   b8188:	680a      	ldr	r2, [r1, #0]
   b818a:	b192      	cbz	r2, b81b2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b818c:	6888      	ldr	r0, [r1, #8]
   b818e:	888b      	ldrh	r3, [r1, #4]
   b8190:	9001      	str	r0, [sp, #4]
   b8192:	88c9      	ldrh	r1, [r1, #6]
   b8194:	4808      	ldr	r0, [pc, #32]	; (b81b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b8196:	9100      	str	r1, [sp, #0]
   b8198:	4908      	ldr	r1, [pc, #32]	; (b81bc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b819a:	f7fd fe7f 	bl	b5e9c <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b819e:	e9cd 5600 	strd	r5, r6, [sp]
   b81a2:	8aa3      	ldrh	r3, [r4, #20]
   b81a4:	6922      	ldr	r2, [r4, #16]
   b81a6:	4906      	ldr	r1, [pc, #24]	; (b81c0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b81a8:	4803      	ldr	r0, [pc, #12]	; (b81b8 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b81aa:	f7fd fe77 	bl	b5e9c <_ZNK5spark6Logger5traceEPKcz>
   b81ae:	2000      	movs	r0, #0
   b81b0:	e7e6      	b.n	b8180 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b81b2:	4610      	mov	r0, r2
   b81b4:	e7e4      	b.n	b8180 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b81b6:	bf00      	nop
   b81b8:	2003e658 	.word	0x2003e658
   b81bc:	000bd0a4 	.word	0x000bd0a4
   b81c0:	000bd0d5 	.word	0x000bd0d5

000b81c4 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b81c4:	b538      	push	{r3, r4, r5, lr}
   b81c6:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b81c8:	68c2      	ldr	r2, [r0, #12]
   b81ca:	6880      	ldr	r0, [r0, #8]
   b81cc:	2100      	movs	r1, #0
   b81ce:	f003 ff11 	bl	bbff4 <memset>
    savedDataHeader->magic = savedDataMagic;
   b81d2:	68a3      	ldr	r3, [r4, #8]
   b81d4:	6922      	ldr	r2, [r4, #16]
   b81d6:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b81d8:	68a3      	ldr	r3, [r4, #8]
   b81da:	8aa2      	ldrh	r2, [r4, #20]
   b81dc:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b81de:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b81e2:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b81e4:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b81e6:	68a5      	ldr	r5, [r4, #8]
   b81e8:	f7ff ff88 	bl	b80fc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b81ec:	60a8      	str	r0, [r5, #8]
}
   b81ee:	bd38      	pop	{r3, r4, r5, pc}

000b81f0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b81f0:	b508      	push	{r3, lr}
   b81f2:	4b02      	ldr	r3, [pc, #8]	; (b81fc <cellular_signal+0xc>)
   b81f4:	681b      	ldr	r3, [r3, #0]
   b81f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b81f8:	9301      	str	r3, [sp, #4]
   b81fa:	bd08      	pop	{r3, pc}
   b81fc:	00030274 	.word	0x00030274

000b8200 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8200:	b508      	push	{r3, lr}
   b8202:	4b02      	ldr	r3, [pc, #8]	; (b820c <os_mutex_recursive_create+0xc>)
   b8204:	681b      	ldr	r3, [r3, #0]
   b8206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8208:	9301      	str	r3, [sp, #4]
   b820a:	bd08      	pop	{r3, pc}
   b820c:	00030248 	.word	0x00030248

000b8210 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b8210:	b508      	push	{r3, lr}
   b8212:	4b02      	ldr	r3, [pc, #8]	; (b821c <os_mutex_recursive_destroy+0xc>)
   b8214:	681b      	ldr	r3, [r3, #0]
   b8216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8218:	9301      	str	r3, [sp, #4]
   b821a:	bd08      	pop	{r3, pc}
   b821c:	00030248 	.word	0x00030248

000b8220 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8220:	b508      	push	{r3, lr}
   b8222:	4b02      	ldr	r3, [pc, #8]	; (b822c <os_mutex_recursive_lock+0xc>)
   b8224:	681b      	ldr	r3, [r3, #0]
   b8226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8228:	9301      	str	r3, [sp, #4]
   b822a:	bd08      	pop	{r3, pc}
   b822c:	00030248 	.word	0x00030248

000b8230 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8230:	b508      	push	{r3, lr}
   b8232:	4b02      	ldr	r3, [pc, #8]	; (b823c <os_mutex_recursive_unlock+0xc>)
   b8234:	681b      	ldr	r3, [r3, #0]
   b8236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8238:	9301      	str	r3, [sp, #4]
   b823a:	bd08      	pop	{r3, pc}
   b823c:	00030248 	.word	0x00030248

000b8240 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8240:	b508      	push	{r3, lr}
   b8242:	4b02      	ldr	r3, [pc, #8]	; (b824c <HAL_Core_Runtime_Info+0xc>)
   b8244:	681b      	ldr	r3, [r3, #0]
   b8246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8248:	9301      	str	r3, [sp, #4]
   b824a:	bd08      	pop	{r3, pc}
   b824c:	00030234 	.word	0x00030234

000b8250 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8250:	b508      	push	{r3, lr}
   b8252:	4b02      	ldr	r3, [pc, #8]	; (b825c <HAL_Feature_Set+0xc>)
   b8254:	681b      	ldr	r3, [r3, #0]
   b8256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8258:	9301      	str	r3, [sp, #4]
   b825a:	bd08      	pop	{r3, pc}
   b825c:	00030234 	.word	0x00030234

000b8260 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8260:	b508      	push	{r3, lr}
   b8262:	4b02      	ldr	r3, [pc, #8]	; (b826c <HAL_RNG_GetRandomNumber+0xc>)
   b8264:	681b      	ldr	r3, [r3, #0]
   b8266:	685b      	ldr	r3, [r3, #4]
   b8268:	9301      	str	r3, [sp, #4]
   b826a:	bd08      	pop	{r3, pc}
   b826c:	00030218 	.word	0x00030218

000b8270 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8270:	b508      	push	{r3, lr}
   b8272:	4b02      	ldr	r3, [pc, #8]	; (b827c <HAL_Delay_Microseconds+0xc>)
   b8274:	681b      	ldr	r3, [r3, #0]
   b8276:	68db      	ldr	r3, [r3, #12]
   b8278:	9301      	str	r3, [sp, #4]
   b827a:	bd08      	pop	{r3, pc}
   b827c:	00030218 	.word	0x00030218

000b8280 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8280:	b508      	push	{r3, lr}
   b8282:	4b02      	ldr	r3, [pc, #8]	; (b828c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8284:	681b      	ldr	r3, [r3, #0]
   b8286:	695b      	ldr	r3, [r3, #20]
   b8288:	9301      	str	r3, [sp, #4]
   b828a:	bd08      	pop	{r3, pc}
   b828c:	00030218 	.word	0x00030218

000b8290 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8290:	b508      	push	{r3, lr}
   b8292:	4b02      	ldr	r3, [pc, #8]	; (b829c <hal_rtc_time_is_valid+0xc>)
   b8294:	681b      	ldr	r3, [r3, #0]
   b8296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8298:	9301      	str	r3, [sp, #4]
   b829a:	bd08      	pop	{r3, pc}
   b829c:	00030218 	.word	0x00030218

000b82a0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b82a0:	b508      	push	{r3, lr}
   b82a2:	4b02      	ldr	r3, [pc, #8]	; (b82ac <hal_timer_millis+0xc>)
   b82a4:	681b      	ldr	r3, [r3, #0]
   b82a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b82a8:	9301      	str	r3, [sp, #4]
   b82aa:	bd08      	pop	{r3, pc}
   b82ac:	00030218 	.word	0x00030218

000b82b0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b82b0:	b508      	push	{r3, lr}
   b82b2:	4b02      	ldr	r3, [pc, #8]	; (b82bc <hal_rtc_get_time+0xc>)
   b82b4:	681b      	ldr	r3, [r3, #0]
   b82b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b82b8:	9301      	str	r3, [sp, #4]
   b82ba:	bd08      	pop	{r3, pc}
   b82bc:	00030218 	.word	0x00030218

000b82c0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b82c0:	b508      	push	{r3, lr}
   b82c2:	4b02      	ldr	r3, [pc, #8]	; (b82cc <hal_rtc_set_time+0xc>)
   b82c4:	681b      	ldr	r3, [r3, #0]
   b82c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b82c8:	9301      	str	r3, [sp, #4]
   b82ca:	bd08      	pop	{r3, pc}
   b82cc:	00030218 	.word	0x00030218

000b82d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b82d0:	b508      	push	{r3, lr}
   b82d2:	4b02      	ldr	r3, [pc, #8]	; (b82dc <HAL_Pin_Map+0xc>)
   b82d4:	681b      	ldr	r3, [r3, #0]
   b82d6:	681b      	ldr	r3, [r3, #0]
   b82d8:	9301      	str	r3, [sp, #4]
   b82da:	bd08      	pop	{r3, pc}
   b82dc:	0003022c 	.word	0x0003022c

000b82e0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b82e0:	b508      	push	{r3, lr}
   b82e2:	4b02      	ldr	r3, [pc, #8]	; (b82ec <HAL_Validate_Pin_Function+0xc>)
   b82e4:	681b      	ldr	r3, [r3, #0]
   b82e6:	685b      	ldr	r3, [r3, #4]
   b82e8:	9301      	str	r3, [sp, #4]
   b82ea:	bd08      	pop	{r3, pc}
   b82ec:	0003022c 	.word	0x0003022c

000b82f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b82f0:	b508      	push	{r3, lr}
   b82f2:	4b02      	ldr	r3, [pc, #8]	; (b82fc <HAL_Pin_Mode+0xc>)
   b82f4:	681b      	ldr	r3, [r3, #0]
   b82f6:	689b      	ldr	r3, [r3, #8]
   b82f8:	9301      	str	r3, [sp, #4]
   b82fa:	bd08      	pop	{r3, pc}
   b82fc:	0003022c 	.word	0x0003022c

000b8300 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8300:	b508      	push	{r3, lr}
   b8302:	4b02      	ldr	r3, [pc, #8]	; (b830c <HAL_Get_Pin_Mode+0xc>)
   b8304:	681b      	ldr	r3, [r3, #0]
   b8306:	68db      	ldr	r3, [r3, #12]
   b8308:	9301      	str	r3, [sp, #4]
   b830a:	bd08      	pop	{r3, pc}
   b830c:	0003022c 	.word	0x0003022c

000b8310 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8310:	b508      	push	{r3, lr}
   b8312:	4b02      	ldr	r3, [pc, #8]	; (b831c <HAL_GPIO_Write+0xc>)
   b8314:	681b      	ldr	r3, [r3, #0]
   b8316:	691b      	ldr	r3, [r3, #16]
   b8318:	9301      	str	r3, [sp, #4]
   b831a:	bd08      	pop	{r3, pc}
   b831c:	0003022c 	.word	0x0003022c

000b8320 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8320:	b508      	push	{r3, lr}
   b8322:	4b02      	ldr	r3, [pc, #8]	; (b832c <HAL_GPIO_Read+0xc>)
   b8324:	681b      	ldr	r3, [r3, #0]
   b8326:	695b      	ldr	r3, [r3, #20]
   b8328:	9301      	str	r3, [sp, #4]
   b832a:	bd08      	pop	{r3, pc}
   b832c:	0003022c 	.word	0x0003022c

000b8330 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8330:	b508      	push	{r3, lr}
   b8332:	4b02      	ldr	r3, [pc, #8]	; (b833c <HAL_Interrupts_Attach+0xc>)
   b8334:	681b      	ldr	r3, [r3, #0]
   b8336:	699b      	ldr	r3, [r3, #24]
   b8338:	9301      	str	r3, [sp, #4]
   b833a:	bd08      	pop	{r3, pc}
   b833c:	0003022c 	.word	0x0003022c

000b8340 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8340:	b508      	push	{r3, lr}
   b8342:	4b02      	ldr	r3, [pc, #8]	; (b834c <HAL_Interrupts_Detach+0xc>)
   b8344:	681b      	ldr	r3, [r3, #0]
   b8346:	69db      	ldr	r3, [r3, #28]
   b8348:	9301      	str	r3, [sp, #4]
   b834a:	bd08      	pop	{r3, pc}
   b834c:	0003022c 	.word	0x0003022c

000b8350 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8350:	b508      	push	{r3, lr}
   b8352:	4b02      	ldr	r3, [pc, #8]	; (b835c <hal_adc_read+0xc>)
   b8354:	681b      	ldr	r3, [r3, #0]
   b8356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8358:	9301      	str	r3, [sp, #4]
   b835a:	bd08      	pop	{r3, pc}
   b835c:	0003022c 	.word	0x0003022c

000b8360 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8360:	b508      	push	{r3, lr}
   b8362:	4b02      	ldr	r3, [pc, #8]	; (b836c <hal_i2c_begin+0xc>)
   b8364:	681b      	ldr	r3, [r3, #0]
   b8366:	68db      	ldr	r3, [r3, #12]
   b8368:	9301      	str	r3, [sp, #4]
   b836a:	bd08      	pop	{r3, pc}
   b836c:	00030228 	.word	0x00030228

000b8370 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8370:	b508      	push	{r3, lr}
   b8372:	4b02      	ldr	r3, [pc, #8]	; (b837c <hal_i2c_begin_transmission+0xc>)
   b8374:	681b      	ldr	r3, [r3, #0]
   b8376:	699b      	ldr	r3, [r3, #24]
   b8378:	9301      	str	r3, [sp, #4]
   b837a:	bd08      	pop	{r3, pc}
   b837c:	00030228 	.word	0x00030228

000b8380 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8380:	b508      	push	{r3, lr}
   b8382:	4b02      	ldr	r3, [pc, #8]	; (b838c <hal_i2c_end_transmission+0xc>)
   b8384:	681b      	ldr	r3, [r3, #0]
   b8386:	69db      	ldr	r3, [r3, #28]
   b8388:	9301      	str	r3, [sp, #4]
   b838a:	bd08      	pop	{r3, pc}
   b838c:	00030228 	.word	0x00030228

000b8390 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8390:	b508      	push	{r3, lr}
   b8392:	4b02      	ldr	r3, [pc, #8]	; (b839c <hal_i2c_write+0xc>)
   b8394:	681b      	ldr	r3, [r3, #0]
   b8396:	6a1b      	ldr	r3, [r3, #32]
   b8398:	9301      	str	r3, [sp, #4]
   b839a:	bd08      	pop	{r3, pc}
   b839c:	00030228 	.word	0x00030228

000b83a0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b83a0:	b508      	push	{r3, lr}
   b83a2:	4b02      	ldr	r3, [pc, #8]	; (b83ac <hal_i2c_available+0xc>)
   b83a4:	681b      	ldr	r3, [r3, #0]
   b83a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b83a8:	9301      	str	r3, [sp, #4]
   b83aa:	bd08      	pop	{r3, pc}
   b83ac:	00030228 	.word	0x00030228

000b83b0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b83b0:	b508      	push	{r3, lr}
   b83b2:	4b02      	ldr	r3, [pc, #8]	; (b83bc <hal_i2c_read+0xc>)
   b83b4:	681b      	ldr	r3, [r3, #0]
   b83b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b83b8:	9301      	str	r3, [sp, #4]
   b83ba:	bd08      	pop	{r3, pc}
   b83bc:	00030228 	.word	0x00030228

000b83c0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b83c0:	b508      	push	{r3, lr}
   b83c2:	4b02      	ldr	r3, [pc, #8]	; (b83cc <hal_i2c_peek+0xc>)
   b83c4:	681b      	ldr	r3, [r3, #0]
   b83c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b83c8:	9301      	str	r3, [sp, #4]
   b83ca:	bd08      	pop	{r3, pc}
   b83cc:	00030228 	.word	0x00030228

000b83d0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b83d0:	b508      	push	{r3, lr}
   b83d2:	4b02      	ldr	r3, [pc, #8]	; (b83dc <hal_i2c_flush+0xc>)
   b83d4:	681b      	ldr	r3, [r3, #0]
   b83d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b83d8:	9301      	str	r3, [sp, #4]
   b83da:	bd08      	pop	{r3, pc}
   b83dc:	00030228 	.word	0x00030228

000b83e0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b83e0:	b508      	push	{r3, lr}
   b83e2:	4b02      	ldr	r3, [pc, #8]	; (b83ec <hal_i2c_is_enabled+0xc>)
   b83e4:	681b      	ldr	r3, [r3, #0]
   b83e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b83e8:	9301      	str	r3, [sp, #4]
   b83ea:	bd08      	pop	{r3, pc}
   b83ec:	00030228 	.word	0x00030228

000b83f0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b83f0:	b508      	push	{r3, lr}
   b83f2:	4b02      	ldr	r3, [pc, #8]	; (b83fc <hal_i2c_init+0xc>)
   b83f4:	681b      	ldr	r3, [r3, #0]
   b83f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b83f8:	9301      	str	r3, [sp, #4]
   b83fa:	bd08      	pop	{r3, pc}
   b83fc:	00030228 	.word	0x00030228

000b8400 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b8400:	b508      	push	{r3, lr}
   b8402:	4b02      	ldr	r3, [pc, #8]	; (b840c <hal_i2c_lock+0xc>)
   b8404:	681b      	ldr	r3, [r3, #0]
   b8406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8408:	9301      	str	r3, [sp, #4]
   b840a:	bd08      	pop	{r3, pc}
   b840c:	00030228 	.word	0x00030228

000b8410 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b8410:	b508      	push	{r3, lr}
   b8412:	4b02      	ldr	r3, [pc, #8]	; (b841c <hal_i2c_unlock+0xc>)
   b8414:	681b      	ldr	r3, [r3, #0]
   b8416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8418:	9301      	str	r3, [sp, #4]
   b841a:	bd08      	pop	{r3, pc}
   b841c:	00030228 	.word	0x00030228

000b8420 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b8420:	b508      	push	{r3, lr}
   b8422:	4b02      	ldr	r3, [pc, #8]	; (b842c <hal_i2c_request_ex+0xc>)
   b8424:	681b      	ldr	r3, [r3, #0]
   b8426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8428:	9301      	str	r3, [sp, #4]
   b842a:	bd08      	pop	{r3, pc}
   b842c:	00030228 	.word	0x00030228

000b8430 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8430:	b508      	push	{r3, lr}
   b8432:	4b02      	ldr	r3, [pc, #8]	; (b843c <inet_inet_ntop+0xc>)
   b8434:	681b      	ldr	r3, [r3, #0]
   b8436:	695b      	ldr	r3, [r3, #20]
   b8438:	9301      	str	r3, [sp, #4]
   b843a:	bd08      	pop	{r3, pc}
   b843c:	00030264 	.word	0x00030264

000b8440 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8440:	b508      	push	{r3, lr}
   b8442:	4b02      	ldr	r3, [pc, #8]	; (b844c <netdb_freeaddrinfo+0xc>)
   b8444:	681b      	ldr	r3, [r3, #0]
   b8446:	689b      	ldr	r3, [r3, #8]
   b8448:	9301      	str	r3, [sp, #4]
   b844a:	bd08      	pop	{r3, pc}
   b844c:	00030268 	.word	0x00030268

000b8450 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8450:	b508      	push	{r3, lr}
   b8452:	4b02      	ldr	r3, [pc, #8]	; (b845c <netdb_getaddrinfo+0xc>)
   b8454:	681b      	ldr	r3, [r3, #0]
   b8456:	68db      	ldr	r3, [r3, #12]
   b8458:	9301      	str	r3, [sp, #4]
   b845a:	bd08      	pop	{r3, pc}
   b845c:	00030268 	.word	0x00030268

000b8460 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8460:	b508      	push	{r3, lr}
   b8462:	4b02      	ldr	r3, [pc, #8]	; (b846c <hal_spi_begin+0xc>)
   b8464:	681b      	ldr	r3, [r3, #0]
   b8466:	681b      	ldr	r3, [r3, #0]
   b8468:	9301      	str	r3, [sp, #4]
   b846a:	bd08      	pop	{r3, pc}
   b846c:	00030230 	.word	0x00030230

000b8470 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8470:	b508      	push	{r3, lr}
   b8472:	4b02      	ldr	r3, [pc, #8]	; (b847c <hal_spi_end+0xc>)
   b8474:	681b      	ldr	r3, [r3, #0]
   b8476:	685b      	ldr	r3, [r3, #4]
   b8478:	9301      	str	r3, [sp, #4]
   b847a:	bd08      	pop	{r3, pc}
   b847c:	00030230 	.word	0x00030230

000b8480 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8480:	b508      	push	{r3, lr}
   b8482:	4b02      	ldr	r3, [pc, #8]	; (b848c <hal_spi_transfer+0xc>)
   b8484:	681b      	ldr	r3, [r3, #0]
   b8486:	695b      	ldr	r3, [r3, #20]
   b8488:	9301      	str	r3, [sp, #4]
   b848a:	bd08      	pop	{r3, pc}
   b848c:	00030230 	.word	0x00030230

000b8490 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8490:	b508      	push	{r3, lr}
   b8492:	4b02      	ldr	r3, [pc, #8]	; (b849c <hal_spi_init+0xc>)
   b8494:	681b      	ldr	r3, [r3, #0]
   b8496:	69db      	ldr	r3, [r3, #28]
   b8498:	9301      	str	r3, [sp, #4]
   b849a:	bd08      	pop	{r3, pc}
   b849c:	00030230 	.word	0x00030230

000b84a0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b84a0:	b508      	push	{r3, lr}
   b84a2:	4b02      	ldr	r3, [pc, #8]	; (b84ac <hal_spi_is_enabled+0xc>)
   b84a4:	681b      	ldr	r3, [r3, #0]
   b84a6:	6a1b      	ldr	r3, [r3, #32]
   b84a8:	9301      	str	r3, [sp, #4]
   b84aa:	bd08      	pop	{r3, pc}
   b84ac:	00030230 	.word	0x00030230

000b84b0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b84b0:	b508      	push	{r3, lr}
   b84b2:	4b02      	ldr	r3, [pc, #8]	; (b84bc <hal_spi_info+0xc>)
   b84b4:	681b      	ldr	r3, [r3, #0]
   b84b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b84b8:	9301      	str	r3, [sp, #4]
   b84ba:	bd08      	pop	{r3, pc}
   b84bc:	00030230 	.word	0x00030230

000b84c0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b84c0:	b508      	push	{r3, lr}
   b84c2:	4b02      	ldr	r3, [pc, #8]	; (b84cc <hal_spi_set_settings+0xc>)
   b84c4:	681b      	ldr	r3, [r3, #0]
   b84c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b84c8:	9301      	str	r3, [sp, #4]
   b84ca:	bd08      	pop	{r3, pc}
   b84cc:	00030230 	.word	0x00030230

000b84d0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b84d0:	b508      	push	{r3, lr}
   b84d2:	4b02      	ldr	r3, [pc, #8]	; (b84dc <hal_spi_acquire+0xc>)
   b84d4:	681b      	ldr	r3, [r3, #0]
   b84d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b84d8:	9301      	str	r3, [sp, #4]
   b84da:	bd08      	pop	{r3, pc}
   b84dc:	00030230 	.word	0x00030230

000b84e0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b84e0:	b508      	push	{r3, lr}
   b84e2:	4b02      	ldr	r3, [pc, #8]	; (b84ec <hal_spi_release+0xc>)
   b84e4:	681b      	ldr	r3, [r3, #0]
   b84e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b84e8:	9301      	str	r3, [sp, #4]
   b84ea:	bd08      	pop	{r3, pc}
   b84ec:	00030230 	.word	0x00030230

000b84f0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b84f0:	b508      	push	{r3, lr}
   b84f2:	4b02      	ldr	r3, [pc, #8]	; (b84fc <hal_usart_end+0xc>)
   b84f4:	681b      	ldr	r3, [r3, #0]
   b84f6:	689b      	ldr	r3, [r3, #8]
   b84f8:	9301      	str	r3, [sp, #4]
   b84fa:	bd08      	pop	{r3, pc}
   b84fc:	0003023c 	.word	0x0003023c

000b8500 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8500:	b508      	push	{r3, lr}
   b8502:	4b02      	ldr	r3, [pc, #8]	; (b850c <hal_usart_write+0xc>)
   b8504:	681b      	ldr	r3, [r3, #0]
   b8506:	68db      	ldr	r3, [r3, #12]
   b8508:	9301      	str	r3, [sp, #4]
   b850a:	bd08      	pop	{r3, pc}
   b850c:	0003023c 	.word	0x0003023c

000b8510 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8510:	b508      	push	{r3, lr}
   b8512:	4b02      	ldr	r3, [pc, #8]	; (b851c <hal_usart_available+0xc>)
   b8514:	681b      	ldr	r3, [r3, #0]
   b8516:	691b      	ldr	r3, [r3, #16]
   b8518:	9301      	str	r3, [sp, #4]
   b851a:	bd08      	pop	{r3, pc}
   b851c:	0003023c 	.word	0x0003023c

000b8520 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8520:	b508      	push	{r3, lr}
   b8522:	4b02      	ldr	r3, [pc, #8]	; (b852c <hal_usart_read+0xc>)
   b8524:	681b      	ldr	r3, [r3, #0]
   b8526:	695b      	ldr	r3, [r3, #20]
   b8528:	9301      	str	r3, [sp, #4]
   b852a:	bd08      	pop	{r3, pc}
   b852c:	0003023c 	.word	0x0003023c

000b8530 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8530:	b508      	push	{r3, lr}
   b8532:	4b02      	ldr	r3, [pc, #8]	; (b853c <hal_usart_peek+0xc>)
   b8534:	681b      	ldr	r3, [r3, #0]
   b8536:	699b      	ldr	r3, [r3, #24]
   b8538:	9301      	str	r3, [sp, #4]
   b853a:	bd08      	pop	{r3, pc}
   b853c:	0003023c 	.word	0x0003023c

000b8540 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8540:	b508      	push	{r3, lr}
   b8542:	4b02      	ldr	r3, [pc, #8]	; (b854c <hal_usart_flush+0xc>)
   b8544:	681b      	ldr	r3, [r3, #0]
   b8546:	69db      	ldr	r3, [r3, #28]
   b8548:	9301      	str	r3, [sp, #4]
   b854a:	bd08      	pop	{r3, pc}
   b854c:	0003023c 	.word	0x0003023c

000b8550 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8550:	b508      	push	{r3, lr}
   b8552:	4b02      	ldr	r3, [pc, #8]	; (b855c <hal_usart_is_enabled+0xc>)
   b8554:	681b      	ldr	r3, [r3, #0]
   b8556:	6a1b      	ldr	r3, [r3, #32]
   b8558:	9301      	str	r3, [sp, #4]
   b855a:	bd08      	pop	{r3, pc}
   b855c:	0003023c 	.word	0x0003023c

000b8560 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8560:	b508      	push	{r3, lr}
   b8562:	4b02      	ldr	r3, [pc, #8]	; (b856c <hal_usart_available_data_for_write+0xc>)
   b8564:	681b      	ldr	r3, [r3, #0]
   b8566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8568:	9301      	str	r3, [sp, #4]
   b856a:	bd08      	pop	{r3, pc}
   b856c:	0003023c 	.word	0x0003023c

000b8570 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8570:	b508      	push	{r3, lr}
   b8572:	4b02      	ldr	r3, [pc, #8]	; (b857c <hal_usart_begin_config+0xc>)
   b8574:	681b      	ldr	r3, [r3, #0]
   b8576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8578:	9301      	str	r3, [sp, #4]
   b857a:	bd08      	pop	{r3, pc}
   b857c:	0003023c 	.word	0x0003023c

000b8580 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8580:	b508      	push	{r3, lr}
   b8582:	4b02      	ldr	r3, [pc, #8]	; (b858c <hal_usart_init_ex+0xc>)
   b8584:	681b      	ldr	r3, [r3, #0]
   b8586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8588:	9301      	str	r3, [sp, #4]
   b858a:	bd08      	pop	{r3, pc}
   b858c:	0003023c 	.word	0x0003023c

000b8590 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8590:	b508      	push	{r3, lr}
   b8592:	4b02      	ldr	r3, [pc, #8]	; (b859c <HAL_USB_USART_Init+0xc>)
   b8594:	681b      	ldr	r3, [r3, #0]
   b8596:	681b      	ldr	r3, [r3, #0]
   b8598:	9301      	str	r3, [sp, #4]
   b859a:	bd08      	pop	{r3, pc}
   b859c:	0003024c 	.word	0x0003024c

000b85a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b85a0:	b508      	push	{r3, lr}
   b85a2:	4b02      	ldr	r3, [pc, #8]	; (b85ac <HAL_USB_USART_Begin+0xc>)
   b85a4:	681b      	ldr	r3, [r3, #0]
   b85a6:	685b      	ldr	r3, [r3, #4]
   b85a8:	9301      	str	r3, [sp, #4]
   b85aa:	bd08      	pop	{r3, pc}
   b85ac:	0003024c 	.word	0x0003024c

000b85b0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b85b0:	b508      	push	{r3, lr}
   b85b2:	4b02      	ldr	r3, [pc, #8]	; (b85bc <HAL_USB_USART_End+0xc>)
   b85b4:	681b      	ldr	r3, [r3, #0]
   b85b6:	689b      	ldr	r3, [r3, #8]
   b85b8:	9301      	str	r3, [sp, #4]
   b85ba:	bd08      	pop	{r3, pc}
   b85bc:	0003024c 	.word	0x0003024c

000b85c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b85c0:	b508      	push	{r3, lr}
   b85c2:	4b02      	ldr	r3, [pc, #8]	; (b85cc <HAL_USB_USART_Available_Data+0xc>)
   b85c4:	681b      	ldr	r3, [r3, #0]
   b85c6:	691b      	ldr	r3, [r3, #16]
   b85c8:	9301      	str	r3, [sp, #4]
   b85ca:	bd08      	pop	{r3, pc}
   b85cc:	0003024c 	.word	0x0003024c

000b85d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b85d0:	b508      	push	{r3, lr}
   b85d2:	4b02      	ldr	r3, [pc, #8]	; (b85dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b85d4:	681b      	ldr	r3, [r3, #0]
   b85d6:	695b      	ldr	r3, [r3, #20]
   b85d8:	9301      	str	r3, [sp, #4]
   b85da:	bd08      	pop	{r3, pc}
   b85dc:	0003024c 	.word	0x0003024c

000b85e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85e0:	b508      	push	{r3, lr}
   b85e2:	4b02      	ldr	r3, [pc, #8]	; (b85ec <HAL_USB_USART_Receive_Data+0xc>)
   b85e4:	681b      	ldr	r3, [r3, #0]
   b85e6:	699b      	ldr	r3, [r3, #24]
   b85e8:	9301      	str	r3, [sp, #4]
   b85ea:	bd08      	pop	{r3, pc}
   b85ec:	0003024c 	.word	0x0003024c

000b85f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b85f0:	b508      	push	{r3, lr}
   b85f2:	4b02      	ldr	r3, [pc, #8]	; (b85fc <HAL_USB_USART_Send_Data+0xc>)
   b85f4:	681b      	ldr	r3, [r3, #0]
   b85f6:	69db      	ldr	r3, [r3, #28]
   b85f8:	9301      	str	r3, [sp, #4]
   b85fa:	bd08      	pop	{r3, pc}
   b85fc:	0003024c 	.word	0x0003024c

000b8600 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8600:	b508      	push	{r3, lr}
   b8602:	4b02      	ldr	r3, [pc, #8]	; (b860c <HAL_USB_USART_Flush_Data+0xc>)
   b8604:	681b      	ldr	r3, [r3, #0]
   b8606:	6a1b      	ldr	r3, [r3, #32]
   b8608:	9301      	str	r3, [sp, #4]
   b860a:	bd08      	pop	{r3, pc}
   b860c:	0003024c 	.word	0x0003024c

000b8610 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b8610:	b508      	push	{r3, lr}
   b8612:	4b02      	ldr	r3, [pc, #8]	; (b861c <HAL_USB_USART_Is_Connected+0xc>)
   b8614:	681b      	ldr	r3, [r3, #0]
   b8616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8618:	9301      	str	r3, [sp, #4]
   b861a:	bd08      	pop	{r3, pc}
   b861c:	0003024c 	.word	0x0003024c

000b8620 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8620:	b508      	push	{r3, lr}
   b8622:	4b02      	ldr	r3, [pc, #8]	; (b862c <panic_+0xc>)
   b8624:	681b      	ldr	r3, [r3, #0]
   b8626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8628:	9301      	str	r3, [sp, #4]
   b862a:	bd08      	pop	{r3, pc}
   b862c:	00030260 	.word	0x00030260

000b8630 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8630:	b508      	push	{r3, lr}
   b8632:	4b02      	ldr	r3, [pc, #8]	; (b863c <log_message+0xc>)
   b8634:	681b      	ldr	r3, [r3, #0]
   b8636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8638:	9301      	str	r3, [sp, #4]
   b863a:	bd08      	pop	{r3, pc}
   b863c:	00030260 	.word	0x00030260

000b8640 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8640:	b508      	push	{r3, lr}
   b8642:	4b02      	ldr	r3, [pc, #8]	; (b864c <log_message_v+0xc>)
   b8644:	681b      	ldr	r3, [r3, #0]
   b8646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8648:	9301      	str	r3, [sp, #4]
   b864a:	bd08      	pop	{r3, pc}
   b864c:	00030260 	.word	0x00030260

000b8650 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8650:	b508      	push	{r3, lr}
   b8652:	4b02      	ldr	r3, [pc, #8]	; (b865c <log_level_name+0xc>)
   b8654:	681b      	ldr	r3, [r3, #0]
   b8656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8658:	9301      	str	r3, [sp, #4]
   b865a:	bd08      	pop	{r3, pc}
   b865c:	00030260 	.word	0x00030260

000b8660 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8660:	b508      	push	{r3, lr}
   b8662:	4b02      	ldr	r3, [pc, #8]	; (b866c <log_set_callbacks+0xc>)
   b8664:	681b      	ldr	r3, [r3, #0]
   b8666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8668:	9301      	str	r3, [sp, #4]
   b866a:	bd08      	pop	{r3, pc}
   b866c:	00030260 	.word	0x00030260

000b8670 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8670:	b508      	push	{r3, lr}
   b8672:	4b03      	ldr	r3, [pc, #12]	; (b8680 <diag_get_source+0x10>)
   b8674:	681b      	ldr	r3, [r3, #0]
   b8676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b867a:	9301      	str	r3, [sp, #4]
   b867c:	bd08      	pop	{r3, pc}
   b867e:	0000      	.short	0x0000
   b8680:	00030260 	.word	0x00030260

000b8684 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8684:	b508      	push	{r3, lr}
   b8686:	4b02      	ldr	r3, [pc, #8]	; (b8690 <system_mode+0xc>)
   b8688:	681b      	ldr	r3, [r3, #0]
   b868a:	681b      	ldr	r3, [r3, #0]
   b868c:	9301      	str	r3, [sp, #4]
   b868e:	bd08      	pop	{r3, pc}
   b8690:	00030220 	.word	0x00030220

000b8694 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8694:	b508      	push	{r3, lr}
   b8696:	4b02      	ldr	r3, [pc, #8]	; (b86a0 <set_system_mode+0xc>)
   b8698:	681b      	ldr	r3, [r3, #0]
   b869a:	685b      	ldr	r3, [r3, #4]
   b869c:	9301      	str	r3, [sp, #4]
   b869e:	bd08      	pop	{r3, pc}
   b86a0:	00030220 	.word	0x00030220

000b86a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b86a4:	b508      	push	{r3, lr}
   b86a6:	4b02      	ldr	r3, [pc, #8]	; (b86b0 <system_delay_ms+0xc>)
   b86a8:	681b      	ldr	r3, [r3, #0]
   b86aa:	695b      	ldr	r3, [r3, #20]
   b86ac:	9301      	str	r3, [sp, #4]
   b86ae:	bd08      	pop	{r3, pc}
   b86b0:	00030220 	.word	0x00030220

000b86b4 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b86b4:	b508      	push	{r3, lr}
   b86b6:	4b02      	ldr	r3, [pc, #8]	; (b86c0 <system_subscribe_event+0xc>)
   b86b8:	681b      	ldr	r3, [r3, #0]
   b86ba:	6a1b      	ldr	r3, [r3, #32]
   b86bc:	9301      	str	r3, [sp, #4]
   b86be:	bd08      	pop	{r3, pc}
   b86c0:	00030220 	.word	0x00030220

000b86c4 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b86c4:	b508      	push	{r3, lr}
   b86c6:	4b02      	ldr	r3, [pc, #8]	; (b86d0 <system_thread_set_state+0xc>)
   b86c8:	681b      	ldr	r3, [r3, #0]
   b86ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b86cc:	9301      	str	r3, [sp, #4]
   b86ce:	bd08      	pop	{r3, pc}
   b86d0:	00030220 	.word	0x00030220

000b86d4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b86d4:	b508      	push	{r3, lr}
   b86d6:	4b02      	ldr	r3, [pc, #8]	; (b86e0 <system_thread_get_state+0xc>)
   b86d8:	681b      	ldr	r3, [r3, #0]
   b86da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b86dc:	9301      	str	r3, [sp, #4]
   b86de:	bd08      	pop	{r3, pc}
   b86e0:	00030220 	.word	0x00030220

000b86e4 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b86e4:	b508      	push	{r3, lr}
   b86e6:	4b02      	ldr	r3, [pc, #8]	; (b86f0 <system_notify_time_changed+0xc>)
   b86e8:	681b      	ldr	r3, [r3, #0]
   b86ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b86ec:	9301      	str	r3, [sp, #4]
   b86ee:	bd08      	pop	{r3, pc}
   b86f0:	00030220 	.word	0x00030220

000b86f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b86f4:	b508      	push	{r3, lr}
   b86f6:	4b03      	ldr	r3, [pc, #12]	; (b8704 <system_ctrl_set_app_request_handler+0x10>)
   b86f8:	681b      	ldr	r3, [r3, #0]
   b86fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b86fe:	9301      	str	r3, [sp, #4]
   b8700:	bd08      	pop	{r3, pc}
   b8702:	0000      	.short	0x0000
   b8704:	00030220 	.word	0x00030220

000b8708 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8708:	b508      	push	{r3, lr}
   b870a:	4b03      	ldr	r3, [pc, #12]	; (b8718 <system_ctrl_set_result+0x10>)
   b870c:	681b      	ldr	r3, [r3, #0]
   b870e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8712:	9301      	str	r3, [sp, #4]
   b8714:	bd08      	pop	{r3, pc}
   b8716:	0000      	.short	0x0000
   b8718:	00030220 	.word	0x00030220

000b871c <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b871c:	b508      	push	{r3, lr}
   b871e:	4b03      	ldr	r3, [pc, #12]	; (b872c <system_power_management_set_config+0x10>)
   b8720:	681b      	ldr	r3, [r3, #0]
   b8722:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b8726:	9301      	str	r3, [sp, #4]
   b8728:	bd08      	pop	{r3, pc}
   b872a:	0000      	.short	0x0000
   b872c:	00030220 	.word	0x00030220

000b8730 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b8730:	b508      	push	{r3, lr}
   b8732:	4b03      	ldr	r3, [pc, #12]	; (b8740 <system_sleep_ext+0x10>)
   b8734:	681b      	ldr	r3, [r3, #0]
   b8736:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b873a:	9301      	str	r3, [sp, #4]
   b873c:	bd08      	pop	{r3, pc}
   b873e:	0000      	.short	0x0000
   b8740:	00030220 	.word	0x00030220

000b8744 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b8744:	b508      	push	{r3, lr}
   b8746:	4b03      	ldr	r3, [pc, #12]	; (b8754 <system_reset+0x10>)
   b8748:	681b      	ldr	r3, [r3, #0]
   b874a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b874e:	9301      	str	r3, [sp, #4]
   b8750:	bd08      	pop	{r3, pc}
   b8752:	0000      	.short	0x0000
   b8754:	00030220 	.word	0x00030220

000b8758 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8758:	b508      	push	{r3, lr}
   b875a:	4b02      	ldr	r3, [pc, #8]	; (b8764 <spark_process+0xc>)
   b875c:	681b      	ldr	r3, [r3, #0]
   b875e:	689b      	ldr	r3, [r3, #8]
   b8760:	9301      	str	r3, [sp, #4]
   b8762:	bd08      	pop	{r3, pc}
   b8764:	00030244 	.word	0x00030244

000b8768 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8768:	b508      	push	{r3, lr}
   b876a:	4b02      	ldr	r3, [pc, #8]	; (b8774 <spark_cloud_flag_connected+0xc>)
   b876c:	681b      	ldr	r3, [r3, #0]
   b876e:	695b      	ldr	r3, [r3, #20]
   b8770:	9301      	str	r3, [sp, #4]
   b8772:	bd08      	pop	{r3, pc}
   b8774:	00030244 	.word	0x00030244

000b8778 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8778:	b508      	push	{r3, lr}
   b877a:	4b02      	ldr	r3, [pc, #8]	; (b8784 <spark_sync_time_pending+0xc>)
   b877c:	681b      	ldr	r3, [r3, #0]
   b877e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8780:	9301      	str	r3, [sp, #4]
   b8782:	bd08      	pop	{r3, pc}
   b8784:	00030244 	.word	0x00030244

000b8788 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b8788:	b508      	push	{r3, lr}
   b878a:	4b02      	ldr	r3, [pc, #8]	; (b8794 <spark_sync_time_last+0xc>)
   b878c:	681b      	ldr	r3, [r3, #0]
   b878e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8790:	9301      	str	r3, [sp, #4]
   b8792:	bd08      	pop	{r3, pc}
   b8794:	00030244 	.word	0x00030244

000b8798 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8798:	b508      	push	{r3, lr}
   b879a:	4b02      	ldr	r3, [pc, #8]	; (b87a4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b879c:	681b      	ldr	r3, [r3, #0]
   b879e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b87a0:	9301      	str	r3, [sp, #4]
   b87a2:	bd08      	pop	{r3, pc}
   b87a4:	00030244 	.word	0x00030244

000b87a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b87a8:	b508      	push	{r3, lr}
   b87aa:	4b02      	ldr	r3, [pc, #8]	; (b87b4 <network_connect+0xc>)
   b87ac:	681b      	ldr	r3, [r3, #0]
   b87ae:	685b      	ldr	r3, [r3, #4]
   b87b0:	9301      	str	r3, [sp, #4]
   b87b2:	bd08      	pop	{r3, pc}
   b87b4:	00030240 	.word	0x00030240

000b87b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b87b8:	b508      	push	{r3, lr}
   b87ba:	4b02      	ldr	r3, [pc, #8]	; (b87c4 <network_connecting+0xc>)
   b87bc:	681b      	ldr	r3, [r3, #0]
   b87be:	689b      	ldr	r3, [r3, #8]
   b87c0:	9301      	str	r3, [sp, #4]
   b87c2:	bd08      	pop	{r3, pc}
   b87c4:	00030240 	.word	0x00030240

000b87c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b87c8:	b508      	push	{r3, lr}
   b87ca:	4b02      	ldr	r3, [pc, #8]	; (b87d4 <network_disconnect+0xc>)
   b87cc:	681b      	ldr	r3, [r3, #0]
   b87ce:	68db      	ldr	r3, [r3, #12]
   b87d0:	9301      	str	r3, [sp, #4]
   b87d2:	bd08      	pop	{r3, pc}
   b87d4:	00030240 	.word	0x00030240

000b87d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b87d8:	b508      	push	{r3, lr}
   b87da:	4b02      	ldr	r3, [pc, #8]	; (b87e4 <network_ready+0xc>)
   b87dc:	681b      	ldr	r3, [r3, #0]
   b87de:	691b      	ldr	r3, [r3, #16]
   b87e0:	9301      	str	r3, [sp, #4]
   b87e2:	bd08      	pop	{r3, pc}
   b87e4:	00030240 	.word	0x00030240

000b87e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b87e8:	b508      	push	{r3, lr}
   b87ea:	4b02      	ldr	r3, [pc, #8]	; (b87f4 <network_on+0xc>)
   b87ec:	681b      	ldr	r3, [r3, #0]
   b87ee:	695b      	ldr	r3, [r3, #20]
   b87f0:	9301      	str	r3, [sp, #4]
   b87f2:	bd08      	pop	{r3, pc}
   b87f4:	00030240 	.word	0x00030240

000b87f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b87f8:	b508      	push	{r3, lr}
   b87fa:	4b02      	ldr	r3, [pc, #8]	; (b8804 <network_off+0xc>)
   b87fc:	681b      	ldr	r3, [r3, #0]
   b87fe:	699b      	ldr	r3, [r3, #24]
   b8800:	9301      	str	r3, [sp, #4]
   b8802:	bd08      	pop	{r3, pc}
   b8804:	00030240 	.word	0x00030240

000b8808 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8808:	b508      	push	{r3, lr}
   b880a:	4b02      	ldr	r3, [pc, #8]	; (b8814 <network_listen+0xc>)
   b880c:	681b      	ldr	r3, [r3, #0]
   b880e:	69db      	ldr	r3, [r3, #28]
   b8810:	9301      	str	r3, [sp, #4]
   b8812:	bd08      	pop	{r3, pc}
   b8814:	00030240 	.word	0x00030240

000b8818 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8818:	b508      	push	{r3, lr}
   b881a:	4b02      	ldr	r3, [pc, #8]	; (b8824 <network_listening+0xc>)
   b881c:	681b      	ldr	r3, [r3, #0]
   b881e:	6a1b      	ldr	r3, [r3, #32]
   b8820:	9301      	str	r3, [sp, #4]
   b8822:	bd08      	pop	{r3, pc}
   b8824:	00030240 	.word	0x00030240

000b8828 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8828:	b508      	push	{r3, lr}
   b882a:	4b02      	ldr	r3, [pc, #8]	; (b8834 <network_set_listen_timeout+0xc>)
   b882c:	681b      	ldr	r3, [r3, #0]
   b882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8830:	9301      	str	r3, [sp, #4]
   b8832:	bd08      	pop	{r3, pc}
   b8834:	00030240 	.word	0x00030240

000b8838 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8838:	b508      	push	{r3, lr}
   b883a:	4b02      	ldr	r3, [pc, #8]	; (b8844 <network_get_listen_timeout+0xc>)
   b883c:	681b      	ldr	r3, [r3, #0]
   b883e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8840:	9301      	str	r3, [sp, #4]
   b8842:	bd08      	pop	{r3, pc}
   b8844:	00030240 	.word	0x00030240

000b8848 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8848:	b508      	push	{r3, lr}
   b884a:	4b02      	ldr	r3, [pc, #8]	; (b8854 <network_is_on+0xc>)
   b884c:	681b      	ldr	r3, [r3, #0]
   b884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8850:	9301      	str	r3, [sp, #4]
   b8852:	bd08      	pop	{r3, pc}
   b8854:	00030240 	.word	0x00030240

000b8858 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8858:	b508      	push	{r3, lr}
   b885a:	4b02      	ldr	r3, [pc, #8]	; (b8864 <network_is_off+0xc>)
   b885c:	681b      	ldr	r3, [r3, #0]
   b885e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8860:	9301      	str	r3, [sp, #4]
   b8862:	bd08      	pop	{r3, pc}
   b8864:	00030240 	.word	0x00030240

000b8868 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8868:	b508      	push	{r3, lr}
   b886a:	4b02      	ldr	r3, [pc, #8]	; (b8874 <malloc+0xc>)
   b886c:	681b      	ldr	r3, [r3, #0]
   b886e:	681b      	ldr	r3, [r3, #0]
   b8870:	9301      	str	r3, [sp, #4]
   b8872:	bd08      	pop	{r3, pc}
   b8874:	0003021c 	.word	0x0003021c

000b8878 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8878:	b508      	push	{r3, lr}
   b887a:	4b02      	ldr	r3, [pc, #8]	; (b8884 <free+0xc>)
   b887c:	681b      	ldr	r3, [r3, #0]
   b887e:	685b      	ldr	r3, [r3, #4]
   b8880:	9301      	str	r3, [sp, #4]
   b8882:	bd08      	pop	{r3, pc}
   b8884:	0003021c 	.word	0x0003021c

000b8888 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8888:	b508      	push	{r3, lr}
   b888a:	4b02      	ldr	r3, [pc, #8]	; (b8894 <realloc+0xc>)
   b888c:	681b      	ldr	r3, [r3, #0]
   b888e:	689b      	ldr	r3, [r3, #8]
   b8890:	9301      	str	r3, [sp, #4]
   b8892:	bd08      	pop	{r3, pc}
   b8894:	0003021c 	.word	0x0003021c

000b8898 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8898:	b508      	push	{r3, lr}
   b889a:	4b02      	ldr	r3, [pc, #8]	; (b88a4 <siprintf+0xc>)
   b889c:	681b      	ldr	r3, [r3, #0]
   b889e:	691b      	ldr	r3, [r3, #16]
   b88a0:	9301      	str	r3, [sp, #4]
   b88a2:	bd08      	pop	{r3, pc}
   b88a4:	0003021c 	.word	0x0003021c

000b88a8 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b88a8:	b508      	push	{r3, lr}
   b88aa:	4b02      	ldr	r3, [pc, #8]	; (b88b4 <snprintf+0xc>)
   b88ac:	681b      	ldr	r3, [r3, #0]
   b88ae:	69db      	ldr	r3, [r3, #28]
   b88b0:	9301      	str	r3, [sp, #4]
   b88b2:	bd08      	pop	{r3, pc}
   b88b4:	0003021c 	.word	0x0003021c

000b88b8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b88b8:	b508      	push	{r3, lr}
   b88ba:	4b02      	ldr	r3, [pc, #8]	; (b88c4 <vsnprintf+0xc>)
   b88bc:	681b      	ldr	r3, [r3, #0]
   b88be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b88c0:	9301      	str	r3, [sp, #4]
   b88c2:	bd08      	pop	{r3, pc}
   b88c4:	0003021c 	.word	0x0003021c

000b88c8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b88c8:	b508      	push	{r3, lr}
   b88ca:	4b02      	ldr	r3, [pc, #8]	; (b88d4 <abort+0xc>)
   b88cc:	681b      	ldr	r3, [r3, #0]
   b88ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b88d0:	9301      	str	r3, [sp, #4]
   b88d2:	bd08      	pop	{r3, pc}
   b88d4:	0003021c 	.word	0x0003021c

000b88d8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b88d8:	b508      	push	{r3, lr}
   b88da:	4b02      	ldr	r3, [pc, #8]	; (b88e4 <__errno+0xc>)
   b88dc:	681b      	ldr	r3, [r3, #0]
   b88de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b88e0:	9301      	str	r3, [sp, #4]
   b88e2:	bd08      	pop	{r3, pc}
   b88e4:	0003021c 	.word	0x0003021c

000b88e8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b88e8:	b508      	push	{r3, lr}
   b88ea:	4b02      	ldr	r3, [pc, #8]	; (b88f4 <__assert_func+0xc>)
   b88ec:	681b      	ldr	r3, [r3, #0]
   b88ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b88f0:	9301      	str	r3, [sp, #4]
   b88f2:	bd08      	pop	{r3, pc}
   b88f4:	0003021c 	.word	0x0003021c

000b88f8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b88f8:	b508      	push	{r3, lr}
   b88fa:	4b02      	ldr	r3, [pc, #8]	; (b8904 <newlib_impure_ptr_callback+0xc>)
   b88fc:	681b      	ldr	r3, [r3, #0]
   b88fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8900:	9301      	str	r3, [sp, #4]
   b8902:	bd08      	pop	{r3, pc}
   b8904:	0003021c 	.word	0x0003021c

000b8908 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b8908:	b508      	push	{r3, lr}
   b890a:	4b02      	ldr	r3, [pc, #8]	; (b8914 <strftime+0xc>)
   b890c:	681b      	ldr	r3, [r3, #0]
   b890e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8910:	9301      	str	r3, [sp, #4]
   b8912:	bd08      	pop	{r3, pc}
   b8914:	0003021c 	.word	0x0003021c

000b8918 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8918:	b508      	push	{r3, lr}
   b891a:	4b02      	ldr	r3, [pc, #8]	; (b8924 <localtime_r+0xc>)
   b891c:	681b      	ldr	r3, [r3, #0]
   b891e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8920:	9301      	str	r3, [sp, #4]
   b8922:	bd08      	pop	{r3, pc}
   b8924:	0003021c 	.word	0x0003021c

000b8928 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8928:	b508      	push	{r3, lr}
   b892a:	4b02      	ldr	r3, [pc, #8]	; (b8934 <gmtime_r+0xc>)
   b892c:	681b      	ldr	r3, [r3, #0]
   b892e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8930:	9301      	str	r3, [sp, #4]
   b8932:	bd08      	pop	{r3, pc}
   b8934:	0003021c 	.word	0x0003021c

000b8938 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8938:	b508      	push	{r3, lr}
   b893a:	4b02      	ldr	r3, [pc, #8]	; (b8944 <mktime+0xc>)
   b893c:	681b      	ldr	r3, [r3, #0]
   b893e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8940:	9301      	str	r3, [sp, #4]
   b8942:	bd08      	pop	{r3, pc}
   b8944:	0003021c 	.word	0x0003021c

000b8948 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8948:	2100      	movs	r1, #0
   b894a:	f7ff beab 	b.w	b86a4 <system_delay_ms>

000b894e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b894e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8950:	6843      	ldr	r3, [r0, #4]
   b8952:	3b01      	subs	r3, #1
    {
   b8954:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8956:	6043      	str	r3, [r0, #4]
   b8958:	b963      	cbnz	r3, b8974 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b895a:	6803      	ldr	r3, [r0, #0]
   b895c:	689b      	ldr	r3, [r3, #8]
   b895e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8960:	68a3      	ldr	r3, [r4, #8]
   b8962:	3b01      	subs	r3, #1
   b8964:	60a3      	str	r3, [r4, #8]
   b8966:	b92b      	cbnz	r3, b8974 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8968:	6823      	ldr	r3, [r4, #0]
   b896a:	4620      	mov	r0, r4
   b896c:	68db      	ldr	r3, [r3, #12]
    }
   b896e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8972:	4718      	bx	r3
    }
   b8974:	bd10      	pop	{r4, pc}

000b8976 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8976:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8978:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b897c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b897e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8982:	42ae      	cmp	r6, r5
   b8984:	d004      	beq.n	b8990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8986:	4628      	mov	r0, r5
   b8988:	f002 f800 	bl	ba98c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b898c:	3510      	adds	r5, #16
   b898e:	e7f8      	b.n	b8982 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8990:	6820      	ldr	r0, [r4, #0]
   b8992:	f7ff ff71 	bl	b8878 <free>
    AllocatorT::free(data_);
}
   b8996:	4620      	mov	r0, r4
   b8998:	bd70      	pop	{r4, r5, r6, pc}
	...

000b899c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b899c:	4802      	ldr	r0, [pc, #8]	; (b89a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b899e:	2300      	movs	r3, #0
   b89a0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b89a2:	f7ff bc2d 	b.w	b8200 <os_mutex_recursive_create>
   b89a6:	bf00      	nop
   b89a8:	2003e610 	.word	0x2003e610

000b89ac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b89ac:	2200      	movs	r2, #0
   b89ae:	6840      	ldr	r0, [r0, #4]
   b89b0:	4611      	mov	r1, r2
   b89b2:	f7ff bf11 	b.w	b87d8 <network_ready>

000b89b6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b89b6:	2200      	movs	r2, #0
   b89b8:	6840      	ldr	r0, [r0, #4]
   b89ba:	4611      	mov	r1, r2
   b89bc:	f7ff bf2c 	b.w	b8818 <network_listening>

000b89c0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b89c0:	2200      	movs	r2, #0
   b89c2:	6840      	ldr	r0, [r0, #4]
   b89c4:	4611      	mov	r1, r2
   b89c6:	f7ff bf37 	b.w	b8838 <network_get_listen_timeout>

000b89ca <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b89ca:	6840      	ldr	r0, [r0, #4]
   b89cc:	2200      	movs	r2, #0
   b89ce:	f7ff bf2b 	b.w	b8828 <network_set_listen_timeout>

000b89d2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b89d2:	6840      	ldr	r0, [r0, #4]
   b89d4:	2200      	movs	r2, #0
   b89d6:	f081 0101 	eor.w	r1, r1, #1
   b89da:	f7ff bf15 	b.w	b8808 <network_listen>

000b89de <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b89de:	2300      	movs	r3, #0
   b89e0:	6840      	ldr	r0, [r0, #4]
   b89e2:	461a      	mov	r2, r3
   b89e4:	4619      	mov	r1, r3
   b89e6:	f7ff bf07 	b.w	b87f8 <network_off>

000b89ea <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b89ea:	2300      	movs	r3, #0
   b89ec:	6840      	ldr	r0, [r0, #4]
   b89ee:	461a      	mov	r2, r3
   b89f0:	4619      	mov	r1, r3
   b89f2:	f7ff bef9 	b.w	b87e8 <network_on>

000b89f6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b89f6:	2200      	movs	r2, #0
   b89f8:	6840      	ldr	r0, [r0, #4]
   b89fa:	4611      	mov	r1, r2
   b89fc:	f7ff bedc 	b.w	b87b8 <network_connecting>

000b8a00 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8a00:	6840      	ldr	r0, [r0, #4]
   b8a02:	2200      	movs	r2, #0
   b8a04:	2102      	movs	r1, #2
   b8a06:	f7ff bedf 	b.w	b87c8 <network_disconnect>

000b8a0a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8a0a:	2300      	movs	r3, #0
   b8a0c:	6840      	ldr	r0, [r0, #4]
   b8a0e:	461a      	mov	r2, r3
   b8a10:	f7ff beca 	b.w	b87a8 <network_connect>

000b8a14 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b8a14:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b8a16:	4b13      	ldr	r3, [pc, #76]	; (b8a64 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b8a18:	6003      	str	r3, [r0, #0]
   b8a1a:	2518      	movs	r5, #24
   b8a1c:	3330      	adds	r3, #48	; 0x30
   b8a1e:	b086      	sub	sp, #24
   b8a20:	460e      	mov	r6, r1
   b8a22:	6043      	str	r3, [r0, #4]
   b8a24:	462a      	mov	r2, r5
   b8a26:	2100      	movs	r1, #0
   b8a28:	4604      	mov	r4, r0
   b8a2a:	3008      	adds	r0, #8
   b8a2c:	f003 fae2 	bl	bbff4 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b8a30:	2200      	movs	r2, #0
   b8a32:	6870      	ldr	r0, [r6, #4]
   b8a34:	4611      	mov	r1, r2
   b8a36:	f7ff fecf 	bl	b87d8 <network_ready>
   b8a3a:	b178      	cbz	r0, b8a5c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b8a3c:	2100      	movs	r1, #0
   b8a3e:	462a      	mov	r2, r5
   b8a40:	4668      	mov	r0, sp
   b8a42:	f003 fad7 	bl	bbff4 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8a46:	4669      	mov	r1, sp
   b8a48:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b8a4a:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8a4e:	f7ff fbcf 	bl	b81f0 <cellular_signal>
   b8a52:	b918      	cbnz	r0, b8a5c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b8a54:	4669      	mov	r1, sp
   b8a56:	4620      	mov	r0, r4
   b8a58:	f000 f8b8 	bl	b8bcc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b8a5c:	4620      	mov	r0, r4
   b8a5e:	b006      	add	sp, #24
   b8a60:	bd70      	pop	{r4, r5, r6, pc}
   b8a62:	bf00      	nop
   b8a64:	000bd170 	.word	0x000bd170

000b8a68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8a68:	4b08      	ldr	r3, [pc, #32]	; (b8a8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8a6a:	b510      	push	{r4, lr}
   b8a6c:	2428      	movs	r4, #40	; 0x28
   b8a6e:	4622      	mov	r2, r4
   b8a70:	4618      	mov	r0, r3
   b8a72:	2100      	movs	r1, #0
   b8a74:	f003 fabe 	bl	bbff4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8a78:	4b05      	ldr	r3, [pc, #20]	; (b8a90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8a7a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8a80:	6042      	str	r2, [r0, #4]
   b8a82:	2204      	movs	r2, #4
   b8a84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8a86:	4a03      	ldr	r2, [pc, #12]	; (b8a94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8a88:	601a      	str	r2, [r3, #0]
   b8a8a:	bd10      	pop	{r4, pc}
   b8a8c:	2003e61c 	.word	0x2003e61c
   b8a90:	2003e614 	.word	0x2003e614
   b8a94:	000bd134 	.word	0x000bd134

000b8a98 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b8a98:	4770      	bx	lr

000b8a9a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b8a9a:	7b00      	ldrb	r0, [r0, #12]
   b8a9c:	4770      	bx	lr

000b8a9e <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8a9e:	7b03      	ldrb	r3, [r0, #12]
   b8aa0:	b14b      	cbz	r3, b8ab6 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b8aa2:	6903      	ldr	r3, [r0, #16]
   b8aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8aa8:	d005      	beq.n	b8ab6 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8aaa:	6980      	ldr	r0, [r0, #24]
   b8aac:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b8ab0:	bf18      	it	ne
   b8ab2:	2001      	movne	r0, #1
   b8ab4:	4770      	bx	lr
   b8ab6:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b8ab8:	4770      	bx	lr

000b8aba <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b8aba:	6803      	ldr	r3, [r0, #0]
   b8abc:	6a1b      	ldr	r3, [r3, #32]
   b8abe:	4718      	bx	r3

000b8ac0 <_ZNK14CellularSignal7printToER5Print>:
{
   b8ac0:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b8ac2:	6803      	ldr	r3, [r0, #0]
{
   b8ac4:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b8ac6:	691b      	ldr	r3, [r3, #16]
{
   b8ac8:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b8aca:	4798      	blx	r3
   b8acc:	2102      	movs	r1, #2
   b8ace:	4628      	mov	r0, r5
   b8ad0:	f001 fe38 	bl	ba744 <_ZN5Print5printEfi>
    n += p.print(',');
   b8ad4:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b8ad6:	4604      	mov	r4, r0
    n += p.print(',');
   b8ad8:	4628      	mov	r0, r5
   b8ada:	f001 fd3d 	bl	ba558 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b8ade:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b8ae0:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b8ae2:	699b      	ldr	r3, [r3, #24]
   b8ae4:	4630      	mov	r0, r6
   b8ae6:	4798      	blx	r3
   b8ae8:	2102      	movs	r1, #2
   b8aea:	4628      	mov	r0, r5
   b8aec:	f001 fe2a 	bl	ba744 <_ZN5Print5printEfi>
}
   b8af0:	4420      	add	r0, r4
   b8af2:	bd70      	pop	{r4, r5, r6, pc}

000b8af4 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b8af4:	f1a0 0004 	sub.w	r0, r0, #4
   b8af8:	f7ff bfe2 	b.w	b8ac0 <_ZNK14CellularSignal7printToER5Print>

000b8afc <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b8afc:	b510      	push	{r4, lr}
   b8afe:	2120      	movs	r1, #32
   b8b00:	4604      	mov	r4, r0
   b8b02:	f7fb facc 	bl	b409e <_ZdlPvj>
   b8b06:	4620      	mov	r0, r4
   b8b08:	bd10      	pop	{r4, pc}
	...

000b8b0c <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b8b0c:	7b03      	ldrb	r3, [r0, #12]
   b8b0e:	b17b      	cbz	r3, b8b30 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b8b10:	6943      	ldr	r3, [r0, #20]
   b8b12:	2b00      	cmp	r3, #0
   b8b14:	db0c      	blt.n	b8b30 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b8b16:	ee07 3a90 	vmov	s15, r3
   b8b1a:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8b38 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b8b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b22:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b26:	eddf 7a05 	vldr	s15, [pc, #20]	; b8b3c <_ZNK14CellularSignal11getStrengthEv+0x30>
   b8b2a:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8b2e:	4770      	bx	lr
    return -1.0f;
   b8b30:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8b34:	4770      	bx	lr
   b8b36:	bf00      	nop
   b8b38:	477fff00 	.word	0x477fff00
   b8b3c:	42c80000 	.word	0x42c80000

000b8b40 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b8b40:	7b03      	ldrb	r3, [r0, #12]
   b8b42:	b163      	cbz	r3, b8b5e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b8b44:	6903      	ldr	r3, [r0, #16]
   b8b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8b4a:	d008      	beq.n	b8b5e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b8b4c:	ee07 3a90 	vmov	s15, r3
   b8b50:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8b64 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b8b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b58:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b5c:	4770      	bx	lr
    return 0.0f;
   b8b5e:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8b68 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b8b62:	4770      	bx	lr
   b8b64:	42c80000 	.word	0x42c80000
   b8b68:	00000000 	.word	0x00000000

000b8b6c <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b8b6c:	7b03      	ldrb	r3, [r0, #12]
   b8b6e:	b17b      	cbz	r3, b8b90 <_ZNK14CellularSignal10getQualityEv+0x24>
   b8b70:	69c3      	ldr	r3, [r0, #28]
   b8b72:	2b00      	cmp	r3, #0
   b8b74:	db0c      	blt.n	b8b90 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b8b76:	ee07 3a90 	vmov	s15, r3
   b8b7a:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8b98 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b8b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8b82:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8b86:	eddf 7a05 	vldr	s15, [pc, #20]	; b8b9c <_ZNK14CellularSignal10getQualityEv+0x30>
   b8b8a:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8b8e:	4770      	bx	lr
    return -1.0f;
   b8b90:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8b94:	4770      	bx	lr
   b8b96:	bf00      	nop
   b8b98:	477fff00 	.word	0x477fff00
   b8b9c:	42c80000 	.word	0x42c80000

000b8ba0 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b8ba0:	7b03      	ldrb	r3, [r0, #12]
   b8ba2:	b163      	cbz	r3, b8bbe <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b8ba4:	6983      	ldr	r3, [r0, #24]
   b8ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8baa:	d008      	beq.n	b8bbe <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b8bac:	ee07 3a90 	vmov	s15, r3
   b8bb0:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8bc4 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b8bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8bb8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8bbc:	4770      	bx	lr
    return 0.0f;
   b8bbe:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8bc8 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b8bc2:	4770      	bx	lr
   b8bc4:	42c80000 	.word	0x42c80000
   b8bc8:	00000000 	.word	0x00000000

000b8bcc <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b8bcc:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b8bce:	460d      	mov	r5, r1
   b8bd0:	f100 0408 	add.w	r4, r0, #8
   b8bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8bd8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8bdc:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b8be0:	2001      	movs	r0, #1
   b8be2:	bd30      	pop	{r4, r5, pc}

000b8be4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8be4:	2200      	movs	r2, #0
   b8be6:	6840      	ldr	r0, [r0, #4]
   b8be8:	4611      	mov	r1, r2
   b8bea:	f7ff be15 	b.w	b8818 <network_listening>

000b8bee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8bee:	2200      	movs	r2, #0
   b8bf0:	6840      	ldr	r0, [r0, #4]
   b8bf2:	4611      	mov	r1, r2
   b8bf4:	f7ff be20 	b.w	b8838 <network_get_listen_timeout>

000b8bf8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8bf8:	6840      	ldr	r0, [r0, #4]
   b8bfa:	2200      	movs	r2, #0
   b8bfc:	f7ff be14 	b.w	b8828 <network_set_listen_timeout>

000b8c00 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8c00:	6840      	ldr	r0, [r0, #4]
   b8c02:	2200      	movs	r2, #0
   b8c04:	f081 0101 	eor.w	r1, r1, #1
   b8c08:	f7ff bdfe 	b.w	b8808 <network_listen>

000b8c0c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8c0c:	2300      	movs	r3, #0
   b8c0e:	6840      	ldr	r0, [r0, #4]
   b8c10:	461a      	mov	r2, r3
   b8c12:	4619      	mov	r1, r3
   b8c14:	f7ff bdf0 	b.w	b87f8 <network_off>

000b8c18 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8c18:	2300      	movs	r3, #0
   b8c1a:	6840      	ldr	r0, [r0, #4]
   b8c1c:	461a      	mov	r2, r3
   b8c1e:	4619      	mov	r1, r3
   b8c20:	f7ff bde2 	b.w	b87e8 <network_on>

000b8c24 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8c24:	2200      	movs	r2, #0
   b8c26:	6840      	ldr	r0, [r0, #4]
   b8c28:	4611      	mov	r1, r2
   b8c2a:	f7ff bdd5 	b.w	b87d8 <network_ready>

000b8c2e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8c2e:	2200      	movs	r2, #0
   b8c30:	6840      	ldr	r0, [r0, #4]
   b8c32:	4611      	mov	r1, r2
   b8c34:	f7ff bdc0 	b.w	b87b8 <network_connecting>

000b8c38 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8c38:	6840      	ldr	r0, [r0, #4]
   b8c3a:	2200      	movs	r2, #0
   b8c3c:	2102      	movs	r1, #2
   b8c3e:	f7ff bdc3 	b.w	b87c8 <network_disconnect>

000b8c42 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8c42:	2300      	movs	r3, #0
   b8c44:	6840      	ldr	r0, [r0, #4]
   b8c46:	461a      	mov	r2, r3
   b8c48:	f7ff bdae 	b.w	b87a8 <network_connect>

000b8c4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b8c4c:	4b02      	ldr	r3, [pc, #8]	; (b8c58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8c4e:	2203      	movs	r2, #3
   b8c50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8c52:	4a02      	ldr	r2, [pc, #8]	; (b8c5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8c54:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8c56:	4770      	bx	lr
   b8c58:	2003e644 	.word	0x2003e644
   b8c5c:	000bd1ac 	.word	0x000bd1ac

000b8c60 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b8c60:	6800      	ldr	r0, [r0, #0]
   b8c62:	f000 b8e7 	b.w	b8e34 <_ZN7TwoWire4lockEv>

000b8c66 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b8c66:	b510      	push	{r4, lr}
   b8c68:	4604      	mov	r4, r0
      lock_(_lock) {
   b8c6a:	6001      	str	r1, [r0, #0]
   b8c6c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b8c6e:	b10a      	cbz	r2, b8c74 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b8c70:	f7ff fff6 	bl	b8c60 <_ZN9FuelGauge4lockEv>
}
   b8c74:	4620      	mov	r0, r4
   b8c76:	bd10      	pop	{r4, pc}

000b8c78 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b8c78:	b513      	push	{r0, r1, r4, lr}
   b8c7a:	4604      	mov	r4, r0
   b8c7c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b8c7e:	f002 fc1f 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8c82:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b8c84:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b8c86:	4620      	mov	r0, r4
   b8c88:	f7ff ffed 	bl	b8c66 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8c8c:	4620      	mov	r0, r4
   b8c8e:	b002      	add	sp, #8
   b8c90:	bd10      	pop	{r4, pc}

000b8c92 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b8c92:	6800      	ldr	r0, [r0, #0]
   b8c94:	f000 b8d7 	b.w	b8e46 <_ZN7TwoWire6unlockEv>

000b8c98 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b8c98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8c9c:	4604      	mov	r4, r0
   b8c9e:	461d      	mov	r5, r3
   b8ca0:	460f      	mov	r7, r1
   b8ca2:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b8ca4:	f7ff ffdc 	bl	b8c60 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8ca8:	2236      	movs	r2, #54	; 0x36
   b8caa:	2300      	movs	r3, #0
   b8cac:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b8cb0:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b8cb2:	f04f 0801 	mov.w	r8, #1
   b8cb6:	230a      	movs	r3, #10
   b8cb8:	4669      	mov	r1, sp
   b8cba:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8cbe:	f000 f89d 	bl	b8dfc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b8cc2:	6820      	ldr	r0, [r4, #0]
   b8cc4:	6803      	ldr	r3, [r0, #0]
   b8cc6:	4639      	mov	r1, r7
   b8cc8:	689b      	ldr	r3, [r3, #8]
   b8cca:	4798      	blx	r3
    i2c_.write(MSB);
   b8ccc:	6820      	ldr	r0, [r4, #0]
   b8cce:	6803      	ldr	r3, [r0, #0]
   b8cd0:	4631      	mov	r1, r6
   b8cd2:	689b      	ldr	r3, [r3, #8]
   b8cd4:	4798      	blx	r3
    i2c_.write(LSB);
   b8cd6:	6820      	ldr	r0, [r4, #0]
   b8cd8:	6803      	ldr	r3, [r0, #0]
   b8cda:	4629      	mov	r1, r5
   b8cdc:	689b      	ldr	r3, [r3, #8]
   b8cde:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b8ce0:	4641      	mov	r1, r8
   b8ce2:	6820      	ldr	r0, [r4, #0]
   b8ce4:	f000 f8a2 	bl	b8e2c <_ZN7TwoWire15endTransmissionEh>
   b8ce8:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b8cea:	4620      	mov	r0, r4
   b8cec:	bf0c      	ite	eq
   b8cee:	2500      	moveq	r5, #0
   b8cf0:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b8cf4:	f7ff ffcd 	bl	b8c92 <_ZN9FuelGauge6unlockEv>
}
   b8cf8:	4628      	mov	r0, r5
   b8cfa:	b004      	add	sp, #16
   b8cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8d00 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b8d00:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b8d02:	2240      	movs	r2, #64	; 0x40
   b8d04:	2300      	movs	r3, #0
   b8d06:	2106      	movs	r1, #6
   b8d08:	f7ff ffc6 	bl	b8c98 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b8d0c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8d10:	bd08      	pop	{r3, pc}

000b8d12 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8d12:	4770      	bx	lr

000b8d14 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d16:	4606      	mov	r6, r0
   b8d18:	4615      	mov	r5, r2
   b8d1a:	460c      	mov	r4, r1
   b8d1c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8d1e:	42bc      	cmp	r4, r7
   b8d20:	d006      	beq.n	b8d30 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8d22:	6833      	ldr	r3, [r6, #0]
   b8d24:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8d28:	689b      	ldr	r3, [r3, #8]
   b8d2a:	4630      	mov	r0, r6
   b8d2c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8d2e:	e7f6      	b.n	b8d1e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8d30:	4628      	mov	r0, r5
   b8d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8d34 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8d34:	7c00      	ldrb	r0, [r0, #16]
   b8d36:	2200      	movs	r2, #0
   b8d38:	f7ff bb2a 	b.w	b8390 <hal_i2c_write>

000b8d3c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8d3c:	7c00      	ldrb	r0, [r0, #16]
   b8d3e:	2100      	movs	r1, #0
   b8d40:	f7ff bb2e 	b.w	b83a0 <hal_i2c_available>

000b8d44 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8d44:	7c00      	ldrb	r0, [r0, #16]
   b8d46:	2100      	movs	r1, #0
   b8d48:	f7ff bb32 	b.w	b83b0 <hal_i2c_read>

000b8d4c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8d4c:	7c00      	ldrb	r0, [r0, #16]
   b8d4e:	2100      	movs	r1, #0
   b8d50:	f7ff bb36 	b.w	b83c0 <hal_i2c_peek>

000b8d54 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8d54:	7c00      	ldrb	r0, [r0, #16]
   b8d56:	2100      	movs	r1, #0
   b8d58:	f7ff bb3a 	b.w	b83d0 <hal_i2c_flush>

000b8d5c <_ZN7TwoWireD0Ev>:
   b8d5c:	b510      	push	{r4, lr}
   b8d5e:	2114      	movs	r1, #20
   b8d60:	4604      	mov	r4, r0
   b8d62:	f7fb f99c 	bl	b409e <_ZdlPvj>
   b8d66:	4620      	mov	r0, r4
   b8d68:	bd10      	pop	{r4, pc}
	...

000b8d6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8d6c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8d72:	4604      	mov	r4, r0
   b8d74:	4608      	mov	r0, r1
   b8d76:	2100      	movs	r1, #0
   b8d78:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8d7c:	4b03      	ldr	r3, [pc, #12]	; (b8d8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8d7e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8d80:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8d82:	4611      	mov	r1, r2
   b8d84:	f7ff fb34 	bl	b83f0 <hal_i2c_init>
}
   b8d88:	4620      	mov	r0, r4
   b8d8a:	bd10      	pop	{r4, pc}
   b8d8c:	000bd1e8 	.word	0x000bd1e8

000b8d90 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8d90:	2300      	movs	r3, #0
   b8d92:	7c00      	ldrb	r0, [r0, #16]
   b8d94:	461a      	mov	r2, r3
   b8d96:	4619      	mov	r1, r3
   b8d98:	f7ff bae2 	b.w	b8360 <hal_i2c_begin>

000b8d9c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8d9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8d9e:	2200      	movs	r2, #0
   b8da0:	2314      	movs	r3, #20
   b8da2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8da6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8daa:	780b      	ldrb	r3, [r1, #0]
   b8dac:	f88d 3008 	strb.w	r3, [sp, #8]
   b8db0:	684b      	ldr	r3, [r1, #4]
   b8db2:	9303      	str	r3, [sp, #12]
   b8db4:	68cb      	ldr	r3, [r1, #12]
   b8db6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8db8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8dba:	7a0b      	ldrb	r3, [r1, #8]
   b8dbc:	9305      	str	r3, [sp, #20]
   b8dbe:	a901      	add	r1, sp, #4
   b8dc0:	f7ff fb2e 	bl	b8420 <hal_i2c_request_ex>
}
   b8dc4:	b007      	add	sp, #28
   b8dc6:	f85d fb04 	ldr.w	pc, [sp], #4

000b8dca <_ZN7TwoWire11requestFromEhjh>:
{
   b8dca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8dcc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8dce:	f88d 1000 	strb.w	r1, [sp]
   b8dd2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8dd6:	9103      	str	r1, [sp, #12]
   b8dd8:	bf18      	it	ne
   b8dda:	2301      	movne	r3, #1
   b8ddc:	4669      	mov	r1, sp
    size_ = size;
   b8dde:	9201      	str	r2, [sp, #4]
   b8de0:	f88d 3008 	strb.w	r3, [sp, #8]
   b8de4:	f7ff ffda 	bl	b8d9c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8de8:	b005      	add	sp, #20
   b8dea:	f85d fb04 	ldr.w	pc, [sp], #4

000b8dee <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8dee:	7c00      	ldrb	r0, [r0, #16]
   b8df0:	2200      	movs	r2, #0
   b8df2:	f7ff babd 	b.w	b8370 <hal_i2c_begin_transmission>

000b8df6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8df6:	b2c9      	uxtb	r1, r1
   b8df8:	f7ff bff9 	b.w	b8dee <_ZN7TwoWire17beginTransmissionEh>

000b8dfc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b8dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8dfe:	2300      	movs	r3, #0
   b8e00:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b8e04:	684a      	ldr	r2, [r1, #4]
   b8e06:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b8e08:	2314      	movs	r3, #20
    };
   b8e0a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b8e0c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b8e10:	780b      	ldrb	r3, [r1, #0]
    };
   b8e12:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8e14:	7a0a      	ldrb	r2, [r1, #8]
   b8e16:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b8e18:	7c00      	ldrb	r0, [r0, #16]
    };
   b8e1a:	f88d 3008 	strb.w	r3, [sp, #8]
   b8e1e:	aa01      	add	r2, sp, #4
   b8e20:	4619      	mov	r1, r3
   b8e22:	f7ff faa5 	bl	b8370 <hal_i2c_begin_transmission>
}
   b8e26:	b007      	add	sp, #28
   b8e28:	f85d fb04 	ldr.w	pc, [sp], #4

000b8e2c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8e2c:	7c00      	ldrb	r0, [r0, #16]
   b8e2e:	2200      	movs	r2, #0
   b8e30:	f7ff baa6 	b.w	b8380 <hal_i2c_end_transmission>

000b8e34 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b8e34:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b8e36:	2100      	movs	r1, #0
   b8e38:	7c00      	ldrb	r0, [r0, #16]
   b8e3a:	f7ff fae1 	bl	b8400 <hal_i2c_lock>
}
   b8e3e:	fab0 f080 	clz	r0, r0
   b8e42:	0940      	lsrs	r0, r0, #5
   b8e44:	bd08      	pop	{r3, pc}

000b8e46 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b8e46:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b8e48:	2100      	movs	r1, #0
   b8e4a:	7c00      	ldrb	r0, [r0, #16]
   b8e4c:	f7ff fae0 	bl	b8410 <hal_i2c_unlock>
}
   b8e50:	fab0 f080 	clz	r0, r0
   b8e54:	0940      	lsrs	r0, r0, #5
   b8e56:	bd08      	pop	{r3, pc}

000b8e58 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b8e58:	4700      	bx	r0
	...

000b8e5c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b8e5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b8e60:	2400      	movs	r4, #0
{
   b8e62:	461d      	mov	r5, r3
   b8e64:	460f      	mov	r7, r1
   b8e66:	4690      	mov	r8, r2
   b8e68:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b8e6a:	f7ff fa69 	bl	b8340 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b8e6e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8e70:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b8e74:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b8e78:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b8e7c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b8e80:	bfa2      	ittt	ge
   b8e82:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b8e86:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b8e8a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8e8c:	4907      	ldr	r1, [pc, #28]	; (b8eac <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b8e8e:	9400      	str	r4, [sp, #0]
   b8e90:	4643      	mov	r3, r8
   b8e92:	463a      	mov	r2, r7
   b8e94:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b8e96:	bfa8      	it	ge
   b8e98:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b8e9c:	f7ff fa48 	bl	b8330 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b8ea0:	fab0 f080 	clz	r0, r0
   b8ea4:	0940      	lsrs	r0, r0, #5
   b8ea6:	b004      	add	sp, #16
   b8ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8eac:	000b8e59 	.word	0x000b8e59

000b8eb0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8eb0:	4770      	bx	lr

000b8eb2 <_ZN9IPAddressD0Ev>:
   b8eb2:	b510      	push	{r4, lr}
   b8eb4:	2118      	movs	r1, #24
   b8eb6:	4604      	mov	r4, r0
   b8eb8:	f7fb f8f1 	bl	b409e <_ZdlPvj>
   b8ebc:	4620      	mov	r0, r4
   b8ebe:	bd10      	pop	{r4, pc}

000b8ec0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8ec2:	7d03      	ldrb	r3, [r0, #20]
   b8ec4:	2b06      	cmp	r3, #6
{
   b8ec6:	b08d      	sub	sp, #52	; 0x34
   b8ec8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8eca:	f100 0704 	add.w	r7, r0, #4
   b8ece:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8ed2:	d012      	beq.n	b8efa <_ZNK9IPAddress7printToER5Print+0x3a>
   b8ed4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b8ed8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8edc:	220a      	movs	r2, #10
   b8ede:	4630      	mov	r0, r6
   b8ee0:	f001 fb49 	bl	ba576 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8ee4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b8ee6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b8ee8:	d019      	beq.n	b8f1e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b8eea:	2c00      	cmp	r4, #0
   b8eec:	d0f4      	beq.n	b8ed8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8eee:	212e      	movs	r1, #46	; 0x2e
   b8ef0:	4630      	mov	r0, r6
   b8ef2:	f001 fb31 	bl	ba558 <_ZN5Print5printEc>
   b8ef6:	4404      	add	r4, r0
   b8ef8:	e7ee      	b.n	b8ed8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8efa:	232f      	movs	r3, #47	; 0x2f
   b8efc:	466a      	mov	r2, sp
   b8efe:	4639      	mov	r1, r7
   b8f00:	200a      	movs	r0, #10
		buf[0] = 0;
   b8f02:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b8f06:	f7ff fa93 	bl	b8430 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b8f0a:	4668      	mov	r0, sp
   b8f0c:	f003 f90f 	bl	bc12e <strlen>
   b8f10:	6833      	ldr	r3, [r6, #0]
   b8f12:	4602      	mov	r2, r0
   b8f14:	68db      	ldr	r3, [r3, #12]
   b8f16:	4669      	mov	r1, sp
   b8f18:	4630      	mov	r0, r6
   b8f1a:	4798      	blx	r3
   b8f1c:	4604      	mov	r4, r0
    }
    return n;
}
   b8f1e:	4620      	mov	r0, r4
   b8f20:	b00d      	add	sp, #52	; 0x34
   b8f22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8f24 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8f24:	b510      	push	{r4, lr}
   b8f26:	4b05      	ldr	r3, [pc, #20]	; (b8f3c <_ZN9IPAddressC1Ev+0x18>)
   b8f28:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b8f2a:	2211      	movs	r2, #17
   b8f2c:	f840 3b04 	str.w	r3, [r0], #4
   b8f30:	2100      	movs	r1, #0
   b8f32:	f003 f85f 	bl	bbff4 <memset>
}
   b8f36:	4620      	mov	r0, r4
   b8f38:	bd10      	pop	{r4, pc}
   b8f3a:	bf00      	nop
   b8f3c:	000bd210 	.word	0x000bd210

000b8f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8f40:	4603      	mov	r3, r0
   b8f42:	4a07      	ldr	r2, [pc, #28]	; (b8f60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8f44:	b510      	push	{r4, lr}
   b8f46:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b8f4a:	f101 0210 	add.w	r2, r1, #16
   b8f4e:	f851 4b04 	ldr.w	r4, [r1], #4
   b8f52:	f843 4b04 	str.w	r4, [r3], #4
   b8f56:	4291      	cmp	r1, r2
   b8f58:	d1f9      	bne.n	b8f4e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b8f5a:	780a      	ldrb	r2, [r1, #0]
   b8f5c:	701a      	strb	r2, [r3, #0]
}
   b8f5e:	bd10      	pop	{r4, pc}
   b8f60:	000bd210 	.word	0x000bd210

000b8f64 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8f64:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8f66:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b8f6a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b8f6e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8f72:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8f76:	2304      	movs	r3, #4
   b8f78:	6041      	str	r1, [r0, #4]
   b8f7a:	7503      	strb	r3, [r0, #20]
}
   b8f7c:	bd10      	pop	{r4, pc}
	...

000b8f80 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8f80:	b507      	push	{r0, r1, r2, lr}
   b8f82:	4b06      	ldr	r3, [pc, #24]	; (b8f9c <_ZN9IPAddressC1EPKh+0x1c>)
   b8f84:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8f86:	78cb      	ldrb	r3, [r1, #3]
   b8f88:	9300      	str	r3, [sp, #0]
   b8f8a:	788b      	ldrb	r3, [r1, #2]
   b8f8c:	784a      	ldrb	r2, [r1, #1]
   b8f8e:	7809      	ldrb	r1, [r1, #0]
   b8f90:	f7ff ffe8 	bl	b8f64 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8f94:	b003      	add	sp, #12
   b8f96:	f85d fb04 	ldr.w	pc, [sp], #4
   b8f9a:	bf00      	nop
   b8f9c:	000bd210 	.word	0x000bd210

000b8fa0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b8fa0:	f100 0310 	add.w	r3, r0, #16
   b8fa4:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b8fa6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b8faa:	2901      	cmp	r1, #1
   b8fac:	4618      	mov	r0, r3
   b8fae:	d108      	bne.n	b8fc2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b8fb0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b8fb4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b8fb8:	3a01      	subs	r2, #1
   b8fba:	f103 0310 	add.w	r3, r3, #16
   b8fbe:	d1f2      	bne.n	b8fa6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b8fc0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b8fc2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b8fc4:	bf04      	itt	eq
   b8fc6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b8fca:	1852      	addeq	r2, r2, r1
   b8fcc:	e7f4      	b.n	b8fb8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b8fce <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b8fce:	b40e      	push	{r1, r2, r3}
   b8fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8fd2:	b088      	sub	sp, #32
   b8fd4:	af00      	add	r7, sp, #0
   b8fd6:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fda:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8fdc:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fe0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8fe2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fe4:	462b      	mov	r3, r5
   b8fe6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b8fe8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8fea:	f7ff fc65 	bl	b88b8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b8fee:	280f      	cmp	r0, #15
   b8ff0:	687a      	ldr	r2, [r7, #4]
   b8ff2:	d91a      	bls.n	b902a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b8ff4:	f100 0308 	add.w	r3, r0, #8
   b8ff8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b8ffc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b8ffe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b9002:	1c41      	adds	r1, r0, #1
   b9004:	462b      	mov	r3, r5
   b9006:	4668      	mov	r0, sp
        va_start(args, fmt);
   b9008:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b900a:	f7ff fc55 	bl	b88b8 <vsnprintf>
        if (n > 0) {
   b900e:	1e02      	subs	r2, r0, #0
   b9010:	dd04      	ble.n	b901c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b9012:	6823      	ldr	r3, [r4, #0]
   b9014:	4669      	mov	r1, sp
   b9016:	689b      	ldr	r3, [r3, #8]
   b9018:	4620      	mov	r0, r4
   b901a:	4798      	blx	r3
   b901c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b901e:	3720      	adds	r7, #32
   b9020:	46bd      	mov	sp, r7
   b9022:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9026:	b003      	add	sp, #12
   b9028:	4770      	bx	lr
    } else if (n > 0) {
   b902a:	2800      	cmp	r0, #0
   b902c:	d0f7      	beq.n	b901e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b902e:	6823      	ldr	r3, [r4, #0]
   b9030:	4602      	mov	r2, r0
   b9032:	689b      	ldr	r3, [r3, #8]
   b9034:	f107 0110 	add.w	r1, r7, #16
   b9038:	4620      	mov	r0, r4
   b903a:	4798      	blx	r3
}
   b903c:	e7ef      	b.n	b901e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b903e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b903e:	b538      	push	{r3, r4, r5, lr}
   b9040:	680b      	ldr	r3, [r1, #0]
   b9042:	6003      	str	r3, [r0, #0]
   b9044:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b9046:	6843      	ldr	r3, [r0, #4]
   b9048:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b904a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b904c:	d008      	beq.n	b9060 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b904e:	b115      	cbz	r5, b9056 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b9050:	686b      	ldr	r3, [r5, #4]
   b9052:	3301      	adds	r3, #1
   b9054:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b9056:	6860      	ldr	r0, [r4, #4]
   b9058:	b108      	cbz	r0, b905e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b905a:	f7ff fc78 	bl	b894e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b905e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9060:	bd38      	pop	{r3, r4, r5, pc}

000b9062 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b9062:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9064:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b9066:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b906a:	689b      	ldr	r3, [r3, #8]
   b906c:	2201      	movs	r2, #1
   b906e:	f10d 0107 	add.w	r1, sp, #7
   b9072:	4798      	blx	r3
}
   b9074:	b003      	add	sp, #12
   b9076:	f85d fb04 	ldr.w	pc, [sp], #4

000b907a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b907a:	460b      	mov	r3, r1
   b907c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b907e:	2200      	movs	r2, #0
   b9080:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b9082:	e9c0 2200 	strd	r2, r2, [r0]
   b9086:	4604      	mov	r4, r0
        t_ = t;
   b9088:	6083      	str	r3, [r0, #8]
    if (t) {
   b908a:	b90b      	cbnz	r3, b9090 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b908c:	4620      	mov	r0, r4
   b908e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b9090:	f7ff ffd5 	bl	b903e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b9094:	e7fa      	b.n	b908c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b9096 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b9096:	6883      	ldr	r3, [r0, #8]
   b9098:	b1eb      	cbz	r3, b90d6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b909a:	781a      	ldrb	r2, [r3, #0]
   b909c:	2a03      	cmp	r2, #3
   b909e:	d81a      	bhi.n	b90d6 <_ZNK5spark9JSONValue4typeEv+0x40>
   b90a0:	e8df f002 	tbb	[pc, r2]
   b90a4:	1b021704 	.word	0x1b021704
   b90a8:	2005      	movs	r0, #5
   b90aa:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b90ac:	6802      	ldr	r2, [r0, #0]
   b90ae:	685b      	ldr	r3, [r3, #4]
   b90b0:	6852      	ldr	r2, [r2, #4]
   b90b2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b90b4:	282d      	cmp	r0, #45	; 0x2d
   b90b6:	d012      	beq.n	b90de <_ZNK5spark9JSONValue4typeEv+0x48>
   b90b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b90bc:	2b09      	cmp	r3, #9
   b90be:	d90e      	bls.n	b90de <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b90c0:	2874      	cmp	r0, #116	; 0x74
   b90c2:	d00e      	beq.n	b90e2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b90c4:	2866      	cmp	r0, #102	; 0x66
   b90c6:	d00c      	beq.n	b90e2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b90c8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b90cc:	4258      	negs	r0, r3
   b90ce:	4158      	adcs	r0, r3
   b90d0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b90d2:	2006      	movs	r0, #6
   b90d4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b90d6:	2000      	movs	r0, #0
   b90d8:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b90da:	2004      	movs	r0, #4
   b90dc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b90de:	2003      	movs	r0, #3
   b90e0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b90e2:	2002      	movs	r0, #2
}
   b90e4:	4770      	bx	lr

000b90e6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b90e6:	b510      	push	{r4, lr}
   b90e8:	4604      	mov	r4, r0
    switch (type()) {
   b90ea:	f7ff ffd4 	bl	b9096 <_ZNK5spark9JSONValue4typeEv>
   b90ee:	2802      	cmp	r0, #2
   b90f0:	d00e      	beq.n	b9110 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b90f2:	1ec3      	subs	r3, r0, #3
   b90f4:	b2db      	uxtb	r3, r3
   b90f6:	2b01      	cmp	r3, #1
   b90f8:	d814      	bhi.n	b9124 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b90fa:	6822      	ldr	r2, [r4, #0]
   b90fc:	68a3      	ldr	r3, [r4, #8]
   b90fe:	6850      	ldr	r0, [r2, #4]
   b9100:	685b      	ldr	r3, [r3, #4]
}
   b9102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b9106:	220a      	movs	r2, #10
   b9108:	2100      	movs	r1, #0
   b910a:	4418      	add	r0, r3
   b910c:	f003 b8d4 	b.w	bc2b8 <strtol>
        const char* const s = d_->json + t_->start;
   b9110:	6822      	ldr	r2, [r4, #0]
   b9112:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b9114:	6852      	ldr	r2, [r2, #4]
   b9116:	685b      	ldr	r3, [r3, #4]
   b9118:	5cd0      	ldrb	r0, [r2, r3]
   b911a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b911e:	4258      	negs	r0, r3
   b9120:	4158      	adcs	r0, r3
}
   b9122:	bd10      	pop	{r4, pc}
    switch (type()) {
   b9124:	2000      	movs	r0, #0
   b9126:	e7fc      	b.n	b9122 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b9128 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9128:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b912a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b912c:	e9c0 3300 	strd	r3, r3, [r0]
   b9130:	4604      	mov	r4, r0
        n_(0) {
   b9132:	480e      	ldr	r0, [pc, #56]	; (b916c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b9134:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b9138:	b1a9      	cbz	r1, b9166 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b913a:	780b      	ldrb	r3, [r1, #0]
   b913c:	2b03      	cmp	r3, #3
   b913e:	d006      	beq.n	b914e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9140:	b98b      	cbnz	r3, b9166 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b9142:	6813      	ldr	r3, [r2, #0]
   b9144:	6858      	ldr	r0, [r3, #4]
   b9146:	684b      	ldr	r3, [r1, #4]
   b9148:	5cc3      	ldrb	r3, [r0, r3]
   b914a:	2b6e      	cmp	r3, #110	; 0x6e
   b914c:	d007      	beq.n	b915e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b914e:	6813      	ldr	r3, [r2, #0]
   b9150:	684d      	ldr	r5, [r1, #4]
   b9152:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b9154:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b9156:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b9158:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b915a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b915c:	60e3      	str	r3, [r4, #12]
   b915e:	4611      	mov	r1, r2
   b9160:	4620      	mov	r0, r4
   b9162:	f7ff ff6c 	bl	b903e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9166:	4620      	mov	r0, r4
   b9168:	bd38      	pop	{r3, r4, r5, pc}
   b916a:	bf00      	nop
   b916c:	000bd279 	.word	0x000bd279

000b9170 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9170:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9172:	2500      	movs	r5, #0
   b9174:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b9176:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b917a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b917e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9182:	4604      	mov	r4, r0
   b9184:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b9186:	b14b      	cbz	r3, b919c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b9188:	781a      	ldrb	r2, [r3, #0]
   b918a:	2a01      	cmp	r2, #1
   b918c:	d106      	bne.n	b919c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b918e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b9192:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b9194:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b9196:	6143      	str	r3, [r0, #20]
   b9198:	f7ff ff51 	bl	b903e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b919c:	4620      	mov	r0, r4
   b919e:	bd38      	pop	{r3, r4, r5, pc}

000b91a0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b91a0:	b510      	push	{r4, lr}
    if (!n_) {
   b91a2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b91a4:	4604      	mov	r4, r0
    if (!n_) {
   b91a6:	b163      	cbz	r3, b91c2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b91a8:	6880      	ldr	r0, [r0, #8]
   b91aa:	60e0      	str	r0, [r4, #12]
    --n_;
   b91ac:	3b01      	subs	r3, #1
    ++t_;
   b91ae:	3010      	adds	r0, #16
   b91b0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b91b2:	6120      	str	r0, [r4, #16]
    --n_;
   b91b4:	6163      	str	r3, [r4, #20]
    if (n_) {
   b91b6:	b113      	cbz	r3, b91be <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b91b8:	f7ff fef2 	bl	b8fa0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b91bc:	60a0      	str	r0, [r4, #8]
    return true;
   b91be:	2001      	movs	r0, #1
   b91c0:	e000      	b.n	b91c4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b91c2:	4618      	mov	r0, r3
}
   b91c4:	bd10      	pop	{r4, pc}

000b91c6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b91c6:	b510      	push	{r4, lr}
    write('}');
   b91c8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b91ca:	4604      	mov	r4, r0
    write('}');
   b91cc:	f7ff ff49 	bl	b9062 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b91d0:	2301      	movs	r3, #1
   b91d2:	7123      	strb	r3, [r4, #4]
}
   b91d4:	4620      	mov	r0, r4
   b91d6:	bd10      	pop	{r4, pc}

000b91d8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b91d8:	b508      	push	{r3, lr}
    switch (state_) {
   b91da:	7903      	ldrb	r3, [r0, #4]
   b91dc:	2b01      	cmp	r3, #1
   b91de:	d002      	beq.n	b91e6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b91e0:	2b02      	cmp	r3, #2
   b91e2:	d004      	beq.n	b91ee <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b91e4:	bd08      	pop	{r3, pc}
        write(',');
   b91e6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b91e8:	f7ff ff3b 	bl	b9062 <_ZN5spark10JSONWriter5writeEc>
}
   b91ec:	e7fa      	b.n	b91e4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b91ee:	213a      	movs	r1, #58	; 0x3a
   b91f0:	e7fa      	b.n	b91e8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b91f2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b91f2:	b510      	push	{r4, lr}
   b91f4:	4604      	mov	r4, r0
    writeSeparator();
   b91f6:	f7ff ffef 	bl	b91d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b91fa:	4620      	mov	r0, r4
   b91fc:	217b      	movs	r1, #123	; 0x7b
   b91fe:	f7ff ff30 	bl	b9062 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b9202:	2300      	movs	r3, #0
   b9204:	7123      	strb	r3, [r4, #4]
}
   b9206:	4620      	mov	r0, r4
   b9208:	bd10      	pop	{r4, pc}
	...

000b920c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b920c:	b513      	push	{r0, r1, r4, lr}
   b920e:	4604      	mov	r4, r0
   b9210:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9212:	f7ff ffe1 	bl	b91d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b9216:	6823      	ldr	r3, [r4, #0]
   b9218:	9a01      	ldr	r2, [sp, #4]
   b921a:	68db      	ldr	r3, [r3, #12]
   b921c:	4903      	ldr	r1, [pc, #12]	; (b922c <_ZN5spark10JSONWriter5valueEi+0x20>)
   b921e:	4620      	mov	r0, r4
   b9220:	4798      	blx	r3
    state_ = NEXT;
   b9222:	2301      	movs	r3, #1
}
   b9224:	4620      	mov	r0, r4
    state_ = NEXT;
   b9226:	7123      	strb	r3, [r4, #4]
}
   b9228:	b002      	add	sp, #8
   b922a:	bd10      	pop	{r4, pc}
   b922c:	000bcc33 	.word	0x000bcc33

000b9230 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b9230:	b513      	push	{r0, r1, r4, lr}
   b9232:	4604      	mov	r4, r0
   b9234:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b9236:	f7ff ffcf 	bl	b91d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b923a:	6823      	ldr	r3, [r4, #0]
   b923c:	9a01      	ldr	r2, [sp, #4]
   b923e:	68db      	ldr	r3, [r3, #12]
   b9240:	4903      	ldr	r1, [pc, #12]	; (b9250 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b9242:	4620      	mov	r0, r4
   b9244:	4798      	blx	r3
    state_ = NEXT;
   b9246:	2301      	movs	r3, #1
}
   b9248:	4620      	mov	r0, r4
    state_ = NEXT;
   b924a:	7123      	strb	r3, [r4, #4]
}
   b924c:	b002      	add	sp, #8
   b924e:	bd10      	pop	{r4, pc}
   b9250:	000bcbbe 	.word	0x000bcbbe

000b9254 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9258:	460d      	mov	r5, r1
    write('"');
   b925a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b925c:	4690      	mov	r8, r2
   b925e:	4604      	mov	r4, r0
    write('"');
   b9260:	f7ff feff 	bl	b9062 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b9264:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b930c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b9268:	44a8      	add	r8, r5
    const char *s = str;
   b926a:	462f      	mov	r7, r5
    while (s != end) {
   b926c:	4547      	cmp	r7, r8
   b926e:	46ba      	mov	sl, r7
   b9270:	d03d      	beq.n	b92ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b9272:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b9276:	2e22      	cmp	r6, #34	; 0x22
   b9278:	d006      	beq.n	b9288 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b927a:	2e5c      	cmp	r6, #92	; 0x5c
   b927c:	d004      	beq.n	b9288 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b927e:	4630      	mov	r0, r6
   b9280:	f002 fe88 	bl	bbf94 <isprint>
   b9284:	2800      	cmp	r0, #0
   b9286:	d1f1      	bne.n	b926c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b9288:	6823      	ldr	r3, [r4, #0]
   b928a:	ebaa 0205 	sub.w	r2, sl, r5
   b928e:	689b      	ldr	r3, [r3, #8]
   b9290:	4629      	mov	r1, r5
   b9292:	4620      	mov	r0, r4
   b9294:	4798      	blx	r3
            write('\\');
   b9296:	215c      	movs	r1, #92	; 0x5c
   b9298:	4620      	mov	r0, r4
   b929a:	f7ff fee2 	bl	b9062 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b929e:	2e0d      	cmp	r6, #13
   b92a0:	d80a      	bhi.n	b92b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b92a2:	2e07      	cmp	r6, #7
   b92a4:	d91c      	bls.n	b92e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b92a6:	f1a6 0308 	sub.w	r3, r6, #8
   b92aa:	2b05      	cmp	r3, #5
   b92ac:	d818      	bhi.n	b92e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b92ae:	e8df f003 	tbb	[pc, r3]
   b92b2:	0f0d      	.short	0x0f0d
   b92b4:	15131711 	.word	0x15131711
   b92b8:	2e22      	cmp	r6, #34	; 0x22
   b92ba:	d001      	beq.n	b92c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b92bc:	2e5c      	cmp	r6, #92	; 0x5c
   b92be:	d10f      	bne.n	b92e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b92c0:	4631      	mov	r1, r6
                write('b');
   b92c2:	4620      	mov	r0, r4
   b92c4:	f7ff fecd 	bl	b9062 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b92c8:	463d      	mov	r5, r7
    while (s != end) {
   b92ca:	e7cf      	b.n	b926c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b92cc:	2162      	movs	r1, #98	; 0x62
   b92ce:	e7f8      	b.n	b92c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b92d0:	2174      	movs	r1, #116	; 0x74
   b92d2:	e7f6      	b.n	b92c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b92d4:	216e      	movs	r1, #110	; 0x6e
   b92d6:	e7f4      	b.n	b92c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b92d8:	2166      	movs	r1, #102	; 0x66
   b92da:	e7f2      	b.n	b92c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b92dc:	2172      	movs	r1, #114	; 0x72
   b92de:	e7f0      	b.n	b92c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b92e0:	6823      	ldr	r3, [r4, #0]
   b92e2:	4632      	mov	r2, r6
   b92e4:	68db      	ldr	r3, [r3, #12]
   b92e6:	4649      	mov	r1, r9
   b92e8:	4620      	mov	r0, r4
   b92ea:	4798      	blx	r3
                break;
   b92ec:	e7ec      	b.n	b92c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b92ee:	42bd      	cmp	r5, r7
   b92f0:	d005      	beq.n	b92fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b92f2:	6823      	ldr	r3, [r4, #0]
   b92f4:	1b7a      	subs	r2, r7, r5
   b92f6:	689b      	ldr	r3, [r3, #8]
   b92f8:	4629      	mov	r1, r5
   b92fa:	4620      	mov	r0, r4
   b92fc:	4798      	blx	r3
    }
    write('"');
   b92fe:	2122      	movs	r1, #34	; 0x22
   b9300:	4620      	mov	r0, r4
   b9302:	f7ff feae 	bl	b9062 <_ZN5spark10JSONWriter5writeEc>
}
   b9306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b930a:	bf00      	nop
   b930c:	000bd21c 	.word	0x000bd21c

000b9310 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b9310:	b513      	push	{r0, r1, r4, lr}
   b9312:	4604      	mov	r4, r0
   b9314:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9318:	f7ff ff5e 	bl	b91d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b931c:	4620      	mov	r0, r4
   b931e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9322:	f7ff ff97 	bl	b9254 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b9326:	2302      	movs	r3, #2
}
   b9328:	4620      	mov	r0, r4
    state_ = VALUE;
   b932a:	7123      	strb	r3, [r4, #4]
}
   b932c:	b002      	add	sp, #8
   b932e:	bd10      	pop	{r4, pc}

000b9330 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b9330:	b513      	push	{r0, r1, r4, lr}
   b9332:	4604      	mov	r4, r0
   b9334:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b9338:	f7ff ff4e 	bl	b91d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b933c:	4620      	mov	r0, r4
   b933e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9342:	f7ff ff87 	bl	b9254 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b9346:	2301      	movs	r3, #1
}
   b9348:	4620      	mov	r0, r4
    state_ = NEXT;
   b934a:	7123      	strb	r3, [r4, #4]
}
   b934c:	b002      	add	sp, #8
   b934e:	bd10      	pop	{r4, pc}

000b9350 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9350:	6880      	ldr	r0, [r0, #8]
   b9352:	6803      	ldr	r3, [r0, #0]
   b9354:	68db      	ldr	r3, [r3, #12]
   b9356:	4718      	bx	r3

000b9358 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9358:	4770      	bx	lr

000b935a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b935a:	4608      	mov	r0, r1
   b935c:	b111      	cbz	r1, b9364 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b935e:	680b      	ldr	r3, [r1, #0]
   b9360:	685b      	ldr	r3, [r3, #4]
   b9362:	4718      	bx	r3
}
   b9364:	4770      	bx	lr

000b9366 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b9366:	4770      	bx	lr

000b9368 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9368:	4770      	bx	lr

000b936a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b936a:	4770      	bx	lr

000b936c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b936c:	4770      	bx	lr

000b936e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b936e:	b538      	push	{r3, r4, r5, lr}
   b9370:	4604      	mov	r4, r0
   b9372:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b9374:	6800      	ldr	r0, [r0, #0]
   b9376:	212e      	movs	r1, #46	; 0x2e
   b9378:	f002 febd 	bl	bc0f6 <strchrnul>
    size = s - category;
   b937c:	6823      	ldr	r3, [r4, #0]
   b937e:	1ac3      	subs	r3, r0, r3
   b9380:	602b      	str	r3, [r5, #0]
    if (size) {
   b9382:	b123      	cbz	r3, b938e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b9384:	7803      	ldrb	r3, [r0, #0]
   b9386:	b103      	cbz	r3, b938a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9388:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b938a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b938c:	6020      	str	r0, [r4, #0]
}
   b938e:	4618      	mov	r0, r3
   b9390:	bd38      	pop	{r3, r4, r5, pc}

000b9392 <_ZN5spark16JSONStreamWriterD0Ev>:
   b9392:	b510      	push	{r4, lr}
   b9394:	210c      	movs	r1, #12
   b9396:	4604      	mov	r4, r0
   b9398:	f7fa fe81 	bl	b409e <_ZdlPvj>
   b939c:	4620      	mov	r0, r4
   b939e:	bd10      	pop	{r4, pc}

000b93a0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b93a0:	b510      	push	{r4, lr}
   b93a2:	2104      	movs	r1, #4
   b93a4:	4604      	mov	r4, r0
   b93a6:	f7fa fe7a 	bl	b409e <_ZdlPvj>
   b93aa:	4620      	mov	r0, r4
   b93ac:	bd10      	pop	{r4, pc}

000b93ae <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b93ae:	b510      	push	{r4, lr}
   b93b0:	2104      	movs	r1, #4
   b93b2:	4604      	mov	r4, r0
   b93b4:	f7fa fe73 	bl	b409e <_ZdlPvj>
   b93b8:	4620      	mov	r0, r4
   b93ba:	bd10      	pop	{r4, pc}

000b93bc <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b93bc:	f7fe bf30 	b.w	b8220 <os_mutex_recursive_lock>

000b93c0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b93c0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b93c2:	f002 fea2 	bl	bc10a <strcmp>
}
   b93c6:	fab0 f080 	clz	r0, r0
   b93ca:	0940      	lsrs	r0, r0, #5
   b93cc:	bd08      	pop	{r3, pc}

000b93ce <__tcf_1>:
   b93ce:	4770      	bx	lr

000b93d0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b93d0:	b510      	push	{r4, lr}
   b93d2:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b93d4:	f001 feb6 	bl	bb144 <_Z16_fetch_usbserialv>
   b93d8:	4284      	cmp	r4, r0
   b93da:	d010      	beq.n	b93fe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b93dc:	f002 f8b0 	bl	bb540 <_Z22__fetch_global_Serial1v>
   b93e0:	4284      	cmp	r4, r0
   b93e2:	d105      	bne.n	b93f0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b93e4:	f002 f8ac 	bl	bb540 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b93e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b93ec:	f001 be43 	b.w	bb076 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b93f0:	b12c      	cbz	r4, b93fe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b93f2:	6823      	ldr	r3, [r4, #0]
   b93f4:	4620      	mov	r0, r4
   b93f6:	685b      	ldr	r3, [r3, #4]
}
   b93f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b93fc:	4718      	bx	r3
   b93fe:	bd10      	pop	{r4, pc}

000b9400 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9400:	680b      	ldr	r3, [r1, #0]
   b9402:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9404:	684b      	ldr	r3, [r1, #4]
   b9406:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9408:	b113      	cbz	r3, b9410 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b940a:	685a      	ldr	r2, [r3, #4]
   b940c:	3201      	adds	r2, #1
   b940e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9410:	4770      	bx	lr

000b9412 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b9412:	b513      	push	{r0, r1, r4, lr}
   b9414:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b9416:	4608      	mov	r0, r1
   b9418:	9101      	str	r1, [sp, #4]
   b941a:	f002 fe88 	bl	bc12e <strlen>
   b941e:	9901      	ldr	r1, [sp, #4]
   b9420:	4602      	mov	r2, r0
   b9422:	4620      	mov	r0, r4
}
   b9424:	b002      	add	sp, #8
   b9426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b942a:	f7ff bf81 	b.w	b9330 <_ZN5spark10JSONWriter5valueEPKcj>

000b942e <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b942e:	b513      	push	{r0, r1, r4, lr}
   b9430:	4604      	mov	r4, r0
    write(str, strlen(str));
   b9432:	4608      	mov	r0, r1
   b9434:	9101      	str	r1, [sp, #4]
   b9436:	f002 fe7a 	bl	bc12e <strlen>
   b943a:	6823      	ldr	r3, [r4, #0]
   b943c:	9901      	ldr	r1, [sp, #4]
   b943e:	68db      	ldr	r3, [r3, #12]
   b9440:	4602      	mov	r2, r0
   b9442:	4620      	mov	r0, r4
}
   b9444:	b002      	add	sp, #8
   b9446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b944a:	4718      	bx	r3

000b944c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b944c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b944e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9450:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9454:	68db      	ldr	r3, [r3, #12]
   b9456:	2201      	movs	r2, #1
   b9458:	f10d 0107 	add.w	r1, sp, #7
   b945c:	4798      	blx	r3
}
   b945e:	b003      	add	sp, #12
   b9460:	f85d fb04 	ldr.w	pc, [sp], #4

000b9464 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9464:	b40e      	push	{r1, r2, r3}
   b9466:	b503      	push	{r0, r1, lr}
   b9468:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b946a:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b946c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9470:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b9472:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b9474:	f001 f975 	bl	ba762 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b9478:	b002      	add	sp, #8
   b947a:	f85d eb04 	ldr.w	lr, [sp], #4
   b947e:	b003      	add	sp, #12
   b9480:	4770      	bx	lr

000b9482 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9482:	680a      	ldr	r2, [r1, #0]
   b9484:	6002      	str	r2, [r0, #0]
   b9486:	684a      	ldr	r2, [r1, #4]
   b9488:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b948a:	2200      	movs	r2, #0
   b948c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9490:	b510      	push	{r4, lr}
   b9492:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9494:	688c      	ldr	r4, [r1, #8]
   b9496:	6084      	str	r4, [r0, #8]
   b9498:	68cc      	ldr	r4, [r1, #12]
   b949a:	60c4      	str	r4, [r0, #12]
   b949c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b949e:	608a      	str	r2, [r1, #8]
   b94a0:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b94a2:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b94a4:	610a      	str	r2, [r1, #16]
   b94a6:	bd10      	pop	{r4, pc}

000b94a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b94a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b94ac:	e9d0 8400 	ldrd	r8, r4, [r0]
   b94b0:	f04f 0a14 	mov.w	sl, #20
   b94b4:	9300      	str	r3, [sp, #0]
   b94b6:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b94ba:	4b18      	ldr	r3, [pc, #96]	; (b951c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b94bc:	10a4      	asrs	r4, r4, #2
   b94be:	4617      	mov	r7, r2
   b94c0:	435c      	muls	r4, r3
   b94c2:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b94c4:	2c00      	cmp	r4, #0
   b94c6:	dd21      	ble.n	b950c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b94c8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b94ca:	fb0a f006 	mul.w	r0, sl, r6
   b94ce:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b94d2:	463a      	mov	r2, r7
   b94d4:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b94d8:	5828      	ldr	r0, [r5, r0]
   b94da:	9101      	str	r1, [sp, #4]
   b94dc:	455f      	cmp	r7, fp
   b94de:	bf28      	it	cs
   b94e0:	465a      	movcs	r2, fp
   b94e2:	f002 fe2c 	bl	bc13e <strncmp>
                if (cmp == 0) {
   b94e6:	2800      	cmp	r0, #0
   b94e8:	9901      	ldr	r1, [sp, #4]
   b94ea:	f04f 0301 	mov.w	r3, #1
   b94ee:	d10b      	bne.n	b9508 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b94f0:	455f      	cmp	r7, fp
   b94f2:	d103      	bne.n	b94fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b94f4:	9a00      	ldr	r2, [sp, #0]
   b94f6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b94f8:	4634      	mov	r4, r6
   b94fa:	e7e3      	b.n	b94c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b94fc:	d9fc      	bls.n	b94f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b94fe:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b9500:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b9504:	3e01      	subs	r6, #1
   b9506:	e7f7      	b.n	b94f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b9508:	dbf9      	blt.n	b94fe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b950a:	e7f5      	b.n	b94f8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b950c:	eba5 0508 	sub.w	r5, r5, r8
}
   b9510:	4802      	ldr	r0, [pc, #8]	; (b951c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b9512:	10ad      	asrs	r5, r5, #2
   b9514:	4368      	muls	r0, r5
   b9516:	b003      	add	sp, #12
   b9518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b951c:	cccccccd 	.word	0xcccccccd

000b9520 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9520:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b9522:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b9524:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b9526:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b9528:	b303      	cbz	r3, b956c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b952a:	b1f9      	cbz	r1, b956c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b952c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b952e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b9532:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b9534:	a903      	add	r1, sp, #12
   b9536:	a801      	add	r0, sp, #4
   b9538:	f7ff ff19 	bl	b936e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b953c:	4601      	mov	r1, r0
   b953e:	b1a8      	cbz	r0, b956c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9540:	f10d 030b 	add.w	r3, sp, #11
   b9544:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b9546:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b954a:	4620      	mov	r0, r4
   b954c:	f7ff ffac 	bl	b94a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9550:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9554:	b153      	cbz	r3, b956c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b9556:	6823      	ldr	r3, [r4, #0]
   b9558:	2414      	movs	r4, #20
   b955a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b955e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9560:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9564:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b9566:	bfa8      	it	ge
   b9568:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b956a:	e7e3      	b.n	b9534 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b956c:	4628      	mov	r0, r5
   b956e:	b004      	add	sp, #16
   b9570:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9574 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9574:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b9576:	4c09      	ldr	r4, [pc, #36]	; (b959c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9578:	7823      	ldrb	r3, [r4, #0]
   b957a:	f3bf 8f5b 	dmb	ish
   b957e:	07db      	lsls	r3, r3, #31
   b9580:	d409      	bmi.n	b9596 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9582:	4620      	mov	r0, r4
   b9584:	f7fa fd9a 	bl	b40bc <__cxa_guard_acquire>
   b9588:	b128      	cbz	r0, b9596 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b958a:	4620      	mov	r0, r4
   b958c:	f7fa fd9b 	bl	b40c6 <__cxa_guard_release>
   b9590:	4803      	ldr	r0, [pc, #12]	; (b95a0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9592:	f002 fcdb 	bl	bbf4c <atexit>
}
   b9596:	4803      	ldr	r0, [pc, #12]	; (b95a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9598:	bd10      	pop	{r4, pc}
   b959a:	bf00      	nop
   b959c:	2003e650 	.word	0x2003e650
   b95a0:	000b9367 	.word	0x000b9367
   b95a4:	2003dec4 	.word	0x2003dec4

000b95a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b95a8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b95aa:	4c09      	ldr	r4, [pc, #36]	; (b95d0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b95ac:	7823      	ldrb	r3, [r4, #0]
   b95ae:	f3bf 8f5b 	dmb	ish
   b95b2:	07db      	lsls	r3, r3, #31
   b95b4:	d409      	bmi.n	b95ca <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b95b6:	4620      	mov	r0, r4
   b95b8:	f7fa fd80 	bl	b40bc <__cxa_guard_acquire>
   b95bc:	b128      	cbz	r0, b95ca <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b95be:	4620      	mov	r0, r4
   b95c0:	f7fa fd81 	bl	b40c6 <__cxa_guard_release>
   b95c4:	4803      	ldr	r0, [pc, #12]	; (b95d4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b95c6:	f002 fcc1 	bl	bbf4c <atexit>
    return &factory;
}
   b95ca:	4803      	ldr	r0, [pc, #12]	; (b95d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b95cc:	bd10      	pop	{r4, pc}
   b95ce:	bf00      	nop
   b95d0:	2003e654 	.word	0x2003e654
   b95d4:	000b93cf 	.word	0x000b93cf
   b95d8:	2003dec8 	.word	0x2003dec8

000b95dc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b95dc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b95de:	2500      	movs	r5, #0
   b95e0:	4604      	mov	r4, r0
   b95e2:	e9c0 5500 	strd	r5, r5, [r0]
   b95e6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b95ea:	6085      	str	r5, [r0, #8]
   b95ec:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b95ee:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b95f2:	f7fe fe05 	bl	b8200 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b95f6:	f7ff ffbd 	bl	b9574 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b95fa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b95fc:	f7ff ffd4 	bl	b95a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b9600:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b9602:	6220      	str	r0, [r4, #32]
}
   b9604:	4620      	mov	r0, r4
   b9606:	bd38      	pop	{r3, r4, r5, pc}

000b9608 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b9608:	b510      	push	{r4, lr}
    static LogManager mgr;
   b960a:	4c0a      	ldr	r4, [pc, #40]	; (b9634 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b960c:	7823      	ldrb	r3, [r4, #0]
   b960e:	f3bf 8f5b 	dmb	ish
   b9612:	07db      	lsls	r3, r3, #31
   b9614:	d40c      	bmi.n	b9630 <_ZN5spark10LogManager8instanceEv+0x28>
   b9616:	4620      	mov	r0, r4
   b9618:	f7fa fd50 	bl	b40bc <__cxa_guard_acquire>
   b961c:	b140      	cbz	r0, b9630 <_ZN5spark10LogManager8instanceEv+0x28>
   b961e:	4806      	ldr	r0, [pc, #24]	; (b9638 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9620:	f7ff ffdc 	bl	b95dc <_ZN5spark10LogManagerC1Ev>
   b9624:	4620      	mov	r0, r4
   b9626:	f7fa fd4e 	bl	b40c6 <__cxa_guard_release>
   b962a:	4804      	ldr	r0, [pc, #16]	; (b963c <_ZN5spark10LogManager8instanceEv+0x34>)
   b962c:	f002 fc8e 	bl	bbf4c <atexit>
    return &mgr;
}
   b9630:	4801      	ldr	r0, [pc, #4]	; (b9638 <_ZN5spark10LogManager8instanceEv+0x30>)
   b9632:	bd10      	pop	{r4, pc}
   b9634:	2003e64c 	.word	0x2003e64c
   b9638:	2003e65c 	.word	0x2003e65c
   b963c:	000b9b5d 	.word	0x000b9b5d

000b9640 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9640:	4a02      	ldr	r2, [pc, #8]	; (b964c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b9642:	4903      	ldr	r1, [pc, #12]	; (b9650 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b9644:	4803      	ldr	r0, [pc, #12]	; (b9654 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b9646:	2300      	movs	r3, #0
   b9648:	f7ff b80a 	b.w	b8660 <log_set_callbacks>
   b964c:	000b9941 	.word	0x000b9941
   b9650:	000b98cd 	.word	0x000b98cd
   b9654:	000b984d 	.word	0x000b984d

000b9658 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9658:	2300      	movs	r3, #0
   b965a:	461a      	mov	r2, r3
   b965c:	4619      	mov	r1, r3
   b965e:	4618      	mov	r0, r3
   b9660:	f7fe bffe 	b.w	b8660 <log_set_callbacks>

000b9664 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9664:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9666:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9668:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b966a:	4668      	mov	r0, sp
   b966c:	f7ff fec8 	bl	b9400 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9670:	466a      	mov	r2, sp
   b9672:	4629      	mov	r1, r5
   b9674:	4620      	mov	r0, r4
   b9676:	f7ff fd7b 	bl	b9170 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b967a:	a801      	add	r0, sp, #4
   b967c:	f7fc f924 	bl	b58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9680:	4620      	mov	r0, r4
   b9682:	b003      	add	sp, #12
   b9684:	bd30      	pop	{r4, r5, pc}

000b9686 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9686:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9688:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b968a:	4604      	mov	r4, r0
   b968c:	4668      	mov	r0, sp
   b968e:	f7ff feb7 	bl	b9400 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9692:	466a      	mov	r2, sp
   b9694:	4629      	mov	r1, r5
   b9696:	4620      	mov	r0, r4
   b9698:	f7ff fd46 	bl	b9128 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b969c:	a801      	add	r0, sp, #4
   b969e:	f7fc f913 	bl	b58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b96a2:	4620      	mov	r0, r4
   b96a4:	b003      	add	sp, #12
   b96a6:	bd30      	pop	{r4, r5, pc}

000b96a8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b96a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b96aa:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b96ac:	4604      	mov	r4, r0
   b96ae:	4668      	mov	r0, sp
   b96b0:	f7ff fea6 	bl	b9400 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b96b4:	466a      	mov	r2, sp
   b96b6:	4629      	mov	r1, r5
   b96b8:	4620      	mov	r0, r4
   b96ba:	f7ff fcde 	bl	b907a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b96be:	a801      	add	r0, sp, #4
   b96c0:	f7fc f902 	bl	b58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b96c4:	4620      	mov	r0, r4
   b96c6:	b003      	add	sp, #12
   b96c8:	bd30      	pop	{r4, r5, pc}
	...

000b96cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b96cc:	b570      	push	{r4, r5, r6, lr}
   b96ce:	b08a      	sub	sp, #40	; 0x28
   b96d0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b96d2:	4601      	mov	r1, r0
   b96d4:	a804      	add	r0, sp, #16
   b96d6:	f7ff ffc5 	bl	b9664 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b96da:	4e14      	ldr	r6, [pc, #80]	; (b972c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b96dc:	a804      	add	r0, sp, #16
   b96de:	f7ff fd5f 	bl	b91a0 <_ZN5spark18JSONObjectIterator4nextEv>
   b96e2:	b1e8      	cbz	r0, b9720 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b96e4:	a904      	add	r1, sp, #16
   b96e6:	4668      	mov	r0, sp
   b96e8:	f7ff ffcd 	bl	b9686 <_ZNK5spark18JSONObjectIterator4nameEv>
   b96ec:	9802      	ldr	r0, [sp, #8]
   b96ee:	4631      	mov	r1, r6
   b96f0:	f7ff fe66 	bl	b93c0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b96f4:	4604      	mov	r4, r0
   b96f6:	b110      	cbz	r0, b96fe <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b96f8:	1e2c      	subs	r4, r5, #0
   b96fa:	bf18      	it	ne
   b96fc:	2401      	movne	r4, #1
   b96fe:	a801      	add	r0, sp, #4
   b9700:	f7fc f8e2 	bl	b58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9704:	2c00      	cmp	r4, #0
   b9706:	d0e9      	beq.n	b96dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b9708:	a904      	add	r1, sp, #16
   b970a:	4668      	mov	r0, sp
   b970c:	f7ff ffcc 	bl	b96a8 <_ZNK5spark18JSONObjectIterator5valueEv>
   b9710:	4668      	mov	r0, sp
   b9712:	f7ff fce8 	bl	b90e6 <_ZNK5spark9JSONValue5toIntEv>
   b9716:	6028      	str	r0, [r5, #0]
   b9718:	a801      	add	r0, sp, #4
   b971a:	f7fc f8d5 	bl	b58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b971e:	e7dd      	b.n	b96dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b9720:	a805      	add	r0, sp, #20
   b9722:	f7fc f8d1 	bl	b58c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9726:	b00a      	add	sp, #40	; 0x28
   b9728:	bd70      	pop	{r4, r5, r6, pc}
   b972a:	bf00      	nop
   b972c:	000bd222 	.word	0x000bd222

000b9730 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9730:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9732:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b9734:	4620      	mov	r0, r4
   b9736:	4913      	ldr	r1, [pc, #76]	; (b9784 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b9738:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b973a:	f002 fce6 	bl	bc10a <strcmp>
   b973e:	b950      	cbnz	r0, b9756 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9740:	f001 fd00 	bl	bb144 <_Z16_fetch_usbserialv>
   b9744:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9748:	f001 fcea 	bl	bb120 <_ZN9USBSerial5beginEl>
}
   b974c:	b003      	add	sp, #12
   b974e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9752:	f001 bcf7 	b.w	bb144 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9756:	490c      	ldr	r1, [pc, #48]	; (b9788 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9758:	4620      	mov	r0, r4
   b975a:	f002 fcd6 	bl	bc10a <strcmp>
   b975e:	b978      	cbnz	r0, b9780 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9760:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9764:	a901      	add	r1, sp, #4
   b9766:	4628      	mov	r0, r5
        int baud = 9600;
   b9768:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b976a:	f7ff ffaf 	bl	b96cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b976e:	f001 fee7 	bl	bb540 <_Z22__fetch_global_Serial1v>
   b9772:	9901      	ldr	r1, [sp, #4]
   b9774:	f001 fc7c 	bl	bb070 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9778:	f001 fee2 	bl	bb540 <_Z22__fetch_global_Serial1v>
}
   b977c:	b003      	add	sp, #12
   b977e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9780:	2000      	movs	r0, #0
   b9782:	e7fb      	b.n	b977c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b9784:	000bd227 	.word	0x000bd227
   b9788:	000bd22e 	.word	0x000bd22e

000b978c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b978c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b978e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b9792:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9794:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9796:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b979a:	42ae      	cmp	r6, r5
   b979c:	d005      	beq.n	b97aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b979e:	f105 0008 	add.w	r0, r5, #8
   b97a2:	f7ff fff3 	bl	b978c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b97a6:	3514      	adds	r5, #20
   b97a8:	e7f7      	b.n	b979a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b97aa:	6820      	ldr	r0, [r4, #0]
   b97ac:	f7ff f864 	bl	b8878 <free>
}
   b97b0:	4620      	mov	r0, r4
   b97b2:	bd70      	pop	{r4, r5, r6, pc}

000b97b4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b97b4:	b510      	push	{r4, lr}
   b97b6:	4604      	mov	r4, r0
   b97b8:	300c      	adds	r0, #12
   b97ba:	f7ff ffe7 	bl	b978c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b97be:	4620      	mov	r0, r4
   b97c0:	f7ff f8d9 	bl	b8976 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b97c4:	4620      	mov	r0, r4
   b97c6:	bd10      	pop	{r4, pc}

000b97c8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b97c8:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b97ca:	4b04      	ldr	r3, [pc, #16]	; (b97dc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b97cc:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b97ce:	f840 3b04 	str.w	r3, [r0], #4
   b97d2:	f7ff ffef 	bl	b97b4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b97d6:	4620      	mov	r0, r4
   b97d8:	bd10      	pop	{r4, pc}
   b97da:	bf00      	nop
   b97dc:	000bca4c 	.word	0x000bca4c

000b97e0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b97e0:	b510      	push	{r4, lr}
   b97e2:	4604      	mov	r4, r0
   b97e4:	f7ff fff0 	bl	b97c8 <_ZN5spark16StreamLogHandlerD1Ev>
   b97e8:	4620      	mov	r0, r4
   b97ea:	2124      	movs	r1, #36	; 0x24
   b97ec:	f7fa fc57 	bl	b409e <_ZdlPvj>
   b97f0:	4620      	mov	r0, r4
   b97f2:	bd10      	pop	{r4, pc}

000b97f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b97f4:	b510      	push	{r4, lr}
   b97f6:	4b03      	ldr	r3, [pc, #12]	; (b9804 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b97f8:	6003      	str	r3, [r0, #0]
   b97fa:	4604      	mov	r4, r0
   b97fc:	f7ff ffe4 	bl	b97c8 <_ZN5spark16StreamLogHandlerD1Ev>
   b9800:	4620      	mov	r0, r4
   b9802:	bd10      	pop	{r4, pc}
   b9804:	000bd2c8 	.word	0x000bd2c8

000b9808 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b9808:	b510      	push	{r4, lr}
   b980a:	4604      	mov	r4, r0
   b980c:	f7ff fff2 	bl	b97f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b9810:	4620      	mov	r0, r4
   b9812:	2124      	movs	r1, #36	; 0x24
   b9814:	f7fa fc43 	bl	b409e <_ZdlPvj>
   b9818:	4620      	mov	r0, r4
   b981a:	bd10      	pop	{r4, pc}

000b981c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b981c:	2200      	movs	r2, #0
   b981e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b9822:	b510      	push	{r4, lr}
        capacity_(0) {
   b9824:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b9826:	680c      	ldr	r4, [r1, #0]
   b9828:	6004      	str	r4, [r0, #0]
   b982a:	684c      	ldr	r4, [r1, #4]
   b982c:	6044      	str	r4, [r0, #4]
   b982e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9830:	600a      	str	r2, [r1, #0]
   b9832:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9834:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9836:	608a      	str	r2, [r1, #8]
}
   b9838:	bd10      	pop	{r4, pc}

000b983a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b983a:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b983c:	6803      	ldr	r3, [r0, #0]
   b983e:	4604      	mov	r4, r0
   b9840:	6818      	ldr	r0, [r3, #0]
   b9842:	f7fe fcf5 	bl	b8230 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b9846:	4620      	mov	r0, r4
   b9848:	bd10      	pop	{r4, pc}
	...

000b984c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b984c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9850:	b087      	sub	sp, #28
   b9852:	4680      	mov	r8, r0
   b9854:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b9856:	4b1c      	ldr	r3, [pc, #112]	; (b98c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9858:	685b      	ldr	r3, [r3, #4]
   b985a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b985e:	4689      	mov	r9, r1
   b9860:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b9862:	b96b      	cbnz	r3, b9880 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b9864:	f7ff fed0 	bl	b9608 <_ZN5spark10LogManager8instanceEv>
   b9868:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b986a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b986e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9870:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b9872:	f7ff fda3 	bl	b93bc <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b9876:	7b23      	ldrb	r3, [r4, #12]
   b9878:	b12b      	cbz	r3, b9886 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b987a:	a805      	add	r0, sp, #20
   b987c:	f7ff ffdd 	bl	b983a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9880:	b007      	add	sp, #28
   b9882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b9886:	2301      	movs	r3, #1
   b9888:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b988a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b988e:	fa5f f989 	uxtb.w	r9, r9
   b9892:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9896:	45aa      	cmp	sl, r5
   b9898:	d012      	beq.n	b98c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b989a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b989e:	4631      	mov	r1, r6
   b98a0:	1d38      	adds	r0, r7, #4
   b98a2:	f7ff fe3d 	bl	b9520 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b98a6:	4581      	cmp	r9, r0
   b98a8:	d3f5      	bcc.n	b9896 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b98aa:	683b      	ldr	r3, [r7, #0]
   b98ac:	9a03      	ldr	r2, [sp, #12]
   b98ae:	9200      	str	r2, [sp, #0]
   b98b0:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b98b4:	464a      	mov	r2, r9
   b98b6:	4633      	mov	r3, r6
   b98b8:	4641      	mov	r1, r8
   b98ba:	4638      	mov	r0, r7
   b98bc:	47d8      	blx	fp
   b98be:	e7ea      	b.n	b9896 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b98c0:	2300      	movs	r3, #0
   b98c2:	7323      	strb	r3, [r4, #12]
   b98c4:	e7d9      	b.n	b987a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b98c6:	bf00      	nop
   b98c8:	e000ed00 	.word	0xe000ed00

000b98cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b98cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98d0:	469b      	mov	fp, r3
   b98d2:	4b1a      	ldr	r3, [pc, #104]	; (b993c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b98d4:	685b      	ldr	r3, [r3, #4]
   b98d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b98da:	4680      	mov	r8, r0
   b98dc:	4689      	mov	r9, r1
   b98de:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b98e0:	b96b      	cbnz	r3, b98fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b98e2:	f7ff fe91 	bl	b9608 <_ZN5spark10LogManager8instanceEv>
   b98e6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b98e8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b98ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b98ee:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b98f0:	f7ff fd64 	bl	b93bc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b98f4:	7b23      	ldrb	r3, [r4, #12]
   b98f6:	b12b      	cbz	r3, b9904 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b98f8:	a801      	add	r0, sp, #4
   b98fa:	f7ff ff9e 	bl	b983a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b98fe:	b003      	add	sp, #12
   b9900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9904:	2301      	movs	r3, #1
   b9906:	7323      	strb	r3, [r4, #12]
   b9908:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b990c:	b2f6      	uxtb	r6, r6
   b990e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9912:	4555      	cmp	r5, sl
   b9914:	d00e      	beq.n	b9934 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9916:	f855 7b04 	ldr.w	r7, [r5], #4
   b991a:	4659      	mov	r1, fp
   b991c:	1d38      	adds	r0, r7, #4
   b991e:	f7ff fdff 	bl	b9520 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9922:	4286      	cmp	r6, r0
   b9924:	d3f5      	bcc.n	b9912 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b9926:	683b      	ldr	r3, [r7, #0]
   b9928:	464a      	mov	r2, r9
   b992a:	68db      	ldr	r3, [r3, #12]
   b992c:	4641      	mov	r1, r8
   b992e:	4638      	mov	r0, r7
   b9930:	4798      	blx	r3
   b9932:	e7ee      	b.n	b9912 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b9934:	2300      	movs	r3, #0
   b9936:	7323      	strb	r3, [r4, #12]
   b9938:	e7de      	b.n	b98f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b993a:	bf00      	nop
   b993c:	e000ed00 	.word	0xe000ed00

000b9940 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9940:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b9944:	4b16      	ldr	r3, [pc, #88]	; (b99a0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b9946:	685b      	ldr	r3, [r3, #4]
   b9948:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b994c:	4605      	mov	r5, r0
   b994e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9950:	bb1b      	cbnz	r3, b999a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b9952:	f7ff fe59 	bl	b9608 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b9956:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b995a:	4604      	mov	r4, r0
   b995c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b995e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9960:	f7ff fd2c 	bl	b93bc <_ZN14RecursiveMutex4lockEv.isra.0>
   b9964:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9968:	2446      	movs	r4, #70	; 0x46
   b996a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b996e:	45b0      	cmp	r8, r6
   b9970:	d109      	bne.n	b9986 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b9972:	a801      	add	r0, sp, #4
   b9974:	f7ff ff61 	bl	b983a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b9978:	42a5      	cmp	r5, r4
   b997a:	bfb4      	ite	lt
   b997c:	2000      	movlt	r0, #0
   b997e:	2001      	movge	r0, #1
}
   b9980:	b002      	add	sp, #8
   b9982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b9986:	f856 0b04 	ldr.w	r0, [r6], #4
   b998a:	4639      	mov	r1, r7
   b998c:	3004      	adds	r0, #4
   b998e:	f7ff fdc7 	bl	b9520 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b9992:	4284      	cmp	r4, r0
   b9994:	bfa8      	it	ge
   b9996:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b9998:	e7e9      	b.n	b996e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b999a:	2000      	movs	r0, #0
   b999c:	e7f0      	b.n	b9980 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b999e:	bf00      	nop
   b99a0:	e000ed00 	.word	0xe000ed00

000b99a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b99a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b99a6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b99aa:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b99ac:	4604      	mov	r4, r0
   b99ae:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b99b0:	db0d      	blt.n	b99ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b99b2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b99b4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b99b6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b99b8:	dd04      	ble.n	b99c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b99ba:	00b9      	lsls	r1, r7, #2
   b99bc:	f7fe ff64 	bl	b8888 <realloc>
            if (!d) {
   b99c0:	b918      	cbnz	r0, b99ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b99c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b99c4:	f7fe ff58 	bl	b8878 <free>
        T* d = nullptr;
   b99c8:	2000      	movs	r0, #0
        data_ = d;
   b99ca:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b99cc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b99ce:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b99d0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b99d2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b99d6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b99d8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b99dc:	1d08      	adds	r0, r1, #4
   b99de:	f002 faef 	bl	bbfc0 <memmove>
    new(p) T(std::move(value));
   b99e2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b99e6:	6863      	ldr	r3, [r4, #4]
   b99e8:	3301      	adds	r3, #1
   b99ea:	6063      	str	r3, [r4, #4]
    return true;
   b99ec:	2001      	movs	r0, #1
   b99ee:	e7e8      	b.n	b99c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b99f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b99f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b99f2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b99f6:	4604      	mov	r4, r0
   b99f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b99fa:	9301      	str	r3, [sp, #4]
   b99fc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b99fe:	f7ff fcdd 	bl	b93bc <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b9a02:	e9d4 3200 	ldrd	r3, r2, [r4]
   b9a06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b9a0a:	4293      	cmp	r3, r2
   b9a0c:	4619      	mov	r1, r3
   b9a0e:	d00b      	beq.n	b9a28 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b9a10:	6809      	ldr	r1, [r1, #0]
   b9a12:	42a9      	cmp	r1, r5
   b9a14:	f103 0304 	add.w	r3, r3, #4
   b9a18:	d1f7      	bne.n	b9a0a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b9a1a:	a801      	add	r0, sp, #4
   b9a1c:	f7ff ff0d 	bl	b983a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9a20:	2500      	movs	r5, #0
}
   b9a22:	4628      	mov	r0, r5
   b9a24:	b003      	add	sp, #12
   b9a26:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b9a28:	4629      	mov	r1, r5
   b9a2a:	4620      	mov	r0, r4
   b9a2c:	f7ff ffba 	bl	b99a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b9a30:	4605      	mov	r5, r0
   b9a32:	2800      	cmp	r0, #0
   b9a34:	d0f1      	beq.n	b9a1a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b9a36:	6863      	ldr	r3, [r4, #4]
   b9a38:	2b01      	cmp	r3, #1
   b9a3a:	d101      	bne.n	b9a40 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b9a3c:	f7ff fe00 	bl	b9640 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9a40:	a801      	add	r0, sp, #4
   b9a42:	f7ff fefa 	bl	b983a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9a46:	e7ec      	b.n	b9a22 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9a48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9a48:	b570      	push	{r4, r5, r6, lr}
   b9a4a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9a4c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9a50:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b9a52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9a56:	4282      	cmp	r2, r0
   b9a58:	d00f      	beq.n	b9a7a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9a5a:	4601      	mov	r1, r0
            if (*p == value) {
   b9a5c:	681d      	ldr	r5, [r3, #0]
   b9a5e:	f851 6b04 	ldr.w	r6, [r1], #4
   b9a62:	42ae      	cmp	r6, r5
   b9a64:	d107      	bne.n	b9a76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9a66:	1a52      	subs	r2, r2, r1
   b9a68:	f002 faaa 	bl	bbfc0 <memmove>
    --size_;
   b9a6c:	6863      	ldr	r3, [r4, #4]
   b9a6e:	3b01      	subs	r3, #1
   b9a70:	6063      	str	r3, [r4, #4]
    return true;
   b9a72:	2001      	movs	r0, #1
}
   b9a74:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9a76:	4608      	mov	r0, r1
   b9a78:	e7ed      	b.n	b9a56 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9a7a:	2000      	movs	r0, #0
   b9a7c:	e7fa      	b.n	b9a74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b9a7e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9a7e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b9a80:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9a84:	4604      	mov	r4, r0
   b9a86:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9a88:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9a8a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9a8c:	f7ff fc96 	bl	b93bc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b9a90:	a901      	add	r1, sp, #4
   b9a92:	4620      	mov	r0, r4
   b9a94:	f7ff ffd8 	bl	b9a48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9a98:	b118      	cbz	r0, b9aa2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9a9a:	6863      	ldr	r3, [r4, #4]
   b9a9c:	b90b      	cbnz	r3, b9aa2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b9a9e:	f7ff fddb 	bl	b9658 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9aa2:	a803      	add	r0, sp, #12
   b9aa4:	f7ff fec9 	bl	b983a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9aa8:	b004      	add	sp, #16
   b9aaa:	bd10      	pop	{r4, pc}

000b9aac <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9aac:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b9aae:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b9ab2:	2318      	movs	r3, #24
   b9ab4:	4604      	mov	r4, r0
   b9ab6:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9aba:	42ae      	cmp	r6, r5
   b9abc:	d015      	beq.n	b9aea <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b9abe:	f105 0110 	add.w	r1, r5, #16
   b9ac2:	4620      	mov	r0, r4
   b9ac4:	f7ff ffc0 	bl	b9a48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9ac8:	6863      	ldr	r3, [r4, #4]
   b9aca:	b90b      	cbnz	r3, b9ad0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9acc:	f7ff fdc4 	bl	b9658 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b9ad0:	69e0      	ldr	r0, [r4, #28]
   b9ad2:	6929      	ldr	r1, [r5, #16]
   b9ad4:	6803      	ldr	r3, [r0, #0]
   b9ad6:	68db      	ldr	r3, [r3, #12]
   b9ad8:	4798      	blx	r3
        if (h.stream) {
   b9ada:	6969      	ldr	r1, [r5, #20]
   b9adc:	b119      	cbz	r1, b9ae6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b9ade:	6a20      	ldr	r0, [r4, #32]
   b9ae0:	6803      	ldr	r3, [r0, #0]
   b9ae2:	68db      	ldr	r3, [r3, #12]
   b9ae4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9ae6:	3518      	adds	r5, #24
   b9ae8:	e7e7      	b.n	b9aba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b9aea:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9aee:	2618      	movs	r6, #24
   b9af0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9af4:	42ae      	cmp	r6, r5
   b9af6:	d004      	beq.n	b9b02 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9af8:	4628      	mov	r0, r5
   b9afa:	f000 ff47 	bl	ba98c <_ZN6StringD1Ev>
   b9afe:	3518      	adds	r5, #24
   b9b00:	e7f8      	b.n	b9af4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b9b02:	2300      	movs	r3, #0
   b9b04:	6163      	str	r3, [r4, #20]
}
   b9b06:	bd70      	pop	{r4, r5, r6, pc}

000b9b08 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b9b08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9b0a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b9b0c:	f7ff fda4 	bl	b9658 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9b10:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b9b14:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9b16:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9b18:	f7ff fc50 	bl	b93bc <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b9b1c:	4620      	mov	r0, r4
   b9b1e:	f7ff ffc5 	bl	b9aac <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b9b22:	a801      	add	r0, sp, #4
   b9b24:	f7ff fe89 	bl	b983a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b9b28:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9b2a:	b108      	cbz	r0, b9b30 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b9b2c:	f7fe fb70 	bl	b8210 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b9b30:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9b34:	2618      	movs	r6, #24
   b9b36:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9b3a:	42ae      	cmp	r6, r5
   b9b3c:	d004      	beq.n	b9b48 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b9b3e:	4628      	mov	r0, r5
   b9b40:	f000 ff24 	bl	ba98c <_ZN6StringD1Ev>
   b9b44:	3518      	adds	r5, #24
   b9b46:	e7f8      	b.n	b9b3a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b9b48:	6920      	ldr	r0, [r4, #16]
   b9b4a:	f7fe fe95 	bl	b8878 <free>
   b9b4e:	6820      	ldr	r0, [r4, #0]
   b9b50:	f7fe fe92 	bl	b8878 <free>
}
   b9b54:	4620      	mov	r0, r4
   b9b56:	b002      	add	sp, #8
   b9b58:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9b5c <__tcf_2>:
    static LogManager mgr;
   b9b5c:	4801      	ldr	r0, [pc, #4]	; (b9b64 <__tcf_2+0x8>)
   b9b5e:	f7ff bfd3 	b.w	b9b08 <_ZN5spark10LogManagerD1Ev>
   b9b62:	bf00      	nop
   b9b64:	2003e65c 	.word	0x2003e65c

000b9b68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9b68:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9b6c:	4604      	mov	r4, r0
   b9b6e:	460d      	mov	r5, r1
   b9b70:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9b72:	d915      	bls.n	b9ba0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9b74:	4290      	cmp	r0, r2
   b9b76:	d214      	bcs.n	b9ba2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9b78:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9b7c:	1a75      	subs	r5, r6, r1
   b9b7e:	f1a1 0714 	sub.w	r7, r1, #20
   b9b82:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9b84:	42b7      	cmp	r7, r6
   b9b86:	d01a      	beq.n	b9bbe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9b88:	b11c      	cbz	r4, b9b92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9b8a:	4631      	mov	r1, r6
   b9b8c:	4620      	mov	r0, r4
   b9b8e:	f7ff fc78 	bl	b9482 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b9b92:	f106 0008 	add.w	r0, r6, #8
   b9b96:	f7ff fdf9 	bl	b978c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9b9a:	3e14      	subs	r6, #20
   b9b9c:	3c14      	subs	r4, #20
   b9b9e:	e7f1      	b.n	b9b84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b9ba0:	d00d      	beq.n	b9bbe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b9ba2:	42b5      	cmp	r5, r6
   b9ba4:	d00b      	beq.n	b9bbe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9ba6:	b11c      	cbz	r4, b9bb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9ba8:	4629      	mov	r1, r5
   b9baa:	4620      	mov	r0, r4
   b9bac:	f7ff fc69 	bl	b9482 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b9bb0:	f105 0008 	add.w	r0, r5, #8
   b9bb4:	f7ff fdea 	bl	b978c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9bb8:	3514      	adds	r5, #20
   b9bba:	3414      	adds	r4, #20
   b9bbc:	e7f1      	b.n	b9ba2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b9bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b9bc0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9bc4:	4604      	mov	r4, r0
   b9bc6:	460d      	mov	r5, r1
   b9bc8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9bca:	d914      	bls.n	b9bf6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9bcc:	4290      	cmp	r0, r2
   b9bce:	d213      	bcs.n	b9bf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b9bd0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9bd4:	1a75      	subs	r5, r6, r1
   b9bd6:	f1a1 0710 	sub.w	r7, r1, #16
   b9bda:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9bdc:	42b7      	cmp	r7, r6
   b9bde:	d018      	beq.n	b9c12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b9be0:	b11c      	cbz	r4, b9bea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b9be2:	4631      	mov	r1, r6
   b9be4:	4620      	mov	r0, r4
   b9be6:	f000 ff4d 	bl	baa84 <_ZN6StringC1EOS_>
                end->~T();
   b9bea:	4630      	mov	r0, r6
   b9bec:	f000 fece 	bl	ba98c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9bf0:	3e10      	subs	r6, #16
   b9bf2:	3c10      	subs	r4, #16
   b9bf4:	e7f2      	b.n	b9bdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9bf6:	d00c      	beq.n	b9c12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9bf8:	42b5      	cmp	r5, r6
   b9bfa:	d00a      	beq.n	b9c12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9bfc:	b11c      	cbz	r4, b9c06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b9bfe:	4629      	mov	r1, r5
   b9c00:	4620      	mov	r0, r4
   b9c02:	f000 ff3f 	bl	baa84 <_ZN6StringC1EOS_>
                p->~T();
   b9c06:	4628      	mov	r0, r5
   b9c08:	f000 fec0 	bl	ba98c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9c0c:	3510      	adds	r5, #16
   b9c0e:	3410      	adds	r4, #16
   b9c10:	e7f2      	b.n	b9bf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b9c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b9c14:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9c16:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9c18:	4605      	mov	r5, r0
        if (n > 0) {
   b9c1a:	dd11      	ble.n	b9c40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9c1c:	0130      	lsls	r0, r6, #4
   b9c1e:	f7fe fe23 	bl	b8868 <malloc>
            if (!d) {
   b9c22:	4604      	mov	r4, r0
   b9c24:	b158      	cbz	r0, b9c3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9c26:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9c2a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b9c2e:	f7ff ffc7 	bl	b9bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b9c32:	6828      	ldr	r0, [r5, #0]
   b9c34:	f7fe fe20 	bl	b8878 <free>
        data_ = d;
   b9c38:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9c3a:	60ae      	str	r6, [r5, #8]
        return true;
   b9c3c:	2001      	movs	r0, #1
    }
   b9c3e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9c40:	2400      	movs	r4, #0
   b9c42:	e7f6      	b.n	b9c32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b9c44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9c48:	4690      	mov	r8, r2
   b9c4a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b9c4c:	2300      	movs	r3, #0
   b9c4e:	9103      	str	r1, [sp, #12]
    return size_;
   b9c50:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b9c54:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9c56:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b9c58:	4299      	cmp	r1, r3
        capacity_(0) {
   b9c5a:	e9c0 3300 	strd	r3, r3, [r0]
   b9c5e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9c66:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9c6a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9c6c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b9c6e:	dc23      	bgt.n	b9cb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b9c70:	e9d8 5700 	ldrd	r5, r7, [r8]
   b9c74:	2314      	movs	r3, #20
   b9c76:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b9c7a:	42af      	cmp	r7, r5
   b9c7c:	d03b      	beq.n	b9cf6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b9c7e:	4629      	mov	r1, r5
   b9c80:	a80b      	add	r0, sp, #44	; 0x2c
   b9c82:	f000 feff 	bl	baa84 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b9c86:	a90b      	add	r1, sp, #44	; 0x2c
   b9c88:	a80f      	add	r0, sp, #60	; 0x3c
   b9c8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b9c8c:	f000 fefa 	bl	baa84 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9c90:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b9c94:	4299      	cmp	r1, r3
   b9c96:	da1b      	bge.n	b9cd0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b9c98:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b9c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b9c9c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b9ca0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b9ca4:	4631      	mov	r1, r6
   b9ca6:	f106 0010 	add.w	r0, r6, #16
   b9caa:	f7ff ff89 	bl	b9bc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b9cae:	b9ee      	cbnz	r6, b9cec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b9cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9cb2:	3301      	adds	r3, #1
   b9cb4:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b9cb6:	e011      	b.n	b9cdc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b9cb8:	a808      	add	r0, sp, #32
   b9cba:	f7ff ffab 	bl	b9c14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9cbe:	2800      	cmp	r0, #0
   b9cc0:	d1d6      	bne.n	b9c70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b9cc2:	a808      	add	r0, sp, #32
   b9cc4:	f7fe fe57 	bl	b8976 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9cc8:	4620      	mov	r0, r4
   b9cca:	b015      	add	sp, #84	; 0x54
   b9ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9cd0:	3101      	adds	r1, #1
   b9cd2:	a808      	add	r0, sp, #32
   b9cd4:	f7ff ff9e 	bl	b9c14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9cd8:	2800      	cmp	r0, #0
   b9cda:	d1dd      	bne.n	b9c98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9cdc:	a80f      	add	r0, sp, #60	; 0x3c
   b9cde:	f000 fe55 	bl	ba98c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b9ce2:	a80b      	add	r0, sp, #44	; 0x2c
   b9ce4:	f000 fe52 	bl	ba98c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9ce8:	3514      	adds	r5, #20
   b9cea:	e7c6      	b.n	b9c7a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9cec:	a90f      	add	r1, sp, #60	; 0x3c
   b9cee:	4630      	mov	r0, r6
   b9cf0:	f000 fec8 	bl	baa84 <_ZN6StringC1EOS_>
   b9cf4:	e7dc      	b.n	b9cb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b9cf6:	2600      	movs	r6, #0
   b9cf8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9cfc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b9cfe:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b9d02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b9d06:	429e      	cmp	r6, r3
   b9d08:	da7c      	bge.n	b9e04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b9d0a:	0133      	lsls	r3, r6, #4
   b9d0c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b9d0e:	9306      	str	r3, [sp, #24]
        if (!category) {
   b9d10:	b90b      	cbnz	r3, b9d16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b9d12:	3601      	adds	r6, #1
   b9d14:	e7f5      	b.n	b9d02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b9d16:	2300      	movs	r3, #0
   b9d18:	9307      	str	r3, [sp, #28]
   b9d1a:	fb09 f306 	mul.w	r3, r9, r6
   b9d1e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b9d20:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b9d22:	a907      	add	r1, sp, #28
   b9d24:	a806      	add	r0, sp, #24
   b9d26:	f7ff fb22 	bl	b936e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9d2a:	4682      	mov	sl, r0
   b9d2c:	2800      	cmp	r0, #0
   b9d2e:	d0f0      	beq.n	b9d12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b9d30:	f04f 0300 	mov.w	r3, #0
   b9d34:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d38:	4601      	mov	r1, r0
   b9d3a:	9a07      	ldr	r2, [sp, #28]
   b9d3c:	f10d 0317 	add.w	r3, sp, #23
   b9d40:	4628      	mov	r0, r5
   b9d42:	f7ff fbb1 	bl	b94a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9d46:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9d4a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9d4c:	2f00      	cmp	r7, #0
   b9d4e:	d14a      	bne.n	b9de6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b9d50:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b9d54:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b9d58:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b9d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9d60:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b9d64:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b9d68:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9d6a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b9d6e:	4293      	cmp	r3, r2
   b9d70:	db17      	blt.n	b9da2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b9d72:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b9d76:	f1ba 0f00 	cmp.w	sl, #0
   b9d7a:	dd30      	ble.n	b9dde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b9d7c:	fb09 f00a 	mul.w	r0, r9, sl
   b9d80:	f7fe fd72 	bl	b8868 <malloc>
            if (!d) {
   b9d84:	4683      	mov	fp, r0
   b9d86:	b360      	cbz	r0, b9de2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b9d88:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9d8c:	fb09 1202 	mla	r2, r9, r2, r1
   b9d90:	f7ff feea 	bl	b9b68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b9d94:	6828      	ldr	r0, [r5, #0]
   b9d96:	f7fe fd6f 	bl	b8878 <free>
        data_ = d;
   b9d9a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b9d9e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b9da2:	682b      	ldr	r3, [r5, #0]
   b9da4:	9a01      	ldr	r2, [sp, #4]
   b9da6:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b9daa:	686a      	ldr	r2, [r5, #4]
   b9dac:	4651      	mov	r1, sl
   b9dae:	fb09 3202 	mla	r2, r9, r2, r3
   b9db2:	f10a 0014 	add.w	r0, sl, #20
   b9db6:	f7ff fed7 	bl	b9b68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b9dba:	f1ba 0f00 	cmp.w	sl, #0
   b9dbe:	d003      	beq.n	b9dc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b9dc0:	a90f      	add	r1, sp, #60	; 0x3c
   b9dc2:	4650      	mov	r0, sl
   b9dc4:	f7ff fb5d 	bl	b9482 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b9dc8:	686b      	ldr	r3, [r5, #4]
   b9dca:	3301      	adds	r3, #1
   b9dcc:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b9dce:	a811      	add	r0, sp, #68	; 0x44
   b9dd0:	f7ff fcdc 	bl	b978c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9dd4:	b13f      	cbz	r7, b9de6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b9dd6:	a80b      	add	r0, sp, #44	; 0x2c
   b9dd8:	f7ff fcd8 	bl	b978c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9ddc:	e771      	b.n	b9cc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b9dde:	46bb      	mov	fp, r7
   b9de0:	e7d8      	b.n	b9d94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9de2:	2701      	movs	r7, #1
   b9de4:	e7f3      	b.n	b9dce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b9de6:	9b01      	ldr	r3, [sp, #4]
   b9de8:	682d      	ldr	r5, [r5, #0]
   b9dea:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b9dee:	9b06      	ldr	r3, [sp, #24]
   b9df0:	781b      	ldrb	r3, [r3, #0]
   b9df2:	b92b      	cbnz	r3, b9e00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b9df4:	f8d8 3000 	ldr.w	r3, [r8]
   b9df8:	9a02      	ldr	r2, [sp, #8]
   b9dfa:	4413      	add	r3, r2
   b9dfc:	7c1b      	ldrb	r3, [r3, #16]
   b9dfe:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b9e00:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b9e02:	e78e      	b.n	b9d22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e04:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b9e06:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e08:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9e0a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e0c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9e0e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b9e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b9e12:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e14:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9e16:	60a2      	str	r2, [r4, #8]
   b9e18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b9e1a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e1c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9e1e:	60e2      	str	r2, [r4, #12]
   b9e20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b9e22:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e24:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9e26:	6122      	str	r2, [r4, #16]
   b9e28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b9e2a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b9e2c:	9b03      	ldr	r3, [sp, #12]
   b9e2e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b9e30:	6162      	str	r2, [r4, #20]
   b9e32:	7623      	strb	r3, [r4, #24]
   b9e34:	e7cf      	b.n	b9dd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b9e38 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e3a:	4604      	mov	r4, r0
   b9e3c:	b087      	sub	sp, #28
   b9e3e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b9e40:	4626      	mov	r6, r4
        stream_(&stream) {
   b9e42:	4619      	mov	r1, r3
   b9e44:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9e46:	4617      	mov	r7, r2
        stream_(&stream) {
   b9e48:	f7fb fd95 	bl	b5976 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b9e4c:	4b0b      	ldr	r3, [pc, #44]	; (b9e7c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b9e4e:	f846 3b04 	str.w	r3, [r6], #4
   b9e52:	4669      	mov	r1, sp
   b9e54:	a803      	add	r0, sp, #12
   b9e56:	f7fb fd8e 	bl	b5976 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b9e5a:	aa03      	add	r2, sp, #12
   b9e5c:	4639      	mov	r1, r7
   b9e5e:	4630      	mov	r0, r6
   b9e60:	f7ff fef0 	bl	b9c44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9e64:	a803      	add	r0, sp, #12
   b9e66:	f7fb fd45 	bl	b58f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b9e6a:	4668      	mov	r0, sp
   b9e6c:	f7fb fd42 	bl	b58f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9e70:	4b03      	ldr	r3, [pc, #12]	; (b9e80 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b9e72:	6023      	str	r3, [r4, #0]
}
   b9e74:	4620      	mov	r0, r4
        stream_(&stream) {
   b9e76:	6225      	str	r5, [r4, #32]
}
   b9e78:	b007      	add	sp, #28
   b9e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9e7c:	000bca4c 	.word	0x000bca4c
   b9e80:	000bd2b0 	.word	0x000bd2b0

000b9e84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b9e84:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9e86:	460f      	mov	r7, r1
   b9e88:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9e8a:	491d      	ldr	r1, [pc, #116]	; (b9f00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b9e8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9e8e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b9e90:	4616      	mov	r6, r2
   b9e92:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9e94:	f002 f939 	bl	bc10a <strcmp>
   b9e98:	b9c0      	cbnz	r0, b9ecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b9e9a:	b1a4      	cbz	r4, b9ec6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b9e9c:	4629      	mov	r1, r5
   b9e9e:	a801      	add	r0, sp, #4
   b9ea0:	f7ff fcbc 	bl	b981c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9ea4:	4917      	ldr	r1, [pc, #92]	; (b9f04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9ea6:	2024      	movs	r0, #36	; 0x24
   b9ea8:	f001 fb6e 	bl	bb588 <_ZnwjRKSt9nothrow_t>
   b9eac:	4605      	mov	r5, r0
   b9eae:	b130      	cbz	r0, b9ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b9eb0:	ab01      	add	r3, sp, #4
   b9eb2:	4632      	mov	r2, r6
   b9eb4:	4621      	mov	r1, r4
   b9eb6:	f7ff ffbf 	bl	b9e38 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9eba:	4b13      	ldr	r3, [pc, #76]	; (b9f08 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b9ebc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9ebe:	a801      	add	r0, sp, #4
   b9ec0:	f7fb fd18 	bl	b58f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9ec4:	462c      	mov	r4, r5
}
   b9ec6:	4620      	mov	r0, r4
   b9ec8:	b005      	add	sp, #20
   b9eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b9ecc:	490f      	ldr	r1, [pc, #60]	; (b9f0c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b9ece:	4638      	mov	r0, r7
   b9ed0:	f002 f91b 	bl	bc10a <strcmp>
   b9ed4:	b990      	cbnz	r0, b9efc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b9ed6:	2c00      	cmp	r4, #0
   b9ed8:	d0f5      	beq.n	b9ec6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9eda:	4629      	mov	r1, r5
   b9edc:	a801      	add	r0, sp, #4
   b9ede:	f7ff fc9d 	bl	b981c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9ee2:	4908      	ldr	r1, [pc, #32]	; (b9f04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b9ee4:	2024      	movs	r0, #36	; 0x24
   b9ee6:	f001 fb4f 	bl	bb588 <_ZnwjRKSt9nothrow_t>
   b9eea:	4605      	mov	r5, r0
   b9eec:	2800      	cmp	r0, #0
   b9eee:	d0e6      	beq.n	b9ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b9ef0:	ab01      	add	r3, sp, #4
   b9ef2:	4632      	mov	r2, r6
   b9ef4:	4621      	mov	r1, r4
   b9ef6:	f7ff ff9f 	bl	b9e38 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9efa:	e7e0      	b.n	b9ebe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b9efc:	2400      	movs	r4, #0
   b9efe:	e7e2      	b.n	b9ec6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b9f00:	000bd236 	.word	0x000bd236
   b9f04:	000bd410 	.word	0x000bd410
   b9f08:	000bd2c8 	.word	0x000bd2c8
   b9f0c:	000bd23a 	.word	0x000bd23a

000b9f10 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b9f10:	4b01      	ldr	r3, [pc, #4]	; (b9f18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b9f12:	4a02      	ldr	r2, [pc, #8]	; (b9f1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b9f14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b9f16:	4770      	bx	lr
   b9f18:	2003e658 	.word	0x2003e658
   b9f1c:	000bd24b 	.word	0x000bd24b

000b9f20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9f24:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b9f26:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b9f2a:	4604      	mov	r4, r0
   b9f2c:	460e      	mov	r6, r1
   b9f2e:	4617      	mov	r7, r2
   b9f30:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b9f32:	f001 f907 	bl	bb144 <_Z16_fetch_usbserialv>
   b9f36:	4581      	cmp	r9, r0
   b9f38:	d04c      	beq.n	b9fd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b9f3a:	792b      	ldrb	r3, [r5, #4]
   b9f3c:	0719      	lsls	r1, r3, #28
   b9f3e:	d504      	bpl.n	b9f4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b9f40:	696a      	ldr	r2, [r5, #20]
   b9f42:	4954      	ldr	r1, [pc, #336]	; (ba094 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b9f44:	4620      	mov	r0, r4
   b9f46:	f7ff fa8d 	bl	b9464 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b9f4a:	f1b8 0f00 	cmp.w	r8, #0
   b9f4e:	d00d      	beq.n	b9f6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b9f50:	215b      	movs	r1, #91	; 0x5b
   b9f52:	4620      	mov	r0, r4
   b9f54:	f7ff fa7a 	bl	b944c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b9f58:	4641      	mov	r1, r8
   b9f5a:	4620      	mov	r0, r4
   b9f5c:	f7ff fa67 	bl	b942e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b9f60:	6823      	ldr	r3, [r4, #0]
   b9f62:	494d      	ldr	r1, [pc, #308]	; (ba098 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b9f64:	68db      	ldr	r3, [r3, #12]
   b9f66:	2202      	movs	r2, #2
   b9f68:	4620      	mov	r0, r4
   b9f6a:	4798      	blx	r3
    if (attr.has_file) {
   b9f6c:	792b      	ldrb	r3, [r5, #4]
   b9f6e:	07da      	lsls	r2, r3, #31
   b9f70:	d523      	bpl.n	b9fba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b9f72:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b9f76:	212f      	movs	r1, #47	; 0x2f
   b9f78:	4640      	mov	r0, r8
   b9f7a:	f002 f907 	bl	bc18c <strrchr>
    if (s1) {
   b9f7e:	b108      	cbz	r0, b9f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b9f80:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b9f84:	4641      	mov	r1, r8
   b9f86:	4620      	mov	r0, r4
   b9f88:	f7ff fa51 	bl	b942e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b9f8c:	792b      	ldrb	r3, [r5, #4]
   b9f8e:	079b      	lsls	r3, r3, #30
   b9f90:	d508      	bpl.n	b9fa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b9f92:	213a      	movs	r1, #58	; 0x3a
   b9f94:	4620      	mov	r0, r4
   b9f96:	f7ff fa59 	bl	b944c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b9f9a:	68ea      	ldr	r2, [r5, #12]
   b9f9c:	493f      	ldr	r1, [pc, #252]	; (ba09c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b9f9e:	4620      	mov	r0, r4
   b9fa0:	f7ff fa60 	bl	b9464 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b9fa4:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b9fa6:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b9fa8:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b9fac:	68db      	ldr	r3, [r3, #12]
   b9fae:	bf14      	ite	ne
   b9fb0:	493b      	ldrne	r1, [pc, #236]	; (ba0a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b9fb2:	493c      	ldreq	r1, [pc, #240]	; (ba0a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b9fb4:	2202      	movs	r2, #2
            write(": ", 2);
   b9fb6:	4620      	mov	r0, r4
   b9fb8:	4798      	blx	r3
    if (attr.has_function) {
   b9fba:	792b      	ldrb	r3, [r5, #4]
   b9fbc:	0758      	lsls	r0, r3, #29
   b9fbe:	d51d      	bpl.n	b9ffc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b9fc0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b9fc2:	460b      	mov	r3, r1
   b9fc4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b9fc6:	f813 0b01 	ldrb.w	r0, [r3], #1
   b9fca:	b160      	cbz	r0, b9fe6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b9fcc:	2820      	cmp	r0, #32
   b9fce:	d108      	bne.n	b9fe2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b9fd0:	4619      	mov	r1, r3
   b9fd2:	e7f7      	b.n	b9fc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b9fd4:	4834      	ldr	r0, [pc, #208]	; (ba0a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b9fd6:	f000 f966 	bl	ba2a6 <_ZN5spark12NetworkClass9listeningEv>
   b9fda:	2800      	cmp	r0, #0
   b9fdc:	d0ad      	beq.n	b9f3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b9fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b9fe2:	2828      	cmp	r0, #40	; 0x28
   b9fe4:	d1ee      	bne.n	b9fc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b9fe6:	6823      	ldr	r3, [r4, #0]
   b9fe8:	1a52      	subs	r2, r2, r1
   b9fea:	68db      	ldr	r3, [r3, #12]
   b9fec:	4620      	mov	r0, r4
   b9fee:	4798      	blx	r3
        write("(): ", 4);
   b9ff0:	6823      	ldr	r3, [r4, #0]
   b9ff2:	492e      	ldr	r1, [pc, #184]	; (ba0ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b9ff4:	68db      	ldr	r3, [r3, #12]
   b9ff6:	2204      	movs	r2, #4
   b9ff8:	4620      	mov	r0, r4
   b9ffa:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b9ffc:	2100      	movs	r1, #0
   b9ffe:	4638      	mov	r0, r7
   ba000:	f7fe fb26 	bl	b8650 <log_level_name>
   ba004:	4601      	mov	r1, r0
    write(s);
   ba006:	4620      	mov	r0, r4
   ba008:	f7ff fa11 	bl	b942e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba00c:	6823      	ldr	r3, [r4, #0]
   ba00e:	4925      	ldr	r1, [pc, #148]	; (ba0a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba010:	68db      	ldr	r3, [r3, #12]
   ba012:	2202      	movs	r2, #2
   ba014:	4620      	mov	r0, r4
   ba016:	4798      	blx	r3
    if (msg) {
   ba018:	b11e      	cbz	r6, ba022 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba01a:	4631      	mov	r1, r6
   ba01c:	4620      	mov	r0, r4
   ba01e:	f7ff fa06 	bl	b942e <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba022:	792b      	ldrb	r3, [r5, #4]
   ba024:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba028:	d02c      	beq.n	ba084 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba02a:	6823      	ldr	r3, [r4, #0]
   ba02c:	4920      	ldr	r1, [pc, #128]	; (ba0b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba02e:	68db      	ldr	r3, [r3, #12]
   ba030:	2202      	movs	r2, #2
   ba032:	4620      	mov	r0, r4
   ba034:	4798      	blx	r3
        if (attr.has_code) {
   ba036:	792b      	ldrb	r3, [r5, #4]
   ba038:	06d9      	lsls	r1, r3, #27
   ba03a:	d50a      	bpl.n	ba052 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba03c:	6823      	ldr	r3, [r4, #0]
   ba03e:	491d      	ldr	r1, [pc, #116]	; (ba0b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba040:	68db      	ldr	r3, [r3, #12]
   ba042:	2207      	movs	r2, #7
   ba044:	4620      	mov	r0, r4
   ba046:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba048:	69aa      	ldr	r2, [r5, #24]
   ba04a:	491b      	ldr	r1, [pc, #108]	; (ba0b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba04c:	4620      	mov	r0, r4
   ba04e:	f7ff fa09 	bl	b9464 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba052:	792b      	ldrb	r3, [r5, #4]
   ba054:	069a      	lsls	r2, r3, #26
   ba056:	d511      	bpl.n	ba07c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba058:	06db      	lsls	r3, r3, #27
   ba05a:	d505      	bpl.n	ba068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba05c:	6823      	ldr	r3, [r4, #0]
   ba05e:	4910      	ldr	r1, [pc, #64]	; (ba0a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba060:	68db      	ldr	r3, [r3, #12]
   ba062:	2202      	movs	r2, #2
   ba064:	4620      	mov	r0, r4
   ba066:	4798      	blx	r3
            write("details = ", 10);
   ba068:	6823      	ldr	r3, [r4, #0]
   ba06a:	4914      	ldr	r1, [pc, #80]	; (ba0bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba06c:	68db      	ldr	r3, [r3, #12]
   ba06e:	4620      	mov	r0, r4
   ba070:	220a      	movs	r2, #10
   ba072:	4798      	blx	r3
            write(attr.details);
   ba074:	69e9      	ldr	r1, [r5, #28]
   ba076:	4620      	mov	r0, r4
   ba078:	f7ff f9d9 	bl	b942e <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba07c:	215d      	movs	r1, #93	; 0x5d
   ba07e:	4620      	mov	r0, r4
   ba080:	f7ff f9e4 	bl	b944c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba084:	6823      	ldr	r3, [r4, #0]
   ba086:	490e      	ldr	r1, [pc, #56]	; (ba0c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba088:	68db      	ldr	r3, [r3, #12]
   ba08a:	4620      	mov	r0, r4
   ba08c:	2202      	movs	r2, #2
}
   ba08e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba092:	4718      	bx	r3
   ba094:	000bd24f 	.word	0x000bd24f
   ba098:	000bd256 	.word	0x000bd256
   ba09c:	000bcc33 	.word	0x000bcc33
   ba0a0:	000bd259 	.word	0x000bd259
   ba0a4:	000bd25e 	.word	0x000bd25e
   ba0a8:	2003e684 	.word	0x2003e684
   ba0ac:	000bd25c 	.word	0x000bd25c
   ba0b0:	000bd261 	.word	0x000bd261
   ba0b4:	000bd264 	.word	0x000bd264
   ba0b8:	000bcb44 	.word	0x000bcb44
   ba0bc:	000bd26c 	.word	0x000bd26c
   ba0c0:	000bd277 	.word	0x000bd277

000ba0c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba0c8:	b085      	sub	sp, #20
    return stream_;
   ba0ca:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba0ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba0d0:	4605      	mov	r5, r0
   ba0d2:	460f      	mov	r7, r1
   ba0d4:	4690      	mov	r8, r2
   ba0d6:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba0d8:	f001 f834 	bl	bb144 <_Z16_fetch_usbserialv>
   ba0dc:	4581      	cmp	r9, r0
   ba0de:	d105      	bne.n	ba0ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba0e0:	4849      	ldr	r0, [pc, #292]	; (ba208 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba0e2:	f000 f8e0 	bl	ba2a6 <_ZN5spark12NetworkClass9listeningEv>
   ba0e6:	2800      	cmp	r0, #0
   ba0e8:	f040 808a 	bne.w	ba200 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba0ec:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba0ee:	4a47      	ldr	r2, [pc, #284]	; (ba20c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba0f0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba0f2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba0f6:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba0f8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba0fa:	f88d 9008 	strb.w	r9, [sp, #8]
   ba0fe:	f7ff f878 	bl	b91f2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba102:	4649      	mov	r1, r9
   ba104:	4640      	mov	r0, r8
   ba106:	f7fe faa3 	bl	b8650 <log_level_name>
    json.name("l", 1).value(s);
   ba10a:	4941      	ldr	r1, [pc, #260]	; (ba210 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba10c:	4680      	mov	r8, r0
   ba10e:	2201      	movs	r2, #1
   ba110:	a801      	add	r0, sp, #4
   ba112:	f7ff f8fd 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba116:	4641      	mov	r1, r8
   ba118:	f7ff f97b 	bl	b9412 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba11c:	b13f      	cbz	r7, ba12e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba11e:	493d      	ldr	r1, [pc, #244]	; (ba214 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba120:	2201      	movs	r2, #1
   ba122:	a801      	add	r0, sp, #4
   ba124:	f7ff f8f4 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba128:	4639      	mov	r1, r7
   ba12a:	f7ff f972 	bl	b9412 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba12e:	b13e      	cbz	r6, ba140 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba130:	4939      	ldr	r1, [pc, #228]	; (ba218 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba132:	2201      	movs	r2, #1
   ba134:	a801      	add	r0, sp, #4
   ba136:	f7ff f8eb 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba13a:	4631      	mov	r1, r6
   ba13c:	f7ff f969 	bl	b9412 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba140:	7923      	ldrb	r3, [r4, #4]
   ba142:	07df      	lsls	r7, r3, #31
   ba144:	d50e      	bpl.n	ba164 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba146:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba148:	212f      	movs	r1, #47	; 0x2f
   ba14a:	4630      	mov	r0, r6
   ba14c:	f002 f81e 	bl	bc18c <strrchr>
    if (s1) {
   ba150:	b100      	cbz	r0, ba154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba152:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba154:	4931      	ldr	r1, [pc, #196]	; (ba21c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba156:	2201      	movs	r2, #1
   ba158:	a801      	add	r0, sp, #4
   ba15a:	f7ff f8d9 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba15e:	4631      	mov	r1, r6
   ba160:	f7ff f957 	bl	b9412 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba164:	7923      	ldrb	r3, [r4, #4]
   ba166:	079e      	lsls	r6, r3, #30
   ba168:	d507      	bpl.n	ba17a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba16a:	492d      	ldr	r1, [pc, #180]	; (ba220 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba16c:	2202      	movs	r2, #2
   ba16e:	a801      	add	r0, sp, #4
   ba170:	f7ff f8ce 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba174:	68e1      	ldr	r1, [r4, #12]
   ba176:	f7ff f849 	bl	b920c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba17a:	7923      	ldrb	r3, [r4, #4]
   ba17c:	0758      	lsls	r0, r3, #29
   ba17e:	d514      	bpl.n	ba1aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba180:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba182:	4633      	mov	r3, r6
   ba184:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba186:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba18a:	b12a      	cbz	r2, ba198 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba18c:	2a20      	cmp	r2, #32
   ba18e:	d101      	bne.n	ba194 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba190:	461e      	mov	r6, r3
   ba192:	e7f7      	b.n	ba184 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba194:	2a28      	cmp	r2, #40	; 0x28
   ba196:	d1f5      	bne.n	ba184 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba198:	4922      	ldr	r1, [pc, #136]	; (ba224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba19a:	2202      	movs	r2, #2
   ba19c:	a801      	add	r0, sp, #4
   ba19e:	f7ff f8b7 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba1a2:	1bba      	subs	r2, r7, r6
   ba1a4:	4631      	mov	r1, r6
   ba1a6:	f7ff f8c3 	bl	b9330 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba1aa:	7923      	ldrb	r3, [r4, #4]
   ba1ac:	0719      	lsls	r1, r3, #28
   ba1ae:	d507      	bpl.n	ba1c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba1b0:	491d      	ldr	r1, [pc, #116]	; (ba228 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba1b2:	2201      	movs	r2, #1
   ba1b4:	a801      	add	r0, sp, #4
   ba1b6:	f7ff f8ab 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba1ba:	6961      	ldr	r1, [r4, #20]
   ba1bc:	f7ff f838 	bl	b9230 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba1c0:	7923      	ldrb	r3, [r4, #4]
   ba1c2:	06da      	lsls	r2, r3, #27
   ba1c4:	d508      	bpl.n	ba1d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba1c6:	2204      	movs	r2, #4
   ba1c8:	4918      	ldr	r1, [pc, #96]	; (ba22c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba1ca:	eb0d 0002 	add.w	r0, sp, r2
   ba1ce:	f7ff f89f 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba1d2:	69a1      	ldr	r1, [r4, #24]
   ba1d4:	f7ff f81a 	bl	b920c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba1d8:	7923      	ldrb	r3, [r4, #4]
   ba1da:	069b      	lsls	r3, r3, #26
   ba1dc:	d507      	bpl.n	ba1ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba1de:	4914      	ldr	r1, [pc, #80]	; (ba230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba1e0:	2206      	movs	r2, #6
   ba1e2:	a801      	add	r0, sp, #4
   ba1e4:	f7ff f894 	bl	b9310 <_ZN5spark10JSONWriter4nameEPKcj>
   ba1e8:	69e1      	ldr	r1, [r4, #28]
   ba1ea:	f7ff f912 	bl	b9412 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba1ee:	a801      	add	r0, sp, #4
   ba1f0:	f7fe ffe9 	bl	b91c6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba1f4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba1f6:	490f      	ldr	r1, [pc, #60]	; (ba234 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba1f8:	6803      	ldr	r3, [r0, #0]
   ba1fa:	2202      	movs	r2, #2
   ba1fc:	68db      	ldr	r3, [r3, #12]
   ba1fe:	4798      	blx	r3
}
   ba200:	b005      	add	sp, #20
   ba202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba206:	bf00      	nop
   ba208:	2003e684 	.word	0x2003e684
   ba20c:	000bd298 	.word	0x000bd298
   ba210:	000bd22c 	.word	0x000bd22c
   ba214:	000bd27a 	.word	0x000bd27a
   ba218:	000bd531 	.word	0x000bd531
   ba21c:	000bc67f 	.word	0x000bc67f
   ba220:	000bd27c 	.word	0x000bd27c
   ba224:	000bd27f 	.word	0x000bd27f
   ba228:	000bc7bd 	.word	0x000bc7bd
   ba22c:	000bd282 	.word	0x000bd282
   ba230:	000bd287 	.word	0x000bd287
   ba234:	000bd277 	.word	0x000bd277

000ba238 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba238:	2300      	movs	r3, #0
   ba23a:	6840      	ldr	r0, [r0, #4]
   ba23c:	461a      	mov	r2, r3
   ba23e:	f7fe bab3 	b.w	b87a8 <network_connect>

000ba242 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba242:	6840      	ldr	r0, [r0, #4]
   ba244:	2200      	movs	r2, #0
   ba246:	2102      	movs	r1, #2
   ba248:	f7fe babe 	b.w	b87c8 <network_disconnect>

000ba24c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba24c:	2200      	movs	r2, #0
   ba24e:	6840      	ldr	r0, [r0, #4]
   ba250:	4611      	mov	r1, r2
   ba252:	f7fe bab1 	b.w	b87b8 <network_connecting>

000ba256 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba256:	2200      	movs	r2, #0
   ba258:	6840      	ldr	r0, [r0, #4]
   ba25a:	4611      	mov	r1, r2
   ba25c:	f7fe babc 	b.w	b87d8 <network_ready>

000ba260 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba260:	2300      	movs	r3, #0
   ba262:	6840      	ldr	r0, [r0, #4]
   ba264:	461a      	mov	r2, r3
   ba266:	4619      	mov	r1, r3
   ba268:	f7fe babe 	b.w	b87e8 <network_on>

000ba26c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba26c:	2300      	movs	r3, #0
   ba26e:	6840      	ldr	r0, [r0, #4]
   ba270:	461a      	mov	r2, r3
   ba272:	4619      	mov	r1, r3
   ba274:	f7fe bac0 	b.w	b87f8 <network_off>

000ba278 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba278:	6840      	ldr	r0, [r0, #4]
   ba27a:	2100      	movs	r1, #0
   ba27c:	f7fe bae4 	b.w	b8848 <network_is_on>

000ba280 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba280:	6840      	ldr	r0, [r0, #4]
   ba282:	2100      	movs	r1, #0
   ba284:	f7fe bae8 	b.w	b8858 <network_is_off>

000ba288 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba288:	6840      	ldr	r0, [r0, #4]
   ba28a:	2200      	movs	r2, #0
   ba28c:	f081 0101 	eor.w	r1, r1, #1
   ba290:	f7fe baba 	b.w	b8808 <network_listen>

000ba294 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba294:	6840      	ldr	r0, [r0, #4]
   ba296:	2200      	movs	r2, #0
   ba298:	f7fe bac6 	b.w	b8828 <network_set_listen_timeout>

000ba29c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba29c:	2200      	movs	r2, #0
   ba29e:	6840      	ldr	r0, [r0, #4]
   ba2a0:	4611      	mov	r1, r2
   ba2a2:	f7fe bac9 	b.w	b8838 <network_get_listen_timeout>

000ba2a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba2a6:	2200      	movs	r2, #0
   ba2a8:	6840      	ldr	r0, [r0, #4]
   ba2aa:	4611      	mov	r1, r2
   ba2ac:	f7fe bab4 	b.w	b8818 <network_listening>

000ba2b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba2b4:	b095      	sub	sp, #84	; 0x54
   ba2b6:	4614      	mov	r4, r2
   ba2b8:	460d      	mov	r5, r1
   ba2ba:	4607      	mov	r7, r0
    IPAddress addr;
   ba2bc:	f7fe fe32 	bl	b8f24 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba2c0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba2c2:	221c      	movs	r2, #28
   ba2c4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba2c6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba2c8:	f001 fe94 	bl	bbff4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba2cc:	2340      	movs	r3, #64	; 0x40
   ba2ce:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba2d0:	4620      	mov	r0, r4
   ba2d2:	466b      	mov	r3, sp
   ba2d4:	aa0c      	add	r2, sp, #48	; 0x30
   ba2d6:	2100      	movs	r1, #0
   ba2d8:	f7fe f8ba 	bl	b8450 <netdb_getaddrinfo>
    if (!r) {
   ba2dc:	4604      	mov	r4, r0
   ba2de:	2800      	cmp	r0, #0
   ba2e0:	d14b      	bne.n	ba37a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba2e2:	4602      	mov	r2, r0
   ba2e4:	2101      	movs	r1, #1
   ba2e6:	6868      	ldr	r0, [r5, #4]
   ba2e8:	f7fe fa76 	bl	b87d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba2ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2f0:	4622      	mov	r2, r4
   ba2f2:	6868      	ldr	r0, [r5, #4]
   ba2f4:	f7fe fa70 	bl	b87d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2f8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba2fa:	4681      	mov	r9, r0
        bool ok = false;
   ba2fc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba2fe:	2e00      	cmp	r6, #0
   ba300:	d03b      	beq.n	ba37a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba302:	2900      	cmp	r1, #0
   ba304:	d139      	bne.n	ba37a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba306:	6873      	ldr	r3, [r6, #4]
   ba308:	2b02      	cmp	r3, #2
   ba30a:	d003      	beq.n	ba314 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba30c:	2b0a      	cmp	r3, #10
   ba30e:	d011      	beq.n	ba334 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba310:	69f6      	ldr	r6, [r6, #28]
   ba312:	e7f4      	b.n	ba2fe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba314:	f1b8 0f00 	cmp.w	r8, #0
   ba318:	d0fa      	beq.n	ba310 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba31a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba31c:	a806      	add	r0, sp, #24
   ba31e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba320:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba322:	f7fe fe2d 	bl	b8f80 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba328:	1d3c      	adds	r4, r7, #4
   ba32a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba32c:	682b      	ldr	r3, [r5, #0]
   ba32e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba330:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba332:	e7ed      	b.n	ba310 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba334:	f1b9 0f00 	cmp.w	r9, #0
   ba338:	d0ea      	beq.n	ba310 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba33a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba33c:	2210      	movs	r2, #16
   ba33e:	a801      	add	r0, sp, #4
   ba340:	f001 fe58 	bl	bbff4 <memset>
                    a.v = 6;
   ba344:	2306      	movs	r3, #6
   ba346:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba34a:	ad01      	add	r5, sp, #4
   ba34c:	f104 0308 	add.w	r3, r4, #8
   ba350:	3418      	adds	r4, #24
   ba352:	6818      	ldr	r0, [r3, #0]
   ba354:	6859      	ldr	r1, [r3, #4]
   ba356:	462a      	mov	r2, r5
   ba358:	c203      	stmia	r2!, {r0, r1}
   ba35a:	3308      	adds	r3, #8
   ba35c:	42a3      	cmp	r3, r4
   ba35e:	4615      	mov	r5, r2
   ba360:	d1f7      	bne.n	ba352 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba362:	a901      	add	r1, sp, #4
   ba364:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba366:	ad07      	add	r5, sp, #28
   ba368:	f7fe fdea 	bl	b8f40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba36e:	1d3c      	adds	r4, r7, #4
   ba370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba372:	682b      	ldr	r3, [r5, #0]
   ba374:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba376:	4649      	mov	r1, r9
   ba378:	e7ca      	b.n	ba310 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba37a:	9800      	ldr	r0, [sp, #0]
   ba37c:	f7fe f860 	bl	b8440 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba380:	4638      	mov	r0, r7
   ba382:	b015      	add	sp, #84	; 0x54
   ba384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba388 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba388:	4b02      	ldr	r3, [pc, #8]	; (ba394 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba38a:	4a03      	ldr	r2, [pc, #12]	; (ba398 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba38c:	601a      	str	r2, [r3, #0]
   ba38e:	2200      	movs	r2, #0
   ba390:	605a      	str	r2, [r3, #4]

} // spark
   ba392:	4770      	bx	lr
   ba394:	2003e684 	.word	0x2003e684
   ba398:	000bd310 	.word	0x000bd310

000ba39c <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   ba39c:	b508      	push	{r3, lr}
            return &Wire1;
   ba39e:	f001 f88f 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   ba3a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   ba3a6:	f7fe bd45 	b.w	b8e34 <_ZN7TwoWire4lockEv>

000ba3aa <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   ba3aa:	b510      	push	{r4, lr}
   ba3ac:	4604      	mov	r4, r0
    lock_(_lock)
   ba3ae:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   ba3b0:	b109      	cbz	r1, ba3b6 <_ZN4PMICC1Eb+0xc>
        lock();
   ba3b2:	f7ff fff3 	bl	ba39c <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   ba3b6:	4620      	mov	r0, r4
   ba3b8:	bd10      	pop	{r4, pc}

000ba3ba <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   ba3ba:	b508      	push	{r3, lr}
            return &Wire1;
   ba3bc:	f001 f880 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   ba3c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   ba3c4:	f7fe bd3f 	b.w	b8e46 <_ZN7TwoWire6unlockEv>

000ba3c8 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   ba3c8:	b510      	push	{r4, lr}
    if (lock_) {
   ba3ca:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   ba3cc:	4604      	mov	r4, r0
    if (lock_) {
   ba3ce:	b10b      	cbz	r3, ba3d4 <_ZN4PMICD1Ev+0xc>
        unlock();
   ba3d0:	f7ff fff3 	bl	ba3ba <_ZN4PMIC6unlockEv>
}
   ba3d4:	4620      	mov	r0, r4
   ba3d6:	bd10      	pop	{r4, pc}

000ba3d8 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   ba3d8:	b510      	push	{r4, lr}
   ba3da:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   ba3dc:	6800      	ldr	r0, [r0, #0]
   ba3de:	f7ff ffec 	bl	ba3ba <_ZN4PMIC6unlockEv>
   ba3e2:	4620      	mov	r0, r4
   ba3e4:	bd10      	pop	{r4, pc}

000ba3e6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   ba3e6:	b530      	push	{r4, r5, lr}
   ba3e8:	b087      	sub	sp, #28
   ba3ea:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba3ec:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba3ee:	f7ff ffd5 	bl	ba39c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba3f2:	226b      	movs	r2, #107	; 0x6b
   ba3f4:	2300      	movs	r3, #0
   ba3f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba3fa:	2401      	movs	r4, #1
   ba3fc:	230a      	movs	r3, #10
   ba3fe:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   ba402:	f001 f85d 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba406:	a902      	add	r1, sp, #8
   ba408:	f7fe fcf8 	bl	b8dfc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba40c:	f001 f858 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   ba410:	6803      	ldr	r3, [r0, #0]
   ba412:	4629      	mov	r1, r5
   ba414:	689b      	ldr	r3, [r3, #8]
   ba416:	4798      	blx	r3
            return &Wire1;
   ba418:	f001 f852 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba41c:	4621      	mov	r1, r4
   ba41e:	f7fe fd05 	bl	b8e2c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   ba422:	9403      	str	r4, [sp, #12]
            return &Wire1;
   ba424:	f001 f84c 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   ba428:	a902      	add	r1, sp, #8
   ba42a:	f7fe fcb7 	bl	b8d9c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   ba42e:	f001 f847 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   ba432:	6803      	ldr	r3, [r0, #0]
   ba434:	695b      	ldr	r3, [r3, #20]
   ba436:	4798      	blx	r3
   ba438:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   ba43a:	a801      	add	r0, sp, #4
   ba43c:	f7ff ffcc 	bl	ba3d8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba440:	b2e0      	uxtb	r0, r4
   ba442:	b007      	add	sp, #28
   ba444:	bd30      	pop	{r4, r5, pc}

000ba446 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   ba446:	b570      	push	{r4, r5, r6, lr}
   ba448:	b086      	sub	sp, #24
   ba44a:	460d      	mov	r5, r1
   ba44c:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba44e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba450:	f7ff ffa4 	bl	ba39c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba454:	226b      	movs	r2, #107	; 0x6b
   ba456:	2300      	movs	r3, #0
   ba458:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba45c:	2601      	movs	r6, #1
   ba45e:	230a      	movs	r3, #10
   ba460:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   ba464:	f001 f82c 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba468:	a902      	add	r1, sp, #8
   ba46a:	f7fe fcc7 	bl	b8dfc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba46e:	f001 f827 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   ba472:	6803      	ldr	r3, [r0, #0]
   ba474:	4629      	mov	r1, r5
   ba476:	689b      	ldr	r3, [r3, #8]
   ba478:	4798      	blx	r3
            return &Wire1;
   ba47a:	f001 f821 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   ba47e:	6803      	ldr	r3, [r0, #0]
   ba480:	4621      	mov	r1, r4
   ba482:	689b      	ldr	r3, [r3, #8]
   ba484:	4798      	blx	r3
            return &Wire1;
   ba486:	f001 f81b 	bl	bb4c0 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba48a:	4631      	mov	r1, r6
   ba48c:	f7fe fcce 	bl	b8e2c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   ba490:	a801      	add	r0, sp, #4
   ba492:	f7ff ffa1 	bl	ba3d8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba496:	b006      	add	sp, #24
   ba498:	bd70      	pop	{r4, r5, r6, pc}

000ba49a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   ba49a:	b513      	push	{r0, r1, r4, lr}
   ba49c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba49e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba4a0:	f7ff ff7c 	bl	ba39c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba4a4:	2101      	movs	r1, #1
   ba4a6:	4620      	mov	r0, r4
   ba4a8:	f7ff ff9d 	bl	ba3e6 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   ba4ac:	f000 0330 	and.w	r3, r0, #48	; 0x30
   ba4b0:	2b10      	cmp	r3, #16
   ba4b2:	d007      	beq.n	ba4c4 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   ba4b4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   ba4b8:	f042 0210 	orr.w	r2, r2, #16
   ba4bc:	2101      	movs	r1, #1
   ba4be:	4620      	mov	r0, r4
   ba4c0:	f7ff ffc1 	bl	ba446 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba4c4:	a801      	add	r0, sp, #4
   ba4c6:	f7ff ff87 	bl	ba3d8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba4ca:	2001      	movs	r0, #1
   ba4cc:	b002      	add	sp, #8
   ba4ce:	bd10      	pop	{r4, pc}

000ba4d0 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   ba4d0:	b513      	push	{r0, r1, r4, lr}
   ba4d2:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba4d4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba4d6:	f7ff ff61 	bl	ba39c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba4da:	2101      	movs	r1, #1
   ba4dc:	4620      	mov	r0, r4
   ba4de:	f7ff ff82 	bl	ba3e6 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   ba4e2:	f010 0f30 	tst.w	r0, #48	; 0x30
   ba4e6:	d005      	beq.n	ba4f4 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   ba4e8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   ba4ec:	2101      	movs	r1, #1
   ba4ee:	4620      	mov	r0, r4
   ba4f0:	f7ff ffa9 	bl	ba446 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba4f4:	a801      	add	r0, sp, #4
   ba4f6:	f7ff ff6f 	bl	ba3d8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba4fa:	2001      	movs	r0, #1
   ba4fc:	b002      	add	sp, #8
   ba4fe:	bd10      	pop	{r4, pc}

000ba500 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba502:	4606      	mov	r6, r0
   ba504:	460d      	mov	r5, r1
  size_t n = 0;
   ba506:	188f      	adds	r7, r1, r2
   ba508:	2400      	movs	r4, #0
  while (size--) {
   ba50a:	42bd      	cmp	r5, r7
   ba50c:	d00c      	beq.n	ba528 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba50e:	6833      	ldr	r3, [r6, #0]
   ba510:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba514:	689b      	ldr	r3, [r3, #8]
   ba516:	4630      	mov	r0, r6
   ba518:	4798      	blx	r3
     if (chunk>=0)
   ba51a:	1e03      	subs	r3, r0, #0
   ba51c:	db01      	blt.n	ba522 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba51e:	441c      	add	r4, r3
  while (size--) {
   ba520:	e7f3      	b.n	ba50a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba522:	2c00      	cmp	r4, #0
   ba524:	bf08      	it	eq
   ba526:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba528:	4620      	mov	r0, r4
   ba52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba52c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba52c:	b513      	push	{r0, r1, r4, lr}
   ba52e:	4604      	mov	r4, r0
    }
   ba530:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba532:	b159      	cbz	r1, ba54c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba534:	9101      	str	r1, [sp, #4]
   ba536:	f001 fdfa 	bl	bc12e <strlen>
   ba53a:	6823      	ldr	r3, [r4, #0]
   ba53c:	9901      	ldr	r1, [sp, #4]
   ba53e:	68db      	ldr	r3, [r3, #12]
   ba540:	4602      	mov	r2, r0
   ba542:	4620      	mov	r0, r4
    }
   ba544:	b002      	add	sp, #8
   ba546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba54a:	4718      	bx	r3
    }
   ba54c:	b002      	add	sp, #8
   ba54e:	bd10      	pop	{r4, pc}

000ba550 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba550:	b508      	push	{r3, lr}
  return write(str);
   ba552:	f7ff ffeb 	bl	ba52c <_ZN5Print5writeEPKc>
}
   ba556:	bd08      	pop	{r3, pc}

000ba558 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba558:	6803      	ldr	r3, [r0, #0]
   ba55a:	689b      	ldr	r3, [r3, #8]
   ba55c:	4718      	bx	r3

000ba55e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba55e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba560:	210d      	movs	r1, #13
{
   ba562:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba564:	f7ff fff8 	bl	ba558 <_ZN5Print5printEc>
  n += print('\n');
   ba568:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba56a:	4604      	mov	r4, r0
  n += print('\n');
   ba56c:	4628      	mov	r0, r5
   ba56e:	f7ff fff3 	bl	ba558 <_ZN5Print5printEc>
  return n;
}
   ba572:	4420      	add	r0, r4
   ba574:	bd38      	pop	{r3, r4, r5, pc}

000ba576 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba576:	b530      	push	{r4, r5, lr}
   ba578:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba57a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba57c:	2a01      	cmp	r2, #1
  *str = '\0';
   ba57e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba582:	bf98      	it	ls
   ba584:	220a      	movls	r2, #10
   ba586:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba588:	460d      	mov	r5, r1
   ba58a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba58e:	fb01 5312 	mls	r3, r1, r2, r5
   ba592:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba596:	2b09      	cmp	r3, #9
   ba598:	bf94      	ite	ls
   ba59a:	3330      	addls	r3, #48	; 0x30
   ba59c:	3337      	addhi	r3, #55	; 0x37
   ba59e:	b2db      	uxtb	r3, r3
  } while(n);
   ba5a0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba5a2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba5a6:	d9ef      	bls.n	ba588 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba5a8:	4621      	mov	r1, r4
   ba5aa:	f7ff ffbf 	bl	ba52c <_ZN5Print5writeEPKc>
}
   ba5ae:	b00b      	add	sp, #44	; 0x2c
   ba5b0:	bd30      	pop	{r4, r5, pc}
	...

000ba5b4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   ba5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba5b8:	ec55 4b10 	vmov	r4, r5, d0
   ba5bc:	4606      	mov	r6, r0
   ba5be:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   ba5c0:	ee10 2a10 	vmov	r2, s0
   ba5c4:	ee10 0a10 	vmov	r0, s0
   ba5c8:	462b      	mov	r3, r5
   ba5ca:	4629      	mov	r1, r5
   ba5cc:	f001 fc3a 	bl	bbe44 <__aeabi_dcmpun>
   ba5d0:	b140      	cbz	r0, ba5e4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   ba5d2:	4953      	ldr	r1, [pc, #332]	; (ba720 <_ZN5Print10printFloatEdh+0x16c>)
   ba5d4:	4630      	mov	r0, r6
   ba5d6:	f7ff ffa9 	bl	ba52c <_ZN5Print5writeEPKc>
   ba5da:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   ba5dc:	4650      	mov	r0, sl
   ba5de:	b003      	add	sp, #12
   ba5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   ba5e4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   ba5e8:	4b4e      	ldr	r3, [pc, #312]	; (ba724 <_ZN5Print10printFloatEdh+0x170>)
   ba5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5ee:	4620      	mov	r0, r4
   ba5f0:	4649      	mov	r1, r9
   ba5f2:	f001 fc27 	bl	bbe44 <__aeabi_dcmpun>
   ba5f6:	b948      	cbnz	r0, ba60c <_ZN5Print10printFloatEdh+0x58>
   ba5f8:	4b4a      	ldr	r3, [pc, #296]	; (ba724 <_ZN5Print10printFloatEdh+0x170>)
   ba5fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba5fe:	4620      	mov	r0, r4
   ba600:	4649      	mov	r1, r9
   ba602:	f001 fc01 	bl	bbe08 <__aeabi_dcmple>
   ba606:	b908      	cbnz	r0, ba60c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   ba608:	4947      	ldr	r1, [pc, #284]	; (ba728 <_ZN5Print10printFloatEdh+0x174>)
   ba60a:	e7e3      	b.n	ba5d4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   ba60c:	4b47      	ldr	r3, [pc, #284]	; (ba72c <_ZN5Print10printFloatEdh+0x178>)
   ba60e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba612:	4620      	mov	r0, r4
   ba614:	4629      	mov	r1, r5
   ba616:	f001 fc0b 	bl	bbe30 <__aeabi_dcmpgt>
   ba61a:	b108      	cbz	r0, ba620 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   ba61c:	4944      	ldr	r1, [pc, #272]	; (ba730 <_ZN5Print10printFloatEdh+0x17c>)
   ba61e:	e7d9      	b.n	ba5d4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   ba620:	4b44      	ldr	r3, [pc, #272]	; (ba734 <_ZN5Print10printFloatEdh+0x180>)
   ba622:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba626:	4620      	mov	r0, r4
   ba628:	4629      	mov	r1, r5
   ba62a:	f001 fbe3 	bl	bbdf4 <__aeabi_dcmplt>
   ba62e:	2800      	cmp	r0, #0
   ba630:	d1f4      	bne.n	ba61c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   ba632:	2200      	movs	r2, #0
   ba634:	2300      	movs	r3, #0
   ba636:	4620      	mov	r0, r4
   ba638:	4629      	mov	r1, r5
   ba63a:	f001 fbdb 	bl	bbdf4 <__aeabi_dcmplt>
   ba63e:	b1d0      	cbz	r0, ba676 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   ba640:	212d      	movs	r1, #45	; 0x2d
   ba642:	4630      	mov	r0, r6
   ba644:	f7ff ff88 	bl	ba558 <_ZN5Print5printEc>
     number = -number;
   ba648:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   ba64c:	4682      	mov	sl, r0
     number = -number;
   ba64e:	461d      	mov	r5, r3
  double rounding = 0.5;
   ba650:	4939      	ldr	r1, [pc, #228]	; (ba738 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   ba652:	f8df 90ec 	ldr.w	r9, [pc, #236]	; ba740 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   ba656:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   ba65a:	2000      	movs	r0, #0
    rounding /= 10.0;
   ba65c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   ba660:	fa5f f38b 	uxtb.w	r3, fp
   ba664:	429f      	cmp	r7, r3
   ba666:	d908      	bls.n	ba67a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   ba668:	4642      	mov	r2, r8
   ba66a:	464b      	mov	r3, r9
   ba66c:	f001 fa7a 	bl	bbb64 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   ba670:	f10b 0b01 	add.w	fp, fp, #1
   ba674:	e7f4      	b.n	ba660 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   ba676:	4682      	mov	sl, r0
   ba678:	e7ea      	b.n	ba650 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   ba67a:	4622      	mov	r2, r4
   ba67c:	462b      	mov	r3, r5
   ba67e:	f000 ff91 	bl	bb5a4 <__adddf3>
   ba682:	460d      	mov	r5, r1
   ba684:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   ba686:	f001 fc1b 	bl	bbec0 <__aeabi_d2uiz>
   ba68a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   ba68c:	f001 f8c6 	bl	bb81c <__aeabi_ui2d>
   ba690:	4602      	mov	r2, r0
   ba692:	460b      	mov	r3, r1
   ba694:	4620      	mov	r0, r4
   ba696:	4629      	mov	r1, r5
   ba698:	f000 ff82 	bl	bb5a0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   ba69c:	220a      	movs	r2, #10
   ba69e:	4604      	mov	r4, r0
   ba6a0:	460d      	mov	r5, r1
   ba6a2:	4630      	mov	r0, r6
   ba6a4:	4641      	mov	r1, r8
   ba6a6:	f7ff ff66 	bl	ba576 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   ba6aa:	4482      	add	sl, r0
  if (digits > 0) {
   ba6ac:	2f00      	cmp	r7, #0
   ba6ae:	d095      	beq.n	ba5dc <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   ba6b0:	4922      	ldr	r1, [pc, #136]	; (ba73c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   ba6b2:	f8df 908c 	ldr.w	r9, [pc, #140]	; ba740 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   ba6b6:	4630      	mov	r0, r6
   ba6b8:	f7ff ff38 	bl	ba52c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   ba6bc:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   ba6c0:	4482      	add	sl, r0
  while (digits-- > 0)
   ba6c2:	2f00      	cmp	r7, #0
   ba6c4:	d08a      	beq.n	ba5dc <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   ba6c6:	4642      	mov	r2, r8
   ba6c8:	464b      	mov	r3, r9
   ba6ca:	4620      	mov	r0, r4
   ba6cc:	4629      	mov	r1, r5
   ba6ce:	f001 f91f 	bl	bb910 <__aeabi_dmul>
   ba6d2:	4604      	mov	r4, r0
   ba6d4:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   ba6d6:	f001 fbcb 	bl	bbe70 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   ba6da:	f1b0 0b00 	subs.w	fp, r0, #0
   ba6de:	da1c      	bge.n	ba71a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   ba6e0:	212d      	movs	r1, #45	; 0x2d
   ba6e2:	4630      	mov	r0, r6
   ba6e4:	f7ff ff38 	bl	ba558 <_ZN5Print5printEc>
            val = -n;
   ba6e8:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   ba6ec:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   ba6ee:	220a      	movs	r2, #10
   ba6f0:	4630      	mov	r0, r6
   ba6f2:	9301      	str	r3, [sp, #4]
   ba6f4:	f7ff ff3f 	bl	ba576 <_ZN5Print11printNumberEmh>
   ba6f8:	9b01      	ldr	r3, [sp, #4]
   ba6fa:	4418      	add	r0, r3
    n += print(toPrint);
   ba6fc:	4482      	add	sl, r0
    remainder -= toPrint;
   ba6fe:	4658      	mov	r0, fp
   ba700:	f001 f89c 	bl	bb83c <__aeabi_i2d>
   ba704:	4602      	mov	r2, r0
   ba706:	460b      	mov	r3, r1
   ba708:	4620      	mov	r0, r4
   ba70a:	4629      	mov	r1, r5
   ba70c:	f000 ff48 	bl	bb5a0 <__aeabi_dsub>
   ba710:	3f01      	subs	r7, #1
   ba712:	4604      	mov	r4, r0
   ba714:	460d      	mov	r5, r1
   ba716:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   ba718:	e7d3      	b.n	ba6c2 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   ba71a:	4659      	mov	r1, fp
        size_t t = 0;
   ba71c:	2300      	movs	r3, #0
   ba71e:	e7e6      	b.n	ba6ee <_ZN5Print10printFloatEdh+0x13a>
   ba720:	000bd344 	.word	0x000bd344
   ba724:	7fefffff 	.word	0x7fefffff
   ba728:	000bd348 	.word	0x000bd348
   ba72c:	41efffff 	.word	0x41efffff
   ba730:	000bd34c 	.word	0x000bd34c
   ba734:	c1efffff 	.word	0xc1efffff
   ba738:	3fe00000 	.word	0x3fe00000
   ba73c:	000bd384 	.word	0x000bd384
   ba740:	40240000 	.word	0x40240000

000ba744 <_ZN5Print5printEfi>:
{
   ba744:	b538      	push	{r3, r4, r5, lr}
   ba746:	4604      	mov	r4, r0
   ba748:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   ba74c:	b2cd      	uxtb	r5, r1
   ba74e:	f001 f887 	bl	bb860 <__aeabi_f2d>
   ba752:	ec41 0b10 	vmov	d0, r0, r1
   ba756:	4629      	mov	r1, r5
   ba758:	4620      	mov	r0, r4
}
   ba75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   ba75e:	f7ff bf29 	b.w	ba5b4 <_ZN5Print10printFloatEdh>

000ba762 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba766:	b086      	sub	sp, #24
   ba768:	af00      	add	r7, sp, #0
   ba76a:	4605      	mov	r5, r0
   ba76c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba76e:	1d38      	adds	r0, r7, #4
   ba770:	2114      	movs	r1, #20
{
   ba772:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba774:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba776:	f7fe f89f 	bl	b88b8 <vsnprintf>

    if (n<bufsize)
   ba77a:	2813      	cmp	r0, #19
   ba77c:	d80e      	bhi.n	ba79c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba77e:	1d39      	adds	r1, r7, #4
   ba780:	4628      	mov	r0, r5
   ba782:	f7ff fed3 	bl	ba52c <_ZN5Print5writeEPKc>
   ba786:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba788:	b11e      	cbz	r6, ba792 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba78a:	4628      	mov	r0, r5
   ba78c:	f7ff fee7 	bl	ba55e <_ZN5Print7printlnEv>
   ba790:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba792:	4620      	mov	r0, r4
   ba794:	3718      	adds	r7, #24
   ba796:	46bd      	mov	sp, r7
   ba798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba79c:	f100 0308 	add.w	r3, r0, #8
   ba7a0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba7a4:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba7a6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba7aa:	4622      	mov	r2, r4
   ba7ac:	1c41      	adds	r1, r0, #1
   ba7ae:	683b      	ldr	r3, [r7, #0]
   ba7b0:	4668      	mov	r0, sp
   ba7b2:	f7fe f881 	bl	b88b8 <vsnprintf>
  return write(str);
   ba7b6:	4669      	mov	r1, sp
   ba7b8:	4628      	mov	r0, r5
   ba7ba:	f7ff feb7 	bl	ba52c <_ZN5Print5writeEPKc>
   ba7be:	4604      	mov	r4, r0
   ba7c0:	46c5      	mov	sp, r8
   ba7c2:	e7e1      	b.n	ba788 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba7c4 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   ba7c4:	b510      	push	{r4, lr}
  if (0 == max) {
   ba7c6:	4604      	mov	r4, r0
   ba7c8:	b128      	cbz	r0, ba7d6 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   ba7ca:	f001 fc49 	bl	bc060 <rand>
   ba7ce:	fb90 f3f4 	sdiv	r3, r0, r4
   ba7d2:	fb03 0414 	mls	r4, r3, r4, r0
}
   ba7d6:	4620      	mov	r0, r4
   ba7d8:	bd10      	pop	{r4, pc}

000ba7da <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   ba7da:	4288      	cmp	r0, r1
{
   ba7dc:	b510      	push	{r4, lr}
   ba7de:	4604      	mov	r4, r0
  if (min >= max) {
   ba7e0:	da03      	bge.n	ba7ea <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   ba7e2:	1a08      	subs	r0, r1, r0
   ba7e4:	f7ff ffee 	bl	ba7c4 <_Z6randomi>
   ba7e8:	4404      	add	r4, r0
}
   ba7ea:	4620      	mov	r0, r4
   ba7ec:	bd10      	pop	{r4, pc}

000ba7ee <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   ba7ee:	f001 bc09 	b.w	bc004 <srand>
	...

000ba7f4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba7f4:	4b01      	ldr	r3, [pc, #4]	; (ba7fc <_GLOBAL__sub_I_RGB+0x8>)
   ba7f6:	2200      	movs	r2, #0
   ba7f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba7fa:	4770      	bx	lr
   ba7fc:	2003e68c 	.word	0x2003e68c

000ba800 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba800:	2100      	movs	r1, #0
   ba802:	f7fd be6d 	b.w	b84e0 <hal_spi_release>

000ba806 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba806:	2100      	movs	r1, #0
   ba808:	f7fd be62 	b.w	b84d0 <hal_spi_acquire>

000ba80c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba80c:	b510      	push	{r4, lr}
   ba80e:	4604      	mov	r4, r0
   ba810:	4608      	mov	r0, r1
{
    _spi = spi;
   ba812:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba814:	f7fd fe3c 	bl	b8490 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba818:	2300      	movs	r3, #0
   ba81a:	6063      	str	r3, [r4, #4]
}
   ba81c:	4620      	mov	r0, r4
   ba81e:	bd10      	pop	{r4, pc}

000ba820 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba820:	b513      	push	{r0, r1, r4, lr}
   ba822:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba824:	7800      	ldrb	r0, [r0, #0]
   ba826:	f7ff ffee 	bl	ba806 <_ZN8SPIClass4lockEv.isra.0>
   ba82a:	b958      	cbnz	r0, ba844 <_ZN8SPIClass5beginEv+0x24>
   ba82c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba82e:	9001      	str	r0, [sp, #4]
   ba830:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba834:	f7fd fe14 	bl	b8460 <hal_spi_begin>
        unlock();
   ba838:	9801      	ldr	r0, [sp, #4]
    }
}
   ba83a:	b002      	add	sp, #8
   ba83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba840:	f7ff bfde 	b.w	ba800 <_ZN8SPIClass6unlockEv.isra.0>
   ba844:	b002      	add	sp, #8
   ba846:	bd10      	pop	{r4, pc}

000ba848 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   ba848:	b513      	push	{r0, r1, r4, lr}
   ba84a:	4604      	mov	r4, r0
    if (!lock())
   ba84c:	7800      	ldrb	r0, [r0, #0]
   ba84e:	f7ff ffda 	bl	ba806 <_ZN8SPIClass4lockEv.isra.0>
   ba852:	b948      	cbnz	r0, ba868 <_ZN8SPIClass3endEv+0x20>
   ba854:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   ba856:	9001      	str	r0, [sp, #4]
   ba858:	f7fd fe0a 	bl	b8470 <hal_spi_end>
        unlock();
   ba85c:	9801      	ldr	r0, [sp, #4]
    }
}
   ba85e:	b002      	add	sp, #8
   ba860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba864:	f7ff bfcc 	b.w	ba800 <_ZN8SPIClass6unlockEv.isra.0>
   ba868:	b002      	add	sp, #8
   ba86a:	bd10      	pop	{r4, pc}

000ba86c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba86c:	7800      	ldrb	r0, [r0, #0]
   ba86e:	f7ff bfc7 	b.w	ba800 <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba874 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba874:	0840      	lsrs	r0, r0, #1
{
   ba876:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba878:	6018      	str	r0, [r3, #0]
   ba87a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba87c:	6818      	ldr	r0, [r3, #0]
   ba87e:	4288      	cmp	r0, r1
   ba880:	b2e5      	uxtb	r5, r4
   ba882:	d906      	bls.n	ba892 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba884:	3401      	adds	r4, #1
   ba886:	2c08      	cmp	r4, #8
   ba888:	d002      	beq.n	ba890 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba88a:	0840      	lsrs	r0, r0, #1
   ba88c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba88e:	e7f5      	b.n	ba87c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba890:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba892:	4b02      	ldr	r3, [pc, #8]	; (ba89c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba894:	5d5b      	ldrb	r3, [r3, r5]
   ba896:	7013      	strb	r3, [r2, #0]
}
   ba898:	bd30      	pop	{r4, r5, pc}
   ba89a:	bf00      	nop
   ba89c:	000bd350 	.word	0x000bd350

000ba8a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba8a4:	4606      	mov	r6, r0
   ba8a6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba8a8:	7800      	ldrb	r0, [r0, #0]
{
   ba8aa:	460c      	mov	r4, r1
    CHECK(lock());
   ba8ac:	f7ff ffab 	bl	ba806 <_ZN8SPIClass4lockEv.isra.0>
   ba8b0:	2800      	cmp	r0, #0
   ba8b2:	db1b      	blt.n	ba8ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba8b4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba8b6:	2214      	movs	r2, #20
   ba8b8:	2100      	movs	r1, #0
   ba8ba:	a809      	add	r0, sp, #36	; 0x24
   ba8bc:	f001 fb9a 	bl	bbff4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba8c0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba8c2:	2200      	movs	r2, #0
   ba8c4:	a909      	add	r1, sp, #36	; 0x24
   ba8c6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba8c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba8cc:	f7fd fdf0 	bl	b84b0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba8d0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba8d4:	b113      	cbz	r3, ba8dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba8d6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba8da:	b155      	cbz	r5, ba8f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba8dc:	2700      	movs	r7, #0
   ba8de:	46b9      	mov	r9, r7
   ba8e0:	46b8      	mov	r8, r7
   ba8e2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba8e4:	7923      	ldrb	r3, [r4, #4]
   ba8e6:	b15d      	cbz	r5, ba900 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba8e8:	b1c3      	cbz	r3, ba91c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba8ea:	2000      	movs	r0, #0
}
   ba8ec:	b00f      	add	sp, #60	; 0x3c
   ba8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba8f2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba8f6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba8fa:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba8fe:	e7f1      	b.n	ba8e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba900:	2b00      	cmp	r3, #0
   ba902:	d135      	bne.n	ba970 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba904:	68a3      	ldr	r3, [r4, #8]
   ba906:	4543      	cmp	r3, r8
   ba908:	d108      	bne.n	ba91c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba90a:	f88d 9020 	strb.w	r9, [sp, #32]
   ba90e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba912:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba916:	89a3      	ldrh	r3, [r4, #12]
   ba918:	429a      	cmp	r2, r3
   ba91a:	d0e6      	beq.n	ba8ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba91c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba91e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba920:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba924:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba926:	ab04      	add	r3, sp, #16
   ba928:	f10d 020f 	add.w	r2, sp, #15
   ba92c:	f7ff ffa2 	bl	ba874 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba930:	7921      	ldrb	r1, [r4, #4]
   ba932:	b985      	cbnz	r5, ba956 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba934:	b989      	cbnz	r1, ba95a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba936:	68a3      	ldr	r3, [r4, #8]
   ba938:	4543      	cmp	r3, r8
   ba93a:	d30e      	bcc.n	ba95a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba93c:	f88d 9020 	strb.w	r9, [sp, #32]
   ba940:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba944:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba948:	89a3      	ldrh	r3, [r4, #12]
   ba94a:	429a      	cmp	r2, r3
   ba94c:	d105      	bne.n	ba95a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba94e:	9b04      	ldr	r3, [sp, #16]
   ba950:	4543      	cmp	r3, r8
   ba952:	d102      	bne.n	ba95a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba954:	e7c9      	b.n	ba8ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba956:	2900      	cmp	r1, #0
   ba958:	d1f9      	bne.n	ba94e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba95a:	2300      	movs	r3, #0
   ba95c:	9301      	str	r3, [sp, #4]
   ba95e:	7b63      	ldrb	r3, [r4, #13]
   ba960:	9300      	str	r3, [sp, #0]
   ba962:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba966:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba968:	7830      	ldrb	r0, [r6, #0]
   ba96a:	f7fd fda9 	bl	b84c0 <hal_spi_set_settings>
   ba96e:	e7bc      	b.n	ba8ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba970:	e9cd 5500 	strd	r5, r5, [sp]
   ba974:	462b      	mov	r3, r5
   ba976:	462a      	mov	r2, r5
   ba978:	2101      	movs	r1, #1
   ba97a:	e7f5      	b.n	ba968 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba97c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba97c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba97e:	7800      	ldrb	r0, [r0, #0]
   ba980:	f7fd fd7e 	bl	b8480 <hal_spi_transfer>
}
   ba984:	b2c0      	uxtb	r0, r0
   ba986:	bd08      	pop	{r3, pc}

000ba988 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   ba988:	4770      	bx	lr

000ba98a <_ZN8SPIClass15detachInterruptEv>:
   ba98a:	4770      	bx	lr

000ba98c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba98c:	b510      	push	{r4, lr}
   ba98e:	4604      	mov	r4, r0
{
	free(buffer);
   ba990:	6800      	ldr	r0, [r0, #0]
   ba992:	f7fd ff71 	bl	b8878 <free>
}
   ba996:	4620      	mov	r0, r4
   ba998:	bd10      	pop	{r4, pc}

000ba99a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba99a:	b510      	push	{r4, lr}
   ba99c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba99e:	6800      	ldr	r0, [r0, #0]
   ba9a0:	b108      	cbz	r0, ba9a6 <_ZN6String10invalidateEv+0xc>
   ba9a2:	f7fd ff69 	bl	b8878 <free>
	buffer = NULL;
   ba9a6:	2300      	movs	r3, #0
	capacity = len = 0;
   ba9a8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba9ac:	6023      	str	r3, [r4, #0]
}
   ba9ae:	bd10      	pop	{r4, pc}

000ba9b0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba9b0:	b538      	push	{r3, r4, r5, lr}
   ba9b2:	4604      	mov	r4, r0
   ba9b4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba9b6:	6800      	ldr	r0, [r0, #0]
   ba9b8:	3101      	adds	r1, #1
   ba9ba:	f7fd ff65 	bl	b8888 <realloc>
	if (newbuffer) {
   ba9be:	b110      	cbz	r0, ba9c6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba9c0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba9c4:	2001      	movs	r0, #1
	}
	return 0;
}
   ba9c6:	bd38      	pop	{r3, r4, r5, pc}

000ba9c8 <_ZN6String7reserveEj>:
{
   ba9c8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba9ca:	6803      	ldr	r3, [r0, #0]
{
   ba9cc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba9ce:	b123      	cbz	r3, ba9da <_ZN6String7reserveEj+0x12>
   ba9d0:	6843      	ldr	r3, [r0, #4]
   ba9d2:	428b      	cmp	r3, r1
   ba9d4:	d301      	bcc.n	ba9da <_ZN6String7reserveEj+0x12>
   ba9d6:	2001      	movs	r0, #1
}
   ba9d8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba9da:	4620      	mov	r0, r4
   ba9dc:	f7ff ffe8 	bl	ba9b0 <_ZN6String12changeBufferEj>
   ba9e0:	2800      	cmp	r0, #0
   ba9e2:	d0f9      	beq.n	ba9d8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba9e4:	68a3      	ldr	r3, [r4, #8]
   ba9e6:	2b00      	cmp	r3, #0
   ba9e8:	d1f5      	bne.n	ba9d6 <_ZN6String7reserveEj+0xe>
   ba9ea:	6822      	ldr	r2, [r4, #0]
   ba9ec:	7013      	strb	r3, [r2, #0]
   ba9ee:	e7f2      	b.n	ba9d6 <_ZN6String7reserveEj+0xe>

000ba9f0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba9f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba9f2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba9f4:	4611      	mov	r1, r2
   ba9f6:	9201      	str	r2, [sp, #4]
{
   ba9f8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba9fa:	f7ff ffe5 	bl	ba9c8 <_ZN6String7reserveEj>
   ba9fe:	9a01      	ldr	r2, [sp, #4]
   baa00:	b928      	cbnz	r0, baa0e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   baa02:	4620      	mov	r0, r4
   baa04:	f7ff ffc9 	bl	ba99a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   baa08:	4620      	mov	r0, r4
   baa0a:	b003      	add	sp, #12
   baa0c:	bd30      	pop	{r4, r5, pc}
	len = length;
   baa0e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   baa10:	4629      	mov	r1, r5
   baa12:	6820      	ldr	r0, [r4, #0]
   baa14:	f001 fac6 	bl	bbfa4 <memcpy>
	buffer[len] = 0;
   baa18:	6822      	ldr	r2, [r4, #0]
   baa1a:	68a3      	ldr	r3, [r4, #8]
   baa1c:	2100      	movs	r1, #0
   baa1e:	54d1      	strb	r1, [r2, r3]
	return *this;
   baa20:	e7f2      	b.n	baa08 <_ZN6String4copyEPKcj+0x18>

000baa22 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   baa22:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   baa24:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   baa26:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   baa2a:	4604      	mov	r4, r0
	len = 0;
   baa2c:	6083      	str	r3, [r0, #8]
	flags = 0;
   baa2e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   baa30:	b141      	cbz	r1, baa44 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   baa32:	4608      	mov	r0, r1
   baa34:	9101      	str	r1, [sp, #4]
   baa36:	f001 fb7a 	bl	bc12e <strlen>
   baa3a:	9901      	ldr	r1, [sp, #4]
   baa3c:	4602      	mov	r2, r0
   baa3e:	4620      	mov	r0, r4
   baa40:	f7ff ffd6 	bl	ba9f0 <_ZN6String4copyEPKcj>
}
   baa44:	4620      	mov	r0, r4
   baa46:	b002      	add	sp, #8
   baa48:	bd10      	pop	{r4, pc}

000baa4a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   baa4a:	b538      	push	{r3, r4, r5, lr}
   baa4c:	4605      	mov	r5, r0
	if (buffer) {
   baa4e:	6800      	ldr	r0, [r0, #0]
{
   baa50:	460c      	mov	r4, r1
	if (buffer) {
   baa52:	b168      	cbz	r0, baa70 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   baa54:	686a      	ldr	r2, [r5, #4]
   baa56:	688b      	ldr	r3, [r1, #8]
   baa58:	429a      	cmp	r2, r3
   baa5a:	d307      	bcc.n	baa6c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   baa5c:	6809      	ldr	r1, [r1, #0]
   baa5e:	f001 fb5e 	bl	bc11e <strcpy>
			len = rhs.len;
   baa62:	68a3      	ldr	r3, [r4, #8]
   baa64:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   baa66:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   baa68:	60a3      	str	r3, [r4, #8]
}
   baa6a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   baa6c:	f7fd ff04 	bl	b8878 <free>
	buffer = rhs.buffer;
   baa70:	6823      	ldr	r3, [r4, #0]
   baa72:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   baa74:	6863      	ldr	r3, [r4, #4]
   baa76:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   baa78:	68a3      	ldr	r3, [r4, #8]
   baa7a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   baa7c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   baa7e:	e9c4 3300 	strd	r3, r3, [r4]
   baa82:	e7f1      	b.n	baa68 <_ZN6String4moveERS_+0x1e>

000baa84 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   baa84:	b510      	push	{r4, lr}
	buffer = NULL;
   baa86:	2300      	movs	r3, #0
	capacity = 0;
   baa88:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   baa8c:	4604      	mov	r4, r0
	len = 0;
   baa8e:	6083      	str	r3, [r0, #8]
	flags = 0;
   baa90:	7303      	strb	r3, [r0, #12]
	move(rval);
   baa92:	f7ff ffda 	bl	baa4a <_ZN6String4moveERS_>
}
   baa96:	4620      	mov	r0, r4
   baa98:	bd10      	pop	{r4, pc}

000baa9a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   baa9a:	4288      	cmp	r0, r1
{
   baa9c:	b510      	push	{r4, lr}
   baa9e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   baaa0:	d005      	beq.n	baaae <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   baaa2:	680b      	ldr	r3, [r1, #0]
   baaa4:	b12b      	cbz	r3, baab2 <_ZN6StringaSERKS_+0x18>
   baaa6:	688a      	ldr	r2, [r1, #8]
   baaa8:	4619      	mov	r1, r3
   baaaa:	f7ff ffa1 	bl	ba9f0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   baaae:	4620      	mov	r0, r4
   baab0:	bd10      	pop	{r4, pc}
	else invalidate();
   baab2:	f7ff ff72 	bl	ba99a <_ZN6String10invalidateEv>
   baab6:	e7fa      	b.n	baaae <_ZN6StringaSERKS_+0x14>

000baab8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   baab8:	b510      	push	{r4, lr}
	buffer = NULL;
   baaba:	2300      	movs	r3, #0
String::String(const String &value)
   baabc:	4604      	mov	r4, r0
	capacity = 0;
   baabe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   baac2:	6083      	str	r3, [r0, #8]
	flags = 0;
   baac4:	7303      	strb	r3, [r0, #12]
	*this = value;
   baac6:	f7ff ffe8 	bl	baa9a <_ZN6StringaSERKS_>
}
   baaca:	4620      	mov	r0, r4
   baacc:	bd10      	pop	{r4, pc}
	...

000baad0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   baad0:	b40e      	push	{r1, r2, r3}
   baad2:	b570      	push	{r4, r5, r6, lr}
   baad4:	b087      	sub	sp, #28
   baad6:	ad0b      	add	r5, sp, #44	; 0x2c
   baad8:	4604      	mov	r4, r0
   baada:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   baade:	9201      	str	r2, [sp, #4]
   baae0:	462b      	mov	r3, r5
   baae2:	2105      	movs	r1, #5
   baae4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   baae6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   baae8:	f7fd fee6 	bl	b88b8 <vsnprintf>
    va_end(marker);

    String result;
   baaec:	490b      	ldr	r1, [pc, #44]	; (bab1c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   baaee:	4606      	mov	r6, r0
    String result;
   baaf0:	4620      	mov	r0, r4
   baaf2:	f7ff ff96 	bl	baa22 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   baaf6:	4631      	mov	r1, r6
   baaf8:	4620      	mov	r0, r4
   baafa:	f7ff ff65 	bl	ba9c8 <_ZN6String7reserveEj>
    if (result.buffer) {
   baafe:	6820      	ldr	r0, [r4, #0]
   bab00:	b130      	cbz	r0, bab10 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bab02:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bab04:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bab06:	462b      	mov	r3, r5
   bab08:	1c71      	adds	r1, r6, #1
   bab0a:	f7fd fed5 	bl	b88b8 <vsnprintf>
        va_end(marker);
        result.len = n;
   bab0e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bab10:	4620      	mov	r0, r4
   bab12:	b007      	add	sp, #28
   bab14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bab18:	b003      	add	sp, #12
   bab1a:	4770      	bx	lr
   bab1c:	000bd279 	.word	0x000bd279

000bab20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bab20:	b510      	push	{r4, lr}
   bab22:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bab24:	6800      	ldr	r0, [r0, #0]
   bab26:	b118      	cbz	r0, bab30 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bab28:	f7fd fea6 	bl	b8878 <free>
            wakeupSource_ = nullptr;
   bab2c:	2300      	movs	r3, #0
   bab2e:	6023      	str	r3, [r4, #0]
        }
    }
   bab30:	bd10      	pop	{r4, pc}

000bab32 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bab32:	b538      	push	{r3, r4, r5, lr}
   bab34:	460c      	mov	r4, r1
   bab36:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bab38:	f7ff fff2 	bl	bab20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bab3c:	b154      	cbz	r4, bab54 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bab3e:	8820      	ldrh	r0, [r4, #0]
   bab40:	f7fd fe92 	bl	b8868 <malloc>
   bab44:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bab46:	b128      	cbz	r0, bab54 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bab48:	8822      	ldrh	r2, [r4, #0]
   bab4a:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bab4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bab50:	f001 ba28 	b.w	bbfa4 <memcpy>
    }
   bab54:	bd38      	pop	{r3, r4, r5, pc}

000bab56 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bab56:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bab58:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bab5c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bab5e:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bab62:	f8c0 3006 	str.w	r3, [r0, #6]
   bab66:	894b      	ldrh	r3, [r1, #10]
   bab68:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bab6a:	460c      	mov	r4, r1
   bab6c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bab6e:	f7ff ffd7 	bl	bab20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bab72:	6823      	ldr	r3, [r4, #0]
   bab74:	b113      	cbz	r3, bab7c <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bab76:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bab78:	2300      	movs	r3, #0
   bab7a:	6023      	str	r3, [r4, #0]
    }
   bab7c:	bd38      	pop	{r3, r4, r5, pc}

000bab7e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bab7e:	b507      	push	{r0, r1, r2, lr}
   bab80:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bab82:	2100      	movs	r1, #0
{
   bab84:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bab86:	9100      	str	r1, [sp, #0]
   bab88:	2001      	movs	r0, #1
   bab8a:	218c      	movs	r1, #140	; 0x8c
   bab8c:	f7fd fdda 	bl	b8744 <system_reset>
}
   bab90:	b003      	add	sp, #12
   bab92:	f85d fb04 	ldr.w	pc, [sp], #4

000bab96 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bab96:	4601      	mov	r1, r0
    reset(0, flags);
   bab98:	2000      	movs	r0, #0
   bab9a:	f7ff bff0 	b.w	bab7e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bab9e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bab9e:	2000      	movs	r0, #0
   baba0:	f7ff bff9 	b.w	bab96 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000baba4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   baba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   baba6:	4d2b      	ldr	r5, [pc, #172]	; (bac54 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   baba8:	7d0b      	ldrb	r3, [r1, #20]
   babaa:	4604      	mov	r4, r0
   babac:	b08b      	sub	sp, #44	; 0x2c
   babae:	4608      	mov	r0, r1
   babb0:	1daf      	adds	r7, r5, #6
   babb2:	2b00      	cmp	r3, #0
   babb4:	d036      	beq.n	bac24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   babb6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   babb8:	791b      	ldrb	r3, [r3, #4]
   babba:	2b00      	cmp	r3, #0
   babbc:	d032      	beq.n	bac24 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   babbe:	4b26      	ldr	r3, [pc, #152]	; (bac58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   babc0:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   babc2:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   babc4:	a902      	add	r1, sp, #8
   babc6:	3004      	adds	r0, #4
   babc8:	e9cd 2202 	strd	r2, r2, [sp, #8]
   babcc:	f7fd fdb0 	bl	b8730 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   babd0:	f8dd 300e 	ldr.w	r3, [sp, #14]
   babd4:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   babd8:	b200      	sxth	r0, r0
   babda:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   babde:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   babe2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   babe4:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   babe6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   babe8:	4628      	mov	r0, r5
   babea:	f7ff ffa2 	bl	bab32 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   babee:	a802      	add	r0, sp, #8
   babf0:	f7ff ff96 	bl	bab20 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   babf4:	2300      	movs	r3, #0
   babf6:	6023      	str	r3, [r4, #0]
   babf8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   babfa:	71a3      	strb	r3, [r4, #6]
   babfc:	8123      	strh	r3, [r4, #8]
   babfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bac02:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bac04:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bac08:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bac0a:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bac0e:	f8c4 3006 	str.w	r3, [r4, #6]
   bac12:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bac14:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bac16:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bac18:	4620      	mov	r0, r4
   bac1a:	f7ff ff8a 	bl	bab32 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bac1e:	4620      	mov	r0, r4
   bac20:	b00b      	add	sp, #44	; 0x2c
   bac22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bac24:	2600      	movs	r6, #0
   bac26:	2320      	movs	r3, #32
   bac28:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bac2c:	4b0b      	ldr	r3, [pc, #44]	; (bac5c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bac2e:	9300      	str	r3, [sp, #0]
   bac30:	aa02      	add	r2, sp, #8
   bac32:	4633      	mov	r3, r6
   bac34:	490a      	ldr	r1, [pc, #40]	; (bac60 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bac36:	2032      	movs	r0, #50	; 0x32
   bac38:	f7fd fcfa 	bl	b8630 <log_message>
            : wakeupSource_(nullptr),
   bac3c:	4b06      	ldr	r3, [pc, #24]	; (bac58 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bac3e:	4805      	ldr	r0, [pc, #20]	; (bac54 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bac40:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bac42:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bac46:	a902      	add	r1, sp, #8
   bac48:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bac4c:	f7ff ff83 	bl	bab56 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bac50:	e7cd      	b.n	babee <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bac52:	bf00      	nop
   bac54:	2003e69c 	.word	0x2003e69c
   bac58:	ffff0000 	.word	0xffff0000
   bac5c:	000bd35f 	.word	0x000bd35f
   bac60:	000bd358 	.word	0x000bd358

000bac64 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bac64:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bac66:	2420      	movs	r4, #32
{
   bac68:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bac6a:	4622      	mov	r2, r4
   bac6c:	2100      	movs	r1, #0
   bac6e:	4668      	mov	r0, sp
   bac70:	f001 f9c0 	bl	bbff4 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bac74:	2100      	movs	r1, #0
   bac76:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bac78:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bac7c:	f7fd fae0 	bl	b8240 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bac80:	9801      	ldr	r0, [sp, #4]
   bac82:	b008      	add	sp, #32
   bac84:	bd10      	pop	{r4, pc}
	...

000bac88 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bac88:	4b05      	ldr	r3, [pc, #20]	; (baca0 <_GLOBAL__sub_I_System+0x18>)
   bac8a:	2202      	movs	r2, #2
   bac8c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bac8e:	4b05      	ldr	r3, [pc, #20]	; (baca4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bac90:	4a05      	ldr	r2, [pc, #20]	; (baca8 <_GLOBAL__sub_I_System+0x20>)
   bac92:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bac94:	2000      	movs	r0, #0
   bac96:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bac9a:	f7fd bcfb 	b.w	b8694 <set_system_mode>
   bac9e:	bf00      	nop
   baca0:	2003e6a8 	.word	0x2003e6a8
   baca4:	2003e69c 	.word	0x2003e69c
   baca8:	ffff0000 	.word	0xffff0000

000bacac <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bacac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bacb0:	4a15      	ldr	r2, [pc, #84]	; (bad08 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bacb2:	f8df 8060 	ldr.w	r8, [pc, #96]	; bad14 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bacb6:	e9d2 6300 	ldrd	r6, r3, [r2]
   bacba:	1980      	adds	r0, r0, r6
   bacbc:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bacc0:	4b12      	ldr	r3, [pc, #72]	; (bad0c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bacc2:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bacc6:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bacca:	1986      	adds	r6, r0, r6
   baccc:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bacd0:	42bb      	cmp	r3, r7
   bacd2:	bf08      	it	eq
   bacd4:	42b2      	cmpeq	r2, r6
{
   bacd6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bacd8:	d013      	beq.n	bad02 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bacda:	a903      	add	r1, sp, #12
   bacdc:	4668      	mov	r0, sp
   bacde:	e9cd 6700 	strd	r6, r7, [sp]
   bace2:	f7fd fe19 	bl	b8918 <localtime_r>
	calendar_time.tm_year += 1900;
   bace6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bace8:	4d09      	ldr	r5, [pc, #36]	; (bad10 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bacea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bacee:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bacf0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bacf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bacf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bacf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bacf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bacfa:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bacfe:	6823      	ldr	r3, [r4, #0]
   bad00:	602b      	str	r3, [r5, #0]
    }
}
   bad02:	b00c      	add	sp, #48	; 0x30
   bad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bad08:	2003e6e0 	.word	0x2003e6e0
   bad0c:	2003e6d8 	.word	0x2003e6d8
   bad10:	2003e6b4 	.word	0x2003e6b4
   bad14:	2003e6e8 	.word	0x2003e6e8

000bad18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bad18:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bad1a:	2000      	movs	r0, #0
   bad1c:	f7fd fd2c 	bl	b8778 <spark_sync_time_pending>
   bad20:	b128      	cbz	r0, bad2e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bad22:	f7fd fd21 	bl	b8768 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bad26:	f080 0001 	eor.w	r0, r0, #1
   bad2a:	b2c0      	uxtb	r0, r0
    }
   bad2c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bad2e:	2001      	movs	r0, #1
   bad30:	e7fc      	b.n	bad2c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bad34 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bad34:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bad36:	f7ff ffb9 	bl	bacac <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bad3a:	4b01      	ldr	r3, [pc, #4]	; (bad40 <_ZN9TimeClass3dayEx+0xc>)
   bad3c:	68d8      	ldr	r0, [r3, #12]
   bad3e:	bd08      	pop	{r3, pc}
   bad40:	2003e6b4 	.word	0x2003e6b4

000bad44 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bad44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bad46:	4602      	mov	r2, r0
   bad48:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bad4a:	4668      	mov	r0, sp
    struct timeval tv = {
   bad4c:	2100      	movs	r1, #0
    };
   bad4e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bad52:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bad56:	f7fd fab3 	bl	b82c0 <hal_rtc_set_time>
   bad5a:	4602      	mov	r2, r0
   bad5c:	b910      	cbnz	r0, bad64 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bad5e:	4601      	mov	r1, r0
   bad60:	f7fd fcc0 	bl	b86e4 <system_notify_time_changed>
    }
}
   bad64:	b005      	add	sp, #20
   bad66:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bad6c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bad6c:	b530      	push	{r4, r5, lr}
   bad6e:	b093      	sub	sp, #76	; 0x4c
   bad70:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bad74:	4b19      	ldr	r3, [pc, #100]	; (baddc <_ZN9TimeClass7timeStrEx+0x70>)
{
   bad76:	4604      	mov	r4, r0
    t += time_zone_cache;
   bad78:	e9d3 1000 	ldrd	r1, r0, [r3]
   bad7c:	9b01      	ldr	r3, [sp, #4]
   bad7e:	1852      	adds	r2, r2, r1
   bad80:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bad84:	4816      	ldr	r0, [pc, #88]	; (bade0 <_ZN9TimeClass7timeStrEx+0x74>)
   bad86:	e9d0 1000 	ldrd	r1, r0, [r0]
   bad8a:	1852      	adds	r2, r2, r1
   bad8c:	eb43 0300 	adc.w	r3, r3, r0
   bad90:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bad94:	2224      	movs	r2, #36	; 0x24
   bad96:	eb0d 0002 	add.w	r0, sp, r2
   bad9a:	2100      	movs	r1, #0
   bad9c:	f001 f92a 	bl	bbff4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bada0:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bada2:	a909      	add	r1, sp, #36	; 0x24
   bada4:	4668      	mov	r0, sp
   bada6:	f7fd fdb7 	bl	b8918 <localtime_r>
    char ascstr[26] = {};
   badaa:	2216      	movs	r2, #22
   badac:	4629      	mov	r1, r5
   badae:	a803      	add	r0, sp, #12
   badb0:	9502      	str	r5, [sp, #8]
   badb2:	f001 f91f 	bl	bbff4 <memset>
    asctime_r(&calendar_time, ascstr);
   badb6:	a902      	add	r1, sp, #8
   badb8:	a809      	add	r0, sp, #36	; 0x24
   badba:	f001 f8a1 	bl	bbf00 <asctime_r>
    int len = strlen(ascstr);
   badbe:	a802      	add	r0, sp, #8
   badc0:	f001 f9b5 	bl	bc12e <strlen>
    ascstr[len-1] = 0; // remove final newline
   badc4:	ab12      	add	r3, sp, #72	; 0x48
   badc6:	4418      	add	r0, r3
    return String(ascstr);
   badc8:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   badca:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   badce:	4620      	mov	r0, r4
   badd0:	f7ff fe27 	bl	baa22 <_ZN6StringC1EPK19__FlashStringHelper>
}
   badd4:	4620      	mov	r0, r4
   badd6:	b013      	add	sp, #76	; 0x4c
   badd8:	bd30      	pop	{r4, r5, pc}
   badda:	bf00      	nop
   baddc:	2003e6e0 	.word	0x2003e6e0
   bade0:	2003e6d8 	.word	0x2003e6d8

000bade4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bade8:	b0a4      	sub	sp, #144	; 0x90
   badea:	4607      	mov	r7, r0
   badec:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   badee:	a814      	add	r0, sp, #80	; 0x50
{
   badf0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   badf2:	223f      	movs	r2, #63	; 0x3f
{
   badf4:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   badf6:	f001 f9b6 	bl	bc166 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   badfa:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   badfc:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   badfe:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bae02:	f001 f994 	bl	bc12e <strlen>
   bae06:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bae08:	bb4c      	cbnz	r4, bae5e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bae0a:	4929      	ldr	r1, [pc, #164]	; (baeb0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bae0c:	a803      	add	r0, sp, #12
   bae0e:	f001 f986 	bl	bc11e <strcpy>
   bae12:	ac14      	add	r4, sp, #80	; 0x50
{
   bae14:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bae16:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bae1a:	45b1      	cmp	r9, r6
   bae1c:	d934      	bls.n	bae88 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bae1e:	7823      	ldrb	r3, [r4, #0]
   bae20:	2b25      	cmp	r3, #37	; 0x25
   bae22:	f106 0a01 	add.w	sl, r6, #1
   bae26:	d117      	bne.n	bae58 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bae28:	7863      	ldrb	r3, [r4, #1]
   bae2a:	2b7a      	cmp	r3, #122	; 0x7a
   bae2c:	d114      	bne.n	bae58 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bae2e:	a803      	add	r0, sp, #12
   bae30:	f001 f97d 	bl	bc12e <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bae34:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bae36:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bae38:	1830      	adds	r0, r6, r0
   bae3a:	4418      	add	r0, r3
   bae3c:	eba9 0206 	sub.w	r2, r9, r6
   bae40:	1ca1      	adds	r1, r4, #2
   bae42:	f001 f8af 	bl	bbfa4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bae46:	462a      	mov	r2, r5
   bae48:	a903      	add	r1, sp, #12
   bae4a:	4620      	mov	r0, r4
   bae4c:	f001 f8aa 	bl	bbfa4 <memcpy>
            len = strlen(format_str);
   bae50:	a814      	add	r0, sp, #80	; 0x50
   bae52:	f001 f96c 	bl	bc12e <strlen>
   bae56:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bae58:	3401      	adds	r4, #1
   bae5a:	4656      	mov	r6, sl
   bae5c:	e7db      	b.n	bae16 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bae5e:	233c      	movs	r3, #60	; 0x3c
   bae60:	fb94 f2f3 	sdiv	r2, r4, r3
   bae64:	2a00      	cmp	r2, #0
   bae66:	bfb8      	it	lt
   bae68:	4252      	neglt	r2, r2
   bae6a:	fbb2 f1f3 	udiv	r1, r2, r3
   bae6e:	fb03 2211 	mls	r2, r3, r1, r2
   bae72:	9200      	str	r2, [sp, #0]
   bae74:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bae78:	4a0e      	ldr	r2, [pc, #56]	; (baeb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bae7a:	fb94 f3f3 	sdiv	r3, r4, r3
   bae7e:	2110      	movs	r1, #16
   bae80:	a803      	add	r0, sp, #12
   bae82:	f7fd fd11 	bl	b88a8 <snprintf>
   bae86:	e7c4      	b.n	bae12 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bae88:	2100      	movs	r1, #0
   bae8a:	222e      	movs	r2, #46	; 0x2e
   bae8c:	a808      	add	r0, sp, #32
   bae8e:	9107      	str	r1, [sp, #28]
   bae90:	f001 f8b0 	bl	bbff4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bae94:	4643      	mov	r3, r8
   bae96:	aa14      	add	r2, sp, #80	; 0x50
   bae98:	2132      	movs	r1, #50	; 0x32
   bae9a:	a807      	add	r0, sp, #28
   bae9c:	f7fd fd34 	bl	b8908 <strftime>
    return String(buf);
   baea0:	a907      	add	r1, sp, #28
   baea2:	4638      	mov	r0, r7
   baea4:	f7ff fdbd 	bl	baa22 <_ZN6StringC1EPK19__FlashStringHelper>
}
   baea8:	4638      	mov	r0, r7
   baeaa:	b024      	add	sp, #144	; 0x90
   baeac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   baeb0:	000bd386 	.word	0x000bd386
   baeb4:	000bd388 	.word	0x000bd388

000baeb8 <_ZN9TimeClass6formatExPKc>:
{
   baeb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   baeba:	b08d      	sub	sp, #52	; 0x34
   baebc:	e9cd 2300 	strd	r2, r3, [sp]
   baec0:	9d12      	ldr	r5, [sp, #72]	; 0x48
   baec2:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   baec4:	b915      	cbnz	r5, baecc <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   baec6:	4b19      	ldr	r3, [pc, #100]	; (baf2c <_ZN9TimeClass6formatExPKc+0x74>)
   baec8:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   baeca:	b12d      	cbz	r5, baed8 <_ZN9TimeClass6formatExPKc+0x20>
   baecc:	4b18      	ldr	r3, [pc, #96]	; (baf30 <_ZN9TimeClass6formatExPKc+0x78>)
   baece:	4628      	mov	r0, r5
   baed0:	6819      	ldr	r1, [r3, #0]
   baed2:	f001 f91a 	bl	bc10a <strcmp>
   baed6:	b938      	cbnz	r0, baee8 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   baed8:	e9dd 2300 	ldrd	r2, r3, [sp]
   baedc:	4620      	mov	r0, r4
   baede:	f7ff ff45 	bl	bad6c <_ZN9TimeClass7timeStrEx>
}
   baee2:	4620      	mov	r0, r4
   baee4:	b00d      	add	sp, #52	; 0x34
   baee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   baee8:	4e12      	ldr	r6, [pc, #72]	; (baf34 <_ZN9TimeClass6formatExPKc+0x7c>)
   baeea:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   baeec:	4f12      	ldr	r7, [pc, #72]	; (baf38 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   baeee:	e9d6 3200 	ldrd	r3, r2, [r6]
   baef2:	185b      	adds	r3, r3, r1
   baef4:	9901      	ldr	r1, [sp, #4]
   baef6:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   baefa:	e9d7 0100 	ldrd	r0, r1, [r7]
   baefe:	181b      	adds	r3, r3, r0
   baf00:	eb42 0201 	adc.w	r2, r2, r1
   baf04:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   baf08:	2100      	movs	r1, #0
   baf0a:	2224      	movs	r2, #36	; 0x24
   baf0c:	a803      	add	r0, sp, #12
   baf0e:	f001 f871 	bl	bbff4 <memset>
    localtime_r(&t, &calendar_time);
   baf12:	a903      	add	r1, sp, #12
   baf14:	4668      	mov	r0, sp
   baf16:	f7fd fcff 	bl	b8918 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   baf1a:	6832      	ldr	r2, [r6, #0]
   baf1c:	683b      	ldr	r3, [r7, #0]
   baf1e:	a903      	add	r1, sp, #12
   baf20:	4413      	add	r3, r2
   baf22:	4620      	mov	r0, r4
   baf24:	462a      	mov	r2, r5
   baf26:	f7ff ff5d 	bl	bade4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   baf2a:	e7da      	b.n	baee2 <_ZN9TimeClass6formatExPKc+0x2a>
   baf2c:	2003e6b0 	.word	0x2003e6b0
   baf30:	2003decc 	.word	0x2003decc
   baf34:	2003e6e0 	.word	0x2003e6e0
   baf38:	2003e6d8 	.word	0x2003e6d8

000baf3c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   baf3c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   baf3e:	2000      	movs	r0, #0
   baf40:	f7fd f9a6 	bl	b8290 <hal_rtc_time_is_valid>
    if (rtcstate)
   baf44:	4604      	mov	r4, r0
   baf46:	b9a0      	cbnz	r0, baf72 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   baf48:	f7fd fb9c 	bl	b8684 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   baf4c:	2801      	cmp	r0, #1
   baf4e:	d110      	bne.n	baf72 <_ZN9TimeClass7isValidEv+0x36>
   baf50:	4620      	mov	r0, r4
   baf52:	f7fd fbbf 	bl	b86d4 <system_thread_get_state>
   baf56:	b960      	cbnz	r0, baf72 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   baf58:	f7ff fede 	bl	bad18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   baf5c:	b910      	cbnz	r0, baf64 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   baf5e:	f7fd fbfb 	bl	b8758 <spark_process>
        while (_while() && !_condition()) {
   baf62:	e7f9      	b.n	baf58 <_ZN9TimeClass7isValidEv+0x1c>
   baf64:	f7ff fed8 	bl	bad18 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   baf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   baf6c:	2000      	movs	r0, #0
   baf6e:	f7fd b98f 	b.w	b8290 <hal_rtc_time_is_valid>
}
   baf72:	4620      	mov	r0, r4
   baf74:	bd10      	pop	{r4, pc}

000baf76 <_ZN9TimeClass3nowEv>:
{
   baf76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   baf78:	f7ff ffe0 	bl	baf3c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   baf7c:	2210      	movs	r2, #16
   baf7e:	2100      	movs	r1, #0
   baf80:	4668      	mov	r0, sp
   baf82:	f001 f837 	bl	bbff4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   baf86:	2100      	movs	r1, #0
   baf88:	4668      	mov	r0, sp
   baf8a:	f7fd f991 	bl	b82b0 <hal_rtc_get_time>
}
   baf8e:	9800      	ldr	r0, [sp, #0]
   baf90:	b005      	add	sp, #20
   baf92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baf98 <_ZN9TimeClass3dayEv>:
{
   baf98:	b508      	push	{r3, lr}
	return day(now());
   baf9a:	f7ff ffec 	bl	baf76 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baf9e:	17c1      	asrs	r1, r0, #31
   bafa0:	f7ff fe84 	bl	bacac <_ZL22Refresh_UnixTime_Cachex>
}
   bafa4:	4b01      	ldr	r3, [pc, #4]	; (bafac <_ZN9TimeClass3dayEv+0x14>)
   bafa6:	68d8      	ldr	r0, [r3, #12]
   bafa8:	bd08      	pop	{r3, pc}
   bafaa:	bf00      	nop
   bafac:	2003e6b4 	.word	0x2003e6b4

000bafb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bafb0:	4b02      	ldr	r3, [pc, #8]	; (bafbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bafb2:	681a      	ldr	r2, [r3, #0]
   bafb4:	4b02      	ldr	r3, [pc, #8]	; (bafc0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bafb6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bafb8:	4770      	bx	lr
   bafba:	bf00      	nop
   bafbc:	2003decc 	.word	0x2003decc
   bafc0:	2003e6b0 	.word	0x2003e6b0

000bafc4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bafc4:	4770      	bx	lr

000bafc6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bafc6:	7441      	strb	r1, [r0, #17]
}
   bafc8:	4770      	bx	lr

000bafca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bafca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bafcc:	7c00      	ldrb	r0, [r0, #16]
   bafce:	f7fd fac7 	bl	b8560 <hal_usart_available_data_for_write>
}
   bafd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bafd6:	bd08      	pop	{r3, pc}

000bafd8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bafd8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bafda:	7c00      	ldrb	r0, [r0, #16]
   bafdc:	f7fd fa98 	bl	b8510 <hal_usart_available>
}
   bafe0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bafe4:	bd08      	pop	{r3, pc}

000bafe6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bafe6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bafe8:	7c00      	ldrb	r0, [r0, #16]
   bafea:	f7fd faa1 	bl	b8530 <hal_usart_peek>
}
   bafee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baff2:	bd08      	pop	{r3, pc}

000baff4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   baff4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   baff6:	7c00      	ldrb	r0, [r0, #16]
   baff8:	f7fd fa92 	bl	b8520 <hal_usart_read>
}
   baffc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb000:	bd08      	pop	{r3, pc}

000bb002 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb002:	7c00      	ldrb	r0, [r0, #16]
   bb004:	f7fd ba9c 	b.w	b8540 <hal_usart_flush>

000bb008 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb008:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb00a:	7c45      	ldrb	r5, [r0, #17]
{
   bb00c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb00e:	b12d      	cbz	r5, bb01c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb010:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb012:	b003      	add	sp, #12
   bb014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb018:	f7fd ba72 	b.w	b8500 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb01c:	7c00      	ldrb	r0, [r0, #16]
   bb01e:	9101      	str	r1, [sp, #4]
   bb020:	f7fd fa9e 	bl	b8560 <hal_usart_available_data_for_write>
   bb024:	2800      	cmp	r0, #0
   bb026:	9901      	ldr	r1, [sp, #4]
   bb028:	dcf2      	bgt.n	bb010 <_ZN11USARTSerial5writeEh+0x8>
}
   bb02a:	4628      	mov	r0, r5
   bb02c:	b003      	add	sp, #12
   bb02e:	bd30      	pop	{r4, r5, pc}

000bb030 <_ZN11USARTSerialD0Ev>:
   bb030:	b510      	push	{r4, lr}
   bb032:	2114      	movs	r1, #20
   bb034:	4604      	mov	r4, r0
   bb036:	f7f9 f832 	bl	b409e <_ZdlPvj>
   bb03a:	4620      	mov	r0, r4
   bb03c:	bd10      	pop	{r4, pc}
	...

000bb040 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb040:	b510      	push	{r4, lr}
   bb042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb046:	4604      	mov	r4, r0
   bb048:	4608      	mov	r0, r1
   bb04a:	4611      	mov	r1, r2
   bb04c:	2200      	movs	r2, #0
   bb04e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb052:	4b04      	ldr	r3, [pc, #16]	; (bb064 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb054:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb056:	2301      	movs	r3, #1
  _serial = serial;
   bb058:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb05a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb05c:	f7fd fa90 	bl	b8580 <hal_usart_init_ex>
}
   bb060:	4620      	mov	r0, r4
   bb062:	bd10      	pop	{r4, pc}
   bb064:	000bd3b8 	.word	0x000bd3b8

000bb068 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb068:	7c00      	ldrb	r0, [r0, #16]
   bb06a:	2300      	movs	r3, #0
   bb06c:	f7fd ba80 	b.w	b8570 <hal_usart_begin_config>

000bb070 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb070:	2200      	movs	r2, #0
   bb072:	f7ff bff9 	b.w	bb068 <_ZN11USARTSerial5beginEmm>

000bb076 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb076:	7c00      	ldrb	r0, [r0, #16]
   bb078:	f7fd ba3a 	b.w	b84f0 <hal_usart_end>

000bb07c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb07c:	7441      	strb	r1, [r0, #17]
}
   bb07e:	4770      	bx	lr

000bb080 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb080:	4770      	bx	lr

000bb082 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb082:	4770      	bx	lr

000bb084 <_ZN9USBSerial4readEv>:
{
   bb084:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb086:	2100      	movs	r1, #0
   bb088:	7c00      	ldrb	r0, [r0, #16]
   bb08a:	f7fd faa9 	bl	b85e0 <HAL_USB_USART_Receive_Data>
}
   bb08e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb092:	bd08      	pop	{r3, pc}

000bb094 <_ZN9USBSerial4peekEv>:
{
   bb094:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb096:	2101      	movs	r1, #1
   bb098:	7c00      	ldrb	r0, [r0, #16]
   bb09a:	f7fd faa1 	bl	b85e0 <HAL_USB_USART_Receive_Data>
}
   bb09e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb0a2:	bd08      	pop	{r3, pc}

000bb0a4 <_ZN9USBSerial17availableForWriteEv>:
{
   bb0a4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb0a6:	7c00      	ldrb	r0, [r0, #16]
   bb0a8:	f7fd fa92 	bl	b85d0 <HAL_USB_USART_Available_Data_For_Write>
}
   bb0ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb0b0:	bd08      	pop	{r3, pc}

000bb0b2 <_ZN9USBSerial9availableEv>:
{
   bb0b2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb0b4:	7c00      	ldrb	r0, [r0, #16]
   bb0b6:	f7fd fa83 	bl	b85c0 <HAL_USB_USART_Available_Data>
}
   bb0ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb0be:	bd08      	pop	{r3, pc}

000bb0c0 <_ZN9USBSerial5writeEh>:
{
   bb0c0:	b513      	push	{r0, r1, r4, lr}
   bb0c2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb0c4:	7c00      	ldrb	r0, [r0, #16]
{
   bb0c6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb0c8:	f7fd fa82 	bl	b85d0 <HAL_USB_USART_Available_Data_For_Write>
   bb0cc:	2800      	cmp	r0, #0
   bb0ce:	9901      	ldr	r1, [sp, #4]
   bb0d0:	dc01      	bgt.n	bb0d6 <_ZN9USBSerial5writeEh+0x16>
   bb0d2:	7c60      	ldrb	r0, [r4, #17]
   bb0d4:	b120      	cbz	r0, bb0e0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb0d6:	7c20      	ldrb	r0, [r4, #16]
   bb0d8:	f7fd fa8a 	bl	b85f0 <HAL_USB_USART_Send_Data>
   bb0dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb0e0:	b002      	add	sp, #8
   bb0e2:	bd10      	pop	{r4, pc}

000bb0e4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb0e4:	7c00      	ldrb	r0, [r0, #16]
   bb0e6:	f7fd ba8b 	b.w	b8600 <HAL_USB_USART_Flush_Data>

000bb0ea <_ZN9USBSerialD0Ev>:
   bb0ea:	b510      	push	{r4, lr}
   bb0ec:	2114      	movs	r1, #20
   bb0ee:	4604      	mov	r4, r0
   bb0f0:	f7f8 ffd5 	bl	b409e <_ZdlPvj>
   bb0f4:	4620      	mov	r0, r4
   bb0f6:	bd10      	pop	{r4, pc}

000bb0f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb0f8:	b510      	push	{r4, lr}
   bb0fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb0fe:	4604      	mov	r4, r0
   bb100:	4608      	mov	r0, r1
   bb102:	2100      	movs	r1, #0
   bb104:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb108:	4b04      	ldr	r3, [pc, #16]	; (bb11c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb10a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb10c:	2301      	movs	r3, #1
  _serial = serial;
   bb10e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb110:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb112:	4611      	mov	r1, r2
   bb114:	f7fd fa3c 	bl	b8590 <HAL_USB_USART_Init>
}
   bb118:	4620      	mov	r0, r4
   bb11a:	bd10      	pop	{r4, pc}
   bb11c:	000bd3e8 	.word	0x000bd3e8

000bb120 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb120:	7c00      	ldrb	r0, [r0, #16]
   bb122:	2200      	movs	r2, #0
   bb124:	f7fd ba3c 	b.w	b85a0 <HAL_USB_USART_Begin>

000bb128 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bb128:	7c00      	ldrb	r0, [r0, #16]
   bb12a:	f7fd ba41 	b.w	b85b0 <HAL_USB_USART_End>

000bb12e <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bb12e:	7c00      	ldrb	r0, [r0, #16]
   bb130:	f7fd ba6e 	b.w	b8610 <HAL_USB_USART_Is_Connected>

000bb134 <_Z19acquireSerialBufferv>:
{
   bb134:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb136:	2214      	movs	r2, #20
{
   bb138:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb13a:	2100      	movs	r1, #0
   bb13c:	f000 ff5a 	bl	bbff4 <memset>
}
   bb140:	4620      	mov	r0, r4
   bb142:	bd10      	pop	{r4, pc}

000bb144 <_Z16_fetch_usbserialv>:
{
   bb144:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb146:	4c0f      	ldr	r4, [pc, #60]	; (bb184 <_Z16_fetch_usbserialv+0x40>)
{
   bb148:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb14a:	a803      	add	r0, sp, #12
   bb14c:	f7ff fff2 	bl	bb134 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb150:	7821      	ldrb	r1, [r4, #0]
   bb152:	f3bf 8f5b 	dmb	ish
   bb156:	f011 0101 	ands.w	r1, r1, #1
   bb15a:	d10f      	bne.n	bb17c <_Z16_fetch_usbserialv+0x38>
   bb15c:	4620      	mov	r0, r4
   bb15e:	9101      	str	r1, [sp, #4]
   bb160:	f7f8 ffac 	bl	b40bc <__cxa_guard_acquire>
   bb164:	9901      	ldr	r1, [sp, #4]
   bb166:	b148      	cbz	r0, bb17c <_Z16_fetch_usbserialv+0x38>
   bb168:	aa03      	add	r2, sp, #12
   bb16a:	4807      	ldr	r0, [pc, #28]	; (bb188 <_Z16_fetch_usbserialv+0x44>)
   bb16c:	f7ff ffc4 	bl	bb0f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb170:	4620      	mov	r0, r4
   bb172:	f7f8 ffa8 	bl	b40c6 <__cxa_guard_release>
   bb176:	4805      	ldr	r0, [pc, #20]	; (bb18c <_Z16_fetch_usbserialv+0x48>)
   bb178:	f000 fee8 	bl	bbf4c <atexit>
	return _usbserial;
}
   bb17c:	4802      	ldr	r0, [pc, #8]	; (bb188 <_Z16_fetch_usbserialv+0x44>)
   bb17e:	b008      	add	sp, #32
   bb180:	bd10      	pop	{r4, pc}
   bb182:	bf00      	nop
   bb184:	2003e6f0 	.word	0x2003e6f0
   bb188:	2003e6f4 	.word	0x2003e6f4
   bb18c:	000bb081 	.word	0x000bb081

000bb190 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb190:	4b01      	ldr	r3, [pc, #4]	; (bb198 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb192:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb194:	4770      	bx	lr
   bb196:	bf00      	nop
   bb198:	2003ded0 	.word	0x2003ded0

000bb19c <serialEventRun>:
{
   bb19c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb19e:	4b0b      	ldr	r3, [pc, #44]	; (bb1cc <serialEventRun+0x30>)
   bb1a0:	b143      	cbz	r3, bb1b4 <serialEventRun+0x18>
   bb1a2:	f7ff ffcf 	bl	bb144 <_Z16_fetch_usbserialv>
   bb1a6:	6803      	ldr	r3, [r0, #0]
   bb1a8:	691b      	ldr	r3, [r3, #16]
   bb1aa:	4798      	blx	r3
   bb1ac:	2800      	cmp	r0, #0
   bb1ae:	dd01      	ble.n	bb1b4 <serialEventRun+0x18>
        serialEvent();
   bb1b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb1b4:	4b06      	ldr	r3, [pc, #24]	; (bb1d0 <serialEventRun+0x34>)
   bb1b6:	b143      	cbz	r3, bb1ca <serialEventRun+0x2e>
   bb1b8:	f000 f9c2 	bl	bb540 <_Z22__fetch_global_Serial1v>
   bb1bc:	6803      	ldr	r3, [r0, #0]
   bb1be:	691b      	ldr	r3, [r3, #16]
   bb1c0:	4798      	blx	r3
   bb1c2:	2800      	cmp	r0, #0
   bb1c4:	dd01      	ble.n	bb1ca <serialEventRun+0x2e>
        serialEvent1();
   bb1c6:	f3af 8000 	nop.w
}
   bb1ca:	bd08      	pop	{r3, pc}
	...

000bb1d4 <_post_loop>:
{
   bb1d4:	b508      	push	{r3, lr}
	serialEventRun();
   bb1d6:	f7ff ffe1 	bl	bb19c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb1da:	f7fd f851 	bl	b8280 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb1de:	4b01      	ldr	r3, [pc, #4]	; (bb1e4 <_post_loop+0x10>)
   bb1e0:	6018      	str	r0, [r3, #0]
}
   bb1e2:	bd08      	pop	{r3, pc}
   bb1e4:	2003e710 	.word	0x2003e710

000bb1e8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb1e8:	4805      	ldr	r0, [pc, #20]	; (bb200 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb1ea:	4a06      	ldr	r2, [pc, #24]	; (bb204 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb1ec:	4906      	ldr	r1, [pc, #24]	; (bb208 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb1ee:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb1f0:	1a12      	subs	r2, r2, r0
   bb1f2:	f000 fed7 	bl	bbfa4 <memcpy>
    __backup_sram_signature = signature;
   bb1f6:	4b05      	ldr	r3, [pc, #20]	; (bb20c <_Z33system_initialize_user_backup_ramv+0x24>)
   bb1f8:	4a05      	ldr	r2, [pc, #20]	; (bb210 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb1fa:	601a      	str	r2, [r3, #0]
}
   bb1fc:	bd08      	pop	{r3, pc}
   bb1fe:	bf00      	nop
   bb200:	2003f400 	.word	0x2003f400
   bb204:	2003f404 	.word	0x2003f404
   bb208:	000bd694 	.word	0x000bd694
   bb20c:	2003f400 	.word	0x2003f400
   bb210:	9a271c1e 	.word	0x9a271c1e

000bb214 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb214:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb216:	2300      	movs	r3, #0
   bb218:	9300      	str	r3, [sp, #0]
   bb21a:	461a      	mov	r2, r3
   bb21c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb220:	f7fd fa72 	bl	b8708 <system_ctrl_set_result>
}
   bb224:	b003      	add	sp, #12
   bb226:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb22c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb22c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb22e:	8843      	ldrh	r3, [r0, #2]
   bb230:	2b0a      	cmp	r3, #10
   bb232:	d008      	beq.n	bb246 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb234:	2b50      	cmp	r3, #80	; 0x50
   bb236:	d10b      	bne.n	bb250 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb238:	4b09      	ldr	r3, [pc, #36]	; (bb260 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb23a:	681b      	ldr	r3, [r3, #0]
   bb23c:	b14b      	cbz	r3, bb252 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb23e:	b003      	add	sp, #12
   bb240:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb244:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb246:	f7ff ffe5 	bl	bb214 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb24a:	b003      	add	sp, #12
   bb24c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb250:	2300      	movs	r3, #0
   bb252:	9300      	str	r3, [sp, #0]
   bb254:	461a      	mov	r2, r3
   bb256:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb25a:	f7fd fa55 	bl	b8708 <system_ctrl_set_result>
}
   bb25e:	e7f4      	b.n	bb24a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb260:	2003e70c 	.word	0x2003e70c

000bb264 <module_user_init_hook>:
{
   bb264:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb266:	4812      	ldr	r0, [pc, #72]	; (bb2b0 <module_user_init_hook+0x4c>)
   bb268:	2100      	movs	r1, #0
   bb26a:	f7fd fb45 	bl	b88f8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb26e:	4b11      	ldr	r3, [pc, #68]	; (bb2b4 <module_user_init_hook+0x50>)
   bb270:	681a      	ldr	r2, [r3, #0]
   bb272:	4b11      	ldr	r3, [pc, #68]	; (bb2b8 <module_user_init_hook+0x54>)
   bb274:	429a      	cmp	r2, r3
   bb276:	4b11      	ldr	r3, [pc, #68]	; (bb2bc <module_user_init_hook+0x58>)
   bb278:	bf0c      	ite	eq
   bb27a:	2201      	moveq	r2, #1
   bb27c:	2200      	movne	r2, #0
   bb27e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb280:	d001      	beq.n	bb286 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb282:	f7ff ffb1 	bl	bb1e8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb286:	f7fc ffeb 	bl	b8260 <HAL_RNG_GetRandomNumber>
   bb28a:	4604      	mov	r4, r0
    srand(seed);
   bb28c:	f000 feba 	bl	bc004 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb290:	4b0b      	ldr	r3, [pc, #44]	; (bb2c0 <module_user_init_hook+0x5c>)
   bb292:	b113      	cbz	r3, bb29a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb294:	4620      	mov	r0, r4
   bb296:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb29a:	2100      	movs	r1, #0
   bb29c:	4808      	ldr	r0, [pc, #32]	; (bb2c0 <module_user_init_hook+0x5c>)
   bb29e:	f7fd fa7b 	bl	b8798 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb2a6:	4807      	ldr	r0, [pc, #28]	; (bb2c4 <module_user_init_hook+0x60>)
   bb2a8:	2100      	movs	r1, #0
   bb2aa:	f7fd ba23 	b.w	b86f4 <system_ctrl_set_app_request_handler>
   bb2ae:	bf00      	nop
   bb2b0:	000bb191 	.word	0x000bb191
   bb2b4:	2003f400 	.word	0x2003f400
   bb2b8:	9a271c1e 	.word	0x9a271c1e
   bb2bc:	2003e708 	.word	0x2003e708
   bb2c0:	00000000 	.word	0x00000000
   bb2c4:	000bb22d 	.word	0x000bb22d

000bb2c8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bb2c8:	b508      	push	{r3, lr}
   bb2ca:	4b02      	ldr	r3, [pc, #8]	; (bb2d4 <spark_protocol_instance+0xc>)
   bb2cc:	681b      	ldr	r3, [r3, #0]
   bb2ce:	681b      	ldr	r3, [r3, #0]
   bb2d0:	9301      	str	r3, [sp, #4]
   bb2d2:	bd08      	pop	{r3, pc}
   bb2d4:	0003025c 	.word	0x0003025c

000bb2d8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bb2d8:	b508      	push	{r3, lr}
   bb2da:	4b02      	ldr	r3, [pc, #8]	; (bb2e4 <spark_protocol_set_product_id+0xc>)
   bb2dc:	681b      	ldr	r3, [r3, #0]
   bb2de:	685b      	ldr	r3, [r3, #4]
   bb2e0:	9301      	str	r3, [sp, #4]
   bb2e2:	bd08      	pop	{r3, pc}
   bb2e4:	0003025c 	.word	0x0003025c

000bb2e8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bb2e8:	b508      	push	{r3, lr}
   bb2ea:	4b02      	ldr	r3, [pc, #8]	; (bb2f4 <spark_protocol_set_product_firmware_version+0xc>)
   bb2ec:	681b      	ldr	r3, [r3, #0]
   bb2ee:	689b      	ldr	r3, [r3, #8]
   bb2f0:	9301      	str	r3, [sp, #4]
   bb2f2:	bd08      	pop	{r3, pc}
   bb2f4:	0003025c 	.word	0x0003025c

000bb2f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb2f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb2fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb2fc:	d902      	bls.n	bb304 <pinAvailable+0xc>
    return false;
   bb2fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb300:	b002      	add	sp, #8
   bb302:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb304:	f1a0 030b 	sub.w	r3, r0, #11
   bb308:	2b02      	cmp	r3, #2
   bb30a:	d81a      	bhi.n	bb342 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb30c:	4c17      	ldr	r4, [pc, #92]	; (bb36c <pinAvailable+0x74>)
   bb30e:	7821      	ldrb	r1, [r4, #0]
   bb310:	f3bf 8f5b 	dmb	ish
   bb314:	f011 0101 	ands.w	r1, r1, #1
   bb318:	d10b      	bne.n	bb332 <pinAvailable+0x3a>
   bb31a:	4620      	mov	r0, r4
   bb31c:	9101      	str	r1, [sp, #4]
   bb31e:	f7f8 fecd 	bl	b40bc <__cxa_guard_acquire>
   bb322:	9901      	ldr	r1, [sp, #4]
   bb324:	b128      	cbz	r0, bb332 <pinAvailable+0x3a>
   bb326:	4812      	ldr	r0, [pc, #72]	; (bb370 <pinAvailable+0x78>)
   bb328:	f7ff fa70 	bl	ba80c <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb32c:	4620      	mov	r0, r4
   bb32e:	f7f8 feca 	bl	b40c6 <__cxa_guard_release>
   bb332:	4b0f      	ldr	r3, [pc, #60]	; (bb370 <pinAvailable+0x78>)
   bb334:	7818      	ldrb	r0, [r3, #0]
   bb336:	f7fd f8b3 	bl	b84a0 <hal_spi_is_enabled>
   bb33a:	2800      	cmp	r0, #0
   bb33c:	d1df      	bne.n	bb2fe <pinAvailable+0x6>
  return true; // 'pin' is available
   bb33e:	2001      	movs	r0, #1
   bb340:	e7de      	b.n	bb300 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb342:	2801      	cmp	r0, #1
   bb344:	d809      	bhi.n	bb35a <pinAvailable+0x62>
   bb346:	f000 f897 	bl	bb478 <_Z19__fetch_global_Wirev>
   bb34a:	2100      	movs	r1, #0
   bb34c:	7c00      	ldrb	r0, [r0, #16]
   bb34e:	f7fd f847 	bl	b83e0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb352:	f080 0001 	eor.w	r0, r0, #1
   bb356:	b2c0      	uxtb	r0, r0
   bb358:	e7d2      	b.n	bb300 <pinAvailable+0x8>
   bb35a:	3809      	subs	r0, #9
   bb35c:	2801      	cmp	r0, #1
   bb35e:	d8ee      	bhi.n	bb33e <pinAvailable+0x46>
   bb360:	f000 f8ee 	bl	bb540 <_Z22__fetch_global_Serial1v>
   bb364:	7c00      	ldrb	r0, [r0, #16]
   bb366:	f7fd f8f3 	bl	b8550 <hal_usart_is_enabled>
   bb36a:	e7f2      	b.n	bb352 <pinAvailable+0x5a>
   bb36c:	2003e3e4 	.word	0x2003e3e4
   bb370:	2003e3e8 	.word	0x2003e3e8

000bb374 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb374:	2823      	cmp	r0, #35	; 0x23
{
   bb376:	b538      	push	{r3, r4, r5, lr}
   bb378:	4604      	mov	r4, r0
   bb37a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb37c:	d80a      	bhi.n	bb394 <pinMode+0x20>
   bb37e:	29ff      	cmp	r1, #255	; 0xff
   bb380:	d008      	beq.n	bb394 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb382:	f7ff ffb9 	bl	bb2f8 <pinAvailable>
   bb386:	b128      	cbz	r0, bb394 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb388:	4629      	mov	r1, r5
   bb38a:	4620      	mov	r0, r4
}
   bb38c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb390:	f7fc bfae 	b.w	b82f0 <HAL_Pin_Mode>
}
   bb394:	bd38      	pop	{r3, r4, r5, pc}

000bb396 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb396:	b538      	push	{r3, r4, r5, lr}
   bb398:	4604      	mov	r4, r0
   bb39a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb39c:	f7fc ffb0 	bl	b8300 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb3a0:	28ff      	cmp	r0, #255	; 0xff
   bb3a2:	d010      	beq.n	bb3c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb3a4:	2806      	cmp	r0, #6
   bb3a6:	d804      	bhi.n	bb3b2 <digitalWrite+0x1c>
   bb3a8:	234d      	movs	r3, #77	; 0x4d
   bb3aa:	fa23 f000 	lsr.w	r0, r3, r0
   bb3ae:	07c3      	lsls	r3, r0, #31
   bb3b0:	d409      	bmi.n	bb3c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb3b2:	4620      	mov	r0, r4
   bb3b4:	f7ff ffa0 	bl	bb2f8 <pinAvailable>
   bb3b8:	b128      	cbz	r0, bb3c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb3ba:	4629      	mov	r1, r5
   bb3bc:	4620      	mov	r0, r4
}
   bb3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb3c2:	f7fc bfa5 	b.w	b8310 <HAL_GPIO_Write>
}
   bb3c6:	bd38      	pop	{r3, r4, r5, pc}

000bb3c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bb3c8:	b510      	push	{r4, lr}
   bb3ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb3cc:	f7fc ff98 	bl	b8300 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb3d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb3d2:	b2db      	uxtb	r3, r3
   bb3d4:	2b01      	cmp	r3, #1
   bb3d6:	d908      	bls.n	bb3ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb3d8:	4620      	mov	r0, r4
   bb3da:	f7ff ff8d 	bl	bb2f8 <pinAvailable>
   bb3de:	b120      	cbz	r0, bb3ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bb3e0:	4620      	mov	r0, r4
}
   bb3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bb3e6:	f7fc bf9b 	b.w	b8320 <HAL_GPIO_Read>
}
   bb3ea:	2000      	movs	r0, #0
   bb3ec:	bd10      	pop	{r4, pc}

000bb3ee <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb3ee:	280d      	cmp	r0, #13
{
   bb3f0:	b510      	push	{r4, lr}
   bb3f2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb3f4:	bf9c      	itt	ls
   bb3f6:	340e      	addls	r4, #14
   bb3f8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bb3fa:	4620      	mov	r0, r4
   bb3fc:	f7ff ff7c 	bl	bb2f8 <pinAvailable>
   bb400:	b150      	cbz	r0, bb418 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bb402:	2103      	movs	r1, #3
   bb404:	4620      	mov	r0, r4
   bb406:	f7fc ff6b 	bl	b82e0 <HAL_Validate_Pin_Function>
   bb40a:	2803      	cmp	r0, #3
   bb40c:	d104      	bne.n	bb418 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb40e:	4620      	mov	r0, r4
}
   bb410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb414:	f7fc bf9c 	b.w	b8350 <hal_adc_read>
}
   bb418:	2000      	movs	r0, #0
   bb41a:	bd10      	pop	{r4, pc}

000bb41c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb41c:	4770      	bx	lr

000bb41e <__tcf_1>:
   bb41e:	4770      	bx	lr

000bb420 <_Z17acquireWireBufferv>:
{
   bb420:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb422:	2520      	movs	r5, #32
   bb424:	2314      	movs	r3, #20
{
   bb426:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb428:	6003      	str	r3, [r0, #0]
   bb42a:	6085      	str	r5, [r0, #8]
   bb42c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb42e:	4906      	ldr	r1, [pc, #24]	; (bb448 <_Z17acquireWireBufferv+0x28>)
   bb430:	4628      	mov	r0, r5
   bb432:	f000 f8ab 	bl	bb58c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb436:	4904      	ldr	r1, [pc, #16]	; (bb448 <_Z17acquireWireBufferv+0x28>)
	};
   bb438:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb43a:	4628      	mov	r0, r5
   bb43c:	f000 f8a6 	bl	bb58c <_ZnajRKSt9nothrow_t>
	};
   bb440:	60e0      	str	r0, [r4, #12]
}
   bb442:	4620      	mov	r0, r4
   bb444:	bd38      	pop	{r3, r4, r5, pc}
   bb446:	bf00      	nop
   bb448:	000bd410 	.word	0x000bd410

000bb44c <_Z18acquireWire1Bufferv>:
   bb44c:	b538      	push	{r3, r4, r5, lr}
   bb44e:	2520      	movs	r5, #32
   bb450:	2314      	movs	r3, #20
   bb452:	4604      	mov	r4, r0
   bb454:	6003      	str	r3, [r0, #0]
   bb456:	6085      	str	r5, [r0, #8]
   bb458:	6105      	str	r5, [r0, #16]
   bb45a:	4906      	ldr	r1, [pc, #24]	; (bb474 <_Z18acquireWire1Bufferv+0x28>)
   bb45c:	4628      	mov	r0, r5
   bb45e:	f000 f895 	bl	bb58c <_ZnajRKSt9nothrow_t>
   bb462:	4904      	ldr	r1, [pc, #16]	; (bb474 <_Z18acquireWire1Bufferv+0x28>)
   bb464:	6060      	str	r0, [r4, #4]
   bb466:	4628      	mov	r0, r5
   bb468:	f000 f890 	bl	bb58c <_ZnajRKSt9nothrow_t>
   bb46c:	60e0      	str	r0, [r4, #12]
   bb46e:	4620      	mov	r0, r4
   bb470:	bd38      	pop	{r3, r4, r5, pc}
   bb472:	bf00      	nop
   bb474:	000bd410 	.word	0x000bd410

000bb478 <_Z19__fetch_global_Wirev>:
{
   bb478:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb47a:	4d0e      	ldr	r5, [pc, #56]	; (bb4b4 <_Z19__fetch_global_Wirev+0x3c>)
   bb47c:	7829      	ldrb	r1, [r5, #0]
   bb47e:	f3bf 8f5b 	dmb	ish
   bb482:	f011 0401 	ands.w	r4, r1, #1
{
   bb486:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb488:	d111      	bne.n	bb4ae <_Z19__fetch_global_Wirev+0x36>
   bb48a:	4628      	mov	r0, r5
   bb48c:	f7f8 fe16 	bl	b40bc <__cxa_guard_acquire>
   bb490:	b168      	cbz	r0, bb4ae <_Z19__fetch_global_Wirev+0x36>
   bb492:	a801      	add	r0, sp, #4
   bb494:	f7ff ffc4 	bl	bb420 <_Z17acquireWireBufferv>
   bb498:	aa01      	add	r2, sp, #4
   bb49a:	4621      	mov	r1, r4
   bb49c:	4806      	ldr	r0, [pc, #24]	; (bb4b8 <_Z19__fetch_global_Wirev+0x40>)
   bb49e:	f7fd fc65 	bl	b8d6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb4a2:	4628      	mov	r0, r5
   bb4a4:	f7f8 fe0f 	bl	b40c6 <__cxa_guard_release>
   bb4a8:	4804      	ldr	r0, [pc, #16]	; (bb4bc <_Z19__fetch_global_Wirev+0x44>)
   bb4aa:	f000 fd4f 	bl	bbf4c <atexit>
	return wire;
}
   bb4ae:	4802      	ldr	r0, [pc, #8]	; (bb4b8 <_Z19__fetch_global_Wirev+0x40>)
   bb4b0:	b007      	add	sp, #28
   bb4b2:	bd30      	pop	{r4, r5, pc}
   bb4b4:	2003e714 	.word	0x2003e714
   bb4b8:	2003e71c 	.word	0x2003e71c
   bb4bc:	000bb41d 	.word	0x000bb41d

000bb4c0 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bb4c0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb4c2:	4c0e      	ldr	r4, [pc, #56]	; (bb4fc <_Z20__fetch_global_Wire1v+0x3c>)
   bb4c4:	7823      	ldrb	r3, [r4, #0]
   bb4c6:	f3bf 8f5b 	dmb	ish
   bb4ca:	07db      	lsls	r3, r3, #31
{
   bb4cc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb4ce:	d411      	bmi.n	bb4f4 <_Z20__fetch_global_Wire1v+0x34>
   bb4d0:	4620      	mov	r0, r4
   bb4d2:	f7f8 fdf3 	bl	b40bc <__cxa_guard_acquire>
   bb4d6:	b168      	cbz	r0, bb4f4 <_Z20__fetch_global_Wire1v+0x34>
   bb4d8:	a801      	add	r0, sp, #4
   bb4da:	f7ff ffb7 	bl	bb44c <_Z18acquireWire1Bufferv>
   bb4de:	aa01      	add	r2, sp, #4
   bb4e0:	2101      	movs	r1, #1
   bb4e2:	4807      	ldr	r0, [pc, #28]	; (bb500 <_Z20__fetch_global_Wire1v+0x40>)
   bb4e4:	f7fd fc42 	bl	b8d6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb4e8:	4620      	mov	r0, r4
   bb4ea:	f7f8 fdec 	bl	b40c6 <__cxa_guard_release>
   bb4ee:	4805      	ldr	r0, [pc, #20]	; (bb504 <_Z20__fetch_global_Wire1v+0x44>)
   bb4f0:	f000 fd2c 	bl	bbf4c <atexit>
	return wire;
}
   bb4f4:	4802      	ldr	r0, [pc, #8]	; (bb500 <_Z20__fetch_global_Wire1v+0x40>)
   bb4f6:	b006      	add	sp, #24
   bb4f8:	bd10      	pop	{r4, pc}
   bb4fa:	bf00      	nop
   bb4fc:	2003e718 	.word	0x2003e718
   bb500:	2003e730 	.word	0x2003e730
   bb504:	000bb41f 	.word	0x000bb41f

000bb508 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb508:	4770      	bx	lr
	...

000bb50c <_Z20acquireSerial1Bufferv>:
{
   bb50c:	b538      	push	{r3, r4, r5, lr}
   bb50e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb510:	2514      	movs	r5, #20
   bb512:	462a      	mov	r2, r5
   bb514:	2100      	movs	r1, #0
   bb516:	f000 fd6d 	bl	bbff4 <memset>
   bb51a:	8025      	strh	r5, [r4, #0]
   bb51c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb51e:	4907      	ldr	r1, [pc, #28]	; (bb53c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb520:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb522:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb524:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb526:	f000 f831 	bl	bb58c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb52a:	4904      	ldr	r1, [pc, #16]	; (bb53c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb52c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb52e:	4628      	mov	r0, r5
   bb530:	f000 f82c 	bl	bb58c <_ZnajRKSt9nothrow_t>
    };
   bb534:	60e0      	str	r0, [r4, #12]
}
   bb536:	4620      	mov	r0, r4
   bb538:	bd38      	pop	{r3, r4, r5, pc}
   bb53a:	bf00      	nop
   bb53c:	000bd410 	.word	0x000bd410

000bb540 <_Z22__fetch_global_Serial1v>:
{
   bb540:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb542:	4d0e      	ldr	r5, [pc, #56]	; (bb57c <_Z22__fetch_global_Serial1v+0x3c>)
   bb544:	7829      	ldrb	r1, [r5, #0]
   bb546:	f3bf 8f5b 	dmb	ish
   bb54a:	f011 0401 	ands.w	r4, r1, #1
{
   bb54e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb550:	d111      	bne.n	bb576 <_Z22__fetch_global_Serial1v+0x36>
   bb552:	4628      	mov	r0, r5
   bb554:	f7f8 fdb2 	bl	b40bc <__cxa_guard_acquire>
   bb558:	b168      	cbz	r0, bb576 <_Z22__fetch_global_Serial1v+0x36>
   bb55a:	a801      	add	r0, sp, #4
   bb55c:	f7ff ffd6 	bl	bb50c <_Z20acquireSerial1Bufferv>
   bb560:	aa01      	add	r2, sp, #4
   bb562:	4621      	mov	r1, r4
   bb564:	4806      	ldr	r0, [pc, #24]	; (bb580 <_Z22__fetch_global_Serial1v+0x40>)
   bb566:	f7ff fd6b 	bl	bb040 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb56a:	4628      	mov	r0, r5
   bb56c:	f7f8 fdab 	bl	b40c6 <__cxa_guard_release>
   bb570:	4804      	ldr	r0, [pc, #16]	; (bb584 <_Z22__fetch_global_Serial1v+0x44>)
   bb572:	f000 fceb 	bl	bbf4c <atexit>
    return serial1;
}
   bb576:	4802      	ldr	r0, [pc, #8]	; (bb580 <_Z22__fetch_global_Serial1v+0x40>)
   bb578:	b007      	add	sp, #28
   bb57a:	bd30      	pop	{r4, r5, pc}
   bb57c:	2003e744 	.word	0x2003e744
   bb580:	2003e748 	.word	0x2003e748
   bb584:	000bb509 	.word	0x000bb509

000bb588 <_ZnwjRKSt9nothrow_t>:
   bb588:	f7f8 bd85 	b.w	b4096 <_Znwj>

000bb58c <_ZnajRKSt9nothrow_t>:
   bb58c:	f7f8 bd85 	b.w	b409a <_Znaj>

000bb590 <_ZSt25__throw_bad_function_callv>:
   bb590:	b508      	push	{r3, lr}
   bb592:	f7fd f999 	bl	b88c8 <abort>
	...

000bb598 <__aeabi_drsub>:
   bb598:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb59c:	e002      	b.n	bb5a4 <__adddf3>
   bb59e:	bf00      	nop

000bb5a0 <__aeabi_dsub>:
   bb5a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb5a4 <__adddf3>:
   bb5a4:	b530      	push	{r4, r5, lr}
   bb5a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb5aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb5ae:	ea94 0f05 	teq	r4, r5
   bb5b2:	bf08      	it	eq
   bb5b4:	ea90 0f02 	teqeq	r0, r2
   bb5b8:	bf1f      	itttt	ne
   bb5ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb5be:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb5c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb5c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb5ca:	f000 80e2 	beq.w	bb792 <__adddf3+0x1ee>
   bb5ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb5d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb5d6:	bfb8      	it	lt
   bb5d8:	426d      	neglt	r5, r5
   bb5da:	dd0c      	ble.n	bb5f6 <__adddf3+0x52>
   bb5dc:	442c      	add	r4, r5
   bb5de:	ea80 0202 	eor.w	r2, r0, r2
   bb5e2:	ea81 0303 	eor.w	r3, r1, r3
   bb5e6:	ea82 0000 	eor.w	r0, r2, r0
   bb5ea:	ea83 0101 	eor.w	r1, r3, r1
   bb5ee:	ea80 0202 	eor.w	r2, r0, r2
   bb5f2:	ea81 0303 	eor.w	r3, r1, r3
   bb5f6:	2d36      	cmp	r5, #54	; 0x36
   bb5f8:	bf88      	it	hi
   bb5fa:	bd30      	pophi	{r4, r5, pc}
   bb5fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb600:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb604:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb608:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb60c:	d002      	beq.n	bb614 <__adddf3+0x70>
   bb60e:	4240      	negs	r0, r0
   bb610:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb614:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb618:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb61c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb620:	d002      	beq.n	bb628 <__adddf3+0x84>
   bb622:	4252      	negs	r2, r2
   bb624:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb628:	ea94 0f05 	teq	r4, r5
   bb62c:	f000 80a7 	beq.w	bb77e <__adddf3+0x1da>
   bb630:	f1a4 0401 	sub.w	r4, r4, #1
   bb634:	f1d5 0e20 	rsbs	lr, r5, #32
   bb638:	db0d      	blt.n	bb656 <__adddf3+0xb2>
   bb63a:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb63e:	fa22 f205 	lsr.w	r2, r2, r5
   bb642:	1880      	adds	r0, r0, r2
   bb644:	f141 0100 	adc.w	r1, r1, #0
   bb648:	fa03 f20e 	lsl.w	r2, r3, lr
   bb64c:	1880      	adds	r0, r0, r2
   bb64e:	fa43 f305 	asr.w	r3, r3, r5
   bb652:	4159      	adcs	r1, r3
   bb654:	e00e      	b.n	bb674 <__adddf3+0xd0>
   bb656:	f1a5 0520 	sub.w	r5, r5, #32
   bb65a:	f10e 0e20 	add.w	lr, lr, #32
   bb65e:	2a01      	cmp	r2, #1
   bb660:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb664:	bf28      	it	cs
   bb666:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb66a:	fa43 f305 	asr.w	r3, r3, r5
   bb66e:	18c0      	adds	r0, r0, r3
   bb670:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb678:	d507      	bpl.n	bb68a <__adddf3+0xe6>
   bb67a:	f04f 0e00 	mov.w	lr, #0
   bb67e:	f1dc 0c00 	rsbs	ip, ip, #0
   bb682:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb686:	eb6e 0101 	sbc.w	r1, lr, r1
   bb68a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb68e:	d31b      	bcc.n	bb6c8 <__adddf3+0x124>
   bb690:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb694:	d30c      	bcc.n	bb6b0 <__adddf3+0x10c>
   bb696:	0849      	lsrs	r1, r1, #1
   bb698:	ea5f 0030 	movs.w	r0, r0, rrx
   bb69c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb6a0:	f104 0401 	add.w	r4, r4, #1
   bb6a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb6a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb6ac:	f080 809a 	bcs.w	bb7e4 <__adddf3+0x240>
   bb6b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb6b4:	bf08      	it	eq
   bb6b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb6ba:	f150 0000 	adcs.w	r0, r0, #0
   bb6be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb6c2:	ea41 0105 	orr.w	r1, r1, r5
   bb6c6:	bd30      	pop	{r4, r5, pc}
   bb6c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb6cc:	4140      	adcs	r0, r0
   bb6ce:	eb41 0101 	adc.w	r1, r1, r1
   bb6d2:	3c01      	subs	r4, #1
   bb6d4:	bf28      	it	cs
   bb6d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb6da:	d2e9      	bcs.n	bb6b0 <__adddf3+0x10c>
   bb6dc:	f091 0f00 	teq	r1, #0
   bb6e0:	bf04      	itt	eq
   bb6e2:	4601      	moveq	r1, r0
   bb6e4:	2000      	moveq	r0, #0
   bb6e6:	fab1 f381 	clz	r3, r1
   bb6ea:	bf08      	it	eq
   bb6ec:	3320      	addeq	r3, #32
   bb6ee:	f1a3 030b 	sub.w	r3, r3, #11
   bb6f2:	f1b3 0220 	subs.w	r2, r3, #32
   bb6f6:	da0c      	bge.n	bb712 <__adddf3+0x16e>
   bb6f8:	320c      	adds	r2, #12
   bb6fa:	dd08      	ble.n	bb70e <__adddf3+0x16a>
   bb6fc:	f102 0c14 	add.w	ip, r2, #20
   bb700:	f1c2 020c 	rsb	r2, r2, #12
   bb704:	fa01 f00c 	lsl.w	r0, r1, ip
   bb708:	fa21 f102 	lsr.w	r1, r1, r2
   bb70c:	e00c      	b.n	bb728 <__adddf3+0x184>
   bb70e:	f102 0214 	add.w	r2, r2, #20
   bb712:	bfd8      	it	le
   bb714:	f1c2 0c20 	rsble	ip, r2, #32
   bb718:	fa01 f102 	lsl.w	r1, r1, r2
   bb71c:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb720:	bfdc      	itt	le
   bb722:	ea41 010c 	orrle.w	r1, r1, ip
   bb726:	4090      	lslle	r0, r2
   bb728:	1ae4      	subs	r4, r4, r3
   bb72a:	bfa2      	ittt	ge
   bb72c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb730:	4329      	orrge	r1, r5
   bb732:	bd30      	popge	{r4, r5, pc}
   bb734:	ea6f 0404 	mvn.w	r4, r4
   bb738:	3c1f      	subs	r4, #31
   bb73a:	da1c      	bge.n	bb776 <__adddf3+0x1d2>
   bb73c:	340c      	adds	r4, #12
   bb73e:	dc0e      	bgt.n	bb75e <__adddf3+0x1ba>
   bb740:	f104 0414 	add.w	r4, r4, #20
   bb744:	f1c4 0220 	rsb	r2, r4, #32
   bb748:	fa20 f004 	lsr.w	r0, r0, r4
   bb74c:	fa01 f302 	lsl.w	r3, r1, r2
   bb750:	ea40 0003 	orr.w	r0, r0, r3
   bb754:	fa21 f304 	lsr.w	r3, r1, r4
   bb758:	ea45 0103 	orr.w	r1, r5, r3
   bb75c:	bd30      	pop	{r4, r5, pc}
   bb75e:	f1c4 040c 	rsb	r4, r4, #12
   bb762:	f1c4 0220 	rsb	r2, r4, #32
   bb766:	fa20 f002 	lsr.w	r0, r0, r2
   bb76a:	fa01 f304 	lsl.w	r3, r1, r4
   bb76e:	ea40 0003 	orr.w	r0, r0, r3
   bb772:	4629      	mov	r1, r5
   bb774:	bd30      	pop	{r4, r5, pc}
   bb776:	fa21 f004 	lsr.w	r0, r1, r4
   bb77a:	4629      	mov	r1, r5
   bb77c:	bd30      	pop	{r4, r5, pc}
   bb77e:	f094 0f00 	teq	r4, #0
   bb782:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb786:	bf06      	itte	eq
   bb788:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb78c:	3401      	addeq	r4, #1
   bb78e:	3d01      	subne	r5, #1
   bb790:	e74e      	b.n	bb630 <__adddf3+0x8c>
   bb792:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb796:	bf18      	it	ne
   bb798:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb79c:	d029      	beq.n	bb7f2 <__adddf3+0x24e>
   bb79e:	ea94 0f05 	teq	r4, r5
   bb7a2:	bf08      	it	eq
   bb7a4:	ea90 0f02 	teqeq	r0, r2
   bb7a8:	d005      	beq.n	bb7b6 <__adddf3+0x212>
   bb7aa:	ea54 0c00 	orrs.w	ip, r4, r0
   bb7ae:	bf04      	itt	eq
   bb7b0:	4619      	moveq	r1, r3
   bb7b2:	4610      	moveq	r0, r2
   bb7b4:	bd30      	pop	{r4, r5, pc}
   bb7b6:	ea91 0f03 	teq	r1, r3
   bb7ba:	bf1e      	ittt	ne
   bb7bc:	2100      	movne	r1, #0
   bb7be:	2000      	movne	r0, #0
   bb7c0:	bd30      	popne	{r4, r5, pc}
   bb7c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb7c6:	d105      	bne.n	bb7d4 <__adddf3+0x230>
   bb7c8:	0040      	lsls	r0, r0, #1
   bb7ca:	4149      	adcs	r1, r1
   bb7cc:	bf28      	it	cs
   bb7ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb7d2:	bd30      	pop	{r4, r5, pc}
   bb7d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb7d8:	bf3c      	itt	cc
   bb7da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb7de:	bd30      	popcc	{r4, r5, pc}
   bb7e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb7e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb7e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb7ec:	f04f 0000 	mov.w	r0, #0
   bb7f0:	bd30      	pop	{r4, r5, pc}
   bb7f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb7f6:	bf1a      	itte	ne
   bb7f8:	4619      	movne	r1, r3
   bb7fa:	4610      	movne	r0, r2
   bb7fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb800:	bf1c      	itt	ne
   bb802:	460b      	movne	r3, r1
   bb804:	4602      	movne	r2, r0
   bb806:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb80a:	bf06      	itte	eq
   bb80c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb810:	ea91 0f03 	teqeq	r1, r3
   bb814:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb818:	bd30      	pop	{r4, r5, pc}
   bb81a:	bf00      	nop

000bb81c <__aeabi_ui2d>:
   bb81c:	f090 0f00 	teq	r0, #0
   bb820:	bf04      	itt	eq
   bb822:	2100      	moveq	r1, #0
   bb824:	4770      	bxeq	lr
   bb826:	b530      	push	{r4, r5, lr}
   bb828:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb82c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb830:	f04f 0500 	mov.w	r5, #0
   bb834:	f04f 0100 	mov.w	r1, #0
   bb838:	e750      	b.n	bb6dc <__adddf3+0x138>
   bb83a:	bf00      	nop

000bb83c <__aeabi_i2d>:
   bb83c:	f090 0f00 	teq	r0, #0
   bb840:	bf04      	itt	eq
   bb842:	2100      	moveq	r1, #0
   bb844:	4770      	bxeq	lr
   bb846:	b530      	push	{r4, r5, lr}
   bb848:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb84c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb850:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb854:	bf48      	it	mi
   bb856:	4240      	negmi	r0, r0
   bb858:	f04f 0100 	mov.w	r1, #0
   bb85c:	e73e      	b.n	bb6dc <__adddf3+0x138>
   bb85e:	bf00      	nop

000bb860 <__aeabi_f2d>:
   bb860:	0042      	lsls	r2, r0, #1
   bb862:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb866:	ea4f 0131 	mov.w	r1, r1, rrx
   bb86a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb86e:	bf1f      	itttt	ne
   bb870:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb874:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb878:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb87c:	4770      	bxne	lr
   bb87e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb882:	bf08      	it	eq
   bb884:	4770      	bxeq	lr
   bb886:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb88a:	bf04      	itt	eq
   bb88c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb890:	4770      	bxeq	lr
   bb892:	b530      	push	{r4, r5, lr}
   bb894:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb89c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb8a0:	e71c      	b.n	bb6dc <__adddf3+0x138>
   bb8a2:	bf00      	nop

000bb8a4 <__aeabi_ul2d>:
   bb8a4:	ea50 0201 	orrs.w	r2, r0, r1
   bb8a8:	bf08      	it	eq
   bb8aa:	4770      	bxeq	lr
   bb8ac:	b530      	push	{r4, r5, lr}
   bb8ae:	f04f 0500 	mov.w	r5, #0
   bb8b2:	e00a      	b.n	bb8ca <__aeabi_l2d+0x16>

000bb8b4 <__aeabi_l2d>:
   bb8b4:	ea50 0201 	orrs.w	r2, r0, r1
   bb8b8:	bf08      	it	eq
   bb8ba:	4770      	bxeq	lr
   bb8bc:	b530      	push	{r4, r5, lr}
   bb8be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb8c2:	d502      	bpl.n	bb8ca <__aeabi_l2d+0x16>
   bb8c4:	4240      	negs	r0, r0
   bb8c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb8ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb8ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb8d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb8d6:	f43f aed8 	beq.w	bb68a <__adddf3+0xe6>
   bb8da:	f04f 0203 	mov.w	r2, #3
   bb8de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb8e2:	bf18      	it	ne
   bb8e4:	3203      	addne	r2, #3
   bb8e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb8ea:	bf18      	it	ne
   bb8ec:	3203      	addne	r2, #3
   bb8ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb8f2:	f1c2 0320 	rsb	r3, r2, #32
   bb8f6:	fa00 fc03 	lsl.w	ip, r0, r3
   bb8fa:	fa20 f002 	lsr.w	r0, r0, r2
   bb8fe:	fa01 fe03 	lsl.w	lr, r1, r3
   bb902:	ea40 000e 	orr.w	r0, r0, lr
   bb906:	fa21 f102 	lsr.w	r1, r1, r2
   bb90a:	4414      	add	r4, r2
   bb90c:	e6bd      	b.n	bb68a <__adddf3+0xe6>
   bb90e:	bf00      	nop

000bb910 <__aeabi_dmul>:
   bb910:	b570      	push	{r4, r5, r6, lr}
   bb912:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb916:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb91a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb91e:	bf1d      	ittte	ne
   bb920:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb924:	ea94 0f0c 	teqne	r4, ip
   bb928:	ea95 0f0c 	teqne	r5, ip
   bb92c:	f000 f8de 	bleq	bbaec <__aeabi_dmul+0x1dc>
   bb930:	442c      	add	r4, r5
   bb932:	ea81 0603 	eor.w	r6, r1, r3
   bb936:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb93a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb93e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb942:	bf18      	it	ne
   bb944:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb94c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb950:	d038      	beq.n	bb9c4 <__aeabi_dmul+0xb4>
   bb952:	fba0 ce02 	umull	ip, lr, r0, r2
   bb956:	f04f 0500 	mov.w	r5, #0
   bb95a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb95e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb962:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb966:	f04f 0600 	mov.w	r6, #0
   bb96a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb96e:	f09c 0f00 	teq	ip, #0
   bb972:	bf18      	it	ne
   bb974:	f04e 0e01 	orrne.w	lr, lr, #1
   bb978:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb97c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb980:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb984:	d204      	bcs.n	bb990 <__aeabi_dmul+0x80>
   bb986:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb98a:	416d      	adcs	r5, r5
   bb98c:	eb46 0606 	adc.w	r6, r6, r6
   bb990:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb994:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb998:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb99c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb9a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb9a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb9a8:	bf88      	it	hi
   bb9aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb9ae:	d81e      	bhi.n	bb9ee <__aeabi_dmul+0xde>
   bb9b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb9b4:	bf08      	it	eq
   bb9b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb9ba:	f150 0000 	adcs.w	r0, r0, #0
   bb9be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb9c2:	bd70      	pop	{r4, r5, r6, pc}
   bb9c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb9c8:	ea46 0101 	orr.w	r1, r6, r1
   bb9cc:	ea40 0002 	orr.w	r0, r0, r2
   bb9d0:	ea81 0103 	eor.w	r1, r1, r3
   bb9d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb9d8:	bfc2      	ittt	gt
   bb9da:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb9de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb9e2:	bd70      	popgt	{r4, r5, r6, pc}
   bb9e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb9e8:	f04f 0e00 	mov.w	lr, #0
   bb9ec:	3c01      	subs	r4, #1
   bb9ee:	f300 80ab 	bgt.w	bbb48 <__aeabi_dmul+0x238>
   bb9f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb9f6:	bfde      	ittt	le
   bb9f8:	2000      	movle	r0, #0
   bb9fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb9fe:	bd70      	pople	{r4, r5, r6, pc}
   bba00:	f1c4 0400 	rsb	r4, r4, #0
   bba04:	3c20      	subs	r4, #32
   bba06:	da35      	bge.n	bba74 <__aeabi_dmul+0x164>
   bba08:	340c      	adds	r4, #12
   bba0a:	dc1b      	bgt.n	bba44 <__aeabi_dmul+0x134>
   bba0c:	f104 0414 	add.w	r4, r4, #20
   bba10:	f1c4 0520 	rsb	r5, r4, #32
   bba14:	fa00 f305 	lsl.w	r3, r0, r5
   bba18:	fa20 f004 	lsr.w	r0, r0, r4
   bba1c:	fa01 f205 	lsl.w	r2, r1, r5
   bba20:	ea40 0002 	orr.w	r0, r0, r2
   bba24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bba28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bba2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bba30:	fa21 f604 	lsr.w	r6, r1, r4
   bba34:	eb42 0106 	adc.w	r1, r2, r6
   bba38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bba3c:	bf08      	it	eq
   bba3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bba42:	bd70      	pop	{r4, r5, r6, pc}
   bba44:	f1c4 040c 	rsb	r4, r4, #12
   bba48:	f1c4 0520 	rsb	r5, r4, #32
   bba4c:	fa00 f304 	lsl.w	r3, r0, r4
   bba50:	fa20 f005 	lsr.w	r0, r0, r5
   bba54:	fa01 f204 	lsl.w	r2, r1, r4
   bba58:	ea40 0002 	orr.w	r0, r0, r2
   bba5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bba60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bba64:	f141 0100 	adc.w	r1, r1, #0
   bba68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bba6c:	bf08      	it	eq
   bba6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bba72:	bd70      	pop	{r4, r5, r6, pc}
   bba74:	f1c4 0520 	rsb	r5, r4, #32
   bba78:	fa00 f205 	lsl.w	r2, r0, r5
   bba7c:	ea4e 0e02 	orr.w	lr, lr, r2
   bba80:	fa20 f304 	lsr.w	r3, r0, r4
   bba84:	fa01 f205 	lsl.w	r2, r1, r5
   bba88:	ea43 0302 	orr.w	r3, r3, r2
   bba8c:	fa21 f004 	lsr.w	r0, r1, r4
   bba90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bba94:	fa21 f204 	lsr.w	r2, r1, r4
   bba98:	ea20 0002 	bic.w	r0, r0, r2
   bba9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bbaa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbaa4:	bf08      	it	eq
   bbaa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbaaa:	bd70      	pop	{r4, r5, r6, pc}
   bbaac:	f094 0f00 	teq	r4, #0
   bbab0:	d10f      	bne.n	bbad2 <__aeabi_dmul+0x1c2>
   bbab2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bbab6:	0040      	lsls	r0, r0, #1
   bbab8:	eb41 0101 	adc.w	r1, r1, r1
   bbabc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbac0:	bf08      	it	eq
   bbac2:	3c01      	subeq	r4, #1
   bbac4:	d0f7      	beq.n	bbab6 <__aeabi_dmul+0x1a6>
   bbac6:	ea41 0106 	orr.w	r1, r1, r6
   bbaca:	f095 0f00 	teq	r5, #0
   bbace:	bf18      	it	ne
   bbad0:	4770      	bxne	lr
   bbad2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bbad6:	0052      	lsls	r2, r2, #1
   bbad8:	eb43 0303 	adc.w	r3, r3, r3
   bbadc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bbae0:	bf08      	it	eq
   bbae2:	3d01      	subeq	r5, #1
   bbae4:	d0f7      	beq.n	bbad6 <__aeabi_dmul+0x1c6>
   bbae6:	ea43 0306 	orr.w	r3, r3, r6
   bbaea:	4770      	bx	lr
   bbaec:	ea94 0f0c 	teq	r4, ip
   bbaf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbaf4:	bf18      	it	ne
   bbaf6:	ea95 0f0c 	teqne	r5, ip
   bbafa:	d00c      	beq.n	bbb16 <__aeabi_dmul+0x206>
   bbafc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbb00:	bf18      	it	ne
   bbb02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbb06:	d1d1      	bne.n	bbaac <__aeabi_dmul+0x19c>
   bbb08:	ea81 0103 	eor.w	r1, r1, r3
   bbb0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbb10:	f04f 0000 	mov.w	r0, #0
   bbb14:	bd70      	pop	{r4, r5, r6, pc}
   bbb16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbb1a:	bf06      	itte	eq
   bbb1c:	4610      	moveq	r0, r2
   bbb1e:	4619      	moveq	r1, r3
   bbb20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbb24:	d019      	beq.n	bbb5a <__aeabi_dmul+0x24a>
   bbb26:	ea94 0f0c 	teq	r4, ip
   bbb2a:	d102      	bne.n	bbb32 <__aeabi_dmul+0x222>
   bbb2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bbb30:	d113      	bne.n	bbb5a <__aeabi_dmul+0x24a>
   bbb32:	ea95 0f0c 	teq	r5, ip
   bbb36:	d105      	bne.n	bbb44 <__aeabi_dmul+0x234>
   bbb38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bbb3c:	bf1c      	itt	ne
   bbb3e:	4610      	movne	r0, r2
   bbb40:	4619      	movne	r1, r3
   bbb42:	d10a      	bne.n	bbb5a <__aeabi_dmul+0x24a>
   bbb44:	ea81 0103 	eor.w	r1, r1, r3
   bbb48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbb4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbb50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbb54:	f04f 0000 	mov.w	r0, #0
   bbb58:	bd70      	pop	{r4, r5, r6, pc}
   bbb5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbb5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bbb62:	bd70      	pop	{r4, r5, r6, pc}

000bbb64 <__aeabi_ddiv>:
   bbb64:	b570      	push	{r4, r5, r6, lr}
   bbb66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbb6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbb6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbb72:	bf1d      	ittte	ne
   bbb74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbb78:	ea94 0f0c 	teqne	r4, ip
   bbb7c:	ea95 0f0c 	teqne	r5, ip
   bbb80:	f000 f8a7 	bleq	bbcd2 <__aeabi_ddiv+0x16e>
   bbb84:	eba4 0405 	sub.w	r4, r4, r5
   bbb88:	ea81 0e03 	eor.w	lr, r1, r3
   bbb8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbb90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbb94:	f000 8088 	beq.w	bbca8 <__aeabi_ddiv+0x144>
   bbb98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbb9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bbba0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bbba4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bbba8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bbbac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bbbb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bbbb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bbbb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bbbbc:	429d      	cmp	r5, r3
   bbbbe:	bf08      	it	eq
   bbbc0:	4296      	cmpeq	r6, r2
   bbbc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bbbc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bbbca:	d202      	bcs.n	bbbd2 <__aeabi_ddiv+0x6e>
   bbbcc:	085b      	lsrs	r3, r3, #1
   bbbce:	ea4f 0232 	mov.w	r2, r2, rrx
   bbbd2:	1ab6      	subs	r6, r6, r2
   bbbd4:	eb65 0503 	sbc.w	r5, r5, r3
   bbbd8:	085b      	lsrs	r3, r3, #1
   bbbda:	ea4f 0232 	mov.w	r2, r2, rrx
   bbbde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bbbe2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bbbe6:	ebb6 0e02 	subs.w	lr, r6, r2
   bbbea:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbbee:	bf22      	ittt	cs
   bbbf0:	1ab6      	subcs	r6, r6, r2
   bbbf2:	4675      	movcs	r5, lr
   bbbf4:	ea40 000c 	orrcs.w	r0, r0, ip
   bbbf8:	085b      	lsrs	r3, r3, #1
   bbbfa:	ea4f 0232 	mov.w	r2, r2, rrx
   bbbfe:	ebb6 0e02 	subs.w	lr, r6, r2
   bbc02:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbc06:	bf22      	ittt	cs
   bbc08:	1ab6      	subcs	r6, r6, r2
   bbc0a:	4675      	movcs	r5, lr
   bbc0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bbc10:	085b      	lsrs	r3, r3, #1
   bbc12:	ea4f 0232 	mov.w	r2, r2, rrx
   bbc16:	ebb6 0e02 	subs.w	lr, r6, r2
   bbc1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbc1e:	bf22      	ittt	cs
   bbc20:	1ab6      	subcs	r6, r6, r2
   bbc22:	4675      	movcs	r5, lr
   bbc24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bbc28:	085b      	lsrs	r3, r3, #1
   bbc2a:	ea4f 0232 	mov.w	r2, r2, rrx
   bbc2e:	ebb6 0e02 	subs.w	lr, r6, r2
   bbc32:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbc36:	bf22      	ittt	cs
   bbc38:	1ab6      	subcs	r6, r6, r2
   bbc3a:	4675      	movcs	r5, lr
   bbc3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bbc40:	ea55 0e06 	orrs.w	lr, r5, r6
   bbc44:	d018      	beq.n	bbc78 <__aeabi_ddiv+0x114>
   bbc46:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bbc4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbc4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbc52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbc56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbc5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbc5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbc62:	d1c0      	bne.n	bbbe6 <__aeabi_ddiv+0x82>
   bbc64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbc68:	d10b      	bne.n	bbc82 <__aeabi_ddiv+0x11e>
   bbc6a:	ea41 0100 	orr.w	r1, r1, r0
   bbc6e:	f04f 0000 	mov.w	r0, #0
   bbc72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbc76:	e7b6      	b.n	bbbe6 <__aeabi_ddiv+0x82>
   bbc78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbc7c:	bf04      	itt	eq
   bbc7e:	4301      	orreq	r1, r0
   bbc80:	2000      	moveq	r0, #0
   bbc82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbc86:	bf88      	it	hi
   bbc88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbc8c:	f63f aeaf 	bhi.w	bb9ee <__aeabi_dmul+0xde>
   bbc90:	ebb5 0c03 	subs.w	ip, r5, r3
   bbc94:	bf04      	itt	eq
   bbc96:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbc9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbc9e:	f150 0000 	adcs.w	r0, r0, #0
   bbca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbca6:	bd70      	pop	{r4, r5, r6, pc}
   bbca8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbcac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbcb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbcb4:	bfc2      	ittt	gt
   bbcb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbcba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbcbe:	bd70      	popgt	{r4, r5, r6, pc}
   bbcc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbcc4:	f04f 0e00 	mov.w	lr, #0
   bbcc8:	3c01      	subs	r4, #1
   bbcca:	e690      	b.n	bb9ee <__aeabi_dmul+0xde>
   bbccc:	ea45 0e06 	orr.w	lr, r5, r6
   bbcd0:	e68d      	b.n	bb9ee <__aeabi_dmul+0xde>
   bbcd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbcd6:	ea94 0f0c 	teq	r4, ip
   bbcda:	bf08      	it	eq
   bbcdc:	ea95 0f0c 	teqeq	r5, ip
   bbce0:	f43f af3b 	beq.w	bbb5a <__aeabi_dmul+0x24a>
   bbce4:	ea94 0f0c 	teq	r4, ip
   bbce8:	d10a      	bne.n	bbd00 <__aeabi_ddiv+0x19c>
   bbcea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbcee:	f47f af34 	bne.w	bbb5a <__aeabi_dmul+0x24a>
   bbcf2:	ea95 0f0c 	teq	r5, ip
   bbcf6:	f47f af25 	bne.w	bbb44 <__aeabi_dmul+0x234>
   bbcfa:	4610      	mov	r0, r2
   bbcfc:	4619      	mov	r1, r3
   bbcfe:	e72c      	b.n	bbb5a <__aeabi_dmul+0x24a>
   bbd00:	ea95 0f0c 	teq	r5, ip
   bbd04:	d106      	bne.n	bbd14 <__aeabi_ddiv+0x1b0>
   bbd06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbd0a:	f43f aefd 	beq.w	bbb08 <__aeabi_dmul+0x1f8>
   bbd0e:	4610      	mov	r0, r2
   bbd10:	4619      	mov	r1, r3
   bbd12:	e722      	b.n	bbb5a <__aeabi_dmul+0x24a>
   bbd14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbd18:	bf18      	it	ne
   bbd1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbd1e:	f47f aec5 	bne.w	bbaac <__aeabi_dmul+0x19c>
   bbd22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbd26:	f47f af0d 	bne.w	bbb44 <__aeabi_dmul+0x234>
   bbd2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbd2e:	f47f aeeb 	bne.w	bbb08 <__aeabi_dmul+0x1f8>
   bbd32:	e712      	b.n	bbb5a <__aeabi_dmul+0x24a>

000bbd34 <__gedf2>:
   bbd34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbd38:	e006      	b.n	bbd48 <__cmpdf2+0x4>
   bbd3a:	bf00      	nop

000bbd3c <__ledf2>:
   bbd3c:	f04f 0c01 	mov.w	ip, #1
   bbd40:	e002      	b.n	bbd48 <__cmpdf2+0x4>
   bbd42:	bf00      	nop

000bbd44 <__cmpdf2>:
   bbd44:	f04f 0c01 	mov.w	ip, #1
   bbd48:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbd4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbd50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbd54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbd58:	bf18      	it	ne
   bbd5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbd5e:	d01b      	beq.n	bbd98 <__cmpdf2+0x54>
   bbd60:	b001      	add	sp, #4
   bbd62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbd66:	bf0c      	ite	eq
   bbd68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbd6c:	ea91 0f03 	teqne	r1, r3
   bbd70:	bf02      	ittt	eq
   bbd72:	ea90 0f02 	teqeq	r0, r2
   bbd76:	2000      	moveq	r0, #0
   bbd78:	4770      	bxeq	lr
   bbd7a:	f110 0f00 	cmn.w	r0, #0
   bbd7e:	ea91 0f03 	teq	r1, r3
   bbd82:	bf58      	it	pl
   bbd84:	4299      	cmppl	r1, r3
   bbd86:	bf08      	it	eq
   bbd88:	4290      	cmpeq	r0, r2
   bbd8a:	bf2c      	ite	cs
   bbd8c:	17d8      	asrcs	r0, r3, #31
   bbd8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbd92:	f040 0001 	orr.w	r0, r0, #1
   bbd96:	4770      	bx	lr
   bbd98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbd9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbda0:	d102      	bne.n	bbda8 <__cmpdf2+0x64>
   bbda2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbda6:	d107      	bne.n	bbdb8 <__cmpdf2+0x74>
   bbda8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbdac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbdb0:	d1d6      	bne.n	bbd60 <__cmpdf2+0x1c>
   bbdb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbdb6:	d0d3      	beq.n	bbd60 <__cmpdf2+0x1c>
   bbdb8:	f85d 0b04 	ldr.w	r0, [sp], #4
   bbdbc:	4770      	bx	lr
   bbdbe:	bf00      	nop

000bbdc0 <__aeabi_cdrcmple>:
   bbdc0:	4684      	mov	ip, r0
   bbdc2:	4610      	mov	r0, r2
   bbdc4:	4662      	mov	r2, ip
   bbdc6:	468c      	mov	ip, r1
   bbdc8:	4619      	mov	r1, r3
   bbdca:	4663      	mov	r3, ip
   bbdcc:	e000      	b.n	bbdd0 <__aeabi_cdcmpeq>
   bbdce:	bf00      	nop

000bbdd0 <__aeabi_cdcmpeq>:
   bbdd0:	b501      	push	{r0, lr}
   bbdd2:	f7ff ffb7 	bl	bbd44 <__cmpdf2>
   bbdd6:	2800      	cmp	r0, #0
   bbdd8:	bf48      	it	mi
   bbdda:	f110 0f00 	cmnmi.w	r0, #0
   bbdde:	bd01      	pop	{r0, pc}

000bbde0 <__aeabi_dcmpeq>:
   bbde0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbde4:	f7ff fff4 	bl	bbdd0 <__aeabi_cdcmpeq>
   bbde8:	bf0c      	ite	eq
   bbdea:	2001      	moveq	r0, #1
   bbdec:	2000      	movne	r0, #0
   bbdee:	f85d fb08 	ldr.w	pc, [sp], #8
   bbdf2:	bf00      	nop

000bbdf4 <__aeabi_dcmplt>:
   bbdf4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbdf8:	f7ff ffea 	bl	bbdd0 <__aeabi_cdcmpeq>
   bbdfc:	bf34      	ite	cc
   bbdfe:	2001      	movcc	r0, #1
   bbe00:	2000      	movcs	r0, #0
   bbe02:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe06:	bf00      	nop

000bbe08 <__aeabi_dcmple>:
   bbe08:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbe0c:	f7ff ffe0 	bl	bbdd0 <__aeabi_cdcmpeq>
   bbe10:	bf94      	ite	ls
   bbe12:	2001      	movls	r0, #1
   bbe14:	2000      	movhi	r0, #0
   bbe16:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe1a:	bf00      	nop

000bbe1c <__aeabi_dcmpge>:
   bbe1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbe20:	f7ff ffce 	bl	bbdc0 <__aeabi_cdrcmple>
   bbe24:	bf94      	ite	ls
   bbe26:	2001      	movls	r0, #1
   bbe28:	2000      	movhi	r0, #0
   bbe2a:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe2e:	bf00      	nop

000bbe30 <__aeabi_dcmpgt>:
   bbe30:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbe34:	f7ff ffc4 	bl	bbdc0 <__aeabi_cdrcmple>
   bbe38:	bf34      	ite	cc
   bbe3a:	2001      	movcc	r0, #1
   bbe3c:	2000      	movcs	r0, #0
   bbe3e:	f85d fb08 	ldr.w	pc, [sp], #8
   bbe42:	bf00      	nop

000bbe44 <__aeabi_dcmpun>:
   bbe44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbe48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbe4c:	d102      	bne.n	bbe54 <__aeabi_dcmpun+0x10>
   bbe4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbe52:	d10a      	bne.n	bbe6a <__aeabi_dcmpun+0x26>
   bbe54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbe58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbe5c:	d102      	bne.n	bbe64 <__aeabi_dcmpun+0x20>
   bbe5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbe62:	d102      	bne.n	bbe6a <__aeabi_dcmpun+0x26>
   bbe64:	f04f 0000 	mov.w	r0, #0
   bbe68:	4770      	bx	lr
   bbe6a:	f04f 0001 	mov.w	r0, #1
   bbe6e:	4770      	bx	lr

000bbe70 <__aeabi_d2iz>:
   bbe70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbe74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbe78:	d215      	bcs.n	bbea6 <__aeabi_d2iz+0x36>
   bbe7a:	d511      	bpl.n	bbea0 <__aeabi_d2iz+0x30>
   bbe7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbe80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbe84:	d912      	bls.n	bbeac <__aeabi_d2iz+0x3c>
   bbe86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbe8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbe8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbe92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bbe96:	fa23 f002 	lsr.w	r0, r3, r2
   bbe9a:	bf18      	it	ne
   bbe9c:	4240      	negne	r0, r0
   bbe9e:	4770      	bx	lr
   bbea0:	f04f 0000 	mov.w	r0, #0
   bbea4:	4770      	bx	lr
   bbea6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbeaa:	d105      	bne.n	bbeb8 <__aeabi_d2iz+0x48>
   bbeac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bbeb0:	bf08      	it	eq
   bbeb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bbeb6:	4770      	bx	lr
   bbeb8:	f04f 0000 	mov.w	r0, #0
   bbebc:	4770      	bx	lr
   bbebe:	bf00      	nop

000bbec0 <__aeabi_d2uiz>:
   bbec0:	004a      	lsls	r2, r1, #1
   bbec2:	d211      	bcs.n	bbee8 <__aeabi_d2uiz+0x28>
   bbec4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbec8:	d211      	bcs.n	bbeee <__aeabi_d2uiz+0x2e>
   bbeca:	d50d      	bpl.n	bbee8 <__aeabi_d2uiz+0x28>
   bbecc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbed0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbed4:	d40e      	bmi.n	bbef4 <__aeabi_d2uiz+0x34>
   bbed6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbeda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbede:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbee2:	fa23 f002 	lsr.w	r0, r3, r2
   bbee6:	4770      	bx	lr
   bbee8:	f04f 0000 	mov.w	r0, #0
   bbeec:	4770      	bx	lr
   bbeee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbef2:	d102      	bne.n	bbefa <__aeabi_d2uiz+0x3a>
   bbef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbef8:	4770      	bx	lr
   bbefa:	f04f 0000 	mov.w	r0, #0
   bbefe:	4770      	bx	lr

000bbf00 <asctime_r>:
   bbf00:	b510      	push	{r4, lr}
   bbf02:	460c      	mov	r4, r1
   bbf04:	6941      	ldr	r1, [r0, #20]
   bbf06:	6903      	ldr	r3, [r0, #16]
   bbf08:	6982      	ldr	r2, [r0, #24]
   bbf0a:	b086      	sub	sp, #24
   bbf0c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bbf10:	9104      	str	r1, [sp, #16]
   bbf12:	6801      	ldr	r1, [r0, #0]
   bbf14:	9103      	str	r1, [sp, #12]
   bbf16:	6841      	ldr	r1, [r0, #4]
   bbf18:	9102      	str	r1, [sp, #8]
   bbf1a:	6881      	ldr	r1, [r0, #8]
   bbf1c:	9101      	str	r1, [sp, #4]
   bbf1e:	68c1      	ldr	r1, [r0, #12]
   bbf20:	9100      	str	r1, [sp, #0]
   bbf22:	4907      	ldr	r1, [pc, #28]	; (bbf40 <asctime_r+0x40>)
   bbf24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bbf28:	440b      	add	r3, r1
   bbf2a:	4906      	ldr	r1, [pc, #24]	; (bbf44 <asctime_r+0x44>)
   bbf2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bbf30:	440a      	add	r2, r1
   bbf32:	4620      	mov	r0, r4
   bbf34:	4904      	ldr	r1, [pc, #16]	; (bbf48 <asctime_r+0x48>)
   bbf36:	f7fc fcaf 	bl	b8898 <siprintf>
   bbf3a:	4620      	mov	r0, r4
   bbf3c:	b006      	add	sp, #24
   bbf3e:	bd10      	pop	{r4, pc}
   bbf40:	000bd446 	.word	0x000bd446
   bbf44:	000bd431 	.word	0x000bd431
   bbf48:	000bd411 	.word	0x000bd411

000bbf4c <atexit>:
   bbf4c:	2300      	movs	r3, #0
   bbf4e:	4601      	mov	r1, r0
   bbf50:	461a      	mov	r2, r3
   bbf52:	4618      	mov	r0, r3
   bbf54:	f000 b9ba 	b.w	bc2cc <__register_exitproc>

000bbf58 <gmtime>:
   bbf58:	b538      	push	{r3, r4, r5, lr}
   bbf5a:	4b0b      	ldr	r3, [pc, #44]	; (bbf88 <gmtime+0x30>)
   bbf5c:	681d      	ldr	r5, [r3, #0]
   bbf5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bbf60:	4604      	mov	r4, r0
   bbf62:	b953      	cbnz	r3, bbf7a <gmtime+0x22>
   bbf64:	2024      	movs	r0, #36	; 0x24
   bbf66:	f7fc fc7f 	bl	b8868 <malloc>
   bbf6a:	4602      	mov	r2, r0
   bbf6c:	63e8      	str	r0, [r5, #60]	; 0x3c
   bbf6e:	b920      	cbnz	r0, bbf7a <gmtime+0x22>
   bbf70:	4b06      	ldr	r3, [pc, #24]	; (bbf8c <gmtime+0x34>)
   bbf72:	4807      	ldr	r0, [pc, #28]	; (bbf90 <gmtime+0x38>)
   bbf74:	2139      	movs	r1, #57	; 0x39
   bbf76:	f7fc fcb7 	bl	b88e8 <__assert_func>
   bbf7a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bbf7c:	4620      	mov	r0, r4
   bbf7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbf82:	f7fc bcd1 	b.w	b8928 <gmtime_r>
   bbf86:	bf00      	nop
   bbf88:	2003ded0 	.word	0x2003ded0
   bbf8c:	000bd46a 	.word	0x000bd46a
   bbf90:	000bd481 	.word	0x000bd481

000bbf94 <isprint>:
   bbf94:	4b02      	ldr	r3, [pc, #8]	; (bbfa0 <isprint+0xc>)
   bbf96:	4418      	add	r0, r3
   bbf98:	7840      	ldrb	r0, [r0, #1]
   bbf9a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bbf9e:	4770      	bx	lr
   bbfa0:	000bd533 	.word	0x000bd533

000bbfa4 <memcpy>:
   bbfa4:	440a      	add	r2, r1
   bbfa6:	4291      	cmp	r1, r2
   bbfa8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbfac:	d100      	bne.n	bbfb0 <memcpy+0xc>
   bbfae:	4770      	bx	lr
   bbfb0:	b510      	push	{r4, lr}
   bbfb2:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbfb6:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbfba:	4291      	cmp	r1, r2
   bbfbc:	d1f9      	bne.n	bbfb2 <memcpy+0xe>
   bbfbe:	bd10      	pop	{r4, pc}

000bbfc0 <memmove>:
   bbfc0:	4288      	cmp	r0, r1
   bbfc2:	b510      	push	{r4, lr}
   bbfc4:	eb01 0402 	add.w	r4, r1, r2
   bbfc8:	d902      	bls.n	bbfd0 <memmove+0x10>
   bbfca:	4284      	cmp	r4, r0
   bbfcc:	4623      	mov	r3, r4
   bbfce:	d807      	bhi.n	bbfe0 <memmove+0x20>
   bbfd0:	1e43      	subs	r3, r0, #1
   bbfd2:	42a1      	cmp	r1, r4
   bbfd4:	d008      	beq.n	bbfe8 <memmove+0x28>
   bbfd6:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbfda:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbfde:	e7f8      	b.n	bbfd2 <memmove+0x12>
   bbfe0:	4402      	add	r2, r0
   bbfe2:	4601      	mov	r1, r0
   bbfe4:	428a      	cmp	r2, r1
   bbfe6:	d100      	bne.n	bbfea <memmove+0x2a>
   bbfe8:	bd10      	pop	{r4, pc}
   bbfea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbfee:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbff2:	e7f7      	b.n	bbfe4 <memmove+0x24>

000bbff4 <memset>:
   bbff4:	4402      	add	r2, r0
   bbff6:	4603      	mov	r3, r0
   bbff8:	4293      	cmp	r3, r2
   bbffa:	d100      	bne.n	bbffe <memset+0xa>
   bbffc:	4770      	bx	lr
   bbffe:	f803 1b01 	strb.w	r1, [r3], #1
   bc002:	e7f9      	b.n	bbff8 <memset+0x4>

000bc004 <srand>:
   bc004:	b538      	push	{r3, r4, r5, lr}
   bc006:	4b10      	ldr	r3, [pc, #64]	; (bc048 <srand+0x44>)
   bc008:	681d      	ldr	r5, [r3, #0]
   bc00a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc00c:	4604      	mov	r4, r0
   bc00e:	b9b3      	cbnz	r3, bc03e <srand+0x3a>
   bc010:	2018      	movs	r0, #24
   bc012:	f7fc fc29 	bl	b8868 <malloc>
   bc016:	4602      	mov	r2, r0
   bc018:	63a8      	str	r0, [r5, #56]	; 0x38
   bc01a:	b920      	cbnz	r0, bc026 <srand+0x22>
   bc01c:	4b0b      	ldr	r3, [pc, #44]	; (bc04c <srand+0x48>)
   bc01e:	480c      	ldr	r0, [pc, #48]	; (bc050 <srand+0x4c>)
   bc020:	2142      	movs	r1, #66	; 0x42
   bc022:	f7fc fc61 	bl	b88e8 <__assert_func>
   bc026:	490b      	ldr	r1, [pc, #44]	; (bc054 <srand+0x50>)
   bc028:	4b0b      	ldr	r3, [pc, #44]	; (bc058 <srand+0x54>)
   bc02a:	e9c0 1300 	strd	r1, r3, [r0]
   bc02e:	4b0b      	ldr	r3, [pc, #44]	; (bc05c <srand+0x58>)
   bc030:	6083      	str	r3, [r0, #8]
   bc032:	230b      	movs	r3, #11
   bc034:	8183      	strh	r3, [r0, #12]
   bc036:	2100      	movs	r1, #0
   bc038:	2001      	movs	r0, #1
   bc03a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc03e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc040:	2200      	movs	r2, #0
   bc042:	611c      	str	r4, [r3, #16]
   bc044:	615a      	str	r2, [r3, #20]
   bc046:	bd38      	pop	{r3, r4, r5, pc}
   bc048:	2003ded0 	.word	0x2003ded0
   bc04c:	000bd46a 	.word	0x000bd46a
   bc050:	000bd4da 	.word	0x000bd4da
   bc054:	abcd330e 	.word	0xabcd330e
   bc058:	e66d1234 	.word	0xe66d1234
   bc05c:	0005deec 	.word	0x0005deec

000bc060 <rand>:
   bc060:	4b16      	ldr	r3, [pc, #88]	; (bc0bc <rand+0x5c>)
   bc062:	b510      	push	{r4, lr}
   bc064:	681c      	ldr	r4, [r3, #0]
   bc066:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc068:	b9b3      	cbnz	r3, bc098 <rand+0x38>
   bc06a:	2018      	movs	r0, #24
   bc06c:	f7fc fbfc 	bl	b8868 <malloc>
   bc070:	63a0      	str	r0, [r4, #56]	; 0x38
   bc072:	b928      	cbnz	r0, bc080 <rand+0x20>
   bc074:	4602      	mov	r2, r0
   bc076:	4b12      	ldr	r3, [pc, #72]	; (bc0c0 <rand+0x60>)
   bc078:	4812      	ldr	r0, [pc, #72]	; (bc0c4 <rand+0x64>)
   bc07a:	214e      	movs	r1, #78	; 0x4e
   bc07c:	f7fc fc34 	bl	b88e8 <__assert_func>
   bc080:	4a11      	ldr	r2, [pc, #68]	; (bc0c8 <rand+0x68>)
   bc082:	4b12      	ldr	r3, [pc, #72]	; (bc0cc <rand+0x6c>)
   bc084:	e9c0 2300 	strd	r2, r3, [r0]
   bc088:	4b11      	ldr	r3, [pc, #68]	; (bc0d0 <rand+0x70>)
   bc08a:	6083      	str	r3, [r0, #8]
   bc08c:	230b      	movs	r3, #11
   bc08e:	8183      	strh	r3, [r0, #12]
   bc090:	2201      	movs	r2, #1
   bc092:	2300      	movs	r3, #0
   bc094:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bc098:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bc09a:	4a0e      	ldr	r2, [pc, #56]	; (bc0d4 <rand+0x74>)
   bc09c:	6920      	ldr	r0, [r4, #16]
   bc09e:	6963      	ldr	r3, [r4, #20]
   bc0a0:	490d      	ldr	r1, [pc, #52]	; (bc0d8 <rand+0x78>)
   bc0a2:	4342      	muls	r2, r0
   bc0a4:	fb01 2203 	mla	r2, r1, r3, r2
   bc0a8:	fba0 0101 	umull	r0, r1, r0, r1
   bc0ac:	1c43      	adds	r3, r0, #1
   bc0ae:	eb42 0001 	adc.w	r0, r2, r1
   bc0b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bc0b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bc0ba:	bd10      	pop	{r4, pc}
   bc0bc:	2003ded0 	.word	0x2003ded0
   bc0c0:	000bd46a 	.word	0x000bd46a
   bc0c4:	000bd4da 	.word	0x000bd4da
   bc0c8:	abcd330e 	.word	0xabcd330e
   bc0cc:	e66d1234 	.word	0xe66d1234
   bc0d0:	0005deec 	.word	0x0005deec
   bc0d4:	5851f42d 	.word	0x5851f42d
   bc0d8:	4c957f2d 	.word	0x4c957f2d

000bc0dc <strchr>:
   bc0dc:	b2c9      	uxtb	r1, r1
   bc0de:	4603      	mov	r3, r0
   bc0e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc0e4:	b11a      	cbz	r2, bc0ee <strchr+0x12>
   bc0e6:	428a      	cmp	r2, r1
   bc0e8:	d1f9      	bne.n	bc0de <strchr+0x2>
   bc0ea:	4618      	mov	r0, r3
   bc0ec:	4770      	bx	lr
   bc0ee:	2900      	cmp	r1, #0
   bc0f0:	bf18      	it	ne
   bc0f2:	2300      	movne	r3, #0
   bc0f4:	e7f9      	b.n	bc0ea <strchr+0xe>

000bc0f6 <strchrnul>:
   bc0f6:	b510      	push	{r4, lr}
   bc0f8:	4604      	mov	r4, r0
   bc0fa:	f7ff ffef 	bl	bc0dc <strchr>
   bc0fe:	b918      	cbnz	r0, bc108 <strchrnul+0x12>
   bc100:	4620      	mov	r0, r4
   bc102:	f000 f814 	bl	bc12e <strlen>
   bc106:	4420      	add	r0, r4
   bc108:	bd10      	pop	{r4, pc}

000bc10a <strcmp>:
   bc10a:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc10e:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc112:	2a01      	cmp	r2, #1
   bc114:	bf28      	it	cs
   bc116:	429a      	cmpcs	r2, r3
   bc118:	d0f7      	beq.n	bc10a <strcmp>
   bc11a:	1ad0      	subs	r0, r2, r3
   bc11c:	4770      	bx	lr

000bc11e <strcpy>:
   bc11e:	4603      	mov	r3, r0
   bc120:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc124:	f803 2b01 	strb.w	r2, [r3], #1
   bc128:	2a00      	cmp	r2, #0
   bc12a:	d1f9      	bne.n	bc120 <strcpy+0x2>
   bc12c:	4770      	bx	lr

000bc12e <strlen>:
   bc12e:	4603      	mov	r3, r0
   bc130:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc134:	2a00      	cmp	r2, #0
   bc136:	d1fb      	bne.n	bc130 <strlen+0x2>
   bc138:	1a18      	subs	r0, r3, r0
   bc13a:	3801      	subs	r0, #1
   bc13c:	4770      	bx	lr

000bc13e <strncmp>:
   bc13e:	b510      	push	{r4, lr}
   bc140:	b17a      	cbz	r2, bc162 <strncmp+0x24>
   bc142:	4603      	mov	r3, r0
   bc144:	3901      	subs	r1, #1
   bc146:	1884      	adds	r4, r0, r2
   bc148:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc14c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc150:	4290      	cmp	r0, r2
   bc152:	d101      	bne.n	bc158 <strncmp+0x1a>
   bc154:	42a3      	cmp	r3, r4
   bc156:	d101      	bne.n	bc15c <strncmp+0x1e>
   bc158:	1a80      	subs	r0, r0, r2
   bc15a:	bd10      	pop	{r4, pc}
   bc15c:	2800      	cmp	r0, #0
   bc15e:	d1f3      	bne.n	bc148 <strncmp+0xa>
   bc160:	e7fa      	b.n	bc158 <strncmp+0x1a>
   bc162:	4610      	mov	r0, r2
   bc164:	e7f9      	b.n	bc15a <strncmp+0x1c>

000bc166 <strncpy>:
   bc166:	b510      	push	{r4, lr}
   bc168:	3901      	subs	r1, #1
   bc16a:	4603      	mov	r3, r0
   bc16c:	b132      	cbz	r2, bc17c <strncpy+0x16>
   bc16e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc172:	f803 4b01 	strb.w	r4, [r3], #1
   bc176:	3a01      	subs	r2, #1
   bc178:	2c00      	cmp	r4, #0
   bc17a:	d1f7      	bne.n	bc16c <strncpy+0x6>
   bc17c:	441a      	add	r2, r3
   bc17e:	2100      	movs	r1, #0
   bc180:	4293      	cmp	r3, r2
   bc182:	d100      	bne.n	bc186 <strncpy+0x20>
   bc184:	bd10      	pop	{r4, pc}
   bc186:	f803 1b01 	strb.w	r1, [r3], #1
   bc18a:	e7f9      	b.n	bc180 <strncpy+0x1a>

000bc18c <strrchr>:
   bc18c:	b538      	push	{r3, r4, r5, lr}
   bc18e:	4603      	mov	r3, r0
   bc190:	460c      	mov	r4, r1
   bc192:	b969      	cbnz	r1, bc1b0 <strrchr+0x24>
   bc194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc198:	f7ff bfa0 	b.w	bc0dc <strchr>
   bc19c:	1c43      	adds	r3, r0, #1
   bc19e:	4605      	mov	r5, r0
   bc1a0:	4621      	mov	r1, r4
   bc1a2:	4618      	mov	r0, r3
   bc1a4:	f7ff ff9a 	bl	bc0dc <strchr>
   bc1a8:	2800      	cmp	r0, #0
   bc1aa:	d1f7      	bne.n	bc19c <strrchr+0x10>
   bc1ac:	4628      	mov	r0, r5
   bc1ae:	bd38      	pop	{r3, r4, r5, pc}
   bc1b0:	2500      	movs	r5, #0
   bc1b2:	e7f5      	b.n	bc1a0 <strrchr+0x14>

000bc1b4 <_strtol_l.constprop.0>:
   bc1b4:	2b01      	cmp	r3, #1
   bc1b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc1ba:	d001      	beq.n	bc1c0 <_strtol_l.constprop.0+0xc>
   bc1bc:	2b24      	cmp	r3, #36	; 0x24
   bc1be:	d906      	bls.n	bc1ce <_strtol_l.constprop.0+0x1a>
   bc1c0:	f7fc fb8a 	bl	b88d8 <__errno>
   bc1c4:	2316      	movs	r3, #22
   bc1c6:	6003      	str	r3, [r0, #0]
   bc1c8:	2000      	movs	r0, #0
   bc1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc1ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc2b4 <_strtol_l.constprop.0+0x100>
   bc1d2:	460d      	mov	r5, r1
   bc1d4:	462e      	mov	r6, r5
   bc1d6:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc1da:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc1de:	f017 0708 	ands.w	r7, r7, #8
   bc1e2:	d1f7      	bne.n	bc1d4 <_strtol_l.constprop.0+0x20>
   bc1e4:	2c2d      	cmp	r4, #45	; 0x2d
   bc1e6:	d132      	bne.n	bc24e <_strtol_l.constprop.0+0x9a>
   bc1e8:	782c      	ldrb	r4, [r5, #0]
   bc1ea:	2701      	movs	r7, #1
   bc1ec:	1cb5      	adds	r5, r6, #2
   bc1ee:	2b00      	cmp	r3, #0
   bc1f0:	d05b      	beq.n	bc2aa <_strtol_l.constprop.0+0xf6>
   bc1f2:	2b10      	cmp	r3, #16
   bc1f4:	d109      	bne.n	bc20a <_strtol_l.constprop.0+0x56>
   bc1f6:	2c30      	cmp	r4, #48	; 0x30
   bc1f8:	d107      	bne.n	bc20a <_strtol_l.constprop.0+0x56>
   bc1fa:	782c      	ldrb	r4, [r5, #0]
   bc1fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc200:	2c58      	cmp	r4, #88	; 0x58
   bc202:	d14d      	bne.n	bc2a0 <_strtol_l.constprop.0+0xec>
   bc204:	786c      	ldrb	r4, [r5, #1]
   bc206:	2310      	movs	r3, #16
   bc208:	3502      	adds	r5, #2
   bc20a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc20e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc212:	f04f 0c00 	mov.w	ip, #0
   bc216:	fbb8 f9f3 	udiv	r9, r8, r3
   bc21a:	4666      	mov	r6, ip
   bc21c:	fb03 8a19 	mls	sl, r3, r9, r8
   bc220:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc224:	f1be 0f09 	cmp.w	lr, #9
   bc228:	d816      	bhi.n	bc258 <_strtol_l.constprop.0+0xa4>
   bc22a:	4674      	mov	r4, lr
   bc22c:	42a3      	cmp	r3, r4
   bc22e:	dd24      	ble.n	bc27a <_strtol_l.constprop.0+0xc6>
   bc230:	f1bc 0f00 	cmp.w	ip, #0
   bc234:	db1e      	blt.n	bc274 <_strtol_l.constprop.0+0xc0>
   bc236:	45b1      	cmp	r9, r6
   bc238:	d31c      	bcc.n	bc274 <_strtol_l.constprop.0+0xc0>
   bc23a:	d101      	bne.n	bc240 <_strtol_l.constprop.0+0x8c>
   bc23c:	45a2      	cmp	sl, r4
   bc23e:	db19      	blt.n	bc274 <_strtol_l.constprop.0+0xc0>
   bc240:	fb06 4603 	mla	r6, r6, r3, r4
   bc244:	f04f 0c01 	mov.w	ip, #1
   bc248:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc24c:	e7e8      	b.n	bc220 <_strtol_l.constprop.0+0x6c>
   bc24e:	2c2b      	cmp	r4, #43	; 0x2b
   bc250:	bf04      	itt	eq
   bc252:	782c      	ldrbeq	r4, [r5, #0]
   bc254:	1cb5      	addeq	r5, r6, #2
   bc256:	e7ca      	b.n	bc1ee <_strtol_l.constprop.0+0x3a>
   bc258:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc25c:	f1be 0f19 	cmp.w	lr, #25
   bc260:	d801      	bhi.n	bc266 <_strtol_l.constprop.0+0xb2>
   bc262:	3c37      	subs	r4, #55	; 0x37
   bc264:	e7e2      	b.n	bc22c <_strtol_l.constprop.0+0x78>
   bc266:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc26a:	f1be 0f19 	cmp.w	lr, #25
   bc26e:	d804      	bhi.n	bc27a <_strtol_l.constprop.0+0xc6>
   bc270:	3c57      	subs	r4, #87	; 0x57
   bc272:	e7db      	b.n	bc22c <_strtol_l.constprop.0+0x78>
   bc274:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc278:	e7e6      	b.n	bc248 <_strtol_l.constprop.0+0x94>
   bc27a:	f1bc 0f00 	cmp.w	ip, #0
   bc27e:	da05      	bge.n	bc28c <_strtol_l.constprop.0+0xd8>
   bc280:	2322      	movs	r3, #34	; 0x22
   bc282:	6003      	str	r3, [r0, #0]
   bc284:	4646      	mov	r6, r8
   bc286:	b942      	cbnz	r2, bc29a <_strtol_l.constprop.0+0xe6>
   bc288:	4630      	mov	r0, r6
   bc28a:	e79e      	b.n	bc1ca <_strtol_l.constprop.0+0x16>
   bc28c:	b107      	cbz	r7, bc290 <_strtol_l.constprop.0+0xdc>
   bc28e:	4276      	negs	r6, r6
   bc290:	2a00      	cmp	r2, #0
   bc292:	d0f9      	beq.n	bc288 <_strtol_l.constprop.0+0xd4>
   bc294:	f1bc 0f00 	cmp.w	ip, #0
   bc298:	d000      	beq.n	bc29c <_strtol_l.constprop.0+0xe8>
   bc29a:	1e69      	subs	r1, r5, #1
   bc29c:	6011      	str	r1, [r2, #0]
   bc29e:	e7f3      	b.n	bc288 <_strtol_l.constprop.0+0xd4>
   bc2a0:	2430      	movs	r4, #48	; 0x30
   bc2a2:	2b00      	cmp	r3, #0
   bc2a4:	d1b1      	bne.n	bc20a <_strtol_l.constprop.0+0x56>
   bc2a6:	2308      	movs	r3, #8
   bc2a8:	e7af      	b.n	bc20a <_strtol_l.constprop.0+0x56>
   bc2aa:	2c30      	cmp	r4, #48	; 0x30
   bc2ac:	d0a5      	beq.n	bc1fa <_strtol_l.constprop.0+0x46>
   bc2ae:	230a      	movs	r3, #10
   bc2b0:	e7ab      	b.n	bc20a <_strtol_l.constprop.0+0x56>
   bc2b2:	bf00      	nop
   bc2b4:	000bd534 	.word	0x000bd534

000bc2b8 <strtol>:
   bc2b8:	4613      	mov	r3, r2
   bc2ba:	460a      	mov	r2, r1
   bc2bc:	4601      	mov	r1, r0
   bc2be:	4802      	ldr	r0, [pc, #8]	; (bc2c8 <strtol+0x10>)
   bc2c0:	6800      	ldr	r0, [r0, #0]
   bc2c2:	f7ff bf77 	b.w	bc1b4 <_strtol_l.constprop.0>
   bc2c6:	bf00      	nop
   bc2c8:	2003ded0 	.word	0x2003ded0

000bc2cc <__register_exitproc>:
   bc2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc2d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc38c <__register_exitproc+0xc0>
   bc2d4:	4606      	mov	r6, r0
   bc2d6:	f8d8 0000 	ldr.w	r0, [r8]
   bc2da:	461f      	mov	r7, r3
   bc2dc:	460d      	mov	r5, r1
   bc2de:	4691      	mov	r9, r2
   bc2e0:	f000 f856 	bl	bc390 <__retarget_lock_acquire_recursive>
   bc2e4:	4b25      	ldr	r3, [pc, #148]	; (bc37c <__register_exitproc+0xb0>)
   bc2e6:	681c      	ldr	r4, [r3, #0]
   bc2e8:	b934      	cbnz	r4, bc2f8 <__register_exitproc+0x2c>
   bc2ea:	4c25      	ldr	r4, [pc, #148]	; (bc380 <__register_exitproc+0xb4>)
   bc2ec:	601c      	str	r4, [r3, #0]
   bc2ee:	4b25      	ldr	r3, [pc, #148]	; (bc384 <__register_exitproc+0xb8>)
   bc2f0:	b113      	cbz	r3, bc2f8 <__register_exitproc+0x2c>
   bc2f2:	681b      	ldr	r3, [r3, #0]
   bc2f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc2f8:	6863      	ldr	r3, [r4, #4]
   bc2fa:	2b1f      	cmp	r3, #31
   bc2fc:	dd07      	ble.n	bc30e <__register_exitproc+0x42>
   bc2fe:	f8d8 0000 	ldr.w	r0, [r8]
   bc302:	f000 f847 	bl	bc394 <__retarget_lock_release_recursive>
   bc306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc30e:	b34e      	cbz	r6, bc364 <__register_exitproc+0x98>
   bc310:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc314:	b988      	cbnz	r0, bc33a <__register_exitproc+0x6e>
   bc316:	4b1c      	ldr	r3, [pc, #112]	; (bc388 <__register_exitproc+0xbc>)
   bc318:	b923      	cbnz	r3, bc324 <__register_exitproc+0x58>
   bc31a:	f8d8 0000 	ldr.w	r0, [r8]
   bc31e:	f000 f838 	bl	bc392 <__retarget_lock_release>
   bc322:	e7f0      	b.n	bc306 <__register_exitproc+0x3a>
   bc324:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc328:	f7fc fa9e 	bl	b8868 <malloc>
   bc32c:	2800      	cmp	r0, #0
   bc32e:	d0f4      	beq.n	bc31a <__register_exitproc+0x4e>
   bc330:	2300      	movs	r3, #0
   bc332:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc336:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc33a:	6863      	ldr	r3, [r4, #4]
   bc33c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc340:	2201      	movs	r2, #1
   bc342:	409a      	lsls	r2, r3
   bc344:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc348:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc34c:	4313      	orrs	r3, r2
   bc34e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc352:	2e02      	cmp	r6, #2
   bc354:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc358:	bf02      	ittt	eq
   bc35a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc35e:	4313      	orreq	r3, r2
   bc360:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc364:	6863      	ldr	r3, [r4, #4]
   bc366:	f8d8 0000 	ldr.w	r0, [r8]
   bc36a:	1c5a      	adds	r2, r3, #1
   bc36c:	3302      	adds	r3, #2
   bc36e:	6062      	str	r2, [r4, #4]
   bc370:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc374:	f000 f80e 	bl	bc394 <__retarget_lock_release_recursive>
   bc378:	2000      	movs	r0, #0
   bc37a:	e7c6      	b.n	bc30a <__register_exitproc+0x3e>
   bc37c:	2003e7e8 	.word	0x2003e7e8
   bc380:	2003e75c 	.word	0x2003e75c
   bc384:	00000000 	.word	0x00000000
   bc388:	000b8869 	.word	0x000b8869
   bc38c:	2003df34 	.word	0x2003df34

000bc390 <__retarget_lock_acquire_recursive>:
   bc390:	4770      	bx	lr

000bc392 <__retarget_lock_release>:
   bc392:	4770      	bx	lr

000bc394 <__retarget_lock_release_recursive>:
   bc394:	4770      	bx	lr

000bc396 <link_code_end>:
	...

000bc398 <dynalib_user>:
   bc398:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc3a8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bc3b8:	7620 7269 7574 6c61 4600 6f72 206d 7325      virtual.From %s
   bc3c8:	7420 206f 7325 7720 7469 2068 6e69 6176      to %s with inva
   bc3d8:	696c 2064 6974 656d 4600 6f72 206d 7325     lid time.From %s
   bc3e8:	7420 206f 7325 5200 7065 726f 2074 7266      to %s.Report fr
   bc3f8:	7165 6575 636e 2079 6425 6d20 6e69 2c73     equency %d mins,
   bc408:	6e20 7865 2074 7665 6e65 2074 6e69 2520      next event in %
   bc418:	756c 7320 6365 6e6f 7364 5300 656c 7065     lu seconds.Sleep
   bc428:	6620 726f 2520 2069 6573 6f63 646e 2073      for %i seconds 
   bc438:	6e75 6974 206c 656e 7478 6520 6576 746e     until next event
   bc448:	2520 0073 6f57 656b 7720 7469 2068 7375      %s.Woke with us
   bc458:	7265 6220 7475 6f74 206e 202d 6f4c 4152     er button - LoRA
   bc468:	5320 6174 6574 5700 6b6f 2065 6977 6874      State.Woke with
   bc478:	7320 6e65 6f73 2072 6e69 6574 7272 7075      sensor interrup
   bc488:	2074 202d 6552 6f63 6472 6320 756f 746e     t - Record count
   bc498:	7420 6568 206e 6c73 6565 0070 7741 6b6f      then sleep.Awok
   bc4a8:	2065 7461 2520 2073 6977 6874 2520 696c     e at %s with %li
   bc4b8:	6620 6572 2065 656d 6f6d 7972 4600 6961      free memory.Fai
   bc4c8:	656c 2064 6e69 6420 7461 2061 6573 646e     led in data send
   bc4d8:	5200 7365 7465 6974 676e 6420 7665 6369     .Resetting devic
   bc4e8:	0065 6e55 6564 6966 656e 2064 7245 6f72     e.Undefined Erro
   bc4f8:	2072 7453 7461 0065 6f4c 4152 4920 696e     r State.LoRA Ini
   bc508:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   bc518:	7275 2065 6c61 7265 2074 6f63 6564 2520     ure alert code %
   bc528:	2064 202d 6f70 6577 2072 7963 6c63 2065     d - power cycle 
   bc538:	6e69 3320 0030 6f4e 6564 6e20 6d75 6562     in 30.Node numbe
   bc548:	2072 6e69 6964 6163 6574 2064 6e75 6f63     r indicated unco
   bc558:	666e 6769 7275 6465 6e20 646f 2065 666f     nfigured node of
   bc568:	2520 2064 6573 7474 6e69 2067 6c61 7265      %d setting aler
   bc578:	2074 6f63 6564 7420 206f 6425 5300 6174     t code to %d.Sta
   bc588:	7472 7075 6320 6d6f 6c70 7465 2065 6f66     rtup complete fo
   bc598:	2072 6874 2065 6f4e 6564 7720 7469 2068     r the Node with 
   bc5a8:	6c61 7265 2074 6f63 6564 2520 0064 6e69     alert code %d.in
   bc5b8:	7469 6620 6961 656c 0064 6f4c 4152 5220     it failed.LoRA R
   bc5c8:	6461 6f69 6920 696e 6974 6c61 7a69 6465     adio initialized
   bc5d8:	6120 2073 6f6e 6564 2520 2069 6e61 2064      as node %i and 
   bc5e8:	6977 6874 6120 4420 7665 6369 4965 2044     with a DeviceID 
   bc5f8:	666f 2520 0069 6f4c 4152 5220 6461 6f69     of %i.LoRA Radio
   bc608:	6920 696e 6974 6c61 7a69 6465 6120 2073      initialized as 
   bc618:	2061 6167 6574 6177 2079 6977 6874 6120     a gateway with a
   bc628:	6420 7665 6369 4965 2044 666f 2520 0069      deviceID of %i.
   bc638:	6553 646e 6e69 2067 6164 6174 7220 7065     Sending data rep
   bc648:	726f 2074 756e 626d 7265 2520 0064 6144     ort number %d.Da
   bc658:	6174 7220 7065 726f 2074 6564 696c 6576     ta report delive
   bc668:	6572 2064 202d 7573 6363 7365 2073 6172     red - success ra
   bc678:	6574 2520 2e34 6632 4e00 646f 2065 6425     te %4.2f.Node %d
   bc688:	2d20 4420 7461 2061 6572 6f70 7472 7320      - Data report s
   bc698:	6e65 2064 6f74 6720 7461 7765 7961 2520     end to gateway %
   bc6a8:	2064 6166 6c69 6465 2d20 4e20 206f 6f52     d failed - No Ro
   bc6b8:	7475 2065 202d 7573 6363 7365 2073 6172     ute - success ra
   bc6c8:	6574 2520 2e34 6632 4e00 646f 2065 6425     te %4.2f.Node %d
   bc6d8:	2d20 4420 7461 2061 6572 6f70 7472 7320      - Data report s
   bc6e8:	6e65 2064 6f74 6720 7461 7765 7961 2520     end to gateway %
   bc6f8:	2064 6166 6c69 6465 2d20 5520 616e 6c62     d failed - Unabl
   bc708:	2065 6f74 4420 6c65 7669 7265 2d20 7320     e to Deliver - s
   bc718:	6375 6563 7373 7220 7461 2065 3425 322e     uccess rate %4.2
   bc728:	0066 6f4e 6564 2520 2064 202d 6144 6174     f.Node %d - Data
   bc738:	7220 7065 726f 2074 6573 646e 7420 206f      report send to 
   bc748:	6167 6574 6177 2079 6425 6620 6961 656c     gateway %d faile
   bc758:	2064 2d20 5520 6b6e 6f6e 6e77 2d20 7320     d  - Unknown - s
   bc768:	6375 6563 7373 7220 7461 2065 3425 322e     uccess rate %4.2
   bc778:	0066 6144 6174 7220 7065 726f 2074 6361     f.Data report ac
   bc788:	6e6b 776f 656c 6764 6465 6100 4e20 646f     knowledged.a Nod
   bc798:	4e65 6d75 6562 2072 7369 6e20 6565 6564     eNumber is neede
   bc7a8:	0064 6874 2065 6c63 636f 206b 7369 6e20     d.the clock is n
   bc7b8:	746f 7320 7465 5300 6e65 6964 676e 6a20     ot set.Sending j
   bc7c8:	696f 206e 6572 7571 7365 2074 6562 6163     oin request beca
   bc7d8:	7375 2065 7325 4400 7461 2061 6572 6f70     use %s.Data repo
   bc7e8:	7472 7320 6e65 2064 6f74 6720 7461 7765     rt send to gatew
   bc7f8:	7961 7320 6375 6563 7373 7566 6c6c 0079     ay successfully.
   bc808:	6144 6174 7220 7065 726f 2074 6573 646e     Data report send
   bc818:	7420 206f 6147 6574 6177 2079 6166 6c69      to Gateway fail
   bc828:	6465 4a00 696f 206e 6572 7571 7365 2074     ed.Join request 
   bc838:	6361 6e6b 776f 656c 6764 6465 6120 646e     acknowledged and
   bc848:	6e20 646f 2065 4449 7320 7465 7420 206f      node ID set to 
   bc858:	6425 5200 6365 6965 6576 2064 7266 6d6f     %d.Received from
   bc868:	6e20 646f 2065 6425 7720 7469 2068 7372      node %d with rs
   bc878:	6973 253d 2064 202d 2061 7325 6d20 7365     si=%d - a %s mes
   bc888:	6173 6567 5300 7465 6320 6f6c 6b63 7420     sage.Set clock t
   bc898:	206f 7325 6120 646e 7220 7065 726f 2074     o %s and report 
   bc8a8:	7266 7165 6575 636e 2079 6f74 2520 2064     frequency to %d 
   bc8b8:	696d 756e 6574 0073 6c41 7265 2074 6572     minutes.Alert re
   bc8c8:	6f70 7472 6120 6b63 6f6e 6c77 6465 6567     port acknowledge
   bc8d8:	0064 7553 6363 7365 2073 6573 646e 6e69     d.Success sendin
   bc8e8:	2067 6c41 7265 2074 6552 6f70 7472 6e20     g Alert Report n
   bc8f8:	6d75 6562 2072 6425 7420 206f 6167 6574     umber %d to gate
   bc908:	6177 2079 7461 2520 0064 6f4e 6564 2d20     way at %d.Node -
   bc918:	4120 656c 7472 5220 7065 726f 2074 6573      Alert Report se
   bc928:	646e 7420 206f 6147 6574 6177 2079 6166     nd to Gateway fa
   bc938:	6c69 6465 0000 0000                         iled....

000bc940 <_ZTV14LoRA_Functions>:
	...
   bc948:	4ac9 000b 4acb 000b 2041 656e 2077 6164     .J...J..A new da
   bc958:	2079 202d 6572 6573 7474 6e69 2067 7665     y - resetting ev
   bc968:	7265 7479 6968 676e 0000 0000               erything....

000bc974 <_ZTV8MB85RC64>:
	...
   bc97c:	51d5 000b 51e9 000b 69b5 000b 6a4b 000b     .Q...Q...i..Kj..
   bc98c:	6acd 000b                                   .j..

000bc990 <_ZTV13sysStatusData>:
	...
   bc998:	52f1 000b 5261 000b 523f 000b 8011 000b     .R..aR..?R......
   bc9a8:	8039 000b 812d 000b 81c5 000b 51fd 000b     9...-........Q..
   bc9b8:	5215 000b                                   .R..

000bc9bc <_ZTV17currentStatusData>:
	...
   bc9c4:	5379 000b 5261 000b 523f 000b 8011 000b     yS..aR..?R......
   bc9d4:	8039 000b 812d 000b 81c5 000b 51a9 000b     9...-........Q..
   bc9e4:	51c1 000b 6e49 7469 6c61 7a69 6e69 2067     .Q..Initalizing 
   bc9f4:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   bca04:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   bca14:	6f43 666e 6769 0000                         Config..

000bca1c <BLUE_LED>:
   bca1c:	0007                                        ..

000bca1e <BUTTON_PIN>:
   bca1e:	0004                                        ..

000bca20 <INT_PIN>:
   bca20:	0012                                        ..

000bca22 <RFM95_CS>:
   bca22:	0005                                        ..

000bca24 <RFM95_INT>:
   bca24:	0002                                        ..

000bca26 <TMP36_SENSE_PIN>:
   bca26:	000f 6553 7474 6e69 2067 6176 756c 7365     ..Setting values
   bca36:	6620 726f 7420 6568 6e20 646f 0065           for the node.

000bca44 <_ZTVN5spark10LogHandlerE>:
	...
   bca54:	40a5 000b 5875 000b                         .@..uX..

000bca5c <_ZTVN5spark16SerialLogHandlerE>:
	...
   bca64:	5881 000b 58b5 000b 9f21 000b 5877 000b     .X...X..!...wX..
   bca74:	6e55 6e6b 776f 006e 6f4e 656e 5700 4669     Unknown.None.WiF
   bca84:	0069 5347 004d 4d55 5354 4300 4d44 0041     i.GSM.UMTS.CDMA.
   bca94:	544c 0045 4549 4545 3038 3132 3435 4c00     LTE.IEEE802154.L
   bcaa4:	4554 435f 5441 4d5f 0031 544c 5f45 4143     TE_CAT_M1.LTE_CA
   bcab4:	5f54 424e 0031 6f4e 2074 6843 7261 6967     T_NB1.Not Chargi
   bcac4:	676e 4300 6168 6772 6465 4400 7369 6863     ng.Charged.Disch
   bcad4:	7261 6967 676e 4600 7561 746c 4400 6369     arging.Fault.Dic
   bcae4:	6e6f 656e 7463 6465 4100 7373 7265 6974     onnected.Asserti
   bcaf4:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   bcb04:	3c20 2820 3233 2b20 3120 2936 2500 2073      < (32 + 16).%s 
   bcb14:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   bcb24:	6630 2525 0020 6f43 6e75 2c74 6820 756f     0f%% .Count, hou
   bcb34:	6c72 3a79 2520 2e69 6420 6961 796c 203a     rly: %i. daily: 
   bcb44:	6925 4100 7373 7265 6974 6e6f 6146 6c69     %i.AssertionFail
   bcb54:	7275 2065 7273 2063 2626 7320 6372 3e2d     ure src && src->
   bcb64:	6163 6c6c 6162 6b63 2500 2069 0043 0000     callback.%i C...
   bcb74:	ca74 000b ca7c 000b ca81 000b ca86 000b     t...|...........
   bcb84:	ca8a 000b ca8f 000b ca94 000b ca98 000b     ................
   bcb94:	caa3 000b caae 000b 6166 6c69 6465 7420     ........failed t
   bcba4:	206f 6572 6461 7220 6765 6441 7264 253d     o read regAddr=%
   bcbb4:	3230 2078 6f63 6e75 3d74 7525 6600 6961     02x count=%u.fai
   bcbc4:	656c 2064 6f74 7220 6165 2064 6572 4167     led to read regA
   bcbd4:	6464 3d72 3025 7832 7320 6174 3d74 6425     ddr=%02x stat=%d
   bcbe4:	4600 554f 2054 6964 2064 6f6e 2074 6f67     .FOUT did not go
   bcbf4:	4820 4749 0048 6f6e 2074 6564 6574 7463      HIGH.not detect
   bcc04:	6465 6600 6961 656c 2064 6f74 7720 6972     ed.failed to wri
   bcc14:	6574 7220 6765 6441 7264 253d 3230 2078     te regAddr=%02x 
   bcc24:	7473 7461 253d 0064 6573 5774 5444 2520     stat=%d.setWDT %
   bcc34:	0064 6177 6374 6468 676f 6320 656c 7261     d.watchdog clear
   bcc44:	6465 6220 6552 7573 746c 253d 0064 6177     ed bResult=%d.wa
   bcc54:	6374 6468 676f 7320 7465 6620 756f 5372     tchdog set fourS
   bcc64:	6365 3d73 6425 6220 6552 7573 746c 253d     ecs=%d bResult=%
   bcc74:	0064 4157 4354 4448 474f 4400 4545 5f50     d.WATCHDOG.DEEP_
   bcc84:	4f50 4557 5f52 4f44 4e57 4300 554f 544e     POWER_DOWN.COUNT
   bcc94:	4f44 4e57 545f 4d49 5245 4100 414c 4d52     DOWN_TIMER.ALARM
   bcca4:	6600 6961 756c 6572 6920 206e 7075 6164     .failure in upda
   bccb4:	6574 6157 656b 6552 7361 6e6f 2520 0064     teWakeReason %d.
   bccc4:	6177 656b 7220 6165 6f73 206e 203d 7325     wake reason = %s
   bccd4:	6600 6961 756c 6572 6920 206e 6573 4374     .failure in setC
   bcce4:	756f 746e 6f64 6e77 6954 656d 2072 6425     ountdownTimer %d
   bccf4:	6600 6961 756c 6572 6920 206e 6564 7065     .failure in deep
   bcd04:	6f50 6577 4472 776f 206e 6425 5200 4745     PowerDown %d.REG
   bcd14:	535f 454c 5045 435f 5254 3d4c 7830 3225     _SLEEP_CTRL=0x%2
   bcd24:	0078 6964 6e64 7427 7020 776f 7265 6420     x.didn't power d
   bcd34:	776f 006e 3025 6434 252d 3230 2d64 3025     own.%04d-%02d-%0
   bcd44:	6432 2520 3230 3a64 3025 6432 253a 3230     2d %02d:%02d:%02
   bcd54:	0064 6567 5274 6374 7341 6d54 2520 0073     d.getRtcAsTm %s.
   bcd64:	6573 5274 6374 7341 6d54 2520 0073 6166     setRtcAsTm %s.fa
   bcd74:	6c69 7275 2065 6e69 7320 7465 7452 4663     ilure in setRtcF
   bcd84:	6f72 546d 206d 6425 7300 7465 5220 4354     romTm %d.set RTC
   bcd94:	6620 6f72 206d 6c63 756f 2064 7325 7300      from cloud %s.s
   bcda4:	7465 7320 7379 6574 206d 6c63 636f 206b     et system clock 
   bcdb4:	7266 6d6f 5220 4354 2520 0073 6166 6c69     from RTC %s.fail
   bcdc4:	6465 7420 206f 6564 6574 7463 4120 3142     ed to detect AB1
   bcdd4:	3038 0035 7061 2e70 6261 3831 3530 0000     805.app.ab1805..

000bcde4 <_ZTV6AB1805>:
	...
   bcdec:	5e4d 000b 5e4f 000b 64c5 000b 654b 000b     M^..O^...d..Ke..

000bcdfc <_ZTV6MB85RC>:
	...
   bce04:	6975 000b 6977 000b 69b5 000b 6a4b 000b     ui..wi...i..Kj..
   bce14:	6acd 000b                                   .j..

000bce18 <_ZTV15RHGenericDriver>:
	...
   bce28:	6c89 000b 40a5 000b 40a5 000b 40a5 000b     .l...@...@...@..
   bce38:	40a5 000b 6ceb 000b 6c8d 000b 6d3b 000b     .@...l...l..;m..
   bce48:	6d09 000b 6d5f 000b 6c97 000b 6c9f 000b     .m.._m...l...l..
   bce58:	6ca3 000b 6ca7 000b 6cab 000b 6caf 000b     .l...l...l...l..
   bce68:	6c9b 000b 6cbb 000b 6cbf 000b 6cc3 000b     .l...l...l...l..
   bce78:	6cc7 000b 6ccb 000b 6cd1 000b 6cd5 000b     .l...l...l...l..
   bce88:	6c97 000b 6cd9 000b 6cdf 000b 6ce5 000b     .l...l...l...l..

000bce98 <_ZTV12RHGenericSPI>:
	...
   bcea0:	40a5 000b 6dbd 000b 6dbf 000b 40a5 000b     .@...m...m...@..
   bceb0:	40a5 000b 6dc7 000b 6dcb 000b 6dcf 000b     .@...m...m...m..
   bcec0:	6dc1 000b 6dc3 000b 6dc5 000b 6564 6166     .m...m...m..defa
   bced0:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bcee0:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bcef0:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bcf00:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bcf10 <_ZTVN8particle11SPISettingsE>:
	...
   bcf18:	6e15 000b 6de9 000b 6deb 000b               .n...m...m..

000bcf24 <_ZTV13RHHardwareSPI>:
	...
   bcf2c:	6ec9 000b 6edd 000b 6eeb 000b 6ef9 000b     .n...n...n...n..
   bcf3c:	6f65 000b 6dc7 000b 6dcb 000b 6dcf 000b     eo...m...m...m..
   bcf4c:	6f73 000b 6f87 000b 6f95 000b               so...o...o..

000bcf58 <_ZTV6RHMesh>:
	...
   bcf60:	7061 000b 7309 000b 6fc1 000b 6fad 000b     ap...s...o...o..

000bcf70 <_ZTV8RHRouter>:
	...
   bcf78:	7575 000b 75b9 000b                         uu...u..

000bcf80 <_ZTV11RHSPIDriver>:
	...
   bcf90:	7855 000b 40a5 000b 40a5 000b 40a5 000b     Ux...@...@...@..
   bcfa0:	40a5 000b 6ceb 000b 6c8d 000b 6d3b 000b     .@...l...l..;m..
   bcfb0:	6d09 000b 6d5f 000b 6c97 000b 6c9f 000b     .m.._m...l...l..
   bcfc0:	6ca3 000b 6ca7 000b 6cab 000b 6caf 000b     .l...l...l...l..
   bcfd0:	6c9b 000b 6cbb 000b 6cbf 000b 6cc3 000b     .l...l...l...l..
   bcfe0:	6cc7 000b 6ccb 000b 6cd1 000b 6cd5 000b     .l...l...l...l..
   bcff0:	6c97 000b 6cd9 000b 6cdf 000b 6ce5 000b     .l...l...l...l..
   bd000:	7881 000b 788b 000b                         .x...x..

000bd008 <_ZL18MODEM_CONFIG_TABLE>:
   bd008:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bd018 <_ZTV7RH_RF95>:
	...
   bd020:	79f3 000b 7a2b 000b 7f01 000b 7d97 000b     .y..+z.......}..
   bd030:	7a61 000b 7ddf 000b 79ef 000b 6ceb 000b     az...}...y...l..
   bd040:	6c8d 000b 6d3b 000b 6d09 000b 6d5f 000b     .l..;m...m.._m..
   bd050:	79f5 000b 6c9f 000b 6ca3 000b 6ca7 000b     .y...l...l...l..
   bd060:	6cab 000b 6caf 000b 6c9b 000b 6cbb 000b     .l...l...l...l..
   bd070:	6cbf 000b 6cc3 000b 6cc7 000b 6ccb 000b     .l...l...l...l..
   bd080:	6cd1 000b 6cd5 000b 7a3b 000b 6cd9 000b     .l...l..;z...l..
   bd090:	6cdf 000b 6ce5 000b 7881 000b 788b 000b     .l...l...x...x..
   bd0a0:	79eb 000b 6f67 3a74 6d20 6761 6369 253d     .y..got: magic=%
   bd0b0:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   bd0c0:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   bd0d0:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   bd0e0:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   bd0f0:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   bd100:	253d 3830 0078 0000                         =%08x...

000bd108 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bd110:	800b 000b 8057 000b 8009 000b 8011 000b     ....W...........
   bd120:	8039 000b 812d 000b 81c5 000b               9...-.......

000bd12c <_ZTVN5spark13CellularClassE>:
	...
   bd134:	8a0b 000b 8a01 000b 89f7 000b 89ad 000b     ................
   bd144:	89eb 000b 89df 000b a279 000b a281 000b     ........y.......
   bd154:	89d3 000b 89cb 000b 89c1 000b 89b7 000b     ................
   bd164:	a2b1 000b                                   ....

000bd168 <_ZTV14CellularSignal>:
	...
   bd170:	8a99 000b 8afd 000b 8a9b 000b 8b0d 000b     ................
   bd180:	8b41 000b 8b6d 000b 8ba1 000b 8ac1 000b     A...m...........
   bd190:	8a9f 000b 8abb 000b fffc ffff 0000 0000     ................
   bd1a0:	8af5 000b                                   ....

000bd1a4 <_ZTVN5spark13EthernetClassE>:
	...
   bd1ac:	8c43 000b 8c39 000b 8c2f 000b 8c25 000b     C...9.../...%...
   bd1bc:	8c19 000b 8c0d 000b a279 000b a281 000b     ........y.......
   bd1cc:	8c01 000b 8bf9 000b 8bef 000b 8be5 000b     ................
   bd1dc:	a2b1 000b                                   ....

000bd1e0 <_ZTV7TwoWire>:
	...
   bd1e8:	8d13 000b 8d5d 000b 8d35 000b 8d15 000b     ....]...5.......
   bd1f8:	8d3d 000b 8d45 000b 8d4d 000b 8d55 000b     =...E...M...U...

000bd208 <_ZTV9IPAddress>:
	...
   bd210:	8ec1 000b 8eb1 000b 8eb3 000b 2575 3430     ............u%04
   bd220:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bd230:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bd240:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bd250:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bd260:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bd270:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bd280:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000bd290 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bd298:	936d 000b 9393 000b 9351 000b 8fcf 000b     m.......Q.......

000bd2a8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bd2b0:	97c9 000b 97e1 000b 9f21 000b 5877 000b     ........!...wX..

000bd2c0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bd2c8:	97f5 000b 9809 000b a0c5 000b 9359 000b     ............Y...

000bd2d8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bd2e0:	936b 000b 93a1 000b 9e85 000b 935b 000b     k...........[...

000bd2f0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bd2f8:	9369 000b 93af 000b 9731 000b 93d1 000b     i.......1.......

000bd308 <_ZTVN5spark12NetworkClassE>:
	...
   bd310:	a239 000b a243 000b a24d 000b a257 000b     9...C...M...W...
   bd320:	a261 000b a26d 000b a279 000b a281 000b     a...m...y.......
   bd330:	a289 000b a295 000b a29d 000b a2a7 000b     ................
   bd340:	a2b1 000b 616e 006e 6e69 0066 766f 0066     ....nan.inf.ovf.

000bd350 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd350:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bd360:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bd370:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bd380:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bd390:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bd3a0:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bd3b0 <_ZTV11USARTSerial>:
	...
   bd3b8:	afc5 000b b031 000b b009 000b a501 000b     ....1...........
   bd3c8:	afd9 000b aff5 000b afe7 000b b003 000b     ................
   bd3d8:	afc7 000b afcb 000b                         ........

000bd3e0 <_ZTV9USBSerial>:
	...
   bd3e8:	b083 000b b0eb 000b b0c1 000b a501 000b     ................
   bd3f8:	b0b3 000b b085 000b b095 000b b0e5 000b     ................
   bd408:	b0a5 000b b07d 000b                         ....}...

000bd410 <_ZSt7nothrow>:
   bd410:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   bd420:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000bd431 <day_name.1>:
   bd431:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bd441:	6972 6153                                    riSat

000bd446 <mon_name.0>:
   bd446:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bd456:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bd466:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bd476:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bd486:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bd496:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bd4a6:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bd4b6:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bd4c6:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bd4d6:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bd4e6:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd4f6:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd506:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd516:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd526:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bd533 <_ctype_>:
   bd533:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd543:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd553:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd563:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd573:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd583:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd593:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd5a3:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd5b3:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bd634 <link_const_variable_data_end>:
   bd634:	000b4a69 	.word	0x000b4a69
   bd638:	000b5171 	.word	0x000b5171
   bd63c:	000b575d 	.word	0x000b575d
   bd640:	000b59dd 	.word	0x000b59dd
   bd644:	000b5e41 	.word	0x000b5e41
   bd648:	000b6965 	.word	0x000b6965
   bd64c:	000b6f9d 	.word	0x000b6f9d
   bd650:	000b899d 	.word	0x000b899d
   bd654:	000b8a69 	.word	0x000b8a69
   bd658:	000b8c4d 	.word	0x000b8c4d
   bd65c:	000b9f11 	.word	0x000b9f11
   bd660:	000ba389 	.word	0x000ba389
   bd664:	000ba7f5 	.word	0x000ba7f5
   bd668:	000bac89 	.word	0x000bac89
   bd66c:	000bafb1 	.word	0x000bafb1
