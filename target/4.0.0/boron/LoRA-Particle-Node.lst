
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/4.0.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009890  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd8b0  000bd8b0  0000d8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bd8d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c4  2003dd74  000bd8d8  0001dd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008b8  2003df38  2003df38  0002df38  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000bda9c  000bda9c  0002da9c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000bdac8  000bdac8  0002dac8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001f34af  00000000  00000000  0002dacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00024f08  00000000  00000000  00220f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004dbae  00000000  00000000  00245e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000041f0  00000000  00000000  00293a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000d980  00000000  00000000  00297c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00056df4  00000000  00000000  002a55a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0007a6d4  00000000  00000000  002fc395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001465a0  00000000  00000000  00376a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bd78  00000000  00000000  004bd00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f008 f897 	bl	bc164 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f008 f8b9 	bl	bc1b4 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003dd74 	.word	0x2003dd74
   b404c:	000bd8d8 	.word	0x000bd8d8
   b4050:	2003df38 	.word	0x2003df38
   b4054:	2003df38 	.word	0x2003df38
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f007 f9df 	bl	bb424 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bd868 	.word	0x000bd868
   b4080:	000bd8a4 	.word	0x000bd8a4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b88a 	b.w	b419c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f9c7 	bl	b441c <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f007 b97f 	b.w	bb394 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f004 bcc7 	b.w	b8a28 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bcc5 	b.w	b8a28 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f004 bccb 	b.w	b8a38 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fb98 	bl	b87e0 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8431 	.word	0x000b8431
   b40b8:	000bc56c 	.word	0x000bc56c

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z13userSwitchISRv>:
	oldState = state;
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  	userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   b40cc:	4b01      	ldr	r3, [pc, #4]	; (b40d4 <_Z13userSwitchISRv+0x8>)
   b40ce:	2201      	movs	r2, #1
   b40d0:	701a      	strb	r2, [r3, #0]
}
   b40d2:	4770      	bx	lr
   b40d4:	2003df8c 	.word	0x2003df8c

000b40d8 <_Z9sensorISRv>:

void sensorISR()
{
   b40d8:	b510      	push	{r4, lr}
  static bool frontTireFlag = false;
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
   b40da:	4c08      	ldr	r4, [pc, #32]	; (b40fc <_Z9sensorISRv+0x24>)
   b40dc:	7823      	ldrb	r3, [r4, #0]
   b40de:	b12b      	cbz	r3, b40ec <_Z9sensorISRv+0x14>
    sensorDetect = true;                                              // sets the sensor flag for the main loop
   b40e0:	4b07      	ldr	r3, [pc, #28]	; (b4100 <_Z9sensorISRv+0x28>)
   b40e2:	2201      	movs	r2, #1
   b40e4:	701a      	strb	r2, [r3, #0]
    frontTireFlag = false;
   b40e6:	2300      	movs	r3, #0
  }
  else frontTireFlag = true;
   b40e8:	7023      	strb	r3, [r4, #0]
}
   b40ea:	bd10      	pop	{r4, pc}
  if (frontTireFlag || sysStatus.get_sensorType() == 1) {                   // Counts the rear tire for pressure sensors and once for PIR
   b40ec:	f001 f88c 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b40f0:	f001 fa23 	bl	b553a <_ZNK13sysStatusData14get_sensorTypeEv>
   b40f4:	2800      	cmp	r0, #0
   b40f6:	d1f3      	bne.n	b40e0 <_Z9sensorISRv+0x8>
  else frontTireFlag = true;
   b40f8:	2301      	movs	r3, #1
   b40fa:	e7f5      	b.n	b40e8 <_Z9sensorISRv+0x10>
   b40fc:	2003df40 	.word	0x2003df40
   b4100:	2003df8a 	.word	0x2003df8a

000b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   b4106:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   b4108:	4605      	mov	r5, r0
   b410a:	460f      	mov	r7, r1
   b410c:	4616      	mov	r6, r2
        if (valid_) {
   b410e:	b18b      	cbz	r3, b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4110:	6803      	ldr	r3, [r0, #0]
   b4112:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b4114:	b183      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b4116:	889a      	ldrh	r2, [r3, #4]
   b4118:	2a01      	cmp	r2, #1
   b411a:	d006      	beq.n	b412a <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   b411c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b411e:	e7f9      	b.n	b4114 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b4120:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b4122:	b14b      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   b4124:	889a      	ldrh	r2, [r3, #4]
   b4126:	2a01      	cmp	r2, #1
   b4128:	d1fa      	bne.n	b4120 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   b412a:	b12b      	cbz	r3, b4138 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   b412c:	899a      	ldrh	r2, [r3, #12]
   b412e:	42ba      	cmp	r2, r7
   b4130:	d1f6      	bne.n	b4120 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   b4132:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   b4134:	4628      	mov	r0, r5
   b4136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b4138:	490a      	ldr	r1, [pc, #40]	; (b4164 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   b413a:	2010      	movs	r0, #16
   b413c:	f007 fb04 	bl	bb748 <_ZnwjRKSt9nothrow_t>
   b4140:	4604      	mov	r4, r0
   b4142:	b168      	cbz	r0, b4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   b4144:	2210      	movs	r2, #16
   b4146:	2100      	movs	r1, #0
   b4148:	f008 f834 	bl	bc1b4 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b414c:	4b06      	ldr	r3, [pc, #24]	; (b4168 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   b414e:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b4150:	2301      	movs	r3, #1
   b4152:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4154:	692b      	ldr	r3, [r5, #16]
   b4156:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   b4158:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   b415a:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b415c:	612c      	str	r4, [r5, #16]
   b415e:	e7e9      	b.n	b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   b4160:	7528      	strb	r0, [r5, #20]
                return *this;
   b4162:	e7e7      	b.n	b4134 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   b4164:	000bd644 	.word	0x000bd644
   b4168:	00030010 	.word	0x00030010

000b416c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b416c:	b40e      	push	{r1, r2, r3}
   b416e:	b500      	push	{lr}
   b4170:	b08c      	sub	sp, #48	; 0x30
   b4172:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4174:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4178:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b417c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b417e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4182:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4184:	6801      	ldr	r1, [r0, #0]
   b4186:	aa04      	add	r2, sp, #16
   b4188:	201e      	movs	r0, #30
    attr.flags = 0;
   b418a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418e:	f004 fb37 	bl	b8800 <log_message_v>
}
   b4192:	b00c      	add	sp, #48	; 0x30
   b4194:	f85d eb04 	ldr.w	lr, [sp], #4
   b4198:	b003      	add	sp, #12
   b419a:	4770      	bx	lr

000b419c <setup>:
void setup() {
   b419c:	b530      	push	{r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b419e:	2000      	movs	r0, #0
   b41a0:	b085      	sub	sp, #20
   b41a2:	f004 f95d 	bl	b8460 <hal_timer_millis>
        while (_while() && !_condition()) {
   b41a6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b41aa:	4604      	mov	r4, r0
   b41ac:	2000      	movs	r0, #0
   b41ae:	f004 f957 	bl	b8460 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b41b2:	1b00      	subs	r0, r0, r4
   b41b4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b41b8:	42a8      	cmp	r0, r5
   b41ba:	f171 0300 	sbcs.w	r3, r1, #0
   b41be:	d207      	bcs.n	b41d0 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b41c0:	f007 f8a0 	bl	bb304 <_Z16_fetch_usbserialv>
   b41c4:	f007 f893 	bl	bb2ee <_ZN9USBSerial11isConnectedEv>
   b41c8:	b910      	cbnz	r0, b41d0 <setup+0x34>
            spark_process();
   b41ca:	f004 fba5 	bl	b8918 <spark_process>
        while (_while() && !_condition()) {
   b41ce:	e7ed      	b.n	b41ac <setup+0x10>
   b41d0:	f007 f898 	bl	bb304 <_Z16_fetch_usbserialv>
   b41d4:	f007 f88b 	bl	bb2ee <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b41d8:	f001 fa7e 	bl	b56d8 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b41dc:	f001 faa8 	bl	b5730 <_Z18initializePowerCfgv>
	current.setup();
   b41e0:	f001 f862 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b41e4:	6803      	ldr	r3, [r0, #0]
   b41e6:	681b      	ldr	r3, [r3, #0]
   b41e8:	4798      	blx	r3
	sysStatus.setup();								// Initialize persistent storage
   b41ea:	f001 f80d 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b41ee:	6803      	ldr	r3, [r0, #0]
   b41f0:	681b      	ldr	r3, [r3, #0]
   b41f2:	4798      	blx	r3
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b41f4:	4844      	ldr	r0, [pc, #272]	; (b4308 <setup+0x16c>)
   b41f6:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   b41f8:	2101      	movs	r1, #1
   b41fa:	8143      	strh	r3, [r0, #10]
   b41fc:	f002 fbe6 	bl	b69cc <_ZN6AB18055setupEb>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   b4200:	217c      	movs	r1, #124	; 0x7c
   b4202:	4841      	ldr	r0, [pc, #260]	; (b4308 <setup+0x16c>)
   b4204:	f001 ff50 	bl	b60a8 <_ZN6AB18056setWDTEi>
  	if (Time.day() != Time.day(current.get_lastCountTime())) {                 // Check to see if the device was last on in a different day
   b4208:	f006 ffa6 	bl	bb158 <_ZN9TimeClass3dayEv>
   b420c:	4604      	mov	r4, r0
   b420e:	f001 f84b 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4212:	f001 f9dd 	bl	b55d0 <_ZNK17currentStatusData17get_lastCountTimeEv>
   b4216:	f006 fe6d 	bl	baef4 <_ZN9TimeClass3dayEx>
   b421a:	4284      	cmp	r4, r0
   b421c:	d001      	beq.n	b4222 <setup+0x86>
    	resetEverything();                                               // Zero the counts for the new day
   b421e:	f001 fa0f 	bl	b5640 <_Z15resetEverythingv>
	if (! LoRA_Functions::instance().setup(false)) 	{	// Start the LoRA radio - Node
   b4222:	f000 fba9 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b4226:	2100      	movs	r1, #0
   b4228:	f000 fbb8 	bl	b499c <_ZN14LoRA_Functions5setupEb>
   b422c:	b9b8      	cbnz	r0, b425e <setup+0xc2>
		current.set_alertCodeNode(3);				// Initialization failure
   b422e:	f001 f83b 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4232:	2103      	movs	r1, #3
   b4234:	f001 f964 	bl	b5500 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b4238:	f001 f836 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b423c:	4604      	mov	r4, r0
   b423e:	f006 ff7a 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4242:	4602      	mov	r2, r0
   b4244:	17c3      	asrs	r3, r0, #31
   b4246:	4620      	mov	r0, r4
   b4248:	f001 f9f5 	bl	b5636 <_ZN17currentStatusData22set_alertTimestampNodeEx>
		Log.info("LoRA Initialization failure alert code %d - power cycle in 30", current.get_alertCodeNode());
   b424c:	f001 f82c 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4250:	f001 f91b 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4254:	492d      	ldr	r1, [pc, #180]	; (b430c <setup+0x170>)
   b4256:	4602      	mov	r2, r0
   b4258:	482d      	ldr	r0, [pc, #180]	; (b4310 <setup+0x174>)
   b425a:	f7ff ff87 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	if ((current.get_alertCodeNode() == 0) && (sysStatus.get_nodeNumber() < 10)) {	// If there is already a hardware alert - deal with that first
   b425e:	f001 f823 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4262:	f001 f912 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4266:	b9f0      	cbnz	r0, b42a6 <setup+0x10a>
   b4268:	f000 ffce 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b426c:	f001 f892 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4270:	2809      	cmp	r0, #9
   b4272:	d818      	bhi.n	b42a6 <setup+0x10a>
		current.set_alertCodeNode(1); // For testing
   b4274:	f001 f818 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4278:	2101      	movs	r1, #1
   b427a:	f001 f941 	bl	b5500 <_ZN17currentStatusData17set_alertCodeNodeEh>
		sysStatus.set_nextReportSeconds(10);
   b427e:	f000 ffc3 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4282:	210a      	movs	r1, #10
   b4284:	f001 f8c9 	bl	b541a <_ZN13sysStatusData21set_nextReportSecondsEt>
		Log.info("Node number indicated unconfigured node of %d setting alert code to  %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b4288:	f001 f80e 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b428c:	f001 f88c 	bl	b53a8 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4290:	9003      	str	r0, [sp, #12]
   b4292:	f001 f809 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4296:	f001 f8f8 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b429a:	9a03      	ldr	r2, [sp, #12]
   b429c:	491d      	ldr	r1, [pc, #116]	; (b4314 <setup+0x178>)
   b429e:	4603      	mov	r3, r0
   b42a0:	481b      	ldr	r0, [pc, #108]	; (b4310 <setup+0x174>)
   b42a2:	f7ff ff63 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	sysStatus.set_nextReportSeconds(10);
   b42a6:	f000 ffaf 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b42aa:	210a      	movs	r1, #10
   b42ac:	f001 f8b5 	bl	b541a <_ZN13sysStatusData21set_nextReportSecondsEt>
  	takeMeasurements();                                                  // Populates values so you can read them before the hour
   b42b0:	f001 fd3e 	bl	b5d30 <_Z16takeMeasurementsv>
    attachInterrupt(INT_PIN, sensorISR, RISING);                     	// Pressure Sensor interrupt from low to high
   b42b4:	4818      	ldr	r0, [pc, #96]	; (b4318 <setup+0x17c>)
   b42b6:	4919      	ldr	r1, [pc, #100]	; (b431c <setup+0x180>)
   b42b8:	8800      	ldrh	r0, [r0, #0]
   b42ba:	2400      	movs	r4, #0
   b42bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b42c0:	2201      	movs	r2, #1
   b42c2:	9400      	str	r4, [sp, #0]
   b42c4:	f004 feaa 	bl	b901c <_Z15attachInterrupttPFvvE13InterruptModeah>
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b42c8:	4815      	ldr	r0, [pc, #84]	; (b4320 <setup+0x184>)
   b42ca:	4916      	ldr	r1, [pc, #88]	; (b4324 <setup+0x188>)
   b42cc:	8800      	ldrh	r0, [r0, #0]
   b42ce:	9400      	str	r4, [sp, #0]
   b42d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b42d4:	4622      	mov	r2, r4
   b42d6:	f004 fea1 	bl	b901c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;               // IDLE unless otherwise from above code
   b42da:	4b13      	ldr	r3, [pc, #76]	; (b4328 <setup+0x18c>)
   b42dc:	781a      	ldrb	r2, [r3, #0]
   b42de:	b90a      	cbnz	r2, b42e4 <setup+0x148>
   b42e0:	2202      	movs	r2, #2
   b42e2:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete for the Node with alert code %d", current.get_alertCodeNode());
   b42e4:	f000 ffe0 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b42e8:	f001 f8cf 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b42ec:	490f      	ldr	r1, [pc, #60]	; (b432c <setup+0x190>)
   b42ee:	4602      	mov	r2, r0
   b42f0:	4807      	ldr	r0, [pc, #28]	; (b4310 <setup+0x174>)
   b42f2:	f7ff ff3b 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  	digitalWrite(BLUE_LED,LOW);                                           // Signal the end of startup
   b42f6:	4b0e      	ldr	r3, [pc, #56]	; (b4330 <setup+0x194>)
   b42f8:	8818      	ldrh	r0, [r3, #0]
   b42fa:	2100      	movs	r1, #0
}
   b42fc:	b005      	add	sp, #20
   b42fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  	digitalWrite(BLUE_LED,LOW);                                           // Signal the end of startup
   b4302:	f007 b928 	b.w	bb556 <digitalWrite>
   b4306:	bf00      	nop
   b4308:	2003df44 	.word	0x2003df44
   b430c:	000bc581 	.word	0x000bc581
   b4310:	2003e658 	.word	0x2003e658
   b4314:	000bc5bf 	.word	0x000bc5bf
   b4318:	000bcc38 	.word	0x000bcc38
   b431c:	000b40d9 	.word	0x000b40d9
   b4320:	000bcc36 	.word	0x000bcc36
   b4324:	000b40cd 	.word	0x000b40cd
   b4328:	2003df8b 	.word	0x2003df8b
   b432c:	000bc607 	.word	0x000bc607
   b4330:	000bcc34 	.word	0x000bcc34

000b4334 <_Z22publishStateTransitionv>:
{
   b4334:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE) {
   b4336:	4e1d      	ldr	r6, [pc, #116]	; (b43ac <_Z22publishStateTransitionv+0x78>)
   b4338:	4c1d      	ldr	r4, [pc, #116]	; (b43b0 <_Z22publishStateTransitionv+0x7c>)
   b433a:	7832      	ldrb	r2, [r6, #0]
   b433c:	4d1d      	ldr	r5, [pc, #116]	; (b43b4 <_Z22publishStateTransitionv+0x80>)
   b433e:	2a02      	cmp	r2, #2
{
   b4340:	b0c4      	sub	sp, #272	; 0x110
	if (state == IDLE_STATE) {
   b4342:	d12a      	bne.n	b439a <_Z22publishStateTransitionv+0x66>
		if (!Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b4344:	f006 feda 	bl	bb0fc <_ZN9TimeClass7isValidEv>
   b4348:	7832      	ldrb	r2, [r6, #0]
   b434a:	782b      	ldrb	r3, [r5, #0]
   b434c:	b958      	cbnz	r0, b4366 <_Z22publishStateTransitionv+0x32>
   b434e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b4352:	9200      	str	r2, [sp, #0]
   b4354:	4a18      	ldr	r2, [pc, #96]	; (b43b8 <_Z22publishStateTransitionv+0x84>)
   b4356:	eb04 1303 	add.w	r3, r4, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b435a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b435e:	a804      	add	r0, sp, #16
   b4360:	f004 fb82 	bl	b8a68 <snprintf>
   b4364:	e011      	b.n	b438a <_Z22publishStateTransitionv+0x56>
		else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s for %u seconds", stateNames[oldState],stateNames[state],sysStatus.get_nextReportSeconds());
   b4366:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b436a:	9303      	str	r3, [sp, #12]
   b436c:	eb04 1402 	add.w	r4, r4, r2, lsl #4
   b4370:	f000 ff4a 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4374:	f001 f813 	bl	b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4378:	9b03      	ldr	r3, [sp, #12]
   b437a:	4a10      	ldr	r2, [pc, #64]	; (b43bc <_Z22publishStateTransitionv+0x88>)
   b437c:	e9cd 4000 	strd	r4, r0, [sp]
   b4380:	f44f 7180 	mov.w	r1, #256	; 0x100
   b4384:	a804      	add	r0, sp, #16
   b4386:	f004 fb6f 	bl	b8a68 <snprintf>
	oldState = state;
   b438a:	7833      	ldrb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b438c:	480c      	ldr	r0, [pc, #48]	; (b43c0 <_Z22publishStateTransitionv+0x8c>)
	oldState = state;
   b438e:	702b      	strb	r3, [r5, #0]
	Log.info(stateTransitionString);
   b4390:	a904      	add	r1, sp, #16
   b4392:	f7ff feeb 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
}
   b4396:	b044      	add	sp, #272	; 0x110
   b4398:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b439a:	782b      	ldrb	r3, [r5, #0]
   b439c:	eb04 1202 	add.w	r2, r4, r2, lsl #4
   b43a0:	9200      	str	r2, [sp, #0]
   b43a2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
   b43a6:	4a07      	ldr	r2, [pc, #28]	; (b43c4 <_Z22publishStateTransitionv+0x90>)
   b43a8:	e7d7      	b.n	b435a <_Z22publishStateTransitionv+0x26>
   b43aa:	bf00      	nop
   b43ac:	2003df8b 	.word	0x2003df8b
   b43b0:	2003dd74 	.word	0x2003dd74
   b43b4:	2003df88 	.word	0x2003df88
   b43b8:	000bc638 	.word	0x000bc638
   b43bc:	000bc658 	.word	0x000bc658
   b43c0:	2003e658 	.word	0x2003e658
   b43c4:	000bc675 	.word	0x000bc675

000b43c8 <_Z20secondsTillNextEventv>:

int secondsTillNextEvent() {										// This is the node version
   b43c8:	b538      	push	{r3, r4, r5, lr}
	int returnSeconds = 60;

	if (Time.isValid()) {											// We may need to sleep when time is not valid
   b43ca:	f006 fe97 	bl	bb0fc <_ZN9TimeClass7isValidEv>
   b43ce:	b908      	cbnz	r0, b43d4 <_Z20secondsTillNextEventv+0xc>
		if (sysStatus.get_nextReportSeconds() > (Time.now() - sysStatus.get_lastConnection())) {						// If this is false, we missed the last event.
			return (sysStatus.get_nextReportSeconds() - (Time.now() - sysStatus.get_lastConnection()) + 5);  			// sleep till next event - Add 5 seconds so it does not miss the gateway
		}
	}

	return returnSeconds;
   b43d0:	203c      	movs	r0, #60	; 0x3c
}
   b43d2:	bd38      	pop	{r3, r4, r5, pc}
		if (sysStatus.get_nextReportSeconds() > (Time.now() - sysStatus.get_lastConnection())) {						// If this is false, we missed the last event.
   b43d4:	f000 ff18 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b43d8:	f000 ffe1 	bl	b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b43dc:	4605      	mov	r5, r0
   b43de:	f006 feaa 	bl	bb136 <_ZN9TimeClass3nowEv>
   b43e2:	4604      	mov	r4, r0
   b43e4:	f000 ff10 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b43e8:	f001 f8ed 	bl	b55c6 <_ZNK13sysStatusData18get_lastConnectionEv>
   b43ec:	17e3      	asrs	r3, r4, #31
   b43ee:	1a24      	subs	r4, r4, r0
   b43f0:	eb63 0301 	sbc.w	r3, r3, r1
   b43f4:	42ac      	cmp	r4, r5
   b43f6:	f173 0300 	sbcs.w	r3, r3, #0
   b43fa:	dae9      	bge.n	b43d0 <_Z20secondsTillNextEventv+0x8>
			return (sysStatus.get_nextReportSeconds() - (Time.now() - sysStatus.get_lastConnection()) + 5);  			// sleep till next event - Add 5 seconds so it does not miss the gateway
   b43fc:	f000 ff04 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4400:	f000 ffcd 	bl	b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4404:	4604      	mov	r4, r0
   b4406:	f000 feff 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b440a:	f001 f8dc 	bl	b55c6 <_ZNK13sysStatusData18get_lastConnectionEv>
   b440e:	4605      	mov	r5, r0
   b4410:	f006 fe91 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4414:	442c      	add	r4, r5
   b4416:	3405      	adds	r4, #5
   b4418:	1a20      	subs	r0, r4, r0
   b441a:	e7da      	b.n	b43d2 <_Z20secondsTillNextEventv+0xa>

000b441c <loop>:
void loop() {
   b441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	switch (state) {
   b4420:	4c9b      	ldr	r4, [pc, #620]	; (b4690 <loop+0x274>)
   b4422:	7823      	ldrb	r3, [r4, #0]
   b4424:	3b01      	subs	r3, #1
void loop() {
   b4426:	b08a      	sub	sp, #40	; 0x28
   b4428:	2b03      	cmp	r3, #3
   b442a:	d82c      	bhi.n	b4486 <loop+0x6a>
   b442c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b4430:	00040196 	.word	0x00040196
   b4434:	0114005b 	.word	0x0114005b
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4438:	4b96      	ldr	r3, [pc, #600]	; (b4694 <loop+0x278>)
   b443a:	781b      	ldrb	r3, [r3, #0]
   b443c:	2b02      	cmp	r3, #2
   b443e:	d001      	beq.n	b4444 <loop+0x28>
   b4440:	f7ff ff78 	bl	b4334 <_Z22publishStateTransitionv>
			if ((Time.now() - lastPublish) > sysStatus.get_nextReportSeconds()) {
   b4444:	f006 fe77 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4448:	4b93      	ldr	r3, [pc, #588]	; (b4698 <loop+0x27c>)
   b444a:	e9d3 5300 	ldrd	r5, r3, [r3]
   b444e:	17c6      	asrs	r6, r0, #31
   b4450:	1b45      	subs	r5, r0, r5
   b4452:	eb66 0603 	sbc.w	r6, r6, r3
   b4456:	f000 fed7 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b445a:	f000 ffa0 	bl	b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b445e:	2300      	movs	r3, #0
   b4460:	42a8      	cmp	r0, r5
   b4462:	41b3      	sbcs	r3, r6
   b4464:	da3d      	bge.n	b44e2 <loop+0xc6>
				Log.info("Time to publish with alert code %d", current.get_alertCodeNode());
   b4466:	f000 ff1f 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b446a:	f001 f80e 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b446e:	498b      	ldr	r1, [pc, #556]	; (b469c <loop+0x280>)
   b4470:	4602      	mov	r2, r0
   b4472:	488b      	ldr	r0, [pc, #556]	; (b46a0 <loop+0x284>)
   b4474:	f7ff fe7a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
				if (current.get_alertCodeNode() != 0) state = ERROR_STATE;
   b4478:	f000 ff16 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b447c:	f001 f805 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4480:	b368      	cbz	r0, b44de <loop+0xc2>
   b4482:	2301      	movs	r3, #1
				else state = LoRA_STATE;		   								// If time is valid - wake on the right minute of the hour
   b4484:	7023      	strb	r3, [r4, #0]
	ab1805.loop();                                  							// Keeps the RTC synchronized with the Boron's clock
   b4486:	4887      	ldr	r0, [pc, #540]	; (b46a4 <loop+0x288>)
   b4488:	f002 f9ba 	bl	b6800 <_ZN6AB18054loopEv>
	current.loop();
   b448c:	f000 ff0c 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4490:	f000 ff1a 	bl	b52c8 <_ZN17currentStatusData4loopEv>
	sysStatus.loop();
   b4494:	f000 feb8 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4498:	f000 fede 	bl	b5258 <_ZN13sysStatusData4loopEv>
	if (rescueMode) {
   b449c:	4b82      	ldr	r3, [pc, #520]	; (b46a8 <loop+0x28c>)
   b449e:	781a      	ldrb	r2, [r3, #0]
   b44a0:	b18a      	cbz	r2, b44c6 <loop+0xaa>
		rescueMode = false;
   b44a2:	2500      	movs	r5, #0
   b44a4:	701d      	strb	r5, [r3, #0]
		sysStatus.set_nextReportSeconds(10);										// Rescue mode publish evert minute until we can connect
   b44a6:	f000 feaf 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b44aa:	210a      	movs	r1, #10
   b44ac:	f000 ffb5 	bl	b541a <_ZN13sysStatusData21set_nextReportSecondsEt>
		sysStatus.set_lowPowerMode(false);
   b44b0:	f000 feaa 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b44b4:	4629      	mov	r1, r5
   b44b6:	f001 f863 	bl	b5580 <_ZN13sysStatusData16set_lowPowerModeEb>
		Log.info("Send failed - going to send every minute");
   b44ba:	497c      	ldr	r1, [pc, #496]	; (b46ac <loop+0x290>)
   b44bc:	4878      	ldr	r0, [pc, #480]	; (b46a0 <loop+0x284>)
   b44be:	f7ff fe55 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		state = IDLE_STATE;
   b44c2:	2302      	movs	r3, #2
   b44c4:	7023      	strb	r3, [r4, #0]
	if (sensorDetect) {															// Count the pulse and reset for next
   b44c6:	4b7a      	ldr	r3, [pc, #488]	; (b46b0 <loop+0x294>)
   b44c8:	781a      	ldrb	r2, [r3, #0]
   b44ca:	2a00      	cmp	r2, #0
   b44cc:	f000 8200 	beq.w	b48d0 <loop+0x4b4>
		sensorDetect = false;
   b44d0:	2200      	movs	r2, #0
   b44d2:	701a      	strb	r2, [r3, #0]
}
   b44d4:	b00a      	add	sp, #40	; 0x28
   b44d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		recordCount();
   b44da:	f001 bb17 	b.w	b5b0c <_Z11recordCountv>
				else state = LoRA_STATE;		   								// If time is valid - wake on the right minute of the hour
   b44de:	2304      	movs	r3, #4
   b44e0:	e7d0      	b.n	b4484 <loop+0x68>
			else state = SLEEPING_STATE;										// If we have time, let's take a nap
   b44e2:	2303      	movs	r3, #3
   b44e4:	e7ce      	b.n	b4484 <loop+0x68>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b44e6:	4b6b      	ldr	r3, [pc, #428]	; (b4694 <loop+0x278>)
   b44e8:	781b      	ldrb	r3, [r3, #0]
   b44ea:	2b03      	cmp	r3, #3
   b44ec:	d001      	beq.n	b44f2 <loop+0xd6>
   b44ee:	f7ff ff21 	bl	b4334 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b44f2:	2100      	movs	r1, #0
   b44f4:	486b      	ldr	r0, [pc, #428]	; (b46a4 <loop+0x288>)
   b44f6:	f001 fdd7 	bl	b60a8 <_ZN6AB18056setWDTEi>
			wakeInSeconds = secondsTillNextEvent();								// Figure out how long to sleep 
   b44fa:	f7ff ff65 	bl	b43c8 <_Z20secondsTillNextEventv>
   b44fe:	4607      	mov	r7, r0
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b4500:	f006 fdfc 	bl	bb0fc <_ZN9TimeClass7isValidEv>
   b4504:	4605      	mov	r5, r0
   b4506:	2800      	cmp	r0, #0
   b4508:	d039      	beq.n	b457e <loop+0x162>
   b450a:	f006 fe14 	bl	bb136 <_ZN9TimeClass3nowEv>
   b450e:	19c2      	adds	r2, r0, r7
   b4510:	17d3      	asrs	r3, r2, #31
   b4512:	a806      	add	r0, sp, #24
   b4514:	f006 fd0a 	bl	baf2c <_ZN9TimeClass7timeStrEx>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4518:	9b06      	ldr	r3, [sp, #24]
   b451a:	4966      	ldr	r1, [pc, #408]	; (b46b4 <loop+0x298>)
   b451c:	4860      	ldr	r0, [pc, #384]	; (b46a0 <loop+0x284>)
   b451e:	463a      	mov	r2, r7
   b4520:	f7ff fe24 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4524:	b115      	cbz	r5, b452c <loop+0x110>
   b4526:	a806      	add	r0, sp, #24
   b4528:	f006 fb10 	bl	bab4c <_ZN6StringD1Ev>
			delay(2000);									// Make sure message gets out
   b452c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b4530:	f004 faea 	bl	b8b08 <delay>
        if (valid_) {
   b4534:	4b60      	ldr	r3, [pc, #384]	; (b46b8 <loop+0x29c>)
   b4536:	7d19      	ldrb	r1, [r3, #20]
						state = IDLE_STATE;
   b4538:	2202      	movs	r2, #2
   b453a:	7022      	strb	r2, [r4, #0]
   b453c:	b101      	cbz	r1, b4540 <loop+0x124>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b453e:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b4540:	4b5e      	ldr	r3, [pc, #376]	; (b46bc <loop+0x2a0>)
   b4542:	485d      	ldr	r0, [pc, #372]	; (b46b8 <loop+0x29c>)
   b4544:	f8b3 9000 	ldrh.w	r9, [r3]
   b4548:	2200      	movs	r2, #0
   b454a:	4649      	mov	r1, r9
   b454c:	f7ff fdda 	bl	b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
				.gpio(INT_PIN,RISING)
   b4550:	4b5b      	ldr	r3, [pc, #364]	; (b46c0 <loop+0x2a4>)
   b4552:	f8b3 a000 	ldrh.w	sl, [r3]
   b4556:	2201      	movs	r2, #1
   b4558:	4651      	mov	r1, sl
   b455a:	f7ff fdd3 	bl	b4104 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b455e:	7d03      	ldrb	r3, [r0, #20]
   b4560:	4606      	mov	r6, r0
   b4562:	b313      	cbz	r3, b45aa <loop+0x18e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b4564:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   b4566:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   b456a:	68db      	ldr	r3, [r3, #12]
   b456c:	fb08 f807 	mul.w	r8, r8, r7
        if (!start) {
   b4570:	b13b      	cbz	r3, b4582 <loop+0x166>
            if (start->type == type) {
   b4572:	889a      	ldrh	r2, [r3, #4]
   b4574:	2a04      	cmp	r2, #4
   b4576:	f000 81a8 	beq.w	b48ca <loop+0x4ae>
            start = start->next;
   b457a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b457c:	e7f8      	b.n	b4570 <loop+0x154>
			Log.info("Sleep for %i seconds until next event %s", wakeInSeconds, (Time.isValid()) ? Time.timeStr(Time.now()+wakeInSeconds).c_str(): " ");
   b457e:	4b51      	ldr	r3, [pc, #324]	; (b46c4 <loop+0x2a8>)
   b4580:	e7cb      	b.n	b451a <loop+0xfe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b4582:	4951      	ldr	r1, [pc, #324]	; (b46c8 <loop+0x2ac>)
   b4584:	2010      	movs	r0, #16
   b4586:	f007 f8df 	bl	bb748 <_ZnwjRKSt9nothrow_t>
   b458a:	4605      	mov	r5, r0
   b458c:	2800      	cmp	r0, #0
   b458e:	f000 819a 	beq.w	b48c6 <loop+0x4aa>
   b4592:	2210      	movs	r2, #16
   b4594:	2100      	movs	r1, #0
   b4596:	f007 fe0d 	bl	bc1b4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b459a:	4b4c      	ldr	r3, [pc, #304]	; (b46cc <loop+0x2b0>)
   b459c:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b459e:	2304      	movs	r3, #4
   b45a0:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b45a2:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   b45a4:	e9c5 3802 	strd	r3, r8, [r5, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b45a8:	6135      	str	r5, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b45aa:	4943      	ldr	r1, [pc, #268]	; (b46b8 <loop+0x29c>)
   b45ac:	a803      	add	r0, sp, #12
   b45ae:	f006 fbd9 	bl	bad64 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b45b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b45b6:	483b      	ldr	r0, [pc, #236]	; (b46a4 <loop+0x288>)
   b45b8:	f001 fd76 	bl	b60a8 <_ZN6AB18056setWDTEi>
        return hal_timer_millis(nullptr);
   b45bc:	2000      	movs	r0, #0
   b45be:	f003 ff4f 	bl	b8460 <hal_timer_millis>
        while (_while() && !_condition()) {
   b45c2:	f242 7610 	movw	r6, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b45c6:	4605      	mov	r5, r0
   b45c8:	2000      	movs	r0, #0
   b45ca:	f003 ff49 	bl	b8460 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b45ce:	1b40      	subs	r0, r0, r5
   b45d0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b45d4:	42b0      	cmp	r0, r6
   b45d6:	f171 0300 	sbcs.w	r3, r1, #0
   b45da:	d207      	bcs.n	b45ec <loop+0x1d0>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b45dc:	f006 fe92 	bl	bb304 <_Z16_fetch_usbserialv>
   b45e0:	f006 fe85 	bl	bb2ee <_ZN9USBSerial11isConnectedEv>
   b45e4:	b910      	cbnz	r0, b45ec <loop+0x1d0>
            spark_process();
   b45e6:	f004 f997 	bl	b8918 <spark_process>
        while (_while() && !_condition()) {
   b45ea:	e7ed      	b.n	b45c8 <loop+0x1ac>
   b45ec:	f006 fe8a 	bl	bb304 <_Z16_fetch_usbserialv>
   b45f0:	f006 fe7d 	bl	bb2ee <_ZN9USBSerial11isConnectedEv>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b45f4:	9b03      	ldr	r3, [sp, #12]
        if (wakeupSource_) {
   b45f6:	b333      	cbz	r3, b4646 <loop+0x22a>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   b45f8:	889a      	ldrh	r2, [r3, #4]
   b45fa:	2a01      	cmp	r2, #1
   b45fc:	d123      	bne.n	b4646 <loop+0x22a>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   b45fe:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   b4600:	4599      	cmp	r9, r3
   b4602:	d123      	bne.n	b464c <loop+0x230>
				state = LoRA_STATE;
   b4604:	2304      	movs	r3, #4
				Log.info("Woke with user button - LoRA State");
   b4606:	4932      	ldr	r1, [pc, #200]	; (b46d0 <loop+0x2b4>)
   b4608:	4825      	ldr	r0, [pc, #148]	; (b46a0 <loop+0x284>)
				state = LoRA_STATE;
   b460a:	7023      	strb	r3, [r4, #0]
				Log.info("Woke with user button - LoRA State");
   b460c:	f7ff fdae 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			Log.info("Awoke at %s with %li free memory", Time.timeStr(Time.now()+wakeInSeconds).c_str(), System.freeMemory());
   b4610:	f006 fd91 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4614:	19c2      	adds	r2, r0, r7
   b4616:	17d3      	asrs	r3, r2, #31
   b4618:	a806      	add	r0, sp, #24
   b461a:	f006 fc87 	bl	baf2c <_ZN9TimeClass7timeStrEx>
   b461e:	9a06      	ldr	r2, [sp, #24]
   b4620:	9201      	str	r2, [sp, #4]
   b4622:	f006 fbff 	bl	bae24 <_ZN11SystemClass10freeMemoryEv>
   b4626:	9a01      	ldr	r2, [sp, #4]
   b4628:	492a      	ldr	r1, [pc, #168]	; (b46d4 <loop+0x2b8>)
   b462a:	4603      	mov	r3, r0
   b462c:	481c      	ldr	r0, [pc, #112]	; (b46a0 <loop+0x284>)
   b462e:	f7ff fd9d 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4632:	a806      	add	r0, sp, #24
   b4634:	f006 fa8a 	bl	bab4c <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b4638:	9803      	ldr	r0, [sp, #12]
   b463a:	2800      	cmp	r0, #0
   b463c:	f43f af23 	beq.w	b4486 <loop+0x6a>
            free(wakeupSource_);
   b4640:	f004 f9fa 	bl	b8a38 <free>
		} break;
   b4644:	e71f      	b.n	b4486 <loop+0x6a>
            return std::numeric_limits<pin_t>::max();
   b4646:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b464a:	e7d9      	b.n	b4600 <loop+0x1e4>
			else if (result.wakeupPin() == INT_PIN) sensorDetect = true;
   b464c:	459a      	cmp	sl, r3
   b464e:	bf02      	ittt	eq
   b4650:	4b17      	ldreq	r3, [pc, #92]	; (b46b0 <loop+0x294>)
   b4652:	2201      	moveq	r2, #1
   b4654:	701a      	strbeq	r2, [r3, #0]
   b4656:	e7db      	b.n	b4610 <loop+0x1f4>
			if (state != oldState) {
   b4658:	4b0e      	ldr	r3, [pc, #56]	; (b4694 <loop+0x278>)
   b465a:	4d13      	ldr	r5, [pc, #76]	; (b46a8 <loop+0x28c>)
   b465c:	781b      	ldrb	r3, [r3, #0]
   b465e:	2b04      	cmp	r3, #4
   b4660:	d03e      	beq.n	b46e0 <loop+0x2c4>
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b4662:	f7ff fe67 	bl	b4334 <_Z22publishStateTransitionv>
				takeMeasurements();
   b4666:	f001 fb63 	bl	b5d30 <_Z16takeMeasurementsv>
				lastPublish = Time.now();
   b466a:	f006 fd64 	bl	bb136 <_ZN9TimeClass3nowEv>
   b466e:	4b0a      	ldr	r3, [pc, #40]	; (b4698 <loop+0x27c>)
   b4670:	17c2      	asrs	r2, r0, #31
   b4672:	e9c3 0200 	strd	r0, r2, [r3]
				if (!LoRA_Functions::instance().composeDataReportNode()) {
   b4676:	f000 f97f 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b467a:	f000 f9ff 	bl	b4a7c <_ZN14LoRA_Functions21composeDataReportNodeEv>
   b467e:	bb78      	cbnz	r0, b46e0 <loop+0x2c4>
					rescueMode = true;											// Initiate sending report
   b4680:	2301      	movs	r3, #1
					Log.info("Failed in send and rescue is %s", (rescueMode) ? "On" : "Off");
   b4682:	4a15      	ldr	r2, [pc, #84]	; (b46d8 <loop+0x2bc>)
   b4684:	4915      	ldr	r1, [pc, #84]	; (b46dc <loop+0x2c0>)
   b4686:	4806      	ldr	r0, [pc, #24]	; (b46a0 <loop+0x284>)
					rescueMode = true;											// Initiate sending report
   b4688:	702b      	strb	r3, [r5, #0]
					Log.info("Failed in send and rescue is %s", (rescueMode) ? "On" : "Off");
   b468a:	f7ff fd6f 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
					break;
   b468e:	e6fa      	b.n	b4486 <loop+0x6a>
   b4690:	2003df8b 	.word	0x2003df8b
   b4694:	2003df88 	.word	0x2003df88
   b4698:	2003df80 	.word	0x2003df80
   b469c:	000bc68a 	.word	0x000bc68a
   b46a0:	2003e658 	.word	0x2003e658
   b46a4:	2003df44 	.word	0x2003df44
   b46a8:	2003df89 	.word	0x2003df89
   b46ac:	000bc792 	.word	0x000bc792
   b46b0:	2003df8a 	.word	0x2003df8a
   b46b4:	000bc6ad 	.word	0x000bc6ad
   b46b8:	2003df64 	.word	0x2003df64
   b46bc:	000bcc36 	.word	0x000bcc36
   b46c0:	000bcc38 	.word	0x000bcc38
   b46c4:	000bcd40 	.word	0x000bcd40
   b46c8:	000bd644 	.word	0x000bd644
   b46cc:	00030010 	.word	0x00030010
   b46d0:	000bc6d6 	.word	0x000bc6d6
   b46d4:	000bc6f9 	.word	0x000bc6f9
   b46d8:	000bc683 	.word	0x000bc683
   b46dc:	000bc71a 	.word	0x000bc71a

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b46e0:	f003 feae 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b46e4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; b48e0 <loop+0x4c4>
   b46e8:	f8df 8218 	ldr.w	r8, [pc, #536]	; b4904 <loop+0x4e8>
   b46ec:	4f7a      	ldr	r7, [pc, #488]	; (b48d8 <loop+0x4bc>)
   b46ee:	4606      	mov	r6, r0
   b46f0:	f003 fea6 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
			while (millis() - startListening < 10000) {
   b46f4:	f242 730f 	movw	r3, #9999	; 0x270f
   b46f8:	1b80      	subs	r0, r0, r6
   b46fa:	4298      	cmp	r0, r3
   b46fc:	d821      	bhi.n	b4742 <loop+0x326>
				if (LoRA_Functions::instance().listenForLoRAMessageNode()) {									// Listen for acknowledgement
   b46fe:	f000 f93b 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b4702:	f000 fc71 	bl	b4fe8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b4706:	b308      	cbz	r0, b474c <loop+0x330>
					current.set_hourlyCount(0);										// Zero the hourly count
   b4708:	f000 fdce 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b470c:	2100      	movs	r1, #0
   b470e:	f000 fe8a 	bl	b5426 <_ZN17currentStatusData15set_hourlyCountEt>
					rescueMode = false;
   b4712:	2300      	movs	r3, #0
   b4714:	702b      	strb	r3, [r5, #0]
					sysStatus.set_lastConnection(Time.now());
   b4716:	f000 fd77 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b471a:	4606      	mov	r6, r0
   b471c:	f006 fd0b 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4720:	4602      	mov	r2, r0
   b4722:	17c3      	asrs	r3, r0, #31
   b4724:	4630      	mov	r0, r6
   b4726:	f000 ff7c 	bl	b5622 <_ZN13sysStatusData18set_lastConnectionEx>
					Log.info("Send and Ack succeeded and rescue is %s", (rescueMode) ? "On" : "Off");
   b472a:	7829      	ldrb	r1, [r5, #0]
   b472c:	4b6b      	ldr	r3, [pc, #428]	; (b48dc <loop+0x4c0>)
   b472e:	4a6c      	ldr	r2, [pc, #432]	; (b48e0 <loop+0x4c4>)
   b4730:	4869      	ldr	r0, [pc, #420]	; (b48d8 <loop+0x4bc>)
   b4732:	2900      	cmp	r1, #0
   b4734:	bf08      	it	eq
   b4736:	461a      	moveq	r2, r3
   b4738:	496a      	ldr	r1, [pc, #424]	; (b48e4 <loop+0x4c8>)
   b473a:	f7ff fd17 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
					state = IDLE_STATE;
   b473e:	2302      	movs	r3, #2
   b4740:	7023      	strb	r3, [r4, #0]
			delay(1000);  // Temporary - prevents muliple sends
   b4742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4746:	f004 f9df 	bl	b8b08 <delay>
		} break;
   b474a:	e69c      	b.n	b4486 <loop+0x6a>
					rescueMode = true;
   b474c:	2301      	movs	r3, #1
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b474e:	464a      	mov	r2, r9
   b4750:	4641      	mov	r1, r8
   b4752:	4638      	mov	r0, r7
					rescueMode = true;
   b4754:	702b      	strb	r3, [r5, #0]
					Log.info("Failed in ack and rescue is %s", (rescueMode) ? "On" : "Off");
   b4756:	f7ff fd09 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
			while (millis() - startListening < 10000) {
   b475a:	e7c9      	b.n	b46f0 <loop+0x2d4>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b475c:	4b62      	ldr	r3, [pc, #392]	; (b48e8 <loop+0x4cc>)
   b475e:	781b      	ldrb	r3, [r3, #0]
   b4760:	2b01      	cmp	r3, #1
   b4762:	d001      	beq.n	b4768 <loop+0x34c>
   b4764:	f7ff fde6 	bl	b4334 <_Z22publishStateTransitionv>
			switch (current.get_alertCodeNode())
   b4768:	f000 fd9e 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b476c:	f000 fe8d 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4770:	2802      	cmp	r0, #2
   b4772:	d044      	beq.n	b47fe <loop+0x3e2>
   b4774:	2803      	cmp	r0, #3
   b4776:	d07e      	beq.n	b4876 <loop+0x45a>
   b4778:	2801      	cmp	r0, #1
   b477a:	f47f ae84 	bne.w	b4486 <loop+0x6a>
				if(LoRA_Functions::instance().composeJoinRequesttNode()) {
   b477e:	f000 f8fb 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b4782:	f000 faab 	bl	b4cdc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>
   b4786:	b3a8      	cbz	r0, b47f4 <loop+0x3d8>
   b4788:	f003 fe5a 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
							lastPublish = Time.now();
   b478c:	4f57      	ldr	r7, [pc, #348]	; (b48ec <loop+0x4d0>)
							rescueMode = false;
   b478e:	f8df 8160 	ldr.w	r8, [pc, #352]	; b48f0 <loop+0x4d4>
   b4792:	4606      	mov	r6, r0
					while (millis() - startListening < 3000) {
   b4794:	f640 39b7 	movw	r9, #2999	; 0xbb7
   b4798:	f003 fe52 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b479c:	1b80      	subs	r0, r0, r6
   b479e:	4548      	cmp	r0, r9
   b47a0:	d82b      	bhi.n	b47fa <loop+0x3de>
						if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b47a2:	f000 f8e9 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b47a6:	f000 fc1f 	bl	b4fe8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b47aa:	2800      	cmp	r0, #0
   b47ac:	d0f4      	beq.n	b4798 <loop+0x37c>
							lastPublish = Time.now();
   b47ae:	f006 fcc2 	bl	bb136 <_ZN9TimeClass3nowEv>
							rescueMode = false;
   b47b2:	f04f 0a00 	mov.w	sl, #0
							lastPublish = Time.now();
   b47b6:	17c3      	asrs	r3, r0, #31
   b47b8:	e9c7 0300 	strd	r0, r3, [r7]
							rescueMode = false;
   b47bc:	f888 a000 	strb.w	sl, [r8]
							sysStatus.set_lastConnection(Time.now());
   b47c0:	f000 fd22 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b47c4:	4605      	mov	r5, r0
   b47c6:	f006 fcb6 	bl	bb136 <_ZN9TimeClass3nowEv>
   b47ca:	4602      	mov	r2, r0
   b47cc:	17c3      	asrs	r3, r0, #31
   b47ce:	4628      	mov	r0, r5
   b47d0:	f000 ff27 	bl	b5622 <_ZN13sysStatusData18set_lastConnectionEx>
							current.set_alertTimestampNode(Time.now());
   b47d4:	f000 fd68 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b47d8:	4605      	mov	r5, r0
   b47da:	f006 fcac 	bl	bb136 <_ZN9TimeClass3nowEv>
   b47de:	4602      	mov	r2, r0
   b47e0:	17c3      	asrs	r3, r0, #31
   b47e2:	4628      	mov	r0, r5
   b47e4:	f000 ff27 	bl	b5636 <_ZN17currentStatusData22set_alertTimestampNodeEx>
							current.set_alertCodeNode(0);
   b47e8:	f000 fd5e 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b47ec:	4651      	mov	r1, sl
   b47ee:	f000 fe87 	bl	b5500 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b47f2:	e7d1      	b.n	b4798 <loop+0x37c>
				else rescueMode = true;
   b47f4:	4b3e      	ldr	r3, [pc, #248]	; (b48f0 <loop+0x4d4>)
   b47f6:	2201      	movs	r2, #1
   b47f8:	701a      	strb	r2, [r3, #0]
				state = IDLE_STATE;
   b47fa:	2302      	movs	r3, #2
   b47fc:	e642      	b.n	b4484 <loop+0x68>
				if(LoRA_Functions::instance().composeAlertReportNode()) {
   b47fe:	f000 f8bb 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b4802:	f000 fb31 	bl	b4e68 <_ZN14LoRA_Functions22composeAlertReportNodeEv>
   b4806:	2800      	cmp	r0, #0
   b4808:	d0f4      	beq.n	b47f4 <loop+0x3d8>
   b480a:	f003 fe19 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
							lastPublish = Time.now();
   b480e:	4f37      	ldr	r7, [pc, #220]	; (b48ec <loop+0x4d0>)
							rescueMode = false;
   b4810:	f8df 80dc 	ldr.w	r8, [pc, #220]	; b48f0 <loop+0x4d4>
   b4814:	4606      	mov	r6, r0
					while (millis() - startListening < 3000) {
   b4816:	f640 39b7 	movw	r9, #2999	; 0xbb7
   b481a:	f003 fe11 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b481e:	1b80      	subs	r0, r0, r6
   b4820:	4548      	cmp	r0, r9
   b4822:	d8ea      	bhi.n	b47fa <loop+0x3de>
						if (LoRA_Functions::instance().listenForLoRAMessageNode()) {
   b4824:	f000 f8a8 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b4828:	f000 fbde 	bl	b4fe8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>
   b482c:	2800      	cmp	r0, #0
   b482e:	d0f4      	beq.n	b481a <loop+0x3fe>
							lastPublish = Time.now();
   b4830:	f006 fc81 	bl	bb136 <_ZN9TimeClass3nowEv>
							rescueMode = false;
   b4834:	f04f 0a00 	mov.w	sl, #0
							lastPublish = Time.now();
   b4838:	17c3      	asrs	r3, r0, #31
   b483a:	e9c7 0300 	strd	r0, r3, [r7]
							rescueMode = false;
   b483e:	f888 a000 	strb.w	sl, [r8]
							sysStatus.set_lastConnection(Time.now());
   b4842:	f000 fce1 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4846:	4605      	mov	r5, r0
   b4848:	f006 fc75 	bl	bb136 <_ZN9TimeClass3nowEv>
   b484c:	4602      	mov	r2, r0
   b484e:	17c3      	asrs	r3, r0, #31
   b4850:	4628      	mov	r0, r5
   b4852:	f000 fee6 	bl	b5622 <_ZN13sysStatusData18set_lastConnectionEx>
							current.set_alertTimestampNode(Time.now());
   b4856:	f000 fd27 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b485a:	4605      	mov	r5, r0
   b485c:	f006 fc6b 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4860:	4602      	mov	r2, r0
   b4862:	17c3      	asrs	r3, r0, #31
   b4864:	4628      	mov	r0, r5
   b4866:	f000 fee6 	bl	b5636 <_ZN17currentStatusData22set_alertTimestampNodeEx>
							current.set_alertCodeNode(0);
   b486a:	f000 fd1d 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b486e:	4651      	mov	r1, sl
   b4870:	f000 fe46 	bl	b5500 <_ZN17currentStatusData17set_alertCodeNodeEh>
   b4874:	e7d1      	b.n	b481a <loop+0x3fe>
				static system_tick_t enteredState = millis();
   b4876:	4d1f      	ldr	r5, [pc, #124]	; (b48f4 <loop+0x4d8>)
   b4878:	4e1f      	ldr	r6, [pc, #124]	; (b48f8 <loop+0x4dc>)
   b487a:	782b      	ldrb	r3, [r5, #0]
   b487c:	f3bf 8f5b 	dmb	ish
   b4880:	f013 0f01 	tst.w	r3, #1
   b4884:	d109      	bne.n	b489a <loop+0x47e>
   b4886:	4628      	mov	r0, r5
   b4888:	f7ff fc18 	bl	b40bc <__cxa_guard_acquire>
   b488c:	b128      	cbz	r0, b489a <loop+0x47e>
   b488e:	f003 fdd7 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b4892:	6030      	str	r0, [r6, #0]
   b4894:	4628      	mov	r0, r5
   b4896:	f7ff fc16 	bl	b40c6 <__cxa_guard_release>
   b489a:	f003 fdd1 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
				if (millis() - enteredState > 30000L) {
   b489e:	6833      	ldr	r3, [r6, #0]
   b48a0:	1ac0      	subs	r0, r0, r3
   b48a2:	f247 5330 	movw	r3, #30000	; 0x7530
   b48a6:	4298      	cmp	r0, r3
   b48a8:	f67f aded 	bls.w	b4486 <loop+0x6a>
					Log.info("Resetting device");
   b48ac:	4913      	ldr	r1, [pc, #76]	; (b48fc <loop+0x4e0>)
   b48ae:	480a      	ldr	r0, [pc, #40]	; (b48d8 <loop+0x4bc>)
   b48b0:	f7ff fc5c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
					delay(2000);
   b48b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b48b8:	f004 f926 	bl	b8b08 <delay>
					ab1805.deepPowerDown();
   b48bc:	211e      	movs	r1, #30
   b48be:	4810      	ldr	r0, [pc, #64]	; (b4900 <loop+0x4e4>)
   b48c0:	f001 fd4c 	bl	b635c <_ZN6AB180513deepPowerDownEi>
   b48c4:	e5df      	b.n	b4486 <loop+0x6a>
                valid_ = false;
   b48c6:	7530      	strb	r0, [r6, #20]
                return *this;
   b48c8:	e66f      	b.n	b45aa <loop+0x18e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b48ca:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b48ce:	e66c      	b.n	b45aa <loop+0x18e>
}
   b48d0:	b00a      	add	sp, #40	; 0x28
   b48d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b48d6:	bf00      	nop
   b48d8:	2003e658 	.word	0x2003e658
   b48dc:	000bc686 	.word	0x000bc686
   b48e0:	000bc683 	.word	0x000bc683
   b48e4:	000bc73a 	.word	0x000bc73a
   b48e8:	2003df88 	.word	0x2003df88
   b48ec:	2003df80 	.word	0x2003df80
   b48f0:	2003df89 	.word	0x2003df89
   b48f4:	2003df38 	.word	0x2003df38
   b48f8:	2003df3c 	.word	0x2003df3c
   b48fc:	000bc781 	.word	0x000bc781
   b4900:	2003df44 	.word	0x2003df44
   b4904:	000bc762 	.word	0x000bc762

000b4908 <_GLOBAL__sub_I___appProductVersion>:
}
   b4908:	b508      	push	{r3, lr}
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b490a:	f006 fdbd 	bl	bb488 <spark_protocol_instance>
   b490e:	2300      	movs	r3, #0
   b4910:	461a      	mov	r2, r3
   b4912:	4619      	mov	r1, r3
   b4914:	f006 fdc8 	bl	bb4a8 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b4918:	f006 fdb6 	bl	bb488 <spark_protocol_instance>
   b491c:	2300      	movs	r3, #0
   b491e:	461a      	mov	r2, r3
   b4920:	210d      	movs	r1, #13
   b4922:	f006 fdb9 	bl	bb498 <spark_protocol_set_product_id>
        : config_(config) {
   b4926:	4b0c      	ldr	r3, [pc, #48]	; (b4958 <_GLOBAL__sub_I___appProductVersion+0x50>)
   b4928:	1d1a      	adds	r2, r3, #4
   b492a:	601a      	str	r2, [r3, #0]
        config_.size = sizeof(hal_sleep_config_t);
   b492c:	4a0b      	ldr	r2, [pc, #44]	; (b495c <_GLOBAL__sub_I___appProductVersion+0x54>)
   b492e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b4930:	2200      	movs	r2, #0
   b4932:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b4936:	611a      	str	r2, [r3, #16]
   b4938:	2201      	movs	r2, #1
   b493a:	751a      	strb	r2, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b493c:	f006 fe7c 	bl	bb638 <_Z19__fetch_global_Wirev>
   b4940:	2269      	movs	r2, #105	; 0x69
   b4942:	4601      	mov	r1, r0
   b4944:	4806      	ldr	r0, [pc, #24]	; (b4960 <_GLOBAL__sub_I___appProductVersion+0x58>)
   b4946:	f001 fab1 	bl	b5eac <_ZN6AB1805C1ER7TwoWireh>
time_t lastPublish = Time.now();
   b494a:	f006 fbf4 	bl	bb136 <_ZN9TimeClass3nowEv>
   b494e:	4b05      	ldr	r3, [pc, #20]	; (b4964 <_GLOBAL__sub_I___appProductVersion+0x5c>)
   b4950:	17c2      	asrs	r2, r0, #31
   b4952:	e9c3 0200 	strd	r0, r2, [r3]
}
   b4956:	bd08      	pop	{r3, pc}
   b4958:	2003df64 	.word	0x2003df64
   b495c:	00030010 	.word	0x00030010
   b4960:	2003df44 	.word	0x2003df44
   b4964:	2003df80 	.word	0x2003df80

000b4968 <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b4968:	4770      	bx	lr

000b496a <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b496a:	b510      	push	{r4, lr}
}
   b496c:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b496e:	4604      	mov	r4, r0
}
   b4970:	f7ff fb95 	bl	b409e <_ZdlPvj>
   b4974:	4620      	mov	r0, r4
   b4976:	bd10      	pop	{r4, pc}

000b4978 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4978:	b510      	push	{r4, lr}
    if (!_instance) {
   b497a:	4c06      	ldr	r4, [pc, #24]	; (b4994 <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b497c:	6823      	ldr	r3, [r4, #0]
   b497e:	b933      	cbnz	r3, b498e <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4980:	2004      	movs	r0, #4
   b4982:	f7ff fb88 	bl	b4096 <_Znwj>
   b4986:	b108      	cbz	r0, b498c <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4988:	4b03      	ldr	r3, [pc, #12]	; (b4998 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b498a:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b498c:	6020      	str	r0, [r4, #0]
}
   b498e:	6820      	ldr	r0, [r4, #0]
   b4990:	bd10      	pop	{r4, pc}
   b4992:	bf00      	nop
   b4994:	2003df90 	.word	0x2003df90
   b4998:	000bcb60 	.word	0x000bcb60

000b499c <_ZN14LoRA_Functions5setupEb>:
// max message length to prevent wierd crashes
// #define RH_MESH_MAX_MESSAGE_LEN 50
uint8_t buf[RH_MESH_MAX_MESSAGE_LEN];               // Related to max message size - RadioHead example note: dont put this on the stack:


bool LoRA_Functions::setup(bool gatewayID) {
   b499c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    // Set up the Radio Module
	if (!manager.init()) {
   b499e:	4830      	ldr	r0, [pc, #192]	; (b4a60 <_ZN14LoRA_Functions5setupEb+0xc4>)
bool LoRA_Functions::setup(bool gatewayID) {
   b49a0:	460d      	mov	r5, r1
	if (!manager.init()) {
   b49a2:	f002 fec8 	bl	b7736 <_ZN8RHRouter4initEv>
   b49a6:	4604      	mov	r4, r0
   b49a8:	b930      	cbnz	r0, b49b8 <_ZN14LoRA_Functions5setupEb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b49aa:	492e      	ldr	r1, [pc, #184]	; (b4a64 <_ZN14LoRA_Functions5setupEb+0xc8>)
   b49ac:	482e      	ldr	r0, [pc, #184]	; (b4a68 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b49ae:	f7ff fbdd 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>

	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
	return true;
}
   b49b2:	4620      	mov	r0, r4
   b49b4:	b004      	add	sp, #16
   b49b6:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b49b8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; b4a6c <_ZN14LoRA_Functions5setupEb+0xd0>
   b49bc:	482c      	ldr	r0, [pc, #176]	; (b4a70 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b49be:	f003 f9b3 	bl	b7d28 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b49c2:	2200      	movs	r2, #0
   b49c4:	2117      	movs	r1, #23
   b49c6:	482a      	ldr	r0, [pc, #168]	; (b4a70 <_ZN14LoRA_Functions5setupEb+0xd4>)
   b49c8:	f003 fb28 	bl	b801c <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.get_structuresVersion() == 128)) {    	// This will be our indication that the deviceID and nodeID has not yet been set
   b49cc:	f000 fc1c 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b49d0:	f000 fd47 	bl	b5462 <_ZNK13sysStatusData21get_structuresVersionEv>
   b49d4:	2880      	cmp	r0, #128	; 0x80
   b49d6:	d022      	beq.n	b4a1e <_ZN14LoRA_Functions5setupEb+0x82>
		randomSeed(sysStatus.get_lastConnection());			// 32-bit number for seed
   b49d8:	f000 fc16 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b49dc:	f000 fdf3 	bl	b55c6 <_ZNK13sysStatusData18get_lastConnectionEv>
   b49e0:	f005 ffe5 	bl	ba9ae <_Z10randomSeedj>
		sysStatus.set_deviceID(random(1,65535));			// 16-bit number for deviceID
   b49e4:	f000 fc10 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b49e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b49ec:	4606      	mov	r6, r0
   b49ee:	2001      	movs	r0, #1
   b49f0:	f005 ffd3 	bl	ba99a <_Z6randomii>
   b49f4:	b281      	uxth	r1, r0
   b49f6:	4630      	mov	r0, r6
   b49f8:	f000 fd03 	bl	b5402 <_ZN13sysStatusData12set_deviceIDEt>
		if (!gatewayID) sysStatus.set_nodeNumber(random(10,255));		// Random number in - unconfigured - range will trigger a Join request
   b49fc:	bb65      	cbnz	r5, b4a58 <_ZN14LoRA_Functions5setupEb+0xbc>
   b49fe:	f000 fc03 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4a02:	21ff      	movs	r1, #255	; 0xff
   b4a04:	4605      	mov	r5, r0
   b4a06:	200a      	movs	r0, #10
   b4a08:	f005 ffc7 	bl	ba99a <_Z6randomii>
   b4a0c:	b281      	uxth	r1, r0
   b4a0e:	4628      	mov	r0, r5
		else sysStatus.set_nodeNumber(0);
   b4a10:	f000 fcfd 	bl	b540e <_ZN13sysStatusData14set_nodeNumberEt>
		sysStatus.set_structuresVersion(128);			// Set the structure to the magic number so we can have a stable deviceID
   b4a14:	f000 fbf8 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4a18:	2180      	movs	r1, #128	; 0x80
   b4a1a:	f000 fd59 	bl	b54d0 <_ZN13sysStatusData21set_structuresVersionEh>
	manager.setThisAddress(sysStatus.get_nodeNumber());	// Assign the NodeNumber to this node
   b4a1e:	f000 fbf3 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4a22:	f000 fcb7 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4a26:	b2c1      	uxtb	r1, r0
   b4a28:	4812      	ldr	r0, [pc, #72]	; (b4a74 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4a2a:	f002 f982 	bl	b6d32 <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", manager.thisAddress(), sysStatus.get_deviceID(), sysStatus.get_structuresVersion());
   b4a2e:	4811      	ldr	r0, [pc, #68]	; (b4a74 <_ZN14LoRA_Functions5setupEb+0xd8>)
   b4a30:	f002 f965 	bl	b6cfe <_ZN10RHDatagram11thisAddressEv>
   b4a34:	9003      	str	r0, [sp, #12]
   b4a36:	f000 fbe7 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4a3a:	f000 fca6 	bl	b538a <_ZNK13sysStatusData12get_deviceIDEv>
   b4a3e:	9002      	str	r0, [sp, #8]
   b4a40:	f000 fbe2 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4a44:	f000 fd0d 	bl	b5462 <_ZNK13sysStatusData21get_structuresVersionEv>
   b4a48:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b4a4c:	9000      	str	r0, [sp, #0]
   b4a4e:	490a      	ldr	r1, [pc, #40]	; (b4a78 <_ZN14LoRA_Functions5setupEb+0xdc>)
   b4a50:	4805      	ldr	r0, [pc, #20]	; (b4a68 <_ZN14LoRA_Functions5setupEb+0xcc>)
   b4a52:	f7ff fb8b 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	return true;
   b4a56:	e7ac      	b.n	b49b2 <_ZN14LoRA_Functions5setupEb+0x16>
		else sysStatus.set_nodeNumber(0);
   b4a58:	f000 fbd6 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4a5c:	2100      	movs	r1, #0
   b4a5e:	e7d7      	b.n	b4a10 <_ZN14LoRA_Functions5setupEb+0x74>
   b4a60:	2003e1cc 	.word	0x2003e1cc
   b4a64:	000bc7bb 	.word	0x000bc7bb
   b4a68:	2003e658 	.word	0x2003e658
   b4a6c:	4464c000 	.word	0x4464c000
   b4a70:	2003e09c 	.word	0x2003e09c
   b4a74:	2003e1d0 	.word	0x2003e1d0
   b4a78:	000bc7c7 	.word	0x000bc7c7

000b4a7c <_ZN14LoRA_Functions21composeDataReportNodeEv>:
	}
	return false;
}


bool LoRA_Functions::composeDataReportNode() {
   b4a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	static int attempts = 0;
	static int success = 0;
	static uint8_t msgCnt = 0;

	Log.info("Sending data report to Gateway");
   b4a80:	4964      	ldr	r1, [pc, #400]	; (b4c14 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x198>)
   b4a82:	4865      	ldr	r0, [pc, #404]	; (b4c18 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x19c>)
	digitalWrite(BLUE_LED,HIGH);
	attempts++;
   b4a84:	4e65      	ldr	r6, [pc, #404]	; (b4c1c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1a0>)

	buf[0] = highByte(sysStatus.get_deviceID());					// Set for device
   b4a86:	4c66      	ldr	r4, [pc, #408]	; (b4c20 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1a4>)
   b4a88:	4f66      	ldr	r7, [pc, #408]	; (b4c24 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1a8>)
	Log.info("Sending data report to Gateway");
   b4a8a:	f7ff fb6f 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b4a8e:	4b66      	ldr	r3, [pc, #408]	; (b4c28 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1ac>)
   b4a90:	f8b3 a000 	ldrh.w	sl, [r3]
   b4a94:	2101      	movs	r1, #1
   b4a96:	4650      	mov	r0, sl
   b4a98:	f006 fd5d 	bl	bb556 <digitalWrite>
	attempts++;
   b4a9c:	6833      	ldr	r3, [r6, #0]
   b4a9e:	3301      	adds	r3, #1
   b4aa0:	6033      	str	r3, [r6, #0]
	buf[0] = highByte(sysStatus.get_deviceID());					// Set for device
   b4aa2:	f000 fbb1 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4aa6:	f000 fc70 	bl	b538a <_ZNK13sysStatusData12get_deviceIDEv>
   b4aaa:	0a00      	lsrs	r0, r0, #8
   b4aac:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4aae:	f000 fbab 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4ab2:	f000 fc6a 	bl	b538a <_ZNK13sysStatusData12get_deviceIDEv>
   b4ab6:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());				// NodeID for verification
   b4ab8:	f000 fba6 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4abc:	f000 fc6a 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4ac0:	0a00      	lsrs	r0, r0, #8
   b4ac2:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());				
   b4ac4:	f000 fba0 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4ac8:	f000 fc64 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
	buf[4] = 1;						// Set for code release - fix later
   b4acc:	2501      	movs	r5, #1
	buf[3] = lowByte(sysStatus.get_nodeNumber());				
   b4ace:	70e0      	strb	r0, [r4, #3]
	buf[4] = 1;						// Set for code release - fix later
   b4ad0:	7125      	strb	r5, [r4, #4]
	buf[5] = highByte(current.get_hourlyCount());
   b4ad2:	f000 fbe9 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4ad6:	f000 fc6c 	bl	b53b2 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4ada:	0a00      	lsrs	r0, r0, #8
   b4adc:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(current.get_hourlyCount()); 
   b4ade:	f000 fbe3 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4ae2:	f000 fc66 	bl	b53b2 <_ZNK17currentStatusData15get_hourlyCountEv>
   b4ae6:	71a0      	strb	r0, [r4, #6]
	buf[7] = highByte(current.get_dailyCount());
   b4ae8:	f000 fbde 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4aec:	f000 fc66 	bl	b53bc <_ZNK17currentStatusData14get_dailyCountEv>
   b4af0:	0a00      	lsrs	r0, r0, #8
   b4af2:	71e0      	strb	r0, [r4, #7]
	buf[8] = lowByte(current.get_dailyCount()); 
   b4af4:	f000 fbd8 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4af8:	f000 fc60 	bl	b53bc <_ZNK17currentStatusData14get_dailyCountEv>
   b4afc:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_internalTempC();
   b4afe:	f000 fbd3 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4b02:	f000 fcb8 	bl	b5476 <_ZNK17currentStatusData17get_internalTempCEv>
   b4b06:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_stateOfCharge();
   b4b08:	f000 fbce 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4b0c:	f000 fbe8 	bl	b52e0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b4b10:	ec51 0b10 	vmov	r0, r1, d0
   b4b14:	f007 fab4 	bl	bc080 <__aeabi_d2uiz>
   b4b18:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_batteryState();	
   b4b1a:	f000 fbc5 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4b1e:	f000 fcaf 	bl	b5480 <_ZNK17currentStatusData16get_batteryStateEv>
   b4b22:	72e0      	strb	r0, [r4, #11]
	buf[12] = sysStatus.get_resetCount();
   b4b24:	f000 fb70 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4b28:	f000 fca0 	bl	b546c <_ZNK13sysStatusData14get_resetCountEv>
	buf[13] = 1;				// reserved for later
   b4b2c:	7365      	strb	r5, [r4, #13]
	buf[12] = sysStatus.get_resetCount();
   b4b2e:	7320      	strb	r0, [r4, #12]
	buf[14] = highByte(driver.lastRssi());
   b4b30:	483e      	ldr	r0, [pc, #248]	; (b4c2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1b0>)
   b4b32:	f002 f97c 	bl	b6e2e <_ZN15RHGenericDriver8lastRssiEv>
   b4b36:	1200      	asrs	r0, r0, #8
   b4b38:	73a0      	strb	r0, [r4, #14]
	buf[15] = lowByte(driver.lastRssi()); 
   b4b3a:	483c      	ldr	r0, [pc, #240]	; (b4c2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1b0>)
   b4b3c:	f002 f977 	bl	b6e2e <_ZN15RHGenericDriver8lastRssiEv>
	buf[16] = msgCnt++;
   b4b40:	4b3b      	ldr	r3, [pc, #236]	; (b4c30 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1b4>)
	buf[15] = lowByte(driver.lastRssi()); 
   b4b42:	73e0      	strb	r0, [r4, #15]
	buf[16] = msgCnt++;
   b4b44:	781a      	ldrb	r2, [r3, #0]
   b4b46:	7422      	strb	r2, [r4, #16]
   b4b48:	1951      	adds	r1, r2, r5
   b4b4a:	7019      	strb	r1, [r3, #0]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message number %d", buf[16]);
   b4b4c:	4832      	ldr	r0, [pc, #200]	; (b4c18 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x19c>)
   b4b4e:	4939      	ldr	r1, [pc, #228]	; (b4c34 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1b8>)
   b4b50:	f7ff fb0c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT) == RH_ROUTER_ERROR_NONE) {
   b4b54:	2303      	movs	r3, #3
   b4b56:	9300      	str	r3, [sp, #0]
   b4b58:	4621      	mov	r1, r4
   b4b5a:	4837      	ldr	r0, [pc, #220]	; (b4c38 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1bc>)
   b4b5c:	2300      	movs	r3, #0
   b4b5e:	2211      	movs	r2, #17
   b4b60:	f002 fb80 	bl	b7264 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4b64:	4604      	mov	r4, r0
   b4b66:	bb60      	cbnz	r0, b4bc2 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x146>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		success++;
   b4b68:	683b      	ldr	r3, [r7, #0]
   b4b6a:	442b      	add	r3, r5
   b4b6c:	603b      	str	r3, [r7, #0]
		Log.info("Node %d - Data report send to gateway %d successfully - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4b6e:	f000 fb4b 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4b72:	f000 fc0f 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4b76:	4683      	mov	fp, r0
   b4b78:	6838      	ldr	r0, [r7, #0]
   b4b7a:	f006 ff3f 	bl	bb9fc <__aeabi_i2d>
   b4b7e:	4680      	mov	r8, r0
   b4b80:	6830      	ldr	r0, [r6, #0]
   b4b82:	4689      	mov	r9, r1
   b4b84:	f006 ff3a 	bl	bb9fc <__aeabi_i2d>
   b4b88:	4602      	mov	r2, r0
   b4b8a:	460b      	mov	r3, r1
   b4b8c:	4640      	mov	r0, r8
   b4b8e:	4649      	mov	r1, r9
   b4b90:	f007 f8c8 	bl	bbd24 <__aeabi_ddiv>
   b4b94:	4b29      	ldr	r3, [pc, #164]	; (b4c3c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c0>)
   b4b96:	2200      	movs	r2, #0
   b4b98:	f006 ff9a 	bl	bbad0 <__aeabi_dmul>
   b4b9c:	4623      	mov	r3, r4
   b4b9e:	e9cd 0100 	strd	r0, r1, [sp]
   b4ba2:	465a      	mov	r2, fp
   b4ba4:	4926      	ldr	r1, [pc, #152]	; (b4c40 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c4>)
   b4ba6:	481c      	ldr	r0, [pc, #112]	; (b4c18 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x19c>)
   b4ba8:	f7ff fae0 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4bac:	4621      	mov	r1, r4
   b4bae:	4650      	mov	r0, sl
   b4bb0:	f006 fcd1 	bl	bb556 <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4bb4:	481d      	ldr	r0, [pc, #116]	; (b4c2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1b0>)
   b4bb6:	f003 f820 	bl	b7bfa <_ZN7RH_RF955sleepEv>
		return true;
   b4bba:	4628      	mov	r0, r5
		Log.info("Node %d - Data report send to gateway %d failed  - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
		digitalWrite(BLUE_LED, LOW);
		driver.sleep();                             // Here is where we will power down the LoRA radio module
		return false;
	}
}
   b4bbc:	b003      	add	sp, #12
   b4bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Log.info("Node %d - Data report send to gateway %d failed  - success rate %4.2f", sysStatus.get_nodeNumber(), GATEWAY_ADDRESS, ((success * 1.0)/ attempts)*100.0);
   b4bc2:	f000 fb21 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4bc6:	f000 fbe5 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4bca:	4604      	mov	r4, r0
   b4bcc:	6838      	ldr	r0, [r7, #0]
   b4bce:	f006 ff15 	bl	bb9fc <__aeabi_i2d>
   b4bd2:	4680      	mov	r8, r0
   b4bd4:	6830      	ldr	r0, [r6, #0]
   b4bd6:	4689      	mov	r9, r1
   b4bd8:	f006 ff10 	bl	bb9fc <__aeabi_i2d>
   b4bdc:	4602      	mov	r2, r0
   b4bde:	460b      	mov	r3, r1
   b4be0:	4640      	mov	r0, r8
   b4be2:	4649      	mov	r1, r9
   b4be4:	f007 f89e 	bl	bbd24 <__aeabi_ddiv>
   b4be8:	4b14      	ldr	r3, [pc, #80]	; (b4c3c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c0>)
   b4bea:	2200      	movs	r2, #0
   b4bec:	f006 ff70 	bl	bbad0 <__aeabi_dmul>
   b4bf0:	2300      	movs	r3, #0
   b4bf2:	e9cd 0100 	strd	r0, r1, [sp]
   b4bf6:	4622      	mov	r2, r4
   b4bf8:	4912      	ldr	r1, [pc, #72]	; (b4c44 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1c8>)
   b4bfa:	4807      	ldr	r0, [pc, #28]	; (b4c18 <_ZN14LoRA_Functions21composeDataReportNodeEv+0x19c>)
   b4bfc:	f7ff fab6 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4c00:	2100      	movs	r1, #0
   b4c02:	4650      	mov	r0, sl
   b4c04:	f006 fca7 	bl	bb556 <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4c08:	4808      	ldr	r0, [pc, #32]	; (b4c2c <_ZN14LoRA_Functions21composeDataReportNodeEv+0x1b0>)
   b4c0a:	f002 fff6 	bl	b7bfa <_ZN7RH_RF955sleepEv>
		return false;
   b4c0e:	2000      	movs	r0, #0
   b4c10:	e7d4      	b.n	b4bbc <_ZN14LoRA_Functions21composeDataReportNodeEv+0x140>
   b4c12:	bf00      	nop
   b4c14:	000bc81e 	.word	0x000bc81e
   b4c18:	2003e658 	.word	0x2003e658
   b4c1c:	2003df9c 	.word	0x2003df9c
   b4c20:	2003dfa0 	.word	0x2003dfa0
   b4c24:	2003df98 	.word	0x2003df98
   b4c28:	000bcc34 	.word	0x000bcc34
   b4c2c:	2003e09c 	.word	0x2003e09c
   b4c30:	2003df94 	.word	0x2003df94
   b4c34:	000bc83d 	.word	0x000bc83d
   b4c38:	2003e1cc 	.word	0x2003e1cc
   b4c3c:	40590000 	.word	0x40590000
   b4c40:	000bc857 	.word	0x000bc857
   b4c44:	000bc8a2 	.word	0x000bc8a2

000b4c48 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentDataReportNode() {
   b4c48:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c4a:	b08b      	sub	sp, #44	; 0x2c

	Log.info("Node %d - Receiving acknowledgment - Data Report", sysStatus.get_nodeNumber());
   b4c4c:	f000 fadc 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4c50:	f000 fba0 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4c54:	4e1d      	ldr	r6, [pc, #116]	; (b4ccc <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x84>)
		
	sysStatus.set_nextReportSeconds((buf[7] << 8) | buf[8]);
   b4c56:	4c1e      	ldr	r4, [pc, #120]	; (b4cd0 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x88>)
	Log.info("Node %d - Receiving acknowledgment - Data Report", sysStatus.get_nodeNumber());
   b4c58:	491e      	ldr	r1, [pc, #120]	; (b4cd4 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x8c>)
   b4c5a:	4602      	mov	r2, r0
   b4c5c:	4630      	mov	r0, r6
   b4c5e:	f7ff fa85 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	sysStatus.set_nextReportSeconds((buf[7] << 8) | buf[8]);
   b4c62:	f000 fad1 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4c66:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b4c6a:	ba49      	rev16	r1, r1
   b4c6c:	b289      	uxth	r1, r1
   b4c6e:	f000 fbd4 	bl	b541a <_ZN13sysStatusData21set_nextReportSecondsEt>
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   b4c72:	f8d4 4001 	ldr.w	r4, [r4, #1]
	Time.setTime(newTime);  // Set time based on response from gateway
   b4c76:	2300      	movs	r3, #0
   b4c78:	ba24      	rev	r4, r4
   b4c7a:	4619      	mov	r1, r3
   b4c7c:	4620      	mov	r0, r4
   b4c7e:	f006 f941 	bl	baf04 <_ZN9TimeClass7setTimeEx>
	Log.info("Time set to %s and next report is in %u seconds at %s", Time.timeStr(newTime).c_str(),sysStatus.get_nextReportSeconds(), Time.timeStr(newTime + sysStatus.get_nextReportSeconds()).c_str());
   b4c82:	4622      	mov	r2, r4
   b4c84:	2300      	movs	r3, #0
   b4c86:	a802      	add	r0, sp, #8
   b4c88:	f006 f950 	bl	baf2c <_ZN9TimeClass7timeStrEx>
   b4c8c:	9f02      	ldr	r7, [sp, #8]
   b4c8e:	f000 fabb 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4c92:	f000 fb84 	bl	b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4c96:	4605      	mov	r5, r0
   b4c98:	f000 fab6 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4c9c:	f000 fb7f 	bl	b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4ca0:	2300      	movs	r3, #0
   b4ca2:	1902      	adds	r2, r0, r4
   b4ca4:	a806      	add	r0, sp, #24
   b4ca6:	f006 f941 	bl	baf2c <_ZN9TimeClass7timeStrEx>
   b4caa:	9b06      	ldr	r3, [sp, #24]
   b4cac:	490a      	ldr	r1, [pc, #40]	; (b4cd8 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv+0x90>)
   b4cae:	9300      	str	r3, [sp, #0]
   b4cb0:	463a      	mov	r2, r7
   b4cb2:	462b      	mov	r3, r5
   b4cb4:	4630      	mov	r0, r6
   b4cb6:	f7ff fa59 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4cba:	a806      	add	r0, sp, #24
   b4cbc:	f005 ff46 	bl	bab4c <_ZN6StringD1Ev>
   b4cc0:	a802      	add	r0, sp, #8
   b4cc2:	f005 ff43 	bl	bab4c <_ZN6StringD1Ev>
	return true;
}
   b4cc6:	2001      	movs	r0, #1
   b4cc8:	b00b      	add	sp, #44	; 0x2c
   b4cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4ccc:	2003e658 	.word	0x2003e658
   b4cd0:	2003dfa0 	.word	0x2003dfa0
   b4cd4:	000bc8e8 	.word	0x000bc8e8
   b4cd8:	000bc919 	.word	0x000bc919

000b4cdc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv>:

bool LoRA_Functions::composeJoinRequesttNode() {
   b4cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Sending data report to Gateway");
   b4cde:	4930      	ldr	r1, [pc, #192]	; (b4da0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc4>)
   b4ce0:	4830      	ldr	r0, [pc, #192]	; (b4da4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.get_deviceID());                      // deviceID is unique to the device
   b4ce2:	4c31      	ldr	r4, [pc, #196]	; (b4da8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xcc>)
	Log.info("Sending data report to Gateway");
   b4ce4:	f7ff fa42 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b4ce8:	4b30      	ldr	r3, [pc, #192]	; (b4dac <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd0>)
   b4cea:	881e      	ldrh	r6, [r3, #0]
   b4cec:	2101      	movs	r1, #1
   b4cee:	4630      	mov	r0, r6
   b4cf0:	f006 fc31 	bl	bb556 <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());                      // deviceID is unique to the device
   b4cf4:	f000 fa88 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4cf8:	f000 fb47 	bl	b538a <_ZNK13sysStatusData12get_deviceIDEv>
   b4cfc:	0a00      	lsrs	r0, r0, #8
   b4cfe:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4d00:	f000 fa82 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4d04:	f000 fb41 	bl	b538a <_ZNK13sysStatusData12get_deviceIDEv>
   b4d08:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());                  			// Node Number
   b4d0a:	f000 fa7d 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4d0e:	f000 fb41 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d12:	0a00      	lsrs	r0, r0, #8
   b4d14:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());
   b4d16:	f000 fa77 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4d1a:	f000 fb3b 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d1e:	70e0      	strb	r0, [r4, #3]
	buf[4] = sysStatus.get_structuresVersion();						// Needs to equal 128
   b4d20:	f000 fa72 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4d24:	f000 fb9d 	bl	b5462 <_ZNK13sysStatusData21get_structuresVersionEv>
   b4d28:	7120      	strb	r0, [r4, #4]
	buf[5] = highByte(driver.lastRssi());				        // Signal strength
   b4d2a:	4821      	ldr	r0, [pc, #132]	; (b4db0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b4d2c:	f002 f87f 	bl	b6e2e <_ZN15RHGenericDriver8lastRssiEv>
   b4d30:	1200      	asrs	r0, r0, #8
   b4d32:	7160      	strb	r0, [r4, #5]
	buf[6] = lowByte(driver.lastRssi()); 
   b4d34:	481e      	ldr	r0, [pc, #120]	; (b4db0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b4d36:	f002 f87a 	bl	b6e2e <_ZN15RHGenericDriver8lastRssiEv>
   b4d3a:	71a0      	strb	r0, [r4, #6]

	
	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4d3c:	f000 fa64 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4d40:	f000 fb28 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4d44:	491b      	ldr	r1, [pc, #108]	; (b4db4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd8>)
   b4d46:	4a1c      	ldr	r2, [pc, #112]	; (b4db8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xdc>)
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4d48:	2501      	movs	r5, #1
	Log.info("Sending join request because %s",(sysStatus.get_nodeNumber() < 10) ? "a NodeNumber is needed" : "the clock is not set");
   b4d4a:	2809      	cmp	r0, #9
   b4d4c:	bf98      	it	ls
   b4d4e:	460a      	movls	r2, r1
   b4d50:	491a      	ldr	r1, [pc, #104]	; (b4dbc <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe0>)
   b4d52:	4814      	ldr	r0, [pc, #80]	; (b4da4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4d54:	f7ff fa0a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 7, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   b4d58:	4621      	mov	r1, r4
   b4d5a:	4819      	ldr	r0, [pc, #100]	; (b4dc0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe4>)
   b4d5c:	9500      	str	r5, [sp, #0]
   b4d5e:	2300      	movs	r3, #0
   b4d60:	2207      	movs	r2, #7
   b4d62:	f002 fa7f 	bl	b7264 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4d66:	4604      	mov	r4, r0
   b4d68:	b968      	cbnz	r0, b4d86 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xaa>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   b4d6a:	4916      	ldr	r1, [pc, #88]	; (b4dc4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xe8>)
   b4d6c:	480d      	ldr	r0, [pc, #52]	; (b4da4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4d6e:	f7ff f9fd 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4d72:	4621      	mov	r1, r4
   b4d74:	4630      	mov	r0, r6
   b4d76:	f006 fbee 	bl	bb556 <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4d7a:	480d      	ldr	r0, [pc, #52]	; (b4db0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b4d7c:	f002 ff3d 	bl	b7bfa <_ZN7RH_RF955sleepEv>
		return true;
   b4d80:	4628      	mov	r0, r5
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		driver.sleep();                             // Here is where we will power down the LoRA radio module
		return false;
	}
}
   b4d82:	b002      	add	sp, #8
   b4d84:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   b4d86:	4910      	ldr	r1, [pc, #64]	; (b4dc8 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xec>)
   b4d88:	4806      	ldr	r0, [pc, #24]	; (b4da4 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xc8>)
   b4d8a:	f7ff f9ef 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4d8e:	2100      	movs	r1, #0
   b4d90:	4630      	mov	r0, r6
   b4d92:	f006 fbe0 	bl	bb556 <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4d96:	4806      	ldr	r0, [pc, #24]	; (b4db0 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xd4>)
   b4d98:	f002 ff2f 	bl	b7bfa <_ZN7RH_RF955sleepEv>
		return false;
   b4d9c:	2000      	movs	r0, #0
   b4d9e:	e7f0      	b.n	b4d82 <_ZN14LoRA_Functions23composeJoinRequesttNodeEv+0xa6>
   b4da0:	000bc81e 	.word	0x000bc81e
   b4da4:	2003e658 	.word	0x2003e658
   b4da8:	2003dfa0 	.word	0x2003dfa0
   b4dac:	000bcc34 	.word	0x000bcc34
   b4db0:	2003e09c 	.word	0x2003e09c
   b4db4:	000bc94f 	.word	0x000bc94f
   b4db8:	000bc966 	.word	0x000bc966
   b4dbc:	000bc97b 	.word	0x000bc97b
   b4dc0:	2003e1cc 	.word	0x2003e1cc
   b4dc4:	000bc99b 	.word	0x000bc99b
   b4dc8:	000bc9c4 	.word	0x000bc9c4

000b4dcc <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>:

bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b4dcc:	b510      	push	{r4, lr}
	Log.info("Receiving acknowledgment - Join Request");
   b4dce:	4922      	ldr	r1, [pc, #136]	; (b4e58 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x8c>)
   b4dd0:	4822      	ldr	r0, [pc, #136]	; (b4e5c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x90>)
   b4dd2:	4c23      	ldr	r4, [pc, #140]	; (b4e60 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x94>)
bool LoRA_Functions::receiveAcknowledmentJoinRequestNode() {
   b4dd4:	b088      	sub	sp, #32
	Log.info("Receiving acknowledgment - Join Request");
   b4dd6:	f7ff f9c9 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>

	if (sysStatus.get_nodeNumber() < 10 && buf[0] == 128) sysStatus.set_nodeNumber((buf[5] << 8 | buf[6]));
   b4dda:	f000 fa15 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4dde:	f000 fad9 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4de2:	2809      	cmp	r0, #9
   b4de4:	d80a      	bhi.n	b4dfc <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x30>
   b4de6:	7823      	ldrb	r3, [r4, #0]
   b4de8:	2b80      	cmp	r3, #128	; 0x80
   b4dea:	d107      	bne.n	b4dfc <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x30>
   b4dec:	f000 fa0c 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4df0:	f8b4 1005 	ldrh.w	r1, [r4, #5]
   b4df4:	ba49      	rev16	r1, r1
   b4df6:	b289      	uxth	r1, r1
   b4df8:	f000 fb09 	bl	b540e <_ZN13sysStatusData14set_nodeNumberEt>
	sysStatus.set_nextReportSeconds((buf[7] << 8) | buf[8]);
   b4dfc:	f000 fa04 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4e00:	f8b4 1007 	ldrh.w	r1, [r4, #7]
   b4e04:	ba49      	rev16	r1, r1
   b4e06:	b289      	uxth	r1, r1
   b4e08:	f000 fb07 	bl	b541a <_ZN13sysStatusData21set_nextReportSecondsEt>
	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   b4e0c:	f8d4 2001 	ldr.w	r2, [r4, #1]
   b4e10:	ba12      	rev	r2, r2
	Time.setTime(newTime);  // Set time based on response from gateway
   b4e12:	2100      	movs	r1, #0
   b4e14:	4610      	mov	r0, r2
   b4e16:	9202      	str	r2, [sp, #8]
   b4e18:	f006 f874 	bl	baf04 <_ZN9TimeClass7setTimeEx>
	Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.get_nodeNumber(), sysStatus.get_nextReportSeconds());
   b4e1c:	2300      	movs	r3, #0
   b4e1e:	9a02      	ldr	r2, [sp, #8]
   b4e20:	a804      	add	r0, sp, #16
   b4e22:	f006 f883 	bl	baf2c <_ZN9TimeClass7timeStrEx>
   b4e26:	9a04      	ldr	r2, [sp, #16]
   b4e28:	9203      	str	r2, [sp, #12]
   b4e2a:	f000 f9ed 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4e2e:	f000 fab1 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e32:	9002      	str	r0, [sp, #8]
   b4e34:	f000 f9e8 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4e38:	f000 fab1 	bl	b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4e3c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b4e40:	4908      	ldr	r1, [pc, #32]	; (b4e64 <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x98>)
   b4e42:	9000      	str	r0, [sp, #0]
   b4e44:	4805      	ldr	r0, [pc, #20]	; (b4e5c <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv+0x90>)
   b4e46:	f7ff f991 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4e4a:	a804      	add	r0, sp, #16
   b4e4c:	f005 fe7e 	bl	bab4c <_ZN6StringD1Ev>
	return true;
}
   b4e50:	2001      	movs	r0, #1
   b4e52:	b008      	add	sp, #32
   b4e54:	bd10      	pop	{r4, pc}
   b4e56:	bf00      	nop
   b4e58:	000bc9e7 	.word	0x000bc9e7
   b4e5c:	2003e658 	.word	0x2003e658
   b4e60:	2003dfa0 	.word	0x2003dfa0
   b4e64:	000bca0f 	.word	0x000bca0f

000b4e68 <_ZN14LoRA_Functions22composeAlertReportNodeEv>:

bool LoRA_Functions::composeAlertReportNode() {
   b4e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Node - Sending Alert Report to Gateway");
   b4e6a:	4937      	ldr	r1, [pc, #220]	; (b4f48 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe0>)
   b4e6c:	4837      	ldr	r0, [pc, #220]	; (b4f4c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe4>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.get_deviceID());       // deviceID is unique to the device
   b4e6e:	4c38      	ldr	r4, [pc, #224]	; (b4f50 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe8>)
	Log.info("Node - Sending Alert Report to Gateway");
   b4e70:	f7ff f97c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   b4e74:	4b37      	ldr	r3, [pc, #220]	; (b4f54 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xec>)
   b4e76:	881e      	ldrh	r6, [r3, #0]
   b4e78:	2101      	movs	r1, #1
   b4e7a:	4630      	mov	r0, r6
   b4e7c:	f006 fb6b 	bl	bb556 <digitalWrite>
	buf[0] = highByte(sysStatus.get_deviceID());       // deviceID is unique to the device
   b4e80:	f000 f9c2 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4e84:	f000 fa81 	bl	b538a <_ZNK13sysStatusData12get_deviceIDEv>
   b4e88:	0a00      	lsrs	r0, r0, #8
   b4e8a:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_deviceID());
   b4e8c:	f000 f9bc 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4e90:	f000 fa7b 	bl	b538a <_ZNK13sysStatusData12get_deviceIDEv>
   b4e94:	7060      	strb	r0, [r4, #1]
	buf[2] = highByte(sysStatus.get_nodeNumber());     // Node Number
   b4e96:	f000 f9b7 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4e9a:	f000 fa7b 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4e9e:	0a00      	lsrs	r0, r0, #8
   b4ea0:	70a0      	strb	r0, [r4, #2]
	buf[3] = lowByte(sysStatus.get_nodeNumber());
   b4ea2:	f000 f9b1 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4ea6:	f000 fa75 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4eaa:	70e0      	strb	r0, [r4, #3]
	buf[4] = highByte(current.get_alertCodeNode());   // Node's Alert Code
   b4eac:	f000 f9fc 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4eb0:	2500      	movs	r5, #0
   b4eb2:	f000 faea 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4eb6:	7125      	strb	r5, [r4, #4]
	buf[5] = ((uint8_t) ((Time.now()) >> 24));  // Fourth byte - current time
   b4eb8:	f006 f93d 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4ebc:	1600      	asrs	r0, r0, #24
   b4ebe:	7160      	strb	r0, [r4, #5]
	buf[6] = ((uint8_t) ((Time.now()) >> 16));	// Third byte
   b4ec0:	f006 f939 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4ec4:	1400      	asrs	r0, r0, #16
   b4ec6:	71a0      	strb	r0, [r4, #6]
	buf[7] = ((uint8_t) ((Time.now()) >> 8));	// Second byte
   b4ec8:	f006 f935 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4ecc:	1200      	asrs	r0, r0, #8
   b4ece:	71e0      	strb	r0, [r4, #7]
	buf[8] = ((uint8_t) (Time.now()));		    // First byte			
   b4ed0:	f006 f931 	bl	bb136 <_ZN9TimeClass3nowEv>
   b4ed4:	7220      	strb	r0, [r4, #8]
	buf[9] = highByte(driver.lastRssi());		// Signal strength
   b4ed6:	4820      	ldr	r0, [pc, #128]	; (b4f58 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xf0>)
   b4ed8:	f001 ffa9 	bl	b6e2e <_ZN15RHGenericDriver8lastRssiEv>
   b4edc:	1200      	asrs	r0, r0, #8
   b4ede:	7260      	strb	r0, [r4, #9]
	buf[10] = lowByte(driver.lastRssi()); 
   b4ee0:	481d      	ldr	r0, [pc, #116]	; (b4f58 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xf0>)
   b4ee2:	f001 ffa4 	bl	b6e2e <_ZN15RHGenericDriver8lastRssiEv>
   b4ee6:	72a0      	strb	r0, [r4, #10]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending Alert Report number %d to gateway at %d", current.get_alertCodeNode(), GATEWAY_ADDRESS);
   b4ee8:	f000 f9de 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b4eec:	f000 facd 	bl	b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b4ef0:	491a      	ldr	r1, [pc, #104]	; (b4f5c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xf4>)
   b4ef2:	4602      	mov	r2, r0
   b4ef4:	462b      	mov	r3, r5
   b4ef6:	4815      	ldr	r0, [pc, #84]	; (b4f4c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe4>)
   b4ef8:	f7ff f938 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 11, GATEWAY_ADDRESS, ALERT_RPT) == RH_ROUTER_ERROR_NONE) {
   b4efc:	2305      	movs	r3, #5
   b4efe:	9300      	str	r3, [sp, #0]
   b4f00:	4621      	mov	r1, r4
   b4f02:	4817      	ldr	r0, [pc, #92]	; (b4f60 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xf8>)
   b4f04:	462b      	mov	r3, r5
   b4f06:	220b      	movs	r2, #11
   b4f08:	f002 f9ac 	bl	b7264 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b4f0c:	4604      	mov	r4, r0
   b4f0e:	b968      	cbnz	r0, b4f2c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xc4>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Node - Alert report send to gateway successfully");
   b4f10:	4914      	ldr	r1, [pc, #80]	; (b4f64 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xfc>)
   b4f12:	480e      	ldr	r0, [pc, #56]	; (b4f4c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe4>)
   b4f14:	f7ff f92a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4f18:	4621      	mov	r1, r4
   b4f1a:	4630      	mov	r0, r6
   b4f1c:	f006 fb1b 	bl	bb556 <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4f20:	480d      	ldr	r0, [pc, #52]	; (b4f58 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xf0>)
   b4f22:	f002 fe6a 	bl	b7bfa <_ZN7RH_RF955sleepEv>
		return true;
   b4f26:	2001      	movs	r0, #1
		Log.info("Node - Alert Report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		driver.sleep();                             // Here is where we will power down the LoRA radio module
		return false;
	}
}
   b4f28:	b002      	add	sp, #8
   b4f2a:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Node - Alert Report send to Gateway failed");
   b4f2c:	490e      	ldr	r1, [pc, #56]	; (b4f68 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0x100>)
   b4f2e:	4807      	ldr	r0, [pc, #28]	; (b4f4c <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xe4>)
   b4f30:	f7ff f91c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   b4f34:	4629      	mov	r1, r5
   b4f36:	4630      	mov	r0, r6
   b4f38:	f006 fb0d 	bl	bb556 <digitalWrite>
		driver.sleep();                             // Here is where we will power down the LoRA radio module
   b4f3c:	4806      	ldr	r0, [pc, #24]	; (b4f58 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xf0>)
   b4f3e:	f002 fe5c 	bl	b7bfa <_ZN7RH_RF955sleepEv>
		return false;
   b4f42:	4628      	mov	r0, r5
   b4f44:	e7f0      	b.n	b4f28 <_ZN14LoRA_Functions22composeAlertReportNodeEv+0xc0>
   b4f46:	bf00      	nop
   b4f48:	000bca4b 	.word	0x000bca4b
   b4f4c:	2003e658 	.word	0x2003e658
   b4f50:	2003dfa0 	.word	0x2003dfa0
   b4f54:	000bcc34 	.word	0x000bcc34
   b4f58:	2003e09c 	.word	0x2003e09c
   b4f5c:	000bca72 	.word	0x000bca72
   b4f60:	2003e1cc 	.word	0x2003e1cc
   b4f64:	000bcaa2 	.word	0x000bcaa2
   b4f68:	000bcad3 	.word	0x000bcad3

000b4f6c <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>:

bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {
   b4f6c:	b570      	push	{r4, r5, r6, lr}

	Log.info("Receiving acknowledgment - Alert Report");
   b4f6e:	4d1a      	ldr	r5, [pc, #104]	; (b4fd8 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x6c>)
   b4f70:	4e1a      	ldr	r6, [pc, #104]	; (b4fdc <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x70>)
   b4f72:	491b      	ldr	r1, [pc, #108]	; (b4fe0 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x74>)
bool LoRA_Functions::receiveAcknowledmentAlertReportNode() {
   b4f74:	b088      	sub	sp, #32
	Log.info("Receiving acknowledgment - Alert Report");
   b4f76:	4628      	mov	r0, r5
   b4f78:	f7ff f8f8 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>

	uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   b4f7c:	f8d6 4001 	ldr.w	r4, [r6, #1]
	sysStatus.set_nextReportSeconds((buf[5] << 8) | buf[6]);
   b4f80:	f000 f942 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4f84:	f8b6 1005 	ldrh.w	r1, [r6, #5]
   b4f88:	ba49      	rev16	r1, r1
   b4f8a:	b289      	uxth	r1, r1
   b4f8c:	f000 fa45 	bl	b541a <_ZN13sysStatusData21set_nextReportSecondsEt>
   b4f90:	ba24      	rev	r4, r4
	Time.setTime(newTime);  // Set time based on response from gateway
   b4f92:	2300      	movs	r3, #0
   b4f94:	4619      	mov	r1, r3
   b4f96:	4620      	mov	r0, r4
   b4f98:	f005 ffb4 	bl	baf04 <_ZN9TimeClass7setTimeEx>
	Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.get_nodeNumber(), sysStatus.get_nextReportSeconds());
   b4f9c:	2300      	movs	r3, #0
   b4f9e:	4622      	mov	r2, r4
   b4fa0:	a804      	add	r0, sp, #16
   b4fa2:	f005 ffc3 	bl	baf2c <_ZN9TimeClass7timeStrEx>
   b4fa6:	9a04      	ldr	r2, [sp, #16]
   b4fa8:	9203      	str	r2, [sp, #12]
   b4faa:	f000 f92d 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4fae:	f000 f9f1 	bl	b5394 <_ZNK13sysStatusData14get_nodeNumberEv>
   b4fb2:	9002      	str	r0, [sp, #8]
   b4fb4:	f000 f928 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b4fb8:	f000 f9f1 	bl	b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>
   b4fbc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   b4fc0:	4908      	ldr	r1, [pc, #32]	; (b4fe4 <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv+0x78>)
   b4fc2:	9000      	str	r0, [sp, #0]
   b4fc4:	4628      	mov	r0, r5
   b4fc6:	f7ff f8d1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b4fca:	a804      	add	r0, sp, #16
   b4fcc:	f005 fdbe 	bl	bab4c <_ZN6StringD1Ev>
	return true;
}
   b4fd0:	2001      	movs	r0, #1
   b4fd2:	b008      	add	sp, #32
   b4fd4:	bd70      	pop	{r4, r5, r6, pc}
   b4fd6:	bf00      	nop
   b4fd8:	2003e658 	.word	0x2003e658
   b4fdc:	2003dfa0 	.word	0x2003dfa0
   b4fe0:	000bcafe 	.word	0x000bcafe
   b4fe4:	000bca0f 	.word	0x000bca0f

000b4fe8 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv>:
bool LoRA_Functions::listenForLoRAMessageNode() {
   b4fe8:	b570      	push	{r4, r5, r6, lr}
   b4fea:	b08a      	sub	sp, #40	; 0x28
	uint8_t len = sizeof(buf);
   b4fec:	23f9      	movs	r3, #249	; 0xf9
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag)) {
   b4fee:	2500      	movs	r5, #0
	uint8_t len = sizeof(buf);
   b4ff0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	if (manager.recvfromAckTimeout(buf, &len, 1000, &from,__null,__null,&messageFlag)) {
   b4ff4:	4e25      	ldr	r6, [pc, #148]	; (b508c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xa4>)
   b4ff6:	4826      	ldr	r0, [pc, #152]	; (b5090 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xa8>)
   b4ff8:	9504      	str	r5, [sp, #16]
   b4ffa:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   b4ffe:	e9cd 5302 	strd	r5, r3, [sp, #8]
   b5002:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   b5006:	9300      	str	r3, [sp, #0]
   b5008:	9501      	str	r5, [sp, #4]
   b500a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b500e:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   b5012:	4631      	mov	r1, r6
   b5014:	f002 fa2a 	bl	b746c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   b5018:	4604      	mov	r4, r0
   b501a:	b918      	cbnz	r0, b5024 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x3c>
	return false;
   b501c:	2400      	movs	r4, #0
}
   b501e:	4620      	mov	r0, r4
   b5020:	b00a      	add	sp, #40	; 0x28
   b5022:	bd70      	pop	{r4, r5, r6, pc}
		buf[len] = 0;
   b5024:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5028:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
		buf[len] = 0;
   b502c:	54f5      	strb	r5, [r6, r3]
		lora_state = (LoRA_State)messageFlag;
   b502e:	4d19      	ldr	r5, [pc, #100]	; (b5094 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xac>)
   b5030:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5034:	4818      	ldr	r0, [pc, #96]	; (b5098 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xb0>)
		lora_state = (LoRA_State)messageFlag;
   b5036:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message", from, driver.lastRssi(), loraStateNames[lora_state]);
   b5038:	9207      	str	r2, [sp, #28]
   b503a:	f001 fef8 	bl	b6e2e <_ZN15RHGenericDriver8lastRssiEv>
   b503e:	4917      	ldr	r1, [pc, #92]	; (b509c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xb4>)
   b5040:	9a07      	ldr	r2, [sp, #28]
   b5042:	4603      	mov	r3, r0
   b5044:	7828      	ldrb	r0, [r5, #0]
   b5046:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   b504a:	9100      	str	r1, [sp, #0]
   b504c:	4814      	ldr	r0, [pc, #80]	; (b50a0 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xb8>)
   b504e:	4915      	ldr	r1, [pc, #84]	; (b50a4 <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0xbc>)
   b5050:	f7ff f88c 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b5054:	782b      	ldrb	r3, [r5, #0]
   b5056:	2b04      	cmp	r3, #4
   b5058:	d011      	beq.n	b507e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x96>
		if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentJoinRequestNode()) return true;}
   b505a:	782b      	ldrb	r3, [r5, #0]
   b505c:	2b02      	cmp	r3, #2
   b505e:	d105      	bne.n	b506c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x84>
   b5060:	f7ff fc8a 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b5064:	f7ff feb2 	bl	b4dcc <_ZN14LoRA_Functions35receiveAcknowledmentJoinRequestNodeEv>
   b5068:	2800      	cmp	r0, #0
   b506a:	d1d8      	bne.n	b501e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
		if (lora_state == ALERT_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentAlertReportNode()) return true;}
   b506c:	782b      	ldrb	r3, [r5, #0]
   b506e:	2b06      	cmp	r3, #6
   b5070:	d1d4      	bne.n	b501c <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x34>
   b5072:	f7ff fc81 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b5076:	f7ff ff79 	bl	b4f6c <_ZN14LoRA_Functions35receiveAcknowledmentAlertReportNodeEv>
   b507a:	4604      	mov	r4, r0
   b507c:	e7cf      	b.n	b501e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().receiveAcknowledmentDataReportNode()) return true;}
   b507e:	f7ff fc7b 	bl	b4978 <_ZN14LoRA_Functions8instanceEv>
   b5082:	f7ff fde1 	bl	b4c48 <_ZN14LoRA_Functions34receiveAcknowledmentDataReportNodeEv>
   b5086:	2800      	cmp	r0, #0
   b5088:	d0e7      	beq.n	b505a <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x72>
   b508a:	e7c8      	b.n	b501e <_ZN14LoRA_Functions24listenForLoRAMessageNodeEv+0x36>
   b508c:	2003dfa0 	.word	0x2003dfa0
   b5090:	2003e1cc 	.word	0x2003e1cc
   b5094:	2003df8d 	.word	0x2003df8d
   b5098:	2003e09c 	.word	0x2003e09c
   b509c:	2003de04 	.word	0x2003de04
   b50a0:	2003e658 	.word	0x2003e658
   b50a4:	000bcb26 	.word	0x000bcb26

000b50a8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b50a8:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b50aa:	4a08      	ldr	r2, [pc, #32]	; (b50cc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x24>)
   b50ac:	4c08      	ldr	r4, [pc, #32]	; (b50d0 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x28>)
   b50ae:	4909      	ldr	r1, [pc, #36]	; (b50d4 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x2c>)
   b50b0:	7812      	ldrb	r2, [r2, #0]
   b50b2:	7809      	ldrb	r1, [r1, #0]
   b50b4:	4b08      	ldr	r3, [pc, #32]	; (b50d8 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x30>)
   b50b6:	4620      	mov	r0, r4
   b50b8:	f002 fdf8 	bl	b7cac <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b50bc:	4621      	mov	r1, r4
   b50be:	4807      	ldr	r0, [pc, #28]	; (b50dc <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x34>)
}
   b50c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b50c4:	2200      	movs	r2, #0
   b50c6:	f002 b8c3 	b.w	b7250 <_ZN6RHMeshC1ER15RHGenericDriverh>
   b50ca:	bf00      	nop
   b50cc:	000bcc3c 	.word	0x000bcc3c
   b50d0:	2003e09c 	.word	0x2003e09c
   b50d4:	000bcc3a 	.word	0x000bcc3a
   b50d8:	2003e3f0 	.word	0x2003e3f0
   b50dc:	2003e1cc 	.word	0x2003e1cc

000b50e0 <_ZN17currentStatusDataD1Ev>:
}

currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
};

currentStatusData::~currentStatusData() {
   b50e0:	b510      	push	{r4, lr}
     * This class is separate from PersistentData so you can subclass it to hold your own application-specific
     * data as well.
     * 
     * See PersistentDataFile for saving data to a file on the flash file system.
     */
    class PersistentDataBase : public CustomRecursiveMutex {
   b50e2:	4b04      	ldr	r3, [pc, #16]	; (b50f4 <_ZN17currentStatusDataD1Ev+0x14>)
   b50e4:	6003      	str	r3, [r0, #0]
   b50e6:	4604      	mov	r4, r0
            if (handle_) {
   b50e8:	6840      	ldr	r0, [r0, #4]
   b50ea:	b108      	cbz	r0, b50f0 <_ZN17currentStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b50ec:	f003 f970 	bl	b83d0 <os_mutex_recursive_destroy>
}
   b50f0:	4620      	mov	r0, r4
   b50f2:	bd10      	pop	{r4, pc}
   b50f4:	000bd344 	.word	0x000bd344

000b50f8 <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b50f8:	b510      	push	{r4, lr}
   b50fa:	4604      	mov	r4, r0
}
   b50fc:	f7ff fff0 	bl	b50e0 <_ZN17currentStatusDataD1Ev>
   b5100:	4620      	mov	r0, r4
   b5102:	2178      	movs	r1, #120	; 0x78
   b5104:	f7fe ffcb 	bl	b409e <_ZdlPvj>
   b5108:	4620      	mov	r0, r4
   b510a:	bd10      	pop	{r4, pc}

000b510c <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b510c:	b510      	push	{r4, lr}
   b510e:	4b03      	ldr	r3, [pc, #12]	; (b511c <_ZN8MB85RC64D1Ev+0x10>)
   b5110:	6003      	str	r3, [r0, #0]
   b5112:	4604      	mov	r4, r0
   b5114:	f001 fce0 	bl	b6ad8 <_ZN6MB85RCD1Ev>
   b5118:	4620      	mov	r0, r4
   b511a:	bd10      	pop	{r4, pc}
   b511c:	000bcb94 	.word	0x000bcb94

000b5120 <_ZN8MB85RC64D0Ev>:
   b5120:	b510      	push	{r4, lr}
   b5122:	4604      	mov	r4, r0
   b5124:	f7ff fff2 	bl	b510c <_ZN8MB85RC64D1Ev>
   b5128:	4620      	mov	r0, r4
   b512a:	2110      	movs	r1, #16
   b512c:	f7fe ffb7 	bl	b409e <_ZdlPvj>
   b5130:	4620      	mov	r0, r4
   b5132:	bd10      	pop	{r4, pc}

000b5134 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b5134:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b5136:	4b04      	ldr	r3, [pc, #16]	; (b5148 <_ZN13sysStatusDataD1Ev+0x14>)
   b5138:	6003      	str	r3, [r0, #0]
   b513a:	4604      	mov	r4, r0
            if (handle_) {
   b513c:	6840      	ldr	r0, [r0, #4]
   b513e:	b108      	cbz	r0, b5144 <_ZN13sysStatusDataD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b5140:	f003 f946 	bl	b83d0 <os_mutex_recursive_destroy>
}
   b5144:	4620      	mov	r0, r4
   b5146:	bd10      	pop	{r4, pc}
   b5148:	000bd344 	.word	0x000bd344

000b514c <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b514c:	b510      	push	{r4, lr}
   b514e:	4604      	mov	r4, r0
}
   b5150:	f7ff fff0 	bl	b5134 <_ZN13sysStatusDataD1Ev>
   b5154:	4620      	mov	r0, r4
   b5156:	2170      	movs	r1, #112	; 0x70
   b5158:	f7fe ffa1 	bl	b409e <_ZdlPvj>
   b515c:	4620      	mov	r0, r4
   b515e:	bd10      	pop	{r4, pc}

000b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
        void lock() const { 
   b5160:	b510      	push	{r4, lr}
            if (!handle_) {
   b5162:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b5164:	4604      	mov	r4, r0
            if (!handle_) {
   b5166:	b90b      	cbnz	r3, b516c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b5168:	f003 f92a 	bl	b83c0 <os_mutex_recursive_create>
            os_mutex_recursive_lock(handle_); 
   b516c:	6820      	ldr	r0, [r4, #0]
        }
   b516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b5172:	f003 b935 	b.w	b83e0 <os_mutex_recursive_lock>

000b5176 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b5176:	b538      	push	{r3, r4, r5, lr}
   b5178:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b517a:	3004      	adds	r0, #4
   b517c:	f7ff fff0 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b5180:	6a20      	ldr	r0, [r4, #32]
   b5182:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5184:	6803      	ldr	r3, [r0, #0]
   b5186:	68dd      	ldr	r5, [r3, #12]
   b5188:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b518c:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b518e:	6860      	ldr	r0, [r4, #4]
            }
        } 
   b5190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            os_mutex_recursive_unlock(handle_); 
   b5194:	f003 b92c 	b.w	b83f0 <os_mutex_recursive_unlock>

000b5198 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b5198:	b538      	push	{r3, r4, r5, lr}
   b519a:	4604      	mov	r4, r0
   b519c:	3004      	adds	r0, #4
   b519e:	f7ff ffdf 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b51a2:	6a20      	ldr	r0, [r4, #32]
   b51a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b51a6:	6803      	ldr	r3, [r0, #0]
   b51a8:	689d      	ldr	r5, [r3, #8]
   b51aa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b51ae:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b51b0:	68a2      	ldr	r2, [r4, #8]
   b51b2:	6823      	ldr	r3, [r4, #0]
   b51b4:	88d1      	ldrh	r1, [r2, #6]
   b51b6:	695b      	ldr	r3, [r3, #20]
   b51b8:	4620      	mov	r0, r4
   b51ba:	4798      	blx	r3
   b51bc:	b918      	cbnz	r0, b51c6 <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b51be:	6823      	ldr	r3, [r4, #0]
   b51c0:	4620      	mov	r0, r4
   b51c2:	699b      	ldr	r3, [r3, #24]
   b51c4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b51c6:	6860      	ldr	r0, [r4, #4]
   b51c8:	f003 f912 	bl	b83f0 <os_mutex_recursive_unlock>
        }
   b51cc:	2001      	movs	r0, #1
   b51ce:	bd38      	pop	{r3, r4, r5, pc}

000b51d0 <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b51d0:	f100 0128 	add.w	r1, r0, #40	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b51d4:	6081      	str	r1, [r0, #8]
   b51d6:	4909      	ldr	r1, [pc, #36]	; (b51fc <_ZN13sysStatusDataC1Ev+0x2c>)
   b51d8:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b51dc:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b51e0:	2101      	movs	r1, #1
   b51e2:	8281      	strh	r1, [r0, #20]
   b51e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b51e8:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b51ea:	4905      	ldr	r1, [pc, #20]	; (b5200 <_ZN13sysStatusDataC1Ev+0x30>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b51ec:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b51ee:	e9c0 1208 	strd	r1, r2, [r0, #32]
        CustomRecursiveMutex() : handle_(nullptr) {
   b51f2:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b51f4:	6182      	str	r2, [r0, #24]
   b51f6:	4a03      	ldr	r2, [pc, #12]	; (b5204 <_ZN13sysStatusDataC1Ev+0x34>)
   b51f8:	6002      	str	r2, [r0, #0]
};
   b51fa:	4770      	bx	lr
   b51fc:	20a99e73 	.word	0x20a99e73
   b5200:	2003e388 	.word	0x2003e388
   b5204:	000bcbb0 	.word	0x000bcbb0

000b5208 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b5208:	b510      	push	{r4, lr}
    if (!_instance) {
   b520a:	4c06      	ldr	r4, [pc, #24]	; (b5224 <_ZN13sysStatusData8instanceEv+0x1c>)
   b520c:	6823      	ldr	r3, [r4, #0]
   b520e:	b93b      	cbnz	r3, b5220 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b5210:	2070      	movs	r0, #112	; 0x70
   b5212:	f7fe ff40 	bl	b4096 <_Znwj>
   b5216:	4603      	mov	r3, r0
   b5218:	b108      	cbz	r0, b521e <_ZN13sysStatusData8instanceEv+0x16>
   b521a:	f7ff ffd9 	bl	b51d0 <_ZN13sysStatusDataC1Ev>
   b521e:	6023      	str	r3, [r4, #0]
}
   b5220:	6820      	ldr	r0, [r4, #0]
   b5222:	bd10      	pop	{r4, pc}
   b5224:	2003e380 	.word	0x2003e380

000b5228 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b5228:	b508      	push	{r3, lr}
    fram.begin();
   b522a:	6a00      	ldr	r0, [r0, #32]
   b522c:	f001 fc6a 	bl	b6b04 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b5230:	f7ff ffea 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b5234:	6803      	ldr	r3, [r0, #0]
   b5236:	685b      	ldr	r3, [r3, #4]
   b5238:	4798      	blx	r3
}
   b523a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setNodeConfiguration();                             // Here we will fix the settings specific to the node
   b523e:	f000 baaf 	b.w	b57a0 <_Z20setNodeConfigurationv>

000b5242 <_ZN17currentStatusData5setupEv>:

void currentStatusData::setup() {
   b5242:	b510      	push	{r4, lr}
    fram.begin();
   b5244:	6a00      	ldr	r0, [r0, #32]
   b5246:	f001 fc5d 	bl	b6b04 <_ZN6MB85RC5beginEv>
    sysStatus.load();
   b524a:	f7ff ffdd 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b524e:	6803      	ldr	r3, [r0, #0]
}
   b5250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.load();
   b5254:	685b      	ldr	r3, [r3, #4]
   b5256:	4718      	bx	r3

000b5258 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b5258:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b525a:	f7ff ffd5 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b525e:	6803      	ldr	r3, [r0, #0]
}
   b5260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b5264:	68db      	ldr	r3, [r3, #12]
   b5266:	2100      	movs	r1, #0
   b5268:	4718      	bx	r3
	...

000b526c <_ZN17currentStatusDataC1Ev>:
        CustomRecursiveMutex() : handle_(nullptr) {
   b526c:	2200      	movs	r2, #0
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 50, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b526e:	f100 0128 	add.w	r1, r0, #40	; 0x28
   b5272:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5274:	6182      	str	r2, [r0, #24]
   b5276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b527a:	6081      	str	r1, [r0, #8]
   b527c:	61c2      	str	r2, [r0, #28]
   b527e:	4907      	ldr	r1, [pc, #28]	; (b529c <_ZN17currentStatusDataC1Ev+0x30>)
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5280:	4a07      	ldr	r2, [pc, #28]	; (b52a0 <_ZN17currentStatusDataC1Ev+0x34>)
   b5282:	6202      	str	r2, [r0, #32]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5284:	f04f 0c50 	mov.w	ip, #80	; 0x50
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b5288:	2232      	movs	r2, #50	; 0x32
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b528a:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b528e:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b5290:	2101      	movs	r1, #1
   b5292:	4a04      	ldr	r2, [pc, #16]	; (b52a4 <_ZN17currentStatusDataC1Ev+0x38>)
   b5294:	8281      	strh	r1, [r0, #20]
   b5296:	6002      	str	r2, [r0, #0]
};
   b5298:	4770      	bx	lr
   b529a:	bf00      	nop
   b529c:	20a99e73 	.word	0x20a99e73
   b52a0:	2003e388 	.word	0x2003e388
   b52a4:	000bcbdc 	.word	0x000bcbdc

000b52a8 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b52a8:	b510      	push	{r4, lr}
    if (!_instance) {
   b52aa:	4c06      	ldr	r4, [pc, #24]	; (b52c4 <_ZN17currentStatusData8instanceEv+0x1c>)
   b52ac:	6823      	ldr	r3, [r4, #0]
   b52ae:	b93b      	cbnz	r3, b52c0 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b52b0:	2078      	movs	r0, #120	; 0x78
   b52b2:	f7fe fef0 	bl	b4096 <_Znwj>
   b52b6:	4603      	mov	r3, r0
   b52b8:	b108      	cbz	r0, b52be <_ZN17currentStatusData8instanceEv+0x16>
   b52ba:	f7ff ffd7 	bl	b526c <_ZN17currentStatusDataC1Ev>
   b52be:	6023      	str	r3, [r4, #0]
}
   b52c0:	6820      	ldr	r0, [r4, #0]
   b52c2:	bd10      	pop	{r4, pc}
   b52c4:	2003e384 	.word	0x2003e384

000b52c8 <_ZN17currentStatusData4loopEv>:

void currentStatusData::loop() {
   b52c8:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b52ca:	f7ff ff9d 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b52ce:	6803      	ldr	r3, [r0, #0]
}
   b52d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b52d4:	68db      	ldr	r3, [r3, #12]
   b52d6:	2100      	movs	r1, #0
   b52d8:	4718      	bx	r3
   b52da:	0000      	movs	r0, r0
   b52dc:	0000      	movs	r0, r0
	...

000b52e0 <_ZNK17currentStatusData17get_stateOfChargeEv>:

void currentStatusData::set_internalTempC(uint8_t value) {
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
}

double currentStatusData::get_stateOfCharge() const {
   b52e0:	b510      	push	{r4, lr}
   b52e2:	4604      	mov	r4, r0
   b52e4:	ed2d 8b02 	vpush	{d8}
   b52e8:	3004      	adds	r0, #4
   b52ea:	f7ff ff39 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b52ee:	68e3      	ldr	r3, [r4, #12]
   b52f0:	3b08      	subs	r3, #8
   b52f2:	2b17      	cmp	r3, #23
   b52f4:	d90c      	bls.n	b5310 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b52f6:	68a3      	ldr	r3, [r4, #8]
   b52f8:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b52fc:	6860      	ldr	r0, [r4, #4]
   b52fe:	f003 f877 	bl	b83f0 <os_mutex_recursive_unlock>
    return getValue<double>(offsetof(CurrentData, stateOfCharge));
}
   b5302:	eeb0 0a48 	vmov.f32	s0, s16
   b5306:	eef0 0a68 	vmov.f32	s1, s17
   b530a:	ecbd 8b02 	vpop	{d8}
   b530e:	bd10      	pop	{r4, pc}
            T result = 0;
   b5310:	ed9f 8b01 	vldr	d8, [pc, #4]	; b5318 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b5314:	e7f2      	b.n	b52fc <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b5316:	bf00      	nop
	...

000b5320 <_ZN17currentStatusData17set_stateOfChargeEd>:

void currentStatusData::set_stateOfCharge(double value) {
   b5320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5322:	4604      	mov	r4, r0
   b5324:	3004      	adds	r0, #4
   b5326:	ec57 6b10 	vmov	r6, r7, d0
   b532a:	f7ff ff19 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b532e:	68e3      	ldr	r3, [r4, #12]
   b5330:	3b08      	subs	r3, #8
   b5332:	2b17      	cmp	r3, #23
   b5334:	d912      	bls.n	b535c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b5336:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b5338:	4630      	mov	r0, r6
   b533a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b533e:	4639      	mov	r1, r7
   b5340:	f006 fe2e 	bl	bbfa0 <__aeabi_dcmpeq>
   b5344:	b950      	cbnz	r0, b535c <_ZN17currentStatusData17set_stateOfChargeEd+0x3c>
                        *(T *)p = value;
   b5346:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        savedDataHeader->hash = getHash();
   b534a:	4620      	mov	r0, r4
   b534c:	68a5      	ldr	r5, [r4, #8]
   b534e:	f002 ffb5 	bl	b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b5352:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5354:	6823      	ldr	r3, [r4, #0]
   b5356:	4620      	mov	r0, r4
   b5358:	691b      	ldr	r3, [r3, #16]
   b535a:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b535c:	6860      	ldr	r0, [r4, #4]
    setValue<double>(offsetof(CurrentData, stateOfCharge), value);
}
   b535e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5362:	f003 b845 	b.w	b83f0 <os_mutex_recursive_unlock>

000b5366 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b5366:	b538      	push	{r3, r4, r5, lr}
   b5368:	4604      	mov	r4, r0
   b536a:	3004      	adds	r0, #4
   b536c:	460d      	mov	r5, r1
   b536e:	f7ff fef7 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5372:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b5374:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b5376:	3b02      	subs	r3, #2
   b5378:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b537a:	bf26      	itte	cs
   b537c:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b537e:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b5380:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5382:	f003 f835 	bl	b83f0 <os_mutex_recursive_unlock>
        }
   b5386:	4628      	mov	r0, r5
   b5388:	bd38      	pop	{r3, r4, r5, pc}

000b538a <_ZNK13sysStatusData12get_deviceIDEv>:
uint16_t sysStatusData::get_deviceID() const {
   b538a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, deviceID));
   b538c:	2110      	movs	r1, #16
   b538e:	f7ff ffea 	bl	b5366 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b5392:	bd08      	pop	{r3, pc}

000b5394 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint16_t sysStatusData::get_nodeNumber() const {
   b5394:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, nodeNumber));
   b5396:	2112      	movs	r1, #18
   b5398:	f7ff ffe5 	bl	b5366 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b539c:	bd08      	pop	{r3, pc}

000b539e <_ZNK13sysStatusData21get_nextReportSecondsEv>:
uint16_t sysStatusData::get_nextReportSeconds() const {
   b539e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,nextReportSeconds ));
   b53a0:	2132      	movs	r1, #50	; 0x32
   b53a2:	f7ff ffe0 	bl	b5366 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b53a6:	bd08      	pop	{r3, pc}

000b53a8 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint16_t currentStatusData::get_nodeNumber() const {
   b53a8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeNumber));
   b53aa:	2112      	movs	r1, #18
   b53ac:	f7ff ffdb 	bl	b5366 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b53b0:	bd08      	pop	{r3, pc}

000b53b2 <_ZNK17currentStatusData15get_hourlyCountEv>:

void currentStatusData::set_lastCountTime(time_t value) {
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
}

uint16_t currentStatusData::get_hourlyCount() const {
   b53b2:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b53b4:	2140      	movs	r1, #64	; 0x40
   b53b6:	f7ff ffd6 	bl	b5366 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b53ba:	bd08      	pop	{r3, pc}

000b53bc <_ZNK17currentStatusData14get_dailyCountEv>:

void currentStatusData::set_hourlyCount(uint16_t value) {
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
}

uint16_t currentStatusData::get_dailyCount() const {
   b53bc:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b53be:	2142      	movs	r1, #66	; 0x42
   b53c0:	f7ff ffd1 	bl	b5366 <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b53c4:	bd08      	pop	{r3, pc}

000b53c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b53c6:	b570      	push	{r4, r5, r6, lr}
   b53c8:	4604      	mov	r4, r0
   b53ca:	3004      	adds	r0, #4
   b53cc:	460d      	mov	r5, r1
   b53ce:	4616      	mov	r6, r2
   b53d0:	f7ff fec6 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b53d4:	68e3      	ldr	r3, [r4, #12]
   b53d6:	3b02      	subs	r3, #2
   b53d8:	42ab      	cmp	r3, r5
   b53da:	d30d      	bcc.n	b53f8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b53dc:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b53de:	5b5a      	ldrh	r2, [r3, r5]
   b53e0:	42b2      	cmp	r2, r6
   b53e2:	d009      	beq.n	b53f8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x32>
                        *(T *)p = value;
   b53e4:	535e      	strh	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b53e6:	4620      	mov	r0, r4
   b53e8:	68a5      	ldr	r5, [r4, #8]
   b53ea:	f002 ff67 	bl	b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b53ee:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b53f0:	6823      	ldr	r3, [r4, #0]
   b53f2:	4620      	mov	r0, r4
   b53f4:	691b      	ldr	r3, [r3, #16]
   b53f6:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b53f8:	6860      	ldr	r0, [r4, #4]
        }
   b53fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b53fe:	f002 bff7 	b.w	b83f0 <os_mutex_recursive_unlock>

000b5402 <_ZN13sysStatusData12set_deviceIDEt>:
void sysStatusData::set_deviceID(uint16_t value) {
   b5402:	b508      	push	{r3, lr}
   b5404:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, deviceID), value);
   b5406:	2110      	movs	r1, #16
   b5408:	f7ff ffdd 	bl	b53c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b540c:	bd08      	pop	{r3, pc}

000b540e <_ZN13sysStatusData14set_nodeNumberEt>:
void sysStatusData::set_nodeNumber(uint16_t value) {
   b540e:	b508      	push	{r3, lr}
   b5410:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nodeNumber), value);
   b5412:	2112      	movs	r1, #18
   b5414:	f7ff ffd7 	bl	b53c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5418:	bd08      	pop	{r3, pc}

000b541a <_ZN13sysStatusData21set_nextReportSecondsEt>:
void sysStatusData::set_nextReportSeconds(uint16_t value) {
   b541a:	b508      	push	{r3, lr}
   b541c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, nextReportSeconds), value);
   b541e:	2132      	movs	r1, #50	; 0x32
   b5420:	f7ff ffd1 	bl	b53c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5424:	bd08      	pop	{r3, pc}

000b5426 <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b5426:	b508      	push	{r3, lr}
   b5428:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b542a:	2140      	movs	r1, #64	; 0x40
   b542c:	f7ff ffcb 	bl	b53c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b5430:	bd08      	pop	{r3, pc}

000b5432 <_ZN17currentStatusData14set_dailyCountEt>:

void currentStatusData::set_dailyCount(uint16_t value) {
   b5432:	b508      	push	{r3, lr}
   b5434:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b5436:	2142      	movs	r1, #66	; 0x42
   b5438:	f7ff ffc5 	bl	b53c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b543c:	bd08      	pop	{r3, pc}

000b543e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b543e:	b538      	push	{r3, r4, r5, lr}
   b5440:	4604      	mov	r4, r0
   b5442:	3004      	adds	r0, #4
   b5444:	460d      	mov	r5, r1
   b5446:	f7ff fe8b 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b544a:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b544c:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b544e:	3b01      	subs	r3, #1
   b5450:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5452:	bf26      	itte	cs
   b5454:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5456:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5458:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b545a:	f002 ffc9 	bl	b83f0 <os_mutex_recursive_unlock>
        }
   b545e:	4628      	mov	r0, r5
   b5460:	bd38      	pop	{r3, r4, r5, pc}

000b5462 <_ZNK13sysStatusData21get_structuresVersionEv>:
uint8_t sysStatusData::get_structuresVersion() const {
   b5462:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, structuresVersion));
   b5464:	2114      	movs	r1, #20
   b5466:	f7ff ffea 	bl	b543e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b546a:	bd08      	pop	{r3, pc}

000b546c <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b546c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b546e:	2118      	movs	r1, #24
   b5470:	f7ff ffe5 	bl	b543e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5474:	bd08      	pop	{r3, pc}

000b5476 <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b5476:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b5478:	2114      	movs	r1, #20
   b547a:	f7ff ffe0 	bl	b543e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b547e:	bd08      	pop	{r3, pc}

000b5480 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b5480:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b5482:	2120      	movs	r1, #32
   b5484:	f7ff ffdb 	bl	b543e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5488:	bd08      	pop	{r3, pc}

000b548a <_ZNK17currentStatusData17get_alertCodeNodeEv>:

uint8_t currentStatusData::get_alertCodeNode() const {
   b548a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b548c:	2144      	movs	r1, #68	; 0x44
   b548e:	f7ff ffd6 	bl	b543e <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b5492:	bd08      	pop	{r3, pc}

000b5494 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5494:	b570      	push	{r4, r5, r6, lr}
   b5496:	4604      	mov	r4, r0
   b5498:	3004      	adds	r0, #4
   b549a:	460d      	mov	r5, r1
   b549c:	4616      	mov	r6, r2
   b549e:	f7ff fe5f 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b54a2:	68e3      	ldr	r3, [r4, #12]
   b54a4:	3b01      	subs	r3, #1
   b54a6:	42ab      	cmp	r3, r5
   b54a8:	d30d      	bcc.n	b54c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b54aa:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b54ac:	5d5a      	ldrb	r2, [r3, r5]
   b54ae:	42b2      	cmp	r2, r6
   b54b0:	d009      	beq.n	b54c6 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x32>
                        *(T *)p = value;
   b54b2:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b54b4:	4620      	mov	r0, r4
   b54b6:	68a5      	ldr	r5, [r4, #8]
   b54b8:	f002 ff00 	bl	b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b54bc:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b54be:	6823      	ldr	r3, [r4, #0]
   b54c0:	4620      	mov	r0, r4
   b54c2:	691b      	ldr	r3, [r3, #16]
   b54c4:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b54c6:	6860      	ldr	r0, [r4, #4]
        }
   b54c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b54cc:	f002 bf90 	b.w	b83f0 <os_mutex_recursive_unlock>

000b54d0 <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b54d0:	b508      	push	{r3, lr}
   b54d2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b54d4:	2114      	movs	r1, #20
   b54d6:	f7ff ffdd 	bl	b5494 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b54da:	bd08      	pop	{r3, pc}

000b54dc <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b54dc:	b508      	push	{r3, lr}
   b54de:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b54e0:	2118      	movs	r1, #24
   b54e2:	f7ff ffd7 	bl	b5494 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b54e6:	bd08      	pop	{r3, pc}

000b54e8 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b54e8:	b508      	push	{r3, lr}
   b54ea:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b54ec:	2114      	movs	r1, #20
   b54ee:	f7ff ffd1 	bl	b5494 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b54f2:	bd08      	pop	{r3, pc}

000b54f4 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b54f4:	b508      	push	{r3, lr}
   b54f6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b54f8:	2120      	movs	r1, #32
   b54fa:	f7ff ffcb 	bl	b5494 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b54fe:	bd08      	pop	{r3, pc}

000b5500 <_ZN17currentStatusData17set_alertCodeNodeEh>:

void currentStatusData::set_alertCodeNode(uint8_t value) {
   b5500:	b508      	push	{r3, lr}
   b5502:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b5504:	2144      	movs	r1, #68	; 0x44
   b5506:	f7ff ffc5 	bl	b5494 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b550a:	bd08      	pop	{r3, pc}

000b550c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b550c:	b538      	push	{r3, r4, r5, lr}
   b550e:	4604      	mov	r4, r0
   b5510:	3004      	adds	r0, #4
   b5512:	460d      	mov	r5, r1
   b5514:	f7ff fe24 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5518:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b551a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b551c:	3b01      	subs	r3, #1
   b551e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b5520:	bf26      	itte	cs
   b5522:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b5524:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b5526:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b5528:	f002 ff62 	bl	b83f0 <os_mutex_recursive_unlock>
        }
   b552c:	4628      	mov	r0, r5
   b552e:	bd38      	pop	{r3, r4, r5, pc}

000b5530 <_ZNK13sysStatusData16get_lowPowerModeEv>:
bool sysStatusData::get_lowPowerMode() const {
   b5530:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, lowPowerMode));
   b5532:	2117      	movs	r1, #23
   b5534:	f7ff ffea 	bl	b550c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5538:	bd08      	pop	{r3, pc}

000b553a <_ZNK13sysStatusData14get_sensorTypeEv>:
bool sysStatusData::get_sensorType() const {
   b553a:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(SysData, sensorType));
   b553c:	2140      	movs	r1, #64	; 0x40
   b553e:	f7ff ffe5 	bl	b550c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b5542:	bd08      	pop	{r3, pc}

000b5544 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b5544:	b570      	push	{r4, r5, r6, lr}
   b5546:	4604      	mov	r4, r0
   b5548:	3004      	adds	r0, #4
   b554a:	460d      	mov	r5, r1
   b554c:	4616      	mov	r6, r2
   b554e:	f7ff fe07 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b5552:	68e3      	ldr	r3, [r4, #12]
   b5554:	3b01      	subs	r3, #1
   b5556:	42ab      	cmp	r3, r5
   b5558:	d30d      	bcc.n	b5576 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b555a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b555c:	5d5a      	ldrb	r2, [r3, r5]
   b555e:	42b2      	cmp	r2, r6
   b5560:	d009      	beq.n	b5576 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x32>
                        *(T *)p = value;
   b5562:	555e      	strb	r6, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5564:	4620      	mov	r0, r4
   b5566:	68a5      	ldr	r5, [r4, #8]
   b5568:	f002 fea8 	bl	b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b556c:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b556e:	6823      	ldr	r3, [r4, #0]
   b5570:	4620      	mov	r0, r4
   b5572:	691b      	ldr	r3, [r3, #16]
   b5574:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5576:	6860      	ldr	r0, [r4, #4]
        }
   b5578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b557c:	f002 bf38 	b.w	b83f0 <os_mutex_recursive_unlock>

000b5580 <_ZN13sysStatusData16set_lowPowerModeEb>:
void sysStatusData::set_lowPowerMode(bool value) {
   b5580:	b508      	push	{r3, lr}
   b5582:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, lowPowerMode), value);
   b5584:	2117      	movs	r1, #23
   b5586:	f7ff ffdd 	bl	b5544 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b558a:	bd08      	pop	{r3, pc}

000b558c <_ZN13sysStatusData14set_sensorTypeEb>:
void sysStatusData::set_sensorType(bool value) {
   b558c:	b508      	push	{r3, lr}
   b558e:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, sensorType), value);
   b5590:	2140      	movs	r1, #64	; 0x40
   b5592:	f7ff ffd7 	bl	b5544 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b5596:	bd08      	pop	{r3, pc}

000b5598 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b5598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b559a:	4604      	mov	r4, r0
   b559c:	3004      	adds	r0, #4
   b559e:	460d      	mov	r5, r1
   b55a0:	f7ff fdde 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b55a4:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b55a6:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b55a8:	3b08      	subs	r3, #8
   b55aa:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b55ac:	bf23      	ittte	cs
   b55ae:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b55b0:	1949      	addcs	r1, r1, r5
   b55b2:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b55b6:	2600      	movcc	r6, #0
   b55b8:	bf38      	it	cc
   b55ba:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b55bc:	f002 ff18 	bl	b83f0 <os_mutex_recursive_unlock>
        }
   b55c0:	4630      	mov	r0, r6
   b55c2:	4639      	mov	r1, r7
   b55c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b55c6 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b55c6:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b55c8:	2128      	movs	r1, #40	; 0x28
   b55ca:	f7ff ffe5 	bl	b5598 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b55ce:	bd08      	pop	{r3, pc}

000b55d0 <_ZNK17currentStatusData17get_lastCountTimeEv>:
time_t currentStatusData::get_lastCountTime() const {
   b55d0:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(CurrentData, lastCountTime));
   b55d2:	2138      	movs	r1, #56	; 0x38
   b55d4:	f7ff ffe0 	bl	b5598 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b55d8:	bd08      	pop	{r3, pc}

000b55da <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b55da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55dc:	4604      	mov	r4, r0
   b55de:	3004      	adds	r0, #4
   b55e0:	460d      	mov	r5, r1
   b55e2:	461e      	mov	r6, r3
   b55e4:	4617      	mov	r7, r2
   b55e6:	f7ff fdbb 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b55ea:	68e3      	ldr	r3, [r4, #12]
   b55ec:	3b08      	subs	r3, #8
   b55ee:	42ab      	cmp	r3, r5
   b55f0:	d312      	bcc.n	b5618 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b55f2:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b55f4:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b55f6:	5958      	ldr	r0, [r3, r5]
   b55f8:	6851      	ldr	r1, [r2, #4]
   b55fa:	42b1      	cmp	r1, r6
   b55fc:	bf08      	it	eq
   b55fe:	42b8      	cmpeq	r0, r7
   b5600:	d00a      	beq.n	b5618 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x3e>
                        *(T *)p = value;
   b5602:	515f      	str	r7, [r3, r5]
                        savedDataHeader->hash = getHash();
   b5604:	4620      	mov	r0, r4
                        *(T *)p = value;
   b5606:	6056      	str	r6, [r2, #4]
                        savedDataHeader->hash = getHash();
   b5608:	68a5      	ldr	r5, [r4, #8]
   b560a:	f002 fe57 	bl	b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b560e:	60a8      	str	r0, [r5, #8]
                        saveOrDefer();
   b5610:	6823      	ldr	r3, [r4, #0]
   b5612:	4620      	mov	r0, r4
   b5614:	691b      	ldr	r3, [r3, #16]
   b5616:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b5618:	6860      	ldr	r0, [r4, #4]
        }
   b561a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b561e:	f002 bee7 	b.w	b83f0 <os_mutex_recursive_unlock>

000b5622 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b5622:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b5624:	2128      	movs	r1, #40	; 0x28
   b5626:	f7ff ffd8 	bl	b55da <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b562a:	bd08      	pop	{r3, pc}

000b562c <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b562c:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b562e:	2138      	movs	r1, #56	; 0x38
   b5630:	f7ff ffd3 	bl	b55da <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b5634:	bd08      	pop	{r3, pc}

000b5636 <_ZN17currentStatusData22set_alertTimestampNodeEx>:

time_t currentStatusData::get_alertTimestampNode() const {
    return getValue<time_t>(offsetof(CurrentData, alertTimestampNode));
}

void currentStatusData::set_alertTimestampNode(time_t value) {
   b5636:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b5638:	2148      	movs	r1, #72	; 0x48
   b563a:	f7ff ffce 	bl	b55da <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b563e:	bd08      	pop	{r3, pc}

000b5640 <_Z15resetEverythingv>:
void resetEverything() {                                              // The device is waking up in a new day or is a new install
   b5640:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b5642:	4917      	ldr	r1, [pc, #92]	; (b56a0 <_Z15resetEverythingv+0x60>)
   b5644:	4817      	ldr	r0, [pc, #92]	; (b56a4 <_Z15resetEverythingv+0x64>)
   b5646:	f7fe fd91 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b564a:	f7ff fe2d 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b564e:	2100      	movs	r1, #0
   b5650:	f7ff feef 	bl	b5432 <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b5654:	f7ff fe28 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5658:	2100      	movs	r1, #0
   b565a:	f7ff fee4 	bl	b5426 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_lastCountTime(Time.now());
   b565e:	f7ff fe23 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5662:	4604      	mov	r4, r0
   b5664:	f005 fd67 	bl	bb136 <_ZN9TimeClass3nowEv>
   b5668:	4602      	mov	r2, r0
   b566a:	17c3      	asrs	r3, r0, #31
   b566c:	4620      	mov	r0, r4
   b566e:	f7ff ffdd 	bl	b562c <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_alertCodeNode(0);
   b5672:	f7ff fe19 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5676:	2100      	movs	r1, #0
   b5678:	f7ff ff42 	bl	b5500 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(Time.now());
   b567c:	f7ff fe14 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5680:	4604      	mov	r4, r0
   b5682:	f005 fd58 	bl	bb136 <_ZN9TimeClass3nowEv>
   b5686:	4602      	mov	r2, r0
   b5688:	17c3      	asrs	r3, r0, #31
   b568a:	4620      	mov	r0, r4
   b568c:	f7ff ffd3 	bl	b5636 <_ZN17currentStatusData22set_alertTimestampNodeEx>
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b5690:	f7ff fdba 	bl	b5208 <_ZN13sysStatusData8instanceEv>
}
   b5694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_resetCount(0);                                           // Reset the reset count as well
   b5698:	2100      	movs	r1, #0
   b569a:	f7ff bf1f 	b.w	b54dc <_ZN13sysStatusData14set_resetCountEh>
   b569e:	bf00      	nop
   b56a0:	000bcb68 	.word	0x000bcb68
   b56a4:	2003e658 	.word	0x2003e658

000b56a8 <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b56a8:	4b08      	ldr	r3, [pc, #32]	; (b56cc <_GLOBAL__sub_I_fram+0x24>)
   b56aa:	2201      	movs	r2, #1

void currentStatusData::logData(const char *msg) {
    Log.info("Current Structure values - %d, %d, %d, %4.2f", currentData.deviceID, currentData.nodeNumber, currentData.internalTempC, currentData.stateOfCharge);
}
   b56ac:	b510      	push	{r4, lr}
   b56ae:	701a      	strb	r2, [r3, #0]
MB85RC64 fram(Wire, 0);   
   b56b0:	f005 ffc2 	bl	bb638 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b56b4:	4c06      	ldr	r4, [pc, #24]	; (b56d0 <_GLOBAL__sub_I_fram+0x28>)
   b56b6:	4601      	mov	r1, r0
   b56b8:	2300      	movs	r3, #0
   b56ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b56be:	4620      	mov	r0, r4
   b56c0:	f001 fa16 	bl	b6af0 <_ZN6MB85RCC1ER7TwoWireji>
   b56c4:	4b03      	ldr	r3, [pc, #12]	; (b56d4 <_GLOBAL__sub_I_fram+0x2c>)
   b56c6:	6023      	str	r3, [r4, #0]
}
   b56c8:	bd10      	pop	{r4, pc}
   b56ca:	bf00      	nop
   b56cc:	2003e37c 	.word	0x2003e37c
   b56d0:	2003e388 	.word	0x2003e388
   b56d4:	000bcb94 	.word	0x000bcb94

000b56d8 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b56d8:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b56da:	4913      	ldr	r1, [pc, #76]	; (b5728 <_Z18initializePinModesv+0x50>)
   b56dc:	4813      	ldr	r0, [pc, #76]	; (b572c <_Z18initializePinModesv+0x54>)
   b56de:	f7fe fd45 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b56e2:	2102      	movs	r1, #2
   b56e4:	2004      	movs	r0, #4
   b56e6:	f005 ff25 	bl	bb534 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b56ea:	2100      	movs	r1, #0
   b56ec:	2008      	movs	r0, #8
   b56ee:	f005 ff21 	bl	bb534 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b56f2:	2101      	movs	r1, #1
   b56f4:	2007      	movs	r0, #7
   b56f6:	f005 ff1d 	bl	bb534 <pinMode>
    pinMode(INT_PIN, INPUT);
   b56fa:	2100      	movs	r1, #0
   b56fc:	2012      	movs	r0, #18
   b56fe:	f005 ff19 	bl	bb534 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b5702:	2101      	movs	r1, #1
   b5704:	2011      	movs	r0, #17
   b5706:	f005 ff15 	bl	bb534 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b570a:	2101      	movs	r1, #1
   b570c:	2010      	movs	r0, #16
   b570e:	f005 ff11 	bl	bb534 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b5712:	2100      	movs	r1, #0
   b5714:	2010      	movs	r0, #16
   b5716:	f005 ff1e 	bl	bb556 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b571a:	2100      	movs	r1, #0
   b571c:	2011      	movs	r0, #17
   b571e:	f005 ff1a 	bl	bb556 <digitalWrite>
    return true;
}
   b5722:	2001      	movs	r0, #1
   b5724:	bd08      	pop	{r3, pc}
   b5726:	bf00      	nop
   b5728:	000bcc00 	.word	0x000bcc00
   b572c:	2003e658 	.word	0x2003e658

000b5730 <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b5730:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b5732:	4918      	ldr	r1, [pc, #96]	; (b5794 <_Z18initializePowerCfgv+0x64>)
   b5734:	4818      	ldr	r0, [pc, #96]	; (b5798 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b5736:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b5738:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b573a:	f7fe fd17 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b573e:	4622      	mov	r2, r4
   b5740:	2100      	movs	r1, #0
   b5742:	4668      	mov	r0, sp
   b5744:	f006 fd36 	bl	bc1b4 <memset>
   b5748:	4622      	mov	r2, r4
   b574a:	2100      	movs	r1, #0
   b574c:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b5750:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b5754:	f006 fd2e 	bl	bc1b4 <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   b5758:	2100      	movs	r1, #0
   b575a:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b575e:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b5762:	f003 f8bb 	bl	b88dc <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b5766:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b576a:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b576e:	4b0b      	ldr	r3, [pc, #44]	; (b579c <_Z18initializePowerCfgv+0x6c>)
   b5770:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b5772:	f241 0370 	movw	r3, #4208	; 0x1070
   b5776:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b577a:	9b00      	ldr	r3, [sp, #0]
   b577c:	2100      	movs	r1, #0
   b577e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b5782:	4668      	mov	r0, sp
   b5784:	9300      	str	r3, [sp, #0]
   b5786:	f003 f8a9 	bl	b88dc <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b578a:	3800      	subs	r0, #0
   b578c:	bf18      	it	ne
   b578e:	2001      	movne	r0, #1
   b5790:	b010      	add	sp, #64	; 0x40
   b5792:	bd10      	pop	{r4, pc}
   b5794:	000bcc19 	.word	0x000bcc19
   b5798:	2003e658 	.word	0x2003e658
   b579c:	03840384 	.word	0x03840384

000b57a0 <_Z20setNodeConfigurationv>:
 */

#include "Particle.h"
#include "MyPersistentData.h"

void setNodeConfiguration() {
   b57a0:	b508      	push	{r3, lr}
  Log.info("Setting values for the node");
   b57a2:	4905      	ldr	r1, [pc, #20]	; (b57b8 <_Z20setNodeConfigurationv+0x18>)
   b57a4:	4805      	ldr	r0, [pc, #20]	; (b57bc <_Z20setNodeConfigurationv+0x1c>)
   b57a6:	f7fe fce1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b57aa:	f7ff fd2d 	bl	b5208 <_ZN13sysStatusData8instanceEv>
  // sysStatus.set_deviceID(32148);
  // sysStatus.set_structuresVersion(14);
   b57ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sysStatus.set_sensorType(true); // Default is the car counter (true for PIR)
   b57b2:	2101      	movs	r1, #1
   b57b4:	f7ff beea 	b.w	b558c <_ZN13sysStatusData14set_sensorTypeEb>
   b57b8:	000bcc40 	.word	0x000bcc40
   b57bc:	2003e658 	.word	0x2003e658

000b57c0 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b57c0:	4770      	bx	lr

000b57c2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b57c2:	6a00      	ldr	r0, [r0, #32]
   b57c4:	6803      	ldr	r3, [r0, #0]
   b57c6:	68db      	ldr	r3, [r3, #12]
   b57c8:	4718      	bx	r3
	...

000b57cc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b57cc:	4b0a      	ldr	r3, [pc, #40]	; (b57f8 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b57ce:	b510      	push	{r4, lr}
   b57d0:	4604      	mov	r4, r0
   b57d2:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b57d4:	f003 fff8 	bl	b97c8 <_ZN5spark10LogManager8instanceEv>
   b57d8:	4621      	mov	r1, r4
   b57da:	f004 fa30 	bl	b9c3e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b57de:	f005 fd91 	bl	bb304 <_Z16_fetch_usbserialv>
   b57e2:	f005 fd81 	bl	bb2e8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b57e6:	4620      	mov	r0, r4
   b57e8:	4b04      	ldr	r3, [pc, #16]	; (b57fc <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b57ea:	f840 3b04 	str.w	r3, [r0], #4
   b57ee:	f004 f8c1 	bl	b9974 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b57f2:	4620      	mov	r0, r4
   b57f4:	bd10      	pop	{r4, pc}
   b57f6:	bf00      	nop
   b57f8:	000bcc7c 	.word	0x000bcc7c
   b57fc:	000bcc64 	.word	0x000bcc64

000b5800 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b5800:	b510      	push	{r4, lr}
   b5802:	4604      	mov	r4, r0
    }
   b5804:	f7ff ffe2 	bl	b57cc <_ZN5spark16SerialLogHandlerD1Ev>
   b5808:	4620      	mov	r0, r4
   b580a:	2124      	movs	r1, #36	; 0x24
   b580c:	f7fe fc47 	bl	b409e <_ZdlPvj>
   b5810:	4620      	mov	r0, r4
   b5812:	bd10      	pop	{r4, pc}

000b5814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b5814:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b5816:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5818:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b581a:	b17c      	cbz	r4, b583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b581c:	6863      	ldr	r3, [r4, #4]
   b581e:	3b01      	subs	r3, #1
   b5820:	6063      	str	r3, [r4, #4]
   b5822:	b95b      	cbnz	r3, b583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b5824:	6823      	ldr	r3, [r4, #0]
   b5826:	4620      	mov	r0, r4
   b5828:	689b      	ldr	r3, [r3, #8]
   b582a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b582c:	68a3      	ldr	r3, [r4, #8]
   b582e:	3b01      	subs	r3, #1
   b5830:	60a3      	str	r3, [r4, #8]
   b5832:	b91b      	cbnz	r3, b583c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b5834:	6823      	ldr	r3, [r4, #0]
   b5836:	4620      	mov	r0, r4
   b5838:	68db      	ldr	r3, [r3, #12]
   b583a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b583c:	4628      	mov	r0, r5
   b583e:	bd38      	pop	{r3, r4, r5, pc}

000b5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5840:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5842:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5846:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5848:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b584a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b584e:	42ae      	cmp	r6, r5
   b5850:	d004      	beq.n	b585c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5852:	4628      	mov	r0, r5
   b5854:	f005 f97a 	bl	bab4c <_ZN6StringD1Ev>
   b5858:	3514      	adds	r5, #20
   b585a:	e7f8      	b.n	b584e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b585c:	6820      	ldr	r0, [r4, #0]
   b585e:	f003 f8eb 	bl	b8a38 <free>
    AllocatorT::free(data_);
}
   b5862:	4620      	mov	r0, r4
   b5864:	bd70      	pop	{r4, r5, r6, pc}

000b5866 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5866:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b586a:	4604      	mov	r4, r0
   b586c:	460d      	mov	r5, r1
   b586e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5870:	d916      	bls.n	b58a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5872:	4290      	cmp	r0, r2
   b5874:	d215      	bcs.n	b58a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5876:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b587a:	1a75      	subs	r5, r6, r1
   b587c:	f1a1 0714 	sub.w	r7, r1, #20
   b5880:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5882:	42b7      	cmp	r7, r6
   b5884:	d01c      	beq.n	b58c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5886:	b12c      	cbz	r4, b5894 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5888:	4631      	mov	r1, r6
   b588a:	4620      	mov	r0, r4
   b588c:	f005 f9da 	bl	bac44 <_ZN6StringC1EOS_>
   b5890:	7c33      	ldrb	r3, [r6, #16]
   b5892:	7423      	strb	r3, [r4, #16]
   b5894:	4630      	mov	r0, r6
   b5896:	f005 f959 	bl	bab4c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b589a:	3e14      	subs	r6, #20
   b589c:	3c14      	subs	r4, #20
   b589e:	e7f0      	b.n	b5882 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b58a0:	d00e      	beq.n	b58c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b58a2:	42b5      	cmp	r5, r6
   b58a4:	d00c      	beq.n	b58c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b58a6:	b12c      	cbz	r4, b58b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b58a8:	4629      	mov	r1, r5
   b58aa:	4620      	mov	r0, r4
   b58ac:	f005 f9ca 	bl	bac44 <_ZN6StringC1EOS_>
   b58b0:	7c2b      	ldrb	r3, [r5, #16]
   b58b2:	7423      	strb	r3, [r4, #16]
   b58b4:	4628      	mov	r0, r5
   b58b6:	f005 f949 	bl	bab4c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b58ba:	3514      	adds	r5, #20
   b58bc:	3414      	adds	r4, #20
   b58be:	e7f0      	b.n	b58a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b58c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b58c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b58c6:	2300      	movs	r3, #0
   b58c8:	e9c0 3300 	strd	r3, r3, [r0]
   b58cc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b58ce:	684f      	ldr	r7, [r1, #4]
   b58d0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b58d2:	4604      	mov	r4, r0
   b58d4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b58d6:	dd23      	ble.n	b5920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b58d8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b58dc:	fb08 f007 	mul.w	r0, r8, r7
   b58e0:	f003 f8a2 	bl	b8a28 <malloc>
            if (!d) {
   b58e4:	4605      	mov	r5, r0
   b58e6:	b1d8      	cbz	r0, b5920 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b58e8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b58ec:	fb08 1202 	mla	r2, r8, r2, r1
   b58f0:	f7ff ffb9 	bl	b5866 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b58f4:	6820      	ldr	r0, [r4, #0]
   b58f6:	f003 f89f 	bl	b8a38 <free>
        data_ = d;
   b58fa:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b58fc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b58fe:	e9d6 7300 	ldrd	r7, r3, [r6]
   b5902:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b5906:	45b8      	cmp	r8, r7
   b5908:	d008      	beq.n	b591c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b590a:	4639      	mov	r1, r7
   b590c:	4628      	mov	r0, r5
   b590e:	f005 f9b3 	bl	bac78 <_ZN6StringC1ERKS_>
   b5912:	7c3b      	ldrb	r3, [r7, #16]
   b5914:	742b      	strb	r3, [r5, #16]
   b5916:	3714      	adds	r7, #20
   b5918:	3514      	adds	r5, #20
   b591a:	e7f4      	b.n	b5906 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b591c:	6873      	ldr	r3, [r6, #4]
   b591e:	6063      	str	r3, [r4, #4]
}
   b5920:	4620      	mov	r0, r4
   b5922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b5928 <_GLOBAL__sub_I_SystemMode>:
    if (Particle.connected()) Particle.publish("Mode","Set Sensor Mode to PIR", PRIVATE);
    return 1;
  }

  else return 0;
   b5928:	b570      	push	{r4, r5, r6, lr}
   b592a:	4b27      	ldr	r3, [pc, #156]	; (b59c8 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   b592c:	4a27      	ldr	r2, [pc, #156]	; (b59cc <_GLOBAL__sub_I_SystemMode+0xa4>)
   b592e:	2501      	movs	r5, #1
   b5930:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5932:	4b27      	ldr	r3, [pc, #156]	; (b59d0 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5934:	2400      	movs	r4, #0
   b5936:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b5938:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b593a:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b593e:	2002      	movs	r0, #2
   b5940:	f002 ff88 	bl	b8854 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b5944:	4621      	mov	r1, r4
   b5946:	4628      	mov	r0, r5
   b5948:	f002 ff9c 	bl	b8884 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b594c:	4629      	mov	r1, r5
   b594e:	2004      	movs	r0, #4
   b5950:	f002 fd5e 	bl	b8410 <HAL_Feature_Set>
        capacity_(0) {
   b5954:	e9cd 4400 	strd	r4, r4, [sp]
   b5958:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b595a:	f005 fcd3 	bl	bb304 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b595e:	4c1d      	ldr	r4, [pc, #116]	; (b59d4 <_GLOBAL__sub_I_SystemMode+0xac>)
   b5960:	4605      	mov	r5, r0
   b5962:	4669      	mov	r1, sp
   b5964:	a803      	add	r0, sp, #12
   b5966:	f7ff ffac 	bl	b58c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b596a:	4626      	mov	r6, r4
        stream_(&stream) {
   b596c:	a903      	add	r1, sp, #12
   b596e:	a806      	add	r0, sp, #24
   b5970:	f7ff ffa7 	bl	b58c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5974:	4b18      	ldr	r3, [pc, #96]	; (b59d8 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b5976:	f846 3b04 	str.w	r3, [r6], #4
   b597a:	a906      	add	r1, sp, #24
   b597c:	a809      	add	r0, sp, #36	; 0x24
   b597e:	f7ff ffa0 	bl	b58c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5982:	aa09      	add	r2, sp, #36	; 0x24
   b5984:	211e      	movs	r1, #30
   b5986:	4630      	mov	r0, r6
   b5988:	f004 fa3c 	bl	b9e04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b598c:	a809      	add	r0, sp, #36	; 0x24
   b598e:	f7ff ff57 	bl	b5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5992:	a806      	add	r0, sp, #24
   b5994:	f7ff ff54 	bl	b5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5998:	4b10      	ldr	r3, [pc, #64]	; (b59dc <_GLOBAL__sub_I_SystemMode+0xb4>)
   b599a:	6023      	str	r3, [r4, #0]
   b599c:	6225      	str	r5, [r4, #32]
   b599e:	a803      	add	r0, sp, #12
   b59a0:	f7ff ff4e 	bl	b5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b59a4:	4b0e      	ldr	r3, [pc, #56]	; (b59e0 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b59a6:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b59a8:	f005 fcac 	bl	bb304 <_Z16_fetch_usbserialv>
   b59ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b59b0:	f005 fc96 	bl	bb2e0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b59b4:	f003 ff08 	bl	b97c8 <_ZN5spark10LogManager8instanceEv>
   b59b8:	4621      	mov	r1, r4
   b59ba:	f004 f8f9 	bl	b9bb0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b59be:	4668      	mov	r0, sp
   b59c0:	f7ff ff3e 	bl	b5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b59c4:	b00c      	add	sp, #48	; 0x30
   b59c6:	bd70      	pop	{r4, r5, r6, pc}
   b59c8:	2003e3a4 	.word	0x2003e3a4
   b59cc:	ffff0000 	.word	0xffff0000
   b59d0:	2003e398 	.word	0x2003e398
   b59d4:	2003e3a8 	.word	0x2003e3a8
   b59d8:	000bcc64 	.word	0x000bcc64
   b59dc:	000bd4e4 	.word	0x000bd4e4
   b59e0:	000bcc7c 	.word	0x000bcc7c

000b59e4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   b59e4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b59e6:	6803      	ldr	r3, [r0, #0]
   b59e8:	2b2f      	cmp	r3, #47	; 0x2f
{
   b59ea:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   b59ec:	d904      	bls.n	b59f8 <nrf_gpio_pin_port_decode+0x14>
   b59ee:	4a07      	ldr	r2, [pc, #28]	; (b5a0c <nrf_gpio_pin_port_decode+0x28>)
   b59f0:	4907      	ldr	r1, [pc, #28]	; (b5a10 <nrf_gpio_pin_port_decode+0x2c>)
   b59f2:	200a      	movs	r0, #10
   b59f4:	f002 fef4 	bl	b87e0 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b59f8:	6823      	ldr	r3, [r4, #0]
   b59fa:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b59fc:	bf83      	ittte	hi
   b59fe:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b5a02:	4804      	ldrhi	r0, [pc, #16]	; (b5a14 <nrf_gpio_pin_port_decode+0x30>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b5a04:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   b5a06:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   b5a0a:	bd10      	pop	{r4, pc}
   b5a0c:	000b8431 	.word	0x000b8431
   b5a10:	000bcd05 	.word	0x000bcd05
   b5a14:	50000300 	.word	0x50000300

000b5a18 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b5a18:	ee07 0a90 	vmov	s15, r0
   b5a1c:	ed9f 7a09 	vldr	s14, [pc, #36]	; b5a44 <_Z17tmp36TemperatureCi+0x2c>
   b5a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b5a24:	ee67 7a87 	vmul.f32	s15, s15, s14
   b5a28:	ed9f 7a07 	vldr	s14, [pc, #28]	; b5a48 <_Z17tmp36TemperatureCi+0x30>
   b5a2c:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b5a30:	eddf 7a06 	vldr	s15, [pc, #24]	; b5a4c <_Z17tmp36TemperatureCi+0x34>
   b5a34:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b5a38:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b5a3c:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5a40:	4770      	bx	lr
   b5a42:	bf00      	nop
   b5a44:	454e4000 	.word	0x454e4000
   b5a48:	457ff000 	.word	0x457ff000
   b5a4c:	43fa0000 	.word	0x43fa0000

000b5a50 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b5a50:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b5a52:	2101      	movs	r1, #1
   b5a54:	a801      	add	r0, sp, #4
   b5a56:	f004 fd88 	bl	ba56a <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5a5a:	f7ff fc25 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5a5e:	f7ff fd0a 	bl	b5476 <_ZNK17currentStatusData17get_internalTempCEv>
   b5a62:	f7ff fc21 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5a66:	f7ff fd06 	bl	b5476 <_ZNK17currentStatusData17get_internalTempCEv>
   b5a6a:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5a6c:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b5a6e:	d90d      	bls.n	b5a8c <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b5a70:	f004 fe0e 	bl	ba690 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b5a74:	f7ff fc18 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5a78:	2101      	movs	r1, #1
   b5a7a:	f7ff fd3b 	bl	b54f4 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b5a7e:	2400      	movs	r4, #0
  PMIC pmic(true);
   b5a80:	a801      	add	r0, sp, #4
   b5a82:	f004 fd81 	bl	ba588 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b5a86:	4620      	mov	r0, r4
   b5a88:	b002      	add	sp, #8
   b5a8a:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b5a8c:	f004 fde5 	bl	ba65a <_ZN4PMIC14enableChargingEv>
    return true;
   b5a90:	2401      	movs	r4, #1
   b5a92:	e7f5      	b.n	b5a80 <_Z16isItSafeToChargev+0x30>

000b5a94 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   b5a94:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5a96:	4d19      	ldr	r5, [pc, #100]	; (b5afc <_Z17getSignalStrengthv+0x68>)
   b5a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b5a9a:	b097      	sub	sp, #92	; 0x5c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b5a9c:	ac0c      	add	r4, sp, #48	; 0x30
   b5a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5aa4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5aa8:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b5aac:	4914      	ldr	r1, [pc, #80]	; (b5b00 <_Z17getSignalStrengthv+0x6c>)
   b5aae:	a804      	add	r0, sp, #16
   b5ab0:	f003 f890 	bl	b8bd4 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b5ab4:	a804      	add	r0, sp, #16
   b5ab6:	f003 f8d0 	bl	b8c5a <_ZNK14CellularSignal19getAccessTechnologyEv>
   b5aba:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b5abc:	a804      	add	r0, sp, #16
   b5abe:	f003 f905 	bl	b8ccc <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b5ac2:	a804      	add	r0, sp, #16
  float strengthPercentage = sig.getStrength();
   b5ac4:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b5ac8:	f003 f930 	bl	b8d2c <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5acc:	ab16      	add	r3, sp, #88	; 0x58
  float qualityPercentage = sig.getQuality();
   b5ace:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b5ad2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b5ad6:	f005 ffa3 	bl	bba20 <__aeabi_f2d>
   b5ada:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5ade:	4628      	mov	r0, r5
   b5ae0:	f005 ff9e 	bl	bba20 <__aeabi_f2d>
   b5ae4:	e9cd 0100 	strd	r0, r1, [sp]
   b5ae8:	4a06      	ldr	r2, [pc, #24]	; (b5b04 <_Z17getSignalStrengthv+0x70>)
   b5aea:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b5aee:	4806      	ldr	r0, [pc, #24]	; (b5b08 <_Z17getSignalStrengthv+0x74>)
   b5af0:	2140      	movs	r1, #64	; 0x40
   b5af2:	f002 ffb9 	bl	b8a68 <snprintf>
}
   b5af6:	b017      	add	sp, #92	; 0x5c
   b5af8:	bd30      	pop	{r4, r5, pc}
   b5afa:	bf00      	nop
   b5afc:	000bcda8 	.word	0x000bcda8
   b5b00:	2003e614 	.word	0x2003e614
   b5b04:	000bcd29 	.word	0x000bcd29
   b5b08:	2003de84 	.word	0x2003de84

000b5b0c <_Z11recordCountv>:
 * is the same regardless.  The sensor will trigger an interrupt, which will set a flag. In the main loop
 * that flag will call this function which will determine if this event should "count" as a visitor.
 * 
 */
void recordCount() // This is where we check to see if an interrupt is set when not asleep or act on a tap that woke the device
{
   b5b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5b0e:	4e4e      	ldr	r6, [pc, #312]	; (b5c48 <_Z11recordCountv+0x13c>)
   b5b10:	4c4e      	ldr	r4, [pc, #312]	; (b5c4c <_Z11recordCountv+0x140>)
   b5b12:	7833      	ldrb	r3, [r6, #0]
   b5b14:	f3bf 8f5b 	dmb	ish
   b5b18:	f013 0f01 	tst.w	r3, #1
   b5b1c:	b085      	sub	sp, #20
   b5b1e:	d109      	bne.n	b5b34 <_Z11recordCountv+0x28>
   b5b20:	4630      	mov	r0, r6
   b5b22:	f7fe facb 	bl	b40bc <__cxa_guard_acquire>
   b5b26:	b128      	cbz	r0, b5b34 <_Z11recordCountv+0x28>
   b5b28:	f002 fcb2 	bl	b8490 <HAL_Pin_Map>
   b5b2c:	6020      	str	r0, [r4, #0]
   b5b2e:	4630      	mov	r0, r6
   b5b30:	f7fe fac9 	bl	b40c6 <__cxa_guard_release>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5b34:	4b46      	ldr	r3, [pc, #280]	; (b5c50 <_Z11recordCountv+0x144>)
   b5b36:	881d      	ldrh	r5, [r3, #0]
   b5b38:	6823      	ldr	r3, [r4, #0]
   b5b3a:	012d      	lsls	r5, r5, #4
   b5b3c:	5d5b      	ldrb	r3, [r3, r5]
   b5b3e:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5b40:	7833      	ldrb	r3, [r6, #0]
   b5b42:	f3bf 8f5b 	dmb	ish
   b5b46:	07d9      	lsls	r1, r3, #31
   b5b48:	d409      	bmi.n	b5b5e <_Z11recordCountv+0x52>
   b5b4a:	483f      	ldr	r0, [pc, #252]	; (b5c48 <_Z11recordCountv+0x13c>)
   b5b4c:	f7fe fab6 	bl	b40bc <__cxa_guard_acquire>
   b5b50:	b128      	cbz	r0, b5b5e <_Z11recordCountv+0x52>
   b5b52:	f002 fc9d 	bl	b8490 <HAL_Pin_Map>
   b5b56:	6020      	str	r0, [r4, #0]
   b5b58:	483b      	ldr	r0, [pc, #236]	; (b5c48 <_Z11recordCountv+0x13c>)
   b5b5a:	f7fe fab4 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5b5e:	6823      	ldr	r3, [r4, #0]
   b5b60:	442b      	add	r3, r5
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5b62:	a803      	add	r0, sp, #12
   b5b64:	785b      	ldrb	r3, [r3, #1]
   b5b66:	f003 031f 	and.w	r3, r3, #31
   b5b6a:	433b      	orrs	r3, r7
   b5b6c:	9303      	str	r3, [sp, #12]
   b5b6e:	f7ff ff39 	bl	b59e4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b5b72:	9a03      	ldr	r2, [sp, #12]
   b5b74:	2301      	movs	r3, #1
   b5b76:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   b5b78:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(BLUE_LED);                                               // Turn on the blue LED

  current.set_lastCountTime(Time.now());
   b5b7c:	f7ff fb94 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5b80:	4607      	mov	r7, r0
   b5b82:	f005 fad8 	bl	bb136 <_ZN9TimeClass3nowEv>
   b5b86:	4602      	mov	r2, r0
   b5b88:	17c3      	asrs	r3, r0, #31
   b5b8a:	4638      	mov	r0, r7
   b5b8c:	f7ff fd4e 	bl	b562c <_ZN17currentStatusData17set_lastCountTimeEx>
  current.set_hourlyCount(current.get_hourlyCount() +1);                                              // Increment the PersonCount
   b5b90:	f7ff fb8a 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5b94:	4607      	mov	r7, r0
   b5b96:	f7ff fb87 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5b9a:	f7ff fc0a 	bl	b53b2 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5b9e:	3001      	adds	r0, #1
   b5ba0:	b281      	uxth	r1, r0
   b5ba2:	4638      	mov	r0, r7
   b5ba4:	f7ff fc3f 	bl	b5426 <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_dailyCount(current.get_dailyCount() +1);                                               // Increment the PersonCount
   b5ba8:	f7ff fb7e 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5bac:	4607      	mov	r7, r0
   b5bae:	f7ff fb7b 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5bb2:	f7ff fc03 	bl	b53bc <_ZNK17currentStatusData14get_dailyCountEv>
   b5bb6:	3001      	adds	r0, #1
   b5bb8:	b281      	uxth	r1, r0
   b5bba:	4638      	mov	r0, r7
   b5bbc:	f7ff fc39 	bl	b5432 <_ZN17currentStatusData14set_dailyCountEt>
  Log.info("Count, hourly: %i. daily: %i",current.get_hourlyCount(),current.get_dailyCount());
   b5bc0:	f7ff fb72 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5bc4:	f7ff fbf5 	bl	b53b2 <_ZNK17currentStatusData15get_hourlyCountEv>
   b5bc8:	9001      	str	r0, [sp, #4]
   b5bca:	f7ff fb6d 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5bce:	f7ff fbf5 	bl	b53bc <_ZNK17currentStatusData14get_dailyCountEv>
   b5bd2:	9a01      	ldr	r2, [sp, #4]
   b5bd4:	491f      	ldr	r1, [pc, #124]	; (b5c54 <_Z11recordCountv+0x148>)
   b5bd6:	4603      	mov	r3, r0
   b5bd8:	481f      	ldr	r0, [pc, #124]	; (b5c58 <_Z11recordCountv+0x14c>)
   b5bda:	f7fe fac7 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
  delay(200);
   b5bde:	20c8      	movs	r0, #200	; 0xc8
   b5be0:	f002 ff92 	bl	b8b08 <delay>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5be4:	7833      	ldrb	r3, [r6, #0]
   b5be6:	f3bf 8f5b 	dmb	ish
   b5bea:	07da      	lsls	r2, r3, #31
   b5bec:	d409      	bmi.n	b5c02 <_Z11recordCountv+0xf6>
   b5bee:	4816      	ldr	r0, [pc, #88]	; (b5c48 <_Z11recordCountv+0x13c>)
   b5bf0:	f7fe fa64 	bl	b40bc <__cxa_guard_acquire>
   b5bf4:	b128      	cbz	r0, b5c02 <_Z11recordCountv+0xf6>
   b5bf6:	f002 fc4b 	bl	b8490 <HAL_Pin_Map>
   b5bfa:	6020      	str	r0, [r4, #0]
   b5bfc:	4812      	ldr	r0, [pc, #72]	; (b5c48 <_Z11recordCountv+0x13c>)
   b5bfe:	f7fe fa62 	bl	b40c6 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5c02:	6823      	ldr	r3, [r4, #0]
   b5c04:	5d5b      	ldrb	r3, [r3, r5]
   b5c06:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   b5c08:	7833      	ldrb	r3, [r6, #0]
   b5c0a:	f3bf 8f5b 	dmb	ish
   b5c0e:	07db      	lsls	r3, r3, #31
   b5c10:	d409      	bmi.n	b5c26 <_Z11recordCountv+0x11a>
   b5c12:	480d      	ldr	r0, [pc, #52]	; (b5c48 <_Z11recordCountv+0x13c>)
   b5c14:	f7fe fa52 	bl	b40bc <__cxa_guard_acquire>
   b5c18:	b128      	cbz	r0, b5c26 <_Z11recordCountv+0x11a>
   b5c1a:	f002 fc39 	bl	b8490 <HAL_Pin_Map>
   b5c1e:	6020      	str	r0, [r4, #0]
   b5c20:	4809      	ldr	r0, [pc, #36]	; (b5c48 <_Z11recordCountv+0x13c>)
   b5c22:	f7fe fa50 	bl	b40c6 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   b5c26:	6823      	ldr	r3, [r4, #0]
   b5c28:	441d      	add	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   b5c2a:	a803      	add	r0, sp, #12
   b5c2c:	786b      	ldrb	r3, [r5, #1]
   b5c2e:	f003 031f 	and.w	r3, r3, #31
   b5c32:	433b      	orrs	r3, r7
   b5c34:	9303      	str	r3, [sp, #12]
   b5c36:	f7ff fed5 	bl	b59e4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b5c3a:	9a03      	ldr	r2, [sp, #12]
   b5c3c:	2301      	movs	r3, #1
   b5c3e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b5c40:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(BLUE_LED);
   b5c44:	b005      	add	sp, #20
   b5c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5c48:	2003e3cc 	.word	0x2003e3cc
   b5c4c:	2003e3d0 	.word	0x2003e3d0
   b5c50:	000bcc34 	.word	0x000bcc34
   b5c54:	000bcd42 	.word	0x000bcd42
   b5c58:	2003e658 	.word	0x2003e658

000b5c5c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b5c5c:	b530      	push	{r4, r5, lr}
   b5c5e:	b085      	sub	sp, #20
   b5c60:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b5c62:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b5c64:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b5c66:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b5c68:	f002 fde2 	bl	b8830 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b5c6c:	b990      	cbnz	r0, b5c94 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b5c6e:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b5c70:	b10c      	cbz	r4, b5c76 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b5c72:	6923      	ldr	r3, [r4, #16]
   b5c74:	b923      	cbnz	r3, b5c80 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b5c76:	4a08      	ldr	r2, [pc, #32]	; (b5c98 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b5c78:	4908      	ldr	r1, [pc, #32]	; (b5c9c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b5c7a:	200a      	movs	r0, #10
   b5c7c:	f002 fdb0 	bl	b87e0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b5c80:	230c      	movs	r3, #12
   b5c82:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b5c86:	2304      	movs	r3, #4
   b5c88:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b5c8a:	aa01      	add	r2, sp, #4
   b5c8c:	6923      	ldr	r3, [r4, #16]
   b5c8e:	2101      	movs	r1, #1
   b5c90:	4620      	mov	r0, r4
   b5c92:	4798      	blx	r3
}
   b5c94:	b005      	add	sp, #20
   b5c96:	bd30      	pop	{r4, r5, pc}
   b5c98:	000b8431 	.word	0x000b8431
   b5c9c:	000bcd5f 	.word	0x000bcd5f

000b5ca0 <_Z12batteryStatev>:
bool batteryState() {
   b5ca0:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b5ca2:	f7ff fb01 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b5ca6:	a901      	add	r1, sp, #4
   b5ca8:	4604      	mov	r4, r0
   b5caa:	2007      	movs	r0, #7
   b5cac:	f7ff ffd6 	bl	b5c5c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   b5cb0:	1e01      	subs	r1, r0, #0
            return r;
        }
        return val;
   b5cb2:	bfa8      	it	ge
   b5cb4:	9901      	ldrge	r1, [sp, #4]
   b5cb6:	4620      	mov	r0, r4
   b5cb8:	b2c9      	uxtb	r1, r1
   b5cba:	f7ff fc1b 	bl	b54f4 <_ZN17currentStatusData16set_batteryStateEh>
  if (sysStatus.get_lowPowerMode()) {                                        // Need to take these steps if we are sleeping
   b5cbe:	f7ff faa3 	bl	b5208 <_ZN13sysStatusData8instanceEv>
   b5cc2:	f7ff fc35 	bl	b5530 <_ZNK13sysStatusData16get_lowPowerModeEv>
   b5cc6:	b130      	cbz	r0, b5cd6 <_Z12batteryStatev+0x36>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b5cc8:	4817      	ldr	r0, [pc, #92]	; (b5d28 <_Z12batteryStatev+0x88>)
   b5cca:	f003 f8f9 	bl	b8ec0 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b5cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b5cd2:	f002 ff19 	bl	b8b08 <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b5cd6:	f7ff fae7 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5cda:	a901      	add	r1, sp, #4
   b5cdc:	4604      	mov	r4, r0
   b5cde:	2003      	movs	r0, #3
   b5ce0:	f7ff ffbc 	bl	b5c5c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   b5ce4:	b9e8      	cbnz	r0, b5d22 <_Z12batteryStatev+0x82>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b5ce6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b5cea:	ee07 3a90 	vmov	s15, r3
   b5cee:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b5cf2:	ee17 0a90 	vmov	r0, s15
   b5cf6:	f005 fe93 	bl	bba20 <__aeabi_f2d>
   b5cfa:	ec41 0b10 	vmov	d0, r0, r1
   b5cfe:	4620      	mov	r0, r4
   b5d00:	f7ff fb0e 	bl	b5320 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b5d04:	f7ff fad0 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5d08:	f7ff faea 	bl	b52e0 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b5d0c:	4b07      	ldr	r3, [pc, #28]	; (b5d2c <_Z12batteryStatev+0x8c>)
   b5d0e:	ec51 0b10 	vmov	r0, r1, d0
   b5d12:	2200      	movs	r2, #0
   b5d14:	f006 f96c 	bl	bbff0 <__aeabi_dcmpgt>
}
   b5d18:	3800      	subs	r0, #0
   b5d1a:	bf18      	it	ne
   b5d1c:	2001      	movne	r0, #1
   b5d1e:	b002      	add	sp, #8
   b5d20:	bd10      	pop	{r4, pc}
            return -1.0f;
   b5d22:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b5d26:	e7e4      	b.n	b5cf2 <_Z12batteryStatev+0x52>
   b5d28:	2003e3d4 	.word	0x2003e3d4
   b5d2c:	404e0000 	.word	0x404e0000

000b5d30 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b5d30:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b5d32:	f7ff fab9 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5d36:	4b14      	ldr	r3, [pc, #80]	; (b5d88 <_Z16takeMeasurementsv+0x58>)
   b5d38:	4604      	mov	r4, r0
   b5d3a:	8818      	ldrh	r0, [r3, #0]
   b5d3c:	f005 fc37 	bl	bb5ae <analogRead>
   b5d40:	f7ff fe6a 	bl	b5a18 <_Z17tmp36TemperatureCi>
   b5d44:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b5d48:	4620      	mov	r0, r4
   b5d4a:	edcd 7a01 	vstr	s15, [sp, #4]
   b5d4e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b5d52:	4c0e      	ldr	r4, [pc, #56]	; (b5d8c <_Z16takeMeasurementsv+0x5c>)
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b5d54:	f7ff fbc8 	bl	b54e8 <_ZN17currentStatusData17set_internalTempCEh>
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.get_internalTempC());
   b5d58:	f7ff faa6 	bl	b52a8 <_ZN17currentStatusData8instanceEv>
   b5d5c:	f7ff fb8b 	bl	b5476 <_ZNK17currentStatusData17get_internalTempCEv>
   b5d60:	4a0b      	ldr	r2, [pc, #44]	; (b5d90 <_Z16takeMeasurementsv+0x60>)
   b5d62:	4603      	mov	r3, r0
   b5d64:	2110      	movs	r1, #16
   b5d66:	4620      	mov	r0, r4
   b5d68:	f002 fe7e 	bl	b8a68 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   b5d6c:	4909      	ldr	r1, [pc, #36]	; (b5d94 <_Z16takeMeasurementsv+0x64>)
   b5d6e:	480a      	ldr	r0, [pc, #40]	; (b5d98 <_Z16takeMeasurementsv+0x68>)
   b5d70:	4622      	mov	r2, r4
   b5d72:	f7fe f9fb 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   b5d76:	f7ff ff93 	bl	b5ca0 <_Z12batteryStatev>
    isItSafeToCharge();
   b5d7a:	f7ff fe69 	bl	b5a50 <_Z16isItSafeToChargev>
    getSignalStrength();
   b5d7e:	f7ff fe89 	bl	b5a94 <_Z17getSignalStrengthv>
}
   b5d82:	2001      	movs	r0, #1
   b5d84:	b002      	add	sp, #8
   b5d86:	bd10      	pop	{r4, pc}
   b5d88:	000bcc3e 	.word	0x000bcc3e
   b5d8c:	2003de74 	.word	0x2003de74
   b5d90:	000bcd85 	.word	0x000bcd85
   b5d94:	000bcd8a 	.word	0x000bcd8a
   b5d98:	2003e658 	.word	0x2003e658

000b5d9c <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b5d9c:	4801      	ldr	r0, [pc, #4]	; (b5da4 <_GLOBAL__sub_I_batteryContext+0x8>)
   b5d9e:	2100      	movs	r1, #0
   b5da0:	f003 b84a 	b.w	b8e38 <_ZN9FuelGaugeC1Eb>
   b5da4:	2003e3d4 	.word	0x2003e3d4

000b5da8 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b5da8:	4770      	bx	lr

000b5daa <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b5daa:	b510      	push	{r4, lr}
}
   b5dac:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b5dae:	4604      	mov	r4, r0
}
   b5db0:	f7fe f975 	bl	b409e <_ZdlPvj>
   b5db4:	4620      	mov	r0, r4
   b5db6:	bd10      	pop	{r4, pc}

000b5db8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b5db8:	b530      	push	{r4, r5, lr}
   b5dba:	b085      	sub	sp, #20
   b5dbc:	4604      	mov	r4, r0
   b5dbe:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b5dc0:	b160      	cbz	r0, b5ddc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b5dc2:	6840      	ldr	r0, [r0, #4]
   b5dc4:	b150      	cbz	r0, b5ddc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b5dc6:	6885      	ldr	r5, [r0, #8]
   b5dc8:	b145      	cbz	r5, b5ddc <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b5dca:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b5dce:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5dd2:	68c4      	ldr	r4, [r0, #12]
   b5dd4:	ab01      	add	r3, sp, #4
   b5dd6:	466a      	mov	r2, sp
   b5dd8:	a902      	add	r1, sp, #8
   b5dda:	47a0      	blx	r4
    }
   b5ddc:	b005      	add	sp, #20
   b5dde:	bd30      	pop	{r4, r5, pc}

000b5de0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5de0:	b530      	push	{r4, r5, lr}
   b5de2:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b5de4:	6800      	ldr	r0, [r0, #0]
   b5de6:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b5dee:	6883      	ldr	r3, [r0, #8]
   b5df0:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b5df4:	b90b      	cbnz	r3, b5dfa <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b5df6:	f005 fcab 	bl	bb750 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5dfa:	68c3      	ldr	r3, [r0, #12]
   b5dfc:	aa01      	add	r2, sp, #4
   b5dfe:	a902      	add	r1, sp, #8
   b5e00:	4798      	blx	r3
      }
   b5e02:	b005      	add	sp, #20
   b5e04:	bd30      	pop	{r4, r5, pc}

000b5e06 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b5e06:	2a01      	cmp	r2, #1
   b5e08:	d102      	bne.n	b5e10 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5e0a:	6001      	str	r1, [r0, #0]
      }
   b5e0c:	2000      	movs	r0, #0
   b5e0e:	4770      	bx	lr
	  switch (__op)
   b5e10:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b5e12:	bf04      	itt	eq
   b5e14:	680b      	ldreq	r3, [r1, #0]
   b5e16:	6003      	streq	r3, [r0, #0]
	      break;
   b5e18:	e7f8      	b.n	b5e0c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b5e1a <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5e1a:	6803      	ldr	r3, [r0, #0]
   b5e1c:	6812      	ldr	r2, [r2, #0]
   b5e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5e22:	4718      	bx	r3

000b5e24 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5e24:	b510      	push	{r4, lr}
      if (_M_manager)
   b5e26:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5e28:	4604      	mov	r4, r0
      if (_M_manager)
   b5e2a:	b113      	cbz	r3, b5e32 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5e2c:	2203      	movs	r2, #3
   b5e2e:	4601      	mov	r1, r0
   b5e30:	4798      	blx	r3
    }
   b5e32:	4620      	mov	r0, r4
   b5e34:	bd10      	pop	{r4, pc}

000b5e36 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b5e36:	b510      	push	{r4, lr}
            delete callableWrapper;
   b5e38:	4604      	mov	r4, r0
   b5e3a:	b138      	cbz	r0, b5e4c <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b5e3c:	f7ff fff2 	bl	b5e24 <_ZNSt14_Function_baseD1Ev>
   b5e40:	4620      	mov	r0, r4
   b5e42:	2110      	movs	r1, #16
        };
   b5e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b5e48:	f7fe b929 	b.w	b409e <_ZdlPvj>
        };
   b5e4c:	bd10      	pop	{r4, pc}

000b5e4e <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b5e4e:	b510      	push	{r4, lr}
   b5e50:	4604      	mov	r4, r0
   b5e52:	b08a      	sub	sp, #40	; 0x28
   b5e54:	4608      	mov	r0, r1
    attr.flags = 0;
   b5e56:	f04f 0c20 	mov.w	ip, #32
   b5e5a:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5e5c:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b5e60:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b5e64:	460b      	mov	r3, r1
   b5e66:	aa02      	add	r2, sp, #8
   b5e68:	6821      	ldr	r1, [r4, #0]
   b5e6a:	f002 fcc9 	bl	b8800 <log_message_v>
}
   b5e6e:	b00a      	add	sp, #40	; 0x28
   b5e70:	bd10      	pop	{r4, pc}

000b5e72 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b5e72:	b40e      	push	{r1, r2, r3}
   b5e74:	b503      	push	{r0, r1, lr}
   b5e76:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b5e78:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b5e7a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5e7e:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b5e80:	f7ff ffe5 	bl	b5e4e <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5e84:	b002      	add	sp, #8
   b5e86:	f85d eb04 	ldr.w	lr, [sp], #4
   b5e8a:	b003      	add	sp, #12
   b5e8c:	4770      	bx	lr

000b5e8e <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5e8e:	b40e      	push	{r1, r2, r3}
   b5e90:	b503      	push	{r0, r1, lr}
   b5e92:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b5e94:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b5e96:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b5e9a:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b5e9c:	f7ff ffd7 	bl	b5e4e <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b5ea0:	b002      	add	sp, #8
   b5ea2:	f85d eb04 	ldr.w	lr, [sp], #4
   b5ea6:	b003      	add	sp, #12
   b5ea8:	4770      	bx	lr
	...

000b5eac <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5eac:	b510      	push	{r4, lr}
   b5eae:	7202      	strb	r2, [r0, #8]
   b5eb0:	22ff      	movs	r2, #255	; 0xff
   b5eb2:	8142      	strh	r2, [r0, #10]
   b5eb4:	2200      	movs	r2, #0
   b5eb6:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b5eba:	6142      	str	r2, [r0, #20]
   b5ebc:	7602      	strb	r2, [r0, #24]
   b5ebe:	61c2      	str	r2, [r0, #28]
    instance = this;
   b5ec0:	4a02      	ldr	r2, [pc, #8]	; (b5ecc <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5ec2:	4c03      	ldr	r4, [pc, #12]	; (b5ed0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b5ec4:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b5ec6:	e9c0 4100 	strd	r4, r1, [r0]
}
   b5eca:	bd10      	pop	{r4, pc}
   b5ecc:	2003e3e0 	.word	0x2003e3e0
   b5ed0:	000bd020 	.word	0x000bd020

000b5ed4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b5ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5ed8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b5edc:	4604      	mov	r4, r0
   b5ede:	4689      	mov	r9, r1
   b5ee0:	4616      	mov	r6, r2
   b5ee2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b5ee4:	f1b8 0f00 	cmp.w	r8, #0
   b5ee8:	d002      	beq.n	b5ef0 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b5eea:	6840      	ldr	r0, [r0, #4]
   b5eec:	f003 f882 	bl	b8ff4 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b5ef0:	7a21      	ldrb	r1, [r4, #8]
   b5ef2:	6860      	ldr	r0, [r4, #4]
   b5ef4:	f003 f85b 	bl	b8fae <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b5ef8:	6860      	ldr	r0, [r4, #4]
   b5efa:	6803      	ldr	r3, [r0, #0]
   b5efc:	4649      	mov	r1, r9
   b5efe:	689b      	ldr	r3, [r3, #8]
   b5f00:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b5f02:	6860      	ldr	r0, [r4, #4]
   b5f04:	2100      	movs	r1, #0
   b5f06:	f003 f871 	bl	b8fec <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b5f0a:	4605      	mov	r5, r0
   b5f0c:	bb00      	cbnz	r0, b5f50 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5f0e:	2301      	movs	r3, #1
   b5f10:	7a21      	ldrb	r1, [r4, #8]
   b5f12:	6860      	ldr	r0, [r4, #4]
   b5f14:	463a      	mov	r2, r7
   b5f16:	f003 f838 	bl	b8f8a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b5f1a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b5f1c:	4603      	mov	r3, r0
        if (count == num) {
   b5f1e:	d109      	bne.n	b5f34 <_ZN6AB180513readRegistersEhPhjb+0x60>
   b5f20:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b5f22:	42be      	cmp	r6, r7
   b5f24:	d01c      	beq.n	b5f60 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b5f26:	6860      	ldr	r0, [r4, #4]
   b5f28:	6803      	ldr	r3, [r0, #0]
   b5f2a:	695b      	ldr	r3, [r3, #20]
   b5f2c:	4798      	blx	r3
   b5f2e:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b5f32:	e7f6      	b.n	b5f22 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b5f34:	490b      	ldr	r1, [pc, #44]	; (b5f64 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b5f36:	480c      	ldr	r0, [pc, #48]	; (b5f68 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5f38:	464a      	mov	r2, r9
   b5f3a:	f7ff ff9a 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b5f3e:	f1b8 0f00 	cmp.w	r8, #0
   b5f42:	d002      	beq.n	b5f4a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b5f44:	6860      	ldr	r0, [r4, #4]
   b5f46:	f003 f85e 	bl	b9006 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b5f4a:	4628      	mov	r0, r5
   b5f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b5f50:	4603      	mov	r3, r0
   b5f52:	4906      	ldr	r1, [pc, #24]	; (b5f6c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b5f54:	4804      	ldr	r0, [pc, #16]	; (b5f68 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b5f56:	464a      	mov	r2, r9
   b5f58:	f7ff ff8b 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b5f5c:	2500      	movs	r5, #0
   b5f5e:	e7ee      	b.n	b5f3e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b5f60:	2501      	movs	r5, #1
   b5f62:	e7ec      	b.n	b5f3e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b5f64:	000bcdd0 	.word	0x000bcdd0
   b5f68:	2003e3dc 	.word	0x2003e3dc
   b5f6c:	000bcdf5 	.word	0x000bcdf5

000b5f70 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b5f70:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b5f72:	9300      	str	r3, [sp, #0]
   b5f74:	2301      	movs	r3, #1
   b5f76:	f7ff ffad 	bl	b5ed4 <_ZN6AB180513readRegistersEhPhjb>
}
   b5f7a:	b003      	add	sp, #12
   b5f7c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5f80 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b5f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b5f82:	8943      	ldrh	r3, [r0, #10]
   b5f84:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b5f86:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b5f88:	d010      	beq.n	b5fac <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5f8a:	4e19      	ldr	r6, [pc, #100]	; (b5ff0 <_ZN6AB180510detectChipEv+0x70>)
   b5f8c:	4d19      	ldr	r5, [pc, #100]	; (b5ff4 <_ZN6AB180510detectChipEv+0x74>)
   b5f8e:	f002 fa57 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b5f92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b5f96:	d209      	bcs.n	b5fac <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b5f98:	8960      	ldrh	r0, [r4, #10]
   b5f9a:	f005 faf5 	bl	bb588 <digitalRead>
   b5f9e:	2801      	cmp	r0, #1
   b5fa0:	d004      	beq.n	b5fac <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b5fa2:	4631      	mov	r1, r6
   b5fa4:	4628      	mov	r0, r5
   b5fa6:	f7fe f8e1 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5faa:	e7f0      	b.n	b5f8e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b5fac:	2301      	movs	r3, #1
   b5fae:	f10d 0207 	add.w	r2, sp, #7
   b5fb2:	2128      	movs	r1, #40	; 0x28
   b5fb4:	4620      	mov	r0, r4
   b5fb6:	f7ff ffdb 	bl	b5f70 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b5fba:	b930      	cbnz	r0, b5fca <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b5fbc:	480d      	ldr	r0, [pc, #52]	; (b5ff4 <_ZN6AB180510detectChipEv+0x74>)
   b5fbe:	490e      	ldr	r1, [pc, #56]	; (b5ff8 <_ZN6AB180510detectChipEv+0x78>)
   b5fc0:	f7fe f8d4 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b5fc4:	2000      	movs	r0, #0
}
   b5fc6:	b002      	add	sp, #8
   b5fc8:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b5fca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5fce:	2b18      	cmp	r3, #24
   b5fd0:	d1f4      	bne.n	b5fbc <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b5fd2:	2301      	movs	r3, #1
   b5fd4:	f10d 0207 	add.w	r2, sp, #7
   b5fd8:	2129      	movs	r1, #41	; 0x29
   b5fda:	4620      	mov	r0, r4
   b5fdc:	f7ff ffc8 	bl	b5f70 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b5fe0:	2800      	cmp	r0, #0
   b5fe2:	d0eb      	beq.n	b5fbc <_ZN6AB180510detectChipEv+0x3c>
   b5fe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5fe8:	2b05      	cmp	r3, #5
   b5fea:	d1e7      	bne.n	b5fbc <_ZN6AB180510detectChipEv+0x3c>
   b5fec:	e7eb      	b.n	b5fc6 <_ZN6AB180510detectChipEv+0x46>
   b5fee:	bf00      	nop
   b5ff0:	000bce19 	.word	0x000bce19
   b5ff4:	2003e3dc 	.word	0x2003e3dc
   b5ff8:	000bce2e 	.word	0x000bce2e

000b5ffc <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b5ffc:	b507      	push	{r0, r1, r2, lr}
   b5ffe:	4613      	mov	r3, r2
    uint8_t value = 0;
   b6000:	2200      	movs	r2, #0
   b6002:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b6006:	f10d 0207 	add.w	r2, sp, #7
   b600a:	f7ff ffb1 	bl	b5f70 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b600e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b6012:	b003      	add	sp, #12
   b6014:	f85d fb04 	ldr.w	pc, [sp], #4

000b6018 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b6018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b601c:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b6020:	4604      	mov	r4, r0
   b6022:	460f      	mov	r7, r1
   b6024:	4615      	mov	r5, r2
   b6026:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b6028:	f1b8 0f00 	cmp.w	r8, #0
   b602c:	d002      	beq.n	b6034 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b602e:	6840      	ldr	r0, [r0, #4]
   b6030:	f002 ffe0 	bl	b8ff4 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b6034:	7a21      	ldrb	r1, [r4, #8]
   b6036:	6860      	ldr	r0, [r4, #4]
   b6038:	f002 ffb9 	bl	b8fae <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b603c:	6860      	ldr	r0, [r4, #4]
   b603e:	6803      	ldr	r3, [r0, #0]
   b6040:	4639      	mov	r1, r7
   b6042:	689b      	ldr	r3, [r3, #8]
   b6044:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6046:	442e      	add	r6, r5
   b6048:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b604a:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b604c:	d005      	beq.n	b605a <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b604e:	6803      	ldr	r3, [r0, #0]
   b6050:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6054:	689b      	ldr	r3, [r3, #8]
   b6056:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b6058:	e7f6      	b.n	b6048 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b605a:	2101      	movs	r1, #1
   b605c:	f002 ffc6 	bl	b8fec <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b6060:	4603      	mov	r3, r0
   b6062:	b170      	cbz	r0, b6082 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b6064:	4908      	ldr	r1, [pc, #32]	; (b6088 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b6066:	4809      	ldr	r0, [pc, #36]	; (b608c <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b6068:	463a      	mov	r2, r7
   b606a:	f7ff ff02 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b606e:	2500      	movs	r5, #0
    }

    if (lock) {
   b6070:	f1b8 0f00 	cmp.w	r8, #0
   b6074:	d002      	beq.n	b607c <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b6076:	6860      	ldr	r0, [r4, #4]
   b6078:	f002 ffc5 	bl	b9006 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b607c:	4628      	mov	r0, r5
   b607e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b6082:	2501      	movs	r5, #1
   b6084:	e7f4      	b.n	b6070 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b6086:	bf00      	nop
   b6088:	000bce3b 	.word	0x000bce3b
   b608c:	2003e3dc 	.word	0x2003e3dc

000b6090 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b6090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6092:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b6096:	9300      	str	r3, [sp, #0]
   b6098:	f10d 020f 	add.w	r2, sp, #15
   b609c:	2301      	movs	r3, #1
   b609e:	f7ff ffbb 	bl	b6018 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b60a2:	b005      	add	sp, #20
   b60a4:	f85d fb04 	ldr.w	pc, [sp], #4

000b60a8 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b60a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b60aa:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b60ac:	460c      	mov	r4, r1
   b60ae:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b60b0:	491a      	ldr	r1, [pc, #104]	; (b611c <_ZN6AB18056setWDTEi+0x74>)
   b60b2:	481b      	ldr	r0, [pc, #108]	; (b6120 <_ZN6AB18056setWDTEi+0x78>)
   b60b4:	f7fe f85a 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b60b8:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b60ba:	bfb8      	it	lt
   b60bc:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b60be:	b97c      	cbnz	r4, b60e0 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b60c0:	2301      	movs	r3, #1
   b60c2:	4622      	mov	r2, r4
   b60c4:	211b      	movs	r1, #27
   b60c6:	4628      	mov	r0, r5
   b60c8:	f7ff ffe2 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b60cc:	4915      	ldr	r1, [pc, #84]	; (b6124 <_ZN6AB18056setWDTEi+0x7c>)
   b60ce:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b60d0:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b60d2:	4813      	ldr	r0, [pc, #76]	; (b6120 <_ZN6AB18056setWDTEi+0x78>)
   b60d4:	f7ff fedb 	bl	b5e8e <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b60d8:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b60da:	616c      	str	r4, [r5, #20]
}
   b60dc:	4630      	mov	r0, r6
   b60de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b60e0:	2c03      	cmp	r4, #3
   b60e2:	dd19      	ble.n	b6118 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b60e4:	10a7      	asrs	r7, r4, #2
   b60e6:	2f1f      	cmp	r7, #31
   b60e8:	bfa8      	it	ge
   b60ea:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b60ec:	00ba      	lsls	r2, r7, #2
   b60ee:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b60f2:	2301      	movs	r3, #1
   b60f4:	b2d2      	uxtb	r2, r2
   b60f6:	211b      	movs	r1, #27
   b60f8:	4628      	mov	r0, r5
   b60fa:	f7ff ffc9 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b60fe:	463a      	mov	r2, r7
   b6100:	4603      	mov	r3, r0
   b6102:	4909      	ldr	r1, [pc, #36]	; (b6128 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b6104:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b6106:	4806      	ldr	r0, [pc, #24]	; (b6120 <_ZN6AB18056setWDTEi+0x78>)
   b6108:	f7ff fec1 	bl	b5e8e <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b610c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b6110:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b6112:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b6114:	616f      	str	r7, [r5, #20]
   b6116:	e7e1      	b.n	b60dc <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b6118:	2701      	movs	r7, #1
   b611a:	e7e7      	b.n	b60ec <_ZN6AB18056setWDTEi+0x44>
   b611c:	000bce60 	.word	0x000bce60
   b6120:	2003e3dc 	.word	0x2003e3dc
   b6124:	000bce6a 	.word	0x000bce6a
   b6128:	000bce86 	.word	0x000bce86

000b612c <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b612c:	4b06      	ldr	r3, [pc, #24]	; (b6148 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b612e:	681a      	ldr	r2, [r3, #0]
   b6130:	b14a      	cbz	r2, b6146 <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b6132:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b6136:	430b      	orrs	r3, r1
   b6138:	d105      	bne.n	b6146 <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b613a:	68d3      	ldr	r3, [r2, #12]
   b613c:	b11b      	cbz	r3, b6146 <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b613e:	2100      	movs	r1, #0
   b6140:	4610      	mov	r0, r2
   b6142:	f7ff bfb1 	b.w	b60a8 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b6146:	4770      	bx	lr
   b6148:	2003e3e0 	.word	0x2003e3e0

000b614c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b614c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6150:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6154:	4605      	mov	r5, r0
   b6156:	4616      	mov	r6, r2
   b6158:	461f      	mov	r7, r3
    if (lock) {
   b615a:	f1b8 0f00 	cmp.w	r8, #0
   b615e:	d004      	beq.n	b616a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b6160:	6840      	ldr	r0, [r0, #4]
   b6162:	9101      	str	r1, [sp, #4]
   b6164:	f002 ff46 	bl	b8ff4 <_ZN7TwoWire4lockEv>
   b6168:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b616a:	9101      	str	r1, [sp, #4]
   b616c:	2300      	movs	r3, #0
   b616e:	f10d 020f 	add.w	r2, sp, #15
   b6172:	4628      	mov	r0, r5
   b6174:	f7ff fefc 	bl	b5f70 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b6178:	4604      	mov	r4, r0
   b617a:	b160      	cbz	r0, b6196 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b617c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b6180:	ea03 0206 	and.w	r2, r3, r6
   b6184:	433a      	orrs	r2, r7
        if (newValue != value) {
   b6186:	4293      	cmp	r3, r2
   b6188:	d005      	beq.n	b6196 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b618a:	9901      	ldr	r1, [sp, #4]
   b618c:	2300      	movs	r3, #0
   b618e:	4628      	mov	r0, r5
   b6190:	f7ff ff7e 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
   b6194:	4604      	mov	r4, r0
    if (lock) {
   b6196:	f1b8 0f00 	cmp.w	r8, #0
   b619a:	d002      	beq.n	b61a2 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b619c:	6868      	ldr	r0, [r5, #4]
   b619e:	f002 ff32 	bl	b9006 <_ZN7TwoWire6unlockEv>
}
   b61a2:	4620      	mov	r0, r4
   b61a4:	b004      	add	sp, #16
   b61a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b61aa <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61aa:	b513      	push	{r0, r1, r4, lr}
   b61ac:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b61ae:	f10d 0207 	add.w	r2, sp, #7
   b61b2:	f7ff fedd 	bl	b5f70 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b61b6:	b128      	cbz	r0, b61c4 <_ZN6AB180510isBitClearEhhb+0x1a>
   b61b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b61bc:	421c      	tst	r4, r3
   b61be:	bf0c      	ite	eq
   b61c0:	2001      	moveq	r0, #1
   b61c2:	2000      	movne	r0, #0
}
   b61c4:	b002      	add	sp, #8
   b61c6:	bd10      	pop	{r4, pc}

000b61c8 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61c8:	b513      	push	{r0, r1, r4, lr}
   b61ca:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b61cc:	f10d 0207 	add.w	r2, sp, #7
   b61d0:	f7ff fece 	bl	b5f70 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b61d4:	b128      	cbz	r0, b61e2 <_ZN6AB18058isBitSetEhhb+0x1a>
   b61d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b61da:	421c      	tst	r4, r3
   b61dc:	bf14      	ite	ne
   b61de:	2001      	movne	r0, #1
   b61e0:	2000      	moveq	r0, #0
}
   b61e2:	b002      	add	sp, #8
   b61e4:	bd10      	pop	{r4, pc}

000b61e6 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b61e6:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b61e8:	43d2      	mvns	r2, r2
   b61ea:	9300      	str	r3, [sp, #0]
   b61ec:	b2d2      	uxtb	r2, r2
   b61ee:	2300      	movs	r3, #0
   b61f0:	f7ff ffac 	bl	b614c <_ZN6AB180512maskRegisterEhhhb>
}
   b61f4:	b003      	add	sp, #12
   b61f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b61fc <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b61fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b61fe:	2301      	movs	r3, #1
   b6200:	f10d 0207 	add.w	r2, sp, #7
   b6204:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b6206:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b6208:	f7ff feb2 	bl	b5f70 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b620c:	4605      	mov	r5, r0
   b620e:	b938      	cbnz	r0, b6220 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b6210:	491e      	ldr	r1, [pc, #120]	; (b628c <_ZN6AB180516updateWakeReasonEv+0x90>)
   b6212:	481f      	ldr	r0, [pc, #124]	; (b6290 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6214:	22ad      	movs	r2, #173	; 0xad
   b6216:	f7ff fe2c 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
}
   b621a:	4628      	mov	r0, r5
   b621c:	b003      	add	sp, #12
   b621e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b6220:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b6224:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b6228:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b622c:	d00b      	beq.n	b6246 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b622e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b6230:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b6232:	210f      	movs	r1, #15
   b6234:	4620      	mov	r0, r4
   b6236:	f7ff ffd6 	bl	b61e6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b623a:	4a16      	ldr	r2, [pc, #88]	; (b6294 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b623c:	4916      	ldr	r1, [pc, #88]	; (b6298 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b623e:	4814      	ldr	r0, [pc, #80]	; (b6290 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b6240:	f7fd ff94 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6244:	e7e9      	b.n	b621a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b6246:	2208      	movs	r2, #8
   b6248:	2117      	movs	r1, #23
   b624a:	4620      	mov	r0, r4
   b624c:	f7ff ffbc 	bl	b61c8 <_ZN6AB18058isBitSetEhhb>
   b6250:	b118      	cbz	r0, b625a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6252:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b6254:	4a11      	ldr	r2, [pc, #68]	; (b629c <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b6256:	61e3      	str	r3, [r4, #28]
   b6258:	e7f0      	b.n	b623c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b625a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b625e:	071a      	lsls	r2, r3, #28
   b6260:	d509      	bpl.n	b6276 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b6262:	2303      	movs	r3, #3
   b6264:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b6266:	2208      	movs	r2, #8
   b6268:	2301      	movs	r3, #1
   b626a:	210f      	movs	r1, #15
   b626c:	4620      	mov	r0, r4
   b626e:	f7ff ffba 	bl	b61e6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b6272:	4a0b      	ldr	r2, [pc, #44]	; (b62a0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b6274:	e7e2      	b.n	b623c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b6276:	075b      	lsls	r3, r3, #29
   b6278:	d5cf      	bpl.n	b621a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b627a:	2204      	movs	r2, #4
   b627c:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b627e:	2301      	movs	r3, #1
   b6280:	210f      	movs	r1, #15
   b6282:	4620      	mov	r0, r4
   b6284:	f7ff ffaf 	bl	b61e6 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b6288:	4a06      	ldr	r2, [pc, #24]	; (b62a4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b628a:	e7d7      	b.n	b623c <_ZN6AB180516updateWakeReasonEv+0x40>
   b628c:	000bced9 	.word	0x000bced9
   b6290:	2003e3dc 	.word	0x2003e3dc
   b6294:	000bceaa 	.word	0x000bceaa
   b6298:	000bcef8 	.word	0x000bcef8
   b629c:	000bceb3 	.word	0x000bceb3
   b62a0:	000bcec3 	.word	0x000bcec3
   b62a4:	000bced3 	.word	0x000bced3

000b62a8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b62a8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b62aa:	9300      	str	r3, [sp, #0]
   b62ac:	4613      	mov	r3, r2
   b62ae:	22ff      	movs	r2, #255	; 0xff
   b62b0:	f7ff ff4c 	bl	b614c <_ZN6AB180512maskRegisterEhhhb>
}
   b62b4:	b003      	add	sp, #12
   b62b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b62bc <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b62bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62be:	460f      	mov	r7, r1
   b62c0:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b62c2:	2301      	movs	r3, #1
   b62c4:	2200      	movs	r2, #0
   b62c6:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b62c8:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b62ca:	f7ff fee1 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b62ce:	4604      	mov	r4, r0
   b62d0:	b938      	cbnz	r0, b62e2 <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b62d2:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b62d6:	491f      	ldr	r1, [pc, #124]	; (b6354 <_ZN6AB180517setCountdownTimerEib+0x98>)
   b62d8:	481f      	ldr	r0, [pc, #124]	; (b6358 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b62da:	f7ff fdca 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
}
   b62de:	4620      	mov	r0, r4
   b62e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b62e2:	2301      	movs	r3, #1
   b62e4:	2223      	movs	r2, #35	; 0x23
   b62e6:	2118      	movs	r1, #24
   b62e8:	4628      	mov	r0, r5
   b62ea:	f7ff fed1 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b62ee:	4604      	mov	r4, r0
   b62f0:	b910      	cbnz	r0, b62f8 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b62f2:	f240 229b 	movw	r2, #667	; 0x29b
   b62f6:	e7ee      	b.n	b62d6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b62f8:	2fff      	cmp	r7, #255	; 0xff
   b62fa:	bfa8      	it	ge
   b62fc:	27ff      	movge	r7, #255	; 0xff
   b62fe:	2f01      	cmp	r7, #1
   b6300:	bfb8      	it	lt
   b6302:	2701      	movlt	r7, #1
   b6304:	2301      	movs	r3, #1
   b6306:	b2fa      	uxtb	r2, r7
   b6308:	2119      	movs	r1, #25
   b630a:	4628      	mov	r0, r5
   b630c:	f7ff fec0 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6310:	4604      	mov	r4, r0
   b6312:	b910      	cbnz	r0, b631a <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b6314:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b6318:	e7dd      	b.n	b62d6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b631a:	2301      	movs	r3, #1
   b631c:	2208      	movs	r2, #8
   b631e:	2112      	movs	r1, #18
   b6320:	4628      	mov	r0, r5
   b6322:	f7ff ffc1 	bl	b62a8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6326:	4604      	mov	r4, r0
   b6328:	b910      	cbnz	r0, b6330 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b632a:	f240 22af 	movw	r2, #687	; 0x2af
   b632e:	e7d2      	b.n	b62d6 <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b6330:	2e00      	cmp	r6, #0
   b6332:	bf14      	ite	ne
   b6334:	2203      	movne	r2, #3
   b6336:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b6338:	2301      	movs	r3, #1
   b633a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b633e:	2118      	movs	r1, #24
   b6340:	4628      	mov	r0, r5
   b6342:	f7ff fea5 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6346:	4604      	mov	r4, r0
   b6348:	2800      	cmp	r0, #0
   b634a:	d1c8      	bne.n	b62de <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b634c:	f240 22b9 	movw	r2, #697	; 0x2b9
   b6350:	e7c1      	b.n	b62d6 <_ZN6AB180517setCountdownTimerEib+0x1a>
   b6352:	bf00      	nop
   b6354:	000bcf09 	.word	0x000bcf09
   b6358:	2003e3dc 	.word	0x2003e3dc

000b635c <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b635c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b6360:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b6362:	4605      	mov	r5, r0
   b6364:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b6366:	484f      	ldr	r0, [pc, #316]	; (b64a4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6368:	494f      	ldr	r1, [pc, #316]	; (b64a8 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b636a:	f7fd feff 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b636e:	2100      	movs	r1, #0
   b6370:	4628      	mov	r0, r5
   b6372:	f7ff fe99 	bl	b60a8 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b6376:	4604      	mov	r4, r0
   b6378:	b948      	cbnz	r0, b638e <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b637a:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b637e:	494b      	ldr	r1, [pc, #300]	; (b64ac <_ZN6AB180513deepPowerDownEi+0x150>)
   b6380:	4848      	ldr	r0, [pc, #288]	; (b64a4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b6382:	f7ff fd76 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
}
   b6386:	4620      	mov	r0, r4
   b6388:	b003      	add	sp, #12
   b638a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b638e:	2301      	movs	r3, #1
   b6390:	461a      	mov	r2, r3
   b6392:	2130      	movs	r1, #48	; 0x30
   b6394:	4628      	mov	r0, r5
   b6396:	f7ff ff87 	bl	b62a8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b639a:	4604      	mov	r4, r0
   b639c:	b910      	cbnz	r0, b63a4 <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b639e:	f240 2205 	movw	r2, #517	; 0x205
   b63a2:	e7ec      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b63a4:	2210      	movs	r2, #16
   b63a6:	2301      	movs	r3, #1
   b63a8:	4611      	mov	r1, r2
   b63aa:	4628      	mov	r0, r5
   b63ac:	f7ff ff1b 	bl	b61e6 <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b63b0:	4604      	mov	r4, r0
   b63b2:	b910      	cbnz	r0, b63ba <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b63b4:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b63b8:	e7e1      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b63ba:	2301      	movs	r3, #1
   b63bc:	2226      	movs	r2, #38	; 0x26
   b63be:	2113      	movs	r1, #19
   b63c0:	4628      	mov	r0, r5
   b63c2:	f7ff fe65 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b63c6:	4604      	mov	r4, r0
   b63c8:	b910      	cbnz	r0, b63d0 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b63ca:	f240 2213 	movw	r2, #531	; 0x213
   b63ce:	e7d6      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b63d0:	2601      	movs	r6, #1
   b63d2:	9600      	str	r6, [sp, #0]
   b63d4:	4633      	mov	r3, r6
   b63d6:	22fc      	movs	r2, #252	; 0xfc
   b63d8:	2111      	movs	r1, #17
   b63da:	4628      	mov	r0, r5
   b63dc:	f7ff feb6 	bl	b614c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b63e0:	4604      	mov	r4, r0
   b63e2:	b910      	cbnz	r0, b63ea <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b63e4:	f240 221b 	movw	r2, #539	; 0x21b
   b63e8:	e7c9      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b63ea:	2200      	movs	r2, #0
   b63ec:	4639      	mov	r1, r7
   b63ee:	4628      	mov	r0, r5
   b63f0:	f7ff ff64 	bl	b62bc <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b63f4:	4604      	mov	r4, r0
   b63f6:	b910      	cbnz	r0, b63fe <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b63f8:	f240 2222 	movw	r2, #546	; 0x222
   b63fc:	e7bf      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b63fe:	9600      	str	r6, [sp, #0]
   b6400:	2302      	movs	r3, #2
   b6402:	2277      	movs	r2, #119	; 0x77
   b6404:	2110      	movs	r1, #16
   b6406:	4628      	mov	r0, r5
   b6408:	f7ff fea0 	bl	b614c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b640c:	4604      	mov	r4, r0
   b640e:	b910      	cbnz	r0, b6416 <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b6410:	f240 222b 	movw	r2, #555	; 0x22b
   b6414:	e7b3      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b6416:	4633      	mov	r3, r6
   b6418:	2204      	movs	r2, #4
   b641a:	211c      	movs	r1, #28
   b641c:	4628      	mov	r0, r5
   b641e:	f7ff ff43 	bl	b62a8 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b6422:	4604      	mov	r4, r0
   b6424:	b910      	cbnz	r0, b642c <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b6426:	f240 2232 	movw	r2, #562	; 0x232
   b642a:	e7a8      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b642c:	9600      	str	r6, [sp, #0]
   b642e:	2318      	movs	r3, #24
   b6430:	22e3      	movs	r2, #227	; 0xe3
   b6432:	2111      	movs	r1, #17
   b6434:	4628      	mov	r0, r5
   b6436:	f7ff fe89 	bl	b614c <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b643a:	4604      	mov	r4, r0
   b643c:	b910      	cbnz	r0, b6444 <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b643e:	f240 2239 	movw	r2, #569	; 0x239
   b6442:	e79c      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b6444:	4633      	mov	r3, r6
   b6446:	22c0      	movs	r2, #192	; 0xc0
   b6448:	2117      	movs	r1, #23
   b644a:	4628      	mov	r0, r5
   b644c:	f7ff fe20 	bl	b6090 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b6450:	4604      	mov	r4, r0
   b6452:	b910      	cbnz	r0, b645a <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b6454:	f44f 7210 	mov.w	r2, #576	; 0x240
   b6458:	e791      	b.n	b637e <_ZN6AB180513deepPowerDownEi+0x22>
   b645a:	f001 fff1 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b645e:	f8df 9054 	ldr.w	r9, [pc, #84]	; b64b4 <_ZN6AB180513deepPowerDownEi+0x158>
   b6462:	f8df 8040 	ldr.w	r8, [pc, #64]	; b64a4 <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6466:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b646a:	4606      	mov	r6, r0
   b646c:	434f      	muls	r7, r1
   b646e:	f001 ffe7 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b6472:	1b80      	subs	r0, r0, r6
   b6474:	42b8      	cmp	r0, r7
   b6476:	d20e      	bcs.n	b6496 <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b6478:	2201      	movs	r2, #1
   b647a:	2117      	movs	r1, #23
   b647c:	4628      	mov	r0, r5
   b647e:	f7ff fdbd 	bl	b5ffc <_ZN6AB180512readRegisterEhb>
   b6482:	4649      	mov	r1, r9
   b6484:	4602      	mov	r2, r0
   b6486:	4640      	mov	r0, r8
   b6488:	f7fd fe70 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b648c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b6490:	f002 fb3a 	bl	b8b08 <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b6494:	e7eb      	b.n	b646e <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b6496:	4906      	ldr	r1, [pc, #24]	; (b64b0 <_ZN6AB180513deepPowerDownEi+0x154>)
   b6498:	4802      	ldr	r0, [pc, #8]	; (b64a4 <_ZN6AB180513deepPowerDownEi+0x148>)
   b649a:	f7ff fcea 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b649e:	f004 fc5e 	bl	bad5e <_ZN11SystemClass5resetEv>
    return true;
   b64a2:	e770      	b.n	b6386 <_ZN6AB180513deepPowerDownEi+0x2a>
   b64a4:	2003e3dc 	.word	0x2003e3dc
   b64a8:	000bcf34 	.word	0x000bcf34
   b64ac:	000bcf29 	.word	0x000bcf29
   b64b0:	000bcf5a 	.word	0x000bcf5a
   b64b4:	000bcf45 	.word	0x000bcf45

000b64b8 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b64b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b64bc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b64c0:	4605      	mov	r5, r0
   b64c2:	460c      	mov	r4, r1
   b64c4:	4691      	mov	r9, r2
   b64c6:	461f      	mov	r7, r3
    if (lock) {
   b64c8:	f1ba 0f00 	cmp.w	sl, #0
   b64cc:	d002      	beq.n	b64d4 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b64ce:	6840      	ldr	r0, [r0, #4]
   b64d0:	f002 fd90 	bl	b8ff4 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b64d4:	b307      	cbz	r7, b6518 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b64d6:	2f20      	cmp	r7, #32
   b64d8:	463e      	mov	r6, r7
   b64da:	bf28      	it	cs
   b64dc:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b64de:	2c7f      	cmp	r4, #127	; 0x7f
   b64e0:	d826      	bhi.n	b6530 <_ZN6AB18057readRamEjPhjb+0x78>
   b64e2:	1933      	adds	r3, r6, r4
   b64e4:	2b80      	cmp	r3, #128	; 0x80
   b64e6:	d901      	bls.n	b64ec <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b64e8:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b64ec:	2301      	movs	r3, #1
   b64ee:	2204      	movs	r2, #4
   b64f0:	213f      	movs	r1, #63	; 0x3f
   b64f2:	4628      	mov	r0, r5
   b64f4:	f7ff fe77 	bl	b61e6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b64f8:	2300      	movs	r3, #0
   b64fa:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b64fe:	9300      	str	r3, [sp, #0]
   b6500:	464a      	mov	r2, r9
   b6502:	4633      	mov	r3, r6
   b6504:	b2c9      	uxtb	r1, r1
   b6506:	4628      	mov	r0, r5
   b6508:	f7ff fce4 	bl	b5ed4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b650c:	4680      	mov	r8, r0
   b650e:	b128      	cbz	r0, b651c <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b6510:	4434      	add	r4, r6
        dataLen -= count;
   b6512:	1bbf      	subs	r7, r7, r6
        data += count;
   b6514:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b6516:	e7dd      	b.n	b64d4 <_ZN6AB18057readRamEjPhjb+0x1c>
   b6518:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b651c:	f1ba 0f00 	cmp.w	sl, #0
   b6520:	d002      	beq.n	b6528 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b6522:	6868      	ldr	r0, [r5, #4]
   b6524:	f002 fd6f 	bl	b9006 <_ZN7TwoWire6unlockEv>
}
   b6528:	4640      	mov	r0, r8
   b652a:	b002      	add	sp, #8
   b652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6530:	2301      	movs	r3, #1
   b6532:	2204      	movs	r2, #4
   b6534:	213f      	movs	r1, #63	; 0x3f
   b6536:	4628      	mov	r0, r5
   b6538:	f7ff feb6 	bl	b62a8 <_ZN6AB180514setRegisterBitEhhb>
   b653c:	e7dc      	b.n	b64f8 <_ZN6AB18057readRamEjPhjb+0x40>

000b653e <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b653e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b6542:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b6546:	4605      	mov	r5, r0
   b6548:	460c      	mov	r4, r1
   b654a:	4691      	mov	r9, r2
   b654c:	461f      	mov	r7, r3
    if (lock) {
   b654e:	f1ba 0f00 	cmp.w	sl, #0
   b6552:	d002      	beq.n	b655a <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b6554:	6840      	ldr	r0, [r0, #4]
   b6556:	f002 fd4d 	bl	b8ff4 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b655a:	b307      	cbz	r7, b659e <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b655c:	2f1f      	cmp	r7, #31
   b655e:	463e      	mov	r6, r7
   b6560:	bf28      	it	cs
   b6562:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b6564:	2c7f      	cmp	r4, #127	; 0x7f
   b6566:	d826      	bhi.n	b65b6 <_ZN6AB18058writeRamEjPKhjb+0x78>
   b6568:	1933      	adds	r3, r6, r4
   b656a:	2b80      	cmp	r3, #128	; 0x80
   b656c:	d901      	bls.n	b6572 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b656e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b6572:	2301      	movs	r3, #1
   b6574:	2204      	movs	r2, #4
   b6576:	213f      	movs	r1, #63	; 0x3f
   b6578:	4628      	mov	r0, r5
   b657a:	f7ff fe34 	bl	b61e6 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b657e:	2300      	movs	r3, #0
   b6580:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b6584:	9300      	str	r3, [sp, #0]
   b6586:	464a      	mov	r2, r9
   b6588:	4633      	mov	r3, r6
   b658a:	b2c9      	uxtb	r1, r1
   b658c:	4628      	mov	r0, r5
   b658e:	f7ff fd43 	bl	b6018 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b6592:	4680      	mov	r8, r0
   b6594:	b128      	cbz	r0, b65a2 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b6596:	4434      	add	r4, r6
        dataLen -= count;
   b6598:	1bbf      	subs	r7, r7, r6
        data += count;
   b659a:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b659c:	e7dd      	b.n	b655a <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b659e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b65a2:	f1ba 0f00 	cmp.w	sl, #0
   b65a6:	d002      	beq.n	b65ae <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b65a8:	6868      	ldr	r0, [r5, #4]
   b65aa:	f002 fd2c 	bl	b9006 <_ZN7TwoWire6unlockEv>
}
   b65ae:	4640      	mov	r0, r8
   b65b0:	b002      	add	sp, #8
   b65b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b65b6:	2301      	movs	r3, #1
   b65b8:	2204      	movs	r2, #4
   b65ba:	213f      	movs	r1, #63	; 0x3f
   b65bc:	4628      	mov	r0, r5
   b65be:	f7ff fe73 	bl	b62a8 <_ZN6AB180514setRegisterBitEhhb>
   b65c2:	e7dc      	b.n	b657e <_ZN6AB18058writeRamEjPKhjb+0x40>

000b65c4 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b65c4:	b530      	push	{r4, r5, lr}
   b65c6:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b65c8:	680d      	ldr	r5, [r1, #0]
   b65ca:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b65ce:	9503      	str	r5, [sp, #12]
   b65d0:	684d      	ldr	r5, [r1, #4]
   b65d2:	9502      	str	r5, [sp, #8]
   b65d4:	688d      	ldr	r5, [r1, #8]
   b65d6:	9501      	str	r5, [sp, #4]
   b65d8:	68c9      	ldr	r1, [r1, #12]
   b65da:	9100      	str	r1, [sp, #0]
   b65dc:	3301      	adds	r3, #1
   b65de:	4904      	ldr	r1, [pc, #16]	; (b65f0 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b65e0:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b65e4:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b65e6:	f004 fb53 	bl	bac90 <_ZN6String6formatEPKcz>
}
   b65ea:	4620      	mov	r0, r4
   b65ec:	b005      	add	sp, #20
   b65ee:	bd30      	pop	{r4, r5, pc}
   b65f0:	000bcf6c 	.word	0x000bcf6c

000b65f4 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b65f4:	0903      	lsrs	r3, r0, #4
}
   b65f6:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b65f8:	f000 000f 	and.w	r0, r0, #15
}
   b65fc:	fb02 0003 	mla	r0, r2, r3, r0
   b6600:	4770      	bx	lr

000b6602 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6602:	b538      	push	{r3, r4, r5, lr}
   b6604:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b6606:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b6608:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b660a:	f7ff fff3 	bl	b65f4 <_ZN6AB180510bcdToValueEh>
   b660e:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b6610:	7860      	ldrb	r0, [r4, #1]
   b6612:	f7ff ffef 	bl	b65f4 <_ZN6AB180510bcdToValueEh>
   b6616:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b6618:	78a0      	ldrb	r0, [r4, #2]
   b661a:	f7ff ffeb 	bl	b65f4 <_ZN6AB180510bcdToValueEh>
   b661e:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b6620:	78e0      	ldrb	r0, [r4, #3]
   b6622:	f7ff ffe7 	bl	b65f4 <_ZN6AB180510bcdToValueEh>
   b6626:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6628:	7920      	ldrb	r0, [r4, #4]
   b662a:	f7ff ffe3 	bl	b65f4 <_ZN6AB180510bcdToValueEh>
   b662e:	3801      	subs	r0, #1
   b6630:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b6632:	b92d      	cbnz	r5, b6640 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b6634:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b6636:	7828      	ldrb	r0, [r5, #0]
   b6638:	f7ff ffdc 	bl	b65f4 <_ZN6AB180510bcdToValueEh>
   b663c:	6188      	str	r0, [r1, #24]
}
   b663e:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b6640:	7960      	ldrb	r0, [r4, #5]
   b6642:	f7ff ffd7 	bl	b65f4 <_ZN6AB180510bcdToValueEh>
   b6646:	3064      	adds	r0, #100	; 0x64
   b6648:	1da5      	adds	r5, r4, #6
   b664a:	6148      	str	r0, [r1, #20]
   b664c:	e7f3      	b.n	b6636 <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b6650 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6650:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6652:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b6654:	b088      	sub	sp, #32
   b6656:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b6658:	461a      	mov	r2, r3
   b665a:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b665c:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b665e:	f7ff fda4 	bl	b61aa <_ZN6AB180510isBitClearEhhb>
   b6662:	b1f0      	cbz	r0, b66a2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b6664:	2308      	movs	r3, #8
   b6666:	2601      	movs	r6, #1
   b6668:	4620      	mov	r0, r4
   b666a:	9600      	str	r6, [sp, #0]
   b666c:	eb0d 0203 	add.w	r2, sp, r3
   b6670:	2100      	movs	r1, #0
   b6672:	f7ff fc2f 	bl	b5ed4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b6676:	4604      	mov	r4, r0
   b6678:	b198      	cbz	r0, b66a2 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b667a:	4632      	mov	r2, r6
   b667c:	4629      	mov	r1, r5
   b667e:	f10d 0009 	add.w	r0, sp, #9
   b6682:	f7ff ffbe 	bl	b6602 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b6686:	a804      	add	r0, sp, #16
   b6688:	f7ff ff9c 	bl	b65c4 <_ZN6AB180510tmToStringEPK2tm>
   b668c:	4808      	ldr	r0, [pc, #32]	; (b66b0 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b668e:	9a04      	ldr	r2, [sp, #16]
   b6690:	4908      	ldr	r1, [pc, #32]	; (b66b4 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b6692:	f7fd fd6b 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6696:	a804      	add	r0, sp, #16
   b6698:	f004 fa58 	bl	bab4c <_ZN6StringD1Ev>
}
   b669c:	4620      	mov	r0, r4
   b669e:	b008      	add	sp, #32
   b66a0:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b66a2:	2224      	movs	r2, #36	; 0x24
   b66a4:	2100      	movs	r1, #0
   b66a6:	4628      	mov	r0, r5
   b66a8:	f005 fd84 	bl	bc1b4 <memset>
   b66ac:	2400      	movs	r4, #0
   b66ae:	e7f5      	b.n	b669c <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b66b0:	2003e3dc 	.word	0x2003e3dc
   b66b4:	000bcf8a 	.word	0x000bcf8a

000b66b8 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b66b8:	b530      	push	{r4, r5, lr}
   b66ba:	b08b      	sub	sp, #44	; 0x2c
   b66bc:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b66be:	a901      	add	r1, sp, #4
   b66c0:	f7ff ffc6 	bl	b6650 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b66c4:	4604      	mov	r4, r0
   b66c6:	b120      	cbz	r0, b66d2 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b66c8:	a801      	add	r0, sp, #4
   b66ca:	f002 fa15 	bl	b8af8 <mktime>
   b66ce:	e9c5 0100 	strd	r0, r1, [r5]
}
   b66d2:	4620      	mov	r0, r4
   b66d4:	b00b      	add	sp, #44	; 0x2c
   b66d6:	bd30      	pop	{r4, r5, pc}

000b66d8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b66d8:	230a      	movs	r3, #10
   b66da:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b66de:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b66e2:	fb91 f2f3 	sdiv	r2, r1, r3
   b66e6:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b66ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b66ee:	b2c0      	uxtb	r0, r0
   b66f0:	4770      	bx	lr

000b66f2 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b66f2:	b570      	push	{r4, r5, r6, lr}
   b66f4:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b66f6:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b66f8:	460c      	mov	r4, r1
   b66fa:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b66fc:	f7ff ffec 	bl	b66d8 <_ZN6AB180510valueToBcdEi>
   b6700:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b6702:	6868      	ldr	r0, [r5, #4]
   b6704:	f7ff ffe8 	bl	b66d8 <_ZN6AB180510valueToBcdEi>
   b6708:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b670a:	68a8      	ldr	r0, [r5, #8]
   b670c:	f7ff ffe4 	bl	b66d8 <_ZN6AB180510valueToBcdEi>
   b6710:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b6712:	68e8      	ldr	r0, [r5, #12]
   b6714:	f7ff ffe0 	bl	b66d8 <_ZN6AB180510valueToBcdEi>
   b6718:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b671a:	6928      	ldr	r0, [r5, #16]
   b671c:	3001      	adds	r0, #1
   b671e:	f7ff ffdb 	bl	b66d8 <_ZN6AB180510valueToBcdEi>
   b6722:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b6724:	b92e      	cbnz	r6, b6732 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b6726:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b6728:	69a8      	ldr	r0, [r5, #24]
   b672a:	f7ff ffd5 	bl	b66d8 <_ZN6AB180510valueToBcdEi>
   b672e:	7030      	strb	r0, [r6, #0]
}
   b6730:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b6732:	696a      	ldr	r2, [r5, #20]
   b6734:	2364      	movs	r3, #100	; 0x64
   b6736:	fb92 f0f3 	sdiv	r0, r2, r3
   b673a:	fb03 2010 	mls	r0, r3, r0, r2
   b673e:	f7ff ffcb 	bl	b66d8 <_ZN6AB180510valueToBcdEi>
   b6742:	1da6      	adds	r6, r4, #6
   b6744:	7160      	strb	r0, [r4, #5]
   b6746:	e7ef      	b.n	b6728 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b6748 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6748:	b5f0      	push	{r4, r5, r6, r7, lr}
   b674a:	b087      	sub	sp, #28
   b674c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b674e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b6750:	4616      	mov	r6, r2
   b6752:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b6754:	f7ff ff36 	bl	b65c4 <_ZN6AB180510tmToStringEPK2tm>
   b6758:	481e      	ldr	r0, [pc, #120]	; (b67d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b675a:	9a02      	ldr	r2, [sp, #8]
   b675c:	491e      	ldr	r1, [pc, #120]	; (b67d8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b675e:	f7fd fd05 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6762:	a802      	add	r0, sp, #8
   b6764:	f004 f9f2 	bl	bab4c <_ZN6StringD1Ev>
    if (lock) {
   b6768:	b116      	cbz	r6, b6770 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b676a:	6868      	ldr	r0, [r5, #4]
   b676c:	f002 fc42 	bl	b8ff4 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b6770:	4620      	mov	r0, r4
   b6772:	2201      	movs	r2, #1
   b6774:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b6778:	2700      	movs	r7, #0
   b677a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b677e:	f7ff ffb8 	bl	b66f2 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b6782:	2301      	movs	r3, #1
   b6784:	461a      	mov	r2, r3
   b6786:	2110      	movs	r1, #16
   b6788:	4628      	mov	r0, r5
   b678a:	f7ff fd8d 	bl	b62a8 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b678e:	4604      	mov	r4, r0
   b6790:	b1e8      	cbz	r0, b67ce <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b6792:	2308      	movs	r3, #8
   b6794:	9700      	str	r7, [sp, #0]
   b6796:	eb0d 0203 	add.w	r2, sp, r3
   b679a:	4639      	mov	r1, r7
   b679c:	4628      	mov	r0, r5
   b679e:	f7ff fc3b 	bl	b6018 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b67a2:	4604      	mov	r4, r0
   b67a4:	b160      	cbz	r0, b67c0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b67a6:	2301      	movs	r3, #1
   b67a8:	461a      	mov	r2, r3
   b67aa:	2110      	movs	r1, #16
   b67ac:	4628      	mov	r0, r5
   b67ae:	f7ff fd1a 	bl	b61e6 <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b67b2:	b116      	cbz	r6, b67ba <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b67b4:	6868      	ldr	r0, [r5, #4]
   b67b6:	f002 fc26 	bl	b9006 <_ZN7TwoWire6unlockEv>
}
   b67ba:	4620      	mov	r0, r4
   b67bc:	b007      	add	sp, #28
   b67be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b67c0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b67c4:	4905      	ldr	r1, [pc, #20]	; (b67dc <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b67c6:	4803      	ldr	r0, [pc, #12]	; (b67d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b67c8:	f7ff fb53 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
   b67cc:	e7f1      	b.n	b67b2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b67ce:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b67d2:	e7f7      	b.n	b67c4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b67d4:	2003e3dc 	.word	0x2003e3dc
   b67d8:	000bcf98 	.word	0x000bcf98
   b67dc:	000bcfa6 	.word	0x000bcfa6

000b67e0 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b67e0:	b513      	push	{r0, r1, r4, lr}
   b67e2:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b67e4:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b67e6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b67ea:	f005 fc95 	bl	bc118 <gmtime>
    return setRtcFromTm(tm, lock);
   b67ee:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b67f2:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b67f4:	4620      	mov	r0, r4
   b67f6:	f7ff ffa7 	bl	b6748 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b67fa:	b002      	add	sp, #8
   b67fc:	bd10      	pop	{r4, pc}
	...

000b6800 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b6800:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6802:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b6804:	b089      	sub	sp, #36	; 0x24
   b6806:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b6808:	bb75      	cbnz	r5, b6868 <_ZN6AB18054loopEv+0x68>
   b680a:	f004 fc77 	bl	bb0fc <_ZN9TimeClass7isValidEv>
   b680e:	b358      	cbz	r0, b6868 <_ZN6AB18054loopEv+0x68>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   b6810:	2600      	movs	r6, #0
   b6812:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b6814:	a904      	add	r1, sp, #16
   b6816:	4628      	mov	r0, r5
        tm = 0;
   b6818:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b681c:	f002 f894 	bl	b8948 <spark_sync_time_last>
   b6820:	b310      	cbz	r0, b6868 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b6822:	2501      	movs	r5, #1
   b6824:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b6826:	f004 fc86 	bl	bb136 <_ZN9TimeClass3nowEv>
   b682a:	17c3      	asrs	r3, r0, #31
   b682c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b6830:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b6832:	9500      	str	r5, [sp, #0]
   b6834:	4620      	mov	r0, r4
   b6836:	f7ff ffd3 	bl	b67e0 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b683a:	a902      	add	r1, sp, #8
   b683c:	4620      	mov	r0, r4
        time = 0;
   b683e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b6842:	f7ff ff39 	bl	b66b8 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6846:	4b13      	ldr	r3, [pc, #76]	; (b6894 <_ZN6AB18054loopEv+0x94>)
   b6848:	4913      	ldr	r1, [pc, #76]	; (b6898 <_ZN6AB18054loopEv+0x98>)
   b684a:	681b      	ldr	r3, [r3, #0]
   b684c:	9300      	str	r3, [sp, #0]
   b684e:	a804      	add	r0, sp, #16
   b6850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6854:	f004 fc10 	bl	bb078 <_ZN9TimeClass6formatExPKc>
   b6858:	4810      	ldr	r0, [pc, #64]	; (b689c <_ZN6AB18054loopEv+0x9c>)
   b685a:	9a04      	ldr	r2, [sp, #16]
   b685c:	4910      	ldr	r1, [pc, #64]	; (b68a0 <_ZN6AB18054loopEv+0xa0>)
   b685e:	f7fd fc85 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6862:	a804      	add	r0, sp, #16
   b6864:	f004 f972 	bl	bab4c <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b6868:	6963      	ldr	r3, [r4, #20]
   b686a:	b18b      	cbz	r3, b6890 <_ZN6AB18054loopEv+0x90>
   b686c:	f001 fde8 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b6870:	6923      	ldr	r3, [r4, #16]
   b6872:	1ac0      	subs	r0, r0, r3
   b6874:	6963      	ldr	r3, [r4, #20]
   b6876:	4298      	cmp	r0, r3
   b6878:	d30a      	bcc.n	b6890 <_ZN6AB18054loopEv+0x90>
   b687a:	f001 fde1 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b687e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b6882:	6120      	str	r0, [r4, #16]
            setWDT();
   b6884:	4620      	mov	r0, r4
}
   b6886:	b009      	add	sp, #36	; 0x24
   b6888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b688c:	f7ff bc0c 	b.w	b60a8 <_ZN6AB18056setWDTEi>
}
   b6890:	b009      	add	sp, #36	; 0x24
   b6892:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6894:	2003decc 	.word	0x2003decc
   b6898:	2003e6ac 	.word	0x2003e6ac
   b689c:	2003e3dc 	.word	0x2003e3dc
   b68a0:	000bcfc1 	.word	0x000bcfc1

000b68a4 <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b68a4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b68a6:	2300      	movs	r3, #0
   b68a8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b68aa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b68ac:	4604      	mov	r4, r0
   b68ae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b68b0:	b12b      	cbz	r3, b68be <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b68b2:	2202      	movs	r2, #2
   b68b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b68b6:	68eb      	ldr	r3, [r5, #12]
   b68b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b68ba:	68ab      	ldr	r3, [r5, #8]
   b68bc:	60a3      	str	r3, [r4, #8]
    }
   b68be:	4620      	mov	r0, r4
   b68c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b68c4 <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b68c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b68c8:	b095      	sub	sp, #84	; 0x54
   b68ca:	4605      	mov	r5, r0
        };
   b68cc:	991c      	ldr	r1, [sp, #112]	; 0x70
   b68ce:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b68d0:	4690      	mov	r8, r2
   b68d2:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b68d4:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b68d6:	f7ff ffe5 	bl	b68a4 <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b68da:	a904      	add	r1, sp, #16
   b68dc:	a808      	add	r0, sp, #32
   b68de:	f7ff ffe1 	bl	b68a4 <_ZNSt8functionIFvyiEEC1ERKS1_>
   b68e2:	a908      	add	r1, sp, #32
   b68e4:	4630      	mov	r0, r6
   b68e6:	f7ff ffdd 	bl	b68a4 <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b68ea:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68ee:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b68f0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68f4:	f7fd fbcf 	bl	b4096 <_Znwj>
   b68f8:	4604      	mov	r4, r0
   b68fa:	b1a0      	cbz	r0, b6926 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68fc:	e896 0003 	ldmia.w	r6, {r0, r1}
   b6900:	ab01      	add	r3, sp, #4
   b6902:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6906:	e894 0003 	ldmia.w	r4, {r0, r1}
   b690a:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b690e:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b6914:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6916:	60a3      	str	r3, [r4, #8]
   b6918:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b691c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b691e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b6922:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b6924:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b6926:	4b24      	ldr	r3, [pc, #144]	; (b69b8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b6928:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b692a:	4b24      	ldr	r3, [pc, #144]	; (b69bc <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b692c:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b692e:	2200      	movs	r2, #0
   b6930:	2300      	movs	r3, #0
   b6932:	f04f 0900 	mov.w	r9, #0
   b6936:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b693a:	4b21      	ldr	r3, [pc, #132]	; (b69c0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b693c:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b6940:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6942:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b6944:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b6948:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b694c:	f7fd fba3 	bl	b4096 <_Znwj>
   b6950:	4604      	mov	r4, r0
   b6952:	b1d8      	cbz	r0, b698c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b6954:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b6956:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b695a:	b133      	cbz	r3, b696a <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b695c:	2202      	movs	r2, #2
   b695e:	a910      	add	r1, sp, #64	; 0x40
   b6960:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6962:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b6964:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6966:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b6968:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b696a:	4b16      	ldr	r3, [pc, #88]	; (b69c4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b696c:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b696e:	4a16      	ldr	r2, [pc, #88]	; (b69c8 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b6970:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b6972:	ab01      	add	r3, sp, #4
   b6974:	4640      	mov	r0, r8
   b6976:	4639      	mov	r1, r7
   b6978:	f001 ff7c 	bl	b8874 <system_subscribe_event>
        if (r) {
   b697c:	b1b0      	cbz	r0, b69ac <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b697e:	4620      	mov	r0, r4
   b6980:	f7ff fa50 	bl	b5e24 <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b6984:	2110      	movs	r1, #16
   b6986:	4620      	mov	r0, r4
   b6988:	f7fd fb89 	bl	b409e <_ZdlPvj>
   b698c:	a810      	add	r0, sp, #64	; 0x40
   b698e:	f7ff fa49 	bl	b5e24 <_ZNSt14_Function_baseD1Ev>
   b6992:	4630      	mov	r0, r6
   b6994:	f7ff fa46 	bl	b5e24 <_ZNSt14_Function_baseD1Ev>
   b6998:	a808      	add	r0, sp, #32
   b699a:	f7ff fa43 	bl	b5e24 <_ZNSt14_Function_baseD1Ev>
   b699e:	a804      	add	r0, sp, #16
   b69a0:	f7ff fa40 	bl	b5e24 <_ZNSt14_Function_baseD1Ev>
    }
   b69a4:	4628      	mov	r0, r5
   b69a6:	b015      	add	sp, #84	; 0x54
   b69a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b69ac:	9b02      	ldr	r3, [sp, #8]
   b69ae:	60ab      	str	r3, [r5, #8]
   b69b0:	e9c5 8700 	strd	r8, r7, [r5]
   b69b4:	e7ea      	b.n	b698c <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b69b6:	bf00      	nop
   b69b8:	000b5de1 	.word	0x000b5de1
   b69bc:	000b6a81 	.word	0x000b6a81
   b69c0:	000c0002 	.word	0x000c0002
   b69c4:	000b5e37 	.word	0x000b5e37
   b69c8:	000b5db9 	.word	0x000b5db9

000b69cc <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b69cc:	b530      	push	{r4, r5, lr}
   b69ce:	4604      	mov	r4, r0
   b69d0:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b69d2:	b111      	cbz	r1, b69da <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b69d4:	6840      	ldr	r0, [r0, #4]
   b69d6:	f002 fabb 	bl	b8f50 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b69da:	4620      	mov	r0, r4
   b69dc:	f7ff fad0 	bl	b5f80 <_ZN6AB180510detectChipEv>
   b69e0:	ad06      	add	r5, sp, #24
   b69e2:	2800      	cmp	r0, #0
   b69e4:	d037      	beq.n	b6a56 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b69e6:	4620      	mov	r0, r4
   b69e8:	f7ff fc08 	bl	b61fc <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b69ec:	2301      	movs	r3, #1
   b69ee:	461a      	mov	r2, r3
   b69f0:	2110      	movs	r1, #16
   b69f2:	4620      	mov	r0, r4
   b69f4:	f7ff fbd9 	bl	b61aa <_ZN6AB180510isBitClearEhhb>
   b69f8:	b1d8      	cbz	r0, b6a32 <_ZN6AB18055setupEb+0x66>
   b69fa:	f004 fb7f 	bl	bb0fc <_ZN9TimeClass7isValidEv>
   b69fe:	b9c0      	cbnz	r0, b6a32 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b6a00:	a902      	add	r1, sp, #8
   b6a02:	4620      	mov	r0, r4
   b6a04:	f7ff fe58 	bl	b66b8 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b6a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6a0c:	f004 fa7a 	bl	baf04 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b6a10:	4b13      	ldr	r3, [pc, #76]	; (b6a60 <_ZN6AB18055setupEb+0x94>)
   b6a12:	4914      	ldr	r1, [pc, #80]	; (b6a64 <_ZN6AB18055setupEb+0x98>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	9300      	str	r3, [sp, #0]
   b6a18:	4628      	mov	r0, r5
   b6a1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6a1e:	f004 fb2b 	bl	bb078 <_ZN9TimeClass6formatExPKc>
   b6a22:	4811      	ldr	r0, [pc, #68]	; (b6a68 <_ZN6AB18055setupEb+0x9c>)
   b6a24:	9a06      	ldr	r2, [sp, #24]
   b6a26:	4911      	ldr	r1, [pc, #68]	; (b6a6c <_ZN6AB18055setupEb+0xa0>)
   b6a28:	f7fd fba0 	bl	b416c <_ZNK5spark6Logger4infoEPKcz>
   b6a2c:	4628      	mov	r0, r5
   b6a2e:	f004 f88d 	bl	bab4c <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b6a32:	4b0f      	ldr	r3, [pc, #60]	; (b6a70 <_ZN6AB18055setupEb+0xa4>)
   b6a34:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b6a36:	4b0f      	ldr	r3, [pc, #60]	; (b6a74 <_ZN6AB18055setupEb+0xa8>)
   b6a38:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b6a3a:	4b0f      	ldr	r3, [pc, #60]	; (b6a78 <_ZN6AB18055setupEb+0xac>)
   b6a3c:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b6a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b6a42:	2300      	movs	r3, #0
   b6a44:	a802      	add	r0, sp, #8
   b6a46:	9500      	str	r5, [sp, #0]
   b6a48:	f7ff ff3c 	bl	b68c4 <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b6a4c:	4628      	mov	r0, r5
   b6a4e:	f7ff f9e9 	bl	b5e24 <_ZNSt14_Function_baseD1Ev>
}
   b6a52:	b00b      	add	sp, #44	; 0x2c
   b6a54:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b6a56:	4909      	ldr	r1, [pc, #36]	; (b6a7c <_ZN6AB18055setupEb+0xb0>)
   b6a58:	4803      	ldr	r0, [pc, #12]	; (b6a68 <_ZN6AB18055setupEb+0x9c>)
   b6a5a:	f7ff fa0a 	bl	b5e72 <_ZNK5spark6Logger5errorEPKcz>
   b6a5e:	e7e8      	b.n	b6a32 <_ZN6AB18055setupEb+0x66>
   b6a60:	2003decc 	.word	0x2003decc
   b6a64:	2003e6ac 	.word	0x2003e6ac
   b6a68:	2003e3dc 	.word	0x2003e3dc
   b6a6c:	000bcfd7 	.word	0x000bcfd7
   b6a70:	000b612d 	.word	0x000b612d
   b6a74:	000b5e1b 	.word	0x000b5e1b
   b6a78:	000b5e07 	.word	0x000b5e07
   b6a7c:	000bcff4 	.word	0x000bcff4

000b6a80 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b6a80:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6a82:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6a84:	4604      	mov	r4, r0
	switch (__op)
   b6a86:	d104      	bne.n	b6a92 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b6a88:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6a8a:	6003      	str	r3, [r0, #0]
      }
   b6a8c:	2000      	movs	r0, #0
   b6a8e:	b003      	add	sp, #12
   b6a90:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b6a92:	2a02      	cmp	r2, #2
   b6a94:	d00c      	beq.n	b6ab0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b6a96:	2a03      	cmp	r2, #3
   b6a98:	d1f8      	bne.n	b6a8c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6a9a:	6804      	ldr	r4, [r0, #0]
   b6a9c:	2c00      	cmp	r4, #0
   b6a9e:	d0f5      	beq.n	b6a8c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6aa0:	4620      	mov	r0, r4
   b6aa2:	f7ff f9bf 	bl	b5e24 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6aa6:	2110      	movs	r1, #16
   b6aa8:	4620      	mov	r0, r4
   b6aaa:	f7fd faf8 	bl	b409e <_ZdlPvj>
   b6aae:	e7ed      	b.n	b6a8c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b6ab0:	6809      	ldr	r1, [r1, #0]
   b6ab2:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6ab4:	2010      	movs	r0, #16
   b6ab6:	f7fd faee 	bl	b4096 <_Znwj>
   b6aba:	4605      	mov	r5, r0
   b6abc:	b110      	cbz	r0, b6ac4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b6abe:	9901      	ldr	r1, [sp, #4]
   b6ac0:	f7ff fef0 	bl	b68a4 <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b6ac4:	6025      	str	r5, [r4, #0]
	}
   b6ac6:	e7e1      	b.n	b6a8c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b6ac8 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b6ac8:	4b01      	ldr	r3, [pc, #4]	; (b6ad0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b6aca:	4a02      	ldr	r2, [pc, #8]	; (b6ad4 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b6acc:	601a      	str	r2, [r3, #0]
}
   b6ace:	4770      	bx	lr
   b6ad0:	2003e3dc 	.word	0x2003e3dc
   b6ad4:	000bd00c 	.word	0x000bd00c

000b6ad8 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b6ad8:	4770      	bx	lr

000b6ada <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b6ada:	b510      	push	{r4, lr}
}
   b6adc:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b6ade:	4604      	mov	r4, r0
}
   b6ae0:	f7fd fadd 	bl	b409e <_ZdlPvj>
   b6ae4:	4620      	mov	r0, r4
   b6ae6:	bd10      	pop	{r4, pc}

000b6ae8 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b6ae8:	6803      	ldr	r3, [r0, #0]
   b6aea:	b2c9      	uxtb	r1, r1
   b6aec:	689b      	ldr	r3, [r3, #8]
   b6aee:	4718      	bx	r3

000b6af0 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b6af0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b6af2:	4d03      	ldr	r5, [pc, #12]	; (b6b00 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b6af4:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b6af8:	e9c0 5100 	strd	r5, r1, [r0]
}
   b6afc:	bd30      	pop	{r4, r5, pc}
   b6afe:	bf00      	nop
   b6b00:	000bd038 	.word	0x000bd038

000b6b04 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b6b04:	6840      	ldr	r0, [r0, #4]
   b6b06:	f002 ba23 	b.w	b8f50 <_ZN7TwoWire5beginEv>

000b6b0a <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b6b0a:	b510      	push	{r4, lr}
   b6b0c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b6b0e:	6800      	ldr	r0, [r0, #0]
   b6b10:	f002 fa79 	bl	b9006 <_ZN7TwoWire6unlockEv>
   b6b14:	4620      	mov	r0, r4
   b6b16:	bd10      	pop	{r4, pc}

000b6b18 <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6b18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6b1c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6b1e:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6b20:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b6b22:	460d      	mov	r5, r1
   b6b24:	4616      	mov	r6, r2
   b6b26:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b6b28:	f002 fa64 	bl	b8ff4 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b6b2c:	b1a7      	cbz	r7, b6b58 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6b2e:	68e1      	ldr	r1, [r4, #12]
   b6b30:	6860      	ldr	r0, [r4, #4]
   b6b32:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6b36:	f002 fa3e 	bl	b8fb6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6b3a:	0a29      	lsrs	r1, r5, #8
   b6b3c:	6860      	ldr	r0, [r4, #4]
   b6b3e:	f7ff ffd3 	bl	b6ae8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6b42:	4629      	mov	r1, r5
   b6b44:	6860      	ldr	r0, [r4, #4]
   b6b46:	f7ff ffcf 	bl	b6ae8 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b6b4a:	6860      	ldr	r0, [r4, #4]
   b6b4c:	2100      	movs	r1, #0
   b6b4e:	f002 fa4d 	bl	b8fec <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6b52:	b148      	cbz	r0, b6b68 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b6b54:	2400      	movs	r4, #0
   b6b56:	e000      	b.n	b6b5a <_ZN6MB85RC8readDataEjPhj+0x42>
   b6b58:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6b5a:	a801      	add	r0, sp, #4
   b6b5c:	f7ff ffd5 	bl	b6b0a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b6b60:	4620      	mov	r0, r4
   b6b62:	b003      	add	sp, #12
   b6b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b6b68:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b6b6a:	7b21      	ldrb	r1, [r4, #12]
   b6b6c:	6860      	ldr	r0, [r4, #4]
   b6b6e:	46b8      	mov	r8, r7
   b6b70:	bf28      	it	cs
   b6b72:	f04f 0820 	movcs.w	r8, #32
   b6b76:	2301      	movs	r3, #1
   b6b78:	4642      	mov	r2, r8
   b6b7a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6b7e:	f002 fa04 	bl	b8f8a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b6b82:	f004 fd59 	bl	bb638 <_Z19__fetch_global_Wirev>
   b6b86:	6803      	ldr	r3, [r0, #0]
   b6b88:	691b      	ldr	r3, [r3, #16]
   b6b8a:	4798      	blx	r3
   b6b8c:	4540      	cmp	r0, r8
   b6b8e:	dbe1      	blt.n	b6b54 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b6b90:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b6b94:	f004 fd50 	bl	bb638 <_Z19__fetch_global_Wirev>
   b6b98:	6803      	ldr	r3, [r0, #0]
   b6b9a:	695b      	ldr	r3, [r3, #20]
   b6b9c:	4798      	blx	r3
   b6b9e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b6ba2:	454e      	cmp	r6, r9
   b6ba4:	d1f6      	bne.n	b6b94 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b6ba6:	4445      	add	r5, r8
				dataLen--;
   b6ba8:	eba7 0708 	sub.w	r7, r7, r8
   b6bac:	e7be      	b.n	b6b2c <_ZN6MB85RC8readDataEjPhj+0x14>

000b6bae <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6bb2:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b6bb4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6bb6:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b6bb8:	460e      	mov	r6, r1
   b6bba:	4690      	mov	r8, r2
   b6bbc:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b6bbe:	f002 fa19 	bl	b8ff4 <_ZN7TwoWire4lockEv>
   b6bc2:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b6bc6:	f1b9 0f00 	cmp.w	r9, #0
   b6bca:	d02a      	beq.n	b6c22 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b6bcc:	b34d      	cbz	r5, b6c22 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b6bce:	68e1      	ldr	r1, [r4, #12]
   b6bd0:	6860      	ldr	r0, [r4, #4]
   b6bd2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b6bd6:	f002 f9ee 	bl	b8fb6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b6bda:	0a31      	lsrs	r1, r6, #8
   b6bdc:	6860      	ldr	r0, [r4, #4]
   b6bde:	f7ff ff83 	bl	b6ae8 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b6be2:	6860      	ldr	r0, [r4, #4]
   b6be4:	4631      	mov	r1, r6
   b6be6:	f7ff ff7f 	bl	b6ae8 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6bea:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b6bee:	4647      	mov	r7, r8
   b6bf0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b6bf4:	6860      	ldr	r0, [r4, #4]
   b6bf6:	f817 1b01 	ldrb.w	r1, [r7], #1
   b6bfa:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b6bfc:	3d01      	subs	r5, #1
				wire.write(*data);
   b6bfe:	689b      	ldr	r3, [r3, #8]
   b6c00:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6c02:	4555      	cmp	r5, sl
   b6c04:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b6c08:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b6c0a:	d001      	beq.n	b6c10 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b6c0c:	2d00      	cmp	r5, #0
   b6c0e:	d1f1      	bne.n	b6bf4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b6c10:	6860      	ldr	r0, [r4, #4]
   b6c12:	2101      	movs	r1, #1
   b6c14:	f002 f9ea 	bl	b8fec <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b6c18:	2800      	cmp	r0, #0
   b6c1a:	d0d7      	beq.n	b6bcc <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b6c1c:	f04f 0900 	mov.w	r9, #0
   b6c20:	e7d1      	b.n	b6bc6 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b6c22:	a801      	add	r0, sp, #4
   b6c24:	f7ff ff71 	bl	b6b0a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b6c28:	4648      	mov	r0, r9
   b6c2a:	b003      	add	sp, #12
   b6c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b6c30 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6c34:	b08b      	sub	sp, #44	; 0x2c
   b6c36:	460e      	mov	r6, r1
   b6c38:	4615      	mov	r5, r2
   b6c3a:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b6c3c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b6c3e:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6c40:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b6c42:	f002 f9d7 	bl	b8ff4 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b6c46:	42ae      	cmp	r6, r5
   b6c48:	d229      	bcs.n	b6c9e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b6c4a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b6c4c:	4425      	add	r5, r4
			while(numBytes > 0) {
   b6c4e:	b18c      	cbz	r4, b6c74 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b6c50:	2c1e      	cmp	r4, #30
   b6c52:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b6c54:	f8d8 3000 	ldr.w	r3, [r8]
   b6c58:	bf28      	it	cs
   b6c5a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b6c5c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b6c5e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6c62:	aa02      	add	r2, sp, #8
   b6c64:	463b      	mov	r3, r7
   b6c66:	4631      	mov	r1, r6
   b6c68:	4640      	mov	r0, r8
				framAddrTo -= count;
   b6c6a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b6c6c:	47c8      	blx	r9
				if (!result) {
   b6c6e:	b948      	cbnz	r0, b6c84 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b6c70:	2400      	movs	r4, #0
   b6c72:	e000      	b.n	b6c76 <_ZN6MB85RC8moveDataEjjj+0x46>
   b6c74:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b6c76:	a801      	add	r0, sp, #4
   b6c78:	f7ff ff47 	bl	b6b0a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	b00b      	add	sp, #44	; 0x2c
   b6c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   b6c84:	f8d8 3000 	ldr.w	r3, [r8]
   b6c88:	aa02      	add	r2, sp, #8
   b6c8a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6c8e:	4629      	mov	r1, r5
   b6c90:	463b      	mov	r3, r7
   b6c92:	4640      	mov	r0, r8
   b6c94:	47c8      	blx	r9
				if (!result) {
   b6c96:	2800      	cmp	r0, #0
   b6c98:	d0ea      	beq.n	b6c70 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   b6c9a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6c9c:	e7d7      	b.n	b6c4e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   b6c9e:	d9e9      	bls.n	b6c74 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   b6ca0:	2c00      	cmp	r4, #0
   b6ca2:	d0e7      	beq.n	b6c74 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   b6ca4:	f8d8 3000 	ldr.w	r3, [r8]
   b6ca8:	2c1e      	cmp	r4, #30
   b6caa:	4627      	mov	r7, r4
   b6cac:	bf28      	it	cs
   b6cae:	271e      	movcs	r7, #30
   b6cb0:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b6cb4:	aa02      	add	r2, sp, #8
   b6cb6:	463b      	mov	r3, r7
   b6cb8:	4631      	mov	r1, r6
   b6cba:	4640      	mov	r0, r8
   b6cbc:	47c8      	blx	r9
				if (!result) {
   b6cbe:	2800      	cmp	r0, #0
   b6cc0:	d0d6      	beq.n	b6c70 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   b6cc2:	f8d8 3000 	ldr.w	r3, [r8]
   b6cc6:	aa02      	add	r2, sp, #8
   b6cc8:	f8d3 900c 	ldr.w	r9, [r3, #12]
   b6ccc:	4629      	mov	r1, r5
   b6cce:	463b      	mov	r3, r7
   b6cd0:	4640      	mov	r0, r8
   b6cd2:	47c8      	blx	r9
				if (!result) {
   b6cd4:	2800      	cmp	r0, #0
   b6cd6:	d0cb      	beq.n	b6c70 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   b6cd8:	443e      	add	r6, r7
				framAddrTo += count;
   b6cda:	443d      	add	r5, r7
				numBytes -= count;
   b6cdc:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   b6cde:	e7df      	b.n	b6ca0 <_ZN6MB85RC8moveDataEjjj+0x70>

000b6ce0 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   b6ce0:	6001      	str	r1, [r0, #0]
   b6ce2:	7102      	strb	r2, [r0, #4]
{
}
   b6ce4:	4770      	bx	lr

000b6ce6 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   b6ce6:	6800      	ldr	r0, [r0, #0]
   b6ce8:	6803      	ldr	r3, [r0, #0]
   b6cea:	68db      	ldr	r3, [r3, #12]
   b6cec:	4718      	bx	r3

000b6cee <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   b6cee:	6800      	ldr	r0, [r0, #0]
   b6cf0:	6803      	ldr	r3, [r0, #0]
   b6cf2:	6a1b      	ldr	r3, [r3, #32]
   b6cf4:	4718      	bx	r3

000b6cf6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   b6cf6:	6800      	ldr	r0, [r0, #0]
   b6cf8:	6803      	ldr	r3, [r0, #0]
   b6cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6cfc:	4718      	bx	r3

000b6cfe <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   b6cfe:	7900      	ldrb	r0, [r0, #4]
   b6d00:	4770      	bx	lr

000b6d02 <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   b6d02:	6800      	ldr	r0, [r0, #0]
   b6d04:	6803      	ldr	r3, [r0, #0]
   b6d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6d08:	4718      	bx	r3

000b6d0a <_ZN10RHDatagram6sendtoEPhhh>:
{
   b6d0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d0c:	4605      	mov	r5, r0
   b6d0e:	460c      	mov	r4, r1
    setHeaderTo(address);
   b6d10:	4619      	mov	r1, r3
{
   b6d12:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   b6d14:	f7ff fff5 	bl	b6d02 <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   b6d18:	6828      	ldr	r0, [r5, #0]
   b6d1a:	9a01      	ldr	r2, [sp, #4]
   b6d1c:	6803      	ldr	r3, [r0, #0]
   b6d1e:	695b      	ldr	r3, [r3, #20]
   b6d20:	4621      	mov	r1, r4
}
   b6d22:	b003      	add	sp, #12
   b6d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   b6d28:	4718      	bx	r3

000b6d2a <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   b6d2a:	6800      	ldr	r0, [r0, #0]
   b6d2c:	6803      	ldr	r3, [r0, #0]
   b6d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d30:	4718      	bx	r3

000b6d32 <_ZN10RHDatagram14setThisAddressEh>:
{
   b6d32:	b538      	push	{r3, r4, r5, lr}
   b6d34:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   b6d36:	6800      	ldr	r0, [r0, #0]
   b6d38:	6803      	ldr	r3, [r0, #0]
{
   b6d3a:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   b6d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6d3e:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   b6d40:	4629      	mov	r1, r5
   b6d42:	4620      	mov	r0, r4
   b6d44:	f7ff fff1 	bl	b6d2a <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   b6d48:	7125      	strb	r5, [r4, #4]
}
   b6d4a:	bd38      	pop	{r3, r4, r5, pc}

000b6d4c <_ZN10RHDatagram4initEv>:
{
   b6d4c:	b538      	push	{r3, r4, r5, lr}
   b6d4e:	4604      	mov	r4, r0
    bool ret = _driver.init();
   b6d50:	6800      	ldr	r0, [r0, #0]
   b6d52:	6803      	ldr	r3, [r0, #0]
   b6d54:	689b      	ldr	r3, [r3, #8]
   b6d56:	4798      	blx	r3
    if (ret)
   b6d58:	4605      	mov	r5, r0
   b6d5a:	b118      	cbz	r0, b6d64 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   b6d5c:	7921      	ldrb	r1, [r4, #4]
   b6d5e:	4620      	mov	r0, r4
   b6d60:	f7ff ffe7 	bl	b6d32 <_ZN10RHDatagram14setThisAddressEh>
}
   b6d64:	4628      	mov	r0, r5
   b6d66:	bd38      	pop	{r3, r4, r5, pc}

000b6d68 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   b6d68:	6800      	ldr	r0, [r0, #0]
   b6d6a:	6803      	ldr	r3, [r0, #0]
   b6d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d6e:	4718      	bx	r3

000b6d70 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   b6d70:	6800      	ldr	r0, [r0, #0]
   b6d72:	6803      	ldr	r3, [r0, #0]
   b6d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d76:	4718      	bx	r3

000b6d78 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   b6d78:	6800      	ldr	r0, [r0, #0]
   b6d7a:	6803      	ldr	r3, [r0, #0]
   b6d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6d7e:	4718      	bx	r3

000b6d80 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   b6d80:	6800      	ldr	r0, [r0, #0]
   b6d82:	6803      	ldr	r3, [r0, #0]
   b6d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6d86:	4718      	bx	r3

000b6d88 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   b6d88:	6800      	ldr	r0, [r0, #0]
   b6d8a:	6803      	ldr	r3, [r0, #0]
   b6d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6d8e:	4718      	bx	r3

000b6d90 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   b6d90:	6800      	ldr	r0, [r0, #0]
   b6d92:	6803      	ldr	r3, [r0, #0]
   b6d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6d96:	4718      	bx	r3

000b6d98 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   b6d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6d9c:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   b6d9e:	6800      	ldr	r0, [r0, #0]
{
   b6da0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   b6da2:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   b6da4:	6803      	ldr	r3, [r0, #0]
   b6da6:	691b      	ldr	r3, [r3, #16]
{
   b6da8:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   b6dac:	4798      	blx	r3
   b6dae:	4605      	mov	r5, r0
   b6db0:	b1c8      	cbz	r0, b6de6 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   b6db2:	b11e      	cbz	r6, b6dbc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   b6db4:	4620      	mov	r0, r4
   b6db6:	f7ff ffe3 	bl	b6d80 <_ZN10RHDatagram10headerFromEv>
   b6dba:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   b6dbc:	f1b9 0f00 	cmp.w	r9, #0
   b6dc0:	d004      	beq.n	b6dcc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   b6dc2:	4620      	mov	r0, r4
   b6dc4:	f7ff ffd8 	bl	b6d78 <_ZN10RHDatagram8headerToEv>
   b6dc8:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   b6dcc:	f1b8 0f00 	cmp.w	r8, #0
   b6dd0:	d004      	beq.n	b6ddc <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   b6dd2:	4620      	mov	r0, r4
   b6dd4:	f7ff ffd8 	bl	b6d88 <_ZN10RHDatagram8headerIdEv>
   b6dd8:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   b6ddc:	b11f      	cbz	r7, b6de6 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   b6dde:	4620      	mov	r0, r4
   b6de0:	f7ff ffd6 	bl	b6d90 <_ZN10RHDatagram11headerFlagsEv>
   b6de4:	7038      	strb	r0, [r7, #0]
}
   b6de6:	4628      	mov	r0, r5
   b6de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b6dec <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   b6dec:	2001      	movs	r0, #1
   b6dee:	4770      	bx	lr

000b6df0 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   b6df0:	7903      	ldrb	r3, [r0, #4]
   b6df2:	2b03      	cmp	r3, #3
   b6df4:	d0fc      	beq.n	b6df0 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   b6df6:	2001      	movs	r0, #1
   b6df8:	4770      	bx	lr

000b6dfa <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   b6dfa:	2000      	movs	r0, #0
   b6dfc:	4770      	bx	lr

000b6dfe <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   b6dfe:	7181      	strb	r1, [r0, #6]
}
   b6e00:	4770      	bx	lr

000b6e02 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   b6e02:	7141      	strb	r1, [r0, #5]
}
   b6e04:	4770      	bx	lr

000b6e06 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   b6e06:	72c1      	strb	r1, [r0, #11]
}
   b6e08:	4770      	bx	lr

000b6e0a <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   b6e0a:	7301      	strb	r1, [r0, #12]
}
   b6e0c:	4770      	bx	lr

000b6e0e <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   b6e0e:	7341      	strb	r1, [r0, #13]
}
   b6e10:	4770      	bx	lr

000b6e12 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   b6e12:	7b83      	ldrb	r3, [r0, #14]
   b6e14:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   b6e18:	4311      	orrs	r1, r2
   b6e1a:	7381      	strb	r1, [r0, #14]
}
   b6e1c:	4770      	bx	lr

000b6e1e <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   b6e1e:	79c0      	ldrb	r0, [r0, #7]
}
   b6e20:	4770      	bx	lr

000b6e22 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   b6e22:	7a00      	ldrb	r0, [r0, #8]
}
   b6e24:	4770      	bx	lr

000b6e26 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   b6e26:	7a40      	ldrb	r0, [r0, #9]
}
   b6e28:	4770      	bx	lr

000b6e2a <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   b6e2a:	7a80      	ldrb	r0, [r0, #10]
}
   b6e2c:	4770      	bx	lr

000b6e2e <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   b6e2e:	8a00      	ldrh	r0, [r0, #16]
}
   b6e30:	b200      	sxth	r0, r0
   b6e32:	4770      	bx	lr

000b6e34 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   b6e34:	7900      	ldrb	r0, [r0, #4]
}
   b6e36:	4770      	bx	lr

000b6e38 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   b6e38:	7101      	strb	r1, [r0, #4]
}
   b6e3a:	4770      	bx	lr

000b6e3c <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   b6e3c:	8a40      	ldrh	r0, [r0, #18]
}
   b6e3e:	b280      	uxth	r0, r0
   b6e40:	4770      	bx	lr

000b6e42 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   b6e42:	8a80      	ldrh	r0, [r0, #20]
}
   b6e44:	b280      	uxth	r0, r0
   b6e46:	4770      	bx	lr

000b6e48 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   b6e48:	8ac0      	ldrh	r0, [r0, #22]
}
   b6e4a:	b280      	uxth	r0, r0
   b6e4c:	4770      	bx	lr

000b6e4e <_ZN15RHGenericDriver13waitAvailableEt>:
{
   b6e4e:	b538      	push	{r3, r4, r5, lr}
   b6e50:	4605      	mov	r5, r0
   b6e52:	460c      	mov	r4, r1
    while (!available())
   b6e54:	682b      	ldr	r3, [r5, #0]
   b6e56:	4628      	mov	r0, r5
   b6e58:	68db      	ldr	r3, [r3, #12]
   b6e5a:	4798      	blx	r3
   b6e5c:	b928      	cbnz	r0, b6e6a <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   b6e5e:	2c00      	cmp	r4, #0
   b6e60:	d0f8      	beq.n	b6e54 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   b6e62:	4620      	mov	r0, r4
   b6e64:	f001 fe50 	bl	b8b08 <delay>
   b6e68:	e7f4      	b.n	b6e54 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   b6e6a:	bd38      	pop	{r3, r4, r5, pc}

000b6e6c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   b6e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6e6e:	4605      	mov	r5, r0
   b6e70:	460f      	mov	r7, r1
   b6e72:	4614      	mov	r4, r2
   b6e74:	f001 fae4 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b6e78:	4606      	mov	r6, r0
   b6e7a:	f001 fae1 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6e7e:	1b80      	subs	r0, r0, r6
   b6e80:	42b8      	cmp	r0, r7
   b6e82:	d20a      	bcs.n	b6e9a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   b6e84:	682b      	ldr	r3, [r5, #0]
   b6e86:	4628      	mov	r0, r5
   b6e88:	68db      	ldr	r3, [r3, #12]
   b6e8a:	4798      	blx	r3
   b6e8c:	b930      	cbnz	r0, b6e9c <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   b6e8e:	2c00      	cmp	r4, #0
   b6e90:	d0f3      	beq.n	b6e7a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   b6e92:	4620      	mov	r0, r4
   b6e94:	f001 fe38 	bl	b8b08 <delay>
   b6e98:	e7ef      	b.n	b6e7a <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   b6e9a:	2000      	movs	r0, #0
}
   b6e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6e9e <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   b6e9e:	b570      	push	{r4, r5, r6, lr}
   b6ea0:	4604      	mov	r4, r0
   b6ea2:	460e      	mov	r6, r1
   b6ea4:	f001 facc 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b6ea8:	4605      	mov	r5, r0
   b6eaa:	f001 fac9 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   b6eae:	1b40      	subs	r0, r0, r5
   b6eb0:	42b0      	cmp	r0, r6
   b6eb2:	d204      	bcs.n	b6ebe <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   b6eb4:	7923      	ldrb	r3, [r4, #4]
   b6eb6:	2b03      	cmp	r3, #3
   b6eb8:	d0f7      	beq.n	b6eaa <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   b6eba:	2001      	movs	r0, #1
}
   b6ebc:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b6ebe:	2000      	movs	r0, #0
   b6ec0:	e7fc      	b.n	b6ebc <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000b6ec2 <_ZN15RHGenericDriver7waitCADEv>:
{
   b6ec2:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   b6ec4:	69c3      	ldr	r3, [r0, #28]
{
   b6ec6:	4604      	mov	r4, r0
    if (!_cad_timeout)
   b6ec8:	b1b3      	cbz	r3, b6ef8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6eca:	f001 fab9 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6ece:	2664      	movs	r6, #100	; 0x64
   b6ed0:	4605      	mov	r5, r0
    while (isChannelActive())
   b6ed2:	6823      	ldr	r3, [r4, #0]
   b6ed4:	4620      	mov	r0, r4
   b6ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ed8:	4798      	blx	r3
   b6eda:	b168      	cbz	r0, b6ef8 <_ZN15RHGenericDriver7waitCADEv+0x36>
   b6edc:	f001 fab0 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   b6ee0:	69e3      	ldr	r3, [r4, #28]
   b6ee2:	1b40      	subs	r0, r0, r5
   b6ee4:	4298      	cmp	r0, r3
   b6ee6:	d809      	bhi.n	b6efc <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   b6ee8:	210a      	movs	r1, #10
   b6eea:	2001      	movs	r0, #1
   b6eec:	f003 fd55 	bl	ba99a <_Z6randomii>
   b6ef0:	4370      	muls	r0, r6
   b6ef2:	f001 fe09 	bl	b8b08 <delay>
    while (isChannelActive())
   b6ef6:	e7ec      	b.n	b6ed2 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   b6ef8:	2001      	movs	r0, #1
}
   b6efa:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   b6efc:	2000      	movs	r0, #0
   b6efe:	e7fc      	b.n	b6efa <_ZN15RHGenericDriver7waitCADEv+0x38>

000b6f00 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   b6f00:	4a06      	ldr	r2, [pc, #24]	; (b6f1c <_ZN15RHGenericDriverC1Ev+0x1c>)
   b6f02:	6002      	str	r2, [r0, #0]
   b6f04:	21ff      	movs	r1, #255	; 0xff
   b6f06:	2200      	movs	r2, #0
   b6f08:	7102      	strb	r2, [r0, #4]
   b6f0a:	7141      	strb	r1, [r0, #5]
   b6f0c:	8242      	strh	r2, [r0, #18]
   b6f0e:	72c1      	strb	r1, [r0, #11]
   b6f10:	8282      	strh	r2, [r0, #20]
   b6f12:	8181      	strh	r1, [r0, #12]
   b6f14:	7382      	strb	r2, [r0, #14]
   b6f16:	82c2      	strh	r2, [r0, #22]
   b6f18:	61c2      	str	r2, [r0, #28]
}
   b6f1a:	4770      	bx	lr
   b6f1c:	000bd054 	.word	0x000bd054

000b6f20 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   b6f20:	4770      	bx	lr

000b6f22 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   b6f22:	4770      	bx	lr

000b6f24 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   b6f24:	4770      	bx	lr

000b6f26 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   b6f26:	4770      	bx	lr

000b6f28 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   b6f28:	4770      	bx	lr

000b6f2a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   b6f2a:	7141      	strb	r1, [r0, #5]
}
   b6f2c:	4770      	bx	lr

000b6f2e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   b6f2e:	7181      	strb	r1, [r0, #6]
}
   b6f30:	4770      	bx	lr

000b6f32 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   b6f32:	7101      	strb	r1, [r0, #4]
}
   b6f34:	4770      	bx	lr
	...

000b6f38 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6f38:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   b6f3a:	4d03      	ldr	r5, [pc, #12]	; (b6f48 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   b6f3c:	6005      	str	r5, [r0, #0]
   b6f3e:	7101      	strb	r1, [r0, #4]
   b6f40:	7142      	strb	r2, [r0, #5]
   b6f42:	7183      	strb	r3, [r0, #6]
}
   b6f44:	bd30      	pop	{r4, r5, pc}
   b6f46:	bf00      	nop
   b6f48:	000bd0d4 	.word	0x000bd0d4

000b6f4c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6f4c:	4770      	bx	lr

000b6f4e <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6f4e:	b510      	push	{r4, lr}
  }
   b6f50:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6f52:	4604      	mov	r4, r0
  }
   b6f54:	f7fd f8a3 	bl	b409e <_ZdlPvj>
   b6f58:	4620      	mov	r0, r4
   b6f5a:	bd10      	pop	{r4, pc}

000b6f5c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6f5c:	b40e      	push	{r1, r2, r3}
   b6f5e:	b503      	push	{r0, r1, lr}
   b6f60:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b6f62:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6f64:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b6f68:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b6f6a:	f003 fcda 	bl	ba922 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b6f6e:	b002      	add	sp, #8
   b6f70:	f85d eb04 	ldr.w	lr, [sp], #4
   b6f74:	b003      	add	sp, #12
   b6f76:	4770      	bx	lr

000b6f78 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6f78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6f7a:	4604      	mov	r4, r0
   b6f7c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6f7e:	7922      	ldrb	r2, [r4, #4]
   b6f80:	68a3      	ldr	r3, [r4, #8]
   b6f82:	b132      	cbz	r2, b6f92 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b6f84:	b9a3      	cbnz	r3, b6fb0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b6f86:	490b      	ldr	r1, [pc, #44]	; (b6fb4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6f88:	b002      	add	sp, #8
   b6f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6f8e:	f003 bbbf 	b.w	ba710 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6f92:	4a09      	ldr	r2, [pc, #36]	; (b6fb8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6f94:	7b26      	ldrb	r6, [r4, #12]
   b6f96:	4d09      	ldr	r5, [pc, #36]	; (b6fbc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6f98:	4909      	ldr	r1, [pc, #36]	; (b6fc0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6f9a:	7b64      	ldrb	r4, [r4, #13]
   b6f9c:	2e01      	cmp	r6, #1
   b6f9e:	bf18      	it	ne
   b6fa0:	4629      	movne	r1, r5
   b6fa2:	e9cd 1400 	strd	r1, r4, [sp]
   b6fa6:	4907      	ldr	r1, [pc, #28]	; (b6fc4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6fa8:	f7ff ffd8 	bl	b6f5c <_ZN5Print6printfEPKcz>
  }
   b6fac:	b002      	add	sp, #8
   b6fae:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b6fb0:	4a05      	ldr	r2, [pc, #20]	; (b6fc8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b6fb2:	e7ef      	b.n	b6f94 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6fb4:	000bd111 	.word	0x000bd111
   b6fb8:	000bd4ad 	.word	0x000bd4ad
   b6fbc:	000bd10d 	.word	0x000bd10d
   b6fc0:	000bd109 	.word	0x000bd109
   b6fc4:	000bd127 	.word	0x000bd127
   b6fc8:	000bd100 	.word	0x000bd100

000b6fcc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   b6fcc:	b510      	push	{r4, lr}
   b6fce:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   b6fd0:	f7ff ffb2 	bl	b6f38 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   b6fd4:	4b05      	ldr	r3, [pc, #20]	; (b6fec <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   b6fd6:	6023      	str	r3, [r4, #0]
  {
   b6fd8:	4b05      	ldr	r3, [pc, #20]	; (b6ff0 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   b6fda:	60a3      	str	r3, [r4, #8]
   b6fdc:	2301      	movs	r3, #1
   b6fde:	7323      	strb	r3, [r4, #12]
   b6fe0:	2300      	movs	r3, #0
   b6fe2:	6123      	str	r3, [r4, #16]
   b6fe4:	82a3      	strh	r3, [r4, #20]
{
}
   b6fe6:	4620      	mov	r0, r4
   b6fe8:	bd10      	pop	{r4, pc}
   b6fea:	bf00      	nop
   b6fec:	000bd160 	.word	0x000bd160
   b6ff0:	000bd14c 	.word	0x000bd14c

000b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b6ff4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b6ff6:	4c0b      	ldr	r4, [pc, #44]	; (b7024 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b6ff8:	7821      	ldrb	r1, [r4, #0]
   b6ffa:	f3bf 8f5b 	dmb	ish
   b6ffe:	f011 0101 	ands.w	r1, r1, #1
   b7002:	d10b      	bne.n	b701c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7004:	4620      	mov	r0, r4
   b7006:	9101      	str	r1, [sp, #4]
   b7008:	f7fd f858 	bl	b40bc <__cxa_guard_acquire>
   b700c:	9901      	ldr	r1, [sp, #4]
   b700e:	b128      	cbz	r0, b701c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b7010:	4805      	ldr	r0, [pc, #20]	; (b7028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b7012:	f003 fcdb 	bl	ba9cc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7016:	4620      	mov	r0, r4
   b7018:	f7fd f855 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b701c:	4802      	ldr	r0, [pc, #8]	; (b7028 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b701e:	b002      	add	sp, #8
   b7020:	bd10      	pop	{r4, pc}
   b7022:	bf00      	nop
   b7024:	2003e3e4 	.word	0x2003e3e4
   b7028:	2003e3e8 	.word	0x2003e3e8

000b702c <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   b702c:	b507      	push	{r0, r1, r2, lr}
   b702e:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b7030:	f7ff ffe0 	bl	b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b7034:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   b7036:	b003      	add	sp, #12
   b7038:	f85d eb04 	ldr.w	lr, [sp], #4
   b703c:	f003 bd7e 	b.w	bab3c <_ZN8SPIClass8transferEh>

000b7040 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   b7040:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   b7042:	f7ff ffd7 	bl	b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   b7046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b704a:	f003 bd7d 	b.w	bab48 <_ZN8SPIClass15attachInterruptEv>

000b704e <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   b704e:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   b7050:	f7ff ffd0 	bl	b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   b7054:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b7058:	f003 bd77 	b.w	bab4a <_ZN8SPIClass15detachInterruptEv>

000b705c <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   b705c:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   b705e:	7903      	ldrb	r3, [r0, #4]
   b7060:	2b04      	cmp	r3, #4
   b7062:	d020      	beq.n	b70a6 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   b7064:	2b03      	cmp	r3, #3
   b7066:	d020      	beq.n	b70aa <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   b7068:	2b02      	cmp	r3, #2
   b706a:	d020      	beq.n	b70ae <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   b706c:	4a11      	ldr	r2, [pc, #68]	; (b70b4 <_ZN13RHHardwareSPI5beginEv+0x58>)
   b706e:	4912      	ldr	r1, [pc, #72]	; (b70b8 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   b7070:	2b01      	cmp	r3, #1
   b7072:	bf18      	it	ne
   b7074:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   b7076:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   b7078:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   b707a:	3901      	subs	r1, #1
   b707c:	bf18      	it	ne
   b707e:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   b7080:	b133      	cbz	r3, b7090 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   b7082:	2b01      	cmp	r3, #1
   b7084:	d004      	beq.n	b7090 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   b7086:	2b02      	cmp	r3, #2
   b7088:	d002      	beq.n	b7090 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   b708a:	2b03      	cmp	r3, #3
   b708c:	bf18      	it	ne
   b708e:	2300      	movne	r3, #0
class SPISettings : public Printable {
   b7090:	2400      	movs	r4, #0
   b7092:	7304      	strb	r4, [r0, #12]
   b7094:	6102      	str	r2, [r0, #16]
   b7096:	7501      	strb	r1, [r0, #20]
   b7098:	7543      	strb	r3, [r0, #21]
        instance().begin();
   b709a:	f7ff ffab 	bl	b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   b709e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b70a2:	f003 bc9d 	b.w	ba9e0 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   b70a6:	4a05      	ldr	r2, [pc, #20]	; (b70bc <_ZN13RHHardwareSPI5beginEv+0x60>)
   b70a8:	e7e5      	b.n	b7076 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   b70aa:	4a05      	ldr	r2, [pc, #20]	; (b70c0 <_ZN13RHHardwareSPI5beginEv+0x64>)
   b70ac:	e7e3      	b.n	b7076 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   b70ae:	4a05      	ldr	r2, [pc, #20]	; (b70c4 <_ZN13RHHardwareSPI5beginEv+0x68>)
   b70b0:	e7e1      	b.n	b7076 <_ZN13RHHardwareSPI5beginEv+0x1a>
   b70b2:	bf00      	nop
   b70b4:	001e8480 	.word	0x001e8480
   b70b8:	000f4240 	.word	0x000f4240
   b70bc:	00f42400 	.word	0x00f42400
   b70c0:	007a1200 	.word	0x007a1200
   b70c4:	003d0900 	.word	0x003d0900

000b70c8 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   b70c8:	b508      	push	{r3, lr}
        instance().end();
   b70ca:	f7ff ff93 	bl	b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   b70ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b70d2:	f003 bc99 	b.w	baa08 <_ZN8SPIClass3endEv>

000b70d6 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   b70d6:	b510      	push	{r4, lr}
   b70d8:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   b70da:	f7ff ff8b 	bl	b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b70de:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   b70e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b70e6:	f003 bcbb 	b.w	baa60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b70ea <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   b70ea:	b508      	push	{r3, lr}
        instance().endTransaction();
   b70ec:	f7ff ff82 	bl	b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   b70f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b70f4:	f003 bc9a 	b.w	baa2c <_ZN8SPIClass14endTransactionEv>

000b70f8 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   b70f8:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   b70fa:	f7ff ff7b 	bl	b6ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   b70fe:	bd08      	pop	{r3, pc}

000b7100 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   b7100:	2300      	movs	r3, #0
   b7102:	4802      	ldr	r0, [pc, #8]	; (b710c <_GLOBAL__sub_I_hardware_spi+0xc>)
   b7104:	461a      	mov	r2, r3
   b7106:	4619      	mov	r1, r3
   b7108:	f7ff bf60 	b.w	b6fcc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   b710c:	2003e3f0 	.word	0x2003e3f0

000b7110 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   b7110:	2a01      	cmp	r2, #1
   b7112:	d105      	bne.n	b7120 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   b7114:	7a00      	ldrb	r0, [r0, #8]
   b7116:	780b      	ldrb	r3, [r1, #0]
   b7118:	1a1b      	subs	r3, r3, r0
   b711a:	4258      	negs	r0, r3
   b711c:	4158      	adcs	r0, r3
   b711e:	4770      	bx	lr
   b7120:	2000      	movs	r0, #0
}
   b7122:	4770      	bx	lr

000b7124 <_ZN6RHMesh5doArpEh>:
{
   b7124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b7128:	4c25      	ldr	r4, [pc, #148]	; (b71c0 <_ZN6RHMesh5doArpEh+0x9c>)
   b712a:	2301      	movs	r3, #1
{
   b712c:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   b712e:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   b7130:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7132:	2300      	movs	r3, #0
{
   b7134:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   b7136:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7138:	9300      	str	r3, [sp, #0]
   b713a:	2203      	movs	r2, #3
   b713c:	23ff      	movs	r3, #255	; 0xff
   b713e:	4621      	mov	r1, r4
{
   b7140:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   b7142:	f000 fbe5 	bl	b7910 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   b7146:	b120      	cbz	r0, b7152 <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   b7148:	2500      	movs	r5, #0
}
   b714a:	4628      	mov	r0, r5
   b714c:	b006      	add	sp, #24
   b714e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   b7152:	23fa      	movs	r3, #250	; 0xfa
   b7154:	f88d 3017 	strb.w	r3, [sp, #23]
   b7158:	f001 f972 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   b715c:	f106 0904 	add.w	r9, r6, #4
   b7160:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   b7162:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   b7166:	f001 f96b 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b716a:	1a29      	subs	r1, r5, r0
   b716c:	2900      	cmp	r1, #0
   b716e:	ddeb      	ble.n	b7148 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   b7170:	2200      	movs	r2, #0
   b7172:	b289      	uxth	r1, r1
   b7174:	4648      	mov	r0, r9
   b7176:	f7ff fdbe 	bl	b6cf6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b717a:	2800      	cmp	r0, #0
   b717c:	d0f3      	beq.n	b7166 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   b717e:	2300      	movs	r3, #0
   b7180:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b7184:	e9cd 3300 	strd	r3, r3, [sp]
   b7188:	f10d 0217 	add.w	r2, sp, #23
   b718c:	4621      	mov	r1, r4
   b718e:	4630      	mov	r0, r6
   b7190:	f000 fbc8 	bl	b7924 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b7194:	4605      	mov	r5, r0
   b7196:	2800      	cmp	r0, #0
   b7198:	d0e3      	beq.n	b7162 <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   b719a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   b719e:	2b01      	cmp	r3, #1
   b71a0:	d9df      	bls.n	b7162 <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b71a2:	f894 a000 	ldrb.w	sl, [r4]
   b71a6:	f1ba 0f02 	cmp.w	sl, #2
   b71aa:	d1da      	bne.n	b7162 <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   b71ac:	4648      	mov	r0, r9
   b71ae:	f7ff fde7 	bl	b6d80 <_ZN10RHDatagram10headerFromEv>
   b71b2:	4653      	mov	r3, sl
   b71b4:	4602      	mov	r2, r0
   b71b6:	4639      	mov	r1, r7
   b71b8:	4630      	mov	r0, r6
   b71ba:	f000 fb21 	bl	b7800 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   b71be:	e7c4      	b.n	b714a <_ZN6RHMesh5doArpEh+0x26>
   b71c0:	2003e408 	.word	0x2003e408

000b71c4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   b71c4:	2a01      	cmp	r2, #1
{
   b71c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b71ca:	4607      	mov	r7, r0
   b71cc:	460e      	mov	r6, r1
   b71ce:	4614      	mov	r4, r2
    if (   messageLen > 1 
   b71d0:	d93b      	bls.n	b724a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   b71d2:	794d      	ldrb	r5, [r1, #5]
   b71d4:	2d02      	cmp	r5, #2
   b71d6:	d130      	bne.n	b723a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   b71d8:	f100 0804 	add.w	r8, r0, #4
   b71dc:	79c9      	ldrb	r1, [r1, #7]
   b71de:	9101      	str	r1, [sp, #4]
   b71e0:	4640      	mov	r0, r8
   b71e2:	f7ff fdcd 	bl	b6d80 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b71e6:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   b71e8:	462b      	mov	r3, r5
   b71ea:	4602      	mov	r2, r0
   b71ec:	9901      	ldr	r1, [sp, #4]
   b71ee:	4638      	mov	r0, r7
   b71f0:	f000 fb06 	bl	b7800 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   b71f4:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   b71f6:	f106 0308 	add.w	r3, r6, #8
   b71fa:	2400      	movs	r4, #0
   b71fc:	4622      	mov	r2, r4
   b71fe:	4295      	cmp	r5, r2
   b7200:	f104 0401 	add.w	r4, r4, #1
   b7204:	b2e4      	uxtb	r4, r4
   b7206:	d904      	bls.n	b7212 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   b7208:	f813 2b01 	ldrb.w	r2, [r3], #1
   b720c:	7a39      	ldrb	r1, [r7, #8]
   b720e:	4291      	cmp	r1, r2
   b7210:	d1f4      	bne.n	b71fc <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   b7212:	f104 0108 	add.w	r1, r4, #8
   b7216:	440e      	add	r6, r1
	while (i < numRoutes)
   b7218:	42a5      	cmp	r5, r4
   b721a:	d916      	bls.n	b724a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   b721c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b7220:	9101      	str	r1, [sp, #4]
   b7222:	4640      	mov	r0, r8
   b7224:	f7ff fdac 	bl	b6d80 <_ZN10RHDatagram10headerFromEv>
   b7228:	3401      	adds	r4, #1
   b722a:	4602      	mov	r2, r0
   b722c:	9901      	ldr	r1, [sp, #4]
   b722e:	2302      	movs	r3, #2
   b7230:	4638      	mov	r0, r7
   b7232:	b2e4      	uxtb	r4, r4
   b7234:	f000 fae4 	bl	b7800 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   b7238:	e7ee      	b.n	b7218 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   b723a:	2d03      	cmp	r5, #3
   b723c:	d105      	bne.n	b724a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   b723e:	7989      	ldrb	r1, [r1, #6]
}
   b7240:	b002      	add	sp, #8
   b7242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   b7246:	f000 bac4 	b.w	b77d2 <_ZN8RHRouter13deleteRouteToEh>
}
   b724a:	b002      	add	sp, #8
   b724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7250 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   b7250:	b510      	push	{r4, lr}
   b7252:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   b7254:	f000 fb14 	bl	b7880 <_ZN8RHRouterC1ER15RHGenericDriverh>
   b7258:	4b01      	ldr	r3, [pc, #4]	; (b7260 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   b725a:	6023      	str	r3, [r4, #0]
}
   b725c:	4620      	mov	r0, r4
   b725e:	bd10      	pop	{r4, pc}
   b7260:	000bd194 	.word	0x000bd194

000b7264 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   b7264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7268:	2af9      	cmp	r2, #249	; 0xf9
{
   b726a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   b726e:	4606      	mov	r6, r0
   b7270:	460f      	mov	r7, r1
   b7272:	4614      	mov	r4, r2
   b7274:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   b7276:	d825      	bhi.n	b72c4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   b7278:	2bff      	cmp	r3, #255	; 0xff
   b727a:	d114      	bne.n	b72a6 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b727c:	f8df 8048 	ldr.w	r8, [pc, #72]	; b72c8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   b7280:	4640      	mov	r0, r8
   b7282:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   b7284:	4622      	mov	r2, r4
   b7286:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   b7288:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   b728c:	f004 ff6a 	bl	bc164 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b7290:	1c62      	adds	r2, r4, #1
   b7292:	f8cd 9020 	str.w	r9, [sp, #32]
   b7296:	462b      	mov	r3, r5
   b7298:	4641      	mov	r1, r8
   b729a:	4630      	mov	r0, r6
   b729c:	b2d2      	uxtb	r2, r2
}
   b729e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   b72a2:	f000 bb35 	b.w	b7910 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   b72a6:	4619      	mov	r1, r3
   b72a8:	f000 fa4f 	bl	b774a <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   b72ac:	2800      	cmp	r0, #0
   b72ae:	d1e5      	bne.n	b727c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   b72b0:	6833      	ldr	r3, [r6, #0]
   b72b2:	4629      	mov	r1, r5
   b72b4:	689b      	ldr	r3, [r3, #8]
   b72b6:	4630      	mov	r0, r6
   b72b8:	4798      	blx	r3
   b72ba:	2800      	cmp	r0, #0
   b72bc:	d1de      	bne.n	b727c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b72be:	2002      	movs	r0, #2
}
   b72c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   b72c4:	2001      	movs	r0, #1
   b72c6:	e7fb      	b.n	b72c0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   b72c8:	2003e408 	.word	0x2003e408

000b72cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   b72cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b72d0:	b089      	sub	sp, #36	; 0x24
   b72d2:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b72d4:	23fa      	movs	r3, #250	; 0xfa
   b72d6:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b72da:	f10d 031f 	add.w	r3, sp, #31
   b72de:	9303      	str	r3, [sp, #12]
   b72e0:	f10d 031e 	add.w	r3, sp, #30
   b72e4:	9302      	str	r3, [sp, #8]
   b72e6:	4e5d      	ldr	r6, [pc, #372]	; (b745c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b72e8:	f10d 031d 	add.w	r3, sp, #29
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	ab07      	add	r3, sp, #28
   b72f0:	9300      	str	r3, [sp, #0]
{     
   b72f2:	4689      	mov	r9, r1
   b72f4:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b72f6:	f10d 031b 	add.w	r3, sp, #27
   b72fa:	f10d 021a 	add.w	r2, sp, #26
   b72fe:	4631      	mov	r1, r6
{     
   b7300:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   b7304:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   b7306:	f000 fb0d 	bl	b7924 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b730a:	4604      	mov	r4, r0
   b730c:	b920      	cbnz	r0, b7318 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   b730e:	2400      	movs	r4, #0
}
   b7310:	4620      	mov	r0, r4
   b7312:	b009      	add	sp, #36	; 0x24
   b7314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   b7318:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b731c:	b373      	cbz	r3, b737c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   b731e:	7832      	ldrb	r2, [r6, #0]
   b7320:	bb62      	cbnz	r2, b737c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   b7322:	f1b8 0f00 	cmp.w	r8, #0
   b7326:	d003      	beq.n	b7330 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   b7328:	f89d 201b 	ldrb.w	r2, [sp, #27]
   b732c:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   b7330:	f1bb 0f00 	cmp.w	fp, #0
   b7334:	d003      	beq.n	b733e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   b7336:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b733a:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   b733e:	f1ba 0f00 	cmp.w	sl, #0
   b7342:	d003      	beq.n	b734c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   b7344:	f89d 201d 	ldrb.w	r2, [sp, #29]
   b7348:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   b734c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b734e:	b11a      	cbz	r2, b7358 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   b7350:	9914      	ldr	r1, [sp, #80]	; 0x50
   b7352:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b7356:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   b7358:	9a15      	ldr	r2, [sp, #84]	; 0x54
   b735a:	b11a      	cbz	r2, b7364 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   b735c:	9915      	ldr	r1, [sp, #84]	; 0x54
   b735e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b7362:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   b7364:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7366:	493e      	ldr	r1, [pc, #248]	; (b7460 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   b7368:	3b01      	subs	r3, #1
   b736a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b736c:	429a      	cmp	r2, r3
		*len = msgLen;
   b736e:	bf88      	it	hi
   b7370:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   b7372:	783a      	ldrb	r2, [r7, #0]
   b7374:	4648      	mov	r0, r9
   b7376:	f004 fef5 	bl	bc164 <memcpy>
	    return true;
   b737a:	e7c9      	b.n	b7310 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   b737c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b7380:	2aff      	cmp	r2, #255	; 0xff
   b7382:	d1c4      	bne.n	b730e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   b7384:	2b01      	cmp	r3, #1
   b7386:	d9c2      	bls.n	b730e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   b7388:	7832      	ldrb	r2, [r6, #0]
   b738a:	2a01      	cmp	r2, #1
   b738c:	d1bf      	bne.n	b730e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   b738e:	7a2a      	ldrb	r2, [r5, #8]
   b7390:	f89d 401b 	ldrb.w	r4, [sp, #27]
   b7394:	42a2      	cmp	r2, r4
   b7396:	d0ba      	beq.n	b730e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   b7398:	1edf      	subs	r7, r3, #3
   b739a:	4932      	ldr	r1, [pc, #200]	; (b7464 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   b739c:	b2ff      	uxtb	r7, r7
   b739e:	2300      	movs	r3, #0
   b73a0:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   b73a4:	4547      	cmp	r7, r8
   b73a6:	d906      	bls.n	b73b6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   b73a8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b73ac:	4282      	cmp	r2, r0
   b73ae:	f103 0301 	add.w	r3, r3, #1
   b73b2:	d1f5      	bne.n	b73a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   b73b4:	e7ab      	b.n	b730e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   b73b6:	f105 0904 	add.w	r9, r5, #4
   b73ba:	4648      	mov	r0, r9
   b73bc:	f7ff fce0 	bl	b6d80 <_ZN10RHDatagram10headerFromEv>
   b73c0:	2302      	movs	r3, #2
   b73c2:	4602      	mov	r2, r0
   b73c4:	4621      	mov	r1, r4
   b73c6:	4628      	mov	r0, r5
   b73c8:	f000 fa1a 	bl	b7800 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   b73cc:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b73d0:	b193      	cbz	r3, b73f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   b73d2:	4c22      	ldr	r4, [pc, #136]	; (b745c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   b73d4:	1ba3      	subs	r3, r4, r6
   b73d6:	b2db      	uxtb	r3, r3
   b73d8:	429f      	cmp	r7, r3
   b73da:	d90c      	bls.n	b73f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   b73dc:	78e1      	ldrb	r1, [r4, #3]
   b73de:	9105      	str	r1, [sp, #20]
   b73e0:	4648      	mov	r0, r9
   b73e2:	f7ff fccd 	bl	b6d80 <_ZN10RHDatagram10headerFromEv>
   b73e6:	9905      	ldr	r1, [sp, #20]
   b73e8:	4602      	mov	r2, r0
   b73ea:	2302      	movs	r3, #2
   b73ec:	4628      	mov	r0, r5
   b73ee:	f000 fa07 	bl	b7800 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   b73f2:	3401      	adds	r4, #1
   b73f4:	e7ee      	b.n	b73d4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   b73f6:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   b73f8:	682b      	ldr	r3, [r5, #0]
   b73fa:	7872      	ldrb	r2, [r6, #1]
   b73fc:	68db      	ldr	r3, [r3, #12]
   b73fe:	491a      	ldr	r1, [pc, #104]	; (b7468 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   b7400:	4628      	mov	r0, r5
   b7402:	4798      	blx	r3
   b7404:	4604      	mov	r4, r0
   b7406:	b160      	cbz	r0, b7422 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b7408:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b740a:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   b740c:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   b740e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   b7412:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7416:	4911      	ldr	r1, [pc, #68]	; (b745c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   b7418:	9400      	str	r4, [sp, #0]
   b741a:	4628      	mov	r0, r5
   b741c:	f000 fa78 	bl	b7910 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7420:	e776      	b.n	b7310 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   b7422:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   b7426:	4543      	cmp	r3, r8
   b7428:	f67f af71 	bls.w	b730e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   b742c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   b7430:	2b00      	cmp	r3, #0
   b7432:	f43f af6c 	beq.w	b730e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   b7436:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   b743a:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b743c:	4907      	ldr	r1, [pc, #28]	; (b745c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   b743e:	443e      	add	r6, r7
		tmpMessageLen++;
   b7440:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   b7442:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7444:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b7448:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   b744a:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b744c:	9300      	str	r3, [sp, #0]
   b744e:	4628      	mov	r0, r5
   b7450:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   b7452:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   b7456:	f000 fa25 	bl	b78a4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   b745a:	e759      	b.n	b7310 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   b745c:	2003e408 	.word	0x2003e408
   b7460:	2003e409 	.word	0x2003e409
   b7464:	2003e40b 	.word	0x2003e40b
   b7468:	2003e40a 	.word	0x2003e40a

000b746c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b746c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7470:	b085      	sub	sp, #20
   b7472:	4680      	mov	r8, r0
   b7474:	461c      	mov	r4, r3
   b7476:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   b747a:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b747c:	4689      	mov	r9, r1
   b747e:	4692      	mov	sl, r2
   b7480:	f000 ffde 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   b7484:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   b7488:	4404      	add	r4, r0
   b748a:	f000 ffd9 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b748e:	1a20      	subs	r0, r4, r0
   b7490:	2800      	cmp	r0, #0
   b7492:	dd16      	ble.n	b74c2 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   b7494:	b281      	uxth	r1, r0
   b7496:	2200      	movs	r2, #0
   b7498:	4658      	mov	r0, fp
   b749a:	f7ff fc2c 	bl	b6cf6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b749e:	2800      	cmp	r0, #0
   b74a0:	d0f3      	beq.n	b748a <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   b74a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b74a4:	9300      	str	r3, [sp, #0]
   b74a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b74aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b74ac:	9501      	str	r5, [sp, #4]
   b74ae:	4652      	mov	r2, sl
   b74b0:	4649      	mov	r1, r9
   b74b2:	4640      	mov	r0, r8
   b74b4:	f7ff ff0a 	bl	b72cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b74b8:	2800      	cmp	r0, #0
   b74ba:	d0e6      	beq.n	b748a <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   b74bc:	b005      	add	sp, #20
   b74be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   b74c2:	2000      	movs	r0, #0
   b74c4:	e7fa      	b.n	b74bc <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000b74c8 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   b74c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b74ca:	b085      	sub	sp, #20
   b74cc:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b74ce:	3004      	adds	r0, #4
{
   b74d0:	460e      	mov	r6, r1
   b74d2:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b74d4:	f7ff fc54 	bl	b6d80 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   b74d8:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   b74da:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   b74dc:	4631      	mov	r1, r6
   b74de:	4628      	mov	r0, r5
   b74e0:	f000 f94a 	bl	b7778 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b74e4:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   b74e6:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   b74e8:	d001      	beq.n	b74ee <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   b74ea:	2805      	cmp	r0, #5
   b74ec:	d11b      	bne.n	b7526 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   b74ee:	7831      	ldrb	r1, [r6, #0]
   b74f0:	4628      	mov	r0, r5
   b74f2:	f000 f96e 	bl	b77d2 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   b74f6:	7872      	ldrb	r2, [r6, #1]
   b74f8:	7a2b      	ldrb	r3, [r5, #8]
   b74fa:	429a      	cmp	r2, r3
   b74fc:	d013      	beq.n	b7526 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   b74fe:	4c0b      	ldr	r4, [pc, #44]	; (b752c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   b7500:	2303      	movs	r3, #3
   b7502:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   b7504:	7833      	ldrb	r3, [r6, #0]
   b7506:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   b7508:	7871      	ldrb	r1, [r6, #1]
   b750a:	2302      	movs	r3, #2
   b750c:	463a      	mov	r2, r7
   b750e:	4628      	mov	r0, r5
   b7510:	f000 f976 	bl	b7800 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   b7514:	2300      	movs	r3, #0
   b7516:	9300      	str	r3, [sp, #0]
   b7518:	4621      	mov	r1, r4
   b751a:	7873      	ldrb	r3, [r6, #1]
   b751c:	2202      	movs	r2, #2
   b751e:	4628      	mov	r0, r5
   b7520:	f000 f9f6 	bl	b7910 <_ZN8RHRouter10sendtoWaitEPhhhh>
   b7524:	4604      	mov	r4, r0
}
   b7526:	4620      	mov	r0, r4
   b7528:	b005      	add	sp, #20
   b752a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b752c:	2003e408 	.word	0x2003e408

000b7530 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   b7530:	b510      	push	{r4, lr}
   b7532:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   b7534:	f7ff fbd4 	bl	b6ce0 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   b7538:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   b753a:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   b753c:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   b753e:	2303      	movs	r3, #3
    _retransmissions = 0;
   b7540:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   b7542:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   b7544:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   b7546:	f44f 7280 	mov.w	r2, #256	; 0x100
   b754a:	f104 0011 	add.w	r0, r4, #17
   b754e:	f004 fe31 	bl	bc1b4 <memset>
}
   b7552:	4620      	mov	r0, r4
   b7554:	bd10      	pop	{r4, pc}

000b7556 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   b7556:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7558:	4604      	mov	r4, r0
   b755a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   b755c:	f7ff fc04 	bl	b6d68 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   b7560:	4620      	mov	r0, r4
   b7562:	2200      	movs	r2, #0
   b7564:	2180      	movs	r1, #128	; 0x80
   b7566:	f7ff fc03 	bl	b6d70 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   b756a:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   b756c:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   b756e:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   b7572:	f10d 010f 	add.w	r1, sp, #15
   b7576:	2201      	movs	r2, #1
   b7578:	4620      	mov	r0, r4
   b757a:	f7ff fbc6 	bl	b6d0a <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   b757e:	4620      	mov	r0, r4
   b7580:	f7ff fbb5 	bl	b6cee <_ZN10RHDatagram14waitPacketSentEv>
}
   b7584:	b004      	add	sp, #16
   b7586:	bd10      	pop	{r4, pc}

000b7588 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   b7588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b758c:	7b05      	ldrb	r5, [r0, #12]
   b758e:	3501      	adds	r5, #1
   b7590:	b2ed      	uxtb	r5, r5
{
   b7592:	b087      	sub	sp, #28
   b7594:	4604      	mov	r4, r0
   b7596:	4689      	mov	r9, r1
   b7598:	4692      	mov	sl, r2
   b759a:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   b759c:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   b759e:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   b75a0:	7c22      	ldrb	r2, [r4, #16]
   b75a2:	463b      	mov	r3, r7
   b75a4:	429a      	cmp	r2, r3
   b75a6:	f107 0701 	add.w	r7, r7, #1
   b75aa:	b2ff      	uxtb	r7, r7
   b75ac:	d36b      	bcc.n	b7686 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   b75ae:	4629      	mov	r1, r5
   b75b0:	4620      	mov	r0, r4
   b75b2:	f7ff fbd9 	bl	b6d68 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   b75b6:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   b75b8:	bf0d      	iteet	eq
   b75ba:	22c0      	moveq	r2, #192	; 0xc0
   b75bc:	2280      	movne	r2, #128	; 0x80
   b75be:	2140      	movne	r1, #64	; 0x40
   b75c0:	2100      	moveq	r1, #0
   b75c2:	4620      	mov	r0, r4
   b75c4:	f7ff fbd4 	bl	b6d70 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   b75c8:	4643      	mov	r3, r8
   b75ca:	4652      	mov	r2, sl
   b75cc:	4649      	mov	r1, r9
   b75ce:	4620      	mov	r0, r4
   b75d0:	f7ff fb9b 	bl	b6d0a <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   b75d4:	4620      	mov	r0, r4
   b75d6:	f7ff fb8a 	bl	b6cee <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   b75da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b75de:	d054      	beq.n	b768a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   b75e0:	2f01      	cmp	r7, #1
	    _retransmissions++;
   b75e2:	bf82      	ittt	hi
   b75e4:	68a3      	ldrhi	r3, [r4, #8]
   b75e6:	3301      	addhi	r3, #1
   b75e8:	60a3      	strhi	r3, [r4, #8]
   b75ea:	f000 ff29 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   b75ee:	f44f 7180 	mov.w	r1, #256	; 0x100
   b75f2:	4683      	mov	fp, r0
   b75f4:	2000      	movs	r0, #0
   b75f6:	89e6      	ldrh	r6, [r4, #14]
   b75f8:	f003 f9cf 	bl	ba99a <_Z6randomii>
   b75fc:	4370      	muls	r0, r6
   b75fe:	bf48      	it	mi
   b7600:	30ff      	addmi	r0, #255	; 0xff
   b7602:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   b7606:	fa1b f686 	uxtah	r6, fp, r6
   b760a:	f000 ff19 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
   b760e:	1a30      	subs	r0, r6, r0
   b7610:	2800      	cmp	r0, #0
   b7612:	ddc5      	ble.n	b75a0 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   b7614:	b281      	uxth	r1, r0
   b7616:	2200      	movs	r2, #0
   b7618:	4620      	mov	r0, r4
   b761a:	f7ff fb6c 	bl	b6cf6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   b761e:	2800      	cmp	r0, #0
   b7620:	d0f3      	beq.n	b760a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   b7622:	f10d 0317 	add.w	r3, sp, #23
   b7626:	9302      	str	r3, [sp, #8]
   b7628:	f10d 0316 	add.w	r3, sp, #22
   b762c:	9301      	str	r3, [sp, #4]
   b762e:	2200      	movs	r2, #0
   b7630:	f10d 0315 	add.w	r3, sp, #21
   b7634:	9300      	str	r3, [sp, #0]
   b7636:	4611      	mov	r1, r2
   b7638:	ab05      	add	r3, sp, #20
   b763a:	4620      	mov	r0, r4
   b763c:	f7ff fbac 	bl	b6d98 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b7640:	2800      	cmp	r0, #0
   b7642:	d0e2      	beq.n	b760a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   b7644:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   b7648:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   b764c:	4542      	cmp	r2, r8
   b764e:	d10e      	bne.n	b766e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   b7650:	f894 c004 	ldrb.w	ip, [r4, #4]
   b7654:	f89d 1015 	ldrb.w	r1, [sp, #21]
   b7658:	458c      	cmp	ip, r1
   b765a:	d108      	bne.n	b766e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   b765c:	2b00      	cmp	r3, #0
   b765e:	da08      	bge.n	b7672 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   b7660:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7664:	42ab      	cmp	r3, r5
   b7666:	d1d0      	bne.n	b760a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   b7668:	b007      	add	sp, #28
   b766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   b766e:	2b00      	cmp	r3, #0
   b7670:	dbcb      	blt.n	b760a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   b7672:	18a1      	adds	r1, r4, r2
   b7674:	f89d 3016 	ldrb.w	r3, [sp, #22]
   b7678:	7c49      	ldrb	r1, [r1, #17]
   b767a:	4299      	cmp	r1, r3
   b767c:	d1c5      	bne.n	b760a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   b767e:	4620      	mov	r0, r4
   b7680:	f7ff ff69 	bl	b7556 <_ZN18RHReliableDatagram11acknowledgeEhh>
   b7684:	e7c1      	b.n	b760a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   b7686:	2000      	movs	r0, #0
   b7688:	e7ee      	b.n	b7668 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   b768a:	2001      	movs	r0, #1
   b768c:	e7ec      	b.n	b7668 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000b768e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   b768e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7692:	b089      	sub	sp, #36	; 0x24
   b7694:	e9cd 2104 	strd	r2, r1, [sp, #16]
   b7698:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   b769c:	9f12      	ldr	r7, [sp, #72]	; 0x48
   b769e:	4604      	mov	r4, r0
   b76a0:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b76a2:	f7ff fb20 	bl	b6ce6 <_ZN10RHDatagram9availableEv>
   b76a6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b76aa:	b920      	cbnz	r0, b76b6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   b76ac:	2500      	movs	r5, #0
}
   b76ae:	4628      	mov	r0, r5
   b76b0:	b009      	add	sp, #36	; 0x24
   b76b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   b76b6:	f10d 031f 	add.w	r3, sp, #31
   b76ba:	9302      	str	r3, [sp, #8]
   b76bc:	f10d 031e 	add.w	r3, sp, #30
   b76c0:	9301      	str	r3, [sp, #4]
   b76c2:	f10d 031d 	add.w	r3, sp, #29
   b76c6:	9300      	str	r3, [sp, #0]
   b76c8:	4620      	mov	r0, r4
   b76ca:	ab07      	add	r3, sp, #28
   b76cc:	f7ff fb64 	bl	b6d98 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   b76d0:	4605      	mov	r5, r0
   b76d2:	2800      	cmp	r0, #0
   b76d4:	d0ea      	beq.n	b76ac <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   b76d6:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   b76da:	2b00      	cmp	r3, #0
   b76dc:	dbe6      	blt.n	b76ac <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   b76de:	7922      	ldrb	r2, [r4, #4]
   b76e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b76e4:	429a      	cmp	r2, r3
   b76e6:	d106      	bne.n	b76f6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   b76e8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   b76ec:	f89d 101e 	ldrb.w	r1, [sp, #30]
   b76f0:	4620      	mov	r0, r4
   b76f2:	f7ff ff30 	bl	b7556 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   b76f6:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b76fa:	f89d 101c 	ldrb.w	r1, [sp, #28]
   b76fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b7702:	f012 0f40 	tst.w	r2, #64	; 0x40
   b7706:	440c      	add	r4, r1
   b7708:	d002      	beq.n	b7710 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   b770a:	7c60      	ldrb	r0, [r4, #17]
   b770c:	4298      	cmp	r0, r3
   b770e:	d0cd      	beq.n	b76ac <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   b7710:	b106      	cbz	r6, b7714 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   b7712:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   b7714:	f1b9 0f00 	cmp.w	r9, #0
   b7718:	d003      	beq.n	b7722 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   b771a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   b771e:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   b7722:	f1b8 0f00 	cmp.w	r8, #0
   b7726:	d001      	beq.n	b772c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   b7728:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   b772c:	b107      	cbz	r7, b7730 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   b772e:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   b7730:	7463      	strb	r3, [r4, #17]
		return true;
   b7732:	e7bc      	b.n	b76ae <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000b7734 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   b7734:	4770      	bx	lr

000b7736 <_ZN8RHRouter4initEv>:
{
   b7736:	b510      	push	{r4, lr}
   b7738:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   b773a:	3004      	adds	r0, #4
   b773c:	f7ff fb06 	bl	b6d4c <_ZN10RHDatagram4initEv>
    if (ret)
   b7740:	b110      	cbz	r0, b7748 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   b7742:	231e      	movs	r3, #30
   b7744:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   b7748:	bd10      	pop	{r4, pc}

000b774a <_ZN8RHRouter10getRouteToEh>:
{
   b774a:	b510      	push	{r4, lr}
   b774c:	4602      	mov	r2, r0
   b774e:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   b7750:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   b7754:	428c      	cmp	r4, r1
   b7756:	d108      	bne.n	b776a <_ZN8RHRouter10getRouteToEh+0x20>
   b7758:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   b775c:	b12c      	cbz	r4, b776a <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   b775e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b7762:	f503 738c 	add.w	r3, r3, #280	; 0x118
   b7766:	4418      	add	r0, r3
}
   b7768:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b776a:	3301      	adds	r3, #1
   b776c:	2b32      	cmp	r3, #50	; 0x32
   b776e:	f102 0203 	add.w	r2, r2, #3
   b7772:	d1ed      	bne.n	b7750 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   b7774:	2000      	movs	r0, #0
   b7776:	e7f7      	b.n	b7768 <_ZN8RHRouter10getRouteToEh+0x1e>

000b7778 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   b7778:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b777a:	780b      	ldrb	r3, [r1, #0]
   b777c:	2bff      	cmp	r3, #255	; 0xff
{
   b777e:	4605      	mov	r5, r0
   b7780:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   b7782:	d006      	beq.n	b7792 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   b7784:	4619      	mov	r1, r3
   b7786:	9201      	str	r2, [sp, #4]
   b7788:	f7ff ffdf 	bl	b774a <_ZN8RHRouter10getRouteToEh>
	if (!route)
   b778c:	b158      	cbz	r0, b77a6 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   b778e:	7843      	ldrb	r3, [r0, #1]
   b7790:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   b7792:	4621      	mov	r1, r4
   b7794:	1d28      	adds	r0, r5, #4
   b7796:	f7ff fef7 	bl	b7588 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   b779a:	2800      	cmp	r0, #0
   b779c:	bf14      	ite	ne
   b779e:	2000      	movne	r0, #0
   b77a0:	2005      	moveq	r0, #5
}
   b77a2:	b003      	add	sp, #12
   b77a4:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   b77a6:	2002      	movs	r0, #2
   b77a8:	e7fb      	b.n	b77a2 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000b77aa <_ZN8RHRouter11deleteRouteEh>:
{
   b77aa:	b510      	push	{r4, lr}
   b77ac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   b77b0:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   b77b2:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   b77b6:	f503 708c 	add.w	r0, r3, #280	; 0x118
   b77ba:	f203 111b 	addw	r1, r3, #283	; 0x11b
   b77be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b77c2:	4421      	add	r1, r4
   b77c4:	4420      	add	r0, r4
   b77c6:	f004 fccd 	bl	bc164 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   b77ca:	2300      	movs	r3, #0
   b77cc:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   b77d0:	bd10      	pop	{r4, pc}

000b77d2 <_ZN8RHRouter13deleteRouteToEh>:
{
   b77d2:	b538      	push	{r3, r4, r5, lr}
   b77d4:	460a      	mov	r2, r1
   b77d6:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b77d8:	f500 748c 	add.w	r4, r0, #280	; 0x118
   b77dc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   b77e0:	b2d9      	uxtb	r1, r3
   b77e2:	5d65      	ldrb	r5, [r4, r5]
   b77e4:	4295      	cmp	r5, r2
   b77e6:	d103      	bne.n	b77f0 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   b77e8:	f7ff ffdf 	bl	b77aa <_ZN8RHRouter11deleteRouteEh>
	    return true;
   b77ec:	2001      	movs	r0, #1
}
   b77ee:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b77f0:	3301      	adds	r3, #1
   b77f2:	2b32      	cmp	r3, #50	; 0x32
   b77f4:	d1f2      	bne.n	b77dc <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   b77f6:	2000      	movs	r0, #0
   b77f8:	e7f9      	b.n	b77ee <_ZN8RHRouter13deleteRouteToEh+0x1c>

000b77fa <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   b77fa:	2100      	movs	r1, #0
   b77fc:	f7ff bfd5 	b.w	b77aa <_ZN8RHRouter11deleteRouteEh>

000b7800 <_ZN8RHRouter10addRouteToEhhh>:
{
   b7800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7802:	4616      	mov	r6, r2
   b7804:	461f      	mov	r7, r3
   b7806:	4604      	mov	r4, r0
   b7808:	460d      	mov	r5, r1
   b780a:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   b780c:	f500 728c 	add.w	r2, r0, #280	; 0x118
   b7810:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7814:	5c11      	ldrb	r1, [r2, r0]
   b7816:	42a9      	cmp	r1, r5
   b7818:	d105      	bne.n	b7826 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   b781a:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   b781c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7820:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   b7824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7826:	3301      	adds	r3, #1
   b7828:	2b32      	cmp	r3, #50	; 0x32
   b782a:	d1f1      	bne.n	b7810 <_ZN8RHRouter10addRouteToEhhh+0x10>
   b782c:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   b782e:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   b7832:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b7836:	5c11      	ldrb	r1, [r2, r0]
   b7838:	b919      	cbnz	r1, b7842 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   b783a:	4420      	add	r0, r4
   b783c:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   b7840:	e7ec      	b.n	b781c <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7842:	3301      	adds	r3, #1
   b7844:	2b32      	cmp	r3, #50	; 0x32
   b7846:	d1f4      	bne.n	b7832 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   b7848:	4620      	mov	r0, r4
   b784a:	f7ff ffd6 	bl	b77fa <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b784e:	4620      	mov	r0, r4
   b7850:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   b7854:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   b7858:	b92a      	cbnz	r2, b7866 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   b785a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   b785e:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   b7862:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7866:	3003      	adds	r0, #3
   b7868:	4298      	cmp	r0, r3
   b786a:	d1f3      	bne.n	b7854 <_ZN8RHRouter10addRouteToEhhh+0x54>
   b786c:	e7da      	b.n	b7824 <_ZN8RHRouter10addRouteToEhhh+0x24>

000b786e <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b786e:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   b7872:	2200      	movs	r2, #0
   b7874:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   b7878:	3003      	adds	r0, #3
   b787a:	4298      	cmp	r0, r3
   b787c:	d1fa      	bne.n	b7874 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   b787e:	4770      	bx	lr

000b7880 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   b7880:	b510      	push	{r4, lr}
   b7882:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   b7884:	3004      	adds	r0, #4
   b7886:	f7ff fe53 	bl	b7530 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   b788a:	4b05      	ldr	r3, [pc, #20]	; (b78a0 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   b788c:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b788e:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   b7892:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   b7894:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   b7898:	f7ff ffe9 	bl	b786e <_ZN8RHRouter17clearRoutingTableEv>
}
   b789c:	4620      	mov	r0, r4
   b789e:	bd10      	pop	{r4, pc}
   b78a0:	000bd1ac 	.word	0x000bd1ac

000b78a4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   b78a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b78a8:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b78aa:	6840      	ldr	r0, [r0, #4]
{
   b78ac:	9101      	str	r1, [sp, #4]
   b78ae:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b78b0:	6803      	ldr	r3, [r0, #0]
{
   b78b2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b78b6:	699b      	ldr	r3, [r3, #24]
{
   b78b8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   b78bc:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   b78be:	4798      	blx	r3
   b78c0:	f106 0805 	add.w	r8, r6, #5
   b78c4:	4580      	cmp	r8, r0
   b78c6:	d81c      	bhi.n	b7902 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   b78c8:	4d10      	ldr	r5, [pc, #64]	; (b790c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   b78ca:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   b78cc:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   b78d0:	2300      	movs	r3, #0
   b78d2:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   b78d4:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   b78d8:	70eb      	strb	r3, [r5, #3]
   b78da:	1c5a      	adds	r2, r3, #1
   b78dc:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   b78e0:	1d68      	adds	r0, r5, #5
   b78e2:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   b78e4:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   b78e6:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   b78ea:	f004 fc3b 	bl	bc164 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b78ee:	6823      	ldr	r3, [r4, #0]
   b78f0:	685b      	ldr	r3, [r3, #4]
   b78f2:	fa5f f288 	uxtb.w	r2, r8
   b78f6:	4629      	mov	r1, r5
   b78f8:	4620      	mov	r0, r4
}
   b78fa:	b002      	add	sp, #8
   b78fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   b7900:	4718      	bx	r3
}
   b7902:	2001      	movs	r0, #1
   b7904:	b002      	add	sp, #8
   b7906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b790a:	bf00      	nop
   b790c:	2003e502 	.word	0x2003e502

000b7910 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   b7910:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   b7912:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b7916:	9401      	str	r4, [sp, #4]
   b7918:	7a04      	ldrb	r4, [r0, #8]
   b791a:	9400      	str	r4, [sp, #0]
   b791c:	f7ff ffc2 	bl	b78a4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   b7920:	b002      	add	sp, #8
   b7922:	bd10      	pop	{r4, pc}

000b7924 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   b7924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7928:	b087      	sub	sp, #28
   b792a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   b792c:	23ff      	movs	r3, #255	; 0xff
   b792e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b7932:	f10d 0317 	add.w	r3, sp, #23
   b7936:	9302      	str	r3, [sp, #8]
   b7938:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b7a0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   b793c:	f10d 0316 	add.w	r3, sp, #22
   b7940:	9301      	str	r3, [sp, #4]
   b7942:	f10d 0315 	add.w	r3, sp, #21
   b7946:	9300      	str	r3, [sp, #0]
{  
   b7948:	4604      	mov	r4, r0
   b794a:	4688      	mov	r8, r1
   b794c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b794e:	ab05      	add	r3, sp, #20
   b7950:	f10d 0213 	add.w	r2, sp, #19
   b7954:	4649      	mov	r1, r9
   b7956:	3004      	adds	r0, #4
{  
   b7958:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   b795c:	f7ff fe97 	bl	b768e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   b7960:	4605      	mov	r5, r0
   b7962:	b908      	cbnz	r0, b7968 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   b7964:	2500      	movs	r5, #0
   b7966:	e038      	b.n	b79da <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   b7968:	6823      	ldr	r3, [r4, #0]
   b796a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b796e:	681b      	ldr	r3, [r3, #0]
   b7970:	4649      	mov	r1, r9
   b7972:	4620      	mov	r0, r4
   b7974:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   b7976:	f899 3000 	ldrb.w	r3, [r9]
   b797a:	7a22      	ldrb	r2, [r4, #8]
   b797c:	429a      	cmp	r2, r3
   b797e:	d001      	beq.n	b7984 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   b7980:	2bff      	cmp	r3, #255	; 0xff
   b7982:	d12e      	bne.n	b79e2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   b7984:	b117      	cbz	r7, b798c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   b7986:	4b21      	ldr	r3, [pc, #132]	; (b7a0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7988:	785b      	ldrb	r3, [r3, #1]
   b798a:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   b798c:	f1bb 0f00 	cmp.w	fp, #0
   b7990:	d003      	beq.n	b799a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   b7992:	4b1e      	ldr	r3, [pc, #120]	; (b7a0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b7994:	781b      	ldrb	r3, [r3, #0]
   b7996:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   b799a:	f1ba 0f00 	cmp.w	sl, #0
   b799e:	d003      	beq.n	b79a8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   b79a0:	4b1a      	ldr	r3, [pc, #104]	; (b7a0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b79a2:	78db      	ldrb	r3, [r3, #3]
   b79a4:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   b79a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b79aa:	b11b      	cbz	r3, b79b4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   b79ac:	4b17      	ldr	r3, [pc, #92]	; (b7a0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b79ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b79b0:	791b      	ldrb	r3, [r3, #4]
   b79b2:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   b79b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b79b6:	b11b      	cbz	r3, b79c0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   b79b8:	4b14      	ldr	r3, [pc, #80]	; (b7a0c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   b79ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b79bc:	789b      	ldrb	r3, [r3, #2]
   b79be:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b79c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   b79c4:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b79c6:	4912      	ldr	r1, [pc, #72]	; (b7a10 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   b79c8:	3b05      	subs	r3, #5
   b79ca:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   b79cc:	429a      	cmp	r2, r3
		*len = msgLen;
   b79ce:	bf88      	it	hi
   b79d0:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   b79d2:	7832      	ldrb	r2, [r6, #0]
   b79d4:	4640      	mov	r0, r8
   b79d6:	f004 fbc5 	bl	bc164 <memcpy>
}
   b79da:	4628      	mov	r0, r5
   b79dc:	b007      	add	sp, #28
   b79de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   b79e2:	f899 3002 	ldrb.w	r3, [r9, #2]
   b79e6:	1c5a      	adds	r2, r3, #1
   b79e8:	f889 2002 	strb.w	r2, [r9, #2]
   b79ec:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   b79f0:	429a      	cmp	r2, r3
   b79f2:	d9b7      	bls.n	b7964 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   b79f4:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   b79f8:	2b00      	cmp	r3, #0
   b79fa:	d0b3      	beq.n	b7964 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   b79fc:	6823      	ldr	r3, [r4, #0]
   b79fe:	f89d 2013 	ldrb.w	r2, [sp, #19]
   b7a02:	685b      	ldr	r3, [r3, #4]
   b7a04:	4649      	mov	r1, r9
   b7a06:	4620      	mov	r0, r4
   b7a08:	4798      	blx	r3
   b7a0a:	e7ab      	b.n	b7964 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   b7a0c:	2003e502 	.word	0x2003e502
   b7a10:	2003e507 	.word	0x2003e507

000b7a14 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   b7a14:	b510      	push	{r4, lr}
   b7a16:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   b7a18:	6a00      	ldr	r0, [r0, #32]
   b7a1a:	6803      	ldr	r3, [r0, #0]
   b7a1c:	68db      	ldr	r3, [r3, #12]
   b7a1e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   b7a20:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   b7a24:	28ff      	cmp	r0, #255	; 0xff
   b7a26:	d002      	beq.n	b7a2e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   b7a28:	2101      	movs	r1, #1
   b7a2a:	f003 fd83 	bl	bb534 <pinMode>

    deselectSlave();
   b7a2e:	6823      	ldr	r3, [r4, #0]
   b7a30:	4620      	mov	r0, r4
   b7a32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7a34:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   b7a36:	2064      	movs	r0, #100	; 0x64
   b7a38:	f001 f866 	bl	b8b08 <delay>
#endif
    
    return true;
}
   b7a3c:	2001      	movs	r0, #1
   b7a3e:	bd10      	pop	{r4, pc}

000b7a40 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   b7a40:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7a44:	2100      	movs	r1, #0
   b7a46:	f003 bd86 	b.w	bb556 <digitalWrite>

000b7a4a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   b7a4a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   b7a4e:	2101      	movs	r1, #1
   b7a50:	f003 bd81 	b.w	bb556 <digitalWrite>

000b7a54 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   b7a54:	b570      	push	{r4, r5, r6, lr}
   b7a56:	4604      	mov	r4, r0
   b7a58:	460d      	mov	r5, r1
   b7a5a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   b7a5c:	f7ff fa50 	bl	b6f00 <_ZN15RHGenericDriverC1Ev>
   b7a60:	4b03      	ldr	r3, [pc, #12]	; (b7a70 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   b7a62:	6023      	str	r3, [r4, #0]
   b7a64:	6226      	str	r6, [r4, #32]
   b7a66:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   b7a6a:	4620      	mov	r0, r4
   b7a6c:	bd70      	pop	{r4, r5, r6, pc}
   b7a6e:	bf00      	nop
   b7a70:	000bd1bc 	.word	0x000bd1bc

000b7a74 <_ZN11RHSPIDriver7spiReadEh>:
{
   b7a74:	b538      	push	{r3, r4, r5, lr}
   b7a76:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7a78:	6a00      	ldr	r0, [r0, #32]
   b7a7a:	6803      	ldr	r3, [r0, #0]
   b7a7c:	6a1b      	ldr	r3, [r3, #32]
{
   b7a7e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7a80:	4798      	blx	r3
    selectSlave();
   b7a82:	6823      	ldr	r3, [r4, #0]
   b7a84:	4620      	mov	r0, r4
   b7a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7a88:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   b7a8a:	6a20      	ldr	r0, [r4, #32]
   b7a8c:	6803      	ldr	r3, [r0, #0]
   b7a8e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   b7a92:	681b      	ldr	r3, [r3, #0]
   b7a94:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7a96:	6a20      	ldr	r0, [r4, #32]
   b7a98:	6803      	ldr	r3, [r0, #0]
   b7a9a:	2100      	movs	r1, #0
   b7a9c:	681b      	ldr	r3, [r3, #0]
   b7a9e:	4798      	blx	r3
    deselectSlave();
   b7aa0:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   b7aa2:	4605      	mov	r5, r0
    deselectSlave();
   b7aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7aa6:	4620      	mov	r0, r4
   b7aa8:	4798      	blx	r3
    _spi.endTransaction();
   b7aaa:	6a20      	ldr	r0, [r4, #32]
   b7aac:	6803      	ldr	r3, [r0, #0]
   b7aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7ab0:	4798      	blx	r3
}
   b7ab2:	4628      	mov	r0, r5
   b7ab4:	bd38      	pop	{r3, r4, r5, pc}

000b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   b7ab6:	b570      	push	{r4, r5, r6, lr}
   b7ab8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7aba:	6a00      	ldr	r0, [r0, #32]
   b7abc:	6803      	ldr	r3, [r0, #0]
   b7abe:	6a1b      	ldr	r3, [r3, #32]
{
   b7ac0:	4616      	mov	r6, r2
   b7ac2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   b7ac4:	4798      	blx	r3
    selectSlave();
   b7ac6:	6823      	ldr	r3, [r4, #0]
   b7ac8:	4620      	mov	r0, r4
   b7aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7acc:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   b7ace:	6a20      	ldr	r0, [r4, #32]
   b7ad0:	6803      	ldr	r3, [r0, #0]
   b7ad2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b7ad6:	681b      	ldr	r3, [r3, #0]
   b7ad8:	4798      	blx	r3
   b7ada:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   b7adc:	6a20      	ldr	r0, [r4, #32]
   b7ade:	6803      	ldr	r3, [r0, #0]
   b7ae0:	4631      	mov	r1, r6
   b7ae2:	681b      	ldr	r3, [r3, #0]
   b7ae4:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b7ae6:	2001      	movs	r0, #1
   b7ae8:	f000 fca2 	bl	b8430 <HAL_Delay_Microseconds>
    deselectSlave();
   b7aec:	6823      	ldr	r3, [r4, #0]
   b7aee:	4620      	mov	r0, r4
   b7af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7af2:	4798      	blx	r3
    _spi.endTransaction();
   b7af4:	6a20      	ldr	r0, [r4, #32]
   b7af6:	6803      	ldr	r3, [r0, #0]
   b7af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7afa:	4798      	blx	r3
}
   b7afc:	4628      	mov	r0, r5
   b7afe:	bd70      	pop	{r4, r5, r6, pc}

000b7b00 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   b7b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b02:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7b04:	6a00      	ldr	r0, [r0, #32]
{
   b7b06:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7b08:	6803      	ldr	r3, [r0, #0]
   b7b0a:	6a1b      	ldr	r3, [r3, #32]
{
   b7b0c:	460f      	mov	r7, r1
   b7b0e:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7b10:	4798      	blx	r3
    selectSlave();
   b7b12:	6823      	ldr	r3, [r4, #0]
   b7b14:	4620      	mov	r0, r4
   b7b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7b18:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   b7b1a:	6a20      	ldr	r0, [r4, #32]
   b7b1c:	6803      	ldr	r3, [r0, #0]
   b7b1e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   b7b22:	681b      	ldr	r3, [r3, #0]
   b7b24:	4798      	blx	r3
   b7b26:	442e      	add	r6, r5
   b7b28:	4607      	mov	r7, r0
    while (len--)
   b7b2a:	42b5      	cmp	r5, r6
   b7b2c:	d007      	beq.n	b7b3e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   b7b2e:	6a20      	ldr	r0, [r4, #32]
   b7b30:	6803      	ldr	r3, [r0, #0]
   b7b32:	2100      	movs	r1, #0
   b7b34:	681b      	ldr	r3, [r3, #0]
   b7b36:	4798      	blx	r3
   b7b38:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   b7b3c:	e7f5      	b.n	b7b2a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   b7b3e:	6823      	ldr	r3, [r4, #0]
   b7b40:	4620      	mov	r0, r4
   b7b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7b44:	4798      	blx	r3
    _spi.endTransaction();
   b7b46:	6a20      	ldr	r0, [r4, #32]
   b7b48:	6803      	ldr	r3, [r0, #0]
   b7b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b4c:	4798      	blx	r3
}
   b7b4e:	4638      	mov	r0, r7
   b7b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b52 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   b7b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b54:	4604      	mov	r4, r0
    _spi.beginTransaction();
   b7b56:	6a00      	ldr	r0, [r0, #32]
{
   b7b58:	461e      	mov	r6, r3
    _spi.beginTransaction();
   b7b5a:	6803      	ldr	r3, [r0, #0]
   b7b5c:	6a1b      	ldr	r3, [r3, #32]
{
   b7b5e:	460f      	mov	r7, r1
   b7b60:	4615      	mov	r5, r2
    _spi.beginTransaction();
   b7b62:	4798      	blx	r3
    selectSlave();
   b7b64:	6823      	ldr	r3, [r4, #0]
   b7b66:	4620      	mov	r0, r4
   b7b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b7b6a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   b7b6c:	6a20      	ldr	r0, [r4, #32]
   b7b6e:	6803      	ldr	r3, [r0, #0]
   b7b70:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b7b74:	681b      	ldr	r3, [r3, #0]
   b7b76:	4798      	blx	r3
   b7b78:	442e      	add	r6, r5
   b7b7a:	4607      	mov	r7, r0
    while (len--)
   b7b7c:	42b5      	cmp	r5, r6
   b7b7e:	d006      	beq.n	b7b8e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   b7b80:	6a20      	ldr	r0, [r4, #32]
   b7b82:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7b86:	6803      	ldr	r3, [r0, #0]
   b7b88:	681b      	ldr	r3, [r3, #0]
   b7b8a:	4798      	blx	r3
    while (len--)
   b7b8c:	e7f6      	b.n	b7b7c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   b7b8e:	6823      	ldr	r3, [r4, #0]
   b7b90:	4620      	mov	r0, r4
   b7b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b7b94:	4798      	blx	r3
    _spi.endTransaction();
   b7b96:	6a20      	ldr	r0, [r4, #32]
   b7b98:	6803      	ldr	r3, [r0, #0]
   b7b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7b9c:	4798      	blx	r3
}
   b7b9e:	4638      	mov	r0, r7
   b7ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ba2 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   b7ba2:	6a00      	ldr	r0, [r0, #32]
   b7ba4:	6803      	ldr	r3, [r0, #0]
   b7ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7ba8:	4718      	bx	r3

000b7baa <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   b7baa:	2001      	movs	r0, #1
   b7bac:	4770      	bx	lr

000b7bae <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   b7bae:	20fb      	movs	r0, #251	; 0xfb
   b7bb0:	4770      	bx	lr

000b7bb2 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   b7bb2:	4770      	bx	lr

000b7bb4 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   b7bb4:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   b7bb6:	7903      	ldrb	r3, [r0, #4]
   b7bb8:	2b05      	cmp	r3, #5
{
   b7bba:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   b7bbc:	d010      	beq.n	b7be0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   b7bbe:	6803      	ldr	r3, [r0, #0]
   b7bc0:	2105      	movs	r1, #5
   b7bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7bc6:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   b7bc8:	2207      	movs	r2, #7
   b7bca:	2101      	movs	r1, #1
   b7bcc:	4620      	mov	r0, r4
   b7bce:	f7ff ff72 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   b7bd2:	2280      	movs	r2, #128	; 0x80
   b7bd4:	2140      	movs	r1, #64	; 0x40
   b7bd6:	4620      	mov	r0, r4
   b7bd8:	f7ff ff6d 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   b7bdc:	2305      	movs	r3, #5
   b7bde:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   b7be0:	7923      	ldrb	r3, [r4, #4]
   b7be2:	2b05      	cmp	r3, #5
   b7be4:	d0fc      	beq.n	b7be0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   b7be6:	7e20      	ldrb	r0, [r4, #24]
}
   b7be8:	bd10      	pop	{r4, pc}

000b7bea <_ZN7RH_RF95D0Ev>:
   b7bea:	b510      	push	{r4, lr}
   b7bec:	f44f 7198 	mov.w	r1, #304	; 0x130
   b7bf0:	4604      	mov	r4, r0
   b7bf2:	f7fc fa54 	bl	b409e <_ZdlPvj>
   b7bf6:	4620      	mov	r0, r4
   b7bf8:	bd10      	pop	{r4, pc}

000b7bfa <_ZN7RH_RF955sleepEv>:
{
   b7bfa:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   b7bfc:	7903      	ldrb	r3, [r0, #4]
   b7bfe:	2b01      	cmp	r3, #1
{
   b7c00:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   b7c02:	d00b      	beq.n	b7c1c <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   b7c04:	6803      	ldr	r3, [r0, #0]
   b7c06:	2101      	movs	r1, #1
   b7c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7c0c:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   b7c0e:	2200      	movs	r2, #0
   b7c10:	2101      	movs	r1, #1
   b7c12:	4620      	mov	r0, r4
   b7c14:	f7ff ff4f 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   b7c18:	2301      	movs	r3, #1
   b7c1a:	7123      	strb	r3, [r4, #4]
}
   b7c1c:	2001      	movs	r0, #1
   b7c1e:	bd10      	pop	{r4, pc}

000b7c20 <_ZN7RH_RF954recvEPhS0_>:
{
   b7c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   b7c22:	6803      	ldr	r3, [r0, #0]
   b7c24:	68db      	ldr	r3, [r3, #12]
{
   b7c26:	4604      	mov	r4, r0
   b7c28:	460f      	mov	r7, r1
   b7c2a:	4615      	mov	r5, r2
    if (!available())
   b7c2c:	4798      	blx	r3
   b7c2e:	4606      	mov	r6, r0
   b7c30:	b1b0      	cbz	r0, b7c60 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   b7c32:	b187      	cbz	r7, b7c56 <_ZN7RH_RF954recvEPhS0_+0x36>
   b7c34:	b17d      	cbz	r5, b7c56 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   b7c36:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b7c3a:	782a      	ldrb	r2, [r5, #0]
   b7c3c:	3b03      	subs	r3, #3
   b7c3e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   b7c40:	bfde      	ittt	le
   b7c42:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   b7c46:	3b04      	suble	r3, #4
   b7c48:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   b7c4a:	782a      	ldrb	r2, [r5, #0]
   b7c4c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   b7c50:	4638      	mov	r0, r7
   b7c52:	f004 fa87 	bl	bc164 <memcpy>
    _rxBufValid = false;
   b7c56:	2300      	movs	r3, #0
   b7c58:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7c5c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   b7c60:	4630      	mov	r0, r6
   b7c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7c64 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   b7c64:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   b7c66:	b538      	push	{r3, r4, r5, lr}
   b7c68:	4605      	mov	r5, r0
   b7c6a:	460c      	mov	r4, r1
	if (power > 20)
   b7c6c:	dc14      	bgt.n	b7c98 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   b7c6e:	2901      	cmp	r1, #1
   b7c70:	dd14      	ble.n	b7c9c <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   b7c72:	2911      	cmp	r1, #17
   b7c74:	dd13      	ble.n	b7c9e <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   b7c76:	2207      	movs	r2, #7
   b7c78:	214d      	movs	r1, #77	; 0x4d
   b7c7a:	4628      	mov	r0, r5
   b7c7c:	f7ff ff1b 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   b7c80:	3c03      	subs	r4, #3
   b7c82:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7c84:	1ea2      	subs	r2, r4, #2
   b7c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
   b7c8a:	4628      	mov	r0, r5
   b7c8c:	b2d2      	uxtb	r2, r2
}
   b7c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   b7c92:	2109      	movs	r1, #9
   b7c94:	f7ff bf0f 	b.w	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   b7c98:	2414      	movs	r4, #20
   b7c9a:	e7ec      	b.n	b7c76 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   b7c9c:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b7c9e:	2204      	movs	r2, #4
   b7ca0:	214d      	movs	r1, #77	; 0x4d
   b7ca2:	4628      	mov	r0, r5
   b7ca4:	f7ff ff07 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
   b7ca8:	e7ec      	b.n	b7c84 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000b7cac <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   b7cac:	b538      	push	{r3, r4, r5, lr}
   b7cae:	4604      	mov	r4, r0
   b7cb0:	4615      	mov	r5, r2
    _rxBufValid(0)
   b7cb2:	461a      	mov	r2, r3
   b7cb4:	f7ff fece 	bl	b7a54 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   b7cb8:	4b09      	ldr	r3, [pc, #36]	; (b7ce0 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   b7cba:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   b7cbc:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   b7cbe:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   b7cc0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   b7cc4:	2201      	movs	r2, #1
    _rxBufValid(0)
   b7cc6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   b7cca:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   b7cce:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   b7cd2:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   b7cd6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   b7cda:	4620      	mov	r0, r4
   b7cdc:	bd38      	pop	{r3, r4, r5, pc}
   b7cde:	bf00      	nop
   b7ce0:	000bd254 	.word	0x000bd254

000b7ce4 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   b7ce4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   b7ce8:	2b03      	cmp	r3, #3
   b7cea:	d91b      	bls.n	b7d24 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   b7cec:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   b7cf0:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   b7cf2:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   b7cf6:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   b7cf8:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   b7cfc:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   b7cfe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   b7d02:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   b7d04:	7983      	ldrb	r3, [r0, #6]
   b7d06:	b933      	cbnz	r3, b7d16 <_ZN7RH_RF9513validateRxBufEv+0x32>
   b7d08:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   b7d0a:	7942      	ldrb	r2, [r0, #5]
   b7d0c:	429a      	cmp	r2, r3
   b7d0e:	d002      	beq.n	b7d16 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   b7d10:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   b7d12:	2bff      	cmp	r3, #255	; 0xff
   b7d14:	d106      	bne.n	b7d24 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   b7d16:	8a83      	ldrh	r3, [r0, #20]
   b7d18:	3301      	adds	r3, #1
   b7d1a:	b29b      	uxth	r3, r3
   b7d1c:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   b7d1e:	2301      	movs	r3, #1
   b7d20:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   b7d24:	4770      	bx	lr
	...

000b7d28 <_ZN7RH_RF9512setFrequencyEf>:
{
   b7d28:	b538      	push	{r3, r4, r5, lr}
   b7d2a:	4604      	mov	r4, r0
   b7d2c:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7d30:	ee10 0a10 	vmov	r0, s0
{
   b7d34:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7d38:	f003 fe72 	bl	bba20 <__aeabi_f2d>
   b7d3c:	a317      	add	r3, pc, #92	; (adr r3, b7d9c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   b7d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d42:	f003 fec5 	bl	bbad0 <__aeabi_dmul>
   b7d46:	a317      	add	r3, pc, #92	; (adr r3, b7da4 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   b7d48:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d4c:	f003 ffea 	bl	bbd24 <__aeabi_ddiv>
   b7d50:	f004 f996 	bl	bc080 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7d54:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   b7d56:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   b7d58:	f3c0 4207 	ubfx	r2, r0, #16, #8
   b7d5c:	4620      	mov	r0, r4
   b7d5e:	f7ff feaa 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   b7d62:	f3c5 2207 	ubfx	r2, r5, #8, #8
   b7d66:	2107      	movs	r1, #7
   b7d68:	4620      	mov	r0, r4
   b7d6a:	f7ff fea4 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   b7d6e:	b2ea      	uxtb	r2, r5
   b7d70:	2108      	movs	r1, #8
   b7d72:	4620      	mov	r0, r4
   b7d74:	f7ff fe9f 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   b7d78:	eddf 7a07 	vldr	s15, [pc, #28]	; b7d98 <_ZN7RH_RF9512setFrequencyEf+0x70>
   b7d7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   b7d80:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   b7d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7d88:	bfac      	ite	ge
   b7d8a:	2301      	movge	r3, #1
   b7d8c:	2300      	movlt	r3, #0
}
   b7d8e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   b7d90:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   b7d94:	bd38      	pop	{r3, r4, r5, pc}
   b7d96:	bf00      	nop
   b7d98:	4442c000 	.word	0x4442c000
   b7d9c:	00000000 	.word	0x00000000
   b7da0:	412e8480 	.word	0x412e8480
   b7da4:	00000000 	.word	0x00000000
   b7da8:	404e8480 	.word	0x404e8480

000b7dac <_ZN7RH_RF9511setModeIdleEv>:
{
   b7dac:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   b7dae:	7903      	ldrb	r3, [r0, #4]
   b7db0:	2b02      	cmp	r3, #2
{
   b7db2:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   b7db4:	d00b      	beq.n	b7dce <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   b7db6:	6803      	ldr	r3, [r0, #0]
   b7db8:	2102      	movs	r1, #2
   b7dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7dbe:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   b7dc0:	2201      	movs	r2, #1
   b7dc2:	4611      	mov	r1, r2
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	f7ff fe76 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   b7dca:	2302      	movs	r3, #2
   b7dcc:	7123      	strb	r3, [r4, #4]
}
   b7dce:	bd10      	pop	{r4, pc}

000b7dd0 <_ZN7RH_RF9515handleInterruptEv>:
{
   b7dd0:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7dd2:	2112      	movs	r1, #18
{
   b7dd4:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7dd6:	f7ff fe4d 	bl	b7a74 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7dda:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   b7ddc:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7dde:	4620      	mov	r0, r4
   b7de0:	f7ff fe48 	bl	b7a74 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7de4:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   b7de6:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7de8:	2112      	movs	r1, #18
   b7dea:	4620      	mov	r0, r4
   b7dec:	f7ff fe63 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   b7df0:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   b7df2:	2b04      	cmp	r3, #4
   b7df4:	d107      	bne.n	b7e06 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7df6:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   b7dfa:	d117      	bne.n	b7e2c <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   b7dfc:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   b7e00:	b10b      	cbz	r3, b7e06 <_ZN7RH_RF9515handleInterruptEv+0x36>
   b7e02:	0670      	lsls	r0, r6, #25
   b7e04:	d512      	bpl.n	b7e2c <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   b7e06:	7923      	ldrb	r3, [r4, #4]
   b7e08:	2b04      	cmp	r3, #4
   b7e0a:	d101      	bne.n	b7e10 <_ZN7RH_RF9515handleInterruptEv+0x40>
   b7e0c:	0669      	lsls	r1, r5, #25
   b7e0e:	d422      	bmi.n	b7e56 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   b7e10:	7923      	ldrb	r3, [r4, #4]
   b7e12:	2b03      	cmp	r3, #3
   b7e14:	d101      	bne.n	b7e1a <_ZN7RH_RF9515handleInterruptEv+0x4a>
   b7e16:	072a      	lsls	r2, r5, #28
   b7e18:	d468      	bmi.n	b7eec <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   b7e1a:	7923      	ldrb	r3, [r4, #4]
   b7e1c:	2b05      	cmp	r3, #5
   b7e1e:	d10e      	bne.n	b7e3e <_ZN7RH_RF9515handleInterruptEv+0x6e>
   b7e20:	076b      	lsls	r3, r5, #29
   b7e22:	d50c      	bpl.n	b7e3e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   b7e24:	f005 0501 	and.w	r5, r5, #1
   b7e28:	7625      	strb	r5, [r4, #24]
   b7e2a:	e063      	b.n	b7ef4 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   b7e2c:	8a63      	ldrh	r3, [r4, #18]
   b7e2e:	3301      	adds	r3, #1
   b7e30:	b29b      	uxth	r3, r3
   b7e32:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   b7e34:	2300      	movs	r3, #0
   b7e36:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   b7e3a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7e3e:	22ff      	movs	r2, #255	; 0xff
   b7e40:	2112      	movs	r1, #18
   b7e42:	4620      	mov	r0, r4
   b7e44:	f7ff fe37 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7e48:	4620      	mov	r0, r4
   b7e4a:	22ff      	movs	r2, #255	; 0xff
}
   b7e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   b7e50:	2112      	movs	r1, #18
   b7e52:	f7ff be30 	b.w	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7e56:	2113      	movs	r1, #19
   b7e58:	4620      	mov	r0, r4
   b7e5a:	f7ff fe0b 	bl	b7a74 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7e5e:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   b7e60:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   b7e62:	4620      	mov	r0, r4
   b7e64:	f7ff fe06 	bl	b7a74 <_ZN11RHSPIDriver7spiReadEh>
   b7e68:	210d      	movs	r1, #13
   b7e6a:	4602      	mov	r2, r0
   b7e6c:	4620      	mov	r0, r4
   b7e6e:	f7ff fe22 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   b7e72:	f104 0229 	add.w	r2, r4, #41	; 0x29
   b7e76:	462b      	mov	r3, r5
   b7e78:	2100      	movs	r1, #0
   b7e7a:	4620      	mov	r0, r4
   b7e7c:	f7ff fe40 	bl	b7b00 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7e80:	2119      	movs	r1, #25
	_bufLen = len;
   b7e82:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   b7e86:	4620      	mov	r0, r4
   b7e88:	f7ff fdf4 	bl	b7a74 <_ZN11RHSPIDriver7spiReadEh>
   b7e8c:	b240      	sxtb	r0, r0
   b7e8e:	2800      	cmp	r0, #0
   b7e90:	bfb8      	it	lt
   b7e92:	3003      	addlt	r0, #3
   b7e94:	1080      	asrs	r0, r0, #2
   b7e96:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7e9a:	211a      	movs	r1, #26
   b7e9c:	4620      	mov	r0, r4
   b7e9e:	f7ff fde9 	bl	b7a74 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   b7ea2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7ea6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   b7ea8:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   b7eaa:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7eac:	bfa9      	itett	ge
   b7eae:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   b7eb0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7eb2:	b21b      	sxthge	r3, r3
   b7eb4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   b7eb6:	bfb2      	itee	lt
   b7eb8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   b7eba:	220f      	movge	r2, #15
   b7ebc:	fb93 f3f2 	sdivge	r3, r3, r2
   b7ec0:	b21b      	sxth	r3, r3
   b7ec2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   b7ec4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   b7ec8:	b16b      	cbz	r3, b7ee6 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   b7eca:	8a23      	ldrh	r3, [r4, #16]
   b7ecc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   b7ece:	b21b      	sxth	r3, r3
   b7ed0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   b7ed2:	4620      	mov	r0, r4
   b7ed4:	f7ff ff06 	bl	b7ce4 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   b7ed8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   b7edc:	2b00      	cmp	r3, #0
   b7ede:	d0ae      	beq.n	b7e3e <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   b7ee0:	f7ff ff64 	bl	b7dac <_ZN7RH_RF9511setModeIdleEv>
   b7ee4:	e7ab      	b.n	b7e3e <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   b7ee6:	8a23      	ldrh	r3, [r4, #16]
   b7ee8:	3ba4      	subs	r3, #164	; 0xa4
   b7eea:	e7f0      	b.n	b7ece <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   b7eec:	8ae3      	ldrh	r3, [r4, #22]
   b7eee:	3301      	adds	r3, #1
   b7ef0:	b29b      	uxth	r3, r3
   b7ef2:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   b7ef4:	4620      	mov	r0, r4
   b7ef6:	e7f3      	b.n	b7ee0 <_ZN7RH_RF9515handleInterruptEv+0x110>

000b7ef8 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   b7ef8:	4b02      	ldr	r3, [pc, #8]	; (b7f04 <_ZN7RH_RF954isr0Ev+0xc>)
   b7efa:	6818      	ldr	r0, [r3, #0]
   b7efc:	b108      	cbz	r0, b7f02 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   b7efe:	f7ff bf67 	b.w	b7dd0 <_ZN7RH_RF9515handleInterruptEv>
}
   b7f02:	4770      	bx	lr
   b7f04:	2003e604 	.word	0x2003e604

000b7f08 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   b7f08:	4b02      	ldr	r3, [pc, #8]	; (b7f14 <_ZN7RH_RF954isr1Ev+0xc>)
   b7f0a:	6858      	ldr	r0, [r3, #4]
   b7f0c:	b108      	cbz	r0, b7f12 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   b7f0e:	f7ff bf5f 	b.w	b7dd0 <_ZN7RH_RF9515handleInterruptEv>
}
   b7f12:	4770      	bx	lr
   b7f14:	2003e604 	.word	0x2003e604

000b7f18 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   b7f18:	4b02      	ldr	r3, [pc, #8]	; (b7f24 <_ZN7RH_RF954isr2Ev+0xc>)
   b7f1a:	6898      	ldr	r0, [r3, #8]
   b7f1c:	b108      	cbz	r0, b7f22 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   b7f1e:	f7ff bf57 	b.w	b7dd0 <_ZN7RH_RF9515handleInterruptEv>
}
   b7f22:	4770      	bx	lr
   b7f24:	2003e604 	.word	0x2003e604

000b7f28 <_ZN7RH_RF959setModeRxEv>:
{
   b7f28:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   b7f2a:	7903      	ldrb	r3, [r0, #4]
   b7f2c:	2b04      	cmp	r3, #4
{
   b7f2e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   b7f30:	d010      	beq.n	b7f54 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   b7f32:	6803      	ldr	r3, [r0, #0]
   b7f34:	2104      	movs	r1, #4
   b7f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7f3a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   b7f3c:	2205      	movs	r2, #5
   b7f3e:	2101      	movs	r1, #1
   b7f40:	4620      	mov	r0, r4
   b7f42:	f7ff fdb8 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   b7f46:	2200      	movs	r2, #0
   b7f48:	2140      	movs	r1, #64	; 0x40
   b7f4a:	4620      	mov	r0, r4
   b7f4c:	f7ff fdb3 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   b7f50:	2304      	movs	r3, #4
   b7f52:	7123      	strb	r3, [r4, #4]
}
   b7f54:	bd10      	pop	{r4, pc}

000b7f56 <_ZN7RH_RF959availableEv>:
{
   b7f56:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   b7f58:	7903      	ldrb	r3, [r0, #4]
   b7f5a:	2b03      	cmp	r3, #3
{
   b7f5c:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   b7f5e:	d005      	beq.n	b7f6c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   b7f60:	f7ff ffe2 	bl	b7f28 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   b7f64:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   b7f68:	b2c0      	uxtb	r0, r0
}
   b7f6a:	bd10      	pop	{r4, pc}
	return false;
   b7f6c:	2000      	movs	r0, #0
   b7f6e:	e7fc      	b.n	b7f6a <_ZN7RH_RF959availableEv+0x14>

000b7f70 <_ZN7RH_RF959setModeTxEv>:
{
   b7f70:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   b7f72:	7903      	ldrb	r3, [r0, #4]
   b7f74:	2b03      	cmp	r3, #3
{
   b7f76:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   b7f78:	d010      	beq.n	b7f9c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   b7f7a:	6803      	ldr	r3, [r0, #0]
   b7f7c:	2103      	movs	r1, #3
   b7f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   b7f82:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   b7f84:	2203      	movs	r2, #3
   b7f86:	2101      	movs	r1, #1
   b7f88:	4620      	mov	r0, r4
   b7f8a:	f7ff fd94 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   b7f8e:	2240      	movs	r2, #64	; 0x40
   b7f90:	4611      	mov	r1, r2
   b7f92:	4620      	mov	r0, r4
   b7f94:	f7ff fd8f 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   b7f98:	2303      	movs	r3, #3
   b7f9a:	7123      	strb	r3, [r4, #4]
}
   b7f9c:	bd10      	pop	{r4, pc}

000b7f9e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7f9e:	2afb      	cmp	r2, #251	; 0xfb
{
   b7fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fa2:	4604      	mov	r4, r0
   b7fa4:	460f      	mov	r7, r1
   b7fa6:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   b7fa8:	d902      	bls.n	b7fb0 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   b7faa:	2600      	movs	r6, #0
}
   b7fac:	4630      	mov	r0, r6
   b7fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   b7fb0:	6803      	ldr	r3, [r0, #0]
   b7fb2:	6a1b      	ldr	r3, [r3, #32]
   b7fb4:	4798      	blx	r3
    setModeIdle();
   b7fb6:	4620      	mov	r0, r4
   b7fb8:	f7ff fef8 	bl	b7dac <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   b7fbc:	6823      	ldr	r3, [r4, #0]
   b7fbe:	4620      	mov	r0, r4
   b7fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7fc2:	4798      	blx	r3
   b7fc4:	4606      	mov	r6, r0
   b7fc6:	2800      	cmp	r0, #0
   b7fc8:	d0ef      	beq.n	b7faa <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   b7fca:	2200      	movs	r2, #0
   b7fcc:	210d      	movs	r1, #13
   b7fce:	4620      	mov	r0, r4
   b7fd0:	f7ff fd71 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   b7fd4:	7ae2      	ldrb	r2, [r4, #11]
   b7fd6:	2100      	movs	r1, #0
   b7fd8:	4620      	mov	r0, r4
   b7fda:	f7ff fd6c 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   b7fde:	7b22      	ldrb	r2, [r4, #12]
   b7fe0:	2100      	movs	r1, #0
   b7fe2:	4620      	mov	r0, r4
   b7fe4:	f7ff fd67 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   b7fe8:	7b62      	ldrb	r2, [r4, #13]
   b7fea:	2100      	movs	r1, #0
   b7fec:	4620      	mov	r0, r4
   b7fee:	f7ff fd62 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   b7ff2:	7ba2      	ldrb	r2, [r4, #14]
   b7ff4:	2100      	movs	r1, #0
   b7ff6:	4620      	mov	r0, r4
   b7ff8:	f7ff fd5d 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   b7ffc:	462b      	mov	r3, r5
   b7ffe:	463a      	mov	r2, r7
   b8000:	2100      	movs	r1, #0
   b8002:	4620      	mov	r0, r4
   b8004:	f7ff fda5 	bl	b7b52 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   b8008:	1d2a      	adds	r2, r5, #4
   b800a:	b2d2      	uxtb	r2, r2
   b800c:	2122      	movs	r1, #34	; 0x22
   b800e:	4620      	mov	r0, r4
   b8010:	f7ff fd51 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   b8014:	4620      	mov	r0, r4
   b8016:	f7ff ffab 	bl	b7f70 <_ZN7RH_RF959setModeTxEv>
    return true;
   b801a:	e7c7      	b.n	b7fac <_ZN7RH_RF954sendEPKhh+0xe>

000b801c <_ZN7RH_RF9510setTxPowerEab>:
{
   b801c:	b510      	push	{r4, lr}
   b801e:	4604      	mov	r4, r0
    _useRFO = useRFO;
   b8020:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   b8024:	b172      	cbz	r2, b8044 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   b8026:	f381 0204 	usat	r2, #4, r1
   b802a:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   b802e:	b2d2      	uxtb	r2, r2
   b8030:	2109      	movs	r1, #9
   b8032:	f7ff fd40 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b8036:	4620      	mov	r0, r4
   b8038:	2204      	movs	r2, #4
}
   b803a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   b803e:	214d      	movs	r1, #77	; 0x4d
   b8040:	f7ff bd39 	b.w	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
}
   b8044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8048:	f7ff be0c 	b.w	b7c64 <_ZN7RH_RF9510setTxPowerEab.part.0>

000b804c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   b804c:	b538      	push	{r3, r4, r5, lr}
   b804e:	460c      	mov	r4, r1
   b8050:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   b8052:	780a      	ldrb	r2, [r1, #0]
   b8054:	211d      	movs	r1, #29
   b8056:	f7ff fd2e 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   b805a:	7862      	ldrb	r2, [r4, #1]
   b805c:	211e      	movs	r1, #30
   b805e:	4628      	mov	r0, r5
   b8060:	f7ff fd29 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b8064:	78a2      	ldrb	r2, [r4, #2]
   b8066:	4628      	mov	r0, r5
   b8068:	2126      	movs	r1, #38	; 0x26
}
   b806a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   b806e:	f7ff bd22 	b.w	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000b8074 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b8074:	2905      	cmp	r1, #5
{
   b8076:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   b8078:	d80f      	bhi.n	b809a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b807a:	4b09      	ldr	r3, [pc, #36]	; (b80a0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   b807c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b8080:	185c      	adds	r4, r3, r1
   b8082:	5a5a      	ldrh	r2, [r3, r1]
   b8084:	78a3      	ldrb	r3, [r4, #2]
   b8086:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   b808a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   b808c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   b8090:	f7ff ffdc 	bl	b804c <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   b8094:	2001      	movs	r0, #1
}
   b8096:	b002      	add	sp, #8
   b8098:	bd10      	pop	{r4, pc}
        return false;
   b809a:	2000      	movs	r0, #0
   b809c:	e7fb      	b.n	b8096 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   b809e:	bf00      	nop
   b80a0:	000bd23c 	.word	0x000bd23c

000b80a4 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   b80a4:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b80a6:	0a0a      	lsrs	r2, r1, #8
{
   b80a8:	4605      	mov	r5, r0
   b80aa:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   b80ac:	2120      	movs	r1, #32
   b80ae:	f7ff fd02 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b80b2:	b2e2      	uxtb	r2, r4
   b80b4:	4628      	mov	r0, r5
   b80b6:	2121      	movs	r1, #33	; 0x21
}
   b80b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   b80bc:	f7ff bcfb 	b.w	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>

000b80c0 <_ZN7RH_RF954initEv>:
{
   b80c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80c2:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   b80c4:	f7ff fca6 	bl	b7a14 <_ZN11RHSPIDriver4initEv>
   b80c8:	4606      	mov	r6, r0
   b80ca:	b918      	cbnz	r0, b80d4 <_ZN7RH_RF954initEv+0x14>
	return false;
   b80cc:	2600      	movs	r6, #0
}
   b80ce:	4630      	mov	r0, r6
   b80d0:	b002      	add	sp, #8
   b80d2:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   b80d4:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   b80d8:	2dff      	cmp	r5, #255	; 0xff
   b80da:	d054      	beq.n	b8186 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   b80dc:	4629      	mov	r1, r5
   b80de:	4620      	mov	r0, r4
   b80e0:	f7ff fd5f 	bl	b7ba2 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   b80e4:	2280      	movs	r2, #128	; 0x80
   b80e6:	2101      	movs	r1, #1
   b80e8:	4620      	mov	r0, r4
   b80ea:	f7ff fce4 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   b80ee:	200a      	movs	r0, #10
   b80f0:	f000 fd0a 	bl	b8b08 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   b80f4:	2101      	movs	r1, #1
   b80f6:	4620      	mov	r0, r4
   b80f8:	f7ff fcbc 	bl	b7a74 <_ZN11RHSPIDriver7spiReadEh>
   b80fc:	2880      	cmp	r0, #128	; 0x80
   b80fe:	d1e5      	bne.n	b80cc <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   b8100:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   b8104:	28ff      	cmp	r0, #255	; 0xff
   b8106:	d01c      	beq.n	b8142 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   b8108:	2100      	movs	r1, #0
   b810a:	f003 fa13 	bl	bb534 <pinMode>
	if (_myInterruptIndex == 0xff)
   b810e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   b8112:	2bff      	cmp	r3, #255	; 0xff
   b8114:	d107      	bne.n	b8126 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   b8116:	4a26      	ldr	r2, [pc, #152]	; (b81b0 <_ZN7RH_RF954initEv+0xf0>)
   b8118:	7813      	ldrb	r3, [r2, #0]
   b811a:	2b03      	cmp	r3, #3
   b811c:	d8d6      	bhi.n	b80cc <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   b811e:	1c59      	adds	r1, r3, #1
   b8120:	7011      	strb	r1, [r2, #0]
   b8122:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   b8126:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   b812a:	4b22      	ldr	r3, [pc, #136]	; (b81b4 <_ZN7RH_RF954initEv+0xf4>)
   b812c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   b8130:	bb62      	cbnz	r2, b818c <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   b8132:	4921      	ldr	r1, [pc, #132]	; (b81b8 <_ZN7RH_RF954initEv+0xf8>)
   b8134:	9200      	str	r2, [sp, #0]
   b8136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b813a:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   b813c:	b2a8      	uxth	r0, r5
   b813e:	f000 ff6d 	bl	b901c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   b8142:	2200      	movs	r2, #0
   b8144:	210e      	movs	r1, #14
   b8146:	4620      	mov	r0, r4
   b8148:	f7ff fcb5 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   b814c:	2200      	movs	r2, #0
   b814e:	210f      	movs	r1, #15
   b8150:	4620      	mov	r0, r4
   b8152:	f7ff fcb0 	bl	b7ab6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   b8156:	4620      	mov	r0, r4
   b8158:	f7ff fe28 	bl	b7dac <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   b815c:	2100      	movs	r1, #0
   b815e:	4620      	mov	r0, r4
   b8160:	f7ff ff88 	bl	b8074 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   b8164:	2108      	movs	r1, #8
   b8166:	4620      	mov	r0, r4
   b8168:	f7ff ff9c 	bl	b80a4 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   b816c:	ed9f 0a13 	vldr	s0, [pc, #76]	; b81bc <_ZN7RH_RF954initEv+0xfc>
   b8170:	4620      	mov	r0, r4
   b8172:	f7ff fdd9 	bl	b7d28 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   b8176:	2300      	movs	r3, #0
   b8178:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   b817c:	210d      	movs	r1, #13
   b817e:	4620      	mov	r0, r4
   b8180:	f7ff fd70 	bl	b7c64 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   b8184:	e7a3      	b.n	b80ce <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   b8186:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b818a:	e7ab      	b.n	b80e4 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   b818c:	2a01      	cmp	r2, #1
   b818e:	f04f 0300 	mov.w	r3, #0
   b8192:	d104      	bne.n	b819e <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   b8194:	9300      	str	r3, [sp, #0]
   b8196:	490a      	ldr	r1, [pc, #40]	; (b81c0 <_ZN7RH_RF954initEv+0x100>)
   b8198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b819c:	e7ce      	b.n	b813c <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   b819e:	2a02      	cmp	r2, #2
   b81a0:	d194      	bne.n	b80cc <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   b81a2:	9300      	str	r3, [sp, #0]
   b81a4:	4907      	ldr	r1, [pc, #28]	; (b81c4 <_ZN7RH_RF954initEv+0x104>)
   b81a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b81aa:	2201      	movs	r2, #1
   b81ac:	e7c6      	b.n	b813c <_ZN7RH_RF954initEv+0x7c>
   b81ae:	bf00      	nop
   b81b0:	2003e601 	.word	0x2003e601
   b81b4:	2003e604 	.word	0x2003e604
   b81b8:	000b7ef9 	.word	0x000b7ef9
   b81bc:	43d90000 	.word	0x43d90000
   b81c0:	000b7f09 	.word	0x000b7f09
   b81c4:	000b7f19 	.word	0x000b7f19

000b81c8 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
        virtual void save() {};
   b81c8:	4770      	bx	lr

000b81ca <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   b81ca:	6803      	ldr	r3, [r0, #0]
   b81cc:	685b      	ldr	r3, [r3, #4]
   b81ce:	4718      	bx	r3

000b81d0 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b81d0:	b510      	push	{r4, lr}
    if (lastUpdate) {
   b81d2:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   b81d4:	4604      	mov	r4, r0
    if (lastUpdate) {
   b81d6:	b133      	cbz	r3, b81e6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b81d8:	b131      	cbz	r1, b81e8 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   b81da:	6823      	ldr	r3, [r4, #0]
   b81dc:	4620      	mov	r0, r4
   b81de:	689b      	ldr	r3, [r3, #8]
   b81e0:	4798      	blx	r3
            lastUpdate = 0;
   b81e2:	2300      	movs	r3, #0
   b81e4:	61a3      	str	r3, [r4, #24]
        }
    }
}
   b81e6:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b81e8:	f000 f92a 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   b81ec:	69a3      	ldr	r3, [r4, #24]
   b81ee:	1ac0      	subs	r0, r0, r3
   b81f0:	69e3      	ldr	r3, [r4, #28]
   b81f2:	4298      	cmp	r0, r3
   b81f4:	d2f1      	bcs.n	b81da <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   b81f6:	e7f6      	b.n	b81e6 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000b81f8 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b81f8:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   b81fa:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   b81fc:	4604      	mov	r4, r0
    if (saveDelayMs) {
   b81fe:	b11b      	cbz	r3, b8208 <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   b8200:	f000 f91e 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   b8204:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   b8206:	bd10      	pop	{r4, pc}
        save();
   b8208:	6803      	ldr	r3, [r0, #0]
}
   b820a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   b820e:	689b      	ldr	r3, [r3, #8]
   b8210:	4718      	bx	r3

000b8212 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
            os_mutex_recursive_unlock(handle_); 
   b8212:	f000 b8ed 	b.w	b83f0 <os_mutex_recursive_unlock>

000b8216 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   b8216:	b510      	push	{r4, lr}
   b8218:	4604      	mov	r4, r0
   b821a:	3004      	adds	r0, #4
   b821c:	f7fc ffa0 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   b8220:	6823      	ldr	r3, [r4, #0]
   b8222:	68e1      	ldr	r1, [r4, #12]
   b8224:	695b      	ldr	r3, [r3, #20]
   b8226:	4620      	mov	r0, r4
   b8228:	4798      	blx	r3
   b822a:	b918      	cbnz	r0, b8234 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   b822c:	6823      	ldr	r3, [r4, #0]
   b822e:	4620      	mov	r0, r4
   b8230:	699b      	ldr	r3, [r3, #24]
   b8232:	4798      	blx	r3
      { _M_device.unlock(); }
   b8234:	6860      	ldr	r0, [r4, #4]
   b8236:	f7ff ffec 	bl	b8212 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b823a:	2001      	movs	r0, #1
   b823c:	bd10      	pop	{r4, pc}
	...

000b8240 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
        }
    }
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   b8240:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8242:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   b8246:	4f18      	ldr	r7, [pc, #96]	; (b82a8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   b8248:	4e18      	ldr	r6, [pc, #96]	; (b82ac <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   b824a:	4d19      	ldr	r5, [pc, #100]	; (b82b0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   b824c:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   b824e:	42a0      	cmp	r0, r4
   b8250:	d00c      	beq.n	b826c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   b8252:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   b8256:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   b8258:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   b825c:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   b825e:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   b8260:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   b8264:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   b8268:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   b826a:	e7f0      	b.n	b824e <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   b826c:	f001 0403 	and.w	r4, r1, #3
   b8270:	4404      	add	r4, r0
    k = 0;
   b8272:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   b8274:	42a0      	cmp	r0, r4
   b8276:	d004      	beq.n	b8282 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   b8278:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   b827c:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   b8280:	e7f8      	b.n	b8274 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   b8282:	4809      	ldr	r0, [pc, #36]	; (b82a8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   b8284:	4343      	muls	r3, r0
        k *= 0x1b873593;
   b8286:	4809      	ldr	r0, [pc, #36]	; (b82ac <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   b8288:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   b828c:	404a      	eors	r2, r1
        k *= 0x1b873593;
   b828e:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   b8290:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   b8292:	4b08      	ldr	r3, [pc, #32]	; (b82b4 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   b8294:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   b8298:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   b829a:	4b07      	ldr	r3, [pc, #28]	; (b82b8 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   b829c:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   b82a0:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   b82a2:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   b82a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b82a8:	cc9e2d51 	.word	0xcc9e2d51
   b82ac:	1b873593 	.word	0x1b873593
   b82b0:	e6546b64 	.word	0xe6546b64
   b82b4:	85ebca6b 	.word	0x85ebca6b
   b82b8:	c2b2ae35 	.word	0xc2b2ae35

000b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   b82bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82be:	4604      	mov	r4, r0
      { _M_device.lock(); }
   b82c0:	3004      	adds	r0, #4
   b82c2:	f7fc ff4d 	bl	b5160 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   b82c6:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   b82c8:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   b82ca:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   b82cc:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b82ce:	68a6      	ldr	r6, [r4, #8]
   b82d0:	4a05      	ldr	r2, [pc, #20]	; (b82e8 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   b82d2:	88f1      	ldrh	r1, [r6, #6]
   b82d4:	4630      	mov	r0, r6
   b82d6:	f7ff ffb3 	bl	b8240 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   b82da:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   b82dc:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   b82de:	6860      	ldr	r0, [r4, #4]
   b82e0:	f7ff ff97 	bl	b8212 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   b82e4:	4628      	mov	r0, r5
   b82e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b82e8:	851c2a3f 	.word	0x851c2a3f

000b82ec <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   b82ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b82ee:	460d      	mov	r5, r1
   b82f0:	4604      	mov	r4, r0
    uint32_t hash = getHash();
   b82f2:	f7ff ffe3 	bl	b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (dataSize >= 12 && 
   b82f6:	2d0b      	cmp	r5, #11
    uint32_t hash = getHash();
   b82f8:	4606      	mov	r6, r0
    if (dataSize >= 12 && 
   b82fa:	d923      	bls.n	b8344 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x58>
        savedDataHeader->magic == savedDataMagic && 
   b82fc:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   b82fe:	6922      	ldr	r2, [r4, #16]
   b8300:	6819      	ldr	r1, [r3, #0]
   b8302:	4291      	cmp	r1, r2
   b8304:	d11f      	bne.n	b8346 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->magic == savedDataMagic && 
   b8306:	8899      	ldrh	r1, [r3, #4]
   b8308:	8aa2      	ldrh	r2, [r4, #20]
   b830a:	4291      	cmp	r1, r2
   b830c:	d11b      	bne.n	b8346 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->version == savedDataVersion &&
   b830e:	88d9      	ldrh	r1, [r3, #6]
   b8310:	b2aa      	uxth	r2, r5
   b8312:	4291      	cmp	r1, r2
   b8314:	d817      	bhi.n	b8346 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        savedDataHeader->size <= (uint16_t) dataSize &&
   b8316:	689a      	ldr	r2, [r3, #8]
   b8318:	4282      	cmp	r2, r0
   b831a:	d114      	bne.n	b8346 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x5a>
        if ((size_t)dataSize < savedDataSize) {
   b831c:	68e2      	ldr	r2, [r4, #12]
   b831e:	42aa      	cmp	r2, r5
   b8320:	d905      	bls.n	b832e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x42>
                p[ii] = 0;
   b8322:	2100      	movs	r1, #0
   b8324:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   b8326:	68e2      	ldr	r2, [r4, #12]
   b8328:	3501      	adds	r5, #1
   b832a:	42aa      	cmp	r2, r5
   b832c:	d8fa      	bhi.n	b8324 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        savedDataHeader->size = (uint16_t) savedDataSize;
   b832e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   b8332:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   b8334:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   b8336:	68a5      	ldr	r5, [r4, #8]
   b8338:	f7ff ffc0 	bl	b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b833c:	60a8      	str	r0, [r5, #8]
        isValid = true;
   b833e:	2001      	movs	r0, #1
}
   b8340:	b002      	add	sp, #8
   b8342:	bd70      	pop	{r4, r5, r6, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   b8344:	b19d      	cbz	r5, b836e <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x82>
   b8346:	68a1      	ldr	r1, [r4, #8]
   b8348:	680a      	ldr	r2, [r1, #0]
   b834a:	b192      	cbz	r2, b8372 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   b834c:	6888      	ldr	r0, [r1, #8]
   b834e:	888b      	ldrh	r3, [r1, #4]
   b8350:	9001      	str	r0, [sp, #4]
   b8352:	88c9      	ldrh	r1, [r1, #6]
   b8354:	4808      	ldr	r0, [pc, #32]	; (b8378 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b8356:	9100      	str	r1, [sp, #0]
   b8358:	4908      	ldr	r1, [pc, #32]	; (b837c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x90>)
   b835a:	f7fd fd98 	bl	b5e8e <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   b835e:	e9cd 5600 	strd	r5, r6, [sp]
   b8362:	8aa3      	ldrh	r3, [r4, #20]
   b8364:	6922      	ldr	r2, [r4, #16]
   b8366:	4906      	ldr	r1, [pc, #24]	; (b8380 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x94>)
   b8368:	4803      	ldr	r0, [pc, #12]	; (b8378 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x8c>)
   b836a:	f7fd fd90 	bl	b5e8e <_ZNK5spark6Logger5traceEPKcz>
   b836e:	2000      	movs	r0, #0
   b8370:	e7e6      	b.n	b8340 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b8372:	4610      	mov	r0, r2
   b8374:	e7e4      	b.n	b8340 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x54>
   b8376:	bf00      	nop
   b8378:	2003e658 	.word	0x2003e658
   b837c:	000bd2d8 	.word	0x000bd2d8
   b8380:	000bd309 	.word	0x000bd309

000b8384 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   b8384:	b538      	push	{r3, r4, r5, lr}
   b8386:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   b8388:	68c2      	ldr	r2, [r0, #12]
   b838a:	6880      	ldr	r0, [r0, #8]
   b838c:	2100      	movs	r1, #0
   b838e:	f003 ff11 	bl	bc1b4 <memset>
    savedDataHeader->magic = savedDataMagic;
   b8392:	68a3      	ldr	r3, [r4, #8]
   b8394:	6922      	ldr	r2, [r4, #16]
   b8396:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   b8398:	68a3      	ldr	r3, [r4, #8]
   b839a:	8aa2      	ldrh	r2, [r4, #20]
   b839c:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   b839e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   b83a2:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   b83a4:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   b83a6:	68a5      	ldr	r5, [r4, #8]
   b83a8:	f7ff ff88 	bl	b82bc <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   b83ac:	60a8      	str	r0, [r5, #8]
}
   b83ae:	bd38      	pop	{r3, r4, r5, pc}

000b83b0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   b83b0:	b508      	push	{r3, lr}
   b83b2:	4b02      	ldr	r3, [pc, #8]	; (b83bc <cellular_signal+0xc>)
   b83b4:	681b      	ldr	r3, [r3, #0]
   b83b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b83b8:	9301      	str	r3, [sp, #4]
   b83ba:	bd08      	pop	{r3, pc}
   b83bc:	00030274 	.word	0x00030274

000b83c0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b83c0:	b508      	push	{r3, lr}
   b83c2:	4b02      	ldr	r3, [pc, #8]	; (b83cc <os_mutex_recursive_create+0xc>)
   b83c4:	681b      	ldr	r3, [r3, #0]
   b83c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b83c8:	9301      	str	r3, [sp, #4]
   b83ca:	bd08      	pop	{r3, pc}
   b83cc:	00030248 	.word	0x00030248

000b83d0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b83d0:	b508      	push	{r3, lr}
   b83d2:	4b02      	ldr	r3, [pc, #8]	; (b83dc <os_mutex_recursive_destroy+0xc>)
   b83d4:	681b      	ldr	r3, [r3, #0]
   b83d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b83d8:	9301      	str	r3, [sp, #4]
   b83da:	bd08      	pop	{r3, pc}
   b83dc:	00030248 	.word	0x00030248

000b83e0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b83e0:	b508      	push	{r3, lr}
   b83e2:	4b02      	ldr	r3, [pc, #8]	; (b83ec <os_mutex_recursive_lock+0xc>)
   b83e4:	681b      	ldr	r3, [r3, #0]
   b83e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b83e8:	9301      	str	r3, [sp, #4]
   b83ea:	bd08      	pop	{r3, pc}
   b83ec:	00030248 	.word	0x00030248

000b83f0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b83f0:	b508      	push	{r3, lr}
   b83f2:	4b02      	ldr	r3, [pc, #8]	; (b83fc <os_mutex_recursive_unlock+0xc>)
   b83f4:	681b      	ldr	r3, [r3, #0]
   b83f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b83f8:	9301      	str	r3, [sp, #4]
   b83fa:	bd08      	pop	{r3, pc}
   b83fc:	00030248 	.word	0x00030248

000b8400 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b8400:	b508      	push	{r3, lr}
   b8402:	4b02      	ldr	r3, [pc, #8]	; (b840c <HAL_Core_Runtime_Info+0xc>)
   b8404:	681b      	ldr	r3, [r3, #0]
   b8406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8408:	9301      	str	r3, [sp, #4]
   b840a:	bd08      	pop	{r3, pc}
   b840c:	00030234 	.word	0x00030234

000b8410 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b8410:	b508      	push	{r3, lr}
   b8412:	4b02      	ldr	r3, [pc, #8]	; (b841c <HAL_Feature_Set+0xc>)
   b8414:	681b      	ldr	r3, [r3, #0]
   b8416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8418:	9301      	str	r3, [sp, #4]
   b841a:	bd08      	pop	{r3, pc}
   b841c:	00030234 	.word	0x00030234

000b8420 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8420:	b508      	push	{r3, lr}
   b8422:	4b02      	ldr	r3, [pc, #8]	; (b842c <HAL_RNG_GetRandomNumber+0xc>)
   b8424:	681b      	ldr	r3, [r3, #0]
   b8426:	685b      	ldr	r3, [r3, #4]
   b8428:	9301      	str	r3, [sp, #4]
   b842a:	bd08      	pop	{r3, pc}
   b842c:	00030218 	.word	0x00030218

000b8430 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8430:	b508      	push	{r3, lr}
   b8432:	4b02      	ldr	r3, [pc, #8]	; (b843c <HAL_Delay_Microseconds+0xc>)
   b8434:	681b      	ldr	r3, [r3, #0]
   b8436:	68db      	ldr	r3, [r3, #12]
   b8438:	9301      	str	r3, [sp, #4]
   b843a:	bd08      	pop	{r3, pc}
   b843c:	00030218 	.word	0x00030218

000b8440 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b8440:	b508      	push	{r3, lr}
   b8442:	4b02      	ldr	r3, [pc, #8]	; (b844c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b8444:	681b      	ldr	r3, [r3, #0]
   b8446:	695b      	ldr	r3, [r3, #20]
   b8448:	9301      	str	r3, [sp, #4]
   b844a:	bd08      	pop	{r3, pc}
   b844c:	00030218 	.word	0x00030218

000b8450 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b8450:	b508      	push	{r3, lr}
   b8452:	4b02      	ldr	r3, [pc, #8]	; (b845c <hal_rtc_time_is_valid+0xc>)
   b8454:	681b      	ldr	r3, [r3, #0]
   b8456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8458:	9301      	str	r3, [sp, #4]
   b845a:	bd08      	pop	{r3, pc}
   b845c:	00030218 	.word	0x00030218

000b8460 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b8460:	b508      	push	{r3, lr}
   b8462:	4b02      	ldr	r3, [pc, #8]	; (b846c <hal_timer_millis+0xc>)
   b8464:	681b      	ldr	r3, [r3, #0]
   b8466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b8468:	9301      	str	r3, [sp, #4]
   b846a:	bd08      	pop	{r3, pc}
   b846c:	00030218 	.word	0x00030218

000b8470 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b8470:	b508      	push	{r3, lr}
   b8472:	4b02      	ldr	r3, [pc, #8]	; (b847c <hal_rtc_get_time+0xc>)
   b8474:	681b      	ldr	r3, [r3, #0]
   b8476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b8478:	9301      	str	r3, [sp, #4]
   b847a:	bd08      	pop	{r3, pc}
   b847c:	00030218 	.word	0x00030218

000b8480 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   b8480:	b508      	push	{r3, lr}
   b8482:	4b02      	ldr	r3, [pc, #8]	; (b848c <hal_rtc_set_time+0xc>)
   b8484:	681b      	ldr	r3, [r3, #0]
   b8486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   b8488:	9301      	str	r3, [sp, #4]
   b848a:	bd08      	pop	{r3, pc}
   b848c:	00030218 	.word	0x00030218

000b8490 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b8490:	b508      	push	{r3, lr}
   b8492:	4b02      	ldr	r3, [pc, #8]	; (b849c <HAL_Pin_Map+0xc>)
   b8494:	681b      	ldr	r3, [r3, #0]
   b8496:	681b      	ldr	r3, [r3, #0]
   b8498:	9301      	str	r3, [sp, #4]
   b849a:	bd08      	pop	{r3, pc}
   b849c:	0003022c 	.word	0x0003022c

000b84a0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b84a0:	b508      	push	{r3, lr}
   b84a2:	4b02      	ldr	r3, [pc, #8]	; (b84ac <HAL_Validate_Pin_Function+0xc>)
   b84a4:	681b      	ldr	r3, [r3, #0]
   b84a6:	685b      	ldr	r3, [r3, #4]
   b84a8:	9301      	str	r3, [sp, #4]
   b84aa:	bd08      	pop	{r3, pc}
   b84ac:	0003022c 	.word	0x0003022c

000b84b0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b84b0:	b508      	push	{r3, lr}
   b84b2:	4b02      	ldr	r3, [pc, #8]	; (b84bc <HAL_Pin_Mode+0xc>)
   b84b4:	681b      	ldr	r3, [r3, #0]
   b84b6:	689b      	ldr	r3, [r3, #8]
   b84b8:	9301      	str	r3, [sp, #4]
   b84ba:	bd08      	pop	{r3, pc}
   b84bc:	0003022c 	.word	0x0003022c

000b84c0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b84c0:	b508      	push	{r3, lr}
   b84c2:	4b02      	ldr	r3, [pc, #8]	; (b84cc <HAL_Get_Pin_Mode+0xc>)
   b84c4:	681b      	ldr	r3, [r3, #0]
   b84c6:	68db      	ldr	r3, [r3, #12]
   b84c8:	9301      	str	r3, [sp, #4]
   b84ca:	bd08      	pop	{r3, pc}
   b84cc:	0003022c 	.word	0x0003022c

000b84d0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b84d0:	b508      	push	{r3, lr}
   b84d2:	4b02      	ldr	r3, [pc, #8]	; (b84dc <HAL_GPIO_Write+0xc>)
   b84d4:	681b      	ldr	r3, [r3, #0]
   b84d6:	691b      	ldr	r3, [r3, #16]
   b84d8:	9301      	str	r3, [sp, #4]
   b84da:	bd08      	pop	{r3, pc}
   b84dc:	0003022c 	.word	0x0003022c

000b84e0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b84e0:	b508      	push	{r3, lr}
   b84e2:	4b02      	ldr	r3, [pc, #8]	; (b84ec <HAL_GPIO_Read+0xc>)
   b84e4:	681b      	ldr	r3, [r3, #0]
   b84e6:	695b      	ldr	r3, [r3, #20]
   b84e8:	9301      	str	r3, [sp, #4]
   b84ea:	bd08      	pop	{r3, pc}
   b84ec:	0003022c 	.word	0x0003022c

000b84f0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b84f0:	b508      	push	{r3, lr}
   b84f2:	4b02      	ldr	r3, [pc, #8]	; (b84fc <HAL_Interrupts_Attach+0xc>)
   b84f4:	681b      	ldr	r3, [r3, #0]
   b84f6:	699b      	ldr	r3, [r3, #24]
   b84f8:	9301      	str	r3, [sp, #4]
   b84fa:	bd08      	pop	{r3, pc}
   b84fc:	0003022c 	.word	0x0003022c

000b8500 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8500:	b508      	push	{r3, lr}
   b8502:	4b02      	ldr	r3, [pc, #8]	; (b850c <HAL_Interrupts_Detach+0xc>)
   b8504:	681b      	ldr	r3, [r3, #0]
   b8506:	69db      	ldr	r3, [r3, #28]
   b8508:	9301      	str	r3, [sp, #4]
   b850a:	bd08      	pop	{r3, pc}
   b850c:	0003022c 	.word	0x0003022c

000b8510 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b8510:	b508      	push	{r3, lr}
   b8512:	4b02      	ldr	r3, [pc, #8]	; (b851c <hal_adc_read+0xc>)
   b8514:	681b      	ldr	r3, [r3, #0]
   b8516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8518:	9301      	str	r3, [sp, #4]
   b851a:	bd08      	pop	{r3, pc}
   b851c:	0003022c 	.word	0x0003022c

000b8520 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8520:	b508      	push	{r3, lr}
   b8522:	4b02      	ldr	r3, [pc, #8]	; (b852c <hal_i2c_begin+0xc>)
   b8524:	681b      	ldr	r3, [r3, #0]
   b8526:	68db      	ldr	r3, [r3, #12]
   b8528:	9301      	str	r3, [sp, #4]
   b852a:	bd08      	pop	{r3, pc}
   b852c:	00030228 	.word	0x00030228

000b8530 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8530:	b508      	push	{r3, lr}
   b8532:	4b02      	ldr	r3, [pc, #8]	; (b853c <hal_i2c_begin_transmission+0xc>)
   b8534:	681b      	ldr	r3, [r3, #0]
   b8536:	699b      	ldr	r3, [r3, #24]
   b8538:	9301      	str	r3, [sp, #4]
   b853a:	bd08      	pop	{r3, pc}
   b853c:	00030228 	.word	0x00030228

000b8540 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8540:	b508      	push	{r3, lr}
   b8542:	4b02      	ldr	r3, [pc, #8]	; (b854c <hal_i2c_end_transmission+0xc>)
   b8544:	681b      	ldr	r3, [r3, #0]
   b8546:	69db      	ldr	r3, [r3, #28]
   b8548:	9301      	str	r3, [sp, #4]
   b854a:	bd08      	pop	{r3, pc}
   b854c:	00030228 	.word	0x00030228

000b8550 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8550:	b508      	push	{r3, lr}
   b8552:	4b02      	ldr	r3, [pc, #8]	; (b855c <hal_i2c_write+0xc>)
   b8554:	681b      	ldr	r3, [r3, #0]
   b8556:	6a1b      	ldr	r3, [r3, #32]
   b8558:	9301      	str	r3, [sp, #4]
   b855a:	bd08      	pop	{r3, pc}
   b855c:	00030228 	.word	0x00030228

000b8560 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8560:	b508      	push	{r3, lr}
   b8562:	4b02      	ldr	r3, [pc, #8]	; (b856c <hal_i2c_available+0xc>)
   b8564:	681b      	ldr	r3, [r3, #0]
   b8566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8568:	9301      	str	r3, [sp, #4]
   b856a:	bd08      	pop	{r3, pc}
   b856c:	00030228 	.word	0x00030228

000b8570 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8570:	b508      	push	{r3, lr}
   b8572:	4b02      	ldr	r3, [pc, #8]	; (b857c <hal_i2c_read+0xc>)
   b8574:	681b      	ldr	r3, [r3, #0]
   b8576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8578:	9301      	str	r3, [sp, #4]
   b857a:	bd08      	pop	{r3, pc}
   b857c:	00030228 	.word	0x00030228

000b8580 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8580:	b508      	push	{r3, lr}
   b8582:	4b02      	ldr	r3, [pc, #8]	; (b858c <hal_i2c_peek+0xc>)
   b8584:	681b      	ldr	r3, [r3, #0]
   b8586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8588:	9301      	str	r3, [sp, #4]
   b858a:	bd08      	pop	{r3, pc}
   b858c:	00030228 	.word	0x00030228

000b8590 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8590:	b508      	push	{r3, lr}
   b8592:	4b02      	ldr	r3, [pc, #8]	; (b859c <hal_i2c_flush+0xc>)
   b8594:	681b      	ldr	r3, [r3, #0]
   b8596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8598:	9301      	str	r3, [sp, #4]
   b859a:	bd08      	pop	{r3, pc}
   b859c:	00030228 	.word	0x00030228

000b85a0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b85a0:	b508      	push	{r3, lr}
   b85a2:	4b02      	ldr	r3, [pc, #8]	; (b85ac <hal_i2c_is_enabled+0xc>)
   b85a4:	681b      	ldr	r3, [r3, #0]
   b85a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b85a8:	9301      	str	r3, [sp, #4]
   b85aa:	bd08      	pop	{r3, pc}
   b85ac:	00030228 	.word	0x00030228

000b85b0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b85b0:	b508      	push	{r3, lr}
   b85b2:	4b02      	ldr	r3, [pc, #8]	; (b85bc <hal_i2c_init+0xc>)
   b85b4:	681b      	ldr	r3, [r3, #0]
   b85b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b85b8:	9301      	str	r3, [sp, #4]
   b85ba:	bd08      	pop	{r3, pc}
   b85bc:	00030228 	.word	0x00030228

000b85c0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   b85c0:	b508      	push	{r3, lr}
   b85c2:	4b02      	ldr	r3, [pc, #8]	; (b85cc <hal_i2c_lock+0xc>)
   b85c4:	681b      	ldr	r3, [r3, #0]
   b85c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b85c8:	9301      	str	r3, [sp, #4]
   b85ca:	bd08      	pop	{r3, pc}
   b85cc:	00030228 	.word	0x00030228

000b85d0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   b85d0:	b508      	push	{r3, lr}
   b85d2:	4b02      	ldr	r3, [pc, #8]	; (b85dc <hal_i2c_unlock+0xc>)
   b85d4:	681b      	ldr	r3, [r3, #0]
   b85d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b85d8:	9301      	str	r3, [sp, #4]
   b85da:	bd08      	pop	{r3, pc}
   b85dc:	00030228 	.word	0x00030228

000b85e0 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b85e0:	b508      	push	{r3, lr}
   b85e2:	4b02      	ldr	r3, [pc, #8]	; (b85ec <hal_i2c_request_ex+0xc>)
   b85e4:	681b      	ldr	r3, [r3, #0]
   b85e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b85e8:	9301      	str	r3, [sp, #4]
   b85ea:	bd08      	pop	{r3, pc}
   b85ec:	00030228 	.word	0x00030228

000b85f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b85f0:	b508      	push	{r3, lr}
   b85f2:	4b02      	ldr	r3, [pc, #8]	; (b85fc <inet_inet_ntop+0xc>)
   b85f4:	681b      	ldr	r3, [r3, #0]
   b85f6:	695b      	ldr	r3, [r3, #20]
   b85f8:	9301      	str	r3, [sp, #4]
   b85fa:	bd08      	pop	{r3, pc}
   b85fc:	00030264 	.word	0x00030264

000b8600 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b8600:	b508      	push	{r3, lr}
   b8602:	4b02      	ldr	r3, [pc, #8]	; (b860c <netdb_freeaddrinfo+0xc>)
   b8604:	681b      	ldr	r3, [r3, #0]
   b8606:	689b      	ldr	r3, [r3, #8]
   b8608:	9301      	str	r3, [sp, #4]
   b860a:	bd08      	pop	{r3, pc}
   b860c:	00030268 	.word	0x00030268

000b8610 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8610:	b508      	push	{r3, lr}
   b8612:	4b02      	ldr	r3, [pc, #8]	; (b861c <netdb_getaddrinfo+0xc>)
   b8614:	681b      	ldr	r3, [r3, #0]
   b8616:	68db      	ldr	r3, [r3, #12]
   b8618:	9301      	str	r3, [sp, #4]
   b861a:	bd08      	pop	{r3, pc}
   b861c:	00030268 	.word	0x00030268

000b8620 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8620:	b508      	push	{r3, lr}
   b8622:	4b02      	ldr	r3, [pc, #8]	; (b862c <hal_spi_begin+0xc>)
   b8624:	681b      	ldr	r3, [r3, #0]
   b8626:	681b      	ldr	r3, [r3, #0]
   b8628:	9301      	str	r3, [sp, #4]
   b862a:	bd08      	pop	{r3, pc}
   b862c:	00030230 	.word	0x00030230

000b8630 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   b8630:	b508      	push	{r3, lr}
   b8632:	4b02      	ldr	r3, [pc, #8]	; (b863c <hal_spi_end+0xc>)
   b8634:	681b      	ldr	r3, [r3, #0]
   b8636:	685b      	ldr	r3, [r3, #4]
   b8638:	9301      	str	r3, [sp, #4]
   b863a:	bd08      	pop	{r3, pc}
   b863c:	00030230 	.word	0x00030230

000b8640 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8640:	b508      	push	{r3, lr}
   b8642:	4b02      	ldr	r3, [pc, #8]	; (b864c <hal_spi_transfer+0xc>)
   b8644:	681b      	ldr	r3, [r3, #0]
   b8646:	695b      	ldr	r3, [r3, #20]
   b8648:	9301      	str	r3, [sp, #4]
   b864a:	bd08      	pop	{r3, pc}
   b864c:	00030230 	.word	0x00030230

000b8650 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8650:	b508      	push	{r3, lr}
   b8652:	4b02      	ldr	r3, [pc, #8]	; (b865c <hal_spi_init+0xc>)
   b8654:	681b      	ldr	r3, [r3, #0]
   b8656:	69db      	ldr	r3, [r3, #28]
   b8658:	9301      	str	r3, [sp, #4]
   b865a:	bd08      	pop	{r3, pc}
   b865c:	00030230 	.word	0x00030230

000b8660 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8660:	b508      	push	{r3, lr}
   b8662:	4b02      	ldr	r3, [pc, #8]	; (b866c <hal_spi_is_enabled+0xc>)
   b8664:	681b      	ldr	r3, [r3, #0]
   b8666:	6a1b      	ldr	r3, [r3, #32]
   b8668:	9301      	str	r3, [sp, #4]
   b866a:	bd08      	pop	{r3, pc}
   b866c:	00030230 	.word	0x00030230

000b8670 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8670:	b508      	push	{r3, lr}
   b8672:	4b02      	ldr	r3, [pc, #8]	; (b867c <hal_spi_info+0xc>)
   b8674:	681b      	ldr	r3, [r3, #0]
   b8676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8678:	9301      	str	r3, [sp, #4]
   b867a:	bd08      	pop	{r3, pc}
   b867c:	00030230 	.word	0x00030230

000b8680 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8680:	b508      	push	{r3, lr}
   b8682:	4b02      	ldr	r3, [pc, #8]	; (b868c <hal_spi_set_settings+0xc>)
   b8684:	681b      	ldr	r3, [r3, #0]
   b8686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8688:	9301      	str	r3, [sp, #4]
   b868a:	bd08      	pop	{r3, pc}
   b868c:	00030230 	.word	0x00030230

000b8690 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8690:	b508      	push	{r3, lr}
   b8692:	4b02      	ldr	r3, [pc, #8]	; (b869c <hal_spi_acquire+0xc>)
   b8694:	681b      	ldr	r3, [r3, #0]
   b8696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8698:	9301      	str	r3, [sp, #4]
   b869a:	bd08      	pop	{r3, pc}
   b869c:	00030230 	.word	0x00030230

000b86a0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b86a0:	b508      	push	{r3, lr}
   b86a2:	4b02      	ldr	r3, [pc, #8]	; (b86ac <hal_spi_release+0xc>)
   b86a4:	681b      	ldr	r3, [r3, #0]
   b86a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b86a8:	9301      	str	r3, [sp, #4]
   b86aa:	bd08      	pop	{r3, pc}
   b86ac:	00030230 	.word	0x00030230

000b86b0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b86b0:	b508      	push	{r3, lr}
   b86b2:	4b02      	ldr	r3, [pc, #8]	; (b86bc <hal_usart_end+0xc>)
   b86b4:	681b      	ldr	r3, [r3, #0]
   b86b6:	689b      	ldr	r3, [r3, #8]
   b86b8:	9301      	str	r3, [sp, #4]
   b86ba:	bd08      	pop	{r3, pc}
   b86bc:	0003023c 	.word	0x0003023c

000b86c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b86c0:	b508      	push	{r3, lr}
   b86c2:	4b02      	ldr	r3, [pc, #8]	; (b86cc <hal_usart_write+0xc>)
   b86c4:	681b      	ldr	r3, [r3, #0]
   b86c6:	68db      	ldr	r3, [r3, #12]
   b86c8:	9301      	str	r3, [sp, #4]
   b86ca:	bd08      	pop	{r3, pc}
   b86cc:	0003023c 	.word	0x0003023c

000b86d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b86d0:	b508      	push	{r3, lr}
   b86d2:	4b02      	ldr	r3, [pc, #8]	; (b86dc <hal_usart_available+0xc>)
   b86d4:	681b      	ldr	r3, [r3, #0]
   b86d6:	691b      	ldr	r3, [r3, #16]
   b86d8:	9301      	str	r3, [sp, #4]
   b86da:	bd08      	pop	{r3, pc}
   b86dc:	0003023c 	.word	0x0003023c

000b86e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b86e0:	b508      	push	{r3, lr}
   b86e2:	4b02      	ldr	r3, [pc, #8]	; (b86ec <hal_usart_read+0xc>)
   b86e4:	681b      	ldr	r3, [r3, #0]
   b86e6:	695b      	ldr	r3, [r3, #20]
   b86e8:	9301      	str	r3, [sp, #4]
   b86ea:	bd08      	pop	{r3, pc}
   b86ec:	0003023c 	.word	0x0003023c

000b86f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b86f0:	b508      	push	{r3, lr}
   b86f2:	4b02      	ldr	r3, [pc, #8]	; (b86fc <hal_usart_peek+0xc>)
   b86f4:	681b      	ldr	r3, [r3, #0]
   b86f6:	699b      	ldr	r3, [r3, #24]
   b86f8:	9301      	str	r3, [sp, #4]
   b86fa:	bd08      	pop	{r3, pc}
   b86fc:	0003023c 	.word	0x0003023c

000b8700 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8700:	b508      	push	{r3, lr}
   b8702:	4b02      	ldr	r3, [pc, #8]	; (b870c <hal_usart_flush+0xc>)
   b8704:	681b      	ldr	r3, [r3, #0]
   b8706:	69db      	ldr	r3, [r3, #28]
   b8708:	9301      	str	r3, [sp, #4]
   b870a:	bd08      	pop	{r3, pc}
   b870c:	0003023c 	.word	0x0003023c

000b8710 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8710:	b508      	push	{r3, lr}
   b8712:	4b02      	ldr	r3, [pc, #8]	; (b871c <hal_usart_is_enabled+0xc>)
   b8714:	681b      	ldr	r3, [r3, #0]
   b8716:	6a1b      	ldr	r3, [r3, #32]
   b8718:	9301      	str	r3, [sp, #4]
   b871a:	bd08      	pop	{r3, pc}
   b871c:	0003023c 	.word	0x0003023c

000b8720 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8720:	b508      	push	{r3, lr}
   b8722:	4b02      	ldr	r3, [pc, #8]	; (b872c <hal_usart_available_data_for_write+0xc>)
   b8724:	681b      	ldr	r3, [r3, #0]
   b8726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8728:	9301      	str	r3, [sp, #4]
   b872a:	bd08      	pop	{r3, pc}
   b872c:	0003023c 	.word	0x0003023c

000b8730 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8730:	b508      	push	{r3, lr}
   b8732:	4b02      	ldr	r3, [pc, #8]	; (b873c <hal_usart_begin_config+0xc>)
   b8734:	681b      	ldr	r3, [r3, #0]
   b8736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8738:	9301      	str	r3, [sp, #4]
   b873a:	bd08      	pop	{r3, pc}
   b873c:	0003023c 	.word	0x0003023c

000b8740 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8740:	b508      	push	{r3, lr}
   b8742:	4b02      	ldr	r3, [pc, #8]	; (b874c <hal_usart_init_ex+0xc>)
   b8744:	681b      	ldr	r3, [r3, #0]
   b8746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8748:	9301      	str	r3, [sp, #4]
   b874a:	bd08      	pop	{r3, pc}
   b874c:	0003023c 	.word	0x0003023c

000b8750 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8750:	b508      	push	{r3, lr}
   b8752:	4b02      	ldr	r3, [pc, #8]	; (b875c <HAL_USB_USART_Init+0xc>)
   b8754:	681b      	ldr	r3, [r3, #0]
   b8756:	681b      	ldr	r3, [r3, #0]
   b8758:	9301      	str	r3, [sp, #4]
   b875a:	bd08      	pop	{r3, pc}
   b875c:	0003024c 	.word	0x0003024c

000b8760 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8760:	b508      	push	{r3, lr}
   b8762:	4b02      	ldr	r3, [pc, #8]	; (b876c <HAL_USB_USART_Begin+0xc>)
   b8764:	681b      	ldr	r3, [r3, #0]
   b8766:	685b      	ldr	r3, [r3, #4]
   b8768:	9301      	str	r3, [sp, #4]
   b876a:	bd08      	pop	{r3, pc}
   b876c:	0003024c 	.word	0x0003024c

000b8770 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b8770:	b508      	push	{r3, lr}
   b8772:	4b02      	ldr	r3, [pc, #8]	; (b877c <HAL_USB_USART_End+0xc>)
   b8774:	681b      	ldr	r3, [r3, #0]
   b8776:	689b      	ldr	r3, [r3, #8]
   b8778:	9301      	str	r3, [sp, #4]
   b877a:	bd08      	pop	{r3, pc}
   b877c:	0003024c 	.word	0x0003024c

000b8780 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8780:	b508      	push	{r3, lr}
   b8782:	4b02      	ldr	r3, [pc, #8]	; (b878c <HAL_USB_USART_Available_Data+0xc>)
   b8784:	681b      	ldr	r3, [r3, #0]
   b8786:	691b      	ldr	r3, [r3, #16]
   b8788:	9301      	str	r3, [sp, #4]
   b878a:	bd08      	pop	{r3, pc}
   b878c:	0003024c 	.word	0x0003024c

000b8790 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8790:	b508      	push	{r3, lr}
   b8792:	4b02      	ldr	r3, [pc, #8]	; (b879c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8794:	681b      	ldr	r3, [r3, #0]
   b8796:	695b      	ldr	r3, [r3, #20]
   b8798:	9301      	str	r3, [sp, #4]
   b879a:	bd08      	pop	{r3, pc}
   b879c:	0003024c 	.word	0x0003024c

000b87a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b87a0:	b508      	push	{r3, lr}
   b87a2:	4b02      	ldr	r3, [pc, #8]	; (b87ac <HAL_USB_USART_Receive_Data+0xc>)
   b87a4:	681b      	ldr	r3, [r3, #0]
   b87a6:	699b      	ldr	r3, [r3, #24]
   b87a8:	9301      	str	r3, [sp, #4]
   b87aa:	bd08      	pop	{r3, pc}
   b87ac:	0003024c 	.word	0x0003024c

000b87b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b87b0:	b508      	push	{r3, lr}
   b87b2:	4b02      	ldr	r3, [pc, #8]	; (b87bc <HAL_USB_USART_Send_Data+0xc>)
   b87b4:	681b      	ldr	r3, [r3, #0]
   b87b6:	69db      	ldr	r3, [r3, #28]
   b87b8:	9301      	str	r3, [sp, #4]
   b87ba:	bd08      	pop	{r3, pc}
   b87bc:	0003024c 	.word	0x0003024c

000b87c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b87c0:	b508      	push	{r3, lr}
   b87c2:	4b02      	ldr	r3, [pc, #8]	; (b87cc <HAL_USB_USART_Flush_Data+0xc>)
   b87c4:	681b      	ldr	r3, [r3, #0]
   b87c6:	6a1b      	ldr	r3, [r3, #32]
   b87c8:	9301      	str	r3, [sp, #4]
   b87ca:	bd08      	pop	{r3, pc}
   b87cc:	0003024c 	.word	0x0003024c

000b87d0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b87d0:	b508      	push	{r3, lr}
   b87d2:	4b02      	ldr	r3, [pc, #8]	; (b87dc <HAL_USB_USART_Is_Connected+0xc>)
   b87d4:	681b      	ldr	r3, [r3, #0]
   b87d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b87d8:	9301      	str	r3, [sp, #4]
   b87da:	bd08      	pop	{r3, pc}
   b87dc:	0003024c 	.word	0x0003024c

000b87e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b87e0:	b508      	push	{r3, lr}
   b87e2:	4b02      	ldr	r3, [pc, #8]	; (b87ec <panic_+0xc>)
   b87e4:	681b      	ldr	r3, [r3, #0]
   b87e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b87e8:	9301      	str	r3, [sp, #4]
   b87ea:	bd08      	pop	{r3, pc}
   b87ec:	00030260 	.word	0x00030260

000b87f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b87f0:	b508      	push	{r3, lr}
   b87f2:	4b02      	ldr	r3, [pc, #8]	; (b87fc <log_message+0xc>)
   b87f4:	681b      	ldr	r3, [r3, #0]
   b87f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b87f8:	9301      	str	r3, [sp, #4]
   b87fa:	bd08      	pop	{r3, pc}
   b87fc:	00030260 	.word	0x00030260

000b8800 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b8800:	b508      	push	{r3, lr}
   b8802:	4b02      	ldr	r3, [pc, #8]	; (b880c <log_message_v+0xc>)
   b8804:	681b      	ldr	r3, [r3, #0]
   b8806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8808:	9301      	str	r3, [sp, #4]
   b880a:	bd08      	pop	{r3, pc}
   b880c:	00030260 	.word	0x00030260

000b8810 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b8810:	b508      	push	{r3, lr}
   b8812:	4b02      	ldr	r3, [pc, #8]	; (b881c <log_level_name+0xc>)
   b8814:	681b      	ldr	r3, [r3, #0]
   b8816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b8818:	9301      	str	r3, [sp, #4]
   b881a:	bd08      	pop	{r3, pc}
   b881c:	00030260 	.word	0x00030260

000b8820 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b8820:	b508      	push	{r3, lr}
   b8822:	4b02      	ldr	r3, [pc, #8]	; (b882c <log_set_callbacks+0xc>)
   b8824:	681b      	ldr	r3, [r3, #0]
   b8826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8828:	9301      	str	r3, [sp, #4]
   b882a:	bd08      	pop	{r3, pc}
   b882c:	00030260 	.word	0x00030260

000b8830 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   b8830:	b508      	push	{r3, lr}
   b8832:	4b03      	ldr	r3, [pc, #12]	; (b8840 <diag_get_source+0x10>)
   b8834:	681b      	ldr	r3, [r3, #0]
   b8836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b883a:	9301      	str	r3, [sp, #4]
   b883c:	bd08      	pop	{r3, pc}
   b883e:	0000      	.short	0x0000
   b8840:	00030260 	.word	0x00030260

000b8844 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8844:	b508      	push	{r3, lr}
   b8846:	4b02      	ldr	r3, [pc, #8]	; (b8850 <system_mode+0xc>)
   b8848:	681b      	ldr	r3, [r3, #0]
   b884a:	681b      	ldr	r3, [r3, #0]
   b884c:	9301      	str	r3, [sp, #4]
   b884e:	bd08      	pop	{r3, pc}
   b8850:	00030220 	.word	0x00030220

000b8854 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8854:	b508      	push	{r3, lr}
   b8856:	4b02      	ldr	r3, [pc, #8]	; (b8860 <set_system_mode+0xc>)
   b8858:	681b      	ldr	r3, [r3, #0]
   b885a:	685b      	ldr	r3, [r3, #4]
   b885c:	9301      	str	r3, [sp, #4]
   b885e:	bd08      	pop	{r3, pc}
   b8860:	00030220 	.word	0x00030220

000b8864 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8864:	b508      	push	{r3, lr}
   b8866:	4b02      	ldr	r3, [pc, #8]	; (b8870 <system_delay_ms+0xc>)
   b8868:	681b      	ldr	r3, [r3, #0]
   b886a:	695b      	ldr	r3, [r3, #20]
   b886c:	9301      	str	r3, [sp, #4]
   b886e:	bd08      	pop	{r3, pc}
   b8870:	00030220 	.word	0x00030220

000b8874 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   b8874:	b508      	push	{r3, lr}
   b8876:	4b02      	ldr	r3, [pc, #8]	; (b8880 <system_subscribe_event+0xc>)
   b8878:	681b      	ldr	r3, [r3, #0]
   b887a:	6a1b      	ldr	r3, [r3, #32]
   b887c:	9301      	str	r3, [sp, #4]
   b887e:	bd08      	pop	{r3, pc}
   b8880:	00030220 	.word	0x00030220

000b8884 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b8884:	b508      	push	{r3, lr}
   b8886:	4b02      	ldr	r3, [pc, #8]	; (b8890 <system_thread_set_state+0xc>)
   b8888:	681b      	ldr	r3, [r3, #0]
   b888a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b888c:	9301      	str	r3, [sp, #4]
   b888e:	bd08      	pop	{r3, pc}
   b8890:	00030220 	.word	0x00030220

000b8894 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b8894:	b508      	push	{r3, lr}
   b8896:	4b02      	ldr	r3, [pc, #8]	; (b88a0 <system_thread_get_state+0xc>)
   b8898:	681b      	ldr	r3, [r3, #0]
   b889a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b889c:	9301      	str	r3, [sp, #4]
   b889e:	bd08      	pop	{r3, pc}
   b88a0:	00030220 	.word	0x00030220

000b88a4 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   b88a4:	b508      	push	{r3, lr}
   b88a6:	4b02      	ldr	r3, [pc, #8]	; (b88b0 <system_notify_time_changed+0xc>)
   b88a8:	681b      	ldr	r3, [r3, #0]
   b88aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b88ac:	9301      	str	r3, [sp, #4]
   b88ae:	bd08      	pop	{r3, pc}
   b88b0:	00030220 	.word	0x00030220

000b88b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b88b4:	b508      	push	{r3, lr}
   b88b6:	4b03      	ldr	r3, [pc, #12]	; (b88c4 <system_ctrl_set_app_request_handler+0x10>)
   b88b8:	681b      	ldr	r3, [r3, #0]
   b88ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b88be:	9301      	str	r3, [sp, #4]
   b88c0:	bd08      	pop	{r3, pc}
   b88c2:	0000      	.short	0x0000
   b88c4:	00030220 	.word	0x00030220

000b88c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b88c8:	b508      	push	{r3, lr}
   b88ca:	4b03      	ldr	r3, [pc, #12]	; (b88d8 <system_ctrl_set_result+0x10>)
   b88cc:	681b      	ldr	r3, [r3, #0]
   b88ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b88d2:	9301      	str	r3, [sp, #4]
   b88d4:	bd08      	pop	{r3, pc}
   b88d6:	0000      	.short	0x0000
   b88d8:	00030220 	.word	0x00030220

000b88dc <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   b88dc:	b508      	push	{r3, lr}
   b88de:	4b03      	ldr	r3, [pc, #12]	; (b88ec <system_power_management_set_config+0x10>)
   b88e0:	681b      	ldr	r3, [r3, #0]
   b88e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b88e6:	9301      	str	r3, [sp, #4]
   b88e8:	bd08      	pop	{r3, pc}
   b88ea:	0000      	.short	0x0000
   b88ec:	00030220 	.word	0x00030220

000b88f0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b88f0:	b508      	push	{r3, lr}
   b88f2:	4b03      	ldr	r3, [pc, #12]	; (b8900 <system_sleep_ext+0x10>)
   b88f4:	681b      	ldr	r3, [r3, #0]
   b88f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b88fa:	9301      	str	r3, [sp, #4]
   b88fc:	bd08      	pop	{r3, pc}
   b88fe:	0000      	.short	0x0000
   b8900:	00030220 	.word	0x00030220

000b8904 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   b8904:	b508      	push	{r3, lr}
   b8906:	4b03      	ldr	r3, [pc, #12]	; (b8914 <system_reset+0x10>)
   b8908:	681b      	ldr	r3, [r3, #0]
   b890a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   b890e:	9301      	str	r3, [sp, #4]
   b8910:	bd08      	pop	{r3, pc}
   b8912:	0000      	.short	0x0000
   b8914:	00030220 	.word	0x00030220

000b8918 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8918:	b508      	push	{r3, lr}
   b891a:	4b02      	ldr	r3, [pc, #8]	; (b8924 <spark_process+0xc>)
   b891c:	681b      	ldr	r3, [r3, #0]
   b891e:	689b      	ldr	r3, [r3, #8]
   b8920:	9301      	str	r3, [sp, #4]
   b8922:	bd08      	pop	{r3, pc}
   b8924:	00030244 	.word	0x00030244

000b8928 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8928:	b508      	push	{r3, lr}
   b892a:	4b02      	ldr	r3, [pc, #8]	; (b8934 <spark_cloud_flag_connected+0xc>)
   b892c:	681b      	ldr	r3, [r3, #0]
   b892e:	695b      	ldr	r3, [r3, #20]
   b8930:	9301      	str	r3, [sp, #4]
   b8932:	bd08      	pop	{r3, pc}
   b8934:	00030244 	.word	0x00030244

000b8938 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8938:	b508      	push	{r3, lr}
   b893a:	4b02      	ldr	r3, [pc, #8]	; (b8944 <spark_sync_time_pending+0xc>)
   b893c:	681b      	ldr	r3, [r3, #0]
   b893e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8940:	9301      	str	r3, [sp, #4]
   b8942:	bd08      	pop	{r3, pc}
   b8944:	00030244 	.word	0x00030244

000b8948 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   b8948:	b508      	push	{r3, lr}
   b894a:	4b02      	ldr	r3, [pc, #8]	; (b8954 <spark_sync_time_last+0xc>)
   b894c:	681b      	ldr	r3, [r3, #0]
   b894e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8950:	9301      	str	r3, [sp, #4]
   b8952:	bd08      	pop	{r3, pc}
   b8954:	00030244 	.word	0x00030244

000b8958 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8958:	b508      	push	{r3, lr}
   b895a:	4b02      	ldr	r3, [pc, #8]	; (b8964 <spark_set_random_seed_from_cloud_handler+0xc>)
   b895c:	681b      	ldr	r3, [r3, #0]
   b895e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8960:	9301      	str	r3, [sp, #4]
   b8962:	bd08      	pop	{r3, pc}
   b8964:	00030244 	.word	0x00030244

000b8968 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8968:	b508      	push	{r3, lr}
   b896a:	4b02      	ldr	r3, [pc, #8]	; (b8974 <network_connect+0xc>)
   b896c:	681b      	ldr	r3, [r3, #0]
   b896e:	685b      	ldr	r3, [r3, #4]
   b8970:	9301      	str	r3, [sp, #4]
   b8972:	bd08      	pop	{r3, pc}
   b8974:	00030240 	.word	0x00030240

000b8978 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8978:	b508      	push	{r3, lr}
   b897a:	4b02      	ldr	r3, [pc, #8]	; (b8984 <network_connecting+0xc>)
   b897c:	681b      	ldr	r3, [r3, #0]
   b897e:	689b      	ldr	r3, [r3, #8]
   b8980:	9301      	str	r3, [sp, #4]
   b8982:	bd08      	pop	{r3, pc}
   b8984:	00030240 	.word	0x00030240

000b8988 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8988:	b508      	push	{r3, lr}
   b898a:	4b02      	ldr	r3, [pc, #8]	; (b8994 <network_disconnect+0xc>)
   b898c:	681b      	ldr	r3, [r3, #0]
   b898e:	68db      	ldr	r3, [r3, #12]
   b8990:	9301      	str	r3, [sp, #4]
   b8992:	bd08      	pop	{r3, pc}
   b8994:	00030240 	.word	0x00030240

000b8998 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8998:	b508      	push	{r3, lr}
   b899a:	4b02      	ldr	r3, [pc, #8]	; (b89a4 <network_ready+0xc>)
   b899c:	681b      	ldr	r3, [r3, #0]
   b899e:	691b      	ldr	r3, [r3, #16]
   b89a0:	9301      	str	r3, [sp, #4]
   b89a2:	bd08      	pop	{r3, pc}
   b89a4:	00030240 	.word	0x00030240

000b89a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b89a8:	b508      	push	{r3, lr}
   b89aa:	4b02      	ldr	r3, [pc, #8]	; (b89b4 <network_on+0xc>)
   b89ac:	681b      	ldr	r3, [r3, #0]
   b89ae:	695b      	ldr	r3, [r3, #20]
   b89b0:	9301      	str	r3, [sp, #4]
   b89b2:	bd08      	pop	{r3, pc}
   b89b4:	00030240 	.word	0x00030240

000b89b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b89b8:	b508      	push	{r3, lr}
   b89ba:	4b02      	ldr	r3, [pc, #8]	; (b89c4 <network_off+0xc>)
   b89bc:	681b      	ldr	r3, [r3, #0]
   b89be:	699b      	ldr	r3, [r3, #24]
   b89c0:	9301      	str	r3, [sp, #4]
   b89c2:	bd08      	pop	{r3, pc}
   b89c4:	00030240 	.word	0x00030240

000b89c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b89c8:	b508      	push	{r3, lr}
   b89ca:	4b02      	ldr	r3, [pc, #8]	; (b89d4 <network_listen+0xc>)
   b89cc:	681b      	ldr	r3, [r3, #0]
   b89ce:	69db      	ldr	r3, [r3, #28]
   b89d0:	9301      	str	r3, [sp, #4]
   b89d2:	bd08      	pop	{r3, pc}
   b89d4:	00030240 	.word	0x00030240

000b89d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b89d8:	b508      	push	{r3, lr}
   b89da:	4b02      	ldr	r3, [pc, #8]	; (b89e4 <network_listening+0xc>)
   b89dc:	681b      	ldr	r3, [r3, #0]
   b89de:	6a1b      	ldr	r3, [r3, #32]
   b89e0:	9301      	str	r3, [sp, #4]
   b89e2:	bd08      	pop	{r3, pc}
   b89e4:	00030240 	.word	0x00030240

000b89e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b89e8:	b508      	push	{r3, lr}
   b89ea:	4b02      	ldr	r3, [pc, #8]	; (b89f4 <network_set_listen_timeout+0xc>)
   b89ec:	681b      	ldr	r3, [r3, #0]
   b89ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b89f0:	9301      	str	r3, [sp, #4]
   b89f2:	bd08      	pop	{r3, pc}
   b89f4:	00030240 	.word	0x00030240

000b89f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b89f8:	b508      	push	{r3, lr}
   b89fa:	4b02      	ldr	r3, [pc, #8]	; (b8a04 <network_get_listen_timeout+0xc>)
   b89fc:	681b      	ldr	r3, [r3, #0]
   b89fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8a00:	9301      	str	r3, [sp, #4]
   b8a02:	bd08      	pop	{r3, pc}
   b8a04:	00030240 	.word	0x00030240

000b8a08 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8a08:	b508      	push	{r3, lr}
   b8a0a:	4b02      	ldr	r3, [pc, #8]	; (b8a14 <network_is_on+0xc>)
   b8a0c:	681b      	ldr	r3, [r3, #0]
   b8a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8a10:	9301      	str	r3, [sp, #4]
   b8a12:	bd08      	pop	{r3, pc}
   b8a14:	00030240 	.word	0x00030240

000b8a18 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8a18:	b508      	push	{r3, lr}
   b8a1a:	4b02      	ldr	r3, [pc, #8]	; (b8a24 <network_is_off+0xc>)
   b8a1c:	681b      	ldr	r3, [r3, #0]
   b8a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8a20:	9301      	str	r3, [sp, #4]
   b8a22:	bd08      	pop	{r3, pc}
   b8a24:	00030240 	.word	0x00030240

000b8a28 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8a28:	b508      	push	{r3, lr}
   b8a2a:	4b02      	ldr	r3, [pc, #8]	; (b8a34 <malloc+0xc>)
   b8a2c:	681b      	ldr	r3, [r3, #0]
   b8a2e:	681b      	ldr	r3, [r3, #0]
   b8a30:	9301      	str	r3, [sp, #4]
   b8a32:	bd08      	pop	{r3, pc}
   b8a34:	0003021c 	.word	0x0003021c

000b8a38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8a38:	b508      	push	{r3, lr}
   b8a3a:	4b02      	ldr	r3, [pc, #8]	; (b8a44 <free+0xc>)
   b8a3c:	681b      	ldr	r3, [r3, #0]
   b8a3e:	685b      	ldr	r3, [r3, #4]
   b8a40:	9301      	str	r3, [sp, #4]
   b8a42:	bd08      	pop	{r3, pc}
   b8a44:	0003021c 	.word	0x0003021c

000b8a48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8a48:	b508      	push	{r3, lr}
   b8a4a:	4b02      	ldr	r3, [pc, #8]	; (b8a54 <realloc+0xc>)
   b8a4c:	681b      	ldr	r3, [r3, #0]
   b8a4e:	689b      	ldr	r3, [r3, #8]
   b8a50:	9301      	str	r3, [sp, #4]
   b8a52:	bd08      	pop	{r3, pc}
   b8a54:	0003021c 	.word	0x0003021c

000b8a58 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   b8a58:	b508      	push	{r3, lr}
   b8a5a:	4b02      	ldr	r3, [pc, #8]	; (b8a64 <siprintf+0xc>)
   b8a5c:	681b      	ldr	r3, [r3, #0]
   b8a5e:	691b      	ldr	r3, [r3, #16]
   b8a60:	9301      	str	r3, [sp, #4]
   b8a62:	bd08      	pop	{r3, pc}
   b8a64:	0003021c 	.word	0x0003021c

000b8a68 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8a68:	b508      	push	{r3, lr}
   b8a6a:	4b02      	ldr	r3, [pc, #8]	; (b8a74 <snprintf+0xc>)
   b8a6c:	681b      	ldr	r3, [r3, #0]
   b8a6e:	69db      	ldr	r3, [r3, #28]
   b8a70:	9301      	str	r3, [sp, #4]
   b8a72:	bd08      	pop	{r3, pc}
   b8a74:	0003021c 	.word	0x0003021c

000b8a78 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8a78:	b508      	push	{r3, lr}
   b8a7a:	4b02      	ldr	r3, [pc, #8]	; (b8a84 <vsnprintf+0xc>)
   b8a7c:	681b      	ldr	r3, [r3, #0]
   b8a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8a80:	9301      	str	r3, [sp, #4]
   b8a82:	bd08      	pop	{r3, pc}
   b8a84:	0003021c 	.word	0x0003021c

000b8a88 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8a88:	b508      	push	{r3, lr}
   b8a8a:	4b02      	ldr	r3, [pc, #8]	; (b8a94 <abort+0xc>)
   b8a8c:	681b      	ldr	r3, [r3, #0]
   b8a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8a90:	9301      	str	r3, [sp, #4]
   b8a92:	bd08      	pop	{r3, pc}
   b8a94:	0003021c 	.word	0x0003021c

000b8a98 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8a98:	b508      	push	{r3, lr}
   b8a9a:	4b02      	ldr	r3, [pc, #8]	; (b8aa4 <__errno+0xc>)
   b8a9c:	681b      	ldr	r3, [r3, #0]
   b8a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8aa0:	9301      	str	r3, [sp, #4]
   b8aa2:	bd08      	pop	{r3, pc}
   b8aa4:	0003021c 	.word	0x0003021c

000b8aa8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8aa8:	b508      	push	{r3, lr}
   b8aaa:	4b02      	ldr	r3, [pc, #8]	; (b8ab4 <__assert_func+0xc>)
   b8aac:	681b      	ldr	r3, [r3, #0]
   b8aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8ab0:	9301      	str	r3, [sp, #4]
   b8ab2:	bd08      	pop	{r3, pc}
   b8ab4:	0003021c 	.word	0x0003021c

000b8ab8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8ab8:	b508      	push	{r3, lr}
   b8aba:	4b02      	ldr	r3, [pc, #8]	; (b8ac4 <newlib_impure_ptr_callback+0xc>)
   b8abc:	681b      	ldr	r3, [r3, #0]
   b8abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ac0:	9301      	str	r3, [sp, #4]
   b8ac2:	bd08      	pop	{r3, pc}
   b8ac4:	0003021c 	.word	0x0003021c

000b8ac8 <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   b8ac8:	b508      	push	{r3, lr}
   b8aca:	4b02      	ldr	r3, [pc, #8]	; (b8ad4 <strftime+0xc>)
   b8acc:	681b      	ldr	r3, [r3, #0]
   b8ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b8ad0:	9301      	str	r3, [sp, #4]
   b8ad2:	bd08      	pop	{r3, pc}
   b8ad4:	0003021c 	.word	0x0003021c

000b8ad8 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8ad8:	b508      	push	{r3, lr}
   b8ada:	4b02      	ldr	r3, [pc, #8]	; (b8ae4 <localtime_r+0xc>)
   b8adc:	681b      	ldr	r3, [r3, #0]
   b8ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8ae0:	9301      	str	r3, [sp, #4]
   b8ae2:	bd08      	pop	{r3, pc}
   b8ae4:	0003021c 	.word	0x0003021c

000b8ae8 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8ae8:	b508      	push	{r3, lr}
   b8aea:	4b02      	ldr	r3, [pc, #8]	; (b8af4 <gmtime_r+0xc>)
   b8aec:	681b      	ldr	r3, [r3, #0]
   b8aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8af0:	9301      	str	r3, [sp, #4]
   b8af2:	bd08      	pop	{r3, pc}
   b8af4:	0003021c 	.word	0x0003021c

000b8af8 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   b8af8:	b508      	push	{r3, lr}
   b8afa:	4b02      	ldr	r3, [pc, #8]	; (b8b04 <mktime+0xc>)
   b8afc:	681b      	ldr	r3, [r3, #0]
   b8afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8b00:	9301      	str	r3, [sp, #4]
   b8b02:	bd08      	pop	{r3, pc}
   b8b04:	0003021c 	.word	0x0003021c

000b8b08 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b8b08:	2100      	movs	r1, #0
   b8b0a:	f7ff beab 	b.w	b8864 <system_delay_ms>

000b8b0e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b8b0e:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b8b10:	6843      	ldr	r3, [r0, #4]
   b8b12:	3b01      	subs	r3, #1
    {
   b8b14:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b8b16:	6043      	str	r3, [r0, #4]
   b8b18:	b963      	cbnz	r3, b8b34 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b8b1a:	6803      	ldr	r3, [r0, #0]
   b8b1c:	689b      	ldr	r3, [r3, #8]
   b8b1e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8b20:	68a3      	ldr	r3, [r4, #8]
   b8b22:	3b01      	subs	r3, #1
   b8b24:	60a3      	str	r3, [r4, #8]
   b8b26:	b92b      	cbnz	r3, b8b34 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b8b28:	6823      	ldr	r3, [r4, #0]
   b8b2a:	4620      	mov	r0, r4
   b8b2c:	68db      	ldr	r3, [r3, #12]
    }
   b8b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b8b32:	4718      	bx	r3
    }
   b8b34:	bd10      	pop	{r4, pc}

000b8b36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8b36:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8b38:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8b3c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b8b3e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8b42:	42ae      	cmp	r6, r5
   b8b44:	d004      	beq.n	b8b50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8b46:	4628      	mov	r0, r5
   b8b48:	f002 f800 	bl	bab4c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b8b4c:	3510      	adds	r5, #16
   b8b4e:	e7f8      	b.n	b8b42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8b50:	6820      	ldr	r0, [r4, #0]
   b8b52:	f7ff ff71 	bl	b8a38 <free>
    AllocatorT::free(data_);
}
   b8b56:	4620      	mov	r0, r4
   b8b58:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8b5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b8b5c:	4802      	ldr	r0, [pc, #8]	; (b8b68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8b5e:	2300      	movs	r3, #0
   b8b60:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b8b62:	f7ff bc2d 	b.w	b83c0 <os_mutex_recursive_create>
   b8b66:	bf00      	nop
   b8b68:	2003e610 	.word	0x2003e610

000b8b6c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b8b6c:	2200      	movs	r2, #0
   b8b6e:	6840      	ldr	r0, [r0, #4]
   b8b70:	4611      	mov	r1, r2
   b8b72:	f7ff bf11 	b.w	b8998 <network_ready>

000b8b76 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b8b76:	2200      	movs	r2, #0
   b8b78:	6840      	ldr	r0, [r0, #4]
   b8b7a:	4611      	mov	r1, r2
   b8b7c:	f7ff bf2c 	b.w	b89d8 <network_listening>

000b8b80 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8b80:	2200      	movs	r2, #0
   b8b82:	6840      	ldr	r0, [r0, #4]
   b8b84:	4611      	mov	r1, r2
   b8b86:	f7ff bf37 	b.w	b89f8 <network_get_listen_timeout>

000b8b8a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8b8a:	6840      	ldr	r0, [r0, #4]
   b8b8c:	2200      	movs	r2, #0
   b8b8e:	f7ff bf2b 	b.w	b89e8 <network_set_listen_timeout>

000b8b92 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8b92:	6840      	ldr	r0, [r0, #4]
   b8b94:	2200      	movs	r2, #0
   b8b96:	f081 0101 	eor.w	r1, r1, #1
   b8b9a:	f7ff bf15 	b.w	b89c8 <network_listen>

000b8b9e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8b9e:	2300      	movs	r3, #0
   b8ba0:	6840      	ldr	r0, [r0, #4]
   b8ba2:	461a      	mov	r2, r3
   b8ba4:	4619      	mov	r1, r3
   b8ba6:	f7ff bf07 	b.w	b89b8 <network_off>

000b8baa <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8baa:	2300      	movs	r3, #0
   b8bac:	6840      	ldr	r0, [r0, #4]
   b8bae:	461a      	mov	r2, r3
   b8bb0:	4619      	mov	r1, r3
   b8bb2:	f7ff bef9 	b.w	b89a8 <network_on>

000b8bb6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8bb6:	2200      	movs	r2, #0
   b8bb8:	6840      	ldr	r0, [r0, #4]
   b8bba:	4611      	mov	r1, r2
   b8bbc:	f7ff bedc 	b.w	b8978 <network_connecting>

000b8bc0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8bc0:	6840      	ldr	r0, [r0, #4]
   b8bc2:	2200      	movs	r2, #0
   b8bc4:	2102      	movs	r1, #2
   b8bc6:	f7ff bedf 	b.w	b8988 <network_disconnect>

000b8bca <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8bca:	2300      	movs	r3, #0
   b8bcc:	6840      	ldr	r0, [r0, #4]
   b8bce:	461a      	mov	r2, r3
   b8bd0:	f7ff beca 	b.w	b8968 <network_connect>

000b8bd4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   b8bd4:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   b8bd6:	4b13      	ldr	r3, [pc, #76]	; (b8c24 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   b8bd8:	6003      	str	r3, [r0, #0]
   b8bda:	2518      	movs	r5, #24
   b8bdc:	3330      	adds	r3, #48	; 0x30
   b8bde:	b086      	sub	sp, #24
   b8be0:	460e      	mov	r6, r1
   b8be2:	6043      	str	r3, [r0, #4]
   b8be4:	462a      	mov	r2, r5
   b8be6:	2100      	movs	r1, #0
   b8be8:	4604      	mov	r4, r0
   b8bea:	3008      	adds	r0, #8
   b8bec:	f003 fae2 	bl	bc1b4 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   b8bf0:	2200      	movs	r2, #0
   b8bf2:	6870      	ldr	r0, [r6, #4]
   b8bf4:	4611      	mov	r1, r2
   b8bf6:	f7ff fecf 	bl	b8998 <network_ready>
   b8bfa:	b178      	cbz	r0, b8c1c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   b8bfc:	2100      	movs	r1, #0
   b8bfe:	462a      	mov	r2, r5
   b8c00:	4668      	mov	r0, sp
   b8c02:	f003 fad7 	bl	bc1b4 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8c06:	4669      	mov	r1, sp
   b8c08:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   b8c0a:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   b8c0e:	f7ff fbcf 	bl	b83b0 <cellular_signal>
   b8c12:	b918      	cbnz	r0, b8c1c <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   b8c14:	4669      	mov	r1, sp
   b8c16:	4620      	mov	r0, r4
   b8c18:	f000 f8b8 	bl	b8d8c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   b8c1c:	4620      	mov	r0, r4
   b8c1e:	b006      	add	sp, #24
   b8c20:	bd70      	pop	{r4, r5, r6, pc}
   b8c22:	bf00      	nop
   b8c24:	000bd3a4 	.word	0x000bd3a4

000b8c28 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b8c28:	4b08      	ldr	r3, [pc, #32]	; (b8c4c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b8c2a:	b510      	push	{r4, lr}
   b8c2c:	2428      	movs	r4, #40	; 0x28
   b8c2e:	4622      	mov	r2, r4
   b8c30:	4618      	mov	r0, r3
   b8c32:	2100      	movs	r1, #0
   b8c34:	f003 fabe 	bl	bc1b4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8c38:	4b05      	ldr	r3, [pc, #20]	; (b8c50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b8c3a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b8c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8c40:	6042      	str	r2, [r0, #4]
   b8c42:	2204      	movs	r2, #4
   b8c44:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b8c46:	4a03      	ldr	r2, [pc, #12]	; (b8c54 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b8c48:	601a      	str	r2, [r3, #0]
   b8c4a:	bd10      	pop	{r4, pc}
   b8c4c:	2003e61c 	.word	0x2003e61c
   b8c50:	2003e614 	.word	0x2003e614
   b8c54:	000bd368 	.word	0x000bd368

000b8c58 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   b8c58:	4770      	bx	lr

000b8c5a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   b8c5a:	7b00      	ldrb	r0, [r0, #12]
   b8c5c:	4770      	bx	lr

000b8c5e <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8c5e:	7b03      	ldrb	r3, [r0, #12]
   b8c60:	b14b      	cbz	r3, b8c76 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   b8c62:	6903      	ldr	r3, [r0, #16]
   b8c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8c68:	d005      	beq.n	b8c76 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   b8c6a:	6980      	ldr	r0, [r0, #24]
   b8c6c:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   b8c70:	bf18      	it	ne
   b8c72:	2001      	movne	r0, #1
   b8c74:	4770      	bx	lr
   b8c76:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   b8c78:	4770      	bx	lr

000b8c7a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   b8c7a:	6803      	ldr	r3, [r0, #0]
   b8c7c:	6a1b      	ldr	r3, [r3, #32]
   b8c7e:	4718      	bx	r3

000b8c80 <_ZNK14CellularSignal7printToER5Print>:
{
   b8c80:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   b8c82:	6803      	ldr	r3, [r0, #0]
{
   b8c84:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   b8c86:	691b      	ldr	r3, [r3, #16]
{
   b8c88:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   b8c8a:	4798      	blx	r3
   b8c8c:	2102      	movs	r1, #2
   b8c8e:	4628      	mov	r0, r5
   b8c90:	f001 fe38 	bl	ba904 <_ZN5Print5printEfi>
    n += p.print(',');
   b8c94:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   b8c96:	4604      	mov	r4, r0
    n += p.print(',');
   b8c98:	4628      	mov	r0, r5
   b8c9a:	f001 fd3d 	bl	ba718 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   b8c9e:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   b8ca0:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   b8ca2:	699b      	ldr	r3, [r3, #24]
   b8ca4:	4630      	mov	r0, r6
   b8ca6:	4798      	blx	r3
   b8ca8:	2102      	movs	r1, #2
   b8caa:	4628      	mov	r0, r5
   b8cac:	f001 fe2a 	bl	ba904 <_ZN5Print5printEfi>
}
   b8cb0:	4420      	add	r0, r4
   b8cb2:	bd70      	pop	{r4, r5, r6, pc}

000b8cb4 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   b8cb4:	f1a0 0004 	sub.w	r0, r0, #4
   b8cb8:	f7ff bfe2 	b.w	b8c80 <_ZNK14CellularSignal7printToER5Print>

000b8cbc <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   b8cbc:	b510      	push	{r4, lr}
   b8cbe:	2120      	movs	r1, #32
   b8cc0:	4604      	mov	r4, r0
   b8cc2:	f7fb f9ec 	bl	b409e <_ZdlPvj>
   b8cc6:	4620      	mov	r0, r4
   b8cc8:	bd10      	pop	{r4, pc}
	...

000b8ccc <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   b8ccc:	7b03      	ldrb	r3, [r0, #12]
   b8cce:	b17b      	cbz	r3, b8cf0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   b8cd0:	6943      	ldr	r3, [r0, #20]
   b8cd2:	2b00      	cmp	r3, #0
   b8cd4:	db0c      	blt.n	b8cf0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   b8cd6:	ee07 3a90 	vmov	s15, r3
   b8cda:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8cf8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   b8cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8ce2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8ce6:	eddf 7a05 	vldr	s15, [pc, #20]	; b8cfc <_ZNK14CellularSignal11getStrengthEv+0x30>
   b8cea:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8cee:	4770      	bx	lr
    return -1.0f;
   b8cf0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8cf4:	4770      	bx	lr
   b8cf6:	bf00      	nop
   b8cf8:	477fff00 	.word	0x477fff00
   b8cfc:	42c80000 	.word	0x42c80000

000b8d00 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   b8d00:	7b03      	ldrb	r3, [r0, #12]
   b8d02:	b163      	cbz	r3, b8d1e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   b8d04:	6903      	ldr	r3, [r0, #16]
   b8d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8d0a:	d008      	beq.n	b8d1e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   b8d0c:	ee07 3a90 	vmov	s15, r3
   b8d10:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8d24 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   b8d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8d18:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8d1c:	4770      	bx	lr
    return 0.0f;
   b8d1e:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8d28 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   b8d22:	4770      	bx	lr
   b8d24:	42c80000 	.word	0x42c80000
   b8d28:	00000000 	.word	0x00000000

000b8d2c <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   b8d2c:	7b03      	ldrb	r3, [r0, #12]
   b8d2e:	b17b      	cbz	r3, b8d50 <_ZNK14CellularSignal10getQualityEv+0x24>
   b8d30:	69c3      	ldr	r3, [r0, #28]
   b8d32:	2b00      	cmp	r3, #0
   b8d34:	db0c      	blt.n	b8d50 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   b8d36:	ee07 3a90 	vmov	s15, r3
   b8d3a:	ed9f 7a07 	vldr	s14, [pc, #28]	; b8d58 <_ZNK14CellularSignal10getQualityEv+0x2c>
   b8d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8d42:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8d46:	eddf 7a05 	vldr	s15, [pc, #20]	; b8d5c <_ZNK14CellularSignal10getQualityEv+0x30>
   b8d4a:	ee20 0a27 	vmul.f32	s0, s0, s15
   b8d4e:	4770      	bx	lr
    return -1.0f;
   b8d50:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   b8d54:	4770      	bx	lr
   b8d56:	bf00      	nop
   b8d58:	477fff00 	.word	0x477fff00
   b8d5c:	42c80000 	.word	0x42c80000

000b8d60 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   b8d60:	7b03      	ldrb	r3, [r0, #12]
   b8d62:	b163      	cbz	r3, b8d7e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   b8d64:	6983      	ldr	r3, [r0, #24]
   b8d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   b8d6a:	d008      	beq.n	b8d7e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   b8d6c:	ee07 3a90 	vmov	s15, r3
   b8d70:	ed9f 7a04 	vldr	s14, [pc, #16]	; b8d84 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   b8d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b8d78:	ee87 0a87 	vdiv.f32	s0, s15, s14
   b8d7c:	4770      	bx	lr
    return 0.0f;
   b8d7e:	ed9f 0a02 	vldr	s0, [pc, #8]	; b8d88 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   b8d82:	4770      	bx	lr
   b8d84:	42c80000 	.word	0x42c80000
   b8d88:	00000000 	.word	0x00000000

000b8d8c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   b8d8c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   b8d8e:	460d      	mov	r5, r1
   b8d90:	f100 0408 	add.w	r4, r0, #8
   b8d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8d98:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8d9c:	e884 0003 	stmia.w	r4, {r0, r1}
}
   b8da0:	2001      	movs	r0, #1
   b8da2:	bd30      	pop	{r4, r5, pc}

000b8da4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8da4:	2200      	movs	r2, #0
   b8da6:	6840      	ldr	r0, [r0, #4]
   b8da8:	4611      	mov	r1, r2
   b8daa:	f7ff be15 	b.w	b89d8 <network_listening>

000b8dae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8dae:	2200      	movs	r2, #0
   b8db0:	6840      	ldr	r0, [r0, #4]
   b8db2:	4611      	mov	r1, r2
   b8db4:	f7ff be20 	b.w	b89f8 <network_get_listen_timeout>

000b8db8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8db8:	6840      	ldr	r0, [r0, #4]
   b8dba:	2200      	movs	r2, #0
   b8dbc:	f7ff be14 	b.w	b89e8 <network_set_listen_timeout>

000b8dc0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8dc0:	6840      	ldr	r0, [r0, #4]
   b8dc2:	2200      	movs	r2, #0
   b8dc4:	f081 0101 	eor.w	r1, r1, #1
   b8dc8:	f7ff bdfe 	b.w	b89c8 <network_listen>

000b8dcc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8dcc:	2300      	movs	r3, #0
   b8dce:	6840      	ldr	r0, [r0, #4]
   b8dd0:	461a      	mov	r2, r3
   b8dd2:	4619      	mov	r1, r3
   b8dd4:	f7ff bdf0 	b.w	b89b8 <network_off>

000b8dd8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8dd8:	2300      	movs	r3, #0
   b8dda:	6840      	ldr	r0, [r0, #4]
   b8ddc:	461a      	mov	r2, r3
   b8dde:	4619      	mov	r1, r3
   b8de0:	f7ff bde2 	b.w	b89a8 <network_on>

000b8de4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8de4:	2200      	movs	r2, #0
   b8de6:	6840      	ldr	r0, [r0, #4]
   b8de8:	4611      	mov	r1, r2
   b8dea:	f7ff bdd5 	b.w	b8998 <network_ready>

000b8dee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b8dee:	2200      	movs	r2, #0
   b8df0:	6840      	ldr	r0, [r0, #4]
   b8df2:	4611      	mov	r1, r2
   b8df4:	f7ff bdc0 	b.w	b8978 <network_connecting>

000b8df8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8df8:	6840      	ldr	r0, [r0, #4]
   b8dfa:	2200      	movs	r2, #0
   b8dfc:	2102      	movs	r1, #2
   b8dfe:	f7ff bdc3 	b.w	b8988 <network_disconnect>

000b8e02 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8e02:	2300      	movs	r3, #0
   b8e04:	6840      	ldr	r0, [r0, #4]
   b8e06:	461a      	mov	r2, r3
   b8e08:	f7ff bdae 	b.w	b8968 <network_connect>

000b8e0c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b8e0c:	4b02      	ldr	r3, [pc, #8]	; (b8e18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b8e0e:	2203      	movs	r2, #3
   b8e10:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b8e12:	4a02      	ldr	r2, [pc, #8]	; (b8e1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8e14:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8e16:	4770      	bx	lr
   b8e18:	2003e644 	.word	0x2003e644
   b8e1c:	000bd3e0 	.word	0x000bd3e0

000b8e20 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   b8e20:	6800      	ldr	r0, [r0, #0]
   b8e22:	f000 b8e7 	b.w	b8ff4 <_ZN7TwoWire4lockEv>

000b8e26 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   b8e26:	b510      	push	{r4, lr}
   b8e28:	4604      	mov	r4, r0
      lock_(_lock) {
   b8e2a:	6001      	str	r1, [r0, #0]
   b8e2c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   b8e2e:	b10a      	cbz	r2, b8e34 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   b8e30:	f7ff fff6 	bl	b8e20 <_ZN9FuelGauge4lockEv>
}
   b8e34:	4620      	mov	r0, r4
   b8e36:	bd10      	pop	{r4, pc}

000b8e38 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   b8e38:	b513      	push	{r0, r1, r4, lr}
   b8e3a:	4604      	mov	r4, r0
   b8e3c:	9101      	str	r1, [sp, #4]
            return &Wire1;
   b8e3e:	f002 fc1f 	bl	bb680 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   b8e42:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   b8e44:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   b8e46:	4620      	mov	r0, r4
   b8e48:	f7ff ffed 	bl	b8e26 <_ZN9FuelGaugeC1ER7TwoWireb>
}
   b8e4c:	4620      	mov	r0, r4
   b8e4e:	b002      	add	sp, #8
   b8e50:	bd10      	pop	{r4, pc}

000b8e52 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   b8e52:	6800      	ldr	r0, [r0, #0]
   b8e54:	f000 b8d7 	b.w	b9006 <_ZN7TwoWire6unlockEv>

000b8e58 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   b8e58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8e5c:	4604      	mov	r4, r0
   b8e5e:	461d      	mov	r5, r3
   b8e60:	460f      	mov	r7, r1
   b8e62:	4616      	mov	r6, r2
      { _M_device.lock(); }
   b8e64:	f7ff ffdc 	bl	b8e20 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8e68:	2236      	movs	r2, #54	; 0x36
   b8e6a:	2300      	movs	r3, #0
   b8e6c:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   b8e70:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   b8e72:	f04f 0801 	mov.w	r8, #1
   b8e76:	230a      	movs	r3, #10
   b8e78:	4669      	mov	r1, sp
   b8e7a:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b8e7e:	f000 f89d 	bl	b8fbc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   b8e82:	6820      	ldr	r0, [r4, #0]
   b8e84:	6803      	ldr	r3, [r0, #0]
   b8e86:	4639      	mov	r1, r7
   b8e88:	689b      	ldr	r3, [r3, #8]
   b8e8a:	4798      	blx	r3
    i2c_.write(MSB);
   b8e8c:	6820      	ldr	r0, [r4, #0]
   b8e8e:	6803      	ldr	r3, [r0, #0]
   b8e90:	4631      	mov	r1, r6
   b8e92:	689b      	ldr	r3, [r3, #8]
   b8e94:	4798      	blx	r3
    i2c_.write(LSB);
   b8e96:	6820      	ldr	r0, [r4, #0]
   b8e98:	6803      	ldr	r3, [r0, #0]
   b8e9a:	4629      	mov	r1, r5
   b8e9c:	689b      	ldr	r3, [r3, #8]
   b8e9e:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   b8ea0:	4641      	mov	r1, r8
   b8ea2:	6820      	ldr	r0, [r4, #0]
   b8ea4:	f000 f8a2 	bl	b8fec <_ZN7TwoWire15endTransmissionEh>
   b8ea8:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   b8eaa:	4620      	mov	r0, r4
   b8eac:	bf0c      	ite	eq
   b8eae:	2500      	moveq	r5, #0
   b8eb0:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   b8eb4:	f7ff ffcd 	bl	b8e52 <_ZN9FuelGauge6unlockEv>
}
   b8eb8:	4628      	mov	r0, r5
   b8eba:	b004      	add	sp, #16
   b8ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8ec0 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   b8ec0:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   b8ec2:	2240      	movs	r2, #64	; 0x40
   b8ec4:	2300      	movs	r3, #0
   b8ec6:	2106      	movs	r1, #6
   b8ec8:	f7ff ffc6 	bl	b8e58 <_ZN9FuelGauge13writeRegisterEhhh>
}
   b8ecc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b8ed0:	bd08      	pop	{r3, pc}

000b8ed2 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b8ed2:	4770      	bx	lr

000b8ed4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b8ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8ed6:	4606      	mov	r6, r0
   b8ed8:	4615      	mov	r5, r2
   b8eda:	460c      	mov	r4, r1
   b8edc:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8ede:	42bc      	cmp	r4, r7
   b8ee0:	d006      	beq.n	b8ef0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b8ee2:	6833      	ldr	r3, [r6, #0]
   b8ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
   b8ee8:	689b      	ldr	r3, [r3, #8]
   b8eea:	4630      	mov	r0, r6
   b8eec:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b8eee:	e7f6      	b.n	b8ede <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b8ef0:	4628      	mov	r0, r5
   b8ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8ef4 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b8ef4:	7c00      	ldrb	r0, [r0, #16]
   b8ef6:	2200      	movs	r2, #0
   b8ef8:	f7ff bb2a 	b.w	b8550 <hal_i2c_write>

000b8efc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b8efc:	7c00      	ldrb	r0, [r0, #16]
   b8efe:	2100      	movs	r1, #0
   b8f00:	f7ff bb2e 	b.w	b8560 <hal_i2c_available>

000b8f04 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b8f04:	7c00      	ldrb	r0, [r0, #16]
   b8f06:	2100      	movs	r1, #0
   b8f08:	f7ff bb32 	b.w	b8570 <hal_i2c_read>

000b8f0c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b8f0c:	7c00      	ldrb	r0, [r0, #16]
   b8f0e:	2100      	movs	r1, #0
   b8f10:	f7ff bb36 	b.w	b8580 <hal_i2c_peek>

000b8f14 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b8f14:	7c00      	ldrb	r0, [r0, #16]
   b8f16:	2100      	movs	r1, #0
   b8f18:	f7ff bb3a 	b.w	b8590 <hal_i2c_flush>

000b8f1c <_ZN7TwoWireD0Ev>:
   b8f1c:	b510      	push	{r4, lr}
   b8f1e:	2114      	movs	r1, #20
   b8f20:	4604      	mov	r4, r0
   b8f22:	f7fb f8bc 	bl	b409e <_ZdlPvj>
   b8f26:	4620      	mov	r0, r4
   b8f28:	bd10      	pop	{r4, pc}
	...

000b8f2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b8f2c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b8f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8f32:	4604      	mov	r4, r0
   b8f34:	4608      	mov	r0, r1
   b8f36:	2100      	movs	r1, #0
   b8f38:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8f3c:	4b03      	ldr	r3, [pc, #12]	; (b8f4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b8f3e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b8f40:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b8f42:	4611      	mov	r1, r2
   b8f44:	f7ff fb34 	bl	b85b0 <hal_i2c_init>
}
   b8f48:	4620      	mov	r0, r4
   b8f4a:	bd10      	pop	{r4, pc}
   b8f4c:	000bd41c 	.word	0x000bd41c

000b8f50 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8f50:	2300      	movs	r3, #0
   b8f52:	7c00      	ldrb	r0, [r0, #16]
   b8f54:	461a      	mov	r2, r3
   b8f56:	4619      	mov	r1, r3
   b8f58:	f7ff bae2 	b.w	b8520 <hal_i2c_begin>

000b8f5c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8f5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8f5e:	2200      	movs	r2, #0
   b8f60:	2314      	movs	r3, #20
   b8f62:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b8f66:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8f6a:	780b      	ldrb	r3, [r1, #0]
   b8f6c:	f88d 3008 	strb.w	r3, [sp, #8]
   b8f70:	684b      	ldr	r3, [r1, #4]
   b8f72:	9303      	str	r3, [sp, #12]
   b8f74:	68cb      	ldr	r3, [r1, #12]
   b8f76:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8f78:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8f7a:	7a0b      	ldrb	r3, [r1, #8]
   b8f7c:	9305      	str	r3, [sp, #20]
   b8f7e:	a901      	add	r1, sp, #4
   b8f80:	f7ff fb2e 	bl	b85e0 <hal_i2c_request_ex>
}
   b8f84:	b007      	add	sp, #28
   b8f86:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f8a <_ZN7TwoWire11requestFromEhjh>:
{
   b8f8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8f8c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8f8e:	f88d 1000 	strb.w	r1, [sp]
   b8f92:	f04f 0164 	mov.w	r1, #100	; 0x64
   b8f96:	9103      	str	r1, [sp, #12]
   b8f98:	bf18      	it	ne
   b8f9a:	2301      	movne	r3, #1
   b8f9c:	4669      	mov	r1, sp
    size_ = size;
   b8f9e:	9201      	str	r2, [sp, #4]
   b8fa0:	f88d 3008 	strb.w	r3, [sp, #8]
   b8fa4:	f7ff ffda 	bl	b8f5c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8fa8:	b005      	add	sp, #20
   b8faa:	f85d fb04 	ldr.w	pc, [sp], #4

000b8fae <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b8fae:	7c00      	ldrb	r0, [r0, #16]
   b8fb0:	2200      	movs	r2, #0
   b8fb2:	f7ff babd 	b.w	b8530 <hal_i2c_begin_transmission>

000b8fb6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b8fb6:	b2c9      	uxtb	r1, r1
   b8fb8:	f7ff bff9 	b.w	b8fae <_ZN7TwoWire17beginTransmissionEh>

000b8fbc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   b8fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8fbe:	2300      	movs	r3, #0
   b8fc0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   b8fc4:	684a      	ldr	r2, [r1, #4]
   b8fc6:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   b8fc8:	2314      	movs	r3, #20
    };
   b8fca:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   b8fcc:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   b8fd0:	780b      	ldrb	r3, [r1, #0]
    };
   b8fd2:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8fd4:	7a0a      	ldrb	r2, [r1, #8]
   b8fd6:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   b8fd8:	7c00      	ldrb	r0, [r0, #16]
    };
   b8fda:	f88d 3008 	strb.w	r3, [sp, #8]
   b8fde:	aa01      	add	r2, sp, #4
   b8fe0:	4619      	mov	r1, r3
   b8fe2:	f7ff faa5 	bl	b8530 <hal_i2c_begin_transmission>
}
   b8fe6:	b007      	add	sp, #28
   b8fe8:	f85d fb04 	ldr.w	pc, [sp], #4

000b8fec <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8fec:	7c00      	ldrb	r0, [r0, #16]
   b8fee:	2200      	movs	r2, #0
   b8ff0:	f7ff baa6 	b.w	b8540 <hal_i2c_end_transmission>

000b8ff4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   b8ff4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   b8ff6:	2100      	movs	r1, #0
   b8ff8:	7c00      	ldrb	r0, [r0, #16]
   b8ffa:	f7ff fae1 	bl	b85c0 <hal_i2c_lock>
}
   b8ffe:	fab0 f080 	clz	r0, r0
   b9002:	0940      	lsrs	r0, r0, #5
   b9004:	bd08      	pop	{r3, pc}

000b9006 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   b9006:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   b9008:	2100      	movs	r1, #0
   b900a:	7c00      	ldrb	r0, [r0, #16]
   b900c:	f7ff fae0 	bl	b85d0 <hal_i2c_unlock>
}
   b9010:	fab0 f080 	clz	r0, r0
   b9014:	0940      	lsrs	r0, r0, #5
   b9016:	bd08      	pop	{r3, pc}

000b9018 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b9018:	4700      	bx	r0
	...

000b901c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b901c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b9020:	2400      	movs	r4, #0
{
   b9022:	461d      	mov	r5, r3
   b9024:	460f      	mov	r7, r1
   b9026:	4690      	mov	r8, r2
   b9028:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b902a:	f7ff fa69 	bl	b8500 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b902e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9030:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b9034:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b9038:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b903c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b9040:	bfa2      	ittt	ge
   b9042:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b9046:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b904a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b904c:	4907      	ldr	r1, [pc, #28]	; (b906c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b904e:	9400      	str	r4, [sp, #0]
   b9050:	4643      	mov	r3, r8
   b9052:	463a      	mov	r2, r7
   b9054:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b9056:	bfa8      	it	ge
   b9058:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b905c:	f7ff fa48 	bl	b84f0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b9060:	fab0 f080 	clz	r0, r0
   b9064:	0940      	lsrs	r0, r0, #5
   b9066:	b004      	add	sp, #16
   b9068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b906c:	000b9019 	.word	0x000b9019

000b9070 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b9070:	4770      	bx	lr

000b9072 <_ZN9IPAddressD0Ev>:
   b9072:	b510      	push	{r4, lr}
   b9074:	2118      	movs	r1, #24
   b9076:	4604      	mov	r4, r0
   b9078:	f7fb f811 	bl	b409e <_ZdlPvj>
   b907c:	4620      	mov	r0, r4
   b907e:	bd10      	pop	{r4, pc}

000b9080 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b9080:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b9082:	7d03      	ldrb	r3, [r0, #20]
   b9084:	2b06      	cmp	r3, #6
{
   b9086:	b08d      	sub	sp, #52	; 0x34
   b9088:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b908a:	f100 0704 	add.w	r7, r0, #4
   b908e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b9092:	d012      	beq.n	b90ba <_ZNK9IPAddress7printToER5Print+0x3a>
   b9094:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b9098:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b909c:	220a      	movs	r2, #10
   b909e:	4630      	mov	r0, r6
   b90a0:	f001 fb49 	bl	ba736 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b90a4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b90a6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b90a8:	d019      	beq.n	b90de <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b90aa:	2c00      	cmp	r4, #0
   b90ac:	d0f4      	beq.n	b9098 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b90ae:	212e      	movs	r1, #46	; 0x2e
   b90b0:	4630      	mov	r0, r6
   b90b2:	f001 fb31 	bl	ba718 <_ZN5Print5printEc>
   b90b6:	4404      	add	r4, r0
   b90b8:	e7ee      	b.n	b9098 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b90ba:	232f      	movs	r3, #47	; 0x2f
   b90bc:	466a      	mov	r2, sp
   b90be:	4639      	mov	r1, r7
   b90c0:	200a      	movs	r0, #10
		buf[0] = 0;
   b90c2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b90c6:	f7ff fa93 	bl	b85f0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b90ca:	4668      	mov	r0, sp
   b90cc:	f003 f90f 	bl	bc2ee <strlen>
   b90d0:	6833      	ldr	r3, [r6, #0]
   b90d2:	4602      	mov	r2, r0
   b90d4:	68db      	ldr	r3, [r3, #12]
   b90d6:	4669      	mov	r1, sp
   b90d8:	4630      	mov	r0, r6
   b90da:	4798      	blx	r3
   b90dc:	4604      	mov	r4, r0
    }
    return n;
}
   b90de:	4620      	mov	r0, r4
   b90e0:	b00d      	add	sp, #52	; 0x34
   b90e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b90e4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b90e4:	b510      	push	{r4, lr}
   b90e6:	4b05      	ldr	r3, [pc, #20]	; (b90fc <_ZN9IPAddressC1Ev+0x18>)
   b90e8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b90ea:	2211      	movs	r2, #17
   b90ec:	f840 3b04 	str.w	r3, [r0], #4
   b90f0:	2100      	movs	r1, #0
   b90f2:	f003 f85f 	bl	bc1b4 <memset>
}
   b90f6:	4620      	mov	r0, r4
   b90f8:	bd10      	pop	{r4, pc}
   b90fa:	bf00      	nop
   b90fc:	000bd444 	.word	0x000bd444

000b9100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b9100:	4603      	mov	r3, r0
   b9102:	4a07      	ldr	r2, [pc, #28]	; (b9120 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b9104:	b510      	push	{r4, lr}
   b9106:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b910a:	f101 0210 	add.w	r2, r1, #16
   b910e:	f851 4b04 	ldr.w	r4, [r1], #4
   b9112:	f843 4b04 	str.w	r4, [r3], #4
   b9116:	4291      	cmp	r1, r2
   b9118:	d1f9      	bne.n	b910e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b911a:	780a      	ldrb	r2, [r1, #0]
   b911c:	701a      	strb	r2, [r3, #0]
}
   b911e:	bd10      	pop	{r4, pc}
   b9120:	000bd444 	.word	0x000bd444

000b9124 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b9124:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b9126:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b912a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b912e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b9132:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b9136:	2304      	movs	r3, #4
   b9138:	6041      	str	r1, [r0, #4]
   b913a:	7503      	strb	r3, [r0, #20]
}
   b913c:	bd10      	pop	{r4, pc}
	...

000b9140 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b9140:	b507      	push	{r0, r1, r2, lr}
   b9142:	4b06      	ldr	r3, [pc, #24]	; (b915c <_ZN9IPAddressC1EPKh+0x1c>)
   b9144:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b9146:	78cb      	ldrb	r3, [r1, #3]
   b9148:	9300      	str	r3, [sp, #0]
   b914a:	788b      	ldrb	r3, [r1, #2]
   b914c:	784a      	ldrb	r2, [r1, #1]
   b914e:	7809      	ldrb	r1, [r1, #0]
   b9150:	f7ff ffe8 	bl	b9124 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b9154:	b003      	add	sp, #12
   b9156:	f85d fb04 	ldr.w	pc, [sp], #4
   b915a:	bf00      	nop
   b915c:	000bd444 	.word	0x000bd444

000b9160 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b9160:	f100 0310 	add.w	r3, r0, #16
   b9164:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b9166:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b916a:	2901      	cmp	r1, #1
   b916c:	4618      	mov	r0, r3
   b916e:	d108      	bne.n	b9182 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b9170:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b9174:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b9178:	3a01      	subs	r2, #1
   b917a:	f103 0310 	add.w	r3, r3, #16
   b917e:	d1f2      	bne.n	b9166 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b9180:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b9182:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b9184:	bf04      	itt	eq
   b9186:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b918a:	1852      	addeq	r2, r2, r1
   b918c:	e7f4      	b.n	b9178 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b918e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b918e:	b40e      	push	{r1, r2, r3}
   b9190:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9192:	b088      	sub	sp, #32
   b9194:	af00      	add	r7, sp, #0
   b9196:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b919a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b919c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b91a0:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b91a2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b91a4:	462b      	mov	r3, r5
   b91a6:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b91a8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b91aa:	f7ff fc65 	bl	b8a78 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b91ae:	280f      	cmp	r0, #15
   b91b0:	687a      	ldr	r2, [r7, #4]
   b91b2:	d91a      	bls.n	b91ea <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b91b4:	f100 0308 	add.w	r3, r0, #8
   b91b8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b91bc:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b91be:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b91c2:	1c41      	adds	r1, r0, #1
   b91c4:	462b      	mov	r3, r5
   b91c6:	4668      	mov	r0, sp
        va_start(args, fmt);
   b91c8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b91ca:	f7ff fc55 	bl	b8a78 <vsnprintf>
        if (n > 0) {
   b91ce:	1e02      	subs	r2, r0, #0
   b91d0:	dd04      	ble.n	b91dc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b91d2:	6823      	ldr	r3, [r4, #0]
   b91d4:	4669      	mov	r1, sp
   b91d6:	689b      	ldr	r3, [r3, #8]
   b91d8:	4620      	mov	r0, r4
   b91da:	4798      	blx	r3
   b91dc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b91de:	3720      	adds	r7, #32
   b91e0:	46bd      	mov	sp, r7
   b91e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b91e6:	b003      	add	sp, #12
   b91e8:	4770      	bx	lr
    } else if (n > 0) {
   b91ea:	2800      	cmp	r0, #0
   b91ec:	d0f7      	beq.n	b91de <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b91ee:	6823      	ldr	r3, [r4, #0]
   b91f0:	4602      	mov	r2, r0
   b91f2:	689b      	ldr	r3, [r3, #8]
   b91f4:	f107 0110 	add.w	r1, r7, #16
   b91f8:	4620      	mov	r0, r4
   b91fa:	4798      	blx	r3
}
   b91fc:	e7ef      	b.n	b91de <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b91fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b91fe:	b538      	push	{r3, r4, r5, lr}
   b9200:	680b      	ldr	r3, [r1, #0]
   b9202:	6003      	str	r3, [r0, #0]
   b9204:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b9206:	6843      	ldr	r3, [r0, #4]
   b9208:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b920a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b920c:	d008      	beq.n	b9220 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b920e:	b115      	cbz	r5, b9216 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b9210:	686b      	ldr	r3, [r5, #4]
   b9212:	3301      	adds	r3, #1
   b9214:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b9216:	6860      	ldr	r0, [r4, #4]
   b9218:	b108      	cbz	r0, b921e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b921a:	f7ff fc78 	bl	b8b0e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b921e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b9220:	bd38      	pop	{r3, r4, r5, pc}

000b9222 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b9222:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b9224:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b9226:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b922a:	689b      	ldr	r3, [r3, #8]
   b922c:	2201      	movs	r2, #1
   b922e:	f10d 0107 	add.w	r1, sp, #7
   b9232:	4798      	blx	r3
}
   b9234:	b003      	add	sp, #12
   b9236:	f85d fb04 	ldr.w	pc, [sp], #4

000b923a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b923a:	460b      	mov	r3, r1
   b923c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b923e:	2200      	movs	r2, #0
   b9240:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b9242:	e9c0 2200 	strd	r2, r2, [r0]
   b9246:	4604      	mov	r4, r0
        t_ = t;
   b9248:	6083      	str	r3, [r0, #8]
    if (t) {
   b924a:	b90b      	cbnz	r3, b9250 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b924c:	4620      	mov	r0, r4
   b924e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b9250:	f7ff ffd5 	bl	b91fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b9254:	e7fa      	b.n	b924c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b9256 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b9256:	6883      	ldr	r3, [r0, #8]
   b9258:	b1eb      	cbz	r3, b9296 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b925a:	781a      	ldrb	r2, [r3, #0]
   b925c:	2a03      	cmp	r2, #3
   b925e:	d81a      	bhi.n	b9296 <_ZNK5spark9JSONValue4typeEv+0x40>
   b9260:	e8df f002 	tbb	[pc, r2]
   b9264:	1b021704 	.word	0x1b021704
   b9268:	2005      	movs	r0, #5
   b926a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b926c:	6802      	ldr	r2, [r0, #0]
   b926e:	685b      	ldr	r3, [r3, #4]
   b9270:	6852      	ldr	r2, [r2, #4]
   b9272:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b9274:	282d      	cmp	r0, #45	; 0x2d
   b9276:	d012      	beq.n	b929e <_ZNK5spark9JSONValue4typeEv+0x48>
   b9278:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b927c:	2b09      	cmp	r3, #9
   b927e:	d90e      	bls.n	b929e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b9280:	2874      	cmp	r0, #116	; 0x74
   b9282:	d00e      	beq.n	b92a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b9284:	2866      	cmp	r0, #102	; 0x66
   b9286:	d00c      	beq.n	b92a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b9288:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b928c:	4258      	negs	r0, r3
   b928e:	4158      	adcs	r0, r3
   b9290:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b9292:	2006      	movs	r0, #6
   b9294:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b9296:	2000      	movs	r0, #0
   b9298:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b929a:	2004      	movs	r0, #4
   b929c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b929e:	2003      	movs	r0, #3
   b92a0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b92a2:	2002      	movs	r0, #2
}
   b92a4:	4770      	bx	lr

000b92a6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b92a6:	b510      	push	{r4, lr}
   b92a8:	4604      	mov	r4, r0
    switch (type()) {
   b92aa:	f7ff ffd4 	bl	b9256 <_ZNK5spark9JSONValue4typeEv>
   b92ae:	2802      	cmp	r0, #2
   b92b0:	d00e      	beq.n	b92d0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b92b2:	1ec3      	subs	r3, r0, #3
   b92b4:	b2db      	uxtb	r3, r3
   b92b6:	2b01      	cmp	r3, #1
   b92b8:	d814      	bhi.n	b92e4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b92ba:	6822      	ldr	r2, [r4, #0]
   b92bc:	68a3      	ldr	r3, [r4, #8]
   b92be:	6850      	ldr	r0, [r2, #4]
   b92c0:	685b      	ldr	r3, [r3, #4]
}
   b92c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b92c6:	220a      	movs	r2, #10
   b92c8:	2100      	movs	r1, #0
   b92ca:	4418      	add	r0, r3
   b92cc:	f003 b8d4 	b.w	bc478 <strtol>
        const char* const s = d_->json + t_->start;
   b92d0:	6822      	ldr	r2, [r4, #0]
   b92d2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b92d4:	6852      	ldr	r2, [r2, #4]
   b92d6:	685b      	ldr	r3, [r3, #4]
   b92d8:	5cd0      	ldrb	r0, [r2, r3]
   b92da:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b92de:	4258      	negs	r0, r3
   b92e0:	4158      	adcs	r0, r3
}
   b92e2:	bd10      	pop	{r4, pc}
    switch (type()) {
   b92e4:	2000      	movs	r0, #0
   b92e6:	e7fc      	b.n	b92e2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b92e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b92e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b92ea:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b92ec:	e9c0 3300 	strd	r3, r3, [r0]
   b92f0:	4604      	mov	r4, r0
        n_(0) {
   b92f2:	480e      	ldr	r0, [pc, #56]	; (b932c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b92f4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b92f8:	b1a9      	cbz	r1, b9326 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b92fa:	780b      	ldrb	r3, [r1, #0]
   b92fc:	2b03      	cmp	r3, #3
   b92fe:	d006      	beq.n	b930e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b9300:	b98b      	cbnz	r3, b9326 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b9302:	6813      	ldr	r3, [r2, #0]
   b9304:	6858      	ldr	r0, [r3, #4]
   b9306:	684b      	ldr	r3, [r1, #4]
   b9308:	5cc3      	ldrb	r3, [r0, r3]
   b930a:	2b6e      	cmp	r3, #110	; 0x6e
   b930c:	d007      	beq.n	b931e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b930e:	6813      	ldr	r3, [r2, #0]
   b9310:	684d      	ldr	r5, [r1, #4]
   b9312:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b9314:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b9316:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b9318:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b931a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b931c:	60e3      	str	r3, [r4, #12]
   b931e:	4611      	mov	r1, r2
   b9320:	4620      	mov	r0, r4
   b9322:	f7ff ff6c 	bl	b91fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b9326:	4620      	mov	r0, r4
   b9328:	bd38      	pop	{r3, r4, r5, pc}
   b932a:	bf00      	nop
   b932c:	000bd4ad 	.word	0x000bd4ad

000b9330 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b9330:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b9332:	2500      	movs	r5, #0
   b9334:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b9336:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b933a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b933e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b9342:	4604      	mov	r4, r0
   b9344:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b9346:	b14b      	cbz	r3, b935c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b9348:	781a      	ldrb	r2, [r3, #0]
   b934a:	2a01      	cmp	r2, #1
   b934c:	d106      	bne.n	b935c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b934e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b9352:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b9354:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b9356:	6143      	str	r3, [r0, #20]
   b9358:	f7ff ff51 	bl	b91fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b935c:	4620      	mov	r0, r4
   b935e:	bd38      	pop	{r3, r4, r5, pc}

000b9360 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b9360:	b510      	push	{r4, lr}
    if (!n_) {
   b9362:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b9364:	4604      	mov	r4, r0
    if (!n_) {
   b9366:	b163      	cbz	r3, b9382 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b9368:	6880      	ldr	r0, [r0, #8]
   b936a:	60e0      	str	r0, [r4, #12]
    --n_;
   b936c:	3b01      	subs	r3, #1
    ++t_;
   b936e:	3010      	adds	r0, #16
   b9370:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b9372:	6120      	str	r0, [r4, #16]
    --n_;
   b9374:	6163      	str	r3, [r4, #20]
    if (n_) {
   b9376:	b113      	cbz	r3, b937e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b9378:	f7ff fef2 	bl	b9160 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b937c:	60a0      	str	r0, [r4, #8]
    return true;
   b937e:	2001      	movs	r0, #1
   b9380:	e000      	b.n	b9384 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b9382:	4618      	mov	r0, r3
}
   b9384:	bd10      	pop	{r4, pc}

000b9386 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b9386:	b510      	push	{r4, lr}
    write('}');
   b9388:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b938a:	4604      	mov	r4, r0
    write('}');
   b938c:	f7ff ff49 	bl	b9222 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b9390:	2301      	movs	r3, #1
   b9392:	7123      	strb	r3, [r4, #4]
}
   b9394:	4620      	mov	r0, r4
   b9396:	bd10      	pop	{r4, pc}

000b9398 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b9398:	b508      	push	{r3, lr}
    switch (state_) {
   b939a:	7903      	ldrb	r3, [r0, #4]
   b939c:	2b01      	cmp	r3, #1
   b939e:	d002      	beq.n	b93a6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b93a0:	2b02      	cmp	r3, #2
   b93a2:	d004      	beq.n	b93ae <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b93a4:	bd08      	pop	{r3, pc}
        write(',');
   b93a6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b93a8:	f7ff ff3b 	bl	b9222 <_ZN5spark10JSONWriter5writeEc>
}
   b93ac:	e7fa      	b.n	b93a4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b93ae:	213a      	movs	r1, #58	; 0x3a
   b93b0:	e7fa      	b.n	b93a8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b93b2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b93b2:	b510      	push	{r4, lr}
   b93b4:	4604      	mov	r4, r0
    writeSeparator();
   b93b6:	f7ff ffef 	bl	b9398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b93ba:	4620      	mov	r0, r4
   b93bc:	217b      	movs	r1, #123	; 0x7b
   b93be:	f7ff ff30 	bl	b9222 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b93c2:	2300      	movs	r3, #0
   b93c4:	7123      	strb	r3, [r4, #4]
}
   b93c6:	4620      	mov	r0, r4
   b93c8:	bd10      	pop	{r4, pc}
	...

000b93cc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b93cc:	b513      	push	{r0, r1, r4, lr}
   b93ce:	4604      	mov	r4, r0
   b93d0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b93d2:	f7ff ffe1 	bl	b9398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b93d6:	6823      	ldr	r3, [r4, #0]
   b93d8:	9a01      	ldr	r2, [sp, #4]
   b93da:	68db      	ldr	r3, [r3, #12]
   b93dc:	4903      	ldr	r1, [pc, #12]	; (b93ec <_ZN5spark10JSONWriter5valueEi+0x20>)
   b93de:	4620      	mov	r0, r4
   b93e0:	4798      	blx	r3
    state_ = NEXT;
   b93e2:	2301      	movs	r3, #1
}
   b93e4:	4620      	mov	r0, r4
    state_ = NEXT;
   b93e6:	7123      	strb	r3, [r4, #4]
}
   b93e8:	b002      	add	sp, #8
   b93ea:	bd10      	pop	{r4, pc}
   b93ec:	000bc604 	.word	0x000bc604

000b93f0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b93f0:	b513      	push	{r0, r1, r4, lr}
   b93f2:	4604      	mov	r4, r0
   b93f4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b93f6:	f7ff ffcf 	bl	b9398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b93fa:	6823      	ldr	r3, [r4, #0]
   b93fc:	9a01      	ldr	r2, [sp, #4]
   b93fe:	68db      	ldr	r3, [r3, #12]
   b9400:	4903      	ldr	r1, [pc, #12]	; (b9410 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b9402:	4620      	mov	r0, r4
   b9404:	4798      	blx	r3
    state_ = NEXT;
   b9406:	2301      	movs	r3, #1
}
   b9408:	4620      	mov	r0, r4
    state_ = NEXT;
   b940a:	7123      	strb	r3, [r4, #4]
}
   b940c:	b002      	add	sp, #8
   b940e:	bd10      	pop	{r4, pc}
   b9410:	000bcdf2 	.word	0x000bcdf2

000b9414 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b9414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9418:	460d      	mov	r5, r1
    write('"');
   b941a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b941c:	4690      	mov	r8, r2
   b941e:	4604      	mov	r4, r0
    write('"');
   b9420:	f7ff feff 	bl	b9222 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b9424:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b94cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b9428:	44a8      	add	r8, r5
    const char *s = str;
   b942a:	462f      	mov	r7, r5
    while (s != end) {
   b942c:	4547      	cmp	r7, r8
   b942e:	46ba      	mov	sl, r7
   b9430:	d03d      	beq.n	b94ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b9432:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b9436:	2e22      	cmp	r6, #34	; 0x22
   b9438:	d006      	beq.n	b9448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b943a:	2e5c      	cmp	r6, #92	; 0x5c
   b943c:	d004      	beq.n	b9448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b943e:	4630      	mov	r0, r6
   b9440:	f002 fe88 	bl	bc154 <isprint>
   b9444:	2800      	cmp	r0, #0
   b9446:	d1f1      	bne.n	b942c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b9448:	6823      	ldr	r3, [r4, #0]
   b944a:	ebaa 0205 	sub.w	r2, sl, r5
   b944e:	689b      	ldr	r3, [r3, #8]
   b9450:	4629      	mov	r1, r5
   b9452:	4620      	mov	r0, r4
   b9454:	4798      	blx	r3
            write('\\');
   b9456:	215c      	movs	r1, #92	; 0x5c
   b9458:	4620      	mov	r0, r4
   b945a:	f7ff fee2 	bl	b9222 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b945e:	2e0d      	cmp	r6, #13
   b9460:	d80a      	bhi.n	b9478 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b9462:	2e07      	cmp	r6, #7
   b9464:	d91c      	bls.n	b94a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b9466:	f1a6 0308 	sub.w	r3, r6, #8
   b946a:	2b05      	cmp	r3, #5
   b946c:	d818      	bhi.n	b94a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b946e:	e8df f003 	tbb	[pc, r3]
   b9472:	0f0d      	.short	0x0f0d
   b9474:	15131711 	.word	0x15131711
   b9478:	2e22      	cmp	r6, #34	; 0x22
   b947a:	d001      	beq.n	b9480 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b947c:	2e5c      	cmp	r6, #92	; 0x5c
   b947e:	d10f      	bne.n	b94a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b9480:	4631      	mov	r1, r6
                write('b');
   b9482:	4620      	mov	r0, r4
   b9484:	f7ff fecd 	bl	b9222 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b9488:	463d      	mov	r5, r7
    while (s != end) {
   b948a:	e7cf      	b.n	b942c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b948c:	2162      	movs	r1, #98	; 0x62
   b948e:	e7f8      	b.n	b9482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b9490:	2174      	movs	r1, #116	; 0x74
   b9492:	e7f6      	b.n	b9482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b9494:	216e      	movs	r1, #110	; 0x6e
   b9496:	e7f4      	b.n	b9482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b9498:	2166      	movs	r1, #102	; 0x66
   b949a:	e7f2      	b.n	b9482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b949c:	2172      	movs	r1, #114	; 0x72
   b949e:	e7f0      	b.n	b9482 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b94a0:	6823      	ldr	r3, [r4, #0]
   b94a2:	4632      	mov	r2, r6
   b94a4:	68db      	ldr	r3, [r3, #12]
   b94a6:	4649      	mov	r1, r9
   b94a8:	4620      	mov	r0, r4
   b94aa:	4798      	blx	r3
                break;
   b94ac:	e7ec      	b.n	b9488 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b94ae:	42bd      	cmp	r5, r7
   b94b0:	d005      	beq.n	b94be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b94b2:	6823      	ldr	r3, [r4, #0]
   b94b4:	1b7a      	subs	r2, r7, r5
   b94b6:	689b      	ldr	r3, [r3, #8]
   b94b8:	4629      	mov	r1, r5
   b94ba:	4620      	mov	r0, r4
   b94bc:	4798      	blx	r3
    }
    write('"');
   b94be:	2122      	movs	r1, #34	; 0x22
   b94c0:	4620      	mov	r0, r4
   b94c2:	f7ff feae 	bl	b9222 <_ZN5spark10JSONWriter5writeEc>
}
   b94c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b94ca:	bf00      	nop
   b94cc:	000bd450 	.word	0x000bd450

000b94d0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b94d0:	b513      	push	{r0, r1, r4, lr}
   b94d2:	4604      	mov	r4, r0
   b94d4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b94d8:	f7ff ff5e 	bl	b9398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b94dc:	4620      	mov	r0, r4
   b94de:	e9dd 2100 	ldrd	r2, r1, [sp]
   b94e2:	f7ff ff97 	bl	b9414 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b94e6:	2302      	movs	r3, #2
}
   b94e8:	4620      	mov	r0, r4
    state_ = VALUE;
   b94ea:	7123      	strb	r3, [r4, #4]
}
   b94ec:	b002      	add	sp, #8
   b94ee:	bd10      	pop	{r4, pc}

000b94f0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b94f0:	b513      	push	{r0, r1, r4, lr}
   b94f2:	4604      	mov	r4, r0
   b94f4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b94f8:	f7ff ff4e 	bl	b9398 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b94fc:	4620      	mov	r0, r4
   b94fe:	e9dd 2100 	ldrd	r2, r1, [sp]
   b9502:	f7ff ff87 	bl	b9414 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b9506:	2301      	movs	r3, #1
}
   b9508:	4620      	mov	r0, r4
    state_ = NEXT;
   b950a:	7123      	strb	r3, [r4, #4]
}
   b950c:	b002      	add	sp, #8
   b950e:	bd10      	pop	{r4, pc}

000b9510 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b9510:	6880      	ldr	r0, [r0, #8]
   b9512:	6803      	ldr	r3, [r0, #0]
   b9514:	68db      	ldr	r3, [r3, #12]
   b9516:	4718      	bx	r3

000b9518 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b9518:	4770      	bx	lr

000b951a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b951a:	4608      	mov	r0, r1
   b951c:	b111      	cbz	r1, b9524 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b951e:	680b      	ldr	r3, [r1, #0]
   b9520:	685b      	ldr	r3, [r3, #4]
   b9522:	4718      	bx	r3
}
   b9524:	4770      	bx	lr

000b9526 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b9526:	4770      	bx	lr

000b9528 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b9528:	4770      	bx	lr

000b952a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b952a:	4770      	bx	lr

000b952c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b952c:	4770      	bx	lr

000b952e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b952e:	b538      	push	{r3, r4, r5, lr}
   b9530:	4604      	mov	r4, r0
   b9532:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b9534:	6800      	ldr	r0, [r0, #0]
   b9536:	212e      	movs	r1, #46	; 0x2e
   b9538:	f002 febd 	bl	bc2b6 <strchrnul>
    size = s - category;
   b953c:	6823      	ldr	r3, [r4, #0]
   b953e:	1ac3      	subs	r3, r0, r3
   b9540:	602b      	str	r3, [r5, #0]
    if (size) {
   b9542:	b123      	cbz	r3, b954e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b9544:	7803      	ldrb	r3, [r0, #0]
   b9546:	b103      	cbz	r3, b954a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b9548:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b954a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b954c:	6020      	str	r0, [r4, #0]
}
   b954e:	4618      	mov	r0, r3
   b9550:	bd38      	pop	{r3, r4, r5, pc}

000b9552 <_ZN5spark16JSONStreamWriterD0Ev>:
   b9552:	b510      	push	{r4, lr}
   b9554:	210c      	movs	r1, #12
   b9556:	4604      	mov	r4, r0
   b9558:	f7fa fda1 	bl	b409e <_ZdlPvj>
   b955c:	4620      	mov	r0, r4
   b955e:	bd10      	pop	{r4, pc}

000b9560 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b9560:	b510      	push	{r4, lr}
   b9562:	2104      	movs	r1, #4
   b9564:	4604      	mov	r4, r0
   b9566:	f7fa fd9a 	bl	b409e <_ZdlPvj>
   b956a:	4620      	mov	r0, r4
   b956c:	bd10      	pop	{r4, pc}

000b956e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b956e:	b510      	push	{r4, lr}
   b9570:	2104      	movs	r1, #4
   b9572:	4604      	mov	r4, r0
   b9574:	f7fa fd93 	bl	b409e <_ZdlPvj>
   b9578:	4620      	mov	r0, r4
   b957a:	bd10      	pop	{r4, pc}

000b957c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b957c:	f7fe bf30 	b.w	b83e0 <os_mutex_recursive_lock>

000b9580 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b9580:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b9582:	f002 fea2 	bl	bc2ca <strcmp>
}
   b9586:	fab0 f080 	clz	r0, r0
   b958a:	0940      	lsrs	r0, r0, #5
   b958c:	bd08      	pop	{r3, pc}

000b958e <__tcf_1>:
   b958e:	4770      	bx	lr

000b9590 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b9590:	b510      	push	{r4, lr}
   b9592:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b9594:	f001 feb6 	bl	bb304 <_Z16_fetch_usbserialv>
   b9598:	4284      	cmp	r4, r0
   b959a:	d010      	beq.n	b95be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b959c:	f002 f8b0 	bl	bb700 <_Z22__fetch_global_Serial1v>
   b95a0:	4284      	cmp	r4, r0
   b95a2:	d105      	bne.n	b95b0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b95a4:	f002 f8ac 	bl	bb700 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b95a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b95ac:	f001 be43 	b.w	bb236 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b95b0:	b12c      	cbz	r4, b95be <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b95b2:	6823      	ldr	r3, [r4, #0]
   b95b4:	4620      	mov	r0, r4
   b95b6:	685b      	ldr	r3, [r3, #4]
}
   b95b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b95bc:	4718      	bx	r3
   b95be:	bd10      	pop	{r4, pc}

000b95c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b95c0:	680b      	ldr	r3, [r1, #0]
   b95c2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b95c4:	684b      	ldr	r3, [r1, #4]
   b95c6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b95c8:	b113      	cbz	r3, b95d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b95ca:	685a      	ldr	r2, [r3, #4]
   b95cc:	3201      	adds	r2, #1
   b95ce:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b95d0:	4770      	bx	lr

000b95d2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b95d2:	b513      	push	{r0, r1, r4, lr}
   b95d4:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b95d6:	4608      	mov	r0, r1
   b95d8:	9101      	str	r1, [sp, #4]
   b95da:	f002 fe88 	bl	bc2ee <strlen>
   b95de:	9901      	ldr	r1, [sp, #4]
   b95e0:	4602      	mov	r2, r0
   b95e2:	4620      	mov	r0, r4
}
   b95e4:	b002      	add	sp, #8
   b95e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b95ea:	f7ff bf81 	b.w	b94f0 <_ZN5spark10JSONWriter5valueEPKcj>

000b95ee <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b95ee:	b513      	push	{r0, r1, r4, lr}
   b95f0:	4604      	mov	r4, r0
    write(str, strlen(str));
   b95f2:	4608      	mov	r0, r1
   b95f4:	9101      	str	r1, [sp, #4]
   b95f6:	f002 fe7a 	bl	bc2ee <strlen>
   b95fa:	6823      	ldr	r3, [r4, #0]
   b95fc:	9901      	ldr	r1, [sp, #4]
   b95fe:	68db      	ldr	r3, [r3, #12]
   b9600:	4602      	mov	r2, r0
   b9602:	4620      	mov	r0, r4
}
   b9604:	b002      	add	sp, #8
   b9606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b960a:	4718      	bx	r3

000b960c <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b960c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b960e:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b9610:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b9614:	68db      	ldr	r3, [r3, #12]
   b9616:	2201      	movs	r2, #1
   b9618:	f10d 0107 	add.w	r1, sp, #7
   b961c:	4798      	blx	r3
}
   b961e:	b003      	add	sp, #12
   b9620:	f85d fb04 	ldr.w	pc, [sp], #4

000b9624 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b9624:	b40e      	push	{r1, r2, r3}
   b9626:	b503      	push	{r0, r1, lr}
   b9628:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b962a:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b962c:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b9630:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b9632:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b9634:	f001 f975 	bl	ba922 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b9638:	b002      	add	sp, #8
   b963a:	f85d eb04 	ldr.w	lr, [sp], #4
   b963e:	b003      	add	sp, #12
   b9640:	4770      	bx	lr

000b9642 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b9642:	680a      	ldr	r2, [r1, #0]
   b9644:	6002      	str	r2, [r0, #0]
   b9646:	684a      	ldr	r2, [r1, #4]
   b9648:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b964a:	2200      	movs	r2, #0
   b964c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9650:	b510      	push	{r4, lr}
   b9652:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9654:	688c      	ldr	r4, [r1, #8]
   b9656:	6084      	str	r4, [r0, #8]
   b9658:	68cc      	ldr	r4, [r1, #12]
   b965a:	60c4      	str	r4, [r0, #12]
   b965c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b965e:	608a      	str	r2, [r1, #8]
   b9660:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9662:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b9664:	610a      	str	r2, [r1, #16]
   b9666:	bd10      	pop	{r4, pc}

000b9668 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b9668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b966c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b9670:	f04f 0a14 	mov.w	sl, #20
   b9674:	9300      	str	r3, [sp, #0]
   b9676:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b967a:	4b18      	ldr	r3, [pc, #96]	; (b96dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b967c:	10a4      	asrs	r4, r4, #2
   b967e:	4617      	mov	r7, r2
   b9680:	435c      	muls	r4, r3
   b9682:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b9684:	2c00      	cmp	r4, #0
   b9686:	dd21      	ble.n	b96cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b9688:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b968a:	fb0a f006 	mul.w	r0, sl, r6
   b968e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b9692:	463a      	mov	r2, r7
   b9694:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b9698:	5828      	ldr	r0, [r5, r0]
   b969a:	9101      	str	r1, [sp, #4]
   b969c:	455f      	cmp	r7, fp
   b969e:	bf28      	it	cs
   b96a0:	465a      	movcs	r2, fp
   b96a2:	f002 fe2c 	bl	bc2fe <strncmp>
                if (cmp == 0) {
   b96a6:	2800      	cmp	r0, #0
   b96a8:	9901      	ldr	r1, [sp, #4]
   b96aa:	f04f 0301 	mov.w	r3, #1
   b96ae:	d10b      	bne.n	b96c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b96b0:	455f      	cmp	r7, fp
   b96b2:	d103      	bne.n	b96bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b96b4:	9a00      	ldr	r2, [sp, #0]
   b96b6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b96b8:	4634      	mov	r4, r6
   b96ba:	e7e3      	b.n	b9684 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b96bc:	d9fc      	bls.n	b96b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b96be:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b96c0:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b96c4:	3e01      	subs	r6, #1
   b96c6:	e7f7      	b.n	b96b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b96c8:	dbf9      	blt.n	b96be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b96ca:	e7f5      	b.n	b96b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b96cc:	eba5 0508 	sub.w	r5, r5, r8
}
   b96d0:	4802      	ldr	r0, [pc, #8]	; (b96dc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b96d2:	10ad      	asrs	r5, r5, #2
   b96d4:	4368      	muls	r0, r5
   b96d6:	b003      	add	sp, #12
   b96d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b96dc:	cccccccd 	.word	0xcccccccd

000b96e0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b96e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b96e2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b96e4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b96e6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b96e8:	b303      	cbz	r3, b972c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b96ea:	b1f9      	cbz	r1, b972c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b96ec:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b96ee:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b96f2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b96f4:	a903      	add	r1, sp, #12
   b96f6:	a801      	add	r0, sp, #4
   b96f8:	f7ff ff19 	bl	b952e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b96fc:	4601      	mov	r1, r0
   b96fe:	b1a8      	cbz	r0, b972c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b9700:	f10d 030b 	add.w	r3, sp, #11
   b9704:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b9706:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b970a:	4620      	mov	r0, r4
   b970c:	f7ff ffac 	bl	b9668 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b9710:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b9714:	b153      	cbz	r3, b972c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b9716:	6823      	ldr	r3, [r4, #0]
   b9718:	2414      	movs	r4, #20
   b971a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b971e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b9720:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b9724:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b9726:	bfa8      	it	ge
   b9728:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b972a:	e7e3      	b.n	b96f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b972c:	4628      	mov	r0, r5
   b972e:	b004      	add	sp, #16
   b9730:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9734 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b9734:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b9736:	4c09      	ldr	r4, [pc, #36]	; (b975c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b9738:	7823      	ldrb	r3, [r4, #0]
   b973a:	f3bf 8f5b 	dmb	ish
   b973e:	07db      	lsls	r3, r3, #31
   b9740:	d409      	bmi.n	b9756 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b9742:	4620      	mov	r0, r4
   b9744:	f7fa fcba 	bl	b40bc <__cxa_guard_acquire>
   b9748:	b128      	cbz	r0, b9756 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b974a:	4620      	mov	r0, r4
   b974c:	f7fa fcbb 	bl	b40c6 <__cxa_guard_release>
   b9750:	4803      	ldr	r0, [pc, #12]	; (b9760 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b9752:	f002 fcdb 	bl	bc10c <atexit>
}
   b9756:	4803      	ldr	r0, [pc, #12]	; (b9764 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b9758:	bd10      	pop	{r4, pc}
   b975a:	bf00      	nop
   b975c:	2003e650 	.word	0x2003e650
   b9760:	000b9527 	.word	0x000b9527
   b9764:	2003dec4 	.word	0x2003dec4

000b9768 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b9768:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b976a:	4c09      	ldr	r4, [pc, #36]	; (b9790 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b976c:	7823      	ldrb	r3, [r4, #0]
   b976e:	f3bf 8f5b 	dmb	ish
   b9772:	07db      	lsls	r3, r3, #31
   b9774:	d409      	bmi.n	b978a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b9776:	4620      	mov	r0, r4
   b9778:	f7fa fca0 	bl	b40bc <__cxa_guard_acquire>
   b977c:	b128      	cbz	r0, b978a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b977e:	4620      	mov	r0, r4
   b9780:	f7fa fca1 	bl	b40c6 <__cxa_guard_release>
   b9784:	4803      	ldr	r0, [pc, #12]	; (b9794 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b9786:	f002 fcc1 	bl	bc10c <atexit>
    return &factory;
}
   b978a:	4803      	ldr	r0, [pc, #12]	; (b9798 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b978c:	bd10      	pop	{r4, pc}
   b978e:	bf00      	nop
   b9790:	2003e654 	.word	0x2003e654
   b9794:	000b958f 	.word	0x000b958f
   b9798:	2003dec8 	.word	0x2003dec8

000b979c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b979c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b979e:	2500      	movs	r5, #0
   b97a0:	4604      	mov	r4, r0
   b97a2:	e9c0 5500 	strd	r5, r5, [r0]
   b97a6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b97aa:	6085      	str	r5, [r0, #8]
   b97ac:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b97ae:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b97b2:	f7fe fe05 	bl	b83c0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b97b6:	f7ff ffbd 	bl	b9734 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b97ba:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b97bc:	f7ff ffd4 	bl	b9768 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b97c0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b97c2:	6220      	str	r0, [r4, #32]
}
   b97c4:	4620      	mov	r0, r4
   b97c6:	bd38      	pop	{r3, r4, r5, pc}

000b97c8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b97c8:	b510      	push	{r4, lr}
    static LogManager mgr;
   b97ca:	4c0a      	ldr	r4, [pc, #40]	; (b97f4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b97cc:	7823      	ldrb	r3, [r4, #0]
   b97ce:	f3bf 8f5b 	dmb	ish
   b97d2:	07db      	lsls	r3, r3, #31
   b97d4:	d40c      	bmi.n	b97f0 <_ZN5spark10LogManager8instanceEv+0x28>
   b97d6:	4620      	mov	r0, r4
   b97d8:	f7fa fc70 	bl	b40bc <__cxa_guard_acquire>
   b97dc:	b140      	cbz	r0, b97f0 <_ZN5spark10LogManager8instanceEv+0x28>
   b97de:	4806      	ldr	r0, [pc, #24]	; (b97f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b97e0:	f7ff ffdc 	bl	b979c <_ZN5spark10LogManagerC1Ev>
   b97e4:	4620      	mov	r0, r4
   b97e6:	f7fa fc6e 	bl	b40c6 <__cxa_guard_release>
   b97ea:	4804      	ldr	r0, [pc, #16]	; (b97fc <_ZN5spark10LogManager8instanceEv+0x34>)
   b97ec:	f002 fc8e 	bl	bc10c <atexit>
    return &mgr;
}
   b97f0:	4801      	ldr	r0, [pc, #4]	; (b97f8 <_ZN5spark10LogManager8instanceEv+0x30>)
   b97f2:	bd10      	pop	{r4, pc}
   b97f4:	2003e64c 	.word	0x2003e64c
   b97f8:	2003e65c 	.word	0x2003e65c
   b97fc:	000b9d1d 	.word	0x000b9d1d

000b9800 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b9800:	4a02      	ldr	r2, [pc, #8]	; (b980c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b9802:	4903      	ldr	r1, [pc, #12]	; (b9810 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b9804:	4803      	ldr	r0, [pc, #12]	; (b9814 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b9806:	2300      	movs	r3, #0
   b9808:	f7ff b80a 	b.w	b8820 <log_set_callbacks>
   b980c:	000b9b01 	.word	0x000b9b01
   b9810:	000b9a8d 	.word	0x000b9a8d
   b9814:	000b9a0d 	.word	0x000b9a0d

000b9818 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b9818:	2300      	movs	r3, #0
   b981a:	461a      	mov	r2, r3
   b981c:	4619      	mov	r1, r3
   b981e:	4618      	mov	r0, r3
   b9820:	f7fe bffe 	b.w	b8820 <log_set_callbacks>

000b9824 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9824:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9826:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9828:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b982a:	4668      	mov	r0, sp
   b982c:	f7ff fec8 	bl	b95c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9830:	466a      	mov	r2, sp
   b9832:	4629      	mov	r1, r5
   b9834:	4620      	mov	r0, r4
   b9836:	f7ff fd7b 	bl	b9330 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b983a:	a801      	add	r0, sp, #4
   b983c:	f7fb ffea 	bl	b5814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9840:	4620      	mov	r0, r4
   b9842:	b003      	add	sp, #12
   b9844:	bd30      	pop	{r4, r5, pc}

000b9846 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9846:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9848:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b984a:	4604      	mov	r4, r0
   b984c:	4668      	mov	r0, sp
   b984e:	f7ff feb7 	bl	b95c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9852:	466a      	mov	r2, sp
   b9854:	4629      	mov	r1, r5
   b9856:	4620      	mov	r0, r4
   b9858:	f7ff fd46 	bl	b92e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b985c:	a801      	add	r0, sp, #4
   b985e:	f7fb ffd9 	bl	b5814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9862:	4620      	mov	r0, r4
   b9864:	b003      	add	sp, #12
   b9866:	bd30      	pop	{r4, r5, pc}

000b9868 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9868:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b986a:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b986c:	4604      	mov	r4, r0
   b986e:	4668      	mov	r0, sp
   b9870:	f7ff fea6 	bl	b95c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9874:	466a      	mov	r2, sp
   b9876:	4629      	mov	r1, r5
   b9878:	4620      	mov	r0, r4
   b987a:	f7ff fcde 	bl	b923a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b987e:	a801      	add	r0, sp, #4
   b9880:	f7fb ffc8 	bl	b5814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9884:	4620      	mov	r0, r4
   b9886:	b003      	add	sp, #12
   b9888:	bd30      	pop	{r4, r5, pc}
	...

000b988c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b988c:	b570      	push	{r4, r5, r6, lr}
   b988e:	b08a      	sub	sp, #40	; 0x28
   b9890:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b9892:	4601      	mov	r1, r0
   b9894:	a804      	add	r0, sp, #16
   b9896:	f7ff ffc5 	bl	b9824 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b989a:	4e14      	ldr	r6, [pc, #80]	; (b98ec <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b989c:	a804      	add	r0, sp, #16
   b989e:	f7ff fd5f 	bl	b9360 <_ZN5spark18JSONObjectIterator4nextEv>
   b98a2:	b1e8      	cbz	r0, b98e0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b98a4:	a904      	add	r1, sp, #16
   b98a6:	4668      	mov	r0, sp
   b98a8:	f7ff ffcd 	bl	b9846 <_ZNK5spark18JSONObjectIterator4nameEv>
   b98ac:	9802      	ldr	r0, [sp, #8]
   b98ae:	4631      	mov	r1, r6
   b98b0:	f7ff fe66 	bl	b9580 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b98b4:	4604      	mov	r4, r0
   b98b6:	b110      	cbz	r0, b98be <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b98b8:	1e2c      	subs	r4, r5, #0
   b98ba:	bf18      	it	ne
   b98bc:	2401      	movne	r4, #1
   b98be:	a801      	add	r0, sp, #4
   b98c0:	f7fb ffa8 	bl	b5814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98c4:	2c00      	cmp	r4, #0
   b98c6:	d0e9      	beq.n	b989c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b98c8:	a904      	add	r1, sp, #16
   b98ca:	4668      	mov	r0, sp
   b98cc:	f7ff ffcc 	bl	b9868 <_ZNK5spark18JSONObjectIterator5valueEv>
   b98d0:	4668      	mov	r0, sp
   b98d2:	f7ff fce8 	bl	b92a6 <_ZNK5spark9JSONValue5toIntEv>
   b98d6:	6028      	str	r0, [r5, #0]
   b98d8:	a801      	add	r0, sp, #4
   b98da:	f7fb ff9b 	bl	b5814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b98de:	e7dd      	b.n	b989c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b98e0:	a805      	add	r0, sp, #20
   b98e2:	f7fb ff97 	bl	b5814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b98e6:	b00a      	add	sp, #40	; 0x28
   b98e8:	bd70      	pop	{r4, r5, r6, pc}
   b98ea:	bf00      	nop
   b98ec:	000bd456 	.word	0x000bd456

000b98f0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b98f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b98f2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b98f4:	4620      	mov	r0, r4
   b98f6:	4913      	ldr	r1, [pc, #76]	; (b9944 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b98f8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b98fa:	f002 fce6 	bl	bc2ca <strcmp>
   b98fe:	b950      	cbnz	r0, b9916 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b9900:	f001 fd00 	bl	bb304 <_Z16_fetch_usbserialv>
   b9904:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b9908:	f001 fcea 	bl	bb2e0 <_ZN9USBSerial5beginEl>
}
   b990c:	b003      	add	sp, #12
   b990e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b9912:	f001 bcf7 	b.w	bb304 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b9916:	490c      	ldr	r1, [pc, #48]	; (b9948 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b9918:	4620      	mov	r0, r4
   b991a:	f002 fcd6 	bl	bc2ca <strcmp>
   b991e:	b978      	cbnz	r0, b9940 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b9920:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b9924:	a901      	add	r1, sp, #4
   b9926:	4628      	mov	r0, r5
        int baud = 9600;
   b9928:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b992a:	f7ff ffaf 	bl	b988c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b992e:	f001 fee7 	bl	bb700 <_Z22__fetch_global_Serial1v>
   b9932:	9901      	ldr	r1, [sp, #4]
   b9934:	f001 fc7c 	bl	bb230 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b9938:	f001 fee2 	bl	bb700 <_Z22__fetch_global_Serial1v>
}
   b993c:	b003      	add	sp, #12
   b993e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b9940:	2000      	movs	r0, #0
   b9942:	e7fb      	b.n	b993c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b9944:	000bd45b 	.word	0x000bd45b
   b9948:	000bd462 	.word	0x000bd462

000b994c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b994c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b994e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b9952:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9954:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9956:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b995a:	42ae      	cmp	r6, r5
   b995c:	d005      	beq.n	b996a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b995e:	f105 0008 	add.w	r0, r5, #8
   b9962:	f7ff fff3 	bl	b994c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9966:	3514      	adds	r5, #20
   b9968:	e7f7      	b.n	b995a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b996a:	6820      	ldr	r0, [r4, #0]
   b996c:	f7ff f864 	bl	b8a38 <free>
}
   b9970:	4620      	mov	r0, r4
   b9972:	bd70      	pop	{r4, r5, r6, pc}

000b9974 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b9974:	b510      	push	{r4, lr}
   b9976:	4604      	mov	r4, r0
   b9978:	300c      	adds	r0, #12
   b997a:	f7ff ffe7 	bl	b994c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b997e:	4620      	mov	r0, r4
   b9980:	f7ff f8d9 	bl	b8b36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9984:	4620      	mov	r0, r4
   b9986:	bd10      	pop	{r4, pc}

000b9988 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b9988:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b998a:	4b04      	ldr	r3, [pc, #16]	; (b999c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b998c:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b998e:	f840 3b04 	str.w	r3, [r0], #4
   b9992:	f7ff ffef 	bl	b9974 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b9996:	4620      	mov	r0, r4
   b9998:	bd10      	pop	{r4, pc}
   b999a:	bf00      	nop
   b999c:	000bcc64 	.word	0x000bcc64

000b99a0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b99a0:	b510      	push	{r4, lr}
   b99a2:	4604      	mov	r4, r0
   b99a4:	f7ff fff0 	bl	b9988 <_ZN5spark16StreamLogHandlerD1Ev>
   b99a8:	4620      	mov	r0, r4
   b99aa:	2124      	movs	r1, #36	; 0x24
   b99ac:	f7fa fb77 	bl	b409e <_ZdlPvj>
   b99b0:	4620      	mov	r0, r4
   b99b2:	bd10      	pop	{r4, pc}

000b99b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b99b4:	b510      	push	{r4, lr}
   b99b6:	4b03      	ldr	r3, [pc, #12]	; (b99c4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b99b8:	6003      	str	r3, [r0, #0]
   b99ba:	4604      	mov	r4, r0
   b99bc:	f7ff ffe4 	bl	b9988 <_ZN5spark16StreamLogHandlerD1Ev>
   b99c0:	4620      	mov	r0, r4
   b99c2:	bd10      	pop	{r4, pc}
   b99c4:	000bd4fc 	.word	0x000bd4fc

000b99c8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b99c8:	b510      	push	{r4, lr}
   b99ca:	4604      	mov	r4, r0
   b99cc:	f7ff fff2 	bl	b99b4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b99d0:	4620      	mov	r0, r4
   b99d2:	2124      	movs	r1, #36	; 0x24
   b99d4:	f7fa fb63 	bl	b409e <_ZdlPvj>
   b99d8:	4620      	mov	r0, r4
   b99da:	bd10      	pop	{r4, pc}

000b99dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b99dc:	2200      	movs	r2, #0
   b99de:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b99e2:	b510      	push	{r4, lr}
        capacity_(0) {
   b99e4:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b99e6:	680c      	ldr	r4, [r1, #0]
   b99e8:	6004      	str	r4, [r0, #0]
   b99ea:	684c      	ldr	r4, [r1, #4]
   b99ec:	6044      	str	r4, [r0, #4]
   b99ee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b99f0:	600a      	str	r2, [r1, #0]
   b99f2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b99f4:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b99f6:	608a      	str	r2, [r1, #8]
}
   b99f8:	bd10      	pop	{r4, pc}

000b99fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   b99fa:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b99fc:	6803      	ldr	r3, [r0, #0]
   b99fe:	4604      	mov	r4, r0
   b9a00:	6818      	ldr	r0, [r3, #0]
   b9a02:	f7fe fcf5 	bl	b83f0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b9a06:	4620      	mov	r0, r4
   b9a08:	bd10      	pop	{r4, pc}
	...

000b9a0c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b9a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a10:	b087      	sub	sp, #28
   b9a12:	4680      	mov	r8, r0
   b9a14:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b9a16:	4b1c      	ldr	r3, [pc, #112]	; (b9a88 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b9a18:	685b      	ldr	r3, [r3, #4]
   b9a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9a1e:	4689      	mov	r9, r1
   b9a20:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b9a22:	b96b      	cbnz	r3, b9a40 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b9a24:	f7ff fed0 	bl	b97c8 <_ZN5spark10LogManager8instanceEv>
   b9a28:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9a2a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b9a2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9a30:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b9a32:	f7ff fda3 	bl	b957c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b9a36:	7b23      	ldrb	r3, [r4, #12]
   b9a38:	b12b      	cbz	r3, b9a46 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b9a3a:	a805      	add	r0, sp, #20
   b9a3c:	f7ff ffdd 	bl	b99fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b9a40:	b007      	add	sp, #28
   b9a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b9a46:	2301      	movs	r3, #1
   b9a48:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b9a4a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b9a4e:	fa5f f989 	uxtb.w	r9, r9
   b9a52:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9a56:	45aa      	cmp	sl, r5
   b9a58:	d012      	beq.n	b9a80 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b9a5a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b9a5e:	4631      	mov	r1, r6
   b9a60:	1d38      	adds	r0, r7, #4
   b9a62:	f7ff fe3d 	bl	b96e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9a66:	4581      	cmp	r9, r0
   b9a68:	d3f5      	bcc.n	b9a56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b9a6a:	683b      	ldr	r3, [r7, #0]
   b9a6c:	9a03      	ldr	r2, [sp, #12]
   b9a6e:	9200      	str	r2, [sp, #0]
   b9a70:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b9a74:	464a      	mov	r2, r9
   b9a76:	4633      	mov	r3, r6
   b9a78:	4641      	mov	r1, r8
   b9a7a:	4638      	mov	r0, r7
   b9a7c:	47d8      	blx	fp
   b9a7e:	e7ea      	b.n	b9a56 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b9a80:	2300      	movs	r3, #0
   b9a82:	7323      	strb	r3, [r4, #12]
   b9a84:	e7d9      	b.n	b9a3a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b9a86:	bf00      	nop
   b9a88:	e000ed00 	.word	0xe000ed00

000b9a8c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b9a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9a90:	469b      	mov	fp, r3
   b9a92:	4b1a      	ldr	r3, [pc, #104]	; (b9afc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b9a94:	685b      	ldr	r3, [r3, #4]
   b9a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9a9a:	4680      	mov	r8, r0
   b9a9c:	4689      	mov	r9, r1
   b9a9e:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b9aa0:	b96b      	cbnz	r3, b9abe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b9aa2:	f7ff fe91 	bl	b97c8 <_ZN5spark10LogManager8instanceEv>
   b9aa6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b9aa8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b9aac:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9aae:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9ab0:	f7ff fd64 	bl	b957c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b9ab4:	7b23      	ldrb	r3, [r4, #12]
   b9ab6:	b12b      	cbz	r3, b9ac4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b9ab8:	a801      	add	r0, sp, #4
   b9aba:	f7ff ff9e 	bl	b99fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9abe:	b003      	add	sp, #12
   b9ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b9ac4:	2301      	movs	r3, #1
   b9ac6:	7323      	strb	r3, [r4, #12]
   b9ac8:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b9acc:	b2f6      	uxtb	r6, r6
   b9ace:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9ad2:	4555      	cmp	r5, sl
   b9ad4:	d00e      	beq.n	b9af4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b9ad6:	f855 7b04 	ldr.w	r7, [r5], #4
   b9ada:	4659      	mov	r1, fp
   b9adc:	1d38      	adds	r0, r7, #4
   b9ade:	f7ff fdff 	bl	b96e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b9ae2:	4286      	cmp	r6, r0
   b9ae4:	d3f5      	bcc.n	b9ad2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b9ae6:	683b      	ldr	r3, [r7, #0]
   b9ae8:	464a      	mov	r2, r9
   b9aea:	68db      	ldr	r3, [r3, #12]
   b9aec:	4641      	mov	r1, r8
   b9aee:	4638      	mov	r0, r7
   b9af0:	4798      	blx	r3
   b9af2:	e7ee      	b.n	b9ad2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b9af4:	2300      	movs	r3, #0
   b9af6:	7323      	strb	r3, [r4, #12]
   b9af8:	e7de      	b.n	b9ab8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b9afa:	bf00      	nop
   b9afc:	e000ed00 	.word	0xe000ed00

000b9b00 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b9b00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b9b04:	4b16      	ldr	r3, [pc, #88]	; (b9b60 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b9b06:	685b      	ldr	r3, [r3, #4]
   b9b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b9b0c:	4605      	mov	r5, r0
   b9b0e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b9b10:	bb1b      	cbnz	r3, b9b5a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b9b12:	f7ff fe59 	bl	b97c8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b9b16:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b9b1a:	4604      	mov	r4, r0
   b9b1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9b1e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9b20:	f7ff fd2c 	bl	b957c <_ZN14RecursiveMutex4lockEv.isra.0>
   b9b24:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b9b28:	2446      	movs	r4, #70	; 0x46
   b9b2a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b9b2e:	45b0      	cmp	r8, r6
   b9b30:	d109      	bne.n	b9b46 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b9b32:	a801      	add	r0, sp, #4
   b9b34:	f7ff ff61 	bl	b99fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b9b38:	42a5      	cmp	r5, r4
   b9b3a:	bfb4      	ite	lt
   b9b3c:	2000      	movlt	r0, #0
   b9b3e:	2001      	movge	r0, #1
}
   b9b40:	b002      	add	sp, #8
   b9b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b9b46:	f856 0b04 	ldr.w	r0, [r6], #4
   b9b4a:	4639      	mov	r1, r7
   b9b4c:	3004      	adds	r0, #4
   b9b4e:	f7ff fdc7 	bl	b96e0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b9b52:	4284      	cmp	r4, r0
   b9b54:	bfa8      	it	ge
   b9b56:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b9b58:	e7e9      	b.n	b9b2e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b9b5a:	2000      	movs	r0, #0
   b9b5c:	e7f0      	b.n	b9b40 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b9b5e:	bf00      	nop
   b9b60:	e000ed00 	.word	0xe000ed00

000b9b64 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9b66:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b9b6a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9b6c:	4604      	mov	r4, r0
   b9b6e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9b70:	db0d      	blt.n	b9b8e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b9b72:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b9b74:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b9b76:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b9b78:	dd04      	ble.n	b9b84 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b9b7a:	00b9      	lsls	r1, r7, #2
   b9b7c:	f7fe ff64 	bl	b8a48 <realloc>
            if (!d) {
   b9b80:	b918      	cbnz	r0, b9b8a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b9b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b9b84:	f7fe ff58 	bl	b8a38 <free>
        T* d = nullptr;
   b9b88:	2000      	movs	r0, #0
        data_ = d;
   b9b8a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b9b8c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b9b8e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9b90:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b9b92:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b9b96:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9b98:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b9b9c:	1d08      	adds	r0, r1, #4
   b9b9e:	f002 faef 	bl	bc180 <memmove>
    new(p) T(std::move(value));
   b9ba2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b9ba6:	6863      	ldr	r3, [r4, #4]
   b9ba8:	3301      	adds	r3, #1
   b9baa:	6063      	str	r3, [r4, #4]
    return true;
   b9bac:	2001      	movs	r0, #1
   b9bae:	e7e8      	b.n	b9b82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b9bb0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b9bb2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b9bb6:	4604      	mov	r4, r0
   b9bb8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9bba:	9301      	str	r3, [sp, #4]
   b9bbc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b9bbe:	f7ff fcdd 	bl	b957c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b9bc2:	e9d4 3200 	ldrd	r3, r2, [r4]
   b9bc6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b9bca:	4293      	cmp	r3, r2
   b9bcc:	4619      	mov	r1, r3
   b9bce:	d00b      	beq.n	b9be8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b9bd0:	6809      	ldr	r1, [r1, #0]
   b9bd2:	42a9      	cmp	r1, r5
   b9bd4:	f103 0304 	add.w	r3, r3, #4
   b9bd8:	d1f7      	bne.n	b9bca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b9bda:	a801      	add	r0, sp, #4
   b9bdc:	f7ff ff0d 	bl	b99fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9be0:	2500      	movs	r5, #0
}
   b9be2:	4628      	mov	r0, r5
   b9be4:	b003      	add	sp, #12
   b9be6:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b9be8:	4629      	mov	r1, r5
   b9bea:	4620      	mov	r0, r4
   b9bec:	f7ff ffba 	bl	b9b64 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b9bf0:	4605      	mov	r5, r0
   b9bf2:	2800      	cmp	r0, #0
   b9bf4:	d0f1      	beq.n	b9bda <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b9bf6:	6863      	ldr	r3, [r4, #4]
   b9bf8:	2b01      	cmp	r3, #1
   b9bfa:	d101      	bne.n	b9c00 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b9bfc:	f7ff fe00 	bl	b9800 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9c00:	a801      	add	r0, sp, #4
   b9c02:	f7ff fefa 	bl	b99fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b9c06:	e7ec      	b.n	b9be2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b9c08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9c08:	b570      	push	{r4, r5, r6, lr}
   b9c0a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b9c0c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b9c10:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b9c12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b9c16:	4282      	cmp	r2, r0
   b9c18:	d00f      	beq.n	b9c3a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b9c1a:	4601      	mov	r1, r0
            if (*p == value) {
   b9c1c:	681d      	ldr	r5, [r3, #0]
   b9c1e:	f851 6b04 	ldr.w	r6, [r1], #4
   b9c22:	42ae      	cmp	r6, r5
   b9c24:	d107      	bne.n	b9c36 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b9c26:	1a52      	subs	r2, r2, r1
   b9c28:	f002 faaa 	bl	bc180 <memmove>
    --size_;
   b9c2c:	6863      	ldr	r3, [r4, #4]
   b9c2e:	3b01      	subs	r3, #1
   b9c30:	6063      	str	r3, [r4, #4]
    return true;
   b9c32:	2001      	movs	r0, #1
}
   b9c34:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b9c36:	4608      	mov	r0, r1
   b9c38:	e7ed      	b.n	b9c16 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b9c3a:	2000      	movs	r0, #0
   b9c3c:	e7fa      	b.n	b9c34 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b9c3e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9c3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b9c40:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b9c44:	4604      	mov	r4, r0
   b9c46:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b9c48:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9c4a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b9c4c:	f7ff fc96 	bl	b957c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b9c50:	a901      	add	r1, sp, #4
   b9c52:	4620      	mov	r0, r4
   b9c54:	f7ff ffd8 	bl	b9c08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b9c58:	b118      	cbz	r0, b9c62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b9c5a:	6863      	ldr	r3, [r4, #4]
   b9c5c:	b90b      	cbnz	r3, b9c62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b9c5e:	f7ff fddb 	bl	b9818 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9c62:	a803      	add	r0, sp, #12
   b9c64:	f7ff fec9 	bl	b99fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b9c68:	b004      	add	sp, #16
   b9c6a:	bd10      	pop	{r4, pc}

000b9c6c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b9c6c:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b9c6e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b9c72:	2318      	movs	r3, #24
   b9c74:	4604      	mov	r4, r0
   b9c76:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b9c7a:	42ae      	cmp	r6, r5
   b9c7c:	d015      	beq.n	b9caa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b9c7e:	f105 0110 	add.w	r1, r5, #16
   b9c82:	4620      	mov	r0, r4
   b9c84:	f7ff ffc0 	bl	b9c08 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b9c88:	6863      	ldr	r3, [r4, #4]
   b9c8a:	b90b      	cbnz	r3, b9c90 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b9c8c:	f7ff fdc4 	bl	b9818 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b9c90:	69e0      	ldr	r0, [r4, #28]
   b9c92:	6929      	ldr	r1, [r5, #16]
   b9c94:	6803      	ldr	r3, [r0, #0]
   b9c96:	68db      	ldr	r3, [r3, #12]
   b9c98:	4798      	blx	r3
        if (h.stream) {
   b9c9a:	6969      	ldr	r1, [r5, #20]
   b9c9c:	b119      	cbz	r1, b9ca6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b9c9e:	6a20      	ldr	r0, [r4, #32]
   b9ca0:	6803      	ldr	r3, [r0, #0]
   b9ca2:	68db      	ldr	r3, [r3, #12]
   b9ca4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b9ca6:	3518      	adds	r5, #24
   b9ca8:	e7e7      	b.n	b9c7a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b9caa:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9cae:	2618      	movs	r6, #24
   b9cb0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9cb4:	42ae      	cmp	r6, r5
   b9cb6:	d004      	beq.n	b9cc2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b9cb8:	4628      	mov	r0, r5
   b9cba:	f000 ff47 	bl	bab4c <_ZN6StringD1Ev>
   b9cbe:	3518      	adds	r5, #24
   b9cc0:	e7f8      	b.n	b9cb4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b9cc2:	2300      	movs	r3, #0
   b9cc4:	6163      	str	r3, [r4, #20]
}
   b9cc6:	bd70      	pop	{r4, r5, r6, pc}

000b9cc8 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b9cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9cca:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b9ccc:	f7ff fda4 	bl	b9818 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b9cd0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b9cd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9cd6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b9cd8:	f7ff fc50 	bl	b957c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b9cdc:	4620      	mov	r0, r4
   b9cde:	f7ff ffc5 	bl	b9c6c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b9ce2:	a801      	add	r0, sp, #4
   b9ce4:	f7ff fe89 	bl	b99fa <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b9ce8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9cea:	b108      	cbz	r0, b9cf0 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b9cec:	f7fe fb70 	bl	b83d0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b9cf0:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b9cf4:	2618      	movs	r6, #24
   b9cf6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9cfa:	42ae      	cmp	r6, r5
   b9cfc:	d004      	beq.n	b9d08 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b9cfe:	4628      	mov	r0, r5
   b9d00:	f000 ff24 	bl	bab4c <_ZN6StringD1Ev>
   b9d04:	3518      	adds	r5, #24
   b9d06:	e7f8      	b.n	b9cfa <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b9d08:	6920      	ldr	r0, [r4, #16]
   b9d0a:	f7fe fe95 	bl	b8a38 <free>
   b9d0e:	6820      	ldr	r0, [r4, #0]
   b9d10:	f7fe fe92 	bl	b8a38 <free>
}
   b9d14:	4620      	mov	r0, r4
   b9d16:	b002      	add	sp, #8
   b9d18:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9d1c <__tcf_2>:
    static LogManager mgr;
   b9d1c:	4801      	ldr	r0, [pc, #4]	; (b9d24 <__tcf_2+0x8>)
   b9d1e:	f7ff bfd3 	b.w	b9cc8 <_ZN5spark10LogManagerD1Ev>
   b9d22:	bf00      	nop
   b9d24:	2003e65c 	.word	0x2003e65c

000b9d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b9d28:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9d2c:	4604      	mov	r4, r0
   b9d2e:	460d      	mov	r5, r1
   b9d30:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9d32:	d915      	bls.n	b9d60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b9d34:	4290      	cmp	r0, r2
   b9d36:	d214      	bcs.n	b9d62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b9d38:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b9d3c:	1a75      	subs	r5, r6, r1
   b9d3e:	f1a1 0714 	sub.w	r7, r1, #20
   b9d42:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9d44:	42b7      	cmp	r7, r6
   b9d46:	d01a      	beq.n	b9d7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b9d48:	b11c      	cbz	r4, b9d52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b9d4a:	4631      	mov	r1, r6
   b9d4c:	4620      	mov	r0, r4
   b9d4e:	f7ff fc78 	bl	b9642 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b9d52:	f106 0008 	add.w	r0, r6, #8
   b9d56:	f7ff fdf9 	bl	b994c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b9d5a:	3e14      	subs	r6, #20
   b9d5c:	3c14      	subs	r4, #20
   b9d5e:	e7f1      	b.n	b9d44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b9d60:	d00d      	beq.n	b9d7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b9d62:	42b5      	cmp	r5, r6
   b9d64:	d00b      	beq.n	b9d7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b9d66:	b11c      	cbz	r4, b9d70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b9d68:	4629      	mov	r1, r5
   b9d6a:	4620      	mov	r0, r4
   b9d6c:	f7ff fc69 	bl	b9642 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b9d70:	f105 0008 	add.w	r0, r5, #8
   b9d74:	f7ff fdea 	bl	b994c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b9d78:	3514      	adds	r5, #20
   b9d7a:	3414      	adds	r4, #20
   b9d7c:	e7f1      	b.n	b9d62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b9d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9d80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b9d80:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9d84:	4604      	mov	r4, r0
   b9d86:	460d      	mov	r5, r1
   b9d88:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9d8a:	d914      	bls.n	b9db6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b9d8c:	4290      	cmp	r0, r2
   b9d8e:	d213      	bcs.n	b9db8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b9d90:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b9d94:	1a75      	subs	r5, r6, r1
   b9d96:	f1a1 0710 	sub.w	r7, r1, #16
   b9d9a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b9d9c:	42b7      	cmp	r7, r6
   b9d9e:	d018      	beq.n	b9dd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b9da0:	b11c      	cbz	r4, b9daa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b9da2:	4631      	mov	r1, r6
   b9da4:	4620      	mov	r0, r4
   b9da6:	f000 ff4d 	bl	bac44 <_ZN6StringC1EOS_>
                end->~T();
   b9daa:	4630      	mov	r0, r6
   b9dac:	f000 fece 	bl	bab4c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b9db0:	3e10      	subs	r6, #16
   b9db2:	3c10      	subs	r4, #16
   b9db4:	e7f2      	b.n	b9d9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b9db6:	d00c      	beq.n	b9dd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b9db8:	42b5      	cmp	r5, r6
   b9dba:	d00a      	beq.n	b9dd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b9dbc:	b11c      	cbz	r4, b9dc6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b9dbe:	4629      	mov	r1, r5
   b9dc0:	4620      	mov	r0, r4
   b9dc2:	f000 ff3f 	bl	bac44 <_ZN6StringC1EOS_>
                p->~T();
   b9dc6:	4628      	mov	r0, r5
   b9dc8:	f000 fec0 	bl	bab4c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b9dcc:	3510      	adds	r5, #16
   b9dce:	3410      	adds	r4, #16
   b9dd0:	e7f2      	b.n	b9db8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b9dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9dd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b9dd4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b9dd6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9dd8:	4605      	mov	r5, r0
        if (n > 0) {
   b9dda:	dd11      	ble.n	b9e00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9ddc:	0130      	lsls	r0, r6, #4
   b9dde:	f7fe fe23 	bl	b8a28 <malloc>
            if (!d) {
   b9de2:	4604      	mov	r4, r0
   b9de4:	b158      	cbz	r0, b9dfe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b9de6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9dea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b9dee:	f7ff ffc7 	bl	b9d80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b9df2:	6828      	ldr	r0, [r5, #0]
   b9df4:	f7fe fe20 	bl	b8a38 <free>
        data_ = d;
   b9df8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9dfa:	60ae      	str	r6, [r5, #8]
        return true;
   b9dfc:	2001      	movs	r0, #1
    }
   b9dfe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9e00:	2400      	movs	r4, #0
   b9e02:	e7f6      	b.n	b9df2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b9e04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e08:	4690      	mov	r8, r2
   b9e0a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b9e0c:	2300      	movs	r3, #0
   b9e0e:	9103      	str	r1, [sp, #12]
    return size_;
   b9e10:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b9e14:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9e16:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b9e18:	4299      	cmp	r1, r3
        capacity_(0) {
   b9e1a:	e9c0 3300 	strd	r3, r3, [r0]
   b9e1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9e26:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b9e2a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b9e2c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b9e2e:	dc23      	bgt.n	b9e78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b9e30:	e9d8 5700 	ldrd	r5, r7, [r8]
   b9e34:	2314      	movs	r3, #20
   b9e36:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b9e3a:	42af      	cmp	r7, r5
   b9e3c:	d03b      	beq.n	b9eb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b9e3e:	4629      	mov	r1, r5
   b9e40:	a80b      	add	r0, sp, #44	; 0x2c
   b9e42:	f000 feff 	bl	bac44 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b9e46:	a90b      	add	r1, sp, #44	; 0x2c
   b9e48:	a80f      	add	r0, sp, #60	; 0x3c
   b9e4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b9e4c:	f000 fefa 	bl	bac44 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9e50:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b9e54:	4299      	cmp	r1, r3
   b9e56:	da1b      	bge.n	b9e90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b9e58:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b9e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b9e5c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b9e60:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b9e64:	4631      	mov	r1, r6
   b9e66:	f106 0010 	add.w	r0, r6, #16
   b9e6a:	f7ff ff89 	bl	b9d80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b9e6e:	b9ee      	cbnz	r6, b9eac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b9e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b9e72:	3301      	adds	r3, #1
   b9e74:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b9e76:	e011      	b.n	b9e9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b9e78:	a808      	add	r0, sp, #32
   b9e7a:	f7ff ffab 	bl	b9dd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9e7e:	2800      	cmp	r0, #0
   b9e80:	d1d6      	bne.n	b9e30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b9e82:	a808      	add	r0, sp, #32
   b9e84:	f7fe fe57 	bl	b8b36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b9e88:	4620      	mov	r0, r4
   b9e8a:	b015      	add	sp, #84	; 0x54
   b9e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9e90:	3101      	adds	r1, #1
   b9e92:	a808      	add	r0, sp, #32
   b9e94:	f7ff ff9e 	bl	b9dd4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b9e98:	2800      	cmp	r0, #0
   b9e9a:	d1dd      	bne.n	b9e58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b9e9c:	a80f      	add	r0, sp, #60	; 0x3c
   b9e9e:	f000 fe55 	bl	bab4c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b9ea2:	a80b      	add	r0, sp, #44	; 0x2c
   b9ea4:	f000 fe52 	bl	bab4c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b9ea8:	3514      	adds	r5, #20
   b9eaa:	e7c6      	b.n	b9e3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b9eac:	a90f      	add	r1, sp, #60	; 0x3c
   b9eae:	4630      	mov	r0, r6
   b9eb0:	f000 fec8 	bl	bac44 <_ZN6StringC1EOS_>
   b9eb4:	e7dc      	b.n	b9e70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b9eb6:	2600      	movs	r6, #0
   b9eb8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b9ebc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b9ebe:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b9ec2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b9ec6:	429e      	cmp	r6, r3
   b9ec8:	da7c      	bge.n	b9fc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b9eca:	0133      	lsls	r3, r6, #4
   b9ecc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b9ece:	9306      	str	r3, [sp, #24]
        if (!category) {
   b9ed0:	b90b      	cbnz	r3, b9ed6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b9ed2:	3601      	adds	r6, #1
   b9ed4:	e7f5      	b.n	b9ec2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b9ed6:	2300      	movs	r3, #0
   b9ed8:	9307      	str	r3, [sp, #28]
   b9eda:	fb09 f306 	mul.w	r3, r9, r6
   b9ede:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b9ee0:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b9ee2:	a907      	add	r1, sp, #28
   b9ee4:	a806      	add	r0, sp, #24
   b9ee6:	f7ff fb22 	bl	b952e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b9eea:	4682      	mov	sl, r0
   b9eec:	2800      	cmp	r0, #0
   b9eee:	d0f0      	beq.n	b9ed2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b9ef0:	f04f 0300 	mov.w	r3, #0
   b9ef4:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9ef8:	4601      	mov	r1, r0
   b9efa:	9a07      	ldr	r2, [sp, #28]
   b9efc:	f10d 0317 	add.w	r3, sp, #23
   b9f00:	4628      	mov	r0, r5
   b9f02:	f7ff fbb1 	bl	b9668 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9f06:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b9f0a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9f0c:	2f00      	cmp	r7, #0
   b9f0e:	d14a      	bne.n	b9fa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b9f10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b9f14:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b9f18:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b9f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9f20:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b9f24:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b9f28:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9f2a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b9f2e:	4293      	cmp	r3, r2
   b9f30:	db17      	blt.n	b9f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b9f32:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b9f36:	f1ba 0f00 	cmp.w	sl, #0
   b9f3a:	dd30      	ble.n	b9f9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b9f3c:	fb09 f00a 	mul.w	r0, r9, sl
   b9f40:	f7fe fd72 	bl	b8a28 <malloc>
            if (!d) {
   b9f44:	4683      	mov	fp, r0
   b9f46:	b360      	cbz	r0, b9fa2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b9f48:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9f4c:	fb09 1202 	mla	r2, r9, r2, r1
   b9f50:	f7ff feea 	bl	b9d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b9f54:	6828      	ldr	r0, [r5, #0]
   b9f56:	f7fe fd6f 	bl	b8a38 <free>
        data_ = d;
   b9f5a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b9f5e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b9f62:	682b      	ldr	r3, [r5, #0]
   b9f64:	9a01      	ldr	r2, [sp, #4]
   b9f66:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b9f6a:	686a      	ldr	r2, [r5, #4]
   b9f6c:	4651      	mov	r1, sl
   b9f6e:	fb09 3202 	mla	r2, r9, r2, r3
   b9f72:	f10a 0014 	add.w	r0, sl, #20
   b9f76:	f7ff fed7 	bl	b9d28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b9f7a:	f1ba 0f00 	cmp.w	sl, #0
   b9f7e:	d003      	beq.n	b9f88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b9f80:	a90f      	add	r1, sp, #60	; 0x3c
   b9f82:	4650      	mov	r0, sl
   b9f84:	f7ff fb5d 	bl	b9642 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b9f88:	686b      	ldr	r3, [r5, #4]
   b9f8a:	3301      	adds	r3, #1
   b9f8c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b9f8e:	a811      	add	r0, sp, #68	; 0x44
   b9f90:	f7ff fcdc 	bl	b994c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9f94:	b13f      	cbz	r7, b9fa6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b9f96:	a80b      	add	r0, sp, #44	; 0x2c
   b9f98:	f7ff fcd8 	bl	b994c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b9f9c:	e771      	b.n	b9e82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b9f9e:	46bb      	mov	fp, r7
   b9fa0:	e7d8      	b.n	b9f54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b9fa2:	2701      	movs	r7, #1
   b9fa4:	e7f3      	b.n	b9f8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b9fa6:	9b01      	ldr	r3, [sp, #4]
   b9fa8:	682d      	ldr	r5, [r5, #0]
   b9faa:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b9fae:	9b06      	ldr	r3, [sp, #24]
   b9fb0:	781b      	ldrb	r3, [r3, #0]
   b9fb2:	b92b      	cbnz	r3, b9fc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b9fb4:	f8d8 3000 	ldr.w	r3, [r8]
   b9fb8:	9a02      	ldr	r2, [sp, #8]
   b9fba:	4413      	add	r3, r2
   b9fbc:	7c1b      	ldrb	r3, [r3, #16]
   b9fbe:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b9fc0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b9fc2:	e78e      	b.n	b9ee2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9fc4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b9fc6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9fc8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9fca:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9fcc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9fce:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b9fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b9fd2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9fd4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b9fd6:	60a2      	str	r2, [r4, #8]
   b9fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b9fda:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9fdc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9fde:	60e2      	str	r2, [r4, #12]
   b9fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b9fe2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9fe4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9fe6:	6122      	str	r2, [r4, #16]
   b9fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b9fea:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b9fec:	9b03      	ldr	r3, [sp, #12]
   b9fee:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b9ff0:	6162      	str	r2, [r4, #20]
   b9ff2:	7623      	strb	r3, [r4, #24]
   b9ff4:	e7cf      	b.n	b9f96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b9ff8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b9ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9ffa:	4604      	mov	r4, r0
   b9ffc:	b087      	sub	sp, #28
   b9ffe:	460d      	mov	r5, r1
        filter_(level, filters) {
   ba000:	4626      	mov	r6, r4
        stream_(&stream) {
   ba002:	4619      	mov	r1, r3
   ba004:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   ba006:	4617      	mov	r7, r2
        stream_(&stream) {
   ba008:	f7fb fc5b 	bl	b58c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   ba00c:	4b0b      	ldr	r3, [pc, #44]	; (ba03c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   ba00e:	f846 3b04 	str.w	r3, [r6], #4
   ba012:	4669      	mov	r1, sp
   ba014:	a803      	add	r0, sp, #12
   ba016:	f7fb fc54 	bl	b58c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   ba01a:	aa03      	add	r2, sp, #12
   ba01c:	4639      	mov	r1, r7
   ba01e:	4630      	mov	r0, r6
   ba020:	f7ff fef0 	bl	b9e04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba024:	a803      	add	r0, sp, #12
   ba026:	f7fb fc0b 	bl	b5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   ba02a:	4668      	mov	r0, sp
   ba02c:	f7fb fc08 	bl	b5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba030:	4b03      	ldr	r3, [pc, #12]	; (ba040 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   ba032:	6023      	str	r3, [r4, #0]
}
   ba034:	4620      	mov	r0, r4
        stream_(&stream) {
   ba036:	6225      	str	r5, [r4, #32]
}
   ba038:	b007      	add	sp, #28
   ba03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ba03c:	000bcc64 	.word	0x000bcc64
   ba040:	000bd4e4 	.word	0x000bd4e4

000ba044 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   ba044:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba046:	460f      	mov	r7, r1
   ba048:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba04a:	491d      	ldr	r1, [pc, #116]	; (ba0c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   ba04c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba04e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   ba050:	4616      	mov	r6, r2
   ba052:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   ba054:	f002 f939 	bl	bc2ca <strcmp>
   ba058:	b9c0      	cbnz	r0, ba08c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   ba05a:	b1a4      	cbz	r4, ba086 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   ba05c:	4629      	mov	r1, r5
   ba05e:	a801      	add	r0, sp, #4
   ba060:	f7ff fcbc 	bl	b99dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba064:	4917      	ldr	r1, [pc, #92]	; (ba0c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba066:	2024      	movs	r0, #36	; 0x24
   ba068:	f001 fb6e 	bl	bb748 <_ZnwjRKSt9nothrow_t>
   ba06c:	4605      	mov	r5, r0
   ba06e:	b130      	cbz	r0, ba07e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   ba070:	ab01      	add	r3, sp, #4
   ba072:	4632      	mov	r2, r6
   ba074:	4621      	mov	r1, r4
   ba076:	f7ff ffbf 	bl	b9ff8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba07a:	4b13      	ldr	r3, [pc, #76]	; (ba0c8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   ba07c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba07e:	a801      	add	r0, sp, #4
   ba080:	f7fb fbde 	bl	b5840 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   ba084:	462c      	mov	r4, r5
}
   ba086:	4620      	mov	r0, r4
   ba088:	b005      	add	sp, #20
   ba08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   ba08c:	490f      	ldr	r1, [pc, #60]	; (ba0cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   ba08e:	4638      	mov	r0, r7
   ba090:	f002 f91b 	bl	bc2ca <strcmp>
   ba094:	b990      	cbnz	r0, ba0bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   ba096:	2c00      	cmp	r4, #0
   ba098:	d0f5      	beq.n	ba086 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   ba09a:	4629      	mov	r1, r5
   ba09c:	a801      	add	r0, sp, #4
   ba09e:	f7ff fc9d 	bl	b99dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   ba0a2:	4908      	ldr	r1, [pc, #32]	; (ba0c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   ba0a4:	2024      	movs	r0, #36	; 0x24
   ba0a6:	f001 fb4f 	bl	bb748 <_ZnwjRKSt9nothrow_t>
   ba0aa:	4605      	mov	r5, r0
   ba0ac:	2800      	cmp	r0, #0
   ba0ae:	d0e6      	beq.n	ba07e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   ba0b0:	ab01      	add	r3, sp, #4
   ba0b2:	4632      	mov	r2, r6
   ba0b4:	4621      	mov	r1, r4
   ba0b6:	f7ff ff9f 	bl	b9ff8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   ba0ba:	e7e0      	b.n	ba07e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   ba0bc:	2400      	movs	r4, #0
   ba0be:	e7e2      	b.n	ba086 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   ba0c0:	000bd46a 	.word	0x000bd46a
   ba0c4:	000bd644 	.word	0x000bd644
   ba0c8:	000bd4fc 	.word	0x000bd4fc
   ba0cc:	000bd46e 	.word	0x000bd46e

000ba0d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   ba0d0:	4b01      	ldr	r3, [pc, #4]	; (ba0d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba0d2:	4a02      	ldr	r2, [pc, #8]	; (ba0dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba0d4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba0d6:	4770      	bx	lr
   ba0d8:	2003e658 	.word	0x2003e658
   ba0dc:	000bd47f 	.word	0x000bd47f

000ba0e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba0e4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   ba0e6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba0ea:	4604      	mov	r4, r0
   ba0ec:	460e      	mov	r6, r1
   ba0ee:	4617      	mov	r7, r2
   ba0f0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   ba0f2:	f001 f907 	bl	bb304 <_Z16_fetch_usbserialv>
   ba0f6:	4581      	cmp	r9, r0
   ba0f8:	d04c      	beq.n	ba194 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   ba0fa:	792b      	ldrb	r3, [r5, #4]
   ba0fc:	0719      	lsls	r1, r3, #28
   ba0fe:	d504      	bpl.n	ba10a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   ba100:	696a      	ldr	r2, [r5, #20]
   ba102:	4954      	ldr	r1, [pc, #336]	; (ba254 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   ba104:	4620      	mov	r0, r4
   ba106:	f7ff fa8d 	bl	b9624 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   ba10a:	f1b8 0f00 	cmp.w	r8, #0
   ba10e:	d00d      	beq.n	ba12c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   ba110:	215b      	movs	r1, #91	; 0x5b
   ba112:	4620      	mov	r0, r4
   ba114:	f7ff fa7a 	bl	b960c <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   ba118:	4641      	mov	r1, r8
   ba11a:	4620      	mov	r0, r4
   ba11c:	f7ff fa67 	bl	b95ee <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   ba120:	6823      	ldr	r3, [r4, #0]
   ba122:	494d      	ldr	r1, [pc, #308]	; (ba258 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   ba124:	68db      	ldr	r3, [r3, #12]
   ba126:	2202      	movs	r2, #2
   ba128:	4620      	mov	r0, r4
   ba12a:	4798      	blx	r3
    if (attr.has_file) {
   ba12c:	792b      	ldrb	r3, [r5, #4]
   ba12e:	07da      	lsls	r2, r3, #31
   ba130:	d523      	bpl.n	ba17a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   ba132:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   ba136:	212f      	movs	r1, #47	; 0x2f
   ba138:	4640      	mov	r0, r8
   ba13a:	f002 f907 	bl	bc34c <strrchr>
    if (s1) {
   ba13e:	b108      	cbz	r0, ba144 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   ba140:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   ba144:	4641      	mov	r1, r8
   ba146:	4620      	mov	r0, r4
   ba148:	f7ff fa51 	bl	b95ee <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   ba14c:	792b      	ldrb	r3, [r5, #4]
   ba14e:	079b      	lsls	r3, r3, #30
   ba150:	d508      	bpl.n	ba164 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   ba152:	213a      	movs	r1, #58	; 0x3a
   ba154:	4620      	mov	r0, r4
   ba156:	f7ff fa59 	bl	b960c <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   ba15a:	68ea      	ldr	r2, [r5, #12]
   ba15c:	493f      	ldr	r1, [pc, #252]	; (ba25c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   ba15e:	4620      	mov	r0, r4
   ba160:	f7ff fa60 	bl	b9624 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   ba164:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   ba166:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   ba168:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   ba16c:	68db      	ldr	r3, [r3, #12]
   ba16e:	bf14      	ite	ne
   ba170:	493b      	ldrne	r1, [pc, #236]	; (ba260 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   ba172:	493c      	ldreq	r1, [pc, #240]	; (ba264 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   ba174:	2202      	movs	r2, #2
            write(": ", 2);
   ba176:	4620      	mov	r0, r4
   ba178:	4798      	blx	r3
    if (attr.has_function) {
   ba17a:	792b      	ldrb	r3, [r5, #4]
   ba17c:	0758      	lsls	r0, r3, #29
   ba17e:	d51d      	bpl.n	ba1bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba180:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba182:	460b      	mov	r3, r1
   ba184:	461a      	mov	r2, r3
    for (; *s; ++s) {
   ba186:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba18a:	b160      	cbz	r0, ba1a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   ba18c:	2820      	cmp	r0, #32
   ba18e:	d108      	bne.n	ba1a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   ba190:	4619      	mov	r1, r3
   ba192:	e7f7      	b.n	ba184 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   ba194:	4834      	ldr	r0, [pc, #208]	; (ba268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   ba196:	f000 f966 	bl	ba466 <_ZN5spark12NetworkClass9listeningEv>
   ba19a:	2800      	cmp	r0, #0
   ba19c:	d0ad      	beq.n	ba0fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   ba19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   ba1a2:	2828      	cmp	r0, #40	; 0x28
   ba1a4:	d1ee      	bne.n	ba184 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   ba1a6:	6823      	ldr	r3, [r4, #0]
   ba1a8:	1a52      	subs	r2, r2, r1
   ba1aa:	68db      	ldr	r3, [r3, #12]
   ba1ac:	4620      	mov	r0, r4
   ba1ae:	4798      	blx	r3
        write("(): ", 4);
   ba1b0:	6823      	ldr	r3, [r4, #0]
   ba1b2:	492e      	ldr	r1, [pc, #184]	; (ba26c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   ba1b4:	68db      	ldr	r3, [r3, #12]
   ba1b6:	2204      	movs	r2, #4
   ba1b8:	4620      	mov	r0, r4
   ba1ba:	4798      	blx	r3
    return log_level_name(level, nullptr);
   ba1bc:	2100      	movs	r1, #0
   ba1be:	4638      	mov	r0, r7
   ba1c0:	f7fe fb26 	bl	b8810 <log_level_name>
   ba1c4:	4601      	mov	r1, r0
    write(s);
   ba1c6:	4620      	mov	r0, r4
   ba1c8:	f7ff fa11 	bl	b95ee <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   ba1cc:	6823      	ldr	r3, [r4, #0]
   ba1ce:	4925      	ldr	r1, [pc, #148]	; (ba264 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   ba1d0:	68db      	ldr	r3, [r3, #12]
   ba1d2:	2202      	movs	r2, #2
   ba1d4:	4620      	mov	r0, r4
   ba1d6:	4798      	blx	r3
    if (msg) {
   ba1d8:	b11e      	cbz	r6, ba1e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   ba1da:	4631      	mov	r1, r6
   ba1dc:	4620      	mov	r0, r4
   ba1de:	f7ff fa06 	bl	b95ee <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   ba1e2:	792b      	ldrb	r3, [r5, #4]
   ba1e4:	f013 0f30 	tst.w	r3, #48	; 0x30
   ba1e8:	d02c      	beq.n	ba244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   ba1ea:	6823      	ldr	r3, [r4, #0]
   ba1ec:	4920      	ldr	r1, [pc, #128]	; (ba270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   ba1ee:	68db      	ldr	r3, [r3, #12]
   ba1f0:	2202      	movs	r2, #2
   ba1f2:	4620      	mov	r0, r4
   ba1f4:	4798      	blx	r3
        if (attr.has_code) {
   ba1f6:	792b      	ldrb	r3, [r5, #4]
   ba1f8:	06d9      	lsls	r1, r3, #27
   ba1fa:	d50a      	bpl.n	ba212 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   ba1fc:	6823      	ldr	r3, [r4, #0]
   ba1fe:	491d      	ldr	r1, [pc, #116]	; (ba274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   ba200:	68db      	ldr	r3, [r3, #12]
   ba202:	2207      	movs	r2, #7
   ba204:	4620      	mov	r0, r4
   ba206:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   ba208:	69aa      	ldr	r2, [r5, #24]
   ba20a:	491b      	ldr	r1, [pc, #108]	; (ba278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   ba20c:	4620      	mov	r0, r4
   ba20e:	f7ff fa09 	bl	b9624 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   ba212:	792b      	ldrb	r3, [r5, #4]
   ba214:	069a      	lsls	r2, r3, #26
   ba216:	d511      	bpl.n	ba23c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   ba218:	06db      	lsls	r3, r3, #27
   ba21a:	d505      	bpl.n	ba228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   ba21c:	6823      	ldr	r3, [r4, #0]
   ba21e:	4910      	ldr	r1, [pc, #64]	; (ba260 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   ba220:	68db      	ldr	r3, [r3, #12]
   ba222:	2202      	movs	r2, #2
   ba224:	4620      	mov	r0, r4
   ba226:	4798      	blx	r3
            write("details = ", 10);
   ba228:	6823      	ldr	r3, [r4, #0]
   ba22a:	4914      	ldr	r1, [pc, #80]	; (ba27c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   ba22c:	68db      	ldr	r3, [r3, #12]
   ba22e:	4620      	mov	r0, r4
   ba230:	220a      	movs	r2, #10
   ba232:	4798      	blx	r3
            write(attr.details);
   ba234:	69e9      	ldr	r1, [r5, #28]
   ba236:	4620      	mov	r0, r4
   ba238:	f7ff f9d9 	bl	b95ee <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   ba23c:	215d      	movs	r1, #93	; 0x5d
   ba23e:	4620      	mov	r0, r4
   ba240:	f7ff f9e4 	bl	b960c <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   ba244:	6823      	ldr	r3, [r4, #0]
   ba246:	490e      	ldr	r1, [pc, #56]	; (ba280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   ba248:	68db      	ldr	r3, [r3, #12]
   ba24a:	4620      	mov	r0, r4
   ba24c:	2202      	movs	r2, #2
}
   ba24e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   ba252:	4718      	bx	r3
   ba254:	000bd483 	.word	0x000bd483
   ba258:	000bd48a 	.word	0x000bd48a
   ba25c:	000bc604 	.word	0x000bc604
   ba260:	000bd48d 	.word	0x000bd48d
   ba264:	000bd492 	.word	0x000bd492
   ba268:	2003e684 	.word	0x2003e684
   ba26c:	000bd490 	.word	0x000bd490
   ba270:	000bd495 	.word	0x000bd495
   ba274:	000bd498 	.word	0x000bd498
   ba278:	000bcd5c 	.word	0x000bcd5c
   ba27c:	000bd4a0 	.word	0x000bd4a0
   ba280:	000bd4ab 	.word	0x000bd4ab

000ba284 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   ba284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba288:	b085      	sub	sp, #20
    return stream_;
   ba28a:	f8d0 9020 	ldr.w	r9, [r0, #32]
   ba28e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   ba290:	4605      	mov	r5, r0
   ba292:	460f      	mov	r7, r1
   ba294:	4690      	mov	r8, r2
   ba296:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   ba298:	f001 f834 	bl	bb304 <_Z16_fetch_usbserialv>
   ba29c:	4581      	cmp	r9, r0
   ba29e:	d105      	bne.n	ba2ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   ba2a0:	4849      	ldr	r0, [pc, #292]	; (ba3c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   ba2a2:	f000 f8e0 	bl	ba466 <_ZN5spark12NetworkClass9listeningEv>
   ba2a6:	2800      	cmp	r0, #0
   ba2a8:	f040 808a 	bne.w	ba3c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   ba2ac:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   ba2ae:	4a47      	ldr	r2, [pc, #284]	; (ba3cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   ba2b0:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   ba2b2:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   ba2b6:	a801      	add	r0, sp, #4
        strm_(stream) {
   ba2b8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   ba2ba:	f88d 9008 	strb.w	r9, [sp, #8]
   ba2be:	f7ff f878 	bl	b93b2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   ba2c2:	4649      	mov	r1, r9
   ba2c4:	4640      	mov	r0, r8
   ba2c6:	f7fe faa3 	bl	b8810 <log_level_name>
    json.name("l", 1).value(s);
   ba2ca:	4941      	ldr	r1, [pc, #260]	; (ba3d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   ba2cc:	4680      	mov	r8, r0
   ba2ce:	2201      	movs	r2, #1
   ba2d0:	a801      	add	r0, sp, #4
   ba2d2:	f7ff f8fd 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba2d6:	4641      	mov	r1, r8
   ba2d8:	f7ff f97b 	bl	b95d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   ba2dc:	b13f      	cbz	r7, ba2ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   ba2de:	493d      	ldr	r1, [pc, #244]	; (ba3d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   ba2e0:	2201      	movs	r2, #1
   ba2e2:	a801      	add	r0, sp, #4
   ba2e4:	f7ff f8f4 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba2e8:	4639      	mov	r1, r7
   ba2ea:	f7ff f972 	bl	b95d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   ba2ee:	b13e      	cbz	r6, ba300 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   ba2f0:	4939      	ldr	r1, [pc, #228]	; (ba3d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   ba2f2:	2201      	movs	r2, #1
   ba2f4:	a801      	add	r0, sp, #4
   ba2f6:	f7ff f8eb 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba2fa:	4631      	mov	r1, r6
   ba2fc:	f7ff f969 	bl	b95d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   ba300:	7923      	ldrb	r3, [r4, #4]
   ba302:	07df      	lsls	r7, r3, #31
   ba304:	d50e      	bpl.n	ba324 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   ba306:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   ba308:	212f      	movs	r1, #47	; 0x2f
   ba30a:	4630      	mov	r0, r6
   ba30c:	f002 f81e 	bl	bc34c <strrchr>
    if (s1) {
   ba310:	b100      	cbz	r0, ba314 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   ba312:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   ba314:	4931      	ldr	r1, [pc, #196]	; (ba3dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   ba316:	2201      	movs	r2, #1
   ba318:	a801      	add	r0, sp, #4
   ba31a:	f7ff f8d9 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba31e:	4631      	mov	r1, r6
   ba320:	f7ff f957 	bl	b95d2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   ba324:	7923      	ldrb	r3, [r4, #4]
   ba326:	079e      	lsls	r6, r3, #30
   ba328:	d507      	bpl.n	ba33a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   ba32a:	492d      	ldr	r1, [pc, #180]	; (ba3e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   ba32c:	2202      	movs	r2, #2
   ba32e:	a801      	add	r0, sp, #4
   ba330:	f7ff f8ce 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba334:	68e1      	ldr	r1, [r4, #12]
   ba336:	f7ff f849 	bl	b93cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   ba33a:	7923      	ldrb	r3, [r4, #4]
   ba33c:	0758      	lsls	r0, r3, #29
   ba33e:	d514      	bpl.n	ba36a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   ba340:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   ba342:	4633      	mov	r3, r6
   ba344:	461f      	mov	r7, r3
    for (; *s; ++s) {
   ba346:	f813 2b01 	ldrb.w	r2, [r3], #1
   ba34a:	b12a      	cbz	r2, ba358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   ba34c:	2a20      	cmp	r2, #32
   ba34e:	d101      	bne.n	ba354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   ba350:	461e      	mov	r6, r3
   ba352:	e7f7      	b.n	ba344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   ba354:	2a28      	cmp	r2, #40	; 0x28
   ba356:	d1f5      	bne.n	ba344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   ba358:	4922      	ldr	r1, [pc, #136]	; (ba3e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   ba35a:	2202      	movs	r2, #2
   ba35c:	a801      	add	r0, sp, #4
   ba35e:	f7ff f8b7 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba362:	1bba      	subs	r2, r7, r6
   ba364:	4631      	mov	r1, r6
   ba366:	f7ff f8c3 	bl	b94f0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   ba36a:	7923      	ldrb	r3, [r4, #4]
   ba36c:	0719      	lsls	r1, r3, #28
   ba36e:	d507      	bpl.n	ba380 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   ba370:	491d      	ldr	r1, [pc, #116]	; (ba3e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   ba372:	2201      	movs	r2, #1
   ba374:	a801      	add	r0, sp, #4
   ba376:	f7ff f8ab 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba37a:	6961      	ldr	r1, [r4, #20]
   ba37c:	f7ff f838 	bl	b93f0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   ba380:	7923      	ldrb	r3, [r4, #4]
   ba382:	06da      	lsls	r2, r3, #27
   ba384:	d508      	bpl.n	ba398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   ba386:	2204      	movs	r2, #4
   ba388:	4918      	ldr	r1, [pc, #96]	; (ba3ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   ba38a:	eb0d 0002 	add.w	r0, sp, r2
   ba38e:	f7ff f89f 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba392:	69a1      	ldr	r1, [r4, #24]
   ba394:	f7ff f81a 	bl	b93cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   ba398:	7923      	ldrb	r3, [r4, #4]
   ba39a:	069b      	lsls	r3, r3, #26
   ba39c:	d507      	bpl.n	ba3ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   ba39e:	4914      	ldr	r1, [pc, #80]	; (ba3f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   ba3a0:	2206      	movs	r2, #6
   ba3a2:	a801      	add	r0, sp, #4
   ba3a4:	f7ff f894 	bl	b94d0 <_ZN5spark10JSONWriter4nameEPKcj>
   ba3a8:	69e1      	ldr	r1, [r4, #28]
   ba3aa:	f7ff f912 	bl	b95d2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   ba3ae:	a801      	add	r0, sp, #4
   ba3b0:	f7fe ffe9 	bl	b9386 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   ba3b4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   ba3b6:	490f      	ldr	r1, [pc, #60]	; (ba3f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   ba3b8:	6803      	ldr	r3, [r0, #0]
   ba3ba:	2202      	movs	r2, #2
   ba3bc:	68db      	ldr	r3, [r3, #12]
   ba3be:	4798      	blx	r3
}
   ba3c0:	b005      	add	sp, #20
   ba3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   ba3c6:	bf00      	nop
   ba3c8:	2003e684 	.word	0x2003e684
   ba3cc:	000bd4cc 	.word	0x000bd4cc
   ba3d0:	000bd460 	.word	0x000bd460
   ba3d4:	000bd4ae 	.word	0x000bd4ae
   ba3d8:	000bd765 	.word	0x000bd765
   ba3dc:	000bc8e6 	.word	0x000bc8e6
   ba3e0:	000bd4b0 	.word	0x000bd4b0
   ba3e4:	000bd4b3 	.word	0x000bd4b3
   ba3e8:	000bc979 	.word	0x000bc979
   ba3ec:	000bd4b6 	.word	0x000bd4b6
   ba3f0:	000bd4bb 	.word	0x000bd4bb
   ba3f4:	000bd4ab 	.word	0x000bd4ab

000ba3f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba3f8:	2300      	movs	r3, #0
   ba3fa:	6840      	ldr	r0, [r0, #4]
   ba3fc:	461a      	mov	r2, r3
   ba3fe:	f7fe bab3 	b.w	b8968 <network_connect>

000ba402 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba402:	6840      	ldr	r0, [r0, #4]
   ba404:	2200      	movs	r2, #0
   ba406:	2102      	movs	r1, #2
   ba408:	f7fe babe 	b.w	b8988 <network_disconnect>

000ba40c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba40c:	2200      	movs	r2, #0
   ba40e:	6840      	ldr	r0, [r0, #4]
   ba410:	4611      	mov	r1, r2
   ba412:	f7fe bab1 	b.w	b8978 <network_connecting>

000ba416 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba416:	2200      	movs	r2, #0
   ba418:	6840      	ldr	r0, [r0, #4]
   ba41a:	4611      	mov	r1, r2
   ba41c:	f7fe babc 	b.w	b8998 <network_ready>

000ba420 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba420:	2300      	movs	r3, #0
   ba422:	6840      	ldr	r0, [r0, #4]
   ba424:	461a      	mov	r2, r3
   ba426:	4619      	mov	r1, r3
   ba428:	f7fe babe 	b.w	b89a8 <network_on>

000ba42c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba42c:	2300      	movs	r3, #0
   ba42e:	6840      	ldr	r0, [r0, #4]
   ba430:	461a      	mov	r2, r3
   ba432:	4619      	mov	r1, r3
   ba434:	f7fe bac0 	b.w	b89b8 <network_off>

000ba438 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba438:	6840      	ldr	r0, [r0, #4]
   ba43a:	2100      	movs	r1, #0
   ba43c:	f7fe bae4 	b.w	b8a08 <network_is_on>

000ba440 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba440:	6840      	ldr	r0, [r0, #4]
   ba442:	2100      	movs	r1, #0
   ba444:	f7fe bae8 	b.w	b8a18 <network_is_off>

000ba448 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba448:	6840      	ldr	r0, [r0, #4]
   ba44a:	2200      	movs	r2, #0
   ba44c:	f081 0101 	eor.w	r1, r1, #1
   ba450:	f7fe baba 	b.w	b89c8 <network_listen>

000ba454 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba454:	6840      	ldr	r0, [r0, #4]
   ba456:	2200      	movs	r2, #0
   ba458:	f7fe bac6 	b.w	b89e8 <network_set_listen_timeout>

000ba45c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba45c:	2200      	movs	r2, #0
   ba45e:	6840      	ldr	r0, [r0, #4]
   ba460:	4611      	mov	r1, r2
   ba462:	f7fe bac9 	b.w	b89f8 <network_get_listen_timeout>

000ba466 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba466:	2200      	movs	r2, #0
   ba468:	6840      	ldr	r0, [r0, #4]
   ba46a:	4611      	mov	r1, r2
   ba46c:	f7fe bab4 	b.w	b89d8 <network_listening>

000ba470 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba474:	b095      	sub	sp, #84	; 0x54
   ba476:	4614      	mov	r4, r2
   ba478:	460d      	mov	r5, r1
   ba47a:	4607      	mov	r7, r0
    IPAddress addr;
   ba47c:	f7fe fe32 	bl	b90e4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba480:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba482:	221c      	movs	r2, #28
   ba484:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba486:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba488:	f001 fe94 	bl	bc1b4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba48c:	2340      	movs	r3, #64	; 0x40
   ba48e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba490:	4620      	mov	r0, r4
   ba492:	466b      	mov	r3, sp
   ba494:	aa0c      	add	r2, sp, #48	; 0x30
   ba496:	2100      	movs	r1, #0
   ba498:	f7fe f8ba 	bl	b8610 <netdb_getaddrinfo>
    if (!r) {
   ba49c:	4604      	mov	r4, r0
   ba49e:	2800      	cmp	r0, #0
   ba4a0:	d14b      	bne.n	ba53a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba4a2:	4602      	mov	r2, r0
   ba4a4:	2101      	movs	r1, #1
   ba4a6:	6868      	ldr	r0, [r5, #4]
   ba4a8:	f7fe fa76 	bl	b8998 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba4ac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba4ae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba4b0:	4622      	mov	r2, r4
   ba4b2:	6868      	ldr	r0, [r5, #4]
   ba4b4:	f7fe fa70 	bl	b8998 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba4b8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba4ba:	4681      	mov	r9, r0
        bool ok = false;
   ba4bc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba4be:	2e00      	cmp	r6, #0
   ba4c0:	d03b      	beq.n	ba53a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba4c2:	2900      	cmp	r1, #0
   ba4c4:	d139      	bne.n	ba53a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba4c6:	6873      	ldr	r3, [r6, #4]
   ba4c8:	2b02      	cmp	r3, #2
   ba4ca:	d003      	beq.n	ba4d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba4cc:	2b0a      	cmp	r3, #10
   ba4ce:	d011      	beq.n	ba4f4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba4d0:	69f6      	ldr	r6, [r6, #28]
   ba4d2:	e7f4      	b.n	ba4be <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba4d4:	f1b8 0f00 	cmp.w	r8, #0
   ba4d8:	d0fa      	beq.n	ba4d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba4da:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba4dc:	a806      	add	r0, sp, #24
   ba4de:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba4e0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba4e2:	f7fe fe2d 	bl	b9140 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba4e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba4e8:	1d3c      	adds	r4, r7, #4
   ba4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba4ec:	682b      	ldr	r3, [r5, #0]
   ba4ee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba4f0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba4f2:	e7ed      	b.n	ba4d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba4f4:	f1b9 0f00 	cmp.w	r9, #0
   ba4f8:	d0ea      	beq.n	ba4d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba4fa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba4fc:	2210      	movs	r2, #16
   ba4fe:	a801      	add	r0, sp, #4
   ba500:	f001 fe58 	bl	bc1b4 <memset>
                    a.v = 6;
   ba504:	2306      	movs	r3, #6
   ba506:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba50a:	ad01      	add	r5, sp, #4
   ba50c:	f104 0308 	add.w	r3, r4, #8
   ba510:	3418      	adds	r4, #24
   ba512:	6818      	ldr	r0, [r3, #0]
   ba514:	6859      	ldr	r1, [r3, #4]
   ba516:	462a      	mov	r2, r5
   ba518:	c203      	stmia	r2!, {r0, r1}
   ba51a:	3308      	adds	r3, #8
   ba51c:	42a3      	cmp	r3, r4
   ba51e:	4615      	mov	r5, r2
   ba520:	d1f7      	bne.n	ba512 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba522:	a901      	add	r1, sp, #4
   ba524:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba526:	ad07      	add	r5, sp, #28
   ba528:	f7fe fdea 	bl	b9100 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba52e:	1d3c      	adds	r4, r7, #4
   ba530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba532:	682b      	ldr	r3, [r5, #0]
   ba534:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba536:	4649      	mov	r1, r9
   ba538:	e7ca      	b.n	ba4d0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba53a:	9800      	ldr	r0, [sp, #0]
   ba53c:	f7fe f860 	bl	b8600 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba540:	4638      	mov	r0, r7
   ba542:	b015      	add	sp, #84	; 0x54
   ba544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba548 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba548:	4b02      	ldr	r3, [pc, #8]	; (ba554 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba54a:	4a03      	ldr	r2, [pc, #12]	; (ba558 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba54c:	601a      	str	r2, [r3, #0]
   ba54e:	2200      	movs	r2, #0
   ba550:	605a      	str	r2, [r3, #4]

} // spark
   ba552:	4770      	bx	lr
   ba554:	2003e684 	.word	0x2003e684
   ba558:	000bd544 	.word	0x000bd544

000ba55c <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   ba55c:	b508      	push	{r3, lr}
            return &Wire1;
   ba55e:	f001 f88f 	bl	bb680 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   ba562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   ba566:	f7fe bd45 	b.w	b8ff4 <_ZN7TwoWire4lockEv>

000ba56a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   ba56a:	b510      	push	{r4, lr}
   ba56c:	4604      	mov	r4, r0
    lock_(_lock)
   ba56e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   ba570:	b109      	cbz	r1, ba576 <_ZN4PMICC1Eb+0xc>
        lock();
   ba572:	f7ff fff3 	bl	ba55c <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   ba576:	4620      	mov	r0, r4
   ba578:	bd10      	pop	{r4, pc}

000ba57a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   ba57a:	b508      	push	{r3, lr}
            return &Wire1;
   ba57c:	f001 f880 	bl	bb680 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   ba580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   ba584:	f7fe bd3f 	b.w	b9006 <_ZN7TwoWire6unlockEv>

000ba588 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   ba588:	b510      	push	{r4, lr}
    if (lock_) {
   ba58a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   ba58c:	4604      	mov	r4, r0
    if (lock_) {
   ba58e:	b10b      	cbz	r3, ba594 <_ZN4PMICD1Ev+0xc>
        unlock();
   ba590:	f7ff fff3 	bl	ba57a <_ZN4PMIC6unlockEv>
}
   ba594:	4620      	mov	r0, r4
   ba596:	bd10      	pop	{r4, pc}

000ba598 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   ba598:	b510      	push	{r4, lr}
   ba59a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   ba59c:	6800      	ldr	r0, [r0, #0]
   ba59e:	f7ff ffec 	bl	ba57a <_ZN4PMIC6unlockEv>
   ba5a2:	4620      	mov	r0, r4
   ba5a4:	bd10      	pop	{r4, pc}

000ba5a6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   ba5a6:	b530      	push	{r4, r5, lr}
   ba5a8:	b087      	sub	sp, #28
   ba5aa:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba5ac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba5ae:	f7ff ffd5 	bl	ba55c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba5b2:	226b      	movs	r2, #107	; 0x6b
   ba5b4:	2300      	movs	r3, #0
   ba5b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba5ba:	2401      	movs	r4, #1
   ba5bc:	230a      	movs	r3, #10
   ba5be:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   ba5c2:	f001 f85d 	bl	bb680 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba5c6:	a902      	add	r1, sp, #8
   ba5c8:	f7fe fcf8 	bl	b8fbc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba5cc:	f001 f858 	bl	bb680 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   ba5d0:	6803      	ldr	r3, [r0, #0]
   ba5d2:	4629      	mov	r1, r5
   ba5d4:	689b      	ldr	r3, [r3, #8]
   ba5d6:	4798      	blx	r3
            return &Wire1;
   ba5d8:	f001 f852 	bl	bb680 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba5dc:	4621      	mov	r1, r4
   ba5de:	f7fe fd05 	bl	b8fec <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   ba5e2:	9403      	str	r4, [sp, #12]
            return &Wire1;
   ba5e4:	f001 f84c 	bl	bb680 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   ba5e8:	a902      	add	r1, sp, #8
   ba5ea:	f7fe fcb7 	bl	b8f5c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   ba5ee:	f001 f847 	bl	bb680 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   ba5f2:	6803      	ldr	r3, [r0, #0]
   ba5f4:	695b      	ldr	r3, [r3, #20]
   ba5f6:	4798      	blx	r3
   ba5f8:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   ba5fa:	a801      	add	r0, sp, #4
   ba5fc:	f7ff ffcc 	bl	ba598 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba600:	b2e0      	uxtb	r0, r4
   ba602:	b007      	add	sp, #28
   ba604:	bd30      	pop	{r4, r5, pc}

000ba606 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   ba606:	b570      	push	{r4, r5, r6, lr}
   ba608:	b086      	sub	sp, #24
   ba60a:	460d      	mov	r5, r1
   ba60c:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba60e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba610:	f7ff ffa4 	bl	ba55c <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   ba614:	226b      	movs	r2, #107	; 0x6b
   ba616:	2300      	movs	r3, #0
   ba618:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   ba61c:	2601      	movs	r6, #1
   ba61e:	230a      	movs	r3, #10
   ba620:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   ba624:	f001 f82c 	bl	bb680 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   ba628:	a902      	add	r1, sp, #8
   ba62a:	f7fe fcc7 	bl	b8fbc <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   ba62e:	f001 f827 	bl	bb680 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   ba632:	6803      	ldr	r3, [r0, #0]
   ba634:	4629      	mov	r1, r5
   ba636:	689b      	ldr	r3, [r3, #8]
   ba638:	4798      	blx	r3
            return &Wire1;
   ba63a:	f001 f821 	bl	bb680 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   ba63e:	6803      	ldr	r3, [r0, #0]
   ba640:	4621      	mov	r1, r4
   ba642:	689b      	ldr	r3, [r3, #8]
   ba644:	4798      	blx	r3
            return &Wire1;
   ba646:	f001 f81b 	bl	bb680 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   ba64a:	4631      	mov	r1, r6
   ba64c:	f7fe fcce 	bl	b8fec <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   ba650:	a801      	add	r0, sp, #4
   ba652:	f7ff ffa1 	bl	ba598 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba656:	b006      	add	sp, #24
   ba658:	bd70      	pop	{r4, r5, r6, pc}

000ba65a <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   ba65a:	b513      	push	{r0, r1, r4, lr}
   ba65c:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba65e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba660:	f7ff ff7c 	bl	ba55c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba664:	2101      	movs	r1, #1
   ba666:	4620      	mov	r0, r4
   ba668:	f7ff ff9d 	bl	ba5a6 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   ba66c:	f000 0330 	and.w	r3, r0, #48	; 0x30
   ba670:	2b10      	cmp	r3, #16
   ba672:	d007      	beq.n	ba684 <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   ba674:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   ba678:	f042 0210 	orr.w	r2, r2, #16
   ba67c:	2101      	movs	r1, #1
   ba67e:	4620      	mov	r0, r4
   ba680:	f7ff ffc1 	bl	ba606 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba684:	a801      	add	r0, sp, #4
   ba686:	f7ff ff87 	bl	ba598 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba68a:	2001      	movs	r0, #1
   ba68c:	b002      	add	sp, #8
   ba68e:	bd10      	pop	{r4, pc}

000ba690 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   ba690:	b513      	push	{r0, r1, r4, lr}
   ba692:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   ba694:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   ba696:	f7ff ff61 	bl	ba55c <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   ba69a:	2101      	movs	r1, #1
   ba69c:	4620      	mov	r0, r4
   ba69e:	f7ff ff82 	bl	ba5a6 <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   ba6a2:	f010 0f30 	tst.w	r0, #48	; 0x30
   ba6a6:	d005      	beq.n	ba6b4 <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   ba6a8:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   ba6ac:	2101      	movs	r1, #1
   ba6ae:	4620      	mov	r0, r4
   ba6b0:	f7ff ffa9 	bl	ba606 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   ba6b4:	a801      	add	r0, sp, #4
   ba6b6:	f7ff ff6f 	bl	ba598 <_ZNSt10lock_guardI4PMICED1Ev>
}
   ba6ba:	2001      	movs	r0, #1
   ba6bc:	b002      	add	sp, #8
   ba6be:	bd10      	pop	{r4, pc}

000ba6c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba6c2:	4606      	mov	r6, r0
   ba6c4:	460d      	mov	r5, r1
  size_t n = 0;
   ba6c6:	188f      	adds	r7, r1, r2
   ba6c8:	2400      	movs	r4, #0
  while (size--) {
   ba6ca:	42bd      	cmp	r5, r7
   ba6cc:	d00c      	beq.n	ba6e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba6ce:	6833      	ldr	r3, [r6, #0]
   ba6d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba6d4:	689b      	ldr	r3, [r3, #8]
   ba6d6:	4630      	mov	r0, r6
   ba6d8:	4798      	blx	r3
     if (chunk>=0)
   ba6da:	1e03      	subs	r3, r0, #0
   ba6dc:	db01      	blt.n	ba6e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba6de:	441c      	add	r4, r3
  while (size--) {
   ba6e0:	e7f3      	b.n	ba6ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba6e2:	2c00      	cmp	r4, #0
   ba6e4:	bf08      	it	eq
   ba6e6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba6e8:	4620      	mov	r0, r4
   ba6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba6ec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   ba6ec:	b513      	push	{r0, r1, r4, lr}
   ba6ee:	4604      	mov	r4, r0
    }
   ba6f0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba6f2:	b159      	cbz	r1, ba70c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba6f4:	9101      	str	r1, [sp, #4]
   ba6f6:	f001 fdfa 	bl	bc2ee <strlen>
   ba6fa:	6823      	ldr	r3, [r4, #0]
   ba6fc:	9901      	ldr	r1, [sp, #4]
   ba6fe:	68db      	ldr	r3, [r3, #12]
   ba700:	4602      	mov	r2, r0
   ba702:	4620      	mov	r0, r4
    }
   ba704:	b002      	add	sp, #8
   ba706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba70a:	4718      	bx	r3
    }
   ba70c:	b002      	add	sp, #8
   ba70e:	bd10      	pop	{r4, pc}

000ba710 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba710:	b508      	push	{r3, lr}
  return write(str);
   ba712:	f7ff ffeb 	bl	ba6ec <_ZN5Print5writeEPKc>
}
   ba716:	bd08      	pop	{r3, pc}

000ba718 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba718:	6803      	ldr	r3, [r0, #0]
   ba71a:	689b      	ldr	r3, [r3, #8]
   ba71c:	4718      	bx	r3

000ba71e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba71e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba720:	210d      	movs	r1, #13
{
   ba722:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba724:	f7ff fff8 	bl	ba718 <_ZN5Print5printEc>
  n += print('\n');
   ba728:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba72a:	4604      	mov	r4, r0
  n += print('\n');
   ba72c:	4628      	mov	r0, r5
   ba72e:	f7ff fff3 	bl	ba718 <_ZN5Print5printEc>
  return n;
}
   ba732:	4420      	add	r0, r4
   ba734:	bd38      	pop	{r3, r4, r5, pc}

000ba736 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba736:	b530      	push	{r4, r5, lr}
   ba738:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba73a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba73c:	2a01      	cmp	r2, #1
  *str = '\0';
   ba73e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba742:	bf98      	it	ls
   ba744:	220a      	movls	r2, #10
   ba746:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba748:	460d      	mov	r5, r1
   ba74a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba74e:	fb01 5312 	mls	r3, r1, r2, r5
   ba752:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba756:	2b09      	cmp	r3, #9
   ba758:	bf94      	ite	ls
   ba75a:	3330      	addls	r3, #48	; 0x30
   ba75c:	3337      	addhi	r3, #55	; 0x37
   ba75e:	b2db      	uxtb	r3, r3
  } while(n);
   ba760:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba762:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba766:	d9ef      	bls.n	ba748 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba768:	4621      	mov	r1, r4
   ba76a:	f7ff ffbf 	bl	ba6ec <_ZN5Print5writeEPKc>
}
   ba76e:	b00b      	add	sp, #44	; 0x2c
   ba770:	bd30      	pop	{r4, r5, pc}
	...

000ba774 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   ba774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba778:	ec55 4b10 	vmov	r4, r5, d0
   ba77c:	4606      	mov	r6, r0
   ba77e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   ba780:	ee10 2a10 	vmov	r2, s0
   ba784:	ee10 0a10 	vmov	r0, s0
   ba788:	462b      	mov	r3, r5
   ba78a:	4629      	mov	r1, r5
   ba78c:	f001 fc3a 	bl	bc004 <__aeabi_dcmpun>
   ba790:	b140      	cbz	r0, ba7a4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   ba792:	4953      	ldr	r1, [pc, #332]	; (ba8e0 <_ZN5Print10printFloatEdh+0x16c>)
   ba794:	4630      	mov	r0, r6
   ba796:	f7ff ffa9 	bl	ba6ec <_ZN5Print5writeEPKc>
   ba79a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   ba79c:	4650      	mov	r0, sl
   ba79e:	b003      	add	sp, #12
   ba7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   ba7a4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   ba7a8:	4b4e      	ldr	r3, [pc, #312]	; (ba8e4 <_ZN5Print10printFloatEdh+0x170>)
   ba7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba7ae:	4620      	mov	r0, r4
   ba7b0:	4649      	mov	r1, r9
   ba7b2:	f001 fc27 	bl	bc004 <__aeabi_dcmpun>
   ba7b6:	b948      	cbnz	r0, ba7cc <_ZN5Print10printFloatEdh+0x58>
   ba7b8:	4b4a      	ldr	r3, [pc, #296]	; (ba8e4 <_ZN5Print10printFloatEdh+0x170>)
   ba7ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   ba7be:	4620      	mov	r0, r4
   ba7c0:	4649      	mov	r1, r9
   ba7c2:	f001 fc01 	bl	bbfc8 <__aeabi_dcmple>
   ba7c6:	b908      	cbnz	r0, ba7cc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   ba7c8:	4947      	ldr	r1, [pc, #284]	; (ba8e8 <_ZN5Print10printFloatEdh+0x174>)
   ba7ca:	e7e3      	b.n	ba794 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   ba7cc:	4b47      	ldr	r3, [pc, #284]	; (ba8ec <_ZN5Print10printFloatEdh+0x178>)
   ba7ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba7d2:	4620      	mov	r0, r4
   ba7d4:	4629      	mov	r1, r5
   ba7d6:	f001 fc0b 	bl	bbff0 <__aeabi_dcmpgt>
   ba7da:	b108      	cbz	r0, ba7e0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   ba7dc:	4944      	ldr	r1, [pc, #272]	; (ba8f0 <_ZN5Print10printFloatEdh+0x17c>)
   ba7de:	e7d9      	b.n	ba794 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   ba7e0:	4b44      	ldr	r3, [pc, #272]	; (ba8f4 <_ZN5Print10printFloatEdh+0x180>)
   ba7e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   ba7e6:	4620      	mov	r0, r4
   ba7e8:	4629      	mov	r1, r5
   ba7ea:	f001 fbe3 	bl	bbfb4 <__aeabi_dcmplt>
   ba7ee:	2800      	cmp	r0, #0
   ba7f0:	d1f4      	bne.n	ba7dc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   ba7f2:	2200      	movs	r2, #0
   ba7f4:	2300      	movs	r3, #0
   ba7f6:	4620      	mov	r0, r4
   ba7f8:	4629      	mov	r1, r5
   ba7fa:	f001 fbdb 	bl	bbfb4 <__aeabi_dcmplt>
   ba7fe:	b1d0      	cbz	r0, ba836 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   ba800:	212d      	movs	r1, #45	; 0x2d
   ba802:	4630      	mov	r0, r6
   ba804:	f7ff ff88 	bl	ba718 <_ZN5Print5printEc>
     number = -number;
   ba808:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   ba80c:	4682      	mov	sl, r0
     number = -number;
   ba80e:	461d      	mov	r5, r3
  double rounding = 0.5;
   ba810:	4939      	ldr	r1, [pc, #228]	; (ba8f8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   ba812:	f8df 90ec 	ldr.w	r9, [pc, #236]	; ba900 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   ba816:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   ba81a:	2000      	movs	r0, #0
    rounding /= 10.0;
   ba81c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   ba820:	fa5f f38b 	uxtb.w	r3, fp
   ba824:	429f      	cmp	r7, r3
   ba826:	d908      	bls.n	ba83a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   ba828:	4642      	mov	r2, r8
   ba82a:	464b      	mov	r3, r9
   ba82c:	f001 fa7a 	bl	bbd24 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   ba830:	f10b 0b01 	add.w	fp, fp, #1
   ba834:	e7f4      	b.n	ba820 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   ba836:	4682      	mov	sl, r0
   ba838:	e7ea      	b.n	ba810 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   ba83a:	4622      	mov	r2, r4
   ba83c:	462b      	mov	r3, r5
   ba83e:	f000 ff91 	bl	bb764 <__adddf3>
   ba842:	460d      	mov	r5, r1
   ba844:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   ba846:	f001 fc1b 	bl	bc080 <__aeabi_d2uiz>
   ba84a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   ba84c:	f001 f8c6 	bl	bb9dc <__aeabi_ui2d>
   ba850:	4602      	mov	r2, r0
   ba852:	460b      	mov	r3, r1
   ba854:	4620      	mov	r0, r4
   ba856:	4629      	mov	r1, r5
   ba858:	f000 ff82 	bl	bb760 <__aeabi_dsub>
        return printNumber(val, base) + t;
   ba85c:	220a      	movs	r2, #10
   ba85e:	4604      	mov	r4, r0
   ba860:	460d      	mov	r5, r1
   ba862:	4630      	mov	r0, r6
   ba864:	4641      	mov	r1, r8
   ba866:	f7ff ff66 	bl	ba736 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   ba86a:	4482      	add	sl, r0
  if (digits > 0) {
   ba86c:	2f00      	cmp	r7, #0
   ba86e:	d095      	beq.n	ba79c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   ba870:	4922      	ldr	r1, [pc, #136]	; (ba8fc <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   ba872:	f8df 908c 	ldr.w	r9, [pc, #140]	; ba900 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   ba876:	4630      	mov	r0, r6
   ba878:	f7ff ff38 	bl	ba6ec <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   ba87c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   ba880:	4482      	add	sl, r0
  while (digits-- > 0)
   ba882:	2f00      	cmp	r7, #0
   ba884:	d08a      	beq.n	ba79c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   ba886:	4642      	mov	r2, r8
   ba888:	464b      	mov	r3, r9
   ba88a:	4620      	mov	r0, r4
   ba88c:	4629      	mov	r1, r5
   ba88e:	f001 f91f 	bl	bbad0 <__aeabi_dmul>
   ba892:	4604      	mov	r4, r0
   ba894:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   ba896:	f001 fbcb 	bl	bc030 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   ba89a:	f1b0 0b00 	subs.w	fp, r0, #0
   ba89e:	da1c      	bge.n	ba8da <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   ba8a0:	212d      	movs	r1, #45	; 0x2d
   ba8a2:	4630      	mov	r0, r6
   ba8a4:	f7ff ff38 	bl	ba718 <_ZN5Print5printEc>
            val = -n;
   ba8a8:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   ba8ac:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   ba8ae:	220a      	movs	r2, #10
   ba8b0:	4630      	mov	r0, r6
   ba8b2:	9301      	str	r3, [sp, #4]
   ba8b4:	f7ff ff3f 	bl	ba736 <_ZN5Print11printNumberEmh>
   ba8b8:	9b01      	ldr	r3, [sp, #4]
   ba8ba:	4418      	add	r0, r3
    n += print(toPrint);
   ba8bc:	4482      	add	sl, r0
    remainder -= toPrint;
   ba8be:	4658      	mov	r0, fp
   ba8c0:	f001 f89c 	bl	bb9fc <__aeabi_i2d>
   ba8c4:	4602      	mov	r2, r0
   ba8c6:	460b      	mov	r3, r1
   ba8c8:	4620      	mov	r0, r4
   ba8ca:	4629      	mov	r1, r5
   ba8cc:	f000 ff48 	bl	bb760 <__aeabi_dsub>
   ba8d0:	3f01      	subs	r7, #1
   ba8d2:	4604      	mov	r4, r0
   ba8d4:	460d      	mov	r5, r1
   ba8d6:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   ba8d8:	e7d3      	b.n	ba882 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   ba8da:	4659      	mov	r1, fp
        size_t t = 0;
   ba8dc:	2300      	movs	r3, #0
   ba8de:	e7e6      	b.n	ba8ae <_ZN5Print10printFloatEdh+0x13a>
   ba8e0:	000bd578 	.word	0x000bd578
   ba8e4:	7fefffff 	.word	0x7fefffff
   ba8e8:	000bd57c 	.word	0x000bd57c
   ba8ec:	41efffff 	.word	0x41efffff
   ba8f0:	000bd580 	.word	0x000bd580
   ba8f4:	c1efffff 	.word	0xc1efffff
   ba8f8:	3fe00000 	.word	0x3fe00000
   ba8fc:	000bd5b8 	.word	0x000bd5b8
   ba900:	40240000 	.word	0x40240000

000ba904 <_ZN5Print5printEfi>:
{
   ba904:	b538      	push	{r3, r4, r5, lr}
   ba906:	4604      	mov	r4, r0
   ba908:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   ba90c:	b2cd      	uxtb	r5, r1
   ba90e:	f001 f887 	bl	bba20 <__aeabi_f2d>
   ba912:	ec41 0b10 	vmov	d0, r0, r1
   ba916:	4629      	mov	r1, r5
   ba918:	4620      	mov	r0, r4
}
   ba91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   ba91e:	f7ff bf29 	b.w	ba774 <_ZN5Print10printFloatEdh>

000ba922 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba926:	b086      	sub	sp, #24
   ba928:	af00      	add	r7, sp, #0
   ba92a:	4605      	mov	r5, r0
   ba92c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba92e:	1d38      	adds	r0, r7, #4
   ba930:	2114      	movs	r1, #20
{
   ba932:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba934:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba936:	f7fe f89f 	bl	b8a78 <vsnprintf>

    if (n<bufsize)
   ba93a:	2813      	cmp	r0, #19
   ba93c:	d80e      	bhi.n	ba95c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba93e:	1d39      	adds	r1, r7, #4
   ba940:	4628      	mov	r0, r5
   ba942:	f7ff fed3 	bl	ba6ec <_ZN5Print5writeEPKc>
   ba946:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba948:	b11e      	cbz	r6, ba952 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba94a:	4628      	mov	r0, r5
   ba94c:	f7ff fee7 	bl	ba71e <_ZN5Print7printlnEv>
   ba950:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba952:	4620      	mov	r0, r4
   ba954:	3718      	adds	r7, #24
   ba956:	46bd      	mov	sp, r7
   ba958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba95c:	f100 0308 	add.w	r3, r0, #8
   ba960:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba964:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba966:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba96a:	4622      	mov	r2, r4
   ba96c:	1c41      	adds	r1, r0, #1
   ba96e:	683b      	ldr	r3, [r7, #0]
   ba970:	4668      	mov	r0, sp
   ba972:	f7fe f881 	bl	b8a78 <vsnprintf>
  return write(str);
   ba976:	4669      	mov	r1, sp
   ba978:	4628      	mov	r0, r5
   ba97a:	f7ff feb7 	bl	ba6ec <_ZN5Print5writeEPKc>
   ba97e:	4604      	mov	r4, r0
   ba980:	46c5      	mov	sp, r8
   ba982:	e7e1      	b.n	ba948 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba984 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   ba984:	b510      	push	{r4, lr}
  if (0 == max) {
   ba986:	4604      	mov	r4, r0
   ba988:	b128      	cbz	r0, ba996 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   ba98a:	f001 fc49 	bl	bc220 <rand>
   ba98e:	fb90 f3f4 	sdiv	r3, r0, r4
   ba992:	fb03 0414 	mls	r4, r3, r4, r0
}
   ba996:	4620      	mov	r0, r4
   ba998:	bd10      	pop	{r4, pc}

000ba99a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   ba99a:	4288      	cmp	r0, r1
{
   ba99c:	b510      	push	{r4, lr}
   ba99e:	4604      	mov	r4, r0
  if (min >= max) {
   ba9a0:	da03      	bge.n	ba9aa <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   ba9a2:	1a08      	subs	r0, r1, r0
   ba9a4:	f7ff ffee 	bl	ba984 <_Z6randomi>
   ba9a8:	4404      	add	r4, r0
}
   ba9aa:	4620      	mov	r0, r4
   ba9ac:	bd10      	pop	{r4, pc}

000ba9ae <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   ba9ae:	f001 bc09 	b.w	bc1c4 <srand>
	...

000ba9b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba9b4:	4b01      	ldr	r3, [pc, #4]	; (ba9bc <_GLOBAL__sub_I_RGB+0x8>)
   ba9b6:	2200      	movs	r2, #0
   ba9b8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba9ba:	4770      	bx	lr
   ba9bc:	2003e68c 	.word	0x2003e68c

000ba9c0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba9c0:	2100      	movs	r1, #0
   ba9c2:	f7fd be6d 	b.w	b86a0 <hal_spi_release>

000ba9c6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba9c6:	2100      	movs	r1, #0
   ba9c8:	f7fd be62 	b.w	b8690 <hal_spi_acquire>

000ba9cc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba9cc:	b510      	push	{r4, lr}
   ba9ce:	4604      	mov	r4, r0
   ba9d0:	4608      	mov	r0, r1
{
    _spi = spi;
   ba9d2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba9d4:	f7fd fe3c 	bl	b8650 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba9d8:	2300      	movs	r3, #0
   ba9da:	6063      	str	r3, [r4, #4]
}
   ba9dc:	4620      	mov	r0, r4
   ba9de:	bd10      	pop	{r4, pc}

000ba9e0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba9e0:	b513      	push	{r0, r1, r4, lr}
   ba9e2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba9e4:	7800      	ldrb	r0, [r0, #0]
   ba9e6:	f7ff ffee 	bl	ba9c6 <_ZN8SPIClass4lockEv.isra.0>
   ba9ea:	b958      	cbnz	r0, baa04 <_ZN8SPIClass5beginEv+0x24>
   ba9ec:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba9ee:	9001      	str	r0, [sp, #4]
   ba9f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba9f4:	f7fd fe14 	bl	b8620 <hal_spi_begin>
        unlock();
   ba9f8:	9801      	ldr	r0, [sp, #4]
    }
}
   ba9fa:	b002      	add	sp, #8
   ba9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baa00:	f7ff bfde 	b.w	ba9c0 <_ZN8SPIClass6unlockEv.isra.0>
   baa04:	b002      	add	sp, #8
   baa06:	bd10      	pop	{r4, pc}

000baa08 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   baa08:	b513      	push	{r0, r1, r4, lr}
   baa0a:	4604      	mov	r4, r0
    if (!lock())
   baa0c:	7800      	ldrb	r0, [r0, #0]
   baa0e:	f7ff ffda 	bl	ba9c6 <_ZN8SPIClass4lockEv.isra.0>
   baa12:	b948      	cbnz	r0, baa28 <_ZN8SPIClass3endEv+0x20>
   baa14:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   baa16:	9001      	str	r0, [sp, #4]
   baa18:	f7fd fe0a 	bl	b8630 <hal_spi_end>
        unlock();
   baa1c:	9801      	ldr	r0, [sp, #4]
    }
}
   baa1e:	b002      	add	sp, #8
   baa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baa24:	f7ff bfcc 	b.w	ba9c0 <_ZN8SPIClass6unlockEv.isra.0>
   baa28:	b002      	add	sp, #8
   baa2a:	bd10      	pop	{r4, pc}

000baa2c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   baa2c:	7800      	ldrb	r0, [r0, #0]
   baa2e:	f7ff bfc7 	b.w	ba9c0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000baa34 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   baa34:	0840      	lsrs	r0, r0, #1
{
   baa36:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   baa38:	6018      	str	r0, [r3, #0]
   baa3a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   baa3c:	6818      	ldr	r0, [r3, #0]
   baa3e:	4288      	cmp	r0, r1
   baa40:	b2e5      	uxtb	r5, r4
   baa42:	d906      	bls.n	baa52 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   baa44:	3401      	adds	r4, #1
   baa46:	2c08      	cmp	r4, #8
   baa48:	d002      	beq.n	baa50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   baa4a:	0840      	lsrs	r0, r0, #1
   baa4c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   baa4e:	e7f5      	b.n	baa3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   baa50:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   baa52:	4b02      	ldr	r3, [pc, #8]	; (baa5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   baa54:	5d5b      	ldrb	r3, [r3, r5]
   baa56:	7013      	strb	r3, [r2, #0]
}
   baa58:	bd30      	pop	{r4, r5, pc}
   baa5a:	bf00      	nop
   baa5c:	000bd584 	.word	0x000bd584

000baa60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   baa60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baa64:	4606      	mov	r6, r0
   baa66:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   baa68:	7800      	ldrb	r0, [r0, #0]
{
   baa6a:	460c      	mov	r4, r1
    CHECK(lock());
   baa6c:	f7ff ffab 	bl	ba9c6 <_ZN8SPIClass4lockEv.isra.0>
   baa70:	2800      	cmp	r0, #0
   baa72:	db1b      	blt.n	baaac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   baa74:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   baa76:	2214      	movs	r2, #20
   baa78:	2100      	movs	r1, #0
   baa7a:	a809      	add	r0, sp, #36	; 0x24
   baa7c:	f001 fb9a 	bl	bc1b4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   baa80:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   baa82:	2200      	movs	r2, #0
   baa84:	a909      	add	r1, sp, #36	; 0x24
   baa86:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   baa88:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   baa8c:	f7fd fdf0 	bl	b8670 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   baa90:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   baa94:	b113      	cbz	r3, baa9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   baa96:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   baa9a:	b155      	cbz	r5, baab2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   baa9c:	2700      	movs	r7, #0
   baa9e:	46b9      	mov	r9, r7
   baaa0:	46b8      	mov	r8, r7
   baaa2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   baaa4:	7923      	ldrb	r3, [r4, #4]
   baaa6:	b15d      	cbz	r5, baac0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   baaa8:	b1c3      	cbz	r3, baadc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   baaaa:	2000      	movs	r0, #0
}
   baaac:	b00f      	add	sp, #60	; 0x3c
   baaae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   baab2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   baab6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   baaba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   baabe:	e7f1      	b.n	baaa4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   baac0:	2b00      	cmp	r3, #0
   baac2:	d135      	bne.n	bab30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   baac4:	68a3      	ldr	r3, [r4, #8]
   baac6:	4543      	cmp	r3, r8
   baac8:	d108      	bne.n	baadc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   baaca:	f88d 9020 	strb.w	r9, [sp, #32]
   baace:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   baad2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   baad6:	89a3      	ldrh	r3, [r4, #12]
   baad8:	429a      	cmp	r2, r3
   baada:	d0e6      	beq.n	baaaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   baadc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   baade:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   baae0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   baae4:	980a      	ldr	r0, [sp, #40]	; 0x28
   baae6:	ab04      	add	r3, sp, #16
   baae8:	f10d 020f 	add.w	r2, sp, #15
   baaec:	f7ff ffa2 	bl	baa34 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   baaf0:	7921      	ldrb	r1, [r4, #4]
   baaf2:	b985      	cbnz	r5, bab16 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   baaf4:	b989      	cbnz	r1, bab1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   baaf6:	68a3      	ldr	r3, [r4, #8]
   baaf8:	4543      	cmp	r3, r8
   baafa:	d30e      	bcc.n	bab1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   baafc:	f88d 9020 	strb.w	r9, [sp, #32]
   bab00:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bab04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bab08:	89a3      	ldrh	r3, [r4, #12]
   bab0a:	429a      	cmp	r2, r3
   bab0c:	d105      	bne.n	bab1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bab0e:	9b04      	ldr	r3, [sp, #16]
   bab10:	4543      	cmp	r3, r8
   bab12:	d102      	bne.n	bab1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bab14:	e7c9      	b.n	baaaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bab16:	2900      	cmp	r1, #0
   bab18:	d1f9      	bne.n	bab0e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bab1a:	2300      	movs	r3, #0
   bab1c:	9301      	str	r3, [sp, #4]
   bab1e:	7b63      	ldrb	r3, [r4, #13]
   bab20:	9300      	str	r3, [sp, #0]
   bab22:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bab26:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bab28:	7830      	ldrb	r0, [r6, #0]
   bab2a:	f7fd fda9 	bl	b8680 <hal_spi_set_settings>
   bab2e:	e7bc      	b.n	baaaa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bab30:	e9cd 5500 	strd	r5, r5, [sp]
   bab34:	462b      	mov	r3, r5
   bab36:	462a      	mov	r2, r5
   bab38:	2101      	movs	r1, #1
   bab3a:	e7f5      	b.n	bab28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bab3c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bab3c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bab3e:	7800      	ldrb	r0, [r0, #0]
   bab40:	f7fd fd7e 	bl	b8640 <hal_spi_transfer>
}
   bab44:	b2c0      	uxtb	r0, r0
   bab46:	bd08      	pop	{r3, pc}

000bab48 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bab48:	4770      	bx	lr

000bab4a <_ZN8SPIClass15detachInterruptEv>:
   bab4a:	4770      	bx	lr

000bab4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bab4c:	b510      	push	{r4, lr}
   bab4e:	4604      	mov	r4, r0
{
	free(buffer);
   bab50:	6800      	ldr	r0, [r0, #0]
   bab52:	f7fd ff71 	bl	b8a38 <free>
}
   bab56:	4620      	mov	r0, r4
   bab58:	bd10      	pop	{r4, pc}

000bab5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bab5a:	b510      	push	{r4, lr}
   bab5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bab5e:	6800      	ldr	r0, [r0, #0]
   bab60:	b108      	cbz	r0, bab66 <_ZN6String10invalidateEv+0xc>
   bab62:	f7fd ff69 	bl	b8a38 <free>
	buffer = NULL;
   bab66:	2300      	movs	r3, #0
	capacity = len = 0;
   bab68:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bab6c:	6023      	str	r3, [r4, #0]
}
   bab6e:	bd10      	pop	{r4, pc}

000bab70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bab70:	b538      	push	{r3, r4, r5, lr}
   bab72:	4604      	mov	r4, r0
   bab74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bab76:	6800      	ldr	r0, [r0, #0]
   bab78:	3101      	adds	r1, #1
   bab7a:	f7fd ff65 	bl	b8a48 <realloc>
	if (newbuffer) {
   bab7e:	b110      	cbz	r0, bab86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bab80:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bab84:	2001      	movs	r0, #1
	}
	return 0;
}
   bab86:	bd38      	pop	{r3, r4, r5, pc}

000bab88 <_ZN6String7reserveEj>:
{
   bab88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bab8a:	6803      	ldr	r3, [r0, #0]
{
   bab8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bab8e:	b123      	cbz	r3, bab9a <_ZN6String7reserveEj+0x12>
   bab90:	6843      	ldr	r3, [r0, #4]
   bab92:	428b      	cmp	r3, r1
   bab94:	d301      	bcc.n	bab9a <_ZN6String7reserveEj+0x12>
   bab96:	2001      	movs	r0, #1
}
   bab98:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bab9a:	4620      	mov	r0, r4
   bab9c:	f7ff ffe8 	bl	bab70 <_ZN6String12changeBufferEj>
   baba0:	2800      	cmp	r0, #0
   baba2:	d0f9      	beq.n	bab98 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   baba4:	68a3      	ldr	r3, [r4, #8]
   baba6:	2b00      	cmp	r3, #0
   baba8:	d1f5      	bne.n	bab96 <_ZN6String7reserveEj+0xe>
   babaa:	6822      	ldr	r2, [r4, #0]
   babac:	7013      	strb	r3, [r2, #0]
   babae:	e7f2      	b.n	bab96 <_ZN6String7reserveEj+0xe>

000babb0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   babb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   babb2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   babb4:	4611      	mov	r1, r2
   babb6:	9201      	str	r2, [sp, #4]
{
   babb8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   babba:	f7ff ffe5 	bl	bab88 <_ZN6String7reserveEj>
   babbe:	9a01      	ldr	r2, [sp, #4]
   babc0:	b928      	cbnz	r0, babce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   babc2:	4620      	mov	r0, r4
   babc4:	f7ff ffc9 	bl	bab5a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   babc8:	4620      	mov	r0, r4
   babca:	b003      	add	sp, #12
   babcc:	bd30      	pop	{r4, r5, pc}
	len = length;
   babce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   babd0:	4629      	mov	r1, r5
   babd2:	6820      	ldr	r0, [r4, #0]
   babd4:	f001 fac6 	bl	bc164 <memcpy>
	buffer[len] = 0;
   babd8:	6822      	ldr	r2, [r4, #0]
   babda:	68a3      	ldr	r3, [r4, #8]
   babdc:	2100      	movs	r1, #0
   babde:	54d1      	strb	r1, [r2, r3]
	return *this;
   babe0:	e7f2      	b.n	babc8 <_ZN6String4copyEPKcj+0x18>

000babe2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   babe2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   babe4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   babe6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   babea:	4604      	mov	r4, r0
	len = 0;
   babec:	6083      	str	r3, [r0, #8]
	flags = 0;
   babee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   babf0:	b141      	cbz	r1, bac04 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   babf2:	4608      	mov	r0, r1
   babf4:	9101      	str	r1, [sp, #4]
   babf6:	f001 fb7a 	bl	bc2ee <strlen>
   babfa:	9901      	ldr	r1, [sp, #4]
   babfc:	4602      	mov	r2, r0
   babfe:	4620      	mov	r0, r4
   bac00:	f7ff ffd6 	bl	babb0 <_ZN6String4copyEPKcj>
}
   bac04:	4620      	mov	r0, r4
   bac06:	b002      	add	sp, #8
   bac08:	bd10      	pop	{r4, pc}

000bac0a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bac0a:	b538      	push	{r3, r4, r5, lr}
   bac0c:	4605      	mov	r5, r0
	if (buffer) {
   bac0e:	6800      	ldr	r0, [r0, #0]
{
   bac10:	460c      	mov	r4, r1
	if (buffer) {
   bac12:	b168      	cbz	r0, bac30 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bac14:	686a      	ldr	r2, [r5, #4]
   bac16:	688b      	ldr	r3, [r1, #8]
   bac18:	429a      	cmp	r2, r3
   bac1a:	d307      	bcc.n	bac2c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bac1c:	6809      	ldr	r1, [r1, #0]
   bac1e:	f001 fb5e 	bl	bc2de <strcpy>
			len = rhs.len;
   bac22:	68a3      	ldr	r3, [r4, #8]
   bac24:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bac26:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bac28:	60a3      	str	r3, [r4, #8]
}
   bac2a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bac2c:	f7fd ff04 	bl	b8a38 <free>
	buffer = rhs.buffer;
   bac30:	6823      	ldr	r3, [r4, #0]
   bac32:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bac34:	6863      	ldr	r3, [r4, #4]
   bac36:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bac38:	68a3      	ldr	r3, [r4, #8]
   bac3a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bac3c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bac3e:	e9c4 3300 	strd	r3, r3, [r4]
   bac42:	e7f1      	b.n	bac28 <_ZN6String4moveERS_+0x1e>

000bac44 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bac44:	b510      	push	{r4, lr}
	buffer = NULL;
   bac46:	2300      	movs	r3, #0
	capacity = 0;
   bac48:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bac4c:	4604      	mov	r4, r0
	len = 0;
   bac4e:	6083      	str	r3, [r0, #8]
	flags = 0;
   bac50:	7303      	strb	r3, [r0, #12]
	move(rval);
   bac52:	f7ff ffda 	bl	bac0a <_ZN6String4moveERS_>
}
   bac56:	4620      	mov	r0, r4
   bac58:	bd10      	pop	{r4, pc}

000bac5a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bac5a:	4288      	cmp	r0, r1
{
   bac5c:	b510      	push	{r4, lr}
   bac5e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bac60:	d005      	beq.n	bac6e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bac62:	680b      	ldr	r3, [r1, #0]
   bac64:	b12b      	cbz	r3, bac72 <_ZN6StringaSERKS_+0x18>
   bac66:	688a      	ldr	r2, [r1, #8]
   bac68:	4619      	mov	r1, r3
   bac6a:	f7ff ffa1 	bl	babb0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bac6e:	4620      	mov	r0, r4
   bac70:	bd10      	pop	{r4, pc}
	else invalidate();
   bac72:	f7ff ff72 	bl	bab5a <_ZN6String10invalidateEv>
   bac76:	e7fa      	b.n	bac6e <_ZN6StringaSERKS_+0x14>

000bac78 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bac78:	b510      	push	{r4, lr}
	buffer = NULL;
   bac7a:	2300      	movs	r3, #0
String::String(const String &value)
   bac7c:	4604      	mov	r4, r0
	capacity = 0;
   bac7e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bac82:	6083      	str	r3, [r0, #8]
	flags = 0;
   bac84:	7303      	strb	r3, [r0, #12]
	*this = value;
   bac86:	f7ff ffe8 	bl	bac5a <_ZN6StringaSERKS_>
}
   bac8a:	4620      	mov	r0, r4
   bac8c:	bd10      	pop	{r4, pc}
	...

000bac90 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bac90:	b40e      	push	{r1, r2, r3}
   bac92:	b570      	push	{r4, r5, r6, lr}
   bac94:	b087      	sub	sp, #28
   bac96:	ad0b      	add	r5, sp, #44	; 0x2c
   bac98:	4604      	mov	r4, r0
   bac9a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bac9e:	9201      	str	r2, [sp, #4]
   baca0:	462b      	mov	r3, r5
   baca2:	2105      	movs	r1, #5
   baca4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   baca6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   baca8:	f7fd fee6 	bl	b8a78 <vsnprintf>
    va_end(marker);

    String result;
   bacac:	490b      	ldr	r1, [pc, #44]	; (bacdc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bacae:	4606      	mov	r6, r0
    String result;
   bacb0:	4620      	mov	r0, r4
   bacb2:	f7ff ff96 	bl	babe2 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bacb6:	4631      	mov	r1, r6
   bacb8:	4620      	mov	r0, r4
   bacba:	f7ff ff65 	bl	bab88 <_ZN6String7reserveEj>
    if (result.buffer) {
   bacbe:	6820      	ldr	r0, [r4, #0]
   bacc0:	b130      	cbz	r0, bacd0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bacc2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bacc4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bacc6:	462b      	mov	r3, r5
   bacc8:	1c71      	adds	r1, r6, #1
   bacca:	f7fd fed5 	bl	b8a78 <vsnprintf>
        va_end(marker);
        result.len = n;
   bacce:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bacd0:	4620      	mov	r0, r4
   bacd2:	b007      	add	sp, #28
   bacd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bacd8:	b003      	add	sp, #12
   bacda:	4770      	bx	lr
   bacdc:	000bd4ad 	.word	0x000bd4ad

000bace0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bace0:	b510      	push	{r4, lr}
   bace2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bace4:	6800      	ldr	r0, [r0, #0]
   bace6:	b118      	cbz	r0, bacf0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bace8:	f7fd fea6 	bl	b8a38 <free>
            wakeupSource_ = nullptr;
   bacec:	2300      	movs	r3, #0
   bacee:	6023      	str	r3, [r4, #0]
        }
    }
   bacf0:	bd10      	pop	{r4, pc}

000bacf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bacf2:	b538      	push	{r3, r4, r5, lr}
   bacf4:	460c      	mov	r4, r1
   bacf6:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bacf8:	f7ff fff2 	bl	bace0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bacfc:	b154      	cbz	r4, bad14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bacfe:	8820      	ldrh	r0, [r4, #0]
   bad00:	f7fd fe92 	bl	b8a28 <malloc>
   bad04:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bad06:	b128      	cbz	r0, bad14 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bad08:	8822      	ldrh	r2, [r4, #0]
   bad0a:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bad0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bad10:	f001 ba28 	b.w	bc164 <memcpy>
    }
   bad14:	bd38      	pop	{r3, r4, r5, pc}

000bad16 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bad16:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bad18:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bad1c:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bad1e:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bad22:	f8c0 3006 	str.w	r3, [r0, #6]
   bad26:	894b      	ldrh	r3, [r1, #10]
   bad28:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bad2a:	460c      	mov	r4, r1
   bad2c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bad2e:	f7ff ffd7 	bl	bace0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bad32:	6823      	ldr	r3, [r4, #0]
   bad34:	b113      	cbz	r3, bad3c <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bad36:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bad38:	2300      	movs	r3, #0
   bad3a:	6023      	str	r3, [r4, #0]
    }
   bad3c:	bd38      	pop	{r3, r4, r5, pc}

000bad3e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bad3e:	b507      	push	{r0, r1, r2, lr}
   bad40:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bad42:	2100      	movs	r1, #0
{
   bad44:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bad46:	9100      	str	r1, [sp, #0]
   bad48:	2001      	movs	r0, #1
   bad4a:	218c      	movs	r1, #140	; 0x8c
   bad4c:	f7fd fdda 	bl	b8904 <system_reset>
}
   bad50:	b003      	add	sp, #12
   bad52:	f85d fb04 	ldr.w	pc, [sp], #4

000bad56 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bad56:	4601      	mov	r1, r0
    reset(0, flags);
   bad58:	2000      	movs	r0, #0
   bad5a:	f7ff bff0 	b.w	bad3e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bad5e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bad5e:	2000      	movs	r0, #0
   bad60:	f7ff bff9 	b.w	bad56 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bad64 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bad64:	b5f0      	push	{r4, r5, r6, r7, lr}
   bad66:	4d2b      	ldr	r5, [pc, #172]	; (bae14 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bad68:	7d0b      	ldrb	r3, [r1, #20]
   bad6a:	4604      	mov	r4, r0
   bad6c:	b08b      	sub	sp, #44	; 0x2c
   bad6e:	4608      	mov	r0, r1
   bad70:	1daf      	adds	r7, r5, #6
   bad72:	2b00      	cmp	r3, #0
   bad74:	d036      	beq.n	bade4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bad76:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bad78:	791b      	ldrb	r3, [r3, #4]
   bad7a:	2b00      	cmp	r3, #0
   bad7c:	d032      	beq.n	bade4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bad7e:	4b26      	ldr	r3, [pc, #152]	; (bae18 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bad80:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bad82:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bad84:	a902      	add	r1, sp, #8
   bad86:	3004      	adds	r0, #4
   bad88:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bad8c:	f7fd fdb0 	bl	b88f0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bad90:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bad94:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bad98:	b200      	sxth	r0, r0
   bad9a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bad9e:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bada2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bada4:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bada6:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bada8:	4628      	mov	r0, r5
   badaa:	f7ff ffa2 	bl	bacf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   badae:	a802      	add	r0, sp, #8
   badb0:	f7ff ff96 	bl	bace0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   badb4:	2300      	movs	r3, #0
   badb6:	6023      	str	r3, [r4, #0]
   badb8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   badba:	71a3      	strb	r3, [r4, #6]
   badbc:	8123      	strh	r3, [r4, #8]
   badbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   badc2:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   badc4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   badc8:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   badca:	f8d5 3006 	ldr.w	r3, [r5, #6]
   badce:	f8c4 3006 	str.w	r3, [r4, #6]
   badd2:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   badd4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   badd6:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   badd8:	4620      	mov	r0, r4
   badda:	f7ff ff8a 	bl	bacf2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   badde:	4620      	mov	r0, r4
   bade0:	b00b      	add	sp, #44	; 0x2c
   bade2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bade4:	2600      	movs	r6, #0
   bade6:	2320      	movs	r3, #32
   bade8:	e9cd 3602 	strd	r3, r6, [sp, #8]
   badec:	4b0b      	ldr	r3, [pc, #44]	; (bae1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   badee:	9300      	str	r3, [sp, #0]
   badf0:	aa02      	add	r2, sp, #8
   badf2:	4633      	mov	r3, r6
   badf4:	490a      	ldr	r1, [pc, #40]	; (bae20 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   badf6:	2032      	movs	r0, #50	; 0x32
   badf8:	f7fd fcfa 	bl	b87f0 <log_message>
            : wakeupSource_(nullptr),
   badfc:	4b06      	ldr	r3, [pc, #24]	; (bae18 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   badfe:	4805      	ldr	r0, [pc, #20]	; (bae14 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bae00:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bae02:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bae06:	a902      	add	r1, sp, #8
   bae08:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bae0c:	f7ff ff83 	bl	bad16 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bae10:	e7cd      	b.n	badae <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bae12:	bf00      	nop
   bae14:	2003e69c 	.word	0x2003e69c
   bae18:	ffff0000 	.word	0xffff0000
   bae1c:	000bd593 	.word	0x000bd593
   bae20:	000bd58c 	.word	0x000bd58c

000bae24 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bae24:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bae26:	2420      	movs	r4, #32
{
   bae28:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bae2a:	4622      	mov	r2, r4
   bae2c:	2100      	movs	r1, #0
   bae2e:	4668      	mov	r0, sp
   bae30:	f001 f9c0 	bl	bc1b4 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bae34:	2100      	movs	r1, #0
   bae36:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bae38:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bae3c:	f7fd fae0 	bl	b8400 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bae40:	9801      	ldr	r0, [sp, #4]
   bae42:	b008      	add	sp, #32
   bae44:	bd10      	pop	{r4, pc}
	...

000bae48 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bae48:	4b05      	ldr	r3, [pc, #20]	; (bae60 <_GLOBAL__sub_I_System+0x18>)
   bae4a:	2202      	movs	r2, #2
   bae4c:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bae4e:	4b05      	ldr	r3, [pc, #20]	; (bae64 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bae50:	4a05      	ldr	r2, [pc, #20]	; (bae68 <_GLOBAL__sub_I_System+0x20>)
   bae52:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bae54:	2000      	movs	r0, #0
   bae56:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bae5a:	f7fd bcfb 	b.w	b8854 <set_system_mode>
   bae5e:	bf00      	nop
   bae60:	2003e6a8 	.word	0x2003e6a8
   bae64:	2003e69c 	.word	0x2003e69c
   bae68:	ffff0000 	.word	0xffff0000

000bae6c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bae70:	4a15      	ldr	r2, [pc, #84]	; (baec8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bae72:	f8df 8060 	ldr.w	r8, [pc, #96]	; baed4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bae76:	e9d2 6300 	ldrd	r6, r3, [r2]
   bae7a:	1980      	adds	r0, r0, r6
   bae7c:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bae80:	4b12      	ldr	r3, [pc, #72]	; (baecc <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bae82:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bae86:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bae8a:	1986      	adds	r6, r0, r6
   bae8c:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bae90:	42bb      	cmp	r3, r7
   bae92:	bf08      	it	eq
   bae94:	42b2      	cmpeq	r2, r6
{
   bae96:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bae98:	d013      	beq.n	baec2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bae9a:	a903      	add	r1, sp, #12
   bae9c:	4668      	mov	r0, sp
   bae9e:	e9cd 6700 	strd	r6, r7, [sp]
   baea2:	f7fd fe19 	bl	b8ad8 <localtime_r>
	calendar_time.tm_year += 1900;
   baea6:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   baea8:	4d09      	ldr	r5, [pc, #36]	; (baed0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   baeaa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   baeae:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   baeb0:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   baeb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   baeb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   baeb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   baeb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   baeba:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   baebe:	6823      	ldr	r3, [r4, #0]
   baec0:	602b      	str	r3, [r5, #0]
    }
}
   baec2:	b00c      	add	sp, #48	; 0x30
   baec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   baec8:	2003e6e0 	.word	0x2003e6e0
   baecc:	2003e6d8 	.word	0x2003e6d8
   baed0:	2003e6b4 	.word	0x2003e6b4
   baed4:	2003e6e8 	.word	0x2003e6e8

000baed8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   baed8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   baeda:	2000      	movs	r0, #0
   baedc:	f7fd fd2c 	bl	b8938 <spark_sync_time_pending>
   baee0:	b128      	cbz	r0, baeee <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   baee2:	f7fd fd21 	bl	b8928 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   baee6:	f080 0001 	eor.w	r0, r0, #1
   baeea:	b2c0      	uxtb	r0, r0
    }
   baeec:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   baeee:	2001      	movs	r0, #1
   baef0:	e7fc      	b.n	baeec <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000baef4 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   baef4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   baef6:	f7ff ffb9 	bl	bae6c <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   baefa:	4b01      	ldr	r3, [pc, #4]	; (baf00 <_ZN9TimeClass3dayEx+0xc>)
   baefc:	68d8      	ldr	r0, [r3, #12]
   baefe:	bd08      	pop	{r3, pc}
   baf00:	2003e6b4 	.word	0x2003e6b4

000baf04 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   baf04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   baf06:	4602      	mov	r2, r0
   baf08:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   baf0a:	4668      	mov	r0, sp
    struct timeval tv = {
   baf0c:	2100      	movs	r1, #0
    };
   baf0e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   baf12:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   baf16:	f7fd fab3 	bl	b8480 <hal_rtc_set_time>
   baf1a:	4602      	mov	r2, r0
   baf1c:	b910      	cbnz	r0, baf24 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   baf1e:	4601      	mov	r1, r0
   baf20:	f7fd fcc0 	bl	b88a4 <system_notify_time_changed>
    }
}
   baf24:	b005      	add	sp, #20
   baf26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baf2c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   baf2c:	b530      	push	{r4, r5, lr}
   baf2e:	b093      	sub	sp, #76	; 0x4c
   baf30:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   baf34:	4b19      	ldr	r3, [pc, #100]	; (baf9c <_ZN9TimeClass7timeStrEx+0x70>)
{
   baf36:	4604      	mov	r4, r0
    t += time_zone_cache;
   baf38:	e9d3 1000 	ldrd	r1, r0, [r3]
   baf3c:	9b01      	ldr	r3, [sp, #4]
   baf3e:	1852      	adds	r2, r2, r1
   baf40:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   baf44:	4816      	ldr	r0, [pc, #88]	; (bafa0 <_ZN9TimeClass7timeStrEx+0x74>)
   baf46:	e9d0 1000 	ldrd	r1, r0, [r0]
   baf4a:	1852      	adds	r2, r2, r1
   baf4c:	eb43 0300 	adc.w	r3, r3, r0
   baf50:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   baf54:	2224      	movs	r2, #36	; 0x24
   baf56:	eb0d 0002 	add.w	r0, sp, r2
   baf5a:	2100      	movs	r1, #0
   baf5c:	f001 f92a 	bl	bc1b4 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   baf60:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   baf62:	a909      	add	r1, sp, #36	; 0x24
   baf64:	4668      	mov	r0, sp
   baf66:	f7fd fdb7 	bl	b8ad8 <localtime_r>
    char ascstr[26] = {};
   baf6a:	2216      	movs	r2, #22
   baf6c:	4629      	mov	r1, r5
   baf6e:	a803      	add	r0, sp, #12
   baf70:	9502      	str	r5, [sp, #8]
   baf72:	f001 f91f 	bl	bc1b4 <memset>
    asctime_r(&calendar_time, ascstr);
   baf76:	a902      	add	r1, sp, #8
   baf78:	a809      	add	r0, sp, #36	; 0x24
   baf7a:	f001 f8a1 	bl	bc0c0 <asctime_r>
    int len = strlen(ascstr);
   baf7e:	a802      	add	r0, sp, #8
   baf80:	f001 f9b5 	bl	bc2ee <strlen>
    ascstr[len-1] = 0; // remove final newline
   baf84:	ab12      	add	r3, sp, #72	; 0x48
   baf86:	4418      	add	r0, r3
    return String(ascstr);
   baf88:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   baf8a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   baf8e:	4620      	mov	r0, r4
   baf90:	f7ff fe27 	bl	babe2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   baf94:	4620      	mov	r0, r4
   baf96:	b013      	add	sp, #76	; 0x4c
   baf98:	bd30      	pop	{r4, r5, pc}
   baf9a:	bf00      	nop
   baf9c:	2003e6e0 	.word	0x2003e6e0
   bafa0:	2003e6d8 	.word	0x2003e6d8

000bafa4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bafa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bafa8:	b0a4      	sub	sp, #144	; 0x90
   bafaa:	4607      	mov	r7, r0
   bafac:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bafae:	a814      	add	r0, sp, #80	; 0x50
{
   bafb0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bafb2:	223f      	movs	r2, #63	; 0x3f
{
   bafb4:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bafb6:	f001 f9b6 	bl	bc326 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bafba:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bafbc:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bafbe:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bafc2:	f001 f994 	bl	bc2ee <strlen>
   bafc6:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bafc8:	bb4c      	cbnz	r4, bb01e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bafca:	4929      	ldr	r1, [pc, #164]	; (bb070 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bafcc:	a803      	add	r0, sp, #12
   bafce:	f001 f986 	bl	bc2de <strcpy>
   bafd2:	ac14      	add	r4, sp, #80	; 0x50
{
   bafd4:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bafd6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bafda:	45b1      	cmp	r9, r6
   bafdc:	d934      	bls.n	bb048 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bafde:	7823      	ldrb	r3, [r4, #0]
   bafe0:	2b25      	cmp	r3, #37	; 0x25
   bafe2:	f106 0a01 	add.w	sl, r6, #1
   bafe6:	d117      	bne.n	bb018 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bafe8:	7863      	ldrb	r3, [r4, #1]
   bafea:	2b7a      	cmp	r3, #122	; 0x7a
   bafec:	d114      	bne.n	bb018 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bafee:	a803      	add	r0, sp, #12
   baff0:	f001 f97d 	bl	bc2ee <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   baff4:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   baff6:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   baff8:	1830      	adds	r0, r6, r0
   baffa:	4418      	add	r0, r3
   baffc:	eba9 0206 	sub.w	r2, r9, r6
   bb000:	1ca1      	adds	r1, r4, #2
   bb002:	f001 f8af 	bl	bc164 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bb006:	462a      	mov	r2, r5
   bb008:	a903      	add	r1, sp, #12
   bb00a:	4620      	mov	r0, r4
   bb00c:	f001 f8aa 	bl	bc164 <memcpy>
            len = strlen(format_str);
   bb010:	a814      	add	r0, sp, #80	; 0x50
   bb012:	f001 f96c 	bl	bc2ee <strlen>
   bb016:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bb018:	3401      	adds	r4, #1
   bb01a:	4656      	mov	r6, sl
   bb01c:	e7db      	b.n	bafd6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bb01e:	233c      	movs	r3, #60	; 0x3c
   bb020:	fb94 f2f3 	sdiv	r2, r4, r3
   bb024:	2a00      	cmp	r2, #0
   bb026:	bfb8      	it	lt
   bb028:	4252      	neglt	r2, r2
   bb02a:	fbb2 f1f3 	udiv	r1, r2, r3
   bb02e:	fb03 2211 	mls	r2, r3, r1, r2
   bb032:	9200      	str	r2, [sp, #0]
   bb034:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bb038:	4a0e      	ldr	r2, [pc, #56]	; (bb074 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bb03a:	fb94 f3f3 	sdiv	r3, r4, r3
   bb03e:	2110      	movs	r1, #16
   bb040:	a803      	add	r0, sp, #12
   bb042:	f7fd fd11 	bl	b8a68 <snprintf>
   bb046:	e7c4      	b.n	bafd2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bb048:	2100      	movs	r1, #0
   bb04a:	222e      	movs	r2, #46	; 0x2e
   bb04c:	a808      	add	r0, sp, #32
   bb04e:	9107      	str	r1, [sp, #28]
   bb050:	f001 f8b0 	bl	bc1b4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bb054:	4643      	mov	r3, r8
   bb056:	aa14      	add	r2, sp, #80	; 0x50
   bb058:	2132      	movs	r1, #50	; 0x32
   bb05a:	a807      	add	r0, sp, #28
   bb05c:	f7fd fd34 	bl	b8ac8 <strftime>
    return String(buf);
   bb060:	a907      	add	r1, sp, #28
   bb062:	4638      	mov	r0, r7
   bb064:	f7ff fdbd 	bl	babe2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bb068:	4638      	mov	r0, r7
   bb06a:	b024      	add	sp, #144	; 0x90
   bb06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb070:	000bd5ba 	.word	0x000bd5ba
   bb074:	000bd5bc 	.word	0x000bd5bc

000bb078 <_ZN9TimeClass6formatExPKc>:
{
   bb078:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb07a:	b08d      	sub	sp, #52	; 0x34
   bb07c:	e9cd 2300 	strd	r2, r3, [sp]
   bb080:	9d12      	ldr	r5, [sp, #72]	; 0x48
   bb082:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   bb084:	b915      	cbnz	r5, bb08c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   bb086:	4b19      	ldr	r3, [pc, #100]	; (bb0ec <_ZN9TimeClass6formatExPKc+0x74>)
   bb088:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   bb08a:	b12d      	cbz	r5, bb098 <_ZN9TimeClass6formatExPKc+0x20>
   bb08c:	4b18      	ldr	r3, [pc, #96]	; (bb0f0 <_ZN9TimeClass6formatExPKc+0x78>)
   bb08e:	4628      	mov	r0, r5
   bb090:	6819      	ldr	r1, [r3, #0]
   bb092:	f001 f91a 	bl	bc2ca <strcmp>
   bb096:	b938      	cbnz	r0, bb0a8 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   bb098:	e9dd 2300 	ldrd	r2, r3, [sp]
   bb09c:	4620      	mov	r0, r4
   bb09e:	f7ff ff45 	bl	baf2c <_ZN9TimeClass7timeStrEx>
}
   bb0a2:	4620      	mov	r0, r4
   bb0a4:	b00d      	add	sp, #52	; 0x34
   bb0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   bb0a8:	4e12      	ldr	r6, [pc, #72]	; (bb0f4 <_ZN9TimeClass6formatExPKc+0x7c>)
   bb0aa:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   bb0ac:	4f12      	ldr	r7, [pc, #72]	; (bb0f8 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   bb0ae:	e9d6 3200 	ldrd	r3, r2, [r6]
   bb0b2:	185b      	adds	r3, r3, r1
   bb0b4:	9901      	ldr	r1, [sp, #4]
   bb0b6:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   bb0ba:	e9d7 0100 	ldrd	r0, r1, [r7]
   bb0be:	181b      	adds	r3, r3, r0
   bb0c0:	eb42 0201 	adc.w	r2, r2, r1
   bb0c4:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   bb0c8:	2100      	movs	r1, #0
   bb0ca:	2224      	movs	r2, #36	; 0x24
   bb0cc:	a803      	add	r0, sp, #12
   bb0ce:	f001 f871 	bl	bc1b4 <memset>
    localtime_r(&t, &calendar_time);
   bb0d2:	a903      	add	r1, sp, #12
   bb0d4:	4668      	mov	r0, sp
   bb0d6:	f7fd fcff 	bl	b8ad8 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   bb0da:	6832      	ldr	r2, [r6, #0]
   bb0dc:	683b      	ldr	r3, [r7, #0]
   bb0de:	a903      	add	r1, sp, #12
   bb0e0:	4413      	add	r3, r2
   bb0e2:	4620      	mov	r0, r4
   bb0e4:	462a      	mov	r2, r5
   bb0e6:	f7ff ff5d 	bl	bafa4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   bb0ea:	e7da      	b.n	bb0a2 <_ZN9TimeClass6formatExPKc+0x2a>
   bb0ec:	2003e6b0 	.word	0x2003e6b0
   bb0f0:	2003decc 	.word	0x2003decc
   bb0f4:	2003e6e0 	.word	0x2003e6e0
   bb0f8:	2003e6d8 	.word	0x2003e6d8

000bb0fc <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   bb0fc:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bb0fe:	2000      	movs	r0, #0
   bb100:	f7fd f9a6 	bl	b8450 <hal_rtc_time_is_valid>
    if (rtcstate)
   bb104:	4604      	mov	r4, r0
   bb106:	b9a0      	cbnz	r0, bb132 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bb108:	f7fd fb9c 	bl	b8844 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bb10c:	2801      	cmp	r0, #1
   bb10e:	d110      	bne.n	bb132 <_ZN9TimeClass7isValidEv+0x36>
   bb110:	4620      	mov	r0, r4
   bb112:	f7fd fbbf 	bl	b8894 <system_thread_get_state>
   bb116:	b960      	cbnz	r0, bb132 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bb118:	f7ff fede 	bl	baed8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bb11c:	b910      	cbnz	r0, bb124 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bb11e:	f7fd fbfb 	bl	b8918 <spark_process>
        while (_while() && !_condition()) {
   bb122:	e7f9      	b.n	bb118 <_ZN9TimeClass7isValidEv+0x1c>
   bb124:	f7ff fed8 	bl	baed8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bb128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bb12c:	2000      	movs	r0, #0
   bb12e:	f7fd b98f 	b.w	b8450 <hal_rtc_time_is_valid>
}
   bb132:	4620      	mov	r0, r4
   bb134:	bd10      	pop	{r4, pc}

000bb136 <_ZN9TimeClass3nowEv>:
{
   bb136:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bb138:	f7ff ffe0 	bl	bb0fc <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bb13c:	2210      	movs	r2, #16
   bb13e:	2100      	movs	r1, #0
   bb140:	4668      	mov	r0, sp
   bb142:	f001 f837 	bl	bc1b4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   bb146:	2100      	movs	r1, #0
   bb148:	4668      	mov	r0, sp
   bb14a:	f7fd f991 	bl	b8470 <hal_rtc_get_time>
}
   bb14e:	9800      	ldr	r0, [sp, #0]
   bb150:	b005      	add	sp, #20
   bb152:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb158 <_ZN9TimeClass3dayEv>:
{
   bb158:	b508      	push	{r3, lr}
	return day(now());
   bb15a:	f7ff ffec 	bl	bb136 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bb15e:	17c1      	asrs	r1, r0, #31
   bb160:	f7ff fe84 	bl	bae6c <_ZL22Refresh_UnixTime_Cachex>
}
   bb164:	4b01      	ldr	r3, [pc, #4]	; (bb16c <_ZN9TimeClass3dayEv+0x14>)
   bb166:	68d8      	ldr	r0, [r3, #12]
   bb168:	bd08      	pop	{r3, pc}
   bb16a:	bf00      	nop
   bb16c:	2003e6b4 	.word	0x2003e6b4

000bb170 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb170:	4b02      	ldr	r3, [pc, #8]	; (bb17c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb172:	681a      	ldr	r2, [r3, #0]
   bb174:	4b02      	ldr	r3, [pc, #8]	; (bb180 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb176:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb178:	4770      	bx	lr
   bb17a:	bf00      	nop
   bb17c:	2003decc 	.word	0x2003decc
   bb180:	2003e6b0 	.word	0x2003e6b0

000bb184 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb184:	4770      	bx	lr

000bb186 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb186:	7441      	strb	r1, [r0, #17]
}
   bb188:	4770      	bx	lr

000bb18a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb18a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb18c:	7c00      	ldrb	r0, [r0, #16]
   bb18e:	f7fd fac7 	bl	b8720 <hal_usart_available_data_for_write>
}
   bb192:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb196:	bd08      	pop	{r3, pc}

000bb198 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb198:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb19a:	7c00      	ldrb	r0, [r0, #16]
   bb19c:	f7fd fa98 	bl	b86d0 <hal_usart_available>
}
   bb1a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb1a4:	bd08      	pop	{r3, pc}

000bb1a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb1a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb1a8:	7c00      	ldrb	r0, [r0, #16]
   bb1aa:	f7fd faa1 	bl	b86f0 <hal_usart_peek>
}
   bb1ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb1b2:	bd08      	pop	{r3, pc}

000bb1b4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb1b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb1b6:	7c00      	ldrb	r0, [r0, #16]
   bb1b8:	f7fd fa92 	bl	b86e0 <hal_usart_read>
}
   bb1bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb1c0:	bd08      	pop	{r3, pc}

000bb1c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb1c2:	7c00      	ldrb	r0, [r0, #16]
   bb1c4:	f7fd ba9c 	b.w	b8700 <hal_usart_flush>

000bb1c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb1ca:	7c45      	ldrb	r5, [r0, #17]
{
   bb1cc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb1ce:	b12d      	cbz	r5, bb1dc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb1d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb1d2:	b003      	add	sp, #12
   bb1d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb1d8:	f7fd ba72 	b.w	b86c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb1dc:	7c00      	ldrb	r0, [r0, #16]
   bb1de:	9101      	str	r1, [sp, #4]
   bb1e0:	f7fd fa9e 	bl	b8720 <hal_usart_available_data_for_write>
   bb1e4:	2800      	cmp	r0, #0
   bb1e6:	9901      	ldr	r1, [sp, #4]
   bb1e8:	dcf2      	bgt.n	bb1d0 <_ZN11USARTSerial5writeEh+0x8>
}
   bb1ea:	4628      	mov	r0, r5
   bb1ec:	b003      	add	sp, #12
   bb1ee:	bd30      	pop	{r4, r5, pc}

000bb1f0 <_ZN11USARTSerialD0Ev>:
   bb1f0:	b510      	push	{r4, lr}
   bb1f2:	2114      	movs	r1, #20
   bb1f4:	4604      	mov	r4, r0
   bb1f6:	f7f8 ff52 	bl	b409e <_ZdlPvj>
   bb1fa:	4620      	mov	r0, r4
   bb1fc:	bd10      	pop	{r4, pc}
	...

000bb200 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb200:	b510      	push	{r4, lr}
   bb202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb206:	4604      	mov	r4, r0
   bb208:	4608      	mov	r0, r1
   bb20a:	4611      	mov	r1, r2
   bb20c:	2200      	movs	r2, #0
   bb20e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb212:	4b04      	ldr	r3, [pc, #16]	; (bb224 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb214:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb216:	2301      	movs	r3, #1
  _serial = serial;
   bb218:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb21a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb21c:	f7fd fa90 	bl	b8740 <hal_usart_init_ex>
}
   bb220:	4620      	mov	r0, r4
   bb222:	bd10      	pop	{r4, pc}
   bb224:	000bd5ec 	.word	0x000bd5ec

000bb228 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bb228:	7c00      	ldrb	r0, [r0, #16]
   bb22a:	2300      	movs	r3, #0
   bb22c:	f7fd ba80 	b.w	b8730 <hal_usart_begin_config>

000bb230 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bb230:	2200      	movs	r2, #0
   bb232:	f7ff bff9 	b.w	bb228 <_ZN11USARTSerial5beginEmm>

000bb236 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   bb236:	7c00      	ldrb	r0, [r0, #16]
   bb238:	f7fd ba3a 	b.w	b86b0 <hal_usart_end>

000bb23c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb23c:	7441      	strb	r1, [r0, #17]
}
   bb23e:	4770      	bx	lr

000bb240 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb240:	4770      	bx	lr

000bb242 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb242:	4770      	bx	lr

000bb244 <_ZN9USBSerial4readEv>:
{
   bb244:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb246:	2100      	movs	r1, #0
   bb248:	7c00      	ldrb	r0, [r0, #16]
   bb24a:	f7fd faa9 	bl	b87a0 <HAL_USB_USART_Receive_Data>
}
   bb24e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb252:	bd08      	pop	{r3, pc}

000bb254 <_ZN9USBSerial4peekEv>:
{
   bb254:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb256:	2101      	movs	r1, #1
   bb258:	7c00      	ldrb	r0, [r0, #16]
   bb25a:	f7fd faa1 	bl	b87a0 <HAL_USB_USART_Receive_Data>
}
   bb25e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb262:	bd08      	pop	{r3, pc}

000bb264 <_ZN9USBSerial17availableForWriteEv>:
{
   bb264:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb266:	7c00      	ldrb	r0, [r0, #16]
   bb268:	f7fd fa92 	bl	b8790 <HAL_USB_USART_Available_Data_For_Write>
}
   bb26c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb270:	bd08      	pop	{r3, pc}

000bb272 <_ZN9USBSerial9availableEv>:
{
   bb272:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb274:	7c00      	ldrb	r0, [r0, #16]
   bb276:	f7fd fa83 	bl	b8780 <HAL_USB_USART_Available_Data>
}
   bb27a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb27e:	bd08      	pop	{r3, pc}

000bb280 <_ZN9USBSerial5writeEh>:
{
   bb280:	b513      	push	{r0, r1, r4, lr}
   bb282:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb284:	7c00      	ldrb	r0, [r0, #16]
{
   bb286:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb288:	f7fd fa82 	bl	b8790 <HAL_USB_USART_Available_Data_For_Write>
   bb28c:	2800      	cmp	r0, #0
   bb28e:	9901      	ldr	r1, [sp, #4]
   bb290:	dc01      	bgt.n	bb296 <_ZN9USBSerial5writeEh+0x16>
   bb292:	7c60      	ldrb	r0, [r4, #17]
   bb294:	b120      	cbz	r0, bb2a0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb296:	7c20      	ldrb	r0, [r4, #16]
   bb298:	f7fd fa8a 	bl	b87b0 <HAL_USB_USART_Send_Data>
   bb29c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb2a0:	b002      	add	sp, #8
   bb2a2:	bd10      	pop	{r4, pc}

000bb2a4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb2a4:	7c00      	ldrb	r0, [r0, #16]
   bb2a6:	f7fd ba8b 	b.w	b87c0 <HAL_USB_USART_Flush_Data>

000bb2aa <_ZN9USBSerialD0Ev>:
   bb2aa:	b510      	push	{r4, lr}
   bb2ac:	2114      	movs	r1, #20
   bb2ae:	4604      	mov	r4, r0
   bb2b0:	f7f8 fef5 	bl	b409e <_ZdlPvj>
   bb2b4:	4620      	mov	r0, r4
   bb2b6:	bd10      	pop	{r4, pc}

000bb2b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb2b8:	b510      	push	{r4, lr}
   bb2ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb2be:	4604      	mov	r4, r0
   bb2c0:	4608      	mov	r0, r1
   bb2c2:	2100      	movs	r1, #0
   bb2c4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb2c8:	4b04      	ldr	r3, [pc, #16]	; (bb2dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb2ca:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb2cc:	2301      	movs	r3, #1
  _serial = serial;
   bb2ce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb2d0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb2d2:	4611      	mov	r1, r2
   bb2d4:	f7fd fa3c 	bl	b8750 <HAL_USB_USART_Init>
}
   bb2d8:	4620      	mov	r0, r4
   bb2da:	bd10      	pop	{r4, pc}
   bb2dc:	000bd61c 	.word	0x000bd61c

000bb2e0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb2e0:	7c00      	ldrb	r0, [r0, #16]
   bb2e2:	2200      	movs	r2, #0
   bb2e4:	f7fd ba3c 	b.w	b8760 <HAL_USB_USART_Begin>

000bb2e8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   bb2e8:	7c00      	ldrb	r0, [r0, #16]
   bb2ea:	f7fd ba41 	b.w	b8770 <HAL_USB_USART_End>

000bb2ee <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   bb2ee:	7c00      	ldrb	r0, [r0, #16]
   bb2f0:	f7fd ba6e 	b.w	b87d0 <HAL_USB_USART_Is_Connected>

000bb2f4 <_Z19acquireSerialBufferv>:
{
   bb2f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb2f6:	2214      	movs	r2, #20
{
   bb2f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb2fa:	2100      	movs	r1, #0
   bb2fc:	f000 ff5a 	bl	bc1b4 <memset>
}
   bb300:	4620      	mov	r0, r4
   bb302:	bd10      	pop	{r4, pc}

000bb304 <_Z16_fetch_usbserialv>:
{
   bb304:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb306:	4c0f      	ldr	r4, [pc, #60]	; (bb344 <_Z16_fetch_usbserialv+0x40>)
{
   bb308:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb30a:	a803      	add	r0, sp, #12
   bb30c:	f7ff fff2 	bl	bb2f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb310:	7821      	ldrb	r1, [r4, #0]
   bb312:	f3bf 8f5b 	dmb	ish
   bb316:	f011 0101 	ands.w	r1, r1, #1
   bb31a:	d10f      	bne.n	bb33c <_Z16_fetch_usbserialv+0x38>
   bb31c:	4620      	mov	r0, r4
   bb31e:	9101      	str	r1, [sp, #4]
   bb320:	f7f8 fecc 	bl	b40bc <__cxa_guard_acquire>
   bb324:	9901      	ldr	r1, [sp, #4]
   bb326:	b148      	cbz	r0, bb33c <_Z16_fetch_usbserialv+0x38>
   bb328:	aa03      	add	r2, sp, #12
   bb32a:	4807      	ldr	r0, [pc, #28]	; (bb348 <_Z16_fetch_usbserialv+0x44>)
   bb32c:	f7ff ffc4 	bl	bb2b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb330:	4620      	mov	r0, r4
   bb332:	f7f8 fec8 	bl	b40c6 <__cxa_guard_release>
   bb336:	4805      	ldr	r0, [pc, #20]	; (bb34c <_Z16_fetch_usbserialv+0x48>)
   bb338:	f000 fee8 	bl	bc10c <atexit>
	return _usbserial;
}
   bb33c:	4802      	ldr	r0, [pc, #8]	; (bb348 <_Z16_fetch_usbserialv+0x44>)
   bb33e:	b008      	add	sp, #32
   bb340:	bd10      	pop	{r4, pc}
   bb342:	bf00      	nop
   bb344:	2003e6f0 	.word	0x2003e6f0
   bb348:	2003e6f4 	.word	0x2003e6f4
   bb34c:	000bb241 	.word	0x000bb241

000bb350 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb350:	4b01      	ldr	r3, [pc, #4]	; (bb358 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb352:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb354:	4770      	bx	lr
   bb356:	bf00      	nop
   bb358:	2003ded0 	.word	0x2003ded0

000bb35c <serialEventRun>:
{
   bb35c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb35e:	4b0b      	ldr	r3, [pc, #44]	; (bb38c <serialEventRun+0x30>)
   bb360:	b143      	cbz	r3, bb374 <serialEventRun+0x18>
   bb362:	f7ff ffcf 	bl	bb304 <_Z16_fetch_usbserialv>
   bb366:	6803      	ldr	r3, [r0, #0]
   bb368:	691b      	ldr	r3, [r3, #16]
   bb36a:	4798      	blx	r3
   bb36c:	2800      	cmp	r0, #0
   bb36e:	dd01      	ble.n	bb374 <serialEventRun+0x18>
        serialEvent();
   bb370:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb374:	4b06      	ldr	r3, [pc, #24]	; (bb390 <serialEventRun+0x34>)
   bb376:	b143      	cbz	r3, bb38a <serialEventRun+0x2e>
   bb378:	f000 f9c2 	bl	bb700 <_Z22__fetch_global_Serial1v>
   bb37c:	6803      	ldr	r3, [r0, #0]
   bb37e:	691b      	ldr	r3, [r3, #16]
   bb380:	4798      	blx	r3
   bb382:	2800      	cmp	r0, #0
   bb384:	dd01      	ble.n	bb38a <serialEventRun+0x2e>
        serialEvent1();
   bb386:	f3af 8000 	nop.w
}
   bb38a:	bd08      	pop	{r3, pc}
	...

000bb394 <_post_loop>:
{
   bb394:	b508      	push	{r3, lr}
	serialEventRun();
   bb396:	f7ff ffe1 	bl	bb35c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb39a:	f7fd f851 	bl	b8440 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb39e:	4b01      	ldr	r3, [pc, #4]	; (bb3a4 <_post_loop+0x10>)
   bb3a0:	6018      	str	r0, [r3, #0]
}
   bb3a2:	bd08      	pop	{r3, pc}
   bb3a4:	2003e710 	.word	0x2003e710

000bb3a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb3a8:	4805      	ldr	r0, [pc, #20]	; (bb3c0 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb3aa:	4a06      	ldr	r2, [pc, #24]	; (bb3c4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb3ac:	4906      	ldr	r1, [pc, #24]	; (bb3c8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb3ae:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb3b0:	1a12      	subs	r2, r2, r0
   bb3b2:	f000 fed7 	bl	bc164 <memcpy>
    __backup_sram_signature = signature;
   bb3b6:	4b05      	ldr	r3, [pc, #20]	; (bb3cc <_Z33system_initialize_user_backup_ramv+0x24>)
   bb3b8:	4a05      	ldr	r2, [pc, #20]	; (bb3d0 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb3ba:	601a      	str	r2, [r3, #0]
}
   bb3bc:	bd08      	pop	{r3, pc}
   bb3be:	bf00      	nop
   bb3c0:	2003f400 	.word	0x2003f400
   bb3c4:	2003f404 	.word	0x2003f404
   bb3c8:	000bd8d4 	.word	0x000bd8d4
   bb3cc:	2003f400 	.word	0x2003f400
   bb3d0:	9a271c1e 	.word	0x9a271c1e

000bb3d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb3d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb3d6:	2300      	movs	r3, #0
   bb3d8:	9300      	str	r3, [sp, #0]
   bb3da:	461a      	mov	r2, r3
   bb3dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb3e0:	f7fd fa72 	bl	b88c8 <system_ctrl_set_result>
}
   bb3e4:	b003      	add	sp, #12
   bb3e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb3ec <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb3ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb3ee:	8843      	ldrh	r3, [r0, #2]
   bb3f0:	2b0a      	cmp	r3, #10
   bb3f2:	d008      	beq.n	bb406 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb3f4:	2b50      	cmp	r3, #80	; 0x50
   bb3f6:	d10b      	bne.n	bb410 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb3f8:	4b09      	ldr	r3, [pc, #36]	; (bb420 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb3fa:	681b      	ldr	r3, [r3, #0]
   bb3fc:	b14b      	cbz	r3, bb412 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb3fe:	b003      	add	sp, #12
   bb400:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb404:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb406:	f7ff ffe5 	bl	bb3d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb40a:	b003      	add	sp, #12
   bb40c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb410:	2300      	movs	r3, #0
   bb412:	9300      	str	r3, [sp, #0]
   bb414:	461a      	mov	r2, r3
   bb416:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb41a:	f7fd fa55 	bl	b88c8 <system_ctrl_set_result>
}
   bb41e:	e7f4      	b.n	bb40a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb420:	2003e70c 	.word	0x2003e70c

000bb424 <module_user_init_hook>:
{
   bb424:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb426:	4812      	ldr	r0, [pc, #72]	; (bb470 <module_user_init_hook+0x4c>)
   bb428:	2100      	movs	r1, #0
   bb42a:	f7fd fb45 	bl	b8ab8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb42e:	4b11      	ldr	r3, [pc, #68]	; (bb474 <module_user_init_hook+0x50>)
   bb430:	681a      	ldr	r2, [r3, #0]
   bb432:	4b11      	ldr	r3, [pc, #68]	; (bb478 <module_user_init_hook+0x54>)
   bb434:	429a      	cmp	r2, r3
   bb436:	4b11      	ldr	r3, [pc, #68]	; (bb47c <module_user_init_hook+0x58>)
   bb438:	bf0c      	ite	eq
   bb43a:	2201      	moveq	r2, #1
   bb43c:	2200      	movne	r2, #0
   bb43e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb440:	d001      	beq.n	bb446 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb442:	f7ff ffb1 	bl	bb3a8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb446:	f7fc ffeb 	bl	b8420 <HAL_RNG_GetRandomNumber>
   bb44a:	4604      	mov	r4, r0
    srand(seed);
   bb44c:	f000 feba 	bl	bc1c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb450:	4b0b      	ldr	r3, [pc, #44]	; (bb480 <module_user_init_hook+0x5c>)
   bb452:	b113      	cbz	r3, bb45a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb454:	4620      	mov	r0, r4
   bb456:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb45a:	2100      	movs	r1, #0
   bb45c:	4808      	ldr	r0, [pc, #32]	; (bb480 <module_user_init_hook+0x5c>)
   bb45e:	f7fd fa7b 	bl	b8958 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb466:	4807      	ldr	r0, [pc, #28]	; (bb484 <module_user_init_hook+0x60>)
   bb468:	2100      	movs	r1, #0
   bb46a:	f7fd ba23 	b.w	b88b4 <system_ctrl_set_app_request_handler>
   bb46e:	bf00      	nop
   bb470:	000bb351 	.word	0x000bb351
   bb474:	2003f400 	.word	0x2003f400
   bb478:	9a271c1e 	.word	0x9a271c1e
   bb47c:	2003e708 	.word	0x2003e708
   bb480:	00000000 	.word	0x00000000
   bb484:	000bb3ed 	.word	0x000bb3ed

000bb488 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   bb488:	b508      	push	{r3, lr}
   bb48a:	4b02      	ldr	r3, [pc, #8]	; (bb494 <spark_protocol_instance+0xc>)
   bb48c:	681b      	ldr	r3, [r3, #0]
   bb48e:	681b      	ldr	r3, [r3, #0]
   bb490:	9301      	str	r3, [sp, #4]
   bb492:	bd08      	pop	{r3, pc}
   bb494:	0003025c 	.word	0x0003025c

000bb498 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   bb498:	b508      	push	{r3, lr}
   bb49a:	4b02      	ldr	r3, [pc, #8]	; (bb4a4 <spark_protocol_set_product_id+0xc>)
   bb49c:	681b      	ldr	r3, [r3, #0]
   bb49e:	685b      	ldr	r3, [r3, #4]
   bb4a0:	9301      	str	r3, [sp, #4]
   bb4a2:	bd08      	pop	{r3, pc}
   bb4a4:	0003025c 	.word	0x0003025c

000bb4a8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   bb4a8:	b508      	push	{r3, lr}
   bb4aa:	4b02      	ldr	r3, [pc, #8]	; (bb4b4 <spark_protocol_set_product_firmware_version+0xc>)
   bb4ac:	681b      	ldr	r3, [r3, #0]
   bb4ae:	689b      	ldr	r3, [r3, #8]
   bb4b0:	9301      	str	r3, [sp, #4]
   bb4b2:	bd08      	pop	{r3, pc}
   bb4b4:	0003025c 	.word	0x0003025c

000bb4b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb4b8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb4ba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb4bc:	d902      	bls.n	bb4c4 <pinAvailable+0xc>
    return false;
   bb4be:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb4c0:	b002      	add	sp, #8
   bb4c2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb4c4:	f1a0 030b 	sub.w	r3, r0, #11
   bb4c8:	2b02      	cmp	r3, #2
   bb4ca:	d81a      	bhi.n	bb502 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb4cc:	4c17      	ldr	r4, [pc, #92]	; (bb52c <pinAvailable+0x74>)
   bb4ce:	7821      	ldrb	r1, [r4, #0]
   bb4d0:	f3bf 8f5b 	dmb	ish
   bb4d4:	f011 0101 	ands.w	r1, r1, #1
   bb4d8:	d10b      	bne.n	bb4f2 <pinAvailable+0x3a>
   bb4da:	4620      	mov	r0, r4
   bb4dc:	9101      	str	r1, [sp, #4]
   bb4de:	f7f8 fded 	bl	b40bc <__cxa_guard_acquire>
   bb4e2:	9901      	ldr	r1, [sp, #4]
   bb4e4:	b128      	cbz	r0, bb4f2 <pinAvailable+0x3a>
   bb4e6:	4812      	ldr	r0, [pc, #72]	; (bb530 <pinAvailable+0x78>)
   bb4e8:	f7ff fa70 	bl	ba9cc <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb4ec:	4620      	mov	r0, r4
   bb4ee:	f7f8 fdea 	bl	b40c6 <__cxa_guard_release>
   bb4f2:	4b0f      	ldr	r3, [pc, #60]	; (bb530 <pinAvailable+0x78>)
   bb4f4:	7818      	ldrb	r0, [r3, #0]
   bb4f6:	f7fd f8b3 	bl	b8660 <hal_spi_is_enabled>
   bb4fa:	2800      	cmp	r0, #0
   bb4fc:	d1df      	bne.n	bb4be <pinAvailable+0x6>
  return true; // 'pin' is available
   bb4fe:	2001      	movs	r0, #1
   bb500:	e7de      	b.n	bb4c0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb502:	2801      	cmp	r0, #1
   bb504:	d809      	bhi.n	bb51a <pinAvailable+0x62>
   bb506:	f000 f897 	bl	bb638 <_Z19__fetch_global_Wirev>
   bb50a:	2100      	movs	r1, #0
   bb50c:	7c00      	ldrb	r0, [r0, #16]
   bb50e:	f7fd f847 	bl	b85a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb512:	f080 0001 	eor.w	r0, r0, #1
   bb516:	b2c0      	uxtb	r0, r0
   bb518:	e7d2      	b.n	bb4c0 <pinAvailable+0x8>
   bb51a:	3809      	subs	r0, #9
   bb51c:	2801      	cmp	r0, #1
   bb51e:	d8ee      	bhi.n	bb4fe <pinAvailable+0x46>
   bb520:	f000 f8ee 	bl	bb700 <_Z22__fetch_global_Serial1v>
   bb524:	7c00      	ldrb	r0, [r0, #16]
   bb526:	f7fd f8f3 	bl	b8710 <hal_usart_is_enabled>
   bb52a:	e7f2      	b.n	bb512 <pinAvailable+0x5a>
   bb52c:	2003e3e4 	.word	0x2003e3e4
   bb530:	2003e3e8 	.word	0x2003e3e8

000bb534 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb534:	2823      	cmp	r0, #35	; 0x23
{
   bb536:	b538      	push	{r3, r4, r5, lr}
   bb538:	4604      	mov	r4, r0
   bb53a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb53c:	d80a      	bhi.n	bb554 <pinMode+0x20>
   bb53e:	29ff      	cmp	r1, #255	; 0xff
   bb540:	d008      	beq.n	bb554 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb542:	f7ff ffb9 	bl	bb4b8 <pinAvailable>
   bb546:	b128      	cbz	r0, bb554 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bb548:	4629      	mov	r1, r5
   bb54a:	4620      	mov	r0, r4
}
   bb54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bb550:	f7fc bfae 	b.w	b84b0 <HAL_Pin_Mode>
}
   bb554:	bd38      	pop	{r3, r4, r5, pc}

000bb556 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bb556:	b538      	push	{r3, r4, r5, lr}
   bb558:	4604      	mov	r4, r0
   bb55a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb55c:	f7fc ffb0 	bl	b84c0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb560:	28ff      	cmp	r0, #255	; 0xff
   bb562:	d010      	beq.n	bb586 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb564:	2806      	cmp	r0, #6
   bb566:	d804      	bhi.n	bb572 <digitalWrite+0x1c>
   bb568:	234d      	movs	r3, #77	; 0x4d
   bb56a:	fa23 f000 	lsr.w	r0, r3, r0
   bb56e:	07c3      	lsls	r3, r0, #31
   bb570:	d409      	bmi.n	bb586 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb572:	4620      	mov	r0, r4
   bb574:	f7ff ffa0 	bl	bb4b8 <pinAvailable>
   bb578:	b128      	cbz	r0, bb586 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bb57a:	4629      	mov	r1, r5
   bb57c:	4620      	mov	r0, r4
}
   bb57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bb582:	f7fc bfa5 	b.w	b84d0 <HAL_GPIO_Write>
}
   bb586:	bd38      	pop	{r3, r4, r5, pc}

000bb588 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bb588:	b510      	push	{r4, lr}
   bb58a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bb58c:	f7fc ff98 	bl	b84c0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb590:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb592:	b2db      	uxtb	r3, r3
   bb594:	2b01      	cmp	r3, #1
   bb596:	d908      	bls.n	bb5aa <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb598:	4620      	mov	r0, r4
   bb59a:	f7ff ff8d 	bl	bb4b8 <pinAvailable>
   bb59e:	b120      	cbz	r0, bb5aa <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bb5a0:	4620      	mov	r0, r4
}
   bb5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bb5a6:	f7fc bf9b 	b.w	b84e0 <HAL_GPIO_Read>
}
   bb5aa:	2000      	movs	r0, #0
   bb5ac:	bd10      	pop	{r4, pc}

000bb5ae <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb5ae:	280d      	cmp	r0, #13
{
   bb5b0:	b510      	push	{r4, lr}
   bb5b2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb5b4:	bf9c      	itt	ls
   bb5b6:	340e      	addls	r4, #14
   bb5b8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   bb5ba:	4620      	mov	r0, r4
   bb5bc:	f7ff ff7c 	bl	bb4b8 <pinAvailable>
   bb5c0:	b150      	cbz	r0, bb5d8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   bb5c2:	2103      	movs	r1, #3
   bb5c4:	4620      	mov	r0, r4
   bb5c6:	f7fc ff6b 	bl	b84a0 <HAL_Validate_Pin_Function>
   bb5ca:	2803      	cmp	r0, #3
   bb5cc:	d104      	bne.n	bb5d8 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb5ce:	4620      	mov	r0, r4
}
   bb5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb5d4:	f7fc bf9c 	b.w	b8510 <hal_adc_read>
}
   bb5d8:	2000      	movs	r0, #0
   bb5da:	bd10      	pop	{r4, pc}

000bb5dc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb5dc:	4770      	bx	lr

000bb5de <__tcf_1>:
   bb5de:	4770      	bx	lr

000bb5e0 <_Z17acquireWireBufferv>:
{
   bb5e0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb5e2:	2520      	movs	r5, #32
   bb5e4:	2314      	movs	r3, #20
{
   bb5e6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb5e8:	6003      	str	r3, [r0, #0]
   bb5ea:	6085      	str	r5, [r0, #8]
   bb5ec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb5ee:	4906      	ldr	r1, [pc, #24]	; (bb608 <_Z17acquireWireBufferv+0x28>)
   bb5f0:	4628      	mov	r0, r5
   bb5f2:	f000 f8ab 	bl	bb74c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb5f6:	4904      	ldr	r1, [pc, #16]	; (bb608 <_Z17acquireWireBufferv+0x28>)
	};
   bb5f8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bb5fa:	4628      	mov	r0, r5
   bb5fc:	f000 f8a6 	bl	bb74c <_ZnajRKSt9nothrow_t>
	};
   bb600:	60e0      	str	r0, [r4, #12]
}
   bb602:	4620      	mov	r0, r4
   bb604:	bd38      	pop	{r3, r4, r5, pc}
   bb606:	bf00      	nop
   bb608:	000bd644 	.word	0x000bd644

000bb60c <_Z18acquireWire1Bufferv>:
   bb60c:	b538      	push	{r3, r4, r5, lr}
   bb60e:	2520      	movs	r5, #32
   bb610:	2314      	movs	r3, #20
   bb612:	4604      	mov	r4, r0
   bb614:	6003      	str	r3, [r0, #0]
   bb616:	6085      	str	r5, [r0, #8]
   bb618:	6105      	str	r5, [r0, #16]
   bb61a:	4906      	ldr	r1, [pc, #24]	; (bb634 <_Z18acquireWire1Bufferv+0x28>)
   bb61c:	4628      	mov	r0, r5
   bb61e:	f000 f895 	bl	bb74c <_ZnajRKSt9nothrow_t>
   bb622:	4904      	ldr	r1, [pc, #16]	; (bb634 <_Z18acquireWire1Bufferv+0x28>)
   bb624:	6060      	str	r0, [r4, #4]
   bb626:	4628      	mov	r0, r5
   bb628:	f000 f890 	bl	bb74c <_ZnajRKSt9nothrow_t>
   bb62c:	60e0      	str	r0, [r4, #12]
   bb62e:	4620      	mov	r0, r4
   bb630:	bd38      	pop	{r3, r4, r5, pc}
   bb632:	bf00      	nop
   bb634:	000bd644 	.word	0x000bd644

000bb638 <_Z19__fetch_global_Wirev>:
{
   bb638:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb63a:	4d0e      	ldr	r5, [pc, #56]	; (bb674 <_Z19__fetch_global_Wirev+0x3c>)
   bb63c:	7829      	ldrb	r1, [r5, #0]
   bb63e:	f3bf 8f5b 	dmb	ish
   bb642:	f011 0401 	ands.w	r4, r1, #1
{
   bb646:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb648:	d111      	bne.n	bb66e <_Z19__fetch_global_Wirev+0x36>
   bb64a:	4628      	mov	r0, r5
   bb64c:	f7f8 fd36 	bl	b40bc <__cxa_guard_acquire>
   bb650:	b168      	cbz	r0, bb66e <_Z19__fetch_global_Wirev+0x36>
   bb652:	a801      	add	r0, sp, #4
   bb654:	f7ff ffc4 	bl	bb5e0 <_Z17acquireWireBufferv>
   bb658:	aa01      	add	r2, sp, #4
   bb65a:	4621      	mov	r1, r4
   bb65c:	4806      	ldr	r0, [pc, #24]	; (bb678 <_Z19__fetch_global_Wirev+0x40>)
   bb65e:	f7fd fc65 	bl	b8f2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb662:	4628      	mov	r0, r5
   bb664:	f7f8 fd2f 	bl	b40c6 <__cxa_guard_release>
   bb668:	4804      	ldr	r0, [pc, #16]	; (bb67c <_Z19__fetch_global_Wirev+0x44>)
   bb66a:	f000 fd4f 	bl	bc10c <atexit>
	return wire;
}
   bb66e:	4802      	ldr	r0, [pc, #8]	; (bb678 <_Z19__fetch_global_Wirev+0x40>)
   bb670:	b007      	add	sp, #28
   bb672:	bd30      	pop	{r4, r5, pc}
   bb674:	2003e714 	.word	0x2003e714
   bb678:	2003e71c 	.word	0x2003e71c
   bb67c:	000bb5dd 	.word	0x000bb5dd

000bb680 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   bb680:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb682:	4c0e      	ldr	r4, [pc, #56]	; (bb6bc <_Z20__fetch_global_Wire1v+0x3c>)
   bb684:	7823      	ldrb	r3, [r4, #0]
   bb686:	f3bf 8f5b 	dmb	ish
   bb68a:	07db      	lsls	r3, r3, #31
{
   bb68c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   bb68e:	d411      	bmi.n	bb6b4 <_Z20__fetch_global_Wire1v+0x34>
   bb690:	4620      	mov	r0, r4
   bb692:	f7f8 fd13 	bl	b40bc <__cxa_guard_acquire>
   bb696:	b168      	cbz	r0, bb6b4 <_Z20__fetch_global_Wire1v+0x34>
   bb698:	a801      	add	r0, sp, #4
   bb69a:	f7ff ffb7 	bl	bb60c <_Z18acquireWire1Bufferv>
   bb69e:	aa01      	add	r2, sp, #4
   bb6a0:	2101      	movs	r1, #1
   bb6a2:	4807      	ldr	r0, [pc, #28]	; (bb6c0 <_Z20__fetch_global_Wire1v+0x40>)
   bb6a4:	f7fd fc42 	bl	b8f2c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb6a8:	4620      	mov	r0, r4
   bb6aa:	f7f8 fd0c 	bl	b40c6 <__cxa_guard_release>
   bb6ae:	4805      	ldr	r0, [pc, #20]	; (bb6c4 <_Z20__fetch_global_Wire1v+0x44>)
   bb6b0:	f000 fd2c 	bl	bc10c <atexit>
	return wire;
}
   bb6b4:	4802      	ldr	r0, [pc, #8]	; (bb6c0 <_Z20__fetch_global_Wire1v+0x40>)
   bb6b6:	b006      	add	sp, #24
   bb6b8:	bd10      	pop	{r4, pc}
   bb6ba:	bf00      	nop
   bb6bc:	2003e718 	.word	0x2003e718
   bb6c0:	2003e730 	.word	0x2003e730
   bb6c4:	000bb5df 	.word	0x000bb5df

000bb6c8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb6c8:	4770      	bx	lr
	...

000bb6cc <_Z20acquireSerial1Bufferv>:
{
   bb6cc:	b538      	push	{r3, r4, r5, lr}
   bb6ce:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb6d0:	2514      	movs	r5, #20
   bb6d2:	462a      	mov	r2, r5
   bb6d4:	2100      	movs	r1, #0
   bb6d6:	f000 fd6d 	bl	bc1b4 <memset>
   bb6da:	8025      	strh	r5, [r4, #0]
   bb6dc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb6de:	4907      	ldr	r1, [pc, #28]	; (bb6fc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb6e0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb6e2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb6e4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb6e6:	f000 f831 	bl	bb74c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb6ea:	4904      	ldr	r1, [pc, #16]	; (bb6fc <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb6ec:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb6ee:	4628      	mov	r0, r5
   bb6f0:	f000 f82c 	bl	bb74c <_ZnajRKSt9nothrow_t>
    };
   bb6f4:	60e0      	str	r0, [r4, #12]
}
   bb6f6:	4620      	mov	r0, r4
   bb6f8:	bd38      	pop	{r3, r4, r5, pc}
   bb6fa:	bf00      	nop
   bb6fc:	000bd644 	.word	0x000bd644

000bb700 <_Z22__fetch_global_Serial1v>:
{
   bb700:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb702:	4d0e      	ldr	r5, [pc, #56]	; (bb73c <_Z22__fetch_global_Serial1v+0x3c>)
   bb704:	7829      	ldrb	r1, [r5, #0]
   bb706:	f3bf 8f5b 	dmb	ish
   bb70a:	f011 0401 	ands.w	r4, r1, #1
{
   bb70e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb710:	d111      	bne.n	bb736 <_Z22__fetch_global_Serial1v+0x36>
   bb712:	4628      	mov	r0, r5
   bb714:	f7f8 fcd2 	bl	b40bc <__cxa_guard_acquire>
   bb718:	b168      	cbz	r0, bb736 <_Z22__fetch_global_Serial1v+0x36>
   bb71a:	a801      	add	r0, sp, #4
   bb71c:	f7ff ffd6 	bl	bb6cc <_Z20acquireSerial1Bufferv>
   bb720:	aa01      	add	r2, sp, #4
   bb722:	4621      	mov	r1, r4
   bb724:	4806      	ldr	r0, [pc, #24]	; (bb740 <_Z22__fetch_global_Serial1v+0x40>)
   bb726:	f7ff fd6b 	bl	bb200 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb72a:	4628      	mov	r0, r5
   bb72c:	f7f8 fccb 	bl	b40c6 <__cxa_guard_release>
   bb730:	4804      	ldr	r0, [pc, #16]	; (bb744 <_Z22__fetch_global_Serial1v+0x44>)
   bb732:	f000 fceb 	bl	bc10c <atexit>
    return serial1;
}
   bb736:	4802      	ldr	r0, [pc, #8]	; (bb740 <_Z22__fetch_global_Serial1v+0x40>)
   bb738:	b007      	add	sp, #28
   bb73a:	bd30      	pop	{r4, r5, pc}
   bb73c:	2003e744 	.word	0x2003e744
   bb740:	2003e748 	.word	0x2003e748
   bb744:	000bb6c9 	.word	0x000bb6c9

000bb748 <_ZnwjRKSt9nothrow_t>:
   bb748:	f7f8 bca5 	b.w	b4096 <_Znwj>

000bb74c <_ZnajRKSt9nothrow_t>:
   bb74c:	f7f8 bca5 	b.w	b409a <_Znaj>

000bb750 <_ZSt25__throw_bad_function_callv>:
   bb750:	b508      	push	{r3, lr}
   bb752:	f7fd f999 	bl	b8a88 <abort>
	...

000bb758 <__aeabi_drsub>:
   bb758:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb75c:	e002      	b.n	bb764 <__adddf3>
   bb75e:	bf00      	nop

000bb760 <__aeabi_dsub>:
   bb760:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb764 <__adddf3>:
   bb764:	b530      	push	{r4, r5, lr}
   bb766:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb76a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb76e:	ea94 0f05 	teq	r4, r5
   bb772:	bf08      	it	eq
   bb774:	ea90 0f02 	teqeq	r0, r2
   bb778:	bf1f      	itttt	ne
   bb77a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb77e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb782:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb786:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb78a:	f000 80e2 	beq.w	bb952 <__adddf3+0x1ee>
   bb78e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb792:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb796:	bfb8      	it	lt
   bb798:	426d      	neglt	r5, r5
   bb79a:	dd0c      	ble.n	bb7b6 <__adddf3+0x52>
   bb79c:	442c      	add	r4, r5
   bb79e:	ea80 0202 	eor.w	r2, r0, r2
   bb7a2:	ea81 0303 	eor.w	r3, r1, r3
   bb7a6:	ea82 0000 	eor.w	r0, r2, r0
   bb7aa:	ea83 0101 	eor.w	r1, r3, r1
   bb7ae:	ea80 0202 	eor.w	r2, r0, r2
   bb7b2:	ea81 0303 	eor.w	r3, r1, r3
   bb7b6:	2d36      	cmp	r5, #54	; 0x36
   bb7b8:	bf88      	it	hi
   bb7ba:	bd30      	pophi	{r4, r5, pc}
   bb7bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb7c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb7c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb7c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb7cc:	d002      	beq.n	bb7d4 <__adddf3+0x70>
   bb7ce:	4240      	negs	r0, r0
   bb7d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb7d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb7d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb7dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb7e0:	d002      	beq.n	bb7e8 <__adddf3+0x84>
   bb7e2:	4252      	negs	r2, r2
   bb7e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb7e8:	ea94 0f05 	teq	r4, r5
   bb7ec:	f000 80a7 	beq.w	bb93e <__adddf3+0x1da>
   bb7f0:	f1a4 0401 	sub.w	r4, r4, #1
   bb7f4:	f1d5 0e20 	rsbs	lr, r5, #32
   bb7f8:	db0d      	blt.n	bb816 <__adddf3+0xb2>
   bb7fa:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb7fe:	fa22 f205 	lsr.w	r2, r2, r5
   bb802:	1880      	adds	r0, r0, r2
   bb804:	f141 0100 	adc.w	r1, r1, #0
   bb808:	fa03 f20e 	lsl.w	r2, r3, lr
   bb80c:	1880      	adds	r0, r0, r2
   bb80e:	fa43 f305 	asr.w	r3, r3, r5
   bb812:	4159      	adcs	r1, r3
   bb814:	e00e      	b.n	bb834 <__adddf3+0xd0>
   bb816:	f1a5 0520 	sub.w	r5, r5, #32
   bb81a:	f10e 0e20 	add.w	lr, lr, #32
   bb81e:	2a01      	cmp	r2, #1
   bb820:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb824:	bf28      	it	cs
   bb826:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb82a:	fa43 f305 	asr.w	r3, r3, r5
   bb82e:	18c0      	adds	r0, r0, r3
   bb830:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb838:	d507      	bpl.n	bb84a <__adddf3+0xe6>
   bb83a:	f04f 0e00 	mov.w	lr, #0
   bb83e:	f1dc 0c00 	rsbs	ip, ip, #0
   bb842:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb846:	eb6e 0101 	sbc.w	r1, lr, r1
   bb84a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb84e:	d31b      	bcc.n	bb888 <__adddf3+0x124>
   bb850:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb854:	d30c      	bcc.n	bb870 <__adddf3+0x10c>
   bb856:	0849      	lsrs	r1, r1, #1
   bb858:	ea5f 0030 	movs.w	r0, r0, rrx
   bb85c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb860:	f104 0401 	add.w	r4, r4, #1
   bb864:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb868:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb86c:	f080 809a 	bcs.w	bb9a4 <__adddf3+0x240>
   bb870:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb874:	bf08      	it	eq
   bb876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb87a:	f150 0000 	adcs.w	r0, r0, #0
   bb87e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb882:	ea41 0105 	orr.w	r1, r1, r5
   bb886:	bd30      	pop	{r4, r5, pc}
   bb888:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb88c:	4140      	adcs	r0, r0
   bb88e:	eb41 0101 	adc.w	r1, r1, r1
   bb892:	3c01      	subs	r4, #1
   bb894:	bf28      	it	cs
   bb896:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb89a:	d2e9      	bcs.n	bb870 <__adddf3+0x10c>
   bb89c:	f091 0f00 	teq	r1, #0
   bb8a0:	bf04      	itt	eq
   bb8a2:	4601      	moveq	r1, r0
   bb8a4:	2000      	moveq	r0, #0
   bb8a6:	fab1 f381 	clz	r3, r1
   bb8aa:	bf08      	it	eq
   bb8ac:	3320      	addeq	r3, #32
   bb8ae:	f1a3 030b 	sub.w	r3, r3, #11
   bb8b2:	f1b3 0220 	subs.w	r2, r3, #32
   bb8b6:	da0c      	bge.n	bb8d2 <__adddf3+0x16e>
   bb8b8:	320c      	adds	r2, #12
   bb8ba:	dd08      	ble.n	bb8ce <__adddf3+0x16a>
   bb8bc:	f102 0c14 	add.w	ip, r2, #20
   bb8c0:	f1c2 020c 	rsb	r2, r2, #12
   bb8c4:	fa01 f00c 	lsl.w	r0, r1, ip
   bb8c8:	fa21 f102 	lsr.w	r1, r1, r2
   bb8cc:	e00c      	b.n	bb8e8 <__adddf3+0x184>
   bb8ce:	f102 0214 	add.w	r2, r2, #20
   bb8d2:	bfd8      	it	le
   bb8d4:	f1c2 0c20 	rsble	ip, r2, #32
   bb8d8:	fa01 f102 	lsl.w	r1, r1, r2
   bb8dc:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb8e0:	bfdc      	itt	le
   bb8e2:	ea41 010c 	orrle.w	r1, r1, ip
   bb8e6:	4090      	lslle	r0, r2
   bb8e8:	1ae4      	subs	r4, r4, r3
   bb8ea:	bfa2      	ittt	ge
   bb8ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb8f0:	4329      	orrge	r1, r5
   bb8f2:	bd30      	popge	{r4, r5, pc}
   bb8f4:	ea6f 0404 	mvn.w	r4, r4
   bb8f8:	3c1f      	subs	r4, #31
   bb8fa:	da1c      	bge.n	bb936 <__adddf3+0x1d2>
   bb8fc:	340c      	adds	r4, #12
   bb8fe:	dc0e      	bgt.n	bb91e <__adddf3+0x1ba>
   bb900:	f104 0414 	add.w	r4, r4, #20
   bb904:	f1c4 0220 	rsb	r2, r4, #32
   bb908:	fa20 f004 	lsr.w	r0, r0, r4
   bb90c:	fa01 f302 	lsl.w	r3, r1, r2
   bb910:	ea40 0003 	orr.w	r0, r0, r3
   bb914:	fa21 f304 	lsr.w	r3, r1, r4
   bb918:	ea45 0103 	orr.w	r1, r5, r3
   bb91c:	bd30      	pop	{r4, r5, pc}
   bb91e:	f1c4 040c 	rsb	r4, r4, #12
   bb922:	f1c4 0220 	rsb	r2, r4, #32
   bb926:	fa20 f002 	lsr.w	r0, r0, r2
   bb92a:	fa01 f304 	lsl.w	r3, r1, r4
   bb92e:	ea40 0003 	orr.w	r0, r0, r3
   bb932:	4629      	mov	r1, r5
   bb934:	bd30      	pop	{r4, r5, pc}
   bb936:	fa21 f004 	lsr.w	r0, r1, r4
   bb93a:	4629      	mov	r1, r5
   bb93c:	bd30      	pop	{r4, r5, pc}
   bb93e:	f094 0f00 	teq	r4, #0
   bb942:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb946:	bf06      	itte	eq
   bb948:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb94c:	3401      	addeq	r4, #1
   bb94e:	3d01      	subne	r5, #1
   bb950:	e74e      	b.n	bb7f0 <__adddf3+0x8c>
   bb952:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb956:	bf18      	it	ne
   bb958:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb95c:	d029      	beq.n	bb9b2 <__adddf3+0x24e>
   bb95e:	ea94 0f05 	teq	r4, r5
   bb962:	bf08      	it	eq
   bb964:	ea90 0f02 	teqeq	r0, r2
   bb968:	d005      	beq.n	bb976 <__adddf3+0x212>
   bb96a:	ea54 0c00 	orrs.w	ip, r4, r0
   bb96e:	bf04      	itt	eq
   bb970:	4619      	moveq	r1, r3
   bb972:	4610      	moveq	r0, r2
   bb974:	bd30      	pop	{r4, r5, pc}
   bb976:	ea91 0f03 	teq	r1, r3
   bb97a:	bf1e      	ittt	ne
   bb97c:	2100      	movne	r1, #0
   bb97e:	2000      	movne	r0, #0
   bb980:	bd30      	popne	{r4, r5, pc}
   bb982:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb986:	d105      	bne.n	bb994 <__adddf3+0x230>
   bb988:	0040      	lsls	r0, r0, #1
   bb98a:	4149      	adcs	r1, r1
   bb98c:	bf28      	it	cs
   bb98e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb992:	bd30      	pop	{r4, r5, pc}
   bb994:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb998:	bf3c      	itt	cc
   bb99a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb99e:	bd30      	popcc	{r4, r5, pc}
   bb9a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb9a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb9a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb9ac:	f04f 0000 	mov.w	r0, #0
   bb9b0:	bd30      	pop	{r4, r5, pc}
   bb9b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb9b6:	bf1a      	itte	ne
   bb9b8:	4619      	movne	r1, r3
   bb9ba:	4610      	movne	r0, r2
   bb9bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb9c0:	bf1c      	itt	ne
   bb9c2:	460b      	movne	r3, r1
   bb9c4:	4602      	movne	r2, r0
   bb9c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb9ca:	bf06      	itte	eq
   bb9cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb9d0:	ea91 0f03 	teqeq	r1, r3
   bb9d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb9d8:	bd30      	pop	{r4, r5, pc}
   bb9da:	bf00      	nop

000bb9dc <__aeabi_ui2d>:
   bb9dc:	f090 0f00 	teq	r0, #0
   bb9e0:	bf04      	itt	eq
   bb9e2:	2100      	moveq	r1, #0
   bb9e4:	4770      	bxeq	lr
   bb9e6:	b530      	push	{r4, r5, lr}
   bb9e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb9ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb9f0:	f04f 0500 	mov.w	r5, #0
   bb9f4:	f04f 0100 	mov.w	r1, #0
   bb9f8:	e750      	b.n	bb89c <__adddf3+0x138>
   bb9fa:	bf00      	nop

000bb9fc <__aeabi_i2d>:
   bb9fc:	f090 0f00 	teq	r0, #0
   bba00:	bf04      	itt	eq
   bba02:	2100      	moveq	r1, #0
   bba04:	4770      	bxeq	lr
   bba06:	b530      	push	{r4, r5, lr}
   bba08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bba0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bba10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bba14:	bf48      	it	mi
   bba16:	4240      	negmi	r0, r0
   bba18:	f04f 0100 	mov.w	r1, #0
   bba1c:	e73e      	b.n	bb89c <__adddf3+0x138>
   bba1e:	bf00      	nop

000bba20 <__aeabi_f2d>:
   bba20:	0042      	lsls	r2, r0, #1
   bba22:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bba26:	ea4f 0131 	mov.w	r1, r1, rrx
   bba2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bba2e:	bf1f      	itttt	ne
   bba30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bba34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bba38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bba3c:	4770      	bxne	lr
   bba3e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bba42:	bf08      	it	eq
   bba44:	4770      	bxeq	lr
   bba46:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bba4a:	bf04      	itt	eq
   bba4c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bba50:	4770      	bxeq	lr
   bba52:	b530      	push	{r4, r5, lr}
   bba54:	f44f 7460 	mov.w	r4, #896	; 0x380
   bba58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bba5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bba60:	e71c      	b.n	bb89c <__adddf3+0x138>
   bba62:	bf00      	nop

000bba64 <__aeabi_ul2d>:
   bba64:	ea50 0201 	orrs.w	r2, r0, r1
   bba68:	bf08      	it	eq
   bba6a:	4770      	bxeq	lr
   bba6c:	b530      	push	{r4, r5, lr}
   bba6e:	f04f 0500 	mov.w	r5, #0
   bba72:	e00a      	b.n	bba8a <__aeabi_l2d+0x16>

000bba74 <__aeabi_l2d>:
   bba74:	ea50 0201 	orrs.w	r2, r0, r1
   bba78:	bf08      	it	eq
   bba7a:	4770      	bxeq	lr
   bba7c:	b530      	push	{r4, r5, lr}
   bba7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bba82:	d502      	bpl.n	bba8a <__aeabi_l2d+0x16>
   bba84:	4240      	negs	r0, r0
   bba86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bba8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bba8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bba92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bba96:	f43f aed8 	beq.w	bb84a <__adddf3+0xe6>
   bba9a:	f04f 0203 	mov.w	r2, #3
   bba9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbaa2:	bf18      	it	ne
   bbaa4:	3203      	addne	r2, #3
   bbaa6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bbaaa:	bf18      	it	ne
   bbaac:	3203      	addne	r2, #3
   bbaae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bbab2:	f1c2 0320 	rsb	r3, r2, #32
   bbab6:	fa00 fc03 	lsl.w	ip, r0, r3
   bbaba:	fa20 f002 	lsr.w	r0, r0, r2
   bbabe:	fa01 fe03 	lsl.w	lr, r1, r3
   bbac2:	ea40 000e 	orr.w	r0, r0, lr
   bbac6:	fa21 f102 	lsr.w	r1, r1, r2
   bbaca:	4414      	add	r4, r2
   bbacc:	e6bd      	b.n	bb84a <__adddf3+0xe6>
   bbace:	bf00      	nop

000bbad0 <__aeabi_dmul>:
   bbad0:	b570      	push	{r4, r5, r6, lr}
   bbad2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbad6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbada:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbade:	bf1d      	ittte	ne
   bbae0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbae4:	ea94 0f0c 	teqne	r4, ip
   bbae8:	ea95 0f0c 	teqne	r5, ip
   bbaec:	f000 f8de 	bleq	bbcac <__aeabi_dmul+0x1dc>
   bbaf0:	442c      	add	r4, r5
   bbaf2:	ea81 0603 	eor.w	r6, r1, r3
   bbaf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bbafa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bbafe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bbb02:	bf18      	it	ne
   bbb04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bbb08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbb0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bbb10:	d038      	beq.n	bbb84 <__aeabi_dmul+0xb4>
   bbb12:	fba0 ce02 	umull	ip, lr, r0, r2
   bbb16:	f04f 0500 	mov.w	r5, #0
   bbb1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bbb1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bbb22:	fbe0 e503 	umlal	lr, r5, r0, r3
   bbb26:	f04f 0600 	mov.w	r6, #0
   bbb2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bbb2e:	f09c 0f00 	teq	ip, #0
   bbb32:	bf18      	it	ne
   bbb34:	f04e 0e01 	orrne.w	lr, lr, #1
   bbb38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bbb3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bbb40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bbb44:	d204      	bcs.n	bbb50 <__aeabi_dmul+0x80>
   bbb46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bbb4a:	416d      	adcs	r5, r5
   bbb4c:	eb46 0606 	adc.w	r6, r6, r6
   bbb50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bbb54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bbb58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bbb5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bbb60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bbb64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbb68:	bf88      	it	hi
   bbb6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbb6e:	d81e      	bhi.n	bbbae <__aeabi_dmul+0xde>
   bbb70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bbb74:	bf08      	it	eq
   bbb76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bbb7a:	f150 0000 	adcs.w	r0, r0, #0
   bbb7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbb82:	bd70      	pop	{r4, r5, r6, pc}
   bbb84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bbb88:	ea46 0101 	orr.w	r1, r6, r1
   bbb8c:	ea40 0002 	orr.w	r0, r0, r2
   bbb90:	ea81 0103 	eor.w	r1, r1, r3
   bbb94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bbb98:	bfc2      	ittt	gt
   bbb9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbb9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbba2:	bd70      	popgt	{r4, r5, r6, pc}
   bbba4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbba8:	f04f 0e00 	mov.w	lr, #0
   bbbac:	3c01      	subs	r4, #1
   bbbae:	f300 80ab 	bgt.w	bbd08 <__aeabi_dmul+0x238>
   bbbb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bbbb6:	bfde      	ittt	le
   bbbb8:	2000      	movle	r0, #0
   bbbba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bbbbe:	bd70      	pople	{r4, r5, r6, pc}
   bbbc0:	f1c4 0400 	rsb	r4, r4, #0
   bbbc4:	3c20      	subs	r4, #32
   bbbc6:	da35      	bge.n	bbc34 <__aeabi_dmul+0x164>
   bbbc8:	340c      	adds	r4, #12
   bbbca:	dc1b      	bgt.n	bbc04 <__aeabi_dmul+0x134>
   bbbcc:	f104 0414 	add.w	r4, r4, #20
   bbbd0:	f1c4 0520 	rsb	r5, r4, #32
   bbbd4:	fa00 f305 	lsl.w	r3, r0, r5
   bbbd8:	fa20 f004 	lsr.w	r0, r0, r4
   bbbdc:	fa01 f205 	lsl.w	r2, r1, r5
   bbbe0:	ea40 0002 	orr.w	r0, r0, r2
   bbbe4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bbbe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bbbec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbbf0:	fa21 f604 	lsr.w	r6, r1, r4
   bbbf4:	eb42 0106 	adc.w	r1, r2, r6
   bbbf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbbfc:	bf08      	it	eq
   bbbfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbc02:	bd70      	pop	{r4, r5, r6, pc}
   bbc04:	f1c4 040c 	rsb	r4, r4, #12
   bbc08:	f1c4 0520 	rsb	r5, r4, #32
   bbc0c:	fa00 f304 	lsl.w	r3, r0, r4
   bbc10:	fa20 f005 	lsr.w	r0, r0, r5
   bbc14:	fa01 f204 	lsl.w	r2, r1, r4
   bbc18:	ea40 0002 	orr.w	r0, r0, r2
   bbc1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbc20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bbc24:	f141 0100 	adc.w	r1, r1, #0
   bbc28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbc2c:	bf08      	it	eq
   bbc2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbc32:	bd70      	pop	{r4, r5, r6, pc}
   bbc34:	f1c4 0520 	rsb	r5, r4, #32
   bbc38:	fa00 f205 	lsl.w	r2, r0, r5
   bbc3c:	ea4e 0e02 	orr.w	lr, lr, r2
   bbc40:	fa20 f304 	lsr.w	r3, r0, r4
   bbc44:	fa01 f205 	lsl.w	r2, r1, r5
   bbc48:	ea43 0302 	orr.w	r3, r3, r2
   bbc4c:	fa21 f004 	lsr.w	r0, r1, r4
   bbc50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbc54:	fa21 f204 	lsr.w	r2, r1, r4
   bbc58:	ea20 0002 	bic.w	r0, r0, r2
   bbc5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bbc60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bbc64:	bf08      	it	eq
   bbc66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bbc6a:	bd70      	pop	{r4, r5, r6, pc}
   bbc6c:	f094 0f00 	teq	r4, #0
   bbc70:	d10f      	bne.n	bbc92 <__aeabi_dmul+0x1c2>
   bbc72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bbc76:	0040      	lsls	r0, r0, #1
   bbc78:	eb41 0101 	adc.w	r1, r1, r1
   bbc7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbc80:	bf08      	it	eq
   bbc82:	3c01      	subeq	r4, #1
   bbc84:	d0f7      	beq.n	bbc76 <__aeabi_dmul+0x1a6>
   bbc86:	ea41 0106 	orr.w	r1, r1, r6
   bbc8a:	f095 0f00 	teq	r5, #0
   bbc8e:	bf18      	it	ne
   bbc90:	4770      	bxne	lr
   bbc92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bbc96:	0052      	lsls	r2, r2, #1
   bbc98:	eb43 0303 	adc.w	r3, r3, r3
   bbc9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bbca0:	bf08      	it	eq
   bbca2:	3d01      	subeq	r5, #1
   bbca4:	d0f7      	beq.n	bbc96 <__aeabi_dmul+0x1c6>
   bbca6:	ea43 0306 	orr.w	r3, r3, r6
   bbcaa:	4770      	bx	lr
   bbcac:	ea94 0f0c 	teq	r4, ip
   bbcb0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbcb4:	bf18      	it	ne
   bbcb6:	ea95 0f0c 	teqne	r5, ip
   bbcba:	d00c      	beq.n	bbcd6 <__aeabi_dmul+0x206>
   bbcbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbcc0:	bf18      	it	ne
   bbcc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbcc6:	d1d1      	bne.n	bbc6c <__aeabi_dmul+0x19c>
   bbcc8:	ea81 0103 	eor.w	r1, r1, r3
   bbccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbcd0:	f04f 0000 	mov.w	r0, #0
   bbcd4:	bd70      	pop	{r4, r5, r6, pc}
   bbcd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbcda:	bf06      	itte	eq
   bbcdc:	4610      	moveq	r0, r2
   bbcde:	4619      	moveq	r1, r3
   bbce0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbce4:	d019      	beq.n	bbd1a <__aeabi_dmul+0x24a>
   bbce6:	ea94 0f0c 	teq	r4, ip
   bbcea:	d102      	bne.n	bbcf2 <__aeabi_dmul+0x222>
   bbcec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bbcf0:	d113      	bne.n	bbd1a <__aeabi_dmul+0x24a>
   bbcf2:	ea95 0f0c 	teq	r5, ip
   bbcf6:	d105      	bne.n	bbd04 <__aeabi_dmul+0x234>
   bbcf8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bbcfc:	bf1c      	itt	ne
   bbcfe:	4610      	movne	r0, r2
   bbd00:	4619      	movne	r1, r3
   bbd02:	d10a      	bne.n	bbd1a <__aeabi_dmul+0x24a>
   bbd04:	ea81 0103 	eor.w	r1, r1, r3
   bbd08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bbd0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbd10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bbd14:	f04f 0000 	mov.w	r0, #0
   bbd18:	bd70      	pop	{r4, r5, r6, pc}
   bbd1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bbd1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bbd22:	bd70      	pop	{r4, r5, r6, pc}

000bbd24 <__aeabi_ddiv>:
   bbd24:	b570      	push	{r4, r5, r6, lr}
   bbd26:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bbd2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bbd2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bbd32:	bf1d      	ittte	ne
   bbd34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bbd38:	ea94 0f0c 	teqne	r4, ip
   bbd3c:	ea95 0f0c 	teqne	r5, ip
   bbd40:	f000 f8a7 	bleq	bbe92 <__aeabi_ddiv+0x16e>
   bbd44:	eba4 0405 	sub.w	r4, r4, r5
   bbd48:	ea81 0e03 	eor.w	lr, r1, r3
   bbd4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbd50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bbd54:	f000 8088 	beq.w	bbe68 <__aeabi_ddiv+0x144>
   bbd58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bbd5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bbd60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bbd64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bbd68:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bbd6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bbd70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bbd74:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bbd78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bbd7c:	429d      	cmp	r5, r3
   bbd7e:	bf08      	it	eq
   bbd80:	4296      	cmpeq	r6, r2
   bbd82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bbd86:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bbd8a:	d202      	bcs.n	bbd92 <__aeabi_ddiv+0x6e>
   bbd8c:	085b      	lsrs	r3, r3, #1
   bbd8e:	ea4f 0232 	mov.w	r2, r2, rrx
   bbd92:	1ab6      	subs	r6, r6, r2
   bbd94:	eb65 0503 	sbc.w	r5, r5, r3
   bbd98:	085b      	lsrs	r3, r3, #1
   bbd9a:	ea4f 0232 	mov.w	r2, r2, rrx
   bbd9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bbda2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bbda6:	ebb6 0e02 	subs.w	lr, r6, r2
   bbdaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbdae:	bf22      	ittt	cs
   bbdb0:	1ab6      	subcs	r6, r6, r2
   bbdb2:	4675      	movcs	r5, lr
   bbdb4:	ea40 000c 	orrcs.w	r0, r0, ip
   bbdb8:	085b      	lsrs	r3, r3, #1
   bbdba:	ea4f 0232 	mov.w	r2, r2, rrx
   bbdbe:	ebb6 0e02 	subs.w	lr, r6, r2
   bbdc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbdc6:	bf22      	ittt	cs
   bbdc8:	1ab6      	subcs	r6, r6, r2
   bbdca:	4675      	movcs	r5, lr
   bbdcc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bbdd0:	085b      	lsrs	r3, r3, #1
   bbdd2:	ea4f 0232 	mov.w	r2, r2, rrx
   bbdd6:	ebb6 0e02 	subs.w	lr, r6, r2
   bbdda:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbdde:	bf22      	ittt	cs
   bbde0:	1ab6      	subcs	r6, r6, r2
   bbde2:	4675      	movcs	r5, lr
   bbde4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bbde8:	085b      	lsrs	r3, r3, #1
   bbdea:	ea4f 0232 	mov.w	r2, r2, rrx
   bbdee:	ebb6 0e02 	subs.w	lr, r6, r2
   bbdf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bbdf6:	bf22      	ittt	cs
   bbdf8:	1ab6      	subcs	r6, r6, r2
   bbdfa:	4675      	movcs	r5, lr
   bbdfc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bbe00:	ea55 0e06 	orrs.w	lr, r5, r6
   bbe04:	d018      	beq.n	bbe38 <__aeabi_ddiv+0x114>
   bbe06:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bbe0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bbe0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bbe12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bbe16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bbe1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bbe1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bbe22:	d1c0      	bne.n	bbda6 <__aeabi_ddiv+0x82>
   bbe24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbe28:	d10b      	bne.n	bbe42 <__aeabi_ddiv+0x11e>
   bbe2a:	ea41 0100 	orr.w	r1, r1, r0
   bbe2e:	f04f 0000 	mov.w	r0, #0
   bbe32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bbe36:	e7b6      	b.n	bbda6 <__aeabi_ddiv+0x82>
   bbe38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bbe3c:	bf04      	itt	eq
   bbe3e:	4301      	orreq	r1, r0
   bbe40:	2000      	moveq	r0, #0
   bbe42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bbe46:	bf88      	it	hi
   bbe48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bbe4c:	f63f aeaf 	bhi.w	bbbae <__aeabi_dmul+0xde>
   bbe50:	ebb5 0c03 	subs.w	ip, r5, r3
   bbe54:	bf04      	itt	eq
   bbe56:	ebb6 0c02 	subseq.w	ip, r6, r2
   bbe5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bbe5e:	f150 0000 	adcs.w	r0, r0, #0
   bbe62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bbe66:	bd70      	pop	{r4, r5, r6, pc}
   bbe68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bbe6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bbe70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bbe74:	bfc2      	ittt	gt
   bbe76:	ebd4 050c 	rsbsgt	r5, r4, ip
   bbe7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bbe7e:	bd70      	popgt	{r4, r5, r6, pc}
   bbe80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbe84:	f04f 0e00 	mov.w	lr, #0
   bbe88:	3c01      	subs	r4, #1
   bbe8a:	e690      	b.n	bbbae <__aeabi_dmul+0xde>
   bbe8c:	ea45 0e06 	orr.w	lr, r5, r6
   bbe90:	e68d      	b.n	bbbae <__aeabi_dmul+0xde>
   bbe92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bbe96:	ea94 0f0c 	teq	r4, ip
   bbe9a:	bf08      	it	eq
   bbe9c:	ea95 0f0c 	teqeq	r5, ip
   bbea0:	f43f af3b 	beq.w	bbd1a <__aeabi_dmul+0x24a>
   bbea4:	ea94 0f0c 	teq	r4, ip
   bbea8:	d10a      	bne.n	bbec0 <__aeabi_ddiv+0x19c>
   bbeaa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bbeae:	f47f af34 	bne.w	bbd1a <__aeabi_dmul+0x24a>
   bbeb2:	ea95 0f0c 	teq	r5, ip
   bbeb6:	f47f af25 	bne.w	bbd04 <__aeabi_dmul+0x234>
   bbeba:	4610      	mov	r0, r2
   bbebc:	4619      	mov	r1, r3
   bbebe:	e72c      	b.n	bbd1a <__aeabi_dmul+0x24a>
   bbec0:	ea95 0f0c 	teq	r5, ip
   bbec4:	d106      	bne.n	bbed4 <__aeabi_ddiv+0x1b0>
   bbec6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bbeca:	f43f aefd 	beq.w	bbcc8 <__aeabi_dmul+0x1f8>
   bbece:	4610      	mov	r0, r2
   bbed0:	4619      	mov	r1, r3
   bbed2:	e722      	b.n	bbd1a <__aeabi_dmul+0x24a>
   bbed4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bbed8:	bf18      	it	ne
   bbeda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bbede:	f47f aec5 	bne.w	bbc6c <__aeabi_dmul+0x19c>
   bbee2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bbee6:	f47f af0d 	bne.w	bbd04 <__aeabi_dmul+0x234>
   bbeea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bbeee:	f47f aeeb 	bne.w	bbcc8 <__aeabi_dmul+0x1f8>
   bbef2:	e712      	b.n	bbd1a <__aeabi_dmul+0x24a>

000bbef4 <__gedf2>:
   bbef4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bbef8:	e006      	b.n	bbf08 <__cmpdf2+0x4>
   bbefa:	bf00      	nop

000bbefc <__ledf2>:
   bbefc:	f04f 0c01 	mov.w	ip, #1
   bbf00:	e002      	b.n	bbf08 <__cmpdf2+0x4>
   bbf02:	bf00      	nop

000bbf04 <__cmpdf2>:
   bbf04:	f04f 0c01 	mov.w	ip, #1
   bbf08:	f84d cd04 	str.w	ip, [sp, #-4]!
   bbf0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbf10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbf14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbf18:	bf18      	it	ne
   bbf1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bbf1e:	d01b      	beq.n	bbf58 <__cmpdf2+0x54>
   bbf20:	b001      	add	sp, #4
   bbf22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bbf26:	bf0c      	ite	eq
   bbf28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bbf2c:	ea91 0f03 	teqne	r1, r3
   bbf30:	bf02      	ittt	eq
   bbf32:	ea90 0f02 	teqeq	r0, r2
   bbf36:	2000      	moveq	r0, #0
   bbf38:	4770      	bxeq	lr
   bbf3a:	f110 0f00 	cmn.w	r0, #0
   bbf3e:	ea91 0f03 	teq	r1, r3
   bbf42:	bf58      	it	pl
   bbf44:	4299      	cmppl	r1, r3
   bbf46:	bf08      	it	eq
   bbf48:	4290      	cmpeq	r0, r2
   bbf4a:	bf2c      	ite	cs
   bbf4c:	17d8      	asrcs	r0, r3, #31
   bbf4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bbf52:	f040 0001 	orr.w	r0, r0, #1
   bbf56:	4770      	bx	lr
   bbf58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bbf5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbf60:	d102      	bne.n	bbf68 <__cmpdf2+0x64>
   bbf62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bbf66:	d107      	bne.n	bbf78 <__cmpdf2+0x74>
   bbf68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bbf6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bbf70:	d1d6      	bne.n	bbf20 <__cmpdf2+0x1c>
   bbf72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bbf76:	d0d3      	beq.n	bbf20 <__cmpdf2+0x1c>
   bbf78:	f85d 0b04 	ldr.w	r0, [sp], #4
   bbf7c:	4770      	bx	lr
   bbf7e:	bf00      	nop

000bbf80 <__aeabi_cdrcmple>:
   bbf80:	4684      	mov	ip, r0
   bbf82:	4610      	mov	r0, r2
   bbf84:	4662      	mov	r2, ip
   bbf86:	468c      	mov	ip, r1
   bbf88:	4619      	mov	r1, r3
   bbf8a:	4663      	mov	r3, ip
   bbf8c:	e000      	b.n	bbf90 <__aeabi_cdcmpeq>
   bbf8e:	bf00      	nop

000bbf90 <__aeabi_cdcmpeq>:
   bbf90:	b501      	push	{r0, lr}
   bbf92:	f7ff ffb7 	bl	bbf04 <__cmpdf2>
   bbf96:	2800      	cmp	r0, #0
   bbf98:	bf48      	it	mi
   bbf9a:	f110 0f00 	cmnmi.w	r0, #0
   bbf9e:	bd01      	pop	{r0, pc}

000bbfa0 <__aeabi_dcmpeq>:
   bbfa0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbfa4:	f7ff fff4 	bl	bbf90 <__aeabi_cdcmpeq>
   bbfa8:	bf0c      	ite	eq
   bbfaa:	2001      	moveq	r0, #1
   bbfac:	2000      	movne	r0, #0
   bbfae:	f85d fb08 	ldr.w	pc, [sp], #8
   bbfb2:	bf00      	nop

000bbfb4 <__aeabi_dcmplt>:
   bbfb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbfb8:	f7ff ffea 	bl	bbf90 <__aeabi_cdcmpeq>
   bbfbc:	bf34      	ite	cc
   bbfbe:	2001      	movcc	r0, #1
   bbfc0:	2000      	movcs	r0, #0
   bbfc2:	f85d fb08 	ldr.w	pc, [sp], #8
   bbfc6:	bf00      	nop

000bbfc8 <__aeabi_dcmple>:
   bbfc8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbfcc:	f7ff ffe0 	bl	bbf90 <__aeabi_cdcmpeq>
   bbfd0:	bf94      	ite	ls
   bbfd2:	2001      	movls	r0, #1
   bbfd4:	2000      	movhi	r0, #0
   bbfd6:	f85d fb08 	ldr.w	pc, [sp], #8
   bbfda:	bf00      	nop

000bbfdc <__aeabi_dcmpge>:
   bbfdc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbfe0:	f7ff ffce 	bl	bbf80 <__aeabi_cdrcmple>
   bbfe4:	bf94      	ite	ls
   bbfe6:	2001      	movls	r0, #1
   bbfe8:	2000      	movhi	r0, #0
   bbfea:	f85d fb08 	ldr.w	pc, [sp], #8
   bbfee:	bf00      	nop

000bbff0 <__aeabi_dcmpgt>:
   bbff0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbff4:	f7ff ffc4 	bl	bbf80 <__aeabi_cdrcmple>
   bbff8:	bf34      	ite	cc
   bbffa:	2001      	movcc	r0, #1
   bbffc:	2000      	movcs	r0, #0
   bbffe:	f85d fb08 	ldr.w	pc, [sp], #8
   bc002:	bf00      	nop

000bc004 <__aeabi_dcmpun>:
   bc004:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bc008:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc00c:	d102      	bne.n	bc014 <__aeabi_dcmpun+0x10>
   bc00e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bc012:	d10a      	bne.n	bc02a <__aeabi_dcmpun+0x26>
   bc014:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bc018:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bc01c:	d102      	bne.n	bc024 <__aeabi_dcmpun+0x20>
   bc01e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bc022:	d102      	bne.n	bc02a <__aeabi_dcmpun+0x26>
   bc024:	f04f 0000 	mov.w	r0, #0
   bc028:	4770      	bx	lr
   bc02a:	f04f 0001 	mov.w	r0, #1
   bc02e:	4770      	bx	lr

000bc030 <__aeabi_d2iz>:
   bc030:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bc034:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc038:	d215      	bcs.n	bc066 <__aeabi_d2iz+0x36>
   bc03a:	d511      	bpl.n	bc060 <__aeabi_d2iz+0x30>
   bc03c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc040:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc044:	d912      	bls.n	bc06c <__aeabi_d2iz+0x3c>
   bc046:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc04a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc04e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc052:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bc056:	fa23 f002 	lsr.w	r0, r3, r2
   bc05a:	bf18      	it	ne
   bc05c:	4240      	negne	r0, r0
   bc05e:	4770      	bx	lr
   bc060:	f04f 0000 	mov.w	r0, #0
   bc064:	4770      	bx	lr
   bc066:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc06a:	d105      	bne.n	bc078 <__aeabi_d2iz+0x48>
   bc06c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   bc070:	bf08      	it	eq
   bc072:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   bc076:	4770      	bx	lr
   bc078:	f04f 0000 	mov.w	r0, #0
   bc07c:	4770      	bx	lr
   bc07e:	bf00      	nop

000bc080 <__aeabi_d2uiz>:
   bc080:	004a      	lsls	r2, r1, #1
   bc082:	d211      	bcs.n	bc0a8 <__aeabi_d2uiz+0x28>
   bc084:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bc088:	d211      	bcs.n	bc0ae <__aeabi_d2uiz+0x2e>
   bc08a:	d50d      	bpl.n	bc0a8 <__aeabi_d2uiz+0x28>
   bc08c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bc090:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bc094:	d40e      	bmi.n	bc0b4 <__aeabi_d2uiz+0x34>
   bc096:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bc09a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bc09e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bc0a2:	fa23 f002 	lsr.w	r0, r3, r2
   bc0a6:	4770      	bx	lr
   bc0a8:	f04f 0000 	mov.w	r0, #0
   bc0ac:	4770      	bx	lr
   bc0ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bc0b2:	d102      	bne.n	bc0ba <__aeabi_d2uiz+0x3a>
   bc0b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc0b8:	4770      	bx	lr
   bc0ba:	f04f 0000 	mov.w	r0, #0
   bc0be:	4770      	bx	lr

000bc0c0 <asctime_r>:
   bc0c0:	b510      	push	{r4, lr}
   bc0c2:	460c      	mov	r4, r1
   bc0c4:	6941      	ldr	r1, [r0, #20]
   bc0c6:	6903      	ldr	r3, [r0, #16]
   bc0c8:	6982      	ldr	r2, [r0, #24]
   bc0ca:	b086      	sub	sp, #24
   bc0cc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   bc0d0:	9104      	str	r1, [sp, #16]
   bc0d2:	6801      	ldr	r1, [r0, #0]
   bc0d4:	9103      	str	r1, [sp, #12]
   bc0d6:	6841      	ldr	r1, [r0, #4]
   bc0d8:	9102      	str	r1, [sp, #8]
   bc0da:	6881      	ldr	r1, [r0, #8]
   bc0dc:	9101      	str	r1, [sp, #4]
   bc0de:	68c1      	ldr	r1, [r0, #12]
   bc0e0:	9100      	str	r1, [sp, #0]
   bc0e2:	4907      	ldr	r1, [pc, #28]	; (bc100 <asctime_r+0x40>)
   bc0e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bc0e8:	440b      	add	r3, r1
   bc0ea:	4906      	ldr	r1, [pc, #24]	; (bc104 <asctime_r+0x44>)
   bc0ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bc0f0:	440a      	add	r2, r1
   bc0f2:	4620      	mov	r0, r4
   bc0f4:	4904      	ldr	r1, [pc, #16]	; (bc108 <asctime_r+0x48>)
   bc0f6:	f7fc fcaf 	bl	b8a58 <siprintf>
   bc0fa:	4620      	mov	r0, r4
   bc0fc:	b006      	add	sp, #24
   bc0fe:	bd10      	pop	{r4, pc}
   bc100:	000bd67a 	.word	0x000bd67a
   bc104:	000bd665 	.word	0x000bd665
   bc108:	000bd645 	.word	0x000bd645

000bc10c <atexit>:
   bc10c:	2300      	movs	r3, #0
   bc10e:	4601      	mov	r1, r0
   bc110:	461a      	mov	r2, r3
   bc112:	4618      	mov	r0, r3
   bc114:	f000 b9ba 	b.w	bc48c <__register_exitproc>

000bc118 <gmtime>:
   bc118:	b538      	push	{r3, r4, r5, lr}
   bc11a:	4b0b      	ldr	r3, [pc, #44]	; (bc148 <gmtime+0x30>)
   bc11c:	681d      	ldr	r5, [r3, #0]
   bc11e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   bc120:	4604      	mov	r4, r0
   bc122:	b953      	cbnz	r3, bc13a <gmtime+0x22>
   bc124:	2024      	movs	r0, #36	; 0x24
   bc126:	f7fc fc7f 	bl	b8a28 <malloc>
   bc12a:	4602      	mov	r2, r0
   bc12c:	63e8      	str	r0, [r5, #60]	; 0x3c
   bc12e:	b920      	cbnz	r0, bc13a <gmtime+0x22>
   bc130:	4b06      	ldr	r3, [pc, #24]	; (bc14c <gmtime+0x34>)
   bc132:	4807      	ldr	r0, [pc, #28]	; (bc150 <gmtime+0x38>)
   bc134:	2139      	movs	r1, #57	; 0x39
   bc136:	f7fc fcb7 	bl	b8aa8 <__assert_func>
   bc13a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   bc13c:	4620      	mov	r0, r4
   bc13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc142:	f7fc bcd1 	b.w	b8ae8 <gmtime_r>
   bc146:	bf00      	nop
   bc148:	2003ded0 	.word	0x2003ded0
   bc14c:	000bd69e 	.word	0x000bd69e
   bc150:	000bd6b5 	.word	0x000bd6b5

000bc154 <isprint>:
   bc154:	4b02      	ldr	r3, [pc, #8]	; (bc160 <isprint+0xc>)
   bc156:	4418      	add	r0, r3
   bc158:	7840      	ldrb	r0, [r0, #1]
   bc15a:	f000 0097 	and.w	r0, r0, #151	; 0x97
   bc15e:	4770      	bx	lr
   bc160:	000bd767 	.word	0x000bd767

000bc164 <memcpy>:
   bc164:	440a      	add	r2, r1
   bc166:	4291      	cmp	r1, r2
   bc168:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bc16c:	d100      	bne.n	bc170 <memcpy+0xc>
   bc16e:	4770      	bx	lr
   bc170:	b510      	push	{r4, lr}
   bc172:	f811 4b01 	ldrb.w	r4, [r1], #1
   bc176:	f803 4f01 	strb.w	r4, [r3, #1]!
   bc17a:	4291      	cmp	r1, r2
   bc17c:	d1f9      	bne.n	bc172 <memcpy+0xe>
   bc17e:	bd10      	pop	{r4, pc}

000bc180 <memmove>:
   bc180:	4288      	cmp	r0, r1
   bc182:	b510      	push	{r4, lr}
   bc184:	eb01 0402 	add.w	r4, r1, r2
   bc188:	d902      	bls.n	bc190 <memmove+0x10>
   bc18a:	4284      	cmp	r4, r0
   bc18c:	4623      	mov	r3, r4
   bc18e:	d807      	bhi.n	bc1a0 <memmove+0x20>
   bc190:	1e43      	subs	r3, r0, #1
   bc192:	42a1      	cmp	r1, r4
   bc194:	d008      	beq.n	bc1a8 <memmove+0x28>
   bc196:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc19a:	f803 2f01 	strb.w	r2, [r3, #1]!
   bc19e:	e7f8      	b.n	bc192 <memmove+0x12>
   bc1a0:	4402      	add	r2, r0
   bc1a2:	4601      	mov	r1, r0
   bc1a4:	428a      	cmp	r2, r1
   bc1a6:	d100      	bne.n	bc1aa <memmove+0x2a>
   bc1a8:	bd10      	pop	{r4, pc}
   bc1aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bc1ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bc1b2:	e7f7      	b.n	bc1a4 <memmove+0x24>

000bc1b4 <memset>:
   bc1b4:	4402      	add	r2, r0
   bc1b6:	4603      	mov	r3, r0
   bc1b8:	4293      	cmp	r3, r2
   bc1ba:	d100      	bne.n	bc1be <memset+0xa>
   bc1bc:	4770      	bx	lr
   bc1be:	f803 1b01 	strb.w	r1, [r3], #1
   bc1c2:	e7f9      	b.n	bc1b8 <memset+0x4>

000bc1c4 <srand>:
   bc1c4:	b538      	push	{r3, r4, r5, lr}
   bc1c6:	4b10      	ldr	r3, [pc, #64]	; (bc208 <srand+0x44>)
   bc1c8:	681d      	ldr	r5, [r3, #0]
   bc1ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc1cc:	4604      	mov	r4, r0
   bc1ce:	b9b3      	cbnz	r3, bc1fe <srand+0x3a>
   bc1d0:	2018      	movs	r0, #24
   bc1d2:	f7fc fc29 	bl	b8a28 <malloc>
   bc1d6:	4602      	mov	r2, r0
   bc1d8:	63a8      	str	r0, [r5, #56]	; 0x38
   bc1da:	b920      	cbnz	r0, bc1e6 <srand+0x22>
   bc1dc:	4b0b      	ldr	r3, [pc, #44]	; (bc20c <srand+0x48>)
   bc1de:	480c      	ldr	r0, [pc, #48]	; (bc210 <srand+0x4c>)
   bc1e0:	2142      	movs	r1, #66	; 0x42
   bc1e2:	f7fc fc61 	bl	b8aa8 <__assert_func>
   bc1e6:	490b      	ldr	r1, [pc, #44]	; (bc214 <srand+0x50>)
   bc1e8:	4b0b      	ldr	r3, [pc, #44]	; (bc218 <srand+0x54>)
   bc1ea:	e9c0 1300 	strd	r1, r3, [r0]
   bc1ee:	4b0b      	ldr	r3, [pc, #44]	; (bc21c <srand+0x58>)
   bc1f0:	6083      	str	r3, [r0, #8]
   bc1f2:	230b      	movs	r3, #11
   bc1f4:	8183      	strh	r3, [r0, #12]
   bc1f6:	2100      	movs	r1, #0
   bc1f8:	2001      	movs	r0, #1
   bc1fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bc1fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bc200:	2200      	movs	r2, #0
   bc202:	611c      	str	r4, [r3, #16]
   bc204:	615a      	str	r2, [r3, #20]
   bc206:	bd38      	pop	{r3, r4, r5, pc}
   bc208:	2003ded0 	.word	0x2003ded0
   bc20c:	000bd69e 	.word	0x000bd69e
   bc210:	000bd70e 	.word	0x000bd70e
   bc214:	abcd330e 	.word	0xabcd330e
   bc218:	e66d1234 	.word	0xe66d1234
   bc21c:	0005deec 	.word	0x0005deec

000bc220 <rand>:
   bc220:	4b16      	ldr	r3, [pc, #88]	; (bc27c <rand+0x5c>)
   bc222:	b510      	push	{r4, lr}
   bc224:	681c      	ldr	r4, [r3, #0]
   bc226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc228:	b9b3      	cbnz	r3, bc258 <rand+0x38>
   bc22a:	2018      	movs	r0, #24
   bc22c:	f7fc fbfc 	bl	b8a28 <malloc>
   bc230:	63a0      	str	r0, [r4, #56]	; 0x38
   bc232:	b928      	cbnz	r0, bc240 <rand+0x20>
   bc234:	4602      	mov	r2, r0
   bc236:	4b12      	ldr	r3, [pc, #72]	; (bc280 <rand+0x60>)
   bc238:	4812      	ldr	r0, [pc, #72]	; (bc284 <rand+0x64>)
   bc23a:	214e      	movs	r1, #78	; 0x4e
   bc23c:	f7fc fc34 	bl	b8aa8 <__assert_func>
   bc240:	4a11      	ldr	r2, [pc, #68]	; (bc288 <rand+0x68>)
   bc242:	4b12      	ldr	r3, [pc, #72]	; (bc28c <rand+0x6c>)
   bc244:	e9c0 2300 	strd	r2, r3, [r0]
   bc248:	4b11      	ldr	r3, [pc, #68]	; (bc290 <rand+0x70>)
   bc24a:	6083      	str	r3, [r0, #8]
   bc24c:	230b      	movs	r3, #11
   bc24e:	8183      	strh	r3, [r0, #12]
   bc250:	2201      	movs	r2, #1
   bc252:	2300      	movs	r3, #0
   bc254:	e9c0 2304 	strd	r2, r3, [r0, #16]
   bc258:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   bc25a:	4a0e      	ldr	r2, [pc, #56]	; (bc294 <rand+0x74>)
   bc25c:	6920      	ldr	r0, [r4, #16]
   bc25e:	6963      	ldr	r3, [r4, #20]
   bc260:	490d      	ldr	r1, [pc, #52]	; (bc298 <rand+0x78>)
   bc262:	4342      	muls	r2, r0
   bc264:	fb01 2203 	mla	r2, r1, r3, r2
   bc268:	fba0 0101 	umull	r0, r1, r0, r1
   bc26c:	1c43      	adds	r3, r0, #1
   bc26e:	eb42 0001 	adc.w	r0, r2, r1
   bc272:	e9c4 3004 	strd	r3, r0, [r4, #16]
   bc276:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   bc27a:	bd10      	pop	{r4, pc}
   bc27c:	2003ded0 	.word	0x2003ded0
   bc280:	000bd69e 	.word	0x000bd69e
   bc284:	000bd70e 	.word	0x000bd70e
   bc288:	abcd330e 	.word	0xabcd330e
   bc28c:	e66d1234 	.word	0xe66d1234
   bc290:	0005deec 	.word	0x0005deec
   bc294:	5851f42d 	.word	0x5851f42d
   bc298:	4c957f2d 	.word	0x4c957f2d

000bc29c <strchr>:
   bc29c:	b2c9      	uxtb	r1, r1
   bc29e:	4603      	mov	r3, r0
   bc2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc2a4:	b11a      	cbz	r2, bc2ae <strchr+0x12>
   bc2a6:	428a      	cmp	r2, r1
   bc2a8:	d1f9      	bne.n	bc29e <strchr+0x2>
   bc2aa:	4618      	mov	r0, r3
   bc2ac:	4770      	bx	lr
   bc2ae:	2900      	cmp	r1, #0
   bc2b0:	bf18      	it	ne
   bc2b2:	2300      	movne	r3, #0
   bc2b4:	e7f9      	b.n	bc2aa <strchr+0xe>

000bc2b6 <strchrnul>:
   bc2b6:	b510      	push	{r4, lr}
   bc2b8:	4604      	mov	r4, r0
   bc2ba:	f7ff ffef 	bl	bc29c <strchr>
   bc2be:	b918      	cbnz	r0, bc2c8 <strchrnul+0x12>
   bc2c0:	4620      	mov	r0, r4
   bc2c2:	f000 f814 	bl	bc2ee <strlen>
   bc2c6:	4420      	add	r0, r4
   bc2c8:	bd10      	pop	{r4, pc}

000bc2ca <strcmp>:
   bc2ca:	f810 2b01 	ldrb.w	r2, [r0], #1
   bc2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   bc2d2:	2a01      	cmp	r2, #1
   bc2d4:	bf28      	it	cs
   bc2d6:	429a      	cmpcs	r2, r3
   bc2d8:	d0f7      	beq.n	bc2ca <strcmp>
   bc2da:	1ad0      	subs	r0, r2, r3
   bc2dc:	4770      	bx	lr

000bc2de <strcpy>:
   bc2de:	4603      	mov	r3, r0
   bc2e0:	f811 2b01 	ldrb.w	r2, [r1], #1
   bc2e4:	f803 2b01 	strb.w	r2, [r3], #1
   bc2e8:	2a00      	cmp	r2, #0
   bc2ea:	d1f9      	bne.n	bc2e0 <strcpy+0x2>
   bc2ec:	4770      	bx	lr

000bc2ee <strlen>:
   bc2ee:	4603      	mov	r3, r0
   bc2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   bc2f4:	2a00      	cmp	r2, #0
   bc2f6:	d1fb      	bne.n	bc2f0 <strlen+0x2>
   bc2f8:	1a18      	subs	r0, r3, r0
   bc2fa:	3801      	subs	r0, #1
   bc2fc:	4770      	bx	lr

000bc2fe <strncmp>:
   bc2fe:	b510      	push	{r4, lr}
   bc300:	b17a      	cbz	r2, bc322 <strncmp+0x24>
   bc302:	4603      	mov	r3, r0
   bc304:	3901      	subs	r1, #1
   bc306:	1884      	adds	r4, r0, r2
   bc308:	f813 0b01 	ldrb.w	r0, [r3], #1
   bc30c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bc310:	4290      	cmp	r0, r2
   bc312:	d101      	bne.n	bc318 <strncmp+0x1a>
   bc314:	42a3      	cmp	r3, r4
   bc316:	d101      	bne.n	bc31c <strncmp+0x1e>
   bc318:	1a80      	subs	r0, r0, r2
   bc31a:	bd10      	pop	{r4, pc}
   bc31c:	2800      	cmp	r0, #0
   bc31e:	d1f3      	bne.n	bc308 <strncmp+0xa>
   bc320:	e7fa      	b.n	bc318 <strncmp+0x1a>
   bc322:	4610      	mov	r0, r2
   bc324:	e7f9      	b.n	bc31a <strncmp+0x1c>

000bc326 <strncpy>:
   bc326:	b510      	push	{r4, lr}
   bc328:	3901      	subs	r1, #1
   bc32a:	4603      	mov	r3, r0
   bc32c:	b132      	cbz	r2, bc33c <strncpy+0x16>
   bc32e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bc332:	f803 4b01 	strb.w	r4, [r3], #1
   bc336:	3a01      	subs	r2, #1
   bc338:	2c00      	cmp	r4, #0
   bc33a:	d1f7      	bne.n	bc32c <strncpy+0x6>
   bc33c:	441a      	add	r2, r3
   bc33e:	2100      	movs	r1, #0
   bc340:	4293      	cmp	r3, r2
   bc342:	d100      	bne.n	bc346 <strncpy+0x20>
   bc344:	bd10      	pop	{r4, pc}
   bc346:	f803 1b01 	strb.w	r1, [r3], #1
   bc34a:	e7f9      	b.n	bc340 <strncpy+0x1a>

000bc34c <strrchr>:
   bc34c:	b538      	push	{r3, r4, r5, lr}
   bc34e:	4603      	mov	r3, r0
   bc350:	460c      	mov	r4, r1
   bc352:	b969      	cbnz	r1, bc370 <strrchr+0x24>
   bc354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bc358:	f7ff bfa0 	b.w	bc29c <strchr>
   bc35c:	1c43      	adds	r3, r0, #1
   bc35e:	4605      	mov	r5, r0
   bc360:	4621      	mov	r1, r4
   bc362:	4618      	mov	r0, r3
   bc364:	f7ff ff9a 	bl	bc29c <strchr>
   bc368:	2800      	cmp	r0, #0
   bc36a:	d1f7      	bne.n	bc35c <strrchr+0x10>
   bc36c:	4628      	mov	r0, r5
   bc36e:	bd38      	pop	{r3, r4, r5, pc}
   bc370:	2500      	movs	r5, #0
   bc372:	e7f5      	b.n	bc360 <strrchr+0x14>

000bc374 <_strtol_l.constprop.0>:
   bc374:	2b01      	cmp	r3, #1
   bc376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc37a:	d001      	beq.n	bc380 <_strtol_l.constprop.0+0xc>
   bc37c:	2b24      	cmp	r3, #36	; 0x24
   bc37e:	d906      	bls.n	bc38e <_strtol_l.constprop.0+0x1a>
   bc380:	f7fc fb8a 	bl	b8a98 <__errno>
   bc384:	2316      	movs	r3, #22
   bc386:	6003      	str	r3, [r0, #0]
   bc388:	2000      	movs	r0, #0
   bc38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc38e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bc474 <_strtol_l.constprop.0+0x100>
   bc392:	460d      	mov	r5, r1
   bc394:	462e      	mov	r6, r5
   bc396:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc39a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bc39e:	f017 0708 	ands.w	r7, r7, #8
   bc3a2:	d1f7      	bne.n	bc394 <_strtol_l.constprop.0+0x20>
   bc3a4:	2c2d      	cmp	r4, #45	; 0x2d
   bc3a6:	d132      	bne.n	bc40e <_strtol_l.constprop.0+0x9a>
   bc3a8:	782c      	ldrb	r4, [r5, #0]
   bc3aa:	2701      	movs	r7, #1
   bc3ac:	1cb5      	adds	r5, r6, #2
   bc3ae:	2b00      	cmp	r3, #0
   bc3b0:	d05b      	beq.n	bc46a <_strtol_l.constprop.0+0xf6>
   bc3b2:	2b10      	cmp	r3, #16
   bc3b4:	d109      	bne.n	bc3ca <_strtol_l.constprop.0+0x56>
   bc3b6:	2c30      	cmp	r4, #48	; 0x30
   bc3b8:	d107      	bne.n	bc3ca <_strtol_l.constprop.0+0x56>
   bc3ba:	782c      	ldrb	r4, [r5, #0]
   bc3bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bc3c0:	2c58      	cmp	r4, #88	; 0x58
   bc3c2:	d14d      	bne.n	bc460 <_strtol_l.constprop.0+0xec>
   bc3c4:	786c      	ldrb	r4, [r5, #1]
   bc3c6:	2310      	movs	r3, #16
   bc3c8:	3502      	adds	r5, #2
   bc3ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bc3ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc3d2:	f04f 0c00 	mov.w	ip, #0
   bc3d6:	fbb8 f9f3 	udiv	r9, r8, r3
   bc3da:	4666      	mov	r6, ip
   bc3dc:	fb03 8a19 	mls	sl, r3, r9, r8
   bc3e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bc3e4:	f1be 0f09 	cmp.w	lr, #9
   bc3e8:	d816      	bhi.n	bc418 <_strtol_l.constprop.0+0xa4>
   bc3ea:	4674      	mov	r4, lr
   bc3ec:	42a3      	cmp	r3, r4
   bc3ee:	dd24      	ble.n	bc43a <_strtol_l.constprop.0+0xc6>
   bc3f0:	f1bc 0f00 	cmp.w	ip, #0
   bc3f4:	db1e      	blt.n	bc434 <_strtol_l.constprop.0+0xc0>
   bc3f6:	45b1      	cmp	r9, r6
   bc3f8:	d31c      	bcc.n	bc434 <_strtol_l.constprop.0+0xc0>
   bc3fa:	d101      	bne.n	bc400 <_strtol_l.constprop.0+0x8c>
   bc3fc:	45a2      	cmp	sl, r4
   bc3fe:	db19      	blt.n	bc434 <_strtol_l.constprop.0+0xc0>
   bc400:	fb06 4603 	mla	r6, r6, r3, r4
   bc404:	f04f 0c01 	mov.w	ip, #1
   bc408:	f815 4b01 	ldrb.w	r4, [r5], #1
   bc40c:	e7e8      	b.n	bc3e0 <_strtol_l.constprop.0+0x6c>
   bc40e:	2c2b      	cmp	r4, #43	; 0x2b
   bc410:	bf04      	itt	eq
   bc412:	782c      	ldrbeq	r4, [r5, #0]
   bc414:	1cb5      	addeq	r5, r6, #2
   bc416:	e7ca      	b.n	bc3ae <_strtol_l.constprop.0+0x3a>
   bc418:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bc41c:	f1be 0f19 	cmp.w	lr, #25
   bc420:	d801      	bhi.n	bc426 <_strtol_l.constprop.0+0xb2>
   bc422:	3c37      	subs	r4, #55	; 0x37
   bc424:	e7e2      	b.n	bc3ec <_strtol_l.constprop.0+0x78>
   bc426:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bc42a:	f1be 0f19 	cmp.w	lr, #25
   bc42e:	d804      	bhi.n	bc43a <_strtol_l.constprop.0+0xc6>
   bc430:	3c57      	subs	r4, #87	; 0x57
   bc432:	e7db      	b.n	bc3ec <_strtol_l.constprop.0+0x78>
   bc434:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bc438:	e7e6      	b.n	bc408 <_strtol_l.constprop.0+0x94>
   bc43a:	f1bc 0f00 	cmp.w	ip, #0
   bc43e:	da05      	bge.n	bc44c <_strtol_l.constprop.0+0xd8>
   bc440:	2322      	movs	r3, #34	; 0x22
   bc442:	6003      	str	r3, [r0, #0]
   bc444:	4646      	mov	r6, r8
   bc446:	b942      	cbnz	r2, bc45a <_strtol_l.constprop.0+0xe6>
   bc448:	4630      	mov	r0, r6
   bc44a:	e79e      	b.n	bc38a <_strtol_l.constprop.0+0x16>
   bc44c:	b107      	cbz	r7, bc450 <_strtol_l.constprop.0+0xdc>
   bc44e:	4276      	negs	r6, r6
   bc450:	2a00      	cmp	r2, #0
   bc452:	d0f9      	beq.n	bc448 <_strtol_l.constprop.0+0xd4>
   bc454:	f1bc 0f00 	cmp.w	ip, #0
   bc458:	d000      	beq.n	bc45c <_strtol_l.constprop.0+0xe8>
   bc45a:	1e69      	subs	r1, r5, #1
   bc45c:	6011      	str	r1, [r2, #0]
   bc45e:	e7f3      	b.n	bc448 <_strtol_l.constprop.0+0xd4>
   bc460:	2430      	movs	r4, #48	; 0x30
   bc462:	2b00      	cmp	r3, #0
   bc464:	d1b1      	bne.n	bc3ca <_strtol_l.constprop.0+0x56>
   bc466:	2308      	movs	r3, #8
   bc468:	e7af      	b.n	bc3ca <_strtol_l.constprop.0+0x56>
   bc46a:	2c30      	cmp	r4, #48	; 0x30
   bc46c:	d0a5      	beq.n	bc3ba <_strtol_l.constprop.0+0x46>
   bc46e:	230a      	movs	r3, #10
   bc470:	e7ab      	b.n	bc3ca <_strtol_l.constprop.0+0x56>
   bc472:	bf00      	nop
   bc474:	000bd768 	.word	0x000bd768

000bc478 <strtol>:
   bc478:	4613      	mov	r3, r2
   bc47a:	460a      	mov	r2, r1
   bc47c:	4601      	mov	r1, r0
   bc47e:	4802      	ldr	r0, [pc, #8]	; (bc488 <strtol+0x10>)
   bc480:	6800      	ldr	r0, [r0, #0]
   bc482:	f7ff bf77 	b.w	bc374 <_strtol_l.constprop.0>
   bc486:	bf00      	nop
   bc488:	2003ded0 	.word	0x2003ded0

000bc48c <__register_exitproc>:
   bc48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc490:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bc54c <__register_exitproc+0xc0>
   bc494:	4606      	mov	r6, r0
   bc496:	f8d8 0000 	ldr.w	r0, [r8]
   bc49a:	461f      	mov	r7, r3
   bc49c:	460d      	mov	r5, r1
   bc49e:	4691      	mov	r9, r2
   bc4a0:	f000 f856 	bl	bc550 <__retarget_lock_acquire_recursive>
   bc4a4:	4b25      	ldr	r3, [pc, #148]	; (bc53c <__register_exitproc+0xb0>)
   bc4a6:	681c      	ldr	r4, [r3, #0]
   bc4a8:	b934      	cbnz	r4, bc4b8 <__register_exitproc+0x2c>
   bc4aa:	4c25      	ldr	r4, [pc, #148]	; (bc540 <__register_exitproc+0xb4>)
   bc4ac:	601c      	str	r4, [r3, #0]
   bc4ae:	4b25      	ldr	r3, [pc, #148]	; (bc544 <__register_exitproc+0xb8>)
   bc4b0:	b113      	cbz	r3, bc4b8 <__register_exitproc+0x2c>
   bc4b2:	681b      	ldr	r3, [r3, #0]
   bc4b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bc4b8:	6863      	ldr	r3, [r4, #4]
   bc4ba:	2b1f      	cmp	r3, #31
   bc4bc:	dd07      	ble.n	bc4ce <__register_exitproc+0x42>
   bc4be:	f8d8 0000 	ldr.w	r0, [r8]
   bc4c2:	f000 f847 	bl	bc554 <__retarget_lock_release_recursive>
   bc4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bc4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc4ce:	b34e      	cbz	r6, bc524 <__register_exitproc+0x98>
   bc4d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bc4d4:	b988      	cbnz	r0, bc4fa <__register_exitproc+0x6e>
   bc4d6:	4b1c      	ldr	r3, [pc, #112]	; (bc548 <__register_exitproc+0xbc>)
   bc4d8:	b923      	cbnz	r3, bc4e4 <__register_exitproc+0x58>
   bc4da:	f8d8 0000 	ldr.w	r0, [r8]
   bc4de:	f000 f838 	bl	bc552 <__retarget_lock_release>
   bc4e2:	e7f0      	b.n	bc4c6 <__register_exitproc+0x3a>
   bc4e4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bc4e8:	f7fc fa9e 	bl	b8a28 <malloc>
   bc4ec:	2800      	cmp	r0, #0
   bc4ee:	d0f4      	beq.n	bc4da <__register_exitproc+0x4e>
   bc4f0:	2300      	movs	r3, #0
   bc4f2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bc4f6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bc4fa:	6863      	ldr	r3, [r4, #4]
   bc4fc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bc500:	2201      	movs	r2, #1
   bc502:	409a      	lsls	r2, r3
   bc504:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bc508:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bc50c:	4313      	orrs	r3, r2
   bc50e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bc512:	2e02      	cmp	r6, #2
   bc514:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bc518:	bf02      	ittt	eq
   bc51a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bc51e:	4313      	orreq	r3, r2
   bc520:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bc524:	6863      	ldr	r3, [r4, #4]
   bc526:	f8d8 0000 	ldr.w	r0, [r8]
   bc52a:	1c5a      	adds	r2, r3, #1
   bc52c:	3302      	adds	r3, #2
   bc52e:	6062      	str	r2, [r4, #4]
   bc530:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bc534:	f000 f80e 	bl	bc554 <__retarget_lock_release_recursive>
   bc538:	2000      	movs	r0, #0
   bc53a:	e7c6      	b.n	bc4ca <__register_exitproc+0x3e>
   bc53c:	2003e7e8 	.word	0x2003e7e8
   bc540:	2003e75c 	.word	0x2003e75c
   bc544:	00000000 	.word	0x00000000
   bc548:	000b8a29 	.word	0x000b8a29
   bc54c:	2003df34 	.word	0x2003df34

000bc550 <__retarget_lock_acquire_recursive>:
   bc550:	4770      	bx	lr

000bc552 <__retarget_lock_release>:
   bc552:	4770      	bx	lr

000bc554 <__retarget_lock_release_recursive>:
   bc554:	4770      	bx	lr

000bc556 <link_code_end>:
	...

000bc558 <dynalib_user>:
   bc558:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bc568:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bc578:	7620 7269 7574 6c61 4c00 526f 2041 6e49      virtual.LoRA In
   bc588:	7469 6169 696c 617a 6974 6e6f 6620 6961     itialization fai
   bc598:	756c 6572 6120 656c 7472 6320 646f 2065     lure alert code 
   bc5a8:	6425 2d20 7020 776f 7265 6320 6379 656c     %d - power cycle
   bc5b8:	6920 206e 3033 4e00 646f 2065 756e 626d      in 30.Node numb
   bc5c8:	7265 6920 646e 6369 7461 6465 7520 636e     er indicated unc
   bc5d8:	6e6f 6966 7567 6572 2064 6f6e 6564 6f20     onfigured node o
   bc5e8:	2066 6425 7320 7465 6974 676e 6120 656c     f %d setting ale
   bc5f8:	7472 6320 646f 2065 6f74 2020 6425 5300     rt code to  %d.S
   bc608:	6174 7472 7075 6320 6d6f 6c70 7465 2065     tartup complete 
   bc618:	6f66 2072 6874 2065 6f4e 6564 7720 7469     for the Node wit
   bc628:	2068 6c61 7265 2074 6f63 6564 2520 0064     h alert code %d.
   bc638:	7246 6d6f 2520 2073 6f74 2520 2073 6977     From %s to %s wi
   bc648:	6874 6920 766e 6c61 6469 7420 6d69 0065     th invalid time.
   bc658:	7246 6d6f 2520 2073 6f74 2520 2073 6f66     From %s to %s fo
   bc668:	2072 7525 7320 6365 6e6f 7364 4600 6f72     r %u seconds.Fro
   bc678:	206d 7325 7420 206f 7325 4f00 006e 664f     m %s to %s.On.Of
   bc688:	0066 6954 656d 7420 206f 7570 6c62 7369     f.Time to publis
   bc698:	2068 6977 6874 6120 656c 7472 6320 646f     h with alert cod
   bc6a8:	2065 6425 5300 656c 7065 6620 726f 2520     e %d.Sleep for %
   bc6b8:	2069 6573 6f63 646e 2073 6e75 6974 206c     i seconds until 
   bc6c8:	656e 7478 6520 6576 746e 2520 0073 6f57     next event %s.Wo
   bc6d8:	656b 7720 7469 2068 7375 7265 6220 7475     ke with user but
   bc6e8:	6f74 206e 202d 6f4c 4152 5320 6174 6574     ton - LoRA State
   bc6f8:	4100 6f77 656b 6120 2074 7325 7720 7469     .Awoke at %s wit
   bc708:	2068 6c25 2069 7266 6565 6d20 6d65 726f     h %li free memor
   bc718:	0079 6146 6c69 6465 6920 206e 6573 646e     y.Failed in send
   bc728:	6120 646e 7220 7365 7563 2065 7369 2520      and rescue is %
   bc738:	0073 6553 646e 6120 646e 4120 6b63 7320     s.Send and Ack s
   bc748:	6375 6563 6465 6465 6120 646e 7220 7365     ucceeded and res
   bc758:	7563 2065 7369 2520 0073 6146 6c69 6465     cue is %s.Failed
   bc768:	6920 206e 6361 206b 6e61 2064 6572 6373      in ack and resc
   bc778:	6575 6920 2073 7325 5200 7365 7465 6974     ue is %s.Resetti
   bc788:	676e 6420 7665 6369 0065 6553 646e 6620     ng device.Send f
   bc798:	6961 656c 2064 202d 6f67 6e69 2067 6f74     ailed - going to
   bc7a8:	7320 6e65 2064 7665 7265 2079 696d 756e      send every minu
   bc7b8:	6574 6900 696e 2074 6166 6c69 6465 4c00     te.init failed.L
   bc7c8:	526f 2041 6152 6964 206f 6e69 7469 6169     oRA Radio initia
   bc7d8:	696c 657a 2064 7361 4e20 646f 4e65 6d75     lized as NodeNum
   bc7e8:	6562 2072 666f 2520 2069 6e61 2064 6544     ber of %i and De
   bc7f8:	6976 6563 4449 6f20 2066 6925 6120 646e     viceID of %i and
   bc808:	6120 6d20 6761 6369 6e20 6d75 6562 2072      a magic number 
   bc818:	666f 2520 0069 6553 646e 6e69 2067 6164     of %i.Sending da
   bc828:	6174 7220 7065 726f 2074 6f74 4720 7461     ta report to Gat
   bc838:	7765 7961 7300 6e65 6964 676e 6d20 7365     eway.sending mes
   bc848:	6173 6567 6e20 6d75 6562 2072 6425 4e00     sage number %d.N
   bc858:	646f 2065 6425 2d20 4420 7461 2061 6572     ode %d - Data re
   bc868:	6f70 7472 7320 6e65 2064 6f74 6720 7461     port send to gat
   bc878:	7765 7961 2520 2064 7573 6363 7365 6673     eway %d successf
   bc888:	6c75 796c 2d20 7320 6375 6563 7373 7220     ully - success r
   bc898:	7461 2065 3425 322e 0066 6f4e 6564 2520     ate %4.2f.Node %
   bc8a8:	2064 202d 6144 6174 7220 7065 726f 2074     d - Data report 
   bc8b8:	6573 646e 7420 206f 6167 6574 6177 2079     send to gateway 
   bc8c8:	6425 6620 6961 656c 2064 2d20 7320 6375     %d failed  - suc
   bc8d8:	6563 7373 7220 7461 2065 3425 322e 0066     cess rate %4.2f.
   bc8e8:	6f4e 6564 2520 2064 202d 6552 6563 7669     Node %d - Receiv
   bc8f8:	6e69 2067 6361 6e6b 776f 656c 6764 656d     ing acknowledgme
   bc908:	746e 2d20 4420 7461 2061 6552 6f70 7472     nt - Data Report
   bc918:	5400 6d69 2065 6573 2074 6f74 2520 2073     .Time set to %s 
   bc928:	6e61 2064 656e 7478 7220 7065 726f 2074     and next report 
   bc938:	7369 6920 206e 7525 7320 6365 6e6f 7364     is in %u seconds
   bc948:	6120 2074 7325 6100 4e20 646f 4e65 6d75      at %s.a NodeNum
   bc958:	6562 2072 7369 6e20 6565 6564 0064 6874     ber is needed.th
   bc968:	2065 6c63 636f 206b 7369 6e20 746f 7320     e clock is not s
   bc978:	7465 5300 6e65 6964 676e 6a20 696f 206e     et.Sending join 
   bc988:	6572 7571 7365 2074 6562 6163 7375 2065     request because 
   bc998:	7325 4400 7461 2061 6572 6f70 7472 7320     %s.Data report s
   bc9a8:	6e65 2064 6f74 6720 7461 7765 7961 7320     end to gateway s
   bc9b8:	6375 6563 7373 7566 6c6c 0079 6144 6174     uccessfully.Data
   bc9c8:	7220 7065 726f 2074 6573 646e 7420 206f      report send to 
   bc9d8:	6147 6574 6177 2079 6166 6c69 6465 5200     Gateway failed.R
   bc9e8:	6365 6965 6976 676e 6120 6b63 6f6e 6c77     eceiving acknowl
   bc9f8:	6465 6d67 6e65 2074 202d 6f4a 6e69 5220     edgment - Join R
   bca08:	7165 6575 7473 5400 6d69 2065 6573 2074     equest.Time set 
   bca18:	6f74 2520 2c73 6e20 646f 2065 7369 2520     to %s, node is %
   bca28:	2064 6e61 2064 656e 7478 7220 7065 726f     d and next repor
   bca38:	2074 7369 6920 206e 7525 7320 6365 6e6f     t is in %u secon
   bca48:	7364 4e00 646f 2065 202d 6553 646e 6e69     ds.Node - Sendin
   bca58:	2067 6c41 7265 2074 6552 6f70 7472 7420     g Alert Report t
   bca68:	206f 6147 6574 6177 0079 6553 646e 6e69     o Gateway.Sendin
   bca78:	2067 6c41 7265 2074 6552 6f70 7472 6e20     g Alert Report n
   bca88:	6d75 6562 2072 6425 7420 206f 6167 6574     umber %d to gate
   bca98:	6177 2079 7461 2520 0064 6f4e 6564 2d20     way at %d.Node -
   bcaa8:	4120 656c 7472 7220 7065 726f 2074 6573      Alert report se
   bcab8:	646e 7420 206f 6167 6574 6177 2079 7573     nd to gateway su
   bcac8:	6363 7365 6673 6c75 796c 4e00 646f 2065     ccessfully.Node 
   bcad8:	202d 6c41 7265 2074 6552 6f70 7472 7320     - Alert Report s
   bcae8:	6e65 2064 6f74 4720 7461 7765 7961 6620     end to Gateway f
   bcaf8:	6961 656c 0064 6552 6563 7669 6e69 2067     ailed.Receiving 
   bcb08:	6361 6e6b 776f 656c 6764 656d 746e 2d20     acknowledgment -
   bcb18:	4120 656c 7472 5220 7065 726f 0074 6552      Alert Report.Re
   bcb28:	6563 7669 6465 6620 6f72 206d 6f6e 6564     ceived from node
   bcb38:	2520 2064 6977 6874 7220 7373 3d69 6425      %d with rssi=%d
   bcb48:	2d20 6120 2520 2073 656d 7373 6761 0065      - a %s message.

000bcb58 <_ZTV14LoRA_Functions>:
	...
   bcb60:	4969 000b 496b 000b 2041 656e 2077 6164     iI..kI..A new da
   bcb70:	2079 202d 6572 6573 7474 6e69 2067 7665     y - resetting ev
   bcb80:	7265 7479 6968 676e 0000 0000               erything....

000bcb8c <_ZTV8MB85RC64>:
	...
   bcb94:	510d 000b 5121 000b 6b19 000b 6baf 000b     .Q..!Q...k...k..
   bcba4:	6c31 000b                                   1l..

000bcba8 <_ZTV13sysStatusData>:
	...
   bcbb0:	5229 000b 5199 000b 5177 000b 81d1 000b     )R...Q..wQ......
   bcbc0:	81f9 000b 82ed 000b 8385 000b 5135 000b     ............5Q..
   bcbd0:	514d 000b                                   MQ..

000bcbd4 <_ZTV17currentStatusData>:
	...
   bcbdc:	5243 000b 5199 000b 5177 000b 81d1 000b     CR...Q..wQ......
   bcbec:	81f9 000b 82ed 000b 8385 000b 50e1 000b     .............P..
   bcbfc:	50f9 000b 6e49 7469 6c61 7a69 6e69 2067     .P..Initalizing 
   bcc0c:	6874 2065 6970 4d6e 646f 7365 4900 696e     the pinModes.Ini
   bcc1c:	6974 6c61 7a69 6e69 2067 6f50 6577 2072     tializing Power 
   bcc2c:	6f43 666e 6769 0000                         Config..

000bcc34 <BLUE_LED>:
   bcc34:	0007                                        ..

000bcc36 <BUTTON_PIN>:
   bcc36:	0004                                        ..

000bcc38 <INT_PIN>:
   bcc38:	0012                                        ..

000bcc3a <RFM95_CS>:
   bcc3a:	0005                                        ..

000bcc3c <RFM95_INT>:
   bcc3c:	0002                                        ..

000bcc3e <TMP36_SENSE_PIN>:
   bcc3e:	000f 6553 7474 6e69 2067 6176 756c 7365     ..Setting values
   bcc4e:	6620 726f 7420 6568 6e20 646f 0065           for the node.

000bcc5c <_ZTVN5spark10LogHandlerE>:
	...
   bcc6c:	40a5 000b 57c1 000b                         .@...W..

000bcc74 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bcc7c:	57cd 000b 5801 000b a0e1 000b 57c3 000b     .W...X.......W..
   bcc8c:	6e55 6e6b 776f 006e 6f4e 656e 5700 4669     Unknown.None.WiF
   bcc9c:	0069 5347 004d 4d55 5354 4300 4d44 0041     i.GSM.UMTS.CDMA.
   bccac:	544c 0045 4549 4545 3038 3132 3435 4c00     LTE.IEEE802154.L
   bccbc:	4554 435f 5441 4d5f 0031 544c 5f45 4143     TE_CAT_M1.LTE_CA
   bcccc:	5f54 424e 0031 6f4e 2074 6843 7261 6967     T_NB1.Not Chargi
   bccdc:	676e 4300 6168 6772 6465 4400 7369 6863     ng.Charged.Disch
   bccec:	7261 6967 676e 4600 7561 746c 4400 6369     arging.Fault.Dic
   bccfc:	6e6f 656e 7463 6465 4100 7373 7265 6974     onnected.Asserti
   bcd0c:	6e6f 6146 6c69 7275 2065 702a 705f 6e69     onFailure *p_pin
   bcd1c:	3c20 2820 3233 2b20 3120 2936 2500 2073      < (32 + 16).%s 
   bcd2c:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   bcd3c:	6630 2525 0020 6f43 6e75 2c74 6820 756f     0f%% .Count, hou
   bcd4c:	6c72 3a79 2520 2e69 6420 6961 796c 203a     rly: %i. daily: 
   bcd5c:	6925 4100 7373 7265 6974 6e6f 6146 6c69     %i.AssertionFail
   bcd6c:	7275 2065 7273 2063 2626 7320 6372 3e2d     ure src && src->
   bcd7c:	6163 6c6c 6162 6b63 2500 2069 0043 6e49     callback.%i C.In
   bcd8c:	6574 6e72 6c61 5420 6d65 6570 6172 7574     ternal Temperatu
   bcd9c:	6572 6920 2073 7325 0000 0000 cc8c 000b     re is %s........
   bcdac:	cc94 000b cc99 000b cc9e 000b cca2 000b     ................
   bcdbc:	cca7 000b ccac 000b ccb0 000b ccbb 000b     ................
   bcdcc:	ccc6 000b 6166 6c69 6465 7420 206f 6572     ....failed to re
   bcddc:	6461 7220 6765 6441 7264 253d 3230 2078     ad regAddr=%02x 
   bcdec:	6f63 6e75 3d74 7525 6600 6961 656c 2064     count=%u.failed 
   bcdfc:	6f74 7220 6165 2064 6572 4167 6464 3d72     to read regAddr=
   bce0c:	3025 7832 7320 6174 3d74 6425 4600 554f     %02x stat=%d.FOU
   bce1c:	2054 6964 2064 6f6e 2074 6f67 4820 4749     T did not go HIG
   bce2c:	0048 6f6e 2074 6564 6574 7463 6465 6600     H.not detected.f
   bce3c:	6961 656c 2064 6f74 7720 6972 6574 7220     ailed to write r
   bce4c:	6765 6441 7264 253d 3230 2078 7473 7461     egAddr=%02x stat
   bce5c:	253d 0064 6573 5774 5444 2520 0064 6177     =%d.setWDT %d.wa
   bce6c:	6374 6468 676f 6320 656c 7261 6465 6220     tchdog cleared b
   bce7c:	6552 7573 746c 253d 0064 6177 6374 6468     Result=%d.watchd
   bce8c:	676f 7320 7465 6620 756f 5372 6365 3d73     og set fourSecs=
   bce9c:	6425 6220 6552 7573 746c 253d 0064 4157     %d bResult=%d.WA
   bceac:	4354 4448 474f 4400 4545 5f50 4f50 4557     TCHDOG.DEEP_POWE
   bcebc:	5f52 4f44 4e57 4300 554f 544e 4f44 4e57     R_DOWN.COUNTDOWN
   bcecc:	545f 4d49 5245 4100 414c 4d52 6600 6961     _TIMER.ALARM.fai
   bcedc:	756c 6572 6920 206e 7075 6164 6574 6157     lure in updateWa
   bceec:	656b 6552 7361 6e6f 2520 0064 6177 656b     keReason %d.wake
   bcefc:	7220 6165 6f73 206e 203d 7325 6600 6961      reason = %s.fai
   bcf0c:	756c 6572 6920 206e 6573 4374 756f 746e     lure in setCount
   bcf1c:	6f64 6e77 6954 656d 2072 6425 6600 6961     downTimer %d.fai
   bcf2c:	756c 6572 6920 206e 6564 7065 6f50 6577     lure in deepPowe
   bcf3c:	4472 776f 206e 6425 5200 4745 535f 454c     rDown %d.REG_SLE
   bcf4c:	5045 435f 5254 3d4c 7830 3225 0078 6964     EP_CTRL=0x%2x.di
   bcf5c:	6e64 7427 7020 776f 7265 6420 776f 006e     dn't power down.
   bcf6c:	3025 6434 252d 3230 2d64 3025 6432 2520     %04d-%02d-%02d %
   bcf7c:	3230 3a64 3025 6432 253a 3230 0064 6567     02d:%02d:%02d.ge
   bcf8c:	5274 6374 7341 6d54 2520 0073 6573 5274     tRtcAsTm %s.setR
   bcf9c:	6374 7341 6d54 2520 0073 6166 6c69 7275     tcAsTm %s.failur
   bcfac:	2065 6e69 7320 7465 7452 4663 6f72 546d     e in setRtcFromT
   bcfbc:	206d 6425 7300 7465 5220 4354 6620 6f72     m %d.set RTC fro
   bcfcc:	206d 6c63 756f 2064 7325 7300 7465 7320     m cloud %s.set s
   bcfdc:	7379 6574 206d 6c63 636f 206b 7266 6d6f     ystem clock from
   bcfec:	5220 4354 2520 0073 6166 6c69 6465 7420      RTC %s.failed t
   bcffc:	206f 6564 6574 7463 4120 3142 3038 0035     o detect AB1805.
   bd00c:	7061 2e70 6261 3831 3530 0000               app.ab1805..

000bd018 <_ZTV6AB1805>:
	...
   bd020:	5da9 000b 5dab 000b 64b9 000b 653f 000b     .]...]...d..?e..

000bd030 <_ZTV6MB85RC>:
	...
   bd038:	6ad9 000b 6adb 000b 6b19 000b 6baf 000b     .j...j...k...k..
   bd048:	6c31 000b                                   1l..

000bd04c <_ZTV15RHGenericDriver>:
	...
   bd05c:	6ded 000b 40a5 000b 40a5 000b 40a5 000b     .m...@...@...@..
   bd06c:	40a5 000b 6e4f 000b 6df1 000b 6e9f 000b     .@..On...m...n..
   bd07c:	6e6d 000b 6ec3 000b 6dfb 000b 6e03 000b     mn...n...m...n..
   bd08c:	6e07 000b 6e0b 000b 6e0f 000b 6e13 000b     .n...n...n...n..
   bd09c:	6dff 000b 6e1f 000b 6e23 000b 6e27 000b     .m...n..#n..'n..
   bd0ac:	6e2b 000b 6e2f 000b 6e35 000b 6e39 000b     +n../n..5n..9n..
   bd0bc:	6dfb 000b 6e3d 000b 6e43 000b 6e49 000b     .m..=n..Cn..In..

000bd0cc <_ZTV12RHGenericSPI>:
	...
   bd0d4:	40a5 000b 6f21 000b 6f23 000b 40a5 000b     .@..!o..#o...@..
   bd0e4:	40a5 000b 6f2b 000b 6f2f 000b 6f33 000b     .@..+o../o..3o..
   bd0f4:	6f25 000b 6f27 000b 6f29 000b 6564 6166     %o..'o..)o..defa
   bd104:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   bd114:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   bd124:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   bd134:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000bd144 <_ZTVN8particle11SPISettingsE>:
	...
   bd14c:	6f79 000b 6f4d 000b 6f4f 000b               yo..Mo..Oo..

000bd158 <_ZTV13RHHardwareSPI>:
	...
   bd160:	702d 000b 7041 000b 704f 000b 705d 000b     -p..Ap..Op..]p..
   bd170:	70c9 000b 6f2b 000b 6f2f 000b 6f33 000b     .p..+o../o..3o..
   bd180:	70d7 000b 70eb 000b 70f9 000b               .p...p...p..

000bd18c <_ZTV6RHMesh>:
	...
   bd194:	71c5 000b 74c9 000b 7125 000b 7111 000b     .q...t..%q...q..

000bd1a4 <_ZTV8RHRouter>:
	...
   bd1ac:	7735 000b 7779 000b                         5w..yw..

000bd1b4 <_ZTV11RHSPIDriver>:
	...
   bd1c4:	7a15 000b 40a5 000b 40a5 000b 40a5 000b     .z...@...@...@..
   bd1d4:	40a5 000b 6e4f 000b 6df1 000b 6e9f 000b     .@..On...m...n..
   bd1e4:	6e6d 000b 6ec3 000b 6dfb 000b 6e03 000b     mn...n...m...n..
   bd1f4:	6e07 000b 6e0b 000b 6e0f 000b 6e13 000b     .n...n...n...n..
   bd204:	6dff 000b 6e1f 000b 6e23 000b 6e27 000b     .m...n..#n..'n..
   bd214:	6e2b 000b 6e2f 000b 6e35 000b 6e39 000b     +n../n..5n..9n..
   bd224:	6dfb 000b 6e3d 000b 6e43 000b 6e49 000b     .m..=n..Cn..In..
   bd234:	7a41 000b 7a4b 000b                         Az..Kz..

000bd23c <_ZL18MODEM_CONFIG_TABLE>:
   bd23c:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000bd24c <_ZTV7RH_RF95>:
	...
   bd254:	7bb3 000b 7beb 000b 80c1 000b 7f57 000b     .{...{......W...
   bd264:	7c21 000b 7f9f 000b 7baf 000b 6e4f 000b     !|.......{..On..
   bd274:	6df1 000b 6e9f 000b 6e6d 000b 6ec3 000b     .m...n..mn...n..
   bd284:	7bb5 000b 6e03 000b 6e07 000b 6e0b 000b     .{...n...n...n..
   bd294:	6e0f 000b 6e13 000b 6dff 000b 6e1f 000b     .n...n...m...n..
   bd2a4:	6e23 000b 6e27 000b 6e2b 000b 6e2f 000b     #n..'n..+n../n..
   bd2b4:	6e35 000b 6e39 000b 7bfb 000b 6e3d 000b     5n..9n...{..=n..
   bd2c4:	6e43 000b 6e49 000b 7a41 000b 7a4b 000b     Cn..In..Az..Kz..
   bd2d4:	7bab 000b 6f67 3a74 6d20 6761 6369 253d     .{..got: magic=%
   bd2e4:	3830 2078 6576 7372 6f69 3d6e 3025 7834     08x version=%04x
   bd2f4:	7320 7a69 3d65 3025 7834 6820 7361 3d68      size=%04x hash=
   bd304:	3025 7838 6500 7078 203a 616d 6967 3d63     %08x.exp: magic=
   bd314:	3025 7838 7620 7265 6973 6e6f 253d 3430     %08x version=%04
   bd324:	2078 6973 657a 253d 3430 2078 6168 6873     x size=%04x hash
   bd334:	253d 3830 0078 0000                         =%08x...

000bd33c <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   bd344:	81cb 000b 8217 000b 81c9 000b 81d1 000b     ................
   bd354:	81f9 000b 82ed 000b 8385 000b               ............

000bd360 <_ZTVN5spark13CellularClassE>:
	...
   bd368:	8bcb 000b 8bc1 000b 8bb7 000b 8b6d 000b     ............m...
   bd378:	8bab 000b 8b9f 000b a439 000b a441 000b     ........9...A...
   bd388:	8b93 000b 8b8b 000b 8b81 000b 8b77 000b     ............w...
   bd398:	a471 000b                                   q...

000bd39c <_ZTV14CellularSignal>:
	...
   bd3a4:	8c59 000b 8cbd 000b 8c5b 000b 8ccd 000b     Y.......[.......
   bd3b4:	8d01 000b 8d2d 000b 8d61 000b 8c81 000b     ....-...a.......
   bd3c4:	8c5f 000b 8c7b 000b fffc ffff 0000 0000     _...{...........
   bd3d4:	8cb5 000b                                   ....

000bd3d8 <_ZTVN5spark13EthernetClassE>:
	...
   bd3e0:	8e03 000b 8df9 000b 8def 000b 8de5 000b     ................
   bd3f0:	8dd9 000b 8dcd 000b a439 000b a441 000b     ........9...A...
   bd400:	8dc1 000b 8db9 000b 8daf 000b 8da5 000b     ................
   bd410:	a471 000b                                   q...

000bd414 <_ZTV7TwoWire>:
	...
   bd41c:	8ed3 000b 8f1d 000b 8ef5 000b 8ed5 000b     ................
   bd42c:	8efd 000b 8f05 000b 8f0d 000b 8f15 000b     ................

000bd43c <_ZTV9IPAddress>:
	...
   bd444:	9081 000b 9071 000b 9073 000b 2575 3430     ....q...s...u%04
   bd454:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   bd464:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   bd474:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   bd484:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   bd494:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   bd4a4:	6c69 2073 203d 0d00 000a 006d 6e6c 6600     ils = ....m.ln.f
   bd4b4:	006e 6f63 6564 6400 7465 6961 006c 0000     n.code.detail...

000bd4c4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bd4cc:	952d 000b 9553 000b 9511 000b 918f 000b     -...S...........

000bd4dc <_ZTVN5spark16StreamLogHandlerE>:
	...
   bd4e4:	9989 000b 99a1 000b a0e1 000b 57c3 000b     .............W..

000bd4f4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bd4fc:	99b5 000b 99c9 000b a285 000b 9519 000b     ................

000bd50c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bd514:	952b 000b 9561 000b a045 000b 951b 000b     +...a...E.......

000bd524 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bd52c:	9529 000b 956f 000b 98f1 000b 9591 000b     )...o...........

000bd53c <_ZTVN5spark12NetworkClassE>:
	...
   bd544:	a3f9 000b a403 000b a40d 000b a417 000b     ................
   bd554:	a421 000b a42d 000b a439 000b a441 000b     !...-...9...A...
   bd564:	a449 000b a455 000b a45d 000b a467 000b     I...U...]...g...
   bd574:	a471 000b 616e 006e 6e69 0066 766f 0066     q...nan.inf.ovf.

000bd584 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd584:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   bd594:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   bd5a4:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   bd5b4:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   bd5c4:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   bd5d4:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000bd5e4 <_ZTV11USARTSerial>:
	...
   bd5ec:	b185 000b b1f1 000b b1c9 000b a6c1 000b     ................
   bd5fc:	b199 000b b1b5 000b b1a7 000b b1c3 000b     ................
   bd60c:	b187 000b b18b 000b                         ........

000bd614 <_ZTV9USBSerial>:
	...
   bd61c:	b243 000b b2ab 000b b281 000b a6c1 000b     C...............
   bd62c:	b273 000b b245 000b b255 000b b2a5 000b     s...E...U.......
   bd63c:	b265 000b b23d 000b                         e...=...

000bd644 <_ZSt7nothrow>:
   bd644:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   bd654:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000bd665 <day_name.1>:
   bd665:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   bd675:	6972 6153                                    riSat

000bd67a <mon_name.0>:
   bd67a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   bd68a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   bd69a:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   bd6aa:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   bd6ba:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   bd6ca:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   bd6da:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   bd6ea:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   bd6fa:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   bd70a:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   bd71a:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bd72a:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bd73a:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bd74a:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bd75a:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bd767 <_ctype_>:
   bd767:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bd777:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bd787:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bd797:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bd7a7:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bd7b7:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bd7c7:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bd7d7:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bd7e7:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bd868 <link_const_variable_data_end>:
   bd868:	000b4909 	.word	0x000b4909
   bd86c:	000b50a9 	.word	0x000b50a9
   bd870:	000b56a9 	.word	0x000b56a9
   bd874:	000b5929 	.word	0x000b5929
   bd878:	000b5d9d 	.word	0x000b5d9d
   bd87c:	000b6ac9 	.word	0x000b6ac9
   bd880:	000b7101 	.word	0x000b7101
   bd884:	000b8b5d 	.word	0x000b8b5d
   bd888:	000b8c29 	.word	0x000b8c29
   bd88c:	000b8e0d 	.word	0x000b8e0d
   bd890:	000ba0d1 	.word	0x000ba0d1
   bd894:	000ba549 	.word	0x000ba549
   bd898:	000ba9b5 	.word	0x000ba9b5
   bd89c:	000bae49 	.word	0x000bae49
   bd8a0:	000bb171 	.word	0x000bb171

000bd8a4 <link_constructors_end>:
	...
