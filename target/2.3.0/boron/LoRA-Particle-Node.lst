
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/2.3.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009cb0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000ddcd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001cc  2003db94  000ddcd4  0001db94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a90  2003dd60  2003dd60  0002dd60  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000ddea0  000ddea0  0001dea0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000ddecc  000ddecc  0001decc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00308511  00000000  00000000  0001ded0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002d0c7  00000000  00000000  003263e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00049720  00000000  00000000  003534a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003e80  00000000  00000000  0039cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000bf80  00000000  00000000  003a0a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00054514  00000000  00000000  003ac9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00073b46  00000000  00000000  00400edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012ed3e  00000000  00000000  00474a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b404  00000000  00000000  005a3760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f008 fc57 	bl	dc8e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f008 fc79 	bl	dc934 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003db94 	.word	0x2003db94
   d404c:	000ddcd4 	.word	0x000ddcd4
   d4050:	2003dd60 	.word	0x2003dd60
   d4054:	2003dd60 	.word	0x2003dd60
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f007 fe5d 	bl	dbd20 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000ddc88 	.word	0x000ddc88
   d4080:	000ddcc4 	.word	0x000ddcc4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b966 	b.w	d4354 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 faa3 	bl	d45d4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f007 bdfd 	b.w	dbc90 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f004 bf0b 	b.w	d8eb0 <malloc>

000d409a <_Znaj>:
   d409a:	f004 bf09 	b.w	d8eb0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f004 bf0f 	b.w	d8ec0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f004 fdce 	bl	d8c4c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d88cd 	.word	0x000d88cd

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z13userSwitchISRv>:
	}
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z13userSwitchISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003dee9 	.word	0x2003dee9

000d40d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN8MB85RC64D1Ev+0x10>)
   d40d8:	6003      	str	r3, [r0, #0]
   d40da:	4604      	mov	r4, r0
   d40dc:	f003 f819 	bl	d7112 <_ZN6MB85RCD1Ev>
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	000dcebc 	.word	0x000dcebc

000d40e8 <_ZN8MB85RC64D0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4604      	mov	r4, r0
   d40ec:	f7ff fff2 	bl	d40d4 <_ZN8MB85RC64D1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	2110      	movs	r1, #16
   d40f4:	f007 ff6a 	bl	dbfcc <_ZdlPvj>
   d40f8:	4620      	mov	r0, r4
   d40fa:	bd10      	pop	{r4, pc}

000d40fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d40fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d40fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4100:	4605      	mov	r5, r0
   d4102:	460f      	mov	r7, r1
   d4104:	4616      	mov	r6, r2
        if (valid_) {
   d4106:	b18b      	cbz	r3, d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4108:	6803      	ldr	r3, [r0, #0]
   d410a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d410c:	b183      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d410e:	889a      	ldrh	r2, [r3, #4]
   d4110:	2a01      	cmp	r2, #1
   d4112:	d006      	beq.n	d4122 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4114:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4116:	e7f9      	b.n	d410c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4118:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d411a:	b14b      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d411c:	889a      	ldrh	r2, [r3, #4]
   d411e:	2a01      	cmp	r2, #1
   d4120:	d1fa      	bne.n	d4118 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4122:	b12b      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4124:	899a      	ldrh	r2, [r3, #12]
   d4126:	42ba      	cmp	r2, r7
   d4128:	d1f6      	bne.n	d4118 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d412a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d412c:	4628      	mov	r0, r5
   d412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4130:	490a      	ldr	r1, [pc, #40]	; (d415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4132:	2010      	movs	r0, #16
   d4134:	f007 ff4c 	bl	dbfd0 <_ZnwjRKSt9nothrow_t>
   d4138:	4604      	mov	r4, r0
   d413a:	b168      	cbz	r0, d4158 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d413c:	2210      	movs	r2, #16
   d413e:	2100      	movs	r1, #0
   d4140:	f008 fbf8 	bl	dc934 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4144:	4b06      	ldr	r3, [pc, #24]	; (d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4146:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4148:	2301      	movs	r3, #1
   d414a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d414c:	692b      	ldr	r3, [r5, #16]
   d414e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4150:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4152:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4154:	612c      	str	r4, [r5, #16]
   d4156:	e7e9      	b.n	d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4158:	7528      	strb	r0, [r5, #20]
                return *this;
   d415a:	e7e7      	b.n	d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d415c:	000ddb2c 	.word	0x000ddb2c
   d4160:	00030010 	.word	0x00030010

000d4164 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4164:	b40e      	push	{r1, r2, r3}
   d4166:	b510      	push	{r4, lr}
   d4168:	b08d      	sub	sp, #52	; 0x34
   d416a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d416c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d416e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4172:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4174:	2300      	movs	r3, #0
   d4176:	2020      	movs	r0, #32
   d4178:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d417c:	e9cd 4200 	strd	r4, r2, [sp]
   d4180:	201e      	movs	r0, #30
   d4182:	aa04      	add	r2, sp, #16
   d4184:	f004 fd72 	bl	d8c6c <log_message_v>
}
   d4188:	b00d      	add	sp, #52	; 0x34
   d418a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d418e:	b003      	add	sp, #12
   d4190:	4770      	bx	lr
	...

000d4194 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>:
     * 
     * Note that 24:00:00 is not a valid time. You should generally use inclusive times such that
     * 23:59:59 is the end of the day.
     * 
     */
    LocalTimeRange(LocalTimeHMS hmsStart, LocalTimeHMS hmsEnd = LocalTimeHMS("23:59:59")) : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(hmsStart), hmsEnd(hmsEnd) {
   d4194:	b510      	push	{r4, lr}
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d4196:	247f      	movs	r4, #127	; 0x7f
   d4198:	7004      	strb	r4, [r0, #0]
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl_data() _GLIBCXX_NOEXCEPT
	: _M_start(), _M_finish(), _M_end_of_storage()
   d419a:	2400      	movs	r4, #0
   d419c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d41a0:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d41a4:	e9c0 4405 	strd	r4, r4, [r0, #20]
class LocalTimeHMS {
   d41a8:	6849      	ldr	r1, [r1, #4]
   d41aa:	4c03      	ldr	r4, [pc, #12]	; (d41b8 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_+0x24>)
   d41ac:	6852      	ldr	r2, [r2, #4]
   d41ae:	61c4      	str	r4, [r0, #28]
   d41b0:	e9c0 1408 	strd	r1, r4, [r0, #32]
   d41b4:	6282      	str	r2, [r0, #40]	; 0x28
    }
   d41b6:	bd10      	pop	{r4, pc}
   d41b8:	000dd548 	.word	0x000dd548

000d41bc <_ZN14LocalTimeRangeD1Ev>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d41bc:	b510      	push	{r4, lr}
   d41be:	4604      	mov	r4, r0
   d41c0:	3024      	adds	r0, #36	; 0x24
   d41c2:	f001 fd25 	bl	d5c10 <_ZN12LocalTimeHMSD1Ev>
   d41c6:	f104 001c 	add.w	r0, r4, #28
   d41ca:	f001 fd21 	bl	d5c10 <_ZN12LocalTimeHMSD1Ev>
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   d41ce:	6920      	ldr	r0, [r4, #16]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d41d0:	b108      	cbz	r0, d41d6 <_ZN14LocalTimeRangeD1Ev+0x1a>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d41d2:	f7ff ff64 	bl	d409e <_ZdlPv>
	_M_deallocate(_M_impl._M_start,
   d41d6:	6860      	ldr	r0, [r4, #4]
	if (__p)
   d41d8:	b108      	cbz	r0, d41de <_ZN14LocalTimeRangeD1Ev+0x22>
   d41da:	f7ff ff60 	bl	d409e <_ZdlPv>
   d41de:	4620      	mov	r0, r4
   d41e0:	bd10      	pop	{r4, pc}
	...

000d41e4 <_Z22publishStateTransitionv>:
{
   d41e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d41e6:	4d25      	ldr	r5, [pc, #148]	; (d427c <_Z22publishStateTransitionv+0x98>)
   d41e8:	4c25      	ldr	r4, [pc, #148]	; (d4280 <_Z22publishStateTransitionv+0x9c>)
   d41ea:	4b26      	ldr	r3, [pc, #152]	; (d4284 <_Z22publishStateTransitionv+0xa0>)
   d41ec:	782a      	ldrb	r2, [r5, #0]
   d41ee:	7821      	ldrb	r1, [r4, #0]
{
   d41f0:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d41f2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d41f6:	9200      	str	r2, [sp, #0]
   d41f8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d41fc:	4a22      	ldr	r2, [pc, #136]	; (d4288 <_Z22publishStateTransitionv+0xa4>)
   d41fe:	2128      	movs	r1, #40	; 0x28
   d4200:	a804      	add	r0, sp, #16
   d4202:	f004 fe7d 	bl	d8f00 <snprintf>
	oldState = state;
   d4206:	782b      	ldrb	r3, [r5, #0]
   d4208:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d420a:	f004 fdc9 	bl	d8da0 <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d420e:	2800      	cmp	r0, #0
   d4210:	d02e      	beq.n	d4270 <_Z22publishStateTransitionv+0x8c>
		if (millis() - lastPublish > 1000) {
   d4212:	4c1e      	ldr	r4, [pc, #120]	; (d428c <_Z22publishStateTransitionv+0xa8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4214:	f004 fb62 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
   d4218:	e9d4 3200 	ldrd	r3, r2, [r4]
   d421c:	1ac6      	subs	r6, r0, r3
   d421e:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d4222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4226:	2300      	movs	r3, #0
   d4228:	42b2      	cmp	r2, r6
   d422a:	41bb      	sbcs	r3, r7
   d422c:	da20      	bge.n	d4270 <_Z22publishStateTransitionv+0x8c>
   d422e:	f004 fb55 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d4232:	2300      	movs	r3, #0
   d4234:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4236:	4b16      	ldr	r3, [pc, #88]	; (d4290 <_Z22publishStateTransitionv+0xac>)
   d4238:	6020      	str	r0, [r4, #0]
   d423a:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d423c:	f88d 3000 	strb.w	r3, [sp]
   d4240:	4914      	ldr	r1, [pc, #80]	; (d4294 <_Z22publishStateTransitionv+0xb0>)
   d4242:	233c      	movs	r3, #60	; 0x3c
   d4244:	aa04      	add	r2, sp, #16
   d4246:	a802      	add	r0, sp, #8
   d4248:	f005 f940 	bl	d94cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d424c:	9c03      	ldr	r4, [sp, #12]
   d424e:	b17c      	cbz	r4, d4270 <_Z22publishStateTransitionv+0x8c>
      if (--_M_use_count == 0)
   d4250:	6863      	ldr	r3, [r4, #4]
   d4252:	3b01      	subs	r3, #1
   d4254:	6063      	str	r3, [r4, #4]
   d4256:	b95b      	cbnz	r3, d4270 <_Z22publishStateTransitionv+0x8c>
          _M_dispose();
   d4258:	6823      	ldr	r3, [r4, #0]
   d425a:	4620      	mov	r0, r4
   d425c:	689b      	ldr	r3, [r3, #8]
   d425e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4260:	68a3      	ldr	r3, [r4, #8]
   d4262:	3b01      	subs	r3, #1
   d4264:	60a3      	str	r3, [r4, #8]
   d4266:	b91b      	cbnz	r3, d4270 <_Z22publishStateTransitionv+0x8c>
            _M_destroy();
   d4268:	6823      	ldr	r3, [r4, #0]
   d426a:	4620      	mov	r0, r4
   d426c:	68db      	ldr	r3, [r3, #12]
   d426e:	4798      	blx	r3
	Log.info(stateTransitionString);
   d4270:	4809      	ldr	r0, [pc, #36]	; (d4298 <_Z22publishStateTransitionv+0xb4>)
   d4272:	a904      	add	r1, sp, #16
   d4274:	f7ff ff76 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
}
   d4278:	b00f      	add	sp, #60	; 0x3c
   d427a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d427c:	2003dee8 	.word	0x2003dee8
   d4280:	2003deb0 	.word	0x2003deb0
   d4284:	2003db94 	.word	0x2003db94
   d4288:	000dcd44 	.word	0x000dcd44
   d428c:	2003dd68 	.word	0x2003dd68
   d4290:	2003dd60 	.word	0x2003dd60
   d4294:	000dcd52 	.word	0x000dcd52
   d4298:	2003e570 	.word	0x2003e570

000d429c <_GLOBAL__sub_I___appProductID>:
			return secondsToReturn;
		}
		else return 0;
    }
	else return 0;
   d429c:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d429e:	4b24      	ldr	r3, [pc, #144]	; (d4330 <_GLOBAL__sub_I___appProductID+0x94>)
   d42a0:	2501      	movs	r5, #1
   d42a2:	701d      	strb	r5, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d42a4:	f007 fd6e 	bl	dbd84 <spark_protocol_instance>
   d42a8:	2300      	movs	r3, #0
   d42aa:	461a      	mov	r2, r3
   d42ac:	210d      	movs	r1, #13
   d42ae:	f007 fd71 	bl	dbd94 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d42b2:	f007 fd67 	bl	dbd84 <spark_protocol_instance>
   d42b6:	2300      	movs	r3, #0
   d42b8:	461a      	mov	r2, r3
   d42ba:	4619      	mov	r1, r3
   d42bc:	f007 fd72 	bl	dbda4 <spark_protocol_set_product_firmware_version>
        : config_(config) {
   d42c0:	4b1c      	ldr	r3, [pc, #112]	; (d4334 <_GLOBAL__sub_I___appProductID+0x98>)
   d42c2:	461a      	mov	r2, r3
   d42c4:	1d19      	adds	r1, r3, #4
   d42c6:	f842 1b09 	str.w	r1, [r2], #9
              valid_(true) {
   d42ca:	2400      	movs	r4, #0
   d42cc:	f8a3 4009 	strh.w	r4, [r3, #9]
   d42d0:	7094      	strb	r4, [r2, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d42d2:	4a19      	ldr	r2, [pc, #100]	; (d4338 <_GLOBAL__sub_I___appProductID+0x9c>)
              valid_(true) {
   d42d4:	751d      	strb	r5, [r3, #20]
        config_.wakeup_sources = nullptr;
   d42d6:	e9c3 4403 	strd	r4, r4, [r3, #12]
        config_.size = sizeof(hal_sleep_config_t);
   d42da:	605a      	str	r2, [r3, #4]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d42dc:	721c      	strb	r4, [r3, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d42de:	f007 fe2d 	bl	dbf3c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d42e2:	4d16      	ldr	r5, [pc, #88]	; (d433c <_GLOBAL__sub_I___appProductID+0xa0>)
   d42e4:	4601      	mov	r1, r0
   d42e6:	4623      	mov	r3, r4
   d42e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d42ec:	4628      	mov	r0, r5
   d42ee:	f002 ff1d 	bl	d712c <_ZN6MB85RCC1ER7TwoWireji>
   d42f2:	4b13      	ldr	r3, [pc, #76]	; (d4340 <_GLOBAL__sub_I___appProductID+0xa4>)
   d42f4:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d42f6:	f007 fe21 	bl	dbf3c <_Z19__fetch_global_Wirev>
class LocalTimeSchedule {
public:
    /**
     * @brief Construct a new, empty schedule
     */
    LocalTimeSchedule() {
   d42fa:	4d12      	ldr	r5, [pc, #72]	; (d4344 <_GLOBAL__sub_I___appProductID+0xa8>)
   d42fc:	4601      	mov	r1, r0
   d42fe:	2269      	movs	r2, #105	; 0x69
   d4300:	4811      	ldr	r0, [pc, #68]	; (d4348 <_GLOBAL__sub_I___appProductID+0xac>)
   d4302:	f000 ffbb 	bl	d527c <_ZN6AB1805C1ER7TwoWireh>
   d4306:	4628      	mov	r0, r5
   d4308:	4910      	ldr	r1, [pc, #64]	; (d434c <_GLOBAL__sub_I___appProductID+0xb0>)
   d430a:	f007 f906 	bl	db51a <_ZN6StringC1EPKc>
   d430e:	2300      	movs	r3, #0
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   d4310:	480f      	ldr	r0, [pc, #60]	; (d4350 <_GLOBAL__sub_I___appProductID+0xb4>)
    LocalTimeSchedule() {
   d4312:	612c      	str	r4, [r5, #16]
   d4314:	2200      	movs	r2, #0
   d4316:	e9c5 2306 	strd	r2, r3, [r5, #24]
	: _M_start(), _M_finish(), _M_end_of_storage()
   d431a:	e9c5 4408 	strd	r4, r4, [r5, #32]
class LocalTimeConvert {
   d431e:	2306      	movs	r3, #6
   d4320:	f840 3b04 	str.w	r3, [r0], #4
   d4324:	62ac      	str	r4, [r5, #40]	; 0x28
   d4326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d432a:	f001 bf4d 	b.w	d61c8 <_ZN22LocalTimePosixTimezoneC1Ev>
   d432e:	bf00      	nop
   d4330:	2003dd60 	.word	0x2003dd60
   d4334:	2003dd94 	.word	0x2003dd94
   d4338:	00030010 	.word	0x00030010
   d433c:	2003ddac 	.word	0x2003ddac
   d4340:	000dcebc 	.word	0x000dcebc
   d4344:	2003deb8 	.word	0x2003deb8
   d4348:	2003dd74 	.word	0x2003dd74
   d434c:	000dd9ad 	.word	0x000dd9ad
   d4350:	2003ddc0 	.word	0x2003ddc0

000d4354 <setup>:
void setup() {
   d4354:	b530      	push	{r4, r5, lr}
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d4356:	4c5a      	ldr	r4, [pc, #360]	; (d44c0 <setup+0x16c>)
   d4358:	b09f      	sub	sp, #124	; 0x7c
	delay(5000);	// Wait for serial 
   d435a:	f241 3088 	movw	r0, #5000	; 0x1388
   d435e:	f004 fe17 	bl	d8f90 <delay>
    initializePinModes();                           // Sets the pinModes
   d4362:	f000 fb93 	bl	d4a8c <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   d4366:	f000 fba9 	bl	d4abc <_Z18initializePowerCfgv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   d436a:	f000 fe0d 	bl	d4f88 <_Z18storageObjectStartv>
   d436e:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   d4370:	4620      	mov	r0, r4
   d4372:	2101      	movs	r1, #1
   d4374:	8163      	strh	r3, [r4, #10]
   d4376:	f001 fb13 	bl	d59a0 <_ZN6AB18055setupEb>
        ab1805.resetConfig();                       // Reset the AB1805 configuration to default values
   d437a:	2100      	movs	r1, #0
   d437c:	4620      	mov	r0, r4
   d437e:	f001 f8f1 	bl	d5564 <_ZN6AB180511resetConfigEm>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   d4382:	217c      	movs	r1, #124	; 0x7c
   d4384:	4620      	mov	r0, r4
   d4386:	f001 f869 	bl	d545c <_ZN6AB18056setWDTEi>
	initializeLoRA();								// Start the LoRA radio
   d438a:	f000 fa4d 	bl	d4828 <_Z14initializeLoRAv>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   d438e:	f002 f989 	bl	d66a4 <_ZN9LocalTime8instanceEv>
   d4392:	494c      	ldr	r1, [pc, #304]	; (d44c4 <setup+0x170>)
   d4394:	4604      	mov	r4, r0
   d4396:	a808      	add	r0, sp, #32
   d4398:	f001 ffc8 	bl	d632c <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   d439c:	a909      	add	r1, sp, #36	; 0x24
   d439e:	f104 0008 	add.w	r0, r4, #8
   d43a2:	f007 f8f6 	bl	db592 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d43a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d43a8:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   d43aa:	a90f      	add	r1, sp, #60	; 0x3c
   d43ac:	f104 0020 	add.w	r0, r4, #32
   d43b0:	f007 f8ef 	bl	db592 <_ZN6StringaSERKS_>
class LocalTimeHMS {
   d43b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d43b6:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   d43b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   d43ba:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   d43bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d43be:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   d43c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d43c2:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   d43c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   d43c6:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   d43c8:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
   d43cc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   d43d0:	a808      	add	r0, sp, #32
   d43d2:	f001 fc35 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d43d6:	f007 fb12 	bl	db9fe <_ZN9TimeClass3nowEv>
   d43da:	4c3b      	ldr	r4, [pc, #236]	; (d44c8 <setup+0x174>)
   d43dc:	17c1      	asrs	r1, r0, #31
   d43de:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
	localTimeConvert_NOW.withCurrentTime().convert();  				        // Convert to local time for use later
   d43e2:	4620      	mov	r0, r4
   d43e4:	f002 f9d6 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
  	publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("22:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d43e8:	4b38      	ldr	r3, [pc, #224]	; (d44cc <setup+0x178>)
   d43ea:	4939      	ldr	r1, [pc, #228]	; (d44d0 <setup+0x17c>)
   d43ec:	8b5d      	ldrh	r5, [r3, #26]
   d43ee:	a803      	add	r0, sp, #12
   d43f0:	f001 fdc0 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
   d43f4:	4937      	ldr	r1, [pc, #220]	; (d44d4 <setup+0x180>)
   d43f6:	a805      	add	r0, sp, #20
   d43f8:	f001 fdbc 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
   d43fc:	aa05      	add	r2, sp, #20
   d43fe:	a903      	add	r1, sp, #12
   d4400:	a808      	add	r0, sp, #32
   d4402:	f7ff fec7 	bl	d4194 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4406:	4629      	mov	r1, r5
   d4408:	aa08      	add	r2, sp, #32
   d440a:	4833      	ldr	r0, [pc, #204]	; (d44d8 <setup+0x184>)
   d440c:	f002 fe67 	bl	d70de <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d4410:	a808      	add	r0, sp, #32
   d4412:	f7ff fed3 	bl	d41bc <_ZN14LocalTimeRangeD1Ev>
   d4416:	a805      	add	r0, sp, #20
   d4418:	f001 fbfa 	bl	d5c10 <_ZN12LocalTimeHMSD1Ev>
   d441c:	a803      	add	r0, sp, #12
   d441e:	f001 fbf7 	bl	d5c10 <_ZN12LocalTimeHMSD1Ev>
  	Log.info("Startup complete at %s with battery %4.2f", localTimeConvert_NOW.format(TIME_FORMAT_ISO8601_FULL).c_str(), System.batteryCharge());
   d4422:	4b2e      	ldr	r3, [pc, #184]	; (d44dc <setup+0x188>)
   d4424:	4621      	mov	r1, r4
   d4426:	681a      	ldr	r2, [r3, #0]
   d4428:	a808      	add	r0, sp, #32
   d442a:	f002 f895 	bl	d6558 <_ZN16LocalTimeConvert6formatEPKc>
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
   d442e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4430:	a903      	add	r1, sp, #12
   d4432:	2003      	movs	r0, #3
   d4434:	9d08      	ldr	r5, [sp, #32]
    const diag_source* src = nullptr;
   d4436:	9203      	str	r2, [sp, #12]
    const int ret = diag_get_source(id, &src, nullptr);
   d4438:	f004 fc30 	bl	d8c9c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d443c:	2800      	cmp	r0, #0
   d443e:	d13c      	bne.n	d44ba <setup+0x166>
        return ret;
    }
    return get(src, val);
   d4440:	9c03      	ldr	r4, [sp, #12]
    SPARK_ASSERT(src && src->callback);
   d4442:	b10c      	cbz	r4, d4448 <setup+0xf4>
   d4444:	6923      	ldr	r3, [r4, #16]
   d4446:	b923      	cbnz	r3, d4452 <setup+0xfe>
   d4448:	4a25      	ldr	r2, [pc, #148]	; (d44e0 <setup+0x18c>)
   d444a:	2100      	movs	r1, #0
   d444c:	200a      	movs	r0, #10
   d444e:	f004 fbfd 	bl	d8c4c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4452:	2300      	movs	r3, #0
   d4454:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4458:	230c      	movs	r3, #12
   d445a:	f8ad 3014 	strh.w	r3, [sp, #20]
   d445e:	ab02      	add	r3, sp, #8
   d4460:	9306      	str	r3, [sp, #24]
   d4462:	2304      	movs	r3, #4
   d4464:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4466:	6923      	ldr	r3, [r4, #16]
   d4468:	aa05      	add	r2, sp, #20
   d446a:	2101      	movs	r1, #1
   d446c:	4620      	mov	r0, r4
   d446e:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4470:	bb18      	cbnz	r0, d44ba <setup+0x166>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4472:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d4476:	ee07 3a90 	vmov	s15, r3
   d447a:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   d447e:	ee17 0a90 	vmov	r0, s15
   d4482:	f007 ff17 	bl	dc2b4 <__aeabi_f2d>
   d4486:	462a      	mov	r2, r5
   d4488:	e9cd 0100 	strd	r0, r1, [sp]
   d448c:	4915      	ldr	r1, [pc, #84]	; (d44e4 <setup+0x190>)
   d448e:	4816      	ldr	r0, [pc, #88]	; (d44e8 <setup+0x194>)
   d4490:	f7ff fe68 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4494:	a808      	add	r0, sp, #32
   d4496:	f006 fff5 	bl	db484 <_ZN6StringD1Ev>
  	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d449a:	4814      	ldr	r0, [pc, #80]	; (d44ec <setup+0x198>)
   d449c:	4914      	ldr	r1, [pc, #80]	; (d44f0 <setup+0x19c>)
   d449e:	8800      	ldrh	r0, [r0, #0]
   d44a0:	2200      	movs	r2, #0
   d44a2:	9200      	str	r2, [sp, #0]
   d44a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d44a8:	f005 fb2c 	bl	d9b04 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   d44ac:	4b11      	ldr	r3, [pc, #68]	; (d44f4 <setup+0x1a0>)
   d44ae:	781a      	ldrb	r2, [r3, #0]
   d44b0:	b90a      	cbnz	r2, d44b6 <setup+0x162>
   d44b2:	2204      	movs	r2, #4
   d44b4:	701a      	strb	r2, [r3, #0]
}
   d44b6:	b01f      	add	sp, #124	; 0x7c
   d44b8:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d44ba:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d44be:	e7de      	b.n	d447e <setup+0x12a>
   d44c0:	2003dd74 	.word	0x2003dd74
   d44c4:	000dcd63 	.word	0x000dcd63
   d44c8:	2003ddc0 	.word	0x2003ddc0
   d44cc:	2003e2c0 	.word	0x2003e2c0
   d44d0:	000dcd8a 	.word	0x000dcd8a
   d44d4:	000dcd93 	.word	0x000dcd93
   d44d8:	2003deb8 	.word	0x2003deb8
   d44dc:	2003dcf4 	.word	0x2003dcf4
   d44e0:	000d88cd 	.word	0x000d88cd
   d44e4:	000dcd9c 	.word	0x000dcd9c
   d44e8:	2003e570 	.word	0x2003e570
   d44ec:	000dd060 	.word	0x000dd060
   d44f0:	000d40c9 	.word	0x000d40c9
   d44f4:	2003dee8 	.word	0x2003dee8

000d44f8 <_Z21secondsUntilNextEventv.part.0>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d44f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d44fa:	b0c1      	sub	sp, #260	; 0x104
   d44fc:	f007 fa7f 	bl	db9fe <_ZN9TimeClass3nowEv>
   d4500:	4e28      	ldr	r6, [pc, #160]	; (d45a4 <_Z21secondsUntilNextEventv.part.0+0xac>)
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d4502:	4f29      	ldr	r7, [pc, #164]	; (d45a8 <_Z21secondsUntilNextEventv.part.0+0xb0>)
   d4504:	17c1      	asrs	r1, r0, #31
   d4506:	e9c6 0118 	strd	r0, r1, [r6, #96]	; 0x60
        localTimeConvert_NOW.withCurrentTime().convert();
   d450a:	4630      	mov	r0, r6
   d450c:	f002 f942 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
        Log.info("local time: %s", localTimeConvert_NOW.format(TIME_FORMAT_DEFAULT).c_str());
   d4510:	683a      	ldr	r2, [r7, #0]
   d4512:	4631      	mov	r1, r6
   d4514:	a804      	add	r0, sp, #16
   d4516:	f002 f81f 	bl	d6558 <_ZN16LocalTimeConvert6formatEPKc>
   d451a:	9a04      	ldr	r2, [sp, #16]
   d451c:	4923      	ldr	r1, [pc, #140]	; (d45ac <_Z21secondsUntilNextEventv.part.0+0xb4>)
   d451e:	4824      	ldr	r0, [pc, #144]	; (d45b0 <_Z21secondsUntilNextEventv.part.0+0xb8>)
   d4520:	f7ff fe20 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4524:	a804      	add	r0, sp, #16
   d4526:	f006 ffad 	bl	db484 <_ZN6StringD1Ev>
class LocalTimeConvert {
   d452a:	2306      	movs	r3, #6
   d452c:	a805      	add	r0, sp, #20
   d452e:	9304      	str	r3, [sp, #16]
   d4530:	f001 fe4a 	bl	d61c8 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d4534:	f007 fa63 	bl	db9fe <_ZN9TimeClass3nowEv>
   d4538:	17c1      	asrs	r1, r0, #31
   d453a:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
        localTimeConvert_NEXT.withCurrentTime().convert();
   d453e:	a804      	add	r0, sp, #16
   d4540:	f002 f928 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
		if (publishSchedule.getNextScheduledTime(localTimeConvert_NEXT)) {
   d4544:	481b      	ldr	r0, [pc, #108]	; (d45b4 <_Z21secondsUntilNextEventv.part.0+0xbc>)
   d4546:	a904      	add	r1, sp, #16
   d4548:	f002 fc74 	bl	d6e34 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d454c:	b340      	cbz	r0, d45a0 <_Z21secondsUntilNextEventv.part.0+0xa8>
			long unsigned secondsToReturn = constrain(localTimeConvert_NEXT.time - localTimeConvert_NOW.time, 0L, 86400L);	// Constrain to positive seconds less than or equal to a day.
   d454e:	e9d6 3118 	ldrd	r3, r1, [r6, #96]	; 0x60
   d4552:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   d4554:	1ad4      	subs	r4, r2, r3
   d4556:	9b1d      	ldr	r3, [sp, #116]	; 0x74
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   d4558:	4a17      	ldr	r2, [pc, #92]	; (d45b8 <_Z21secondsUntilNextEventv.part.0+0xc0>)
   d455a:	eb63 0501 	sbc.w	r5, r3, r1
   d455e:	42a2      	cmp	r2, r4
   d4560:	f04f 0300 	mov.w	r3, #0
   d4564:	eb73 0105 	sbcs.w	r1, r3, r5
   d4568:	bfbc      	itt	lt
   d456a:	4614      	movlt	r4, r2
   d456c:	461d      	movlt	r5, r3
   d456e:	2c00      	cmp	r4, #0
   d4570:	f175 0300 	sbcs.w	r3, r5, #0
   d4574:	bfb8      	it	lt
   d4576:	2400      	movlt	r4, #0
        	Log.info("time of next event is: %s which is %lu seconds away", localTimeConvert_NEXT.format(TIME_FORMAT_DEFAULT).c_str(), secondsToReturn);
   d4578:	683a      	ldr	r2, [r7, #0]
   d457a:	a904      	add	r1, sp, #16
   d457c:	4668      	mov	r0, sp
   d457e:	f001 ffeb 	bl	d6558 <_ZN16LocalTimeConvert6formatEPKc>
   d4582:	480b      	ldr	r0, [pc, #44]	; (d45b0 <_Z21secondsUntilNextEventv.part.0+0xb8>)
   d4584:	9a00      	ldr	r2, [sp, #0]
   d4586:	490d      	ldr	r1, [pc, #52]	; (d45bc <_Z21secondsUntilNextEventv.part.0+0xc4>)
   d4588:	4623      	mov	r3, r4
   d458a:	f7ff fdeb 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d458e:	4668      	mov	r0, sp
   d4590:	f006 ff78 	bl	db484 <_ZN6StringD1Ev>
class LocalTimeConvert {
   d4594:	a805      	add	r0, sp, #20
   d4596:	f001 fb53 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
   d459a:	4620      	mov	r0, r4
   d459c:	b041      	add	sp, #260	; 0x104
   d459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else return 0;
   d45a0:	4604      	mov	r4, r0
   d45a2:	e7f7      	b.n	d4594 <_Z21secondsUntilNextEventv.part.0+0x9c>
   d45a4:	2003ddc0 	.word	0x2003ddc0
   d45a8:	2003dcf0 	.word	0x2003dcf0
   d45ac:	000dcdc6 	.word	0x000dcdc6
   d45b0:	2003e570 	.word	0x2003e570
   d45b4:	2003deb8 	.word	0x2003deb8
   d45b8:	00015180 	.word	0x00015180
   d45bc:	000dcdd5 	.word	0x000dcdd5

000d45c0 <_Z21secondsUntilNextEventv>:
int secondsUntilNextEvent() {											// Time till next scheduled event
   d45c0:	b508      	push	{r3, lr}
   if (Time.isValid()) {
   d45c2:	f007 f9ff 	bl	db9c4 <_ZN9TimeClass7isValidEv>
   d45c6:	b118      	cbz	r0, d45d0 <_Z21secondsUntilNextEventv+0x10>
   d45c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d45cc:	f7ff bf94 	b.w	d44f8 <_Z21secondsUntilNextEventv.part.0>
   d45d0:	bd08      	pop	{r3, pc}
	...

000d45d4 <loop>:
void loop() {
   d45d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   d45d8:	4d7f      	ldr	r5, [pc, #508]	; (d47d8 <loop+0x204>)
   d45da:	782b      	ldrb	r3, [r5, #0]
   d45dc:	2b03      	cmp	r3, #3
void loop() {
   d45de:	b090      	sub	sp, #64	; 0x40
	switch (state) {
   d45e0:	d012      	beq.n	d4608 <loop+0x34>
   d45e2:	2b04      	cmp	r3, #4
   d45e4:	f000 8083 	beq.w	d46ee <loop+0x11a>
   d45e8:	2b02      	cmp	r3, #2
   d45ea:	d175      	bne.n	d46d8 <loop+0x104>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d45ec:	4b7b      	ldr	r3, [pc, #492]	; (d47dc <loop+0x208>)
   d45ee:	781b      	ldrb	r3, [r3, #0]
   d45f0:	2b02      	cmp	r3, #2
   d45f2:	d001      	beq.n	d45f8 <loop+0x24>
   d45f4:	f7ff fdf6 	bl	d41e4 <_Z22publishStateTransitionv>
			if (publishSchedule.isScheduledTime()) state = LoRA_STATE;		   // See Time section in setup for schedule
   d45f8:	4879      	ldr	r0, [pc, #484]	; (d47e0 <loop+0x20c>)
   d45fa:	f002 fc51 	bl	d6ea0 <_ZN17LocalTimeSchedule15isScheduledTimeEv>
   d45fe:	2800      	cmp	r0, #0
   d4600:	d06a      	beq.n	d46d8 <loop+0x104>
   d4602:	2304      	movs	r3, #4
			if ((millis() - startLoRAWindow) > 300000L) state = IDLE_STATE;	// This is a fail safe to make sure an off-line client won't prevent gatewat from checking in - and setting its clock
   d4604:	702b      	strb	r3, [r5, #0]
   d4606:	e067      	b.n	d46d8 <loop+0x104>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d4608:	4b74      	ldr	r3, [pc, #464]	; (d47dc <loop+0x208>)
   d460a:	781b      	ldrb	r3, [r3, #0]
   d460c:	2b03      	cmp	r3, #3
   d460e:	d001      	beq.n	d4614 <loop+0x40>
   d4610:	f7ff fde8 	bl	d41e4 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d4614:	2100      	movs	r1, #0
   d4616:	4873      	ldr	r0, [pc, #460]	; (d47e4 <loop+0x210>)
   d4618:	f000 ff20 	bl	d545c <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent()-10;  		   		   // Subtracting ten seconds to reduce prospect of round tripping to IDLE
   d461c:	f7ff ffd0 	bl	d45c0 <_Z21secondsUntilNextEventv>
   d4620:	f1a0 070a 	sub.w	r7, r0, #10
			Log.info("Sleep for %i seconds", wakeInSeconds);
   d4624:	463a      	mov	r2, r7
   d4626:	4970      	ldr	r1, [pc, #448]	; (d47e8 <loop+0x214>)
   d4628:	4870      	ldr	r0, [pc, #448]	; (d47ec <loop+0x218>)
   d462a:	f7ff fd9b 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   d462e:	4b70      	ldr	r3, [pc, #448]	; (d47f0 <loop+0x21c>)
   d4630:	7d1a      	ldrb	r2, [r3, #20]
   d4632:	b10a      	cbz	r2, d4638 <loop+0x64>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4634:	2202      	movs	r2, #2
   d4636:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   d4638:	4b6e      	ldr	r3, [pc, #440]	; (d47f4 <loop+0x220>)
   d463a:	486d      	ldr	r0, [pc, #436]	; (d47f0 <loop+0x21c>)
   d463c:	f8b3 8000 	ldrh.w	r8, [r3]
   d4640:	2200      	movs	r2, #0
   d4642:	4641      	mov	r1, r8
   d4644:	f7ff fd5a 	bl	d40fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4648:	7d03      	ldrb	r3, [r0, #20]
   d464a:	4606      	mov	r6, r0
   d464c:	b1fb      	cbz	r3, d468e <loop+0xba>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d464e:	6833      	ldr	r3, [r6, #0]
				.duration(wakeInSeconds * 1000L);
   d4650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4654:	68db      	ldr	r3, [r3, #12]
   d4656:	4347      	muls	r7, r0
        if (!start) {
   d4658:	b12b      	cbz	r3, d4666 <loop+0x92>
            if (start->type == type) {
   d465a:	889a      	ldrh	r2, [r3, #4]
   d465c:	2a04      	cmp	r2, #4
   d465e:	f000 80b8 	beq.w	d47d2 <loop+0x1fe>
            start = start->next;
   d4662:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4664:	e7f8      	b.n	d4658 <loop+0x84>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4666:	4964      	ldr	r1, [pc, #400]	; (d47f8 <loop+0x224>)
   d4668:	2010      	movs	r0, #16
   d466a:	f007 fcb1 	bl	dbfd0 <_ZnwjRKSt9nothrow_t>
   d466e:	4604      	mov	r4, r0
   d4670:	2800      	cmp	r0, #0
   d4672:	f000 80ac 	beq.w	d47ce <loop+0x1fa>
   d4676:	2210      	movs	r2, #16
   d4678:	2100      	movs	r1, #0
   d467a:	f008 f95b 	bl	dc934 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d467e:	4b5f      	ldr	r3, [pc, #380]	; (d47fc <loop+0x228>)
   d4680:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4682:	2304      	movs	r3, #4
   d4684:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4686:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d4688:	e9c4 3702 	strd	r3, r7, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d468c:	6134      	str	r4, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d468e:	4958      	ldr	r1, [pc, #352]	; (d47f0 <loop+0x21c>)
   d4690:	a802      	add	r0, sp, #8
   d4692:	f007 f81b 	bl	db6cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4696:	4853      	ldr	r0, [pc, #332]	; (d47e4 <loop+0x210>)
   d4698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d469c:	f000 fede 	bl	d545c <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d46a0:	9b02      	ldr	r3, [sp, #8]
        if (wakeupSource_) {
   d46a2:	b30b      	cbz	r3, d46e8 <loop+0x114>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d46a4:	889a      	ldrh	r2, [r3, #4]
   d46a6:	2a01      	cmp	r2, #1
   d46a8:	d11e      	bne.n	d46e8 <loop+0x114>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d46aa:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   d46ac:	4598      	cmp	r8, r3
   d46ae:	d10d      	bne.n	d46cc <loop+0xf8>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   d46b0:	4953      	ldr	r1, [pc, #332]	; (d4800 <loop+0x22c>)
   d46b2:	a805      	add	r0, sp, #20
   d46b4:	f006 ff31 	bl	db51a <_ZN6StringC1EPKc>
   d46b8:	a805      	add	r0, sp, #20
   d46ba:	f000 fa77 	bl	d4bac <_Z15setLowPowerMode6String>
   d46be:	a805      	add	r0, sp, #20
   d46c0:	f006 fee0 	bl	db484 <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   d46c4:	494f      	ldr	r1, [pc, #316]	; (d4804 <loop+0x230>)
   d46c6:	4849      	ldr	r0, [pc, #292]	; (d47ec <loop+0x218>)
   d46c8:	f7ff fd4c 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   d46cc:	9802      	ldr	r0, [sp, #8]
			state = IDLE_STATE;
   d46ce:	2302      	movs	r3, #2
   d46d0:	702b      	strb	r3, [r5, #0]
   d46d2:	b108      	cbz	r0, d46d8 <loop+0x104>
            free(wakeupSource_);
   d46d4:	f004 fbf4 	bl	d8ec0 <free>
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   d46d8:	4842      	ldr	r0, [pc, #264]	; (d47e4 <loop+0x210>)
   d46da:	f001 fa41 	bl	d5b60 <_ZN6AB18054loopEv>
    storageObjectLoop();                            // Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   d46de:	f000 fbdd 	bl	d4e9c <_Z17storageObjectLoopv>
}
   d46e2:	b010      	add	sp, #64	; 0x40
   d46e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return std::numeric_limits<pin_t>::max();
   d46e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d46ec:	e7de      	b.n	d46ac <loop+0xd8>
			if (state != oldState) {
   d46ee:	4b3b      	ldr	r3, [pc, #236]	; (d47dc <loop+0x208>)
   d46f0:	4e45      	ldr	r6, [pc, #276]	; (d4808 <loop+0x234>)
   d46f2:	781b      	ldrb	r3, [r3, #0]
   d46f4:	2b04      	cmp	r3, #4
   d46f6:	d03c      	beq.n	d4772 <loop+0x19e>
				publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d46f8:	f7ff fd74 	bl	d41e4 <_Z22publishStateTransitionv>
				takeMeasurements();
   d46fc:	f000 fd54 	bl	d51a8 <_Z16takeMeasurementsv>
   d4700:	f004 f8ec 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
				startLoRAWindow = millis();              	// Mark when we enter this state - for timeouts
   d4704:	6030      	str	r0, [r6, #0]
				int randomDelay = random(10);
   d4706:	200a      	movs	r0, #10
   d4708:	f006 fde1 	bl	db2ce <_Z6randomi>
				Log.info("Node is preparing to send report with a randomDelay of %i", randomDelay);
   d470c:	493f      	ldr	r1, [pc, #252]	; (d480c <loop+0x238>)
   d470e:	4602      	mov	r2, r0
				int randomDelay = random(10);
   d4710:	4604      	mov	r4, r0
				Log.info("Node is preparing to send report with a randomDelay of %i", randomDelay);
   d4712:	4836      	ldr	r0, [pc, #216]	; (d47ec <loop+0x218>)
   d4714:	f7ff fd26 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
				delay(randomDelay *1000);
   d4718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d471c:	4360      	muls	r0, r4
   d471e:	f004 fc37 	bl	d8f90 <delay>
				if (!composeDataReportNode())	{						// Initiate send data report
   d4722:	f000 f8ad 	bl	d4880 <_Z21composeDataReportNodev>
   d4726:	bb20      	cbnz	r0, d4772 <loop+0x19e>
					sysStatus.frequencyMinutes = 1;						// Rescue mode
   d4728:	4c39      	ldr	r4, [pc, #228]	; (d4810 <loop+0x23c>)
					Log.info("Send failed - going to send every minute");
   d472a:	493a      	ldr	r1, [pc, #232]	; (d4814 <loop+0x240>)
   d472c:	482f      	ldr	r0, [pc, #188]	; (d47ec <loop+0x218>)
					sysStatus.frequencyMinutes = 1;						// Rescue mode
   d472e:	2301      	movs	r3, #1
   d4730:	8363      	strh	r3, [r4, #26]
					Log.info("Send failed - going to send every minute");
   d4732:	f7ff fd17 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
					publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4736:	4938      	ldr	r1, [pc, #224]	; (d4818 <loop+0x244>)
   d4738:	8b64      	ldrh	r4, [r4, #26]
   d473a:	4668      	mov	r0, sp
   d473c:	f001 fc1a 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
   d4740:	4936      	ldr	r1, [pc, #216]	; (d481c <loop+0x248>)
   d4742:	a802      	add	r0, sp, #8
   d4744:	f001 fc16 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
   d4748:	aa02      	add	r2, sp, #8
   d474a:	4669      	mov	r1, sp
   d474c:	a805      	add	r0, sp, #20
   d474e:	f7ff fd21 	bl	d4194 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4752:	aa05      	add	r2, sp, #20
   d4754:	4621      	mov	r1, r4
   d4756:	4822      	ldr	r0, [pc, #136]	; (d47e0 <loop+0x20c>)
   d4758:	f002 fcc1 	bl	d70de <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d475c:	a805      	add	r0, sp, #20
   d475e:	f7ff fd2d 	bl	d41bc <_ZN14LocalTimeRangeD1Ev>
   d4762:	a802      	add	r0, sp, #8
   d4764:	f001 fa54 	bl	d5c10 <_ZN12LocalTimeHMSD1Ev>
   d4768:	4668      	mov	r0, sp
   d476a:	f001 fa51 	bl	d5c10 <_ZN12LocalTimeHMSD1Ev>
					state = IDLE_STATE;
   d476e:	2302      	movs	r3, #2
   d4770:	702b      	strb	r3, [r5, #0]
			if (receiveAcknowledmentDataReportNode()) {					// Listen for acknowledgement
   d4772:	f000 f8f9 	bl	d4968 <_Z34receiveAcknowledmentDataReportNodev>
   d4776:	b308      	cbz	r0, d47bc <loop+0x1e8>
				publishSchedule.withMinuteOfHour(sysStatus.frequencyMinutes, LocalTimeRange(LocalTimeHMS("06:00:00"), LocalTimeHMS("21:59:59")));	 // Publish every 15 minutes from 6am to 10pm
   d4778:	4b25      	ldr	r3, [pc, #148]	; (d4810 <loop+0x23c>)
   d477a:	4927      	ldr	r1, [pc, #156]	; (d4818 <loop+0x244>)
   d477c:	8b5c      	ldrh	r4, [r3, #26]
   d477e:	4668      	mov	r0, sp
   d4780:	f001 fbf8 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
   d4784:	4925      	ldr	r1, [pc, #148]	; (d481c <loop+0x248>)
   d4786:	a802      	add	r0, sp, #8
   d4788:	f001 fbf4 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
   d478c:	aa02      	add	r2, sp, #8
   d478e:	4669      	mov	r1, sp
   d4790:	a805      	add	r0, sp, #20
   d4792:	f7ff fcff 	bl	d4194 <_ZN14LocalTimeRangeC1E12LocalTimeHMSS0_>
   d4796:	aa05      	add	r2, sp, #20
   d4798:	4621      	mov	r1, r4
   d479a:	4811      	ldr	r0, [pc, #68]	; (d47e0 <loop+0x20c>)
   d479c:	f002 fc9f 	bl	d70de <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>
   d47a0:	a805      	add	r0, sp, #20
   d47a2:	f7ff fd0b 	bl	d41bc <_ZN14LocalTimeRangeD1Ev>
   d47a6:	a802      	add	r0, sp, #8
   d47a8:	f001 fa32 	bl	d5c10 <_ZN12LocalTimeHMSD1Ev>
   d47ac:	4668      	mov	r0, sp
   d47ae:	f001 fa2f 	bl	d5c10 <_ZN12LocalTimeHMSD1Ev>
				current.hourly = 0;							// Zero the hourly count
   d47b2:	4b1b      	ldr	r3, [pc, #108]	; (d4820 <loop+0x24c>)
   d47b4:	2200      	movs	r2, #0
   d47b6:	839a      	strh	r2, [r3, #28]
				state = IDLE_STATE;
   d47b8:	2302      	movs	r3, #2
   d47ba:	702b      	strb	r3, [r5, #0]
   d47bc:	f004 f88e 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > 300000L) state = IDLE_STATE;	// This is a fail safe to make sure an off-line client won't prevent gatewat from checking in - and setting its clock
   d47c0:	6833      	ldr	r3, [r6, #0]
   d47c2:	1ac0      	subs	r0, r0, r3
   d47c4:	4b17      	ldr	r3, [pc, #92]	; (d4824 <loop+0x250>)
   d47c6:	4298      	cmp	r0, r3
   d47c8:	d986      	bls.n	d46d8 <loop+0x104>
   d47ca:	2302      	movs	r3, #2
   d47cc:	e71a      	b.n	d4604 <loop+0x30>
                valid_ = false;
   d47ce:	7530      	strb	r0, [r6, #20]
                return *this;
   d47d0:	e75d      	b.n	d468e <loop+0xba>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d47d2:	60df      	str	r7, [r3, #12]
                return *this;
   d47d4:	e75b      	b.n	d468e <loop+0xba>
   d47d6:	bf00      	nop
   d47d8:	2003dee8 	.word	0x2003dee8
   d47dc:	2003deb0 	.word	0x2003deb0
   d47e0:	2003deb8 	.word	0x2003deb8
   d47e4:	2003dd74 	.word	0x2003dd74
   d47e8:	000dce09 	.word	0x000dce09
   d47ec:	2003e570 	.word	0x2003e570
   d47f0:	2003dd94 	.word	0x2003dd94
   d47f4:	000dd060 	.word	0x000dd060
   d47f8:	000ddb2c 	.word	0x000ddb2c
   d47fc:	00030010 	.word	0x00030010
   d4800:	000dd4f0 	.word	0x000dd4f0
   d4804:	000dce1e 	.word	0x000dce1e
   d4808:	2003dd70 	.word	0x2003dd70
   d480c:	000dce48 	.word	0x000dce48
   d4810:	2003e2c0 	.word	0x2003e2c0
   d4814:	000dce82 	.word	0x000dce82
   d4818:	000dcd8a 	.word	0x000dcd8a
   d481c:	000dceab 	.word	0x000dceab
   d4820:	2003e2a0 	.word	0x2003e2a0
   d4824:	000493e0 	.word	0x000493e0

000d4828 <_Z14initializeLoRAv>:
 * @brief Initialize the LoRA radio - this is a common step for nodes and gateways
 * 
 * @return true - initialization successful
 * @return false - initialization failed
 */
bool initializeLoRA() {
   d4828:	b510      	push	{r4, lr}
 	// Set up the Radio Module
	if (!manager.init()) {
   d482a:	480e      	ldr	r0, [pc, #56]	; (d4864 <_Z14initializeLoRAv+0x3c>)
   d482c:	f003 fad8 	bl	d7de0 <_ZN8RHRouter4initEv>
   d4830:	4604      	mov	r4, r0
   d4832:	b928      	cbnz	r0, d4840 <_Z14initializeLoRAv+0x18>
		Log.info("init failed");	// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d4834:	490c      	ldr	r1, [pc, #48]	; (d4868 <_Z14initializeLoRAv+0x40>)
   d4836:	480d      	ldr	r0, [pc, #52]	; (d486c <_Z14initializeLoRAv+0x44>)
   d4838:	f7ff fc94 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i", sysStatus.nodeNumber, sysStatus.deviceID);
	return true;
}
   d483c:	4620      	mov	r0, r4
   d483e:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d4840:	ed9f 0a0b 	vldr	s0, [pc, #44]	; d4870 <_Z14initializeLoRAv+0x48>
   d4844:	480b      	ldr	r0, [pc, #44]	; (d4874 <_Z14initializeLoRAv+0x4c>)
   d4846:	f003 fda3 	bl	d8390 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   d484a:	480a      	ldr	r0, [pc, #40]	; (d4874 <_Z14initializeLoRAv+0x4c>)
   d484c:	2200      	movs	r2, #0
   d484e:	2117      	movs	r1, #23
   d4850:	f003 ff18 	bl	d8684 <_ZN7RH_RF9510setTxPowerEab>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i", sysStatus.nodeNumber, sysStatus.deviceID);
   d4854:	4a08      	ldr	r2, [pc, #32]	; (d4878 <_Z14initializeLoRAv+0x50>)
   d4856:	4909      	ldr	r1, [pc, #36]	; (d487c <_Z14initializeLoRAv+0x54>)
   d4858:	8813      	ldrh	r3, [r2, #0]
   d485a:	4804      	ldr	r0, [pc, #16]	; (d486c <_Z14initializeLoRAv+0x44>)
   d485c:	8852      	ldrh	r2, [r2, #2]
   d485e:	f7ff fc81 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	return true;
   d4862:	e7eb      	b.n	d483c <_Z14initializeLoRAv+0x14>
   d4864:	2003e118 	.word	0x2003e118
   d4868:	000dced0 	.word	0x000dced0
   d486c:	2003e570 	.word	0x2003e570
   d4870:	4464c000 	.word	0x4464c000
   d4874:	2003dfe4 	.word	0x2003dfe4
   d4878:	2003e2c0 	.word	0x2003e2c0
   d487c:	000dcedc 	.word	0x000dcedc

000d4880 <_Z21composeDataReportNodev>:
}

// ************************************************************************
// *****                         Node Functions                       *****
// ************************************************************************
bool composeDataReportNode() {
   d4880:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Sending data report to Gateway");
   d4882:	492d      	ldr	r1, [pc, #180]	; (d4938 <_Z21composeDataReportNodev+0xb8>)
   d4884:	482d      	ldr	r0, [pc, #180]	; (d493c <_Z21composeDataReportNodev+0xbc>)
	digitalWrite(BLUE_LED,HIGH);

	static uint8_t msgCnt = 0;

	buf[0] = highByte(sysStatus.nodeNumber);								// to be replaced/updated
   d4886:	4c2e      	ldr	r4, [pc, #184]	; (d4940 <_Z21composeDataReportNodev+0xc0>)
	Log.info("Sending data report to Gateway");
   d4888:	f7ff fc6c 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   d488c:	4b2d      	ldr	r3, [pc, #180]	; (d4944 <_Z21composeDataReportNodev+0xc4>)
   d488e:	881e      	ldrh	r6, [r3, #0]
   d4890:	2101      	movs	r1, #1
   d4892:	4630      	mov	r0, r6
   d4894:	f007 fadd 	bl	dbe52 <digitalWrite>
	buf[0] = highByte(sysStatus.nodeNumber);								// to be replaced/updated
   d4898:	4a2b      	ldr	r2, [pc, #172]	; (d4948 <_Z21composeDataReportNodev+0xc8>)
   d489a:	8853      	ldrh	r3, [r2, #2]
	buf[1] = lowByte(sysStatus.nodeNumber);								// to be replaced/updated
   d489c:	7063      	strb	r3, [r4, #1]
	buf[0] = highByte(sysStatus.nodeNumber);								// to be replaced/updated
   d489e:	1219      	asrs	r1, r3, #8
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d48a0:	8813      	ldrh	r3, [r2, #0]
	buf[0] = highByte(sysStatus.nodeNumber);								// to be replaced/updated
   d48a2:	7021      	strb	r1, [r4, #0]
	buf[3] = lowByte(sysStatus.deviceID);
   d48a4:	70e3      	strb	r3, [r4, #3]
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d48a6:	1219      	asrs	r1, r3, #8
	buf[4] = 1;						// Set for code release - fix later
	buf[5] = highByte(current.hourly);
   d48a8:	4b28      	ldr	r3, [pc, #160]	; (d494c <_Z21composeDataReportNodev+0xcc>)
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d48aa:	70a1      	strb	r1, [r4, #2]
	buf[5] = highByte(current.hourly);
   d48ac:	8b99      	ldrh	r1, [r3, #28]
	buf[6] = lowByte(current.hourly); 
   d48ae:	71a1      	strb	r1, [r4, #6]
	buf[5] = highByte(current.hourly);
   d48b0:	1208      	asrs	r0, r1, #8
	buf[7] = highByte(current.daily);
   d48b2:	8bd9      	ldrh	r1, [r3, #30]
	buf[5] = highByte(current.hourly);
   d48b4:	7160      	strb	r0, [r4, #5]
	buf[8] = lowByte(current.daily); 
   d48b6:	7221      	strb	r1, [r4, #8]
	buf[7] = highByte(current.daily);
   d48b8:	1208      	asrs	r0, r1, #8
	buf[9] = current.internalTempC;
   d48ba:	7819      	ldrb	r1, [r3, #0]
   d48bc:	7261      	strb	r1, [r4, #9]
	buf[10] = current.stateOfCharge;
   d48be:	6859      	ldr	r1, [r3, #4]
	buf[11] = current.batteryState;	
   d48c0:	7a1b      	ldrb	r3, [r3, #8]
   d48c2:	72e3      	strb	r3, [r4, #11]
	buf[12] = sysStatus.resetCount;
   d48c4:	68d3      	ldr	r3, [r2, #12]
	buf[7] = highByte(current.daily);
   d48c6:	71e0      	strb	r0, [r4, #7]
	buf[12] = sysStatus.resetCount;
   d48c8:	7323      	strb	r3, [r4, #12]
	buf[4] = 1;						// Set for code release - fix later
   d48ca:	2501      	movs	r5, #1
	buf[13] = sysStatus.lastAlertCode;
   d48cc:	7f13      	ldrb	r3, [r2, #28]
	buf[14] = highByte(driver.lastRssi());
   d48ce:	4820      	ldr	r0, [pc, #128]	; (d4950 <_Z21composeDataReportNodev+0xd0>)
	buf[10] = current.stateOfCharge;
   d48d0:	72a1      	strb	r1, [r4, #10]
	buf[13] = sysStatus.lastAlertCode;
   d48d2:	7363      	strb	r3, [r4, #13]
	buf[4] = 1;						// Set for code release - fix later
   d48d4:	7125      	strb	r5, [r4, #4]
	buf[14] = highByte(driver.lastRssi());
   d48d6:	f002 fdfe 	bl	d74d6 <_ZN15RHGenericDriver8lastRssiEv>
   d48da:	1200      	asrs	r0, r0, #8
   d48dc:	73a0      	strb	r0, [r4, #14]
	buf[15] = lowByte(driver.lastRssi()); 
   d48de:	481c      	ldr	r0, [pc, #112]	; (d4950 <_Z21composeDataReportNodev+0xd0>)
   d48e0:	f002 fdf9 	bl	d74d6 <_ZN15RHGenericDriver8lastRssiEv>
	buf[16] = msgCnt++;
   d48e4:	4b1b      	ldr	r3, [pc, #108]	; (d4954 <_Z21composeDataReportNodev+0xd4>)
	buf[15] = lowByte(driver.lastRssi()); 
   d48e6:	73e0      	strb	r0, [r4, #15]
	buf[16] = msgCnt++;
   d48e8:	781a      	ldrb	r2, [r3, #0]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message %d", buf[16]);
   d48ea:	4814      	ldr	r0, [pc, #80]	; (d493c <_Z21composeDataReportNodev+0xbc>)
	buf[16] = msgCnt++;
   d48ec:	7422      	strb	r2, [r4, #16]
   d48ee:	1951      	adds	r1, r2, r5
   d48f0:	7019      	strb	r1, [r3, #0]
	Log.info("sending message %d", buf[16]);
   d48f2:	4919      	ldr	r1, [pc, #100]	; (d4958 <_Z21composeDataReportNodev+0xd8>)
   d48f4:	f7ff fc36 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT) == RH_ROUTER_ERROR_NONE) {
   d48f8:	2303      	movs	r3, #3
   d48fa:	9300      	str	r3, [sp, #0]
   d48fc:	4621      	mov	r1, r4
   d48fe:	4817      	ldr	r0, [pc, #92]	; (d495c <_Z21composeDataReportNodev+0xdc>)
   d4900:	2300      	movs	r3, #0
   d4902:	2211      	movs	r2, #17
   d4904:	f003 f804 	bl	d7910 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d4908:	4604      	mov	r4, r0
   d490a:	b950      	cbnz	r0, d4922 <_Z21composeDataReportNodev+0xa2>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   d490c:	4914      	ldr	r1, [pc, #80]	; (d4960 <_Z21composeDataReportNodev+0xe0>)
   d490e:	480b      	ldr	r0, [pc, #44]	; (d493c <_Z21composeDataReportNodev+0xbc>)
   d4910:	f7ff fc28 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   d4914:	4630      	mov	r0, r6
   d4916:	4621      	mov	r1, r4
   d4918:	f007 fa9b 	bl	dbe52 <digitalWrite>
		return true;
   d491c:	4628      	mov	r0, r5
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   d491e:	b002      	add	sp, #8
   d4920:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   d4922:	4910      	ldr	r1, [pc, #64]	; (d4964 <_Z21composeDataReportNodev+0xe4>)
   d4924:	4805      	ldr	r0, [pc, #20]	; (d493c <_Z21composeDataReportNodev+0xbc>)
   d4926:	f7ff fc1d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   d492a:	4630      	mov	r0, r6
   d492c:	2100      	movs	r1, #0
   d492e:	f007 fa90 	bl	dbe52 <digitalWrite>
		return false;
   d4932:	2000      	movs	r0, #0
   d4934:	e7f3      	b.n	d491e <_Z21composeDataReportNodev+0x9e>
   d4936:	bf00      	nop
   d4938:	000dcf59 	.word	0x000dcf59
   d493c:	2003e570 	.word	0x2003e570
   d4940:	2003deeb 	.word	0x2003deeb
   d4944:	000dd05e 	.word	0x000dd05e
   d4948:	2003e2c0 	.word	0x2003e2c0
   d494c:	2003e2a0 	.word	0x2003e2a0
   d4950:	2003dfe4 	.word	0x2003dfe4
   d4954:	2003deea 	.word	0x2003deea
   d4958:	000dcf78 	.word	0x000dcf78
   d495c:	2003e118 	.word	0x2003e118
   d4960:	000dcf8b 	.word	0x000dcf8b
   d4964:	000dcfb4 	.word	0x000dcfb4

000d4968 <_Z34receiveAcknowledmentDataReportNodev>:

bool receiveAcknowledmentDataReportNode() {
   d4968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag)) {
   d496c:	4f2c      	ldr	r7, [pc, #176]	; (d4a20 <_Z34receiveAcknowledmentDataReportNodev+0xb8>)
   d496e:	4d2d      	ldr	r5, [pc, #180]	; (d4a24 <_Z34receiveAcknowledmentDataReportNodev+0xbc>)
   d4970:	f8df a0d4 	ldr.w	sl, [pc, #212]	; d4a48 <_Z34receiveAcknowledmentDataReportNodev+0xe0>
   d4974:	f8df 90d4 	ldr.w	r9, [pc, #212]	; d4a4c <_Z34receiveAcknowledmentDataReportNodev+0xe4>
   d4978:	482b      	ldr	r0, [pc, #172]	; (d4a28 <_Z34receiveAcknowledmentDataReportNodev+0xc0>)
bool receiveAcknowledmentDataReportNode() {
   d497a:	b08c      	sub	sp, #48	; 0x30
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag)) {
   d497c:	2400      	movs	r4, #0
   d497e:	e9cd 4a02 	strd	r4, sl, [sp, #8]
   d4982:	9404      	str	r4, [sp, #16]
   d4984:	9401      	str	r4, [sp, #4]
   d4986:	f8cd 9000 	str.w	r9, [sp]
   d498a:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d498e:	463a      	mov	r2, r7
   d4990:	4629      	mov	r1, r5
   d4992:	f003 f8c3 	bl	d7b1c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d4996:	4606      	mov	r6, r0
   d4998:	2800      	cmp	r0, #0
   d499a:	d03b      	beq.n	d4a14 <_Z34receiveAcknowledmentDataReportNodev+0xac>
		buf[len] = 0;
   d499c:	783b      	ldrb	r3, [r7, #0]
		lora_state = (LoRA_State)messageFlag;
   d499e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d4a50 <_Z34receiveAcknowledmentDataReportNodev+0xe8>
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d49a2:	f899 2000 	ldrb.w	r2, [r9]
		buf[len] = 0;
   d49a6:	54ec      	strb	r4, [r5, r3]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d49a8:	4820      	ldr	r0, [pc, #128]	; (d4a2c <_Z34receiveAcknowledmentDataReportNodev+0xc4>)
		lora_state = (LoRA_State)messageFlag;
   d49aa:	f89a 3000 	ldrb.w	r3, [sl]
   d49ae:	f888 3000 	strb.w	r3, [r8]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d49b2:	9207      	str	r2, [sp, #28]
   d49b4:	f002 fd8f 	bl	d74d6 <_ZN15RHGenericDriver8lastRssiEv>
   d49b8:	7839      	ldrb	r1, [r7, #0]
   d49ba:	9101      	str	r1, [sp, #4]
   d49bc:	4603      	mov	r3, r0
   d49be:	491c      	ldr	r1, [pc, #112]	; (d4a30 <_Z34receiveAcknowledmentDataReportNodev+0xc8>)
   d49c0:	f898 0000 	ldrb.w	r0, [r8]
   d49c4:	9a07      	ldr	r2, [sp, #28]
		sysStatus.frequencyMinutes = ((buf[7] << 8) | buf[8]);
   d49c6:	4f1b      	ldr	r7, [pc, #108]	; (d4a34 <_Z34receiveAcknowledmentDataReportNodev+0xcc>)
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d49c8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   d49cc:	9100      	str	r1, [sp, #0]
   d49ce:	481a      	ldr	r0, [pc, #104]	; (d4a38 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d49d0:	491a      	ldr	r1, [pc, #104]	; (d4a3c <_Z34receiveAcknowledmentDataReportNodev+0xd4>)
   d49d2:	f7ff fbc7 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.frequencyMinutes = ((buf[7] << 8) | buf[8]);
   d49d6:	79ea      	ldrb	r2, [r5, #7]
   d49d8:	7a2b      	ldrb	r3, [r5, #8]
   d49da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d49de:	f8d5 2003 	ldr.w	r2, [r5, #3]
   d49e2:	837b      	strh	r3, [r7, #26]
		uint32_t newTime = ((buf[3] << 24) | (buf[4] << 16) | (buf[5] << 8) | buf[6]);
   d49e4:	ba12      	rev	r2, r2
		Time.setTime(newTime);  // Set time based on response from gateway
   d49e6:	4610      	mov	r0, r2
   d49e8:	4621      	mov	r1, r4
   d49ea:	9207      	str	r2, [sp, #28]
   d49ec:	f006 fef1 	bl	db7d2 <_ZN9TimeClass7setTimeEx>
		Log.info("Time set to %s and next report is in %u minutes", Time.timeStr(newTime).c_str(),sysStatus.frequencyMinutes);
   d49f0:	9a07      	ldr	r2, [sp, #28]
   d49f2:	4623      	mov	r3, r4
   d49f4:	a808      	add	r0, sp, #32
   d49f6:	f006 feff 	bl	db7f8 <_ZN9TimeClass7timeStrEx>
   d49fa:	480f      	ldr	r0, [pc, #60]	; (d4a38 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d49fc:	8b7b      	ldrh	r3, [r7, #26]
   d49fe:	9a08      	ldr	r2, [sp, #32]
   d4a00:	490f      	ldr	r1, [pc, #60]	; (d4a40 <_Z34receiveAcknowledmentDataReportNodev+0xd8>)
   d4a02:	f7ff fbaf 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4a06:	a808      	add	r0, sp, #32
   d4a08:	f006 fd3c 	bl	db484 <_ZN6StringD1Ev>
	}
	else {
		Log.info("No reply, are the gateways running?");
		return false;
	}
   d4a0c:	4630      	mov	r0, r6
   d4a0e:	b00c      	add	sp, #48	; 0x30
   d4a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Log.info("No reply, are the gateways running?");
   d4a14:	490b      	ldr	r1, [pc, #44]	; (d4a44 <_Z34receiveAcknowledmentDataReportNodev+0xdc>)
   d4a16:	4808      	ldr	r0, [pc, #32]	; (d4a38 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d4a18:	f7ff fba4 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		return false;
   d4a1c:	e7f6      	b.n	d4a0c <_Z34receiveAcknowledmentDataReportNodev+0xa4>
   d4a1e:	bf00      	nop
   d4a20:	2003dc24 	.word	0x2003dc24
   d4a24:	2003deeb 	.word	0x2003deeb
   d4a28:	2003e118 	.word	0x2003e118
   d4a2c:	2003dfe4 	.word	0x2003dfe4
   d4a30:	2003dc25 	.word	0x2003dc25
   d4a34:	2003e2c0 	.word	0x2003e2c0
   d4a38:	2003e570 	.word	0x2003e570
   d4a3c:	000dcf1a 	.word	0x000dcf1a
   d4a40:	000dcfd7 	.word	0x000dcfd7
   d4a44:	000dd007 	.word	0x000dd007
   d4a48:	2003e250 	.word	0x2003e250
   d4a4c:	2003e114 	.word	0x2003e114
   d4a50:	2003e115 	.word	0x2003e115

000d4a54 <_GLOBAL__sub_I_loraStateNames>:
   d4a54:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d4a56:	4a08      	ldr	r2, [pc, #32]	; (d4a78 <_GLOBAL__sub_I_loraStateNames+0x24>)
   d4a58:	4c08      	ldr	r4, [pc, #32]	; (d4a7c <_GLOBAL__sub_I_loraStateNames+0x28>)
   d4a5a:	4909      	ldr	r1, [pc, #36]	; (d4a80 <_GLOBAL__sub_I_loraStateNames+0x2c>)
   d4a5c:	7812      	ldrb	r2, [r2, #0]
   d4a5e:	7809      	ldrb	r1, [r1, #0]
   d4a60:	4b08      	ldr	r3, [pc, #32]	; (d4a84 <_GLOBAL__sub_I_loraStateNames+0x30>)
   d4a62:	4620      	mov	r0, r4
   d4a64:	f003 fc54 	bl	d8310 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, NODE1_ADDRESS);
   d4a68:	4621      	mov	r1, r4
   d4a6a:	4807      	ldr	r0, [pc, #28]	; (d4a88 <_GLOBAL__sub_I_loraStateNames+0x34>)
   d4a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, NODE1_ADDRESS);
   d4a70:	220a      	movs	r2, #10
   d4a72:	f002 bf43 	b.w	d78fc <_ZN6RHMeshC1ER15RHGenericDriverh>
   d4a76:	bf00      	nop
   d4a78:	000dd064 	.word	0x000dd064
   d4a7c:	2003dfe4 	.word	0x2003dfe4
   d4a80:	000dd062 	.word	0x000dd062
   d4a84:	2003e308 	.word	0x2003e308
   d4a88:	2003e118 	.word	0x2003e118

000d4a8c <_Z18initializePinModesv>:
const pin_t TMP36_SENSE_PIN   = A4;
const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   d4a8c:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   d4a8e:	4909      	ldr	r1, [pc, #36]	; (d4ab4 <_Z18initializePinModesv+0x28>)
   d4a90:	4809      	ldr	r0, [pc, #36]	; (d4ab8 <_Z18initializePinModesv+0x2c>)
   d4a92:	f7ff fb67 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   d4a96:	2102      	movs	r1, #2
   d4a98:	2004      	movs	r0, #4
   d4a9a:	f007 f9c9 	bl	dbe30 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   d4a9e:	2100      	movs	r1, #0
   d4aa0:	2008      	movs	r0, #8
   d4aa2:	f007 f9c5 	bl	dbe30 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   d4aa6:	2101      	movs	r1, #1
   d4aa8:	2007      	movs	r0, #7
   d4aaa:	f007 f9c1 	bl	dbe30 <pinMode>
    return true;
}
   d4aae:	2001      	movs	r0, #1
   d4ab0:	bd08      	pop	{r3, pc}
   d4ab2:	bf00      	nop
   d4ab4:	000dd02b 	.word	0x000dd02b
   d4ab8:	2003e570 	.word	0x2003e570

000d4abc <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   d4abc:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   d4abe:	4918      	ldr	r1, [pc, #96]	; (d4b20 <_Z18initializePowerCfgv+0x64>)
   d4ac0:	4818      	ldr	r0, [pc, #96]	; (d4b24 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   d4ac2:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4ac4:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   d4ac6:	f7ff fb4d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4aca:	4622      	mov	r2, r4
   d4acc:	2100      	movs	r1, #0
   d4ace:	4668      	mov	r0, sp
   d4ad0:	f007 ff30 	bl	dc934 <memset>
   d4ad4:	4622      	mov	r2, r4
   d4ad6:	2100      	movs	r1, #0
   d4ad8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4adc:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4ae0:	f007 ff28 	bl	dc934 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   d4ae4:	2100      	movs	r1, #0
   d4ae6:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4aea:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4aee:	f004 f93b 	bl	d8d68 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4af2:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4af6:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4afa:	4b0b      	ldr	r3, [pc, #44]	; (d4b28 <_Z18initializePowerCfgv+0x6c>)
   d4afc:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4afe:	f241 0370 	movw	r3, #4208	; 0x1070
   d4b02:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4b06:	9b00      	ldr	r3, [sp, #0]
   d4b08:	2100      	movs	r1, #0
   d4b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4b0e:	4668      	mov	r0, sp
   d4b10:	9300      	str	r3, [sp, #0]
   d4b12:	f004 f929 	bl	d8d68 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   d4b16:	3800      	subs	r0, #0
   d4b18:	bf18      	it	ne
   d4b1a:	2001      	movne	r0, #1
   d4b1c:	b010      	add	sp, #64	; 0x40
   d4b1e:	bd10      	pop	{r4, pc}
   d4b20:	000dd044 	.word	0x000dd044
   d4b24:	2003e570 	.word	0x2003e570
   d4b28:	03840384 	.word	0x03840384

000d4b2c <_ZN5spark10LogHandler5writeEPKcj>:
}
   d4b2c:	4770      	bx	lr

000d4b2e <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   d4b2e:	6a00      	ldr	r0, [r0, #32]
   d4b30:	6803      	ldr	r3, [r0, #0]
   d4b32:	68db      	ldr	r3, [r3, #12]
   d4b34:	4718      	bx	r3
	...

000d4b38 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4b38:	4b0a      	ldr	r3, [pc, #40]	; (d4b64 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4b3a:	b510      	push	{r4, lr}
   d4b3c:	4604      	mov	r4, r0
   d4b3e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4b40:	f005 fba2 	bl	da288 <_ZN5spark10LogManager8instanceEv>
   d4b44:	4621      	mov	r1, r4
   d4b46:	f005 fd64 	bl	da612 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4b4a:	f007 f859 	bl	dbc00 <_Z16_fetch_usbserialv>
   d4b4e:	f007 f84b 	bl	dbbe8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4b52:	4620      	mov	r0, r4
   d4b54:	4b04      	ldr	r3, [pc, #16]	; (d4b68 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4b56:	f840 3b04 	str.w	r3, [r0], #4
   d4b5a:	f005 fc47 	bl	da3ec <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4b5e:	4620      	mov	r0, r4
   d4b60:	bd10      	pop	{r4, pc}
   d4b62:	bf00      	nop
   d4b64:	000dd0dc 	.word	0x000dd0dc
   d4b68:	000dd0c4 	.word	0x000dd0c4

000d4b6c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4b6c:	b510      	push	{r4, lr}
   d4b6e:	4604      	mov	r4, r0
    }
   d4b70:	f7ff ffe2 	bl	d4b38 <_ZN5spark16SerialLogHandlerD1Ev>
   d4b74:	4620      	mov	r0, r4
   d4b76:	2124      	movs	r1, #36	; 0x24
   d4b78:	f007 fa28 	bl	dbfcc <_ZdlPvj>
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	bd10      	pop	{r4, pc}

000d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4b80:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d4b82:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4b84:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4b86:	b17c      	cbz	r4, d4ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4b88:	6863      	ldr	r3, [r4, #4]
   d4b8a:	3b01      	subs	r3, #1
   d4b8c:	6063      	str	r3, [r4, #4]
   d4b8e:	b95b      	cbnz	r3, d4ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4b90:	6823      	ldr	r3, [r4, #0]
   d4b92:	4620      	mov	r0, r4
   d4b94:	689b      	ldr	r3, [r3, #8]
   d4b96:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b98:	68a3      	ldr	r3, [r4, #8]
   d4b9a:	3b01      	subs	r3, #1
   d4b9c:	60a3      	str	r3, [r4, #8]
   d4b9e:	b91b      	cbnz	r3, d4ba8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4ba0:	6823      	ldr	r3, [r4, #0]
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	68db      	ldr	r3, [r3, #12]
   d4ba6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4ba8:	4628      	mov	r0, r5
   d4baa:	bd38      	pop	{r3, r4, r5, pc}

000d4bac <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4bac:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4bae:	4922      	ldr	r1, [pc, #136]	; (d4c38 <_Z15setLowPowerMode6String+0x8c>)
   d4bb0:	b095      	sub	sp, #84	; 0x54
   d4bb2:	4604      	mov	r4, r0
   d4bb4:	f006 fd19 	bl	db5ea <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4bb8:	b138      	cbz	r0, d4bca <_Z15setLowPowerMode6String+0x1e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4bba:	4620      	mov	r0, r4
   d4bbc:	491e      	ldr	r1, [pc, #120]	; (d4c38 <_Z15setLowPowerMode6String+0x8c>)
   d4bbe:	4c1f      	ldr	r4, [pc, #124]	; (d4c3c <_Z15setLowPowerMode6String+0x90>)
   d4bc0:	f006 fd13 	bl	db5ea <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   d4bc4:	b948      	cbnz	r0, d4bda <_Z15setLowPowerMode6String+0x2e>
      sysStatus.frequencyMinutes = 12;
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.lowPowerMode = false;
   d4bc6:	7220      	strb	r0, [r4, #8]
   d4bc8:	e033      	b.n	d4c32 <_Z15setLowPowerMode6String+0x86>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4bca:	491d      	ldr	r1, [pc, #116]	; (d4c40 <_Z15setLowPowerMode6String+0x94>)
   d4bcc:	4620      	mov	r0, r4
   d4bce:	f006 fd0c 	bl	db5ea <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4bd2:	2800      	cmp	r0, #0
   d4bd4:	d1f1      	bne.n	d4bba <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   d4bd6:	b015      	add	sp, #84	; 0x54
   d4bd8:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4bda:	8b63      	ldrh	r3, [r4, #26]
    sysStatus.lowPowerMode = true;
   d4bdc:	2501      	movs	r5, #1
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4bde:	2b0b      	cmp	r3, #11
    sysStatus.lowPowerMode = true;
   d4be0:	7225      	strb	r5, [r4, #8]
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4be2:	d91b      	bls.n	d4c1c <_Z15setLowPowerMode6String+0x70>
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d4be4:	4b17      	ldr	r3, [pc, #92]	; (d4c44 <_Z15setLowPowerMode6String+0x98>)
   d4be6:	4a18      	ldr	r2, [pc, #96]	; (d4c48 <_Z15setLowPowerMode6String+0x9c>)
   d4be8:	2140      	movs	r1, #64	; 0x40
   d4bea:	a804      	add	r0, sp, #16
   d4bec:	f004 f988 	bl	d8f00 <snprintf>
  Log.info(data);
   d4bf0:	4816      	ldr	r0, [pc, #88]	; (d4c4c <_Z15setLowPowerMode6String+0xa0>)
   d4bf2:	a904      	add	r1, sp, #16
   d4bf4:	f7ff fab6 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bf8:	f004 f8d2 	bl	d8da0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4bfc:	b160      	cbz	r0, d4c18 <_Z15setLowPowerMode6String+0x6c>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4bfe:	4b14      	ldr	r3, [pc, #80]	; (d4c50 <_Z15setLowPowerMode6String+0xa4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4c00:	4914      	ldr	r1, [pc, #80]	; (d4c54 <_Z15setLowPowerMode6String+0xa8>)
   d4c02:	781b      	ldrb	r3, [r3, #0]
   d4c04:	f88d 3000 	strb.w	r3, [sp]
   d4c08:	a802      	add	r0, sp, #8
   d4c0a:	233c      	movs	r3, #60	; 0x3c
   d4c0c:	aa04      	add	r2, sp, #16
   d4c0e:	f004 fc5d 	bl	d94cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c12:	a803      	add	r0, sp, #12
   d4c14:	f7ff ffb4 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4c18:	2001      	movs	r0, #1
   d4c1a:	e7dc      	b.n	d4bd6 <_Z15setLowPowerMode6String+0x2a>
      Log.info("Increasing reporting frequency to 12 minutes");
   d4c1c:	490e      	ldr	r1, [pc, #56]	; (d4c58 <_Z15setLowPowerMode6String+0xac>)
   d4c1e:	480b      	ldr	r0, [pc, #44]	; (d4c4c <_Z15setLowPowerMode6String+0xa0>)
   d4c20:	f7ff faa0 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.frequencyMinutes = 12;
   d4c24:	230c      	movs	r3, #12
   d4c26:	8363      	strh	r3, [r4, #26]
      frequencyUpdated = true;
   d4c28:	4b0c      	ldr	r3, [pc, #48]	; (d4c5c <_Z15setLowPowerMode6String+0xb0>)
   d4c2a:	701d      	strb	r5, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d4c2c:	7a23      	ldrb	r3, [r4, #8]
   d4c2e:	2b00      	cmp	r3, #0
   d4c30:	d1d8      	bne.n	d4be4 <_Z15setLowPowerMode6String+0x38>
   d4c32:	4b0b      	ldr	r3, [pc, #44]	; (d4c60 <_Z15setLowPowerMode6String+0xb4>)
   d4c34:	e7d7      	b.n	d4be6 <_Z15setLowPowerMode6String+0x3a>
   d4c36:	bf00      	nop
   d4c38:	000dd234 	.word	0x000dd234
   d4c3c:	2003e2c0 	.word	0x2003e2c0
   d4c40:	000dd4f0 	.word	0x000dd4f0
   d4c44:	000dd068 	.word	0x000dd068
   d4c48:	000dd09c 	.word	0x000dd09c
   d4c4c:	2003e570 	.word	0x2003e570
   d4c50:	2003e260 	.word	0x2003e260
   d4c54:	000dd0b6 	.word	0x000dd0b6
   d4c58:	000dd06f 	.word	0x000dd06f
   d4c5c:	2003e261 	.word	0x2003e261
   d4c60:	000dd06c 	.word	0x000dd06c

000d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4c64:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4c66:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4c6a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4c6c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4c6e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4c72:	42ae      	cmp	r6, r5
   d4c74:	d004      	beq.n	d4c80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4c76:	4628      	mov	r0, r5
   d4c78:	f006 fc04 	bl	db484 <_ZN6StringD1Ev>
   d4c7c:	3514      	adds	r5, #20
   d4c7e:	e7f8      	b.n	d4c72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4c80:	6820      	ldr	r0, [r4, #0]
   d4c82:	f004 f91d 	bl	d8ec0 <free>
    AllocatorT::free(data_);
}
   d4c86:	4620      	mov	r0, r4
   d4c88:	bd70      	pop	{r4, r5, r6, pc}

000d4c8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4c8a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c8e:	4604      	mov	r4, r0
   d4c90:	460d      	mov	r5, r1
   d4c92:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4c94:	d916      	bls.n	d4cc4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4c96:	4290      	cmp	r0, r2
   d4c98:	d215      	bcs.n	d4cc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4c9a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4c9e:	1a75      	subs	r5, r6, r1
   d4ca0:	f1a1 0714 	sub.w	r7, r1, #20
   d4ca4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4ca6:	42b7      	cmp	r7, r6
   d4ca8:	d01c      	beq.n	d4ce4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4caa:	b12c      	cbz	r4, d4cb8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4cac:	4631      	mov	r1, r6
   d4cae:	4620      	mov	r0, r4
   d4cb0:	f006 fc64 	bl	db57c <_ZN6StringC1EOS_>
   d4cb4:	7c33      	ldrb	r3, [r6, #16]
   d4cb6:	7423      	strb	r3, [r4, #16]
   d4cb8:	4630      	mov	r0, r6
   d4cba:	f006 fbe3 	bl	db484 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4cbe:	3e14      	subs	r6, #20
   d4cc0:	3c14      	subs	r4, #20
   d4cc2:	e7f0      	b.n	d4ca6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4cc4:	d00e      	beq.n	d4ce4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4cc6:	42b5      	cmp	r5, r6
   d4cc8:	d00c      	beq.n	d4ce4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4cca:	b12c      	cbz	r4, d4cd8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4ccc:	4629      	mov	r1, r5
   d4cce:	4620      	mov	r0, r4
   d4cd0:	f006 fc54 	bl	db57c <_ZN6StringC1EOS_>
   d4cd4:	7c2b      	ldrb	r3, [r5, #16]
   d4cd6:	7423      	strb	r3, [r4, #16]
   d4cd8:	4628      	mov	r0, r5
   d4cda:	f006 fbd3 	bl	db484 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4cde:	3514      	adds	r5, #20
   d4ce0:	3414      	adds	r4, #20
   d4ce2:	e7f0      	b.n	d4cc6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ce6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4cea:	2300      	movs	r3, #0
   d4cec:	e9c0 3300 	strd	r3, r3, [r0]
   d4cf0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4cf2:	684f      	ldr	r7, [r1, #4]
   d4cf4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4cf6:	4604      	mov	r4, r0
   d4cf8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4cfa:	dd23      	ble.n	d4d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4cfc:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4d00:	fb08 f007 	mul.w	r0, r8, r7
   d4d04:	f004 f8d4 	bl	d8eb0 <malloc>
            if (!d) {
   d4d08:	4605      	mov	r5, r0
   d4d0a:	b1d8      	cbz	r0, d4d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4d0c:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4d10:	fb08 1202 	mla	r2, r8, r2, r1
   d4d14:	f7ff ffb9 	bl	d4c8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4d18:	6820      	ldr	r0, [r4, #0]
   d4d1a:	f004 f8d1 	bl	d8ec0 <free>
        data_ = d;
   d4d1e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4d20:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4d22:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4d26:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4d2a:	45b8      	cmp	r8, r7
   d4d2c:	d008      	beq.n	d4d40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4d2e:	4639      	mov	r1, r7
   d4d30:	4628      	mov	r0, r5
   d4d32:	f006 fc3d 	bl	db5b0 <_ZN6StringC1ERKS_>
   d4d36:	7c3b      	ldrb	r3, [r7, #16]
   d4d38:	742b      	strb	r3, [r5, #16]
   d4d3a:	3714      	adds	r7, #20
   d4d3c:	3514      	adds	r5, #20
   d4d3e:	e7f4      	b.n	d4d2a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4d40:	6873      	ldr	r3, [r6, #4]
   d4d42:	6063      	str	r3, [r4, #4]
}
   d4d44:	4620      	mov	r0, r4
   d4d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4d4c <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   d4d4c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d4d4e:	4b28      	ldr	r3, [pc, #160]	; (d4df0 <_GLOBAL__sub_I_SystemMode+0xa4>)
    SleepResult() {}
   d4d50:	4a28      	ldr	r2, [pc, #160]	; (d4df4 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d4d52:	2501      	movs	r5, #1
   d4d54:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d4d56:	4b28      	ldr	r3, [pc, #160]	; (d4df8 <_GLOBAL__sub_I_SystemMode+0xac>)
   d4d58:	2400      	movs	r4, #0
   d4d5a:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   d4d5c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4d5e:	601c      	str	r4, [r3, #0]
   d4d60:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d4d62:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d4d64:	2002      	movs	r0, #2
   d4d66:	f003 ffab 	bl	d8cc0 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d4d6a:	4621      	mov	r1, r4
   d4d6c:	4628      	mov	r0, r5
   d4d6e:	f003 ffbf 	bl	d8cf0 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4d72:	4629      	mov	r1, r5
   d4d74:	2004      	movs	r0, #4
   d4d76:	f003 fd99 	bl	d88ac <HAL_Feature_Set>
        capacity_(0) {
   d4d7a:	e9cd 4400 	strd	r4, r4, [sp]
   d4d7e:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4d80:	f006 ff3e 	bl	dbc00 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4d84:	4c1d      	ldr	r4, [pc, #116]	; (d4dfc <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4d86:	4605      	mov	r5, r0
   d4d88:	4669      	mov	r1, sp
   d4d8a:	a803      	add	r0, sp, #12
   d4d8c:	f7ff ffab 	bl	d4ce6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4d90:	4626      	mov	r6, r4
        stream_(&stream) {
   d4d92:	a903      	add	r1, sp, #12
   d4d94:	a806      	add	r0, sp, #24
   d4d96:	f7ff ffa6 	bl	d4ce6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4d9a:	4b19      	ldr	r3, [pc, #100]	; (d4e00 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d4d9c:	f846 3b04 	str.w	r3, [r6], #4
   d4da0:	a906      	add	r1, sp, #24
   d4da2:	a809      	add	r0, sp, #36	; 0x24
   d4da4:	f7ff ff9f 	bl	d4ce6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4da8:	aa09      	add	r2, sp, #36	; 0x24
   d4daa:	211e      	movs	r1, #30
   d4dac:	4630      	mov	r0, r6
   d4dae:	f005 fd8a 	bl	da8c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4db2:	a809      	add	r0, sp, #36	; 0x24
   d4db4:	f7ff ff56 	bl	d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4db8:	a806      	add	r0, sp, #24
   d4dba:	f7ff ff53 	bl	d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4dbe:	4b11      	ldr	r3, [pc, #68]	; (d4e04 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d4dc0:	6023      	str	r3, [r4, #0]
   d4dc2:	6225      	str	r5, [r4, #32]
   d4dc4:	a803      	add	r0, sp, #12
   d4dc6:	f7ff ff4d 	bl	d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4dca:	4b0f      	ldr	r3, [pc, #60]	; (d4e08 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d4dcc:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4dce:	f006 ff17 	bl	dbc00 <_Z16_fetch_usbserialv>
   d4dd2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4dd6:	f006 ff03 	bl	dbbe0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4dda:	f005 fa55 	bl	da288 <_ZN5spark10LogManager8instanceEv>
   d4dde:	4621      	mov	r1, r4
   d4de0:	f005 fd03 	bl	da7ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   d4de4:	4668      	mov	r0, sp
   d4de6:	f7ff ff3d 	bl	d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4dea:	b00c      	add	sp, #48	; 0x30
   d4dec:	bd70      	pop	{r4, r5, r6, pc}
   d4dee:	bf00      	nop
   d4df0:	2003e260 	.word	0x2003e260
   d4df4:	ffff0000 	.word	0xffff0000
   d4df8:	2003e254 	.word	0x2003e254
   d4dfc:	2003e264 	.word	0x2003e264
   d4e00:	000dd0c4 	.word	0x000dd0c4
   d4e04:	000dd9e4 	.word	0x000dd9e4
   d4e08:	000dd0dc 	.word	0x000dd0dc

000d4e0c <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   d4e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e0e:	f003 ffc7 	bl	d8da0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4e12:	b1d8      	cbz	r0, d4e4c <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4e14:	4b17      	ldr	r3, [pc, #92]	; (d4e74 <_Z18loadSystemDefaultsv+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e16:	4a18      	ldr	r2, [pc, #96]	; (d4e78 <_Z18loadSystemDefaultsv+0x6c>)
   d4e18:	781b      	ldrb	r3, [r3, #0]
   d4e1a:	f88d 3000 	strb.w	r3, [sp]
   d4e1e:	4917      	ldr	r1, [pc, #92]	; (d4e7c <_Z18loadSystemDefaultsv+0x70>)
   d4e20:	233c      	movs	r3, #60	; 0x3c
   d4e22:	a802      	add	r0, sp, #8
   d4e24:	f004 fb52 	bl	d94cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d4e28:	9c03      	ldr	r4, [sp, #12]
   d4e2a:	b17c      	cbz	r4, d4e4c <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   d4e2c:	6863      	ldr	r3, [r4, #4]
   d4e2e:	3b01      	subs	r3, #1
   d4e30:	6063      	str	r3, [r4, #4]
   d4e32:	b95b      	cbnz	r3, d4e4c <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   d4e34:	6823      	ldr	r3, [r4, #0]
   d4e36:	4620      	mov	r0, r4
   d4e38:	689b      	ldr	r3, [r3, #8]
   d4e3a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e3c:	68a3      	ldr	r3, [r4, #8]
   d4e3e:	3b01      	subs	r3, #1
   d4e40:	60a3      	str	r3, [r4, #8]
   d4e42:	b91b      	cbnz	r3, d4e4c <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   d4e44:	6823      	ldr	r3, [r4, #0]
   d4e46:	4620      	mov	r0, r4
   d4e48:	68db      	ldr	r3, [r3, #12]
   d4e4a:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   d4e4c:	490c      	ldr	r1, [pc, #48]	; (d4e80 <_Z18loadSystemDefaultsv+0x74>)
   d4e4e:	480d      	ldr	r0, [pc, #52]	; (d4e84 <_Z18loadSystemDefaultsv+0x78>)
   d4e50:	f7ff f988 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d4e54:	4b0c      	ldr	r3, [pc, #48]	; (d4e88 <_Z18loadSystemDefaultsv+0x7c>)
   d4e56:	4a0d      	ldr	r2, [pc, #52]	; (d4e8c <_Z18loadSystemDefaultsv+0x80>)
   d4e58:	605a      	str	r2, [r3, #4]
  sysStatus.firmwareRelease = 1;
  sysStatus.verboseMode = false;
  sysStatus.solarPowerMode = true;
  sysStatus.lowPowerMode = true;
   d4e5a:	2201      	movs	r2, #1
   d4e5c:	721a      	strb	r2, [r3, #8]
  sysStatus.resetCount = 0;
  sysStatus.lastHookResponse = 0;
  sysStatus.frequencyMinutes = 60;
   d4e5e:	213c      	movs	r1, #60	; 0x3c
  sysStatus.resetCount = 0;
   d4e60:	2200      	movs	r2, #0
  sysStatus.lastHookResponse = 0;
   d4e62:	e9c3 2203 	strd	r2, r2, [r3, #12]
  sysStatus.frequencyMinutes = 60;
   d4e66:	8359      	strh	r1, [r3, #26]
  sysStatus.lastAlertCode = 0;
   d4e68:	771a      	strb	r2, [r3, #28]
  sysStatus.lastAlertTime = 0;
   d4e6a:	621a      	str	r2, [r3, #32]
  sysStatus.verizonSIM = false;
   d4e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d4e70:	b004      	add	sp, #16
   d4e72:	bd10      	pop	{r4, pc}
   d4e74:	2003e288 	.word	0x2003e288
   d4e78:	000dd0ec 	.word	0x000dd0ec
   d4e7c:	000dd0b6 	.word	0x000dd0b6
   d4e80:	000dd104 	.word	0x000dd104
   d4e84:	2003e570 	.word	0x2003e570
   d4e88:	2003e2c0 	.word	0x2003e2c0
   d4e8c:	01000101 	.word	0x01000101

000d4e90 <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d4e90:	4b01      	ldr	r3, [pc, #4]	; (d4e98 <_GLOBAL__sub_I_sysStatus+0x8>)
   d4e92:	2201      	movs	r2, #1
   d4e94:	701a      	strb	r2, [r3, #0]
   d4e96:	4770      	bx	lr
   d4e98:	2003e288 	.word	0x2003e288

000d4e9c <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d4e9c:	b570      	push	{r4, r5, r6, lr}
  if (Time.now() - lastCheckTime) {          // Check once a second
   d4e9e:	4c31      	ldr	r4, [pc, #196]	; (d4f64 <_Z17storageObjectLoopv+0xc8>)
   d4ea0:	f006 fdad 	bl	db9fe <_ZN9TimeClass3nowEv>
   d4ea4:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4ea8:	17c1      	asrs	r1, r0, #31
   d4eaa:	4299      	cmp	r1, r3
   d4eac:	bf08      	it	eq
   d4eae:	4290      	cmpeq	r0, r2
   d4eb0:	d056      	beq.n	d4f60 <_Z17storageObjectLoopv+0xc4>
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d4eb2:	f006 fda4 	bl	db9fe <_ZN9TimeClass3nowEv>
                      std::hash<uint32_t>{}(sysStatus.lastHookResponse) + \
   d4eb6:	4d2c      	ldr	r5, [pc, #176]	; (d4f68 <_Z17storageObjectLoopv+0xcc>)
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d4eb8:	4e2c      	ldr	r6, [pc, #176]	; (d4f6c <_Z17storageObjectLoopv+0xd0>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d4eba:	17c1      	asrs	r1, r0, #31
   d4ebc:	e9c4 0100 	strd	r0, r1, [r4]
                      std::hash<byte>{}(sysStatus.lastAlertCode)+ \
   d4ec0:	e9d5 3404 	ldrd	r3, r4, [r5, #16]
   d4ec4:	441c      	add	r4, r3
   d4ec6:	6a2b      	ldr	r3, [r5, #32]
   d4ec8:	441c      	add	r4, r3

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4eca:	882b      	ldrh	r3, [r5, #0]
   d4ecc:	441c      	add	r4, r3
   d4ece:	886b      	ldrh	r3, [r5, #2]
   d4ed0:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4ed2:	792b      	ldrb	r3, [r5, #4]
   d4ed4:	441c      	add	r4, r3
   d4ed6:	796b      	ldrb	r3, [r5, #5]
   d4ed8:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d4eda:	79ab      	ldrb	r3, [r5, #6]
   d4edc:	441c      	add	r4, r3
   d4ede:	79eb      	ldrb	r3, [r5, #7]
   d4ee0:	441c      	add	r4, r3
   d4ee2:	7a2b      	ldrb	r3, [r5, #8]
   d4ee4:	441c      	add	r4, r3
   d4ee6:	68eb      	ldr	r3, [r5, #12]
   d4ee8:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4eea:	8b2b      	ldrh	r3, [r5, #24]
   d4eec:	441c      	add	r4, r3
   d4eee:	8b6b      	ldrh	r3, [r5, #26]
   d4ef0:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4ef2:	7f2b      	ldrb	r3, [r5, #28]
   d4ef4:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d4ef6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
                      std::hash<bool>{}(sysStatus.verizonSIM);
   d4efa:	441c      	add	r4, r3
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d4efc:	6833      	ldr	r3, [r6, #0]
   d4efe:	429c      	cmp	r4, r3
   d4f00:	d02c      	beq.n	d4f5c <_Z17storageObjectLoopv+0xc0>
      Log.info("sysStaus object stored and hash updated");
   d4f02:	491b      	ldr	r1, [pc, #108]	; (d4f70 <_Z17storageObjectLoopv+0xd4>)
   d4f04:	481b      	ldr	r0, [pc, #108]	; (d4f74 <_Z17storageObjectLoopv+0xd8>)
   d4f06:	f7ff f92d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f0a:	481b      	ldr	r0, [pc, #108]	; (d4f78 <_Z17storageObjectLoopv+0xdc>)
   d4f0c:	2328      	movs	r3, #40	; 0x28
   d4f0e:	462a      	mov	r2, r5
   d4f10:	2101      	movs	r1, #1
   d4f12:	f002 f9a2 	bl	d725a <_ZN6MB85RC9writeDataEjPKhj>
      lastSysStatusHash = sysStatusHash;
   d4f16:	6034      	str	r4, [r6, #0]
      returnValue = true;                           // In case I want to test whether values changed
   d4f18:	2001      	movs	r0, #1
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d4f1a:	4d18      	ldr	r5, [pc, #96]	; (d4f7c <_Z17storageObjectLoopv+0xe0>)
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d4f1c:	4e18      	ldr	r6, [pc, #96]	; (d4f80 <_Z17storageObjectLoopv+0xe4>)
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d4f1e:	686b      	ldr	r3, [r5, #4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4f20:	782c      	ldrb	r4, [r5, #0]
   d4f22:	441c      	add	r4, r3
   d4f24:	7a2b      	ldrb	r3, [r5, #8]
                      std::hash<int>{}(current.stateOfCharge)+ \
   d4f26:	441c      	add	r4, r3
                      std::hash<byte>{}(current.batteryState) + \
   d4f28:	692b      	ldr	r3, [r5, #16]
   d4f2a:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4f2c:	8b2b      	ldrh	r3, [r5, #24]
                      std::hash<time_t>{}(current.lastSampleTime) + \
   d4f2e:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4f30:	7eab      	ldrb	r3, [r5, #26]
                      std::hash<uint16_t>{}(current.rssi) + \
   d4f32:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4f34:	8bab      	ldrh	r3, [r5, #28]
                      std::hash<uint8_t>{}(current.messageNumber) + \
   d4f36:	441c      	add	r4, r3
   d4f38:	8beb      	ldrh	r3, [r5, #30]
                      std::hash<uint16_t>{}(current.daily);
   d4f3a:	441c      	add	r4, r3
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d4f3c:	6833      	ldr	r3, [r6, #0]
   d4f3e:	429c      	cmp	r4, r3
   d4f40:	d00b      	beq.n	d4f5a <_Z17storageObjectLoopv+0xbe>
      Log.info("current object stored and hash updated");
   d4f42:	4910      	ldr	r1, [pc, #64]	; (d4f84 <_Z17storageObjectLoopv+0xe8>)
   d4f44:	480b      	ldr	r0, [pc, #44]	; (d4f74 <_Z17storageObjectLoopv+0xd8>)
   d4f46:	f7ff f90d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4f4a:	480b      	ldr	r0, [pc, #44]	; (d4f78 <_Z17storageObjectLoopv+0xdc>)
   d4f4c:	2320      	movs	r3, #32
   d4f4e:	462a      	mov	r2, r5
   d4f50:	2150      	movs	r1, #80	; 0x50
   d4f52:	f002 f982 	bl	d725a <_ZN6MB85RC9writeDataEjPKhj>
      lastCurrentHash = currentHash;
   d4f56:	6034      	str	r4, [r6, #0]
      returnValue = true;
   d4f58:	2001      	movs	r0, #1
}
   d4f5a:	bd70      	pop	{r4, r5, r6, pc}
  bool returnValue = false;
   d4f5c:	2000      	movs	r0, #0
   d4f5e:	e7dc      	b.n	d4f1a <_Z17storageObjectLoopv+0x7e>
   d4f60:	2000      	movs	r0, #0
   d4f62:	e7fa      	b.n	d4f5a <_Z17storageObjectLoopv+0xbe>
   d4f64:	2003e290 	.word	0x2003e290
   d4f68:	2003e2c0 	.word	0x2003e2c0
   d4f6c:	2003e29c 	.word	0x2003e29c
   d4f70:	000dd11c 	.word	0x000dd11c
   d4f74:	2003e570 	.word	0x2003e570
   d4f78:	2003ddac 	.word	0x2003ddac
   d4f7c:	2003e2a0 	.word	0x2003e2a0
   d4f80:	2003e298 	.word	0x2003e298
   d4f84:	000dd144 	.word	0x000dd144

000d4f88 <_Z18storageObjectStartv>:
bool storageObjectStart() {
   d4f88:	b513      	push	{r0, r1, r4, lr}
  Log.info("Initializing the Object Store");
   d4f8a:	4921      	ldr	r1, [pc, #132]	; (d5010 <_Z18storageObjectStartv+0x88>)
   d4f8c:	4821      	ldr	r0, [pc, #132]	; (d5014 <_Z18storageObjectStartv+0x8c>)
   d4f8e:	f7ff f8e9 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
  fram.begin();                                     // Initialize the FRAM module
   d4f92:	4821      	ldr	r0, [pc, #132]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4f94:	f002 f8d4 	bl	d7140 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4f98:	481f      	ldr	r0, [pc, #124]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4f9a:	2301      	movs	r3, #1
   d4f9c:	f10d 0207 	add.w	r2, sp, #7
   d4fa0:	2100      	movs	r1, #0
   d4fa2:	f002 f90f 	bl	d71c4 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d4fa6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4faa:	2c01      	cmp	r4, #1
   d4fac:	d01c      	beq.n	d4fe8 <_Z18storageObjectStartv+0x60>
    Log.info("FRAM mismatch, erasing and locafing defaults if it checks out");
   d4fae:	491b      	ldr	r1, [pc, #108]	; (d501c <_Z18storageObjectStartv+0x94>)
   d4fb0:	4818      	ldr	r0, [pc, #96]	; (d5014 <_Z18storageObjectStartv+0x8c>)
   d4fb2:	f7ff f8d7 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                   // Reset the FRAM to correct the issue
   d4fb6:	4818      	ldr	r0, [pc, #96]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4fb8:	f002 f8cc 	bl	d7154 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4fbc:	4a18      	ldr	r2, [pc, #96]	; (d5020 <_Z18storageObjectStartv+0x98>)
   d4fbe:	4816      	ldr	r0, [pc, #88]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4fc0:	2304      	movs	r3, #4
   d4fc2:	2100      	movs	r1, #0
   d4fc4:	f002 f949 	bl	d725a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4fc8:	4813      	ldr	r0, [pc, #76]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4fca:	2301      	movs	r3, #1
   d4fcc:	f10d 0207 	add.w	r2, sp, #7
   d4fd0:	2100      	movs	r1, #0
   d4fd2:	f002 f8f7 	bl	d71c4 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d4fd6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4fda:	2c01      	cmp	r4, #1
   d4fdc:	d115      	bne.n	d500a <_Z18storageObjectStartv+0x82>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   d4fde:	f7ff ff15 	bl	d4e0c <_Z18loadSystemDefaultsv>
   d4fe2:	4620      	mov	r0, r4
}
   d4fe4:	b002      	add	sp, #8
   d4fe6:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   d4fe8:	490e      	ldr	r1, [pc, #56]	; (d5024 <_Z18storageObjectStartv+0x9c>)
   d4fea:	480a      	ldr	r0, [pc, #40]	; (d5014 <_Z18storageObjectStartv+0x8c>)
   d4fec:	f7ff f8ba 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4ff0:	4621      	mov	r1, r4
   d4ff2:	4a0d      	ldr	r2, [pc, #52]	; (d5028 <_Z18storageObjectStartv+0xa0>)
   d4ff4:	4808      	ldr	r0, [pc, #32]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4ff6:	2328      	movs	r3, #40	; 0x28
   d4ff8:	f002 f8e4 	bl	d71c4 <_ZN6MB85RC8readDataEjPhj>
   d4ffc:	4a0b      	ldr	r2, [pc, #44]	; (d502c <_Z18storageObjectStartv+0xa4>)
   d4ffe:	4806      	ldr	r0, [pc, #24]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d5000:	2320      	movs	r3, #32
   d5002:	2150      	movs	r1, #80	; 0x50
   d5004:	f002 f8de 	bl	d71c4 <_ZN6MB85RC8readDataEjPhj>
   d5008:	e7eb      	b.n	d4fe2 <_Z18storageObjectStartv+0x5a>
      return false;
   d500a:	2000      	movs	r0, #0
   d500c:	e7ea      	b.n	d4fe4 <_Z18storageObjectStartv+0x5c>
   d500e:	bf00      	nop
   d5010:	000dd16b 	.word	0x000dd16b
   d5014:	2003e570 	.word	0x2003e570
   d5018:	2003ddac 	.word	0x2003ddac
   d501c:	000dd189 	.word	0x000dd189
   d5020:	000dd1ec 	.word	0x000dd1ec
   d5024:	000dd1c7 	.word	0x000dd1c7
   d5028:	2003e2c0 	.word	0x2003e2c0
   d502c:	2003e2a0 	.word	0x2003e2a0

000d5030 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d5030:	ee07 0a90 	vmov	s15, r0
   d5034:	ed9f 7a09 	vldr	s14, [pc, #36]	; d505c <_Z17tmp36TemperatureCi+0x2c>
   d5038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d503c:	ee67 7a87 	vmul.f32	s15, s15, s14
   d5040:	ed9f 7a07 	vldr	s14, [pc, #28]	; d5060 <_Z17tmp36TemperatureCi+0x30>
   d5044:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   d5048:	eddf 7a06 	vldr	s15, [pc, #24]	; d5064 <_Z17tmp36TemperatureCi+0x34>
   d504c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   d5050:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   d5054:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d5058:	4770      	bx	lr
   d505a:	bf00      	nop
   d505c:	454e4000 	.word	0x454e4000
   d5060:	457ff000 	.word	0x457ff000
   d5064:	43fa0000 	.word	0x43fa0000

000d5068 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   d5068:	b510      	push	{r4, lr}
   d506a:	b086      	sub	sp, #24
    const diag_source* src = nullptr;
   d506c:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d506e:	a902      	add	r1, sp, #8
   d5070:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d5072:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d5074:	f003 fe12 	bl	d8c9c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d5078:	b9b8      	cbnz	r0, d50aa <_Z12batteryStatev+0x42>
    return get(src, val);
   d507a:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d507c:	b10c      	cbz	r4, d5082 <_Z12batteryStatev+0x1a>
   d507e:	6923      	ldr	r3, [r4, #16]
   d5080:	b923      	cbnz	r3, d508c <_Z12batteryStatev+0x24>
   d5082:	4a19      	ldr	r2, [pc, #100]	; (d50e8 <_Z12batteryStatev+0x80>)
   d5084:	2100      	movs	r1, #0
   d5086:	200a      	movs	r0, #10
   d5088:	f003 fde0 	bl	d8c4c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d508c:	2300      	movs	r3, #0
   d508e:	f8ad 300e 	strh.w	r3, [sp, #14]
   d5092:	230c      	movs	r3, #12
   d5094:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5098:	ab01      	add	r3, sp, #4
   d509a:	9304      	str	r3, [sp, #16]
   d509c:	2304      	movs	r3, #4
   d509e:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d50a0:	aa03      	add	r2, sp, #12
   d50a2:	6923      	ldr	r3, [r4, #16]
   d50a4:	2101      	movs	r1, #1
   d50a6:	4620      	mov	r0, r4
   d50a8:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d50aa:	4a10      	ldr	r2, [pc, #64]	; (d50ec <_Z12batteryStatev+0x84>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d50ac:	4c10      	ldr	r4, [pc, #64]	; (d50f0 <_Z12batteryStatev+0x88>)
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d50ae:	7a12      	ldrb	r2, [r2, #8]
        if (r < 0) {
   d50b0:	2800      	cmp	r0, #0
        return val;
   d50b2:	bfa8      	it	ge
   d50b4:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d50b6:	7220      	strb	r0, [r4, #8]
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d50b8:	b132      	cbz	r2, d50c8 <_Z12batteryStatev+0x60>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d50ba:	480e      	ldr	r0, [pc, #56]	; (d50f4 <_Z12batteryStatev+0x8c>)
   d50bc:	f004 fc74 	bl	d99a8 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d50c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d50c4:	f003 ff64 	bl	d8f90 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d50c8:	480a      	ldr	r0, [pc, #40]	; (d50f4 <_Z12batteryStatev+0x8c>)
   d50ca:	f004 fc0d 	bl	d98e8 <_ZN9FuelGauge6getSoCEv>
   d50ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d50d2:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   d50d6:	283c      	cmp	r0, #60	; 0x3c
   d50d8:	bfd4      	ite	le
   d50da:	2000      	movle	r0, #0
   d50dc:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d50de:	edc4 7a01 	vstr	s15, [r4, #4]
}
   d50e2:	b006      	add	sp, #24
   d50e4:	bd10      	pop	{r4, pc}
   d50e6:	bf00      	nop
   d50e8:	000d88cd 	.word	0x000d88cd
   d50ec:	2003e2c0 	.word	0x2003e2c0
   d50f0:	2003e2a0 	.word	0x2003e2a0
   d50f4:	2003e2e8 	.word	0x2003e2e8

000d50f8 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   d50f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d50fa:	4d0c      	ldr	r5, [pc, #48]	; (d512c <_Z16isItSafeToChargev+0x34>)
  PMIC pmic(true);
   d50fc:	2101      	movs	r1, #1
   d50fe:	a801      	add	r0, sp, #4
   d5100:	f005 ffb3 	bl	db06a <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5104:	782b      	ldrb	r3, [r5, #0]
   d5106:	2b25      	cmp	r3, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5108:	a801      	add	r0, sp, #4
   d510a:	f04f 0401 	mov.w	r4, #1
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d510e:	d909      	bls.n	d5124 <_Z16isItSafeToChargev+0x2c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5110:	f006 f83e 	bl	db190 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d5114:	722c      	strb	r4, [r5, #8]
    return false;
   d5116:	2400      	movs	r4, #0
  PMIC pmic(true);
   d5118:	a801      	add	r0, sp, #4
   d511a:	f005 ffb5 	bl	db088 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   d511e:	4620      	mov	r0, r4
   d5120:	b003      	add	sp, #12
   d5122:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   d5124:	f006 f81d 	bl	db162 <_ZN4PMIC14enableChargingEv>
    return true;
   d5128:	e7f6      	b.n	d5118 <_Z16isItSafeToChargev+0x20>
   d512a:	bf00      	nop
   d512c:	2003e2a0 	.word	0x2003e2a0

000d5130 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   d5130:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5132:	4d19      	ldr	r5, [pc, #100]	; (d5198 <_Z17getSignalStrengthv+0x68>)
   d5134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d5136:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5138:	ac04      	add	r4, sp, #16
   d513a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d513c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d513e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5140:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5144:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d5148:	4914      	ldr	r1, [pc, #80]	; (d519c <_Z17getSignalStrengthv+0x6c>)
   d514a:	a80e      	add	r0, sp, #56	; 0x38
   d514c:	f003 ff7a 	bl	d9044 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d5150:	a80e      	add	r0, sp, #56	; 0x38
   d5152:	f003 ffca 	bl	d90ea <_ZNK14CellularSignal19getAccessTechnologyEv>
   d5156:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d5158:	a80e      	add	r0, sp, #56	; 0x38
   d515a:	f003 ffe1 	bl	d9120 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d515e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d5160:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d5164:	f004 f80c 	bl	d9180 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5168:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d516a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d516e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d5172:	f007 f89f 	bl	dc2b4 <__aeabi_f2d>
   d5176:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d517a:	4628      	mov	r0, r5
   d517c:	f007 f89a 	bl	dc2b4 <__aeabi_f2d>
   d5180:	e9cd 0100 	strd	r0, r1, [sp]
   d5184:	4a06      	ldr	r2, [pc, #24]	; (d51a0 <_Z17getSignalStrengthv+0x70>)
   d5186:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d518a:	4806      	ldr	r0, [pc, #24]	; (d51a4 <_Z17getSignalStrengthv+0x74>)
   d518c:	2140      	movs	r1, #64	; 0x40
   d518e:	f003 feb7 	bl	d8f00 <snprintf>
   d5192:	b019      	add	sp, #100	; 0x64
   d5194:	bd30      	pop	{r4, r5, pc}
   d5196:	bf00      	nop
   d5198:	000dd2a4 	.word	0x000dd2a4
   d519c:	2003e52c 	.word	0x2003e52c
   d51a0:	000dd269 	.word	0x000dd269
   d51a4:	2003dca5 	.word	0x2003dca5

000d51a8 <_Z16takeMeasurementsv>:
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d51a8:	4b10      	ldr	r3, [pc, #64]	; (d51ec <_Z16takeMeasurementsv+0x44>)
bool takeMeasurements() { 
   d51aa:	b510      	push	{r4, lr}
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d51ac:	8818      	ldrh	r0, [r3, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d51ae:	4c10      	ldr	r4, [pc, #64]	; (d51f0 <_Z16takeMeasurementsv+0x48>)
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d51b0:	f006 fe7b 	bl	dbeaa <analogRead>
   d51b4:	f7ff ff3c 	bl	d5030 <_Z17tmp36TemperatureCi>
   d51b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d51bc:	4a0d      	ldr	r2, [pc, #52]	; (d51f4 <_Z16takeMeasurementsv+0x4c>)
   d51be:	ee17 3a90 	vmov	r3, s15
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d51c2:	2110      	movs	r1, #16
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d51c4:	7013      	strb	r3, [r2, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d51c6:	4620      	mov	r0, r4
   d51c8:	b2db      	uxtb	r3, r3
   d51ca:	4a0b      	ldr	r2, [pc, #44]	; (d51f8 <_Z16takeMeasurementsv+0x50>)
   d51cc:	f003 fe98 	bl	d8f00 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   d51d0:	490a      	ldr	r1, [pc, #40]	; (d51fc <_Z16takeMeasurementsv+0x54>)
   d51d2:	480b      	ldr	r0, [pc, #44]	; (d5200 <_Z16takeMeasurementsv+0x58>)
   d51d4:	4622      	mov	r2, r4
   d51d6:	f7fe ffc5 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   d51da:	f7ff ff45 	bl	d5068 <_Z12batteryStatev>
    isItSafeToCharge();
   d51de:	f7ff ff8b 	bl	d50f8 <_Z16isItSafeToChargev>
    getSignalStrength();
   d51e2:	f7ff ffa5 	bl	d5130 <_Z17getSignalStrengthv>
}
   d51e6:	2001      	movs	r0, #1
   d51e8:	bd10      	pop	{r4, pc}
   d51ea:	bf00      	nop
   d51ec:	000dd066 	.word	0x000dd066
   d51f0:	2003dc95 	.word	0x2003dc95
   d51f4:	2003e2a0 	.word	0x2003e2a0
   d51f8:	000dd282 	.word	0x000dd282
   d51fc:	000dd287 	.word	0x000dd287
   d5200:	2003e570 	.word	0x2003e570

000d5204 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   d5204:	4801      	ldr	r0, [pc, #4]	; (d520c <_GLOBAL__sub_I_batteryContext+0x8>)
   d5206:	2100      	movs	r1, #0
   d5208:	f004 bb20 	b.w	d984c <_ZN9FuelGaugeC1Eb>
   d520c:	2003e2e8 	.word	0x2003e2e8

000d5210 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5210:	4770      	bx	lr

000d5212 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5212:	b510      	push	{r4, lr}
}
   d5214:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d5216:	4604      	mov	r4, r0
}
   d5218:	f006 fed8 	bl	dbfcc <_ZdlPvj>
   d521c:	4620      	mov	r0, r4
   d521e:	bd10      	pop	{r4, pc}

000d5220 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5220:	b40e      	push	{r1, r2, r3}
   d5222:	b510      	push	{r4, lr}
   d5224:	b08d      	sub	sp, #52	; 0x34
   d5226:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d5228:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d522a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d522e:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5230:	2300      	movs	r3, #0
   d5232:	2020      	movs	r0, #32
   d5234:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5238:	e9cd 4200 	strd	r4, r2, [sp]
   d523c:	2001      	movs	r0, #1
   d523e:	aa04      	add	r2, sp, #16
   d5240:	f003 fd14 	bl	d8c6c <log_message_v>
}
   d5244:	b00d      	add	sp, #52	; 0x34
   d5246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d524a:	b003      	add	sp, #12
   d524c:	4770      	bx	lr

000d524e <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d524e:	b40e      	push	{r1, r2, r3}
   d5250:	b510      	push	{r4, lr}
   d5252:	b08d      	sub	sp, #52	; 0x34
   d5254:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d5256:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d5258:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d525c:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d525e:	2300      	movs	r3, #0
   d5260:	2020      	movs	r0, #32
   d5262:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5266:	e9cd 4200 	strd	r4, r2, [sp]
   d526a:	2032      	movs	r0, #50	; 0x32
   d526c:	aa04      	add	r2, sp, #16
   d526e:	f003 fcfd 	bl	d8c6c <log_message_v>
}
   d5272:	b00d      	add	sp, #52	; 0x34
   d5274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5278:	b003      	add	sp, #12
   d527a:	4770      	bx	lr

000d527c <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d527c:	b510      	push	{r4, lr}
   d527e:	7202      	strb	r2, [r0, #8]
   d5280:	22ff      	movs	r2, #255	; 0xff
   d5282:	8142      	strh	r2, [r0, #10]
   d5284:	2200      	movs	r2, #0
   d5286:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d528a:	6142      	str	r2, [r0, #20]
   d528c:	7602      	strb	r2, [r0, #24]
   d528e:	61c2      	str	r2, [r0, #28]
    instance = this;
   d5290:	4a02      	ldr	r2, [pc, #8]	; (d529c <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5292:	4c03      	ldr	r4, [pc, #12]	; (d52a0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d5294:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5296:	e9c0 4100 	strd	r4, r1, [r0]
}
   d529a:	bd10      	pop	{r4, pc}
   d529c:	2003e2f4 	.word	0x2003e2f4
   d52a0:	000dd4d0 	.word	0x000dd4d0

000d52a4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d52a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d52a8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d52ac:	4604      	mov	r4, r0
   d52ae:	4689      	mov	r9, r1
   d52b0:	4616      	mov	r6, r2
   d52b2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d52b4:	f1b8 0f00 	cmp.w	r8, #0
   d52b8:	d002      	beq.n	d52c0 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d52ba:	6840      	ldr	r0, [r0, #4]
   d52bc:	f004 fc0e 	bl	d9adc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d52c0:	7a21      	ldrb	r1, [r4, #8]
   d52c2:	6860      	ldr	r0, [r4, #4]
   d52c4:	f004 fbe7 	bl	d9a96 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d52c8:	6860      	ldr	r0, [r4, #4]
   d52ca:	6803      	ldr	r3, [r0, #0]
   d52cc:	4649      	mov	r1, r9
   d52ce:	689b      	ldr	r3, [r3, #8]
   d52d0:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d52d2:	6860      	ldr	r0, [r4, #4]
   d52d4:	2100      	movs	r1, #0
   d52d6:	f004 fbfd 	bl	d9ad4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d52da:	4605      	mov	r5, r0
   d52dc:	bb00      	cbnz	r0, d5320 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d52de:	2301      	movs	r3, #1
   d52e0:	7a21      	ldrb	r1, [r4, #8]
   d52e2:	6860      	ldr	r0, [r4, #4]
   d52e4:	463a      	mov	r2, r7
   d52e6:	f004 fbc4 	bl	d9a72 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d52ea:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d52ec:	4603      	mov	r3, r0
        if (count == num) {
   d52ee:	d109      	bne.n	d5304 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d52f0:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d52f2:	42be      	cmp	r6, r7
   d52f4:	d01c      	beq.n	d5330 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d52f6:	6860      	ldr	r0, [r4, #4]
   d52f8:	6803      	ldr	r3, [r0, #0]
   d52fa:	695b      	ldr	r3, [r3, #20]
   d52fc:	4798      	blx	r3
   d52fe:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d5302:	e7f6      	b.n	d52f2 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d5304:	490b      	ldr	r1, [pc, #44]	; (d5334 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d5306:	480c      	ldr	r0, [pc, #48]	; (d5338 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5308:	464a      	mov	r2, r9
   d530a:	f7ff ffa0 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d530e:	f1b8 0f00 	cmp.w	r8, #0
   d5312:	d002      	beq.n	d531a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d5314:	6860      	ldr	r0, [r4, #4]
   d5316:	f004 fbea 	bl	d9aee <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d531a:	4628      	mov	r0, r5
   d531c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d5320:	4603      	mov	r3, r0
   d5322:	4906      	ldr	r1, [pc, #24]	; (d533c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d5324:	4804      	ldr	r0, [pc, #16]	; (d5338 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5326:	464a      	mov	r2, r9
   d5328:	f7ff ff91 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d532c:	2500      	movs	r5, #0
   d532e:	e7ee      	b.n	d530e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d5330:	2501      	movs	r5, #1
   d5332:	e7ec      	b.n	d530e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d5334:	000dd2cc 	.word	0x000dd2cc
   d5338:	2003e2f0 	.word	0x2003e2f0
   d533c:	000dd2f1 	.word	0x000dd2f1

000d5340 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d5340:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d5342:	9300      	str	r3, [sp, #0]
   d5344:	2301      	movs	r3, #1
   d5346:	f7ff ffad 	bl	d52a4 <_ZN6AB180513readRegistersEhPhjb>
}
   d534a:	b003      	add	sp, #12
   d534c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5350 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d5350:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d5352:	8943      	ldrh	r3, [r0, #10]
   d5354:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d5356:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d5358:	d010      	beq.n	d537c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d535a:	4e19      	ldr	r6, [pc, #100]	; (d53c0 <_ZN6AB180510detectChipEv+0x70>)
   d535c:	4d19      	ldr	r5, [pc, #100]	; (d53c4 <_ZN6AB180510detectChipEv+0x74>)
   d535e:	f003 fabd 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d5362:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d5366:	d209      	bcs.n	d537c <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d5368:	8960      	ldrh	r0, [r4, #10]
   d536a:	f006 fd8b 	bl	dbe84 <digitalRead>
   d536e:	2801      	cmp	r0, #1
   d5370:	d004      	beq.n	d537c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5372:	4631      	mov	r1, r6
   d5374:	4628      	mov	r0, r5
   d5376:	f7fe fef5 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d537a:	e7f0      	b.n	d535e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d537c:	2301      	movs	r3, #1
   d537e:	f10d 0207 	add.w	r2, sp, #7
   d5382:	2128      	movs	r1, #40	; 0x28
   d5384:	4620      	mov	r0, r4
   d5386:	f7ff ffdb 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d538a:	b930      	cbnz	r0, d539a <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d538c:	480d      	ldr	r0, [pc, #52]	; (d53c4 <_ZN6AB180510detectChipEv+0x74>)
   d538e:	490e      	ldr	r1, [pc, #56]	; (d53c8 <_ZN6AB180510detectChipEv+0x78>)
   d5390:	f7fe fee8 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5394:	2000      	movs	r0, #0
}
   d5396:	b002      	add	sp, #8
   d5398:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d539a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d539e:	2b18      	cmp	r3, #24
   d53a0:	d1f4      	bne.n	d538c <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d53a2:	2301      	movs	r3, #1
   d53a4:	f10d 0207 	add.w	r2, sp, #7
   d53a8:	2129      	movs	r1, #41	; 0x29
   d53aa:	4620      	mov	r0, r4
   d53ac:	f7ff ffc8 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d53b0:	2800      	cmp	r0, #0
   d53b2:	d0eb      	beq.n	d538c <_ZN6AB180510detectChipEv+0x3c>
   d53b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d53b8:	2b05      	cmp	r3, #5
   d53ba:	d1e7      	bne.n	d538c <_ZN6AB180510detectChipEv+0x3c>
   d53bc:	e7eb      	b.n	d5396 <_ZN6AB180510detectChipEv+0x46>
   d53be:	bf00      	nop
   d53c0:	000dd315 	.word	0x000dd315
   d53c4:	2003e2f0 	.word	0x2003e2f0
   d53c8:	000dd32a 	.word	0x000dd32a

000d53cc <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d53cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d53d0:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d53d4:	4604      	mov	r4, r0
   d53d6:	460f      	mov	r7, r1
   d53d8:	4615      	mov	r5, r2
   d53da:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d53dc:	f1b8 0f00 	cmp.w	r8, #0
   d53e0:	d002      	beq.n	d53e8 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d53e2:	6840      	ldr	r0, [r0, #4]
   d53e4:	f004 fb7a 	bl	d9adc <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d53e8:	7a21      	ldrb	r1, [r4, #8]
   d53ea:	6860      	ldr	r0, [r4, #4]
   d53ec:	f004 fb53 	bl	d9a96 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d53f0:	6860      	ldr	r0, [r4, #4]
   d53f2:	6803      	ldr	r3, [r0, #0]
   d53f4:	4639      	mov	r1, r7
   d53f6:	689b      	ldr	r3, [r3, #8]
   d53f8:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d53fa:	442e      	add	r6, r5
   d53fc:	42b5      	cmp	r5, r6
   d53fe:	6860      	ldr	r0, [r4, #4]
   d5400:	d005      	beq.n	d540e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d5402:	6803      	ldr	r3, [r0, #0]
   d5404:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5408:	689b      	ldr	r3, [r3, #8]
   d540a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d540c:	e7f6      	b.n	d53fc <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d540e:	2101      	movs	r1, #1
   d5410:	f004 fb60 	bl	d9ad4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5414:	4603      	mov	r3, r0
   d5416:	b170      	cbz	r0, d5436 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d5418:	4908      	ldr	r1, [pc, #32]	; (d543c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d541a:	4809      	ldr	r0, [pc, #36]	; (d5440 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d541c:	463a      	mov	r2, r7
   d541e:	f7ff ff16 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5422:	2500      	movs	r5, #0
    }

    if (lock) {
   d5424:	f1b8 0f00 	cmp.w	r8, #0
   d5428:	d002      	beq.n	d5430 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d542a:	6860      	ldr	r0, [r4, #4]
   d542c:	f004 fb5f 	bl	d9aee <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d5430:	4628      	mov	r0, r5
   d5432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d5436:	2501      	movs	r5, #1
   d5438:	e7f4      	b.n	d5424 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d543a:	bf00      	nop
   d543c:	000dd337 	.word	0x000dd337
   d5440:	2003e2f0 	.word	0x2003e2f0

000d5444 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d5444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5446:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d544a:	9300      	str	r3, [sp, #0]
   d544c:	f10d 020f 	add.w	r2, sp, #15
   d5450:	2301      	movs	r3, #1
   d5452:	f7ff ffbb 	bl	d53cc <_ZN6AB180514writeRegistersEhPKhjb>
}
   d5456:	b005      	add	sp, #20
   d5458:	f85d fb04 	ldr.w	pc, [sp], #4

000d545c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d545e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d5460:	460c      	mov	r4, r1
   d5462:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d5464:	491a      	ldr	r1, [pc, #104]	; (d54d0 <_ZN6AB18056setWDTEi+0x74>)
   d5466:	481b      	ldr	r0, [pc, #108]	; (d54d4 <_ZN6AB18056setWDTEi+0x78>)
   d5468:	f7fe fe7c 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d546c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d546e:	bfb8      	it	lt
   d5470:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d5472:	b97c      	cbnz	r4, d5494 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5474:	2301      	movs	r3, #1
   d5476:	4622      	mov	r2, r4
   d5478:	211b      	movs	r1, #27
   d547a:	4628      	mov	r0, r5
   d547c:	f7ff ffe2 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5480:	4915      	ldr	r1, [pc, #84]	; (d54d8 <_ZN6AB18056setWDTEi+0x7c>)
   d5482:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5484:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5486:	4813      	ldr	r0, [pc, #76]	; (d54d4 <_ZN6AB18056setWDTEi+0x78>)
   d5488:	f7ff feca 	bl	d5220 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d548c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d548e:	616c      	str	r4, [r5, #20]
}
   d5490:	4630      	mov	r0, r6
   d5492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5494:	2c03      	cmp	r4, #3
   d5496:	dd19      	ble.n	d54cc <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5498:	10a7      	asrs	r7, r4, #2
   d549a:	2f1f      	cmp	r7, #31
   d549c:	bfa8      	it	ge
   d549e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d54a0:	00ba      	lsls	r2, r7, #2
   d54a2:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d54a6:	2301      	movs	r3, #1
   d54a8:	b2d2      	uxtb	r2, r2
   d54aa:	211b      	movs	r1, #27
   d54ac:	4628      	mov	r0, r5
   d54ae:	f7ff ffc9 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d54b2:	463a      	mov	r2, r7
   d54b4:	4603      	mov	r3, r0
   d54b6:	4909      	ldr	r1, [pc, #36]	; (d54dc <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d54b8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d54ba:	4806      	ldr	r0, [pc, #24]	; (d54d4 <_ZN6AB18056setWDTEi+0x78>)
   d54bc:	f7ff feb0 	bl	d5220 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d54c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d54c4:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d54c6:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d54c8:	616f      	str	r7, [r5, #20]
   d54ca:	e7e1      	b.n	d5490 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d54cc:	2701      	movs	r7, #1
   d54ce:	e7e7      	b.n	d54a0 <_ZN6AB18056setWDTEi+0x44>
   d54d0:	000dd35c 	.word	0x000dd35c
   d54d4:	2003e2f0 	.word	0x2003e2f0
   d54d8:	000dd366 	.word	0x000dd366
   d54dc:	000dd382 	.word	0x000dd382

000d54e0 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d54e0:	460b      	mov	r3, r1
    if (instance) {
   d54e2:	4907      	ldr	r1, [pc, #28]	; (d5500 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d54e4:	4602      	mov	r2, r0
    if (instance) {
   d54e6:	6808      	ldr	r0, [r1, #0]
   d54e8:	b148      	cbz	r0, d54fe <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d54ea:	2b00      	cmp	r3, #0
   d54ec:	bf08      	it	eq
   d54ee:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d54f2:	d104      	bne.n	d54fe <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d54f4:	68c3      	ldr	r3, [r0, #12]
   d54f6:	b113      	cbz	r3, d54fe <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d54f8:	2100      	movs	r1, #0
   d54fa:	f7ff bfaf 	b.w	d545c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d54fe:	4770      	bx	lr
   d5500:	2003e2f4 	.word	0x2003e2f4

000d5504 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d5504:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5508:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d550c:	4605      	mov	r5, r0
   d550e:	4616      	mov	r6, r2
   d5510:	461f      	mov	r7, r3
    if (lock) {
   d5512:	f1b8 0f00 	cmp.w	r8, #0
   d5516:	d004      	beq.n	d5522 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5518:	6840      	ldr	r0, [r0, #4]
   d551a:	9101      	str	r1, [sp, #4]
   d551c:	f004 fade 	bl	d9adc <_ZN7TwoWire4lockEv>
   d5520:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d5522:	9101      	str	r1, [sp, #4]
   d5524:	2300      	movs	r3, #0
   d5526:	f10d 020f 	add.w	r2, sp, #15
   d552a:	4628      	mov	r0, r5
   d552c:	f7ff ff08 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d5530:	4604      	mov	r4, r0
   d5532:	b160      	cbz	r0, d554e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d5534:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5538:	ea03 0206 	and.w	r2, r3, r6
   d553c:	433a      	orrs	r2, r7
        if (newValue != value) {
   d553e:	4293      	cmp	r3, r2
   d5540:	d005      	beq.n	d554e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d5542:	9901      	ldr	r1, [sp, #4]
   d5544:	2300      	movs	r3, #0
   d5546:	4628      	mov	r0, r5
   d5548:	f7ff ff7c 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
   d554c:	4604      	mov	r4, r0
    if (lock) {
   d554e:	f1b8 0f00 	cmp.w	r8, #0
   d5552:	d002      	beq.n	d555a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d5554:	6868      	ldr	r0, [r5, #4]
   d5556:	f004 faca 	bl	d9aee <_ZN7TwoWire6unlockEv>
}
   d555a:	4620      	mov	r0, r4
   d555c:	b004      	add	sp, #16
   d555e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5564 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d5564:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5566:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d5568:	460a      	mov	r2, r1
   d556a:	483f      	ldr	r0, [pc, #252]	; (d5668 <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d556c:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d556e:	493f      	ldr	r1, [pc, #252]	; (d566c <_ZN6AB180511resetConfigEm+0x108>)
   d5570:	f7ff fe56 	bl	d5220 <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d5574:	6860      	ldr	r0, [r4, #4]
   d5576:	f004 fab1 	bl	d9adc <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d557a:	2300      	movs	r3, #0
   d557c:	461a      	mov	r2, r3
   d557e:	210f      	movs	r1, #15
   d5580:	4620      	mov	r0, r4
   d5582:	f7ff ff5f 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d5586:	2300      	movs	r3, #0
   d5588:	2213      	movs	r2, #19
   d558a:	2110      	movs	r1, #16
   d558c:	4620      	mov	r0, r4
   d558e:	f7ff ff59 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d5592:	2300      	movs	r3, #0
   d5594:	223c      	movs	r2, #60	; 0x3c
   d5596:	2111      	movs	r1, #17
   d5598:	4620      	mov	r0, r4
   d559a:	f7ff ff53 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d559e:	2300      	movs	r3, #0
   d55a0:	22e0      	movs	r2, #224	; 0xe0
   d55a2:	2112      	movs	r1, #18
   d55a4:	4620      	mov	r0, r4
   d55a6:	f7ff ff4d 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d55aa:	2300      	movs	r3, #0
   d55ac:	2226      	movs	r2, #38	; 0x26
   d55ae:	2113      	movs	r1, #19
   d55b0:	4620      	mov	r0, r4
   d55b2:	f7ff ff47 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d55b6:	2300      	movs	r3, #0
   d55b8:	461a      	mov	r2, r3
   d55ba:	2117      	movs	r1, #23
   d55bc:	4620      	mov	r0, r4
   d55be:	f7ff ff41 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d55c2:	f015 0301 	ands.w	r3, r5, #1
   d55c6:	d048      	beq.n	d565a <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d55c8:	2300      	movs	r3, #0
   d55ca:	9300      	str	r3, [sp, #0]
   d55cc:	22e3      	movs	r2, #227	; 0xe3
   d55ce:	2323      	movs	r3, #35	; 0x23
   d55d0:	2118      	movs	r1, #24
   d55d2:	4620      	mov	r0, r4
   d55d4:	f7ff ff96 	bl	d5504 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d55d8:	2300      	movs	r3, #0
   d55da:	461a      	mov	r2, r3
   d55dc:	2119      	movs	r1, #25
   d55de:	4620      	mov	r0, r4
   d55e0:	f7ff ff30 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d55e4:	2300      	movs	r3, #0
   d55e6:	461a      	mov	r2, r3
   d55e8:	211a      	movs	r1, #26
   d55ea:	4620      	mov	r0, r4
   d55ec:	f7ff ff2a 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d55f0:	2300      	movs	r3, #0
   d55f2:	461a      	mov	r2, r3
   d55f4:	211b      	movs	r1, #27
   d55f6:	4620      	mov	r0, r4
   d55f8:	f7ff ff24 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d55fc:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d5600:	f04f 0300 	mov.w	r3, #0
   d5604:	bf0c      	ite	eq
   d5606:	461a      	moveq	r2, r3
   d5608:	2288      	movne	r2, #136	; 0x88
   d560a:	211c      	movs	r1, #28
   d560c:	4620      	mov	r0, r4
   d560e:	f7ff ff19 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d5612:	2300      	movs	r3, #0
   d5614:	461a      	mov	r2, r3
   d5616:	2120      	movs	r1, #32
   d5618:	4620      	mov	r0, r4
   d561a:	f7ff ff13 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d561e:	2300      	movs	r3, #0
   d5620:	22f0      	movs	r2, #240	; 0xf0
   d5622:	2121      	movs	r1, #33	; 0x21
   d5624:	4620      	mov	r0, r4
   d5626:	f7ff ff0d 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d562a:	2300      	movs	r3, #0
   d562c:	461a      	mov	r2, r3
   d562e:	2126      	movs	r1, #38	; 0x26
   d5630:	4620      	mov	r0, r4
   d5632:	f7ff ff07 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d5636:	2300      	movs	r3, #0
   d5638:	2280      	movs	r2, #128	; 0x80
   d563a:	2127      	movs	r1, #39	; 0x27
   d563c:	4620      	mov	r0, r4
   d563e:	f7ff ff01 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d5642:	2300      	movs	r3, #0
   d5644:	461a      	mov	r2, r3
   d5646:	2130      	movs	r1, #48	; 0x30
   d5648:	4620      	mov	r0, r4
   d564a:	f7ff fefb 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d564e:	6860      	ldr	r0, [r4, #4]
   d5650:	f004 fa4d 	bl	d9aee <_ZN7TwoWire6unlockEv>
}
   d5654:	2001      	movs	r0, #1
   d5656:	b003      	add	sp, #12
   d5658:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d565a:	2223      	movs	r2, #35	; 0x23
   d565c:	2118      	movs	r1, #24
   d565e:	4620      	mov	r0, r4
   d5660:	f7ff fef0 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
   d5664:	e7b8      	b.n	d55d8 <_ZN6AB180511resetConfigEm+0x74>
   d5666:	bf00      	nop
   d5668:	2003e2f0 	.word	0x2003e2f0
   d566c:	000dd3a6 	.word	0x000dd3a6

000d5670 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5670:	b513      	push	{r0, r1, r4, lr}
   d5672:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5674:	f10d 0207 	add.w	r2, sp, #7
   d5678:	f7ff fe62 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d567c:	b128      	cbz	r0, d568a <_ZN6AB180510isBitClearEhhb+0x1a>
   d567e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5682:	421c      	tst	r4, r3
   d5684:	bf0c      	ite	eq
   d5686:	2001      	moveq	r0, #1
   d5688:	2000      	movne	r0, #0
}
   d568a:	b002      	add	sp, #8
   d568c:	bd10      	pop	{r4, pc}

000d568e <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d568e:	b513      	push	{r0, r1, r4, lr}
   d5690:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5692:	f10d 0207 	add.w	r2, sp, #7
   d5696:	f7ff fe53 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d569a:	b128      	cbz	r0, d56a8 <_ZN6AB18058isBitSetEhhb+0x1a>
   d569c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d56a0:	421c      	tst	r4, r3
   d56a2:	bf14      	ite	ne
   d56a4:	2001      	movne	r0, #1
   d56a6:	2000      	moveq	r0, #0
}
   d56a8:	b002      	add	sp, #8
   d56aa:	bd10      	pop	{r4, pc}

000d56ac <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d56ac:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d56ae:	43d2      	mvns	r2, r2
   d56b0:	9300      	str	r3, [sp, #0]
   d56b2:	b2d2      	uxtb	r2, r2
   d56b4:	2300      	movs	r3, #0
   d56b6:	f7ff ff25 	bl	d5504 <_ZN6AB180512maskRegisterEhhhb>
}
   d56ba:	b003      	add	sp, #12
   d56bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d56c0 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d56c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d56c2:	2301      	movs	r3, #1
   d56c4:	f10d 0207 	add.w	r2, sp, #7
   d56c8:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d56ca:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d56cc:	f7ff fe38 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d56d0:	4605      	mov	r5, r0
   d56d2:	b938      	cbnz	r0, d56e4 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d56d4:	491e      	ldr	r1, [pc, #120]	; (d5750 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d56d6:	481f      	ldr	r0, [pc, #124]	; (d5754 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d56d8:	22ad      	movs	r2, #173	; 0xad
   d56da:	f7ff fdb8 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
}
   d56de:	4628      	mov	r0, r5
   d56e0:	b003      	add	sp, #12
   d56e2:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d56e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d56e8:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d56ec:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d56f0:	d00b      	beq.n	d570a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d56f2:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d56f4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d56f6:	210f      	movs	r1, #15
   d56f8:	4620      	mov	r0, r4
   d56fa:	f7ff ffd7 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d56fe:	4a16      	ldr	r2, [pc, #88]	; (d5758 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d5700:	4916      	ldr	r1, [pc, #88]	; (d575c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d5702:	4814      	ldr	r0, [pc, #80]	; (d5754 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5704:	f7fe fd2e 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5708:	e7e9      	b.n	d56de <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d570a:	2208      	movs	r2, #8
   d570c:	2117      	movs	r1, #23
   d570e:	4620      	mov	r0, r4
   d5710:	f7ff ffbd 	bl	d568e <_ZN6AB18058isBitSetEhhb>
   d5714:	b118      	cbz	r0, d571e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5716:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5718:	4a11      	ldr	r2, [pc, #68]	; (d5760 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d571a:	61e3      	str	r3, [r4, #28]
   d571c:	e7f0      	b.n	d5700 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d571e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5722:	071a      	lsls	r2, r3, #28
   d5724:	d509      	bpl.n	d573a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5726:	2303      	movs	r3, #3
   d5728:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d572a:	2208      	movs	r2, #8
   d572c:	2301      	movs	r3, #1
   d572e:	210f      	movs	r1, #15
   d5730:	4620      	mov	r0, r4
   d5732:	f7ff ffbb 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d5736:	4a0b      	ldr	r2, [pc, #44]	; (d5764 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d5738:	e7e2      	b.n	d5700 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d573a:	075b      	lsls	r3, r3, #29
   d573c:	d5cf      	bpl.n	d56de <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d573e:	2204      	movs	r2, #4
   d5740:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d5742:	2301      	movs	r3, #1
   d5744:	210f      	movs	r1, #15
   d5746:	4620      	mov	r0, r4
   d5748:	f7ff ffb0 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d574c:	4a06      	ldr	r2, [pc, #24]	; (d5768 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d574e:	e7d7      	b.n	d5700 <_ZN6AB180516updateWakeReasonEv+0x40>
   d5750:	000dd3ea 	.word	0x000dd3ea
   d5754:	2003e2f0 	.word	0x2003e2f0
   d5758:	000dd3bb 	.word	0x000dd3bb
   d575c:	000dd409 	.word	0x000dd409
   d5760:	000dd3c4 	.word	0x000dd3c4
   d5764:	000dd3d4 	.word	0x000dd3d4
   d5768:	000dd3e4 	.word	0x000dd3e4

000d576c <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d576c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d576e:	9300      	str	r3, [sp, #0]
   d5770:	4613      	mov	r3, r2
   d5772:	22ff      	movs	r2, #255	; 0xff
   d5774:	f7ff fec6 	bl	d5504 <_ZN6AB180512maskRegisterEhhhb>
}
   d5778:	b003      	add	sp, #12
   d577a:	f85d fb04 	ldr.w	pc, [sp], #4

000d577e <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d577e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5782:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5786:	4605      	mov	r5, r0
   d5788:	460c      	mov	r4, r1
   d578a:	4691      	mov	r9, r2
   d578c:	461f      	mov	r7, r3
    if (lock) {
   d578e:	f1ba 0f00 	cmp.w	sl, #0
   d5792:	d002      	beq.n	d579a <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5794:	6840      	ldr	r0, [r0, #4]
   d5796:	f004 f9a1 	bl	d9adc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d579a:	b307      	cbz	r7, d57de <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d579c:	2f20      	cmp	r7, #32
   d579e:	463e      	mov	r6, r7
   d57a0:	bf28      	it	cs
   d57a2:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d57a4:	2c7f      	cmp	r4, #127	; 0x7f
   d57a6:	d826      	bhi.n	d57f6 <_ZN6AB18057readRamEjPhjb+0x78>
   d57a8:	1933      	adds	r3, r6, r4
   d57aa:	2b80      	cmp	r3, #128	; 0x80
   d57ac:	d901      	bls.n	d57b2 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d57ae:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d57b2:	2301      	movs	r3, #1
   d57b4:	2204      	movs	r2, #4
   d57b6:	213f      	movs	r1, #63	; 0x3f
   d57b8:	4628      	mov	r0, r5
   d57ba:	f7ff ff77 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d57be:	2300      	movs	r3, #0
   d57c0:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d57c4:	9300      	str	r3, [sp, #0]
   d57c6:	464a      	mov	r2, r9
   d57c8:	4633      	mov	r3, r6
   d57ca:	b2c9      	uxtb	r1, r1
   d57cc:	4628      	mov	r0, r5
   d57ce:	f7ff fd69 	bl	d52a4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d57d2:	4680      	mov	r8, r0
   d57d4:	b128      	cbz	r0, d57e2 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d57d6:	4434      	add	r4, r6
        dataLen -= count;
   d57d8:	1bbf      	subs	r7, r7, r6
        data += count;
   d57da:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d57dc:	e7dd      	b.n	d579a <_ZN6AB18057readRamEjPhjb+0x1c>
   d57de:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d57e2:	f1ba 0f00 	cmp.w	sl, #0
   d57e6:	d002      	beq.n	d57ee <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d57e8:	6868      	ldr	r0, [r5, #4]
   d57ea:	f004 f980 	bl	d9aee <_ZN7TwoWire6unlockEv>
}
   d57ee:	4640      	mov	r0, r8
   d57f0:	b002      	add	sp, #8
   d57f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d57f6:	2301      	movs	r3, #1
   d57f8:	2204      	movs	r2, #4
   d57fa:	213f      	movs	r1, #63	; 0x3f
   d57fc:	4628      	mov	r0, r5
   d57fe:	f7ff ffb5 	bl	d576c <_ZN6AB180514setRegisterBitEhhb>
   d5802:	e7dc      	b.n	d57be <_ZN6AB18057readRamEjPhjb+0x40>

000d5804 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d5804:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5808:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d580c:	4605      	mov	r5, r0
   d580e:	460c      	mov	r4, r1
   d5810:	4691      	mov	r9, r2
   d5812:	461f      	mov	r7, r3
    if (lock) {
   d5814:	f1ba 0f00 	cmp.w	sl, #0
   d5818:	d002      	beq.n	d5820 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d581a:	6840      	ldr	r0, [r0, #4]
   d581c:	f004 f95e 	bl	d9adc <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5820:	b307      	cbz	r7, d5864 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d5822:	2f1f      	cmp	r7, #31
   d5824:	463e      	mov	r6, r7
   d5826:	bf28      	it	cs
   d5828:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d582a:	2c7f      	cmp	r4, #127	; 0x7f
   d582c:	d826      	bhi.n	d587c <_ZN6AB18058writeRamEjPKhjb+0x78>
   d582e:	1933      	adds	r3, r6, r4
   d5830:	2b80      	cmp	r3, #128	; 0x80
   d5832:	d901      	bls.n	d5838 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d5834:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5838:	2301      	movs	r3, #1
   d583a:	2204      	movs	r2, #4
   d583c:	213f      	movs	r1, #63	; 0x3f
   d583e:	4628      	mov	r0, r5
   d5840:	f7ff ff34 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5844:	2300      	movs	r3, #0
   d5846:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d584a:	9300      	str	r3, [sp, #0]
   d584c:	464a      	mov	r2, r9
   d584e:	4633      	mov	r3, r6
   d5850:	b2c9      	uxtb	r1, r1
   d5852:	4628      	mov	r0, r5
   d5854:	f7ff fdba 	bl	d53cc <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d5858:	4680      	mov	r8, r0
   d585a:	b128      	cbz	r0, d5868 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d585c:	4434      	add	r4, r6
        dataLen -= count;
   d585e:	1bbf      	subs	r7, r7, r6
        data += count;
   d5860:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5862:	e7dd      	b.n	d5820 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d5864:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5868:	f1ba 0f00 	cmp.w	sl, #0
   d586c:	d002      	beq.n	d5874 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d586e:	6868      	ldr	r0, [r5, #4]
   d5870:	f004 f93d 	bl	d9aee <_ZN7TwoWire6unlockEv>
}
   d5874:	4640      	mov	r0, r8
   d5876:	b002      	add	sp, #8
   d5878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d587c:	2301      	movs	r3, #1
   d587e:	2204      	movs	r2, #4
   d5880:	213f      	movs	r1, #63	; 0x3f
   d5882:	4628      	mov	r0, r5
   d5884:	f7ff ff72 	bl	d576c <_ZN6AB180514setRegisterBitEhhb>
   d5888:	e7dc      	b.n	d5844 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d588c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d588c:	b530      	push	{r4, r5, lr}
   d588e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5890:	680d      	ldr	r5, [r1, #0]
   d5892:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d5896:	9503      	str	r5, [sp, #12]
   d5898:	684d      	ldr	r5, [r1, #4]
   d589a:	9502      	str	r5, [sp, #8]
   d589c:	688d      	ldr	r5, [r1, #8]
   d589e:	9501      	str	r5, [sp, #4]
   d58a0:	68c9      	ldr	r1, [r1, #12]
   d58a2:	9100      	str	r1, [sp, #0]
   d58a4:	3301      	adds	r3, #1
   d58a6:	4904      	ldr	r1, [pc, #16]	; (d58b8 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d58a8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d58ac:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d58ae:	f005 feaf 	bl	db610 <_ZN6String6formatEPKcz>
}
   d58b2:	4620      	mov	r0, r4
   d58b4:	b005      	add	sp, #20
   d58b6:	bd30      	pop	{r4, r5, pc}
   d58b8:	000dd41a 	.word	0x000dd41a

000d58bc <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d58bc:	1103      	asrs	r3, r0, #4
}
   d58be:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d58c0:	f000 000f 	and.w	r0, r0, #15
}
   d58c4:	fb02 0003 	mla	r0, r2, r3, r0
   d58c8:	4770      	bx	lr

000d58ca <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d58ca:	b538      	push	{r3, r4, r5, lr}
   d58cc:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d58ce:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d58d0:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d58d2:	f7ff fff3 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58d6:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d58d8:	7860      	ldrb	r0, [r4, #1]
   d58da:	f7ff ffef 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58de:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d58e0:	78a0      	ldrb	r0, [r4, #2]
   d58e2:	f7ff ffeb 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58e6:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d58e8:	78e0      	ldrb	r0, [r4, #3]
   d58ea:	f7ff ffe7 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58ee:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d58f0:	7920      	ldrb	r0, [r4, #4]
   d58f2:	f7ff ffe3 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58f6:	3801      	subs	r0, #1
   d58f8:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d58fa:	b92d      	cbnz	r5, d5908 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d58fc:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d58fe:	7828      	ldrb	r0, [r5, #0]
   d5900:	f7ff ffdc 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d5904:	6188      	str	r0, [r1, #24]
}
   d5906:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d5908:	7960      	ldrb	r0, [r4, #5]
   d590a:	f7ff ffd7 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d590e:	3064      	adds	r0, #100	; 0x64
   d5910:	1da5      	adds	r5, r4, #6
   d5912:	6148      	str	r0, [r1, #20]
   d5914:	e7f3      	b.n	d58fe <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d5918 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5918:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d591a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d591c:	b088      	sub	sp, #32
   d591e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5920:	461a      	mov	r2, r3
   d5922:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5924:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5926:	f7ff fea3 	bl	d5670 <_ZN6AB180510isBitClearEhhb>
   d592a:	b1f0      	cbz	r0, d596a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d592c:	2308      	movs	r3, #8
   d592e:	2601      	movs	r6, #1
   d5930:	4620      	mov	r0, r4
   d5932:	9600      	str	r6, [sp, #0]
   d5934:	eb0d 0203 	add.w	r2, sp, r3
   d5938:	2100      	movs	r1, #0
   d593a:	f7ff fcb3 	bl	d52a4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d593e:	4604      	mov	r4, r0
   d5940:	b198      	cbz	r0, d596a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d5942:	4632      	mov	r2, r6
   d5944:	4629      	mov	r1, r5
   d5946:	f10d 0009 	add.w	r0, sp, #9
   d594a:	f7ff ffbe 	bl	d58ca <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d594e:	a804      	add	r0, sp, #16
   d5950:	f7ff ff9c 	bl	d588c <_ZN6AB180510tmToStringEPK2tm>
   d5954:	4808      	ldr	r0, [pc, #32]	; (d5978 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d5956:	9a04      	ldr	r2, [sp, #16]
   d5958:	4908      	ldr	r1, [pc, #32]	; (d597c <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d595a:	f7fe fc03 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d595e:	a804      	add	r0, sp, #16
   d5960:	f005 fd90 	bl	db484 <_ZN6StringD1Ev>
}
   d5964:	4620      	mov	r0, r4
   d5966:	b008      	add	sp, #32
   d5968:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d596a:	2224      	movs	r2, #36	; 0x24
   d596c:	2100      	movs	r1, #0
   d596e:	4628      	mov	r0, r5
   d5970:	f006 ffe0 	bl	dc934 <memset>
   d5974:	2400      	movs	r4, #0
   d5976:	e7f5      	b.n	d5964 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d5978:	2003e2f0 	.word	0x2003e2f0
   d597c:	000dd438 	.word	0x000dd438

000d5980 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d5980:	b530      	push	{r4, r5, lr}
   d5982:	b08b      	sub	sp, #44	; 0x2c
   d5984:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d5986:	a901      	add	r1, sp, #4
   d5988:	f7ff ffc6 	bl	d5918 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d598c:	4604      	mov	r4, r0
   d598e:	b120      	cbz	r0, d599a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d5990:	a801      	add	r0, sp, #4
   d5992:	f003 faf5 	bl	d8f80 <mktime>
   d5996:	e9c5 0100 	strd	r0, r1, [r5]
}
   d599a:	4620      	mov	r0, r4
   d599c:	b00b      	add	sp, #44	; 0x2c
   d599e:	bd30      	pop	{r4, r5, pc}

000d59a0 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d59a0:	b510      	push	{r4, lr}
   d59a2:	4604      	mov	r4, r0
   d59a4:	b088      	sub	sp, #32
    if (callBegin) {
   d59a6:	b111      	cbz	r1, d59ae <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d59a8:	6840      	ldr	r0, [r0, #4]
   d59aa:	f004 f845 	bl	d9a38 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d59ae:	4620      	mov	r0, r4
   d59b0:	f7ff fcce 	bl	d5350 <_ZN6AB180510detectChipEv>
   d59b4:	b370      	cbz	r0, d5a14 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d59b6:	4620      	mov	r0, r4
   d59b8:	f7ff fe82 	bl	d56c0 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d59bc:	2301      	movs	r3, #1
   d59be:	461a      	mov	r2, r3
   d59c0:	2110      	movs	r1, #16
   d59c2:	4620      	mov	r0, r4
   d59c4:	f7ff fe54 	bl	d5670 <_ZN6AB180510isBitClearEhhb>
   d59c8:	b1d8      	cbz	r0, d5a02 <_ZN6AB18055setupEb+0x62>
   d59ca:	f005 fffb 	bl	db9c4 <_ZN9TimeClass7isValidEv>
   d59ce:	b9c0      	cbnz	r0, d5a02 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d59d0:	a902      	add	r1, sp, #8
   d59d2:	4620      	mov	r0, r4
   d59d4:	f7ff ffd4 	bl	d5980 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d59d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d59dc:	f005 fef9 	bl	db7d2 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d59e0:	4b0f      	ldr	r3, [pc, #60]	; (d5a20 <_ZN6AB18055setupEb+0x80>)
   d59e2:	4910      	ldr	r1, [pc, #64]	; (d5a24 <_ZN6AB18055setupEb+0x84>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	9300      	str	r3, [sp, #0]
   d59e8:	a804      	add	r0, sp, #16
   d59ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d59ee:	f005 ffa7 	bl	db940 <_ZN9TimeClass6formatExPKc>
   d59f2:	480d      	ldr	r0, [pc, #52]	; (d5a28 <_ZN6AB18055setupEb+0x88>)
   d59f4:	9a04      	ldr	r2, [sp, #16]
   d59f6:	490d      	ldr	r1, [pc, #52]	; (d5a2c <_ZN6AB18055setupEb+0x8c>)
   d59f8:	f7fe fbb4 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d59fc:	a804      	add	r0, sp, #16
   d59fe:	f005 fd41 	bl	db484 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5a02:	4a0b      	ldr	r2, [pc, #44]	; (d5a30 <_ZN6AB18055setupEb+0x90>)
   d5a04:	2300      	movs	r3, #0
   d5a06:	2100      	movs	r1, #0
   d5a08:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d5a0c:	f003 f968 	bl	d8ce0 <system_subscribe_event>
}
   d5a10:	b008      	add	sp, #32
   d5a12:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d5a14:	4907      	ldr	r1, [pc, #28]	; (d5a34 <_ZN6AB18055setupEb+0x94>)
   d5a16:	4804      	ldr	r0, [pc, #16]	; (d5a28 <_ZN6AB18055setupEb+0x88>)
   d5a18:	f7ff fc19 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
   d5a1c:	e7f1      	b.n	d5a02 <_ZN6AB18055setupEb+0x62>
   d5a1e:	bf00      	nop
   d5a20:	2003dcf0 	.word	0x2003dcf0
   d5a24:	2003e5c4 	.word	0x2003e5c4
   d5a28:	2003e2f0 	.word	0x2003e2f0
   d5a2c:	000dd446 	.word	0x000dd446
   d5a30:	000d54e1 	.word	0x000d54e1
   d5a34:	000dd463 	.word	0x000dd463

000d5a38 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d5a38:	220a      	movs	r2, #10
   d5a3a:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d5a3e:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d5a42:	fb93 f1f2 	sdiv	r1, r3, r2
   d5a46:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d5a4a:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d5a4e:	b2c0      	uxtb	r0, r0
   d5a50:	4770      	bx	lr

000d5a52 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5a52:	b570      	push	{r4, r5, r6, lr}
   d5a54:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d5a56:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5a58:	460c      	mov	r4, r1
   d5a5a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d5a5c:	f7ff ffec 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a60:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d5a62:	6868      	ldr	r0, [r5, #4]
   d5a64:	f7ff ffe8 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a68:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d5a6a:	68a8      	ldr	r0, [r5, #8]
   d5a6c:	f7ff ffe4 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a70:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d5a72:	68e8      	ldr	r0, [r5, #12]
   d5a74:	f7ff ffe0 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a78:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5a7a:	6928      	ldr	r0, [r5, #16]
   d5a7c:	3001      	adds	r0, #1
   d5a7e:	f7ff ffdb 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a82:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d5a84:	b92e      	cbnz	r6, d5a92 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5a86:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d5a88:	69a8      	ldr	r0, [r5, #24]
   d5a8a:	f7ff ffd5 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a8e:	7030      	strb	r0, [r6, #0]
}
   d5a90:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d5a92:	696a      	ldr	r2, [r5, #20]
   d5a94:	2364      	movs	r3, #100	; 0x64
   d5a96:	fb92 f0f3 	sdiv	r0, r2, r3
   d5a9a:	fb03 2010 	mls	r0, r3, r0, r2
   d5a9e:	f7ff ffcb 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5aa2:	1da6      	adds	r6, r4, #6
   d5aa4:	7160      	strb	r0, [r4, #5]
   d5aa6:	e7ef      	b.n	d5a88 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d5aa8 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d5aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5aaa:	b087      	sub	sp, #28
   d5aac:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d5aae:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d5ab0:	4616      	mov	r6, r2
   d5ab2:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d5ab4:	f7ff feea 	bl	d588c <_ZN6AB180510tmToStringEPK2tm>
   d5ab8:	481e      	ldr	r0, [pc, #120]	; (d5b34 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d5aba:	9a02      	ldr	r2, [sp, #8]
   d5abc:	491e      	ldr	r1, [pc, #120]	; (d5b38 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d5abe:	f7fe fb51 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5ac2:	a802      	add	r0, sp, #8
   d5ac4:	f005 fcde 	bl	db484 <_ZN6StringD1Ev>
    if (lock) {
   d5ac8:	b116      	cbz	r6, d5ad0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d5aca:	6868      	ldr	r0, [r5, #4]
   d5acc:	f004 f806 	bl	d9adc <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	2201      	movs	r2, #1
   d5ad4:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d5ad8:	2700      	movs	r7, #0
   d5ada:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d5ade:	f7ff ffb8 	bl	d5a52 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d5ae2:	2301      	movs	r3, #1
   d5ae4:	461a      	mov	r2, r3
   d5ae6:	2110      	movs	r1, #16
   d5ae8:	4628      	mov	r0, r5
   d5aea:	f7ff fe3f 	bl	d576c <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d5aee:	4604      	mov	r4, r0
   d5af0:	b1e8      	cbz	r0, d5b2e <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d5af2:	2308      	movs	r3, #8
   d5af4:	9700      	str	r7, [sp, #0]
   d5af6:	eb0d 0203 	add.w	r2, sp, r3
   d5afa:	4639      	mov	r1, r7
   d5afc:	4628      	mov	r0, r5
   d5afe:	f7ff fc65 	bl	d53cc <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d5b02:	4604      	mov	r4, r0
   d5b04:	b160      	cbz	r0, d5b20 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d5b06:	2301      	movs	r3, #1
   d5b08:	461a      	mov	r2, r3
   d5b0a:	2110      	movs	r1, #16
   d5b0c:	4628      	mov	r0, r5
   d5b0e:	f7ff fdcd 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d5b12:	b116      	cbz	r6, d5b1a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d5b14:	6868      	ldr	r0, [r5, #4]
   d5b16:	f003 ffea 	bl	d9aee <_ZN7TwoWire6unlockEv>
}
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	b007      	add	sp, #28
   d5b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d5b20:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d5b24:	4905      	ldr	r1, [pc, #20]	; (d5b3c <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d5b26:	4803      	ldr	r0, [pc, #12]	; (d5b34 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d5b28:	f7ff fb91 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
   d5b2c:	e7f1      	b.n	d5b12 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d5b2e:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d5b32:	e7f7      	b.n	d5b24 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d5b34:	2003e2f0 	.word	0x2003e2f0
   d5b38:	000dd47b 	.word	0x000dd47b
   d5b3c:	000dd489 	.word	0x000dd489

000d5b40 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d5b40:	b513      	push	{r0, r1, r4, lr}
   d5b42:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d5b44:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d5b46:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d5b4a:	f006 feb9 	bl	dc8c0 <gmtime>
    return setRtcFromTm(tm, lock);
   d5b4e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d5b52:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d5b54:	4620      	mov	r0, r4
   d5b56:	f7ff ffa7 	bl	d5aa8 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d5b5a:	b002      	add	sp, #8
   d5b5c:	bd10      	pop	{r4, pc}
	...

000d5b60 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d5b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5b62:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d5b64:	b089      	sub	sp, #36	; 0x24
   d5b66:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5b68:	bb75      	cbnz	r5, d5bc8 <_ZN6AB18054loopEv+0x68>
   d5b6a:	f005 ff2b 	bl	db9c4 <_ZN9TimeClass7isValidEv>
   d5b6e:	b358      	cbz	r0, d5bc8 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d5b70:	2600      	movs	r6, #0
   d5b72:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d5b74:	a904      	add	r1, sp, #16
   d5b76:	4628      	mov	r0, r5
        tm = 0;
   d5b78:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d5b7c:	f003 f928 	bl	d8dd0 <spark_sync_time_last>
   d5b80:	b310      	cbz	r0, d5bc8 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d5b82:	2501      	movs	r5, #1
   d5b84:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d5b86:	f005 ff3a 	bl	db9fe <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d5b8a:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d5b8c:	4602      	mov	r2, r0
   d5b8e:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d5b90:	4620      	mov	r0, r4
        time_t time = Time.now();
   d5b92:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d5b96:	f7ff ffd3 	bl	d5b40 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d5b9a:	a902      	add	r1, sp, #8
   d5b9c:	4620      	mov	r0, r4
        time = 0;
   d5b9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d5ba2:	f7ff feed 	bl	d5980 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d5ba6:	4b12      	ldr	r3, [pc, #72]	; (d5bf0 <_ZN6AB18054loopEv+0x90>)
   d5ba8:	4912      	ldr	r1, [pc, #72]	; (d5bf4 <_ZN6AB18054loopEv+0x94>)
   d5baa:	681b      	ldr	r3, [r3, #0]
   d5bac:	9300      	str	r3, [sp, #0]
   d5bae:	a804      	add	r0, sp, #16
   d5bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5bb4:	f005 fec4 	bl	db940 <_ZN9TimeClass6formatExPKc>
   d5bb8:	480f      	ldr	r0, [pc, #60]	; (d5bf8 <_ZN6AB18054loopEv+0x98>)
   d5bba:	9a04      	ldr	r2, [sp, #16]
   d5bbc:	490f      	ldr	r1, [pc, #60]	; (d5bfc <_ZN6AB18054loopEv+0x9c>)
   d5bbe:	f7fe fad1 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5bc2:	a804      	add	r0, sp, #16
   d5bc4:	f005 fc5e 	bl	db484 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d5bc8:	6963      	ldr	r3, [r4, #20]
   d5bca:	b173      	cbz	r3, d5bea <_ZN6AB18054loopEv+0x8a>
   d5bcc:	f002 fe86 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d5bd0:	6923      	ldr	r3, [r4, #16]
   d5bd2:	1ac0      	subs	r0, r0, r3
   d5bd4:	6963      	ldr	r3, [r4, #20]
   d5bd6:	4298      	cmp	r0, r3
   d5bd8:	d307      	bcc.n	d5bea <_ZN6AB18054loopEv+0x8a>
   d5bda:	f002 fe7f 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d5bde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d5be2:	6120      	str	r0, [r4, #16]
            setWDT();
   d5be4:	4620      	mov	r0, r4
   d5be6:	f7ff fc39 	bl	d545c <_ZN6AB18056setWDTEi>
}
   d5bea:	b009      	add	sp, #36	; 0x24
   d5bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5bee:	bf00      	nop
   d5bf0:	2003dcf0 	.word	0x2003dcf0
   d5bf4:	2003e5c4 	.word	0x2003e5c4
   d5bf8:	2003e2f0 	.word	0x2003e2f0
   d5bfc:	000dd4a4 	.word	0x000dd4a4

000d5c00 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d5c00:	4b01      	ldr	r3, [pc, #4]	; (d5c08 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d5c02:	4a02      	ldr	r2, [pc, #8]	; (d5c0c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d5c04:	601a      	str	r2, [r3, #0]
}
   d5c06:	4770      	bx	lr
   d5c08:	2003e2f0 	.word	0x2003e2f0
   d5c0c:	000dd4ba 	.word	0x000dd4ba

000d5c10 <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   d5c10:	4770      	bx	lr

000d5c12 <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   d5c12:	4770      	bx	lr

000d5c14 <_ZNSt17_Function_handlerIFbR21LocalTimeScheduleItemEZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d5c14:	2001      	movs	r0, #1
   d5c16:	4770      	bx	lr

000d5c18 <_ZNSt14_Function_base13_Base_managerIZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertEUlR21LocalTimeScheduleItemE_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	  switch (__op)
   d5c18:	2a01      	cmp	r2, #1
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5c1a:	bf08      	it	eq
   d5c1c:	6001      	streq	r1, [r0, #0]
	}
   d5c1e:	2000      	movs	r0, #0
   d5c20:	4770      	bx	lr

000d5c22 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   d5c22:	b510      	push	{r4, lr}
}
   d5c24:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   d5c26:	4604      	mov	r4, r0
}
   d5c28:	f006 f9d0 	bl	dbfcc <_ZdlPvj>
   d5c2c:	4620      	mov	r0, r4
   d5c2e:	bd10      	pop	{r4, pc}

000d5c30 <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   d5c30:	b510      	push	{r4, lr}
}
   d5c32:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   d5c34:	4604      	mov	r4, r0
}
   d5c36:	f006 f9c9 	bl	dbfcc <_ZdlPvj>
   d5c3a:	4620      	mov	r0, r4
   d5c3c:	bd10      	pop	{r4, pc}
	...

000d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d5c40:	b510      	push	{r4, lr}
   d5c42:	4b05      	ldr	r3, [pc, #20]	; (d5c58 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   d5c44:	4604      	mov	r4, r0
   d5c46:	f840 3b1c 	str.w	r3, [r0], #28
   d5c4a:	f005 fc1b 	bl	db484 <_ZN6StringD1Ev>
   d5c4e:	1d20      	adds	r0, r4, #4
   d5c50:	f005 fc18 	bl	db484 <_ZN6StringD1Ev>
}
   d5c54:	4620      	mov	r0, r4
   d5c56:	bd10      	pop	{r4, pc}
   d5c58:	000dd568 	.word	0x000dd568

000d5c5c <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   d5c5c:	b510      	push	{r4, lr}
   d5c5e:	4604      	mov	r4, r0
}
   d5c60:	f7ff ffee 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
   d5c64:	4620      	mov	r0, r4
   d5c66:	2158      	movs	r1, #88	; 0x58
   d5c68:	f006 f9b0 	bl	dbfcc <_ZdlPvj>
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	bd10      	pop	{r4, pc}

000d5c70 <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   d5c70:	b510      	push	{r4, lr}
   d5c72:	4b04      	ldr	r3, [pc, #16]	; (d5c84 <_ZN9LocalTimeD1Ev+0x14>)
   d5c74:	4604      	mov	r4, r0
   d5c76:	f840 3b04 	str.w	r3, [r0], #4
   d5c7a:	f7ff ffe1 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
   d5c7e:	4620      	mov	r0, r4
   d5c80:	bd10      	pop	{r4, pc}
   d5c82:	bf00      	nop
   d5c84:	000dd538 	.word	0x000dd538

000d5c88 <_ZN9LocalTimeD0Ev>:
   d5c88:	b510      	push	{r4, lr}
   d5c8a:	4604      	mov	r4, r0
   d5c8c:	f7ff fff0 	bl	d5c70 <_ZN9LocalTimeD1Ev>
   d5c90:	4620      	mov	r0, r4
   d5c92:	2160      	movs	r1, #96	; 0x60
   d5c94:	f006 f99a 	bl	dbfcc <_ZdlPvj>
   d5c98:	4620      	mov	r0, r4
   d5c9a:	bd10      	pop	{r4, pc}

000d5c9c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   d5c9c:	f020 0302 	bic.w	r3, r0, #2
   d5ca0:	2b01      	cmp	r3, #1
   d5ca2:	d003      	beq.n	d5cac <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   d5ca4:	1f43      	subs	r3, r0, #5
   d5ca6:	4258      	negs	r0, r3
   d5ca8:	4158      	adcs	r0, r3
   d5caa:	4770      	bx	lr
   d5cac:	4618      	mov	r0, r3
   d5cae:	4770      	bx	lr

000d5cb0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>:
	if (__p)
   d5cb0:	b108      	cbz	r0, d5cb6 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0+0x6>
   d5cb2:	f7fe b9f4 	b.w	d409e <_ZdlPv>
	  _Tr::deallocate(_M_impl, __p, __n);
      }
   d5cb6:	4770      	bx	lr

000d5cb8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>:
      _M_allocate(size_t __n)
   d5cb8:	b508      	push	{r3, lr}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d5cba:	b148      	cbz	r0, d5cd0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0x18>
	if (__n > this->max_size())
   d5cbc:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   d5cc0:	d301      	bcc.n	d5cc6 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0+0xe>
	  std::__throw_bad_alloc();
   d5cc2:	f006 f989 	bl	dbfd8 <_ZSt17__throw_bad_allocv>
      }
   d5cc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5cca:	0080      	lsls	r0, r0, #2
   d5ccc:	f7fe b9e3 	b.w	d4096 <_Znwj>
   d5cd0:	bd08      	pop	{r3, pc}

000d5cd2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5cd2:	680b      	ldr	r3, [r1, #0]
   d5cd4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d5cd6:	684b      	ldr	r3, [r1, #4]
   d5cd8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d5cda:	b113      	cbz	r3, d5ce2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d5cdc:	685a      	ldr	r2, [r3, #4]
   d5cde:	3201      	adds	r2, #1
   d5ce0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ce2:	4770      	bx	lr

000d5ce4 <_ZNK12LocalTimeHMS9compareToERKS_>:
        if (hour < other.hour) {
   d5ce4:	f990 2004 	ldrsb.w	r2, [r0, #4]
   d5ce8:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d5cec:	429a      	cmp	r2, r3
   d5cee:	db13      	blt.n	d5d18 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
        if (hour > other.hour) {
   d5cf0:	dc10      	bgt.n	d5d14 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
            if (minute < other.minute) {
   d5cf2:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d5cf6:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d5cfa:	429a      	cmp	r2, r3
   d5cfc:	db0c      	blt.n	d5d18 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
            if (minute > other.minute) {
   d5cfe:	dc09      	bgt.n	d5d14 <_ZNK12LocalTimeHMS9compareToERKS_+0x30>
                if (second < other.second) {
   d5d00:	f990 2006 	ldrsb.w	r2, [r0, #6]
   d5d04:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d5d08:	429a      	cmp	r2, r3
   d5d0a:	db05      	blt.n	d5d18 <_ZNK12LocalTimeHMS9compareToERKS_+0x34>
                if (second > other.second) {
   d5d0c:	bfcc      	ite	gt
   d5d0e:	2001      	movgt	r0, #1
   d5d10:	2000      	movle	r0, #0
   d5d12:	4770      	bx	lr
            return +1;
   d5d14:	2001      	movs	r0, #1
   d5d16:	4770      	bx	lr
            return -1;
   d5d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
   d5d1c:	4770      	bx	lr
	...

000d5d20 <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   d5d20:	4a02      	ldr	r2, [pc, #8]	; (d5d2c <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   d5d22:	6002      	str	r2, [r0, #0]
   d5d24:	684a      	ldr	r2, [r1, #4]
   d5d26:	6042      	str	r2, [r0, #4]
   d5d28:	4770      	bx	lr
   d5d2a:	bf00      	nop
   d5d2c:	000dd548 	.word	0x000dd548

000d5d30 <_ZN12LocalTimeHMSaSERKS_>:
   d5d30:	f991 2004 	ldrsb.w	r2, [r1, #4]
   d5d34:	7102      	strb	r2, [r0, #4]
   d5d36:	f991 2005 	ldrsb.w	r2, [r1, #5]
   d5d3a:	7142      	strb	r2, [r0, #5]
   d5d3c:	f991 2006 	ldrsb.w	r2, [r1, #6]
   d5d40:	7182      	strb	r2, [r0, #6]
   d5d42:	f991 2007 	ldrsb.w	r2, [r1, #7]
   d5d46:	71c2      	strb	r2, [r0, #7]
   d5d48:	4770      	bx	lr

000d5d4a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>:
    int compareTo(LocalTimeHMS hms) const {
   d5d4a:	b538      	push	{r3, r4, r5, lr}
   d5d4c:	460c      	mov	r4, r1
   d5d4e:	4605      	mov	r5, r0
        return compareTo(other) < 0;
   d5d50:	f100 011c 	add.w	r1, r0, #28
   d5d54:	4620      	mov	r0, r4
   d5d56:	f7ff ffc5 	bl	d5ce4 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms < hmsStart) {
   d5d5a:	2800      	cmp	r0, #0
   d5d5c:	db09      	blt.n	d5d72 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x28>
        return compareTo(other) > 0;
   d5d5e:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d5d62:	4620      	mov	r0, r4
   d5d64:	f7ff ffbe 	bl	d5ce4 <_ZNK12LocalTimeHMS9compareToERKS_>
        if (hms > hmsEnd) {
   d5d68:	2800      	cmp	r0, #0
   d5d6a:	bfd4      	ite	le
   d5d6c:	2000      	movle	r0, #0
   d5d6e:	2001      	movgt	r0, #1
    }
   d5d70:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   d5d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5d76:	e7fb      	b.n	d5d70 <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS+0x26>

000d5d78 <_ZN22LocalTimePosixTimezoneaSERKS_>:
class LocalTimePosixTimezone {
   d5d78:	b538      	push	{r3, r4, r5, lr}
   d5d7a:	4604      	mov	r4, r0
   d5d7c:	460d      	mov	r5, r1
   d5d7e:	3004      	adds	r0, #4
   d5d80:	3104      	adds	r1, #4
   d5d82:	f005 fc06 	bl	db592 <_ZN6StringaSERKS_>
   d5d86:	f105 0114 	add.w	r1, r5, #20
   d5d8a:	f104 0014 	add.w	r0, r4, #20
   d5d8e:	f7ff ffcf 	bl	d5d30 <_ZN12LocalTimeHMSaSERKS_>
   d5d92:	f105 011c 	add.w	r1, r5, #28
   d5d96:	f104 001c 	add.w	r0, r4, #28
   d5d9a:	f005 fbfa 	bl	db592 <_ZN6StringaSERKS_>
   d5d9e:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d5da2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d5da6:	f7ff ffc3 	bl	d5d30 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimeChange {
   d5daa:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   d5dae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   d5db2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   d5db6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   d5dba:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   d5dbe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   d5dc2:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   d5dc6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   d5dca:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d5dce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5dd2:	f7ff ffad 	bl	d5d30 <_ZN12LocalTimeHMSaSERKS_>
   d5dd6:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   d5dda:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   d5dde:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   d5de2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   d5de6:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   d5dea:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   d5dee:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   d5df2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   d5df6:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d5dfa:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d5dfe:	f7ff ff97 	bl	d5d30 <_ZN12LocalTimeHMSaSERKS_>
class LocalTimePosixTimezone {
   d5e02:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d5e06:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	bd38      	pop	{r3, r4, r5, pc}

000d5e0e <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   d5e0e:	694a      	ldr	r2, [r1, #20]
   d5e10:	6803      	ldr	r3, [r0, #0]
   d5e12:	f362 0316 	bfi	r3, r2, #0, #23
   d5e16:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   d5e18:	690b      	ldr	r3, [r1, #16]
   d5e1a:	1c5a      	adds	r2, r3, #1
   d5e1c:	8843      	ldrh	r3, [r0, #2]
   d5e1e:	f362 13ca 	bfi	r3, r2, #7, #4
   d5e22:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   d5e24:	68ca      	ldr	r2, [r1, #12]
   d5e26:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d5e2a:	f362 03c7 	bfi	r3, r2, #3, #5
   d5e2e:	70c3      	strb	r3, [r0, #3]
}
   d5e30:	4770      	bx	lr

000d5e32 <_ZNK12LocalTimeYMD12getDayOfWeekEv>:
int LocalTimeYMD::getDayOfWeek() const {
   d5e32:	b510      	push	{r4, lr}
   d5e34:	4604      	mov	r4, r0
   d5e36:	b08c      	sub	sp, #48	; 0x30
    struct tm timeInfo = {0};
   d5e38:	2224      	movs	r2, #36	; 0x24
   d5e3a:	2100      	movs	r1, #0
   d5e3c:	a803      	add	r0, sp, #12
   d5e3e:	f006 fd79 	bl	dc934 <memset>
    timeInfo.tm_year = ymd.year;
   d5e42:	6823      	ldr	r3, [r4, #0]
   d5e44:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5e48:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d5e4a:	8863      	ldrh	r3, [r4, #2]
   d5e4c:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d5e50:	3b01      	subs	r3, #1
   d5e52:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday = ymd.day;
   d5e54:	78e3      	ldrb	r3, [r4, #3]
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   d5e56:	a803      	add	r0, sp, #12
    timeInfo.tm_mday = ymd.day;
   d5e58:	08db      	lsrs	r3, r3, #3
   d5e5a:	9306      	str	r3, [sp, #24]
    return mktime(pTimeInfo);
   d5e5c:	f003 f890 	bl	d8f80 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d5e60:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d5e64:	a903      	add	r1, sp, #12
   d5e66:	4668      	mov	r0, sp
   d5e68:	f003 f87a 	bl	d8f60 <localtime_r>
}
   d5e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
   d5e6e:	b00c      	add	sp, #48	; 0x30
   d5e70:	bd10      	pop	{r4, pc}

000d5e72 <_ZN12LocalTimeYMD6addDayEi>:
void LocalTimeYMD::addDay(int numberOfDays) {
   d5e72:	b530      	push	{r4, r5, lr}
   d5e74:	4604      	mov	r4, r0
   d5e76:	b08d      	sub	sp, #52	; 0x34
    struct tm timeInfo = {0};
   d5e78:	2224      	movs	r2, #36	; 0x24
void LocalTimeYMD::addDay(int numberOfDays) {
   d5e7a:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d5e7c:	a803      	add	r0, sp, #12
   d5e7e:	2100      	movs	r1, #0
   d5e80:	f006 fd58 	bl	dc934 <memset>
    timeInfo.tm_year = ymd.year;
   d5e84:	6823      	ldr	r3, [r4, #0]
    timeInfo.tm_mday = ymd.day;
   d5e86:	78e1      	ldrb	r1, [r4, #3]
    timeInfo.tm_year = ymd.year;
   d5e88:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5e8c:	9308      	str	r3, [sp, #32]
    timeInfo.tm_mon = ymd.month - 1;
   d5e8e:	8863      	ldrh	r3, [r4, #2]
   d5e90:	f3c3 13c3 	ubfx	r3, r3, #7, #4
   d5e94:	3b01      	subs	r3, #1
    timeInfo.tm_mday += numberOfDays;
   d5e96:	eb05 05d1 	add.w	r5, r5, r1, lsr #3
    return mktime(pTimeInfo);
   d5e9a:	a803      	add	r0, sp, #12
    timeInfo.tm_mon = ymd.month - 1;
   d5e9c:	9307      	str	r3, [sp, #28]
    timeInfo.tm_mday += numberOfDays;
   d5e9e:	9506      	str	r5, [sp, #24]
    return mktime(pTimeInfo);
   d5ea0:	f003 f86e 	bl	d8f80 <mktime>
    LocalTime::timeToTm(time, &timeInfo);
   d5ea4:	e9cd 0100 	strd	r0, r1, [sp]
    localtime_r(&time, pTimeInfo);
   d5ea8:	a903      	add	r1, sp, #12
   d5eaa:	4668      	mov	r0, sp
   d5eac:	f003 f858 	bl	d8f60 <localtime_r>
    fromTimeInfo(&timeInfo);
   d5eb0:	a903      	add	r1, sp, #12
   d5eb2:	4620      	mov	r0, r4
   d5eb4:	f7ff ffab 	bl	d5e0e <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d5eb8:	b00d      	add	sp, #52	; 0x34
   d5eba:	bd30      	pop	{r4, r5, pc}

000d5ebc <_ZNK12LocalTimeYMD9compareToES_>:
    if (ymd.year < other.ymd.year) {
   d5ebc:	6803      	ldr	r3, [r0, #0]
   d5ebe:	f3c1 0216 	ubfx	r2, r1, #0, #23
   d5ec2:	f3c3 0316 	ubfx	r3, r3, #0, #23
   d5ec6:	4293      	cmp	r3, r2
   d5ec8:	d313      	bcc.n	d5ef2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
    if (ymd.year > other.ymd.year) {
   d5eca:	d810      	bhi.n	d5eee <_ZNK12LocalTimeYMD9compareToES_+0x32>
        if (ymd.month < other.ymd.month) {
   d5ecc:	8842      	ldrh	r2, [r0, #2]
   d5ece:	f3c1 53c3 	ubfx	r3, r1, #23, #4
   d5ed2:	f3c2 12c3 	ubfx	r2, r2, #7, #4
   d5ed6:	429a      	cmp	r2, r3
   d5ed8:	d30b      	bcc.n	d5ef2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
        if (ymd.month > other.ymd.month) {
   d5eda:	d808      	bhi.n	d5eee <_ZNK12LocalTimeYMD9compareToES_+0x32>
            if (ymd.day < other.ymd.day) {
   d5edc:	78c3      	ldrb	r3, [r0, #3]
   d5ede:	08db      	lsrs	r3, r3, #3
   d5ee0:	ebb3 6fd1 	cmp.w	r3, r1, lsr #27
   d5ee4:	d305      	bcc.n	d5ef2 <_ZNK12LocalTimeYMD9compareToES_+0x36>
            if (ymd.day > other.ymd.day) {
   d5ee6:	bf8c      	ite	hi
   d5ee8:	2001      	movhi	r0, #1
   d5eea:	2000      	movls	r0, #0
   d5eec:	4770      	bx	lr
        cmp = +1;
   d5eee:	2001      	movs	r0, #1
   d5ef0:	4770      	bx	lr
        cmp = -1;
   d5ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5ef6:	4770      	bx	lr

000d5ef8 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   d5ef8:	4a02      	ldr	r2, [pc, #8]	; (d5f04 <_ZN12LocalTimeHMSC1Ev+0xc>)
   d5efa:	6002      	str	r2, [r0, #0]
   d5efc:	2200      	movs	r2, #0
   d5efe:	6042      	str	r2, [r0, #4]
}
   d5f00:	4770      	bx	lr
   d5f02:	bf00      	nop
   d5f04:	000dd548 	.word	0x000dd548

000d5f08 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   d5f08:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   d5f0a:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   d5f0c:	b087      	sub	sp, #28
    hour = minute = second = 0;
   d5f0e:	8083      	strh	r3, [r0, #4]
   d5f10:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   d5f12:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d5f14:	ab05      	add	r3, sp, #20
   d5f16:	9300      	str	r3, [sp, #0]
   d5f18:	4913      	ldr	r1, [pc, #76]	; (d5f68 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   d5f1a:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   d5f1c:	ab04      	add	r3, sp, #16
   d5f1e:	aa03      	add	r2, sp, #12
   d5f20:	4628      	mov	r0, r5
   d5f22:	f002 ffe5 	bl	d8ef0 <sscanf>
   d5f26:	2803      	cmp	r0, #3
   d5f28:	d107      	bne.n	d5f3a <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   d5f2a:	9b03      	ldr	r3, [sp, #12]
   d5f2c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d5f2e:	9b04      	ldr	r3, [sp, #16]
   d5f30:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   d5f32:	9b05      	ldr	r3, [sp, #20]
   d5f34:	71a3      	strb	r3, [r4, #6]
}
   d5f36:	b007      	add	sp, #28
   d5f38:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   d5f3a:	490c      	ldr	r1, [pc, #48]	; (d5f6c <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   d5f3c:	ab04      	add	r3, sp, #16
   d5f3e:	aa03      	add	r2, sp, #12
   d5f40:	4628      	mov	r0, r5
   d5f42:	f002 ffd5 	bl	d8ef0 <sscanf>
   d5f46:	2802      	cmp	r0, #2
   d5f48:	d104      	bne.n	d5f54 <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   d5f4a:	9b03      	ldr	r3, [sp, #12]
   d5f4c:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   d5f4e:	9b04      	ldr	r3, [sp, #16]
   d5f50:	7163      	strb	r3, [r4, #5]
   d5f52:	e7f0      	b.n	d5f36 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   d5f54:	4906      	ldr	r1, [pc, #24]	; (d5f70 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   d5f56:	aa03      	add	r2, sp, #12
   d5f58:	4628      	mov	r0, r5
   d5f5a:	f002 ffc9 	bl	d8ef0 <sscanf>
   d5f5e:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   d5f60:	bf04      	itt	eq
   d5f62:	9b03      	ldreq	r3, [sp, #12]
   d5f64:	7123      	strbeq	r3, [r4, #4]
}
   d5f66:	e7e6      	b.n	d5f36 <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   d5f68:	000dd4e0 	.word	0x000dd4e0
   d5f6c:	000dd4e3 	.word	0x000dd4e3
   d5f70:	000dd363 	.word	0x000dd363

000d5f74 <_ZN12LocalTimeHMSC1EPKc>:
LocalTimeHMS::LocalTimeHMS(const char *str) {
   d5f74:	b510      	push	{r4, lr}
   d5f76:	4b04      	ldr	r3, [pc, #16]	; (d5f88 <_ZN12LocalTimeHMSC1EPKc+0x14>)
   d5f78:	6003      	str	r3, [r0, #0]
   d5f7a:	2300      	movs	r3, #0
   d5f7c:	4604      	mov	r4, r0
   d5f7e:	6043      	str	r3, [r0, #4]
    parse(str);
   d5f80:	f7ff ffc2 	bl	d5f08 <_ZN12LocalTimeHMS5parseEPKc>
}
   d5f84:	4620      	mov	r0, r4
   d5f86:	bd10      	pop	{r4, pc}
   d5f88:	000dd548 	.word	0x000dd548

000d5f8c <_ZN21LocalTimeScheduleItemC1Ev>:
    LocalTimeScheduleItem() {
   d5f8c:	b538      	push	{r3, r4, r5, lr}
	: _M_start(), _M_finish(), _M_end_of_storage()
   d5f8e:	2500      	movs	r5, #0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d5f90:	237f      	movs	r3, #127	; 0x7f
    LocalTimeScheduleItem() {
   d5f92:	4604      	mov	r4, r0
    LocalTimeDayOfWeek(uint8_t mask) : dayOfWeekMask(mask) {
   d5f94:	7003      	strb	r3, [r0, #0]
   d5f96:	e9c0 5501 	strd	r5, r5, [r0, #4]
   d5f9a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   d5f9e:	e9c0 5505 	strd	r5, r5, [r0, #20]
    LocalTimeRange() : LocalTimeRestrictedDate(LocalTimeDayOfWeek::MASK_ALL), hmsStart(LocalTimeHMS("00:00:00")), hmsEnd(LocalTimeHMS("23:59:59")) {
   d5fa2:	490a      	ldr	r1, [pc, #40]	; (d5fcc <_ZN21LocalTimeScheduleItemC1Ev+0x40>)
   d5fa4:	301c      	adds	r0, #28
   d5fa6:	f7ff ffe5 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
   d5faa:	4909      	ldr	r1, [pc, #36]	; (d5fd0 <_ZN21LocalTimeScheduleItemC1Ev+0x44>)
   d5fac:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5fb0:	f7ff ffe0 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
    LocalTimeScheduleItem() {
   d5fb4:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
   d5fb8:	4906      	ldr	r1, [pc, #24]	; (d5fd4 <_ZN21LocalTimeScheduleItemC1Ev+0x48>)
   d5fba:	6365      	str	r5, [r4, #52]	; 0x34
   d5fbc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5fc0:	f005 faab 	bl	db51a <_ZN6StringC1EPKc>
   d5fc4:	64a5      	str	r5, [r4, #72]	; 0x48
    }
   d5fc6:	4620      	mov	r0, r4
   d5fc8:	bd38      	pop	{r3, r4, r5, pc}
   d5fca:	bf00      	nop
   d5fcc:	000dd4e9 	.word	0x000dd4e9
   d5fd0:	000dd4f2 	.word	0x000dd4f2
   d5fd4:	000dd9ad 	.word	0x000dd9ad

000d5fd8 <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   d5fd8:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d5fdc:	f990 2005 	ldrsb.w	r2, [r0, #5]
   d5fe0:	f990 1006 	ldrsb.w	r1, [r0, #6]
   d5fe4:	2b00      	cmp	r3, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   d5fe6:	bfb8      	it	lt
   d5fe8:	4808      	ldrlt	r0, [pc, #32]	; (d600c <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   d5fea:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   d5fee:	ea4f 0282 	mov.w	r2, r2, lsl #2
   d5ff2:	bfbd      	ittte	lt
   d5ff4:	fb00 2003 	mlalt	r0, r0, r3, r2
   d5ff8:	1840      	addlt	r0, r0, r1
   d5ffa:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   d5ffc:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   d6000:	bfa4      	itt	ge
   d6002:	fb00 2303 	mlage	r3, r0, r3, r2
   d6006:	1858      	addge	r0, r3, r1
}
   d6008:	4770      	bx	lr
   d600a:	bf00      	nop
   d600c:	fffff1f0 	.word	0xfffff1f0

000d6010 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   d6010:	f990 3007 	ldrsb.w	r3, [r0, #7]
   d6014:	b943      	cbnz	r3, d6028 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   d6016:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d601a:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   d601c:	f990 3005 	ldrsb.w	r3, [r0, #5]
   d6020:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   d6022:	f990 3006 	ldrsb.w	r3, [r0, #6]
   d6026:	600b      	str	r3, [r1, #0]
}
   d6028:	4770      	bx	lr

000d602a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   d602a:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   d602e:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   d6030:	b9b3      	cbnz	r3, d6060 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   d6032:	f990 5004 	ldrsb.w	r5, [r0, #4]
   d6036:	688c      	ldr	r4, [r1, #8]
   d6038:	442c      	add	r4, r5
   d603a:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   d603e:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   d6040:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   d6044:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   d6046:	bfb5      	itete	lt
   d6048:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   d604a:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   d604c:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   d604e:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   d6050:	bfb5      	itete	lt
   d6052:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   d6056:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   d605a:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   d605c:	189b      	addge	r3, r3, r2
   d605e:	600b      	str	r3, [r1, #0]
}
   d6060:	bd30      	pop	{r4, r5, pc}

000d6062 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inOnlyOnDates(LocalTimeYMD ymd) const {
   d6062:	b538      	push	{r3, r4, r5, lr}
   d6064:	6844      	ldr	r4, [r0, #4]
   d6066:	4605      	mov	r5, r0
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d6068:	68ab      	ldr	r3, [r5, #8]
   d606a:	42a3      	cmp	r3, r4
   d606c:	d007      	beq.n	d607e <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1c>
        return compareTo(other) == 0; 
   d606e:	4620      	mov	r0, r4
   d6070:	f7ff ff24 	bl	d5ebc <_ZNK12LocalTimeYMD9compareToES_>
   d6074:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6076:	2800      	cmp	r0, #0
   d6078:	d1f6      	bne.n	d6068 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x6>
            return true;
   d607a:	2001      	movs	r0, #1
}
   d607c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d607e:	2000      	movs	r0, #0
   d6080:	e7fc      	b.n	d607c <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD+0x1a>

000d6082 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::inExceptDates(LocalTimeYMD ymd) const {
   d6082:	b538      	push	{r3, r4, r5, lr}
   d6084:	6904      	ldr	r4, [r0, #16]
   d6086:	4605      	mov	r5, r0
    for(auto it = exceptDates.begin(); it != exceptDates.end(); ++it) {
   d6088:	696b      	ldr	r3, [r5, #20]
   d608a:	42a3      	cmp	r3, r4
   d608c:	d007      	beq.n	d609e <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1c>
   d608e:	4620      	mov	r0, r4
   d6090:	f7ff ff14 	bl	d5ebc <_ZNK12LocalTimeYMD9compareToES_>
   d6094:	3404      	adds	r4, #4
        if (*it == ymd) {
   d6096:	2800      	cmp	r0, #0
   d6098:	d1f6      	bne.n	d6088 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x6>
            return true;
   d609a:	2001      	movs	r0, #1
}
   d609c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   d609e:	2000      	movs	r0, #0
   d60a0:	e7fc      	b.n	d609c <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD+0x1a>

000d60a2 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>:
bool LocalTimeRestrictedDate::isValid(LocalTimeYMD ymd) const {
   d60a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d60a4:	4605      	mov	r5, r0
   d60a6:	460e      	mov	r6, r1
    if (inExceptDates(ymd)) {
   d60a8:	f7ff ffeb 	bl	d6082 <_ZNK23LocalTimeRestrictedDate13inExceptDatesE12LocalTimeYMD>
   d60ac:	b990      	cbnz	r0, d60d4 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x32>
        int dayOfWeek = ymd.getDayOfWeek();
   d60ae:	a801      	add	r0, sp, #4
   d60b0:	9101      	str	r1, [sp, #4]
   d60b2:	f7ff febe 	bl	d5e32 <_ZNK12LocalTimeYMD12getDayOfWeekEv>
        return (dayOfWeekMask & (1 << dayOfWeek)) != 0;
   d60b6:	782b      	ldrb	r3, [r5, #0]
        bool isValidDates = inOnlyOnDates(ymd);
   d60b8:	4631      	mov	r1, r6
   d60ba:	fa43 f400 	asr.w	r4, r3, r0
   d60be:	4628      	mov	r0, r5
   d60c0:	f7ff ffcf 	bl	d6062 <_ZNK23LocalTimeRestrictedDate13inOnlyOnDatesE12LocalTimeYMD>
   d60c4:	f004 0401 	and.w	r4, r4, #1
        result = isValidDays || isValidDates;
   d60c8:	2c00      	cmp	r4, #0
   d60ca:	bf08      	it	eq
   d60cc:	4604      	moveq	r4, r0
}
   d60ce:	4620      	mov	r0, r4
   d60d0:	b002      	add	sp, #8
   d60d2:	bd70      	pop	{r4, r5, r6, pc}
        result = false;
   d60d4:	2400      	movs	r4, #0
   d60d6:	e7fa      	b.n	d60ce <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD+0x2c>

000d60d8 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>:
LocalTimeYMD LocalTimeRestrictedDate::getExpirationDate() const {
   d60d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d60dc:	2400      	movs	r4, #0
   d60de:	6845      	ldr	r5, [r0, #4]
   d60e0:	4680      	mov	r8, r0
   d60e2:	4626      	mov	r6, r4
   d60e4:	4627      	mov	r7, r4
    for(auto it = onlyOnDates.begin(); it != onlyOnDates.end(); ++it) {
   d60e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d60ea:	429d      	cmp	r5, r3
   d60ec:	d01e      	beq.n	d612c <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x54>
        return ymd.year == 0 && ymd.month == 0 && ymd.day == 0;
   d60ee:	f367 0916 	bfi	r9, r7, #0, #23
   d60f2:	f366 59da 	bfi	r9, r6, #23, #4
   d60f6:	f364 69df 	bfi	r9, r4, #27, #5
        if (result.isEmpty() || *it > result) {
   d60fa:	f1b9 0f00 	cmp.w	r9, #0
   d60fe:	d109      	bne.n	d6114 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x3c>
            result = *it;
   d6100:	682f      	ldr	r7, [r5, #0]
   d6102:	886e      	ldrh	r6, [r5, #2]
   d6104:	78ec      	ldrb	r4, [r5, #3]
   d6106:	f3c7 0716 	ubfx	r7, r7, #0, #23
   d610a:	f3c6 16c3 	ubfx	r6, r6, #7, #4
   d610e:	08e4      	lsrs	r4, r4, #3
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   d6110:	3504      	adds	r5, #4
      {
	++_M_current;
	return *this;
   d6112:	e7e8      	b.n	d60e6 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0xe>
   d6114:	f367 0116 	bfi	r1, r7, #0, #23
   d6118:	f366 51da 	bfi	r1, r6, #23, #4
   d611c:	f364 61df 	bfi	r1, r4, #27, #5
        return compareTo(other) > 0; 
   d6120:	4628      	mov	r0, r5
   d6122:	f7ff fecb 	bl	d5ebc <_ZNK12LocalTimeYMD9compareToES_>
        if (result.isEmpty() || *it > result) {
   d6126:	2800      	cmp	r0, #0
   d6128:	dcea      	bgt.n	d6100 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x28>
   d612a:	e7f1      	b.n	d6110 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv+0x38>
    return result;
   d612c:	2000      	movs	r0, #0
   d612e:	f367 0016 	bfi	r0, r7, #0, #23
   d6132:	f366 50da 	bfi	r0, r6, #23, #4
   d6136:	f364 60df 	bfi	r0, r4, #27, #5
}
   d613a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d6140 <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   d6140:	4a05      	ldr	r2, [pc, #20]	; (d6158 <_ZN15LocalTimeChangeC1Ev+0x18>)
   d6142:	b508      	push	{r3, lr}
   d6144:	6002      	str	r2, [r0, #0]
   d6146:	2200      	movs	r2, #0
   d6148:	4603      	mov	r3, r0
   d614a:	6042      	str	r2, [r0, #4]
   d614c:	3008      	adds	r0, #8
   d614e:	f7ff fed3 	bl	d5ef8 <_ZN12LocalTimeHMSC1Ev>
}
   d6152:	4618      	mov	r0, r3
   d6154:	bd08      	pop	{r3, pc}
   d6156:	bf00      	nop
   d6158:	000dd558 	.word	0x000dd558

000d615c <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   d615c:	2300      	movs	r3, #0
   d615e:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   d6160:	8183      	strh	r3, [r0, #12]
   d6162:	7383      	strb	r3, [r0, #14]
}
   d6164:	4770      	bx	lr
	...

000d6168 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   d6168:	b530      	push	{r4, r5, lr}
   d616a:	4604      	mov	r4, r0
   d616c:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   d616e:	460d      	mov	r5, r1
   d6170:	b111      	cbz	r1, d6178 <_ZN15LocalTimeChange5parseEPKc+0x10>
   d6172:	780b      	ldrb	r3, [r1, #0]
   d6174:	2b4d      	cmp	r3, #77	; 0x4d
   d6176:	d003      	beq.n	d6180 <_ZN15LocalTimeChange5parseEPKc+0x18>
        clear();
   d6178:	4620      	mov	r0, r4
   d617a:	f7ff ffef 	bl	d615c <_ZN15LocalTimeChange5clearEv>
   d617e:	e01b      	b.n	d61b8 <_ZN15LocalTimeChange5parseEPKc+0x50>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   d6180:	ab05      	add	r3, sp, #20
   d6182:	9300      	str	r3, [sp, #0]
   d6184:	490f      	ldr	r1, [pc, #60]	; (d61c4 <_ZN15LocalTimeChange5parseEPKc+0x5c>)
   d6186:	ab04      	add	r3, sp, #16
   d6188:	aa03      	add	r2, sp, #12
   d618a:	4628      	mov	r0, r5
   d618c:	f002 feb0 	bl	d8ef0 <sscanf>
   d6190:	2803      	cmp	r0, #3
   d6192:	d1f1      	bne.n	d6178 <_ZN15LocalTimeChange5parseEPKc+0x10>
        month = (int8_t) values[0];
   d6194:	9b03      	ldr	r3, [sp, #12]
   d6196:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   d6198:	9b04      	ldr	r3, [sp, #16]
   d619a:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   d619c:	9b05      	ldr	r3, [sp, #20]
   d619e:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   d61a0:	212f      	movs	r1, #47	; 0x2f
   d61a2:	4628      	mov	r0, r5
   d61a4:	f006 fc26 	bl	dc9f4 <strchr>
        if (cp) {
   d61a8:	b140      	cbz	r0, d61bc <_ZN15LocalTimeChange5parseEPKc+0x54>
            hms.parse(cp);
   d61aa:	1c41      	adds	r1, r0, #1
   d61ac:	f104 0008 	add.w	r0, r4, #8
   d61b0:	f7ff feaa 	bl	d5f08 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   d61b4:	2301      	movs	r3, #1
   d61b6:	71e3      	strb	r3, [r4, #7]
}
   d61b8:	b007      	add	sp, #28
   d61ba:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   d61bc:	81a0      	strh	r0, [r4, #12]
   d61be:	73a0      	strb	r0, [r4, #14]
}
   d61c0:	e7f8      	b.n	d61b4 <_ZN15LocalTimeChange5parseEPKc+0x4c>
   d61c2:	bf00      	nop
   d61c4:	000dd4fb 	.word	0x000dd4fb

000d61c8 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   d61c8:	4b10      	ldr	r3, [pc, #64]	; (d620c <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   d61ca:	4911      	ldr	r1, [pc, #68]	; (d6210 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d61cc:	b510      	push	{r4, lr}
   d61ce:	4604      	mov	r4, r0
   d61d0:	f840 3b04 	str.w	r3, [r0], #4
   d61d4:	f005 f9a1 	bl	db51a <_ZN6StringC1EPKc>
   d61d8:	f104 0014 	add.w	r0, r4, #20
   d61dc:	f7ff fe8c 	bl	d5ef8 <_ZN12LocalTimeHMSC1Ev>
   d61e0:	490b      	ldr	r1, [pc, #44]	; (d6210 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   d61e2:	f104 001c 	add.w	r0, r4, #28
   d61e6:	f005 f998 	bl	db51a <_ZN6StringC1EPKc>
   d61ea:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d61ee:	f7ff fe83 	bl	d5ef8 <_ZN12LocalTimeHMSC1Ev>
   d61f2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d61f6:	f7ff ffa3 	bl	d6140 <_ZN15LocalTimeChangeC1Ev>
   d61fa:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d61fe:	f7ff ff9f 	bl	d6140 <_ZN15LocalTimeChangeC1Ev>
   d6202:	2300      	movs	r3, #0
   d6204:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   d6208:	4620      	mov	r0, r4
   d620a:	bd10      	pop	{r4, pc}
   d620c:	000dd568 	.word	0x000dd568
   d6210:	000dd9ad 	.word	0x000dd9ad

000d6214 <_ZN22LocalTimePosixTimezone5parseEPKc>:
bool LocalTimePosixTimezone::parse(const char *str) {
   d6214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6218:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   d621a:	4608      	mov	r0, r1
   d621c:	f006 fc14 	bl	dca48 <strdup>
    size_t ii = 0;
   d6220:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   d6222:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   d6224:	9001      	str	r0, [sp, #4]
                dstStart.parse(token);
   d6226:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   d622a:	493f      	ldr	r1, [pc, #252]	; (d6328 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   d622c:	9801      	ldr	r0, [sp, #4]
   d622e:	aa01      	add	r2, sp, #4
   d6230:	f006 fc90 	bl	dcb54 <strtok_r>
   d6234:	4601      	mov	r1, r0
   d6236:	2800      	cmp	r0, #0
   d6238:	d062      	beq.n	d6300 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   d623a:	2d01      	cmp	r5, #1
   d623c:	f105 0301 	add.w	r3, r5, #1
   d6240:	d053      	beq.n	d62ea <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   d6242:	2d02      	cmp	r5, #2
   d6244:	d056      	beq.n	d62f4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   d6246:	2d00      	cmp	r5, #0
   d6248:	d146      	bne.n	d62d8 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   d624a:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   d624c:	f892 9000 	ldrb.w	r9, [r2]
   d6250:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   d6254:	4615      	mov	r5, r2
   d6256:	4617      	mov	r7, r2
   d6258:	f102 0201 	add.w	r2, r2, #1
   d625c:	d8f6      	bhi.n	d624c <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   d625e:	2200      	movs	r2, #0
   d6260:	702a      	strb	r2, [r5, #0]
                standardName = start;
   d6262:	f104 001c 	add.w	r0, r4, #28
   d6266:	f005 f9ae 	bl	db5c6 <_ZN6StringaSEPKc>
                valid = true;
   d626a:	2201      	movs	r2, #1
                *cp = save2;
   d626c:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   d6270:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   d6274:	782a      	ldrb	r2, [r5, #0]
   d6276:	b36a      	cbz	r2, d62d4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   d6278:	f897 a000 	ldrb.w	sl, [r7]
   d627c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d6280:	2a3f      	cmp	r2, #63	; 0x3f
   d6282:	46b9      	mov	r9, r7
   d6284:	46bb      	mov	fp, r7
   d6286:	f107 0701 	add.w	r7, r7, #1
   d628a:	d9f5      	bls.n	d6278 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   d628c:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   d628e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   d6292:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   d6296:	4629      	mov	r1, r5
   d6298:	4638      	mov	r0, r7
   d629a:	f7ff fe35 	bl	d5f08 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   d629e:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   d62a2:	f1ba 0f00 	cmp.w	sl, #0
   d62a6:	d015      	beq.n	d62d4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   d62a8:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   d62aa:	f81b ab01 	ldrb.w	sl, [fp], #1
   d62ae:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   d62b2:	d8f9      	bhi.n	d62a8 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   d62b4:	2200      	movs	r2, #0
   d62b6:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   d62b8:	4649      	mov	r1, r9
   d62ba:	1d20      	adds	r0, r4, #4
   d62bc:	f005 f983 	bl	db5c6 <_ZN6StringaSEPKc>
                        *cp = save2;
   d62c0:	f885 a000 	strb.w	sl, [r5]
                        if (*cp) {
   d62c4:	f104 0014 	add.w	r0, r4, #20
   d62c8:	f1ba 0f00 	cmp.w	sl, #0
   d62cc:	d006      	beq.n	d62dc <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   d62ce:	4629      	mov	r1, r5
   d62d0:	f7ff fe1a 	bl	d5f08 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   d62d4:	2501      	movs	r5, #1
   d62d6:	e7a8      	b.n	d622a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   d62d8:	461d      	mov	r5, r3
   d62da:	e7a6      	b.n	d622a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   d62dc:	4639      	mov	r1, r7
   d62de:	f7ff fd27 	bl	d5d30 <_ZN12LocalTimeHMSaSERKS_>
                            dstHMS.hour--;
   d62e2:	7e23      	ldrb	r3, [r4, #24]
   d62e4:	3b01      	subs	r3, #1
   d62e6:	7623      	strb	r3, [r4, #24]
   d62e8:	e7f4      	b.n	d62d4 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   d62ea:	4640      	mov	r0, r8
   d62ec:	f7ff ff3c 	bl	d6168 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d62f0:	2502      	movs	r5, #2
   d62f2:	e79a      	b.n	d622a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                standardStart.parse(token);
   d62f4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d62f8:	f7ff ff36 	bl	d6168 <_ZN15LocalTimeChange5parseEPKc>
                break;
   d62fc:	2503      	movs	r5, #3
   d62fe:	e794      	b.n	d622a <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
    if (dstStart.valid && !standardStart.valid) {
   d6300:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   d6304:	b143      	cbz	r3, d6318 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   d6306:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   d630a:	b92a      	cbnz	r2, d6318 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        dstStart.clear();
   d630c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6310:	f7ff ff24 	bl	d615c <_ZN15LocalTimeChange5clearEv>
        valid = false;
   d6314:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    free(mutableCopy);
   d6318:	4630      	mov	r0, r6
   d631a:	f002 fdd1 	bl	d8ec0 <free>
}
   d631e:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   d6322:	b003      	add	sp, #12
   d6324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6328:	000dd505 	.word	0x000dd505

000d632c <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   d632c:	b538      	push	{r3, r4, r5, lr}
   d632e:	4b13      	ldr	r3, [pc, #76]	; (d637c <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   d6330:	4604      	mov	r4, r0
   d6332:	460d      	mov	r5, r1
   d6334:	f840 3b04 	str.w	r3, [r0], #4
   d6338:	4911      	ldr	r1, [pc, #68]	; (d6380 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d633a:	f005 f8ee 	bl	db51a <_ZN6StringC1EPKc>
   d633e:	f104 0014 	add.w	r0, r4, #20
   d6342:	f7ff fdd9 	bl	d5ef8 <_ZN12LocalTimeHMSC1Ev>
   d6346:	490e      	ldr	r1, [pc, #56]	; (d6380 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   d6348:	f104 001c 	add.w	r0, r4, #28
   d634c:	f005 f8e5 	bl	db51a <_ZN6StringC1EPKc>
   d6350:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6354:	f7ff fdd0 	bl	d5ef8 <_ZN12LocalTimeHMSC1Ev>
   d6358:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d635c:	f7ff fef0 	bl	d6140 <_ZN15LocalTimeChangeC1Ev>
   d6360:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6364:	f7ff feec 	bl	d6140 <_ZN15LocalTimeChangeC1Ev>
   d6368:	2300      	movs	r3, #0
   d636a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   d636e:	4629      	mov	r1, r5
   d6370:	4620      	mov	r0, r4
   d6372:	f7ff ff4f 	bl	d6214 <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   d6376:	4620      	mov	r0, r4
   d6378:	bd38      	pop	{r3, r4, r5, pc}
   d637a:	bf00      	nop
   d637c:	000dd568 	.word	0x000dd568
   d6380:	000dd9ad 	.word	0x000dd9ad

000d6384 <_ZNK14LocalTimeValue3hmsEv>:
LocalTimeHMS LocalTimeValue::hms() const {
   d6384:	b508      	push	{r3, lr}
   d6386:	4603      	mov	r3, r0
    LocalTimeHMS result;
   d6388:	f7ff fdb6 	bl	d5ef8 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   d638c:	688a      	ldr	r2, [r1, #8]
   d638e:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   d6390:	684a      	ldr	r2, [r1, #4]
   d6392:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   d6394:	680a      	ldr	r2, [r1, #0]
   d6396:	719a      	strb	r2, [r3, #6]
}
   d6398:	4618      	mov	r0, r3
   d639a:	bd08      	pop	{r3, pc}

000d639c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   d639c:	b513      	push	{r0, r1, r4, lr}
   d639e:	4b07      	ldr	r3, [pc, #28]	; (d63bc <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   d63a0:	6003      	str	r3, [r0, #0]
   d63a2:	2300      	movs	r3, #0
   d63a4:	4604      	mov	r4, r0
   d63a6:	6043      	str	r3, [r0, #4]
    *this = value.hms();
   d63a8:	4668      	mov	r0, sp
   d63aa:	f7ff ffeb 	bl	d6384 <_ZNK14LocalTimeValue3hmsEv>
   d63ae:	4669      	mov	r1, sp
   d63b0:	4620      	mov	r0, r4
   d63b2:	f7ff fcbd 	bl	d5d30 <_ZN12LocalTimeHMSaSERKS_>
}
   d63b6:	4620      	mov	r0, r4
   d63b8:	b002      	add	sp, #8
   d63ba:	bd10      	pop	{r4, pc}
   d63bc:	000dd548 	.word	0x000dd548

000d63c0 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>:
    if (!hms.ignore) {
   d63c0:	f991 3007 	ldrsb.w	r3, [r1, #7]
   d63c4:	b943      	cbnz	r3, d63d8 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS+0x18>
        tm_hour = hms.hour;
   d63c6:	f991 3004 	ldrsb.w	r3, [r1, #4]
   d63ca:	6083      	str	r3, [r0, #8]
        tm_min = hms.minute;
   d63cc:	f991 3005 	ldrsb.w	r3, [r1, #5]
   d63d0:	6043      	str	r3, [r0, #4]
        tm_sec = hms.second;
   d63d2:	f991 3006 	ldrsb.w	r3, [r1, #6]
   d63d6:	6003      	str	r3, [r0, #0]
}
   d63d8:	4770      	bx	lr

000d63da <_ZNK14LocalTimeValue3ymdEv>:
LocalTimeYMD LocalTimeValue::ymd() const {
   d63da:	b507      	push	{r0, r1, r2, lr}
        ymd.year = ymd.month = ymd.day = 0;
   d63dc:	2300      	movs	r3, #0
   d63de:	4601      	mov	r1, r0
    result.fromTimeInfo(this);
   d63e0:	a801      	add	r0, sp, #4
   d63e2:	9301      	str	r3, [sp, #4]
   d63e4:	f7ff fd13 	bl	d5e0e <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
}
   d63e8:	9801      	ldr	r0, [sp, #4]
   d63ea:	b003      	add	sp, #12
   d63ec:	f85d fb04 	ldr.w	pc, [sp], #4

000d63f0 <_ZN22LocalTimePosixTimezoneC1ERKS_>:
class LocalTimePosixTimezone {
   d63f0:	4b19      	ldr	r3, [pc, #100]	; (d6458 <_ZN22LocalTimePosixTimezoneC1ERKS_+0x68>)
   d63f2:	b570      	push	{r4, r5, r6, lr}
   d63f4:	4604      	mov	r4, r0
   d63f6:	460d      	mov	r5, r1
   d63f8:	f840 3b04 	str.w	r3, [r0], #4
   d63fc:	3104      	adds	r1, #4
   d63fe:	f005 f8d7 	bl	db5b0 <_ZN6StringC1ERKS_>
   d6402:	f105 0114 	add.w	r1, r5, #20
   d6406:	f104 0014 	add.w	r0, r4, #20
   d640a:	f7ff fc89 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d640e:	f105 011c 	add.w	r1, r5, #28
   d6412:	f104 001c 	add.w	r0, r4, #28
   d6416:	f005 f8cb 	bl	db5b0 <_ZN6StringC1ERKS_>
   d641a:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d641e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d6422:	f7ff fc7d 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeChange {
   d6426:	4e0d      	ldr	r6, [pc, #52]	; (d645c <_ZN22LocalTimePosixTimezoneC1ERKS_+0x6c>)
   d6428:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d642a:	63a3      	str	r3, [r4, #56]	; 0x38
   d642c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   d6430:	6366      	str	r6, [r4, #52]	; 0x34
   d6432:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6436:	f7ff fc73 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d643a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d643c:	64a3      	str	r3, [r4, #72]	; 0x48
   d643e:	6466      	str	r6, [r4, #68]	; 0x44
   d6440:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   d6444:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   d6448:	f7ff fc6a 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimePosixTimezone {
   d644c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   d6450:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   d6454:	4620      	mov	r0, r4
   d6456:	bd70      	pop	{r4, r5, r6, pc}
   d6458:	000dd568 	.word	0x000dd568
   d645c:	000dd558 	.word	0x000dd558

000d6460 <_ZN16LocalTimeConvertC1ERKS_>:
class LocalTimeConvert {
   d6460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6462:	460c      	mov	r4, r1
   d6464:	f851 3b04 	ldr.w	r3, [r1], #4
   d6468:	4607      	mov	r7, r0
   d646a:	f840 3b04 	str.w	r3, [r0], #4
   d646e:	f7ff ffbf 	bl	d63f0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d6472:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d6476:	f104 0668 	add.w	r6, r4, #104	; 0x68
   d647a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   d647e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6480:	f107 0568 	add.w	r5, r7, #104	; 0x68
   d6484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6486:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d6488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d648a:	6833      	ldr	r3, [r6, #0]
   d648c:	602b      	str	r3, [r5, #0]
   d648e:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d6492:	f104 0698 	add.w	r6, r4, #152	; 0x98
   d6496:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
   d649a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d649c:	f107 0598 	add.w	r5, r7, #152	; 0x98
   d64a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d64a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d64a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d64a6:	6833      	ldr	r3, [r6, #0]
   d64a8:	602b      	str	r3, [r5, #0]
   d64aa:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	; 0xc0
   d64ae:	34c8      	adds	r4, #200	; 0xc8
   d64b0:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
   d64b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d64b6:	f107 05c8 	add.w	r5, r7, #200	; 0xc8
   d64ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d64bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d64be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d64c0:	6823      	ldr	r3, [r4, #0]
   d64c2:	602b      	str	r3, [r5, #0]
   d64c4:	4638      	mov	r0, r7
   d64c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64c8 <_ZN21LocalTimeScheduleItemD1Ev>:
class LocalTimeScheduleItem {
   d64c8:	b510      	push	{r4, lr}
   d64ca:	4604      	mov	r4, r0
   d64cc:	3038      	adds	r0, #56	; 0x38
   d64ce:	f004 ffd9 	bl	db484 <_ZN6StringD1Ev>
	_M_deallocate(_M_impl._M_start,
   d64d2:	6920      	ldr	r0, [r4, #16]
   d64d4:	f7ff fbec 	bl	d5cb0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d64d8:	6860      	ldr	r0, [r4, #4]
   d64da:	f7ff fbe9 	bl	d5cb0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
   d64de:	4620      	mov	r0, r4
   d64e0:	bd10      	pop	{r4, pc}

000d64e2 <_ZN16LocalTimeConvert7timeStrEv>:
String LocalTimeConvert::timeStr() {
   d64e2:	b510      	push	{r4, lr}
   d64e4:	4604      	mov	r4, r0
   d64e6:	b088      	sub	sp, #32
   d64e8:	4608      	mov	r0, r1
    asctime_r(&localTimeValue, ascstr);
   d64ea:	3068      	adds	r0, #104	; 0x68
   d64ec:	a901      	add	r1, sp, #4
   d64ee:	f006 f9bb 	bl	dc868 <asctime_r>
    int len = strlen(ascstr);
   d64f2:	a801      	add	r0, sp, #4
   d64f4:	f006 fac5 	bl	dca82 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d64f8:	ab08      	add	r3, sp, #32
   d64fa:	4418      	add	r0, r3
   d64fc:	2300      	movs	r3, #0
   d64fe:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   d6502:	a901      	add	r1, sp, #4
   d6504:	4620      	mov	r0, r4
   d6506:	f005 f808 	bl	db51a <_ZN6StringC1EPKc>
}
   d650a:	4620      	mov	r0, r4
   d650c:	b008      	add	sp, #32
   d650e:	bd10      	pop	{r4, pc}

000d6510 <_ZNK16LocalTimeConvert8zoneNameEv>:
String LocalTimeConvert::zoneName() const { 
   d6510:	b538      	push	{r3, r4, r5, lr}
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   d6512:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
   d6516:	4605      	mov	r5, r0
   d6518:	460c      	mov	r4, r1
   d651a:	b13b      	cbz	r3, d652c <_ZNK16LocalTimeConvert8zoneNameEv+0x1c>
   d651c:	f991 303f 	ldrsb.w	r3, [r1, #63]	; 0x3f
   d6520:	b953      	cbnz	r3, d6538 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
   d6522:	f101 0030 	add.w	r0, r1, #48	; 0x30
   d6526:	f7ff fd57 	bl	d5fd8 <_ZNK12LocalTimeHMS9toSecondsEv>
   d652a:	b928      	cbnz	r0, d6538 <_ZNK16LocalTimeConvert8zoneNameEv+0x28>
        return "Z";
   d652c:	4909      	ldr	r1, [pc, #36]	; (d6554 <_ZNK16LocalTimeConvert8zoneNameEv+0x44>)
   d652e:	4628      	mov	r0, r5
   d6530:	f004 fff3 	bl	db51a <_ZN6StringC1EPKc>
};
   d6534:	4628      	mov	r0, r5
   d6536:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   d6538:	6820      	ldr	r0, [r4, #0]
   d653a:	f7ff fbaf 	bl	d5c9c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d653e:	b128      	cbz	r0, d654c <_ZNK16LocalTimeConvert8zoneNameEv+0x3c>
        return config.dstName;
   d6540:	f104 0108 	add.w	r1, r4, #8
        return config.standardName;
   d6544:	4628      	mov	r0, r5
   d6546:	f005 f833 	bl	db5b0 <_ZN6StringC1ERKS_>
   d654a:	e7f3      	b.n	d6534 <_ZNK16LocalTimeConvert8zoneNameEv+0x24>
   d654c:	f104 0120 	add.w	r1, r4, #32
   d6550:	e7f8      	b.n	d6544 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>
   d6552:	bf00      	nop
   d6554:	000dd507 	.word	0x000dd507

000d6558 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   d6558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d655c:	4680      	mov	r8, r0
   d655e:	b0a9      	sub	sp, #164	; 0xa4
   d6560:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d6562:	4615      	mov	r5, r2
   d6564:	b12a      	cbz	r2, d6572 <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   d6566:	4b4b      	ldr	r3, [pc, #300]	; (d6694 <_ZN16LocalTimeConvert6formatEPKc+0x13c>)
   d6568:	4610      	mov	r0, r2
   d656a:	6819      	ldr	r1, [r3, #0]
   d656c:	f006 fa59 	bl	dca22 <strcmp>
   d6570:	b938      	cbnz	r0, d6582 <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   d6572:	4621      	mov	r1, r4
   d6574:	4640      	mov	r0, r8
   d6576:	f7ff ffb4 	bl	d64e2 <_ZN16LocalTimeConvert7timeStrEv>
}
   d657a:	4640      	mov	r0, r8
   d657c:	b029      	add	sp, #164	; 0xa4
   d657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d6582:	4629      	mov	r1, r5
   d6584:	223f      	movs	r2, #63	; 0x3f
   d6586:	a818      	add	r0, sp, #96	; 0x60
   d6588:	f006 fa95 	bl	dcab6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d658c:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d658e:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d6590:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d6594:	f006 fa75 	bl	dca82 <strlen>
    String zoneNameStr = zoneName();
   d6598:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d659a:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   d659c:	a803      	add	r0, sp, #12
   d659e:	f7ff ffb7 	bl	d6510 <_ZNK16LocalTimeConvert8zoneNameEv>
   d65a2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   d65a6:	b13b      	cbz	r3, d65b8 <_ZN16LocalTimeConvert6formatEPKc+0x60>
   d65a8:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d65ac:	bb83      	cbnz	r3, d6610 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
   d65ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d65b2:	f7ff fd11 	bl	d5fd8 <_ZNK12LocalTimeHMS9toSecondsEv>
   d65b6:	bb58      	cbnz	r0, d6610 <_ZN16LocalTimeConvert6formatEPKc+0xb8>
        strcpy(time_zone_str, "Z");
   d65b8:	4937      	ldr	r1, [pc, #220]	; (d6698 <_ZN16LocalTimeConvert6formatEPKc+0x140>)
   d65ba:	a807      	add	r0, sp, #28
   d65bc:	f006 fa3b 	bl	dca36 <strcpy>
   d65c0:	af18      	add	r7, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   d65c2:	2600      	movs	r6, #0
    for (size_t i=0; i<len-1; i++)
   d65c4:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
   d65c8:	45b3      	cmp	fp, r6
   d65ca:	d94e      	bls.n	d666a <_ZN16LocalTimeConvert6formatEPKc+0x112>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d65cc:	46ba      	mov	sl, r7
   d65ce:	f106 0901 	add.w	r9, r6, #1
   d65d2:	f81a 3b01 	ldrb.w	r3, [sl], #1
   d65d6:	2b25      	cmp	r3, #37	; 0x25
   d65d8:	d117      	bne.n	d660a <_ZN16LocalTimeConvert6formatEPKc+0xb2>
   d65da:	787b      	ldrb	r3, [r7, #1]
   d65dc:	2b7a      	cmp	r3, #122	; 0x7a
   d65de:	d136      	bne.n	d664e <_ZN16LocalTimeConvert6formatEPKc+0xf6>
            size_t tzlen = strlen(time_zone_str);
   d65e0:	a807      	add	r0, sp, #28
   d65e2:	f006 fa4e 	bl	dca82 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d65e6:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   d65e8:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d65ea:	1830      	adds	r0, r6, r0
   d65ec:	ebab 0206 	sub.w	r2, fp, r6
   d65f0:	1cb9      	adds	r1, r7, #2
   d65f2:	4418      	add	r0, r3
   d65f4:	f006 f976 	bl	dc8e4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d65f8:	462a      	mov	r2, r5
   d65fa:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d65fc:	4638      	mov	r0, r7
   d65fe:	f006 f971 	bl	dc8e4 <memcpy>
            len = strlen(format_str);
   d6602:	a818      	add	r0, sp, #96	; 0x60
   d6604:	f006 fa3d 	bl	dca82 <strlen>
   d6608:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   d660a:	4657      	mov	r7, sl
   d660c:	464e      	mov	r6, r9
   d660e:	e7d9      	b.n	d65c4 <_ZN16LocalTimeConvert6formatEPKc+0x6c>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d6610:	6820      	ldr	r0, [r4, #0]
   d6612:	f7ff fb43 	bl	d5c9c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6616:	b1b8      	cbz	r0, d6648 <_ZN16LocalTimeConvert6formatEPKc+0xf0>
   d6618:	f104 0018 	add.w	r0, r4, #24
   d661c:	f7ff fcdc 	bl	d5fd8 <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   d6620:	213c      	movs	r1, #60	; 0x3c
   d6622:	fb90 f3f1 	sdiv	r3, r0, r1
   d6626:	2b00      	cmp	r3, #0
   d6628:	bfb8      	it	lt
   d662a:	425b      	neglt	r3, r3
   d662c:	fbb3 f2f1 	udiv	r2, r3, r1
   d6630:	fb01 3312 	mls	r3, r1, r2, r3
   d6634:	9300      	str	r3, [sp, #0]
   d6636:	4a19      	ldr	r2, [pc, #100]	; (d669c <_ZN16LocalTimeConvert6formatEPKc+0x144>)
   d6638:	4b19      	ldr	r3, [pc, #100]	; (d66a0 <_ZN16LocalTimeConvert6formatEPKc+0x148>)
   d663a:	fb90 f3f3 	sdiv	r3, r0, r3
   d663e:	2110      	movs	r1, #16
   d6640:	a807      	add	r0, sp, #28
   d6642:	f002 fc5d 	bl	d8f00 <snprintf>
   d6646:	e7bb      	b.n	d65c0 <_ZN16LocalTimeConvert6formatEPKc+0x68>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   d6648:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d664c:	e7e6      	b.n	d661c <_ZN16LocalTimeConvert6formatEPKc+0xc4>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   d664e:	2b5a      	cmp	r3, #90	; 0x5a
   d6650:	d1db      	bne.n	d660a <_ZN16LocalTimeConvert6formatEPKc+0xb2>
            size_t tzlen = zoneNameStr.length();
   d6652:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d6654:	ab18      	add	r3, sp, #96	; 0x60
   d6656:	1970      	adds	r0, r6, r5
   d6658:	ebab 0206 	sub.w	r2, fp, r6
   d665c:	1cb9      	adds	r1, r7, #2
   d665e:	4418      	add	r0, r3
   d6660:	f006 f940 	bl	dc8e4 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   d6664:	9903      	ldr	r1, [sp, #12]
   d6666:	462a      	mov	r2, r5
   d6668:	e7c8      	b.n	d65fc <_ZN16LocalTimeConvert6formatEPKc+0xa4>
    char buf[50] = {};
   d666a:	2100      	movs	r1, #0
   d666c:	222e      	movs	r2, #46	; 0x2e
   d666e:	a80c      	add	r0, sp, #48	; 0x30
   d6670:	910b      	str	r1, [sp, #44]	; 0x2c
   d6672:	f006 f95f 	bl	dc934 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   d6676:	f104 0368 	add.w	r3, r4, #104	; 0x68
   d667a:	aa18      	add	r2, sp, #96	; 0x60
   d667c:	2132      	movs	r1, #50	; 0x32
   d667e:	a80b      	add	r0, sp, #44	; 0x2c
   d6680:	f002 fc66 	bl	d8f50 <strftime>
    return String(buf);    
   d6684:	a90b      	add	r1, sp, #44	; 0x2c
   d6686:	4640      	mov	r0, r8
   d6688:	f004 ff47 	bl	db51a <_ZN6StringC1EPKc>
    String zoneNameStr = zoneName();
   d668c:	a803      	add	r0, sp, #12
   d668e:	f004 fef9 	bl	db484 <_ZN6StringD1Ev>
   d6692:	e772      	b.n	d657a <_ZN16LocalTimeConvert6formatEPKc+0x22>
   d6694:	2003dcf0 	.word	0x2003dcf0
   d6698:	000dd507 	.word	0x000dd507
   d669c:	000dd509 	.word	0x000dd509
   d66a0:	fffff1f0 	.word	0xfffff1f0

000d66a4 <_ZN9LocalTime8instanceEv>:
LocalTime &LocalTime::instance() {
   d66a4:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   d66a6:	4d09      	ldr	r5, [pc, #36]	; (d66cc <_ZN9LocalTime8instanceEv+0x28>)
   d66a8:	682b      	ldr	r3, [r5, #0]
   d66aa:	b963      	cbnz	r3, d66c6 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   d66ac:	2060      	movs	r0, #96	; 0x60
   d66ae:	f7fd fcf2 	bl	d4096 <_Znwj>
   d66b2:	4604      	mov	r4, r0
   d66b4:	b130      	cbz	r0, d66c4 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   d66b6:	4b06      	ldr	r3, [pc, #24]	; (d66d0 <_ZN9LocalTime8instanceEv+0x2c>)
   d66b8:	f840 3b04 	str.w	r3, [r0], #4
   d66bc:	f7ff fd84 	bl	d61c8 <_ZN22LocalTimePosixTimezoneC1Ev>
   d66c0:	2364      	movs	r3, #100	; 0x64
   d66c2:	65e3      	str	r3, [r4, #92]	; 0x5c
   d66c4:	602c      	str	r4, [r5, #0]
}
   d66c6:	6828      	ldr	r0, [r5, #0]
   d66c8:	bd38      	pop	{r3, r4, r5, pc}
   d66ca:	bf00      	nop
   d66cc:	2003e2f8 	.word	0x2003e2f8
   d66d0:	000dd538 	.word	0x000dd538

000d66d4 <_ZN9LocalTime8tmToTimeEP2tm>:
    return mktime(pTimeInfo);
   d66d4:	f002 bc54 	b.w	d8f80 <mktime>

000d66d8 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   d66d8:	3901      	subs	r1, #1
   d66da:	290b      	cmp	r1, #11
   d66dc:	d815      	bhi.n	d670a <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   d66de:	e8df f001 	tbb	[pc, r1]
   d66e2:	0816      	.short	0x0816
   d66e4:	06160616 	.word	0x06160616
   d66e8:	16061616 	.word	0x16061616
   d66ec:	1606      	.short	0x1606
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   d66ee:	201e      	movs	r0, #30
   d66f0:	4770      	bx	lr
            if ((year % 4) == 0) {
   d66f2:	0783      	lsls	r3, r0, #30
   d66f4:	d10d      	bne.n	d6712 <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   d66f6:	2264      	movs	r2, #100	; 0x64
   d66f8:	fb90 f3f2 	sdiv	r3, r0, r2
   d66fc:	fb02 0013 	mls	r0, r2, r3, r0
   d6700:	2800      	cmp	r0, #0
                    return 29;
   d6702:	bf0c      	ite	eq
   d6704:	201c      	moveq	r0, #28
   d6706:	201d      	movne	r0, #29
   d6708:	4770      	bx	lr
    return 0;
   d670a:	2000      	movs	r0, #0
   d670c:	4770      	bx	lr
            return 31;
   d670e:	201f      	movs	r0, #31
   d6710:	4770      	bx	lr
                return 28;
   d6712:	201c      	movs	r0, #28
}
   d6714:	4770      	bx	lr

000d6716 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d6716:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   d6718:	2301      	movs	r3, #1
   d671a:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   d671c:	f990 3004 	ldrsb.w	r3, [r0, #4]
   d6720:	3b01      	subs	r3, #1
   d6722:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d6724:	2300      	movs	r3, #0
   d6726:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   d672a:	4606      	mov	r6, r0
   d672c:	460c      	mov	r4, r1
   d672e:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   d6730:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   d6732:	4620      	mov	r0, r4
   d6734:	f7ff ffce 	bl	d66d4 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   d6738:	f996 3006 	ldrsb.w	r3, [r6, #6]
   d673c:	69a2      	ldr	r2, [r4, #24]
   d673e:	429a      	cmp	r2, r3
   d6740:	d003      	beq.n	d674a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   d6742:	68e3      	ldr	r3, [r4, #12]
   d6744:	3301      	adds	r3, #1
   d6746:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   d6748:	e7f3      	b.n	d6732 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   d674a:	f996 5005 	ldrsb.w	r5, [r6, #5]
   d674e:	2d01      	cmp	r5, #1
   d6750:	d013      	beq.n	d677a <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   d6752:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d6754:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   d6756:	3d01      	subs	r5, #1
   d6758:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   d675c:	441d      	add	r5, r3
   d675e:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   d6760:	f996 1004 	ldrsb.w	r1, [r6, #4]
   d6764:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6768:	f7ff ffb6 	bl	d66d8 <_ZN9LocalTime14lastDayOfMonthEii>
   d676c:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   d676e:	bfc4      	itt	gt
   d6770:	3d07      	subgt	r5, #7
   d6772:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   d6774:	4620      	mov	r0, r4
   d6776:	f7ff ffad 	bl	d66d4 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   d677a:	4621      	mov	r1, r4
   d677c:	f106 0008 	add.w	r0, r6, #8
   d6780:	f7ff fc46 	bl	d6010 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   d6784:	4638      	mov	r0, r7
   d6786:	f7ff fc50 	bl	d602a <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   d678a:	4620      	mov	r0, r4
}
   d678c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   d6790:	f002 bbf6 	b.w	d8f80 <mktime>

000d6794 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   d6794:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   d6796:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   d679a:	b085      	sub	sp, #20
   d679c:	4604      	mov	r4, r0
    if (!config.isValid()) {
   d679e:	b92b      	cbnz	r3, d67ac <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   d67a0:	f7ff ff80 	bl	d66a4 <_ZN9LocalTime8instanceEv>
   d67a4:	1d01      	adds	r1, r0, #4
   d67a6:	1d20      	adds	r0, r4, #4
   d67a8:	f7ff fae6 	bl	d5d78 <_ZN22LocalTimePosixTimezoneaSERKS_>
    if (config.hasDST()) {
   d67ac:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   d67b0:	2b00      	cmp	r3, #0
   d67b2:	d069      	beq.n	d6888 <_ZN16LocalTimeConvert7convertEv+0xf4>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   d67b4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d67b8:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   d67bc:	4639      	mov	r1, r7
        standardStartTimeInfo = dstStartTimeInfo;
   d67be:	463e      	mov	r6, r7
    localtime_r(&time, pTimeInfo);
   d67c0:	a802      	add	r0, sp, #8
   d67c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d67c6:	f002 fbcb 	bl	d8f60 <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   d67ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d67cc:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d67d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d67d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d67d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d67d6:	6833      	ldr	r3, [r6, #0]
   d67d8:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   d67da:	f104 0130 	add.w	r1, r4, #48	; 0x30
   d67de:	a802      	add	r0, sp, #8
   d67e0:	f7ff fa9e 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d67e4:	aa02      	add	r2, sp, #8
   d67e6:	4639      	mov	r1, r7
   d67e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d67ec:	f7ff ff93 	bl	d6716 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   d67f0:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d67f4:	f104 0118 	add.w	r1, r4, #24
   d67f8:	a802      	add	r0, sp, #8
   d67fa:	f7ff fa91 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d67fe:	aa02      	add	r2, sp, #8
   d6800:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   d6804:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d6808:	f7ff ff85 	bl	d6716 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   d680c:	e9d4 6724 	ldrd	r6, r7, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6810:	460b      	mov	r3, r1
        if (dstStart < standardStart) {
   d6812:	4286      	cmp	r6, r0
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d6814:	4602      	mov	r2, r0
        if (dstStart < standardStart) {
   d6816:	eb77 0103 	sbcs.w	r1, r7, r3
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   d681a:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   d681e:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
   d6822:	da24      	bge.n	d686e <_ZN16LocalTimeConvert7convertEv+0xda>
            if (time < dstStart) {
   d6824:	42b0      	cmp	r0, r6
   d6826:	eb71 0507 	sbcs.w	r5, r1, r7
   d682a:	da19      	bge.n	d6860 <_ZN16LocalTimeConvert7convertEv+0xcc>
                position = Position::BEFORE_DST;
   d682c:	2300      	movs	r3, #0
        position = Position::NO_DST;
   d682e:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   d6830:	6820      	ldr	r0, [r4, #0]
   d6832:	f7ff fa33 	bl	d5c9c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d6836:	f104 0168 	add.w	r1, r4, #104	; 0x68
   d683a:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
   d683e:	9101      	str	r1, [sp, #4]
   d6840:	bb20      	cbnz	r0, d688c <_ZN16LocalTimeConvert7convertEv+0xf8>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   d6842:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d6846:	f7ff fbc7 	bl	d5fd8 <_ZNK12LocalTimeHMS9toSecondsEv>
   d684a:	1a36      	subs	r6, r6, r0
   d684c:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
    localtime_r(&time, pTimeInfo);
   d6850:	9901      	ldr	r1, [sp, #4]
   d6852:	a802      	add	r0, sp, #8
   d6854:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6858:	f002 fb82 	bl	d8f60 <localtime_r>
}
   d685c:	b005      	add	sp, #20
   d685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   d6860:	4290      	cmp	r0, r2
   d6862:	eb71 0303 	sbcs.w	r3, r1, r3
                position = Position::IN_DST;
   d6866:	bfb4      	ite	lt
   d6868:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   d686a:	2302      	movge	r3, #2
   d686c:	e7df      	b.n	d682e <_ZN16LocalTimeConvert7convertEv+0x9a>
            if (time < standardStart) {
   d686e:	4290      	cmp	r0, r2
   d6870:	eb71 0303 	sbcs.w	r3, r1, r3
   d6874:	da01      	bge.n	d687a <_ZN16LocalTimeConvert7convertEv+0xe6>
                position = Position::BEFORE_STANDARD;
   d6876:	2303      	movs	r3, #3
   d6878:	e7d9      	b.n	d682e <_ZN16LocalTimeConvert7convertEv+0x9a>
            else if (time < dstStart) {
   d687a:	42b0      	cmp	r0, r6
   d687c:	eb71 0307 	sbcs.w	r3, r1, r7
                position = Position::IN_STANDARD;
   d6880:	bfb4      	ite	lt
   d6882:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   d6884:	2305      	movge	r3, #5
   d6886:	e7d2      	b.n	d682e <_ZN16LocalTimeConvert7convertEv+0x9a>
        position = Position::NO_DST;
   d6888:	2306      	movs	r3, #6
   d688a:	e7d0      	b.n	d682e <_ZN16LocalTimeConvert7convertEv+0x9a>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   d688c:	f104 0018 	add.w	r0, r4, #24
   d6890:	e7d9      	b.n	d6846 <_ZN16LocalTimeConvert7convertEv+0xb2>

000d6892 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>:
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d6892:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    struct tm mutableTimeInfo = *this;
   d6896:	4604      	mov	r4, r0
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d6898:	460e      	mov	r6, r1
    struct tm mutableTimeInfo = *this;
   d689a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
time_t LocalTimeValue::toUTC(LocalTimePosixTimezone config) const {
   d689c:	b0dc      	sub	sp, #368	; 0x170
    struct tm mutableTimeInfo = *this;
   d689e:	ad01      	add	r5, sp, #4
   d68a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d68a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d68a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d68a6:	6823      	ldr	r3, [r4, #0]
   d68a8:	602b      	str	r3, [r5, #0]
    return mktime(pTimeInfo);
   d68aa:	a801      	add	r0, sp, #4
   d68ac:	f002 fb68 	bl	d8f80 <mktime>
   d68b0:	4604      	mov	r4, r0
    standardTime += config.standardHMS.toSeconds();
   d68b2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    return mktime(pTimeInfo);
   d68b6:	460d      	mov	r5, r1
    standardTime += config.standardHMS.toSeconds();
   d68b8:	f7ff fb8e 	bl	d5fd8 <_ZNK12LocalTimeHMS9toSecondsEv>
    if (config.hasDST()) {
   d68bc:	f996 303b 	ldrsb.w	r3, [r6, #59]	; 0x3b
    standardTime += config.standardHMS.toSeconds();
   d68c0:	eb14 0800 	adds.w	r8, r4, r0
   d68c4:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
    if (config.hasDST()) {
   d68c8:	b31b      	cbz	r3, d6912 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x80>
class LocalTimeConvert {
   d68ca:	2306      	movs	r3, #6
   d68cc:	a821      	add	r0, sp, #132	; 0x84
   d68ce:	9320      	str	r3, [sp, #128]	; 0x80
   d68d0:	f7ff fc7a 	bl	d61c8 <_ZN22LocalTimePosixTimezoneC1Ev>
        convert.withConfig(config).withTime(standardTime).convert();
   d68d4:	4631      	mov	r1, r6
   d68d6:	a80a      	add	r0, sp, #40	; 0x28
   d68d8:	f7ff fd8a 	bl	d63f0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
    LocalTimeConvert &withConfig(LocalTimePosixTimezone config) { this->config = config; return *this; };
   d68dc:	a90a      	add	r1, sp, #40	; 0x28
   d68de:	a821      	add	r0, sp, #132	; 0x84
   d68e0:	f7ff fa4a 	bl	d5d78 <_ZN22LocalTimePosixTimezoneaSERKS_>
   d68e4:	a820      	add	r0, sp, #128	; 0x80
    LocalTimeConvert &withTime(time_t time) { this->time = time; return *this; };
   d68e6:	e9cd 8938 	strd	r8, r9, [sp, #224]	; 0xe0
   d68ea:	f7ff ff53 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
   d68ee:	a80a      	add	r0, sp, #40	; 0x28
   d68f0:	f7ff f9a6 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
        if (convert.isDST()) {
   d68f4:	9820      	ldr	r0, [sp, #128]	; 0x80
   d68f6:	f7ff f9d1 	bl	d5c9c <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   d68fa:	b138      	cbz	r0, d690c <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone+0x7a>
            dstTime += config.dstHMS.toSeconds();
   d68fc:	f106 0014 	add.w	r0, r6, #20
   d6900:	f7ff fb6a 	bl	d5fd8 <_ZNK12LocalTimeHMS9toSecondsEv>
   d6904:	eb14 0800 	adds.w	r8, r4, r0
   d6908:	eb45 79e0 	adc.w	r9, r5, r0, asr #31
class LocalTimeConvert {
   d690c:	a821      	add	r0, sp, #132	; 0x84
   d690e:	f7ff f997 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d6912:	4640      	mov	r0, r8
   d6914:	4649      	mov	r1, r9
   d6916:	b05c      	add	sp, #368	; 0x170
   d6918:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

000d691c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>:
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d691c:	b530      	push	{r4, r5, lr}
    if (!hms.ignore) {
   d691e:	f991 3007 	ldrsb.w	r3, [r1, #7]
void LocalTimeConvert::atLocalTime(LocalTimeHMS hms) {
   d6922:	b097      	sub	sp, #92	; 0x5c
   d6924:	4604      	mov	r4, r0
    if (!hms.ignore) {
   d6926:	b9c3      	cbnz	r3, d695a <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS+0x3e>
        localTimeValue.setHMS(hms);
   d6928:	f100 0568 	add.w	r5, r0, #104	; 0x68
   d692c:	4668      	mov	r0, sp
   d692e:	f7ff f9f7 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d6932:	4669      	mov	r1, sp
   d6934:	4628      	mov	r0, r5
   d6936:	f7ff fd43 	bl	d63c0 <_ZN14LocalTimeValue6setHMSE12LocalTimeHMS>
        time = localTimeValue.toUTC(config);
   d693a:	1d21      	adds	r1, r4, #4
   d693c:	4668      	mov	r0, sp
   d693e:	f7ff fd57 	bl	d63f0 <_ZN22LocalTimePosixTimezoneC1ERKS_>
   d6942:	4669      	mov	r1, sp
   d6944:	4628      	mov	r0, r5
   d6946:	f7ff ffa4 	bl	d6892 <_ZNK14LocalTimeValue5toUTCE22LocalTimePosixTimezone>
   d694a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
   d694e:	4668      	mov	r0, sp
   d6950:	f7ff f976 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
        convert();
   d6954:	4620      	mov	r0, r4
   d6956:	f7ff ff1d 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
}
   d695a:	b017      	add	sp, #92	; 0x5c
   d695c:	bd30      	pop	{r4, r5, pc}
	...

000d6960 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>:
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6960:	b530      	push	{r4, r5, lr}
    time += 86400;
   d6962:	e9d0 3218 	ldrd	r3, r2, [r0, #96]	; 0x60
   d6966:	4d0b      	ldr	r5, [pc, #44]	; (d6994 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS+0x34>)
   d6968:	195b      	adds	r3, r3, r5
   d696a:	f04f 0500 	mov.w	r5, #0
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d696e:	b085      	sub	sp, #20
    time += 86400;
   d6970:	eb45 0202 	adc.w	r2, r5, r2
   d6974:	e9c0 3218 	strd	r3, r2, [r0, #96]	; 0x60
void LocalTimeConvert::nextDay(LocalTimeHMS hms) {
   d6978:	4604      	mov	r4, r0
   d697a:	9101      	str	r1, [sp, #4]
    convert();
   d697c:	f7ff ff0a 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
    atLocalTime(hms);
   d6980:	9901      	ldr	r1, [sp, #4]
   d6982:	a802      	add	r0, sp, #8
   d6984:	f7ff f9cc 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d6988:	a902      	add	r1, sp, #8
   d698a:	4620      	mov	r0, r4
   d698c:	f7ff ffc6 	bl	d691c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
}
   d6990:	b005      	add	sp, #20
   d6992:	bd30      	pop	{r4, r5, pc}
   d6994:	00015180 	.word	0x00015180

000d6998 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>:

// [static]
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d6998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d699c:	b08a      	sub	sp, #40	; 0x28
   d699e:	4617      	mov	r7, r2
   d69a0:	4606      	mov	r6, r0
   d69a2:	460d      	mov	r5, r1
    struct tm timeInfo = {0};
   d69a4:	2224      	movs	r2, #36	; 0x24
   d69a6:	2100      	movs	r1, #0
   d69a8:	a801      	add	r0, sp, #4
int LocalTime::dayOfWeekOfMonth(int year, int month, int dayOfWeek, int ordinal) {
   d69aa:	461c      	mov	r4, r3
    struct tm timeInfo = {0};
   d69ac:	f005 ffc2 	bl	dc934 <memset>

    if (dayOfWeek < 0 || dayOfWeek >= 7) {
   d69b0:	2f06      	cmp	r7, #6
   d69b2:	d829      	bhi.n	d6a08 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        // Invalid values of dayOfWeek can cause infinite loop below
        return 0;
    }

    int lastDay = lastDayOfMonth(year, month);
   d69b4:	4629      	mov	r1, r5
   d69b6:	4630      	mov	r0, r6
   d69b8:	f7ff fe8e 	bl	d66d8 <_ZN9LocalTime14lastDayOfMonthEii>

    if (ordinal > 0) {
   d69bc:	2c00      	cmp	r4, #0
    int lastDay = lastDayOfMonth(year, month);
   d69be:	4680      	mov	r8, r0
    if (ordinal > 0) {
   d69c0:	dd24      	ble.n	d6a0c <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x74>
        timeInfo.tm_year = year - 1900;
   d69c2:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
        timeInfo.tm_mon = month - 1;
   d69c6:	3d01      	subs	r5, #1
        timeInfo.tm_year = year - 1900;
   d69c8:	9606      	str	r6, [sp, #24]
        timeInfo.tm_mon = month - 1;
   d69ca:	9505      	str	r5, [sp, #20]
        timeInfo.tm_mday = 1;
   d69cc:	2301      	movs	r3, #1
        tmToTime(&timeInfo);
   d69ce:	a801      	add	r0, sp, #4
        timeInfo.tm_mday = 1;
   d69d0:	9304      	str	r3, [sp, #16]
        tmToTime(&timeInfo);
   d69d2:	f7ff fe7f 	bl	d66d4 <_ZN9LocalTime8tmToTimeEP2tm>

        while(timeInfo.tm_wday != dayOfWeek) {
   d69d6:	9a07      	ldr	r2, [sp, #28]
   d69d8:	9b04      	ldr	r3, [sp, #16]
   d69da:	42ba      	cmp	r2, r7
   d69dc:	d001      	beq.n	d69e2 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4a>
            timeInfo.tm_mday++;
   d69de:	3301      	adds	r3, #1
   d69e0:	e7f5      	b.n	d69ce <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x36>
   d69e2:	2100      	movs	r1, #0
            tmToTime(&timeInfo);
        }

        for(int loops = 1; loops <= 5; loops++) {
   d69e4:	2201      	movs	r2, #1
            if (loops >= ordinal) {
   d69e6:	4294      	cmp	r4, r2
   d69e8:	d106      	bne.n	d69f8 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x60>
   d69ea:	b101      	cbz	r1, d69ee <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d69ec:	9304      	str	r3, [sp, #16]
            timeInfo.tm_mday--;
            tmToTime(&timeInfo);
        }
        for(int loops = 1; loops <= 5; loops++) {
            if (loops >= -ordinal) {
                return timeInfo.tm_mday;
   d69ee:	9c04      	ldr	r4, [sp, #16]
        }
    }

    
    return 0;
}
   d69f0:	4620      	mov	r0, r4
   d69f2:	b00a      	add	sp, #40	; 0x28
   d69f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            timeInfo.tm_mday += 7;
   d69f8:	3307      	adds	r3, #7
            if (timeInfo.tm_mday > lastDay) {
   d69fa:	4543      	cmp	r3, r8
   d69fc:	dc04      	bgt.n	d6a08 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d69fe:	3201      	adds	r2, #1
   d6a00:	2a06      	cmp	r2, #6
   d6a02:	f04f 0101 	mov.w	r1, #1
   d6a06:	d1ee      	bne.n	d69e6 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x4e>
                return 0;
   d6a08:	2400      	movs	r4, #0
   d6a0a:	e7f1      	b.n	d69f0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
    if (ordinal < 0) {
   d6a0c:	d0f0      	beq.n	d69f0 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x58>
        timeInfo.tm_mon = month - 1;
   d6a0e:	3d01      	subs	r5, #1
        timeInfo.tm_mday = lastDay;
   d6a10:	e9cd 0504 	strd	r0, r5, [sp, #16]
        timeInfo.tm_year = year - 1900;
   d6a14:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
   d6a18:	9606      	str	r6, [sp, #24]
        tmToTime(&timeInfo);
   d6a1a:	a801      	add	r0, sp, #4
   d6a1c:	f7ff fe5a 	bl	d66d4 <_ZN9LocalTime8tmToTimeEP2tm>
        while(timeInfo.tm_wday != dayOfWeek) {
   d6a20:	9b07      	ldr	r3, [sp, #28]
   d6a22:	9904      	ldr	r1, [sp, #16]
   d6a24:	42bb      	cmp	r3, r7
   d6a26:	d002      	beq.n	d6a2e <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x96>
            timeInfo.tm_mday--;
   d6a28:	3901      	subs	r1, #1
   d6a2a:	9104      	str	r1, [sp, #16]
            tmToTime(&timeInfo);
   d6a2c:	e7f5      	b.n	d6a1a <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x82>
   d6a2e:	2000      	movs	r0, #0
        for(int loops = 1; loops <= 5; loops++) {
   d6a30:	2201      	movs	r2, #1
            if (loops >= -ordinal) {
   d6a32:	4264      	negs	r4, r4
   d6a34:	4294      	cmp	r4, r2
   d6a36:	dc03      	bgt.n	d6a40 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0xa8>
   d6a38:	2800      	cmp	r0, #0
   d6a3a:	d0d8      	beq.n	d69ee <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
   d6a3c:	9104      	str	r1, [sp, #16]
   d6a3e:	e7d6      	b.n	d69ee <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x56>
            timeInfo.tm_mday -= 7;
   d6a40:	3907      	subs	r1, #7
            if (timeInfo.tm_mday < 1) {
   d6a42:	2900      	cmp	r1, #0
   d6a44:	dde0      	ble.n	d6a08 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
        for(int loops = 1; loops <= 5; loops++) {
   d6a46:	3201      	adds	r2, #1
   d6a48:	2a06      	cmp	r2, #6
   d6a4a:	f04f 0001 	mov.w	r0, #1
   d6a4e:	d1f1      	bne.n	d6a34 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x9c>
   d6a50:	e7da      	b.n	d6a08 <_ZN9LocalTime16dayOfWeekOfMonthEiiii+0x70>
	...

000d6a54 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d6a54:	e92d 46f0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, lr}
   d6a58:	b0cd      	sub	sp, #308	; 0x134
   d6a5a:	4604      	mov	r4, r0
    LocalTimeConvert tempConv(conv);
   d6a5c:	a810      	add	r0, sp, #64	; 0x40
bool LocalTimeScheduleItem::getNextScheduledTime(LocalTimeConvert &conv) const {
   d6a5e:	460d      	mov	r5, r1
    LocalTimeConvert tempConv(conv);
   d6a60:	f7ff fcfe 	bl	d6460 <_ZN16LocalTimeConvertC1ERKS_>
        ymd.year = ymd.month = ymd.day = 0;
   d6a64:	2300      	movs	r3, #0
        return LocalTimeRestrictedDate::getExpirationDate();
   d6a66:	4620      	mov	r0, r4
        ymd.year = ymd.month = ymd.day = 0;
   d6a68:	9302      	str	r3, [sp, #8]
        return LocalTimeRestrictedDate::getExpirationDate();
   d6a6a:	f7ff fb35 	bl	d60d8 <_ZNK23LocalTimeRestrictedDate17getExpirationDateEv>
    if (expirationDate.isEmpty()) {
   d6a6e:	bb58      	cbnz	r0, d6ac8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x74>
    *this = value.ymd();
   d6a70:	a82a      	add	r0, sp, #168	; 0xa8
   d6a72:	f7ff fcb2 	bl	d63da <_ZNK14LocalTimeValue3ymdEv>
        endYMD = tempConv.getLocalTimeYMD();
   d6a76:	9002      	str	r0, [sp, #8]
        endYMD.addDay(LocalTime::instance().getScheduleLookaheadDays());
   d6a78:	f7ff fe14 	bl	d66a4 <_ZN9LocalTime8instanceEv>
   d6a7c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
   d6a7e:	a802      	add	r0, sp, #8
   d6a80:	f7ff f9f7 	bl	d5e72 <_ZN12LocalTimeYMD6addDayEi>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d6a84:	f8df a20c 	ldr.w	sl, [pc, #524]	; d6c94 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x240>
    *this = value.ymd();
   d6a88:	a82a      	add	r0, sp, #168	; 0xa8
   d6a8a:	f7ff fca6 	bl	d63da <_ZNK14LocalTimeValue3ymdEv>
        return compareTo(other) > 0; 
   d6a8e:	9902      	ldr	r1, [sp, #8]
        LocalTimeYMD curYMD = tempConv.getLocalTimeYMD();
   d6a90:	9003      	str	r0, [sp, #12]
    *this = value.ymd();
   d6a92:	4606      	mov	r6, r0
   d6a94:	a803      	add	r0, sp, #12
   d6a96:	f7ff fa11 	bl	d5ebc <_ZNK12LocalTimeYMD9compareToES_>
        if (curYMD > endYMD) {
   d6a9a:	2800      	cmp	r0, #0
   d6a9c:	f300 80f2 	bgt.w	d6c84 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x230>
        return LocalTimeRestrictedDate::isValid(ymd);
   d6aa0:	4631      	mov	r1, r6
   d6aa2:	4620      	mov	r0, r4
   d6aa4:	f7ff fafd 	bl	d60a2 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
        if (!timeRange.isValidDate(curYMD)) {
   d6aa8:	4607      	mov	r7, r0
   d6aaa:	2800      	cmp	r0, #0
   d6aac:	f000 8094 	beq.w	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
        switch(scheduleItemType) {
   d6ab0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d6ab2:	3b01      	subs	r3, #1
   d6ab4:	2b04      	cmp	r3, #4
   d6ab6:	f200 808f 	bhi.w	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d6aba:	e8df f013 	tbh	[pc, r3, lsl #1]
   d6abe:	0007      	.short	0x0007
   d6ac0:	00960007 	.word	0x00960007
   d6ac4:	00d500b8 	.word	0x00d500b8
        endYMD = expirationDate;
   d6ac8:	9002      	str	r0, [sp, #8]
   d6aca:	e7db      	b.n	d6a84 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x30>
                int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d6acc:	a92a      	add	r1, sp, #168	; 0xa8
   d6ace:	a807      	add	r0, sp, #28
   d6ad0:	f7ff fc58 	bl	d6384 <_ZNK14LocalTimeValue3hmsEv>
   d6ad4:	a907      	add	r1, sp, #28
   d6ad6:	4620      	mov	r0, r4
   d6ad8:	f7ff f937 	bl	d5d4a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                if (cmp < 0) {
   d6adc:	2800      	cmp	r0, #0
   d6ade:	da0d      	bge.n	d6afc <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xa8>
                    tempConv.atLocalTime(timeRange.hmsStart);
   d6ae0:	f104 011c 	add.w	r1, r4, #28
   d6ae4:	a807      	add	r0, sp, #28
   d6ae6:	f7ff f91b 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d6aea:	a907      	add	r1, sp, #28
   d6aec:	a810      	add	r0, sp, #64	; 0x40
   d6aee:	f7ff ff15 	bl	d691c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                        conv.time = tempConv.time;
   d6af2:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6af6:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
   d6afa:	e094      	b.n	d6c26 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1d2>
                if (cmp == 0) {
   d6afc:	d16c      	bne.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    switch(scheduleItemType) {
   d6afe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d6b00:	2b01      	cmp	r3, #1
   d6b02:	d025      	beq.n	d6b50 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xfc>
   d6b04:	2b02      	cmp	r3, #2
   d6b06:	d167      	bne.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d6b08:	f104 011c 	add.w	r1, r4, #28
   d6b0c:	a804      	add	r0, sp, #16
   d6b0e:	f7ff f907 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d6b12:	f104 0924 	add.w	r9, r4, #36	; 0x24
        return compareTo(other) <= 0;
   d6b16:	4649      	mov	r1, r9
   d6b18:	a804      	add	r0, sp, #16
   d6b1a:	f7ff f8e3 	bl	d5ce4 <_ZNK12LocalTimeHMS9compareToERKS_>
   d6b1e:	2800      	cmp	r0, #0
   d6b20:	dc5a      	bgt.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                            tempConv.atLocalTime(tempHMS);
   d6b22:	a904      	add	r1, sp, #16
   d6b24:	a807      	add	r0, sp, #28
   d6b26:	f7ff f8fb 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d6b2a:	a907      	add	r1, sp, #28
   d6b2c:	a810      	add	r0, sp, #64	; 0x40
   d6b2e:	f7ff fef5 	bl	d691c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                            if (tempConv.time > conv.time) {
   d6b32:	e9d5 0118 	ldrd	r0, r1, [r5, #96]	; 0x60
   d6b36:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6b3a:	4290      	cmp	r0, r2
   d6b3c:	eb71 0303 	sbcs.w	r3, r1, r3
   d6b40:	db41      	blt.n	d6bc6 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x172>
                        for(LocalTimeHMS tempHMS = timeRange.hmsStart; tempHMS <= timeRange.hmsEnd; tempHMS.hour += increment) {
   d6b42:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6b46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d6b48:	4413      	add	r3, r2
   d6b4a:	f88d 3014 	strb.w	r3, [sp, #20]
   d6b4e:	e7e2      	b.n	d6b16 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0xc2>
                        startingModulo = timeRange.hmsStart.minute % increment;
   d6b50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   d6b52:	f994 3021 	ldrsb.w	r3, [r4, #33]	; 0x21
   d6b56:	fb93 f6f2 	sdiv	r6, r3, r2
                        tempConv.time += increment * 60;
   d6b5a:	213c      	movs	r1, #60	; 0x3c
   d6b5c:	4351      	muls	r1, r2
                        startingModulo = timeRange.hmsStart.minute % increment;
   d6b5e:	fb02 3616 	mls	r6, r2, r6, r3
                        tempConv.time += increment * 60;
   d6b62:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
   d6b66:	1852      	adds	r2, r2, r1
   d6b68:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
                        tempConv.convert();
   d6b6c:	a810      	add	r0, sp, #64	; 0x40
                        tempConv.time += increment * 60;
   d6b6e:	e9cd 2328 	strd	r2, r3, [sp, #160]	; 0xa0
                        tempConv.convert();
   d6b72:	f7ff fe0f 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
                        LocalTime::timeToTm(tempConv.time, &timeInfo);
   d6b76:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
    localtime_r(&time, pTimeInfo);
   d6b7a:	a907      	add	r1, sp, #28
   d6b7c:	a804      	add	r0, sp, #16
   d6b7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d6b82:	f002 f9ed 	bl	d8f60 <localtime_r>
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d6b86:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   d6b88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d6b8a:	1b9b      	subs	r3, r3, r6
   d6b8c:	fb93 f2f1 	sdiv	r2, r3, r1
   d6b90:	fb01 3312 	mls	r3, r1, r2, r3
   d6b94:	9a08      	ldr	r2, [sp, #32]
    return mktime(pTimeInfo);
   d6b96:	a807      	add	r0, sp, #28
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d6b98:	1ad2      	subs	r2, r2, r3
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d6b9a:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
                        timeInfo.tm_min -= ((tempConv.localTimeValue.minute() - startingModulo) % increment);
   d6b9e:	9208      	str	r2, [sp, #32]
                        timeInfo.tm_sec = timeRange.hmsStart.second;
   d6ba0:	9307      	str	r3, [sp, #28]
    return mktime(pTimeInfo);
   d6ba2:	f002 f9ed 	bl	d8f80 <mktime>
                        tempConv.time = LocalTime::tmToTime(&timeInfo);
   d6ba6:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
                        tempConv.convert();
   d6baa:	a810      	add	r0, sp, #64	; 0x40
   d6bac:	f7ff fdf2 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   d6bb0:	a92a      	add	r1, sp, #168	; 0xa8
   d6bb2:	a804      	add	r0, sp, #16
   d6bb4:	f7ff fbf2 	bl	d639c <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
        return compareTo(other) < 0;
   d6bb8:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d6bbc:	a804      	add	r0, sp, #16
   d6bbe:	f7ff f891 	bl	d5ce4 <_ZNK12LocalTimeHMS9compareToERKS_>
                        if (tempConv.getLocalTimeHMS() < timeRange.hmsEnd) {
   d6bc2:	2800      	cmp	r0, #0
   d6bc4:	da08      	bge.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
    *this = value.ymd();
   d6bc6:	a82a      	add	r0, sp, #168	; 0xa8
   d6bc8:	f7ff fc07 	bl	d63da <_ZNK14LocalTimeValue3ymdEv>
   d6bcc:	4601      	mov	r1, r0
        return LocalTimeRestrictedDate::isValid(ymd);
   d6bce:	4620      	mov	r0, r4
   d6bd0:	f7ff fa67 	bl	d60a2 <_ZNK23LocalTimeRestrictedDate7isValidE12LocalTimeYMD>
                        if (!timeRange.isValidDate(tempConv.getLocalTimeYMD())) {
   d6bd4:	2800      	cmp	r0, #0
   d6bd6:	d18c      	bne.n	d6af2 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x9e>
    for(;; tempConv.nextDay(LocalTimeHMS("00:00:00"))) {
   d6bd8:	4651      	mov	r1, sl
   d6bda:	a807      	add	r0, sp, #28
   d6bdc:	f7ff f9ca 	bl	d5f74 <_ZN12LocalTimeHMSC1EPKc>
   d6be0:	a907      	add	r1, sp, #28
   d6be2:	a810      	add	r0, sp, #64	; 0x40
   d6be4:	f7ff febc 	bl	d6960 <_ZN16LocalTimeConvert7nextDayE12LocalTimeHMS>
    }
   d6be8:	e74e      	b.n	d6a88 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x34>
                int day = LocalTime::dayOfWeekOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month(), dayOfWeek, increment);
   d6bea:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d6bec:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d6bee:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
   d6bf2:	3101      	adds	r1, #1
   d6bf4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6bf8:	f7ff fece 	bl	d6998 <_ZN9LocalTime16dayOfWeekOfMonthEiiii>
                if (day == tempConv.localTimeValue.day()) {
   d6bfc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   d6bfe:	4298      	cmp	r0, r3
   d6c00:	d1ea      	bne.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                        tempConv.atLocalTime(timeRange.hmsStart);
   d6c02:	f104 011c 	add.w	r1, r4, #28
                tempConv.atLocalTime(timeRange.hmsStart);
   d6c06:	a807      	add	r0, sp, #28
   d6c08:	f7ff f88a 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d6c0c:	a907      	add	r1, sp, #28
   d6c0e:	a810      	add	r0, sp, #64	; 0x40
   d6c10:	f7ff fe84 	bl	d691c <_ZN16LocalTimeConvert11atLocalTimeE12LocalTimeHMS>
                if (tempConv.time > conv.time) {
   d6c14:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
   d6c18:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d6c1c:	4282      	cmp	r2, r0
   d6c1e:	418b      	sbcs	r3, r1
   d6c20:	dada      	bge.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    conv.time = tempConv.time;
   d6c22:	e9c5 0118 	strd	r0, r1, [r5, #96]	; 0x60
                        conv.convert();
   d6c26:	4628      	mov	r0, r5
   d6c28:	f7ff fdb4 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
                        return true;
   d6c2c:	e02b      	b.n	d6c86 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x232>
                int tempIncrement = increment;
   d6c2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
                if (tempIncrement < 0) {
   d6c30:	2e00      	cmp	r6, #0
   d6c32:	da08      	bge.n	d6c46 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1f2>
                    tempIncrement = LocalTime::lastDayOfMonth(tempConv.localTimeValue.year(), tempConv.localTimeValue.month()) + tempIncrement + 1;
   d6c34:	992e      	ldr	r1, [sp, #184]	; 0xb8
   d6c36:	982f      	ldr	r0, [sp, #188]	; 0xbc
   d6c38:	3101      	adds	r1, #1
   d6c3a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6c3e:	f7ff fd4b 	bl	d66d8 <_ZN9LocalTime14lastDayOfMonthEii>
   d6c42:	4430      	add	r0, r6
   d6c44:	1c46      	adds	r6, r0, #1
                if (tempConv.localTimeValue.ymd().getDay() == tempIncrement) {
   d6c46:	a82a      	add	r0, sp, #168	; 0xa8
   d6c48:	f7ff fbc7 	bl	d63da <_ZNK14LocalTimeValue3ymdEv>
   d6c4c:	ebb6 6fd0 	cmp.w	r6, r0, lsr #27
   d6c50:	d1c2      	bne.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
                    int cmp = timeRange.compareTo(tempConv.localTimeValue.hms());
   d6c52:	a92a      	add	r1, sp, #168	; 0xa8
   d6c54:	a807      	add	r0, sp, #28
   d6c56:	f7ff fb95 	bl	d6384 <_ZNK14LocalTimeValue3hmsEv>
   d6c5a:	a907      	add	r1, sp, #28
   d6c5c:	4620      	mov	r0, r4
   d6c5e:	f7ff f874 	bl	d5d4a <_ZNK14LocalTimeRange9compareToE12LocalTimeHMS>
                    if (cmp <= 0) {
   d6c62:	2800      	cmp	r0, #0
   d6c64:	dcb8      	bgt.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d6c66:	e7cc      	b.n	d6c02 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1ae>
            if (tempConv.localTimeValue.hms() <= timeRange.hmsStart) {
   d6c68:	a92a      	add	r1, sp, #168	; 0xa8
   d6c6a:	a807      	add	r0, sp, #28
   d6c6c:	f7ff fb8a 	bl	d6384 <_ZNK14LocalTimeValue3hmsEv>
   d6c70:	f104 011c 	add.w	r1, r4, #28
        return compareTo(other) <= 0;
   d6c74:	a807      	add	r0, sp, #28
   d6c76:	9101      	str	r1, [sp, #4]
   d6c78:	f7ff f834 	bl	d5ce4 <_ZNK12LocalTimeHMS9compareToERKS_>
   d6c7c:	2800      	cmp	r0, #0
   d6c7e:	9901      	ldr	r1, [sp, #4]
   d6c80:	dcaa      	bgt.n	d6bd8 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x184>
   d6c82:	e7c0      	b.n	d6c06 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert+0x1b2>
    return false;
   d6c84:	2700      	movs	r7, #0
class LocalTimeConvert {
   d6c86:	a811      	add	r0, sp, #68	; 0x44
   d6c88:	f7fe ffda 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d6c8c:	4638      	mov	r0, r7
   d6c8e:	b04d      	add	sp, #308	; 0x134
   d6c90:	e8bd 86f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, pc}
   d6c94:	000dd4e9 	.word	0x000dd4e9

000d6c98 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d6c9a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6c9c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6c9e:	4668      	mov	r0, sp
   d6ca0:	f7ff f817 	bl	d5cd2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d6ca4:	466a      	mov	r2, sp
   d6ca6:	4629      	mov	r1, r5
   d6ca8:	4620      	mov	r0, r4
   d6caa:	f003 f8c3 	bl	d9e34 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6cae:	a801      	add	r0, sp, #4
   d6cb0:	f7fd ff66 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6cb4:	4620      	mov	r0, r4
   d6cb6:	b003      	add	sp, #12
   d6cb8:	bd30      	pop	{r4, r5, pc}

000d6cba <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6cba:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d6cbc:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6cbe:	4604      	mov	r4, r0
   d6cc0:	4668      	mov	r0, sp
   d6cc2:	f7ff f806 	bl	d5cd2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d6cc6:	466a      	mov	r2, sp
   d6cc8:	4629      	mov	r1, r5
   d6cca:	4620      	mov	r0, r4
   d6ccc:	f003 f88e 	bl	d9dec <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d6cd0:	a801      	add	r0, sp, #4
   d6cd2:	f7fd ff55 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6cd6:	4620      	mov	r0, r4
   d6cd8:	b003      	add	sp, #12
   d6cda:	bd30      	pop	{r4, r5, pc}

000d6cdc <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d6cde:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6ce0:	4604      	mov	r4, r0
   d6ce2:	4668      	mov	r0, sp
   d6ce4:	f7fe fff5 	bl	d5cd2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d6ce8:	466a      	mov	r2, sp
   d6cea:	4629      	mov	r1, r5
   d6cec:	4620      	mov	r0, r4
   d6cee:	f003 f826 	bl	d9d3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d6cf2:	a801      	add	r0, sp, #4
   d6cf4:	f7fd ff44 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6cf8:	4620      	mov	r0, r4
   d6cfa:	b003      	add	sp, #12
   d6cfc:	bd30      	pop	{r4, r5, pc}

000d6cfe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>:
       *  (i.e. capacity() == size() in the new %vector).
       *
       *  The newly-created %vector uses a copy of the allocator object used
       *  by @a __x (unless the allocator traits dictate a different object).
       */
      vector(const vector& __x)
   d6cfe:	b570      	push	{r4, r5, r6, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6d00:	e9d1 3600 	ldrd	r3, r6, [r1]
   d6d04:	1af6      	subs	r6, r6, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6d06:	2300      	movs	r3, #0
   d6d08:	e9c0 3300 	strd	r3, r3, [r0]
      vector(const vector& __x)
   d6d0c:	4604      	mov	r4, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
   d6d0e:	6083      	str	r3, [r0, #8]
	this->_M_impl._M_start = this->_M_allocate(__n);
   d6d10:	10b0      	asrs	r0, r6, #2
      vector(const vector& __x)
   d6d12:	460d      	mov	r5, r1
	this->_M_impl._M_start = this->_M_allocate(__n);
   d6d14:	f7fe ffd0 	bl	d5cb8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d6d18:	e9d5 5300 	ldrd	r5, r3, [r5]
	this->_M_impl._M_finish = this->_M_impl._M_start;
   d6d1c:	e9c4 0000 	strd	r0, r0, [r4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   d6d20:	4406      	add	r6, r0
   d6d22:	60a6      	str	r6, [r4, #8]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   d6d24:	462a      	mov	r2, r5
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
   d6d26:	4601      	mov	r1, r0
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
   d6d28:	4293      	cmp	r3, r2
   d6d2a:	d005      	beq.n	d6d38 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x3a>
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d6d2c:	b109      	cbz	r1, d6d32 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x34>
   d6d2e:	6816      	ldr	r6, [r2, #0]
   d6d30:	600e      	str	r6, [r1, #0]
   d6d32:	3104      	adds	r1, #4
   d6d34:	3204      	adds	r2, #4
   d6d36:	e7f7      	b.n	d6d28 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_+0x2a>
	this->_M_impl._M_finish =
   d6d38:	1b5b      	subs	r3, r3, r5
   d6d3a:	4418      	add	r0, r3
   d6d3c:	6060      	str	r0, [r4, #4]
      }
   d6d3e:	4620      	mov	r0, r4
   d6d40:	bd70      	pop	{r4, r5, r6, pc}

000d6d42 <_ZN23LocalTimeRestrictedDateC1ERKS_>:
class LocalTimeRestrictedDate {
   d6d42:	b538      	push	{r3, r4, r5, lr}
   d6d44:	460d      	mov	r5, r1
   d6d46:	f811 3b04 	ldrb.w	r3, [r1], #4
   d6d4a:	4604      	mov	r4, r0
   d6d4c:	f800 3b04 	strb.w	r3, [r0], #4
   d6d50:	f7ff ffd5 	bl	d6cfe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d6d54:	f105 0110 	add.w	r1, r5, #16
   d6d58:	f104 0010 	add.w	r0, r4, #16
   d6d5c:	f7ff ffcf 	bl	d6cfe <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEC1ERKS2_>
   d6d60:	4620      	mov	r0, r4
   d6d62:	bd38      	pop	{r3, r4, r5, pc}

000d6d64 <_ZN21LocalTimeScheduleItemC1ERKS_>:
class LocalTimeScheduleItem {
   d6d64:	b538      	push	{r3, r4, r5, lr}
   d6d66:	4604      	mov	r4, r0
   d6d68:	460d      	mov	r5, r1
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6d6a:	f7ff ffea 	bl	d6d42 <_ZN23LocalTimeRestrictedDateC1ERKS_>
   d6d6e:	f105 011c 	add.w	r1, r5, #28
   d6d72:	f104 001c 	add.w	r0, r4, #28
   d6d76:	f7fe ffd3 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
   d6d7a:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d6d7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6d82:	f7fe ffcd 	bl	d5d20 <_ZN12LocalTimeHMSC1ERKS_>
class LocalTimeScheduleItem {
   d6d86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   d6d88:	62e3      	str	r3, [r4, #44]	; 0x2c
   d6d8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   d6d8c:	6323      	str	r3, [r4, #48]	; 0x30
   d6d8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   d6d90:	6363      	str	r3, [r4, #52]	; 0x34
   d6d92:	f105 0138 	add.w	r1, r5, #56	; 0x38
   d6d96:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d6d9a:	f004 fc09 	bl	db5b0 <_ZN6StringC1ERKS_>
   d6d9e:	6cab      	ldr	r3, [r5, #72]	; 0x48
   d6da0:	64a3      	str	r3, [r4, #72]	; 0x48
   d6da2:	4620      	mov	r0, r4
   d6da4:	bd38      	pop	{r3, r4, r5, pc}

000d6da6 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv, std::function<bool(LocalTimeScheduleItem &item)> filter) const {
   d6da6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6daa:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6dae:	b0d1      	sub	sp, #324	; 0x144
   d6db0:	4681      	mov	r9, r0
   d6db2:	460c      	mov	r4, r1
   d6db4:	4615      	mov	r5, r2
    time_t closestTime = 0;
   d6db6:	2600      	movs	r6, #0
   d6db8:	2700      	movs	r7, #0
    for(auto it = scheduleItems.begin(); it != scheduleItems.end(); ++it) {
   d6dba:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   d6dbe:	4543      	cmp	r3, r8
   d6dc0:	d029      	beq.n	d6e16 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x70>
        LocalTimeScheduleItem item = *it;
   d6dc2:	4641      	mov	r1, r8
   d6dc4:	a801      	add	r0, sp, #4
   d6dc6:	f7ff ffcd 	bl	d6d64 <_ZN21LocalTimeScheduleItemC1ERKS_>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6dca:	68ab      	ldr	r3, [r5, #8]
   d6dcc:	b90b      	cbnz	r3, d6dd2 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x2c>
	__throw_bad_function_call();
   d6dce:	f005 f909 	bl	dbfe4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6dd2:	68eb      	ldr	r3, [r5, #12]
   d6dd4:	a901      	add	r1, sp, #4
   d6dd6:	4628      	mov	r0, r5
   d6dd8:	4798      	blx	r3
        if (filter(item)) {
   d6dda:	b1b0      	cbz	r0, d6e0a <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x64>
            LocalTimeConvert tmpConvert(conv);
   d6ddc:	4621      	mov	r1, r4
   d6dde:	a814      	add	r0, sp, #80	; 0x50
   d6de0:	f7ff fb3e 	bl	d6460 <_ZN16LocalTimeConvertC1ERKS_>
            bool bResult = item.getNextScheduledTime(tmpConvert);
   d6de4:	a914      	add	r1, sp, #80	; 0x50
   d6de6:	a801      	add	r0, sp, #4
   d6de8:	f7ff fe34 	bl	d6a54 <_ZNK21LocalTimeScheduleItem20getNextScheduledTimeER16LocalTimeConvert>
            if (bResult && closestTime == 0 || tmpConvert.time < closestTime) {
   d6dec:	e9dd 232c 	ldrd	r2, r3, [sp, #176]	; 0xb0
   d6df0:	b110      	cbz	r0, d6df8 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x52>
   d6df2:	ea56 0107 	orrs.w	r1, r6, r7
   d6df6:	d003      	beq.n	d6e00 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5a>
   d6df8:	42b2      	cmp	r2, r6
   d6dfa:	eb73 0107 	sbcs.w	r1, r3, r7
   d6dfe:	da01      	bge.n	d6e04 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x5e>
                closestTime = tmpConvert.time;
   d6e00:	4616      	mov	r6, r2
   d6e02:	461f      	mov	r7, r3
class LocalTimeConvert {
   d6e04:	a815      	add	r0, sp, #84	; 0x54
   d6e06:	f7fe ff1b 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
        LocalTimeScheduleItem item = *it;
   d6e0a:	a801      	add	r0, sp, #4
   d6e0c:	f7ff fb5c 	bl	d64c8 <_ZN21LocalTimeScheduleItemD1Ev>
      operator++() _GLIBCXX_NOEXCEPT
   d6e10:	f108 084c 	add.w	r8, r8, #76	; 0x4c
	return *this;
   d6e14:	e7d1      	b.n	d6dba <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x14>
    if (closestTime != 0) {
   d6e16:	ea56 0307 	orrs.w	r3, r6, r7
   d6e1a:	d008      	beq.n	d6e2e <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x88>
        conv.convert();
   d6e1c:	4620      	mov	r0, r4
        conv.time = closestTime;
   d6e1e:	e9c4 6718 	strd	r6, r7, [r4, #96]	; 0x60
        conv.convert();
   d6e22:	f7ff fcb7 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
        return true;
   d6e26:	2001      	movs	r0, #1
}
   d6e28:	b051      	add	sp, #324	; 0x144
   d6e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return false;
   d6e2e:	2000      	movs	r0, #0
   d6e30:	e7fa      	b.n	d6e28 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE+0x82>
	...

000d6e34 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>:
bool LocalTimeSchedule::getNextScheduledTime(LocalTimeConvert &conv) const {
   d6e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	    _M_invoker = &_My_handler::_M_invoke;
   d6e36:	4b08      	ldr	r3, [pc, #32]	; (d6e58 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x24>)
   d6e38:	9303      	str	r3, [sp, #12]
    return getNextScheduledTime(conv, [](LocalTimeScheduleItem &item) {
   d6e3a:	466a      	mov	r2, sp
	    _M_manager = &_My_handler::_M_manager;
   d6e3c:	4b07      	ldr	r3, [pc, #28]	; (d6e5c <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x28>)
   d6e3e:	9302      	str	r3, [sp, #8]
   d6e40:	f7ff ffb1 	bl	d6da6 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvertSt8functionIFbR21LocalTimeScheduleItemEE>
      if (_M_manager)
   d6e44:	9b02      	ldr	r3, [sp, #8]
   d6e46:	4604      	mov	r4, r0
   d6e48:	b11b      	cbz	r3, d6e52 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert+0x1e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6e4a:	4669      	mov	r1, sp
   d6e4c:	2203      	movs	r2, #3
   d6e4e:	4608      	mov	r0, r1
   d6e50:	4798      	blx	r3
}
   d6e52:	4620      	mov	r0, r4
   d6e54:	b004      	add	sp, #16
   d6e56:	bd10      	pop	{r4, pc}
   d6e58:	000d5c15 	.word	0x000d5c15
   d6e5c:	000d5c19 	.word	0x000d5c19

000d6e60 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>:
bool LocalTimeSchedule::isScheduledTime(LocalTimeConvert &conv, time_t timeNow) {
   d6e60:	b570      	push	{r4, r5, r6, lr}
   d6e62:	4604      	mov	r4, r0
   d6e64:	460d      	mov	r5, r1
   d6e66:	4610      	mov	r0, r2
   d6e68:	4619      	mov	r1, r3
    if (nextTime != 0 && nextTime <= timeNow) {
   d6e6a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d6e6e:	ea52 0603 	orrs.w	r6, r2, r3
   d6e72:	d013      	beq.n	d6e9c <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
   d6e74:	4290      	cmp	r0, r2
   d6e76:	eb71 0303 	sbcs.w	r3, r1, r3
   d6e7a:	db0f      	blt.n	d6e9c <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x3c>
        nextTime = 0;
   d6e7c:	2200      	movs	r2, #0
   d6e7e:	2300      	movs	r3, #0
   d6e80:	e9c4 2306 	strd	r2, r3, [r4, #24]
        result = true;
   d6e84:	2601      	movs	r6, #1
    if (getNextScheduledTime(conv)) {
   d6e86:	4629      	mov	r1, r5
   d6e88:	4620      	mov	r0, r4
   d6e8a:	f7ff ffd3 	bl	d6e34 <_ZNK17LocalTimeSchedule20getNextScheduledTimeER16LocalTimeConvert>
   d6e8e:	b118      	cbz	r0, d6e98 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x38>
        nextTime = conv.time;
   d6e90:	e9d5 2318 	ldrd	r2, r3, [r5, #96]	; 0x60
   d6e94:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
   d6e98:	4630      	mov	r0, r6
   d6e9a:	bd70      	pop	{r4, r5, r6, pc}
    bool result = false;
   d6e9c:	2600      	movs	r6, #0
   d6e9e:	e7f2      	b.n	d6e86 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx+0x26>

000d6ea0 <_ZN17LocalTimeSchedule15isScheduledTimeEv>:
bool LocalTimeSchedule::isScheduledTime() {
   d6ea0:	b530      	push	{r4, r5, lr}
   d6ea2:	b0bd      	sub	sp, #244	; 0xf4
   d6ea4:	4605      	mov	r5, r0
    if (!Time.isValid()) {
   d6ea6:	f004 fd8d 	bl	db9c4 <_ZN9TimeClass7isValidEv>
   d6eaa:	4604      	mov	r4, r0
   d6eac:	b1c0      	cbz	r0, d6ee0 <_ZN17LocalTimeSchedule15isScheduledTimeEv+0x40>
   d6eae:	2306      	movs	r3, #6
   d6eb0:	a801      	add	r0, sp, #4
   d6eb2:	9300      	str	r3, [sp, #0]
   d6eb4:	f7ff f988 	bl	d61c8 <_ZN22LocalTimePosixTimezoneC1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   d6eb8:	f004 fda1 	bl	db9fe <_ZN9TimeClass3nowEv>
   d6ebc:	17c1      	asrs	r1, r0, #31
   d6ebe:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
    conv.withCurrentTime().convert();
   d6ec2:	4668      	mov	r0, sp
   d6ec4:	f7ff fc66 	bl	d6794 <_ZN16LocalTimeConvert7convertEv>
    return isScheduledTime(conv, Time.now());
   d6ec8:	f004 fd99 	bl	db9fe <_ZN9TimeClass3nowEv>
   d6ecc:	4669      	mov	r1, sp
   d6ece:	4602      	mov	r2, r0
   d6ed0:	17c3      	asrs	r3, r0, #31
   d6ed2:	4628      	mov	r0, r5
   d6ed4:	f7ff ffc4 	bl	d6e60 <_ZN17LocalTimeSchedule15isScheduledTimeER16LocalTimeConvertx>
   d6ed8:	4604      	mov	r4, r0
class LocalTimeConvert {
   d6eda:	a801      	add	r0, sp, #4
   d6edc:	f7fe feb0 	bl	d5c40 <_ZN22LocalTimePosixTimezoneD1Ev>
}
   d6ee0:	4620      	mov	r0, r4
   d6ee2:	b03d      	add	sp, #244	; 0xf4
   d6ee4:	bd30      	pop	{r4, r5, pc}

000d6ee6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>:
  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
   d6ee6:	4281      	cmp	r1, r0
    vector<_Tp, _Alloc>::
   d6ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6eec:	4604      	mov	r4, r0
   d6eee:	460e      	mov	r6, r1
      if (&__x != this)
   d6ef0:	d022      	beq.n	d6f38 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x52>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6ef2:	e9d1 5800 	ldrd	r5, r8, [r1]
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
   d6ef6:	6800      	ldr	r0, [r0, #0]
   d6ef8:	68a3      	ldr	r3, [r4, #8]
   d6efa:	1a1b      	subs	r3, r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6efc:	eba8 0705 	sub.w	r7, r8, r5
			 - this->_M_impl._M_start); }
   d6f00:	109b      	asrs	r3, r3, #2
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
   d6f02:	ebb3 0fa7 	cmp.w	r3, r7, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6f06:	ea4f 01a7 	mov.w	r1, r7, asr #2
   d6f0a:	d218      	bcs.n	d6f3e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x58>
      template<typename _ForwardIterator>
	pointer
	_M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
	{
	  pointer __result = this->_M_allocate(__n);
   d6f0c:	4608      	mov	r0, r1
   d6f0e:	f7fe fed3 	bl	d5cb8 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE11_M_allocateEj.isra.0>
   d6f12:	4606      	mov	r6, r0
	  _ForwardIterator __cur = __result;
   d6f14:	4603      	mov	r3, r0
	      for (; __first != __last; ++__first, (void)++__cur)
   d6f16:	45a8      	cmp	r8, r5
   d6f18:	d005      	beq.n	d6f26 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x40>
   d6f1a:	b10b      	cbz	r3, d6f20 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x3a>
   d6f1c:	682a      	ldr	r2, [r5, #0]
   d6f1e:	601a      	str	r2, [r3, #0]
   d6f20:	3304      	adds	r3, #4
   d6f22:	3504      	adds	r5, #4
   d6f24:	e7f7      	b.n	d6f16 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x30>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
   d6f26:	6820      	ldr	r0, [r4, #0]
   d6f28:	f7fe fec2 	bl	d5cb0 <_ZNSt12_Vector_baseI12LocalTimeYMDSaIS0_EE13_M_deallocateEPS0_j.isra.0>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
   d6f2c:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
   d6f2e:	443e      	add	r6, r7
   d6f30:	60a6      	str	r6, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
   d6f32:	6823      	ldr	r3, [r4, #0]
   d6f34:	441f      	add	r7, r3
   d6f36:	6067      	str	r7, [r4, #4]
	}
      return *this;
    }
   d6f38:	4620      	mov	r0, r4
   d6f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6f3e:	6862      	ldr	r2, [r4, #4]
   d6f40:	1a12      	subs	r2, r2, r0
	  else if (size() >= __xlen)
   d6f42:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   d6f46:	d806      	bhi.n	d6f56 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x70>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d6f48:	45a8      	cmp	r8, r5
   d6f4a:	d0f2      	beq.n	d6f32 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6f4c:	463a      	mov	r2, r7
   d6f4e:	4629      	mov	r1, r5
   d6f50:	f005 fcd6 	bl	dc900 <memmove>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   d6f54:	e7ed      	b.n	d6f32 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
	  if (_Num)
   d6f56:	b112      	cbz	r2, d6f5e <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d6f58:	4629      	mov	r1, r5
   d6f5a:	f005 fcd1 	bl	dc900 <memmove>
   d6f5e:	e9d4 3200 	ldrd	r3, r2, [r4]
   d6f62:	1ad1      	subs	r1, r2, r3
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
   d6f64:	6833      	ldr	r3, [r6, #0]
   d6f66:	440b      	add	r3, r1
					  __x._M_impl._M_finish,
   d6f68:	6871      	ldr	r1, [r6, #4]
   d6f6a:	4299      	cmp	r1, r3
   d6f6c:	d0e1      	beq.n	d6f32 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x4c>
   d6f6e:	b10a      	cbz	r2, d6f74 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x8e>
   d6f70:	6818      	ldr	r0, [r3, #0]
   d6f72:	6010      	str	r0, [r2, #0]
   d6f74:	3304      	adds	r3, #4
   d6f76:	3204      	adds	r2, #4
   d6f78:	e7f7      	b.n	d6f6a <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_+0x84>

000d6f7a <_ZN14LocalTimeRangeaSERKS_>:
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6f7a:	b538      	push	{r3, r4, r5, lr}
   d6f7c:	460d      	mov	r5, r1
class LocalTimeRestrictedDate {
   d6f7e:	f811 3b04 	ldrb.w	r3, [r1], #4
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6f82:	4604      	mov	r4, r0
class LocalTimeRestrictedDate {
   d6f84:	f800 3b04 	strb.w	r3, [r0], #4
   d6f88:	f7ff ffad 	bl	d6ee6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
   d6f8c:	f105 0110 	add.w	r1, r5, #16
   d6f90:	f104 0010 	add.w	r0, r4, #16
   d6f94:	f7ff ffa7 	bl	d6ee6 <_ZNSt6vectorI12LocalTimeYMDSaIS0_EEaSERKS2_>
class LocalTimeRange : public LocalTimeRestrictedDate {
   d6f98:	f105 011c 	add.w	r1, r5, #28
   d6f9c:	f104 001c 	add.w	r0, r4, #28
   d6fa0:	f7fe fec6 	bl	d5d30 <_ZN12LocalTimeHMSaSERKS_>
   d6fa4:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d6fa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6fac:	f7fe fec0 	bl	d5d30 <_ZN12LocalTimeHMSaSERKS_>
   d6fb0:	4620      	mov	r0, r4
   d6fb2:	bd38      	pop	{r3, r4, r5, pc}

000d6fb4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d6fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fb8:	e9d0 6900 	ldrd	r6, r9, [r0]
   d6fbc:	4d3b      	ldr	r5, [pc, #236]	; (d70ac <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   d6fbe:	4b3c      	ldr	r3, [pc, #240]	; (d70b0 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d6fc0:	eba9 0406 	sub.w	r4, r9, r6
   d6fc4:	10a4      	asrs	r4, r4, #2
   d6fc6:	436c      	muls	r4, r5
	if (max_size() - size() < __n)
   d6fc8:	429c      	cmp	r4, r3
   d6fca:	468a      	mov	sl, r1
   d6fcc:	4607      	mov	r7, r0
   d6fce:	4611      	mov	r1, r2
   d6fd0:	46a8      	mov	r8, r5
   d6fd2:	d102      	bne.n	d6fda <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   d6fd4:	4837      	ldr	r0, [pc, #220]	; (d70b4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x100>)
   d6fd6:	f005 f802 	bl	dbfde <_ZSt20__throw_length_errorPKc>
   d6fda:	2c01      	cmp	r4, #1
   d6fdc:	4622      	mov	r2, r4
   d6fde:	bf38      	it	cc
   d6fe0:	2201      	movcc	r2, #1
   d6fe2:	18a4      	adds	r4, r4, r2
   d6fe4:	ebaa 0506 	sub.w	r5, sl, r6

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d6fe8:	d25d      	bcs.n	d70a6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf2>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d6fea:	b154      	cbz	r4, d7002 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4e>
   d6fec:	429c      	cmp	r4, r3
   d6fee:	bf28      	it	cs
   d6ff0:	461c      	movcs	r4, r3
   d6ff2:	204c      	movs	r0, #76	; 0x4c
   d6ff4:	4360      	muls	r0, r4
   d6ff6:	9100      	str	r1, [sp, #0]
   d6ff8:	f7fd f84d 	bl	d4096 <_Znwj>
   d6ffc:	9900      	ldr	r1, [sp, #0]
   d6ffe:	4683      	mov	fp, r0
   d7000:	e000      	b.n	d7004 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x50>
   d7002:	46a3      	mov	fp, r4
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7004:	eb1b 0005 	adds.w	r0, fp, r5
   d7008:	d001      	beq.n	d700e <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5a>
   d700a:	f7ff feab 	bl	d6d64 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d700e:	465b      	mov	r3, fp
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d7010:	4631      	mov	r1, r6
   d7012:	458a      	cmp	sl, r1
   d7014:	d00a      	beq.n	d702c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
   d7016:	b133      	cbz	r3, d7026 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x72>
   d7018:	4618      	mov	r0, r3
   d701a:	9101      	str	r1, [sp, #4]
   d701c:	9300      	str	r3, [sp, #0]
   d701e:	f7ff fea1 	bl	d6d64 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7022:	e9dd 3100 	ldrd	r3, r1, [sp]
   d7026:	314c      	adds	r1, #76	; 0x4c
   d7028:	334c      	adds	r3, #76	; 0x4c
   d702a:	e7f2      	b.n	d7012 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x5e>
   d702c:	08ad      	lsrs	r5, r5, #2
   d702e:	fb08 fa05 	mul.w	sl, r8, r5
   d7032:	f02a 4540 	bic.w	r5, sl, #3221225472	; 0xc0000000
   d7036:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
   d703a:	fb0a fa05 	mul.w	sl, sl, r5
   d703e:	eb06 050a 	add.w	r5, r6, sl
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
		 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   d7042:	f10a 0a4c 	add.w	sl, sl, #76	; 0x4c
   d7046:	44da      	add	sl, fp
	  _ForwardIterator __cur = __result;
   d7048:	4653      	mov	r3, sl
   d704a:	4629      	mov	r1, r5
	      for (; __first != __last; ++__first, (void)++__cur)
   d704c:	4549      	cmp	r1, r9
   d704e:	d113      	bne.n	d7078 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
   d7050:	eba9 0505 	sub.w	r5, r9, r5
   d7054:	08ad      	lsrs	r5, r5, #2
   d7056:	fb08 f505 	mul.w	r5, r8, r5
   d705a:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
   d705e:	f04f 084c 	mov.w	r8, #76	; 0x4c
   d7062:	fb08 a505 	mla	r5, r8, r5, sl
   d7066:	46b0      	mov	r8, r6
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
   d7068:	45c8      	cmp	r8, r9
   d706a:	d00f      	beq.n	d708c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
    { __pointer->~_Tp(); }
   d706c:	4640      	mov	r0, r8
   d706e:	f7ff fa2b 	bl	d64c8 <_ZN21LocalTimeScheduleItemD1Ev>
	  for (; __first != __last; ++__first)
   d7072:	f108 084c 	add.w	r8, r8, #76	; 0x4c
   d7076:	e7f7      	b.n	d7068 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
   d7078:	4618      	mov	r0, r3
   d707a:	9101      	str	r1, [sp, #4]
   d707c:	9300      	str	r3, [sp, #0]
   d707e:	f7ff fe71 	bl	d6d64 <_ZN21LocalTimeScheduleItemC1ERKS_>
   d7082:	9901      	ldr	r1, [sp, #4]
   d7084:	9b00      	ldr	r3, [sp, #0]
   d7086:	314c      	adds	r1, #76	; 0x4c
   d7088:	334c      	adds	r3, #76	; 0x4c
   d708a:	e7df      	b.n	d704c <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
	if (__p)
   d708c:	b116      	cbz	r6, d7094 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe0>
	::operator delete(__p);
   d708e:	4630      	mov	r0, r6
   d7090:	f7fd f805 	bl	d409e <_ZdlPv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d7094:	204c      	movs	r0, #76	; 0x4c
   d7096:	fb00 b404 	mla	r4, r0, r4, fp
      this->_M_impl._M_finish = __new_finish;
   d709a:	e9c7 b500 	strd	fp, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   d709e:	60bc      	str	r4, [r7, #8]
    }
   d70a0:	b003      	add	sp, #12
   d70a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d70a6:	461c      	mov	r4, r3
   d70a8:	e7a3      	b.n	d6ff2 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
   d70aa:	bf00      	nop
   d70ac:	286bca1b 	.word	0x286bca1b
   d70b0:	01af286b 	.word	0x01af286b
   d70b4:	000dd514 	.word	0x000dd514

000d70b8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   d70b8:	b538      	push	{r3, r4, r5, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d70ba:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
   d70be:	42ab      	cmp	r3, r5
      push_back(const value_type& __x)
   d70c0:	4604      	mov	r4, r0
   d70c2:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d70c4:	d007      	beq.n	d70d6 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1e>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d70c6:	b113      	cbz	r3, d70ce <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x16>
   d70c8:	4618      	mov	r0, r3
   d70ca:	f7ff fe4b 	bl	d6d64 <_ZN21LocalTimeScheduleItemC1ERKS_>
	    ++this->_M_impl._M_finish;
   d70ce:	6863      	ldr	r3, [r4, #4]
   d70d0:	334c      	adds	r3, #76	; 0x4c
   d70d2:	6063      	str	r3, [r4, #4]
      }
   d70d4:	bd38      	pop	{r3, r4, r5, pc}
	  _M_realloc_insert(end(), __x);
   d70d6:	4619      	mov	r1, r3
   d70d8:	f7ff ff6c 	bl	d6fb4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   d70dc:	e7fa      	b.n	d70d4 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_+0x1c>

000d70de <_ZN17LocalTimeSchedule16withMinuteOfHourEi14LocalTimeRange>:
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d70de:	b530      	push	{r4, r5, lr}
   d70e0:	b097      	sub	sp, #92	; 0x5c
   d70e2:	4604      	mov	r4, r0
    LocalTimeScheduleItem item;
   d70e4:	a803      	add	r0, sp, #12
LocalTimeSchedule &LocalTimeSchedule::withMinuteOfHour(int increment, LocalTimeRange timeRange) {
   d70e6:	9201      	str	r2, [sp, #4]
   d70e8:	460d      	mov	r5, r1
    LocalTimeScheduleItem item;
   d70ea:	f7fe ff4f 	bl	d5f8c <_ZN21LocalTimeScheduleItemC1Ev>
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d70ee:	2301      	movs	r3, #1
    item.timeRange = timeRange;
   d70f0:	9901      	ldr	r1, [sp, #4]
    item.scheduleItemType = LocalTimeScheduleItem::ScheduleItemType::MINUTE_OF_HOUR;
   d70f2:	9315      	str	r3, [sp, #84]	; 0x54
    item.timeRange = timeRange;
   d70f4:	a803      	add	r0, sp, #12
    item.increment = increment;
   d70f6:	950e      	str	r5, [sp, #56]	; 0x38
    item.timeRange = timeRange;
   d70f8:	f7ff ff3f 	bl	d6f7a <_ZN14LocalTimeRangeaSERKS_>
    scheduleItems.push_back(item);
   d70fc:	a903      	add	r1, sp, #12
   d70fe:	f104 0020 	add.w	r0, r4, #32
   d7102:	f7ff ffd9 	bl	d70b8 <_ZNSt6vectorI21LocalTimeScheduleItemSaIS0_EE9push_backERKS0_>
    LocalTimeScheduleItem item;
   d7106:	a803      	add	r0, sp, #12
   d7108:	f7ff f9de 	bl	d64c8 <_ZN21LocalTimeScheduleItemD1Ev>
}
   d710c:	4620      	mov	r0, r4
   d710e:	b017      	add	sp, #92	; 0x5c
   d7110:	bd30      	pop	{r4, r5, pc}

000d7112 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d7112:	4770      	bx	lr

000d7114 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d7114:	b510      	push	{r4, lr}
}
   d7116:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d7118:	4604      	mov	r4, r0
}
   d711a:	f004 ff57 	bl	dbfcc <_ZdlPvj>
   d711e:	4620      	mov	r0, r4
   d7120:	bd10      	pop	{r4, pc}

000d7122 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d7122:	6803      	ldr	r3, [r0, #0]
   d7124:	b2c9      	uxtb	r1, r1
   d7126:	689b      	ldr	r3, [r3, #8]
   d7128:	4718      	bx	r3
	...

000d712c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d712c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d712e:	4d03      	ldr	r5, [pc, #12]	; (d713c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d7130:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d7134:	e9c0 5100 	strd	r5, r1, [r0]
}
   d7138:	bd30      	pop	{r4, r5, pc}
   d713a:	bf00      	nop
   d713c:	000dd5a4 	.word	0x000dd5a4

000d7140 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d7140:	6840      	ldr	r0, [r0, #4]
   d7142:	f002 bc79 	b.w	d9a38 <_ZN7TwoWire5beginEv>

000d7146 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7146:	b510      	push	{r4, lr}
   d7148:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d714a:	6800      	ldr	r0, [r0, #0]
   d714c:	f002 fccf 	bl	d9aee <_ZN7TwoWire6unlockEv>
   d7150:	4620      	mov	r0, r4
   d7152:	bd10      	pop	{r4, pc}

000d7154 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d7154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7158:	b08a      	sub	sp, #40	; 0x28
   d715a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d715c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d715e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7160:	f002 fcbc 	bl	d9adc <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d7164:	221e      	movs	r2, #30
   d7166:	2100      	movs	r1, #0
   d7168:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d716a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d716c:	f005 fbe2 	bl	dc934 <memset>
		size_t framAddr = 0;
   d7170:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d7172:	b1ef      	cbz	r7, d71b0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d7174:	6823      	ldr	r3, [r4, #0]
   d7176:	2f1e      	cmp	r7, #30
   d7178:	46b8      	mov	r8, r7
   d717a:	bf28      	it	cs
   d717c:	f04f 081e 	movcs.w	r8, #30
   d7180:	68dd      	ldr	r5, [r3, #12]
   d7182:	aa02      	add	r2, sp, #8
   d7184:	4643      	mov	r3, r8
   d7186:	4631      	mov	r1, r6
   d7188:	4620      	mov	r0, r4
   d718a:	47a8      	blx	r5
			if (!result) {
   d718c:	4605      	mov	r5, r0
   d718e:	b958      	cbnz	r0, d71a8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d7190:	480a      	ldr	r0, [pc, #40]	; (d71bc <_ZN6MB85RC5eraseEv+0x68>)
   d7192:	490b      	ldr	r1, [pc, #44]	; (d71c0 <_ZN6MB85RC5eraseEv+0x6c>)
   d7194:	4632      	mov	r2, r6
   d7196:	f7fc ffe5 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d719a:	a801      	add	r0, sp, #4
   d719c:	f7ff ffd3 	bl	d7146 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d71a0:	4628      	mov	r0, r5
   d71a2:	b00a      	add	sp, #40	; 0x28
   d71a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d71a8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d71ac:	4446      	add	r6, r8
		while(totalLen > 0) {
   d71ae:	e7e0      	b.n	d7172 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d71b0:	a801      	add	r0, sp, #4
   d71b2:	f7ff ffc8 	bl	d7146 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d71b6:	2501      	movs	r5, #1
   d71b8:	e7f2      	b.n	d71a0 <_ZN6MB85RC5eraseEv+0x4c>
   d71ba:	bf00      	nop
   d71bc:	2003e570 	.word	0x2003e570
   d71c0:	000dd570 	.word	0x000dd570

000d71c4 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d71c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d71c8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d71ca:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d71cc:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d71ce:	460d      	mov	r5, r1
   d71d0:	4616      	mov	r6, r2
   d71d2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d71d4:	f002 fc82 	bl	d9adc <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d71d8:	b1a7      	cbz	r7, d7204 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d71da:	68e1      	ldr	r1, [r4, #12]
   d71dc:	6860      	ldr	r0, [r4, #4]
   d71de:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d71e2:	f002 fc5c 	bl	d9a9e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d71e6:	0a29      	lsrs	r1, r5, #8
   d71e8:	6860      	ldr	r0, [r4, #4]
   d71ea:	f7ff ff9a 	bl	d7122 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d71ee:	4629      	mov	r1, r5
   d71f0:	6860      	ldr	r0, [r4, #4]
   d71f2:	f7ff ff96 	bl	d7122 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d71f6:	6860      	ldr	r0, [r4, #4]
   d71f8:	2100      	movs	r1, #0
   d71fa:	f002 fc6b 	bl	d9ad4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d71fe:	b148      	cbz	r0, d7214 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d7200:	2400      	movs	r4, #0
   d7202:	e000      	b.n	d7206 <_ZN6MB85RC8readDataEjPhj+0x42>
   d7204:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7206:	a801      	add	r0, sp, #4
   d7208:	f7ff ff9d 	bl	d7146 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d720c:	4620      	mov	r0, r4
   d720e:	b003      	add	sp, #12
   d7210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d7214:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d7216:	7b21      	ldrb	r1, [r4, #12]
   d7218:	6860      	ldr	r0, [r4, #4]
   d721a:	46b8      	mov	r8, r7
   d721c:	bf28      	it	cs
   d721e:	f04f 0820 	movcs.w	r8, #32
   d7222:	2301      	movs	r3, #1
   d7224:	4642      	mov	r2, r8
   d7226:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d722a:	f002 fc22 	bl	d9a72 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d722e:	f004 fe85 	bl	dbf3c <_Z19__fetch_global_Wirev>
   d7232:	6803      	ldr	r3, [r0, #0]
   d7234:	691b      	ldr	r3, [r3, #16]
   d7236:	4798      	blx	r3
   d7238:	4540      	cmp	r0, r8
   d723a:	dbe1      	blt.n	d7200 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d723c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d7240:	f004 fe7c 	bl	dbf3c <_Z19__fetch_global_Wirev>
   d7244:	6803      	ldr	r3, [r0, #0]
   d7246:	695b      	ldr	r3, [r3, #20]
   d7248:	4798      	blx	r3
   d724a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d724e:	454e      	cmp	r6, r9
   d7250:	d1f6      	bne.n	d7240 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d7252:	4445      	add	r5, r8
   d7254:	eba7 0708 	sub.w	r7, r7, r8
   d7258:	e7be      	b.n	d71d8 <_ZN6MB85RC8readDataEjPhj+0x14>

000d725a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d725a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d725e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d7260:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7262:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d7264:	460e      	mov	r6, r1
   d7266:	4690      	mov	r8, r2
   d7268:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d726a:	f002 fc37 	bl	d9adc <_ZN7TwoWire4lockEv>
   d726e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d7272:	f1b9 0f00 	cmp.w	r9, #0
   d7276:	d02a      	beq.n	d72ce <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d7278:	b34d      	cbz	r5, d72ce <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d727a:	68e1      	ldr	r1, [r4, #12]
   d727c:	6860      	ldr	r0, [r4, #4]
   d727e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d7282:	f002 fc0c 	bl	d9a9e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d7286:	0a31      	lsrs	r1, r6, #8
   d7288:	6860      	ldr	r0, [r4, #4]
   d728a:	f7ff ff4a 	bl	d7122 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d728e:	6860      	ldr	r0, [r4, #4]
   d7290:	4631      	mov	r1, r6
   d7292:	f7ff ff46 	bl	d7122 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d7296:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d729a:	4647      	mov	r7, r8
   d729c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d72a0:	6860      	ldr	r0, [r4, #4]
   d72a2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d72a6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d72a8:	3d01      	subs	r5, #1
				wire.write(*data);
   d72aa:	689b      	ldr	r3, [r3, #8]
   d72ac:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d72ae:	4555      	cmp	r5, sl
   d72b0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d72b4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d72b6:	d001      	beq.n	d72bc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d72b8:	2d00      	cmp	r5, #0
   d72ba:	d1f1      	bne.n	d72a0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d72bc:	6860      	ldr	r0, [r4, #4]
   d72be:	2101      	movs	r1, #1
   d72c0:	f002 fc08 	bl	d9ad4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d72c4:	2800      	cmp	r0, #0
   d72c6:	d0d7      	beq.n	d7278 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d72c8:	f04f 0900 	mov.w	r9, #0
   d72cc:	e7d1      	b.n	d7272 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d72ce:	a801      	add	r0, sp, #4
   d72d0:	f7ff ff39 	bl	d7146 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d72d4:	4648      	mov	r0, r9
   d72d6:	b003      	add	sp, #12
   d72d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d72dc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d72dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72e0:	b08b      	sub	sp, #44	; 0x2c
   d72e2:	460e      	mov	r6, r1
   d72e4:	4615      	mov	r5, r2
   d72e6:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d72e8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72ea:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d72ec:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d72ee:	f002 fbf5 	bl	d9adc <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d72f2:	42ae      	cmp	r6, r5
   d72f4:	d229      	bcs.n	d734a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d72f6:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d72f8:	4425      	add	r5, r4
			while(numBytes > 0) {
   d72fa:	b18c      	cbz	r4, d7320 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d72fc:	2c1e      	cmp	r4, #30
   d72fe:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d7300:	f8d8 3000 	ldr.w	r3, [r8]
   d7304:	bf28      	it	cs
   d7306:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d7308:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d730a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d730e:	aa02      	add	r2, sp, #8
   d7310:	463b      	mov	r3, r7
   d7312:	4631      	mov	r1, r6
   d7314:	4640      	mov	r0, r8
				framAddrTo -= count;
   d7316:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d7318:	47c8      	blx	r9
				if (!result) {
   d731a:	b948      	cbnz	r0, d7330 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d731c:	2400      	movs	r4, #0
   d731e:	e000      	b.n	d7322 <_ZN6MB85RC8moveDataEjjj+0x46>
   d7320:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d7322:	a801      	add	r0, sp, #4
   d7324:	f7ff ff0f 	bl	d7146 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d7328:	4620      	mov	r0, r4
   d732a:	b00b      	add	sp, #44	; 0x2c
   d732c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d7330:	f8d8 3000 	ldr.w	r3, [r8]
   d7334:	aa02      	add	r2, sp, #8
   d7336:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d733a:	4629      	mov	r1, r5
   d733c:	463b      	mov	r3, r7
   d733e:	4640      	mov	r0, r8
   d7340:	47c8      	blx	r9
				if (!result) {
   d7342:	2800      	cmp	r0, #0
   d7344:	d0ea      	beq.n	d731c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d7346:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d7348:	e7d7      	b.n	d72fa <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d734a:	d9e9      	bls.n	d7320 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d734c:	2c00      	cmp	r4, #0
   d734e:	d0e7      	beq.n	d7320 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d7350:	f8d8 3000 	ldr.w	r3, [r8]
   d7354:	2c1e      	cmp	r4, #30
   d7356:	4627      	mov	r7, r4
   d7358:	bf28      	it	cs
   d735a:	271e      	movcs	r7, #30
   d735c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d7360:	aa02      	add	r2, sp, #8
   d7362:	463b      	mov	r3, r7
   d7364:	4631      	mov	r1, r6
   d7366:	4640      	mov	r0, r8
   d7368:	47c8      	blx	r9
				if (!result) {
   d736a:	2800      	cmp	r0, #0
   d736c:	d0d6      	beq.n	d731c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d736e:	f8d8 3000 	ldr.w	r3, [r8]
   d7372:	aa02      	add	r2, sp, #8
   d7374:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d7378:	4629      	mov	r1, r5
   d737a:	463b      	mov	r3, r7
   d737c:	4640      	mov	r0, r8
   d737e:	47c8      	blx	r9
				if (!result) {
   d7380:	2800      	cmp	r0, #0
   d7382:	d0cb      	beq.n	d731c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d7384:	443e      	add	r6, r7
				framAddrTo += count;
   d7386:	443d      	add	r5, r7
				numBytes -= count;
   d7388:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d738a:	e7df      	b.n	d734c <_ZN6MB85RC8moveDataEjjj+0x70>

000d738c <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d738c:	6001      	str	r1, [r0, #0]
   d738e:	7102      	strb	r2, [r0, #4]
{
}
   d7390:	4770      	bx	lr

000d7392 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d7392:	6800      	ldr	r0, [r0, #0]
   d7394:	6803      	ldr	r3, [r0, #0]
   d7396:	68db      	ldr	r3, [r3, #12]
   d7398:	4718      	bx	r3

000d739a <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d739a:	6800      	ldr	r0, [r0, #0]
   d739c:	6803      	ldr	r3, [r0, #0]
   d739e:	6a1b      	ldr	r3, [r3, #32]
   d73a0:	4718      	bx	r3

000d73a2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d73a2:	6800      	ldr	r0, [r0, #0]
   d73a4:	6803      	ldr	r3, [r0, #0]
   d73a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d73a8:	4718      	bx	r3

000d73aa <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d73aa:	6800      	ldr	r0, [r0, #0]
   d73ac:	6803      	ldr	r3, [r0, #0]
   d73ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d73b0:	4718      	bx	r3

000d73b2 <_ZN10RHDatagram6sendtoEPhhh>:
{
   d73b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73b4:	4605      	mov	r5, r0
   d73b6:	460c      	mov	r4, r1
    setHeaderTo(address);
   d73b8:	4619      	mov	r1, r3
{
   d73ba:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d73bc:	f7ff fff5 	bl	d73aa <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d73c0:	6828      	ldr	r0, [r5, #0]
   d73c2:	9a01      	ldr	r2, [sp, #4]
   d73c4:	6803      	ldr	r3, [r0, #0]
   d73c6:	695b      	ldr	r3, [r3, #20]
   d73c8:	4621      	mov	r1, r4
}
   d73ca:	b003      	add	sp, #12
   d73cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d73d0:	4718      	bx	r3

000d73d2 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d73d2:	6800      	ldr	r0, [r0, #0]
   d73d4:	6803      	ldr	r3, [r0, #0]
   d73d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d73d8:	4718      	bx	r3

000d73da <_ZN10RHDatagram14setThisAddressEh>:
{
   d73da:	b538      	push	{r3, r4, r5, lr}
   d73dc:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d73de:	6800      	ldr	r0, [r0, #0]
   d73e0:	6803      	ldr	r3, [r0, #0]
{
   d73e2:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d73e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d73e6:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d73e8:	4629      	mov	r1, r5
   d73ea:	4620      	mov	r0, r4
   d73ec:	f7ff fff1 	bl	d73d2 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d73f0:	7125      	strb	r5, [r4, #4]
}
   d73f2:	bd38      	pop	{r3, r4, r5, pc}

000d73f4 <_ZN10RHDatagram4initEv>:
{
   d73f4:	b538      	push	{r3, r4, r5, lr}
   d73f6:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d73f8:	6800      	ldr	r0, [r0, #0]
   d73fa:	6803      	ldr	r3, [r0, #0]
   d73fc:	689b      	ldr	r3, [r3, #8]
   d73fe:	4798      	blx	r3
    if (ret)
   d7400:	4605      	mov	r5, r0
   d7402:	b118      	cbz	r0, d740c <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d7404:	7921      	ldrb	r1, [r4, #4]
   d7406:	4620      	mov	r0, r4
   d7408:	f7ff ffe7 	bl	d73da <_ZN10RHDatagram14setThisAddressEh>
}
   d740c:	4628      	mov	r0, r5
   d740e:	bd38      	pop	{r3, r4, r5, pc}

000d7410 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d7410:	6800      	ldr	r0, [r0, #0]
   d7412:	6803      	ldr	r3, [r0, #0]
   d7414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7416:	4718      	bx	r3

000d7418 <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d7418:	6800      	ldr	r0, [r0, #0]
   d741a:	6803      	ldr	r3, [r0, #0]
   d741c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d741e:	4718      	bx	r3

000d7420 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d7420:	6800      	ldr	r0, [r0, #0]
   d7422:	6803      	ldr	r3, [r0, #0]
   d7424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7426:	4718      	bx	r3

000d7428 <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d7428:	6800      	ldr	r0, [r0, #0]
   d742a:	6803      	ldr	r3, [r0, #0]
   d742c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d742e:	4718      	bx	r3

000d7430 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d7430:	6800      	ldr	r0, [r0, #0]
   d7432:	6803      	ldr	r3, [r0, #0]
   d7434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7436:	4718      	bx	r3

000d7438 <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d7438:	6800      	ldr	r0, [r0, #0]
   d743a:	6803      	ldr	r3, [r0, #0]
   d743c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d743e:	4718      	bx	r3

000d7440 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d7440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7444:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d7446:	6800      	ldr	r0, [r0, #0]
{
   d7448:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d744a:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d744c:	6803      	ldr	r3, [r0, #0]
   d744e:	691b      	ldr	r3, [r3, #16]
{
   d7450:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d7454:	4798      	blx	r3
   d7456:	4605      	mov	r5, r0
   d7458:	b1c8      	cbz	r0, d748e <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d745a:	b11e      	cbz	r6, d7464 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d745c:	4620      	mov	r0, r4
   d745e:	f7ff ffe3 	bl	d7428 <_ZN10RHDatagram10headerFromEv>
   d7462:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d7464:	f1b9 0f00 	cmp.w	r9, #0
   d7468:	d004      	beq.n	d7474 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d746a:	4620      	mov	r0, r4
   d746c:	f7ff ffd8 	bl	d7420 <_ZN10RHDatagram8headerToEv>
   d7470:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d7474:	f1b8 0f00 	cmp.w	r8, #0
   d7478:	d004      	beq.n	d7484 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d747a:	4620      	mov	r0, r4
   d747c:	f7ff ffd8 	bl	d7430 <_ZN10RHDatagram8headerIdEv>
   d7480:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d7484:	b11f      	cbz	r7, d748e <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d7486:	4620      	mov	r0, r4
   d7488:	f7ff ffd6 	bl	d7438 <_ZN10RHDatagram11headerFlagsEv>
   d748c:	7038      	strb	r0, [r7, #0]
}
   d748e:	4628      	mov	r0, r5
   d7490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d7494 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d7494:	2001      	movs	r0, #1
   d7496:	4770      	bx	lr

000d7498 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d7498:	7903      	ldrb	r3, [r0, #4]
   d749a:	2b03      	cmp	r3, #3
   d749c:	d0fc      	beq.n	d7498 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d749e:	2001      	movs	r0, #1
   d74a0:	4770      	bx	lr

000d74a2 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d74a2:	2000      	movs	r0, #0
   d74a4:	4770      	bx	lr

000d74a6 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d74a6:	7181      	strb	r1, [r0, #6]
}
   d74a8:	4770      	bx	lr

000d74aa <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d74aa:	7141      	strb	r1, [r0, #5]
}
   d74ac:	4770      	bx	lr

000d74ae <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d74ae:	72c1      	strb	r1, [r0, #11]
}
   d74b0:	4770      	bx	lr

000d74b2 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d74b2:	7301      	strb	r1, [r0, #12]
}
   d74b4:	4770      	bx	lr

000d74b6 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d74b6:	7341      	strb	r1, [r0, #13]
}
   d74b8:	4770      	bx	lr

000d74ba <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d74ba:	7b83      	ldrb	r3, [r0, #14]
   d74bc:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d74c0:	4311      	orrs	r1, r2
   d74c2:	7381      	strb	r1, [r0, #14]
}
   d74c4:	4770      	bx	lr

000d74c6 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d74c6:	79c0      	ldrb	r0, [r0, #7]
}
   d74c8:	4770      	bx	lr

000d74ca <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d74ca:	7a00      	ldrb	r0, [r0, #8]
}
   d74cc:	4770      	bx	lr

000d74ce <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d74ce:	7a40      	ldrb	r0, [r0, #9]
}
   d74d0:	4770      	bx	lr

000d74d2 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d74d2:	7a80      	ldrb	r0, [r0, #10]
}
   d74d4:	4770      	bx	lr

000d74d6 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d74d6:	8a00      	ldrh	r0, [r0, #16]
}
   d74d8:	b200      	sxth	r0, r0
   d74da:	4770      	bx	lr

000d74dc <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d74dc:	7900      	ldrb	r0, [r0, #4]
}
   d74de:	4770      	bx	lr

000d74e0 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d74e0:	7101      	strb	r1, [r0, #4]
}
   d74e2:	4770      	bx	lr

000d74e4 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d74e4:	8a40      	ldrh	r0, [r0, #18]
}
   d74e6:	b280      	uxth	r0, r0
   d74e8:	4770      	bx	lr

000d74ea <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d74ea:	8a80      	ldrh	r0, [r0, #20]
}
   d74ec:	b280      	uxth	r0, r0
   d74ee:	4770      	bx	lr

000d74f0 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d74f0:	8ac0      	ldrh	r0, [r0, #22]
}
   d74f2:	b280      	uxth	r0, r0
   d74f4:	4770      	bx	lr

000d74f6 <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d74f6:	b538      	push	{r3, r4, r5, lr}
   d74f8:	4605      	mov	r5, r0
   d74fa:	460c      	mov	r4, r1
    while (!available())
   d74fc:	682b      	ldr	r3, [r5, #0]
   d74fe:	4628      	mov	r0, r5
   d7500:	68db      	ldr	r3, [r3, #12]
   d7502:	4798      	blx	r3
   d7504:	b928      	cbnz	r0, d7512 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d7506:	2c00      	cmp	r4, #0
   d7508:	d0f8      	beq.n	d74fc <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d750a:	4620      	mov	r0, r4
   d750c:	f001 fd40 	bl	d8f90 <delay>
   d7510:	e7f4      	b.n	d74fc <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d7512:	bd38      	pop	{r3, r4, r5, pc}

000d7514 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d7514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7516:	4605      	mov	r5, r0
   d7518:	460f      	mov	r7, r1
   d751a:	4614      	mov	r4, r2
   d751c:	f001 f9de 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
   d7520:	4606      	mov	r6, r0
   d7522:	f001 f9db 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d7526:	1b80      	subs	r0, r0, r6
   d7528:	42b8      	cmp	r0, r7
   d752a:	d20a      	bcs.n	d7542 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d752c:	682b      	ldr	r3, [r5, #0]
   d752e:	4628      	mov	r0, r5
   d7530:	68db      	ldr	r3, [r3, #12]
   d7532:	4798      	blx	r3
   d7534:	b930      	cbnz	r0, d7544 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d7536:	2c00      	cmp	r4, #0
   d7538:	d0f3      	beq.n	d7522 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d753a:	4620      	mov	r0, r4
   d753c:	f001 fd28 	bl	d8f90 <delay>
   d7540:	e7ef      	b.n	d7522 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d7542:	2000      	movs	r0, #0
}
   d7544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7546 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d7546:	b570      	push	{r4, r5, r6, lr}
   d7548:	4604      	mov	r4, r0
   d754a:	460e      	mov	r6, r1
   d754c:	f001 f9c6 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
   d7550:	4605      	mov	r5, r0
   d7552:	f001 f9c3 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d7556:	1b40      	subs	r0, r0, r5
   d7558:	42b0      	cmp	r0, r6
   d755a:	d204      	bcs.n	d7566 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d755c:	7923      	ldrb	r3, [r4, #4]
   d755e:	2b03      	cmp	r3, #3
   d7560:	d0f7      	beq.n	d7552 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d7562:	2001      	movs	r0, #1
}
   d7564:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d7566:	2000      	movs	r0, #0
   d7568:	e7fc      	b.n	d7564 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d756a <_ZN15RHGenericDriver7waitCADEv>:
{
   d756a:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d756c:	69c3      	ldr	r3, [r0, #28]
{
   d756e:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d7570:	b1b3      	cbz	r3, d75a0 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d7572:	f001 f9b3 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d7576:	2664      	movs	r6, #100	; 0x64
   d7578:	4605      	mov	r5, r0
    while (isChannelActive())
   d757a:	6823      	ldr	r3, [r4, #0]
   d757c:	4620      	mov	r0, r4
   d757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7580:	4798      	blx	r3
   d7582:	b168      	cbz	r0, d75a0 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d7584:	f001 f9aa 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d7588:	69e3      	ldr	r3, [r4, #28]
   d758a:	1b40      	subs	r0, r0, r5
   d758c:	4298      	cmp	r0, r3
   d758e:	d809      	bhi.n	d75a4 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d7590:	210a      	movs	r1, #10
   d7592:	2001      	movs	r0, #1
   d7594:	f003 fea6 	bl	db2e4 <_Z6randomii>
   d7598:	4370      	muls	r0, r6
   d759a:	f001 fcf9 	bl	d8f90 <delay>
    while (isChannelActive())
   d759e:	e7ec      	b.n	d757a <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d75a0:	2001      	movs	r0, #1
}
   d75a2:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d75a4:	2000      	movs	r0, #0
   d75a6:	e7fc      	b.n	d75a2 <_ZN15RHGenericDriver7waitCADEv+0x38>

000d75a8 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d75a8:	4a06      	ldr	r2, [pc, #24]	; (d75c4 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d75aa:	6002      	str	r2, [r0, #0]
   d75ac:	21ff      	movs	r1, #255	; 0xff
   d75ae:	2200      	movs	r2, #0
   d75b0:	7102      	strb	r2, [r0, #4]
   d75b2:	7141      	strb	r1, [r0, #5]
   d75b4:	8242      	strh	r2, [r0, #18]
   d75b6:	72c1      	strb	r1, [r0, #11]
   d75b8:	8282      	strh	r2, [r0, #20]
   d75ba:	8181      	strh	r1, [r0, #12]
   d75bc:	7382      	strb	r2, [r0, #14]
   d75be:	82c2      	strh	r2, [r0, #22]
   d75c0:	61c2      	str	r2, [r0, #28]
}
   d75c2:	4770      	bx	lr
   d75c4:	000dd5c0 	.word	0x000dd5c0

000d75c8 <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d75c8:	4770      	bx	lr

000d75ca <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d75ca:	4770      	bx	lr

000d75cc <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d75cc:	4770      	bx	lr

000d75ce <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d75ce:	4770      	bx	lr

000d75d0 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d75d0:	4770      	bx	lr

000d75d2 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d75d2:	7141      	strb	r1, [r0, #5]
}
   d75d4:	4770      	bx	lr

000d75d6 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d75d6:	7181      	strb	r1, [r0, #6]
}
   d75d8:	4770      	bx	lr

000d75da <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d75da:	7101      	strb	r1, [r0, #4]
}
   d75dc:	4770      	bx	lr
	...

000d75e0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d75e0:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d75e2:	4d03      	ldr	r5, [pc, #12]	; (d75f0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d75e4:	6005      	str	r5, [r0, #0]
   d75e6:	7101      	strb	r1, [r0, #4]
   d75e8:	7142      	strb	r2, [r0, #5]
   d75ea:	7183      	strb	r3, [r0, #6]
}
   d75ec:	bd30      	pop	{r4, r5, pc}
   d75ee:	bf00      	nop
   d75f0:	000dd640 	.word	0x000dd640

000d75f4 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d75f4:	4770      	bx	lr

000d75f6 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d75f6:	b510      	push	{r4, lr}
  }
   d75f8:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d75fa:	4604      	mov	r4, r0
  }
   d75fc:	f004 fce6 	bl	dbfcc <_ZdlPvj>
   d7600:	4620      	mov	r0, r4
   d7602:	bd10      	pop	{r4, pc}

000d7604 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d7604:	b40e      	push	{r1, r2, r3}
   d7606:	b503      	push	{r0, r1, lr}
   d7608:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d760a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d760c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d7610:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d7612:	f003 fe2b 	bl	db26c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d7616:	b002      	add	sp, #8
   d7618:	f85d eb04 	ldr.w	lr, [sp], #4
   d761c:	b003      	add	sp, #12
   d761e:	4770      	bx	lr

000d7620 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d7620:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7622:	4604      	mov	r4, r0
   d7624:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d7626:	7922      	ldrb	r2, [r4, #4]
   d7628:	68a3      	ldr	r3, [r4, #8]
   d762a:	b132      	cbz	r2, d763a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d762c:	b9a3      	cbnz	r3, d7658 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d762e:	490b      	ldr	r1, [pc, #44]	; (d765c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d7630:	b002      	add	sp, #8
   d7632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d7636:	f003 bde8 	b.w	db20a <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d763a:	4a09      	ldr	r2, [pc, #36]	; (d7660 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d763c:	7b26      	ldrb	r6, [r4, #12]
   d763e:	4d09      	ldr	r5, [pc, #36]	; (d7664 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d7640:	4909      	ldr	r1, [pc, #36]	; (d7668 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d7642:	7b64      	ldrb	r4, [r4, #13]
   d7644:	2e01      	cmp	r6, #1
   d7646:	bf18      	it	ne
   d7648:	4629      	movne	r1, r5
   d764a:	e9cd 1400 	strd	r1, r4, [sp]
   d764e:	4907      	ldr	r1, [pc, #28]	; (d766c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d7650:	f7ff ffd8 	bl	d7604 <_ZN5Print6printfEPKcz>
  }
   d7654:	b002      	add	sp, #8
   d7656:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d7658:	4a05      	ldr	r2, [pc, #20]	; (d7670 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d765a:	e7ef      	b.n	d763c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d765c:	000dd67d 	.word	0x000dd67d
   d7660:	000dd9ad 	.word	0x000dd9ad
   d7664:	000dd679 	.word	0x000dd679
   d7668:	000dd675 	.word	0x000dd675
   d766c:	000dd693 	.word	0x000dd693
   d7670:	000dd66c 	.word	0x000dd66c

000d7674 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d7674:	b510      	push	{r4, lr}
   d7676:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d7678:	f7ff ffb2 	bl	d75e0 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d767c:	4b05      	ldr	r3, [pc, #20]	; (d7694 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d767e:	6023      	str	r3, [r4, #0]
  {
   d7680:	4b05      	ldr	r3, [pc, #20]	; (d7698 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d7682:	60a3      	str	r3, [r4, #8]
   d7684:	2301      	movs	r3, #1
   d7686:	7323      	strb	r3, [r4, #12]
   d7688:	2300      	movs	r3, #0
   d768a:	6123      	str	r3, [r4, #16]
   d768c:	82a3      	strh	r3, [r4, #20]
{
}
   d768e:	4620      	mov	r0, r4
   d7690:	bd10      	pop	{r4, pc}
   d7692:	bf00      	nop
   d7694:	000dd6cc 	.word	0x000dd6cc
   d7698:	000dd6b8 	.word	0x000dd6b8

000d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d769c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d769e:	4c0b      	ldr	r4, [pc, #44]	; (d76cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d76a0:	7821      	ldrb	r1, [r4, #0]
   d76a2:	f3bf 8f5b 	dmb	ish
   d76a6:	f011 0101 	ands.w	r1, r1, #1
   d76aa:	d10b      	bne.n	d76c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d76ac:	4620      	mov	r0, r4
   d76ae:	9101      	str	r1, [sp, #4]
   d76b0:	f7fc fd02 	bl	d40b8 <__cxa_guard_acquire>
   d76b4:	9901      	ldr	r1, [sp, #4]
   d76b6:	b128      	cbz	r0, d76c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d76b8:	4805      	ldr	r0, [pc, #20]	; (d76d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d76ba:	f003 fe29 	bl	db310 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d76be:	4620      	mov	r0, r4
   d76c0:	f7fc fcff 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d76c4:	4802      	ldr	r0, [pc, #8]	; (d76d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d76c6:	b002      	add	sp, #8
   d76c8:	bd10      	pop	{r4, pc}
   d76ca:	bf00      	nop
   d76cc:	2003e2fc 	.word	0x2003e2fc
   d76d0:	2003e300 	.word	0x2003e300

000d76d4 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d76d4:	b507      	push	{r0, r1, r2, lr}
   d76d6:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d76d8:	f7ff ffe0 	bl	d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d76dc:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d76de:	b003      	add	sp, #12
   d76e0:	f85d eb04 	ldr.w	lr, [sp], #4
   d76e4:	f003 bec6 	b.w	db474 <_ZN8SPIClass8transferEh>

000d76e8 <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d76e8:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d76ea:	f7ff ffd7 	bl	d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d76ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d76f2:	f003 bec5 	b.w	db480 <_ZN8SPIClass15attachInterruptEv>

000d76f6 <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d76f6:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d76f8:	f7ff ffd0 	bl	d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d76fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d7700:	f003 bebf 	b.w	db482 <_ZN8SPIClass15detachInterruptEv>

000d7704 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d7704:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d7706:	7903      	ldrb	r3, [r0, #4]
   d7708:	2b04      	cmp	r3, #4
   d770a:	d020      	beq.n	d774e <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d770c:	2b03      	cmp	r3, #3
   d770e:	d020      	beq.n	d7752 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d7710:	2b02      	cmp	r3, #2
   d7712:	d020      	beq.n	d7756 <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d7714:	4a11      	ldr	r2, [pc, #68]	; (d775c <_ZN13RHHardwareSPI5beginEv+0x58>)
   d7716:	4912      	ldr	r1, [pc, #72]	; (d7760 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d7718:	2b01      	cmp	r3, #1
   d771a:	bf18      	it	ne
   d771c:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d771e:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d7720:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d7722:	3901      	subs	r1, #1
   d7724:	bf18      	it	ne
   d7726:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d7728:	b133      	cbz	r3, d7738 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d772a:	2b01      	cmp	r3, #1
   d772c:	d004      	beq.n	d7738 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d772e:	2b02      	cmp	r3, #2
   d7730:	d002      	beq.n	d7738 <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d7732:	2b03      	cmp	r3, #3
   d7734:	bf18      	it	ne
   d7736:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d7738:	2400      	movs	r4, #0
   d773a:	7304      	strb	r4, [r0, #12]
   d773c:	6102      	str	r2, [r0, #16]
   d773e:	7501      	strb	r1, [r0, #20]
   d7740:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d7742:	f7ff ffab 	bl	d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d7746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d774a:	f003 bdeb 	b.w	db324 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d774e:	4a05      	ldr	r2, [pc, #20]	; (d7764 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d7750:	e7e5      	b.n	d771e <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d7752:	4a05      	ldr	r2, [pc, #20]	; (d7768 <_ZN13RHHardwareSPI5beginEv+0x64>)
   d7754:	e7e3      	b.n	d771e <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d7756:	4a05      	ldr	r2, [pc, #20]	; (d776c <_ZN13RHHardwareSPI5beginEv+0x68>)
   d7758:	e7e1      	b.n	d771e <_ZN13RHHardwareSPI5beginEv+0x1a>
   d775a:	bf00      	nop
   d775c:	001e8480 	.word	0x001e8480
   d7760:	000f4240 	.word	0x000f4240
   d7764:	00f42400 	.word	0x00f42400
   d7768:	007a1200 	.word	0x007a1200
   d776c:	003d0900 	.word	0x003d0900

000d7770 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d7770:	b508      	push	{r3, lr}
        instance().end();
   d7772:	f7ff ff93 	bl	d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d7776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d777a:	f003 bde4 	b.w	db346 <_ZN8SPIClass3endEv>

000d777e <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d777e:	b510      	push	{r4, lr}
   d7780:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d7782:	f7ff ff8b 	bl	d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d7786:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d778a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d778e:	f003 be03 	b.w	db398 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d7792 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d7792:	b508      	push	{r3, lr}
        instance().endTransaction();
   d7794:	f7ff ff82 	bl	d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d7798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d779c:	f003 bde2 	b.w	db364 <_ZN8SPIClass14endTransactionEv>

000d77a0 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d77a0:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d77a2:	f7ff ff7b 	bl	d769c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d77a6:	bd08      	pop	{r3, pc}

000d77a8 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d77a8:	2300      	movs	r3, #0
   d77aa:	4802      	ldr	r0, [pc, #8]	; (d77b4 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d77ac:	461a      	mov	r2, r3
   d77ae:	4619      	mov	r1, r3
   d77b0:	f7ff bf60 	b.w	d7674 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d77b4:	2003e308 	.word	0x2003e308

000d77b8 <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d77b8:	2a01      	cmp	r2, #1
   d77ba:	d105      	bne.n	d77c8 <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d77bc:	7a00      	ldrb	r0, [r0, #8]
   d77be:	780b      	ldrb	r3, [r1, #0]
   d77c0:	1a1b      	subs	r3, r3, r0
   d77c2:	4258      	negs	r0, r3
   d77c4:	4158      	adcs	r0, r3
   d77c6:	4770      	bx	lr
   d77c8:	2000      	movs	r0, #0
}
   d77ca:	4770      	bx	lr

000d77cc <_ZN6RHMesh5doArpEh>:
{
   d77cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d77d0:	4d26      	ldr	r5, [pc, #152]	; (d786c <_ZN6RHMesh5doArpEh+0xa0>)
   d77d2:	2301      	movs	r3, #1
{
   d77d4:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d77d6:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d77d8:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d77da:	2300      	movs	r3, #0
{
   d77dc:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d77de:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d77e0:	9300      	str	r3, [sp, #0]
   d77e2:	2203      	movs	r2, #3
   d77e4:	23ff      	movs	r3, #255	; 0xff
   d77e6:	4629      	mov	r1, r5
{
   d77e8:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d77ea:	f000 fbe7 	bl	d7fbc <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d77ee:	b120      	cbz	r0, d77fa <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d77f0:	2400      	movs	r4, #0
}
   d77f2:	4620      	mov	r0, r4
   d77f4:	b007      	add	sp, #28
   d77f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d77fa:	23fa      	movs	r3, #250	; 0xfa
   d77fc:	f88d 3017 	strb.w	r3, [sp, #23]
   d7800:	f001 f86c 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d7804:	f106 0904 	add.w	r9, r6, #4
   d7808:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d780a:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d780c:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d7810:	f001 f864 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
   d7814:	1a20      	subs	r0, r4, r0
   d7816:	2800      	cmp	r0, #0
   d7818:	ddea      	ble.n	d77f0 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d781a:	b281      	uxth	r1, r0
   d781c:	2200      	movs	r2, #0
   d781e:	4648      	mov	r0, r9
   d7820:	f7ff fdbf 	bl	d73a2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d7824:	2800      	cmp	r0, #0
   d7826:	d0f3      	beq.n	d7810 <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d7828:	2300      	movs	r3, #0
   d782a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d782e:	e9cd 3300 	strd	r3, r3, [sp]
   d7832:	f10d 0217 	add.w	r2, sp, #23
   d7836:	4651      	mov	r1, sl
   d7838:	4630      	mov	r0, r6
   d783a:	f000 fbc9 	bl	d7fd0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d783e:	4604      	mov	r4, r0
   d7840:	2800      	cmp	r0, #0
   d7842:	d0e3      	beq.n	d780c <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d7844:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d7848:	2b01      	cmp	r3, #1
   d784a:	d9df      	bls.n	d780c <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d784c:	f895 b000 	ldrb.w	fp, [r5]
   d7850:	f1bb 0f02 	cmp.w	fp, #2
   d7854:	d1da      	bne.n	d780c <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d7856:	4648      	mov	r0, r9
   d7858:	f7ff fde6 	bl	d7428 <_ZN10RHDatagram10headerFromEv>
   d785c:	465b      	mov	r3, fp
   d785e:	4602      	mov	r2, r0
   d7860:	4639      	mov	r1, r7
   d7862:	4630      	mov	r0, r6
   d7864:	f000 fb21 	bl	d7eaa <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d7868:	e7c3      	b.n	d77f2 <_ZN6RHMesh5doArpEh+0x26>
   d786a:	bf00      	nop
   d786c:	2003e320 	.word	0x2003e320

000d7870 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d7870:	2a01      	cmp	r2, #1
{
   d7872:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7876:	4607      	mov	r7, r0
   d7878:	460e      	mov	r6, r1
   d787a:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d787c:	d93b      	bls.n	d78f6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d787e:	794d      	ldrb	r5, [r1, #5]
   d7880:	2d02      	cmp	r5, #2
   d7882:	d130      	bne.n	d78e6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d7884:	f100 0804 	add.w	r8, r0, #4
   d7888:	79c9      	ldrb	r1, [r1, #7]
   d788a:	9101      	str	r1, [sp, #4]
   d788c:	4640      	mov	r0, r8
   d788e:	f7ff fdcb 	bl	d7428 <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d7892:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d7894:	462b      	mov	r3, r5
   d7896:	4602      	mov	r2, r0
   d7898:	9901      	ldr	r1, [sp, #4]
   d789a:	4638      	mov	r0, r7
   d789c:	f000 fb05 	bl	d7eaa <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d78a0:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d78a2:	f106 0308 	add.w	r3, r6, #8
   d78a6:	2400      	movs	r4, #0
   d78a8:	4622      	mov	r2, r4
   d78aa:	4295      	cmp	r5, r2
   d78ac:	f104 0401 	add.w	r4, r4, #1
   d78b0:	b2e4      	uxtb	r4, r4
   d78b2:	d904      	bls.n	d78be <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d78b4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d78b8:	7a39      	ldrb	r1, [r7, #8]
   d78ba:	4291      	cmp	r1, r2
   d78bc:	d1f4      	bne.n	d78a8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d78be:	f104 0108 	add.w	r1, r4, #8
   d78c2:	440e      	add	r6, r1
	while (i < numRoutes)
   d78c4:	42a5      	cmp	r5, r4
   d78c6:	d916      	bls.n	d78f6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d78c8:	f816 1b01 	ldrb.w	r1, [r6], #1
   d78cc:	9101      	str	r1, [sp, #4]
   d78ce:	4640      	mov	r0, r8
   d78d0:	f7ff fdaa 	bl	d7428 <_ZN10RHDatagram10headerFromEv>
   d78d4:	3401      	adds	r4, #1
   d78d6:	4602      	mov	r2, r0
   d78d8:	9901      	ldr	r1, [sp, #4]
   d78da:	2302      	movs	r3, #2
   d78dc:	4638      	mov	r0, r7
   d78de:	b2e4      	uxtb	r4, r4
   d78e0:	f000 fae3 	bl	d7eaa <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d78e4:	e7ee      	b.n	d78c4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d78e6:	2d03      	cmp	r5, #3
   d78e8:	d105      	bne.n	d78f6 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d78ea:	7989      	ldrb	r1, [r1, #6]
}
   d78ec:	b002      	add	sp, #8
   d78ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d78f2:	f000 bac3 	b.w	d7e7c <_ZN8RHRouter13deleteRouteToEh>
}
   d78f6:	b002      	add	sp, #8
   d78f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d78fc <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d78fc:	b510      	push	{r4, lr}
   d78fe:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d7900:	f000 fb14 	bl	d7f2c <_ZN8RHRouterC1ER15RHGenericDriverh>
   d7904:	4b01      	ldr	r3, [pc, #4]	; (d790c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d7906:	6023      	str	r3, [r4, #0]
}
   d7908:	4620      	mov	r0, r4
   d790a:	bd10      	pop	{r4, pc}
   d790c:	000dd700 	.word	0x000dd700

000d7910 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d7910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d7914:	2af9      	cmp	r2, #249	; 0xf9
{
   d7916:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d791a:	4606      	mov	r6, r0
   d791c:	460f      	mov	r7, r1
   d791e:	4614      	mov	r4, r2
   d7920:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d7922:	d825      	bhi.n	d7970 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d7924:	2bff      	cmp	r3, #255	; 0xff
   d7926:	d114      	bne.n	d7952 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d7928:	f8df 8048 	ldr.w	r8, [pc, #72]	; d7974 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d792c:	4640      	mov	r0, r8
   d792e:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d7930:	4622      	mov	r2, r4
   d7932:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d7934:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d7938:	f004 ffd4 	bl	dc8e4 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d793c:	1c62      	adds	r2, r4, #1
   d793e:	f8cd 9020 	str.w	r9, [sp, #32]
   d7942:	462b      	mov	r3, r5
   d7944:	4641      	mov	r1, r8
   d7946:	4630      	mov	r0, r6
   d7948:	b2d2      	uxtb	r2, r2
}
   d794a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d794e:	f000 bb35 	b.w	d7fbc <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d7952:	4619      	mov	r1, r3
   d7954:	f000 fa4e 	bl	d7df4 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d7958:	2800      	cmp	r0, #0
   d795a:	d1e5      	bne.n	d7928 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d795c:	6833      	ldr	r3, [r6, #0]
   d795e:	4629      	mov	r1, r5
   d7960:	689b      	ldr	r3, [r3, #8]
   d7962:	4630      	mov	r0, r6
   d7964:	4798      	blx	r3
   d7966:	2800      	cmp	r0, #0
   d7968:	d1de      	bne.n	d7928 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d796a:	2002      	movs	r0, #2
}
   d796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d7970:	2001      	movs	r0, #1
   d7972:	e7fb      	b.n	d796c <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d7974:	2003e320 	.word	0x2003e320

000d7978 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d7978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d797c:	b089      	sub	sp, #36	; 0x24
   d797e:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d7980:	23fa      	movs	r3, #250	; 0xfa
   d7982:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d7986:	f10d 031f 	add.w	r3, sp, #31
   d798a:	9303      	str	r3, [sp, #12]
   d798c:	f10d 031e 	add.w	r3, sp, #30
   d7990:	f8df a180 	ldr.w	sl, [pc, #384]	; d7b14 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d7994:	9302      	str	r3, [sp, #8]
   d7996:	f10d 031d 	add.w	r3, sp, #29
   d799a:	9301      	str	r3, [sp, #4]
   d799c:	ab07      	add	r3, sp, #28
   d799e:	9300      	str	r3, [sp, #0]
{     
   d79a0:	4689      	mov	r9, r1
   d79a2:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d79a4:	f10d 031b 	add.w	r3, sp, #27
   d79a8:	f10d 021a 	add.w	r2, sp, #26
   d79ac:	4651      	mov	r1, sl
{     
   d79ae:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d79b2:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d79b4:	f000 fb0c 	bl	d7fd0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d79b8:	4656      	mov	r6, sl
   d79ba:	4604      	mov	r4, r0
   d79bc:	b920      	cbnz	r0, d79c8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d79be:	2400      	movs	r4, #0
}
   d79c0:	4620      	mov	r0, r4
   d79c2:	b009      	add	sp, #36	; 0x24
   d79c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d79c8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d79cc:	b373      	cbz	r3, d7a2c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d79ce:	f89a 2000 	ldrb.w	r2, [sl]
   d79d2:	bb5a      	cbnz	r2, d7a2c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d79d4:	f1b8 0f00 	cmp.w	r8, #0
   d79d8:	d003      	beq.n	d79e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d79da:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d79de:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d79e2:	f1bb 0f00 	cmp.w	fp, #0
   d79e6:	d003      	beq.n	d79f0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d79e8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d79ec:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d79f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d79f2:	b11a      	cbz	r2, d79fc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d79f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d79f6:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d79fa:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d79fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d79fe:	b11a      	cbz	r2, d7a08 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d7a00:	9914      	ldr	r1, [sp, #80]	; 0x50
   d7a02:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d7a06:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d7a08:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d7a0a:	b11a      	cbz	r2, d7a14 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d7a0c:	9915      	ldr	r1, [sp, #84]	; 0x54
   d7a0e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d7a12:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d7a14:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d7a16:	493d      	ldr	r1, [pc, #244]	; (d7b0c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d7a18:	3b01      	subs	r3, #1
   d7a1a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d7a1c:	429a      	cmp	r2, r3
		*len = msgLen;
   d7a1e:	bf88      	it	hi
   d7a20:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d7a22:	783a      	ldrb	r2, [r7, #0]
   d7a24:	4648      	mov	r0, r9
   d7a26:	f004 ff5d 	bl	dc8e4 <memcpy>
	    return true;
   d7a2a:	e7c9      	b.n	d79c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d7a2c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7a30:	2aff      	cmp	r2, #255	; 0xff
   d7a32:	d1c4      	bne.n	d79be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d7a34:	2b01      	cmp	r3, #1
   d7a36:	d9c2      	bls.n	d79be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d7a38:	7832      	ldrb	r2, [r6, #0]
   d7a3a:	2a01      	cmp	r2, #1
   d7a3c:	d1bf      	bne.n	d79be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d7a3e:	7a2a      	ldrb	r2, [r5, #8]
   d7a40:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d7a44:	42a2      	cmp	r2, r4
   d7a46:	d0ba      	beq.n	d79be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d7a48:	1edf      	subs	r7, r3, #3
   d7a4a:	4931      	ldr	r1, [pc, #196]	; (d7b10 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d7a4c:	b2ff      	uxtb	r7, r7
   d7a4e:	2300      	movs	r3, #0
   d7a50:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d7a54:	4547      	cmp	r7, r8
   d7a56:	d906      	bls.n	d7a66 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d7a58:	f811 0b01 	ldrb.w	r0, [r1], #1
   d7a5c:	4282      	cmp	r2, r0
   d7a5e:	f103 0301 	add.w	r3, r3, #1
   d7a62:	d1f5      	bne.n	d7a50 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d7a64:	e7ab      	b.n	d79be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d7a66:	f105 0904 	add.w	r9, r5, #4
   d7a6a:	4648      	mov	r0, r9
   d7a6c:	f7ff fcdc 	bl	d7428 <_ZN10RHDatagram10headerFromEv>
   d7a70:	2302      	movs	r3, #2
   d7a72:	4602      	mov	r2, r0
   d7a74:	4621      	mov	r1, r4
   d7a76:	4628      	mov	r0, r5
   d7a78:	f000 fa17 	bl	d7eaa <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d7a7c:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d7a80:	b193      	cbz	r3, d7aa8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d7a82:	4c24      	ldr	r4, [pc, #144]	; (d7b14 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d7a84:	1ba3      	subs	r3, r4, r6
   d7a86:	b2db      	uxtb	r3, r3
   d7a88:	429f      	cmp	r7, r3
   d7a8a:	d90c      	bls.n	d7aa6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d7a8c:	78e1      	ldrb	r1, [r4, #3]
   d7a8e:	9105      	str	r1, [sp, #20]
   d7a90:	4648      	mov	r0, r9
   d7a92:	f7ff fcc9 	bl	d7428 <_ZN10RHDatagram10headerFromEv>
   d7a96:	9905      	ldr	r1, [sp, #20]
   d7a98:	4602      	mov	r2, r0
   d7a9a:	2302      	movs	r3, #2
   d7a9c:	4628      	mov	r0, r5
   d7a9e:	f000 fa04 	bl	d7eaa <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d7aa2:	3401      	adds	r4, #1
   d7aa4:	e7ee      	b.n	d7a84 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d7aa6:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d7aa8:	682b      	ldr	r3, [r5, #0]
   d7aaa:	7872      	ldrb	r2, [r6, #1]
   d7aac:	68db      	ldr	r3, [r3, #12]
   d7aae:	491a      	ldr	r1, [pc, #104]	; (d7b18 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d7ab0:	4628      	mov	r0, r5
   d7ab2:	4798      	blx	r3
   d7ab4:	4604      	mov	r4, r0
   d7ab6:	b160      	cbz	r0, d7ad2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d7ab8:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d7aba:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d7abc:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d7abe:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d7ac2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d7ac6:	4913      	ldr	r1, [pc, #76]	; (d7b14 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d7ac8:	9400      	str	r4, [sp, #0]
   d7aca:	4628      	mov	r0, r5
   d7acc:	f000 fa76 	bl	d7fbc <_ZN8RHRouter10sendtoWaitEPhhhh>
   d7ad0:	e776      	b.n	d79c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d7ad2:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d7ad6:	4543      	cmp	r3, r8
   d7ad8:	f67f af71 	bls.w	d79be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d7adc:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d7ae0:	2b00      	cmp	r3, #0
   d7ae2:	f43f af6c 	beq.w	d79be <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d7ae6:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d7aea:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7aec:	4909      	ldr	r1, [pc, #36]	; (d7b14 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d7aee:	443e      	add	r6, r7
		tmpMessageLen++;
   d7af0:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d7af2:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7af4:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d7af8:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d7afa:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7afc:	9300      	str	r3, [sp, #0]
   d7afe:	4628      	mov	r0, r5
   d7b00:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d7b02:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d7b06:	f000 fa23 	bl	d7f50 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d7b0a:	e759      	b.n	d79c0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d7b0c:	2003e321 	.word	0x2003e321
   d7b10:	2003e323 	.word	0x2003e323
   d7b14:	2003e320 	.word	0x2003e320
   d7b18:	2003e322 	.word	0x2003e322

000d7b1c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d7b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b20:	b085      	sub	sp, #20
   d7b22:	4680      	mov	r8, r0
   d7b24:	461c      	mov	r4, r3
   d7b26:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d7b2a:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d7b2c:	4689      	mov	r9, r1
   d7b2e:	4692      	mov	sl, r2
   d7b30:	f000 fed4 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d7b34:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d7b38:	4404      	add	r4, r0
   d7b3a:	f000 fecf 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
   d7b3e:	1a20      	subs	r0, r4, r0
   d7b40:	2800      	cmp	r0, #0
   d7b42:	dd16      	ble.n	d7b72 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d7b44:	b281      	uxth	r1, r0
   d7b46:	2200      	movs	r2, #0
   d7b48:	4658      	mov	r0, fp
   d7b4a:	f7ff fc2a 	bl	d73a2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d7b4e:	2800      	cmp	r0, #0
   d7b50:	d0f3      	beq.n	d7b3a <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d7b52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7b54:	9300      	str	r3, [sp, #0]
   d7b56:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d7b5c:	9501      	str	r5, [sp, #4]
   d7b5e:	4652      	mov	r2, sl
   d7b60:	4649      	mov	r1, r9
   d7b62:	4640      	mov	r0, r8
   d7b64:	f7ff ff08 	bl	d7978 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d7b68:	2800      	cmp	r0, #0
   d7b6a:	d0e6      	beq.n	d7b3a <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d7b6c:	b005      	add	sp, #20
   d7b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d7b72:	2000      	movs	r0, #0
   d7b74:	e7fa      	b.n	d7b6c <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d7b78 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d7b78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7b7a:	b085      	sub	sp, #20
   d7b7c:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d7b7e:	3004      	adds	r0, #4
{
   d7b80:	460e      	mov	r6, r1
   d7b82:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d7b84:	f7ff fc50 	bl	d7428 <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d7b88:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d7b8a:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d7b8c:	4631      	mov	r1, r6
   d7b8e:	4628      	mov	r0, r5
   d7b90:	f000 f947 	bl	d7e22 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d7b94:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d7b96:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d7b98:	d001      	beq.n	d7b9e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d7b9a:	2805      	cmp	r0, #5
   d7b9c:	d11b      	bne.n	d7bd6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d7b9e:	7831      	ldrb	r1, [r6, #0]
   d7ba0:	4628      	mov	r0, r5
   d7ba2:	f000 f96b 	bl	d7e7c <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d7ba6:	7872      	ldrb	r2, [r6, #1]
   d7ba8:	7a2b      	ldrb	r3, [r5, #8]
   d7baa:	429a      	cmp	r2, r3
   d7bac:	d013      	beq.n	d7bd6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d7bae:	4c0b      	ldr	r4, [pc, #44]	; (d7bdc <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d7bb0:	2303      	movs	r3, #3
   d7bb2:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d7bb4:	7833      	ldrb	r3, [r6, #0]
   d7bb6:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d7bb8:	7871      	ldrb	r1, [r6, #1]
   d7bba:	2302      	movs	r3, #2
   d7bbc:	463a      	mov	r2, r7
   d7bbe:	4628      	mov	r0, r5
   d7bc0:	f000 f973 	bl	d7eaa <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d7bc4:	2300      	movs	r3, #0
   d7bc6:	9300      	str	r3, [sp, #0]
   d7bc8:	4621      	mov	r1, r4
   d7bca:	7873      	ldrb	r3, [r6, #1]
   d7bcc:	2202      	movs	r2, #2
   d7bce:	4628      	mov	r0, r5
   d7bd0:	f000 f9f4 	bl	d7fbc <_ZN8RHRouter10sendtoWaitEPhhhh>
   d7bd4:	4604      	mov	r4, r0
}
   d7bd6:	4620      	mov	r0, r4
   d7bd8:	b005      	add	sp, #20
   d7bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7bdc:	2003e320 	.word	0x2003e320

000d7be0 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d7be0:	b510      	push	{r4, lr}
   d7be2:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d7be4:	f7ff fbd2 	bl	d738c <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d7be8:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d7bea:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d7bec:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d7bee:	2303      	movs	r3, #3
    _retransmissions = 0;
   d7bf0:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d7bf2:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d7bf4:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d7bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
   d7bfa:	f104 0011 	add.w	r0, r4, #17
   d7bfe:	f004 fe99 	bl	dc934 <memset>
}
   d7c02:	4620      	mov	r0, r4
   d7c04:	bd10      	pop	{r4, pc}

000d7c06 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d7c06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7c08:	4604      	mov	r4, r0
   d7c0a:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d7c0c:	f7ff fc00 	bl	d7410 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d7c10:	4620      	mov	r0, r4
   d7c12:	2200      	movs	r2, #0
   d7c14:	2180      	movs	r1, #128	; 0x80
   d7c16:	f7ff fbff 	bl	d7418 <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d7c1a:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d7c1c:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d7c1e:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d7c22:	f10d 010f 	add.w	r1, sp, #15
   d7c26:	2201      	movs	r2, #1
   d7c28:	4620      	mov	r0, r4
   d7c2a:	f7ff fbc2 	bl	d73b2 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d7c2e:	4620      	mov	r0, r4
   d7c30:	f7ff fbb3 	bl	d739a <_ZN10RHDatagram14waitPacketSentEv>
}
   d7c34:	b004      	add	sp, #16
   d7c36:	bd10      	pop	{r4, pc}

000d7c38 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d7c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d7c3c:	7b05      	ldrb	r5, [r0, #12]
   d7c3e:	3501      	adds	r5, #1
   d7c40:	b2ed      	uxtb	r5, r5
{
   d7c42:	b087      	sub	sp, #28
   d7c44:	4604      	mov	r4, r0
   d7c46:	4689      	mov	r9, r1
   d7c48:	4692      	mov	sl, r2
   d7c4a:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d7c4c:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d7c4e:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d7c50:	7c22      	ldrb	r2, [r4, #16]
   d7c52:	463b      	mov	r3, r7
   d7c54:	429a      	cmp	r2, r3
   d7c56:	f107 0701 	add.w	r7, r7, #1
   d7c5a:	b2ff      	uxtb	r7, r7
   d7c5c:	d36b      	bcc.n	d7d36 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d7c5e:	4629      	mov	r1, r5
   d7c60:	4620      	mov	r0, r4
   d7c62:	f7ff fbd5 	bl	d7410 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d7c66:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d7c68:	bf0d      	iteet	eq
   d7c6a:	22c0      	moveq	r2, #192	; 0xc0
   d7c6c:	2280      	movne	r2, #128	; 0x80
   d7c6e:	2140      	movne	r1, #64	; 0x40
   d7c70:	2100      	moveq	r1, #0
   d7c72:	4620      	mov	r0, r4
   d7c74:	f7ff fbd0 	bl	d7418 <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d7c78:	4643      	mov	r3, r8
   d7c7a:	4652      	mov	r2, sl
   d7c7c:	4649      	mov	r1, r9
   d7c7e:	4620      	mov	r0, r4
   d7c80:	f7ff fb97 	bl	d73b2 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d7c84:	4620      	mov	r0, r4
   d7c86:	f7ff fb88 	bl	d739a <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d7c8a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d7c8e:	d054      	beq.n	d7d3a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d7c90:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d7c92:	bf82      	ittt	hi
   d7c94:	68a3      	ldrhi	r3, [r4, #8]
   d7c96:	3301      	addhi	r3, #1
   d7c98:	60a3      	strhi	r3, [r4, #8]
   d7c9a:	f000 fe1f 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d7c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d7ca2:	4683      	mov	fp, r0
   d7ca4:	2000      	movs	r0, #0
   d7ca6:	89e6      	ldrh	r6, [r4, #14]
   d7ca8:	f003 fb1c 	bl	db2e4 <_Z6randomii>
   d7cac:	4370      	muls	r0, r6
   d7cae:	bf48      	it	mi
   d7cb0:	30ff      	addmi	r0, #255	; 0xff
   d7cb2:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d7cb6:	fa1b f686 	uxtah	r6, fp, r6
   d7cba:	f000 fe0f 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
   d7cbe:	1a30      	subs	r0, r6, r0
   d7cc0:	2800      	cmp	r0, #0
   d7cc2:	ddc5      	ble.n	d7c50 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d7cc4:	b281      	uxth	r1, r0
   d7cc6:	2200      	movs	r2, #0
   d7cc8:	4620      	mov	r0, r4
   d7cca:	f7ff fb6a 	bl	d73a2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d7cce:	2800      	cmp	r0, #0
   d7cd0:	d0f3      	beq.n	d7cba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d7cd2:	f10d 0317 	add.w	r3, sp, #23
   d7cd6:	9302      	str	r3, [sp, #8]
   d7cd8:	f10d 0316 	add.w	r3, sp, #22
   d7cdc:	9301      	str	r3, [sp, #4]
   d7cde:	2200      	movs	r2, #0
   d7ce0:	f10d 0315 	add.w	r3, sp, #21
   d7ce4:	9300      	str	r3, [sp, #0]
   d7ce6:	4611      	mov	r1, r2
   d7ce8:	ab05      	add	r3, sp, #20
   d7cea:	4620      	mov	r0, r4
   d7cec:	f7ff fba8 	bl	d7440 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d7cf0:	2800      	cmp	r0, #0
   d7cf2:	d0e2      	beq.n	d7cba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d7cf4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d7cf8:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d7cfc:	4542      	cmp	r2, r8
   d7cfe:	d10e      	bne.n	d7d1e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d7d00:	f894 c004 	ldrb.w	ip, [r4, #4]
   d7d04:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d7d08:	458c      	cmp	ip, r1
   d7d0a:	d108      	bne.n	d7d1e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d7d0c:	2b00      	cmp	r3, #0
   d7d0e:	da08      	bge.n	d7d22 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d7d10:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d7d14:	42ab      	cmp	r3, r5
   d7d16:	d1d0      	bne.n	d7cba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d7d18:	b007      	add	sp, #28
   d7d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d7d1e:	2b00      	cmp	r3, #0
   d7d20:	dbcb      	blt.n	d7cba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d7d22:	18a1      	adds	r1, r4, r2
   d7d24:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d7d28:	7c49      	ldrb	r1, [r1, #17]
   d7d2a:	4299      	cmp	r1, r3
   d7d2c:	d1c5      	bne.n	d7cba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d7d2e:	4620      	mov	r0, r4
   d7d30:	f7ff ff69 	bl	d7c06 <_ZN18RHReliableDatagram11acknowledgeEhh>
   d7d34:	e7c1      	b.n	d7cba <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d7d36:	2000      	movs	r0, #0
   d7d38:	e7ee      	b.n	d7d18 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d7d3a:	2001      	movs	r0, #1
   d7d3c:	e7ec      	b.n	d7d18 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d7d3e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d7d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7d42:	b089      	sub	sp, #36	; 0x24
   d7d44:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d7d48:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d7d4c:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d7d4e:	4604      	mov	r4, r0
   d7d50:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d7d52:	f7ff fb1e 	bl	d7392 <_ZN10RHDatagram9availableEv>
   d7d56:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d7d5a:	b920      	cbnz	r0, d7d66 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d7d5c:	2500      	movs	r5, #0
}
   d7d5e:	4628      	mov	r0, r5
   d7d60:	b009      	add	sp, #36	; 0x24
   d7d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d7d66:	f10d 031f 	add.w	r3, sp, #31
   d7d6a:	9302      	str	r3, [sp, #8]
   d7d6c:	f10d 031e 	add.w	r3, sp, #30
   d7d70:	9301      	str	r3, [sp, #4]
   d7d72:	f10d 031d 	add.w	r3, sp, #29
   d7d76:	9300      	str	r3, [sp, #0]
   d7d78:	4620      	mov	r0, r4
   d7d7a:	ab07      	add	r3, sp, #28
   d7d7c:	f7ff fb60 	bl	d7440 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d7d80:	4605      	mov	r5, r0
   d7d82:	2800      	cmp	r0, #0
   d7d84:	d0ea      	beq.n	d7d5c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d7d86:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d7d8a:	2b00      	cmp	r3, #0
   d7d8c:	dbe6      	blt.n	d7d5c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d7d8e:	7922      	ldrb	r2, [r4, #4]
   d7d90:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d7d94:	429a      	cmp	r2, r3
   d7d96:	d106      	bne.n	d7da6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d7d98:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7d9c:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d7da0:	4620      	mov	r0, r4
   d7da2:	f7ff ff30 	bl	d7c06 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d7da6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d7daa:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d7dae:	4414      	add	r4, r2
   d7db0:	7c61      	ldrb	r1, [r4, #17]
   d7db2:	4299      	cmp	r1, r3
   d7db4:	d0d2      	beq.n	d7d5c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d7db6:	b106      	cbz	r6, d7dba <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d7db8:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d7dba:	f1b9 0f00 	cmp.w	r9, #0
   d7dbe:	d003      	beq.n	d7dc8 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d7dc0:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d7dc4:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d7dc8:	f1b8 0f00 	cmp.w	r8, #0
   d7dcc:	d001      	beq.n	d7dd2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d7dce:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d7dd2:	b117      	cbz	r7, d7dda <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d7dd4:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d7dd8:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d7dda:	7463      	strb	r3, [r4, #17]
		return true;
   d7ddc:	e7bf      	b.n	d7d5e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d7dde <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d7dde:	4770      	bx	lr

000d7de0 <_ZN8RHRouter4initEv>:
{
   d7de0:	b510      	push	{r4, lr}
   d7de2:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d7de4:	3004      	adds	r0, #4
   d7de6:	f7ff fb05 	bl	d73f4 <_ZN10RHDatagram4initEv>
    if (ret)
   d7dea:	b110      	cbz	r0, d7df2 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d7dec:	231e      	movs	r3, #30
   d7dee:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d7df2:	bd10      	pop	{r4, pc}

000d7df4 <_ZN8RHRouter10getRouteToEh>:
{
   d7df4:	b510      	push	{r4, lr}
   d7df6:	4602      	mov	r2, r0
   d7df8:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d7dfa:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d7dfe:	428c      	cmp	r4, r1
   d7e00:	d108      	bne.n	d7e14 <_ZN8RHRouter10getRouteToEh+0x20>
   d7e02:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d7e06:	b12c      	cbz	r4, d7e14 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d7e08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7e0c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d7e10:	4418      	add	r0, r3
}
   d7e12:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7e14:	3301      	adds	r3, #1
   d7e16:	2b0a      	cmp	r3, #10
   d7e18:	f102 0203 	add.w	r2, r2, #3
   d7e1c:	d1ed      	bne.n	d7dfa <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d7e1e:	2000      	movs	r0, #0
   d7e20:	e7f7      	b.n	d7e12 <_ZN8RHRouter10getRouteToEh+0x1e>

000d7e22 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d7e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d7e24:	780b      	ldrb	r3, [r1, #0]
   d7e26:	2bff      	cmp	r3, #255	; 0xff
{
   d7e28:	4605      	mov	r5, r0
   d7e2a:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d7e2c:	d006      	beq.n	d7e3c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d7e2e:	4619      	mov	r1, r3
   d7e30:	9201      	str	r2, [sp, #4]
   d7e32:	f7ff ffdf 	bl	d7df4 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d7e36:	b158      	cbz	r0, d7e50 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d7e38:	7843      	ldrb	r3, [r0, #1]
   d7e3a:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d7e3c:	4621      	mov	r1, r4
   d7e3e:	1d28      	adds	r0, r5, #4
   d7e40:	f7ff fefa 	bl	d7c38 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d7e44:	2800      	cmp	r0, #0
   d7e46:	bf14      	ite	ne
   d7e48:	2000      	movne	r0, #0
   d7e4a:	2005      	moveq	r0, #5
}
   d7e4c:	b003      	add	sp, #12
   d7e4e:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d7e50:	2002      	movs	r0, #2
   d7e52:	e7fb      	b.n	d7e4c <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d7e54 <_ZN8RHRouter11deleteRouteEh>:
{
   d7e54:	b510      	push	{r4, lr}
   d7e56:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d7e5a:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d7e5c:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d7e60:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d7e64:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d7e68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7e6c:	4421      	add	r1, r4
   d7e6e:	4420      	add	r0, r4
   d7e70:	f004 fd38 	bl	dc8e4 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d7e74:	2300      	movs	r3, #0
   d7e76:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d7e7a:	bd10      	pop	{r4, pc}

000d7e7c <_ZN8RHRouter13deleteRouteToEh>:
{
   d7e7c:	b538      	push	{r3, r4, r5, lr}
   d7e7e:	460a      	mov	r2, r1
   d7e80:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d7e82:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d7e86:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d7e8a:	b2d9      	uxtb	r1, r3
   d7e8c:	5d65      	ldrb	r5, [r4, r5]
   d7e8e:	4295      	cmp	r5, r2
   d7e90:	d103      	bne.n	d7e9a <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d7e92:	f7ff ffdf 	bl	d7e54 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d7e96:	2001      	movs	r0, #1
}
   d7e98:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7e9a:	3301      	adds	r3, #1
   d7e9c:	2b0a      	cmp	r3, #10
   d7e9e:	d1f2      	bne.n	d7e86 <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d7ea0:	2000      	movs	r0, #0
   d7ea2:	e7f9      	b.n	d7e98 <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d7ea4 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d7ea4:	2100      	movs	r1, #0
   d7ea6:	f7ff bfd5 	b.w	d7e54 <_ZN8RHRouter11deleteRouteEh>

000d7eaa <_ZN8RHRouter10addRouteToEhhh>:
{
   d7eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7eac:	4616      	mov	r6, r2
   d7eae:	461f      	mov	r7, r3
   d7eb0:	4604      	mov	r4, r0
   d7eb2:	460d      	mov	r5, r1
   d7eb4:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d7eb6:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d7eba:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d7ebe:	5c11      	ldrb	r1, [r2, r0]
   d7ec0:	42a9      	cmp	r1, r5
   d7ec2:	d105      	bne.n	d7ed0 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d7ec4:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d7ec6:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d7eca:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d7ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7ed0:	3301      	adds	r3, #1
   d7ed2:	2b0a      	cmp	r3, #10
   d7ed4:	d1f1      	bne.n	d7eba <_ZN8RHRouter10addRouteToEhhh+0x10>
   d7ed6:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d7ed8:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d7edc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d7ee0:	5c11      	ldrb	r1, [r2, r0]
   d7ee2:	b919      	cbnz	r1, d7eec <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d7ee4:	4420      	add	r0, r4
   d7ee6:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d7eea:	e7ec      	b.n	d7ec6 <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7eec:	3301      	adds	r3, #1
   d7eee:	2b0a      	cmp	r3, #10
   d7ef0:	d1f4      	bne.n	d7edc <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d7ef2:	4620      	mov	r0, r4
   d7ef4:	f7ff ffd6 	bl	d7ea4 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7ef8:	4620      	mov	r0, r4
   d7efa:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d7efe:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d7f02:	b92a      	cbnz	r2, d7f10 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d7f04:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d7f08:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d7f0c:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7f10:	3003      	adds	r0, #3
   d7f12:	4298      	cmp	r0, r3
   d7f14:	d1f3      	bne.n	d7efe <_ZN8RHRouter10addRouteToEhhh+0x54>
   d7f16:	e7da      	b.n	d7ece <_ZN8RHRouter10addRouteToEhhh+0x24>

000d7f18 <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7f18:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d7f1c:	2200      	movs	r2, #0
   d7f1e:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d7f22:	3003      	adds	r0, #3
   d7f24:	4298      	cmp	r0, r3
   d7f26:	d1fa      	bne.n	d7f1e <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d7f28:	4770      	bx	lr
	...

000d7f2c <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d7f2c:	b510      	push	{r4, lr}
   d7f2e:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d7f30:	3004      	adds	r0, #4
   d7f32:	f7ff fe55 	bl	d7be0 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d7f36:	4b05      	ldr	r3, [pc, #20]	; (d7f4c <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d7f38:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d7f3a:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d7f3e:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d7f40:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d7f44:	f7ff ffe8 	bl	d7f18 <_ZN8RHRouter17clearRoutingTableEv>
}
   d7f48:	4620      	mov	r0, r4
   d7f4a:	bd10      	pop	{r4, pc}
   d7f4c:	000dd718 	.word	0x000dd718

000d7f50 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d7f50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7f54:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7f56:	6840      	ldr	r0, [r0, #4]
{
   d7f58:	9101      	str	r1, [sp, #4]
   d7f5a:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7f5c:	6803      	ldr	r3, [r0, #0]
{
   d7f5e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7f62:	699b      	ldr	r3, [r3, #24]
{
   d7f64:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d7f68:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d7f6a:	4798      	blx	r3
   d7f6c:	f106 0805 	add.w	r8, r6, #5
   d7f70:	4580      	cmp	r8, r0
   d7f72:	d81c      	bhi.n	d7fae <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d7f74:	4d10      	ldr	r5, [pc, #64]	; (d7fb8 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d7f76:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d7f78:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d7f7c:	2300      	movs	r3, #0
   d7f7e:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d7f80:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d7f84:	70eb      	strb	r3, [r5, #3]
   d7f86:	1c5a      	adds	r2, r3, #1
   d7f88:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d7f8c:	1d68      	adds	r0, r5, #5
   d7f8e:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d7f90:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d7f92:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d7f96:	f004 fca5 	bl	dc8e4 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d7f9a:	6823      	ldr	r3, [r4, #0]
   d7f9c:	685b      	ldr	r3, [r3, #4]
   d7f9e:	fa5f f288 	uxtb.w	r2, r8
   d7fa2:	4629      	mov	r1, r5
   d7fa4:	4620      	mov	r0, r4
}
   d7fa6:	b002      	add	sp, #8
   d7fa8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d7fac:	4718      	bx	r3
}
   d7fae:	2001      	movs	r0, #1
   d7fb0:	b002      	add	sp, #8
   d7fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7fb6:	bf00      	nop
   d7fb8:	2003e41a 	.word	0x2003e41a

000d7fbc <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d7fbc:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d7fbe:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d7fc2:	9401      	str	r4, [sp, #4]
   d7fc4:	7a04      	ldrb	r4, [r0, #8]
   d7fc6:	9400      	str	r4, [sp, #0]
   d7fc8:	f7ff ffc2 	bl	d7f50 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d7fcc:	b002      	add	sp, #8
   d7fce:	bd10      	pop	{r4, pc}

000d7fd0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d7fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fd4:	b087      	sub	sp, #28
   d7fd6:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d7fd8:	23ff      	movs	r3, #255	; 0xff
   d7fda:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d7fde:	f10d 0317 	add.w	r3, sp, #23
   d7fe2:	9302      	str	r3, [sp, #8]
   d7fe4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d80b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d7fe8:	f10d 0316 	add.w	r3, sp, #22
   d7fec:	9301      	str	r3, [sp, #4]
   d7fee:	f10d 0315 	add.w	r3, sp, #21
   d7ff2:	9300      	str	r3, [sp, #0]
{  
   d7ff4:	4604      	mov	r4, r0
   d7ff6:	4688      	mov	r8, r1
   d7ff8:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d7ffa:	ab05      	add	r3, sp, #20
   d7ffc:	f10d 0213 	add.w	r2, sp, #19
   d8000:	4649      	mov	r1, r9
   d8002:	3004      	adds	r0, #4
{  
   d8004:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d8008:	f7ff fe99 	bl	d7d3e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d800c:	4605      	mov	r5, r0
   d800e:	b908      	cbnz	r0, d8014 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d8010:	2500      	movs	r5, #0
   d8012:	e038      	b.n	d8086 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d8014:	6823      	ldr	r3, [r4, #0]
   d8016:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d801a:	681b      	ldr	r3, [r3, #0]
   d801c:	4649      	mov	r1, r9
   d801e:	4620      	mov	r0, r4
   d8020:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d8022:	f899 3000 	ldrb.w	r3, [r9]
   d8026:	7a22      	ldrb	r2, [r4, #8]
   d8028:	429a      	cmp	r2, r3
   d802a:	d001      	beq.n	d8030 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d802c:	2bff      	cmp	r3, #255	; 0xff
   d802e:	d12e      	bne.n	d808e <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d8030:	b117      	cbz	r7, d8038 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d8032:	4b21      	ldr	r3, [pc, #132]	; (d80b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d8034:	785b      	ldrb	r3, [r3, #1]
   d8036:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d8038:	f1bb 0f00 	cmp.w	fp, #0
   d803c:	d003      	beq.n	d8046 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d803e:	4b1e      	ldr	r3, [pc, #120]	; (d80b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d8040:	781b      	ldrb	r3, [r3, #0]
   d8042:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d8046:	f1ba 0f00 	cmp.w	sl, #0
   d804a:	d003      	beq.n	d8054 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d804c:	4b1a      	ldr	r3, [pc, #104]	; (d80b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d804e:	78db      	ldrb	r3, [r3, #3]
   d8050:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d8054:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8056:	b11b      	cbz	r3, d8060 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d8058:	4b17      	ldr	r3, [pc, #92]	; (d80b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d805a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d805c:	791b      	ldrb	r3, [r3, #4]
   d805e:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d8060:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8062:	b11b      	cbz	r3, d806c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d8064:	4b14      	ldr	r3, [pc, #80]	; (d80b8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d8066:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d8068:	789b      	ldrb	r3, [r3, #2]
   d806a:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d806c:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d8070:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d8072:	4912      	ldr	r1, [pc, #72]	; (d80bc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d8074:	3b05      	subs	r3, #5
   d8076:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d8078:	429a      	cmp	r2, r3
		*len = msgLen;
   d807a:	bf88      	it	hi
   d807c:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d807e:	7832      	ldrb	r2, [r6, #0]
   d8080:	4640      	mov	r0, r8
   d8082:	f004 fc2f 	bl	dc8e4 <memcpy>
}
   d8086:	4628      	mov	r0, r5
   d8088:	b007      	add	sp, #28
   d808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d808e:	f899 3002 	ldrb.w	r3, [r9, #2]
   d8092:	1c5a      	adds	r2, r3, #1
   d8094:	f889 2002 	strb.w	r2, [r9, #2]
   d8098:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d809c:	429a      	cmp	r2, r3
   d809e:	d9b7      	bls.n	d8010 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d80a0:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d80a4:	2b00      	cmp	r3, #0
   d80a6:	d0b3      	beq.n	d8010 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d80a8:	6823      	ldr	r3, [r4, #0]
   d80aa:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d80ae:	685b      	ldr	r3, [r3, #4]
   d80b0:	4649      	mov	r1, r9
   d80b2:	4620      	mov	r0, r4
   d80b4:	4798      	blx	r3
   d80b6:	e7ab      	b.n	d8010 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d80b8:	2003e41a 	.word	0x2003e41a
   d80bc:	2003e41f 	.word	0x2003e41f

000d80c0 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d80c0:	b510      	push	{r4, lr}
   d80c2:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d80c4:	6a00      	ldr	r0, [r0, #32]
   d80c6:	6803      	ldr	r3, [r0, #0]
   d80c8:	68db      	ldr	r3, [r3, #12]
   d80ca:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d80cc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d80d0:	28ff      	cmp	r0, #255	; 0xff
   d80d2:	d002      	beq.n	d80da <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d80d4:	2101      	movs	r1, #1
   d80d6:	f003 feab 	bl	dbe30 <pinMode>

    deselectSlave();
   d80da:	6823      	ldr	r3, [r4, #0]
   d80dc:	4620      	mov	r0, r4
   d80de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d80e0:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d80e2:	2064      	movs	r0, #100	; 0x64
   d80e4:	f000 ff54 	bl	d8f90 <delay>
#endif
    
    return true;
}
   d80e8:	2001      	movs	r0, #1
   d80ea:	bd10      	pop	{r4, pc}

000d80ec <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d80ec:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d80f0:	2100      	movs	r1, #0
   d80f2:	f003 beae 	b.w	dbe52 <digitalWrite>

000d80f6 <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d80f6:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d80fa:	2101      	movs	r1, #1
   d80fc:	f003 bea9 	b.w	dbe52 <digitalWrite>

000d8100 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d8100:	b570      	push	{r4, r5, r6, lr}
   d8102:	4604      	mov	r4, r0
   d8104:	460d      	mov	r5, r1
   d8106:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d8108:	f7ff fa4e 	bl	d75a8 <_ZN15RHGenericDriverC1Ev>
   d810c:	4b03      	ldr	r3, [pc, #12]	; (d811c <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d810e:	6023      	str	r3, [r4, #0]
   d8110:	6226      	str	r6, [r4, #32]
   d8112:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d8116:	4620      	mov	r0, r4
   d8118:	bd70      	pop	{r4, r5, r6, pc}
   d811a:	bf00      	nop
   d811c:	000dd728 	.word	0x000dd728

000d8120 <_ZN11RHSPIDriver7spiReadEh>:
{
   d8120:	b538      	push	{r3, r4, r5, lr}
   d8122:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d8124:	6a00      	ldr	r0, [r0, #32]
   d8126:	6803      	ldr	r3, [r0, #0]
   d8128:	6a1b      	ldr	r3, [r3, #32]
{
   d812a:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d812c:	4798      	blx	r3
    selectSlave();
   d812e:	6823      	ldr	r3, [r4, #0]
   d8130:	4620      	mov	r0, r4
   d8132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d8134:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d8136:	6a20      	ldr	r0, [r4, #32]
   d8138:	6803      	ldr	r3, [r0, #0]
   d813a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d813e:	681b      	ldr	r3, [r3, #0]
   d8140:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d8142:	6a20      	ldr	r0, [r4, #32]
   d8144:	6803      	ldr	r3, [r0, #0]
   d8146:	2100      	movs	r1, #0
   d8148:	681b      	ldr	r3, [r3, #0]
   d814a:	4798      	blx	r3
    deselectSlave();
   d814c:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d814e:	4605      	mov	r5, r0
    deselectSlave();
   d8150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d8152:	4620      	mov	r0, r4
   d8154:	4798      	blx	r3
    _spi.endTransaction();
   d8156:	6a20      	ldr	r0, [r4, #32]
   d8158:	6803      	ldr	r3, [r0, #0]
   d815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d815c:	4798      	blx	r3
}
   d815e:	4628      	mov	r0, r5
   d8160:	bd38      	pop	{r3, r4, r5, pc}

000d8162 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d8162:	b570      	push	{r4, r5, r6, lr}
   d8164:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d8166:	6a00      	ldr	r0, [r0, #32]
   d8168:	6803      	ldr	r3, [r0, #0]
   d816a:	6a1b      	ldr	r3, [r3, #32]
{
   d816c:	4616      	mov	r6, r2
   d816e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d8170:	4798      	blx	r3
    selectSlave();
   d8172:	6823      	ldr	r3, [r4, #0]
   d8174:	4620      	mov	r0, r4
   d8176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d8178:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d817a:	6a20      	ldr	r0, [r4, #32]
   d817c:	6803      	ldr	r3, [r0, #0]
   d817e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d8182:	681b      	ldr	r3, [r3, #0]
   d8184:	4798      	blx	r3
   d8186:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d8188:	6a20      	ldr	r0, [r4, #32]
   d818a:	6803      	ldr	r3, [r0, #0]
   d818c:	4631      	mov	r1, r6
   d818e:	681b      	ldr	r3, [r3, #0]
   d8190:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d8192:	2001      	movs	r0, #1
   d8194:	f000 fb9a 	bl	d88cc <HAL_Delay_Microseconds>
    deselectSlave();
   d8198:	6823      	ldr	r3, [r4, #0]
   d819a:	4620      	mov	r0, r4
   d819c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d819e:	4798      	blx	r3
    _spi.endTransaction();
   d81a0:	6a20      	ldr	r0, [r4, #32]
   d81a2:	6803      	ldr	r3, [r0, #0]
   d81a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d81a6:	4798      	blx	r3
}
   d81a8:	4628      	mov	r0, r5
   d81aa:	bd70      	pop	{r4, r5, r6, pc}

000d81ac <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d81ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d81ae:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d81b0:	6a00      	ldr	r0, [r0, #32]
{
   d81b2:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d81b4:	6803      	ldr	r3, [r0, #0]
   d81b6:	6a1b      	ldr	r3, [r3, #32]
{
   d81b8:	460f      	mov	r7, r1
   d81ba:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d81bc:	4798      	blx	r3
    selectSlave();
   d81be:	6823      	ldr	r3, [r4, #0]
   d81c0:	4620      	mov	r0, r4
   d81c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d81c4:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d81c6:	6a20      	ldr	r0, [r4, #32]
   d81c8:	6803      	ldr	r3, [r0, #0]
   d81ca:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d81ce:	681b      	ldr	r3, [r3, #0]
   d81d0:	4798      	blx	r3
   d81d2:	442e      	add	r6, r5
   d81d4:	4607      	mov	r7, r0
    while (len--)
   d81d6:	42b5      	cmp	r5, r6
   d81d8:	d007      	beq.n	d81ea <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d81da:	6a20      	ldr	r0, [r4, #32]
   d81dc:	6803      	ldr	r3, [r0, #0]
   d81de:	2100      	movs	r1, #0
   d81e0:	681b      	ldr	r3, [r3, #0]
   d81e2:	4798      	blx	r3
   d81e4:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d81e8:	e7f5      	b.n	d81d6 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d81ea:	6823      	ldr	r3, [r4, #0]
   d81ec:	4620      	mov	r0, r4
   d81ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d81f0:	4798      	blx	r3
    _spi.endTransaction();
   d81f2:	6a20      	ldr	r0, [r4, #32]
   d81f4:	6803      	ldr	r3, [r0, #0]
   d81f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d81f8:	4798      	blx	r3
}
   d81fa:	4638      	mov	r0, r7
   d81fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d81fe <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d81fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8200:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d8202:	6a00      	ldr	r0, [r0, #32]
{
   d8204:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d8206:	6803      	ldr	r3, [r0, #0]
   d8208:	6a1b      	ldr	r3, [r3, #32]
{
   d820a:	460f      	mov	r7, r1
   d820c:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d820e:	4798      	blx	r3
    selectSlave();
   d8210:	6823      	ldr	r3, [r4, #0]
   d8212:	4620      	mov	r0, r4
   d8214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d8216:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d8218:	6a20      	ldr	r0, [r4, #32]
   d821a:	6803      	ldr	r3, [r0, #0]
   d821c:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d8220:	681b      	ldr	r3, [r3, #0]
   d8222:	4798      	blx	r3
   d8224:	442e      	add	r6, r5
   d8226:	4607      	mov	r7, r0
    while (len--)
   d8228:	42b5      	cmp	r5, r6
   d822a:	d006      	beq.n	d823a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d822c:	6a20      	ldr	r0, [r4, #32]
   d822e:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8232:	6803      	ldr	r3, [r0, #0]
   d8234:	681b      	ldr	r3, [r3, #0]
   d8236:	4798      	blx	r3
    while (len--)
   d8238:	e7f6      	b.n	d8228 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d823a:	6823      	ldr	r3, [r4, #0]
   d823c:	4620      	mov	r0, r4
   d823e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d8240:	4798      	blx	r3
    _spi.endTransaction();
   d8242:	6a20      	ldr	r0, [r4, #32]
   d8244:	6803      	ldr	r3, [r0, #0]
   d8246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8248:	4798      	blx	r3
}
   d824a:	4638      	mov	r0, r7
   d824c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d824e <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d824e:	6a00      	ldr	r0, [r0, #32]
   d8250:	6803      	ldr	r3, [r0, #0]
   d8252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8254:	4718      	bx	r3

000d8256 <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d8256:	2001      	movs	r0, #1
   d8258:	4770      	bx	lr

000d825a <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d825a:	20fb      	movs	r0, #251	; 0xfb
   d825c:	4770      	bx	lr

000d825e <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d825e:	4770      	bx	lr

000d8260 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d8260:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d8262:	7903      	ldrb	r3, [r0, #4]
   d8264:	2b05      	cmp	r3, #5
{
   d8266:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d8268:	d010      	beq.n	d828c <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d826a:	6803      	ldr	r3, [r0, #0]
   d826c:	2105      	movs	r1, #5
   d826e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d8272:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d8274:	2207      	movs	r2, #7
   d8276:	2101      	movs	r1, #1
   d8278:	4620      	mov	r0, r4
   d827a:	f7ff ff72 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d827e:	2280      	movs	r2, #128	; 0x80
   d8280:	2140      	movs	r1, #64	; 0x40
   d8282:	4620      	mov	r0, r4
   d8284:	f7ff ff6d 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d8288:	2305      	movs	r3, #5
   d828a:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d828c:	7923      	ldrb	r3, [r4, #4]
   d828e:	2b05      	cmp	r3, #5
   d8290:	d0fc      	beq.n	d828c <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d8292:	7e20      	ldrb	r0, [r4, #24]
}
   d8294:	bd10      	pop	{r4, pc}

000d8296 <_ZN7RH_RF95D0Ev>:
   d8296:	b510      	push	{r4, lr}
   d8298:	f44f 7198 	mov.w	r1, #304	; 0x130
   d829c:	4604      	mov	r4, r0
   d829e:	f003 fe95 	bl	dbfcc <_ZdlPvj>
   d82a2:	4620      	mov	r0, r4
   d82a4:	bd10      	pop	{r4, pc}

000d82a6 <_ZN7RH_RF955sleepEv>:
{
   d82a6:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d82a8:	7903      	ldrb	r3, [r0, #4]
   d82aa:	2b01      	cmp	r3, #1
{
   d82ac:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d82ae:	d00b      	beq.n	d82c8 <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d82b0:	6803      	ldr	r3, [r0, #0]
   d82b2:	2101      	movs	r1, #1
   d82b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d82b8:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d82ba:	2200      	movs	r2, #0
   d82bc:	2101      	movs	r1, #1
   d82be:	4620      	mov	r0, r4
   d82c0:	f7ff ff4f 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d82c4:	2301      	movs	r3, #1
   d82c6:	7123      	strb	r3, [r4, #4]
}
   d82c8:	2001      	movs	r0, #1
   d82ca:	bd10      	pop	{r4, pc}

000d82cc <_ZN7RH_RF954recvEPhS0_>:
{
   d82cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d82ce:	6803      	ldr	r3, [r0, #0]
   d82d0:	68db      	ldr	r3, [r3, #12]
{
   d82d2:	4604      	mov	r4, r0
   d82d4:	460f      	mov	r7, r1
   d82d6:	4615      	mov	r5, r2
    if (!available())
   d82d8:	4798      	blx	r3
   d82da:	4606      	mov	r6, r0
   d82dc:	b1b0      	cbz	r0, d830c <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d82de:	b187      	cbz	r7, d8302 <_ZN7RH_RF954recvEPhS0_+0x36>
   d82e0:	b17d      	cbz	r5, d8302 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d82e2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d82e6:	782a      	ldrb	r2, [r5, #0]
   d82e8:	3b03      	subs	r3, #3
   d82ea:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d82ec:	bfde      	ittt	le
   d82ee:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d82f2:	3b04      	suble	r3, #4
   d82f4:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d82f6:	782a      	ldrb	r2, [r5, #0]
   d82f8:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d82fc:	4638      	mov	r0, r7
   d82fe:	f004 faf1 	bl	dc8e4 <memcpy>
    _rxBufValid = false;
   d8302:	2300      	movs	r3, #0
   d8304:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d8308:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d830c:	4630      	mov	r0, r6
   d830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8310 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d8310:	b538      	push	{r3, r4, r5, lr}
   d8312:	4604      	mov	r4, r0
   d8314:	4615      	mov	r5, r2
    _rxBufValid(0)
   d8316:	461a      	mov	r2, r3
   d8318:	f7ff fef2 	bl	d8100 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d831c:	4b09      	ldr	r3, [pc, #36]	; (d8344 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d831e:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d8320:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d8322:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d8324:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d8328:	2201      	movs	r2, #1
    _rxBufValid(0)
   d832a:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d832e:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d8332:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d8336:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d833a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d833e:	4620      	mov	r0, r4
   d8340:	bd38      	pop	{r3, r4, r5, pc}
   d8342:	bf00      	nop
   d8344:	000dd7c0 	.word	0x000dd7c0

000d8348 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d8348:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d834c:	2b03      	cmp	r3, #3
   d834e:	d91b      	bls.n	d8388 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d8350:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d8354:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d8356:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d835a:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d835c:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d8360:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d8362:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d8366:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d8368:	7983      	ldrb	r3, [r0, #6]
   d836a:	b933      	cbnz	r3, d837a <_ZN7RH_RF9513validateRxBufEv+0x32>
   d836c:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d836e:	7942      	ldrb	r2, [r0, #5]
   d8370:	429a      	cmp	r2, r3
   d8372:	d002      	beq.n	d837a <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d8374:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d8376:	2bff      	cmp	r3, #255	; 0xff
   d8378:	d106      	bne.n	d8388 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d837a:	8a83      	ldrh	r3, [r0, #20]
   d837c:	3301      	adds	r3, #1
   d837e:	b29b      	uxth	r3, r3
   d8380:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d8382:	2301      	movs	r3, #1
   d8384:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d8388:	4770      	bx	lr
   d838a:	0000      	movs	r0, r0
   d838c:	0000      	movs	r0, r0
	...

000d8390 <_ZN7RH_RF9512setFrequencyEf>:
{
   d8390:	b538      	push	{r3, r4, r5, lr}
   d8392:	4604      	mov	r4, r0
   d8394:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d8398:	ee10 0a10 	vmov	r0, s0
{
   d839c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d83a0:	f003 ff88 	bl	dc2b4 <__aeabi_f2d>
   d83a4:	a317      	add	r3, pc, #92	; (adr r3, d8404 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d83a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83aa:	f003 ffdb 	bl	dc364 <__aeabi_dmul>
   d83ae:	a317      	add	r3, pc, #92	; (adr r3, d840c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d83b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83b4:	f004 f900 	bl	dc5b8 <__aeabi_ddiv>
   d83b8:	f004 f9e6 	bl	dc788 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d83bc:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d83be:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d83c0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d83c4:	4620      	mov	r0, r4
   d83c6:	f7ff fecc 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d83ca:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d83ce:	2107      	movs	r1, #7
   d83d0:	4620      	mov	r0, r4
   d83d2:	f7ff fec6 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d83d6:	b2ea      	uxtb	r2, r5
   d83d8:	2108      	movs	r1, #8
   d83da:	4620      	mov	r0, r4
   d83dc:	f7ff fec1 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d83e0:	eddf 7a07 	vldr	s15, [pc, #28]	; d8400 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d83e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d83e8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d83ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d83f0:	bfac      	ite	ge
   d83f2:	2301      	movge	r3, #1
   d83f4:	2300      	movlt	r3, #0
}
   d83f6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d83f8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d83fc:	bd38      	pop	{r3, r4, r5, pc}
   d83fe:	bf00      	nop
   d8400:	4442c000 	.word	0x4442c000
   d8404:	00000000 	.word	0x00000000
   d8408:	412e8480 	.word	0x412e8480
   d840c:	00000000 	.word	0x00000000
   d8410:	404e8480 	.word	0x404e8480

000d8414 <_ZN7RH_RF9511setModeIdleEv>:
{
   d8414:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d8416:	7903      	ldrb	r3, [r0, #4]
   d8418:	2b02      	cmp	r3, #2
{
   d841a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d841c:	d00b      	beq.n	d8436 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d841e:	6803      	ldr	r3, [r0, #0]
   d8420:	2102      	movs	r1, #2
   d8422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d8426:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d8428:	2201      	movs	r2, #1
   d842a:	4611      	mov	r1, r2
   d842c:	4620      	mov	r0, r4
   d842e:	f7ff fe98 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d8432:	2302      	movs	r3, #2
   d8434:	7123      	strb	r3, [r4, #4]
}
   d8436:	bd10      	pop	{r4, pc}

000d8438 <_ZN7RH_RF9515handleInterruptEv>:
{
   d8438:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d843a:	2112      	movs	r1, #18
{
   d843c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d843e:	f7ff fe6f 	bl	d8120 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d8442:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d8444:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d8446:	4620      	mov	r0, r4
   d8448:	f7ff fe6a 	bl	d8120 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d844c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d844e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d8450:	2112      	movs	r1, #18
   d8452:	4620      	mov	r0, r4
   d8454:	f7ff fe85 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d8458:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d845a:	2b04      	cmp	r3, #4
   d845c:	d107      	bne.n	d846e <_ZN7RH_RF9515handleInterruptEv+0x36>
   d845e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d8462:	d117      	bne.n	d8494 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d8464:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d8468:	b10b      	cbz	r3, d846e <_ZN7RH_RF9515handleInterruptEv+0x36>
   d846a:	0670      	lsls	r0, r6, #25
   d846c:	d512      	bpl.n	d8494 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d846e:	7923      	ldrb	r3, [r4, #4]
   d8470:	2b04      	cmp	r3, #4
   d8472:	d101      	bne.n	d8478 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d8474:	0669      	lsls	r1, r5, #25
   d8476:	d422      	bmi.n	d84be <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d8478:	7923      	ldrb	r3, [r4, #4]
   d847a:	2b03      	cmp	r3, #3
   d847c:	d101      	bne.n	d8482 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d847e:	072a      	lsls	r2, r5, #28
   d8480:	d469      	bmi.n	d8556 <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d8482:	7923      	ldrb	r3, [r4, #4]
   d8484:	2b05      	cmp	r3, #5
   d8486:	d10e      	bne.n	d84a6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d8488:	076b      	lsls	r3, r5, #29
   d848a:	d50c      	bpl.n	d84a6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d848c:	f005 0501 	and.w	r5, r5, #1
   d8490:	7625      	strb	r5, [r4, #24]
   d8492:	e059      	b.n	d8548 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d8494:	8a63      	ldrh	r3, [r4, #18]
   d8496:	3301      	adds	r3, #1
   d8498:	b29b      	uxth	r3, r3
   d849a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d849c:	2300      	movs	r3, #0
   d849e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d84a2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d84a6:	22ff      	movs	r2, #255	; 0xff
   d84a8:	2112      	movs	r1, #18
   d84aa:	4620      	mov	r0, r4
   d84ac:	f7ff fe59 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d84b0:	4620      	mov	r0, r4
   d84b2:	22ff      	movs	r2, #255	; 0xff
}
   d84b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d84b8:	2112      	movs	r1, #18
   d84ba:	f7ff be52 	b.w	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d84be:	2113      	movs	r1, #19
   d84c0:	4620      	mov	r0, r4
   d84c2:	f7ff fe2d 	bl	d8120 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d84c6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d84c8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d84ca:	4620      	mov	r0, r4
   d84cc:	f7ff fe28 	bl	d8120 <_ZN11RHSPIDriver7spiReadEh>
   d84d0:	210d      	movs	r1, #13
   d84d2:	4602      	mov	r2, r0
   d84d4:	4620      	mov	r0, r4
   d84d6:	f7ff fe44 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d84da:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d84de:	462b      	mov	r3, r5
   d84e0:	2100      	movs	r1, #0
   d84e2:	4620      	mov	r0, r4
   d84e4:	f7ff fe62 	bl	d81ac <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d84e8:	2119      	movs	r1, #25
	_bufLen = len;
   d84ea:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d84ee:	4620      	mov	r0, r4
   d84f0:	f7ff fe16 	bl	d8120 <_ZN11RHSPIDriver7spiReadEh>
   d84f4:	b240      	sxtb	r0, r0
   d84f6:	2800      	cmp	r0, #0
   d84f8:	bfb8      	it	lt
   d84fa:	3003      	addlt	r0, #3
   d84fc:	1080      	asrs	r0, r0, #2
   d84fe:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d8502:	211a      	movs	r1, #26
   d8504:	4620      	mov	r0, r4
   d8506:	f7ff fe0b 	bl	d8120 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d850a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d850e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d8510:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d8512:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d8514:	bfa9      	itett	ge
   d8516:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d8518:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d851a:	b21b      	sxthge	r3, r3
   d851c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d851e:	bfb2      	itee	lt
   d8520:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d8522:	220f      	movge	r2, #15
   d8524:	fb93 f3f2 	sdivge	r3, r3, r2
   d8528:	b21b      	sxth	r3, r3
   d852a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d852c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d8530:	b173      	cbz	r3, d8550 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d8532:	8a23      	ldrh	r3, [r4, #16]
   d8534:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d8536:	b21b      	sxth	r3, r3
   d8538:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d853a:	4620      	mov	r0, r4
   d853c:	f7ff ff04 	bl	d8348 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d8540:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d8544:	2b00      	cmp	r3, #0
   d8546:	d0ae      	beq.n	d84a6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d8548:	4620      	mov	r0, r4
   d854a:	f7ff ff63 	bl	d8414 <_ZN7RH_RF9511setModeIdleEv>
   d854e:	e7aa      	b.n	d84a6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d8550:	8a23      	ldrh	r3, [r4, #16]
   d8552:	3ba4      	subs	r3, #164	; 0xa4
   d8554:	e7ef      	b.n	d8536 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d8556:	8ae3      	ldrh	r3, [r4, #22]
   d8558:	3301      	adds	r3, #1
   d855a:	b29b      	uxth	r3, r3
   d855c:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d855e:	e7f3      	b.n	d8548 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d8560 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d8560:	4b02      	ldr	r3, [pc, #8]	; (d856c <_ZN7RH_RF954isr0Ev+0xc>)
   d8562:	6818      	ldr	r0, [r3, #0]
   d8564:	b108      	cbz	r0, d856a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d8566:	f7ff bf67 	b.w	d8438 <_ZN7RH_RF9515handleInterruptEv>
}
   d856a:	4770      	bx	lr
   d856c:	2003e51c 	.word	0x2003e51c

000d8570 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d8570:	4b02      	ldr	r3, [pc, #8]	; (d857c <_ZN7RH_RF954isr1Ev+0xc>)
   d8572:	6858      	ldr	r0, [r3, #4]
   d8574:	b108      	cbz	r0, d857a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d8576:	f7ff bf5f 	b.w	d8438 <_ZN7RH_RF9515handleInterruptEv>
}
   d857a:	4770      	bx	lr
   d857c:	2003e51c 	.word	0x2003e51c

000d8580 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d8580:	4b02      	ldr	r3, [pc, #8]	; (d858c <_ZN7RH_RF954isr2Ev+0xc>)
   d8582:	6898      	ldr	r0, [r3, #8]
   d8584:	b108      	cbz	r0, d858a <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d8586:	f7ff bf57 	b.w	d8438 <_ZN7RH_RF9515handleInterruptEv>
}
   d858a:	4770      	bx	lr
   d858c:	2003e51c 	.word	0x2003e51c

000d8590 <_ZN7RH_RF959setModeRxEv>:
{
   d8590:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d8592:	7903      	ldrb	r3, [r0, #4]
   d8594:	2b04      	cmp	r3, #4
{
   d8596:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d8598:	d010      	beq.n	d85bc <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d859a:	6803      	ldr	r3, [r0, #0]
   d859c:	2104      	movs	r1, #4
   d859e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d85a2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d85a4:	2205      	movs	r2, #5
   d85a6:	2101      	movs	r1, #1
   d85a8:	4620      	mov	r0, r4
   d85aa:	f7ff fdda 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d85ae:	2200      	movs	r2, #0
   d85b0:	2140      	movs	r1, #64	; 0x40
   d85b2:	4620      	mov	r0, r4
   d85b4:	f7ff fdd5 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d85b8:	2304      	movs	r3, #4
   d85ba:	7123      	strb	r3, [r4, #4]
}
   d85bc:	bd10      	pop	{r4, pc}

000d85be <_ZN7RH_RF959availableEv>:
{
   d85be:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d85c0:	7903      	ldrb	r3, [r0, #4]
   d85c2:	2b03      	cmp	r3, #3
{
   d85c4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d85c6:	d005      	beq.n	d85d4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d85c8:	f7ff ffe2 	bl	d8590 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d85cc:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d85d0:	b2c0      	uxtb	r0, r0
}
   d85d2:	bd10      	pop	{r4, pc}
	return false;
   d85d4:	2000      	movs	r0, #0
   d85d6:	e7fc      	b.n	d85d2 <_ZN7RH_RF959availableEv+0x14>

000d85d8 <_ZN7RH_RF959setModeTxEv>:
{
   d85d8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d85da:	7903      	ldrb	r3, [r0, #4]
   d85dc:	2b03      	cmp	r3, #3
{
   d85de:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d85e0:	d010      	beq.n	d8604 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d85e2:	6803      	ldr	r3, [r0, #0]
   d85e4:	2103      	movs	r1, #3
   d85e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d85ea:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d85ec:	2203      	movs	r2, #3
   d85ee:	2101      	movs	r1, #1
   d85f0:	4620      	mov	r0, r4
   d85f2:	f7ff fdb6 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d85f6:	2240      	movs	r2, #64	; 0x40
   d85f8:	4611      	mov	r1, r2
   d85fa:	4620      	mov	r0, r4
   d85fc:	f7ff fdb1 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d8600:	2303      	movs	r3, #3
   d8602:	7123      	strb	r3, [r4, #4]
}
   d8604:	bd10      	pop	{r4, pc}

000d8606 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d8606:	2afb      	cmp	r2, #251	; 0xfb
{
   d8608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d860a:	4604      	mov	r4, r0
   d860c:	460f      	mov	r7, r1
   d860e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d8610:	d902      	bls.n	d8618 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d8612:	2600      	movs	r6, #0
}
   d8614:	4630      	mov	r0, r6
   d8616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d8618:	6803      	ldr	r3, [r0, #0]
   d861a:	6a1b      	ldr	r3, [r3, #32]
   d861c:	4798      	blx	r3
    setModeIdle();
   d861e:	4620      	mov	r0, r4
   d8620:	f7ff fef8 	bl	d8414 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d8624:	6823      	ldr	r3, [r4, #0]
   d8626:	4620      	mov	r0, r4
   d8628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d862a:	4798      	blx	r3
   d862c:	4606      	mov	r6, r0
   d862e:	2800      	cmp	r0, #0
   d8630:	d0ef      	beq.n	d8612 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d8632:	2200      	movs	r2, #0
   d8634:	210d      	movs	r1, #13
   d8636:	4620      	mov	r0, r4
   d8638:	f7ff fd93 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d863c:	7ae2      	ldrb	r2, [r4, #11]
   d863e:	2100      	movs	r1, #0
   d8640:	4620      	mov	r0, r4
   d8642:	f7ff fd8e 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d8646:	7b22      	ldrb	r2, [r4, #12]
   d8648:	2100      	movs	r1, #0
   d864a:	4620      	mov	r0, r4
   d864c:	f7ff fd89 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d8650:	7b62      	ldrb	r2, [r4, #13]
   d8652:	2100      	movs	r1, #0
   d8654:	4620      	mov	r0, r4
   d8656:	f7ff fd84 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d865a:	7ba2      	ldrb	r2, [r4, #14]
   d865c:	2100      	movs	r1, #0
   d865e:	4620      	mov	r0, r4
   d8660:	f7ff fd7f 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d8664:	462b      	mov	r3, r5
   d8666:	463a      	mov	r2, r7
   d8668:	2100      	movs	r1, #0
   d866a:	4620      	mov	r0, r4
   d866c:	f7ff fdc7 	bl	d81fe <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d8670:	1d2a      	adds	r2, r5, #4
   d8672:	b2d2      	uxtb	r2, r2
   d8674:	2122      	movs	r1, #34	; 0x22
   d8676:	4620      	mov	r0, r4
   d8678:	f7ff fd73 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d867c:	4620      	mov	r0, r4
   d867e:	f7ff ffab 	bl	d85d8 <_ZN7RH_RF959setModeTxEv>
    return true;
   d8682:	e7c7      	b.n	d8614 <_ZN7RH_RF954sendEPKhh+0xe>

000d8684 <_ZN7RH_RF9510setTxPowerEab>:
{
   d8684:	b538      	push	{r3, r4, r5, lr}
   d8686:	4605      	mov	r5, r0
   d8688:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d868a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d868e:	b172      	cbz	r2, d86ae <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d8690:	f381 0204 	usat	r2, #4, r1
   d8694:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d8698:	b2d2      	uxtb	r2, r2
   d869a:	2109      	movs	r1, #9
   d869c:	f7ff fd61 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d86a0:	2204      	movs	r2, #4
   d86a2:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d86a4:	4628      	mov	r0, r5
}
   d86a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d86aa:	f7ff bd5a 	b.w	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d86ae:	2914      	cmp	r1, #20
   d86b0:	dc10      	bgt.n	d86d4 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d86b2:	2901      	cmp	r1, #1
   d86b4:	dd10      	ble.n	d86d8 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d86b6:	2911      	cmp	r1, #17
   d86b8:	dd0f      	ble.n	d86da <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d86ba:	2207      	movs	r2, #7
   d86bc:	214d      	movs	r1, #77	; 0x4d
   d86be:	4628      	mov	r0, r5
   d86c0:	f7ff fd4f 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d86c4:	3c03      	subs	r4, #3
   d86c6:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d86c8:	1ea2      	subs	r2, r4, #2
   d86ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d86ce:	b2d2      	uxtb	r2, r2
   d86d0:	2109      	movs	r1, #9
   d86d2:	e7e7      	b.n	d86a4 <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d86d4:	2414      	movs	r4, #20
   d86d6:	e7f0      	b.n	d86ba <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d86d8:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d86da:	2204      	movs	r2, #4
   d86dc:	214d      	movs	r1, #77	; 0x4d
   d86de:	4628      	mov	r0, r5
   d86e0:	f7ff fd3f 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
   d86e4:	e7f0      	b.n	d86c8 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d86e6 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d86e6:	b538      	push	{r3, r4, r5, lr}
   d86e8:	460c      	mov	r4, r1
   d86ea:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d86ec:	780a      	ldrb	r2, [r1, #0]
   d86ee:	211d      	movs	r1, #29
   d86f0:	f7ff fd37 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d86f4:	7862      	ldrb	r2, [r4, #1]
   d86f6:	211e      	movs	r1, #30
   d86f8:	4628      	mov	r0, r5
   d86fa:	f7ff fd32 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d86fe:	78a2      	ldrb	r2, [r4, #2]
   d8700:	4628      	mov	r0, r5
   d8702:	2126      	movs	r1, #38	; 0x26
}
   d8704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d8708:	f7ff bd2b 	b.w	d8162 <_ZN11RHSPIDriver8spiWriteEhh>

000d870c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d870c:	2905      	cmp	r1, #5
{
   d870e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d8710:	d80f      	bhi.n	d8732 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d8712:	4b09      	ldr	r3, [pc, #36]	; (d8738 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d8714:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d8718:	185c      	adds	r4, r3, r1
   d871a:	5a5a      	ldrh	r2, [r3, r1]
   d871c:	78a3      	ldrb	r3, [r4, #2]
   d871e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d8722:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d8724:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d8728:	f7ff ffdd 	bl	d86e6 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d872c:	2001      	movs	r0, #1
}
   d872e:	b002      	add	sp, #8
   d8730:	bd10      	pop	{r4, pc}
        return false;
   d8732:	2000      	movs	r0, #0
   d8734:	e7fb      	b.n	d872e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d8736:	bf00      	nop
   d8738:	000dd7a8 	.word	0x000dd7a8

000d873c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d873c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d873e:	0a0a      	lsrs	r2, r1, #8
{
   d8740:	4605      	mov	r5, r0
   d8742:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d8744:	2120      	movs	r1, #32
   d8746:	f7ff fd0c 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d874a:	b2e2      	uxtb	r2, r4
   d874c:	4628      	mov	r0, r5
   d874e:	2121      	movs	r1, #33	; 0x21
}
   d8750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d8754:	f7ff bd05 	b.w	d8162 <_ZN11RHSPIDriver8spiWriteEhh>

000d8758 <_ZN7RH_RF954initEv>:
{
   d8758:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d875a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d875c:	f7ff fcb0 	bl	d80c0 <_ZN11RHSPIDriver4initEv>
   d8760:	4606      	mov	r6, r0
   d8762:	b918      	cbnz	r0, d876c <_ZN7RH_RF954initEv+0x14>
	return false;
   d8764:	2600      	movs	r6, #0
}
   d8766:	4630      	mov	r0, r6
   d8768:	b002      	add	sp, #8
   d876a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d876c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d8770:	2dff      	cmp	r5, #255	; 0xff
   d8772:	d052      	beq.n	d881a <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d8774:	4629      	mov	r1, r5
   d8776:	4620      	mov	r0, r4
   d8778:	f7ff fd69 	bl	d824e <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d877c:	2280      	movs	r2, #128	; 0x80
   d877e:	2101      	movs	r1, #1
   d8780:	4620      	mov	r0, r4
   d8782:	f7ff fcee 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d8786:	200a      	movs	r0, #10
   d8788:	f000 fc02 	bl	d8f90 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d878c:	2101      	movs	r1, #1
   d878e:	4620      	mov	r0, r4
   d8790:	f7ff fcc6 	bl	d8120 <_ZN11RHSPIDriver7spiReadEh>
   d8794:	2880      	cmp	r0, #128	; 0x80
   d8796:	d1e5      	bne.n	d8764 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d8798:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d879c:	28ff      	cmp	r0, #255	; 0xff
   d879e:	d01c      	beq.n	d87da <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d87a0:	2100      	movs	r1, #0
   d87a2:	f003 fb45 	bl	dbe30 <pinMode>
	if (_myInterruptIndex == 0xff)
   d87a6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d87aa:	2bff      	cmp	r3, #255	; 0xff
   d87ac:	d107      	bne.n	d87be <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d87ae:	4a25      	ldr	r2, [pc, #148]	; (d8844 <_ZN7RH_RF954initEv+0xec>)
   d87b0:	7813      	ldrb	r3, [r2, #0]
   d87b2:	2b03      	cmp	r3, #3
   d87b4:	d8d6      	bhi.n	d8764 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d87b6:	1c59      	adds	r1, r3, #1
   d87b8:	7011      	strb	r1, [r2, #0]
   d87ba:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d87be:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d87c2:	4b21      	ldr	r3, [pc, #132]	; (d8848 <_ZN7RH_RF954initEv+0xf0>)
   d87c4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d87c8:	bb52      	cbnz	r2, d8820 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d87ca:	4920      	ldr	r1, [pc, #128]	; (d884c <_ZN7RH_RF954initEv+0xf4>)
   d87cc:	9200      	str	r2, [sp, #0]
   d87ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d87d2:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d87d4:	b2a8      	uxth	r0, r5
   d87d6:	f001 f995 	bl	d9b04 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d87da:	2200      	movs	r2, #0
   d87dc:	210e      	movs	r1, #14
   d87de:	4620      	mov	r0, r4
   d87e0:	f7ff fcbf 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d87e4:	2200      	movs	r2, #0
   d87e6:	210f      	movs	r1, #15
   d87e8:	4620      	mov	r0, r4
   d87ea:	f7ff fcba 	bl	d8162 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d87ee:	4620      	mov	r0, r4
   d87f0:	f7ff fe10 	bl	d8414 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d87f4:	2100      	movs	r1, #0
   d87f6:	4620      	mov	r0, r4
   d87f8:	f7ff ff88 	bl	d870c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d87fc:	2108      	movs	r1, #8
   d87fe:	4620      	mov	r0, r4
   d8800:	f7ff ff9c 	bl	d873c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d8804:	ed9f 0a12 	vldr	s0, [pc, #72]	; d8850 <_ZN7RH_RF954initEv+0xf8>
   d8808:	4620      	mov	r0, r4
   d880a:	f7ff fdc1 	bl	d8390 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d880e:	2200      	movs	r2, #0
   d8810:	210d      	movs	r1, #13
   d8812:	4620      	mov	r0, r4
   d8814:	f7ff ff36 	bl	d8684 <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d8818:	e7a5      	b.n	d8766 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d881a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d881e:	e7ad      	b.n	d877c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d8820:	2a01      	cmp	r2, #1
   d8822:	f04f 0300 	mov.w	r3, #0
   d8826:	d104      	bne.n	d8832 <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d8828:	9300      	str	r3, [sp, #0]
   d882a:	490a      	ldr	r1, [pc, #40]	; (d8854 <_ZN7RH_RF954initEv+0xfc>)
   d882c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8830:	e7d0      	b.n	d87d4 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d8832:	2a02      	cmp	r2, #2
   d8834:	d196      	bne.n	d8764 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d8836:	9300      	str	r3, [sp, #0]
   d8838:	4907      	ldr	r1, [pc, #28]	; (d8858 <_ZN7RH_RF954initEv+0x100>)
   d883a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d883e:	2201      	movs	r2, #1
   d8840:	e7c8      	b.n	d87d4 <_ZN7RH_RF954initEv+0x7c>
   d8842:	bf00      	nop
   d8844:	2003e519 	.word	0x2003e519
   d8848:	2003e51c 	.word	0x2003e51c
   d884c:	000d8561 	.word	0x000d8561
   d8850:	43d90000 	.word	0x43d90000
   d8854:	000d8571 	.word	0x000d8571
   d8858:	000d8581 	.word	0x000d8581

000d885c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d885c:	b508      	push	{r3, lr}
   d885e:	4b02      	ldr	r3, [pc, #8]	; (d8868 <cellular_signal+0xc>)
   d8860:	681b      	ldr	r3, [r3, #0]
   d8862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8864:	9301      	str	r3, [sp, #4]
   d8866:	bd08      	pop	{r3, pc}
   d8868:	00030274 	.word	0x00030274

000d886c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d886c:	b508      	push	{r3, lr}
   d886e:	4b02      	ldr	r3, [pc, #8]	; (d8878 <os_mutex_recursive_create+0xc>)
   d8870:	681b      	ldr	r3, [r3, #0]
   d8872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8874:	9301      	str	r3, [sp, #4]
   d8876:	bd08      	pop	{r3, pc}
   d8878:	00030248 	.word	0x00030248

000d887c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d887c:	b508      	push	{r3, lr}
   d887e:	4b02      	ldr	r3, [pc, #8]	; (d8888 <os_mutex_recursive_destroy+0xc>)
   d8880:	681b      	ldr	r3, [r3, #0]
   d8882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8884:	9301      	str	r3, [sp, #4]
   d8886:	bd08      	pop	{r3, pc}
   d8888:	00030248 	.word	0x00030248

000d888c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d888c:	b508      	push	{r3, lr}
   d888e:	4b02      	ldr	r3, [pc, #8]	; (d8898 <os_mutex_recursive_lock+0xc>)
   d8890:	681b      	ldr	r3, [r3, #0]
   d8892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8894:	9301      	str	r3, [sp, #4]
   d8896:	bd08      	pop	{r3, pc}
   d8898:	00030248 	.word	0x00030248

000d889c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d889c:	b508      	push	{r3, lr}
   d889e:	4b02      	ldr	r3, [pc, #8]	; (d88a8 <os_mutex_recursive_unlock+0xc>)
   d88a0:	681b      	ldr	r3, [r3, #0]
   d88a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d88a4:	9301      	str	r3, [sp, #4]
   d88a6:	bd08      	pop	{r3, pc}
   d88a8:	00030248 	.word	0x00030248

000d88ac <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d88ac:	b508      	push	{r3, lr}
   d88ae:	4b02      	ldr	r3, [pc, #8]	; (d88b8 <HAL_Feature_Set+0xc>)
   d88b0:	681b      	ldr	r3, [r3, #0]
   d88b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d88b4:	9301      	str	r3, [sp, #4]
   d88b6:	bd08      	pop	{r3, pc}
   d88b8:	00030234 	.word	0x00030234

000d88bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d88bc:	b508      	push	{r3, lr}
   d88be:	4b02      	ldr	r3, [pc, #8]	; (d88c8 <HAL_RNG_GetRandomNumber+0xc>)
   d88c0:	681b      	ldr	r3, [r3, #0]
   d88c2:	685b      	ldr	r3, [r3, #4]
   d88c4:	9301      	str	r3, [sp, #4]
   d88c6:	bd08      	pop	{r3, pc}
   d88c8:	00030218 	.word	0x00030218

000d88cc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d88cc:	b508      	push	{r3, lr}
   d88ce:	4b02      	ldr	r3, [pc, #8]	; (d88d8 <HAL_Delay_Microseconds+0xc>)
   d88d0:	681b      	ldr	r3, [r3, #0]
   d88d2:	68db      	ldr	r3, [r3, #12]
   d88d4:	9301      	str	r3, [sp, #4]
   d88d6:	bd08      	pop	{r3, pc}
   d88d8:	00030218 	.word	0x00030218

000d88dc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d88dc:	b508      	push	{r3, lr}
   d88de:	4b02      	ldr	r3, [pc, #8]	; (d88e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d88e0:	681b      	ldr	r3, [r3, #0]
   d88e2:	695b      	ldr	r3, [r3, #20]
   d88e4:	9301      	str	r3, [sp, #4]
   d88e6:	bd08      	pop	{r3, pc}
   d88e8:	00030218 	.word	0x00030218

000d88ec <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d88ec:	b508      	push	{r3, lr}
   d88ee:	4b02      	ldr	r3, [pc, #8]	; (d88f8 <hal_rtc_time_is_valid+0xc>)
   d88f0:	681b      	ldr	r3, [r3, #0]
   d88f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d88f4:	9301      	str	r3, [sp, #4]
   d88f6:	bd08      	pop	{r3, pc}
   d88f8:	00030218 	.word	0x00030218

000d88fc <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d88fc:	b508      	push	{r3, lr}
   d88fe:	4b02      	ldr	r3, [pc, #8]	; (d8908 <hal_rtc_get_time+0xc>)
   d8900:	681b      	ldr	r3, [r3, #0]
   d8902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d8904:	9301      	str	r3, [sp, #4]
   d8906:	bd08      	pop	{r3, pc}
   d8908:	00030218 	.word	0x00030218

000d890c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d890c:	b508      	push	{r3, lr}
   d890e:	4b02      	ldr	r3, [pc, #8]	; (d8918 <hal_rtc_set_time+0xc>)
   d8910:	681b      	ldr	r3, [r3, #0]
   d8912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d8914:	9301      	str	r3, [sp, #4]
   d8916:	bd08      	pop	{r3, pc}
   d8918:	00030218 	.word	0x00030218

000d891c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d891c:	b508      	push	{r3, lr}
   d891e:	4b02      	ldr	r3, [pc, #8]	; (d8928 <HAL_Validate_Pin_Function+0xc>)
   d8920:	681b      	ldr	r3, [r3, #0]
   d8922:	685b      	ldr	r3, [r3, #4]
   d8924:	9301      	str	r3, [sp, #4]
   d8926:	bd08      	pop	{r3, pc}
   d8928:	0003022c 	.word	0x0003022c

000d892c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d892c:	b508      	push	{r3, lr}
   d892e:	4b02      	ldr	r3, [pc, #8]	; (d8938 <HAL_Pin_Mode+0xc>)
   d8930:	681b      	ldr	r3, [r3, #0]
   d8932:	689b      	ldr	r3, [r3, #8]
   d8934:	9301      	str	r3, [sp, #4]
   d8936:	bd08      	pop	{r3, pc}
   d8938:	0003022c 	.word	0x0003022c

000d893c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d893c:	b508      	push	{r3, lr}
   d893e:	4b02      	ldr	r3, [pc, #8]	; (d8948 <HAL_Get_Pin_Mode+0xc>)
   d8940:	681b      	ldr	r3, [r3, #0]
   d8942:	68db      	ldr	r3, [r3, #12]
   d8944:	9301      	str	r3, [sp, #4]
   d8946:	bd08      	pop	{r3, pc}
   d8948:	0003022c 	.word	0x0003022c

000d894c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d894c:	b508      	push	{r3, lr}
   d894e:	4b02      	ldr	r3, [pc, #8]	; (d8958 <HAL_GPIO_Write+0xc>)
   d8950:	681b      	ldr	r3, [r3, #0]
   d8952:	691b      	ldr	r3, [r3, #16]
   d8954:	9301      	str	r3, [sp, #4]
   d8956:	bd08      	pop	{r3, pc}
   d8958:	0003022c 	.word	0x0003022c

000d895c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d895c:	b508      	push	{r3, lr}
   d895e:	4b02      	ldr	r3, [pc, #8]	; (d8968 <HAL_GPIO_Read+0xc>)
   d8960:	681b      	ldr	r3, [r3, #0]
   d8962:	695b      	ldr	r3, [r3, #20]
   d8964:	9301      	str	r3, [sp, #4]
   d8966:	bd08      	pop	{r3, pc}
   d8968:	0003022c 	.word	0x0003022c

000d896c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d896c:	b508      	push	{r3, lr}
   d896e:	4b02      	ldr	r3, [pc, #8]	; (d8978 <HAL_Interrupts_Attach+0xc>)
   d8970:	681b      	ldr	r3, [r3, #0]
   d8972:	699b      	ldr	r3, [r3, #24]
   d8974:	9301      	str	r3, [sp, #4]
   d8976:	bd08      	pop	{r3, pc}
   d8978:	0003022c 	.word	0x0003022c

000d897c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d897c:	b508      	push	{r3, lr}
   d897e:	4b02      	ldr	r3, [pc, #8]	; (d8988 <HAL_Interrupts_Detach+0xc>)
   d8980:	681b      	ldr	r3, [r3, #0]
   d8982:	69db      	ldr	r3, [r3, #28]
   d8984:	9301      	str	r3, [sp, #4]
   d8986:	bd08      	pop	{r3, pc}
   d8988:	0003022c 	.word	0x0003022c

000d898c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d898c:	b508      	push	{r3, lr}
   d898e:	4b02      	ldr	r3, [pc, #8]	; (d8998 <hal_adc_read+0xc>)
   d8990:	681b      	ldr	r3, [r3, #0]
   d8992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8994:	9301      	str	r3, [sp, #4]
   d8996:	bd08      	pop	{r3, pc}
   d8998:	0003022c 	.word	0x0003022c

000d899c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d899c:	b508      	push	{r3, lr}
   d899e:	4b02      	ldr	r3, [pc, #8]	; (d89a8 <hal_i2c_begin+0xc>)
   d89a0:	681b      	ldr	r3, [r3, #0]
   d89a2:	68db      	ldr	r3, [r3, #12]
   d89a4:	9301      	str	r3, [sp, #4]
   d89a6:	bd08      	pop	{r3, pc}
   d89a8:	00030228 	.word	0x00030228

000d89ac <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d89ac:	b508      	push	{r3, lr}
   d89ae:	4b02      	ldr	r3, [pc, #8]	; (d89b8 <hal_i2c_begin_transmission+0xc>)
   d89b0:	681b      	ldr	r3, [r3, #0]
   d89b2:	699b      	ldr	r3, [r3, #24]
   d89b4:	9301      	str	r3, [sp, #4]
   d89b6:	bd08      	pop	{r3, pc}
   d89b8:	00030228 	.word	0x00030228

000d89bc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d89bc:	b508      	push	{r3, lr}
   d89be:	4b02      	ldr	r3, [pc, #8]	; (d89c8 <hal_i2c_end_transmission+0xc>)
   d89c0:	681b      	ldr	r3, [r3, #0]
   d89c2:	69db      	ldr	r3, [r3, #28]
   d89c4:	9301      	str	r3, [sp, #4]
   d89c6:	bd08      	pop	{r3, pc}
   d89c8:	00030228 	.word	0x00030228

000d89cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d89cc:	b508      	push	{r3, lr}
   d89ce:	4b02      	ldr	r3, [pc, #8]	; (d89d8 <hal_i2c_write+0xc>)
   d89d0:	681b      	ldr	r3, [r3, #0]
   d89d2:	6a1b      	ldr	r3, [r3, #32]
   d89d4:	9301      	str	r3, [sp, #4]
   d89d6:	bd08      	pop	{r3, pc}
   d89d8:	00030228 	.word	0x00030228

000d89dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d89dc:	b508      	push	{r3, lr}
   d89de:	4b02      	ldr	r3, [pc, #8]	; (d89e8 <hal_i2c_available+0xc>)
   d89e0:	681b      	ldr	r3, [r3, #0]
   d89e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d89e4:	9301      	str	r3, [sp, #4]
   d89e6:	bd08      	pop	{r3, pc}
   d89e8:	00030228 	.word	0x00030228

000d89ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d89ec:	b508      	push	{r3, lr}
   d89ee:	4b02      	ldr	r3, [pc, #8]	; (d89f8 <hal_i2c_read+0xc>)
   d89f0:	681b      	ldr	r3, [r3, #0]
   d89f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d89f4:	9301      	str	r3, [sp, #4]
   d89f6:	bd08      	pop	{r3, pc}
   d89f8:	00030228 	.word	0x00030228

000d89fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d89fc:	b508      	push	{r3, lr}
   d89fe:	4b02      	ldr	r3, [pc, #8]	; (d8a08 <hal_i2c_peek+0xc>)
   d8a00:	681b      	ldr	r3, [r3, #0]
   d8a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8a04:	9301      	str	r3, [sp, #4]
   d8a06:	bd08      	pop	{r3, pc}
   d8a08:	00030228 	.word	0x00030228

000d8a0c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d8a0c:	b508      	push	{r3, lr}
   d8a0e:	4b02      	ldr	r3, [pc, #8]	; (d8a18 <hal_i2c_flush+0xc>)
   d8a10:	681b      	ldr	r3, [r3, #0]
   d8a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8a14:	9301      	str	r3, [sp, #4]
   d8a16:	bd08      	pop	{r3, pc}
   d8a18:	00030228 	.word	0x00030228

000d8a1c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d8a1c:	b508      	push	{r3, lr}
   d8a1e:	4b02      	ldr	r3, [pc, #8]	; (d8a28 <hal_i2c_is_enabled+0xc>)
   d8a20:	681b      	ldr	r3, [r3, #0]
   d8a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8a24:	9301      	str	r3, [sp, #4]
   d8a26:	bd08      	pop	{r3, pc}
   d8a28:	00030228 	.word	0x00030228

000d8a2c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d8a2c:	b508      	push	{r3, lr}
   d8a2e:	4b02      	ldr	r3, [pc, #8]	; (d8a38 <hal_i2c_init+0xc>)
   d8a30:	681b      	ldr	r3, [r3, #0]
   d8a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8a34:	9301      	str	r3, [sp, #4]
   d8a36:	bd08      	pop	{r3, pc}
   d8a38:	00030228 	.word	0x00030228

000d8a3c <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d8a3c:	b508      	push	{r3, lr}
   d8a3e:	4b02      	ldr	r3, [pc, #8]	; (d8a48 <hal_i2c_lock+0xc>)
   d8a40:	681b      	ldr	r3, [r3, #0]
   d8a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8a44:	9301      	str	r3, [sp, #4]
   d8a46:	bd08      	pop	{r3, pc}
   d8a48:	00030228 	.word	0x00030228

000d8a4c <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d8a4c:	b508      	push	{r3, lr}
   d8a4e:	4b02      	ldr	r3, [pc, #8]	; (d8a58 <hal_i2c_unlock+0xc>)
   d8a50:	681b      	ldr	r3, [r3, #0]
   d8a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8a54:	9301      	str	r3, [sp, #4]
   d8a56:	bd08      	pop	{r3, pc}
   d8a58:	00030228 	.word	0x00030228

000d8a5c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d8a5c:	b508      	push	{r3, lr}
   d8a5e:	4b02      	ldr	r3, [pc, #8]	; (d8a68 <hal_i2c_request_ex+0xc>)
   d8a60:	681b      	ldr	r3, [r3, #0]
   d8a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8a64:	9301      	str	r3, [sp, #4]
   d8a66:	bd08      	pop	{r3, pc}
   d8a68:	00030228 	.word	0x00030228

000d8a6c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d8a6c:	b508      	push	{r3, lr}
   d8a6e:	4b02      	ldr	r3, [pc, #8]	; (d8a78 <inet_inet_ntop+0xc>)
   d8a70:	681b      	ldr	r3, [r3, #0]
   d8a72:	695b      	ldr	r3, [r3, #20]
   d8a74:	9301      	str	r3, [sp, #4]
   d8a76:	bd08      	pop	{r3, pc}
   d8a78:	00030264 	.word	0x00030264

000d8a7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d8a7c:	b508      	push	{r3, lr}
   d8a7e:	4b02      	ldr	r3, [pc, #8]	; (d8a88 <netdb_freeaddrinfo+0xc>)
   d8a80:	681b      	ldr	r3, [r3, #0]
   d8a82:	689b      	ldr	r3, [r3, #8]
   d8a84:	9301      	str	r3, [sp, #4]
   d8a86:	bd08      	pop	{r3, pc}
   d8a88:	00030268 	.word	0x00030268

000d8a8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d8a8c:	b508      	push	{r3, lr}
   d8a8e:	4b02      	ldr	r3, [pc, #8]	; (d8a98 <netdb_getaddrinfo+0xc>)
   d8a90:	681b      	ldr	r3, [r3, #0]
   d8a92:	68db      	ldr	r3, [r3, #12]
   d8a94:	9301      	str	r3, [sp, #4]
   d8a96:	bd08      	pop	{r3, pc}
   d8a98:	00030268 	.word	0x00030268

000d8a9c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d8a9c:	b508      	push	{r3, lr}
   d8a9e:	4b02      	ldr	r3, [pc, #8]	; (d8aa8 <hal_spi_begin+0xc>)
   d8aa0:	681b      	ldr	r3, [r3, #0]
   d8aa2:	681b      	ldr	r3, [r3, #0]
   d8aa4:	9301      	str	r3, [sp, #4]
   d8aa6:	bd08      	pop	{r3, pc}
   d8aa8:	00030230 	.word	0x00030230

000d8aac <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d8aac:	b508      	push	{r3, lr}
   d8aae:	4b02      	ldr	r3, [pc, #8]	; (d8ab8 <hal_spi_end+0xc>)
   d8ab0:	681b      	ldr	r3, [r3, #0]
   d8ab2:	685b      	ldr	r3, [r3, #4]
   d8ab4:	9301      	str	r3, [sp, #4]
   d8ab6:	bd08      	pop	{r3, pc}
   d8ab8:	00030230 	.word	0x00030230

000d8abc <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d8abc:	b508      	push	{r3, lr}
   d8abe:	4b02      	ldr	r3, [pc, #8]	; (d8ac8 <hal_spi_transfer+0xc>)
   d8ac0:	681b      	ldr	r3, [r3, #0]
   d8ac2:	695b      	ldr	r3, [r3, #20]
   d8ac4:	9301      	str	r3, [sp, #4]
   d8ac6:	bd08      	pop	{r3, pc}
   d8ac8:	00030230 	.word	0x00030230

000d8acc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d8acc:	b508      	push	{r3, lr}
   d8ace:	4b02      	ldr	r3, [pc, #8]	; (d8ad8 <hal_spi_init+0xc>)
   d8ad0:	681b      	ldr	r3, [r3, #0]
   d8ad2:	69db      	ldr	r3, [r3, #28]
   d8ad4:	9301      	str	r3, [sp, #4]
   d8ad6:	bd08      	pop	{r3, pc}
   d8ad8:	00030230 	.word	0x00030230

000d8adc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d8adc:	b508      	push	{r3, lr}
   d8ade:	4b02      	ldr	r3, [pc, #8]	; (d8ae8 <hal_spi_is_enabled+0xc>)
   d8ae0:	681b      	ldr	r3, [r3, #0]
   d8ae2:	6a1b      	ldr	r3, [r3, #32]
   d8ae4:	9301      	str	r3, [sp, #4]
   d8ae6:	bd08      	pop	{r3, pc}
   d8ae8:	00030230 	.word	0x00030230

000d8aec <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d8aec:	b508      	push	{r3, lr}
   d8aee:	4b02      	ldr	r3, [pc, #8]	; (d8af8 <hal_spi_info+0xc>)
   d8af0:	681b      	ldr	r3, [r3, #0]
   d8af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8af4:	9301      	str	r3, [sp, #4]
   d8af6:	bd08      	pop	{r3, pc}
   d8af8:	00030230 	.word	0x00030230

000d8afc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d8afc:	b508      	push	{r3, lr}
   d8afe:	4b02      	ldr	r3, [pc, #8]	; (d8b08 <hal_spi_set_settings+0xc>)
   d8b00:	681b      	ldr	r3, [r3, #0]
   d8b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8b04:	9301      	str	r3, [sp, #4]
   d8b06:	bd08      	pop	{r3, pc}
   d8b08:	00030230 	.word	0x00030230

000d8b0c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d8b0c:	b508      	push	{r3, lr}
   d8b0e:	4b02      	ldr	r3, [pc, #8]	; (d8b18 <hal_spi_acquire+0xc>)
   d8b10:	681b      	ldr	r3, [r3, #0]
   d8b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8b14:	9301      	str	r3, [sp, #4]
   d8b16:	bd08      	pop	{r3, pc}
   d8b18:	00030230 	.word	0x00030230

000d8b1c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d8b1c:	b508      	push	{r3, lr}
   d8b1e:	4b02      	ldr	r3, [pc, #8]	; (d8b28 <hal_spi_release+0xc>)
   d8b20:	681b      	ldr	r3, [r3, #0]
   d8b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8b24:	9301      	str	r3, [sp, #4]
   d8b26:	bd08      	pop	{r3, pc}
   d8b28:	00030230 	.word	0x00030230

000d8b2c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d8b2c:	b508      	push	{r3, lr}
   d8b2e:	4b02      	ldr	r3, [pc, #8]	; (d8b38 <hal_usart_init+0xc>)
   d8b30:	681b      	ldr	r3, [r3, #0]
   d8b32:	681b      	ldr	r3, [r3, #0]
   d8b34:	9301      	str	r3, [sp, #4]
   d8b36:	bd08      	pop	{r3, pc}
   d8b38:	0003023c 	.word	0x0003023c

000d8b3c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d8b3c:	b508      	push	{r3, lr}
   d8b3e:	4b02      	ldr	r3, [pc, #8]	; (d8b48 <hal_usart_end+0xc>)
   d8b40:	681b      	ldr	r3, [r3, #0]
   d8b42:	689b      	ldr	r3, [r3, #8]
   d8b44:	9301      	str	r3, [sp, #4]
   d8b46:	bd08      	pop	{r3, pc}
   d8b48:	0003023c 	.word	0x0003023c

000d8b4c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d8b4c:	b508      	push	{r3, lr}
   d8b4e:	4b02      	ldr	r3, [pc, #8]	; (d8b58 <hal_usart_write+0xc>)
   d8b50:	681b      	ldr	r3, [r3, #0]
   d8b52:	68db      	ldr	r3, [r3, #12]
   d8b54:	9301      	str	r3, [sp, #4]
   d8b56:	bd08      	pop	{r3, pc}
   d8b58:	0003023c 	.word	0x0003023c

000d8b5c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d8b5c:	b508      	push	{r3, lr}
   d8b5e:	4b02      	ldr	r3, [pc, #8]	; (d8b68 <hal_usart_available+0xc>)
   d8b60:	681b      	ldr	r3, [r3, #0]
   d8b62:	691b      	ldr	r3, [r3, #16]
   d8b64:	9301      	str	r3, [sp, #4]
   d8b66:	bd08      	pop	{r3, pc}
   d8b68:	0003023c 	.word	0x0003023c

000d8b6c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d8b6c:	b508      	push	{r3, lr}
   d8b6e:	4b02      	ldr	r3, [pc, #8]	; (d8b78 <hal_usart_read+0xc>)
   d8b70:	681b      	ldr	r3, [r3, #0]
   d8b72:	695b      	ldr	r3, [r3, #20]
   d8b74:	9301      	str	r3, [sp, #4]
   d8b76:	bd08      	pop	{r3, pc}
   d8b78:	0003023c 	.word	0x0003023c

000d8b7c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d8b7c:	b508      	push	{r3, lr}
   d8b7e:	4b02      	ldr	r3, [pc, #8]	; (d8b88 <hal_usart_peek+0xc>)
   d8b80:	681b      	ldr	r3, [r3, #0]
   d8b82:	699b      	ldr	r3, [r3, #24]
   d8b84:	9301      	str	r3, [sp, #4]
   d8b86:	bd08      	pop	{r3, pc}
   d8b88:	0003023c 	.word	0x0003023c

000d8b8c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d8b8c:	b508      	push	{r3, lr}
   d8b8e:	4b02      	ldr	r3, [pc, #8]	; (d8b98 <hal_usart_flush+0xc>)
   d8b90:	681b      	ldr	r3, [r3, #0]
   d8b92:	69db      	ldr	r3, [r3, #28]
   d8b94:	9301      	str	r3, [sp, #4]
   d8b96:	bd08      	pop	{r3, pc}
   d8b98:	0003023c 	.word	0x0003023c

000d8b9c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d8b9c:	b508      	push	{r3, lr}
   d8b9e:	4b02      	ldr	r3, [pc, #8]	; (d8ba8 <hal_usart_is_enabled+0xc>)
   d8ba0:	681b      	ldr	r3, [r3, #0]
   d8ba2:	6a1b      	ldr	r3, [r3, #32]
   d8ba4:	9301      	str	r3, [sp, #4]
   d8ba6:	bd08      	pop	{r3, pc}
   d8ba8:	0003023c 	.word	0x0003023c

000d8bac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d8bac:	b508      	push	{r3, lr}
   d8bae:	4b02      	ldr	r3, [pc, #8]	; (d8bb8 <hal_usart_available_data_for_write+0xc>)
   d8bb0:	681b      	ldr	r3, [r3, #0]
   d8bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d8bb4:	9301      	str	r3, [sp, #4]
   d8bb6:	bd08      	pop	{r3, pc}
   d8bb8:	0003023c 	.word	0x0003023c

000d8bbc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d8bbc:	b508      	push	{r3, lr}
   d8bbe:	4b02      	ldr	r3, [pc, #8]	; (d8bc8 <hal_usart_begin_config+0xc>)
   d8bc0:	681b      	ldr	r3, [r3, #0]
   d8bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8bc4:	9301      	str	r3, [sp, #4]
   d8bc6:	bd08      	pop	{r3, pc}
   d8bc8:	0003023c 	.word	0x0003023c

000d8bcc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d8bcc:	b508      	push	{r3, lr}
   d8bce:	4b02      	ldr	r3, [pc, #8]	; (d8bd8 <HAL_USB_USART_Init+0xc>)
   d8bd0:	681b      	ldr	r3, [r3, #0]
   d8bd2:	681b      	ldr	r3, [r3, #0]
   d8bd4:	9301      	str	r3, [sp, #4]
   d8bd6:	bd08      	pop	{r3, pc}
   d8bd8:	0003024c 	.word	0x0003024c

000d8bdc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d8bdc:	b508      	push	{r3, lr}
   d8bde:	4b02      	ldr	r3, [pc, #8]	; (d8be8 <HAL_USB_USART_Begin+0xc>)
   d8be0:	681b      	ldr	r3, [r3, #0]
   d8be2:	685b      	ldr	r3, [r3, #4]
   d8be4:	9301      	str	r3, [sp, #4]
   d8be6:	bd08      	pop	{r3, pc}
   d8be8:	0003024c 	.word	0x0003024c

000d8bec <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d8bec:	b508      	push	{r3, lr}
   d8bee:	4b02      	ldr	r3, [pc, #8]	; (d8bf8 <HAL_USB_USART_End+0xc>)
   d8bf0:	681b      	ldr	r3, [r3, #0]
   d8bf2:	689b      	ldr	r3, [r3, #8]
   d8bf4:	9301      	str	r3, [sp, #4]
   d8bf6:	bd08      	pop	{r3, pc}
   d8bf8:	0003024c 	.word	0x0003024c

000d8bfc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d8bfc:	b508      	push	{r3, lr}
   d8bfe:	4b02      	ldr	r3, [pc, #8]	; (d8c08 <HAL_USB_USART_Available_Data+0xc>)
   d8c00:	681b      	ldr	r3, [r3, #0]
   d8c02:	691b      	ldr	r3, [r3, #16]
   d8c04:	9301      	str	r3, [sp, #4]
   d8c06:	bd08      	pop	{r3, pc}
   d8c08:	0003024c 	.word	0x0003024c

000d8c0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d8c0c:	b508      	push	{r3, lr}
   d8c0e:	4b02      	ldr	r3, [pc, #8]	; (d8c18 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d8c10:	681b      	ldr	r3, [r3, #0]
   d8c12:	695b      	ldr	r3, [r3, #20]
   d8c14:	9301      	str	r3, [sp, #4]
   d8c16:	bd08      	pop	{r3, pc}
   d8c18:	0003024c 	.word	0x0003024c

000d8c1c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8c1c:	b508      	push	{r3, lr}
   d8c1e:	4b02      	ldr	r3, [pc, #8]	; (d8c28 <HAL_USB_USART_Receive_Data+0xc>)
   d8c20:	681b      	ldr	r3, [r3, #0]
   d8c22:	699b      	ldr	r3, [r3, #24]
   d8c24:	9301      	str	r3, [sp, #4]
   d8c26:	bd08      	pop	{r3, pc}
   d8c28:	0003024c 	.word	0x0003024c

000d8c2c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d8c2c:	b508      	push	{r3, lr}
   d8c2e:	4b02      	ldr	r3, [pc, #8]	; (d8c38 <HAL_USB_USART_Send_Data+0xc>)
   d8c30:	681b      	ldr	r3, [r3, #0]
   d8c32:	69db      	ldr	r3, [r3, #28]
   d8c34:	9301      	str	r3, [sp, #4]
   d8c36:	bd08      	pop	{r3, pc}
   d8c38:	0003024c 	.word	0x0003024c

000d8c3c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d8c3c:	b508      	push	{r3, lr}
   d8c3e:	4b02      	ldr	r3, [pc, #8]	; (d8c48 <HAL_USB_USART_Flush_Data+0xc>)
   d8c40:	681b      	ldr	r3, [r3, #0]
   d8c42:	6a1b      	ldr	r3, [r3, #32]
   d8c44:	9301      	str	r3, [sp, #4]
   d8c46:	bd08      	pop	{r3, pc}
   d8c48:	0003024c 	.word	0x0003024c

000d8c4c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d8c4c:	b508      	push	{r3, lr}
   d8c4e:	4b02      	ldr	r3, [pc, #8]	; (d8c58 <panic_+0xc>)
   d8c50:	681b      	ldr	r3, [r3, #0]
   d8c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8c54:	9301      	str	r3, [sp, #4]
   d8c56:	bd08      	pop	{r3, pc}
   d8c58:	00030260 	.word	0x00030260

000d8c5c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d8c5c:	b508      	push	{r3, lr}
   d8c5e:	4b02      	ldr	r3, [pc, #8]	; (d8c68 <log_message+0xc>)
   d8c60:	681b      	ldr	r3, [r3, #0]
   d8c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8c64:	9301      	str	r3, [sp, #4]
   d8c66:	bd08      	pop	{r3, pc}
   d8c68:	00030260 	.word	0x00030260

000d8c6c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d8c6c:	b508      	push	{r3, lr}
   d8c6e:	4b02      	ldr	r3, [pc, #8]	; (d8c78 <log_message_v+0xc>)
   d8c70:	681b      	ldr	r3, [r3, #0]
   d8c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8c74:	9301      	str	r3, [sp, #4]
   d8c76:	bd08      	pop	{r3, pc}
   d8c78:	00030260 	.word	0x00030260

000d8c7c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d8c7c:	b508      	push	{r3, lr}
   d8c7e:	4b02      	ldr	r3, [pc, #8]	; (d8c88 <log_level_name+0xc>)
   d8c80:	681b      	ldr	r3, [r3, #0]
   d8c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d8c84:	9301      	str	r3, [sp, #4]
   d8c86:	bd08      	pop	{r3, pc}
   d8c88:	00030260 	.word	0x00030260

000d8c8c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d8c8c:	b508      	push	{r3, lr}
   d8c8e:	4b02      	ldr	r3, [pc, #8]	; (d8c98 <log_set_callbacks+0xc>)
   d8c90:	681b      	ldr	r3, [r3, #0]
   d8c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d8c94:	9301      	str	r3, [sp, #4]
   d8c96:	bd08      	pop	{r3, pc}
   d8c98:	00030260 	.word	0x00030260

000d8c9c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d8c9c:	b508      	push	{r3, lr}
   d8c9e:	4b03      	ldr	r3, [pc, #12]	; (d8cac <diag_get_source+0x10>)
   d8ca0:	681b      	ldr	r3, [r3, #0]
   d8ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d8ca6:	9301      	str	r3, [sp, #4]
   d8ca8:	bd08      	pop	{r3, pc}
   d8caa:	0000      	.short	0x0000
   d8cac:	00030260 	.word	0x00030260

000d8cb0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d8cb0:	b508      	push	{r3, lr}
   d8cb2:	4b02      	ldr	r3, [pc, #8]	; (d8cbc <system_mode+0xc>)
   d8cb4:	681b      	ldr	r3, [r3, #0]
   d8cb6:	681b      	ldr	r3, [r3, #0]
   d8cb8:	9301      	str	r3, [sp, #4]
   d8cba:	bd08      	pop	{r3, pc}
   d8cbc:	00030220 	.word	0x00030220

000d8cc0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d8cc0:	b508      	push	{r3, lr}
   d8cc2:	4b02      	ldr	r3, [pc, #8]	; (d8ccc <set_system_mode+0xc>)
   d8cc4:	681b      	ldr	r3, [r3, #0]
   d8cc6:	685b      	ldr	r3, [r3, #4]
   d8cc8:	9301      	str	r3, [sp, #4]
   d8cca:	bd08      	pop	{r3, pc}
   d8ccc:	00030220 	.word	0x00030220

000d8cd0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d8cd0:	b508      	push	{r3, lr}
   d8cd2:	4b02      	ldr	r3, [pc, #8]	; (d8cdc <system_delay_ms+0xc>)
   d8cd4:	681b      	ldr	r3, [r3, #0]
   d8cd6:	695b      	ldr	r3, [r3, #20]
   d8cd8:	9301      	str	r3, [sp, #4]
   d8cda:	bd08      	pop	{r3, pc}
   d8cdc:	00030220 	.word	0x00030220

000d8ce0 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d8ce0:	b508      	push	{r3, lr}
   d8ce2:	4b02      	ldr	r3, [pc, #8]	; (d8cec <system_subscribe_event+0xc>)
   d8ce4:	681b      	ldr	r3, [r3, #0]
   d8ce6:	6a1b      	ldr	r3, [r3, #32]
   d8ce8:	9301      	str	r3, [sp, #4]
   d8cea:	bd08      	pop	{r3, pc}
   d8cec:	00030220 	.word	0x00030220

000d8cf0 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d8cf0:	b508      	push	{r3, lr}
   d8cf2:	4b02      	ldr	r3, [pc, #8]	; (d8cfc <system_thread_set_state+0xc>)
   d8cf4:	681b      	ldr	r3, [r3, #0]
   d8cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8cf8:	9301      	str	r3, [sp, #4]
   d8cfa:	bd08      	pop	{r3, pc}
   d8cfc:	00030220 	.word	0x00030220

000d8d00 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d8d00:	b508      	push	{r3, lr}
   d8d02:	4b02      	ldr	r3, [pc, #8]	; (d8d0c <application_thread_current+0xc>)
   d8d04:	681b      	ldr	r3, [r3, #0]
   d8d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8d08:	9301      	str	r3, [sp, #4]
   d8d0a:	bd08      	pop	{r3, pc}
   d8d0c:	00030220 	.word	0x00030220

000d8d10 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d8d10:	b508      	push	{r3, lr}
   d8d12:	4b02      	ldr	r3, [pc, #8]	; (d8d1c <application_thread_invoke+0xc>)
   d8d14:	681b      	ldr	r3, [r3, #0]
   d8d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8d18:	9301      	str	r3, [sp, #4]
   d8d1a:	bd08      	pop	{r3, pc}
   d8d1c:	00030220 	.word	0x00030220

000d8d20 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d8d20:	b508      	push	{r3, lr}
   d8d22:	4b02      	ldr	r3, [pc, #8]	; (d8d2c <system_thread_get_state+0xc>)
   d8d24:	681b      	ldr	r3, [r3, #0]
   d8d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d8d28:	9301      	str	r3, [sp, #4]
   d8d2a:	bd08      	pop	{r3, pc}
   d8d2c:	00030220 	.word	0x00030220

000d8d30 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d8d30:	b508      	push	{r3, lr}
   d8d32:	4b02      	ldr	r3, [pc, #8]	; (d8d3c <system_notify_time_changed+0xc>)
   d8d34:	681b      	ldr	r3, [r3, #0]
   d8d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d8d38:	9301      	str	r3, [sp, #4]
   d8d3a:	bd08      	pop	{r3, pc}
   d8d3c:	00030220 	.word	0x00030220

000d8d40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d8d40:	b508      	push	{r3, lr}
   d8d42:	4b03      	ldr	r3, [pc, #12]	; (d8d50 <system_ctrl_set_app_request_handler+0x10>)
   d8d44:	681b      	ldr	r3, [r3, #0]
   d8d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d8d4a:	9301      	str	r3, [sp, #4]
   d8d4c:	bd08      	pop	{r3, pc}
   d8d4e:	0000      	.short	0x0000
   d8d50:	00030220 	.word	0x00030220

000d8d54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d8d54:	b508      	push	{r3, lr}
   d8d56:	4b03      	ldr	r3, [pc, #12]	; (d8d64 <system_ctrl_set_result+0x10>)
   d8d58:	681b      	ldr	r3, [r3, #0]
   d8d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d8d5e:	9301      	str	r3, [sp, #4]
   d8d60:	bd08      	pop	{r3, pc}
   d8d62:	0000      	.short	0x0000
   d8d64:	00030220 	.word	0x00030220

000d8d68 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d8d68:	b508      	push	{r3, lr}
   d8d6a:	4b03      	ldr	r3, [pc, #12]	; (d8d78 <system_power_management_set_config+0x10>)
   d8d6c:	681b      	ldr	r3, [r3, #0]
   d8d6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d8d72:	9301      	str	r3, [sp, #4]
   d8d74:	bd08      	pop	{r3, pc}
   d8d76:	0000      	.short	0x0000
   d8d78:	00030220 	.word	0x00030220

000d8d7c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d8d7c:	b508      	push	{r3, lr}
   d8d7e:	4b03      	ldr	r3, [pc, #12]	; (d8d8c <system_sleep_ext+0x10>)
   d8d80:	681b      	ldr	r3, [r3, #0]
   d8d82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d8d86:	9301      	str	r3, [sp, #4]
   d8d88:	bd08      	pop	{r3, pc}
   d8d8a:	0000      	.short	0x0000
   d8d8c:	00030220 	.word	0x00030220

000d8d90 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d8d90:	b508      	push	{r3, lr}
   d8d92:	4b02      	ldr	r3, [pc, #8]	; (d8d9c <spark_process+0xc>)
   d8d94:	681b      	ldr	r3, [r3, #0]
   d8d96:	689b      	ldr	r3, [r3, #8]
   d8d98:	9301      	str	r3, [sp, #4]
   d8d9a:	bd08      	pop	{r3, pc}
   d8d9c:	00030244 	.word	0x00030244

000d8da0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d8da0:	b508      	push	{r3, lr}
   d8da2:	4b02      	ldr	r3, [pc, #8]	; (d8dac <spark_cloud_flag_connected+0xc>)
   d8da4:	681b      	ldr	r3, [r3, #0]
   d8da6:	695b      	ldr	r3, [r3, #20]
   d8da8:	9301      	str	r3, [sp, #4]
   d8daa:	bd08      	pop	{r3, pc}
   d8dac:	00030244 	.word	0x00030244

000d8db0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d8db0:	b508      	push	{r3, lr}
   d8db2:	4b02      	ldr	r3, [pc, #8]	; (d8dbc <spark_send_event+0xc>)
   d8db4:	681b      	ldr	r3, [r3, #0]
   d8db6:	6a1b      	ldr	r3, [r3, #32]
   d8db8:	9301      	str	r3, [sp, #4]
   d8dba:	bd08      	pop	{r3, pc}
   d8dbc:	00030244 	.word	0x00030244

000d8dc0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d8dc0:	b508      	push	{r3, lr}
   d8dc2:	4b02      	ldr	r3, [pc, #8]	; (d8dcc <spark_sync_time_pending+0xc>)
   d8dc4:	681b      	ldr	r3, [r3, #0]
   d8dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8dc8:	9301      	str	r3, [sp, #4]
   d8dca:	bd08      	pop	{r3, pc}
   d8dcc:	00030244 	.word	0x00030244

000d8dd0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d8dd0:	b508      	push	{r3, lr}
   d8dd2:	4b02      	ldr	r3, [pc, #8]	; (d8ddc <spark_sync_time_last+0xc>)
   d8dd4:	681b      	ldr	r3, [r3, #0]
   d8dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8dd8:	9301      	str	r3, [sp, #4]
   d8dda:	bd08      	pop	{r3, pc}
   d8ddc:	00030244 	.word	0x00030244

000d8de0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d8de0:	b508      	push	{r3, lr}
   d8de2:	4b02      	ldr	r3, [pc, #8]	; (d8dec <spark_set_random_seed_from_cloud_handler+0xc>)
   d8de4:	681b      	ldr	r3, [r3, #0]
   d8de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d8de8:	9301      	str	r3, [sp, #4]
   d8dea:	bd08      	pop	{r3, pc}
   d8dec:	00030244 	.word	0x00030244

000d8df0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d8df0:	b508      	push	{r3, lr}
   d8df2:	4b02      	ldr	r3, [pc, #8]	; (d8dfc <network_connect+0xc>)
   d8df4:	681b      	ldr	r3, [r3, #0]
   d8df6:	685b      	ldr	r3, [r3, #4]
   d8df8:	9301      	str	r3, [sp, #4]
   d8dfa:	bd08      	pop	{r3, pc}
   d8dfc:	00030240 	.word	0x00030240

000d8e00 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d8e00:	b508      	push	{r3, lr}
   d8e02:	4b02      	ldr	r3, [pc, #8]	; (d8e0c <network_connecting+0xc>)
   d8e04:	681b      	ldr	r3, [r3, #0]
   d8e06:	689b      	ldr	r3, [r3, #8]
   d8e08:	9301      	str	r3, [sp, #4]
   d8e0a:	bd08      	pop	{r3, pc}
   d8e0c:	00030240 	.word	0x00030240

000d8e10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d8e10:	b508      	push	{r3, lr}
   d8e12:	4b02      	ldr	r3, [pc, #8]	; (d8e1c <network_disconnect+0xc>)
   d8e14:	681b      	ldr	r3, [r3, #0]
   d8e16:	68db      	ldr	r3, [r3, #12]
   d8e18:	9301      	str	r3, [sp, #4]
   d8e1a:	bd08      	pop	{r3, pc}
   d8e1c:	00030240 	.word	0x00030240

000d8e20 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d8e20:	b508      	push	{r3, lr}
   d8e22:	4b02      	ldr	r3, [pc, #8]	; (d8e2c <network_ready+0xc>)
   d8e24:	681b      	ldr	r3, [r3, #0]
   d8e26:	691b      	ldr	r3, [r3, #16]
   d8e28:	9301      	str	r3, [sp, #4]
   d8e2a:	bd08      	pop	{r3, pc}
   d8e2c:	00030240 	.word	0x00030240

000d8e30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d8e30:	b508      	push	{r3, lr}
   d8e32:	4b02      	ldr	r3, [pc, #8]	; (d8e3c <network_on+0xc>)
   d8e34:	681b      	ldr	r3, [r3, #0]
   d8e36:	695b      	ldr	r3, [r3, #20]
   d8e38:	9301      	str	r3, [sp, #4]
   d8e3a:	bd08      	pop	{r3, pc}
   d8e3c:	00030240 	.word	0x00030240

000d8e40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d8e40:	b508      	push	{r3, lr}
   d8e42:	4b02      	ldr	r3, [pc, #8]	; (d8e4c <network_off+0xc>)
   d8e44:	681b      	ldr	r3, [r3, #0]
   d8e46:	699b      	ldr	r3, [r3, #24]
   d8e48:	9301      	str	r3, [sp, #4]
   d8e4a:	bd08      	pop	{r3, pc}
   d8e4c:	00030240 	.word	0x00030240

000d8e50 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d8e50:	b508      	push	{r3, lr}
   d8e52:	4b02      	ldr	r3, [pc, #8]	; (d8e5c <network_listen+0xc>)
   d8e54:	681b      	ldr	r3, [r3, #0]
   d8e56:	69db      	ldr	r3, [r3, #28]
   d8e58:	9301      	str	r3, [sp, #4]
   d8e5a:	bd08      	pop	{r3, pc}
   d8e5c:	00030240 	.word	0x00030240

000d8e60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d8e60:	b508      	push	{r3, lr}
   d8e62:	4b02      	ldr	r3, [pc, #8]	; (d8e6c <network_listening+0xc>)
   d8e64:	681b      	ldr	r3, [r3, #0]
   d8e66:	6a1b      	ldr	r3, [r3, #32]
   d8e68:	9301      	str	r3, [sp, #4]
   d8e6a:	bd08      	pop	{r3, pc}
   d8e6c:	00030240 	.word	0x00030240

000d8e70 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d8e70:	b508      	push	{r3, lr}
   d8e72:	4b02      	ldr	r3, [pc, #8]	; (d8e7c <network_set_listen_timeout+0xc>)
   d8e74:	681b      	ldr	r3, [r3, #0]
   d8e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8e78:	9301      	str	r3, [sp, #4]
   d8e7a:	bd08      	pop	{r3, pc}
   d8e7c:	00030240 	.word	0x00030240

000d8e80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d8e80:	b508      	push	{r3, lr}
   d8e82:	4b02      	ldr	r3, [pc, #8]	; (d8e8c <network_get_listen_timeout+0xc>)
   d8e84:	681b      	ldr	r3, [r3, #0]
   d8e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d8e88:	9301      	str	r3, [sp, #4]
   d8e8a:	bd08      	pop	{r3, pc}
   d8e8c:	00030240 	.word	0x00030240

000d8e90 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d8e90:	b508      	push	{r3, lr}
   d8e92:	4b02      	ldr	r3, [pc, #8]	; (d8e9c <network_is_on+0xc>)
   d8e94:	681b      	ldr	r3, [r3, #0]
   d8e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d8e98:	9301      	str	r3, [sp, #4]
   d8e9a:	bd08      	pop	{r3, pc}
   d8e9c:	00030240 	.word	0x00030240

000d8ea0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d8ea0:	b508      	push	{r3, lr}
   d8ea2:	4b02      	ldr	r3, [pc, #8]	; (d8eac <network_is_off+0xc>)
   d8ea4:	681b      	ldr	r3, [r3, #0]
   d8ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8ea8:	9301      	str	r3, [sp, #4]
   d8eaa:	bd08      	pop	{r3, pc}
   d8eac:	00030240 	.word	0x00030240

000d8eb0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d8eb0:	b508      	push	{r3, lr}
   d8eb2:	4b02      	ldr	r3, [pc, #8]	; (d8ebc <malloc+0xc>)
   d8eb4:	681b      	ldr	r3, [r3, #0]
   d8eb6:	681b      	ldr	r3, [r3, #0]
   d8eb8:	9301      	str	r3, [sp, #4]
   d8eba:	bd08      	pop	{r3, pc}
   d8ebc:	0003021c 	.word	0x0003021c

000d8ec0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d8ec0:	b508      	push	{r3, lr}
   d8ec2:	4b02      	ldr	r3, [pc, #8]	; (d8ecc <free+0xc>)
   d8ec4:	681b      	ldr	r3, [r3, #0]
   d8ec6:	685b      	ldr	r3, [r3, #4]
   d8ec8:	9301      	str	r3, [sp, #4]
   d8eca:	bd08      	pop	{r3, pc}
   d8ecc:	0003021c 	.word	0x0003021c

000d8ed0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d8ed0:	b508      	push	{r3, lr}
   d8ed2:	4b02      	ldr	r3, [pc, #8]	; (d8edc <realloc+0xc>)
   d8ed4:	681b      	ldr	r3, [r3, #0]
   d8ed6:	689b      	ldr	r3, [r3, #8]
   d8ed8:	9301      	str	r3, [sp, #4]
   d8eda:	bd08      	pop	{r3, pc}
   d8edc:	0003021c 	.word	0x0003021c

000d8ee0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d8ee0:	b508      	push	{r3, lr}
   d8ee2:	4b02      	ldr	r3, [pc, #8]	; (d8eec <siprintf+0xc>)
   d8ee4:	681b      	ldr	r3, [r3, #0]
   d8ee6:	691b      	ldr	r3, [r3, #16]
   d8ee8:	9301      	str	r3, [sp, #4]
   d8eea:	bd08      	pop	{r3, pc}
   d8eec:	0003021c 	.word	0x0003021c

000d8ef0 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d8ef0:	b508      	push	{r3, lr}
   d8ef2:	4b02      	ldr	r3, [pc, #8]	; (d8efc <sscanf+0xc>)
   d8ef4:	681b      	ldr	r3, [r3, #0]
   d8ef6:	695b      	ldr	r3, [r3, #20]
   d8ef8:	9301      	str	r3, [sp, #4]
   d8efa:	bd08      	pop	{r3, pc}
   d8efc:	0003021c 	.word	0x0003021c

000d8f00 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d8f00:	b508      	push	{r3, lr}
   d8f02:	4b02      	ldr	r3, [pc, #8]	; (d8f0c <snprintf+0xc>)
   d8f04:	681b      	ldr	r3, [r3, #0]
   d8f06:	69db      	ldr	r3, [r3, #28]
   d8f08:	9301      	str	r3, [sp, #4]
   d8f0a:	bd08      	pop	{r3, pc}
   d8f0c:	0003021c 	.word	0x0003021c

000d8f10 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d8f10:	b508      	push	{r3, lr}
   d8f12:	4b02      	ldr	r3, [pc, #8]	; (d8f1c <vsnprintf+0xc>)
   d8f14:	681b      	ldr	r3, [r3, #0]
   d8f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d8f18:	9301      	str	r3, [sp, #4]
   d8f1a:	bd08      	pop	{r3, pc}
   d8f1c:	0003021c 	.word	0x0003021c

000d8f20 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d8f20:	b508      	push	{r3, lr}
   d8f22:	4b02      	ldr	r3, [pc, #8]	; (d8f2c <abort+0xc>)
   d8f24:	681b      	ldr	r3, [r3, #0]
   d8f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8f28:	9301      	str	r3, [sp, #4]
   d8f2a:	bd08      	pop	{r3, pc}
   d8f2c:	0003021c 	.word	0x0003021c

000d8f30 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d8f30:	b508      	push	{r3, lr}
   d8f32:	4b02      	ldr	r3, [pc, #8]	; (d8f3c <_malloc_r+0xc>)
   d8f34:	681b      	ldr	r3, [r3, #0]
   d8f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d8f38:	9301      	str	r3, [sp, #4]
   d8f3a:	bd08      	pop	{r3, pc}
   d8f3c:	0003021c 	.word	0x0003021c

000d8f40 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d8f40:	b508      	push	{r3, lr}
   d8f42:	4b02      	ldr	r3, [pc, #8]	; (d8f4c <newlib_impure_ptr_callback+0xc>)
   d8f44:	681b      	ldr	r3, [r3, #0]
   d8f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d8f48:	9301      	str	r3, [sp, #4]
   d8f4a:	bd08      	pop	{r3, pc}
   d8f4c:	0003021c 	.word	0x0003021c

000d8f50 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d8f50:	b508      	push	{r3, lr}
   d8f52:	4b02      	ldr	r3, [pc, #8]	; (d8f5c <strftime+0xc>)
   d8f54:	681b      	ldr	r3, [r3, #0]
   d8f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d8f58:	9301      	str	r3, [sp, #4]
   d8f5a:	bd08      	pop	{r3, pc}
   d8f5c:	0003021c 	.word	0x0003021c

000d8f60 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8f60:	b508      	push	{r3, lr}
   d8f62:	4b02      	ldr	r3, [pc, #8]	; (d8f6c <localtime_r+0xc>)
   d8f64:	681b      	ldr	r3, [r3, #0]
   d8f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d8f68:	9301      	str	r3, [sp, #4]
   d8f6a:	bd08      	pop	{r3, pc}
   d8f6c:	0003021c 	.word	0x0003021c

000d8f70 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d8f70:	b508      	push	{r3, lr}
   d8f72:	4b02      	ldr	r3, [pc, #8]	; (d8f7c <gmtime_r+0xc>)
   d8f74:	681b      	ldr	r3, [r3, #0]
   d8f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d8f78:	9301      	str	r3, [sp, #4]
   d8f7a:	bd08      	pop	{r3, pc}
   d8f7c:	0003021c 	.word	0x0003021c

000d8f80 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d8f80:	b508      	push	{r3, lr}
   d8f82:	4b02      	ldr	r3, [pc, #8]	; (d8f8c <mktime+0xc>)
   d8f84:	681b      	ldr	r3, [r3, #0]
   d8f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d8f88:	9301      	str	r3, [sp, #4]
   d8f8a:	bd08      	pop	{r3, pc}
   d8f8c:	0003021c 	.word	0x0003021c

000d8f90 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d8f90:	2100      	movs	r1, #0
   d8f92:	f7ff be9d 	b.w	d8cd0 <system_delay_ms>

000d8f96 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d8f96:	b510      	push	{r4, lr}
      if (_M_empty())
   d8f98:	6883      	ldr	r3, [r0, #8]
   d8f9a:	4604      	mov	r4, r0
   d8f9c:	b90b      	cbnz	r3, d8fa2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d8f9e:	f003 f821 	bl	dbfe4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d8fa2:	68c3      	ldr	r3, [r0, #12]
   d8fa4:	4798      	blx	r3
      if (_M_manager)
   d8fa6:	68a3      	ldr	r3, [r4, #8]
   d8fa8:	b11b      	cbz	r3, d8fb2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8faa:	2203      	movs	r2, #3
   d8fac:	4621      	mov	r1, r4
   d8fae:	4620      	mov	r0, r4
   d8fb0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d8fb2:	4620      	mov	r0, r4
   d8fb4:	2110      	movs	r1, #16
}
   d8fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d8fba:	f003 b807 	b.w	dbfcc <_ZdlPvj>

000d8fbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d8fbe:	680b      	ldr	r3, [r1, #0]
   d8fc0:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d8fc2:	b113      	cbz	r3, d8fca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d8fc4:	685a      	ldr	r2, [r3, #4]
   d8fc6:	3201      	adds	r2, #1
   d8fc8:	605a      	str	r2, [r3, #4]
      }
   d8fca:	4770      	bx	lr

000d8fcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8fcc:	4802      	ldr	r0, [pc, #8]	; (d8fd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d8fce:	2300      	movs	r3, #0
   d8fd0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d8fd2:	f7ff bc4b 	b.w	d886c <os_mutex_recursive_create>
   d8fd6:	bf00      	nop
   d8fd8:	2003e528 	.word	0x2003e528

000d8fdc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d8fdc:	2200      	movs	r2, #0
   d8fde:	6840      	ldr	r0, [r0, #4]
   d8fe0:	4611      	mov	r1, r2
   d8fe2:	f7ff bf1d 	b.w	d8e20 <network_ready>

000d8fe6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d8fe6:	2200      	movs	r2, #0
   d8fe8:	6840      	ldr	r0, [r0, #4]
   d8fea:	4611      	mov	r1, r2
   d8fec:	f7ff bf38 	b.w	d8e60 <network_listening>

000d8ff0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8ff0:	2200      	movs	r2, #0
   d8ff2:	6840      	ldr	r0, [r0, #4]
   d8ff4:	4611      	mov	r1, r2
   d8ff6:	f7ff bf43 	b.w	d8e80 <network_get_listen_timeout>

000d8ffa <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8ffa:	6840      	ldr	r0, [r0, #4]
   d8ffc:	2200      	movs	r2, #0
   d8ffe:	f7ff bf37 	b.w	d8e70 <network_set_listen_timeout>

000d9002 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d9002:	6840      	ldr	r0, [r0, #4]
   d9004:	2200      	movs	r2, #0
   d9006:	f081 0101 	eor.w	r1, r1, #1
   d900a:	f7ff bf21 	b.w	d8e50 <network_listen>

000d900e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d900e:	2300      	movs	r3, #0
   d9010:	6840      	ldr	r0, [r0, #4]
   d9012:	461a      	mov	r2, r3
   d9014:	4619      	mov	r1, r3
   d9016:	f7ff bf13 	b.w	d8e40 <network_off>

000d901a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d901a:	2300      	movs	r3, #0
   d901c:	6840      	ldr	r0, [r0, #4]
   d901e:	461a      	mov	r2, r3
   d9020:	4619      	mov	r1, r3
   d9022:	f7ff bf05 	b.w	d8e30 <network_on>

000d9026 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9026:	2200      	movs	r2, #0
   d9028:	6840      	ldr	r0, [r0, #4]
   d902a:	4611      	mov	r1, r2
   d902c:	f7ff bee8 	b.w	d8e00 <network_connecting>

000d9030 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9030:	6840      	ldr	r0, [r0, #4]
   d9032:	2200      	movs	r2, #0
   d9034:	2102      	movs	r1, #2
   d9036:	f7ff beeb 	b.w	d8e10 <network_disconnect>

000d903a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d903a:	2300      	movs	r3, #0
   d903c:	6840      	ldr	r0, [r0, #4]
   d903e:	461a      	mov	r2, r3
   d9040:	f7ff bed6 	b.w	d8df0 <network_connect>

000d9044 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d9044:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d9046:	4b1b      	ldr	r3, [pc, #108]	; (d90b4 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d9048:	6003      	str	r3, [r0, #0]
   d904a:	2500      	movs	r5, #0
   d904c:	460f      	mov	r7, r1
   d904e:	3330      	adds	r3, #48	; 0x30
   d9050:	2618      	movs	r6, #24
   d9052:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d9056:	b089      	sub	sp, #36	; 0x24
   d9058:	6043      	str	r3, [r0, #4]
   d905a:	4632      	mov	r2, r6
   d905c:	4629      	mov	r1, r5
   d905e:	4604      	mov	r4, r0
   d9060:	3010      	adds	r0, #16
   d9062:	f003 fc67 	bl	dc934 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d9066:	6878      	ldr	r0, [r7, #4]
   d9068:	462a      	mov	r2, r5
   d906a:	4629      	mov	r1, r5
   d906c:	f7ff fed8 	bl	d8e20 <network_ready>
   d9070:	b918      	cbnz	r0, d907a <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d9072:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d9074:	4620      	mov	r0, r4
   d9076:	b009      	add	sp, #36	; 0x24
   d9078:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d907a:	4629      	mov	r1, r5
   d907c:	4632      	mov	r2, r6
   d907e:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d9080:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d9084:	f003 fc56 	bl	dc934 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d9088:	a902      	add	r1, sp, #8
   d908a:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d908c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d9090:	f7ff fbe4 	bl	d885c <cellular_signal>
   d9094:	b110      	cbz	r0, d909c <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d9096:	2301      	movs	r3, #1
   d9098:	60a3      	str	r3, [r4, #8]
            return sig;
   d909a:	e7eb      	b.n	d9074 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d909c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d909e:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d90a0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d90a2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d90a4:	b90b      	cbnz	r3, d90aa <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d90a6:	2302      	movs	r3, #2
   d90a8:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d90aa:	a902      	add	r1, sp, #8
   d90ac:	4620      	mov	r0, r4
   d90ae:	f000 f8c0 	bl	d9232 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d90b2:	e7df      	b.n	d9074 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d90b4:	000dd888 	.word	0x000dd888

000d90b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d90b8:	4b08      	ldr	r3, [pc, #32]	; (d90dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d90ba:	b510      	push	{r4, lr}
   d90bc:	2428      	movs	r4, #40	; 0x28
   d90be:	4622      	mov	r2, r4
   d90c0:	4618      	mov	r0, r3
   d90c2:	2100      	movs	r1, #0
   d90c4:	f003 fc36 	bl	dc934 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d90c8:	4b05      	ldr	r3, [pc, #20]	; (d90e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d90ca:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d90cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d90d0:	6042      	str	r2, [r0, #4]
   d90d2:	2204      	movs	r2, #4
   d90d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d90d6:	4a03      	ldr	r2, [pc, #12]	; (d90e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d90d8:	601a      	str	r2, [r3, #0]
   d90da:	bd10      	pop	{r4, pc}
   d90dc:	2003e534 	.word	0x2003e534
   d90e0:	2003e52c 	.word	0x2003e52c
   d90e4:	000dd84c 	.word	0x000dd84c

000d90e8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d90e8:	4770      	bx	lr

000d90ea <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d90ea:	7d00      	ldrb	r0, [r0, #20]
   d90ec:	4770      	bx	lr

000d90ee <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d90ee:	7d03      	ldrb	r3, [r0, #20]
   d90f0:	b14b      	cbz	r3, d9106 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d90f2:	6983      	ldr	r3, [r0, #24]
   d90f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d90f8:	d005      	beq.n	d9106 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d90fa:	6a00      	ldr	r0, [r0, #32]
   d90fc:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d9100:	bf18      	it	ne
   d9102:	2001      	movne	r0, #1
   d9104:	4770      	bx	lr
   d9106:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d9108:	4770      	bx	lr

000d910a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d910a:	6803      	ldr	r3, [r0, #0]
   d910c:	6a1b      	ldr	r3, [r3, #32]
   d910e:	4718      	bx	r3

000d9110 <_ZN14CellularSignalD0Ev>:
   d9110:	b510      	push	{r4, lr}
   d9112:	2128      	movs	r1, #40	; 0x28
   d9114:	4604      	mov	r4, r0
   d9116:	f002 ff59 	bl	dbfcc <_ZdlPvj>
   d911a:	4620      	mov	r0, r4
   d911c:	bd10      	pop	{r4, pc}
	...

000d9120 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d9120:	7d03      	ldrb	r3, [r0, #20]
   d9122:	b17b      	cbz	r3, d9144 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d9124:	69c3      	ldr	r3, [r0, #28]
   d9126:	2b00      	cmp	r3, #0
   d9128:	db0c      	blt.n	d9144 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d912a:	ee07 3a90 	vmov	s15, r3
   d912e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d914c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d9132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9136:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d913a:	eddf 7a05 	vldr	s15, [pc, #20]	; d9150 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d913e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d9142:	4770      	bx	lr
    return -1.0f;
   d9144:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d9148:	4770      	bx	lr
   d914a:	bf00      	nop
   d914c:	477fff00 	.word	0x477fff00
   d9150:	42c80000 	.word	0x42c80000

000d9154 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d9154:	7d03      	ldrb	r3, [r0, #20]
   d9156:	b163      	cbz	r3, d9172 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d9158:	6983      	ldr	r3, [r0, #24]
   d915a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d915e:	d008      	beq.n	d9172 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d9160:	ee07 3a90 	vmov	s15, r3
   d9164:	ed9f 7a04 	vldr	s14, [pc, #16]	; d9178 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d9168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d916c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d9170:	4770      	bx	lr
    return 0.0f;
   d9172:	ed9f 0a02 	vldr	s0, [pc, #8]	; d917c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d9176:	4770      	bx	lr
   d9178:	42c80000 	.word	0x42c80000
   d917c:	00000000 	.word	0x00000000

000d9180 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d9180:	7d03      	ldrb	r3, [r0, #20]
   d9182:	b17b      	cbz	r3, d91a4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d9184:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d9186:	2b00      	cmp	r3, #0
   d9188:	db0c      	blt.n	d91a4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d918a:	ee07 3a90 	vmov	s15, r3
   d918e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d91ac <_ZNK14CellularSignal10getQualityEv+0x2c>
   d9192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d9196:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d919a:	eddf 7a05 	vldr	s15, [pc, #20]	; d91b0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d919e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d91a2:	4770      	bx	lr
    return -1.0f;
   d91a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d91a8:	4770      	bx	lr
   d91aa:	bf00      	nop
   d91ac:	477fff00 	.word	0x477fff00
   d91b0:	42c80000 	.word	0x42c80000

000d91b4 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d91b4:	7d03      	ldrb	r3, [r0, #20]
   d91b6:	b163      	cbz	r3, d91d2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d91b8:	6a03      	ldr	r3, [r0, #32]
   d91ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d91be:	d008      	beq.n	d91d2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d91c0:	ee07 3a90 	vmov	s15, r3
   d91c4:	ed9f 7a04 	vldr	s14, [pc, #16]	; d91d8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d91c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d91cc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d91d0:	4770      	bx	lr
    return 0.0f;
   d91d2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d91dc <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d91d6:	4770      	bx	lr
   d91d8:	42c80000 	.word	0x42c80000
   d91dc:	00000000 	.word	0x00000000

000d91e0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d91e0:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d91e2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d91e4:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d91e6:	da0a      	bge.n	d91fe <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d91e8:	212d      	movs	r1, #45	; 0x2d
   d91ea:	f002 f812 	bl	db212 <_ZN5Print5printEc>
            val = -n;
   d91ee:	4261      	negs	r1, r4
            t = print('-');
   d91f0:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d91f2:	220a      	movs	r2, #10
   d91f4:	4630      	mov	r0, r6
   d91f6:	f002 f81b 	bl	db230 <_ZN5Print11printNumberEmh>
    }
}
   d91fa:	4428      	add	r0, r5
   d91fc:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d91fe:	4621      	mov	r1, r4
        size_t t = 0;
   d9200:	2500      	movs	r5, #0
   d9202:	e7f6      	b.n	d91f2 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d9204 <_ZNK14CellularSignal7printToER5Print>:
{
   d9204:	b570      	push	{r4, r5, r6, lr}
   d9206:	460c      	mov	r4, r1
   d9208:	4605      	mov	r5, r0
   d920a:	6881      	ldr	r1, [r0, #8]
   d920c:	4620      	mov	r0, r4
   d920e:	f7ff ffe7 	bl	d91e0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d9212:	212c      	movs	r1, #44	; 0x2c
   d9214:	4606      	mov	r6, r0
   d9216:	4620      	mov	r0, r4
   d9218:	f001 fffb 	bl	db212 <_ZN5Print5printEc>
   d921c:	68e9      	ldr	r1, [r5, #12]
   d921e:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d9220:	4620      	mov	r0, r4
   d9222:	f7ff ffdd 	bl	d91e0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d9226:	4430      	add	r0, r6
   d9228:	bd70      	pop	{r4, r5, r6, pc}

000d922a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d922a:	f1a0 0004 	sub.w	r0, r0, #4
   d922e:	f7ff bfe9 	b.w	d9204 <_ZNK14CellularSignal7printToER5Print>

000d9232 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d9232:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d9234:	460d      	mov	r5, r1
   d9236:	f100 0410 	add.w	r4, r0, #16
   d923a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d923c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d923e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d9242:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d9246:	2001      	movs	r0, #1
   d9248:	bd30      	pop	{r4, r5, pc}

000d924a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d924a:	4770      	bx	lr

000d924c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d924c:	2000      	movs	r0, #0
   d924e:	4770      	bx	lr

000d9250 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9250:	b510      	push	{r4, lr}
   d9252:	2110      	movs	r1, #16
   d9254:	4604      	mov	r4, r0
   d9256:	f002 feb9 	bl	dbfcc <_ZdlPvj>
   d925a:	4620      	mov	r0, r4
   d925c:	bd10      	pop	{r4, pc}

000d925e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d925e:	b508      	push	{r3, lr}
      { delete this; }
   d9260:	f7ff fff6 	bl	d9250 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d9264:	bd08      	pop	{r3, pc}

000d9266 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d9266:	b510      	push	{r4, lr}
      if (_M_manager)
   d9268:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d926a:	4604      	mov	r4, r0
      if (_M_manager)
   d926c:	b113      	cbz	r3, d9274 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d926e:	2203      	movs	r2, #3
   d9270:	4601      	mov	r1, r0
   d9272:	4798      	blx	r3
    }
   d9274:	4620      	mov	r0, r4
   d9276:	bd10      	pop	{r4, pc}

000d9278 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d9278:	b530      	push	{r4, r5, lr}
        type_(type) {
   d927a:	2200      	movs	r2, #0
   d927c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d9280:	6002      	str	r2, [r0, #0]
   d9282:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9284:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d9286:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9288:	680c      	ldr	r4, [r1, #0]
   d928a:	8085      	strh	r5, [r0, #4]
   d928c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d928e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d9290:	bd30      	pop	{r4, r5, pc}

000d9292 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d9292:	b510      	push	{r4, lr}
   d9294:	4604      	mov	r4, r0
    free((void*)msg_);
   d9296:	6800      	ldr	r0, [r0, #0]
   d9298:	f7ff fe12 	bl	d8ec0 <free>
}
   d929c:	4620      	mov	r0, r4
   d929e:	bd10      	pop	{r4, pc}

000d92a0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d92a0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d92a2:	68c4      	ldr	r4, [r0, #12]
   d92a4:	b1f4      	cbz	r4, d92e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d92a6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d92a8:	2b02      	cmp	r3, #2
   d92aa:	d103      	bne.n	d92b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d92ac:	f104 000c 	add.w	r0, r4, #12
   d92b0:	f7ff ffef 	bl	d9292 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d92b4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d92b6:	b135      	cbz	r5, d92c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d92b8:	4628      	mov	r0, r5
   d92ba:	f7ff ffd4 	bl	d9266 <_ZNSt14_Function_baseD1Ev>
   d92be:	2110      	movs	r1, #16
   d92c0:	4628      	mov	r0, r5
   d92c2:	f002 fe83 	bl	dbfcc <_ZdlPvj>
   d92c6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d92c8:	b135      	cbz	r5, d92d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d92ca:	4628      	mov	r0, r5
   d92cc:	f7ff ffcb 	bl	d9266 <_ZNSt14_Function_baseD1Ev>
   d92d0:	2110      	movs	r1, #16
   d92d2:	4628      	mov	r0, r5
   d92d4:	f002 fe7a 	bl	dbfcc <_ZdlPvj>
   d92d8:	4620      	mov	r0, r4
   d92da:	2114      	movs	r1, #20
   d92dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d92e0:	f002 be74 	b.w	dbfcc <_ZdlPvj>
   d92e4:	bd38      	pop	{r3, r4, r5, pc}

000d92e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d92e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d92e8:	460e      	mov	r6, r1
   d92ea:	4604      	mov	r4, r0
   d92ec:	f856 3b04 	ldr.w	r3, [r6], #4
   d92f0:	9300      	str	r3, [sp, #0]
   d92f2:	460d      	mov	r5, r1
   d92f4:	a801      	add	r0, sp, #4
   d92f6:	4631      	mov	r1, r6
   d92f8:	f7ff fe61 	bl	d8fbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d92fc:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d92fe:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d9300:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d9302:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d9304:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d9306:	2300      	movs	r3, #0
   d9308:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d930a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d930c:	f7fb fc38 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9310:	4630      	mov	r0, r6
   d9312:	f7fb fc35 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d9316:	4628      	mov	r0, r5
   d9318:	2108      	movs	r1, #8
   d931a:	f002 fe57 	bl	dbfcc <_ZdlPvj>
        return p;
    }
   d931e:	4620      	mov	r0, r4
   d9320:	b002      	add	sp, #8
   d9322:	bd70      	pop	{r4, r5, r6, pc}

000d9324 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d9324:	b513      	push	{r0, r1, r4, lr}
   d9326:	460b      	mov	r3, r1
   d9328:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d932a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d932e:	466c      	mov	r4, sp
   d9330:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d9334:	e893 0003 	ldmia.w	r3, {r0, r1}
   d9338:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d933c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d9340:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d9344:	b002      	add	sp, #8
   d9346:	bd10      	pop	{r4, pc}

000d9348 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d9348:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d934a:	b510      	push	{r4, lr}
      if (_M_empty())
   d934c:	b90a      	cbnz	r2, d9352 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d934e:	f002 fe49 	bl	dbfe4 <_ZSt25__throw_bad_function_callv>
    }
   d9352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9356:	68c3      	ldr	r3, [r0, #12]
   d9358:	4718      	bx	r3

000d935a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d935a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d935c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d935e:	f100 0110 	add.w	r1, r0, #16
   d9362:	f7ff fff1 	bl	d9348 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d9366:	bd08      	pop	{r3, pc}

000d9368 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d9368:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d936a:	b510      	push	{r4, lr}
      if (_M_empty())
   d936c:	b90a      	cbnz	r2, d9372 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d936e:	f002 fe39 	bl	dbfe4 <_ZSt25__throw_bad_function_callv>
    }
   d9372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9376:	68c3      	ldr	r3, [r0, #12]
   d9378:	4718      	bx	r3

000d937a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d937a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d937c:	6800      	ldr	r0, [r0, #0]
   d937e:	f100 0110 	add.w	r1, r0, #16
   d9382:	f7ff fff1 	bl	d9368 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d9386:	bd08      	pop	{r3, pc}

000d9388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d9388:	b538      	push	{r3, r4, r5, lr}
   d938a:	2300      	movs	r3, #0
   d938c:	4604      	mov	r4, r0
   d938e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9390:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d9392:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9394:	f7fa fe7f 	bl	d4096 <_Znwj>
   d9398:	b128      	cbz	r0, d93a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d939a:	2301      	movs	r3, #1
   d939c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d93a0:	4b02      	ldr	r3, [pc, #8]	; (d93ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d93a2:	6003      	str	r3, [r0, #0]
   d93a4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d93a6:	6020      	str	r0, [r4, #0]
	}
   d93a8:	4620      	mov	r0, r4
   d93aa:	bd38      	pop	{r3, r4, r5, pc}
   d93ac:	000dd8c4 	.word	0x000dd8c4

000d93b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d93b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d93b2:	2300      	movs	r3, #0
   d93b4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d93b6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d93b8:	4604      	mov	r4, r0
   d93ba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d93bc:	b12b      	cbz	r3, d93ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d93be:	2202      	movs	r2, #2
   d93c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d93c2:	68eb      	ldr	r3, [r5, #12]
   d93c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d93c6:	68ab      	ldr	r3, [r5, #8]
   d93c8:	60a3      	str	r3, [r4, #8]
    }
   d93ca:	4620      	mov	r0, r4
   d93cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d93d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d93d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d93d2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d93d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d93d6:	4668      	mov	r0, sp
   d93d8:	f7ff ff4e 	bl	d9278 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d93dc:	f04f 0302 	mov.w	r3, #2
   d93e0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d93e4:	2a00      	cmp	r2, #0
   d93e6:	d103      	bne.n	d93f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d93e8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d93ec:	2900      	cmp	r1, #0
   d93ee:	d1f7      	bne.n	d93e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d93f0:	d125      	bne.n	d943e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d93f2:	f104 050c 	add.w	r5, r4, #12
   d93f6:	4669      	mov	r1, sp
   d93f8:	4628      	mov	r0, r5
   d93fa:	f7ff ff3d 	bl	d9278 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d93fe:	f3bf 8f5b 	dmb	ish
   d9402:	2301      	movs	r3, #1
   d9404:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d9406:	2000      	movs	r0, #0
   d9408:	f104 0308 	add.w	r3, r4, #8
   d940c:	f3bf 8f5b 	dmb	ish
   d9410:	e853 6f00 	ldrex	r6, [r3]
   d9414:	e843 0200 	strex	r2, r0, [r3]
   d9418:	2a00      	cmp	r2, #0
   d941a:	d1f9      	bne.n	d9410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d941c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9420:	b16e      	cbz	r6, d943e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d9422:	f7ff fc6d 	bl	d8d00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d9426:	b178      	cbz	r0, d9448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9428:	4629      	mov	r1, r5
   d942a:	4630      	mov	r0, r6
   d942c:	f7ff ff8c 	bl	d9348 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d9430:	4630      	mov	r0, r6
   d9432:	f7ff ff18 	bl	d9266 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d9436:	2110      	movs	r1, #16
   d9438:	4630      	mov	r0, r6
   d943a:	f002 fdc7 	bl	dbfcc <_ZdlPvj>
        p_->setError(std::move(error));
   d943e:	4668      	mov	r0, sp
   d9440:	f7ff ff27 	bl	d9292 <_ZN8particle5ErrorD1Ev>
    }
   d9444:	b009      	add	sp, #36	; 0x24
   d9446:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9448:	4631      	mov	r1, r6
   d944a:	a802      	add	r0, sp, #8
   d944c:	f7ff ffb0 	bl	d93b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d9450:	68e0      	ldr	r0, [r4, #12]
   d9452:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9456:	b108      	cbz	r0, d945c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d9458:	f003 faf6 	bl	dca48 <strdup>
        type_(type) {
   d945c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d945e:	2010      	movs	r0, #16
   d9460:	f8ad 501c 	strh.w	r5, [sp, #28]
   d9464:	f7fa fe17 	bl	d4096 <_Znwj>
   d9468:	4605      	mov	r5, r0
   d946a:	b1e8      	cbz	r0, d94a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d946c:	2700      	movs	r7, #0
   d946e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9470:	2018      	movs	r0, #24
   d9472:	f7fa fe10 	bl	d4096 <_Znwj>
   d9476:	4604      	mov	r4, r0
   d9478:	b188      	cbz	r0, d949e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d947a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d947c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d947e:	a802      	add	r0, sp, #8
   d9480:	f7ff ff50 	bl	d9324 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9484:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9486:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9488:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d948a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d948c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d948e:	a906      	add	r1, sp, #24
   d9490:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9492:	60e3      	str	r3, [r4, #12]
   d9494:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d9498:	9205      	str	r2, [sp, #20]
   d949a:	f7ff feed 	bl	d9278 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d949e:	4b08      	ldr	r3, [pc, #32]	; (d94c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d94a0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d94a2:	4b08      	ldr	r3, [pc, #32]	; (d94c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d94a4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d94a6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d94a8:	a806      	add	r0, sp, #24
   d94aa:	f7ff fef2 	bl	d9292 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d94ae:	a802      	add	r0, sp, #8
   d94b0:	f7ff fed9 	bl	d9266 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d94b4:	2200      	movs	r2, #0
   d94b6:	4629      	mov	r1, r5
   d94b8:	4803      	ldr	r0, [pc, #12]	; (d94c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d94ba:	f7ff fc29 	bl	d8d10 <application_thread_invoke>
   d94be:	e7b7      	b.n	d9430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d94c0:	000d935b 	.word	0x000d935b
   d94c4:	000d95f1 	.word	0x000d95f1
   d94c8:	000d8f97 	.word	0x000d8f97

000d94cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d94cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d94d0:	b08a      	sub	sp, #40	; 0x28
   d94d2:	4605      	mov	r5, r0
   d94d4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d94d8:	460c      	mov	r4, r1
   d94da:	4617      	mov	r7, r2
   d94dc:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d94de:	f7ff fc5f 	bl	d8da0 <spark_cloud_flag_connected>
   d94e2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d94e4:	4682      	mov	sl, r0
   d94e6:	bb38      	cbnz	r0, d9538 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d94e8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d94ec:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d94ee:	a905      	add	r1, sp, #20
   d94f0:	4630      	mov	r0, r6
   d94f2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d94f6:	f7ff febf 	bl	d9278 <_ZN8particle5ErrorC1EOS0_>
   d94fa:	2014      	movs	r0, #20
   d94fc:	f7fa fdcb 	bl	d4096 <_Znwj>
   d9500:	4604      	mov	r4, r0
   d9502:	b148      	cbz	r0, d9518 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9504:	2302      	movs	r3, #2
   d9506:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9508:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d950a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d950e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d9510:	4631      	mov	r1, r6
   d9512:	300c      	adds	r0, #12
   d9514:	f7ff feb0 	bl	d9278 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d9518:	4628      	mov	r0, r5
	: __shared_count(__p)
   d951a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d951c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d9520:	f7ff ff32 	bl	d9388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9524:	4630      	mov	r0, r6
   d9526:	f7ff feb4 	bl	d9292 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d952a:	a805      	add	r0, sp, #20
   d952c:	f7ff feb1 	bl	d9292 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d9530:	4628      	mov	r0, r5
   d9532:	b00a      	add	sp, #40	; 0x28
   d9534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9538:	230c      	movs	r3, #12
   d953a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d953e:	2014      	movs	r0, #20
   d9540:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d9544:	9307      	str	r3, [sp, #28]
   d9546:	f7fa fda6 	bl	d4096 <_Znwj>
   d954a:	4601      	mov	r1, r0
   d954c:	b128      	cbz	r0, d955a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d954e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d9552:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9556:	f880 a001 	strb.w	sl, [r0, #1]
   d955a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d955c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d955e:	f7ff ff13 	bl	d9388 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d9562:	4b22      	ldr	r3, [pc, #136]	; (d95ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d9564:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d9566:	2008      	movs	r0, #8
   d9568:	f7fa fd95 	bl	d4096 <_Znwj>
   d956c:	4682      	mov	sl, r0
   d956e:	b128      	cbz	r0, d957c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9570:	9b03      	ldr	r3, [sp, #12]
   d9572:	f840 3b04 	str.w	r3, [r0], #4
   d9576:	a904      	add	r1, sp, #16
   d9578:	f7ff fd21 	bl	d8fbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d957c:	9600      	str	r6, [sp, #0]
   d957e:	fa5f f389 	uxtb.w	r3, r9
   d9582:	4642      	mov	r2, r8
   d9584:	4639      	mov	r1, r7
   d9586:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d9588:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d958c:	f7ff fc10 	bl	d8db0 <spark_send_event>
   d9590:	b9b8      	cbnz	r0, d95c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d9592:	9b03      	ldr	r3, [sp, #12]
   d9594:	785b      	ldrb	r3, [r3, #1]
   d9596:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d959a:	b993      	cbnz	r3, d95c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d959c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d95a0:	a905      	add	r1, sp, #20
   d95a2:	a803      	add	r0, sp, #12
   d95a4:	9205      	str	r2, [sp, #20]
   d95a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d95aa:	f7ff ff11 	bl	d93d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d95ae:	a805      	add	r0, sp, #20
   d95b0:	f7ff fe6f 	bl	d9292 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d95b4:	a805      	add	r0, sp, #20
   d95b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d95b8:	f7ff fe95 	bl	d92e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d95bc:	a806      	add	r0, sp, #24
   d95be:	f7fb fadf 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d95c2:	9b03      	ldr	r3, [sp, #12]
   d95c4:	9305      	str	r3, [sp, #20]
   d95c6:	a904      	add	r1, sp, #16
   d95c8:	a806      	add	r0, sp, #24
   d95ca:	f7ff fcf8 	bl	d8fbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d95ce:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d95d0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d95d2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d95d4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d95d6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d95d8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d95da:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d95dc:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d95de:	f7fb facf 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d95e2:	a804      	add	r0, sp, #16
   d95e4:	f7fb facc 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d95e8:	e7a2      	b.n	d9530 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d95ea:	bf00      	nop
   d95ec:	000d96b5 	.word	0x000d96b5

000d95f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d95f0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d95f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d95f4:	4605      	mov	r5, r0
	  switch (__op)
   d95f6:	d007      	beq.n	d9608 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d95f8:	2a03      	cmp	r2, #3
   d95fa:	d018      	beq.n	d962e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d95fc:	2a01      	cmp	r2, #1
   d95fe:	d101      	bne.n	d9604 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d9600:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9602:	6003      	str	r3, [r0, #0]
	}
   d9604:	2000      	movs	r0, #0
   d9606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9608:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d960a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d960c:	f7fa fd43 	bl	d4096 <_Znwj>
   d9610:	4604      	mov	r4, r0
   d9612:	b150      	cbz	r0, d962a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9614:	4631      	mov	r1, r6
   d9616:	f7ff fecb 	bl	d93b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d961a:	6930      	ldr	r0, [r6, #16]
   d961c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d9620:	b108      	cbz	r0, d9626 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d9622:	f003 fa11 	bl	dca48 <strdup>
        type_(type) {
   d9626:	6120      	str	r0, [r4, #16]
   d9628:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d962a:	602c      	str	r4, [r5, #0]
	}
   d962c:	e7ea      	b.n	d9604 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d962e:	6804      	ldr	r4, [r0, #0]
   d9630:	2c00      	cmp	r4, #0
   d9632:	d0e7      	beq.n	d9604 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d9634:	f104 0010 	add.w	r0, r4, #16
   d9638:	f7ff fe2b 	bl	d9292 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d963c:	4620      	mov	r0, r4
   d963e:	f7ff fe12 	bl	d9266 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d9642:	2118      	movs	r1, #24
   d9644:	4620      	mov	r0, r4
   d9646:	f002 fcc1 	bl	dbfcc <_ZdlPvj>
   d964a:	e7db      	b.n	d9604 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d964c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d964c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d964e:	2300      	movs	r3, #0
   d9650:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d9652:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d9654:	4604      	mov	r4, r0
   d9656:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d9658:	b12b      	cbz	r3, d9666 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d965a:	2202      	movs	r2, #2
   d965c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d965e:	68eb      	ldr	r3, [r5, #12]
   d9660:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9662:	68ab      	ldr	r3, [r5, #8]
   d9664:	60a3      	str	r3, [r4, #8]
    }
   d9666:	4620      	mov	r0, r4
   d9668:	bd38      	pop	{r3, r4, r5, pc}

000d966a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d966a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d966c:	b570      	push	{r4, r5, r6, lr}
   d966e:	4604      	mov	r4, r0
	  switch (__op)
   d9670:	d007      	beq.n	d9682 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d9672:	2a03      	cmp	r2, #3
   d9674:	d012      	beq.n	d969c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d9676:	2a01      	cmp	r2, #1
   d9678:	d101      	bne.n	d967e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d967a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d967c:	6003      	str	r3, [r0, #0]
	}
   d967e:	2000      	movs	r0, #0
   d9680:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d9682:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d9684:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d9686:	f7fa fd06 	bl	d4096 <_Znwj>
   d968a:	4605      	mov	r5, r0
   d968c:	b120      	cbz	r0, d9698 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d968e:	4631      	mov	r1, r6
   d9690:	f7ff ffdc 	bl	d964c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9694:	7c33      	ldrb	r3, [r6, #16]
   d9696:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d9698:	6025      	str	r5, [r4, #0]
	}
   d969a:	e7f0      	b.n	d967e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d969c:	6804      	ldr	r4, [r0, #0]
   d969e:	2c00      	cmp	r4, #0
   d96a0:	d0ed      	beq.n	d967e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d96a2:	4620      	mov	r0, r4
   d96a4:	f7ff fddf 	bl	d9266 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d96a8:	2114      	movs	r1, #20
   d96aa:	4620      	mov	r0, r4
   d96ac:	f002 fc8e 	bl	dbfcc <_ZdlPvj>
   d96b0:	e7e5      	b.n	d967e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d96b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d96b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d96b6:	b089      	sub	sp, #36	; 0x24
   d96b8:	4604      	mov	r4, r0
   d96ba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d96bc:	a801      	add	r0, sp, #4
   d96be:	4611      	mov	r1, r2
   d96c0:	f7ff fe11 	bl	d92e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d96c4:	b1a4      	cbz	r4, d96f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d96c6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d96c8:	b11d      	cbz	r5, d96d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d96ca:	4628      	mov	r0, r5
   d96cc:	f003 f9bc 	bl	dca48 <strdup>
   d96d0:	4605      	mov	r5, r0
   d96d2:	a801      	add	r0, sp, #4
   d96d4:	a903      	add	r1, sp, #12
        type_(type) {
   d96d6:	9503      	str	r5, [sp, #12]
   d96d8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d96dc:	f7ff fe78 	bl	d93d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d96e0:	a803      	add	r0, sp, #12
   d96e2:	f7ff fdd6 	bl	d9292 <_ZN8particle5ErrorD1Ev>
   d96e6:	a802      	add	r0, sp, #8
   d96e8:	f7fb fa4a 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d96ec:	b009      	add	sp, #36	; 0x24
   d96ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d96f0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d96f2:	2301      	movs	r3, #1
   d96f4:	e8d5 2f4f 	ldrexb	r2, [r5]
   d96f8:	2a00      	cmp	r2, #0
   d96fa:	d103      	bne.n	d9704 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d96fc:	e8c5 3f41 	strexb	r1, r3, [r5]
   d9700:	2900      	cmp	r1, #0
   d9702:	d1f7      	bne.n	d96f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d9704:	d1ef      	bne.n	d96e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d9706:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d9708:	f3bf 8f5b 	dmb	ish
   d970c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d970e:	1d2b      	adds	r3, r5, #4
   d9710:	f3bf 8f5b 	dmb	ish
   d9714:	e853 6f00 	ldrex	r6, [r3]
   d9718:	e843 4200 	strex	r2, r4, [r3]
   d971c:	2a00      	cmp	r2, #0
   d971e:	d1f9      	bne.n	d9714 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d9720:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d9724:	2e00      	cmp	r6, #0
   d9726:	d0de      	beq.n	d96e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d9728:	4620      	mov	r0, r4
   d972a:	f7ff fae9 	bl	d8d00 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d972e:	4607      	mov	r7, r0
   d9730:	b160      	cbz	r0, d974c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9732:	f105 010c 	add.w	r1, r5, #12
   d9736:	4630      	mov	r0, r6
   d9738:	f7ff fe16 	bl	d9368 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d973c:	4630      	mov	r0, r6
   d973e:	f7ff fd92 	bl	d9266 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d9742:	2110      	movs	r1, #16
   d9744:	4630      	mov	r0, r6
   d9746:	f002 fc41 	bl	dbfcc <_ZdlPvj>
   d974a:	e7cc      	b.n	d96e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d974c:	4631      	mov	r1, r6
   d974e:	a803      	add	r0, sp, #12
   d9750:	f7ff ff7c 	bl	d964c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9754:	7b2b      	ldrb	r3, [r5, #12]
   d9756:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d975a:	2010      	movs	r0, #16
   d975c:	f7fa fc9b 	bl	d4096 <_Znwj>
   d9760:	4605      	mov	r5, r0
   d9762:	b1d0      	cbz	r0, d979a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d9764:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9766:	2014      	movs	r0, #20
   d9768:	f7fa fc95 	bl	d4096 <_Znwj>
   d976c:	4604      	mov	r4, r0
   d976e:	b178      	cbz	r0, d9790 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d9770:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d9772:	4601      	mov	r1, r0
   d9774:	a803      	add	r0, sp, #12
   d9776:	f7ff fdd5 	bl	d9324 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d977a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d977c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d977e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9780:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d9782:	9205      	str	r2, [sp, #20]
   d9784:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9786:	60e3      	str	r3, [r4, #12]
   d9788:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d978c:	9206      	str	r2, [sp, #24]
   d978e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d9790:	4b06      	ldr	r3, [pc, #24]	; (d97ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d9792:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9794:	4b06      	ldr	r3, [pc, #24]	; (d97b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9796:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d9798:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d979a:	a803      	add	r0, sp, #12
   d979c:	f7ff fd63 	bl	d9266 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d97a0:	2200      	movs	r2, #0
   d97a2:	4629      	mov	r1, r5
   d97a4:	4803      	ldr	r0, [pc, #12]	; (d97b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d97a6:	f7ff fab3 	bl	d8d10 <application_thread_invoke>
   d97aa:	e7c7      	b.n	d973c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d97ac:	000d937b 	.word	0x000d937b
   d97b0:	000d966b 	.word	0x000d966b
   d97b4:	000d8f97 	.word	0x000d8f97

000d97b8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d97b8:	2200      	movs	r2, #0
   d97ba:	6840      	ldr	r0, [r0, #4]
   d97bc:	4611      	mov	r1, r2
   d97be:	f7ff bb4f 	b.w	d8e60 <network_listening>

000d97c2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d97c2:	2200      	movs	r2, #0
   d97c4:	6840      	ldr	r0, [r0, #4]
   d97c6:	4611      	mov	r1, r2
   d97c8:	f7ff bb5a 	b.w	d8e80 <network_get_listen_timeout>

000d97cc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d97cc:	6840      	ldr	r0, [r0, #4]
   d97ce:	2200      	movs	r2, #0
   d97d0:	f7ff bb4e 	b.w	d8e70 <network_set_listen_timeout>

000d97d4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d97d4:	6840      	ldr	r0, [r0, #4]
   d97d6:	2200      	movs	r2, #0
   d97d8:	f081 0101 	eor.w	r1, r1, #1
   d97dc:	f7ff bb38 	b.w	d8e50 <network_listen>

000d97e0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d97e0:	2300      	movs	r3, #0
   d97e2:	6840      	ldr	r0, [r0, #4]
   d97e4:	461a      	mov	r2, r3
   d97e6:	4619      	mov	r1, r3
   d97e8:	f7ff bb2a 	b.w	d8e40 <network_off>

000d97ec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d97ec:	2300      	movs	r3, #0
   d97ee:	6840      	ldr	r0, [r0, #4]
   d97f0:	461a      	mov	r2, r3
   d97f2:	4619      	mov	r1, r3
   d97f4:	f7ff bb1c 	b.w	d8e30 <network_on>

000d97f8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d97f8:	2200      	movs	r2, #0
   d97fa:	6840      	ldr	r0, [r0, #4]
   d97fc:	4611      	mov	r1, r2
   d97fe:	f7ff bb0f 	b.w	d8e20 <network_ready>

000d9802 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d9802:	2200      	movs	r2, #0
   d9804:	6840      	ldr	r0, [r0, #4]
   d9806:	4611      	mov	r1, r2
   d9808:	f7ff bafa 	b.w	d8e00 <network_connecting>

000d980c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d980c:	6840      	ldr	r0, [r0, #4]
   d980e:	2200      	movs	r2, #0
   d9810:	2102      	movs	r1, #2
   d9812:	f7ff bafd 	b.w	d8e10 <network_disconnect>

000d9816 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d9816:	2300      	movs	r3, #0
   d9818:	6840      	ldr	r0, [r0, #4]
   d981a:	461a      	mov	r2, r3
   d981c:	f7ff bae8 	b.w	d8df0 <network_connect>

000d9820 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d9820:	4b02      	ldr	r3, [pc, #8]	; (d982c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d9822:	2203      	movs	r2, #3
   d9824:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d9826:	4a02      	ldr	r2, [pc, #8]	; (d9830 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d9828:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d982a:	4770      	bx	lr
   d982c:	2003e55c 	.word	0x2003e55c
   d9830:	000dd8e0 	.word	0x000dd8e0

000d9834 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d9834:	6800      	ldr	r0, [r0, #0]
   d9836:	f000 b951 	b.w	d9adc <_ZN7TwoWire4lockEv>

000d983a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d983a:	b510      	push	{r4, lr}
   d983c:	4604      	mov	r4, r0
      lock_(_lock) {
   d983e:	6001      	str	r1, [r0, #0]
   d9840:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d9842:	b10a      	cbz	r2, d9848 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d9844:	f7ff fff6 	bl	d9834 <_ZN9FuelGauge4lockEv>
}
   d9848:	4620      	mov	r0, r4
   d984a:	bd10      	pop	{r4, pc}

000d984c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d984c:	b513      	push	{r0, r1, r4, lr}
   d984e:	4604      	mov	r4, r0
   d9850:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d9852:	f002 fb97 	bl	dbf84 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d9856:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d9858:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d985a:	4620      	mov	r0, r4
   d985c:	f7ff ffed 	bl	d983a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d9860:	4620      	mov	r0, r4
   d9862:	b002      	add	sp, #8
   d9864:	bd10      	pop	{r4, pc}

000d9866 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d9866:	6800      	ldr	r0, [r0, #0]
   d9868:	f000 b941 	b.w	d9aee <_ZN7TwoWire6unlockEv>

000d986c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d986c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d9870:	4604      	mov	r4, r0
   d9872:	460d      	mov	r5, r1
   d9874:	4617      	mov	r7, r2
   d9876:	461e      	mov	r6, r3
   d9878:	f7ff ffdc 	bl	d9834 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d987c:	2336      	movs	r3, #54	; 0x36
   d987e:	f88d 3000 	strb.w	r3, [sp]
   d9882:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d9884:	6820      	ldr	r0, [r4, #0]
   d9886:	9301      	str	r3, [sp, #4]
   d9888:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d988c:	230a      	movs	r3, #10
   d988e:	4669      	mov	r1, sp
   d9890:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9892:	f88d 8008 	strb.w	r8, [sp, #8]
   d9896:	f000 f905 	bl	d9aa4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d989a:	6820      	ldr	r0, [r4, #0]
   d989c:	6803      	ldr	r3, [r0, #0]
   d989e:	4629      	mov	r1, r5
   d98a0:	689b      	ldr	r3, [r3, #8]
   d98a2:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d98a4:	6820      	ldr	r0, [r4, #0]
   d98a6:	4641      	mov	r1, r8
   d98a8:	f000 f914 	bl	d9ad4 <_ZN7TwoWire15endTransmissionEh>
   d98ac:	4605      	mov	r5, r0
   d98ae:	b140      	cbz	r0, d98c2 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d98b0:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d98b4:	4620      	mov	r0, r4
   d98b6:	f7ff ffd6 	bl	d9866 <_ZN9FuelGauge6unlockEv>
}
   d98ba:	4628      	mov	r0, r5
   d98bc:	b004      	add	sp, #16
   d98be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d98c2:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d98c4:	6820      	ldr	r0, [r4, #0]
   d98c6:	9301      	str	r3, [sp, #4]
   d98c8:	4669      	mov	r1, sp
   d98ca:	f000 f8bb 	bl	d9a44 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d98ce:	2802      	cmp	r0, #2
   d98d0:	d1ee      	bne.n	d98b0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d98d2:	6820      	ldr	r0, [r4, #0]
   d98d4:	6803      	ldr	r3, [r0, #0]
   d98d6:	695b      	ldr	r3, [r3, #20]
   d98d8:	4798      	blx	r3
   d98da:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d98dc:	6820      	ldr	r0, [r4, #0]
   d98de:	6803      	ldr	r3, [r0, #0]
   d98e0:	695b      	ldr	r3, [r3, #20]
   d98e2:	4798      	blx	r3
   d98e4:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d98e6:	e7e5      	b.n	d98b4 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d98e8 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d98e8:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d98ea:	2300      	movs	r3, #0
   d98ec:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d98f0:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d98f4:	f10d 0206 	add.w	r2, sp, #6
   d98f8:	f10d 0307 	add.w	r3, sp, #7
   d98fc:	2104      	movs	r1, #4
   d98fe:	f7ff ffb5 	bl	d986c <_ZN9FuelGauge12readRegisterEhRhS0_>
   d9902:	b9b0      	cbnz	r0, d9932 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d9904:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d9908:	f002 fcc2 	bl	dc290 <__aeabi_i2d>
   d990c:	4b0a      	ldr	r3, [pc, #40]	; (d9938 <_ZN9FuelGauge6getSoCEv+0x50>)
   d990e:	2200      	movs	r2, #0
   d9910:	f002 fd28 	bl	dc364 <__aeabi_dmul>
   d9914:	f002 ff58 	bl	dc7c8 <__aeabi_d2f>
        return MSB + decimal;
   d9918:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d991c:	ee00 3a10 	vmov	s0, r3
   d9920:	ee07 0a90 	vmov	s15, r0
   d9924:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d9928:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d992c:	b003      	add	sp, #12
   d992e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d9932:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d9936:	e7f9      	b.n	d992c <_ZN9FuelGauge6getSoCEv+0x44>
   d9938:	3f700000 	.word	0x3f700000

000d993c <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d993c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d9940:	4616      	mov	r6, r2
   d9942:	4604      	mov	r4, r0
   d9944:	461d      	mov	r5, r3
   d9946:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d9948:	f7ff ff74 	bl	d9834 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d994c:	2336      	movs	r3, #54	; 0x36
   d994e:	f88d 3000 	strb.w	r3, [sp]
   d9952:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d9954:	6820      	ldr	r0, [r4, #0]
   d9956:	9301      	str	r3, [sp, #4]
   d9958:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d995c:	230a      	movs	r3, #10
   d995e:	4669      	mov	r1, sp
   d9960:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9962:	f88d 8008 	strb.w	r8, [sp, #8]
   d9966:	f000 f89d 	bl	d9aa4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d996a:	6820      	ldr	r0, [r4, #0]
   d996c:	6803      	ldr	r3, [r0, #0]
   d996e:	4639      	mov	r1, r7
   d9970:	689b      	ldr	r3, [r3, #8]
   d9972:	4798      	blx	r3
    i2c_.write(MSB);
   d9974:	6820      	ldr	r0, [r4, #0]
   d9976:	6803      	ldr	r3, [r0, #0]
   d9978:	4631      	mov	r1, r6
   d997a:	689b      	ldr	r3, [r3, #8]
   d997c:	4798      	blx	r3
    i2c_.write(LSB);
   d997e:	6820      	ldr	r0, [r4, #0]
   d9980:	6803      	ldr	r3, [r0, #0]
   d9982:	4629      	mov	r1, r5
   d9984:	689b      	ldr	r3, [r3, #8]
   d9986:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d9988:	4641      	mov	r1, r8
   d998a:	6820      	ldr	r0, [r4, #0]
   d998c:	f000 f8a2 	bl	d9ad4 <_ZN7TwoWire15endTransmissionEh>
   d9990:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d9992:	4620      	mov	r0, r4
   d9994:	bf0c      	ite	eq
   d9996:	2500      	moveq	r5, #0
   d9998:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d999c:	f7ff ff63 	bl	d9866 <_ZN9FuelGauge6unlockEv>
}
   d99a0:	4628      	mov	r0, r5
   d99a2:	b004      	add	sp, #16
   d99a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d99a8 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d99a8:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d99aa:	2240      	movs	r2, #64	; 0x40
   d99ac:	2300      	movs	r3, #0
   d99ae:	2106      	movs	r1, #6
   d99b0:	f7ff ffc4 	bl	d993c <_ZN9FuelGauge13writeRegisterEhhh>
}
   d99b4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d99b8:	bd08      	pop	{r3, pc}

000d99ba <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d99ba:	4770      	bx	lr

000d99bc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d99bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d99be:	4606      	mov	r6, r0
   d99c0:	4615      	mov	r5, r2
   d99c2:	460c      	mov	r4, r1
   d99c4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d99c6:	42bc      	cmp	r4, r7
   d99c8:	d006      	beq.n	d99d8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d99ca:	6833      	ldr	r3, [r6, #0]
   d99cc:	f814 1b01 	ldrb.w	r1, [r4], #1
   d99d0:	689b      	ldr	r3, [r3, #8]
   d99d2:	4630      	mov	r0, r6
   d99d4:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d99d6:	e7f6      	b.n	d99c6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d99d8:	4628      	mov	r0, r5
   d99da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d99dc <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d99dc:	7c00      	ldrb	r0, [r0, #16]
   d99de:	2200      	movs	r2, #0
   d99e0:	f7fe bff4 	b.w	d89cc <hal_i2c_write>

000d99e4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d99e4:	7c00      	ldrb	r0, [r0, #16]
   d99e6:	2100      	movs	r1, #0
   d99e8:	f7fe bff8 	b.w	d89dc <hal_i2c_available>

000d99ec <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d99ec:	7c00      	ldrb	r0, [r0, #16]
   d99ee:	2100      	movs	r1, #0
   d99f0:	f7fe bffc 	b.w	d89ec <hal_i2c_read>

000d99f4 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d99f4:	7c00      	ldrb	r0, [r0, #16]
   d99f6:	2100      	movs	r1, #0
   d99f8:	f7ff b800 	b.w	d89fc <hal_i2c_peek>

000d99fc <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d99fc:	7c00      	ldrb	r0, [r0, #16]
   d99fe:	2100      	movs	r1, #0
   d9a00:	f7ff b804 	b.w	d8a0c <hal_i2c_flush>

000d9a04 <_ZN7TwoWireD0Ev>:
   d9a04:	b510      	push	{r4, lr}
   d9a06:	2114      	movs	r1, #20
   d9a08:	4604      	mov	r4, r0
   d9a0a:	f002 fadf 	bl	dbfcc <_ZdlPvj>
   d9a0e:	4620      	mov	r0, r4
   d9a10:	bd10      	pop	{r4, pc}
	...

000d9a14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d9a14:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9a1a:	4604      	mov	r4, r0
   d9a1c:	4608      	mov	r0, r1
   d9a1e:	2100      	movs	r1, #0
   d9a20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d9a24:	4b03      	ldr	r3, [pc, #12]	; (d9a34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d9a26:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d9a28:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d9a2a:	4611      	mov	r1, r2
   d9a2c:	f7fe fffe 	bl	d8a2c <hal_i2c_init>
}
   d9a30:	4620      	mov	r0, r4
   d9a32:	bd10      	pop	{r4, pc}
   d9a34:	000dd91c 	.word	0x000dd91c

000d9a38 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9a38:	2300      	movs	r3, #0
   d9a3a:	7c00      	ldrb	r0, [r0, #16]
   d9a3c:	461a      	mov	r2, r3
   d9a3e:	4619      	mov	r1, r3
   d9a40:	f7fe bfac 	b.w	d899c <hal_i2c_begin>

000d9a44 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d9a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9a46:	2200      	movs	r2, #0
   d9a48:	2314      	movs	r3, #20
   d9a4a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d9a4e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d9a52:	780b      	ldrb	r3, [r1, #0]
   d9a54:	f88d 3008 	strb.w	r3, [sp, #8]
   d9a58:	684b      	ldr	r3, [r1, #4]
   d9a5a:	9303      	str	r3, [sp, #12]
   d9a5c:	68cb      	ldr	r3, [r1, #12]
   d9a5e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d9a60:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9a62:	7a0b      	ldrb	r3, [r1, #8]
   d9a64:	9305      	str	r3, [sp, #20]
   d9a66:	a901      	add	r1, sp, #4
   d9a68:	f7fe fff8 	bl	d8a5c <hal_i2c_request_ex>
}
   d9a6c:	b007      	add	sp, #28
   d9a6e:	f85d fb04 	ldr.w	pc, [sp], #4

000d9a72 <_ZN7TwoWire11requestFromEhjh>:
{
   d9a72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d9a74:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9a76:	f88d 1000 	strb.w	r1, [sp]
   d9a7a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d9a7e:	9103      	str	r1, [sp, #12]
   d9a80:	bf18      	it	ne
   d9a82:	2301      	movne	r3, #1
   d9a84:	4669      	mov	r1, sp
    size_ = size;
   d9a86:	9201      	str	r2, [sp, #4]
   d9a88:	f88d 3008 	strb.w	r3, [sp, #8]
   d9a8c:	f7ff ffda 	bl	d9a44 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d9a90:	b005      	add	sp, #20
   d9a92:	f85d fb04 	ldr.w	pc, [sp], #4

000d9a96 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d9a96:	7c00      	ldrb	r0, [r0, #16]
   d9a98:	2200      	movs	r2, #0
   d9a9a:	f7fe bf87 	b.w	d89ac <hal_i2c_begin_transmission>

000d9a9e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d9a9e:	b2c9      	uxtb	r1, r1
   d9aa0:	f7ff bff9 	b.w	d9a96 <_ZN7TwoWire17beginTransmissionEh>

000d9aa4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d9aa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d9aa6:	2300      	movs	r3, #0
   d9aa8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d9aac:	684a      	ldr	r2, [r1, #4]
   d9aae:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d9ab0:	2314      	movs	r3, #20
    };
   d9ab2:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d9ab4:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d9ab8:	780b      	ldrb	r3, [r1, #0]
    };
   d9aba:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d9abc:	7a0a      	ldrb	r2, [r1, #8]
   d9abe:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d9ac0:	7c00      	ldrb	r0, [r0, #16]
    };
   d9ac2:	f88d 3008 	strb.w	r3, [sp, #8]
   d9ac6:	aa01      	add	r2, sp, #4
   d9ac8:	4619      	mov	r1, r3
   d9aca:	f7fe ff6f 	bl	d89ac <hal_i2c_begin_transmission>
}
   d9ace:	b007      	add	sp, #28
   d9ad0:	f85d fb04 	ldr.w	pc, [sp], #4

000d9ad4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d9ad4:	7c00      	ldrb	r0, [r0, #16]
   d9ad6:	2200      	movs	r2, #0
   d9ad8:	f7fe bf70 	b.w	d89bc <hal_i2c_end_transmission>

000d9adc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d9adc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d9ade:	2100      	movs	r1, #0
   d9ae0:	7c00      	ldrb	r0, [r0, #16]
   d9ae2:	f7fe ffab 	bl	d8a3c <hal_i2c_lock>
}
   d9ae6:	fab0 f080 	clz	r0, r0
   d9aea:	0940      	lsrs	r0, r0, #5
   d9aec:	bd08      	pop	{r3, pc}

000d9aee <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d9aee:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d9af0:	2100      	movs	r1, #0
   d9af2:	7c00      	ldrb	r0, [r0, #16]
   d9af4:	f7fe ffaa 	bl	d8a4c <hal_i2c_unlock>
}
   d9af8:	fab0 f080 	clz	r0, r0
   d9afc:	0940      	lsrs	r0, r0, #5
   d9afe:	bd08      	pop	{r3, pc}

000d9b00 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9b00:	4700      	bx	r0
	...

000d9b04 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9b04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9b08:	2400      	movs	r4, #0
{
   d9b0a:	461d      	mov	r5, r3
   d9b0c:	460f      	mov	r7, r1
   d9b0e:	4690      	mov	r8, r2
   d9b10:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d9b12:	f7fe ff33 	bl	d897c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d9b16:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9b18:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d9b1c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9b20:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d9b24:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d9b28:	bfa2      	ittt	ge
   d9b2a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9b2e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d9b32:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9b34:	4907      	ldr	r1, [pc, #28]	; (d9b54 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d9b36:	9400      	str	r4, [sp, #0]
   d9b38:	4643      	mov	r3, r8
   d9b3a:	463a      	mov	r2, r7
   d9b3c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9b3e:	bfa8      	it	ge
   d9b40:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d9b44:	f7fe ff12 	bl	d896c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d9b48:	fab0 f080 	clz	r0, r0
   d9b4c:	0940      	lsrs	r0, r0, #5
   d9b4e:	b004      	add	sp, #16
   d9b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9b54:	000d9b01 	.word	0x000d9b01

000d9b58 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9b58:	4770      	bx	lr

000d9b5a <_ZN9IPAddressD0Ev>:
   d9b5a:	b510      	push	{r4, lr}
   d9b5c:	2118      	movs	r1, #24
   d9b5e:	4604      	mov	r4, r0
   d9b60:	f002 fa34 	bl	dbfcc <_ZdlPvj>
   d9b64:	4620      	mov	r0, r4
   d9b66:	bd10      	pop	{r4, pc}

000d9b68 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9b68:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9b6a:	7d03      	ldrb	r3, [r0, #20]
   d9b6c:	2b06      	cmp	r3, #6
{
   d9b6e:	b08d      	sub	sp, #52	; 0x34
   d9b70:	460e      	mov	r6, r1
   d9b72:	f100 0704 	add.w	r7, r0, #4
   d9b76:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d9b7a:	d012      	beq.n	d9ba2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d9b7c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d9b80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9b84:	220a      	movs	r2, #10
   d9b86:	4630      	mov	r0, r6
   d9b88:	f001 fb52 	bl	db230 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9b8c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9b8e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d9b90:	d019      	beq.n	d9bc6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d9b92:	2c00      	cmp	r4, #0
   d9b94:	d0f4      	beq.n	d9b80 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d9b96:	212e      	movs	r1, #46	; 0x2e
   d9b98:	4630      	mov	r0, r6
   d9b9a:	f001 fb3a 	bl	db212 <_ZN5Print5printEc>
   d9b9e:	4404      	add	r4, r0
   d9ba0:	e7ee      	b.n	d9b80 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9ba2:	232f      	movs	r3, #47	; 0x2f
   d9ba4:	466a      	mov	r2, sp
   d9ba6:	4639      	mov	r1, r7
   d9ba8:	200a      	movs	r0, #10
		buf[0] = 0;
   d9baa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9bae:	f7fe ff5d 	bl	d8a6c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d9bb2:	4668      	mov	r0, sp
   d9bb4:	f002 ff65 	bl	dca82 <strlen>
   d9bb8:	6833      	ldr	r3, [r6, #0]
   d9bba:	4602      	mov	r2, r0
   d9bbc:	68db      	ldr	r3, [r3, #12]
   d9bbe:	4669      	mov	r1, sp
   d9bc0:	4630      	mov	r0, r6
   d9bc2:	4798      	blx	r3
   d9bc4:	4604      	mov	r4, r0
    }
    return n;
}
   d9bc6:	4620      	mov	r0, r4
   d9bc8:	b00d      	add	sp, #52	; 0x34
   d9bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9bcc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d9bcc:	b510      	push	{r4, lr}
   d9bce:	4b05      	ldr	r3, [pc, #20]	; (d9be4 <_ZN9IPAddressC1Ev+0x18>)
   d9bd0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9bd2:	2211      	movs	r2, #17
   d9bd4:	f840 3b04 	str.w	r3, [r0], #4
   d9bd8:	2100      	movs	r1, #0
   d9bda:	f002 feab 	bl	dc934 <memset>
}
   d9bde:	4620      	mov	r0, r4
   d9be0:	bd10      	pop	{r4, pc}
   d9be2:	bf00      	nop
   d9be4:	000dd944 	.word	0x000dd944

000d9be8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d9be8:	4603      	mov	r3, r0
   d9bea:	4a07      	ldr	r2, [pc, #28]	; (d9c08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9bec:	b510      	push	{r4, lr}
   d9bee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d9bf2:	f101 0210 	add.w	r2, r1, #16
   d9bf6:	f851 4b04 	ldr.w	r4, [r1], #4
   d9bfa:	f843 4b04 	str.w	r4, [r3], #4
   d9bfe:	4291      	cmp	r1, r2
   d9c00:	d1f9      	bne.n	d9bf6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9c02:	780a      	ldrb	r2, [r1, #0]
   d9c04:	701a      	strb	r2, [r3, #0]
}
   d9c06:	bd10      	pop	{r4, pc}
   d9c08:	000dd944 	.word	0x000dd944

000d9c0c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d9c0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9c0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9c12:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9c16:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9c1a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d9c1e:	2304      	movs	r3, #4
   d9c20:	6041      	str	r1, [r0, #4]
   d9c22:	7503      	strb	r3, [r0, #20]
}
   d9c24:	bd10      	pop	{r4, pc}

000d9c26 <_ZN9IPAddressaSEPKh>:
{
   d9c26:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9c28:	78cb      	ldrb	r3, [r1, #3]
   d9c2a:	9300      	str	r3, [sp, #0]
   d9c2c:	788b      	ldrb	r3, [r1, #2]
   d9c2e:	784a      	ldrb	r2, [r1, #1]
   d9c30:	7809      	ldrb	r1, [r1, #0]
   d9c32:	f7ff ffeb 	bl	d9c0c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d9c36:	b002      	add	sp, #8
   d9c38:	bd10      	pop	{r4, pc}

000d9c3a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d9c3a:	f100 0310 	add.w	r3, r0, #16
   d9c3e:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d9c40:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d9c44:	2901      	cmp	r1, #1
   d9c46:	4618      	mov	r0, r3
   d9c48:	d108      	bne.n	d9c5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d9c4a:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d9c4e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d9c52:	3a01      	subs	r2, #1
   d9c54:	f103 0310 	add.w	r3, r3, #16
   d9c58:	d1f2      	bne.n	d9c40 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d9c5a:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d9c5c:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d9c5e:	bf04      	itt	eq
   d9c60:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d9c64:	1852      	addeq	r2, r2, r1
   d9c66:	e7f4      	b.n	d9c52 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d9c68 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d9c68:	b40e      	push	{r1, r2, r3}
   d9c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9c6c:	b088      	sub	sp, #32
   d9c6e:	af00      	add	r7, sp, #0
   d9c70:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9c74:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9c76:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9c7a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d9c7c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9c7e:	462b      	mov	r3, r5
   d9c80:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d9c82:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9c84:	f7ff f944 	bl	d8f10 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d9c88:	280f      	cmp	r0, #15
   d9c8a:	687a      	ldr	r2, [r7, #4]
   d9c8c:	d91a      	bls.n	d9cc4 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d9c8e:	f100 0308 	add.w	r3, r0, #8
   d9c92:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d9c96:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d9c98:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9c9c:	1c41      	adds	r1, r0, #1
   d9c9e:	462b      	mov	r3, r5
   d9ca0:	4668      	mov	r0, sp
        va_start(args, fmt);
   d9ca2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d9ca4:	f7ff f934 	bl	d8f10 <vsnprintf>
        if (n > 0) {
   d9ca8:	1e02      	subs	r2, r0, #0
   d9caa:	dd04      	ble.n	d9cb6 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d9cac:	6823      	ldr	r3, [r4, #0]
   d9cae:	4669      	mov	r1, sp
   d9cb0:	689b      	ldr	r3, [r3, #8]
   d9cb2:	4620      	mov	r0, r4
   d9cb4:	4798      	blx	r3
   d9cb6:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d9cb8:	3720      	adds	r7, #32
   d9cba:	46bd      	mov	sp, r7
   d9cbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d9cc0:	b003      	add	sp, #12
   d9cc2:	4770      	bx	lr
    } else if (n > 0) {
   d9cc4:	2800      	cmp	r0, #0
   d9cc6:	d0f7      	beq.n	d9cb8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d9cc8:	6823      	ldr	r3, [r4, #0]
   d9cca:	4602      	mov	r2, r0
   d9ccc:	689b      	ldr	r3, [r3, #8]
   d9cce:	f107 0110 	add.w	r1, r7, #16
   d9cd2:	4620      	mov	r0, r4
   d9cd4:	4798      	blx	r3
}
   d9cd6:	e7ef      	b.n	d9cb8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d9cd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9cd8:	b510      	push	{r4, lr}
          _M_dispose();
   d9cda:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9cdc:	4604      	mov	r4, r0
          _M_dispose();
   d9cde:	689b      	ldr	r3, [r3, #8]
   d9ce0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d9ce2:	68a3      	ldr	r3, [r4, #8]
   d9ce4:	3b01      	subs	r3, #1
   d9ce6:	60a3      	str	r3, [r4, #8]
   d9ce8:	b92b      	cbnz	r3, d9cf6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d9cea:	6823      	ldr	r3, [r4, #0]
   d9cec:	4620      	mov	r0, r4
   d9cee:	68db      	ldr	r3, [r3, #12]
    }
   d9cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d9cf4:	4718      	bx	r3
    }
   d9cf6:	bd10      	pop	{r4, pc}

000d9cf8 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d9cf8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d9cfa:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d9cfc:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d9d00:	689b      	ldr	r3, [r3, #8]
   d9d02:	2201      	movs	r2, #1
   d9d04:	f10d 0107 	add.w	r1, sp, #7
   d9d08:	4798      	blx	r3
}
   d9d0a:	b003      	add	sp, #12
   d9d0c:	f85d fb04 	ldr.w	pc, [sp], #4

000d9d10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d9d10:	b538      	push	{r3, r4, r5, lr}
   d9d12:	680b      	ldr	r3, [r1, #0]
   d9d14:	6003      	str	r3, [r0, #0]
   d9d16:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d9d18:	6843      	ldr	r3, [r0, #4]
   d9d1a:	429d      	cmp	r5, r3
    class __shared_ptr
   d9d1c:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d9d1e:	d00c      	beq.n	d9d3a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d9d20:	b115      	cbz	r5, d9d28 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d9d22:	686b      	ldr	r3, [r5, #4]
   d9d24:	3301      	adds	r3, #1
   d9d26:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d9d28:	6860      	ldr	r0, [r4, #4]
   d9d2a:	b128      	cbz	r0, d9d38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d9d2c:	6843      	ldr	r3, [r0, #4]
   d9d2e:	3b01      	subs	r3, #1
   d9d30:	6043      	str	r3, [r0, #4]
   d9d32:	b90b      	cbnz	r3, d9d38 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d9d34:	f7ff ffd0 	bl	d9cd8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d9d38:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d9d3a:	4620      	mov	r0, r4
   d9d3c:	bd38      	pop	{r3, r4, r5, pc}

000d9d3e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9d3e:	460b      	mov	r3, r1
   d9d40:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d9d42:	2200      	movs	r2, #0
   d9d44:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d9d46:	e9c0 2200 	strd	r2, r2, [r0]
   d9d4a:	4604      	mov	r4, r0
        t_ = t;
   d9d4c:	6083      	str	r3, [r0, #8]
    if (t) {
   d9d4e:	b90b      	cbnz	r3, d9d54 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d9d50:	4620      	mov	r0, r4
   d9d52:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   d9d54:	f7ff ffdc 	bl	d9d10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d9d58:	e7fa      	b.n	d9d50 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d9d5a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d9d5a:	6883      	ldr	r3, [r0, #8]
   d9d5c:	b1eb      	cbz	r3, d9d9a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d9d5e:	781a      	ldrb	r2, [r3, #0]
   d9d60:	2a03      	cmp	r2, #3
   d9d62:	d81a      	bhi.n	d9d9a <_ZNK5spark9JSONValue4typeEv+0x40>
   d9d64:	e8df f002 	tbb	[pc, r2]
   d9d68:	1b021704 	.word	0x1b021704
   d9d6c:	2005      	movs	r0, #5
   d9d6e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d9d70:	6802      	ldr	r2, [r0, #0]
   d9d72:	685b      	ldr	r3, [r3, #4]
   d9d74:	6852      	ldr	r2, [r2, #4]
   d9d76:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d9d78:	282d      	cmp	r0, #45	; 0x2d
   d9d7a:	d012      	beq.n	d9da2 <_ZNK5spark9JSONValue4typeEv+0x48>
   d9d7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9d80:	2b09      	cmp	r3, #9
   d9d82:	d90e      	bls.n	d9da2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d9d84:	2874      	cmp	r0, #116	; 0x74
   d9d86:	d00e      	beq.n	d9da6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d9d88:	2866      	cmp	r0, #102	; 0x66
   d9d8a:	d00c      	beq.n	d9da6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d9d8c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d9d90:	4258      	negs	r0, r3
   d9d92:	4158      	adcs	r0, r3
   d9d94:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d9d96:	2006      	movs	r0, #6
   d9d98:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d9d9a:	2000      	movs	r0, #0
   d9d9c:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d9d9e:	2004      	movs	r0, #4
   d9da0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d9da2:	2003      	movs	r0, #3
   d9da4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d9da6:	2002      	movs	r0, #2
}
   d9da8:	4770      	bx	lr

000d9daa <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d9daa:	b510      	push	{r4, lr}
   d9dac:	4604      	mov	r4, r0
    switch (type()) {
   d9dae:	f7ff ffd4 	bl	d9d5a <_ZNK5spark9JSONValue4typeEv>
   d9db2:	2802      	cmp	r0, #2
   d9db4:	d00e      	beq.n	d9dd4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d9db6:	1ec3      	subs	r3, r0, #3
   d9db8:	b2db      	uxtb	r3, r3
   d9dba:	2b01      	cmp	r3, #1
   d9dbc:	d814      	bhi.n	d9de8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d9dbe:	6822      	ldr	r2, [r4, #0]
   d9dc0:	68a3      	ldr	r3, [r4, #8]
   d9dc2:	6850      	ldr	r0, [r2, #4]
   d9dc4:	685b      	ldr	r3, [r3, #4]
}
   d9dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d9dca:	220a      	movs	r2, #10
   d9dcc:	2100      	movs	r1, #0
   d9dce:	4418      	add	r0, r3
   d9dd0:	f002 bf3e 	b.w	dcc50 <strtol>
        const char* const s = d_->json + t_->start;
   d9dd4:	6822      	ldr	r2, [r4, #0]
   d9dd6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d9dd8:	6852      	ldr	r2, [r2, #4]
   d9dda:	685b      	ldr	r3, [r3, #4]
   d9ddc:	5cd0      	ldrb	r0, [r2, r3]
   d9dde:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d9de2:	4258      	negs	r0, r3
   d9de4:	4158      	adcs	r0, r3
}
   d9de6:	bd10      	pop	{r4, pc}
    switch (type()) {
   d9de8:	2000      	movs	r0, #0
   d9dea:	e7fc      	b.n	d9de6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d9dec <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9dec:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9dee:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d9df0:	e9c0 3300 	strd	r3, r3, [r0]
   d9df4:	4604      	mov	r4, r0
        n_(0) {
   d9df6:	480e      	ldr	r0, [pc, #56]	; (d9e30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d9df8:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9dfc:	b1a9      	cbz	r1, d9e2a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d9dfe:	780b      	ldrb	r3, [r1, #0]
   d9e00:	2b03      	cmp	r3, #3
   d9e02:	d006      	beq.n	d9e12 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d9e04:	b98b      	cbnz	r3, d9e2a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d9e06:	6813      	ldr	r3, [r2, #0]
   d9e08:	6858      	ldr	r0, [r3, #4]
   d9e0a:	684b      	ldr	r3, [r1, #4]
   d9e0c:	5cc3      	ldrb	r3, [r0, r3]
   d9e0e:	2b6e      	cmp	r3, #110	; 0x6e
   d9e10:	d007      	beq.n	d9e22 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d9e12:	6813      	ldr	r3, [r2, #0]
   d9e14:	684d      	ldr	r5, [r1, #4]
   d9e16:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d9e18:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d9e1a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d9e1c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d9e1e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d9e20:	60e3      	str	r3, [r4, #12]
   d9e22:	4611      	mov	r1, r2
   d9e24:	4620      	mov	r0, r4
   d9e26:	f7ff ff73 	bl	d9d10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9e2a:	4620      	mov	r0, r4
   d9e2c:	bd38      	pop	{r3, r4, r5, pc}
   d9e2e:	bf00      	nop
   d9e30:	000dd9ad 	.word	0x000dd9ad

000d9e34 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9e34:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d9e36:	2500      	movs	r5, #0
   d9e38:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d9e3a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d9e3e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d9e42:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d9e46:	4604      	mov	r4, r0
   d9e48:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d9e4a:	b14b      	cbz	r3, d9e60 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d9e4c:	781a      	ldrb	r2, [r3, #0]
   d9e4e:	2a01      	cmp	r2, #1
   d9e50:	d106      	bne.n	d9e60 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d9e52:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d9e56:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d9e58:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d9e5a:	6143      	str	r3, [r0, #20]
   d9e5c:	f7ff ff58 	bl	d9d10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d9e60:	4620      	mov	r0, r4
   d9e62:	bd38      	pop	{r3, r4, r5, pc}

000d9e64 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d9e64:	b510      	push	{r4, lr}
    if (!n_) {
   d9e66:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d9e68:	4604      	mov	r4, r0
    if (!n_) {
   d9e6a:	b163      	cbz	r3, d9e86 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d9e6c:	6880      	ldr	r0, [r0, #8]
   d9e6e:	60e0      	str	r0, [r4, #12]
    --n_;
   d9e70:	3b01      	subs	r3, #1
    ++t_;
   d9e72:	3010      	adds	r0, #16
   d9e74:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d9e76:	6120      	str	r0, [r4, #16]
    --n_;
   d9e78:	6163      	str	r3, [r4, #20]
    if (n_) {
   d9e7a:	b113      	cbz	r3, d9e82 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d9e7c:	f7ff fedd 	bl	d9c3a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d9e80:	60a0      	str	r0, [r4, #8]
    return true;
   d9e82:	2001      	movs	r0, #1
   d9e84:	e000      	b.n	d9e88 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d9e86:	4618      	mov	r0, r3
}
   d9e88:	bd10      	pop	{r4, pc}

000d9e8a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9e8a:	b510      	push	{r4, lr}
    write('}');
   d9e8c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d9e8e:	4604      	mov	r4, r0
    write('}');
   d9e90:	f7ff ff32 	bl	d9cf8 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d9e94:	2301      	movs	r3, #1
   d9e96:	7123      	strb	r3, [r4, #4]
}
   d9e98:	4620      	mov	r0, r4
   d9e9a:	bd10      	pop	{r4, pc}

000d9e9c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d9e9c:	b508      	push	{r3, lr}
    switch (state_) {
   d9e9e:	7903      	ldrb	r3, [r0, #4]
   d9ea0:	2b01      	cmp	r3, #1
   d9ea2:	d002      	beq.n	d9eaa <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d9ea4:	2b02      	cmp	r3, #2
   d9ea6:	d004      	beq.n	d9eb2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d9ea8:	bd08      	pop	{r3, pc}
        write(',');
   d9eaa:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d9eac:	f7ff ff24 	bl	d9cf8 <_ZN5spark10JSONWriter5writeEc>
}
   d9eb0:	e7fa      	b.n	d9ea8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d9eb2:	213a      	movs	r1, #58	; 0x3a
   d9eb4:	e7fa      	b.n	d9eac <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d9eb6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d9eb6:	b510      	push	{r4, lr}
   d9eb8:	4604      	mov	r4, r0
    writeSeparator();
   d9eba:	f7ff ffef 	bl	d9e9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d9ebe:	4620      	mov	r0, r4
   d9ec0:	217b      	movs	r1, #123	; 0x7b
   d9ec2:	f7ff ff19 	bl	d9cf8 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d9ec6:	2300      	movs	r3, #0
   d9ec8:	7123      	strb	r3, [r4, #4]
}
   d9eca:	4620      	mov	r0, r4
   d9ecc:	bd10      	pop	{r4, pc}
	...

000d9ed0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d9ed0:	b513      	push	{r0, r1, r4, lr}
   d9ed2:	4604      	mov	r4, r0
   d9ed4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9ed6:	f7ff ffe1 	bl	d9e9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d9eda:	6823      	ldr	r3, [r4, #0]
   d9edc:	9a01      	ldr	r2, [sp, #4]
   d9ede:	68db      	ldr	r3, [r3, #12]
   d9ee0:	4903      	ldr	r1, [pc, #12]	; (d9ef0 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d9ee2:	4620      	mov	r0, r4
   d9ee4:	4798      	blx	r3
    state_ = NEXT;
   d9ee6:	2301      	movs	r3, #1
}
   d9ee8:	4620      	mov	r0, r4
    state_ = NEXT;
   d9eea:	7123      	strb	r3, [r4, #4]
}
   d9eec:	b002      	add	sp, #8
   d9eee:	bd10      	pop	{r4, pc}
   d9ef0:	000dd363 	.word	0x000dd363

000d9ef4 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d9ef4:	b513      	push	{r0, r1, r4, lr}
   d9ef6:	4604      	mov	r4, r0
   d9ef8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d9efa:	f7ff ffcf 	bl	d9e9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d9efe:	6823      	ldr	r3, [r4, #0]
   d9f00:	9a01      	ldr	r2, [sp, #4]
   d9f02:	68db      	ldr	r3, [r3, #12]
   d9f04:	4903      	ldr	r1, [pc, #12]	; (d9f14 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d9f06:	4620      	mov	r0, r4
   d9f08:	4798      	blx	r3
    state_ = NEXT;
   d9f0a:	2301      	movs	r3, #1
}
   d9f0c:	4620      	mov	r0, r4
    state_ = NEXT;
   d9f0e:	7123      	strb	r3, [r4, #4]
}
   d9f10:	b002      	add	sp, #8
   d9f12:	bd10      	pop	{r4, pc}
   d9f14:	000dd597 	.word	0x000dd597

000d9f18 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9f1c:	460d      	mov	r5, r1
   d9f1e:	4617      	mov	r7, r2
    write('"');
   d9f20:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d9f22:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d9fc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d9f26:	4604      	mov	r4, r0
    const char* const end = str + size;
   d9f28:	442f      	add	r7, r5
    write('"');
   d9f2a:	f7ff fee5 	bl	d9cf8 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d9f2e:	4629      	mov	r1, r5
    while (s != end) {
   d9f30:	42bd      	cmp	r5, r7
   d9f32:	462a      	mov	r2, r5
   d9f34:	d038      	beq.n	d9fa8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d9f36:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d9f3a:	2e22      	cmp	r6, #34	; 0x22
   d9f3c:	d003      	beq.n	d9f46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d9f3e:	2e5c      	cmp	r6, #92	; 0x5c
   d9f40:	d001      	beq.n	d9f46 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d9f42:	2e1f      	cmp	r6, #31
   d9f44:	d8f4      	bhi.n	d9f30 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d9f46:	6823      	ldr	r3, [r4, #0]
   d9f48:	1a52      	subs	r2, r2, r1
   d9f4a:	689b      	ldr	r3, [r3, #8]
   d9f4c:	4620      	mov	r0, r4
   d9f4e:	4798      	blx	r3
            write('\\');
   d9f50:	215c      	movs	r1, #92	; 0x5c
   d9f52:	4620      	mov	r0, r4
   d9f54:	f7ff fed0 	bl	d9cf8 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d9f58:	2e0d      	cmp	r6, #13
   d9f5a:	d80a      	bhi.n	d9f72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d9f5c:	2e07      	cmp	r6, #7
   d9f5e:	d91c      	bls.n	d9f9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9f60:	f1a6 0308 	sub.w	r3, r6, #8
   d9f64:	2b05      	cmp	r3, #5
   d9f66:	d818      	bhi.n	d9f9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d9f68:	e8df f003 	tbb	[pc, r3]
   d9f6c:	17110f0d 	.word	0x17110f0d
   d9f70:	1513      	.short	0x1513
   d9f72:	2e22      	cmp	r6, #34	; 0x22
   d9f74:	d001      	beq.n	d9f7a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d9f76:	2e5c      	cmp	r6, #92	; 0x5c
   d9f78:	d10f      	bne.n	d9f9a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d9f7a:	4631      	mov	r1, r6
                write('b');
   d9f7c:	4620      	mov	r0, r4
   d9f7e:	f7ff febb 	bl	d9cf8 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d9f82:	4629      	mov	r1, r5
    while (s != end) {
   d9f84:	e7d4      	b.n	d9f30 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d9f86:	2162      	movs	r1, #98	; 0x62
   d9f88:	e7f8      	b.n	d9f7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d9f8a:	2174      	movs	r1, #116	; 0x74
   d9f8c:	e7f6      	b.n	d9f7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d9f8e:	216e      	movs	r1, #110	; 0x6e
   d9f90:	e7f4      	b.n	d9f7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d9f92:	2166      	movs	r1, #102	; 0x66
   d9f94:	e7f2      	b.n	d9f7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d9f96:	2172      	movs	r1, #114	; 0x72
   d9f98:	e7f0      	b.n	d9f7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d9f9a:	6823      	ldr	r3, [r4, #0]
   d9f9c:	4632      	mov	r2, r6
   d9f9e:	68db      	ldr	r3, [r3, #12]
   d9fa0:	4641      	mov	r1, r8
   d9fa2:	4620      	mov	r0, r4
   d9fa4:	4798      	blx	r3
                break;
   d9fa6:	e7ec      	b.n	d9f82 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d9fa8:	428d      	cmp	r5, r1
   d9faa:	d004      	beq.n	d9fb6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d9fac:	6823      	ldr	r3, [r4, #0]
   d9fae:	1a6a      	subs	r2, r5, r1
   d9fb0:	689b      	ldr	r3, [r3, #8]
   d9fb2:	4620      	mov	r0, r4
   d9fb4:	4798      	blx	r3
    }
    write('"');
   d9fb6:	2122      	movs	r1, #34	; 0x22
   d9fb8:	4620      	mov	r0, r4
   d9fba:	f7ff fe9d 	bl	d9cf8 <_ZN5spark10JSONWriter5writeEc>
}
   d9fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9fc2:	bf00      	nop
   d9fc4:	000dd950 	.word	0x000dd950

000d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9fc8:	b513      	push	{r0, r1, r4, lr}
   d9fca:	4604      	mov	r4, r0
   d9fcc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9fd0:	f7ff ff64 	bl	d9e9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d9fd4:	4620      	mov	r0, r4
   d9fd6:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9fda:	f7ff ff9d 	bl	d9f18 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d9fde:	2302      	movs	r3, #2
}
   d9fe0:	4620      	mov	r0, r4
    state_ = VALUE;
   d9fe2:	7123      	strb	r3, [r4, #4]
}
   d9fe4:	b002      	add	sp, #8
   d9fe6:	bd10      	pop	{r4, pc}

000d9fe8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9fe8:	b513      	push	{r0, r1, r4, lr}
   d9fea:	4604      	mov	r4, r0
   d9fec:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d9ff0:	f7ff ff54 	bl	d9e9c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d9ff4:	4620      	mov	r0, r4
   d9ff6:	e9dd 2100 	ldrd	r2, r1, [sp]
   d9ffa:	f7ff ff8d 	bl	d9f18 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d9ffe:	2301      	movs	r3, #1
}
   da000:	4620      	mov	r0, r4
    state_ = NEXT;
   da002:	7123      	strb	r3, [r4, #4]
}
   da004:	b002      	add	sp, #8
   da006:	bd10      	pop	{r4, pc}

000da008 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   da008:	6880      	ldr	r0, [r0, #8]
   da00a:	6803      	ldr	r3, [r0, #0]
   da00c:	68db      	ldr	r3, [r3, #12]
   da00e:	4718      	bx	r3

000da010 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   da010:	4770      	bx	lr

000da012 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   da012:	4608      	mov	r0, r1
   da014:	b111      	cbz	r1, da01c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   da016:	680b      	ldr	r3, [r1, #0]
   da018:	685b      	ldr	r3, [r3, #4]
   da01a:	4718      	bx	r3
}
   da01c:	4770      	bx	lr

000da01e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   da01e:	4770      	bx	lr

000da020 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   da020:	4770      	bx	lr

000da022 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   da022:	4770      	bx	lr

000da024 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   da024:	4770      	bx	lr

000da026 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   da026:	b538      	push	{r3, r4, r5, lr}
   da028:	4604      	mov	r4, r0
   da02a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   da02c:	6800      	ldr	r0, [r0, #0]
   da02e:	212e      	movs	r1, #46	; 0x2e
   da030:	f002 fced 	bl	dca0e <strchrnul>
    size = s - category;
   da034:	6823      	ldr	r3, [r4, #0]
   da036:	1ac3      	subs	r3, r0, r3
   da038:	602b      	str	r3, [r5, #0]
    if (size) {
   da03a:	b123      	cbz	r3, da046 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   da03c:	7803      	ldrb	r3, [r0, #0]
   da03e:	b103      	cbz	r3, da042 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   da040:	3001      	adds	r0, #1
   da042:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   da044:	6020      	str	r0, [r4, #0]
}
   da046:	4618      	mov	r0, r3
   da048:	bd38      	pop	{r3, r4, r5, pc}

000da04a <_ZN5spark16JSONStreamWriterD0Ev>:
   da04a:	b510      	push	{r4, lr}
   da04c:	210c      	movs	r1, #12
   da04e:	4604      	mov	r4, r0
   da050:	f001 ffbc 	bl	dbfcc <_ZdlPvj>
   da054:	4620      	mov	r0, r4
   da056:	bd10      	pop	{r4, pc}

000da058 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   da058:	b510      	push	{r4, lr}
   da05a:	2104      	movs	r1, #4
   da05c:	4604      	mov	r4, r0
   da05e:	f001 ffb5 	bl	dbfcc <_ZdlPvj>
   da062:	4620      	mov	r0, r4
   da064:	bd10      	pop	{r4, pc}

000da066 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   da066:	b510      	push	{r4, lr}
   da068:	2104      	movs	r1, #4
   da06a:	4604      	mov	r4, r0
   da06c:	f001 ffae 	bl	dbfcc <_ZdlPvj>
   da070:	4620      	mov	r0, r4
   da072:	bd10      	pop	{r4, pc}

000da074 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   da074:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   da076:	f002 fcd4 	bl	dca22 <strcmp>
}
   da07a:	fab0 f080 	clz	r0, r0
   da07e:	0940      	lsrs	r0, r0, #5
   da080:	bd08      	pop	{r3, pc}

000da082 <__tcf_1>:
   da082:	4770      	bx	lr

000da084 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   da084:	b510      	push	{r4, lr}
   da086:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   da088:	f001 fdba 	bl	dbc00 <_Z16_fetch_usbserialv>
   da08c:	4284      	cmp	r4, r0
   da08e:	d010      	beq.n	da0b2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   da090:	f001 fd2e 	bl	dbaf0 <_Z22__fetch_global_Serial1v>
   da094:	4284      	cmp	r4, r0
   da096:	d105      	bne.n	da0a4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   da098:	f001 fd2a 	bl	dbaf0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   da09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   da0a0:	f001 bd23 	b.w	dbaea <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   da0a4:	b12c      	cbz	r4, da0b2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   da0a6:	6823      	ldr	r3, [r4, #0]
   da0a8:	4620      	mov	r0, r4
   da0aa:	685b      	ldr	r3, [r3, #4]
}
   da0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da0b0:	4718      	bx	r3
   da0b2:	bd10      	pop	{r4, pc}

000da0b4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   da0b4:	b513      	push	{r0, r1, r4, lr}
   da0b6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   da0b8:	4608      	mov	r0, r1
   da0ba:	9101      	str	r1, [sp, #4]
   da0bc:	f002 fce1 	bl	dca82 <strlen>
   da0c0:	9901      	ldr	r1, [sp, #4]
   da0c2:	4602      	mov	r2, r0
   da0c4:	4620      	mov	r0, r4
}
   da0c6:	b002      	add	sp, #8
   da0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   da0cc:	f7ff bf8c 	b.w	d9fe8 <_ZN5spark10JSONWriter5valueEPKcj>

000da0d0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   da0d0:	b513      	push	{r0, r1, r4, lr}
   da0d2:	4604      	mov	r4, r0
    write(str, strlen(str));
   da0d4:	4608      	mov	r0, r1
   da0d6:	9101      	str	r1, [sp, #4]
   da0d8:	f002 fcd3 	bl	dca82 <strlen>
   da0dc:	6823      	ldr	r3, [r4, #0]
   da0de:	9901      	ldr	r1, [sp, #4]
   da0e0:	68db      	ldr	r3, [r3, #12]
   da0e2:	4602      	mov	r2, r0
   da0e4:	4620      	mov	r0, r4
}
   da0e6:	b002      	add	sp, #8
   da0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   da0ec:	4718      	bx	r3

000da0ee <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   da0ee:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   da0f0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   da0f2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   da0f6:	68db      	ldr	r3, [r3, #12]
   da0f8:	2201      	movs	r2, #1
   da0fa:	f10d 0107 	add.w	r1, sp, #7
   da0fe:	4798      	blx	r3
}
   da100:	b003      	add	sp, #12
   da102:	f85d fb04 	ldr.w	pc, [sp], #4

000da106 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   da106:	b40e      	push	{r1, r2, r3}
   da108:	b503      	push	{r0, r1, lr}
   da10a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   da10c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   da10e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   da112:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   da114:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   da116:	f001 f8a9 	bl	db26c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   da11a:	b002      	add	sp, #8
   da11c:	f85d eb04 	ldr.w	lr, [sp], #4
   da120:	b003      	add	sp, #12
   da122:	4770      	bx	lr

000da124 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   da124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   da128:	e9d0 9500 	ldrd	r9, r5, [r0]
   da12c:	f04f 0814 	mov.w	r8, #20
   da130:	fb08 f505 	mul.w	r5, r8, r5
   da134:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   da136:	10ab      	asrs	r3, r5, #2
   da138:	4d18      	ldr	r5, [pc, #96]	; (da19c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   da13a:	4617      	mov	r7, r2
   da13c:	435d      	muls	r5, r3
   da13e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   da140:	2d00      	cmp	r5, #0
   da142:	dd23      	ble.n	da18c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   da144:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   da146:	fb08 f006 	mul.w	r0, r8, r6
   da14a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   da14e:	463a      	mov	r2, r7
   da150:	f8ba b004 	ldrh.w	fp, [sl, #4]
   da154:	5820      	ldr	r0, [r4, r0]
   da156:	9101      	str	r1, [sp, #4]
   da158:	455f      	cmp	r7, fp
   da15a:	bf28      	it	cs
   da15c:	465a      	movcs	r2, fp
   da15e:	f002 fc98 	bl	dca92 <strncmp>
                if (cmp == 0) {
   da162:	9901      	ldr	r1, [sp, #4]
   da164:	2301      	movs	r3, #1
   da166:	b978      	cbnz	r0, da188 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   da168:	455f      	cmp	r7, fp
   da16a:	d103      	bne.n	da174 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   da16c:	9a00      	ldr	r2, [sp, #0]
   da16e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   da170:	4635      	mov	r5, r6
   da172:	e7e5      	b.n	da140 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   da174:	bf8c      	ite	hi
   da176:	2001      	movhi	r0, #1
   da178:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   da17a:	2800      	cmp	r0, #0
   da17c:	d0f8      	beq.n	da170 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   da17e:	1bae      	subs	r6, r5, r6
	      ++__first;
   da180:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   da184:	3e01      	subs	r6, #1
   da186:	e7f3      	b.n	da170 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   da188:	0fc0      	lsrs	r0, r0, #31
   da18a:	e7f6      	b.n	da17a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   da18c:	eba4 0409 	sub.w	r4, r4, r9
}
   da190:	4802      	ldr	r0, [pc, #8]	; (da19c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   da192:	10a4      	asrs	r4, r4, #2
   da194:	4360      	muls	r0, r4
   da196:	b003      	add	sp, #12
   da198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da19c:	cccccccd 	.word	0xcccccccd

000da1a0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   da1a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   da1a2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   da1a4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   da1a6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   da1a8:	b30b      	cbz	r3, da1ee <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   da1aa:	b301      	cbz	r1, da1ee <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   da1ac:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   da1ae:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   da1b2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   da1b4:	a903      	add	r1, sp, #12
   da1b6:	a801      	add	r0, sp, #4
   da1b8:	f7ff ff35 	bl	da026 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da1bc:	4601      	mov	r1, r0
   da1be:	b1b0      	cbz	r0, da1ee <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   da1c0:	f10d 030b 	add.w	r3, sp, #11
   da1c4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   da1c6:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   da1ca:	4620      	mov	r0, r4
   da1cc:	f7ff ffaa 	bl	da124 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   da1d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   da1d4:	b15b      	cbz	r3, da1ee <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   da1d6:	6824      	ldr	r4, [r4, #0]
   da1d8:	2314      	movs	r3, #20
   da1da:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   da1de:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   da1e2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   da1e6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   da1e8:	bfa8      	it	ge
   da1ea:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   da1ec:	e7e2      	b.n	da1b4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   da1ee:	4630      	mov	r0, r6
   da1f0:	b004      	add	sp, #16
   da1f2:	bd70      	pop	{r4, r5, r6, pc}

000da1f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   da1f4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   da1f6:	4c09      	ldr	r4, [pc, #36]	; (da21c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   da1f8:	7823      	ldrb	r3, [r4, #0]
   da1fa:	f3bf 8f5b 	dmb	ish
   da1fe:	07db      	lsls	r3, r3, #31
   da200:	d409      	bmi.n	da216 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   da202:	4620      	mov	r0, r4
   da204:	f7f9 ff58 	bl	d40b8 <__cxa_guard_acquire>
   da208:	b128      	cbz	r0, da216 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   da20a:	4620      	mov	r0, r4
   da20c:	f7f9 ff59 	bl	d40c2 <__cxa_guard_release>
   da210:	4803      	ldr	r0, [pc, #12]	; (da220 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   da212:	f002 fb4f 	bl	dc8b4 <atexit>
}
   da216:	4803      	ldr	r0, [pc, #12]	; (da224 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   da218:	bd10      	pop	{r4, pc}
   da21a:	bf00      	nop
   da21c:	2003e568 	.word	0x2003e568
   da220:	000da01f 	.word	0x000da01f
   da224:	2003dce8 	.word	0x2003dce8

000da228 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   da228:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   da22a:	4c09      	ldr	r4, [pc, #36]	; (da250 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   da22c:	7823      	ldrb	r3, [r4, #0]
   da22e:	f3bf 8f5b 	dmb	ish
   da232:	07db      	lsls	r3, r3, #31
   da234:	d409      	bmi.n	da24a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   da236:	4620      	mov	r0, r4
   da238:	f7f9 ff3e 	bl	d40b8 <__cxa_guard_acquire>
   da23c:	b128      	cbz	r0, da24a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   da23e:	4620      	mov	r0, r4
   da240:	f7f9 ff3f 	bl	d40c2 <__cxa_guard_release>
   da244:	4803      	ldr	r0, [pc, #12]	; (da254 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   da246:	f002 fb35 	bl	dc8b4 <atexit>
    return &factory;
}
   da24a:	4803      	ldr	r0, [pc, #12]	; (da258 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   da24c:	bd10      	pop	{r4, pc}
   da24e:	bf00      	nop
   da250:	2003e56c 	.word	0x2003e56c
   da254:	000da083 	.word	0x000da083
   da258:	2003dcec 	.word	0x2003dcec

000da25c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   da25c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   da25e:	2500      	movs	r5, #0
   da260:	4604      	mov	r4, r0
   da262:	e9c0 5500 	strd	r5, r5, [r0]
   da266:	e9c0 5504 	strd	r5, r5, [r0, #16]
   da26a:	6085      	str	r5, [r0, #8]
   da26c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   da26e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   da272:	f7fe fafb 	bl	d886c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   da276:	f7ff ffbd 	bl	da1f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   da27a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   da27c:	f7ff ffd4 	bl	da228 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   da280:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   da282:	6220      	str	r0, [r4, #32]
}
   da284:	4620      	mov	r0, r4
   da286:	bd38      	pop	{r3, r4, r5, pc}

000da288 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   da288:	b510      	push	{r4, lr}
    static LogManager mgr;
   da28a:	4c0a      	ldr	r4, [pc, #40]	; (da2b4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   da28c:	7823      	ldrb	r3, [r4, #0]
   da28e:	f3bf 8f5b 	dmb	ish
   da292:	07db      	lsls	r3, r3, #31
   da294:	d40c      	bmi.n	da2b0 <_ZN5spark10LogManager8instanceEv+0x28>
   da296:	4620      	mov	r0, r4
   da298:	f7f9 ff0e 	bl	d40b8 <__cxa_guard_acquire>
   da29c:	b140      	cbz	r0, da2b0 <_ZN5spark10LogManager8instanceEv+0x28>
   da29e:	4806      	ldr	r0, [pc, #24]	; (da2b8 <_ZN5spark10LogManager8instanceEv+0x30>)
   da2a0:	f7ff ffdc 	bl	da25c <_ZN5spark10LogManagerC1Ev>
   da2a4:	4620      	mov	r0, r4
   da2a6:	f7f9 ff0c 	bl	d40c2 <__cxa_guard_release>
   da2aa:	4804      	ldr	r0, [pc, #16]	; (da2bc <_ZN5spark10LogManager8instanceEv+0x34>)
   da2ac:	f002 fb02 	bl	dc8b4 <atexit>
    return &mgr;
}
   da2b0:	4801      	ldr	r0, [pc, #4]	; (da2b8 <_ZN5spark10LogManager8instanceEv+0x30>)
   da2b2:	bd10      	pop	{r4, pc}
   da2b4:	2003e564 	.word	0x2003e564
   da2b8:	2003e574 	.word	0x2003e574
   da2bc:	000da6f1 	.word	0x000da6f1

000da2c0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   da2c0:	4a02      	ldr	r2, [pc, #8]	; (da2cc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   da2c2:	4903      	ldr	r1, [pc, #12]	; (da2d0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   da2c4:	4803      	ldr	r0, [pc, #12]	; (da2d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   da2c6:	2300      	movs	r3, #0
   da2c8:	f7fe bce0 	b.w	d8c8c <log_set_callbacks>
   da2cc:	000da579 	.word	0x000da579
   da2d0:	000da505 	.word	0x000da505
   da2d4:	000da485 	.word	0x000da485

000da2d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   da2d8:	2300      	movs	r3, #0
   da2da:	461a      	mov	r2, r3
   da2dc:	4619      	mov	r1, r3
   da2de:	4618      	mov	r0, r3
   da2e0:	f7fe bcd4 	b.w	d8c8c <log_set_callbacks>

000da2e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   da2e4:	b570      	push	{r4, r5, r6, lr}
   da2e6:	b08a      	sub	sp, #40	; 0x28
   da2e8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   da2ea:	4601      	mov	r1, r0
   da2ec:	a804      	add	r0, sp, #16
   da2ee:	f7fc fcd3 	bl	d6c98 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   da2f2:	4e14      	ldr	r6, [pc, #80]	; (da344 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   da2f4:	a804      	add	r0, sp, #16
   da2f6:	f7ff fdb5 	bl	d9e64 <_ZN5spark18JSONObjectIterator4nextEv>
   da2fa:	b1e8      	cbz	r0, da338 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   da2fc:	a904      	add	r1, sp, #16
   da2fe:	4668      	mov	r0, sp
   da300:	f7fc fcdb 	bl	d6cba <_ZNK5spark18JSONObjectIterator4nameEv>
   da304:	9802      	ldr	r0, [sp, #8]
   da306:	4631      	mov	r1, r6
   da308:	f7ff feb4 	bl	da074 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   da30c:	4604      	mov	r4, r0
   da30e:	b110      	cbz	r0, da316 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   da310:	1e2c      	subs	r4, r5, #0
   da312:	bf18      	it	ne
   da314:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   da316:	a801      	add	r0, sp, #4
   da318:	f7fa fc32 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da31c:	2c00      	cmp	r4, #0
   da31e:	d0e9      	beq.n	da2f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   da320:	a904      	add	r1, sp, #16
   da322:	4668      	mov	r0, sp
   da324:	f7fc fcda 	bl	d6cdc <_ZNK5spark18JSONObjectIterator5valueEv>
   da328:	4668      	mov	r0, sp
   da32a:	f7ff fd3e 	bl	d9daa <_ZNK5spark9JSONValue5toIntEv>
   da32e:	6028      	str	r0, [r5, #0]
   da330:	a801      	add	r0, sp, #4
   da332:	f7fa fc25 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   da336:	e7dd      	b.n	da2f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   da338:	a805      	add	r0, sp, #20
   da33a:	f7fa fc21 	bl	d4b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   da33e:	b00a      	add	sp, #40	; 0x28
   da340:	bd70      	pop	{r4, r5, r6, pc}
   da342:	bf00      	nop
   da344:	000dd956 	.word	0x000dd956

000da348 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   da348:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da34a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   da34c:	4620      	mov	r0, r4
   da34e:	4912      	ldr	r1, [pc, #72]	; (da398 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   da350:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   da352:	f002 fb66 	bl	dca22 <strcmp>
   da356:	b948      	cbnz	r0, da36c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   da358:	f001 fc52 	bl	dbc00 <_Z16_fetch_usbserialv>
   da35c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   da360:	f001 fc3e 	bl	dbbe0 <_ZN9USBSerial5beginEl>
        return &Serial;
   da364:	f001 fc4c 	bl	dbc00 <_Z16_fetch_usbserialv>
}
   da368:	b003      	add	sp, #12
   da36a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   da36c:	490b      	ldr	r1, [pc, #44]	; (da39c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   da36e:	4620      	mov	r0, r4
   da370:	f002 fb57 	bl	dca22 <strcmp>
   da374:	b970      	cbnz	r0, da394 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   da376:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   da37a:	a901      	add	r1, sp, #4
   da37c:	4628      	mov	r0, r5
        int baud = 9600;
   da37e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   da380:	f7ff ffb0 	bl	da2e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   da384:	f001 fbb4 	bl	dbaf0 <_Z22__fetch_global_Serial1v>
   da388:	9901      	ldr	r1, [sp, #4]
   da38a:	f001 fbab 	bl	dbae4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   da38e:	f001 fbaf 	bl	dbaf0 <_Z22__fetch_global_Serial1v>
   da392:	e7e9      	b.n	da368 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   da394:	2000      	movs	r0, #0
   da396:	e7e7      	b.n	da368 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   da398:	000dd95b 	.word	0x000dd95b
   da39c:	000dd962 	.word	0x000dd962

000da3a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da3a0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da3a2:	e9d0 5300 	ldrd	r5, r3, [r0]
   da3a6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   da3a8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da3aa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da3ae:	42ae      	cmp	r6, r5
   da3b0:	d005      	beq.n	da3be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   da3b2:	f105 0008 	add.w	r0, r5, #8
   da3b6:	f7ff fff3 	bl	da3a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da3ba:	3514      	adds	r5, #20
   da3bc:	e7f7      	b.n	da3ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   da3be:	6820      	ldr	r0, [r4, #0]
   da3c0:	f7fe fd7e 	bl	d8ec0 <free>
}
   da3c4:	4620      	mov	r0, r4
   da3c6:	bd70      	pop	{r4, r5, r6, pc}

000da3c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   da3c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   da3ca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   da3ce:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   da3d0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   da3d4:	42ae      	cmp	r6, r5
   da3d6:	d004      	beq.n	da3e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   da3d8:	4628      	mov	r0, r5
   da3da:	f001 f853 	bl	db484 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   da3de:	3510      	adds	r5, #16
   da3e0:	e7f8      	b.n	da3d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   da3e2:	6820      	ldr	r0, [r4, #0]
   da3e4:	f7fe fd6c 	bl	d8ec0 <free>
}
   da3e8:	4620      	mov	r0, r4
   da3ea:	bd70      	pop	{r4, r5, r6, pc}

000da3ec <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   da3ec:	b510      	push	{r4, lr}
   da3ee:	4604      	mov	r4, r0
   da3f0:	300c      	adds	r0, #12
   da3f2:	f7ff ffd5 	bl	da3a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   da3f6:	4620      	mov	r0, r4
   da3f8:	f7ff ffe6 	bl	da3c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   da3fc:	4620      	mov	r0, r4
   da3fe:	bd10      	pop	{r4, pc}

000da400 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   da400:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   da402:	4b04      	ldr	r3, [pc, #16]	; (da414 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   da404:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   da406:	f840 3b04 	str.w	r3, [r0], #4
   da40a:	f7ff ffef 	bl	da3ec <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   da40e:	4620      	mov	r0, r4
   da410:	bd10      	pop	{r4, pc}
   da412:	bf00      	nop
   da414:	000dd0c4 	.word	0x000dd0c4

000da418 <_ZN5spark16StreamLogHandlerD0Ev>:
   da418:	b510      	push	{r4, lr}
   da41a:	4604      	mov	r4, r0
   da41c:	f7ff fff0 	bl	da400 <_ZN5spark16StreamLogHandlerD1Ev>
   da420:	4620      	mov	r0, r4
   da422:	2124      	movs	r1, #36	; 0x24
   da424:	f001 fdd2 	bl	dbfcc <_ZdlPvj>
   da428:	4620      	mov	r0, r4
   da42a:	bd10      	pop	{r4, pc}

000da42c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   da42c:	b510      	push	{r4, lr}
   da42e:	4b03      	ldr	r3, [pc, #12]	; (da43c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   da430:	6003      	str	r3, [r0, #0]
   da432:	4604      	mov	r4, r0
   da434:	f7ff ffe4 	bl	da400 <_ZN5spark16StreamLogHandlerD1Ev>
   da438:	4620      	mov	r0, r4
   da43a:	bd10      	pop	{r4, pc}
   da43c:	000dd9fc 	.word	0x000dd9fc

000da440 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   da440:	b510      	push	{r4, lr}
   da442:	4604      	mov	r4, r0
   da444:	f7ff fff2 	bl	da42c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   da448:	4620      	mov	r0, r4
   da44a:	2124      	movs	r1, #36	; 0x24
   da44c:	f001 fdbe 	bl	dbfcc <_ZdlPvj>
   da450:	4620      	mov	r0, r4
   da452:	bd10      	pop	{r4, pc}

000da454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   da454:	2200      	movs	r2, #0
   da456:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   da45a:	b510      	push	{r4, lr}
        capacity_(0) {
   da45c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   da45e:	680c      	ldr	r4, [r1, #0]
   da460:	6004      	str	r4, [r0, #0]
   da462:	684c      	ldr	r4, [r1, #4]
   da464:	6044      	str	r4, [r0, #4]
   da466:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da468:	600a      	str	r2, [r1, #0]
   da46a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   da46c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da46e:	608a      	str	r2, [r1, #8]
}
   da470:	bd10      	pop	{r4, pc}

000da472 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   da472:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   da474:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   da476:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   da478:	6818      	ldr	r0, [r3, #0]
   da47a:	f7fe fa0f 	bl	d889c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   da47e:	4620      	mov	r0, r4
   da480:	bd10      	pop	{r4, pc}
	...

000da484 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   da484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da488:	b087      	sub	sp, #28
   da48a:	4680      	mov	r8, r0
   da48c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   da48e:	4b1c      	ldr	r3, [pc, #112]	; (da500 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   da490:	685b      	ldr	r3, [r3, #4]
   da492:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da496:	4689      	mov	r9, r1
   da498:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   da49a:	b96b      	cbnz	r3, da4b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   da49c:	f7ff fef4 	bl	da288 <_ZN5spark10LogManager8instanceEv>
   da4a0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da4a2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   da4a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   da4a8:	9305      	str	r3, [sp, #20]
   da4aa:	f7fe f9ef 	bl	d888c <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   da4ae:	7b23      	ldrb	r3, [r4, #12]
   da4b0:	b12b      	cbz	r3, da4be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   da4b2:	a805      	add	r0, sp, #20
   da4b4:	f7ff ffdd 	bl	da472 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   da4b8:	b007      	add	sp, #28
   da4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   da4be:	2301      	movs	r3, #1
   da4c0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   da4c2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   da4c6:	fa5f f989 	uxtb.w	r9, r9
   da4ca:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da4ce:	45aa      	cmp	sl, r5
   da4d0:	d012      	beq.n	da4f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   da4d2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   da4d6:	4631      	mov	r1, r6
   da4d8:	1d38      	adds	r0, r7, #4
   da4da:	f7ff fe61 	bl	da1a0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da4de:	4581      	cmp	r9, r0
   da4e0:	d3f5      	bcc.n	da4ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   da4e2:	683b      	ldr	r3, [r7, #0]
   da4e4:	9a03      	ldr	r2, [sp, #12]
   da4e6:	9200      	str	r2, [sp, #0]
   da4e8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   da4ec:	464a      	mov	r2, r9
   da4ee:	4633      	mov	r3, r6
   da4f0:	4641      	mov	r1, r8
   da4f2:	4638      	mov	r0, r7
   da4f4:	47d8      	blx	fp
   da4f6:	e7ea      	b.n	da4ce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   da4f8:	2300      	movs	r3, #0
   da4fa:	7323      	strb	r3, [r4, #12]
   da4fc:	e7d9      	b.n	da4b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   da4fe:	bf00      	nop
   da500:	e000ed00 	.word	0xe000ed00

000da504 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   da504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da508:	469b      	mov	fp, r3
   da50a:	4b1a      	ldr	r3, [pc, #104]	; (da574 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   da50c:	685b      	ldr	r3, [r3, #4]
   da50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da512:	4680      	mov	r8, r0
   da514:	4689      	mov	r9, r1
   da516:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   da518:	b96b      	cbnz	r3, da536 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   da51a:	f7ff feb5 	bl	da288 <_ZN5spark10LogManager8instanceEv>
   da51e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   da520:	f100 0324 	add.w	r3, r0, #36	; 0x24
   da524:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da526:	9301      	str	r3, [sp, #4]
   da528:	f7fe f9b0 	bl	d888c <os_mutex_recursive_lock>
        if (that->isActive()) {
   da52c:	7b23      	ldrb	r3, [r4, #12]
   da52e:	b12b      	cbz	r3, da53c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   da530:	a801      	add	r0, sp, #4
   da532:	f7ff ff9e 	bl	da472 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   da536:	b003      	add	sp, #12
   da538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   da53c:	2301      	movs	r3, #1
   da53e:	7323      	strb	r3, [r4, #12]
   da540:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   da544:	b2f6      	uxtb	r6, r6
   da546:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da54a:	4555      	cmp	r5, sl
   da54c:	d00e      	beq.n	da56c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   da54e:	f855 7b04 	ldr.w	r7, [r5], #4
   da552:	4659      	mov	r1, fp
   da554:	1d38      	adds	r0, r7, #4
   da556:	f7ff fe23 	bl	da1a0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   da55a:	4286      	cmp	r6, r0
   da55c:	d3f5      	bcc.n	da54a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   da55e:	683b      	ldr	r3, [r7, #0]
   da560:	464a      	mov	r2, r9
   da562:	68db      	ldr	r3, [r3, #12]
   da564:	4641      	mov	r1, r8
   da566:	4638      	mov	r0, r7
   da568:	4798      	blx	r3
   da56a:	e7ee      	b.n	da54a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   da56c:	2300      	movs	r3, #0
   da56e:	7323      	strb	r3, [r4, #12]
   da570:	e7de      	b.n	da530 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   da572:	bf00      	nop
   da574:	e000ed00 	.word	0xe000ed00

000da578 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   da578:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da57c:	4b16      	ldr	r3, [pc, #88]	; (da5d8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   da57e:	685b      	ldr	r3, [r3, #4]
   da580:	f3c3 0308 	ubfx	r3, r3, #0, #9
   da584:	4605      	mov	r5, r0
   da586:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   da588:	bb1b      	cbnz	r3, da5d2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   da58a:	f7ff fe7d 	bl	da288 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   da58e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   da592:	4604      	mov	r4, r0
   da594:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da596:	9301      	str	r3, [sp, #4]
   da598:	f7fe f978 	bl	d888c <os_mutex_recursive_lock>
   da59c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   da5a0:	2446      	movs	r4, #70	; 0x46
   da5a2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   da5a6:	45b0      	cmp	r8, r6
   da5a8:	d109      	bne.n	da5be <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   da5aa:	a801      	add	r0, sp, #4
   da5ac:	f7ff ff61 	bl	da472 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   da5b0:	42a5      	cmp	r5, r4
   da5b2:	bfb4      	ite	lt
   da5b4:	2000      	movlt	r0, #0
   da5b6:	2001      	movge	r0, #1
}
   da5b8:	b002      	add	sp, #8
   da5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   da5be:	f856 0b04 	ldr.w	r0, [r6], #4
   da5c2:	4639      	mov	r1, r7
   da5c4:	3004      	adds	r0, #4
   da5c6:	f7ff fdeb 	bl	da1a0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   da5ca:	4284      	cmp	r4, r0
   da5cc:	bfa8      	it	ge
   da5ce:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   da5d0:	e7e9      	b.n	da5a6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   da5d2:	2000      	movs	r0, #0
   da5d4:	e7f0      	b.n	da5b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   da5d6:	bf00      	nop
   da5d8:	e000ed00 	.word	0xe000ed00

000da5dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da5dc:	b570      	push	{r4, r5, r6, lr}
   da5de:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   da5e0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   da5e4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   da5e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   da5ea:	4282      	cmp	r2, r0
   da5ec:	d007      	beq.n	da5fe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   da5ee:	4601      	mov	r1, r0
            if (*p == value) {
   da5f0:	681d      	ldr	r5, [r3, #0]
   da5f2:	f851 6b04 	ldr.w	r6, [r1], #4
   da5f6:	42ae      	cmp	r6, r5
   da5f8:	d003      	beq.n	da602 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   da5fa:	4608      	mov	r0, r1
   da5fc:	e7f5      	b.n	da5ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   da5fe:	2000      	movs	r0, #0
}
   da600:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   da602:	1a52      	subs	r2, r2, r1
   da604:	f002 f97c 	bl	dc900 <memmove>
    --size_;
   da608:	6863      	ldr	r3, [r4, #4]
   da60a:	3b01      	subs	r3, #1
   da60c:	6063      	str	r3, [r4, #4]
    return true;
   da60e:	2001      	movs	r0, #1
   da610:	e7f6      	b.n	da600 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000da612 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   da612:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   da614:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   da618:	4604      	mov	r4, r0
   da61a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da61c:	9101      	str	r1, [sp, #4]
   da61e:	9303      	str	r3, [sp, #12]
   da620:	f7fe f934 	bl	d888c <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   da624:	a901      	add	r1, sp, #4
   da626:	4620      	mov	r0, r4
   da628:	f7ff ffd8 	bl	da5dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   da62c:	b118      	cbz	r0, da636 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   da62e:	6863      	ldr	r3, [r4, #4]
   da630:	b90b      	cbnz	r3, da636 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   da632:	f7ff fe51 	bl	da2d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da636:	a803      	add	r0, sp, #12
   da638:	f7ff ff1b 	bl	da472 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   da63c:	b004      	add	sp, #16
   da63e:	bd10      	pop	{r4, pc}

000da640 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   da640:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   da642:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   da646:	2318      	movs	r3, #24
   da648:	4604      	mov	r4, r0
   da64a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   da64e:	42ae      	cmp	r6, r5
   da650:	d015      	beq.n	da67e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   da652:	f105 0110 	add.w	r1, r5, #16
   da656:	4620      	mov	r0, r4
   da658:	f7ff ffc0 	bl	da5dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   da65c:	6863      	ldr	r3, [r4, #4]
   da65e:	b90b      	cbnz	r3, da664 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   da660:	f7ff fe3a 	bl	da2d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   da664:	69e0      	ldr	r0, [r4, #28]
   da666:	6929      	ldr	r1, [r5, #16]
   da668:	6803      	ldr	r3, [r0, #0]
   da66a:	68db      	ldr	r3, [r3, #12]
   da66c:	4798      	blx	r3
        if (h.stream) {
   da66e:	6969      	ldr	r1, [r5, #20]
   da670:	b119      	cbz	r1, da67a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   da672:	6a20      	ldr	r0, [r4, #32]
   da674:	6803      	ldr	r3, [r0, #0]
   da676:	68db      	ldr	r3, [r3, #12]
   da678:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   da67a:	3518      	adds	r5, #24
   da67c:	e7e7      	b.n	da64e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   da67e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   da682:	2618      	movs	r6, #24
   da684:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da688:	42ae      	cmp	r6, r5
   da68a:	d004      	beq.n	da696 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   da68c:	4628      	mov	r0, r5
   da68e:	f000 fef9 	bl	db484 <_ZN6StringD1Ev>
   da692:	3518      	adds	r5, #24
   da694:	e7f8      	b.n	da688 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   da696:	2300      	movs	r3, #0
   da698:	6163      	str	r3, [r4, #20]
}
   da69a:	bd70      	pop	{r4, r5, r6, pc}

000da69c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   da69c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   da69e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   da6a0:	f7ff fe1a 	bl	da2d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da6a4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   da6a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da6aa:	9301      	str	r3, [sp, #4]
   da6ac:	f7fe f8ee 	bl	d888c <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   da6b0:	4620      	mov	r0, r4
   da6b2:	f7ff ffc5 	bl	da640 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   da6b6:	a801      	add	r0, sp, #4
   da6b8:	f7ff fedb 	bl	da472 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   da6bc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   da6be:	b108      	cbz	r0, da6c4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   da6c0:	f7fe f8dc 	bl	d887c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   da6c4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   da6c8:	2618      	movs	r6, #24
   da6ca:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   da6ce:	42ae      	cmp	r6, r5
   da6d0:	d004      	beq.n	da6dc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   da6d2:	4628      	mov	r0, r5
   da6d4:	f000 fed6 	bl	db484 <_ZN6StringD1Ev>
   da6d8:	3518      	adds	r5, #24
   da6da:	e7f8      	b.n	da6ce <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   da6dc:	6920      	ldr	r0, [r4, #16]
   da6de:	f7fe fbef 	bl	d8ec0 <free>
   da6e2:	6820      	ldr	r0, [r4, #0]
   da6e4:	f7fe fbec 	bl	d8ec0 <free>
}
   da6e8:	4620      	mov	r0, r4
   da6ea:	b002      	add	sp, #8
   da6ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000da6f0 <__tcf_2>:
    static LogManager mgr;
   da6f0:	4801      	ldr	r0, [pc, #4]	; (da6f8 <__tcf_2+0x8>)
   da6f2:	f7ff bfd3 	b.w	da69c <_ZN5spark10LogManagerD1Ev>
   da6f6:	bf00      	nop
   da6f8:	2003e574 	.word	0x2003e574

000da6fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   da6fc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da700:	4606      	mov	r6, r0
   da702:	460c      	mov	r4, r1
   da704:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   da706:	d927      	bls.n	da758 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   da708:	4290      	cmp	r0, r2
   da70a:	d226      	bcs.n	da75a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   da70c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   da710:	1a6c      	subs	r4, r5, r1
   da712:	f1a1 0714 	sub.w	r7, r1, #20
   da716:	4404      	add	r4, r0
        capacity_(0) {
   da718:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   da71a:	42af      	cmp	r7, r5
   da71c:	d03d      	beq.n	da79a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   da71e:	b1a4      	cbz	r4, da74a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   da720:	682b      	ldr	r3, [r5, #0]
   da722:	6023      	str	r3, [r4, #0]
   da724:	88ab      	ldrh	r3, [r5, #4]
   da726:	80a3      	strh	r3, [r4, #4]
   da728:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   da72c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   da72e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   da732:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da734:	68ab      	ldr	r3, [r5, #8]
   da736:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da738:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da73a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   da73c:	68ea      	ldr	r2, [r5, #12]
   da73e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da740:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da742:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   da744:	692a      	ldr	r2, [r5, #16]
   da746:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   da748:	612b      	str	r3, [r5, #16]
   da74a:	f105 0008 	add.w	r0, r5, #8
   da74e:	f7ff fe27 	bl	da3a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   da752:	3d14      	subs	r5, #20
   da754:	3c14      	subs	r4, #20
   da756:	e7e0      	b.n	da71a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   da758:	d01f      	beq.n	da79a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   da75a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   da75c:	42ac      	cmp	r4, r5
   da75e:	d01c      	beq.n	da79a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   da760:	b1a6      	cbz	r6, da78c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   da762:	6823      	ldr	r3, [r4, #0]
   da764:	6033      	str	r3, [r6, #0]
   da766:	88a3      	ldrh	r3, [r4, #4]
   da768:	80b3      	strh	r3, [r6, #4]
   da76a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   da76e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   da770:	e9c6 7702 	strd	r7, r7, [r6, #8]
   da774:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   da776:	68a3      	ldr	r3, [r4, #8]
   da778:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   da77a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da77c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   da77e:	68e2      	ldr	r2, [r4, #12]
   da780:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   da782:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da784:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   da786:	6922      	ldr	r2, [r4, #16]
   da788:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   da78a:	6123      	str	r3, [r4, #16]
   da78c:	f104 0008 	add.w	r0, r4, #8
   da790:	f7ff fe06 	bl	da3a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   da794:	3414      	adds	r4, #20
   da796:	3614      	adds	r6, #20
   da798:	e7e0      	b.n	da75c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   da79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da79c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   da79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da79e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   da7a2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   da7a4:	4604      	mov	r4, r0
   da7a6:	460e      	mov	r6, r1
   da7a8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da7aa:	db0d      	blt.n	da7c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   da7ac:	3501      	adds	r5, #1
        if (n > 0) {
   da7ae:	2d00      	cmp	r5, #0
   da7b0:	6800      	ldr	r0, [r0, #0]
   da7b2:	dd04      	ble.n	da7be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   da7b4:	00a9      	lsls	r1, r5, #2
   da7b6:	f7fe fb8b 	bl	d8ed0 <realloc>
            if (!d) {
   da7ba:	b918      	cbnz	r0, da7c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   da7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   da7be:	f7fe fb7f 	bl	d8ec0 <free>
        T* d = nullptr;
   da7c2:	2000      	movs	r0, #0
        data_ = d;
   da7c4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   da7c6:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   da7c8:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   da7ca:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   da7cc:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   da7d0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   da7d2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   da7d6:	1d08      	adds	r0, r1, #4
   da7d8:	f002 f892 	bl	dc900 <memmove>
    new(p) T(std::move(value));
   da7dc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   da7e0:	6863      	ldr	r3, [r4, #4]
   da7e2:	3301      	adds	r3, #1
   da7e4:	6063      	str	r3, [r4, #4]
    return true;
   da7e6:	2001      	movs	r0, #1
   da7e8:	e7e8      	b.n	da7bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000da7ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   da7ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   da7ec:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   da7f0:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   da7f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   da7f4:	9301      	str	r3, [sp, #4]
   da7f6:	460d      	mov	r5, r1
   da7f8:	f7fe f848 	bl	d888c <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   da7fc:	e9d4 3100 	ldrd	r3, r1, [r4]
   da800:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   da804:	4283      	cmp	r3, r0
   da806:	461a      	mov	r2, r3
   da808:	d00b      	beq.n	da822 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   da80a:	6812      	ldr	r2, [r2, #0]
   da80c:	42aa      	cmp	r2, r5
   da80e:	f103 0304 	add.w	r3, r3, #4
   da812:	d1f7      	bne.n	da804 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   da814:	a801      	add	r0, sp, #4
   da816:	f7ff fe2c 	bl	da472 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   da81a:	2500      	movs	r5, #0
}
   da81c:	4628      	mov	r0, r5
   da81e:	b003      	add	sp, #12
   da820:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   da822:	462a      	mov	r2, r5
   da824:	4620      	mov	r0, r4
   da826:	f7ff ffb9 	bl	da79c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   da82a:	4605      	mov	r5, r0
   da82c:	2800      	cmp	r0, #0
   da82e:	d0f1      	beq.n	da814 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   da830:	6863      	ldr	r3, [r4, #4]
   da832:	2b01      	cmp	r3, #1
   da834:	d101      	bne.n	da83a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   da836:	f7ff fd43 	bl	da2c0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   da83a:	a801      	add	r0, sp, #4
   da83c:	f7ff fe19 	bl	da472 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   da840:	e7ec      	b.n	da81c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000da842 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   da842:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   da844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da846:	4604      	mov	r4, r0
   da848:	460d      	mov	r5, r1
   da84a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   da84c:	d914      	bls.n	da878 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   da84e:	4290      	cmp	r0, r2
   da850:	d213      	bcs.n	da87a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   da852:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   da856:	1a75      	subs	r5, r6, r1
   da858:	f1a1 0710 	sub.w	r7, r1, #16
   da85c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   da85e:	42b7      	cmp	r7, r6
   da860:	d018      	beq.n	da894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   da862:	b11c      	cbz	r4, da86c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   da864:	4631      	mov	r1, r6
   da866:	4620      	mov	r0, r4
   da868:	f000 fe88 	bl	db57c <_ZN6StringC1EOS_>
                end->~T();
   da86c:	4630      	mov	r0, r6
   da86e:	f000 fe09 	bl	db484 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   da872:	3e10      	subs	r6, #16
   da874:	3c10      	subs	r4, #16
   da876:	e7f2      	b.n	da85e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   da878:	d00c      	beq.n	da894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   da87a:	42b5      	cmp	r5, r6
   da87c:	d00a      	beq.n	da894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   da87e:	b11c      	cbz	r4, da888 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   da880:	4629      	mov	r1, r5
   da882:	4620      	mov	r0, r4
   da884:	f000 fe7a 	bl	db57c <_ZN6StringC1EOS_>
                p->~T();
   da888:	4628      	mov	r0, r5
   da88a:	f000 fdfb 	bl	db484 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   da88e:	3510      	adds	r5, #16
   da890:	3410      	adds	r4, #16
   da892:	e7f2      	b.n	da87a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   da894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da896 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   da896:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   da898:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   da89a:	4605      	mov	r5, r0
        if (n > 0) {
   da89c:	dd11      	ble.n	da8c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   da89e:	0130      	lsls	r0, r6, #4
   da8a0:	f7fe fb06 	bl	d8eb0 <malloc>
            if (!d) {
   da8a4:	4604      	mov	r4, r0
   da8a6:	b158      	cbz	r0, da8c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   da8a8:	e9d5 1200 	ldrd	r1, r2, [r5]
   da8ac:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   da8b0:	f7ff ffc7 	bl	da842 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   da8b4:	6828      	ldr	r0, [r5, #0]
   da8b6:	f7fe fb03 	bl	d8ec0 <free>
        data_ = d;
   da8ba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   da8bc:	60ae      	str	r6, [r5, #8]
        return true;
   da8be:	2001      	movs	r0, #1
    }
   da8c0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   da8c2:	2400      	movs	r4, #0
   da8c4:	e7f6      	b.n	da8b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000da8c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da8c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da8ca:	4691      	mov	r9, r2
   da8cc:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   da8ce:	2300      	movs	r3, #0
   da8d0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   da8d2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   da8d6:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   da8d8:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   da8da:	4299      	cmp	r1, r3
        capacity_(0) {
   da8dc:	e9c0 3300 	strd	r3, r3, [r0]
   da8e0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   da8e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   da8e8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   da8ec:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   da8ee:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   da8f0:	dc23      	bgt.n	da93a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   da8f2:	e9d9 5700 	ldrd	r5, r7, [r9]
   da8f6:	2314      	movs	r3, #20
   da8f8:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   da8fc:	42af      	cmp	r7, r5
   da8fe:	d03b      	beq.n	da978 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   da900:	4629      	mov	r1, r5
   da902:	a80d      	add	r0, sp, #52	; 0x34
   da904:	f000 fe3a 	bl	db57c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   da908:	a90d      	add	r1, sp, #52	; 0x34
   da90a:	a811      	add	r0, sp, #68	; 0x44
   da90c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   da90e:	f000 fe35 	bl	db57c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da912:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   da916:	4299      	cmp	r1, r3
   da918:	da1b      	bge.n	da952 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   da91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   da91c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   da91e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   da922:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   da926:	4631      	mov	r1, r6
   da928:	f106 0010 	add.w	r0, r6, #16
   da92c:	f7ff ff89 	bl	da842 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   da930:	b9ee      	cbnz	r6, da96e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   da932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da934:	3301      	adds	r3, #1
   da936:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   da938:	e011      	b.n	da95e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   da93a:	a80a      	add	r0, sp, #40	; 0x28
   da93c:	f7ff ffab 	bl	da896 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   da940:	2800      	cmp	r0, #0
   da942:	d1d6      	bne.n	da8f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   da944:	a80a      	add	r0, sp, #40	; 0x28
   da946:	f7ff fd3f 	bl	da3c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   da94a:	4620      	mov	r0, r4
   da94c:	b017      	add	sp, #92	; 0x5c
   da94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da952:	3101      	adds	r1, #1
   da954:	a80a      	add	r0, sp, #40	; 0x28
   da956:	f7ff ff9e 	bl	da896 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   da95a:	2800      	cmp	r0, #0
   da95c:	d1dd      	bne.n	da91a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   da95e:	a811      	add	r0, sp, #68	; 0x44
   da960:	f000 fd90 	bl	db484 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   da964:	a80d      	add	r0, sp, #52	; 0x34
   da966:	f000 fd8d 	bl	db484 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   da96a:	3514      	adds	r5, #20
   da96c:	e7c6      	b.n	da8fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   da96e:	a911      	add	r1, sp, #68	; 0x44
   da970:	4630      	mov	r0, r6
   da972:	f000 fe03 	bl	db57c <_ZN6StringC1EOS_>
   da976:	e7dc      	b.n	da932 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   da978:	2600      	movs	r6, #0
   da97a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   da97e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   da980:	4637      	mov	r7, r6
   da982:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   da986:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da98a:	429e      	cmp	r6, r3
   da98c:	f280 8097 	bge.w	daabe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   da990:	0133      	lsls	r3, r6, #4
   da992:	58d3      	ldr	r3, [r2, r3]
   da994:	9308      	str	r3, [sp, #32]
        if (!category) {
   da996:	b90b      	cbnz	r3, da99c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   da998:	3601      	adds	r6, #1
   da99a:	e7f4      	b.n	da986 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   da99c:	fb0a f306 	mul.w	r3, sl, r6
   da9a0:	9709      	str	r7, [sp, #36]	; 0x24
   da9a2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   da9a4:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   da9a6:	a909      	add	r1, sp, #36	; 0x24
   da9a8:	a808      	add	r0, sp, #32
   da9aa:	f7ff fb3c 	bl	da026 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   da9ae:	4683      	mov	fp, r0
   da9b0:	2800      	cmp	r0, #0
   da9b2:	d0f1      	beq.n	da998 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   da9b4:	4601      	mov	r1, r0
   da9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   da9b8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   da9bc:	f10d 031f 	add.w	r3, sp, #31
   da9c0:	4628      	mov	r0, r5
   da9c2:	f7ff fbaf 	bl	da124 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da9c6:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   da9ca:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   da9cc:	f1b8 0f00 	cmp.w	r8, #0
   da9d0:	d166      	bne.n	daaa0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   da9d2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   da9d6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   da9da:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   da9de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da9e2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   da9e6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   da9ea:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   da9ee:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   da9f2:	4293      	cmp	r3, r2
   da9f4:	db1a      	blt.n	daa2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   da9f6:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   da9fa:	f1bb 0f00 	cmp.w	fp, #0
   da9fe:	dd4a      	ble.n	daa96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   daa00:	fb0a f00b 	mul.w	r0, sl, fp
   daa04:	f7fe fa54 	bl	d8eb0 <malloc>
            if (!d) {
   daa08:	9004      	str	r0, [sp, #16]
   daa0a:	2800      	cmp	r0, #0
   daa0c:	d045      	beq.n	daa9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   daa0e:	e9d5 1200 	ldrd	r1, r2, [r5]
   daa12:	fb0a 1202 	mla	r2, sl, r2, r1
   daa16:	f7ff fe71 	bl	da6fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   daa1a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   daa1c:	6828      	ldr	r0, [r5, #0]
   daa1e:	9304      	str	r3, [sp, #16]
   daa20:	f7fe fa4e 	bl	d8ec0 <free>
        data_ = d;
   daa24:	9b04      	ldr	r3, [sp, #16]
   daa26:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   daa28:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   daa2c:	9b01      	ldr	r3, [sp, #4]
   daa2e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   daa32:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   daa34:	fb0a f303 	mul.w	r3, sl, r3
   daa38:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   daa3c:	f101 0014 	add.w	r0, r1, #20
   daa40:	fb0a b202 	mla	r2, sl, r2, fp
   daa44:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   daa46:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   daa48:	f7ff fe58 	bl	da6fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   daa4c:	9904      	ldr	r1, [sp, #16]
   daa4e:	b1a9      	cbz	r1, daa7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   daa50:	9b05      	ldr	r3, [sp, #20]
   daa52:	9a11      	ldr	r2, [sp, #68]	; 0x44
   daa54:	f84b 2003 	str.w	r2, [fp, r3]
   daa58:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   daa5c:	808b      	strh	r3, [r1, #4]
   daa5e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   daa62:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   daa64:	e9c1 7702 	strd	r7, r7, [r1, #8]
   daa68:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   daa6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   daa6c:	608b      	str	r3, [r1, #8]
   daa6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   daa70:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   daa72:	60cb      	str	r3, [r1, #12]
   daa74:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   daa76:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   daa78:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   daa7a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   daa7c:	686b      	ldr	r3, [r5, #4]
   daa7e:	3301      	adds	r3, #1
   daa80:	606b      	str	r3, [r5, #4]
   daa82:	a813      	add	r0, sp, #76	; 0x4c
   daa84:	f7ff fc8c 	bl	da3a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   daa88:	f1b8 0f00 	cmp.w	r8, #0
   daa8c:	d008      	beq.n	daaa0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   daa8e:	a80d      	add	r0, sp, #52	; 0x34
   daa90:	f7ff fc86 	bl	da3a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   daa94:	e756      	b.n	da944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   daa96:	4643      	mov	r3, r8
   daa98:	e7c0      	b.n	daa1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   daa9a:	f04f 0801 	mov.w	r8, #1
   daa9e:	e7f0      	b.n	daa82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   daaa0:	9b01      	ldr	r3, [sp, #4]
   daaa2:	682d      	ldr	r5, [r5, #0]
   daaa4:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   daaa8:	9b08      	ldr	r3, [sp, #32]
   daaaa:	781b      	ldrb	r3, [r3, #0]
   daaac:	b92b      	cbnz	r3, daaba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   daaae:	f8d9 3000 	ldr.w	r3, [r9]
   daab2:	9a02      	ldr	r2, [sp, #8]
   daab4:	4413      	add	r3, r2
   daab6:	7c1b      	ldrb	r3, [r3, #16]
   daab8:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   daaba:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   daabc:	e773      	b.n	da9a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daabe:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   daac0:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daac2:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   daac4:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daac6:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   daac8:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   daaca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   daacc:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daace:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   daad0:	60a2      	str	r2, [r4, #8]
   daad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   daad4:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daad6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   daad8:	60e2      	str	r2, [r4, #12]
   daada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   daadc:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   daade:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   daae0:	6122      	str	r2, [r4, #16]
   daae2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   daae4:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   daae6:	9b03      	ldr	r3, [sp, #12]
   daae8:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   daaea:	6162      	str	r2, [r4, #20]
   daaec:	7623      	strb	r3, [r4, #24]
   daaee:	e7ce      	b.n	daa8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000daaf0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   daaf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   daaf2:	4605      	mov	r5, r0
   daaf4:	4b09      	ldr	r3, [pc, #36]	; (dab1c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   daaf6:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   daafa:	4604      	mov	r4, r0
   daafc:	460e      	mov	r6, r1
        filter_(level, filters) {
   daafe:	a801      	add	r0, sp, #4
   dab00:	4611      	mov	r1, r2
   dab02:	f7fa f8f0 	bl	d4ce6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dab06:	aa01      	add	r2, sp, #4
   dab08:	4631      	mov	r1, r6
   dab0a:	4628      	mov	r0, r5
   dab0c:	f7ff fedb 	bl	da8c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dab10:	a801      	add	r0, sp, #4
   dab12:	f7fa f8a7 	bl	d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   dab16:	4620      	mov	r0, r4
   dab18:	b004      	add	sp, #16
   dab1a:	bd70      	pop	{r4, r5, r6, pc}
   dab1c:	000dd0c4 	.word	0x000dd0c4

000dab20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   dab20:	b5f0      	push	{r4, r5, r6, r7, lr}
   dab22:	460f      	mov	r7, r1
   dab24:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dab26:	4926      	ldr	r1, [pc, #152]	; (dabc0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   dab28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dab2a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   dab2c:	4616      	mov	r6, r2
   dab2e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   dab30:	f001 ff77 	bl	dca22 <strcmp>
   dab34:	bb00      	cbnz	r0, dab78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   dab36:	b1e4      	cbz	r4, dab72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   dab38:	4629      	mov	r1, r5
   dab3a:	4668      	mov	r0, sp
   dab3c:	f7ff fc8a 	bl	da454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dab40:	4920      	ldr	r1, [pc, #128]	; (dabc4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dab42:	2024      	movs	r0, #36	; 0x24
   dab44:	f001 fa44 	bl	dbfd0 <_ZnwjRKSt9nothrow_t>
   dab48:	4605      	mov	r5, r0
   dab4a:	b170      	cbz	r0, dab6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dab4c:	4669      	mov	r1, sp
   dab4e:	a803      	add	r0, sp, #12
   dab50:	f7fa f8c9 	bl	d4ce6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   dab54:	aa03      	add	r2, sp, #12
   dab56:	4631      	mov	r1, r6
   dab58:	4628      	mov	r0, r5
   dab5a:	f7ff ffc9 	bl	daaf0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dab5e:	a803      	add	r0, sp, #12
   dab60:	f7fa f880 	bl	d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   dab64:	4b18      	ldr	r3, [pc, #96]	; (dabc8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   dab66:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   dab68:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dab6a:	4668      	mov	r0, sp
   dab6c:	f7fa f87a 	bl	d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dab70:	462c      	mov	r4, r5
}
   dab72:	4620      	mov	r0, r4
   dab74:	b007      	add	sp, #28
   dab76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   dab78:	4914      	ldr	r1, [pc, #80]	; (dabcc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   dab7a:	4638      	mov	r0, r7
   dab7c:	f001 ff51 	bl	dca22 <strcmp>
   dab80:	b9e0      	cbnz	r0, dabbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   dab82:	2c00      	cmp	r4, #0
   dab84:	d0f5      	beq.n	dab72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   dab86:	4629      	mov	r1, r5
   dab88:	4668      	mov	r0, sp
   dab8a:	f7ff fc63 	bl	da454 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   dab8e:	490d      	ldr	r1, [pc, #52]	; (dabc4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   dab90:	2024      	movs	r0, #36	; 0x24
   dab92:	f001 fa1d 	bl	dbfd0 <_ZnwjRKSt9nothrow_t>
   dab96:	4605      	mov	r5, r0
   dab98:	2800      	cmp	r0, #0
   dab9a:	d0e6      	beq.n	dab6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   dab9c:	4669      	mov	r1, sp
   dab9e:	a803      	add	r0, sp, #12
   daba0:	f7fa f8a1 	bl	d4ce6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   daba4:	aa03      	add	r2, sp, #12
   daba6:	4631      	mov	r1, r6
   daba8:	4628      	mov	r0, r5
   dabaa:	f7ff ffa1 	bl	daaf0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   dabae:	a803      	add	r0, sp, #12
   dabb0:	f7fa f858 	bl	d4c64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   dabb4:	4b06      	ldr	r3, [pc, #24]	; (dabd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   dabb6:	602b      	str	r3, [r5, #0]
   dabb8:	622c      	str	r4, [r5, #32]
}
   dabba:	e7d6      	b.n	dab6a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   dabbc:	2400      	movs	r4, #0
   dabbe:	e7d8      	b.n	dab72 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   dabc0:	000dd96a 	.word	0x000dd96a
   dabc4:	000ddb2c 	.word	0x000ddb2c
   dabc8:	000dd9fc 	.word	0x000dd9fc
   dabcc:	000dd96e 	.word	0x000dd96e
   dabd0:	000dd9e4 	.word	0x000dd9e4

000dabd4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   dabd4:	4b01      	ldr	r3, [pc, #4]	; (dabdc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dabd6:	4a02      	ldr	r2, [pc, #8]	; (dabe0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dabd8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   dabda:	4770      	bx	lr
   dabdc:	2003e570 	.word	0x2003e570
   dabe0:	000dd97f 	.word	0x000dd97f

000dabe4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dabe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dabe8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   dabea:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dabee:	4604      	mov	r4, r0
   dabf0:	460e      	mov	r6, r1
   dabf2:	4617      	mov	r7, r2
   dabf4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   dabf6:	f001 f803 	bl	dbc00 <_Z16_fetch_usbserialv>
   dabfa:	4581      	cmp	r9, r0
   dabfc:	d04c      	beq.n	dac98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   dabfe:	792b      	ldrb	r3, [r5, #4]
   dac00:	0719      	lsls	r1, r3, #28
   dac02:	d504      	bpl.n	dac0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   dac04:	696a      	ldr	r2, [r5, #20]
   dac06:	4954      	ldr	r1, [pc, #336]	; (dad58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   dac08:	4620      	mov	r0, r4
   dac0a:	f7ff fa7c 	bl	da106 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   dac0e:	f1b8 0f00 	cmp.w	r8, #0
   dac12:	d00d      	beq.n	dac30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   dac14:	215b      	movs	r1, #91	; 0x5b
   dac16:	4620      	mov	r0, r4
   dac18:	f7ff fa69 	bl	da0ee <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   dac1c:	4641      	mov	r1, r8
   dac1e:	4620      	mov	r0, r4
   dac20:	f7ff fa56 	bl	da0d0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   dac24:	6823      	ldr	r3, [r4, #0]
   dac26:	494d      	ldr	r1, [pc, #308]	; (dad5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   dac28:	68db      	ldr	r3, [r3, #12]
   dac2a:	2202      	movs	r2, #2
   dac2c:	4620      	mov	r0, r4
   dac2e:	4798      	blx	r3
    if (attr.has_file) {
   dac30:	792b      	ldrb	r3, [r5, #4]
   dac32:	07da      	lsls	r2, r3, #31
   dac34:	d523      	bpl.n	dac7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   dac36:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   dac3a:	212f      	movs	r1, #47	; 0x2f
   dac3c:	4640      	mov	r0, r8
   dac3e:	f001 ff4d 	bl	dcadc <strrchr>
    if (s1) {
   dac42:	b108      	cbz	r0, dac48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   dac44:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   dac48:	4641      	mov	r1, r8
   dac4a:	4620      	mov	r0, r4
   dac4c:	f7ff fa40 	bl	da0d0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   dac50:	792b      	ldrb	r3, [r5, #4]
   dac52:	079b      	lsls	r3, r3, #30
   dac54:	d508      	bpl.n	dac68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   dac56:	213a      	movs	r1, #58	; 0x3a
   dac58:	4620      	mov	r0, r4
   dac5a:	f7ff fa48 	bl	da0ee <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   dac5e:	68ea      	ldr	r2, [r5, #12]
   dac60:	493f      	ldr	r1, [pc, #252]	; (dad60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   dac62:	4620      	mov	r0, r4
   dac64:	f7ff fa4f 	bl	da106 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   dac68:	792a      	ldrb	r2, [r5, #4]
   dac6a:	6823      	ldr	r3, [r4, #0]
   dac6c:	f012 0f04 	tst.w	r2, #4
   dac70:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   dac72:	bf14      	ite	ne
   dac74:	493b      	ldrne	r1, [pc, #236]	; (dad64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   dac76:	493c      	ldreq	r1, [pc, #240]	; (dad68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   dac78:	2202      	movs	r2, #2
            write(": ", 2);
   dac7a:	4620      	mov	r0, r4
   dac7c:	4798      	blx	r3
    if (attr.has_function) {
   dac7e:	792b      	ldrb	r3, [r5, #4]
   dac80:	0758      	lsls	r0, r3, #29
   dac82:	d51d      	bpl.n	dacc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dac84:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dac86:	460b      	mov	r3, r1
   dac88:	461a      	mov	r2, r3
    for (; *s; ++s) {
   dac8a:	f813 0b01 	ldrb.w	r0, [r3], #1
   dac8e:	b160      	cbz	r0, dacaa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   dac90:	2820      	cmp	r0, #32
   dac92:	d108      	bne.n	daca6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   dac94:	4619      	mov	r1, r3
   dac96:	e7f7      	b.n	dac88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   dac98:	4834      	ldr	r0, [pc, #208]	; (dad6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   dac9a:	f000 f966 	bl	daf6a <_ZN5spark12NetworkClass9listeningEv>
   dac9e:	2800      	cmp	r0, #0
   daca0:	d0ad      	beq.n	dabfe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   daca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   daca6:	2828      	cmp	r0, #40	; 0x28
   daca8:	d1ee      	bne.n	dac88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   dacaa:	6823      	ldr	r3, [r4, #0]
   dacac:	1a52      	subs	r2, r2, r1
   dacae:	68db      	ldr	r3, [r3, #12]
   dacb0:	4620      	mov	r0, r4
   dacb2:	4798      	blx	r3
        write("(): ", 4);
   dacb4:	6823      	ldr	r3, [r4, #0]
   dacb6:	492e      	ldr	r1, [pc, #184]	; (dad70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   dacb8:	68db      	ldr	r3, [r3, #12]
   dacba:	2204      	movs	r2, #4
   dacbc:	4620      	mov	r0, r4
   dacbe:	4798      	blx	r3
    return log_level_name(level, nullptr);
   dacc0:	2100      	movs	r1, #0
   dacc2:	4638      	mov	r0, r7
   dacc4:	f7fd ffda 	bl	d8c7c <log_level_name>
   dacc8:	4601      	mov	r1, r0
    write(s);
   dacca:	4620      	mov	r0, r4
   daccc:	f7ff fa00 	bl	da0d0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   dacd0:	6823      	ldr	r3, [r4, #0]
   dacd2:	4925      	ldr	r1, [pc, #148]	; (dad68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   dacd4:	68db      	ldr	r3, [r3, #12]
   dacd6:	2202      	movs	r2, #2
   dacd8:	4620      	mov	r0, r4
   dacda:	4798      	blx	r3
    if (msg) {
   dacdc:	b11e      	cbz	r6, dace6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   dacde:	4631      	mov	r1, r6
   dace0:	4620      	mov	r0, r4
   dace2:	f7ff f9f5 	bl	da0d0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   dace6:	792b      	ldrb	r3, [r5, #4]
   dace8:	f013 0f30 	tst.w	r3, #48	; 0x30
   dacec:	d02c      	beq.n	dad48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   dacee:	6823      	ldr	r3, [r4, #0]
   dacf0:	4920      	ldr	r1, [pc, #128]	; (dad74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   dacf2:	68db      	ldr	r3, [r3, #12]
   dacf4:	2202      	movs	r2, #2
   dacf6:	4620      	mov	r0, r4
   dacf8:	4798      	blx	r3
        if (attr.has_code) {
   dacfa:	792b      	ldrb	r3, [r5, #4]
   dacfc:	06d9      	lsls	r1, r3, #27
   dacfe:	d50a      	bpl.n	dad16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   dad00:	6823      	ldr	r3, [r4, #0]
   dad02:	491d      	ldr	r1, [pc, #116]	; (dad78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   dad04:	68db      	ldr	r3, [r3, #12]
   dad06:	2207      	movs	r2, #7
   dad08:	4620      	mov	r0, r4
   dad0a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   dad0c:	69aa      	ldr	r2, [r5, #24]
   dad0e:	491b      	ldr	r1, [pc, #108]	; (dad7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   dad10:	4620      	mov	r0, r4
   dad12:	f7ff f9f8 	bl	da106 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   dad16:	792b      	ldrb	r3, [r5, #4]
   dad18:	069a      	lsls	r2, r3, #26
   dad1a:	d511      	bpl.n	dad40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   dad1c:	06db      	lsls	r3, r3, #27
   dad1e:	d505      	bpl.n	dad2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   dad20:	6823      	ldr	r3, [r4, #0]
   dad22:	4910      	ldr	r1, [pc, #64]	; (dad64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   dad24:	68db      	ldr	r3, [r3, #12]
   dad26:	2202      	movs	r2, #2
   dad28:	4620      	mov	r0, r4
   dad2a:	4798      	blx	r3
            write("details = ", 10);
   dad2c:	6823      	ldr	r3, [r4, #0]
   dad2e:	4914      	ldr	r1, [pc, #80]	; (dad80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   dad30:	68db      	ldr	r3, [r3, #12]
   dad32:	4620      	mov	r0, r4
   dad34:	220a      	movs	r2, #10
   dad36:	4798      	blx	r3
            write(attr.details);
   dad38:	69e9      	ldr	r1, [r5, #28]
   dad3a:	4620      	mov	r0, r4
   dad3c:	f7ff f9c8 	bl	da0d0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   dad40:	215d      	movs	r1, #93	; 0x5d
   dad42:	4620      	mov	r0, r4
   dad44:	f7ff f9d3 	bl	da0ee <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   dad48:	6823      	ldr	r3, [r4, #0]
   dad4a:	490e      	ldr	r1, [pc, #56]	; (dad84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   dad4c:	68db      	ldr	r3, [r3, #12]
   dad4e:	4620      	mov	r0, r4
   dad50:	2202      	movs	r2, #2
}
   dad52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   dad56:	4718      	bx	r3
   dad58:	000dd983 	.word	0x000dd983
   dad5c:	000dd98a 	.word	0x000dd98a
   dad60:	000dd363 	.word	0x000dd363
   dad64:	000dd98d 	.word	0x000dd98d
   dad68:	000dd992 	.word	0x000dd992
   dad6c:	2003e59c 	.word	0x2003e59c
   dad70:	000dd990 	.word	0x000dd990
   dad74:	000dd995 	.word	0x000dd995
   dad78:	000dd998 	.word	0x000dd998
   dad7c:	000dcf17 	.word	0x000dcf17
   dad80:	000dd9a0 	.word	0x000dd9a0
   dad84:	000dd9ab 	.word	0x000dd9ab

000dad88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dad88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   dad8c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   dad8e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   dad92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   dad94:	4605      	mov	r5, r0
   dad96:	460f      	mov	r7, r1
   dad98:	4690      	mov	r8, r2
   dad9a:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   dad9c:	f000 ff30 	bl	dbc00 <_Z16_fetch_usbserialv>
   dada0:	4581      	cmp	r9, r0
   dada2:	d105      	bne.n	dadb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   dada4:	4849      	ldr	r0, [pc, #292]	; (daecc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   dada6:	f000 f8e0 	bl	daf6a <_ZN5spark12NetworkClass9listeningEv>
   dadaa:	2800      	cmp	r0, #0
   dadac:	f040 808a 	bne.w	daec4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   dadb0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   dadb2:	4a47      	ldr	r2, [pc, #284]	; (daed0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   dadb4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   dadb6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   dadba:	a801      	add	r0, sp, #4
        strm_(stream) {
   dadbc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   dadbe:	f88d 9008 	strb.w	r9, [sp, #8]
   dadc2:	f7ff f878 	bl	d9eb6 <_ZN5spark10JSONWriter11beginObjectEv>
   dadc6:	4649      	mov	r1, r9
   dadc8:	4640      	mov	r0, r8
   dadca:	f7fd ff57 	bl	d8c7c <log_level_name>
    json.name("l", 1).value(s);
   dadce:	4941      	ldr	r1, [pc, #260]	; (daed4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   dadd0:	4680      	mov	r8, r0
   dadd2:	2201      	movs	r2, #1
   dadd4:	a801      	add	r0, sp, #4
   dadd6:	f7ff f8f7 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   dadda:	4641      	mov	r1, r8
   daddc:	f7ff f96a 	bl	da0b4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   dade0:	b13f      	cbz	r7, dadf2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   dade2:	493d      	ldr	r1, [pc, #244]	; (daed8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   dade4:	2201      	movs	r2, #1
   dade6:	a801      	add	r0, sp, #4
   dade8:	f7ff f8ee 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   dadec:	4639      	mov	r1, r7
   dadee:	f7ff f961 	bl	da0b4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   dadf2:	b13e      	cbz	r6, dae04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   dadf4:	4939      	ldr	r1, [pc, #228]	; (daedc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   dadf6:	2201      	movs	r2, #1
   dadf8:	a801      	add	r0, sp, #4
   dadfa:	f7ff f8e5 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   dadfe:	4631      	mov	r1, r6
   dae00:	f7ff f958 	bl	da0b4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   dae04:	7923      	ldrb	r3, [r4, #4]
   dae06:	07df      	lsls	r7, r3, #31
   dae08:	d50e      	bpl.n	dae28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   dae0a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   dae0c:	212f      	movs	r1, #47	; 0x2f
   dae0e:	4630      	mov	r0, r6
   dae10:	f001 fe64 	bl	dcadc <strrchr>
    if (s1) {
   dae14:	b100      	cbz	r0, dae18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   dae16:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   dae18:	4931      	ldr	r1, [pc, #196]	; (daee0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   dae1a:	2201      	movs	r2, #1
   dae1c:	a801      	add	r0, sp, #4
   dae1e:	f7ff f8d3 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   dae22:	4631      	mov	r1, r6
   dae24:	f7ff f946 	bl	da0b4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   dae28:	7923      	ldrb	r3, [r4, #4]
   dae2a:	079e      	lsls	r6, r3, #30
   dae2c:	d507      	bpl.n	dae3e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   dae2e:	492d      	ldr	r1, [pc, #180]	; (daee4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   dae30:	2202      	movs	r2, #2
   dae32:	a801      	add	r0, sp, #4
   dae34:	f7ff f8c8 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   dae38:	68e1      	ldr	r1, [r4, #12]
   dae3a:	f7ff f849 	bl	d9ed0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   dae3e:	7923      	ldrb	r3, [r4, #4]
   dae40:	0758      	lsls	r0, r3, #29
   dae42:	d514      	bpl.n	dae6e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   dae44:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   dae46:	4633      	mov	r3, r6
   dae48:	461f      	mov	r7, r3
    for (; *s; ++s) {
   dae4a:	f813 2b01 	ldrb.w	r2, [r3], #1
   dae4e:	b12a      	cbz	r2, dae5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   dae50:	2a20      	cmp	r2, #32
   dae52:	d101      	bne.n	dae58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   dae54:	461e      	mov	r6, r3
   dae56:	e7f7      	b.n	dae48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   dae58:	2a28      	cmp	r2, #40	; 0x28
   dae5a:	d1f5      	bne.n	dae48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   dae5c:	4922      	ldr	r1, [pc, #136]	; (daee8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   dae5e:	2202      	movs	r2, #2
   dae60:	a801      	add	r0, sp, #4
   dae62:	f7ff f8b1 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   dae66:	1bba      	subs	r2, r7, r6
   dae68:	4631      	mov	r1, r6
   dae6a:	f7ff f8bd 	bl	d9fe8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   dae6e:	7923      	ldrb	r3, [r4, #4]
   dae70:	0719      	lsls	r1, r3, #28
   dae72:	d507      	bpl.n	dae84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   dae74:	491d      	ldr	r1, [pc, #116]	; (daeec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   dae76:	2201      	movs	r2, #1
   dae78:	a801      	add	r0, sp, #4
   dae7a:	f7ff f8a5 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   dae7e:	6961      	ldr	r1, [r4, #20]
   dae80:	f7ff f838 	bl	d9ef4 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   dae84:	7923      	ldrb	r3, [r4, #4]
   dae86:	06da      	lsls	r2, r3, #27
   dae88:	d508      	bpl.n	dae9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   dae8a:	2204      	movs	r2, #4
   dae8c:	4918      	ldr	r1, [pc, #96]	; (daef0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   dae8e:	eb0d 0002 	add.w	r0, sp, r2
   dae92:	f7ff f899 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   dae96:	69a1      	ldr	r1, [r4, #24]
   dae98:	f7ff f81a 	bl	d9ed0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   dae9c:	7923      	ldrb	r3, [r4, #4]
   dae9e:	069b      	lsls	r3, r3, #26
   daea0:	d507      	bpl.n	daeb2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   daea2:	4914      	ldr	r1, [pc, #80]	; (daef4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   daea4:	2206      	movs	r2, #6
   daea6:	a801      	add	r0, sp, #4
   daea8:	f7ff f88e 	bl	d9fc8 <_ZN5spark10JSONWriter4nameEPKcj>
   daeac:	69e1      	ldr	r1, [r4, #28]
   daeae:	f7ff f901 	bl	da0b4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   daeb2:	a801      	add	r0, sp, #4
   daeb4:	f7fe ffe9 	bl	d9e8a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   daeb8:	6a28      	ldr	r0, [r5, #32]
   daeba:	490f      	ldr	r1, [pc, #60]	; (daef8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   daebc:	6803      	ldr	r3, [r0, #0]
   daebe:	2202      	movs	r2, #2
   daec0:	68db      	ldr	r3, [r3, #12]
   daec2:	4798      	blx	r3
}
   daec4:	b005      	add	sp, #20
   daec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daeca:	bf00      	nop
   daecc:	2003e59c 	.word	0x2003e59c
   daed0:	000dd9cc 	.word	0x000dd9cc
   daed4:	000dd960 	.word	0x000dd960
   daed8:	000dd9ae 	.word	0x000dd9ae
   daedc:	000dd9b0 	.word	0x000dd9b0
   daee0:	000dcdc4 	.word	0x000dcdc4
   daee4:	000dd9b2 	.word	0x000dd9b2
   daee8:	000dd9b5 	.word	0x000dd9b5
   daeec:	000dd25b 	.word	0x000dd25b
   daef0:	000dd9b8 	.word	0x000dd9b8
   daef4:	000dd9bd 	.word	0x000dd9bd
   daef8:	000dd9ab 	.word	0x000dd9ab

000daefc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   daefc:	2300      	movs	r3, #0
   daefe:	6840      	ldr	r0, [r0, #4]
   daf00:	461a      	mov	r2, r3
   daf02:	f7fd bf75 	b.w	d8df0 <network_connect>

000daf06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   daf06:	6840      	ldr	r0, [r0, #4]
   daf08:	2200      	movs	r2, #0
   daf0a:	2102      	movs	r1, #2
   daf0c:	f7fd bf80 	b.w	d8e10 <network_disconnect>

000daf10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   daf10:	2200      	movs	r2, #0
   daf12:	6840      	ldr	r0, [r0, #4]
   daf14:	4611      	mov	r1, r2
   daf16:	f7fd bf73 	b.w	d8e00 <network_connecting>

000daf1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   daf1a:	2200      	movs	r2, #0
   daf1c:	6840      	ldr	r0, [r0, #4]
   daf1e:	4611      	mov	r1, r2
   daf20:	f7fd bf7e 	b.w	d8e20 <network_ready>

000daf24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   daf24:	2300      	movs	r3, #0
   daf26:	6840      	ldr	r0, [r0, #4]
   daf28:	461a      	mov	r2, r3
   daf2a:	4619      	mov	r1, r3
   daf2c:	f7fd bf80 	b.w	d8e30 <network_on>

000daf30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   daf30:	2300      	movs	r3, #0
   daf32:	6840      	ldr	r0, [r0, #4]
   daf34:	461a      	mov	r2, r3
   daf36:	4619      	mov	r1, r3
   daf38:	f7fd bf82 	b.w	d8e40 <network_off>

000daf3c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   daf3c:	6840      	ldr	r0, [r0, #4]
   daf3e:	2100      	movs	r1, #0
   daf40:	f7fd bfa6 	b.w	d8e90 <network_is_on>

000daf44 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   daf44:	6840      	ldr	r0, [r0, #4]
   daf46:	2100      	movs	r1, #0
   daf48:	f7fd bfaa 	b.w	d8ea0 <network_is_off>

000daf4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   daf4c:	6840      	ldr	r0, [r0, #4]
   daf4e:	2200      	movs	r2, #0
   daf50:	f081 0101 	eor.w	r1, r1, #1
   daf54:	f7fd bf7c 	b.w	d8e50 <network_listen>

000daf58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   daf58:	6840      	ldr	r0, [r0, #4]
   daf5a:	2200      	movs	r2, #0
   daf5c:	f7fd bf88 	b.w	d8e70 <network_set_listen_timeout>

000daf60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   daf60:	2200      	movs	r2, #0
   daf62:	6840      	ldr	r0, [r0, #4]
   daf64:	4611      	mov	r1, r2
   daf66:	f7fd bf8b 	b.w	d8e80 <network_get_listen_timeout>

000daf6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   daf6a:	2200      	movs	r2, #0
   daf6c:	6840      	ldr	r0, [r0, #4]
   daf6e:	4611      	mov	r1, r2
   daf70:	f7fd bf76 	b.w	d8e60 <network_listening>

000daf74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   daf74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   daf78:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   daf7a:	b095      	sub	sp, #84	; 0x54
   daf7c:	4616      	mov	r6, r2
   daf7e:	460d      	mov	r5, r1
   daf80:	4607      	mov	r7, r0
    IPAddress addr;
   daf82:	f7fe fe23 	bl	d9bcc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   daf86:	4621      	mov	r1, r4
   daf88:	2218      	movs	r2, #24
   daf8a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   daf8c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   daf8e:	f001 fcd1 	bl	dc934 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   daf92:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   daf94:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   daf98:	4621      	mov	r1, r4
   daf9a:	466b      	mov	r3, sp
   daf9c:	aa0c      	add	r2, sp, #48	; 0x30
   daf9e:	4630      	mov	r0, r6
   dafa0:	f7fd fd74 	bl	d8a8c <netdb_getaddrinfo>
    if (!r) {
   dafa4:	4604      	mov	r4, r0
   dafa6:	2800      	cmp	r0, #0
   dafa8:	d146      	bne.n	db038 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dafaa:	4602      	mov	r2, r0
   dafac:	2101      	movs	r1, #1
   dafae:	6868      	ldr	r0, [r5, #4]
   dafb0:	f7fd ff36 	bl	d8e20 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dafb4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   dafb6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dafb8:	4622      	mov	r2, r4
   dafba:	6868      	ldr	r0, [r5, #4]
   dafbc:	f7fd ff30 	bl	d8e20 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dafc0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   dafc2:	4681      	mov	r9, r0
        bool ok = false;
   dafc4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dafc6:	2e00      	cmp	r6, #0
   dafc8:	d036      	beq.n	db038 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   dafca:	2900      	cmp	r1, #0
   dafcc:	d134      	bne.n	db038 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   dafce:	6873      	ldr	r3, [r6, #4]
   dafd0:	2b02      	cmp	r3, #2
   dafd2:	d003      	beq.n	dafdc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   dafd4:	2b0a      	cmp	r3, #10
   dafd6:	d00b      	beq.n	daff0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   dafd8:	69f6      	ldr	r6, [r6, #28]
   dafda:	e7f4      	b.n	dafc6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   dafdc:	f1b8 0f00 	cmp.w	r8, #0
   dafe0:	d004      	beq.n	dafec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   dafe2:	6971      	ldr	r1, [r6, #20]
   dafe4:	4638      	mov	r0, r7
   dafe6:	3104      	adds	r1, #4
   dafe8:	f7fe fe1d 	bl	d9c26 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   dafec:	4641      	mov	r1, r8
   dafee:	e7f3      	b.n	dafd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   daff0:	f1b9 0f00 	cmp.w	r9, #0
   daff4:	d101      	bne.n	daffa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   daff6:	4649      	mov	r1, r9
   daff8:	e7ee      	b.n	dafd8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   daffa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   daffc:	2210      	movs	r2, #16
   daffe:	a801      	add	r0, sp, #4
   db000:	f001 fc98 	bl	dc934 <memset>
                    a.v = 6;
   db004:	2306      	movs	r3, #6
   db006:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   db00a:	ad01      	add	r5, sp, #4
   db00c:	f104 0308 	add.w	r3, r4, #8
   db010:	3418      	adds	r4, #24
   db012:	6818      	ldr	r0, [r3, #0]
   db014:	6859      	ldr	r1, [r3, #4]
   db016:	462a      	mov	r2, r5
   db018:	c203      	stmia	r2!, {r0, r1}
   db01a:	3308      	adds	r3, #8
   db01c:	42a3      	cmp	r3, r4
   db01e:	4615      	mov	r5, r2
   db020:	d1f7      	bne.n	db012 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   db022:	a901      	add	r1, sp, #4
   db024:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   db026:	ad07      	add	r5, sp, #28
   db028:	f7fe fdde 	bl	d9be8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   db02c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   db02e:	1d3c      	adds	r4, r7, #4
   db030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   db032:	682b      	ldr	r3, [r5, #0]
   db034:	7023      	strb	r3, [r4, #0]
   db036:	e7de      	b.n	daff6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   db038:	9800      	ldr	r0, [sp, #0]
   db03a:	f7fd fd1f 	bl	d8a7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   db03e:	4638      	mov	r0, r7
   db040:	b015      	add	sp, #84	; 0x54
   db042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000db048 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   db048:	4b02      	ldr	r3, [pc, #8]	; (db054 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   db04a:	4a03      	ldr	r2, [pc, #12]	; (db058 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   db04c:	601a      	str	r2, [r3, #0]
   db04e:	2200      	movs	r2, #0
   db050:	605a      	str	r2, [r3, #4]

} // spark
   db052:	4770      	bx	lr
   db054:	2003e59c 	.word	0x2003e59c
   db058:	000dda44 	.word	0x000dda44

000db05c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   db05c:	b508      	push	{r3, lr}
            return &Wire1;
   db05e:	f000 ff91 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   db062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   db066:	f7fe bd39 	b.w	d9adc <_ZN7TwoWire4lockEv>

000db06a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   db06a:	b510      	push	{r4, lr}
   db06c:	4604      	mov	r4, r0
    lock_(_lock)
   db06e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   db070:	b109      	cbz	r1, db076 <_ZN4PMICC1Eb+0xc>
        lock();
   db072:	f7ff fff3 	bl	db05c <_ZN4PMIC4lockEv.constprop.0>
}
   db076:	4620      	mov	r0, r4
   db078:	bd10      	pop	{r4, pc}

000db07a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   db07a:	b508      	push	{r3, lr}
            return &Wire1;
   db07c:	f000 ff82 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   db080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   db084:	f7fe bd33 	b.w	d9aee <_ZN7TwoWire6unlockEv>

000db088 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   db088:	b510      	push	{r4, lr}
    if (lock_) {
   db08a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   db08c:	4604      	mov	r4, r0
    if (lock_) {
   db08e:	b10b      	cbz	r3, db094 <_ZN4PMICD1Ev+0xc>
        unlock();
   db090:	f7ff fff3 	bl	db07a <_ZN4PMIC6unlockEv>
}
   db094:	4620      	mov	r0, r4
   db096:	bd10      	pop	{r4, pc}

000db098 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   db098:	b510      	push	{r4, lr}
   db09a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   db09c:	6800      	ldr	r0, [r0, #0]
   db09e:	f7ff ffec 	bl	db07a <_ZN4PMIC6unlockEv>
   db0a2:	4620      	mov	r0, r4
   db0a4:	bd10      	pop	{r4, pc}

000db0a6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   db0a6:	b530      	push	{r4, r5, lr}
   db0a8:	b087      	sub	sp, #28
   db0aa:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db0ac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   db0ae:	f7ff ffd5 	bl	db05c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db0b2:	236b      	movs	r3, #107	; 0x6b
   db0b4:	f88d 3008 	strb.w	r3, [sp, #8]
   db0b8:	2300      	movs	r3, #0
   db0ba:	2401      	movs	r4, #1
   db0bc:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   db0be:	230a      	movs	r3, #10
   db0c0:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db0c2:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   db0c6:	f000 ff5d 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   db0ca:	a902      	add	r1, sp, #8
   db0cc:	f7fe fcea 	bl	d9aa4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   db0d0:	f000 ff58 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   db0d4:	6803      	ldr	r3, [r0, #0]
   db0d6:	4629      	mov	r1, r5
   db0d8:	689b      	ldr	r3, [r3, #8]
   db0da:	4798      	blx	r3
            return &Wire1;
   db0dc:	f000 ff52 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   db0e0:	4621      	mov	r1, r4
   db0e2:	f7fe fcf7 	bl	d9ad4 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   db0e6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   db0e8:	f000 ff4c 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   db0ec:	a902      	add	r1, sp, #8
   db0ee:	f7fe fca9 	bl	d9a44 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   db0f2:	f000 ff47 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   db0f6:	6803      	ldr	r3, [r0, #0]
   db0f8:	695b      	ldr	r3, [r3, #20]
   db0fa:	4798      	blx	r3
   db0fc:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   db0fe:	a801      	add	r0, sp, #4
   db100:	f7ff ffca 	bl	db098 <_ZNSt10lock_guardI4PMICED1Ev>
}
   db104:	b2e0      	uxtb	r0, r4
   db106:	b007      	add	sp, #28
   db108:	bd30      	pop	{r4, r5, pc}

000db10a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   db10a:	b570      	push	{r4, r5, r6, lr}
   db10c:	b086      	sub	sp, #24
   db10e:	4614      	mov	r4, r2
   db110:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db112:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   db114:	f7ff ffa2 	bl	db05c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db118:	236b      	movs	r3, #107	; 0x6b
   db11a:	f88d 3008 	strb.w	r3, [sp, #8]
   db11e:	2300      	movs	r3, #0
   db120:	9303      	str	r3, [sp, #12]
   db122:	2601      	movs	r6, #1
    timeout_ = ms;
   db124:	230a      	movs	r3, #10
   db126:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   db128:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   db12c:	f000 ff2a 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   db130:	a902      	add	r1, sp, #8
   db132:	f7fe fcb7 	bl	d9aa4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   db136:	f000 ff25 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   db13a:	6803      	ldr	r3, [r0, #0]
   db13c:	4629      	mov	r1, r5
   db13e:	689b      	ldr	r3, [r3, #8]
   db140:	4798      	blx	r3
            return &Wire1;
   db142:	f000 ff1f 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   db146:	6803      	ldr	r3, [r0, #0]
   db148:	4621      	mov	r1, r4
   db14a:	689b      	ldr	r3, [r3, #8]
   db14c:	4798      	blx	r3
            return &Wire1;
   db14e:	f000 ff19 	bl	dbf84 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   db152:	4631      	mov	r1, r6
   db154:	f7fe fcbe 	bl	d9ad4 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   db158:	a801      	add	r0, sp, #4
   db15a:	f7ff ff9d 	bl	db098 <_ZNSt10lock_guardI4PMICED1Ev>
}
   db15e:	b006      	add	sp, #24
   db160:	bd70      	pop	{r4, r5, r6, pc}

000db162 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   db162:	b513      	push	{r0, r1, r4, lr}
   db164:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db166:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   db168:	f7ff ff78 	bl	db05c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   db16c:	2101      	movs	r1, #1
   db16e:	4620      	mov	r0, r4
   db170:	f7ff ff99 	bl	db0a6 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   db174:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   db178:	f040 0210 	orr.w	r2, r0, #16
   db17c:	2101      	movs	r1, #1
   db17e:	4620      	mov	r0, r4
   db180:	f7ff ffc3 	bl	db10a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   db184:	a801      	add	r0, sp, #4
   db186:	f7ff ff87 	bl	db098 <_ZNSt10lock_guardI4PMICED1Ev>
}
   db18a:	2001      	movs	r0, #1
   db18c:	b002      	add	sp, #8
   db18e:	bd10      	pop	{r4, pc}

000db190 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   db190:	b513      	push	{r0, r1, r4, lr}
   db192:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   db194:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   db196:	f7ff ff61 	bl	db05c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   db19a:	2101      	movs	r1, #1
   db19c:	4620      	mov	r0, r4
   db19e:	f7ff ff82 	bl	db0a6 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   db1a2:	2101      	movs	r1, #1
   db1a4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   db1a8:	4620      	mov	r0, r4
   db1aa:	f7ff ffae 	bl	db10a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   db1ae:	a801      	add	r0, sp, #4
   db1b0:	f7ff ff72 	bl	db098 <_ZNSt10lock_guardI4PMICED1Ev>
}
   db1b4:	2001      	movs	r0, #1
   db1b6:	b002      	add	sp, #8
   db1b8:	bd10      	pop	{r4, pc}

000db1ba <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   db1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db1bc:	4606      	mov	r6, r0
   db1be:	460d      	mov	r5, r1
  size_t n = 0;
   db1c0:	188f      	adds	r7, r1, r2
   db1c2:	2400      	movs	r4, #0
  while (size--) {
   db1c4:	42bd      	cmp	r5, r7
   db1c6:	d00c      	beq.n	db1e2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   db1c8:	6833      	ldr	r3, [r6, #0]
   db1ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   db1ce:	689b      	ldr	r3, [r3, #8]
   db1d0:	4630      	mov	r0, r6
   db1d2:	4798      	blx	r3
     if (chunk>=0)
   db1d4:	1e03      	subs	r3, r0, #0
   db1d6:	db01      	blt.n	db1dc <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   db1d8:	441c      	add	r4, r3
  while (size--) {
   db1da:	e7f3      	b.n	db1c4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   db1dc:	2c00      	cmp	r4, #0
   db1de:	bf08      	it	eq
   db1e0:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   db1e2:	4620      	mov	r0, r4
   db1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000db1e6 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   db1e6:	b513      	push	{r0, r1, r4, lr}
   db1e8:	4604      	mov	r4, r0
    }
   db1ea:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   db1ec:	b159      	cbz	r1, db206 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   db1ee:	9101      	str	r1, [sp, #4]
   db1f0:	f001 fc47 	bl	dca82 <strlen>
   db1f4:	6823      	ldr	r3, [r4, #0]
   db1f6:	9901      	ldr	r1, [sp, #4]
   db1f8:	68db      	ldr	r3, [r3, #12]
   db1fa:	4602      	mov	r2, r0
   db1fc:	4620      	mov	r0, r4
    }
   db1fe:	b002      	add	sp, #8
   db200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   db204:	4718      	bx	r3
    }
   db206:	b002      	add	sp, #8
   db208:	bd10      	pop	{r4, pc}

000db20a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   db20a:	b508      	push	{r3, lr}
  return write(str);
   db20c:	f7ff ffeb 	bl	db1e6 <_ZN5Print5writeEPKc>
}
   db210:	bd08      	pop	{r3, pc}

000db212 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   db212:	6803      	ldr	r3, [r0, #0]
   db214:	689b      	ldr	r3, [r3, #8]
   db216:	4718      	bx	r3

000db218 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   db218:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   db21a:	210d      	movs	r1, #13
{
   db21c:	4605      	mov	r5, r0
  size_t n = print('\r');
   db21e:	f7ff fff8 	bl	db212 <_ZN5Print5printEc>
  n += print('\n');
   db222:	210a      	movs	r1, #10
  size_t n = print('\r');
   db224:	4604      	mov	r4, r0
  n += print('\n');
   db226:	4628      	mov	r0, r5
   db228:	f7ff fff3 	bl	db212 <_ZN5Print5printEc>
  return n;
}
   db22c:	4420      	add	r0, r4
   db22e:	bd38      	pop	{r3, r4, r5, pc}

000db230 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   db230:	b530      	push	{r4, r5, lr}
   db232:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   db234:	2300      	movs	r3, #0
   db236:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   db23a:	2a01      	cmp	r2, #1
   db23c:	bf98      	it	ls
   db23e:	220a      	movls	r2, #10
   db240:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   db242:	460d      	mov	r5, r1
   db244:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   db248:	fb01 5312 	mls	r3, r1, r2, r5
   db24c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db250:	2b09      	cmp	r3, #9
   db252:	bf94      	ite	ls
   db254:	3330      	addls	r3, #48	; 0x30
   db256:	3337      	addhi	r3, #55	; 0x37
   db258:	b2db      	uxtb	r3, r3
  } while(n);
   db25a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   db25c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   db260:	d9ef      	bls.n	db242 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   db262:	4621      	mov	r1, r4
   db264:	f7ff ffbf 	bl	db1e6 <_ZN5Print5writeEPKc>
}
   db268:	b00b      	add	sp, #44	; 0x2c
   db26a:	bd30      	pop	{r4, r5, pc}

000db26c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   db26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db270:	b086      	sub	sp, #24
   db272:	af00      	add	r7, sp, #0
   db274:	4605      	mov	r5, r0
   db276:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   db278:	1d38      	adds	r0, r7, #4
   db27a:	2114      	movs	r1, #20
{
   db27c:	4614      	mov	r4, r2
    va_copy(args2, args);
   db27e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   db280:	f7fd fe46 	bl	d8f10 <vsnprintf>

    if (n<bufsize)
   db284:	2813      	cmp	r0, #19
   db286:	d80e      	bhi.n	db2a6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   db288:	1d39      	adds	r1, r7, #4
   db28a:	4628      	mov	r0, r5
   db28c:	f7ff ffab 	bl	db1e6 <_ZN5Print5writeEPKc>
   db290:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   db292:	b11e      	cbz	r6, db29c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   db294:	4628      	mov	r0, r5
   db296:	f7ff ffbf 	bl	db218 <_ZN5Print7printlnEv>
   db29a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   db29c:	4620      	mov	r0, r4
   db29e:	3718      	adds	r7, #24
   db2a0:	46bd      	mov	sp, r7
   db2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   db2a6:	f100 0308 	add.w	r3, r0, #8
   db2aa:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   db2ae:	46e8      	mov	r8, sp
        char bigger[n+1];
   db2b0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   db2b4:	4622      	mov	r2, r4
   db2b6:	1c41      	adds	r1, r0, #1
   db2b8:	683b      	ldr	r3, [r7, #0]
   db2ba:	4668      	mov	r0, sp
   db2bc:	f7fd fe28 	bl	d8f10 <vsnprintf>
  return write(str);
   db2c0:	4669      	mov	r1, sp
   db2c2:	4628      	mov	r0, r5
   db2c4:	f7ff ff8f 	bl	db1e6 <_ZN5Print5writeEPKc>
   db2c8:	4604      	mov	r4, r0
   db2ca:	46c5      	mov	sp, r8
   db2cc:	e7e1      	b.n	db292 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000db2ce <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   db2ce:	b510      	push	{r4, lr}
  if (0 == max) {
   db2d0:	4604      	mov	r4, r0
   db2d2:	b128      	cbz	r0, db2e0 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   db2d4:	f001 fb5a 	bl	dc98c <rand>
   db2d8:	fb90 f3f4 	sdiv	r3, r0, r4
   db2dc:	fb03 0414 	mls	r4, r3, r4, r0
}
   db2e0:	4620      	mov	r0, r4
   db2e2:	bd10      	pop	{r4, pc}

000db2e4 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   db2e4:	4288      	cmp	r0, r1
{
   db2e6:	b510      	push	{r4, lr}
   db2e8:	4604      	mov	r4, r0
  if (min >= max) {
   db2ea:	da03      	bge.n	db2f4 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   db2ec:	1a08      	subs	r0, r1, r0
   db2ee:	f7ff ffee 	bl	db2ce <_Z6randomi>
   db2f2:	4404      	add	r4, r0
}
   db2f4:	4620      	mov	r0, r4
   db2f6:	bd10      	pop	{r4, pc}

000db2f8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   db2f8:	4b01      	ldr	r3, [pc, #4]	; (db300 <_GLOBAL__sub_I_RGB+0x8>)
   db2fa:	2200      	movs	r2, #0
   db2fc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   db2fe:	4770      	bx	lr
   db300:	2003e5a4 	.word	0x2003e5a4

000db304 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   db304:	2100      	movs	r1, #0
   db306:	f7fd bc01 	b.w	d8b0c <hal_spi_acquire>

000db30a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   db30a:	2100      	movs	r1, #0
   db30c:	f7fd bc06 	b.w	d8b1c <hal_spi_release>

000db310 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   db310:	b510      	push	{r4, lr}
   db312:	4604      	mov	r4, r0
   db314:	4608      	mov	r0, r1
{
    _spi = spi;
   db316:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   db318:	f7fd fbd8 	bl	d8acc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   db31c:	2300      	movs	r3, #0
   db31e:	6063      	str	r3, [r4, #4]
}
   db320:	4620      	mov	r0, r4
   db322:	bd10      	pop	{r4, pc}

000db324 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   db324:	b510      	push	{r4, lr}
   db326:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   db328:	7800      	ldrb	r0, [r0, #0]
   db32a:	f7ff ffeb 	bl	db304 <_ZN8SPIClass4lockEv.isra.0>
   db32e:	b948      	cbnz	r0, db344 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   db330:	7820      	ldrb	r0, [r4, #0]
   db332:	f64f 71ff 	movw	r1, #65535	; 0xffff
   db336:	f7fd fbb1 	bl	d8a9c <hal_spi_begin>
        unlock();
   db33a:	7820      	ldrb	r0, [r4, #0]
    }
}
   db33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   db340:	f7ff bfe3 	b.w	db30a <_ZN8SPIClass6unlockEv.isra.0>
}
   db344:	bd10      	pop	{r4, pc}

000db346 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   db346:	b510      	push	{r4, lr}
   db348:	4604      	mov	r4, r0
    if (!lock())
   db34a:	7800      	ldrb	r0, [r0, #0]
   db34c:	f7ff ffda 	bl	db304 <_ZN8SPIClass4lockEv.isra.0>
   db350:	b938      	cbnz	r0, db362 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   db352:	7820      	ldrb	r0, [r4, #0]
   db354:	f7fd fbaa 	bl	d8aac <hal_spi_end>
        unlock();
   db358:	7820      	ldrb	r0, [r4, #0]
    }
}
   db35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   db35e:	f7ff bfd4 	b.w	db30a <_ZN8SPIClass6unlockEv.isra.0>
}
   db362:	bd10      	pop	{r4, pc}

000db364 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   db364:	7800      	ldrb	r0, [r0, #0]
   db366:	f7ff bfd0 	b.w	db30a <_ZN8SPIClass6unlockEv.isra.0>
	...

000db36c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   db36c:	0840      	lsrs	r0, r0, #1
{
   db36e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   db370:	6018      	str	r0, [r3, #0]
   db372:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   db374:	6818      	ldr	r0, [r3, #0]
   db376:	4288      	cmp	r0, r1
   db378:	b2e5      	uxtb	r5, r4
   db37a:	d906      	bls.n	db38a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   db37c:	3401      	adds	r4, #1
   db37e:	2c08      	cmp	r4, #8
   db380:	d002      	beq.n	db388 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   db382:	0840      	lsrs	r0, r0, #1
   db384:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   db386:	e7f5      	b.n	db374 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   db388:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   db38a:	4b02      	ldr	r3, [pc, #8]	; (db394 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   db38c:	5d5b      	ldrb	r3, [r3, r5]
   db38e:	7013      	strb	r3, [r2, #0]
}
   db390:	bd30      	pop	{r4, r5, pc}
   db392:	bf00      	nop
   db394:	000dda78 	.word	0x000dda78

000db398 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   db398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   db39c:	4606      	mov	r6, r0
   db39e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   db3a0:	7800      	ldrb	r0, [r0, #0]
{
   db3a2:	460c      	mov	r4, r1
    CHECK(lock());
   db3a4:	f7ff ffae 	bl	db304 <_ZN8SPIClass4lockEv.isra.0>
   db3a8:	2800      	cmp	r0, #0
   db3aa:	db1b      	blt.n	db3e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   db3ac:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   db3ae:	2214      	movs	r2, #20
   db3b0:	2100      	movs	r1, #0
   db3b2:	a809      	add	r0, sp, #36	; 0x24
   db3b4:	f001 fabe 	bl	dc934 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   db3b8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   db3ba:	2200      	movs	r2, #0
   db3bc:	a909      	add	r1, sp, #36	; 0x24
   db3be:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   db3c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   db3c4:	f7fd fb92 	bl	d8aec <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   db3c8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   db3cc:	b113      	cbz	r3, db3d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   db3ce:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   db3d2:	b155      	cbz	r5, db3ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   db3d4:	2700      	movs	r7, #0
   db3d6:	46b9      	mov	r9, r7
   db3d8:	46b8      	mov	r8, r7
   db3da:	2501      	movs	r5, #1
    if (default_ && other.default_)
   db3dc:	7923      	ldrb	r3, [r4, #4]
   db3de:	b15d      	cbz	r5, db3f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   db3e0:	b1c3      	cbz	r3, db414 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   db3e2:	2000      	movs	r0, #0
}
   db3e4:	b00f      	add	sp, #60	; 0x3c
   db3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   db3ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   db3ee:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   db3f2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   db3f6:	e7f1      	b.n	db3dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   db3f8:	2b00      	cmp	r3, #0
   db3fa:	d135      	bne.n	db468 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   db3fc:	68a3      	ldr	r3, [r4, #8]
   db3fe:	4543      	cmp	r3, r8
   db400:	d108      	bne.n	db414 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   db402:	f88d 9020 	strb.w	r9, [sp, #32]
   db406:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   db40a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   db40e:	89a3      	ldrh	r3, [r4, #12]
   db410:	429a      	cmp	r2, r3
   db412:	d0e6      	beq.n	db3e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   db414:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   db416:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   db418:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   db41c:	980a      	ldr	r0, [sp, #40]	; 0x28
   db41e:	ab04      	add	r3, sp, #16
   db420:	f10d 020f 	add.w	r2, sp, #15
   db424:	f7ff ffa2 	bl	db36c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   db428:	7921      	ldrb	r1, [r4, #4]
   db42a:	b985      	cbnz	r5, db44e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   db42c:	b989      	cbnz	r1, db452 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   db42e:	68a3      	ldr	r3, [r4, #8]
   db430:	4543      	cmp	r3, r8
   db432:	d30e      	bcc.n	db452 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   db434:	f88d 9020 	strb.w	r9, [sp, #32]
   db438:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   db43c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   db440:	89a3      	ldrh	r3, [r4, #12]
   db442:	429a      	cmp	r2, r3
   db444:	d105      	bne.n	db452 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   db446:	9b04      	ldr	r3, [sp, #16]
   db448:	4543      	cmp	r3, r8
   db44a:	d102      	bne.n	db452 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   db44c:	e7c9      	b.n	db3e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   db44e:	2900      	cmp	r1, #0
   db450:	d1f9      	bne.n	db446 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   db452:	2300      	movs	r3, #0
   db454:	9301      	str	r3, [sp, #4]
   db456:	7b63      	ldrb	r3, [r4, #13]
   db458:	9300      	str	r3, [sp, #0]
   db45a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   db45e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   db460:	7830      	ldrb	r0, [r6, #0]
   db462:	f7fd fb4b 	bl	d8afc <hal_spi_set_settings>
   db466:	e7bc      	b.n	db3e2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   db468:	e9cd 5500 	strd	r5, r5, [sp]
   db46c:	462b      	mov	r3, r5
   db46e:	462a      	mov	r2, r5
   db470:	2101      	movs	r1, #1
   db472:	e7f5      	b.n	db460 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000db474 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   db474:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   db476:	7800      	ldrb	r0, [r0, #0]
   db478:	f7fd fb20 	bl	d8abc <hal_spi_transfer>
}
   db47c:	b2c0      	uxtb	r0, r0
   db47e:	bd08      	pop	{r3, pc}

000db480 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   db480:	4770      	bx	lr

000db482 <_ZN8SPIClass15detachInterruptEv>:
   db482:	4770      	bx	lr

000db484 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   db484:	b510      	push	{r4, lr}
   db486:	4604      	mov	r4, r0
{
	free(buffer);
   db488:	6800      	ldr	r0, [r0, #0]
   db48a:	f7fd fd19 	bl	d8ec0 <free>
}
   db48e:	4620      	mov	r0, r4
   db490:	bd10      	pop	{r4, pc}

000db492 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   db492:	b510      	push	{r4, lr}
   db494:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   db496:	6800      	ldr	r0, [r0, #0]
   db498:	b108      	cbz	r0, db49e <_ZN6String10invalidateEv+0xc>
   db49a:	f7fd fd11 	bl	d8ec0 <free>
	buffer = NULL;
   db49e:	2300      	movs	r3, #0
	capacity = len = 0;
   db4a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   db4a4:	6023      	str	r3, [r4, #0]
}
   db4a6:	bd10      	pop	{r4, pc}

000db4a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   db4a8:	b538      	push	{r3, r4, r5, lr}
   db4aa:	4604      	mov	r4, r0
   db4ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   db4ae:	6800      	ldr	r0, [r0, #0]
   db4b0:	3101      	adds	r1, #1
   db4b2:	f7fd fd0d 	bl	d8ed0 <realloc>
	if (newbuffer) {
   db4b6:	b110      	cbz	r0, db4be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   db4b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   db4bc:	2001      	movs	r0, #1
	}
	return 0;
}
   db4be:	bd38      	pop	{r3, r4, r5, pc}

000db4c0 <_ZN6String7reserveEj>:
{
   db4c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   db4c2:	6803      	ldr	r3, [r0, #0]
{
   db4c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   db4c6:	b123      	cbz	r3, db4d2 <_ZN6String7reserveEj+0x12>
   db4c8:	6843      	ldr	r3, [r0, #4]
   db4ca:	428b      	cmp	r3, r1
   db4cc:	d301      	bcc.n	db4d2 <_ZN6String7reserveEj+0x12>
   db4ce:	2001      	movs	r0, #1
}
   db4d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   db4d2:	4620      	mov	r0, r4
   db4d4:	f7ff ffe8 	bl	db4a8 <_ZN6String12changeBufferEj>
   db4d8:	2800      	cmp	r0, #0
   db4da:	d0f9      	beq.n	db4d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   db4dc:	68a3      	ldr	r3, [r4, #8]
   db4de:	2b00      	cmp	r3, #0
   db4e0:	d1f5      	bne.n	db4ce <_ZN6String7reserveEj+0xe>
   db4e2:	6822      	ldr	r2, [r4, #0]
   db4e4:	7013      	strb	r3, [r2, #0]
   db4e6:	e7f2      	b.n	db4ce <_ZN6String7reserveEj+0xe>

000db4e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   db4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db4ea:	460d      	mov	r5, r1
	if (!reserve(length)) {
   db4ec:	4611      	mov	r1, r2
   db4ee:	9201      	str	r2, [sp, #4]
{
   db4f0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   db4f2:	f7ff ffe5 	bl	db4c0 <_ZN6String7reserveEj>
   db4f6:	9a01      	ldr	r2, [sp, #4]
   db4f8:	b928      	cbnz	r0, db506 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   db4fa:	4620      	mov	r0, r4
   db4fc:	f7ff ffc9 	bl	db492 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   db500:	4620      	mov	r0, r4
   db502:	b003      	add	sp, #12
   db504:	bd30      	pop	{r4, r5, pc}
	len = length;
   db506:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   db508:	4629      	mov	r1, r5
   db50a:	6820      	ldr	r0, [r4, #0]
   db50c:	f001 f9ea 	bl	dc8e4 <memcpy>
	buffer[len] = 0;
   db510:	6822      	ldr	r2, [r4, #0]
   db512:	68a3      	ldr	r3, [r4, #8]
   db514:	2100      	movs	r1, #0
   db516:	54d1      	strb	r1, [r2, r3]
	return *this;
   db518:	e7f2      	b.n	db500 <_ZN6String4copyEPKcj+0x18>

000db51a <_ZN6StringC1EPKc>:
	buffer = NULL;
   db51a:	2300      	movs	r3, #0
String::String(const char *cstr)
   db51c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   db51e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   db522:	4604      	mov	r4, r0
	len = 0;
   db524:	6083      	str	r3, [r0, #8]
	flags = 0;
   db526:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   db528:	b141      	cbz	r1, db53c <_ZN6StringC1EPKc+0x22>
   db52a:	4608      	mov	r0, r1
   db52c:	9101      	str	r1, [sp, #4]
   db52e:	f001 faa8 	bl	dca82 <strlen>
   db532:	9901      	ldr	r1, [sp, #4]
   db534:	4602      	mov	r2, r0
   db536:	4620      	mov	r0, r4
   db538:	f7ff ffd6 	bl	db4e8 <_ZN6String4copyEPKcj>
}
   db53c:	4620      	mov	r0, r4
   db53e:	b002      	add	sp, #8
   db540:	bd10      	pop	{r4, pc}

000db542 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   db542:	b538      	push	{r3, r4, r5, lr}
   db544:	4605      	mov	r5, r0
	if (buffer) {
   db546:	6800      	ldr	r0, [r0, #0]
{
   db548:	460c      	mov	r4, r1
	if (buffer) {
   db54a:	b168      	cbz	r0, db568 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   db54c:	686a      	ldr	r2, [r5, #4]
   db54e:	688b      	ldr	r3, [r1, #8]
   db550:	429a      	cmp	r2, r3
   db552:	d307      	bcc.n	db564 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   db554:	6809      	ldr	r1, [r1, #0]
   db556:	f001 fa6e 	bl	dca36 <strcpy>
			len = rhs.len;
   db55a:	68a3      	ldr	r3, [r4, #8]
   db55c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   db55e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   db560:	60a3      	str	r3, [r4, #8]
}
   db562:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   db564:	f7fd fcac 	bl	d8ec0 <free>
	buffer = rhs.buffer;
   db568:	6823      	ldr	r3, [r4, #0]
   db56a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   db56c:	6863      	ldr	r3, [r4, #4]
   db56e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   db570:	68a3      	ldr	r3, [r4, #8]
   db572:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   db574:	2300      	movs	r3, #0
	rhs.capacity = 0;
   db576:	e9c4 3300 	strd	r3, r3, [r4]
   db57a:	e7f1      	b.n	db560 <_ZN6String4moveERS_+0x1e>

000db57c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   db57c:	b510      	push	{r4, lr}
	buffer = NULL;
   db57e:	2300      	movs	r3, #0
	capacity = 0;
   db580:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   db584:	4604      	mov	r4, r0
	len = 0;
   db586:	6083      	str	r3, [r0, #8]
	flags = 0;
   db588:	7303      	strb	r3, [r0, #12]
	move(rval);
   db58a:	f7ff ffda 	bl	db542 <_ZN6String4moveERS_>
}
   db58e:	4620      	mov	r0, r4
   db590:	bd10      	pop	{r4, pc}

000db592 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   db592:	4288      	cmp	r0, r1
{
   db594:	b510      	push	{r4, lr}
   db596:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   db598:	d005      	beq.n	db5a6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   db59a:	680b      	ldr	r3, [r1, #0]
   db59c:	b12b      	cbz	r3, db5aa <_ZN6StringaSERKS_+0x18>
   db59e:	688a      	ldr	r2, [r1, #8]
   db5a0:	4619      	mov	r1, r3
   db5a2:	f7ff ffa1 	bl	db4e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   db5a6:	4620      	mov	r0, r4
   db5a8:	bd10      	pop	{r4, pc}
	else invalidate();
   db5aa:	f7ff ff72 	bl	db492 <_ZN6String10invalidateEv>
   db5ae:	e7fa      	b.n	db5a6 <_ZN6StringaSERKS_+0x14>

000db5b0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   db5b0:	b510      	push	{r4, lr}
	buffer = NULL;
   db5b2:	2300      	movs	r3, #0
String::String(const String &value)
   db5b4:	4604      	mov	r4, r0
	capacity = 0;
   db5b6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   db5ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   db5bc:	7303      	strb	r3, [r0, #12]
	*this = value;
   db5be:	f7ff ffe8 	bl	db592 <_ZN6StringaSERKS_>
}
   db5c2:	4620      	mov	r0, r4
   db5c4:	bd10      	pop	{r4, pc}

000db5c6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   db5c6:	b513      	push	{r0, r1, r4, lr}
   db5c8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   db5ca:	b159      	cbz	r1, db5e4 <_ZN6StringaSEPKc+0x1e>
   db5cc:	4608      	mov	r0, r1
   db5ce:	9101      	str	r1, [sp, #4]
   db5d0:	f001 fa57 	bl	dca82 <strlen>
   db5d4:	9901      	ldr	r1, [sp, #4]
   db5d6:	4602      	mov	r2, r0
   db5d8:	4620      	mov	r0, r4
   db5da:	f7ff ff85 	bl	db4e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   db5de:	4620      	mov	r0, r4
   db5e0:	b002      	add	sp, #8
   db5e2:	bd10      	pop	{r4, pc}
	else invalidate();
   db5e4:	f7ff ff55 	bl	db492 <_ZN6String10invalidateEv>
   db5e8:	e7f9      	b.n	db5de <_ZN6StringaSEPKc+0x18>

000db5ea <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   db5ea:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db5ec:	6882      	ldr	r2, [r0, #8]
   db5ee:	b93a      	cbnz	r2, db600 <_ZNK6String6equalsEPKc+0x16>
   db5f0:	b121      	cbz	r1, db5fc <_ZNK6String6equalsEPKc+0x12>
   db5f2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   db5f4:	fab0 f080 	clz	r0, r0
   db5f8:	0940      	lsrs	r0, r0, #5
   db5fa:	e000      	b.n	db5fe <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   db5fc:	2001      	movs	r0, #1
}
   db5fe:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   db600:	6800      	ldr	r0, [r0, #0]
   db602:	b909      	cbnz	r1, db608 <_ZNK6String6equalsEPKc+0x1e>
   db604:	7800      	ldrb	r0, [r0, #0]
   db606:	e7f5      	b.n	db5f4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   db608:	f001 fa0b 	bl	dca22 <strcmp>
   db60c:	e7f2      	b.n	db5f4 <_ZNK6String6equalsEPKc+0xa>
	...

000db610 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   db610:	b40e      	push	{r1, r2, r3}
   db612:	b570      	push	{r4, r5, r6, lr}
   db614:	b087      	sub	sp, #28
   db616:	ad0b      	add	r5, sp, #44	; 0x2c
   db618:	4604      	mov	r4, r0
   db61a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db61e:	9201      	str	r2, [sp, #4]
   db620:	462b      	mov	r3, r5
   db622:	2105      	movs	r1, #5
   db624:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   db626:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db628:	f7fd fc72 	bl	d8f10 <vsnprintf>
    va_end(marker);

    String result;
   db62c:	490b      	ldr	r1, [pc, #44]	; (db65c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   db62e:	4606      	mov	r6, r0
    String result;
   db630:	4620      	mov	r0, r4
   db632:	f7ff ff72 	bl	db51a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   db636:	4631      	mov	r1, r6
   db638:	4620      	mov	r0, r4
   db63a:	f7ff ff41 	bl	db4c0 <_ZN6String7reserveEj>
    if (result.buffer) {
   db63e:	6820      	ldr	r0, [r4, #0]
   db640:	b130      	cbz	r0, db650 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db642:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   db644:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   db646:	462b      	mov	r3, r5
   db648:	1c71      	adds	r1, r6, #1
   db64a:	f7fd fc61 	bl	d8f10 <vsnprintf>
        va_end(marker);
        result.len = n;
   db64e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   db650:	4620      	mov	r0, r4
   db652:	b007      	add	sp, #28
   db654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db658:	b003      	add	sp, #12
   db65a:	4770      	bx	lr
   db65c:	000dd9ad 	.word	0x000dd9ad

000db660 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   db660:	b510      	push	{r4, lr}
   db662:	4604      	mov	r4, r0
        if (wakeupSource_) {
   db664:	6800      	ldr	r0, [r0, #0]
   db666:	b118      	cbz	r0, db670 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   db668:	f7fd fc2a 	bl	d8ec0 <free>
            wakeupSource_ = nullptr;
   db66c:	2300      	movs	r3, #0
   db66e:	6023      	str	r3, [r4, #0]
        }
    }
   db670:	bd10      	pop	{r4, pc}

000db672 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   db672:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   db674:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   db678:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   db67a:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   db67c:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   db67e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   db682:	f8c0 2006 	str.w	r2, [r0, #6]
   db686:	889b      	ldrh	r3, [r3, #4]
   db688:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   db68a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   db68c:	f7ff ffe8 	bl	db660 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   db690:	682b      	ldr	r3, [r5, #0]
   db692:	b113      	cbz	r3, db69a <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   db694:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   db696:	2300      	movs	r3, #0
   db698:	602b      	str	r3, [r5, #0]
    }
   db69a:	4620      	mov	r0, r4
   db69c:	bd38      	pop	{r3, r4, r5, pc}
	...

000db6a0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   db6a0:	b538      	push	{r3, r4, r5, lr}
   db6a2:	460c      	mov	r4, r1
   db6a4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   db6a6:	f7ff ffdb 	bl	db660 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   db6aa:	b144      	cbz	r4, db6be <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   db6ac:	8820      	ldrh	r0, [r4, #0]
   db6ae:	f7fd fbff 	bl	d8eb0 <malloc>
   db6b2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   db6b4:	b128      	cbz	r0, db6c2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   db6b6:	8822      	ldrh	r2, [r4, #0]
   db6b8:	4621      	mov	r1, r4
   db6ba:	f001 f913 	bl	dc8e4 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   db6be:	2000      	movs	r0, #0
    }
   db6c0:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   db6c2:	4801      	ldr	r0, [pc, #4]	; (db6c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   db6c4:	e7fc      	b.n	db6c0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   db6c6:	bf00      	nop
   db6c8:	fffffefc 	.word	0xfffffefc

000db6cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   db6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   db6ce:	4d2d      	ldr	r5, [pc, #180]	; (db784 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   db6d0:	7d0b      	ldrb	r3, [r1, #20]
   db6d2:	4604      	mov	r4, r0
   db6d4:	b08b      	sub	sp, #44	; 0x2c
   db6d6:	4608      	mov	r0, r1
   db6d8:	1daf      	adds	r7, r5, #6
   db6da:	2b00      	cmp	r3, #0
   db6dc:	d038      	beq.n	db750 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   db6de:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   db6e0:	791b      	ldrb	r3, [r3, #4]
   db6e2:	2b00      	cmp	r3, #0
   db6e4:	d034      	beq.n	db750 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   db6e6:	2200      	movs	r2, #0
    SleepResult() {}
   db6e8:	4b27      	ldr	r3, [pc, #156]	; (db788 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   db6ea:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   db6ec:	a902      	add	r1, sp, #8
   db6ee:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   db6f0:	9202      	str	r2, [sp, #8]
   db6f2:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   db6f6:	f88d 200e 	strb.w	r2, [sp, #14]
   db6fa:	f7fd fb3f 	bl	d8d7c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   db6fe:	f8dd 300e 	ldr.w	r3, [sp, #14]
   db702:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   db706:	b200      	sxth	r0, r0
   db708:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   db70c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   db710:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   db712:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   db714:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   db716:	4628      	mov	r0, r5
   db718:	f7ff ffc2 	bl	db6a0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   db71c:	a802      	add	r0, sp, #8
   db71e:	f7ff ff9f 	bl	db660 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   db722:	2300      	movs	r3, #0
   db724:	6023      	str	r3, [r4, #0]
   db726:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   db728:	71a3      	strb	r3, [r4, #6]
   db72a:	8123      	strh	r3, [r4, #8]
   db72c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   db730:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   db732:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   db736:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   db738:	683b      	ldr	r3, [r7, #0]
   db73a:	f8c4 3006 	str.w	r3, [r4, #6]
   db73e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   db740:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   db742:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   db744:	4620      	mov	r0, r4
   db746:	f7ff ffab 	bl	db6a0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   db74a:	4620      	mov	r0, r4
   db74c:	b00b      	add	sp, #44	; 0x2c
   db74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   db750:	2600      	movs	r6, #0
   db752:	2320      	movs	r3, #32
   db754:	e9cd 3602 	strd	r3, r6, [sp, #8]
   db758:	4b0c      	ldr	r3, [pc, #48]	; (db78c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   db75a:	9300      	str	r3, [sp, #0]
   db75c:	490c      	ldr	r1, [pc, #48]	; (db790 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   db75e:	4633      	mov	r3, r6
   db760:	aa02      	add	r2, sp, #8
   db762:	2032      	movs	r0, #50	; 0x32
   db764:	f7fd fa7a 	bl	d8c5c <log_message>
    SleepResult() {}
   db768:	4b07      	ldr	r3, [pc, #28]	; (db788 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   db76a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   db76c:	a902      	add	r1, sp, #8
        error_ = error;
   db76e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   db772:	4804      	ldr	r0, [pc, #16]	; (db784 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   db774:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   db776:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   db77a:	f8ad 300c 	strh.w	r3, [sp, #12]
   db77e:	f7ff ff78 	bl	db672 <_ZN17SystemSleepResultaSEOS_>
   db782:	e7cb      	b.n	db71c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   db784:	2003e5b4 	.word	0x2003e5b4
   db788:	ffff0000 	.word	0xffff0000
   db78c:	000dda87 	.word	0x000dda87
   db790:	000dda80 	.word	0x000dda80

000db794 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   db794:	4b05      	ldr	r3, [pc, #20]	; (db7ac <_GLOBAL__sub_I_System+0x18>)
   db796:	2202      	movs	r2, #2
   db798:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   db79a:	4b05      	ldr	r3, [pc, #20]	; (db7b0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   db79c:	4a05      	ldr	r2, [pc, #20]	; (db7b4 <_GLOBAL__sub_I_System+0x20>)
   db79e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   db7a0:	2000      	movs	r0, #0
   db7a2:	6018      	str	r0, [r3, #0]
   db7a4:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   db7a6:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   db7a8:	f7fd ba8a 	b.w	d8cc0 <set_system_mode>
   db7ac:	2003e5c0 	.word	0x2003e5c0
   db7b0:	2003e5b4 	.word	0x2003e5b4
   db7b4:	ffff0000 	.word	0xffff0000

000db7b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   db7b8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   db7ba:	2000      	movs	r0, #0
   db7bc:	f7fd fb00 	bl	d8dc0 <spark_sync_time_pending>
   db7c0:	b128      	cbz	r0, db7ce <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   db7c2:	f7fd faed 	bl	d8da0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   db7c6:	f080 0001 	eor.w	r0, r0, #1
   db7ca:	b2c0      	uxtb	r0, r0
    }
   db7cc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   db7ce:	2001      	movs	r0, #1
   db7d0:	e7fc      	b.n	db7cc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000db7d2 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   db7d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   db7d4:	4602      	mov	r2, r0
   db7d6:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   db7d8:	4668      	mov	r0, sp
    struct timeval tv = {
   db7da:	2100      	movs	r1, #0
    };
   db7dc:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   db7e0:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   db7e4:	f7fd f892 	bl	d890c <hal_rtc_set_time>
   db7e8:	4602      	mov	r2, r0
   db7ea:	b910      	cbnz	r0, db7f2 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   db7ec:	4601      	mov	r1, r0
   db7ee:	f7fd fa9f 	bl	d8d30 <system_notify_time_changed>
    }
}
   db7f2:	b005      	add	sp, #20
   db7f4:	f85d fb04 	ldr.w	pc, [sp], #4

000db7f8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   db7f8:	b530      	push	{r4, r5, lr}
   db7fa:	4604      	mov	r4, r0
    t += time_zone_cache;
   db7fc:	4818      	ldr	r0, [pc, #96]	; (db860 <_ZN9TimeClass7timeStrEx+0x68>)
   db7fe:	e9d0 1000 	ldrd	r1, r0, [r0]
   db802:	1852      	adds	r2, r2, r1
   db804:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   db808:	4816      	ldr	r0, [pc, #88]	; (db864 <_ZN9TimeClass7timeStrEx+0x6c>)
   db80a:	e9d0 1000 	ldrd	r1, r0, [r0]
   db80e:	1852      	adds	r2, r2, r1
{
   db810:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   db812:	eb40 0303 	adc.w	r3, r0, r3
   db816:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   db81a:	2224      	movs	r2, #36	; 0x24
   db81c:	eb0d 0002 	add.w	r0, sp, r2
   db820:	2100      	movs	r1, #0
   db822:	f001 f887 	bl	dc934 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   db826:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   db828:	a909      	add	r1, sp, #36	; 0x24
   db82a:	4668      	mov	r0, sp
   db82c:	f7fd fb98 	bl	d8f60 <localtime_r>
    char ascstr[26] = {};
   db830:	2216      	movs	r2, #22
   db832:	4629      	mov	r1, r5
   db834:	a803      	add	r0, sp, #12
   db836:	9502      	str	r5, [sp, #8]
   db838:	f001 f87c 	bl	dc934 <memset>
    asctime_r(&calendar_time, ascstr);
   db83c:	a902      	add	r1, sp, #8
   db83e:	a809      	add	r0, sp, #36	; 0x24
   db840:	f001 f812 	bl	dc868 <asctime_r>
    int len = strlen(ascstr);
   db844:	a802      	add	r0, sp, #8
   db846:	f001 f91c 	bl	dca82 <strlen>
    ascstr[len-1] = 0; // remove final newline
   db84a:	ab12      	add	r3, sp, #72	; 0x48
   db84c:	4418      	add	r0, r3
    return String(ascstr);
   db84e:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   db850:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   db854:	4620      	mov	r0, r4
   db856:	f7ff fe60 	bl	db51a <_ZN6StringC1EPKc>
}
   db85a:	4620      	mov	r0, r4
   db85c:	b013      	add	sp, #76	; 0x4c
   db85e:	bd30      	pop	{r4, r5, pc}
   db860:	2003e5d8 	.word	0x2003e5d8
   db864:	2003e5d0 	.word	0x2003e5d0

000db868 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   db868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db86c:	b0a5      	sub	sp, #148	; 0x94
   db86e:	4607      	mov	r7, r0
   db870:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db872:	a814      	add	r0, sp, #80	; 0x50
{
   db874:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db876:	223f      	movs	r2, #63	; 0x3f
{
   db878:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   db87a:	f001 f91c 	bl	dcab6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   db87e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   db880:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   db882:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   db886:	f001 f8fc 	bl	dca82 <strlen>
   db88a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   db88c:	bb5d      	cbnz	r5, db8e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   db88e:	492a      	ldr	r1, [pc, #168]	; (db938 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   db890:	a803      	add	r0, sp, #12
   db892:	f001 f8d0 	bl	dca36 <strcpy>
   db896:	ae14      	add	r6, sp, #80	; 0x50
{
   db898:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   db89a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   db89e:	45ab      	cmp	fp, r5
   db8a0:	d936      	bls.n	db910 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   db8a2:	46b1      	mov	r9, r6
   db8a4:	f105 0a01 	add.w	sl, r5, #1
   db8a8:	f819 3b01 	ldrb.w	r3, [r9], #1
   db8ac:	2b25      	cmp	r3, #37	; 0x25
   db8ae:	d117      	bne.n	db8e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   db8b0:	7873      	ldrb	r3, [r6, #1]
   db8b2:	2b7a      	cmp	r3, #122	; 0x7a
   db8b4:	d114      	bne.n	db8e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   db8b6:	a803      	add	r0, sp, #12
   db8b8:	f001 f8e3 	bl	dca82 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   db8bc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   db8be:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   db8c0:	1828      	adds	r0, r5, r0
   db8c2:	4418      	add	r0, r3
   db8c4:	ebab 0205 	sub.w	r2, fp, r5
   db8c8:	1cb1      	adds	r1, r6, #2
   db8ca:	f001 f80b 	bl	dc8e4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   db8ce:	4622      	mov	r2, r4
   db8d0:	a903      	add	r1, sp, #12
   db8d2:	4630      	mov	r0, r6
   db8d4:	f001 f806 	bl	dc8e4 <memcpy>
            len = strlen(format_str);
   db8d8:	a814      	add	r0, sp, #80	; 0x50
   db8da:	f001 f8d2 	bl	dca82 <strlen>
   db8de:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   db8e0:	464e      	mov	r6, r9
   db8e2:	4655      	mov	r5, sl
   db8e4:	e7d9      	b.n	db89a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   db8e6:	213c      	movs	r1, #60	; 0x3c
   db8e8:	fb95 f3f1 	sdiv	r3, r5, r1
   db8ec:	2b00      	cmp	r3, #0
   db8ee:	bfb8      	it	lt
   db8f0:	425b      	neglt	r3, r3
   db8f2:	fbb3 f2f1 	udiv	r2, r3, r1
   db8f6:	fb01 3312 	mls	r3, r1, r2, r3
   db8fa:	9300      	str	r3, [sp, #0]
   db8fc:	4a0f      	ldr	r2, [pc, #60]	; (db93c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   db8fe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   db902:	2110      	movs	r1, #16
   db904:	a803      	add	r0, sp, #12
   db906:	fb95 f3f3 	sdiv	r3, r5, r3
   db90a:	f7fd faf9 	bl	d8f00 <snprintf>
   db90e:	e7c2      	b.n	db896 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   db910:	2100      	movs	r1, #0
   db912:	222e      	movs	r2, #46	; 0x2e
   db914:	a808      	add	r0, sp, #32
   db916:	9107      	str	r1, [sp, #28]
   db918:	f001 f80c 	bl	dc934 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   db91c:	4643      	mov	r3, r8
   db91e:	aa14      	add	r2, sp, #80	; 0x50
   db920:	2132      	movs	r1, #50	; 0x32
   db922:	a807      	add	r0, sp, #28
   db924:	f7fd fb14 	bl	d8f50 <strftime>
    return String(buf);
   db928:	a907      	add	r1, sp, #28
   db92a:	4638      	mov	r0, r7
   db92c:	f7ff fdf5 	bl	db51a <_ZN6StringC1EPKc>
}
   db930:	4638      	mov	r0, r7
   db932:	b025      	add	sp, #148	; 0x94
   db934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db938:	000dd507 	.word	0x000dd507
   db93c:	000dd509 	.word	0x000dd509

000db940 <_ZN9TimeClass6formatExPKc>:
{
   db940:	b5f0      	push	{r4, r5, r6, r7, lr}
   db942:	b08d      	sub	sp, #52	; 0x34
   db944:	e9cd 2300 	strd	r2, r3, [sp]
   db948:	9d12      	ldr	r5, [sp, #72]	; 0x48
   db94a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   db94c:	b915      	cbnz	r5, db954 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   db94e:	4b19      	ldr	r3, [pc, #100]	; (db9b4 <_ZN9TimeClass6formatExPKc+0x74>)
   db950:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   db952:	b12d      	cbz	r5, db960 <_ZN9TimeClass6formatExPKc+0x20>
   db954:	4b18      	ldr	r3, [pc, #96]	; (db9b8 <_ZN9TimeClass6formatExPKc+0x78>)
   db956:	4628      	mov	r0, r5
   db958:	6819      	ldr	r1, [r3, #0]
   db95a:	f001 f862 	bl	dca22 <strcmp>
   db95e:	b938      	cbnz	r0, db970 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   db960:	e9dd 2300 	ldrd	r2, r3, [sp]
   db964:	4620      	mov	r0, r4
   db966:	f7ff ff47 	bl	db7f8 <_ZN9TimeClass7timeStrEx>
}
   db96a:	4620      	mov	r0, r4
   db96c:	b00d      	add	sp, #52	; 0x34
   db96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   db970:	4e12      	ldr	r6, [pc, #72]	; (db9bc <_ZN9TimeClass6formatExPKc+0x7c>)
   db972:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   db974:	4f12      	ldr	r7, [pc, #72]	; (db9c0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   db976:	e9d6 3200 	ldrd	r3, r2, [r6]
   db97a:	185b      	adds	r3, r3, r1
   db97c:	9901      	ldr	r1, [sp, #4]
   db97e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   db982:	e9d7 0100 	ldrd	r0, r1, [r7]
   db986:	181b      	adds	r3, r3, r0
   db988:	eb41 0202 	adc.w	r2, r1, r2
   db98c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   db990:	2100      	movs	r1, #0
   db992:	2224      	movs	r2, #36	; 0x24
   db994:	a803      	add	r0, sp, #12
   db996:	f000 ffcd 	bl	dc934 <memset>
    localtime_r(&t, &calendar_time);
   db99a:	a903      	add	r1, sp, #12
   db99c:	4668      	mov	r0, sp
   db99e:	f7fd fadf 	bl	d8f60 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   db9a2:	6832      	ldr	r2, [r6, #0]
   db9a4:	683b      	ldr	r3, [r7, #0]
   db9a6:	a903      	add	r1, sp, #12
   db9a8:	4413      	add	r3, r2
   db9aa:	4620      	mov	r0, r4
   db9ac:	462a      	mov	r2, r5
   db9ae:	f7ff ff5b 	bl	db868 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   db9b2:	e7da      	b.n	db96a <_ZN9TimeClass6formatExPKc+0x2a>
   db9b4:	2003e5c8 	.word	0x2003e5c8
   db9b8:	2003dcf0 	.word	0x2003dcf0
   db9bc:	2003e5d8 	.word	0x2003e5d8
   db9c0:	2003e5d0 	.word	0x2003e5d0

000db9c4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   db9c4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   db9c6:	2000      	movs	r0, #0
   db9c8:	f7fc ff90 	bl	d88ec <hal_rtc_time_is_valid>
    if (rtcstate)
   db9cc:	4604      	mov	r4, r0
   db9ce:	b9a0      	cbnz	r0, db9fa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   db9d0:	f7fd f96e 	bl	d8cb0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   db9d4:	2801      	cmp	r0, #1
   db9d6:	d110      	bne.n	db9fa <_ZN9TimeClass7isValidEv+0x36>
   db9d8:	4620      	mov	r0, r4
   db9da:	f7fd f9a1 	bl	d8d20 <system_thread_get_state>
   db9de:	b960      	cbnz	r0, db9fa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   db9e0:	f7ff feea 	bl	db7b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   db9e4:	b910      	cbnz	r0, db9ec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   db9e6:	f7fd f9d3 	bl	d8d90 <spark_process>
        while (_while() && !_condition()) {
   db9ea:	e7f9      	b.n	db9e0 <_ZN9TimeClass7isValidEv+0x1c>
   db9ec:	f7ff fee4 	bl	db7b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   db9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   db9f4:	2000      	movs	r0, #0
   db9f6:	f7fc bf79 	b.w	d88ec <hal_rtc_time_is_valid>
}
   db9fa:	4620      	mov	r0, r4
   db9fc:	bd10      	pop	{r4, pc}

000db9fe <_ZN9TimeClass3nowEv>:
{
   db9fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   dba00:	f7ff ffe0 	bl	db9c4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   dba04:	2210      	movs	r2, #16
   dba06:	2100      	movs	r1, #0
   dba08:	4668      	mov	r0, sp
   dba0a:	f000 ff93 	bl	dc934 <memset>
    hal_rtc_get_time(&tv, nullptr);
   dba0e:	2100      	movs	r1, #0
   dba10:	4668      	mov	r0, sp
   dba12:	f7fc ff73 	bl	d88fc <hal_rtc_get_time>
}
   dba16:	9800      	ldr	r0, [sp, #0]
   dba18:	b005      	add	sp, #20
   dba1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dba20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dba20:	4b02      	ldr	r3, [pc, #8]	; (dba2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dba22:	681a      	ldr	r2, [r3, #0]
   dba24:	4b02      	ldr	r3, [pc, #8]	; (dba30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dba26:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   dba28:	4770      	bx	lr
   dba2a:	bf00      	nop
   dba2c:	2003dcf0 	.word	0x2003dcf0
   dba30:	2003e5c8 	.word	0x2003e5c8

000dba34 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   dba34:	4770      	bx	lr

000dba36 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dba36:	7441      	strb	r1, [r0, #17]
}
   dba38:	4770      	bx	lr

000dba3a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dba3a:	4770      	bx	lr

000dba3c <_ZN11USARTSerial17availableForWriteEv>:
{
   dba3c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   dba3e:	7c00      	ldrb	r0, [r0, #16]
   dba40:	f7fd f8b4 	bl	d8bac <hal_usart_available_data_for_write>
}
   dba44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dba48:	bd08      	pop	{r3, pc}

000dba4a <_ZN11USARTSerial9availableEv>:
{
   dba4a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   dba4c:	7c00      	ldrb	r0, [r0, #16]
   dba4e:	f7fd f885 	bl	d8b5c <hal_usart_available>
}
   dba52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dba56:	bd08      	pop	{r3, pc}

000dba58 <_ZN11USARTSerial4peekEv>:
{
   dba58:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   dba5a:	7c00      	ldrb	r0, [r0, #16]
   dba5c:	f7fd f88e 	bl	d8b7c <hal_usart_peek>
}
   dba60:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dba64:	bd08      	pop	{r3, pc}

000dba66 <_ZN11USARTSerial4readEv>:
{
   dba66:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   dba68:	7c00      	ldrb	r0, [r0, #16]
   dba6a:	f7fd f87f 	bl	d8b6c <hal_usart_read>
}
   dba6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dba72:	bd08      	pop	{r3, pc}

000dba74 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   dba74:	7c00      	ldrb	r0, [r0, #16]
   dba76:	f7fd b889 	b.w	d8b8c <hal_usart_flush>

000dba7a <_ZN11USARTSerial5writeEh>:
{
   dba7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dba7c:	7c45      	ldrb	r5, [r0, #17]
{
   dba7e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dba80:	b12d      	cbz	r5, dba8e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   dba82:	7c20      	ldrb	r0, [r4, #16]
}
   dba84:	b003      	add	sp, #12
   dba86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   dba8a:	f7fd b85f 	b.w	d8b4c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   dba8e:	7c00      	ldrb	r0, [r0, #16]
   dba90:	9101      	str	r1, [sp, #4]
   dba92:	f7fd f88b 	bl	d8bac <hal_usart_available_data_for_write>
   dba96:	2800      	cmp	r0, #0
   dba98:	9901      	ldr	r1, [sp, #4]
   dba9a:	dcf2      	bgt.n	dba82 <_ZN11USARTSerial5writeEh+0x8>
}
   dba9c:	4628      	mov	r0, r5
   dba9e:	b003      	add	sp, #12
   dbaa0:	bd30      	pop	{r4, r5, pc}

000dbaa2 <_ZN11USARTSerialD0Ev>:
   dbaa2:	b510      	push	{r4, lr}
   dbaa4:	2114      	movs	r1, #20
   dbaa6:	4604      	mov	r4, r0
   dbaa8:	f000 fa90 	bl	dbfcc <_ZdlPvj>
   dbaac:	4620      	mov	r0, r4
   dbaae:	bd10      	pop	{r4, pc}

000dbab0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   dbab0:	b510      	push	{r4, lr}
   dbab2:	f04f 0c00 	mov.w	ip, #0
   dbab6:	4604      	mov	r4, r0
   dbab8:	4608      	mov	r0, r1
   dbaba:	4611      	mov	r1, r2
   dbabc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dbac0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   dbac4:	4a04      	ldr	r2, [pc, #16]	; (dbad8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   dbac6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   dbac8:	2201      	movs	r2, #1
  _serial = serial;
   dbaca:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dbacc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   dbace:	461a      	mov	r2, r3
   dbad0:	f7fd f82c 	bl	d8b2c <hal_usart_init>
}
   dbad4:	4620      	mov	r0, r4
   dbad6:	bd10      	pop	{r4, pc}
   dbad8:	000ddad4 	.word	0x000ddad4

000dbadc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   dbadc:	7c00      	ldrb	r0, [r0, #16]
   dbade:	2300      	movs	r3, #0
   dbae0:	f7fd b86c 	b.w	d8bbc <hal_usart_begin_config>

000dbae4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   dbae4:	2200      	movs	r2, #0
   dbae6:	f7ff bff9 	b.w	dbadc <_ZN11USARTSerial5beginEmm>

000dbaea <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   dbaea:	7c00      	ldrb	r0, [r0, #16]
   dbaec:	f7fd b826 	b.w	d8b3c <hal_usart_end>

000dbaf0 <_Z22__fetch_global_Serial1v>:
{
   dbaf0:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dbaf2:	4c0d      	ldr	r4, [pc, #52]	; (dbb28 <_Z22__fetch_global_Serial1v+0x38>)
   dbaf4:	7821      	ldrb	r1, [r4, #0]
   dbaf6:	f3bf 8f5b 	dmb	ish
   dbafa:	f011 0101 	ands.w	r1, r1, #1
   dbafe:	d110      	bne.n	dbb22 <_Z22__fetch_global_Serial1v+0x32>
   dbb00:	4620      	mov	r0, r4
   dbb02:	9101      	str	r1, [sp, #4]
   dbb04:	f7f8 fad8 	bl	d40b8 <__cxa_guard_acquire>
   dbb08:	9901      	ldr	r1, [sp, #4]
   dbb0a:	b150      	cbz	r0, dbb22 <_Z22__fetch_global_Serial1v+0x32>
   dbb0c:	4b07      	ldr	r3, [pc, #28]	; (dbb2c <_Z22__fetch_global_Serial1v+0x3c>)
   dbb0e:	4a08      	ldr	r2, [pc, #32]	; (dbb30 <_Z22__fetch_global_Serial1v+0x40>)
   dbb10:	4808      	ldr	r0, [pc, #32]	; (dbb34 <_Z22__fetch_global_Serial1v+0x44>)
   dbb12:	f7ff ffcd 	bl	dbab0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   dbb16:	4620      	mov	r0, r4
   dbb18:	f7f8 fad3 	bl	d40c2 <__cxa_guard_release>
   dbb1c:	4806      	ldr	r0, [pc, #24]	; (dbb38 <_Z22__fetch_global_Serial1v+0x48>)
   dbb1e:	f000 fec9 	bl	dc8b4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dbb22:	4804      	ldr	r0, [pc, #16]	; (dbb34 <_Z22__fetch_global_Serial1v+0x44>)
   dbb24:	b002      	add	sp, #8
   dbb26:	bd10      	pop	{r4, pc}
   dbb28:	2003e5e0 	.word	0x2003e5e0
   dbb2c:	2003e668 	.word	0x2003e668
   dbb30:	2003e5e4 	.word	0x2003e5e4
   dbb34:	2003e6ec 	.word	0x2003e6ec
   dbb38:	000dba3b 	.word	0x000dba3b

000dbb3c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dbb3c:	7441      	strb	r1, [r0, #17]
}
   dbb3e:	4770      	bx	lr

000dbb40 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbb40:	4770      	bx	lr

000dbb42 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dbb42:	4770      	bx	lr

000dbb44 <_ZN9USBSerial4readEv>:
{
   dbb44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dbb46:	2100      	movs	r1, #0
   dbb48:	7c00      	ldrb	r0, [r0, #16]
   dbb4a:	f7fd f867 	bl	d8c1c <HAL_USB_USART_Receive_Data>
}
   dbb4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbb52:	bd08      	pop	{r3, pc}

000dbb54 <_ZN9USBSerial4peekEv>:
{
   dbb54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dbb56:	2101      	movs	r1, #1
   dbb58:	7c00      	ldrb	r0, [r0, #16]
   dbb5a:	f7fd f85f 	bl	d8c1c <HAL_USB_USART_Receive_Data>
}
   dbb5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   dbb62:	bd08      	pop	{r3, pc}

000dbb64 <_ZN9USBSerial17availableForWriteEv>:
{
   dbb64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dbb66:	7c00      	ldrb	r0, [r0, #16]
   dbb68:	f7fd f850 	bl	d8c0c <HAL_USB_USART_Available_Data_For_Write>
}
   dbb6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbb70:	bd08      	pop	{r3, pc}

000dbb72 <_ZN9USBSerial9availableEv>:
{
   dbb72:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dbb74:	7c00      	ldrb	r0, [r0, #16]
   dbb76:	f7fd f841 	bl	d8bfc <HAL_USB_USART_Available_Data>
}
   dbb7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dbb7e:	bd08      	pop	{r3, pc}

000dbb80 <_ZN9USBSerial5writeEh>:
{
   dbb80:	b513      	push	{r0, r1, r4, lr}
   dbb82:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dbb84:	7c00      	ldrb	r0, [r0, #16]
{
   dbb86:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dbb88:	f7fd f840 	bl	d8c0c <HAL_USB_USART_Available_Data_For_Write>
   dbb8c:	2800      	cmp	r0, #0
   dbb8e:	9901      	ldr	r1, [sp, #4]
   dbb90:	dc01      	bgt.n	dbb96 <_ZN9USBSerial5writeEh+0x16>
   dbb92:	7c60      	ldrb	r0, [r4, #17]
   dbb94:	b120      	cbz	r0, dbba0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dbb96:	7c20      	ldrb	r0, [r4, #16]
   dbb98:	f7fd f848 	bl	d8c2c <HAL_USB_USART_Send_Data>
   dbb9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   dbba0:	b002      	add	sp, #8
   dbba2:	bd10      	pop	{r4, pc}

000dbba4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   dbba4:	7c00      	ldrb	r0, [r0, #16]
   dbba6:	f7fd b849 	b.w	d8c3c <HAL_USB_USART_Flush_Data>

000dbbaa <_ZN9USBSerialD0Ev>:
   dbbaa:	b510      	push	{r4, lr}
   dbbac:	2114      	movs	r1, #20
   dbbae:	4604      	mov	r4, r0
   dbbb0:	f000 fa0c 	bl	dbfcc <_ZdlPvj>
   dbbb4:	4620      	mov	r0, r4
   dbbb6:	bd10      	pop	{r4, pc}

000dbbb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dbbb8:	b510      	push	{r4, lr}
   dbbba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dbbbe:	4604      	mov	r4, r0
   dbbc0:	4608      	mov	r0, r1
   dbbc2:	2100      	movs	r1, #0
   dbbc4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   dbbc8:	4b04      	ldr	r3, [pc, #16]	; (dbbdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dbbca:	6023      	str	r3, [r4, #0]
  _blocking = true;
   dbbcc:	2301      	movs	r3, #1
  _serial = serial;
   dbbce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   dbbd0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   dbbd2:	4611      	mov	r1, r2
   dbbd4:	f7fc fffa 	bl	d8bcc <HAL_USB_USART_Init>
}
   dbbd8:	4620      	mov	r0, r4
   dbbda:	bd10      	pop	{r4, pc}
   dbbdc:	000ddb04 	.word	0x000ddb04

000dbbe0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   dbbe0:	7c00      	ldrb	r0, [r0, #16]
   dbbe2:	2200      	movs	r2, #0
   dbbe4:	f7fc bffa 	b.w	d8bdc <HAL_USB_USART_Begin>

000dbbe8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   dbbe8:	7c00      	ldrb	r0, [r0, #16]
   dbbea:	f7fc bfff 	b.w	d8bec <HAL_USB_USART_End>

000dbbee <_Z19acquireSerialBufferv>:
{
   dbbee:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dbbf0:	2214      	movs	r2, #20
{
   dbbf2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dbbf4:	2100      	movs	r1, #0
   dbbf6:	f000 fe9d 	bl	dc934 <memset>
}
   dbbfa:	4620      	mov	r0, r4
   dbbfc:	bd10      	pop	{r4, pc}
	...

000dbc00 <_Z16_fetch_usbserialv>:
{
   dbc00:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbc02:	4c0f      	ldr	r4, [pc, #60]	; (dbc40 <_Z16_fetch_usbserialv+0x40>)
{
   dbc04:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dbc06:	a803      	add	r0, sp, #12
   dbc08:	f7ff fff1 	bl	dbbee <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dbc0c:	7821      	ldrb	r1, [r4, #0]
   dbc0e:	f3bf 8f5b 	dmb	ish
   dbc12:	f011 0101 	ands.w	r1, r1, #1
   dbc16:	d10f      	bne.n	dbc38 <_Z16_fetch_usbserialv+0x38>
   dbc18:	4620      	mov	r0, r4
   dbc1a:	9101      	str	r1, [sp, #4]
   dbc1c:	f7f8 fa4c 	bl	d40b8 <__cxa_guard_acquire>
   dbc20:	9901      	ldr	r1, [sp, #4]
   dbc22:	b148      	cbz	r0, dbc38 <_Z16_fetch_usbserialv+0x38>
   dbc24:	aa03      	add	r2, sp, #12
   dbc26:	4807      	ldr	r0, [pc, #28]	; (dbc44 <_Z16_fetch_usbserialv+0x44>)
   dbc28:	f7ff ffc6 	bl	dbbb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dbc2c:	4620      	mov	r0, r4
   dbc2e:	f7f8 fa48 	bl	d40c2 <__cxa_guard_release>
   dbc32:	4805      	ldr	r0, [pc, #20]	; (dbc48 <_Z16_fetch_usbserialv+0x48>)
   dbc34:	f000 fe3e 	bl	dc8b4 <atexit>
	return _usbserial;
}
   dbc38:	4802      	ldr	r0, [pc, #8]	; (dbc44 <_Z16_fetch_usbserialv+0x44>)
   dbc3a:	b008      	add	sp, #32
   dbc3c:	bd10      	pop	{r4, pc}
   dbc3e:	bf00      	nop
   dbc40:	2003e700 	.word	0x2003e700
   dbc44:	2003e704 	.word	0x2003e704
   dbc48:	000dbb41 	.word	0x000dbb41

000dbc4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   dbc4c:	4b01      	ldr	r3, [pc, #4]	; (dbc54 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   dbc4e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   dbc50:	4770      	bx	lr
   dbc52:	bf00      	nop
   dbc54:	2003dcf8 	.word	0x2003dcf8

000dbc58 <serialEventRun>:
{
   dbc58:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dbc5a:	4b0b      	ldr	r3, [pc, #44]	; (dbc88 <serialEventRun+0x30>)
   dbc5c:	b143      	cbz	r3, dbc70 <serialEventRun+0x18>
   dbc5e:	f7ff ffcf 	bl	dbc00 <_Z16_fetch_usbserialv>
   dbc62:	6803      	ldr	r3, [r0, #0]
   dbc64:	691b      	ldr	r3, [r3, #16]
   dbc66:	4798      	blx	r3
   dbc68:	2800      	cmp	r0, #0
   dbc6a:	dd01      	ble.n	dbc70 <serialEventRun+0x18>
        serialEvent();
   dbc6c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   dbc70:	4b06      	ldr	r3, [pc, #24]	; (dbc8c <serialEventRun+0x34>)
   dbc72:	b143      	cbz	r3, dbc86 <serialEventRun+0x2e>
   dbc74:	f7ff ff3c 	bl	dbaf0 <_Z22__fetch_global_Serial1v>
   dbc78:	6803      	ldr	r3, [r0, #0]
   dbc7a:	691b      	ldr	r3, [r3, #16]
   dbc7c:	4798      	blx	r3
   dbc7e:	2800      	cmp	r0, #0
   dbc80:	dd01      	ble.n	dbc86 <serialEventRun+0x2e>
        serialEvent1();
   dbc82:	f3af 8000 	nop.w
}
   dbc86:	bd08      	pop	{r3, pc}
	...

000dbc90 <_post_loop>:
{
   dbc90:	b508      	push	{r3, lr}
	serialEventRun();
   dbc92:	f7ff ffe1 	bl	dbc58 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dbc96:	f7fc fe21 	bl	d88dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dbc9a:	4b01      	ldr	r3, [pc, #4]	; (dbca0 <_post_loop+0x10>)
   dbc9c:	6018      	str	r0, [r3, #0]
}
   dbc9e:	bd08      	pop	{r3, pc}
   dbca0:	2003e720 	.word	0x2003e720

000dbca4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dbca4:	4805      	ldr	r0, [pc, #20]	; (dbcbc <_Z33system_initialize_user_backup_ramv+0x18>)
   dbca6:	4a06      	ldr	r2, [pc, #24]	; (dbcc0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   dbca8:	4906      	ldr	r1, [pc, #24]	; (dbcc4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   dbcaa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dbcac:	1a12      	subs	r2, r2, r0
   dbcae:	f000 fe19 	bl	dc8e4 <memcpy>
    __backup_sram_signature = signature;
   dbcb2:	4b05      	ldr	r3, [pc, #20]	; (dbcc8 <_Z33system_initialize_user_backup_ramv+0x24>)
   dbcb4:	4a05      	ldr	r2, [pc, #20]	; (dbccc <_Z33system_initialize_user_backup_ramv+0x28>)
   dbcb6:	601a      	str	r2, [r3, #0]
}
   dbcb8:	bd08      	pop	{r3, pc}
   dbcba:	bf00      	nop
   dbcbc:	2003f400 	.word	0x2003f400
   dbcc0:	2003f404 	.word	0x2003f404
   dbcc4:	000ddcd0 	.word	0x000ddcd0
   dbcc8:	2003f400 	.word	0x2003f400
   dbccc:	9a271c1e 	.word	0x9a271c1e

000dbcd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dbcd0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dbcd2:	2300      	movs	r3, #0
   dbcd4:	9300      	str	r3, [sp, #0]
   dbcd6:	461a      	mov	r2, r3
   dbcd8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dbcdc:	f7fd f83a 	bl	d8d54 <system_ctrl_set_result>
}
   dbce0:	b003      	add	sp, #12
   dbce2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dbce8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   dbce8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dbcea:	8843      	ldrh	r3, [r0, #2]
   dbcec:	2b0a      	cmp	r3, #10
   dbcee:	d008      	beq.n	dbd02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dbcf0:	2b50      	cmp	r3, #80	; 0x50
   dbcf2:	d10b      	bne.n	dbd0c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   dbcf4:	4b09      	ldr	r3, [pc, #36]	; (dbd1c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dbcf6:	681b      	ldr	r3, [r3, #0]
   dbcf8:	b14b      	cbz	r3, dbd0e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   dbcfa:	b003      	add	sp, #12
   dbcfc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   dbd00:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   dbd02:	f7ff ffe5 	bl	dbcd0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   dbd06:	b003      	add	sp, #12
   dbd08:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dbd0c:	2300      	movs	r3, #0
   dbd0e:	9300      	str	r3, [sp, #0]
   dbd10:	461a      	mov	r2, r3
   dbd12:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dbd16:	f7fd f81d 	bl	d8d54 <system_ctrl_set_result>
}
   dbd1a:	e7f4      	b.n	dbd06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   dbd1c:	2003e71c 	.word	0x2003e71c

000dbd20 <module_user_init_hook>:
{
   dbd20:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   dbd22:	4812      	ldr	r0, [pc, #72]	; (dbd6c <module_user_init_hook+0x4c>)
   dbd24:	2100      	movs	r1, #0
   dbd26:	f7fd f90b 	bl	d8f40 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   dbd2a:	4b11      	ldr	r3, [pc, #68]	; (dbd70 <module_user_init_hook+0x50>)
   dbd2c:	681a      	ldr	r2, [r3, #0]
   dbd2e:	4b11      	ldr	r3, [pc, #68]	; (dbd74 <module_user_init_hook+0x54>)
   dbd30:	429a      	cmp	r2, r3
   dbd32:	4b11      	ldr	r3, [pc, #68]	; (dbd78 <module_user_init_hook+0x58>)
   dbd34:	bf0c      	ite	eq
   dbd36:	2201      	moveq	r2, #1
   dbd38:	2200      	movne	r2, #0
   dbd3a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dbd3c:	d001      	beq.n	dbd42 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   dbd3e:	f7ff ffb1 	bl	dbca4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dbd42:	f7fc fdbb 	bl	d88bc <HAL_RNG_GetRandomNumber>
   dbd46:	4604      	mov	r4, r0
    srand(seed);
   dbd48:	f000 fdfc 	bl	dc944 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dbd4c:	4b0b      	ldr	r3, [pc, #44]	; (dbd7c <module_user_init_hook+0x5c>)
   dbd4e:	b113      	cbz	r3, dbd56 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   dbd50:	4620      	mov	r0, r4
   dbd52:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dbd56:	2100      	movs	r1, #0
   dbd58:	4808      	ldr	r0, [pc, #32]	; (dbd7c <module_user_init_hook+0x5c>)
   dbd5a:	f7fd f841 	bl	d8de0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   dbd5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dbd62:	4807      	ldr	r0, [pc, #28]	; (dbd80 <module_user_init_hook+0x60>)
   dbd64:	2100      	movs	r1, #0
   dbd66:	f7fc bfeb 	b.w	d8d40 <system_ctrl_set_app_request_handler>
   dbd6a:	bf00      	nop
   dbd6c:	000dbc4d 	.word	0x000dbc4d
   dbd70:	2003f400 	.word	0x2003f400
   dbd74:	9a271c1e 	.word	0x9a271c1e
   dbd78:	2003e718 	.word	0x2003e718
   dbd7c:	00000000 	.word	0x00000000
   dbd80:	000dbce9 	.word	0x000dbce9

000dbd84 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   dbd84:	b508      	push	{r3, lr}
   dbd86:	4b02      	ldr	r3, [pc, #8]	; (dbd90 <spark_protocol_instance+0xc>)
   dbd88:	681b      	ldr	r3, [r3, #0]
   dbd8a:	681b      	ldr	r3, [r3, #0]
   dbd8c:	9301      	str	r3, [sp, #4]
   dbd8e:	bd08      	pop	{r3, pc}
   dbd90:	0003025c 	.word	0x0003025c

000dbd94 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   dbd94:	b508      	push	{r3, lr}
   dbd96:	4b02      	ldr	r3, [pc, #8]	; (dbda0 <spark_protocol_set_product_id+0xc>)
   dbd98:	681b      	ldr	r3, [r3, #0]
   dbd9a:	685b      	ldr	r3, [r3, #4]
   dbd9c:	9301      	str	r3, [sp, #4]
   dbd9e:	bd08      	pop	{r3, pc}
   dbda0:	0003025c 	.word	0x0003025c

000dbda4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   dbda4:	b508      	push	{r3, lr}
   dbda6:	4b02      	ldr	r3, [pc, #8]	; (dbdb0 <spark_protocol_set_product_firmware_version+0xc>)
   dbda8:	681b      	ldr	r3, [r3, #0]
   dbdaa:	689b      	ldr	r3, [r3, #8]
   dbdac:	9301      	str	r3, [sp, #4]
   dbdae:	bd08      	pop	{r3, pc}
   dbdb0:	0003025c 	.word	0x0003025c

000dbdb4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   dbdb4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   dbdb6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   dbdb8:	d902      	bls.n	dbdc0 <pinAvailable+0xc>
    return false;
   dbdba:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   dbdbc:	b002      	add	sp, #8
   dbdbe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   dbdc0:	f1a0 030b 	sub.w	r3, r0, #11
   dbdc4:	2b02      	cmp	r3, #2
   dbdc6:	d81a      	bhi.n	dbdfe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   dbdc8:	4c17      	ldr	r4, [pc, #92]	; (dbe28 <pinAvailable+0x74>)
   dbdca:	7821      	ldrb	r1, [r4, #0]
   dbdcc:	f3bf 8f5b 	dmb	ish
   dbdd0:	f011 0101 	ands.w	r1, r1, #1
   dbdd4:	d10b      	bne.n	dbdee <pinAvailable+0x3a>
   dbdd6:	4620      	mov	r0, r4
   dbdd8:	9101      	str	r1, [sp, #4]
   dbdda:	f7f8 f96d 	bl	d40b8 <__cxa_guard_acquire>
   dbdde:	9901      	ldr	r1, [sp, #4]
   dbde0:	b128      	cbz	r0, dbdee <pinAvailable+0x3a>
   dbde2:	4812      	ldr	r0, [pc, #72]	; (dbe2c <pinAvailable+0x78>)
   dbde4:	f7ff fa94 	bl	db310 <_ZN8SPIClassC1E19hal_spi_interface_t>
   dbde8:	4620      	mov	r0, r4
   dbdea:	f7f8 f96a 	bl	d40c2 <__cxa_guard_release>
   dbdee:	4b0f      	ldr	r3, [pc, #60]	; (dbe2c <pinAvailable+0x78>)
   dbdf0:	7818      	ldrb	r0, [r3, #0]
   dbdf2:	f7fc fe73 	bl	d8adc <hal_spi_is_enabled>
   dbdf6:	2800      	cmp	r0, #0
   dbdf8:	d1df      	bne.n	dbdba <pinAvailable+0x6>
  return true; // 'pin' is available
   dbdfa:	2001      	movs	r0, #1
   dbdfc:	e7de      	b.n	dbdbc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   dbdfe:	2801      	cmp	r0, #1
   dbe00:	d809      	bhi.n	dbe16 <pinAvailable+0x62>
   dbe02:	f000 f89b 	bl	dbf3c <_Z19__fetch_global_Wirev>
   dbe06:	2100      	movs	r1, #0
   dbe08:	7c00      	ldrb	r0, [r0, #16]
   dbe0a:	f7fc fe07 	bl	d8a1c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   dbe0e:	f080 0001 	eor.w	r0, r0, #1
   dbe12:	b2c0      	uxtb	r0, r0
   dbe14:	e7d2      	b.n	dbdbc <pinAvailable+0x8>
   dbe16:	3809      	subs	r0, #9
   dbe18:	2801      	cmp	r0, #1
   dbe1a:	d8ee      	bhi.n	dbdfa <pinAvailable+0x46>
   dbe1c:	f7ff fe68 	bl	dbaf0 <_Z22__fetch_global_Serial1v>
   dbe20:	7c00      	ldrb	r0, [r0, #16]
   dbe22:	f7fc febb 	bl	d8b9c <hal_usart_is_enabled>
   dbe26:	e7f2      	b.n	dbe0e <pinAvailable+0x5a>
   dbe28:	2003e2fc 	.word	0x2003e2fc
   dbe2c:	2003e300 	.word	0x2003e300

000dbe30 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbe30:	2823      	cmp	r0, #35	; 0x23
{
   dbe32:	b538      	push	{r3, r4, r5, lr}
   dbe34:	4604      	mov	r4, r0
   dbe36:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   dbe38:	d80a      	bhi.n	dbe50 <pinMode+0x20>
   dbe3a:	29ff      	cmp	r1, #255	; 0xff
   dbe3c:	d008      	beq.n	dbe50 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   dbe3e:	f7ff ffb9 	bl	dbdb4 <pinAvailable>
   dbe42:	b128      	cbz	r0, dbe50 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   dbe44:	4629      	mov	r1, r5
   dbe46:	4620      	mov	r0, r4
}
   dbe48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   dbe4c:	f7fc bd6e 	b.w	d892c <HAL_Pin_Mode>
}
   dbe50:	bd38      	pop	{r3, r4, r5, pc}

000dbe52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   dbe52:	b538      	push	{r3, r4, r5, lr}
   dbe54:	4604      	mov	r4, r0
   dbe56:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbe58:	f7fc fd70 	bl	d893c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   dbe5c:	28ff      	cmp	r0, #255	; 0xff
   dbe5e:	d010      	beq.n	dbe82 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   dbe60:	2806      	cmp	r0, #6
   dbe62:	d804      	bhi.n	dbe6e <digitalWrite+0x1c>
   dbe64:	234d      	movs	r3, #77	; 0x4d
   dbe66:	fa23 f000 	lsr.w	r0, r3, r0
   dbe6a:	07c3      	lsls	r3, r0, #31
   dbe6c:	d409      	bmi.n	dbe82 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   dbe6e:	4620      	mov	r0, r4
   dbe70:	f7ff ffa0 	bl	dbdb4 <pinAvailable>
   dbe74:	b128      	cbz	r0, dbe82 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   dbe76:	4629      	mov	r1, r5
   dbe78:	4620      	mov	r0, r4
}
   dbe7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   dbe7e:	f7fc bd65 	b.w	d894c <HAL_GPIO_Write>
}
   dbe82:	bd38      	pop	{r3, r4, r5, pc}

000dbe84 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   dbe84:	b510      	push	{r4, lr}
   dbe86:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   dbe88:	f7fc fd58 	bl	d893c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   dbe8c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   dbe8e:	b2db      	uxtb	r3, r3
   dbe90:	2b01      	cmp	r3, #1
   dbe92:	d908      	bls.n	dbea6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   dbe94:	4620      	mov	r0, r4
   dbe96:	f7ff ff8d 	bl	dbdb4 <pinAvailable>
   dbe9a:	b120      	cbz	r0, dbea6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   dbe9c:	4620      	mov	r0, r4
}
   dbe9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   dbea2:	f7fc bd5b 	b.w	d895c <HAL_GPIO_Read>
}
   dbea6:	2000      	movs	r0, #0
   dbea8:	bd10      	pop	{r4, pc}

000dbeaa <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   dbeaa:	280d      	cmp	r0, #13
{
   dbeac:	b510      	push	{r4, lr}
   dbeae:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   dbeb0:	bf9c      	itt	ls
   dbeb2:	340e      	addls	r4, #14
   dbeb4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   dbeb6:	4620      	mov	r0, r4
   dbeb8:	f7ff ff7c 	bl	dbdb4 <pinAvailable>
   dbebc:	b150      	cbz	r0, dbed4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   dbebe:	2103      	movs	r1, #3
   dbec0:	4620      	mov	r0, r4
   dbec2:	f7fc fd2b 	bl	d891c <HAL_Validate_Pin_Function>
   dbec6:	2803      	cmp	r0, #3
   dbec8:	d104      	bne.n	dbed4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   dbeca:	4620      	mov	r0, r4
}
   dbecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   dbed0:	f7fc bd5c 	b.w	d898c <hal_adc_read>
}
   dbed4:	2000      	movs	r0, #0
   dbed6:	bd10      	pop	{r4, pc}

000dbed8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbed8:	4770      	bx	lr

000dbeda <__tcf_1>:
   dbeda:	4770      	bx	lr

000dbedc <_Z17acquireWireBufferv>:
{
   dbedc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   dbede:	2300      	movs	r3, #0
   dbee0:	2520      	movs	r5, #32
   dbee2:	8043      	strh	r3, [r0, #2]
   dbee4:	2314      	movs	r3, #20
{
   dbee6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   dbee8:	8003      	strh	r3, [r0, #0]
   dbeea:	6085      	str	r5, [r0, #8]
   dbeec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dbeee:	4906      	ldr	r1, [pc, #24]	; (dbf08 <_Z17acquireWireBufferv+0x2c>)
   dbef0:	4628      	mov	r0, r5
   dbef2:	f000 f86f 	bl	dbfd4 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dbef6:	4904      	ldr	r1, [pc, #16]	; (dbf08 <_Z17acquireWireBufferv+0x2c>)
	};
   dbef8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   dbefa:	4628      	mov	r0, r5
   dbefc:	f000 f86a 	bl	dbfd4 <_ZnajRKSt9nothrow_t>
	};
   dbf00:	60e0      	str	r0, [r4, #12]
}
   dbf02:	4620      	mov	r0, r4
   dbf04:	bd38      	pop	{r3, r4, r5, pc}
   dbf06:	bf00      	nop
   dbf08:	000ddb2c 	.word	0x000ddb2c

000dbf0c <_Z18acquireWire1Bufferv>:
   dbf0c:	b538      	push	{r3, r4, r5, lr}
   dbf0e:	2300      	movs	r3, #0
   dbf10:	2520      	movs	r5, #32
   dbf12:	8043      	strh	r3, [r0, #2]
   dbf14:	2314      	movs	r3, #20
   dbf16:	4604      	mov	r4, r0
   dbf18:	8003      	strh	r3, [r0, #0]
   dbf1a:	6085      	str	r5, [r0, #8]
   dbf1c:	6105      	str	r5, [r0, #16]
   dbf1e:	4906      	ldr	r1, [pc, #24]	; (dbf38 <_Z18acquireWire1Bufferv+0x2c>)
   dbf20:	4628      	mov	r0, r5
   dbf22:	f000 f857 	bl	dbfd4 <_ZnajRKSt9nothrow_t>
   dbf26:	4904      	ldr	r1, [pc, #16]	; (dbf38 <_Z18acquireWire1Bufferv+0x2c>)
   dbf28:	6060      	str	r0, [r4, #4]
   dbf2a:	4628      	mov	r0, r5
   dbf2c:	f000 f852 	bl	dbfd4 <_ZnajRKSt9nothrow_t>
   dbf30:	60e0      	str	r0, [r4, #12]
   dbf32:	4620      	mov	r0, r4
   dbf34:	bd38      	pop	{r3, r4, r5, pc}
   dbf36:	bf00      	nop
   dbf38:	000ddb2c 	.word	0x000ddb2c

000dbf3c <_Z19__fetch_global_Wirev>:
{
   dbf3c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbf3e:	4d0e      	ldr	r5, [pc, #56]	; (dbf78 <_Z19__fetch_global_Wirev+0x3c>)
   dbf40:	7829      	ldrb	r1, [r5, #0]
   dbf42:	f3bf 8f5b 	dmb	ish
   dbf46:	f011 0401 	ands.w	r4, r1, #1
{
   dbf4a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   dbf4c:	d111      	bne.n	dbf72 <_Z19__fetch_global_Wirev+0x36>
   dbf4e:	4628      	mov	r0, r5
   dbf50:	f7f8 f8b2 	bl	d40b8 <__cxa_guard_acquire>
   dbf54:	b168      	cbz	r0, dbf72 <_Z19__fetch_global_Wirev+0x36>
   dbf56:	a801      	add	r0, sp, #4
   dbf58:	f7ff ffc0 	bl	dbedc <_Z17acquireWireBufferv>
   dbf5c:	aa01      	add	r2, sp, #4
   dbf5e:	4621      	mov	r1, r4
   dbf60:	4806      	ldr	r0, [pc, #24]	; (dbf7c <_Z19__fetch_global_Wirev+0x40>)
   dbf62:	f7fd fd57 	bl	d9a14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dbf66:	4628      	mov	r0, r5
   dbf68:	f7f8 f8ab 	bl	d40c2 <__cxa_guard_release>
   dbf6c:	4804      	ldr	r0, [pc, #16]	; (dbf80 <_Z19__fetch_global_Wirev+0x44>)
   dbf6e:	f000 fca1 	bl	dc8b4 <atexit>
	return wire;
}
   dbf72:	4802      	ldr	r0, [pc, #8]	; (dbf7c <_Z19__fetch_global_Wirev+0x40>)
   dbf74:	b007      	add	sp, #28
   dbf76:	bd30      	pop	{r4, r5, pc}
   dbf78:	2003e724 	.word	0x2003e724
   dbf7c:	2003e72c 	.word	0x2003e72c
   dbf80:	000dbed9 	.word	0x000dbed9

000dbf84 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   dbf84:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dbf86:	4c0e      	ldr	r4, [pc, #56]	; (dbfc0 <_Z20__fetch_global_Wire1v+0x3c>)
   dbf88:	7823      	ldrb	r3, [r4, #0]
   dbf8a:	f3bf 8f5b 	dmb	ish
   dbf8e:	07db      	lsls	r3, r3, #31
{
   dbf90:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   dbf92:	d411      	bmi.n	dbfb8 <_Z20__fetch_global_Wire1v+0x34>
   dbf94:	4620      	mov	r0, r4
   dbf96:	f7f8 f88f 	bl	d40b8 <__cxa_guard_acquire>
   dbf9a:	b168      	cbz	r0, dbfb8 <_Z20__fetch_global_Wire1v+0x34>
   dbf9c:	a801      	add	r0, sp, #4
   dbf9e:	f7ff ffb5 	bl	dbf0c <_Z18acquireWire1Bufferv>
   dbfa2:	aa01      	add	r2, sp, #4
   dbfa4:	2101      	movs	r1, #1
   dbfa6:	4807      	ldr	r0, [pc, #28]	; (dbfc4 <_Z20__fetch_global_Wire1v+0x40>)
   dbfa8:	f7fd fd34 	bl	d9a14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   dbfac:	4620      	mov	r0, r4
   dbfae:	f7f8 f888 	bl	d40c2 <__cxa_guard_release>
   dbfb2:	4805      	ldr	r0, [pc, #20]	; (dbfc8 <_Z20__fetch_global_Wire1v+0x44>)
   dbfb4:	f000 fc7e 	bl	dc8b4 <atexit>
	return wire;
}
   dbfb8:	4802      	ldr	r0, [pc, #8]	; (dbfc4 <_Z20__fetch_global_Wire1v+0x40>)
   dbfba:	b006      	add	sp, #24
   dbfbc:	bd10      	pop	{r4, pc}
   dbfbe:	bf00      	nop
   dbfc0:	2003e728 	.word	0x2003e728
   dbfc4:	2003e740 	.word	0x2003e740
   dbfc8:	000dbedb 	.word	0x000dbedb

000dbfcc <_ZdlPvj>:
   dbfcc:	f7f8 b867 	b.w	d409e <_ZdlPv>

000dbfd0 <_ZnwjRKSt9nothrow_t>:
   dbfd0:	f7f8 b861 	b.w	d4096 <_Znwj>

000dbfd4 <_ZnajRKSt9nothrow_t>:
   dbfd4:	f7f8 b861 	b.w	d409a <_Znaj>

000dbfd8 <_ZSt17__throw_bad_allocv>:
   dbfd8:	b508      	push	{r3, lr}
   dbfda:	f7fc ffa1 	bl	d8f20 <abort>

000dbfde <_ZSt20__throw_length_errorPKc>:
   dbfde:	b508      	push	{r3, lr}
   dbfe0:	f7fc ff9e 	bl	d8f20 <abort>

000dbfe4 <_ZSt25__throw_bad_function_callv>:
   dbfe4:	b508      	push	{r3, lr}
   dbfe6:	f7fc ff9b 	bl	d8f20 <abort>
	...

000dbfec <__aeabi_drsub>:
   dbfec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dbff0:	e002      	b.n	dbff8 <__adddf3>
   dbff2:	bf00      	nop

000dbff4 <__aeabi_dsub>:
   dbff4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dbff8 <__adddf3>:
   dbff8:	b530      	push	{r4, r5, lr}
   dbffa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dbffe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dc002:	ea94 0f05 	teq	r4, r5
   dc006:	bf08      	it	eq
   dc008:	ea90 0f02 	teqeq	r0, r2
   dc00c:	bf1f      	itttt	ne
   dc00e:	ea54 0c00 	orrsne.w	ip, r4, r0
   dc012:	ea55 0c02 	orrsne.w	ip, r5, r2
   dc016:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dc01a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc01e:	f000 80e2 	beq.w	dc1e6 <__adddf3+0x1ee>
   dc022:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dc026:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dc02a:	bfb8      	it	lt
   dc02c:	426d      	neglt	r5, r5
   dc02e:	dd0c      	ble.n	dc04a <__adddf3+0x52>
   dc030:	442c      	add	r4, r5
   dc032:	ea80 0202 	eor.w	r2, r0, r2
   dc036:	ea81 0303 	eor.w	r3, r1, r3
   dc03a:	ea82 0000 	eor.w	r0, r2, r0
   dc03e:	ea83 0101 	eor.w	r1, r3, r1
   dc042:	ea80 0202 	eor.w	r2, r0, r2
   dc046:	ea81 0303 	eor.w	r3, r1, r3
   dc04a:	2d36      	cmp	r5, #54	; 0x36
   dc04c:	bf88      	it	hi
   dc04e:	bd30      	pophi	{r4, r5, pc}
   dc050:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc054:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc058:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dc05c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dc060:	d002      	beq.n	dc068 <__adddf3+0x70>
   dc062:	4240      	negs	r0, r0
   dc064:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc068:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   dc06c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc070:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   dc074:	d002      	beq.n	dc07c <__adddf3+0x84>
   dc076:	4252      	negs	r2, r2
   dc078:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dc07c:	ea94 0f05 	teq	r4, r5
   dc080:	f000 80a7 	beq.w	dc1d2 <__adddf3+0x1da>
   dc084:	f1a4 0401 	sub.w	r4, r4, #1
   dc088:	f1d5 0e20 	rsbs	lr, r5, #32
   dc08c:	db0d      	blt.n	dc0aa <__adddf3+0xb2>
   dc08e:	fa02 fc0e 	lsl.w	ip, r2, lr
   dc092:	fa22 f205 	lsr.w	r2, r2, r5
   dc096:	1880      	adds	r0, r0, r2
   dc098:	f141 0100 	adc.w	r1, r1, #0
   dc09c:	fa03 f20e 	lsl.w	r2, r3, lr
   dc0a0:	1880      	adds	r0, r0, r2
   dc0a2:	fa43 f305 	asr.w	r3, r3, r5
   dc0a6:	4159      	adcs	r1, r3
   dc0a8:	e00e      	b.n	dc0c8 <__adddf3+0xd0>
   dc0aa:	f1a5 0520 	sub.w	r5, r5, #32
   dc0ae:	f10e 0e20 	add.w	lr, lr, #32
   dc0b2:	2a01      	cmp	r2, #1
   dc0b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   dc0b8:	bf28      	it	cs
   dc0ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   dc0be:	fa43 f305 	asr.w	r3, r3, r5
   dc0c2:	18c0      	adds	r0, r0, r3
   dc0c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dc0c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc0cc:	d507      	bpl.n	dc0de <__adddf3+0xe6>
   dc0ce:	f04f 0e00 	mov.w	lr, #0
   dc0d2:	f1dc 0c00 	rsbs	ip, ip, #0
   dc0d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   dc0da:	eb6e 0101 	sbc.w	r1, lr, r1
   dc0de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dc0e2:	d31b      	bcc.n	dc11c <__adddf3+0x124>
   dc0e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dc0e8:	d30c      	bcc.n	dc104 <__adddf3+0x10c>
   dc0ea:	0849      	lsrs	r1, r1, #1
   dc0ec:	ea5f 0030 	movs.w	r0, r0, rrx
   dc0f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dc0f4:	f104 0401 	add.w	r4, r4, #1
   dc0f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dc0fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dc100:	f080 809a 	bcs.w	dc238 <__adddf3+0x240>
   dc104:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dc108:	bf08      	it	eq
   dc10a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc10e:	f150 0000 	adcs.w	r0, r0, #0
   dc112:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc116:	ea41 0105 	orr.w	r1, r1, r5
   dc11a:	bd30      	pop	{r4, r5, pc}
   dc11c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dc120:	4140      	adcs	r0, r0
   dc122:	eb41 0101 	adc.w	r1, r1, r1
   dc126:	3c01      	subs	r4, #1
   dc128:	bf28      	it	cs
   dc12a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dc12e:	d2e9      	bcs.n	dc104 <__adddf3+0x10c>
   dc130:	f091 0f00 	teq	r1, #0
   dc134:	bf04      	itt	eq
   dc136:	4601      	moveq	r1, r0
   dc138:	2000      	moveq	r0, #0
   dc13a:	fab1 f381 	clz	r3, r1
   dc13e:	bf08      	it	eq
   dc140:	3320      	addeq	r3, #32
   dc142:	f1a3 030b 	sub.w	r3, r3, #11
   dc146:	f1b3 0220 	subs.w	r2, r3, #32
   dc14a:	da0c      	bge.n	dc166 <__adddf3+0x16e>
   dc14c:	320c      	adds	r2, #12
   dc14e:	dd08      	ble.n	dc162 <__adddf3+0x16a>
   dc150:	f102 0c14 	add.w	ip, r2, #20
   dc154:	f1c2 020c 	rsb	r2, r2, #12
   dc158:	fa01 f00c 	lsl.w	r0, r1, ip
   dc15c:	fa21 f102 	lsr.w	r1, r1, r2
   dc160:	e00c      	b.n	dc17c <__adddf3+0x184>
   dc162:	f102 0214 	add.w	r2, r2, #20
   dc166:	bfd8      	it	le
   dc168:	f1c2 0c20 	rsble	ip, r2, #32
   dc16c:	fa01 f102 	lsl.w	r1, r1, r2
   dc170:	fa20 fc0c 	lsr.w	ip, r0, ip
   dc174:	bfdc      	itt	le
   dc176:	ea41 010c 	orrle.w	r1, r1, ip
   dc17a:	4090      	lslle	r0, r2
   dc17c:	1ae4      	subs	r4, r4, r3
   dc17e:	bfa2      	ittt	ge
   dc180:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dc184:	4329      	orrge	r1, r5
   dc186:	bd30      	popge	{r4, r5, pc}
   dc188:	ea6f 0404 	mvn.w	r4, r4
   dc18c:	3c1f      	subs	r4, #31
   dc18e:	da1c      	bge.n	dc1ca <__adddf3+0x1d2>
   dc190:	340c      	adds	r4, #12
   dc192:	dc0e      	bgt.n	dc1b2 <__adddf3+0x1ba>
   dc194:	f104 0414 	add.w	r4, r4, #20
   dc198:	f1c4 0220 	rsb	r2, r4, #32
   dc19c:	fa20 f004 	lsr.w	r0, r0, r4
   dc1a0:	fa01 f302 	lsl.w	r3, r1, r2
   dc1a4:	ea40 0003 	orr.w	r0, r0, r3
   dc1a8:	fa21 f304 	lsr.w	r3, r1, r4
   dc1ac:	ea45 0103 	orr.w	r1, r5, r3
   dc1b0:	bd30      	pop	{r4, r5, pc}
   dc1b2:	f1c4 040c 	rsb	r4, r4, #12
   dc1b6:	f1c4 0220 	rsb	r2, r4, #32
   dc1ba:	fa20 f002 	lsr.w	r0, r0, r2
   dc1be:	fa01 f304 	lsl.w	r3, r1, r4
   dc1c2:	ea40 0003 	orr.w	r0, r0, r3
   dc1c6:	4629      	mov	r1, r5
   dc1c8:	bd30      	pop	{r4, r5, pc}
   dc1ca:	fa21 f004 	lsr.w	r0, r1, r4
   dc1ce:	4629      	mov	r1, r5
   dc1d0:	bd30      	pop	{r4, r5, pc}
   dc1d2:	f094 0f00 	teq	r4, #0
   dc1d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dc1da:	bf06      	itte	eq
   dc1dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dc1e0:	3401      	addeq	r4, #1
   dc1e2:	3d01      	subne	r5, #1
   dc1e4:	e74e      	b.n	dc084 <__adddf3+0x8c>
   dc1e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc1ea:	bf18      	it	ne
   dc1ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dc1f0:	d029      	beq.n	dc246 <__adddf3+0x24e>
   dc1f2:	ea94 0f05 	teq	r4, r5
   dc1f6:	bf08      	it	eq
   dc1f8:	ea90 0f02 	teqeq	r0, r2
   dc1fc:	d005      	beq.n	dc20a <__adddf3+0x212>
   dc1fe:	ea54 0c00 	orrs.w	ip, r4, r0
   dc202:	bf04      	itt	eq
   dc204:	4619      	moveq	r1, r3
   dc206:	4610      	moveq	r0, r2
   dc208:	bd30      	pop	{r4, r5, pc}
   dc20a:	ea91 0f03 	teq	r1, r3
   dc20e:	bf1e      	ittt	ne
   dc210:	2100      	movne	r1, #0
   dc212:	2000      	movne	r0, #0
   dc214:	bd30      	popne	{r4, r5, pc}
   dc216:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dc21a:	d105      	bne.n	dc228 <__adddf3+0x230>
   dc21c:	0040      	lsls	r0, r0, #1
   dc21e:	4149      	adcs	r1, r1
   dc220:	bf28      	it	cs
   dc222:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dc226:	bd30      	pop	{r4, r5, pc}
   dc228:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dc22c:	bf3c      	itt	cc
   dc22e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dc232:	bd30      	popcc	{r4, r5, pc}
   dc234:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc238:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dc23c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc240:	f04f 0000 	mov.w	r0, #0
   dc244:	bd30      	pop	{r4, r5, pc}
   dc246:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dc24a:	bf1a      	itte	ne
   dc24c:	4619      	movne	r1, r3
   dc24e:	4610      	movne	r0, r2
   dc250:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dc254:	bf1c      	itt	ne
   dc256:	460b      	movne	r3, r1
   dc258:	4602      	movne	r2, r0
   dc25a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc25e:	bf06      	itte	eq
   dc260:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dc264:	ea91 0f03 	teqeq	r1, r3
   dc268:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dc26c:	bd30      	pop	{r4, r5, pc}
   dc26e:	bf00      	nop

000dc270 <__aeabi_ui2d>:
   dc270:	f090 0f00 	teq	r0, #0
   dc274:	bf04      	itt	eq
   dc276:	2100      	moveq	r1, #0
   dc278:	4770      	bxeq	lr
   dc27a:	b530      	push	{r4, r5, lr}
   dc27c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc280:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc284:	f04f 0500 	mov.w	r5, #0
   dc288:	f04f 0100 	mov.w	r1, #0
   dc28c:	e750      	b.n	dc130 <__adddf3+0x138>
   dc28e:	bf00      	nop

000dc290 <__aeabi_i2d>:
   dc290:	f090 0f00 	teq	r0, #0
   dc294:	bf04      	itt	eq
   dc296:	2100      	moveq	r1, #0
   dc298:	4770      	bxeq	lr
   dc29a:	b530      	push	{r4, r5, lr}
   dc29c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc2a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc2a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dc2a8:	bf48      	it	mi
   dc2aa:	4240      	negmi	r0, r0
   dc2ac:	f04f 0100 	mov.w	r1, #0
   dc2b0:	e73e      	b.n	dc130 <__adddf3+0x138>
   dc2b2:	bf00      	nop

000dc2b4 <__aeabi_f2d>:
   dc2b4:	0042      	lsls	r2, r0, #1
   dc2b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dc2ba:	ea4f 0131 	mov.w	r1, r1, rrx
   dc2be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dc2c2:	bf1f      	itttt	ne
   dc2c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dc2c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dc2cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dc2d0:	4770      	bxne	lr
   dc2d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dc2d6:	bf08      	it	eq
   dc2d8:	4770      	bxeq	lr
   dc2da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dc2de:	bf04      	itt	eq
   dc2e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dc2e4:	4770      	bxeq	lr
   dc2e6:	b530      	push	{r4, r5, lr}
   dc2e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   dc2ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dc2f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc2f4:	e71c      	b.n	dc130 <__adddf3+0x138>
   dc2f6:	bf00      	nop

000dc2f8 <__aeabi_ul2d>:
   dc2f8:	ea50 0201 	orrs.w	r2, r0, r1
   dc2fc:	bf08      	it	eq
   dc2fe:	4770      	bxeq	lr
   dc300:	b530      	push	{r4, r5, lr}
   dc302:	f04f 0500 	mov.w	r5, #0
   dc306:	e00a      	b.n	dc31e <__aeabi_l2d+0x16>

000dc308 <__aeabi_l2d>:
   dc308:	ea50 0201 	orrs.w	r2, r0, r1
   dc30c:	bf08      	it	eq
   dc30e:	4770      	bxeq	lr
   dc310:	b530      	push	{r4, r5, lr}
   dc312:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dc316:	d502      	bpl.n	dc31e <__aeabi_l2d+0x16>
   dc318:	4240      	negs	r0, r0
   dc31a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dc31e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dc322:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dc326:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dc32a:	f43f aed8 	beq.w	dc0de <__adddf3+0xe6>
   dc32e:	f04f 0203 	mov.w	r2, #3
   dc332:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc336:	bf18      	it	ne
   dc338:	3203      	addne	r2, #3
   dc33a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dc33e:	bf18      	it	ne
   dc340:	3203      	addne	r2, #3
   dc342:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dc346:	f1c2 0320 	rsb	r3, r2, #32
   dc34a:	fa00 fc03 	lsl.w	ip, r0, r3
   dc34e:	fa20 f002 	lsr.w	r0, r0, r2
   dc352:	fa01 fe03 	lsl.w	lr, r1, r3
   dc356:	ea40 000e 	orr.w	r0, r0, lr
   dc35a:	fa21 f102 	lsr.w	r1, r1, r2
   dc35e:	4414      	add	r4, r2
   dc360:	e6bd      	b.n	dc0de <__adddf3+0xe6>
   dc362:	bf00      	nop

000dc364 <__aeabi_dmul>:
   dc364:	b570      	push	{r4, r5, r6, lr}
   dc366:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc36a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc36e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc372:	bf1d      	ittte	ne
   dc374:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc378:	ea94 0f0c 	teqne	r4, ip
   dc37c:	ea95 0f0c 	teqne	r5, ip
   dc380:	f000 f8de 	bleq	dc540 <__aeabi_dmul+0x1dc>
   dc384:	442c      	add	r4, r5
   dc386:	ea81 0603 	eor.w	r6, r1, r3
   dc38a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dc38e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dc392:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dc396:	bf18      	it	ne
   dc398:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dc39c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc3a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dc3a4:	d038      	beq.n	dc418 <__aeabi_dmul+0xb4>
   dc3a6:	fba0 ce02 	umull	ip, lr, r0, r2
   dc3aa:	f04f 0500 	mov.w	r5, #0
   dc3ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   dc3b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dc3b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   dc3ba:	f04f 0600 	mov.w	r6, #0
   dc3be:	fbe1 5603 	umlal	r5, r6, r1, r3
   dc3c2:	f09c 0f00 	teq	ip, #0
   dc3c6:	bf18      	it	ne
   dc3c8:	f04e 0e01 	orrne.w	lr, lr, #1
   dc3cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dc3d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dc3d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dc3d8:	d204      	bcs.n	dc3e4 <__aeabi_dmul+0x80>
   dc3da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dc3de:	416d      	adcs	r5, r5
   dc3e0:	eb46 0606 	adc.w	r6, r6, r6
   dc3e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dc3e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dc3ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dc3f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dc3f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dc3f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc3fc:	bf88      	it	hi
   dc3fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc402:	d81e      	bhi.n	dc442 <__aeabi_dmul+0xde>
   dc404:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dc408:	bf08      	it	eq
   dc40a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dc40e:	f150 0000 	adcs.w	r0, r0, #0
   dc412:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc416:	bd70      	pop	{r4, r5, r6, pc}
   dc418:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dc41c:	ea46 0101 	orr.w	r1, r6, r1
   dc420:	ea40 0002 	orr.w	r0, r0, r2
   dc424:	ea81 0103 	eor.w	r1, r1, r3
   dc428:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dc42c:	bfc2      	ittt	gt
   dc42e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc432:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc436:	bd70      	popgt	{r4, r5, r6, pc}
   dc438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc43c:	f04f 0e00 	mov.w	lr, #0
   dc440:	3c01      	subs	r4, #1
   dc442:	f300 80ab 	bgt.w	dc59c <__aeabi_dmul+0x238>
   dc446:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dc44a:	bfde      	ittt	le
   dc44c:	2000      	movle	r0, #0
   dc44e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dc452:	bd70      	pople	{r4, r5, r6, pc}
   dc454:	f1c4 0400 	rsb	r4, r4, #0
   dc458:	3c20      	subs	r4, #32
   dc45a:	da35      	bge.n	dc4c8 <__aeabi_dmul+0x164>
   dc45c:	340c      	adds	r4, #12
   dc45e:	dc1b      	bgt.n	dc498 <__aeabi_dmul+0x134>
   dc460:	f104 0414 	add.w	r4, r4, #20
   dc464:	f1c4 0520 	rsb	r5, r4, #32
   dc468:	fa00 f305 	lsl.w	r3, r0, r5
   dc46c:	fa20 f004 	lsr.w	r0, r0, r4
   dc470:	fa01 f205 	lsl.w	r2, r1, r5
   dc474:	ea40 0002 	orr.w	r0, r0, r2
   dc478:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dc47c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dc480:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc484:	fa21 f604 	lsr.w	r6, r1, r4
   dc488:	eb42 0106 	adc.w	r1, r2, r6
   dc48c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc490:	bf08      	it	eq
   dc492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc496:	bd70      	pop	{r4, r5, r6, pc}
   dc498:	f1c4 040c 	rsb	r4, r4, #12
   dc49c:	f1c4 0520 	rsb	r5, r4, #32
   dc4a0:	fa00 f304 	lsl.w	r3, r0, r4
   dc4a4:	fa20 f005 	lsr.w	r0, r0, r5
   dc4a8:	fa01 f204 	lsl.w	r2, r1, r4
   dc4ac:	ea40 0002 	orr.w	r0, r0, r2
   dc4b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc4b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dc4b8:	f141 0100 	adc.w	r1, r1, #0
   dc4bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc4c0:	bf08      	it	eq
   dc4c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc4c6:	bd70      	pop	{r4, r5, r6, pc}
   dc4c8:	f1c4 0520 	rsb	r5, r4, #32
   dc4cc:	fa00 f205 	lsl.w	r2, r0, r5
   dc4d0:	ea4e 0e02 	orr.w	lr, lr, r2
   dc4d4:	fa20 f304 	lsr.w	r3, r0, r4
   dc4d8:	fa01 f205 	lsl.w	r2, r1, r5
   dc4dc:	ea43 0302 	orr.w	r3, r3, r2
   dc4e0:	fa21 f004 	lsr.w	r0, r1, r4
   dc4e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc4e8:	fa21 f204 	lsr.w	r2, r1, r4
   dc4ec:	ea20 0002 	bic.w	r0, r0, r2
   dc4f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dc4f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dc4f8:	bf08      	it	eq
   dc4fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dc4fe:	bd70      	pop	{r4, r5, r6, pc}
   dc500:	f094 0f00 	teq	r4, #0
   dc504:	d10f      	bne.n	dc526 <__aeabi_dmul+0x1c2>
   dc506:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dc50a:	0040      	lsls	r0, r0, #1
   dc50c:	eb41 0101 	adc.w	r1, r1, r1
   dc510:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc514:	bf08      	it	eq
   dc516:	3c01      	subeq	r4, #1
   dc518:	d0f7      	beq.n	dc50a <__aeabi_dmul+0x1a6>
   dc51a:	ea41 0106 	orr.w	r1, r1, r6
   dc51e:	f095 0f00 	teq	r5, #0
   dc522:	bf18      	it	ne
   dc524:	4770      	bxne	lr
   dc526:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dc52a:	0052      	lsls	r2, r2, #1
   dc52c:	eb43 0303 	adc.w	r3, r3, r3
   dc530:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dc534:	bf08      	it	eq
   dc536:	3d01      	subeq	r5, #1
   dc538:	d0f7      	beq.n	dc52a <__aeabi_dmul+0x1c6>
   dc53a:	ea43 0306 	orr.w	r3, r3, r6
   dc53e:	4770      	bx	lr
   dc540:	ea94 0f0c 	teq	r4, ip
   dc544:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc548:	bf18      	it	ne
   dc54a:	ea95 0f0c 	teqne	r5, ip
   dc54e:	d00c      	beq.n	dc56a <__aeabi_dmul+0x206>
   dc550:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc554:	bf18      	it	ne
   dc556:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc55a:	d1d1      	bne.n	dc500 <__aeabi_dmul+0x19c>
   dc55c:	ea81 0103 	eor.w	r1, r1, r3
   dc560:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc564:	f04f 0000 	mov.w	r0, #0
   dc568:	bd70      	pop	{r4, r5, r6, pc}
   dc56a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc56e:	bf06      	itte	eq
   dc570:	4610      	moveq	r0, r2
   dc572:	4619      	moveq	r1, r3
   dc574:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc578:	d019      	beq.n	dc5ae <__aeabi_dmul+0x24a>
   dc57a:	ea94 0f0c 	teq	r4, ip
   dc57e:	d102      	bne.n	dc586 <__aeabi_dmul+0x222>
   dc580:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dc584:	d113      	bne.n	dc5ae <__aeabi_dmul+0x24a>
   dc586:	ea95 0f0c 	teq	r5, ip
   dc58a:	d105      	bne.n	dc598 <__aeabi_dmul+0x234>
   dc58c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dc590:	bf1c      	itt	ne
   dc592:	4610      	movne	r0, r2
   dc594:	4619      	movne	r1, r3
   dc596:	d10a      	bne.n	dc5ae <__aeabi_dmul+0x24a>
   dc598:	ea81 0103 	eor.w	r1, r1, r3
   dc59c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dc5a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc5a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dc5a8:	f04f 0000 	mov.w	r0, #0
   dc5ac:	bd70      	pop	{r4, r5, r6, pc}
   dc5ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dc5b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dc5b6:	bd70      	pop	{r4, r5, r6, pc}

000dc5b8 <__aeabi_ddiv>:
   dc5b8:	b570      	push	{r4, r5, r6, lr}
   dc5ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dc5be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dc5c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dc5c6:	bf1d      	ittte	ne
   dc5c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dc5cc:	ea94 0f0c 	teqne	r4, ip
   dc5d0:	ea95 0f0c 	teqne	r5, ip
   dc5d4:	f000 f8a7 	bleq	dc726 <__aeabi_ddiv+0x16e>
   dc5d8:	eba4 0405 	sub.w	r4, r4, r5
   dc5dc:	ea81 0e03 	eor.w	lr, r1, r3
   dc5e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc5e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dc5e8:	f000 8088 	beq.w	dc6fc <__aeabi_ddiv+0x144>
   dc5ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dc5f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dc5f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dc5f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dc5fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dc600:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dc604:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dc608:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dc60c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dc610:	429d      	cmp	r5, r3
   dc612:	bf08      	it	eq
   dc614:	4296      	cmpeq	r6, r2
   dc616:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dc61a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dc61e:	d202      	bcs.n	dc626 <__aeabi_ddiv+0x6e>
   dc620:	085b      	lsrs	r3, r3, #1
   dc622:	ea4f 0232 	mov.w	r2, r2, rrx
   dc626:	1ab6      	subs	r6, r6, r2
   dc628:	eb65 0503 	sbc.w	r5, r5, r3
   dc62c:	085b      	lsrs	r3, r3, #1
   dc62e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc632:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dc636:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dc63a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc63e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc642:	bf22      	ittt	cs
   dc644:	1ab6      	subcs	r6, r6, r2
   dc646:	4675      	movcs	r5, lr
   dc648:	ea40 000c 	orrcs.w	r0, r0, ip
   dc64c:	085b      	lsrs	r3, r3, #1
   dc64e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc652:	ebb6 0e02 	subs.w	lr, r6, r2
   dc656:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc65a:	bf22      	ittt	cs
   dc65c:	1ab6      	subcs	r6, r6, r2
   dc65e:	4675      	movcs	r5, lr
   dc660:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dc664:	085b      	lsrs	r3, r3, #1
   dc666:	ea4f 0232 	mov.w	r2, r2, rrx
   dc66a:	ebb6 0e02 	subs.w	lr, r6, r2
   dc66e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc672:	bf22      	ittt	cs
   dc674:	1ab6      	subcs	r6, r6, r2
   dc676:	4675      	movcs	r5, lr
   dc678:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dc67c:	085b      	lsrs	r3, r3, #1
   dc67e:	ea4f 0232 	mov.w	r2, r2, rrx
   dc682:	ebb6 0e02 	subs.w	lr, r6, r2
   dc686:	eb75 0e03 	sbcs.w	lr, r5, r3
   dc68a:	bf22      	ittt	cs
   dc68c:	1ab6      	subcs	r6, r6, r2
   dc68e:	4675      	movcs	r5, lr
   dc690:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dc694:	ea55 0e06 	orrs.w	lr, r5, r6
   dc698:	d018      	beq.n	dc6cc <__aeabi_ddiv+0x114>
   dc69a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dc69e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dc6a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dc6a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dc6aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dc6ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dc6b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dc6b6:	d1c0      	bne.n	dc63a <__aeabi_ddiv+0x82>
   dc6b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc6bc:	d10b      	bne.n	dc6d6 <__aeabi_ddiv+0x11e>
   dc6be:	ea41 0100 	orr.w	r1, r1, r0
   dc6c2:	f04f 0000 	mov.w	r0, #0
   dc6c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dc6ca:	e7b6      	b.n	dc63a <__aeabi_ddiv+0x82>
   dc6cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dc6d0:	bf04      	itt	eq
   dc6d2:	4301      	orreq	r1, r0
   dc6d4:	2000      	moveq	r0, #0
   dc6d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dc6da:	bf88      	it	hi
   dc6dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dc6e0:	f63f aeaf 	bhi.w	dc442 <__aeabi_dmul+0xde>
   dc6e4:	ebb5 0c03 	subs.w	ip, r5, r3
   dc6e8:	bf04      	itt	eq
   dc6ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   dc6ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dc6f2:	f150 0000 	adcs.w	r0, r0, #0
   dc6f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dc6fa:	bd70      	pop	{r4, r5, r6, pc}
   dc6fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dc700:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dc704:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dc708:	bfc2      	ittt	gt
   dc70a:	ebd4 050c 	rsbsgt	r5, r4, ip
   dc70e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dc712:	bd70      	popgt	{r4, r5, r6, pc}
   dc714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc718:	f04f 0e00 	mov.w	lr, #0
   dc71c:	3c01      	subs	r4, #1
   dc71e:	e690      	b.n	dc442 <__aeabi_dmul+0xde>
   dc720:	ea45 0e06 	orr.w	lr, r5, r6
   dc724:	e68d      	b.n	dc442 <__aeabi_dmul+0xde>
   dc726:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dc72a:	ea94 0f0c 	teq	r4, ip
   dc72e:	bf08      	it	eq
   dc730:	ea95 0f0c 	teqeq	r5, ip
   dc734:	f43f af3b 	beq.w	dc5ae <__aeabi_dmul+0x24a>
   dc738:	ea94 0f0c 	teq	r4, ip
   dc73c:	d10a      	bne.n	dc754 <__aeabi_ddiv+0x19c>
   dc73e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dc742:	f47f af34 	bne.w	dc5ae <__aeabi_dmul+0x24a>
   dc746:	ea95 0f0c 	teq	r5, ip
   dc74a:	f47f af25 	bne.w	dc598 <__aeabi_dmul+0x234>
   dc74e:	4610      	mov	r0, r2
   dc750:	4619      	mov	r1, r3
   dc752:	e72c      	b.n	dc5ae <__aeabi_dmul+0x24a>
   dc754:	ea95 0f0c 	teq	r5, ip
   dc758:	d106      	bne.n	dc768 <__aeabi_ddiv+0x1b0>
   dc75a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dc75e:	f43f aefd 	beq.w	dc55c <__aeabi_dmul+0x1f8>
   dc762:	4610      	mov	r0, r2
   dc764:	4619      	mov	r1, r3
   dc766:	e722      	b.n	dc5ae <__aeabi_dmul+0x24a>
   dc768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc76c:	bf18      	it	ne
   dc76e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc772:	f47f aec5 	bne.w	dc500 <__aeabi_dmul+0x19c>
   dc776:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc77a:	f47f af0d 	bne.w	dc598 <__aeabi_dmul+0x234>
   dc77e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc782:	f47f aeeb 	bne.w	dc55c <__aeabi_dmul+0x1f8>
   dc786:	e712      	b.n	dc5ae <__aeabi_dmul+0x24a>

000dc788 <__aeabi_d2uiz>:
   dc788:	004a      	lsls	r2, r1, #1
   dc78a:	d211      	bcs.n	dc7b0 <__aeabi_d2uiz+0x28>
   dc78c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc790:	d211      	bcs.n	dc7b6 <__aeabi_d2uiz+0x2e>
   dc792:	d50d      	bpl.n	dc7b0 <__aeabi_d2uiz+0x28>
   dc794:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc798:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc79c:	d40e      	bmi.n	dc7bc <__aeabi_d2uiz+0x34>
   dc79e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc7a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc7a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc7aa:	fa23 f002 	lsr.w	r0, r3, r2
   dc7ae:	4770      	bx	lr
   dc7b0:	f04f 0000 	mov.w	r0, #0
   dc7b4:	4770      	bx	lr
   dc7b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc7ba:	d102      	bne.n	dc7c2 <__aeabi_d2uiz+0x3a>
   dc7bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc7c0:	4770      	bx	lr
   dc7c2:	f04f 0000 	mov.w	r0, #0
   dc7c6:	4770      	bx	lr

000dc7c8 <__aeabi_d2f>:
   dc7c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc7cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc7d0:	bf24      	itt	cs
   dc7d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc7d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc7da:	d90d      	bls.n	dc7f8 <__aeabi_d2f+0x30>
   dc7dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc7e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc7e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc7e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc7ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc7f0:	bf08      	it	eq
   dc7f2:	f020 0001 	biceq.w	r0, r0, #1
   dc7f6:	4770      	bx	lr
   dc7f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc7fc:	d121      	bne.n	dc842 <__aeabi_d2f+0x7a>
   dc7fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc802:	bfbc      	itt	lt
   dc804:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc808:	4770      	bxlt	lr
   dc80a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc80e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc812:	f1c2 0218 	rsb	r2, r2, #24
   dc816:	f1c2 0c20 	rsb	ip, r2, #32
   dc81a:	fa10 f30c 	lsls.w	r3, r0, ip
   dc81e:	fa20 f002 	lsr.w	r0, r0, r2
   dc822:	bf18      	it	ne
   dc824:	f040 0001 	orrne.w	r0, r0, #1
   dc828:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc82c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc830:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc834:	ea40 000c 	orr.w	r0, r0, ip
   dc838:	fa23 f302 	lsr.w	r3, r3, r2
   dc83c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc840:	e7cc      	b.n	dc7dc <__aeabi_d2f+0x14>
   dc842:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc846:	d107      	bne.n	dc858 <__aeabi_d2f+0x90>
   dc848:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc84c:	bf1e      	ittt	ne
   dc84e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc852:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc856:	4770      	bxne	lr
   dc858:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc85c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc860:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc864:	4770      	bx	lr
   dc866:	bf00      	nop

000dc868 <asctime_r>:
   dc868:	b510      	push	{r4, lr}
   dc86a:	460c      	mov	r4, r1
   dc86c:	6941      	ldr	r1, [r0, #20]
   dc86e:	6903      	ldr	r3, [r0, #16]
   dc870:	6982      	ldr	r2, [r0, #24]
   dc872:	b086      	sub	sp, #24
   dc874:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   dc878:	9104      	str	r1, [sp, #16]
   dc87a:	6801      	ldr	r1, [r0, #0]
   dc87c:	9103      	str	r1, [sp, #12]
   dc87e:	6841      	ldr	r1, [r0, #4]
   dc880:	9102      	str	r1, [sp, #8]
   dc882:	6881      	ldr	r1, [r0, #8]
   dc884:	9101      	str	r1, [sp, #4]
   dc886:	68c1      	ldr	r1, [r0, #12]
   dc888:	9100      	str	r1, [sp, #0]
   dc88a:	4907      	ldr	r1, [pc, #28]	; (dc8a8 <asctime_r+0x40>)
   dc88c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   dc890:	440b      	add	r3, r1
   dc892:	4906      	ldr	r1, [pc, #24]	; (dc8ac <asctime_r+0x44>)
   dc894:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   dc898:	440a      	add	r2, r1
   dc89a:	4620      	mov	r0, r4
   dc89c:	4904      	ldr	r1, [pc, #16]	; (dc8b0 <asctime_r+0x48>)
   dc89e:	f7fc fb1f 	bl	d8ee0 <siprintf>
   dc8a2:	4620      	mov	r0, r4
   dc8a4:	b006      	add	sp, #24
   dc8a6:	bd10      	pop	{r4, pc}
   dc8a8:	000ddb62 	.word	0x000ddb62
   dc8ac:	000ddb4d 	.word	0x000ddb4d
   dc8b0:	000ddb2d 	.word	0x000ddb2d

000dc8b4 <atexit>:
   dc8b4:	2300      	movs	r3, #0
   dc8b6:	4601      	mov	r1, r0
   dc8b8:	461a      	mov	r2, r3
   dc8ba:	4618      	mov	r0, r3
   dc8bc:	f000 b9d2 	b.w	dcc64 <__register_exitproc>

000dc8c0 <gmtime>:
   dc8c0:	b538      	push	{r3, r4, r5, lr}
   dc8c2:	4b07      	ldr	r3, [pc, #28]	; (dc8e0 <gmtime+0x20>)
   dc8c4:	681d      	ldr	r5, [r3, #0]
   dc8c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   dc8c8:	4604      	mov	r4, r0
   dc8ca:	b91b      	cbnz	r3, dc8d4 <gmtime+0x14>
   dc8cc:	2024      	movs	r0, #36	; 0x24
   dc8ce:	f7fc faef 	bl	d8eb0 <malloc>
   dc8d2:	63e8      	str	r0, [r5, #60]	; 0x3c
   dc8d4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   dc8d6:	4620      	mov	r0, r4
   dc8d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dc8dc:	f7fc bb48 	b.w	d8f70 <gmtime_r>
   dc8e0:	2003dcf8 	.word	0x2003dcf8

000dc8e4 <memcpy>:
   dc8e4:	440a      	add	r2, r1
   dc8e6:	4291      	cmp	r1, r2
   dc8e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   dc8ec:	d100      	bne.n	dc8f0 <memcpy+0xc>
   dc8ee:	4770      	bx	lr
   dc8f0:	b510      	push	{r4, lr}
   dc8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc8fa:	4291      	cmp	r1, r2
   dc8fc:	d1f9      	bne.n	dc8f2 <memcpy+0xe>
   dc8fe:	bd10      	pop	{r4, pc}

000dc900 <memmove>:
   dc900:	4288      	cmp	r0, r1
   dc902:	b510      	push	{r4, lr}
   dc904:	eb01 0402 	add.w	r4, r1, r2
   dc908:	d902      	bls.n	dc910 <memmove+0x10>
   dc90a:	4284      	cmp	r4, r0
   dc90c:	4623      	mov	r3, r4
   dc90e:	d807      	bhi.n	dc920 <memmove+0x20>
   dc910:	1e43      	subs	r3, r0, #1
   dc912:	42a1      	cmp	r1, r4
   dc914:	d008      	beq.n	dc928 <memmove+0x28>
   dc916:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc91a:	f803 2f01 	strb.w	r2, [r3, #1]!
   dc91e:	e7f8      	b.n	dc912 <memmove+0x12>
   dc920:	4402      	add	r2, r0
   dc922:	4601      	mov	r1, r0
   dc924:	428a      	cmp	r2, r1
   dc926:	d100      	bne.n	dc92a <memmove+0x2a>
   dc928:	bd10      	pop	{r4, pc}
   dc92a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   dc92e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   dc932:	e7f7      	b.n	dc924 <memmove+0x24>

000dc934 <memset>:
   dc934:	4402      	add	r2, r0
   dc936:	4603      	mov	r3, r0
   dc938:	4293      	cmp	r3, r2
   dc93a:	d100      	bne.n	dc93e <memset+0xa>
   dc93c:	4770      	bx	lr
   dc93e:	f803 1b01 	strb.w	r1, [r3], #1
   dc942:	e7f9      	b.n	dc938 <memset+0x4>

000dc944 <srand>:
   dc944:	b538      	push	{r3, r4, r5, lr}
   dc946:	4b0d      	ldr	r3, [pc, #52]	; (dc97c <srand+0x38>)
   dc948:	681d      	ldr	r5, [r3, #0]
   dc94a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc94c:	4604      	mov	r4, r0
   dc94e:	b97b      	cbnz	r3, dc970 <srand+0x2c>
   dc950:	2018      	movs	r0, #24
   dc952:	f7fc faad 	bl	d8eb0 <malloc>
   dc956:	4a0a      	ldr	r2, [pc, #40]	; (dc980 <srand+0x3c>)
   dc958:	4b0a      	ldr	r3, [pc, #40]	; (dc984 <srand+0x40>)
   dc95a:	63a8      	str	r0, [r5, #56]	; 0x38
   dc95c:	e9c0 2300 	strd	r2, r3, [r0]
   dc960:	4b09      	ldr	r3, [pc, #36]	; (dc988 <srand+0x44>)
   dc962:	6083      	str	r3, [r0, #8]
   dc964:	230b      	movs	r3, #11
   dc966:	8183      	strh	r3, [r0, #12]
   dc968:	2201      	movs	r2, #1
   dc96a:	2300      	movs	r3, #0
   dc96c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc970:	6bab      	ldr	r3, [r5, #56]	; 0x38
   dc972:	2200      	movs	r2, #0
   dc974:	611c      	str	r4, [r3, #16]
   dc976:	615a      	str	r2, [r3, #20]
   dc978:	bd38      	pop	{r3, r4, r5, pc}
   dc97a:	bf00      	nop
   dc97c:	2003dcf8 	.word	0x2003dcf8
   dc980:	abcd330e 	.word	0xabcd330e
   dc984:	e66d1234 	.word	0xe66d1234
   dc988:	0005deec 	.word	0x0005deec

000dc98c <rand>:
   dc98c:	4b13      	ldr	r3, [pc, #76]	; (dc9dc <rand+0x50>)
   dc98e:	b510      	push	{r4, lr}
   dc990:	681c      	ldr	r4, [r3, #0]
   dc992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dc994:	b97b      	cbnz	r3, dc9b6 <rand+0x2a>
   dc996:	2018      	movs	r0, #24
   dc998:	f7fc fa8a 	bl	d8eb0 <malloc>
   dc99c:	4a10      	ldr	r2, [pc, #64]	; (dc9e0 <rand+0x54>)
   dc99e:	4b11      	ldr	r3, [pc, #68]	; (dc9e4 <rand+0x58>)
   dc9a0:	63a0      	str	r0, [r4, #56]	; 0x38
   dc9a2:	e9c0 2300 	strd	r2, r3, [r0]
   dc9a6:	4b10      	ldr	r3, [pc, #64]	; (dc9e8 <rand+0x5c>)
   dc9a8:	6083      	str	r3, [r0, #8]
   dc9aa:	230b      	movs	r3, #11
   dc9ac:	8183      	strh	r3, [r0, #12]
   dc9ae:	2201      	movs	r2, #1
   dc9b0:	2300      	movs	r3, #0
   dc9b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc9b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   dc9b8:	480c      	ldr	r0, [pc, #48]	; (dc9ec <rand+0x60>)
   dc9ba:	690a      	ldr	r2, [r1, #16]
   dc9bc:	694b      	ldr	r3, [r1, #20]
   dc9be:	4c0c      	ldr	r4, [pc, #48]	; (dc9f0 <rand+0x64>)
   dc9c0:	4350      	muls	r0, r2
   dc9c2:	fb04 0003 	mla	r0, r4, r3, r0
   dc9c6:	fba2 3404 	umull	r3, r4, r2, r4
   dc9ca:	1c5a      	adds	r2, r3, #1
   dc9cc:	4404      	add	r4, r0
   dc9ce:	f144 0000 	adc.w	r0, r4, #0
   dc9d2:	e9c1 2004 	strd	r2, r0, [r1, #16]
   dc9d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   dc9da:	bd10      	pop	{r4, pc}
   dc9dc:	2003dcf8 	.word	0x2003dcf8
   dc9e0:	abcd330e 	.word	0xabcd330e
   dc9e4:	e66d1234 	.word	0xe66d1234
   dc9e8:	0005deec 	.word	0x0005deec
   dc9ec:	5851f42d 	.word	0x5851f42d
   dc9f0:	4c957f2d 	.word	0x4c957f2d

000dc9f4 <strchr>:
   dc9f4:	b2c9      	uxtb	r1, r1
   dc9f6:	4603      	mov	r3, r0
   dc9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   dc9fc:	b11a      	cbz	r2, dca06 <strchr+0x12>
   dc9fe:	428a      	cmp	r2, r1
   dca00:	d1f9      	bne.n	dc9f6 <strchr+0x2>
   dca02:	4618      	mov	r0, r3
   dca04:	4770      	bx	lr
   dca06:	2900      	cmp	r1, #0
   dca08:	bf18      	it	ne
   dca0a:	2300      	movne	r3, #0
   dca0c:	e7f9      	b.n	dca02 <strchr+0xe>

000dca0e <strchrnul>:
   dca0e:	b510      	push	{r4, lr}
   dca10:	4604      	mov	r4, r0
   dca12:	f7ff ffef 	bl	dc9f4 <strchr>
   dca16:	b918      	cbnz	r0, dca20 <strchrnul+0x12>
   dca18:	4620      	mov	r0, r4
   dca1a:	f000 f832 	bl	dca82 <strlen>
   dca1e:	4420      	add	r0, r4
   dca20:	bd10      	pop	{r4, pc}

000dca22 <strcmp>:
   dca22:	f810 2b01 	ldrb.w	r2, [r0], #1
   dca26:	f811 3b01 	ldrb.w	r3, [r1], #1
   dca2a:	2a01      	cmp	r2, #1
   dca2c:	bf28      	it	cs
   dca2e:	429a      	cmpcs	r2, r3
   dca30:	d0f7      	beq.n	dca22 <strcmp>
   dca32:	1ad0      	subs	r0, r2, r3
   dca34:	4770      	bx	lr

000dca36 <strcpy>:
   dca36:	4603      	mov	r3, r0
   dca38:	f811 2b01 	ldrb.w	r2, [r1], #1
   dca3c:	f803 2b01 	strb.w	r2, [r3], #1
   dca40:	2a00      	cmp	r2, #0
   dca42:	d1f9      	bne.n	dca38 <strcpy+0x2>
   dca44:	4770      	bx	lr
	...

000dca48 <strdup>:
   dca48:	4b02      	ldr	r3, [pc, #8]	; (dca54 <strdup+0xc>)
   dca4a:	4601      	mov	r1, r0
   dca4c:	6818      	ldr	r0, [r3, #0]
   dca4e:	f000 b803 	b.w	dca58 <_strdup_r>
   dca52:	bf00      	nop
   dca54:	2003dcf8 	.word	0x2003dcf8

000dca58 <_strdup_r>:
   dca58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   dca5a:	4604      	mov	r4, r0
   dca5c:	4608      	mov	r0, r1
   dca5e:	460d      	mov	r5, r1
   dca60:	f000 f80f 	bl	dca82 <strlen>
   dca64:	1c42      	adds	r2, r0, #1
   dca66:	4611      	mov	r1, r2
   dca68:	4620      	mov	r0, r4
   dca6a:	9201      	str	r2, [sp, #4]
   dca6c:	f7fc fa60 	bl	d8f30 <_malloc_r>
   dca70:	4604      	mov	r4, r0
   dca72:	b118      	cbz	r0, dca7c <_strdup_r+0x24>
   dca74:	9a01      	ldr	r2, [sp, #4]
   dca76:	4629      	mov	r1, r5
   dca78:	f7ff ff34 	bl	dc8e4 <memcpy>
   dca7c:	4620      	mov	r0, r4
   dca7e:	b003      	add	sp, #12
   dca80:	bd30      	pop	{r4, r5, pc}

000dca82 <strlen>:
   dca82:	4603      	mov	r3, r0
   dca84:	f813 2b01 	ldrb.w	r2, [r3], #1
   dca88:	2a00      	cmp	r2, #0
   dca8a:	d1fb      	bne.n	dca84 <strlen+0x2>
   dca8c:	1a18      	subs	r0, r3, r0
   dca8e:	3801      	subs	r0, #1
   dca90:	4770      	bx	lr

000dca92 <strncmp>:
   dca92:	b510      	push	{r4, lr}
   dca94:	b16a      	cbz	r2, dcab2 <strncmp+0x20>
   dca96:	3901      	subs	r1, #1
   dca98:	1884      	adds	r4, r0, r2
   dca9a:	f810 3b01 	ldrb.w	r3, [r0], #1
   dca9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   dcaa2:	4293      	cmp	r3, r2
   dcaa4:	d103      	bne.n	dcaae <strncmp+0x1c>
   dcaa6:	42a0      	cmp	r0, r4
   dcaa8:	d001      	beq.n	dcaae <strncmp+0x1c>
   dcaaa:	2b00      	cmp	r3, #0
   dcaac:	d1f5      	bne.n	dca9a <strncmp+0x8>
   dcaae:	1a98      	subs	r0, r3, r2
   dcab0:	bd10      	pop	{r4, pc}
   dcab2:	4610      	mov	r0, r2
   dcab4:	e7fc      	b.n	dcab0 <strncmp+0x1e>

000dcab6 <strncpy>:
   dcab6:	b510      	push	{r4, lr}
   dcab8:	3901      	subs	r1, #1
   dcaba:	4603      	mov	r3, r0
   dcabc:	b132      	cbz	r2, dcacc <strncpy+0x16>
   dcabe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dcac2:	f803 4b01 	strb.w	r4, [r3], #1
   dcac6:	3a01      	subs	r2, #1
   dcac8:	2c00      	cmp	r4, #0
   dcaca:	d1f7      	bne.n	dcabc <strncpy+0x6>
   dcacc:	441a      	add	r2, r3
   dcace:	2100      	movs	r1, #0
   dcad0:	4293      	cmp	r3, r2
   dcad2:	d100      	bne.n	dcad6 <strncpy+0x20>
   dcad4:	bd10      	pop	{r4, pc}
   dcad6:	f803 1b01 	strb.w	r1, [r3], #1
   dcada:	e7f9      	b.n	dcad0 <strncpy+0x1a>

000dcadc <strrchr>:
   dcadc:	b538      	push	{r3, r4, r5, lr}
   dcade:	4603      	mov	r3, r0
   dcae0:	460c      	mov	r4, r1
   dcae2:	b969      	cbnz	r1, dcb00 <strrchr+0x24>
   dcae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dcae8:	f7ff bf84 	b.w	dc9f4 <strchr>
   dcaec:	1c43      	adds	r3, r0, #1
   dcaee:	4605      	mov	r5, r0
   dcaf0:	4621      	mov	r1, r4
   dcaf2:	4618      	mov	r0, r3
   dcaf4:	f7ff ff7e 	bl	dc9f4 <strchr>
   dcaf8:	2800      	cmp	r0, #0
   dcafa:	d1f7      	bne.n	dcaec <strrchr+0x10>
   dcafc:	4628      	mov	r0, r5
   dcafe:	bd38      	pop	{r3, r4, r5, pc}
   dcb00:	2500      	movs	r5, #0
   dcb02:	e7f5      	b.n	dcaf0 <strrchr+0x14>

000dcb04 <__strtok_r>:
   dcb04:	b5f0      	push	{r4, r5, r6, r7, lr}
   dcb06:	b908      	cbnz	r0, dcb0c <__strtok_r+0x8>
   dcb08:	6810      	ldr	r0, [r2, #0]
   dcb0a:	b188      	cbz	r0, dcb30 <__strtok_r+0x2c>
   dcb0c:	4604      	mov	r4, r0
   dcb0e:	4620      	mov	r0, r4
   dcb10:	f814 5b01 	ldrb.w	r5, [r4], #1
   dcb14:	460f      	mov	r7, r1
   dcb16:	f817 6b01 	ldrb.w	r6, [r7], #1
   dcb1a:	b91e      	cbnz	r6, dcb24 <__strtok_r+0x20>
   dcb1c:	b965      	cbnz	r5, dcb38 <__strtok_r+0x34>
   dcb1e:	6015      	str	r5, [r2, #0]
   dcb20:	4628      	mov	r0, r5
   dcb22:	e005      	b.n	dcb30 <__strtok_r+0x2c>
   dcb24:	42b5      	cmp	r5, r6
   dcb26:	d1f6      	bne.n	dcb16 <__strtok_r+0x12>
   dcb28:	2b00      	cmp	r3, #0
   dcb2a:	d1f0      	bne.n	dcb0e <__strtok_r+0xa>
   dcb2c:	6014      	str	r4, [r2, #0]
   dcb2e:	7003      	strb	r3, [r0, #0]
   dcb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dcb32:	461c      	mov	r4, r3
   dcb34:	e00c      	b.n	dcb50 <__strtok_r+0x4c>
   dcb36:	b915      	cbnz	r5, dcb3e <__strtok_r+0x3a>
   dcb38:	f814 3b01 	ldrb.w	r3, [r4], #1
   dcb3c:	460e      	mov	r6, r1
   dcb3e:	f816 5b01 	ldrb.w	r5, [r6], #1
   dcb42:	42ab      	cmp	r3, r5
   dcb44:	d1f7      	bne.n	dcb36 <__strtok_r+0x32>
   dcb46:	2b00      	cmp	r3, #0
   dcb48:	d0f3      	beq.n	dcb32 <__strtok_r+0x2e>
   dcb4a:	2300      	movs	r3, #0
   dcb4c:	f804 3c01 	strb.w	r3, [r4, #-1]
   dcb50:	6014      	str	r4, [r2, #0]
   dcb52:	e7ed      	b.n	dcb30 <__strtok_r+0x2c>

000dcb54 <strtok_r>:
   dcb54:	2301      	movs	r3, #1
   dcb56:	f7ff bfd5 	b.w	dcb04 <__strtok_r>
	...

000dcb5c <_strtol_l.isra.0>:
   dcb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dcb60:	4e3a      	ldr	r6, [pc, #232]	; (dcc4c <_strtol_l.isra.0+0xf0>)
   dcb62:	4686      	mov	lr, r0
   dcb64:	468c      	mov	ip, r1
   dcb66:	4660      	mov	r0, ip
   dcb68:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcb6c:	5da5      	ldrb	r5, [r4, r6]
   dcb6e:	f015 0508 	ands.w	r5, r5, #8
   dcb72:	d1f8      	bne.n	dcb66 <_strtol_l.isra.0+0xa>
   dcb74:	2c2d      	cmp	r4, #45	; 0x2d
   dcb76:	d133      	bne.n	dcbe0 <_strtol_l.isra.0+0x84>
   dcb78:	f89c 4000 	ldrb.w	r4, [ip]
   dcb7c:	f04f 0801 	mov.w	r8, #1
   dcb80:	f100 0c02 	add.w	ip, r0, #2
   dcb84:	2b00      	cmp	r3, #0
   dcb86:	d05c      	beq.n	dcc42 <_strtol_l.isra.0+0xe6>
   dcb88:	2b10      	cmp	r3, #16
   dcb8a:	d10c      	bne.n	dcba6 <_strtol_l.isra.0+0x4a>
   dcb8c:	2c30      	cmp	r4, #48	; 0x30
   dcb8e:	d10a      	bne.n	dcba6 <_strtol_l.isra.0+0x4a>
   dcb90:	f89c 0000 	ldrb.w	r0, [ip]
   dcb94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   dcb98:	2858      	cmp	r0, #88	; 0x58
   dcb9a:	d14d      	bne.n	dcc38 <_strtol_l.isra.0+0xdc>
   dcb9c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   dcba0:	2310      	movs	r3, #16
   dcba2:	f10c 0c02 	add.w	ip, ip, #2
   dcba6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   dcbaa:	3f01      	subs	r7, #1
   dcbac:	2600      	movs	r6, #0
   dcbae:	fbb7 f9f3 	udiv	r9, r7, r3
   dcbb2:	4630      	mov	r0, r6
   dcbb4:	fb03 7a19 	mls	sl, r3, r9, r7
   dcbb8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   dcbbc:	2d09      	cmp	r5, #9
   dcbbe:	d818      	bhi.n	dcbf2 <_strtol_l.isra.0+0x96>
   dcbc0:	462c      	mov	r4, r5
   dcbc2:	42a3      	cmp	r3, r4
   dcbc4:	dd24      	ble.n	dcc10 <_strtol_l.isra.0+0xb4>
   dcbc6:	1c75      	adds	r5, r6, #1
   dcbc8:	d007      	beq.n	dcbda <_strtol_l.isra.0+0x7e>
   dcbca:	4581      	cmp	r9, r0
   dcbcc:	d31d      	bcc.n	dcc0a <_strtol_l.isra.0+0xae>
   dcbce:	d101      	bne.n	dcbd4 <_strtol_l.isra.0+0x78>
   dcbd0:	45a2      	cmp	sl, r4
   dcbd2:	db1a      	blt.n	dcc0a <_strtol_l.isra.0+0xae>
   dcbd4:	fb00 4003 	mla	r0, r0, r3, r4
   dcbd8:	2601      	movs	r6, #1
   dcbda:	f81c 4b01 	ldrb.w	r4, [ip], #1
   dcbde:	e7eb      	b.n	dcbb8 <_strtol_l.isra.0+0x5c>
   dcbe0:	2c2b      	cmp	r4, #43	; 0x2b
   dcbe2:	bf08      	it	eq
   dcbe4:	f89c 4000 	ldrbeq.w	r4, [ip]
   dcbe8:	46a8      	mov	r8, r5
   dcbea:	bf08      	it	eq
   dcbec:	f100 0c02 	addeq.w	ip, r0, #2
   dcbf0:	e7c8      	b.n	dcb84 <_strtol_l.isra.0+0x28>
   dcbf2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   dcbf6:	2d19      	cmp	r5, #25
   dcbf8:	d801      	bhi.n	dcbfe <_strtol_l.isra.0+0xa2>
   dcbfa:	3c37      	subs	r4, #55	; 0x37
   dcbfc:	e7e1      	b.n	dcbc2 <_strtol_l.isra.0+0x66>
   dcbfe:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   dcc02:	2d19      	cmp	r5, #25
   dcc04:	d804      	bhi.n	dcc10 <_strtol_l.isra.0+0xb4>
   dcc06:	3c57      	subs	r4, #87	; 0x57
   dcc08:	e7db      	b.n	dcbc2 <_strtol_l.isra.0+0x66>
   dcc0a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   dcc0e:	e7e4      	b.n	dcbda <_strtol_l.isra.0+0x7e>
   dcc10:	1c73      	adds	r3, r6, #1
   dcc12:	d106      	bne.n	dcc22 <_strtol_l.isra.0+0xc6>
   dcc14:	2322      	movs	r3, #34	; 0x22
   dcc16:	f8ce 3000 	str.w	r3, [lr]
   dcc1a:	4638      	mov	r0, r7
   dcc1c:	b942      	cbnz	r2, dcc30 <_strtol_l.isra.0+0xd4>
   dcc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dcc22:	f1b8 0f00 	cmp.w	r8, #0
   dcc26:	d000      	beq.n	dcc2a <_strtol_l.isra.0+0xce>
   dcc28:	4240      	negs	r0, r0
   dcc2a:	2a00      	cmp	r2, #0
   dcc2c:	d0f7      	beq.n	dcc1e <_strtol_l.isra.0+0xc2>
   dcc2e:	b10e      	cbz	r6, dcc34 <_strtol_l.isra.0+0xd8>
   dcc30:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   dcc34:	6011      	str	r1, [r2, #0]
   dcc36:	e7f2      	b.n	dcc1e <_strtol_l.isra.0+0xc2>
   dcc38:	2430      	movs	r4, #48	; 0x30
   dcc3a:	2b00      	cmp	r3, #0
   dcc3c:	d1b3      	bne.n	dcba6 <_strtol_l.isra.0+0x4a>
   dcc3e:	2308      	movs	r3, #8
   dcc40:	e7b1      	b.n	dcba6 <_strtol_l.isra.0+0x4a>
   dcc42:	2c30      	cmp	r4, #48	; 0x30
   dcc44:	d0a4      	beq.n	dcb90 <_strtol_l.isra.0+0x34>
   dcc46:	230a      	movs	r3, #10
   dcc48:	e7ad      	b.n	dcba6 <_strtol_l.isra.0+0x4a>
   dcc4a:	bf00      	nop
   dcc4c:	000ddb87 	.word	0x000ddb87

000dcc50 <strtol>:
   dcc50:	4613      	mov	r3, r2
   dcc52:	460a      	mov	r2, r1
   dcc54:	4601      	mov	r1, r0
   dcc56:	4802      	ldr	r0, [pc, #8]	; (dcc60 <strtol+0x10>)
   dcc58:	6800      	ldr	r0, [r0, #0]
   dcc5a:	f7ff bf7f 	b.w	dcb5c <_strtol_l.isra.0>
   dcc5e:	bf00      	nop
   dcc60:	2003dcf8 	.word	0x2003dcf8

000dcc64 <__register_exitproc>:
   dcc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dcc68:	f8df 80b8 	ldr.w	r8, [pc, #184]	; dcd24 <__register_exitproc+0xc0>
   dcc6c:	4606      	mov	r6, r0
   dcc6e:	f8d8 0000 	ldr.w	r0, [r8]
   dcc72:	461f      	mov	r7, r3
   dcc74:	460d      	mov	r5, r1
   dcc76:	4691      	mov	r9, r2
   dcc78:	f000 f856 	bl	dcd28 <__retarget_lock_acquire_recursive>
   dcc7c:	4b25      	ldr	r3, [pc, #148]	; (dcd14 <__register_exitproc+0xb0>)
   dcc7e:	681c      	ldr	r4, [r3, #0]
   dcc80:	b934      	cbnz	r4, dcc90 <__register_exitproc+0x2c>
   dcc82:	4c25      	ldr	r4, [pc, #148]	; (dcd18 <__register_exitproc+0xb4>)
   dcc84:	601c      	str	r4, [r3, #0]
   dcc86:	4b25      	ldr	r3, [pc, #148]	; (dcd1c <__register_exitproc+0xb8>)
   dcc88:	b113      	cbz	r3, dcc90 <__register_exitproc+0x2c>
   dcc8a:	681b      	ldr	r3, [r3, #0]
   dcc8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   dcc90:	6863      	ldr	r3, [r4, #4]
   dcc92:	2b1f      	cmp	r3, #31
   dcc94:	dd07      	ble.n	dcca6 <__register_exitproc+0x42>
   dcc96:	f8d8 0000 	ldr.w	r0, [r8]
   dcc9a:	f000 f847 	bl	dcd2c <__retarget_lock_release_recursive>
   dcc9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dcca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dcca6:	b34e      	cbz	r6, dccfc <__register_exitproc+0x98>
   dcca8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   dccac:	b988      	cbnz	r0, dccd2 <__register_exitproc+0x6e>
   dccae:	4b1c      	ldr	r3, [pc, #112]	; (dcd20 <__register_exitproc+0xbc>)
   dccb0:	b923      	cbnz	r3, dccbc <__register_exitproc+0x58>
   dccb2:	f8d8 0000 	ldr.w	r0, [r8]
   dccb6:	f000 f838 	bl	dcd2a <__retarget_lock_release>
   dccba:	e7f0      	b.n	dcc9e <__register_exitproc+0x3a>
   dccbc:	f44f 7084 	mov.w	r0, #264	; 0x108
   dccc0:	f7fc f8f6 	bl	d8eb0 <malloc>
   dccc4:	2800      	cmp	r0, #0
   dccc6:	d0f4      	beq.n	dccb2 <__register_exitproc+0x4e>
   dccc8:	2300      	movs	r3, #0
   dccca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   dccce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   dccd2:	6863      	ldr	r3, [r4, #4]
   dccd4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   dccd8:	2201      	movs	r2, #1
   dccda:	409a      	lsls	r2, r3
   dccdc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   dcce0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   dcce4:	4313      	orrs	r3, r2
   dcce6:	2e02      	cmp	r6, #2
   dcce8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   dccec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   dccf0:	bf02      	ittt	eq
   dccf2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   dccf6:	431a      	orreq	r2, r3
   dccf8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   dccfc:	6863      	ldr	r3, [r4, #4]
   dccfe:	f8d8 0000 	ldr.w	r0, [r8]
   dcd02:	1c5a      	adds	r2, r3, #1
   dcd04:	3302      	adds	r3, #2
   dcd06:	6062      	str	r2, [r4, #4]
   dcd08:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   dcd0c:	f000 f80e 	bl	dcd2c <__retarget_lock_release_recursive>
   dcd10:	2000      	movs	r0, #0
   dcd12:	e7c6      	b.n	dcca2 <__register_exitproc+0x3e>
   dcd14:	2003e7e0 	.word	0x2003e7e0
   dcd18:	2003e754 	.word	0x2003e754
   dcd1c:	00000000 	.word	0x00000000
   dcd20:	000d8eb1 	.word	0x000d8eb1
   dcd24:	2003dd5c 	.word	0x2003dd5c

000dcd28 <__retarget_lock_acquire_recursive>:
   dcd28:	4770      	bx	lr

000dcd2a <__retarget_lock_release>:
   dcd2a:	4770      	bx	lr

000dcd2c <__retarget_lock_release_recursive>:
   dcd2c:	4770      	bx	lr

000dcd2e <link_code_end>:
	...

000dcd30 <dynalib_user>:
   dcd30:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dcd40:	0000 0000 7246 6d6f 2520 2073 6f74 2520     ....From %s to %
   dcd50:	0073 7453 7461 2065 7254 6e61 6973 6974     s.State Transiti
   dcd60:	6e6f 4500 5453 4535 5444 4d2c 2e33 2e32     on.EST5EDT,M3.2.
   dcd70:	2f30 3a32 3030 303a 2c30 314d 2e31 2e31     0/2:00:00,M11.1.
   dcd80:	2f30 3a32 3030 303a 0030 3630 303a 3a30     0/2:00:00.06:00:
   dcd90:	3030 3200 3a32 3935 353a 0039 7453 7261     00.22:59:59.Star
   dcda0:	7574 2070 6f63 706d 656c 6574 6120 2074     tup complete at 
   dcdb0:	7325 7720 7469 2068 6162 7474 7265 2079     %s with battery 
   dcdc0:	3425 322e 0066 6f6c 6163 206c 6974 656d     %4.2f.local time
   dcdd0:	203a 7325 7400 6d69 2065 666f 6e20 7865     : %s.time of nex
   dcde0:	2074 7665 6e65 2074 7369 203a 7325 7720     t event is: %s w
   dcdf0:	6968 6863 6920 2073 6c25 2075 6573 6f63     hich is %lu seco
   dce00:	646e 2073 7761 7961 5300 656c 7065 6620     nds away.Sleep f
   dce10:	726f 2520 2069 6573 6f63 646e 0073 6f57     or %i seconds.Wo
   dce20:	656b 7720 7469 2068 7375 7265 6220 7475     ke with user but
   dce30:	6f74 206e 202d 6f6e 6d72 6c61 6f20 6570     ton - normal ope
   dce40:	6172 6974 6e6f 0073 6f4e 6564 6920 2073     rations.Node is 
   dce50:	7270 7065 7261 6e69 2067 6f74 7320 6e65     preparing to sen
   dce60:	2064 6572 6f70 7472 7720 7469 2068 2061     d report with a 
   dce70:	6172 646e 6d6f 6544 616c 2079 666f 2520     randomDelay of %
   dce80:	0069 6553 646e 6620 6961 656c 2064 202d     i.Send failed - 
   dce90:	6f67 6e69 2067 6f74 7320 6e65 2064 7665     going to send ev
   dcea0:	7265 2079 696d 756e 6574 3200 3a31 3935     ery minute.21:59
   dceb0:	353a 0039                                   :59.

000dceb4 <_ZTV8MB85RC64>:
	...
   dcebc:	40d5 000d 40e9 000d 71c5 000d 725b 000d     .@...@...q..[r..
   dcecc:	72dd 000d 6e69 7469 6620 6961 656c 0064     .r..init failed.
   dcedc:	6f4c 4152 5220 6461 6f69 6920 696e 6974     LoRA Radio initi
   dceec:	6c61 7a69 6465 6120 2073 6f4e 6564 754e     alized as NodeNu
   dcefc:	626d 7265 6f20 2066 6925 6120 646e 4420     mber of %i and D
   dcf0c:	7665 6369 4965 2044 666f 2520 0069 6552     eviceID of %i.Re
   dcf1c:	6563 7669 6465 6620 6f72 206d 6f6e 6564     ceived from node
   dcf2c:	2520 2064 6977 6874 7220 7373 3d69 6425      %d with rssi=%d
   dcf3c:	2d20 6120 2520 2073 656d 7373 6761 2065      - a %s message 
   dcf4c:	666f 6c20 6e65 7467 2068 6425 5300 6e65     of length %d.Sen
   dcf5c:	6964 676e 6420 7461 2061 6572 6f70 7472     ding data report
   dcf6c:	7420 206f 6147 6574 6177 0079 6573 646e      to Gateway.send
   dcf7c:	6e69 2067 656d 7373 6761 2065 6425 4400     ing message %d.D
   dcf8c:	7461 2061 6572 6f70 7472 7320 6e65 2064     ata report send 
   dcf9c:	6f74 6720 7461 7765 7961 7320 6375 6563     to gateway succe
   dcfac:	7373 7566 6c6c 0079 6144 6174 7220 7065     ssfully.Data rep
   dcfbc:	726f 2074 6573 646e 7420 206f 6147 6574     ort send to Gate
   dcfcc:	6177 2079 6166 6c69 6465 5400 6d69 2065     way failed.Time 
   dcfdc:	6573 2074 6f74 2520 2073 6e61 2064 656e     set to %s and ne
   dcfec:	7478 7220 7065 726f 2074 7369 6920 206e     xt report is in 
   dcffc:	7525 6d20 6e69 7475 7365 4e00 206f 6572     %u minutes.No re
   dd00c:	6c70 2c79 6120 6572 7420 6568 6720 7461     ply, are the gat
   dd01c:	7765 7961 2073 7572 6e6e 6e69 3f67 4900     eways running?.I
   dd02c:	696e 6174 696c 697a 676e 7420 6568 7020     nitalizing the p
   dd03c:	6e69 6f4d 6564 0073 6e49 7469 6169 696c     inModes.Initiali
   dd04c:	697a 676e 5020 776f 7265 4320 6e6f 6966     zing Power Confi
   dd05c:	0067                                        g.

000dd05e <BLUE_LED>:
   dd05e:	0007                                        ..

000dd060 <BUTTON_PIN>:
   dd060:	0004                                        ..

000dd062 <RFM95_CS>:
   dd062:	000e                                        ..

000dd064 <RFM95_INT>:
   dd064:	0002                                        ..

000dd066 <TMP36_SENSE_PIN>:
   dd066:	000f 6579 0073 6f6e 4900 636e 6572 7361     ..yes.no.Increas
   dd076:	6e69 2067 6572 6f70 7472 6e69 2067 7266     ing reporting fr
   dd086:	7165 6575 636e 2079 6f74 3120 2032 696d     equency to 12 mi
   dd096:	756e 6574 0073 7349 4c20 776f 5020 776f     nutes.Is Low Pow
   dd0a6:	7265 4d20 646f 2065 6573 3f74 2520 0073     er Mode set? %s.
   dd0b6:	6f4d 6564 0000                              Mode..

000dd0bc <_ZTVN5spark10LogHandlerE>:
	...
   dd0cc:	40a5 000d 4b2d 000d                         .@..-K..

000dd0d4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dd0dc:	4b39 000d 4b6d 000d abe5 000d 4b2f 000d     9K..mK....../K..
   dd0ec:	6f4c 6461 6e69 2067 7953 7473 6d65 4420     Loading System D
   dd0fc:	6665 7561 746c 0073 6f4c 6461 6e69 2067     efaults.Loading 
   dd10c:	7973 7473 6d65 6420 6665 7561 746c 0073     system defaults.
   dd11c:	7973 5373 6174 7375 6f20 6a62 6365 2074     sysStaus object 
   dd12c:	7473 726f 6465 6120 646e 6820 7361 2068     stored and hash 
   dd13c:	7075 6164 6574 0064 7563 7272 6e65 2074     updated.current 
   dd14c:	626f 656a 7463 7320 6f74 6572 2064 6e61     object stored an
   dd15c:	2064 6168 6873 7520 6470 7461 6465 4900     d hash updated.I
   dd16c:	696e 6974 6c61 7a69 6e69 2067 6874 2065     nitializing the 
   dd17c:	624f 656a 7463 5320 6f74 6572 4600 4152     Object Store.FRA
   dd18c:	204d 696d 6d73 7461 6863 202c 7265 7361     M mismatch, eras
   dd19c:	6e69 2067 6e61 2064 6f6c 6163 6966 676e     ing and locafing
   dd1ac:	6420 6665 7561 746c 2073 6669 6920 2074      defaults if it 
   dd1bc:	6863 6365 736b 6f20 7475 4600 4152 204d     checks out.FRAM 
   dd1cc:	6e69 7469 6169 696c 657a 2c64 6c20 616f     initialized, loa
   dd1dc:	6964 676e 6f20 6a62 6365 7374 0000 0000     ding objects....

000dd1ec <_ZL17FRAMversionNumber>:
   dd1ec:	0001 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   dd1fc:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dd20c:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dd21c:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dd22c:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   dd23c:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   dd24c:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   dd25c:	4400 6369 6e6f 656e 7463 6465 2500 2073     .Diconnected.%s 
   dd26c:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   dd27c:	6630 2525 0020 6925 4320 4900 746e 7265     0f%% .%i C.Inter
   dd28c:	616e 206c 6554 706d 7265 7461 7275 2065     nal Temperature 
   dd29c:	7369 2520 0073 0000 d1f0 000d d1f8 000d     is %s...........
   dd2ac:	d1fd 000d d202 000d d206 000d d20b 000d     ................
   dd2bc:	d210 000d d214 000d d21f 000d d22a 000d     ............*...
   dd2cc:	6166 6c69 6465 7420 206f 6572 6461 7220     failed to read r
   dd2dc:	6765 6441 7264 253d 3230 2078 6f63 6e75     egAddr=%02x coun
   dd2ec:	3d74 7525 6600 6961 656c 2064 6f74 7220     t=%u.failed to r
   dd2fc:	6165 2064 6572 4167 6464 3d72 3025 7832     ead regAddr=%02x
   dd30c:	7320 6174 3d74 6425 4600 554f 2054 6964      stat=%d.FOUT di
   dd31c:	2064 6f6e 2074 6f67 4820 4749 0048 6f6e     d not go HIGH.no
   dd32c:	2074 6564 6574 7463 6465 6600 6961 656c     t detected.faile
   dd33c:	2064 6f74 7720 6972 6574 7220 6765 6441     d to write regAd
   dd34c:	7264 253d 3230 2078 7473 7461 253d 0064     dr=%02x stat=%d.
   dd35c:	6573 5774 5444 2520 0064 6177 6374 6468     setWDT %d.watchd
   dd36c:	676f 6320 656c 7261 6465 6220 6552 7573     og cleared bResu
   dd37c:	746c 253d 0064 6177 6374 6468 676f 7320     lt=%d.watchdog s
   dd38c:	7465 6620 756f 5372 6365 3d73 6425 6220     et fourSecs=%d b
   dd39c:	6552 7573 746c 253d 0064 6572 6573 4374     Result=%d.resetC
   dd3ac:	6e6f 6966 2867 7830 3025 6c38 2978 5700     onfig(0x%08lx).W
   dd3bc:	5441 4843 4f44 0047 4544 5045 505f 574f     ATCHDOG.DEEP_POW
   dd3cc:	5245 445f 574f 004e 4f43 4e55 4454 574f     ER_DOWN.COUNTDOW
   dd3dc:	5f4e 4954 454d 0052 4c41 5241 004d 6166     N_TIMER.ALARM.fa
   dd3ec:	6c69 7275 2065 6e69 7520 6470 7461 5765     ilure in updateW
   dd3fc:	6b61 5265 6165 6f73 206e 6425 7700 6b61     akeReason %d.wak
   dd40c:	2065 6572 7361 6e6f 3d20 2520 0073 3025     e reason = %s.%0
   dd41c:	6434 252d 3230 2d64 3025 6432 2520 3230     4d-%02d-%02d %02
   dd42c:	3a64 3025 6432 253a 3230 0064 6567 5274     d:%02d:%02d.getR
   dd43c:	6374 7341 6d54 2520 0073 6573 2074 7973     tcAsTm %s.set sy
   dd44c:	7473 6d65 6320 6f6c 6b63 6620 6f72 206d     stem clock from 
   dd45c:	5452 2043 7325 6600 6961 656c 2064 6f74     RTC %s.failed to
   dd46c:	6420 7465 6365 2074 4241 3831 3530 7300      detect AB1805.s
   dd47c:	7465 7452 4163 5473 206d 7325 6600 6961     etRtcAsTm %s.fai
   dd48c:	756c 6572 6920 206e 6573 5274 6374 7246     lure in setRtcFr
   dd49c:	6d6f 6d54 2520 0064 6573 2074 5452 2043     omTm %d.set RTC 
   dd4ac:	7266 6d6f 6320 6f6c 6475 2520 0073 7061     from cloud %s.ap
   dd4bc:	2e70 6261 3831 3530 0000 0000               p.ab1805....

000dd4c8 <_ZTV6AB1805>:
	...
   dd4d0:	5211 000d 5213 000d 577f 000d 5805 000d     .R...R...W...X..
   dd4e0:	6425 253a 3a64 6425 3000 3a30 3030 303a     %d:%d:%d.00:00:0
   dd4f0:	0030 3332 353a 3a39 3935 4d00 6425 252e     0.23:59:59.M%d.%
   dd500:	2e64 6425 2c00 5a00 2500 302b 6433 253a     d.%d.,.Z.%+03d:%
   dd510:	3230 0075 6576 7463 726f 3a3a 4d5f 725f     02u.vector::_M_r
   dd520:	6165 6c6c 636f 695f 736e 7265 0074 0000     ealloc_insert...

000dd530 <_ZTV9LocalTime>:
	...
   dd538:	5c71 000d 5c89 000d                         q\...\..

000dd540 <_ZTV12LocalTimeHMS>:
	...
   dd548:	5c11 000d 5c23 000d                         .\..#\..

000dd550 <_ZTV15LocalTimeChange>:
	...
   dd558:	5c13 000d 5c31 000d                         .\..1\..

000dd560 <_ZTV22LocalTimePosixTimezone>:
	...
   dd568:	5c41 000d 5c5d 000d 7277 7469 4465 7461     A\..]\..writeDat
   dd578:	2061 6166 6c69 6465 6420 7275 6e69 2067     a failed during 
   dd588:	7265 7361 2065 7266 6d61 6441 7264 253d     erase framAddr=%
   dd598:	0075 0000                                   u...

000dd59c <_ZTV6MB85RC>:
	...
   dd5a4:	7113 000d 7115 000d 71c5 000d 725b 000d     .q...q...q..[r..
   dd5b4:	72dd 000d                                   .r..

000dd5b8 <_ZTV15RHGenericDriver>:
	...
   dd5c8:	7495 000d 40a5 000d 40a5 000d 40a5 000d     .t...@...@...@..
   dd5d8:	40a5 000d 74f7 000d 7499 000d 7547 000d     .@...t...t..Gu..
   dd5e8:	7515 000d 756b 000d 74a3 000d 74ab 000d     .u..ku...t...t..
   dd5f8:	74af 000d 74b3 000d 74b7 000d 74bb 000d     .t...t...t...t..
   dd608:	74a7 000d 74c7 000d 74cb 000d 74cf 000d     .t...t...t...t..
   dd618:	74d3 000d 74d7 000d 74dd 000d 74e1 000d     .t...t...t...t..
   dd628:	74a3 000d 74e5 000d 74eb 000d 74f1 000d     .t...t...t...t..

000dd638 <_ZTV12RHGenericSPI>:
	...
   dd640:	40a5 000d 75c9 000d 75cb 000d 40a5 000d     .@...u...u...@..
   dd650:	40a5 000d 75d3 000d 75d7 000d 75db 000d     .@...u...u...u..
   dd660:	75cd 000d 75cf 000d 75d1 000d 6564 6166     .u...u...u..defa
   dd670:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   dd680:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   dd690:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   dd6a0:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000dd6b0 <_ZTVN8particle11SPISettingsE>:
	...
   dd6b8:	7621 000d 75f5 000d 75f7 000d               !v...u...u..

000dd6c4 <_ZTV13RHHardwareSPI>:
	...
   dd6cc:	76d5 000d 76e9 000d 76f7 000d 7705 000d     .v...v...v...w..
   dd6dc:	7771 000d 75d3 000d 75d7 000d 75db 000d     qw...u...u...u..
   dd6ec:	777f 000d 7793 000d 77a1 000d               .w...w...w..

000dd6f8 <_ZTV6RHMesh>:
	...
   dd700:	7871 000d 7b79 000d 77cd 000d 77b9 000d     qx..y{...w...w..

000dd710 <_ZTV8RHRouter>:
	...
   dd718:	7ddf 000d 7e23 000d                         .}..#~..

000dd720 <_ZTV11RHSPIDriver>:
	...
   dd730:	80c1 000d 40a5 000d 40a5 000d 40a5 000d     .....@...@...@..
   dd740:	40a5 000d 74f7 000d 7499 000d 7547 000d     .@...t...t..Gu..
   dd750:	7515 000d 756b 000d 74a3 000d 74ab 000d     .u..ku...t...t..
   dd760:	74af 000d 74b3 000d 74b7 000d 74bb 000d     .t...t...t...t..
   dd770:	74a7 000d 74c7 000d 74cb 000d 74cf 000d     .t...t...t...t..
   dd780:	74d3 000d 74d7 000d 74dd 000d 74e1 000d     .t...t...t...t..
   dd790:	74a3 000d 74e5 000d 74eb 000d 74f1 000d     .t...t...t...t..
   dd7a0:	80ed 000d 80f7 000d                         ........

000dd7a8 <_ZL18MODEM_CONFIG_TABLE>:
   dd7a8:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000dd7b8 <_ZTV7RH_RF95>:
	...
   dd7c0:	825f 000d 8297 000d 8759 000d 85bf 000d     _.......Y.......
   dd7d0:	82cd 000d 8607 000d 825b 000d 74f7 000d     ........[....t..
   dd7e0:	7499 000d 7547 000d 7515 000d 756b 000d     .t..Gu...u..ku..
   dd7f0:	8261 000d 74ab 000d 74af 000d 74b3 000d     a....t...t...t..
   dd800:	74b7 000d 74bb 000d 74a7 000d 74c7 000d     .t...t...t...t..
   dd810:	74cb 000d 74cf 000d 74d3 000d 74d7 000d     .t...t...t...t..
   dd820:	74dd 000d 74e1 000d 82a7 000d 74e5 000d     .t...t.......t..
   dd830:	74eb 000d 74f1 000d 80ed 000d 80f7 000d     .t...t..........
   dd840:	8257 000d                                   W...

000dd844 <_ZTVN5spark13CellularClassE>:
	...
   dd84c:	903b 000d 9031 000d 9027 000d 8fdd 000d     ;...1...'.......
   dd85c:	901b 000d 900f 000d af3d 000d af45 000d     ........=...E...
   dd86c:	9003 000d 8ffb 000d 8ff1 000d 8fe7 000d     ................
   dd87c:	af75 000d                                   u...

000dd880 <_ZTV14CellularSignal>:
	...
   dd888:	90e9 000d 9111 000d 90eb 000d 9121 000d     ............!...
   dd898:	9155 000d 9181 000d 91b5 000d 9205 000d     U...............
   dd8a8:	90ef 000d 910b 000d fffc ffff 0000 0000     ................
   dd8b8:	922b 000d                                   +...

000dd8bc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dd8c4:	924b 000d 9251 000d 92a1 000d 925f 000d     K...Q......._...
   dd8d4:	924d 000d                                   M...

000dd8d8 <_ZTVN5spark13EthernetClassE>:
	...
   dd8e0:	9817 000d 980d 000d 9803 000d 97f9 000d     ................
   dd8f0:	97ed 000d 97e1 000d af3d 000d af45 000d     ........=...E...
   dd900:	97d5 000d 97cd 000d 97c3 000d 97b9 000d     ................
   dd910:	af75 000d                                   u...

000dd914 <_ZTV7TwoWire>:
	...
   dd91c:	99bb 000d 9a05 000d 99dd 000d 99bd 000d     ................
   dd92c:	99e5 000d 99ed 000d 99f5 000d 99fd 000d     ................

000dd93c <_ZTV9IPAddress>:
	...
   dd944:	9b69 000d 9b59 000d 9b5b 000d 2575 3430     i...Y...[...u%04
   dd954:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   dd964:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   dd974:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dd984:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   dd994:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   dd9a4:	6c69 2073 203d 0d00 000a 006d 0063 6e6c     ils = ....m.c.ln
   dd9b4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.

000dd9c4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dd9cc:	a025 000d a04b 000d a009 000d 9c69 000d     %...K.......i...

000dd9dc <_ZTVN5spark16StreamLogHandlerE>:
	...
   dd9e4:	a401 000d a419 000d abe5 000d 4b2f 000d     ............/K..

000dd9f4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dd9fc:	a42d 000d a441 000d ad89 000d a011 000d     -...A...........

000dda0c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dda14:	a023 000d a059 000d ab21 000d a013 000d     #...Y...!.......

000dda24 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dda2c:	a021 000d a067 000d a349 000d a085 000d     !...g...I.......

000dda3c <_ZTVN5spark12NetworkClassE>:
	...
   dda44:	aefd 000d af07 000d af11 000d af1b 000d     ................
   dda54:	af25 000d af31 000d af3d 000d af45 000d     %...1...=...E...
   dda64:	af4d 000d af59 000d af61 000d af6b 000d     M...Y...a...k...
   dda74:	af75 000d                                   u...

000dda78 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dda78:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   dda88:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   dda98:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   ddaa8:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   ddab8:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   ddac8:	0065 0000                                   e...

000ddacc <_ZTV11USARTSerial>:
	...
   ddad4:	ba35 000d baa3 000d ba7b 000d b1bb 000d     5.......{.......
   ddae4:	ba4b 000d ba67 000d ba59 000d ba75 000d     K...g...Y...u...
   ddaf4:	ba37 000d ba3d 000d                         7...=...

000ddafc <_ZTV9USBSerial>:
	...
   ddb04:	bb43 000d bbab 000d bb81 000d b1bb 000d     C...............
   ddb14:	bb73 000d bb45 000d bb55 000d bba5 000d     s...E...U.......
   ddb24:	bb65 000d bb3d 000d                         e...=...

000ddb2c <_ZSt7nothrow>:
   ddb2c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   ddb3c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000ddb4d <day_name.6145>:
   ddb4d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   ddb5d:	6972 6153                                    riSat

000ddb62 <mon_name.6146>:
   ddb62:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   ddb72:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   ddb82:	4476 6365                                   vDec

000ddb86 <_ctype_>:
   ddb86:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ddb96:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ddba6:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ddbb6:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ddbc6:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ddbd6:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ddbe6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ddbf6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ddc06:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ddc87 <link_const_variable_data_end>:
	...

000ddc88 <link_constructors_location>:
   ddc88:	000d429d 	.word	0x000d429d
   ddc8c:	000d4a55 	.word	0x000d4a55
   ddc90:	000d4d4d 	.word	0x000d4d4d
   ddc94:	000d4e91 	.word	0x000d4e91
   ddc98:	000d5205 	.word	0x000d5205
   ddc9c:	000d5c01 	.word	0x000d5c01
   ddca0:	000d77a9 	.word	0x000d77a9
   ddca4:	000d8fcd 	.word	0x000d8fcd
   ddca8:	000d90b9 	.word	0x000d90b9
   ddcac:	000d9821 	.word	0x000d9821
   ddcb0:	000dabd5 	.word	0x000dabd5
   ddcb4:	000db049 	.word	0x000db049
   ddcb8:	000db2f9 	.word	0x000db2f9
   ddcbc:	000db795 	.word	0x000db795
   ddcc0:	000dba21 	.word	0x000dba21

000ddcc4 <link_constructors_end>:
	...
