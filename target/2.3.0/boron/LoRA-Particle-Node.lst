
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/2.3.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008400  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc420  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001c8  2003dcc8  000dc424  0001dcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000960  2003de90  2003de90  0002de90  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dc5ec  000dc5ec  0002c5ec  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dc618  000dc618  0002c618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   003004f8  00000000  00000000  0002c61c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002cf1a  00000000  00000000  0032cb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00048c00  00000000  00000000  00359a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003e60  00000000  00000000  003a262e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000bda8  00000000  00000000  003a648e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000544de  00000000  00000000  003b2236  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00073629  00000000  00000000  00406714  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012ebcf  00000000  00000000  00479d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b1d8  00000000  00000000  005a890c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 f8c7 	bl	db1c4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 f8e9 	bl	db214 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcc8 	.word	0x2003dcc8
   d404c:	000dc424 	.word	0x000dc424
   d4050:	2003de90 	.word	0x2003de90
   d4054:	2003de90 	.word	0x2003de90
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fad3 	bl	da60c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc3e4 	.word	0x000dc3e4
   d4080:	000dc420 	.word	0x000dc420

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b886 	b.w	d4194 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f963 	bl	d4354 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 ba73 	b.w	da57c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bb9b 	b.w	d77d0 <malloc>

000d409a <_Znaj>:
   d409a:	f003 bb99 	b.w	d77d0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bb9f 	b.w	d77e0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fa5e 	bl	d756c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d71ed 	.word	0x000d71ed

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z13userSwitchISRv>:
	}
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z13userSwitchISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
   d40ce:	4770      	bx	lr
   d40d0:	2003def3 	.word	0x2003def3

000d40d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN8MB85RC64D1Ev+0x10>)
   d40d8:	6003      	str	r3, [r0, #0]
   d40da:	4604      	mov	r4, r0
   d40dc:	f001 fcac 	bl	d5a38 <_ZN6MB85RCD1Ev>
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	000db69c 	.word	0x000db69c

000d40e8 <_ZN8MB85RC64D0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4604      	mov	r4, r0
   d40ec:	f7ff fff2 	bl	d40d4 <_ZN8MB85RC64D1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	2110      	movs	r1, #16
   d40f4:	f006 fbe0 	bl	da8b8 <_ZdlPvj>
   d40f8:	4620      	mov	r0, r4
   d40fa:	bd10      	pop	{r4, pc}

000d40fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d40fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d40fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4100:	4605      	mov	r5, r0
   d4102:	460f      	mov	r7, r1
   d4104:	4616      	mov	r6, r2
        if (valid_) {
   d4106:	b18b      	cbz	r3, d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4108:	6803      	ldr	r3, [r0, #0]
   d410a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d410c:	b183      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d410e:	889a      	ldrh	r2, [r3, #4]
   d4110:	2a01      	cmp	r2, #1
   d4112:	d006      	beq.n	d4122 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4114:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4116:	e7f9      	b.n	d410c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4118:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d411a:	b14b      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d411c:	889a      	ldrh	r2, [r3, #4]
   d411e:	2a01      	cmp	r2, #1
   d4120:	d1fa      	bne.n	d4118 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4122:	b12b      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4124:	899a      	ldrh	r2, [r3, #12]
   d4126:	42ba      	cmp	r2, r7
   d4128:	d1f6      	bne.n	d4118 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d412a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d412c:	4628      	mov	r0, r5
   d412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4130:	490a      	ldr	r1, [pc, #40]	; (d415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4132:	2010      	movs	r0, #16
   d4134:	f006 fbc2 	bl	da8bc <_ZnwjRKSt9nothrow_t>
   d4138:	4604      	mov	r4, r0
   d413a:	b168      	cbz	r0, d4158 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d413c:	2210      	movs	r2, #16
   d413e:	2100      	movs	r1, #0
   d4140:	f007 f868 	bl	db214 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4144:	4b06      	ldr	r3, [pc, #24]	; (d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4146:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4148:	2301      	movs	r3, #1
   d414a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d414c:	692b      	ldr	r3, [r5, #16]
   d414e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4150:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4152:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4154:	612c      	str	r4, [r5, #16]
   d4156:	e7e9      	b.n	d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4158:	7528      	strb	r0, [r5, #20]
                return *this;
   d415a:	e7e7      	b.n	d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d415c:	000dc288 	.word	0x000dc288
   d4160:	00030010 	.word	0x00030010

000d4164 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4164:	b40e      	push	{r1, r2, r3}
   d4166:	b510      	push	{r4, lr}
   d4168:	b08d      	sub	sp, #52	; 0x34
   d416a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d416c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d416e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4172:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4174:	2300      	movs	r3, #0
   d4176:	2020      	movs	r0, #32
   d4178:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d417c:	e9cd 4200 	strd	r4, r2, [sp]
   d4180:	201e      	movs	r0, #30
   d4182:	aa04      	add	r2, sp, #16
   d4184:	f003 fa02 	bl	d758c <log_message_v>
}
   d4188:	b00d      	add	sp, #52	; 0x34
   d418a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d418e:	b003      	add	sp, #12
   d4190:	4770      	bx	lr
	...

000d4194 <setup>:
void setup() {
   d4194:	b530      	push	{r4, r5, lr}
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d4196:	4c37      	ldr	r4, [pc, #220]	; (d4274 <setup+0xe0>)
   d4198:	b089      	sub	sp, #36	; 0x24
	delay(5000);	// Wait for serial 
   d419a:	f241 3088 	movw	r0, #5000	; 0x1388
   d419e:	f003 fb7f 	bl	d78a0 <delay>
    initializePinModes();                           // Sets the pinModes
   d41a2:	f000 fb49 	bl	d4838 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   d41a6:	f000 fb5f 	bl	d4868 <_Z18initializePowerCfgv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   d41aa:	f000 fdc5 	bl	d4d38 <_Z18storageObjectStartv>
   d41ae:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   d41b0:	2101      	movs	r1, #1
   d41b2:	4620      	mov	r0, r4
   d41b4:	8163      	strh	r3, [r4, #10]
   d41b6:	f001 facb 	bl	d5750 <_ZN6AB18055setupEb>
        ab1805.resetConfig();                       // Reset the AB1805 configuration to default values
   d41ba:	2100      	movs	r1, #0
   d41bc:	4620      	mov	r0, r4
   d41be:	f001 f8a9 	bl	d5314 <_ZN6AB180511resetConfigEm>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   d41c2:	217c      	movs	r1, #124	; 0x7c
   d41c4:	4620      	mov	r0, r4
   d41c6:	f001 f821 	bl	d520c <_ZN6AB18056setWDTEi>
	initializeLoRA();								// Start the LoRA radio
   d41ca:	f000 fa05 	bl	d45d8 <_Z14initializeLoRAv>
	if (!Time.isValid()) rescueMode = true;
   d41ce:	f006 f86f 	bl	da2b0 <_ZN9TimeClass7isValidEv>
   d41d2:	b910      	cbnz	r0, d41da <setup+0x46>
   d41d4:	4b28      	ldr	r3, [pc, #160]	; (d4278 <setup+0xe4>)
   d41d6:	2201      	movs	r2, #1
   d41d8:	701a      	strb	r2, [r3, #0]
  	Log.info("Startup complete with %s time and with battery %4.2f", (Time.isValid())? "valid" : "invalid", System.batteryCharge());
   d41da:	f006 f869 	bl	da2b0 <_ZN9TimeClass7isValidEv>
   d41de:	4d27      	ldr	r5, [pc, #156]	; (d427c <setup+0xe8>)
   d41e0:	4a27      	ldr	r2, [pc, #156]	; (d4280 <setup+0xec>)
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d41e2:	a904      	add	r1, sp, #16
   d41e4:	2800      	cmp	r0, #0
   d41e6:	bf18      	it	ne
   d41e8:	4615      	movne	r5, r2
    const diag_source* src = nullptr;
   d41ea:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d41ec:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d41ee:	9204      	str	r2, [sp, #16]
    const int ret = diag_get_source(id, &src, nullptr);
   d41f0:	f003 f9e4 	bl	d75bc <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d41f4:	2800      	cmp	r0, #0
   d41f6:	d139      	bne.n	d426c <setup+0xd8>
        return ret;
    }
    return get(src, val);
   d41f8:	9c04      	ldr	r4, [sp, #16]
    SPARK_ASSERT(src && src->callback);
   d41fa:	b10c      	cbz	r4, d4200 <setup+0x6c>
   d41fc:	6923      	ldr	r3, [r4, #16]
   d41fe:	b923      	cbnz	r3, d420a <setup+0x76>
   d4200:	4a20      	ldr	r2, [pc, #128]	; (d4284 <setup+0xf0>)
   d4202:	2100      	movs	r1, #0
   d4204:	200a      	movs	r0, #10
   d4206:	f003 f9b1 	bl	d756c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d420a:	2300      	movs	r3, #0
   d420c:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4210:	230c      	movs	r3, #12
   d4212:	f8ad 3014 	strh.w	r3, [sp, #20]
   d4216:	446b      	add	r3, sp
   d4218:	9306      	str	r3, [sp, #24]
   d421a:	2304      	movs	r3, #4
   d421c:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d421e:	aa05      	add	r2, sp, #20
   d4220:	6923      	ldr	r3, [r4, #16]
   d4222:	2101      	movs	r1, #1
   d4224:	4620      	mov	r0, r4
   d4226:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4228:	bb00      	cbnz	r0, d426c <setup+0xd8>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d422a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d422e:	ee07 3a90 	vmov	s15, r3
   d4232:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   d4236:	ee17 0a90 	vmov	r0, s15
   d423a:	f006 fcab 	bl	dab94 <__aeabi_f2d>
   d423e:	462a      	mov	r2, r5
   d4240:	e9cd 0100 	strd	r0, r1, [sp]
   d4244:	4910      	ldr	r1, [pc, #64]	; (d4288 <setup+0xf4>)
   d4246:	4811      	ldr	r0, [pc, #68]	; (d428c <setup+0xf8>)
   d4248:	f7ff ff8c 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
  	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d424c:	4810      	ldr	r0, [pc, #64]	; (d4290 <setup+0xfc>)
   d424e:	4911      	ldr	r1, [pc, #68]	; (d4294 <setup+0x100>)
   d4250:	8800      	ldrh	r0, [r0, #0]
   d4252:	2200      	movs	r2, #0
   d4254:	9200      	str	r2, [sp, #0]
   d4256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d425a:	f004 f8db 	bl	d8414 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   d425e:	4b0e      	ldr	r3, [pc, #56]	; (d4298 <setup+0x104>)
   d4260:	781a      	ldrb	r2, [r3, #0]
   d4262:	b90a      	cbnz	r2, d4268 <setup+0xd4>
   d4264:	2204      	movs	r2, #4
   d4266:	701a      	strb	r2, [r3, #0]
}
   d4268:	b009      	add	sp, #36	; 0x24
   d426a:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d426c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4270:	e7e1      	b.n	d4236 <setup+0xa2>
   d4272:	bf00      	nop
   d4274:	2003dea0 	.word	0x2003dea0
   d4278:	2003def1 	.word	0x2003def1
   d427c:	000db5cc 	.word	0x000db5cc
   d4280:	000db5ce 	.word	0x000db5ce
   d4284:	000d71ed 	.word	0x000d71ed
   d4288:	000db5d4 	.word	0x000db5d4
   d428c:	2003e574 	.word	0x2003e574
   d4290:	000db840 	.word	0x000db840
   d4294:	000d40c9 	.word	0x000d40c9
   d4298:	2003def2 	.word	0x2003def2

000d429c <_Z22publishStateTransitionv>:
{
   d429c:	b5f0      	push	{r4, r5, r6, r7, lr}
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d429e:	4d25      	ldr	r5, [pc, #148]	; (d4334 <_Z22publishStateTransitionv+0x98>)
   d42a0:	4c25      	ldr	r4, [pc, #148]	; (d4338 <_Z22publishStateTransitionv+0x9c>)
   d42a2:	4b26      	ldr	r3, [pc, #152]	; (d433c <_Z22publishStateTransitionv+0xa0>)
   d42a4:	782a      	ldrb	r2, [r5, #0]
   d42a6:	7821      	ldrb	r1, [r4, #0]
{
   d42a8:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d42aa:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d42ae:	9200      	str	r2, [sp, #0]
   d42b0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d42b4:	4a22      	ldr	r2, [pc, #136]	; (d4340 <_Z22publishStateTransitionv+0xa4>)
   d42b6:	2128      	movs	r1, #40	; 0x28
   d42b8:	a804      	add	r0, sp, #16
   d42ba:	f003 faa9 	bl	d7810 <snprintf>
	oldState = state;
   d42be:	782b      	ldrb	r3, [r5, #0]
   d42c0:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42c2:	f003 f9fd 	bl	d76c0 <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d42c6:	2800      	cmp	r0, #0
   d42c8:	d02e      	beq.n	d4328 <_Z22publishStateTransitionv+0x8c>
		if (millis() - lastPublish > 1000) {
   d42ca:	4c1e      	ldr	r4, [pc, #120]	; (d4344 <_Z22publishStateTransitionv+0xa8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42cc:	f002 ff96 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
   d42d0:	e9d4 3200 	ldrd	r3, r2, [r4]
   d42d4:	1ac6      	subs	r6, r0, r3
   d42d6:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d42da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d42de:	2300      	movs	r3, #0
   d42e0:	42b2      	cmp	r2, r6
   d42e2:	41bb      	sbcs	r3, r7
   d42e4:	da20      	bge.n	d4328 <_Z22publishStateTransitionv+0x8c>
   d42e6:	f002 ff89 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d42ea:	2300      	movs	r3, #0
   d42ec:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d42ee:	4b16      	ldr	r3, [pc, #88]	; (d4348 <_Z22publishStateTransitionv+0xac>)
   d42f0:	6020      	str	r0, [r4, #0]
   d42f2:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42f4:	f88d 3000 	strb.w	r3, [sp]
   d42f8:	4914      	ldr	r1, [pc, #80]	; (d434c <_Z22publishStateTransitionv+0xb0>)
   d42fa:	233c      	movs	r3, #60	; 0x3c
   d42fc:	aa04      	add	r2, sp, #16
   d42fe:	a802      	add	r0, sp, #8
   d4300:	f003 fd6c 	bl	d7ddc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4304:	9c03      	ldr	r4, [sp, #12]
   d4306:	b17c      	cbz	r4, d4328 <_Z22publishStateTransitionv+0x8c>
      if (--_M_use_count == 0)
   d4308:	6863      	ldr	r3, [r4, #4]
   d430a:	3b01      	subs	r3, #1
   d430c:	6063      	str	r3, [r4, #4]
   d430e:	b95b      	cbnz	r3, d4328 <_Z22publishStateTransitionv+0x8c>
          _M_dispose();
   d4310:	6823      	ldr	r3, [r4, #0]
   d4312:	4620      	mov	r0, r4
   d4314:	689b      	ldr	r3, [r3, #8]
   d4316:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4318:	68a3      	ldr	r3, [r4, #8]
   d431a:	3b01      	subs	r3, #1
   d431c:	60a3      	str	r3, [r4, #8]
   d431e:	b91b      	cbnz	r3, d4328 <_Z22publishStateTransitionv+0x8c>
            _M_destroy();
   d4320:	6823      	ldr	r3, [r4, #0]
   d4322:	4620      	mov	r0, r4
   d4324:	68db      	ldr	r3, [r3, #12]
   d4326:	4798      	blx	r3
	Log.info(stateTransitionString);
   d4328:	4809      	ldr	r0, [pc, #36]	; (d4350 <_Z22publishStateTransitionv+0xb4>)
   d432a:	a904      	add	r1, sp, #16
   d432c:	f7ff ff1a 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
}
   d4330:	b00f      	add	sp, #60	; 0x3c
   d4332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4334:	2003def2 	.word	0x2003def2
   d4338:	2003def0 	.word	0x2003def0
   d433c:	2003dcc8 	.word	0x2003dcc8
   d4340:	000db609 	.word	0x000db609
   d4344:	2003de98 	.word	0x2003de98
   d4348:	2003de90 	.word	0x2003de90
   d434c:	000db617 	.word	0x000db617
   d4350:	2003e574 	.word	0x2003e574

000d4354 <loop>:
void loop() {
   d4354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   d4358:	4d6a      	ldr	r5, [pc, #424]	; (d4504 <loop+0x1b0>)
   d435a:	782b      	ldrb	r3, [r5, #0]
   d435c:	2b03      	cmp	r3, #3
void loop() {
   d435e:	b088      	sub	sp, #32
	switch (state) {
   d4360:	d01e      	beq.n	d43a0 <loop+0x4c>
   d4362:	2b04      	cmp	r3, #4
   d4364:	f000 80a1 	beq.w	d44aa <loop+0x156>
   d4368:	2b02      	cmp	r3, #2
   d436a:	f040 8084 	bne.w	d4476 <loop+0x122>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d436e:	4b66      	ldr	r3, [pc, #408]	; (d4508 <loop+0x1b4>)
   d4370:	781b      	ldrb	r3, [r3, #0]
   d4372:	2b02      	cmp	r3, #2
   d4374:	d001      	beq.n	d437a <loop+0x26>
   d4376:	f7ff ff91 	bl	d429c <_Z22publishStateTransitionv>
			if (Time.now() - lastPublish > sysStatus.nextReportSeconds) state = LoRA_STATE;		   // If time is valid - wake on the right minute of the hour
   d437a:	f005 ffb6 	bl	da2ea <_ZN9TimeClass3nowEv>
   d437e:	4a63      	ldr	r2, [pc, #396]	; (d450c <loop+0x1b8>)
   d4380:	e9d2 3200 	ldrd	r3, r2, [r2]
   d4384:	1ac6      	subs	r6, r0, r3
   d4386:	4b62      	ldr	r3, [pc, #392]	; (d4510 <loop+0x1bc>)
   d4388:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d438c:	eb61 0702 	sbc.w	r7, r1, r2
   d4390:	8b5a      	ldrh	r2, [r3, #26]
   d4392:	2300      	movs	r3, #0
   d4394:	42b2      	cmp	r2, r6
   d4396:	41bb      	sbcs	r3, r7
   d4398:	da6d      	bge.n	d4476 <loop+0x122>
   d439a:	2304      	movs	r3, #4
				state = IDLE_STATE;
   d439c:	702b      	strb	r3, [r5, #0]
   d439e:	e06a      	b.n	d4476 <loop+0x122>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d43a0:	4b59      	ldr	r3, [pc, #356]	; (d4508 <loop+0x1b4>)
   d43a2:	781b      	ldrb	r3, [r3, #0]
   d43a4:	2b03      	cmp	r3, #3
   d43a6:	d001      	beq.n	d43ac <loop+0x58>
   d43a8:	f7ff ff78 	bl	d429c <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d43ac:	2100      	movs	r1, #0
   d43ae:	4859      	ldr	r0, [pc, #356]	; (d4514 <loop+0x1c0>)
   d43b0:	f000 ff2c 	bl	d520c <_ZN6AB18056setWDTEi>
			int wakeInSeconds = sysStatus.nextReportSeconds - (Time.now() - lastPublish);  // sleep till next event
   d43b4:	4b56      	ldr	r3, [pc, #344]	; (d4510 <loop+0x1bc>)
   d43b6:	8b5e      	ldrh	r6, [r3, #26]
   d43b8:	4b54      	ldr	r3, [pc, #336]	; (d450c <loop+0x1b8>)
   d43ba:	681c      	ldr	r4, [r3, #0]
   d43bc:	f005 ff95 	bl	da2ea <_ZN9TimeClass3nowEv>
   d43c0:	4426      	add	r6, r4
   d43c2:	1a34      	subs	r4, r6, r0
			Log.info("Sleep for %i seconds", wakeInSeconds);
   d43c4:	4622      	mov	r2, r4
   d43c6:	4954      	ldr	r1, [pc, #336]	; (d4518 <loop+0x1c4>)
   d43c8:	4854      	ldr	r0, [pc, #336]	; (d451c <loop+0x1c8>)
   d43ca:	f7ff fecb 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   d43ce:	4b54      	ldr	r3, [pc, #336]	; (d4520 <loop+0x1cc>)
   d43d0:	7d1a      	ldrb	r2, [r3, #20]
   d43d2:	b10a      	cbz	r2, d43d8 <loop+0x84>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d43d4:	2202      	movs	r2, #2
   d43d6:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   d43d8:	4b52      	ldr	r3, [pc, #328]	; (d4524 <loop+0x1d0>)
   d43da:	4851      	ldr	r0, [pc, #324]	; (d4520 <loop+0x1cc>)
   d43dc:	881f      	ldrh	r7, [r3, #0]
   d43de:	2200      	movs	r2, #0
   d43e0:	4639      	mov	r1, r7
   d43e2:	f7ff fe8b 	bl	d40fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d43e6:	7d03      	ldrb	r3, [r0, #20]
   d43e8:	4606      	mov	r6, r0
   d43ea:	b1f3      	cbz	r3, d442a <loop+0xd6>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43ec:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   d43ee:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   d43f2:	68db      	ldr	r3, [r3, #12]
   d43f4:	fb08 f804 	mul.w	r8, r8, r4
        if (!start) {
   d43f8:	b123      	cbz	r3, d4404 <loop+0xb0>
            if (start->type == type) {
   d43fa:	889a      	ldrh	r2, [r3, #4]
   d43fc:	2a04      	cmp	r2, #4
   d43fe:	d07e      	beq.n	d44fe <loop+0x1aa>
            start = start->next;
   d4400:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4402:	e7f9      	b.n	d43f8 <loop+0xa4>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4404:	4948      	ldr	r1, [pc, #288]	; (d4528 <loop+0x1d4>)
   d4406:	2010      	movs	r0, #16
   d4408:	f006 fa58 	bl	da8bc <_ZnwjRKSt9nothrow_t>
   d440c:	4604      	mov	r4, r0
   d440e:	2800      	cmp	r0, #0
   d4410:	d073      	beq.n	d44fa <loop+0x1a6>
   d4412:	2210      	movs	r2, #16
   d4414:	2100      	movs	r1, #0
   d4416:	f006 fefd 	bl	db214 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d441a:	4b44      	ldr	r3, [pc, #272]	; (d452c <loop+0x1d8>)
   d441c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d441e:	2304      	movs	r3, #4
   d4420:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4422:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d4424:	e9c4 3802 	strd	r3, r8, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4428:	6134      	str	r4, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d442a:	493d      	ldr	r1, [pc, #244]	; (d4520 <loop+0x1cc>)
   d442c:	a801      	add	r0, sp, #4
   d442e:	f005 fdc3 	bl	d9fb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4432:	4838      	ldr	r0, [pc, #224]	; (d4514 <loop+0x1c0>)
   d4434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4438:	f000 fee8 	bl	d520c <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d443c:	9b01      	ldr	r3, [sp, #4]
        if (wakeupSource_) {
   d443e:	2b00      	cmp	r3, #0
   d4440:	d030      	beq.n	d44a4 <loop+0x150>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4442:	889a      	ldrh	r2, [r3, #4]
   d4444:	2a01      	cmp	r2, #1
   d4446:	d12d      	bne.n	d44a4 <loop+0x150>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d4448:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   d444a:	429f      	cmp	r7, r3
   d444c:	d10d      	bne.n	d446a <loop+0x116>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   d444e:	4938      	ldr	r1, [pc, #224]	; (d4530 <loop+0x1dc>)
   d4450:	a804      	add	r0, sp, #16
   d4452:	f005 fcea 	bl	d9e2a <_ZN6StringC1EPKc>
   d4456:	a804      	add	r0, sp, #16
   d4458:	f000 fa7e 	bl	d4958 <_Z15setLowPowerMode6String>
   d445c:	a804      	add	r0, sp, #16
   d445e:	f005 fc99 	bl	d9d94 <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   d4462:	4934      	ldr	r1, [pc, #208]	; (d4534 <loop+0x1e0>)
   d4464:	482d      	ldr	r0, [pc, #180]	; (d451c <loop+0x1c8>)
   d4466:	f7ff fe7d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   d446a:	9801      	ldr	r0, [sp, #4]
			state = IDLE_STATE;
   d446c:	2302      	movs	r3, #2
   d446e:	702b      	strb	r3, [r5, #0]
   d4470:	b108      	cbz	r0, d4476 <loop+0x122>
            free(wakeupSource_);
   d4472:	f003 f9b5 	bl	d77e0 <free>
	ab1805.loop();                                  							// Keeps the RTC synchronized with the Boron's clock
   d4476:	4827      	ldr	r0, [pc, #156]	; (d4514 <loop+0x1c0>)
   d4478:	f001 fa4a 	bl	d5910 <_ZN6AB18054loopEv>
    storageObjectLoop();                            							// Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   d447c:	f000 fbe4 	bl	d4c48 <_Z17storageObjectLoopv>
	if (rescueMode) {
   d4480:	4b2d      	ldr	r3, [pc, #180]	; (d4538 <loop+0x1e4>)
   d4482:	781a      	ldrb	r2, [r3, #0]
   d4484:	b15a      	cbz	r2, d449e <loop+0x14a>
		rescueMode = false;
   d4486:	2200      	movs	r2, #0
   d4488:	701a      	strb	r2, [r3, #0]
		sysStatus.nextReportSeconds = 60;										// Rescue mode publish evert minute until we can connect
   d448a:	4b21      	ldr	r3, [pc, #132]	; (d4510 <loop+0x1bc>)
		Log.info("Send failed - going to send every minute");
   d448c:	4823      	ldr	r0, [pc, #140]	; (d451c <loop+0x1c8>)
		sysStatus.lowPowerMode = false;
   d448e:	721a      	strb	r2, [r3, #8]
		sysStatus.nextReportSeconds = 60;										// Rescue mode publish evert minute until we can connect
   d4490:	213c      	movs	r1, #60	; 0x3c
   d4492:	8359      	strh	r1, [r3, #26]
		Log.info("Send failed - going to send every minute");
   d4494:	4929      	ldr	r1, [pc, #164]	; (d453c <loop+0x1e8>)
   d4496:	f7ff fe65 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		state = IDLE_STATE;
   d449a:	2302      	movs	r3, #2
   d449c:	702b      	strb	r3, [r5, #0]
}
   d449e:	b008      	add	sp, #32
   d44a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return std::numeric_limits<pin_t>::max();
   d44a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d44a8:	e7cf      	b.n	d444a <loop+0xf6>
			if (state != oldState) {
   d44aa:	4b17      	ldr	r3, [pc, #92]	; (d4508 <loop+0x1b4>)
   d44ac:	4c22      	ldr	r4, [pc, #136]	; (d4538 <loop+0x1e4>)
   d44ae:	781b      	ldrb	r3, [r3, #0]
   d44b0:	2b04      	cmp	r3, #4
   d44b2:	d00e      	beq.n	d44d2 <loop+0x17e>
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d44b4:	f7ff fef2 	bl	d429c <_Z22publishStateTransitionv>
				takeMeasurements();
   d44b8:	f000 fd4e 	bl	d4f58 <_Z16takeMeasurementsv>
				lastPublish = Time.now();
   d44bc:	f005 ff15 	bl	da2ea <_ZN9TimeClass3nowEv>
   d44c0:	4b12      	ldr	r3, [pc, #72]	; (d450c <loop+0x1b8>)
   d44c2:	17c1      	asrs	r1, r0, #31
   d44c4:	e9c3 0100 	strd	r0, r1, [r3]
				if (!composeDataReportNode()) rescueMode = true;				// Initiate sending report
   d44c8:	f000 f8b2 	bl	d4630 <_Z21composeDataReportNodev>
   d44cc:	b908      	cbnz	r0, d44d2 <loop+0x17e>
   d44ce:	2301      	movs	r3, #1
   d44d0:	7023      	strb	r3, [r4, #0]
			if (receiveAcknowledmentDataReportNode()) {							// Listen for acknowledgement
   d44d2:	f000 f91f 	bl	d4714 <_Z34receiveAcknowledmentDataReportNodev>
   d44d6:	b168      	cbz	r0, d44f4 <loop+0x1a0>
				current.hourly = 0;												// Zero the hourly count
   d44d8:	4b19      	ldr	r3, [pc, #100]	; (d4540 <loop+0x1ec>)
   d44da:	2200      	movs	r2, #0
   d44dc:	839a      	strh	r2, [r3, #28]
				if (!sysStatus.lowPowerMode && (sysStatus.nextReportSeconds / 60 > 12)) sysStatus.lowPowerMode = true;
   d44de:	4b0c      	ldr	r3, [pc, #48]	; (d4510 <loop+0x1bc>)
   d44e0:	7a1a      	ldrb	r2, [r3, #8]
   d44e2:	b92a      	cbnz	r2, d44f0 <loop+0x19c>
   d44e4:	8b5a      	ldrh	r2, [r3, #26]
   d44e6:	f5b2 7f43 	cmp.w	r2, #780	; 0x30c
   d44ea:	bf24      	itt	cs
   d44ec:	2201      	movcs	r2, #1
   d44ee:	721a      	strbcs	r2, [r3, #8]
				state = IDLE_STATE;
   d44f0:	2302      	movs	r3, #2
   d44f2:	e753      	b.n	d439c <loop+0x48>
			else rescueMode = true;
   d44f4:	2301      	movs	r3, #1
   d44f6:	7023      	strb	r3, [r4, #0]
   d44f8:	e7bd      	b.n	d4476 <loop+0x122>
                valid_ = false;
   d44fa:	7530      	strb	r0, [r6, #20]
                return *this;
   d44fc:	e795      	b.n	d442a <loop+0xd6>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d44fe:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   d4502:	e792      	b.n	d442a <loop+0xd6>
   d4504:	2003def2 	.word	0x2003def2
   d4508:	2003def0 	.word	0x2003def0
   d450c:	2003dee8 	.word	0x2003dee8
   d4510:	2003e2c8 	.word	0x2003e2c8
   d4514:	2003dea0 	.word	0x2003dea0
   d4518:	000db628 	.word	0x000db628
   d451c:	2003e574 	.word	0x2003e574
   d4520:	2003dec0 	.word	0x2003dec0
   d4524:	000db840 	.word	0x000db840
   d4528:	000dc288 	.word	0x000dc288
   d452c:	00030010 	.word	0x00030010
   d4530:	000db63d 	.word	0x000db63d
   d4534:	000db63f 	.word	0x000db63f
   d4538:	2003def1 	.word	0x2003def1
   d453c:	000db669 	.word	0x000db669
   d4540:	2003e2a8 	.word	0x2003e2a8

000d4544 <_GLOBAL__sub_I___appProductID>:
   d4544:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d4546:	4b1d      	ldr	r3, [pc, #116]	; (d45bc <_GLOBAL__sub_I___appProductID+0x78>)
   d4548:	2501      	movs	r5, #1
   d454a:	701d      	strb	r5, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d454c:	f006 f890 	bl	da670 <spark_protocol_instance>
   d4550:	2300      	movs	r3, #0
   d4552:	461a      	mov	r2, r3
   d4554:	210d      	movs	r1, #13
   d4556:	f006 f893 	bl	da680 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d455a:	f006 f889 	bl	da670 <spark_protocol_instance>
   d455e:	2300      	movs	r3, #0
   d4560:	461a      	mov	r2, r3
   d4562:	4619      	mov	r1, r3
   d4564:	f006 f894 	bl	da690 <spark_protocol_set_product_firmware_version>
        : config_(config) {
   d4568:	4a15      	ldr	r2, [pc, #84]	; (d45c0 <_GLOBAL__sub_I___appProductID+0x7c>)
   d456a:	4613      	mov	r3, r2
   d456c:	1d11      	adds	r1, r2, #4
   d456e:	f843 1b09 	str.w	r1, [r3], #9
              valid_(true) {
   d4572:	2400      	movs	r4, #0
   d4574:	f8a2 4009 	strh.w	r4, [r2, #9]
   d4578:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d457a:	4b12      	ldr	r3, [pc, #72]	; (d45c4 <_GLOBAL__sub_I___appProductID+0x80>)
              valid_(true) {
   d457c:	7515      	strb	r5, [r2, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d457e:	6053      	str	r3, [r2, #4]
        config_.wakeup_sources = nullptr;
   d4580:	e9c2 4403 	strd	r4, r4, [r2, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4584:	7214      	strb	r4, [r2, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d4586:	f006 f94f 	bl	da828 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d458a:	4d0f      	ldr	r5, [pc, #60]	; (d45c8 <_GLOBAL__sub_I___appProductID+0x84>)
   d458c:	4601      	mov	r1, r0
   d458e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4592:	4623      	mov	r3, r4
   d4594:	4628      	mov	r0, r5
   d4596:	f001 fa5b 	bl	d5a50 <_ZN6MB85RCC1ER7TwoWireji>
   d459a:	4b0c      	ldr	r3, [pc, #48]	; (d45cc <_GLOBAL__sub_I___appProductID+0x88>)
   d459c:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d459e:	f006 f943 	bl	da828 <_Z19__fetch_global_Wirev>
   d45a2:	2269      	movs	r2, #105	; 0x69
   d45a4:	4601      	mov	r1, r0
   d45a6:	480a      	ldr	r0, [pc, #40]	; (d45d0 <_GLOBAL__sub_I___appProductID+0x8c>)
   d45a8:	f000 fd40 	bl	d502c <_ZN6AB1805C1ER7TwoWireh>
time_t lastPublish = Time.now();
   d45ac:	f005 fe9d 	bl	da2ea <_ZN9TimeClass3nowEv>
   d45b0:	4b08      	ldr	r3, [pc, #32]	; (d45d4 <_GLOBAL__sub_I___appProductID+0x90>)
   d45b2:	17c1      	asrs	r1, r0, #31
   d45b4:	e9c3 0100 	strd	r0, r1, [r3]
   d45b8:	bd38      	pop	{r3, r4, r5, pc}
   d45ba:	bf00      	nop
   d45bc:	2003de90 	.word	0x2003de90
   d45c0:	2003dec0 	.word	0x2003dec0
   d45c4:	00030010 	.word	0x00030010
   d45c8:	2003ded8 	.word	0x2003ded8
   d45cc:	000db69c 	.word	0x000db69c
   d45d0:	2003dea0 	.word	0x2003dea0
   d45d4:	2003dee8 	.word	0x2003dee8

000d45d8 <_Z14initializeLoRAv>:
 * @brief Initialize the LoRA radio - this is a common step for nodes and gateways
 * 
 * @return true - initialization successful
 * @return false - initialization failed
 */
bool initializeLoRA() {
   d45d8:	b510      	push	{r4, lr}
 	// Set up the Radio Module
	if (!manager.init()) {
   d45da:	480e      	ldr	r0, [pc, #56]	; (d4614 <_Z14initializeLoRAv+0x3c>)
   d45dc:	f002 f892 	bl	d6704 <_ZN8RHRouter4initEv>
   d45e0:	4604      	mov	r4, r0
   d45e2:	b928      	cbnz	r0, d45f0 <_Z14initializeLoRAv+0x18>
		Log.info("init failed");	// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d45e4:	490c      	ldr	r1, [pc, #48]	; (d4618 <_Z14initializeLoRAv+0x40>)
   d45e6:	480d      	ldr	r0, [pc, #52]	; (d461c <_Z14initializeLoRAv+0x44>)
   d45e8:	f7ff fdbc 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i", sysStatus.nodeNumber, sysStatus.deviceID);
	return true;
}
   d45ec:	4620      	mov	r0, r4
   d45ee:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d45f0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; d4620 <_Z14initializeLoRAv+0x48>
   d45f4:	480b      	ldr	r0, [pc, #44]	; (d4624 <_Z14initializeLoRAv+0x4c>)
   d45f6:	f002 fb5b 	bl	d6cb0 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   d45fa:	480a      	ldr	r0, [pc, #40]	; (d4624 <_Z14initializeLoRAv+0x4c>)
   d45fc:	2200      	movs	r2, #0
   d45fe:	2117      	movs	r1, #23
   d4600:	f002 fcd0 	bl	d6fa4 <_ZN7RH_RF9510setTxPowerEab>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i", sysStatus.nodeNumber, sysStatus.deviceID);
   d4604:	4a08      	ldr	r2, [pc, #32]	; (d4628 <_Z14initializeLoRAv+0x50>)
   d4606:	4909      	ldr	r1, [pc, #36]	; (d462c <_Z14initializeLoRAv+0x54>)
   d4608:	8813      	ldrh	r3, [r2, #0]
   d460a:	4804      	ldr	r0, [pc, #16]	; (d461c <_Z14initializeLoRAv+0x44>)
   d460c:	8852      	ldrh	r2, [r2, #2]
   d460e:	f7ff fda9 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	return true;
   d4612:	e7eb      	b.n	d45ec <_Z14initializeLoRAv+0x14>
   d4614:	2003e124 	.word	0x2003e124
   d4618:	000db6b0 	.word	0x000db6b0
   d461c:	2003e574 	.word	0x2003e574
   d4620:	4464c000 	.word	0x4464c000
   d4624:	2003dff0 	.word	0x2003dff0
   d4628:	2003e2c8 	.word	0x2003e2c8
   d462c:	000db6bc 	.word	0x000db6bc

000d4630 <_Z21composeDataReportNodev>:
}

// ************************************************************************
// *****                         Node Functions                       *****
// ************************************************************************
bool composeDataReportNode() {
   d4630:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Sending data report to Gateway");
   d4632:	492c      	ldr	r1, [pc, #176]	; (d46e4 <_Z21composeDataReportNodev+0xb4>)
   d4634:	482c      	ldr	r0, [pc, #176]	; (d46e8 <_Z21composeDataReportNodev+0xb8>)
	digitalWrite(BLUE_LED,HIGH);

	static uint8_t msgCnt = 0;

	buf[0] = highByte(sysStatus.nodeNumber);								// to be replaced/updated
   d4636:	4c2d      	ldr	r4, [pc, #180]	; (d46ec <_Z21composeDataReportNodev+0xbc>)
	Log.info("Sending data report to Gateway");
   d4638:	f7ff fd94 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   d463c:	4b2c      	ldr	r3, [pc, #176]	; (d46f0 <_Z21composeDataReportNodev+0xc0>)
   d463e:	881e      	ldrh	r6, [r3, #0]
   d4640:	2101      	movs	r1, #1
   d4642:	4630      	mov	r0, r6
   d4644:	f006 f87b 	bl	da73e <digitalWrite>
	buf[0] = highByte(sysStatus.nodeNumber);								// to be replaced/updated
   d4648:	4a2a      	ldr	r2, [pc, #168]	; (d46f4 <_Z21composeDataReportNodev+0xc4>)
   d464a:	8853      	ldrh	r3, [r2, #2]
	buf[1] = lowByte(sysStatus.nodeNumber);								// to be replaced/updated
   d464c:	7063      	strb	r3, [r4, #1]
	buf[0] = highByte(sysStatus.nodeNumber);								// to be replaced/updated
   d464e:	1219      	asrs	r1, r3, #8
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d4650:	8813      	ldrh	r3, [r2, #0]
	buf[0] = highByte(sysStatus.nodeNumber);								// to be replaced/updated
   d4652:	7021      	strb	r1, [r4, #0]
	buf[3] = lowByte(sysStatus.deviceID);
   d4654:	70e3      	strb	r3, [r4, #3]
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d4656:	1219      	asrs	r1, r3, #8
	buf[4] = 1;						// Set for code release - fix later
	buf[5] = highByte(current.hourly);
   d4658:	4b27      	ldr	r3, [pc, #156]	; (d46f8 <_Z21composeDataReportNodev+0xc8>)
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d465a:	70a1      	strb	r1, [r4, #2]
	buf[5] = highByte(current.hourly);
   d465c:	8b99      	ldrh	r1, [r3, #28]
	buf[6] = lowByte(current.hourly); 
   d465e:	71a1      	strb	r1, [r4, #6]
	buf[5] = highByte(current.hourly);
   d4660:	1208      	asrs	r0, r1, #8
	buf[7] = highByte(current.daily);
   d4662:	8bd9      	ldrh	r1, [r3, #30]
	buf[5] = highByte(current.hourly);
   d4664:	7160      	strb	r0, [r4, #5]
	buf[8] = lowByte(current.daily); 
   d4666:	7221      	strb	r1, [r4, #8]
	buf[7] = highByte(current.daily);
   d4668:	1208      	asrs	r0, r1, #8
	buf[9] = current.internalTempC;
   d466a:	7819      	ldrb	r1, [r3, #0]
   d466c:	7261      	strb	r1, [r4, #9]
	buf[10] = current.stateOfCharge;
   d466e:	6859      	ldr	r1, [r3, #4]
	buf[11] = current.batteryState;	
   d4670:	7a1b      	ldrb	r3, [r3, #8]
	buf[7] = highByte(current.daily);
   d4672:	71e0      	strb	r0, [r4, #7]
	buf[4] = 1;						// Set for code release - fix later
   d4674:	2501      	movs	r5, #1
	buf[11] = current.batteryState;	
   d4676:	72e3      	strb	r3, [r4, #11]
	buf[12] = sysStatus.resetCount;
	buf[13] = 1;				// reserved for later
	buf[14] = highByte(driver.lastRssi());
   d4678:	4820      	ldr	r0, [pc, #128]	; (d46fc <_Z21composeDataReportNodev+0xcc>)
	buf[12] = sysStatus.resetCount;
   d467a:	68d3      	ldr	r3, [r2, #12]
	buf[10] = current.stateOfCharge;
   d467c:	72a1      	strb	r1, [r4, #10]
	buf[12] = sysStatus.resetCount;
   d467e:	7323      	strb	r3, [r4, #12]
	buf[4] = 1;						// Set for code release - fix later
   d4680:	7125      	strb	r5, [r4, #4]
	buf[13] = 1;				// reserved for later
   d4682:	7365      	strb	r5, [r4, #13]
	buf[14] = highByte(driver.lastRssi());
   d4684:	f001 fbb9 	bl	d5dfa <_ZN15RHGenericDriver8lastRssiEv>
   d4688:	1200      	asrs	r0, r0, #8
   d468a:	73a0      	strb	r0, [r4, #14]
	buf[15] = lowByte(driver.lastRssi()); 
   d468c:	481b      	ldr	r0, [pc, #108]	; (d46fc <_Z21composeDataReportNodev+0xcc>)
   d468e:	f001 fbb4 	bl	d5dfa <_ZN15RHGenericDriver8lastRssiEv>
	buf[16] = msgCnt++;
   d4692:	4b1b      	ldr	r3, [pc, #108]	; (d4700 <_Z21composeDataReportNodev+0xd0>)
	buf[15] = lowByte(driver.lastRssi()); 
   d4694:	73e0      	strb	r0, [r4, #15]
	buf[16] = msgCnt++;
   d4696:	781a      	ldrb	r2, [r3, #0]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message %d", buf[16]);
   d4698:	4813      	ldr	r0, [pc, #76]	; (d46e8 <_Z21composeDataReportNodev+0xb8>)
	buf[16] = msgCnt++;
   d469a:	7422      	strb	r2, [r4, #16]
   d469c:	1951      	adds	r1, r2, r5
   d469e:	7019      	strb	r1, [r3, #0]
	Log.info("sending message %d", buf[16]);
   d46a0:	4918      	ldr	r1, [pc, #96]	; (d4704 <_Z21composeDataReportNodev+0xd4>)
   d46a2:	f7ff fd5f 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT) == RH_ROUTER_ERROR_NONE) {
   d46a6:	2303      	movs	r3, #3
   d46a8:	9300      	str	r3, [sp, #0]
   d46aa:	4621      	mov	r1, r4
   d46ac:	4816      	ldr	r0, [pc, #88]	; (d4708 <_Z21composeDataReportNodev+0xd8>)
   d46ae:	2300      	movs	r3, #0
   d46b0:	2211      	movs	r2, #17
   d46b2:	f001 fdbf 	bl	d6234 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d46b6:	4604      	mov	r4, r0
   d46b8:	b950      	cbnz	r0, d46d0 <_Z21composeDataReportNodev+0xa0>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   d46ba:	4914      	ldr	r1, [pc, #80]	; (d470c <_Z21composeDataReportNodev+0xdc>)
   d46bc:	480a      	ldr	r0, [pc, #40]	; (d46e8 <_Z21composeDataReportNodev+0xb8>)
   d46be:	f7ff fd51 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   d46c2:	4630      	mov	r0, r6
   d46c4:	4621      	mov	r1, r4
   d46c6:	f006 f83a 	bl	da73e <digitalWrite>
		return true;
   d46ca:	4628      	mov	r0, r5
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   d46cc:	b002      	add	sp, #8
   d46ce:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   d46d0:	490f      	ldr	r1, [pc, #60]	; (d4710 <_Z21composeDataReportNodev+0xe0>)
   d46d2:	4805      	ldr	r0, [pc, #20]	; (d46e8 <_Z21composeDataReportNodev+0xb8>)
   d46d4:	f7ff fd46 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   d46d8:	4630      	mov	r0, r6
   d46da:	2100      	movs	r1, #0
   d46dc:	f006 f82f 	bl	da73e <digitalWrite>
		return false;
   d46e0:	2000      	movs	r0, #0
   d46e2:	e7f3      	b.n	d46cc <_Z21composeDataReportNodev+0x9c>
   d46e4:	000db739 	.word	0x000db739
   d46e8:	2003e574 	.word	0x2003e574
   d46ec:	2003def5 	.word	0x2003def5
   d46f0:	000db83e 	.word	0x000db83e
   d46f4:	2003e2c8 	.word	0x2003e2c8
   d46f8:	2003e2a8 	.word	0x2003e2a8
   d46fc:	2003dff0 	.word	0x2003dff0
   d4700:	2003def4 	.word	0x2003def4
   d4704:	000db758 	.word	0x000db758
   d4708:	2003e124 	.word	0x2003e124
   d470c:	000db76b 	.word	0x000db76b
   d4710:	000db794 	.word	0x000db794

000d4714 <_Z34receiveAcknowledmentDataReportNodev>:

bool receiveAcknowledmentDataReportNode() {
   d4714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag)) {
   d4718:	4f2c      	ldr	r7, [pc, #176]	; (d47cc <_Z34receiveAcknowledmentDataReportNodev+0xb8>)
   d471a:	4d2d      	ldr	r5, [pc, #180]	; (d47d0 <_Z34receiveAcknowledmentDataReportNodev+0xbc>)
   d471c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; d47f4 <_Z34receiveAcknowledmentDataReportNodev+0xe0>
   d4720:	f8df 90d4 	ldr.w	r9, [pc, #212]	; d47f8 <_Z34receiveAcknowledmentDataReportNodev+0xe4>
   d4724:	482b      	ldr	r0, [pc, #172]	; (d47d4 <_Z34receiveAcknowledmentDataReportNodev+0xc0>)
bool receiveAcknowledmentDataReportNode() {
   d4726:	b08c      	sub	sp, #48	; 0x30
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag)) {
   d4728:	2400      	movs	r4, #0
   d472a:	e9cd 4a02 	strd	r4, sl, [sp, #8]
   d472e:	9404      	str	r4, [sp, #16]
   d4730:	9401      	str	r4, [sp, #4]
   d4732:	f8cd 9000 	str.w	r9, [sp]
   d4736:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d473a:	463a      	mov	r2, r7
   d473c:	4629      	mov	r1, r5
   d473e:	f001 fe7f 	bl	d6440 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d4742:	4606      	mov	r6, r0
   d4744:	2800      	cmp	r0, #0
   d4746:	d03b      	beq.n	d47c0 <_Z34receiveAcknowledmentDataReportNodev+0xac>
		buf[len] = 0;
   d4748:	783b      	ldrb	r3, [r7, #0]
		lora_state = (LoRA_State)messageFlag;
   d474a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d47fc <_Z34receiveAcknowledmentDataReportNodev+0xe8>
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d474e:	f899 2000 	ldrb.w	r2, [r9]
		buf[len] = 0;
   d4752:	54ec      	strb	r4, [r5, r3]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d4754:	4820      	ldr	r0, [pc, #128]	; (d47d8 <_Z34receiveAcknowledmentDataReportNodev+0xc4>)
		lora_state = (LoRA_State)messageFlag;
   d4756:	f89a 3000 	ldrb.w	r3, [sl]
   d475a:	f888 3000 	strb.w	r3, [r8]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d475e:	9207      	str	r2, [sp, #28]
   d4760:	f001 fb4b 	bl	d5dfa <_ZN15RHGenericDriver8lastRssiEv>
   d4764:	7839      	ldrb	r1, [r7, #0]
   d4766:	9101      	str	r1, [sp, #4]
   d4768:	4603      	mov	r3, r0
   d476a:	491c      	ldr	r1, [pc, #112]	; (d47dc <_Z34receiveAcknowledmentDataReportNodev+0xc8>)
   d476c:	f898 0000 	ldrb.w	r0, [r8]
   d4770:	9a07      	ldr	r2, [sp, #28]
		sysStatus.nextReportSeconds = ((buf[7] << 8) | buf[8]);
   d4772:	4f1b      	ldr	r7, [pc, #108]	; (d47e0 <_Z34receiveAcknowledmentDataReportNodev+0xcc>)
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d4774:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   d4778:	9100      	str	r1, [sp, #0]
   d477a:	481a      	ldr	r0, [pc, #104]	; (d47e4 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d477c:	491a      	ldr	r1, [pc, #104]	; (d47e8 <_Z34receiveAcknowledmentDataReportNodev+0xd4>)
   d477e:	f7ff fcf1 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.nextReportSeconds = ((buf[7] << 8) | buf[8]);
   d4782:	79ea      	ldrb	r2, [r5, #7]
   d4784:	7a2b      	ldrb	r3, [r5, #8]
   d4786:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d478a:	f8d5 2001 	ldr.w	r2, [r5, #1]
   d478e:	837b      	strh	r3, [r7, #26]
		uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   d4790:	ba12      	rev	r2, r2
		Time.setTime(newTime);  // Set time based on response from gateway
   d4792:	4610      	mov	r0, r2
   d4794:	4621      	mov	r1, r4
   d4796:	9207      	str	r2, [sp, #28]
   d4798:	f005 fc91 	bl	da0be <_ZN9TimeClass7setTimeEx>
		Log.info("Time set to %s and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.nextReportSeconds);
   d479c:	9a07      	ldr	r2, [sp, #28]
   d479e:	4623      	mov	r3, r4
   d47a0:	a808      	add	r0, sp, #32
   d47a2:	f005 fc9f 	bl	da0e4 <_ZN9TimeClass7timeStrEx>
   d47a6:	480f      	ldr	r0, [pc, #60]	; (d47e4 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d47a8:	8b7b      	ldrh	r3, [r7, #26]
   d47aa:	9a08      	ldr	r2, [sp, #32]
   d47ac:	490f      	ldr	r1, [pc, #60]	; (d47ec <_Z34receiveAcknowledmentDataReportNodev+0xd8>)
   d47ae:	f7ff fcd9 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d47b2:	a808      	add	r0, sp, #32
   d47b4:	f005 faee 	bl	d9d94 <_ZN6StringD1Ev>
	}
	else {
		Log.info("No reply, are the gateways running?");
		return false;
	}
}
   d47b8:	4630      	mov	r0, r6
   d47ba:	b00c      	add	sp, #48	; 0x30
   d47bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Log.info("No reply, are the gateways running?");
   d47c0:	490b      	ldr	r1, [pc, #44]	; (d47f0 <_Z34receiveAcknowledmentDataReportNodev+0xdc>)
   d47c2:	4808      	ldr	r0, [pc, #32]	; (d47e4 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d47c4:	f7ff fcce 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		return false;
   d47c8:	e7f6      	b.n	d47b8 <_Z34receiveAcknowledmentDataReportNodev+0xa4>
   d47ca:	bf00      	nop
   d47cc:	2003dd58 	.word	0x2003dd58
   d47d0:	2003def5 	.word	0x2003def5
   d47d4:	2003e124 	.word	0x2003e124
   d47d8:	2003dff0 	.word	0x2003dff0
   d47dc:	2003dd59 	.word	0x2003dd59
   d47e0:	2003e2c8 	.word	0x2003e2c8
   d47e4:	2003e574 	.word	0x2003e574
   d47e8:	000db6fa 	.word	0x000db6fa
   d47ec:	000db7b7 	.word	0x000db7b7
   d47f0:	000db7e7 	.word	0x000db7e7
   d47f4:	2003e25c 	.word	0x2003e25c
   d47f8:	2003e120 	.word	0x2003e120
   d47fc:	2003e121 	.word	0x2003e121

000d4800 <_GLOBAL__sub_I_loraStateNames>:
}
   d4800:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d4802:	4a08      	ldr	r2, [pc, #32]	; (d4824 <_GLOBAL__sub_I_loraStateNames+0x24>)
   d4804:	4c08      	ldr	r4, [pc, #32]	; (d4828 <_GLOBAL__sub_I_loraStateNames+0x28>)
   d4806:	4909      	ldr	r1, [pc, #36]	; (d482c <_GLOBAL__sub_I_loraStateNames+0x2c>)
   d4808:	7812      	ldrb	r2, [r2, #0]
   d480a:	7809      	ldrb	r1, [r1, #0]
   d480c:	4b08      	ldr	r3, [pc, #32]	; (d4830 <_GLOBAL__sub_I_loraStateNames+0x30>)
   d480e:	4620      	mov	r0, r4
   d4810:	f002 fa10 	bl	d6c34 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, NODE1_ADDRESS);
   d4814:	4621      	mov	r1, r4
   d4816:	4807      	ldr	r0, [pc, #28]	; (d4834 <_GLOBAL__sub_I_loraStateNames+0x34>)
}
   d4818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, NODE1_ADDRESS);
   d481c:	220a      	movs	r2, #10
   d481e:	f001 bcff 	b.w	d6220 <_ZN6RHMeshC1ER15RHGenericDriverh>
   d4822:	bf00      	nop
   d4824:	000db844 	.word	0x000db844
   d4828:	2003dff0 	.word	0x2003dff0
   d482c:	000db842 	.word	0x000db842
   d4830:	2003e30c 	.word	0x2003e30c
   d4834:	2003e124 	.word	0x2003e124

000d4838 <_Z18initializePinModesv>:
const pin_t TMP36_SENSE_PIN   = A4;
const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   d4838:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   d483a:	4909      	ldr	r1, [pc, #36]	; (d4860 <_Z18initializePinModesv+0x28>)
   d483c:	4809      	ldr	r0, [pc, #36]	; (d4864 <_Z18initializePinModesv+0x2c>)
   d483e:	f7ff fc91 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   d4842:	2102      	movs	r1, #2
   d4844:	2004      	movs	r0, #4
   d4846:	f005 ff69 	bl	da71c <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   d484a:	2100      	movs	r1, #0
   d484c:	2008      	movs	r0, #8
   d484e:	f005 ff65 	bl	da71c <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   d4852:	2101      	movs	r1, #1
   d4854:	2007      	movs	r0, #7
   d4856:	f005 ff61 	bl	da71c <pinMode>
    return true;
}
   d485a:	2001      	movs	r0, #1
   d485c:	bd08      	pop	{r3, pc}
   d485e:	bf00      	nop
   d4860:	000db80b 	.word	0x000db80b
   d4864:	2003e574 	.word	0x2003e574

000d4868 <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   d4868:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   d486a:	4918      	ldr	r1, [pc, #96]	; (d48cc <_Z18initializePowerCfgv+0x64>)
   d486c:	4818      	ldr	r0, [pc, #96]	; (d48d0 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   d486e:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4870:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   d4872:	f7ff fc77 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4876:	4622      	mov	r2, r4
   d4878:	2100      	movs	r1, #0
   d487a:	4668      	mov	r0, sp
   d487c:	f006 fcca 	bl	db214 <memset>
   d4880:	4622      	mov	r2, r4
   d4882:	2100      	movs	r1, #0
   d4884:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4888:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d488c:	f006 fcc2 	bl	db214 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   d4890:	2100      	movs	r1, #0
   d4892:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4896:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d489a:	f002 fef5 	bl	d7688 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d489e:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d48a2:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d48a6:	4b0b      	ldr	r3, [pc, #44]	; (d48d4 <_Z18initializePowerCfgv+0x6c>)
   d48a8:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d48aa:	f241 0370 	movw	r3, #4208	; 0x1070
   d48ae:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d48b2:	9b00      	ldr	r3, [sp, #0]
   d48b4:	2100      	movs	r1, #0
   d48b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d48ba:	4668      	mov	r0, sp
   d48bc:	9300      	str	r3, [sp, #0]
   d48be:	f002 fee3 	bl	d7688 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   d48c2:	3800      	subs	r0, #0
   d48c4:	bf18      	it	ne
   d48c6:	2001      	movne	r0, #1
   d48c8:	b010      	add	sp, #64	; 0x40
   d48ca:	bd10      	pop	{r4, pc}
   d48cc:	000db824 	.word	0x000db824
   d48d0:	2003e574 	.word	0x2003e574
   d48d4:	03840384 	.word	0x03840384

000d48d8 <_ZN5spark10LogHandler5writeEPKcj>:
}
   d48d8:	4770      	bx	lr

000d48da <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   d48da:	6a00      	ldr	r0, [r0, #32]
   d48dc:	6803      	ldr	r3, [r0, #0]
   d48de:	68db      	ldr	r3, [r3, #12]
   d48e0:	4718      	bx	r3
	...

000d48e4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d48e4:	4b0a      	ldr	r3, [pc, #40]	; (d4910 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d48e6:	b510      	push	{r4, lr}
   d48e8:	4604      	mov	r4, r0
   d48ea:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d48ec:	f004 f954 	bl	d8b98 <_ZN5spark10LogManager8instanceEv>
   d48f0:	4621      	mov	r1, r4
   d48f2:	f004 fb16 	bl	d8f22 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d48f6:	f005 fdf9 	bl	da4ec <_Z16_fetch_usbserialv>
   d48fa:	f005 fdeb 	bl	da4d4 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d48fe:	4620      	mov	r0, r4
   d4900:	4b04      	ldr	r3, [pc, #16]	; (d4914 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4902:	f840 3b04 	str.w	r3, [r0], #4
   d4906:	f004 f9f9 	bl	d8cfc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d490a:	4620      	mov	r0, r4
   d490c:	bd10      	pop	{r4, pc}
   d490e:	bf00      	nop
   d4910:	000db8bc 	.word	0x000db8bc
   d4914:	000db8a4 	.word	0x000db8a4

000d4918 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4918:	b510      	push	{r4, lr}
   d491a:	4604      	mov	r4, r0
    }
   d491c:	f7ff ffe2 	bl	d48e4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4920:	4620      	mov	r0, r4
   d4922:	2124      	movs	r1, #36	; 0x24
   d4924:	f005 ffc8 	bl	da8b8 <_ZdlPvj>
   d4928:	4620      	mov	r0, r4
   d492a:	bd10      	pop	{r4, pc}

000d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d492c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d492e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4930:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4932:	b17c      	cbz	r4, d4954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4934:	6863      	ldr	r3, [r4, #4]
   d4936:	3b01      	subs	r3, #1
   d4938:	6063      	str	r3, [r4, #4]
   d493a:	b95b      	cbnz	r3, d4954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d493c:	6823      	ldr	r3, [r4, #0]
   d493e:	4620      	mov	r0, r4
   d4940:	689b      	ldr	r3, [r3, #8]
   d4942:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4944:	68a3      	ldr	r3, [r4, #8]
   d4946:	3b01      	subs	r3, #1
   d4948:	60a3      	str	r3, [r4, #8]
   d494a:	b91b      	cbnz	r3, d4954 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d494c:	6823      	ldr	r3, [r4, #0]
   d494e:	4620      	mov	r0, r4
   d4950:	68db      	ldr	r3, [r3, #12]
   d4952:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4954:	4628      	mov	r0, r5
   d4956:	bd38      	pop	{r3, r4, r5, pc}

000d4958 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4958:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d495a:	4922      	ldr	r1, [pc, #136]	; (d49e4 <_Z15setLowPowerMode6String+0x8c>)
   d495c:	b095      	sub	sp, #84	; 0x54
   d495e:	4604      	mov	r4, r0
   d4960:	f005 fab9 	bl	d9ed6 <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4964:	b138      	cbz	r0, d4976 <_Z15setLowPowerMode6String+0x1e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4966:	4620      	mov	r0, r4
   d4968:	491e      	ldr	r1, [pc, #120]	; (d49e4 <_Z15setLowPowerMode6String+0x8c>)
   d496a:	4c1f      	ldr	r4, [pc, #124]	; (d49e8 <_Z15setLowPowerMode6String+0x90>)
   d496c:	f005 fab3 	bl	d9ed6 <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   d4970:	b948      	cbnz	r0, d4986 <_Z15setLowPowerMode6String+0x2e>
      sysStatus.frequencyMinutes = 12;
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.lowPowerMode = false;
   d4972:	7220      	strb	r0, [r4, #8]
   d4974:	e033      	b.n	d49de <_Z15setLowPowerMode6String+0x86>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4976:	491d      	ldr	r1, [pc, #116]	; (d49ec <_Z15setLowPowerMode6String+0x94>)
   d4978:	4620      	mov	r0, r4
   d497a:	f005 faac 	bl	d9ed6 <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d497e:	2800      	cmp	r0, #0
   d4980:	d1f1      	bne.n	d4966 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   d4982:	b015      	add	sp, #84	; 0x54
   d4984:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4986:	8ba3      	ldrh	r3, [r4, #28]
    sysStatus.lowPowerMode = true;
   d4988:	2501      	movs	r5, #1
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d498a:	2b0b      	cmp	r3, #11
    sysStatus.lowPowerMode = true;
   d498c:	7225      	strb	r5, [r4, #8]
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d498e:	d91b      	bls.n	d49c8 <_Z15setLowPowerMode6String+0x70>
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d4990:	4b17      	ldr	r3, [pc, #92]	; (d49f0 <_Z15setLowPowerMode6String+0x98>)
   d4992:	4a18      	ldr	r2, [pc, #96]	; (d49f4 <_Z15setLowPowerMode6String+0x9c>)
   d4994:	2140      	movs	r1, #64	; 0x40
   d4996:	a804      	add	r0, sp, #16
   d4998:	f002 ff3a 	bl	d7810 <snprintf>
  Log.info(data);
   d499c:	4816      	ldr	r0, [pc, #88]	; (d49f8 <_Z15setLowPowerMode6String+0xa0>)
   d499e:	a904      	add	r1, sp, #16
   d49a0:	f7ff fbe0 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49a4:	f002 fe8c 	bl	d76c0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d49a8:	b160      	cbz	r0, d49c4 <_Z15setLowPowerMode6String+0x6c>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d49aa:	4b14      	ldr	r3, [pc, #80]	; (d49fc <_Z15setLowPowerMode6String+0xa4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d49ac:	4914      	ldr	r1, [pc, #80]	; (d4a00 <_Z15setLowPowerMode6String+0xa8>)
   d49ae:	781b      	ldrb	r3, [r3, #0]
   d49b0:	f88d 3000 	strb.w	r3, [sp]
   d49b4:	a802      	add	r0, sp, #8
   d49b6:	233c      	movs	r3, #60	; 0x3c
   d49b8:	aa04      	add	r2, sp, #16
   d49ba:	f003 fa0f 	bl	d7ddc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49be:	a803      	add	r0, sp, #12
   d49c0:	f7ff ffb4 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d49c4:	2001      	movs	r0, #1
   d49c6:	e7dc      	b.n	d4982 <_Z15setLowPowerMode6String+0x2a>
      Log.info("Increasing reporting frequency to 12 minutes");
   d49c8:	490e      	ldr	r1, [pc, #56]	; (d4a04 <_Z15setLowPowerMode6String+0xac>)
   d49ca:	480b      	ldr	r0, [pc, #44]	; (d49f8 <_Z15setLowPowerMode6String+0xa0>)
   d49cc:	f7ff fbca 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.frequencyMinutes = 12;
   d49d0:	230c      	movs	r3, #12
   d49d2:	83a3      	strh	r3, [r4, #28]
      frequencyUpdated = true;
   d49d4:	4b0c      	ldr	r3, [pc, #48]	; (d4a08 <_Z15setLowPowerMode6String+0xb0>)
   d49d6:	701d      	strb	r5, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d49d8:	7a23      	ldrb	r3, [r4, #8]
   d49da:	2b00      	cmp	r3, #0
   d49dc:	d1d8      	bne.n	d4990 <_Z15setLowPowerMode6String+0x38>
   d49de:	4b0b      	ldr	r3, [pc, #44]	; (d4a0c <_Z15setLowPowerMode6String+0xb4>)
   d49e0:	e7d7      	b.n	d4992 <_Z15setLowPowerMode6String+0x3a>
   d49e2:	bf00      	nop
   d49e4:	000dba14 	.word	0x000dba14
   d49e8:	2003e2c8 	.word	0x2003e2c8
   d49ec:	000db63d 	.word	0x000db63d
   d49f0:	000db848 	.word	0x000db848
   d49f4:	000db87c 	.word	0x000db87c
   d49f8:	2003e574 	.word	0x2003e574
   d49fc:	2003e26c 	.word	0x2003e26c
   d4a00:	000db896 	.word	0x000db896
   d4a04:	000db84f 	.word	0x000db84f
   d4a08:	2003e26d 	.word	0x2003e26d
   d4a0c:	000db84c 	.word	0x000db84c

000d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4a10:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4a12:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4a16:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4a18:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4a1a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4a1e:	42ae      	cmp	r6, r5
   d4a20:	d004      	beq.n	d4a2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4a22:	4628      	mov	r0, r5
   d4a24:	f005 f9b6 	bl	d9d94 <_ZN6StringD1Ev>
   d4a28:	3514      	adds	r5, #20
   d4a2a:	e7f8      	b.n	d4a1e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4a2c:	6820      	ldr	r0, [r4, #0]
   d4a2e:	f002 fed7 	bl	d77e0 <free>
    AllocatorT::free(data_);
}
   d4a32:	4620      	mov	r0, r4
   d4a34:	bd70      	pop	{r4, r5, r6, pc}

000d4a36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4a36:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a3a:	4604      	mov	r4, r0
   d4a3c:	460d      	mov	r5, r1
   d4a3e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4a40:	d916      	bls.n	d4a70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4a42:	4290      	cmp	r0, r2
   d4a44:	d215      	bcs.n	d4a72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4a46:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4a4a:	1a75      	subs	r5, r6, r1
   d4a4c:	f1a1 0714 	sub.w	r7, r1, #20
   d4a50:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4a52:	42b7      	cmp	r7, r6
   d4a54:	d01c      	beq.n	d4a90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4a56:	b12c      	cbz	r4, d4a64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4a58:	4631      	mov	r1, r6
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	f005 fa16 	bl	d9e8c <_ZN6StringC1EOS_>
   d4a60:	7c33      	ldrb	r3, [r6, #16]
   d4a62:	7423      	strb	r3, [r4, #16]
   d4a64:	4630      	mov	r0, r6
   d4a66:	f005 f995 	bl	d9d94 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4a6a:	3e14      	subs	r6, #20
   d4a6c:	3c14      	subs	r4, #20
   d4a6e:	e7f0      	b.n	d4a52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4a70:	d00e      	beq.n	d4a90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4a72:	42b5      	cmp	r5, r6
   d4a74:	d00c      	beq.n	d4a90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4a76:	b12c      	cbz	r4, d4a84 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4a78:	4629      	mov	r1, r5
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	f005 fa06 	bl	d9e8c <_ZN6StringC1EOS_>
   d4a80:	7c2b      	ldrb	r3, [r5, #16]
   d4a82:	7423      	strb	r3, [r4, #16]
   d4a84:	4628      	mov	r0, r5
   d4a86:	f005 f985 	bl	d9d94 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4a8a:	3514      	adds	r5, #20
   d4a8c:	3414      	adds	r4, #20
   d4a8e:	e7f0      	b.n	d4a72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4a96:	2300      	movs	r3, #0
   d4a98:	e9c0 3300 	strd	r3, r3, [r0]
   d4a9c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4a9e:	684f      	ldr	r7, [r1, #4]
   d4aa0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4aa2:	4604      	mov	r4, r0
   d4aa4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4aa6:	dd23      	ble.n	d4af0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4aa8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4aac:	fb08 f007 	mul.w	r0, r8, r7
   d4ab0:	f002 fe8e 	bl	d77d0 <malloc>
            if (!d) {
   d4ab4:	4605      	mov	r5, r0
   d4ab6:	b1d8      	cbz	r0, d4af0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4ab8:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4abc:	fb08 1202 	mla	r2, r8, r2, r1
   d4ac0:	f7ff ffb9 	bl	d4a36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4ac4:	6820      	ldr	r0, [r4, #0]
   d4ac6:	f002 fe8b 	bl	d77e0 <free>
        data_ = d;
   d4aca:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4acc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4ace:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4ad2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4ad6:	45b8      	cmp	r8, r7
   d4ad8:	d008      	beq.n	d4aec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4ada:	4639      	mov	r1, r7
   d4adc:	4628      	mov	r0, r5
   d4ade:	f005 f9ef 	bl	d9ec0 <_ZN6StringC1ERKS_>
   d4ae2:	7c3b      	ldrb	r3, [r7, #16]
   d4ae4:	742b      	strb	r3, [r5, #16]
   d4ae6:	3714      	adds	r7, #20
   d4ae8:	3514      	adds	r5, #20
   d4aea:	e7f4      	b.n	d4ad6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4aec:	6873      	ldr	r3, [r6, #4]
   d4aee:	6063      	str	r3, [r4, #4]
}
   d4af0:	4620      	mov	r0, r4
   d4af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4af8 <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   d4af8:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d4afa:	4b28      	ldr	r3, [pc, #160]	; (d4b9c <_GLOBAL__sub_I_SystemMode+0xa4>)
    SleepResult() {}
   d4afc:	4a28      	ldr	r2, [pc, #160]	; (d4ba0 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d4afe:	2501      	movs	r5, #1
   d4b00:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d4b02:	4b28      	ldr	r3, [pc, #160]	; (d4ba4 <_GLOBAL__sub_I_SystemMode+0xac>)
   d4b04:	2400      	movs	r4, #0
   d4b06:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   d4b08:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4b0a:	601c      	str	r4, [r3, #0]
   d4b0c:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d4b0e:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d4b10:	2002      	movs	r0, #2
   d4b12:	f002 fd65 	bl	d75e0 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d4b16:	4621      	mov	r1, r4
   d4b18:	4628      	mov	r0, r5
   d4b1a:	f002 fd79 	bl	d7610 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4b1e:	4629      	mov	r1, r5
   d4b20:	2004      	movs	r0, #4
   d4b22:	f002 fb53 	bl	d71cc <HAL_Feature_Set>
        capacity_(0) {
   d4b26:	e9cd 4400 	strd	r4, r4, [sp]
   d4b2a:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4b2c:	f005 fcde 	bl	da4ec <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4b30:	4c1d      	ldr	r4, [pc, #116]	; (d4ba8 <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4b32:	4605      	mov	r5, r0
   d4b34:	4669      	mov	r1, sp
   d4b36:	a803      	add	r0, sp, #12
   d4b38:	f7ff ffab 	bl	d4a92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4b3c:	4626      	mov	r6, r4
        stream_(&stream) {
   d4b3e:	a903      	add	r1, sp, #12
   d4b40:	a806      	add	r0, sp, #24
   d4b42:	f7ff ffa6 	bl	d4a92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4b46:	4b19      	ldr	r3, [pc, #100]	; (d4bac <_GLOBAL__sub_I_SystemMode+0xb4>)
   d4b48:	f846 3b04 	str.w	r3, [r6], #4
   d4b4c:	a906      	add	r1, sp, #24
   d4b4e:	a809      	add	r0, sp, #36	; 0x24
   d4b50:	f7ff ff9f 	bl	d4a92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4b54:	aa09      	add	r2, sp, #36	; 0x24
   d4b56:	211e      	movs	r1, #30
   d4b58:	4630      	mov	r0, r6
   d4b5a:	f004 fb3c 	bl	d91d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4b5e:	a809      	add	r0, sp, #36	; 0x24
   d4b60:	f7ff ff56 	bl	d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4b64:	a806      	add	r0, sp, #24
   d4b66:	f7ff ff53 	bl	d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4b6a:	4b11      	ldr	r3, [pc, #68]	; (d4bb0 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d4b6c:	6023      	str	r3, [r4, #0]
   d4b6e:	6225      	str	r5, [r4, #32]
   d4b70:	a803      	add	r0, sp, #12
   d4b72:	f7ff ff4d 	bl	d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4b76:	4b0f      	ldr	r3, [pc, #60]	; (d4bb4 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d4b78:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4b7a:	f005 fcb7 	bl	da4ec <_Z16_fetch_usbserialv>
   d4b7e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4b82:	f005 fca3 	bl	da4cc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4b86:	f004 f807 	bl	d8b98 <_ZN5spark10LogManager8instanceEv>
   d4b8a:	4621      	mov	r1, r4
   d4b8c:	f004 fab5 	bl	d90fa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   d4b90:	4668      	mov	r0, sp
   d4b92:	f7ff ff3d 	bl	d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4b96:	b00c      	add	sp, #48	; 0x30
   d4b98:	bd70      	pop	{r4, r5, r6, pc}
   d4b9a:	bf00      	nop
   d4b9c:	2003e26c 	.word	0x2003e26c
   d4ba0:	ffff0000 	.word	0xffff0000
   d4ba4:	2003e260 	.word	0x2003e260
   d4ba8:	2003e270 	.word	0x2003e270
   d4bac:	000db8a4 	.word	0x000db8a4
   d4bb0:	000dc134 	.word	0x000dc134
   d4bb4:	000db8bc 	.word	0x000db8bc

000d4bb8 <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   d4bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bba:	f002 fd81 	bl	d76c0 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4bbe:	b1d8      	cbz	r0, d4bf8 <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4bc0:	4b17      	ldr	r3, [pc, #92]	; (d4c20 <_Z18loadSystemDefaultsv+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4bc2:	4a18      	ldr	r2, [pc, #96]	; (d4c24 <_Z18loadSystemDefaultsv+0x6c>)
   d4bc4:	781b      	ldrb	r3, [r3, #0]
   d4bc6:	f88d 3000 	strb.w	r3, [sp]
   d4bca:	4917      	ldr	r1, [pc, #92]	; (d4c28 <_Z18loadSystemDefaultsv+0x70>)
   d4bcc:	233c      	movs	r3, #60	; 0x3c
   d4bce:	a802      	add	r0, sp, #8
   d4bd0:	f003 f904 	bl	d7ddc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d4bd4:	9c03      	ldr	r4, [sp, #12]
   d4bd6:	b17c      	cbz	r4, d4bf8 <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   d4bd8:	6863      	ldr	r3, [r4, #4]
   d4bda:	3b01      	subs	r3, #1
   d4bdc:	6063      	str	r3, [r4, #4]
   d4bde:	b95b      	cbnz	r3, d4bf8 <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   d4be0:	6823      	ldr	r3, [r4, #0]
   d4be2:	4620      	mov	r0, r4
   d4be4:	689b      	ldr	r3, [r3, #8]
   d4be6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4be8:	68a3      	ldr	r3, [r4, #8]
   d4bea:	3b01      	subs	r3, #1
   d4bec:	60a3      	str	r3, [r4, #8]
   d4bee:	b91b      	cbnz	r3, d4bf8 <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   d4bf0:	6823      	ldr	r3, [r4, #0]
   d4bf2:	4620      	mov	r0, r4
   d4bf4:	68db      	ldr	r3, [r3, #12]
   d4bf6:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   d4bf8:	490c      	ldr	r1, [pc, #48]	; (d4c2c <_Z18loadSystemDefaultsv+0x74>)
   d4bfa:	480d      	ldr	r0, [pc, #52]	; (d4c30 <_Z18loadSystemDefaultsv+0x78>)
   d4bfc:	f7ff fab2 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d4c00:	4b0c      	ldr	r3, [pc, #48]	; (d4c34 <_Z18loadSystemDefaultsv+0x7c>)
   d4c02:	4a0d      	ldr	r2, [pc, #52]	; (d4c38 <_Z18loadSystemDefaultsv+0x80>)
   d4c04:	605a      	str	r2, [r3, #4]
  sysStatus.firmwareRelease = 1;
  sysStatus.verboseMode = false;
  sysStatus.solarPowerMode = true;
  sysStatus.lowPowerMode = true;
   d4c06:	2201      	movs	r2, #1
   d4c08:	721a      	strb	r2, [r3, #8]
  sysStatus.resetCount = 0;
  sysStatus.lastHookResponse = 0;
  sysStatus.frequencyMinutes = 60;
   d4c0a:	213c      	movs	r1, #60	; 0x3c
  sysStatus.resetCount = 0;
   d4c0c:	2200      	movs	r2, #0
  sysStatus.lastHookResponse = 0;
   d4c0e:	e9c3 2203 	strd	r2, r2, [r3, #12]
  sysStatus.frequencyMinutes = 60;
   d4c12:	8399      	strh	r1, [r3, #28]
  sysStatus.lastAlertCode = 0;
   d4c14:	779a      	strb	r2, [r3, #30]
  sysStatus.lastAlertTime = 0;
   d4c16:	621a      	str	r2, [r3, #32]
  sysStatus.verizonSIM = false;
   d4c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d4c1c:	b004      	add	sp, #16
   d4c1e:	bd10      	pop	{r4, pc}
   d4c20:	2003e294 	.word	0x2003e294
   d4c24:	000db8cc 	.word	0x000db8cc
   d4c28:	000db896 	.word	0x000db896
   d4c2c:	000db8e4 	.word	0x000db8e4
   d4c30:	2003e574 	.word	0x2003e574
   d4c34:	2003e2c8 	.word	0x2003e2c8
   d4c38:	01000101 	.word	0x01000101

000d4c3c <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d4c3c:	4b01      	ldr	r3, [pc, #4]	; (d4c44 <_GLOBAL__sub_I_sysStatus+0x8>)
   d4c3e:	2201      	movs	r2, #1
   d4c40:	701a      	strb	r2, [r3, #0]
   d4c42:	4770      	bx	lr
   d4c44:	2003e294 	.word	0x2003e294

000d4c48 <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d4c48:	b570      	push	{r4, r5, r6, lr}
  if (Time.now() - lastCheckTime) {          // Check once a second
   d4c4a:	4c32      	ldr	r4, [pc, #200]	; (d4d14 <_Z17storageObjectLoopv+0xcc>)
   d4c4c:	f005 fb4d 	bl	da2ea <_ZN9TimeClass3nowEv>
   d4c50:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4c54:	17c1      	asrs	r1, r0, #31
   d4c56:	4299      	cmp	r1, r3
   d4c58:	bf08      	it	eq
   d4c5a:	4290      	cmpeq	r0, r2
   d4c5c:	d058      	beq.n	d4d10 <_Z17storageObjectLoopv+0xc8>
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d4c5e:	f005 fb44 	bl	da2ea <_ZN9TimeClass3nowEv>
                      std::hash<uint32_t>{}(sysStatus.lastHookResponse) + \
   d4c62:	4d2d      	ldr	r5, [pc, #180]	; (d4d18 <_Z17storageObjectLoopv+0xd0>)
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d4c64:	4e2d      	ldr	r6, [pc, #180]	; (d4d1c <_Z17storageObjectLoopv+0xd4>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d4c66:	17c1      	asrs	r1, r0, #31
   d4c68:	e9c4 0100 	strd	r0, r1, [r4]
                      std::hash<byte>{}(sysStatus.lastAlertCode)+ \
   d4c6c:	e9d5 3404 	ldrd	r3, r4, [r5, #16]
   d4c70:	441c      	add	r4, r3
   d4c72:	6a2b      	ldr	r3, [r5, #32]
   d4c74:	441c      	add	r4, r3

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4c76:	882b      	ldrh	r3, [r5, #0]
   d4c78:	441c      	add	r4, r3
   d4c7a:	886b      	ldrh	r3, [r5, #2]
   d4c7c:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4c7e:	792b      	ldrb	r3, [r5, #4]
   d4c80:	441c      	add	r4, r3
   d4c82:	796b      	ldrb	r3, [r5, #5]
   d4c84:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d4c86:	79ab      	ldrb	r3, [r5, #6]
   d4c88:	441c      	add	r4, r3
   d4c8a:	79eb      	ldrb	r3, [r5, #7]
   d4c8c:	441c      	add	r4, r3
   d4c8e:	7a2b      	ldrb	r3, [r5, #8]
   d4c90:	441c      	add	r4, r3
   d4c92:	68eb      	ldr	r3, [r5, #12]
   d4c94:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4c96:	8b2b      	ldrh	r3, [r5, #24]
   d4c98:	441c      	add	r4, r3
   d4c9a:	8bab      	ldrh	r3, [r5, #28]
   d4c9c:	441c      	add	r4, r3
   d4c9e:	8b6b      	ldrh	r3, [r5, #26]
   d4ca0:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4ca2:	7fab      	ldrb	r3, [r5, #30]
   d4ca4:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d4ca6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
                      std::hash<bool>{}(sysStatus.verizonSIM);
   d4caa:	441c      	add	r4, r3
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d4cac:	6833      	ldr	r3, [r6, #0]
   d4cae:	429c      	cmp	r4, r3
   d4cb0:	d02c      	beq.n	d4d0c <_Z17storageObjectLoopv+0xc4>
      Log.info("sysStaus object stored and hash updated");
   d4cb2:	491b      	ldr	r1, [pc, #108]	; (d4d20 <_Z17storageObjectLoopv+0xd8>)
   d4cb4:	481b      	ldr	r0, [pc, #108]	; (d4d24 <_Z17storageObjectLoopv+0xdc>)
   d4cb6:	f7ff fa55 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4cba:	481b      	ldr	r0, [pc, #108]	; (d4d28 <_Z17storageObjectLoopv+0xe0>)
   d4cbc:	2328      	movs	r3, #40	; 0x28
   d4cbe:	462a      	mov	r2, r5
   d4cc0:	2101      	movs	r1, #1
   d4cc2:	f000 ff5c 	bl	d5b7e <_ZN6MB85RC9writeDataEjPKhj>
      lastSysStatusHash = sysStatusHash;
   d4cc6:	6034      	str	r4, [r6, #0]
      returnValue = true;                           // In case I want to test whether values changed
   d4cc8:	2001      	movs	r0, #1
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d4cca:	4d18      	ldr	r5, [pc, #96]	; (d4d2c <_Z17storageObjectLoopv+0xe4>)
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d4ccc:	4e18      	ldr	r6, [pc, #96]	; (d4d30 <_Z17storageObjectLoopv+0xe8>)
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d4cce:	686b      	ldr	r3, [r5, #4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4cd0:	782c      	ldrb	r4, [r5, #0]
   d4cd2:	441c      	add	r4, r3
   d4cd4:	7a2b      	ldrb	r3, [r5, #8]
                      std::hash<int>{}(current.stateOfCharge)+ \
   d4cd6:	441c      	add	r4, r3
                      std::hash<byte>{}(current.batteryState) + \
   d4cd8:	692b      	ldr	r3, [r5, #16]
   d4cda:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4cdc:	8b2b      	ldrh	r3, [r5, #24]
                      std::hash<time_t>{}(current.lastSampleTime) + \
   d4cde:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4ce0:	7eab      	ldrb	r3, [r5, #26]
                      std::hash<uint16_t>{}(current.rssi) + \
   d4ce2:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4ce4:	8bab      	ldrh	r3, [r5, #28]
                      std::hash<uint8_t>{}(current.messageNumber) + \
   d4ce6:	441c      	add	r4, r3
   d4ce8:	8beb      	ldrh	r3, [r5, #30]
                      std::hash<uint16_t>{}(current.daily);
   d4cea:	441c      	add	r4, r3
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d4cec:	6833      	ldr	r3, [r6, #0]
   d4cee:	429c      	cmp	r4, r3
   d4cf0:	d00b      	beq.n	d4d0a <_Z17storageObjectLoopv+0xc2>
      Log.info("current object stored and hash updated");
   d4cf2:	4910      	ldr	r1, [pc, #64]	; (d4d34 <_Z17storageObjectLoopv+0xec>)
   d4cf4:	480b      	ldr	r0, [pc, #44]	; (d4d24 <_Z17storageObjectLoopv+0xdc>)
   d4cf6:	f7ff fa35 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4cfa:	480b      	ldr	r0, [pc, #44]	; (d4d28 <_Z17storageObjectLoopv+0xe0>)
   d4cfc:	2320      	movs	r3, #32
   d4cfe:	462a      	mov	r2, r5
   d4d00:	2150      	movs	r1, #80	; 0x50
   d4d02:	f000 ff3c 	bl	d5b7e <_ZN6MB85RC9writeDataEjPKhj>
      lastCurrentHash = currentHash;
   d4d06:	6034      	str	r4, [r6, #0]
      returnValue = true;
   d4d08:	2001      	movs	r0, #1
}
   d4d0a:	bd70      	pop	{r4, r5, r6, pc}
  bool returnValue = false;
   d4d0c:	2000      	movs	r0, #0
   d4d0e:	e7dc      	b.n	d4cca <_Z17storageObjectLoopv+0x82>
   d4d10:	2000      	movs	r0, #0
   d4d12:	e7fa      	b.n	d4d0a <_Z17storageObjectLoopv+0xc2>
   d4d14:	2003e298 	.word	0x2003e298
   d4d18:	2003e2c8 	.word	0x2003e2c8
   d4d1c:	2003e2a4 	.word	0x2003e2a4
   d4d20:	000db8fc 	.word	0x000db8fc
   d4d24:	2003e574 	.word	0x2003e574
   d4d28:	2003ded8 	.word	0x2003ded8
   d4d2c:	2003e2a8 	.word	0x2003e2a8
   d4d30:	2003e2a0 	.word	0x2003e2a0
   d4d34:	000db924 	.word	0x000db924

000d4d38 <_Z18storageObjectStartv>:
bool storageObjectStart() {
   d4d38:	b513      	push	{r0, r1, r4, lr}
  Log.info("Initializing the Object Store");
   d4d3a:	4921      	ldr	r1, [pc, #132]	; (d4dc0 <_Z18storageObjectStartv+0x88>)
   d4d3c:	4821      	ldr	r0, [pc, #132]	; (d4dc4 <_Z18storageObjectStartv+0x8c>)
   d4d3e:	f7ff fa11 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
  fram.begin();                                     // Initialize the FRAM module
   d4d42:	4821      	ldr	r0, [pc, #132]	; (d4dc8 <_Z18storageObjectStartv+0x90>)
   d4d44:	f000 fe8e 	bl	d5a64 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4d48:	481f      	ldr	r0, [pc, #124]	; (d4dc8 <_Z18storageObjectStartv+0x90>)
   d4d4a:	2301      	movs	r3, #1
   d4d4c:	f10d 0207 	add.w	r2, sp, #7
   d4d50:	2100      	movs	r1, #0
   d4d52:	f000 fec9 	bl	d5ae8 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d4d56:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4d5a:	2c01      	cmp	r4, #1
   d4d5c:	d01c      	beq.n	d4d98 <_Z18storageObjectStartv+0x60>
    Log.info("FRAM mismatch, erasing and locafing defaults if it checks out");
   d4d5e:	491b      	ldr	r1, [pc, #108]	; (d4dcc <_Z18storageObjectStartv+0x94>)
   d4d60:	4818      	ldr	r0, [pc, #96]	; (d4dc4 <_Z18storageObjectStartv+0x8c>)
   d4d62:	f7ff f9ff 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                   // Reset the FRAM to correct the issue
   d4d66:	4818      	ldr	r0, [pc, #96]	; (d4dc8 <_Z18storageObjectStartv+0x90>)
   d4d68:	f000 fe86 	bl	d5a78 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4d6c:	4a18      	ldr	r2, [pc, #96]	; (d4dd0 <_Z18storageObjectStartv+0x98>)
   d4d6e:	4816      	ldr	r0, [pc, #88]	; (d4dc8 <_Z18storageObjectStartv+0x90>)
   d4d70:	2304      	movs	r3, #4
   d4d72:	2100      	movs	r1, #0
   d4d74:	f000 ff03 	bl	d5b7e <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4d78:	4813      	ldr	r0, [pc, #76]	; (d4dc8 <_Z18storageObjectStartv+0x90>)
   d4d7a:	2301      	movs	r3, #1
   d4d7c:	f10d 0207 	add.w	r2, sp, #7
   d4d80:	2100      	movs	r1, #0
   d4d82:	f000 feb1 	bl	d5ae8 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d4d86:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4d8a:	2c01      	cmp	r4, #1
   d4d8c:	d115      	bne.n	d4dba <_Z18storageObjectStartv+0x82>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   d4d8e:	f7ff ff13 	bl	d4bb8 <_Z18loadSystemDefaultsv>
   d4d92:	4620      	mov	r0, r4
}
   d4d94:	b002      	add	sp, #8
   d4d96:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   d4d98:	490e      	ldr	r1, [pc, #56]	; (d4dd4 <_Z18storageObjectStartv+0x9c>)
   d4d9a:	480a      	ldr	r0, [pc, #40]	; (d4dc4 <_Z18storageObjectStartv+0x8c>)
   d4d9c:	f7ff f9e2 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4da0:	4621      	mov	r1, r4
   d4da2:	4a0d      	ldr	r2, [pc, #52]	; (d4dd8 <_Z18storageObjectStartv+0xa0>)
   d4da4:	4808      	ldr	r0, [pc, #32]	; (d4dc8 <_Z18storageObjectStartv+0x90>)
   d4da6:	2328      	movs	r3, #40	; 0x28
   d4da8:	f000 fe9e 	bl	d5ae8 <_ZN6MB85RC8readDataEjPhj>
   d4dac:	4a0b      	ldr	r2, [pc, #44]	; (d4ddc <_Z18storageObjectStartv+0xa4>)
   d4dae:	4806      	ldr	r0, [pc, #24]	; (d4dc8 <_Z18storageObjectStartv+0x90>)
   d4db0:	2320      	movs	r3, #32
   d4db2:	2150      	movs	r1, #80	; 0x50
   d4db4:	f000 fe98 	bl	d5ae8 <_ZN6MB85RC8readDataEjPhj>
   d4db8:	e7eb      	b.n	d4d92 <_Z18storageObjectStartv+0x5a>
      return false;
   d4dba:	2000      	movs	r0, #0
   d4dbc:	e7ea      	b.n	d4d94 <_Z18storageObjectStartv+0x5c>
   d4dbe:	bf00      	nop
   d4dc0:	000db94b 	.word	0x000db94b
   d4dc4:	2003e574 	.word	0x2003e574
   d4dc8:	2003ded8 	.word	0x2003ded8
   d4dcc:	000db969 	.word	0x000db969
   d4dd0:	000db9cc 	.word	0x000db9cc
   d4dd4:	000db9a7 	.word	0x000db9a7
   d4dd8:	2003e2c8 	.word	0x2003e2c8
   d4ddc:	2003e2a8 	.word	0x2003e2a8

000d4de0 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d4de0:	ee07 0a90 	vmov	s15, r0
   d4de4:	ed9f 7a09 	vldr	s14, [pc, #36]	; d4e0c <_Z17tmp36TemperatureCi+0x2c>
   d4de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4dec:	ee67 7a87 	vmul.f32	s15, s15, s14
   d4df0:	ed9f 7a07 	vldr	s14, [pc, #28]	; d4e10 <_Z17tmp36TemperatureCi+0x30>
   d4df4:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   d4df8:	eddf 7a06 	vldr	s15, [pc, #24]	; d4e14 <_Z17tmp36TemperatureCi+0x34>
   d4dfc:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   d4e00:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   d4e04:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d4e08:	4770      	bx	lr
   d4e0a:	bf00      	nop
   d4e0c:	454e4000 	.word	0x454e4000
   d4e10:	457ff000 	.word	0x457ff000
   d4e14:	43fa0000 	.word	0x43fa0000

000d4e18 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   d4e18:	b510      	push	{r4, lr}
   d4e1a:	b086      	sub	sp, #24
    const diag_source* src = nullptr;
   d4e1c:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d4e1e:	a902      	add	r1, sp, #8
   d4e20:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d4e22:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d4e24:	f002 fbca 	bl	d75bc <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4e28:	b9b8      	cbnz	r0, d4e5a <_Z12batteryStatev+0x42>
    return get(src, val);
   d4e2a:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d4e2c:	b10c      	cbz	r4, d4e32 <_Z12batteryStatev+0x1a>
   d4e2e:	6923      	ldr	r3, [r4, #16]
   d4e30:	b923      	cbnz	r3, d4e3c <_Z12batteryStatev+0x24>
   d4e32:	4a19      	ldr	r2, [pc, #100]	; (d4e98 <_Z12batteryStatev+0x80>)
   d4e34:	2100      	movs	r1, #0
   d4e36:	200a      	movs	r0, #10
   d4e38:	f002 fb98 	bl	d756c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4e3c:	2300      	movs	r3, #0
   d4e3e:	f8ad 300e 	strh.w	r3, [sp, #14]
   d4e42:	230c      	movs	r3, #12
   d4e44:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4e48:	ab01      	add	r3, sp, #4
   d4e4a:	9304      	str	r3, [sp, #16]
   d4e4c:	2304      	movs	r3, #4
   d4e4e:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4e50:	aa03      	add	r2, sp, #12
   d4e52:	6923      	ldr	r3, [r4, #16]
   d4e54:	2101      	movs	r1, #1
   d4e56:	4620      	mov	r0, r4
   d4e58:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d4e5a:	4a10      	ldr	r2, [pc, #64]	; (d4e9c <_Z12batteryStatev+0x84>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d4e5c:	4c10      	ldr	r4, [pc, #64]	; (d4ea0 <_Z12batteryStatev+0x88>)
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d4e5e:	7a12      	ldrb	r2, [r2, #8]
        if (r < 0) {
   d4e60:	2800      	cmp	r0, #0
        return val;
   d4e62:	bfa8      	it	ge
   d4e64:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d4e66:	7220      	strb	r0, [r4, #8]
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d4e68:	b132      	cbz	r2, d4e78 <_Z12batteryStatev+0x60>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d4e6a:	480e      	ldr	r0, [pc, #56]	; (d4ea4 <_Z12batteryStatev+0x8c>)
   d4e6c:	f003 fa24 	bl	d82b8 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d4e70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4e74:	f002 fd14 	bl	d78a0 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d4e78:	480a      	ldr	r0, [pc, #40]	; (d4ea4 <_Z12batteryStatev+0x8c>)
   d4e7a:	f003 f9bd 	bl	d81f8 <_ZN9FuelGauge6getSoCEv>
   d4e7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d4e82:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   d4e86:	283c      	cmp	r0, #60	; 0x3c
   d4e88:	bfd4      	ite	le
   d4e8a:	2000      	movle	r0, #0
   d4e8c:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d4e8e:	edc4 7a01 	vstr	s15, [r4, #4]
}
   d4e92:	b006      	add	sp, #24
   d4e94:	bd10      	pop	{r4, pc}
   d4e96:	bf00      	nop
   d4e98:	000d71ed 	.word	0x000d71ed
   d4e9c:	2003e2c8 	.word	0x2003e2c8
   d4ea0:	2003e2a8 	.word	0x2003e2a8
   d4ea4:	2003e2f0 	.word	0x2003e2f0

000d4ea8 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   d4ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d4eaa:	4d0c      	ldr	r5, [pc, #48]	; (d4edc <_Z16isItSafeToChargev+0x34>)
  PMIC pmic(true);
   d4eac:	2101      	movs	r1, #1
   d4eae:	a801      	add	r0, sp, #4
   d4eb0:	f004 fd63 	bl	d997a <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d4eb4:	782b      	ldrb	r3, [r5, #0]
   d4eb6:	2b25      	cmp	r3, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d4eb8:	a801      	add	r0, sp, #4
   d4eba:	f04f 0401 	mov.w	r4, #1
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d4ebe:	d909      	bls.n	d4ed4 <_Z16isItSafeToChargev+0x2c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d4ec0:	f004 fdee 	bl	d9aa0 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d4ec4:	722c      	strb	r4, [r5, #8]
    return false;
   d4ec6:	2400      	movs	r4, #0
  PMIC pmic(true);
   d4ec8:	a801      	add	r0, sp, #4
   d4eca:	f004 fd65 	bl	d9998 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   d4ece:	4620      	mov	r0, r4
   d4ed0:	b003      	add	sp, #12
   d4ed2:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   d4ed4:	f004 fdcd 	bl	d9a72 <_ZN4PMIC14enableChargingEv>
    return true;
   d4ed8:	e7f6      	b.n	d4ec8 <_Z16isItSafeToChargev+0x20>
   d4eda:	bf00      	nop
   d4edc:	2003e2a8 	.word	0x2003e2a8

000d4ee0 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   d4ee0:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4ee2:	4d19      	ldr	r5, [pc, #100]	; (d4f48 <_Z17getSignalStrengthv+0x68>)
   d4ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d4ee6:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d4ee8:	ac04      	add	r4, sp, #16
   d4eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ef0:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4ef4:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d4ef8:	4914      	ldr	r1, [pc, #80]	; (d4f4c <_Z17getSignalStrengthv+0x6c>)
   d4efa:	a80e      	add	r0, sp, #56	; 0x38
   d4efc:	f002 fd2a 	bl	d7954 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d4f00:	a80e      	add	r0, sp, #56	; 0x38
   d4f02:	f002 fd7a 	bl	d79fa <_ZNK14CellularSignal19getAccessTechnologyEv>
   d4f06:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d4f08:	a80e      	add	r0, sp, #56	; 0x38
   d4f0a:	f002 fd91 	bl	d7a30 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d4f0e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d4f10:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d4f14:	f002 fdbc 	bl	d7a90 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4f18:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d4f1a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d4f1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d4f22:	f005 fe37 	bl	dab94 <__aeabi_f2d>
   d4f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4f2a:	4628      	mov	r0, r5
   d4f2c:	f005 fe32 	bl	dab94 <__aeabi_f2d>
   d4f30:	e9cd 0100 	strd	r0, r1, [sp]
   d4f34:	4a06      	ldr	r2, [pc, #24]	; (d4f50 <_Z17getSignalStrengthv+0x70>)
   d4f36:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d4f3a:	4806      	ldr	r0, [pc, #24]	; (d4f54 <_Z17getSignalStrengthv+0x74>)
   d4f3c:	2140      	movs	r1, #64	; 0x40
   d4f3e:	f002 fc67 	bl	d7810 <snprintf>
   d4f42:	b019      	add	sp, #100	; 0x64
   d4f44:	bd30      	pop	{r4, r5, pc}
   d4f46:	bf00      	nop
   d4f48:	000dba84 	.word	0x000dba84
   d4f4c:	2003e530 	.word	0x2003e530
   d4f50:	000dba49 	.word	0x000dba49
   d4f54:	2003ddd9 	.word	0x2003ddd9

000d4f58 <_Z16takeMeasurementsv>:
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d4f58:	4b10      	ldr	r3, [pc, #64]	; (d4f9c <_Z16takeMeasurementsv+0x44>)
bool takeMeasurements() { 
   d4f5a:	b510      	push	{r4, lr}
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d4f5c:	8818      	ldrh	r0, [r3, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d4f5e:	4c10      	ldr	r4, [pc, #64]	; (d4fa0 <_Z16takeMeasurementsv+0x48>)
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d4f60:	f005 fc19 	bl	da796 <analogRead>
   d4f64:	f7ff ff3c 	bl	d4de0 <_Z17tmp36TemperatureCi>
   d4f68:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d4f6c:	4a0d      	ldr	r2, [pc, #52]	; (d4fa4 <_Z16takeMeasurementsv+0x4c>)
   d4f6e:	ee17 3a90 	vmov	r3, s15
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d4f72:	2110      	movs	r1, #16
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d4f74:	7013      	strb	r3, [r2, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d4f76:	4620      	mov	r0, r4
   d4f78:	b2db      	uxtb	r3, r3
   d4f7a:	4a0b      	ldr	r2, [pc, #44]	; (d4fa8 <_Z16takeMeasurementsv+0x50>)
   d4f7c:	f002 fc48 	bl	d7810 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   d4f80:	490a      	ldr	r1, [pc, #40]	; (d4fac <_Z16takeMeasurementsv+0x54>)
   d4f82:	480b      	ldr	r0, [pc, #44]	; (d4fb0 <_Z16takeMeasurementsv+0x58>)
   d4f84:	4622      	mov	r2, r4
   d4f86:	f7ff f8ed 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   d4f8a:	f7ff ff45 	bl	d4e18 <_Z12batteryStatev>
    isItSafeToCharge();
   d4f8e:	f7ff ff8b 	bl	d4ea8 <_Z16isItSafeToChargev>
    getSignalStrength();
   d4f92:	f7ff ffa5 	bl	d4ee0 <_Z17getSignalStrengthv>
}
   d4f96:	2001      	movs	r0, #1
   d4f98:	bd10      	pop	{r4, pc}
   d4f9a:	bf00      	nop
   d4f9c:	000db846 	.word	0x000db846
   d4fa0:	2003ddc9 	.word	0x2003ddc9
   d4fa4:	2003e2a8 	.word	0x2003e2a8
   d4fa8:	000dba62 	.word	0x000dba62
   d4fac:	000dba67 	.word	0x000dba67
   d4fb0:	2003e574 	.word	0x2003e574

000d4fb4 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   d4fb4:	4801      	ldr	r0, [pc, #4]	; (d4fbc <_GLOBAL__sub_I_batteryContext+0x8>)
   d4fb6:	2100      	movs	r1, #0
   d4fb8:	f003 b8d0 	b.w	d815c <_ZN9FuelGaugeC1Eb>
   d4fbc:	2003e2f0 	.word	0x2003e2f0

000d4fc0 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d4fc0:	4770      	bx	lr

000d4fc2 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d4fc2:	b510      	push	{r4, lr}
}
   d4fc4:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d4fc6:	4604      	mov	r4, r0
}
   d4fc8:	f005 fc76 	bl	da8b8 <_ZdlPvj>
   d4fcc:	4620      	mov	r0, r4
   d4fce:	bd10      	pop	{r4, pc}

000d4fd0 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d4fd0:	b40e      	push	{r1, r2, r3}
   d4fd2:	b510      	push	{r4, lr}
   d4fd4:	b08d      	sub	sp, #52	; 0x34
   d4fd6:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d4fd8:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d4fda:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4fde:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4fe0:	2300      	movs	r3, #0
   d4fe2:	2020      	movs	r0, #32
   d4fe4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4fe8:	e9cd 4200 	strd	r4, r2, [sp]
   d4fec:	2001      	movs	r0, #1
   d4fee:	aa04      	add	r2, sp, #16
   d4ff0:	f002 facc 	bl	d758c <log_message_v>
}
   d4ff4:	b00d      	add	sp, #52	; 0x34
   d4ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4ffa:	b003      	add	sp, #12
   d4ffc:	4770      	bx	lr

000d4ffe <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d4ffe:	b40e      	push	{r1, r2, r3}
   d5000:	b510      	push	{r4, lr}
   d5002:	b08d      	sub	sp, #52	; 0x34
   d5004:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d5006:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d5008:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d500c:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d500e:	2300      	movs	r3, #0
   d5010:	2020      	movs	r0, #32
   d5012:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5016:	e9cd 4200 	strd	r4, r2, [sp]
   d501a:	2032      	movs	r0, #50	; 0x32
   d501c:	aa04      	add	r2, sp, #16
   d501e:	f002 fab5 	bl	d758c <log_message_v>
}
   d5022:	b00d      	add	sp, #52	; 0x34
   d5024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5028:	b003      	add	sp, #12
   d502a:	4770      	bx	lr

000d502c <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d502c:	b510      	push	{r4, lr}
   d502e:	7202      	strb	r2, [r0, #8]
   d5030:	22ff      	movs	r2, #255	; 0xff
   d5032:	8142      	strh	r2, [r0, #10]
   d5034:	2200      	movs	r2, #0
   d5036:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d503a:	6142      	str	r2, [r0, #20]
   d503c:	7602      	strb	r2, [r0, #24]
   d503e:	61c2      	str	r2, [r0, #28]
    instance = this;
   d5040:	4a02      	ldr	r2, [pc, #8]	; (d504c <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5042:	4c03      	ldr	r4, [pc, #12]	; (d5050 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d5044:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5046:	e9c0 4100 	strd	r4, r1, [r0]
}
   d504a:	bd10      	pop	{r4, pc}
   d504c:	2003e2fc 	.word	0x2003e2fc
   d5050:	000dbcb0 	.word	0x000dbcb0

000d5054 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d5054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5058:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d505c:	4604      	mov	r4, r0
   d505e:	4689      	mov	r9, r1
   d5060:	4616      	mov	r6, r2
   d5062:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d5064:	f1b8 0f00 	cmp.w	r8, #0
   d5068:	d002      	beq.n	d5070 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d506a:	6840      	ldr	r0, [r0, #4]
   d506c:	f003 f9be 	bl	d83ec <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5070:	7a21      	ldrb	r1, [r4, #8]
   d5072:	6860      	ldr	r0, [r4, #4]
   d5074:	f003 f997 	bl	d83a6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d5078:	6860      	ldr	r0, [r4, #4]
   d507a:	6803      	ldr	r3, [r0, #0]
   d507c:	4649      	mov	r1, r9
   d507e:	689b      	ldr	r3, [r3, #8]
   d5080:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d5082:	6860      	ldr	r0, [r4, #4]
   d5084:	2100      	movs	r1, #0
   d5086:	f003 f9ad 	bl	d83e4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d508a:	4605      	mov	r5, r0
   d508c:	bb00      	cbnz	r0, d50d0 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d508e:	2301      	movs	r3, #1
   d5090:	7a21      	ldrb	r1, [r4, #8]
   d5092:	6860      	ldr	r0, [r4, #4]
   d5094:	463a      	mov	r2, r7
   d5096:	f003 f974 	bl	d8382 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d509a:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d509c:	4603      	mov	r3, r0
        if (count == num) {
   d509e:	d109      	bne.n	d50b4 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d50a0:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d50a2:	42be      	cmp	r6, r7
   d50a4:	d01c      	beq.n	d50e0 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d50a6:	6860      	ldr	r0, [r4, #4]
   d50a8:	6803      	ldr	r3, [r0, #0]
   d50aa:	695b      	ldr	r3, [r3, #20]
   d50ac:	4798      	blx	r3
   d50ae:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d50b2:	e7f6      	b.n	d50a2 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d50b4:	490b      	ldr	r1, [pc, #44]	; (d50e4 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d50b6:	480c      	ldr	r0, [pc, #48]	; (d50e8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d50b8:	464a      	mov	r2, r9
   d50ba:	f7ff ffa0 	bl	d4ffe <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d50be:	f1b8 0f00 	cmp.w	r8, #0
   d50c2:	d002      	beq.n	d50ca <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d50c4:	6860      	ldr	r0, [r4, #4]
   d50c6:	f003 f99a 	bl	d83fe <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d50ca:	4628      	mov	r0, r5
   d50cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d50d0:	4603      	mov	r3, r0
   d50d2:	4906      	ldr	r1, [pc, #24]	; (d50ec <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d50d4:	4804      	ldr	r0, [pc, #16]	; (d50e8 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d50d6:	464a      	mov	r2, r9
   d50d8:	f7ff ff91 	bl	d4ffe <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d50dc:	2500      	movs	r5, #0
   d50de:	e7ee      	b.n	d50be <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d50e0:	2501      	movs	r5, #1
   d50e2:	e7ec      	b.n	d50be <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d50e4:	000dbaac 	.word	0x000dbaac
   d50e8:	2003e2f8 	.word	0x2003e2f8
   d50ec:	000dbad1 	.word	0x000dbad1

000d50f0 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d50f0:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d50f2:	9300      	str	r3, [sp, #0]
   d50f4:	2301      	movs	r3, #1
   d50f6:	f7ff ffad 	bl	d5054 <_ZN6AB180513readRegistersEhPhjb>
}
   d50fa:	b003      	add	sp, #12
   d50fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d5100 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d5100:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d5102:	8943      	ldrh	r3, [r0, #10]
   d5104:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d5106:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d5108:	d010      	beq.n	d512c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d510a:	4e19      	ldr	r6, [pc, #100]	; (d5170 <_ZN6AB180510detectChipEv+0x70>)
   d510c:	4d19      	ldr	r5, [pc, #100]	; (d5174 <_ZN6AB180510detectChipEv+0x74>)
   d510e:	f002 f875 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d5112:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d5116:	d209      	bcs.n	d512c <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d5118:	8960      	ldrh	r0, [r4, #10]
   d511a:	f005 fb29 	bl	da770 <digitalRead>
   d511e:	2801      	cmp	r0, #1
   d5120:	d004      	beq.n	d512c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5122:	4631      	mov	r1, r6
   d5124:	4628      	mov	r0, r5
   d5126:	f7ff f81d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d512a:	e7f0      	b.n	d510e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d512c:	2301      	movs	r3, #1
   d512e:	f10d 0207 	add.w	r2, sp, #7
   d5132:	2128      	movs	r1, #40	; 0x28
   d5134:	4620      	mov	r0, r4
   d5136:	f7ff ffdb 	bl	d50f0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d513a:	b930      	cbnz	r0, d514a <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d513c:	480d      	ldr	r0, [pc, #52]	; (d5174 <_ZN6AB180510detectChipEv+0x74>)
   d513e:	490e      	ldr	r1, [pc, #56]	; (d5178 <_ZN6AB180510detectChipEv+0x78>)
   d5140:	f7ff f810 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5144:	2000      	movs	r0, #0
}
   d5146:	b002      	add	sp, #8
   d5148:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d514a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d514e:	2b18      	cmp	r3, #24
   d5150:	d1f4      	bne.n	d513c <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d5152:	2301      	movs	r3, #1
   d5154:	f10d 0207 	add.w	r2, sp, #7
   d5158:	2129      	movs	r1, #41	; 0x29
   d515a:	4620      	mov	r0, r4
   d515c:	f7ff ffc8 	bl	d50f0 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d5160:	2800      	cmp	r0, #0
   d5162:	d0eb      	beq.n	d513c <_ZN6AB180510detectChipEv+0x3c>
   d5164:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5168:	2b05      	cmp	r3, #5
   d516a:	d1e7      	bne.n	d513c <_ZN6AB180510detectChipEv+0x3c>
   d516c:	e7eb      	b.n	d5146 <_ZN6AB180510detectChipEv+0x46>
   d516e:	bf00      	nop
   d5170:	000dbaf5 	.word	0x000dbaf5
   d5174:	2003e2f8 	.word	0x2003e2f8
   d5178:	000dbb0a 	.word	0x000dbb0a

000d517c <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d517c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5180:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d5184:	4604      	mov	r4, r0
   d5186:	460f      	mov	r7, r1
   d5188:	4615      	mov	r5, r2
   d518a:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d518c:	f1b8 0f00 	cmp.w	r8, #0
   d5190:	d002      	beq.n	d5198 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f003 f92a 	bl	d83ec <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d5198:	7a21      	ldrb	r1, [r4, #8]
   d519a:	6860      	ldr	r0, [r4, #4]
   d519c:	f003 f903 	bl	d83a6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d51a0:	6860      	ldr	r0, [r4, #4]
   d51a2:	6803      	ldr	r3, [r0, #0]
   d51a4:	4639      	mov	r1, r7
   d51a6:	689b      	ldr	r3, [r3, #8]
   d51a8:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d51aa:	442e      	add	r6, r5
   d51ac:	42b5      	cmp	r5, r6
   d51ae:	6860      	ldr	r0, [r4, #4]
   d51b0:	d005      	beq.n	d51be <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d51b2:	6803      	ldr	r3, [r0, #0]
   d51b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d51b8:	689b      	ldr	r3, [r3, #8]
   d51ba:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d51bc:	e7f6      	b.n	d51ac <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d51be:	2101      	movs	r1, #1
   d51c0:	f003 f910 	bl	d83e4 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d51c4:	4603      	mov	r3, r0
   d51c6:	b170      	cbz	r0, d51e6 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d51c8:	4908      	ldr	r1, [pc, #32]	; (d51ec <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d51ca:	4809      	ldr	r0, [pc, #36]	; (d51f0 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d51cc:	463a      	mov	r2, r7
   d51ce:	f7ff ff16 	bl	d4ffe <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d51d2:	2500      	movs	r5, #0
    }

    if (lock) {
   d51d4:	f1b8 0f00 	cmp.w	r8, #0
   d51d8:	d002      	beq.n	d51e0 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d51da:	6860      	ldr	r0, [r4, #4]
   d51dc:	f003 f90f 	bl	d83fe <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d51e0:	4628      	mov	r0, r5
   d51e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d51e6:	2501      	movs	r5, #1
   d51e8:	e7f4      	b.n	d51d4 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d51ea:	bf00      	nop
   d51ec:	000dbb17 	.word	0x000dbb17
   d51f0:	2003e2f8 	.word	0x2003e2f8

000d51f4 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d51f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d51f6:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d51fa:	9300      	str	r3, [sp, #0]
   d51fc:	f10d 020f 	add.w	r2, sp, #15
   d5200:	2301      	movs	r3, #1
   d5202:	f7ff ffbb 	bl	d517c <_ZN6AB180514writeRegistersEhPKhjb>
}
   d5206:	b005      	add	sp, #20
   d5208:	f85d fb04 	ldr.w	pc, [sp], #4

000d520c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d520e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d5210:	460c      	mov	r4, r1
   d5212:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d5214:	491a      	ldr	r1, [pc, #104]	; (d5280 <_ZN6AB18056setWDTEi+0x74>)
   d5216:	481b      	ldr	r0, [pc, #108]	; (d5284 <_ZN6AB18056setWDTEi+0x78>)
   d5218:	f7fe ffa4 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d521c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d521e:	bfb8      	it	lt
   d5220:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d5222:	b97c      	cbnz	r4, d5244 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5224:	2301      	movs	r3, #1
   d5226:	4622      	mov	r2, r4
   d5228:	211b      	movs	r1, #27
   d522a:	4628      	mov	r0, r5
   d522c:	f7ff ffe2 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5230:	4915      	ldr	r1, [pc, #84]	; (d5288 <_ZN6AB18056setWDTEi+0x7c>)
   d5232:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5234:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5236:	4813      	ldr	r0, [pc, #76]	; (d5284 <_ZN6AB18056setWDTEi+0x78>)
   d5238:	f7ff feca 	bl	d4fd0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d523c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d523e:	616c      	str	r4, [r5, #20]
}
   d5240:	4630      	mov	r0, r6
   d5242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5244:	2c03      	cmp	r4, #3
   d5246:	dd19      	ble.n	d527c <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5248:	10a7      	asrs	r7, r4, #2
   d524a:	2f1f      	cmp	r7, #31
   d524c:	bfa8      	it	ge
   d524e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5250:	00ba      	lsls	r2, r7, #2
   d5252:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d5256:	2301      	movs	r3, #1
   d5258:	b2d2      	uxtb	r2, r2
   d525a:	211b      	movs	r1, #27
   d525c:	4628      	mov	r0, r5
   d525e:	f7ff ffc9 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5262:	463a      	mov	r2, r7
   d5264:	4603      	mov	r3, r0
   d5266:	4909      	ldr	r1, [pc, #36]	; (d528c <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5268:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d526a:	4806      	ldr	r0, [pc, #24]	; (d5284 <_ZN6AB18056setWDTEi+0x78>)
   d526c:	f7ff feb0 	bl	d4fd0 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5270:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d5274:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d5276:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5278:	616f      	str	r7, [r5, #20]
   d527a:	e7e1      	b.n	d5240 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d527c:	2701      	movs	r7, #1
   d527e:	e7e7      	b.n	d5250 <_ZN6AB18056setWDTEi+0x44>
   d5280:	000dbb3c 	.word	0x000dbb3c
   d5284:	2003e2f8 	.word	0x2003e2f8
   d5288:	000dbb46 	.word	0x000dbb46
   d528c:	000dbb62 	.word	0x000dbb62

000d5290 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5290:	460b      	mov	r3, r1
    if (instance) {
   d5292:	4907      	ldr	r1, [pc, #28]	; (d52b0 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5294:	4602      	mov	r2, r0
    if (instance) {
   d5296:	6808      	ldr	r0, [r1, #0]
   d5298:	b148      	cbz	r0, d52ae <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d529a:	2b00      	cmp	r3, #0
   d529c:	bf08      	it	eq
   d529e:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d52a2:	d104      	bne.n	d52ae <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d52a4:	68c3      	ldr	r3, [r0, #12]
   d52a6:	b113      	cbz	r3, d52ae <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d52a8:	2100      	movs	r1, #0
   d52aa:	f7ff bfaf 	b.w	d520c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d52ae:	4770      	bx	lr
   d52b0:	2003e2fc 	.word	0x2003e2fc

000d52b4 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d52b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d52b8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d52bc:	4605      	mov	r5, r0
   d52be:	4616      	mov	r6, r2
   d52c0:	461f      	mov	r7, r3
    if (lock) {
   d52c2:	f1b8 0f00 	cmp.w	r8, #0
   d52c6:	d004      	beq.n	d52d2 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d52c8:	6840      	ldr	r0, [r0, #4]
   d52ca:	9101      	str	r1, [sp, #4]
   d52cc:	f003 f88e 	bl	d83ec <_ZN7TwoWire4lockEv>
   d52d0:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d52d2:	9101      	str	r1, [sp, #4]
   d52d4:	2300      	movs	r3, #0
   d52d6:	f10d 020f 	add.w	r2, sp, #15
   d52da:	4628      	mov	r0, r5
   d52dc:	f7ff ff08 	bl	d50f0 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d52e0:	4604      	mov	r4, r0
   d52e2:	b160      	cbz	r0, d52fe <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d52e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d52e8:	ea03 0206 	and.w	r2, r3, r6
   d52ec:	433a      	orrs	r2, r7
        if (newValue != value) {
   d52ee:	4293      	cmp	r3, r2
   d52f0:	d005      	beq.n	d52fe <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d52f2:	9901      	ldr	r1, [sp, #4]
   d52f4:	2300      	movs	r3, #0
   d52f6:	4628      	mov	r0, r5
   d52f8:	f7ff ff7c 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
   d52fc:	4604      	mov	r4, r0
    if (lock) {
   d52fe:	f1b8 0f00 	cmp.w	r8, #0
   d5302:	d002      	beq.n	d530a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d5304:	6868      	ldr	r0, [r5, #4]
   d5306:	f003 f87a 	bl	d83fe <_ZN7TwoWire6unlockEv>
}
   d530a:	4620      	mov	r0, r4
   d530c:	b004      	add	sp, #16
   d530e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5314 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d5314:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5316:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d5318:	460a      	mov	r2, r1
   d531a:	483f      	ldr	r0, [pc, #252]	; (d5418 <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d531c:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d531e:	493f      	ldr	r1, [pc, #252]	; (d541c <_ZN6AB180511resetConfigEm+0x108>)
   d5320:	f7ff fe56 	bl	d4fd0 <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d5324:	6860      	ldr	r0, [r4, #4]
   d5326:	f003 f861 	bl	d83ec <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d532a:	2300      	movs	r3, #0
   d532c:	461a      	mov	r2, r3
   d532e:	210f      	movs	r1, #15
   d5330:	4620      	mov	r0, r4
   d5332:	f7ff ff5f 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d5336:	2300      	movs	r3, #0
   d5338:	2213      	movs	r2, #19
   d533a:	2110      	movs	r1, #16
   d533c:	4620      	mov	r0, r4
   d533e:	f7ff ff59 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d5342:	2300      	movs	r3, #0
   d5344:	223c      	movs	r2, #60	; 0x3c
   d5346:	2111      	movs	r1, #17
   d5348:	4620      	mov	r0, r4
   d534a:	f7ff ff53 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d534e:	2300      	movs	r3, #0
   d5350:	22e0      	movs	r2, #224	; 0xe0
   d5352:	2112      	movs	r1, #18
   d5354:	4620      	mov	r0, r4
   d5356:	f7ff ff4d 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d535a:	2300      	movs	r3, #0
   d535c:	2226      	movs	r2, #38	; 0x26
   d535e:	2113      	movs	r1, #19
   d5360:	4620      	mov	r0, r4
   d5362:	f7ff ff47 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d5366:	2300      	movs	r3, #0
   d5368:	461a      	mov	r2, r3
   d536a:	2117      	movs	r1, #23
   d536c:	4620      	mov	r0, r4
   d536e:	f7ff ff41 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d5372:	f015 0301 	ands.w	r3, r5, #1
   d5376:	d048      	beq.n	d540a <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d5378:	2300      	movs	r3, #0
   d537a:	9300      	str	r3, [sp, #0]
   d537c:	22e3      	movs	r2, #227	; 0xe3
   d537e:	2323      	movs	r3, #35	; 0x23
   d5380:	2118      	movs	r1, #24
   d5382:	4620      	mov	r0, r4
   d5384:	f7ff ff96 	bl	d52b4 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d5388:	2300      	movs	r3, #0
   d538a:	461a      	mov	r2, r3
   d538c:	2119      	movs	r1, #25
   d538e:	4620      	mov	r0, r4
   d5390:	f7ff ff30 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d5394:	2300      	movs	r3, #0
   d5396:	461a      	mov	r2, r3
   d5398:	211a      	movs	r1, #26
   d539a:	4620      	mov	r0, r4
   d539c:	f7ff ff2a 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d53a0:	2300      	movs	r3, #0
   d53a2:	461a      	mov	r2, r3
   d53a4:	211b      	movs	r1, #27
   d53a6:	4620      	mov	r0, r4
   d53a8:	f7ff ff24 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d53ac:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d53b0:	f04f 0300 	mov.w	r3, #0
   d53b4:	bf0c      	ite	eq
   d53b6:	461a      	moveq	r2, r3
   d53b8:	2288      	movne	r2, #136	; 0x88
   d53ba:	211c      	movs	r1, #28
   d53bc:	4620      	mov	r0, r4
   d53be:	f7ff ff19 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d53c2:	2300      	movs	r3, #0
   d53c4:	461a      	mov	r2, r3
   d53c6:	2120      	movs	r1, #32
   d53c8:	4620      	mov	r0, r4
   d53ca:	f7ff ff13 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d53ce:	2300      	movs	r3, #0
   d53d0:	22f0      	movs	r2, #240	; 0xf0
   d53d2:	2121      	movs	r1, #33	; 0x21
   d53d4:	4620      	mov	r0, r4
   d53d6:	f7ff ff0d 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d53da:	2300      	movs	r3, #0
   d53dc:	461a      	mov	r2, r3
   d53de:	2126      	movs	r1, #38	; 0x26
   d53e0:	4620      	mov	r0, r4
   d53e2:	f7ff ff07 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d53e6:	2300      	movs	r3, #0
   d53e8:	2280      	movs	r2, #128	; 0x80
   d53ea:	2127      	movs	r1, #39	; 0x27
   d53ec:	4620      	mov	r0, r4
   d53ee:	f7ff ff01 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d53f2:	2300      	movs	r3, #0
   d53f4:	461a      	mov	r2, r3
   d53f6:	2130      	movs	r1, #48	; 0x30
   d53f8:	4620      	mov	r0, r4
   d53fa:	f7ff fefb 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d53fe:	6860      	ldr	r0, [r4, #4]
   d5400:	f002 fffd 	bl	d83fe <_ZN7TwoWire6unlockEv>
}
   d5404:	2001      	movs	r0, #1
   d5406:	b003      	add	sp, #12
   d5408:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d540a:	2223      	movs	r2, #35	; 0x23
   d540c:	2118      	movs	r1, #24
   d540e:	4620      	mov	r0, r4
   d5410:	f7ff fef0 	bl	d51f4 <_ZN6AB180513writeRegisterEhhb>
   d5414:	e7b8      	b.n	d5388 <_ZN6AB180511resetConfigEm+0x74>
   d5416:	bf00      	nop
   d5418:	2003e2f8 	.word	0x2003e2f8
   d541c:	000dbb86 	.word	0x000dbb86

000d5420 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5420:	b513      	push	{r0, r1, r4, lr}
   d5422:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5424:	f10d 0207 	add.w	r2, sp, #7
   d5428:	f7ff fe62 	bl	d50f0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d542c:	b128      	cbz	r0, d543a <_ZN6AB180510isBitClearEhhb+0x1a>
   d542e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5432:	421c      	tst	r4, r3
   d5434:	bf0c      	ite	eq
   d5436:	2001      	moveq	r0, #1
   d5438:	2000      	movne	r0, #0
}
   d543a:	b002      	add	sp, #8
   d543c:	bd10      	pop	{r4, pc}

000d543e <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d543e:	b513      	push	{r0, r1, r4, lr}
   d5440:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5442:	f10d 0207 	add.w	r2, sp, #7
   d5446:	f7ff fe53 	bl	d50f0 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d544a:	b128      	cbz	r0, d5458 <_ZN6AB18058isBitSetEhhb+0x1a>
   d544c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5450:	421c      	tst	r4, r3
   d5452:	bf14      	ite	ne
   d5454:	2001      	movne	r0, #1
   d5456:	2000      	moveq	r0, #0
}
   d5458:	b002      	add	sp, #8
   d545a:	bd10      	pop	{r4, pc}

000d545c <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d545c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d545e:	43d2      	mvns	r2, r2
   d5460:	9300      	str	r3, [sp, #0]
   d5462:	b2d2      	uxtb	r2, r2
   d5464:	2300      	movs	r3, #0
   d5466:	f7ff ff25 	bl	d52b4 <_ZN6AB180512maskRegisterEhhhb>
}
   d546a:	b003      	add	sp, #12
   d546c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5470 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d5470:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d5472:	2301      	movs	r3, #1
   d5474:	f10d 0207 	add.w	r2, sp, #7
   d5478:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d547a:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d547c:	f7ff fe38 	bl	d50f0 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d5480:	4605      	mov	r5, r0
   d5482:	b938      	cbnz	r0, d5494 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d5484:	491e      	ldr	r1, [pc, #120]	; (d5500 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d5486:	481f      	ldr	r0, [pc, #124]	; (d5504 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5488:	22ad      	movs	r2, #173	; 0xad
   d548a:	f7ff fdb8 	bl	d4ffe <_ZNK5spark6Logger5errorEPKcz>
}
   d548e:	4628      	mov	r0, r5
   d5490:	b003      	add	sp, #12
   d5492:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d5494:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5498:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d549c:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d54a0:	d00b      	beq.n	d54ba <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d54a2:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d54a4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d54a6:	210f      	movs	r1, #15
   d54a8:	4620      	mov	r0, r4
   d54aa:	f7ff ffd7 	bl	d545c <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d54ae:	4a16      	ldr	r2, [pc, #88]	; (d5508 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d54b0:	4916      	ldr	r1, [pc, #88]	; (d550c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d54b2:	4814      	ldr	r0, [pc, #80]	; (d5504 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d54b4:	f7fe fe56 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d54b8:	e7e9      	b.n	d548e <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d54ba:	2208      	movs	r2, #8
   d54bc:	2117      	movs	r1, #23
   d54be:	4620      	mov	r0, r4
   d54c0:	f7ff ffbd 	bl	d543e <_ZN6AB18058isBitSetEhhb>
   d54c4:	b118      	cbz	r0, d54ce <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d54c6:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d54c8:	4a11      	ldr	r2, [pc, #68]	; (d5510 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d54ca:	61e3      	str	r3, [r4, #28]
   d54cc:	e7f0      	b.n	d54b0 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d54ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d54d2:	071a      	lsls	r2, r3, #28
   d54d4:	d509      	bpl.n	d54ea <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d54d6:	2303      	movs	r3, #3
   d54d8:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d54da:	2208      	movs	r2, #8
   d54dc:	2301      	movs	r3, #1
   d54de:	210f      	movs	r1, #15
   d54e0:	4620      	mov	r0, r4
   d54e2:	f7ff ffbb 	bl	d545c <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d54e6:	4a0b      	ldr	r2, [pc, #44]	; (d5514 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d54e8:	e7e2      	b.n	d54b0 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d54ea:	075b      	lsls	r3, r3, #29
   d54ec:	d5cf      	bpl.n	d548e <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d54ee:	2204      	movs	r2, #4
   d54f0:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d54f2:	2301      	movs	r3, #1
   d54f4:	210f      	movs	r1, #15
   d54f6:	4620      	mov	r0, r4
   d54f8:	f7ff ffb0 	bl	d545c <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d54fc:	4a06      	ldr	r2, [pc, #24]	; (d5518 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d54fe:	e7d7      	b.n	d54b0 <_ZN6AB180516updateWakeReasonEv+0x40>
   d5500:	000dbbca 	.word	0x000dbbca
   d5504:	2003e2f8 	.word	0x2003e2f8
   d5508:	000dbb9b 	.word	0x000dbb9b
   d550c:	000dbbe9 	.word	0x000dbbe9
   d5510:	000dbba4 	.word	0x000dbba4
   d5514:	000dbbb4 	.word	0x000dbbb4
   d5518:	000dbbc4 	.word	0x000dbbc4

000d551c <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d551c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d551e:	9300      	str	r3, [sp, #0]
   d5520:	4613      	mov	r3, r2
   d5522:	22ff      	movs	r2, #255	; 0xff
   d5524:	f7ff fec6 	bl	d52b4 <_ZN6AB180512maskRegisterEhhhb>
}
   d5528:	b003      	add	sp, #12
   d552a:	f85d fb04 	ldr.w	pc, [sp], #4

000d552e <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d552e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5532:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5536:	4605      	mov	r5, r0
   d5538:	460c      	mov	r4, r1
   d553a:	4691      	mov	r9, r2
   d553c:	461f      	mov	r7, r3
    if (lock) {
   d553e:	f1ba 0f00 	cmp.w	sl, #0
   d5542:	d002      	beq.n	d554a <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5544:	6840      	ldr	r0, [r0, #4]
   d5546:	f002 ff51 	bl	d83ec <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d554a:	b307      	cbz	r7, d558e <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d554c:	2f20      	cmp	r7, #32
   d554e:	463e      	mov	r6, r7
   d5550:	bf28      	it	cs
   d5552:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5554:	2c7f      	cmp	r4, #127	; 0x7f
   d5556:	d826      	bhi.n	d55a6 <_ZN6AB18057readRamEjPhjb+0x78>
   d5558:	1933      	adds	r3, r6, r4
   d555a:	2b80      	cmp	r3, #128	; 0x80
   d555c:	d901      	bls.n	d5562 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d555e:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5562:	2301      	movs	r3, #1
   d5564:	2204      	movs	r2, #4
   d5566:	213f      	movs	r1, #63	; 0x3f
   d5568:	4628      	mov	r0, r5
   d556a:	f7ff ff77 	bl	d545c <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d556e:	2300      	movs	r3, #0
   d5570:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5574:	9300      	str	r3, [sp, #0]
   d5576:	464a      	mov	r2, r9
   d5578:	4633      	mov	r3, r6
   d557a:	b2c9      	uxtb	r1, r1
   d557c:	4628      	mov	r0, r5
   d557e:	f7ff fd69 	bl	d5054 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d5582:	4680      	mov	r8, r0
   d5584:	b128      	cbz	r0, d5592 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d5586:	4434      	add	r4, r6
        dataLen -= count;
   d5588:	1bbf      	subs	r7, r7, r6
        data += count;
   d558a:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d558c:	e7dd      	b.n	d554a <_ZN6AB18057readRamEjPhjb+0x1c>
   d558e:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5592:	f1ba 0f00 	cmp.w	sl, #0
   d5596:	d002      	beq.n	d559e <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d5598:	6868      	ldr	r0, [r5, #4]
   d559a:	f002 ff30 	bl	d83fe <_ZN7TwoWire6unlockEv>
}
   d559e:	4640      	mov	r0, r8
   d55a0:	b002      	add	sp, #8
   d55a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d55a6:	2301      	movs	r3, #1
   d55a8:	2204      	movs	r2, #4
   d55aa:	213f      	movs	r1, #63	; 0x3f
   d55ac:	4628      	mov	r0, r5
   d55ae:	f7ff ffb5 	bl	d551c <_ZN6AB180514setRegisterBitEhhb>
   d55b2:	e7dc      	b.n	d556e <_ZN6AB18057readRamEjPhjb+0x40>

000d55b4 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d55b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d55b8:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d55bc:	4605      	mov	r5, r0
   d55be:	460c      	mov	r4, r1
   d55c0:	4691      	mov	r9, r2
   d55c2:	461f      	mov	r7, r3
    if (lock) {
   d55c4:	f1ba 0f00 	cmp.w	sl, #0
   d55c8:	d002      	beq.n	d55d0 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d55ca:	6840      	ldr	r0, [r0, #4]
   d55cc:	f002 ff0e 	bl	d83ec <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d55d0:	b307      	cbz	r7, d5614 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d55d2:	2f1f      	cmp	r7, #31
   d55d4:	463e      	mov	r6, r7
   d55d6:	bf28      	it	cs
   d55d8:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d55da:	2c7f      	cmp	r4, #127	; 0x7f
   d55dc:	d826      	bhi.n	d562c <_ZN6AB18058writeRamEjPKhjb+0x78>
   d55de:	1933      	adds	r3, r6, r4
   d55e0:	2b80      	cmp	r3, #128	; 0x80
   d55e2:	d901      	bls.n	d55e8 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d55e4:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d55e8:	2301      	movs	r3, #1
   d55ea:	2204      	movs	r2, #4
   d55ec:	213f      	movs	r1, #63	; 0x3f
   d55ee:	4628      	mov	r0, r5
   d55f0:	f7ff ff34 	bl	d545c <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d55f4:	2300      	movs	r3, #0
   d55f6:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d55fa:	9300      	str	r3, [sp, #0]
   d55fc:	464a      	mov	r2, r9
   d55fe:	4633      	mov	r3, r6
   d5600:	b2c9      	uxtb	r1, r1
   d5602:	4628      	mov	r0, r5
   d5604:	f7ff fdba 	bl	d517c <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d5608:	4680      	mov	r8, r0
   d560a:	b128      	cbz	r0, d5618 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d560c:	4434      	add	r4, r6
        dataLen -= count;
   d560e:	1bbf      	subs	r7, r7, r6
        data += count;
   d5610:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5612:	e7dd      	b.n	d55d0 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d5614:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5618:	f1ba 0f00 	cmp.w	sl, #0
   d561c:	d002      	beq.n	d5624 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d561e:	6868      	ldr	r0, [r5, #4]
   d5620:	f002 feed 	bl	d83fe <_ZN7TwoWire6unlockEv>
}
   d5624:	4640      	mov	r0, r8
   d5626:	b002      	add	sp, #8
   d5628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d562c:	2301      	movs	r3, #1
   d562e:	2204      	movs	r2, #4
   d5630:	213f      	movs	r1, #63	; 0x3f
   d5632:	4628      	mov	r0, r5
   d5634:	f7ff ff72 	bl	d551c <_ZN6AB180514setRegisterBitEhhb>
   d5638:	e7dc      	b.n	d55f4 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d563c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d563c:	b530      	push	{r4, r5, lr}
   d563e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5640:	680d      	ldr	r5, [r1, #0]
   d5642:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d5646:	9503      	str	r5, [sp, #12]
   d5648:	684d      	ldr	r5, [r1, #4]
   d564a:	9502      	str	r5, [sp, #8]
   d564c:	688d      	ldr	r5, [r1, #8]
   d564e:	9501      	str	r5, [sp, #4]
   d5650:	68c9      	ldr	r1, [r1, #12]
   d5652:	9100      	str	r1, [sp, #0]
   d5654:	3301      	adds	r3, #1
   d5656:	4904      	ldr	r1, [pc, #16]	; (d5668 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d5658:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d565c:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d565e:	f004 fc4d 	bl	d9efc <_ZN6String6formatEPKcz>
}
   d5662:	4620      	mov	r0, r4
   d5664:	b005      	add	sp, #20
   d5666:	bd30      	pop	{r4, r5, pc}
   d5668:	000dbbfa 	.word	0x000dbbfa

000d566c <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d566c:	1103      	asrs	r3, r0, #4
}
   d566e:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d5670:	f000 000f 	and.w	r0, r0, #15
}
   d5674:	fb02 0003 	mla	r0, r2, r3, r0
   d5678:	4770      	bx	lr

000d567a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d567a:	b538      	push	{r3, r4, r5, lr}
   d567c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d567e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d5680:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d5682:	f7ff fff3 	bl	d566c <_ZN6AB180510bcdToValueEh>
   d5686:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d5688:	7860      	ldrb	r0, [r4, #1]
   d568a:	f7ff ffef 	bl	d566c <_ZN6AB180510bcdToValueEh>
   d568e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d5690:	78a0      	ldrb	r0, [r4, #2]
   d5692:	f7ff ffeb 	bl	d566c <_ZN6AB180510bcdToValueEh>
   d5696:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d5698:	78e0      	ldrb	r0, [r4, #3]
   d569a:	f7ff ffe7 	bl	d566c <_ZN6AB180510bcdToValueEh>
   d569e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d56a0:	7920      	ldrb	r0, [r4, #4]
   d56a2:	f7ff ffe3 	bl	d566c <_ZN6AB180510bcdToValueEh>
   d56a6:	3801      	subs	r0, #1
   d56a8:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d56aa:	b92d      	cbnz	r5, d56b8 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d56ac:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d56ae:	7828      	ldrb	r0, [r5, #0]
   d56b0:	f7ff ffdc 	bl	d566c <_ZN6AB180510bcdToValueEh>
   d56b4:	6188      	str	r0, [r1, #24]
}
   d56b6:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d56b8:	7960      	ldrb	r0, [r4, #5]
   d56ba:	f7ff ffd7 	bl	d566c <_ZN6AB180510bcdToValueEh>
   d56be:	3064      	adds	r0, #100	; 0x64
   d56c0:	1da5      	adds	r5, r4, #6
   d56c2:	6148      	str	r0, [r1, #20]
   d56c4:	e7f3      	b.n	d56ae <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d56c8 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d56c8:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d56ca:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d56cc:	b088      	sub	sp, #32
   d56ce:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d56d0:	461a      	mov	r2, r3
   d56d2:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d56d4:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d56d6:	f7ff fea3 	bl	d5420 <_ZN6AB180510isBitClearEhhb>
   d56da:	b1f0      	cbz	r0, d571a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d56dc:	2308      	movs	r3, #8
   d56de:	2601      	movs	r6, #1
   d56e0:	4620      	mov	r0, r4
   d56e2:	9600      	str	r6, [sp, #0]
   d56e4:	eb0d 0203 	add.w	r2, sp, r3
   d56e8:	2100      	movs	r1, #0
   d56ea:	f7ff fcb3 	bl	d5054 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d56ee:	4604      	mov	r4, r0
   d56f0:	b198      	cbz	r0, d571a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d56f2:	4632      	mov	r2, r6
   d56f4:	4629      	mov	r1, r5
   d56f6:	f10d 0009 	add.w	r0, sp, #9
   d56fa:	f7ff ffbe 	bl	d567a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d56fe:	a804      	add	r0, sp, #16
   d5700:	f7ff ff9c 	bl	d563c <_ZN6AB180510tmToStringEPK2tm>
   d5704:	4808      	ldr	r0, [pc, #32]	; (d5728 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d5706:	9a04      	ldr	r2, [sp, #16]
   d5708:	4908      	ldr	r1, [pc, #32]	; (d572c <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d570a:	f7fe fd2b 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d570e:	a804      	add	r0, sp, #16
   d5710:	f004 fb40 	bl	d9d94 <_ZN6StringD1Ev>
}
   d5714:	4620      	mov	r0, r4
   d5716:	b008      	add	sp, #32
   d5718:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d571a:	2224      	movs	r2, #36	; 0x24
   d571c:	2100      	movs	r1, #0
   d571e:	4628      	mov	r0, r5
   d5720:	f005 fd78 	bl	db214 <memset>
   d5724:	2400      	movs	r4, #0
   d5726:	e7f5      	b.n	d5714 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d5728:	2003e2f8 	.word	0x2003e2f8
   d572c:	000dbc18 	.word	0x000dbc18

000d5730 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d5730:	b530      	push	{r4, r5, lr}
   d5732:	b08b      	sub	sp, #44	; 0x2c
   d5734:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d5736:	a901      	add	r1, sp, #4
   d5738:	f7ff ffc6 	bl	d56c8 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d573c:	4604      	mov	r4, r0
   d573e:	b120      	cbz	r0, d574a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d5740:	a801      	add	r0, sp, #4
   d5742:	f002 f8a5 	bl	d7890 <mktime>
   d5746:	e9c5 0100 	strd	r0, r1, [r5]
}
   d574a:	4620      	mov	r0, r4
   d574c:	b00b      	add	sp, #44	; 0x2c
   d574e:	bd30      	pop	{r4, r5, pc}

000d5750 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d5750:	b510      	push	{r4, lr}
   d5752:	4604      	mov	r4, r0
   d5754:	b088      	sub	sp, #32
    if (callBegin) {
   d5756:	b111      	cbz	r1, d575e <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d5758:	6840      	ldr	r0, [r0, #4]
   d575a:	f002 fdf5 	bl	d8348 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d575e:	4620      	mov	r0, r4
   d5760:	f7ff fcce 	bl	d5100 <_ZN6AB180510detectChipEv>
   d5764:	b370      	cbz	r0, d57c4 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d5766:	4620      	mov	r0, r4
   d5768:	f7ff fe82 	bl	d5470 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d576c:	2301      	movs	r3, #1
   d576e:	461a      	mov	r2, r3
   d5770:	2110      	movs	r1, #16
   d5772:	4620      	mov	r0, r4
   d5774:	f7ff fe54 	bl	d5420 <_ZN6AB180510isBitClearEhhb>
   d5778:	b1d8      	cbz	r0, d57b2 <_ZN6AB18055setupEb+0x62>
   d577a:	f004 fd99 	bl	da2b0 <_ZN9TimeClass7isValidEv>
   d577e:	b9c0      	cbnz	r0, d57b2 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d5780:	a902      	add	r1, sp, #8
   d5782:	4620      	mov	r0, r4
   d5784:	f7ff ffd4 	bl	d5730 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d5788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d578c:	f004 fc97 	bl	da0be <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d5790:	4b0f      	ldr	r3, [pc, #60]	; (d57d0 <_ZN6AB18055setupEb+0x80>)
   d5792:	4910      	ldr	r1, [pc, #64]	; (d57d4 <_ZN6AB18055setupEb+0x84>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	9300      	str	r3, [sp, #0]
   d5798:	a804      	add	r0, sp, #16
   d579a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d579e:	f004 fd45 	bl	da22c <_ZN9TimeClass6formatExPKc>
   d57a2:	480d      	ldr	r0, [pc, #52]	; (d57d8 <_ZN6AB18055setupEb+0x88>)
   d57a4:	9a04      	ldr	r2, [sp, #16]
   d57a6:	490d      	ldr	r1, [pc, #52]	; (d57dc <_ZN6AB18055setupEb+0x8c>)
   d57a8:	f7fe fcdc 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d57ac:	a804      	add	r0, sp, #16
   d57ae:	f004 faf1 	bl	d9d94 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d57b2:	4a0b      	ldr	r2, [pc, #44]	; (d57e0 <_ZN6AB18055setupEb+0x90>)
   d57b4:	2300      	movs	r3, #0
   d57b6:	2100      	movs	r1, #0
   d57b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d57bc:	f001 ff20 	bl	d7600 <system_subscribe_event>
}
   d57c0:	b008      	add	sp, #32
   d57c2:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d57c4:	4907      	ldr	r1, [pc, #28]	; (d57e4 <_ZN6AB18055setupEb+0x94>)
   d57c6:	4804      	ldr	r0, [pc, #16]	; (d57d8 <_ZN6AB18055setupEb+0x88>)
   d57c8:	f7ff fc19 	bl	d4ffe <_ZNK5spark6Logger5errorEPKcz>
   d57cc:	e7f1      	b.n	d57b2 <_ZN6AB18055setupEb+0x62>
   d57ce:	bf00      	nop
   d57d0:	2003de24 	.word	0x2003de24
   d57d4:	2003e5c8 	.word	0x2003e5c8
   d57d8:	2003e2f8 	.word	0x2003e2f8
   d57dc:	000dbc26 	.word	0x000dbc26
   d57e0:	000d5291 	.word	0x000d5291
   d57e4:	000dbc43 	.word	0x000dbc43

000d57e8 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d57e8:	220a      	movs	r2, #10
   d57ea:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d57ee:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d57f2:	fb93 f1f2 	sdiv	r1, r3, r2
   d57f6:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d57fa:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d57fe:	b2c0      	uxtb	r0, r0
   d5800:	4770      	bx	lr

000d5802 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5802:	b570      	push	{r4, r5, r6, lr}
   d5804:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d5806:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5808:	460c      	mov	r4, r1
   d580a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d580c:	f7ff ffec 	bl	d57e8 <_ZN6AB180510valueToBcdEi>
   d5810:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d5812:	6868      	ldr	r0, [r5, #4]
   d5814:	f7ff ffe8 	bl	d57e8 <_ZN6AB180510valueToBcdEi>
   d5818:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d581a:	68a8      	ldr	r0, [r5, #8]
   d581c:	f7ff ffe4 	bl	d57e8 <_ZN6AB180510valueToBcdEi>
   d5820:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d5822:	68e8      	ldr	r0, [r5, #12]
   d5824:	f7ff ffe0 	bl	d57e8 <_ZN6AB180510valueToBcdEi>
   d5828:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d582a:	6928      	ldr	r0, [r5, #16]
   d582c:	3001      	adds	r0, #1
   d582e:	f7ff ffdb 	bl	d57e8 <_ZN6AB180510valueToBcdEi>
   d5832:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d5834:	b92e      	cbnz	r6, d5842 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5836:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d5838:	69a8      	ldr	r0, [r5, #24]
   d583a:	f7ff ffd5 	bl	d57e8 <_ZN6AB180510valueToBcdEi>
   d583e:	7030      	strb	r0, [r6, #0]
}
   d5840:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d5842:	696a      	ldr	r2, [r5, #20]
   d5844:	2364      	movs	r3, #100	; 0x64
   d5846:	fb92 f0f3 	sdiv	r0, r2, r3
   d584a:	fb03 2010 	mls	r0, r3, r0, r2
   d584e:	f7ff ffcb 	bl	d57e8 <_ZN6AB180510valueToBcdEi>
   d5852:	1da6      	adds	r6, r4, #6
   d5854:	7160      	strb	r0, [r4, #5]
   d5856:	e7ef      	b.n	d5838 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d5858 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d5858:	b5f0      	push	{r4, r5, r6, r7, lr}
   d585a:	b087      	sub	sp, #28
   d585c:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d585e:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d5860:	4616      	mov	r6, r2
   d5862:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d5864:	f7ff feea 	bl	d563c <_ZN6AB180510tmToStringEPK2tm>
   d5868:	481e      	ldr	r0, [pc, #120]	; (d58e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d586a:	9a02      	ldr	r2, [sp, #8]
   d586c:	491e      	ldr	r1, [pc, #120]	; (d58e8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d586e:	f7fe fc79 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5872:	a802      	add	r0, sp, #8
   d5874:	f004 fa8e 	bl	d9d94 <_ZN6StringD1Ev>
    if (lock) {
   d5878:	b116      	cbz	r6, d5880 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d587a:	6868      	ldr	r0, [r5, #4]
   d587c:	f002 fdb6 	bl	d83ec <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d5880:	4620      	mov	r0, r4
   d5882:	2201      	movs	r2, #1
   d5884:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d5888:	2700      	movs	r7, #0
   d588a:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d588e:	f7ff ffb8 	bl	d5802 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d5892:	2301      	movs	r3, #1
   d5894:	461a      	mov	r2, r3
   d5896:	2110      	movs	r1, #16
   d5898:	4628      	mov	r0, r5
   d589a:	f7ff fe3f 	bl	d551c <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d589e:	4604      	mov	r4, r0
   d58a0:	b1e8      	cbz	r0, d58de <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d58a2:	2308      	movs	r3, #8
   d58a4:	9700      	str	r7, [sp, #0]
   d58a6:	eb0d 0203 	add.w	r2, sp, r3
   d58aa:	4639      	mov	r1, r7
   d58ac:	4628      	mov	r0, r5
   d58ae:	f7ff fc65 	bl	d517c <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d58b2:	4604      	mov	r4, r0
   d58b4:	b160      	cbz	r0, d58d0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d58b6:	2301      	movs	r3, #1
   d58b8:	461a      	mov	r2, r3
   d58ba:	2110      	movs	r1, #16
   d58bc:	4628      	mov	r0, r5
   d58be:	f7ff fdcd 	bl	d545c <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d58c2:	b116      	cbz	r6, d58ca <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d58c4:	6868      	ldr	r0, [r5, #4]
   d58c6:	f002 fd9a 	bl	d83fe <_ZN7TwoWire6unlockEv>
}
   d58ca:	4620      	mov	r0, r4
   d58cc:	b007      	add	sp, #28
   d58ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d58d0:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d58d4:	4905      	ldr	r1, [pc, #20]	; (d58ec <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d58d6:	4803      	ldr	r0, [pc, #12]	; (d58e4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d58d8:	f7ff fb91 	bl	d4ffe <_ZNK5spark6Logger5errorEPKcz>
   d58dc:	e7f1      	b.n	d58c2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d58de:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d58e2:	e7f7      	b.n	d58d4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d58e4:	2003e2f8 	.word	0x2003e2f8
   d58e8:	000dbc5b 	.word	0x000dbc5b
   d58ec:	000dbc69 	.word	0x000dbc69

000d58f0 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d58f0:	b513      	push	{r0, r1, r4, lr}
   d58f2:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d58f4:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d58f6:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d58fa:	f005 fc51 	bl	db1a0 <gmtime>
    return setRtcFromTm(tm, lock);
   d58fe:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d5902:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d5904:	4620      	mov	r0, r4
   d5906:	f7ff ffa7 	bl	d5858 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d590a:	b002      	add	sp, #8
   d590c:	bd10      	pop	{r4, pc}
	...

000d5910 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d5910:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5912:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d5914:	b089      	sub	sp, #36	; 0x24
   d5916:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5918:	bb75      	cbnz	r5, d5978 <_ZN6AB18054loopEv+0x68>
   d591a:	f004 fcc9 	bl	da2b0 <_ZN9TimeClass7isValidEv>
   d591e:	b358      	cbz	r0, d5978 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d5920:	2600      	movs	r6, #0
   d5922:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d5924:	a904      	add	r1, sp, #16
   d5926:	4628      	mov	r0, r5
        tm = 0;
   d5928:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d592c:	f001 fee0 	bl	d76f0 <spark_sync_time_last>
   d5930:	b310      	cbz	r0, d5978 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d5932:	2501      	movs	r5, #1
   d5934:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d5936:	f004 fcd8 	bl	da2ea <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d593a:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d593c:	4602      	mov	r2, r0
   d593e:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d5940:	4620      	mov	r0, r4
        time_t time = Time.now();
   d5942:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d5946:	f7ff ffd3 	bl	d58f0 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d594a:	a902      	add	r1, sp, #8
   d594c:	4620      	mov	r0, r4
        time = 0;
   d594e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d5952:	f7ff feed 	bl	d5730 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d5956:	4b12      	ldr	r3, [pc, #72]	; (d59a0 <_ZN6AB18054loopEv+0x90>)
   d5958:	4912      	ldr	r1, [pc, #72]	; (d59a4 <_ZN6AB18054loopEv+0x94>)
   d595a:	681b      	ldr	r3, [r3, #0]
   d595c:	9300      	str	r3, [sp, #0]
   d595e:	a804      	add	r0, sp, #16
   d5960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5964:	f004 fc62 	bl	da22c <_ZN9TimeClass6formatExPKc>
   d5968:	480f      	ldr	r0, [pc, #60]	; (d59a8 <_ZN6AB18054loopEv+0x98>)
   d596a:	9a04      	ldr	r2, [sp, #16]
   d596c:	490f      	ldr	r1, [pc, #60]	; (d59ac <_ZN6AB18054loopEv+0x9c>)
   d596e:	f7fe fbf9 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5972:	a804      	add	r0, sp, #16
   d5974:	f004 fa0e 	bl	d9d94 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d5978:	6963      	ldr	r3, [r4, #20]
   d597a:	b173      	cbz	r3, d599a <_ZN6AB18054loopEv+0x8a>
   d597c:	f001 fc3e 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d5980:	6923      	ldr	r3, [r4, #16]
   d5982:	1ac0      	subs	r0, r0, r3
   d5984:	6963      	ldr	r3, [r4, #20]
   d5986:	4298      	cmp	r0, r3
   d5988:	d307      	bcc.n	d599a <_ZN6AB18054loopEv+0x8a>
   d598a:	f001 fc37 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d598e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d5992:	6120      	str	r0, [r4, #16]
            setWDT();
   d5994:	4620      	mov	r0, r4
   d5996:	f7ff fc39 	bl	d520c <_ZN6AB18056setWDTEi>
}
   d599a:	b009      	add	sp, #36	; 0x24
   d599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d599e:	bf00      	nop
   d59a0:	2003de24 	.word	0x2003de24
   d59a4:	2003e5c8 	.word	0x2003e5c8
   d59a8:	2003e2f8 	.word	0x2003e2f8
   d59ac:	000dbc84 	.word	0x000dbc84

000d59b0 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d59b0:	4b01      	ldr	r3, [pc, #4]	; (d59b8 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d59b2:	4a02      	ldr	r2, [pc, #8]	; (d59bc <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d59b4:	601a      	str	r2, [r3, #0]
}
   d59b6:	4770      	bx	lr
   d59b8:	2003e2f8 	.word	0x2003e2f8
   d59bc:	000dbc9a 	.word	0x000dbc9a

000d59c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59c0:	680b      	ldr	r3, [r1, #0]
   d59c2:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d59c4:	684b      	ldr	r3, [r1, #4]
   d59c6:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d59c8:	b113      	cbz	r3, d59d0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d59ca:	685a      	ldr	r2, [r3, #4]
   d59cc:	3201      	adds	r2, #1
   d59ce:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59d0:	4770      	bx	lr

000d59d2 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d59d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d59d4:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d59d6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d59d8:	4668      	mov	r0, sp
   d59da:	f7ff fff1 	bl	d59c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d59de:	466a      	mov	r2, sp
   d59e0:	4629      	mov	r1, r5
   d59e2:	4620      	mov	r0, r4
   d59e4:	f002 feae 	bl	d8744 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d59e8:	a801      	add	r0, sp, #4
   d59ea:	f7fe ff9f 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d59ee:	4620      	mov	r0, r4
   d59f0:	b003      	add	sp, #12
   d59f2:	bd30      	pop	{r4, r5, pc}

000d59f4 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d59f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d59f6:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d59f8:	4604      	mov	r4, r0
   d59fa:	4668      	mov	r0, sp
   d59fc:	f7ff ffe0 	bl	d59c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d5a00:	466a      	mov	r2, sp
   d5a02:	4629      	mov	r1, r5
   d5a04:	4620      	mov	r0, r4
   d5a06:	f002 fe79 	bl	d86fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d5a0a:	a801      	add	r0, sp, #4
   d5a0c:	f7fe ff8e 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5a10:	4620      	mov	r0, r4
   d5a12:	b003      	add	sp, #12
   d5a14:	bd30      	pop	{r4, r5, pc}

000d5a16 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5a16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d5a18:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5a1a:	4604      	mov	r4, r0
   d5a1c:	4668      	mov	r0, sp
   d5a1e:	f7ff ffcf 	bl	d59c0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d5a22:	466a      	mov	r2, sp
   d5a24:	4629      	mov	r1, r5
   d5a26:	4620      	mov	r0, r4
   d5a28:	f002 fe11 	bl	d864e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d5a2c:	a801      	add	r0, sp, #4
   d5a2e:	f7fe ff7d 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5a32:	4620      	mov	r0, r4
   d5a34:	b003      	add	sp, #12
   d5a36:	bd30      	pop	{r4, r5, pc}

000d5a38 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5a38:	4770      	bx	lr

000d5a3a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5a3a:	b510      	push	{r4, lr}
}
   d5a3c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5a3e:	4604      	mov	r4, r0
}
   d5a40:	f004 ff3a 	bl	da8b8 <_ZdlPvj>
   d5a44:	4620      	mov	r0, r4
   d5a46:	bd10      	pop	{r4, pc}

000d5a48 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5a48:	6803      	ldr	r3, [r0, #0]
   d5a4a:	b2c9      	uxtb	r1, r1
   d5a4c:	689b      	ldr	r3, [r3, #8]
   d5a4e:	4718      	bx	r3

000d5a50 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5a50:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5a52:	4d03      	ldr	r5, [pc, #12]	; (d5a60 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5a54:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5a58:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5a5c:	bd30      	pop	{r4, r5, pc}
   d5a5e:	bf00      	nop
   d5a60:	000dbcf4 	.word	0x000dbcf4

000d5a64 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5a64:	6840      	ldr	r0, [r0, #4]
   d5a66:	f002 bc6f 	b.w	d8348 <_ZN7TwoWire5beginEv>

000d5a6a <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5a6a:	b510      	push	{r4, lr}
   d5a6c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5a6e:	6800      	ldr	r0, [r0, #0]
   d5a70:	f002 fcc5 	bl	d83fe <_ZN7TwoWire6unlockEv>
   d5a74:	4620      	mov	r0, r4
   d5a76:	bd10      	pop	{r4, pc}

000d5a78 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a7c:	b08a      	sub	sp, #40	; 0x28
   d5a7e:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5a80:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a82:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5a84:	f002 fcb2 	bl	d83ec <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5a88:	221e      	movs	r2, #30
   d5a8a:	2100      	movs	r1, #0
   d5a8c:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5a8e:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5a90:	f005 fbc0 	bl	db214 <memset>
		size_t framAddr = 0;
   d5a94:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5a96:	b1ef      	cbz	r7, d5ad4 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5a98:	6823      	ldr	r3, [r4, #0]
   d5a9a:	2f1e      	cmp	r7, #30
   d5a9c:	46b8      	mov	r8, r7
   d5a9e:	bf28      	it	cs
   d5aa0:	f04f 081e 	movcs.w	r8, #30
   d5aa4:	68dd      	ldr	r5, [r3, #12]
   d5aa6:	aa02      	add	r2, sp, #8
   d5aa8:	4643      	mov	r3, r8
   d5aaa:	4631      	mov	r1, r6
   d5aac:	4620      	mov	r0, r4
   d5aae:	47a8      	blx	r5
			if (!result) {
   d5ab0:	4605      	mov	r5, r0
   d5ab2:	b958      	cbnz	r0, d5acc <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5ab4:	480a      	ldr	r0, [pc, #40]	; (d5ae0 <_ZN6MB85RC5eraseEv+0x68>)
   d5ab6:	490b      	ldr	r1, [pc, #44]	; (d5ae4 <_ZN6MB85RC5eraseEv+0x6c>)
   d5ab8:	4632      	mov	r2, r6
   d5aba:	f7fe fb53 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d5abe:	a801      	add	r0, sp, #4
   d5ac0:	f7ff ffd3 	bl	d5a6a <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5ac4:	4628      	mov	r0, r5
   d5ac6:	b00a      	add	sp, #40	; 0x28
   d5ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5acc:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5ad0:	4446      	add	r6, r8
		while(totalLen > 0) {
   d5ad2:	e7e0      	b.n	d5a96 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5ad4:	a801      	add	r0, sp, #4
   d5ad6:	f7ff ffc8 	bl	d5a6a <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5ada:	2501      	movs	r5, #1
   d5adc:	e7f2      	b.n	d5ac4 <_ZN6MB85RC5eraseEv+0x4c>
   d5ade:	bf00      	nop
   d5ae0:	2003e574 	.word	0x2003e574
   d5ae4:	000dbcc0 	.word	0x000dbcc0

000d5ae8 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5aec:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5aee:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5af0:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5af2:	460d      	mov	r5, r1
   d5af4:	4616      	mov	r6, r2
   d5af6:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5af8:	f002 fc78 	bl	d83ec <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5afc:	b1a7      	cbz	r7, d5b28 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5afe:	68e1      	ldr	r1, [r4, #12]
   d5b00:	6860      	ldr	r0, [r4, #4]
   d5b02:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b06:	f002 fc52 	bl	d83ae <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5b0a:	0a29      	lsrs	r1, r5, #8
   d5b0c:	6860      	ldr	r0, [r4, #4]
   d5b0e:	f7ff ff9b 	bl	d5a48 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5b12:	4629      	mov	r1, r5
   d5b14:	6860      	ldr	r0, [r4, #4]
   d5b16:	f7ff ff97 	bl	d5a48 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5b1a:	6860      	ldr	r0, [r4, #4]
   d5b1c:	2100      	movs	r1, #0
   d5b1e:	f002 fc61 	bl	d83e4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5b22:	b148      	cbz	r0, d5b38 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5b24:	2400      	movs	r4, #0
   d5b26:	e000      	b.n	d5b2a <_ZN6MB85RC8readDataEjPhj+0x42>
   d5b28:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5b2a:	a801      	add	r0, sp, #4
   d5b2c:	f7ff ff9d 	bl	d5a6a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5b30:	4620      	mov	r0, r4
   d5b32:	b003      	add	sp, #12
   d5b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5b38:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5b3a:	7b21      	ldrb	r1, [r4, #12]
   d5b3c:	6860      	ldr	r0, [r4, #4]
   d5b3e:	46b8      	mov	r8, r7
   d5b40:	bf28      	it	cs
   d5b42:	f04f 0820 	movcs.w	r8, #32
   d5b46:	2301      	movs	r3, #1
   d5b48:	4642      	mov	r2, r8
   d5b4a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b4e:	f002 fc18 	bl	d8382 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5b52:	f004 fe69 	bl	da828 <_Z19__fetch_global_Wirev>
   d5b56:	6803      	ldr	r3, [r0, #0]
   d5b58:	691b      	ldr	r3, [r3, #16]
   d5b5a:	4798      	blx	r3
   d5b5c:	4540      	cmp	r0, r8
   d5b5e:	dbe1      	blt.n	d5b24 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5b60:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5b64:	f004 fe60 	bl	da828 <_Z19__fetch_global_Wirev>
   d5b68:	6803      	ldr	r3, [r0, #0]
   d5b6a:	695b      	ldr	r3, [r3, #20]
   d5b6c:	4798      	blx	r3
   d5b6e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5b72:	454e      	cmp	r6, r9
   d5b74:	d1f6      	bne.n	d5b64 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5b76:	4445      	add	r5, r8
   d5b78:	eba7 0708 	sub.w	r7, r7, r8
   d5b7c:	e7be      	b.n	d5afc <_ZN6MB85RC8readDataEjPhj+0x14>

000d5b7e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b82:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5b84:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b86:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5b88:	460e      	mov	r6, r1
   d5b8a:	4690      	mov	r8, r2
   d5b8c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5b8e:	f002 fc2d 	bl	d83ec <_ZN7TwoWire4lockEv>
   d5b92:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5b96:	f1b9 0f00 	cmp.w	r9, #0
   d5b9a:	d02a      	beq.n	d5bf2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5b9c:	b34d      	cbz	r5, d5bf2 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5b9e:	68e1      	ldr	r1, [r4, #12]
   d5ba0:	6860      	ldr	r0, [r4, #4]
   d5ba2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5ba6:	f002 fc02 	bl	d83ae <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5baa:	0a31      	lsrs	r1, r6, #8
   d5bac:	6860      	ldr	r0, [r4, #4]
   d5bae:	f7ff ff4b 	bl	d5a48 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5bb2:	6860      	ldr	r0, [r4, #4]
   d5bb4:	4631      	mov	r1, r6
   d5bb6:	f7ff ff47 	bl	d5a48 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bba:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5bbe:	4647      	mov	r7, r8
   d5bc0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5bc4:	6860      	ldr	r0, [r4, #4]
   d5bc6:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5bca:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5bcc:	3d01      	subs	r5, #1
				wire.write(*data);
   d5bce:	689b      	ldr	r3, [r3, #8]
   d5bd0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bd2:	4555      	cmp	r5, sl
   d5bd4:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5bd8:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bda:	d001      	beq.n	d5be0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5bdc:	2d00      	cmp	r5, #0
   d5bde:	d1f1      	bne.n	d5bc4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5be0:	6860      	ldr	r0, [r4, #4]
   d5be2:	2101      	movs	r1, #1
   d5be4:	f002 fbfe 	bl	d83e4 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5be8:	2800      	cmp	r0, #0
   d5bea:	d0d7      	beq.n	d5b9c <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5bec:	f04f 0900 	mov.w	r9, #0
   d5bf0:	e7d1      	b.n	d5b96 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5bf2:	a801      	add	r0, sp, #4
   d5bf4:	f7ff ff39 	bl	d5a6a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5bf8:	4648      	mov	r0, r9
   d5bfa:	b003      	add	sp, #12
   d5bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5c00 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c04:	b08b      	sub	sp, #44	; 0x2c
   d5c06:	460e      	mov	r6, r1
   d5c08:	4615      	mov	r5, r2
   d5c0a:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5c0c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c0e:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c10:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5c12:	f002 fbeb 	bl	d83ec <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5c16:	42ae      	cmp	r6, r5
   d5c18:	d229      	bcs.n	d5c6e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5c1a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5c1c:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5c1e:	b18c      	cbz	r4, d5c44 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5c20:	2c1e      	cmp	r4, #30
   d5c22:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5c24:	f8d8 3000 	ldr.w	r3, [r8]
   d5c28:	bf28      	it	cs
   d5c2a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5c2c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5c2e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5c32:	aa02      	add	r2, sp, #8
   d5c34:	463b      	mov	r3, r7
   d5c36:	4631      	mov	r1, r6
   d5c38:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5c3a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5c3c:	47c8      	blx	r9
				if (!result) {
   d5c3e:	b948      	cbnz	r0, d5c54 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c40:	2400      	movs	r4, #0
   d5c42:	e000      	b.n	d5c46 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5c44:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5c46:	a801      	add	r0, sp, #4
   d5c48:	f7ff ff0f 	bl	d5a6a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5c4c:	4620      	mov	r0, r4
   d5c4e:	b00b      	add	sp, #44	; 0x2c
   d5c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5c54:	f8d8 3000 	ldr.w	r3, [r8]
   d5c58:	aa02      	add	r2, sp, #8
   d5c5a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5c5e:	4629      	mov	r1, r5
   d5c60:	463b      	mov	r3, r7
   d5c62:	4640      	mov	r0, r8
   d5c64:	47c8      	blx	r9
				if (!result) {
   d5c66:	2800      	cmp	r0, #0
   d5c68:	d0ea      	beq.n	d5c40 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5c6a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5c6c:	e7d7      	b.n	d5c1e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5c6e:	d9e9      	bls.n	d5c44 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5c70:	2c00      	cmp	r4, #0
   d5c72:	d0e7      	beq.n	d5c44 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5c74:	f8d8 3000 	ldr.w	r3, [r8]
   d5c78:	2c1e      	cmp	r4, #30
   d5c7a:	4627      	mov	r7, r4
   d5c7c:	bf28      	it	cs
   d5c7e:	271e      	movcs	r7, #30
   d5c80:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5c84:	aa02      	add	r2, sp, #8
   d5c86:	463b      	mov	r3, r7
   d5c88:	4631      	mov	r1, r6
   d5c8a:	4640      	mov	r0, r8
   d5c8c:	47c8      	blx	r9
				if (!result) {
   d5c8e:	2800      	cmp	r0, #0
   d5c90:	d0d6      	beq.n	d5c40 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5c92:	f8d8 3000 	ldr.w	r3, [r8]
   d5c96:	aa02      	add	r2, sp, #8
   d5c98:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5c9c:	4629      	mov	r1, r5
   d5c9e:	463b      	mov	r3, r7
   d5ca0:	4640      	mov	r0, r8
   d5ca2:	47c8      	blx	r9
				if (!result) {
   d5ca4:	2800      	cmp	r0, #0
   d5ca6:	d0cb      	beq.n	d5c40 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5ca8:	443e      	add	r6, r7
				framAddrTo += count;
   d5caa:	443d      	add	r5, r7
				numBytes -= count;
   d5cac:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5cae:	e7df      	b.n	d5c70 <_ZN6MB85RC8moveDataEjjj+0x70>

000d5cb0 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d5cb0:	6001      	str	r1, [r0, #0]
   d5cb2:	7102      	strb	r2, [r0, #4]
{
}
   d5cb4:	4770      	bx	lr

000d5cb6 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d5cb6:	6800      	ldr	r0, [r0, #0]
   d5cb8:	6803      	ldr	r3, [r0, #0]
   d5cba:	68db      	ldr	r3, [r3, #12]
   d5cbc:	4718      	bx	r3

000d5cbe <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d5cbe:	6800      	ldr	r0, [r0, #0]
   d5cc0:	6803      	ldr	r3, [r0, #0]
   d5cc2:	6a1b      	ldr	r3, [r3, #32]
   d5cc4:	4718      	bx	r3

000d5cc6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d5cc6:	6800      	ldr	r0, [r0, #0]
   d5cc8:	6803      	ldr	r3, [r0, #0]
   d5cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ccc:	4718      	bx	r3

000d5cce <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d5cce:	6800      	ldr	r0, [r0, #0]
   d5cd0:	6803      	ldr	r3, [r0, #0]
   d5cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5cd4:	4718      	bx	r3

000d5cd6 <_ZN10RHDatagram6sendtoEPhhh>:
{
   d5cd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5cd8:	4605      	mov	r5, r0
   d5cda:	460c      	mov	r4, r1
    setHeaderTo(address);
   d5cdc:	4619      	mov	r1, r3
{
   d5cde:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d5ce0:	f7ff fff5 	bl	d5cce <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d5ce4:	6828      	ldr	r0, [r5, #0]
   d5ce6:	9a01      	ldr	r2, [sp, #4]
   d5ce8:	6803      	ldr	r3, [r0, #0]
   d5cea:	695b      	ldr	r3, [r3, #20]
   d5cec:	4621      	mov	r1, r4
}
   d5cee:	b003      	add	sp, #12
   d5cf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d5cf4:	4718      	bx	r3

000d5cf6 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d5cf6:	6800      	ldr	r0, [r0, #0]
   d5cf8:	6803      	ldr	r3, [r0, #0]
   d5cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cfc:	4718      	bx	r3

000d5cfe <_ZN10RHDatagram14setThisAddressEh>:
{
   d5cfe:	b538      	push	{r3, r4, r5, lr}
   d5d00:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d5d02:	6800      	ldr	r0, [r0, #0]
   d5d04:	6803      	ldr	r3, [r0, #0]
{
   d5d06:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d5d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d0a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d5d0c:	4629      	mov	r1, r5
   d5d0e:	4620      	mov	r0, r4
   d5d10:	f7ff fff1 	bl	d5cf6 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d5d14:	7125      	strb	r5, [r4, #4]
}
   d5d16:	bd38      	pop	{r3, r4, r5, pc}

000d5d18 <_ZN10RHDatagram4initEv>:
{
   d5d18:	b538      	push	{r3, r4, r5, lr}
   d5d1a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d5d1c:	6800      	ldr	r0, [r0, #0]
   d5d1e:	6803      	ldr	r3, [r0, #0]
   d5d20:	689b      	ldr	r3, [r3, #8]
   d5d22:	4798      	blx	r3
    if (ret)
   d5d24:	4605      	mov	r5, r0
   d5d26:	b118      	cbz	r0, d5d30 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d5d28:	7921      	ldrb	r1, [r4, #4]
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	f7ff ffe7 	bl	d5cfe <_ZN10RHDatagram14setThisAddressEh>
}
   d5d30:	4628      	mov	r0, r5
   d5d32:	bd38      	pop	{r3, r4, r5, pc}

000d5d34 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d5d34:	6800      	ldr	r0, [r0, #0]
   d5d36:	6803      	ldr	r3, [r0, #0]
   d5d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d3a:	4718      	bx	r3

000d5d3c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d5d3c:	6800      	ldr	r0, [r0, #0]
   d5d3e:	6803      	ldr	r3, [r0, #0]
   d5d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d42:	4718      	bx	r3

000d5d44 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d5d44:	6800      	ldr	r0, [r0, #0]
   d5d46:	6803      	ldr	r3, [r0, #0]
   d5d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5d4a:	4718      	bx	r3

000d5d4c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d5d4c:	6800      	ldr	r0, [r0, #0]
   d5d4e:	6803      	ldr	r3, [r0, #0]
   d5d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d52:	4718      	bx	r3

000d5d54 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d5d54:	6800      	ldr	r0, [r0, #0]
   d5d56:	6803      	ldr	r3, [r0, #0]
   d5d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5d5a:	4718      	bx	r3

000d5d5c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d5d5c:	6800      	ldr	r0, [r0, #0]
   d5d5e:	6803      	ldr	r3, [r0, #0]
   d5d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5d62:	4718      	bx	r3

000d5d64 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d5d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5d68:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d5d6a:	6800      	ldr	r0, [r0, #0]
{
   d5d6c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d5d6e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d5d70:	6803      	ldr	r3, [r0, #0]
   d5d72:	691b      	ldr	r3, [r3, #16]
{
   d5d74:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d5d78:	4798      	blx	r3
   d5d7a:	4605      	mov	r5, r0
   d5d7c:	b1c8      	cbz	r0, d5db2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d5d7e:	b11e      	cbz	r6, d5d88 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d5d80:	4620      	mov	r0, r4
   d5d82:	f7ff ffe3 	bl	d5d4c <_ZN10RHDatagram10headerFromEv>
   d5d86:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d5d88:	f1b9 0f00 	cmp.w	r9, #0
   d5d8c:	d004      	beq.n	d5d98 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d5d8e:	4620      	mov	r0, r4
   d5d90:	f7ff ffd8 	bl	d5d44 <_ZN10RHDatagram8headerToEv>
   d5d94:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d5d98:	f1b8 0f00 	cmp.w	r8, #0
   d5d9c:	d004      	beq.n	d5da8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d5d9e:	4620      	mov	r0, r4
   d5da0:	f7ff ffd8 	bl	d5d54 <_ZN10RHDatagram8headerIdEv>
   d5da4:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d5da8:	b11f      	cbz	r7, d5db2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d5daa:	4620      	mov	r0, r4
   d5dac:	f7ff ffd6 	bl	d5d5c <_ZN10RHDatagram11headerFlagsEv>
   d5db0:	7038      	strb	r0, [r7, #0]
}
   d5db2:	4628      	mov	r0, r5
   d5db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5db8 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d5db8:	2001      	movs	r0, #1
   d5dba:	4770      	bx	lr

000d5dbc <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d5dbc:	7903      	ldrb	r3, [r0, #4]
   d5dbe:	2b03      	cmp	r3, #3
   d5dc0:	d0fc      	beq.n	d5dbc <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d5dc2:	2001      	movs	r0, #1
   d5dc4:	4770      	bx	lr

000d5dc6 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d5dc6:	2000      	movs	r0, #0
   d5dc8:	4770      	bx	lr

000d5dca <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d5dca:	7181      	strb	r1, [r0, #6]
}
   d5dcc:	4770      	bx	lr

000d5dce <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d5dce:	7141      	strb	r1, [r0, #5]
}
   d5dd0:	4770      	bx	lr

000d5dd2 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d5dd2:	72c1      	strb	r1, [r0, #11]
}
   d5dd4:	4770      	bx	lr

000d5dd6 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d5dd6:	7301      	strb	r1, [r0, #12]
}
   d5dd8:	4770      	bx	lr

000d5dda <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d5dda:	7341      	strb	r1, [r0, #13]
}
   d5ddc:	4770      	bx	lr

000d5dde <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d5dde:	7b83      	ldrb	r3, [r0, #14]
   d5de0:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d5de4:	4311      	orrs	r1, r2
   d5de6:	7381      	strb	r1, [r0, #14]
}
   d5de8:	4770      	bx	lr

000d5dea <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d5dea:	79c0      	ldrb	r0, [r0, #7]
}
   d5dec:	4770      	bx	lr

000d5dee <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d5dee:	7a00      	ldrb	r0, [r0, #8]
}
   d5df0:	4770      	bx	lr

000d5df2 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d5df2:	7a40      	ldrb	r0, [r0, #9]
}
   d5df4:	4770      	bx	lr

000d5df6 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d5df6:	7a80      	ldrb	r0, [r0, #10]
}
   d5df8:	4770      	bx	lr

000d5dfa <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d5dfa:	8a00      	ldrh	r0, [r0, #16]
}
   d5dfc:	b200      	sxth	r0, r0
   d5dfe:	4770      	bx	lr

000d5e00 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d5e00:	7900      	ldrb	r0, [r0, #4]
}
   d5e02:	4770      	bx	lr

000d5e04 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d5e04:	7101      	strb	r1, [r0, #4]
}
   d5e06:	4770      	bx	lr

000d5e08 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d5e08:	8a40      	ldrh	r0, [r0, #18]
}
   d5e0a:	b280      	uxth	r0, r0
   d5e0c:	4770      	bx	lr

000d5e0e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d5e0e:	8a80      	ldrh	r0, [r0, #20]
}
   d5e10:	b280      	uxth	r0, r0
   d5e12:	4770      	bx	lr

000d5e14 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d5e14:	8ac0      	ldrh	r0, [r0, #22]
}
   d5e16:	b280      	uxth	r0, r0
   d5e18:	4770      	bx	lr

000d5e1a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d5e1a:	b538      	push	{r3, r4, r5, lr}
   d5e1c:	4605      	mov	r5, r0
   d5e1e:	460c      	mov	r4, r1
    while (!available())
   d5e20:	682b      	ldr	r3, [r5, #0]
   d5e22:	4628      	mov	r0, r5
   d5e24:	68db      	ldr	r3, [r3, #12]
   d5e26:	4798      	blx	r3
   d5e28:	b928      	cbnz	r0, d5e36 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d5e2a:	2c00      	cmp	r4, #0
   d5e2c:	d0f8      	beq.n	d5e20 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d5e2e:	4620      	mov	r0, r4
   d5e30:	f001 fd36 	bl	d78a0 <delay>
   d5e34:	e7f4      	b.n	d5e20 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d5e36:	bd38      	pop	{r3, r4, r5, pc}

000d5e38 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d5e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e3a:	4605      	mov	r5, r0
   d5e3c:	460f      	mov	r7, r1
   d5e3e:	4614      	mov	r4, r2
   d5e40:	f001 f9dc 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
   d5e44:	4606      	mov	r6, r0
   d5e46:	f001 f9d9 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d5e4a:	1b80      	subs	r0, r0, r6
   d5e4c:	42b8      	cmp	r0, r7
   d5e4e:	d20a      	bcs.n	d5e66 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d5e50:	682b      	ldr	r3, [r5, #0]
   d5e52:	4628      	mov	r0, r5
   d5e54:	68db      	ldr	r3, [r3, #12]
   d5e56:	4798      	blx	r3
   d5e58:	b930      	cbnz	r0, d5e68 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d5e5a:	2c00      	cmp	r4, #0
   d5e5c:	d0f3      	beq.n	d5e46 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d5e5e:	4620      	mov	r0, r4
   d5e60:	f001 fd1e 	bl	d78a0 <delay>
   d5e64:	e7ef      	b.n	d5e46 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d5e66:	2000      	movs	r0, #0
}
   d5e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e6a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d5e6a:	b570      	push	{r4, r5, r6, lr}
   d5e6c:	4604      	mov	r4, r0
   d5e6e:	460e      	mov	r6, r1
   d5e70:	f001 f9c4 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
   d5e74:	4605      	mov	r5, r0
   d5e76:	f001 f9c1 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d5e7a:	1b40      	subs	r0, r0, r5
   d5e7c:	42b0      	cmp	r0, r6
   d5e7e:	d204      	bcs.n	d5e8a <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d5e80:	7923      	ldrb	r3, [r4, #4]
   d5e82:	2b03      	cmp	r3, #3
   d5e84:	d0f7      	beq.n	d5e76 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d5e86:	2001      	movs	r0, #1
}
   d5e88:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d5e8a:	2000      	movs	r0, #0
   d5e8c:	e7fc      	b.n	d5e88 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d5e8e <_ZN15RHGenericDriver7waitCADEv>:
{
   d5e8e:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d5e90:	69c3      	ldr	r3, [r0, #28]
{
   d5e92:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d5e94:	b1b3      	cbz	r3, d5ec4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d5e96:	f001 f9b1 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d5e9a:	2664      	movs	r6, #100	; 0x64
   d5e9c:	4605      	mov	r5, r0
    while (isChannelActive())
   d5e9e:	6823      	ldr	r3, [r4, #0]
   d5ea0:	4620      	mov	r0, r4
   d5ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ea4:	4798      	blx	r3
   d5ea6:	b168      	cbz	r0, d5ec4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d5ea8:	f001 f9a8 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d5eac:	69e3      	ldr	r3, [r4, #28]
   d5eae:	1b40      	subs	r0, r0, r5
   d5eb0:	4298      	cmp	r0, r3
   d5eb2:	d809      	bhi.n	d5ec8 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d5eb4:	210a      	movs	r1, #10
   d5eb6:	2001      	movs	r0, #1
   d5eb8:	f003 fe9c 	bl	d9bf4 <_Z6randomii>
   d5ebc:	4370      	muls	r0, r6
   d5ebe:	f001 fcef 	bl	d78a0 <delay>
    while (isChannelActive())
   d5ec2:	e7ec      	b.n	d5e9e <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d5ec4:	2001      	movs	r0, #1
}
   d5ec6:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d5ec8:	2000      	movs	r0, #0
   d5eca:	e7fc      	b.n	d5ec6 <_ZN15RHGenericDriver7waitCADEv+0x38>

000d5ecc <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d5ecc:	4a06      	ldr	r2, [pc, #24]	; (d5ee8 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d5ece:	6002      	str	r2, [r0, #0]
   d5ed0:	21ff      	movs	r1, #255	; 0xff
   d5ed2:	2200      	movs	r2, #0
   d5ed4:	7102      	strb	r2, [r0, #4]
   d5ed6:	7141      	strb	r1, [r0, #5]
   d5ed8:	8242      	strh	r2, [r0, #18]
   d5eda:	72c1      	strb	r1, [r0, #11]
   d5edc:	8282      	strh	r2, [r0, #20]
   d5ede:	8181      	strh	r1, [r0, #12]
   d5ee0:	7382      	strb	r2, [r0, #14]
   d5ee2:	82c2      	strh	r2, [r0, #22]
   d5ee4:	61c2      	str	r2, [r0, #28]
}
   d5ee6:	4770      	bx	lr
   d5ee8:	000dbd10 	.word	0x000dbd10

000d5eec <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d5eec:	4770      	bx	lr

000d5eee <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d5eee:	4770      	bx	lr

000d5ef0 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d5ef0:	4770      	bx	lr

000d5ef2 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d5ef2:	4770      	bx	lr

000d5ef4 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d5ef4:	4770      	bx	lr

000d5ef6 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d5ef6:	7141      	strb	r1, [r0, #5]
}
   d5ef8:	4770      	bx	lr

000d5efa <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d5efa:	7181      	strb	r1, [r0, #6]
}
   d5efc:	4770      	bx	lr

000d5efe <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d5efe:	7101      	strb	r1, [r0, #4]
}
   d5f00:	4770      	bx	lr
	...

000d5f04 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d5f04:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d5f06:	4d03      	ldr	r5, [pc, #12]	; (d5f14 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d5f08:	6005      	str	r5, [r0, #0]
   d5f0a:	7101      	strb	r1, [r0, #4]
   d5f0c:	7142      	strb	r2, [r0, #5]
   d5f0e:	7183      	strb	r3, [r0, #6]
}
   d5f10:	bd30      	pop	{r4, r5, pc}
   d5f12:	bf00      	nop
   d5f14:	000dbd90 	.word	0x000dbd90

000d5f18 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d5f18:	4770      	bx	lr

000d5f1a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d5f1a:	b510      	push	{r4, lr}
  }
   d5f1c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d5f1e:	4604      	mov	r4, r0
  }
   d5f20:	f004 fcca 	bl	da8b8 <_ZdlPvj>
   d5f24:	4620      	mov	r0, r4
   d5f26:	bd10      	pop	{r4, pc}

000d5f28 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5f28:	b40e      	push	{r1, r2, r3}
   d5f2a:	b503      	push	{r0, r1, lr}
   d5f2c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d5f2e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d5f30:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d5f34:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d5f36:	f003 fe21 	bl	d9b7c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d5f3a:	b002      	add	sp, #8
   d5f3c:	f85d eb04 	ldr.w	lr, [sp], #4
   d5f40:	b003      	add	sp, #12
   d5f42:	4770      	bx	lr

000d5f44 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d5f44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5f46:	4604      	mov	r4, r0
   d5f48:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d5f4a:	7922      	ldrb	r2, [r4, #4]
   d5f4c:	68a3      	ldr	r3, [r4, #8]
   d5f4e:	b132      	cbz	r2, d5f5e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d5f50:	b9a3      	cbnz	r3, d5f7c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d5f52:	490b      	ldr	r1, [pc, #44]	; (d5f80 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d5f54:	b002      	add	sp, #8
   d5f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d5f5a:	f003 bdde 	b.w	d9b1a <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5f5e:	4a09      	ldr	r2, [pc, #36]	; (d5f84 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d5f60:	7b26      	ldrb	r6, [r4, #12]
   d5f62:	4d09      	ldr	r5, [pc, #36]	; (d5f88 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d5f64:	4909      	ldr	r1, [pc, #36]	; (d5f8c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d5f66:	7b64      	ldrb	r4, [r4, #13]
   d5f68:	2e01      	cmp	r6, #1
   d5f6a:	bf18      	it	ne
   d5f6c:	4629      	movne	r1, r5
   d5f6e:	e9cd 1400 	strd	r1, r4, [sp]
   d5f72:	4907      	ldr	r1, [pc, #28]	; (d5f90 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d5f74:	f7ff ffd8 	bl	d5f28 <_ZN5Print6printfEPKcz>
  }
   d5f78:	b002      	add	sp, #8
   d5f7a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d5f7c:	4a05      	ldr	r2, [pc, #20]	; (d5f94 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d5f7e:	e7ef      	b.n	d5f60 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d5f80:	000dbdcd 	.word	0x000dbdcd
   d5f84:	000dc0fd 	.word	0x000dc0fd
   d5f88:	000dbdc9 	.word	0x000dbdc9
   d5f8c:	000dbdc5 	.word	0x000dbdc5
   d5f90:	000dbde3 	.word	0x000dbde3
   d5f94:	000dbdbc 	.word	0x000dbdbc

000d5f98 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d5f98:	b510      	push	{r4, lr}
   d5f9a:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d5f9c:	f7ff ffb2 	bl	d5f04 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d5fa0:	4b05      	ldr	r3, [pc, #20]	; (d5fb8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d5fa2:	6023      	str	r3, [r4, #0]
  {
   d5fa4:	4b05      	ldr	r3, [pc, #20]	; (d5fbc <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d5fa6:	60a3      	str	r3, [r4, #8]
   d5fa8:	2301      	movs	r3, #1
   d5faa:	7323      	strb	r3, [r4, #12]
   d5fac:	2300      	movs	r3, #0
   d5fae:	6123      	str	r3, [r4, #16]
   d5fb0:	82a3      	strh	r3, [r4, #20]
{
}
   d5fb2:	4620      	mov	r0, r4
   d5fb4:	bd10      	pop	{r4, pc}
   d5fb6:	bf00      	nop
   d5fb8:	000dbe1c 	.word	0x000dbe1c
   d5fbc:	000dbe08 	.word	0x000dbe08

000d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d5fc0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d5fc2:	4c0b      	ldr	r4, [pc, #44]	; (d5ff0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d5fc4:	7821      	ldrb	r1, [r4, #0]
   d5fc6:	f3bf 8f5b 	dmb	ish
   d5fca:	f011 0101 	ands.w	r1, r1, #1
   d5fce:	d10b      	bne.n	d5fe8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	9101      	str	r1, [sp, #4]
   d5fd4:	f7fe f870 	bl	d40b8 <__cxa_guard_acquire>
   d5fd8:	9901      	ldr	r1, [sp, #4]
   d5fda:	b128      	cbz	r0, d5fe8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d5fdc:	4805      	ldr	r0, [pc, #20]	; (d5ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5fde:	f003 fe1f 	bl	d9c20 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	f7fe f86d 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d5fe8:	4802      	ldr	r0, [pc, #8]	; (d5ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d5fea:	b002      	add	sp, #8
   d5fec:	bd10      	pop	{r4, pc}
   d5fee:	bf00      	nop
   d5ff0:	2003e300 	.word	0x2003e300
   d5ff4:	2003e304 	.word	0x2003e304

000d5ff8 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d5ff8:	b507      	push	{r0, r1, r2, lr}
   d5ffa:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5ffc:	f7ff ffe0 	bl	d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d6000:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d6002:	b003      	add	sp, #12
   d6004:	f85d eb04 	ldr.w	lr, [sp], #4
   d6008:	f003 bebc 	b.w	d9d84 <_ZN8SPIClass8transferEh>

000d600c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d600c:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d600e:	f7ff ffd7 	bl	d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d6012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6016:	f003 bebb 	b.w	d9d90 <_ZN8SPIClass15attachInterruptEv>

000d601a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d601a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d601c:	f7ff ffd0 	bl	d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d6020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6024:	f003 beb5 	b.w	d9d92 <_ZN8SPIClass15detachInterruptEv>

000d6028 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d6028:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d602a:	7903      	ldrb	r3, [r0, #4]
   d602c:	2b04      	cmp	r3, #4
   d602e:	d020      	beq.n	d6072 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d6030:	2b03      	cmp	r3, #3
   d6032:	d020      	beq.n	d6076 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d6034:	2b02      	cmp	r3, #2
   d6036:	d020      	beq.n	d607a <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d6038:	4a11      	ldr	r2, [pc, #68]	; (d6080 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d603a:	4912      	ldr	r1, [pc, #72]	; (d6084 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d603c:	2b01      	cmp	r3, #1
   d603e:	bf18      	it	ne
   d6040:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d6042:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d6044:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d6046:	3901      	subs	r1, #1
   d6048:	bf18      	it	ne
   d604a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d604c:	b133      	cbz	r3, d605c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d604e:	2b01      	cmp	r3, #1
   d6050:	d004      	beq.n	d605c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d6052:	2b02      	cmp	r3, #2
   d6054:	d002      	beq.n	d605c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d6056:	2b03      	cmp	r3, #3
   d6058:	bf18      	it	ne
   d605a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d605c:	2400      	movs	r4, #0
   d605e:	7304      	strb	r4, [r0, #12]
   d6060:	6102      	str	r2, [r0, #16]
   d6062:	7501      	strb	r1, [r0, #20]
   d6064:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d6066:	f7ff ffab 	bl	d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d606a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d606e:	f003 bde1 	b.w	d9c34 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d6072:	4a05      	ldr	r2, [pc, #20]	; (d6088 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d6074:	e7e5      	b.n	d6042 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d6076:	4a05      	ldr	r2, [pc, #20]	; (d608c <_ZN13RHHardwareSPI5beginEv+0x64>)
   d6078:	e7e3      	b.n	d6042 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d607a:	4a05      	ldr	r2, [pc, #20]	; (d6090 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d607c:	e7e1      	b.n	d6042 <_ZN13RHHardwareSPI5beginEv+0x1a>
   d607e:	bf00      	nop
   d6080:	001e8480 	.word	0x001e8480
   d6084:	000f4240 	.word	0x000f4240
   d6088:	00f42400 	.word	0x00f42400
   d608c:	007a1200 	.word	0x007a1200
   d6090:	003d0900 	.word	0x003d0900

000d6094 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d6094:	b508      	push	{r3, lr}
        instance().end();
   d6096:	f7ff ff93 	bl	d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d609a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d609e:	f003 bdda 	b.w	d9c56 <_ZN8SPIClass3endEv>

000d60a2 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d60a2:	b510      	push	{r4, lr}
   d60a4:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d60a6:	f7ff ff8b 	bl	d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d60aa:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d60ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d60b2:	f003 bdf9 	b.w	d9ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d60b6 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d60b6:	b508      	push	{r3, lr}
        instance().endTransaction();
   d60b8:	f7ff ff82 	bl	d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d60bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d60c0:	f003 bdd8 	b.w	d9c74 <_ZN8SPIClass14endTransactionEv>

000d60c4 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d60c4:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d60c6:	f7ff ff7b 	bl	d5fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d60ca:	bd08      	pop	{r3, pc}

000d60cc <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d60cc:	2300      	movs	r3, #0
   d60ce:	4802      	ldr	r0, [pc, #8]	; (d60d8 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d60d0:	461a      	mov	r2, r3
   d60d2:	4619      	mov	r1, r3
   d60d4:	f7ff bf60 	b.w	d5f98 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d60d8:	2003e30c 	.word	0x2003e30c

000d60dc <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d60dc:	2a01      	cmp	r2, #1
   d60de:	d105      	bne.n	d60ec <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d60e0:	7a00      	ldrb	r0, [r0, #8]
   d60e2:	780b      	ldrb	r3, [r1, #0]
   d60e4:	1a1b      	subs	r3, r3, r0
   d60e6:	4258      	negs	r0, r3
   d60e8:	4158      	adcs	r0, r3
   d60ea:	4770      	bx	lr
   d60ec:	2000      	movs	r0, #0
}
   d60ee:	4770      	bx	lr

000d60f0 <_ZN6RHMesh5doArpEh>:
{
   d60f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d60f4:	4d26      	ldr	r5, [pc, #152]	; (d6190 <_ZN6RHMesh5doArpEh+0xa0>)
   d60f6:	2301      	movs	r3, #1
{
   d60f8:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d60fa:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d60fc:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d60fe:	2300      	movs	r3, #0
{
   d6100:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d6102:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d6104:	9300      	str	r3, [sp, #0]
   d6106:	2203      	movs	r2, #3
   d6108:	23ff      	movs	r3, #255	; 0xff
   d610a:	4629      	mov	r1, r5
{
   d610c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d610e:	f000 fbe7 	bl	d68e0 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d6112:	b120      	cbz	r0, d611e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d6114:	2400      	movs	r4, #0
}
   d6116:	4620      	mov	r0, r4
   d6118:	b007      	add	sp, #28
   d611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d611e:	23fa      	movs	r3, #250	; 0xfa
   d6120:	f88d 3017 	strb.w	r3, [sp, #23]
   d6124:	f001 f86a 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d6128:	f106 0904 	add.w	r9, r6, #4
   d612c:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d612e:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d6130:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d6134:	f001 f862 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
   d6138:	1a20      	subs	r0, r4, r0
   d613a:	2800      	cmp	r0, #0
   d613c:	ddea      	ble.n	d6114 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d613e:	b281      	uxth	r1, r0
   d6140:	2200      	movs	r2, #0
   d6142:	4648      	mov	r0, r9
   d6144:	f7ff fdbf 	bl	d5cc6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d6148:	2800      	cmp	r0, #0
   d614a:	d0f3      	beq.n	d6134 <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d614c:	2300      	movs	r3, #0
   d614e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d6152:	e9cd 3300 	strd	r3, r3, [sp]
   d6156:	f10d 0217 	add.w	r2, sp, #23
   d615a:	4651      	mov	r1, sl
   d615c:	4630      	mov	r0, r6
   d615e:	f000 fbc9 	bl	d68f4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d6162:	4604      	mov	r4, r0
   d6164:	2800      	cmp	r0, #0
   d6166:	d0e3      	beq.n	d6130 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d6168:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d616c:	2b01      	cmp	r3, #1
   d616e:	d9df      	bls.n	d6130 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d6170:	f895 b000 	ldrb.w	fp, [r5]
   d6174:	f1bb 0f02 	cmp.w	fp, #2
   d6178:	d1da      	bne.n	d6130 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d617a:	4648      	mov	r0, r9
   d617c:	f7ff fde6 	bl	d5d4c <_ZN10RHDatagram10headerFromEv>
   d6180:	465b      	mov	r3, fp
   d6182:	4602      	mov	r2, r0
   d6184:	4639      	mov	r1, r7
   d6186:	4630      	mov	r0, r6
   d6188:	f000 fb21 	bl	d67ce <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d618c:	e7c3      	b.n	d6116 <_ZN6RHMesh5doArpEh+0x26>
   d618e:	bf00      	nop
   d6190:	2003e324 	.word	0x2003e324

000d6194 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d6194:	2a01      	cmp	r2, #1
{
   d6196:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d619a:	4607      	mov	r7, r0
   d619c:	460e      	mov	r6, r1
   d619e:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d61a0:	d93b      	bls.n	d621a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d61a2:	794d      	ldrb	r5, [r1, #5]
   d61a4:	2d02      	cmp	r5, #2
   d61a6:	d130      	bne.n	d620a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d61a8:	f100 0804 	add.w	r8, r0, #4
   d61ac:	79c9      	ldrb	r1, [r1, #7]
   d61ae:	9101      	str	r1, [sp, #4]
   d61b0:	4640      	mov	r0, r8
   d61b2:	f7ff fdcb 	bl	d5d4c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d61b6:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d61b8:	462b      	mov	r3, r5
   d61ba:	4602      	mov	r2, r0
   d61bc:	9901      	ldr	r1, [sp, #4]
   d61be:	4638      	mov	r0, r7
   d61c0:	f000 fb05 	bl	d67ce <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d61c4:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d61c6:	f106 0308 	add.w	r3, r6, #8
   d61ca:	2400      	movs	r4, #0
   d61cc:	4622      	mov	r2, r4
   d61ce:	4295      	cmp	r5, r2
   d61d0:	f104 0401 	add.w	r4, r4, #1
   d61d4:	b2e4      	uxtb	r4, r4
   d61d6:	d904      	bls.n	d61e2 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d61d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d61dc:	7a39      	ldrb	r1, [r7, #8]
   d61de:	4291      	cmp	r1, r2
   d61e0:	d1f4      	bne.n	d61cc <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d61e2:	f104 0108 	add.w	r1, r4, #8
   d61e6:	440e      	add	r6, r1
	while (i < numRoutes)
   d61e8:	42a5      	cmp	r5, r4
   d61ea:	d916      	bls.n	d621a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d61ec:	f816 1b01 	ldrb.w	r1, [r6], #1
   d61f0:	9101      	str	r1, [sp, #4]
   d61f2:	4640      	mov	r0, r8
   d61f4:	f7ff fdaa 	bl	d5d4c <_ZN10RHDatagram10headerFromEv>
   d61f8:	3401      	adds	r4, #1
   d61fa:	4602      	mov	r2, r0
   d61fc:	9901      	ldr	r1, [sp, #4]
   d61fe:	2302      	movs	r3, #2
   d6200:	4638      	mov	r0, r7
   d6202:	b2e4      	uxtb	r4, r4
   d6204:	f000 fae3 	bl	d67ce <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d6208:	e7ee      	b.n	d61e8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d620a:	2d03      	cmp	r5, #3
   d620c:	d105      	bne.n	d621a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d620e:	7989      	ldrb	r1, [r1, #6]
}
   d6210:	b002      	add	sp, #8
   d6212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d6216:	f000 bac3 	b.w	d67a0 <_ZN8RHRouter13deleteRouteToEh>
}
   d621a:	b002      	add	sp, #8
   d621c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6220 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d6220:	b510      	push	{r4, lr}
   d6222:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d6224:	f000 fb14 	bl	d6850 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d6228:	4b01      	ldr	r3, [pc, #4]	; (d6230 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d622a:	6023      	str	r3, [r4, #0]
}
   d622c:	4620      	mov	r0, r4
   d622e:	bd10      	pop	{r4, pc}
   d6230:	000dbe50 	.word	0x000dbe50

000d6234 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d6234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d6238:	2af9      	cmp	r2, #249	; 0xf9
{
   d623a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d623e:	4606      	mov	r6, r0
   d6240:	460f      	mov	r7, r1
   d6242:	4614      	mov	r4, r2
   d6244:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d6246:	d825      	bhi.n	d6294 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d6248:	2bff      	cmp	r3, #255	; 0xff
   d624a:	d114      	bne.n	d6276 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d624c:	f8df 8048 	ldr.w	r8, [pc, #72]	; d6298 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d6250:	4640      	mov	r0, r8
   d6252:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d6254:	4622      	mov	r2, r4
   d6256:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d6258:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d625c:	f004 ffb2 	bl	db1c4 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d6260:	1c62      	adds	r2, r4, #1
   d6262:	f8cd 9020 	str.w	r9, [sp, #32]
   d6266:	462b      	mov	r3, r5
   d6268:	4641      	mov	r1, r8
   d626a:	4630      	mov	r0, r6
   d626c:	b2d2      	uxtb	r2, r2
}
   d626e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d6272:	f000 bb35 	b.w	d68e0 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d6276:	4619      	mov	r1, r3
   d6278:	f000 fa4e 	bl	d6718 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d627c:	2800      	cmp	r0, #0
   d627e:	d1e5      	bne.n	d624c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d6280:	6833      	ldr	r3, [r6, #0]
   d6282:	4629      	mov	r1, r5
   d6284:	689b      	ldr	r3, [r3, #8]
   d6286:	4630      	mov	r0, r6
   d6288:	4798      	blx	r3
   d628a:	2800      	cmp	r0, #0
   d628c:	d1de      	bne.n	d624c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d628e:	2002      	movs	r0, #2
}
   d6290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d6294:	2001      	movs	r0, #1
   d6296:	e7fb      	b.n	d6290 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d6298:	2003e324 	.word	0x2003e324

000d629c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d629c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62a0:	b089      	sub	sp, #36	; 0x24
   d62a2:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d62a4:	23fa      	movs	r3, #250	; 0xfa
   d62a6:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d62aa:	f10d 031f 	add.w	r3, sp, #31
   d62ae:	9303      	str	r3, [sp, #12]
   d62b0:	f10d 031e 	add.w	r3, sp, #30
   d62b4:	f8df a180 	ldr.w	sl, [pc, #384]	; d6438 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d62b8:	9302      	str	r3, [sp, #8]
   d62ba:	f10d 031d 	add.w	r3, sp, #29
   d62be:	9301      	str	r3, [sp, #4]
   d62c0:	ab07      	add	r3, sp, #28
   d62c2:	9300      	str	r3, [sp, #0]
{     
   d62c4:	4689      	mov	r9, r1
   d62c6:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d62c8:	f10d 031b 	add.w	r3, sp, #27
   d62cc:	f10d 021a 	add.w	r2, sp, #26
   d62d0:	4651      	mov	r1, sl
{     
   d62d2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d62d6:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d62d8:	f000 fb0c 	bl	d68f4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d62dc:	4656      	mov	r6, sl
   d62de:	4604      	mov	r4, r0
   d62e0:	b920      	cbnz	r0, d62ec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d62e2:	2400      	movs	r4, #0
}
   d62e4:	4620      	mov	r0, r4
   d62e6:	b009      	add	sp, #36	; 0x24
   d62e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d62ec:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d62f0:	b373      	cbz	r3, d6350 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d62f2:	f89a 2000 	ldrb.w	r2, [sl]
   d62f6:	bb5a      	cbnz	r2, d6350 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d62f8:	f1b8 0f00 	cmp.w	r8, #0
   d62fc:	d003      	beq.n	d6306 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d62fe:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d6302:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d6306:	f1bb 0f00 	cmp.w	fp, #0
   d630a:	d003      	beq.n	d6314 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d630c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d6310:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d6314:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d6316:	b11a      	cbz	r2, d6320 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d6318:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d631a:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d631e:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d6320:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d6322:	b11a      	cbz	r2, d632c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d6324:	9914      	ldr	r1, [sp, #80]	; 0x50
   d6326:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d632a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d632c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d632e:	b11a      	cbz	r2, d6338 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d6330:	9915      	ldr	r1, [sp, #84]	; 0x54
   d6332:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d6336:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d6338:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d633a:	493d      	ldr	r1, [pc, #244]	; (d6430 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d633c:	3b01      	subs	r3, #1
   d633e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d6340:	429a      	cmp	r2, r3
		*len = msgLen;
   d6342:	bf88      	it	hi
   d6344:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d6346:	783a      	ldrb	r2, [r7, #0]
   d6348:	4648      	mov	r0, r9
   d634a:	f004 ff3b 	bl	db1c4 <memcpy>
	    return true;
   d634e:	e7c9      	b.n	d62e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d6350:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d6354:	2aff      	cmp	r2, #255	; 0xff
   d6356:	d1c4      	bne.n	d62e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d6358:	2b01      	cmp	r3, #1
   d635a:	d9c2      	bls.n	d62e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d635c:	7832      	ldrb	r2, [r6, #0]
   d635e:	2a01      	cmp	r2, #1
   d6360:	d1bf      	bne.n	d62e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d6362:	7a2a      	ldrb	r2, [r5, #8]
   d6364:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d6368:	42a2      	cmp	r2, r4
   d636a:	d0ba      	beq.n	d62e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d636c:	1edf      	subs	r7, r3, #3
   d636e:	4931      	ldr	r1, [pc, #196]	; (d6434 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d6370:	b2ff      	uxtb	r7, r7
   d6372:	2300      	movs	r3, #0
   d6374:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d6378:	4547      	cmp	r7, r8
   d637a:	d906      	bls.n	d638a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d637c:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6380:	4282      	cmp	r2, r0
   d6382:	f103 0301 	add.w	r3, r3, #1
   d6386:	d1f5      	bne.n	d6374 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d6388:	e7ab      	b.n	d62e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d638a:	f105 0904 	add.w	r9, r5, #4
   d638e:	4648      	mov	r0, r9
   d6390:	f7ff fcdc 	bl	d5d4c <_ZN10RHDatagram10headerFromEv>
   d6394:	2302      	movs	r3, #2
   d6396:	4602      	mov	r2, r0
   d6398:	4621      	mov	r1, r4
   d639a:	4628      	mov	r0, r5
   d639c:	f000 fa17 	bl	d67ce <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d63a0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d63a4:	b193      	cbz	r3, d63cc <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d63a6:	4c24      	ldr	r4, [pc, #144]	; (d6438 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d63a8:	1ba3      	subs	r3, r4, r6
   d63aa:	b2db      	uxtb	r3, r3
   d63ac:	429f      	cmp	r7, r3
   d63ae:	d90c      	bls.n	d63ca <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d63b0:	78e1      	ldrb	r1, [r4, #3]
   d63b2:	9105      	str	r1, [sp, #20]
   d63b4:	4648      	mov	r0, r9
   d63b6:	f7ff fcc9 	bl	d5d4c <_ZN10RHDatagram10headerFromEv>
   d63ba:	9905      	ldr	r1, [sp, #20]
   d63bc:	4602      	mov	r2, r0
   d63be:	2302      	movs	r3, #2
   d63c0:	4628      	mov	r0, r5
   d63c2:	f000 fa04 	bl	d67ce <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d63c6:	3401      	adds	r4, #1
   d63c8:	e7ee      	b.n	d63a8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d63ca:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d63cc:	682b      	ldr	r3, [r5, #0]
   d63ce:	7872      	ldrb	r2, [r6, #1]
   d63d0:	68db      	ldr	r3, [r3, #12]
   d63d2:	491a      	ldr	r1, [pc, #104]	; (d643c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d63d4:	4628      	mov	r0, r5
   d63d6:	4798      	blx	r3
   d63d8:	4604      	mov	r4, r0
   d63da:	b160      	cbz	r0, d63f6 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d63dc:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d63de:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d63e0:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d63e2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d63e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d63ea:	4913      	ldr	r1, [pc, #76]	; (d6438 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d63ec:	9400      	str	r4, [sp, #0]
   d63ee:	4628      	mov	r0, r5
   d63f0:	f000 fa76 	bl	d68e0 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d63f4:	e776      	b.n	d62e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d63f6:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d63fa:	4543      	cmp	r3, r8
   d63fc:	f67f af71 	bls.w	d62e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d6400:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d6404:	2b00      	cmp	r3, #0
   d6406:	f43f af6c 	beq.w	d62e2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d640a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d640e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d6410:	4909      	ldr	r1, [pc, #36]	; (d6438 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d6412:	443e      	add	r6, r7
		tmpMessageLen++;
   d6414:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d6416:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d6418:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d641c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d641e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d6420:	9300      	str	r3, [sp, #0]
   d6422:	4628      	mov	r0, r5
   d6424:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d6426:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d642a:	f000 fa23 	bl	d6874 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d642e:	e759      	b.n	d62e4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d6430:	2003e325 	.word	0x2003e325
   d6434:	2003e327 	.word	0x2003e327
   d6438:	2003e324 	.word	0x2003e324
   d643c:	2003e326 	.word	0x2003e326

000d6440 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d6440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6444:	b085      	sub	sp, #20
   d6446:	4680      	mov	r8, r0
   d6448:	461c      	mov	r4, r3
   d644a:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d644e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d6450:	4689      	mov	r9, r1
   d6452:	4692      	mov	sl, r2
   d6454:	f000 fed2 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d6458:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d645c:	4404      	add	r4, r0
   d645e:	f000 fecd 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
   d6462:	1a20      	subs	r0, r4, r0
   d6464:	2800      	cmp	r0, #0
   d6466:	dd16      	ble.n	d6496 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d6468:	b281      	uxth	r1, r0
   d646a:	2200      	movs	r2, #0
   d646c:	4658      	mov	r0, fp
   d646e:	f7ff fc2a 	bl	d5cc6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d6472:	2800      	cmp	r0, #0
   d6474:	d0f3      	beq.n	d645e <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d6476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6478:	9300      	str	r3, [sp, #0]
   d647a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d647e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d6480:	9501      	str	r5, [sp, #4]
   d6482:	4652      	mov	r2, sl
   d6484:	4649      	mov	r1, r9
   d6486:	4640      	mov	r0, r8
   d6488:	f7ff ff08 	bl	d629c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d648c:	2800      	cmp	r0, #0
   d648e:	d0e6      	beq.n	d645e <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d6490:	b005      	add	sp, #20
   d6492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d6496:	2000      	movs	r0, #0
   d6498:	e7fa      	b.n	d6490 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d649c <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d649c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d649e:	b085      	sub	sp, #20
   d64a0:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d64a2:	3004      	adds	r0, #4
{
   d64a4:	460e      	mov	r6, r1
   d64a6:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d64a8:	f7ff fc50 	bl	d5d4c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d64ac:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d64ae:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d64b0:	4631      	mov	r1, r6
   d64b2:	4628      	mov	r0, r5
   d64b4:	f000 f947 	bl	d6746 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d64b8:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d64ba:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d64bc:	d001      	beq.n	d64c2 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d64be:	2805      	cmp	r0, #5
   d64c0:	d11b      	bne.n	d64fa <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d64c2:	7831      	ldrb	r1, [r6, #0]
   d64c4:	4628      	mov	r0, r5
   d64c6:	f000 f96b 	bl	d67a0 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d64ca:	7872      	ldrb	r2, [r6, #1]
   d64cc:	7a2b      	ldrb	r3, [r5, #8]
   d64ce:	429a      	cmp	r2, r3
   d64d0:	d013      	beq.n	d64fa <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d64d2:	4c0b      	ldr	r4, [pc, #44]	; (d6500 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d64d4:	2303      	movs	r3, #3
   d64d6:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d64d8:	7833      	ldrb	r3, [r6, #0]
   d64da:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d64dc:	7871      	ldrb	r1, [r6, #1]
   d64de:	2302      	movs	r3, #2
   d64e0:	463a      	mov	r2, r7
   d64e2:	4628      	mov	r0, r5
   d64e4:	f000 f973 	bl	d67ce <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d64e8:	2300      	movs	r3, #0
   d64ea:	9300      	str	r3, [sp, #0]
   d64ec:	4621      	mov	r1, r4
   d64ee:	7873      	ldrb	r3, [r6, #1]
   d64f0:	2202      	movs	r2, #2
   d64f2:	4628      	mov	r0, r5
   d64f4:	f000 f9f4 	bl	d68e0 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d64f8:	4604      	mov	r4, r0
}
   d64fa:	4620      	mov	r0, r4
   d64fc:	b005      	add	sp, #20
   d64fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6500:	2003e324 	.word	0x2003e324

000d6504 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d6504:	b510      	push	{r4, lr}
   d6506:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d6508:	f7ff fbd2 	bl	d5cb0 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d650c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d650e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d6510:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d6512:	2303      	movs	r3, #3
    _retransmissions = 0;
   d6514:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d6516:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d6518:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d651a:	f44f 7280 	mov.w	r2, #256	; 0x100
   d651e:	f104 0011 	add.w	r0, r4, #17
   d6522:	f004 fe77 	bl	db214 <memset>
}
   d6526:	4620      	mov	r0, r4
   d6528:	bd10      	pop	{r4, pc}

000d652a <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d652a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d652c:	4604      	mov	r4, r0
   d652e:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d6530:	f7ff fc00 	bl	d5d34 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d6534:	4620      	mov	r0, r4
   d6536:	2200      	movs	r2, #0
   d6538:	2180      	movs	r1, #128	; 0x80
   d653a:	f7ff fbff 	bl	d5d3c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d653e:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d6540:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d6542:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d6546:	f10d 010f 	add.w	r1, sp, #15
   d654a:	2201      	movs	r2, #1
   d654c:	4620      	mov	r0, r4
   d654e:	f7ff fbc2 	bl	d5cd6 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d6552:	4620      	mov	r0, r4
   d6554:	f7ff fbb3 	bl	d5cbe <_ZN10RHDatagram14waitPacketSentEv>
}
   d6558:	b004      	add	sp, #16
   d655a:	bd10      	pop	{r4, pc}

000d655c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d6560:	7b05      	ldrb	r5, [r0, #12]
   d6562:	3501      	adds	r5, #1
   d6564:	b2ed      	uxtb	r5, r5
{
   d6566:	b087      	sub	sp, #28
   d6568:	4604      	mov	r4, r0
   d656a:	4689      	mov	r9, r1
   d656c:	4692      	mov	sl, r2
   d656e:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d6570:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d6572:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d6574:	7c22      	ldrb	r2, [r4, #16]
   d6576:	463b      	mov	r3, r7
   d6578:	429a      	cmp	r2, r3
   d657a:	f107 0701 	add.w	r7, r7, #1
   d657e:	b2ff      	uxtb	r7, r7
   d6580:	d36b      	bcc.n	d665a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d6582:	4629      	mov	r1, r5
   d6584:	4620      	mov	r0, r4
   d6586:	f7ff fbd5 	bl	d5d34 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d658a:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d658c:	bf0d      	iteet	eq
   d658e:	22c0      	moveq	r2, #192	; 0xc0
   d6590:	2280      	movne	r2, #128	; 0x80
   d6592:	2140      	movne	r1, #64	; 0x40
   d6594:	2100      	moveq	r1, #0
   d6596:	4620      	mov	r0, r4
   d6598:	f7ff fbd0 	bl	d5d3c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d659c:	4643      	mov	r3, r8
   d659e:	4652      	mov	r2, sl
   d65a0:	4649      	mov	r1, r9
   d65a2:	4620      	mov	r0, r4
   d65a4:	f7ff fb97 	bl	d5cd6 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d65a8:	4620      	mov	r0, r4
   d65aa:	f7ff fb88 	bl	d5cbe <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d65ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d65b2:	d054      	beq.n	d665e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d65b4:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d65b6:	bf82      	ittt	hi
   d65b8:	68a3      	ldrhi	r3, [r4, #8]
   d65ba:	3301      	addhi	r3, #1
   d65bc:	60a3      	strhi	r3, [r4, #8]
   d65be:	f000 fe1d 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d65c2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d65c6:	4683      	mov	fp, r0
   d65c8:	2000      	movs	r0, #0
   d65ca:	89e6      	ldrh	r6, [r4, #14]
   d65cc:	f003 fb12 	bl	d9bf4 <_Z6randomii>
   d65d0:	4370      	muls	r0, r6
   d65d2:	bf48      	it	mi
   d65d4:	30ff      	addmi	r0, #255	; 0xff
   d65d6:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d65da:	fa1b f686 	uxtah	r6, fp, r6
   d65de:	f000 fe0d 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
   d65e2:	1a30      	subs	r0, r6, r0
   d65e4:	2800      	cmp	r0, #0
   d65e6:	ddc5      	ble.n	d6574 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d65e8:	b281      	uxth	r1, r0
   d65ea:	2200      	movs	r2, #0
   d65ec:	4620      	mov	r0, r4
   d65ee:	f7ff fb6a 	bl	d5cc6 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d65f2:	2800      	cmp	r0, #0
   d65f4:	d0f3      	beq.n	d65de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d65f6:	f10d 0317 	add.w	r3, sp, #23
   d65fa:	9302      	str	r3, [sp, #8]
   d65fc:	f10d 0316 	add.w	r3, sp, #22
   d6600:	9301      	str	r3, [sp, #4]
   d6602:	2200      	movs	r2, #0
   d6604:	f10d 0315 	add.w	r3, sp, #21
   d6608:	9300      	str	r3, [sp, #0]
   d660a:	4611      	mov	r1, r2
   d660c:	ab05      	add	r3, sp, #20
   d660e:	4620      	mov	r0, r4
   d6610:	f7ff fba8 	bl	d5d64 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d6614:	2800      	cmp	r0, #0
   d6616:	d0e2      	beq.n	d65de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d6618:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d661c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d6620:	4542      	cmp	r2, r8
   d6622:	d10e      	bne.n	d6642 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d6624:	f894 c004 	ldrb.w	ip, [r4, #4]
   d6628:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d662c:	458c      	cmp	ip, r1
   d662e:	d108      	bne.n	d6642 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d6630:	2b00      	cmp	r3, #0
   d6632:	da08      	bge.n	d6646 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d6634:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d6638:	42ab      	cmp	r3, r5
   d663a:	d1d0      	bne.n	d65de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d663c:	b007      	add	sp, #28
   d663e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d6642:	2b00      	cmp	r3, #0
   d6644:	dbcb      	blt.n	d65de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d6646:	18a1      	adds	r1, r4, r2
   d6648:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d664c:	7c49      	ldrb	r1, [r1, #17]
   d664e:	4299      	cmp	r1, r3
   d6650:	d1c5      	bne.n	d65de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d6652:	4620      	mov	r0, r4
   d6654:	f7ff ff69 	bl	d652a <_ZN18RHReliableDatagram11acknowledgeEhh>
   d6658:	e7c1      	b.n	d65de <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d665a:	2000      	movs	r0, #0
   d665c:	e7ee      	b.n	d663c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d665e:	2001      	movs	r0, #1
   d6660:	e7ec      	b.n	d663c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d6662 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d6662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6666:	b089      	sub	sp, #36	; 0x24
   d6668:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d666c:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d6670:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d6672:	4604      	mov	r4, r0
   d6674:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d6676:	f7ff fb1e 	bl	d5cb6 <_ZN10RHDatagram9availableEv>
   d667a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d667e:	b920      	cbnz	r0, d668a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d6680:	2500      	movs	r5, #0
}
   d6682:	4628      	mov	r0, r5
   d6684:	b009      	add	sp, #36	; 0x24
   d6686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d668a:	f10d 031f 	add.w	r3, sp, #31
   d668e:	9302      	str	r3, [sp, #8]
   d6690:	f10d 031e 	add.w	r3, sp, #30
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	f10d 031d 	add.w	r3, sp, #29
   d669a:	9300      	str	r3, [sp, #0]
   d669c:	4620      	mov	r0, r4
   d669e:	ab07      	add	r3, sp, #28
   d66a0:	f7ff fb60 	bl	d5d64 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d66a4:	4605      	mov	r5, r0
   d66a6:	2800      	cmp	r0, #0
   d66a8:	d0ea      	beq.n	d6680 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d66aa:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d66ae:	2b00      	cmp	r3, #0
   d66b0:	dbe6      	blt.n	d6680 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d66b2:	7922      	ldrb	r2, [r4, #4]
   d66b4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d66b8:	429a      	cmp	r2, r3
   d66ba:	d106      	bne.n	d66ca <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d66bc:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d66c0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d66c4:	4620      	mov	r0, r4
   d66c6:	f7ff ff30 	bl	d652a <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d66ca:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d66ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d66d2:	4414      	add	r4, r2
   d66d4:	7c61      	ldrb	r1, [r4, #17]
   d66d6:	4299      	cmp	r1, r3
   d66d8:	d0d2      	beq.n	d6680 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d66da:	b106      	cbz	r6, d66de <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d66dc:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d66de:	f1b9 0f00 	cmp.w	r9, #0
   d66e2:	d003      	beq.n	d66ec <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d66e4:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d66e8:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d66ec:	f1b8 0f00 	cmp.w	r8, #0
   d66f0:	d001      	beq.n	d66f6 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d66f2:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d66f6:	b117      	cbz	r7, d66fe <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d66f8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d66fc:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d66fe:	7463      	strb	r3, [r4, #17]
		return true;
   d6700:	e7bf      	b.n	d6682 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d6702 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d6702:	4770      	bx	lr

000d6704 <_ZN8RHRouter4initEv>:
{
   d6704:	b510      	push	{r4, lr}
   d6706:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d6708:	3004      	adds	r0, #4
   d670a:	f7ff fb05 	bl	d5d18 <_ZN10RHDatagram4initEv>
    if (ret)
   d670e:	b110      	cbz	r0, d6716 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d6710:	231e      	movs	r3, #30
   d6712:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d6716:	bd10      	pop	{r4, pc}

000d6718 <_ZN8RHRouter10getRouteToEh>:
{
   d6718:	b510      	push	{r4, lr}
   d671a:	4602      	mov	r2, r0
   d671c:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d671e:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d6722:	428c      	cmp	r4, r1
   d6724:	d108      	bne.n	d6738 <_ZN8RHRouter10getRouteToEh+0x20>
   d6726:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d672a:	b12c      	cbz	r4, d6738 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d672c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d6730:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d6734:	4418      	add	r0, r3
}
   d6736:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6738:	3301      	adds	r3, #1
   d673a:	2b0a      	cmp	r3, #10
   d673c:	f102 0203 	add.w	r2, r2, #3
   d6740:	d1ed      	bne.n	d671e <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d6742:	2000      	movs	r0, #0
   d6744:	e7f7      	b.n	d6736 <_ZN8RHRouter10getRouteToEh+0x1e>

000d6746 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d6746:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d6748:	780b      	ldrb	r3, [r1, #0]
   d674a:	2bff      	cmp	r3, #255	; 0xff
{
   d674c:	4605      	mov	r5, r0
   d674e:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d6750:	d006      	beq.n	d6760 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d6752:	4619      	mov	r1, r3
   d6754:	9201      	str	r2, [sp, #4]
   d6756:	f7ff ffdf 	bl	d6718 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d675a:	b158      	cbz	r0, d6774 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d675c:	7843      	ldrb	r3, [r0, #1]
   d675e:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d6760:	4621      	mov	r1, r4
   d6762:	1d28      	adds	r0, r5, #4
   d6764:	f7ff fefa 	bl	d655c <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d6768:	2800      	cmp	r0, #0
   d676a:	bf14      	ite	ne
   d676c:	2000      	movne	r0, #0
   d676e:	2005      	moveq	r0, #5
}
   d6770:	b003      	add	sp, #12
   d6772:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d6774:	2002      	movs	r0, #2
   d6776:	e7fb      	b.n	d6770 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d6778 <_ZN8RHRouter11deleteRouteEh>:
{
   d6778:	b510      	push	{r4, lr}
   d677a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d677e:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d6780:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d6784:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d6788:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d678c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d6790:	4421      	add	r1, r4
   d6792:	4420      	add	r0, r4
   d6794:	f004 fd16 	bl	db1c4 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d6798:	2300      	movs	r3, #0
   d679a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d679e:	bd10      	pop	{r4, pc}

000d67a0 <_ZN8RHRouter13deleteRouteToEh>:
{
   d67a0:	b538      	push	{r3, r4, r5, lr}
   d67a2:	460a      	mov	r2, r1
   d67a4:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d67a6:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d67aa:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d67ae:	b2d9      	uxtb	r1, r3
   d67b0:	5d65      	ldrb	r5, [r4, r5]
   d67b2:	4295      	cmp	r5, r2
   d67b4:	d103      	bne.n	d67be <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d67b6:	f7ff ffdf 	bl	d6778 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d67ba:	2001      	movs	r0, #1
}
   d67bc:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d67be:	3301      	adds	r3, #1
   d67c0:	2b0a      	cmp	r3, #10
   d67c2:	d1f2      	bne.n	d67aa <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d67c4:	2000      	movs	r0, #0
   d67c6:	e7f9      	b.n	d67bc <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d67c8 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d67c8:	2100      	movs	r1, #0
   d67ca:	f7ff bfd5 	b.w	d6778 <_ZN8RHRouter11deleteRouteEh>

000d67ce <_ZN8RHRouter10addRouteToEhhh>:
{
   d67ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67d0:	4616      	mov	r6, r2
   d67d2:	461f      	mov	r7, r3
   d67d4:	4604      	mov	r4, r0
   d67d6:	460d      	mov	r5, r1
   d67d8:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d67da:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d67de:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d67e2:	5c11      	ldrb	r1, [r2, r0]
   d67e4:	42a9      	cmp	r1, r5
   d67e6:	d105      	bne.n	d67f4 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d67e8:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d67ea:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d67ee:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d67f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d67f4:	3301      	adds	r3, #1
   d67f6:	2b0a      	cmp	r3, #10
   d67f8:	d1f1      	bne.n	d67de <_ZN8RHRouter10addRouteToEhhh+0x10>
   d67fa:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d67fc:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d6800:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d6804:	5c11      	ldrb	r1, [r2, r0]
   d6806:	b919      	cbnz	r1, d6810 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d6808:	4420      	add	r0, r4
   d680a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d680e:	e7ec      	b.n	d67ea <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6810:	3301      	adds	r3, #1
   d6812:	2b0a      	cmp	r3, #10
   d6814:	d1f4      	bne.n	d6800 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d6816:	4620      	mov	r0, r4
   d6818:	f7ff ffd6 	bl	d67c8 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d681c:	4620      	mov	r0, r4
   d681e:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d6822:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d6826:	b92a      	cbnz	r2, d6834 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d6828:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d682c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d6830:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6834:	3003      	adds	r0, #3
   d6836:	4298      	cmp	r0, r3
   d6838:	d1f3      	bne.n	d6822 <_ZN8RHRouter10addRouteToEhhh+0x54>
   d683a:	e7da      	b.n	d67f2 <_ZN8RHRouter10addRouteToEhhh+0x24>

000d683c <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d683c:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d6840:	2200      	movs	r2, #0
   d6842:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6846:	3003      	adds	r0, #3
   d6848:	4298      	cmp	r0, r3
   d684a:	d1fa      	bne.n	d6842 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d684c:	4770      	bx	lr
	...

000d6850 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d6850:	b510      	push	{r4, lr}
   d6852:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d6854:	3004      	adds	r0, #4
   d6856:	f7ff fe55 	bl	d6504 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d685a:	4b05      	ldr	r3, [pc, #20]	; (d6870 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d685c:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d685e:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d6862:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d6864:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d6868:	f7ff ffe8 	bl	d683c <_ZN8RHRouter17clearRoutingTableEv>
}
   d686c:	4620      	mov	r0, r4
   d686e:	bd10      	pop	{r4, pc}
   d6870:	000dbe68 	.word	0x000dbe68

000d6874 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d6874:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6878:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d687a:	6840      	ldr	r0, [r0, #4]
{
   d687c:	9101      	str	r1, [sp, #4]
   d687e:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d6880:	6803      	ldr	r3, [r0, #0]
{
   d6882:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d6886:	699b      	ldr	r3, [r3, #24]
{
   d6888:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d688c:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d688e:	4798      	blx	r3
   d6890:	f106 0805 	add.w	r8, r6, #5
   d6894:	4580      	cmp	r8, r0
   d6896:	d81c      	bhi.n	d68d2 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d6898:	4d10      	ldr	r5, [pc, #64]	; (d68dc <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d689a:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d689c:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d68a0:	2300      	movs	r3, #0
   d68a2:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d68a4:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d68a8:	70eb      	strb	r3, [r5, #3]
   d68aa:	1c5a      	adds	r2, r3, #1
   d68ac:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d68b0:	1d68      	adds	r0, r5, #5
   d68b2:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d68b4:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d68b6:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d68ba:	f004 fc83 	bl	db1c4 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d68be:	6823      	ldr	r3, [r4, #0]
   d68c0:	685b      	ldr	r3, [r3, #4]
   d68c2:	fa5f f288 	uxtb.w	r2, r8
   d68c6:	4629      	mov	r1, r5
   d68c8:	4620      	mov	r0, r4
}
   d68ca:	b002      	add	sp, #8
   d68cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d68d0:	4718      	bx	r3
}
   d68d2:	2001      	movs	r0, #1
   d68d4:	b002      	add	sp, #8
   d68d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68da:	bf00      	nop
   d68dc:	2003e41e 	.word	0x2003e41e

000d68e0 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d68e0:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d68e2:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d68e6:	9401      	str	r4, [sp, #4]
   d68e8:	7a04      	ldrb	r4, [r0, #8]
   d68ea:	9400      	str	r4, [sp, #0]
   d68ec:	f7ff ffc2 	bl	d6874 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d68f0:	b002      	add	sp, #8
   d68f2:	bd10      	pop	{r4, pc}

000d68f4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d68f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68f8:	b087      	sub	sp, #28
   d68fa:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d68fc:	23ff      	movs	r3, #255	; 0xff
   d68fe:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d6902:	f10d 0317 	add.w	r3, sp, #23
   d6906:	9302      	str	r3, [sp, #8]
   d6908:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d69dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d690c:	f10d 0316 	add.w	r3, sp, #22
   d6910:	9301      	str	r3, [sp, #4]
   d6912:	f10d 0315 	add.w	r3, sp, #21
   d6916:	9300      	str	r3, [sp, #0]
{  
   d6918:	4604      	mov	r4, r0
   d691a:	4688      	mov	r8, r1
   d691c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d691e:	ab05      	add	r3, sp, #20
   d6920:	f10d 0213 	add.w	r2, sp, #19
   d6924:	4649      	mov	r1, r9
   d6926:	3004      	adds	r0, #4
{  
   d6928:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d692c:	f7ff fe99 	bl	d6662 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d6930:	4605      	mov	r5, r0
   d6932:	b908      	cbnz	r0, d6938 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d6934:	2500      	movs	r5, #0
   d6936:	e038      	b.n	d69aa <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d6938:	6823      	ldr	r3, [r4, #0]
   d693a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d693e:	681b      	ldr	r3, [r3, #0]
   d6940:	4649      	mov	r1, r9
   d6942:	4620      	mov	r0, r4
   d6944:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d6946:	f899 3000 	ldrb.w	r3, [r9]
   d694a:	7a22      	ldrb	r2, [r4, #8]
   d694c:	429a      	cmp	r2, r3
   d694e:	d001      	beq.n	d6954 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d6950:	2bff      	cmp	r3, #255	; 0xff
   d6952:	d12e      	bne.n	d69b2 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d6954:	b117      	cbz	r7, d695c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d6956:	4b21      	ldr	r3, [pc, #132]	; (d69dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d6958:	785b      	ldrb	r3, [r3, #1]
   d695a:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d695c:	f1bb 0f00 	cmp.w	fp, #0
   d6960:	d003      	beq.n	d696a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d6962:	4b1e      	ldr	r3, [pc, #120]	; (d69dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d6964:	781b      	ldrb	r3, [r3, #0]
   d6966:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d696a:	f1ba 0f00 	cmp.w	sl, #0
   d696e:	d003      	beq.n	d6978 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d6970:	4b1a      	ldr	r3, [pc, #104]	; (d69dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d6972:	78db      	ldrb	r3, [r3, #3]
   d6974:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d6978:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d697a:	b11b      	cbz	r3, d6984 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d697c:	4b17      	ldr	r3, [pc, #92]	; (d69dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d697e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d6980:	791b      	ldrb	r3, [r3, #4]
   d6982:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d6984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d6986:	b11b      	cbz	r3, d6990 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d6988:	4b14      	ldr	r3, [pc, #80]	; (d69dc <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d698a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d698c:	789b      	ldrb	r3, [r3, #2]
   d698e:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d6990:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d6994:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d6996:	4912      	ldr	r1, [pc, #72]	; (d69e0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d6998:	3b05      	subs	r3, #5
   d699a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d699c:	429a      	cmp	r2, r3
		*len = msgLen;
   d699e:	bf88      	it	hi
   d69a0:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d69a2:	7832      	ldrb	r2, [r6, #0]
   d69a4:	4640      	mov	r0, r8
   d69a6:	f004 fc0d 	bl	db1c4 <memcpy>
}
   d69aa:	4628      	mov	r0, r5
   d69ac:	b007      	add	sp, #28
   d69ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d69b2:	f899 3002 	ldrb.w	r3, [r9, #2]
   d69b6:	1c5a      	adds	r2, r3, #1
   d69b8:	f889 2002 	strb.w	r2, [r9, #2]
   d69bc:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d69c0:	429a      	cmp	r2, r3
   d69c2:	d9b7      	bls.n	d6934 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d69c4:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d69c8:	2b00      	cmp	r3, #0
   d69ca:	d0b3      	beq.n	d6934 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d69cc:	6823      	ldr	r3, [r4, #0]
   d69ce:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d69d2:	685b      	ldr	r3, [r3, #4]
   d69d4:	4649      	mov	r1, r9
   d69d6:	4620      	mov	r0, r4
   d69d8:	4798      	blx	r3
   d69da:	e7ab      	b.n	d6934 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d69dc:	2003e41e 	.word	0x2003e41e
   d69e0:	2003e423 	.word	0x2003e423

000d69e4 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d69e4:	b510      	push	{r4, lr}
   d69e6:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d69e8:	6a00      	ldr	r0, [r0, #32]
   d69ea:	6803      	ldr	r3, [r0, #0]
   d69ec:	68db      	ldr	r3, [r3, #12]
   d69ee:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d69f0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d69f4:	28ff      	cmp	r0, #255	; 0xff
   d69f6:	d002      	beq.n	d69fe <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d69f8:	2101      	movs	r1, #1
   d69fa:	f003 fe8f 	bl	da71c <pinMode>

    deselectSlave();
   d69fe:	6823      	ldr	r3, [r4, #0]
   d6a00:	4620      	mov	r0, r4
   d6a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6a04:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d6a06:	2064      	movs	r0, #100	; 0x64
   d6a08:	f000 ff4a 	bl	d78a0 <delay>
#endif
    
    return true;
}
   d6a0c:	2001      	movs	r0, #1
   d6a0e:	bd10      	pop	{r4, pc}

000d6a10 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d6a10:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d6a14:	2100      	movs	r1, #0
   d6a16:	f003 be92 	b.w	da73e <digitalWrite>

000d6a1a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d6a1a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d6a1e:	2101      	movs	r1, #1
   d6a20:	f003 be8d 	b.w	da73e <digitalWrite>

000d6a24 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d6a24:	b570      	push	{r4, r5, r6, lr}
   d6a26:	4604      	mov	r4, r0
   d6a28:	460d      	mov	r5, r1
   d6a2a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d6a2c:	f7ff fa4e 	bl	d5ecc <_ZN15RHGenericDriverC1Ev>
   d6a30:	4b03      	ldr	r3, [pc, #12]	; (d6a40 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d6a32:	6023      	str	r3, [r4, #0]
   d6a34:	6226      	str	r6, [r4, #32]
   d6a36:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d6a3a:	4620      	mov	r0, r4
   d6a3c:	bd70      	pop	{r4, r5, r6, pc}
   d6a3e:	bf00      	nop
   d6a40:	000dbe78 	.word	0x000dbe78

000d6a44 <_ZN11RHSPIDriver7spiReadEh>:
{
   d6a44:	b538      	push	{r3, r4, r5, lr}
   d6a46:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d6a48:	6a00      	ldr	r0, [r0, #32]
   d6a4a:	6803      	ldr	r3, [r0, #0]
   d6a4c:	6a1b      	ldr	r3, [r3, #32]
{
   d6a4e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d6a50:	4798      	blx	r3
    selectSlave();
   d6a52:	6823      	ldr	r3, [r4, #0]
   d6a54:	4620      	mov	r0, r4
   d6a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6a58:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d6a5a:	6a20      	ldr	r0, [r4, #32]
   d6a5c:	6803      	ldr	r3, [r0, #0]
   d6a5e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d6a62:	681b      	ldr	r3, [r3, #0]
   d6a64:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d6a66:	6a20      	ldr	r0, [r4, #32]
   d6a68:	6803      	ldr	r3, [r0, #0]
   d6a6a:	2100      	movs	r1, #0
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	4798      	blx	r3
    deselectSlave();
   d6a70:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d6a72:	4605      	mov	r5, r0
    deselectSlave();
   d6a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6a76:	4620      	mov	r0, r4
   d6a78:	4798      	blx	r3
    _spi.endTransaction();
   d6a7a:	6a20      	ldr	r0, [r4, #32]
   d6a7c:	6803      	ldr	r3, [r0, #0]
   d6a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6a80:	4798      	blx	r3
}
   d6a82:	4628      	mov	r0, r5
   d6a84:	bd38      	pop	{r3, r4, r5, pc}

000d6a86 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d6a86:	b570      	push	{r4, r5, r6, lr}
   d6a88:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d6a8a:	6a00      	ldr	r0, [r0, #32]
   d6a8c:	6803      	ldr	r3, [r0, #0]
   d6a8e:	6a1b      	ldr	r3, [r3, #32]
{
   d6a90:	4616      	mov	r6, r2
   d6a92:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d6a94:	4798      	blx	r3
    selectSlave();
   d6a96:	6823      	ldr	r3, [r4, #0]
   d6a98:	4620      	mov	r0, r4
   d6a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6a9c:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d6a9e:	6a20      	ldr	r0, [r4, #32]
   d6aa0:	6803      	ldr	r3, [r0, #0]
   d6aa2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d6aa6:	681b      	ldr	r3, [r3, #0]
   d6aa8:	4798      	blx	r3
   d6aaa:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d6aac:	6a20      	ldr	r0, [r4, #32]
   d6aae:	6803      	ldr	r3, [r0, #0]
   d6ab0:	4631      	mov	r1, r6
   d6ab2:	681b      	ldr	r3, [r3, #0]
   d6ab4:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6ab6:	2001      	movs	r0, #1
   d6ab8:	f000 fb98 	bl	d71ec <HAL_Delay_Microseconds>
    deselectSlave();
   d6abc:	6823      	ldr	r3, [r4, #0]
   d6abe:	4620      	mov	r0, r4
   d6ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6ac2:	4798      	blx	r3
    _spi.endTransaction();
   d6ac4:	6a20      	ldr	r0, [r4, #32]
   d6ac6:	6803      	ldr	r3, [r0, #0]
   d6ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6aca:	4798      	blx	r3
}
   d6acc:	4628      	mov	r0, r5
   d6ace:	bd70      	pop	{r4, r5, r6, pc}

000d6ad0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d6ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ad2:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d6ad4:	6a00      	ldr	r0, [r0, #32]
{
   d6ad6:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d6ad8:	6803      	ldr	r3, [r0, #0]
   d6ada:	6a1b      	ldr	r3, [r3, #32]
{
   d6adc:	460f      	mov	r7, r1
   d6ade:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d6ae0:	4798      	blx	r3
    selectSlave();
   d6ae2:	6823      	ldr	r3, [r4, #0]
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6ae8:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d6aea:	6a20      	ldr	r0, [r4, #32]
   d6aec:	6803      	ldr	r3, [r0, #0]
   d6aee:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d6af2:	681b      	ldr	r3, [r3, #0]
   d6af4:	4798      	blx	r3
   d6af6:	442e      	add	r6, r5
   d6af8:	4607      	mov	r7, r0
    while (len--)
   d6afa:	42b5      	cmp	r5, r6
   d6afc:	d007      	beq.n	d6b0e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d6afe:	6a20      	ldr	r0, [r4, #32]
   d6b00:	6803      	ldr	r3, [r0, #0]
   d6b02:	2100      	movs	r1, #0
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	4798      	blx	r3
   d6b08:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d6b0c:	e7f5      	b.n	d6afa <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d6b0e:	6823      	ldr	r3, [r4, #0]
   d6b10:	4620      	mov	r0, r4
   d6b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6b14:	4798      	blx	r3
    _spi.endTransaction();
   d6b16:	6a20      	ldr	r0, [r4, #32]
   d6b18:	6803      	ldr	r3, [r0, #0]
   d6b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b1c:	4798      	blx	r3
}
   d6b1e:	4638      	mov	r0, r7
   d6b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b22 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d6b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b24:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d6b26:	6a00      	ldr	r0, [r0, #32]
{
   d6b28:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d6b2a:	6803      	ldr	r3, [r0, #0]
   d6b2c:	6a1b      	ldr	r3, [r3, #32]
{
   d6b2e:	460f      	mov	r7, r1
   d6b30:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d6b32:	4798      	blx	r3
    selectSlave();
   d6b34:	6823      	ldr	r3, [r4, #0]
   d6b36:	4620      	mov	r0, r4
   d6b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6b3a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d6b3c:	6a20      	ldr	r0, [r4, #32]
   d6b3e:	6803      	ldr	r3, [r0, #0]
   d6b40:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	4798      	blx	r3
   d6b48:	442e      	add	r6, r5
   d6b4a:	4607      	mov	r7, r0
    while (len--)
   d6b4c:	42b5      	cmp	r5, r6
   d6b4e:	d006      	beq.n	d6b5e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d6b50:	6a20      	ldr	r0, [r4, #32]
   d6b52:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6b56:	6803      	ldr	r3, [r0, #0]
   d6b58:	681b      	ldr	r3, [r3, #0]
   d6b5a:	4798      	blx	r3
    while (len--)
   d6b5c:	e7f6      	b.n	d6b4c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d6b5e:	6823      	ldr	r3, [r4, #0]
   d6b60:	4620      	mov	r0, r4
   d6b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6b64:	4798      	blx	r3
    _spi.endTransaction();
   d6b66:	6a20      	ldr	r0, [r4, #32]
   d6b68:	6803      	ldr	r3, [r0, #0]
   d6b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b6c:	4798      	blx	r3
}
   d6b6e:	4638      	mov	r0, r7
   d6b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b72 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d6b72:	6a00      	ldr	r0, [r0, #32]
   d6b74:	6803      	ldr	r3, [r0, #0]
   d6b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b78:	4718      	bx	r3

000d6b7a <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d6b7a:	2001      	movs	r0, #1
   d6b7c:	4770      	bx	lr

000d6b7e <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d6b7e:	20fb      	movs	r0, #251	; 0xfb
   d6b80:	4770      	bx	lr

000d6b82 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d6b82:	4770      	bx	lr

000d6b84 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d6b84:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d6b86:	7903      	ldrb	r3, [r0, #4]
   d6b88:	2b05      	cmp	r3, #5
{
   d6b8a:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d6b8c:	d010      	beq.n	d6bb0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d6b8e:	6803      	ldr	r3, [r0, #0]
   d6b90:	2105      	movs	r1, #5
   d6b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6b96:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d6b98:	2207      	movs	r2, #7
   d6b9a:	2101      	movs	r1, #1
   d6b9c:	4620      	mov	r0, r4
   d6b9e:	f7ff ff72 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d6ba2:	2280      	movs	r2, #128	; 0x80
   d6ba4:	2140      	movs	r1, #64	; 0x40
   d6ba6:	4620      	mov	r0, r4
   d6ba8:	f7ff ff6d 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d6bac:	2305      	movs	r3, #5
   d6bae:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d6bb0:	7923      	ldrb	r3, [r4, #4]
   d6bb2:	2b05      	cmp	r3, #5
   d6bb4:	d0fc      	beq.n	d6bb0 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d6bb6:	7e20      	ldrb	r0, [r4, #24]
}
   d6bb8:	bd10      	pop	{r4, pc}

000d6bba <_ZN7RH_RF95D0Ev>:
   d6bba:	b510      	push	{r4, lr}
   d6bbc:	f44f 7198 	mov.w	r1, #304	; 0x130
   d6bc0:	4604      	mov	r4, r0
   d6bc2:	f003 fe79 	bl	da8b8 <_ZdlPvj>
   d6bc6:	4620      	mov	r0, r4
   d6bc8:	bd10      	pop	{r4, pc}

000d6bca <_ZN7RH_RF955sleepEv>:
{
   d6bca:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d6bcc:	7903      	ldrb	r3, [r0, #4]
   d6bce:	2b01      	cmp	r3, #1
{
   d6bd0:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d6bd2:	d00b      	beq.n	d6bec <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d6bd4:	6803      	ldr	r3, [r0, #0]
   d6bd6:	2101      	movs	r1, #1
   d6bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6bdc:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d6bde:	2200      	movs	r2, #0
   d6be0:	2101      	movs	r1, #1
   d6be2:	4620      	mov	r0, r4
   d6be4:	f7ff ff4f 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d6be8:	2301      	movs	r3, #1
   d6bea:	7123      	strb	r3, [r4, #4]
}
   d6bec:	2001      	movs	r0, #1
   d6bee:	bd10      	pop	{r4, pc}

000d6bf0 <_ZN7RH_RF954recvEPhS0_>:
{
   d6bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d6bf2:	6803      	ldr	r3, [r0, #0]
   d6bf4:	68db      	ldr	r3, [r3, #12]
{
   d6bf6:	4604      	mov	r4, r0
   d6bf8:	460f      	mov	r7, r1
   d6bfa:	4615      	mov	r5, r2
    if (!available())
   d6bfc:	4798      	blx	r3
   d6bfe:	4606      	mov	r6, r0
   d6c00:	b1b0      	cbz	r0, d6c30 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d6c02:	b187      	cbz	r7, d6c26 <_ZN7RH_RF954recvEPhS0_+0x36>
   d6c04:	b17d      	cbz	r5, d6c26 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d6c06:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6c0a:	782a      	ldrb	r2, [r5, #0]
   d6c0c:	3b03      	subs	r3, #3
   d6c0e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d6c10:	bfde      	ittt	le
   d6c12:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d6c16:	3b04      	suble	r3, #4
   d6c18:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d6c1a:	782a      	ldrb	r2, [r5, #0]
   d6c1c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d6c20:	4638      	mov	r0, r7
   d6c22:	f004 facf 	bl	db1c4 <memcpy>
    _rxBufValid = false;
   d6c26:	2300      	movs	r3, #0
   d6c28:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d6c2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d6c30:	4630      	mov	r0, r6
   d6c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c34 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d6c34:	b538      	push	{r3, r4, r5, lr}
   d6c36:	4604      	mov	r4, r0
   d6c38:	4615      	mov	r5, r2
    _rxBufValid(0)
   d6c3a:	461a      	mov	r2, r3
   d6c3c:	f7ff fef2 	bl	d6a24 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d6c40:	4b09      	ldr	r3, [pc, #36]	; (d6c68 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d6c42:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d6c44:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d6c46:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d6c48:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d6c4c:	2201      	movs	r2, #1
    _rxBufValid(0)
   d6c4e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d6c52:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d6c56:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d6c5a:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d6c5e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d6c62:	4620      	mov	r0, r4
   d6c64:	bd38      	pop	{r3, r4, r5, pc}
   d6c66:	bf00      	nop
   d6c68:	000dbf10 	.word	0x000dbf10

000d6c6c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d6c6c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d6c70:	2b03      	cmp	r3, #3
   d6c72:	d91b      	bls.n	d6cac <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d6c74:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6c78:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d6c7a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d6c7e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d6c80:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d6c84:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d6c86:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d6c8a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d6c8c:	7983      	ldrb	r3, [r0, #6]
   d6c8e:	b933      	cbnz	r3, d6c9e <_ZN7RH_RF9513validateRxBufEv+0x32>
   d6c90:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d6c92:	7942      	ldrb	r2, [r0, #5]
   d6c94:	429a      	cmp	r2, r3
   d6c96:	d002      	beq.n	d6c9e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d6c98:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d6c9a:	2bff      	cmp	r3, #255	; 0xff
   d6c9c:	d106      	bne.n	d6cac <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d6c9e:	8a83      	ldrh	r3, [r0, #20]
   d6ca0:	3301      	adds	r3, #1
   d6ca2:	b29b      	uxth	r3, r3
   d6ca4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d6ca6:	2301      	movs	r3, #1
   d6ca8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d6cac:	4770      	bx	lr
	...

000d6cb0 <_ZN7RH_RF9512setFrequencyEf>:
{
   d6cb0:	b538      	push	{r3, r4, r5, lr}
   d6cb2:	4604      	mov	r4, r0
   d6cb4:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d6cb8:	ee10 0a10 	vmov	r0, s0
{
   d6cbc:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d6cc0:	f003 ff68 	bl	dab94 <__aeabi_f2d>
   d6cc4:	a317      	add	r3, pc, #92	; (adr r3, d6d24 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d6cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6cca:	f003 ffbb 	bl	dac44 <__aeabi_dmul>
   d6cce:	a317      	add	r3, pc, #92	; (adr r3, d6d2c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d6cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6cd4:	f004 f8e0 	bl	dae98 <__aeabi_ddiv>
   d6cd8:	f004 f9c6 	bl	db068 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d6cdc:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d6cde:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d6ce0:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	f7ff fece 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d6cea:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d6cee:	2107      	movs	r1, #7
   d6cf0:	4620      	mov	r0, r4
   d6cf2:	f7ff fec8 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d6cf6:	b2ea      	uxtb	r2, r5
   d6cf8:	2108      	movs	r1, #8
   d6cfa:	4620      	mov	r0, r4
   d6cfc:	f7ff fec3 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d6d00:	eddf 7a07 	vldr	s15, [pc, #28]	; d6d20 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d6d04:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d6d08:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d6d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6d10:	bfac      	ite	ge
   d6d12:	2301      	movge	r3, #1
   d6d14:	2300      	movlt	r3, #0
}
   d6d16:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d6d18:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d6d1c:	bd38      	pop	{r3, r4, r5, pc}
   d6d1e:	bf00      	nop
   d6d20:	4442c000 	.word	0x4442c000
   d6d24:	00000000 	.word	0x00000000
   d6d28:	412e8480 	.word	0x412e8480
   d6d2c:	00000000 	.word	0x00000000
   d6d30:	404e8480 	.word	0x404e8480

000d6d34 <_ZN7RH_RF9511setModeIdleEv>:
{
   d6d34:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d6d36:	7903      	ldrb	r3, [r0, #4]
   d6d38:	2b02      	cmp	r3, #2
{
   d6d3a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d6d3c:	d00b      	beq.n	d6d56 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d6d3e:	6803      	ldr	r3, [r0, #0]
   d6d40:	2102      	movs	r1, #2
   d6d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6d46:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d6d48:	2201      	movs	r2, #1
   d6d4a:	4611      	mov	r1, r2
   d6d4c:	4620      	mov	r0, r4
   d6d4e:	f7ff fe9a 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d6d52:	2302      	movs	r3, #2
   d6d54:	7123      	strb	r3, [r4, #4]
}
   d6d56:	bd10      	pop	{r4, pc}

000d6d58 <_ZN7RH_RF9515handleInterruptEv>:
{
   d6d58:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d6d5a:	2112      	movs	r1, #18
{
   d6d5c:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d6d5e:	f7ff fe71 	bl	d6a44 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d6d62:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d6d64:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d6d66:	4620      	mov	r0, r4
   d6d68:	f7ff fe6c 	bl	d6a44 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d6d6c:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d6d6e:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d6d70:	2112      	movs	r1, #18
   d6d72:	4620      	mov	r0, r4
   d6d74:	f7ff fe87 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d6d78:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d6d7a:	2b04      	cmp	r3, #4
   d6d7c:	d107      	bne.n	d6d8e <_ZN7RH_RF9515handleInterruptEv+0x36>
   d6d7e:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d6d82:	d117      	bne.n	d6db4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d6d84:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d6d88:	b10b      	cbz	r3, d6d8e <_ZN7RH_RF9515handleInterruptEv+0x36>
   d6d8a:	0670      	lsls	r0, r6, #25
   d6d8c:	d512      	bpl.n	d6db4 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d6d8e:	7923      	ldrb	r3, [r4, #4]
   d6d90:	2b04      	cmp	r3, #4
   d6d92:	d101      	bne.n	d6d98 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d6d94:	0669      	lsls	r1, r5, #25
   d6d96:	d422      	bmi.n	d6dde <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d6d98:	7923      	ldrb	r3, [r4, #4]
   d6d9a:	2b03      	cmp	r3, #3
   d6d9c:	d101      	bne.n	d6da2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d6d9e:	072a      	lsls	r2, r5, #28
   d6da0:	d469      	bmi.n	d6e76 <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d6da2:	7923      	ldrb	r3, [r4, #4]
   d6da4:	2b05      	cmp	r3, #5
   d6da6:	d10e      	bne.n	d6dc6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d6da8:	076b      	lsls	r3, r5, #29
   d6daa:	d50c      	bpl.n	d6dc6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d6dac:	f005 0501 	and.w	r5, r5, #1
   d6db0:	7625      	strb	r5, [r4, #24]
   d6db2:	e059      	b.n	d6e68 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d6db4:	8a63      	ldrh	r3, [r4, #18]
   d6db6:	3301      	adds	r3, #1
   d6db8:	b29b      	uxth	r3, r3
   d6dba:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d6dbc:	2300      	movs	r3, #0
   d6dbe:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d6dc2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d6dc6:	22ff      	movs	r2, #255	; 0xff
   d6dc8:	2112      	movs	r1, #18
   d6dca:	4620      	mov	r0, r4
   d6dcc:	f7ff fe5b 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d6dd0:	4620      	mov	r0, r4
   d6dd2:	22ff      	movs	r2, #255	; 0xff
}
   d6dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d6dd8:	2112      	movs	r1, #18
   d6dda:	f7ff be54 	b.w	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d6dde:	2113      	movs	r1, #19
   d6de0:	4620      	mov	r0, r4
   d6de2:	f7ff fe2f 	bl	d6a44 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d6de6:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d6de8:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d6dea:	4620      	mov	r0, r4
   d6dec:	f7ff fe2a 	bl	d6a44 <_ZN11RHSPIDriver7spiReadEh>
   d6df0:	210d      	movs	r1, #13
   d6df2:	4602      	mov	r2, r0
   d6df4:	4620      	mov	r0, r4
   d6df6:	f7ff fe46 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d6dfa:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d6dfe:	462b      	mov	r3, r5
   d6e00:	2100      	movs	r1, #0
   d6e02:	4620      	mov	r0, r4
   d6e04:	f7ff fe64 	bl	d6ad0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d6e08:	2119      	movs	r1, #25
	_bufLen = len;
   d6e0a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d6e0e:	4620      	mov	r0, r4
   d6e10:	f7ff fe18 	bl	d6a44 <_ZN11RHSPIDriver7spiReadEh>
   d6e14:	b240      	sxtb	r0, r0
   d6e16:	2800      	cmp	r0, #0
   d6e18:	bfb8      	it	lt
   d6e1a:	3003      	addlt	r0, #3
   d6e1c:	1080      	asrs	r0, r0, #2
   d6e1e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d6e22:	211a      	movs	r1, #26
   d6e24:	4620      	mov	r0, r4
   d6e26:	f7ff fe0d 	bl	d6a44 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d6e2a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d6e2e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d6e30:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d6e32:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d6e34:	bfa9      	itett	ge
   d6e36:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d6e38:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d6e3a:	b21b      	sxthge	r3, r3
   d6e3c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d6e3e:	bfb2      	itee	lt
   d6e40:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d6e42:	220f      	movge	r2, #15
   d6e44:	fb93 f3f2 	sdivge	r3, r3, r2
   d6e48:	b21b      	sxth	r3, r3
   d6e4a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d6e4c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d6e50:	b173      	cbz	r3, d6e70 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d6e52:	8a23      	ldrh	r3, [r4, #16]
   d6e54:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d6e56:	b21b      	sxth	r3, r3
   d6e58:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d6e5a:	4620      	mov	r0, r4
   d6e5c:	f7ff ff06 	bl	d6c6c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d6e60:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d6e64:	2b00      	cmp	r3, #0
   d6e66:	d0ae      	beq.n	d6dc6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d6e68:	4620      	mov	r0, r4
   d6e6a:	f7ff ff63 	bl	d6d34 <_ZN7RH_RF9511setModeIdleEv>
   d6e6e:	e7aa      	b.n	d6dc6 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d6e70:	8a23      	ldrh	r3, [r4, #16]
   d6e72:	3ba4      	subs	r3, #164	; 0xa4
   d6e74:	e7ef      	b.n	d6e56 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d6e76:	8ae3      	ldrh	r3, [r4, #22]
   d6e78:	3301      	adds	r3, #1
   d6e7a:	b29b      	uxth	r3, r3
   d6e7c:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d6e7e:	e7f3      	b.n	d6e68 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d6e80 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d6e80:	4b02      	ldr	r3, [pc, #8]	; (d6e8c <_ZN7RH_RF954isr0Ev+0xc>)
   d6e82:	6818      	ldr	r0, [r3, #0]
   d6e84:	b108      	cbz	r0, d6e8a <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d6e86:	f7ff bf67 	b.w	d6d58 <_ZN7RH_RF9515handleInterruptEv>
}
   d6e8a:	4770      	bx	lr
   d6e8c:	2003e520 	.word	0x2003e520

000d6e90 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d6e90:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <_ZN7RH_RF954isr1Ev+0xc>)
   d6e92:	6858      	ldr	r0, [r3, #4]
   d6e94:	b108      	cbz	r0, d6e9a <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d6e96:	f7ff bf5f 	b.w	d6d58 <_ZN7RH_RF9515handleInterruptEv>
}
   d6e9a:	4770      	bx	lr
   d6e9c:	2003e520 	.word	0x2003e520

000d6ea0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d6ea0:	4b02      	ldr	r3, [pc, #8]	; (d6eac <_ZN7RH_RF954isr2Ev+0xc>)
   d6ea2:	6898      	ldr	r0, [r3, #8]
   d6ea4:	b108      	cbz	r0, d6eaa <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d6ea6:	f7ff bf57 	b.w	d6d58 <_ZN7RH_RF9515handleInterruptEv>
}
   d6eaa:	4770      	bx	lr
   d6eac:	2003e520 	.word	0x2003e520

000d6eb0 <_ZN7RH_RF959setModeRxEv>:
{
   d6eb0:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d6eb2:	7903      	ldrb	r3, [r0, #4]
   d6eb4:	2b04      	cmp	r3, #4
{
   d6eb6:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d6eb8:	d010      	beq.n	d6edc <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d6eba:	6803      	ldr	r3, [r0, #0]
   d6ebc:	2104      	movs	r1, #4
   d6ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6ec2:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d6ec4:	2205      	movs	r2, #5
   d6ec6:	2101      	movs	r1, #1
   d6ec8:	4620      	mov	r0, r4
   d6eca:	f7ff fddc 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d6ece:	2200      	movs	r2, #0
   d6ed0:	2140      	movs	r1, #64	; 0x40
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	f7ff fdd7 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d6ed8:	2304      	movs	r3, #4
   d6eda:	7123      	strb	r3, [r4, #4]
}
   d6edc:	bd10      	pop	{r4, pc}

000d6ede <_ZN7RH_RF959availableEv>:
{
   d6ede:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d6ee0:	7903      	ldrb	r3, [r0, #4]
   d6ee2:	2b03      	cmp	r3, #3
{
   d6ee4:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d6ee6:	d005      	beq.n	d6ef4 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d6ee8:	f7ff ffe2 	bl	d6eb0 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d6eec:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d6ef0:	b2c0      	uxtb	r0, r0
}
   d6ef2:	bd10      	pop	{r4, pc}
	return false;
   d6ef4:	2000      	movs	r0, #0
   d6ef6:	e7fc      	b.n	d6ef2 <_ZN7RH_RF959availableEv+0x14>

000d6ef8 <_ZN7RH_RF959setModeTxEv>:
{
   d6ef8:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d6efa:	7903      	ldrb	r3, [r0, #4]
   d6efc:	2b03      	cmp	r3, #3
{
   d6efe:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d6f00:	d010      	beq.n	d6f24 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d6f02:	6803      	ldr	r3, [r0, #0]
   d6f04:	2103      	movs	r1, #3
   d6f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6f0a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d6f0c:	2203      	movs	r2, #3
   d6f0e:	2101      	movs	r1, #1
   d6f10:	4620      	mov	r0, r4
   d6f12:	f7ff fdb8 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d6f16:	2240      	movs	r2, #64	; 0x40
   d6f18:	4611      	mov	r1, r2
   d6f1a:	4620      	mov	r0, r4
   d6f1c:	f7ff fdb3 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d6f20:	2303      	movs	r3, #3
   d6f22:	7123      	strb	r3, [r4, #4]
}
   d6f24:	bd10      	pop	{r4, pc}

000d6f26 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d6f26:	2afb      	cmp	r2, #251	; 0xfb
{
   d6f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f2a:	4604      	mov	r4, r0
   d6f2c:	460f      	mov	r7, r1
   d6f2e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d6f30:	d902      	bls.n	d6f38 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d6f32:	2600      	movs	r6, #0
}
   d6f34:	4630      	mov	r0, r6
   d6f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d6f38:	6803      	ldr	r3, [r0, #0]
   d6f3a:	6a1b      	ldr	r3, [r3, #32]
   d6f3c:	4798      	blx	r3
    setModeIdle();
   d6f3e:	4620      	mov	r0, r4
   d6f40:	f7ff fef8 	bl	d6d34 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d6f44:	6823      	ldr	r3, [r4, #0]
   d6f46:	4620      	mov	r0, r4
   d6f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f4a:	4798      	blx	r3
   d6f4c:	4606      	mov	r6, r0
   d6f4e:	2800      	cmp	r0, #0
   d6f50:	d0ef      	beq.n	d6f32 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d6f52:	2200      	movs	r2, #0
   d6f54:	210d      	movs	r1, #13
   d6f56:	4620      	mov	r0, r4
   d6f58:	f7ff fd95 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d6f5c:	7ae2      	ldrb	r2, [r4, #11]
   d6f5e:	2100      	movs	r1, #0
   d6f60:	4620      	mov	r0, r4
   d6f62:	f7ff fd90 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d6f66:	7b22      	ldrb	r2, [r4, #12]
   d6f68:	2100      	movs	r1, #0
   d6f6a:	4620      	mov	r0, r4
   d6f6c:	f7ff fd8b 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d6f70:	7b62      	ldrb	r2, [r4, #13]
   d6f72:	2100      	movs	r1, #0
   d6f74:	4620      	mov	r0, r4
   d6f76:	f7ff fd86 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d6f7a:	7ba2      	ldrb	r2, [r4, #14]
   d6f7c:	2100      	movs	r1, #0
   d6f7e:	4620      	mov	r0, r4
   d6f80:	f7ff fd81 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d6f84:	462b      	mov	r3, r5
   d6f86:	463a      	mov	r2, r7
   d6f88:	2100      	movs	r1, #0
   d6f8a:	4620      	mov	r0, r4
   d6f8c:	f7ff fdc9 	bl	d6b22 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d6f90:	1d2a      	adds	r2, r5, #4
   d6f92:	b2d2      	uxtb	r2, r2
   d6f94:	2122      	movs	r1, #34	; 0x22
   d6f96:	4620      	mov	r0, r4
   d6f98:	f7ff fd75 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	f7ff ffab 	bl	d6ef8 <_ZN7RH_RF959setModeTxEv>
    return true;
   d6fa2:	e7c7      	b.n	d6f34 <_ZN7RH_RF954sendEPKhh+0xe>

000d6fa4 <_ZN7RH_RF9510setTxPowerEab>:
{
   d6fa4:	b538      	push	{r3, r4, r5, lr}
   d6fa6:	4605      	mov	r5, r0
   d6fa8:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d6faa:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d6fae:	b172      	cbz	r2, d6fce <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d6fb0:	f381 0204 	usat	r2, #4, r1
   d6fb4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d6fb8:	b2d2      	uxtb	r2, r2
   d6fba:	2109      	movs	r1, #9
   d6fbc:	f7ff fd63 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d6fc0:	2204      	movs	r2, #4
   d6fc2:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d6fc4:	4628      	mov	r0, r5
}
   d6fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d6fca:	f7ff bd5c 	b.w	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d6fce:	2914      	cmp	r1, #20
   d6fd0:	dc10      	bgt.n	d6ff4 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d6fd2:	2901      	cmp	r1, #1
   d6fd4:	dd10      	ble.n	d6ff8 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d6fd6:	2911      	cmp	r1, #17
   d6fd8:	dd0f      	ble.n	d6ffa <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d6fda:	2207      	movs	r2, #7
   d6fdc:	214d      	movs	r1, #77	; 0x4d
   d6fde:	4628      	mov	r0, r5
   d6fe0:	f7ff fd51 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d6fe4:	3c03      	subs	r4, #3
   d6fe6:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d6fe8:	1ea2      	subs	r2, r4, #2
   d6fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d6fee:	b2d2      	uxtb	r2, r2
   d6ff0:	2109      	movs	r1, #9
   d6ff2:	e7e7      	b.n	d6fc4 <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d6ff4:	2414      	movs	r4, #20
   d6ff6:	e7f0      	b.n	d6fda <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d6ff8:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d6ffa:	2204      	movs	r2, #4
   d6ffc:	214d      	movs	r1, #77	; 0x4d
   d6ffe:	4628      	mov	r0, r5
   d7000:	f7ff fd41 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
   d7004:	e7f0      	b.n	d6fe8 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d7006 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d7006:	b538      	push	{r3, r4, r5, lr}
   d7008:	460c      	mov	r4, r1
   d700a:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d700c:	780a      	ldrb	r2, [r1, #0]
   d700e:	211d      	movs	r1, #29
   d7010:	f7ff fd39 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d7014:	7862      	ldrb	r2, [r4, #1]
   d7016:	211e      	movs	r1, #30
   d7018:	4628      	mov	r0, r5
   d701a:	f7ff fd34 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d701e:	78a2      	ldrb	r2, [r4, #2]
   d7020:	4628      	mov	r0, r5
   d7022:	2126      	movs	r1, #38	; 0x26
}
   d7024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d7028:	f7ff bd2d 	b.w	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>

000d702c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d702c:	2905      	cmp	r1, #5
{
   d702e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d7030:	d80f      	bhi.n	d7052 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d7032:	4b09      	ldr	r3, [pc, #36]	; (d7058 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d7034:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d7038:	185c      	adds	r4, r3, r1
   d703a:	5a5a      	ldrh	r2, [r3, r1]
   d703c:	78a3      	ldrb	r3, [r4, #2]
   d703e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d7042:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d7044:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d7048:	f7ff ffdd 	bl	d7006 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d704c:	2001      	movs	r0, #1
}
   d704e:	b002      	add	sp, #8
   d7050:	bd10      	pop	{r4, pc}
        return false;
   d7052:	2000      	movs	r0, #0
   d7054:	e7fb      	b.n	d704e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d7056:	bf00      	nop
   d7058:	000dbef8 	.word	0x000dbef8

000d705c <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d705c:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d705e:	0a0a      	lsrs	r2, r1, #8
{
   d7060:	4605      	mov	r5, r0
   d7062:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d7064:	2120      	movs	r1, #32
   d7066:	f7ff fd0e 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d706a:	b2e2      	uxtb	r2, r4
   d706c:	4628      	mov	r0, r5
   d706e:	2121      	movs	r1, #33	; 0x21
}
   d7070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d7074:	f7ff bd07 	b.w	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>

000d7078 <_ZN7RH_RF954initEv>:
{
   d7078:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d707a:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d707c:	f7ff fcb2 	bl	d69e4 <_ZN11RHSPIDriver4initEv>
   d7080:	4606      	mov	r6, r0
   d7082:	b918      	cbnz	r0, d708c <_ZN7RH_RF954initEv+0x14>
	return false;
   d7084:	2600      	movs	r6, #0
}
   d7086:	4630      	mov	r0, r6
   d7088:	b002      	add	sp, #8
   d708a:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d708c:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d7090:	2dff      	cmp	r5, #255	; 0xff
   d7092:	d052      	beq.n	d713a <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d7094:	4629      	mov	r1, r5
   d7096:	4620      	mov	r0, r4
   d7098:	f7ff fd6b 	bl	d6b72 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d709c:	2280      	movs	r2, #128	; 0x80
   d709e:	2101      	movs	r1, #1
   d70a0:	4620      	mov	r0, r4
   d70a2:	f7ff fcf0 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d70a6:	200a      	movs	r0, #10
   d70a8:	f000 fbfa 	bl	d78a0 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d70ac:	2101      	movs	r1, #1
   d70ae:	4620      	mov	r0, r4
   d70b0:	f7ff fcc8 	bl	d6a44 <_ZN11RHSPIDriver7spiReadEh>
   d70b4:	2880      	cmp	r0, #128	; 0x80
   d70b6:	d1e5      	bne.n	d7084 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d70b8:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d70bc:	28ff      	cmp	r0, #255	; 0xff
   d70be:	d01c      	beq.n	d70fa <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d70c0:	2100      	movs	r1, #0
   d70c2:	f003 fb2b 	bl	da71c <pinMode>
	if (_myInterruptIndex == 0xff)
   d70c6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d70ca:	2bff      	cmp	r3, #255	; 0xff
   d70cc:	d107      	bne.n	d70de <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d70ce:	4a25      	ldr	r2, [pc, #148]	; (d7164 <_ZN7RH_RF954initEv+0xec>)
   d70d0:	7813      	ldrb	r3, [r2, #0]
   d70d2:	2b03      	cmp	r3, #3
   d70d4:	d8d6      	bhi.n	d7084 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d70d6:	1c59      	adds	r1, r3, #1
   d70d8:	7011      	strb	r1, [r2, #0]
   d70da:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d70de:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d70e2:	4b21      	ldr	r3, [pc, #132]	; (d7168 <_ZN7RH_RF954initEv+0xf0>)
   d70e4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d70e8:	bb52      	cbnz	r2, d7140 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d70ea:	4920      	ldr	r1, [pc, #128]	; (d716c <_ZN7RH_RF954initEv+0xf4>)
   d70ec:	9200      	str	r2, [sp, #0]
   d70ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d70f2:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d70f4:	b2a8      	uxth	r0, r5
   d70f6:	f001 f98d 	bl	d8414 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d70fa:	2200      	movs	r2, #0
   d70fc:	210e      	movs	r1, #14
   d70fe:	4620      	mov	r0, r4
   d7100:	f7ff fcc1 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d7104:	2200      	movs	r2, #0
   d7106:	210f      	movs	r1, #15
   d7108:	4620      	mov	r0, r4
   d710a:	f7ff fcbc 	bl	d6a86 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d710e:	4620      	mov	r0, r4
   d7110:	f7ff fe10 	bl	d6d34 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d7114:	2100      	movs	r1, #0
   d7116:	4620      	mov	r0, r4
   d7118:	f7ff ff88 	bl	d702c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d711c:	2108      	movs	r1, #8
   d711e:	4620      	mov	r0, r4
   d7120:	f7ff ff9c 	bl	d705c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d7124:	ed9f 0a12 	vldr	s0, [pc, #72]	; d7170 <_ZN7RH_RF954initEv+0xf8>
   d7128:	4620      	mov	r0, r4
   d712a:	f7ff fdc1 	bl	d6cb0 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d712e:	2200      	movs	r2, #0
   d7130:	210d      	movs	r1, #13
   d7132:	4620      	mov	r0, r4
   d7134:	f7ff ff36 	bl	d6fa4 <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d7138:	e7a5      	b.n	d7086 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d713a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d713e:	e7ad      	b.n	d709c <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d7140:	2a01      	cmp	r2, #1
   d7142:	f04f 0300 	mov.w	r3, #0
   d7146:	d104      	bne.n	d7152 <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d7148:	9300      	str	r3, [sp, #0]
   d714a:	490a      	ldr	r1, [pc, #40]	; (d7174 <_ZN7RH_RF954initEv+0xfc>)
   d714c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7150:	e7d0      	b.n	d70f4 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d7152:	2a02      	cmp	r2, #2
   d7154:	d196      	bne.n	d7084 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d7156:	9300      	str	r3, [sp, #0]
   d7158:	4907      	ldr	r1, [pc, #28]	; (d7178 <_ZN7RH_RF954initEv+0x100>)
   d715a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d715e:	2201      	movs	r2, #1
   d7160:	e7c8      	b.n	d70f4 <_ZN7RH_RF954initEv+0x7c>
   d7162:	bf00      	nop
   d7164:	2003e51d 	.word	0x2003e51d
   d7168:	2003e520 	.word	0x2003e520
   d716c:	000d6e81 	.word	0x000d6e81
   d7170:	43d90000 	.word	0x43d90000
   d7174:	000d6e91 	.word	0x000d6e91
   d7178:	000d6ea1 	.word	0x000d6ea1

000d717c <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d717c:	b508      	push	{r3, lr}
   d717e:	4b02      	ldr	r3, [pc, #8]	; (d7188 <cellular_signal+0xc>)
   d7180:	681b      	ldr	r3, [r3, #0]
   d7182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7184:	9301      	str	r3, [sp, #4]
   d7186:	bd08      	pop	{r3, pc}
   d7188:	00030274 	.word	0x00030274

000d718c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d718c:	b508      	push	{r3, lr}
   d718e:	4b02      	ldr	r3, [pc, #8]	; (d7198 <os_mutex_recursive_create+0xc>)
   d7190:	681b      	ldr	r3, [r3, #0]
   d7192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7194:	9301      	str	r3, [sp, #4]
   d7196:	bd08      	pop	{r3, pc}
   d7198:	00030248 	.word	0x00030248

000d719c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d719c:	b508      	push	{r3, lr}
   d719e:	4b02      	ldr	r3, [pc, #8]	; (d71a8 <os_mutex_recursive_destroy+0xc>)
   d71a0:	681b      	ldr	r3, [r3, #0]
   d71a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d71a4:	9301      	str	r3, [sp, #4]
   d71a6:	bd08      	pop	{r3, pc}
   d71a8:	00030248 	.word	0x00030248

000d71ac <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d71ac:	b508      	push	{r3, lr}
   d71ae:	4b02      	ldr	r3, [pc, #8]	; (d71b8 <os_mutex_recursive_lock+0xc>)
   d71b0:	681b      	ldr	r3, [r3, #0]
   d71b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d71b4:	9301      	str	r3, [sp, #4]
   d71b6:	bd08      	pop	{r3, pc}
   d71b8:	00030248 	.word	0x00030248

000d71bc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d71bc:	b508      	push	{r3, lr}
   d71be:	4b02      	ldr	r3, [pc, #8]	; (d71c8 <os_mutex_recursive_unlock+0xc>)
   d71c0:	681b      	ldr	r3, [r3, #0]
   d71c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d71c4:	9301      	str	r3, [sp, #4]
   d71c6:	bd08      	pop	{r3, pc}
   d71c8:	00030248 	.word	0x00030248

000d71cc <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d71cc:	b508      	push	{r3, lr}
   d71ce:	4b02      	ldr	r3, [pc, #8]	; (d71d8 <HAL_Feature_Set+0xc>)
   d71d0:	681b      	ldr	r3, [r3, #0]
   d71d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d71d4:	9301      	str	r3, [sp, #4]
   d71d6:	bd08      	pop	{r3, pc}
   d71d8:	00030234 	.word	0x00030234

000d71dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d71dc:	b508      	push	{r3, lr}
   d71de:	4b02      	ldr	r3, [pc, #8]	; (d71e8 <HAL_RNG_GetRandomNumber+0xc>)
   d71e0:	681b      	ldr	r3, [r3, #0]
   d71e2:	685b      	ldr	r3, [r3, #4]
   d71e4:	9301      	str	r3, [sp, #4]
   d71e6:	bd08      	pop	{r3, pc}
   d71e8:	00030218 	.word	0x00030218

000d71ec <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d71ec:	b508      	push	{r3, lr}
   d71ee:	4b02      	ldr	r3, [pc, #8]	; (d71f8 <HAL_Delay_Microseconds+0xc>)
   d71f0:	681b      	ldr	r3, [r3, #0]
   d71f2:	68db      	ldr	r3, [r3, #12]
   d71f4:	9301      	str	r3, [sp, #4]
   d71f6:	bd08      	pop	{r3, pc}
   d71f8:	00030218 	.word	0x00030218

000d71fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d71fc:	b508      	push	{r3, lr}
   d71fe:	4b02      	ldr	r3, [pc, #8]	; (d7208 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7200:	681b      	ldr	r3, [r3, #0]
   d7202:	695b      	ldr	r3, [r3, #20]
   d7204:	9301      	str	r3, [sp, #4]
   d7206:	bd08      	pop	{r3, pc}
   d7208:	00030218 	.word	0x00030218

000d720c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d720c:	b508      	push	{r3, lr}
   d720e:	4b02      	ldr	r3, [pc, #8]	; (d7218 <hal_rtc_time_is_valid+0xc>)
   d7210:	681b      	ldr	r3, [r3, #0]
   d7212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7214:	9301      	str	r3, [sp, #4]
   d7216:	bd08      	pop	{r3, pc}
   d7218:	00030218 	.word	0x00030218

000d721c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d721c:	b508      	push	{r3, lr}
   d721e:	4b02      	ldr	r3, [pc, #8]	; (d7228 <hal_rtc_get_time+0xc>)
   d7220:	681b      	ldr	r3, [r3, #0]
   d7222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7224:	9301      	str	r3, [sp, #4]
   d7226:	bd08      	pop	{r3, pc}
   d7228:	00030218 	.word	0x00030218

000d722c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d722c:	b508      	push	{r3, lr}
   d722e:	4b02      	ldr	r3, [pc, #8]	; (d7238 <hal_rtc_set_time+0xc>)
   d7230:	681b      	ldr	r3, [r3, #0]
   d7232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7234:	9301      	str	r3, [sp, #4]
   d7236:	bd08      	pop	{r3, pc}
   d7238:	00030218 	.word	0x00030218

000d723c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d723c:	b508      	push	{r3, lr}
   d723e:	4b02      	ldr	r3, [pc, #8]	; (d7248 <HAL_Validate_Pin_Function+0xc>)
   d7240:	681b      	ldr	r3, [r3, #0]
   d7242:	685b      	ldr	r3, [r3, #4]
   d7244:	9301      	str	r3, [sp, #4]
   d7246:	bd08      	pop	{r3, pc}
   d7248:	0003022c 	.word	0x0003022c

000d724c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d724c:	b508      	push	{r3, lr}
   d724e:	4b02      	ldr	r3, [pc, #8]	; (d7258 <HAL_Pin_Mode+0xc>)
   d7250:	681b      	ldr	r3, [r3, #0]
   d7252:	689b      	ldr	r3, [r3, #8]
   d7254:	9301      	str	r3, [sp, #4]
   d7256:	bd08      	pop	{r3, pc}
   d7258:	0003022c 	.word	0x0003022c

000d725c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d725c:	b508      	push	{r3, lr}
   d725e:	4b02      	ldr	r3, [pc, #8]	; (d7268 <HAL_Get_Pin_Mode+0xc>)
   d7260:	681b      	ldr	r3, [r3, #0]
   d7262:	68db      	ldr	r3, [r3, #12]
   d7264:	9301      	str	r3, [sp, #4]
   d7266:	bd08      	pop	{r3, pc}
   d7268:	0003022c 	.word	0x0003022c

000d726c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d726c:	b508      	push	{r3, lr}
   d726e:	4b02      	ldr	r3, [pc, #8]	; (d7278 <HAL_GPIO_Write+0xc>)
   d7270:	681b      	ldr	r3, [r3, #0]
   d7272:	691b      	ldr	r3, [r3, #16]
   d7274:	9301      	str	r3, [sp, #4]
   d7276:	bd08      	pop	{r3, pc}
   d7278:	0003022c 	.word	0x0003022c

000d727c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d727c:	b508      	push	{r3, lr}
   d727e:	4b02      	ldr	r3, [pc, #8]	; (d7288 <HAL_GPIO_Read+0xc>)
   d7280:	681b      	ldr	r3, [r3, #0]
   d7282:	695b      	ldr	r3, [r3, #20]
   d7284:	9301      	str	r3, [sp, #4]
   d7286:	bd08      	pop	{r3, pc}
   d7288:	0003022c 	.word	0x0003022c

000d728c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d728c:	b508      	push	{r3, lr}
   d728e:	4b02      	ldr	r3, [pc, #8]	; (d7298 <HAL_Interrupts_Attach+0xc>)
   d7290:	681b      	ldr	r3, [r3, #0]
   d7292:	699b      	ldr	r3, [r3, #24]
   d7294:	9301      	str	r3, [sp, #4]
   d7296:	bd08      	pop	{r3, pc}
   d7298:	0003022c 	.word	0x0003022c

000d729c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d729c:	b508      	push	{r3, lr}
   d729e:	4b02      	ldr	r3, [pc, #8]	; (d72a8 <HAL_Interrupts_Detach+0xc>)
   d72a0:	681b      	ldr	r3, [r3, #0]
   d72a2:	69db      	ldr	r3, [r3, #28]
   d72a4:	9301      	str	r3, [sp, #4]
   d72a6:	bd08      	pop	{r3, pc}
   d72a8:	0003022c 	.word	0x0003022c

000d72ac <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d72ac:	b508      	push	{r3, lr}
   d72ae:	4b02      	ldr	r3, [pc, #8]	; (d72b8 <hal_adc_read+0xc>)
   d72b0:	681b      	ldr	r3, [r3, #0]
   d72b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d72b4:	9301      	str	r3, [sp, #4]
   d72b6:	bd08      	pop	{r3, pc}
   d72b8:	0003022c 	.word	0x0003022c

000d72bc <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d72bc:	b508      	push	{r3, lr}
   d72be:	4b02      	ldr	r3, [pc, #8]	; (d72c8 <hal_i2c_begin+0xc>)
   d72c0:	681b      	ldr	r3, [r3, #0]
   d72c2:	68db      	ldr	r3, [r3, #12]
   d72c4:	9301      	str	r3, [sp, #4]
   d72c6:	bd08      	pop	{r3, pc}
   d72c8:	00030228 	.word	0x00030228

000d72cc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d72cc:	b508      	push	{r3, lr}
   d72ce:	4b02      	ldr	r3, [pc, #8]	; (d72d8 <hal_i2c_begin_transmission+0xc>)
   d72d0:	681b      	ldr	r3, [r3, #0]
   d72d2:	699b      	ldr	r3, [r3, #24]
   d72d4:	9301      	str	r3, [sp, #4]
   d72d6:	bd08      	pop	{r3, pc}
   d72d8:	00030228 	.word	0x00030228

000d72dc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d72dc:	b508      	push	{r3, lr}
   d72de:	4b02      	ldr	r3, [pc, #8]	; (d72e8 <hal_i2c_end_transmission+0xc>)
   d72e0:	681b      	ldr	r3, [r3, #0]
   d72e2:	69db      	ldr	r3, [r3, #28]
   d72e4:	9301      	str	r3, [sp, #4]
   d72e6:	bd08      	pop	{r3, pc}
   d72e8:	00030228 	.word	0x00030228

000d72ec <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d72ec:	b508      	push	{r3, lr}
   d72ee:	4b02      	ldr	r3, [pc, #8]	; (d72f8 <hal_i2c_write+0xc>)
   d72f0:	681b      	ldr	r3, [r3, #0]
   d72f2:	6a1b      	ldr	r3, [r3, #32]
   d72f4:	9301      	str	r3, [sp, #4]
   d72f6:	bd08      	pop	{r3, pc}
   d72f8:	00030228 	.word	0x00030228

000d72fc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d72fc:	b508      	push	{r3, lr}
   d72fe:	4b02      	ldr	r3, [pc, #8]	; (d7308 <hal_i2c_available+0xc>)
   d7300:	681b      	ldr	r3, [r3, #0]
   d7302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7304:	9301      	str	r3, [sp, #4]
   d7306:	bd08      	pop	{r3, pc}
   d7308:	00030228 	.word	0x00030228

000d730c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d730c:	b508      	push	{r3, lr}
   d730e:	4b02      	ldr	r3, [pc, #8]	; (d7318 <hal_i2c_read+0xc>)
   d7310:	681b      	ldr	r3, [r3, #0]
   d7312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7314:	9301      	str	r3, [sp, #4]
   d7316:	bd08      	pop	{r3, pc}
   d7318:	00030228 	.word	0x00030228

000d731c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d731c:	b508      	push	{r3, lr}
   d731e:	4b02      	ldr	r3, [pc, #8]	; (d7328 <hal_i2c_peek+0xc>)
   d7320:	681b      	ldr	r3, [r3, #0]
   d7322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7324:	9301      	str	r3, [sp, #4]
   d7326:	bd08      	pop	{r3, pc}
   d7328:	00030228 	.word	0x00030228

000d732c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d732c:	b508      	push	{r3, lr}
   d732e:	4b02      	ldr	r3, [pc, #8]	; (d7338 <hal_i2c_flush+0xc>)
   d7330:	681b      	ldr	r3, [r3, #0]
   d7332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7334:	9301      	str	r3, [sp, #4]
   d7336:	bd08      	pop	{r3, pc}
   d7338:	00030228 	.word	0x00030228

000d733c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d733c:	b508      	push	{r3, lr}
   d733e:	4b02      	ldr	r3, [pc, #8]	; (d7348 <hal_i2c_is_enabled+0xc>)
   d7340:	681b      	ldr	r3, [r3, #0]
   d7342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7344:	9301      	str	r3, [sp, #4]
   d7346:	bd08      	pop	{r3, pc}
   d7348:	00030228 	.word	0x00030228

000d734c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d734c:	b508      	push	{r3, lr}
   d734e:	4b02      	ldr	r3, [pc, #8]	; (d7358 <hal_i2c_init+0xc>)
   d7350:	681b      	ldr	r3, [r3, #0]
   d7352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7354:	9301      	str	r3, [sp, #4]
   d7356:	bd08      	pop	{r3, pc}
   d7358:	00030228 	.word	0x00030228

000d735c <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d735c:	b508      	push	{r3, lr}
   d735e:	4b02      	ldr	r3, [pc, #8]	; (d7368 <hal_i2c_lock+0xc>)
   d7360:	681b      	ldr	r3, [r3, #0]
   d7362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7364:	9301      	str	r3, [sp, #4]
   d7366:	bd08      	pop	{r3, pc}
   d7368:	00030228 	.word	0x00030228

000d736c <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d736c:	b508      	push	{r3, lr}
   d736e:	4b02      	ldr	r3, [pc, #8]	; (d7378 <hal_i2c_unlock+0xc>)
   d7370:	681b      	ldr	r3, [r3, #0]
   d7372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7374:	9301      	str	r3, [sp, #4]
   d7376:	bd08      	pop	{r3, pc}
   d7378:	00030228 	.word	0x00030228

000d737c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d737c:	b508      	push	{r3, lr}
   d737e:	4b02      	ldr	r3, [pc, #8]	; (d7388 <hal_i2c_request_ex+0xc>)
   d7380:	681b      	ldr	r3, [r3, #0]
   d7382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7384:	9301      	str	r3, [sp, #4]
   d7386:	bd08      	pop	{r3, pc}
   d7388:	00030228 	.word	0x00030228

000d738c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d738c:	b508      	push	{r3, lr}
   d738e:	4b02      	ldr	r3, [pc, #8]	; (d7398 <inet_inet_ntop+0xc>)
   d7390:	681b      	ldr	r3, [r3, #0]
   d7392:	695b      	ldr	r3, [r3, #20]
   d7394:	9301      	str	r3, [sp, #4]
   d7396:	bd08      	pop	{r3, pc}
   d7398:	00030264 	.word	0x00030264

000d739c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d739c:	b508      	push	{r3, lr}
   d739e:	4b02      	ldr	r3, [pc, #8]	; (d73a8 <netdb_freeaddrinfo+0xc>)
   d73a0:	681b      	ldr	r3, [r3, #0]
   d73a2:	689b      	ldr	r3, [r3, #8]
   d73a4:	9301      	str	r3, [sp, #4]
   d73a6:	bd08      	pop	{r3, pc}
   d73a8:	00030268 	.word	0x00030268

000d73ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d73ac:	b508      	push	{r3, lr}
   d73ae:	4b02      	ldr	r3, [pc, #8]	; (d73b8 <netdb_getaddrinfo+0xc>)
   d73b0:	681b      	ldr	r3, [r3, #0]
   d73b2:	68db      	ldr	r3, [r3, #12]
   d73b4:	9301      	str	r3, [sp, #4]
   d73b6:	bd08      	pop	{r3, pc}
   d73b8:	00030268 	.word	0x00030268

000d73bc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d73bc:	b508      	push	{r3, lr}
   d73be:	4b02      	ldr	r3, [pc, #8]	; (d73c8 <hal_spi_begin+0xc>)
   d73c0:	681b      	ldr	r3, [r3, #0]
   d73c2:	681b      	ldr	r3, [r3, #0]
   d73c4:	9301      	str	r3, [sp, #4]
   d73c6:	bd08      	pop	{r3, pc}
   d73c8:	00030230 	.word	0x00030230

000d73cc <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d73cc:	b508      	push	{r3, lr}
   d73ce:	4b02      	ldr	r3, [pc, #8]	; (d73d8 <hal_spi_end+0xc>)
   d73d0:	681b      	ldr	r3, [r3, #0]
   d73d2:	685b      	ldr	r3, [r3, #4]
   d73d4:	9301      	str	r3, [sp, #4]
   d73d6:	bd08      	pop	{r3, pc}
   d73d8:	00030230 	.word	0x00030230

000d73dc <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d73dc:	b508      	push	{r3, lr}
   d73de:	4b02      	ldr	r3, [pc, #8]	; (d73e8 <hal_spi_transfer+0xc>)
   d73e0:	681b      	ldr	r3, [r3, #0]
   d73e2:	695b      	ldr	r3, [r3, #20]
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	bd08      	pop	{r3, pc}
   d73e8:	00030230 	.word	0x00030230

000d73ec <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d73ec:	b508      	push	{r3, lr}
   d73ee:	4b02      	ldr	r3, [pc, #8]	; (d73f8 <hal_spi_init+0xc>)
   d73f0:	681b      	ldr	r3, [r3, #0]
   d73f2:	69db      	ldr	r3, [r3, #28]
   d73f4:	9301      	str	r3, [sp, #4]
   d73f6:	bd08      	pop	{r3, pc}
   d73f8:	00030230 	.word	0x00030230

000d73fc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <hal_spi_is_enabled+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	6a1b      	ldr	r3, [r3, #32]
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	00030230 	.word	0x00030230

000d740c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <hal_spi_info+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	00030230 	.word	0x00030230

000d741c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d741c:	b508      	push	{r3, lr}
   d741e:	4b02      	ldr	r3, [pc, #8]	; (d7428 <hal_spi_set_settings+0xc>)
   d7420:	681b      	ldr	r3, [r3, #0]
   d7422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7424:	9301      	str	r3, [sp, #4]
   d7426:	bd08      	pop	{r3, pc}
   d7428:	00030230 	.word	0x00030230

000d742c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d742c:	b508      	push	{r3, lr}
   d742e:	4b02      	ldr	r3, [pc, #8]	; (d7438 <hal_spi_acquire+0xc>)
   d7430:	681b      	ldr	r3, [r3, #0]
   d7432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7434:	9301      	str	r3, [sp, #4]
   d7436:	bd08      	pop	{r3, pc}
   d7438:	00030230 	.word	0x00030230

000d743c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d743c:	b508      	push	{r3, lr}
   d743e:	4b02      	ldr	r3, [pc, #8]	; (d7448 <hal_spi_release+0xc>)
   d7440:	681b      	ldr	r3, [r3, #0]
   d7442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7444:	9301      	str	r3, [sp, #4]
   d7446:	bd08      	pop	{r3, pc}
   d7448:	00030230 	.word	0x00030230

000d744c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d744c:	b508      	push	{r3, lr}
   d744e:	4b02      	ldr	r3, [pc, #8]	; (d7458 <hal_usart_init+0xc>)
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	681b      	ldr	r3, [r3, #0]
   d7454:	9301      	str	r3, [sp, #4]
   d7456:	bd08      	pop	{r3, pc}
   d7458:	0003023c 	.word	0x0003023c

000d745c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d745c:	b508      	push	{r3, lr}
   d745e:	4b02      	ldr	r3, [pc, #8]	; (d7468 <hal_usart_end+0xc>)
   d7460:	681b      	ldr	r3, [r3, #0]
   d7462:	689b      	ldr	r3, [r3, #8]
   d7464:	9301      	str	r3, [sp, #4]
   d7466:	bd08      	pop	{r3, pc}
   d7468:	0003023c 	.word	0x0003023c

000d746c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d746c:	b508      	push	{r3, lr}
   d746e:	4b02      	ldr	r3, [pc, #8]	; (d7478 <hal_usart_write+0xc>)
   d7470:	681b      	ldr	r3, [r3, #0]
   d7472:	68db      	ldr	r3, [r3, #12]
   d7474:	9301      	str	r3, [sp, #4]
   d7476:	bd08      	pop	{r3, pc}
   d7478:	0003023c 	.word	0x0003023c

000d747c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d747c:	b508      	push	{r3, lr}
   d747e:	4b02      	ldr	r3, [pc, #8]	; (d7488 <hal_usart_available+0xc>)
   d7480:	681b      	ldr	r3, [r3, #0]
   d7482:	691b      	ldr	r3, [r3, #16]
   d7484:	9301      	str	r3, [sp, #4]
   d7486:	bd08      	pop	{r3, pc}
   d7488:	0003023c 	.word	0x0003023c

000d748c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d748c:	b508      	push	{r3, lr}
   d748e:	4b02      	ldr	r3, [pc, #8]	; (d7498 <hal_usart_read+0xc>)
   d7490:	681b      	ldr	r3, [r3, #0]
   d7492:	695b      	ldr	r3, [r3, #20]
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	bd08      	pop	{r3, pc}
   d7498:	0003023c 	.word	0x0003023c

000d749c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d749c:	b508      	push	{r3, lr}
   d749e:	4b02      	ldr	r3, [pc, #8]	; (d74a8 <hal_usart_peek+0xc>)
   d74a0:	681b      	ldr	r3, [r3, #0]
   d74a2:	699b      	ldr	r3, [r3, #24]
   d74a4:	9301      	str	r3, [sp, #4]
   d74a6:	bd08      	pop	{r3, pc}
   d74a8:	0003023c 	.word	0x0003023c

000d74ac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d74ac:	b508      	push	{r3, lr}
   d74ae:	4b02      	ldr	r3, [pc, #8]	; (d74b8 <hal_usart_flush+0xc>)
   d74b0:	681b      	ldr	r3, [r3, #0]
   d74b2:	69db      	ldr	r3, [r3, #28]
   d74b4:	9301      	str	r3, [sp, #4]
   d74b6:	bd08      	pop	{r3, pc}
   d74b8:	0003023c 	.word	0x0003023c

000d74bc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d74bc:	b508      	push	{r3, lr}
   d74be:	4b02      	ldr	r3, [pc, #8]	; (d74c8 <hal_usart_is_enabled+0xc>)
   d74c0:	681b      	ldr	r3, [r3, #0]
   d74c2:	6a1b      	ldr	r3, [r3, #32]
   d74c4:	9301      	str	r3, [sp, #4]
   d74c6:	bd08      	pop	{r3, pc}
   d74c8:	0003023c 	.word	0x0003023c

000d74cc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d74cc:	b508      	push	{r3, lr}
   d74ce:	4b02      	ldr	r3, [pc, #8]	; (d74d8 <hal_usart_available_data_for_write+0xc>)
   d74d0:	681b      	ldr	r3, [r3, #0]
   d74d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d74d4:	9301      	str	r3, [sp, #4]
   d74d6:	bd08      	pop	{r3, pc}
   d74d8:	0003023c 	.word	0x0003023c

000d74dc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d74dc:	b508      	push	{r3, lr}
   d74de:	4b02      	ldr	r3, [pc, #8]	; (d74e8 <hal_usart_begin_config+0xc>)
   d74e0:	681b      	ldr	r3, [r3, #0]
   d74e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d74e4:	9301      	str	r3, [sp, #4]
   d74e6:	bd08      	pop	{r3, pc}
   d74e8:	0003023c 	.word	0x0003023c

000d74ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d74ec:	b508      	push	{r3, lr}
   d74ee:	4b02      	ldr	r3, [pc, #8]	; (d74f8 <HAL_USB_USART_Init+0xc>)
   d74f0:	681b      	ldr	r3, [r3, #0]
   d74f2:	681b      	ldr	r3, [r3, #0]
   d74f4:	9301      	str	r3, [sp, #4]
   d74f6:	bd08      	pop	{r3, pc}
   d74f8:	0003024c 	.word	0x0003024c

000d74fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d74fc:	b508      	push	{r3, lr}
   d74fe:	4b02      	ldr	r3, [pc, #8]	; (d7508 <HAL_USB_USART_Begin+0xc>)
   d7500:	681b      	ldr	r3, [r3, #0]
   d7502:	685b      	ldr	r3, [r3, #4]
   d7504:	9301      	str	r3, [sp, #4]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	0003024c 	.word	0x0003024c

000d750c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d750c:	b508      	push	{r3, lr}
   d750e:	4b02      	ldr	r3, [pc, #8]	; (d7518 <HAL_USB_USART_End+0xc>)
   d7510:	681b      	ldr	r3, [r3, #0]
   d7512:	689b      	ldr	r3, [r3, #8]
   d7514:	9301      	str	r3, [sp, #4]
   d7516:	bd08      	pop	{r3, pc}
   d7518:	0003024c 	.word	0x0003024c

000d751c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d751c:	b508      	push	{r3, lr}
   d751e:	4b02      	ldr	r3, [pc, #8]	; (d7528 <HAL_USB_USART_Available_Data+0xc>)
   d7520:	681b      	ldr	r3, [r3, #0]
   d7522:	691b      	ldr	r3, [r3, #16]
   d7524:	9301      	str	r3, [sp, #4]
   d7526:	bd08      	pop	{r3, pc}
   d7528:	0003024c 	.word	0x0003024c

000d752c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d752c:	b508      	push	{r3, lr}
   d752e:	4b02      	ldr	r3, [pc, #8]	; (d7538 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7530:	681b      	ldr	r3, [r3, #0]
   d7532:	695b      	ldr	r3, [r3, #20]
   d7534:	9301      	str	r3, [sp, #4]
   d7536:	bd08      	pop	{r3, pc}
   d7538:	0003024c 	.word	0x0003024c

000d753c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d753c:	b508      	push	{r3, lr}
   d753e:	4b02      	ldr	r3, [pc, #8]	; (d7548 <HAL_USB_USART_Receive_Data+0xc>)
   d7540:	681b      	ldr	r3, [r3, #0]
   d7542:	699b      	ldr	r3, [r3, #24]
   d7544:	9301      	str	r3, [sp, #4]
   d7546:	bd08      	pop	{r3, pc}
   d7548:	0003024c 	.word	0x0003024c

000d754c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d754c:	b508      	push	{r3, lr}
   d754e:	4b02      	ldr	r3, [pc, #8]	; (d7558 <HAL_USB_USART_Send_Data+0xc>)
   d7550:	681b      	ldr	r3, [r3, #0]
   d7552:	69db      	ldr	r3, [r3, #28]
   d7554:	9301      	str	r3, [sp, #4]
   d7556:	bd08      	pop	{r3, pc}
   d7558:	0003024c 	.word	0x0003024c

000d755c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d755c:	b508      	push	{r3, lr}
   d755e:	4b02      	ldr	r3, [pc, #8]	; (d7568 <HAL_USB_USART_Flush_Data+0xc>)
   d7560:	681b      	ldr	r3, [r3, #0]
   d7562:	6a1b      	ldr	r3, [r3, #32]
   d7564:	9301      	str	r3, [sp, #4]
   d7566:	bd08      	pop	{r3, pc}
   d7568:	0003024c 	.word	0x0003024c

000d756c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d756c:	b508      	push	{r3, lr}
   d756e:	4b02      	ldr	r3, [pc, #8]	; (d7578 <panic_+0xc>)
   d7570:	681b      	ldr	r3, [r3, #0]
   d7572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7574:	9301      	str	r3, [sp, #4]
   d7576:	bd08      	pop	{r3, pc}
   d7578:	00030260 	.word	0x00030260

000d757c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d757c:	b508      	push	{r3, lr}
   d757e:	4b02      	ldr	r3, [pc, #8]	; (d7588 <log_message+0xc>)
   d7580:	681b      	ldr	r3, [r3, #0]
   d7582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7584:	9301      	str	r3, [sp, #4]
   d7586:	bd08      	pop	{r3, pc}
   d7588:	00030260 	.word	0x00030260

000d758c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d758c:	b508      	push	{r3, lr}
   d758e:	4b02      	ldr	r3, [pc, #8]	; (d7598 <log_message_v+0xc>)
   d7590:	681b      	ldr	r3, [r3, #0]
   d7592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7594:	9301      	str	r3, [sp, #4]
   d7596:	bd08      	pop	{r3, pc}
   d7598:	00030260 	.word	0x00030260

000d759c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d759c:	b508      	push	{r3, lr}
   d759e:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <log_level_name+0xc>)
   d75a0:	681b      	ldr	r3, [r3, #0]
   d75a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d75a4:	9301      	str	r3, [sp, #4]
   d75a6:	bd08      	pop	{r3, pc}
   d75a8:	00030260 	.word	0x00030260

000d75ac <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d75ac:	b508      	push	{r3, lr}
   d75ae:	4b02      	ldr	r3, [pc, #8]	; (d75b8 <log_set_callbacks+0xc>)
   d75b0:	681b      	ldr	r3, [r3, #0]
   d75b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d75b4:	9301      	str	r3, [sp, #4]
   d75b6:	bd08      	pop	{r3, pc}
   d75b8:	00030260 	.word	0x00030260

000d75bc <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d75bc:	b508      	push	{r3, lr}
   d75be:	4b03      	ldr	r3, [pc, #12]	; (d75cc <diag_get_source+0x10>)
   d75c0:	681b      	ldr	r3, [r3, #0]
   d75c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d75c6:	9301      	str	r3, [sp, #4]
   d75c8:	bd08      	pop	{r3, pc}
   d75ca:	0000      	.short	0x0000
   d75cc:	00030260 	.word	0x00030260

000d75d0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d75d0:	b508      	push	{r3, lr}
   d75d2:	4b02      	ldr	r3, [pc, #8]	; (d75dc <system_mode+0xc>)
   d75d4:	681b      	ldr	r3, [r3, #0]
   d75d6:	681b      	ldr	r3, [r3, #0]
   d75d8:	9301      	str	r3, [sp, #4]
   d75da:	bd08      	pop	{r3, pc}
   d75dc:	00030220 	.word	0x00030220

000d75e0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d75e0:	b508      	push	{r3, lr}
   d75e2:	4b02      	ldr	r3, [pc, #8]	; (d75ec <set_system_mode+0xc>)
   d75e4:	681b      	ldr	r3, [r3, #0]
   d75e6:	685b      	ldr	r3, [r3, #4]
   d75e8:	9301      	str	r3, [sp, #4]
   d75ea:	bd08      	pop	{r3, pc}
   d75ec:	00030220 	.word	0x00030220

000d75f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d75f0:	b508      	push	{r3, lr}
   d75f2:	4b02      	ldr	r3, [pc, #8]	; (d75fc <system_delay_ms+0xc>)
   d75f4:	681b      	ldr	r3, [r3, #0]
   d75f6:	695b      	ldr	r3, [r3, #20]
   d75f8:	9301      	str	r3, [sp, #4]
   d75fa:	bd08      	pop	{r3, pc}
   d75fc:	00030220 	.word	0x00030220

000d7600 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d7600:	b508      	push	{r3, lr}
   d7602:	4b02      	ldr	r3, [pc, #8]	; (d760c <system_subscribe_event+0xc>)
   d7604:	681b      	ldr	r3, [r3, #0]
   d7606:	6a1b      	ldr	r3, [r3, #32]
   d7608:	9301      	str	r3, [sp, #4]
   d760a:	bd08      	pop	{r3, pc}
   d760c:	00030220 	.word	0x00030220

000d7610 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7610:	b508      	push	{r3, lr}
   d7612:	4b02      	ldr	r3, [pc, #8]	; (d761c <system_thread_set_state+0xc>)
   d7614:	681b      	ldr	r3, [r3, #0]
   d7616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7618:	9301      	str	r3, [sp, #4]
   d761a:	bd08      	pop	{r3, pc}
   d761c:	00030220 	.word	0x00030220

000d7620 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7620:	b508      	push	{r3, lr}
   d7622:	4b02      	ldr	r3, [pc, #8]	; (d762c <application_thread_current+0xc>)
   d7624:	681b      	ldr	r3, [r3, #0]
   d7626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7628:	9301      	str	r3, [sp, #4]
   d762a:	bd08      	pop	{r3, pc}
   d762c:	00030220 	.word	0x00030220

000d7630 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7630:	b508      	push	{r3, lr}
   d7632:	4b02      	ldr	r3, [pc, #8]	; (d763c <application_thread_invoke+0xc>)
   d7634:	681b      	ldr	r3, [r3, #0]
   d7636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7638:	9301      	str	r3, [sp, #4]
   d763a:	bd08      	pop	{r3, pc}
   d763c:	00030220 	.word	0x00030220

000d7640 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7640:	b508      	push	{r3, lr}
   d7642:	4b02      	ldr	r3, [pc, #8]	; (d764c <system_thread_get_state+0xc>)
   d7644:	681b      	ldr	r3, [r3, #0]
   d7646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7648:	9301      	str	r3, [sp, #4]
   d764a:	bd08      	pop	{r3, pc}
   d764c:	00030220 	.word	0x00030220

000d7650 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7650:	b508      	push	{r3, lr}
   d7652:	4b02      	ldr	r3, [pc, #8]	; (d765c <system_notify_time_changed+0xc>)
   d7654:	681b      	ldr	r3, [r3, #0]
   d7656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7658:	9301      	str	r3, [sp, #4]
   d765a:	bd08      	pop	{r3, pc}
   d765c:	00030220 	.word	0x00030220

000d7660 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7660:	b508      	push	{r3, lr}
   d7662:	4b03      	ldr	r3, [pc, #12]	; (d7670 <system_ctrl_set_app_request_handler+0x10>)
   d7664:	681b      	ldr	r3, [r3, #0]
   d7666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d766a:	9301      	str	r3, [sp, #4]
   d766c:	bd08      	pop	{r3, pc}
   d766e:	0000      	.short	0x0000
   d7670:	00030220 	.word	0x00030220

000d7674 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7674:	b508      	push	{r3, lr}
   d7676:	4b03      	ldr	r3, [pc, #12]	; (d7684 <system_ctrl_set_result+0x10>)
   d7678:	681b      	ldr	r3, [r3, #0]
   d767a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d767e:	9301      	str	r3, [sp, #4]
   d7680:	bd08      	pop	{r3, pc}
   d7682:	0000      	.short	0x0000
   d7684:	00030220 	.word	0x00030220

000d7688 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d7688:	b508      	push	{r3, lr}
   d768a:	4b03      	ldr	r3, [pc, #12]	; (d7698 <system_power_management_set_config+0x10>)
   d768c:	681b      	ldr	r3, [r3, #0]
   d768e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d7692:	9301      	str	r3, [sp, #4]
   d7694:	bd08      	pop	{r3, pc}
   d7696:	0000      	.short	0x0000
   d7698:	00030220 	.word	0x00030220

000d769c <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d769c:	b508      	push	{r3, lr}
   d769e:	4b03      	ldr	r3, [pc, #12]	; (d76ac <system_sleep_ext+0x10>)
   d76a0:	681b      	ldr	r3, [r3, #0]
   d76a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d76a6:	9301      	str	r3, [sp, #4]
   d76a8:	bd08      	pop	{r3, pc}
   d76aa:	0000      	.short	0x0000
   d76ac:	00030220 	.word	0x00030220

000d76b0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d76b0:	b508      	push	{r3, lr}
   d76b2:	4b02      	ldr	r3, [pc, #8]	; (d76bc <spark_process+0xc>)
   d76b4:	681b      	ldr	r3, [r3, #0]
   d76b6:	689b      	ldr	r3, [r3, #8]
   d76b8:	9301      	str	r3, [sp, #4]
   d76ba:	bd08      	pop	{r3, pc}
   d76bc:	00030244 	.word	0x00030244

000d76c0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d76c0:	b508      	push	{r3, lr}
   d76c2:	4b02      	ldr	r3, [pc, #8]	; (d76cc <spark_cloud_flag_connected+0xc>)
   d76c4:	681b      	ldr	r3, [r3, #0]
   d76c6:	695b      	ldr	r3, [r3, #20]
   d76c8:	9301      	str	r3, [sp, #4]
   d76ca:	bd08      	pop	{r3, pc}
   d76cc:	00030244 	.word	0x00030244

000d76d0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d76d0:	b508      	push	{r3, lr}
   d76d2:	4b02      	ldr	r3, [pc, #8]	; (d76dc <spark_send_event+0xc>)
   d76d4:	681b      	ldr	r3, [r3, #0]
   d76d6:	6a1b      	ldr	r3, [r3, #32]
   d76d8:	9301      	str	r3, [sp, #4]
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	00030244 	.word	0x00030244

000d76e0 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d76e0:	b508      	push	{r3, lr}
   d76e2:	4b02      	ldr	r3, [pc, #8]	; (d76ec <spark_sync_time_pending+0xc>)
   d76e4:	681b      	ldr	r3, [r3, #0]
   d76e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d76e8:	9301      	str	r3, [sp, #4]
   d76ea:	bd08      	pop	{r3, pc}
   d76ec:	00030244 	.word	0x00030244

000d76f0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d76f0:	b508      	push	{r3, lr}
   d76f2:	4b02      	ldr	r3, [pc, #8]	; (d76fc <spark_sync_time_last+0xc>)
   d76f4:	681b      	ldr	r3, [r3, #0]
   d76f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d76f8:	9301      	str	r3, [sp, #4]
   d76fa:	bd08      	pop	{r3, pc}
   d76fc:	00030244 	.word	0x00030244

000d7700 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7700:	b508      	push	{r3, lr}
   d7702:	4b02      	ldr	r3, [pc, #8]	; (d770c <spark_set_random_seed_from_cloud_handler+0xc>)
   d7704:	681b      	ldr	r3, [r3, #0]
   d7706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7708:	9301      	str	r3, [sp, #4]
   d770a:	bd08      	pop	{r3, pc}
   d770c:	00030244 	.word	0x00030244

000d7710 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7710:	b508      	push	{r3, lr}
   d7712:	4b02      	ldr	r3, [pc, #8]	; (d771c <network_connect+0xc>)
   d7714:	681b      	ldr	r3, [r3, #0]
   d7716:	685b      	ldr	r3, [r3, #4]
   d7718:	9301      	str	r3, [sp, #4]
   d771a:	bd08      	pop	{r3, pc}
   d771c:	00030240 	.word	0x00030240

000d7720 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7720:	b508      	push	{r3, lr}
   d7722:	4b02      	ldr	r3, [pc, #8]	; (d772c <network_connecting+0xc>)
   d7724:	681b      	ldr	r3, [r3, #0]
   d7726:	689b      	ldr	r3, [r3, #8]
   d7728:	9301      	str	r3, [sp, #4]
   d772a:	bd08      	pop	{r3, pc}
   d772c:	00030240 	.word	0x00030240

000d7730 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7730:	b508      	push	{r3, lr}
   d7732:	4b02      	ldr	r3, [pc, #8]	; (d773c <network_disconnect+0xc>)
   d7734:	681b      	ldr	r3, [r3, #0]
   d7736:	68db      	ldr	r3, [r3, #12]
   d7738:	9301      	str	r3, [sp, #4]
   d773a:	bd08      	pop	{r3, pc}
   d773c:	00030240 	.word	0x00030240

000d7740 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7740:	b508      	push	{r3, lr}
   d7742:	4b02      	ldr	r3, [pc, #8]	; (d774c <network_ready+0xc>)
   d7744:	681b      	ldr	r3, [r3, #0]
   d7746:	691b      	ldr	r3, [r3, #16]
   d7748:	9301      	str	r3, [sp, #4]
   d774a:	bd08      	pop	{r3, pc}
   d774c:	00030240 	.word	0x00030240

000d7750 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7750:	b508      	push	{r3, lr}
   d7752:	4b02      	ldr	r3, [pc, #8]	; (d775c <network_on+0xc>)
   d7754:	681b      	ldr	r3, [r3, #0]
   d7756:	695b      	ldr	r3, [r3, #20]
   d7758:	9301      	str	r3, [sp, #4]
   d775a:	bd08      	pop	{r3, pc}
   d775c:	00030240 	.word	0x00030240

000d7760 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7760:	b508      	push	{r3, lr}
   d7762:	4b02      	ldr	r3, [pc, #8]	; (d776c <network_off+0xc>)
   d7764:	681b      	ldr	r3, [r3, #0]
   d7766:	699b      	ldr	r3, [r3, #24]
   d7768:	9301      	str	r3, [sp, #4]
   d776a:	bd08      	pop	{r3, pc}
   d776c:	00030240 	.word	0x00030240

000d7770 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7770:	b508      	push	{r3, lr}
   d7772:	4b02      	ldr	r3, [pc, #8]	; (d777c <network_listen+0xc>)
   d7774:	681b      	ldr	r3, [r3, #0]
   d7776:	69db      	ldr	r3, [r3, #28]
   d7778:	9301      	str	r3, [sp, #4]
   d777a:	bd08      	pop	{r3, pc}
   d777c:	00030240 	.word	0x00030240

000d7780 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7780:	b508      	push	{r3, lr}
   d7782:	4b02      	ldr	r3, [pc, #8]	; (d778c <network_listening+0xc>)
   d7784:	681b      	ldr	r3, [r3, #0]
   d7786:	6a1b      	ldr	r3, [r3, #32]
   d7788:	9301      	str	r3, [sp, #4]
   d778a:	bd08      	pop	{r3, pc}
   d778c:	00030240 	.word	0x00030240

000d7790 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d7790:	b508      	push	{r3, lr}
   d7792:	4b02      	ldr	r3, [pc, #8]	; (d779c <network_set_listen_timeout+0xc>)
   d7794:	681b      	ldr	r3, [r3, #0]
   d7796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7798:	9301      	str	r3, [sp, #4]
   d779a:	bd08      	pop	{r3, pc}
   d779c:	00030240 	.word	0x00030240

000d77a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d77a0:	b508      	push	{r3, lr}
   d77a2:	4b02      	ldr	r3, [pc, #8]	; (d77ac <network_get_listen_timeout+0xc>)
   d77a4:	681b      	ldr	r3, [r3, #0]
   d77a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d77a8:	9301      	str	r3, [sp, #4]
   d77aa:	bd08      	pop	{r3, pc}
   d77ac:	00030240 	.word	0x00030240

000d77b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d77b0:	b508      	push	{r3, lr}
   d77b2:	4b02      	ldr	r3, [pc, #8]	; (d77bc <network_is_on+0xc>)
   d77b4:	681b      	ldr	r3, [r3, #0]
   d77b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d77b8:	9301      	str	r3, [sp, #4]
   d77ba:	bd08      	pop	{r3, pc}
   d77bc:	00030240 	.word	0x00030240

000d77c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d77c0:	b508      	push	{r3, lr}
   d77c2:	4b02      	ldr	r3, [pc, #8]	; (d77cc <network_is_off+0xc>)
   d77c4:	681b      	ldr	r3, [r3, #0]
   d77c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d77c8:	9301      	str	r3, [sp, #4]
   d77ca:	bd08      	pop	{r3, pc}
   d77cc:	00030240 	.word	0x00030240

000d77d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d77d0:	b508      	push	{r3, lr}
   d77d2:	4b02      	ldr	r3, [pc, #8]	; (d77dc <malloc+0xc>)
   d77d4:	681b      	ldr	r3, [r3, #0]
   d77d6:	681b      	ldr	r3, [r3, #0]
   d77d8:	9301      	str	r3, [sp, #4]
   d77da:	bd08      	pop	{r3, pc}
   d77dc:	0003021c 	.word	0x0003021c

000d77e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d77e0:	b508      	push	{r3, lr}
   d77e2:	4b02      	ldr	r3, [pc, #8]	; (d77ec <free+0xc>)
   d77e4:	681b      	ldr	r3, [r3, #0]
   d77e6:	685b      	ldr	r3, [r3, #4]
   d77e8:	9301      	str	r3, [sp, #4]
   d77ea:	bd08      	pop	{r3, pc}
   d77ec:	0003021c 	.word	0x0003021c

000d77f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d77f0:	b508      	push	{r3, lr}
   d77f2:	4b02      	ldr	r3, [pc, #8]	; (d77fc <realloc+0xc>)
   d77f4:	681b      	ldr	r3, [r3, #0]
   d77f6:	689b      	ldr	r3, [r3, #8]
   d77f8:	9301      	str	r3, [sp, #4]
   d77fa:	bd08      	pop	{r3, pc}
   d77fc:	0003021c 	.word	0x0003021c

000d7800 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7800:	b508      	push	{r3, lr}
   d7802:	4b02      	ldr	r3, [pc, #8]	; (d780c <siprintf+0xc>)
   d7804:	681b      	ldr	r3, [r3, #0]
   d7806:	691b      	ldr	r3, [r3, #16]
   d7808:	9301      	str	r3, [sp, #4]
   d780a:	bd08      	pop	{r3, pc}
   d780c:	0003021c 	.word	0x0003021c

000d7810 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7810:	b508      	push	{r3, lr}
   d7812:	4b02      	ldr	r3, [pc, #8]	; (d781c <snprintf+0xc>)
   d7814:	681b      	ldr	r3, [r3, #0]
   d7816:	69db      	ldr	r3, [r3, #28]
   d7818:	9301      	str	r3, [sp, #4]
   d781a:	bd08      	pop	{r3, pc}
   d781c:	0003021c 	.word	0x0003021c

000d7820 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7820:	b508      	push	{r3, lr}
   d7822:	4b02      	ldr	r3, [pc, #8]	; (d782c <vsnprintf+0xc>)
   d7824:	681b      	ldr	r3, [r3, #0]
   d7826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7828:	9301      	str	r3, [sp, #4]
   d782a:	bd08      	pop	{r3, pc}
   d782c:	0003021c 	.word	0x0003021c

000d7830 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7830:	b508      	push	{r3, lr}
   d7832:	4b02      	ldr	r3, [pc, #8]	; (d783c <abort+0xc>)
   d7834:	681b      	ldr	r3, [r3, #0]
   d7836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7838:	9301      	str	r3, [sp, #4]
   d783a:	bd08      	pop	{r3, pc}
   d783c:	0003021c 	.word	0x0003021c

000d7840 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7840:	b508      	push	{r3, lr}
   d7842:	4b02      	ldr	r3, [pc, #8]	; (d784c <_malloc_r+0xc>)
   d7844:	681b      	ldr	r3, [r3, #0]
   d7846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7848:	9301      	str	r3, [sp, #4]
   d784a:	bd08      	pop	{r3, pc}
   d784c:	0003021c 	.word	0x0003021c

000d7850 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7850:	b508      	push	{r3, lr}
   d7852:	4b02      	ldr	r3, [pc, #8]	; (d785c <newlib_impure_ptr_callback+0xc>)
   d7854:	681b      	ldr	r3, [r3, #0]
   d7856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7858:	9301      	str	r3, [sp, #4]
   d785a:	bd08      	pop	{r3, pc}
   d785c:	0003021c 	.word	0x0003021c

000d7860 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d7860:	b508      	push	{r3, lr}
   d7862:	4b02      	ldr	r3, [pc, #8]	; (d786c <strftime+0xc>)
   d7864:	681b      	ldr	r3, [r3, #0]
   d7866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7868:	9301      	str	r3, [sp, #4]
   d786a:	bd08      	pop	{r3, pc}
   d786c:	0003021c 	.word	0x0003021c

000d7870 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7870:	b508      	push	{r3, lr}
   d7872:	4b02      	ldr	r3, [pc, #8]	; (d787c <localtime_r+0xc>)
   d7874:	681b      	ldr	r3, [r3, #0]
   d7876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7878:	9301      	str	r3, [sp, #4]
   d787a:	bd08      	pop	{r3, pc}
   d787c:	0003021c 	.word	0x0003021c

000d7880 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7880:	b508      	push	{r3, lr}
   d7882:	4b02      	ldr	r3, [pc, #8]	; (d788c <gmtime_r+0xc>)
   d7884:	681b      	ldr	r3, [r3, #0]
   d7886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7888:	9301      	str	r3, [sp, #4]
   d788a:	bd08      	pop	{r3, pc}
   d788c:	0003021c 	.word	0x0003021c

000d7890 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d7890:	b508      	push	{r3, lr}
   d7892:	4b02      	ldr	r3, [pc, #8]	; (d789c <mktime+0xc>)
   d7894:	681b      	ldr	r3, [r3, #0]
   d7896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7898:	9301      	str	r3, [sp, #4]
   d789a:	bd08      	pop	{r3, pc}
   d789c:	0003021c 	.word	0x0003021c

000d78a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d78a0:	2100      	movs	r1, #0
   d78a2:	f7ff bea5 	b.w	d75f0 <system_delay_ms>

000d78a6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d78a6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d78a8:	6883      	ldr	r3, [r0, #8]
   d78aa:	4604      	mov	r4, r0
   d78ac:	b90b      	cbnz	r3, d78b2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d78ae:	f003 f809 	bl	da8c4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d78b2:	68c3      	ldr	r3, [r0, #12]
   d78b4:	4798      	blx	r3
      if (_M_manager)
   d78b6:	68a3      	ldr	r3, [r4, #8]
   d78b8:	b11b      	cbz	r3, d78c2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d78ba:	2203      	movs	r2, #3
   d78bc:	4621      	mov	r1, r4
   d78be:	4620      	mov	r0, r4
   d78c0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d78c2:	4620      	mov	r0, r4
   d78c4:	2110      	movs	r1, #16
}
   d78c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d78ca:	f002 bff5 	b.w	da8b8 <_ZdlPvj>

000d78ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d78ce:	680b      	ldr	r3, [r1, #0]
   d78d0:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d78d2:	b113      	cbz	r3, d78da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d78d4:	685a      	ldr	r2, [r3, #4]
   d78d6:	3201      	adds	r2, #1
   d78d8:	605a      	str	r2, [r3, #4]
      }
   d78da:	4770      	bx	lr

000d78dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d78dc:	4802      	ldr	r0, [pc, #8]	; (d78e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d78de:	2300      	movs	r3, #0
   d78e0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d78e2:	f7ff bc53 	b.w	d718c <os_mutex_recursive_create>
   d78e6:	bf00      	nop
   d78e8:	2003e52c 	.word	0x2003e52c

000d78ec <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d78ec:	2200      	movs	r2, #0
   d78ee:	6840      	ldr	r0, [r0, #4]
   d78f0:	4611      	mov	r1, r2
   d78f2:	f7ff bf25 	b.w	d7740 <network_ready>

000d78f6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d78f6:	2200      	movs	r2, #0
   d78f8:	6840      	ldr	r0, [r0, #4]
   d78fa:	4611      	mov	r1, r2
   d78fc:	f7ff bf40 	b.w	d7780 <network_listening>

000d7900 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7900:	2200      	movs	r2, #0
   d7902:	6840      	ldr	r0, [r0, #4]
   d7904:	4611      	mov	r1, r2
   d7906:	f7ff bf4b 	b.w	d77a0 <network_get_listen_timeout>

000d790a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d790a:	6840      	ldr	r0, [r0, #4]
   d790c:	2200      	movs	r2, #0
   d790e:	f7ff bf3f 	b.w	d7790 <network_set_listen_timeout>

000d7912 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7912:	6840      	ldr	r0, [r0, #4]
   d7914:	2200      	movs	r2, #0
   d7916:	f081 0101 	eor.w	r1, r1, #1
   d791a:	f7ff bf29 	b.w	d7770 <network_listen>

000d791e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d791e:	2300      	movs	r3, #0
   d7920:	6840      	ldr	r0, [r0, #4]
   d7922:	461a      	mov	r2, r3
   d7924:	4619      	mov	r1, r3
   d7926:	f7ff bf1b 	b.w	d7760 <network_off>

000d792a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d792a:	2300      	movs	r3, #0
   d792c:	6840      	ldr	r0, [r0, #4]
   d792e:	461a      	mov	r2, r3
   d7930:	4619      	mov	r1, r3
   d7932:	f7ff bf0d 	b.w	d7750 <network_on>

000d7936 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7936:	2200      	movs	r2, #0
   d7938:	6840      	ldr	r0, [r0, #4]
   d793a:	4611      	mov	r1, r2
   d793c:	f7ff bef0 	b.w	d7720 <network_connecting>

000d7940 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7940:	6840      	ldr	r0, [r0, #4]
   d7942:	2200      	movs	r2, #0
   d7944:	2102      	movs	r1, #2
   d7946:	f7ff bef3 	b.w	d7730 <network_disconnect>

000d794a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d794a:	2300      	movs	r3, #0
   d794c:	6840      	ldr	r0, [r0, #4]
   d794e:	461a      	mov	r2, r3
   d7950:	f7ff bede 	b.w	d7710 <network_connect>

000d7954 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7954:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d7956:	4b1b      	ldr	r3, [pc, #108]	; (d79c4 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7958:	6003      	str	r3, [r0, #0]
   d795a:	2500      	movs	r5, #0
   d795c:	460f      	mov	r7, r1
   d795e:	3330      	adds	r3, #48	; 0x30
   d7960:	2618      	movs	r6, #24
   d7962:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7966:	b089      	sub	sp, #36	; 0x24
   d7968:	6043      	str	r3, [r0, #4]
   d796a:	4632      	mov	r2, r6
   d796c:	4629      	mov	r1, r5
   d796e:	4604      	mov	r4, r0
   d7970:	3010      	adds	r0, #16
   d7972:	f003 fc4f 	bl	db214 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7976:	6878      	ldr	r0, [r7, #4]
   d7978:	462a      	mov	r2, r5
   d797a:	4629      	mov	r1, r5
   d797c:	f7ff fee0 	bl	d7740 <network_ready>
   d7980:	b918      	cbnz	r0, d798a <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d7982:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d7984:	4620      	mov	r0, r4
   d7986:	b009      	add	sp, #36	; 0x24
   d7988:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d798a:	4629      	mov	r1, r5
   d798c:	4632      	mov	r2, r6
   d798e:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d7990:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d7994:	f003 fc3e 	bl	db214 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7998:	a902      	add	r1, sp, #8
   d799a:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d799c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d79a0:	f7ff fbec 	bl	d717c <cellular_signal>
   d79a4:	b110      	cbz	r0, d79ac <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d79a6:	2301      	movs	r3, #1
   d79a8:	60a3      	str	r3, [r4, #8]
            return sig;
   d79aa:	e7eb      	b.n	d7984 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d79ac:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d79ae:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d79b0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d79b2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d79b4:	b90b      	cbnz	r3, d79ba <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d79b6:	2302      	movs	r3, #2
   d79b8:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d79ba:	a902      	add	r1, sp, #8
   d79bc:	4620      	mov	r0, r4
   d79be:	f000 f8c0 	bl	d7b42 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d79c2:	e7df      	b.n	d7984 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d79c4:	000dbfd8 	.word	0x000dbfd8

000d79c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d79c8:	4b08      	ldr	r3, [pc, #32]	; (d79ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d79ca:	b510      	push	{r4, lr}
   d79cc:	2428      	movs	r4, #40	; 0x28
   d79ce:	4622      	mov	r2, r4
   d79d0:	4618      	mov	r0, r3
   d79d2:	2100      	movs	r1, #0
   d79d4:	f003 fc1e 	bl	db214 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d79d8:	4b05      	ldr	r3, [pc, #20]	; (d79f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d79da:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d79dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d79e0:	6042      	str	r2, [r0, #4]
   d79e2:	2204      	movs	r2, #4
   d79e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d79e6:	4a03      	ldr	r2, [pc, #12]	; (d79f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d79e8:	601a      	str	r2, [r3, #0]
   d79ea:	bd10      	pop	{r4, pc}
   d79ec:	2003e538 	.word	0x2003e538
   d79f0:	2003e530 	.word	0x2003e530
   d79f4:	000dbf9c 	.word	0x000dbf9c

000d79f8 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d79f8:	4770      	bx	lr

000d79fa <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d79fa:	7d00      	ldrb	r0, [r0, #20]
   d79fc:	4770      	bx	lr

000d79fe <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d79fe:	7d03      	ldrb	r3, [r0, #20]
   d7a00:	b14b      	cbz	r3, d7a16 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d7a02:	6983      	ldr	r3, [r0, #24]
   d7a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7a08:	d005      	beq.n	d7a16 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d7a0a:	6a00      	ldr	r0, [r0, #32]
   d7a0c:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d7a10:	bf18      	it	ne
   d7a12:	2001      	movne	r0, #1
   d7a14:	4770      	bx	lr
   d7a16:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d7a18:	4770      	bx	lr

000d7a1a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d7a1a:	6803      	ldr	r3, [r0, #0]
   d7a1c:	6a1b      	ldr	r3, [r3, #32]
   d7a1e:	4718      	bx	r3

000d7a20 <_ZN14CellularSignalD0Ev>:
   d7a20:	b510      	push	{r4, lr}
   d7a22:	2128      	movs	r1, #40	; 0x28
   d7a24:	4604      	mov	r4, r0
   d7a26:	f002 ff47 	bl	da8b8 <_ZdlPvj>
   d7a2a:	4620      	mov	r0, r4
   d7a2c:	bd10      	pop	{r4, pc}
	...

000d7a30 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d7a30:	7d03      	ldrb	r3, [r0, #20]
   d7a32:	b17b      	cbz	r3, d7a54 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d7a34:	69c3      	ldr	r3, [r0, #28]
   d7a36:	2b00      	cmp	r3, #0
   d7a38:	db0c      	blt.n	d7a54 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d7a3a:	ee07 3a90 	vmov	s15, r3
   d7a3e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7a5c <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d7a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7a46:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7a4a:	eddf 7a05 	vldr	s15, [pc, #20]	; d7a60 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d7a4e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7a52:	4770      	bx	lr
    return -1.0f;
   d7a54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7a58:	4770      	bx	lr
   d7a5a:	bf00      	nop
   d7a5c:	477fff00 	.word	0x477fff00
   d7a60:	42c80000 	.word	0x42c80000

000d7a64 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7a64:	7d03      	ldrb	r3, [r0, #20]
   d7a66:	b163      	cbz	r3, d7a82 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d7a68:	6983      	ldr	r3, [r0, #24]
   d7a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7a6e:	d008      	beq.n	d7a82 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d7a70:	ee07 3a90 	vmov	s15, r3
   d7a74:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7a88 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7a7c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7a80:	4770      	bx	lr
    return 0.0f;
   d7a82:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7a8c <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d7a86:	4770      	bx	lr
   d7a88:	42c80000 	.word	0x42c80000
   d7a8c:	00000000 	.word	0x00000000

000d7a90 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7a90:	7d03      	ldrb	r3, [r0, #20]
   d7a92:	b17b      	cbz	r3, d7ab4 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7a96:	2b00      	cmp	r3, #0
   d7a98:	db0c      	blt.n	d7ab4 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d7a9a:	ee07 3a90 	vmov	s15, r3
   d7a9e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7abc <_ZNK14CellularSignal10getQualityEv+0x2c>
   d7aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7aa6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7aaa:	eddf 7a05 	vldr	s15, [pc, #20]	; d7ac0 <_ZNK14CellularSignal10getQualityEv+0x30>
   d7aae:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7ab2:	4770      	bx	lr
    return -1.0f;
   d7ab4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7ab8:	4770      	bx	lr
   d7aba:	bf00      	nop
   d7abc:	477fff00 	.word	0x477fff00
   d7ac0:	42c80000 	.word	0x42c80000

000d7ac4 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7ac4:	7d03      	ldrb	r3, [r0, #20]
   d7ac6:	b163      	cbz	r3, d7ae2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d7ac8:	6a03      	ldr	r3, [r0, #32]
   d7aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7ace:	d008      	beq.n	d7ae2 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d7ad0:	ee07 3a90 	vmov	s15, r3
   d7ad4:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7ae8 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7adc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7ae0:	4770      	bx	lr
    return 0.0f;
   d7ae2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7aec <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d7ae6:	4770      	bx	lr
   d7ae8:	42c80000 	.word	0x42c80000
   d7aec:	00000000 	.word	0x00000000

000d7af0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d7af0:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d7af2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d7af4:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d7af6:	da0a      	bge.n	d7b0e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d7af8:	212d      	movs	r1, #45	; 0x2d
   d7afa:	f002 f812 	bl	d9b22 <_ZN5Print5printEc>
            val = -n;
   d7afe:	4261      	negs	r1, r4
            t = print('-');
   d7b00:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7b02:	220a      	movs	r2, #10
   d7b04:	4630      	mov	r0, r6
   d7b06:	f002 f81b 	bl	d9b40 <_ZN5Print11printNumberEmh>
    }
}
   d7b0a:	4428      	add	r0, r5
   d7b0c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d7b0e:	4621      	mov	r1, r4
        size_t t = 0;
   d7b10:	2500      	movs	r5, #0
   d7b12:	e7f6      	b.n	d7b02 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d7b14 <_ZNK14CellularSignal7printToER5Print>:
{
   d7b14:	b570      	push	{r4, r5, r6, lr}
   d7b16:	460c      	mov	r4, r1
   d7b18:	4605      	mov	r5, r0
   d7b1a:	6881      	ldr	r1, [r0, #8]
   d7b1c:	4620      	mov	r0, r4
   d7b1e:	f7ff ffe7 	bl	d7af0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d7b22:	212c      	movs	r1, #44	; 0x2c
   d7b24:	4606      	mov	r6, r0
   d7b26:	4620      	mov	r0, r4
   d7b28:	f001 fffb 	bl	d9b22 <_ZN5Print5printEc>
   d7b2c:	68e9      	ldr	r1, [r5, #12]
   d7b2e:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d7b30:	4620      	mov	r0, r4
   d7b32:	f7ff ffdd 	bl	d7af0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d7b36:	4430      	add	r0, r6
   d7b38:	bd70      	pop	{r4, r5, r6, pc}

000d7b3a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7b3a:	f1a0 0004 	sub.w	r0, r0, #4
   d7b3e:	f7ff bfe9 	b.w	d7b14 <_ZNK14CellularSignal7printToER5Print>

000d7b42 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d7b42:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d7b44:	460d      	mov	r5, r1
   d7b46:	f100 0410 	add.w	r4, r0, #16
   d7b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b4e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d7b52:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d7b56:	2001      	movs	r0, #1
   d7b58:	bd30      	pop	{r4, r5, pc}

000d7b5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7b5a:	4770      	bx	lr

000d7b5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7b5c:	2000      	movs	r0, #0
   d7b5e:	4770      	bx	lr

000d7b60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7b60:	b510      	push	{r4, lr}
   d7b62:	2110      	movs	r1, #16
   d7b64:	4604      	mov	r4, r0
   d7b66:	f002 fea7 	bl	da8b8 <_ZdlPvj>
   d7b6a:	4620      	mov	r0, r4
   d7b6c:	bd10      	pop	{r4, pc}

000d7b6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7b6e:	b508      	push	{r3, lr}
      { delete this; }
   d7b70:	f7ff fff6 	bl	d7b60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7b74:	bd08      	pop	{r3, pc}

000d7b76 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d7b76:	b510      	push	{r4, lr}
      if (_M_manager)
   d7b78:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7b7a:	4604      	mov	r4, r0
      if (_M_manager)
   d7b7c:	b113      	cbz	r3, d7b84 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7b7e:	2203      	movs	r2, #3
   d7b80:	4601      	mov	r1, r0
   d7b82:	4798      	blx	r3
    }
   d7b84:	4620      	mov	r0, r4
   d7b86:	bd10      	pop	{r4, pc}

000d7b88 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7b88:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7b8a:	2200      	movs	r2, #0
   d7b8c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7b90:	6002      	str	r2, [r0, #0]
   d7b92:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b94:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b96:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7b98:	680c      	ldr	r4, [r1, #0]
   d7b9a:	8085      	strh	r5, [r0, #4]
   d7b9c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b9e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7ba0:	bd30      	pop	{r4, r5, pc}

000d7ba2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7ba2:	b510      	push	{r4, lr}
   d7ba4:	4604      	mov	r4, r0
    free((void*)msg_);
   d7ba6:	6800      	ldr	r0, [r0, #0]
   d7ba8:	f7ff fe1a 	bl	d77e0 <free>
}
   d7bac:	4620      	mov	r0, r4
   d7bae:	bd10      	pop	{r4, pc}

000d7bb0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7bb0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7bb2:	68c4      	ldr	r4, [r0, #12]
   d7bb4:	b1f4      	cbz	r4, d7bf4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7bb6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7bb8:	2b02      	cmp	r3, #2
   d7bba:	d103      	bne.n	d7bc4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7bbc:	f104 000c 	add.w	r0, r4, #12
   d7bc0:	f7ff ffef 	bl	d7ba2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7bc4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7bc6:	b135      	cbz	r5, d7bd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7bc8:	4628      	mov	r0, r5
   d7bca:	f7ff ffd4 	bl	d7b76 <_ZNSt14_Function_baseD1Ev>
   d7bce:	2110      	movs	r1, #16
   d7bd0:	4628      	mov	r0, r5
   d7bd2:	f002 fe71 	bl	da8b8 <_ZdlPvj>
   d7bd6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7bd8:	b135      	cbz	r5, d7be8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7bda:	4628      	mov	r0, r5
   d7bdc:	f7ff ffcb 	bl	d7b76 <_ZNSt14_Function_baseD1Ev>
   d7be0:	2110      	movs	r1, #16
   d7be2:	4628      	mov	r0, r5
   d7be4:	f002 fe68 	bl	da8b8 <_ZdlPvj>
   d7be8:	4620      	mov	r0, r4
   d7bea:	2114      	movs	r1, #20
   d7bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7bf0:	f002 be62 	b.w	da8b8 <_ZdlPvj>
   d7bf4:	bd38      	pop	{r3, r4, r5, pc}

000d7bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7bf8:	460e      	mov	r6, r1
   d7bfa:	4604      	mov	r4, r0
   d7bfc:	f856 3b04 	ldr.w	r3, [r6], #4
   d7c00:	9300      	str	r3, [sp, #0]
   d7c02:	460d      	mov	r5, r1
   d7c04:	a801      	add	r0, sp, #4
   d7c06:	4631      	mov	r1, r6
   d7c08:	f7ff fe61 	bl	d78ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7c0c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7c0e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7c10:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7c12:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7c14:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7c16:	2300      	movs	r3, #0
   d7c18:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7c1a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7c1c:	f7fc fe86 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7c20:	4630      	mov	r0, r6
   d7c22:	f7fc fe83 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7c26:	4628      	mov	r0, r5
   d7c28:	2108      	movs	r1, #8
   d7c2a:	f002 fe45 	bl	da8b8 <_ZdlPvj>
        return p;
    }
   d7c2e:	4620      	mov	r0, r4
   d7c30:	b002      	add	sp, #8
   d7c32:	bd70      	pop	{r4, r5, r6, pc}

000d7c34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7c34:	b513      	push	{r0, r1, r4, lr}
   d7c36:	460b      	mov	r3, r1
   d7c38:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c3a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7c3e:	466c      	mov	r4, sp
   d7c40:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7c44:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7c48:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7c50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7c54:	b002      	add	sp, #8
   d7c56:	bd10      	pop	{r4, pc}

000d7c58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7c58:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7c5a:	b510      	push	{r4, lr}
      if (_M_empty())
   d7c5c:	b90a      	cbnz	r2, d7c62 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7c5e:	f002 fe31 	bl	da8c4 <_ZSt25__throw_bad_function_callv>
    }
   d7c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c66:	68c3      	ldr	r3, [r0, #12]
   d7c68:	4718      	bx	r3

000d7c6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7c6a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7c6c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7c6e:	f100 0110 	add.w	r1, r0, #16
   d7c72:	f7ff fff1 	bl	d7c58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7c76:	bd08      	pop	{r3, pc}

000d7c78 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7c78:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7c7a:	b510      	push	{r4, lr}
      if (_M_empty())
   d7c7c:	b90a      	cbnz	r2, d7c82 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7c7e:	f002 fe21 	bl	da8c4 <_ZSt25__throw_bad_function_callv>
    }
   d7c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c86:	68c3      	ldr	r3, [r0, #12]
   d7c88:	4718      	bx	r3

000d7c8a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7c8a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7c8c:	6800      	ldr	r0, [r0, #0]
   d7c8e:	f100 0110 	add.w	r1, r0, #16
   d7c92:	f7ff fff1 	bl	d7c78 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7c96:	bd08      	pop	{r3, pc}

000d7c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7c98:	b538      	push	{r3, r4, r5, lr}
   d7c9a:	2300      	movs	r3, #0
   d7c9c:	4604      	mov	r4, r0
   d7c9e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7ca0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7ca2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7ca4:	f7fc f9f7 	bl	d4096 <_Znwj>
   d7ca8:	b128      	cbz	r0, d7cb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7caa:	2301      	movs	r3, #1
   d7cac:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7cb0:	4b02      	ldr	r3, [pc, #8]	; (d7cbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7cb2:	6003      	str	r3, [r0, #0]
   d7cb4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7cb6:	6020      	str	r0, [r4, #0]
	}
   d7cb8:	4620      	mov	r0, r4
   d7cba:	bd38      	pop	{r3, r4, r5, pc}
   d7cbc:	000dc014 	.word	0x000dc014

000d7cc0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7cc0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7cc2:	2300      	movs	r3, #0
   d7cc4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7cc6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7cc8:	4604      	mov	r4, r0
   d7cca:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7ccc:	b12b      	cbz	r3, d7cda <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7cce:	2202      	movs	r2, #2
   d7cd0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7cd2:	68eb      	ldr	r3, [r5, #12]
   d7cd4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7cd6:	68ab      	ldr	r3, [r5, #8]
   d7cd8:	60a3      	str	r3, [r4, #8]
    }
   d7cda:	4620      	mov	r0, r4
   d7cdc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7ce2:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7ce4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7ce6:	4668      	mov	r0, sp
   d7ce8:	f7ff ff4e 	bl	d7b88 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7cec:	f04f 0302 	mov.w	r3, #2
   d7cf0:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7cf4:	2a00      	cmp	r2, #0
   d7cf6:	d103      	bne.n	d7d00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7cf8:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7cfc:	2900      	cmp	r1, #0
   d7cfe:	d1f7      	bne.n	d7cf0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7d00:	d125      	bne.n	d7d4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d7d02:	f104 050c 	add.w	r5, r4, #12
   d7d06:	4669      	mov	r1, sp
   d7d08:	4628      	mov	r0, r5
   d7d0a:	f7ff ff3d 	bl	d7b88 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7d0e:	f3bf 8f5b 	dmb	ish
   d7d12:	2301      	movs	r3, #1
   d7d14:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7d16:	2000      	movs	r0, #0
   d7d18:	f104 0308 	add.w	r3, r4, #8
   d7d1c:	f3bf 8f5b 	dmb	ish
   d7d20:	e853 6f00 	ldrex	r6, [r3]
   d7d24:	e843 0200 	strex	r2, r0, [r3]
   d7d28:	2a00      	cmp	r2, #0
   d7d2a:	d1f9      	bne.n	d7d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7d2c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7d30:	b16e      	cbz	r6, d7d4e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d7d32:	f7ff fc75 	bl	d7620 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7d36:	b178      	cbz	r0, d7d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7d38:	4629      	mov	r1, r5
   d7d3a:	4630      	mov	r0, r6
   d7d3c:	f7ff ff8c 	bl	d7c58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7d40:	4630      	mov	r0, r6
   d7d42:	f7ff ff18 	bl	d7b76 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7d46:	2110      	movs	r1, #16
   d7d48:	4630      	mov	r0, r6
   d7d4a:	f002 fdb5 	bl	da8b8 <_ZdlPvj>
        p_->setError(std::move(error));
   d7d4e:	4668      	mov	r0, sp
   d7d50:	f7ff ff27 	bl	d7ba2 <_ZN8particle5ErrorD1Ev>
    }
   d7d54:	b009      	add	sp, #36	; 0x24
   d7d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7d58:	4631      	mov	r1, r6
   d7d5a:	a802      	add	r0, sp, #8
   d7d5c:	f7ff ffb0 	bl	d7cc0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7d60:	68e0      	ldr	r0, [r4, #12]
   d7d62:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7d66:	b108      	cbz	r0, d7d6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7d68:	f003 fade 	bl	db328 <strdup>
        type_(type) {
   d7d6c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7d6e:	2010      	movs	r0, #16
   d7d70:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7d74:	f7fc f98f 	bl	d4096 <_Znwj>
   d7d78:	4605      	mov	r5, r0
   d7d7a:	b1e8      	cbz	r0, d7db8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7d7c:	2700      	movs	r7, #0
   d7d7e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7d80:	2018      	movs	r0, #24
   d7d82:	f7fc f988 	bl	d4096 <_Znwj>
   d7d86:	4604      	mov	r4, r0
   d7d88:	b188      	cbz	r0, d7dae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7d8a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7d8c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7d8e:	a802      	add	r0, sp, #8
   d7d90:	f7ff ff50 	bl	d7c34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d94:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7d96:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7d98:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d9a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7d9c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7d9e:	a906      	add	r1, sp, #24
   d7da0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7da2:	60e3      	str	r3, [r4, #12]
   d7da4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7da8:	9205      	str	r2, [sp, #20]
   d7daa:	f7ff feed 	bl	d7b88 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7dae:	4b08      	ldr	r3, [pc, #32]	; (d7dd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7db0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7db2:	4b08      	ldr	r3, [pc, #32]	; (d7dd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7db4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7db6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7db8:	a806      	add	r0, sp, #24
   d7dba:	f7ff fef2 	bl	d7ba2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7dbe:	a802      	add	r0, sp, #8
   d7dc0:	f7ff fed9 	bl	d7b76 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7dc4:	2200      	movs	r2, #0
   d7dc6:	4629      	mov	r1, r5
   d7dc8:	4803      	ldr	r0, [pc, #12]	; (d7dd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7dca:	f7ff fc31 	bl	d7630 <application_thread_invoke>
   d7dce:	e7b7      	b.n	d7d40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7dd0:	000d7c6b 	.word	0x000d7c6b
   d7dd4:	000d7f01 	.word	0x000d7f01
   d7dd8:	000d78a7 	.word	0x000d78a7

000d7ddc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7de0:	b08a      	sub	sp, #40	; 0x28
   d7de2:	4605      	mov	r5, r0
   d7de4:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7de8:	460c      	mov	r4, r1
   d7dea:	4617      	mov	r7, r2
   d7dec:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7dee:	f7ff fc67 	bl	d76c0 <spark_cloud_flag_connected>
   d7df2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7df4:	4682      	mov	sl, r0
   d7df6:	bb38      	cbnz	r0, d7e48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7df8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7dfc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7dfe:	a905      	add	r1, sp, #20
   d7e00:	4630      	mov	r0, r6
   d7e02:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7e06:	f7ff febf 	bl	d7b88 <_ZN8particle5ErrorC1EOS0_>
   d7e0a:	2014      	movs	r0, #20
   d7e0c:	f7fc f943 	bl	d4096 <_Znwj>
   d7e10:	4604      	mov	r4, r0
   d7e12:	b148      	cbz	r0, d7e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7e14:	2302      	movs	r3, #2
   d7e16:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e18:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7e1a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e1e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d7e20:	4631      	mov	r1, r6
   d7e22:	300c      	adds	r0, #12
   d7e24:	f7ff feb0 	bl	d7b88 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7e28:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7e2a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7e2c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d7e30:	f7ff ff32 	bl	d7c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7e34:	4630      	mov	r0, r6
   d7e36:	f7ff feb4 	bl	d7ba2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7e3a:	a805      	add	r0, sp, #20
   d7e3c:	f7ff feb1 	bl	d7ba2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d7e40:	4628      	mov	r0, r5
   d7e42:	b00a      	add	sp, #40	; 0x28
   d7e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7e48:	230c      	movs	r3, #12
   d7e4a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d7e4e:	2014      	movs	r0, #20
   d7e50:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7e54:	9307      	str	r3, [sp, #28]
   d7e56:	f7fc f91e 	bl	d4096 <_Znwj>
   d7e5a:	4601      	mov	r1, r0
   d7e5c:	b128      	cbz	r0, d7e6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7e5e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d7e62:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e66:	f880 a001 	strb.w	sl, [r0, #1]
   d7e6a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7e6c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d7e6e:	f7ff ff13 	bl	d7c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d7e72:	4b22      	ldr	r3, [pc, #136]	; (d7efc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7e74:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7e76:	2008      	movs	r0, #8
   d7e78:	f7fc f90d 	bl	d4096 <_Znwj>
   d7e7c:	4682      	mov	sl, r0
   d7e7e:	b128      	cbz	r0, d7e8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7e80:	9b03      	ldr	r3, [sp, #12]
   d7e82:	f840 3b04 	str.w	r3, [r0], #4
   d7e86:	a904      	add	r1, sp, #16
   d7e88:	f7ff fd21 	bl	d78ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7e8c:	9600      	str	r6, [sp, #0]
   d7e8e:	fa5f f389 	uxtb.w	r3, r9
   d7e92:	4642      	mov	r2, r8
   d7e94:	4639      	mov	r1, r7
   d7e96:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d7e98:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7e9c:	f7ff fc18 	bl	d76d0 <spark_send_event>
   d7ea0:	b9b8      	cbnz	r0, d7ed2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d7ea2:	9b03      	ldr	r3, [sp, #12]
   d7ea4:	785b      	ldrb	r3, [r3, #1]
   d7ea6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7eaa:	b993      	cbnz	r3, d7ed2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7eac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d7eb0:	a905      	add	r1, sp, #20
   d7eb2:	a803      	add	r0, sp, #12
   d7eb4:	9205      	str	r2, [sp, #20]
   d7eb6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7eba:	f7ff ff11 	bl	d7ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7ebe:	a805      	add	r0, sp, #20
   d7ec0:	f7ff fe6f 	bl	d7ba2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7ec4:	a805      	add	r0, sp, #20
   d7ec6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7ec8:	f7ff fe95 	bl	d7bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7ecc:	a806      	add	r0, sp, #24
   d7ece:	f7fc fd2d 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7ed2:	9b03      	ldr	r3, [sp, #12]
   d7ed4:	9305      	str	r3, [sp, #20]
   d7ed6:	a904      	add	r1, sp, #16
   d7ed8:	a806      	add	r0, sp, #24
   d7eda:	f7ff fcf8 	bl	d78ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7ede:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7ee0:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7ee2:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7ee4:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d7ee6:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7ee8:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d7eea:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7eec:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d7eee:	f7fc fd1d 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7ef2:	a804      	add	r0, sp, #16
   d7ef4:	f7fc fd1a 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7ef8:	e7a2      	b.n	d7e40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d7efa:	bf00      	nop
   d7efc:	000d7fc5 	.word	0x000d7fc5

000d7f00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d7f00:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f04:	4605      	mov	r5, r0
	  switch (__op)
   d7f06:	d007      	beq.n	d7f18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d7f08:	2a03      	cmp	r2, #3
   d7f0a:	d018      	beq.n	d7f3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d7f0c:	2a01      	cmp	r2, #1
   d7f0e:	d101      	bne.n	d7f14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7f10:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7f12:	6003      	str	r3, [r0, #0]
	}
   d7f14:	2000      	movs	r0, #0
   d7f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7f18:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7f1a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7f1c:	f7fc f8bb 	bl	d4096 <_Znwj>
   d7f20:	4604      	mov	r4, r0
   d7f22:	b150      	cbz	r0, d7f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7f24:	4631      	mov	r1, r6
   d7f26:	f7ff fecb 	bl	d7cc0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7f2a:	6930      	ldr	r0, [r6, #16]
   d7f2c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7f30:	b108      	cbz	r0, d7f36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d7f32:	f003 f9f9 	bl	db328 <strdup>
        type_(type) {
   d7f36:	6120      	str	r0, [r4, #16]
   d7f38:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7f3a:	602c      	str	r4, [r5, #0]
	}
   d7f3c:	e7ea      	b.n	d7f14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7f3e:	6804      	ldr	r4, [r0, #0]
   d7f40:	2c00      	cmp	r4, #0
   d7f42:	d0e7      	beq.n	d7f14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7f44:	f104 0010 	add.w	r0, r4, #16
   d7f48:	f7ff fe2b 	bl	d7ba2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7f4c:	4620      	mov	r0, r4
   d7f4e:	f7ff fe12 	bl	d7b76 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7f52:	2118      	movs	r1, #24
   d7f54:	4620      	mov	r0, r4
   d7f56:	f002 fcaf 	bl	da8b8 <_ZdlPvj>
   d7f5a:	e7db      	b.n	d7f14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7f5c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7f5c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7f5e:	2300      	movs	r3, #0
   d7f60:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7f62:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7f64:	4604      	mov	r4, r0
   d7f66:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7f68:	b12b      	cbz	r3, d7f76 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7f6a:	2202      	movs	r2, #2
   d7f6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7f6e:	68eb      	ldr	r3, [r5, #12]
   d7f70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7f72:	68ab      	ldr	r3, [r5, #8]
   d7f74:	60a3      	str	r3, [r4, #8]
    }
   d7f76:	4620      	mov	r0, r4
   d7f78:	bd38      	pop	{r3, r4, r5, pc}

000d7f7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7f7a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7f7c:	b570      	push	{r4, r5, r6, lr}
   d7f7e:	4604      	mov	r4, r0
	  switch (__op)
   d7f80:	d007      	beq.n	d7f92 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d7f82:	2a03      	cmp	r2, #3
   d7f84:	d012      	beq.n	d7fac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d7f86:	2a01      	cmp	r2, #1
   d7f88:	d101      	bne.n	d7f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7f8a:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7f8c:	6003      	str	r3, [r0, #0]
	}
   d7f8e:	2000      	movs	r0, #0
   d7f90:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7f92:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7f94:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7f96:	f7fc f87e 	bl	d4096 <_Znwj>
   d7f9a:	4605      	mov	r5, r0
   d7f9c:	b120      	cbz	r0, d7fa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7f9e:	4631      	mov	r1, r6
   d7fa0:	f7ff ffdc 	bl	d7f5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7fa4:	7c33      	ldrb	r3, [r6, #16]
   d7fa6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7fa8:	6025      	str	r5, [r4, #0]
	}
   d7faa:	e7f0      	b.n	d7f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7fac:	6804      	ldr	r4, [r0, #0]
   d7fae:	2c00      	cmp	r4, #0
   d7fb0:	d0ed      	beq.n	d7f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7fb2:	4620      	mov	r0, r4
   d7fb4:	f7ff fddf 	bl	d7b76 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7fb8:	2114      	movs	r1, #20
   d7fba:	4620      	mov	r0, r4
   d7fbc:	f002 fc7c 	bl	da8b8 <_ZdlPvj>
   d7fc0:	e7e5      	b.n	d7f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7fc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7fc6:	b089      	sub	sp, #36	; 0x24
   d7fc8:	4604      	mov	r4, r0
   d7fca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7fcc:	a801      	add	r0, sp, #4
   d7fce:	4611      	mov	r1, r2
   d7fd0:	f7ff fe11 	bl	d7bf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7fd4:	b1a4      	cbz	r4, d8000 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7fd6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7fd8:	b11d      	cbz	r5, d7fe2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7fda:	4628      	mov	r0, r5
   d7fdc:	f003 f9a4 	bl	db328 <strdup>
   d7fe0:	4605      	mov	r5, r0
   d7fe2:	a801      	add	r0, sp, #4
   d7fe4:	a903      	add	r1, sp, #12
        type_(type) {
   d7fe6:	9503      	str	r5, [sp, #12]
   d7fe8:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7fec:	f7ff fe78 	bl	d7ce0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7ff0:	a803      	add	r0, sp, #12
   d7ff2:	f7ff fdd6 	bl	d7ba2 <_ZN8particle5ErrorD1Ev>
   d7ff6:	a802      	add	r0, sp, #8
   d7ff8:	f7fc fc98 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7ffc:	b009      	add	sp, #36	; 0x24
   d7ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8000:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8002:	2301      	movs	r3, #1
   d8004:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8008:	2a00      	cmp	r2, #0
   d800a:	d103      	bne.n	d8014 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d800c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8010:	2900      	cmp	r1, #0
   d8012:	d1f7      	bne.n	d8004 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8014:	d1ef      	bne.n	d7ff6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8016:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8018:	f3bf 8f5b 	dmb	ish
   d801c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d801e:	1d2b      	adds	r3, r5, #4
   d8020:	f3bf 8f5b 	dmb	ish
   d8024:	e853 6f00 	ldrex	r6, [r3]
   d8028:	e843 4200 	strex	r2, r4, [r3]
   d802c:	2a00      	cmp	r2, #0
   d802e:	d1f9      	bne.n	d8024 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8030:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8034:	2e00      	cmp	r6, #0
   d8036:	d0de      	beq.n	d7ff6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8038:	4620      	mov	r0, r4
   d803a:	f7ff faf1 	bl	d7620 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d803e:	4607      	mov	r7, r0
   d8040:	b160      	cbz	r0, d805c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8042:	f105 010c 	add.w	r1, r5, #12
   d8046:	4630      	mov	r0, r6
   d8048:	f7ff fe16 	bl	d7c78 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d804c:	4630      	mov	r0, r6
   d804e:	f7ff fd92 	bl	d7b76 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d8052:	2110      	movs	r1, #16
   d8054:	4630      	mov	r0, r6
   d8056:	f002 fc2f 	bl	da8b8 <_ZdlPvj>
   d805a:	e7cc      	b.n	d7ff6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d805c:	4631      	mov	r1, r6
   d805e:	a803      	add	r0, sp, #12
   d8060:	f7ff ff7c 	bl	d7f5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d8064:	7b2b      	ldrb	r3, [r5, #12]
   d8066:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d806a:	2010      	movs	r0, #16
   d806c:	f7fc f813 	bl	d4096 <_Znwj>
   d8070:	4605      	mov	r5, r0
   d8072:	b1d0      	cbz	r0, d80aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d8074:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8076:	2014      	movs	r0, #20
   d8078:	f7fc f80d 	bl	d4096 <_Znwj>
   d807c:	4604      	mov	r4, r0
   d807e:	b178      	cbz	r0, d80a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d8080:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d8082:	4601      	mov	r1, r0
   d8084:	a803      	add	r0, sp, #12
   d8086:	f7ff fdd5 	bl	d7c34 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d808a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d808c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d808e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8090:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d8092:	9205      	str	r2, [sp, #20]
   d8094:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d8096:	60e3      	str	r3, [r4, #12]
   d8098:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d809c:	9206      	str	r2, [sp, #24]
   d809e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d80a0:	4b06      	ldr	r3, [pc, #24]	; (d80bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d80a2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d80a4:	4b06      	ldr	r3, [pc, #24]	; (d80c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d80a6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d80a8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d80aa:	a803      	add	r0, sp, #12
   d80ac:	f7ff fd63 	bl	d7b76 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d80b0:	2200      	movs	r2, #0
   d80b2:	4629      	mov	r1, r5
   d80b4:	4803      	ldr	r0, [pc, #12]	; (d80c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d80b6:	f7ff fabb 	bl	d7630 <application_thread_invoke>
   d80ba:	e7c7      	b.n	d804c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d80bc:	000d7c8b 	.word	0x000d7c8b
   d80c0:	000d7f7b 	.word	0x000d7f7b
   d80c4:	000d78a7 	.word	0x000d78a7

000d80c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d80c8:	2200      	movs	r2, #0
   d80ca:	6840      	ldr	r0, [r0, #4]
   d80cc:	4611      	mov	r1, r2
   d80ce:	f7ff bb57 	b.w	d7780 <network_listening>

000d80d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d80d2:	2200      	movs	r2, #0
   d80d4:	6840      	ldr	r0, [r0, #4]
   d80d6:	4611      	mov	r1, r2
   d80d8:	f7ff bb62 	b.w	d77a0 <network_get_listen_timeout>

000d80dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d80dc:	6840      	ldr	r0, [r0, #4]
   d80de:	2200      	movs	r2, #0
   d80e0:	f7ff bb56 	b.w	d7790 <network_set_listen_timeout>

000d80e4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d80e4:	6840      	ldr	r0, [r0, #4]
   d80e6:	2200      	movs	r2, #0
   d80e8:	f081 0101 	eor.w	r1, r1, #1
   d80ec:	f7ff bb40 	b.w	d7770 <network_listen>

000d80f0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d80f0:	2300      	movs	r3, #0
   d80f2:	6840      	ldr	r0, [r0, #4]
   d80f4:	461a      	mov	r2, r3
   d80f6:	4619      	mov	r1, r3
   d80f8:	f7ff bb32 	b.w	d7760 <network_off>

000d80fc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d80fc:	2300      	movs	r3, #0
   d80fe:	6840      	ldr	r0, [r0, #4]
   d8100:	461a      	mov	r2, r3
   d8102:	4619      	mov	r1, r3
   d8104:	f7ff bb24 	b.w	d7750 <network_on>

000d8108 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8108:	2200      	movs	r2, #0
   d810a:	6840      	ldr	r0, [r0, #4]
   d810c:	4611      	mov	r1, r2
   d810e:	f7ff bb17 	b.w	d7740 <network_ready>

000d8112 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8112:	2200      	movs	r2, #0
   d8114:	6840      	ldr	r0, [r0, #4]
   d8116:	4611      	mov	r1, r2
   d8118:	f7ff bb02 	b.w	d7720 <network_connecting>

000d811c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d811c:	6840      	ldr	r0, [r0, #4]
   d811e:	2200      	movs	r2, #0
   d8120:	2102      	movs	r1, #2
   d8122:	f7ff bb05 	b.w	d7730 <network_disconnect>

000d8126 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8126:	2300      	movs	r3, #0
   d8128:	6840      	ldr	r0, [r0, #4]
   d812a:	461a      	mov	r2, r3
   d812c:	f7ff baf0 	b.w	d7710 <network_connect>

000d8130 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8130:	4b02      	ldr	r3, [pc, #8]	; (d813c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8132:	2203      	movs	r2, #3
   d8134:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8136:	4a02      	ldr	r2, [pc, #8]	; (d8140 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8138:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d813a:	4770      	bx	lr
   d813c:	2003e560 	.word	0x2003e560
   d8140:	000dc030 	.word	0x000dc030

000d8144 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8144:	6800      	ldr	r0, [r0, #0]
   d8146:	f000 b951 	b.w	d83ec <_ZN7TwoWire4lockEv>

000d814a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d814a:	b510      	push	{r4, lr}
   d814c:	4604      	mov	r4, r0
      lock_(_lock) {
   d814e:	6001      	str	r1, [r0, #0]
   d8150:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d8152:	b10a      	cbz	r2, d8158 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d8154:	f7ff fff6 	bl	d8144 <_ZN9FuelGauge4lockEv>
}
   d8158:	4620      	mov	r0, r4
   d815a:	bd10      	pop	{r4, pc}

000d815c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d815c:	b513      	push	{r0, r1, r4, lr}
   d815e:	4604      	mov	r4, r0
   d8160:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d8162:	f002 fb85 	bl	da870 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d8166:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d8168:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d816a:	4620      	mov	r0, r4
   d816c:	f7ff ffed 	bl	d814a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d8170:	4620      	mov	r0, r4
   d8172:	b002      	add	sp, #8
   d8174:	bd10      	pop	{r4, pc}

000d8176 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d8176:	6800      	ldr	r0, [r0, #0]
   d8178:	f000 b941 	b.w	d83fe <_ZN7TwoWire6unlockEv>

000d817c <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d817c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8180:	4604      	mov	r4, r0
   d8182:	460d      	mov	r5, r1
   d8184:	4617      	mov	r7, r2
   d8186:	461e      	mov	r6, r3
   d8188:	f7ff ffdc 	bl	d8144 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d818c:	2336      	movs	r3, #54	; 0x36
   d818e:	f88d 3000 	strb.w	r3, [sp]
   d8192:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8194:	6820      	ldr	r0, [r4, #0]
   d8196:	9301      	str	r3, [sp, #4]
   d8198:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d819c:	230a      	movs	r3, #10
   d819e:	4669      	mov	r1, sp
   d81a0:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d81a2:	f88d 8008 	strb.w	r8, [sp, #8]
   d81a6:	f000 f905 	bl	d83b4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d81aa:	6820      	ldr	r0, [r4, #0]
   d81ac:	6803      	ldr	r3, [r0, #0]
   d81ae:	4629      	mov	r1, r5
   d81b0:	689b      	ldr	r3, [r3, #8]
   d81b2:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d81b4:	6820      	ldr	r0, [r4, #0]
   d81b6:	4641      	mov	r1, r8
   d81b8:	f000 f914 	bl	d83e4 <_ZN7TwoWire15endTransmissionEh>
   d81bc:	4605      	mov	r5, r0
   d81be:	b140      	cbz	r0, d81d2 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d81c0:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d81c4:	4620      	mov	r0, r4
   d81c6:	f7ff ffd6 	bl	d8176 <_ZN9FuelGauge6unlockEv>
}
   d81ca:	4628      	mov	r0, r5
   d81cc:	b004      	add	sp, #16
   d81ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d81d2:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d81d4:	6820      	ldr	r0, [r4, #0]
   d81d6:	9301      	str	r3, [sp, #4]
   d81d8:	4669      	mov	r1, sp
   d81da:	f000 f8bb 	bl	d8354 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d81de:	2802      	cmp	r0, #2
   d81e0:	d1ee      	bne.n	d81c0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d81e2:	6820      	ldr	r0, [r4, #0]
   d81e4:	6803      	ldr	r3, [r0, #0]
   d81e6:	695b      	ldr	r3, [r3, #20]
   d81e8:	4798      	blx	r3
   d81ea:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d81ec:	6820      	ldr	r0, [r4, #0]
   d81ee:	6803      	ldr	r3, [r0, #0]
   d81f0:	695b      	ldr	r3, [r3, #20]
   d81f2:	4798      	blx	r3
   d81f4:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d81f6:	e7e5      	b.n	d81c4 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d81f8 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d81f8:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d81fa:	2300      	movs	r3, #0
   d81fc:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d8200:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d8204:	f10d 0206 	add.w	r2, sp, #6
   d8208:	f10d 0307 	add.w	r3, sp, #7
   d820c:	2104      	movs	r1, #4
   d820e:	f7ff ffb5 	bl	d817c <_ZN9FuelGauge12readRegisterEhRhS0_>
   d8212:	b9b0      	cbnz	r0, d8242 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d8214:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d8218:	f002 fcaa 	bl	dab70 <__aeabi_i2d>
   d821c:	4b0a      	ldr	r3, [pc, #40]	; (d8248 <_ZN9FuelGauge6getSoCEv+0x50>)
   d821e:	2200      	movs	r2, #0
   d8220:	f002 fd10 	bl	dac44 <__aeabi_dmul>
   d8224:	f002 ff40 	bl	db0a8 <__aeabi_d2f>
        return MSB + decimal;
   d8228:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d822c:	ee00 3a10 	vmov	s0, r3
   d8230:	ee07 0a90 	vmov	s15, r0
   d8234:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d8238:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d823c:	b003      	add	sp, #12
   d823e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d8242:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d8246:	e7f9      	b.n	d823c <_ZN9FuelGauge6getSoCEv+0x44>
   d8248:	3f700000 	.word	0x3f700000

000d824c <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d824c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d8250:	4616      	mov	r6, r2
   d8252:	4604      	mov	r4, r0
   d8254:	461d      	mov	r5, r3
   d8256:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d8258:	f7ff ff74 	bl	d8144 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d825c:	2336      	movs	r3, #54	; 0x36
   d825e:	f88d 3000 	strb.w	r3, [sp]
   d8262:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d8264:	6820      	ldr	r0, [r4, #0]
   d8266:	9301      	str	r3, [sp, #4]
   d8268:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d826c:	230a      	movs	r3, #10
   d826e:	4669      	mov	r1, sp
   d8270:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8272:	f88d 8008 	strb.w	r8, [sp, #8]
   d8276:	f000 f89d 	bl	d83b4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d827a:	6820      	ldr	r0, [r4, #0]
   d827c:	6803      	ldr	r3, [r0, #0]
   d827e:	4639      	mov	r1, r7
   d8280:	689b      	ldr	r3, [r3, #8]
   d8282:	4798      	blx	r3
    i2c_.write(MSB);
   d8284:	6820      	ldr	r0, [r4, #0]
   d8286:	6803      	ldr	r3, [r0, #0]
   d8288:	4631      	mov	r1, r6
   d828a:	689b      	ldr	r3, [r3, #8]
   d828c:	4798      	blx	r3
    i2c_.write(LSB);
   d828e:	6820      	ldr	r0, [r4, #0]
   d8290:	6803      	ldr	r3, [r0, #0]
   d8292:	4629      	mov	r1, r5
   d8294:	689b      	ldr	r3, [r3, #8]
   d8296:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8298:	4641      	mov	r1, r8
   d829a:	6820      	ldr	r0, [r4, #0]
   d829c:	f000 f8a2 	bl	d83e4 <_ZN7TwoWire15endTransmissionEh>
   d82a0:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d82a2:	4620      	mov	r0, r4
   d82a4:	bf0c      	ite	eq
   d82a6:	2500      	moveq	r5, #0
   d82a8:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d82ac:	f7ff ff63 	bl	d8176 <_ZN9FuelGauge6unlockEv>
}
   d82b0:	4628      	mov	r0, r5
   d82b2:	b004      	add	sp, #16
   d82b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d82b8 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d82b8:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d82ba:	2240      	movs	r2, #64	; 0x40
   d82bc:	2300      	movs	r3, #0
   d82be:	2106      	movs	r1, #6
   d82c0:	f7ff ffc4 	bl	d824c <_ZN9FuelGauge13writeRegisterEhhh>
}
   d82c4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d82c8:	bd08      	pop	{r3, pc}

000d82ca <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d82ca:	4770      	bx	lr

000d82cc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d82cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d82ce:	4606      	mov	r6, r0
   d82d0:	4615      	mov	r5, r2
   d82d2:	460c      	mov	r4, r1
   d82d4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d82d6:	42bc      	cmp	r4, r7
   d82d8:	d006      	beq.n	d82e8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d82da:	6833      	ldr	r3, [r6, #0]
   d82dc:	f814 1b01 	ldrb.w	r1, [r4], #1
   d82e0:	689b      	ldr	r3, [r3, #8]
   d82e2:	4630      	mov	r0, r6
   d82e4:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d82e6:	e7f6      	b.n	d82d6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d82e8:	4628      	mov	r0, r5
   d82ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d82ec <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d82ec:	7c00      	ldrb	r0, [r0, #16]
   d82ee:	2200      	movs	r2, #0
   d82f0:	f7fe bffc 	b.w	d72ec <hal_i2c_write>

000d82f4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d82f4:	7c00      	ldrb	r0, [r0, #16]
   d82f6:	2100      	movs	r1, #0
   d82f8:	f7ff b800 	b.w	d72fc <hal_i2c_available>

000d82fc <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d82fc:	7c00      	ldrb	r0, [r0, #16]
   d82fe:	2100      	movs	r1, #0
   d8300:	f7ff b804 	b.w	d730c <hal_i2c_read>

000d8304 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8304:	7c00      	ldrb	r0, [r0, #16]
   d8306:	2100      	movs	r1, #0
   d8308:	f7ff b808 	b.w	d731c <hal_i2c_peek>

000d830c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d830c:	7c00      	ldrb	r0, [r0, #16]
   d830e:	2100      	movs	r1, #0
   d8310:	f7ff b80c 	b.w	d732c <hal_i2c_flush>

000d8314 <_ZN7TwoWireD0Ev>:
   d8314:	b510      	push	{r4, lr}
   d8316:	2114      	movs	r1, #20
   d8318:	4604      	mov	r4, r0
   d831a:	f002 facd 	bl	da8b8 <_ZdlPvj>
   d831e:	4620      	mov	r0, r4
   d8320:	bd10      	pop	{r4, pc}
	...

000d8324 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8324:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d832a:	4604      	mov	r4, r0
   d832c:	4608      	mov	r0, r1
   d832e:	2100      	movs	r1, #0
   d8330:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8334:	4b03      	ldr	r3, [pc, #12]	; (d8344 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8336:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8338:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d833a:	4611      	mov	r1, r2
   d833c:	f7ff f806 	bl	d734c <hal_i2c_init>
}
   d8340:	4620      	mov	r0, r4
   d8342:	bd10      	pop	{r4, pc}
   d8344:	000dc06c 	.word	0x000dc06c

000d8348 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8348:	2300      	movs	r3, #0
   d834a:	7c00      	ldrb	r0, [r0, #16]
   d834c:	461a      	mov	r2, r3
   d834e:	4619      	mov	r1, r3
   d8350:	f7fe bfb4 	b.w	d72bc <hal_i2c_begin>

000d8354 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d8354:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8356:	2200      	movs	r2, #0
   d8358:	2314      	movs	r3, #20
   d835a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d835e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d8362:	780b      	ldrb	r3, [r1, #0]
   d8364:	f88d 3008 	strb.w	r3, [sp, #8]
   d8368:	684b      	ldr	r3, [r1, #4]
   d836a:	9303      	str	r3, [sp, #12]
   d836c:	68cb      	ldr	r3, [r1, #12]
   d836e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d8370:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d8372:	7a0b      	ldrb	r3, [r1, #8]
   d8374:	9305      	str	r3, [sp, #20]
   d8376:	a901      	add	r1, sp, #4
   d8378:	f7ff f800 	bl	d737c <hal_i2c_request_ex>
}
   d837c:	b007      	add	sp, #28
   d837e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8382 <_ZN7TwoWire11requestFromEhjh>:
{
   d8382:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d8384:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d8386:	f88d 1000 	strb.w	r1, [sp]
   d838a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d838e:	9103      	str	r1, [sp, #12]
   d8390:	bf18      	it	ne
   d8392:	2301      	movne	r3, #1
   d8394:	4669      	mov	r1, sp
    size_ = size;
   d8396:	9201      	str	r2, [sp, #4]
   d8398:	f88d 3008 	strb.w	r3, [sp, #8]
   d839c:	f7ff ffda 	bl	d8354 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d83a0:	b005      	add	sp, #20
   d83a2:	f85d fb04 	ldr.w	pc, [sp], #4

000d83a6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d83a6:	7c00      	ldrb	r0, [r0, #16]
   d83a8:	2200      	movs	r2, #0
   d83aa:	f7fe bf8f 	b.w	d72cc <hal_i2c_begin_transmission>

000d83ae <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d83ae:	b2c9      	uxtb	r1, r1
   d83b0:	f7ff bff9 	b.w	d83a6 <_ZN7TwoWire17beginTransmissionEh>

000d83b4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d83b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d83b6:	2300      	movs	r3, #0
   d83b8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d83bc:	684a      	ldr	r2, [r1, #4]
   d83be:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d83c0:	2314      	movs	r3, #20
    };
   d83c2:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d83c4:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d83c8:	780b      	ldrb	r3, [r1, #0]
    };
   d83ca:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d83cc:	7a0a      	ldrb	r2, [r1, #8]
   d83ce:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d83d0:	7c00      	ldrb	r0, [r0, #16]
    };
   d83d2:	f88d 3008 	strb.w	r3, [sp, #8]
   d83d6:	aa01      	add	r2, sp, #4
   d83d8:	4619      	mov	r1, r3
   d83da:	f7fe ff77 	bl	d72cc <hal_i2c_begin_transmission>
}
   d83de:	b007      	add	sp, #28
   d83e0:	f85d fb04 	ldr.w	pc, [sp], #4

000d83e4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d83e4:	7c00      	ldrb	r0, [r0, #16]
   d83e6:	2200      	movs	r2, #0
   d83e8:	f7fe bf78 	b.w	d72dc <hal_i2c_end_transmission>

000d83ec <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d83ec:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d83ee:	2100      	movs	r1, #0
   d83f0:	7c00      	ldrb	r0, [r0, #16]
   d83f2:	f7fe ffb3 	bl	d735c <hal_i2c_lock>
}
   d83f6:	fab0 f080 	clz	r0, r0
   d83fa:	0940      	lsrs	r0, r0, #5
   d83fc:	bd08      	pop	{r3, pc}

000d83fe <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d83fe:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8400:	2100      	movs	r1, #0
   d8402:	7c00      	ldrb	r0, [r0, #16]
   d8404:	f7fe ffb2 	bl	d736c <hal_i2c_unlock>
}
   d8408:	fab0 f080 	clz	r0, r0
   d840c:	0940      	lsrs	r0, r0, #5
   d840e:	bd08      	pop	{r3, pc}

000d8410 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8410:	4700      	bx	r0
	...

000d8414 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8414:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8418:	2400      	movs	r4, #0
{
   d841a:	461d      	mov	r5, r3
   d841c:	460f      	mov	r7, r1
   d841e:	4690      	mov	r8, r2
   d8420:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8422:	f7fe ff3b 	bl	d729c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8426:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8428:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d842c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8430:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8434:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8438:	bfa2      	ittt	ge
   d843a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d843e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8442:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8444:	4907      	ldr	r1, [pc, #28]	; (d8464 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8446:	9400      	str	r4, [sp, #0]
   d8448:	4643      	mov	r3, r8
   d844a:	463a      	mov	r2, r7
   d844c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d844e:	bfa8      	it	ge
   d8450:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8454:	f7fe ff1a 	bl	d728c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d8458:	fab0 f080 	clz	r0, r0
   d845c:	0940      	lsrs	r0, r0, #5
   d845e:	b004      	add	sp, #16
   d8460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8464:	000d8411 	.word	0x000d8411

000d8468 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8468:	4770      	bx	lr

000d846a <_ZN9IPAddressD0Ev>:
   d846a:	b510      	push	{r4, lr}
   d846c:	2118      	movs	r1, #24
   d846e:	4604      	mov	r4, r0
   d8470:	f002 fa22 	bl	da8b8 <_ZdlPvj>
   d8474:	4620      	mov	r0, r4
   d8476:	bd10      	pop	{r4, pc}

000d8478 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8478:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d847a:	7d03      	ldrb	r3, [r0, #20]
   d847c:	2b06      	cmp	r3, #6
{
   d847e:	b08d      	sub	sp, #52	; 0x34
   d8480:	460e      	mov	r6, r1
   d8482:	f100 0704 	add.w	r7, r0, #4
   d8486:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d848a:	d012      	beq.n	d84b2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d848c:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d8490:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8494:	220a      	movs	r2, #10
   d8496:	4630      	mov	r0, r6
   d8498:	f001 fb52 	bl	d9b40 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d849c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d849e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d84a0:	d019      	beq.n	d84d6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d84a2:	2c00      	cmp	r4, #0
   d84a4:	d0f4      	beq.n	d8490 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d84a6:	212e      	movs	r1, #46	; 0x2e
   d84a8:	4630      	mov	r0, r6
   d84aa:	f001 fb3a 	bl	d9b22 <_ZN5Print5printEc>
   d84ae:	4404      	add	r4, r0
   d84b0:	e7ee      	b.n	d8490 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d84b2:	232f      	movs	r3, #47	; 0x2f
   d84b4:	466a      	mov	r2, sp
   d84b6:	4639      	mov	r1, r7
   d84b8:	200a      	movs	r0, #10
		buf[0] = 0;
   d84ba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d84be:	f7fe ff65 	bl	d738c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d84c2:	4668      	mov	r0, sp
   d84c4:	f002 ff4d 	bl	db362 <strlen>
   d84c8:	6833      	ldr	r3, [r6, #0]
   d84ca:	4602      	mov	r2, r0
   d84cc:	68db      	ldr	r3, [r3, #12]
   d84ce:	4669      	mov	r1, sp
   d84d0:	4630      	mov	r0, r6
   d84d2:	4798      	blx	r3
   d84d4:	4604      	mov	r4, r0
    }
    return n;
}
   d84d6:	4620      	mov	r0, r4
   d84d8:	b00d      	add	sp, #52	; 0x34
   d84da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d84dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d84dc:	b510      	push	{r4, lr}
   d84de:	4b05      	ldr	r3, [pc, #20]	; (d84f4 <_ZN9IPAddressC1Ev+0x18>)
   d84e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d84e2:	2211      	movs	r2, #17
   d84e4:	f840 3b04 	str.w	r3, [r0], #4
   d84e8:	2100      	movs	r1, #0
   d84ea:	f002 fe93 	bl	db214 <memset>
}
   d84ee:	4620      	mov	r0, r4
   d84f0:	bd10      	pop	{r4, pc}
   d84f2:	bf00      	nop
   d84f4:	000dc094 	.word	0x000dc094

000d84f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d84f8:	4603      	mov	r3, r0
   d84fa:	4a07      	ldr	r2, [pc, #28]	; (d8518 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d84fc:	b510      	push	{r4, lr}
   d84fe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8502:	f101 0210 	add.w	r2, r1, #16
   d8506:	f851 4b04 	ldr.w	r4, [r1], #4
   d850a:	f843 4b04 	str.w	r4, [r3], #4
   d850e:	4291      	cmp	r1, r2
   d8510:	d1f9      	bne.n	d8506 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8512:	780a      	ldrb	r2, [r1, #0]
   d8514:	701a      	strb	r2, [r3, #0]
}
   d8516:	bd10      	pop	{r4, pc}
   d8518:	000dc094 	.word	0x000dc094

000d851c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d851c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d851e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8522:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8526:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d852a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d852e:	2304      	movs	r3, #4
   d8530:	6041      	str	r1, [r0, #4]
   d8532:	7503      	strb	r3, [r0, #20]
}
   d8534:	bd10      	pop	{r4, pc}

000d8536 <_ZN9IPAddressaSEPKh>:
{
   d8536:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8538:	78cb      	ldrb	r3, [r1, #3]
   d853a:	9300      	str	r3, [sp, #0]
   d853c:	788b      	ldrb	r3, [r1, #2]
   d853e:	784a      	ldrb	r2, [r1, #1]
   d8540:	7809      	ldrb	r1, [r1, #0]
   d8542:	f7ff ffeb 	bl	d851c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8546:	b002      	add	sp, #8
   d8548:	bd10      	pop	{r4, pc}

000d854a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d854a:	f100 0310 	add.w	r3, r0, #16
   d854e:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8550:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d8554:	2901      	cmp	r1, #1
   d8556:	4618      	mov	r0, r3
   d8558:	d108      	bne.n	d856c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d855a:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d855e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d8562:	3a01      	subs	r2, #1
   d8564:	f103 0310 	add.w	r3, r3, #16
   d8568:	d1f2      	bne.n	d8550 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d856a:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d856c:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d856e:	bf04      	itt	eq
   d8570:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d8574:	1852      	addeq	r2, r2, r1
   d8576:	e7f4      	b.n	d8562 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d8578 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d8578:	b40e      	push	{r1, r2, r3}
   d857a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d857c:	b088      	sub	sp, #32
   d857e:	af00      	add	r7, sp, #0
   d8580:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8584:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d8586:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d858a:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d858c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d858e:	462b      	mov	r3, r5
   d8590:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d8592:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8594:	f7ff f944 	bl	d7820 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d8598:	280f      	cmp	r0, #15
   d859a:	687a      	ldr	r2, [r7, #4]
   d859c:	d91a      	bls.n	d85d4 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d859e:	f100 0308 	add.w	r3, r0, #8
   d85a2:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d85a6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d85a8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d85ac:	1c41      	adds	r1, r0, #1
   d85ae:	462b      	mov	r3, r5
   d85b0:	4668      	mov	r0, sp
        va_start(args, fmt);
   d85b2:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d85b4:	f7ff f934 	bl	d7820 <vsnprintf>
        if (n > 0) {
   d85b8:	1e02      	subs	r2, r0, #0
   d85ba:	dd04      	ble.n	d85c6 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d85bc:	6823      	ldr	r3, [r4, #0]
   d85be:	4669      	mov	r1, sp
   d85c0:	689b      	ldr	r3, [r3, #8]
   d85c2:	4620      	mov	r0, r4
   d85c4:	4798      	blx	r3
   d85c6:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d85c8:	3720      	adds	r7, #32
   d85ca:	46bd      	mov	sp, r7
   d85cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d85d0:	b003      	add	sp, #12
   d85d2:	4770      	bx	lr
    } else if (n > 0) {
   d85d4:	2800      	cmp	r0, #0
   d85d6:	d0f7      	beq.n	d85c8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d85d8:	6823      	ldr	r3, [r4, #0]
   d85da:	4602      	mov	r2, r0
   d85dc:	689b      	ldr	r3, [r3, #8]
   d85de:	f107 0110 	add.w	r1, r7, #16
   d85e2:	4620      	mov	r0, r4
   d85e4:	4798      	blx	r3
}
   d85e6:	e7ef      	b.n	d85c8 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d85e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d85e8:	b510      	push	{r4, lr}
          _M_dispose();
   d85ea:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d85ec:	4604      	mov	r4, r0
          _M_dispose();
   d85ee:	689b      	ldr	r3, [r3, #8]
   d85f0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d85f2:	68a3      	ldr	r3, [r4, #8]
   d85f4:	3b01      	subs	r3, #1
   d85f6:	60a3      	str	r3, [r4, #8]
   d85f8:	b92b      	cbnz	r3, d8606 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d85fa:	6823      	ldr	r3, [r4, #0]
   d85fc:	4620      	mov	r0, r4
   d85fe:	68db      	ldr	r3, [r3, #12]
    }
   d8600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8604:	4718      	bx	r3
    }
   d8606:	bd10      	pop	{r4, pc}

000d8608 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8608:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d860a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d860c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8610:	689b      	ldr	r3, [r3, #8]
   d8612:	2201      	movs	r2, #1
   d8614:	f10d 0107 	add.w	r1, sp, #7
   d8618:	4798      	blx	r3
}
   d861a:	b003      	add	sp, #12
   d861c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8620 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d8620:	b538      	push	{r3, r4, r5, lr}
   d8622:	680b      	ldr	r3, [r1, #0]
   d8624:	6003      	str	r3, [r0, #0]
   d8626:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d8628:	6843      	ldr	r3, [r0, #4]
   d862a:	429d      	cmp	r5, r3
    class __shared_ptr
   d862c:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d862e:	d00c      	beq.n	d864a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d8630:	b115      	cbz	r5, d8638 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d8632:	686b      	ldr	r3, [r5, #4]
   d8634:	3301      	adds	r3, #1
   d8636:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d8638:	6860      	ldr	r0, [r4, #4]
   d863a:	b128      	cbz	r0, d8648 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d863c:	6843      	ldr	r3, [r0, #4]
   d863e:	3b01      	subs	r3, #1
   d8640:	6043      	str	r3, [r0, #4]
   d8642:	b90b      	cbnz	r3, d8648 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d8644:	f7ff ffd0 	bl	d85e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d8648:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d864a:	4620      	mov	r0, r4
   d864c:	bd38      	pop	{r3, r4, r5, pc}

000d864e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d864e:	460b      	mov	r3, r1
   d8650:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d8652:	2200      	movs	r2, #0
   d8654:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d8656:	e9c0 2200 	strd	r2, r2, [r0]
   d865a:	4604      	mov	r4, r0
        t_ = t;
   d865c:	6083      	str	r3, [r0, #8]
    if (t) {
   d865e:	b90b      	cbnz	r3, d8664 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d8660:	4620      	mov	r0, r4
   d8662:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   d8664:	f7ff ffdc 	bl	d8620 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d8668:	e7fa      	b.n	d8660 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d866a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d866a:	6883      	ldr	r3, [r0, #8]
   d866c:	b1eb      	cbz	r3, d86aa <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d866e:	781a      	ldrb	r2, [r3, #0]
   d8670:	2a03      	cmp	r2, #3
   d8672:	d81a      	bhi.n	d86aa <_ZNK5spark9JSONValue4typeEv+0x40>
   d8674:	e8df f002 	tbb	[pc, r2]
   d8678:	1b021704 	.word	0x1b021704
   d867c:	2005      	movs	r0, #5
   d867e:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d8680:	6802      	ldr	r2, [r0, #0]
   d8682:	685b      	ldr	r3, [r3, #4]
   d8684:	6852      	ldr	r2, [r2, #4]
   d8686:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8688:	282d      	cmp	r0, #45	; 0x2d
   d868a:	d012      	beq.n	d86b2 <_ZNK5spark9JSONValue4typeEv+0x48>
   d868c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8690:	2b09      	cmp	r3, #9
   d8692:	d90e      	bls.n	d86b2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8694:	2874      	cmp	r0, #116	; 0x74
   d8696:	d00e      	beq.n	d86b6 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8698:	2866      	cmp	r0, #102	; 0x66
   d869a:	d00c      	beq.n	d86b6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d869c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d86a0:	4258      	negs	r0, r3
   d86a2:	4158      	adcs	r0, r3
   d86a4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d86a6:	2006      	movs	r0, #6
   d86a8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d86aa:	2000      	movs	r0, #0
   d86ac:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d86ae:	2004      	movs	r0, #4
   d86b0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d86b2:	2003      	movs	r0, #3
   d86b4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d86b6:	2002      	movs	r0, #2
}
   d86b8:	4770      	bx	lr

000d86ba <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d86ba:	b510      	push	{r4, lr}
   d86bc:	4604      	mov	r4, r0
    switch (type()) {
   d86be:	f7ff ffd4 	bl	d866a <_ZNK5spark9JSONValue4typeEv>
   d86c2:	2802      	cmp	r0, #2
   d86c4:	d00e      	beq.n	d86e4 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d86c6:	1ec3      	subs	r3, r0, #3
   d86c8:	b2db      	uxtb	r3, r3
   d86ca:	2b01      	cmp	r3, #1
   d86cc:	d814      	bhi.n	d86f8 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d86ce:	6822      	ldr	r2, [r4, #0]
   d86d0:	68a3      	ldr	r3, [r4, #8]
   d86d2:	6850      	ldr	r0, [r2, #4]
   d86d4:	685b      	ldr	r3, [r3, #4]
}
   d86d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d86da:	220a      	movs	r2, #10
   d86dc:	2100      	movs	r1, #0
   d86de:	4418      	add	r0, r3
   d86e0:	f002 befa 	b.w	db4d8 <strtol>
        const char* const s = d_->json + t_->start;
   d86e4:	6822      	ldr	r2, [r4, #0]
   d86e6:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d86e8:	6852      	ldr	r2, [r2, #4]
   d86ea:	685b      	ldr	r3, [r3, #4]
   d86ec:	5cd0      	ldrb	r0, [r2, r3]
   d86ee:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d86f2:	4258      	negs	r0, r3
   d86f4:	4158      	adcs	r0, r3
}
   d86f6:	bd10      	pop	{r4, pc}
    switch (type()) {
   d86f8:	2000      	movs	r0, #0
   d86fa:	e7fc      	b.n	d86f6 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d86fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d86fc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d86fe:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d8700:	e9c0 3300 	strd	r3, r3, [r0]
   d8704:	4604      	mov	r4, r0
        n_(0) {
   d8706:	480e      	ldr	r0, [pc, #56]	; (d8740 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d8708:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d870c:	b1a9      	cbz	r1, d873a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d870e:	780b      	ldrb	r3, [r1, #0]
   d8710:	2b03      	cmp	r3, #3
   d8712:	d006      	beq.n	d8722 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8714:	b98b      	cbnz	r3, d873a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d8716:	6813      	ldr	r3, [r2, #0]
   d8718:	6858      	ldr	r0, [r3, #4]
   d871a:	684b      	ldr	r3, [r1, #4]
   d871c:	5cc3      	ldrb	r3, [r0, r3]
   d871e:	2b6e      	cmp	r3, #110	; 0x6e
   d8720:	d007      	beq.n	d8732 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d8722:	6813      	ldr	r3, [r2, #0]
   d8724:	684d      	ldr	r5, [r1, #4]
   d8726:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d8728:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d872a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d872c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d872e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d8730:	60e3      	str	r3, [r4, #12]
   d8732:	4611      	mov	r1, r2
   d8734:	4620      	mov	r0, r4
   d8736:	f7ff ff73 	bl	d8620 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d873a:	4620      	mov	r0, r4
   d873c:	bd38      	pop	{r3, r4, r5, pc}
   d873e:	bf00      	nop
   d8740:	000dc0fd 	.word	0x000dc0fd

000d8744 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8744:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d8746:	2500      	movs	r5, #0
   d8748:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d874a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d874e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d8752:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8756:	4604      	mov	r4, r0
   d8758:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d875a:	b14b      	cbz	r3, d8770 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d875c:	781a      	ldrb	r2, [r3, #0]
   d875e:	2a01      	cmp	r2, #1
   d8760:	d106      	bne.n	d8770 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d8762:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d8766:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d8768:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d876a:	6143      	str	r3, [r0, #20]
   d876c:	f7ff ff58 	bl	d8620 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d8770:	4620      	mov	r0, r4
   d8772:	bd38      	pop	{r3, r4, r5, pc}

000d8774 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d8774:	b510      	push	{r4, lr}
    if (!n_) {
   d8776:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d8778:	4604      	mov	r4, r0
    if (!n_) {
   d877a:	b163      	cbz	r3, d8796 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d877c:	6880      	ldr	r0, [r0, #8]
   d877e:	60e0      	str	r0, [r4, #12]
    --n_;
   d8780:	3b01      	subs	r3, #1
    ++t_;
   d8782:	3010      	adds	r0, #16
   d8784:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8786:	6120      	str	r0, [r4, #16]
    --n_;
   d8788:	6163      	str	r3, [r4, #20]
    if (n_) {
   d878a:	b113      	cbz	r3, d8792 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d878c:	f7ff fedd 	bl	d854a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8790:	60a0      	str	r0, [r4, #8]
    return true;
   d8792:	2001      	movs	r0, #1
   d8794:	e000      	b.n	d8798 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d8796:	4618      	mov	r0, r3
}
   d8798:	bd10      	pop	{r4, pc}

000d879a <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d879a:	b510      	push	{r4, lr}
    write('}');
   d879c:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d879e:	4604      	mov	r4, r0
    write('}');
   d87a0:	f7ff ff32 	bl	d8608 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d87a4:	2301      	movs	r3, #1
   d87a6:	7123      	strb	r3, [r4, #4]
}
   d87a8:	4620      	mov	r0, r4
   d87aa:	bd10      	pop	{r4, pc}

000d87ac <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d87ac:	b508      	push	{r3, lr}
    switch (state_) {
   d87ae:	7903      	ldrb	r3, [r0, #4]
   d87b0:	2b01      	cmp	r3, #1
   d87b2:	d002      	beq.n	d87ba <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d87b4:	2b02      	cmp	r3, #2
   d87b6:	d004      	beq.n	d87c2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d87b8:	bd08      	pop	{r3, pc}
        write(',');
   d87ba:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d87bc:	f7ff ff24 	bl	d8608 <_ZN5spark10JSONWriter5writeEc>
}
   d87c0:	e7fa      	b.n	d87b8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d87c2:	213a      	movs	r1, #58	; 0x3a
   d87c4:	e7fa      	b.n	d87bc <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d87c6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d87c6:	b510      	push	{r4, lr}
   d87c8:	4604      	mov	r4, r0
    writeSeparator();
   d87ca:	f7ff ffef 	bl	d87ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d87ce:	4620      	mov	r0, r4
   d87d0:	217b      	movs	r1, #123	; 0x7b
   d87d2:	f7ff ff19 	bl	d8608 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d87d6:	2300      	movs	r3, #0
   d87d8:	7123      	strb	r3, [r4, #4]
}
   d87da:	4620      	mov	r0, r4
   d87dc:	bd10      	pop	{r4, pc}
	...

000d87e0 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d87e0:	b513      	push	{r0, r1, r4, lr}
   d87e2:	4604      	mov	r4, r0
   d87e4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d87e6:	f7ff ffe1 	bl	d87ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d87ea:	6823      	ldr	r3, [r4, #0]
   d87ec:	9a01      	ldr	r2, [sp, #4]
   d87ee:	68db      	ldr	r3, [r3, #12]
   d87f0:	4903      	ldr	r1, [pc, #12]	; (d8800 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d87f2:	4620      	mov	r0, r4
   d87f4:	4798      	blx	r3
    state_ = NEXT;
   d87f6:	2301      	movs	r3, #1
}
   d87f8:	4620      	mov	r0, r4
    state_ = NEXT;
   d87fa:	7123      	strb	r3, [r4, #4]
}
   d87fc:	b002      	add	sp, #8
   d87fe:	bd10      	pop	{r4, pc}
   d8800:	000dbb43 	.word	0x000dbb43

000d8804 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8804:	b513      	push	{r0, r1, r4, lr}
   d8806:	4604      	mov	r4, r0
   d8808:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d880a:	f7ff ffcf 	bl	d87ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d880e:	6823      	ldr	r3, [r4, #0]
   d8810:	9a01      	ldr	r2, [sp, #4]
   d8812:	68db      	ldr	r3, [r3, #12]
   d8814:	4903      	ldr	r1, [pc, #12]	; (d8824 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8816:	4620      	mov	r0, r4
   d8818:	4798      	blx	r3
    state_ = NEXT;
   d881a:	2301      	movs	r3, #1
}
   d881c:	4620      	mov	r0, r4
    state_ = NEXT;
   d881e:	7123      	strb	r3, [r4, #4]
}
   d8820:	b002      	add	sp, #8
   d8822:	bd10      	pop	{r4, pc}
   d8824:	000dbce7 	.word	0x000dbce7

000d8828 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d882c:	460d      	mov	r5, r1
   d882e:	4617      	mov	r7, r2
    write('"');
   d8830:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8832:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d88d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8836:	4604      	mov	r4, r0
    const char* const end = str + size;
   d8838:	442f      	add	r7, r5
    write('"');
   d883a:	f7ff fee5 	bl	d8608 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d883e:	4629      	mov	r1, r5
    while (s != end) {
   d8840:	42bd      	cmp	r5, r7
   d8842:	462a      	mov	r2, r5
   d8844:	d038      	beq.n	d88b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d8846:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d884a:	2e22      	cmp	r6, #34	; 0x22
   d884c:	d003      	beq.n	d8856 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d884e:	2e5c      	cmp	r6, #92	; 0x5c
   d8850:	d001      	beq.n	d8856 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8852:	2e1f      	cmp	r6, #31
   d8854:	d8f4      	bhi.n	d8840 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d8856:	6823      	ldr	r3, [r4, #0]
   d8858:	1a52      	subs	r2, r2, r1
   d885a:	689b      	ldr	r3, [r3, #8]
   d885c:	4620      	mov	r0, r4
   d885e:	4798      	blx	r3
            write('\\');
   d8860:	215c      	movs	r1, #92	; 0x5c
   d8862:	4620      	mov	r0, r4
   d8864:	f7ff fed0 	bl	d8608 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8868:	2e0d      	cmp	r6, #13
   d886a:	d80a      	bhi.n	d8882 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d886c:	2e07      	cmp	r6, #7
   d886e:	d91c      	bls.n	d88aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8870:	f1a6 0308 	sub.w	r3, r6, #8
   d8874:	2b05      	cmp	r3, #5
   d8876:	d818      	bhi.n	d88aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8878:	e8df f003 	tbb	[pc, r3]
   d887c:	17110f0d 	.word	0x17110f0d
   d8880:	1513      	.short	0x1513
   d8882:	2e22      	cmp	r6, #34	; 0x22
   d8884:	d001      	beq.n	d888a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8886:	2e5c      	cmp	r6, #92	; 0x5c
   d8888:	d10f      	bne.n	d88aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d888a:	4631      	mov	r1, r6
                write('b');
   d888c:	4620      	mov	r0, r4
   d888e:	f7ff febb 	bl	d8608 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d8892:	4629      	mov	r1, r5
    while (s != end) {
   d8894:	e7d4      	b.n	d8840 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d8896:	2162      	movs	r1, #98	; 0x62
   d8898:	e7f8      	b.n	d888c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d889a:	2174      	movs	r1, #116	; 0x74
   d889c:	e7f6      	b.n	d888c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d889e:	216e      	movs	r1, #110	; 0x6e
   d88a0:	e7f4      	b.n	d888c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d88a2:	2166      	movs	r1, #102	; 0x66
   d88a4:	e7f2      	b.n	d888c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d88a6:	2172      	movs	r1, #114	; 0x72
   d88a8:	e7f0      	b.n	d888c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d88aa:	6823      	ldr	r3, [r4, #0]
   d88ac:	4632      	mov	r2, r6
   d88ae:	68db      	ldr	r3, [r3, #12]
   d88b0:	4641      	mov	r1, r8
   d88b2:	4620      	mov	r0, r4
   d88b4:	4798      	blx	r3
                break;
   d88b6:	e7ec      	b.n	d8892 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d88b8:	428d      	cmp	r5, r1
   d88ba:	d004      	beq.n	d88c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d88bc:	6823      	ldr	r3, [r4, #0]
   d88be:	1a6a      	subs	r2, r5, r1
   d88c0:	689b      	ldr	r3, [r3, #8]
   d88c2:	4620      	mov	r0, r4
   d88c4:	4798      	blx	r3
    }
    write('"');
   d88c6:	2122      	movs	r1, #34	; 0x22
   d88c8:	4620      	mov	r0, r4
   d88ca:	f7ff fe9d 	bl	d8608 <_ZN5spark10JSONWriter5writeEc>
}
   d88ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d88d2:	bf00      	nop
   d88d4:	000dc0a0 	.word	0x000dc0a0

000d88d8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d88d8:	b513      	push	{r0, r1, r4, lr}
   d88da:	4604      	mov	r4, r0
   d88dc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d88e0:	f7ff ff64 	bl	d87ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d88e4:	4620      	mov	r0, r4
   d88e6:	e9dd 2100 	ldrd	r2, r1, [sp]
   d88ea:	f7ff ff9d 	bl	d8828 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d88ee:	2302      	movs	r3, #2
}
   d88f0:	4620      	mov	r0, r4
    state_ = VALUE;
   d88f2:	7123      	strb	r3, [r4, #4]
}
   d88f4:	b002      	add	sp, #8
   d88f6:	bd10      	pop	{r4, pc}

000d88f8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d88f8:	b513      	push	{r0, r1, r4, lr}
   d88fa:	4604      	mov	r4, r0
   d88fc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8900:	f7ff ff54 	bl	d87ac <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8904:	4620      	mov	r0, r4
   d8906:	e9dd 2100 	ldrd	r2, r1, [sp]
   d890a:	f7ff ff8d 	bl	d8828 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d890e:	2301      	movs	r3, #1
}
   d8910:	4620      	mov	r0, r4
    state_ = NEXT;
   d8912:	7123      	strb	r3, [r4, #4]
}
   d8914:	b002      	add	sp, #8
   d8916:	bd10      	pop	{r4, pc}

000d8918 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8918:	6880      	ldr	r0, [r0, #8]
   d891a:	6803      	ldr	r3, [r0, #0]
   d891c:	68db      	ldr	r3, [r3, #12]
   d891e:	4718      	bx	r3

000d8920 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d8920:	4770      	bx	lr

000d8922 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8922:	4608      	mov	r0, r1
   d8924:	b111      	cbz	r1, d892c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8926:	680b      	ldr	r3, [r1, #0]
   d8928:	685b      	ldr	r3, [r3, #4]
   d892a:	4718      	bx	r3
}
   d892c:	4770      	bx	lr

000d892e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d892e:	4770      	bx	lr

000d8930 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8930:	4770      	bx	lr

000d8932 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d8932:	4770      	bx	lr

000d8934 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d8934:	4770      	bx	lr

000d8936 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8936:	b538      	push	{r3, r4, r5, lr}
   d8938:	4604      	mov	r4, r0
   d893a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d893c:	6800      	ldr	r0, [r0, #0]
   d893e:	212e      	movs	r1, #46	; 0x2e
   d8940:	f002 fcd5 	bl	db2ee <strchrnul>
    size = s - category;
   d8944:	6823      	ldr	r3, [r4, #0]
   d8946:	1ac3      	subs	r3, r0, r3
   d8948:	602b      	str	r3, [r5, #0]
    if (size) {
   d894a:	b123      	cbz	r3, d8956 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d894c:	7803      	ldrb	r3, [r0, #0]
   d894e:	b103      	cbz	r3, d8952 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8950:	3001      	adds	r0, #1
   d8952:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8954:	6020      	str	r0, [r4, #0]
}
   d8956:	4618      	mov	r0, r3
   d8958:	bd38      	pop	{r3, r4, r5, pc}

000d895a <_ZN5spark16JSONStreamWriterD0Ev>:
   d895a:	b510      	push	{r4, lr}
   d895c:	210c      	movs	r1, #12
   d895e:	4604      	mov	r4, r0
   d8960:	f001 ffaa 	bl	da8b8 <_ZdlPvj>
   d8964:	4620      	mov	r0, r4
   d8966:	bd10      	pop	{r4, pc}

000d8968 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8968:	b510      	push	{r4, lr}
   d896a:	2104      	movs	r1, #4
   d896c:	4604      	mov	r4, r0
   d896e:	f001 ffa3 	bl	da8b8 <_ZdlPvj>
   d8972:	4620      	mov	r0, r4
   d8974:	bd10      	pop	{r4, pc}

000d8976 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8976:	b510      	push	{r4, lr}
   d8978:	2104      	movs	r1, #4
   d897a:	4604      	mov	r4, r0
   d897c:	f001 ff9c 	bl	da8b8 <_ZdlPvj>
   d8980:	4620      	mov	r0, r4
   d8982:	bd10      	pop	{r4, pc}

000d8984 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d8984:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8986:	f002 fcbc 	bl	db302 <strcmp>
}
   d898a:	fab0 f080 	clz	r0, r0
   d898e:	0940      	lsrs	r0, r0, #5
   d8990:	bd08      	pop	{r3, pc}

000d8992 <__tcf_1>:
   d8992:	4770      	bx	lr

000d8994 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8994:	b510      	push	{r4, lr}
   d8996:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8998:	f001 fda8 	bl	da4ec <_Z16_fetch_usbserialv>
   d899c:	4284      	cmp	r4, r0
   d899e:	d010      	beq.n	d89c2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d89a0:	f001 fd1c 	bl	da3dc <_Z22__fetch_global_Serial1v>
   d89a4:	4284      	cmp	r4, r0
   d89a6:	d105      	bne.n	d89b4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d89a8:	f001 fd18 	bl	da3dc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d89ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d89b0:	f001 bd11 	b.w	da3d6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d89b4:	b12c      	cbz	r4, d89c2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d89b6:	6823      	ldr	r3, [r4, #0]
   d89b8:	4620      	mov	r0, r4
   d89ba:	685b      	ldr	r3, [r3, #4]
}
   d89bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d89c0:	4718      	bx	r3
   d89c2:	bd10      	pop	{r4, pc}

000d89c4 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d89c4:	b513      	push	{r0, r1, r4, lr}
   d89c6:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d89c8:	4608      	mov	r0, r1
   d89ca:	9101      	str	r1, [sp, #4]
   d89cc:	f002 fcc9 	bl	db362 <strlen>
   d89d0:	9901      	ldr	r1, [sp, #4]
   d89d2:	4602      	mov	r2, r0
   d89d4:	4620      	mov	r0, r4
}
   d89d6:	b002      	add	sp, #8
   d89d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d89dc:	f7ff bf8c 	b.w	d88f8 <_ZN5spark10JSONWriter5valueEPKcj>

000d89e0 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d89e0:	b513      	push	{r0, r1, r4, lr}
   d89e2:	4604      	mov	r4, r0
    write(str, strlen(str));
   d89e4:	4608      	mov	r0, r1
   d89e6:	9101      	str	r1, [sp, #4]
   d89e8:	f002 fcbb 	bl	db362 <strlen>
   d89ec:	6823      	ldr	r3, [r4, #0]
   d89ee:	9901      	ldr	r1, [sp, #4]
   d89f0:	68db      	ldr	r3, [r3, #12]
   d89f2:	4602      	mov	r2, r0
   d89f4:	4620      	mov	r0, r4
}
   d89f6:	b002      	add	sp, #8
   d89f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d89fc:	4718      	bx	r3

000d89fe <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d89fe:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8a00:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d8a02:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8a06:	68db      	ldr	r3, [r3, #12]
   d8a08:	2201      	movs	r2, #1
   d8a0a:	f10d 0107 	add.w	r1, sp, #7
   d8a0e:	4798      	blx	r3
}
   d8a10:	b003      	add	sp, #12
   d8a12:	f85d fb04 	ldr.w	pc, [sp], #4

000d8a16 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8a16:	b40e      	push	{r1, r2, r3}
   d8a18:	b503      	push	{r0, r1, lr}
   d8a1a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d8a1c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8a1e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d8a22:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d8a24:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d8a26:	f001 f8a9 	bl	d9b7c <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d8a2a:	b002      	add	sp, #8
   d8a2c:	f85d eb04 	ldr.w	lr, [sp], #4
   d8a30:	b003      	add	sp, #12
   d8a32:	4770      	bx	lr

000d8a34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d8a38:	e9d0 9500 	ldrd	r9, r5, [r0]
   d8a3c:	f04f 0814 	mov.w	r8, #20
   d8a40:	fb08 f505 	mul.w	r5, r8, r5
   d8a44:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8a46:	10ab      	asrs	r3, r5, #2
   d8a48:	4d18      	ldr	r5, [pc, #96]	; (d8aac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8a4a:	4617      	mov	r7, r2
   d8a4c:	435d      	muls	r5, r3
   d8a4e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8a50:	2d00      	cmp	r5, #0
   d8a52:	dd23      	ble.n	d8a9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d8a54:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d8a56:	fb08 f006 	mul.w	r0, r8, r6
   d8a5a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8a5e:	463a      	mov	r2, r7
   d8a60:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d8a64:	5820      	ldr	r0, [r4, r0]
   d8a66:	9101      	str	r1, [sp, #4]
   d8a68:	455f      	cmp	r7, fp
   d8a6a:	bf28      	it	cs
   d8a6c:	465a      	movcs	r2, fp
   d8a6e:	f002 fc80 	bl	db372 <strncmp>
                if (cmp == 0) {
   d8a72:	9901      	ldr	r1, [sp, #4]
   d8a74:	2301      	movs	r3, #1
   d8a76:	b978      	cbnz	r0, d8a98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d8a78:	455f      	cmp	r7, fp
   d8a7a:	d103      	bne.n	d8a84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8a7c:	9a00      	ldr	r2, [sp, #0]
   d8a7e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8a80:	4635      	mov	r5, r6
   d8a82:	e7e5      	b.n	d8a50 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d8a84:	bf8c      	ite	hi
   d8a86:	2001      	movhi	r0, #1
   d8a88:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8a8a:	2800      	cmp	r0, #0
   d8a8c:	d0f8      	beq.n	d8a80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d8a8e:	1bae      	subs	r6, r5, r6
	      ++__first;
   d8a90:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d8a94:	3e01      	subs	r6, #1
   d8a96:	e7f3      	b.n	d8a80 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d8a98:	0fc0      	lsrs	r0, r0, #31
   d8a9a:	e7f6      	b.n	d8a8a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d8a9c:	eba4 0409 	sub.w	r4, r4, r9
}
   d8aa0:	4802      	ldr	r0, [pc, #8]	; (d8aac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8aa2:	10a4      	asrs	r4, r4, #2
   d8aa4:	4360      	muls	r0, r4
   d8aa6:	b003      	add	sp, #12
   d8aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8aac:	cccccccd 	.word	0xcccccccd

000d8ab0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d8ab2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d8ab4:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8ab6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d8ab8:	b30b      	cbz	r3, d8afe <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d8aba:	b301      	cbz	r1, d8afe <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d8abc:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d8abe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d8ac2:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d8ac4:	a903      	add	r1, sp, #12
   d8ac6:	a801      	add	r0, sp, #4
   d8ac8:	f7ff ff35 	bl	d8936 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8acc:	4601      	mov	r1, r0
   d8ace:	b1b0      	cbz	r0, d8afe <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d8ad0:	f10d 030b 	add.w	r3, sp, #11
   d8ad4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d8ad6:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d8ada:	4620      	mov	r0, r4
   d8adc:	f7ff ffaa 	bl	d8a34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8ae0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8ae4:	b15b      	cbz	r3, d8afe <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d8ae6:	6824      	ldr	r4, [r4, #0]
   d8ae8:	2314      	movs	r3, #20
   d8aea:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d8aee:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d8af2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d8af6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8af8:	bfa8      	it	ge
   d8afa:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d8afc:	e7e2      	b.n	d8ac4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d8afe:	4630      	mov	r0, r6
   d8b00:	b004      	add	sp, #16
   d8b02:	bd70      	pop	{r4, r5, r6, pc}

000d8b04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8b04:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8b06:	4c09      	ldr	r4, [pc, #36]	; (d8b2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8b08:	7823      	ldrb	r3, [r4, #0]
   d8b0a:	f3bf 8f5b 	dmb	ish
   d8b0e:	07db      	lsls	r3, r3, #31
   d8b10:	d409      	bmi.n	d8b26 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8b12:	4620      	mov	r0, r4
   d8b14:	f7fb fad0 	bl	d40b8 <__cxa_guard_acquire>
   d8b18:	b128      	cbz	r0, d8b26 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8b1a:	4620      	mov	r0, r4
   d8b1c:	f7fb fad1 	bl	d40c2 <__cxa_guard_release>
   d8b20:	4803      	ldr	r0, [pc, #12]	; (d8b30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d8b22:	f002 fb37 	bl	db194 <atexit>
}
   d8b26:	4803      	ldr	r0, [pc, #12]	; (d8b34 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d8b28:	bd10      	pop	{r4, pc}
   d8b2a:	bf00      	nop
   d8b2c:	2003e56c 	.word	0x2003e56c
   d8b30:	000d892f 	.word	0x000d892f
   d8b34:	2003de1c 	.word	0x2003de1c

000d8b38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d8b38:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d8b3a:	4c09      	ldr	r4, [pc, #36]	; (d8b60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d8b3c:	7823      	ldrb	r3, [r4, #0]
   d8b3e:	f3bf 8f5b 	dmb	ish
   d8b42:	07db      	lsls	r3, r3, #31
   d8b44:	d409      	bmi.n	d8b5a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8b46:	4620      	mov	r0, r4
   d8b48:	f7fb fab6 	bl	d40b8 <__cxa_guard_acquire>
   d8b4c:	b128      	cbz	r0, d8b5a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8b4e:	4620      	mov	r0, r4
   d8b50:	f7fb fab7 	bl	d40c2 <__cxa_guard_release>
   d8b54:	4803      	ldr	r0, [pc, #12]	; (d8b64 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8b56:	f002 fb1d 	bl	db194 <atexit>
    return &factory;
}
   d8b5a:	4803      	ldr	r0, [pc, #12]	; (d8b68 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8b5c:	bd10      	pop	{r4, pc}
   d8b5e:	bf00      	nop
   d8b60:	2003e570 	.word	0x2003e570
   d8b64:	000d8993 	.word	0x000d8993
   d8b68:	2003de20 	.word	0x2003de20

000d8b6c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8b6c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d8b6e:	2500      	movs	r5, #0
   d8b70:	4604      	mov	r4, r0
   d8b72:	e9c0 5500 	strd	r5, r5, [r0]
   d8b76:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8b7a:	6085      	str	r5, [r0, #8]
   d8b7c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d8b7e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d8b82:	f7fe fb03 	bl	d718c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d8b86:	f7ff ffbd 	bl	d8b04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d8b8a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8b8c:	f7ff ffd4 	bl	d8b38 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d8b90:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8b92:	6220      	str	r0, [r4, #32]
}
   d8b94:	4620      	mov	r0, r4
   d8b96:	bd38      	pop	{r3, r4, r5, pc}

000d8b98 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d8b98:	b510      	push	{r4, lr}
    static LogManager mgr;
   d8b9a:	4c0a      	ldr	r4, [pc, #40]	; (d8bc4 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d8b9c:	7823      	ldrb	r3, [r4, #0]
   d8b9e:	f3bf 8f5b 	dmb	ish
   d8ba2:	07db      	lsls	r3, r3, #31
   d8ba4:	d40c      	bmi.n	d8bc0 <_ZN5spark10LogManager8instanceEv+0x28>
   d8ba6:	4620      	mov	r0, r4
   d8ba8:	f7fb fa86 	bl	d40b8 <__cxa_guard_acquire>
   d8bac:	b140      	cbz	r0, d8bc0 <_ZN5spark10LogManager8instanceEv+0x28>
   d8bae:	4806      	ldr	r0, [pc, #24]	; (d8bc8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8bb0:	f7ff ffdc 	bl	d8b6c <_ZN5spark10LogManagerC1Ev>
   d8bb4:	4620      	mov	r0, r4
   d8bb6:	f7fb fa84 	bl	d40c2 <__cxa_guard_release>
   d8bba:	4804      	ldr	r0, [pc, #16]	; (d8bcc <_ZN5spark10LogManager8instanceEv+0x34>)
   d8bbc:	f002 faea 	bl	db194 <atexit>
    return &mgr;
}
   d8bc0:	4801      	ldr	r0, [pc, #4]	; (d8bc8 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8bc2:	bd10      	pop	{r4, pc}
   d8bc4:	2003e568 	.word	0x2003e568
   d8bc8:	2003e578 	.word	0x2003e578
   d8bcc:	000d9001 	.word	0x000d9001

000d8bd0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d8bd0:	4a02      	ldr	r2, [pc, #8]	; (d8bdc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d8bd2:	4903      	ldr	r1, [pc, #12]	; (d8be0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d8bd4:	4803      	ldr	r0, [pc, #12]	; (d8be4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8bd6:	2300      	movs	r3, #0
   d8bd8:	f7fe bce8 	b.w	d75ac <log_set_callbacks>
   d8bdc:	000d8e89 	.word	0x000d8e89
   d8be0:	000d8e15 	.word	0x000d8e15
   d8be4:	000d8d95 	.word	0x000d8d95

000d8be8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8be8:	2300      	movs	r3, #0
   d8bea:	461a      	mov	r2, r3
   d8bec:	4619      	mov	r1, r3
   d8bee:	4618      	mov	r0, r3
   d8bf0:	f7fe bcdc 	b.w	d75ac <log_set_callbacks>

000d8bf4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d8bf4:	b570      	push	{r4, r5, r6, lr}
   d8bf6:	b08a      	sub	sp, #40	; 0x28
   d8bf8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d8bfa:	4601      	mov	r1, r0
   d8bfc:	a804      	add	r0, sp, #16
   d8bfe:	f7fc fee8 	bl	d59d2 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d8c02:	4e14      	ldr	r6, [pc, #80]	; (d8c54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d8c04:	a804      	add	r0, sp, #16
   d8c06:	f7ff fdb5 	bl	d8774 <_ZN5spark18JSONObjectIterator4nextEv>
   d8c0a:	b1e8      	cbz	r0, d8c48 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d8c0c:	a904      	add	r1, sp, #16
   d8c0e:	4668      	mov	r0, sp
   d8c10:	f7fc fef0 	bl	d59f4 <_ZNK5spark18JSONObjectIterator4nameEv>
   d8c14:	9802      	ldr	r0, [sp, #8]
   d8c16:	4631      	mov	r1, r6
   d8c18:	f7ff feb4 	bl	d8984 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d8c1c:	4604      	mov	r4, r0
   d8c1e:	b110      	cbz	r0, d8c26 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d8c20:	1e2c      	subs	r4, r5, #0
   d8c22:	bf18      	it	ne
   d8c24:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   d8c26:	a801      	add	r0, sp, #4
   d8c28:	f7fb fe80 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c2c:	2c00      	cmp	r4, #0
   d8c2e:	d0e9      	beq.n	d8c04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d8c30:	a904      	add	r1, sp, #16
   d8c32:	4668      	mov	r0, sp
   d8c34:	f7fc feef 	bl	d5a16 <_ZNK5spark18JSONObjectIterator5valueEv>
   d8c38:	4668      	mov	r0, sp
   d8c3a:	f7ff fd3e 	bl	d86ba <_ZNK5spark9JSONValue5toIntEv>
   d8c3e:	6028      	str	r0, [r5, #0]
   d8c40:	a801      	add	r0, sp, #4
   d8c42:	f7fb fe73 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8c46:	e7dd      	b.n	d8c04 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d8c48:	a805      	add	r0, sp, #20
   d8c4a:	f7fb fe6f 	bl	d492c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8c4e:	b00a      	add	sp, #40	; 0x28
   d8c50:	bd70      	pop	{r4, r5, r6, pc}
   d8c52:	bf00      	nop
   d8c54:	000dc0a6 	.word	0x000dc0a6

000d8c58 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8c5a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d8c5c:	4620      	mov	r0, r4
   d8c5e:	4912      	ldr	r1, [pc, #72]	; (d8ca8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8c60:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d8c62:	f002 fb4e 	bl	db302 <strcmp>
   d8c66:	b948      	cbnz	r0, d8c7c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d8c68:	f001 fc40 	bl	da4ec <_Z16_fetch_usbserialv>
   d8c6c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8c70:	f001 fc2c 	bl	da4cc <_ZN9USBSerial5beginEl>
        return &Serial;
   d8c74:	f001 fc3a 	bl	da4ec <_Z16_fetch_usbserialv>
}
   d8c78:	b003      	add	sp, #12
   d8c7a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d8c7c:	490b      	ldr	r1, [pc, #44]	; (d8cac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d8c7e:	4620      	mov	r0, r4
   d8c80:	f002 fb3f 	bl	db302 <strcmp>
   d8c84:	b970      	cbnz	r0, d8ca4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d8c86:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d8c8a:	a901      	add	r1, sp, #4
   d8c8c:	4628      	mov	r0, r5
        int baud = 9600;
   d8c8e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d8c90:	f7ff ffb0 	bl	d8bf4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d8c94:	f001 fba2 	bl	da3dc <_Z22__fetch_global_Serial1v>
   d8c98:	9901      	ldr	r1, [sp, #4]
   d8c9a:	f001 fb99 	bl	da3d0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d8c9e:	f001 fb9d 	bl	da3dc <_Z22__fetch_global_Serial1v>
   d8ca2:	e7e9      	b.n	d8c78 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d8ca4:	2000      	movs	r0, #0
   d8ca6:	e7e7      	b.n	d8c78 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d8ca8:	000dc0ab 	.word	0x000dc0ab
   d8cac:	000dc0b2 	.word	0x000dc0b2

000d8cb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8cb0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8cb2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d8cb6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8cb8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8cba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d8cbe:	42ae      	cmp	r6, r5
   d8cc0:	d005      	beq.n	d8cce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d8cc2:	f105 0008 	add.w	r0, r5, #8
   d8cc6:	f7ff fff3 	bl	d8cb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8cca:	3514      	adds	r5, #20
   d8ccc:	e7f7      	b.n	d8cbe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d8cce:	6820      	ldr	r0, [r4, #0]
   d8cd0:	f7fe fd86 	bl	d77e0 <free>
}
   d8cd4:	4620      	mov	r0, r4
   d8cd6:	bd70      	pop	{r4, r5, r6, pc}

000d8cd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8cd8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8cda:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8cde:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8ce0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d8ce4:	42ae      	cmp	r6, r5
   d8ce6:	d004      	beq.n	d8cf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8ce8:	4628      	mov	r0, r5
   d8cea:	f001 f853 	bl	d9d94 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d8cee:	3510      	adds	r5, #16
   d8cf0:	e7f8      	b.n	d8ce4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d8cf2:	6820      	ldr	r0, [r4, #0]
   d8cf4:	f7fe fd74 	bl	d77e0 <free>
}
   d8cf8:	4620      	mov	r0, r4
   d8cfa:	bd70      	pop	{r4, r5, r6, pc}

000d8cfc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d8cfc:	b510      	push	{r4, lr}
   d8cfe:	4604      	mov	r4, r0
   d8d00:	300c      	adds	r0, #12
   d8d02:	f7ff ffd5 	bl	d8cb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8d06:	4620      	mov	r0, r4
   d8d08:	f7ff ffe6 	bl	d8cd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d8d0c:	4620      	mov	r0, r4
   d8d0e:	bd10      	pop	{r4, pc}

000d8d10 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d8d10:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d8d12:	4b04      	ldr	r3, [pc, #16]	; (d8d24 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d8d14:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d8d16:	f840 3b04 	str.w	r3, [r0], #4
   d8d1a:	f7ff ffef 	bl	d8cfc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d8d1e:	4620      	mov	r0, r4
   d8d20:	bd10      	pop	{r4, pc}
   d8d22:	bf00      	nop
   d8d24:	000db8a4 	.word	0x000db8a4

000d8d28 <_ZN5spark16StreamLogHandlerD0Ev>:
   d8d28:	b510      	push	{r4, lr}
   d8d2a:	4604      	mov	r4, r0
   d8d2c:	f7ff fff0 	bl	d8d10 <_ZN5spark16StreamLogHandlerD1Ev>
   d8d30:	4620      	mov	r0, r4
   d8d32:	2124      	movs	r1, #36	; 0x24
   d8d34:	f001 fdc0 	bl	da8b8 <_ZdlPvj>
   d8d38:	4620      	mov	r0, r4
   d8d3a:	bd10      	pop	{r4, pc}

000d8d3c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d8d3c:	b510      	push	{r4, lr}
   d8d3e:	4b03      	ldr	r3, [pc, #12]	; (d8d4c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d8d40:	6003      	str	r3, [r0, #0]
   d8d42:	4604      	mov	r4, r0
   d8d44:	f7ff ffe4 	bl	d8d10 <_ZN5spark16StreamLogHandlerD1Ev>
   d8d48:	4620      	mov	r0, r4
   d8d4a:	bd10      	pop	{r4, pc}
   d8d4c:	000dc14c 	.word	0x000dc14c

000d8d50 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d8d50:	b510      	push	{r4, lr}
   d8d52:	4604      	mov	r4, r0
   d8d54:	f7ff fff2 	bl	d8d3c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8d58:	4620      	mov	r0, r4
   d8d5a:	2124      	movs	r1, #36	; 0x24
   d8d5c:	f001 fdac 	bl	da8b8 <_ZdlPvj>
   d8d60:	4620      	mov	r0, r4
   d8d62:	bd10      	pop	{r4, pc}

000d8d64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d8d64:	2200      	movs	r2, #0
   d8d66:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8d6a:	b510      	push	{r4, lr}
        capacity_(0) {
   d8d6c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8d6e:	680c      	ldr	r4, [r1, #0]
   d8d70:	6004      	str	r4, [r0, #0]
   d8d72:	684c      	ldr	r4, [r1, #4]
   d8d74:	6044      	str	r4, [r0, #4]
   d8d76:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d78:	600a      	str	r2, [r1, #0]
   d8d7a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8d7c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8d7e:	608a      	str	r2, [r1, #8]
}
   d8d80:	bd10      	pop	{r4, pc}

000d8d82 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d8d82:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8d84:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8d86:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8d88:	6818      	ldr	r0, [r3, #0]
   d8d8a:	f7fe fa17 	bl	d71bc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8d8e:	4620      	mov	r0, r4
   d8d90:	bd10      	pop	{r4, pc}
	...

000d8d94 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d98:	b087      	sub	sp, #28
   d8d9a:	4680      	mov	r8, r0
   d8d9c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d8d9e:	4b1c      	ldr	r3, [pc, #112]	; (d8e10 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d8da0:	685b      	ldr	r3, [r3, #4]
   d8da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8da6:	4689      	mov	r9, r1
   d8da8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8daa:	b96b      	cbnz	r3, d8dc8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d8dac:	f7ff fef4 	bl	d8b98 <_ZN5spark10LogManager8instanceEv>
   d8db0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8db2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d8db6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8db8:	9305      	str	r3, [sp, #20]
   d8dba:	f7fe f9f7 	bl	d71ac <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d8dbe:	7b23      	ldrb	r3, [r4, #12]
   d8dc0:	b12b      	cbz	r3, d8dce <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d8dc2:	a805      	add	r0, sp, #20
   d8dc4:	f7ff ffdd 	bl	d8d82 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d8dc8:	b007      	add	sp, #28
   d8dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8dce:	2301      	movs	r3, #1
   d8dd0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d8dd2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d8dd6:	fa5f f989 	uxtb.w	r9, r9
   d8dda:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8dde:	45aa      	cmp	sl, r5
   d8de0:	d012      	beq.n	d8e08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d8de2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d8de6:	4631      	mov	r1, r6
   d8de8:	1d38      	adds	r0, r7, #4
   d8dea:	f7ff fe61 	bl	d8ab0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8dee:	4581      	cmp	r9, r0
   d8df0:	d3f5      	bcc.n	d8dde <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d8df2:	683b      	ldr	r3, [r7, #0]
   d8df4:	9a03      	ldr	r2, [sp, #12]
   d8df6:	9200      	str	r2, [sp, #0]
   d8df8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d8dfc:	464a      	mov	r2, r9
   d8dfe:	4633      	mov	r3, r6
   d8e00:	4641      	mov	r1, r8
   d8e02:	4638      	mov	r0, r7
   d8e04:	47d8      	blx	fp
   d8e06:	e7ea      	b.n	d8dde <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d8e08:	2300      	movs	r3, #0
   d8e0a:	7323      	strb	r3, [r4, #12]
   d8e0c:	e7d9      	b.n	d8dc2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d8e0e:	bf00      	nop
   d8e10:	e000ed00 	.word	0xe000ed00

000d8e14 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d8e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e18:	469b      	mov	fp, r3
   d8e1a:	4b1a      	ldr	r3, [pc, #104]	; (d8e84 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d8e1c:	685b      	ldr	r3, [r3, #4]
   d8e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8e22:	4680      	mov	r8, r0
   d8e24:	4689      	mov	r9, r1
   d8e26:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d8e28:	b96b      	cbnz	r3, d8e46 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d8e2a:	f7ff feb5 	bl	d8b98 <_ZN5spark10LogManager8instanceEv>
   d8e2e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8e30:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d8e34:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8e36:	9301      	str	r3, [sp, #4]
   d8e38:	f7fe f9b8 	bl	d71ac <os_mutex_recursive_lock>
        if (that->isActive()) {
   d8e3c:	7b23      	ldrb	r3, [r4, #12]
   d8e3e:	b12b      	cbz	r3, d8e4c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d8e40:	a801      	add	r0, sp, #4
   d8e42:	f7ff ff9e 	bl	d8d82 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d8e46:	b003      	add	sp, #12
   d8e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d8e4c:	2301      	movs	r3, #1
   d8e4e:	7323      	strb	r3, [r4, #12]
   d8e50:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d8e54:	b2f6      	uxtb	r6, r6
   d8e56:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8e5a:	4555      	cmp	r5, sl
   d8e5c:	d00e      	beq.n	d8e7c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d8e5e:	f855 7b04 	ldr.w	r7, [r5], #4
   d8e62:	4659      	mov	r1, fp
   d8e64:	1d38      	adds	r0, r7, #4
   d8e66:	f7ff fe23 	bl	d8ab0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8e6a:	4286      	cmp	r6, r0
   d8e6c:	d3f5      	bcc.n	d8e5a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d8e6e:	683b      	ldr	r3, [r7, #0]
   d8e70:	464a      	mov	r2, r9
   d8e72:	68db      	ldr	r3, [r3, #12]
   d8e74:	4641      	mov	r1, r8
   d8e76:	4638      	mov	r0, r7
   d8e78:	4798      	blx	r3
   d8e7a:	e7ee      	b.n	d8e5a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d8e7c:	2300      	movs	r3, #0
   d8e7e:	7323      	strb	r3, [r4, #12]
   d8e80:	e7de      	b.n	d8e40 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d8e82:	bf00      	nop
   d8e84:	e000ed00 	.word	0xe000ed00

000d8e88 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8e8c:	4b16      	ldr	r3, [pc, #88]	; (d8ee8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d8e8e:	685b      	ldr	r3, [r3, #4]
   d8e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8e94:	4605      	mov	r5, r0
   d8e96:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d8e98:	bb1b      	cbnz	r3, d8ee2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d8e9a:	f7ff fe7d 	bl	d8b98 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d8e9e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d8ea2:	4604      	mov	r4, r0
   d8ea4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8ea6:	9301      	str	r3, [sp, #4]
   d8ea8:	f7fe f980 	bl	d71ac <os_mutex_recursive_lock>
   d8eac:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d8eb0:	2446      	movs	r4, #70	; 0x46
   d8eb2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8eb6:	45b0      	cmp	r8, r6
   d8eb8:	d109      	bne.n	d8ece <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d8eba:	a801      	add	r0, sp, #4
   d8ebc:	f7ff ff61 	bl	d8d82 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d8ec0:	42a5      	cmp	r5, r4
   d8ec2:	bfb4      	ite	lt
   d8ec4:	2000      	movlt	r0, #0
   d8ec6:	2001      	movge	r0, #1
}
   d8ec8:	b002      	add	sp, #8
   d8eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d8ece:	f856 0b04 	ldr.w	r0, [r6], #4
   d8ed2:	4639      	mov	r1, r7
   d8ed4:	3004      	adds	r0, #4
   d8ed6:	f7ff fdeb 	bl	d8ab0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d8eda:	4284      	cmp	r4, r0
   d8edc:	bfa8      	it	ge
   d8ede:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d8ee0:	e7e9      	b.n	d8eb6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d8ee2:	2000      	movs	r0, #0
   d8ee4:	e7f0      	b.n	d8ec8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d8ee6:	bf00      	nop
   d8ee8:	e000ed00 	.word	0xe000ed00

000d8eec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8eec:	b570      	push	{r4, r5, r6, lr}
   d8eee:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d8ef0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8ef4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d8ef6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d8efa:	4282      	cmp	r2, r0
   d8efc:	d007      	beq.n	d8f0e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d8efe:	4601      	mov	r1, r0
            if (*p == value) {
   d8f00:	681d      	ldr	r5, [r3, #0]
   d8f02:	f851 6b04 	ldr.w	r6, [r1], #4
   d8f06:	42ae      	cmp	r6, r5
   d8f08:	d003      	beq.n	d8f12 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d8f0a:	4608      	mov	r0, r1
   d8f0c:	e7f5      	b.n	d8efa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d8f0e:	2000      	movs	r0, #0
}
   d8f10:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8f12:	1a52      	subs	r2, r2, r1
   d8f14:	f002 f964 	bl	db1e0 <memmove>
    --size_;
   d8f18:	6863      	ldr	r3, [r4, #4]
   d8f1a:	3b01      	subs	r3, #1
   d8f1c:	6063      	str	r3, [r4, #4]
    return true;
   d8f1e:	2001      	movs	r0, #1
   d8f20:	e7f6      	b.n	d8f10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d8f22 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d8f22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d8f24:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d8f28:	4604      	mov	r4, r0
   d8f2a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d8f2c:	9101      	str	r1, [sp, #4]
   d8f2e:	9303      	str	r3, [sp, #12]
   d8f30:	f7fe f93c 	bl	d71ac <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d8f34:	a901      	add	r1, sp, #4
   d8f36:	4620      	mov	r0, r4
   d8f38:	f7ff ffd8 	bl	d8eec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d8f3c:	b118      	cbz	r0, d8f46 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d8f3e:	6863      	ldr	r3, [r4, #4]
   d8f40:	b90b      	cbnz	r3, d8f46 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d8f42:	f7ff fe51 	bl	d8be8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d8f46:	a803      	add	r0, sp, #12
   d8f48:	f7ff ff1b 	bl	d8d82 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d8f4c:	b004      	add	sp, #16
   d8f4e:	bd10      	pop	{r4, pc}

000d8f50 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d8f50:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d8f52:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d8f56:	2318      	movs	r3, #24
   d8f58:	4604      	mov	r4, r0
   d8f5a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d8f5e:	42ae      	cmp	r6, r5
   d8f60:	d015      	beq.n	d8f8e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d8f62:	f105 0110 	add.w	r1, r5, #16
   d8f66:	4620      	mov	r0, r4
   d8f68:	f7ff ffc0 	bl	d8eec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d8f6c:	6863      	ldr	r3, [r4, #4]
   d8f6e:	b90b      	cbnz	r3, d8f74 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d8f70:	f7ff fe3a 	bl	d8be8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d8f74:	69e0      	ldr	r0, [r4, #28]
   d8f76:	6929      	ldr	r1, [r5, #16]
   d8f78:	6803      	ldr	r3, [r0, #0]
   d8f7a:	68db      	ldr	r3, [r3, #12]
   d8f7c:	4798      	blx	r3
        if (h.stream) {
   d8f7e:	6969      	ldr	r1, [r5, #20]
   d8f80:	b119      	cbz	r1, d8f8a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d8f82:	6a20      	ldr	r0, [r4, #32]
   d8f84:	6803      	ldr	r3, [r0, #0]
   d8f86:	68db      	ldr	r3, [r3, #12]
   d8f88:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d8f8a:	3518      	adds	r5, #24
   d8f8c:	e7e7      	b.n	d8f5e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d8f8e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d8f92:	2618      	movs	r6, #24
   d8f94:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d8f98:	42ae      	cmp	r6, r5
   d8f9a:	d004      	beq.n	d8fa6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d8f9c:	4628      	mov	r0, r5
   d8f9e:	f000 fef9 	bl	d9d94 <_ZN6StringD1Ev>
   d8fa2:	3518      	adds	r5, #24
   d8fa4:	e7f8      	b.n	d8f98 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d8fa6:	2300      	movs	r3, #0
   d8fa8:	6163      	str	r3, [r4, #20]
}
   d8faa:	bd70      	pop	{r4, r5, r6, pc}

000d8fac <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d8fac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8fae:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d8fb0:	f7ff fe1a 	bl	d8be8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d8fb4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d8fb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d8fba:	9301      	str	r3, [sp, #4]
   d8fbc:	f7fe f8f6 	bl	d71ac <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d8fc0:	4620      	mov	r0, r4
   d8fc2:	f7ff ffc5 	bl	d8f50 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d8fc6:	a801      	add	r0, sp, #4
   d8fc8:	f7ff fedb 	bl	d8d82 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d8fcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d8fce:	b108      	cbz	r0, d8fd4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d8fd0:	f7fe f8e4 	bl	d719c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d8fd4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d8fd8:	2618      	movs	r6, #24
   d8fda:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d8fde:	42ae      	cmp	r6, r5
   d8fe0:	d004      	beq.n	d8fec <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d8fe2:	4628      	mov	r0, r5
   d8fe4:	f000 fed6 	bl	d9d94 <_ZN6StringD1Ev>
   d8fe8:	3518      	adds	r5, #24
   d8fea:	e7f8      	b.n	d8fde <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d8fec:	6920      	ldr	r0, [r4, #16]
   d8fee:	f7fe fbf7 	bl	d77e0 <free>
   d8ff2:	6820      	ldr	r0, [r4, #0]
   d8ff4:	f7fe fbf4 	bl	d77e0 <free>
}
   d8ff8:	4620      	mov	r0, r4
   d8ffa:	b002      	add	sp, #8
   d8ffc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9000 <__tcf_2>:
    static LogManager mgr;
   d9000:	4801      	ldr	r0, [pc, #4]	; (d9008 <__tcf_2+0x8>)
   d9002:	f7ff bfd3 	b.w	d8fac <_ZN5spark10LogManagerD1Ev>
   d9006:	bf00      	nop
   d9008:	2003e578 	.word	0x2003e578

000d900c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d900c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d900e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9010:	4606      	mov	r6, r0
   d9012:	460c      	mov	r4, r1
   d9014:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9016:	d927      	bls.n	d9068 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9018:	4290      	cmp	r0, r2
   d901a:	d226      	bcs.n	d906a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d901c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9020:	1a6c      	subs	r4, r5, r1
   d9022:	f1a1 0714 	sub.w	r7, r1, #20
   d9026:	4404      	add	r4, r0
        capacity_(0) {
   d9028:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d902a:	42af      	cmp	r7, r5
   d902c:	d03d      	beq.n	d90aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d902e:	b1a4      	cbz	r4, d905a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9030:	682b      	ldr	r3, [r5, #0]
   d9032:	6023      	str	r3, [r4, #0]
   d9034:	88ab      	ldrh	r3, [r5, #4]
   d9036:	80a3      	strh	r3, [r4, #4]
   d9038:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d903c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d903e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9042:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9044:	68ab      	ldr	r3, [r5, #8]
   d9046:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9048:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d904a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d904c:	68ea      	ldr	r2, [r5, #12]
   d904e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9050:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9052:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9054:	692a      	ldr	r2, [r5, #16]
   d9056:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d9058:	612b      	str	r3, [r5, #16]
   d905a:	f105 0008 	add.w	r0, r5, #8
   d905e:	f7ff fe27 	bl	d8cb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d9062:	3d14      	subs	r5, #20
   d9064:	3c14      	subs	r4, #20
   d9066:	e7e0      	b.n	d902a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d9068:	d01f      	beq.n	d90aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d906a:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d906c:	42ac      	cmp	r4, r5
   d906e:	d01c      	beq.n	d90aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d9070:	b1a6      	cbz	r6, d909c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d9072:	6823      	ldr	r3, [r4, #0]
   d9074:	6033      	str	r3, [r6, #0]
   d9076:	88a3      	ldrh	r3, [r4, #4]
   d9078:	80b3      	strh	r3, [r6, #4]
   d907a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d907e:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d9080:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d9084:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9086:	68a3      	ldr	r3, [r4, #8]
   d9088:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d908a:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d908c:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d908e:	68e2      	ldr	r2, [r4, #12]
   d9090:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9092:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9094:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9096:	6922      	ldr	r2, [r4, #16]
   d9098:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d909a:	6123      	str	r3, [r4, #16]
   d909c:	f104 0008 	add.w	r0, r4, #8
   d90a0:	f7ff fe06 	bl	d8cb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d90a4:	3414      	adds	r4, #20
   d90a6:	3614      	adds	r6, #20
   d90a8:	e7e0      	b.n	d906c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d90aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d90ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d90ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d90ae:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d90b2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d90b4:	4604      	mov	r4, r0
   d90b6:	460e      	mov	r6, r1
   d90b8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d90ba:	db0d      	blt.n	d90d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d90bc:	3501      	adds	r5, #1
        if (n > 0) {
   d90be:	2d00      	cmp	r5, #0
   d90c0:	6800      	ldr	r0, [r0, #0]
   d90c2:	dd04      	ble.n	d90ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d90c4:	00a9      	lsls	r1, r5, #2
   d90c6:	f7fe fb93 	bl	d77f0 <realloc>
            if (!d) {
   d90ca:	b918      	cbnz	r0, d90d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d90cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d90ce:	f7fe fb87 	bl	d77e0 <free>
        T* d = nullptr;
   d90d2:	2000      	movs	r0, #0
        data_ = d;
   d90d4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d90d6:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d90d8:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d90da:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d90dc:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d90e0:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d90e2:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d90e6:	1d08      	adds	r0, r1, #4
   d90e8:	f002 f87a 	bl	db1e0 <memmove>
    new(p) T(std::move(value));
   d90ec:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d90f0:	6863      	ldr	r3, [r4, #4]
   d90f2:	3301      	adds	r3, #1
   d90f4:	6063      	str	r3, [r4, #4]
    return true;
   d90f6:	2001      	movs	r0, #1
   d90f8:	e7e8      	b.n	d90cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d90fa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d90fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d90fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9100:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9102:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9104:	9301      	str	r3, [sp, #4]
   d9106:	460d      	mov	r5, r1
   d9108:	f7fe f850 	bl	d71ac <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d910c:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9110:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9114:	4283      	cmp	r3, r0
   d9116:	461a      	mov	r2, r3
   d9118:	d00b      	beq.n	d9132 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d911a:	6812      	ldr	r2, [r2, #0]
   d911c:	42aa      	cmp	r2, r5
   d911e:	f103 0304 	add.w	r3, r3, #4
   d9122:	d1f7      	bne.n	d9114 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9124:	a801      	add	r0, sp, #4
   d9126:	f7ff fe2c 	bl	d8d82 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d912a:	2500      	movs	r5, #0
}
   d912c:	4628      	mov	r0, r5
   d912e:	b003      	add	sp, #12
   d9130:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9132:	462a      	mov	r2, r5
   d9134:	4620      	mov	r0, r4
   d9136:	f7ff ffb9 	bl	d90ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d913a:	4605      	mov	r5, r0
   d913c:	2800      	cmp	r0, #0
   d913e:	d0f1      	beq.n	d9124 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9140:	6863      	ldr	r3, [r4, #4]
   d9142:	2b01      	cmp	r3, #1
   d9144:	d101      	bne.n	d914a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d9146:	f7ff fd43 	bl	d8bd0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d914a:	a801      	add	r0, sp, #4
   d914c:	f7ff fe19 	bl	d8d82 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d9150:	e7ec      	b.n	d912c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d9152 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d9152:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d9154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9156:	4604      	mov	r4, r0
   d9158:	460d      	mov	r5, r1
   d915a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d915c:	d914      	bls.n	d9188 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d915e:	4290      	cmp	r0, r2
   d9160:	d213      	bcs.n	d918a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d9162:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d9166:	1a75      	subs	r5, r6, r1
   d9168:	f1a1 0710 	sub.w	r7, r1, #16
   d916c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d916e:	42b7      	cmp	r7, r6
   d9170:	d018      	beq.n	d91a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d9172:	b11c      	cbz	r4, d917c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d9174:	4631      	mov	r1, r6
   d9176:	4620      	mov	r0, r4
   d9178:	f000 fe88 	bl	d9e8c <_ZN6StringC1EOS_>
                end->~T();
   d917c:	4630      	mov	r0, r6
   d917e:	f000 fe09 	bl	d9d94 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d9182:	3e10      	subs	r6, #16
   d9184:	3c10      	subs	r4, #16
   d9186:	e7f2      	b.n	d916e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d9188:	d00c      	beq.n	d91a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d918a:	42b5      	cmp	r5, r6
   d918c:	d00a      	beq.n	d91a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d918e:	b11c      	cbz	r4, d9198 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d9190:	4629      	mov	r1, r5
   d9192:	4620      	mov	r0, r4
   d9194:	f000 fe7a 	bl	d9e8c <_ZN6StringC1EOS_>
                p->~T();
   d9198:	4628      	mov	r0, r5
   d919a:	f000 fdfb 	bl	d9d94 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d919e:	3510      	adds	r5, #16
   d91a0:	3410      	adds	r4, #16
   d91a2:	e7f2      	b.n	d918a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d91a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d91a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d91a6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d91a8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d91aa:	4605      	mov	r5, r0
        if (n > 0) {
   d91ac:	dd11      	ble.n	d91d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d91ae:	0130      	lsls	r0, r6, #4
   d91b0:	f7fe fb0e 	bl	d77d0 <malloc>
            if (!d) {
   d91b4:	4604      	mov	r4, r0
   d91b6:	b158      	cbz	r0, d91d0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d91b8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d91bc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d91c0:	f7ff ffc7 	bl	d9152 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d91c4:	6828      	ldr	r0, [r5, #0]
   d91c6:	f7fe fb0b 	bl	d77e0 <free>
        data_ = d;
   d91ca:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d91cc:	60ae      	str	r6, [r5, #8]
        return true;
   d91ce:	2001      	movs	r0, #1
    }
   d91d0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d91d2:	2400      	movs	r4, #0
   d91d4:	e7f6      	b.n	d91c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d91d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d91d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d91da:	4691      	mov	r9, r2
   d91dc:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d91de:	2300      	movs	r3, #0
   d91e0:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d91e2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d91e6:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d91e8:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d91ea:	4299      	cmp	r1, r3
        capacity_(0) {
   d91ec:	e9c0 3300 	strd	r3, r3, [r0]
   d91f0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d91f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d91f8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d91fc:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d91fe:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9200:	dc23      	bgt.n	d924a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9202:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9206:	2314      	movs	r3, #20
   d9208:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d920c:	42af      	cmp	r7, r5
   d920e:	d03b      	beq.n	d9288 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9210:	4629      	mov	r1, r5
   d9212:	a80d      	add	r0, sp, #52	; 0x34
   d9214:	f000 fe3a 	bl	d9e8c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9218:	a90d      	add	r1, sp, #52	; 0x34
   d921a:	a811      	add	r0, sp, #68	; 0x44
   d921c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d921e:	f000 fe35 	bl	d9e8c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9222:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9226:	4299      	cmp	r1, r3
   d9228:	da1b      	bge.n	d9262 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d922a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d922c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d922e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9232:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d9236:	4631      	mov	r1, r6
   d9238:	f106 0010 	add.w	r0, r6, #16
   d923c:	f7ff ff89 	bl	d9152 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9240:	b9ee      	cbnz	r6, d927e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9244:	3301      	adds	r3, #1
   d9246:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d9248:	e011      	b.n	d926e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d924a:	a80a      	add	r0, sp, #40	; 0x28
   d924c:	f7ff ffab 	bl	d91a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d9250:	2800      	cmp	r0, #0
   d9252:	d1d6      	bne.n	d9202 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d9254:	a80a      	add	r0, sp, #40	; 0x28
   d9256:	f7ff fd3f 	bl	d8cd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d925a:	4620      	mov	r0, r4
   d925c:	b017      	add	sp, #92	; 0x5c
   d925e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9262:	3101      	adds	r1, #1
   d9264:	a80a      	add	r0, sp, #40	; 0x28
   d9266:	f7ff ff9e 	bl	d91a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d926a:	2800      	cmp	r0, #0
   d926c:	d1dd      	bne.n	d922a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d926e:	a811      	add	r0, sp, #68	; 0x44
   d9270:	f000 fd90 	bl	d9d94 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d9274:	a80d      	add	r0, sp, #52	; 0x34
   d9276:	f000 fd8d 	bl	d9d94 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d927a:	3514      	adds	r5, #20
   d927c:	e7c6      	b.n	d920c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d927e:	a911      	add	r1, sp, #68	; 0x44
   d9280:	4630      	mov	r0, r6
   d9282:	f000 fe03 	bl	d9e8c <_ZN6StringC1EOS_>
   d9286:	e7dc      	b.n	d9242 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d9288:	2600      	movs	r6, #0
   d928a:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d928e:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d9290:	4637      	mov	r7, r6
   d9292:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d9296:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d929a:	429e      	cmp	r6, r3
   d929c:	f280 8097 	bge.w	d93ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d92a0:	0133      	lsls	r3, r6, #4
   d92a2:	58d3      	ldr	r3, [r2, r3]
   d92a4:	9308      	str	r3, [sp, #32]
        if (!category) {
   d92a6:	b90b      	cbnz	r3, d92ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d92a8:	3601      	adds	r6, #1
   d92aa:	e7f4      	b.n	d9296 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d92ac:	fb0a f306 	mul.w	r3, sl, r6
   d92b0:	9709      	str	r7, [sp, #36]	; 0x24
   d92b2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d92b4:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d92b6:	a909      	add	r1, sp, #36	; 0x24
   d92b8:	a808      	add	r0, sp, #32
   d92ba:	f7ff fb3c 	bl	d8936 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d92be:	4683      	mov	fp, r0
   d92c0:	2800      	cmp	r0, #0
   d92c2:	d0f1      	beq.n	d92a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d92c4:	4601      	mov	r1, r0
   d92c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d92c8:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d92cc:	f10d 031f 	add.w	r3, sp, #31
   d92d0:	4628      	mov	r0, r5
   d92d2:	f7ff fbaf 	bl	d8a34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d92d6:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d92da:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d92dc:	f1b8 0f00 	cmp.w	r8, #0
   d92e0:	d166      	bne.n	d93b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d92e2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d92e6:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d92ea:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d92ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d92f2:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d92f6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d92fa:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d92fe:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d9302:	4293      	cmp	r3, r2
   d9304:	db1a      	blt.n	d933c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d9306:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d930a:	f1bb 0f00 	cmp.w	fp, #0
   d930e:	dd4a      	ble.n	d93a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d9310:	fb0a f00b 	mul.w	r0, sl, fp
   d9314:	f7fe fa5c 	bl	d77d0 <malloc>
            if (!d) {
   d9318:	9004      	str	r0, [sp, #16]
   d931a:	2800      	cmp	r0, #0
   d931c:	d045      	beq.n	d93aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d931e:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9322:	fb0a 1202 	mla	r2, sl, r2, r1
   d9326:	f7ff fe71 	bl	d900c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d932a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d932c:	6828      	ldr	r0, [r5, #0]
   d932e:	9304      	str	r3, [sp, #16]
   d9330:	f7fe fa56 	bl	d77e0 <free>
        data_ = d;
   d9334:	9b04      	ldr	r3, [sp, #16]
   d9336:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d9338:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d933c:	9b01      	ldr	r3, [sp, #4]
   d933e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d9342:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d9344:	fb0a f303 	mul.w	r3, sl, r3
   d9348:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d934c:	f101 0014 	add.w	r0, r1, #20
   d9350:	fb0a b202 	mla	r2, sl, r2, fp
   d9354:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d9356:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d9358:	f7ff fe58 	bl	d900c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d935c:	9904      	ldr	r1, [sp, #16]
   d935e:	b1a9      	cbz	r1, d938c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d9360:	9b05      	ldr	r3, [sp, #20]
   d9362:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9364:	f84b 2003 	str.w	r2, [fp, r3]
   d9368:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d936c:	808b      	strh	r3, [r1, #4]
   d936e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d9372:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d9374:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d9378:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d937a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d937c:	608b      	str	r3, [r1, #8]
   d937e:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d9380:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d9382:	60cb      	str	r3, [r1, #12]
   d9384:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d9386:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d9388:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d938a:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d938c:	686b      	ldr	r3, [r5, #4]
   d938e:	3301      	adds	r3, #1
   d9390:	606b      	str	r3, [r5, #4]
   d9392:	a813      	add	r0, sp, #76	; 0x4c
   d9394:	f7ff fc8c 	bl	d8cb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9398:	f1b8 0f00 	cmp.w	r8, #0
   d939c:	d008      	beq.n	d93b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d939e:	a80d      	add	r0, sp, #52	; 0x34
   d93a0:	f7ff fc86 	bl	d8cb0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d93a4:	e756      	b.n	d9254 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d93a6:	4643      	mov	r3, r8
   d93a8:	e7c0      	b.n	d932c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d93aa:	f04f 0801 	mov.w	r8, #1
   d93ae:	e7f0      	b.n	d9392 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d93b0:	9b01      	ldr	r3, [sp, #4]
   d93b2:	682d      	ldr	r5, [r5, #0]
   d93b4:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d93b8:	9b08      	ldr	r3, [sp, #32]
   d93ba:	781b      	ldrb	r3, [r3, #0]
   d93bc:	b92b      	cbnz	r3, d93ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d93be:	f8d9 3000 	ldr.w	r3, [r9]
   d93c2:	9a02      	ldr	r2, [sp, #8]
   d93c4:	4413      	add	r3, r2
   d93c6:	7c1b      	ldrb	r3, [r3, #16]
   d93c8:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d93ca:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d93cc:	e773      	b.n	d92b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93ce:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d93d0:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93d2:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d93d4:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93d6:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d93d8:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d93da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d93dc:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93de:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d93e0:	60a2      	str	r2, [r4, #8]
   d93e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d93e4:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93e6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d93e8:	60e2      	str	r2, [r4, #12]
   d93ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d93ec:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d93ee:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d93f0:	6122      	str	r2, [r4, #16]
   d93f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d93f4:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d93f6:	9b03      	ldr	r3, [sp, #12]
   d93f8:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d93fa:	6162      	str	r2, [r4, #20]
   d93fc:	7623      	strb	r3, [r4, #24]
   d93fe:	e7ce      	b.n	d939e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d9400 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d9402:	4605      	mov	r5, r0
   d9404:	4b09      	ldr	r3, [pc, #36]	; (d942c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d9406:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d940a:	4604      	mov	r4, r0
   d940c:	460e      	mov	r6, r1
        filter_(level, filters) {
   d940e:	a801      	add	r0, sp, #4
   d9410:	4611      	mov	r1, r2
   d9412:	f7fb fb3e 	bl	d4a92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9416:	aa01      	add	r2, sp, #4
   d9418:	4631      	mov	r1, r6
   d941a:	4628      	mov	r0, r5
   d941c:	f7ff fedb 	bl	d91d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9420:	a801      	add	r0, sp, #4
   d9422:	f7fb faf5 	bl	d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d9426:	4620      	mov	r0, r4
   d9428:	b004      	add	sp, #16
   d942a:	bd70      	pop	{r4, r5, r6, pc}
   d942c:	000db8a4 	.word	0x000db8a4

000d9430 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d9430:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9432:	460f      	mov	r7, r1
   d9434:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9436:	4926      	ldr	r1, [pc, #152]	; (d94d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d9438:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d943a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d943c:	4616      	mov	r6, r2
   d943e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9440:	f001 ff5f 	bl	db302 <strcmp>
   d9444:	bb00      	cbnz	r0, d9488 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d9446:	b1e4      	cbz	r4, d9482 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d9448:	4629      	mov	r1, r5
   d944a:	4668      	mov	r0, sp
   d944c:	f7ff fc8a 	bl	d8d64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9450:	4920      	ldr	r1, [pc, #128]	; (d94d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d9452:	2024      	movs	r0, #36	; 0x24
   d9454:	f001 fa32 	bl	da8bc <_ZnwjRKSt9nothrow_t>
   d9458:	4605      	mov	r5, r0
   d945a:	b170      	cbz	r0, d947a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d945c:	4669      	mov	r1, sp
   d945e:	a803      	add	r0, sp, #12
   d9460:	f7fb fb17 	bl	d4a92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9464:	aa03      	add	r2, sp, #12
   d9466:	4631      	mov	r1, r6
   d9468:	4628      	mov	r0, r5
   d946a:	f7ff ffc9 	bl	d9400 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d946e:	a803      	add	r0, sp, #12
   d9470:	f7fb face 	bl	d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d9474:	4b18      	ldr	r3, [pc, #96]	; (d94d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d9476:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d9478:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d947a:	4668      	mov	r0, sp
   d947c:	f7fb fac8 	bl	d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9480:	462c      	mov	r4, r5
}
   d9482:	4620      	mov	r0, r4
   d9484:	b007      	add	sp, #28
   d9486:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d9488:	4914      	ldr	r1, [pc, #80]	; (d94dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d948a:	4638      	mov	r0, r7
   d948c:	f001 ff39 	bl	db302 <strcmp>
   d9490:	b9e0      	cbnz	r0, d94cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d9492:	2c00      	cmp	r4, #0
   d9494:	d0f5      	beq.n	d9482 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d9496:	4629      	mov	r1, r5
   d9498:	4668      	mov	r0, sp
   d949a:	f7ff fc63 	bl	d8d64 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d949e:	490d      	ldr	r1, [pc, #52]	; (d94d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d94a0:	2024      	movs	r0, #36	; 0x24
   d94a2:	f001 fa0b 	bl	da8bc <_ZnwjRKSt9nothrow_t>
   d94a6:	4605      	mov	r5, r0
   d94a8:	2800      	cmp	r0, #0
   d94aa:	d0e6      	beq.n	d947a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d94ac:	4669      	mov	r1, sp
   d94ae:	a803      	add	r0, sp, #12
   d94b0:	f7fb faef 	bl	d4a92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d94b4:	aa03      	add	r2, sp, #12
   d94b6:	4631      	mov	r1, r6
   d94b8:	4628      	mov	r0, r5
   d94ba:	f7ff ffa1 	bl	d9400 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d94be:	a803      	add	r0, sp, #12
   d94c0:	f7fb faa6 	bl	d4a10 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d94c4:	4b06      	ldr	r3, [pc, #24]	; (d94e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d94c6:	602b      	str	r3, [r5, #0]
   d94c8:	622c      	str	r4, [r5, #32]
}
   d94ca:	e7d6      	b.n	d947a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d94cc:	2400      	movs	r4, #0
   d94ce:	e7d8      	b.n	d9482 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d94d0:	000dc0ba 	.word	0x000dc0ba
   d94d4:	000dc288 	.word	0x000dc288
   d94d8:	000dc14c 	.word	0x000dc14c
   d94dc:	000dc0be 	.word	0x000dc0be
   d94e0:	000dc134 	.word	0x000dc134

000d94e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d94e4:	4b01      	ldr	r3, [pc, #4]	; (d94ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d94e6:	4a02      	ldr	r2, [pc, #8]	; (d94f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d94e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d94ea:	4770      	bx	lr
   d94ec:	2003e574 	.word	0x2003e574
   d94f0:	000dc0cf 	.word	0x000dc0cf

000d94f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d94f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d94f8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d94fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d94fe:	4604      	mov	r4, r0
   d9500:	460e      	mov	r6, r1
   d9502:	4617      	mov	r7, r2
   d9504:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d9506:	f000 fff1 	bl	da4ec <_Z16_fetch_usbserialv>
   d950a:	4581      	cmp	r9, r0
   d950c:	d04c      	beq.n	d95a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d950e:	792b      	ldrb	r3, [r5, #4]
   d9510:	0719      	lsls	r1, r3, #28
   d9512:	d504      	bpl.n	d951e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d9514:	696a      	ldr	r2, [r5, #20]
   d9516:	4954      	ldr	r1, [pc, #336]	; (d9668 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9518:	4620      	mov	r0, r4
   d951a:	f7ff fa7c 	bl	d8a16 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d951e:	f1b8 0f00 	cmp.w	r8, #0
   d9522:	d00d      	beq.n	d9540 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d9524:	215b      	movs	r1, #91	; 0x5b
   d9526:	4620      	mov	r0, r4
   d9528:	f7ff fa69 	bl	d89fe <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d952c:	4641      	mov	r1, r8
   d952e:	4620      	mov	r0, r4
   d9530:	f7ff fa56 	bl	d89e0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d9534:	6823      	ldr	r3, [r4, #0]
   d9536:	494d      	ldr	r1, [pc, #308]	; (d966c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d9538:	68db      	ldr	r3, [r3, #12]
   d953a:	2202      	movs	r2, #2
   d953c:	4620      	mov	r0, r4
   d953e:	4798      	blx	r3
    if (attr.has_file) {
   d9540:	792b      	ldrb	r3, [r5, #4]
   d9542:	07da      	lsls	r2, r3, #31
   d9544:	d523      	bpl.n	d958e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d9546:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d954a:	212f      	movs	r1, #47	; 0x2f
   d954c:	4640      	mov	r0, r8
   d954e:	f001 ff35 	bl	db3bc <strrchr>
    if (s1) {
   d9552:	b108      	cbz	r0, d9558 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d9554:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d9558:	4641      	mov	r1, r8
   d955a:	4620      	mov	r0, r4
   d955c:	f7ff fa40 	bl	d89e0 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d9560:	792b      	ldrb	r3, [r5, #4]
   d9562:	079b      	lsls	r3, r3, #30
   d9564:	d508      	bpl.n	d9578 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d9566:	213a      	movs	r1, #58	; 0x3a
   d9568:	4620      	mov	r0, r4
   d956a:	f7ff fa48 	bl	d89fe <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d956e:	68ea      	ldr	r2, [r5, #12]
   d9570:	493f      	ldr	r1, [pc, #252]	; (d9670 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d9572:	4620      	mov	r0, r4
   d9574:	f7ff fa4f 	bl	d8a16 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d9578:	792a      	ldrb	r2, [r5, #4]
   d957a:	6823      	ldr	r3, [r4, #0]
   d957c:	f012 0f04 	tst.w	r2, #4
   d9580:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d9582:	bf14      	ite	ne
   d9584:	493b      	ldrne	r1, [pc, #236]	; (d9674 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d9586:	493c      	ldreq	r1, [pc, #240]	; (d9678 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d9588:	2202      	movs	r2, #2
            write(": ", 2);
   d958a:	4620      	mov	r0, r4
   d958c:	4798      	blx	r3
    if (attr.has_function) {
   d958e:	792b      	ldrb	r3, [r5, #4]
   d9590:	0758      	lsls	r0, r3, #29
   d9592:	d51d      	bpl.n	d95d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9594:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9596:	460b      	mov	r3, r1
   d9598:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d959a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d959e:	b160      	cbz	r0, d95ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d95a0:	2820      	cmp	r0, #32
   d95a2:	d108      	bne.n	d95b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d95a4:	4619      	mov	r1, r3
   d95a6:	e7f7      	b.n	d9598 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d95a8:	4834      	ldr	r0, [pc, #208]	; (d967c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d95aa:	f000 f966 	bl	d987a <_ZN5spark12NetworkClass9listeningEv>
   d95ae:	2800      	cmp	r0, #0
   d95b0:	d0ad      	beq.n	d950e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d95b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d95b6:	2828      	cmp	r0, #40	; 0x28
   d95b8:	d1ee      	bne.n	d9598 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d95ba:	6823      	ldr	r3, [r4, #0]
   d95bc:	1a52      	subs	r2, r2, r1
   d95be:	68db      	ldr	r3, [r3, #12]
   d95c0:	4620      	mov	r0, r4
   d95c2:	4798      	blx	r3
        write("(): ", 4);
   d95c4:	6823      	ldr	r3, [r4, #0]
   d95c6:	492e      	ldr	r1, [pc, #184]	; (d9680 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d95c8:	68db      	ldr	r3, [r3, #12]
   d95ca:	2204      	movs	r2, #4
   d95cc:	4620      	mov	r0, r4
   d95ce:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d95d0:	2100      	movs	r1, #0
   d95d2:	4638      	mov	r0, r7
   d95d4:	f7fd ffe2 	bl	d759c <log_level_name>
   d95d8:	4601      	mov	r1, r0
    write(s);
   d95da:	4620      	mov	r0, r4
   d95dc:	f7ff fa00 	bl	d89e0 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d95e0:	6823      	ldr	r3, [r4, #0]
   d95e2:	4925      	ldr	r1, [pc, #148]	; (d9678 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d95e4:	68db      	ldr	r3, [r3, #12]
   d95e6:	2202      	movs	r2, #2
   d95e8:	4620      	mov	r0, r4
   d95ea:	4798      	blx	r3
    if (msg) {
   d95ec:	b11e      	cbz	r6, d95f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d95ee:	4631      	mov	r1, r6
   d95f0:	4620      	mov	r0, r4
   d95f2:	f7ff f9f5 	bl	d89e0 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d95f6:	792b      	ldrb	r3, [r5, #4]
   d95f8:	f013 0f30 	tst.w	r3, #48	; 0x30
   d95fc:	d02c      	beq.n	d9658 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d95fe:	6823      	ldr	r3, [r4, #0]
   d9600:	4920      	ldr	r1, [pc, #128]	; (d9684 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d9602:	68db      	ldr	r3, [r3, #12]
   d9604:	2202      	movs	r2, #2
   d9606:	4620      	mov	r0, r4
   d9608:	4798      	blx	r3
        if (attr.has_code) {
   d960a:	792b      	ldrb	r3, [r5, #4]
   d960c:	06d9      	lsls	r1, r3, #27
   d960e:	d50a      	bpl.n	d9626 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d9610:	6823      	ldr	r3, [r4, #0]
   d9612:	491d      	ldr	r1, [pc, #116]	; (d9688 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9614:	68db      	ldr	r3, [r3, #12]
   d9616:	2207      	movs	r2, #7
   d9618:	4620      	mov	r0, r4
   d961a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d961c:	69aa      	ldr	r2, [r5, #24]
   d961e:	491b      	ldr	r1, [pc, #108]	; (d968c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d9620:	4620      	mov	r0, r4
   d9622:	f7ff f9f8 	bl	d8a16 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d9626:	792b      	ldrb	r3, [r5, #4]
   d9628:	069a      	lsls	r2, r3, #26
   d962a:	d511      	bpl.n	d9650 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d962c:	06db      	lsls	r3, r3, #27
   d962e:	d505      	bpl.n	d963c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d9630:	6823      	ldr	r3, [r4, #0]
   d9632:	4910      	ldr	r1, [pc, #64]	; (d9674 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d9634:	68db      	ldr	r3, [r3, #12]
   d9636:	2202      	movs	r2, #2
   d9638:	4620      	mov	r0, r4
   d963a:	4798      	blx	r3
            write("details = ", 10);
   d963c:	6823      	ldr	r3, [r4, #0]
   d963e:	4914      	ldr	r1, [pc, #80]	; (d9690 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d9640:	68db      	ldr	r3, [r3, #12]
   d9642:	4620      	mov	r0, r4
   d9644:	220a      	movs	r2, #10
   d9646:	4798      	blx	r3
            write(attr.details);
   d9648:	69e9      	ldr	r1, [r5, #28]
   d964a:	4620      	mov	r0, r4
   d964c:	f7ff f9c8 	bl	d89e0 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d9650:	215d      	movs	r1, #93	; 0x5d
   d9652:	4620      	mov	r0, r4
   d9654:	f7ff f9d3 	bl	d89fe <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d9658:	6823      	ldr	r3, [r4, #0]
   d965a:	490e      	ldr	r1, [pc, #56]	; (d9694 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d965c:	68db      	ldr	r3, [r3, #12]
   d965e:	4620      	mov	r0, r4
   d9660:	2202      	movs	r2, #2
}
   d9662:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d9666:	4718      	bx	r3
   d9668:	000dc0d3 	.word	0x000dc0d3
   d966c:	000dc0da 	.word	0x000dc0da
   d9670:	000dbb43 	.word	0x000dbb43
   d9674:	000dc0dd 	.word	0x000dc0dd
   d9678:	000dc0e2 	.word	0x000dc0e2
   d967c:	2003e5a0 	.word	0x2003e5a0
   d9680:	000dc0e0 	.word	0x000dc0e0
   d9684:	000dc0e5 	.word	0x000dc0e5
   d9688:	000dc0e8 	.word	0x000dc0e8
   d968c:	000db6f7 	.word	0x000db6f7
   d9690:	000dc0f0 	.word	0x000dc0f0
   d9694:	000dc0fb 	.word	0x000dc0fb

000d9698 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d969c:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d969e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d96a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d96a4:	4605      	mov	r5, r0
   d96a6:	460f      	mov	r7, r1
   d96a8:	4690      	mov	r8, r2
   d96aa:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d96ac:	f000 ff1e 	bl	da4ec <_Z16_fetch_usbserialv>
   d96b0:	4581      	cmp	r9, r0
   d96b2:	d105      	bne.n	d96c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d96b4:	4849      	ldr	r0, [pc, #292]	; (d97dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d96b6:	f000 f8e0 	bl	d987a <_ZN5spark12NetworkClass9listeningEv>
   d96ba:	2800      	cmp	r0, #0
   d96bc:	f040 808a 	bne.w	d97d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d96c0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d96c2:	4a47      	ldr	r2, [pc, #284]	; (d97e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d96c4:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d96c6:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d96ca:	a801      	add	r0, sp, #4
        strm_(stream) {
   d96cc:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d96ce:	f88d 9008 	strb.w	r9, [sp, #8]
   d96d2:	f7ff f878 	bl	d87c6 <_ZN5spark10JSONWriter11beginObjectEv>
   d96d6:	4649      	mov	r1, r9
   d96d8:	4640      	mov	r0, r8
   d96da:	f7fd ff5f 	bl	d759c <log_level_name>
    json.name("l", 1).value(s);
   d96de:	4941      	ldr	r1, [pc, #260]	; (d97e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d96e0:	4680      	mov	r8, r0
   d96e2:	2201      	movs	r2, #1
   d96e4:	a801      	add	r0, sp, #4
   d96e6:	f7ff f8f7 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d96ea:	4641      	mov	r1, r8
   d96ec:	f7ff f96a 	bl	d89c4 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d96f0:	b13f      	cbz	r7, d9702 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d96f2:	493d      	ldr	r1, [pc, #244]	; (d97e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d96f4:	2201      	movs	r2, #1
   d96f6:	a801      	add	r0, sp, #4
   d96f8:	f7ff f8ee 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d96fc:	4639      	mov	r1, r7
   d96fe:	f7ff f961 	bl	d89c4 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d9702:	b13e      	cbz	r6, d9714 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d9704:	4939      	ldr	r1, [pc, #228]	; (d97ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d9706:	2201      	movs	r2, #1
   d9708:	a801      	add	r0, sp, #4
   d970a:	f7ff f8e5 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d970e:	4631      	mov	r1, r6
   d9710:	f7ff f958 	bl	d89c4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d9714:	7923      	ldrb	r3, [r4, #4]
   d9716:	07df      	lsls	r7, r3, #31
   d9718:	d50e      	bpl.n	d9738 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d971a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d971c:	212f      	movs	r1, #47	; 0x2f
   d971e:	4630      	mov	r0, r6
   d9720:	f001 fe4c 	bl	db3bc <strrchr>
    if (s1) {
   d9724:	b100      	cbz	r0, d9728 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d9726:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d9728:	4931      	ldr	r1, [pc, #196]	; (d97f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d972a:	2201      	movs	r2, #1
   d972c:	a801      	add	r0, sp, #4
   d972e:	f7ff f8d3 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d9732:	4631      	mov	r1, r6
   d9734:	f7ff f946 	bl	d89c4 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d9738:	7923      	ldrb	r3, [r4, #4]
   d973a:	079e      	lsls	r6, r3, #30
   d973c:	d507      	bpl.n	d974e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d973e:	492d      	ldr	r1, [pc, #180]	; (d97f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d9740:	2202      	movs	r2, #2
   d9742:	a801      	add	r0, sp, #4
   d9744:	f7ff f8c8 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d9748:	68e1      	ldr	r1, [r4, #12]
   d974a:	f7ff f849 	bl	d87e0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d974e:	7923      	ldrb	r3, [r4, #4]
   d9750:	0758      	lsls	r0, r3, #29
   d9752:	d514      	bpl.n	d977e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9754:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d9756:	4633      	mov	r3, r6
   d9758:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d975a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d975e:	b12a      	cbz	r2, d976c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d9760:	2a20      	cmp	r2, #32
   d9762:	d101      	bne.n	d9768 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d9764:	461e      	mov	r6, r3
   d9766:	e7f7      	b.n	d9758 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d9768:	2a28      	cmp	r2, #40	; 0x28
   d976a:	d1f5      	bne.n	d9758 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d976c:	4922      	ldr	r1, [pc, #136]	; (d97f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d976e:	2202      	movs	r2, #2
   d9770:	a801      	add	r0, sp, #4
   d9772:	f7ff f8b1 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d9776:	1bba      	subs	r2, r7, r6
   d9778:	4631      	mov	r1, r6
   d977a:	f7ff f8bd 	bl	d88f8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d977e:	7923      	ldrb	r3, [r4, #4]
   d9780:	0719      	lsls	r1, r3, #28
   d9782:	d507      	bpl.n	d9794 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d9784:	491d      	ldr	r1, [pc, #116]	; (d97fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d9786:	2201      	movs	r2, #1
   d9788:	a801      	add	r0, sp, #4
   d978a:	f7ff f8a5 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d978e:	6961      	ldr	r1, [r4, #20]
   d9790:	f7ff f838 	bl	d8804 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d9794:	7923      	ldrb	r3, [r4, #4]
   d9796:	06da      	lsls	r2, r3, #27
   d9798:	d508      	bpl.n	d97ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d979a:	2204      	movs	r2, #4
   d979c:	4918      	ldr	r1, [pc, #96]	; (d9800 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d979e:	eb0d 0002 	add.w	r0, sp, r2
   d97a2:	f7ff f899 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d97a6:	69a1      	ldr	r1, [r4, #24]
   d97a8:	f7ff f81a 	bl	d87e0 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d97ac:	7923      	ldrb	r3, [r4, #4]
   d97ae:	069b      	lsls	r3, r3, #26
   d97b0:	d507      	bpl.n	d97c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d97b2:	4914      	ldr	r1, [pc, #80]	; (d9804 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d97b4:	2206      	movs	r2, #6
   d97b6:	a801      	add	r0, sp, #4
   d97b8:	f7ff f88e 	bl	d88d8 <_ZN5spark10JSONWriter4nameEPKcj>
   d97bc:	69e1      	ldr	r1, [r4, #28]
   d97be:	f7ff f901 	bl	d89c4 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d97c2:	a801      	add	r0, sp, #4
   d97c4:	f7fe ffe9 	bl	d879a <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d97c8:	6a28      	ldr	r0, [r5, #32]
   d97ca:	490f      	ldr	r1, [pc, #60]	; (d9808 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d97cc:	6803      	ldr	r3, [r0, #0]
   d97ce:	2202      	movs	r2, #2
   d97d0:	68db      	ldr	r3, [r3, #12]
   d97d2:	4798      	blx	r3
}
   d97d4:	b005      	add	sp, #20
   d97d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d97da:	bf00      	nop
   d97dc:	2003e5a0 	.word	0x2003e5a0
   d97e0:	000dc11c 	.word	0x000dc11c
   d97e4:	000dc0b0 	.word	0x000dc0b0
   d97e8:	000dc0fe 	.word	0x000dc0fe
   d97ec:	000dc100 	.word	0x000dc100
   d97f0:	000db607 	.word	0x000db607
   d97f4:	000dc102 	.word	0x000dc102
   d97f8:	000dc105 	.word	0x000dc105
   d97fc:	000dba3b 	.word	0x000dba3b
   d9800:	000dc108 	.word	0x000dc108
   d9804:	000dc10d 	.word	0x000dc10d
   d9808:	000dc0fb 	.word	0x000dc0fb

000d980c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d980c:	2300      	movs	r3, #0
   d980e:	6840      	ldr	r0, [r0, #4]
   d9810:	461a      	mov	r2, r3
   d9812:	f7fd bf7d 	b.w	d7710 <network_connect>

000d9816 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9816:	6840      	ldr	r0, [r0, #4]
   d9818:	2200      	movs	r2, #0
   d981a:	2102      	movs	r1, #2
   d981c:	f7fd bf88 	b.w	d7730 <network_disconnect>

000d9820 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9820:	2200      	movs	r2, #0
   d9822:	6840      	ldr	r0, [r0, #4]
   d9824:	4611      	mov	r1, r2
   d9826:	f7fd bf7b 	b.w	d7720 <network_connecting>

000d982a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d982a:	2200      	movs	r2, #0
   d982c:	6840      	ldr	r0, [r0, #4]
   d982e:	4611      	mov	r1, r2
   d9830:	f7fd bf86 	b.w	d7740 <network_ready>

000d9834 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9834:	2300      	movs	r3, #0
   d9836:	6840      	ldr	r0, [r0, #4]
   d9838:	461a      	mov	r2, r3
   d983a:	4619      	mov	r1, r3
   d983c:	f7fd bf88 	b.w	d7750 <network_on>

000d9840 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9840:	2300      	movs	r3, #0
   d9842:	6840      	ldr	r0, [r0, #4]
   d9844:	461a      	mov	r2, r3
   d9846:	4619      	mov	r1, r3
   d9848:	f7fd bf8a 	b.w	d7760 <network_off>

000d984c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d984c:	6840      	ldr	r0, [r0, #4]
   d984e:	2100      	movs	r1, #0
   d9850:	f7fd bfae 	b.w	d77b0 <network_is_on>

000d9854 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9854:	6840      	ldr	r0, [r0, #4]
   d9856:	2100      	movs	r1, #0
   d9858:	f7fd bfb2 	b.w	d77c0 <network_is_off>

000d985c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d985c:	6840      	ldr	r0, [r0, #4]
   d985e:	2200      	movs	r2, #0
   d9860:	f081 0101 	eor.w	r1, r1, #1
   d9864:	f7fd bf84 	b.w	d7770 <network_listen>

000d9868 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9868:	6840      	ldr	r0, [r0, #4]
   d986a:	2200      	movs	r2, #0
   d986c:	f7fd bf90 	b.w	d7790 <network_set_listen_timeout>

000d9870 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9870:	2200      	movs	r2, #0
   d9872:	6840      	ldr	r0, [r0, #4]
   d9874:	4611      	mov	r1, r2
   d9876:	f7fd bf93 	b.w	d77a0 <network_get_listen_timeout>

000d987a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d987a:	2200      	movs	r2, #0
   d987c:	6840      	ldr	r0, [r0, #4]
   d987e:	4611      	mov	r1, r2
   d9880:	f7fd bf7e 	b.w	d7780 <network_listening>

000d9884 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9888:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d988a:	b095      	sub	sp, #84	; 0x54
   d988c:	4616      	mov	r6, r2
   d988e:	460d      	mov	r5, r1
   d9890:	4607      	mov	r7, r0
    IPAddress addr;
   d9892:	f7fe fe23 	bl	d84dc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9896:	4621      	mov	r1, r4
   d9898:	2218      	movs	r2, #24
   d989a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d989c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d989e:	f001 fcb9 	bl	db214 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d98a2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d98a4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d98a8:	4621      	mov	r1, r4
   d98aa:	466b      	mov	r3, sp
   d98ac:	aa0c      	add	r2, sp, #48	; 0x30
   d98ae:	4630      	mov	r0, r6
   d98b0:	f7fd fd7c 	bl	d73ac <netdb_getaddrinfo>
    if (!r) {
   d98b4:	4604      	mov	r4, r0
   d98b6:	2800      	cmp	r0, #0
   d98b8:	d146      	bne.n	d9948 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d98ba:	4602      	mov	r2, r0
   d98bc:	2101      	movs	r1, #1
   d98be:	6868      	ldr	r0, [r5, #4]
   d98c0:	f7fd ff3e 	bl	d7740 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d98c4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d98c6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d98c8:	4622      	mov	r2, r4
   d98ca:	6868      	ldr	r0, [r5, #4]
   d98cc:	f7fd ff38 	bl	d7740 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98d0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d98d2:	4681      	mov	r9, r0
        bool ok = false;
   d98d4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98d6:	2e00      	cmp	r6, #0
   d98d8:	d036      	beq.n	d9948 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d98da:	2900      	cmp	r1, #0
   d98dc:	d134      	bne.n	d9948 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d98de:	6873      	ldr	r3, [r6, #4]
   d98e0:	2b02      	cmp	r3, #2
   d98e2:	d003      	beq.n	d98ec <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d98e4:	2b0a      	cmp	r3, #10
   d98e6:	d00b      	beq.n	d9900 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d98e8:	69f6      	ldr	r6, [r6, #28]
   d98ea:	e7f4      	b.n	d98d6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d98ec:	f1b8 0f00 	cmp.w	r8, #0
   d98f0:	d004      	beq.n	d98fc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d98f2:	6971      	ldr	r1, [r6, #20]
   d98f4:	4638      	mov	r0, r7
   d98f6:	3104      	adds	r1, #4
   d98f8:	f7fe fe1d 	bl	d8536 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d98fc:	4641      	mov	r1, r8
   d98fe:	e7f3      	b.n	d98e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9900:	f1b9 0f00 	cmp.w	r9, #0
   d9904:	d101      	bne.n	d990a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9906:	4649      	mov	r1, r9
   d9908:	e7ee      	b.n	d98e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d990a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d990c:	2210      	movs	r2, #16
   d990e:	a801      	add	r0, sp, #4
   d9910:	f001 fc80 	bl	db214 <memset>
                    a.v = 6;
   d9914:	2306      	movs	r3, #6
   d9916:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d991a:	ad01      	add	r5, sp, #4
   d991c:	f104 0308 	add.w	r3, r4, #8
   d9920:	3418      	adds	r4, #24
   d9922:	6818      	ldr	r0, [r3, #0]
   d9924:	6859      	ldr	r1, [r3, #4]
   d9926:	462a      	mov	r2, r5
   d9928:	c203      	stmia	r2!, {r0, r1}
   d992a:	3308      	adds	r3, #8
   d992c:	42a3      	cmp	r3, r4
   d992e:	4615      	mov	r5, r2
   d9930:	d1f7      	bne.n	d9922 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9932:	a901      	add	r1, sp, #4
   d9934:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9936:	ad07      	add	r5, sp, #28
   d9938:	f7fe fdde 	bl	d84f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d993c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d993e:	1d3c      	adds	r4, r7, #4
   d9940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9942:	682b      	ldr	r3, [r5, #0]
   d9944:	7023      	strb	r3, [r4, #0]
   d9946:	e7de      	b.n	d9906 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9948:	9800      	ldr	r0, [sp, #0]
   d994a:	f7fd fd27 	bl	d739c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d994e:	4638      	mov	r0, r7
   d9950:	b015      	add	sp, #84	; 0x54
   d9952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9958 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9958:	4b02      	ldr	r3, [pc, #8]	; (d9964 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d995a:	4a03      	ldr	r2, [pc, #12]	; (d9968 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d995c:	601a      	str	r2, [r3, #0]
   d995e:	2200      	movs	r2, #0
   d9960:	605a      	str	r2, [r3, #4]

} // spark
   d9962:	4770      	bx	lr
   d9964:	2003e5a0 	.word	0x2003e5a0
   d9968:	000dc194 	.word	0x000dc194

000d996c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d996c:	b508      	push	{r3, lr}
            return &Wire1;
   d996e:	f000 ff7f 	bl	da870 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d9972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d9976:	f7fe bd39 	b.w	d83ec <_ZN7TwoWire4lockEv>

000d997a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d997a:	b510      	push	{r4, lr}
   d997c:	4604      	mov	r4, r0
    lock_(_lock)
   d997e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d9980:	b109      	cbz	r1, d9986 <_ZN4PMICC1Eb+0xc>
        lock();
   d9982:	f7ff fff3 	bl	d996c <_ZN4PMIC4lockEv.constprop.0>
}
   d9986:	4620      	mov	r0, r4
   d9988:	bd10      	pop	{r4, pc}

000d998a <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d998a:	b508      	push	{r3, lr}
            return &Wire1;
   d998c:	f000 ff70 	bl	da870 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d9990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d9994:	f7fe bd33 	b.w	d83fe <_ZN7TwoWire6unlockEv>

000d9998 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d9998:	b510      	push	{r4, lr}
    if (lock_) {
   d999a:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d999c:	4604      	mov	r4, r0
    if (lock_) {
   d999e:	b10b      	cbz	r3, d99a4 <_ZN4PMICD1Ev+0xc>
        unlock();
   d99a0:	f7ff fff3 	bl	d998a <_ZN4PMIC6unlockEv>
}
   d99a4:	4620      	mov	r0, r4
   d99a6:	bd10      	pop	{r4, pc}

000d99a8 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d99a8:	b510      	push	{r4, lr}
   d99aa:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d99ac:	6800      	ldr	r0, [r0, #0]
   d99ae:	f7ff ffec 	bl	d998a <_ZN4PMIC6unlockEv>
   d99b2:	4620      	mov	r0, r4
   d99b4:	bd10      	pop	{r4, pc}

000d99b6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d99b6:	b530      	push	{r4, r5, lr}
   d99b8:	b087      	sub	sp, #28
   d99ba:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d99bc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d99be:	f7ff ffd5 	bl	d996c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d99c2:	236b      	movs	r3, #107	; 0x6b
   d99c4:	f88d 3008 	strb.w	r3, [sp, #8]
   d99c8:	2300      	movs	r3, #0
   d99ca:	2401      	movs	r4, #1
   d99cc:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d99ce:	230a      	movs	r3, #10
   d99d0:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d99d2:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d99d6:	f000 ff4b 	bl	da870 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d99da:	a902      	add	r1, sp, #8
   d99dc:	f7fe fcea 	bl	d83b4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d99e0:	f000 ff46 	bl	da870 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d99e4:	6803      	ldr	r3, [r0, #0]
   d99e6:	4629      	mov	r1, r5
   d99e8:	689b      	ldr	r3, [r3, #8]
   d99ea:	4798      	blx	r3
            return &Wire1;
   d99ec:	f000 ff40 	bl	da870 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d99f0:	4621      	mov	r1, r4
   d99f2:	f7fe fcf7 	bl	d83e4 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d99f6:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d99f8:	f000 ff3a 	bl	da870 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d99fc:	a902      	add	r1, sp, #8
   d99fe:	f7fe fca9 	bl	d8354 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d9a02:	f000 ff35 	bl	da870 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d9a06:	6803      	ldr	r3, [r0, #0]
   d9a08:	695b      	ldr	r3, [r3, #20]
   d9a0a:	4798      	blx	r3
   d9a0c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d9a0e:	a801      	add	r0, sp, #4
   d9a10:	f7ff ffca 	bl	d99a8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9a14:	b2e0      	uxtb	r0, r4
   d9a16:	b007      	add	sp, #28
   d9a18:	bd30      	pop	{r4, r5, pc}

000d9a1a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d9a1a:	b570      	push	{r4, r5, r6, lr}
   d9a1c:	b086      	sub	sp, #24
   d9a1e:	4614      	mov	r4, r2
   d9a20:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9a22:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9a24:	f7ff ffa2 	bl	d996c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9a28:	236b      	movs	r3, #107	; 0x6b
   d9a2a:	f88d 3008 	strb.w	r3, [sp, #8]
   d9a2e:	2300      	movs	r3, #0
   d9a30:	9303      	str	r3, [sp, #12]
   d9a32:	2601      	movs	r6, #1
    timeout_ = ms;
   d9a34:	230a      	movs	r3, #10
   d9a36:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9a38:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d9a3c:	f000 ff18 	bl	da870 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9a40:	a902      	add	r1, sp, #8
   d9a42:	f7fe fcb7 	bl	d83b4 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9a46:	f000 ff13 	bl	da870 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d9a4a:	6803      	ldr	r3, [r0, #0]
   d9a4c:	4629      	mov	r1, r5
   d9a4e:	689b      	ldr	r3, [r3, #8]
   d9a50:	4798      	blx	r3
            return &Wire1;
   d9a52:	f000 ff0d 	bl	da870 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d9a56:	6803      	ldr	r3, [r0, #0]
   d9a58:	4621      	mov	r1, r4
   d9a5a:	689b      	ldr	r3, [r3, #8]
   d9a5c:	4798      	blx	r3
            return &Wire1;
   d9a5e:	f000 ff07 	bl	da870 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9a62:	4631      	mov	r1, r6
   d9a64:	f7fe fcbe 	bl	d83e4 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d9a68:	a801      	add	r0, sp, #4
   d9a6a:	f7ff ff9d 	bl	d99a8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9a6e:	b006      	add	sp, #24
   d9a70:	bd70      	pop	{r4, r5, r6, pc}

000d9a72 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d9a72:	b513      	push	{r0, r1, r4, lr}
   d9a74:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9a76:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9a78:	f7ff ff78 	bl	d996c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d9a7c:	2101      	movs	r1, #1
   d9a7e:	4620      	mov	r0, r4
   d9a80:	f7ff ff99 	bl	d99b6 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d9a84:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d9a88:	f040 0210 	orr.w	r2, r0, #16
   d9a8c:	2101      	movs	r1, #1
   d9a8e:	4620      	mov	r0, r4
   d9a90:	f7ff ffc3 	bl	d9a1a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d9a94:	a801      	add	r0, sp, #4
   d9a96:	f7ff ff87 	bl	d99a8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9a9a:	2001      	movs	r0, #1
   d9a9c:	b002      	add	sp, #8
   d9a9e:	bd10      	pop	{r4, pc}

000d9aa0 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   d9aa0:	b513      	push	{r0, r1, r4, lr}
   d9aa2:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9aa4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9aa6:	f7ff ff61 	bl	d996c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d9aaa:	2101      	movs	r1, #1
   d9aac:	4620      	mov	r0, r4
   d9aae:	f7ff ff82 	bl	d99b6 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d9ab2:	2101      	movs	r1, #1
   d9ab4:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d9ab8:	4620      	mov	r0, r4
   d9aba:	f7ff ffae 	bl	d9a1a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d9abe:	a801      	add	r0, sp, #4
   d9ac0:	f7ff ff72 	bl	d99a8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9ac4:	2001      	movs	r0, #1
   d9ac6:	b002      	add	sp, #8
   d9ac8:	bd10      	pop	{r4, pc}

000d9aca <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9acc:	4606      	mov	r6, r0
   d9ace:	460d      	mov	r5, r1
  size_t n = 0;
   d9ad0:	188f      	adds	r7, r1, r2
   d9ad2:	2400      	movs	r4, #0
  while (size--) {
   d9ad4:	42bd      	cmp	r5, r7
   d9ad6:	d00c      	beq.n	d9af2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9ad8:	6833      	ldr	r3, [r6, #0]
   d9ada:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9ade:	689b      	ldr	r3, [r3, #8]
   d9ae0:	4630      	mov	r0, r6
   d9ae2:	4798      	blx	r3
     if (chunk>=0)
   d9ae4:	1e03      	subs	r3, r0, #0
   d9ae6:	db01      	blt.n	d9aec <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9ae8:	441c      	add	r4, r3
  while (size--) {
   d9aea:	e7f3      	b.n	d9ad4 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9aec:	2c00      	cmp	r4, #0
   d9aee:	bf08      	it	eq
   d9af0:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9af2:	4620      	mov	r0, r4
   d9af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9af6 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9af6:	b513      	push	{r0, r1, r4, lr}
   d9af8:	4604      	mov	r4, r0
    }
   d9afa:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9afc:	b159      	cbz	r1, d9b16 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9afe:	9101      	str	r1, [sp, #4]
   d9b00:	f001 fc2f 	bl	db362 <strlen>
   d9b04:	6823      	ldr	r3, [r4, #0]
   d9b06:	9901      	ldr	r1, [sp, #4]
   d9b08:	68db      	ldr	r3, [r3, #12]
   d9b0a:	4602      	mov	r2, r0
   d9b0c:	4620      	mov	r0, r4
    }
   d9b0e:	b002      	add	sp, #8
   d9b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9b14:	4718      	bx	r3
    }
   d9b16:	b002      	add	sp, #8
   d9b18:	bd10      	pop	{r4, pc}

000d9b1a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9b1a:	b508      	push	{r3, lr}
  return write(str);
   d9b1c:	f7ff ffeb 	bl	d9af6 <_ZN5Print5writeEPKc>
}
   d9b20:	bd08      	pop	{r3, pc}

000d9b22 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d9b22:	6803      	ldr	r3, [r0, #0]
   d9b24:	689b      	ldr	r3, [r3, #8]
   d9b26:	4718      	bx	r3

000d9b28 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9b28:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9b2a:	210d      	movs	r1, #13
{
   d9b2c:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9b2e:	f7ff fff8 	bl	d9b22 <_ZN5Print5printEc>
  n += print('\n');
   d9b32:	210a      	movs	r1, #10
  size_t n = print('\r');
   d9b34:	4604      	mov	r4, r0
  n += print('\n');
   d9b36:	4628      	mov	r0, r5
   d9b38:	f7ff fff3 	bl	d9b22 <_ZN5Print5printEc>
  return n;
}
   d9b3c:	4420      	add	r0, r4
   d9b3e:	bd38      	pop	{r3, r4, r5, pc}

000d9b40 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9b40:	b530      	push	{r4, r5, lr}
   d9b42:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9b44:	2300      	movs	r3, #0
   d9b46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9b4a:	2a01      	cmp	r2, #1
   d9b4c:	bf98      	it	ls
   d9b4e:	220a      	movls	r2, #10
   d9b50:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9b52:	460d      	mov	r5, r1
   d9b54:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9b58:	fb01 5312 	mls	r3, r1, r2, r5
   d9b5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9b60:	2b09      	cmp	r3, #9
   d9b62:	bf94      	ite	ls
   d9b64:	3330      	addls	r3, #48	; 0x30
   d9b66:	3337      	addhi	r3, #55	; 0x37
   d9b68:	b2db      	uxtb	r3, r3
  } while(n);
   d9b6a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9b6c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9b70:	d9ef      	bls.n	d9b52 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9b72:	4621      	mov	r1, r4
   d9b74:	f7ff ffbf 	bl	d9af6 <_ZN5Print5writeEPKc>
}
   d9b78:	b00b      	add	sp, #44	; 0x2c
   d9b7a:	bd30      	pop	{r4, r5, pc}

000d9b7c <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d9b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9b80:	b086      	sub	sp, #24
   d9b82:	af00      	add	r7, sp, #0
   d9b84:	4605      	mov	r5, r0
   d9b86:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d9b88:	1d38      	adds	r0, r7, #4
   d9b8a:	2114      	movs	r1, #20
{
   d9b8c:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9b8e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d9b90:	f7fd fe46 	bl	d7820 <vsnprintf>

    if (n<bufsize)
   d9b94:	2813      	cmp	r0, #19
   d9b96:	d80e      	bhi.n	d9bb6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d9b98:	1d39      	adds	r1, r7, #4
   d9b9a:	4628      	mov	r0, r5
   d9b9c:	f7ff ffab 	bl	d9af6 <_ZN5Print5writeEPKc>
   d9ba0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d9ba2:	b11e      	cbz	r6, d9bac <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d9ba4:	4628      	mov	r0, r5
   d9ba6:	f7ff ffbf 	bl	d9b28 <_ZN5Print7printlnEv>
   d9baa:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d9bac:	4620      	mov	r0, r4
   d9bae:	3718      	adds	r7, #24
   d9bb0:	46bd      	mov	sp, r7
   d9bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d9bb6:	f100 0308 	add.w	r3, r0, #8
   d9bba:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d9bbe:	46e8      	mov	r8, sp
        char bigger[n+1];
   d9bc0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d9bc4:	4622      	mov	r2, r4
   d9bc6:	1c41      	adds	r1, r0, #1
   d9bc8:	683b      	ldr	r3, [r7, #0]
   d9bca:	4668      	mov	r0, sp
   d9bcc:	f7fd fe28 	bl	d7820 <vsnprintf>
  return write(str);
   d9bd0:	4669      	mov	r1, sp
   d9bd2:	4628      	mov	r0, r5
   d9bd4:	f7ff ff8f 	bl	d9af6 <_ZN5Print5writeEPKc>
   d9bd8:	4604      	mov	r4, r0
   d9bda:	46c5      	mov	sp, r8
   d9bdc:	e7e1      	b.n	d9ba2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9bde <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d9bde:	b510      	push	{r4, lr}
  if (0 == max) {
   d9be0:	4604      	mov	r4, r0
   d9be2:	b128      	cbz	r0, d9bf0 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d9be4:	f001 fb42 	bl	db26c <rand>
   d9be8:	fb90 f3f4 	sdiv	r3, r0, r4
   d9bec:	fb03 0414 	mls	r4, r3, r4, r0
}
   d9bf0:	4620      	mov	r0, r4
   d9bf2:	bd10      	pop	{r4, pc}

000d9bf4 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d9bf4:	4288      	cmp	r0, r1
{
   d9bf6:	b510      	push	{r4, lr}
   d9bf8:	4604      	mov	r4, r0
  if (min >= max) {
   d9bfa:	da03      	bge.n	d9c04 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d9bfc:	1a08      	subs	r0, r1, r0
   d9bfe:	f7ff ffee 	bl	d9bde <_Z6randomi>
   d9c02:	4404      	add	r4, r0
}
   d9c04:	4620      	mov	r0, r4
   d9c06:	bd10      	pop	{r4, pc}

000d9c08 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9c08:	4b01      	ldr	r3, [pc, #4]	; (d9c10 <_GLOBAL__sub_I_RGB+0x8>)
   d9c0a:	2200      	movs	r2, #0
   d9c0c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d9c0e:	4770      	bx	lr
   d9c10:	2003e5a8 	.word	0x2003e5a8

000d9c14 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9c14:	2100      	movs	r1, #0
   d9c16:	f7fd bc09 	b.w	d742c <hal_spi_acquire>

000d9c1a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d9c1a:	2100      	movs	r1, #0
   d9c1c:	f7fd bc0e 	b.w	d743c <hal_spi_release>

000d9c20 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9c20:	b510      	push	{r4, lr}
   d9c22:	4604      	mov	r4, r0
   d9c24:	4608      	mov	r0, r1
{
    _spi = spi;
   d9c26:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9c28:	f7fd fbe0 	bl	d73ec <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9c2c:	2300      	movs	r3, #0
   d9c2e:	6063      	str	r3, [r4, #4]
}
   d9c30:	4620      	mov	r0, r4
   d9c32:	bd10      	pop	{r4, pc}

000d9c34 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d9c34:	b510      	push	{r4, lr}
   d9c36:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9c38:	7800      	ldrb	r0, [r0, #0]
   d9c3a:	f7ff ffeb 	bl	d9c14 <_ZN8SPIClass4lockEv.isra.0>
   d9c3e:	b948      	cbnz	r0, d9c54 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d9c40:	7820      	ldrb	r0, [r4, #0]
   d9c42:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9c46:	f7fd fbb9 	bl	d73bc <hal_spi_begin>
        unlock();
   d9c4a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9c50:	f7ff bfe3 	b.w	d9c1a <_ZN8SPIClass6unlockEv.isra.0>
}
   d9c54:	bd10      	pop	{r4, pc}

000d9c56 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   d9c56:	b510      	push	{r4, lr}
   d9c58:	4604      	mov	r4, r0
    if (!lock())
   d9c5a:	7800      	ldrb	r0, [r0, #0]
   d9c5c:	f7ff ffda 	bl	d9c14 <_ZN8SPIClass4lockEv.isra.0>
   d9c60:	b938      	cbnz	r0, d9c72 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   d9c62:	7820      	ldrb	r0, [r4, #0]
   d9c64:	f7fd fbb2 	bl	d73cc <hal_spi_end>
        unlock();
   d9c68:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9c6e:	f7ff bfd4 	b.w	d9c1a <_ZN8SPIClass6unlockEv.isra.0>
}
   d9c72:	bd10      	pop	{r4, pc}

000d9c74 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9c74:	7800      	ldrb	r0, [r0, #0]
   d9c76:	f7ff bfd0 	b.w	d9c1a <_ZN8SPIClass6unlockEv.isra.0>
	...

000d9c7c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9c7c:	0840      	lsrs	r0, r0, #1
{
   d9c7e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9c80:	6018      	str	r0, [r3, #0]
   d9c82:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9c84:	6818      	ldr	r0, [r3, #0]
   d9c86:	4288      	cmp	r0, r1
   d9c88:	b2e5      	uxtb	r5, r4
   d9c8a:	d906      	bls.n	d9c9a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9c8c:	3401      	adds	r4, #1
   d9c8e:	2c08      	cmp	r4, #8
   d9c90:	d002      	beq.n	d9c98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9c92:	0840      	lsrs	r0, r0, #1
   d9c94:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9c96:	e7f5      	b.n	d9c84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9c98:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d9c9a:	4b02      	ldr	r3, [pc, #8]	; (d9ca4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9c9c:	5d5b      	ldrb	r3, [r3, r5]
   d9c9e:	7013      	strb	r3, [r2, #0]
}
   d9ca0:	bd30      	pop	{r4, r5, pc}
   d9ca2:	bf00      	nop
   d9ca4:	000dc1c8 	.word	0x000dc1c8

000d9ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9cac:	4606      	mov	r6, r0
   d9cae:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d9cb0:	7800      	ldrb	r0, [r0, #0]
{
   d9cb2:	460c      	mov	r4, r1
    CHECK(lock());
   d9cb4:	f7ff ffae 	bl	d9c14 <_ZN8SPIClass4lockEv.isra.0>
   d9cb8:	2800      	cmp	r0, #0
   d9cba:	db1b      	blt.n	d9cf4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d9cbc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d9cbe:	2214      	movs	r2, #20
   d9cc0:	2100      	movs	r1, #0
   d9cc2:	a809      	add	r0, sp, #36	; 0x24
   d9cc4:	f001 faa6 	bl	db214 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9cc8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d9cca:	2200      	movs	r2, #0
   d9ccc:	a909      	add	r1, sp, #36	; 0x24
   d9cce:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d9cd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9cd4:	f7fd fb9a 	bl	d740c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9cd8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9cdc:	b113      	cbz	r3, d9ce4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d9cde:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d9ce2:	b155      	cbz	r5, d9cfa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9ce4:	2700      	movs	r7, #0
   d9ce6:	46b9      	mov	r9, r7
   d9ce8:	46b8      	mov	r8, r7
   d9cea:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d9cec:	7923      	ldrb	r3, [r4, #4]
   d9cee:	b15d      	cbz	r5, d9d08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9cf0:	b1c3      	cbz	r3, d9d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9cf2:	2000      	movs	r0, #0
}
   d9cf4:	b00f      	add	sp, #60	; 0x3c
   d9cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9cfa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9cfe:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9d02:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9d06:	e7f1      	b.n	d9cec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9d08:	2b00      	cmp	r3, #0
   d9d0a:	d135      	bne.n	d9d78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9d0c:	68a3      	ldr	r3, [r4, #8]
   d9d0e:	4543      	cmp	r3, r8
   d9d10:	d108      	bne.n	d9d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9d12:	f88d 9020 	strb.w	r9, [sp, #32]
   d9d16:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9d1a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9d1e:	89a3      	ldrh	r3, [r4, #12]
   d9d20:	429a      	cmp	r2, r3
   d9d22:	d0e6      	beq.n	d9cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9d24:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9d26:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d9d28:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9d2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9d2e:	ab04      	add	r3, sp, #16
   d9d30:	f10d 020f 	add.w	r2, sp, #15
   d9d34:	f7ff ffa2 	bl	d9c7c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9d38:	7921      	ldrb	r1, [r4, #4]
   d9d3a:	b985      	cbnz	r5, d9d5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9d3c:	b989      	cbnz	r1, d9d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9d3e:	68a3      	ldr	r3, [r4, #8]
   d9d40:	4543      	cmp	r3, r8
   d9d42:	d30e      	bcc.n	d9d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9d44:	f88d 9020 	strb.w	r9, [sp, #32]
   d9d48:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9d4c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9d50:	89a3      	ldrh	r3, [r4, #12]
   d9d52:	429a      	cmp	r2, r3
   d9d54:	d105      	bne.n	d9d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9d56:	9b04      	ldr	r3, [sp, #16]
   d9d58:	4543      	cmp	r3, r8
   d9d5a:	d102      	bne.n	d9d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9d5c:	e7c9      	b.n	d9cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d9d5e:	2900      	cmp	r1, #0
   d9d60:	d1f9      	bne.n	d9d56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9d62:	2300      	movs	r3, #0
   d9d64:	9301      	str	r3, [sp, #4]
   d9d66:	7b63      	ldrb	r3, [r4, #13]
   d9d68:	9300      	str	r3, [sp, #0]
   d9d6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9d6e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9d70:	7830      	ldrb	r0, [r6, #0]
   d9d72:	f7fd fb53 	bl	d741c <hal_spi_set_settings>
   d9d76:	e7bc      	b.n	d9cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9d78:	e9cd 5500 	strd	r5, r5, [sp]
   d9d7c:	462b      	mov	r3, r5
   d9d7e:	462a      	mov	r2, r5
   d9d80:	2101      	movs	r1, #1
   d9d82:	e7f5      	b.n	d9d70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9d84 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9d84:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9d86:	7800      	ldrb	r0, [r0, #0]
   d9d88:	f7fd fb28 	bl	d73dc <hal_spi_transfer>
}
   d9d8c:	b2c0      	uxtb	r0, r0
   d9d8e:	bd08      	pop	{r3, pc}

000d9d90 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   d9d90:	4770      	bx	lr

000d9d92 <_ZN8SPIClass15detachInterruptEv>:
   d9d92:	4770      	bx	lr

000d9d94 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9d94:	b510      	push	{r4, lr}
   d9d96:	4604      	mov	r4, r0
{
	free(buffer);
   d9d98:	6800      	ldr	r0, [r0, #0]
   d9d9a:	f7fd fd21 	bl	d77e0 <free>
}
   d9d9e:	4620      	mov	r0, r4
   d9da0:	bd10      	pop	{r4, pc}

000d9da2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9da2:	b510      	push	{r4, lr}
   d9da4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9da6:	6800      	ldr	r0, [r0, #0]
   d9da8:	b108      	cbz	r0, d9dae <_ZN6String10invalidateEv+0xc>
   d9daa:	f7fd fd19 	bl	d77e0 <free>
	buffer = NULL;
   d9dae:	2300      	movs	r3, #0
	capacity = len = 0;
   d9db0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d9db4:	6023      	str	r3, [r4, #0]
}
   d9db6:	bd10      	pop	{r4, pc}

000d9db8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d9db8:	b538      	push	{r3, r4, r5, lr}
   d9dba:	4604      	mov	r4, r0
   d9dbc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d9dbe:	6800      	ldr	r0, [r0, #0]
   d9dc0:	3101      	adds	r1, #1
   d9dc2:	f7fd fd15 	bl	d77f0 <realloc>
	if (newbuffer) {
   d9dc6:	b110      	cbz	r0, d9dce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d9dc8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d9dcc:	2001      	movs	r0, #1
	}
	return 0;
}
   d9dce:	bd38      	pop	{r3, r4, r5, pc}

000d9dd0 <_ZN6String7reserveEj>:
{
   d9dd0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d9dd2:	6803      	ldr	r3, [r0, #0]
{
   d9dd4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d9dd6:	b123      	cbz	r3, d9de2 <_ZN6String7reserveEj+0x12>
   d9dd8:	6843      	ldr	r3, [r0, #4]
   d9dda:	428b      	cmp	r3, r1
   d9ddc:	d301      	bcc.n	d9de2 <_ZN6String7reserveEj+0x12>
   d9dde:	2001      	movs	r0, #1
}
   d9de0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d9de2:	4620      	mov	r0, r4
   d9de4:	f7ff ffe8 	bl	d9db8 <_ZN6String12changeBufferEj>
   d9de8:	2800      	cmp	r0, #0
   d9dea:	d0f9      	beq.n	d9de0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d9dec:	68a3      	ldr	r3, [r4, #8]
   d9dee:	2b00      	cmp	r3, #0
   d9df0:	d1f5      	bne.n	d9dde <_ZN6String7reserveEj+0xe>
   d9df2:	6822      	ldr	r2, [r4, #0]
   d9df4:	7013      	strb	r3, [r2, #0]
   d9df6:	e7f2      	b.n	d9dde <_ZN6String7reserveEj+0xe>

000d9df8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d9df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9dfa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d9dfc:	4611      	mov	r1, r2
   d9dfe:	9201      	str	r2, [sp, #4]
{
   d9e00:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d9e02:	f7ff ffe5 	bl	d9dd0 <_ZN6String7reserveEj>
   d9e06:	9a01      	ldr	r2, [sp, #4]
   d9e08:	b928      	cbnz	r0, d9e16 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d9e0a:	4620      	mov	r0, r4
   d9e0c:	f7ff ffc9 	bl	d9da2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d9e10:	4620      	mov	r0, r4
   d9e12:	b003      	add	sp, #12
   d9e14:	bd30      	pop	{r4, r5, pc}
	len = length;
   d9e16:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d9e18:	4629      	mov	r1, r5
   d9e1a:	6820      	ldr	r0, [r4, #0]
   d9e1c:	f001 f9d2 	bl	db1c4 <memcpy>
	buffer[len] = 0;
   d9e20:	6822      	ldr	r2, [r4, #0]
   d9e22:	68a3      	ldr	r3, [r4, #8]
   d9e24:	2100      	movs	r1, #0
   d9e26:	54d1      	strb	r1, [r2, r3]
	return *this;
   d9e28:	e7f2      	b.n	d9e10 <_ZN6String4copyEPKcj+0x18>

000d9e2a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d9e2a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d9e2c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d9e2e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d9e32:	4604      	mov	r4, r0
	len = 0;
   d9e34:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e36:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d9e38:	b141      	cbz	r1, d9e4c <_ZN6StringC1EPKc+0x22>
   d9e3a:	4608      	mov	r0, r1
   d9e3c:	9101      	str	r1, [sp, #4]
   d9e3e:	f001 fa90 	bl	db362 <strlen>
   d9e42:	9901      	ldr	r1, [sp, #4]
   d9e44:	4602      	mov	r2, r0
   d9e46:	4620      	mov	r0, r4
   d9e48:	f7ff ffd6 	bl	d9df8 <_ZN6String4copyEPKcj>
}
   d9e4c:	4620      	mov	r0, r4
   d9e4e:	b002      	add	sp, #8
   d9e50:	bd10      	pop	{r4, pc}

000d9e52 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d9e52:	b538      	push	{r3, r4, r5, lr}
   d9e54:	4605      	mov	r5, r0
	if (buffer) {
   d9e56:	6800      	ldr	r0, [r0, #0]
{
   d9e58:	460c      	mov	r4, r1
	if (buffer) {
   d9e5a:	b168      	cbz	r0, d9e78 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d9e5c:	686a      	ldr	r2, [r5, #4]
   d9e5e:	688b      	ldr	r3, [r1, #8]
   d9e60:	429a      	cmp	r2, r3
   d9e62:	d307      	bcc.n	d9e74 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d9e64:	6809      	ldr	r1, [r1, #0]
   d9e66:	f001 fa56 	bl	db316 <strcpy>
			len = rhs.len;
   d9e6a:	68a3      	ldr	r3, [r4, #8]
   d9e6c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d9e6e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d9e70:	60a3      	str	r3, [r4, #8]
}
   d9e72:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d9e74:	f7fd fcb4 	bl	d77e0 <free>
	buffer = rhs.buffer;
   d9e78:	6823      	ldr	r3, [r4, #0]
   d9e7a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d9e7c:	6863      	ldr	r3, [r4, #4]
   d9e7e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d9e80:	68a3      	ldr	r3, [r4, #8]
   d9e82:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d9e84:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d9e86:	e9c4 3300 	strd	r3, r3, [r4]
   d9e8a:	e7f1      	b.n	d9e70 <_ZN6String4moveERS_+0x1e>

000d9e8c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d9e8c:	b510      	push	{r4, lr}
	buffer = NULL;
   d9e8e:	2300      	movs	r3, #0
	capacity = 0;
   d9e90:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d9e94:	4604      	mov	r4, r0
	len = 0;
   d9e96:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9e98:	7303      	strb	r3, [r0, #12]
	move(rval);
   d9e9a:	f7ff ffda 	bl	d9e52 <_ZN6String4moveERS_>
}
   d9e9e:	4620      	mov	r0, r4
   d9ea0:	bd10      	pop	{r4, pc}

000d9ea2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d9ea2:	4288      	cmp	r0, r1
{
   d9ea4:	b510      	push	{r4, lr}
   d9ea6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d9ea8:	d005      	beq.n	d9eb6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d9eaa:	680b      	ldr	r3, [r1, #0]
   d9eac:	b12b      	cbz	r3, d9eba <_ZN6StringaSERKS_+0x18>
   d9eae:	688a      	ldr	r2, [r1, #8]
   d9eb0:	4619      	mov	r1, r3
   d9eb2:	f7ff ffa1 	bl	d9df8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d9eb6:	4620      	mov	r0, r4
   d9eb8:	bd10      	pop	{r4, pc}
	else invalidate();
   d9eba:	f7ff ff72 	bl	d9da2 <_ZN6String10invalidateEv>
   d9ebe:	e7fa      	b.n	d9eb6 <_ZN6StringaSERKS_+0x14>

000d9ec0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d9ec0:	b510      	push	{r4, lr}
	buffer = NULL;
   d9ec2:	2300      	movs	r3, #0
String::String(const String &value)
   d9ec4:	4604      	mov	r4, r0
	capacity = 0;
   d9ec6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d9eca:	6083      	str	r3, [r0, #8]
	flags = 0;
   d9ecc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d9ece:	f7ff ffe8 	bl	d9ea2 <_ZN6StringaSERKS_>
}
   d9ed2:	4620      	mov	r0, r4
   d9ed4:	bd10      	pop	{r4, pc}

000d9ed6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d9ed6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9ed8:	6882      	ldr	r2, [r0, #8]
   d9eda:	b93a      	cbnz	r2, d9eec <_ZNK6String6equalsEPKc+0x16>
   d9edc:	b121      	cbz	r1, d9ee8 <_ZNK6String6equalsEPKc+0x12>
   d9ede:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d9ee0:	fab0 f080 	clz	r0, r0
   d9ee4:	0940      	lsrs	r0, r0, #5
   d9ee6:	e000      	b.n	d9eea <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d9ee8:	2001      	movs	r0, #1
}
   d9eea:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d9eec:	6800      	ldr	r0, [r0, #0]
   d9eee:	b909      	cbnz	r1, d9ef4 <_ZNK6String6equalsEPKc+0x1e>
   d9ef0:	7800      	ldrb	r0, [r0, #0]
   d9ef2:	e7f5      	b.n	d9ee0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d9ef4:	f001 fa05 	bl	db302 <strcmp>
   d9ef8:	e7f2      	b.n	d9ee0 <_ZNK6String6equalsEPKc+0xa>
	...

000d9efc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d9efc:	b40e      	push	{r1, r2, r3}
   d9efe:	b570      	push	{r4, r5, r6, lr}
   d9f00:	b087      	sub	sp, #28
   d9f02:	ad0b      	add	r5, sp, #44	; 0x2c
   d9f04:	4604      	mov	r4, r0
   d9f06:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9f0a:	9201      	str	r2, [sp, #4]
   d9f0c:	462b      	mov	r3, r5
   d9f0e:	2105      	movs	r1, #5
   d9f10:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d9f12:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9f14:	f7fd fc84 	bl	d7820 <vsnprintf>
    va_end(marker);

    String result;
   d9f18:	490b      	ldr	r1, [pc, #44]	; (d9f48 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d9f1a:	4606      	mov	r6, r0
    String result;
   d9f1c:	4620      	mov	r0, r4
   d9f1e:	f7ff ff84 	bl	d9e2a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d9f22:	4631      	mov	r1, r6
   d9f24:	4620      	mov	r0, r4
   d9f26:	f7ff ff53 	bl	d9dd0 <_ZN6String7reserveEj>
    if (result.buffer) {
   d9f2a:	6820      	ldr	r0, [r4, #0]
   d9f2c:	b130      	cbz	r0, d9f3c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9f2e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d9f30:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d9f32:	462b      	mov	r3, r5
   d9f34:	1c71      	adds	r1, r6, #1
   d9f36:	f7fd fc73 	bl	d7820 <vsnprintf>
        va_end(marker);
        result.len = n;
   d9f3a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d9f3c:	4620      	mov	r0, r4
   d9f3e:	b007      	add	sp, #28
   d9f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d9f44:	b003      	add	sp, #12
   d9f46:	4770      	bx	lr
   d9f48:	000dc0fd 	.word	0x000dc0fd

000d9f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d9f4c:	b510      	push	{r4, lr}
   d9f4e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d9f50:	6800      	ldr	r0, [r0, #0]
   d9f52:	b118      	cbz	r0, d9f5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d9f54:	f7fd fc44 	bl	d77e0 <free>
            wakeupSource_ = nullptr;
   d9f58:	2300      	movs	r3, #0
   d9f5a:	6023      	str	r3, [r4, #0]
        }
    }
   d9f5c:	bd10      	pop	{r4, pc}

000d9f5e <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9f5e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d9f60:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d9f64:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d9f66:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9f68:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d9f6a:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d9f6e:	f8c0 2006 	str.w	r2, [r0, #6]
   d9f72:	889b      	ldrh	r3, [r3, #4]
   d9f74:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d9f76:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d9f78:	f7ff ffe8 	bl	d9f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d9f7c:	682b      	ldr	r3, [r5, #0]
   d9f7e:	b113      	cbz	r3, d9f86 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d9f80:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d9f82:	2300      	movs	r3, #0
   d9f84:	602b      	str	r3, [r5, #0]
    }
   d9f86:	4620      	mov	r0, r4
   d9f88:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9f8c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d9f8c:	b538      	push	{r3, r4, r5, lr}
   d9f8e:	460c      	mov	r4, r1
   d9f90:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d9f92:	f7ff ffdb 	bl	d9f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d9f96:	b144      	cbz	r4, d9faa <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d9f98:	8820      	ldrh	r0, [r4, #0]
   d9f9a:	f7fd fc19 	bl	d77d0 <malloc>
   d9f9e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d9fa0:	b128      	cbz	r0, d9fae <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d9fa2:	8822      	ldrh	r2, [r4, #0]
   d9fa4:	4621      	mov	r1, r4
   d9fa6:	f001 f90d 	bl	db1c4 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d9faa:	2000      	movs	r0, #0
    }
   d9fac:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d9fae:	4801      	ldr	r0, [pc, #4]	; (d9fb4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d9fb0:	e7fc      	b.n	d9fac <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d9fb2:	bf00      	nop
   d9fb4:	fffffefc 	.word	0xfffffefc

000d9fb8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d9fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9fba:	4d2d      	ldr	r5, [pc, #180]	; (da070 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d9fbc:	7d0b      	ldrb	r3, [r1, #20]
   d9fbe:	4604      	mov	r4, r0
   d9fc0:	b08b      	sub	sp, #44	; 0x2c
   d9fc2:	4608      	mov	r0, r1
   d9fc4:	1daf      	adds	r7, r5, #6
   d9fc6:	2b00      	cmp	r3, #0
   d9fc8:	d038      	beq.n	da03c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d9fca:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d9fcc:	791b      	ldrb	r3, [r3, #4]
   d9fce:	2b00      	cmp	r3, #0
   d9fd0:	d034      	beq.n	da03c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d9fd2:	2200      	movs	r2, #0
    SleepResult() {}
   d9fd4:	4b27      	ldr	r3, [pc, #156]	; (da074 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d9fd6:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d9fd8:	a902      	add	r1, sp, #8
   d9fda:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d9fdc:	9202      	str	r2, [sp, #8]
   d9fde:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d9fe2:	f88d 200e 	strb.w	r2, [sp, #14]
   d9fe6:	f7fd fb59 	bl	d769c <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d9fea:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d9fee:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d9ff2:	b200      	sxth	r0, r0
   d9ff4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d9ff8:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d9ffc:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d9ffe:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   da000:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da002:	4628      	mov	r0, r5
   da004:	f7ff ffc2 	bl	d9f8c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   da008:	a802      	add	r0, sp, #8
   da00a:	f7ff ff9f 	bl	d9f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   da00e:	2300      	movs	r3, #0
   da010:	6023      	str	r3, [r4, #0]
   da012:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   da014:	71a3      	strb	r3, [r4, #6]
   da016:	8123      	strh	r3, [r4, #8]
   da018:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da01c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   da01e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   da022:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   da024:	683b      	ldr	r3, [r7, #0]
   da026:	f8c4 3006 	str.w	r3, [r4, #6]
   da02a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da02c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   da02e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   da030:	4620      	mov	r0, r4
   da032:	f7ff ffab 	bl	d9f8c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   da036:	4620      	mov	r0, r4
   da038:	b00b      	add	sp, #44	; 0x2c
   da03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   da03c:	2600      	movs	r6, #0
   da03e:	2320      	movs	r3, #32
   da040:	e9cd 3602 	strd	r3, r6, [sp, #8]
   da044:	4b0c      	ldr	r3, [pc, #48]	; (da078 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   da046:	9300      	str	r3, [sp, #0]
   da048:	490c      	ldr	r1, [pc, #48]	; (da07c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   da04a:	4633      	mov	r3, r6
   da04c:	aa02      	add	r2, sp, #8
   da04e:	2032      	movs	r0, #50	; 0x32
   da050:	f7fd fa94 	bl	d757c <log_message>
    SleepResult() {}
   da054:	4b07      	ldr	r3, [pc, #28]	; (da074 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da056:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   da058:	a902      	add	r1, sp, #8
        error_ = error;
   da05a:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   da05e:	4804      	ldr	r0, [pc, #16]	; (da070 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   da060:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   da062:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   da066:	f8ad 300c 	strh.w	r3, [sp, #12]
   da06a:	f7ff ff78 	bl	d9f5e <_ZN17SystemSleepResultaSEOS_>
   da06e:	e7cb      	b.n	da008 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   da070:	2003e5b8 	.word	0x2003e5b8
   da074:	ffff0000 	.word	0xffff0000
   da078:	000dc1d7 	.word	0x000dc1d7
   da07c:	000dc1d0 	.word	0x000dc1d0

000da080 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   da080:	4b05      	ldr	r3, [pc, #20]	; (da098 <_GLOBAL__sub_I_System+0x18>)
   da082:	2202      	movs	r2, #2
   da084:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   da086:	4b05      	ldr	r3, [pc, #20]	; (da09c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   da088:	4a05      	ldr	r2, [pc, #20]	; (da0a0 <_GLOBAL__sub_I_System+0x20>)
   da08a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   da08c:	2000      	movs	r0, #0
   da08e:	6018      	str	r0, [r3, #0]
   da090:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   da092:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da094:	f7fd baa4 	b.w	d75e0 <set_system_mode>
   da098:	2003e5c4 	.word	0x2003e5c4
   da09c:	2003e5b8 	.word	0x2003e5b8
   da0a0:	ffff0000 	.word	0xffff0000

000da0a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da0a4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da0a6:	2000      	movs	r0, #0
   da0a8:	f7fd fb1a 	bl	d76e0 <spark_sync_time_pending>
   da0ac:	b128      	cbz	r0, da0ba <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da0ae:	f7fd fb07 	bl	d76c0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da0b2:	f080 0001 	eor.w	r0, r0, #1
   da0b6:	b2c0      	uxtb	r0, r0
    }
   da0b8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da0ba:	2001      	movs	r0, #1
   da0bc:	e7fc      	b.n	da0b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000da0be <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da0be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da0c0:	4602      	mov	r2, r0
   da0c2:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da0c4:	4668      	mov	r0, sp
    struct timeval tv = {
   da0c6:	2100      	movs	r1, #0
    };
   da0c8:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da0cc:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da0d0:	f7fd f8ac 	bl	d722c <hal_rtc_set_time>
   da0d4:	4602      	mov	r2, r0
   da0d6:	b910      	cbnz	r0, da0de <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da0d8:	4601      	mov	r1, r0
   da0da:	f7fd fab9 	bl	d7650 <system_notify_time_changed>
    }
}
   da0de:	b005      	add	sp, #20
   da0e0:	f85d fb04 	ldr.w	pc, [sp], #4

000da0e4 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da0e4:	b530      	push	{r4, r5, lr}
   da0e6:	4604      	mov	r4, r0
    t += time_zone_cache;
   da0e8:	4818      	ldr	r0, [pc, #96]	; (da14c <_ZN9TimeClass7timeStrEx+0x68>)
   da0ea:	e9d0 1000 	ldrd	r1, r0, [r0]
   da0ee:	1852      	adds	r2, r2, r1
   da0f0:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da0f4:	4816      	ldr	r0, [pc, #88]	; (da150 <_ZN9TimeClass7timeStrEx+0x6c>)
   da0f6:	e9d0 1000 	ldrd	r1, r0, [r0]
   da0fa:	1852      	adds	r2, r2, r1
{
   da0fc:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da0fe:	eb40 0303 	adc.w	r3, r0, r3
   da102:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da106:	2224      	movs	r2, #36	; 0x24
   da108:	eb0d 0002 	add.w	r0, sp, r2
   da10c:	2100      	movs	r1, #0
   da10e:	f001 f881 	bl	db214 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da112:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da114:	a909      	add	r1, sp, #36	; 0x24
   da116:	4668      	mov	r0, sp
   da118:	f7fd fbaa 	bl	d7870 <localtime_r>
    char ascstr[26] = {};
   da11c:	2216      	movs	r2, #22
   da11e:	4629      	mov	r1, r5
   da120:	a803      	add	r0, sp, #12
   da122:	9502      	str	r5, [sp, #8]
   da124:	f001 f876 	bl	db214 <memset>
    asctime_r(&calendar_time, ascstr);
   da128:	a902      	add	r1, sp, #8
   da12a:	a809      	add	r0, sp, #36	; 0x24
   da12c:	f001 f80c 	bl	db148 <asctime_r>
    int len = strlen(ascstr);
   da130:	a802      	add	r0, sp, #8
   da132:	f001 f916 	bl	db362 <strlen>
    ascstr[len-1] = 0; // remove final newline
   da136:	ab12      	add	r3, sp, #72	; 0x48
   da138:	4418      	add	r0, r3
    return String(ascstr);
   da13a:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da13c:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da140:	4620      	mov	r0, r4
   da142:	f7ff fe72 	bl	d9e2a <_ZN6StringC1EPKc>
}
   da146:	4620      	mov	r0, r4
   da148:	b013      	add	sp, #76	; 0x4c
   da14a:	bd30      	pop	{r4, r5, pc}
   da14c:	2003e5d8 	.word	0x2003e5d8
   da150:	2003e5d0 	.word	0x2003e5d0

000da154 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da158:	b0a5      	sub	sp, #148	; 0x94
   da15a:	4607      	mov	r7, r0
   da15c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da15e:	a814      	add	r0, sp, #80	; 0x50
{
   da160:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da162:	223f      	movs	r2, #63	; 0x3f
{
   da164:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da166:	f001 f916 	bl	db396 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da16a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da16c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da16e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da172:	f001 f8f6 	bl	db362 <strlen>
   da176:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da178:	bb5d      	cbnz	r5, da1d2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da17a:	492a      	ldr	r1, [pc, #168]	; (da224 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da17c:	a803      	add	r0, sp, #12
   da17e:	f001 f8ca 	bl	db316 <strcpy>
   da182:	ae14      	add	r6, sp, #80	; 0x50
{
   da184:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da186:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da18a:	45ab      	cmp	fp, r5
   da18c:	d936      	bls.n	da1fc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da18e:	46b1      	mov	r9, r6
   da190:	f105 0a01 	add.w	sl, r5, #1
   da194:	f819 3b01 	ldrb.w	r3, [r9], #1
   da198:	2b25      	cmp	r3, #37	; 0x25
   da19a:	d117      	bne.n	da1cc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da19c:	7873      	ldrb	r3, [r6, #1]
   da19e:	2b7a      	cmp	r3, #122	; 0x7a
   da1a0:	d114      	bne.n	da1cc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da1a2:	a803      	add	r0, sp, #12
   da1a4:	f001 f8dd 	bl	db362 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da1a8:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da1aa:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da1ac:	1828      	adds	r0, r5, r0
   da1ae:	4418      	add	r0, r3
   da1b0:	ebab 0205 	sub.w	r2, fp, r5
   da1b4:	1cb1      	adds	r1, r6, #2
   da1b6:	f001 f805 	bl	db1c4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da1ba:	4622      	mov	r2, r4
   da1bc:	a903      	add	r1, sp, #12
   da1be:	4630      	mov	r0, r6
   da1c0:	f001 f800 	bl	db1c4 <memcpy>
            len = strlen(format_str);
   da1c4:	a814      	add	r0, sp, #80	; 0x50
   da1c6:	f001 f8cc 	bl	db362 <strlen>
   da1ca:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da1cc:	464e      	mov	r6, r9
   da1ce:	4655      	mov	r5, sl
   da1d0:	e7d9      	b.n	da186 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da1d2:	213c      	movs	r1, #60	; 0x3c
   da1d4:	fb95 f3f1 	sdiv	r3, r5, r1
   da1d8:	2b00      	cmp	r3, #0
   da1da:	bfb8      	it	lt
   da1dc:	425b      	neglt	r3, r3
   da1de:	fbb3 f2f1 	udiv	r2, r3, r1
   da1e2:	fb01 3312 	mls	r3, r1, r2, r3
   da1e6:	9300      	str	r3, [sp, #0]
   da1e8:	4a0f      	ldr	r2, [pc, #60]	; (da228 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da1ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da1ee:	2110      	movs	r1, #16
   da1f0:	a803      	add	r0, sp, #12
   da1f2:	fb95 f3f3 	sdiv	r3, r5, r3
   da1f6:	f7fd fb0b 	bl	d7810 <snprintf>
   da1fa:	e7c2      	b.n	da182 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da1fc:	2100      	movs	r1, #0
   da1fe:	222e      	movs	r2, #46	; 0x2e
   da200:	a808      	add	r0, sp, #32
   da202:	9107      	str	r1, [sp, #28]
   da204:	f001 f806 	bl	db214 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da208:	4643      	mov	r3, r8
   da20a:	aa14      	add	r2, sp, #80	; 0x50
   da20c:	2132      	movs	r1, #50	; 0x32
   da20e:	a807      	add	r0, sp, #28
   da210:	f7fd fb26 	bl	d7860 <strftime>
    return String(buf);
   da214:	a907      	add	r1, sp, #28
   da216:	4638      	mov	r0, r7
   da218:	f7ff fe07 	bl	d9e2a <_ZN6StringC1EPKc>
}
   da21c:	4638      	mov	r0, r7
   da21e:	b025      	add	sp, #148	; 0x94
   da220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da224:	000dc1fe 	.word	0x000dc1fe
   da228:	000dc200 	.word	0x000dc200

000da22c <_ZN9TimeClass6formatExPKc>:
{
   da22c:	b5f0      	push	{r4, r5, r6, r7, lr}
   da22e:	b08d      	sub	sp, #52	; 0x34
   da230:	e9cd 2300 	strd	r2, r3, [sp]
   da234:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da236:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da238:	b915      	cbnz	r5, da240 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da23a:	4b19      	ldr	r3, [pc, #100]	; (da2a0 <_ZN9TimeClass6formatExPKc+0x74>)
   da23c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da23e:	b12d      	cbz	r5, da24c <_ZN9TimeClass6formatExPKc+0x20>
   da240:	4b18      	ldr	r3, [pc, #96]	; (da2a4 <_ZN9TimeClass6formatExPKc+0x78>)
   da242:	4628      	mov	r0, r5
   da244:	6819      	ldr	r1, [r3, #0]
   da246:	f001 f85c 	bl	db302 <strcmp>
   da24a:	b938      	cbnz	r0, da25c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da24c:	e9dd 2300 	ldrd	r2, r3, [sp]
   da250:	4620      	mov	r0, r4
   da252:	f7ff ff47 	bl	da0e4 <_ZN9TimeClass7timeStrEx>
}
   da256:	4620      	mov	r0, r4
   da258:	b00d      	add	sp, #52	; 0x34
   da25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da25c:	4e12      	ldr	r6, [pc, #72]	; (da2a8 <_ZN9TimeClass6formatExPKc+0x7c>)
   da25e:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da260:	4f12      	ldr	r7, [pc, #72]	; (da2ac <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da262:	e9d6 3200 	ldrd	r3, r2, [r6]
   da266:	185b      	adds	r3, r3, r1
   da268:	9901      	ldr	r1, [sp, #4]
   da26a:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da26e:	e9d7 0100 	ldrd	r0, r1, [r7]
   da272:	181b      	adds	r3, r3, r0
   da274:	eb41 0202 	adc.w	r2, r1, r2
   da278:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da27c:	2100      	movs	r1, #0
   da27e:	2224      	movs	r2, #36	; 0x24
   da280:	a803      	add	r0, sp, #12
   da282:	f000 ffc7 	bl	db214 <memset>
    localtime_r(&t, &calendar_time);
   da286:	a903      	add	r1, sp, #12
   da288:	4668      	mov	r0, sp
   da28a:	f7fd faf1 	bl	d7870 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da28e:	6832      	ldr	r2, [r6, #0]
   da290:	683b      	ldr	r3, [r7, #0]
   da292:	a903      	add	r1, sp, #12
   da294:	4413      	add	r3, r2
   da296:	4620      	mov	r0, r4
   da298:	462a      	mov	r2, r5
   da29a:	f7ff ff5b 	bl	da154 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da29e:	e7da      	b.n	da256 <_ZN9TimeClass6formatExPKc+0x2a>
   da2a0:	2003e5cc 	.word	0x2003e5cc
   da2a4:	2003de24 	.word	0x2003de24
   da2a8:	2003e5d8 	.word	0x2003e5d8
   da2ac:	2003e5d0 	.word	0x2003e5d0

000da2b0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da2b0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da2b2:	2000      	movs	r0, #0
   da2b4:	f7fc ffaa 	bl	d720c <hal_rtc_time_is_valid>
    if (rtcstate)
   da2b8:	4604      	mov	r4, r0
   da2ba:	b9a0      	cbnz	r0, da2e6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da2bc:	f7fd f988 	bl	d75d0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da2c0:	2801      	cmp	r0, #1
   da2c2:	d110      	bne.n	da2e6 <_ZN9TimeClass7isValidEv+0x36>
   da2c4:	4620      	mov	r0, r4
   da2c6:	f7fd f9bb 	bl	d7640 <system_thread_get_state>
   da2ca:	b960      	cbnz	r0, da2e6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da2cc:	f7ff feea 	bl	da0a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da2d0:	b910      	cbnz	r0, da2d8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da2d2:	f7fd f9ed 	bl	d76b0 <spark_process>
        while (_while() && !_condition()) {
   da2d6:	e7f9      	b.n	da2cc <_ZN9TimeClass7isValidEv+0x1c>
   da2d8:	f7ff fee4 	bl	da0a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da2e0:	2000      	movs	r0, #0
   da2e2:	f7fc bf93 	b.w	d720c <hal_rtc_time_is_valid>
}
   da2e6:	4620      	mov	r0, r4
   da2e8:	bd10      	pop	{r4, pc}

000da2ea <_ZN9TimeClass3nowEv>:
{
   da2ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da2ec:	f7ff ffe0 	bl	da2b0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da2f0:	2210      	movs	r2, #16
   da2f2:	2100      	movs	r1, #0
   da2f4:	4668      	mov	r0, sp
   da2f6:	f000 ff8d 	bl	db214 <memset>
    hal_rtc_get_time(&tv, nullptr);
   da2fa:	2100      	movs	r1, #0
   da2fc:	4668      	mov	r0, sp
   da2fe:	f7fc ff8d 	bl	d721c <hal_rtc_get_time>
}
   da302:	9800      	ldr	r0, [sp, #0]
   da304:	b005      	add	sp, #20
   da306:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da30c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da30c:	4b02      	ldr	r3, [pc, #8]	; (da318 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da30e:	681a      	ldr	r2, [r3, #0]
   da310:	4b02      	ldr	r3, [pc, #8]	; (da31c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da312:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da314:	4770      	bx	lr
   da316:	bf00      	nop
   da318:	2003de24 	.word	0x2003de24
   da31c:	2003e5cc 	.word	0x2003e5cc

000da320 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   da320:	4770      	bx	lr

000da322 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da322:	7441      	strb	r1, [r0, #17]
}
   da324:	4770      	bx	lr

000da326 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da326:	4770      	bx	lr

000da328 <_ZN11USARTSerial17availableForWriteEv>:
{
   da328:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   da32a:	7c00      	ldrb	r0, [r0, #16]
   da32c:	f7fd f8ce 	bl	d74cc <hal_usart_available_data_for_write>
}
   da330:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da334:	bd08      	pop	{r3, pc}

000da336 <_ZN11USARTSerial9availableEv>:
{
   da336:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   da338:	7c00      	ldrb	r0, [r0, #16]
   da33a:	f7fd f89f 	bl	d747c <hal_usart_available>
}
   da33e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da342:	bd08      	pop	{r3, pc}

000da344 <_ZN11USARTSerial4peekEv>:
{
   da344:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   da346:	7c00      	ldrb	r0, [r0, #16]
   da348:	f7fd f8a8 	bl	d749c <hal_usart_peek>
}
   da34c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da350:	bd08      	pop	{r3, pc}

000da352 <_ZN11USARTSerial4readEv>:
{
   da352:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   da354:	7c00      	ldrb	r0, [r0, #16]
   da356:	f7fd f899 	bl	d748c <hal_usart_read>
}
   da35a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da35e:	bd08      	pop	{r3, pc}

000da360 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   da360:	7c00      	ldrb	r0, [r0, #16]
   da362:	f7fd b8a3 	b.w	d74ac <hal_usart_flush>

000da366 <_ZN11USARTSerial5writeEh>:
{
   da366:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da368:	7c45      	ldrb	r5, [r0, #17]
{
   da36a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da36c:	b12d      	cbz	r5, da37a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   da36e:	7c20      	ldrb	r0, [r4, #16]
}
   da370:	b003      	add	sp, #12
   da372:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   da376:	f7fd b879 	b.w	d746c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da37a:	7c00      	ldrb	r0, [r0, #16]
   da37c:	9101      	str	r1, [sp, #4]
   da37e:	f7fd f8a5 	bl	d74cc <hal_usart_available_data_for_write>
   da382:	2800      	cmp	r0, #0
   da384:	9901      	ldr	r1, [sp, #4]
   da386:	dcf2      	bgt.n	da36e <_ZN11USARTSerial5writeEh+0x8>
}
   da388:	4628      	mov	r0, r5
   da38a:	b003      	add	sp, #12
   da38c:	bd30      	pop	{r4, r5, pc}

000da38e <_ZN11USARTSerialD0Ev>:
   da38e:	b510      	push	{r4, lr}
   da390:	2114      	movs	r1, #20
   da392:	4604      	mov	r4, r0
   da394:	f000 fa90 	bl	da8b8 <_ZdlPvj>
   da398:	4620      	mov	r0, r4
   da39a:	bd10      	pop	{r4, pc}

000da39c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   da39c:	b510      	push	{r4, lr}
   da39e:	f04f 0c00 	mov.w	ip, #0
   da3a2:	4604      	mov	r4, r0
   da3a4:	4608      	mov	r0, r1
   da3a6:	4611      	mov	r1, r2
   da3a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da3ac:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da3b0:	4a04      	ldr	r2, [pc, #16]	; (da3c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da3b2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da3b4:	2201      	movs	r2, #1
  _serial = serial;
   da3b6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da3b8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da3ba:	461a      	mov	r2, r3
   da3bc:	f7fd f846 	bl	d744c <hal_usart_init>
}
   da3c0:	4620      	mov	r0, r4
   da3c2:	bd10      	pop	{r4, pc}
   da3c4:	000dc230 	.word	0x000dc230

000da3c8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   da3c8:	7c00      	ldrb	r0, [r0, #16]
   da3ca:	2300      	movs	r3, #0
   da3cc:	f7fd b886 	b.w	d74dc <hal_usart_begin_config>

000da3d0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   da3d0:	2200      	movs	r2, #0
   da3d2:	f7ff bff9 	b.w	da3c8 <_ZN11USARTSerial5beginEmm>

000da3d6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   da3d6:	7c00      	ldrb	r0, [r0, #16]
   da3d8:	f7fd b840 	b.w	d745c <hal_usart_end>

000da3dc <_Z22__fetch_global_Serial1v>:
{
   da3dc:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da3de:	4c0d      	ldr	r4, [pc, #52]	; (da414 <_Z22__fetch_global_Serial1v+0x38>)
   da3e0:	7821      	ldrb	r1, [r4, #0]
   da3e2:	f3bf 8f5b 	dmb	ish
   da3e6:	f011 0101 	ands.w	r1, r1, #1
   da3ea:	d110      	bne.n	da40e <_Z22__fetch_global_Serial1v+0x32>
   da3ec:	4620      	mov	r0, r4
   da3ee:	9101      	str	r1, [sp, #4]
   da3f0:	f7f9 fe62 	bl	d40b8 <__cxa_guard_acquire>
   da3f4:	9901      	ldr	r1, [sp, #4]
   da3f6:	b150      	cbz	r0, da40e <_Z22__fetch_global_Serial1v+0x32>
   da3f8:	4b07      	ldr	r3, [pc, #28]	; (da418 <_Z22__fetch_global_Serial1v+0x3c>)
   da3fa:	4a08      	ldr	r2, [pc, #32]	; (da41c <_Z22__fetch_global_Serial1v+0x40>)
   da3fc:	4808      	ldr	r0, [pc, #32]	; (da420 <_Z22__fetch_global_Serial1v+0x44>)
   da3fe:	f7ff ffcd 	bl	da39c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da402:	4620      	mov	r0, r4
   da404:	f7f9 fe5d 	bl	d40c2 <__cxa_guard_release>
   da408:	4806      	ldr	r0, [pc, #24]	; (da424 <_Z22__fetch_global_Serial1v+0x48>)
   da40a:	f000 fec3 	bl	db194 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da40e:	4804      	ldr	r0, [pc, #16]	; (da420 <_Z22__fetch_global_Serial1v+0x44>)
   da410:	b002      	add	sp, #8
   da412:	bd10      	pop	{r4, pc}
   da414:	2003e5e0 	.word	0x2003e5e0
   da418:	2003e668 	.word	0x2003e668
   da41c:	2003e5e4 	.word	0x2003e5e4
   da420:	2003e6ec 	.word	0x2003e6ec
   da424:	000da327 	.word	0x000da327

000da428 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da428:	7441      	strb	r1, [r0, #17]
}
   da42a:	4770      	bx	lr

000da42c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da42c:	4770      	bx	lr

000da42e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   da42e:	4770      	bx	lr

000da430 <_ZN9USBSerial4readEv>:
{
   da430:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   da432:	2100      	movs	r1, #0
   da434:	7c00      	ldrb	r0, [r0, #16]
   da436:	f7fd f881 	bl	d753c <HAL_USB_USART_Receive_Data>
}
   da43a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da43e:	bd08      	pop	{r3, pc}

000da440 <_ZN9USBSerial4peekEv>:
{
   da440:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   da442:	2101      	movs	r1, #1
   da444:	7c00      	ldrb	r0, [r0, #16]
   da446:	f7fd f879 	bl	d753c <HAL_USB_USART_Receive_Data>
}
   da44a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da44e:	bd08      	pop	{r3, pc}

000da450 <_ZN9USBSerial17availableForWriteEv>:
{
   da450:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   da452:	7c00      	ldrb	r0, [r0, #16]
   da454:	f7fd f86a 	bl	d752c <HAL_USB_USART_Available_Data_For_Write>
}
   da458:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da45c:	bd08      	pop	{r3, pc}

000da45e <_ZN9USBSerial9availableEv>:
{
   da45e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   da460:	7c00      	ldrb	r0, [r0, #16]
   da462:	f7fd f85b 	bl	d751c <HAL_USB_USART_Available_Data>
}
   da466:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da46a:	bd08      	pop	{r3, pc}

000da46c <_ZN9USBSerial5writeEh>:
{
   da46c:	b513      	push	{r0, r1, r4, lr}
   da46e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da470:	7c00      	ldrb	r0, [r0, #16]
{
   da472:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da474:	f7fd f85a 	bl	d752c <HAL_USB_USART_Available_Data_For_Write>
   da478:	2800      	cmp	r0, #0
   da47a:	9901      	ldr	r1, [sp, #4]
   da47c:	dc01      	bgt.n	da482 <_ZN9USBSerial5writeEh+0x16>
   da47e:	7c60      	ldrb	r0, [r4, #17]
   da480:	b120      	cbz	r0, da48c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da482:	7c20      	ldrb	r0, [r4, #16]
   da484:	f7fd f862 	bl	d754c <HAL_USB_USART_Send_Data>
   da488:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   da48c:	b002      	add	sp, #8
   da48e:	bd10      	pop	{r4, pc}

000da490 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   da490:	7c00      	ldrb	r0, [r0, #16]
   da492:	f7fd b863 	b.w	d755c <HAL_USB_USART_Flush_Data>

000da496 <_ZN9USBSerialD0Ev>:
   da496:	b510      	push	{r4, lr}
   da498:	2114      	movs	r1, #20
   da49a:	4604      	mov	r4, r0
   da49c:	f000 fa0c 	bl	da8b8 <_ZdlPvj>
   da4a0:	4620      	mov	r0, r4
   da4a2:	bd10      	pop	{r4, pc}

000da4a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da4a4:	b510      	push	{r4, lr}
   da4a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da4aa:	4604      	mov	r4, r0
   da4ac:	4608      	mov	r0, r1
   da4ae:	2100      	movs	r1, #0
   da4b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da4b4:	4b04      	ldr	r3, [pc, #16]	; (da4c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da4b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   da4b8:	2301      	movs	r3, #1
  _serial = serial;
   da4ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da4bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   da4be:	4611      	mov	r1, r2
   da4c0:	f7fd f814 	bl	d74ec <HAL_USB_USART_Init>
}
   da4c4:	4620      	mov	r0, r4
   da4c6:	bd10      	pop	{r4, pc}
   da4c8:	000dc260 	.word	0x000dc260

000da4cc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   da4cc:	7c00      	ldrb	r0, [r0, #16]
   da4ce:	2200      	movs	r2, #0
   da4d0:	f7fd b814 	b.w	d74fc <HAL_USB_USART_Begin>

000da4d4 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   da4d4:	7c00      	ldrb	r0, [r0, #16]
   da4d6:	f7fd b819 	b.w	d750c <HAL_USB_USART_End>

000da4da <_Z19acquireSerialBufferv>:
{
   da4da:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da4dc:	2214      	movs	r2, #20
{
   da4de:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da4e0:	2100      	movs	r1, #0
   da4e2:	f000 fe97 	bl	db214 <memset>
}
   da4e6:	4620      	mov	r0, r4
   da4e8:	bd10      	pop	{r4, pc}
	...

000da4ec <_Z16_fetch_usbserialv>:
{
   da4ec:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da4ee:	4c0f      	ldr	r4, [pc, #60]	; (da52c <_Z16_fetch_usbserialv+0x40>)
{
   da4f0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da4f2:	a803      	add	r0, sp, #12
   da4f4:	f7ff fff1 	bl	da4da <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da4f8:	7821      	ldrb	r1, [r4, #0]
   da4fa:	f3bf 8f5b 	dmb	ish
   da4fe:	f011 0101 	ands.w	r1, r1, #1
   da502:	d10f      	bne.n	da524 <_Z16_fetch_usbserialv+0x38>
   da504:	4620      	mov	r0, r4
   da506:	9101      	str	r1, [sp, #4]
   da508:	f7f9 fdd6 	bl	d40b8 <__cxa_guard_acquire>
   da50c:	9901      	ldr	r1, [sp, #4]
   da50e:	b148      	cbz	r0, da524 <_Z16_fetch_usbserialv+0x38>
   da510:	aa03      	add	r2, sp, #12
   da512:	4807      	ldr	r0, [pc, #28]	; (da530 <_Z16_fetch_usbserialv+0x44>)
   da514:	f7ff ffc6 	bl	da4a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da518:	4620      	mov	r0, r4
   da51a:	f7f9 fdd2 	bl	d40c2 <__cxa_guard_release>
   da51e:	4805      	ldr	r0, [pc, #20]	; (da534 <_Z16_fetch_usbserialv+0x48>)
   da520:	f000 fe38 	bl	db194 <atexit>
	return _usbserial;
}
   da524:	4802      	ldr	r0, [pc, #8]	; (da530 <_Z16_fetch_usbserialv+0x44>)
   da526:	b008      	add	sp, #32
   da528:	bd10      	pop	{r4, pc}
   da52a:	bf00      	nop
   da52c:	2003e700 	.word	0x2003e700
   da530:	2003e704 	.word	0x2003e704
   da534:	000da42d 	.word	0x000da42d

000da538 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da538:	4b01      	ldr	r3, [pc, #4]	; (da540 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da53a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da53c:	4770      	bx	lr
   da53e:	bf00      	nop
   da540:	2003de28 	.word	0x2003de28

000da544 <serialEventRun>:
{
   da544:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da546:	4b0b      	ldr	r3, [pc, #44]	; (da574 <serialEventRun+0x30>)
   da548:	b143      	cbz	r3, da55c <serialEventRun+0x18>
   da54a:	f7ff ffcf 	bl	da4ec <_Z16_fetch_usbserialv>
   da54e:	6803      	ldr	r3, [r0, #0]
   da550:	691b      	ldr	r3, [r3, #16]
   da552:	4798      	blx	r3
   da554:	2800      	cmp	r0, #0
   da556:	dd01      	ble.n	da55c <serialEventRun+0x18>
        serialEvent();
   da558:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da55c:	4b06      	ldr	r3, [pc, #24]	; (da578 <serialEventRun+0x34>)
   da55e:	b143      	cbz	r3, da572 <serialEventRun+0x2e>
   da560:	f7ff ff3c 	bl	da3dc <_Z22__fetch_global_Serial1v>
   da564:	6803      	ldr	r3, [r0, #0]
   da566:	691b      	ldr	r3, [r3, #16]
   da568:	4798      	blx	r3
   da56a:	2800      	cmp	r0, #0
   da56c:	dd01      	ble.n	da572 <serialEventRun+0x2e>
        serialEvent1();
   da56e:	f3af 8000 	nop.w
}
   da572:	bd08      	pop	{r3, pc}
	...

000da57c <_post_loop>:
{
   da57c:	b508      	push	{r3, lr}
	serialEventRun();
   da57e:	f7ff ffe1 	bl	da544 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da582:	f7fc fe3b 	bl	d71fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da586:	4b01      	ldr	r3, [pc, #4]	; (da58c <_post_loop+0x10>)
   da588:	6018      	str	r0, [r3, #0]
}
   da58a:	bd08      	pop	{r3, pc}
   da58c:	2003e720 	.word	0x2003e720

000da590 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da590:	4805      	ldr	r0, [pc, #20]	; (da5a8 <_Z33system_initialize_user_backup_ramv+0x18>)
   da592:	4a06      	ldr	r2, [pc, #24]	; (da5ac <_Z33system_initialize_user_backup_ramv+0x1c>)
   da594:	4906      	ldr	r1, [pc, #24]	; (da5b0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   da596:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da598:	1a12      	subs	r2, r2, r0
   da59a:	f000 fe13 	bl	db1c4 <memcpy>
    __backup_sram_signature = signature;
   da59e:	4b05      	ldr	r3, [pc, #20]	; (da5b4 <_Z33system_initialize_user_backup_ramv+0x24>)
   da5a0:	4a05      	ldr	r2, [pc, #20]	; (da5b8 <_Z33system_initialize_user_backup_ramv+0x28>)
   da5a2:	601a      	str	r2, [r3, #0]
}
   da5a4:	bd08      	pop	{r3, pc}
   da5a6:	bf00      	nop
   da5a8:	2003f400 	.word	0x2003f400
   da5ac:	2003f404 	.word	0x2003f404
   da5b0:	000dc420 	.word	0x000dc420
   da5b4:	2003f400 	.word	0x2003f400
   da5b8:	9a271c1e 	.word	0x9a271c1e

000da5bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da5bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da5be:	2300      	movs	r3, #0
   da5c0:	9300      	str	r3, [sp, #0]
   da5c2:	461a      	mov	r2, r3
   da5c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da5c8:	f7fd f854 	bl	d7674 <system_ctrl_set_result>
}
   da5cc:	b003      	add	sp, #12
   da5ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da5d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da5d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da5d6:	8843      	ldrh	r3, [r0, #2]
   da5d8:	2b0a      	cmp	r3, #10
   da5da:	d008      	beq.n	da5ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da5dc:	2b50      	cmp	r3, #80	; 0x50
   da5de:	d10b      	bne.n	da5f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da5e0:	4b09      	ldr	r3, [pc, #36]	; (da608 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da5e2:	681b      	ldr	r3, [r3, #0]
   da5e4:	b14b      	cbz	r3, da5fa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da5e6:	b003      	add	sp, #12
   da5e8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da5ec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da5ee:	f7ff ffe5 	bl	da5bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da5f2:	b003      	add	sp, #12
   da5f4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da5f8:	2300      	movs	r3, #0
   da5fa:	9300      	str	r3, [sp, #0]
   da5fc:	461a      	mov	r2, r3
   da5fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da602:	f7fd f837 	bl	d7674 <system_ctrl_set_result>
}
   da606:	e7f4      	b.n	da5f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da608:	2003e71c 	.word	0x2003e71c

000da60c <module_user_init_hook>:
{
   da60c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da60e:	4812      	ldr	r0, [pc, #72]	; (da658 <module_user_init_hook+0x4c>)
   da610:	2100      	movs	r1, #0
   da612:	f7fd f91d 	bl	d7850 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   da616:	4b11      	ldr	r3, [pc, #68]	; (da65c <module_user_init_hook+0x50>)
   da618:	681a      	ldr	r2, [r3, #0]
   da61a:	4b11      	ldr	r3, [pc, #68]	; (da660 <module_user_init_hook+0x54>)
   da61c:	429a      	cmp	r2, r3
   da61e:	4b11      	ldr	r3, [pc, #68]	; (da664 <module_user_init_hook+0x58>)
   da620:	bf0c      	ite	eq
   da622:	2201      	moveq	r2, #1
   da624:	2200      	movne	r2, #0
   da626:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da628:	d001      	beq.n	da62e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   da62a:	f7ff ffb1 	bl	da590 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da62e:	f7fc fdd5 	bl	d71dc <HAL_RNG_GetRandomNumber>
   da632:	4604      	mov	r4, r0
    srand(seed);
   da634:	f000 fdf6 	bl	db224 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da638:	4b0b      	ldr	r3, [pc, #44]	; (da668 <module_user_init_hook+0x5c>)
   da63a:	b113      	cbz	r3, da642 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   da63c:	4620      	mov	r0, r4
   da63e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da642:	2100      	movs	r1, #0
   da644:	4808      	ldr	r0, [pc, #32]	; (da668 <module_user_init_hook+0x5c>)
   da646:	f7fd f85b 	bl	d7700 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da64e:	4807      	ldr	r0, [pc, #28]	; (da66c <module_user_init_hook+0x60>)
   da650:	2100      	movs	r1, #0
   da652:	f7fd b805 	b.w	d7660 <system_ctrl_set_app_request_handler>
   da656:	bf00      	nop
   da658:	000da539 	.word	0x000da539
   da65c:	2003f400 	.word	0x2003f400
   da660:	9a271c1e 	.word	0x9a271c1e
   da664:	2003e718 	.word	0x2003e718
   da668:	00000000 	.word	0x00000000
   da66c:	000da5d5 	.word	0x000da5d5

000da670 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da670:	b508      	push	{r3, lr}
   da672:	4b02      	ldr	r3, [pc, #8]	; (da67c <spark_protocol_instance+0xc>)
   da674:	681b      	ldr	r3, [r3, #0]
   da676:	681b      	ldr	r3, [r3, #0]
   da678:	9301      	str	r3, [sp, #4]
   da67a:	bd08      	pop	{r3, pc}
   da67c:	0003025c 	.word	0x0003025c

000da680 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da680:	b508      	push	{r3, lr}
   da682:	4b02      	ldr	r3, [pc, #8]	; (da68c <spark_protocol_set_product_id+0xc>)
   da684:	681b      	ldr	r3, [r3, #0]
   da686:	685b      	ldr	r3, [r3, #4]
   da688:	9301      	str	r3, [sp, #4]
   da68a:	bd08      	pop	{r3, pc}
   da68c:	0003025c 	.word	0x0003025c

000da690 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da690:	b508      	push	{r3, lr}
   da692:	4b02      	ldr	r3, [pc, #8]	; (da69c <spark_protocol_set_product_firmware_version+0xc>)
   da694:	681b      	ldr	r3, [r3, #0]
   da696:	689b      	ldr	r3, [r3, #8]
   da698:	9301      	str	r3, [sp, #4]
   da69a:	bd08      	pop	{r3, pc}
   da69c:	0003025c 	.word	0x0003025c

000da6a0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da6a0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da6a2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da6a4:	d902      	bls.n	da6ac <pinAvailable+0xc>
    return false;
   da6a6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da6a8:	b002      	add	sp, #8
   da6aa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da6ac:	f1a0 030b 	sub.w	r3, r0, #11
   da6b0:	2b02      	cmp	r3, #2
   da6b2:	d81a      	bhi.n	da6ea <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da6b4:	4c17      	ldr	r4, [pc, #92]	; (da714 <pinAvailable+0x74>)
   da6b6:	7821      	ldrb	r1, [r4, #0]
   da6b8:	f3bf 8f5b 	dmb	ish
   da6bc:	f011 0101 	ands.w	r1, r1, #1
   da6c0:	d10b      	bne.n	da6da <pinAvailable+0x3a>
   da6c2:	4620      	mov	r0, r4
   da6c4:	9101      	str	r1, [sp, #4]
   da6c6:	f7f9 fcf7 	bl	d40b8 <__cxa_guard_acquire>
   da6ca:	9901      	ldr	r1, [sp, #4]
   da6cc:	b128      	cbz	r0, da6da <pinAvailable+0x3a>
   da6ce:	4812      	ldr	r0, [pc, #72]	; (da718 <pinAvailable+0x78>)
   da6d0:	f7ff faa6 	bl	d9c20 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da6d4:	4620      	mov	r0, r4
   da6d6:	f7f9 fcf4 	bl	d40c2 <__cxa_guard_release>
   da6da:	4b0f      	ldr	r3, [pc, #60]	; (da718 <pinAvailable+0x78>)
   da6dc:	7818      	ldrb	r0, [r3, #0]
   da6de:	f7fc fe8d 	bl	d73fc <hal_spi_is_enabled>
   da6e2:	2800      	cmp	r0, #0
   da6e4:	d1df      	bne.n	da6a6 <pinAvailable+0x6>
  return true; // 'pin' is available
   da6e6:	2001      	movs	r0, #1
   da6e8:	e7de      	b.n	da6a8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da6ea:	2801      	cmp	r0, #1
   da6ec:	d809      	bhi.n	da702 <pinAvailable+0x62>
   da6ee:	f000 f89b 	bl	da828 <_Z19__fetch_global_Wirev>
   da6f2:	2100      	movs	r1, #0
   da6f4:	7c00      	ldrb	r0, [r0, #16]
   da6f6:	f7fc fe21 	bl	d733c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da6fa:	f080 0001 	eor.w	r0, r0, #1
   da6fe:	b2c0      	uxtb	r0, r0
   da700:	e7d2      	b.n	da6a8 <pinAvailable+0x8>
   da702:	3809      	subs	r0, #9
   da704:	2801      	cmp	r0, #1
   da706:	d8ee      	bhi.n	da6e6 <pinAvailable+0x46>
   da708:	f7ff fe68 	bl	da3dc <_Z22__fetch_global_Serial1v>
   da70c:	7c00      	ldrb	r0, [r0, #16]
   da70e:	f7fc fed5 	bl	d74bc <hal_usart_is_enabled>
   da712:	e7f2      	b.n	da6fa <pinAvailable+0x5a>
   da714:	2003e300 	.word	0x2003e300
   da718:	2003e304 	.word	0x2003e304

000da71c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da71c:	2823      	cmp	r0, #35	; 0x23
{
   da71e:	b538      	push	{r3, r4, r5, lr}
   da720:	4604      	mov	r4, r0
   da722:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da724:	d80a      	bhi.n	da73c <pinMode+0x20>
   da726:	29ff      	cmp	r1, #255	; 0xff
   da728:	d008      	beq.n	da73c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da72a:	f7ff ffb9 	bl	da6a0 <pinAvailable>
   da72e:	b128      	cbz	r0, da73c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da730:	4629      	mov	r1, r5
   da732:	4620      	mov	r0, r4
}
   da734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da738:	f7fc bd88 	b.w	d724c <HAL_Pin_Mode>
}
   da73c:	bd38      	pop	{r3, r4, r5, pc}

000da73e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da73e:	b538      	push	{r3, r4, r5, lr}
   da740:	4604      	mov	r4, r0
   da742:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da744:	f7fc fd8a 	bl	d725c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da748:	28ff      	cmp	r0, #255	; 0xff
   da74a:	d010      	beq.n	da76e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da74c:	2806      	cmp	r0, #6
   da74e:	d804      	bhi.n	da75a <digitalWrite+0x1c>
   da750:	234d      	movs	r3, #77	; 0x4d
   da752:	fa23 f000 	lsr.w	r0, r3, r0
   da756:	07c3      	lsls	r3, r0, #31
   da758:	d409      	bmi.n	da76e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da75a:	4620      	mov	r0, r4
   da75c:	f7ff ffa0 	bl	da6a0 <pinAvailable>
   da760:	b128      	cbz	r0, da76e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da762:	4629      	mov	r1, r5
   da764:	4620      	mov	r0, r4
}
   da766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da76a:	f7fc bd7f 	b.w	d726c <HAL_GPIO_Write>
}
   da76e:	bd38      	pop	{r3, r4, r5, pc}

000da770 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da770:	b510      	push	{r4, lr}
   da772:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da774:	f7fc fd72 	bl	d725c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   da778:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   da77a:	b2db      	uxtb	r3, r3
   da77c:	2b01      	cmp	r3, #1
   da77e:	d908      	bls.n	da792 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da780:	4620      	mov	r0, r4
   da782:	f7ff ff8d 	bl	da6a0 <pinAvailable>
   da786:	b120      	cbz	r0, da792 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da788:	4620      	mov	r0, r4
}
   da78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   da78e:	f7fc bd75 	b.w	d727c <HAL_GPIO_Read>
}
   da792:	2000      	movs	r0, #0
   da794:	bd10      	pop	{r4, pc}

000da796 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   da796:	280d      	cmp	r0, #13
{
   da798:	b510      	push	{r4, lr}
   da79a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   da79c:	bf9c      	itt	ls
   da79e:	340e      	addls	r4, #14
   da7a0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da7a2:	4620      	mov	r0, r4
   da7a4:	f7ff ff7c 	bl	da6a0 <pinAvailable>
   da7a8:	b150      	cbz	r0, da7c0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   da7aa:	2103      	movs	r1, #3
   da7ac:	4620      	mov	r0, r4
   da7ae:	f7fc fd45 	bl	d723c <HAL_Validate_Pin_Function>
   da7b2:	2803      	cmp	r0, #3
   da7b4:	d104      	bne.n	da7c0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   da7b6:	4620      	mov	r0, r4
}
   da7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   da7bc:	f7fc bd76 	b.w	d72ac <hal_adc_read>
}
   da7c0:	2000      	movs	r0, #0
   da7c2:	bd10      	pop	{r4, pc}

000da7c4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da7c4:	4770      	bx	lr

000da7c6 <__tcf_1>:
   da7c6:	4770      	bx	lr

000da7c8 <_Z17acquireWireBufferv>:
{
   da7c8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   da7ca:	2300      	movs	r3, #0
   da7cc:	2520      	movs	r5, #32
   da7ce:	8043      	strh	r3, [r0, #2]
   da7d0:	2314      	movs	r3, #20
{
   da7d2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   da7d4:	8003      	strh	r3, [r0, #0]
   da7d6:	6085      	str	r5, [r0, #8]
   da7d8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da7da:	4906      	ldr	r1, [pc, #24]	; (da7f4 <_Z17acquireWireBufferv+0x2c>)
   da7dc:	4628      	mov	r0, r5
   da7de:	f000 f86f 	bl	da8c0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da7e2:	4904      	ldr	r1, [pc, #16]	; (da7f4 <_Z17acquireWireBufferv+0x2c>)
	};
   da7e4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   da7e6:	4628      	mov	r0, r5
   da7e8:	f000 f86a 	bl	da8c0 <_ZnajRKSt9nothrow_t>
	};
   da7ec:	60e0      	str	r0, [r4, #12]
}
   da7ee:	4620      	mov	r0, r4
   da7f0:	bd38      	pop	{r3, r4, r5, pc}
   da7f2:	bf00      	nop
   da7f4:	000dc288 	.word	0x000dc288

000da7f8 <_Z18acquireWire1Bufferv>:
   da7f8:	b538      	push	{r3, r4, r5, lr}
   da7fa:	2300      	movs	r3, #0
   da7fc:	2520      	movs	r5, #32
   da7fe:	8043      	strh	r3, [r0, #2]
   da800:	2314      	movs	r3, #20
   da802:	4604      	mov	r4, r0
   da804:	8003      	strh	r3, [r0, #0]
   da806:	6085      	str	r5, [r0, #8]
   da808:	6105      	str	r5, [r0, #16]
   da80a:	4906      	ldr	r1, [pc, #24]	; (da824 <_Z18acquireWire1Bufferv+0x2c>)
   da80c:	4628      	mov	r0, r5
   da80e:	f000 f857 	bl	da8c0 <_ZnajRKSt9nothrow_t>
   da812:	4904      	ldr	r1, [pc, #16]	; (da824 <_Z18acquireWire1Bufferv+0x2c>)
   da814:	6060      	str	r0, [r4, #4]
   da816:	4628      	mov	r0, r5
   da818:	f000 f852 	bl	da8c0 <_ZnajRKSt9nothrow_t>
   da81c:	60e0      	str	r0, [r4, #12]
   da81e:	4620      	mov	r0, r4
   da820:	bd38      	pop	{r3, r4, r5, pc}
   da822:	bf00      	nop
   da824:	000dc288 	.word	0x000dc288

000da828 <_Z19__fetch_global_Wirev>:
{
   da828:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da82a:	4d0e      	ldr	r5, [pc, #56]	; (da864 <_Z19__fetch_global_Wirev+0x3c>)
   da82c:	7829      	ldrb	r1, [r5, #0]
   da82e:	f3bf 8f5b 	dmb	ish
   da832:	f011 0401 	ands.w	r4, r1, #1
{
   da836:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   da838:	d111      	bne.n	da85e <_Z19__fetch_global_Wirev+0x36>
   da83a:	4628      	mov	r0, r5
   da83c:	f7f9 fc3c 	bl	d40b8 <__cxa_guard_acquire>
   da840:	b168      	cbz	r0, da85e <_Z19__fetch_global_Wirev+0x36>
   da842:	a801      	add	r0, sp, #4
   da844:	f7ff ffc0 	bl	da7c8 <_Z17acquireWireBufferv>
   da848:	aa01      	add	r2, sp, #4
   da84a:	4621      	mov	r1, r4
   da84c:	4806      	ldr	r0, [pc, #24]	; (da868 <_Z19__fetch_global_Wirev+0x40>)
   da84e:	f7fd fd69 	bl	d8324 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da852:	4628      	mov	r0, r5
   da854:	f7f9 fc35 	bl	d40c2 <__cxa_guard_release>
   da858:	4804      	ldr	r0, [pc, #16]	; (da86c <_Z19__fetch_global_Wirev+0x44>)
   da85a:	f000 fc9b 	bl	db194 <atexit>
	return wire;
}
   da85e:	4802      	ldr	r0, [pc, #8]	; (da868 <_Z19__fetch_global_Wirev+0x40>)
   da860:	b007      	add	sp, #28
   da862:	bd30      	pop	{r4, r5, pc}
   da864:	2003e724 	.word	0x2003e724
   da868:	2003e72c 	.word	0x2003e72c
   da86c:	000da7c5 	.word	0x000da7c5

000da870 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   da870:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da872:	4c0e      	ldr	r4, [pc, #56]	; (da8ac <_Z20__fetch_global_Wire1v+0x3c>)
   da874:	7823      	ldrb	r3, [r4, #0]
   da876:	f3bf 8f5b 	dmb	ish
   da87a:	07db      	lsls	r3, r3, #31
{
   da87c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   da87e:	d411      	bmi.n	da8a4 <_Z20__fetch_global_Wire1v+0x34>
   da880:	4620      	mov	r0, r4
   da882:	f7f9 fc19 	bl	d40b8 <__cxa_guard_acquire>
   da886:	b168      	cbz	r0, da8a4 <_Z20__fetch_global_Wire1v+0x34>
   da888:	a801      	add	r0, sp, #4
   da88a:	f7ff ffb5 	bl	da7f8 <_Z18acquireWire1Bufferv>
   da88e:	aa01      	add	r2, sp, #4
   da890:	2101      	movs	r1, #1
   da892:	4807      	ldr	r0, [pc, #28]	; (da8b0 <_Z20__fetch_global_Wire1v+0x40>)
   da894:	f7fd fd46 	bl	d8324 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   da898:	4620      	mov	r0, r4
   da89a:	f7f9 fc12 	bl	d40c2 <__cxa_guard_release>
   da89e:	4805      	ldr	r0, [pc, #20]	; (da8b4 <_Z20__fetch_global_Wire1v+0x44>)
   da8a0:	f000 fc78 	bl	db194 <atexit>
	return wire;
}
   da8a4:	4802      	ldr	r0, [pc, #8]	; (da8b0 <_Z20__fetch_global_Wire1v+0x40>)
   da8a6:	b006      	add	sp, #24
   da8a8:	bd10      	pop	{r4, pc}
   da8aa:	bf00      	nop
   da8ac:	2003e728 	.word	0x2003e728
   da8b0:	2003e740 	.word	0x2003e740
   da8b4:	000da7c7 	.word	0x000da7c7

000da8b8 <_ZdlPvj>:
   da8b8:	f7f9 bbf1 	b.w	d409e <_ZdlPv>

000da8bc <_ZnwjRKSt9nothrow_t>:
   da8bc:	f7f9 bbeb 	b.w	d4096 <_Znwj>

000da8c0 <_ZnajRKSt9nothrow_t>:
   da8c0:	f7f9 bbeb 	b.w	d409a <_Znaj>

000da8c4 <_ZSt25__throw_bad_function_callv>:
   da8c4:	b508      	push	{r3, lr}
   da8c6:	f7fc ffb3 	bl	d7830 <abort>
	...

000da8cc <__aeabi_drsub>:
   da8cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   da8d0:	e002      	b.n	da8d8 <__adddf3>
   da8d2:	bf00      	nop

000da8d4 <__aeabi_dsub>:
   da8d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000da8d8 <__adddf3>:
   da8d8:	b530      	push	{r4, r5, lr}
   da8da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   da8de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   da8e2:	ea94 0f05 	teq	r4, r5
   da8e6:	bf08      	it	eq
   da8e8:	ea90 0f02 	teqeq	r0, r2
   da8ec:	bf1f      	itttt	ne
   da8ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   da8f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   da8f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   da8fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   da8fe:	f000 80e2 	beq.w	daac6 <__adddf3+0x1ee>
   da902:	ea4f 5454 	mov.w	r4, r4, lsr #21
   da906:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   da90a:	bfb8      	it	lt
   da90c:	426d      	neglt	r5, r5
   da90e:	dd0c      	ble.n	da92a <__adddf3+0x52>
   da910:	442c      	add	r4, r5
   da912:	ea80 0202 	eor.w	r2, r0, r2
   da916:	ea81 0303 	eor.w	r3, r1, r3
   da91a:	ea82 0000 	eor.w	r0, r2, r0
   da91e:	ea83 0101 	eor.w	r1, r3, r1
   da922:	ea80 0202 	eor.w	r2, r0, r2
   da926:	ea81 0303 	eor.w	r3, r1, r3
   da92a:	2d36      	cmp	r5, #54	; 0x36
   da92c:	bf88      	it	hi
   da92e:	bd30      	pophi	{r4, r5, pc}
   da930:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   da934:	ea4f 3101 	mov.w	r1, r1, lsl #12
   da938:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   da93c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   da940:	d002      	beq.n	da948 <__adddf3+0x70>
   da942:	4240      	negs	r0, r0
   da944:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da948:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   da94c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   da950:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   da954:	d002      	beq.n	da95c <__adddf3+0x84>
   da956:	4252      	negs	r2, r2
   da958:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da95c:	ea94 0f05 	teq	r4, r5
   da960:	f000 80a7 	beq.w	daab2 <__adddf3+0x1da>
   da964:	f1a4 0401 	sub.w	r4, r4, #1
   da968:	f1d5 0e20 	rsbs	lr, r5, #32
   da96c:	db0d      	blt.n	da98a <__adddf3+0xb2>
   da96e:	fa02 fc0e 	lsl.w	ip, r2, lr
   da972:	fa22 f205 	lsr.w	r2, r2, r5
   da976:	1880      	adds	r0, r0, r2
   da978:	f141 0100 	adc.w	r1, r1, #0
   da97c:	fa03 f20e 	lsl.w	r2, r3, lr
   da980:	1880      	adds	r0, r0, r2
   da982:	fa43 f305 	asr.w	r3, r3, r5
   da986:	4159      	adcs	r1, r3
   da988:	e00e      	b.n	da9a8 <__adddf3+0xd0>
   da98a:	f1a5 0520 	sub.w	r5, r5, #32
   da98e:	f10e 0e20 	add.w	lr, lr, #32
   da992:	2a01      	cmp	r2, #1
   da994:	fa03 fc0e 	lsl.w	ip, r3, lr
   da998:	bf28      	it	cs
   da99a:	f04c 0c02 	orrcs.w	ip, ip, #2
   da99e:	fa43 f305 	asr.w	r3, r3, r5
   da9a2:	18c0      	adds	r0, r0, r3
   da9a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   da9a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   da9ac:	d507      	bpl.n	da9be <__adddf3+0xe6>
   da9ae:	f04f 0e00 	mov.w	lr, #0
   da9b2:	f1dc 0c00 	rsbs	ip, ip, #0
   da9b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   da9ba:	eb6e 0101 	sbc.w	r1, lr, r1
   da9be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   da9c2:	d31b      	bcc.n	da9fc <__adddf3+0x124>
   da9c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   da9c8:	d30c      	bcc.n	da9e4 <__adddf3+0x10c>
   da9ca:	0849      	lsrs	r1, r1, #1
   da9cc:	ea5f 0030 	movs.w	r0, r0, rrx
   da9d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   da9d4:	f104 0401 	add.w	r4, r4, #1
   da9d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   da9dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   da9e0:	f080 809a 	bcs.w	dab18 <__adddf3+0x240>
   da9e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   da9e8:	bf08      	it	eq
   da9ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   da9ee:	f150 0000 	adcs.w	r0, r0, #0
   da9f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   da9f6:	ea41 0105 	orr.w	r1, r1, r5
   da9fa:	bd30      	pop	{r4, r5, pc}
   da9fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   daa00:	4140      	adcs	r0, r0
   daa02:	eb41 0101 	adc.w	r1, r1, r1
   daa06:	3c01      	subs	r4, #1
   daa08:	bf28      	it	cs
   daa0a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   daa0e:	d2e9      	bcs.n	da9e4 <__adddf3+0x10c>
   daa10:	f091 0f00 	teq	r1, #0
   daa14:	bf04      	itt	eq
   daa16:	4601      	moveq	r1, r0
   daa18:	2000      	moveq	r0, #0
   daa1a:	fab1 f381 	clz	r3, r1
   daa1e:	bf08      	it	eq
   daa20:	3320      	addeq	r3, #32
   daa22:	f1a3 030b 	sub.w	r3, r3, #11
   daa26:	f1b3 0220 	subs.w	r2, r3, #32
   daa2a:	da0c      	bge.n	daa46 <__adddf3+0x16e>
   daa2c:	320c      	adds	r2, #12
   daa2e:	dd08      	ble.n	daa42 <__adddf3+0x16a>
   daa30:	f102 0c14 	add.w	ip, r2, #20
   daa34:	f1c2 020c 	rsb	r2, r2, #12
   daa38:	fa01 f00c 	lsl.w	r0, r1, ip
   daa3c:	fa21 f102 	lsr.w	r1, r1, r2
   daa40:	e00c      	b.n	daa5c <__adddf3+0x184>
   daa42:	f102 0214 	add.w	r2, r2, #20
   daa46:	bfd8      	it	le
   daa48:	f1c2 0c20 	rsble	ip, r2, #32
   daa4c:	fa01 f102 	lsl.w	r1, r1, r2
   daa50:	fa20 fc0c 	lsr.w	ip, r0, ip
   daa54:	bfdc      	itt	le
   daa56:	ea41 010c 	orrle.w	r1, r1, ip
   daa5a:	4090      	lslle	r0, r2
   daa5c:	1ae4      	subs	r4, r4, r3
   daa5e:	bfa2      	ittt	ge
   daa60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   daa64:	4329      	orrge	r1, r5
   daa66:	bd30      	popge	{r4, r5, pc}
   daa68:	ea6f 0404 	mvn.w	r4, r4
   daa6c:	3c1f      	subs	r4, #31
   daa6e:	da1c      	bge.n	daaaa <__adddf3+0x1d2>
   daa70:	340c      	adds	r4, #12
   daa72:	dc0e      	bgt.n	daa92 <__adddf3+0x1ba>
   daa74:	f104 0414 	add.w	r4, r4, #20
   daa78:	f1c4 0220 	rsb	r2, r4, #32
   daa7c:	fa20 f004 	lsr.w	r0, r0, r4
   daa80:	fa01 f302 	lsl.w	r3, r1, r2
   daa84:	ea40 0003 	orr.w	r0, r0, r3
   daa88:	fa21 f304 	lsr.w	r3, r1, r4
   daa8c:	ea45 0103 	orr.w	r1, r5, r3
   daa90:	bd30      	pop	{r4, r5, pc}
   daa92:	f1c4 040c 	rsb	r4, r4, #12
   daa96:	f1c4 0220 	rsb	r2, r4, #32
   daa9a:	fa20 f002 	lsr.w	r0, r0, r2
   daa9e:	fa01 f304 	lsl.w	r3, r1, r4
   daaa2:	ea40 0003 	orr.w	r0, r0, r3
   daaa6:	4629      	mov	r1, r5
   daaa8:	bd30      	pop	{r4, r5, pc}
   daaaa:	fa21 f004 	lsr.w	r0, r1, r4
   daaae:	4629      	mov	r1, r5
   daab0:	bd30      	pop	{r4, r5, pc}
   daab2:	f094 0f00 	teq	r4, #0
   daab6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   daaba:	bf06      	itte	eq
   daabc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   daac0:	3401      	addeq	r4, #1
   daac2:	3d01      	subne	r5, #1
   daac4:	e74e      	b.n	da964 <__adddf3+0x8c>
   daac6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   daaca:	bf18      	it	ne
   daacc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   daad0:	d029      	beq.n	dab26 <__adddf3+0x24e>
   daad2:	ea94 0f05 	teq	r4, r5
   daad6:	bf08      	it	eq
   daad8:	ea90 0f02 	teqeq	r0, r2
   daadc:	d005      	beq.n	daaea <__adddf3+0x212>
   daade:	ea54 0c00 	orrs.w	ip, r4, r0
   daae2:	bf04      	itt	eq
   daae4:	4619      	moveq	r1, r3
   daae6:	4610      	moveq	r0, r2
   daae8:	bd30      	pop	{r4, r5, pc}
   daaea:	ea91 0f03 	teq	r1, r3
   daaee:	bf1e      	ittt	ne
   daaf0:	2100      	movne	r1, #0
   daaf2:	2000      	movne	r0, #0
   daaf4:	bd30      	popne	{r4, r5, pc}
   daaf6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   daafa:	d105      	bne.n	dab08 <__adddf3+0x230>
   daafc:	0040      	lsls	r0, r0, #1
   daafe:	4149      	adcs	r1, r1
   dab00:	bf28      	it	cs
   dab02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dab06:	bd30      	pop	{r4, r5, pc}
   dab08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dab0c:	bf3c      	itt	cc
   dab0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dab12:	bd30      	popcc	{r4, r5, pc}
   dab14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dab18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dab1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dab20:	f04f 0000 	mov.w	r0, #0
   dab24:	bd30      	pop	{r4, r5, pc}
   dab26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dab2a:	bf1a      	itte	ne
   dab2c:	4619      	movne	r1, r3
   dab2e:	4610      	movne	r0, r2
   dab30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dab34:	bf1c      	itt	ne
   dab36:	460b      	movne	r3, r1
   dab38:	4602      	movne	r2, r0
   dab3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dab3e:	bf06      	itte	eq
   dab40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dab44:	ea91 0f03 	teqeq	r1, r3
   dab48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dab4c:	bd30      	pop	{r4, r5, pc}
   dab4e:	bf00      	nop

000dab50 <__aeabi_ui2d>:
   dab50:	f090 0f00 	teq	r0, #0
   dab54:	bf04      	itt	eq
   dab56:	2100      	moveq	r1, #0
   dab58:	4770      	bxeq	lr
   dab5a:	b530      	push	{r4, r5, lr}
   dab5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dab60:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dab64:	f04f 0500 	mov.w	r5, #0
   dab68:	f04f 0100 	mov.w	r1, #0
   dab6c:	e750      	b.n	daa10 <__adddf3+0x138>
   dab6e:	bf00      	nop

000dab70 <__aeabi_i2d>:
   dab70:	f090 0f00 	teq	r0, #0
   dab74:	bf04      	itt	eq
   dab76:	2100      	moveq	r1, #0
   dab78:	4770      	bxeq	lr
   dab7a:	b530      	push	{r4, r5, lr}
   dab7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dab80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dab84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dab88:	bf48      	it	mi
   dab8a:	4240      	negmi	r0, r0
   dab8c:	f04f 0100 	mov.w	r1, #0
   dab90:	e73e      	b.n	daa10 <__adddf3+0x138>
   dab92:	bf00      	nop

000dab94 <__aeabi_f2d>:
   dab94:	0042      	lsls	r2, r0, #1
   dab96:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dab9a:	ea4f 0131 	mov.w	r1, r1, rrx
   dab9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   daba2:	bf1f      	itttt	ne
   daba4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   daba8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dabac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dabb0:	4770      	bxne	lr
   dabb2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dabb6:	bf08      	it	eq
   dabb8:	4770      	bxeq	lr
   dabba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dabbe:	bf04      	itt	eq
   dabc0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dabc4:	4770      	bxeq	lr
   dabc6:	b530      	push	{r4, r5, lr}
   dabc8:	f44f 7460 	mov.w	r4, #896	; 0x380
   dabcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dabd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dabd4:	e71c      	b.n	daa10 <__adddf3+0x138>
   dabd6:	bf00      	nop

000dabd8 <__aeabi_ul2d>:
   dabd8:	ea50 0201 	orrs.w	r2, r0, r1
   dabdc:	bf08      	it	eq
   dabde:	4770      	bxeq	lr
   dabe0:	b530      	push	{r4, r5, lr}
   dabe2:	f04f 0500 	mov.w	r5, #0
   dabe6:	e00a      	b.n	dabfe <__aeabi_l2d+0x16>

000dabe8 <__aeabi_l2d>:
   dabe8:	ea50 0201 	orrs.w	r2, r0, r1
   dabec:	bf08      	it	eq
   dabee:	4770      	bxeq	lr
   dabf0:	b530      	push	{r4, r5, lr}
   dabf2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dabf6:	d502      	bpl.n	dabfe <__aeabi_l2d+0x16>
   dabf8:	4240      	negs	r0, r0
   dabfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dabfe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dac02:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dac06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dac0a:	f43f aed8 	beq.w	da9be <__adddf3+0xe6>
   dac0e:	f04f 0203 	mov.w	r2, #3
   dac12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dac16:	bf18      	it	ne
   dac18:	3203      	addne	r2, #3
   dac1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dac1e:	bf18      	it	ne
   dac20:	3203      	addne	r2, #3
   dac22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dac26:	f1c2 0320 	rsb	r3, r2, #32
   dac2a:	fa00 fc03 	lsl.w	ip, r0, r3
   dac2e:	fa20 f002 	lsr.w	r0, r0, r2
   dac32:	fa01 fe03 	lsl.w	lr, r1, r3
   dac36:	ea40 000e 	orr.w	r0, r0, lr
   dac3a:	fa21 f102 	lsr.w	r1, r1, r2
   dac3e:	4414      	add	r4, r2
   dac40:	e6bd      	b.n	da9be <__adddf3+0xe6>
   dac42:	bf00      	nop

000dac44 <__aeabi_dmul>:
   dac44:	b570      	push	{r4, r5, r6, lr}
   dac46:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dac4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dac4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dac52:	bf1d      	ittte	ne
   dac54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dac58:	ea94 0f0c 	teqne	r4, ip
   dac5c:	ea95 0f0c 	teqne	r5, ip
   dac60:	f000 f8de 	bleq	dae20 <__aeabi_dmul+0x1dc>
   dac64:	442c      	add	r4, r5
   dac66:	ea81 0603 	eor.w	r6, r1, r3
   dac6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dac6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dac72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dac76:	bf18      	it	ne
   dac78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dac7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dac80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dac84:	d038      	beq.n	dacf8 <__aeabi_dmul+0xb4>
   dac86:	fba0 ce02 	umull	ip, lr, r0, r2
   dac8a:	f04f 0500 	mov.w	r5, #0
   dac8e:	fbe1 e502 	umlal	lr, r5, r1, r2
   dac92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dac96:	fbe0 e503 	umlal	lr, r5, r0, r3
   dac9a:	f04f 0600 	mov.w	r6, #0
   dac9e:	fbe1 5603 	umlal	r5, r6, r1, r3
   daca2:	f09c 0f00 	teq	ip, #0
   daca6:	bf18      	it	ne
   daca8:	f04e 0e01 	orrne.w	lr, lr, #1
   dacac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dacb0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dacb4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dacb8:	d204      	bcs.n	dacc4 <__aeabi_dmul+0x80>
   dacba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dacbe:	416d      	adcs	r5, r5
   dacc0:	eb46 0606 	adc.w	r6, r6, r6
   dacc4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dacc8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   daccc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dacd0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dacd4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dacd8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dacdc:	bf88      	it	hi
   dacde:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dace2:	d81e      	bhi.n	dad22 <__aeabi_dmul+0xde>
   dace4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dace8:	bf08      	it	eq
   dacea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dacee:	f150 0000 	adcs.w	r0, r0, #0
   dacf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dacf6:	bd70      	pop	{r4, r5, r6, pc}
   dacf8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dacfc:	ea46 0101 	orr.w	r1, r6, r1
   dad00:	ea40 0002 	orr.w	r0, r0, r2
   dad04:	ea81 0103 	eor.w	r1, r1, r3
   dad08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dad0c:	bfc2      	ittt	gt
   dad0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   dad12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dad16:	bd70      	popgt	{r4, r5, r6, pc}
   dad18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dad1c:	f04f 0e00 	mov.w	lr, #0
   dad20:	3c01      	subs	r4, #1
   dad22:	f300 80ab 	bgt.w	dae7c <__aeabi_dmul+0x238>
   dad26:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dad2a:	bfde      	ittt	le
   dad2c:	2000      	movle	r0, #0
   dad2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dad32:	bd70      	pople	{r4, r5, r6, pc}
   dad34:	f1c4 0400 	rsb	r4, r4, #0
   dad38:	3c20      	subs	r4, #32
   dad3a:	da35      	bge.n	dada8 <__aeabi_dmul+0x164>
   dad3c:	340c      	adds	r4, #12
   dad3e:	dc1b      	bgt.n	dad78 <__aeabi_dmul+0x134>
   dad40:	f104 0414 	add.w	r4, r4, #20
   dad44:	f1c4 0520 	rsb	r5, r4, #32
   dad48:	fa00 f305 	lsl.w	r3, r0, r5
   dad4c:	fa20 f004 	lsr.w	r0, r0, r4
   dad50:	fa01 f205 	lsl.w	r2, r1, r5
   dad54:	ea40 0002 	orr.w	r0, r0, r2
   dad58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dad5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dad60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dad64:	fa21 f604 	lsr.w	r6, r1, r4
   dad68:	eb42 0106 	adc.w	r1, r2, r6
   dad6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dad70:	bf08      	it	eq
   dad72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dad76:	bd70      	pop	{r4, r5, r6, pc}
   dad78:	f1c4 040c 	rsb	r4, r4, #12
   dad7c:	f1c4 0520 	rsb	r5, r4, #32
   dad80:	fa00 f304 	lsl.w	r3, r0, r4
   dad84:	fa20 f005 	lsr.w	r0, r0, r5
   dad88:	fa01 f204 	lsl.w	r2, r1, r4
   dad8c:	ea40 0002 	orr.w	r0, r0, r2
   dad90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dad94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dad98:	f141 0100 	adc.w	r1, r1, #0
   dad9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dada0:	bf08      	it	eq
   dada2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dada6:	bd70      	pop	{r4, r5, r6, pc}
   dada8:	f1c4 0520 	rsb	r5, r4, #32
   dadac:	fa00 f205 	lsl.w	r2, r0, r5
   dadb0:	ea4e 0e02 	orr.w	lr, lr, r2
   dadb4:	fa20 f304 	lsr.w	r3, r0, r4
   dadb8:	fa01 f205 	lsl.w	r2, r1, r5
   dadbc:	ea43 0302 	orr.w	r3, r3, r2
   dadc0:	fa21 f004 	lsr.w	r0, r1, r4
   dadc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dadc8:	fa21 f204 	lsr.w	r2, r1, r4
   dadcc:	ea20 0002 	bic.w	r0, r0, r2
   dadd0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dadd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dadd8:	bf08      	it	eq
   dadda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dadde:	bd70      	pop	{r4, r5, r6, pc}
   dade0:	f094 0f00 	teq	r4, #0
   dade4:	d10f      	bne.n	dae06 <__aeabi_dmul+0x1c2>
   dade6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dadea:	0040      	lsls	r0, r0, #1
   dadec:	eb41 0101 	adc.w	r1, r1, r1
   dadf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dadf4:	bf08      	it	eq
   dadf6:	3c01      	subeq	r4, #1
   dadf8:	d0f7      	beq.n	dadea <__aeabi_dmul+0x1a6>
   dadfa:	ea41 0106 	orr.w	r1, r1, r6
   dadfe:	f095 0f00 	teq	r5, #0
   dae02:	bf18      	it	ne
   dae04:	4770      	bxne	lr
   dae06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dae0a:	0052      	lsls	r2, r2, #1
   dae0c:	eb43 0303 	adc.w	r3, r3, r3
   dae10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dae14:	bf08      	it	eq
   dae16:	3d01      	subeq	r5, #1
   dae18:	d0f7      	beq.n	dae0a <__aeabi_dmul+0x1c6>
   dae1a:	ea43 0306 	orr.w	r3, r3, r6
   dae1e:	4770      	bx	lr
   dae20:	ea94 0f0c 	teq	r4, ip
   dae24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dae28:	bf18      	it	ne
   dae2a:	ea95 0f0c 	teqne	r5, ip
   dae2e:	d00c      	beq.n	dae4a <__aeabi_dmul+0x206>
   dae30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dae34:	bf18      	it	ne
   dae36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dae3a:	d1d1      	bne.n	dade0 <__aeabi_dmul+0x19c>
   dae3c:	ea81 0103 	eor.w	r1, r1, r3
   dae40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dae44:	f04f 0000 	mov.w	r0, #0
   dae48:	bd70      	pop	{r4, r5, r6, pc}
   dae4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dae4e:	bf06      	itte	eq
   dae50:	4610      	moveq	r0, r2
   dae52:	4619      	moveq	r1, r3
   dae54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dae58:	d019      	beq.n	dae8e <__aeabi_dmul+0x24a>
   dae5a:	ea94 0f0c 	teq	r4, ip
   dae5e:	d102      	bne.n	dae66 <__aeabi_dmul+0x222>
   dae60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dae64:	d113      	bne.n	dae8e <__aeabi_dmul+0x24a>
   dae66:	ea95 0f0c 	teq	r5, ip
   dae6a:	d105      	bne.n	dae78 <__aeabi_dmul+0x234>
   dae6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dae70:	bf1c      	itt	ne
   dae72:	4610      	movne	r0, r2
   dae74:	4619      	movne	r1, r3
   dae76:	d10a      	bne.n	dae8e <__aeabi_dmul+0x24a>
   dae78:	ea81 0103 	eor.w	r1, r1, r3
   dae7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dae80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dae84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dae88:	f04f 0000 	mov.w	r0, #0
   dae8c:	bd70      	pop	{r4, r5, r6, pc}
   dae8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dae92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dae96:	bd70      	pop	{r4, r5, r6, pc}

000dae98 <__aeabi_ddiv>:
   dae98:	b570      	push	{r4, r5, r6, lr}
   dae9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dae9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daea2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daea6:	bf1d      	ittte	ne
   daea8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daeac:	ea94 0f0c 	teqne	r4, ip
   daeb0:	ea95 0f0c 	teqne	r5, ip
   daeb4:	f000 f8a7 	bleq	db006 <__aeabi_ddiv+0x16e>
   daeb8:	eba4 0405 	sub.w	r4, r4, r5
   daebc:	ea81 0e03 	eor.w	lr, r1, r3
   daec0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   daec4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   daec8:	f000 8088 	beq.w	dafdc <__aeabi_ddiv+0x144>
   daecc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daed0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   daed4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   daed8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   daedc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   daee0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   daee4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   daee8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   daeec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   daef0:	429d      	cmp	r5, r3
   daef2:	bf08      	it	eq
   daef4:	4296      	cmpeq	r6, r2
   daef6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   daefa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   daefe:	d202      	bcs.n	daf06 <__aeabi_ddiv+0x6e>
   daf00:	085b      	lsrs	r3, r3, #1
   daf02:	ea4f 0232 	mov.w	r2, r2, rrx
   daf06:	1ab6      	subs	r6, r6, r2
   daf08:	eb65 0503 	sbc.w	r5, r5, r3
   daf0c:	085b      	lsrs	r3, r3, #1
   daf0e:	ea4f 0232 	mov.w	r2, r2, rrx
   daf12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   daf16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   daf1a:	ebb6 0e02 	subs.w	lr, r6, r2
   daf1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   daf22:	bf22      	ittt	cs
   daf24:	1ab6      	subcs	r6, r6, r2
   daf26:	4675      	movcs	r5, lr
   daf28:	ea40 000c 	orrcs.w	r0, r0, ip
   daf2c:	085b      	lsrs	r3, r3, #1
   daf2e:	ea4f 0232 	mov.w	r2, r2, rrx
   daf32:	ebb6 0e02 	subs.w	lr, r6, r2
   daf36:	eb75 0e03 	sbcs.w	lr, r5, r3
   daf3a:	bf22      	ittt	cs
   daf3c:	1ab6      	subcs	r6, r6, r2
   daf3e:	4675      	movcs	r5, lr
   daf40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   daf44:	085b      	lsrs	r3, r3, #1
   daf46:	ea4f 0232 	mov.w	r2, r2, rrx
   daf4a:	ebb6 0e02 	subs.w	lr, r6, r2
   daf4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   daf52:	bf22      	ittt	cs
   daf54:	1ab6      	subcs	r6, r6, r2
   daf56:	4675      	movcs	r5, lr
   daf58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   daf5c:	085b      	lsrs	r3, r3, #1
   daf5e:	ea4f 0232 	mov.w	r2, r2, rrx
   daf62:	ebb6 0e02 	subs.w	lr, r6, r2
   daf66:	eb75 0e03 	sbcs.w	lr, r5, r3
   daf6a:	bf22      	ittt	cs
   daf6c:	1ab6      	subcs	r6, r6, r2
   daf6e:	4675      	movcs	r5, lr
   daf70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   daf74:	ea55 0e06 	orrs.w	lr, r5, r6
   daf78:	d018      	beq.n	dafac <__aeabi_ddiv+0x114>
   daf7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   daf7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   daf82:	ea4f 1606 	mov.w	r6, r6, lsl #4
   daf86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   daf8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   daf8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   daf92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   daf96:	d1c0      	bne.n	daf1a <__aeabi_ddiv+0x82>
   daf98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   daf9c:	d10b      	bne.n	dafb6 <__aeabi_ddiv+0x11e>
   daf9e:	ea41 0100 	orr.w	r1, r1, r0
   dafa2:	f04f 0000 	mov.w	r0, #0
   dafa6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dafaa:	e7b6      	b.n	daf1a <__aeabi_ddiv+0x82>
   dafac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dafb0:	bf04      	itt	eq
   dafb2:	4301      	orreq	r1, r0
   dafb4:	2000      	moveq	r0, #0
   dafb6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dafba:	bf88      	it	hi
   dafbc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dafc0:	f63f aeaf 	bhi.w	dad22 <__aeabi_dmul+0xde>
   dafc4:	ebb5 0c03 	subs.w	ip, r5, r3
   dafc8:	bf04      	itt	eq
   dafca:	ebb6 0c02 	subseq.w	ip, r6, r2
   dafce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dafd2:	f150 0000 	adcs.w	r0, r0, #0
   dafd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dafda:	bd70      	pop	{r4, r5, r6, pc}
   dafdc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dafe0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dafe4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dafe8:	bfc2      	ittt	gt
   dafea:	ebd4 050c 	rsbsgt	r5, r4, ip
   dafee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daff2:	bd70      	popgt	{r4, r5, r6, pc}
   daff4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daff8:	f04f 0e00 	mov.w	lr, #0
   daffc:	3c01      	subs	r4, #1
   daffe:	e690      	b.n	dad22 <__aeabi_dmul+0xde>
   db000:	ea45 0e06 	orr.w	lr, r5, r6
   db004:	e68d      	b.n	dad22 <__aeabi_dmul+0xde>
   db006:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db00a:	ea94 0f0c 	teq	r4, ip
   db00e:	bf08      	it	eq
   db010:	ea95 0f0c 	teqeq	r5, ip
   db014:	f43f af3b 	beq.w	dae8e <__aeabi_dmul+0x24a>
   db018:	ea94 0f0c 	teq	r4, ip
   db01c:	d10a      	bne.n	db034 <__aeabi_ddiv+0x19c>
   db01e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db022:	f47f af34 	bne.w	dae8e <__aeabi_dmul+0x24a>
   db026:	ea95 0f0c 	teq	r5, ip
   db02a:	f47f af25 	bne.w	dae78 <__aeabi_dmul+0x234>
   db02e:	4610      	mov	r0, r2
   db030:	4619      	mov	r1, r3
   db032:	e72c      	b.n	dae8e <__aeabi_dmul+0x24a>
   db034:	ea95 0f0c 	teq	r5, ip
   db038:	d106      	bne.n	db048 <__aeabi_ddiv+0x1b0>
   db03a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db03e:	f43f aefd 	beq.w	dae3c <__aeabi_dmul+0x1f8>
   db042:	4610      	mov	r0, r2
   db044:	4619      	mov	r1, r3
   db046:	e722      	b.n	dae8e <__aeabi_dmul+0x24a>
   db048:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db04c:	bf18      	it	ne
   db04e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db052:	f47f aec5 	bne.w	dade0 <__aeabi_dmul+0x19c>
   db056:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db05a:	f47f af0d 	bne.w	dae78 <__aeabi_dmul+0x234>
   db05e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db062:	f47f aeeb 	bne.w	dae3c <__aeabi_dmul+0x1f8>
   db066:	e712      	b.n	dae8e <__aeabi_dmul+0x24a>

000db068 <__aeabi_d2uiz>:
   db068:	004a      	lsls	r2, r1, #1
   db06a:	d211      	bcs.n	db090 <__aeabi_d2uiz+0x28>
   db06c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db070:	d211      	bcs.n	db096 <__aeabi_d2uiz+0x2e>
   db072:	d50d      	bpl.n	db090 <__aeabi_d2uiz+0x28>
   db074:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db078:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db07c:	d40e      	bmi.n	db09c <__aeabi_d2uiz+0x34>
   db07e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db086:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db08a:	fa23 f002 	lsr.w	r0, r3, r2
   db08e:	4770      	bx	lr
   db090:	f04f 0000 	mov.w	r0, #0
   db094:	4770      	bx	lr
   db096:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db09a:	d102      	bne.n	db0a2 <__aeabi_d2uiz+0x3a>
   db09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db0a0:	4770      	bx	lr
   db0a2:	f04f 0000 	mov.w	r0, #0
   db0a6:	4770      	bx	lr

000db0a8 <__aeabi_d2f>:
   db0a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db0ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db0b0:	bf24      	itt	cs
   db0b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db0b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db0ba:	d90d      	bls.n	db0d8 <__aeabi_d2f+0x30>
   db0bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db0c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db0c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db0c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db0cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db0d0:	bf08      	it	eq
   db0d2:	f020 0001 	biceq.w	r0, r0, #1
   db0d6:	4770      	bx	lr
   db0d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db0dc:	d121      	bne.n	db122 <__aeabi_d2f+0x7a>
   db0de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db0e2:	bfbc      	itt	lt
   db0e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db0e8:	4770      	bxlt	lr
   db0ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db0ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db0f2:	f1c2 0218 	rsb	r2, r2, #24
   db0f6:	f1c2 0c20 	rsb	ip, r2, #32
   db0fa:	fa10 f30c 	lsls.w	r3, r0, ip
   db0fe:	fa20 f002 	lsr.w	r0, r0, r2
   db102:	bf18      	it	ne
   db104:	f040 0001 	orrne.w	r0, r0, #1
   db108:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db10c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db110:	fa03 fc0c 	lsl.w	ip, r3, ip
   db114:	ea40 000c 	orr.w	r0, r0, ip
   db118:	fa23 f302 	lsr.w	r3, r3, r2
   db11c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db120:	e7cc      	b.n	db0bc <__aeabi_d2f+0x14>
   db122:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db126:	d107      	bne.n	db138 <__aeabi_d2f+0x90>
   db128:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db12c:	bf1e      	ittt	ne
   db12e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db132:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db136:	4770      	bxne	lr
   db138:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db13c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db140:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db144:	4770      	bx	lr
   db146:	bf00      	nop

000db148 <asctime_r>:
   db148:	b510      	push	{r4, lr}
   db14a:	460c      	mov	r4, r1
   db14c:	6941      	ldr	r1, [r0, #20]
   db14e:	6903      	ldr	r3, [r0, #16]
   db150:	6982      	ldr	r2, [r0, #24]
   db152:	b086      	sub	sp, #24
   db154:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db158:	9104      	str	r1, [sp, #16]
   db15a:	6801      	ldr	r1, [r0, #0]
   db15c:	9103      	str	r1, [sp, #12]
   db15e:	6841      	ldr	r1, [r0, #4]
   db160:	9102      	str	r1, [sp, #8]
   db162:	6881      	ldr	r1, [r0, #8]
   db164:	9101      	str	r1, [sp, #4]
   db166:	68c1      	ldr	r1, [r0, #12]
   db168:	9100      	str	r1, [sp, #0]
   db16a:	4907      	ldr	r1, [pc, #28]	; (db188 <asctime_r+0x40>)
   db16c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db170:	440b      	add	r3, r1
   db172:	4906      	ldr	r1, [pc, #24]	; (db18c <asctime_r+0x44>)
   db174:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db178:	440a      	add	r2, r1
   db17a:	4620      	mov	r0, r4
   db17c:	4904      	ldr	r1, [pc, #16]	; (db190 <asctime_r+0x48>)
   db17e:	f7fc fb3f 	bl	d7800 <siprintf>
   db182:	4620      	mov	r0, r4
   db184:	b006      	add	sp, #24
   db186:	bd10      	pop	{r4, pc}
   db188:	000dc2be 	.word	0x000dc2be
   db18c:	000dc2a9 	.word	0x000dc2a9
   db190:	000dc289 	.word	0x000dc289

000db194 <atexit>:
   db194:	2300      	movs	r3, #0
   db196:	4601      	mov	r1, r0
   db198:	461a      	mov	r2, r3
   db19a:	4618      	mov	r0, r3
   db19c:	f000 b9a6 	b.w	db4ec <__register_exitproc>

000db1a0 <gmtime>:
   db1a0:	b538      	push	{r3, r4, r5, lr}
   db1a2:	4b07      	ldr	r3, [pc, #28]	; (db1c0 <gmtime+0x20>)
   db1a4:	681d      	ldr	r5, [r3, #0]
   db1a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   db1a8:	4604      	mov	r4, r0
   db1aa:	b91b      	cbnz	r3, db1b4 <gmtime+0x14>
   db1ac:	2024      	movs	r0, #36	; 0x24
   db1ae:	f7fc fb0f 	bl	d77d0 <malloc>
   db1b2:	63e8      	str	r0, [r5, #60]	; 0x3c
   db1b4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   db1b6:	4620      	mov	r0, r4
   db1b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db1bc:	f7fc bb60 	b.w	d7880 <gmtime_r>
   db1c0:	2003de28 	.word	0x2003de28

000db1c4 <memcpy>:
   db1c4:	440a      	add	r2, r1
   db1c6:	4291      	cmp	r1, r2
   db1c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   db1cc:	d100      	bne.n	db1d0 <memcpy+0xc>
   db1ce:	4770      	bx	lr
   db1d0:	b510      	push	{r4, lr}
   db1d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   db1d6:	f803 4f01 	strb.w	r4, [r3, #1]!
   db1da:	4291      	cmp	r1, r2
   db1dc:	d1f9      	bne.n	db1d2 <memcpy+0xe>
   db1de:	bd10      	pop	{r4, pc}

000db1e0 <memmove>:
   db1e0:	4288      	cmp	r0, r1
   db1e2:	b510      	push	{r4, lr}
   db1e4:	eb01 0402 	add.w	r4, r1, r2
   db1e8:	d902      	bls.n	db1f0 <memmove+0x10>
   db1ea:	4284      	cmp	r4, r0
   db1ec:	4623      	mov	r3, r4
   db1ee:	d807      	bhi.n	db200 <memmove+0x20>
   db1f0:	1e43      	subs	r3, r0, #1
   db1f2:	42a1      	cmp	r1, r4
   db1f4:	d008      	beq.n	db208 <memmove+0x28>
   db1f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   db1fa:	f803 2f01 	strb.w	r2, [r3, #1]!
   db1fe:	e7f8      	b.n	db1f2 <memmove+0x12>
   db200:	4402      	add	r2, r0
   db202:	4601      	mov	r1, r0
   db204:	428a      	cmp	r2, r1
   db206:	d100      	bne.n	db20a <memmove+0x2a>
   db208:	bd10      	pop	{r4, pc}
   db20a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db20e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   db212:	e7f7      	b.n	db204 <memmove+0x24>

000db214 <memset>:
   db214:	4402      	add	r2, r0
   db216:	4603      	mov	r3, r0
   db218:	4293      	cmp	r3, r2
   db21a:	d100      	bne.n	db21e <memset+0xa>
   db21c:	4770      	bx	lr
   db21e:	f803 1b01 	strb.w	r1, [r3], #1
   db222:	e7f9      	b.n	db218 <memset+0x4>

000db224 <srand>:
   db224:	b538      	push	{r3, r4, r5, lr}
   db226:	4b0d      	ldr	r3, [pc, #52]	; (db25c <srand+0x38>)
   db228:	681d      	ldr	r5, [r3, #0]
   db22a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db22c:	4604      	mov	r4, r0
   db22e:	b97b      	cbnz	r3, db250 <srand+0x2c>
   db230:	2018      	movs	r0, #24
   db232:	f7fc facd 	bl	d77d0 <malloc>
   db236:	4a0a      	ldr	r2, [pc, #40]	; (db260 <srand+0x3c>)
   db238:	4b0a      	ldr	r3, [pc, #40]	; (db264 <srand+0x40>)
   db23a:	63a8      	str	r0, [r5, #56]	; 0x38
   db23c:	e9c0 2300 	strd	r2, r3, [r0]
   db240:	4b09      	ldr	r3, [pc, #36]	; (db268 <srand+0x44>)
   db242:	6083      	str	r3, [r0, #8]
   db244:	230b      	movs	r3, #11
   db246:	8183      	strh	r3, [r0, #12]
   db248:	2201      	movs	r2, #1
   db24a:	2300      	movs	r3, #0
   db24c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db250:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db252:	2200      	movs	r2, #0
   db254:	611c      	str	r4, [r3, #16]
   db256:	615a      	str	r2, [r3, #20]
   db258:	bd38      	pop	{r3, r4, r5, pc}
   db25a:	bf00      	nop
   db25c:	2003de28 	.word	0x2003de28
   db260:	abcd330e 	.word	0xabcd330e
   db264:	e66d1234 	.word	0xe66d1234
   db268:	0005deec 	.word	0x0005deec

000db26c <rand>:
   db26c:	4b13      	ldr	r3, [pc, #76]	; (db2bc <rand+0x50>)
   db26e:	b510      	push	{r4, lr}
   db270:	681c      	ldr	r4, [r3, #0]
   db272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db274:	b97b      	cbnz	r3, db296 <rand+0x2a>
   db276:	2018      	movs	r0, #24
   db278:	f7fc faaa 	bl	d77d0 <malloc>
   db27c:	4a10      	ldr	r2, [pc, #64]	; (db2c0 <rand+0x54>)
   db27e:	4b11      	ldr	r3, [pc, #68]	; (db2c4 <rand+0x58>)
   db280:	63a0      	str	r0, [r4, #56]	; 0x38
   db282:	e9c0 2300 	strd	r2, r3, [r0]
   db286:	4b10      	ldr	r3, [pc, #64]	; (db2c8 <rand+0x5c>)
   db288:	6083      	str	r3, [r0, #8]
   db28a:	230b      	movs	r3, #11
   db28c:	8183      	strh	r3, [r0, #12]
   db28e:	2201      	movs	r2, #1
   db290:	2300      	movs	r3, #0
   db292:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db296:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   db298:	480c      	ldr	r0, [pc, #48]	; (db2cc <rand+0x60>)
   db29a:	690a      	ldr	r2, [r1, #16]
   db29c:	694b      	ldr	r3, [r1, #20]
   db29e:	4c0c      	ldr	r4, [pc, #48]	; (db2d0 <rand+0x64>)
   db2a0:	4350      	muls	r0, r2
   db2a2:	fb04 0003 	mla	r0, r4, r3, r0
   db2a6:	fba2 3404 	umull	r3, r4, r2, r4
   db2aa:	1c5a      	adds	r2, r3, #1
   db2ac:	4404      	add	r4, r0
   db2ae:	f144 0000 	adc.w	r0, r4, #0
   db2b2:	e9c1 2004 	strd	r2, r0, [r1, #16]
   db2b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   db2ba:	bd10      	pop	{r4, pc}
   db2bc:	2003de28 	.word	0x2003de28
   db2c0:	abcd330e 	.word	0xabcd330e
   db2c4:	e66d1234 	.word	0xe66d1234
   db2c8:	0005deec 	.word	0x0005deec
   db2cc:	5851f42d 	.word	0x5851f42d
   db2d0:	4c957f2d 	.word	0x4c957f2d

000db2d4 <strchr>:
   db2d4:	b2c9      	uxtb	r1, r1
   db2d6:	4603      	mov	r3, r0
   db2d8:	f810 2b01 	ldrb.w	r2, [r0], #1
   db2dc:	b11a      	cbz	r2, db2e6 <strchr+0x12>
   db2de:	428a      	cmp	r2, r1
   db2e0:	d1f9      	bne.n	db2d6 <strchr+0x2>
   db2e2:	4618      	mov	r0, r3
   db2e4:	4770      	bx	lr
   db2e6:	2900      	cmp	r1, #0
   db2e8:	bf18      	it	ne
   db2ea:	2300      	movne	r3, #0
   db2ec:	e7f9      	b.n	db2e2 <strchr+0xe>

000db2ee <strchrnul>:
   db2ee:	b510      	push	{r4, lr}
   db2f0:	4604      	mov	r4, r0
   db2f2:	f7ff ffef 	bl	db2d4 <strchr>
   db2f6:	b918      	cbnz	r0, db300 <strchrnul+0x12>
   db2f8:	4620      	mov	r0, r4
   db2fa:	f000 f832 	bl	db362 <strlen>
   db2fe:	4420      	add	r0, r4
   db300:	bd10      	pop	{r4, pc}

000db302 <strcmp>:
   db302:	f810 2b01 	ldrb.w	r2, [r0], #1
   db306:	f811 3b01 	ldrb.w	r3, [r1], #1
   db30a:	2a01      	cmp	r2, #1
   db30c:	bf28      	it	cs
   db30e:	429a      	cmpcs	r2, r3
   db310:	d0f7      	beq.n	db302 <strcmp>
   db312:	1ad0      	subs	r0, r2, r3
   db314:	4770      	bx	lr

000db316 <strcpy>:
   db316:	4603      	mov	r3, r0
   db318:	f811 2b01 	ldrb.w	r2, [r1], #1
   db31c:	f803 2b01 	strb.w	r2, [r3], #1
   db320:	2a00      	cmp	r2, #0
   db322:	d1f9      	bne.n	db318 <strcpy+0x2>
   db324:	4770      	bx	lr
	...

000db328 <strdup>:
   db328:	4b02      	ldr	r3, [pc, #8]	; (db334 <strdup+0xc>)
   db32a:	4601      	mov	r1, r0
   db32c:	6818      	ldr	r0, [r3, #0]
   db32e:	f000 b803 	b.w	db338 <_strdup_r>
   db332:	bf00      	nop
   db334:	2003de28 	.word	0x2003de28

000db338 <_strdup_r>:
   db338:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db33a:	4604      	mov	r4, r0
   db33c:	4608      	mov	r0, r1
   db33e:	460d      	mov	r5, r1
   db340:	f000 f80f 	bl	db362 <strlen>
   db344:	1c42      	adds	r2, r0, #1
   db346:	4611      	mov	r1, r2
   db348:	4620      	mov	r0, r4
   db34a:	9201      	str	r2, [sp, #4]
   db34c:	f7fc fa78 	bl	d7840 <_malloc_r>
   db350:	4604      	mov	r4, r0
   db352:	b118      	cbz	r0, db35c <_strdup_r+0x24>
   db354:	9a01      	ldr	r2, [sp, #4]
   db356:	4629      	mov	r1, r5
   db358:	f7ff ff34 	bl	db1c4 <memcpy>
   db35c:	4620      	mov	r0, r4
   db35e:	b003      	add	sp, #12
   db360:	bd30      	pop	{r4, r5, pc}

000db362 <strlen>:
   db362:	4603      	mov	r3, r0
   db364:	f813 2b01 	ldrb.w	r2, [r3], #1
   db368:	2a00      	cmp	r2, #0
   db36a:	d1fb      	bne.n	db364 <strlen+0x2>
   db36c:	1a18      	subs	r0, r3, r0
   db36e:	3801      	subs	r0, #1
   db370:	4770      	bx	lr

000db372 <strncmp>:
   db372:	b510      	push	{r4, lr}
   db374:	b16a      	cbz	r2, db392 <strncmp+0x20>
   db376:	3901      	subs	r1, #1
   db378:	1884      	adds	r4, r0, r2
   db37a:	f810 3b01 	ldrb.w	r3, [r0], #1
   db37e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   db382:	4293      	cmp	r3, r2
   db384:	d103      	bne.n	db38e <strncmp+0x1c>
   db386:	42a0      	cmp	r0, r4
   db388:	d001      	beq.n	db38e <strncmp+0x1c>
   db38a:	2b00      	cmp	r3, #0
   db38c:	d1f5      	bne.n	db37a <strncmp+0x8>
   db38e:	1a98      	subs	r0, r3, r2
   db390:	bd10      	pop	{r4, pc}
   db392:	4610      	mov	r0, r2
   db394:	e7fc      	b.n	db390 <strncmp+0x1e>

000db396 <strncpy>:
   db396:	b510      	push	{r4, lr}
   db398:	3901      	subs	r1, #1
   db39a:	4603      	mov	r3, r0
   db39c:	b132      	cbz	r2, db3ac <strncpy+0x16>
   db39e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db3a2:	f803 4b01 	strb.w	r4, [r3], #1
   db3a6:	3a01      	subs	r2, #1
   db3a8:	2c00      	cmp	r4, #0
   db3aa:	d1f7      	bne.n	db39c <strncpy+0x6>
   db3ac:	441a      	add	r2, r3
   db3ae:	2100      	movs	r1, #0
   db3b0:	4293      	cmp	r3, r2
   db3b2:	d100      	bne.n	db3b6 <strncpy+0x20>
   db3b4:	bd10      	pop	{r4, pc}
   db3b6:	f803 1b01 	strb.w	r1, [r3], #1
   db3ba:	e7f9      	b.n	db3b0 <strncpy+0x1a>

000db3bc <strrchr>:
   db3bc:	b538      	push	{r3, r4, r5, lr}
   db3be:	4603      	mov	r3, r0
   db3c0:	460c      	mov	r4, r1
   db3c2:	b969      	cbnz	r1, db3e0 <strrchr+0x24>
   db3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db3c8:	f7ff bf84 	b.w	db2d4 <strchr>
   db3cc:	1c43      	adds	r3, r0, #1
   db3ce:	4605      	mov	r5, r0
   db3d0:	4621      	mov	r1, r4
   db3d2:	4618      	mov	r0, r3
   db3d4:	f7ff ff7e 	bl	db2d4 <strchr>
   db3d8:	2800      	cmp	r0, #0
   db3da:	d1f7      	bne.n	db3cc <strrchr+0x10>
   db3dc:	4628      	mov	r0, r5
   db3de:	bd38      	pop	{r3, r4, r5, pc}
   db3e0:	2500      	movs	r5, #0
   db3e2:	e7f5      	b.n	db3d0 <strrchr+0x14>

000db3e4 <_strtol_l.isra.0>:
   db3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db3e8:	4e3a      	ldr	r6, [pc, #232]	; (db4d4 <_strtol_l.isra.0+0xf0>)
   db3ea:	4686      	mov	lr, r0
   db3ec:	468c      	mov	ip, r1
   db3ee:	4660      	mov	r0, ip
   db3f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   db3f4:	5da5      	ldrb	r5, [r4, r6]
   db3f6:	f015 0508 	ands.w	r5, r5, #8
   db3fa:	d1f8      	bne.n	db3ee <_strtol_l.isra.0+0xa>
   db3fc:	2c2d      	cmp	r4, #45	; 0x2d
   db3fe:	d133      	bne.n	db468 <_strtol_l.isra.0+0x84>
   db400:	f89c 4000 	ldrb.w	r4, [ip]
   db404:	f04f 0801 	mov.w	r8, #1
   db408:	f100 0c02 	add.w	ip, r0, #2
   db40c:	2b00      	cmp	r3, #0
   db40e:	d05c      	beq.n	db4ca <_strtol_l.isra.0+0xe6>
   db410:	2b10      	cmp	r3, #16
   db412:	d10c      	bne.n	db42e <_strtol_l.isra.0+0x4a>
   db414:	2c30      	cmp	r4, #48	; 0x30
   db416:	d10a      	bne.n	db42e <_strtol_l.isra.0+0x4a>
   db418:	f89c 0000 	ldrb.w	r0, [ip]
   db41c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db420:	2858      	cmp	r0, #88	; 0x58
   db422:	d14d      	bne.n	db4c0 <_strtol_l.isra.0+0xdc>
   db424:	f89c 4001 	ldrb.w	r4, [ip, #1]
   db428:	2310      	movs	r3, #16
   db42a:	f10c 0c02 	add.w	ip, ip, #2
   db42e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   db432:	3f01      	subs	r7, #1
   db434:	2600      	movs	r6, #0
   db436:	fbb7 f9f3 	udiv	r9, r7, r3
   db43a:	4630      	mov	r0, r6
   db43c:	fb03 7a19 	mls	sl, r3, r9, r7
   db440:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   db444:	2d09      	cmp	r5, #9
   db446:	d818      	bhi.n	db47a <_strtol_l.isra.0+0x96>
   db448:	462c      	mov	r4, r5
   db44a:	42a3      	cmp	r3, r4
   db44c:	dd24      	ble.n	db498 <_strtol_l.isra.0+0xb4>
   db44e:	1c75      	adds	r5, r6, #1
   db450:	d007      	beq.n	db462 <_strtol_l.isra.0+0x7e>
   db452:	4581      	cmp	r9, r0
   db454:	d31d      	bcc.n	db492 <_strtol_l.isra.0+0xae>
   db456:	d101      	bne.n	db45c <_strtol_l.isra.0+0x78>
   db458:	45a2      	cmp	sl, r4
   db45a:	db1a      	blt.n	db492 <_strtol_l.isra.0+0xae>
   db45c:	fb00 4003 	mla	r0, r0, r3, r4
   db460:	2601      	movs	r6, #1
   db462:	f81c 4b01 	ldrb.w	r4, [ip], #1
   db466:	e7eb      	b.n	db440 <_strtol_l.isra.0+0x5c>
   db468:	2c2b      	cmp	r4, #43	; 0x2b
   db46a:	bf08      	it	eq
   db46c:	f89c 4000 	ldrbeq.w	r4, [ip]
   db470:	46a8      	mov	r8, r5
   db472:	bf08      	it	eq
   db474:	f100 0c02 	addeq.w	ip, r0, #2
   db478:	e7c8      	b.n	db40c <_strtol_l.isra.0+0x28>
   db47a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   db47e:	2d19      	cmp	r5, #25
   db480:	d801      	bhi.n	db486 <_strtol_l.isra.0+0xa2>
   db482:	3c37      	subs	r4, #55	; 0x37
   db484:	e7e1      	b.n	db44a <_strtol_l.isra.0+0x66>
   db486:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   db48a:	2d19      	cmp	r5, #25
   db48c:	d804      	bhi.n	db498 <_strtol_l.isra.0+0xb4>
   db48e:	3c57      	subs	r4, #87	; 0x57
   db490:	e7db      	b.n	db44a <_strtol_l.isra.0+0x66>
   db492:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   db496:	e7e4      	b.n	db462 <_strtol_l.isra.0+0x7e>
   db498:	1c73      	adds	r3, r6, #1
   db49a:	d106      	bne.n	db4aa <_strtol_l.isra.0+0xc6>
   db49c:	2322      	movs	r3, #34	; 0x22
   db49e:	f8ce 3000 	str.w	r3, [lr]
   db4a2:	4638      	mov	r0, r7
   db4a4:	b942      	cbnz	r2, db4b8 <_strtol_l.isra.0+0xd4>
   db4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db4aa:	f1b8 0f00 	cmp.w	r8, #0
   db4ae:	d000      	beq.n	db4b2 <_strtol_l.isra.0+0xce>
   db4b0:	4240      	negs	r0, r0
   db4b2:	2a00      	cmp	r2, #0
   db4b4:	d0f7      	beq.n	db4a6 <_strtol_l.isra.0+0xc2>
   db4b6:	b10e      	cbz	r6, db4bc <_strtol_l.isra.0+0xd8>
   db4b8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   db4bc:	6011      	str	r1, [r2, #0]
   db4be:	e7f2      	b.n	db4a6 <_strtol_l.isra.0+0xc2>
   db4c0:	2430      	movs	r4, #48	; 0x30
   db4c2:	2b00      	cmp	r3, #0
   db4c4:	d1b3      	bne.n	db42e <_strtol_l.isra.0+0x4a>
   db4c6:	2308      	movs	r3, #8
   db4c8:	e7b1      	b.n	db42e <_strtol_l.isra.0+0x4a>
   db4ca:	2c30      	cmp	r4, #48	; 0x30
   db4cc:	d0a4      	beq.n	db418 <_strtol_l.isra.0+0x34>
   db4ce:	230a      	movs	r3, #10
   db4d0:	e7ad      	b.n	db42e <_strtol_l.isra.0+0x4a>
   db4d2:	bf00      	nop
   db4d4:	000dc2e3 	.word	0x000dc2e3

000db4d8 <strtol>:
   db4d8:	4613      	mov	r3, r2
   db4da:	460a      	mov	r2, r1
   db4dc:	4601      	mov	r1, r0
   db4de:	4802      	ldr	r0, [pc, #8]	; (db4e8 <strtol+0x10>)
   db4e0:	6800      	ldr	r0, [r0, #0]
   db4e2:	f7ff bf7f 	b.w	db3e4 <_strtol_l.isra.0>
   db4e6:	bf00      	nop
   db4e8:	2003de28 	.word	0x2003de28

000db4ec <__register_exitproc>:
   db4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db4f0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; db5ac <__register_exitproc+0xc0>
   db4f4:	4606      	mov	r6, r0
   db4f6:	f8d8 0000 	ldr.w	r0, [r8]
   db4fa:	461f      	mov	r7, r3
   db4fc:	460d      	mov	r5, r1
   db4fe:	4691      	mov	r9, r2
   db500:	f000 f856 	bl	db5b0 <__retarget_lock_acquire_recursive>
   db504:	4b25      	ldr	r3, [pc, #148]	; (db59c <__register_exitproc+0xb0>)
   db506:	681c      	ldr	r4, [r3, #0]
   db508:	b934      	cbnz	r4, db518 <__register_exitproc+0x2c>
   db50a:	4c25      	ldr	r4, [pc, #148]	; (db5a0 <__register_exitproc+0xb4>)
   db50c:	601c      	str	r4, [r3, #0]
   db50e:	4b25      	ldr	r3, [pc, #148]	; (db5a4 <__register_exitproc+0xb8>)
   db510:	b113      	cbz	r3, db518 <__register_exitproc+0x2c>
   db512:	681b      	ldr	r3, [r3, #0]
   db514:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   db518:	6863      	ldr	r3, [r4, #4]
   db51a:	2b1f      	cmp	r3, #31
   db51c:	dd07      	ble.n	db52e <__register_exitproc+0x42>
   db51e:	f8d8 0000 	ldr.w	r0, [r8]
   db522:	f000 f847 	bl	db5b4 <__retarget_lock_release_recursive>
   db526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db52e:	b34e      	cbz	r6, db584 <__register_exitproc+0x98>
   db530:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   db534:	b988      	cbnz	r0, db55a <__register_exitproc+0x6e>
   db536:	4b1c      	ldr	r3, [pc, #112]	; (db5a8 <__register_exitproc+0xbc>)
   db538:	b923      	cbnz	r3, db544 <__register_exitproc+0x58>
   db53a:	f8d8 0000 	ldr.w	r0, [r8]
   db53e:	f000 f838 	bl	db5b2 <__retarget_lock_release>
   db542:	e7f0      	b.n	db526 <__register_exitproc+0x3a>
   db544:	f44f 7084 	mov.w	r0, #264	; 0x108
   db548:	f7fc f942 	bl	d77d0 <malloc>
   db54c:	2800      	cmp	r0, #0
   db54e:	d0f4      	beq.n	db53a <__register_exitproc+0x4e>
   db550:	2300      	movs	r3, #0
   db552:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   db556:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   db55a:	6863      	ldr	r3, [r4, #4]
   db55c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   db560:	2201      	movs	r2, #1
   db562:	409a      	lsls	r2, r3
   db564:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   db568:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   db56c:	4313      	orrs	r3, r2
   db56e:	2e02      	cmp	r6, #2
   db570:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   db574:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   db578:	bf02      	ittt	eq
   db57a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   db57e:	431a      	orreq	r2, r3
   db580:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   db584:	6863      	ldr	r3, [r4, #4]
   db586:	f8d8 0000 	ldr.w	r0, [r8]
   db58a:	1c5a      	adds	r2, r3, #1
   db58c:	3302      	adds	r3, #2
   db58e:	6062      	str	r2, [r4, #4]
   db590:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   db594:	f000 f80e 	bl	db5b4 <__retarget_lock_release_recursive>
   db598:	2000      	movs	r0, #0
   db59a:	e7c6      	b.n	db52a <__register_exitproc+0x3e>
   db59c:	2003e7e0 	.word	0x2003e7e0
   db5a0:	2003e754 	.word	0x2003e754
   db5a4:	00000000 	.word	0x00000000
   db5a8:	000d77d1 	.word	0x000d77d1
   db5ac:	2003de8c 	.word	0x2003de8c

000db5b0 <__retarget_lock_acquire_recursive>:
   db5b0:	4770      	bx	lr

000db5b2 <__retarget_lock_release>:
   db5b2:	4770      	bx	lr

000db5b4 <__retarget_lock_release_recursive>:
   db5b4:	4770      	bx	lr

000db5b6 <link_code_end>:
	...

000db5b8 <dynalib_user>:
   db5b8:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db5c8:	0000 0000 6e69 6176 696c 0064 7453 7261     ....invalid.Star
   db5d8:	7574 2070 6f63 706d 656c 6574 7720 7469     tup complete wit
   db5e8:	2068 7325 7420 6d69 2065 6e61 2064 6977     h %s time and wi
   db5f8:	6874 6220 7461 6574 7972 2520 2e34 6632     th battery %4.2f
   db608:	4600 6f72 206d 7325 7420 206f 7325 5300     .From %s to %s.S
   db618:	6174 6574 5420 6172 736e 7469 6f69 006e     tate Transition.
   db628:	6c53 6565 2070 6f66 2072 6925 7320 6365     Sleep for %i sec
   db638:	6e6f 7364 3000 5700 6b6f 2065 6977 6874     onds.0.Woke with
   db648:	7520 6573 2072 7562 7474 6e6f 2d20 6e20      user button - n
   db658:	726f 616d 206c 706f 7265 7461 6f69 736e     ormal operations
   db668:	5300 6e65 2064 6166 6c69 6465 2d20 6720     .Send failed - g
   db678:	696f 676e 7420 206f 6573 646e 6520 6576     oing to send eve
   db688:	7972 6d20 6e69 7475 0065 0000               ry minute...

000db694 <_ZTV8MB85RC64>:
	...
   db69c:	40d5 000d 40e9 000d 5ae9 000d 5b7f 000d     .@...@...Z...[..
   db6ac:	5c01 000d 6e69 7469 6620 6961 656c 0064     .\..init failed.
   db6bc:	6f4c 4152 5220 6461 6f69 6920 696e 6974     LoRA Radio initi
   db6cc:	6c61 7a69 6465 6120 2073 6f4e 6564 754e     alized as NodeNu
   db6dc:	626d 7265 6f20 2066 6925 6120 646e 4420     mber of %i and D
   db6ec:	7665 6369 4965 2044 666f 2520 0069 6552     eviceID of %i.Re
   db6fc:	6563 7669 6465 6620 6f72 206d 6f6e 6564     ceived from node
   db70c:	2520 2064 6977 6874 7220 7373 3d69 6425      %d with rssi=%d
   db71c:	2d20 6120 2520 2073 656d 7373 6761 2065      - a %s message 
   db72c:	666f 6c20 6e65 7467 2068 6425 5300 6e65     of length %d.Sen
   db73c:	6964 676e 6420 7461 2061 6572 6f70 7472     ding data report
   db74c:	7420 206f 6147 6574 6177 0079 6573 646e      to Gateway.send
   db75c:	6e69 2067 656d 7373 6761 2065 6425 4400     ing message %d.D
   db76c:	7461 2061 6572 6f70 7472 7320 6e65 2064     ata report send 
   db77c:	6f74 6720 7461 7765 7961 7320 6375 6563     to gateway succe
   db78c:	7373 7566 6c6c 0079 6144 6174 7220 7065     ssfully.Data rep
   db79c:	726f 2074 6573 646e 7420 206f 6147 6574     ort send to Gate
   db7ac:	6177 2079 6166 6c69 6465 5400 6d69 2065     way failed.Time 
   db7bc:	6573 2074 6f74 2520 2073 6e61 2064 656e     set to %s and ne
   db7cc:	7478 7220 7065 726f 2074 7369 6920 206e     xt report is in 
   db7dc:	7525 7320 6365 6e6f 7364 4e00 206f 6572     %u seconds.No re
   db7ec:	6c70 2c79 6120 6572 7420 6568 6720 7461     ply, are the gat
   db7fc:	7765 7961 2073 7572 6e6e 6e69 3f67 4900     eways running?.I
   db80c:	696e 6174 696c 697a 676e 7420 6568 7020     nitalizing the p
   db81c:	6e69 6f4d 6564 0073 6e49 7469 6169 696c     inModes.Initiali
   db82c:	697a 676e 5020 776f 7265 4320 6e6f 6966     zing Power Confi
   db83c:	0067                                        g.

000db83e <BLUE_LED>:
   db83e:	0007                                        ..

000db840 <BUTTON_PIN>:
   db840:	0004                                        ..

000db842 <RFM95_CS>:
   db842:	000e                                        ..

000db844 <RFM95_INT>:
   db844:	0002                                        ..

000db846 <TMP36_SENSE_PIN>:
   db846:	000f 6579 0073 6f6e 4900 636e 6572 7361     ..yes.no.Increas
   db856:	6e69 2067 6572 6f70 7472 6e69 2067 7266     ing reporting fr
   db866:	7165 6575 636e 2079 6f74 3120 2032 696d     equency to 12 mi
   db876:	756e 6574 0073 7349 4c20 776f 5020 776f     nutes.Is Low Pow
   db886:	7265 4d20 646f 2065 6573 3f74 2520 0073     er Mode set? %s.
   db896:	6f4d 6564 0000                              Mode..

000db89c <_ZTVN5spark10LogHandlerE>:
	...
   db8ac:	40a5 000d 48d9 000d                         .@...H..

000db8b4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   db8bc:	48e5 000d 4919 000d 94f5 000d 48db 000d     .H...I.......H..
   db8cc:	6f4c 6461 6e69 2067 7953 7473 6d65 4420     Loading System D
   db8dc:	6665 7561 746c 0073 6f4c 6461 6e69 2067     efaults.Loading 
   db8ec:	7973 7473 6d65 6420 6665 7561 746c 0073     system defaults.
   db8fc:	7973 5373 6174 7375 6f20 6a62 6365 2074     sysStaus object 
   db90c:	7473 726f 6465 6120 646e 6820 7361 2068     stored and hash 
   db91c:	7075 6164 6574 0064 7563 7272 6e65 2074     updated.current 
   db92c:	626f 656a 7463 7320 6f74 6572 2064 6e61     object stored an
   db93c:	2064 6168 6873 7520 6470 7461 6465 4900     d hash updated.I
   db94c:	696e 6974 6c61 7a69 6e69 2067 6874 2065     nitializing the 
   db95c:	624f 656a 7463 5320 6f74 6572 4600 4152     Object Store.FRA
   db96c:	204d 696d 6d73 7461 6863 202c 7265 7361     M mismatch, eras
   db97c:	6e69 2067 6e61 2064 6f6c 6163 6966 676e     ing and locafing
   db98c:	6420 6665 7561 746c 2073 6669 6920 2074      defaults if it 
   db99c:	6863 6365 736b 6f20 7475 4600 4152 204d     checks out.FRAM 
   db9ac:	6e69 7469 6169 696c 657a 2c64 6c20 616f     initialized, loa
   db9bc:	6964 676e 6f20 6a62 6365 7374 0000 0000     ding objects....

000db9cc <_ZL17FRAMversionNumber>:
   db9cc:	0001 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   db9dc:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   db9ec:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   db9fc:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dba0c:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   dba1c:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   dba2c:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   dba3c:	4400 6369 6e6f 656e 7463 6465 2500 2073     .Diconnected.%s 
   dba4c:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   dba5c:	6630 2525 0020 6925 4320 4900 746e 7265     0f%% .%i C.Inter
   dba6c:	616e 206c 6554 706d 7265 7461 7275 2065     nal Temperature 
   dba7c:	7369 2520 0073 0000 b9d0 000d b9d8 000d     is %s...........
   dba8c:	b9dd 000d b9e2 000d b9e6 000d b9eb 000d     ................
   dba9c:	b9f0 000d b9f4 000d b9ff 000d ba0a 000d     ................
   dbaac:	6166 6c69 6465 7420 206f 6572 6461 7220     failed to read r
   dbabc:	6765 6441 7264 253d 3230 2078 6f63 6e75     egAddr=%02x coun
   dbacc:	3d74 7525 6600 6961 656c 2064 6f74 7220     t=%u.failed to r
   dbadc:	6165 2064 6572 4167 6464 3d72 3025 7832     ead regAddr=%02x
   dbaec:	7320 6174 3d74 6425 4600 554f 2054 6964      stat=%d.FOUT di
   dbafc:	2064 6f6e 2074 6f67 4820 4749 0048 6f6e     d not go HIGH.no
   dbb0c:	2074 6564 6574 7463 6465 6600 6961 656c     t detected.faile
   dbb1c:	2064 6f74 7720 6972 6574 7220 6765 6441     d to write regAd
   dbb2c:	7264 253d 3230 2078 7473 7461 253d 0064     dr=%02x stat=%d.
   dbb3c:	6573 5774 5444 2520 0064 6177 6374 6468     setWDT %d.watchd
   dbb4c:	676f 6320 656c 7261 6465 6220 6552 7573     og cleared bResu
   dbb5c:	746c 253d 0064 6177 6374 6468 676f 7320     lt=%d.watchdog s
   dbb6c:	7465 6620 756f 5372 6365 3d73 6425 6220     et fourSecs=%d b
   dbb7c:	6552 7573 746c 253d 0064 6572 6573 4374     Result=%d.resetC
   dbb8c:	6e6f 6966 2867 7830 3025 6c38 2978 5700     onfig(0x%08lx).W
   dbb9c:	5441 4843 4f44 0047 4544 5045 505f 574f     ATCHDOG.DEEP_POW
   dbbac:	5245 445f 574f 004e 4f43 4e55 4454 574f     ER_DOWN.COUNTDOW
   dbbbc:	5f4e 4954 454d 0052 4c41 5241 004d 6166     N_TIMER.ALARM.fa
   dbbcc:	6c69 7275 2065 6e69 7520 6470 7461 5765     ilure in updateW
   dbbdc:	6b61 5265 6165 6f73 206e 6425 7700 6b61     akeReason %d.wak
   dbbec:	2065 6572 7361 6e6f 3d20 2520 0073 3025     e reason = %s.%0
   dbbfc:	6434 252d 3230 2d64 3025 6432 2520 3230     4d-%02d-%02d %02
   dbc0c:	3a64 3025 6432 253a 3230 0064 6567 5274     d:%02d:%02d.getR
   dbc1c:	6374 7341 6d54 2520 0073 6573 2074 7973     tcAsTm %s.set sy
   dbc2c:	7473 6d65 6320 6f6c 6b63 6620 6f72 206d     stem clock from 
   dbc3c:	5452 2043 7325 6600 6961 656c 2064 6f74     RTC %s.failed to
   dbc4c:	6420 7465 6365 2074 4241 3831 3530 7300      detect AB1805.s
   dbc5c:	7465 7452 4163 5473 206d 7325 6600 6961     etRtcAsTm %s.fai
   dbc6c:	756c 6572 6920 206e 6573 5274 6374 7246     lure in setRtcFr
   dbc7c:	6d6f 6d54 2520 0064 6573 2074 5452 2043     omTm %d.set RTC 
   dbc8c:	7266 6d6f 6320 6f6c 6475 2520 0073 7061     from cloud %s.ap
   dbc9c:	2e70 6261 3831 3530 0000 0000               p.ab1805....

000dbca8 <_ZTV6AB1805>:
	...
   dbcb0:	4fc1 000d 4fc3 000d 552f 000d 55b5 000d     .O...O../U...U..
   dbcc0:	7277 7469 4465 7461 2061 6166 6c69 6465     writeData failed
   dbcd0:	6420 7275 6e69 2067 7265 7361 2065 7266      during erase fr
   dbce0:	6d61 6441 7264 253d 0075 0000               amAddr=%u...

000dbcec <_ZTV6MB85RC>:
	...
   dbcf4:	5a39 000d 5a3b 000d 5ae9 000d 5b7f 000d     9Z..;Z...Z...[..
   dbd04:	5c01 000d                                   .\..

000dbd08 <_ZTV15RHGenericDriver>:
	...
   dbd18:	5db9 000d 40a5 000d 40a5 000d 40a5 000d     .]...@...@...@..
   dbd28:	40a5 000d 5e1b 000d 5dbd 000d 5e6b 000d     .@...^...]..k^..
   dbd38:	5e39 000d 5e8f 000d 5dc7 000d 5dcf 000d     9^...^...]...]..
   dbd48:	5dd3 000d 5dd7 000d 5ddb 000d 5ddf 000d     .]...]...]...]..
   dbd58:	5dcb 000d 5deb 000d 5def 000d 5df3 000d     .]...]...]...]..
   dbd68:	5df7 000d 5dfb 000d 5e01 000d 5e05 000d     .]...]...^...^..
   dbd78:	5dc7 000d 5e09 000d 5e0f 000d 5e15 000d     .]...^...^...^..

000dbd88 <_ZTV12RHGenericSPI>:
	...
   dbd90:	40a5 000d 5eed 000d 5eef 000d 40a5 000d     .@...^...^...@..
   dbda0:	40a5 000d 5ef7 000d 5efb 000d 5eff 000d     .@...^...^...^..
   dbdb0:	5ef1 000d 5ef3 000d 5ef5 000d 6564 6166     .^...^...^..defa
   dbdc0:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   dbdd0:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   dbde0:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   dbdf0:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000dbe00 <_ZTVN8particle11SPISettingsE>:
	...
   dbe08:	5f45 000d 5f19 000d 5f1b 000d               E_..._..._..

000dbe14 <_ZTV13RHHardwareSPI>:
	...
   dbe1c:	5ff9 000d 600d 000d 601b 000d 6029 000d     ._...`...`..)`..
   dbe2c:	6095 000d 5ef7 000d 5efb 000d 5eff 000d     .`...^...^...^..
   dbe3c:	60a3 000d 60b7 000d 60c5 000d               .`...`...`..

000dbe48 <_ZTV6RHMesh>:
	...
   dbe50:	6195 000d 649d 000d 60f1 000d 60dd 000d     .a...d...`...`..

000dbe60 <_ZTV8RHRouter>:
	...
   dbe68:	6703 000d 6747 000d                         .g..Gg..

000dbe70 <_ZTV11RHSPIDriver>:
	...
   dbe80:	69e5 000d 40a5 000d 40a5 000d 40a5 000d     .i...@...@...@..
   dbe90:	40a5 000d 5e1b 000d 5dbd 000d 5e6b 000d     .@...^...]..k^..
   dbea0:	5e39 000d 5e8f 000d 5dc7 000d 5dcf 000d     9^...^...]...]..
   dbeb0:	5dd3 000d 5dd7 000d 5ddb 000d 5ddf 000d     .]...]...]...]..
   dbec0:	5dcb 000d 5deb 000d 5def 000d 5df3 000d     .]...]...]...]..
   dbed0:	5df7 000d 5dfb 000d 5e01 000d 5e05 000d     .]...]...^...^..
   dbee0:	5dc7 000d 5e09 000d 5e0f 000d 5e15 000d     .]...^...^...^..
   dbef0:	6a11 000d 6a1b 000d                         .j...j..

000dbef8 <_ZL18MODEM_CONFIG_TABLE>:
   dbef8:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000dbf08 <_ZTV7RH_RF95>:
	...
   dbf10:	6b83 000d 6bbb 000d 7079 000d 6edf 000d     .k...k..yp...n..
   dbf20:	6bf1 000d 6f27 000d 6b7f 000d 5e1b 000d     .k..'o...k...^..
   dbf30:	5dbd 000d 5e6b 000d 5e39 000d 5e8f 000d     .]..k^..9^...^..
   dbf40:	6b85 000d 5dcf 000d 5dd3 000d 5dd7 000d     .k...]...]...]..
   dbf50:	5ddb 000d 5ddf 000d 5dcb 000d 5deb 000d     .]...]...]...]..
   dbf60:	5def 000d 5df3 000d 5df7 000d 5dfb 000d     .]...]...]...]..
   dbf70:	5e01 000d 5e05 000d 6bcb 000d 5e09 000d     .^...^...k...^..
   dbf80:	5e0f 000d 5e15 000d 6a11 000d 6a1b 000d     .^...^...j...j..
   dbf90:	6b7b 000d                                   {k..

000dbf94 <_ZTVN5spark13CellularClassE>:
	...
   dbf9c:	794b 000d 7941 000d 7937 000d 78ed 000d     Ky..Ay..7y...x..
   dbfac:	792b 000d 791f 000d 984d 000d 9855 000d     +y...y..M...U...
   dbfbc:	7913 000d 790b 000d 7901 000d 78f7 000d     .y...y...y...x..
   dbfcc:	9885 000d                                   ....

000dbfd0 <_ZTV14CellularSignal>:
	...
   dbfd8:	79f9 000d 7a21 000d 79fb 000d 7a31 000d     .y..!z...y..1z..
   dbfe8:	7a65 000d 7a91 000d 7ac5 000d 7b15 000d     ez...z...z...{..
   dbff8:	79ff 000d 7a1b 000d fffc ffff 0000 0000     .y...z..........
   dc008:	7b3b 000d                                   ;{..

000dc00c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc014:	7b5b 000d 7b61 000d 7bb1 000d 7b6f 000d     [{..a{...{..o{..
   dc024:	7b5d 000d                                   ]{..

000dc028 <_ZTVN5spark13EthernetClassE>:
	...
   dc030:	8127 000d 811d 000d 8113 000d 8109 000d     '...............
   dc040:	80fd 000d 80f1 000d 984d 000d 9855 000d     ........M...U...
   dc050:	80e5 000d 80dd 000d 80d3 000d 80c9 000d     ................
   dc060:	9885 000d                                   ....

000dc064 <_ZTV7TwoWire>:
	...
   dc06c:	82cb 000d 8315 000d 82ed 000d 82cd 000d     ................
   dc07c:	82f5 000d 82fd 000d 8305 000d 830d 000d     ................

000dc08c <_ZTV9IPAddress>:
	...
   dc094:	8479 000d 8469 000d 846b 000d 2575 3430     y...i...k...u%04
   dc0a4:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   dc0b4:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   dc0c4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dc0d4:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   dc0e4:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   dc0f4:	6c69 2073 203d 0d00 000a 006d 0063 6e6c     ils = ....m.c.ln
   dc104:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.

000dc114 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dc11c:	8935 000d 895b 000d 8919 000d 8579 000d     5...[.......y...

000dc12c <_ZTVN5spark16StreamLogHandlerE>:
	...
   dc134:	8d11 000d 8d29 000d 94f5 000d 48db 000d     ....)........H..

000dc144 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dc14c:	8d3d 000d 8d51 000d 9699 000d 8921 000d     =...Q.......!...

000dc15c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dc164:	8933 000d 8969 000d 9431 000d 8923 000d     3...i...1...#...

000dc174 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dc17c:	8931 000d 8977 000d 8c59 000d 8995 000d     1...w...Y.......

000dc18c <_ZTVN5spark12NetworkClassE>:
	...
   dc194:	980d 000d 9817 000d 9821 000d 982b 000d     ........!...+...
   dc1a4:	9835 000d 9841 000d 984d 000d 9855 000d     5...A...M...U...
   dc1b4:	985d 000d 9869 000d 9871 000d 987b 000d     ]...i...q...{...
   dc1c4:	9885 000d                                   ....

000dc1c8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dc1c8:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   dc1d8:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   dc1e8:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   dc1f8:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   dc208:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dc218:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dc228 <_ZTV11USARTSerial>:
	...
   dc230:	a321 000d a38f 000d a367 000d 9acb 000d     !.......g.......
   dc240:	a337 000d a353 000d a345 000d a361 000d     7...S...E...a...
   dc250:	a323 000d a329 000d                         #...)...

000dc258 <_ZTV9USBSerial>:
	...
   dc260:	a42f 000d a497 000d a46d 000d 9acb 000d     /.......m.......
   dc270:	a45f 000d a431 000d a441 000d a491 000d     _...1...A.......
   dc280:	a451 000d a429 000d                         Q...)...

000dc288 <_ZSt7nothrow>:
   dc288:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   dc298:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000dc2a9 <day_name.6145>:
   dc2a9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc2b9:	6972 6153                                    riSat

000dc2be <mon_name.6146>:
   dc2be:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc2ce:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc2de:	4476 6365                                   vDec

000dc2e2 <_ctype_>:
   dc2e2:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc2f2:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc302:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc312:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc322:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc332:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc342:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc352:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc362:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc3e3 <link_const_variable_data_end>:
	...

000dc3e4 <link_constructors_location>:
   dc3e4:	000d4545 	.word	0x000d4545
   dc3e8:	000d4801 	.word	0x000d4801
   dc3ec:	000d4af9 	.word	0x000d4af9
   dc3f0:	000d4c3d 	.word	0x000d4c3d
   dc3f4:	000d4fb5 	.word	0x000d4fb5
   dc3f8:	000d59b1 	.word	0x000d59b1
   dc3fc:	000d60cd 	.word	0x000d60cd
   dc400:	000d78dd 	.word	0x000d78dd
   dc404:	000d79c9 	.word	0x000d79c9
   dc408:	000d8131 	.word	0x000d8131
   dc40c:	000d94e5 	.word	0x000d94e5
   dc410:	000d9959 	.word	0x000d9959
   dc414:	000d9c09 	.word	0x000d9c09
   dc418:	000da081 	.word	0x000da081
   dc41c:	000da30d 	.word	0x000da30d
