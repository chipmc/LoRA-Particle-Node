
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Node/target/2.3.0/boron/LoRA-Particle-Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008740  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc760  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001c8  2003dcc8  000dc764  0001dcc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000960  2003de90  2003de90  0002de90  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dc92c  000dc92c  0002c92c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dc958  000dc958  0002c958  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00300eae  00000000  00000000  0002c95c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002cf84  00000000  00000000  0032d80a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00048e59  00000000  00000000  0035a78e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003e88  00000000  00000000  003a35e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000bde8  00000000  00000000  003a746f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000544de  00000000  00000000  003b3257  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00073a23  00000000  00000000  00407735  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012ed37  00000000  00000000  0047b158  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b288  00000000  00000000  005a9e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f007 f9f1 	bl	db418 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f007 fa13 	bl	db468 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dcc8 	.word	0x2003dcc8
   d404c:	000dc764 	.word	0x000dc764
   d4050:	2003de90 	.word	0x2003de90
   d4054:	2003de90 	.word	0x2003de90
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f006 fbfd 	bl	da860 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc718 	.word	0x000dc718
   d4080:	000dc754 	.word	0x000dc754

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b886 	b.w	d4194 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f967 	bl	d435c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f006 bb9d 	b.w	da7d0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 bcc3 	b.w	d7a20 <malloc>

000d409a <_Znaj>:
   d409a:	f003 bcc1 	b.w	d7a20 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 bcc7 	b.w	d7a30 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f003 fb86 	bl	d77bc <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d743d 	.word	0x000d743d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z13userSwitchISRv>:
	}
	Log.info(stateTransitionString);
}

void userSwitchISR() {
  userSwitchDectected = true;                                            // The the flag for the user switch interrupt
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z13userSwitchISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
   d40ce:	4770      	bx	lr
   d40d0:	2003def3 	.word	0x2003def3

000d40d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN8MB85RC64D1Ev+0x10>)
   d40d8:	6003      	str	r3, [r0, #0]
   d40da:	4604      	mov	r4, r0
   d40dc:	f001 fdd4 	bl	d5c88 <_ZN6MB85RCD1Ev>
   d40e0:	4620      	mov	r0, r4
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	000db910 	.word	0x000db910

000d40e8 <_ZN8MB85RC64D0Ev>:
   d40e8:	b510      	push	{r4, lr}
   d40ea:	4604      	mov	r4, r0
   d40ec:	f7ff fff2 	bl	d40d4 <_ZN8MB85RC64D1Ev>
   d40f0:	4620      	mov	r0, r4
   d40f2:	2110      	movs	r1, #16
   d40f4:	f006 fd0a 	bl	dab0c <_ZdlPvj>
   d40f8:	4620      	mov	r0, r4
   d40fa:	bd10      	pop	{r4, pc}

000d40fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
            config_.flags |= f.value();
        }
        return *this;
    }

    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d40fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d40fe:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(pin_t pin, InterruptMode mode) {
   d4100:	4605      	mov	r5, r0
   d4102:	460f      	mov	r7, r1
   d4104:	4616      	mov	r6, r2
        if (valid_) {
   d4106:	b18b      	cbz	r3, d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4108:	6803      	ldr	r3, [r0, #0]
   d410a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d410c:	b183      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d410e:	889a      	ldrh	r2, [r3, #4]
   d4110:	2a01      	cmp	r2, #1
   d4112:	d006      	beq.n	d4122 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
   d4114:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4116:	e7f9      	b.n	d410c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   d4118:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d411a:	b14b      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
   d411c:	889a      	ldrh	r2, [r3, #4]
   d411e:	2a01      	cmp	r2, #1
   d4120:	d1fa      	bne.n	d4118 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
   d4122:	b12b      	cbz	r3, d4130 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
   d4124:	899a      	ldrh	r2, [r3, #12]
   d4126:	42ba      	cmp	r2, r7
   d4128:	d1f6      	bne.n	d4118 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
   d412a:	739e      	strb	r6, [r3, #14]
            wakeupSource->pin = pin;
            wakeupSource->mode = mode;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d412c:	4628      	mov	r0, r5
   d412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4130:	490a      	ldr	r1, [pc, #40]	; (d415c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x60>)
   d4132:	2010      	movs	r0, #16
   d4134:	f006 fcec 	bl	dab10 <_ZnwjRKSt9nothrow_t>
   d4138:	4604      	mov	r4, r0
   d413a:	b168      	cbz	r0, d4158 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x5c>
   d413c:	2210      	movs	r2, #16
   d413e:	2100      	movs	r1, #0
   d4140:	f007 f992 	bl	db468 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4144:	4b06      	ldr	r3, [pc, #24]	; (d4160 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x64>)
   d4146:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4148:	2301      	movs	r3, #1
   d414a:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d414c:	692b      	ldr	r3, [r5, #16]
   d414e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4150:	81a7      	strh	r7, [r4, #12]
            wakeupSource->mode = mode;
   d4152:	73a6      	strb	r6, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4154:	612c      	str	r4, [r5, #16]
   d4156:	e7e9      	b.n	d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
                valid_ = false;
   d4158:	7528      	strb	r0, [r5, #20]
                return *this;
   d415a:	e7e7      	b.n	d412c <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
   d415c:	000dc5bc 	.word	0x000dc5bc
   d4160:	00030010 	.word	0x00030010

000d4164 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4164:	b40e      	push	{r1, r2, r3}
   d4166:	b510      	push	{r4, lr}
   d4168:	b08d      	sub	sp, #52	; 0x34
   d416a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d416c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d416e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4172:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4174:	2300      	movs	r3, #0
   d4176:	2020      	movs	r0, #32
   d4178:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d417c:	e9cd 4200 	strd	r4, r2, [sp]
   d4180:	201e      	movs	r0, #30
   d4182:	aa04      	add	r2, sp, #16
   d4184:	f003 fb2a 	bl	d77dc <log_message_v>
}
   d4188:	b00d      	add	sp, #52	; 0x34
   d418a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d418e:	b003      	add	sp, #12
   d4190:	4770      	bx	lr
	...

000d4194 <setup>:
void setup() {
   d4194:	b530      	push	{r4, r5, lr}
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d4196:	4c39      	ldr	r4, [pc, #228]	; (d427c <setup+0xe8>)
  	Log.info("Startup complete with %s time and with battery %4.2f", (Time.isValid())? "valid" : "invalid", System.batteryCharge());
   d4198:	4d39      	ldr	r5, [pc, #228]	; (d4280 <setup+0xec>)
void setup() {
   d419a:	b089      	sub	sp, #36	; 0x24
	delay(5000);	// Wait for serial 
   d419c:	f241 3088 	movw	r0, #5000	; 0x1388
   d41a0:	f003 fca6 	bl	d7af0 <delay>
    initializePinModes();                           // Sets the pinModes
   d41a4:	f000 fc70 	bl	d4a88 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   d41a8:	f000 fc86 	bl	d4ab8 <_Z18initializePowerCfgv>
    storageObjectStart();                           // Sets up the storage for system and current status in storage_objects.h
   d41ac:	f000 feec 	bl	d4f88 <_Z18storageObjectStartv>
   d41b0:	2308      	movs	r3, #8
        ab1805.withFOUT(D8).setup();                // The carrier board has D8 connected to FOUT for wake interrupts
   d41b2:	2101      	movs	r1, #1
   d41b4:	4620      	mov	r0, r4
   d41b6:	8163      	strh	r3, [r4, #10]
   d41b8:	f001 fbf2 	bl	d59a0 <_ZN6AB18055setupEb>
        ab1805.resetConfig();                       // Reset the AB1805 configuration to default values
   d41bc:	2100      	movs	r1, #0
   d41be:	4620      	mov	r0, r4
   d41c0:	f001 f9d0 	bl	d5564 <_ZN6AB180511resetConfigEm>
        ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);// Enable watchdog
   d41c4:	217c      	movs	r1, #124	; 0x7c
   d41c6:	4620      	mov	r0, r4
   d41c8:	f001 f948 	bl	d545c <_ZN6AB18056setWDTEi>
	initializeLoRA(false);								// Start the LoRA radio - Node
   d41cc:	2000      	movs	r0, #0
   d41ce:	f000 fa25 	bl	d461c <_Z14initializeLoRAb>
  	Log.info("Startup complete with %s time and with battery %4.2f", (Time.isValid())? "valid" : "invalid", System.batteryCharge());
   d41d2:	f006 f997 	bl	da504 <_ZN9TimeClass7isValidEv>
   d41d6:	4a2b      	ldr	r2, [pc, #172]	; (d4284 <setup+0xf0>)
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
    const int ret = diag_get_source(id, &src, nullptr);
   d41d8:	a904      	add	r1, sp, #16
   d41da:	2800      	cmp	r0, #0
   d41dc:	bf18      	it	ne
   d41de:	4615      	movne	r5, r2
    const diag_source* src = nullptr;
   d41e0:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d41e2:	2003      	movs	r0, #3
    const diag_source* src = nullptr;
   d41e4:	9204      	str	r2, [sp, #16]
    const int ret = diag_get_source(id, &src, nullptr);
   d41e6:	f003 fb11 	bl	d780c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d41ea:	2800      	cmp	r0, #0
   d41ec:	d13e      	bne.n	d426c <setup+0xd8>
        return ret;
    }
    return get(src, val);
   d41ee:	9c04      	ldr	r4, [sp, #16]
    SPARK_ASSERT(src && src->callback);
   d41f0:	b10c      	cbz	r4, d41f6 <setup+0x62>
   d41f2:	6923      	ldr	r3, [r4, #16]
   d41f4:	b923      	cbnz	r3, d4200 <setup+0x6c>
   d41f6:	4a24      	ldr	r2, [pc, #144]	; (d4288 <setup+0xf4>)
   d41f8:	2100      	movs	r1, #0
   d41fa:	200a      	movs	r0, #10
   d41fc:	f003 fade 	bl	d77bc <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4200:	2300      	movs	r3, #0
   d4202:	f8ad 3016 	strh.w	r3, [sp, #22]
   d4206:	230c      	movs	r3, #12
   d4208:	f8ad 3014 	strh.w	r3, [sp, #20]
   d420c:	446b      	add	r3, sp
   d420e:	9306      	str	r3, [sp, #24]
   d4210:	2304      	movs	r3, #4
   d4212:	9307      	str	r3, [sp, #28]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4214:	aa05      	add	r2, sp, #20
   d4216:	6923      	ldr	r3, [r4, #16]
   d4218:	2101      	movs	r1, #1
   d421a:	4620      	mov	r0, r4
   d421c:	4798      	blx	r3
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d421e:	bb28      	cbnz	r0, d426c <setup+0xd8>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4220:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d4224:	ee07 3a90 	vmov	s15, r3
   d4228:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   d422c:	ee17 0a90 	vmov	r0, s15
   d4230:	f006 fdda 	bl	dade8 <__aeabi_f2d>
   d4234:	462a      	mov	r2, r5
   d4236:	e9cd 0100 	strd	r0, r1, [sp]
   d423a:	4914      	ldr	r1, [pc, #80]	; (d428c <setup+0xf8>)
   d423c:	4814      	ldr	r0, [pc, #80]	; (d4290 <setup+0xfc>)
   d423e:	f7ff ff91 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
  	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   d4242:	4814      	ldr	r0, [pc, #80]	; (d4294 <setup+0x100>)
   d4244:	4914      	ldr	r1, [pc, #80]	; (d4298 <setup+0x104>)
   d4246:	8800      	ldrh	r0, [r0, #0]
   d4248:	2200      	movs	r2, #0
   d424a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d424e:	9200      	str	r2, [sp, #0]
   d4250:	f004 fa08 	bl	d8664 <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (!Time.isValid() || sysStatus.nodeNumber < 10) state = ERROR_STATE;
   d4254:	f006 f956 	bl	da504 <_ZN9TimeClass7isValidEv>
   d4258:	4b10      	ldr	r3, [pc, #64]	; (d429c <setup+0x108>)
   d425a:	b118      	cbz	r0, d4264 <setup+0xd0>
   d425c:	4a10      	ldr	r2, [pc, #64]	; (d42a0 <setup+0x10c>)
   d425e:	8852      	ldrh	r2, [r2, #2]
   d4260:	2a09      	cmp	r2, #9
   d4262:	d806      	bhi.n	d4272 <setup+0xde>
   d4264:	2201      	movs	r2, #1
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   d4266:	701a      	strb	r2, [r3, #0]
}
   d4268:	b009      	add	sp, #36	; 0x24
   d426a:	bd30      	pop	{r4, r5, pc}
            return -1.0f;
   d426c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d4270:	e7dc      	b.n	d422c <setup+0x98>
	if (state == INITIALIZATION_STATE) state = LoRA_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   d4272:	781a      	ldrb	r2, [r3, #0]
   d4274:	2a00      	cmp	r2, #0
   d4276:	d1f7      	bne.n	d4268 <setup+0xd4>
   d4278:	2204      	movs	r2, #4
   d427a:	e7f4      	b.n	d4266 <setup+0xd2>
   d427c:	2003dea0 	.word	0x2003dea0
   d4280:	000db820 	.word	0x000db820
   d4284:	000db822 	.word	0x000db822
   d4288:	000d743d 	.word	0x000d743d
   d428c:	000db828 	.word	0x000db828
   d4290:	2003e574 	.word	0x2003e574
   d4294:	000dbb74 	.word	0x000dbb74
   d4298:	000d40c9 	.word	0x000d40c9
   d429c:	2003def2 	.word	0x2003def2
   d42a0:	2003e2c8 	.word	0x2003e2c8

000d42a4 <_Z22publishStateTransitionv>:
{
   d42a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d42a6:	4d25      	ldr	r5, [pc, #148]	; (d433c <_Z22publishStateTransitionv+0x98>)
   d42a8:	4c25      	ldr	r4, [pc, #148]	; (d4340 <_Z22publishStateTransitionv+0x9c>)
   d42aa:	4b26      	ldr	r3, [pc, #152]	; (d4344 <_Z22publishStateTransitionv+0xa0>)
   d42ac:	782a      	ldrb	r2, [r5, #0]
   d42ae:	7821      	ldrb	r1, [r4, #0]
{
   d42b0:	b08f      	sub	sp, #60	; 0x3c
	snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d42b2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d42b6:	9200      	str	r2, [sp, #0]
   d42b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d42bc:	4a22      	ldr	r2, [pc, #136]	; (d4348 <_Z22publishStateTransitionv+0xa4>)
   d42be:	2128      	movs	r1, #40	; 0x28
   d42c0:	a804      	add	r0, sp, #16
   d42c2:	f003 fbcd 	bl	d7a60 <snprintf>
	oldState = state;
   d42c6:	782b      	ldrb	r3, [r5, #0]
   d42c8:	7023      	strb	r3, [r4, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d42ca:	f003 fb21 	bl	d7910 <spark_cloud_flag_connected>
	if (Particle.connected()) {
   d42ce:	2800      	cmp	r0, #0
   d42d0:	d02e      	beq.n	d4330 <_Z22publishStateTransitionv+0x8c>
		if (millis() - lastPublish > 1000) {
   d42d2:	4c1e      	ldr	r4, [pc, #120]	; (d434c <_Z22publishStateTransitionv+0xa8>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42d4:	f003 f8ba 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
   d42d8:	e9d4 3200 	ldrd	r3, r2, [r4]
   d42dc:	1ac6      	subs	r6, r0, r3
   d42de:	eb62 0742 	sbc.w	r7, r2, r2, lsl #1
   d42e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d42e6:	2300      	movs	r3, #0
   d42e8:	42b2      	cmp	r2, r6
   d42ea:	41bb      	sbcs	r3, r7
   d42ec:	da20      	bge.n	d4330 <_Z22publishStateTransitionv+0x8c>
   d42ee:	f003 f8ad 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d42f2:	2300      	movs	r3, #0
   d42f4:	6063      	str	r3, [r4, #4]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d42f6:	4b16      	ldr	r3, [pc, #88]	; (d4350 <_Z22publishStateTransitionv+0xac>)
   d42f8:	6020      	str	r0, [r4, #0]
   d42fa:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42fc:	f88d 3000 	strb.w	r3, [sp]
   d4300:	4914      	ldr	r1, [pc, #80]	; (d4354 <_Z22publishStateTransitionv+0xb0>)
   d4302:	233c      	movs	r3, #60	; 0x3c
   d4304:	aa04      	add	r2, sp, #16
   d4306:	a802      	add	r0, sp, #8
   d4308:	f003 fe90 	bl	d802c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d430c:	9c03      	ldr	r4, [sp, #12]
   d430e:	b17c      	cbz	r4, d4330 <_Z22publishStateTransitionv+0x8c>
      if (--_M_use_count == 0)
   d4310:	6863      	ldr	r3, [r4, #4]
   d4312:	3b01      	subs	r3, #1
   d4314:	6063      	str	r3, [r4, #4]
   d4316:	b95b      	cbnz	r3, d4330 <_Z22publishStateTransitionv+0x8c>
          _M_dispose();
   d4318:	6823      	ldr	r3, [r4, #0]
   d431a:	4620      	mov	r0, r4
   d431c:	689b      	ldr	r3, [r3, #8]
   d431e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4320:	68a3      	ldr	r3, [r4, #8]
   d4322:	3b01      	subs	r3, #1
   d4324:	60a3      	str	r3, [r4, #8]
   d4326:	b91b      	cbnz	r3, d4330 <_Z22publishStateTransitionv+0x8c>
            _M_destroy();
   d4328:	6823      	ldr	r3, [r4, #0]
   d432a:	4620      	mov	r0, r4
   d432c:	68db      	ldr	r3, [r3, #12]
   d432e:	4798      	blx	r3
	Log.info(stateTransitionString);
   d4330:	4809      	ldr	r0, [pc, #36]	; (d4358 <_Z22publishStateTransitionv+0xb4>)
   d4332:	a904      	add	r1, sp, #16
   d4334:	f7ff ff16 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
}
   d4338:	b00f      	add	sp, #60	; 0x3c
   d433a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d433c:	2003def2 	.word	0x2003def2
   d4340:	2003def0 	.word	0x2003def0
   d4344:	2003dcc8 	.word	0x2003dcc8
   d4348:	000db85d 	.word	0x000db85d
   d434c:	2003de98 	.word	0x2003de98
   d4350:	2003de90 	.word	0x2003de90
   d4354:	000db86b 	.word	0x000db86b
   d4358:	2003e574 	.word	0x2003e574

000d435c <loop>:
void loop() {
   d435c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (state) {
   d4360:	4d78      	ldr	r5, [pc, #480]	; (d4544 <loop+0x1e8>)
   d4362:	782b      	ldrb	r3, [r5, #0]
   d4364:	3b01      	subs	r3, #1
void loop() {
   d4366:	b088      	sub	sp, #32
   d4368:	2b03      	cmp	r3, #3
   d436a:	f200 808c 	bhi.w	d4486 <loop+0x12a>
   d436e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4372:	00cd      	.short	0x00cd
   d4374:	001d0004 	.word	0x001d0004
   d4378:	00a4      	.short	0x00a4
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d437a:	4b73      	ldr	r3, [pc, #460]	; (d4548 <loop+0x1ec>)
   d437c:	781b      	ldrb	r3, [r3, #0]
   d437e:	2b02      	cmp	r3, #2
   d4380:	d001      	beq.n	d4386 <loop+0x2a>
   d4382:	f7ff ff8f 	bl	d42a4 <_Z22publishStateTransitionv>
			if (Time.now() - lastPublish > sysStatus.nextReportSeconds) state = LoRA_STATE;		   // If time is valid - wake on the right minute of the hour
   d4386:	f006 f8da 	bl	da53e <_ZN9TimeClass3nowEv>
   d438a:	4a70      	ldr	r2, [pc, #448]	; (d454c <loop+0x1f0>)
   d438c:	e9d2 3200 	ldrd	r3, r2, [r2]
   d4390:	1ac6      	subs	r6, r0, r3
   d4392:	4b6f      	ldr	r3, [pc, #444]	; (d4550 <loop+0x1f4>)
   d4394:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d4398:	eb61 0702 	sbc.w	r7, r1, r2
   d439c:	8b5a      	ldrh	r2, [r3, #26]
   d439e:	2300      	movs	r3, #0
   d43a0:	42b2      	cmp	r2, r6
   d43a2:	41bb      	sbcs	r3, r7
   d43a4:	da6f      	bge.n	d4486 <loop+0x12a>
   d43a6:	2304      	movs	r3, #4
				state = IDLE_STATE;
   d43a8:	702b      	strb	r3, [r5, #0]
   d43aa:	e06c      	b.n	d4486 <loop+0x12a>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d43ac:	4b66      	ldr	r3, [pc, #408]	; (d4548 <loop+0x1ec>)
   d43ae:	781b      	ldrb	r3, [r3, #0]
   d43b0:	2b03      	cmp	r3, #3
   d43b2:	d001      	beq.n	d43b8 <loop+0x5c>
   d43b4:	f7ff ff76 	bl	d42a4 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   d43b8:	2100      	movs	r1, #0
   d43ba:	4866      	ldr	r0, [pc, #408]	; (d4554 <loop+0x1f8>)
   d43bc:	f001 f84e 	bl	d545c <_ZN6AB18056setWDTEi>
			int wakeInSeconds = sysStatus.nextReportSeconds - (Time.now() - lastPublish);  // sleep till next event
   d43c0:	4b63      	ldr	r3, [pc, #396]	; (d4550 <loop+0x1f4>)
   d43c2:	8b5e      	ldrh	r6, [r3, #26]
   d43c4:	4b61      	ldr	r3, [pc, #388]	; (d454c <loop+0x1f0>)
   d43c6:	681c      	ldr	r4, [r3, #0]
   d43c8:	f006 f8b9 	bl	da53e <_ZN9TimeClass3nowEv>
   d43cc:	4426      	add	r6, r4
   d43ce:	1a34      	subs	r4, r6, r0
			Log.info("Sleep for %i seconds", wakeInSeconds);
   d43d0:	4622      	mov	r2, r4
   d43d2:	4961      	ldr	r1, [pc, #388]	; (d4558 <loop+0x1fc>)
   d43d4:	4861      	ldr	r0, [pc, #388]	; (d455c <loop+0x200>)
   d43d6:	f7ff fec5 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        if (valid_) {
   d43da:	4b61      	ldr	r3, [pc, #388]	; (d4560 <loop+0x204>)
   d43dc:	7d1a      	ldrb	r2, [r3, #20]
   d43de:	b10a      	cbz	r2, d43e4 <loop+0x88>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d43e0:	2202      	movs	r2, #2
   d43e2:	721a      	strb	r2, [r3, #8]
				.gpio(BUTTON_PIN,CHANGE)
   d43e4:	4b5f      	ldr	r3, [pc, #380]	; (d4564 <loop+0x208>)
   d43e6:	485e      	ldr	r0, [pc, #376]	; (d4560 <loop+0x204>)
   d43e8:	881f      	ldrh	r7, [r3, #0]
   d43ea:	2200      	movs	r2, #0
   d43ec:	4639      	mov	r1, r7
   d43ee:	f7ff fe85 	bl	d40fc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d43f2:	7d03      	ldrb	r3, [r0, #20]
   d43f4:	4606      	mov	r6, r0
   d43f6:	b303      	cbz	r3, d443a <loop+0xde>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d43f8:	6803      	ldr	r3, [r0, #0]
				.duration(wakeInSeconds * 1000L);
   d43fa:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   d43fe:	68db      	ldr	r3, [r3, #12]
   d4400:	fb08 f804 	mul.w	r8, r8, r4
        if (!start) {
   d4404:	b12b      	cbz	r3, d4412 <loop+0xb6>
            if (start->type == type) {
   d4406:	889a      	ldrh	r2, [r3, #4]
   d4408:	2a04      	cmp	r2, #4
   d440a:	f000 8098 	beq.w	d453e <loop+0x1e2>
            start = start->next;
   d440e:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4410:	e7f8      	b.n	d4404 <loop+0xa8>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4412:	4955      	ldr	r1, [pc, #340]	; (d4568 <loop+0x20c>)
   d4414:	2010      	movs	r0, #16
   d4416:	f006 fb7b 	bl	dab10 <_ZnwjRKSt9nothrow_t>
   d441a:	4604      	mov	r4, r0
   d441c:	2800      	cmp	r0, #0
   d441e:	f000 808c 	beq.w	d453a <loop+0x1de>
   d4422:	2210      	movs	r2, #16
   d4424:	2100      	movs	r1, #0
   d4426:	f007 f81f 	bl	db468 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d442a:	4b50      	ldr	r3, [pc, #320]	; (d456c <loop+0x210>)
   d442c:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d442e:	2304      	movs	r3, #4
   d4430:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4432:	6933      	ldr	r3, [r6, #16]
            wakeupSource->ms = ms;
   d4434:	e9c4 3802 	strd	r3, r8, [r4, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4438:	6134      	str	r4, [r6, #16]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   d443a:	4949      	ldr	r1, [pc, #292]	; (d4560 <loop+0x204>)
   d443c:	a801      	add	r0, sp, #4
   d443e:	f005 fee5 	bl	da20c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   d4442:	4844      	ldr	r0, [pc, #272]	; (d4554 <loop+0x1f8>)
   d4444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d4448:	f001 f808 	bl	d545c <_ZN6AB18056setWDTEi>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d444c:	9b01      	ldr	r3, [sp, #4]
        if (wakeupSource_) {
   d444e:	2b00      	cmp	r3, #0
   d4450:	d030      	beq.n	d44b4 <loop+0x158>
        if (wakeupReason() == SystemSleepWakeupReason::BY_GPIO) {
   d4452:	889a      	ldrh	r2, [r3, #4]
   d4454:	2a01      	cmp	r2, #1
   d4456:	d12d      	bne.n	d44b4 <loop+0x158>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
   d4458:	899b      	ldrh	r3, [r3, #12]
			if (result.wakeupPin() == BUTTON_PIN) {                            // If the user woke the device we need to get up - device was sleeping so we need to reset opening hours
   d445a:	429f      	cmp	r7, r3
   d445c:	d10d      	bne.n	d447a <loop+0x11e>
				setLowPowerMode("0");                                          // We are waking the device for a reason
   d445e:	4944      	ldr	r1, [pc, #272]	; (d4570 <loop+0x214>)
   d4460:	a804      	add	r0, sp, #16
   d4462:	f005 fe0c 	bl	da07e <_ZN6StringC1EPKc>
   d4466:	a804      	add	r0, sp, #16
   d4468:	f000 fb9e 	bl	d4ba8 <_Z15setLowPowerMode6String>
   d446c:	a804      	add	r0, sp, #16
   d446e:	f005 fdbb 	bl	d9fe8 <_ZN6StringD1Ev>
				Log.info("Woke with user button - normal operations");
   d4472:	4940      	ldr	r1, [pc, #256]	; (d4574 <loop+0x218>)
   d4474:	4839      	ldr	r0, [pc, #228]	; (d455c <loop+0x200>)
   d4476:	f7ff fe75 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        if (wakeupSource_) {
   d447a:	9801      	ldr	r0, [sp, #4]
			state = IDLE_STATE;
   d447c:	2302      	movs	r3, #2
   d447e:	702b      	strb	r3, [r5, #0]
   d4480:	b108      	cbz	r0, d4486 <loop+0x12a>
            free(wakeupSource_);
   d4482:	f003 fad5 	bl	d7a30 <free>
	ab1805.loop();                                  							// Keeps the RTC synchronized with the Boron's clock
   d4486:	4833      	ldr	r0, [pc, #204]	; (d4554 <loop+0x1f8>)
   d4488:	f001 fb6a 	bl	d5b60 <_ZN6AB18054loopEv>
    storageObjectLoop();                            							// Compares current system and current objects and stores if the hash changes (once / second) in storage_objects.h
   d448c:	f000 fd04 	bl	d4e98 <_Z17storageObjectLoopv>
	if (rescueMode) {
   d4490:	4b39      	ldr	r3, [pc, #228]	; (d4578 <loop+0x21c>)
   d4492:	781a      	ldrb	r2, [r3, #0]
   d4494:	b15a      	cbz	r2, d44ae <loop+0x152>
		rescueMode = false;
   d4496:	2200      	movs	r2, #0
   d4498:	701a      	strb	r2, [r3, #0]
		sysStatus.nextReportSeconds = 60;										// Rescue mode publish evert minute until we can connect
   d449a:	4b2d      	ldr	r3, [pc, #180]	; (d4550 <loop+0x1f4>)
		Log.info("Send failed - going to send every minute");
   d449c:	482f      	ldr	r0, [pc, #188]	; (d455c <loop+0x200>)
		sysStatus.lowPowerMode = false;
   d449e:	721a      	strb	r2, [r3, #8]
		sysStatus.nextReportSeconds = 60;										// Rescue mode publish evert minute until we can connect
   d44a0:	213c      	movs	r1, #60	; 0x3c
   d44a2:	8359      	strh	r1, [r3, #26]
		Log.info("Send failed - going to send every minute");
   d44a4:	4935      	ldr	r1, [pc, #212]	; (d457c <loop+0x220>)
   d44a6:	f7ff fe5d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		state = IDLE_STATE;
   d44aa:	2302      	movs	r3, #2
   d44ac:	702b      	strb	r3, [r5, #0]
}
   d44ae:	b008      	add	sp, #32
   d44b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return std::numeric_limits<pin_t>::max();
   d44b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d44b8:	e7cf      	b.n	d445a <loop+0xfe>
			if (state != oldState) {
   d44ba:	4b23      	ldr	r3, [pc, #140]	; (d4548 <loop+0x1ec>)
   d44bc:	781b      	ldrb	r3, [r3, #0]
   d44be:	2b04      	cmp	r3, #4
   d44c0:	d00f      	beq.n	d44e2 <loop+0x186>
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d44c2:	f7ff feef 	bl	d42a4 <_Z22publishStateTransitionv>
				takeMeasurements();
   d44c6:	f000 fe6f 	bl	d51a8 <_Z16takeMeasurementsv>
				lastPublish = Time.now();
   d44ca:	f006 f838 	bl	da53e <_ZN9TimeClass3nowEv>
   d44ce:	4b1f      	ldr	r3, [pc, #124]	; (d454c <loop+0x1f0>)
   d44d0:	17c1      	asrs	r1, r0, #31
   d44d2:	e9c3 0100 	strd	r0, r1, [r3]
				if (!composeDataReportNode()) rescueMode = true;				// Initiate sending report
   d44d6:	f000 f8f5 	bl	d46c4 <_Z21composeDataReportNodev>
   d44da:	b910      	cbnz	r0, d44e2 <loop+0x186>
   d44dc:	4b26      	ldr	r3, [pc, #152]	; (d4578 <loop+0x21c>)
   d44de:	2201      	movs	r2, #1
   d44e0:	701a      	strb	r2, [r3, #0]
			if (receiveAcknowledmentDataReportNode()) {							// Listen for acknowledgement
   d44e2:	f000 f961 	bl	d47a8 <_Z34receiveAcknowledmentDataReportNodev>
   d44e6:	b168      	cbz	r0, d4504 <loop+0x1a8>
				current.hourly = 0;												// Zero the hourly count
   d44e8:	4b25      	ldr	r3, [pc, #148]	; (d4580 <loop+0x224>)
   d44ea:	2200      	movs	r2, #0
   d44ec:	839a      	strh	r2, [r3, #28]
				if (!sysStatus.lowPowerMode && (sysStatus.nextReportSeconds / 60 > 12)) sysStatus.lowPowerMode = true;
   d44ee:	4b18      	ldr	r3, [pc, #96]	; (d4550 <loop+0x1f4>)
   d44f0:	7a1a      	ldrb	r2, [r3, #8]
   d44f2:	b92a      	cbnz	r2, d4500 <loop+0x1a4>
   d44f4:	8b5a      	ldrh	r2, [r3, #26]
   d44f6:	f5b2 7f43 	cmp.w	r2, #780	; 0x30c
   d44fa:	d301      	bcc.n	d4500 <loop+0x1a4>
   d44fc:	2201      	movs	r2, #1
   d44fe:	721a      	strb	r2, [r3, #8]
				state = IDLE_STATE;
   d4500:	2302      	movs	r3, #2
   d4502:	e751      	b.n	d43a8 <loop+0x4c>
			else rescueMode = true;
   d4504:	4b1c      	ldr	r3, [pc, #112]	; (d4578 <loop+0x21c>)
   d4506:	2201      	movs	r2, #1
   d4508:	701a      	strb	r2, [r3, #0]
   d450a:	e7bc      	b.n	d4486 <loop+0x12a>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   d450c:	4b0e      	ldr	r3, [pc, #56]	; (d4548 <loop+0x1ec>)
   d450e:	781b      	ldrb	r3, [r3, #0]
   d4510:	2b01      	cmp	r3, #1
   d4512:	d001      	beq.n	d4518 <loop+0x1bc>
   d4514:	f7ff fec6 	bl	d42a4 <_Z22publishStateTransitionv>
			composeJoinRequesttNode();
   d4518:	f000 f9bc 	bl	d4894 <_Z23composeJoinRequesttNodev>
			if (receiveAcknowledmentJoinRequestNode()) {
   d451c:	f000 fa18 	bl	d4950 <_Z35receiveAcknowledmentJoinRequestNodev>
   d4520:	2800      	cmp	r0, #0
   d4522:	d0ef      	beq.n	d4504 <loop+0x1a8>
				Log.info("Back in the main loop - success");
   d4524:	4917      	ldr	r1, [pc, #92]	; (d4584 <loop+0x228>)
   d4526:	480d      	ldr	r0, [pc, #52]	; (d455c <loop+0x200>)
   d4528:	f7ff fe1c 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
				lastPublish = Time.now();
   d452c:	f006 f807 	bl	da53e <_ZN9TimeClass3nowEv>
   d4530:	4b06      	ldr	r3, [pc, #24]	; (d454c <loop+0x1f0>)
   d4532:	17c1      	asrs	r1, r0, #31
   d4534:	e9c3 0100 	strd	r0, r1, [r3]
   d4538:	e7e2      	b.n	d4500 <loop+0x1a4>
                valid_ = false;
   d453a:	7530      	strb	r0, [r6, #20]
                return *this;
   d453c:	e77d      	b.n	d443a <loop+0xde>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d453e:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   d4542:	e77a      	b.n	d443a <loop+0xde>
   d4544:	2003def2 	.word	0x2003def2
   d4548:	2003def0 	.word	0x2003def0
   d454c:	2003dee8 	.word	0x2003dee8
   d4550:	2003e2c8 	.word	0x2003e2c8
   d4554:	2003dea0 	.word	0x2003dea0
   d4558:	000db87c 	.word	0x000db87c
   d455c:	2003e574 	.word	0x2003e574
   d4560:	2003dec0 	.word	0x2003dec0
   d4564:	000dbb74 	.word	0x000dbb74
   d4568:	000dc5bc 	.word	0x000dc5bc
   d456c:	00030010 	.word	0x00030010
   d4570:	000db891 	.word	0x000db891
   d4574:	000db893 	.word	0x000db893
   d4578:	2003def1 	.word	0x2003def1
   d457c:	000db8dd 	.word	0x000db8dd
   d4580:	2003e2a8 	.word	0x2003e2a8
   d4584:	000db8bd 	.word	0x000db8bd

000d4588 <_GLOBAL__sub_I___appProductID>:
   d4588:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   d458a:	4b1d      	ldr	r3, [pc, #116]	; (d4600 <_GLOBAL__sub_I___appProductID+0x78>)
   d458c:	2501      	movs	r5, #1
   d458e:	701d      	strb	r5, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4590:	f006 f998 	bl	da8c4 <spark_protocol_instance>
   d4594:	2300      	movs	r3, #0
   d4596:	461a      	mov	r2, r3
   d4598:	210d      	movs	r1, #13
   d459a:	f006 f99b 	bl	da8d4 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d459e:	f006 f991 	bl	da8c4 <spark_protocol_instance>
   d45a2:	2300      	movs	r3, #0
   d45a4:	461a      	mov	r2, r3
   d45a6:	4619      	mov	r1, r3
   d45a8:	f006 f99c 	bl	da8e4 <spark_protocol_set_product_firmware_version>
        : config_(config) {
   d45ac:	4a15      	ldr	r2, [pc, #84]	; (d4604 <_GLOBAL__sub_I___appProductID+0x7c>)
   d45ae:	4613      	mov	r3, r2
   d45b0:	1d11      	adds	r1, r2, #4
   d45b2:	f843 1b09 	str.w	r1, [r3], #9
              valid_(true) {
   d45b6:	2400      	movs	r4, #0
   d45b8:	f8a2 4009 	strh.w	r4, [r2, #9]
   d45bc:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d45be:	4b12      	ldr	r3, [pc, #72]	; (d4608 <_GLOBAL__sub_I___appProductID+0x80>)
              valid_(true) {
   d45c0:	7515      	strb	r5, [r2, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d45c2:	6053      	str	r3, [r2, #4]
        config_.wakeup_sources = nullptr;
   d45c4:	e9c2 4403 	strd	r4, r4, [r2, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d45c8:	7214      	strb	r4, [r2, #8]
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d45ca:	f006 fa57 	bl	daa7c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d45ce:	4d0f      	ldr	r5, [pc, #60]	; (d460c <_GLOBAL__sub_I___appProductID+0x84>)
   d45d0:	4601      	mov	r1, r0
   d45d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d45d6:	4623      	mov	r3, r4
   d45d8:	4628      	mov	r0, r5
   d45da:	f001 fb61 	bl	d5ca0 <_ZN6MB85RCC1ER7TwoWireji>
   d45de:	4b0c      	ldr	r3, [pc, #48]	; (d4610 <_GLOBAL__sub_I___appProductID+0x88>)
   d45e0:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d45e2:	f006 fa4b 	bl	daa7c <_Z19__fetch_global_Wirev>
   d45e6:	2269      	movs	r2, #105	; 0x69
   d45e8:	4601      	mov	r1, r0
   d45ea:	480a      	ldr	r0, [pc, #40]	; (d4614 <_GLOBAL__sub_I___appProductID+0x8c>)
   d45ec:	f000 fe46 	bl	d527c <_ZN6AB1805C1ER7TwoWireh>
time_t lastPublish = Time.now();
   d45f0:	f005 ffa5 	bl	da53e <_ZN9TimeClass3nowEv>
   d45f4:	4b08      	ldr	r3, [pc, #32]	; (d4618 <_GLOBAL__sub_I___appProductID+0x90>)
   d45f6:	17c1      	asrs	r1, r0, #31
   d45f8:	e9c3 0100 	strd	r0, r1, [r3]
   d45fc:	bd38      	pop	{r3, r4, r5, pc}
   d45fe:	bf00      	nop
   d4600:	2003de90 	.word	0x2003de90
   d4604:	2003dec0 	.word	0x2003dec0
   d4608:	00030010 	.word	0x00030010
   d460c:	2003ded8 	.word	0x2003ded8
   d4610:	000db910 	.word	0x000db910
   d4614:	2003dea0 	.word	0x2003dea0
   d4618:	2003dee8 	.word	0x2003dee8

000d461c <_Z14initializeLoRAb>:
 * and the values loaded.  If a device has not had a node and deviceID assigned, it will happen here
 * 
 * @return true - initialization successful
 * @return false - initialization failed
 */
bool initializeLoRA(bool gatewayID) {				// True if Gateway / False if Node
   d461c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d461e:	4606      	mov	r6, r0
 	// Set up the Radio Module
	if (!manager.init()) {
   d4620:	481f      	ldr	r0, [pc, #124]	; (d46a0 <_Z14initializeLoRAb+0x84>)
   d4622:	f002 f997 	bl	d6954 <_ZN8RHRouter4initEv>
   d4626:	4605      	mov	r5, r0
   d4628:	b930      	cbnz	r0, d4638 <_Z14initializeLoRAb+0x1c>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   d462a:	491e      	ldr	r1, [pc, #120]	; (d46a4 <_Z14initializeLoRAb+0x88>)
   d462c:	481e      	ldr	r0, [pc, #120]	; (d46a8 <_Z14initializeLoRAb+0x8c>)
   d462e:	f7ff fd99 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	}
	manager.setThisAddress(sysStatus.nodeNumber);	// Assign the NodeNumber to this node
	
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", sysStatus.nodeNumber, sysStatus.deviceID, sysStatus.structuresVersion);
	return true;
}
   d4632:	4628      	mov	r0, r5
   d4634:	b002      	add	sp, #8
   d4636:	bd70      	pop	{r4, r5, r6, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d4638:	ed9f 0a1c 	vldr	s0, [pc, #112]	; d46ac <_Z14initializeLoRAb+0x90>
   d463c:	481c      	ldr	r0, [pc, #112]	; (d46b0 <_Z14initializeLoRAb+0x94>)
	if (!(sysStatus.structuresVersion == 128)) {		// This will be our indication that the deviceID and nodeID has not yet been set
   d463e:	4c1d      	ldr	r4, [pc, #116]	; (d46b4 <_Z14initializeLoRAb+0x98>)
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   d4640:	f002 fc5e 	bl	d6f00 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   d4644:	481a      	ldr	r0, [pc, #104]	; (d46b0 <_Z14initializeLoRAb+0x94>)
   d4646:	2200      	movs	r2, #0
   d4648:	2117      	movs	r1, #23
   d464a:	f002 fdd3 	bl	d71f4 <_ZN7RH_RF9510setTxPowerEab>
	if (!(sysStatus.structuresVersion == 128)) {		// This will be our indication that the deviceID and nodeID has not yet been set
   d464e:	7923      	ldrb	r3, [r4, #4]
   d4650:	2b80      	cmp	r3, #128	; 0x80
   d4652:	d011      	beq.n	d4678 <_Z14initializeLoRAb+0x5c>
		randomSeed(sysStatus.lastConnection);		// 32-bit number for seed
   d4654:	6960      	ldr	r0, [r4, #20]
   d4656:	f005 fbff 	bl	d9e58 <_Z10randomSeedj>
		sysStatus.deviceID = random(1,65535);			// 16-bit number for deviceID
   d465a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d465e:	2001      	movs	r0, #1
   d4660:	f005 fbf0 	bl	d9e44 <_Z6randomii>
   d4664:	8020      	strh	r0, [r4, #0]
		if (gatewayID) {
   d4666:	b1a6      	cbz	r6, d4692 <_Z14initializeLoRAb+0x76>
			Log.info("setting node number as Gateway");
   d4668:	4913      	ldr	r1, [pc, #76]	; (d46b8 <_Z14initializeLoRAb+0x9c>)
   d466a:	480f      	ldr	r0, [pc, #60]	; (d46a8 <_Z14initializeLoRAb+0x8c>)
   d466c:	f7ff fd7a 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
			sysStatus.nodeNumber = (uint16_t)0;
   d4670:	2300      	movs	r3, #0
   d4672:	8063      	strh	r3, [r4, #2]
		sysStatus.structuresVersion = 128;			// Set the structure to the magic number so we can have a stable deviceID
   d4674:	2380      	movs	r3, #128	; 0x80
   d4676:	7123      	strb	r3, [r4, #4]
	manager.setThisAddress(sysStatus.nodeNumber);	// Assign the NodeNumber to this node
   d4678:	78a1      	ldrb	r1, [r4, #2]
   d467a:	4810      	ldr	r0, [pc, #64]	; (d46bc <_Z14initializeLoRAb+0xa0>)
   d467c:	f001 fc67 	bl	d5f4e <_ZN10RHDatagram14setThisAddressEh>
	Log.info("LoRA Radio initialized as NodeNumber of %i and DeviceID of %i and a magic number of %i", sysStatus.nodeNumber, sysStatus.deviceID, sysStatus.structuresVersion);
   d4680:	7923      	ldrb	r3, [r4, #4]
   d4682:	9300      	str	r3, [sp, #0]
   d4684:	8862      	ldrh	r2, [r4, #2]
   d4686:	8823      	ldrh	r3, [r4, #0]
   d4688:	490d      	ldr	r1, [pc, #52]	; (d46c0 <_Z14initializeLoRAb+0xa4>)
   d468a:	4807      	ldr	r0, [pc, #28]	; (d46a8 <_Z14initializeLoRAb+0x8c>)
   d468c:	f7ff fd6a 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	return true;
   d4690:	e7cf      	b.n	d4632 <_Z14initializeLoRAb+0x16>
		else sysStatus.nodeNumber = random(10,255);	// Random number in - unconfigured - range will trigger a Join request
   d4692:	21ff      	movs	r1, #255	; 0xff
   d4694:	200a      	movs	r0, #10
   d4696:	f005 fbd5 	bl	d9e44 <_Z6randomii>
   d469a:	8060      	strh	r0, [r4, #2]
   d469c:	e7ea      	b.n	d4674 <_Z14initializeLoRAb+0x58>
   d469e:	bf00      	nop
   d46a0:	2003e124 	.word	0x2003e124
   d46a4:	000db924 	.word	0x000db924
   d46a8:	2003e574 	.word	0x2003e574
   d46ac:	4464c000 	.word	0x4464c000
   d46b0:	2003dff0 	.word	0x2003dff0
   d46b4:	2003e2c8 	.word	0x2003e2c8
   d46b8:	000db930 	.word	0x000db930
   d46bc:	2003e128 	.word	0x2003e128
   d46c0:	000db94f 	.word	0x000db94f

000d46c4 <_Z21composeDataReportNodev>:
}

// ************************************************************************
// *****                         Node Functions                       *****
// ************************************************************************
bool composeDataReportNode() {
   d46c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static uint8_t msgCnt = 0;

	Log.info("Sending data report to Gateway");
   d46c6:	492c      	ldr	r1, [pc, #176]	; (d4778 <_Z21composeDataReportNodev+0xb4>)
   d46c8:	482c      	ldr	r0, [pc, #176]	; (d477c <_Z21composeDataReportNodev+0xb8>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.nodeNumber);				// NodeID for verification
   d46ca:	4c2d      	ldr	r4, [pc, #180]	; (d4780 <_Z21composeDataReportNodev+0xbc>)
	Log.info("Sending data report to Gateway");
   d46cc:	f7ff fd4a 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   d46d0:	4b2c      	ldr	r3, [pc, #176]	; (d4784 <_Z21composeDataReportNodev+0xc0>)
   d46d2:	881e      	ldrh	r6, [r3, #0]
   d46d4:	2101      	movs	r1, #1
   d46d6:	4630      	mov	r0, r6
   d46d8:	f006 f95b 	bl	da992 <digitalWrite>
	buf[0] = highByte(sysStatus.nodeNumber);				// NodeID for verification
   d46dc:	4a2a      	ldr	r2, [pc, #168]	; (d4788 <_Z21composeDataReportNodev+0xc4>)
   d46de:	8853      	ldrh	r3, [r2, #2]
	buf[1] = lowByte(sysStatus.nodeNumber);				
   d46e0:	7063      	strb	r3, [r4, #1]
	buf[0] = highByte(sysStatus.nodeNumber);				// NodeID for verification
   d46e2:	1219      	asrs	r1, r3, #8
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d46e4:	8813      	ldrh	r3, [r2, #0]
	buf[0] = highByte(sysStatus.nodeNumber);				// NodeID for verification
   d46e6:	7021      	strb	r1, [r4, #0]
	buf[3] = lowByte(sysStatus.deviceID);
   d46e8:	70e3      	strb	r3, [r4, #3]
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d46ea:	1219      	asrs	r1, r3, #8
	buf[4] = 1;						// Set for code release - fix later
	buf[5] = highByte(current.hourly);
   d46ec:	4b27      	ldr	r3, [pc, #156]	; (d478c <_Z21composeDataReportNodev+0xc8>)
	buf[2] = highByte(sysStatus.deviceID);					// Set for device
   d46ee:	70a1      	strb	r1, [r4, #2]
	buf[5] = highByte(current.hourly);
   d46f0:	8b99      	ldrh	r1, [r3, #28]
	buf[6] = lowByte(current.hourly); 
   d46f2:	71a1      	strb	r1, [r4, #6]
	buf[5] = highByte(current.hourly);
   d46f4:	1208      	asrs	r0, r1, #8
	buf[7] = highByte(current.daily);
   d46f6:	8bd9      	ldrh	r1, [r3, #30]
	buf[5] = highByte(current.hourly);
   d46f8:	7160      	strb	r0, [r4, #5]
	buf[8] = lowByte(current.daily); 
   d46fa:	7221      	strb	r1, [r4, #8]
	buf[7] = highByte(current.daily);
   d46fc:	1208      	asrs	r0, r1, #8
	buf[9] = current.internalTempC;
   d46fe:	7819      	ldrb	r1, [r3, #0]
   d4700:	7261      	strb	r1, [r4, #9]
	buf[10] = current.stateOfCharge;
   d4702:	6859      	ldr	r1, [r3, #4]
	buf[11] = current.batteryState;	
   d4704:	7a1b      	ldrb	r3, [r3, #8]
	buf[7] = highByte(current.daily);
   d4706:	71e0      	strb	r0, [r4, #7]
	buf[4] = 1;						// Set for code release - fix later
   d4708:	2501      	movs	r5, #1
	buf[11] = current.batteryState;	
   d470a:	72e3      	strb	r3, [r4, #11]
	buf[12] = sysStatus.resetCount;
	buf[13] = 1;				// reserved for later
	buf[14] = highByte(driver.lastRssi());
   d470c:	4820      	ldr	r0, [pc, #128]	; (d4790 <_Z21composeDataReportNodev+0xcc>)
	buf[12] = sysStatus.resetCount;
   d470e:	68d3      	ldr	r3, [r2, #12]
	buf[10] = current.stateOfCharge;
   d4710:	72a1      	strb	r1, [r4, #10]
	buf[12] = sysStatus.resetCount;
   d4712:	7323      	strb	r3, [r4, #12]
	buf[4] = 1;						// Set for code release - fix later
   d4714:	7125      	strb	r5, [r4, #4]
	buf[13] = 1;				// reserved for later
   d4716:	7365      	strb	r5, [r4, #13]
	buf[14] = highByte(driver.lastRssi());
   d4718:	f001 fc97 	bl	d604a <_ZN15RHGenericDriver8lastRssiEv>
   d471c:	1200      	asrs	r0, r0, #8
   d471e:	73a0      	strb	r0, [r4, #14]
	buf[15] = lowByte(driver.lastRssi()); 
   d4720:	481b      	ldr	r0, [pc, #108]	; (d4790 <_Z21composeDataReportNodev+0xcc>)
   d4722:	f001 fc92 	bl	d604a <_ZN15RHGenericDriver8lastRssiEv>
	buf[16] = msgCnt++;
   d4726:	4b1b      	ldr	r3, [pc, #108]	; (d4794 <_Z21composeDataReportNodev+0xd0>)
	buf[15] = lowByte(driver.lastRssi()); 
   d4728:	73e0      	strb	r0, [r4, #15]
	buf[16] = msgCnt++;
   d472a:	781a      	ldrb	r2, [r3, #0]

	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("sending message %d", buf[16]);
   d472c:	4813      	ldr	r0, [pc, #76]	; (d477c <_Z21composeDataReportNodev+0xb8>)
	buf[16] = msgCnt++;
   d472e:	7422      	strb	r2, [r4, #16]
   d4730:	1951      	adds	r1, r2, r5
   d4732:	7019      	strb	r1, [r3, #0]
	Log.info("sending message %d", buf[16]);
   d4734:	4918      	ldr	r1, [pc, #96]	; (d4798 <_Z21composeDataReportNodev+0xd4>)
   d4736:	f7ff fd15 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 17, GATEWAY_ADDRESS, DATA_RPT) == RH_ROUTER_ERROR_NONE) {
   d473a:	2303      	movs	r3, #3
   d473c:	9300      	str	r3, [sp, #0]
   d473e:	4621      	mov	r1, r4
   d4740:	4816      	ldr	r0, [pc, #88]	; (d479c <_Z21composeDataReportNodev+0xd8>)
   d4742:	2300      	movs	r3, #0
   d4744:	2211      	movs	r2, #17
   d4746:	f001 fe9d 	bl	d6484 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d474a:	4604      	mov	r4, r0
   d474c:	b950      	cbnz	r0, d4764 <_Z21composeDataReportNodev+0xa0>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   d474e:	4914      	ldr	r1, [pc, #80]	; (d47a0 <_Z21composeDataReportNodev+0xdc>)
   d4750:	480a      	ldr	r0, [pc, #40]	; (d477c <_Z21composeDataReportNodev+0xb8>)
   d4752:	f7ff fd07 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   d4756:	4630      	mov	r0, r6
   d4758:	4621      	mov	r1, r4
   d475a:	f006 f91a 	bl	da992 <digitalWrite>
		return true;
   d475e:	4628      	mov	r0, r5
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   d4760:	b002      	add	sp, #8
   d4762:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   d4764:	490f      	ldr	r1, [pc, #60]	; (d47a4 <_Z21composeDataReportNodev+0xe0>)
   d4766:	4805      	ldr	r0, [pc, #20]	; (d477c <_Z21composeDataReportNodev+0xb8>)
   d4768:	f7ff fcfc 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   d476c:	4630      	mov	r0, r6
   d476e:	2100      	movs	r1, #0
   d4770:	f006 f90f 	bl	da992 <digitalWrite>
		return false;
   d4774:	2000      	movs	r0, #0
   d4776:	e7f3      	b.n	d4760 <_Z21composeDataReportNodev+0x9c>
   d4778:	000db9a6 	.word	0x000db9a6
   d477c:	2003e574 	.word	0x2003e574
   d4780:	2003def6 	.word	0x2003def6
   d4784:	000dbb72 	.word	0x000dbb72
   d4788:	2003e2c8 	.word	0x2003e2c8
   d478c:	2003e2a8 	.word	0x2003e2a8
   d4790:	2003dff0 	.word	0x2003dff0
   d4794:	2003def5 	.word	0x2003def5
   d4798:	000db9c5 	.word	0x000db9c5
   d479c:	2003e124 	.word	0x2003e124
   d47a0:	000db9d8 	.word	0x000db9d8
   d47a4:	000dba01 	.word	0x000dba01

000d47a8 <_Z34receiveAcknowledmentDataReportNodev>:

bool receiveAcknowledmentDataReportNode() {
   d47a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag)) {
   d47ac:	4f2c      	ldr	r7, [pc, #176]	; (d4860 <_Z34receiveAcknowledmentDataReportNodev+0xb8>)
   d47ae:	4d2d      	ldr	r5, [pc, #180]	; (d4864 <_Z34receiveAcknowledmentDataReportNodev+0xbc>)
   d47b0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; d4888 <_Z34receiveAcknowledmentDataReportNodev+0xe0>
   d47b4:	f8df 90d4 	ldr.w	r9, [pc, #212]	; d488c <_Z34receiveAcknowledmentDataReportNodev+0xe4>
   d47b8:	482b      	ldr	r0, [pc, #172]	; (d4868 <_Z34receiveAcknowledmentDataReportNodev+0xc0>)
bool receiveAcknowledmentDataReportNode() {
   d47ba:	b08c      	sub	sp, #48	; 0x30
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag)) {
   d47bc:	2400      	movs	r4, #0
   d47be:	e9cd 4a02 	strd	r4, sl, [sp, #8]
   d47c2:	9404      	str	r4, [sp, #16]
   d47c4:	9401      	str	r4, [sp, #4]
   d47c6:	f8cd 9000 	str.w	r9, [sp]
   d47ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d47ce:	463a      	mov	r2, r7
   d47d0:	4629      	mov	r1, r5
   d47d2:	f001 ff5d 	bl	d6690 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d47d6:	4606      	mov	r6, r0
   d47d8:	2800      	cmp	r0, #0
   d47da:	d03b      	beq.n	d4854 <_Z34receiveAcknowledmentDataReportNodev+0xac>
		buf[len] = 0;
   d47dc:	783b      	ldrb	r3, [r7, #0]
		lora_state = (LoRA_State)messageFlag;
   d47de:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d4890 <_Z34receiveAcknowledmentDataReportNodev+0xe8>
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d47e2:	f899 2000 	ldrb.w	r2, [r9]
		buf[len] = 0;
   d47e6:	54ec      	strb	r4, [r5, r3]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d47e8:	4820      	ldr	r0, [pc, #128]	; (d486c <_Z34receiveAcknowledmentDataReportNodev+0xc4>)
		lora_state = (LoRA_State)messageFlag;
   d47ea:	f89a 3000 	ldrb.w	r3, [sl]
   d47ee:	f888 3000 	strb.w	r3, [r8]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d47f2:	9207      	str	r2, [sp, #28]
   d47f4:	f001 fc29 	bl	d604a <_ZN15RHGenericDriver8lastRssiEv>
   d47f8:	7839      	ldrb	r1, [r7, #0]
   d47fa:	9101      	str	r1, [sp, #4]
   d47fc:	4603      	mov	r3, r0
   d47fe:	491c      	ldr	r1, [pc, #112]	; (d4870 <_Z34receiveAcknowledmentDataReportNodev+0xc8>)
   d4800:	f898 0000 	ldrb.w	r0, [r8]
   d4804:	9a07      	ldr	r2, [sp, #28]
		sysStatus.nextReportSeconds = ((buf[7] << 8) | buf[8]);
   d4806:	4f1b      	ldr	r7, [pc, #108]	; (d4874 <_Z34receiveAcknowledmentDataReportNodev+0xcc>)
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d4808:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   d480c:	9100      	str	r1, [sp, #0]
   d480e:	481a      	ldr	r0, [pc, #104]	; (d4878 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d4810:	491a      	ldr	r1, [pc, #104]	; (d487c <_Z34receiveAcknowledmentDataReportNodev+0xd4>)
   d4812:	f7ff fca7 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.nextReportSeconds = ((buf[7] << 8) | buf[8]);
   d4816:	79ea      	ldrb	r2, [r5, #7]
   d4818:	7a2b      	ldrb	r3, [r5, #8]
   d481a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d481e:	f8d5 2001 	ldr.w	r2, [r5, #1]
   d4822:	837b      	strh	r3, [r7, #26]
		uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   d4824:	ba12      	rev	r2, r2
		Time.setTime(newTime);  // Set time based on response from gateway
   d4826:	4610      	mov	r0, r2
   d4828:	4621      	mov	r1, r4
   d482a:	9207      	str	r2, [sp, #28]
   d482c:	f005 fd71 	bl	da312 <_ZN9TimeClass7setTimeEx>
		Log.info("Time set to %s and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.nextReportSeconds);
   d4830:	9a07      	ldr	r2, [sp, #28]
   d4832:	4623      	mov	r3, r4
   d4834:	a808      	add	r0, sp, #32
   d4836:	f005 fd7f 	bl	da338 <_ZN9TimeClass7timeStrEx>
   d483a:	480f      	ldr	r0, [pc, #60]	; (d4878 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d483c:	8b7b      	ldrh	r3, [r7, #26]
   d483e:	9a08      	ldr	r2, [sp, #32]
   d4840:	490f      	ldr	r1, [pc, #60]	; (d4880 <_Z34receiveAcknowledmentDataReportNodev+0xd8>)
   d4842:	f7ff fc8f 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4846:	a808      	add	r0, sp, #32
   d4848:	f005 fbce 	bl	d9fe8 <_ZN6StringD1Ev>
	}
	else {
		Log.info("No reply, are the gateways running?");
		return false;
	}
}
   d484c:	4630      	mov	r0, r6
   d484e:	b00c      	add	sp, #48	; 0x30
   d4850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Log.info("No reply, are the gateways running?");
   d4854:	490b      	ldr	r1, [pc, #44]	; (d4884 <_Z34receiveAcknowledmentDataReportNodev+0xdc>)
   d4856:	4808      	ldr	r0, [pc, #32]	; (d4878 <_Z34receiveAcknowledmentDataReportNodev+0xd0>)
   d4858:	f7ff fc84 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		return false;
   d485c:	e7f6      	b.n	d484c <_Z34receiveAcknowledmentDataReportNodev+0xa4>
   d485e:	bf00      	nop
   d4860:	2003dd58 	.word	0x2003dd58
   d4864:	2003def6 	.word	0x2003def6
   d4868:	2003e124 	.word	0x2003e124
   d486c:	2003dff0 	.word	0x2003dff0
   d4870:	2003dd59 	.word	0x2003dd59
   d4874:	2003e2c8 	.word	0x2003e2c8
   d4878:	2003e574 	.word	0x2003e574
   d487c:	000dba24 	.word	0x000dba24
   d4880:	000dba63 	.word	0x000dba63
   d4884:	000dba93 	.word	0x000dba93
   d4888:	2003e25c 	.word	0x2003e25c
   d488c:	2003e120 	.word	0x2003e120
   d4890:	2003def4 	.word	0x2003def4

000d4894 <_Z23composeJoinRequesttNodev>:

bool composeJoinRequesttNode() {
   d4894:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Log.info("Sending data report to Gateway");
   d4896:	4922      	ldr	r1, [pc, #136]	; (d4920 <_Z23composeJoinRequesttNodev+0x8c>)
   d4898:	4822      	ldr	r0, [pc, #136]	; (d4924 <_Z23composeJoinRequesttNodev+0x90>)
	digitalWrite(BLUE_LED,HIGH);

	buf[0] = highByte(sysStatus.deviceID);                      // deviceID is unique to the device
   d489a:	4d23      	ldr	r5, [pc, #140]	; (d4928 <_Z23composeJoinRequesttNodev+0x94>)
   d489c:	4c23      	ldr	r4, [pc, #140]	; (d492c <_Z23composeJoinRequesttNodev+0x98>)
	Log.info("Sending data report to Gateway");
   d489e:	f7ff fc61 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	digitalWrite(BLUE_LED,HIGH);
   d48a2:	4b23      	ldr	r3, [pc, #140]	; (d4930 <_Z23composeJoinRequesttNodev+0x9c>)
   d48a4:	881e      	ldrh	r6, [r3, #0]
   d48a6:	2101      	movs	r1, #1
   d48a8:	4630      	mov	r0, r6
   d48aa:	f006 f872 	bl	da992 <digitalWrite>
	buf[0] = highByte(sysStatus.deviceID);                      // deviceID is unique to the device
   d48ae:	882b      	ldrh	r3, [r5, #0]
	buf[1] = lowByte(sysStatus.deviceID);
   d48b0:	7063      	strb	r3, [r4, #1]
	buf[0] = highByte(sysStatus.deviceID);                      // deviceID is unique to the device
   d48b2:	121a      	asrs	r2, r3, #8
	buf[2] = sysStatus.structuresVersion;						// Needs to equal 128
	buf[3] = highByte(driver.lastRssi());				        	// Signal strength
   d48b4:	481f      	ldr	r0, [pc, #124]	; (d4934 <_Z23composeJoinRequesttNodev+0xa0>)
	buf[2] = sysStatus.structuresVersion;						// Needs to equal 128
   d48b6:	792b      	ldrb	r3, [r5, #4]
	buf[0] = highByte(sysStatus.deviceID);                      // deviceID is unique to the device
   d48b8:	7022      	strb	r2, [r4, #0]
	buf[2] = sysStatus.structuresVersion;						// Needs to equal 128
   d48ba:	70a3      	strb	r3, [r4, #2]
	buf[3] = highByte(driver.lastRssi());				        	// Signal strength
   d48bc:	f001 fbc5 	bl	d604a <_ZN15RHGenericDriver8lastRssiEv>
   d48c0:	1200      	asrs	r0, r0, #8
   d48c2:	70e0      	strb	r0, [r4, #3]
	buf[4] = lowByte(driver.lastRssi()); 
   d48c4:	481b      	ldr	r0, [pc, #108]	; (d4934 <_Z23composeJoinRequesttNodev+0xa0>)
   d48c6:	f001 fbc0 	bl	d604a <_ZN15RHGenericDriver8lastRssiEv>

	
	// Send a message to manager_server
  	// A route to the destination will be automatically discovered.
	Log.info("Sending join request because %s",(sysStatus.nodeNumber < 10) ? "a NodeNumber is needed" : "the clock is not set");
   d48ca:	8869      	ldrh	r1, [r5, #2]
   d48cc:	4b1a      	ldr	r3, [pc, #104]	; (d4938 <_Z23composeJoinRequesttNodev+0xa4>)
   d48ce:	4a1b      	ldr	r2, [pc, #108]	; (d493c <_Z23composeJoinRequesttNodev+0xa8>)
	buf[4] = lowByte(driver.lastRssi()); 
   d48d0:	7120      	strb	r0, [r4, #4]
	Log.info("Sending join request because %s",(sysStatus.nodeNumber < 10) ? "a NodeNumber is needed" : "the clock is not set");
   d48d2:	2909      	cmp	r1, #9
   d48d4:	bf88      	it	hi
   d48d6:	461a      	movhi	r2, r3
   d48d8:	4812      	ldr	r0, [pc, #72]	; (d4924 <_Z23composeJoinRequesttNodev+0x90>)
   d48da:	4919      	ldr	r1, [pc, #100]	; (d4940 <_Z23composeJoinRequesttNodev+0xac>)
	if (manager.sendtoWait(buf, 5, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   d48dc:	2501      	movs	r5, #1
	Log.info("Sending join request because %s",(sysStatus.nodeNumber < 10) ? "a NodeNumber is needed" : "the clock is not set");
   d48de:	f7ff fc41 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 5, GATEWAY_ADDRESS, JOIN_REQ) == RH_ROUTER_ERROR_NONE) {
   d48e2:	4621      	mov	r1, r4
   d48e4:	4817      	ldr	r0, [pc, #92]	; (d4944 <_Z23composeJoinRequesttNodev+0xb0>)
   d48e6:	9500      	str	r5, [sp, #0]
   d48e8:	2300      	movs	r3, #0
   d48ea:	2205      	movs	r2, #5
   d48ec:	f001 fdca 	bl	d6484 <_ZN6RHMesh10sendtoWaitEPhhhh>
   d48f0:	4604      	mov	r4, r0
   d48f2:	b950      	cbnz	r0, d490a <_Z23composeJoinRequesttNodev+0x76>
		// It has been reliably delivered to the next node.
		// Now wait for a reply from the ultimate server 
		Log.info("Data report send to gateway successfully");
   d48f4:	4914      	ldr	r1, [pc, #80]	; (d4948 <_Z23composeJoinRequesttNodev+0xb4>)
   d48f6:	480b      	ldr	r0, [pc, #44]	; (d4924 <_Z23composeJoinRequesttNodev+0x90>)
   d48f8:	f7ff fc34 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   d48fc:	4630      	mov	r0, r6
   d48fe:	4621      	mov	r1, r4
   d4900:	f006 f847 	bl	da992 <digitalWrite>
		return true;
   d4904:	4628      	mov	r0, r5
	else {
		Log.info("Data report send to Gateway failed");
		digitalWrite(BLUE_LED, LOW);
		return false;
	}
}
   d4906:	b002      	add	sp, #8
   d4908:	bd70      	pop	{r4, r5, r6, pc}
		Log.info("Data report send to Gateway failed");
   d490a:	4910      	ldr	r1, [pc, #64]	; (d494c <_Z23composeJoinRequesttNodev+0xb8>)
   d490c:	4805      	ldr	r0, [pc, #20]	; (d4924 <_Z23composeJoinRequesttNodev+0x90>)
   d490e:	f7ff fc29 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED, LOW);
   d4912:	4630      	mov	r0, r6
   d4914:	2100      	movs	r1, #0
   d4916:	f006 f83c 	bl	da992 <digitalWrite>
		return false;
   d491a:	2000      	movs	r0, #0
   d491c:	e7f3      	b.n	d4906 <_Z23composeJoinRequesttNodev+0x72>
   d491e:	bf00      	nop
   d4920:	000db9a6 	.word	0x000db9a6
   d4924:	2003e574 	.word	0x2003e574
   d4928:	2003e2c8 	.word	0x2003e2c8
   d492c:	2003def6 	.word	0x2003def6
   d4930:	000dbb72 	.word	0x000dbb72
   d4934:	2003dff0 	.word	0x2003dff0
   d4938:	000dbace 	.word	0x000dbace
   d493c:	000dbab7 	.word	0x000dbab7
   d4940:	000dbae3 	.word	0x000dbae3
   d4944:	2003e124 	.word	0x2003e124
   d4948:	000db9d8 	.word	0x000db9d8
   d494c:	000dba01 	.word	0x000dba01

000d4950 <_Z35receiveAcknowledmentJoinRequestNodev>:

bool receiveAcknowledmentJoinRequestNode() {
   d4950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag)) {
   d4954:	4f31      	ldr	r7, [pc, #196]	; (d4a1c <_Z35receiveAcknowledmentJoinRequestNodev+0xcc>)
   d4956:	4c32      	ldr	r4, [pc, #200]	; (d4a20 <_Z35receiveAcknowledmentJoinRequestNodev+0xd0>)
   d4958:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d4a48 <_Z35receiveAcknowledmentJoinRequestNodev+0xf8>
   d495c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; d4a4c <_Z35receiveAcknowledmentJoinRequestNodev+0xfc>
   d4960:	4830      	ldr	r0, [pc, #192]	; (d4a24 <_Z35receiveAcknowledmentJoinRequestNodev+0xd4>)
bool receiveAcknowledmentJoinRequestNode() {
   d4962:	b08d      	sub	sp, #52	; 0x34
	if (manager.recvfromAckTimeout(buf, &len, 3000, &from,__null,__null,&messageFlag)) {
   d4964:	2500      	movs	r5, #0
   d4966:	e9cd 5902 	strd	r5, r9, [sp, #8]
   d496a:	9504      	str	r5, [sp, #16]
   d496c:	9501      	str	r5, [sp, #4]
   d496e:	f8cd 8000 	str.w	r8, [sp]
   d4972:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d4976:	463a      	mov	r2, r7
   d4978:	4621      	mov	r1, r4
   d497a:	f001 fe89 	bl	d6690 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>
   d497e:	4606      	mov	r6, r0
   d4980:	2800      	cmp	r0, #0
   d4982:	d045      	beq.n	d4a10 <_Z35receiveAcknowledmentJoinRequestNodev+0xc0>
		buf[len] = 0;
   d4984:	783b      	ldrb	r3, [r7, #0]
		lora_state = (LoRA_State)messageFlag;
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d4986:	f898 2000 	ldrb.w	r2, [r8]
		buf[len] = 0;
   d498a:	54e5      	strb	r5, [r4, r3]
		lora_state = (LoRA_State)messageFlag;
   d498c:	4d26      	ldr	r5, [pc, #152]	; (d4a28 <_Z35receiveAcknowledmentJoinRequestNodev+0xd8>)
   d498e:	f899 3000 	ldrb.w	r3, [r9]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d4992:	4826      	ldr	r0, [pc, #152]	; (d4a2c <_Z35receiveAcknowledmentJoinRequestNodev+0xdc>)
		lora_state = (LoRA_State)messageFlag;
   d4994:	702b      	strb	r3, [r5, #0]
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d4996:	9207      	str	r2, [sp, #28]
   d4998:	f001 fb57 	bl	d604a <_ZN15RHGenericDriver8lastRssiEv>
   d499c:	7839      	ldrb	r1, [r7, #0]
   d499e:	9101      	str	r1, [sp, #4]
   d49a0:	4603      	mov	r3, r0
   d49a2:	4923      	ldr	r1, [pc, #140]	; (d4a30 <_Z35receiveAcknowledmentJoinRequestNodev+0xe0>)
   d49a4:	7828      	ldrb	r0, [r5, #0]
		if (sysStatus.nodeNumber < 10 && buf[0] == 128) sysStatus.nodeNumber = ((buf[5] << 8 | buf[6]));
   d49a6:	4d23      	ldr	r5, [pc, #140]	; (d4a34 <_Z35receiveAcknowledmentJoinRequestNodev+0xe4>)
		Log.info("Received from node %d with rssi=%d - a %s message of length %d", from, driver.lastRssi(), loraStateNames[lora_state] ,len);
   d49a8:	9a07      	ldr	r2, [sp, #28]
   d49aa:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   d49ae:	9100      	str	r1, [sp, #0]
   d49b0:	4821      	ldr	r0, [pc, #132]	; (d4a38 <_Z35receiveAcknowledmentJoinRequestNodev+0xe8>)
   d49b2:	4922      	ldr	r1, [pc, #136]	; (d4a3c <_Z35receiveAcknowledmentJoinRequestNodev+0xec>)
   d49b4:	f7ff fbd6 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		if (sysStatus.nodeNumber < 10 && buf[0] == 128) sysStatus.nodeNumber = ((buf[5] << 8 | buf[6]));
   d49b8:	886b      	ldrh	r3, [r5, #2]
   d49ba:	2b09      	cmp	r3, #9
   d49bc:	d807      	bhi.n	d49ce <_Z35receiveAcknowledmentJoinRequestNodev+0x7e>
   d49be:	7823      	ldrb	r3, [r4, #0]
   d49c0:	2b80      	cmp	r3, #128	; 0x80
   d49c2:	bf01      	itttt	eq
   d49c4:	79a3      	ldrbeq	r3, [r4, #6]
   d49c6:	7962      	ldrbeq	r2, [r4, #5]
   d49c8:	ea43 2302 	orreq.w	r3, r3, r2, lsl #8
   d49cc:	806b      	strheq	r3, [r5, #2]
		sysStatus.nextReportSeconds = ((buf[7] << 8) | buf[8]);
   d49ce:	79e2      	ldrb	r2, [r4, #7]
   d49d0:	7a23      	ldrb	r3, [r4, #8]
   d49d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d49d6:	f8d4 2001 	ldr.w	r2, [r4, #1]
   d49da:	836b      	strh	r3, [r5, #26]
		uint32_t newTime = ((buf[1] << 24) | (buf[2] << 16) | (buf[3] << 8) | buf[4]);
   d49dc:	ba12      	rev	r2, r2
		Time.setTime(newTime);  // Set time based on response from gateway
   d49de:	4610      	mov	r0, r2
   d49e0:	2100      	movs	r1, #0
   d49e2:	9207      	str	r2, [sp, #28]
   d49e4:	f005 fc95 	bl	da312 <_ZN9TimeClass7setTimeEx>
		Log.info("Time set to %s, node is %d and next report is in %u seconds", Time.timeStr(newTime).c_str(),sysStatus.nodeNumber, sysStatus.nextReportSeconds);
   d49e8:	9a07      	ldr	r2, [sp, #28]
   d49ea:	2300      	movs	r3, #0
   d49ec:	a808      	add	r0, sp, #32
   d49ee:	f005 fca3 	bl	da338 <_ZN9TimeClass7timeStrEx>
   d49f2:	8b6b      	ldrh	r3, [r5, #26]
   d49f4:	9300      	str	r3, [sp, #0]
   d49f6:	4810      	ldr	r0, [pc, #64]	; (d4a38 <_Z35receiveAcknowledmentJoinRequestNodev+0xe8>)
   d49f8:	886b      	ldrh	r3, [r5, #2]
   d49fa:	9a08      	ldr	r2, [sp, #32]
   d49fc:	4910      	ldr	r1, [pc, #64]	; (d4a40 <_Z35receiveAcknowledmentJoinRequestNodev+0xf0>)
   d49fe:	f7ff fbb1 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4a02:	a808      	add	r0, sp, #32
   d4a04:	f005 faf0 	bl	d9fe8 <_ZN6StringD1Ev>
	}
	else {
		Log.info("No reply, are the gateways running?");
		return false;
	}
}
   d4a08:	4630      	mov	r0, r6
   d4a0a:	b00d      	add	sp, #52	; 0x34
   d4a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Log.info("No reply, are the gateways running?");
   d4a10:	490c      	ldr	r1, [pc, #48]	; (d4a44 <_Z35receiveAcknowledmentJoinRequestNodev+0xf4>)
   d4a12:	4809      	ldr	r0, [pc, #36]	; (d4a38 <_Z35receiveAcknowledmentJoinRequestNodev+0xe8>)
   d4a14:	f7ff fba6 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
		return false;
   d4a18:	e7f6      	b.n	d4a08 <_Z35receiveAcknowledmentJoinRequestNodev+0xb8>
   d4a1a:	bf00      	nop
   d4a1c:	2003dd58 	.word	0x2003dd58
   d4a20:	2003def6 	.word	0x2003def6
   d4a24:	2003e124 	.word	0x2003e124
   d4a28:	2003def4 	.word	0x2003def4
   d4a2c:	2003dff0 	.word	0x2003dff0
   d4a30:	2003dd59 	.word	0x2003dd59
   d4a34:	2003e2c8 	.word	0x2003e2c8
   d4a38:	2003e574 	.word	0x2003e574
   d4a3c:	000dba24 	.word	0x000dba24
   d4a40:	000dbb03 	.word	0x000dbb03
   d4a44:	000dba93 	.word	0x000dba93
   d4a48:	2003e25c 	.word	0x2003e25c
   d4a4c:	2003e120 	.word	0x2003e120

000d4a50 <_GLOBAL__sub_I_loraStateNames>:
}
   d4a50:	b510      	push	{r4, lr}
RH_RF95 driver(RFM95_CS, RFM95_INT);
   d4a52:	4a08      	ldr	r2, [pc, #32]	; (d4a74 <_GLOBAL__sub_I_loraStateNames+0x24>)
   d4a54:	4c08      	ldr	r4, [pc, #32]	; (d4a78 <_GLOBAL__sub_I_loraStateNames+0x28>)
   d4a56:	4909      	ldr	r1, [pc, #36]	; (d4a7c <_GLOBAL__sub_I_loraStateNames+0x2c>)
   d4a58:	7812      	ldrb	r2, [r2, #0]
   d4a5a:	7809      	ldrb	r1, [r1, #0]
   d4a5c:	4b08      	ldr	r3, [pc, #32]	; (d4a80 <_GLOBAL__sub_I_loraStateNames+0x30>)
   d4a5e:	4620      	mov	r0, r4
   d4a60:	f002 fa10 	bl	d6e84 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   d4a64:	4621      	mov	r1, r4
   d4a66:	4807      	ldr	r0, [pc, #28]	; (d4a84 <_GLOBAL__sub_I_loraStateNames+0x34>)
}
   d4a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   d4a6c:	2200      	movs	r2, #0
   d4a6e:	f001 bcff 	b.w	d6470 <_ZN6RHMeshC1ER15RHGenericDriverh>
   d4a72:	bf00      	nop
   d4a74:	000dbb78 	.word	0x000dbb78
   d4a78:	2003dff0 	.word	0x2003dff0
   d4a7c:	000dbb76 	.word	0x000dbb76
   d4a80:	2003e30c 	.word	0x2003e30c
   d4a84:	2003e124 	.word	0x2003e124

000d4a88 <_Z18initializePinModesv>:
const pin_t TMP36_SENSE_PIN   = A4;
const pin_t BUTTON_PIN        = D4;
const pin_t BLUE_LED          = D7;
const pin_t WAKEUP_PIN        = D8;

bool initializePinModes() {
   d4a88:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   d4a8a:	4909      	ldr	r1, [pc, #36]	; (d4ab0 <_Z18initializePinModesv+0x28>)
   d4a8c:	4809      	ldr	r0, [pc, #36]	; (d4ab4 <_Z18initializePinModesv+0x2c>)
   d4a8e:	f7ff fb69 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   d4a92:	2102      	movs	r1, #2
   d4a94:	2004      	movs	r0, #4
   d4a96:	f005 ff6b 	bl	da970 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   d4a9a:	2100      	movs	r1, #0
   d4a9c:	2008      	movs	r0, #8
   d4a9e:	f005 ff67 	bl	da970 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   d4aa2:	2101      	movs	r1, #1
   d4aa4:	2007      	movs	r0, #7
   d4aa6:	f005 ff63 	bl	da970 <pinMode>
    return true;
}
   d4aaa:	2001      	movs	r0, #1
   d4aac:	bd08      	pop	{r3, pc}
   d4aae:	bf00      	nop
   d4ab0:	000dbb3f 	.word	0x000dbb3f
   d4ab4:	2003e574 	.word	0x2003e574

000d4ab8 <_Z18initializePowerCfgv>:

bool initializePowerCfg() {
   d4ab8:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   d4aba:	4918      	ldr	r1, [pc, #96]	; (d4b1c <_Z18initializePowerCfgv+0x64>)
   d4abc:	4818      	ldr	r0, [pc, #96]	; (d4b20 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   d4abe:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4ac0:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   d4ac2:	f7ff fb4f 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4ac6:	4622      	mov	r2, r4
   d4ac8:	2100      	movs	r1, #0
   d4aca:	4668      	mov	r0, sp
   d4acc:	f006 fccc 	bl	db468 <memset>
   d4ad0:	4622      	mov	r2, r4
   d4ad2:	2100      	movs	r1, #0
   d4ad4:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4ad8:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   d4adc:	f006 fcc4 	bl	db468 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   d4ae0:	2100      	movs	r1, #0
   d4ae2:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   d4ae6:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   d4aea:	f002 fef5 	bl	d78d8 <system_power_management_set_config>

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4aee:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4af2:	f8ad 3006 	strh.w	r3, [sp, #6]
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d4af6:	4b0b      	ldr	r3, [pc, #44]	; (d4b24 <_Z18initializePowerCfgv+0x6c>)
   d4af8:	9302      	str	r3, [sp, #8]
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4afa:	f241 0370 	movw	r3, #4208	; 0x1070
   d4afe:	f8ad 300c 	strh.w	r3, [sp, #12]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4b02:	9b00      	ldr	r3, [sp, #0]
   d4b04:	2100      	movs	r1, #0
   d4b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   d4b0a:	4668      	mov	r0, sp
   d4b0c:	9300      	str	r3, [sp, #0]
   d4b0e:	f002 fee3 	bl	d78d8 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   d4b12:	3800      	subs	r0, #0
   d4b14:	bf18      	it	ne
   d4b16:	2001      	movne	r0, #1
   d4b18:	b010      	add	sp, #64	; 0x40
   d4b1a:	bd10      	pop	{r4, pc}
   d4b1c:	000dbb58 	.word	0x000dbb58
   d4b20:	2003e574 	.word	0x2003e574
   d4b24:	03840384 	.word	0x03840384

000d4b28 <_ZN5spark10LogHandler5writeEPKcj>:
}
   d4b28:	4770      	bx	lr

000d4b2a <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   d4b2a:	6a00      	ldr	r0, [r0, #32]
   d4b2c:	6803      	ldr	r3, [r0, #0]
   d4b2e:	68db      	ldr	r3, [r3, #12]
   d4b30:	4718      	bx	r3
	...

000d4b34 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4b34:	4b0a      	ldr	r3, [pc, #40]	; (d4b60 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4b36:	b510      	push	{r4, lr}
   d4b38:	4604      	mov	r4, r0
   d4b3a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4b3c:	f004 f954 	bl	d8de8 <_ZN5spark10LogManager8instanceEv>
   d4b40:	4621      	mov	r1, r4
   d4b42:	f004 fb16 	bl	d9172 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4b46:	f005 fdfb 	bl	da740 <_Z16_fetch_usbserialv>
   d4b4a:	f005 fded 	bl	da728 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4b4e:	4620      	mov	r0, r4
   d4b50:	4b04      	ldr	r3, [pc, #16]	; (d4b64 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4b52:	f840 3b04 	str.w	r3, [r0], #4
   d4b56:	f004 f9f9 	bl	d8f4c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	bd10      	pop	{r4, pc}
   d4b5e:	bf00      	nop
   d4b60:	000dbbf0 	.word	0x000dbbf0
   d4b64:	000dbbd8 	.word	0x000dbbd8

000d4b68 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4b68:	b510      	push	{r4, lr}
   d4b6a:	4604      	mov	r4, r0
    }
   d4b6c:	f7ff ffe2 	bl	d4b34 <_ZN5spark16SerialLogHandlerD1Ev>
   d4b70:	4620      	mov	r0, r4
   d4b72:	2124      	movs	r1, #36	; 0x24
   d4b74:	f005 ffca 	bl	dab0c <_ZdlPvj>
   d4b78:	4620      	mov	r0, r4
   d4b7a:	bd10      	pop	{r4, pc}

000d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d4b7c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d4b7e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4b80:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4b82:	b17c      	cbz	r4, d4ba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4b84:	6863      	ldr	r3, [r4, #4]
   d4b86:	3b01      	subs	r3, #1
   d4b88:	6063      	str	r3, [r4, #4]
   d4b8a:	b95b      	cbnz	r3, d4ba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4b8c:	6823      	ldr	r3, [r4, #0]
   d4b8e:	4620      	mov	r0, r4
   d4b90:	689b      	ldr	r3, [r3, #8]
   d4b92:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b94:	68a3      	ldr	r3, [r4, #8]
   d4b96:	3b01      	subs	r3, #1
   d4b98:	60a3      	str	r3, [r4, #8]
   d4b9a:	b91b      	cbnz	r3, d4ba4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4b9c:	6823      	ldr	r3, [r4, #0]
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	68db      	ldr	r3, [r3, #12]
   d4ba2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4ba4:	4628      	mov	r0, r5
   d4ba6:	bd38      	pop	{r3, r4, r5, pc}

000d4ba8 <_Z15setLowPowerMode6String>:
 * will cause the function to return 0 to indicate an invalid entry.
 *
 * @return 1 if able to successfully take action, 0 if invalid command
 */
int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
   d4ba8:	b530      	push	{r4, r5, lr}
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4baa:	4922      	ldr	r1, [pc, #136]	; (d4c34 <_Z15setLowPowerMode6String+0x8c>)
   d4bac:	b095      	sub	sp, #84	; 0x54
   d4bae:	4604      	mov	r4, r0
   d4bb0:	f005 fabb 	bl	da12a <_ZNK6String6equalsEPKc>
  char data[64];
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4bb4:	b138      	cbz	r0, d4bc6 <_Z15setLowPowerMode6String+0x1e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	491e      	ldr	r1, [pc, #120]	; (d4c34 <_Z15setLowPowerMode6String+0x8c>)
   d4bba:	4c1f      	ldr	r4, [pc, #124]	; (d4c38 <_Z15setLowPowerMode6String+0x90>)
   d4bbc:	f005 fab5 	bl	da12a <_ZNK6String6equalsEPKc>
  if (command == "1") {                                               // Command calls for enabling sleep
   d4bc0:	b948      	cbnz	r0, d4bd6 <_Z15setLowPowerMode6String+0x2e>
      sysStatus.frequencyMinutes = 12;
      frequencyUpdated = true;
    }
  }
  else {                                                             // Command calls for disabling sleep
    sysStatus.lowPowerMode = false;
   d4bc2:	7220      	strb	r0, [r4, #8]
   d4bc4:	e033      	b.n	d4c2e <_Z15setLowPowerMode6String+0x86>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4bc6:	491d      	ldr	r1, [pc, #116]	; (d4c3c <_Z15setLowPowerMode6String+0x94>)
   d4bc8:	4620      	mov	r0, r4
   d4bca:	f005 faae 	bl	da12a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
   d4bce:	2800      	cmp	r0, #0
   d4bd0:	d1f1      	bne.n	d4bb6 <_Z15setLowPowerMode6String+0xe>
  Log.info(data);
  if (Particle.connected()) {
    Particle.publish("Mode",data, PRIVATE);
  }
  return 1;
}
   d4bd2:	b015      	add	sp, #84	; 0x54
   d4bd4:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4bd6:	8ba3      	ldrh	r3, [r4, #28]
    sysStatus.lowPowerMode = true;
   d4bd8:	2501      	movs	r5, #1
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4bda:	2b0b      	cmp	r3, #11
    sysStatus.lowPowerMode = true;
   d4bdc:	7225      	strb	r5, [r4, #8]
    if (sysStatus.frequencyMinutes < 12) {                            // Need to increase reporting frequency to at least 12 mins for low power
   d4bde:	d91b      	bls.n	d4c18 <_Z15setLowPowerMode6String+0x70>
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d4be0:	4b17      	ldr	r3, [pc, #92]	; (d4c40 <_Z15setLowPowerMode6String+0x98>)
   d4be2:	4a18      	ldr	r2, [pc, #96]	; (d4c44 <_Z15setLowPowerMode6String+0x9c>)
   d4be4:	2140      	movs	r1, #64	; 0x40
   d4be6:	a804      	add	r0, sp, #16
   d4be8:	f002 ff3a 	bl	d7a60 <snprintf>
  Log.info(data);
   d4bec:	4816      	ldr	r0, [pc, #88]	; (d4c48 <_Z15setLowPowerMode6String+0xa0>)
   d4bee:	a904      	add	r1, sp, #16
   d4bf0:	f7ff fab8 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bf4:	f002 fe8c 	bl	d7910 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4bf8:	b160      	cbz	r0, d4c14 <_Z15setLowPowerMode6String+0x6c>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4bfa:	4b14      	ldr	r3, [pc, #80]	; (d4c4c <_Z15setLowPowerMode6String+0xa4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4bfc:	4914      	ldr	r1, [pc, #80]	; (d4c50 <_Z15setLowPowerMode6String+0xa8>)
   d4bfe:	781b      	ldrb	r3, [r3, #0]
   d4c00:	f88d 3000 	strb.w	r3, [sp]
   d4c04:	a802      	add	r0, sp, #8
   d4c06:	233c      	movs	r3, #60	; 0x3c
   d4c08:	aa04      	add	r2, sp, #16
   d4c0a:	f003 fa0f 	bl	d802c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c0e:	a803      	add	r0, sp, #12
   d4c10:	f7ff ffb4 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
   d4c14:	2001      	movs	r0, #1
   d4c16:	e7dc      	b.n	d4bd2 <_Z15setLowPowerMode6String+0x2a>
      Log.info("Increasing reporting frequency to 12 minutes");
   d4c18:	490e      	ldr	r1, [pc, #56]	; (d4c54 <_Z15setLowPowerMode6String+0xac>)
   d4c1a:	480b      	ldr	r0, [pc, #44]	; (d4c48 <_Z15setLowPowerMode6String+0xa0>)
   d4c1c:	f7ff faa2 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
      sysStatus.frequencyMinutes = 12;
   d4c20:	230c      	movs	r3, #12
   d4c22:	83a3      	strh	r3, [r4, #28]
      frequencyUpdated = true;
   d4c24:	4b0c      	ldr	r3, [pc, #48]	; (d4c58 <_Z15setLowPowerMode6String+0xb0>)
   d4c26:	701d      	strb	r5, [r3, #0]
  snprintf(data, sizeof(data), "Is Low Power Mode set? %s", (sysStatus.lowPowerMode) ? "yes" : "no");
   d4c28:	7a23      	ldrb	r3, [r4, #8]
   d4c2a:	2b00      	cmp	r3, #0
   d4c2c:	d1d8      	bne.n	d4be0 <_Z15setLowPowerMode6String+0x38>
   d4c2e:	4b0b      	ldr	r3, [pc, #44]	; (d4c5c <_Z15setLowPowerMode6String+0xb4>)
   d4c30:	e7d7      	b.n	d4be2 <_Z15setLowPowerMode6String+0x3a>
   d4c32:	bf00      	nop
   d4c34:	000dbd48 	.word	0x000dbd48
   d4c38:	2003e2c8 	.word	0x2003e2c8
   d4c3c:	000db891 	.word	0x000db891
   d4c40:	000dbb7c 	.word	0x000dbb7c
   d4c44:	000dbbb0 	.word	0x000dbbb0
   d4c48:	2003e574 	.word	0x2003e574
   d4c4c:	2003e26c 	.word	0x2003e26c
   d4c50:	000dbbca 	.word	0x000dbbca
   d4c54:	000dbb83 	.word	0x000dbb83
   d4c58:	2003e26d 	.word	0x2003e26d
   d4c5c:	000dbb80 	.word	0x000dbb80

000d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4c60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4c62:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4c66:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4c68:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4c6a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4c6e:	42ae      	cmp	r6, r5
   d4c70:	d004      	beq.n	d4c7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4c72:	4628      	mov	r0, r5
   d4c74:	f005 f9b8 	bl	d9fe8 <_ZN6StringD1Ev>
   d4c78:	3514      	adds	r5, #20
   d4c7a:	e7f8      	b.n	d4c6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4c7c:	6820      	ldr	r0, [r4, #0]
   d4c7e:	f002 fed7 	bl	d7a30 <free>
    AllocatorT::free(data_);
}
   d4c82:	4620      	mov	r0, r4
   d4c84:	bd70      	pop	{r4, r5, r6, pc}

000d4c86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4c86:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c8a:	4604      	mov	r4, r0
   d4c8c:	460d      	mov	r5, r1
   d4c8e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4c90:	d916      	bls.n	d4cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4c92:	4290      	cmp	r0, r2
   d4c94:	d215      	bcs.n	d4cc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d4c96:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d4c9a:	1a75      	subs	r5, r6, r1
   d4c9c:	f1a1 0714 	sub.w	r7, r1, #20
   d4ca0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4ca2:	42b7      	cmp	r7, r6
   d4ca4:	d01c      	beq.n	d4ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4ca6:	b12c      	cbz	r4, d4cb4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4ca8:	4631      	mov	r1, r6
   d4caa:	4620      	mov	r0, r4
   d4cac:	f005 fa18 	bl	da0e0 <_ZN6StringC1EOS_>
   d4cb0:	7c33      	ldrb	r3, [r6, #16]
   d4cb2:	7423      	strb	r3, [r4, #16]
   d4cb4:	4630      	mov	r0, r6
   d4cb6:	f005 f997 	bl	d9fe8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d4cba:	3e14      	subs	r6, #20
   d4cbc:	3c14      	subs	r4, #20
   d4cbe:	e7f0      	b.n	d4ca2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4cc0:	d00e      	beq.n	d4ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4cc2:	42b5      	cmp	r5, r6
   d4cc4:	d00c      	beq.n	d4ce0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4cc6:	b12c      	cbz	r4, d4cd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4cc8:	4629      	mov	r1, r5
   d4cca:	4620      	mov	r0, r4
   d4ccc:	f005 fa08 	bl	da0e0 <_ZN6StringC1EOS_>
   d4cd0:	7c2b      	ldrb	r3, [r5, #16]
   d4cd2:	7423      	strb	r3, [r4, #16]
   d4cd4:	4628      	mov	r0, r5
   d4cd6:	f005 f987 	bl	d9fe8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4cda:	3514      	adds	r5, #20
   d4cdc:	3414      	adds	r4, #20
   d4cde:	e7f0      	b.n	d4cc2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4ce6:	2300      	movs	r3, #0
   d4ce8:	e9c0 3300 	strd	r3, r3, [r0]
   d4cec:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4cee:	684f      	ldr	r7, [r1, #4]
   d4cf0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4cf2:	4604      	mov	r4, r0
   d4cf4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4cf6:	dd23      	ble.n	d4d40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4cf8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4cfc:	fb08 f007 	mul.w	r0, r8, r7
   d4d00:	f002 fe8e 	bl	d7a20 <malloc>
            if (!d) {
   d4d04:	4605      	mov	r5, r0
   d4d06:	b1d8      	cbz	r0, d4d40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4d08:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4d0c:	fb08 1202 	mla	r2, r8, r2, r1
   d4d10:	f7ff ffb9 	bl	d4c86 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4d14:	6820      	ldr	r0, [r4, #0]
   d4d16:	f002 fe8b 	bl	d7a30 <free>
        data_ = d;
   d4d1a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4d1c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4d1e:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4d22:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4d26:	45b8      	cmp	r8, r7
   d4d28:	d008      	beq.n	d4d3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4d2a:	4639      	mov	r1, r7
   d4d2c:	4628      	mov	r0, r5
   d4d2e:	f005 f9f1 	bl	da114 <_ZN6StringC1ERKS_>
   d4d32:	7c3b      	ldrb	r3, [r7, #16]
   d4d34:	742b      	strb	r3, [r5, #16]
   d4d36:	3714      	adds	r7, #20
   d4d38:	3514      	adds	r5, #20
   d4d3a:	e7f4      	b.n	d4d26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4d3c:	6873      	ldr	r3, [r6, #4]
   d4d3e:	6063      	str	r3, [r4, #4]
}
   d4d40:	4620      	mov	r0, r4
   d4d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4d48 <_GLOBAL__sub_I_SystemMode>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   d4d48:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d4d4a:	4b28      	ldr	r3, [pc, #160]	; (d4dec <_GLOBAL__sub_I_SystemMode+0xa4>)
    SleepResult() {}
   d4d4c:	4a28      	ldr	r2, [pc, #160]	; (d4df0 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d4d4e:	2501      	movs	r5, #1
   d4d50:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   d4d52:	4b28      	ldr	r3, [pc, #160]	; (d4df4 <_GLOBAL__sub_I_SystemMode+0xac>)
   d4d54:	2400      	movs	r4, #0
   d4d56:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   d4d58:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4d5a:	601c      	str	r4, [r3, #0]
   d4d5c:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d4d5e:	719c      	strb	r4, [r3, #6]
        set_system_mode(mode);
   d4d60:	2002      	movs	r0, #2
   d4d62:	f002 fd65 	bl	d7830 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d4d66:	4621      	mov	r1, r4
   d4d68:	4628      	mov	r0, r5
   d4d6a:	f002 fd79 	bl	d7860 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4d6e:	4629      	mov	r1, r5
   d4d70:	2004      	movs	r0, #4
   d4d72:	f002 fb53 	bl	d741c <HAL_Feature_Set>
        capacity_(0) {
   d4d76:	e9cd 4400 	strd	r4, r4, [sp]
   d4d7a:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d4d7c:	f005 fce0 	bl	da740 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d4d80:	4c1d      	ldr	r4, [pc, #116]	; (d4df8 <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4d82:	4605      	mov	r5, r0
   d4d84:	4669      	mov	r1, sp
   d4d86:	a803      	add	r0, sp, #12
   d4d88:	f7ff ffab 	bl	d4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4d8c:	4626      	mov	r6, r4
        stream_(&stream) {
   d4d8e:	a903      	add	r1, sp, #12
   d4d90:	a806      	add	r0, sp, #24
   d4d92:	f7ff ffa6 	bl	d4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4d96:	4b19      	ldr	r3, [pc, #100]	; (d4dfc <_GLOBAL__sub_I_SystemMode+0xb4>)
   d4d98:	f846 3b04 	str.w	r3, [r6], #4
   d4d9c:	a906      	add	r1, sp, #24
   d4d9e:	a809      	add	r0, sp, #36	; 0x24
   d4da0:	f7ff ff9f 	bl	d4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4da4:	aa09      	add	r2, sp, #36	; 0x24
   d4da6:	211e      	movs	r1, #30
   d4da8:	4630      	mov	r0, r6
   d4daa:	f004 fb3c 	bl	d9426 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4dae:	a809      	add	r0, sp, #36	; 0x24
   d4db0:	f7ff ff56 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4db4:	a806      	add	r0, sp, #24
   d4db6:	f7ff ff53 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4dba:	4b11      	ldr	r3, [pc, #68]	; (d4e00 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d4dbc:	6023      	str	r3, [r4, #0]
   d4dbe:	6225      	str	r5, [r4, #32]
   d4dc0:	a803      	add	r0, sp, #12
   d4dc2:	f7ff ff4d 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4dc6:	4b0f      	ldr	r3, [pc, #60]	; (d4e04 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d4dc8:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4dca:	f005 fcb9 	bl	da740 <_Z16_fetch_usbserialv>
   d4dce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4dd2:	f005 fca5 	bl	da720 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4dd6:	f004 f807 	bl	d8de8 <_ZN5spark10LogManager8instanceEv>
   d4dda:	4621      	mov	r1, r4
   d4ddc:	f004 fab5 	bl	d934a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   d4de0:	4668      	mov	r0, sp
   d4de2:	f7ff ff3d 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4de6:	b00c      	add	sp, #48	; 0x30
   d4de8:	bd70      	pop	{r4, r5, r6, pc}
   d4dea:	bf00      	nop
   d4dec:	2003e26c 	.word	0x2003e26c
   d4df0:	ffff0000 	.word	0xffff0000
   d4df4:	2003e260 	.word	0x2003e260
   d4df8:	2003e270 	.word	0x2003e270
   d4dfc:	000dbbd8 	.word	0x000dbbd8
   d4e00:	000dc468 	.word	0x000dc468
   d4e04:	000dbbf0 	.word	0x000dbbf0

000d4e08 <_Z18loadSystemDefaultsv>:

/**
 * @brief This function is called in setup if the version of the FRAM stoage map has been changed
 * 
 */
void loadSystemDefaults() {                         // This code is only executed with a new device or a new storage object structure
   d4e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e0a:	f002 fd81 	bl	d7910 <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d4e0e:	b1d8      	cbz	r0, d4e48 <_Z18loadSystemDefaultsv+0x40>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4e10:	4b17      	ldr	r3, [pc, #92]	; (d4e70 <_Z18loadSystemDefaultsv+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e12:	4a18      	ldr	r2, [pc, #96]	; (d4e74 <_Z18loadSystemDefaultsv+0x6c>)
   d4e14:	781b      	ldrb	r3, [r3, #0]
   d4e16:	f88d 3000 	strb.w	r3, [sp]
   d4e1a:	4917      	ldr	r1, [pc, #92]	; (d4e78 <_Z18loadSystemDefaultsv+0x70>)
   d4e1c:	233c      	movs	r3, #60	; 0x3c
   d4e1e:	a802      	add	r0, sp, #8
   d4e20:	f003 f904 	bl	d802c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   d4e24:	9c03      	ldr	r4, [sp, #12]
   d4e26:	b17c      	cbz	r4, d4e48 <_Z18loadSystemDefaultsv+0x40>
      if (--_M_use_count == 0)
   d4e28:	6863      	ldr	r3, [r4, #4]
   d4e2a:	3b01      	subs	r3, #1
   d4e2c:	6063      	str	r3, [r4, #4]
   d4e2e:	b95b      	cbnz	r3, d4e48 <_Z18loadSystemDefaultsv+0x40>
          _M_dispose();
   d4e30:	6823      	ldr	r3, [r4, #0]
   d4e32:	4620      	mov	r0, r4
   d4e34:	689b      	ldr	r3, [r3, #8]
   d4e36:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e38:	68a3      	ldr	r3, [r4, #8]
   d4e3a:	3b01      	subs	r3, #1
   d4e3c:	60a3      	str	r3, [r4, #8]
   d4e3e:	b91b      	cbnz	r3, d4e48 <_Z18loadSystemDefaultsv+0x40>
            _M_destroy();
   d4e40:	6823      	ldr	r3, [r4, #0]
   d4e42:	4620      	mov	r0, r4
   d4e44:	68db      	ldr	r3, [r3, #12]
   d4e46:	4798      	blx	r3
    Particle.publish("Mode","Loading System Defaults", PRIVATE);
  }
  Log.info("Loading system defaults");              // Letting us know that defaults are being loaded
   d4e48:	490c      	ldr	r1, [pc, #48]	; (d4e7c <_Z18loadSystemDefaultsv+0x74>)
   d4e4a:	480d      	ldr	r0, [pc, #52]	; (d4e80 <_Z18loadSystemDefaultsv+0x78>)
   d4e4c:	f7ff f98a 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
  sysStatus.structuresVersion = 1;
   d4e50:	4b0c      	ldr	r3, [pc, #48]	; (d4e84 <_Z18loadSystemDefaultsv+0x7c>)
   d4e52:	4a0d      	ldr	r2, [pc, #52]	; (d4e88 <_Z18loadSystemDefaultsv+0x80>)
   d4e54:	605a      	str	r2, [r3, #4]
  sysStatus.firmwareRelease = 1;
  sysStatus.verboseMode = false;
  sysStatus.solarPowerMode = true;
  sysStatus.lowPowerMode = true;
   d4e56:	2201      	movs	r2, #1
   d4e58:	721a      	strb	r2, [r3, #8]
  sysStatus.resetCount = 0;
  sysStatus.lastHookResponse = 0;
  sysStatus.frequencyMinutes = 60;
   d4e5a:	213c      	movs	r1, #60	; 0x3c
  sysStatus.resetCount = 0;
   d4e5c:	2200      	movs	r2, #0
  sysStatus.lastHookResponse = 0;
   d4e5e:	e9c3 2203 	strd	r2, r2, [r3, #12]
  sysStatus.frequencyMinutes = 60;
   d4e62:	8399      	strh	r1, [r3, #28]
  sysStatus.lastAlertCode = 0;
   d4e64:	779a      	strb	r2, [r3, #30]
  sysStatus.lastAlertTime = 0;
   d4e66:	621a      	str	r2, [r3, #32]
  sysStatus.verizonSIM = false;
   d4e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   d4e6c:	b004      	add	sp, #16
   d4e6e:	bd10      	pop	{r4, pc}
   d4e70:	2003e294 	.word	0x2003e294
   d4e74:	000dbc00 	.word	0x000dbc00
   d4e78:	000dbbca 	.word	0x000dbbca
   d4e7c:	000dbc18 	.word	0x000dbc18
   d4e80:	2003e574 	.word	0x2003e574
   d4e84:	2003e2c8 	.word	0x2003e2c8
   d4e88:	01000101 	.word	0x01000101

000d4e8c <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d4e8c:	4b01      	ldr	r3, [pc, #4]	; (d4e94 <_GLOBAL__sub_I_sysStatus+0x8>)
   d4e8e:	2201      	movs	r2, #1
   d4e90:	701a      	strb	r2, [r3, #0]
   d4e92:	4770      	bx	lr
   d4e94:	2003e294 	.word	0x2003e294

000d4e98 <_Z17storageObjectLoopv>:
bool storageObjectLoop() {                          // Monitors the values of the two objects and writes to FRAM if changed after a second
   d4e98:	b570      	push	{r4, r5, r6, lr}
  if (Time.now() - lastCheckTime) {          // Check once a second
   d4e9a:	4c32      	ldr	r4, [pc, #200]	; (d4f64 <_Z17storageObjectLoopv+0xcc>)
   d4e9c:	f005 fb4f 	bl	da53e <_ZN9TimeClass3nowEv>
   d4ea0:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4ea4:	17c1      	asrs	r1, r0, #31
   d4ea6:	4299      	cmp	r1, r3
   d4ea8:	bf08      	it	eq
   d4eaa:	4290      	cmpeq	r0, r2
   d4eac:	d058      	beq.n	d4f60 <_Z17storageObjectLoopv+0xc8>
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d4eae:	f005 fb46 	bl	da53e <_ZN9TimeClass3nowEv>
                      std::hash<uint32_t>{}(sysStatus.lastHookResponse) + \
   d4eb2:	4d2d      	ldr	r5, [pc, #180]	; (d4f68 <_Z17storageObjectLoopv+0xd0>)
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d4eb4:	4e2d      	ldr	r6, [pc, #180]	; (d4f6c <_Z17storageObjectLoopv+0xd4>)
    lastCheckTime = Time.now();                     // Limit all this math to once a second
   d4eb6:	17c1      	asrs	r1, r0, #31
   d4eb8:	e9c4 0100 	strd	r0, r1, [r4]
                      std::hash<byte>{}(sysStatus.lastAlertCode)+ \
   d4ebc:	e9d5 3404 	ldrd	r3, r4, [r5, #16]
   d4ec0:	441c      	add	r4, r3
   d4ec2:	6a2b      	ldr	r3, [r5, #32]
   d4ec4:	441c      	add	r4, r3

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4ec6:	882b      	ldrh	r3, [r5, #0]
   d4ec8:	441c      	add	r4, r3
   d4eca:	886b      	ldrh	r3, [r5, #2]
   d4ecc:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4ece:	792b      	ldrb	r3, [r5, #4]
   d4ed0:	441c      	add	r4, r3
   d4ed2:	796b      	ldrb	r3, [r5, #5]
   d4ed4:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d4ed6:	79ab      	ldrb	r3, [r5, #6]
   d4ed8:	441c      	add	r4, r3
   d4eda:	79eb      	ldrb	r3, [r5, #7]
   d4edc:	441c      	add	r4, r3
   d4ede:	7a2b      	ldrb	r3, [r5, #8]
   d4ee0:	441c      	add	r4, r3
   d4ee2:	68eb      	ldr	r3, [r5, #12]
   d4ee4:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4ee6:	8b2b      	ldrh	r3, [r5, #24]
   d4ee8:	441c      	add	r4, r3
   d4eea:	8bab      	ldrh	r3, [r5, #28]
   d4eec:	441c      	add	r4, r3
   d4eee:	8b6b      	ldrh	r3, [r5, #26]
   d4ef0:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4ef2:	7fab      	ldrb	r3, [r5, #30]
   d4ef4:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(bool)
   d4ef6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
                      std::hash<bool>{}(sysStatus.verizonSIM);
   d4efa:	441c      	add	r4, r3
    if (sysStatusHash != lastSysStatusHash) {       // If hashes don't match write to FRAM
   d4efc:	6833      	ldr	r3, [r6, #0]
   d4efe:	429c      	cmp	r4, r3
   d4f00:	d02c      	beq.n	d4f5c <_Z17storageObjectLoopv+0xc4>
      Log.info("sysStaus object stored and hash updated");
   d4f02:	491b      	ldr	r1, [pc, #108]	; (d4f70 <_Z17storageObjectLoopv+0xd8>)
   d4f04:	481b      	ldr	r0, [pc, #108]	; (d4f74 <_Z17storageObjectLoopv+0xdc>)
   d4f06:	f7ff f92d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f0a:	481b      	ldr	r0, [pc, #108]	; (d4f78 <_Z17storageObjectLoopv+0xe0>)
   d4f0c:	2328      	movs	r3, #40	; 0x28
   d4f0e:	462a      	mov	r2, r5
   d4f10:	2101      	movs	r1, #1
   d4f12:	f000 ff5c 	bl	d5dce <_ZN6MB85RC9writeDataEjPKhj>
      lastSysStatusHash = sysStatusHash;
   d4f16:	6034      	str	r4, [r6, #0]
      returnValue = true;                           // In case I want to test whether values changed
   d4f18:	2001      	movs	r0, #1
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d4f1a:	4d18      	ldr	r5, [pc, #96]	; (d4f7c <_Z17storageObjectLoopv+0xe4>)
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d4f1c:	4e18      	ldr	r6, [pc, #96]	; (d4f80 <_Z17storageObjectLoopv+0xe8>)
    size_t currentHash =  std::hash<byte>{}(current.internalTempC) + \
   d4f1e:	686b      	ldr	r3, [r5, #4]
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4f20:	782c      	ldrb	r4, [r5, #0]
   d4f22:	441c      	add	r4, r3
   d4f24:	7a2b      	ldrb	r3, [r5, #8]
                      std::hash<int>{}(current.stateOfCharge)+ \
   d4f26:	441c      	add	r4, r3
                      std::hash<byte>{}(current.batteryState) + \
   d4f28:	692b      	ldr	r3, [r5, #16]
   d4f2a:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4f2c:	8b2b      	ldrh	r3, [r5, #24]
                      std::hash<time_t>{}(current.lastSampleTime) + \
   d4f2e:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned char)
   d4f30:	7eab      	ldrb	r3, [r5, #26]
                      std::hash<uint16_t>{}(current.rssi) + \
   d4f32:	441c      	add	r4, r3
  _Cxx_hashtable_define_trivial_hash(unsigned short)
   d4f34:	8bab      	ldrh	r3, [r5, #28]
                      std::hash<uint8_t>{}(current.messageNumber) + \
   d4f36:	441c      	add	r4, r3
   d4f38:	8beb      	ldrh	r3, [r5, #30]
                      std::hash<uint16_t>{}(current.daily);
   d4f3a:	441c      	add	r4, r3
    if (currentHash != lastCurrentHash) {           // If hashes don't match write to FRAM
   d4f3c:	6833      	ldr	r3, [r6, #0]
   d4f3e:	429c      	cmp	r4, r3
   d4f40:	d00b      	beq.n	d4f5a <_Z17storageObjectLoopv+0xc2>
      Log.info("current object stored and hash updated");
   d4f42:	4910      	ldr	r1, [pc, #64]	; (d4f84 <_Z17storageObjectLoopv+0xec>)
   d4f44:	480b      	ldr	r0, [pc, #44]	; (d4f74 <_Z17storageObjectLoopv+0xdc>)
   d4f46:	f7ff f90d 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4f4a:	480b      	ldr	r0, [pc, #44]	; (d4f78 <_Z17storageObjectLoopv+0xe0>)
   d4f4c:	2320      	movs	r3, #32
   d4f4e:	462a      	mov	r2, r5
   d4f50:	2150      	movs	r1, #80	; 0x50
   d4f52:	f000 ff3c 	bl	d5dce <_ZN6MB85RC9writeDataEjPKhj>
      lastCurrentHash = currentHash;
   d4f56:	6034      	str	r4, [r6, #0]
      returnValue = true;
   d4f58:	2001      	movs	r0, #1
}
   d4f5a:	bd70      	pop	{r4, r5, r6, pc}
  bool returnValue = false;
   d4f5c:	2000      	movs	r0, #0
   d4f5e:	e7dc      	b.n	d4f1a <_Z17storageObjectLoopv+0x82>
   d4f60:	2000      	movs	r0, #0
   d4f62:	e7fa      	b.n	d4f5a <_Z17storageObjectLoopv+0xc2>
   d4f64:	2003e298 	.word	0x2003e298
   d4f68:	2003e2c8 	.word	0x2003e2c8
   d4f6c:	2003e2a4 	.word	0x2003e2a4
   d4f70:	000dbc30 	.word	0x000dbc30
   d4f74:	2003e574 	.word	0x2003e574
   d4f78:	2003ded8 	.word	0x2003ded8
   d4f7c:	2003e2a8 	.word	0x2003e2a8
   d4f80:	2003e2a0 	.word	0x2003e2a0
   d4f84:	000dbc58 	.word	0x000dbc58

000d4f88 <_Z18storageObjectStartv>:
bool storageObjectStart() {
   d4f88:	b513      	push	{r0, r1, r4, lr}
  Log.info("Initializing the Object Store");
   d4f8a:	4921      	ldr	r1, [pc, #132]	; (d5010 <_Z18storageObjectStartv+0x88>)
   d4f8c:	4821      	ldr	r0, [pc, #132]	; (d5014 <_Z18storageObjectStartv+0x8c>)
   d4f8e:	f7ff f8e9 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
  fram.begin();                                     // Initialize the FRAM module
   d4f92:	4821      	ldr	r0, [pc, #132]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4f94:	f000 fe8e 	bl	d5cb4 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4f98:	481f      	ldr	r0, [pc, #124]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4f9a:	2301      	movs	r3, #1
   d4f9c:	f10d 0207 	add.w	r2, sp, #7
   d4fa0:	2100      	movs	r1, #0
   d4fa2:	f000 fec9 	bl	d5d38 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {           // Check to see if the memory map in the sketch matches the data on the chip
   d4fa6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4faa:	2c01      	cmp	r4, #1
   d4fac:	d01c      	beq.n	d4fe8 <_Z18storageObjectStartv+0x60>
    Log.info("FRAM mismatch, erasing and locafing defaults if it checks out");
   d4fae:	491b      	ldr	r1, [pc, #108]	; (d501c <_Z18storageObjectStartv+0x94>)
   d4fb0:	4818      	ldr	r0, [pc, #96]	; (d5014 <_Z18storageObjectStartv+0x8c>)
   d4fb2:	f7ff f8d7 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                   // Reset the FRAM to correct the issue
   d4fb6:	4818      	ldr	r0, [pc, #96]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4fb8:	f000 fe86 	bl	d5cc8 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4fbc:	4a18      	ldr	r2, [pc, #96]	; (d5020 <_Z18storageObjectStartv+0x98>)
   d4fbe:	4816      	ldr	r0, [pc, #88]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4fc0:	2304      	movs	r3, #4
   d4fc2:	2100      	movs	r1, #0
   d4fc4:	f000 ff03 	bl	d5dce <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4fc8:	4813      	ldr	r0, [pc, #76]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4fca:	2301      	movs	r3, #1
   d4fcc:	f10d 0207 	add.w	r2, sp, #7
   d4fd0:	2100      	movs	r1, #0
   d4fd2:	f000 feb1 	bl	d5d38 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d4fd6:	f89d 4007 	ldrb.w	r4, [sp, #7]
   d4fda:	2c01      	cmp	r4, #1
   d4fdc:	d115      	bne.n	d500a <_Z18storageObjectStartv+0x82>
    loadSystemDefaults();                           // Since we are re-initializing the storage objects, we need to set the right default values
   d4fde:	f7ff ff13 	bl	d4e08 <_Z18loadSystemDefaultsv>
   d4fe2:	4620      	mov	r0, r4
}
   d4fe4:	b002      	add	sp, #8
   d4fe6:	bd10      	pop	{r4, pc}
    Log.info("FRAM initialized, loading objects");
   d4fe8:	490e      	ldr	r1, [pc, #56]	; (d5024 <_Z18storageObjectStartv+0x9c>)
   d4fea:	480a      	ldr	r0, [pc, #40]	; (d5014 <_Z18storageObjectStartv+0x8c>)
   d4fec:	f7ff f8ba 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d4ff0:	4621      	mov	r1, r4
   d4ff2:	4a0d      	ldr	r2, [pc, #52]	; (d5028 <_Z18storageObjectStartv+0xa0>)
   d4ff4:	4808      	ldr	r0, [pc, #32]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d4ff6:	2328      	movs	r3, #40	; 0x28
   d4ff8:	f000 fe9e 	bl	d5d38 <_ZN6MB85RC8readDataEjPhj>
   d4ffc:	4a0b      	ldr	r2, [pc, #44]	; (d502c <_Z18storageObjectStartv+0xa4>)
   d4ffe:	4806      	ldr	r0, [pc, #24]	; (d5018 <_Z18storageObjectStartv+0x90>)
   d5000:	2320      	movs	r3, #32
   d5002:	2150      	movs	r1, #80	; 0x50
   d5004:	f000 fe98 	bl	d5d38 <_ZN6MB85RC8readDataEjPhj>
   d5008:	e7eb      	b.n	d4fe2 <_Z18storageObjectStartv+0x5a>
      return false;
   d500a:	2000      	movs	r0, #0
   d500c:	e7ea      	b.n	d4fe4 <_Z18storageObjectStartv+0x5c>
   d500e:	bf00      	nop
   d5010:	000dbc7f 	.word	0x000dbc7f
   d5014:	2003e574 	.word	0x2003e574
   d5018:	2003ded8 	.word	0x2003ded8
   d501c:	000dbc9d 	.word	0x000dbc9d
   d5020:	000dbd00 	.word	0x000dbd00
   d5024:	000dbcdb 	.word	0x000dbcdb
   d5028:	2003e2c8 	.word	0x2003e2c8
   d502c:	2003e2a8 	.word	0x2003e2a8

000d5030 <_Z17tmp36TemperatureCi>:
 */
float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   d5030:	ee07 0a90 	vmov	s15, r0
   d5034:	ed9f 7a09 	vldr	s14, [pc, #36]	; d505c <_Z17tmp36TemperatureCi+0x2c>
   d5038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d503c:	ee67 7a87 	vmul.f32	s15, s15, s14
   d5040:	ed9f 7a07 	vldr	s14, [pc, #28]	; d5060 <_Z17tmp36TemperatureCi+0x30>
   d5044:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   d5048:	eddf 7a06 	vldr	s15, [pc, #24]	; d5064 <_Z17tmp36TemperatureCi+0x34>
   d504c:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   d5050:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   d5054:	ee87 0a80 	vdiv.f32	s0, s15, s0
   d5058:	4770      	bx	lr
   d505a:	bf00      	nop
   d505c:	454e4000 	.word	0x454e4000
   d5060:	457ff000 	.word	0x457ff000
   d5064:	43fa0000 	.word	0x43fa0000

000d5068 <_Z12batteryStatev>:
 * from sleep.  In order to help with this, there is a test for enable sleep and an additional delay.
 * 
 * @return true  - If the battery has a charge over 60%
 * @return false - Less than 60% indicates a low battery condition
 */
bool batteryState() {
   d5068:	b510      	push	{r4, lr}
   d506a:	b086      	sub	sp, #24
    const diag_source* src = nullptr;
   d506c:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d506e:	a902      	add	r1, sp, #8
   d5070:	2007      	movs	r0, #7
    const diag_source* src = nullptr;
   d5072:	9202      	str	r2, [sp, #8]
    const int ret = diag_get_source(id, &src, nullptr);
   d5074:	f002 fbca 	bl	d780c <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d5078:	b9b8      	cbnz	r0, d50aa <_Z12batteryStatev+0x42>
    return get(src, val);
   d507a:	9c02      	ldr	r4, [sp, #8]
    SPARK_ASSERT(src && src->callback);
   d507c:	b10c      	cbz	r4, d5082 <_Z12batteryStatev+0x1a>
   d507e:	6923      	ldr	r3, [r4, #16]
   d5080:	b923      	cbnz	r3, d508c <_Z12batteryStatev+0x24>
   d5082:	4a19      	ldr	r2, [pc, #100]	; (d50e8 <_Z12batteryStatev+0x80>)
   d5084:	2100      	movs	r1, #0
   d5086:	200a      	movs	r0, #10
   d5088:	f002 fb98 	bl	d77bc <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d508c:	2300      	movs	r3, #0
   d508e:	f8ad 300e 	strh.w	r3, [sp, #14]
   d5092:	230c      	movs	r3, #12
   d5094:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5098:	ab01      	add	r3, sp, #4
   d509a:	9304      	str	r3, [sp, #16]
   d509c:	2304      	movs	r3, #4
   d509e:	9305      	str	r3, [sp, #20]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d50a0:	aa03      	add	r2, sp, #12
   d50a2:	6923      	ldr	r3, [r4, #16]
   d50a4:	2101      	movs	r1, #1
   d50a6:	4620      	mov	r0, r4
   d50a8:	4798      	blx	r3
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context

  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d50aa:	4a10      	ldr	r2, [pc, #64]	; (d50ec <_Z12batteryStatev+0x84>)
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d50ac:	4c10      	ldr	r4, [pc, #64]	; (d50f0 <_Z12batteryStatev+0x88>)
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d50ae:	7a12      	ldrb	r2, [r2, #8]
        if (r < 0) {
   d50b0:	2800      	cmp	r0, #0
        return val;
   d50b2:	bfa8      	it	ge
   d50b4:	9801      	ldrge	r0, [sp, #4]
    current.batteryState = System.batteryState();                      // Call before isItSafeToCharge() as it may overwrite the context
   d50b6:	7220      	strb	r0, [r4, #8]
  if (sysStatus.lowPowerMode) {                                        // Need to take these steps if we are sleeping
   d50b8:	b132      	cbz	r2, d50c8 <_Z12batteryStatev+0x60>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   d50ba:	480e      	ldr	r0, [pc, #56]	; (d50f4 <_Z12batteryStatev+0x8c>)
   d50bc:	f003 fa24 	bl	d8508 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   d50c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d50c4:	f002 fd14 	bl	d7af0 <delay>
  }

  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d50c8:	480a      	ldr	r0, [pc, #40]	; (d50f4 <_Z12batteryStatev+0x8c>)
   d50ca:	f003 f9bd 	bl	d8448 <_ZN9FuelGauge6getSoCEv>
   d50ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d50d2:	ee17 0a90 	vmov	r0, s15

  if (current.stateOfCharge > 60) return true;
  else return false;
}
   d50d6:	283c      	cmp	r0, #60	; 0x3c
   d50d8:	bfd4      	ite	le
   d50da:	2000      	movle	r0, #0
   d50dc:	2001      	movgt	r0, #1
  current.stateOfCharge = int(fuelGauge.getSoC());                   // Assign to system value
   d50de:	edc4 7a01 	vstr	s15, [r4, #4]
}
   d50e2:	b006      	add	sp, #24
   d50e4:	bd10      	pop	{r4, pc}
   d50e6:	bf00      	nop
   d50e8:	000d743d 	.word	0x000d743d
   d50ec:	2003e2c8 	.word	0x2003e2c8
   d50f0:	2003e2a8 	.word	0x2003e2a8
   d50f4:	2003e2f0 	.word	0x2003e2f0

000d50f8 <_Z16isItSafeToChargev>:
 * 
 * @link https://batteryuniversity.com/learn/article/charging_at_high_and_low_temperatures @endlink
 * 
 */
bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   d50f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  PMIC pmic(true);
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d50fa:	4d0c      	ldr	r5, [pc, #48]	; (d512c <_Z16isItSafeToChargev+0x34>)
  PMIC pmic(true);
   d50fc:	2101      	movs	r1, #1
   d50fe:	a801      	add	r0, sp, #4
   d5100:	f004 fd63 	bl	d9bca <_ZN4PMICC1Eb>
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d5104:	782b      	ldrb	r3, [r5, #0]
   d5106:	2b25      	cmp	r3, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5108:	a801      	add	r0, sp, #4
   d510a:	f04f 0401 	mov.w	r4, #1
  if (current.internalTempC < 0 || current.internalTempC > 37 )  {  // Reference: (32 to 113 but with safety)
   d510e:	d909      	bls.n	d5124 <_Z16isItSafeToChargev+0x2c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   d5110:	f004 fdee 	bl	d9cf0 <_ZN4PMIC15disableChargingEv>
    current.batteryState = 1;                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   d5114:	722c      	strb	r4, [r5, #8]
    return false;
   d5116:	2400      	movs	r4, #0
  PMIC pmic(true);
   d5118:	a801      	add	r0, sp, #4
   d511a:	f004 fd65 	bl	d9be8 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   d511e:	4620      	mov	r0, r4
   d5120:	b003      	add	sp, #12
   d5122:	bd30      	pop	{r4, r5, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   d5124:	f004 fdcd 	bl	d9cc2 <_ZN4PMIC14enableChargingEv>
    return true;
   d5128:	e7f6      	b.n	d5118 <_Z16isItSafeToChargev+0x20>
   d512a:	bf00      	nop
   d512c:	2003e2a8 	.word	0x2003e2a8

000d5130 <_Z17getSignalStrengthv>:
 * @brief Get the Signal Strength values and make up a string for use in the console
 * 
 * @details Provides data on the signal strength and quality
 * 
 */
void getSignalStrength() {
   d5130:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5132:	4d19      	ldr	r5, [pc, #100]	; (d5198 <_Z17getSignalStrengthv+0x68>)
   d5134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   d5136:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   d5138:	ac04      	add	r4, sp, #16
   d513a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d513c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d513e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5140:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5144:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   d5148:	4914      	ldr	r1, [pc, #80]	; (d519c <_Z17getSignalStrengthv+0x6c>)
   d514a:	a80e      	add	r0, sp, #56	; 0x38
   d514c:	f002 fd2a 	bl	d7ba4 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   d5150:	a80e      	add	r0, sp, #56	; 0x38
   d5152:	f002 fd7a 	bl	d7c4a <_ZNK14CellularSignal19getAccessTechnologyEv>
   d5156:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   d5158:	a80e      	add	r0, sp, #56	; 0x38
   d515a:	f002 fd91 	bl	d7c80 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   d515e:	a80e      	add	r0, sp, #56	; 0x38
  float strengthPercentage = sig.getStrength();
   d5160:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   d5164:	f002 fdbc 	bl	d7ce0 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d5168:	ab18      	add	r3, sp, #96	; 0x60
  float qualityPercentage = sig.getQuality();
   d516a:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   d516e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d5172:	f005 fe39 	bl	dade8 <__aeabi_f2d>
   d5176:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d517a:	4628      	mov	r0, r5
   d517c:	f005 fe34 	bl	dade8 <__aeabi_f2d>
   d5180:	e9cd 0100 	strd	r0, r1, [sp]
   d5184:	4a06      	ldr	r2, [pc, #24]	; (d51a0 <_Z17getSignalStrengthv+0x70>)
   d5186:	f854 3c50 	ldr.w	r3, [r4, #-80]
   d518a:	4806      	ldr	r0, [pc, #24]	; (d51a4 <_Z17getSignalStrengthv+0x74>)
   d518c:	2140      	movs	r1, #64	; 0x40
   d518e:	f002 fc67 	bl	d7a60 <snprintf>
   d5192:	b019      	add	sp, #100	; 0x64
   d5194:	bd30      	pop	{r4, r5, pc}
   d5196:	bf00      	nop
   d5198:	000dbdb8 	.word	0x000dbdb8
   d519c:	2003e530 	.word	0x2003e530
   d51a0:	000dbd7d 	.word	0x000dbd7d
   d51a4:	2003ddd9 	.word	0x2003ddd9

000d51a8 <_Z16takeMeasurementsv>:
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d51a8:	4b10      	ldr	r3, [pc, #64]	; (d51ec <_Z16takeMeasurementsv+0x44>)
bool takeMeasurements() { 
   d51aa:	b510      	push	{r4, lr}
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d51ac:	8818      	ldrh	r0, [r3, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d51ae:	4c10      	ldr	r4, [pc, #64]	; (d51f0 <_Z16takeMeasurementsv+0x48>)
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d51b0:	f005 fc1b 	bl	da9ea <analogRead>
   d51b4:	f7ff ff3c 	bl	d5030 <_Z17tmp36TemperatureCi>
   d51b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d51bc:	4a0d      	ldr	r2, [pc, #52]	; (d51f4 <_Z16takeMeasurementsv+0x4c>)
   d51be:	ee17 3a90 	vmov	r3, s15
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d51c2:	2110      	movs	r1, #16
    current.internalTempC = (int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN));
   d51c4:	7013      	strb	r3, [r2, #0]
    snprintf(internalTempStr,sizeof(internalTempStr), "%i C", current.internalTempC);
   d51c6:	4620      	mov	r0, r4
   d51c8:	b2db      	uxtb	r3, r3
   d51ca:	4a0b      	ldr	r2, [pc, #44]	; (d51f8 <_Z16takeMeasurementsv+0x50>)
   d51cc:	f002 fc48 	bl	d7a60 <snprintf>
    Log.info("Internal Temperature is %s",internalTempStr);
   d51d0:	490a      	ldr	r1, [pc, #40]	; (d51fc <_Z16takeMeasurementsv+0x54>)
   d51d2:	480b      	ldr	r0, [pc, #44]	; (d5200 <_Z16takeMeasurementsv+0x58>)
   d51d4:	4622      	mov	r2, r4
   d51d6:	f7fe ffc5 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    batteryState();
   d51da:	f7ff ff45 	bl	d5068 <_Z12batteryStatev>
    isItSafeToCharge();
   d51de:	f7ff ff8b 	bl	d50f8 <_Z16isItSafeToChargev>
    getSignalStrength();
   d51e2:	f7ff ffa5 	bl	d5130 <_Z17getSignalStrengthv>
}
   d51e6:	2001      	movs	r0, #1
   d51e8:	bd10      	pop	{r4, pc}
   d51ea:	bf00      	nop
   d51ec:	000dbb7a 	.word	0x000dbb7a
   d51f0:	2003ddc9 	.word	0x2003ddc9
   d51f4:	2003e2a8 	.word	0x2003e2a8
   d51f8:	000dbd96 	.word	0x000dbd96
   d51fc:	000dbd9b 	.word	0x000dbd9b
   d5200:	2003e574 	.word	0x2003e574

000d5204 <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   d5204:	4801      	ldr	r0, [pc, #4]	; (d520c <_GLOBAL__sub_I_batteryContext+0x8>)
   d5206:	2100      	movs	r1, #0
   d5208:	f003 b8d0 	b.w	d83ac <_ZN9FuelGaugeC1Eb>
   d520c:	2003e2f0 	.word	0x2003e2f0

000d5210 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d5210:	4770      	bx	lr

000d5212 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d5212:	b510      	push	{r4, lr}
}
   d5214:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d5216:	4604      	mov	r4, r0
}
   d5218:	f005 fc78 	bl	dab0c <_ZdlPvj>
   d521c:	4620      	mov	r0, r4
   d521e:	bd10      	pop	{r4, pc}

000d5220 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d5220:	b40e      	push	{r1, r2, r3}
   d5222:	b510      	push	{r4, lr}
   d5224:	b08d      	sub	sp, #52	; 0x34
   d5226:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d5228:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d522a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d522e:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d5230:	2300      	movs	r3, #0
   d5232:	2020      	movs	r0, #32
   d5234:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5238:	e9cd 4200 	strd	r4, r2, [sp]
   d523c:	2001      	movs	r0, #1
   d523e:	aa04      	add	r2, sp, #16
   d5240:	f002 facc 	bl	d77dc <log_message_v>
}
   d5244:	b00d      	add	sp, #52	; 0x34
   d5246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d524a:	b003      	add	sp, #12
   d524c:	4770      	bx	lr

000d524e <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d524e:	b40e      	push	{r1, r2, r3}
   d5250:	b510      	push	{r4, lr}
   d5252:	b08d      	sub	sp, #52	; 0x34
   d5254:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d5256:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d5258:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d525c:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d525e:	2300      	movs	r3, #0
   d5260:	2020      	movs	r0, #32
   d5262:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5266:	e9cd 4200 	strd	r4, r2, [sp]
   d526a:	2032      	movs	r0, #50	; 0x32
   d526c:	aa04      	add	r2, sp, #16
   d526e:	f002 fab5 	bl	d77dc <log_message_v>
}
   d5272:	b00d      	add	sp, #52	; 0x34
   d5274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5278:	b003      	add	sp, #12
   d527a:	4770      	bx	lr

000d527c <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d527c:	b510      	push	{r4, lr}
   d527e:	7202      	strb	r2, [r0, #8]
   d5280:	22ff      	movs	r2, #255	; 0xff
   d5282:	8142      	strh	r2, [r0, #10]
   d5284:	2200      	movs	r2, #0
   d5286:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d528a:	6142      	str	r2, [r0, #20]
   d528c:	7602      	strb	r2, [r0, #24]
   d528e:	61c2      	str	r2, [r0, #28]
    instance = this;
   d5290:	4a02      	ldr	r2, [pc, #8]	; (d529c <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5292:	4c03      	ldr	r4, [pc, #12]	; (d52a0 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d5294:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d5296:	e9c0 4100 	strd	r4, r1, [r0]
}
   d529a:	bd10      	pop	{r4, pc}
   d529c:	2003e2fc 	.word	0x2003e2fc
   d52a0:	000dbfe4 	.word	0x000dbfe4

000d52a4 <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d52a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d52a8:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d52ac:	4604      	mov	r4, r0
   d52ae:	4689      	mov	r9, r1
   d52b0:	4616      	mov	r6, r2
   d52b2:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d52b4:	f1b8 0f00 	cmp.w	r8, #0
   d52b8:	d002      	beq.n	d52c0 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d52ba:	6840      	ldr	r0, [r0, #4]
   d52bc:	f003 f9be 	bl	d863c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d52c0:	7a21      	ldrb	r1, [r4, #8]
   d52c2:	6860      	ldr	r0, [r4, #4]
   d52c4:	f003 f997 	bl	d85f6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d52c8:	6860      	ldr	r0, [r4, #4]
   d52ca:	6803      	ldr	r3, [r0, #0]
   d52cc:	4649      	mov	r1, r9
   d52ce:	689b      	ldr	r3, [r3, #8]
   d52d0:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d52d2:	6860      	ldr	r0, [r4, #4]
   d52d4:	2100      	movs	r1, #0
   d52d6:	f003 f9ad 	bl	d8634 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d52da:	4605      	mov	r5, r0
   d52dc:	bb00      	cbnz	r0, d5320 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d52de:	2301      	movs	r3, #1
   d52e0:	7a21      	ldrb	r1, [r4, #8]
   d52e2:	6860      	ldr	r0, [r4, #4]
   d52e4:	463a      	mov	r2, r7
   d52e6:	f003 f974 	bl	d85d2 <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d52ea:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d52ec:	4603      	mov	r3, r0
        if (count == num) {
   d52ee:	d109      	bne.n	d5304 <_ZN6AB180513readRegistersEhPhjb+0x60>
   d52f0:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d52f2:	42be      	cmp	r6, r7
   d52f4:	d01c      	beq.n	d5330 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d52f6:	6860      	ldr	r0, [r4, #4]
   d52f8:	6803      	ldr	r3, [r0, #0]
   d52fa:	695b      	ldr	r3, [r3, #20]
   d52fc:	4798      	blx	r3
   d52fe:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d5302:	e7f6      	b.n	d52f2 <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d5304:	490b      	ldr	r1, [pc, #44]	; (d5334 <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d5306:	480c      	ldr	r0, [pc, #48]	; (d5338 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5308:	464a      	mov	r2, r9
   d530a:	f7ff ffa0 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d530e:	f1b8 0f00 	cmp.w	r8, #0
   d5312:	d002      	beq.n	d531a <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d5314:	6860      	ldr	r0, [r4, #4]
   d5316:	f003 f99a 	bl	d864e <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d531a:	4628      	mov	r0, r5
   d531c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d5320:	4603      	mov	r3, r0
   d5322:	4906      	ldr	r1, [pc, #24]	; (d533c <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d5324:	4804      	ldr	r0, [pc, #16]	; (d5338 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d5326:	464a      	mov	r2, r9
   d5328:	f7ff ff91 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d532c:	2500      	movs	r5, #0
   d532e:	e7ee      	b.n	d530e <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d5330:	2501      	movs	r5, #1
   d5332:	e7ec      	b.n	d530e <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d5334:	000dbde0 	.word	0x000dbde0
   d5338:	2003e2f8 	.word	0x2003e2f8
   d533c:	000dbe05 	.word	0x000dbe05

000d5340 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d5340:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d5342:	9300      	str	r3, [sp, #0]
   d5344:	2301      	movs	r3, #1
   d5346:	f7ff ffad 	bl	d52a4 <_ZN6AB180513readRegistersEhPhjb>
}
   d534a:	b003      	add	sp, #12
   d534c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5350 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d5350:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d5352:	8943      	ldrh	r3, [r0, #10]
   d5354:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d5356:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d5358:	d010      	beq.n	d537c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d535a:	4e19      	ldr	r6, [pc, #100]	; (d53c0 <_ZN6AB180510detectChipEv+0x70>)
   d535c:	4d19      	ldr	r5, [pc, #100]	; (d53c4 <_ZN6AB180510detectChipEv+0x74>)
   d535e:	f002 f875 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d5362:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d5366:	d209      	bcs.n	d537c <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d5368:	8960      	ldrh	r0, [r4, #10]
   d536a:	f005 fb2b 	bl	da9c4 <digitalRead>
   d536e:	2801      	cmp	r0, #1
   d5370:	d004      	beq.n	d537c <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d5372:	4631      	mov	r1, r6
   d5374:	4628      	mov	r0, r5
   d5376:	f7fe fef5 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d537a:	e7f0      	b.n	d535e <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d537c:	2301      	movs	r3, #1
   d537e:	f10d 0207 	add.w	r2, sp, #7
   d5382:	2128      	movs	r1, #40	; 0x28
   d5384:	4620      	mov	r0, r4
   d5386:	f7ff ffdb 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d538a:	b930      	cbnz	r0, d539a <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d538c:	480d      	ldr	r0, [pc, #52]	; (d53c4 <_ZN6AB180510detectChipEv+0x74>)
   d538e:	490e      	ldr	r1, [pc, #56]	; (d53c8 <_ZN6AB180510detectChipEv+0x78>)
   d5390:	f7fe fee8 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5394:	2000      	movs	r0, #0
}
   d5396:	b002      	add	sp, #8
   d5398:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d539a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d539e:	2b18      	cmp	r3, #24
   d53a0:	d1f4      	bne.n	d538c <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d53a2:	2301      	movs	r3, #1
   d53a4:	f10d 0207 	add.w	r2, sp, #7
   d53a8:	2129      	movs	r1, #41	; 0x29
   d53aa:	4620      	mov	r0, r4
   d53ac:	f7ff ffc8 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d53b0:	2800      	cmp	r0, #0
   d53b2:	d0eb      	beq.n	d538c <_ZN6AB180510detectChipEv+0x3c>
   d53b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d53b8:	2b05      	cmp	r3, #5
   d53ba:	d1e7      	bne.n	d538c <_ZN6AB180510detectChipEv+0x3c>
   d53bc:	e7eb      	b.n	d5396 <_ZN6AB180510detectChipEv+0x46>
   d53be:	bf00      	nop
   d53c0:	000dbe29 	.word	0x000dbe29
   d53c4:	2003e2f8 	.word	0x2003e2f8
   d53c8:	000dbe3e 	.word	0x000dbe3e

000d53cc <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d53cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d53d0:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d53d4:	4604      	mov	r4, r0
   d53d6:	460f      	mov	r7, r1
   d53d8:	4615      	mov	r5, r2
   d53da:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d53dc:	f1b8 0f00 	cmp.w	r8, #0
   d53e0:	d002      	beq.n	d53e8 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d53e2:	6840      	ldr	r0, [r0, #4]
   d53e4:	f003 f92a 	bl	d863c <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d53e8:	7a21      	ldrb	r1, [r4, #8]
   d53ea:	6860      	ldr	r0, [r4, #4]
   d53ec:	f003 f903 	bl	d85f6 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d53f0:	6860      	ldr	r0, [r4, #4]
   d53f2:	6803      	ldr	r3, [r0, #0]
   d53f4:	4639      	mov	r1, r7
   d53f6:	689b      	ldr	r3, [r3, #8]
   d53f8:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d53fa:	442e      	add	r6, r5
   d53fc:	42b5      	cmp	r5, r6
   d53fe:	6860      	ldr	r0, [r4, #4]
   d5400:	d005      	beq.n	d540e <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d5402:	6803      	ldr	r3, [r0, #0]
   d5404:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5408:	689b      	ldr	r3, [r3, #8]
   d540a:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d540c:	e7f6      	b.n	d53fc <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d540e:	2101      	movs	r1, #1
   d5410:	f003 f910 	bl	d8634 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d5414:	4603      	mov	r3, r0
   d5416:	b170      	cbz	r0, d5436 <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d5418:	4908      	ldr	r1, [pc, #32]	; (d543c <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d541a:	4809      	ldr	r0, [pc, #36]	; (d5440 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d541c:	463a      	mov	r2, r7
   d541e:	f7ff ff16 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d5422:	2500      	movs	r5, #0
    }

    if (lock) {
   d5424:	f1b8 0f00 	cmp.w	r8, #0
   d5428:	d002      	beq.n	d5430 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d542a:	6860      	ldr	r0, [r4, #4]
   d542c:	f003 f90f 	bl	d864e <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d5430:	4628      	mov	r0, r5
   d5432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d5436:	2501      	movs	r5, #1
   d5438:	e7f4      	b.n	d5424 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d543a:	bf00      	nop
   d543c:	000dbe4b 	.word	0x000dbe4b
   d5440:	2003e2f8 	.word	0x2003e2f8

000d5444 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d5444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5446:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d544a:	9300      	str	r3, [sp, #0]
   d544c:	f10d 020f 	add.w	r2, sp, #15
   d5450:	2301      	movs	r3, #1
   d5452:	f7ff ffbb 	bl	d53cc <_ZN6AB180514writeRegistersEhPKhjb>
}
   d5456:	b005      	add	sp, #20
   d5458:	f85d fb04 	ldr.w	pc, [sp], #4

000d545c <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d545e:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d5460:	460c      	mov	r4, r1
   d5462:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d5464:	491a      	ldr	r1, [pc, #104]	; (d54d0 <_ZN6AB18056setWDTEi+0x74>)
   d5466:	481b      	ldr	r0, [pc, #108]	; (d54d4 <_ZN6AB18056setWDTEi+0x78>)
   d5468:	f7fe fe7c 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d546c:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d546e:	bfb8      	it	lt
   d5470:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d5472:	b97c      	cbnz	r4, d5494 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d5474:	2301      	movs	r3, #1
   d5476:	4622      	mov	r2, r4
   d5478:	211b      	movs	r1, #27
   d547a:	4628      	mov	r0, r5
   d547c:	f7ff ffe2 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5480:	4915      	ldr	r1, [pc, #84]	; (d54d8 <_ZN6AB18056setWDTEi+0x7c>)
   d5482:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d5484:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d5486:	4813      	ldr	r0, [pc, #76]	; (d54d4 <_ZN6AB18056setWDTEi+0x78>)
   d5488:	f7ff feca 	bl	d5220 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d548c:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d548e:	616c      	str	r4, [r5, #20]
}
   d5490:	4630      	mov	r0, r6
   d5492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d5494:	2c03      	cmp	r4, #3
   d5496:	dd19      	ble.n	d54cc <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5498:	10a7      	asrs	r7, r4, #2
   d549a:	2f1f      	cmp	r7, #31
   d549c:	bfa8      	it	ge
   d549e:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d54a0:	00ba      	lsls	r2, r7, #2
   d54a2:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d54a6:	2301      	movs	r3, #1
   d54a8:	b2d2      	uxtb	r2, r2
   d54aa:	211b      	movs	r1, #27
   d54ac:	4628      	mov	r0, r5
   d54ae:	f7ff ffc9 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d54b2:	463a      	mov	r2, r7
   d54b4:	4603      	mov	r3, r0
   d54b6:	4909      	ldr	r1, [pc, #36]	; (d54dc <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d54b8:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d54ba:	4806      	ldr	r0, [pc, #24]	; (d54d4 <_ZN6AB18056setWDTEi+0x78>)
   d54bc:	f7ff feb0 	bl	d5220 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d54c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d54c4:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d54c6:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d54c8:	616f      	str	r7, [r5, #20]
   d54ca:	e7e1      	b.n	d5490 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d54cc:	2701      	movs	r7, #1
   d54ce:	e7e7      	b.n	d54a0 <_ZN6AB18056setWDTEi+0x44>
   d54d0:	000dbe70 	.word	0x000dbe70
   d54d4:	2003e2f8 	.word	0x2003e2f8
   d54d8:	000dbe7a 	.word	0x000dbe7a
   d54dc:	000dbe96 	.word	0x000dbe96

000d54e0 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d54e0:	460b      	mov	r3, r1
    if (instance) {
   d54e2:	4907      	ldr	r1, [pc, #28]	; (d5500 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d54e4:	4602      	mov	r2, r0
    if (instance) {
   d54e6:	6808      	ldr	r0, [r1, #0]
   d54e8:	b148      	cbz	r0, d54fe <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d54ea:	2b00      	cmp	r3, #0
   d54ec:	bf08      	it	eq
   d54ee:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d54f2:	d104      	bne.n	d54fe <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d54f4:	68c3      	ldr	r3, [r0, #12]
   d54f6:	b113      	cbz	r3, d54fe <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d54f8:	2100      	movs	r1, #0
   d54fa:	f7ff bfaf 	b.w	d545c <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d54fe:	4770      	bx	lr
   d5500:	2003e2fc 	.word	0x2003e2fc

000d5504 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d5504:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5508:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d550c:	4605      	mov	r5, r0
   d550e:	4616      	mov	r6, r2
   d5510:	461f      	mov	r7, r3
    if (lock) {
   d5512:	f1b8 0f00 	cmp.w	r8, #0
   d5516:	d004      	beq.n	d5522 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5518:	6840      	ldr	r0, [r0, #4]
   d551a:	9101      	str	r1, [sp, #4]
   d551c:	f003 f88e 	bl	d863c <_ZN7TwoWire4lockEv>
   d5520:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d5522:	9101      	str	r1, [sp, #4]
   d5524:	2300      	movs	r3, #0
   d5526:	f10d 020f 	add.w	r2, sp, #15
   d552a:	4628      	mov	r0, r5
   d552c:	f7ff ff08 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d5530:	4604      	mov	r4, r0
   d5532:	b160      	cbz	r0, d554e <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d5534:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d5538:	ea03 0206 	and.w	r2, r3, r6
   d553c:	433a      	orrs	r2, r7
        if (newValue != value) {
   d553e:	4293      	cmp	r3, r2
   d5540:	d005      	beq.n	d554e <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d5542:	9901      	ldr	r1, [sp, #4]
   d5544:	2300      	movs	r3, #0
   d5546:	4628      	mov	r0, r5
   d5548:	f7ff ff7c 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
   d554c:	4604      	mov	r4, r0
    if (lock) {
   d554e:	f1b8 0f00 	cmp.w	r8, #0
   d5552:	d002      	beq.n	d555a <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d5554:	6868      	ldr	r0, [r5, #4]
   d5556:	f003 f87a 	bl	d864e <_ZN7TwoWire6unlockEv>
}
   d555a:	4620      	mov	r0, r4
   d555c:	b004      	add	sp, #16
   d555e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5564 <_ZN6AB180511resetConfigEm>:
bool AB1805::resetConfig(uint32_t flags) {
   d5564:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5566:	4604      	mov	r4, r0
    _log.trace("resetConfig(0x%08lx)", flags);
   d5568:	460a      	mov	r2, r1
   d556a:	483f      	ldr	r0, [pc, #252]	; (d5668 <_ZN6AB180511resetConfigEm+0x104>)
bool AB1805::resetConfig(uint32_t flags) {
   d556c:	460d      	mov	r5, r1
    _log.trace("resetConfig(0x%08lx)", flags);
   d556e:	493f      	ldr	r1, [pc, #252]	; (d566c <_ZN6AB180511resetConfigEm+0x108>)
   d5570:	f7ff fe56 	bl	d5220 <_ZNK5spark6Logger5traceEPKcz>
    wire.lock();
   d5574:	6860      	ldr	r0, [r4, #4]
   d5576:	f003 f861 	bl	d863c <_ZN7TwoWire4lockEv>
    writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
   d557a:	2300      	movs	r3, #0
   d557c:	461a      	mov	r2, r3
   d557e:	210f      	movs	r1, #15
   d5580:	4620      	mov	r0, r4
   d5582:	f7ff ff5f 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
   d5586:	2300      	movs	r3, #0
   d5588:	2213      	movs	r2, #19
   d558a:	2110      	movs	r1, #16
   d558c:	4620      	mov	r0, r4
   d558e:	f7ff ff59 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
   d5592:	2300      	movs	r3, #0
   d5594:	223c      	movs	r2, #60	; 0x3c
   d5596:	2111      	movs	r1, #17
   d5598:	4620      	mov	r0, r4
   d559a:	f7ff ff53 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
   d559e:	2300      	movs	r3, #0
   d55a0:	22e0      	movs	r2, #224	; 0xe0
   d55a2:	2112      	movs	r1, #18
   d55a4:	4620      	mov	r0, r4
   d55a6:	f7ff ff4d 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
   d55aa:	2300      	movs	r3, #0
   d55ac:	2226      	movs	r2, #38	; 0x26
   d55ae:	2113      	movs	r1, #19
   d55b0:	4620      	mov	r0, r4
   d55b2:	f7ff ff47 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
   d55b6:	2300      	movs	r3, #0
   d55b8:	461a      	mov	r2, r3
   d55ba:	2117      	movs	r1, #23
   d55bc:	4620      	mov	r0, r4
   d55be:	f7ff ff41 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0) {
   d55c2:	f015 0301 	ands.w	r3, r5, #1
   d55c6:	d048      	beq.n	d565a <_ZN6AB180511resetConfigEm+0xf6>
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
   d55c8:	2300      	movs	r3, #0
   d55ca:	9300      	str	r3, [sp, #0]
   d55cc:	22e3      	movs	r2, #227	; 0xe3
   d55ce:	2323      	movs	r3, #35	; 0x23
   d55d0:	2118      	movs	r1, #24
   d55d2:	4620      	mov	r0, r4
   d55d4:	f7ff ff96 	bl	d5504 <_ZN6AB180512maskRegisterEhhhb>
    writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
   d55d8:	2300      	movs	r3, #0
   d55da:	461a      	mov	r2, r3
   d55dc:	2119      	movs	r1, #25
   d55de:	4620      	mov	r0, r4
   d55e0:	f7ff ff30 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
   d55e4:	2300      	movs	r3, #0
   d55e6:	461a      	mov	r2, r3
   d55e8:	211a      	movs	r1, #26
   d55ea:	4620      	mov	r0, r4
   d55ec:	f7ff ff2a 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
   d55f0:	2300      	movs	r3, #0
   d55f2:	461a      	mov	r2, r3
   d55f4:	211b      	movs	r1, #27
   d55f6:	4620      	mov	r0, r4
   d55f8:	f7ff ff24 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
   d55fc:	f015 0f02 	tst.w	r5, #2
    writeRegister(REG_OSC_CTRL, oscCtrl, false);
   d5600:	f04f 0300 	mov.w	r3, #0
   d5604:	bf0c      	ite	eq
   d5606:	461a      	moveq	r2, r3
   d5608:	2288      	movne	r2, #136	; 0x88
   d560a:	211c      	movs	r1, #28
   d560c:	4620      	mov	r0, r4
   d560e:	f7ff ff19 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
   d5612:	2300      	movs	r3, #0
   d5614:	461a      	mov	r2, r3
   d5616:	2120      	movs	r1, #32
   d5618:	4620      	mov	r0, r4
   d561a:	f7ff ff13 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
   d561e:	2300      	movs	r3, #0
   d5620:	22f0      	movs	r2, #240	; 0xf0
   d5622:	2121      	movs	r1, #33	; 0x21
   d5624:	4620      	mov	r0, r4
   d5626:	f7ff ff0d 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
   d562a:	2300      	movs	r3, #0
   d562c:	461a      	mov	r2, r3
   d562e:	2126      	movs	r1, #38	; 0x26
   d5630:	4620      	mov	r0, r4
   d5632:	f7ff ff07 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
   d5636:	2300      	movs	r3, #0
   d5638:	2280      	movs	r2, #128	; 0x80
   d563a:	2127      	movs	r1, #39	; 0x27
   d563c:	4620      	mov	r0, r4
   d563e:	f7ff ff01 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
   d5642:	2300      	movs	r3, #0
   d5644:	461a      	mov	r2, r3
   d5646:	2130      	movs	r1, #48	; 0x30
   d5648:	4620      	mov	r0, r4
   d564a:	f7ff fefb 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
    wire.unlock();
   d564e:	6860      	ldr	r0, [r4, #4]
   d5650:	f002 fffd 	bl	d864e <_ZN7TwoWire6unlockEv>
}
   d5654:	2001      	movs	r0, #1
   d5656:	b003      	add	sp, #12
   d5658:	bd30      	pop	{r4, r5, pc}
        writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
   d565a:	2223      	movs	r2, #35	; 0x23
   d565c:	2118      	movs	r1, #24
   d565e:	4620      	mov	r0, r4
   d5660:	f7ff fef0 	bl	d5444 <_ZN6AB180513writeRegisterEhhb>
   d5664:	e7b8      	b.n	d55d8 <_ZN6AB180511resetConfigEm+0x74>
   d5666:	bf00      	nop
   d5668:	2003e2f8 	.word	0x2003e2f8
   d566c:	000dbeba 	.word	0x000dbeba

000d5670 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5670:	b513      	push	{r0, r1, r4, lr}
   d5672:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5674:	f10d 0207 	add.w	r2, sp, #7
   d5678:	f7ff fe62 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d567c:	b128      	cbz	r0, d568a <_ZN6AB180510isBitClearEhhb+0x1a>
   d567e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5682:	421c      	tst	r4, r3
   d5684:	bf0c      	ite	eq
   d5686:	2001      	moveq	r0, #1
   d5688:	2000      	movne	r0, #0
}
   d568a:	b002      	add	sp, #8
   d568c:	bd10      	pop	{r4, pc}

000d568e <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d568e:	b513      	push	{r0, r1, r4, lr}
   d5690:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d5692:	f10d 0207 	add.w	r2, sp, #7
   d5696:	f7ff fe53 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d569a:	b128      	cbz	r0, d56a8 <_ZN6AB18058isBitSetEhhb+0x1a>
   d569c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d56a0:	421c      	tst	r4, r3
   d56a2:	bf14      	ite	ne
   d56a4:	2001      	movne	r0, #1
   d56a6:	2000      	moveq	r0, #0
}
   d56a8:	b002      	add	sp, #8
   d56aa:	bd10      	pop	{r4, pc}

000d56ac <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d56ac:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d56ae:	43d2      	mvns	r2, r2
   d56b0:	9300      	str	r3, [sp, #0]
   d56b2:	b2d2      	uxtb	r2, r2
   d56b4:	2300      	movs	r3, #0
   d56b6:	f7ff ff25 	bl	d5504 <_ZN6AB180512maskRegisterEhhhb>
}
   d56ba:	b003      	add	sp, #12
   d56bc:	f85d fb04 	ldr.w	pc, [sp], #4

000d56c0 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d56c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d56c2:	2301      	movs	r3, #1
   d56c4:	f10d 0207 	add.w	r2, sp, #7
   d56c8:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d56ca:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d56cc:	f7ff fe38 	bl	d5340 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d56d0:	4605      	mov	r5, r0
   d56d2:	b938      	cbnz	r0, d56e4 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d56d4:	491e      	ldr	r1, [pc, #120]	; (d5750 <_ZN6AB180516updateWakeReasonEv+0x90>)
   d56d6:	481f      	ldr	r0, [pc, #124]	; (d5754 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d56d8:	22ad      	movs	r2, #173	; 0xad
   d56da:	f7ff fdb8 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
}
   d56de:	4628      	mov	r0, r5
   d56e0:	b003      	add	sp, #12
   d56e2:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d56e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d56e8:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d56ec:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d56f0:	d00b      	beq.n	d570a <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d56f2:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d56f4:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d56f6:	210f      	movs	r1, #15
   d56f8:	4620      	mov	r0, r4
   d56fa:	f7ff ffd7 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d56fe:	4a16      	ldr	r2, [pc, #88]	; (d5758 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d5700:	4916      	ldr	r1, [pc, #88]	; (d575c <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d5702:	4814      	ldr	r0, [pc, #80]	; (d5754 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5704:	f7fe fd2e 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5708:	e7e9      	b.n	d56de <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d570a:	2208      	movs	r2, #8
   d570c:	2117      	movs	r1, #23
   d570e:	4620      	mov	r0, r4
   d5710:	f7ff ffbd 	bl	d568e <_ZN6AB18058isBitSetEhhb>
   d5714:	b118      	cbz	r0, d571e <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5716:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5718:	4a11      	ldr	r2, [pc, #68]	; (d5760 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d571a:	61e3      	str	r3, [r4, #28]
   d571c:	e7f0      	b.n	d5700 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d571e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5722:	071a      	lsls	r2, r3, #28
   d5724:	d509      	bpl.n	d573a <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5726:	2303      	movs	r3, #3
   d5728:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d572a:	2208      	movs	r2, #8
   d572c:	2301      	movs	r3, #1
   d572e:	210f      	movs	r1, #15
   d5730:	4620      	mov	r0, r4
   d5732:	f7ff ffbb 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d5736:	4a0b      	ldr	r2, [pc, #44]	; (d5764 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d5738:	e7e2      	b.n	d5700 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d573a:	075b      	lsls	r3, r3, #29
   d573c:	d5cf      	bpl.n	d56de <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d573e:	2204      	movs	r2, #4
   d5740:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d5742:	2301      	movs	r3, #1
   d5744:	210f      	movs	r1, #15
   d5746:	4620      	mov	r0, r4
   d5748:	f7ff ffb0 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d574c:	4a06      	ldr	r2, [pc, #24]	; (d5768 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d574e:	e7d7      	b.n	d5700 <_ZN6AB180516updateWakeReasonEv+0x40>
   d5750:	000dbefe 	.word	0x000dbefe
   d5754:	2003e2f8 	.word	0x2003e2f8
   d5758:	000dbecf 	.word	0x000dbecf
   d575c:	000dbf1d 	.word	0x000dbf1d
   d5760:	000dbed8 	.word	0x000dbed8
   d5764:	000dbee8 	.word	0x000dbee8
   d5768:	000dbef8 	.word	0x000dbef8

000d576c <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d576c:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d576e:	9300      	str	r3, [sp, #0]
   d5770:	4613      	mov	r3, r2
   d5772:	22ff      	movs	r2, #255	; 0xff
   d5774:	f7ff fec6 	bl	d5504 <_ZN6AB180512maskRegisterEhhhb>
}
   d5778:	b003      	add	sp, #12
   d577a:	f85d fb04 	ldr.w	pc, [sp], #4

000d577e <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d577e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5782:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5786:	4605      	mov	r5, r0
   d5788:	460c      	mov	r4, r1
   d578a:	4691      	mov	r9, r2
   d578c:	461f      	mov	r7, r3
    if (lock) {
   d578e:	f1ba 0f00 	cmp.w	sl, #0
   d5792:	d002      	beq.n	d579a <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5794:	6840      	ldr	r0, [r0, #4]
   d5796:	f002 ff51 	bl	d863c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d579a:	b307      	cbz	r7, d57de <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d579c:	2f20      	cmp	r7, #32
   d579e:	463e      	mov	r6, r7
   d57a0:	bf28      	it	cs
   d57a2:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d57a4:	2c7f      	cmp	r4, #127	; 0x7f
   d57a6:	d826      	bhi.n	d57f6 <_ZN6AB18057readRamEjPhjb+0x78>
   d57a8:	1933      	adds	r3, r6, r4
   d57aa:	2b80      	cmp	r3, #128	; 0x80
   d57ac:	d901      	bls.n	d57b2 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d57ae:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d57b2:	2301      	movs	r3, #1
   d57b4:	2204      	movs	r2, #4
   d57b6:	213f      	movs	r1, #63	; 0x3f
   d57b8:	4628      	mov	r0, r5
   d57ba:	f7ff ff77 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d57be:	2300      	movs	r3, #0
   d57c0:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d57c4:	9300      	str	r3, [sp, #0]
   d57c6:	464a      	mov	r2, r9
   d57c8:	4633      	mov	r3, r6
   d57ca:	b2c9      	uxtb	r1, r1
   d57cc:	4628      	mov	r0, r5
   d57ce:	f7ff fd69 	bl	d52a4 <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d57d2:	4680      	mov	r8, r0
   d57d4:	b128      	cbz	r0, d57e2 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d57d6:	4434      	add	r4, r6
        dataLen -= count;
   d57d8:	1bbf      	subs	r7, r7, r6
        data += count;
   d57da:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d57dc:	e7dd      	b.n	d579a <_ZN6AB18057readRamEjPhjb+0x1c>
   d57de:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d57e2:	f1ba 0f00 	cmp.w	sl, #0
   d57e6:	d002      	beq.n	d57ee <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d57e8:	6868      	ldr	r0, [r5, #4]
   d57ea:	f002 ff30 	bl	d864e <_ZN7TwoWire6unlockEv>
}
   d57ee:	4640      	mov	r0, r8
   d57f0:	b002      	add	sp, #8
   d57f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d57f6:	2301      	movs	r3, #1
   d57f8:	2204      	movs	r2, #4
   d57fa:	213f      	movs	r1, #63	; 0x3f
   d57fc:	4628      	mov	r0, r5
   d57fe:	f7ff ffb5 	bl	d576c <_ZN6AB180514setRegisterBitEhhb>
   d5802:	e7dc      	b.n	d57be <_ZN6AB18057readRamEjPhjb+0x40>

000d5804 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d5804:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5808:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d580c:	4605      	mov	r5, r0
   d580e:	460c      	mov	r4, r1
   d5810:	4691      	mov	r9, r2
   d5812:	461f      	mov	r7, r3
    if (lock) {
   d5814:	f1ba 0f00 	cmp.w	sl, #0
   d5818:	d002      	beq.n	d5820 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d581a:	6840      	ldr	r0, [r0, #4]
   d581c:	f002 ff0e 	bl	d863c <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5820:	b307      	cbz	r7, d5864 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d5822:	2f1f      	cmp	r7, #31
   d5824:	463e      	mov	r6, r7
   d5826:	bf28      	it	cs
   d5828:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d582a:	2c7f      	cmp	r4, #127	; 0x7f
   d582c:	d826      	bhi.n	d587c <_ZN6AB18058writeRamEjPKhjb+0x78>
   d582e:	1933      	adds	r3, r6, r4
   d5830:	2b80      	cmp	r3, #128	; 0x80
   d5832:	d901      	bls.n	d5838 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d5834:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5838:	2301      	movs	r3, #1
   d583a:	2204      	movs	r2, #4
   d583c:	213f      	movs	r1, #63	; 0x3f
   d583e:	4628      	mov	r0, r5
   d5840:	f7ff ff34 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d5844:	2300      	movs	r3, #0
   d5846:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d584a:	9300      	str	r3, [sp, #0]
   d584c:	464a      	mov	r2, r9
   d584e:	4633      	mov	r3, r6
   d5850:	b2c9      	uxtb	r1, r1
   d5852:	4628      	mov	r0, r5
   d5854:	f7ff fdba 	bl	d53cc <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d5858:	4680      	mov	r8, r0
   d585a:	b128      	cbz	r0, d5868 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d585c:	4434      	add	r4, r6
        dataLen -= count;
   d585e:	1bbf      	subs	r7, r7, r6
        data += count;
   d5860:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5862:	e7dd      	b.n	d5820 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d5864:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d5868:	f1ba 0f00 	cmp.w	sl, #0
   d586c:	d002      	beq.n	d5874 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d586e:	6868      	ldr	r0, [r5, #4]
   d5870:	f002 feed 	bl	d864e <_ZN7TwoWire6unlockEv>
}
   d5874:	4640      	mov	r0, r8
   d5876:	b002      	add	sp, #8
   d5878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d587c:	2301      	movs	r3, #1
   d587e:	2204      	movs	r2, #4
   d5880:	213f      	movs	r1, #63	; 0x3f
   d5882:	4628      	mov	r0, r5
   d5884:	f7ff ff72 	bl	d576c <_ZN6AB180514setRegisterBitEhhb>
   d5888:	e7dc      	b.n	d5844 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d588c <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d588c:	b530      	push	{r4, r5, lr}
   d588e:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d5890:	680d      	ldr	r5, [r1, #0]
   d5892:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d5896:	9503      	str	r5, [sp, #12]
   d5898:	684d      	ldr	r5, [r1, #4]
   d589a:	9502      	str	r5, [sp, #8]
   d589c:	688d      	ldr	r5, [r1, #8]
   d589e:	9501      	str	r5, [sp, #4]
   d58a0:	68c9      	ldr	r1, [r1, #12]
   d58a2:	9100      	str	r1, [sp, #0]
   d58a4:	3301      	adds	r3, #1
   d58a6:	4904      	ldr	r1, [pc, #16]	; (d58b8 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d58a8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d58ac:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d58ae:	f004 fc4f 	bl	da150 <_ZN6String6formatEPKcz>
}
   d58b2:	4620      	mov	r0, r4
   d58b4:	b005      	add	sp, #20
   d58b6:	bd30      	pop	{r4, r5, pc}
   d58b8:	000dbf2e 	.word	0x000dbf2e

000d58bc <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d58bc:	1103      	asrs	r3, r0, #4
}
   d58be:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d58c0:	f000 000f 	and.w	r0, r0, #15
}
   d58c4:	fb02 0003 	mla	r0, r2, r3, r0
   d58c8:	4770      	bx	lr

000d58ca <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d58ca:	b538      	push	{r3, r4, r5, lr}
   d58cc:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d58ce:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d58d0:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d58d2:	f7ff fff3 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58d6:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d58d8:	7860      	ldrb	r0, [r4, #1]
   d58da:	f7ff ffef 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58de:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d58e0:	78a0      	ldrb	r0, [r4, #2]
   d58e2:	f7ff ffeb 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58e6:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d58e8:	78e0      	ldrb	r0, [r4, #3]
   d58ea:	f7ff ffe7 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58ee:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d58f0:	7920      	ldrb	r0, [r4, #4]
   d58f2:	f7ff ffe3 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d58f6:	3801      	subs	r0, #1
   d58f8:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d58fa:	b92d      	cbnz	r5, d5908 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d58fc:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d58fe:	7828      	ldrb	r0, [r5, #0]
   d5900:	f7ff ffdc 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d5904:	6188      	str	r0, [r1, #24]
}
   d5906:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d5908:	7960      	ldrb	r0, [r4, #5]
   d590a:	f7ff ffd7 	bl	d58bc <_ZN6AB180510bcdToValueEh>
   d590e:	3064      	adds	r0, #100	; 0x64
   d5910:	1da5      	adds	r5, r4, #6
   d5912:	6148      	str	r0, [r1, #20]
   d5914:	e7f3      	b.n	d58fe <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d5918 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5918:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d591a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d591c:	b088      	sub	sp, #32
   d591e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5920:	461a      	mov	r2, r3
   d5922:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5924:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5926:	f7ff fea3 	bl	d5670 <_ZN6AB180510isBitClearEhhb>
   d592a:	b1f0      	cbz	r0, d596a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d592c:	2308      	movs	r3, #8
   d592e:	2601      	movs	r6, #1
   d5930:	4620      	mov	r0, r4
   d5932:	9600      	str	r6, [sp, #0]
   d5934:	eb0d 0203 	add.w	r2, sp, r3
   d5938:	2100      	movs	r1, #0
   d593a:	f7ff fcb3 	bl	d52a4 <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d593e:	4604      	mov	r4, r0
   d5940:	b198      	cbz	r0, d596a <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d5942:	4632      	mov	r2, r6
   d5944:	4629      	mov	r1, r5
   d5946:	f10d 0009 	add.w	r0, sp, #9
   d594a:	f7ff ffbe 	bl	d58ca <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d594e:	a804      	add	r0, sp, #16
   d5950:	f7ff ff9c 	bl	d588c <_ZN6AB180510tmToStringEPK2tm>
   d5954:	4808      	ldr	r0, [pc, #32]	; (d5978 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d5956:	9a04      	ldr	r2, [sp, #16]
   d5958:	4908      	ldr	r1, [pc, #32]	; (d597c <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d595a:	f7fe fc03 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d595e:	a804      	add	r0, sp, #16
   d5960:	f004 fb42 	bl	d9fe8 <_ZN6StringD1Ev>
}
   d5964:	4620      	mov	r0, r4
   d5966:	b008      	add	sp, #32
   d5968:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d596a:	2224      	movs	r2, #36	; 0x24
   d596c:	2100      	movs	r1, #0
   d596e:	4628      	mov	r0, r5
   d5970:	f005 fd7a 	bl	db468 <memset>
   d5974:	2400      	movs	r4, #0
   d5976:	e7f5      	b.n	d5964 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d5978:	2003e2f8 	.word	0x2003e2f8
   d597c:	000dbf4c 	.word	0x000dbf4c

000d5980 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d5980:	b530      	push	{r4, r5, lr}
   d5982:	b08b      	sub	sp, #44	; 0x2c
   d5984:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d5986:	a901      	add	r1, sp, #4
   d5988:	f7ff ffc6 	bl	d5918 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d598c:	4604      	mov	r4, r0
   d598e:	b120      	cbz	r0, d599a <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d5990:	a801      	add	r0, sp, #4
   d5992:	f002 f8a5 	bl	d7ae0 <mktime>
   d5996:	e9c5 0100 	strd	r0, r1, [r5]
}
   d599a:	4620      	mov	r0, r4
   d599c:	b00b      	add	sp, #44	; 0x2c
   d599e:	bd30      	pop	{r4, r5, pc}

000d59a0 <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d59a0:	b510      	push	{r4, lr}
   d59a2:	4604      	mov	r4, r0
   d59a4:	b088      	sub	sp, #32
    if (callBegin) {
   d59a6:	b111      	cbz	r1, d59ae <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d59a8:	6840      	ldr	r0, [r0, #4]
   d59aa:	f002 fdf5 	bl	d8598 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d59ae:	4620      	mov	r0, r4
   d59b0:	f7ff fcce 	bl	d5350 <_ZN6AB180510detectChipEv>
   d59b4:	b370      	cbz	r0, d5a14 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d59b6:	4620      	mov	r0, r4
   d59b8:	f7ff fe82 	bl	d56c0 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d59bc:	2301      	movs	r3, #1
   d59be:	461a      	mov	r2, r3
   d59c0:	2110      	movs	r1, #16
   d59c2:	4620      	mov	r0, r4
   d59c4:	f7ff fe54 	bl	d5670 <_ZN6AB180510isBitClearEhhb>
   d59c8:	b1d8      	cbz	r0, d5a02 <_ZN6AB18055setupEb+0x62>
   d59ca:	f004 fd9b 	bl	da504 <_ZN9TimeClass7isValidEv>
   d59ce:	b9c0      	cbnz	r0, d5a02 <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d59d0:	a902      	add	r1, sp, #8
   d59d2:	4620      	mov	r0, r4
   d59d4:	f7ff ffd4 	bl	d5980 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d59d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d59dc:	f004 fc99 	bl	da312 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d59e0:	4b0f      	ldr	r3, [pc, #60]	; (d5a20 <_ZN6AB18055setupEb+0x80>)
   d59e2:	4910      	ldr	r1, [pc, #64]	; (d5a24 <_ZN6AB18055setupEb+0x84>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	9300      	str	r3, [sp, #0]
   d59e8:	a804      	add	r0, sp, #16
   d59ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d59ee:	f004 fd47 	bl	da480 <_ZN9TimeClass6formatExPKc>
   d59f2:	480d      	ldr	r0, [pc, #52]	; (d5a28 <_ZN6AB18055setupEb+0x88>)
   d59f4:	9a04      	ldr	r2, [sp, #16]
   d59f6:	490d      	ldr	r1, [pc, #52]	; (d5a2c <_ZN6AB18055setupEb+0x8c>)
   d59f8:	f7fe fbb4 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d59fc:	a804      	add	r0, sp, #16
   d59fe:	f004 faf3 	bl	d9fe8 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d5a02:	4a0b      	ldr	r2, [pc, #44]	; (d5a30 <_ZN6AB18055setupEb+0x90>)
   d5a04:	2300      	movs	r3, #0
   d5a06:	2100      	movs	r1, #0
   d5a08:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d5a0c:	f001 ff20 	bl	d7850 <system_subscribe_event>
}
   d5a10:	b008      	add	sp, #32
   d5a12:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d5a14:	4907      	ldr	r1, [pc, #28]	; (d5a34 <_ZN6AB18055setupEb+0x94>)
   d5a16:	4804      	ldr	r0, [pc, #16]	; (d5a28 <_ZN6AB18055setupEb+0x88>)
   d5a18:	f7ff fc19 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
   d5a1c:	e7f1      	b.n	d5a02 <_ZN6AB18055setupEb+0x62>
   d5a1e:	bf00      	nop
   d5a20:	2003de24 	.word	0x2003de24
   d5a24:	2003e5c8 	.word	0x2003e5c8
   d5a28:	2003e2f8 	.word	0x2003e2f8
   d5a2c:	000dbf5a 	.word	0x000dbf5a
   d5a30:	000d54e1 	.word	0x000d54e1
   d5a34:	000dbf77 	.word	0x000dbf77

000d5a38 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   d5a38:	220a      	movs	r2, #10
   d5a3a:	fb90 f3f2 	sdiv	r3, r0, r2
    int ones = value % 10;
   d5a3e:	fb02 0013 	mls	r0, r2, r3, r0
    int tens = (value / 10) % 10;
   d5a42:	fb93 f1f2 	sdiv	r1, r3, r2
   d5a46:	fb02 3111 	mls	r1, r2, r1, r3
    return (uint8_t) ((tens << 4) | ones);
   d5a4a:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
}
   d5a4e:	b2c0      	uxtb	r0, r0
   d5a50:	4770      	bx	lr

000d5a52 <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5a52:	b570      	push	{r4, r5, r6, lr}
   d5a54:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   d5a56:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   d5a58:	460c      	mov	r4, r1
   d5a5a:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   d5a5c:	f7ff ffec 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a60:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   d5a62:	6868      	ldr	r0, [r5, #4]
   d5a64:	f7ff ffe8 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a68:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   d5a6a:	68a8      	ldr	r0, [r5, #8]
   d5a6c:	f7ff ffe4 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a70:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   d5a72:	68e8      	ldr	r0, [r5, #12]
   d5a74:	f7ff ffe0 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a78:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5a7a:	6928      	ldr	r0, [r5, #16]
   d5a7c:	3001      	adds	r0, #1
   d5a7e:	f7ff ffdb 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a82:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   d5a84:	b92e      	cbnz	r6, d5a92 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   d5a86:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   d5a88:	69a8      	ldr	r0, [r5, #24]
   d5a8a:	f7ff ffd5 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5a8e:	7030      	strb	r0, [r6, #0]
}
   d5a90:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   d5a92:	696a      	ldr	r2, [r5, #20]
   d5a94:	2364      	movs	r3, #100	; 0x64
   d5a96:	fb92 f0f3 	sdiv	r0, r2, r3
   d5a9a:	fb03 2010 	mls	r0, r3, r0, r2
   d5a9e:	f7ff ffcb 	bl	d5a38 <_ZN6AB180510valueToBcdEi>
   d5aa2:	1da6      	adds	r6, r4, #6
   d5aa4:	7160      	strb	r0, [r4, #5]
   d5aa6:	e7ef      	b.n	d5a88 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000d5aa8 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d5aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5aaa:	b087      	sub	sp, #28
   d5aac:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d5aae:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   d5ab0:	4616      	mov	r6, r2
   d5ab2:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   d5ab4:	f7ff feea 	bl	d588c <_ZN6AB180510tmToStringEPK2tm>
   d5ab8:	481e      	ldr	r0, [pc, #120]	; (d5b34 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d5aba:	9a02      	ldr	r2, [sp, #8]
   d5abc:	491e      	ldr	r1, [pc, #120]	; (d5b38 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   d5abe:	f7fe fb51 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5ac2:	a802      	add	r0, sp, #8
   d5ac4:	f004 fa90 	bl	d9fe8 <_ZN6StringD1Ev>
    if (lock) {
   d5ac8:	b116      	cbz	r6, d5ad0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   d5aca:	6868      	ldr	r0, [r5, #4]
   d5acc:	f002 fdb6 	bl	d863c <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	2201      	movs	r2, #1
   d5ad4:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   d5ad8:	2700      	movs	r7, #0
   d5ada:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   d5ade:	f7ff ffb8 	bl	d5a52 <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d5ae2:	2301      	movs	r3, #1
   d5ae4:	461a      	mov	r2, r3
   d5ae6:	2110      	movs	r1, #16
   d5ae8:	4628      	mov	r0, r5
   d5aea:	f7ff fe3f 	bl	d576c <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   d5aee:	4604      	mov	r4, r0
   d5af0:	b1e8      	cbz	r0, d5b2e <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   d5af2:	2308      	movs	r3, #8
   d5af4:	9700      	str	r7, [sp, #0]
   d5af6:	eb0d 0203 	add.w	r2, sp, r3
   d5afa:	4639      	mov	r1, r7
   d5afc:	4628      	mov	r0, r5
   d5afe:	f7ff fc65 	bl	d53cc <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   d5b02:	4604      	mov	r4, r0
   d5b04:	b160      	cbz	r0, d5b20 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   d5b06:	2301      	movs	r3, #1
   d5b08:	461a      	mov	r2, r3
   d5b0a:	2110      	movs	r1, #16
   d5b0c:	4628      	mov	r0, r5
   d5b0e:	f7ff fdcd 	bl	d56ac <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   d5b12:	b116      	cbz	r6, d5b1a <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   d5b14:	6868      	ldr	r0, [r5, #4]
   d5b16:	f002 fd9a 	bl	d864e <_ZN7TwoWire6unlockEv>
}
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	b007      	add	sp, #28
   d5b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   d5b20:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   d5b24:	4905      	ldr	r1, [pc, #20]	; (d5b3c <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   d5b26:	4803      	ldr	r0, [pc, #12]	; (d5b34 <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   d5b28:	f7ff fb91 	bl	d524e <_ZNK5spark6Logger5errorEPKcz>
   d5b2c:	e7f1      	b.n	d5b12 <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   d5b2e:	f44f 728f 	mov.w	r2, #286	; 0x11e
   d5b32:	e7f7      	b.n	d5b24 <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   d5b34:	2003e2f8 	.word	0x2003e2f8
   d5b38:	000dbf8f 	.word	0x000dbf8f
   d5b3c:	000dbf9d 	.word	0x000dbf9d

000d5b40 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d5b40:	b513      	push	{r0, r1, r4, lr}
   d5b42:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   d5b44:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   d5b46:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   d5b4a:	f005 fc53 	bl	db3f4 <gmtime>
    return setRtcFromTm(tm, lock);
   d5b4e:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   d5b52:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   d5b54:	4620      	mov	r0, r4
   d5b56:	f7ff ffa7 	bl	d5aa8 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   d5b5a:	b002      	add	sp, #8
   d5b5c:	bd10      	pop	{r4, pc}
	...

000d5b60 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   d5b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5b62:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   d5b64:	b089      	sub	sp, #36	; 0x24
   d5b66:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   d5b68:	bb75      	cbnz	r5, d5bc8 <_ZN6AB18054loopEv+0x68>
   d5b6a:	f004 fccb 	bl	da504 <_ZN9TimeClass7isValidEv>
   d5b6e:	b358      	cbz	r0, d5bc8 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   d5b70:	2600      	movs	r6, #0
   d5b72:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   d5b74:	a904      	add	r1, sp, #16
   d5b76:	4628      	mov	r0, r5
        tm = 0;
   d5b78:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   d5b7c:	f001 fee0 	bl	d7940 <spark_sync_time_last>
   d5b80:	b310      	cbz	r0, d5bc8 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   d5b82:	2501      	movs	r5, #1
   d5b84:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   d5b86:	f004 fcda 	bl	da53e <_ZN9TimeClass3nowEv>
        setRtcFromTime(time);
   d5b8a:	9500      	str	r5, [sp, #0]
        time_t time = Time.now();
   d5b8c:	4602      	mov	r2, r0
   d5b8e:	17c3      	asrs	r3, r0, #31
        setRtcFromTime(time);
   d5b90:	4620      	mov	r0, r4
        time_t time = Time.now();
   d5b92:	e9cd 2302 	strd	r2, r3, [sp, #8]
        setRtcFromTime(time);
   d5b96:	f7ff ffd3 	bl	d5b40 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   d5b9a:	a902      	add	r1, sp, #8
   d5b9c:	4620      	mov	r0, r4
        time = 0;
   d5b9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   d5ba2:	f7ff feed 	bl	d5980 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d5ba6:	4b12      	ldr	r3, [pc, #72]	; (d5bf0 <_ZN6AB18054loopEv+0x90>)
   d5ba8:	4912      	ldr	r1, [pc, #72]	; (d5bf4 <_ZN6AB18054loopEv+0x94>)
   d5baa:	681b      	ldr	r3, [r3, #0]
   d5bac:	9300      	str	r3, [sp, #0]
   d5bae:	a804      	add	r0, sp, #16
   d5bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5bb4:	f004 fc64 	bl	da480 <_ZN9TimeClass6formatExPKc>
   d5bb8:	480f      	ldr	r0, [pc, #60]	; (d5bf8 <_ZN6AB18054loopEv+0x98>)
   d5bba:	9a04      	ldr	r2, [sp, #16]
   d5bbc:	490f      	ldr	r1, [pc, #60]	; (d5bfc <_ZN6AB18054loopEv+0x9c>)
   d5bbe:	f7fe fad1 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
   d5bc2:	a804      	add	r0, sp, #16
   d5bc4:	f004 fa10 	bl	d9fe8 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   d5bc8:	6963      	ldr	r3, [r4, #20]
   d5bca:	b173      	cbz	r3, d5bea <_ZN6AB18054loopEv+0x8a>
   d5bcc:	f001 fc3e 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   d5bd0:	6923      	ldr	r3, [r4, #16]
   d5bd2:	1ac0      	subs	r0, r0, r3
   d5bd4:	6963      	ldr	r3, [r4, #20]
   d5bd6:	4298      	cmp	r0, r3
   d5bd8:	d307      	bcc.n	d5bea <_ZN6AB18054loopEv+0x8a>
   d5bda:	f001 fc37 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   d5bde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   d5be2:	6120      	str	r0, [r4, #16]
            setWDT();
   d5be4:	4620      	mov	r0, r4
   d5be6:	f7ff fc39 	bl	d545c <_ZN6AB18056setWDTEi>
}
   d5bea:	b009      	add	sp, #36	; 0x24
   d5bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5bee:	bf00      	nop
   d5bf0:	2003de24 	.word	0x2003de24
   d5bf4:	2003e5c8 	.word	0x2003e5c8
   d5bf8:	2003e2f8 	.word	0x2003e2f8
   d5bfc:	000dbfb8 	.word	0x000dbfb8

000d5c00 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d5c00:	4b01      	ldr	r3, [pc, #4]	; (d5c08 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d5c02:	4a02      	ldr	r2, [pc, #8]	; (d5c0c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d5c04:	601a      	str	r2, [r3, #0]
}
   d5c06:	4770      	bx	lr
   d5c08:	2003e2f8 	.word	0x2003e2f8
   d5c0c:	000dbfce 	.word	0x000dbfce

000d5c10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c10:	680b      	ldr	r3, [r1, #0]
   d5c12:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   d5c14:	684b      	ldr	r3, [r1, #4]
   d5c16:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   d5c18:	b113      	cbz	r3, d5c20 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   d5c1a:	685a      	ldr	r2, [r3, #4]
   d5c1c:	3201      	adds	r2, #1
   d5c1e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c20:	4770      	bx	lr

000d5c22 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d5c24:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5c26:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5c28:	4668      	mov	r0, sp
   d5c2a:	f7ff fff1 	bl	d5c10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   d5c2e:	466a      	mov	r2, sp
   d5c30:	4629      	mov	r1, r5
   d5c32:	4620      	mov	r0, r4
   d5c34:	f002 feae 	bl	d8994 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d5c38:	a801      	add	r0, sp, #4
   d5c3a:	f7fe ff9f 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c3e:	4620      	mov	r0, r4
   d5c40:	b003      	add	sp, #12
   d5c42:	bd30      	pop	{r4, r5, pc}

000d5c44 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d5c46:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5c48:	4604      	mov	r4, r0
   d5c4a:	4668      	mov	r0, sp
   d5c4c:	f7ff ffe0 	bl	d5c10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   d5c50:	466a      	mov	r2, sp
   d5c52:	4629      	mov	r1, r5
   d5c54:	4620      	mov	r0, r4
   d5c56:	f002 fe79 	bl	d894c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d5c5a:	a801      	add	r0, sp, #4
   d5c5c:	f7fe ff8e 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c60:	4620      	mov	r0, r4
   d5c62:	b003      	add	sp, #12
   d5c64:	bd30      	pop	{r4, r5, pc}

000d5c66 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d5c68:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5c6a:	4604      	mov	r4, r0
   d5c6c:	4668      	mov	r0, sp
   d5c6e:	f7ff ffcf 	bl	d5c10 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   d5c72:	466a      	mov	r2, sp
   d5c74:	4629      	mov	r1, r5
   d5c76:	4620      	mov	r0, r4
   d5c78:	f002 fe11 	bl	d889e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   d5c7c:	a801      	add	r0, sp, #4
   d5c7e:	f7fe ff7d 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c82:	4620      	mov	r0, r4
   d5c84:	b003      	add	sp, #12
   d5c86:	bd30      	pop	{r4, r5, pc}

000d5c88 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5c88:	4770      	bx	lr

000d5c8a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5c8a:	b510      	push	{r4, lr}
}
   d5c8c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5c8e:	4604      	mov	r4, r0
}
   d5c90:	f004 ff3c 	bl	dab0c <_ZdlPvj>
   d5c94:	4620      	mov	r0, r4
   d5c96:	bd10      	pop	{r4, pc}

000d5c98 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5c98:	6803      	ldr	r3, [r0, #0]
   d5c9a:	b2c9      	uxtb	r1, r1
   d5c9c:	689b      	ldr	r3, [r3, #8]
   d5c9e:	4718      	bx	r3

000d5ca0 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5ca0:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5ca2:	4d03      	ldr	r5, [pc, #12]	; (d5cb0 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5ca4:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5ca8:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5cac:	bd30      	pop	{r4, r5, pc}
   d5cae:	bf00      	nop
   d5cb0:	000dc028 	.word	0x000dc028

000d5cb4 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5cb4:	6840      	ldr	r0, [r0, #4]
   d5cb6:	f002 bc6f 	b.w	d8598 <_ZN7TwoWire5beginEv>

000d5cba <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5cba:	b510      	push	{r4, lr}
   d5cbc:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5cbe:	6800      	ldr	r0, [r0, #0]
   d5cc0:	f002 fcc5 	bl	d864e <_ZN7TwoWire6unlockEv>
   d5cc4:	4620      	mov	r0, r4
   d5cc6:	bd10      	pop	{r4, pc}

000d5cc8 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ccc:	b08a      	sub	sp, #40	; 0x28
   d5cce:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5cd0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5cd2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5cd4:	f002 fcb2 	bl	d863c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5cd8:	221e      	movs	r2, #30
   d5cda:	2100      	movs	r1, #0
   d5cdc:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5cde:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5ce0:	f005 fbc2 	bl	db468 <memset>
		size_t framAddr = 0;
   d5ce4:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5ce6:	b1ef      	cbz	r7, d5d24 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5ce8:	6823      	ldr	r3, [r4, #0]
   d5cea:	2f1e      	cmp	r7, #30
   d5cec:	46b8      	mov	r8, r7
   d5cee:	bf28      	it	cs
   d5cf0:	f04f 081e 	movcs.w	r8, #30
   d5cf4:	68dd      	ldr	r5, [r3, #12]
   d5cf6:	aa02      	add	r2, sp, #8
   d5cf8:	4643      	mov	r3, r8
   d5cfa:	4631      	mov	r1, r6
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	47a8      	blx	r5
			if (!result) {
   d5d00:	4605      	mov	r5, r0
   d5d02:	b958      	cbnz	r0, d5d1c <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5d04:	480a      	ldr	r0, [pc, #40]	; (d5d30 <_ZN6MB85RC5eraseEv+0x68>)
   d5d06:	490b      	ldr	r1, [pc, #44]	; (d5d34 <_ZN6MB85RC5eraseEv+0x6c>)
   d5d08:	4632      	mov	r2, r6
   d5d0a:	f7fe fa2b 	bl	d4164 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d5d0e:	a801      	add	r0, sp, #4
   d5d10:	f7ff ffd3 	bl	d5cba <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5d14:	4628      	mov	r0, r5
   d5d16:	b00a      	add	sp, #40	; 0x28
   d5d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5d1c:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5d20:	4446      	add	r6, r8
		while(totalLen > 0) {
   d5d22:	e7e0      	b.n	d5ce6 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5d24:	a801      	add	r0, sp, #4
   d5d26:	f7ff ffc8 	bl	d5cba <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5d2a:	2501      	movs	r5, #1
   d5d2c:	e7f2      	b.n	d5d14 <_ZN6MB85RC5eraseEv+0x4c>
   d5d2e:	bf00      	nop
   d5d30:	2003e574 	.word	0x2003e574
   d5d34:	000dbff4 	.word	0x000dbff4

000d5d38 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5d3c:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5d3e:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5d40:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5d42:	460d      	mov	r5, r1
   d5d44:	4616      	mov	r6, r2
   d5d46:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5d48:	f002 fc78 	bl	d863c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5d4c:	b1a7      	cbz	r7, d5d78 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5d4e:	68e1      	ldr	r1, [r4, #12]
   d5d50:	6860      	ldr	r0, [r4, #4]
   d5d52:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5d56:	f002 fc52 	bl	d85fe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5d5a:	0a29      	lsrs	r1, r5, #8
   d5d5c:	6860      	ldr	r0, [r4, #4]
   d5d5e:	f7ff ff9b 	bl	d5c98 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5d62:	4629      	mov	r1, r5
   d5d64:	6860      	ldr	r0, [r4, #4]
   d5d66:	f7ff ff97 	bl	d5c98 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5d6a:	6860      	ldr	r0, [r4, #4]
   d5d6c:	2100      	movs	r1, #0
   d5d6e:	f002 fc61 	bl	d8634 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5d72:	b148      	cbz	r0, d5d88 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5d74:	2400      	movs	r4, #0
   d5d76:	e000      	b.n	d5d7a <_ZN6MB85RC8readDataEjPhj+0x42>
   d5d78:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5d7a:	a801      	add	r0, sp, #4
   d5d7c:	f7ff ff9d 	bl	d5cba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5d80:	4620      	mov	r0, r4
   d5d82:	b003      	add	sp, #12
   d5d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5d88:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5d8a:	7b21      	ldrb	r1, [r4, #12]
   d5d8c:	6860      	ldr	r0, [r4, #4]
   d5d8e:	46b8      	mov	r8, r7
   d5d90:	bf28      	it	cs
   d5d92:	f04f 0820 	movcs.w	r8, #32
   d5d96:	2301      	movs	r3, #1
   d5d98:	4642      	mov	r2, r8
   d5d9a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5d9e:	f002 fc18 	bl	d85d2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5da2:	f004 fe6b 	bl	daa7c <_Z19__fetch_global_Wirev>
   d5da6:	6803      	ldr	r3, [r0, #0]
   d5da8:	691b      	ldr	r3, [r3, #16]
   d5daa:	4798      	blx	r3
   d5dac:	4540      	cmp	r0, r8
   d5dae:	dbe1      	blt.n	d5d74 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5db0:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5db4:	f004 fe62 	bl	daa7c <_Z19__fetch_global_Wirev>
   d5db8:	6803      	ldr	r3, [r0, #0]
   d5dba:	695b      	ldr	r3, [r3, #20]
   d5dbc:	4798      	blx	r3
   d5dbe:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5dc2:	454e      	cmp	r6, r9
   d5dc4:	d1f6      	bne.n	d5db4 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5dc6:	4445      	add	r5, r8
   d5dc8:	eba7 0708 	sub.w	r7, r7, r8
   d5dcc:	e7be      	b.n	d5d4c <_ZN6MB85RC8readDataEjPhj+0x14>

000d5dce <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5dce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5dd2:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5dd4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5dd6:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5dd8:	460e      	mov	r6, r1
   d5dda:	4690      	mov	r8, r2
   d5ddc:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5dde:	f002 fc2d 	bl	d863c <_ZN7TwoWire4lockEv>
   d5de2:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5de6:	f1b9 0f00 	cmp.w	r9, #0
   d5dea:	d02a      	beq.n	d5e42 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5dec:	b34d      	cbz	r5, d5e42 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5dee:	68e1      	ldr	r1, [r4, #12]
   d5df0:	6860      	ldr	r0, [r4, #4]
   d5df2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5df6:	f002 fc02 	bl	d85fe <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5dfa:	0a31      	lsrs	r1, r6, #8
   d5dfc:	6860      	ldr	r0, [r4, #4]
   d5dfe:	f7ff ff4b 	bl	d5c98 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5e02:	6860      	ldr	r0, [r4, #4]
   d5e04:	4631      	mov	r1, r6
   d5e06:	f7ff ff47 	bl	d5c98 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5e0a:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5e0e:	4647      	mov	r7, r8
   d5e10:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5e14:	6860      	ldr	r0, [r4, #4]
   d5e16:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5e1a:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5e1c:	3d01      	subs	r5, #1
				wire.write(*data);
   d5e1e:	689b      	ldr	r3, [r3, #8]
   d5e20:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5e22:	4555      	cmp	r5, sl
   d5e24:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5e28:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5e2a:	d001      	beq.n	d5e30 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5e2c:	2d00      	cmp	r5, #0
   d5e2e:	d1f1      	bne.n	d5e14 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5e30:	6860      	ldr	r0, [r4, #4]
   d5e32:	2101      	movs	r1, #1
   d5e34:	f002 fbfe 	bl	d8634 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5e38:	2800      	cmp	r0, #0
   d5e3a:	d0d7      	beq.n	d5dec <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5e3c:	f04f 0900 	mov.w	r9, #0
   d5e40:	e7d1      	b.n	d5de6 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5e42:	a801      	add	r0, sp, #4
   d5e44:	f7ff ff39 	bl	d5cba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5e48:	4648      	mov	r0, r9
   d5e4a:	b003      	add	sp, #12
   d5e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5e50 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5e54:	b08b      	sub	sp, #44	; 0x2c
   d5e56:	460e      	mov	r6, r1
   d5e58:	4615      	mov	r5, r2
   d5e5a:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5e5c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5e5e:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5e60:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5e62:	f002 fbeb 	bl	d863c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5e66:	42ae      	cmp	r6, r5
   d5e68:	d229      	bcs.n	d5ebe <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5e6a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5e6c:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5e6e:	b18c      	cbz	r4, d5e94 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5e70:	2c1e      	cmp	r4, #30
   d5e72:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5e74:	f8d8 3000 	ldr.w	r3, [r8]
   d5e78:	bf28      	it	cs
   d5e7a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5e7c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5e7e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5e82:	aa02      	add	r2, sp, #8
   d5e84:	463b      	mov	r3, r7
   d5e86:	4631      	mov	r1, r6
   d5e88:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5e8a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5e8c:	47c8      	blx	r9
				if (!result) {
   d5e8e:	b948      	cbnz	r0, d5ea4 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5e90:	2400      	movs	r4, #0
   d5e92:	e000      	b.n	d5e96 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5e94:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5e96:	a801      	add	r0, sp, #4
   d5e98:	f7ff ff0f 	bl	d5cba <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5e9c:	4620      	mov	r0, r4
   d5e9e:	b00b      	add	sp, #44	; 0x2c
   d5ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5ea4:	f8d8 3000 	ldr.w	r3, [r8]
   d5ea8:	aa02      	add	r2, sp, #8
   d5eaa:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5eae:	4629      	mov	r1, r5
   d5eb0:	463b      	mov	r3, r7
   d5eb2:	4640      	mov	r0, r8
   d5eb4:	47c8      	blx	r9
				if (!result) {
   d5eb6:	2800      	cmp	r0, #0
   d5eb8:	d0ea      	beq.n	d5e90 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5eba:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5ebc:	e7d7      	b.n	d5e6e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5ebe:	d9e9      	bls.n	d5e94 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5ec0:	2c00      	cmp	r4, #0
   d5ec2:	d0e7      	beq.n	d5e94 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5ec4:	f8d8 3000 	ldr.w	r3, [r8]
   d5ec8:	2c1e      	cmp	r4, #30
   d5eca:	4627      	mov	r7, r4
   d5ecc:	bf28      	it	cs
   d5ece:	271e      	movcs	r7, #30
   d5ed0:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5ed4:	aa02      	add	r2, sp, #8
   d5ed6:	463b      	mov	r3, r7
   d5ed8:	4631      	mov	r1, r6
   d5eda:	4640      	mov	r0, r8
   d5edc:	47c8      	blx	r9
				if (!result) {
   d5ede:	2800      	cmp	r0, #0
   d5ee0:	d0d6      	beq.n	d5e90 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5ee2:	f8d8 3000 	ldr.w	r3, [r8]
   d5ee6:	aa02      	add	r2, sp, #8
   d5ee8:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5eec:	4629      	mov	r1, r5
   d5eee:	463b      	mov	r3, r7
   d5ef0:	4640      	mov	r0, r8
   d5ef2:	47c8      	blx	r9
				if (!result) {
   d5ef4:	2800      	cmp	r0, #0
   d5ef6:	d0cb      	beq.n	d5e90 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5ef8:	443e      	add	r6, r7
				framAddrTo += count;
   d5efa:	443d      	add	r5, r7
				numBytes -= count;
   d5efc:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5efe:	e7df      	b.n	d5ec0 <_ZN6MB85RC8moveDataEjjj+0x70>

000d5f00 <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   d5f00:	6001      	str	r1, [r0, #0]
   d5f02:	7102      	strb	r2, [r0, #4]
{
}
   d5f04:	4770      	bx	lr

000d5f06 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   d5f06:	6800      	ldr	r0, [r0, #0]
   d5f08:	6803      	ldr	r3, [r0, #0]
   d5f0a:	68db      	ldr	r3, [r3, #12]
   d5f0c:	4718      	bx	r3

000d5f0e <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   d5f0e:	6800      	ldr	r0, [r0, #0]
   d5f10:	6803      	ldr	r3, [r0, #0]
   d5f12:	6a1b      	ldr	r3, [r3, #32]
   d5f14:	4718      	bx	r3

000d5f16 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   d5f16:	6800      	ldr	r0, [r0, #0]
   d5f18:	6803      	ldr	r3, [r0, #0]
   d5f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5f1c:	4718      	bx	r3

000d5f1e <_ZN10RHDatagram11setHeaderToEh>:
    return _thisAddress;
}

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   d5f1e:	6800      	ldr	r0, [r0, #0]
   d5f20:	6803      	ldr	r3, [r0, #0]
   d5f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5f24:	4718      	bx	r3

000d5f26 <_ZN10RHDatagram6sendtoEPhhh>:
{
   d5f26:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f28:	4605      	mov	r5, r0
   d5f2a:	460c      	mov	r4, r1
    setHeaderTo(address);
   d5f2c:	4619      	mov	r1, r3
{
   d5f2e:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   d5f30:	f7ff fff5 	bl	d5f1e <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   d5f34:	6828      	ldr	r0, [r5, #0]
   d5f36:	9a01      	ldr	r2, [sp, #4]
   d5f38:	6803      	ldr	r3, [r0, #0]
   d5f3a:	695b      	ldr	r3, [r3, #20]
   d5f3c:	4621      	mov	r1, r4
}
   d5f3e:	b003      	add	sp, #12
   d5f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   d5f44:	4718      	bx	r3

000d5f46 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   d5f46:	6800      	ldr	r0, [r0, #0]
   d5f48:	6803      	ldr	r3, [r0, #0]
   d5f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f4c:	4718      	bx	r3

000d5f4e <_ZN10RHDatagram14setThisAddressEh>:
{
   d5f4e:	b538      	push	{r3, r4, r5, lr}
   d5f50:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   d5f52:	6800      	ldr	r0, [r0, #0]
   d5f54:	6803      	ldr	r3, [r0, #0]
{
   d5f56:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   d5f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f5a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   d5f5c:	4629      	mov	r1, r5
   d5f5e:	4620      	mov	r0, r4
   d5f60:	f7ff fff1 	bl	d5f46 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   d5f64:	7125      	strb	r5, [r4, #4]
}
   d5f66:	bd38      	pop	{r3, r4, r5, pc}

000d5f68 <_ZN10RHDatagram4initEv>:
{
   d5f68:	b538      	push	{r3, r4, r5, lr}
   d5f6a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   d5f6c:	6800      	ldr	r0, [r0, #0]
   d5f6e:	6803      	ldr	r3, [r0, #0]
   d5f70:	689b      	ldr	r3, [r3, #8]
   d5f72:	4798      	blx	r3
    if (ret)
   d5f74:	4605      	mov	r5, r0
   d5f76:	b118      	cbz	r0, d5f80 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   d5f78:	7921      	ldrb	r1, [r4, #4]
   d5f7a:	4620      	mov	r0, r4
   d5f7c:	f7ff ffe7 	bl	d5f4e <_ZN10RHDatagram14setThisAddressEh>
}
   d5f80:	4628      	mov	r0, r5
   d5f82:	bd38      	pop	{r3, r4, r5, pc}

000d5f84 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   d5f84:	6800      	ldr	r0, [r0, #0]
   d5f86:	6803      	ldr	r3, [r0, #0]
   d5f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5f8a:	4718      	bx	r3

000d5f8c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   d5f8c:	6800      	ldr	r0, [r0, #0]
   d5f8e:	6803      	ldr	r3, [r0, #0]
   d5f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f92:	4718      	bx	r3

000d5f94 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   d5f94:	6800      	ldr	r0, [r0, #0]
   d5f96:	6803      	ldr	r3, [r0, #0]
   d5f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5f9a:	4718      	bx	r3

000d5f9c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   d5f9c:	6800      	ldr	r0, [r0, #0]
   d5f9e:	6803      	ldr	r3, [r0, #0]
   d5fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5fa2:	4718      	bx	r3

000d5fa4 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   d5fa4:	6800      	ldr	r0, [r0, #0]
   d5fa6:	6803      	ldr	r3, [r0, #0]
   d5fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5faa:	4718      	bx	r3

000d5fac <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   d5fac:	6800      	ldr	r0, [r0, #0]
   d5fae:	6803      	ldr	r3, [r0, #0]
   d5fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5fb2:	4718      	bx	r3

000d5fb4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   d5fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5fb8:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   d5fba:	6800      	ldr	r0, [r0, #0]
{
   d5fbc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   d5fbe:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   d5fc0:	6803      	ldr	r3, [r0, #0]
   d5fc2:	691b      	ldr	r3, [r3, #16]
{
   d5fc4:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   d5fc8:	4798      	blx	r3
   d5fca:	4605      	mov	r5, r0
   d5fcc:	b1c8      	cbz	r0, d6002 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   d5fce:	b11e      	cbz	r6, d5fd8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	f7ff ffe3 	bl	d5f9c <_ZN10RHDatagram10headerFromEv>
   d5fd6:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   d5fd8:	f1b9 0f00 	cmp.w	r9, #0
   d5fdc:	d004      	beq.n	d5fe8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   d5fde:	4620      	mov	r0, r4
   d5fe0:	f7ff ffd8 	bl	d5f94 <_ZN10RHDatagram8headerToEv>
   d5fe4:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   d5fe8:	f1b8 0f00 	cmp.w	r8, #0
   d5fec:	d004      	beq.n	d5ff8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   d5fee:	4620      	mov	r0, r4
   d5ff0:	f7ff ffd8 	bl	d5fa4 <_ZN10RHDatagram8headerIdEv>
   d5ff4:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   d5ff8:	b11f      	cbz	r7, d6002 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	f7ff ffd6 	bl	d5fac <_ZN10RHDatagram11headerFlagsEv>
   d6000:	7038      	strb	r0, [r7, #0]
}
   d6002:	4628      	mov	r0, r5
   d6004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6008 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   d6008:	2001      	movs	r0, #1
   d600a:	4770      	bx	lr

000d600c <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   d600c:	7903      	ldrb	r3, [r0, #4]
   d600e:	2b03      	cmp	r3, #3
   d6010:	d0fc      	beq.n	d600c <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   d6012:	2001      	movs	r0, #1
   d6014:	4770      	bx	lr

000d6016 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   d6016:	2000      	movs	r0, #0
   d6018:	4770      	bx	lr

000d601a <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   d601a:	7181      	strb	r1, [r0, #6]
}
   d601c:	4770      	bx	lr

000d601e <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   d601e:	7141      	strb	r1, [r0, #5]
}
   d6020:	4770      	bx	lr

000d6022 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   d6022:	72c1      	strb	r1, [r0, #11]
}
   d6024:	4770      	bx	lr

000d6026 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   d6026:	7301      	strb	r1, [r0, #12]
}
   d6028:	4770      	bx	lr

000d602a <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   d602a:	7341      	strb	r1, [r0, #13]
}
   d602c:	4770      	bx	lr

000d602e <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   d602e:	7b83      	ldrb	r3, [r0, #14]
   d6030:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   d6034:	4311      	orrs	r1, r2
   d6036:	7381      	strb	r1, [r0, #14]
}
   d6038:	4770      	bx	lr

000d603a <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   d603a:	79c0      	ldrb	r0, [r0, #7]
}
   d603c:	4770      	bx	lr

000d603e <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   d603e:	7a00      	ldrb	r0, [r0, #8]
}
   d6040:	4770      	bx	lr

000d6042 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   d6042:	7a40      	ldrb	r0, [r0, #9]
}
   d6044:	4770      	bx	lr

000d6046 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   d6046:	7a80      	ldrb	r0, [r0, #10]
}
   d6048:	4770      	bx	lr

000d604a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   d604a:	8a00      	ldrh	r0, [r0, #16]
}
   d604c:	b200      	sxth	r0, r0
   d604e:	4770      	bx	lr

000d6050 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   d6050:	7900      	ldrb	r0, [r0, #4]
}
   d6052:	4770      	bx	lr

000d6054 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   d6054:	7101      	strb	r1, [r0, #4]
}
   d6056:	4770      	bx	lr

000d6058 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   d6058:	8a40      	ldrh	r0, [r0, #18]
}
   d605a:	b280      	uxth	r0, r0
   d605c:	4770      	bx	lr

000d605e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   d605e:	8a80      	ldrh	r0, [r0, #20]
}
   d6060:	b280      	uxth	r0, r0
   d6062:	4770      	bx	lr

000d6064 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   d6064:	8ac0      	ldrh	r0, [r0, #22]
}
   d6066:	b280      	uxth	r0, r0
   d6068:	4770      	bx	lr

000d606a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   d606a:	b538      	push	{r3, r4, r5, lr}
   d606c:	4605      	mov	r5, r0
   d606e:	460c      	mov	r4, r1
    while (!available())
   d6070:	682b      	ldr	r3, [r5, #0]
   d6072:	4628      	mov	r0, r5
   d6074:	68db      	ldr	r3, [r3, #12]
   d6076:	4798      	blx	r3
   d6078:	b928      	cbnz	r0, d6086 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   d607a:	2c00      	cmp	r4, #0
   d607c:	d0f8      	beq.n	d6070 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   d607e:	4620      	mov	r0, r4
   d6080:	f001 fd36 	bl	d7af0 <delay>
   d6084:	e7f4      	b.n	d6070 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   d6086:	bd38      	pop	{r3, r4, r5, pc}

000d6088 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   d6088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d608a:	4605      	mov	r5, r0
   d608c:	460f      	mov	r7, r1
   d608e:	4614      	mov	r4, r2
   d6090:	f001 f9dc 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
   d6094:	4606      	mov	r6, r0
   d6096:	f001 f9d9 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d609a:	1b80      	subs	r0, r0, r6
   d609c:	42b8      	cmp	r0, r7
   d609e:	d20a      	bcs.n	d60b6 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   d60a0:	682b      	ldr	r3, [r5, #0]
   d60a2:	4628      	mov	r0, r5
   d60a4:	68db      	ldr	r3, [r3, #12]
   d60a6:	4798      	blx	r3
   d60a8:	b930      	cbnz	r0, d60b8 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   d60aa:	2c00      	cmp	r4, #0
   d60ac:	d0f3      	beq.n	d6096 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   d60ae:	4620      	mov	r0, r4
   d60b0:	f001 fd1e 	bl	d7af0 <delay>
   d60b4:	e7ef      	b.n	d6096 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   d60b6:	2000      	movs	r0, #0
}
   d60b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60ba <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   d60ba:	b570      	push	{r4, r5, r6, lr}
   d60bc:	4604      	mov	r4, r0
   d60be:	460e      	mov	r6, r1
   d60c0:	f001 f9c4 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
   d60c4:	4605      	mov	r5, r0
   d60c6:	f001 f9c1 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   d60ca:	1b40      	subs	r0, r0, r5
   d60cc:	42b0      	cmp	r0, r6
   d60ce:	d204      	bcs.n	d60da <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   d60d0:	7923      	ldrb	r3, [r4, #4]
   d60d2:	2b03      	cmp	r3, #3
   d60d4:	d0f7      	beq.n	d60c6 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   d60d6:	2001      	movs	r0, #1
}
   d60d8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d60da:	2000      	movs	r0, #0
   d60dc:	e7fc      	b.n	d60d8 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000d60de <_ZN15RHGenericDriver7waitCADEv>:
{
   d60de:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   d60e0:	69c3      	ldr	r3, [r0, #28]
{
   d60e2:	4604      	mov	r4, r0
    if (!_cad_timeout)
   d60e4:	b1b3      	cbz	r3, d6114 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d60e6:	f001 f9b1 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d60ea:	2664      	movs	r6, #100	; 0x64
   d60ec:	4605      	mov	r5, r0
    while (isChannelActive())
   d60ee:	6823      	ldr	r3, [r4, #0]
   d60f0:	4620      	mov	r0, r4
   d60f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60f4:	4798      	blx	r3
   d60f6:	b168      	cbz	r0, d6114 <_ZN15RHGenericDriver7waitCADEv+0x36>
   d60f8:	f001 f9a8 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   d60fc:	69e3      	ldr	r3, [r4, #28]
   d60fe:	1b40      	subs	r0, r0, r5
   d6100:	4298      	cmp	r0, r3
   d6102:	d809      	bhi.n	d6118 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   d6104:	210a      	movs	r1, #10
   d6106:	2001      	movs	r0, #1
   d6108:	f003 fe9c 	bl	d9e44 <_Z6randomii>
   d610c:	4370      	muls	r0, r6
   d610e:	f001 fcef 	bl	d7af0 <delay>
    while (isChannelActive())
   d6112:	e7ec      	b.n	d60ee <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   d6114:	2001      	movs	r0, #1
}
   d6116:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   d6118:	2000      	movs	r0, #0
   d611a:	e7fc      	b.n	d6116 <_ZN15RHGenericDriver7waitCADEv+0x38>

000d611c <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   d611c:	4a06      	ldr	r2, [pc, #24]	; (d6138 <_ZN15RHGenericDriverC1Ev+0x1c>)
   d611e:	6002      	str	r2, [r0, #0]
   d6120:	21ff      	movs	r1, #255	; 0xff
   d6122:	2200      	movs	r2, #0
   d6124:	7102      	strb	r2, [r0, #4]
   d6126:	7141      	strb	r1, [r0, #5]
   d6128:	8242      	strh	r2, [r0, #18]
   d612a:	72c1      	strb	r1, [r0, #11]
   d612c:	8282      	strh	r2, [r0, #20]
   d612e:	8181      	strh	r1, [r0, #12]
   d6130:	7382      	strb	r2, [r0, #14]
   d6132:	82c2      	strh	r2, [r0, #22]
   d6134:	61c2      	str	r2, [r0, #28]
}
   d6136:	4770      	bx	lr
   d6138:	000dc044 	.word	0x000dc044

000d613c <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   d613c:	4770      	bx	lr

000d613e <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   d613e:	4770      	bx	lr

000d6140 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   d6140:	4770      	bx	lr

000d6142 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   d6142:	4770      	bx	lr

000d6144 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   d6144:	4770      	bx	lr

000d6146 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   d6146:	7141      	strb	r1, [r0, #5]
}
   d6148:	4770      	bx	lr

000d614a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   d614a:	7181      	strb	r1, [r0, #6]
}
   d614c:	4770      	bx	lr

000d614e <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   d614e:	7101      	strb	r1, [r0, #4]
}
   d6150:	4770      	bx	lr
	...

000d6154 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d6154:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   d6156:	4d03      	ldr	r5, [pc, #12]	; (d6164 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   d6158:	6005      	str	r5, [r0, #0]
   d615a:	7101      	strb	r1, [r0, #4]
   d615c:	7142      	strb	r2, [r0, #5]
   d615e:	7183      	strb	r3, [r0, #6]
}
   d6160:	bd30      	pop	{r4, r5, pc}
   d6162:	bf00      	nop
   d6164:	000dc0c4 	.word	0x000dc0c4

000d6168 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d6168:	4770      	bx	lr

000d616a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d616a:	b510      	push	{r4, lr}
  }
   d616c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d616e:	4604      	mov	r4, r0
  }
   d6170:	f004 fccc 	bl	dab0c <_ZdlPvj>
   d6174:	4620      	mov	r0, r4
   d6176:	bd10      	pop	{r4, pc}

000d6178 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d6178:	b40e      	push	{r1, r2, r3}
   d617a:	b503      	push	{r0, r1, lr}
   d617c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d617e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d6180:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d6184:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d6186:	f003 fe21 	bl	d9dcc <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d618a:	b002      	add	sp, #8
   d618c:	f85d eb04 	ldr.w	lr, [sp], #4
   d6190:	b003      	add	sp, #12
   d6192:	4770      	bx	lr

000d6194 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d6194:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6196:	4604      	mov	r4, r0
   d6198:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d619a:	7922      	ldrb	r2, [r4, #4]
   d619c:	68a3      	ldr	r3, [r4, #8]
   d619e:	b132      	cbz	r2, d61ae <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d61a0:	b9a3      	cbnz	r3, d61cc <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d61a2:	490b      	ldr	r1, [pc, #44]	; (d61d0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d61a4:	b002      	add	sp, #8
   d61a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d61aa:	f003 bdde 	b.w	d9d6a <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d61ae:	4a09      	ldr	r2, [pc, #36]	; (d61d4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d61b0:	7b26      	ldrb	r6, [r4, #12]
   d61b2:	4d09      	ldr	r5, [pc, #36]	; (d61d8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d61b4:	4909      	ldr	r1, [pc, #36]	; (d61dc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d61b6:	7b64      	ldrb	r4, [r4, #13]
   d61b8:	2e01      	cmp	r6, #1
   d61ba:	bf18      	it	ne
   d61bc:	4629      	movne	r1, r5
   d61be:	e9cd 1400 	strd	r1, r4, [sp]
   d61c2:	4907      	ldr	r1, [pc, #28]	; (d61e0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d61c4:	f7ff ffd8 	bl	d6178 <_ZN5Print6printfEPKcz>
  }
   d61c8:	b002      	add	sp, #8
   d61ca:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d61cc:	4a05      	ldr	r2, [pc, #20]	; (d61e4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d61ce:	e7ef      	b.n	d61b0 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d61d0:	000dc101 	.word	0x000dc101
   d61d4:	000dc431 	.word	0x000dc431
   d61d8:	000dc0fd 	.word	0x000dc0fd
   d61dc:	000dc0f9 	.word	0x000dc0f9
   d61e0:	000dc117 	.word	0x000dc117
   d61e4:	000dc0f0 	.word	0x000dc0f0

000d61e8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   d61e8:	b510      	push	{r4, lr}
   d61ea:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   d61ec:	f7ff ffb2 	bl	d6154 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   d61f0:	4b05      	ldr	r3, [pc, #20]	; (d6208 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   d61f2:	6023      	str	r3, [r4, #0]
  {
   d61f4:	4b05      	ldr	r3, [pc, #20]	; (d620c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   d61f6:	60a3      	str	r3, [r4, #8]
   d61f8:	2301      	movs	r3, #1
   d61fa:	7323      	strb	r3, [r4, #12]
   d61fc:	2300      	movs	r3, #0
   d61fe:	6123      	str	r3, [r4, #16]
   d6200:	82a3      	strh	r3, [r4, #20]
{
}
   d6202:	4620      	mov	r0, r4
   d6204:	bd10      	pop	{r4, pc}
   d6206:	bf00      	nop
   d6208:	000dc150 	.word	0x000dc150
   d620c:	000dc13c 	.word	0x000dc13c

000d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d6210:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d6212:	4c0b      	ldr	r4, [pc, #44]	; (d6240 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d6214:	7821      	ldrb	r1, [r4, #0]
   d6216:	f3bf 8f5b 	dmb	ish
   d621a:	f011 0101 	ands.w	r1, r1, #1
   d621e:	d10b      	bne.n	d6238 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d6220:	4620      	mov	r0, r4
   d6222:	9101      	str	r1, [sp, #4]
   d6224:	f7fd ff48 	bl	d40b8 <__cxa_guard_acquire>
   d6228:	9901      	ldr	r1, [sp, #4]
   d622a:	b128      	cbz	r0, d6238 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d622c:	4805      	ldr	r0, [pc, #20]	; (d6244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d622e:	f003 fe21 	bl	d9e74 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6232:	4620      	mov	r0, r4
   d6234:	f7fd ff45 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d6238:	4802      	ldr	r0, [pc, #8]	; (d6244 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d623a:	b002      	add	sp, #8
   d623c:	bd10      	pop	{r4, pc}
   d623e:	bf00      	nop
   d6240:	2003e300 	.word	0x2003e300
   d6244:	2003e304 	.word	0x2003e304

000d6248 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   d6248:	b507      	push	{r0, r1, r2, lr}
   d624a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d624c:	f7ff ffe0 	bl	d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d6250:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   d6252:	b003      	add	sp, #12
   d6254:	f85d eb04 	ldr.w	lr, [sp], #4
   d6258:	f003 bebe 	b.w	d9fd8 <_ZN8SPIClass8transferEh>

000d625c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   d625c:	b508      	push	{r3, lr}
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   d625e:	f7ff ffd7 	bl	d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   d6262:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6266:	f003 bebd 	b.w	d9fe4 <_ZN8SPIClass15attachInterruptEv>

000d626a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   d626a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   d626c:	f7ff ffd0 	bl	d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   d6270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6274:	f003 beb7 	b.w	d9fe6 <_ZN8SPIClass15detachInterruptEv>

000d6278 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   d6278:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   d627a:	7903      	ldrb	r3, [r0, #4]
   d627c:	2b04      	cmp	r3, #4
   d627e:	d020      	beq.n	d62c2 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   d6280:	2b03      	cmp	r3, #3
   d6282:	d020      	beq.n	d62c6 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   d6284:	2b02      	cmp	r3, #2
   d6286:	d020      	beq.n	d62ca <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   d6288:	4a11      	ldr	r2, [pc, #68]	; (d62d0 <_ZN13RHHardwareSPI5beginEv+0x58>)
   d628a:	4912      	ldr	r1, [pc, #72]	; (d62d4 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   d628c:	2b01      	cmp	r3, #1
   d628e:	bf18      	it	ne
   d6290:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   d6292:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   d6294:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   d6296:	3901      	subs	r1, #1
   d6298:	bf18      	it	ne
   d629a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   d629c:	b133      	cbz	r3, d62ac <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   d629e:	2b01      	cmp	r3, #1
   d62a0:	d004      	beq.n	d62ac <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   d62a2:	2b02      	cmp	r3, #2
   d62a4:	d002      	beq.n	d62ac <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   d62a6:	2b03      	cmp	r3, #3
   d62a8:	bf18      	it	ne
   d62aa:	2300      	movne	r3, #0
class SPISettings : public Printable {
   d62ac:	2400      	movs	r4, #0
   d62ae:	7304      	strb	r4, [r0, #12]
   d62b0:	6102      	str	r2, [r0, #16]
   d62b2:	7501      	strb	r1, [r0, #20]
   d62b4:	7543      	strb	r3, [r0, #21]
        instance().begin();
   d62b6:	f7ff ffab 	bl	d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   d62ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d62be:	f003 bde3 	b.w	d9e88 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   d62c2:	4a05      	ldr	r2, [pc, #20]	; (d62d8 <_ZN13RHHardwareSPI5beginEv+0x60>)
   d62c4:	e7e5      	b.n	d6292 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   d62c6:	4a05      	ldr	r2, [pc, #20]	; (d62dc <_ZN13RHHardwareSPI5beginEv+0x64>)
   d62c8:	e7e3      	b.n	d6292 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   d62ca:	4a05      	ldr	r2, [pc, #20]	; (d62e0 <_ZN13RHHardwareSPI5beginEv+0x68>)
   d62cc:	e7e1      	b.n	d6292 <_ZN13RHHardwareSPI5beginEv+0x1a>
   d62ce:	bf00      	nop
   d62d0:	001e8480 	.word	0x001e8480
   d62d4:	000f4240 	.word	0x000f4240
   d62d8:	00f42400 	.word	0x00f42400
   d62dc:	007a1200 	.word	0x007a1200
   d62e0:	003d0900 	.word	0x003d0900

000d62e4 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   d62e4:	b508      	push	{r3, lr}
        instance().end();
   d62e6:	f7ff ff93 	bl	d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   d62ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d62ee:	f003 bddc 	b.w	d9eaa <_ZN8SPIClass3endEv>

000d62f2 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   d62f2:	b510      	push	{r4, lr}
   d62f4:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d62f6:	f7ff ff8b 	bl	d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d62fa:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   d62fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6302:	f003 bdfb 	b.w	d9efc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d6306 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   d6306:	b508      	push	{r3, lr}
        instance().endTransaction();
   d6308:	f7ff ff82 	bl	d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   d630c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d6310:	f003 bdda 	b.w	d9ec8 <_ZN8SPIClass14endTransactionEv>

000d6314 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   d6314:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   d6316:	f7ff ff7b 	bl	d6210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   d631a:	bd08      	pop	{r3, pc}

000d631c <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   d631c:	2300      	movs	r3, #0
   d631e:	4802      	ldr	r0, [pc, #8]	; (d6328 <_GLOBAL__sub_I_hardware_spi+0xc>)
   d6320:	461a      	mov	r2, r3
   d6322:	4619      	mov	r1, r3
   d6324:	f7ff bf60 	b.w	d61e8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   d6328:	2003e30c 	.word	0x2003e30c

000d632c <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   d632c:	2a01      	cmp	r2, #1
   d632e:	d105      	bne.n	d633c <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   d6330:	7a00      	ldrb	r0, [r0, #8]
   d6332:	780b      	ldrb	r3, [r1, #0]
   d6334:	1a1b      	subs	r3, r3, r0
   d6336:	4258      	negs	r0, r3
   d6338:	4158      	adcs	r0, r3
   d633a:	4770      	bx	lr
   d633c:	2000      	movs	r0, #0
}
   d633e:	4770      	bx	lr

000d6340 <_ZN6RHMesh5doArpEh>:
{
   d6340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d6344:	4d26      	ldr	r5, [pc, #152]	; (d63e0 <_ZN6RHMesh5doArpEh+0xa0>)
   d6346:	2301      	movs	r3, #1
{
   d6348:	b087      	sub	sp, #28
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   d634a:	702b      	strb	r3, [r5, #0]
    p->destlen = 1; 
   d634c:	706b      	strb	r3, [r5, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d634e:	2300      	movs	r3, #0
{
   d6350:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   d6352:	70a9      	strb	r1, [r5, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d6354:	9300      	str	r3, [sp, #0]
   d6356:	2203      	movs	r2, #3
   d6358:	23ff      	movs	r3, #255	; 0xff
   d635a:	4629      	mov	r1, r5
{
   d635c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   d635e:	f000 fbe7 	bl	d6b30 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   d6362:	b120      	cbz	r0, d636e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   d6364:	2400      	movs	r4, #0
}
   d6366:	4620      	mov	r0, r4
   d6368:	b007      	add	sp, #28
   d636a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   d636e:	23fa      	movs	r3, #250	; 0xfa
   d6370:	f88d 3017 	strb.w	r3, [sp, #23]
   d6374:	f001 f86a 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   d6378:	f106 0904 	add.w	r9, r6, #4
   d637c:	4680      	mov	r8, r0
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d637e:	46aa      	mov	sl, r5
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   d6380:	f508 647a 	add.w	r4, r8, #4000	; 0xfa0
   d6384:	f001 f862 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
   d6388:	1a20      	subs	r0, r4, r0
   d638a:	2800      	cmp	r0, #0
   d638c:	ddea      	ble.n	d6364 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   d638e:	b281      	uxth	r1, r0
   d6390:	2200      	movs	r2, #0
   d6392:	4648      	mov	r0, r9
   d6394:	f7ff fdbf 	bl	d5f16 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d6398:	2800      	cmp	r0, #0
   d639a:	d0f3      	beq.n	d6384 <_ZN6RHMesh5doArpEh+0x44>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   d639c:	2300      	movs	r3, #0
   d639e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d63a2:	e9cd 3300 	strd	r3, r3, [sp]
   d63a6:	f10d 0217 	add.w	r2, sp, #23
   d63aa:	4651      	mov	r1, sl
   d63ac:	4630      	mov	r0, r6
   d63ae:	f000 fbc9 	bl	d6b44 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d63b2:	4604      	mov	r4, r0
   d63b4:	2800      	cmp	r0, #0
   d63b6:	d0e3      	beq.n	d6380 <_ZN6RHMesh5doArpEh+0x40>
		if (   messageLen > 1
   d63b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d63bc:	2b01      	cmp	r3, #1
   d63be:	d9df      	bls.n	d6380 <_ZN6RHMesh5doArpEh+0x40>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d63c0:	f895 b000 	ldrb.w	fp, [r5]
   d63c4:	f1bb 0f02 	cmp.w	fp, #2
   d63c8:	d1da      	bne.n	d6380 <_ZN6RHMesh5doArpEh+0x40>
		    addRouteTo(address, headerFrom());
   d63ca:	4648      	mov	r0, r9
   d63cc:	f7ff fde6 	bl	d5f9c <_ZN10RHDatagram10headerFromEv>
   d63d0:	465b      	mov	r3, fp
   d63d2:	4602      	mov	r2, r0
   d63d4:	4639      	mov	r1, r7
   d63d6:	4630      	mov	r0, r6
   d63d8:	f000 fb21 	bl	d6a1e <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   d63dc:	e7c3      	b.n	d6366 <_ZN6RHMesh5doArpEh+0x26>
   d63de:	bf00      	nop
   d63e0:	2003e324 	.word	0x2003e324

000d63e4 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   d63e4:	2a01      	cmp	r2, #1
{
   d63e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d63ea:	4607      	mov	r7, r0
   d63ec:	460e      	mov	r6, r1
   d63ee:	4614      	mov	r4, r2
    if (   messageLen > 1 
   d63f0:	d93b      	bls.n	d646a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   d63f2:	794d      	ldrb	r5, [r1, #5]
   d63f4:	2d02      	cmp	r5, #2
   d63f6:	d130      	bne.n	d645a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   d63f8:	f100 0804 	add.w	r8, r0, #4
   d63fc:	79c9      	ldrb	r1, [r1, #7]
   d63fe:	9101      	str	r1, [sp, #4]
   d6400:	4640      	mov	r0, r8
   d6402:	f7ff fdcb 	bl	d5f9c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d6406:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   d6408:	462b      	mov	r3, r5
   d640a:	4602      	mov	r2, r0
   d640c:	9901      	ldr	r1, [sp, #4]
   d640e:	4638      	mov	r0, r7
   d6410:	f000 fb05 	bl	d6a1e <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   d6414:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   d6416:	f106 0308 	add.w	r3, r6, #8
   d641a:	2400      	movs	r4, #0
   d641c:	4622      	mov	r2, r4
   d641e:	4295      	cmp	r5, r2
   d6420:	f104 0401 	add.w	r4, r4, #1
   d6424:	b2e4      	uxtb	r4, r4
   d6426:	d904      	bls.n	d6432 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   d6428:	f813 2b01 	ldrb.w	r2, [r3], #1
   d642c:	7a39      	ldrb	r1, [r7, #8]
   d642e:	4291      	cmp	r1, r2
   d6430:	d1f4      	bne.n	d641c <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   d6432:	f104 0108 	add.w	r1, r4, #8
   d6436:	440e      	add	r6, r1
	while (i < numRoutes)
   d6438:	42a5      	cmp	r5, r4
   d643a:	d916      	bls.n	d646a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   d643c:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6440:	9101      	str	r1, [sp, #4]
   d6442:	4640      	mov	r0, r8
   d6444:	f7ff fdaa 	bl	d5f9c <_ZN10RHDatagram10headerFromEv>
   d6448:	3401      	adds	r4, #1
   d644a:	4602      	mov	r2, r0
   d644c:	9901      	ldr	r1, [sp, #4]
   d644e:	2302      	movs	r3, #2
   d6450:	4638      	mov	r0, r7
   d6452:	b2e4      	uxtb	r4, r4
   d6454:	f000 fae3 	bl	d6a1e <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   d6458:	e7ee      	b.n	d6438 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   d645a:	2d03      	cmp	r5, #3
   d645c:	d105      	bne.n	d646a <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   d645e:	7989      	ldrb	r1, [r1, #6]
}
   d6460:	b002      	add	sp, #8
   d6462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   d6466:	f000 bac3 	b.w	d69f0 <_ZN8RHRouter13deleteRouteToEh>
}
   d646a:	b002      	add	sp, #8
   d646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6470 <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   d6470:	b510      	push	{r4, lr}
   d6472:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   d6474:	f000 fb14 	bl	d6aa0 <_ZN8RHRouterC1ER15RHGenericDriverh>
   d6478:	4b01      	ldr	r3, [pc, #4]	; (d6480 <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   d647a:	6023      	str	r3, [r4, #0]
}
   d647c:	4620      	mov	r0, r4
   d647e:	bd10      	pop	{r4, pc}
   d6480:	000dc184 	.word	0x000dc184

000d6484 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   d6484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d6488:	2af9      	cmp	r2, #249	; 0xf9
{
   d648a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   d648e:	4606      	mov	r6, r0
   d6490:	460f      	mov	r7, r1
   d6492:	4614      	mov	r4, r2
   d6494:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   d6496:	d825      	bhi.n	d64e4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   d6498:	2bff      	cmp	r3, #255	; 0xff
   d649a:	d114      	bne.n	d64c6 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d649c:	f8df 8048 	ldr.w	r8, [pc, #72]	; d64e8 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   d64a0:	4640      	mov	r0, r8
   d64a2:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   d64a4:	4622      	mov	r2, r4
   d64a6:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   d64a8:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   d64ac:	f004 ffb4 	bl	db418 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d64b0:	1c62      	adds	r2, r4, #1
   d64b2:	f8cd 9020 	str.w	r9, [sp, #32]
   d64b6:	462b      	mov	r3, r5
   d64b8:	4641      	mov	r1, r8
   d64ba:	4630      	mov	r0, r6
   d64bc:	b2d2      	uxtb	r2, r2
}
   d64be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   d64c2:	f000 bb35 	b.w	d6b30 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   d64c6:	4619      	mov	r1, r3
   d64c8:	f000 fa4e 	bl	d6968 <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   d64cc:	2800      	cmp	r0, #0
   d64ce:	d1e5      	bne.n	d649c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   d64d0:	6833      	ldr	r3, [r6, #0]
   d64d2:	4629      	mov	r1, r5
   d64d4:	689b      	ldr	r3, [r3, #8]
   d64d6:	4630      	mov	r0, r6
   d64d8:	4798      	blx	r3
   d64da:	2800      	cmp	r0, #0
   d64dc:	d1de      	bne.n	d649c <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d64de:	2002      	movs	r0, #2
}
   d64e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   d64e4:	2001      	movs	r0, #1
   d64e6:	e7fb      	b.n	d64e0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   d64e8:	2003e324 	.word	0x2003e324

000d64ec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   d64ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64f0:	b089      	sub	sp, #36	; 0x24
   d64f2:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d64f4:	23fa      	movs	r3, #250	; 0xfa
   d64f6:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d64fa:	f10d 031f 	add.w	r3, sp, #31
   d64fe:	9303      	str	r3, [sp, #12]
   d6500:	f10d 031e 	add.w	r3, sp, #30
   d6504:	f8df a180 	ldr.w	sl, [pc, #384]	; d6688 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>
   d6508:	9302      	str	r3, [sp, #8]
   d650a:	f10d 031d 	add.w	r3, sp, #29
   d650e:	9301      	str	r3, [sp, #4]
   d6510:	ab07      	add	r3, sp, #28
   d6512:	9300      	str	r3, [sp, #0]
{     
   d6514:	4689      	mov	r9, r1
   d6516:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d6518:	f10d 031b 	add.w	r3, sp, #27
   d651c:	f10d 021a 	add.w	r2, sp, #26
   d6520:	4651      	mov	r1, sl
{     
   d6522:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   d6526:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   d6528:	f000 fb0c 	bl	d6b44 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d652c:	4656      	mov	r6, sl
   d652e:	4604      	mov	r4, r0
   d6530:	b920      	cbnz	r0, d653c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x50>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   d6532:	2400      	movs	r4, #0
}
   d6534:	4620      	mov	r0, r4
   d6536:	b009      	add	sp, #36	; 0x24
   d6538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   d653c:	f89d 301a 	ldrb.w	r3, [sp, #26]
   d6540:	b373      	cbz	r3, d65a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   d6542:	f89a 2000 	ldrb.w	r2, [sl]
   d6546:	bb5a      	cbnz	r2, d65a0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb4>
	    if (source) *source = _source;
   d6548:	f1b8 0f00 	cmp.w	r8, #0
   d654c:	d003      	beq.n	d6556 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x6a>
   d654e:	f89d 201b 	ldrb.w	r2, [sp, #27]
   d6552:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   d6556:	f1bb 0f00 	cmp.w	fp, #0
   d655a:	d003      	beq.n	d6564 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x78>
   d655c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d6560:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   d6564:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d6566:	b11a      	cbz	r2, d6570 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d6568:	9913      	ldr	r1, [sp, #76]	; 0x4c
   d656a:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d656e:	700a      	strb	r2, [r1, #0]
	    if (flags)  *flags  = _flags;
   d6570:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d6572:	b11a      	cbz	r2, d657c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d6574:	9914      	ldr	r1, [sp, #80]	; 0x50
   d6576:	f89d 201e 	ldrb.w	r2, [sp, #30]
   d657a:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   d657c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d657e:	b11a      	cbz	r2, d6588 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d6580:	9915      	ldr	r1, [sp, #84]	; 0x54
   d6582:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d6586:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   d6588:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   d658a:	493d      	ldr	r1, [pc, #244]	; (d6680 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   d658c:	3b01      	subs	r3, #1
   d658e:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d6590:	429a      	cmp	r2, r3
		*len = msgLen;
   d6592:	bf88      	it	hi
   d6594:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   d6596:	783a      	ldrb	r2, [r7, #0]
   d6598:	4648      	mov	r0, r9
   d659a:	f004 ff3d 	bl	db418 <memcpy>
	    return true;
   d659e:	e7c9      	b.n	d6534 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   d65a0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d65a4:	2aff      	cmp	r2, #255	; 0xff
   d65a6:	d1c4      	bne.n	d6532 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && tmpMessageLen > 1 
   d65a8:	2b01      	cmp	r3, #1
   d65aa:	d9c2      	bls.n	d6532 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   d65ac:	7832      	ldrb	r2, [r6, #0]
   d65ae:	2a01      	cmp	r2, #1
   d65b0:	d1bf      	bne.n	d6532 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    if (_source == _thisAddress)
   d65b2:	7a2a      	ldrb	r2, [r5, #8]
   d65b4:	f89d 401b 	ldrb.w	r4, [sp, #27]
   d65b8:	42a2      	cmp	r2, r4
   d65ba:	d0ba      	beq.n	d6532 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   d65bc:	1edf      	subs	r7, r3, #3
   d65be:	4931      	ldr	r1, [pc, #196]	; (d6684 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   d65c0:	b2ff      	uxtb	r7, r7
   d65c2:	2300      	movs	r3, #0
   d65c4:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   d65c8:	4547      	cmp	r7, r8
   d65ca:	d906      	bls.n	d65da <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xee>
		if (d->route[i] == _thisAddress)
   d65cc:	f811 0b01 	ldrb.w	r0, [r1], #1
   d65d0:	4282      	cmp	r2, r0
   d65d2:	f103 0301 	add.w	r3, r3, #1
   d65d6:	d1f5      	bne.n	d65c4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd8>
   d65d8:	e7ab      	b.n	d6532 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   d65da:	f105 0904 	add.w	r9, r5, #4
   d65de:	4648      	mov	r0, r9
   d65e0:	f7ff fcdc 	bl	d5f9c <_ZN10RHDatagram10headerFromEv>
   d65e4:	2302      	movs	r3, #2
   d65e6:	4602      	mov	r2, r0
   d65e8:	4621      	mov	r1, r4
   d65ea:	4628      	mov	r0, r5
   d65ec:	f000 fa17 	bl	d6a1e <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   d65f0:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d65f4:	b193      	cbz	r3, d661c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x130>
   d65f6:	4c24      	ldr	r4, [pc, #144]	; (d6688 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
	        for (i = 0; i < numRoutes; i++)
   d65f8:	1ba3      	subs	r3, r4, r6
   d65fa:	b2db      	uxtb	r3, r3
   d65fc:	429f      	cmp	r7, r3
   d65fe:	d90c      	bls.n	d661a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12e>
		    addRouteTo(d->route[i], headerFrom());
   d6600:	78e1      	ldrb	r1, [r4, #3]
   d6602:	9105      	str	r1, [sp, #20]
   d6604:	4648      	mov	r0, r9
   d6606:	f7ff fcc9 	bl	d5f9c <_ZN10RHDatagram10headerFromEv>
   d660a:	9905      	ldr	r1, [sp, #20]
   d660c:	4602      	mov	r2, r0
   d660e:	2302      	movs	r3, #2
   d6610:	4628      	mov	r0, r5
   d6612:	f000 fa04 	bl	d6a1e <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   d6616:	3401      	adds	r4, #1
   d6618:	e7ee      	b.n	d65f8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x10c>
   d661a:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   d661c:	682b      	ldr	r3, [r5, #0]
   d661e:	7872      	ldrb	r2, [r6, #1]
   d6620:	68db      	ldr	r3, [r3, #12]
   d6622:	491a      	ldr	r1, [pc, #104]	; (d668c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x1a0>)
   d6624:	4628      	mov	r0, r5
   d6626:	4798      	blx	r3
   d6628:	4604      	mov	r4, r0
   d662a:	b160      	cbz	r0, d6646 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x15a>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d662c:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d662e:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   d6630:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   d6632:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d6636:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d663a:	4913      	ldr	r1, [pc, #76]	; (d6688 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   d663c:	9400      	str	r4, [sp, #0]
   d663e:	4628      	mov	r0, r5
   d6640:	f000 fa76 	bl	d6b30 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d6644:	e776      	b.n	d6534 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
	    else if ((i < _max_hops) && _isa_router)
   d6646:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   d664a:	4543      	cmp	r3, r8
   d664c:	f67f af71 	bls.w	d6532 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
   d6650:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   d6654:	2b00      	cmp	r3, #0
   d6656:	f43f af6c 	beq.w	d6532 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x46>
		tmpMessageLen++;
   d665a:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   d665e:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d6660:	4909      	ldr	r1, [pc, #36]	; (d6688 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
		d->route[numRoutes] = _thisAddress;
   d6662:	443e      	add	r6, r7
		tmpMessageLen++;
   d6664:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   d6666:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d6668:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d666c:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   d666e:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d6670:	9300      	str	r3, [sp, #0]
   d6672:	4628      	mov	r0, r5
   d6674:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   d6676:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   d667a:	f000 fa23 	bl	d6ac4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   d667e:	e759      	b.n	d6534 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x48>
   d6680:	2003e325 	.word	0x2003e325
   d6684:	2003e327 	.word	0x2003e327
   d6688:	2003e324 	.word	0x2003e324
   d668c:	2003e326 	.word	0x2003e326

000d6690 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAckTimeout(uint8_t* buf, uint8_t* len, uint16_t timeout, uint8_t* from, uint8_t* to, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d6690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6694:	b085      	sub	sp, #20
   d6696:	4680      	mov	r8, r0
   d6698:	461c      	mov	r4, r3
   d669a:	e9dd 5610 	ldrd	r5, r6, [sp, #64]	; 0x40
   d669e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d66a0:	4689      	mov	r9, r1
   d66a2:	4692      	mov	sl, r2
   d66a4:	f000 fed2 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
    unsigned long starttime = millis();
    int32_t timeLeft;
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
    {
	if (waitAvailableTimeout(timeLeft))
   d66a8:	f108 0b04 	add.w	fp, r8, #4
    while ((timeLeft = timeout - (millis() - starttime)) > 0)
   d66ac:	4404      	add	r4, r0
   d66ae:	f000 fecd 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
   d66b2:	1a20      	subs	r0, r4, r0
   d66b4:	2800      	cmp	r0, #0
   d66b6:	dd16      	ble.n	d66e6 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x56>
	if (waitAvailableTimeout(timeLeft))
   d66b8:	b281      	uxth	r1, r0
   d66ba:	2200      	movs	r2, #0
   d66bc:	4658      	mov	r0, fp
   d66be:	f7ff fc2a 	bl	d5f16 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d66c2:	2800      	cmp	r0, #0
   d66c4:	d0f3      	beq.n	d66ae <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
	{
	    if (recvfromAck(buf, len, from, to, id, flags, hops))
   d66c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d66c8:	9300      	str	r3, [sp, #0]
   d66ca:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d66ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d66d0:	9501      	str	r5, [sp, #4]
   d66d2:	4652      	mov	r2, sl
   d66d4:	4649      	mov	r1, r9
   d66d6:	4640      	mov	r0, r8
   d66d8:	f7ff ff08 	bl	d64ec <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   d66dc:	2800      	cmp	r0, #0
   d66de:	d0e6      	beq.n	d66ae <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x1e>
		return true;
	    YIELD;
	}
    }
    return false;
}
   d66e0:	b005      	add	sp, #20
   d66e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return false;
   d66e6:	2000      	movs	r0, #0
   d66e8:	e7fa      	b.n	d66e0 <_ZN6RHMesh18recvfromAckTimeoutEPhS0_tS0_S0_S0_S0_S0_+0x50>
	...

000d66ec <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   d66ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66ee:	b085      	sub	sp, #20
   d66f0:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d66f2:	3004      	adds	r0, #4
{
   d66f4:	460e      	mov	r6, r1
   d66f6:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d66f8:	f7ff fc50 	bl	d5f9c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   d66fc:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   d66fe:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   d6700:	4631      	mov	r1, r6
   d6702:	4628      	mov	r0, r5
   d6704:	f000 f947 	bl	d6996 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d6708:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   d670a:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   d670c:	d001      	beq.n	d6712 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   d670e:	2805      	cmp	r0, #5
   d6710:	d11b      	bne.n	d674a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   d6712:	7831      	ldrb	r1, [r6, #0]
   d6714:	4628      	mov	r0, r5
   d6716:	f000 f96b 	bl	d69f0 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   d671a:	7872      	ldrb	r2, [r6, #1]
   d671c:	7a2b      	ldrb	r3, [r5, #8]
   d671e:	429a      	cmp	r2, r3
   d6720:	d013      	beq.n	d674a <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   d6722:	4c0b      	ldr	r4, [pc, #44]	; (d6750 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   d6724:	2303      	movs	r3, #3
   d6726:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   d6728:	7833      	ldrb	r3, [r6, #0]
   d672a:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   d672c:	7871      	ldrb	r1, [r6, #1]
   d672e:	2302      	movs	r3, #2
   d6730:	463a      	mov	r2, r7
   d6732:	4628      	mov	r0, r5
   d6734:	f000 f973 	bl	d6a1e <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   d6738:	2300      	movs	r3, #0
   d673a:	9300      	str	r3, [sp, #0]
   d673c:	4621      	mov	r1, r4
   d673e:	7873      	ldrb	r3, [r6, #1]
   d6740:	2202      	movs	r2, #2
   d6742:	4628      	mov	r0, r5
   d6744:	f000 f9f4 	bl	d6b30 <_ZN8RHRouter10sendtoWaitEPhhhh>
   d6748:	4604      	mov	r4, r0
}
   d674a:	4620      	mov	r0, r4
   d674c:	b005      	add	sp, #20
   d674e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6750:	2003e324 	.word	0x2003e324

000d6754 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   d6754:	b510      	push	{r4, lr}
   d6756:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   d6758:	f7ff fbd2 	bl	d5f00 <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   d675c:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   d675e:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   d6760:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   d6762:	2303      	movs	r3, #3
    _retransmissions = 0;
   d6764:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   d6766:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   d6768:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   d676a:	f44f 7280 	mov.w	r2, #256	; 0x100
   d676e:	f104 0011 	add.w	r0, r4, #17
   d6772:	f004 fe79 	bl	db468 <memset>
}
   d6776:	4620      	mov	r0, r4
   d6778:	bd10      	pop	{r4, pc}

000d677a <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   d677a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d677c:	4604      	mov	r4, r0
   d677e:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   d6780:	f7ff fc00 	bl	d5f84 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   d6784:	4620      	mov	r0, r4
   d6786:	2200      	movs	r2, #0
   d6788:	2180      	movs	r1, #128	; 0x80
   d678a:	f7ff fbff 	bl	d5f8c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   d678e:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   d6790:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   d6792:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   d6796:	f10d 010f 	add.w	r1, sp, #15
   d679a:	2201      	movs	r2, #1
   d679c:	4620      	mov	r0, r4
   d679e:	f7ff fbc2 	bl	d5f26 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   d67a2:	4620      	mov	r0, r4
   d67a4:	f7ff fbb3 	bl	d5f0e <_ZN10RHDatagram14waitPacketSentEv>
}
   d67a8:	b004      	add	sp, #16
   d67aa:	bd10      	pop	{r4, pc}

000d67ac <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   d67ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d67b0:	7b05      	ldrb	r5, [r0, #12]
   d67b2:	3501      	adds	r5, #1
   d67b4:	b2ed      	uxtb	r5, r5
{
   d67b6:	b087      	sub	sp, #28
   d67b8:	4604      	mov	r4, r0
   d67ba:	4689      	mov	r9, r1
   d67bc:	4692      	mov	sl, r2
   d67be:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   d67c0:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   d67c2:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   d67c4:	7c22      	ldrb	r2, [r4, #16]
   d67c6:	463b      	mov	r3, r7
   d67c8:	429a      	cmp	r2, r3
   d67ca:	f107 0701 	add.w	r7, r7, #1
   d67ce:	b2ff      	uxtb	r7, r7
   d67d0:	d36b      	bcc.n	d68aa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   d67d2:	4629      	mov	r1, r5
   d67d4:	4620      	mov	r0, r4
   d67d6:	f7ff fbd5 	bl	d5f84 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   d67da:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   d67dc:	bf0d      	iteet	eq
   d67de:	22c0      	moveq	r2, #192	; 0xc0
   d67e0:	2280      	movne	r2, #128	; 0x80
   d67e2:	2140      	movne	r1, #64	; 0x40
   d67e4:	2100      	moveq	r1, #0
   d67e6:	4620      	mov	r0, r4
   d67e8:	f7ff fbd0 	bl	d5f8c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   d67ec:	4643      	mov	r3, r8
   d67ee:	4652      	mov	r2, sl
   d67f0:	4649      	mov	r1, r9
   d67f2:	4620      	mov	r0, r4
   d67f4:	f7ff fb97 	bl	d5f26 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   d67f8:	4620      	mov	r0, r4
   d67fa:	f7ff fb88 	bl	d5f0e <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   d67fe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d6802:	d054      	beq.n	d68ae <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   d6804:	2f01      	cmp	r7, #1
	    _retransmissions++;
   d6806:	bf82      	ittt	hi
   d6808:	68a3      	ldrhi	r3, [r4, #8]
   d680a:	3301      	addhi	r3, #1
   d680c:	60a3      	strhi	r3, [r4, #8]
   d680e:	f000 fe1d 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   d6812:	f44f 7180 	mov.w	r1, #256	; 0x100
   d6816:	4683      	mov	fp, r0
   d6818:	2000      	movs	r0, #0
   d681a:	89e6      	ldrh	r6, [r4, #14]
   d681c:	f003 fb12 	bl	d9e44 <_Z6randomii>
   d6820:	4370      	muls	r0, r6
   d6822:	bf48      	it	mi
   d6824:	30ff      	addmi	r0, #255	; 0xff
   d6826:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   d682a:	fa1b f686 	uxtah	r6, fp, r6
   d682e:	f000 fe0d 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
   d6832:	1a30      	subs	r0, r6, r0
   d6834:	2800      	cmp	r0, #0
   d6836:	ddc5      	ble.n	d67c4 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   d6838:	b281      	uxth	r1, r0
   d683a:	2200      	movs	r2, #0
   d683c:	4620      	mov	r0, r4
   d683e:	f7ff fb6a 	bl	d5f16 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   d6842:	2800      	cmp	r0, #0
   d6844:	d0f3      	beq.n	d682e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   d6846:	f10d 0317 	add.w	r3, sp, #23
   d684a:	9302      	str	r3, [sp, #8]
   d684c:	f10d 0316 	add.w	r3, sp, #22
   d6850:	9301      	str	r3, [sp, #4]
   d6852:	2200      	movs	r2, #0
   d6854:	f10d 0315 	add.w	r3, sp, #21
   d6858:	9300      	str	r3, [sp, #0]
   d685a:	4611      	mov	r1, r2
   d685c:	ab05      	add	r3, sp, #20
   d685e:	4620      	mov	r0, r4
   d6860:	f7ff fba8 	bl	d5fb4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d6864:	2800      	cmp	r0, #0
   d6866:	d0e2      	beq.n	d682e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   d6868:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d686c:	f99d 3017 	ldrsb.w	r3, [sp, #23]
   d6870:	4542      	cmp	r2, r8
   d6872:	d10e      	bne.n	d6892 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   d6874:	f894 c004 	ldrb.w	ip, [r4, #4]
   d6878:	f89d 1015 	ldrb.w	r1, [sp, #21]
   d687c:	458c      	cmp	ip, r1
   d687e:	d108      	bne.n	d6892 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   d6880:	2b00      	cmp	r3, #0
   d6882:	da08      	bge.n	d6896 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   d6884:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d6888:	42ab      	cmp	r3, r5
   d688a:	d1d0      	bne.n	d682e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   d688c:	b007      	add	sp, #28
   d688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   d6892:	2b00      	cmp	r3, #0
   d6894:	dbcb      	blt.n	d682e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   d6896:	18a1      	adds	r1, r4, r2
   d6898:	f89d 3016 	ldrb.w	r3, [sp, #22]
   d689c:	7c49      	ldrb	r1, [r1, #17]
   d689e:	4299      	cmp	r1, r3
   d68a0:	d1c5      	bne.n	d682e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   d68a2:	4620      	mov	r0, r4
   d68a4:	f7ff ff69 	bl	d677a <_ZN18RHReliableDatagram11acknowledgeEhh>
   d68a8:	e7c1      	b.n	d682e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   d68aa:	2000      	movs	r0, #0
   d68ac:	e7ee      	b.n	d688c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   d68ae:	2001      	movs	r0, #1
   d68b0:	e7ec      	b.n	d688c <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000d68b2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   d68b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68b6:	b089      	sub	sp, #36	; 0x24
   d68b8:	e9cd 2104 	strd	r2, r1, [sp, #16]
   d68bc:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   d68c0:	9f12      	ldr	r7, [sp, #72]	; 0x48
   d68c2:	4604      	mov	r4, r0
   d68c4:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d68c6:	f7ff fb1e 	bl	d5f06 <_ZN10RHDatagram9availableEv>
   d68ca:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d68ce:	b920      	cbnz	r0, d68da <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   d68d0:	2500      	movs	r5, #0
}
   d68d2:	4628      	mov	r0, r5
   d68d4:	b009      	add	sp, #36	; 0x24
   d68d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   d68da:	f10d 031f 	add.w	r3, sp, #31
   d68de:	9302      	str	r3, [sp, #8]
   d68e0:	f10d 031e 	add.w	r3, sp, #30
   d68e4:	9301      	str	r3, [sp, #4]
   d68e6:	f10d 031d 	add.w	r3, sp, #29
   d68ea:	9300      	str	r3, [sp, #0]
   d68ec:	4620      	mov	r0, r4
   d68ee:	ab07      	add	r3, sp, #28
   d68f0:	f7ff fb60 	bl	d5fb4 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   d68f4:	4605      	mov	r5, r0
   d68f6:	2800      	cmp	r0, #0
   d68f8:	d0ea      	beq.n	d68d0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   d68fa:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   d68fe:	2b00      	cmp	r3, #0
   d6900:	dbe6      	blt.n	d68d0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   d6902:	7922      	ldrb	r2, [r4, #4]
   d6904:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d6908:	429a      	cmp	r2, r3
   d690a:	d106      	bne.n	d691a <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   d690c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d6910:	f89d 101e 	ldrb.w	r1, [sp, #30]
   d6914:	4620      	mov	r0, r4
   d6916:	f7ff ff30 	bl	d677a <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   d691a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d691e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   d6922:	4414      	add	r4, r2
   d6924:	7c61      	ldrb	r1, [r4, #17]
   d6926:	4299      	cmp	r1, r3
   d6928:	d0d2      	beq.n	d68d0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   d692a:	b106      	cbz	r6, d692e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x7c>
   d692c:	7032      	strb	r2, [r6, #0]
		if (to)    *to =    _to;
   d692e:	f1b9 0f00 	cmp.w	r9, #0
   d6932:	d003      	beq.n	d693c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x8a>
   d6934:	f89d 201d 	ldrb.w	r2, [sp, #29]
   d6938:	f889 2000 	strb.w	r2, [r9]
		if (id)    *id =    _id;
   d693c:	f1b8 0f00 	cmp.w	r8, #0
   d6940:	d001      	beq.n	d6946 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   d6942:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   d6946:	b117      	cbz	r7, d694e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9c>
   d6948:	f89d 201f 	ldrb.w	r2, [sp, #31]
   d694c:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   d694e:	7463      	strb	r3, [r4, #17]
		return true;
   d6950:	e7bf      	b.n	d68d2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000d6952 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   d6952:	4770      	bx	lr

000d6954 <_ZN8RHRouter4initEv>:
{
   d6954:	b510      	push	{r4, lr}
   d6956:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   d6958:	3004      	adds	r0, #4
   d695a:	f7ff fb05 	bl	d5f68 <_ZN10RHDatagram4initEv>
    if (ret)
   d695e:	b110      	cbz	r0, d6966 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   d6960:	231e      	movs	r3, #30
   d6962:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   d6966:	bd10      	pop	{r4, pc}

000d6968 <_ZN8RHRouter10getRouteToEh>:
{
   d6968:	b510      	push	{r4, lr}
   d696a:	4602      	mov	r2, r0
   d696c:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   d696e:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   d6972:	428c      	cmp	r4, r1
   d6974:	d108      	bne.n	d6988 <_ZN8RHRouter10getRouteToEh+0x20>
   d6976:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   d697a:	b12c      	cbz	r4, d6988 <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   d697c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d6980:	f503 738c 	add.w	r3, r3, #280	; 0x118
   d6984:	4418      	add	r0, r3
}
   d6986:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6988:	3301      	adds	r3, #1
   d698a:	2b0a      	cmp	r3, #10
   d698c:	f102 0203 	add.w	r2, r2, #3
   d6990:	d1ed      	bne.n	d696e <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   d6992:	2000      	movs	r0, #0
   d6994:	e7f7      	b.n	d6986 <_ZN8RHRouter10getRouteToEh+0x1e>

000d6996 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   d6996:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d6998:	780b      	ldrb	r3, [r1, #0]
   d699a:	2bff      	cmp	r3, #255	; 0xff
{
   d699c:	4605      	mov	r5, r0
   d699e:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   d69a0:	d006      	beq.n	d69b0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   d69a2:	4619      	mov	r1, r3
   d69a4:	9201      	str	r2, [sp, #4]
   d69a6:	f7ff ffdf 	bl	d6968 <_ZN8RHRouter10getRouteToEh>
	if (!route)
   d69aa:	b158      	cbz	r0, d69c4 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   d69ac:	7843      	ldrb	r3, [r0, #1]
   d69ae:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   d69b0:	4621      	mov	r1, r4
   d69b2:	1d28      	adds	r0, r5, #4
   d69b4:	f7ff fefa 	bl	d67ac <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   d69b8:	2800      	cmp	r0, #0
   d69ba:	bf14      	ite	ne
   d69bc:	2000      	movne	r0, #0
   d69be:	2005      	moveq	r0, #5
}
   d69c0:	b003      	add	sp, #12
   d69c2:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   d69c4:	2002      	movs	r0, #2
   d69c6:	e7fb      	b.n	d69c0 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000d69c8 <_ZN8RHRouter11deleteRouteEh>:
{
   d69c8:	b510      	push	{r4, lr}
   d69ca:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   d69ce:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   d69d0:	f1c1 0209 	rsb	r2, r1, #9
    memcpy(&_routes[index], &_routes[index+1], 
   d69d4:	f503 708c 	add.w	r0, r3, #280	; 0x118
   d69d8:	f203 111b 	addw	r1, r3, #283	; 0x11b
   d69dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d69e0:	4421      	add	r1, r4
   d69e2:	4420      	add	r0, r4
   d69e4:	f004 fd18 	bl	db418 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   d69e8:	2300      	movs	r3, #0
   d69ea:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
}
   d69ee:	bd10      	pop	{r4, pc}

000d69f0 <_ZN8RHRouter13deleteRouteToEh>:
{
   d69f0:	b538      	push	{r3, r4, r5, lr}
   d69f2:	460a      	mov	r2, r1
   d69f4:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d69f6:	f500 748c 	add.w	r4, r0, #280	; 0x118
   d69fa:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   d69fe:	b2d9      	uxtb	r1, r3
   d6a00:	5d65      	ldrb	r5, [r4, r5]
   d6a02:	4295      	cmp	r5, r2
   d6a04:	d103      	bne.n	d6a0e <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   d6a06:	f7ff ffdf 	bl	d69c8 <_ZN8RHRouter11deleteRouteEh>
	    return true;
   d6a0a:	2001      	movs	r0, #1
}
   d6a0c:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6a0e:	3301      	adds	r3, #1
   d6a10:	2b0a      	cmp	r3, #10
   d6a12:	d1f2      	bne.n	d69fa <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   d6a14:	2000      	movs	r0, #0
   d6a16:	e7f9      	b.n	d6a0c <_ZN8RHRouter13deleteRouteToEh+0x1c>

000d6a18 <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   d6a18:	2100      	movs	r1, #0
   d6a1a:	f7ff bfd5 	b.w	d69c8 <_ZN8RHRouter11deleteRouteEh>

000d6a1e <_ZN8RHRouter10addRouteToEhhh>:
{
   d6a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a20:	4616      	mov	r6, r2
   d6a22:	461f      	mov	r7, r3
   d6a24:	4604      	mov	r4, r0
   d6a26:	460d      	mov	r5, r1
   d6a28:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   d6a2a:	f500 728c 	add.w	r2, r0, #280	; 0x118
   d6a2e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d6a32:	5c11      	ldrb	r1, [r2, r0]
   d6a34:	42a9      	cmp	r1, r5
   d6a36:	d105      	bne.n	d6a44 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   d6a38:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   d6a3a:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d6a3e:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   d6a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6a44:	3301      	adds	r3, #1
   d6a46:	2b0a      	cmp	r3, #10
   d6a48:	d1f1      	bne.n	d6a2e <_ZN8RHRouter10addRouteToEhhh+0x10>
   d6a4a:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   d6a4c:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   d6a50:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   d6a54:	5c11      	ldrb	r1, [r2, r0]
   d6a56:	b919      	cbnz	r1, d6a60 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   d6a58:	4420      	add	r0, r4
   d6a5a:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   d6a5e:	e7ec      	b.n	d6a3a <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6a60:	3301      	adds	r3, #1
   d6a62:	2b0a      	cmp	r3, #10
   d6a64:	d1f4      	bne.n	d6a50 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   d6a66:	4620      	mov	r0, r4
   d6a68:	f7ff ffd6 	bl	d6a18 <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6a6c:	4620      	mov	r0, r4
   d6a6e:	f104 031e 	add.w	r3, r4, #30
	if (_routes[i].state == Invalid)
   d6a72:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   d6a76:	b92a      	cbnz	r2, d6a84 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   d6a78:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   d6a7c:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   d6a80:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6a84:	3003      	adds	r0, #3
   d6a86:	4298      	cmp	r0, r3
   d6a88:	d1f3      	bne.n	d6a72 <_ZN8RHRouter10addRouteToEhhh+0x54>
   d6a8a:	e7da      	b.n	d6a42 <_ZN8RHRouter10addRouteToEhhh+0x24>

000d6a8c <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6a8c:	f100 031e 	add.w	r3, r0, #30
	_routes[i].state = Invalid;
   d6a90:	2200      	movs	r2, #0
   d6a92:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   d6a96:	3003      	adds	r0, #3
   d6a98:	4298      	cmp	r0, r3
   d6a9a:	d1fa      	bne.n	d6a92 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   d6a9c:	4770      	bx	lr
	...

000d6aa0 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   d6aa0:	b510      	push	{r4, lr}
   d6aa2:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   d6aa4:	3004      	adds	r0, #4
   d6aa6:	f7ff fe55 	bl	d6754 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   d6aaa:	4b05      	ldr	r3, [pc, #20]	; (d6ac0 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   d6aac:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d6aae:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   d6ab2:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   d6ab4:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   d6ab8:	f7ff ffe8 	bl	d6a8c <_ZN8RHRouter17clearRoutingTableEv>
}
   d6abc:	4620      	mov	r0, r4
   d6abe:	bd10      	pop	{r4, pc}
   d6ac0:	000dc19c 	.word	0x000dc19c

000d6ac4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   d6ac4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6ac8:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d6aca:	6840      	ldr	r0, [r0, #4]
{
   d6acc:	9101      	str	r1, [sp, #4]
   d6ace:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d6ad0:	6803      	ldr	r3, [r0, #0]
{
   d6ad2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d6ad6:	699b      	ldr	r3, [r3, #24]
{
   d6ad8:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d6adc:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   d6ade:	4798      	blx	r3
   d6ae0:	f106 0805 	add.w	r8, r6, #5
   d6ae4:	4580      	cmp	r8, r0
   d6ae6:	d81c      	bhi.n	d6b22 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   d6ae8:	4d10      	ldr	r5, [pc, #64]	; (d6b2c <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   d6aea:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   d6aec:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   d6af0:	2300      	movs	r3, #0
   d6af2:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   d6af4:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   d6af8:	70eb      	strb	r3, [r5, #3]
   d6afa:	1c5a      	adds	r2, r3, #1
   d6afc:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   d6b00:	1d68      	adds	r0, r5, #5
   d6b02:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   d6b04:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   d6b06:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   d6b0a:	f004 fc85 	bl	db418 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d6b0e:	6823      	ldr	r3, [r4, #0]
   d6b10:	685b      	ldr	r3, [r3, #4]
   d6b12:	fa5f f288 	uxtb.w	r2, r8
   d6b16:	4629      	mov	r1, r5
   d6b18:	4620      	mov	r0, r4
}
   d6b1a:	b002      	add	sp, #8
   d6b1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   d6b20:	4718      	bx	r3
}
   d6b22:	2001      	movs	r0, #1
   d6b24:	b002      	add	sp, #8
   d6b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b2a:	bf00      	nop
   d6b2c:	2003e41e 	.word	0x2003e41e

000d6b30 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   d6b30:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   d6b32:	f89d 4010 	ldrb.w	r4, [sp, #16]
   d6b36:	9401      	str	r4, [sp, #4]
   d6b38:	7a04      	ldrb	r4, [r0, #8]
   d6b3a:	9400      	str	r4, [sp, #0]
   d6b3c:	f7ff ffc2 	bl	d6ac4 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   d6b40:	b002      	add	sp, #8
   d6b42:	bd10      	pop	{r4, pc}

000d6b44 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   d6b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b48:	b087      	sub	sp, #28
   d6b4a:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   d6b4c:	23ff      	movs	r3, #255	; 0xff
   d6b4e:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d6b52:	f10d 0317 	add.w	r3, sp, #23
   d6b56:	9302      	str	r3, [sp, #8]
   d6b58:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d6c2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   d6b5c:	f10d 0316 	add.w	r3, sp, #22
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	f10d 0315 	add.w	r3, sp, #21
   d6b66:	9300      	str	r3, [sp, #0]
{  
   d6b68:	4604      	mov	r4, r0
   d6b6a:	4688      	mov	r8, r1
   d6b6c:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d6b6e:	ab05      	add	r3, sp, #20
   d6b70:	f10d 0213 	add.w	r2, sp, #19
   d6b74:	4649      	mov	r1, r9
   d6b76:	3004      	adds	r0, #4
{  
   d6b78:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   d6b7c:	f7ff fe99 	bl	d68b2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   d6b80:	4605      	mov	r5, r0
   d6b82:	b908      	cbnz	r0, d6b88 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   d6b84:	2500      	movs	r5, #0
   d6b86:	e038      	b.n	d6bfa <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   d6b88:	6823      	ldr	r3, [r4, #0]
   d6b8a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d6b8e:	681b      	ldr	r3, [r3, #0]
   d6b90:	4649      	mov	r1, r9
   d6b92:	4620      	mov	r0, r4
   d6b94:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   d6b96:	f899 3000 	ldrb.w	r3, [r9]
   d6b9a:	7a22      	ldrb	r2, [r4, #8]
   d6b9c:	429a      	cmp	r2, r3
   d6b9e:	d001      	beq.n	d6ba4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   d6ba0:	2bff      	cmp	r3, #255	; 0xff
   d6ba2:	d12e      	bne.n	d6c02 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   d6ba4:	b117      	cbz	r7, d6bac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   d6ba6:	4b21      	ldr	r3, [pc, #132]	; (d6c2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d6ba8:	785b      	ldrb	r3, [r3, #1]
   d6baa:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   d6bac:	f1bb 0f00 	cmp.w	fp, #0
   d6bb0:	d003      	beq.n	d6bba <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   d6bb2:	4b1e      	ldr	r3, [pc, #120]	; (d6c2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d6bb4:	781b      	ldrb	r3, [r3, #0]
   d6bb6:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   d6bba:	f1ba 0f00 	cmp.w	sl, #0
   d6bbe:	d003      	beq.n	d6bc8 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   d6bc0:	4b1a      	ldr	r3, [pc, #104]	; (d6c2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d6bc2:	78db      	ldrb	r3, [r3, #3]
   d6bc4:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   d6bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d6bca:	b11b      	cbz	r3, d6bd4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   d6bcc:	4b17      	ldr	r3, [pc, #92]	; (d6c2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d6bce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d6bd0:	791b      	ldrb	r3, [r3, #4]
   d6bd2:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   d6bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d6bd6:	b11b      	cbz	r3, d6be0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   d6bd8:	4b14      	ldr	r3, [pc, #80]	; (d6c2c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   d6bda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d6bdc:	789b      	ldrb	r3, [r3, #2]
   d6bde:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d6be0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   d6be4:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d6be6:	4912      	ldr	r1, [pc, #72]	; (d6c30 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   d6be8:	3b05      	subs	r3, #5
   d6bea:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   d6bec:	429a      	cmp	r2, r3
		*len = msgLen;
   d6bee:	bf88      	it	hi
   d6bf0:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   d6bf2:	7832      	ldrb	r2, [r6, #0]
   d6bf4:	4640      	mov	r0, r8
   d6bf6:	f004 fc0f 	bl	db418 <memcpy>
}
   d6bfa:	4628      	mov	r0, r5
   d6bfc:	b007      	add	sp, #28
   d6bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   d6c02:	f899 3002 	ldrb.w	r3, [r9, #2]
   d6c06:	1c5a      	adds	r2, r3, #1
   d6c08:	f889 2002 	strb.w	r2, [r9, #2]
   d6c0c:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   d6c10:	429a      	cmp	r2, r3
   d6c12:	d9b7      	bls.n	d6b84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   d6c14:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   d6c18:	2b00      	cmp	r3, #0
   d6c1a:	d0b3      	beq.n	d6b84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   d6c1c:	6823      	ldr	r3, [r4, #0]
   d6c1e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   d6c22:	685b      	ldr	r3, [r3, #4]
   d6c24:	4649      	mov	r1, r9
   d6c26:	4620      	mov	r0, r4
   d6c28:	4798      	blx	r3
   d6c2a:	e7ab      	b.n	d6b84 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   d6c2c:	2003e41e 	.word	0x2003e41e
   d6c30:	2003e423 	.word	0x2003e423

000d6c34 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   d6c34:	b510      	push	{r4, lr}
   d6c36:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   d6c38:	6a00      	ldr	r0, [r0, #32]
   d6c3a:	6803      	ldr	r3, [r0, #0]
   d6c3c:	68db      	ldr	r3, [r3, #12]
   d6c3e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   d6c40:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   d6c44:	28ff      	cmp	r0, #255	; 0xff
   d6c46:	d002      	beq.n	d6c4e <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   d6c48:	2101      	movs	r1, #1
   d6c4a:	f003 fe91 	bl	da970 <pinMode>

    deselectSlave();
   d6c4e:	6823      	ldr	r3, [r4, #0]
   d6c50:	4620      	mov	r0, r4
   d6c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6c54:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   d6c56:	2064      	movs	r0, #100	; 0x64
   d6c58:	f000 ff4a 	bl	d7af0 <delay>
#endif
    
    return true;
}
   d6c5c:	2001      	movs	r0, #1
   d6c5e:	bd10      	pop	{r4, pc}

000d6c60 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   d6c60:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d6c64:	2100      	movs	r1, #0
   d6c66:	f003 be94 	b.w	da992 <digitalWrite>

000d6c6a <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   d6c6a:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   d6c6e:	2101      	movs	r1, #1
   d6c70:	f003 be8f 	b.w	da992 <digitalWrite>

000d6c74 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   d6c74:	b570      	push	{r4, r5, r6, lr}
   d6c76:	4604      	mov	r4, r0
   d6c78:	460d      	mov	r5, r1
   d6c7a:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   d6c7c:	f7ff fa4e 	bl	d611c <_ZN15RHGenericDriverC1Ev>
   d6c80:	4b03      	ldr	r3, [pc, #12]	; (d6c90 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   d6c82:	6023      	str	r3, [r4, #0]
   d6c84:	6226      	str	r6, [r4, #32]
   d6c86:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   d6c8a:	4620      	mov	r0, r4
   d6c8c:	bd70      	pop	{r4, r5, r6, pc}
   d6c8e:	bf00      	nop
   d6c90:	000dc1ac 	.word	0x000dc1ac

000d6c94 <_ZN11RHSPIDriver7spiReadEh>:
{
   d6c94:	b538      	push	{r3, r4, r5, lr}
   d6c96:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d6c98:	6a00      	ldr	r0, [r0, #32]
   d6c9a:	6803      	ldr	r3, [r0, #0]
   d6c9c:	6a1b      	ldr	r3, [r3, #32]
{
   d6c9e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d6ca0:	4798      	blx	r3
    selectSlave();
   d6ca2:	6823      	ldr	r3, [r4, #0]
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6ca8:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   d6caa:	6a20      	ldr	r0, [r4, #32]
   d6cac:	6803      	ldr	r3, [r0, #0]
   d6cae:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   d6cb2:	681b      	ldr	r3, [r3, #0]
   d6cb4:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d6cb6:	6a20      	ldr	r0, [r4, #32]
   d6cb8:	6803      	ldr	r3, [r0, #0]
   d6cba:	2100      	movs	r1, #0
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	4798      	blx	r3
    deselectSlave();
   d6cc0:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   d6cc2:	4605      	mov	r5, r0
    deselectSlave();
   d6cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6cc6:	4620      	mov	r0, r4
   d6cc8:	4798      	blx	r3
    _spi.endTransaction();
   d6cca:	6a20      	ldr	r0, [r4, #32]
   d6ccc:	6803      	ldr	r3, [r0, #0]
   d6cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6cd0:	4798      	blx	r3
}
   d6cd2:	4628      	mov	r0, r5
   d6cd4:	bd38      	pop	{r3, r4, r5, pc}

000d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   d6cd6:	b570      	push	{r4, r5, r6, lr}
   d6cd8:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d6cda:	6a00      	ldr	r0, [r0, #32]
   d6cdc:	6803      	ldr	r3, [r0, #0]
   d6cde:	6a1b      	ldr	r3, [r3, #32]
{
   d6ce0:	4616      	mov	r6, r2
   d6ce2:	460d      	mov	r5, r1
    _spi.beginTransaction();
   d6ce4:	4798      	blx	r3
    selectSlave();
   d6ce6:	6823      	ldr	r3, [r4, #0]
   d6ce8:	4620      	mov	r0, r4
   d6cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6cec:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   d6cee:	6a20      	ldr	r0, [r4, #32]
   d6cf0:	6803      	ldr	r3, [r0, #0]
   d6cf2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d6cf6:	681b      	ldr	r3, [r3, #0]
   d6cf8:	4798      	blx	r3
   d6cfa:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   d6cfc:	6a20      	ldr	r0, [r4, #32]
   d6cfe:	6803      	ldr	r3, [r0, #0]
   d6d00:	4631      	mov	r1, r6
   d6d02:	681b      	ldr	r3, [r3, #0]
   d6d04:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d6d06:	2001      	movs	r0, #1
   d6d08:	f000 fb98 	bl	d743c <HAL_Delay_Microseconds>
    deselectSlave();
   d6d0c:	6823      	ldr	r3, [r4, #0]
   d6d0e:	4620      	mov	r0, r4
   d6d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6d12:	4798      	blx	r3
    _spi.endTransaction();
   d6d14:	6a20      	ldr	r0, [r4, #32]
   d6d16:	6803      	ldr	r3, [r0, #0]
   d6d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d1a:	4798      	blx	r3
}
   d6d1c:	4628      	mov	r0, r5
   d6d1e:	bd70      	pop	{r4, r5, r6, pc}

000d6d20 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   d6d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d22:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d6d24:	6a00      	ldr	r0, [r0, #32]
{
   d6d26:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d6d28:	6803      	ldr	r3, [r0, #0]
   d6d2a:	6a1b      	ldr	r3, [r3, #32]
{
   d6d2c:	460f      	mov	r7, r1
   d6d2e:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d6d30:	4798      	blx	r3
    selectSlave();
   d6d32:	6823      	ldr	r3, [r4, #0]
   d6d34:	4620      	mov	r0, r4
   d6d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6d38:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   d6d3a:	6a20      	ldr	r0, [r4, #32]
   d6d3c:	6803      	ldr	r3, [r0, #0]
   d6d3e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   d6d42:	681b      	ldr	r3, [r3, #0]
   d6d44:	4798      	blx	r3
   d6d46:	442e      	add	r6, r5
   d6d48:	4607      	mov	r7, r0
    while (len--)
   d6d4a:	42b5      	cmp	r5, r6
   d6d4c:	d007      	beq.n	d6d5e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   d6d4e:	6a20      	ldr	r0, [r4, #32]
   d6d50:	6803      	ldr	r3, [r0, #0]
   d6d52:	2100      	movs	r1, #0
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	4798      	blx	r3
   d6d58:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   d6d5c:	e7f5      	b.n	d6d4a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   d6d5e:	6823      	ldr	r3, [r4, #0]
   d6d60:	4620      	mov	r0, r4
   d6d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6d64:	4798      	blx	r3
    _spi.endTransaction();
   d6d66:	6a20      	ldr	r0, [r4, #32]
   d6d68:	6803      	ldr	r3, [r0, #0]
   d6d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d6c:	4798      	blx	r3
}
   d6d6e:	4638      	mov	r0, r7
   d6d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d72 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   d6d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d74:	4604      	mov	r4, r0
    _spi.beginTransaction();
   d6d76:	6a00      	ldr	r0, [r0, #32]
{
   d6d78:	461e      	mov	r6, r3
    _spi.beginTransaction();
   d6d7a:	6803      	ldr	r3, [r0, #0]
   d6d7c:	6a1b      	ldr	r3, [r3, #32]
{
   d6d7e:	460f      	mov	r7, r1
   d6d80:	4615      	mov	r5, r2
    _spi.beginTransaction();
   d6d82:	4798      	blx	r3
    selectSlave();
   d6d84:	6823      	ldr	r3, [r4, #0]
   d6d86:	4620      	mov	r0, r4
   d6d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d6d8a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   d6d8c:	6a20      	ldr	r0, [r4, #32]
   d6d8e:	6803      	ldr	r3, [r0, #0]
   d6d90:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d6d94:	681b      	ldr	r3, [r3, #0]
   d6d96:	4798      	blx	r3
   d6d98:	442e      	add	r6, r5
   d6d9a:	4607      	mov	r7, r0
    while (len--)
   d6d9c:	42b5      	cmp	r5, r6
   d6d9e:	d006      	beq.n	d6dae <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   d6da0:	6a20      	ldr	r0, [r4, #32]
   d6da2:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6da6:	6803      	ldr	r3, [r0, #0]
   d6da8:	681b      	ldr	r3, [r3, #0]
   d6daa:	4798      	blx	r3
    while (len--)
   d6dac:	e7f6      	b.n	d6d9c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   d6dae:	6823      	ldr	r3, [r4, #0]
   d6db0:	4620      	mov	r0, r4
   d6db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d6db4:	4798      	blx	r3
    _spi.endTransaction();
   d6db6:	6a20      	ldr	r0, [r4, #32]
   d6db8:	6803      	ldr	r3, [r0, #0]
   d6dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6dbc:	4798      	blx	r3
}
   d6dbe:	4638      	mov	r0, r7
   d6dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6dc2 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   d6dc2:	6a00      	ldr	r0, [r0, #32]
   d6dc4:	6803      	ldr	r3, [r0, #0]
   d6dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6dc8:	4718      	bx	r3

000d6dca <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   d6dca:	2001      	movs	r0, #1
   d6dcc:	4770      	bx	lr

000d6dce <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   d6dce:	20fb      	movs	r0, #251	; 0xfb
   d6dd0:	4770      	bx	lr

000d6dd2 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   d6dd2:	4770      	bx	lr

000d6dd4 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   d6dd4:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   d6dd6:	7903      	ldrb	r3, [r0, #4]
   d6dd8:	2b05      	cmp	r3, #5
{
   d6dda:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   d6ddc:	d010      	beq.n	d6e00 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   d6dde:	6803      	ldr	r3, [r0, #0]
   d6de0:	2105      	movs	r1, #5
   d6de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6de6:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   d6de8:	2207      	movs	r2, #7
   d6dea:	2101      	movs	r1, #1
   d6dec:	4620      	mov	r0, r4
   d6dee:	f7ff ff72 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   d6df2:	2280      	movs	r2, #128	; 0x80
   d6df4:	2140      	movs	r1, #64	; 0x40
   d6df6:	4620      	mov	r0, r4
   d6df8:	f7ff ff6d 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   d6dfc:	2305      	movs	r3, #5
   d6dfe:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   d6e00:	7923      	ldrb	r3, [r4, #4]
   d6e02:	2b05      	cmp	r3, #5
   d6e04:	d0fc      	beq.n	d6e00 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   d6e06:	7e20      	ldrb	r0, [r4, #24]
}
   d6e08:	bd10      	pop	{r4, pc}

000d6e0a <_ZN7RH_RF95D0Ev>:
   d6e0a:	b510      	push	{r4, lr}
   d6e0c:	f44f 7198 	mov.w	r1, #304	; 0x130
   d6e10:	4604      	mov	r4, r0
   d6e12:	f003 fe7b 	bl	dab0c <_ZdlPvj>
   d6e16:	4620      	mov	r0, r4
   d6e18:	bd10      	pop	{r4, pc}

000d6e1a <_ZN7RH_RF955sleepEv>:
{
   d6e1a:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   d6e1c:	7903      	ldrb	r3, [r0, #4]
   d6e1e:	2b01      	cmp	r3, #1
{
   d6e20:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   d6e22:	d00b      	beq.n	d6e3c <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   d6e24:	6803      	ldr	r3, [r0, #0]
   d6e26:	2101      	movs	r1, #1
   d6e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6e2c:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   d6e2e:	2200      	movs	r2, #0
   d6e30:	2101      	movs	r1, #1
   d6e32:	4620      	mov	r0, r4
   d6e34:	f7ff ff4f 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   d6e38:	2301      	movs	r3, #1
   d6e3a:	7123      	strb	r3, [r4, #4]
}
   d6e3c:	2001      	movs	r0, #1
   d6e3e:	bd10      	pop	{r4, pc}

000d6e40 <_ZN7RH_RF954recvEPhS0_>:
{
   d6e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   d6e42:	6803      	ldr	r3, [r0, #0]
   d6e44:	68db      	ldr	r3, [r3, #12]
{
   d6e46:	4604      	mov	r4, r0
   d6e48:	460f      	mov	r7, r1
   d6e4a:	4615      	mov	r5, r2
    if (!available())
   d6e4c:	4798      	blx	r3
   d6e4e:	4606      	mov	r6, r0
   d6e50:	b1b0      	cbz	r0, d6e80 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   d6e52:	b187      	cbz	r7, d6e76 <_ZN7RH_RF954recvEPhS0_+0x36>
   d6e54:	b17d      	cbz	r5, d6e76 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   d6e56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6e5a:	782a      	ldrb	r2, [r5, #0]
   d6e5c:	3b03      	subs	r3, #3
   d6e5e:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   d6e60:	bfde      	ittt	le
   d6e62:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   d6e66:	3b04      	suble	r3, #4
   d6e68:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   d6e6a:	782a      	ldrb	r2, [r5, #0]
   d6e6c:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d6e70:	4638      	mov	r0, r7
   d6e72:	f004 fad1 	bl	db418 <memcpy>
    _rxBufValid = false;
   d6e76:	2300      	movs	r3, #0
   d6e78:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d6e7c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   d6e80:	4630      	mov	r0, r6
   d6e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e84 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   d6e84:	b538      	push	{r3, r4, r5, lr}
   d6e86:	4604      	mov	r4, r0
   d6e88:	4615      	mov	r5, r2
    _rxBufValid(0)
   d6e8a:	461a      	mov	r2, r3
   d6e8c:	f7ff fef2 	bl	d6c74 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   d6e90:	4b09      	ldr	r3, [pc, #36]	; (d6eb8 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   d6e92:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   d6e94:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   d6e96:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   d6e98:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   d6e9c:	2201      	movs	r2, #1
    _rxBufValid(0)
   d6e9e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   d6ea2:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   d6ea6:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   d6eaa:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   d6eae:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   d6eb2:	4620      	mov	r0, r4
   d6eb4:	bd38      	pop	{r3, r4, r5, pc}
   d6eb6:	bf00      	nop
   d6eb8:	000dc244 	.word	0x000dc244

000d6ebc <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   d6ebc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d6ec0:	2b03      	cmp	r3, #3
   d6ec2:	d91b      	bls.n	d6efc <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   d6ec4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6ec8:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   d6eca:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   d6ece:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   d6ed0:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   d6ed4:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   d6ed6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   d6eda:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   d6edc:	7983      	ldrb	r3, [r0, #6]
   d6ede:	b933      	cbnz	r3, d6eee <_ZN7RH_RF9513validateRxBufEv+0x32>
   d6ee0:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   d6ee2:	7942      	ldrb	r2, [r0, #5]
   d6ee4:	429a      	cmp	r2, r3
   d6ee6:	d002      	beq.n	d6eee <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   d6ee8:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   d6eea:	2bff      	cmp	r3, #255	; 0xff
   d6eec:	d106      	bne.n	d6efc <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   d6eee:	8a83      	ldrh	r3, [r0, #20]
   d6ef0:	3301      	adds	r3, #1
   d6ef2:	b29b      	uxth	r3, r3
   d6ef4:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   d6ef6:	2301      	movs	r3, #1
   d6ef8:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   d6efc:	4770      	bx	lr
	...

000d6f00 <_ZN7RH_RF9512setFrequencyEf>:
{
   d6f00:	b538      	push	{r3, r4, r5, lr}
   d6f02:	4604      	mov	r4, r0
   d6f04:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d6f08:	ee10 0a10 	vmov	r0, s0
{
   d6f0c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d6f10:	f003 ff6a 	bl	dade8 <__aeabi_f2d>
   d6f14:	a317      	add	r3, pc, #92	; (adr r3, d6f74 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   d6f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f1a:	f003 ffbd 	bl	dae98 <__aeabi_dmul>
   d6f1e:	a317      	add	r3, pc, #92	; (adr r3, d6f7c <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   d6f20:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f24:	f004 f8e2 	bl	db0ec <__aeabi_ddiv>
   d6f28:	f004 f9c8 	bl	db2bc <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d6f2c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   d6f2e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   d6f30:	f3c0 4207 	ubfx	r2, r0, #16, #8
   d6f34:	4620      	mov	r0, r4
   d6f36:	f7ff fece 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   d6f3a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   d6f3e:	2107      	movs	r1, #7
   d6f40:	4620      	mov	r0, r4
   d6f42:	f7ff fec8 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   d6f46:	b2ea      	uxtb	r2, r5
   d6f48:	2108      	movs	r1, #8
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	f7ff fec3 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   d6f50:	eddf 7a07 	vldr	s15, [pc, #28]	; d6f70 <_ZN7RH_RF9512setFrequencyEf+0x70>
   d6f54:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   d6f58:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   d6f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d6f60:	bfac      	ite	ge
   d6f62:	2301      	movge	r3, #1
   d6f64:	2300      	movlt	r3, #0
}
   d6f66:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   d6f68:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   d6f6c:	bd38      	pop	{r3, r4, r5, pc}
   d6f6e:	bf00      	nop
   d6f70:	4442c000 	.word	0x4442c000
   d6f74:	00000000 	.word	0x00000000
   d6f78:	412e8480 	.word	0x412e8480
   d6f7c:	00000000 	.word	0x00000000
   d6f80:	404e8480 	.word	0x404e8480

000d6f84 <_ZN7RH_RF9511setModeIdleEv>:
{
   d6f84:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   d6f86:	7903      	ldrb	r3, [r0, #4]
   d6f88:	2b02      	cmp	r3, #2
{
   d6f8a:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   d6f8c:	d00b      	beq.n	d6fa6 <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   d6f8e:	6803      	ldr	r3, [r0, #0]
   d6f90:	2102      	movs	r1, #2
   d6f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d6f96:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   d6f98:	2201      	movs	r2, #1
   d6f9a:	4611      	mov	r1, r2
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	f7ff fe9a 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   d6fa2:	2302      	movs	r3, #2
   d6fa4:	7123      	strb	r3, [r4, #4]
}
   d6fa6:	bd10      	pop	{r4, pc}

000d6fa8 <_ZN7RH_RF9515handleInterruptEv>:
{
   d6fa8:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d6faa:	2112      	movs	r1, #18
{
   d6fac:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d6fae:	f7ff fe71 	bl	d6c94 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d6fb2:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   d6fb4:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d6fb6:	4620      	mov	r0, r4
   d6fb8:	f7ff fe6c 	bl	d6c94 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d6fbc:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   d6fbe:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d6fc0:	2112      	movs	r1, #18
   d6fc2:	4620      	mov	r0, r4
   d6fc4:	f7ff fe87 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   d6fc8:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   d6fca:	2b04      	cmp	r3, #4
   d6fcc:	d107      	bne.n	d6fde <_ZN7RH_RF9515handleInterruptEv+0x36>
   d6fce:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   d6fd2:	d117      	bne.n	d7004 <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   d6fd4:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   d6fd8:	b10b      	cbz	r3, d6fde <_ZN7RH_RF9515handleInterruptEv+0x36>
   d6fda:	0670      	lsls	r0, r6, #25
   d6fdc:	d512      	bpl.n	d7004 <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   d6fde:	7923      	ldrb	r3, [r4, #4]
   d6fe0:	2b04      	cmp	r3, #4
   d6fe2:	d101      	bne.n	d6fe8 <_ZN7RH_RF9515handleInterruptEv+0x40>
   d6fe4:	0669      	lsls	r1, r5, #25
   d6fe6:	d422      	bmi.n	d702e <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   d6fe8:	7923      	ldrb	r3, [r4, #4]
   d6fea:	2b03      	cmp	r3, #3
   d6fec:	d101      	bne.n	d6ff2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
   d6fee:	072a      	lsls	r2, r5, #28
   d6ff0:	d469      	bmi.n	d70c6 <_ZN7RH_RF9515handleInterruptEv+0x11e>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   d6ff2:	7923      	ldrb	r3, [r4, #4]
   d6ff4:	2b05      	cmp	r3, #5
   d6ff6:	d10e      	bne.n	d7016 <_ZN7RH_RF9515handleInterruptEv+0x6e>
   d6ff8:	076b      	lsls	r3, r5, #29
   d6ffa:	d50c      	bpl.n	d7016 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   d6ffc:	f005 0501 	and.w	r5, r5, #1
   d7000:	7625      	strb	r5, [r4, #24]
   d7002:	e059      	b.n	d70b8 <_ZN7RH_RF9515handleInterruptEv+0x110>
	_rxBad++;
   d7004:	8a63      	ldrh	r3, [r4, #18]
   d7006:	3301      	adds	r3, #1
   d7008:	b29b      	uxth	r3, r3
   d700a:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   d700c:	2300      	movs	r3, #0
   d700e:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   d7012:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d7016:	22ff      	movs	r2, #255	; 0xff
   d7018:	2112      	movs	r1, #18
   d701a:	4620      	mov	r0, r4
   d701c:	f7ff fe5b 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d7020:	4620      	mov	r0, r4
   d7022:	22ff      	movs	r2, #255	; 0xff
}
   d7024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   d7028:	2112      	movs	r1, #18
   d702a:	f7ff be54 	b.w	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d702e:	2113      	movs	r1, #19
   d7030:	4620      	mov	r0, r4
   d7032:	f7ff fe2f 	bl	d6c94 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d7036:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   d7038:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   d703a:	4620      	mov	r0, r4
   d703c:	f7ff fe2a 	bl	d6c94 <_ZN11RHSPIDriver7spiReadEh>
   d7040:	210d      	movs	r1, #13
   d7042:	4602      	mov	r2, r0
   d7044:	4620      	mov	r0, r4
   d7046:	f7ff fe46 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   d704a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   d704e:	462b      	mov	r3, r5
   d7050:	2100      	movs	r1, #0
   d7052:	4620      	mov	r0, r4
   d7054:	f7ff fe64 	bl	d6d20 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d7058:	2119      	movs	r1, #25
	_bufLen = len;
   d705a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   d705e:	4620      	mov	r0, r4
   d7060:	f7ff fe18 	bl	d6c94 <_ZN11RHSPIDriver7spiReadEh>
   d7064:	b240      	sxtb	r0, r0
   d7066:	2800      	cmp	r0, #0
   d7068:	bfb8      	it	lt
   d706a:	3003      	addlt	r0, #3
   d706c:	1080      	asrs	r0, r0, #2
   d706e:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d7072:	211a      	movs	r1, #26
   d7074:	4620      	mov	r0, r4
   d7076:	f7ff fe0d 	bl	d6c94 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   d707a:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d707e:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   d7080:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   d7082:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d7084:	bfa9      	itett	ge
   d7086:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   d7088:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d708a:	b21b      	sxthge	r3, r3
   d708c:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   d708e:	bfb2      	itee	lt
   d7090:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   d7092:	220f      	movge	r2, #15
   d7094:	fb93 f3f2 	sdivge	r3, r3, r2
   d7098:	b21b      	sxth	r3, r3
   d709a:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   d709c:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   d70a0:	b173      	cbz	r3, d70c0 <_ZN7RH_RF9515handleInterruptEv+0x118>
	    _lastRssi -= 157;
   d70a2:	8a23      	ldrh	r3, [r4, #16]
   d70a4:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   d70a6:	b21b      	sxth	r3, r3
   d70a8:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   d70aa:	4620      	mov	r0, r4
   d70ac:	f7ff ff06 	bl	d6ebc <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   d70b0:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   d70b4:	2b00      	cmp	r3, #0
   d70b6:	d0ae      	beq.n	d7016 <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   d70b8:	4620      	mov	r0, r4
   d70ba:	f7ff ff63 	bl	d6f84 <_ZN7RH_RF9511setModeIdleEv>
   d70be:	e7aa      	b.n	d7016 <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   d70c0:	8a23      	ldrh	r3, [r4, #16]
   d70c2:	3ba4      	subs	r3, #164	; 0xa4
   d70c4:	e7ef      	b.n	d70a6 <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   d70c6:	8ae3      	ldrh	r3, [r4, #22]
   d70c8:	3301      	adds	r3, #1
   d70ca:	b29b      	uxth	r3, r3
   d70cc:	82e3      	strh	r3, [r4, #22]
	setModeIdle();
   d70ce:	e7f3      	b.n	d70b8 <_ZN7RH_RF9515handleInterruptEv+0x110>

000d70d0 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   d70d0:	4b02      	ldr	r3, [pc, #8]	; (d70dc <_ZN7RH_RF954isr0Ev+0xc>)
   d70d2:	6818      	ldr	r0, [r3, #0]
   d70d4:	b108      	cbz	r0, d70da <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   d70d6:	f7ff bf67 	b.w	d6fa8 <_ZN7RH_RF9515handleInterruptEv>
}
   d70da:	4770      	bx	lr
   d70dc:	2003e520 	.word	0x2003e520

000d70e0 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   d70e0:	4b02      	ldr	r3, [pc, #8]	; (d70ec <_ZN7RH_RF954isr1Ev+0xc>)
   d70e2:	6858      	ldr	r0, [r3, #4]
   d70e4:	b108      	cbz	r0, d70ea <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   d70e6:	f7ff bf5f 	b.w	d6fa8 <_ZN7RH_RF9515handleInterruptEv>
}
   d70ea:	4770      	bx	lr
   d70ec:	2003e520 	.word	0x2003e520

000d70f0 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   d70f0:	4b02      	ldr	r3, [pc, #8]	; (d70fc <_ZN7RH_RF954isr2Ev+0xc>)
   d70f2:	6898      	ldr	r0, [r3, #8]
   d70f4:	b108      	cbz	r0, d70fa <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   d70f6:	f7ff bf57 	b.w	d6fa8 <_ZN7RH_RF9515handleInterruptEv>
}
   d70fa:	4770      	bx	lr
   d70fc:	2003e520 	.word	0x2003e520

000d7100 <_ZN7RH_RF959setModeRxEv>:
{
   d7100:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   d7102:	7903      	ldrb	r3, [r0, #4]
   d7104:	2b04      	cmp	r3, #4
{
   d7106:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   d7108:	d010      	beq.n	d712c <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   d710a:	6803      	ldr	r3, [r0, #0]
   d710c:	2104      	movs	r1, #4
   d710e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d7112:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   d7114:	2205      	movs	r2, #5
   d7116:	2101      	movs	r1, #1
   d7118:	4620      	mov	r0, r4
   d711a:	f7ff fddc 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   d711e:	2200      	movs	r2, #0
   d7120:	2140      	movs	r1, #64	; 0x40
   d7122:	4620      	mov	r0, r4
   d7124:	f7ff fdd7 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   d7128:	2304      	movs	r3, #4
   d712a:	7123      	strb	r3, [r4, #4]
}
   d712c:	bd10      	pop	{r4, pc}

000d712e <_ZN7RH_RF959availableEv>:
{
   d712e:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   d7130:	7903      	ldrb	r3, [r0, #4]
   d7132:	2b03      	cmp	r3, #3
{
   d7134:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   d7136:	d005      	beq.n	d7144 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   d7138:	f7ff ffe2 	bl	d7100 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   d713c:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   d7140:	b2c0      	uxtb	r0, r0
}
   d7142:	bd10      	pop	{r4, pc}
	return false;
   d7144:	2000      	movs	r0, #0
   d7146:	e7fc      	b.n	d7142 <_ZN7RH_RF959availableEv+0x14>

000d7148 <_ZN7RH_RF959setModeTxEv>:
{
   d7148:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   d714a:	7903      	ldrb	r3, [r0, #4]
   d714c:	2b03      	cmp	r3, #3
{
   d714e:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   d7150:	d010      	beq.n	d7174 <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   d7152:	6803      	ldr	r3, [r0, #0]
   d7154:	2103      	movs	r1, #3
   d7156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   d715a:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   d715c:	2203      	movs	r2, #3
   d715e:	2101      	movs	r1, #1
   d7160:	4620      	mov	r0, r4
   d7162:	f7ff fdb8 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   d7166:	2240      	movs	r2, #64	; 0x40
   d7168:	4611      	mov	r1, r2
   d716a:	4620      	mov	r0, r4
   d716c:	f7ff fdb3 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   d7170:	2303      	movs	r3, #3
   d7172:	7123      	strb	r3, [r4, #4]
}
   d7174:	bd10      	pop	{r4, pc}

000d7176 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d7176:	2afb      	cmp	r2, #251	; 0xfb
{
   d7178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d717a:	4604      	mov	r4, r0
   d717c:	460f      	mov	r7, r1
   d717e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   d7180:	d902      	bls.n	d7188 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   d7182:	2600      	movs	r6, #0
}
   d7184:	4630      	mov	r0, r6
   d7186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   d7188:	6803      	ldr	r3, [r0, #0]
   d718a:	6a1b      	ldr	r3, [r3, #32]
   d718c:	4798      	blx	r3
    setModeIdle();
   d718e:	4620      	mov	r0, r4
   d7190:	f7ff fef8 	bl	d6f84 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   d7194:	6823      	ldr	r3, [r4, #0]
   d7196:	4620      	mov	r0, r4
   d7198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d719a:	4798      	blx	r3
   d719c:	4606      	mov	r6, r0
   d719e:	2800      	cmp	r0, #0
   d71a0:	d0ef      	beq.n	d7182 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   d71a2:	2200      	movs	r2, #0
   d71a4:	210d      	movs	r1, #13
   d71a6:	4620      	mov	r0, r4
   d71a8:	f7ff fd95 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   d71ac:	7ae2      	ldrb	r2, [r4, #11]
   d71ae:	2100      	movs	r1, #0
   d71b0:	4620      	mov	r0, r4
   d71b2:	f7ff fd90 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   d71b6:	7b22      	ldrb	r2, [r4, #12]
   d71b8:	2100      	movs	r1, #0
   d71ba:	4620      	mov	r0, r4
   d71bc:	f7ff fd8b 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   d71c0:	7b62      	ldrb	r2, [r4, #13]
   d71c2:	2100      	movs	r1, #0
   d71c4:	4620      	mov	r0, r4
   d71c6:	f7ff fd86 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   d71ca:	7ba2      	ldrb	r2, [r4, #14]
   d71cc:	2100      	movs	r1, #0
   d71ce:	4620      	mov	r0, r4
   d71d0:	f7ff fd81 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   d71d4:	462b      	mov	r3, r5
   d71d6:	463a      	mov	r2, r7
   d71d8:	2100      	movs	r1, #0
   d71da:	4620      	mov	r0, r4
   d71dc:	f7ff fdc9 	bl	d6d72 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   d71e0:	1d2a      	adds	r2, r5, #4
   d71e2:	b2d2      	uxtb	r2, r2
   d71e4:	2122      	movs	r1, #34	; 0x22
   d71e6:	4620      	mov	r0, r4
   d71e8:	f7ff fd75 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   d71ec:	4620      	mov	r0, r4
   d71ee:	f7ff ffab 	bl	d7148 <_ZN7RH_RF959setModeTxEv>
    return true;
   d71f2:	e7c7      	b.n	d7184 <_ZN7RH_RF954sendEPKhh+0xe>

000d71f4 <_ZN7RH_RF9510setTxPowerEab>:
{
   d71f4:	b538      	push	{r3, r4, r5, lr}
   d71f6:	4605      	mov	r5, r0
   d71f8:	460c      	mov	r4, r1
    _useRFO = useRFO;
   d71fa:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   d71fe:	b172      	cbz	r2, d721e <_ZN7RH_RF9510setTxPowerEab+0x2a>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   d7200:	f381 0204 	usat	r2, #4, r1
   d7204:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   d7208:	b2d2      	uxtb	r2, r2
   d720a:	2109      	movs	r1, #9
   d720c:	f7ff fd63 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d7210:	2204      	movs	r2, #4
   d7212:	214d      	movs	r1, #77	; 0x4d
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d7214:	4628      	mov	r0, r5
}
   d7216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d721a:	f7ff bd5c 	b.w	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 20)
   d721e:	2914      	cmp	r1, #20
   d7220:	dc10      	bgt.n	d7244 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power < 2)
   d7222:	2901      	cmp	r1, #1
   d7224:	dd10      	ble.n	d7248 <_ZN7RH_RF9510setTxPowerEab+0x54>
	if (power > 17)
   d7226:	2911      	cmp	r1, #17
   d7228:	dd0f      	ble.n	d724a <_ZN7RH_RF9510setTxPowerEab+0x56>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   d722a:	2207      	movs	r2, #7
   d722c:	214d      	movs	r1, #77	; 0x4d
   d722e:	4628      	mov	r0, r5
   d7230:	f7ff fd51 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   d7234:	3c03      	subs	r4, #3
   d7236:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   d7238:	1ea2      	subs	r2, r4, #2
   d723a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d723e:	b2d2      	uxtb	r2, r2
   d7240:	2109      	movs	r1, #9
   d7242:	e7e7      	b.n	d7214 <_ZN7RH_RF9510setTxPowerEab+0x20>
	    power = 20;
   d7244:	2414      	movs	r4, #20
   d7246:	e7f0      	b.n	d722a <_ZN7RH_RF9510setTxPowerEab+0x36>
	    power = 2;
   d7248:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   d724a:	2204      	movs	r2, #4
   d724c:	214d      	movs	r1, #77	; 0x4d
   d724e:	4628      	mov	r0, r5
   d7250:	f7ff fd41 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
   d7254:	e7f0      	b.n	d7238 <_ZN7RH_RF9510setTxPowerEab+0x44>

000d7256 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   d7256:	b538      	push	{r3, r4, r5, lr}
   d7258:	460c      	mov	r4, r1
   d725a:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   d725c:	780a      	ldrb	r2, [r1, #0]
   d725e:	211d      	movs	r1, #29
   d7260:	f7ff fd39 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   d7264:	7862      	ldrb	r2, [r4, #1]
   d7266:	211e      	movs	r1, #30
   d7268:	4628      	mov	r0, r5
   d726a:	f7ff fd34 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d726e:	78a2      	ldrb	r2, [r4, #2]
   d7270:	4628      	mov	r0, r5
   d7272:	2126      	movs	r1, #38	; 0x26
}
   d7274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   d7278:	f7ff bd2d 	b.w	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>

000d727c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d727c:	2905      	cmp	r1, #5
{
   d727e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   d7280:	d80f      	bhi.n	d72a2 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d7282:	4b09      	ldr	r3, [pc, #36]	; (d72a8 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   d7284:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d7288:	185c      	adds	r4, r3, r1
   d728a:	5a5a      	ldrh	r2, [r3, r1]
   d728c:	78a3      	ldrb	r3, [r4, #2]
   d728e:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   d7292:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   d7294:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   d7298:	f7ff ffdd 	bl	d7256 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   d729c:	2001      	movs	r0, #1
}
   d729e:	b002      	add	sp, #8
   d72a0:	bd10      	pop	{r4, pc}
        return false;
   d72a2:	2000      	movs	r0, #0
   d72a4:	e7fb      	b.n	d729e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   d72a6:	bf00      	nop
   d72a8:	000dc22c 	.word	0x000dc22c

000d72ac <_ZN7RH_RF9517setPreambleLengthEt>:
{
   d72ac:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d72ae:	0a0a      	lsrs	r2, r1, #8
{
   d72b0:	4605      	mov	r5, r0
   d72b2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   d72b4:	2120      	movs	r1, #32
   d72b6:	f7ff fd0e 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d72ba:	b2e2      	uxtb	r2, r4
   d72bc:	4628      	mov	r0, r5
   d72be:	2121      	movs	r1, #33	; 0x21
}
   d72c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   d72c4:	f7ff bd07 	b.w	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>

000d72c8 <_ZN7RH_RF954initEv>:
{
   d72c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d72ca:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   d72cc:	f7ff fcb2 	bl	d6c34 <_ZN11RHSPIDriver4initEv>
   d72d0:	4606      	mov	r6, r0
   d72d2:	b918      	cbnz	r0, d72dc <_ZN7RH_RF954initEv+0x14>
	return false;
   d72d4:	2600      	movs	r6, #0
}
   d72d6:	4630      	mov	r0, r6
   d72d8:	b002      	add	sp, #8
   d72da:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   d72dc:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   d72e0:	2dff      	cmp	r5, #255	; 0xff
   d72e2:	d052      	beq.n	d738a <_ZN7RH_RF954initEv+0xc2>
	spiUsingInterrupt(interruptNumber);
   d72e4:	4629      	mov	r1, r5
   d72e6:	4620      	mov	r0, r4
   d72e8:	f7ff fd6b 	bl	d6dc2 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   d72ec:	2280      	movs	r2, #128	; 0x80
   d72ee:	2101      	movs	r1, #1
   d72f0:	4620      	mov	r0, r4
   d72f2:	f7ff fcf0 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   d72f6:	200a      	movs	r0, #10
   d72f8:	f000 fbfa 	bl	d7af0 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   d72fc:	2101      	movs	r1, #1
   d72fe:	4620      	mov	r0, r4
   d7300:	f7ff fcc8 	bl	d6c94 <_ZN11RHSPIDriver7spiReadEh>
   d7304:	2880      	cmp	r0, #128	; 0x80
   d7306:	d1e5      	bne.n	d72d4 <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   d7308:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   d730c:	28ff      	cmp	r0, #255	; 0xff
   d730e:	d01c      	beq.n	d734a <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   d7310:	2100      	movs	r1, #0
   d7312:	f003 fb2d 	bl	da970 <pinMode>
	if (_myInterruptIndex == 0xff)
   d7316:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   d731a:	2bff      	cmp	r3, #255	; 0xff
   d731c:	d107      	bne.n	d732e <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   d731e:	4a25      	ldr	r2, [pc, #148]	; (d73b4 <_ZN7RH_RF954initEv+0xec>)
   d7320:	7813      	ldrb	r3, [r2, #0]
   d7322:	2b03      	cmp	r3, #3
   d7324:	d8d6      	bhi.n	d72d4 <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   d7326:	1c59      	adds	r1, r3, #1
   d7328:	7011      	strb	r1, [r2, #0]
   d732a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   d732e:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   d7332:	4b21      	ldr	r3, [pc, #132]	; (d73b8 <_ZN7RH_RF954initEv+0xf0>)
   d7334:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   d7338:	bb52      	cbnz	r2, d7390 <_ZN7RH_RF954initEv+0xc8>
	    attachInterrupt(interruptNumber, isr0, RISING);
   d733a:	4920      	ldr	r1, [pc, #128]	; (d73bc <_ZN7RH_RF954initEv+0xf4>)
   d733c:	9200      	str	r2, [sp, #0]
   d733e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7342:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   d7344:	b2a8      	uxth	r0, r5
   d7346:	f001 f98d 	bl	d8664 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   d734a:	2200      	movs	r2, #0
   d734c:	210e      	movs	r1, #14
   d734e:	4620      	mov	r0, r4
   d7350:	f7ff fcc1 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   d7354:	2200      	movs	r2, #0
   d7356:	210f      	movs	r1, #15
   d7358:	4620      	mov	r0, r4
   d735a:	f7ff fcbc 	bl	d6cd6 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   d735e:	4620      	mov	r0, r4
   d7360:	f7ff fe10 	bl	d6f84 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   d7364:	2100      	movs	r1, #0
   d7366:	4620      	mov	r0, r4
   d7368:	f7ff ff88 	bl	d727c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   d736c:	2108      	movs	r1, #8
   d736e:	4620      	mov	r0, r4
   d7370:	f7ff ff9c 	bl	d72ac <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   d7374:	ed9f 0a12 	vldr	s0, [pc, #72]	; d73c0 <_ZN7RH_RF954initEv+0xf8>
   d7378:	4620      	mov	r0, r4
   d737a:	f7ff fdc1 	bl	d6f00 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(13);
   d737e:	2200      	movs	r2, #0
   d7380:	210d      	movs	r1, #13
   d7382:	4620      	mov	r0, r4
   d7384:	f7ff ff36 	bl	d71f4 <_ZN7RH_RF9510setTxPowerEab>
    return true;
   d7388:	e7a5      	b.n	d72d6 <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   d738a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d738e:	e7ad      	b.n	d72ec <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   d7390:	2a01      	cmp	r2, #1
   d7392:	f04f 0300 	mov.w	r3, #0
   d7396:	d104      	bne.n	d73a2 <_ZN7RH_RF954initEv+0xda>
	    attachInterrupt(interruptNumber, isr1, RISING);
   d7398:	9300      	str	r3, [sp, #0]
   d739a:	490a      	ldr	r1, [pc, #40]	; (d73c4 <_ZN7RH_RF954initEv+0xfc>)
   d739c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d73a0:	e7d0      	b.n	d7344 <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   d73a2:	2a02      	cmp	r2, #2
   d73a4:	d196      	bne.n	d72d4 <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   d73a6:	9300      	str	r3, [sp, #0]
   d73a8:	4907      	ldr	r1, [pc, #28]	; (d73c8 <_ZN7RH_RF954initEv+0x100>)
   d73aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d73ae:	2201      	movs	r2, #1
   d73b0:	e7c8      	b.n	d7344 <_ZN7RH_RF954initEv+0x7c>
   d73b2:	bf00      	nop
   d73b4:	2003e51d 	.word	0x2003e51d
   d73b8:	2003e520 	.word	0x2003e520
   d73bc:	000d70d1 	.word	0x000d70d1
   d73c0:	43d90000 	.word	0x43d90000
   d73c4:	000d70e1 	.word	0x000d70e1
   d73c8:	000d70f1 	.word	0x000d70f1

000d73cc <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d73cc:	b508      	push	{r3, lr}
   d73ce:	4b02      	ldr	r3, [pc, #8]	; (d73d8 <cellular_signal+0xc>)
   d73d0:	681b      	ldr	r3, [r3, #0]
   d73d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d73d4:	9301      	str	r3, [sp, #4]
   d73d6:	bd08      	pop	{r3, pc}
   d73d8:	00030274 	.word	0x00030274

000d73dc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d73dc:	b508      	push	{r3, lr}
   d73de:	4b02      	ldr	r3, [pc, #8]	; (d73e8 <os_mutex_recursive_create+0xc>)
   d73e0:	681b      	ldr	r3, [r3, #0]
   d73e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d73e4:	9301      	str	r3, [sp, #4]
   d73e6:	bd08      	pop	{r3, pc}
   d73e8:	00030248 	.word	0x00030248

000d73ec <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d73ec:	b508      	push	{r3, lr}
   d73ee:	4b02      	ldr	r3, [pc, #8]	; (d73f8 <os_mutex_recursive_destroy+0xc>)
   d73f0:	681b      	ldr	r3, [r3, #0]
   d73f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d73f4:	9301      	str	r3, [sp, #4]
   d73f6:	bd08      	pop	{r3, pc}
   d73f8:	00030248 	.word	0x00030248

000d73fc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <os_mutex_recursive_lock+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	00030248 	.word	0x00030248

000d740c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <os_mutex_recursive_unlock+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	00030248 	.word	0x00030248

000d741c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d741c:	b508      	push	{r3, lr}
   d741e:	4b02      	ldr	r3, [pc, #8]	; (d7428 <HAL_Feature_Set+0xc>)
   d7420:	681b      	ldr	r3, [r3, #0]
   d7422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7424:	9301      	str	r3, [sp, #4]
   d7426:	bd08      	pop	{r3, pc}
   d7428:	00030234 	.word	0x00030234

000d742c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d742c:	b508      	push	{r3, lr}
   d742e:	4b02      	ldr	r3, [pc, #8]	; (d7438 <HAL_RNG_GetRandomNumber+0xc>)
   d7430:	681b      	ldr	r3, [r3, #0]
   d7432:	685b      	ldr	r3, [r3, #4]
   d7434:	9301      	str	r3, [sp, #4]
   d7436:	bd08      	pop	{r3, pc}
   d7438:	00030218 	.word	0x00030218

000d743c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d743c:	b508      	push	{r3, lr}
   d743e:	4b02      	ldr	r3, [pc, #8]	; (d7448 <HAL_Delay_Microseconds+0xc>)
   d7440:	681b      	ldr	r3, [r3, #0]
   d7442:	68db      	ldr	r3, [r3, #12]
   d7444:	9301      	str	r3, [sp, #4]
   d7446:	bd08      	pop	{r3, pc}
   d7448:	00030218 	.word	0x00030218

000d744c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d744c:	b508      	push	{r3, lr}
   d744e:	4b02      	ldr	r3, [pc, #8]	; (d7458 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	695b      	ldr	r3, [r3, #20]
   d7454:	9301      	str	r3, [sp, #4]
   d7456:	bd08      	pop	{r3, pc}
   d7458:	00030218 	.word	0x00030218

000d745c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d745c:	b508      	push	{r3, lr}
   d745e:	4b02      	ldr	r3, [pc, #8]	; (d7468 <hal_rtc_time_is_valid+0xc>)
   d7460:	681b      	ldr	r3, [r3, #0]
   d7462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7464:	9301      	str	r3, [sp, #4]
   d7466:	bd08      	pop	{r3, pc}
   d7468:	00030218 	.word	0x00030218

000d746c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d746c:	b508      	push	{r3, lr}
   d746e:	4b02      	ldr	r3, [pc, #8]	; (d7478 <hal_rtc_get_time+0xc>)
   d7470:	681b      	ldr	r3, [r3, #0]
   d7472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d7474:	9301      	str	r3, [sp, #4]
   d7476:	bd08      	pop	{r3, pc}
   d7478:	00030218 	.word	0x00030218

000d747c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d747c:	b508      	push	{r3, lr}
   d747e:	4b02      	ldr	r3, [pc, #8]	; (d7488 <hal_rtc_set_time+0xc>)
   d7480:	681b      	ldr	r3, [r3, #0]
   d7482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d7484:	9301      	str	r3, [sp, #4]
   d7486:	bd08      	pop	{r3, pc}
   d7488:	00030218 	.word	0x00030218

000d748c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d748c:	b508      	push	{r3, lr}
   d748e:	4b02      	ldr	r3, [pc, #8]	; (d7498 <HAL_Validate_Pin_Function+0xc>)
   d7490:	681b      	ldr	r3, [r3, #0]
   d7492:	685b      	ldr	r3, [r3, #4]
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	bd08      	pop	{r3, pc}
   d7498:	0003022c 	.word	0x0003022c

000d749c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d749c:	b508      	push	{r3, lr}
   d749e:	4b02      	ldr	r3, [pc, #8]	; (d74a8 <HAL_Pin_Mode+0xc>)
   d74a0:	681b      	ldr	r3, [r3, #0]
   d74a2:	689b      	ldr	r3, [r3, #8]
   d74a4:	9301      	str	r3, [sp, #4]
   d74a6:	bd08      	pop	{r3, pc}
   d74a8:	0003022c 	.word	0x0003022c

000d74ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d74ac:	b508      	push	{r3, lr}
   d74ae:	4b02      	ldr	r3, [pc, #8]	; (d74b8 <HAL_Get_Pin_Mode+0xc>)
   d74b0:	681b      	ldr	r3, [r3, #0]
   d74b2:	68db      	ldr	r3, [r3, #12]
   d74b4:	9301      	str	r3, [sp, #4]
   d74b6:	bd08      	pop	{r3, pc}
   d74b8:	0003022c 	.word	0x0003022c

000d74bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d74bc:	b508      	push	{r3, lr}
   d74be:	4b02      	ldr	r3, [pc, #8]	; (d74c8 <HAL_GPIO_Write+0xc>)
   d74c0:	681b      	ldr	r3, [r3, #0]
   d74c2:	691b      	ldr	r3, [r3, #16]
   d74c4:	9301      	str	r3, [sp, #4]
   d74c6:	bd08      	pop	{r3, pc}
   d74c8:	0003022c 	.word	0x0003022c

000d74cc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d74cc:	b508      	push	{r3, lr}
   d74ce:	4b02      	ldr	r3, [pc, #8]	; (d74d8 <HAL_GPIO_Read+0xc>)
   d74d0:	681b      	ldr	r3, [r3, #0]
   d74d2:	695b      	ldr	r3, [r3, #20]
   d74d4:	9301      	str	r3, [sp, #4]
   d74d6:	bd08      	pop	{r3, pc}
   d74d8:	0003022c 	.word	0x0003022c

000d74dc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d74dc:	b508      	push	{r3, lr}
   d74de:	4b02      	ldr	r3, [pc, #8]	; (d74e8 <HAL_Interrupts_Attach+0xc>)
   d74e0:	681b      	ldr	r3, [r3, #0]
   d74e2:	699b      	ldr	r3, [r3, #24]
   d74e4:	9301      	str	r3, [sp, #4]
   d74e6:	bd08      	pop	{r3, pc}
   d74e8:	0003022c 	.word	0x0003022c

000d74ec <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d74ec:	b508      	push	{r3, lr}
   d74ee:	4b02      	ldr	r3, [pc, #8]	; (d74f8 <HAL_Interrupts_Detach+0xc>)
   d74f0:	681b      	ldr	r3, [r3, #0]
   d74f2:	69db      	ldr	r3, [r3, #28]
   d74f4:	9301      	str	r3, [sp, #4]
   d74f6:	bd08      	pop	{r3, pc}
   d74f8:	0003022c 	.word	0x0003022c

000d74fc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d74fc:	b508      	push	{r3, lr}
   d74fe:	4b02      	ldr	r3, [pc, #8]	; (d7508 <hal_adc_read+0xc>)
   d7500:	681b      	ldr	r3, [r3, #0]
   d7502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7504:	9301      	str	r3, [sp, #4]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	0003022c 	.word	0x0003022c

000d750c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d750c:	b508      	push	{r3, lr}
   d750e:	4b02      	ldr	r3, [pc, #8]	; (d7518 <hal_i2c_begin+0xc>)
   d7510:	681b      	ldr	r3, [r3, #0]
   d7512:	68db      	ldr	r3, [r3, #12]
   d7514:	9301      	str	r3, [sp, #4]
   d7516:	bd08      	pop	{r3, pc}
   d7518:	00030228 	.word	0x00030228

000d751c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d751c:	b508      	push	{r3, lr}
   d751e:	4b02      	ldr	r3, [pc, #8]	; (d7528 <hal_i2c_begin_transmission+0xc>)
   d7520:	681b      	ldr	r3, [r3, #0]
   d7522:	699b      	ldr	r3, [r3, #24]
   d7524:	9301      	str	r3, [sp, #4]
   d7526:	bd08      	pop	{r3, pc}
   d7528:	00030228 	.word	0x00030228

000d752c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d752c:	b508      	push	{r3, lr}
   d752e:	4b02      	ldr	r3, [pc, #8]	; (d7538 <hal_i2c_end_transmission+0xc>)
   d7530:	681b      	ldr	r3, [r3, #0]
   d7532:	69db      	ldr	r3, [r3, #28]
   d7534:	9301      	str	r3, [sp, #4]
   d7536:	bd08      	pop	{r3, pc}
   d7538:	00030228 	.word	0x00030228

000d753c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d753c:	b508      	push	{r3, lr}
   d753e:	4b02      	ldr	r3, [pc, #8]	; (d7548 <hal_i2c_write+0xc>)
   d7540:	681b      	ldr	r3, [r3, #0]
   d7542:	6a1b      	ldr	r3, [r3, #32]
   d7544:	9301      	str	r3, [sp, #4]
   d7546:	bd08      	pop	{r3, pc}
   d7548:	00030228 	.word	0x00030228

000d754c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d754c:	b508      	push	{r3, lr}
   d754e:	4b02      	ldr	r3, [pc, #8]	; (d7558 <hal_i2c_available+0xc>)
   d7550:	681b      	ldr	r3, [r3, #0]
   d7552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7554:	9301      	str	r3, [sp, #4]
   d7556:	bd08      	pop	{r3, pc}
   d7558:	00030228 	.word	0x00030228

000d755c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d755c:	b508      	push	{r3, lr}
   d755e:	4b02      	ldr	r3, [pc, #8]	; (d7568 <hal_i2c_read+0xc>)
   d7560:	681b      	ldr	r3, [r3, #0]
   d7562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7564:	9301      	str	r3, [sp, #4]
   d7566:	bd08      	pop	{r3, pc}
   d7568:	00030228 	.word	0x00030228

000d756c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d756c:	b508      	push	{r3, lr}
   d756e:	4b02      	ldr	r3, [pc, #8]	; (d7578 <hal_i2c_peek+0xc>)
   d7570:	681b      	ldr	r3, [r3, #0]
   d7572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7574:	9301      	str	r3, [sp, #4]
   d7576:	bd08      	pop	{r3, pc}
   d7578:	00030228 	.word	0x00030228

000d757c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d757c:	b508      	push	{r3, lr}
   d757e:	4b02      	ldr	r3, [pc, #8]	; (d7588 <hal_i2c_flush+0xc>)
   d7580:	681b      	ldr	r3, [r3, #0]
   d7582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7584:	9301      	str	r3, [sp, #4]
   d7586:	bd08      	pop	{r3, pc}
   d7588:	00030228 	.word	0x00030228

000d758c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d758c:	b508      	push	{r3, lr}
   d758e:	4b02      	ldr	r3, [pc, #8]	; (d7598 <hal_i2c_is_enabled+0xc>)
   d7590:	681b      	ldr	r3, [r3, #0]
   d7592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7594:	9301      	str	r3, [sp, #4]
   d7596:	bd08      	pop	{r3, pc}
   d7598:	00030228 	.word	0x00030228

000d759c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d759c:	b508      	push	{r3, lr}
   d759e:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <hal_i2c_init+0xc>)
   d75a0:	681b      	ldr	r3, [r3, #0]
   d75a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d75a4:	9301      	str	r3, [sp, #4]
   d75a6:	bd08      	pop	{r3, pc}
   d75a8:	00030228 	.word	0x00030228

000d75ac <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d75ac:	b508      	push	{r3, lr}
   d75ae:	4b02      	ldr	r3, [pc, #8]	; (d75b8 <hal_i2c_lock+0xc>)
   d75b0:	681b      	ldr	r3, [r3, #0]
   d75b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d75b4:	9301      	str	r3, [sp, #4]
   d75b6:	bd08      	pop	{r3, pc}
   d75b8:	00030228 	.word	0x00030228

000d75bc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d75bc:	b508      	push	{r3, lr}
   d75be:	4b02      	ldr	r3, [pc, #8]	; (d75c8 <hal_i2c_unlock+0xc>)
   d75c0:	681b      	ldr	r3, [r3, #0]
   d75c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d75c4:	9301      	str	r3, [sp, #4]
   d75c6:	bd08      	pop	{r3, pc}
   d75c8:	00030228 	.word	0x00030228

000d75cc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d75cc:	b508      	push	{r3, lr}
   d75ce:	4b02      	ldr	r3, [pc, #8]	; (d75d8 <hal_i2c_request_ex+0xc>)
   d75d0:	681b      	ldr	r3, [r3, #0]
   d75d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d75d4:	9301      	str	r3, [sp, #4]
   d75d6:	bd08      	pop	{r3, pc}
   d75d8:	00030228 	.word	0x00030228

000d75dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d75dc:	b508      	push	{r3, lr}
   d75de:	4b02      	ldr	r3, [pc, #8]	; (d75e8 <inet_inet_ntop+0xc>)
   d75e0:	681b      	ldr	r3, [r3, #0]
   d75e2:	695b      	ldr	r3, [r3, #20]
   d75e4:	9301      	str	r3, [sp, #4]
   d75e6:	bd08      	pop	{r3, pc}
   d75e8:	00030264 	.word	0x00030264

000d75ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d75ec:	b508      	push	{r3, lr}
   d75ee:	4b02      	ldr	r3, [pc, #8]	; (d75f8 <netdb_freeaddrinfo+0xc>)
   d75f0:	681b      	ldr	r3, [r3, #0]
   d75f2:	689b      	ldr	r3, [r3, #8]
   d75f4:	9301      	str	r3, [sp, #4]
   d75f6:	bd08      	pop	{r3, pc}
   d75f8:	00030268 	.word	0x00030268

000d75fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d75fc:	b508      	push	{r3, lr}
   d75fe:	4b02      	ldr	r3, [pc, #8]	; (d7608 <netdb_getaddrinfo+0xc>)
   d7600:	681b      	ldr	r3, [r3, #0]
   d7602:	68db      	ldr	r3, [r3, #12]
   d7604:	9301      	str	r3, [sp, #4]
   d7606:	bd08      	pop	{r3, pc}
   d7608:	00030268 	.word	0x00030268

000d760c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d760c:	b508      	push	{r3, lr}
   d760e:	4b02      	ldr	r3, [pc, #8]	; (d7618 <hal_spi_begin+0xc>)
   d7610:	681b      	ldr	r3, [r3, #0]
   d7612:	681b      	ldr	r3, [r3, #0]
   d7614:	9301      	str	r3, [sp, #4]
   d7616:	bd08      	pop	{r3, pc}
   d7618:	00030230 	.word	0x00030230

000d761c <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d761c:	b508      	push	{r3, lr}
   d761e:	4b02      	ldr	r3, [pc, #8]	; (d7628 <hal_spi_end+0xc>)
   d7620:	681b      	ldr	r3, [r3, #0]
   d7622:	685b      	ldr	r3, [r3, #4]
   d7624:	9301      	str	r3, [sp, #4]
   d7626:	bd08      	pop	{r3, pc}
   d7628:	00030230 	.word	0x00030230

000d762c <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d762c:	b508      	push	{r3, lr}
   d762e:	4b02      	ldr	r3, [pc, #8]	; (d7638 <hal_spi_transfer+0xc>)
   d7630:	681b      	ldr	r3, [r3, #0]
   d7632:	695b      	ldr	r3, [r3, #20]
   d7634:	9301      	str	r3, [sp, #4]
   d7636:	bd08      	pop	{r3, pc}
   d7638:	00030230 	.word	0x00030230

000d763c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d763c:	b508      	push	{r3, lr}
   d763e:	4b02      	ldr	r3, [pc, #8]	; (d7648 <hal_spi_init+0xc>)
   d7640:	681b      	ldr	r3, [r3, #0]
   d7642:	69db      	ldr	r3, [r3, #28]
   d7644:	9301      	str	r3, [sp, #4]
   d7646:	bd08      	pop	{r3, pc}
   d7648:	00030230 	.word	0x00030230

000d764c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d764c:	b508      	push	{r3, lr}
   d764e:	4b02      	ldr	r3, [pc, #8]	; (d7658 <hal_spi_is_enabled+0xc>)
   d7650:	681b      	ldr	r3, [r3, #0]
   d7652:	6a1b      	ldr	r3, [r3, #32]
   d7654:	9301      	str	r3, [sp, #4]
   d7656:	bd08      	pop	{r3, pc}
   d7658:	00030230 	.word	0x00030230

000d765c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d765c:	b508      	push	{r3, lr}
   d765e:	4b02      	ldr	r3, [pc, #8]	; (d7668 <hal_spi_info+0xc>)
   d7660:	681b      	ldr	r3, [r3, #0]
   d7662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7664:	9301      	str	r3, [sp, #4]
   d7666:	bd08      	pop	{r3, pc}
   d7668:	00030230 	.word	0x00030230

000d766c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d766c:	b508      	push	{r3, lr}
   d766e:	4b02      	ldr	r3, [pc, #8]	; (d7678 <hal_spi_set_settings+0xc>)
   d7670:	681b      	ldr	r3, [r3, #0]
   d7672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7674:	9301      	str	r3, [sp, #4]
   d7676:	bd08      	pop	{r3, pc}
   d7678:	00030230 	.word	0x00030230

000d767c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d767c:	b508      	push	{r3, lr}
   d767e:	4b02      	ldr	r3, [pc, #8]	; (d7688 <hal_spi_acquire+0xc>)
   d7680:	681b      	ldr	r3, [r3, #0]
   d7682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7684:	9301      	str	r3, [sp, #4]
   d7686:	bd08      	pop	{r3, pc}
   d7688:	00030230 	.word	0x00030230

000d768c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d768c:	b508      	push	{r3, lr}
   d768e:	4b02      	ldr	r3, [pc, #8]	; (d7698 <hal_spi_release+0xc>)
   d7690:	681b      	ldr	r3, [r3, #0]
   d7692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7694:	9301      	str	r3, [sp, #4]
   d7696:	bd08      	pop	{r3, pc}
   d7698:	00030230 	.word	0x00030230

000d769c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d769c:	b508      	push	{r3, lr}
   d769e:	4b02      	ldr	r3, [pc, #8]	; (d76a8 <hal_usart_init+0xc>)
   d76a0:	681b      	ldr	r3, [r3, #0]
   d76a2:	681b      	ldr	r3, [r3, #0]
   d76a4:	9301      	str	r3, [sp, #4]
   d76a6:	bd08      	pop	{r3, pc}
   d76a8:	0003023c 	.word	0x0003023c

000d76ac <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d76ac:	b508      	push	{r3, lr}
   d76ae:	4b02      	ldr	r3, [pc, #8]	; (d76b8 <hal_usart_end+0xc>)
   d76b0:	681b      	ldr	r3, [r3, #0]
   d76b2:	689b      	ldr	r3, [r3, #8]
   d76b4:	9301      	str	r3, [sp, #4]
   d76b6:	bd08      	pop	{r3, pc}
   d76b8:	0003023c 	.word	0x0003023c

000d76bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d76bc:	b508      	push	{r3, lr}
   d76be:	4b02      	ldr	r3, [pc, #8]	; (d76c8 <hal_usart_write+0xc>)
   d76c0:	681b      	ldr	r3, [r3, #0]
   d76c2:	68db      	ldr	r3, [r3, #12]
   d76c4:	9301      	str	r3, [sp, #4]
   d76c6:	bd08      	pop	{r3, pc}
   d76c8:	0003023c 	.word	0x0003023c

000d76cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d76cc:	b508      	push	{r3, lr}
   d76ce:	4b02      	ldr	r3, [pc, #8]	; (d76d8 <hal_usart_available+0xc>)
   d76d0:	681b      	ldr	r3, [r3, #0]
   d76d2:	691b      	ldr	r3, [r3, #16]
   d76d4:	9301      	str	r3, [sp, #4]
   d76d6:	bd08      	pop	{r3, pc}
   d76d8:	0003023c 	.word	0x0003023c

000d76dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d76dc:	b508      	push	{r3, lr}
   d76de:	4b02      	ldr	r3, [pc, #8]	; (d76e8 <hal_usart_read+0xc>)
   d76e0:	681b      	ldr	r3, [r3, #0]
   d76e2:	695b      	ldr	r3, [r3, #20]
   d76e4:	9301      	str	r3, [sp, #4]
   d76e6:	bd08      	pop	{r3, pc}
   d76e8:	0003023c 	.word	0x0003023c

000d76ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d76ec:	b508      	push	{r3, lr}
   d76ee:	4b02      	ldr	r3, [pc, #8]	; (d76f8 <hal_usart_peek+0xc>)
   d76f0:	681b      	ldr	r3, [r3, #0]
   d76f2:	699b      	ldr	r3, [r3, #24]
   d76f4:	9301      	str	r3, [sp, #4]
   d76f6:	bd08      	pop	{r3, pc}
   d76f8:	0003023c 	.word	0x0003023c

000d76fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d76fc:	b508      	push	{r3, lr}
   d76fe:	4b02      	ldr	r3, [pc, #8]	; (d7708 <hal_usart_flush+0xc>)
   d7700:	681b      	ldr	r3, [r3, #0]
   d7702:	69db      	ldr	r3, [r3, #28]
   d7704:	9301      	str	r3, [sp, #4]
   d7706:	bd08      	pop	{r3, pc}
   d7708:	0003023c 	.word	0x0003023c

000d770c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d770c:	b508      	push	{r3, lr}
   d770e:	4b02      	ldr	r3, [pc, #8]	; (d7718 <hal_usart_is_enabled+0xc>)
   d7710:	681b      	ldr	r3, [r3, #0]
   d7712:	6a1b      	ldr	r3, [r3, #32]
   d7714:	9301      	str	r3, [sp, #4]
   d7716:	bd08      	pop	{r3, pc}
   d7718:	0003023c 	.word	0x0003023c

000d771c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d771c:	b508      	push	{r3, lr}
   d771e:	4b02      	ldr	r3, [pc, #8]	; (d7728 <hal_usart_available_data_for_write+0xc>)
   d7720:	681b      	ldr	r3, [r3, #0]
   d7722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7724:	9301      	str	r3, [sp, #4]
   d7726:	bd08      	pop	{r3, pc}
   d7728:	0003023c 	.word	0x0003023c

000d772c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d772c:	b508      	push	{r3, lr}
   d772e:	4b02      	ldr	r3, [pc, #8]	; (d7738 <hal_usart_begin_config+0xc>)
   d7730:	681b      	ldr	r3, [r3, #0]
   d7732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7734:	9301      	str	r3, [sp, #4]
   d7736:	bd08      	pop	{r3, pc}
   d7738:	0003023c 	.word	0x0003023c

000d773c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d773c:	b508      	push	{r3, lr}
   d773e:	4b02      	ldr	r3, [pc, #8]	; (d7748 <HAL_USB_USART_Init+0xc>)
   d7740:	681b      	ldr	r3, [r3, #0]
   d7742:	681b      	ldr	r3, [r3, #0]
   d7744:	9301      	str	r3, [sp, #4]
   d7746:	bd08      	pop	{r3, pc}
   d7748:	0003024c 	.word	0x0003024c

000d774c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d774c:	b508      	push	{r3, lr}
   d774e:	4b02      	ldr	r3, [pc, #8]	; (d7758 <HAL_USB_USART_Begin+0xc>)
   d7750:	681b      	ldr	r3, [r3, #0]
   d7752:	685b      	ldr	r3, [r3, #4]
   d7754:	9301      	str	r3, [sp, #4]
   d7756:	bd08      	pop	{r3, pc}
   d7758:	0003024c 	.word	0x0003024c

000d775c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d775c:	b508      	push	{r3, lr}
   d775e:	4b02      	ldr	r3, [pc, #8]	; (d7768 <HAL_USB_USART_End+0xc>)
   d7760:	681b      	ldr	r3, [r3, #0]
   d7762:	689b      	ldr	r3, [r3, #8]
   d7764:	9301      	str	r3, [sp, #4]
   d7766:	bd08      	pop	{r3, pc}
   d7768:	0003024c 	.word	0x0003024c

000d776c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d776c:	b508      	push	{r3, lr}
   d776e:	4b02      	ldr	r3, [pc, #8]	; (d7778 <HAL_USB_USART_Available_Data+0xc>)
   d7770:	681b      	ldr	r3, [r3, #0]
   d7772:	691b      	ldr	r3, [r3, #16]
   d7774:	9301      	str	r3, [sp, #4]
   d7776:	bd08      	pop	{r3, pc}
   d7778:	0003024c 	.word	0x0003024c

000d777c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d777c:	b508      	push	{r3, lr}
   d777e:	4b02      	ldr	r3, [pc, #8]	; (d7788 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7780:	681b      	ldr	r3, [r3, #0]
   d7782:	695b      	ldr	r3, [r3, #20]
   d7784:	9301      	str	r3, [sp, #4]
   d7786:	bd08      	pop	{r3, pc}
   d7788:	0003024c 	.word	0x0003024c

000d778c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d778c:	b508      	push	{r3, lr}
   d778e:	4b02      	ldr	r3, [pc, #8]	; (d7798 <HAL_USB_USART_Receive_Data+0xc>)
   d7790:	681b      	ldr	r3, [r3, #0]
   d7792:	699b      	ldr	r3, [r3, #24]
   d7794:	9301      	str	r3, [sp, #4]
   d7796:	bd08      	pop	{r3, pc}
   d7798:	0003024c 	.word	0x0003024c

000d779c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d779c:	b508      	push	{r3, lr}
   d779e:	4b02      	ldr	r3, [pc, #8]	; (d77a8 <HAL_USB_USART_Send_Data+0xc>)
   d77a0:	681b      	ldr	r3, [r3, #0]
   d77a2:	69db      	ldr	r3, [r3, #28]
   d77a4:	9301      	str	r3, [sp, #4]
   d77a6:	bd08      	pop	{r3, pc}
   d77a8:	0003024c 	.word	0x0003024c

000d77ac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d77ac:	b508      	push	{r3, lr}
   d77ae:	4b02      	ldr	r3, [pc, #8]	; (d77b8 <HAL_USB_USART_Flush_Data+0xc>)
   d77b0:	681b      	ldr	r3, [r3, #0]
   d77b2:	6a1b      	ldr	r3, [r3, #32]
   d77b4:	9301      	str	r3, [sp, #4]
   d77b6:	bd08      	pop	{r3, pc}
   d77b8:	0003024c 	.word	0x0003024c

000d77bc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d77bc:	b508      	push	{r3, lr}
   d77be:	4b02      	ldr	r3, [pc, #8]	; (d77c8 <panic_+0xc>)
   d77c0:	681b      	ldr	r3, [r3, #0]
   d77c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d77c4:	9301      	str	r3, [sp, #4]
   d77c6:	bd08      	pop	{r3, pc}
   d77c8:	00030260 	.word	0x00030260

000d77cc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d77cc:	b508      	push	{r3, lr}
   d77ce:	4b02      	ldr	r3, [pc, #8]	; (d77d8 <log_message+0xc>)
   d77d0:	681b      	ldr	r3, [r3, #0]
   d77d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d77d4:	9301      	str	r3, [sp, #4]
   d77d6:	bd08      	pop	{r3, pc}
   d77d8:	00030260 	.word	0x00030260

000d77dc <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d77dc:	b508      	push	{r3, lr}
   d77de:	4b02      	ldr	r3, [pc, #8]	; (d77e8 <log_message_v+0xc>)
   d77e0:	681b      	ldr	r3, [r3, #0]
   d77e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d77e4:	9301      	str	r3, [sp, #4]
   d77e6:	bd08      	pop	{r3, pc}
   d77e8:	00030260 	.word	0x00030260

000d77ec <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d77ec:	b508      	push	{r3, lr}
   d77ee:	4b02      	ldr	r3, [pc, #8]	; (d77f8 <log_level_name+0xc>)
   d77f0:	681b      	ldr	r3, [r3, #0]
   d77f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d77f4:	9301      	str	r3, [sp, #4]
   d77f6:	bd08      	pop	{r3, pc}
   d77f8:	00030260 	.word	0x00030260

000d77fc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d77fc:	b508      	push	{r3, lr}
   d77fe:	4b02      	ldr	r3, [pc, #8]	; (d7808 <log_set_callbacks+0xc>)
   d7800:	681b      	ldr	r3, [r3, #0]
   d7802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d7804:	9301      	str	r3, [sp, #4]
   d7806:	bd08      	pop	{r3, pc}
   d7808:	00030260 	.word	0x00030260

000d780c <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d780c:	b508      	push	{r3, lr}
   d780e:	4b03      	ldr	r3, [pc, #12]	; (d781c <diag_get_source+0x10>)
   d7810:	681b      	ldr	r3, [r3, #0]
   d7812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d7816:	9301      	str	r3, [sp, #4]
   d7818:	bd08      	pop	{r3, pc}
   d781a:	0000      	.short	0x0000
   d781c:	00030260 	.word	0x00030260

000d7820 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d7820:	b508      	push	{r3, lr}
   d7822:	4b02      	ldr	r3, [pc, #8]	; (d782c <system_mode+0xc>)
   d7824:	681b      	ldr	r3, [r3, #0]
   d7826:	681b      	ldr	r3, [r3, #0]
   d7828:	9301      	str	r3, [sp, #4]
   d782a:	bd08      	pop	{r3, pc}
   d782c:	00030220 	.word	0x00030220

000d7830 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7830:	b508      	push	{r3, lr}
   d7832:	4b02      	ldr	r3, [pc, #8]	; (d783c <set_system_mode+0xc>)
   d7834:	681b      	ldr	r3, [r3, #0]
   d7836:	685b      	ldr	r3, [r3, #4]
   d7838:	9301      	str	r3, [sp, #4]
   d783a:	bd08      	pop	{r3, pc}
   d783c:	00030220 	.word	0x00030220

000d7840 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7840:	b508      	push	{r3, lr}
   d7842:	4b02      	ldr	r3, [pc, #8]	; (d784c <system_delay_ms+0xc>)
   d7844:	681b      	ldr	r3, [r3, #0]
   d7846:	695b      	ldr	r3, [r3, #20]
   d7848:	9301      	str	r3, [sp, #4]
   d784a:	bd08      	pop	{r3, pc}
   d784c:	00030220 	.word	0x00030220

000d7850 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d7850:	b508      	push	{r3, lr}
   d7852:	4b02      	ldr	r3, [pc, #8]	; (d785c <system_subscribe_event+0xc>)
   d7854:	681b      	ldr	r3, [r3, #0]
   d7856:	6a1b      	ldr	r3, [r3, #32]
   d7858:	9301      	str	r3, [sp, #4]
   d785a:	bd08      	pop	{r3, pc}
   d785c:	00030220 	.word	0x00030220

000d7860 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7860:	b508      	push	{r3, lr}
   d7862:	4b02      	ldr	r3, [pc, #8]	; (d786c <system_thread_set_state+0xc>)
   d7864:	681b      	ldr	r3, [r3, #0]
   d7866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7868:	9301      	str	r3, [sp, #4]
   d786a:	bd08      	pop	{r3, pc}
   d786c:	00030220 	.word	0x00030220

000d7870 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d7870:	b508      	push	{r3, lr}
   d7872:	4b02      	ldr	r3, [pc, #8]	; (d787c <application_thread_current+0xc>)
   d7874:	681b      	ldr	r3, [r3, #0]
   d7876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7878:	9301      	str	r3, [sp, #4]
   d787a:	bd08      	pop	{r3, pc}
   d787c:	00030220 	.word	0x00030220

000d7880 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d7880:	b508      	push	{r3, lr}
   d7882:	4b02      	ldr	r3, [pc, #8]	; (d788c <application_thread_invoke+0xc>)
   d7884:	681b      	ldr	r3, [r3, #0]
   d7886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7888:	9301      	str	r3, [sp, #4]
   d788a:	bd08      	pop	{r3, pc}
   d788c:	00030220 	.word	0x00030220

000d7890 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7890:	b508      	push	{r3, lr}
   d7892:	4b02      	ldr	r3, [pc, #8]	; (d789c <system_thread_get_state+0xc>)
   d7894:	681b      	ldr	r3, [r3, #0]
   d7896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7898:	9301      	str	r3, [sp, #4]
   d789a:	bd08      	pop	{r3, pc}
   d789c:	00030220 	.word	0x00030220

000d78a0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d78a0:	b508      	push	{r3, lr}
   d78a2:	4b02      	ldr	r3, [pc, #8]	; (d78ac <system_notify_time_changed+0xc>)
   d78a4:	681b      	ldr	r3, [r3, #0]
   d78a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d78a8:	9301      	str	r3, [sp, #4]
   d78aa:	bd08      	pop	{r3, pc}
   d78ac:	00030220 	.word	0x00030220

000d78b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d78b0:	b508      	push	{r3, lr}
   d78b2:	4b03      	ldr	r3, [pc, #12]	; (d78c0 <system_ctrl_set_app_request_handler+0x10>)
   d78b4:	681b      	ldr	r3, [r3, #0]
   d78b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d78ba:	9301      	str	r3, [sp, #4]
   d78bc:	bd08      	pop	{r3, pc}
   d78be:	0000      	.short	0x0000
   d78c0:	00030220 	.word	0x00030220

000d78c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d78c4:	b508      	push	{r3, lr}
   d78c6:	4b03      	ldr	r3, [pc, #12]	; (d78d4 <system_ctrl_set_result+0x10>)
   d78c8:	681b      	ldr	r3, [r3, #0]
   d78ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d78ce:	9301      	str	r3, [sp, #4]
   d78d0:	bd08      	pop	{r3, pc}
   d78d2:	0000      	.short	0x0000
   d78d4:	00030220 	.word	0x00030220

000d78d8 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d78d8:	b508      	push	{r3, lr}
   d78da:	4b03      	ldr	r3, [pc, #12]	; (d78e8 <system_power_management_set_config+0x10>)
   d78dc:	681b      	ldr	r3, [r3, #0]
   d78de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d78e2:	9301      	str	r3, [sp, #4]
   d78e4:	bd08      	pop	{r3, pc}
   d78e6:	0000      	.short	0x0000
   d78e8:	00030220 	.word	0x00030220

000d78ec <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d78ec:	b508      	push	{r3, lr}
   d78ee:	4b03      	ldr	r3, [pc, #12]	; (d78fc <system_sleep_ext+0x10>)
   d78f0:	681b      	ldr	r3, [r3, #0]
   d78f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d78f6:	9301      	str	r3, [sp, #4]
   d78f8:	bd08      	pop	{r3, pc}
   d78fa:	0000      	.short	0x0000
   d78fc:	00030220 	.word	0x00030220

000d7900 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7900:	b508      	push	{r3, lr}
   d7902:	4b02      	ldr	r3, [pc, #8]	; (d790c <spark_process+0xc>)
   d7904:	681b      	ldr	r3, [r3, #0]
   d7906:	689b      	ldr	r3, [r3, #8]
   d7908:	9301      	str	r3, [sp, #4]
   d790a:	bd08      	pop	{r3, pc}
   d790c:	00030244 	.word	0x00030244

000d7910 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d7910:	b508      	push	{r3, lr}
   d7912:	4b02      	ldr	r3, [pc, #8]	; (d791c <spark_cloud_flag_connected+0xc>)
   d7914:	681b      	ldr	r3, [r3, #0]
   d7916:	695b      	ldr	r3, [r3, #20]
   d7918:	9301      	str	r3, [sp, #4]
   d791a:	bd08      	pop	{r3, pc}
   d791c:	00030244 	.word	0x00030244

000d7920 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d7920:	b508      	push	{r3, lr}
   d7922:	4b02      	ldr	r3, [pc, #8]	; (d792c <spark_send_event+0xc>)
   d7924:	681b      	ldr	r3, [r3, #0]
   d7926:	6a1b      	ldr	r3, [r3, #32]
   d7928:	9301      	str	r3, [sp, #4]
   d792a:	bd08      	pop	{r3, pc}
   d792c:	00030244 	.word	0x00030244

000d7930 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d7930:	b508      	push	{r3, lr}
   d7932:	4b02      	ldr	r3, [pc, #8]	; (d793c <spark_sync_time_pending+0xc>)
   d7934:	681b      	ldr	r3, [r3, #0]
   d7936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7938:	9301      	str	r3, [sp, #4]
   d793a:	bd08      	pop	{r3, pc}
   d793c:	00030244 	.word	0x00030244

000d7940 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7940:	b508      	push	{r3, lr}
   d7942:	4b02      	ldr	r3, [pc, #8]	; (d794c <spark_sync_time_last+0xc>)
   d7944:	681b      	ldr	r3, [r3, #0]
   d7946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7948:	9301      	str	r3, [sp, #4]
   d794a:	bd08      	pop	{r3, pc}
   d794c:	00030244 	.word	0x00030244

000d7950 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7950:	b508      	push	{r3, lr}
   d7952:	4b02      	ldr	r3, [pc, #8]	; (d795c <spark_set_random_seed_from_cloud_handler+0xc>)
   d7954:	681b      	ldr	r3, [r3, #0]
   d7956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7958:	9301      	str	r3, [sp, #4]
   d795a:	bd08      	pop	{r3, pc}
   d795c:	00030244 	.word	0x00030244

000d7960 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7960:	b508      	push	{r3, lr}
   d7962:	4b02      	ldr	r3, [pc, #8]	; (d796c <network_connect+0xc>)
   d7964:	681b      	ldr	r3, [r3, #0]
   d7966:	685b      	ldr	r3, [r3, #4]
   d7968:	9301      	str	r3, [sp, #4]
   d796a:	bd08      	pop	{r3, pc}
   d796c:	00030240 	.word	0x00030240

000d7970 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7970:	b508      	push	{r3, lr}
   d7972:	4b02      	ldr	r3, [pc, #8]	; (d797c <network_connecting+0xc>)
   d7974:	681b      	ldr	r3, [r3, #0]
   d7976:	689b      	ldr	r3, [r3, #8]
   d7978:	9301      	str	r3, [sp, #4]
   d797a:	bd08      	pop	{r3, pc}
   d797c:	00030240 	.word	0x00030240

000d7980 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7980:	b508      	push	{r3, lr}
   d7982:	4b02      	ldr	r3, [pc, #8]	; (d798c <network_disconnect+0xc>)
   d7984:	681b      	ldr	r3, [r3, #0]
   d7986:	68db      	ldr	r3, [r3, #12]
   d7988:	9301      	str	r3, [sp, #4]
   d798a:	bd08      	pop	{r3, pc}
   d798c:	00030240 	.word	0x00030240

000d7990 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7990:	b508      	push	{r3, lr}
   d7992:	4b02      	ldr	r3, [pc, #8]	; (d799c <network_ready+0xc>)
   d7994:	681b      	ldr	r3, [r3, #0]
   d7996:	691b      	ldr	r3, [r3, #16]
   d7998:	9301      	str	r3, [sp, #4]
   d799a:	bd08      	pop	{r3, pc}
   d799c:	00030240 	.word	0x00030240

000d79a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d79a0:	b508      	push	{r3, lr}
   d79a2:	4b02      	ldr	r3, [pc, #8]	; (d79ac <network_on+0xc>)
   d79a4:	681b      	ldr	r3, [r3, #0]
   d79a6:	695b      	ldr	r3, [r3, #20]
   d79a8:	9301      	str	r3, [sp, #4]
   d79aa:	bd08      	pop	{r3, pc}
   d79ac:	00030240 	.word	0x00030240

000d79b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d79b0:	b508      	push	{r3, lr}
   d79b2:	4b02      	ldr	r3, [pc, #8]	; (d79bc <network_off+0xc>)
   d79b4:	681b      	ldr	r3, [r3, #0]
   d79b6:	699b      	ldr	r3, [r3, #24]
   d79b8:	9301      	str	r3, [sp, #4]
   d79ba:	bd08      	pop	{r3, pc}
   d79bc:	00030240 	.word	0x00030240

000d79c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d79c0:	b508      	push	{r3, lr}
   d79c2:	4b02      	ldr	r3, [pc, #8]	; (d79cc <network_listen+0xc>)
   d79c4:	681b      	ldr	r3, [r3, #0]
   d79c6:	69db      	ldr	r3, [r3, #28]
   d79c8:	9301      	str	r3, [sp, #4]
   d79ca:	bd08      	pop	{r3, pc}
   d79cc:	00030240 	.word	0x00030240

000d79d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d79d0:	b508      	push	{r3, lr}
   d79d2:	4b02      	ldr	r3, [pc, #8]	; (d79dc <network_listening+0xc>)
   d79d4:	681b      	ldr	r3, [r3, #0]
   d79d6:	6a1b      	ldr	r3, [r3, #32]
   d79d8:	9301      	str	r3, [sp, #4]
   d79da:	bd08      	pop	{r3, pc}
   d79dc:	00030240 	.word	0x00030240

000d79e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d79e0:	b508      	push	{r3, lr}
   d79e2:	4b02      	ldr	r3, [pc, #8]	; (d79ec <network_set_listen_timeout+0xc>)
   d79e4:	681b      	ldr	r3, [r3, #0]
   d79e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d79e8:	9301      	str	r3, [sp, #4]
   d79ea:	bd08      	pop	{r3, pc}
   d79ec:	00030240 	.word	0x00030240

000d79f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d79f0:	b508      	push	{r3, lr}
   d79f2:	4b02      	ldr	r3, [pc, #8]	; (d79fc <network_get_listen_timeout+0xc>)
   d79f4:	681b      	ldr	r3, [r3, #0]
   d79f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d79f8:	9301      	str	r3, [sp, #4]
   d79fa:	bd08      	pop	{r3, pc}
   d79fc:	00030240 	.word	0x00030240

000d7a00 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d7a00:	b508      	push	{r3, lr}
   d7a02:	4b02      	ldr	r3, [pc, #8]	; (d7a0c <network_is_on+0xc>)
   d7a04:	681b      	ldr	r3, [r3, #0]
   d7a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7a08:	9301      	str	r3, [sp, #4]
   d7a0a:	bd08      	pop	{r3, pc}
   d7a0c:	00030240 	.word	0x00030240

000d7a10 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d7a10:	b508      	push	{r3, lr}
   d7a12:	4b02      	ldr	r3, [pc, #8]	; (d7a1c <network_is_off+0xc>)
   d7a14:	681b      	ldr	r3, [r3, #0]
   d7a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7a18:	9301      	str	r3, [sp, #4]
   d7a1a:	bd08      	pop	{r3, pc}
   d7a1c:	00030240 	.word	0x00030240

000d7a20 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d7a20:	b508      	push	{r3, lr}
   d7a22:	4b02      	ldr	r3, [pc, #8]	; (d7a2c <malloc+0xc>)
   d7a24:	681b      	ldr	r3, [r3, #0]
   d7a26:	681b      	ldr	r3, [r3, #0]
   d7a28:	9301      	str	r3, [sp, #4]
   d7a2a:	bd08      	pop	{r3, pc}
   d7a2c:	0003021c 	.word	0x0003021c

000d7a30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7a30:	b508      	push	{r3, lr}
   d7a32:	4b02      	ldr	r3, [pc, #8]	; (d7a3c <free+0xc>)
   d7a34:	681b      	ldr	r3, [r3, #0]
   d7a36:	685b      	ldr	r3, [r3, #4]
   d7a38:	9301      	str	r3, [sp, #4]
   d7a3a:	bd08      	pop	{r3, pc}
   d7a3c:	0003021c 	.word	0x0003021c

000d7a40 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7a40:	b508      	push	{r3, lr}
   d7a42:	4b02      	ldr	r3, [pc, #8]	; (d7a4c <realloc+0xc>)
   d7a44:	681b      	ldr	r3, [r3, #0]
   d7a46:	689b      	ldr	r3, [r3, #8]
   d7a48:	9301      	str	r3, [sp, #4]
   d7a4a:	bd08      	pop	{r3, pc}
   d7a4c:	0003021c 	.word	0x0003021c

000d7a50 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7a50:	b508      	push	{r3, lr}
   d7a52:	4b02      	ldr	r3, [pc, #8]	; (d7a5c <siprintf+0xc>)
   d7a54:	681b      	ldr	r3, [r3, #0]
   d7a56:	691b      	ldr	r3, [r3, #16]
   d7a58:	9301      	str	r3, [sp, #4]
   d7a5a:	bd08      	pop	{r3, pc}
   d7a5c:	0003021c 	.word	0x0003021c

000d7a60 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7a60:	b508      	push	{r3, lr}
   d7a62:	4b02      	ldr	r3, [pc, #8]	; (d7a6c <snprintf+0xc>)
   d7a64:	681b      	ldr	r3, [r3, #0]
   d7a66:	69db      	ldr	r3, [r3, #28]
   d7a68:	9301      	str	r3, [sp, #4]
   d7a6a:	bd08      	pop	{r3, pc}
   d7a6c:	0003021c 	.word	0x0003021c

000d7a70 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7a70:	b508      	push	{r3, lr}
   d7a72:	4b02      	ldr	r3, [pc, #8]	; (d7a7c <vsnprintf+0xc>)
   d7a74:	681b      	ldr	r3, [r3, #0]
   d7a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7a78:	9301      	str	r3, [sp, #4]
   d7a7a:	bd08      	pop	{r3, pc}
   d7a7c:	0003021c 	.word	0x0003021c

000d7a80 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7a80:	b508      	push	{r3, lr}
   d7a82:	4b02      	ldr	r3, [pc, #8]	; (d7a8c <abort+0xc>)
   d7a84:	681b      	ldr	r3, [r3, #0]
   d7a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7a88:	9301      	str	r3, [sp, #4]
   d7a8a:	bd08      	pop	{r3, pc}
   d7a8c:	0003021c 	.word	0x0003021c

000d7a90 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7a90:	b508      	push	{r3, lr}
   d7a92:	4b02      	ldr	r3, [pc, #8]	; (d7a9c <_malloc_r+0xc>)
   d7a94:	681b      	ldr	r3, [r3, #0]
   d7a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7a98:	9301      	str	r3, [sp, #4]
   d7a9a:	bd08      	pop	{r3, pc}
   d7a9c:	0003021c 	.word	0x0003021c

000d7aa0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7aa0:	b508      	push	{r3, lr}
   d7aa2:	4b02      	ldr	r3, [pc, #8]	; (d7aac <newlib_impure_ptr_callback+0xc>)
   d7aa4:	681b      	ldr	r3, [r3, #0]
   d7aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7aa8:	9301      	str	r3, [sp, #4]
   d7aaa:	bd08      	pop	{r3, pc}
   d7aac:	0003021c 	.word	0x0003021c

000d7ab0 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d7ab0:	b508      	push	{r3, lr}
   d7ab2:	4b02      	ldr	r3, [pc, #8]	; (d7abc <strftime+0xc>)
   d7ab4:	681b      	ldr	r3, [r3, #0]
   d7ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7ab8:	9301      	str	r3, [sp, #4]
   d7aba:	bd08      	pop	{r3, pc}
   d7abc:	0003021c 	.word	0x0003021c

000d7ac0 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7ac0:	b508      	push	{r3, lr}
   d7ac2:	4b02      	ldr	r3, [pc, #8]	; (d7acc <localtime_r+0xc>)
   d7ac4:	681b      	ldr	r3, [r3, #0]
   d7ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7ac8:	9301      	str	r3, [sp, #4]
   d7aca:	bd08      	pop	{r3, pc}
   d7acc:	0003021c 	.word	0x0003021c

000d7ad0 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7ad0:	b508      	push	{r3, lr}
   d7ad2:	4b02      	ldr	r3, [pc, #8]	; (d7adc <gmtime_r+0xc>)
   d7ad4:	681b      	ldr	r3, [r3, #0]
   d7ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7ad8:	9301      	str	r3, [sp, #4]
   d7ada:	bd08      	pop	{r3, pc}
   d7adc:	0003021c 	.word	0x0003021c

000d7ae0 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d7ae0:	b508      	push	{r3, lr}
   d7ae2:	4b02      	ldr	r3, [pc, #8]	; (d7aec <mktime+0xc>)
   d7ae4:	681b      	ldr	r3, [r3, #0]
   d7ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7ae8:	9301      	str	r3, [sp, #4]
   d7aea:	bd08      	pop	{r3, pc}
   d7aec:	0003021c 	.word	0x0003021c

000d7af0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7af0:	2100      	movs	r1, #0
   d7af2:	f7ff bea5 	b.w	d7840 <system_delay_ms>

000d7af6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7af6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7af8:	6883      	ldr	r3, [r0, #8]
   d7afa:	4604      	mov	r4, r0
   d7afc:	b90b      	cbnz	r3, d7b02 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7afe:	f003 f80b 	bl	dab18 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7b02:	68c3      	ldr	r3, [r0, #12]
   d7b04:	4798      	blx	r3
      if (_M_manager)
   d7b06:	68a3      	ldr	r3, [r4, #8]
   d7b08:	b11b      	cbz	r3, d7b12 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7b0a:	2203      	movs	r2, #3
   d7b0c:	4621      	mov	r1, r4
   d7b0e:	4620      	mov	r0, r4
   d7b10:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7b12:	4620      	mov	r0, r4
   d7b14:	2110      	movs	r1, #16
}
   d7b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7b1a:	f002 bff7 	b.w	dab0c <_ZdlPvj>

000d7b1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d7b1e:	680b      	ldr	r3, [r1, #0]
   d7b20:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d7b22:	b113      	cbz	r3, d7b2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7b24:	685a      	ldr	r2, [r3, #4]
   d7b26:	3201      	adds	r2, #1
   d7b28:	605a      	str	r2, [r3, #4]
      }
   d7b2a:	4770      	bx	lr

000d7b2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7b2c:	4802      	ldr	r0, [pc, #8]	; (d7b38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7b2e:	2300      	movs	r3, #0
   d7b30:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7b32:	f7ff bc53 	b.w	d73dc <os_mutex_recursive_create>
   d7b36:	bf00      	nop
   d7b38:	2003e52c 	.word	0x2003e52c

000d7b3c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7b3c:	2200      	movs	r2, #0
   d7b3e:	6840      	ldr	r0, [r0, #4]
   d7b40:	4611      	mov	r1, r2
   d7b42:	f7ff bf25 	b.w	d7990 <network_ready>

000d7b46 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7b46:	2200      	movs	r2, #0
   d7b48:	6840      	ldr	r0, [r0, #4]
   d7b4a:	4611      	mov	r1, r2
   d7b4c:	f7ff bf40 	b.w	d79d0 <network_listening>

000d7b50 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7b50:	2200      	movs	r2, #0
   d7b52:	6840      	ldr	r0, [r0, #4]
   d7b54:	4611      	mov	r1, r2
   d7b56:	f7ff bf4b 	b.w	d79f0 <network_get_listen_timeout>

000d7b5a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7b5a:	6840      	ldr	r0, [r0, #4]
   d7b5c:	2200      	movs	r2, #0
   d7b5e:	f7ff bf3f 	b.w	d79e0 <network_set_listen_timeout>

000d7b62 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7b62:	6840      	ldr	r0, [r0, #4]
   d7b64:	2200      	movs	r2, #0
   d7b66:	f081 0101 	eor.w	r1, r1, #1
   d7b6a:	f7ff bf29 	b.w	d79c0 <network_listen>

000d7b6e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7b6e:	2300      	movs	r3, #0
   d7b70:	6840      	ldr	r0, [r0, #4]
   d7b72:	461a      	mov	r2, r3
   d7b74:	4619      	mov	r1, r3
   d7b76:	f7ff bf1b 	b.w	d79b0 <network_off>

000d7b7a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7b7a:	2300      	movs	r3, #0
   d7b7c:	6840      	ldr	r0, [r0, #4]
   d7b7e:	461a      	mov	r2, r3
   d7b80:	4619      	mov	r1, r3
   d7b82:	f7ff bf0d 	b.w	d79a0 <network_on>

000d7b86 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7b86:	2200      	movs	r2, #0
   d7b88:	6840      	ldr	r0, [r0, #4]
   d7b8a:	4611      	mov	r1, r2
   d7b8c:	f7ff bef0 	b.w	d7970 <network_connecting>

000d7b90 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7b90:	6840      	ldr	r0, [r0, #4]
   d7b92:	2200      	movs	r2, #0
   d7b94:	2102      	movs	r1, #2
   d7b96:	f7ff bef3 	b.w	d7980 <network_disconnect>

000d7b9a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7b9a:	2300      	movs	r3, #0
   d7b9c:	6840      	ldr	r0, [r0, #4]
   d7b9e:	461a      	mov	r2, r3
   d7ba0:	f7ff bede 	b.w	d7960 <network_connect>

000d7ba4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d7ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
   d7ba6:	4b1b      	ldr	r3, [pc, #108]	; (d7c14 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d7ba8:	6003      	str	r3, [r0, #0]
   d7baa:	2500      	movs	r5, #0
   d7bac:	460f      	mov	r7, r1
   d7bae:	3330      	adds	r3, #48	; 0x30
   d7bb0:	2618      	movs	r6, #24
   d7bb2:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7bb6:	b089      	sub	sp, #36	; 0x24
   d7bb8:	6043      	str	r3, [r0, #4]
   d7bba:	4632      	mov	r2, r6
   d7bbc:	4629      	mov	r1, r5
   d7bbe:	4604      	mov	r4, r0
   d7bc0:	3010      	adds	r0, #16
   d7bc2:	f003 fc51 	bl	db468 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d7bc6:	6878      	ldr	r0, [r7, #4]
   d7bc8:	462a      	mov	r2, r5
   d7bca:	4629      	mov	r1, r5
   d7bcc:	f7ff fee0 	bl	d7990 <network_ready>
   d7bd0:	b918      	cbnz	r0, d7bda <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
   d7bd2:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
   d7bd4:	4620      	mov	r0, r4
   d7bd6:	b009      	add	sp, #36	; 0x24
   d7bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
   d7bda:	4629      	mov	r1, r5
   d7bdc:	4632      	mov	r2, r6
   d7bde:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
   d7be0:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
   d7be4:	f003 fc40 	bl	db468 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7be8:	a902      	add	r1, sp, #8
   d7bea:	4668      	mov	r0, sp
        sigext.size = sizeof(sigext);
   d7bec:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d7bf0:	f7ff fbec 	bl	d73cc <cellular_signal>
   d7bf4:	b110      	cbz	r0, d7bfc <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
   d7bf6:	2301      	movs	r3, #1
   d7bf8:	60a3      	str	r3, [r4, #8]
            return sig;
   d7bfa:	e7eb      	b.n	d7bd4 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
   d7bfc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d7bfe:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
   d7c00:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d7c02:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d7c04:	b90b      	cbnz	r3, d7c0a <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
   d7c06:	2302      	movs	r3, #2
   d7c08:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
   d7c0a:	a902      	add	r1, sp, #8
   d7c0c:	4620      	mov	r0, r4
   d7c0e:	f000 f8c0 	bl	d7d92 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
   d7c12:	e7df      	b.n	d7bd4 <_ZN5spark13CellularClass4RSSIEv+0x30>
   d7c14:	000dc30c 	.word	0x000dc30c

000d7c18 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7c18:	4b08      	ldr	r3, [pc, #32]	; (d7c3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7c1a:	b510      	push	{r4, lr}
   d7c1c:	2428      	movs	r4, #40	; 0x28
   d7c1e:	4622      	mov	r2, r4
   d7c20:	4618      	mov	r0, r3
   d7c22:	2100      	movs	r1, #0
   d7c24:	f003 fc20 	bl	db468 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7c28:	4b05      	ldr	r3, [pc, #20]	; (d7c40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7c2a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7c30:	6042      	str	r2, [r0, #4]
   d7c32:	2204      	movs	r2, #4
   d7c34:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d7c36:	4a03      	ldr	r2, [pc, #12]	; (d7c44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7c38:	601a      	str	r2, [r3, #0]
   d7c3a:	bd10      	pop	{r4, pc}
   d7c3c:	2003e538 	.word	0x2003e538
   d7c40:	2003e530 	.word	0x2003e530
   d7c44:	000dc2d0 	.word	0x000dc2d0

000d7c48 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d7c48:	4770      	bx	lr

000d7c4a <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d7c4a:	7d00      	ldrb	r0, [r0, #20]
   d7c4c:	4770      	bx	lr

000d7c4e <_ZNK14CellularSignal7isValidEv>:
#pragma GCC diagnostic pop

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d7c4e:	7d03      	ldrb	r3, [r0, #20]
   d7c50:	b14b      	cbz	r3, d7c66 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   d7c52:	6983      	ldr	r3, [r0, #24]
   d7c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7c58:	d005      	beq.n	d7c66 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   d7c5a:	6a00      	ldr	r0, [r0, #32]
   d7c5c:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   d7c60:	bf18      	it	ne
   d7c62:	2001      	movne	r0, #1
   d7c64:	4770      	bx	lr
   d7c66:	2000      	movs	r0, #0
            // Hence, `isValid()` can return "true" for invalid signal value. To add a note in docs.
            (sig_.rat == NET_ACCESS_TECHNOLOGY_GSM || sig_.qual != std::numeric_limits<int32_t>::min()));
#else
            sig_.qual != std::numeric_limits<int32_t>::min());
#endif
}
   d7c68:	4770      	bx	lr

000d7c6a <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   d7c6a:	6803      	ldr	r3, [r0, #0]
   d7c6c:	6a1b      	ldr	r3, [r3, #32]
   d7c6e:	4718      	bx	r3

000d7c70 <_ZN14CellularSignalD0Ev>:
   d7c70:	b510      	push	{r4, lr}
   d7c72:	2128      	movs	r1, #40	; 0x28
   d7c74:	4604      	mov	r4, r0
   d7c76:	f002 ff49 	bl	dab0c <_ZdlPvj>
   d7c7a:	4620      	mov	r0, r4
   d7c7c:	bd10      	pop	{r4, pc}
	...

000d7c80 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d7c80:	7d03      	ldrb	r3, [r0, #20]
   d7c82:	b17b      	cbz	r3, d7ca4 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d7c84:	69c3      	ldr	r3, [r0, #28]
   d7c86:	2b00      	cmp	r3, #0
   d7c88:	db0c      	blt.n	d7ca4 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d7c8a:	ee07 3a90 	vmov	s15, r3
   d7c8e:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7cac <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d7c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7c96:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7c9a:	eddf 7a05 	vldr	s15, [pc, #20]	; d7cb0 <_ZNK14CellularSignal11getStrengthEv+0x30>
   d7c9e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7ca2:	4770      	bx	lr
    return -1.0f;
   d7ca4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7ca8:	4770      	bx	lr
   d7caa:	bf00      	nop
   d7cac:	477fff00 	.word	0x477fff00
   d7cb0:	42c80000 	.word	0x42c80000

000d7cb4 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d7cb4:	7d03      	ldrb	r3, [r0, #20]
   d7cb6:	b163      	cbz	r3, d7cd2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   d7cb8:	6983      	ldr	r3, [r0, #24]
   d7cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7cbe:	d008      	beq.n	d7cd2 <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   d7cc0:	ee07 3a90 	vmov	s15, r3
   d7cc4:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7cd8 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d7cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7ccc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7cd0:	4770      	bx	lr
    return 0.0f;
   d7cd2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7cdc <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   d7cd6:	4770      	bx	lr
   d7cd8:	42c80000 	.word	0x42c80000
   d7cdc:	00000000 	.word	0x00000000

000d7ce0 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d7ce0:	7d03      	ldrb	r3, [r0, #20]
   d7ce2:	b17b      	cbz	r3, d7d04 <_ZNK14CellularSignal10getQualityEv+0x24>
   d7ce4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d7ce6:	2b00      	cmp	r3, #0
   d7ce8:	db0c      	blt.n	d7d04 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d7cea:	ee07 3a90 	vmov	s15, r3
   d7cee:	ed9f 7a07 	vldr	s14, [pc, #28]	; d7d0c <_ZNK14CellularSignal10getQualityEv+0x2c>
   d7cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7cf6:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7cfa:	eddf 7a05 	vldr	s15, [pc, #20]	; d7d10 <_ZNK14CellularSignal10getQualityEv+0x30>
   d7cfe:	ee20 0a27 	vmul.f32	s0, s0, s15
   d7d02:	4770      	bx	lr
    return -1.0f;
   d7d04:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d7d08:	4770      	bx	lr
   d7d0a:	bf00      	nop
   d7d0c:	477fff00 	.word	0x477fff00
   d7d10:	42c80000 	.word	0x42c80000

000d7d14 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d7d14:	7d03      	ldrb	r3, [r0, #20]
   d7d16:	b163      	cbz	r3, d7d32 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   d7d18:	6a03      	ldr	r3, [r0, #32]
   d7d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d7d1e:	d008      	beq.n	d7d32 <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   d7d20:	ee07 3a90 	vmov	s15, r3
   d7d24:	ed9f 7a04 	vldr	s14, [pc, #16]	; d7d38 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d7d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d7d2c:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d7d30:	4770      	bx	lr
    return 0.0f;
   d7d32:	ed9f 0a02 	vldr	s0, [pc, #8]	; d7d3c <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   d7d36:	4770      	bx	lr
   d7d38:	42c80000 	.word	0x42c80000
   d7d3c:	00000000 	.word	0x00000000

000d7d40 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d7d40:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d7d42:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   d7d44:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   d7d46:	da0a      	bge.n	d7d5e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   d7d48:	212d      	movs	r1, #45	; 0x2d
   d7d4a:	f002 f812 	bl	d9d72 <_ZN5Print5printEc>
            val = -n;
   d7d4e:	4261      	negs	r1, r4
            t = print('-');
   d7d50:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7d52:	220a      	movs	r2, #10
   d7d54:	4630      	mov	r0, r6
   d7d56:	f002 f81b 	bl	d9d90 <_ZN5Print11printNumberEmh>
    }
}
   d7d5a:	4428      	add	r0, r5
   d7d5c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   d7d5e:	4621      	mov	r1, r4
        size_t t = 0;
   d7d60:	2500      	movs	r5, #0
   d7d62:	e7f6      	b.n	d7d52 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000d7d64 <_ZNK14CellularSignal7printToER5Print>:
{
   d7d64:	b570      	push	{r4, r5, r6, lr}
   d7d66:	460c      	mov	r4, r1
   d7d68:	4605      	mov	r5, r0
   d7d6a:	6881      	ldr	r1, [r0, #8]
   d7d6c:	4620      	mov	r0, r4
   d7d6e:	f7ff ffe7 	bl	d7d40 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print(',');
   d7d72:	212c      	movs	r1, #44	; 0x2c
   d7d74:	4606      	mov	r6, r0
   d7d76:	4620      	mov	r0, r4
   d7d78:	f001 fffb 	bl	d9d72 <_ZN5Print5printEc>
   d7d7c:	68e9      	ldr	r1, [r5, #12]
   d7d7e:	4406      	add	r6, r0
size_t Print::print(T n, int base)
   d7d80:	4620      	mov	r0, r4
   d7d82:	f7ff ffdd 	bl	d7d40 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
}
   d7d86:	4430      	add	r0, r6
   d7d88:	bd70      	pop	{r4, r5, r6, pc}

000d7d8a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d7d8a:	f1a0 0004 	sub.w	r0, r0, #4
   d7d8e:	f7ff bfe9 	b.w	d7d64 <_ZNK14CellularSignal7printToER5Print>

000d7d92 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   d7d92:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d7d94:	460d      	mov	r5, r1
   d7d96:	f100 0410 	add.w	r4, r0, #16
   d7d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d9e:	e895 0003 	ldmia.w	r5, {r0, r1}
   d7da2:	e884 0003 	stmia.w	r4, {r0, r1}
}
   d7da6:	2001      	movs	r0, #1
   d7da8:	bd30      	pop	{r4, r5, pc}

000d7daa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7daa:	4770      	bx	lr

000d7dac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7dac:	2000      	movs	r0, #0
   d7dae:	4770      	bx	lr

000d7db0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7db0:	b510      	push	{r4, lr}
   d7db2:	2110      	movs	r1, #16
   d7db4:	4604      	mov	r4, r0
   d7db6:	f002 fea9 	bl	dab0c <_ZdlPvj>
   d7dba:	4620      	mov	r0, r4
   d7dbc:	bd10      	pop	{r4, pc}

000d7dbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7dbe:	b508      	push	{r3, lr}
      { delete this; }
   d7dc0:	f7ff fff6 	bl	d7db0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7dc4:	bd08      	pop	{r3, pc}

000d7dc6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d7dc6:	b510      	push	{r4, lr}
      if (_M_manager)
   d7dc8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d7dca:	4604      	mov	r4, r0
      if (_M_manager)
   d7dcc:	b113      	cbz	r3, d7dd4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7dce:	2203      	movs	r2, #3
   d7dd0:	4601      	mov	r1, r0
   d7dd2:	4798      	blx	r3
    }
   d7dd4:	4620      	mov	r0, r4
   d7dd6:	bd10      	pop	{r4, pc}

000d7dd8 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7dd8:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7dda:	2200      	movs	r2, #0
   d7ddc:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7de0:	6002      	str	r2, [r0, #0]
   d7de2:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7de4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7de6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7de8:	680c      	ldr	r4, [r1, #0]
   d7dea:	8085      	strh	r5, [r0, #4]
   d7dec:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7dee:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7df0:	bd30      	pop	{r4, r5, pc}

000d7df2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7df2:	b510      	push	{r4, lr}
   d7df4:	4604      	mov	r4, r0
    free((void*)msg_);
   d7df6:	6800      	ldr	r0, [r0, #0]
   d7df8:	f7ff fe1a 	bl	d7a30 <free>
}
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	bd10      	pop	{r4, pc}

000d7e00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7e00:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7e02:	68c4      	ldr	r4, [r0, #12]
   d7e04:	b1f4      	cbz	r4, d7e44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d7e06:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7e08:	2b02      	cmp	r3, #2
   d7e0a:	d103      	bne.n	d7e14 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7e0c:	f104 000c 	add.w	r0, r4, #12
   d7e10:	f7ff ffef 	bl	d7df2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7e14:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7e16:	b135      	cbz	r5, d7e26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7e18:	4628      	mov	r0, r5
   d7e1a:	f7ff ffd4 	bl	d7dc6 <_ZNSt14_Function_baseD1Ev>
   d7e1e:	2110      	movs	r1, #16
   d7e20:	4628      	mov	r0, r5
   d7e22:	f002 fe73 	bl	dab0c <_ZdlPvj>
   d7e26:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7e28:	b135      	cbz	r5, d7e38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7e2a:	4628      	mov	r0, r5
   d7e2c:	f7ff ffcb 	bl	d7dc6 <_ZNSt14_Function_baseD1Ev>
   d7e30:	2110      	movs	r1, #16
   d7e32:	4628      	mov	r0, r5
   d7e34:	f002 fe6a 	bl	dab0c <_ZdlPvj>
   d7e38:	4620      	mov	r0, r4
   d7e3a:	2114      	movs	r1, #20
   d7e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7e40:	f002 be64 	b.w	dab0c <_ZdlPvj>
   d7e44:	bd38      	pop	{r3, r4, r5, pc}

000d7e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7e48:	460e      	mov	r6, r1
   d7e4a:	4604      	mov	r4, r0
   d7e4c:	f856 3b04 	ldr.w	r3, [r6], #4
   d7e50:	9300      	str	r3, [sp, #0]
   d7e52:	460d      	mov	r5, r1
   d7e54:	a801      	add	r0, sp, #4
   d7e56:	4631      	mov	r1, r6
   d7e58:	f7ff fe61 	bl	d7b1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7e5c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7e5e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d7e60:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7e62:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7e64:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7e66:	2300      	movs	r3, #0
   d7e68:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7e6a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d7e6c:	f7fc fe86 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7e70:	4630      	mov	r0, r6
   d7e72:	f7fc fe83 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7e76:	4628      	mov	r0, r5
   d7e78:	2108      	movs	r1, #8
   d7e7a:	f002 fe47 	bl	dab0c <_ZdlPvj>
        return p;
    }
   d7e7e:	4620      	mov	r0, r4
   d7e80:	b002      	add	sp, #8
   d7e82:	bd70      	pop	{r4, r5, r6, pc}

000d7e84 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7e84:	b513      	push	{r0, r1, r4, lr}
   d7e86:	460b      	mov	r3, r1
   d7e88:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e8a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7e8e:	466c      	mov	r4, sp
   d7e90:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7e94:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7e98:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7e9c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7ea0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7ea4:	b002      	add	sp, #8
   d7ea6:	bd10      	pop	{r4, pc}

000d7ea8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7ea8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7eaa:	b510      	push	{r4, lr}
      if (_M_empty())
   d7eac:	b90a      	cbnz	r2, d7eb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7eae:	f002 fe33 	bl	dab18 <_ZSt25__throw_bad_function_callv>
    }
   d7eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7eb6:	68c3      	ldr	r3, [r0, #12]
   d7eb8:	4718      	bx	r3

000d7eba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7eba:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7ebc:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7ebe:	f100 0110 	add.w	r1, r0, #16
   d7ec2:	f7ff fff1 	bl	d7ea8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7ec6:	bd08      	pop	{r3, pc}

000d7ec8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7ec8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7eca:	b510      	push	{r4, lr}
      if (_M_empty())
   d7ecc:	b90a      	cbnz	r2, d7ed2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7ece:	f002 fe23 	bl	dab18 <_ZSt25__throw_bad_function_callv>
    }
   d7ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7ed6:	68c3      	ldr	r3, [r0, #12]
   d7ed8:	4718      	bx	r3

000d7eda <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7eda:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7edc:	6800      	ldr	r0, [r0, #0]
   d7ede:	f100 0110 	add.w	r1, r0, #16
   d7ee2:	f7ff fff1 	bl	d7ec8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7ee6:	bd08      	pop	{r3, pc}

000d7ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7ee8:	b538      	push	{r3, r4, r5, lr}
   d7eea:	2300      	movs	r3, #0
   d7eec:	4604      	mov	r4, r0
   d7eee:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7ef0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7ef2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7ef4:	f7fc f8cf 	bl	d4096 <_Znwj>
   d7ef8:	b128      	cbz	r0, d7f06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7efa:	2301      	movs	r3, #1
   d7efc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7f00:	4b02      	ldr	r3, [pc, #8]	; (d7f0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7f02:	6003      	str	r3, [r0, #0]
   d7f04:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7f06:	6020      	str	r0, [r4, #0]
	}
   d7f08:	4620      	mov	r0, r4
   d7f0a:	bd38      	pop	{r3, r4, r5, pc}
   d7f0c:	000dc348 	.word	0x000dc348

000d7f10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7f10:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7f12:	2300      	movs	r3, #0
   d7f14:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7f16:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7f18:	4604      	mov	r4, r0
   d7f1a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7f1c:	b12b      	cbz	r3, d7f2a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7f1e:	2202      	movs	r2, #2
   d7f20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7f22:	68eb      	ldr	r3, [r5, #12]
   d7f24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7f26:	68ab      	ldr	r3, [r5, #8]
   d7f28:	60a3      	str	r3, [r4, #8]
    }
   d7f2a:	4620      	mov	r0, r4
   d7f2c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7f30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f32:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7f34:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7f36:	4668      	mov	r0, sp
   d7f38:	f7ff ff4e 	bl	d7dd8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7f3c:	f04f 0302 	mov.w	r3, #2
   d7f40:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7f44:	2a00      	cmp	r2, #0
   d7f46:	d103      	bne.n	d7f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7f48:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7f4c:	2900      	cmp	r1, #0
   d7f4e:	d1f7      	bne.n	d7f40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7f50:	d125      	bne.n	d7f9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d7f52:	f104 050c 	add.w	r5, r4, #12
   d7f56:	4669      	mov	r1, sp
   d7f58:	4628      	mov	r0, r5
   d7f5a:	f7ff ff3d 	bl	d7dd8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d7f5e:	f3bf 8f5b 	dmb	ish
   d7f62:	2301      	movs	r3, #1
   d7f64:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7f66:	2000      	movs	r0, #0
   d7f68:	f104 0308 	add.w	r3, r4, #8
   d7f6c:	f3bf 8f5b 	dmb	ish
   d7f70:	e853 6f00 	ldrex	r6, [r3]
   d7f74:	e843 0200 	strex	r2, r0, [r3]
   d7f78:	2a00      	cmp	r2, #0
   d7f7a:	d1f9      	bne.n	d7f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7f7c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7f80:	b16e      	cbz	r6, d7f9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d7f82:	f7ff fc75 	bl	d7870 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7f86:	b178      	cbz	r0, d7fa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7f88:	4629      	mov	r1, r5
   d7f8a:	4630      	mov	r0, r6
   d7f8c:	f7ff ff8c 	bl	d7ea8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d7f90:	4630      	mov	r0, r6
   d7f92:	f7ff ff18 	bl	d7dc6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7f96:	2110      	movs	r1, #16
   d7f98:	4630      	mov	r0, r6
   d7f9a:	f002 fdb7 	bl	dab0c <_ZdlPvj>
        p_->setError(std::move(error));
   d7f9e:	4668      	mov	r0, sp
   d7fa0:	f7ff ff27 	bl	d7df2 <_ZN8particle5ErrorD1Ev>
    }
   d7fa4:	b009      	add	sp, #36	; 0x24
   d7fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7fa8:	4631      	mov	r1, r6
   d7faa:	a802      	add	r0, sp, #8
   d7fac:	f7ff ffb0 	bl	d7f10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7fb0:	68e0      	ldr	r0, [r4, #12]
   d7fb2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7fb6:	b108      	cbz	r0, d7fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7fb8:	f003 fae0 	bl	db57c <strdup>
        type_(type) {
   d7fbc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7fbe:	2010      	movs	r0, #16
   d7fc0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7fc4:	f7fc f867 	bl	d4096 <_Znwj>
   d7fc8:	4605      	mov	r5, r0
   d7fca:	b1e8      	cbz	r0, d8008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7fcc:	2700      	movs	r7, #0
   d7fce:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7fd0:	2018      	movs	r0, #24
   d7fd2:	f7fc f860 	bl	d4096 <_Znwj>
   d7fd6:	4604      	mov	r4, r0
   d7fd8:	b188      	cbz	r0, d7ffe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7fda:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7fdc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7fde:	a802      	add	r0, sp, #8
   d7fe0:	f7ff ff50 	bl	d7e84 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fe4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7fe6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7fe8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7fea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7fec:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7fee:	a906      	add	r1, sp, #24
   d7ff0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ff2:	60e3      	str	r3, [r4, #12]
   d7ff4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7ff8:	9205      	str	r2, [sp, #20]
   d7ffa:	f7ff feed 	bl	d7dd8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7ffe:	4b08      	ldr	r3, [pc, #32]	; (d8020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d8000:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d8002:	4b08      	ldr	r3, [pc, #32]	; (d8024 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d8004:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d8006:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d8008:	a806      	add	r0, sp, #24
   d800a:	f7ff fef2 	bl	d7df2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d800e:	a802      	add	r0, sp, #8
   d8010:	f7ff fed9 	bl	d7dc6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8014:	2200      	movs	r2, #0
   d8016:	4629      	mov	r1, r5
   d8018:	4803      	ldr	r0, [pc, #12]	; (d8028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d801a:	f7ff fc31 	bl	d7880 <application_thread_invoke>
   d801e:	e7b7      	b.n	d7f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d8020:	000d7ebb 	.word	0x000d7ebb
   d8024:	000d8151 	.word	0x000d8151
   d8028:	000d7af7 	.word	0x000d7af7

000d802c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d802c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8030:	b08a      	sub	sp, #40	; 0x28
   d8032:	4605      	mov	r5, r0
   d8034:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d8038:	460c      	mov	r4, r1
   d803a:	4617      	mov	r7, r2
   d803c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d803e:	f7ff fc67 	bl	d7910 <spark_cloud_flag_connected>
   d8042:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d8044:	4682      	mov	sl, r0
   d8046:	bb38      	cbnz	r0, d8098 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d8048:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d804c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d804e:	a905      	add	r1, sp, #20
   d8050:	4630      	mov	r0, r6
   d8052:	f8ad 3018 	strh.w	r3, [sp, #24]
   d8056:	f7ff febf 	bl	d7dd8 <_ZN8particle5ErrorC1EOS0_>
   d805a:	2014      	movs	r0, #20
   d805c:	f7fc f81b 	bl	d4096 <_Znwj>
   d8060:	4604      	mov	r4, r0
   d8062:	b148      	cbz	r0, d8078 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d8064:	2302      	movs	r3, #2
   d8066:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8068:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d806a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d806e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d8070:	4631      	mov	r1, r6
   d8072:	300c      	adds	r0, #12
   d8074:	f7ff feb0 	bl	d7dd8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d8078:	4628      	mov	r0, r5
	: __shared_count(__p)
   d807a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d807c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d8080:	f7ff ff32 	bl	d7ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d8084:	4630      	mov	r0, r6
   d8086:	f7ff feb4 	bl	d7df2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d808a:	a805      	add	r0, sp, #20
   d808c:	f7ff feb1 	bl	d7df2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d8090:	4628      	mov	r0, r5
   d8092:	b00a      	add	sp, #40	; 0x28
   d8094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d8098:	230c      	movs	r3, #12
   d809a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d809e:	2014      	movs	r0, #20
   d80a0:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d80a4:	9307      	str	r3, [sp, #28]
   d80a6:	f7fb fff6 	bl	d4096 <_Znwj>
   d80aa:	4601      	mov	r1, r0
   d80ac:	b128      	cbz	r0, d80ba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d80ae:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d80b2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d80b6:	f880 a001 	strb.w	sl, [r0, #1]
   d80ba:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d80bc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d80be:	f7ff ff13 	bl	d7ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d80c2:	4b22      	ldr	r3, [pc, #136]	; (d814c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d80c4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d80c6:	2008      	movs	r0, #8
   d80c8:	f7fb ffe5 	bl	d4096 <_Znwj>
   d80cc:	4682      	mov	sl, r0
   d80ce:	b128      	cbz	r0, d80dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d80d0:	9b03      	ldr	r3, [sp, #12]
   d80d2:	f840 3b04 	str.w	r3, [r0], #4
   d80d6:	a904      	add	r1, sp, #16
   d80d8:	f7ff fd21 	bl	d7b1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d80dc:	9600      	str	r6, [sp, #0]
   d80de:	fa5f f389 	uxtb.w	r3, r9
   d80e2:	4642      	mov	r2, r8
   d80e4:	4639      	mov	r1, r7
   d80e6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d80e8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d80ec:	f7ff fc18 	bl	d7920 <spark_send_event>
   d80f0:	b9b8      	cbnz	r0, d8122 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d80f2:	9b03      	ldr	r3, [sp, #12]
   d80f4:	785b      	ldrb	r3, [r3, #1]
   d80f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d80fa:	b993      	cbnz	r3, d8122 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d80fc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d8100:	a905      	add	r1, sp, #20
   d8102:	a803      	add	r0, sp, #12
   d8104:	9205      	str	r2, [sp, #20]
   d8106:	f8ad 3018 	strh.w	r3, [sp, #24]
   d810a:	f7ff ff11 	bl	d7f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d810e:	a805      	add	r0, sp, #20
   d8110:	f7ff fe6f 	bl	d7df2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d8114:	a805      	add	r0, sp, #20
   d8116:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8118:	f7ff fe95 	bl	d7e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d811c:	a806      	add	r0, sp, #24
   d811e:	f7fc fd2d 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8122:	9b03      	ldr	r3, [sp, #12]
   d8124:	9305      	str	r3, [sp, #20]
   d8126:	a904      	add	r1, sp, #16
   d8128:	a806      	add	r0, sp, #24
   d812a:	f7ff fcf8 	bl	d7b1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d812e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8130:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d8132:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d8134:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d8136:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d8138:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d813a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d813c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d813e:	f7fc fd1d 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8142:	a804      	add	r0, sp, #16
   d8144:	f7fc fd1a 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d8148:	e7a2      	b.n	d8090 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d814a:	bf00      	nop
   d814c:	000d8215 	.word	0x000d8215

000d8150 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d8150:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d8152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8154:	4605      	mov	r5, r0
	  switch (__op)
   d8156:	d007      	beq.n	d8168 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d8158:	2a03      	cmp	r2, #3
   d815a:	d018      	beq.n	d818e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d815c:	2a01      	cmp	r2, #1
   d815e:	d101      	bne.n	d8164 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d8160:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d8162:	6003      	str	r3, [r0, #0]
	}
   d8164:	2000      	movs	r0, #0
   d8166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d8168:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d816a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d816c:	f7fb ff93 	bl	d4096 <_Znwj>
   d8170:	4604      	mov	r4, r0
   d8172:	b150      	cbz	r0, d818a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d8174:	4631      	mov	r1, r6
   d8176:	f7ff fecb 	bl	d7f10 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d817a:	6930      	ldr	r0, [r6, #16]
   d817c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8180:	b108      	cbz	r0, d8186 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d8182:	f003 f9fb 	bl	db57c <strdup>
        type_(type) {
   d8186:	6120      	str	r0, [r4, #16]
   d8188:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d818a:	602c      	str	r4, [r5, #0]
	}
   d818c:	e7ea      	b.n	d8164 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d818e:	6804      	ldr	r4, [r0, #0]
   d8190:	2c00      	cmp	r4, #0
   d8192:	d0e7      	beq.n	d8164 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d8194:	f104 0010 	add.w	r0, r4, #16
   d8198:	f7ff fe2b 	bl	d7df2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d819c:	4620      	mov	r0, r4
   d819e:	f7ff fe12 	bl	d7dc6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d81a2:	2118      	movs	r1, #24
   d81a4:	4620      	mov	r0, r4
   d81a6:	f002 fcb1 	bl	dab0c <_ZdlPvj>
   d81aa:	e7db      	b.n	d8164 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d81ac <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d81ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d81ae:	2300      	movs	r3, #0
   d81b0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d81b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d81b4:	4604      	mov	r4, r0
   d81b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d81b8:	b12b      	cbz	r3, d81c6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d81ba:	2202      	movs	r2, #2
   d81bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d81be:	68eb      	ldr	r3, [r5, #12]
   d81c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d81c2:	68ab      	ldr	r3, [r5, #8]
   d81c4:	60a3      	str	r3, [r4, #8]
    }
   d81c6:	4620      	mov	r0, r4
   d81c8:	bd38      	pop	{r3, r4, r5, pc}

000d81ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d81ca:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d81cc:	b570      	push	{r4, r5, r6, lr}
   d81ce:	4604      	mov	r4, r0
	  switch (__op)
   d81d0:	d007      	beq.n	d81e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d81d2:	2a03      	cmp	r2, #3
   d81d4:	d012      	beq.n	d81fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d81d6:	2a01      	cmp	r2, #1
   d81d8:	d101      	bne.n	d81de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d81da:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d81dc:	6003      	str	r3, [r0, #0]
	}
   d81de:	2000      	movs	r0, #0
   d81e0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d81e2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d81e4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d81e6:	f7fb ff56 	bl	d4096 <_Znwj>
   d81ea:	4605      	mov	r5, r0
   d81ec:	b120      	cbz	r0, d81f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d81ee:	4631      	mov	r1, r6
   d81f0:	f7ff ffdc 	bl	d81ac <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d81f4:	7c33      	ldrb	r3, [r6, #16]
   d81f6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d81f8:	6025      	str	r5, [r4, #0]
	}
   d81fa:	e7f0      	b.n	d81de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d81fc:	6804      	ldr	r4, [r0, #0]
   d81fe:	2c00      	cmp	r4, #0
   d8200:	d0ed      	beq.n	d81de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d8202:	4620      	mov	r0, r4
   d8204:	f7ff fddf 	bl	d7dc6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d8208:	2114      	movs	r1, #20
   d820a:	4620      	mov	r0, r4
   d820c:	f002 fc7e 	bl	dab0c <_ZdlPvj>
   d8210:	e7e5      	b.n	d81de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d8214 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d8214:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8216:	b089      	sub	sp, #36	; 0x24
   d8218:	4604      	mov	r4, r0
   d821a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d821c:	a801      	add	r0, sp, #4
   d821e:	4611      	mov	r1, r2
   d8220:	f7ff fe11 	bl	d7e46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d8224:	b1a4      	cbz	r4, d8250 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d8226:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d8228:	b11d      	cbz	r5, d8232 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d822a:	4628      	mov	r0, r5
   d822c:	f003 f9a6 	bl	db57c <strdup>
   d8230:	4605      	mov	r5, r0
   d8232:	a801      	add	r0, sp, #4
   d8234:	a903      	add	r1, sp, #12
        type_(type) {
   d8236:	9503      	str	r5, [sp, #12]
   d8238:	f8ad 4010 	strh.w	r4, [sp, #16]
   d823c:	f7ff fe78 	bl	d7f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d8240:	a803      	add	r0, sp, #12
   d8242:	f7ff fdd6 	bl	d7df2 <_ZN8particle5ErrorD1Ev>
   d8246:	a802      	add	r0, sp, #8
   d8248:	f7fc fc98 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d824c:	b009      	add	sp, #36	; 0x24
   d824e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d8250:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d8252:	2301      	movs	r3, #1
   d8254:	e8d5 2f4f 	ldrexb	r2, [r5]
   d8258:	2a00      	cmp	r2, #0
   d825a:	d103      	bne.n	d8264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d825c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d8260:	2900      	cmp	r1, #0
   d8262:	d1f7      	bne.n	d8254 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d8264:	d1ef      	bne.n	d8246 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d8266:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d8268:	f3bf 8f5b 	dmb	ish
   d826c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d826e:	1d2b      	adds	r3, r5, #4
   d8270:	f3bf 8f5b 	dmb	ish
   d8274:	e853 6f00 	ldrex	r6, [r3]
   d8278:	e843 4200 	strex	r2, r4, [r3]
   d827c:	2a00      	cmp	r2, #0
   d827e:	d1f9      	bne.n	d8274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d8280:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d8284:	2e00      	cmp	r6, #0
   d8286:	d0de      	beq.n	d8246 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d8288:	4620      	mov	r0, r4
   d828a:	f7ff faf1 	bl	d7870 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d828e:	4607      	mov	r7, r0
   d8290:	b160      	cbz	r0, d82ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d8292:	f105 010c 	add.w	r1, r5, #12
   d8296:	4630      	mov	r0, r6
   d8298:	f7ff fe16 	bl	d7ec8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d829c:	4630      	mov	r0, r6
   d829e:	f7ff fd92 	bl	d7dc6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d82a2:	2110      	movs	r1, #16
   d82a4:	4630      	mov	r0, r6
   d82a6:	f002 fc31 	bl	dab0c <_ZdlPvj>
   d82aa:	e7cc      	b.n	d8246 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d82ac:	4631      	mov	r1, r6
   d82ae:	a803      	add	r0, sp, #12
   d82b0:	f7ff ff7c 	bl	d81ac <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d82b4:	7b2b      	ldrb	r3, [r5, #12]
   d82b6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d82ba:	2010      	movs	r0, #16
   d82bc:	f7fb feeb 	bl	d4096 <_Znwj>
   d82c0:	4605      	mov	r5, r0
   d82c2:	b1d0      	cbz	r0, d82fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d82c4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d82c6:	2014      	movs	r0, #20
   d82c8:	f7fb fee5 	bl	d4096 <_Znwj>
   d82cc:	4604      	mov	r4, r0
   d82ce:	b178      	cbz	r0, d82f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d82d0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d82d2:	4601      	mov	r1, r0
   d82d4:	a803      	add	r0, sp, #12
   d82d6:	f7ff fdd5 	bl	d7e84 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82da:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d82dc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d82de:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d82e0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d82e2:	9205      	str	r2, [sp, #20]
   d82e4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d82e6:	60e3      	str	r3, [r4, #12]
   d82e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d82ec:	9206      	str	r2, [sp, #24]
   d82ee:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d82f0:	4b06      	ldr	r3, [pc, #24]	; (d830c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d82f2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d82f4:	4b06      	ldr	r3, [pc, #24]	; (d8310 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d82f6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d82f8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d82fa:	a803      	add	r0, sp, #12
   d82fc:	f7ff fd63 	bl	d7dc6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d8300:	2200      	movs	r2, #0
   d8302:	4629      	mov	r1, r5
   d8304:	4803      	ldr	r0, [pc, #12]	; (d8314 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d8306:	f7ff fabb 	bl	d7880 <application_thread_invoke>
   d830a:	e7c7      	b.n	d829c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d830c:	000d7edb 	.word	0x000d7edb
   d8310:	000d81cb 	.word	0x000d81cb
   d8314:	000d7af7 	.word	0x000d7af7

000d8318 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8318:	2200      	movs	r2, #0
   d831a:	6840      	ldr	r0, [r0, #4]
   d831c:	4611      	mov	r1, r2
   d831e:	f7ff bb57 	b.w	d79d0 <network_listening>

000d8322 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8322:	2200      	movs	r2, #0
   d8324:	6840      	ldr	r0, [r0, #4]
   d8326:	4611      	mov	r1, r2
   d8328:	f7ff bb62 	b.w	d79f0 <network_get_listen_timeout>

000d832c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d832c:	6840      	ldr	r0, [r0, #4]
   d832e:	2200      	movs	r2, #0
   d8330:	f7ff bb56 	b.w	d79e0 <network_set_listen_timeout>

000d8334 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8334:	6840      	ldr	r0, [r0, #4]
   d8336:	2200      	movs	r2, #0
   d8338:	f081 0101 	eor.w	r1, r1, #1
   d833c:	f7ff bb40 	b.w	d79c0 <network_listen>

000d8340 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8340:	2300      	movs	r3, #0
   d8342:	6840      	ldr	r0, [r0, #4]
   d8344:	461a      	mov	r2, r3
   d8346:	4619      	mov	r1, r3
   d8348:	f7ff bb32 	b.w	d79b0 <network_off>

000d834c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d834c:	2300      	movs	r3, #0
   d834e:	6840      	ldr	r0, [r0, #4]
   d8350:	461a      	mov	r2, r3
   d8352:	4619      	mov	r1, r3
   d8354:	f7ff bb24 	b.w	d79a0 <network_on>

000d8358 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8358:	2200      	movs	r2, #0
   d835a:	6840      	ldr	r0, [r0, #4]
   d835c:	4611      	mov	r1, r2
   d835e:	f7ff bb17 	b.w	d7990 <network_ready>

000d8362 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8362:	2200      	movs	r2, #0
   d8364:	6840      	ldr	r0, [r0, #4]
   d8366:	4611      	mov	r1, r2
   d8368:	f7ff bb02 	b.w	d7970 <network_connecting>

000d836c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d836c:	6840      	ldr	r0, [r0, #4]
   d836e:	2200      	movs	r2, #0
   d8370:	2102      	movs	r1, #2
   d8372:	f7ff bb05 	b.w	d7980 <network_disconnect>

000d8376 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8376:	2300      	movs	r3, #0
   d8378:	6840      	ldr	r0, [r0, #4]
   d837a:	461a      	mov	r2, r3
   d837c:	f7ff baf0 	b.w	d7960 <network_connect>

000d8380 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d8380:	4b02      	ldr	r3, [pc, #8]	; (d838c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d8382:	2203      	movs	r2, #3
   d8384:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d8386:	4a02      	ldr	r2, [pc, #8]	; (d8390 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d8388:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d838a:	4770      	bx	lr
   d838c:	2003e560 	.word	0x2003e560
   d8390:	000dc364 	.word	0x000dc364

000d8394 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   d8394:	6800      	ldr	r0, [r0, #0]
   d8396:	f000 b951 	b.w	d863c <_ZN7TwoWire4lockEv>

000d839a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   d839a:	b510      	push	{r4, lr}
   d839c:	4604      	mov	r4, r0
      lock_(_lock) {
   d839e:	6001      	str	r1, [r0, #0]
   d83a0:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   d83a2:	b10a      	cbz	r2, d83a8 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   d83a4:	f7ff fff6 	bl	d8394 <_ZN9FuelGauge4lockEv>
}
   d83a8:	4620      	mov	r0, r4
   d83aa:	bd10      	pop	{r4, pc}

000d83ac <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   d83ac:	b513      	push	{r0, r1, r4, lr}
   d83ae:	4604      	mov	r4, r0
   d83b0:	9101      	str	r1, [sp, #4]
            return &Wire1;
   d83b2:	f002 fb87 	bl	daac4 <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   d83b6:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   d83b8:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   d83ba:	4620      	mov	r0, r4
   d83bc:	f7ff ffed 	bl	d839a <_ZN9FuelGaugeC1ER7TwoWireb>
}
   d83c0:	4620      	mov	r0, r4
   d83c2:	b002      	add	sp, #8
   d83c4:	bd10      	pop	{r4, pc}

000d83c6 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   d83c6:	6800      	ldr	r0, [r0, #0]
   d83c8:	f000 b941 	b.w	d864e <_ZN7TwoWire6unlockEv>

000d83cc <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
   d83cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d83d0:	4604      	mov	r4, r0
   d83d2:	460d      	mov	r5, r1
   d83d4:	4617      	mov	r7, r2
   d83d6:	461e      	mov	r6, r3
   d83d8:	f7ff ffdc 	bl	d8394 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d83dc:	2336      	movs	r3, #54	; 0x36
   d83de:	f88d 3000 	strb.w	r3, [sp]
   d83e2:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d83e4:	6820      	ldr	r0, [r4, #0]
   d83e6:	9301      	str	r3, [sp, #4]
   d83e8:	f04f 0801 	mov.w	r8, #1
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   d83ec:	230a      	movs	r3, #10
   d83ee:	4669      	mov	r1, sp
   d83f0:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d83f2:	f88d 8008 	strb.w	r8, [sp, #8]
   d83f6:	f000 f905 	bl	d8604 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
   d83fa:	6820      	ldr	r0, [r4, #0]
   d83fc:	6803      	ldr	r3, [r0, #0]
   d83fe:	4629      	mov	r1, r5
   d8400:	689b      	ldr	r3, [r3, #8]
   d8402:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d8404:	6820      	ldr	r0, [r4, #0]
   d8406:	4641      	mov	r1, r8
   d8408:	f000 f914 	bl	d8634 <_ZN7TwoWire15endTransmissionEh>
   d840c:	4605      	mov	r5, r0
   d840e:	b140      	cbz	r0, d8422 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
   d8410:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
   d8414:	4620      	mov	r0, r4
   d8416:	f7ff ffd6 	bl	d83c6 <_ZN9FuelGauge6unlockEv>
}
   d841a:	4628      	mov	r0, r5
   d841c:	b004      	add	sp, #16
   d841e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
   d8422:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
   d8424:	6820      	ldr	r0, [r4, #0]
   d8426:	9301      	str	r3, [sp, #4]
   d8428:	4669      	mov	r1, sp
   d842a:	f000 f8bb 	bl	d85a4 <_ZN7TwoWire11requestFromERK16WireTransmission>
   d842e:	2802      	cmp	r0, #2
   d8430:	d1ee      	bne.n	d8410 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
   d8432:	6820      	ldr	r0, [r4, #0]
   d8434:	6803      	ldr	r3, [r0, #0]
   d8436:	695b      	ldr	r3, [r3, #20]
   d8438:	4798      	blx	r3
   d843a:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
   d843c:	6820      	ldr	r0, [r4, #0]
   d843e:	6803      	ldr	r3, [r0, #0]
   d8440:	695b      	ldr	r3, [r3, #20]
   d8442:	4798      	blx	r3
   d8444:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
   d8446:	e7e5      	b.n	d8414 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>

000d8448 <_ZN9FuelGauge6getSoCEv>:
float FuelGauge::getSoC() {
   d8448:	b507      	push	{r0, r1, r2, lr}
    byte MSB = 0;
   d844a:	2300      	movs	r3, #0
   d844c:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
   d8450:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
   d8454:	f10d 0206 	add.w	r2, sp, #6
   d8458:	f10d 0307 	add.w	r3, sp, #7
   d845c:	2104      	movs	r1, #4
   d845e:	f7ff ffb5 	bl	d83cc <_ZN9FuelGauge12readRegisterEhRhS0_>
   d8462:	b9b0      	cbnz	r0, d8492 <_ZN9FuelGauge6getSoCEv+0x4a>
        float decimal = LSB / 256.0;
   d8464:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d8468:	f002 fcac 	bl	dadc4 <__aeabi_i2d>
   d846c:	4b0a      	ldr	r3, [pc, #40]	; (d8498 <_ZN9FuelGauge6getSoCEv+0x50>)
   d846e:	2200      	movs	r2, #0
   d8470:	f002 fd12 	bl	dae98 <__aeabi_dmul>
   d8474:	f002 ff42 	bl	db2fc <__aeabi_d2f>
        return MSB + decimal;
   d8478:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d847c:	ee00 3a10 	vmov	s0, r3
   d8480:	ee07 0a90 	vmov	s15, r0
   d8484:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   d8488:	ee37 0a80 	vadd.f32	s0, s15, s0
}
   d848c:	b003      	add	sp, #12
   d848e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1.0f;
   d8492:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d8496:	e7f9      	b.n	d848c <_ZN9FuelGauge6getSoCEv+0x44>
   d8498:	3f700000 	.word	0x3f700000

000d849c <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   d849c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d84a0:	4616      	mov	r6, r2
   d84a2:	4604      	mov	r4, r0
   d84a4:	461d      	mov	r5, r3
   d84a6:	460f      	mov	r7, r1
      { _M_device.lock(); }
   d84a8:	f7ff ff74 	bl	d8394 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d84ac:	2336      	movs	r3, #54	; 0x36
   d84ae:	f88d 3000 	strb.w	r3, [sp]
   d84b2:	2300      	movs	r3, #0
    i2c_.beginTransmission(config);
   d84b4:	6820      	ldr	r0, [r4, #0]
   d84b6:	9301      	str	r3, [sp, #4]
   d84b8:	f04f 0801 	mov.w	r8, #1
    timeout_ = ms;
   d84bc:	230a      	movs	r3, #10
   d84be:	4669      	mov	r1, sp
   d84c0:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d84c2:	f88d 8008 	strb.w	r8, [sp, #8]
   d84c6:	f000 f89d 	bl	d8604 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   d84ca:	6820      	ldr	r0, [r4, #0]
   d84cc:	6803      	ldr	r3, [r0, #0]
   d84ce:	4639      	mov	r1, r7
   d84d0:	689b      	ldr	r3, [r3, #8]
   d84d2:	4798      	blx	r3
    i2c_.write(MSB);
   d84d4:	6820      	ldr	r0, [r4, #0]
   d84d6:	6803      	ldr	r3, [r0, #0]
   d84d8:	4631      	mov	r1, r6
   d84da:	689b      	ldr	r3, [r3, #8]
   d84dc:	4798      	blx	r3
    i2c_.write(LSB);
   d84de:	6820      	ldr	r0, [r4, #0]
   d84e0:	6803      	ldr	r3, [r0, #0]
   d84e2:	4629      	mov	r1, r5
   d84e4:	689b      	ldr	r3, [r3, #8]
   d84e6:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   d84e8:	4641      	mov	r1, r8
   d84ea:	6820      	ldr	r0, [r4, #0]
   d84ec:	f000 f8a2 	bl	d8634 <_ZN7TwoWire15endTransmissionEh>
   d84f0:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   d84f2:	4620      	mov	r0, r4
   d84f4:	bf0c      	ite	eq
   d84f6:	2500      	moveq	r5, #0
   d84f8:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   d84fc:	f7ff ff63 	bl	d83c6 <_ZN9FuelGauge6unlockEv>
}
   d8500:	4628      	mov	r0, r5
   d8502:	b004      	add	sp, #16
   d8504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8508 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   d8508:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   d850a:	2240      	movs	r2, #64	; 0x40
   d850c:	2300      	movs	r3, #0
   d850e:	2106      	movs	r1, #6
   d8510:	f7ff ffc4 	bl	d849c <_ZN9FuelGauge13writeRegisterEhhh>
}
   d8514:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d8518:	bd08      	pop	{r3, pc}

000d851a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d851a:	4770      	bx	lr

000d851c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d851e:	4606      	mov	r6, r0
   d8520:	4615      	mov	r5, r2
   d8522:	460c      	mov	r4, r1
   d8524:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8526:	42bc      	cmp	r4, r7
   d8528:	d006      	beq.n	d8538 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d852a:	6833      	ldr	r3, [r6, #0]
   d852c:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8530:	689b      	ldr	r3, [r3, #8]
   d8532:	4630      	mov	r0, r6
   d8534:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d8536:	e7f6      	b.n	d8526 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d8538:	4628      	mov	r0, r5
   d853a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d853c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d853c:	7c00      	ldrb	r0, [r0, #16]
   d853e:	2200      	movs	r2, #0
   d8540:	f7fe bffc 	b.w	d753c <hal_i2c_write>

000d8544 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d8544:	7c00      	ldrb	r0, [r0, #16]
   d8546:	2100      	movs	r1, #0
   d8548:	f7ff b800 	b.w	d754c <hal_i2c_available>

000d854c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d854c:	7c00      	ldrb	r0, [r0, #16]
   d854e:	2100      	movs	r1, #0
   d8550:	f7ff b804 	b.w	d755c <hal_i2c_read>

000d8554 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d8554:	7c00      	ldrb	r0, [r0, #16]
   d8556:	2100      	movs	r1, #0
   d8558:	f7ff b808 	b.w	d756c <hal_i2c_peek>

000d855c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d855c:	7c00      	ldrb	r0, [r0, #16]
   d855e:	2100      	movs	r1, #0
   d8560:	f7ff b80c 	b.w	d757c <hal_i2c_flush>

000d8564 <_ZN7TwoWireD0Ev>:
   d8564:	b510      	push	{r4, lr}
   d8566:	2114      	movs	r1, #20
   d8568:	4604      	mov	r4, r0
   d856a:	f002 facf 	bl	dab0c <_ZdlPvj>
   d856e:	4620      	mov	r0, r4
   d8570:	bd10      	pop	{r4, pc}
	...

000d8574 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d8574:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d857a:	4604      	mov	r4, r0
   d857c:	4608      	mov	r0, r1
   d857e:	2100      	movs	r1, #0
   d8580:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8584:	4b03      	ldr	r3, [pc, #12]	; (d8594 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d8586:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d8588:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d858a:	4611      	mov	r1, r2
   d858c:	f7ff f806 	bl	d759c <hal_i2c_init>
}
   d8590:	4620      	mov	r0, r4
   d8592:	bd10      	pop	{r4, pc}
   d8594:	000dc3a0 	.word	0x000dc3a0

000d8598 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d8598:	2300      	movs	r3, #0
   d859a:	7c00      	ldrb	r0, [r0, #16]
   d859c:	461a      	mov	r2, r3
   d859e:	4619      	mov	r1, r3
   d85a0:	f7fe bfb4 	b.w	d750c <hal_i2c_begin>

000d85a4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d85a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d85a6:	2200      	movs	r2, #0
   d85a8:	2314      	movs	r3, #20
   d85aa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d85ae:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d85b2:	780b      	ldrb	r3, [r1, #0]
   d85b4:	f88d 3008 	strb.w	r3, [sp, #8]
   d85b8:	684b      	ldr	r3, [r1, #4]
   d85ba:	9303      	str	r3, [sp, #12]
   d85bc:	68cb      	ldr	r3, [r1, #12]
   d85be:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d85c0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d85c2:	7a0b      	ldrb	r3, [r1, #8]
   d85c4:	9305      	str	r3, [sp, #20]
   d85c6:	a901      	add	r1, sp, #4
   d85c8:	f7ff f800 	bl	d75cc <hal_i2c_request_ex>
}
   d85cc:	b007      	add	sp, #28
   d85ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d85d2 <_ZN7TwoWire11requestFromEhjh>:
{
   d85d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d85d4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d85d6:	f88d 1000 	strb.w	r1, [sp]
   d85da:	f04f 0164 	mov.w	r1, #100	; 0x64
   d85de:	9103      	str	r1, [sp, #12]
   d85e0:	bf18      	it	ne
   d85e2:	2301      	movne	r3, #1
   d85e4:	4669      	mov	r1, sp
    size_ = size;
   d85e6:	9201      	str	r2, [sp, #4]
   d85e8:	f88d 3008 	strb.w	r3, [sp, #8]
   d85ec:	f7ff ffda 	bl	d85a4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d85f0:	b005      	add	sp, #20
   d85f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d85f6 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d85f6:	7c00      	ldrb	r0, [r0, #16]
   d85f8:	2200      	movs	r2, #0
   d85fa:	f7fe bf8f 	b.w	d751c <hal_i2c_begin_transmission>

000d85fe <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d85fe:	b2c9      	uxtb	r1, r1
   d8600:	f7ff bff9 	b.w	d85f6 <_ZN7TwoWire17beginTransmissionEh>

000d8604 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d8604:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d8606:	2300      	movs	r3, #0
   d8608:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d860c:	684a      	ldr	r2, [r1, #4]
   d860e:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d8610:	2314      	movs	r3, #20
    };
   d8612:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d8614:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d8618:	780b      	ldrb	r3, [r1, #0]
    };
   d861a:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d861c:	7a0a      	ldrb	r2, [r1, #8]
   d861e:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d8620:	7c00      	ldrb	r0, [r0, #16]
    };
   d8622:	f88d 3008 	strb.w	r3, [sp, #8]
   d8626:	aa01      	add	r2, sp, #4
   d8628:	4619      	mov	r1, r3
   d862a:	f7fe ff77 	bl	d751c <hal_i2c_begin_transmission>
}
   d862e:	b007      	add	sp, #28
   d8630:	f85d fb04 	ldr.w	pc, [sp], #4

000d8634 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d8634:	7c00      	ldrb	r0, [r0, #16]
   d8636:	2200      	movs	r2, #0
   d8638:	f7fe bf78 	b.w	d752c <hal_i2c_end_transmission>

000d863c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d863c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d863e:	2100      	movs	r1, #0
   d8640:	7c00      	ldrb	r0, [r0, #16]
   d8642:	f7fe ffb3 	bl	d75ac <hal_i2c_lock>
}
   d8646:	fab0 f080 	clz	r0, r0
   d864a:	0940      	lsrs	r0, r0, #5
   d864c:	bd08      	pop	{r3, pc}

000d864e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d864e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d8650:	2100      	movs	r1, #0
   d8652:	7c00      	ldrb	r0, [r0, #16]
   d8654:	f7fe ffb2 	bl	d75bc <hal_i2c_unlock>
}
   d8658:	fab0 f080 	clz	r0, r0
   d865c:	0940      	lsrs	r0, r0, #5
   d865e:	bd08      	pop	{r3, pc}

000d8660 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d8660:	4700      	bx	r0
	...

000d8664 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d8664:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d8668:	2400      	movs	r4, #0
{
   d866a:	461d      	mov	r5, r3
   d866c:	460f      	mov	r7, r1
   d866e:	4690      	mov	r8, r2
   d8670:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d8672:	f7fe ff3b 	bl	d74ec <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d8676:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8678:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d867c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d8680:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d8684:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d8688:	bfa2      	ittt	ge
   d868a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d868e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d8692:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d8694:	4907      	ldr	r1, [pc, #28]	; (d86b4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d8696:	9400      	str	r4, [sp, #0]
   d8698:	4643      	mov	r3, r8
   d869a:	463a      	mov	r2, r7
   d869c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d869e:	bfa8      	it	ge
   d86a0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d86a4:	f7fe ff1a 	bl	d74dc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d86a8:	fab0 f080 	clz	r0, r0
   d86ac:	0940      	lsrs	r0, r0, #5
   d86ae:	b004      	add	sp, #16
   d86b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d86b4:	000d8661 	.word	0x000d8661

000d86b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d86b8:	4770      	bx	lr

000d86ba <_ZN9IPAddressD0Ev>:
   d86ba:	b510      	push	{r4, lr}
   d86bc:	2118      	movs	r1, #24
   d86be:	4604      	mov	r4, r0
   d86c0:	f002 fa24 	bl	dab0c <_ZdlPvj>
   d86c4:	4620      	mov	r0, r4
   d86c6:	bd10      	pop	{r4, pc}

000d86c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d86c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d86ca:	7d03      	ldrb	r3, [r0, #20]
   d86cc:	2b06      	cmp	r3, #6
{
   d86ce:	b08d      	sub	sp, #52	; 0x34
   d86d0:	460e      	mov	r6, r1
   d86d2:	f100 0704 	add.w	r7, r0, #4
   d86d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d86da:	d012      	beq.n	d8702 <_ZNK9IPAddress7printToER5Print+0x3a>
   d86dc:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d86e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d86e4:	220a      	movs	r2, #10
   d86e6:	4630      	mov	r0, r6
   d86e8:	f001 fb52 	bl	d9d90 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d86ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d86ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d86f0:	d019      	beq.n	d8726 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d86f2:	2c00      	cmp	r4, #0
   d86f4:	d0f4      	beq.n	d86e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d86f6:	212e      	movs	r1, #46	; 0x2e
   d86f8:	4630      	mov	r0, r6
   d86fa:	f001 fb3a 	bl	d9d72 <_ZN5Print5printEc>
   d86fe:	4404      	add	r4, r0
   d8700:	e7ee      	b.n	d86e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8702:	232f      	movs	r3, #47	; 0x2f
   d8704:	466a      	mov	r2, sp
   d8706:	4639      	mov	r1, r7
   d8708:	200a      	movs	r0, #10
		buf[0] = 0;
   d870a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d870e:	f7fe ff65 	bl	d75dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d8712:	4668      	mov	r0, sp
   d8714:	f002 ff4f 	bl	db5b6 <strlen>
   d8718:	6833      	ldr	r3, [r6, #0]
   d871a:	4602      	mov	r2, r0
   d871c:	68db      	ldr	r3, [r3, #12]
   d871e:	4669      	mov	r1, sp
   d8720:	4630      	mov	r0, r6
   d8722:	4798      	blx	r3
   d8724:	4604      	mov	r4, r0
    }
    return n;
}
   d8726:	4620      	mov	r0, r4
   d8728:	b00d      	add	sp, #52	; 0x34
   d872a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d872c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d872c:	b510      	push	{r4, lr}
   d872e:	4b05      	ldr	r3, [pc, #20]	; (d8744 <_ZN9IPAddressC1Ev+0x18>)
   d8730:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8732:	2211      	movs	r2, #17
   d8734:	f840 3b04 	str.w	r3, [r0], #4
   d8738:	2100      	movs	r1, #0
   d873a:	f002 fe95 	bl	db468 <memset>
}
   d873e:	4620      	mov	r0, r4
   d8740:	bd10      	pop	{r4, pc}
   d8742:	bf00      	nop
   d8744:	000dc3c8 	.word	0x000dc3c8

000d8748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d8748:	4603      	mov	r3, r0
   d874a:	4a07      	ldr	r2, [pc, #28]	; (d8768 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d874c:	b510      	push	{r4, lr}
   d874e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d8752:	f101 0210 	add.w	r2, r1, #16
   d8756:	f851 4b04 	ldr.w	r4, [r1], #4
   d875a:	f843 4b04 	str.w	r4, [r3], #4
   d875e:	4291      	cmp	r1, r2
   d8760:	d1f9      	bne.n	d8756 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8762:	780a      	ldrb	r2, [r1, #0]
   d8764:	701a      	strb	r2, [r3, #0]
}
   d8766:	bd10      	pop	{r4, pc}
   d8768:	000dc3c8 	.word	0x000dc3c8

000d876c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d876c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d876e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8772:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8776:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d877a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d877e:	2304      	movs	r3, #4
   d8780:	6041      	str	r1, [r0, #4]
   d8782:	7503      	strb	r3, [r0, #20]
}
   d8784:	bd10      	pop	{r4, pc}

000d8786 <_ZN9IPAddressaSEPKh>:
{
   d8786:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8788:	78cb      	ldrb	r3, [r1, #3]
   d878a:	9300      	str	r3, [sp, #0]
   d878c:	788b      	ldrb	r3, [r1, #2]
   d878e:	784a      	ldrb	r2, [r1, #1]
   d8790:	7809      	ldrb	r1, [r1, #0]
   d8792:	f7ff ffeb 	bl	d876c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d8796:	b002      	add	sp, #8
   d8798:	bd10      	pop	{r4, pc}

000d879a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d879a:	f100 0310 	add.w	r3, r0, #16
   d879e:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d87a0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d87a4:	2901      	cmp	r1, #1
   d87a6:	4618      	mov	r0, r3
   d87a8:	d108      	bne.n	d87bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d87aa:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d87ae:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d87b2:	3a01      	subs	r2, #1
   d87b4:	f103 0310 	add.w	r3, r3, #16
   d87b8:	d1f2      	bne.n	d87a0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d87ba:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d87bc:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d87be:	bf04      	itt	eq
   d87c0:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d87c4:	1852      	addeq	r2, r2, r1
   d87c6:	e7f4      	b.n	d87b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d87c8 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d87c8:	b40e      	push	{r1, r2, r3}
   d87ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   d87cc:	b088      	sub	sp, #32
   d87ce:	af00      	add	r7, sp, #0
   d87d0:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d87d4:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d87d6:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d87da:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d87dc:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d87de:	462b      	mov	r3, r5
   d87e0:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d87e2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d87e4:	f7ff f944 	bl	d7a70 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d87e8:	280f      	cmp	r0, #15
   d87ea:	687a      	ldr	r2, [r7, #4]
   d87ec:	d91a      	bls.n	d8824 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d87ee:	f100 0308 	add.w	r3, r0, #8
   d87f2:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d87f6:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d87f8:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d87fc:	1c41      	adds	r1, r0, #1
   d87fe:	462b      	mov	r3, r5
   d8800:	4668      	mov	r0, sp
        va_start(args, fmt);
   d8802:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8804:	f7ff f934 	bl	d7a70 <vsnprintf>
        if (n > 0) {
   d8808:	1e02      	subs	r2, r0, #0
   d880a:	dd04      	ble.n	d8816 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d880c:	6823      	ldr	r3, [r4, #0]
   d880e:	4669      	mov	r1, sp
   d8810:	689b      	ldr	r3, [r3, #8]
   d8812:	4620      	mov	r0, r4
   d8814:	4798      	blx	r3
   d8816:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d8818:	3720      	adds	r7, #32
   d881a:	46bd      	mov	sp, r7
   d881c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8820:	b003      	add	sp, #12
   d8822:	4770      	bx	lr
    } else if (n > 0) {
   d8824:	2800      	cmp	r0, #0
   d8826:	d0f7      	beq.n	d8818 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d8828:	6823      	ldr	r3, [r4, #0]
   d882a:	4602      	mov	r2, r0
   d882c:	689b      	ldr	r3, [r3, #8]
   d882e:	f107 0110 	add.w	r1, r7, #16
   d8832:	4620      	mov	r0, r4
   d8834:	4798      	blx	r3
}
   d8836:	e7ef      	b.n	d8818 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d8838 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8838:	b510      	push	{r4, lr}
          _M_dispose();
   d883a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d883c:	4604      	mov	r4, r0
          _M_dispose();
   d883e:	689b      	ldr	r3, [r3, #8]
   d8840:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8842:	68a3      	ldr	r3, [r4, #8]
   d8844:	3b01      	subs	r3, #1
   d8846:	60a3      	str	r3, [r4, #8]
   d8848:	b92b      	cbnz	r3, d8856 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d884a:	6823      	ldr	r3, [r4, #0]
   d884c:	4620      	mov	r0, r4
   d884e:	68db      	ldr	r3, [r3, #12]
    }
   d8850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d8854:	4718      	bx	r3
    }
   d8856:	bd10      	pop	{r4, pc}

000d8858 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8858:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d885a:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d885c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8860:	689b      	ldr	r3, [r3, #8]
   d8862:	2201      	movs	r2, #1
   d8864:	f10d 0107 	add.w	r1, sp, #7
   d8868:	4798      	blx	r3
}
   d886a:	b003      	add	sp, #12
   d886c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8870 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d8870:	b538      	push	{r3, r4, r5, lr}
   d8872:	680b      	ldr	r3, [r1, #0]
   d8874:	6003      	str	r3, [r0, #0]
   d8876:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d8878:	6843      	ldr	r3, [r0, #4]
   d887a:	429d      	cmp	r5, r3
    class __shared_ptr
   d887c:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d887e:	d00c      	beq.n	d889a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d8880:	b115      	cbz	r5, d8888 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d8882:	686b      	ldr	r3, [r5, #4]
   d8884:	3301      	adds	r3, #1
   d8886:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d8888:	6860      	ldr	r0, [r4, #4]
   d888a:	b128      	cbz	r0, d8898 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d888c:	6843      	ldr	r3, [r0, #4]
   d888e:	3b01      	subs	r3, #1
   d8890:	6043      	str	r3, [r0, #4]
   d8892:	b90b      	cbnz	r3, d8898 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d8894:	f7ff ffd0 	bl	d8838 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d8898:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d889a:	4620      	mov	r0, r4
   d889c:	bd38      	pop	{r3, r4, r5, pc}

000d889e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d889e:	460b      	mov	r3, r1
   d88a0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d88a2:	2200      	movs	r2, #0
   d88a4:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d88a6:	e9c0 2200 	strd	r2, r2, [r0]
   d88aa:	4604      	mov	r4, r0
        t_ = t;
   d88ac:	6083      	str	r3, [r0, #8]
    if (t) {
   d88ae:	b90b      	cbnz	r3, d88b4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d88b0:	4620      	mov	r0, r4
   d88b2:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   d88b4:	f7ff ffdc 	bl	d8870 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d88b8:	e7fa      	b.n	d88b0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d88ba <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d88ba:	6883      	ldr	r3, [r0, #8]
   d88bc:	b1eb      	cbz	r3, d88fa <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d88be:	781a      	ldrb	r2, [r3, #0]
   d88c0:	2a03      	cmp	r2, #3
   d88c2:	d81a      	bhi.n	d88fa <_ZNK5spark9JSONValue4typeEv+0x40>
   d88c4:	e8df f002 	tbb	[pc, r2]
   d88c8:	1b021704 	.word	0x1b021704
   d88cc:	2005      	movs	r0, #5
   d88ce:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d88d0:	6802      	ldr	r2, [r0, #0]
   d88d2:	685b      	ldr	r3, [r3, #4]
   d88d4:	6852      	ldr	r2, [r2, #4]
   d88d6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d88d8:	282d      	cmp	r0, #45	; 0x2d
   d88da:	d012      	beq.n	d8902 <_ZNK5spark9JSONValue4typeEv+0x48>
   d88dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d88e0:	2b09      	cmp	r3, #9
   d88e2:	d90e      	bls.n	d8902 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d88e4:	2874      	cmp	r0, #116	; 0x74
   d88e6:	d00e      	beq.n	d8906 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d88e8:	2866      	cmp	r0, #102	; 0x66
   d88ea:	d00c      	beq.n	d8906 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d88ec:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d88f0:	4258      	negs	r0, r3
   d88f2:	4158      	adcs	r0, r3
   d88f4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d88f6:	2006      	movs	r0, #6
   d88f8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d88fa:	2000      	movs	r0, #0
   d88fc:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d88fe:	2004      	movs	r0, #4
   d8900:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d8902:	2003      	movs	r0, #3
   d8904:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d8906:	2002      	movs	r0, #2
}
   d8908:	4770      	bx	lr

000d890a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d890a:	b510      	push	{r4, lr}
   d890c:	4604      	mov	r4, r0
    switch (type()) {
   d890e:	f7ff ffd4 	bl	d88ba <_ZNK5spark9JSONValue4typeEv>
   d8912:	2802      	cmp	r0, #2
   d8914:	d00e      	beq.n	d8934 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d8916:	1ec3      	subs	r3, r0, #3
   d8918:	b2db      	uxtb	r3, r3
   d891a:	2b01      	cmp	r3, #1
   d891c:	d814      	bhi.n	d8948 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d891e:	6822      	ldr	r2, [r4, #0]
   d8920:	68a3      	ldr	r3, [r4, #8]
   d8922:	6850      	ldr	r0, [r2, #4]
   d8924:	685b      	ldr	r3, [r3, #4]
}
   d8926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d892a:	220a      	movs	r2, #10
   d892c:	2100      	movs	r1, #0
   d892e:	4418      	add	r0, r3
   d8930:	f002 befc 	b.w	db72c <strtol>
        const char* const s = d_->json + t_->start;
   d8934:	6822      	ldr	r2, [r4, #0]
   d8936:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8938:	6852      	ldr	r2, [r2, #4]
   d893a:	685b      	ldr	r3, [r3, #4]
   d893c:	5cd0      	ldrb	r0, [r2, r3]
   d893e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d8942:	4258      	negs	r0, r3
   d8944:	4158      	adcs	r0, r3
}
   d8946:	bd10      	pop	{r4, pc}
    switch (type()) {
   d8948:	2000      	movs	r0, #0
   d894a:	e7fc      	b.n	d8946 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d894c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d894c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d894e:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d8950:	e9c0 3300 	strd	r3, r3, [r0]
   d8954:	4604      	mov	r4, r0
        n_(0) {
   d8956:	480e      	ldr	r0, [pc, #56]	; (d8990 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d8958:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d895c:	b1a9      	cbz	r1, d898a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d895e:	780b      	ldrb	r3, [r1, #0]
   d8960:	2b03      	cmp	r3, #3
   d8962:	d006      	beq.n	d8972 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8964:	b98b      	cbnz	r3, d898a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d8966:	6813      	ldr	r3, [r2, #0]
   d8968:	6858      	ldr	r0, [r3, #4]
   d896a:	684b      	ldr	r3, [r1, #4]
   d896c:	5cc3      	ldrb	r3, [r0, r3]
   d896e:	2b6e      	cmp	r3, #110	; 0x6e
   d8970:	d007      	beq.n	d8982 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d8972:	6813      	ldr	r3, [r2, #0]
   d8974:	684d      	ldr	r5, [r1, #4]
   d8976:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d8978:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d897a:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d897c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d897e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d8980:	60e3      	str	r3, [r4, #12]
   d8982:	4611      	mov	r1, r2
   d8984:	4620      	mov	r0, r4
   d8986:	f7ff ff73 	bl	d8870 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d898a:	4620      	mov	r0, r4
   d898c:	bd38      	pop	{r3, r4, r5, pc}
   d898e:	bf00      	nop
   d8990:	000dc431 	.word	0x000dc431

000d8994 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8994:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d8996:	2500      	movs	r5, #0
   d8998:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d899a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d899e:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d89a2:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d89a6:	4604      	mov	r4, r0
   d89a8:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d89aa:	b14b      	cbz	r3, d89c0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d89ac:	781a      	ldrb	r2, [r3, #0]
   d89ae:	2a01      	cmp	r2, #1
   d89b0:	d106      	bne.n	d89c0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d89b2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d89b6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d89b8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d89ba:	6143      	str	r3, [r0, #20]
   d89bc:	f7ff ff58 	bl	d8870 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d89c0:	4620      	mov	r0, r4
   d89c2:	bd38      	pop	{r3, r4, r5, pc}

000d89c4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d89c4:	b510      	push	{r4, lr}
    if (!n_) {
   d89c6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d89c8:	4604      	mov	r4, r0
    if (!n_) {
   d89ca:	b163      	cbz	r3, d89e6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d89cc:	6880      	ldr	r0, [r0, #8]
   d89ce:	60e0      	str	r0, [r4, #12]
    --n_;
   d89d0:	3b01      	subs	r3, #1
    ++t_;
   d89d2:	3010      	adds	r0, #16
   d89d4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d89d6:	6120      	str	r0, [r4, #16]
    --n_;
   d89d8:	6163      	str	r3, [r4, #20]
    if (n_) {
   d89da:	b113      	cbz	r3, d89e2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d89dc:	f7ff fedd 	bl	d879a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d89e0:	60a0      	str	r0, [r4, #8]
    return true;
   d89e2:	2001      	movs	r0, #1
   d89e4:	e000      	b.n	d89e8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d89e6:	4618      	mov	r0, r3
}
   d89e8:	bd10      	pop	{r4, pc}

000d89ea <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d89ea:	b510      	push	{r4, lr}
    write('}');
   d89ec:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d89ee:	4604      	mov	r4, r0
    write('}');
   d89f0:	f7ff ff32 	bl	d8858 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d89f4:	2301      	movs	r3, #1
   d89f6:	7123      	strb	r3, [r4, #4]
}
   d89f8:	4620      	mov	r0, r4
   d89fa:	bd10      	pop	{r4, pc}

000d89fc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d89fc:	b508      	push	{r3, lr}
    switch (state_) {
   d89fe:	7903      	ldrb	r3, [r0, #4]
   d8a00:	2b01      	cmp	r3, #1
   d8a02:	d002      	beq.n	d8a0a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d8a04:	2b02      	cmp	r3, #2
   d8a06:	d004      	beq.n	d8a12 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d8a08:	bd08      	pop	{r3, pc}
        write(',');
   d8a0a:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d8a0c:	f7ff ff24 	bl	d8858 <_ZN5spark10JSONWriter5writeEc>
}
   d8a10:	e7fa      	b.n	d8a08 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d8a12:	213a      	movs	r1, #58	; 0x3a
   d8a14:	e7fa      	b.n	d8a0c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d8a16 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d8a16:	b510      	push	{r4, lr}
   d8a18:	4604      	mov	r4, r0
    writeSeparator();
   d8a1a:	f7ff ffef 	bl	d89fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8a1e:	4620      	mov	r0, r4
   d8a20:	217b      	movs	r1, #123	; 0x7b
   d8a22:	f7ff ff19 	bl	d8858 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d8a26:	2300      	movs	r3, #0
   d8a28:	7123      	strb	r3, [r4, #4]
}
   d8a2a:	4620      	mov	r0, r4
   d8a2c:	bd10      	pop	{r4, pc}
	...

000d8a30 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8a30:	b513      	push	{r0, r1, r4, lr}
   d8a32:	4604      	mov	r4, r0
   d8a34:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d8a36:	f7ff ffe1 	bl	d89fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d8a3a:	6823      	ldr	r3, [r4, #0]
   d8a3c:	9a01      	ldr	r2, [sp, #4]
   d8a3e:	68db      	ldr	r3, [r3, #12]
   d8a40:	4903      	ldr	r1, [pc, #12]	; (d8a50 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8a42:	4620      	mov	r0, r4
   d8a44:	4798      	blx	r3
    state_ = NEXT;
   d8a46:	2301      	movs	r3, #1
}
   d8a48:	4620      	mov	r0, r4
    state_ = NEXT;
   d8a4a:	7123      	strb	r3, [r4, #4]
}
   d8a4c:	b002      	add	sp, #8
   d8a4e:	bd10      	pop	{r4, pc}
   d8a50:	000dbe77 	.word	0x000dbe77

000d8a54 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8a54:	b513      	push	{r0, r1, r4, lr}
   d8a56:	4604      	mov	r4, r0
   d8a58:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d8a5a:	f7ff ffcf 	bl	d89fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8a5e:	6823      	ldr	r3, [r4, #0]
   d8a60:	9a01      	ldr	r2, [sp, #4]
   d8a62:	68db      	ldr	r3, [r3, #12]
   d8a64:	4903      	ldr	r1, [pc, #12]	; (d8a74 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8a66:	4620      	mov	r0, r4
   d8a68:	4798      	blx	r3
    state_ = NEXT;
   d8a6a:	2301      	movs	r3, #1
}
   d8a6c:	4620      	mov	r0, r4
    state_ = NEXT;
   d8a6e:	7123      	strb	r3, [r4, #4]
}
   d8a70:	b002      	add	sp, #8
   d8a72:	bd10      	pop	{r4, pc}
   d8a74:	000dc01b 	.word	0x000dc01b

000d8a78 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8a7c:	460d      	mov	r5, r1
   d8a7e:	4617      	mov	r7, r2
    write('"');
   d8a80:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8a82:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d8b24 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8a86:	4604      	mov	r4, r0
    const char* const end = str + size;
   d8a88:	442f      	add	r7, r5
    write('"');
   d8a8a:	f7ff fee5 	bl	d8858 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d8a8e:	4629      	mov	r1, r5
    while (s != end) {
   d8a90:	42bd      	cmp	r5, r7
   d8a92:	462a      	mov	r2, r5
   d8a94:	d038      	beq.n	d8b08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d8a96:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8a9a:	2e22      	cmp	r6, #34	; 0x22
   d8a9c:	d003      	beq.n	d8aa6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8a9e:	2e5c      	cmp	r6, #92	; 0x5c
   d8aa0:	d001      	beq.n	d8aa6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d8aa2:	2e1f      	cmp	r6, #31
   d8aa4:	d8f4      	bhi.n	d8a90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d8aa6:	6823      	ldr	r3, [r4, #0]
   d8aa8:	1a52      	subs	r2, r2, r1
   d8aaa:	689b      	ldr	r3, [r3, #8]
   d8aac:	4620      	mov	r0, r4
   d8aae:	4798      	blx	r3
            write('\\');
   d8ab0:	215c      	movs	r1, #92	; 0x5c
   d8ab2:	4620      	mov	r0, r4
   d8ab4:	f7ff fed0 	bl	d8858 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8ab8:	2e0d      	cmp	r6, #13
   d8aba:	d80a      	bhi.n	d8ad2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d8abc:	2e07      	cmp	r6, #7
   d8abe:	d91c      	bls.n	d8afa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8ac0:	f1a6 0308 	sub.w	r3, r6, #8
   d8ac4:	2b05      	cmp	r3, #5
   d8ac6:	d818      	bhi.n	d8afa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d8ac8:	e8df f003 	tbb	[pc, r3]
   d8acc:	17110f0d 	.word	0x17110f0d
   d8ad0:	1513      	.short	0x1513
   d8ad2:	2e22      	cmp	r6, #34	; 0x22
   d8ad4:	d001      	beq.n	d8ada <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8ad6:	2e5c      	cmp	r6, #92	; 0x5c
   d8ad8:	d10f      	bne.n	d8afa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d8ada:	4631      	mov	r1, r6
                write('b');
   d8adc:	4620      	mov	r0, r4
   d8ade:	f7ff febb 	bl	d8858 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d8ae2:	4629      	mov	r1, r5
    while (s != end) {
   d8ae4:	e7d4      	b.n	d8a90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d8ae6:	2162      	movs	r1, #98	; 0x62
   d8ae8:	e7f8      	b.n	d8adc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d8aea:	2174      	movs	r1, #116	; 0x74
   d8aec:	e7f6      	b.n	d8adc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d8aee:	216e      	movs	r1, #110	; 0x6e
   d8af0:	e7f4      	b.n	d8adc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d8af2:	2166      	movs	r1, #102	; 0x66
   d8af4:	e7f2      	b.n	d8adc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d8af6:	2172      	movs	r1, #114	; 0x72
   d8af8:	e7f0      	b.n	d8adc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d8afa:	6823      	ldr	r3, [r4, #0]
   d8afc:	4632      	mov	r2, r6
   d8afe:	68db      	ldr	r3, [r3, #12]
   d8b00:	4641      	mov	r1, r8
   d8b02:	4620      	mov	r0, r4
   d8b04:	4798      	blx	r3
                break;
   d8b06:	e7ec      	b.n	d8ae2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d8b08:	428d      	cmp	r5, r1
   d8b0a:	d004      	beq.n	d8b16 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d8b0c:	6823      	ldr	r3, [r4, #0]
   d8b0e:	1a6a      	subs	r2, r5, r1
   d8b10:	689b      	ldr	r3, [r3, #8]
   d8b12:	4620      	mov	r0, r4
   d8b14:	4798      	blx	r3
    }
    write('"');
   d8b16:	2122      	movs	r1, #34	; 0x22
   d8b18:	4620      	mov	r0, r4
   d8b1a:	f7ff fe9d 	bl	d8858 <_ZN5spark10JSONWriter5writeEc>
}
   d8b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8b22:	bf00      	nop
   d8b24:	000dc3d4 	.word	0x000dc3d4

000d8b28 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8b28:	b513      	push	{r0, r1, r4, lr}
   d8b2a:	4604      	mov	r4, r0
   d8b2c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8b30:	f7ff ff64 	bl	d89fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8b34:	4620      	mov	r0, r4
   d8b36:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8b3a:	f7ff ff9d 	bl	d8a78 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d8b3e:	2302      	movs	r3, #2
}
   d8b40:	4620      	mov	r0, r4
    state_ = VALUE;
   d8b42:	7123      	strb	r3, [r4, #4]
}
   d8b44:	b002      	add	sp, #8
   d8b46:	bd10      	pop	{r4, pc}

000d8b48 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8b48:	b513      	push	{r0, r1, r4, lr}
   d8b4a:	4604      	mov	r4, r0
   d8b4c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d8b50:	f7ff ff54 	bl	d89fc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8b54:	4620      	mov	r0, r4
   d8b56:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8b5a:	f7ff ff8d 	bl	d8a78 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8b5e:	2301      	movs	r3, #1
}
   d8b60:	4620      	mov	r0, r4
    state_ = NEXT;
   d8b62:	7123      	strb	r3, [r4, #4]
}
   d8b64:	b002      	add	sp, #8
   d8b66:	bd10      	pop	{r4, pc}

000d8b68 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8b68:	6880      	ldr	r0, [r0, #8]
   d8b6a:	6803      	ldr	r3, [r0, #0]
   d8b6c:	68db      	ldr	r3, [r3, #12]
   d8b6e:	4718      	bx	r3

000d8b70 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d8b70:	4770      	bx	lr

000d8b72 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8b72:	4608      	mov	r0, r1
   d8b74:	b111      	cbz	r1, d8b7c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8b76:	680b      	ldr	r3, [r1, #0]
   d8b78:	685b      	ldr	r3, [r3, #4]
   d8b7a:	4718      	bx	r3
}
   d8b7c:	4770      	bx	lr

000d8b7e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d8b7e:	4770      	bx	lr

000d8b80 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8b80:	4770      	bx	lr

000d8b82 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d8b82:	4770      	bx	lr

000d8b84 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d8b84:	4770      	bx	lr

000d8b86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8b86:	b538      	push	{r3, r4, r5, lr}
   d8b88:	4604      	mov	r4, r0
   d8b8a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8b8c:	6800      	ldr	r0, [r0, #0]
   d8b8e:	212e      	movs	r1, #46	; 0x2e
   d8b90:	f002 fcd7 	bl	db542 <strchrnul>
    size = s - category;
   d8b94:	6823      	ldr	r3, [r4, #0]
   d8b96:	1ac3      	subs	r3, r0, r3
   d8b98:	602b      	str	r3, [r5, #0]
    if (size) {
   d8b9a:	b123      	cbz	r3, d8ba6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8b9c:	7803      	ldrb	r3, [r0, #0]
   d8b9e:	b103      	cbz	r3, d8ba2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8ba0:	3001      	adds	r0, #1
   d8ba2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8ba4:	6020      	str	r0, [r4, #0]
}
   d8ba6:	4618      	mov	r0, r3
   d8ba8:	bd38      	pop	{r3, r4, r5, pc}

000d8baa <_ZN5spark16JSONStreamWriterD0Ev>:
   d8baa:	b510      	push	{r4, lr}
   d8bac:	210c      	movs	r1, #12
   d8bae:	4604      	mov	r4, r0
   d8bb0:	f001 ffac 	bl	dab0c <_ZdlPvj>
   d8bb4:	4620      	mov	r0, r4
   d8bb6:	bd10      	pop	{r4, pc}

000d8bb8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d8bb8:	b510      	push	{r4, lr}
   d8bba:	2104      	movs	r1, #4
   d8bbc:	4604      	mov	r4, r0
   d8bbe:	f001 ffa5 	bl	dab0c <_ZdlPvj>
   d8bc2:	4620      	mov	r0, r4
   d8bc4:	bd10      	pop	{r4, pc}

000d8bc6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8bc6:	b510      	push	{r4, lr}
   d8bc8:	2104      	movs	r1, #4
   d8bca:	4604      	mov	r4, r0
   d8bcc:	f001 ff9e 	bl	dab0c <_ZdlPvj>
   d8bd0:	4620      	mov	r0, r4
   d8bd2:	bd10      	pop	{r4, pc}

000d8bd4 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d8bd4:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d8bd6:	f002 fcbe 	bl	db556 <strcmp>
}
   d8bda:	fab0 f080 	clz	r0, r0
   d8bde:	0940      	lsrs	r0, r0, #5
   d8be0:	bd08      	pop	{r3, pc}

000d8be2 <__tcf_1>:
   d8be2:	4770      	bx	lr

000d8be4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d8be4:	b510      	push	{r4, lr}
   d8be6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d8be8:	f001 fdaa 	bl	da740 <_Z16_fetch_usbserialv>
   d8bec:	4284      	cmp	r4, r0
   d8bee:	d010      	beq.n	d8c12 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d8bf0:	f001 fd1e 	bl	da630 <_Z22__fetch_global_Serial1v>
   d8bf4:	4284      	cmp	r4, r0
   d8bf6:	d105      	bne.n	d8c04 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d8bf8:	f001 fd1a 	bl	da630 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d8bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d8c00:	f001 bd13 	b.w	da62a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d8c04:	b12c      	cbz	r4, d8c12 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d8c06:	6823      	ldr	r3, [r4, #0]
   d8c08:	4620      	mov	r0, r4
   d8c0a:	685b      	ldr	r3, [r3, #4]
}
   d8c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8c10:	4718      	bx	r3
   d8c12:	bd10      	pop	{r4, pc}

000d8c14 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8c14:	b513      	push	{r0, r1, r4, lr}
   d8c16:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d8c18:	4608      	mov	r0, r1
   d8c1a:	9101      	str	r1, [sp, #4]
   d8c1c:	f002 fccb 	bl	db5b6 <strlen>
   d8c20:	9901      	ldr	r1, [sp, #4]
   d8c22:	4602      	mov	r2, r0
   d8c24:	4620      	mov	r0, r4
}
   d8c26:	b002      	add	sp, #8
   d8c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d8c2c:	f7ff bf8c 	b.w	d8b48 <_ZN5spark10JSONWriter5valueEPKcj>

000d8c30 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d8c30:	b513      	push	{r0, r1, r4, lr}
   d8c32:	4604      	mov	r4, r0
    write(str, strlen(str));
   d8c34:	4608      	mov	r0, r1
   d8c36:	9101      	str	r1, [sp, #4]
   d8c38:	f002 fcbd 	bl	db5b6 <strlen>
   d8c3c:	6823      	ldr	r3, [r4, #0]
   d8c3e:	9901      	ldr	r1, [sp, #4]
   d8c40:	68db      	ldr	r3, [r3, #12]
   d8c42:	4602      	mov	r2, r0
   d8c44:	4620      	mov	r0, r4
}
   d8c46:	b002      	add	sp, #8
   d8c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d8c4c:	4718      	bx	r3

000d8c4e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d8c4e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d8c50:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d8c52:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d8c56:	68db      	ldr	r3, [r3, #12]
   d8c58:	2201      	movs	r2, #1
   d8c5a:	f10d 0107 	add.w	r1, sp, #7
   d8c5e:	4798      	blx	r3
}
   d8c60:	b003      	add	sp, #12
   d8c62:	f85d fb04 	ldr.w	pc, [sp], #4

000d8c66 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8c66:	b40e      	push	{r1, r2, r3}
   d8c68:	b503      	push	{r0, r1, lr}
   d8c6a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d8c6c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d8c6e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d8c72:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d8c74:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d8c76:	f001 f8a9 	bl	d9dcc <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d8c7a:	b002      	add	sp, #8
   d8c7c:	f85d eb04 	ldr.w	lr, [sp], #4
   d8c80:	b003      	add	sp, #12
   d8c82:	4770      	bx	lr

000d8c84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d8c88:	e9d0 9500 	ldrd	r9, r5, [r0]
   d8c8c:	f04f 0814 	mov.w	r8, #20
   d8c90:	fb08 f505 	mul.w	r5, r8, r5
   d8c94:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8c96:	10ab      	asrs	r3, r5, #2
   d8c98:	4d18      	ldr	r5, [pc, #96]	; (d8cfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8c9a:	4617      	mov	r7, r2
   d8c9c:	435d      	muls	r5, r3
   d8c9e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8ca0:	2d00      	cmp	r5, #0
   d8ca2:	dd23      	ble.n	d8cec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d8ca4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d8ca6:	fb08 f006 	mul.w	r0, r8, r6
   d8caa:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d8cae:	463a      	mov	r2, r7
   d8cb0:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d8cb4:	5820      	ldr	r0, [r4, r0]
   d8cb6:	9101      	str	r1, [sp, #4]
   d8cb8:	455f      	cmp	r7, fp
   d8cba:	bf28      	it	cs
   d8cbc:	465a      	movcs	r2, fp
   d8cbe:	f002 fc82 	bl	db5c6 <strncmp>
                if (cmp == 0) {
   d8cc2:	9901      	ldr	r1, [sp, #4]
   d8cc4:	2301      	movs	r3, #1
   d8cc6:	b978      	cbnz	r0, d8ce8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d8cc8:	455f      	cmp	r7, fp
   d8cca:	d103      	bne.n	d8cd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8ccc:	9a00      	ldr	r2, [sp, #0]
   d8cce:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8cd0:	4635      	mov	r5, r6
   d8cd2:	e7e5      	b.n	d8ca0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d8cd4:	bf8c      	ite	hi
   d8cd6:	2001      	movhi	r0, #1
   d8cd8:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d8cda:	2800      	cmp	r0, #0
   d8cdc:	d0f8      	beq.n	d8cd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d8cde:	1bae      	subs	r6, r5, r6
	      ++__first;
   d8ce0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d8ce4:	3e01      	subs	r6, #1
   d8ce6:	e7f3      	b.n	d8cd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d8ce8:	0fc0      	lsrs	r0, r0, #31
   d8cea:	e7f6      	b.n	d8cda <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d8cec:	eba4 0409 	sub.w	r4, r4, r9
}
   d8cf0:	4802      	ldr	r0, [pc, #8]	; (d8cfc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d8cf2:	10a4      	asrs	r4, r4, #2
   d8cf4:	4360      	muls	r0, r4
   d8cf6:	b003      	add	sp, #12
   d8cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8cfc:	cccccccd 	.word	0xcccccccd

000d8d00 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8d00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d8d02:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d8d04:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d8d06:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d8d08:	b30b      	cbz	r3, d8d4e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d8d0a:	b301      	cbz	r1, d8d4e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d8d0c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d8d0e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d8d12:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d8d14:	a903      	add	r1, sp, #12
   d8d16:	a801      	add	r0, sp, #4
   d8d18:	f7ff ff35 	bl	d8b86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8d1c:	4601      	mov	r1, r0
   d8d1e:	b1b0      	cbz	r0, d8d4e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d8d20:	f10d 030b 	add.w	r3, sp, #11
   d8d24:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d8d26:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d8d2a:	4620      	mov	r0, r4
   d8d2c:	f7ff ffaa 	bl	d8c84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8d30:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8d34:	b15b      	cbz	r3, d8d4e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d8d36:	6824      	ldr	r4, [r4, #0]
   d8d38:	2314      	movs	r3, #20
   d8d3a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d8d3e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d8d42:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d8d46:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8d48:	bfa8      	it	ge
   d8d4a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d8d4c:	e7e2      	b.n	d8d14 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d8d4e:	4630      	mov	r0, r6
   d8d50:	b004      	add	sp, #16
   d8d52:	bd70      	pop	{r4, r5, r6, pc}

000d8d54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8d54:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8d56:	4c09      	ldr	r4, [pc, #36]	; (d8d7c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8d58:	7823      	ldrb	r3, [r4, #0]
   d8d5a:	f3bf 8f5b 	dmb	ish
   d8d5e:	07db      	lsls	r3, r3, #31
   d8d60:	d409      	bmi.n	d8d76 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8d62:	4620      	mov	r0, r4
   d8d64:	f7fb f9a8 	bl	d40b8 <__cxa_guard_acquire>
   d8d68:	b128      	cbz	r0, d8d76 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8d6a:	4620      	mov	r0, r4
   d8d6c:	f7fb f9a9 	bl	d40c2 <__cxa_guard_release>
   d8d70:	4803      	ldr	r0, [pc, #12]	; (d8d80 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d8d72:	f002 fb39 	bl	db3e8 <atexit>
}
   d8d76:	4803      	ldr	r0, [pc, #12]	; (d8d84 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d8d78:	bd10      	pop	{r4, pc}
   d8d7a:	bf00      	nop
   d8d7c:	2003e56c 	.word	0x2003e56c
   d8d80:	000d8b7f 	.word	0x000d8b7f
   d8d84:	2003de1c 	.word	0x2003de1c

000d8d88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d8d88:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d8d8a:	4c09      	ldr	r4, [pc, #36]	; (d8db0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d8d8c:	7823      	ldrb	r3, [r4, #0]
   d8d8e:	f3bf 8f5b 	dmb	ish
   d8d92:	07db      	lsls	r3, r3, #31
   d8d94:	d409      	bmi.n	d8daa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8d96:	4620      	mov	r0, r4
   d8d98:	f7fb f98e 	bl	d40b8 <__cxa_guard_acquire>
   d8d9c:	b128      	cbz	r0, d8daa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8d9e:	4620      	mov	r0, r4
   d8da0:	f7fb f98f 	bl	d40c2 <__cxa_guard_release>
   d8da4:	4803      	ldr	r0, [pc, #12]	; (d8db4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8da6:	f002 fb1f 	bl	db3e8 <atexit>
    return &factory;
}
   d8daa:	4803      	ldr	r0, [pc, #12]	; (d8db8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8dac:	bd10      	pop	{r4, pc}
   d8dae:	bf00      	nop
   d8db0:	2003e570 	.word	0x2003e570
   d8db4:	000d8be3 	.word	0x000d8be3
   d8db8:	2003de20 	.word	0x2003de20

000d8dbc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8dbc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d8dbe:	2500      	movs	r5, #0
   d8dc0:	4604      	mov	r4, r0
   d8dc2:	e9c0 5500 	strd	r5, r5, [r0]
   d8dc6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d8dca:	6085      	str	r5, [r0, #8]
   d8dcc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d8dce:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d8dd2:	f7fe fb03 	bl	d73dc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d8dd6:	f7ff ffbd 	bl	d8d54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d8dda:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8ddc:	f7ff ffd4 	bl	d8d88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d8de0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d8de2:	6220      	str	r0, [r4, #32]
}
   d8de4:	4620      	mov	r0, r4
   d8de6:	bd38      	pop	{r3, r4, r5, pc}

000d8de8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d8de8:	b510      	push	{r4, lr}
    static LogManager mgr;
   d8dea:	4c0a      	ldr	r4, [pc, #40]	; (d8e14 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d8dec:	7823      	ldrb	r3, [r4, #0]
   d8dee:	f3bf 8f5b 	dmb	ish
   d8df2:	07db      	lsls	r3, r3, #31
   d8df4:	d40c      	bmi.n	d8e10 <_ZN5spark10LogManager8instanceEv+0x28>
   d8df6:	4620      	mov	r0, r4
   d8df8:	f7fb f95e 	bl	d40b8 <__cxa_guard_acquire>
   d8dfc:	b140      	cbz	r0, d8e10 <_ZN5spark10LogManager8instanceEv+0x28>
   d8dfe:	4806      	ldr	r0, [pc, #24]	; (d8e18 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8e00:	f7ff ffdc 	bl	d8dbc <_ZN5spark10LogManagerC1Ev>
   d8e04:	4620      	mov	r0, r4
   d8e06:	f7fb f95c 	bl	d40c2 <__cxa_guard_release>
   d8e0a:	4804      	ldr	r0, [pc, #16]	; (d8e1c <_ZN5spark10LogManager8instanceEv+0x34>)
   d8e0c:	f002 faec 	bl	db3e8 <atexit>
    return &mgr;
}
   d8e10:	4801      	ldr	r0, [pc, #4]	; (d8e18 <_ZN5spark10LogManager8instanceEv+0x30>)
   d8e12:	bd10      	pop	{r4, pc}
   d8e14:	2003e568 	.word	0x2003e568
   d8e18:	2003e578 	.word	0x2003e578
   d8e1c:	000d9251 	.word	0x000d9251

000d8e20 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d8e20:	4a02      	ldr	r2, [pc, #8]	; (d8e2c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d8e22:	4903      	ldr	r1, [pc, #12]	; (d8e30 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d8e24:	4803      	ldr	r0, [pc, #12]	; (d8e34 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8e26:	2300      	movs	r3, #0
   d8e28:	f7fe bce8 	b.w	d77fc <log_set_callbacks>
   d8e2c:	000d90d9 	.word	0x000d90d9
   d8e30:	000d9065 	.word	0x000d9065
   d8e34:	000d8fe5 	.word	0x000d8fe5

000d8e38 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8e38:	2300      	movs	r3, #0
   d8e3a:	461a      	mov	r2, r3
   d8e3c:	4619      	mov	r1, r3
   d8e3e:	4618      	mov	r0, r3
   d8e40:	f7fe bcdc 	b.w	d77fc <log_set_callbacks>

000d8e44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d8e44:	b570      	push	{r4, r5, r6, lr}
   d8e46:	b08a      	sub	sp, #40	; 0x28
   d8e48:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d8e4a:	4601      	mov	r1, r0
   d8e4c:	a804      	add	r0, sp, #16
   d8e4e:	f7fc fee8 	bl	d5c22 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d8e52:	4e14      	ldr	r6, [pc, #80]	; (d8ea4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d8e54:	a804      	add	r0, sp, #16
   d8e56:	f7ff fdb5 	bl	d89c4 <_ZN5spark18JSONObjectIterator4nextEv>
   d8e5a:	b1e8      	cbz	r0, d8e98 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d8e5c:	a904      	add	r1, sp, #16
   d8e5e:	4668      	mov	r0, sp
   d8e60:	f7fc fef0 	bl	d5c44 <_ZNK5spark18JSONObjectIterator4nameEv>
   d8e64:	9802      	ldr	r0, [sp, #8]
   d8e66:	4631      	mov	r1, r6
   d8e68:	f7ff feb4 	bl	d8bd4 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d8e6c:	4604      	mov	r4, r0
   d8e6e:	b110      	cbz	r0, d8e76 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d8e70:	1e2c      	subs	r4, r5, #0
   d8e72:	bf18      	it	ne
   d8e74:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   d8e76:	a801      	add	r0, sp, #4
   d8e78:	f7fb fe80 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e7c:	2c00      	cmp	r4, #0
   d8e7e:	d0e9      	beq.n	d8e54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d8e80:	a904      	add	r1, sp, #16
   d8e82:	4668      	mov	r0, sp
   d8e84:	f7fc feef 	bl	d5c66 <_ZNK5spark18JSONObjectIterator5valueEv>
   d8e88:	4668      	mov	r0, sp
   d8e8a:	f7ff fd3e 	bl	d890a <_ZNK5spark9JSONValue5toIntEv>
   d8e8e:	6028      	str	r0, [r5, #0]
   d8e90:	a801      	add	r0, sp, #4
   d8e92:	f7fb fe73 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8e96:	e7dd      	b.n	d8e54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d8e98:	a805      	add	r0, sp, #20
   d8e9a:	f7fb fe6f 	bl	d4b7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8e9e:	b00a      	add	sp, #40	; 0x28
   d8ea0:	bd70      	pop	{r4, r5, r6, pc}
   d8ea2:	bf00      	nop
   d8ea4:	000dc3da 	.word	0x000dc3da

000d8ea8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8eaa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d8eac:	4620      	mov	r0, r4
   d8eae:	4912      	ldr	r1, [pc, #72]	; (d8ef8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8eb0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d8eb2:	f002 fb50 	bl	db556 <strcmp>
   d8eb6:	b948      	cbnz	r0, d8ecc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d8eb8:	f001 fc42 	bl	da740 <_Z16_fetch_usbserialv>
   d8ebc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8ec0:	f001 fc2e 	bl	da720 <_ZN9USBSerial5beginEl>
        return &Serial;
   d8ec4:	f001 fc3c 	bl	da740 <_Z16_fetch_usbserialv>
}
   d8ec8:	b003      	add	sp, #12
   d8eca:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d8ecc:	490b      	ldr	r1, [pc, #44]	; (d8efc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d8ece:	4620      	mov	r0, r4
   d8ed0:	f002 fb41 	bl	db556 <strcmp>
   d8ed4:	b970      	cbnz	r0, d8ef4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d8ed6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d8eda:	a901      	add	r1, sp, #4
   d8edc:	4628      	mov	r0, r5
        int baud = 9600;
   d8ede:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d8ee0:	f7ff ffb0 	bl	d8e44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d8ee4:	f001 fba4 	bl	da630 <_Z22__fetch_global_Serial1v>
   d8ee8:	9901      	ldr	r1, [sp, #4]
   d8eea:	f001 fb9b 	bl	da624 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d8eee:	f001 fb9f 	bl	da630 <_Z22__fetch_global_Serial1v>
   d8ef2:	e7e9      	b.n	d8ec8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d8ef4:	2000      	movs	r0, #0
   d8ef6:	e7e7      	b.n	d8ec8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d8ef8:	000dc3df 	.word	0x000dc3df
   d8efc:	000dc3e6 	.word	0x000dc3e6

000d8f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f00:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8f02:	e9d0 5300 	ldrd	r5, r3, [r0]
   d8f06:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f08:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8f0a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d8f0e:	42ae      	cmp	r6, r5
   d8f10:	d005      	beq.n	d8f1e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d8f12:	f105 0008 	add.w	r0, r5, #8
   d8f16:	f7ff fff3 	bl	d8f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8f1a:	3514      	adds	r5, #20
   d8f1c:	e7f7      	b.n	d8f0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d8f1e:	6820      	ldr	r0, [r4, #0]
   d8f20:	f7fe fd86 	bl	d7a30 <free>
}
   d8f24:	4620      	mov	r0, r4
   d8f26:	bd70      	pop	{r4, r5, r6, pc}

000d8f28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f28:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8f2a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8f2e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d8f30:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d8f34:	42ae      	cmp	r6, r5
   d8f36:	d004      	beq.n	d8f42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8f38:	4628      	mov	r0, r5
   d8f3a:	f001 f855 	bl	d9fe8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d8f3e:	3510      	adds	r5, #16
   d8f40:	e7f8      	b.n	d8f34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d8f42:	6820      	ldr	r0, [r4, #0]
   d8f44:	f7fe fd74 	bl	d7a30 <free>
}
   d8f48:	4620      	mov	r0, r4
   d8f4a:	bd70      	pop	{r4, r5, r6, pc}

000d8f4c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d8f4c:	b510      	push	{r4, lr}
   d8f4e:	4604      	mov	r4, r0
   d8f50:	300c      	adds	r0, #12
   d8f52:	f7ff ffd5 	bl	d8f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8f56:	4620      	mov	r0, r4
   d8f58:	f7ff ffe6 	bl	d8f28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d8f5c:	4620      	mov	r0, r4
   d8f5e:	bd10      	pop	{r4, pc}

000d8f60 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d8f60:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d8f62:	4b04      	ldr	r3, [pc, #16]	; (d8f74 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d8f64:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d8f66:	f840 3b04 	str.w	r3, [r0], #4
   d8f6a:	f7ff ffef 	bl	d8f4c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d8f6e:	4620      	mov	r0, r4
   d8f70:	bd10      	pop	{r4, pc}
   d8f72:	bf00      	nop
   d8f74:	000dbbd8 	.word	0x000dbbd8

000d8f78 <_ZN5spark16StreamLogHandlerD0Ev>:
   d8f78:	b510      	push	{r4, lr}
   d8f7a:	4604      	mov	r4, r0
   d8f7c:	f7ff fff0 	bl	d8f60 <_ZN5spark16StreamLogHandlerD1Ev>
   d8f80:	4620      	mov	r0, r4
   d8f82:	2124      	movs	r1, #36	; 0x24
   d8f84:	f001 fdc2 	bl	dab0c <_ZdlPvj>
   d8f88:	4620      	mov	r0, r4
   d8f8a:	bd10      	pop	{r4, pc}

000d8f8c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d8f8c:	b510      	push	{r4, lr}
   d8f8e:	4b03      	ldr	r3, [pc, #12]	; (d8f9c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d8f90:	6003      	str	r3, [r0, #0]
   d8f92:	4604      	mov	r4, r0
   d8f94:	f7ff ffe4 	bl	d8f60 <_ZN5spark16StreamLogHandlerD1Ev>
   d8f98:	4620      	mov	r0, r4
   d8f9a:	bd10      	pop	{r4, pc}
   d8f9c:	000dc480 	.word	0x000dc480

000d8fa0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d8fa0:	b510      	push	{r4, lr}
   d8fa2:	4604      	mov	r4, r0
   d8fa4:	f7ff fff2 	bl	d8f8c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8fa8:	4620      	mov	r0, r4
   d8faa:	2124      	movs	r1, #36	; 0x24
   d8fac:	f001 fdae 	bl	dab0c <_ZdlPvj>
   d8fb0:	4620      	mov	r0, r4
   d8fb2:	bd10      	pop	{r4, pc}

000d8fb4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d8fb4:	2200      	movs	r2, #0
   d8fb6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8fba:	b510      	push	{r4, lr}
        capacity_(0) {
   d8fbc:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8fbe:	680c      	ldr	r4, [r1, #0]
   d8fc0:	6004      	str	r4, [r0, #0]
   d8fc2:	684c      	ldr	r4, [r1, #4]
   d8fc4:	6044      	str	r4, [r0, #4]
   d8fc6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fc8:	600a      	str	r2, [r1, #0]
   d8fca:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8fcc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8fce:	608a      	str	r2, [r1, #8]
}
   d8fd0:	bd10      	pop	{r4, pc}

000d8fd2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d8fd2:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d8fd4:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d8fd6:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8fd8:	6818      	ldr	r0, [r3, #0]
   d8fda:	f7fe fa17 	bl	d740c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8fde:	4620      	mov	r0, r4
   d8fe0:	bd10      	pop	{r4, pc}
	...

000d8fe4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fe8:	b087      	sub	sp, #28
   d8fea:	4680      	mov	r8, r0
   d8fec:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d8fee:	4b1c      	ldr	r3, [pc, #112]	; (d9060 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d8ff0:	685b      	ldr	r3, [r3, #4]
   d8ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d8ff6:	4689      	mov	r9, r1
   d8ff8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8ffa:	b96b      	cbnz	r3, d9018 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d8ffc:	f7ff fef4 	bl	d8de8 <_ZN5spark10LogManager8instanceEv>
   d9000:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9002:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d9006:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9008:	9305      	str	r3, [sp, #20]
   d900a:	f7fe f9f7 	bl	d73fc <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d900e:	7b23      	ldrb	r3, [r4, #12]
   d9010:	b12b      	cbz	r3, d901e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d9012:	a805      	add	r0, sp, #20
   d9014:	f7ff ffdd 	bl	d8fd2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d9018:	b007      	add	sp, #28
   d901a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d901e:	2301      	movs	r3, #1
   d9020:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d9022:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d9026:	fa5f f989 	uxtb.w	r9, r9
   d902a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d902e:	45aa      	cmp	sl, r5
   d9030:	d012      	beq.n	d9058 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d9032:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d9036:	4631      	mov	r1, r6
   d9038:	1d38      	adds	r0, r7, #4
   d903a:	f7ff fe61 	bl	d8d00 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d903e:	4581      	cmp	r9, r0
   d9040:	d3f5      	bcc.n	d902e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d9042:	683b      	ldr	r3, [r7, #0]
   d9044:	9a03      	ldr	r2, [sp, #12]
   d9046:	9200      	str	r2, [sp, #0]
   d9048:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d904c:	464a      	mov	r2, r9
   d904e:	4633      	mov	r3, r6
   d9050:	4641      	mov	r1, r8
   d9052:	4638      	mov	r0, r7
   d9054:	47d8      	blx	fp
   d9056:	e7ea      	b.n	d902e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d9058:	2300      	movs	r3, #0
   d905a:	7323      	strb	r3, [r4, #12]
   d905c:	e7d9      	b.n	d9012 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d905e:	bf00      	nop
   d9060:	e000ed00 	.word	0xe000ed00

000d9064 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d9064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9068:	469b      	mov	fp, r3
   d906a:	4b1a      	ldr	r3, [pc, #104]	; (d90d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d906c:	685b      	ldr	r3, [r3, #4]
   d906e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d9072:	4680      	mov	r8, r0
   d9074:	4689      	mov	r9, r1
   d9076:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d9078:	b96b      	cbnz	r3, d9096 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d907a:	f7ff feb5 	bl	d8de8 <_ZN5spark10LogManager8instanceEv>
   d907e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d9080:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d9084:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9086:	9301      	str	r3, [sp, #4]
   d9088:	f7fe f9b8 	bl	d73fc <os_mutex_recursive_lock>
        if (that->isActive()) {
   d908c:	7b23      	ldrb	r3, [r4, #12]
   d908e:	b12b      	cbz	r3, d909c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d9090:	a801      	add	r0, sp, #4
   d9092:	f7ff ff9e 	bl	d8fd2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d9096:	b003      	add	sp, #12
   d9098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d909c:	2301      	movs	r3, #1
   d909e:	7323      	strb	r3, [r4, #12]
   d90a0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d90a4:	b2f6      	uxtb	r6, r6
   d90a6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d90aa:	4555      	cmp	r5, sl
   d90ac:	d00e      	beq.n	d90cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d90ae:	f855 7b04 	ldr.w	r7, [r5], #4
   d90b2:	4659      	mov	r1, fp
   d90b4:	1d38      	adds	r0, r7, #4
   d90b6:	f7ff fe23 	bl	d8d00 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d90ba:	4286      	cmp	r6, r0
   d90bc:	d3f5      	bcc.n	d90aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d90be:	683b      	ldr	r3, [r7, #0]
   d90c0:	464a      	mov	r2, r9
   d90c2:	68db      	ldr	r3, [r3, #12]
   d90c4:	4641      	mov	r1, r8
   d90c6:	4638      	mov	r0, r7
   d90c8:	4798      	blx	r3
   d90ca:	e7ee      	b.n	d90aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d90cc:	2300      	movs	r3, #0
   d90ce:	7323      	strb	r3, [r4, #12]
   d90d0:	e7de      	b.n	d9090 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d90d2:	bf00      	nop
   d90d4:	e000ed00 	.word	0xe000ed00

000d90d8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d90d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d90dc:	4b16      	ldr	r3, [pc, #88]	; (d9138 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d90de:	685b      	ldr	r3, [r3, #4]
   d90e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d90e4:	4605      	mov	r5, r0
   d90e6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d90e8:	bb1b      	cbnz	r3, d9132 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d90ea:	f7ff fe7d 	bl	d8de8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d90ee:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d90f2:	4604      	mov	r4, r0
   d90f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d90f6:	9301      	str	r3, [sp, #4]
   d90f8:	f7fe f980 	bl	d73fc <os_mutex_recursive_lock>
   d90fc:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d9100:	2446      	movs	r4, #70	; 0x46
   d9102:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d9106:	45b0      	cmp	r8, r6
   d9108:	d109      	bne.n	d911e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d910a:	a801      	add	r0, sp, #4
   d910c:	f7ff ff61 	bl	d8fd2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d9110:	42a5      	cmp	r5, r4
   d9112:	bfb4      	ite	lt
   d9114:	2000      	movlt	r0, #0
   d9116:	2001      	movge	r0, #1
}
   d9118:	b002      	add	sp, #8
   d911a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d911e:	f856 0b04 	ldr.w	r0, [r6], #4
   d9122:	4639      	mov	r1, r7
   d9124:	3004      	adds	r0, #4
   d9126:	f7ff fdeb 	bl	d8d00 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d912a:	4284      	cmp	r4, r0
   d912c:	bfa8      	it	ge
   d912e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d9130:	e7e9      	b.n	d9106 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d9132:	2000      	movs	r0, #0
   d9134:	e7f0      	b.n	d9118 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d9136:	bf00      	nop
   d9138:	e000ed00 	.word	0xe000ed00

000d913c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d913c:	b570      	push	{r4, r5, r6, lr}
   d913e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d9140:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d9144:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d9146:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d914a:	4282      	cmp	r2, r0
   d914c:	d007      	beq.n	d915e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d914e:	4601      	mov	r1, r0
            if (*p == value) {
   d9150:	681d      	ldr	r5, [r3, #0]
   d9152:	f851 6b04 	ldr.w	r6, [r1], #4
   d9156:	42ae      	cmp	r6, r5
   d9158:	d003      	beq.n	d9162 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d915a:	4608      	mov	r0, r1
   d915c:	e7f5      	b.n	d914a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d915e:	2000      	movs	r0, #0
}
   d9160:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9162:	1a52      	subs	r2, r2, r1
   d9164:	f002 f966 	bl	db434 <memmove>
    --size_;
   d9168:	6863      	ldr	r3, [r4, #4]
   d916a:	3b01      	subs	r3, #1
   d916c:	6063      	str	r3, [r4, #4]
    return true;
   d916e:	2001      	movs	r0, #1
   d9170:	e7f6      	b.n	d9160 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d9172 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9172:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d9174:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d9178:	4604      	mov	r4, r0
   d917a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d917c:	9101      	str	r1, [sp, #4]
   d917e:	9303      	str	r3, [sp, #12]
   d9180:	f7fe f93c 	bl	d73fc <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d9184:	a901      	add	r1, sp, #4
   d9186:	4620      	mov	r0, r4
   d9188:	f7ff ffd8 	bl	d913c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d918c:	b118      	cbz	r0, d9196 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d918e:	6863      	ldr	r3, [r4, #4]
   d9190:	b90b      	cbnz	r3, d9196 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d9192:	f7ff fe51 	bl	d8e38 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9196:	a803      	add	r0, sp, #12
   d9198:	f7ff ff1b 	bl	d8fd2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d919c:	b004      	add	sp, #16
   d919e:	bd10      	pop	{r4, pc}

000d91a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d91a0:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d91a2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d91a6:	2318      	movs	r3, #24
   d91a8:	4604      	mov	r4, r0
   d91aa:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d91ae:	42ae      	cmp	r6, r5
   d91b0:	d015      	beq.n	d91de <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d91b2:	f105 0110 	add.w	r1, r5, #16
   d91b6:	4620      	mov	r0, r4
   d91b8:	f7ff ffc0 	bl	d913c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d91bc:	6863      	ldr	r3, [r4, #4]
   d91be:	b90b      	cbnz	r3, d91c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d91c0:	f7ff fe3a 	bl	d8e38 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d91c4:	69e0      	ldr	r0, [r4, #28]
   d91c6:	6929      	ldr	r1, [r5, #16]
   d91c8:	6803      	ldr	r3, [r0, #0]
   d91ca:	68db      	ldr	r3, [r3, #12]
   d91cc:	4798      	blx	r3
        if (h.stream) {
   d91ce:	6969      	ldr	r1, [r5, #20]
   d91d0:	b119      	cbz	r1, d91da <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d91d2:	6a20      	ldr	r0, [r4, #32]
   d91d4:	6803      	ldr	r3, [r0, #0]
   d91d6:	68db      	ldr	r3, [r3, #12]
   d91d8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d91da:	3518      	adds	r5, #24
   d91dc:	e7e7      	b.n	d91ae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d91de:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d91e2:	2618      	movs	r6, #24
   d91e4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d91e8:	42ae      	cmp	r6, r5
   d91ea:	d004      	beq.n	d91f6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d91ec:	4628      	mov	r0, r5
   d91ee:	f000 fefb 	bl	d9fe8 <_ZN6StringD1Ev>
   d91f2:	3518      	adds	r5, #24
   d91f4:	e7f8      	b.n	d91e8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d91f6:	2300      	movs	r3, #0
   d91f8:	6163      	str	r3, [r4, #20]
}
   d91fa:	bd70      	pop	{r4, r5, r6, pc}

000d91fc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d91fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d91fe:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d9200:	f7ff fe1a 	bl	d8e38 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d9204:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d9208:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d920a:	9301      	str	r3, [sp, #4]
   d920c:	f7fe f8f6 	bl	d73fc <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d9210:	4620      	mov	r0, r4
   d9212:	f7ff ffc5 	bl	d91a0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d9216:	a801      	add	r0, sp, #4
   d9218:	f7ff fedb 	bl	d8fd2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d921c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d921e:	b108      	cbz	r0, d9224 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d9220:	f7fe f8e4 	bl	d73ec <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d9224:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d9228:	2618      	movs	r6, #24
   d922a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d922e:	42ae      	cmp	r6, r5
   d9230:	d004      	beq.n	d923c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d9232:	4628      	mov	r0, r5
   d9234:	f000 fed8 	bl	d9fe8 <_ZN6StringD1Ev>
   d9238:	3518      	adds	r5, #24
   d923a:	e7f8      	b.n	d922e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d923c:	6920      	ldr	r0, [r4, #16]
   d923e:	f7fe fbf7 	bl	d7a30 <free>
   d9242:	6820      	ldr	r0, [r4, #0]
   d9244:	f7fe fbf4 	bl	d7a30 <free>
}
   d9248:	4620      	mov	r0, r4
   d924a:	b002      	add	sp, #8
   d924c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9250 <__tcf_2>:
    static LogManager mgr;
   d9250:	4801      	ldr	r0, [pc, #4]	; (d9258 <__tcf_2+0x8>)
   d9252:	f7ff bfd3 	b.w	d91fc <_ZN5spark10LogManagerD1Ev>
   d9256:	bf00      	nop
   d9258:	2003e578 	.word	0x2003e578

000d925c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d925c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d925e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9260:	4606      	mov	r6, r0
   d9262:	460c      	mov	r4, r1
   d9264:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d9266:	d927      	bls.n	d92b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d9268:	4290      	cmp	r0, r2
   d926a:	d226      	bcs.n	d92ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d926c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d9270:	1a6c      	subs	r4, r5, r1
   d9272:	f1a1 0714 	sub.w	r7, r1, #20
   d9276:	4404      	add	r4, r0
        capacity_(0) {
   d9278:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d927a:	42af      	cmp	r7, r5
   d927c:	d03d      	beq.n	d92fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d927e:	b1a4      	cbz	r4, d92aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d9280:	682b      	ldr	r3, [r5, #0]
   d9282:	6023      	str	r3, [r4, #0]
   d9284:	88ab      	ldrh	r3, [r5, #4]
   d9286:	80a3      	strh	r3, [r4, #4]
   d9288:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d928c:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d928e:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d9292:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9294:	68ab      	ldr	r3, [r5, #8]
   d9296:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9298:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d929a:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d929c:	68ea      	ldr	r2, [r5, #12]
   d929e:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d92a0:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92a2:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d92a4:	692a      	ldr	r2, [r5, #16]
   d92a6:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d92a8:	612b      	str	r3, [r5, #16]
   d92aa:	f105 0008 	add.w	r0, r5, #8
   d92ae:	f7ff fe27 	bl	d8f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d92b2:	3d14      	subs	r5, #20
   d92b4:	3c14      	subs	r4, #20
   d92b6:	e7e0      	b.n	d927a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d92b8:	d01f      	beq.n	d92fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d92ba:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d92bc:	42ac      	cmp	r4, r5
   d92be:	d01c      	beq.n	d92fa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d92c0:	b1a6      	cbz	r6, d92ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d92c2:	6823      	ldr	r3, [r4, #0]
   d92c4:	6033      	str	r3, [r6, #0]
   d92c6:	88a3      	ldrh	r3, [r4, #4]
   d92c8:	80b3      	strh	r3, [r6, #4]
   d92ca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d92ce:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d92d0:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d92d4:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d92d6:	68a3      	ldr	r3, [r4, #8]
   d92d8:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d92da:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92dc:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d92de:	68e2      	ldr	r2, [r4, #12]
   d92e0:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d92e2:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d92e4:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d92e6:	6922      	ldr	r2, [r4, #16]
   d92e8:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d92ea:	6123      	str	r3, [r4, #16]
   d92ec:	f104 0008 	add.w	r0, r4, #8
   d92f0:	f7ff fe06 	bl	d8f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d92f4:	3414      	adds	r4, #20
   d92f6:	3614      	adds	r6, #20
   d92f8:	e7e0      	b.n	d92bc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d92fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d92fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d92fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d92fe:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d9302:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d9304:	4604      	mov	r4, r0
   d9306:	460e      	mov	r6, r1
   d9308:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d930a:	db0d      	blt.n	d9328 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d930c:	3501      	adds	r5, #1
        if (n > 0) {
   d930e:	2d00      	cmp	r5, #0
   d9310:	6800      	ldr	r0, [r0, #0]
   d9312:	dd04      	ble.n	d931e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d9314:	00a9      	lsls	r1, r5, #2
   d9316:	f7fe fb93 	bl	d7a40 <realloc>
            if (!d) {
   d931a:	b918      	cbnz	r0, d9324 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d931e:	f7fe fb87 	bl	d7a30 <free>
        T* d = nullptr;
   d9322:	2000      	movs	r0, #0
        data_ = d;
   d9324:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d9326:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d9328:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d932a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d932c:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d9330:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d9332:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d9336:	1d08      	adds	r0, r1, #4
   d9338:	f002 f87c 	bl	db434 <memmove>
    new(p) T(std::move(value));
   d933c:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d9340:	6863      	ldr	r3, [r4, #4]
   d9342:	3301      	adds	r3, #1
   d9344:	6063      	str	r3, [r4, #4]
    return true;
   d9346:	2001      	movs	r0, #1
   d9348:	e7e8      	b.n	d931c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d934a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d934a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d934c:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d9350:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d9352:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d9354:	9301      	str	r3, [sp, #4]
   d9356:	460d      	mov	r5, r1
   d9358:	f7fe f850 	bl	d73fc <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d935c:	e9d4 3100 	ldrd	r3, r1, [r4]
   d9360:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d9364:	4283      	cmp	r3, r0
   d9366:	461a      	mov	r2, r3
   d9368:	d00b      	beq.n	d9382 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d936a:	6812      	ldr	r2, [r2, #0]
   d936c:	42aa      	cmp	r2, r5
   d936e:	f103 0304 	add.w	r3, r3, #4
   d9372:	d1f7      	bne.n	d9364 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d9374:	a801      	add	r0, sp, #4
   d9376:	f7ff fe2c 	bl	d8fd2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d937a:	2500      	movs	r5, #0
}
   d937c:	4628      	mov	r0, r5
   d937e:	b003      	add	sp, #12
   d9380:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d9382:	462a      	mov	r2, r5
   d9384:	4620      	mov	r0, r4
   d9386:	f7ff ffb9 	bl	d92fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d938a:	4605      	mov	r5, r0
   d938c:	2800      	cmp	r0, #0
   d938e:	d0f1      	beq.n	d9374 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d9390:	6863      	ldr	r3, [r4, #4]
   d9392:	2b01      	cmp	r3, #1
   d9394:	d101      	bne.n	d939a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d9396:	f7ff fd43 	bl	d8e20 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d939a:	a801      	add	r0, sp, #4
   d939c:	f7ff fe19 	bl	d8fd2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d93a0:	e7ec      	b.n	d937c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d93a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d93a2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d93a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d93a6:	4604      	mov	r4, r0
   d93a8:	460d      	mov	r5, r1
   d93aa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d93ac:	d914      	bls.n	d93d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d93ae:	4290      	cmp	r0, r2
   d93b0:	d213      	bcs.n	d93da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d93b2:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d93b6:	1a75      	subs	r5, r6, r1
   d93b8:	f1a1 0710 	sub.w	r7, r1, #16
   d93bc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d93be:	42b7      	cmp	r7, r6
   d93c0:	d018      	beq.n	d93f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d93c2:	b11c      	cbz	r4, d93cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d93c4:	4631      	mov	r1, r6
   d93c6:	4620      	mov	r0, r4
   d93c8:	f000 fe8a 	bl	da0e0 <_ZN6StringC1EOS_>
                end->~T();
   d93cc:	4630      	mov	r0, r6
   d93ce:	f000 fe0b 	bl	d9fe8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d93d2:	3e10      	subs	r6, #16
   d93d4:	3c10      	subs	r4, #16
   d93d6:	e7f2      	b.n	d93be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d93d8:	d00c      	beq.n	d93f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d93da:	42b5      	cmp	r5, r6
   d93dc:	d00a      	beq.n	d93f4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d93de:	b11c      	cbz	r4, d93e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d93e0:	4629      	mov	r1, r5
   d93e2:	4620      	mov	r0, r4
   d93e4:	f000 fe7c 	bl	da0e0 <_ZN6StringC1EOS_>
                p->~T();
   d93e8:	4628      	mov	r0, r5
   d93ea:	f000 fdfd 	bl	d9fe8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d93ee:	3510      	adds	r5, #16
   d93f0:	3410      	adds	r4, #16
   d93f2:	e7f2      	b.n	d93da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d93f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d93f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d93f6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d93f8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d93fa:	4605      	mov	r5, r0
        if (n > 0) {
   d93fc:	dd11      	ble.n	d9422 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d93fe:	0130      	lsls	r0, r6, #4
   d9400:	f7fe fb0e 	bl	d7a20 <malloc>
            if (!d) {
   d9404:	4604      	mov	r4, r0
   d9406:	b158      	cbz	r0, d9420 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d9408:	e9d5 1200 	ldrd	r1, r2, [r5]
   d940c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d9410:	f7ff ffc7 	bl	d93a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d9414:	6828      	ldr	r0, [r5, #0]
   d9416:	f7fe fb0b 	bl	d7a30 <free>
        data_ = d;
   d941a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d941c:	60ae      	str	r6, [r5, #8]
        return true;
   d941e:	2001      	movs	r0, #1
    }
   d9420:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d9422:	2400      	movs	r4, #0
   d9424:	e7f6      	b.n	d9414 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d9426 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d9426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d942a:	4691      	mov	r9, r2
   d942c:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d942e:	2300      	movs	r3, #0
   d9430:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d9432:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d9436:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d9438:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d943a:	4299      	cmp	r1, r3
        capacity_(0) {
   d943c:	e9c0 3300 	strd	r3, r3, [r0]
   d9440:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d9444:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d9448:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d944c:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d944e:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d9450:	dc23      	bgt.n	d949a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d9452:	e9d9 5700 	ldrd	r5, r7, [r9]
   d9456:	2314      	movs	r3, #20
   d9458:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d945c:	42af      	cmp	r7, r5
   d945e:	d03b      	beq.n	d94d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d9460:	4629      	mov	r1, r5
   d9462:	a80d      	add	r0, sp, #52	; 0x34
   d9464:	f000 fe3c 	bl	da0e0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d9468:	a90d      	add	r1, sp, #52	; 0x34
   d946a:	a811      	add	r0, sp, #68	; 0x44
   d946c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d946e:	f000 fe37 	bl	da0e0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9472:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d9476:	4299      	cmp	r1, r3
   d9478:	da1b      	bge.n	d94b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d947a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d947c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d947e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9482:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d9486:	4631      	mov	r1, r6
   d9488:	f106 0010 	add.w	r0, r6, #16
   d948c:	f7ff ff89 	bl	d93a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9490:	b9ee      	cbnz	r6, d94ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d9492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9494:	3301      	adds	r3, #1
   d9496:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d9498:	e011      	b.n	d94be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d949a:	a80a      	add	r0, sp, #40	; 0x28
   d949c:	f7ff ffab 	bl	d93f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d94a0:	2800      	cmp	r0, #0
   d94a2:	d1d6      	bne.n	d9452 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d94a4:	a80a      	add	r0, sp, #40	; 0x28
   d94a6:	f7ff fd3f 	bl	d8f28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d94aa:	4620      	mov	r0, r4
   d94ac:	b017      	add	sp, #92	; 0x5c
   d94ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d94b2:	3101      	adds	r1, #1
   d94b4:	a80a      	add	r0, sp, #40	; 0x28
   d94b6:	f7ff ff9e 	bl	d93f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d94ba:	2800      	cmp	r0, #0
   d94bc:	d1dd      	bne.n	d947a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d94be:	a811      	add	r0, sp, #68	; 0x44
   d94c0:	f000 fd92 	bl	d9fe8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d94c4:	a80d      	add	r0, sp, #52	; 0x34
   d94c6:	f000 fd8f 	bl	d9fe8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d94ca:	3514      	adds	r5, #20
   d94cc:	e7c6      	b.n	d945c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d94ce:	a911      	add	r1, sp, #68	; 0x44
   d94d0:	4630      	mov	r0, r6
   d94d2:	f000 fe05 	bl	da0e0 <_ZN6StringC1EOS_>
   d94d6:	e7dc      	b.n	d9492 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d94d8:	2600      	movs	r6, #0
   d94da:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d94de:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d94e0:	4637      	mov	r7, r6
   d94e2:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d94e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d94ea:	429e      	cmp	r6, r3
   d94ec:	f280 8097 	bge.w	d961e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d94f0:	0133      	lsls	r3, r6, #4
   d94f2:	58d3      	ldr	r3, [r2, r3]
   d94f4:	9308      	str	r3, [sp, #32]
        if (!category) {
   d94f6:	b90b      	cbnz	r3, d94fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d94f8:	3601      	adds	r6, #1
   d94fa:	e7f4      	b.n	d94e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d94fc:	fb0a f306 	mul.w	r3, sl, r6
   d9500:	9709      	str	r7, [sp, #36]	; 0x24
   d9502:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d9504:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d9506:	a909      	add	r1, sp, #36	; 0x24
   d9508:	a808      	add	r0, sp, #32
   d950a:	f7ff fb3c 	bl	d8b86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d950e:	4683      	mov	fp, r0
   d9510:	2800      	cmp	r0, #0
   d9512:	d0f1      	beq.n	d94f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d9514:	4601      	mov	r1, r0
   d9516:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d9518:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d951c:	f10d 031f 	add.w	r3, sp, #31
   d9520:	4628      	mov	r0, r5
   d9522:	f7ff fbaf 	bl	d8c84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9526:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d952a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d952c:	f1b8 0f00 	cmp.w	r8, #0
   d9530:	d166      	bne.n	d9600 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d9532:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d9536:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d953a:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d953e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d9542:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d9546:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d954a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d954e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d9552:	4293      	cmp	r3, r2
   d9554:	db1a      	blt.n	d958c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d9556:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d955a:	f1bb 0f00 	cmp.w	fp, #0
   d955e:	dd4a      	ble.n	d95f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d9560:	fb0a f00b 	mul.w	r0, sl, fp
   d9564:	f7fe fa5c 	bl	d7a20 <malloc>
            if (!d) {
   d9568:	9004      	str	r0, [sp, #16]
   d956a:	2800      	cmp	r0, #0
   d956c:	d045      	beq.n	d95fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d956e:	e9d5 1200 	ldrd	r1, r2, [r5]
   d9572:	fb0a 1202 	mla	r2, sl, r2, r1
   d9576:	f7ff fe71 	bl	d925c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d957a:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d957c:	6828      	ldr	r0, [r5, #0]
   d957e:	9304      	str	r3, [sp, #16]
   d9580:	f7fe fa56 	bl	d7a30 <free>
        data_ = d;
   d9584:	9b04      	ldr	r3, [sp, #16]
   d9586:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d9588:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d958c:	9b01      	ldr	r3, [sp, #4]
   d958e:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d9592:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d9594:	fb0a f303 	mul.w	r3, sl, r3
   d9598:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d959c:	f101 0014 	add.w	r0, r1, #20
   d95a0:	fb0a b202 	mla	r2, sl, r2, fp
   d95a4:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d95a6:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d95a8:	f7ff fe58 	bl	d925c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d95ac:	9904      	ldr	r1, [sp, #16]
   d95ae:	b1a9      	cbz	r1, d95dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d95b0:	9b05      	ldr	r3, [sp, #20]
   d95b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d95b4:	f84b 2003 	str.w	r2, [fp, r3]
   d95b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d95bc:	808b      	strh	r3, [r1, #4]
   d95be:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d95c2:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d95c4:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d95c8:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d95ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d95cc:	608b      	str	r3, [r1, #8]
   d95ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d95d0:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d95d2:	60cb      	str	r3, [r1, #12]
   d95d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d95d6:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d95d8:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d95da:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d95dc:	686b      	ldr	r3, [r5, #4]
   d95de:	3301      	adds	r3, #1
   d95e0:	606b      	str	r3, [r5, #4]
   d95e2:	a813      	add	r0, sp, #76	; 0x4c
   d95e4:	f7ff fc8c 	bl	d8f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d95e8:	f1b8 0f00 	cmp.w	r8, #0
   d95ec:	d008      	beq.n	d9600 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d95ee:	a80d      	add	r0, sp, #52	; 0x34
   d95f0:	f7ff fc86 	bl	d8f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d95f4:	e756      	b.n	d94a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d95f6:	4643      	mov	r3, r8
   d95f8:	e7c0      	b.n	d957c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d95fa:	f04f 0801 	mov.w	r8, #1
   d95fe:	e7f0      	b.n	d95e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d9600:	9b01      	ldr	r3, [sp, #4]
   d9602:	682d      	ldr	r5, [r5, #0]
   d9604:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d9608:	9b08      	ldr	r3, [sp, #32]
   d960a:	781b      	ldrb	r3, [r3, #0]
   d960c:	b92b      	cbnz	r3, d961a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d960e:	f8d9 3000 	ldr.w	r3, [r9]
   d9612:	9a02      	ldr	r2, [sp, #8]
   d9614:	4413      	add	r3, r2
   d9616:	7c1b      	ldrb	r3, [r3, #16]
   d9618:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d961a:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d961c:	e773      	b.n	d9506 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d961e:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9620:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9622:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d9624:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9626:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9628:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d962a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d962c:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d962e:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9630:	60a2      	str	r2, [r4, #8]
   d9632:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d9634:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9636:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9638:	60e2      	str	r2, [r4, #12]
   d963a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d963c:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d963e:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9640:	6122      	str	r2, [r4, #16]
   d9642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d9644:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d9646:	9b03      	ldr	r3, [sp, #12]
   d9648:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d964a:	6162      	str	r2, [r4, #20]
   d964c:	7623      	strb	r3, [r4, #24]
   d964e:	e7ce      	b.n	d95ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d9650 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9650:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d9652:	4605      	mov	r5, r0
   d9654:	4b09      	ldr	r3, [pc, #36]	; (d967c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d9656:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d965a:	4604      	mov	r4, r0
   d965c:	460e      	mov	r6, r1
        filter_(level, filters) {
   d965e:	a801      	add	r0, sp, #4
   d9660:	4611      	mov	r1, r2
   d9662:	f7fb fb3e 	bl	d4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9666:	aa01      	add	r2, sp, #4
   d9668:	4631      	mov	r1, r6
   d966a:	4628      	mov	r0, r5
   d966c:	f7ff fedb 	bl	d9426 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9670:	a801      	add	r0, sp, #4
   d9672:	f7fb faf5 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d9676:	4620      	mov	r0, r4
   d9678:	b004      	add	sp, #16
   d967a:	bd70      	pop	{r4, r5, r6, pc}
   d967c:	000dbbd8 	.word	0x000dbbd8

000d9680 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d9680:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9682:	460f      	mov	r7, r1
   d9684:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9686:	4926      	ldr	r1, [pc, #152]	; (d9720 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d9688:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d968a:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d968c:	4616      	mov	r6, r2
   d968e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d9690:	f001 ff61 	bl	db556 <strcmp>
   d9694:	bb00      	cbnz	r0, d96d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d9696:	b1e4      	cbz	r4, d96d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d9698:	4629      	mov	r1, r5
   d969a:	4668      	mov	r0, sp
   d969c:	f7ff fc8a 	bl	d8fb4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d96a0:	4920      	ldr	r1, [pc, #128]	; (d9724 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d96a2:	2024      	movs	r0, #36	; 0x24
   d96a4:	f001 fa34 	bl	dab10 <_ZnwjRKSt9nothrow_t>
   d96a8:	4605      	mov	r5, r0
   d96aa:	b170      	cbz	r0, d96ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d96ac:	4669      	mov	r1, sp
   d96ae:	a803      	add	r0, sp, #12
   d96b0:	f7fb fb17 	bl	d4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d96b4:	aa03      	add	r2, sp, #12
   d96b6:	4631      	mov	r1, r6
   d96b8:	4628      	mov	r0, r5
   d96ba:	f7ff ffc9 	bl	d9650 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d96be:	a803      	add	r0, sp, #12
   d96c0:	f7fb face 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d96c4:	4b18      	ldr	r3, [pc, #96]	; (d9728 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d96c6:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d96c8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d96ca:	4668      	mov	r0, sp
   d96cc:	f7fb fac8 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d96d0:	462c      	mov	r4, r5
}
   d96d2:	4620      	mov	r0, r4
   d96d4:	b007      	add	sp, #28
   d96d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d96d8:	4914      	ldr	r1, [pc, #80]	; (d972c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d96da:	4638      	mov	r0, r7
   d96dc:	f001 ff3b 	bl	db556 <strcmp>
   d96e0:	b9e0      	cbnz	r0, d971c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d96e2:	2c00      	cmp	r4, #0
   d96e4:	d0f5      	beq.n	d96d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d96e6:	4629      	mov	r1, r5
   d96e8:	4668      	mov	r0, sp
   d96ea:	f7ff fc63 	bl	d8fb4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d96ee:	490d      	ldr	r1, [pc, #52]	; (d9724 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d96f0:	2024      	movs	r0, #36	; 0x24
   d96f2:	f001 fa0d 	bl	dab10 <_ZnwjRKSt9nothrow_t>
   d96f6:	4605      	mov	r5, r0
   d96f8:	2800      	cmp	r0, #0
   d96fa:	d0e6      	beq.n	d96ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d96fc:	4669      	mov	r1, sp
   d96fe:	a803      	add	r0, sp, #12
   d9700:	f7fb faef 	bl	d4ce2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9704:	aa03      	add	r2, sp, #12
   d9706:	4631      	mov	r1, r6
   d9708:	4628      	mov	r0, r5
   d970a:	f7ff ffa1 	bl	d9650 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d970e:	a803      	add	r0, sp, #12
   d9710:	f7fb faa6 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9714:	4b06      	ldr	r3, [pc, #24]	; (d9730 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d9716:	602b      	str	r3, [r5, #0]
   d9718:	622c      	str	r4, [r5, #32]
}
   d971a:	e7d6      	b.n	d96ca <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d971c:	2400      	movs	r4, #0
   d971e:	e7d8      	b.n	d96d2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d9720:	000dc3ee 	.word	0x000dc3ee
   d9724:	000dc5bc 	.word	0x000dc5bc
   d9728:	000dc480 	.word	0x000dc480
   d972c:	000dc3f2 	.word	0x000dc3f2
   d9730:	000dc468 	.word	0x000dc468

000d9734 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d9734:	4b01      	ldr	r3, [pc, #4]	; (d973c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9736:	4a02      	ldr	r2, [pc, #8]	; (d9740 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9738:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d973a:	4770      	bx	lr
   d973c:	2003e574 	.word	0x2003e574
   d9740:	000dc403 	.word	0x000dc403

000d9744 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9748:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d974a:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d974e:	4604      	mov	r4, r0
   d9750:	460e      	mov	r6, r1
   d9752:	4617      	mov	r7, r2
   d9754:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d9756:	f000 fff3 	bl	da740 <_Z16_fetch_usbserialv>
   d975a:	4581      	cmp	r9, r0
   d975c:	d04c      	beq.n	d97f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d975e:	792b      	ldrb	r3, [r5, #4]
   d9760:	0719      	lsls	r1, r3, #28
   d9762:	d504      	bpl.n	d976e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d9764:	696a      	ldr	r2, [r5, #20]
   d9766:	4954      	ldr	r1, [pc, #336]	; (d98b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9768:	4620      	mov	r0, r4
   d976a:	f7ff fa7c 	bl	d8c66 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d976e:	f1b8 0f00 	cmp.w	r8, #0
   d9772:	d00d      	beq.n	d9790 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d9774:	215b      	movs	r1, #91	; 0x5b
   d9776:	4620      	mov	r0, r4
   d9778:	f7ff fa69 	bl	d8c4e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d977c:	4641      	mov	r1, r8
   d977e:	4620      	mov	r0, r4
   d9780:	f7ff fa56 	bl	d8c30 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d9784:	6823      	ldr	r3, [r4, #0]
   d9786:	494d      	ldr	r1, [pc, #308]	; (d98bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d9788:	68db      	ldr	r3, [r3, #12]
   d978a:	2202      	movs	r2, #2
   d978c:	4620      	mov	r0, r4
   d978e:	4798      	blx	r3
    if (attr.has_file) {
   d9790:	792b      	ldrb	r3, [r5, #4]
   d9792:	07da      	lsls	r2, r3, #31
   d9794:	d523      	bpl.n	d97de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d9796:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d979a:	212f      	movs	r1, #47	; 0x2f
   d979c:	4640      	mov	r0, r8
   d979e:	f001 ff37 	bl	db610 <strrchr>
    if (s1) {
   d97a2:	b108      	cbz	r0, d97a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d97a4:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d97a8:	4641      	mov	r1, r8
   d97aa:	4620      	mov	r0, r4
   d97ac:	f7ff fa40 	bl	d8c30 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d97b0:	792b      	ldrb	r3, [r5, #4]
   d97b2:	079b      	lsls	r3, r3, #30
   d97b4:	d508      	bpl.n	d97c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d97b6:	213a      	movs	r1, #58	; 0x3a
   d97b8:	4620      	mov	r0, r4
   d97ba:	f7ff fa48 	bl	d8c4e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d97be:	68ea      	ldr	r2, [r5, #12]
   d97c0:	493f      	ldr	r1, [pc, #252]	; (d98c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d97c2:	4620      	mov	r0, r4
   d97c4:	f7ff fa4f 	bl	d8c66 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d97c8:	792a      	ldrb	r2, [r5, #4]
   d97ca:	6823      	ldr	r3, [r4, #0]
   d97cc:	f012 0f04 	tst.w	r2, #4
   d97d0:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d97d2:	bf14      	ite	ne
   d97d4:	493b      	ldrne	r1, [pc, #236]	; (d98c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d97d6:	493c      	ldreq	r1, [pc, #240]	; (d98c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d97d8:	2202      	movs	r2, #2
            write(": ", 2);
   d97da:	4620      	mov	r0, r4
   d97dc:	4798      	blx	r3
    if (attr.has_function) {
   d97de:	792b      	ldrb	r3, [r5, #4]
   d97e0:	0758      	lsls	r0, r3, #29
   d97e2:	d51d      	bpl.n	d9820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d97e4:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d97e6:	460b      	mov	r3, r1
   d97e8:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d97ea:	f813 0b01 	ldrb.w	r0, [r3], #1
   d97ee:	b160      	cbz	r0, d980a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d97f0:	2820      	cmp	r0, #32
   d97f2:	d108      	bne.n	d9806 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d97f4:	4619      	mov	r1, r3
   d97f6:	e7f7      	b.n	d97e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d97f8:	4834      	ldr	r0, [pc, #208]	; (d98cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d97fa:	f000 f966 	bl	d9aca <_ZN5spark12NetworkClass9listeningEv>
   d97fe:	2800      	cmp	r0, #0
   d9800:	d0ad      	beq.n	d975e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d9802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d9806:	2828      	cmp	r0, #40	; 0x28
   d9808:	d1ee      	bne.n	d97e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d980a:	6823      	ldr	r3, [r4, #0]
   d980c:	1a52      	subs	r2, r2, r1
   d980e:	68db      	ldr	r3, [r3, #12]
   d9810:	4620      	mov	r0, r4
   d9812:	4798      	blx	r3
        write("(): ", 4);
   d9814:	6823      	ldr	r3, [r4, #0]
   d9816:	492e      	ldr	r1, [pc, #184]	; (d98d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d9818:	68db      	ldr	r3, [r3, #12]
   d981a:	2204      	movs	r2, #4
   d981c:	4620      	mov	r0, r4
   d981e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d9820:	2100      	movs	r1, #0
   d9822:	4638      	mov	r0, r7
   d9824:	f7fd ffe2 	bl	d77ec <log_level_name>
   d9828:	4601      	mov	r1, r0
    write(s);
   d982a:	4620      	mov	r0, r4
   d982c:	f7ff fa00 	bl	d8c30 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d9830:	6823      	ldr	r3, [r4, #0]
   d9832:	4925      	ldr	r1, [pc, #148]	; (d98c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d9834:	68db      	ldr	r3, [r3, #12]
   d9836:	2202      	movs	r2, #2
   d9838:	4620      	mov	r0, r4
   d983a:	4798      	blx	r3
    if (msg) {
   d983c:	b11e      	cbz	r6, d9846 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d983e:	4631      	mov	r1, r6
   d9840:	4620      	mov	r0, r4
   d9842:	f7ff f9f5 	bl	d8c30 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d9846:	792b      	ldrb	r3, [r5, #4]
   d9848:	f013 0f30 	tst.w	r3, #48	; 0x30
   d984c:	d02c      	beq.n	d98a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d984e:	6823      	ldr	r3, [r4, #0]
   d9850:	4920      	ldr	r1, [pc, #128]	; (d98d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d9852:	68db      	ldr	r3, [r3, #12]
   d9854:	2202      	movs	r2, #2
   d9856:	4620      	mov	r0, r4
   d9858:	4798      	blx	r3
        if (attr.has_code) {
   d985a:	792b      	ldrb	r3, [r5, #4]
   d985c:	06d9      	lsls	r1, r3, #27
   d985e:	d50a      	bpl.n	d9876 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d9860:	6823      	ldr	r3, [r4, #0]
   d9862:	491d      	ldr	r1, [pc, #116]	; (d98d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9864:	68db      	ldr	r3, [r3, #12]
   d9866:	2207      	movs	r2, #7
   d9868:	4620      	mov	r0, r4
   d986a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d986c:	69aa      	ldr	r2, [r5, #24]
   d986e:	491b      	ldr	r1, [pc, #108]	; (d98dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d9870:	4620      	mov	r0, r4
   d9872:	f7ff f9f8 	bl	d8c66 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d9876:	792b      	ldrb	r3, [r5, #4]
   d9878:	069a      	lsls	r2, r3, #26
   d987a:	d511      	bpl.n	d98a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d987c:	06db      	lsls	r3, r3, #27
   d987e:	d505      	bpl.n	d988c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d9880:	6823      	ldr	r3, [r4, #0]
   d9882:	4910      	ldr	r1, [pc, #64]	; (d98c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d9884:	68db      	ldr	r3, [r3, #12]
   d9886:	2202      	movs	r2, #2
   d9888:	4620      	mov	r0, r4
   d988a:	4798      	blx	r3
            write("details = ", 10);
   d988c:	6823      	ldr	r3, [r4, #0]
   d988e:	4914      	ldr	r1, [pc, #80]	; (d98e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d9890:	68db      	ldr	r3, [r3, #12]
   d9892:	4620      	mov	r0, r4
   d9894:	220a      	movs	r2, #10
   d9896:	4798      	blx	r3
            write(attr.details);
   d9898:	69e9      	ldr	r1, [r5, #28]
   d989a:	4620      	mov	r0, r4
   d989c:	f7ff f9c8 	bl	d8c30 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d98a0:	215d      	movs	r1, #93	; 0x5d
   d98a2:	4620      	mov	r0, r4
   d98a4:	f7ff f9d3 	bl	d8c4e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d98a8:	6823      	ldr	r3, [r4, #0]
   d98aa:	490e      	ldr	r1, [pc, #56]	; (d98e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d98ac:	68db      	ldr	r3, [r3, #12]
   d98ae:	4620      	mov	r0, r4
   d98b0:	2202      	movs	r2, #2
}
   d98b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d98b6:	4718      	bx	r3
   d98b8:	000dc407 	.word	0x000dc407
   d98bc:	000dc40e 	.word	0x000dc40e
   d98c0:	000dbe77 	.word	0x000dbe77
   d98c4:	000dc411 	.word	0x000dc411
   d98c8:	000dc416 	.word	0x000dc416
   d98cc:	2003e5a0 	.word	0x2003e5a0
   d98d0:	000dc414 	.word	0x000dc414
   d98d4:	000dc419 	.word	0x000dc419
   d98d8:	000dc41c 	.word	0x000dc41c
   d98dc:	000db9a3 	.word	0x000db9a3
   d98e0:	000dc424 	.word	0x000dc424
   d98e4:	000dc42f 	.word	0x000dc42f

000d98e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d98e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d98ec:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d98ee:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d98f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d98f4:	4605      	mov	r5, r0
   d98f6:	460f      	mov	r7, r1
   d98f8:	4690      	mov	r8, r2
   d98fa:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d98fc:	f000 ff20 	bl	da740 <_Z16_fetch_usbserialv>
   d9900:	4581      	cmp	r9, r0
   d9902:	d105      	bne.n	d9910 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d9904:	4849      	ldr	r0, [pc, #292]	; (d9a2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d9906:	f000 f8e0 	bl	d9aca <_ZN5spark12NetworkClass9listeningEv>
   d990a:	2800      	cmp	r0, #0
   d990c:	f040 808a 	bne.w	d9a24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d9910:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d9912:	4a47      	ldr	r2, [pc, #284]	; (d9a30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d9914:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d9916:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d991a:	a801      	add	r0, sp, #4
        strm_(stream) {
   d991c:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d991e:	f88d 9008 	strb.w	r9, [sp, #8]
   d9922:	f7ff f878 	bl	d8a16 <_ZN5spark10JSONWriter11beginObjectEv>
   d9926:	4649      	mov	r1, r9
   d9928:	4640      	mov	r0, r8
   d992a:	f7fd ff5f 	bl	d77ec <log_level_name>
    json.name("l", 1).value(s);
   d992e:	4941      	ldr	r1, [pc, #260]	; (d9a34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d9930:	4680      	mov	r8, r0
   d9932:	2201      	movs	r2, #1
   d9934:	a801      	add	r0, sp, #4
   d9936:	f7ff f8f7 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d993a:	4641      	mov	r1, r8
   d993c:	f7ff f96a 	bl	d8c14 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d9940:	b13f      	cbz	r7, d9952 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d9942:	493d      	ldr	r1, [pc, #244]	; (d9a38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9944:	2201      	movs	r2, #1
   d9946:	a801      	add	r0, sp, #4
   d9948:	f7ff f8ee 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d994c:	4639      	mov	r1, r7
   d994e:	f7ff f961 	bl	d8c14 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d9952:	b13e      	cbz	r6, d9964 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d9954:	4939      	ldr	r1, [pc, #228]	; (d9a3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d9956:	2201      	movs	r2, #1
   d9958:	a801      	add	r0, sp, #4
   d995a:	f7ff f8e5 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d995e:	4631      	mov	r1, r6
   d9960:	f7ff f958 	bl	d8c14 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d9964:	7923      	ldrb	r3, [r4, #4]
   d9966:	07df      	lsls	r7, r3, #31
   d9968:	d50e      	bpl.n	d9988 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d996a:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d996c:	212f      	movs	r1, #47	; 0x2f
   d996e:	4630      	mov	r0, r6
   d9970:	f001 fe4e 	bl	db610 <strrchr>
    if (s1) {
   d9974:	b100      	cbz	r0, d9978 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d9976:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d9978:	4931      	ldr	r1, [pc, #196]	; (d9a40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d997a:	2201      	movs	r2, #1
   d997c:	a801      	add	r0, sp, #4
   d997e:	f7ff f8d3 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d9982:	4631      	mov	r1, r6
   d9984:	f7ff f946 	bl	d8c14 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d9988:	7923      	ldrb	r3, [r4, #4]
   d998a:	079e      	lsls	r6, r3, #30
   d998c:	d507      	bpl.n	d999e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d998e:	492d      	ldr	r1, [pc, #180]	; (d9a44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d9990:	2202      	movs	r2, #2
   d9992:	a801      	add	r0, sp, #4
   d9994:	f7ff f8c8 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d9998:	68e1      	ldr	r1, [r4, #12]
   d999a:	f7ff f849 	bl	d8a30 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d999e:	7923      	ldrb	r3, [r4, #4]
   d99a0:	0758      	lsls	r0, r3, #29
   d99a2:	d514      	bpl.n	d99ce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d99a4:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d99a6:	4633      	mov	r3, r6
   d99a8:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d99aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d99ae:	b12a      	cbz	r2, d99bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d99b0:	2a20      	cmp	r2, #32
   d99b2:	d101      	bne.n	d99b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d99b4:	461e      	mov	r6, r3
   d99b6:	e7f7      	b.n	d99a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d99b8:	2a28      	cmp	r2, #40	; 0x28
   d99ba:	d1f5      	bne.n	d99a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d99bc:	4922      	ldr	r1, [pc, #136]	; (d9a48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d99be:	2202      	movs	r2, #2
   d99c0:	a801      	add	r0, sp, #4
   d99c2:	f7ff f8b1 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d99c6:	1bba      	subs	r2, r7, r6
   d99c8:	4631      	mov	r1, r6
   d99ca:	f7ff f8bd 	bl	d8b48 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d99ce:	7923      	ldrb	r3, [r4, #4]
   d99d0:	0719      	lsls	r1, r3, #28
   d99d2:	d507      	bpl.n	d99e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d99d4:	491d      	ldr	r1, [pc, #116]	; (d9a4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d99d6:	2201      	movs	r2, #1
   d99d8:	a801      	add	r0, sp, #4
   d99da:	f7ff f8a5 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d99de:	6961      	ldr	r1, [r4, #20]
   d99e0:	f7ff f838 	bl	d8a54 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d99e4:	7923      	ldrb	r3, [r4, #4]
   d99e6:	06da      	lsls	r2, r3, #27
   d99e8:	d508      	bpl.n	d99fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d99ea:	2204      	movs	r2, #4
   d99ec:	4918      	ldr	r1, [pc, #96]	; (d9a50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d99ee:	eb0d 0002 	add.w	r0, sp, r2
   d99f2:	f7ff f899 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d99f6:	69a1      	ldr	r1, [r4, #24]
   d99f8:	f7ff f81a 	bl	d8a30 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d99fc:	7923      	ldrb	r3, [r4, #4]
   d99fe:	069b      	lsls	r3, r3, #26
   d9a00:	d507      	bpl.n	d9a12 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d9a02:	4914      	ldr	r1, [pc, #80]	; (d9a54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d9a04:	2206      	movs	r2, #6
   d9a06:	a801      	add	r0, sp, #4
   d9a08:	f7ff f88e 	bl	d8b28 <_ZN5spark10JSONWriter4nameEPKcj>
   d9a0c:	69e1      	ldr	r1, [r4, #28]
   d9a0e:	f7ff f901 	bl	d8c14 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d9a12:	a801      	add	r0, sp, #4
   d9a14:	f7fe ffe9 	bl	d89ea <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d9a18:	6a28      	ldr	r0, [r5, #32]
   d9a1a:	490f      	ldr	r1, [pc, #60]	; (d9a58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d9a1c:	6803      	ldr	r3, [r0, #0]
   d9a1e:	2202      	movs	r2, #2
   d9a20:	68db      	ldr	r3, [r3, #12]
   d9a22:	4798      	blx	r3
}
   d9a24:	b005      	add	sp, #20
   d9a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9a2a:	bf00      	nop
   d9a2c:	2003e5a0 	.word	0x2003e5a0
   d9a30:	000dc450 	.word	0x000dc450
   d9a34:	000dc3e4 	.word	0x000dc3e4
   d9a38:	000dc432 	.word	0x000dc432
   d9a3c:	000dc434 	.word	0x000dc434
   d9a40:	000db85b 	.word	0x000db85b
   d9a44:	000dc436 	.word	0x000dc436
   d9a48:	000dc439 	.word	0x000dc439
   d9a4c:	000dbae1 	.word	0x000dbae1
   d9a50:	000dc43c 	.word	0x000dc43c
   d9a54:	000dc441 	.word	0x000dc441
   d9a58:	000dc42f 	.word	0x000dc42f

000d9a5c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d9a5c:	2300      	movs	r3, #0
   d9a5e:	6840      	ldr	r0, [r0, #4]
   d9a60:	461a      	mov	r2, r3
   d9a62:	f7fd bf7d 	b.w	d7960 <network_connect>

000d9a66 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d9a66:	6840      	ldr	r0, [r0, #4]
   d9a68:	2200      	movs	r2, #0
   d9a6a:	2102      	movs	r1, #2
   d9a6c:	f7fd bf88 	b.w	d7980 <network_disconnect>

000d9a70 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d9a70:	2200      	movs	r2, #0
   d9a72:	6840      	ldr	r0, [r0, #4]
   d9a74:	4611      	mov	r1, r2
   d9a76:	f7fd bf7b 	b.w	d7970 <network_connecting>

000d9a7a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d9a7a:	2200      	movs	r2, #0
   d9a7c:	6840      	ldr	r0, [r0, #4]
   d9a7e:	4611      	mov	r1, r2
   d9a80:	f7fd bf86 	b.w	d7990 <network_ready>

000d9a84 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d9a84:	2300      	movs	r3, #0
   d9a86:	6840      	ldr	r0, [r0, #4]
   d9a88:	461a      	mov	r2, r3
   d9a8a:	4619      	mov	r1, r3
   d9a8c:	f7fd bf88 	b.w	d79a0 <network_on>

000d9a90 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d9a90:	2300      	movs	r3, #0
   d9a92:	6840      	ldr	r0, [r0, #4]
   d9a94:	461a      	mov	r2, r3
   d9a96:	4619      	mov	r1, r3
   d9a98:	f7fd bf8a 	b.w	d79b0 <network_off>

000d9a9c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d9a9c:	6840      	ldr	r0, [r0, #4]
   d9a9e:	2100      	movs	r1, #0
   d9aa0:	f7fd bfae 	b.w	d7a00 <network_is_on>

000d9aa4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d9aa4:	6840      	ldr	r0, [r0, #4]
   d9aa6:	2100      	movs	r1, #0
   d9aa8:	f7fd bfb2 	b.w	d7a10 <network_is_off>

000d9aac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d9aac:	6840      	ldr	r0, [r0, #4]
   d9aae:	2200      	movs	r2, #0
   d9ab0:	f081 0101 	eor.w	r1, r1, #1
   d9ab4:	f7fd bf84 	b.w	d79c0 <network_listen>

000d9ab8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d9ab8:	6840      	ldr	r0, [r0, #4]
   d9aba:	2200      	movs	r2, #0
   d9abc:	f7fd bf90 	b.w	d79e0 <network_set_listen_timeout>

000d9ac0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d9ac0:	2200      	movs	r2, #0
   d9ac2:	6840      	ldr	r0, [r0, #4]
   d9ac4:	4611      	mov	r1, r2
   d9ac6:	f7fd bf93 	b.w	d79f0 <network_get_listen_timeout>

000d9aca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d9aca:	2200      	movs	r2, #0
   d9acc:	6840      	ldr	r0, [r0, #4]
   d9ace:	4611      	mov	r1, r2
   d9ad0:	f7fd bf7e 	b.w	d79d0 <network_listening>

000d9ad4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d9ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d9ad8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d9ada:	b095      	sub	sp, #84	; 0x54
   d9adc:	4616      	mov	r6, r2
   d9ade:	460d      	mov	r5, r1
   d9ae0:	4607      	mov	r7, r0
    IPAddress addr;
   d9ae2:	f7fe fe23 	bl	d872c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d9ae6:	4621      	mov	r1, r4
   d9ae8:	2218      	movs	r2, #24
   d9aea:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d9aec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d9aee:	f001 fcbb 	bl	db468 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d9af2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d9af4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d9af8:	4621      	mov	r1, r4
   d9afa:	466b      	mov	r3, sp
   d9afc:	aa0c      	add	r2, sp, #48	; 0x30
   d9afe:	4630      	mov	r0, r6
   d9b00:	f7fd fd7c 	bl	d75fc <netdb_getaddrinfo>
    if (!r) {
   d9b04:	4604      	mov	r4, r0
   d9b06:	2800      	cmp	r0, #0
   d9b08:	d146      	bne.n	d9b98 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9b0a:	4602      	mov	r2, r0
   d9b0c:	2101      	movs	r1, #1
   d9b0e:	6868      	ldr	r0, [r5, #4]
   d9b10:	f7fd ff3e 	bl	d7990 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b14:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d9b16:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b18:	4622      	mov	r2, r4
   d9b1a:	6868      	ldr	r0, [r5, #4]
   d9b1c:	f7fd ff38 	bl	d7990 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b20:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d9b22:	4681      	mov	r9, r0
        bool ok = false;
   d9b24:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b26:	2e00      	cmp	r6, #0
   d9b28:	d036      	beq.n	d9b98 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d9b2a:	2900      	cmp	r1, #0
   d9b2c:	d134      	bne.n	d9b98 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d9b2e:	6873      	ldr	r3, [r6, #4]
   d9b30:	2b02      	cmp	r3, #2
   d9b32:	d003      	beq.n	d9b3c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d9b34:	2b0a      	cmp	r3, #10
   d9b36:	d00b      	beq.n	d9b50 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d9b38:	69f6      	ldr	r6, [r6, #28]
   d9b3a:	e7f4      	b.n	d9b26 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d9b3c:	f1b8 0f00 	cmp.w	r8, #0
   d9b40:	d004      	beq.n	d9b4c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d9b42:	6971      	ldr	r1, [r6, #20]
   d9b44:	4638      	mov	r0, r7
   d9b46:	3104      	adds	r1, #4
   d9b48:	f7fe fe1d 	bl	d8786 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d9b4c:	4641      	mov	r1, r8
   d9b4e:	e7f3      	b.n	d9b38 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d9b50:	f1b9 0f00 	cmp.w	r9, #0
   d9b54:	d101      	bne.n	d9b5a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d9b56:	4649      	mov	r1, r9
   d9b58:	e7ee      	b.n	d9b38 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d9b5a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d9b5c:	2210      	movs	r2, #16
   d9b5e:	a801      	add	r0, sp, #4
   d9b60:	f001 fc82 	bl	db468 <memset>
                    a.v = 6;
   d9b64:	2306      	movs	r3, #6
   d9b66:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d9b6a:	ad01      	add	r5, sp, #4
   d9b6c:	f104 0308 	add.w	r3, r4, #8
   d9b70:	3418      	adds	r4, #24
   d9b72:	6818      	ldr	r0, [r3, #0]
   d9b74:	6859      	ldr	r1, [r3, #4]
   d9b76:	462a      	mov	r2, r5
   d9b78:	c203      	stmia	r2!, {r0, r1}
   d9b7a:	3308      	adds	r3, #8
   d9b7c:	42a3      	cmp	r3, r4
   d9b7e:	4615      	mov	r5, r2
   d9b80:	d1f7      	bne.n	d9b72 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d9b82:	a901      	add	r1, sp, #4
   d9b84:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d9b86:	ad07      	add	r5, sp, #28
   d9b88:	f7fe fdde 	bl	d8748 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d9b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d9b8e:	1d3c      	adds	r4, r7, #4
   d9b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d9b92:	682b      	ldr	r3, [r5, #0]
   d9b94:	7023      	strb	r3, [r4, #0]
   d9b96:	e7de      	b.n	d9b56 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d9b98:	9800      	ldr	r0, [sp, #0]
   d9b9a:	f7fd fd27 	bl	d75ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d9b9e:	4638      	mov	r0, r7
   d9ba0:	b015      	add	sp, #84	; 0x54
   d9ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d9ba8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d9ba8:	4b02      	ldr	r3, [pc, #8]	; (d9bb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d9baa:	4a03      	ldr	r2, [pc, #12]	; (d9bb8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d9bac:	601a      	str	r2, [r3, #0]
   d9bae:	2200      	movs	r2, #0
   d9bb0:	605a      	str	r2, [r3, #4]

} // spark
   d9bb2:	4770      	bx	lr
   d9bb4:	2003e5a0 	.word	0x2003e5a0
   d9bb8:	000dc4c8 	.word	0x000dc4c8

000d9bbc <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d9bbc:	b508      	push	{r3, lr}
            return &Wire1;
   d9bbe:	f000 ff81 	bl	daac4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d9bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d9bc6:	f7fe bd39 	b.w	d863c <_ZN7TwoWire4lockEv>

000d9bca <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d9bca:	b510      	push	{r4, lr}
   d9bcc:	4604      	mov	r4, r0
    lock_(_lock)
   d9bce:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d9bd0:	b109      	cbz	r1, d9bd6 <_ZN4PMICC1Eb+0xc>
        lock();
   d9bd2:	f7ff fff3 	bl	d9bbc <_ZN4PMIC4lockEv.constprop.0>
}
   d9bd6:	4620      	mov	r0, r4
   d9bd8:	bd10      	pop	{r4, pc}

000d9bda <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d9bda:	b508      	push	{r3, lr}
            return &Wire1;
   d9bdc:	f000 ff72 	bl	daac4 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d9be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d9be4:	f7fe bd33 	b.w	d864e <_ZN7TwoWire6unlockEv>

000d9be8 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d9be8:	b510      	push	{r4, lr}
    if (lock_) {
   d9bea:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d9bec:	4604      	mov	r4, r0
    if (lock_) {
   d9bee:	b10b      	cbz	r3, d9bf4 <_ZN4PMICD1Ev+0xc>
        unlock();
   d9bf0:	f7ff fff3 	bl	d9bda <_ZN4PMIC6unlockEv>
}
   d9bf4:	4620      	mov	r0, r4
   d9bf6:	bd10      	pop	{r4, pc}

000d9bf8 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d9bf8:	b510      	push	{r4, lr}
   d9bfa:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d9bfc:	6800      	ldr	r0, [r0, #0]
   d9bfe:	f7ff ffec 	bl	d9bda <_ZN4PMIC6unlockEv>
   d9c02:	4620      	mov	r0, r4
   d9c04:	bd10      	pop	{r4, pc}

000d9c06 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d9c06:	b530      	push	{r4, r5, lr}
   d9c08:	b087      	sub	sp, #28
   d9c0a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9c0c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9c0e:	f7ff ffd5 	bl	d9bbc <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9c12:	236b      	movs	r3, #107	; 0x6b
   d9c14:	f88d 3008 	strb.w	r3, [sp, #8]
   d9c18:	2300      	movs	r3, #0
   d9c1a:	2401      	movs	r4, #1
   d9c1c:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d9c1e:	230a      	movs	r3, #10
   d9c20:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9c22:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d9c26:	f000 ff4d 	bl	daac4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9c2a:	a902      	add	r1, sp, #8
   d9c2c:	f7fe fcea 	bl	d8604 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9c30:	f000 ff48 	bl	daac4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d9c34:	6803      	ldr	r3, [r0, #0]
   d9c36:	4629      	mov	r1, r5
   d9c38:	689b      	ldr	r3, [r3, #8]
   d9c3a:	4798      	blx	r3
            return &Wire1;
   d9c3c:	f000 ff42 	bl	daac4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9c40:	4621      	mov	r1, r4
   d9c42:	f7fe fcf7 	bl	d8634 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d9c46:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d9c48:	f000 ff3c 	bl	daac4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d9c4c:	a902      	add	r1, sp, #8
   d9c4e:	f7fe fca9 	bl	d85a4 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d9c52:	f000 ff37 	bl	daac4 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d9c56:	6803      	ldr	r3, [r0, #0]
   d9c58:	695b      	ldr	r3, [r3, #20]
   d9c5a:	4798      	blx	r3
   d9c5c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d9c5e:	a801      	add	r0, sp, #4
   d9c60:	f7ff ffca 	bl	d9bf8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9c64:	b2e0      	uxtb	r0, r4
   d9c66:	b007      	add	sp, #28
   d9c68:	bd30      	pop	{r4, r5, pc}

000d9c6a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   d9c6a:	b570      	push	{r4, r5, r6, lr}
   d9c6c:	b086      	sub	sp, #24
   d9c6e:	4614      	mov	r4, r2
   d9c70:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9c72:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9c74:	f7ff ffa2 	bl	d9bbc <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9c78:	236b      	movs	r3, #107	; 0x6b
   d9c7a:	f88d 3008 	strb.w	r3, [sp, #8]
   d9c7e:	2300      	movs	r3, #0
   d9c80:	9303      	str	r3, [sp, #12]
   d9c82:	2601      	movs	r6, #1
    timeout_ = ms;
   d9c84:	230a      	movs	r3, #10
   d9c86:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d9c88:	f88d 6010 	strb.w	r6, [sp, #16]
            return &Wire1;
   d9c8c:	f000 ff1a 	bl	daac4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d9c90:	a902      	add	r1, sp, #8
   d9c92:	f7fe fcb7 	bl	d8604 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d9c96:	f000 ff15 	bl	daac4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   d9c9a:	6803      	ldr	r3, [r0, #0]
   d9c9c:	4629      	mov	r1, r5
   d9c9e:	689b      	ldr	r3, [r3, #8]
   d9ca0:	4798      	blx	r3
            return &Wire1;
   d9ca2:	f000 ff0f 	bl	daac4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   d9ca6:	6803      	ldr	r3, [r0, #0]
   d9ca8:	4621      	mov	r1, r4
   d9caa:	689b      	ldr	r3, [r3, #8]
   d9cac:	4798      	blx	r3
            return &Wire1;
   d9cae:	f000 ff09 	bl	daac4 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d9cb2:	4631      	mov	r1, r6
   d9cb4:	f7fe fcbe 	bl	d8634 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   d9cb8:	a801      	add	r0, sp, #4
   d9cba:	f7ff ff9d 	bl	d9bf8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9cbe:	b006      	add	sp, #24
   d9cc0:	bd70      	pop	{r4, r5, r6, pc}

000d9cc2 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   d9cc2:	b513      	push	{r0, r1, r4, lr}
   d9cc4:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9cc6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9cc8:	f7ff ff78 	bl	d9bbc <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d9ccc:	2101      	movs	r1, #1
   d9cce:	4620      	mov	r0, r4
   d9cd0:	f7ff ff99 	bl	d9c06 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
   d9cd4:	f000 00cf 	and.w	r0, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
   d9cd8:	f040 0210 	orr.w	r2, r0, #16
   d9cdc:	2101      	movs	r1, #1
   d9cde:	4620      	mov	r0, r4
   d9ce0:	f7ff ffc3 	bl	d9c6a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d9ce4:	a801      	add	r0, sp, #4
   d9ce6:	f7ff ff87 	bl	d9bf8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9cea:	2001      	movs	r0, #1
   d9cec:	b002      	add	sp, #8
   d9cee:	bd10      	pop	{r4, pc}

000d9cf0 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   d9cf0:	b513      	push	{r0, r1, r4, lr}
   d9cf2:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d9cf4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d9cf6:	f7ff ff61 	bl	d9bbc <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   d9cfa:	2101      	movs	r1, #1
   d9cfc:	4620      	mov	r0, r4
   d9cfe:	f7ff ff82 	bl	d9c06 <_ZN4PMIC12readRegisterEh>
    writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   d9d02:	2101      	movs	r1, #1
   d9d04:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   d9d08:	4620      	mov	r0, r4
   d9d0a:	f7ff ffae 	bl	d9c6a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   d9d0e:	a801      	add	r0, sp, #4
   d9d10:	f7ff ff72 	bl	d9bf8 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d9d14:	2001      	movs	r0, #1
   d9d16:	b002      	add	sp, #8
   d9d18:	bd10      	pop	{r4, pc}

000d9d1a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d9d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9d1c:	4606      	mov	r6, r0
   d9d1e:	460d      	mov	r5, r1
  size_t n = 0;
   d9d20:	188f      	adds	r7, r1, r2
   d9d22:	2400      	movs	r4, #0
  while (size--) {
   d9d24:	42bd      	cmp	r5, r7
   d9d26:	d00c      	beq.n	d9d42 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d9d28:	6833      	ldr	r3, [r6, #0]
   d9d2a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d9d2e:	689b      	ldr	r3, [r3, #8]
   d9d30:	4630      	mov	r0, r6
   d9d32:	4798      	blx	r3
     if (chunk>=0)
   d9d34:	1e03      	subs	r3, r0, #0
   d9d36:	db01      	blt.n	d9d3c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d9d38:	441c      	add	r4, r3
  while (size--) {
   d9d3a:	e7f3      	b.n	d9d24 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d9d3c:	2c00      	cmp	r4, #0
   d9d3e:	bf08      	it	eq
   d9d40:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d9d42:	4620      	mov	r0, r4
   d9d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9d46 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d9d46:	b513      	push	{r0, r1, r4, lr}
   d9d48:	4604      	mov	r4, r0
    }
   d9d4a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d9d4c:	b159      	cbz	r1, d9d66 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d9d4e:	9101      	str	r1, [sp, #4]
   d9d50:	f001 fc31 	bl	db5b6 <strlen>
   d9d54:	6823      	ldr	r3, [r4, #0]
   d9d56:	9901      	ldr	r1, [sp, #4]
   d9d58:	68db      	ldr	r3, [r3, #12]
   d9d5a:	4602      	mov	r2, r0
   d9d5c:	4620      	mov	r0, r4
    }
   d9d5e:	b002      	add	sp, #8
   d9d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d9d64:	4718      	bx	r3
    }
   d9d66:	b002      	add	sp, #8
   d9d68:	bd10      	pop	{r4, pc}

000d9d6a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d9d6a:	b508      	push	{r3, lr}
  return write(str);
   d9d6c:	f7ff ffeb 	bl	d9d46 <_ZN5Print5writeEPKc>
}
   d9d70:	bd08      	pop	{r3, pc}

000d9d72 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d9d72:	6803      	ldr	r3, [r0, #0]
   d9d74:	689b      	ldr	r3, [r3, #8]
   d9d76:	4718      	bx	r3

000d9d78 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d9d78:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d9d7a:	210d      	movs	r1, #13
{
   d9d7c:	4605      	mov	r5, r0
  size_t n = print('\r');
   d9d7e:	f7ff fff8 	bl	d9d72 <_ZN5Print5printEc>
  n += print('\n');
   d9d82:	210a      	movs	r1, #10
  size_t n = print('\r');
   d9d84:	4604      	mov	r4, r0
  n += print('\n');
   d9d86:	4628      	mov	r0, r5
   d9d88:	f7ff fff3 	bl	d9d72 <_ZN5Print5printEc>
  return n;
}
   d9d8c:	4420      	add	r0, r4
   d9d8e:	bd38      	pop	{r3, r4, r5, pc}

000d9d90 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d9d90:	b530      	push	{r4, r5, lr}
   d9d92:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d9d94:	2300      	movs	r3, #0
   d9d96:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d9d9a:	2a01      	cmp	r2, #1
   d9d9c:	bf98      	it	ls
   d9d9e:	220a      	movls	r2, #10
   d9da0:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d9da2:	460d      	mov	r5, r1
   d9da4:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d9da8:	fb01 5312 	mls	r3, r1, r2, r5
   d9dac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9db0:	2b09      	cmp	r3, #9
   d9db2:	bf94      	ite	ls
   d9db4:	3330      	addls	r3, #48	; 0x30
   d9db6:	3337      	addhi	r3, #55	; 0x37
   d9db8:	b2db      	uxtb	r3, r3
  } while(n);
   d9dba:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d9dbc:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d9dc0:	d9ef      	bls.n	d9da2 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d9dc2:	4621      	mov	r1, r4
   d9dc4:	f7ff ffbf 	bl	d9d46 <_ZN5Print5writeEPKc>
}
   d9dc8:	b00b      	add	sp, #44	; 0x2c
   d9dca:	bd30      	pop	{r4, r5, pc}

000d9dcc <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d9dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9dd0:	b086      	sub	sp, #24
   d9dd2:	af00      	add	r7, sp, #0
   d9dd4:	4605      	mov	r5, r0
   d9dd6:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d9dd8:	1d38      	adds	r0, r7, #4
   d9dda:	2114      	movs	r1, #20
{
   d9ddc:	4614      	mov	r4, r2
    va_copy(args2, args);
   d9dde:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d9de0:	f7fd fe46 	bl	d7a70 <vsnprintf>

    if (n<bufsize)
   d9de4:	2813      	cmp	r0, #19
   d9de6:	d80e      	bhi.n	d9e06 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d9de8:	1d39      	adds	r1, r7, #4
   d9dea:	4628      	mov	r0, r5
   d9dec:	f7ff ffab 	bl	d9d46 <_ZN5Print5writeEPKc>
   d9df0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d9df2:	b11e      	cbz	r6, d9dfc <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d9df4:	4628      	mov	r0, r5
   d9df6:	f7ff ffbf 	bl	d9d78 <_ZN5Print7printlnEv>
   d9dfa:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d9dfc:	4620      	mov	r0, r4
   d9dfe:	3718      	adds	r7, #24
   d9e00:	46bd      	mov	sp, r7
   d9e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d9e06:	f100 0308 	add.w	r3, r0, #8
   d9e0a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d9e0e:	46e8      	mov	r8, sp
        char bigger[n+1];
   d9e10:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d9e14:	4622      	mov	r2, r4
   d9e16:	1c41      	adds	r1, r0, #1
   d9e18:	683b      	ldr	r3, [r7, #0]
   d9e1a:	4668      	mov	r0, sp
   d9e1c:	f7fd fe28 	bl	d7a70 <vsnprintf>
  return write(str);
   d9e20:	4669      	mov	r1, sp
   d9e22:	4628      	mov	r0, r5
   d9e24:	f7ff ff8f 	bl	d9d46 <_ZN5Print5writeEPKc>
   d9e28:	4604      	mov	r4, r0
   d9e2a:	46c5      	mov	sp, r8
   d9e2c:	e7e1      	b.n	d9df2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d9e2e <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d9e2e:	b510      	push	{r4, lr}
  if (0 == max) {
   d9e30:	4604      	mov	r4, r0
   d9e32:	b128      	cbz	r0, d9e40 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d9e34:	f001 fb44 	bl	db4c0 <rand>
   d9e38:	fb90 f3f4 	sdiv	r3, r0, r4
   d9e3c:	fb03 0414 	mls	r4, r3, r4, r0
}
   d9e40:	4620      	mov	r0, r4
   d9e42:	bd10      	pop	{r4, pc}

000d9e44 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d9e44:	4288      	cmp	r0, r1
{
   d9e46:	b510      	push	{r4, lr}
   d9e48:	4604      	mov	r4, r0
  if (min >= max) {
   d9e4a:	da03      	bge.n	d9e54 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d9e4c:	1a08      	subs	r0, r1, r0
   d9e4e:	f7ff ffee 	bl	d9e2e <_Z6randomi>
   d9e52:	4404      	add	r4, r0
}
   d9e54:	4620      	mov	r0, r4
   d9e56:	bd10      	pop	{r4, pc}

000d9e58 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   d9e58:	f001 bb0e 	b.w	db478 <srand>

000d9e5c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d9e5c:	4b01      	ldr	r3, [pc, #4]	; (d9e64 <_GLOBAL__sub_I_RGB+0x8>)
   d9e5e:	2200      	movs	r2, #0
   d9e60:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d9e62:	4770      	bx	lr
   d9e64:	2003e5a8 	.word	0x2003e5a8

000d9e68 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d9e68:	2100      	movs	r1, #0
   d9e6a:	f7fd bc07 	b.w	d767c <hal_spi_acquire>

000d9e6e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d9e6e:	2100      	movs	r1, #0
   d9e70:	f7fd bc0c 	b.w	d768c <hal_spi_release>

000d9e74 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d9e74:	b510      	push	{r4, lr}
   d9e76:	4604      	mov	r4, r0
   d9e78:	4608      	mov	r0, r1
{
    _spi = spi;
   d9e7a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d9e7c:	f7fd fbde 	bl	d763c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d9e80:	2300      	movs	r3, #0
   d9e82:	6063      	str	r3, [r4, #4]
}
   d9e84:	4620      	mov	r0, r4
   d9e86:	bd10      	pop	{r4, pc}

000d9e88 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d9e88:	b510      	push	{r4, lr}
   d9e8a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d9e8c:	7800      	ldrb	r0, [r0, #0]
   d9e8e:	f7ff ffeb 	bl	d9e68 <_ZN8SPIClass4lockEv.isra.0>
   d9e92:	b948      	cbnz	r0, d9ea8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d9e94:	7820      	ldrb	r0, [r4, #0]
   d9e96:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d9e9a:	f7fd fbb7 	bl	d760c <hal_spi_begin>
        unlock();
   d9e9e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9ea4:	f7ff bfe3 	b.w	d9e6e <_ZN8SPIClass6unlockEv.isra.0>
}
   d9ea8:	bd10      	pop	{r4, pc}

000d9eaa <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   d9eaa:	b510      	push	{r4, lr}
   d9eac:	4604      	mov	r4, r0
    if (!lock())
   d9eae:	7800      	ldrb	r0, [r0, #0]
   d9eb0:	f7ff ffda 	bl	d9e68 <_ZN8SPIClass4lockEv.isra.0>
   d9eb4:	b938      	cbnz	r0, d9ec6 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   d9eb6:	7820      	ldrb	r0, [r4, #0]
   d9eb8:	f7fd fbb0 	bl	d761c <hal_spi_end>
        unlock();
   d9ebc:	7820      	ldrb	r0, [r4, #0]
    }
}
   d9ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d9ec2:	f7ff bfd4 	b.w	d9e6e <_ZN8SPIClass6unlockEv.isra.0>
}
   d9ec6:	bd10      	pop	{r4, pc}

000d9ec8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d9ec8:	7800      	ldrb	r0, [r0, #0]
   d9eca:	f7ff bfd0 	b.w	d9e6e <_ZN8SPIClass6unlockEv.isra.0>
	...

000d9ed0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d9ed0:	0840      	lsrs	r0, r0, #1
{
   d9ed2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d9ed4:	6018      	str	r0, [r3, #0]
   d9ed6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d9ed8:	6818      	ldr	r0, [r3, #0]
   d9eda:	4288      	cmp	r0, r1
   d9edc:	b2e5      	uxtb	r5, r4
   d9ede:	d906      	bls.n	d9eee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d9ee0:	3401      	adds	r4, #1
   d9ee2:	2c08      	cmp	r4, #8
   d9ee4:	d002      	beq.n	d9eec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d9ee6:	0840      	lsrs	r0, r0, #1
   d9ee8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d9eea:	e7f5      	b.n	d9ed8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d9eec:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d9eee:	4b02      	ldr	r3, [pc, #8]	; (d9ef8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d9ef0:	5d5b      	ldrb	r3, [r3, r5]
   d9ef2:	7013      	strb	r3, [r2, #0]
}
   d9ef4:	bd30      	pop	{r4, r5, pc}
   d9ef6:	bf00      	nop
   d9ef8:	000dc4fc 	.word	0x000dc4fc

000d9efc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d9efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9f00:	4606      	mov	r6, r0
   d9f02:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d9f04:	7800      	ldrb	r0, [r0, #0]
{
   d9f06:	460c      	mov	r4, r1
    CHECK(lock());
   d9f08:	f7ff ffae 	bl	d9e68 <_ZN8SPIClass4lockEv.isra.0>
   d9f0c:	2800      	cmp	r0, #0
   d9f0e:	db1b      	blt.n	d9f48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d9f10:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d9f12:	2214      	movs	r2, #20
   d9f14:	2100      	movs	r1, #0
   d9f16:	a809      	add	r0, sp, #36	; 0x24
   d9f18:	f001 faa6 	bl	db468 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d9f1c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d9f1e:	2200      	movs	r2, #0
   d9f20:	a909      	add	r1, sp, #36	; 0x24
   d9f22:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d9f24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d9f28:	f7fd fb98 	bl	d765c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d9f2c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d9f30:	b113      	cbz	r3, d9f38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d9f32:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d9f36:	b155      	cbz	r5, d9f4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d9f38:	2700      	movs	r7, #0
   d9f3a:	46b9      	mov	r9, r7
   d9f3c:	46b8      	mov	r8, r7
   d9f3e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d9f40:	7923      	ldrb	r3, [r4, #4]
   d9f42:	b15d      	cbz	r5, d9f5c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d9f44:	b1c3      	cbz	r3, d9f78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d9f46:	2000      	movs	r0, #0
}
   d9f48:	b00f      	add	sp, #60	; 0x3c
   d9f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d9f4e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d9f52:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d9f56:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d9f5a:	e7f1      	b.n	d9f40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d9f5c:	2b00      	cmp	r3, #0
   d9f5e:	d135      	bne.n	d9fcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d9f60:	68a3      	ldr	r3, [r4, #8]
   d9f62:	4543      	cmp	r3, r8
   d9f64:	d108      	bne.n	d9f78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d9f66:	f88d 9020 	strb.w	r9, [sp, #32]
   d9f6a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9f6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9f72:	89a3      	ldrh	r3, [r4, #12]
   d9f74:	429a      	cmp	r2, r3
   d9f76:	d0e6      	beq.n	d9f46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d9f78:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9f7a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d9f7c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d9f80:	980a      	ldr	r0, [sp, #40]	; 0x28
   d9f82:	ab04      	add	r3, sp, #16
   d9f84:	f10d 020f 	add.w	r2, sp, #15
   d9f88:	f7ff ffa2 	bl	d9ed0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d9f8c:	7921      	ldrb	r1, [r4, #4]
   d9f8e:	b985      	cbnz	r5, d9fb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d9f90:	b989      	cbnz	r1, d9fb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9f92:	68a3      	ldr	r3, [r4, #8]
   d9f94:	4543      	cmp	r3, r8
   d9f96:	d30e      	bcc.n	d9fb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d9f98:	f88d 9020 	strb.w	r9, [sp, #32]
   d9f9c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d9fa0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d9fa4:	89a3      	ldrh	r3, [r4, #12]
   d9fa6:	429a      	cmp	r2, r3
   d9fa8:	d105      	bne.n	d9fb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d9faa:	9b04      	ldr	r3, [sp, #16]
   d9fac:	4543      	cmp	r3, r8
   d9fae:	d102      	bne.n	d9fb6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d9fb0:	e7c9      	b.n	d9f46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d9fb2:	2900      	cmp	r1, #0
   d9fb4:	d1f9      	bne.n	d9faa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d9fb6:	2300      	movs	r3, #0
   d9fb8:	9301      	str	r3, [sp, #4]
   d9fba:	7b63      	ldrb	r3, [r4, #13]
   d9fbc:	9300      	str	r3, [sp, #0]
   d9fbe:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d9fc2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d9fc4:	7830      	ldrb	r0, [r6, #0]
   d9fc6:	f7fd fb51 	bl	d766c <hal_spi_set_settings>
   d9fca:	e7bc      	b.n	d9f46 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d9fcc:	e9cd 5500 	strd	r5, r5, [sp]
   d9fd0:	462b      	mov	r3, r5
   d9fd2:	462a      	mov	r2, r5
   d9fd4:	2101      	movs	r1, #1
   d9fd6:	e7f5      	b.n	d9fc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d9fd8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d9fd8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d9fda:	7800      	ldrb	r0, [r0, #0]
   d9fdc:	f7fd fb26 	bl	d762c <hal_spi_transfer>
}
   d9fe0:	b2c0      	uxtb	r0, r0
   d9fe2:	bd08      	pop	{r3, pc}

000d9fe4 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   d9fe4:	4770      	bx	lr

000d9fe6 <_ZN8SPIClass15detachInterruptEv>:
   d9fe6:	4770      	bx	lr

000d9fe8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d9fe8:	b510      	push	{r4, lr}
   d9fea:	4604      	mov	r4, r0
{
	free(buffer);
   d9fec:	6800      	ldr	r0, [r0, #0]
   d9fee:	f7fd fd1f 	bl	d7a30 <free>
}
   d9ff2:	4620      	mov	r0, r4
   d9ff4:	bd10      	pop	{r4, pc}

000d9ff6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d9ff6:	b510      	push	{r4, lr}
   d9ff8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d9ffa:	6800      	ldr	r0, [r0, #0]
   d9ffc:	b108      	cbz	r0, da002 <_ZN6String10invalidateEv+0xc>
   d9ffe:	f7fd fd17 	bl	d7a30 <free>
	buffer = NULL;
   da002:	2300      	movs	r3, #0
	capacity = len = 0;
   da004:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   da008:	6023      	str	r3, [r4, #0]
}
   da00a:	bd10      	pop	{r4, pc}

000da00c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da00c:	b538      	push	{r3, r4, r5, lr}
   da00e:	4604      	mov	r4, r0
   da010:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da012:	6800      	ldr	r0, [r0, #0]
   da014:	3101      	adds	r1, #1
   da016:	f7fd fd13 	bl	d7a40 <realloc>
	if (newbuffer) {
   da01a:	b110      	cbz	r0, da022 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da01c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   da020:	2001      	movs	r0, #1
	}
	return 0;
}
   da022:	bd38      	pop	{r3, r4, r5, pc}

000da024 <_ZN6String7reserveEj>:
{
   da024:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da026:	6803      	ldr	r3, [r0, #0]
{
   da028:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da02a:	b123      	cbz	r3, da036 <_ZN6String7reserveEj+0x12>
   da02c:	6843      	ldr	r3, [r0, #4]
   da02e:	428b      	cmp	r3, r1
   da030:	d301      	bcc.n	da036 <_ZN6String7reserveEj+0x12>
   da032:	2001      	movs	r0, #1
}
   da034:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   da036:	4620      	mov	r0, r4
   da038:	f7ff ffe8 	bl	da00c <_ZN6String12changeBufferEj>
   da03c:	2800      	cmp	r0, #0
   da03e:	d0f9      	beq.n	da034 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   da040:	68a3      	ldr	r3, [r4, #8]
   da042:	2b00      	cmp	r3, #0
   da044:	d1f5      	bne.n	da032 <_ZN6String7reserveEj+0xe>
   da046:	6822      	ldr	r2, [r4, #0]
   da048:	7013      	strb	r3, [r2, #0]
   da04a:	e7f2      	b.n	da032 <_ZN6String7reserveEj+0xe>

000da04c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da04e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   da050:	4611      	mov	r1, r2
   da052:	9201      	str	r2, [sp, #4]
{
   da054:	4604      	mov	r4, r0
	if (!reserve(length)) {
   da056:	f7ff ffe5 	bl	da024 <_ZN6String7reserveEj>
   da05a:	9a01      	ldr	r2, [sp, #4]
   da05c:	b928      	cbnz	r0, da06a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   da05e:	4620      	mov	r0, r4
   da060:	f7ff ffc9 	bl	d9ff6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   da064:	4620      	mov	r0, r4
   da066:	b003      	add	sp, #12
   da068:	bd30      	pop	{r4, r5, pc}
	len = length;
   da06a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   da06c:	4629      	mov	r1, r5
   da06e:	6820      	ldr	r0, [r4, #0]
   da070:	f001 f9d2 	bl	db418 <memcpy>
	buffer[len] = 0;
   da074:	6822      	ldr	r2, [r4, #0]
   da076:	68a3      	ldr	r3, [r4, #8]
   da078:	2100      	movs	r1, #0
   da07a:	54d1      	strb	r1, [r2, r3]
	return *this;
   da07c:	e7f2      	b.n	da064 <_ZN6String4copyEPKcj+0x18>

000da07e <_ZN6StringC1EPKc>:
	buffer = NULL;
   da07e:	2300      	movs	r3, #0
String::String(const char *cstr)
   da080:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   da082:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   da086:	4604      	mov	r4, r0
	len = 0;
   da088:	6083      	str	r3, [r0, #8]
	flags = 0;
   da08a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   da08c:	b141      	cbz	r1, da0a0 <_ZN6StringC1EPKc+0x22>
   da08e:	4608      	mov	r0, r1
   da090:	9101      	str	r1, [sp, #4]
   da092:	f001 fa90 	bl	db5b6 <strlen>
   da096:	9901      	ldr	r1, [sp, #4]
   da098:	4602      	mov	r2, r0
   da09a:	4620      	mov	r0, r4
   da09c:	f7ff ffd6 	bl	da04c <_ZN6String4copyEPKcj>
}
   da0a0:	4620      	mov	r0, r4
   da0a2:	b002      	add	sp, #8
   da0a4:	bd10      	pop	{r4, pc}

000da0a6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da0a6:	b538      	push	{r3, r4, r5, lr}
   da0a8:	4605      	mov	r5, r0
	if (buffer) {
   da0aa:	6800      	ldr	r0, [r0, #0]
{
   da0ac:	460c      	mov	r4, r1
	if (buffer) {
   da0ae:	b168      	cbz	r0, da0cc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   da0b0:	686a      	ldr	r2, [r5, #4]
   da0b2:	688b      	ldr	r3, [r1, #8]
   da0b4:	429a      	cmp	r2, r3
   da0b6:	d307      	bcc.n	da0c8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   da0b8:	6809      	ldr	r1, [r1, #0]
   da0ba:	f001 fa56 	bl	db56a <strcpy>
			len = rhs.len;
   da0be:	68a3      	ldr	r3, [r4, #8]
   da0c0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   da0c2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   da0c4:	60a3      	str	r3, [r4, #8]
}
   da0c6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   da0c8:	f7fd fcb2 	bl	d7a30 <free>
	buffer = rhs.buffer;
   da0cc:	6823      	ldr	r3, [r4, #0]
   da0ce:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da0d0:	6863      	ldr	r3, [r4, #4]
   da0d2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da0d4:	68a3      	ldr	r3, [r4, #8]
   da0d6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da0d8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   da0da:	e9c4 3300 	strd	r3, r3, [r4]
   da0de:	e7f1      	b.n	da0c4 <_ZN6String4moveERS_+0x1e>

000da0e0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   da0e0:	b510      	push	{r4, lr}
	buffer = NULL;
   da0e2:	2300      	movs	r3, #0
	capacity = 0;
   da0e4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   da0e8:	4604      	mov	r4, r0
	len = 0;
   da0ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   da0ec:	7303      	strb	r3, [r0, #12]
	move(rval);
   da0ee:	f7ff ffda 	bl	da0a6 <_ZN6String4moveERS_>
}
   da0f2:	4620      	mov	r0, r4
   da0f4:	bd10      	pop	{r4, pc}

000da0f6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da0f6:	4288      	cmp	r0, r1
{
   da0f8:	b510      	push	{r4, lr}
   da0fa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da0fc:	d005      	beq.n	da10a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da0fe:	680b      	ldr	r3, [r1, #0]
   da100:	b12b      	cbz	r3, da10e <_ZN6StringaSERKS_+0x18>
   da102:	688a      	ldr	r2, [r1, #8]
   da104:	4619      	mov	r1, r3
   da106:	f7ff ffa1 	bl	da04c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   da10a:	4620      	mov	r0, r4
   da10c:	bd10      	pop	{r4, pc}
	else invalidate();
   da10e:	f7ff ff72 	bl	d9ff6 <_ZN6String10invalidateEv>
   da112:	e7fa      	b.n	da10a <_ZN6StringaSERKS_+0x14>

000da114 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   da114:	b510      	push	{r4, lr}
	buffer = NULL;
   da116:	2300      	movs	r3, #0
String::String(const String &value)
   da118:	4604      	mov	r4, r0
	capacity = 0;
   da11a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   da11e:	6083      	str	r3, [r0, #8]
	flags = 0;
   da120:	7303      	strb	r3, [r0, #12]
	*this = value;
   da122:	f7ff ffe8 	bl	da0f6 <_ZN6StringaSERKS_>
}
   da126:	4620      	mov	r0, r4
   da128:	bd10      	pop	{r4, pc}

000da12a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   da12a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da12c:	6882      	ldr	r2, [r0, #8]
   da12e:	b93a      	cbnz	r2, da140 <_ZNK6String6equalsEPKc+0x16>
   da130:	b121      	cbz	r1, da13c <_ZNK6String6equalsEPKc+0x12>
   da132:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   da134:	fab0 f080 	clz	r0, r0
   da138:	0940      	lsrs	r0, r0, #5
   da13a:	e000      	b.n	da13e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   da13c:	2001      	movs	r0, #1
}
   da13e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   da140:	6800      	ldr	r0, [r0, #0]
   da142:	b909      	cbnz	r1, da148 <_ZNK6String6equalsEPKc+0x1e>
   da144:	7800      	ldrb	r0, [r0, #0]
   da146:	e7f5      	b.n	da134 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   da148:	f001 fa05 	bl	db556 <strcmp>
   da14c:	e7f2      	b.n	da134 <_ZNK6String6equalsEPKc+0xa>
	...

000da150 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   da150:	b40e      	push	{r1, r2, r3}
   da152:	b570      	push	{r4, r5, r6, lr}
   da154:	b087      	sub	sp, #28
   da156:	ad0b      	add	r5, sp, #44	; 0x2c
   da158:	4604      	mov	r4, r0
   da15a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da15e:	9201      	str	r2, [sp, #4]
   da160:	462b      	mov	r3, r5
   da162:	2105      	movs	r1, #5
   da164:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   da166:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da168:	f7fd fc82 	bl	d7a70 <vsnprintf>
    va_end(marker);

    String result;
   da16c:	490b      	ldr	r1, [pc, #44]	; (da19c <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   da16e:	4606      	mov	r6, r0
    String result;
   da170:	4620      	mov	r0, r4
   da172:	f7ff ff84 	bl	da07e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   da176:	4631      	mov	r1, r6
   da178:	4620      	mov	r0, r4
   da17a:	f7ff ff53 	bl	da024 <_ZN6String7reserveEj>
    if (result.buffer) {
   da17e:	6820      	ldr	r0, [r4, #0]
   da180:	b130      	cbz	r0, da190 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da182:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   da184:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   da186:	462b      	mov	r3, r5
   da188:	1c71      	adds	r1, r6, #1
   da18a:	f7fd fc71 	bl	d7a70 <vsnprintf>
        va_end(marker);
        result.len = n;
   da18e:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   da190:	4620      	mov	r0, r4
   da192:	b007      	add	sp, #28
   da194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   da198:	b003      	add	sp, #12
   da19a:	4770      	bx	lr
   da19c:	000dc431 	.word	0x000dc431

000da1a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   da1a0:	b510      	push	{r4, lr}
   da1a2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   da1a4:	6800      	ldr	r0, [r0, #0]
   da1a6:	b118      	cbz	r0, da1b0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   da1a8:	f7fd fc42 	bl	d7a30 <free>
            wakeupSource_ = nullptr;
   da1ac:	2300      	movs	r3, #0
   da1ae:	6023      	str	r3, [r4, #0]
        }
    }
   da1b0:	bd10      	pop	{r4, pc}

000da1b2 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da1b2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   da1b4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   da1b8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   da1ba:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da1bc:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   da1be:	f853 2f06 	ldr.w	r2, [r3, #6]!
   da1c2:	f8c0 2006 	str.w	r2, [r0, #6]
   da1c6:	889b      	ldrh	r3, [r3, #4]
   da1c8:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   da1ca:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   da1cc:	f7ff ffe8 	bl	da1a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   da1d0:	682b      	ldr	r3, [r5, #0]
   da1d2:	b113      	cbz	r3, da1da <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   da1d4:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   da1d6:	2300      	movs	r3, #0
   da1d8:	602b      	str	r3, [r5, #0]
    }
   da1da:	4620      	mov	r0, r4
   da1dc:	bd38      	pop	{r3, r4, r5, pc}
	...

000da1e0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   da1e0:	b538      	push	{r3, r4, r5, lr}
   da1e2:	460c      	mov	r4, r1
   da1e4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   da1e6:	f7ff ffdb 	bl	da1a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   da1ea:	b144      	cbz	r4, da1fe <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   da1ec:	8820      	ldrh	r0, [r4, #0]
   da1ee:	f7fd fc17 	bl	d7a20 <malloc>
   da1f2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   da1f4:	b128      	cbz	r0, da202 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   da1f6:	8822      	ldrh	r2, [r4, #0]
   da1f8:	4621      	mov	r1, r4
   da1fa:	f001 f90d 	bl	db418 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   da1fe:	2000      	movs	r0, #0
    }
   da200:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   da202:	4801      	ldr	r0, [pc, #4]	; (da208 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   da204:	e7fc      	b.n	da200 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   da206:	bf00      	nop
   da208:	fffffefc 	.word	0xfffffefc

000da20c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   da20c:	b5f0      	push	{r4, r5, r6, r7, lr}
   da20e:	4d2d      	ldr	r5, [pc, #180]	; (da2c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   da210:	7d0b      	ldrb	r3, [r1, #20]
   da212:	4604      	mov	r4, r0
   da214:	b08b      	sub	sp, #44	; 0x2c
   da216:	4608      	mov	r0, r1
   da218:	1daf      	adds	r7, r5, #6
   da21a:	2b00      	cmp	r3, #0
   da21c:	d038      	beq.n	da290 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   da21e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   da220:	791b      	ldrb	r3, [r3, #4]
   da222:	2b00      	cmp	r3, #0
   da224:	d034      	beq.n	da290 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   da226:	2200      	movs	r2, #0
    SleepResult() {}
   da228:	4b27      	ldr	r3, [pc, #156]	; (da2c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da22a:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   da22c:	a902      	add	r1, sp, #8
   da22e:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   da230:	9202      	str	r2, [sp, #8]
   da232:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   da236:	f88d 200e 	strb.w	r2, [sp, #14]
   da23a:	f7fd fb57 	bl	d78ec <system_sleep_ext>
        compatResult_ = result.compatResult_;
   da23e:	f8dd 300e 	ldr.w	r3, [sp, #14]
   da242:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   da246:	b200      	sxth	r0, r0
   da248:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   da24c:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   da250:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   da252:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   da254:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da256:	4628      	mov	r0, r5
   da258:	f7ff ffc2 	bl	da1e0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   da25c:	a802      	add	r0, sp, #8
   da25e:	f7ff ff9f 	bl	da1a0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   da262:	2300      	movs	r3, #0
   da264:	6023      	str	r3, [r4, #0]
   da266:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   da268:	71a3      	strb	r3, [r4, #6]
   da26a:	8123      	strh	r3, [r4, #8]
   da26c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   da270:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   da272:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   da276:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   da278:	683b      	ldr	r3, [r7, #0]
   da27a:	f8c4 3006 	str.w	r3, [r4, #6]
   da27e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   da280:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   da282:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   da284:	4620      	mov	r0, r4
   da286:	f7ff ffab 	bl	da1e0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   da28a:	4620      	mov	r0, r4
   da28c:	b00b      	add	sp, #44	; 0x2c
   da28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   da290:	2600      	movs	r6, #0
   da292:	2320      	movs	r3, #32
   da294:	e9cd 3602 	strd	r3, r6, [sp, #8]
   da298:	4b0c      	ldr	r3, [pc, #48]	; (da2cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   da29a:	9300      	str	r3, [sp, #0]
   da29c:	490c      	ldr	r1, [pc, #48]	; (da2d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   da29e:	4633      	mov	r3, r6
   da2a0:	aa02      	add	r2, sp, #8
   da2a2:	2032      	movs	r0, #50	; 0x32
   da2a4:	f7fd fa92 	bl	d77cc <log_message>
    SleepResult() {}
   da2a8:	4b07      	ldr	r3, [pc, #28]	; (da2c8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   da2aa:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   da2ac:	a902      	add	r1, sp, #8
        error_ = error;
   da2ae:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   da2b2:	4804      	ldr	r0, [pc, #16]	; (da2c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   da2b4:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   da2b6:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   da2ba:	f8ad 300c 	strh.w	r3, [sp, #12]
   da2be:	f7ff ff78 	bl	da1b2 <_ZN17SystemSleepResultaSEOS_>
   da2c2:	e7cb      	b.n	da25c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   da2c4:	2003e5b8 	.word	0x2003e5b8
   da2c8:	ffff0000 	.word	0xffff0000
   da2cc:	000dc50b 	.word	0x000dc50b
   da2d0:	000dc504 	.word	0x000dc504

000da2d4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   da2d4:	4b05      	ldr	r3, [pc, #20]	; (da2ec <_GLOBAL__sub_I_System+0x18>)
   da2d6:	2202      	movs	r2, #2
   da2d8:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   da2da:	4b05      	ldr	r3, [pc, #20]	; (da2f0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   da2dc:	4a05      	ldr	r2, [pc, #20]	; (da2f4 <_GLOBAL__sub_I_System+0x20>)
   da2de:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   da2e0:	2000      	movs	r0, #0
   da2e2:	6018      	str	r0, [r3, #0]
   da2e4:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   da2e6:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da2e8:	f7fd baa2 	b.w	d7830 <set_system_mode>
   da2ec:	2003e5c4 	.word	0x2003e5c4
   da2f0:	2003e5b8 	.word	0x2003e5b8
   da2f4:	ffff0000 	.word	0xffff0000

000da2f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   da2f8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da2fa:	2000      	movs	r0, #0
   da2fc:	f7fd fb18 	bl	d7930 <spark_sync_time_pending>
   da300:	b128      	cbz	r0, da30e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   da302:	f7fd fb05 	bl	d7910 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   da306:	f080 0001 	eor.w	r0, r0, #1
   da30a:	b2c0      	uxtb	r0, r0
    }
   da30c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   da30e:	2001      	movs	r0, #1
   da310:	e7fc      	b.n	da30c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000da312 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   da312:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   da314:	4602      	mov	r2, r0
   da316:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da318:	4668      	mov	r0, sp
    struct timeval tv = {
   da31a:	2100      	movs	r1, #0
    };
   da31c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   da320:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   da324:	f7fd f8aa 	bl	d747c <hal_rtc_set_time>
   da328:	4602      	mov	r2, r0
   da32a:	b910      	cbnz	r0, da332 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   da32c:	4601      	mov	r1, r0
   da32e:	f7fd fab7 	bl	d78a0 <system_notify_time_changed>
    }
}
   da332:	b005      	add	sp, #20
   da334:	f85d fb04 	ldr.w	pc, [sp], #4

000da338 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   da338:	b530      	push	{r4, r5, lr}
   da33a:	4604      	mov	r4, r0
    t += time_zone_cache;
   da33c:	4818      	ldr	r0, [pc, #96]	; (da3a0 <_ZN9TimeClass7timeStrEx+0x68>)
   da33e:	e9d0 1000 	ldrd	r1, r0, [r0]
   da342:	1852      	adds	r2, r2, r1
   da344:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   da348:	4816      	ldr	r0, [pc, #88]	; (da3a4 <_ZN9TimeClass7timeStrEx+0x6c>)
   da34a:	e9d0 1000 	ldrd	r1, r0, [r0]
   da34e:	1852      	adds	r2, r2, r1
{
   da350:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   da352:	eb40 0303 	adc.w	r3, r0, r3
   da356:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   da35a:	2224      	movs	r2, #36	; 0x24
   da35c:	eb0d 0002 	add.w	r0, sp, r2
   da360:	2100      	movs	r1, #0
   da362:	f001 f881 	bl	db468 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   da366:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   da368:	a909      	add	r1, sp, #36	; 0x24
   da36a:	4668      	mov	r0, sp
   da36c:	f7fd fba8 	bl	d7ac0 <localtime_r>
    char ascstr[26] = {};
   da370:	2216      	movs	r2, #22
   da372:	4629      	mov	r1, r5
   da374:	a803      	add	r0, sp, #12
   da376:	9502      	str	r5, [sp, #8]
   da378:	f001 f876 	bl	db468 <memset>
    asctime_r(&calendar_time, ascstr);
   da37c:	a902      	add	r1, sp, #8
   da37e:	a809      	add	r0, sp, #36	; 0x24
   da380:	f001 f80c 	bl	db39c <asctime_r>
    int len = strlen(ascstr);
   da384:	a802      	add	r0, sp, #8
   da386:	f001 f916 	bl	db5b6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   da38a:	ab12      	add	r3, sp, #72	; 0x48
   da38c:	4418      	add	r0, r3
    return String(ascstr);
   da38e:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   da390:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   da394:	4620      	mov	r0, r4
   da396:	f7ff fe72 	bl	da07e <_ZN6StringC1EPKc>
}
   da39a:	4620      	mov	r0, r4
   da39c:	b013      	add	sp, #76	; 0x4c
   da39e:	bd30      	pop	{r4, r5, pc}
   da3a0:	2003e5d8 	.word	0x2003e5d8
   da3a4:	2003e5d0 	.word	0x2003e5d0

000da3a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   da3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da3ac:	b0a5      	sub	sp, #148	; 0x94
   da3ae:	4607      	mov	r7, r0
   da3b0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da3b2:	a814      	add	r0, sp, #80	; 0x50
{
   da3b4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da3b6:	223f      	movs	r2, #63	; 0x3f
{
   da3b8:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   da3ba:	f001 f916 	bl	db5ea <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da3be:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da3c0:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   da3c2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   da3c6:	f001 f8f6 	bl	db5b6 <strlen>
   da3ca:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   da3cc:	bb5d      	cbnz	r5, da426 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   da3ce:	492a      	ldr	r1, [pc, #168]	; (da478 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   da3d0:	a803      	add	r0, sp, #12
   da3d2:	f001 f8ca 	bl	db56a <strcpy>
   da3d6:	ae14      	add	r6, sp, #80	; 0x50
{
   da3d8:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   da3da:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   da3de:	45ab      	cmp	fp, r5
   da3e0:	d936      	bls.n	da450 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   da3e2:	46b1      	mov	r9, r6
   da3e4:	f105 0a01 	add.w	sl, r5, #1
   da3e8:	f819 3b01 	ldrb.w	r3, [r9], #1
   da3ec:	2b25      	cmp	r3, #37	; 0x25
   da3ee:	d117      	bne.n	da420 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   da3f0:	7873      	ldrb	r3, [r6, #1]
   da3f2:	2b7a      	cmp	r3, #122	; 0x7a
   da3f4:	d114      	bne.n	da420 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   da3f6:	a803      	add	r0, sp, #12
   da3f8:	f001 f8dd 	bl	db5b6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da3fc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   da3fe:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   da400:	1828      	adds	r0, r5, r0
   da402:	4418      	add	r0, r3
   da404:	ebab 0205 	sub.w	r2, fp, r5
   da408:	1cb1      	adds	r1, r6, #2
   da40a:	f001 f805 	bl	db418 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   da40e:	4622      	mov	r2, r4
   da410:	a903      	add	r1, sp, #12
   da412:	4630      	mov	r0, r6
   da414:	f001 f800 	bl	db418 <memcpy>
            len = strlen(format_str);
   da418:	a814      	add	r0, sp, #80	; 0x50
   da41a:	f001 f8cc 	bl	db5b6 <strlen>
   da41e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   da420:	464e      	mov	r6, r9
   da422:	4655      	mov	r5, sl
   da424:	e7d9      	b.n	da3da <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   da426:	213c      	movs	r1, #60	; 0x3c
   da428:	fb95 f3f1 	sdiv	r3, r5, r1
   da42c:	2b00      	cmp	r3, #0
   da42e:	bfb8      	it	lt
   da430:	425b      	neglt	r3, r3
   da432:	fbb3 f2f1 	udiv	r2, r3, r1
   da436:	fb01 3312 	mls	r3, r1, r2, r3
   da43a:	9300      	str	r3, [sp, #0]
   da43c:	4a0f      	ldr	r2, [pc, #60]	; (da47c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   da43e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   da442:	2110      	movs	r1, #16
   da444:	a803      	add	r0, sp, #12
   da446:	fb95 f3f3 	sdiv	r3, r5, r3
   da44a:	f7fd fb09 	bl	d7a60 <snprintf>
   da44e:	e7c2      	b.n	da3d6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   da450:	2100      	movs	r1, #0
   da452:	222e      	movs	r2, #46	; 0x2e
   da454:	a808      	add	r0, sp, #32
   da456:	9107      	str	r1, [sp, #28]
   da458:	f001 f806 	bl	db468 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   da45c:	4643      	mov	r3, r8
   da45e:	aa14      	add	r2, sp, #80	; 0x50
   da460:	2132      	movs	r1, #50	; 0x32
   da462:	a807      	add	r0, sp, #28
   da464:	f7fd fb24 	bl	d7ab0 <strftime>
    return String(buf);
   da468:	a907      	add	r1, sp, #28
   da46a:	4638      	mov	r0, r7
   da46c:	f7ff fe07 	bl	da07e <_ZN6StringC1EPKc>
}
   da470:	4638      	mov	r0, r7
   da472:	b025      	add	sp, #148	; 0x94
   da474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da478:	000dc532 	.word	0x000dc532
   da47c:	000dc534 	.word	0x000dc534

000da480 <_ZN9TimeClass6formatExPKc>:
{
   da480:	b5f0      	push	{r4, r5, r6, r7, lr}
   da482:	b08d      	sub	sp, #52	; 0x34
   da484:	e9cd 2300 	strd	r2, r3, [sp]
   da488:	9d12      	ldr	r5, [sp, #72]	; 0x48
   da48a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   da48c:	b915      	cbnz	r5, da494 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   da48e:	4b19      	ldr	r3, [pc, #100]	; (da4f4 <_ZN9TimeClass6formatExPKc+0x74>)
   da490:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   da492:	b12d      	cbz	r5, da4a0 <_ZN9TimeClass6formatExPKc+0x20>
   da494:	4b18      	ldr	r3, [pc, #96]	; (da4f8 <_ZN9TimeClass6formatExPKc+0x78>)
   da496:	4628      	mov	r0, r5
   da498:	6819      	ldr	r1, [r3, #0]
   da49a:	f001 f85c 	bl	db556 <strcmp>
   da49e:	b938      	cbnz	r0, da4b0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   da4a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   da4a4:	4620      	mov	r0, r4
   da4a6:	f7ff ff47 	bl	da338 <_ZN9TimeClass7timeStrEx>
}
   da4aa:	4620      	mov	r0, r4
   da4ac:	b00d      	add	sp, #52	; 0x34
   da4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   da4b0:	4e12      	ldr	r6, [pc, #72]	; (da4fc <_ZN9TimeClass6formatExPKc+0x7c>)
   da4b2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   da4b4:	4f12      	ldr	r7, [pc, #72]	; (da500 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   da4b6:	e9d6 3200 	ldrd	r3, r2, [r6]
   da4ba:	185b      	adds	r3, r3, r1
   da4bc:	9901      	ldr	r1, [sp, #4]
   da4be:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   da4c2:	e9d7 0100 	ldrd	r0, r1, [r7]
   da4c6:	181b      	adds	r3, r3, r0
   da4c8:	eb41 0202 	adc.w	r2, r1, r2
   da4cc:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   da4d0:	2100      	movs	r1, #0
   da4d2:	2224      	movs	r2, #36	; 0x24
   da4d4:	a803      	add	r0, sp, #12
   da4d6:	f000 ffc7 	bl	db468 <memset>
    localtime_r(&t, &calendar_time);
   da4da:	a903      	add	r1, sp, #12
   da4dc:	4668      	mov	r0, sp
   da4de:	f7fd faef 	bl	d7ac0 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   da4e2:	6832      	ldr	r2, [r6, #0]
   da4e4:	683b      	ldr	r3, [r7, #0]
   da4e6:	a903      	add	r1, sp, #12
   da4e8:	4413      	add	r3, r2
   da4ea:	4620      	mov	r0, r4
   da4ec:	462a      	mov	r2, r5
   da4ee:	f7ff ff5b 	bl	da3a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   da4f2:	e7da      	b.n	da4aa <_ZN9TimeClass6formatExPKc+0x2a>
   da4f4:	2003e5cc 	.word	0x2003e5cc
   da4f8:	2003de24 	.word	0x2003de24
   da4fc:	2003e5d8 	.word	0x2003e5d8
   da500:	2003e5d0 	.word	0x2003e5d0

000da504 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   da504:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   da506:	2000      	movs	r0, #0
   da508:	f7fc ffa8 	bl	d745c <hal_rtc_time_is_valid>
    if (rtcstate)
   da50c:	4604      	mov	r4, r0
   da50e:	b9a0      	cbnz	r0, da53a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   da510:	f7fd f986 	bl	d7820 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   da514:	2801      	cmp	r0, #1
   da516:	d110      	bne.n	da53a <_ZN9TimeClass7isValidEv+0x36>
   da518:	4620      	mov	r0, r4
   da51a:	f7fd f9b9 	bl	d7890 <system_thread_get_state>
   da51e:	b960      	cbnz	r0, da53a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   da520:	f7ff feea 	bl	da2f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   da524:	b910      	cbnz	r0, da52c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   da526:	f7fd f9eb 	bl	d7900 <spark_process>
        while (_while() && !_condition()) {
   da52a:	e7f9      	b.n	da520 <_ZN9TimeClass7isValidEv+0x1c>
   da52c:	f7ff fee4 	bl	da2f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   da530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   da534:	2000      	movs	r0, #0
   da536:	f7fc bf91 	b.w	d745c <hal_rtc_time_is_valid>
}
   da53a:	4620      	mov	r0, r4
   da53c:	bd10      	pop	{r4, pc}

000da53e <_ZN9TimeClass3nowEv>:
{
   da53e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   da540:	f7ff ffe0 	bl	da504 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   da544:	2210      	movs	r2, #16
   da546:	2100      	movs	r1, #0
   da548:	4668      	mov	r0, sp
   da54a:	f000 ff8d 	bl	db468 <memset>
    hal_rtc_get_time(&tv, nullptr);
   da54e:	2100      	movs	r1, #0
   da550:	4668      	mov	r0, sp
   da552:	f7fc ff8b 	bl	d746c <hal_rtc_get_time>
}
   da556:	9800      	ldr	r0, [sp, #0]
   da558:	b005      	add	sp, #20
   da55a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da560 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da560:	4b02      	ldr	r3, [pc, #8]	; (da56c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da562:	681a      	ldr	r2, [r3, #0]
   da564:	4b02      	ldr	r3, [pc, #8]	; (da570 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da566:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   da568:	4770      	bx	lr
   da56a:	bf00      	nop
   da56c:	2003de24 	.word	0x2003de24
   da570:	2003e5cc 	.word	0x2003e5cc

000da574 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   da574:	4770      	bx	lr

000da576 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da576:	7441      	strb	r1, [r0, #17]
}
   da578:	4770      	bx	lr

000da57a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da57a:	4770      	bx	lr

000da57c <_ZN11USARTSerial17availableForWriteEv>:
{
   da57c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   da57e:	7c00      	ldrb	r0, [r0, #16]
   da580:	f7fd f8cc 	bl	d771c <hal_usart_available_data_for_write>
}
   da584:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da588:	bd08      	pop	{r3, pc}

000da58a <_ZN11USARTSerial9availableEv>:
{
   da58a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   da58c:	7c00      	ldrb	r0, [r0, #16]
   da58e:	f7fd f89d 	bl	d76cc <hal_usart_available>
}
   da592:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da596:	bd08      	pop	{r3, pc}

000da598 <_ZN11USARTSerial4peekEv>:
{
   da598:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   da59a:	7c00      	ldrb	r0, [r0, #16]
   da59c:	f7fd f8a6 	bl	d76ec <hal_usart_peek>
}
   da5a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da5a4:	bd08      	pop	{r3, pc}

000da5a6 <_ZN11USARTSerial4readEv>:
{
   da5a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   da5a8:	7c00      	ldrb	r0, [r0, #16]
   da5aa:	f7fd f897 	bl	d76dc <hal_usart_read>
}
   da5ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da5b2:	bd08      	pop	{r3, pc}

000da5b4 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   da5b4:	7c00      	ldrb	r0, [r0, #16]
   da5b6:	f7fd b8a1 	b.w	d76fc <hal_usart_flush>

000da5ba <_ZN11USARTSerial5writeEh>:
{
   da5ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da5bc:	7c45      	ldrb	r5, [r0, #17]
{
   da5be:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da5c0:	b12d      	cbz	r5, da5ce <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   da5c2:	7c20      	ldrb	r0, [r4, #16]
}
   da5c4:	b003      	add	sp, #12
   da5c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   da5ca:	f7fd b877 	b.w	d76bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   da5ce:	7c00      	ldrb	r0, [r0, #16]
   da5d0:	9101      	str	r1, [sp, #4]
   da5d2:	f7fd f8a3 	bl	d771c <hal_usart_available_data_for_write>
   da5d6:	2800      	cmp	r0, #0
   da5d8:	9901      	ldr	r1, [sp, #4]
   da5da:	dcf2      	bgt.n	da5c2 <_ZN11USARTSerial5writeEh+0x8>
}
   da5dc:	4628      	mov	r0, r5
   da5de:	b003      	add	sp, #12
   da5e0:	bd30      	pop	{r4, r5, pc}

000da5e2 <_ZN11USARTSerialD0Ev>:
   da5e2:	b510      	push	{r4, lr}
   da5e4:	2114      	movs	r1, #20
   da5e6:	4604      	mov	r4, r0
   da5e8:	f000 fa90 	bl	dab0c <_ZdlPvj>
   da5ec:	4620      	mov	r0, r4
   da5ee:	bd10      	pop	{r4, pc}

000da5f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   da5f0:	b510      	push	{r4, lr}
   da5f2:	f04f 0c00 	mov.w	ip, #0
   da5f6:	4604      	mov	r4, r0
   da5f8:	4608      	mov	r0, r1
   da5fa:	4611      	mov	r1, r2
   da5fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da600:	e9c4 c201 	strd	ip, r2, [r4, #4]
   da604:	4a04      	ldr	r2, [pc, #16]	; (da618 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   da606:	6022      	str	r2, [r4, #0]
  _blocking = true;
   da608:	2201      	movs	r2, #1
  _serial = serial;
   da60a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da60c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   da60e:	461a      	mov	r2, r3
   da610:	f7fd f844 	bl	d769c <hal_usart_init>
}
   da614:	4620      	mov	r0, r4
   da616:	bd10      	pop	{r4, pc}
   da618:	000dc564 	.word	0x000dc564

000da61c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   da61c:	7c00      	ldrb	r0, [r0, #16]
   da61e:	2300      	movs	r3, #0
   da620:	f7fd b884 	b.w	d772c <hal_usart_begin_config>

000da624 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   da624:	2200      	movs	r2, #0
   da626:	f7ff bff9 	b.w	da61c <_ZN11USARTSerial5beginEmm>

000da62a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   da62a:	7c00      	ldrb	r0, [r0, #16]
   da62c:	f7fd b83e 	b.w	d76ac <hal_usart_end>

000da630 <_Z22__fetch_global_Serial1v>:
{
   da630:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   da632:	4c0d      	ldr	r4, [pc, #52]	; (da668 <_Z22__fetch_global_Serial1v+0x38>)
   da634:	7821      	ldrb	r1, [r4, #0]
   da636:	f3bf 8f5b 	dmb	ish
   da63a:	f011 0101 	ands.w	r1, r1, #1
   da63e:	d110      	bne.n	da662 <_Z22__fetch_global_Serial1v+0x32>
   da640:	4620      	mov	r0, r4
   da642:	9101      	str	r1, [sp, #4]
   da644:	f7f9 fd38 	bl	d40b8 <__cxa_guard_acquire>
   da648:	9901      	ldr	r1, [sp, #4]
   da64a:	b150      	cbz	r0, da662 <_Z22__fetch_global_Serial1v+0x32>
   da64c:	4b07      	ldr	r3, [pc, #28]	; (da66c <_Z22__fetch_global_Serial1v+0x3c>)
   da64e:	4a08      	ldr	r2, [pc, #32]	; (da670 <_Z22__fetch_global_Serial1v+0x40>)
   da650:	4808      	ldr	r0, [pc, #32]	; (da674 <_Z22__fetch_global_Serial1v+0x44>)
   da652:	f7ff ffcd 	bl	da5f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   da656:	4620      	mov	r0, r4
   da658:	f7f9 fd33 	bl	d40c2 <__cxa_guard_release>
   da65c:	4806      	ldr	r0, [pc, #24]	; (da678 <_Z22__fetch_global_Serial1v+0x48>)
   da65e:	f000 fec3 	bl	db3e8 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   da662:	4804      	ldr	r0, [pc, #16]	; (da674 <_Z22__fetch_global_Serial1v+0x44>)
   da664:	b002      	add	sp, #8
   da666:	bd10      	pop	{r4, pc}
   da668:	2003e5e0 	.word	0x2003e5e0
   da66c:	2003e668 	.word	0x2003e668
   da670:	2003e5e4 	.word	0x2003e5e4
   da674:	2003e6ec 	.word	0x2003e6ec
   da678:	000da57b 	.word	0x000da57b

000da67c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   da67c:	7441      	strb	r1, [r0, #17]
}
   da67e:	4770      	bx	lr

000da680 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da680:	4770      	bx	lr

000da682 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   da682:	4770      	bx	lr

000da684 <_ZN9USBSerial4readEv>:
{
   da684:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   da686:	2100      	movs	r1, #0
   da688:	7c00      	ldrb	r0, [r0, #16]
   da68a:	f7fd f87f 	bl	d778c <HAL_USB_USART_Receive_Data>
}
   da68e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da692:	bd08      	pop	{r3, pc}

000da694 <_ZN9USBSerial4peekEv>:
{
   da694:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   da696:	2101      	movs	r1, #1
   da698:	7c00      	ldrb	r0, [r0, #16]
   da69a:	f7fd f877 	bl	d778c <HAL_USB_USART_Receive_Data>
}
   da69e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   da6a2:	bd08      	pop	{r3, pc}

000da6a4 <_ZN9USBSerial17availableForWriteEv>:
{
   da6a4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   da6a6:	7c00      	ldrb	r0, [r0, #16]
   da6a8:	f7fd f868 	bl	d777c <HAL_USB_USART_Available_Data_For_Write>
}
   da6ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da6b0:	bd08      	pop	{r3, pc}

000da6b2 <_ZN9USBSerial9availableEv>:
{
   da6b2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   da6b4:	7c00      	ldrb	r0, [r0, #16]
   da6b6:	f7fd f859 	bl	d776c <HAL_USB_USART_Available_Data>
}
   da6ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   da6be:	bd08      	pop	{r3, pc}

000da6c0 <_ZN9USBSerial5writeEh>:
{
   da6c0:	b513      	push	{r0, r1, r4, lr}
   da6c2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da6c4:	7c00      	ldrb	r0, [r0, #16]
{
   da6c6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   da6c8:	f7fd f858 	bl	d777c <HAL_USB_USART_Available_Data_For_Write>
   da6cc:	2800      	cmp	r0, #0
   da6ce:	9901      	ldr	r1, [sp, #4]
   da6d0:	dc01      	bgt.n	da6d6 <_ZN9USBSerial5writeEh+0x16>
   da6d2:	7c60      	ldrb	r0, [r4, #17]
   da6d4:	b120      	cbz	r0, da6e0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   da6d6:	7c20      	ldrb	r0, [r4, #16]
   da6d8:	f7fd f860 	bl	d779c <HAL_USB_USART_Send_Data>
   da6dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   da6e0:	b002      	add	sp, #8
   da6e2:	bd10      	pop	{r4, pc}

000da6e4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   da6e4:	7c00      	ldrb	r0, [r0, #16]
   da6e6:	f7fd b861 	b.w	d77ac <HAL_USB_USART_Flush_Data>

000da6ea <_ZN9USBSerialD0Ev>:
   da6ea:	b510      	push	{r4, lr}
   da6ec:	2114      	movs	r1, #20
   da6ee:	4604      	mov	r4, r0
   da6f0:	f000 fa0c 	bl	dab0c <_ZdlPvj>
   da6f4:	4620      	mov	r0, r4
   da6f6:	bd10      	pop	{r4, pc}

000da6f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   da6f8:	b510      	push	{r4, lr}
   da6fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   da6fe:	4604      	mov	r4, r0
   da700:	4608      	mov	r0, r1
   da702:	2100      	movs	r1, #0
   da704:	e9c4 1301 	strd	r1, r3, [r4, #4]
   da708:	4b04      	ldr	r3, [pc, #16]	; (da71c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   da70a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   da70c:	2301      	movs	r3, #1
  _serial = serial;
   da70e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   da710:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   da712:	4611      	mov	r1, r2
   da714:	f7fd f812 	bl	d773c <HAL_USB_USART_Init>
}
   da718:	4620      	mov	r0, r4
   da71a:	bd10      	pop	{r4, pc}
   da71c:	000dc594 	.word	0x000dc594

000da720 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   da720:	7c00      	ldrb	r0, [r0, #16]
   da722:	2200      	movs	r2, #0
   da724:	f7fd b812 	b.w	d774c <HAL_USB_USART_Begin>

000da728 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   da728:	7c00      	ldrb	r0, [r0, #16]
   da72a:	f7fd b817 	b.w	d775c <HAL_USB_USART_End>

000da72e <_Z19acquireSerialBufferv>:
{
   da72e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   da730:	2214      	movs	r2, #20
{
   da732:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   da734:	2100      	movs	r1, #0
   da736:	f000 fe97 	bl	db468 <memset>
}
   da73a:	4620      	mov	r0, r4
   da73c:	bd10      	pop	{r4, pc}
	...

000da740 <_Z16_fetch_usbserialv>:
{
   da740:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da742:	4c0f      	ldr	r4, [pc, #60]	; (da780 <_Z16_fetch_usbserialv+0x40>)
{
   da744:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   da746:	a803      	add	r0, sp, #12
   da748:	f7ff fff1 	bl	da72e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   da74c:	7821      	ldrb	r1, [r4, #0]
   da74e:	f3bf 8f5b 	dmb	ish
   da752:	f011 0101 	ands.w	r1, r1, #1
   da756:	d10f      	bne.n	da778 <_Z16_fetch_usbserialv+0x38>
   da758:	4620      	mov	r0, r4
   da75a:	9101      	str	r1, [sp, #4]
   da75c:	f7f9 fcac 	bl	d40b8 <__cxa_guard_acquire>
   da760:	9901      	ldr	r1, [sp, #4]
   da762:	b148      	cbz	r0, da778 <_Z16_fetch_usbserialv+0x38>
   da764:	aa03      	add	r2, sp, #12
   da766:	4807      	ldr	r0, [pc, #28]	; (da784 <_Z16_fetch_usbserialv+0x44>)
   da768:	f7ff ffc6 	bl	da6f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   da76c:	4620      	mov	r0, r4
   da76e:	f7f9 fca8 	bl	d40c2 <__cxa_guard_release>
   da772:	4805      	ldr	r0, [pc, #20]	; (da788 <_Z16_fetch_usbserialv+0x48>)
   da774:	f000 fe38 	bl	db3e8 <atexit>
	return _usbserial;
}
   da778:	4802      	ldr	r0, [pc, #8]	; (da784 <_Z16_fetch_usbserialv+0x44>)
   da77a:	b008      	add	sp, #32
   da77c:	bd10      	pop	{r4, pc}
   da77e:	bf00      	nop
   da780:	2003e700 	.word	0x2003e700
   da784:	2003e704 	.word	0x2003e704
   da788:	000da681 	.word	0x000da681

000da78c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   da78c:	4b01      	ldr	r3, [pc, #4]	; (da794 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   da78e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   da790:	4770      	bx	lr
   da792:	bf00      	nop
   da794:	2003de28 	.word	0x2003de28

000da798 <serialEventRun>:
{
   da798:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   da79a:	4b0b      	ldr	r3, [pc, #44]	; (da7c8 <serialEventRun+0x30>)
   da79c:	b143      	cbz	r3, da7b0 <serialEventRun+0x18>
   da79e:	f7ff ffcf 	bl	da740 <_Z16_fetch_usbserialv>
   da7a2:	6803      	ldr	r3, [r0, #0]
   da7a4:	691b      	ldr	r3, [r3, #16]
   da7a6:	4798      	blx	r3
   da7a8:	2800      	cmp	r0, #0
   da7aa:	dd01      	ble.n	da7b0 <serialEventRun+0x18>
        serialEvent();
   da7ac:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   da7b0:	4b06      	ldr	r3, [pc, #24]	; (da7cc <serialEventRun+0x34>)
   da7b2:	b143      	cbz	r3, da7c6 <serialEventRun+0x2e>
   da7b4:	f7ff ff3c 	bl	da630 <_Z22__fetch_global_Serial1v>
   da7b8:	6803      	ldr	r3, [r0, #0]
   da7ba:	691b      	ldr	r3, [r3, #16]
   da7bc:	4798      	blx	r3
   da7be:	2800      	cmp	r0, #0
   da7c0:	dd01      	ble.n	da7c6 <serialEventRun+0x2e>
        serialEvent1();
   da7c2:	f3af 8000 	nop.w
}
   da7c6:	bd08      	pop	{r3, pc}
	...

000da7d0 <_post_loop>:
{
   da7d0:	b508      	push	{r3, lr}
	serialEventRun();
   da7d2:	f7ff ffe1 	bl	da798 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   da7d6:	f7fc fe39 	bl	d744c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   da7da:	4b01      	ldr	r3, [pc, #4]	; (da7e0 <_post_loop+0x10>)
   da7dc:	6018      	str	r0, [r3, #0]
}
   da7de:	bd08      	pop	{r3, pc}
   da7e0:	2003e720 	.word	0x2003e720

000da7e4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da7e4:	4805      	ldr	r0, [pc, #20]	; (da7fc <_Z33system_initialize_user_backup_ramv+0x18>)
   da7e6:	4a06      	ldr	r2, [pc, #24]	; (da800 <_Z33system_initialize_user_backup_ramv+0x1c>)
   da7e8:	4906      	ldr	r1, [pc, #24]	; (da804 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   da7ea:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   da7ec:	1a12      	subs	r2, r2, r0
   da7ee:	f000 fe13 	bl	db418 <memcpy>
    __backup_sram_signature = signature;
   da7f2:	4b05      	ldr	r3, [pc, #20]	; (da808 <_Z33system_initialize_user_backup_ramv+0x24>)
   da7f4:	4a05      	ldr	r2, [pc, #20]	; (da80c <_Z33system_initialize_user_backup_ramv+0x28>)
   da7f6:	601a      	str	r2, [r3, #0]
}
   da7f8:	bd08      	pop	{r3, pc}
   da7fa:	bf00      	nop
   da7fc:	2003f400 	.word	0x2003f400
   da800:	2003f404 	.word	0x2003f404
   da804:	000dc760 	.word	0x000dc760
   da808:	2003f400 	.word	0x2003f400
   da80c:	9a271c1e 	.word	0x9a271c1e

000da810 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   da810:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da812:	2300      	movs	r3, #0
   da814:	9300      	str	r3, [sp, #0]
   da816:	461a      	mov	r2, r3
   da818:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da81c:	f7fd f852 	bl	d78c4 <system_ctrl_set_result>
}
   da820:	b003      	add	sp, #12
   da822:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da828 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   da828:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   da82a:	8843      	ldrh	r3, [r0, #2]
   da82c:	2b0a      	cmp	r3, #10
   da82e:	d008      	beq.n	da842 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   da830:	2b50      	cmp	r3, #80	; 0x50
   da832:	d10b      	bne.n	da84c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   da834:	4b09      	ldr	r3, [pc, #36]	; (da85c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   da836:	681b      	ldr	r3, [r3, #0]
   da838:	b14b      	cbz	r3, da84e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   da83a:	b003      	add	sp, #12
   da83c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   da840:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   da842:	f7ff ffe5 	bl	da810 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   da846:	b003      	add	sp, #12
   da848:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   da84c:	2300      	movs	r3, #0
   da84e:	9300      	str	r3, [sp, #0]
   da850:	461a      	mov	r2, r3
   da852:	f06f 0177 	mvn.w	r1, #119	; 0x77
   da856:	f7fd f835 	bl	d78c4 <system_ctrl_set_result>
}
   da85a:	e7f4      	b.n	da846 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   da85c:	2003e71c 	.word	0x2003e71c

000da860 <module_user_init_hook>:
{
   da860:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   da862:	4812      	ldr	r0, [pc, #72]	; (da8ac <module_user_init_hook+0x4c>)
   da864:	2100      	movs	r1, #0
   da866:	f7fd f91b 	bl	d7aa0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   da86a:	4b11      	ldr	r3, [pc, #68]	; (da8b0 <module_user_init_hook+0x50>)
   da86c:	681a      	ldr	r2, [r3, #0]
   da86e:	4b11      	ldr	r3, [pc, #68]	; (da8b4 <module_user_init_hook+0x54>)
   da870:	429a      	cmp	r2, r3
   da872:	4b11      	ldr	r3, [pc, #68]	; (da8b8 <module_user_init_hook+0x58>)
   da874:	bf0c      	ite	eq
   da876:	2201      	moveq	r2, #1
   da878:	2200      	movne	r2, #0
   da87a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   da87c:	d001      	beq.n	da882 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   da87e:	f7ff ffb1 	bl	da7e4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   da882:	f7fc fdd3 	bl	d742c <HAL_RNG_GetRandomNumber>
   da886:	4604      	mov	r4, r0
    srand(seed);
   da888:	f000 fdf6 	bl	db478 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   da88c:	4b0b      	ldr	r3, [pc, #44]	; (da8bc <module_user_init_hook+0x5c>)
   da88e:	b113      	cbz	r3, da896 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   da890:	4620      	mov	r0, r4
   da892:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   da896:	2100      	movs	r1, #0
   da898:	4808      	ldr	r0, [pc, #32]	; (da8bc <module_user_init_hook+0x5c>)
   da89a:	f7fd f859 	bl	d7950 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   da89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   da8a2:	4807      	ldr	r0, [pc, #28]	; (da8c0 <module_user_init_hook+0x60>)
   da8a4:	2100      	movs	r1, #0
   da8a6:	f7fd b803 	b.w	d78b0 <system_ctrl_set_app_request_handler>
   da8aa:	bf00      	nop
   da8ac:	000da78d 	.word	0x000da78d
   da8b0:	2003f400 	.word	0x2003f400
   da8b4:	9a271c1e 	.word	0x9a271c1e
   da8b8:	2003e718 	.word	0x2003e718
   da8bc:	00000000 	.word	0x00000000
   da8c0:	000da829 	.word	0x000da829

000da8c4 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   da8c4:	b508      	push	{r3, lr}
   da8c6:	4b02      	ldr	r3, [pc, #8]	; (da8d0 <spark_protocol_instance+0xc>)
   da8c8:	681b      	ldr	r3, [r3, #0]
   da8ca:	681b      	ldr	r3, [r3, #0]
   da8cc:	9301      	str	r3, [sp, #4]
   da8ce:	bd08      	pop	{r3, pc}
   da8d0:	0003025c 	.word	0x0003025c

000da8d4 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   da8d4:	b508      	push	{r3, lr}
   da8d6:	4b02      	ldr	r3, [pc, #8]	; (da8e0 <spark_protocol_set_product_id+0xc>)
   da8d8:	681b      	ldr	r3, [r3, #0]
   da8da:	685b      	ldr	r3, [r3, #4]
   da8dc:	9301      	str	r3, [sp, #4]
   da8de:	bd08      	pop	{r3, pc}
   da8e0:	0003025c 	.word	0x0003025c

000da8e4 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   da8e4:	b508      	push	{r3, lr}
   da8e6:	4b02      	ldr	r3, [pc, #8]	; (da8f0 <spark_protocol_set_product_firmware_version+0xc>)
   da8e8:	681b      	ldr	r3, [r3, #0]
   da8ea:	689b      	ldr	r3, [r3, #8]
   da8ec:	9301      	str	r3, [sp, #4]
   da8ee:	bd08      	pop	{r3, pc}
   da8f0:	0003025c 	.word	0x0003025c

000da8f4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   da8f4:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   da8f6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   da8f8:	d902      	bls.n	da900 <pinAvailable+0xc>
    return false;
   da8fa:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   da8fc:	b002      	add	sp, #8
   da8fe:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   da900:	f1a0 030b 	sub.w	r3, r0, #11
   da904:	2b02      	cmp	r3, #2
   da906:	d81a      	bhi.n	da93e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   da908:	4c17      	ldr	r4, [pc, #92]	; (da968 <pinAvailable+0x74>)
   da90a:	7821      	ldrb	r1, [r4, #0]
   da90c:	f3bf 8f5b 	dmb	ish
   da910:	f011 0101 	ands.w	r1, r1, #1
   da914:	d10b      	bne.n	da92e <pinAvailable+0x3a>
   da916:	4620      	mov	r0, r4
   da918:	9101      	str	r1, [sp, #4]
   da91a:	f7f9 fbcd 	bl	d40b8 <__cxa_guard_acquire>
   da91e:	9901      	ldr	r1, [sp, #4]
   da920:	b128      	cbz	r0, da92e <pinAvailable+0x3a>
   da922:	4812      	ldr	r0, [pc, #72]	; (da96c <pinAvailable+0x78>)
   da924:	f7ff faa6 	bl	d9e74 <_ZN8SPIClassC1E19hal_spi_interface_t>
   da928:	4620      	mov	r0, r4
   da92a:	f7f9 fbca 	bl	d40c2 <__cxa_guard_release>
   da92e:	4b0f      	ldr	r3, [pc, #60]	; (da96c <pinAvailable+0x78>)
   da930:	7818      	ldrb	r0, [r3, #0]
   da932:	f7fc fe8b 	bl	d764c <hal_spi_is_enabled>
   da936:	2800      	cmp	r0, #0
   da938:	d1df      	bne.n	da8fa <pinAvailable+0x6>
  return true; // 'pin' is available
   da93a:	2001      	movs	r0, #1
   da93c:	e7de      	b.n	da8fc <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   da93e:	2801      	cmp	r0, #1
   da940:	d809      	bhi.n	da956 <pinAvailable+0x62>
   da942:	f000 f89b 	bl	daa7c <_Z19__fetch_global_Wirev>
   da946:	2100      	movs	r1, #0
   da948:	7c00      	ldrb	r0, [r0, #16]
   da94a:	f7fc fe1f 	bl	d758c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   da94e:	f080 0001 	eor.w	r0, r0, #1
   da952:	b2c0      	uxtb	r0, r0
   da954:	e7d2      	b.n	da8fc <pinAvailable+0x8>
   da956:	3809      	subs	r0, #9
   da958:	2801      	cmp	r0, #1
   da95a:	d8ee      	bhi.n	da93a <pinAvailable+0x46>
   da95c:	f7ff fe68 	bl	da630 <_Z22__fetch_global_Serial1v>
   da960:	7c00      	ldrb	r0, [r0, #16]
   da962:	f7fc fed3 	bl	d770c <hal_usart_is_enabled>
   da966:	e7f2      	b.n	da94e <pinAvailable+0x5a>
   da968:	2003e300 	.word	0x2003e300
   da96c:	2003e304 	.word	0x2003e304

000da970 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da970:	2823      	cmp	r0, #35	; 0x23
{
   da972:	b538      	push	{r3, r4, r5, lr}
   da974:	4604      	mov	r4, r0
   da976:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   da978:	d80a      	bhi.n	da990 <pinMode+0x20>
   da97a:	29ff      	cmp	r1, #255	; 0xff
   da97c:	d008      	beq.n	da990 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   da97e:	f7ff ffb9 	bl	da8f4 <pinAvailable>
   da982:	b128      	cbz	r0, da990 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   da984:	4629      	mov	r1, r5
   da986:	4620      	mov	r0, r4
}
   da988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   da98c:	f7fc bd86 	b.w	d749c <HAL_Pin_Mode>
}
   da990:	bd38      	pop	{r3, r4, r5, pc}

000da992 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   da992:	b538      	push	{r3, r4, r5, lr}
   da994:	4604      	mov	r4, r0
   da996:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da998:	f7fc fd88 	bl	d74ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   da99c:	28ff      	cmp	r0, #255	; 0xff
   da99e:	d010      	beq.n	da9c2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   da9a0:	2806      	cmp	r0, #6
   da9a2:	d804      	bhi.n	da9ae <digitalWrite+0x1c>
   da9a4:	234d      	movs	r3, #77	; 0x4d
   da9a6:	fa23 f000 	lsr.w	r0, r3, r0
   da9aa:	07c3      	lsls	r3, r0, #31
   da9ac:	d409      	bmi.n	da9c2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   da9ae:	4620      	mov	r0, r4
   da9b0:	f7ff ffa0 	bl	da8f4 <pinAvailable>
   da9b4:	b128      	cbz	r0, da9c2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   da9b6:	4629      	mov	r1, r5
   da9b8:	4620      	mov	r0, r4
}
   da9ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   da9be:	f7fc bd7d 	b.w	d74bc <HAL_GPIO_Write>
}
   da9c2:	bd38      	pop	{r3, r4, r5, pc}

000da9c4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   da9c4:	b510      	push	{r4, lr}
   da9c6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   da9c8:	f7fc fd70 	bl	d74ac <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   da9cc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   da9ce:	b2db      	uxtb	r3, r3
   da9d0:	2b01      	cmp	r3, #1
   da9d2:	d908      	bls.n	da9e6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   da9d4:	4620      	mov	r0, r4
   da9d6:	f7ff ff8d 	bl	da8f4 <pinAvailable>
   da9da:	b120      	cbz	r0, da9e6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   da9dc:	4620      	mov	r0, r4
}
   da9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   da9e2:	f7fc bd73 	b.w	d74cc <HAL_GPIO_Read>
}
   da9e6:	2000      	movs	r0, #0
   da9e8:	bd10      	pop	{r4, pc}

000da9ea <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   da9ea:	280d      	cmp	r0, #13
{
   da9ec:	b510      	push	{r4, lr}
   da9ee:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   da9f0:	bf9c      	itt	ls
   da9f2:	340e      	addls	r4, #14
   da9f4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   da9f6:	4620      	mov	r0, r4
   da9f8:	f7ff ff7c 	bl	da8f4 <pinAvailable>
   da9fc:	b150      	cbz	r0, daa14 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   da9fe:	2103      	movs	r1, #3
   daa00:	4620      	mov	r0, r4
   daa02:	f7fc fd43 	bl	d748c <HAL_Validate_Pin_Function>
   daa06:	2803      	cmp	r0, #3
   daa08:	d104      	bne.n	daa14 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   daa0a:	4620      	mov	r0, r4
}
   daa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   daa10:	f7fc bd74 	b.w	d74fc <hal_adc_read>
}
   daa14:	2000      	movs	r0, #0
   daa16:	bd10      	pop	{r4, pc}

000daa18 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daa18:	4770      	bx	lr

000daa1a <__tcf_1>:
   daa1a:	4770      	bx	lr

000daa1c <_Z17acquireWireBufferv>:
{
   daa1c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   daa1e:	2300      	movs	r3, #0
   daa20:	2520      	movs	r5, #32
   daa22:	8043      	strh	r3, [r0, #2]
   daa24:	2314      	movs	r3, #20
{
   daa26:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   daa28:	8003      	strh	r3, [r0, #0]
   daa2a:	6085      	str	r5, [r0, #8]
   daa2c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daa2e:	4906      	ldr	r1, [pc, #24]	; (daa48 <_Z17acquireWireBufferv+0x2c>)
   daa30:	4628      	mov	r0, r5
   daa32:	f000 f86f 	bl	dab14 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daa36:	4904      	ldr	r1, [pc, #16]	; (daa48 <_Z17acquireWireBufferv+0x2c>)
	};
   daa38:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   daa3a:	4628      	mov	r0, r5
   daa3c:	f000 f86a 	bl	dab14 <_ZnajRKSt9nothrow_t>
	};
   daa40:	60e0      	str	r0, [r4, #12]
}
   daa42:	4620      	mov	r0, r4
   daa44:	bd38      	pop	{r3, r4, r5, pc}
   daa46:	bf00      	nop
   daa48:	000dc5bc 	.word	0x000dc5bc

000daa4c <_Z18acquireWire1Bufferv>:
   daa4c:	b538      	push	{r3, r4, r5, lr}
   daa4e:	2300      	movs	r3, #0
   daa50:	2520      	movs	r5, #32
   daa52:	8043      	strh	r3, [r0, #2]
   daa54:	2314      	movs	r3, #20
   daa56:	4604      	mov	r4, r0
   daa58:	8003      	strh	r3, [r0, #0]
   daa5a:	6085      	str	r5, [r0, #8]
   daa5c:	6105      	str	r5, [r0, #16]
   daa5e:	4906      	ldr	r1, [pc, #24]	; (daa78 <_Z18acquireWire1Bufferv+0x2c>)
   daa60:	4628      	mov	r0, r5
   daa62:	f000 f857 	bl	dab14 <_ZnajRKSt9nothrow_t>
   daa66:	4904      	ldr	r1, [pc, #16]	; (daa78 <_Z18acquireWire1Bufferv+0x2c>)
   daa68:	6060      	str	r0, [r4, #4]
   daa6a:	4628      	mov	r0, r5
   daa6c:	f000 f852 	bl	dab14 <_ZnajRKSt9nothrow_t>
   daa70:	60e0      	str	r0, [r4, #12]
   daa72:	4620      	mov	r0, r4
   daa74:	bd38      	pop	{r3, r4, r5, pc}
   daa76:	bf00      	nop
   daa78:	000dc5bc 	.word	0x000dc5bc

000daa7c <_Z19__fetch_global_Wirev>:
{
   daa7c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daa7e:	4d0e      	ldr	r5, [pc, #56]	; (daab8 <_Z19__fetch_global_Wirev+0x3c>)
   daa80:	7829      	ldrb	r1, [r5, #0]
   daa82:	f3bf 8f5b 	dmb	ish
   daa86:	f011 0401 	ands.w	r4, r1, #1
{
   daa8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   daa8c:	d111      	bne.n	daab2 <_Z19__fetch_global_Wirev+0x36>
   daa8e:	4628      	mov	r0, r5
   daa90:	f7f9 fb12 	bl	d40b8 <__cxa_guard_acquire>
   daa94:	b168      	cbz	r0, daab2 <_Z19__fetch_global_Wirev+0x36>
   daa96:	a801      	add	r0, sp, #4
   daa98:	f7ff ffc0 	bl	daa1c <_Z17acquireWireBufferv>
   daa9c:	aa01      	add	r2, sp, #4
   daa9e:	4621      	mov	r1, r4
   daaa0:	4806      	ldr	r0, [pc, #24]	; (daabc <_Z19__fetch_global_Wirev+0x40>)
   daaa2:	f7fd fd67 	bl	d8574 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   daaa6:	4628      	mov	r0, r5
   daaa8:	f7f9 fb0b 	bl	d40c2 <__cxa_guard_release>
   daaac:	4804      	ldr	r0, [pc, #16]	; (daac0 <_Z19__fetch_global_Wirev+0x44>)
   daaae:	f000 fc9b 	bl	db3e8 <atexit>
	return wire;
}
   daab2:	4802      	ldr	r0, [pc, #8]	; (daabc <_Z19__fetch_global_Wirev+0x40>)
   daab4:	b007      	add	sp, #28
   daab6:	bd30      	pop	{r4, r5, pc}
   daab8:	2003e724 	.word	0x2003e724
   daabc:	2003e72c 	.word	0x2003e72c
   daac0:	000daa19 	.word	0x000daa19

000daac4 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   daac4:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   daac6:	4c0e      	ldr	r4, [pc, #56]	; (dab00 <_Z20__fetch_global_Wire1v+0x3c>)
   daac8:	7823      	ldrb	r3, [r4, #0]
   daaca:	f3bf 8f5b 	dmb	ish
   daace:	07db      	lsls	r3, r3, #31
{
   daad0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   daad2:	d411      	bmi.n	daaf8 <_Z20__fetch_global_Wire1v+0x34>
   daad4:	4620      	mov	r0, r4
   daad6:	f7f9 faef 	bl	d40b8 <__cxa_guard_acquire>
   daada:	b168      	cbz	r0, daaf8 <_Z20__fetch_global_Wire1v+0x34>
   daadc:	a801      	add	r0, sp, #4
   daade:	f7ff ffb5 	bl	daa4c <_Z18acquireWire1Bufferv>
   daae2:	aa01      	add	r2, sp, #4
   daae4:	2101      	movs	r1, #1
   daae6:	4807      	ldr	r0, [pc, #28]	; (dab04 <_Z20__fetch_global_Wire1v+0x40>)
   daae8:	f7fd fd44 	bl	d8574 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   daaec:	4620      	mov	r0, r4
   daaee:	f7f9 fae8 	bl	d40c2 <__cxa_guard_release>
   daaf2:	4805      	ldr	r0, [pc, #20]	; (dab08 <_Z20__fetch_global_Wire1v+0x44>)
   daaf4:	f000 fc78 	bl	db3e8 <atexit>
	return wire;
}
   daaf8:	4802      	ldr	r0, [pc, #8]	; (dab04 <_Z20__fetch_global_Wire1v+0x40>)
   daafa:	b006      	add	sp, #24
   daafc:	bd10      	pop	{r4, pc}
   daafe:	bf00      	nop
   dab00:	2003e728 	.word	0x2003e728
   dab04:	2003e740 	.word	0x2003e740
   dab08:	000daa1b 	.word	0x000daa1b

000dab0c <_ZdlPvj>:
   dab0c:	f7f9 bac7 	b.w	d409e <_ZdlPv>

000dab10 <_ZnwjRKSt9nothrow_t>:
   dab10:	f7f9 bac1 	b.w	d4096 <_Znwj>

000dab14 <_ZnajRKSt9nothrow_t>:
   dab14:	f7f9 bac1 	b.w	d409a <_Znaj>

000dab18 <_ZSt25__throw_bad_function_callv>:
   dab18:	b508      	push	{r3, lr}
   dab1a:	f7fc ffb1 	bl	d7a80 <abort>
	...

000dab20 <__aeabi_drsub>:
   dab20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   dab24:	e002      	b.n	dab2c <__adddf3>
   dab26:	bf00      	nop

000dab28 <__aeabi_dsub>:
   dab28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000dab2c <__adddf3>:
   dab2c:	b530      	push	{r4, r5, lr}
   dab2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   dab32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   dab36:	ea94 0f05 	teq	r4, r5
   dab3a:	bf08      	it	eq
   dab3c:	ea90 0f02 	teqeq	r0, r2
   dab40:	bf1f      	itttt	ne
   dab42:	ea54 0c00 	orrsne.w	ip, r4, r0
   dab46:	ea55 0c02 	orrsne.w	ip, r5, r2
   dab4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   dab4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dab52:	f000 80e2 	beq.w	dad1a <__adddf3+0x1ee>
   dab56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   dab5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   dab5e:	bfb8      	it	lt
   dab60:	426d      	neglt	r5, r5
   dab62:	dd0c      	ble.n	dab7e <__adddf3+0x52>
   dab64:	442c      	add	r4, r5
   dab66:	ea80 0202 	eor.w	r2, r0, r2
   dab6a:	ea81 0303 	eor.w	r3, r1, r3
   dab6e:	ea82 0000 	eor.w	r0, r2, r0
   dab72:	ea83 0101 	eor.w	r1, r3, r1
   dab76:	ea80 0202 	eor.w	r2, r0, r2
   dab7a:	ea81 0303 	eor.w	r3, r1, r3
   dab7e:	2d36      	cmp	r5, #54	; 0x36
   dab80:	bf88      	it	hi
   dab82:	bd30      	pophi	{r4, r5, pc}
   dab84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dab88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dab8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   dab90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   dab94:	d002      	beq.n	dab9c <__adddf3+0x70>
   dab96:	4240      	negs	r0, r0
   dab98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dab9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   daba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   daba4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   daba8:	d002      	beq.n	dabb0 <__adddf3+0x84>
   dabaa:	4252      	negs	r2, r2
   dabac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   dabb0:	ea94 0f05 	teq	r4, r5
   dabb4:	f000 80a7 	beq.w	dad06 <__adddf3+0x1da>
   dabb8:	f1a4 0401 	sub.w	r4, r4, #1
   dabbc:	f1d5 0e20 	rsbs	lr, r5, #32
   dabc0:	db0d      	blt.n	dabde <__adddf3+0xb2>
   dabc2:	fa02 fc0e 	lsl.w	ip, r2, lr
   dabc6:	fa22 f205 	lsr.w	r2, r2, r5
   dabca:	1880      	adds	r0, r0, r2
   dabcc:	f141 0100 	adc.w	r1, r1, #0
   dabd0:	fa03 f20e 	lsl.w	r2, r3, lr
   dabd4:	1880      	adds	r0, r0, r2
   dabd6:	fa43 f305 	asr.w	r3, r3, r5
   dabda:	4159      	adcs	r1, r3
   dabdc:	e00e      	b.n	dabfc <__adddf3+0xd0>
   dabde:	f1a5 0520 	sub.w	r5, r5, #32
   dabe2:	f10e 0e20 	add.w	lr, lr, #32
   dabe6:	2a01      	cmp	r2, #1
   dabe8:	fa03 fc0e 	lsl.w	ip, r3, lr
   dabec:	bf28      	it	cs
   dabee:	f04c 0c02 	orrcs.w	ip, ip, #2
   dabf2:	fa43 f305 	asr.w	r3, r3, r5
   dabf6:	18c0      	adds	r0, r0, r3
   dabf8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   dabfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dac00:	d507      	bpl.n	dac12 <__adddf3+0xe6>
   dac02:	f04f 0e00 	mov.w	lr, #0
   dac06:	f1dc 0c00 	rsbs	ip, ip, #0
   dac0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   dac0e:	eb6e 0101 	sbc.w	r1, lr, r1
   dac12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   dac16:	d31b      	bcc.n	dac50 <__adddf3+0x124>
   dac18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   dac1c:	d30c      	bcc.n	dac38 <__adddf3+0x10c>
   dac1e:	0849      	lsrs	r1, r1, #1
   dac20:	ea5f 0030 	movs.w	r0, r0, rrx
   dac24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   dac28:	f104 0401 	add.w	r4, r4, #1
   dac2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   dac30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   dac34:	f080 809a 	bcs.w	dad6c <__adddf3+0x240>
   dac38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   dac3c:	bf08      	it	eq
   dac3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dac42:	f150 0000 	adcs.w	r0, r0, #0
   dac46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dac4a:	ea41 0105 	orr.w	r1, r1, r5
   dac4e:	bd30      	pop	{r4, r5, pc}
   dac50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   dac54:	4140      	adcs	r0, r0
   dac56:	eb41 0101 	adc.w	r1, r1, r1
   dac5a:	3c01      	subs	r4, #1
   dac5c:	bf28      	it	cs
   dac5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   dac62:	d2e9      	bcs.n	dac38 <__adddf3+0x10c>
   dac64:	f091 0f00 	teq	r1, #0
   dac68:	bf04      	itt	eq
   dac6a:	4601      	moveq	r1, r0
   dac6c:	2000      	moveq	r0, #0
   dac6e:	fab1 f381 	clz	r3, r1
   dac72:	bf08      	it	eq
   dac74:	3320      	addeq	r3, #32
   dac76:	f1a3 030b 	sub.w	r3, r3, #11
   dac7a:	f1b3 0220 	subs.w	r2, r3, #32
   dac7e:	da0c      	bge.n	dac9a <__adddf3+0x16e>
   dac80:	320c      	adds	r2, #12
   dac82:	dd08      	ble.n	dac96 <__adddf3+0x16a>
   dac84:	f102 0c14 	add.w	ip, r2, #20
   dac88:	f1c2 020c 	rsb	r2, r2, #12
   dac8c:	fa01 f00c 	lsl.w	r0, r1, ip
   dac90:	fa21 f102 	lsr.w	r1, r1, r2
   dac94:	e00c      	b.n	dacb0 <__adddf3+0x184>
   dac96:	f102 0214 	add.w	r2, r2, #20
   dac9a:	bfd8      	it	le
   dac9c:	f1c2 0c20 	rsble	ip, r2, #32
   daca0:	fa01 f102 	lsl.w	r1, r1, r2
   daca4:	fa20 fc0c 	lsr.w	ip, r0, ip
   daca8:	bfdc      	itt	le
   dacaa:	ea41 010c 	orrle.w	r1, r1, ip
   dacae:	4090      	lslle	r0, r2
   dacb0:	1ae4      	subs	r4, r4, r3
   dacb2:	bfa2      	ittt	ge
   dacb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dacb8:	4329      	orrge	r1, r5
   dacba:	bd30      	popge	{r4, r5, pc}
   dacbc:	ea6f 0404 	mvn.w	r4, r4
   dacc0:	3c1f      	subs	r4, #31
   dacc2:	da1c      	bge.n	dacfe <__adddf3+0x1d2>
   dacc4:	340c      	adds	r4, #12
   dacc6:	dc0e      	bgt.n	dace6 <__adddf3+0x1ba>
   dacc8:	f104 0414 	add.w	r4, r4, #20
   daccc:	f1c4 0220 	rsb	r2, r4, #32
   dacd0:	fa20 f004 	lsr.w	r0, r0, r4
   dacd4:	fa01 f302 	lsl.w	r3, r1, r2
   dacd8:	ea40 0003 	orr.w	r0, r0, r3
   dacdc:	fa21 f304 	lsr.w	r3, r1, r4
   dace0:	ea45 0103 	orr.w	r1, r5, r3
   dace4:	bd30      	pop	{r4, r5, pc}
   dace6:	f1c4 040c 	rsb	r4, r4, #12
   dacea:	f1c4 0220 	rsb	r2, r4, #32
   dacee:	fa20 f002 	lsr.w	r0, r0, r2
   dacf2:	fa01 f304 	lsl.w	r3, r1, r4
   dacf6:	ea40 0003 	orr.w	r0, r0, r3
   dacfa:	4629      	mov	r1, r5
   dacfc:	bd30      	pop	{r4, r5, pc}
   dacfe:	fa21 f004 	lsr.w	r0, r1, r4
   dad02:	4629      	mov	r1, r5
   dad04:	bd30      	pop	{r4, r5, pc}
   dad06:	f094 0f00 	teq	r4, #0
   dad0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dad0e:	bf06      	itte	eq
   dad10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dad14:	3401      	addeq	r4, #1
   dad16:	3d01      	subne	r5, #1
   dad18:	e74e      	b.n	dabb8 <__adddf3+0x8c>
   dad1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dad1e:	bf18      	it	ne
   dad20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dad24:	d029      	beq.n	dad7a <__adddf3+0x24e>
   dad26:	ea94 0f05 	teq	r4, r5
   dad2a:	bf08      	it	eq
   dad2c:	ea90 0f02 	teqeq	r0, r2
   dad30:	d005      	beq.n	dad3e <__adddf3+0x212>
   dad32:	ea54 0c00 	orrs.w	ip, r4, r0
   dad36:	bf04      	itt	eq
   dad38:	4619      	moveq	r1, r3
   dad3a:	4610      	moveq	r0, r2
   dad3c:	bd30      	pop	{r4, r5, pc}
   dad3e:	ea91 0f03 	teq	r1, r3
   dad42:	bf1e      	ittt	ne
   dad44:	2100      	movne	r1, #0
   dad46:	2000      	movne	r0, #0
   dad48:	bd30      	popne	{r4, r5, pc}
   dad4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dad4e:	d105      	bne.n	dad5c <__adddf3+0x230>
   dad50:	0040      	lsls	r0, r0, #1
   dad52:	4149      	adcs	r1, r1
   dad54:	bf28      	it	cs
   dad56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dad5a:	bd30      	pop	{r4, r5, pc}
   dad5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dad60:	bf3c      	itt	cc
   dad62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dad66:	bd30      	popcc	{r4, r5, pc}
   dad68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dad6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dad70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dad74:	f04f 0000 	mov.w	r0, #0
   dad78:	bd30      	pop	{r4, r5, pc}
   dad7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dad7e:	bf1a      	itte	ne
   dad80:	4619      	movne	r1, r3
   dad82:	4610      	movne	r0, r2
   dad84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dad88:	bf1c      	itt	ne
   dad8a:	460b      	movne	r3, r1
   dad8c:	4602      	movne	r2, r0
   dad8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dad92:	bf06      	itte	eq
   dad94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dad98:	ea91 0f03 	teqeq	r1, r3
   dad9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dada0:	bd30      	pop	{r4, r5, pc}
   dada2:	bf00      	nop

000dada4 <__aeabi_ui2d>:
   dada4:	f090 0f00 	teq	r0, #0
   dada8:	bf04      	itt	eq
   dadaa:	2100      	moveq	r1, #0
   dadac:	4770      	bxeq	lr
   dadae:	b530      	push	{r4, r5, lr}
   dadb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dadb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dadb8:	f04f 0500 	mov.w	r5, #0
   dadbc:	f04f 0100 	mov.w	r1, #0
   dadc0:	e750      	b.n	dac64 <__adddf3+0x138>
   dadc2:	bf00      	nop

000dadc4 <__aeabi_i2d>:
   dadc4:	f090 0f00 	teq	r0, #0
   dadc8:	bf04      	itt	eq
   dadca:	2100      	moveq	r1, #0
   dadcc:	4770      	bxeq	lr
   dadce:	b530      	push	{r4, r5, lr}
   dadd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dadd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dadd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   daddc:	bf48      	it	mi
   dadde:	4240      	negmi	r0, r0
   dade0:	f04f 0100 	mov.w	r1, #0
   dade4:	e73e      	b.n	dac64 <__adddf3+0x138>
   dade6:	bf00      	nop

000dade8 <__aeabi_f2d>:
   dade8:	0042      	lsls	r2, r0, #1
   dadea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dadee:	ea4f 0131 	mov.w	r1, r1, rrx
   dadf2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dadf6:	bf1f      	itttt	ne
   dadf8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dadfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dae00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dae04:	4770      	bxne	lr
   dae06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   dae0a:	bf08      	it	eq
   dae0c:	4770      	bxeq	lr
   dae0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   dae12:	bf04      	itt	eq
   dae14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   dae18:	4770      	bxeq	lr
   dae1a:	b530      	push	{r4, r5, lr}
   dae1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   dae20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dae24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dae28:	e71c      	b.n	dac64 <__adddf3+0x138>
   dae2a:	bf00      	nop

000dae2c <__aeabi_ul2d>:
   dae2c:	ea50 0201 	orrs.w	r2, r0, r1
   dae30:	bf08      	it	eq
   dae32:	4770      	bxeq	lr
   dae34:	b530      	push	{r4, r5, lr}
   dae36:	f04f 0500 	mov.w	r5, #0
   dae3a:	e00a      	b.n	dae52 <__aeabi_l2d+0x16>

000dae3c <__aeabi_l2d>:
   dae3c:	ea50 0201 	orrs.w	r2, r0, r1
   dae40:	bf08      	it	eq
   dae42:	4770      	bxeq	lr
   dae44:	b530      	push	{r4, r5, lr}
   dae46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dae4a:	d502      	bpl.n	dae52 <__aeabi_l2d+0x16>
   dae4c:	4240      	negs	r0, r0
   dae4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dae52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dae56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dae5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dae5e:	f43f aed8 	beq.w	dac12 <__adddf3+0xe6>
   dae62:	f04f 0203 	mov.w	r2, #3
   dae66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dae6a:	bf18      	it	ne
   dae6c:	3203      	addne	r2, #3
   dae6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dae72:	bf18      	it	ne
   dae74:	3203      	addne	r2, #3
   dae76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dae7a:	f1c2 0320 	rsb	r3, r2, #32
   dae7e:	fa00 fc03 	lsl.w	ip, r0, r3
   dae82:	fa20 f002 	lsr.w	r0, r0, r2
   dae86:	fa01 fe03 	lsl.w	lr, r1, r3
   dae8a:	ea40 000e 	orr.w	r0, r0, lr
   dae8e:	fa21 f102 	lsr.w	r1, r1, r2
   dae92:	4414      	add	r4, r2
   dae94:	e6bd      	b.n	dac12 <__adddf3+0xe6>
   dae96:	bf00      	nop

000dae98 <__aeabi_dmul>:
   dae98:	b570      	push	{r4, r5, r6, lr}
   dae9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dae9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   daea2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   daea6:	bf1d      	ittte	ne
   daea8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   daeac:	ea94 0f0c 	teqne	r4, ip
   daeb0:	ea95 0f0c 	teqne	r5, ip
   daeb4:	f000 f8de 	bleq	db074 <__aeabi_dmul+0x1dc>
   daeb8:	442c      	add	r4, r5
   daeba:	ea81 0603 	eor.w	r6, r1, r3
   daebe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   daec2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   daec6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   daeca:	bf18      	it	ne
   daecc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   daed0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   daed8:	d038      	beq.n	daf4c <__aeabi_dmul+0xb4>
   daeda:	fba0 ce02 	umull	ip, lr, r0, r2
   daede:	f04f 0500 	mov.w	r5, #0
   daee2:	fbe1 e502 	umlal	lr, r5, r1, r2
   daee6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   daeea:	fbe0 e503 	umlal	lr, r5, r0, r3
   daeee:	f04f 0600 	mov.w	r6, #0
   daef2:	fbe1 5603 	umlal	r5, r6, r1, r3
   daef6:	f09c 0f00 	teq	ip, #0
   daefa:	bf18      	it	ne
   daefc:	f04e 0e01 	orrne.w	lr, lr, #1
   daf00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   daf04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   daf08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   daf0c:	d204      	bcs.n	daf18 <__aeabi_dmul+0x80>
   daf0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   daf12:	416d      	adcs	r5, r5
   daf14:	eb46 0606 	adc.w	r6, r6, r6
   daf18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   daf1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   daf20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   daf24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   daf28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   daf2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   daf30:	bf88      	it	hi
   daf32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   daf36:	d81e      	bhi.n	daf76 <__aeabi_dmul+0xde>
   daf38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   daf3c:	bf08      	it	eq
   daf3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   daf42:	f150 0000 	adcs.w	r0, r0, #0
   daf46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   daf4a:	bd70      	pop	{r4, r5, r6, pc}
   daf4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   daf50:	ea46 0101 	orr.w	r1, r6, r1
   daf54:	ea40 0002 	orr.w	r0, r0, r2
   daf58:	ea81 0103 	eor.w	r1, r1, r3
   daf5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   daf60:	bfc2      	ittt	gt
   daf62:	ebd4 050c 	rsbsgt	r5, r4, ip
   daf66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   daf6a:	bd70      	popgt	{r4, r5, r6, pc}
   daf6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   daf70:	f04f 0e00 	mov.w	lr, #0
   daf74:	3c01      	subs	r4, #1
   daf76:	f300 80ab 	bgt.w	db0d0 <__aeabi_dmul+0x238>
   daf7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   daf7e:	bfde      	ittt	le
   daf80:	2000      	movle	r0, #0
   daf82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   daf86:	bd70      	pople	{r4, r5, r6, pc}
   daf88:	f1c4 0400 	rsb	r4, r4, #0
   daf8c:	3c20      	subs	r4, #32
   daf8e:	da35      	bge.n	daffc <__aeabi_dmul+0x164>
   daf90:	340c      	adds	r4, #12
   daf92:	dc1b      	bgt.n	dafcc <__aeabi_dmul+0x134>
   daf94:	f104 0414 	add.w	r4, r4, #20
   daf98:	f1c4 0520 	rsb	r5, r4, #32
   daf9c:	fa00 f305 	lsl.w	r3, r0, r5
   dafa0:	fa20 f004 	lsr.w	r0, r0, r4
   dafa4:	fa01 f205 	lsl.w	r2, r1, r5
   dafa8:	ea40 0002 	orr.w	r0, r0, r2
   dafac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dafb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dafb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dafb8:	fa21 f604 	lsr.w	r6, r1, r4
   dafbc:	eb42 0106 	adc.w	r1, r2, r6
   dafc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dafc4:	bf08      	it	eq
   dafc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dafca:	bd70      	pop	{r4, r5, r6, pc}
   dafcc:	f1c4 040c 	rsb	r4, r4, #12
   dafd0:	f1c4 0520 	rsb	r5, r4, #32
   dafd4:	fa00 f304 	lsl.w	r3, r0, r4
   dafd8:	fa20 f005 	lsr.w	r0, r0, r5
   dafdc:	fa01 f204 	lsl.w	r2, r1, r4
   dafe0:	ea40 0002 	orr.w	r0, r0, r2
   dafe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dafe8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dafec:	f141 0100 	adc.w	r1, r1, #0
   daff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   daff4:	bf08      	it	eq
   daff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   daffa:	bd70      	pop	{r4, r5, r6, pc}
   daffc:	f1c4 0520 	rsb	r5, r4, #32
   db000:	fa00 f205 	lsl.w	r2, r0, r5
   db004:	ea4e 0e02 	orr.w	lr, lr, r2
   db008:	fa20 f304 	lsr.w	r3, r0, r4
   db00c:	fa01 f205 	lsl.w	r2, r1, r5
   db010:	ea43 0302 	orr.w	r3, r3, r2
   db014:	fa21 f004 	lsr.w	r0, r1, r4
   db018:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db01c:	fa21 f204 	lsr.w	r2, r1, r4
   db020:	ea20 0002 	bic.w	r0, r0, r2
   db024:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   db028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   db02c:	bf08      	it	eq
   db02e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   db032:	bd70      	pop	{r4, r5, r6, pc}
   db034:	f094 0f00 	teq	r4, #0
   db038:	d10f      	bne.n	db05a <__aeabi_dmul+0x1c2>
   db03a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   db03e:	0040      	lsls	r0, r0, #1
   db040:	eb41 0101 	adc.w	r1, r1, r1
   db044:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db048:	bf08      	it	eq
   db04a:	3c01      	subeq	r4, #1
   db04c:	d0f7      	beq.n	db03e <__aeabi_dmul+0x1a6>
   db04e:	ea41 0106 	orr.w	r1, r1, r6
   db052:	f095 0f00 	teq	r5, #0
   db056:	bf18      	it	ne
   db058:	4770      	bxne	lr
   db05a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   db05e:	0052      	lsls	r2, r2, #1
   db060:	eb43 0303 	adc.w	r3, r3, r3
   db064:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   db068:	bf08      	it	eq
   db06a:	3d01      	subeq	r5, #1
   db06c:	d0f7      	beq.n	db05e <__aeabi_dmul+0x1c6>
   db06e:	ea43 0306 	orr.w	r3, r3, r6
   db072:	4770      	bx	lr
   db074:	ea94 0f0c 	teq	r4, ip
   db078:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db07c:	bf18      	it	ne
   db07e:	ea95 0f0c 	teqne	r5, ip
   db082:	d00c      	beq.n	db09e <__aeabi_dmul+0x206>
   db084:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db088:	bf18      	it	ne
   db08a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db08e:	d1d1      	bne.n	db034 <__aeabi_dmul+0x19c>
   db090:	ea81 0103 	eor.w	r1, r1, r3
   db094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db098:	f04f 0000 	mov.w	r0, #0
   db09c:	bd70      	pop	{r4, r5, r6, pc}
   db09e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db0a2:	bf06      	itte	eq
   db0a4:	4610      	moveq	r0, r2
   db0a6:	4619      	moveq	r1, r3
   db0a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db0ac:	d019      	beq.n	db0e2 <__aeabi_dmul+0x24a>
   db0ae:	ea94 0f0c 	teq	r4, ip
   db0b2:	d102      	bne.n	db0ba <__aeabi_dmul+0x222>
   db0b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   db0b8:	d113      	bne.n	db0e2 <__aeabi_dmul+0x24a>
   db0ba:	ea95 0f0c 	teq	r5, ip
   db0be:	d105      	bne.n	db0cc <__aeabi_dmul+0x234>
   db0c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   db0c4:	bf1c      	itt	ne
   db0c6:	4610      	movne	r0, r2
   db0c8:	4619      	movne	r1, r3
   db0ca:	d10a      	bne.n	db0e2 <__aeabi_dmul+0x24a>
   db0cc:	ea81 0103 	eor.w	r1, r1, r3
   db0d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   db0d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db0d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   db0dc:	f04f 0000 	mov.w	r0, #0
   db0e0:	bd70      	pop	{r4, r5, r6, pc}
   db0e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   db0e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   db0ea:	bd70      	pop	{r4, r5, r6, pc}

000db0ec <__aeabi_ddiv>:
   db0ec:	b570      	push	{r4, r5, r6, lr}
   db0ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   db0f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   db0f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   db0fa:	bf1d      	ittte	ne
   db0fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   db100:	ea94 0f0c 	teqne	r4, ip
   db104:	ea95 0f0c 	teqne	r5, ip
   db108:	f000 f8a7 	bleq	db25a <__aeabi_ddiv+0x16e>
   db10c:	eba4 0405 	sub.w	r4, r4, r5
   db110:	ea81 0e03 	eor.w	lr, r1, r3
   db114:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db118:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db11c:	f000 8088 	beq.w	db230 <__aeabi_ddiv+0x144>
   db120:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db124:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   db128:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   db12c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   db130:	ea4f 2202 	mov.w	r2, r2, lsl #8
   db134:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   db138:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   db13c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   db140:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   db144:	429d      	cmp	r5, r3
   db146:	bf08      	it	eq
   db148:	4296      	cmpeq	r6, r2
   db14a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   db14e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   db152:	d202      	bcs.n	db15a <__aeabi_ddiv+0x6e>
   db154:	085b      	lsrs	r3, r3, #1
   db156:	ea4f 0232 	mov.w	r2, r2, rrx
   db15a:	1ab6      	subs	r6, r6, r2
   db15c:	eb65 0503 	sbc.w	r5, r5, r3
   db160:	085b      	lsrs	r3, r3, #1
   db162:	ea4f 0232 	mov.w	r2, r2, rrx
   db166:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   db16a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   db16e:	ebb6 0e02 	subs.w	lr, r6, r2
   db172:	eb75 0e03 	sbcs.w	lr, r5, r3
   db176:	bf22      	ittt	cs
   db178:	1ab6      	subcs	r6, r6, r2
   db17a:	4675      	movcs	r5, lr
   db17c:	ea40 000c 	orrcs.w	r0, r0, ip
   db180:	085b      	lsrs	r3, r3, #1
   db182:	ea4f 0232 	mov.w	r2, r2, rrx
   db186:	ebb6 0e02 	subs.w	lr, r6, r2
   db18a:	eb75 0e03 	sbcs.w	lr, r5, r3
   db18e:	bf22      	ittt	cs
   db190:	1ab6      	subcs	r6, r6, r2
   db192:	4675      	movcs	r5, lr
   db194:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   db198:	085b      	lsrs	r3, r3, #1
   db19a:	ea4f 0232 	mov.w	r2, r2, rrx
   db19e:	ebb6 0e02 	subs.w	lr, r6, r2
   db1a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   db1a6:	bf22      	ittt	cs
   db1a8:	1ab6      	subcs	r6, r6, r2
   db1aa:	4675      	movcs	r5, lr
   db1ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   db1b0:	085b      	lsrs	r3, r3, #1
   db1b2:	ea4f 0232 	mov.w	r2, r2, rrx
   db1b6:	ebb6 0e02 	subs.w	lr, r6, r2
   db1ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   db1be:	bf22      	ittt	cs
   db1c0:	1ab6      	subcs	r6, r6, r2
   db1c2:	4675      	movcs	r5, lr
   db1c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   db1c8:	ea55 0e06 	orrs.w	lr, r5, r6
   db1cc:	d018      	beq.n	db200 <__aeabi_ddiv+0x114>
   db1ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   db1d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   db1d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   db1da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   db1de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   db1e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   db1e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   db1ea:	d1c0      	bne.n	db16e <__aeabi_ddiv+0x82>
   db1ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db1f0:	d10b      	bne.n	db20a <__aeabi_ddiv+0x11e>
   db1f2:	ea41 0100 	orr.w	r1, r1, r0
   db1f6:	f04f 0000 	mov.w	r0, #0
   db1fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   db1fe:	e7b6      	b.n	db16e <__aeabi_ddiv+0x82>
   db200:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db204:	bf04      	itt	eq
   db206:	4301      	orreq	r1, r0
   db208:	2000      	moveq	r0, #0
   db20a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   db20e:	bf88      	it	hi
   db210:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   db214:	f63f aeaf 	bhi.w	daf76 <__aeabi_dmul+0xde>
   db218:	ebb5 0c03 	subs.w	ip, r5, r3
   db21c:	bf04      	itt	eq
   db21e:	ebb6 0c02 	subseq.w	ip, r6, r2
   db222:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db226:	f150 0000 	adcs.w	r0, r0, #0
   db22a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db22e:	bd70      	pop	{r4, r5, r6, pc}
   db230:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   db234:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   db238:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   db23c:	bfc2      	ittt	gt
   db23e:	ebd4 050c 	rsbsgt	r5, r4, ip
   db242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   db246:	bd70      	popgt	{r4, r5, r6, pc}
   db248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db24c:	f04f 0e00 	mov.w	lr, #0
   db250:	3c01      	subs	r4, #1
   db252:	e690      	b.n	daf76 <__aeabi_dmul+0xde>
   db254:	ea45 0e06 	orr.w	lr, r5, r6
   db258:	e68d      	b.n	daf76 <__aeabi_dmul+0xde>
   db25a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   db25e:	ea94 0f0c 	teq	r4, ip
   db262:	bf08      	it	eq
   db264:	ea95 0f0c 	teqeq	r5, ip
   db268:	f43f af3b 	beq.w	db0e2 <__aeabi_dmul+0x24a>
   db26c:	ea94 0f0c 	teq	r4, ip
   db270:	d10a      	bne.n	db288 <__aeabi_ddiv+0x19c>
   db272:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   db276:	f47f af34 	bne.w	db0e2 <__aeabi_dmul+0x24a>
   db27a:	ea95 0f0c 	teq	r5, ip
   db27e:	f47f af25 	bne.w	db0cc <__aeabi_dmul+0x234>
   db282:	4610      	mov	r0, r2
   db284:	4619      	mov	r1, r3
   db286:	e72c      	b.n	db0e2 <__aeabi_dmul+0x24a>
   db288:	ea95 0f0c 	teq	r5, ip
   db28c:	d106      	bne.n	db29c <__aeabi_ddiv+0x1b0>
   db28e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   db292:	f43f aefd 	beq.w	db090 <__aeabi_dmul+0x1f8>
   db296:	4610      	mov	r0, r2
   db298:	4619      	mov	r1, r3
   db29a:	e722      	b.n	db0e2 <__aeabi_dmul+0x24a>
   db29c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   db2a0:	bf18      	it	ne
   db2a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   db2a6:	f47f aec5 	bne.w	db034 <__aeabi_dmul+0x19c>
   db2aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   db2ae:	f47f af0d 	bne.w	db0cc <__aeabi_dmul+0x234>
   db2b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   db2b6:	f47f aeeb 	bne.w	db090 <__aeabi_dmul+0x1f8>
   db2ba:	e712      	b.n	db0e2 <__aeabi_dmul+0x24a>

000db2bc <__aeabi_d2uiz>:
   db2bc:	004a      	lsls	r2, r1, #1
   db2be:	d211      	bcs.n	db2e4 <__aeabi_d2uiz+0x28>
   db2c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   db2c4:	d211      	bcs.n	db2ea <__aeabi_d2uiz+0x2e>
   db2c6:	d50d      	bpl.n	db2e4 <__aeabi_d2uiz+0x28>
   db2c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   db2cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   db2d0:	d40e      	bmi.n	db2f0 <__aeabi_d2uiz+0x34>
   db2d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db2d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   db2da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   db2de:	fa23 f002 	lsr.w	r0, r3, r2
   db2e2:	4770      	bx	lr
   db2e4:	f04f 0000 	mov.w	r0, #0
   db2e8:	4770      	bx	lr
   db2ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   db2ee:	d102      	bne.n	db2f6 <__aeabi_d2uiz+0x3a>
   db2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db2f4:	4770      	bx	lr
   db2f6:	f04f 0000 	mov.w	r0, #0
   db2fa:	4770      	bx	lr

000db2fc <__aeabi_d2f>:
   db2fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   db300:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   db304:	bf24      	itt	cs
   db306:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   db30a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   db30e:	d90d      	bls.n	db32c <__aeabi_d2f+0x30>
   db310:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   db314:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   db318:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   db31c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   db320:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   db324:	bf08      	it	eq
   db326:	f020 0001 	biceq.w	r0, r0, #1
   db32a:	4770      	bx	lr
   db32c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   db330:	d121      	bne.n	db376 <__aeabi_d2f+0x7a>
   db332:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   db336:	bfbc      	itt	lt
   db338:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   db33c:	4770      	bxlt	lr
   db33e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   db342:	ea4f 5252 	mov.w	r2, r2, lsr #21
   db346:	f1c2 0218 	rsb	r2, r2, #24
   db34a:	f1c2 0c20 	rsb	ip, r2, #32
   db34e:	fa10 f30c 	lsls.w	r3, r0, ip
   db352:	fa20 f002 	lsr.w	r0, r0, r2
   db356:	bf18      	it	ne
   db358:	f040 0001 	orrne.w	r0, r0, #1
   db35c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   db360:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   db364:	fa03 fc0c 	lsl.w	ip, r3, ip
   db368:	ea40 000c 	orr.w	r0, r0, ip
   db36c:	fa23 f302 	lsr.w	r3, r3, r2
   db370:	ea4f 0343 	mov.w	r3, r3, lsl #1
   db374:	e7cc      	b.n	db310 <__aeabi_d2f+0x14>
   db376:	ea7f 5362 	mvns.w	r3, r2, asr #21
   db37a:	d107      	bne.n	db38c <__aeabi_d2f+0x90>
   db37c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   db380:	bf1e      	ittt	ne
   db382:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   db386:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   db38a:	4770      	bxne	lr
   db38c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   db390:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   db394:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   db398:	4770      	bx	lr
   db39a:	bf00      	nop

000db39c <asctime_r>:
   db39c:	b510      	push	{r4, lr}
   db39e:	460c      	mov	r4, r1
   db3a0:	6941      	ldr	r1, [r0, #20]
   db3a2:	6903      	ldr	r3, [r0, #16]
   db3a4:	6982      	ldr	r2, [r0, #24]
   db3a6:	b086      	sub	sp, #24
   db3a8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   db3ac:	9104      	str	r1, [sp, #16]
   db3ae:	6801      	ldr	r1, [r0, #0]
   db3b0:	9103      	str	r1, [sp, #12]
   db3b2:	6841      	ldr	r1, [r0, #4]
   db3b4:	9102      	str	r1, [sp, #8]
   db3b6:	6881      	ldr	r1, [r0, #8]
   db3b8:	9101      	str	r1, [sp, #4]
   db3ba:	68c1      	ldr	r1, [r0, #12]
   db3bc:	9100      	str	r1, [sp, #0]
   db3be:	4907      	ldr	r1, [pc, #28]	; (db3dc <asctime_r+0x40>)
   db3c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   db3c4:	440b      	add	r3, r1
   db3c6:	4906      	ldr	r1, [pc, #24]	; (db3e0 <asctime_r+0x44>)
   db3c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   db3cc:	440a      	add	r2, r1
   db3ce:	4620      	mov	r0, r4
   db3d0:	4904      	ldr	r1, [pc, #16]	; (db3e4 <asctime_r+0x48>)
   db3d2:	f7fc fb3d 	bl	d7a50 <siprintf>
   db3d6:	4620      	mov	r0, r4
   db3d8:	b006      	add	sp, #24
   db3da:	bd10      	pop	{r4, pc}
   db3dc:	000dc5f2 	.word	0x000dc5f2
   db3e0:	000dc5dd 	.word	0x000dc5dd
   db3e4:	000dc5bd 	.word	0x000dc5bd

000db3e8 <atexit>:
   db3e8:	2300      	movs	r3, #0
   db3ea:	4601      	mov	r1, r0
   db3ec:	461a      	mov	r2, r3
   db3ee:	4618      	mov	r0, r3
   db3f0:	f000 b9a6 	b.w	db740 <__register_exitproc>

000db3f4 <gmtime>:
   db3f4:	b538      	push	{r3, r4, r5, lr}
   db3f6:	4b07      	ldr	r3, [pc, #28]	; (db414 <gmtime+0x20>)
   db3f8:	681d      	ldr	r5, [r3, #0]
   db3fa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   db3fc:	4604      	mov	r4, r0
   db3fe:	b91b      	cbnz	r3, db408 <gmtime+0x14>
   db400:	2024      	movs	r0, #36	; 0x24
   db402:	f7fc fb0d 	bl	d7a20 <malloc>
   db406:	63e8      	str	r0, [r5, #60]	; 0x3c
   db408:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   db40a:	4620      	mov	r0, r4
   db40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db410:	f7fc bb5e 	b.w	d7ad0 <gmtime_r>
   db414:	2003de28 	.word	0x2003de28

000db418 <memcpy>:
   db418:	440a      	add	r2, r1
   db41a:	4291      	cmp	r1, r2
   db41c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   db420:	d100      	bne.n	db424 <memcpy+0xc>
   db422:	4770      	bx	lr
   db424:	b510      	push	{r4, lr}
   db426:	f811 4b01 	ldrb.w	r4, [r1], #1
   db42a:	f803 4f01 	strb.w	r4, [r3, #1]!
   db42e:	4291      	cmp	r1, r2
   db430:	d1f9      	bne.n	db426 <memcpy+0xe>
   db432:	bd10      	pop	{r4, pc}

000db434 <memmove>:
   db434:	4288      	cmp	r0, r1
   db436:	b510      	push	{r4, lr}
   db438:	eb01 0402 	add.w	r4, r1, r2
   db43c:	d902      	bls.n	db444 <memmove+0x10>
   db43e:	4284      	cmp	r4, r0
   db440:	4623      	mov	r3, r4
   db442:	d807      	bhi.n	db454 <memmove+0x20>
   db444:	1e43      	subs	r3, r0, #1
   db446:	42a1      	cmp	r1, r4
   db448:	d008      	beq.n	db45c <memmove+0x28>
   db44a:	f811 2b01 	ldrb.w	r2, [r1], #1
   db44e:	f803 2f01 	strb.w	r2, [r3, #1]!
   db452:	e7f8      	b.n	db446 <memmove+0x12>
   db454:	4402      	add	r2, r0
   db456:	4601      	mov	r1, r0
   db458:	428a      	cmp	r2, r1
   db45a:	d100      	bne.n	db45e <memmove+0x2a>
   db45c:	bd10      	pop	{r4, pc}
   db45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   db462:	f802 4d01 	strb.w	r4, [r2, #-1]!
   db466:	e7f7      	b.n	db458 <memmove+0x24>

000db468 <memset>:
   db468:	4402      	add	r2, r0
   db46a:	4603      	mov	r3, r0
   db46c:	4293      	cmp	r3, r2
   db46e:	d100      	bne.n	db472 <memset+0xa>
   db470:	4770      	bx	lr
   db472:	f803 1b01 	strb.w	r1, [r3], #1
   db476:	e7f9      	b.n	db46c <memset+0x4>

000db478 <srand>:
   db478:	b538      	push	{r3, r4, r5, lr}
   db47a:	4b0d      	ldr	r3, [pc, #52]	; (db4b0 <srand+0x38>)
   db47c:	681d      	ldr	r5, [r3, #0]
   db47e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db480:	4604      	mov	r4, r0
   db482:	b97b      	cbnz	r3, db4a4 <srand+0x2c>
   db484:	2018      	movs	r0, #24
   db486:	f7fc facb 	bl	d7a20 <malloc>
   db48a:	4a0a      	ldr	r2, [pc, #40]	; (db4b4 <srand+0x3c>)
   db48c:	4b0a      	ldr	r3, [pc, #40]	; (db4b8 <srand+0x40>)
   db48e:	63a8      	str	r0, [r5, #56]	; 0x38
   db490:	e9c0 2300 	strd	r2, r3, [r0]
   db494:	4b09      	ldr	r3, [pc, #36]	; (db4bc <srand+0x44>)
   db496:	6083      	str	r3, [r0, #8]
   db498:	230b      	movs	r3, #11
   db49a:	8183      	strh	r3, [r0, #12]
   db49c:	2201      	movs	r2, #1
   db49e:	2300      	movs	r3, #0
   db4a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db4a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   db4a6:	2200      	movs	r2, #0
   db4a8:	611c      	str	r4, [r3, #16]
   db4aa:	615a      	str	r2, [r3, #20]
   db4ac:	bd38      	pop	{r3, r4, r5, pc}
   db4ae:	bf00      	nop
   db4b0:	2003de28 	.word	0x2003de28
   db4b4:	abcd330e 	.word	0xabcd330e
   db4b8:	e66d1234 	.word	0xe66d1234
   db4bc:	0005deec 	.word	0x0005deec

000db4c0 <rand>:
   db4c0:	4b13      	ldr	r3, [pc, #76]	; (db510 <rand+0x50>)
   db4c2:	b510      	push	{r4, lr}
   db4c4:	681c      	ldr	r4, [r3, #0]
   db4c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db4c8:	b97b      	cbnz	r3, db4ea <rand+0x2a>
   db4ca:	2018      	movs	r0, #24
   db4cc:	f7fc faa8 	bl	d7a20 <malloc>
   db4d0:	4a10      	ldr	r2, [pc, #64]	; (db514 <rand+0x54>)
   db4d2:	4b11      	ldr	r3, [pc, #68]	; (db518 <rand+0x58>)
   db4d4:	63a0      	str	r0, [r4, #56]	; 0x38
   db4d6:	e9c0 2300 	strd	r2, r3, [r0]
   db4da:	4b10      	ldr	r3, [pc, #64]	; (db51c <rand+0x5c>)
   db4dc:	6083      	str	r3, [r0, #8]
   db4de:	230b      	movs	r3, #11
   db4e0:	8183      	strh	r3, [r0, #12]
   db4e2:	2201      	movs	r2, #1
   db4e4:	2300      	movs	r3, #0
   db4e6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db4ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   db4ec:	480c      	ldr	r0, [pc, #48]	; (db520 <rand+0x60>)
   db4ee:	690a      	ldr	r2, [r1, #16]
   db4f0:	694b      	ldr	r3, [r1, #20]
   db4f2:	4c0c      	ldr	r4, [pc, #48]	; (db524 <rand+0x64>)
   db4f4:	4350      	muls	r0, r2
   db4f6:	fb04 0003 	mla	r0, r4, r3, r0
   db4fa:	fba2 3404 	umull	r3, r4, r2, r4
   db4fe:	1c5a      	adds	r2, r3, #1
   db500:	4404      	add	r4, r0
   db502:	f144 0000 	adc.w	r0, r4, #0
   db506:	e9c1 2004 	strd	r2, r0, [r1, #16]
   db50a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   db50e:	bd10      	pop	{r4, pc}
   db510:	2003de28 	.word	0x2003de28
   db514:	abcd330e 	.word	0xabcd330e
   db518:	e66d1234 	.word	0xe66d1234
   db51c:	0005deec 	.word	0x0005deec
   db520:	5851f42d 	.word	0x5851f42d
   db524:	4c957f2d 	.word	0x4c957f2d

000db528 <strchr>:
   db528:	b2c9      	uxtb	r1, r1
   db52a:	4603      	mov	r3, r0
   db52c:	f810 2b01 	ldrb.w	r2, [r0], #1
   db530:	b11a      	cbz	r2, db53a <strchr+0x12>
   db532:	428a      	cmp	r2, r1
   db534:	d1f9      	bne.n	db52a <strchr+0x2>
   db536:	4618      	mov	r0, r3
   db538:	4770      	bx	lr
   db53a:	2900      	cmp	r1, #0
   db53c:	bf18      	it	ne
   db53e:	2300      	movne	r3, #0
   db540:	e7f9      	b.n	db536 <strchr+0xe>

000db542 <strchrnul>:
   db542:	b510      	push	{r4, lr}
   db544:	4604      	mov	r4, r0
   db546:	f7ff ffef 	bl	db528 <strchr>
   db54a:	b918      	cbnz	r0, db554 <strchrnul+0x12>
   db54c:	4620      	mov	r0, r4
   db54e:	f000 f832 	bl	db5b6 <strlen>
   db552:	4420      	add	r0, r4
   db554:	bd10      	pop	{r4, pc}

000db556 <strcmp>:
   db556:	f810 2b01 	ldrb.w	r2, [r0], #1
   db55a:	f811 3b01 	ldrb.w	r3, [r1], #1
   db55e:	2a01      	cmp	r2, #1
   db560:	bf28      	it	cs
   db562:	429a      	cmpcs	r2, r3
   db564:	d0f7      	beq.n	db556 <strcmp>
   db566:	1ad0      	subs	r0, r2, r3
   db568:	4770      	bx	lr

000db56a <strcpy>:
   db56a:	4603      	mov	r3, r0
   db56c:	f811 2b01 	ldrb.w	r2, [r1], #1
   db570:	f803 2b01 	strb.w	r2, [r3], #1
   db574:	2a00      	cmp	r2, #0
   db576:	d1f9      	bne.n	db56c <strcpy+0x2>
   db578:	4770      	bx	lr
	...

000db57c <strdup>:
   db57c:	4b02      	ldr	r3, [pc, #8]	; (db588 <strdup+0xc>)
   db57e:	4601      	mov	r1, r0
   db580:	6818      	ldr	r0, [r3, #0]
   db582:	f000 b803 	b.w	db58c <_strdup_r>
   db586:	bf00      	nop
   db588:	2003de28 	.word	0x2003de28

000db58c <_strdup_r>:
   db58c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   db58e:	4604      	mov	r4, r0
   db590:	4608      	mov	r0, r1
   db592:	460d      	mov	r5, r1
   db594:	f000 f80f 	bl	db5b6 <strlen>
   db598:	1c42      	adds	r2, r0, #1
   db59a:	4611      	mov	r1, r2
   db59c:	4620      	mov	r0, r4
   db59e:	9201      	str	r2, [sp, #4]
   db5a0:	f7fc fa76 	bl	d7a90 <_malloc_r>
   db5a4:	4604      	mov	r4, r0
   db5a6:	b118      	cbz	r0, db5b0 <_strdup_r+0x24>
   db5a8:	9a01      	ldr	r2, [sp, #4]
   db5aa:	4629      	mov	r1, r5
   db5ac:	f7ff ff34 	bl	db418 <memcpy>
   db5b0:	4620      	mov	r0, r4
   db5b2:	b003      	add	sp, #12
   db5b4:	bd30      	pop	{r4, r5, pc}

000db5b6 <strlen>:
   db5b6:	4603      	mov	r3, r0
   db5b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   db5bc:	2a00      	cmp	r2, #0
   db5be:	d1fb      	bne.n	db5b8 <strlen+0x2>
   db5c0:	1a18      	subs	r0, r3, r0
   db5c2:	3801      	subs	r0, #1
   db5c4:	4770      	bx	lr

000db5c6 <strncmp>:
   db5c6:	b510      	push	{r4, lr}
   db5c8:	b16a      	cbz	r2, db5e6 <strncmp+0x20>
   db5ca:	3901      	subs	r1, #1
   db5cc:	1884      	adds	r4, r0, r2
   db5ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   db5d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   db5d6:	4293      	cmp	r3, r2
   db5d8:	d103      	bne.n	db5e2 <strncmp+0x1c>
   db5da:	42a0      	cmp	r0, r4
   db5dc:	d001      	beq.n	db5e2 <strncmp+0x1c>
   db5de:	2b00      	cmp	r3, #0
   db5e0:	d1f5      	bne.n	db5ce <strncmp+0x8>
   db5e2:	1a98      	subs	r0, r3, r2
   db5e4:	bd10      	pop	{r4, pc}
   db5e6:	4610      	mov	r0, r2
   db5e8:	e7fc      	b.n	db5e4 <strncmp+0x1e>

000db5ea <strncpy>:
   db5ea:	b510      	push	{r4, lr}
   db5ec:	3901      	subs	r1, #1
   db5ee:	4603      	mov	r3, r0
   db5f0:	b132      	cbz	r2, db600 <strncpy+0x16>
   db5f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db5f6:	f803 4b01 	strb.w	r4, [r3], #1
   db5fa:	3a01      	subs	r2, #1
   db5fc:	2c00      	cmp	r4, #0
   db5fe:	d1f7      	bne.n	db5f0 <strncpy+0x6>
   db600:	441a      	add	r2, r3
   db602:	2100      	movs	r1, #0
   db604:	4293      	cmp	r3, r2
   db606:	d100      	bne.n	db60a <strncpy+0x20>
   db608:	bd10      	pop	{r4, pc}
   db60a:	f803 1b01 	strb.w	r1, [r3], #1
   db60e:	e7f9      	b.n	db604 <strncpy+0x1a>

000db610 <strrchr>:
   db610:	b538      	push	{r3, r4, r5, lr}
   db612:	4603      	mov	r3, r0
   db614:	460c      	mov	r4, r1
   db616:	b969      	cbnz	r1, db634 <strrchr+0x24>
   db618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db61c:	f7ff bf84 	b.w	db528 <strchr>
   db620:	1c43      	adds	r3, r0, #1
   db622:	4605      	mov	r5, r0
   db624:	4621      	mov	r1, r4
   db626:	4618      	mov	r0, r3
   db628:	f7ff ff7e 	bl	db528 <strchr>
   db62c:	2800      	cmp	r0, #0
   db62e:	d1f7      	bne.n	db620 <strrchr+0x10>
   db630:	4628      	mov	r0, r5
   db632:	bd38      	pop	{r3, r4, r5, pc}
   db634:	2500      	movs	r5, #0
   db636:	e7f5      	b.n	db624 <strrchr+0x14>

000db638 <_strtol_l.isra.0>:
   db638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db63c:	4e3a      	ldr	r6, [pc, #232]	; (db728 <_strtol_l.isra.0+0xf0>)
   db63e:	4686      	mov	lr, r0
   db640:	468c      	mov	ip, r1
   db642:	4660      	mov	r0, ip
   db644:	f81c 4b01 	ldrb.w	r4, [ip], #1
   db648:	5da5      	ldrb	r5, [r4, r6]
   db64a:	f015 0508 	ands.w	r5, r5, #8
   db64e:	d1f8      	bne.n	db642 <_strtol_l.isra.0+0xa>
   db650:	2c2d      	cmp	r4, #45	; 0x2d
   db652:	d133      	bne.n	db6bc <_strtol_l.isra.0+0x84>
   db654:	f89c 4000 	ldrb.w	r4, [ip]
   db658:	f04f 0801 	mov.w	r8, #1
   db65c:	f100 0c02 	add.w	ip, r0, #2
   db660:	2b00      	cmp	r3, #0
   db662:	d05c      	beq.n	db71e <_strtol_l.isra.0+0xe6>
   db664:	2b10      	cmp	r3, #16
   db666:	d10c      	bne.n	db682 <_strtol_l.isra.0+0x4a>
   db668:	2c30      	cmp	r4, #48	; 0x30
   db66a:	d10a      	bne.n	db682 <_strtol_l.isra.0+0x4a>
   db66c:	f89c 0000 	ldrb.w	r0, [ip]
   db670:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db674:	2858      	cmp	r0, #88	; 0x58
   db676:	d14d      	bne.n	db714 <_strtol_l.isra.0+0xdc>
   db678:	f89c 4001 	ldrb.w	r4, [ip, #1]
   db67c:	2310      	movs	r3, #16
   db67e:	f10c 0c02 	add.w	ip, ip, #2
   db682:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   db686:	3f01      	subs	r7, #1
   db688:	2600      	movs	r6, #0
   db68a:	fbb7 f9f3 	udiv	r9, r7, r3
   db68e:	4630      	mov	r0, r6
   db690:	fb03 7a19 	mls	sl, r3, r9, r7
   db694:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   db698:	2d09      	cmp	r5, #9
   db69a:	d818      	bhi.n	db6ce <_strtol_l.isra.0+0x96>
   db69c:	462c      	mov	r4, r5
   db69e:	42a3      	cmp	r3, r4
   db6a0:	dd24      	ble.n	db6ec <_strtol_l.isra.0+0xb4>
   db6a2:	1c75      	adds	r5, r6, #1
   db6a4:	d007      	beq.n	db6b6 <_strtol_l.isra.0+0x7e>
   db6a6:	4581      	cmp	r9, r0
   db6a8:	d31d      	bcc.n	db6e6 <_strtol_l.isra.0+0xae>
   db6aa:	d101      	bne.n	db6b0 <_strtol_l.isra.0+0x78>
   db6ac:	45a2      	cmp	sl, r4
   db6ae:	db1a      	blt.n	db6e6 <_strtol_l.isra.0+0xae>
   db6b0:	fb00 4003 	mla	r0, r0, r3, r4
   db6b4:	2601      	movs	r6, #1
   db6b6:	f81c 4b01 	ldrb.w	r4, [ip], #1
   db6ba:	e7eb      	b.n	db694 <_strtol_l.isra.0+0x5c>
   db6bc:	2c2b      	cmp	r4, #43	; 0x2b
   db6be:	bf08      	it	eq
   db6c0:	f89c 4000 	ldrbeq.w	r4, [ip]
   db6c4:	46a8      	mov	r8, r5
   db6c6:	bf08      	it	eq
   db6c8:	f100 0c02 	addeq.w	ip, r0, #2
   db6cc:	e7c8      	b.n	db660 <_strtol_l.isra.0+0x28>
   db6ce:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   db6d2:	2d19      	cmp	r5, #25
   db6d4:	d801      	bhi.n	db6da <_strtol_l.isra.0+0xa2>
   db6d6:	3c37      	subs	r4, #55	; 0x37
   db6d8:	e7e1      	b.n	db69e <_strtol_l.isra.0+0x66>
   db6da:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   db6de:	2d19      	cmp	r5, #25
   db6e0:	d804      	bhi.n	db6ec <_strtol_l.isra.0+0xb4>
   db6e2:	3c57      	subs	r4, #87	; 0x57
   db6e4:	e7db      	b.n	db69e <_strtol_l.isra.0+0x66>
   db6e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   db6ea:	e7e4      	b.n	db6b6 <_strtol_l.isra.0+0x7e>
   db6ec:	1c73      	adds	r3, r6, #1
   db6ee:	d106      	bne.n	db6fe <_strtol_l.isra.0+0xc6>
   db6f0:	2322      	movs	r3, #34	; 0x22
   db6f2:	f8ce 3000 	str.w	r3, [lr]
   db6f6:	4638      	mov	r0, r7
   db6f8:	b942      	cbnz	r2, db70c <_strtol_l.isra.0+0xd4>
   db6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db6fe:	f1b8 0f00 	cmp.w	r8, #0
   db702:	d000      	beq.n	db706 <_strtol_l.isra.0+0xce>
   db704:	4240      	negs	r0, r0
   db706:	2a00      	cmp	r2, #0
   db708:	d0f7      	beq.n	db6fa <_strtol_l.isra.0+0xc2>
   db70a:	b10e      	cbz	r6, db710 <_strtol_l.isra.0+0xd8>
   db70c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   db710:	6011      	str	r1, [r2, #0]
   db712:	e7f2      	b.n	db6fa <_strtol_l.isra.0+0xc2>
   db714:	2430      	movs	r4, #48	; 0x30
   db716:	2b00      	cmp	r3, #0
   db718:	d1b3      	bne.n	db682 <_strtol_l.isra.0+0x4a>
   db71a:	2308      	movs	r3, #8
   db71c:	e7b1      	b.n	db682 <_strtol_l.isra.0+0x4a>
   db71e:	2c30      	cmp	r4, #48	; 0x30
   db720:	d0a4      	beq.n	db66c <_strtol_l.isra.0+0x34>
   db722:	230a      	movs	r3, #10
   db724:	e7ad      	b.n	db682 <_strtol_l.isra.0+0x4a>
   db726:	bf00      	nop
   db728:	000dc617 	.word	0x000dc617

000db72c <strtol>:
   db72c:	4613      	mov	r3, r2
   db72e:	460a      	mov	r2, r1
   db730:	4601      	mov	r1, r0
   db732:	4802      	ldr	r0, [pc, #8]	; (db73c <strtol+0x10>)
   db734:	6800      	ldr	r0, [r0, #0]
   db736:	f7ff bf7f 	b.w	db638 <_strtol_l.isra.0>
   db73a:	bf00      	nop
   db73c:	2003de28 	.word	0x2003de28

000db740 <__register_exitproc>:
   db740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   db744:	f8df 80b8 	ldr.w	r8, [pc, #184]	; db800 <__register_exitproc+0xc0>
   db748:	4606      	mov	r6, r0
   db74a:	f8d8 0000 	ldr.w	r0, [r8]
   db74e:	461f      	mov	r7, r3
   db750:	460d      	mov	r5, r1
   db752:	4691      	mov	r9, r2
   db754:	f000 f856 	bl	db804 <__retarget_lock_acquire_recursive>
   db758:	4b25      	ldr	r3, [pc, #148]	; (db7f0 <__register_exitproc+0xb0>)
   db75a:	681c      	ldr	r4, [r3, #0]
   db75c:	b934      	cbnz	r4, db76c <__register_exitproc+0x2c>
   db75e:	4c25      	ldr	r4, [pc, #148]	; (db7f4 <__register_exitproc+0xb4>)
   db760:	601c      	str	r4, [r3, #0]
   db762:	4b25      	ldr	r3, [pc, #148]	; (db7f8 <__register_exitproc+0xb8>)
   db764:	b113      	cbz	r3, db76c <__register_exitproc+0x2c>
   db766:	681b      	ldr	r3, [r3, #0]
   db768:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   db76c:	6863      	ldr	r3, [r4, #4]
   db76e:	2b1f      	cmp	r3, #31
   db770:	dd07      	ble.n	db782 <__register_exitproc+0x42>
   db772:	f8d8 0000 	ldr.w	r0, [r8]
   db776:	f000 f847 	bl	db808 <__retarget_lock_release_recursive>
   db77a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   db782:	b34e      	cbz	r6, db7d8 <__register_exitproc+0x98>
   db784:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   db788:	b988      	cbnz	r0, db7ae <__register_exitproc+0x6e>
   db78a:	4b1c      	ldr	r3, [pc, #112]	; (db7fc <__register_exitproc+0xbc>)
   db78c:	b923      	cbnz	r3, db798 <__register_exitproc+0x58>
   db78e:	f8d8 0000 	ldr.w	r0, [r8]
   db792:	f000 f838 	bl	db806 <__retarget_lock_release>
   db796:	e7f0      	b.n	db77a <__register_exitproc+0x3a>
   db798:	f44f 7084 	mov.w	r0, #264	; 0x108
   db79c:	f7fc f940 	bl	d7a20 <malloc>
   db7a0:	2800      	cmp	r0, #0
   db7a2:	d0f4      	beq.n	db78e <__register_exitproc+0x4e>
   db7a4:	2300      	movs	r3, #0
   db7a6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   db7aa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   db7ae:	6863      	ldr	r3, [r4, #4]
   db7b0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   db7b4:	2201      	movs	r2, #1
   db7b6:	409a      	lsls	r2, r3
   db7b8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   db7bc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   db7c0:	4313      	orrs	r3, r2
   db7c2:	2e02      	cmp	r6, #2
   db7c4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   db7c8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   db7cc:	bf02      	ittt	eq
   db7ce:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   db7d2:	431a      	orreq	r2, r3
   db7d4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   db7d8:	6863      	ldr	r3, [r4, #4]
   db7da:	f8d8 0000 	ldr.w	r0, [r8]
   db7de:	1c5a      	adds	r2, r3, #1
   db7e0:	3302      	adds	r3, #2
   db7e2:	6062      	str	r2, [r4, #4]
   db7e4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   db7e8:	f000 f80e 	bl	db808 <__retarget_lock_release_recursive>
   db7ec:	2000      	movs	r0, #0
   db7ee:	e7c6      	b.n	db77e <__register_exitproc+0x3e>
   db7f0:	2003e7e0 	.word	0x2003e7e0
   db7f4:	2003e754 	.word	0x2003e754
   db7f8:	00000000 	.word	0x00000000
   db7fc:	000d7a21 	.word	0x000d7a21
   db800:	2003de8c 	.word	0x2003de8c

000db804 <__retarget_lock_acquire_recursive>:
   db804:	4770      	bx	lr

000db806 <__retarget_lock_release>:
   db806:	4770      	bx	lr

000db808 <__retarget_lock_release_recursive>:
   db808:	4770      	bx	lr

000db80a <link_code_end>:
	...

000db80c <dynalib_user>:
   db80c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db81c:	0000 0000 6e69 6176 696c 0064 7453 7261     ....invalid.Star
   db82c:	7574 2070 6f63 706d 656c 6574 7720 7469     tup complete wit
   db83c:	2068 7325 7420 6d69 2065 6e61 2064 6977     h %s time and wi
   db84c:	6874 6220 7461 6574 7972 2520 2e34 6632     th battery %4.2f
   db85c:	4600 6f72 206d 7325 7420 206f 7325 5300     .From %s to %s.S
   db86c:	6174 6574 5420 6172 736e 7469 6f69 006e     tate Transition.
   db87c:	6c53 6565 2070 6f66 2072 6925 7320 6365     Sleep for %i sec
   db88c:	6e6f 7364 3000 5700 6b6f 2065 6977 6874     onds.0.Woke with
   db89c:	7520 6573 2072 7562 7474 6e6f 2d20 6e20      user button - n
   db8ac:	726f 616d 206c 706f 7265 7461 6f69 736e     ormal operations
   db8bc:	4200 6361 206b 6e69 7420 6568 6d20 6961     .Back in the mai
   db8cc:	206e 6f6c 706f 2d20 7320 6375 6563 7373     n loop - success
   db8dc:	5300 6e65 2064 6166 6c69 6465 2d20 6720     .Send failed - g
   db8ec:	696f 676e 7420 206f 6573 646e 6520 6576     oing to send eve
   db8fc:	7972 6d20 6e69 7475 0065 0000               ry minute...

000db908 <_ZTV8MB85RC64>:
	...
   db910:	40d5 000d 40e9 000d 5d39 000d 5dcf 000d     .@...@..9]...]..
   db920:	5e51 000d 6e69 7469 6620 6961 656c 0064     Q^..init failed.
   db930:	6573 7474 6e69 2067 6f6e 6564 6e20 6d75     setting node num
   db940:	6562 2072 7361 4720 7461 7765 7961 4c00     ber as Gateway.L
   db950:	526f 2041 6152 6964 206f 6e69 7469 6169     oRA Radio initia
   db960:	696c 657a 2064 7361 4e20 646f 4e65 6d75     lized as NodeNum
   db970:	6562 2072 666f 2520 2069 6e61 2064 6544     ber of %i and De
   db980:	6976 6563 4449 6f20 2066 6925 6120 646e     viceID of %i and
   db990:	6120 6d20 6761 6369 6e20 6d75 6562 2072      a magic number 
   db9a0:	666f 2520 0069 6553 646e 6e69 2067 6164     of %i.Sending da
   db9b0:	6174 7220 7065 726f 2074 6f74 4720 7461     ta report to Gat
   db9c0:	7765 7961 7300 6e65 6964 676e 6d20 7365     eway.sending mes
   db9d0:	6173 6567 2520 0064 6144 6174 7220 7065     sage %d.Data rep
   db9e0:	726f 2074 6573 646e 7420 206f 6167 6574     ort send to gate
   db9f0:	6177 2079 7573 6363 7365 6673 6c75 796c     way successfully
   dba00:	4400 7461 2061 6572 6f70 7472 7320 6e65     .Data report sen
   dba10:	2064 6f74 4720 7461 7765 7961 6620 6961     d to Gateway fai
   dba20:	656c 0064 6552 6563 7669 6465 6620 6f72     led.Received fro
   dba30:	206d 6f6e 6564 2520 2064 6977 6874 7220     m node %d with r
   dba40:	7373 3d69 6425 2d20 6120 2520 2073 656d     ssi=%d - a %s me
   dba50:	7373 6761 2065 666f 6c20 6e65 7467 2068     ssage of length 
   dba60:	6425 5400 6d69 2065 6573 2074 6f74 2520     %d.Time set to %
   dba70:	2073 6e61 2064 656e 7478 7220 7065 726f     s and next repor
   dba80:	2074 7369 6920 206e 7525 7320 6365 6e6f     t is in %u secon
   dba90:	7364 4e00 206f 6572 6c70 2c79 6120 6572     ds.No reply, are
   dbaa0:	7420 6568 6720 7461 7765 7961 2073 7572      the gateways ru
   dbab0:	6e6e 6e69 3f67 6100 4e20 646f 4e65 6d75     nning?.a NodeNum
   dbac0:	6562 2072 7369 6e20 6565 6564 0064 6874     ber is needed.th
   dbad0:	2065 6c63 636f 206b 7369 6e20 746f 7320     e clock is not s
   dbae0:	7465 5300 6e65 6964 676e 6a20 696f 206e     et.Sending join 
   dbaf0:	6572 7571 7365 2074 6562 6163 7375 2065     request because 
   dbb00:	7325 5400 6d69 2065 6573 2074 6f74 2520     %s.Time set to %
   dbb10:	2c73 6e20 646f 2065 7369 2520 2064 6e61     s, node is %d an
   dbb20:	2064 656e 7478 7220 7065 726f 2074 7369     d next report is
   dbb30:	6920 206e 7525 7320 6365 6e6f 7364 4900      in %u seconds.I
   dbb40:	696e 6174 696c 697a 676e 7420 6568 7020     nitalizing the p
   dbb50:	6e69 6f4d 6564 0073 6e49 7469 6169 696c     inModes.Initiali
   dbb60:	697a 676e 5020 776f 7265 4320 6e6f 6966     zing Power Confi
   dbb70:	0067                                        g.

000dbb72 <BLUE_LED>:
   dbb72:	0007                                        ..

000dbb74 <BUTTON_PIN>:
   dbb74:	0004                                        ..

000dbb76 <RFM95_CS>:
   dbb76:	000e                                        ..

000dbb78 <RFM95_INT>:
   dbb78:	0002                                        ..

000dbb7a <TMP36_SENSE_PIN>:
   dbb7a:	000f 6579 0073 6f6e 4900 636e 6572 7361     ..yes.no.Increas
   dbb8a:	6e69 2067 6572 6f70 7472 6e69 2067 7266     ing reporting fr
   dbb9a:	7165 6575 636e 2079 6f74 3120 2032 696d     equency to 12 mi
   dbbaa:	756e 6574 0073 7349 4c20 776f 5020 776f     nutes.Is Low Pow
   dbbba:	7265 4d20 646f 2065 6573 3f74 2520 0073     er Mode set? %s.
   dbbca:	6f4d 6564 0000                              Mode..

000dbbd0 <_ZTVN5spark10LogHandlerE>:
	...
   dbbe0:	40a5 000d 4b29 000d                         .@..)K..

000dbbe8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   dbbf0:	4b35 000d 4b69 000d 9745 000d 4b2b 000d     5K..iK..E...+K..
   dbc00:	6f4c 6461 6e69 2067 7953 7473 6d65 4420     Loading System D
   dbc10:	6665 7561 746c 0073 6f4c 6461 6e69 2067     efaults.Loading 
   dbc20:	7973 7473 6d65 6420 6665 7561 746c 0073     system defaults.
   dbc30:	7973 5373 6174 7375 6f20 6a62 6365 2074     sysStaus object 
   dbc40:	7473 726f 6465 6120 646e 6820 7361 2068     stored and hash 
   dbc50:	7075 6164 6574 0064 7563 7272 6e65 2074     updated.current 
   dbc60:	626f 656a 7463 7320 6f74 6572 2064 6e61     object stored an
   dbc70:	2064 6168 6873 7520 6470 7461 6465 4900     d hash updated.I
   dbc80:	696e 6974 6c61 7a69 6e69 2067 6874 2065     nitializing the 
   dbc90:	624f 656a 7463 5320 6f74 6572 4600 4152     Object Store.FRA
   dbca0:	204d 696d 6d73 7461 6863 202c 7265 7361     M mismatch, eras
   dbcb0:	6e69 2067 6e61 2064 6f6c 6163 6966 676e     ing and locafing
   dbcc0:	6420 6665 7561 746c 2073 6669 6920 2074      defaults if it 
   dbcd0:	6863 6365 736b 6f20 7475 4600 4152 204d     checks out.FRAM 
   dbce0:	6e69 7469 6169 696c 657a 2c64 6c20 616f     initialized, loa
   dbcf0:	6964 676e 6f20 6a62 6365 7374 0000 0000     ding objects....

000dbd00 <_ZL17FRAMversionNumber>:
   dbd00:	0001 0000 6e55 6e6b 776f 006e 6f4e 656e     ....Unknown.None
   dbd10:	5700 4669 0069 5347 004d 4d55 5354 4300     .WiFi.GSM.UMTS.C
   dbd20:	4d44 0041 544c 0045 4549 4545 3038 3132     DMA.LTE.IEEE8021
   dbd30:	3435 4c00 4554 435f 5441 4d5f 0031 544c     54.LTE_CAT_M1.LT
   dbd40:	5f45 4143 5f54 424e 0031 6f4e 2074 6843     E_CAT_NB1.Not Ch
   dbd50:	7261 6967 676e 4300 6168 6772 6465 4400     arging.Charged.D
   dbd60:	7369 6863 7261 6967 676e 4600 7561 746c     ischarging.Fault
   dbd70:	4400 6369 6e6f 656e 7463 6465 2500 2073     .Diconnected.%s 
   dbd80:	3a53 3225 302e 2566 2c25 5120 253a 2e32     S:%2.0f%%, Q:%2.
   dbd90:	6630 2525 0020 6925 4320 4900 746e 7265     0f%% .%i C.Inter
   dbda0:	616e 206c 6554 706d 7265 7461 7275 2065     nal Temperature 
   dbdb0:	7369 2520 0073 0000 bd04 000d bd0c 000d     is %s...........
   dbdc0:	bd11 000d bd16 000d bd1a 000d bd1f 000d     ................
   dbdd0:	bd24 000d bd28 000d bd33 000d bd3e 000d     $...(...3...>...
   dbde0:	6166 6c69 6465 7420 206f 6572 6461 7220     failed to read r
   dbdf0:	6765 6441 7264 253d 3230 2078 6f63 6e75     egAddr=%02x coun
   dbe00:	3d74 7525 6600 6961 656c 2064 6f74 7220     t=%u.failed to r
   dbe10:	6165 2064 6572 4167 6464 3d72 3025 7832     ead regAddr=%02x
   dbe20:	7320 6174 3d74 6425 4600 554f 2054 6964      stat=%d.FOUT di
   dbe30:	2064 6f6e 2074 6f67 4820 4749 0048 6f6e     d not go HIGH.no
   dbe40:	2074 6564 6574 7463 6465 6600 6961 656c     t detected.faile
   dbe50:	2064 6f74 7720 6972 6574 7220 6765 6441     d to write regAd
   dbe60:	7264 253d 3230 2078 7473 7461 253d 0064     dr=%02x stat=%d.
   dbe70:	6573 5774 5444 2520 0064 6177 6374 6468     setWDT %d.watchd
   dbe80:	676f 6320 656c 7261 6465 6220 6552 7573     og cleared bResu
   dbe90:	746c 253d 0064 6177 6374 6468 676f 7320     lt=%d.watchdog s
   dbea0:	7465 6620 756f 5372 6365 3d73 6425 6220     et fourSecs=%d b
   dbeb0:	6552 7573 746c 253d 0064 6572 6573 4374     Result=%d.resetC
   dbec0:	6e6f 6966 2867 7830 3025 6c38 2978 5700     onfig(0x%08lx).W
   dbed0:	5441 4843 4f44 0047 4544 5045 505f 574f     ATCHDOG.DEEP_POW
   dbee0:	5245 445f 574f 004e 4f43 4e55 4454 574f     ER_DOWN.COUNTDOW
   dbef0:	5f4e 4954 454d 0052 4c41 5241 004d 6166     N_TIMER.ALARM.fa
   dbf00:	6c69 7275 2065 6e69 7520 6470 7461 5765     ilure in updateW
   dbf10:	6b61 5265 6165 6f73 206e 6425 7700 6b61     akeReason %d.wak
   dbf20:	2065 6572 7361 6e6f 3d20 2520 0073 3025     e reason = %s.%0
   dbf30:	6434 252d 3230 2d64 3025 6432 2520 3230     4d-%02d-%02d %02
   dbf40:	3a64 3025 6432 253a 3230 0064 6567 5274     d:%02d:%02d.getR
   dbf50:	6374 7341 6d54 2520 0073 6573 2074 7973     tcAsTm %s.set sy
   dbf60:	7473 6d65 6320 6f6c 6b63 6620 6f72 206d     stem clock from 
   dbf70:	5452 2043 7325 6600 6961 656c 2064 6f74     RTC %s.failed to
   dbf80:	6420 7465 6365 2074 4241 3831 3530 7300      detect AB1805.s
   dbf90:	7465 7452 4163 5473 206d 7325 6600 6961     etRtcAsTm %s.fai
   dbfa0:	756c 6572 6920 206e 6573 5274 6374 7246     lure in setRtcFr
   dbfb0:	6d6f 6d54 2520 0064 6573 2074 5452 2043     omTm %d.set RTC 
   dbfc0:	7266 6d6f 6320 6f6c 6475 2520 0073 7061     from cloud %s.ap
   dbfd0:	2e70 6261 3831 3530 0000 0000               p.ab1805....

000dbfdc <_ZTV6AB1805>:
	...
   dbfe4:	5211 000d 5213 000d 577f 000d 5805 000d     .R...R...W...X..
   dbff4:	7277 7469 4465 7461 2061 6166 6c69 6465     writeData failed
   dc004:	6420 7275 6e69 2067 7265 7361 2065 7266      during erase fr
   dc014:	6d61 6441 7264 253d 0075 0000               amAddr=%u...

000dc020 <_ZTV6MB85RC>:
	...
   dc028:	5c89 000d 5c8b 000d 5d39 000d 5dcf 000d     .\...\..9]...]..
   dc038:	5e51 000d                                   Q^..

000dc03c <_ZTV15RHGenericDriver>:
	...
   dc04c:	6009 000d 40a5 000d 40a5 000d 40a5 000d     .`...@...@...@..
   dc05c:	40a5 000d 606b 000d 600d 000d 60bb 000d     .@..k`...`...`..
   dc06c:	6089 000d 60df 000d 6017 000d 601f 000d     .`...`...`...`..
   dc07c:	6023 000d 6027 000d 602b 000d 602f 000d     #`..'`..+`../`..
   dc08c:	601b 000d 603b 000d 603f 000d 6043 000d     .`..;`..?`..C`..
   dc09c:	6047 000d 604b 000d 6051 000d 6055 000d     G`..K`..Q`..U`..
   dc0ac:	6017 000d 6059 000d 605f 000d 6065 000d     .`..Y`.._`..e`..

000dc0bc <_ZTV12RHGenericSPI>:
	...
   dc0c4:	40a5 000d 613d 000d 613f 000d 40a5 000d     .@..=a..?a...@..
   dc0d4:	40a5 000d 6147 000d 614b 000d 614f 000d     .@..Ga..Ka..Oa..
   dc0e4:	6141 000d 6143 000d 6145 000d 6564 6166     Aa..Ca..Ea..defa
   dc0f4:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   dc104:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   dc114:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   dc124:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000dc134 <_ZTVN8particle11SPISettingsE>:
	...
   dc13c:	6195 000d 6169 000d 616b 000d               .a..ia..ka..

000dc148 <_ZTV13RHHardwareSPI>:
	...
   dc150:	6249 000d 625d 000d 626b 000d 6279 000d     Ib..]b..kb..yb..
   dc160:	62e5 000d 6147 000d 614b 000d 614f 000d     .b..Ga..Ka..Oa..
   dc170:	62f3 000d 6307 000d 6315 000d               .b...c...c..

000dc17c <_ZTV6RHMesh>:
	...
   dc184:	63e5 000d 66ed 000d 6341 000d 632d 000d     .c...f..Ac..-c..

000dc194 <_ZTV8RHRouter>:
	...
   dc19c:	6953 000d 6997 000d                         Si...i..

000dc1a4 <_ZTV11RHSPIDriver>:
	...
   dc1b4:	6c35 000d 40a5 000d 40a5 000d 40a5 000d     5l...@...@...@..
   dc1c4:	40a5 000d 606b 000d 600d 000d 60bb 000d     .@..k`...`...`..
   dc1d4:	6089 000d 60df 000d 6017 000d 601f 000d     .`...`...`...`..
   dc1e4:	6023 000d 6027 000d 602b 000d 602f 000d     #`..'`..+`../`..
   dc1f4:	601b 000d 603b 000d 603f 000d 6043 000d     .`..;`..?`..C`..
   dc204:	6047 000d 604b 000d 6051 000d 6055 000d     G`..K`..Q`..U`..
   dc214:	6017 000d 6059 000d 605f 000d 6065 000d     .`..Y`.._`..e`..
   dc224:	6c61 000d 6c6b 000d                         al..kl..

000dc22c <_ZL18MODEM_CONFIG_TABLE>:
   dc22c:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000dc23c <_ZTV7RH_RF95>:
	...
   dc244:	6dd3 000d 6e0b 000d 72c9 000d 712f 000d     .m...n...r../q..
   dc254:	6e41 000d 7177 000d 6dcf 000d 606b 000d     An..wq...m..k`..
   dc264:	600d 000d 60bb 000d 6089 000d 60df 000d     .`...`...`...`..
   dc274:	6dd5 000d 601f 000d 6023 000d 6027 000d     .m...`..#`..'`..
   dc284:	602b 000d 602f 000d 601b 000d 603b 000d     +`../`...`..;`..
   dc294:	603f 000d 6043 000d 6047 000d 604b 000d     ?`..C`..G`..K`..
   dc2a4:	6051 000d 6055 000d 6e1b 000d 6059 000d     Q`..U`...n..Y`..
   dc2b4:	605f 000d 6065 000d 6c61 000d 6c6b 000d     _`..e`..al..kl..
   dc2c4:	6dcb 000d                                   .m..

000dc2c8 <_ZTVN5spark13CellularClassE>:
	...
   dc2d0:	7b9b 000d 7b91 000d 7b87 000d 7b3d 000d     .{...{...{..={..
   dc2e0:	7b7b 000d 7b6f 000d 9a9d 000d 9aa5 000d     {{..o{..........
   dc2f0:	7b63 000d 7b5b 000d 7b51 000d 7b47 000d     c{..[{..Q{..G{..
   dc300:	9ad5 000d                                   ....

000dc304 <_ZTV14CellularSignal>:
	...
   dc30c:	7c49 000d 7c71 000d 7c4b 000d 7c81 000d     I|..q|..K|...|..
   dc31c:	7cb5 000d 7ce1 000d 7d15 000d 7d65 000d     .|...|...}..e}..
   dc32c:	7c4f 000d 7c6b 000d fffc ffff 0000 0000     O|..k|..........
   dc33c:	7d8b 000d                                   .}..

000dc340 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc348:	7dab 000d 7db1 000d 7e01 000d 7dbf 000d     .}...}...~...}..
   dc358:	7dad 000d                                   .}..

000dc35c <_ZTVN5spark13EthernetClassE>:
	...
   dc364:	8377 000d 836d 000d 8363 000d 8359 000d     w...m...c...Y...
   dc374:	834d 000d 8341 000d 9a9d 000d 9aa5 000d     M...A...........
   dc384:	8335 000d 832d 000d 8323 000d 8319 000d     5...-...#.......
   dc394:	9ad5 000d                                   ....

000dc398 <_ZTV7TwoWire>:
	...
   dc3a0:	851b 000d 8565 000d 853d 000d 851d 000d     ....e...=.......
   dc3b0:	8545 000d 854d 000d 8555 000d 855d 000d     E...M...U...]...

000dc3c0 <_ZTV9IPAddress>:
	...
   dc3c8:	86c9 000d 86b9 000d 86bb 000d 2575 3430     ............u%04
   dc3d8:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   dc3e8:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   dc3f8:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   dc408:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   dc418:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   dc428:	6c69 2073 203d 0d00 000a 006d 0063 6e6c     ils = ....m.c.ln
   dc438:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.

000dc448 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dc450:	8b85 000d 8bab 000d 8b69 000d 87c9 000d     ........i.......

000dc460 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dc468:	8f61 000d 8f79 000d 9745 000d 4b2b 000d     a...y...E...+K..

000dc478 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dc480:	8f8d 000d 8fa1 000d 98e9 000d 8b71 000d     ............q...

000dc490 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dc498:	8b83 000d 8bb9 000d 9681 000d 8b73 000d     ............s...

000dc4a8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dc4b0:	8b81 000d 8bc7 000d 8ea9 000d 8be5 000d     ................

000dc4c0 <_ZTVN5spark12NetworkClassE>:
	...
   dc4c8:	9a5d 000d 9a67 000d 9a71 000d 9a7b 000d     ]...g...q...{...
   dc4d8:	9a85 000d 9a91 000d 9a9d 000d 9aa5 000d     ................
   dc4e8:	9aad 000d 9ab9 000d 9ac1 000d 9acb 000d     ................
   dc4f8:	9ad5 000d                                   ....

000dc4fc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   dc4fc:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   dc50c:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   dc51c:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   dc52c:	6c61 6469 002e 005a 2b25 3330 3a64 3025     alid..Z.%+03d:%0
   dc53c:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   dc54c:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000dc55c <_ZTV11USARTSerial>:
	...
   dc564:	a575 000d a5e3 000d a5bb 000d 9d1b 000d     u...............
   dc574:	a58b 000d a5a7 000d a599 000d a5b5 000d     ................
   dc584:	a577 000d a57d 000d                         w...}...

000dc58c <_ZTV9USBSerial>:
	...
   dc594:	a683 000d a6eb 000d a6c1 000d 9d1b 000d     ................
   dc5a4:	a6b3 000d a685 000d a695 000d a6e5 000d     ................
   dc5b4:	a6a5 000d a67d 000d                         ....}...

000dc5bc <_ZSt7nothrow>:
   dc5bc:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   dc5cc:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000dc5dd <day_name.6145>:
   dc5dd:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc5ed:	6972 6153                                    riSat

000dc5f2 <mon_name.6146>:
   dc5f2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc602:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc612:	4476 6365                                   vDec

000dc616 <_ctype_>:
   dc616:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc626:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc636:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc646:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc656:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc666:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc676:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc686:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc696:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc717 <link_const_variable_data_end>:
	...

000dc718 <link_constructors_location>:
   dc718:	000d4589 	.word	0x000d4589
   dc71c:	000d4a51 	.word	0x000d4a51
   dc720:	000d4d49 	.word	0x000d4d49
   dc724:	000d4e8d 	.word	0x000d4e8d
   dc728:	000d5205 	.word	0x000d5205
   dc72c:	000d5c01 	.word	0x000d5c01
   dc730:	000d631d 	.word	0x000d631d
   dc734:	000d7b2d 	.word	0x000d7b2d
   dc738:	000d7c19 	.word	0x000d7c19
   dc73c:	000d8381 	.word	0x000d8381
   dc740:	000d9735 	.word	0x000d9735
   dc744:	000d9ba9 	.word	0x000d9ba9
   dc748:	000d9e5d 	.word	0x000d9e5d
   dc74c:	000da2d5 	.word	0x000da2d5
   dc750:	000da561 	.word	0x000da561

000dc754 <link_constructors_end>:
	...
